<html>
<head>
<title>Minimal unsatisfiable and correction sets</title>
<link rel=StyleSheet href="style.css" type="text/css">
</head>
<body>

<h1>Enumeration of Minimal Unsatisfiable Cores and Maximal Satisfying Subsets</h1>

This tutorial illustrates how to use Z3 for extracting all minimal unsatisfiable cores
together with all maximal satisfying subsets. 

<h2>Origin</h2>
The algorithm that we describe next 
represents the essence of the core extraction procedure by Liffiton and Malik and independently 
by Previti and Marques-Silva:

<p>
<a target="_blank" href="http://www.iwu.edu/~mliffito/publications/cpaior13_liffiton_MARCO.pdf">
Enumerating Infeasibility: Finding Multiple MUSes Quickly</a><br>
Mark H. Liffiton and Ammar Malik<br>
in <i>Proc. 10<sup>th</sup> International Conference on Integration of Artificial 
Intelligence (AI) and Operations Research (OR) techniques in Constraint Programming</i> (CPAIOR-2013), 160-175, May 2013.
</p>

<p>
<a target="_blank" href="http://logos.ucd.ie/wiki/doku.php?id=emus">Partial MUS Enumeration</a><br>
Alessandro Previti, Joao Marques-Silva
in <i>Proc. AAAI-2013</i> July 2013
</p>

<h2>Z3py Features</h2>
This implementation contains no tuning. 
It was contributed by Mark Liffiton and it is a simplification of one of the versions available from
<a target="_blank" href="http://sun.iwu.edu/~mliffito/marco/">his Marco Polo Web site</a>. 
Code for eMUS is also <a target="_blank" href="http://logos.ucd.ie/wiki/doku.php?id=emus">available</a>.
The example illustrates the following features of Z3's Python-based API:

<ol>
<li> Using assumptions to track unsatisfiable cores.
<li> Using multiple solvers and passing constraints between them.
<li> Calling the C-based API from Python. Not all API functions are supported over the Python 
wrappers. This example shows how to get a unique integer identifier of an AST, 
which can be used as a key in a hash-table.
</ol>

<h2>Idea of the Algorithm</h2>
The main idea of the algorithm is to maintain two 
logical contexts and exchange information between them:

<ol>
<li>
The <em>MapSolver</em> is used to enumerate sets of clauses that are not already
supersets of an existing unsatisfiable core and not already a subset of a maximal satisfying assignment.
The <em>MapSolver</em> uses one unique atomic predicate per <em>soft</em> clause, so it enumerates
sets of atomic predicates. For each minimal unsatisfiable core, say, represented by predicates
<em>p<sub>1</sub>, p<sub>2</sub>, p<sub>5</sub></em>, the <em>MapSolver</em> contains the 
clause <em> &not; p<sub>1</sub> &or; &not; p<sub>2</sub> &or; &not; p<sub>5</sub></em>.
For each maximal satisfiable subset, say, represented by predicats
<em>p<sub>2</sub>, p<sub>3</sub>, p<sub>5</sub></em>, the 
<em>MapSolver</em> contains a clause corresponding to the disjunction of all literals
not in the maximal satisfiable subset, <em>p<sub>1</sub> &or; p<sub>4</sub> &or; p<sub>6</sub></em>. 

<li> The <em>SubsetSolver</em> contains a set
of soft clauses (clauses with the unique indicator atom occurring negated).
The <em>MapSolver</em> feeds it a set of clauses (the indicator atoms).
Recall that these are not already a superset of an existing minimal
unsatisfiable core, or a subset of a maximal satisfying assignment. 
If asserting these atoms makes the <em>SubsetSolver</em> context infeasible, 
then it finds a minimal unsatisfiable subset corresponding to these atoms.
If asserting the atoms is consistent with the <em>SubsetSolver</em>, then 
it extends this set of atoms maximally to a satisfying set.
</ol>

<p>

<pre pref="musmss" />

</body>
</html>
