(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x1065 () Bool)
(declare-fun x82 () Int)
(declare-fun x358 () Bool)
(declare-fun x18 () Int)
(declare-fun x278 () Int)
(declare-fun x684 () Int)
(declare-fun x799 () Int)
(declare-fun x783 () Int)
(declare-fun x253 () Bool)
(declare-fun x537 () Bool)
(declare-fun x1098 () Int)
(declare-fun x607 () Bool)
(declare-fun x384 () Bool)
(declare-fun x1023 () Bool)
(declare-fun x135 () Int)
(declare-fun x390 () Int)
(declare-fun x327 () Int)
(declare-fun x140 () Bool)
(declare-fun x70 () Int)
(declare-fun x564 () Bool)
(declare-fun x1133 () Int)
(declare-fun x138 () Int)
(declare-fun x734 () Int)
(declare-fun x4 () Int)
(declare-fun x26 () Int)
(declare-fun x261 () Bool)
(declare-fun x711 () Bool)
(declare-fun x985 () Bool)
(declare-fun x313 () Int)
(declare-fun x707 () Int)
(declare-fun x1042 () Bool)
(declare-fun x673 () Int)
(declare-fun x620 () Int)
(declare-fun x751 () Bool)
(declare-fun x88 () Int)
(declare-fun x715 () Bool)
(declare-fun x525 () Int)
(declare-fun x470 () Int)
(declare-fun x534 () Bool)
(declare-fun x404 () Int)
(declare-fun x243 () Int)
(declare-fun x852 () Int)
(declare-fun x87 () Bool)
(declare-fun x523 () Bool)
(declare-fun x249 () Bool)
(declare-fun x655 () Int)
(declare-fun x103 () Bool)
(declare-fun x676 () Bool)
(declare-fun x434 () Bool)
(declare-fun x653 () Int)
(declare-fun x283 () Bool)
(declare-fun x217 () Bool)
(declare-fun x360 (Int) Int)
(declare-fun x663 () Int)
(declare-fun x506 () Bool)
(declare-fun x234 () Bool)
(declare-fun x574 () Bool)
(declare-fun x816 (Int) Int)
(declare-fun x110 () Bool)
(declare-fun x913 () Int)
(declare-fun x621 () Int)
(declare-fun x260 () Bool)
(declare-fun x52 () Bool)
(declare-fun x54 () Int)
(declare-fun x923 () Int)
(declare-fun x281 () Bool)
(declare-fun x104 () Int)
(declare-fun x524 () Bool)
(declare-fun x410 () Bool)
(declare-fun x891 () Bool)
(declare-fun x1106 () Int)
(declare-fun x944 () Bool)
(declare-fun x145 () Bool)
(declare-fun x881 () Bool)
(declare-fun x702 () Int)
(declare-fun x1090 () Bool)
(declare-fun x900 (Int Int) Int)
(declare-fun x988 () Int)
(declare-fun x686 () Int)
(declare-fun x800 () Int)
(declare-fun x850 () Bool)
(declare-fun x1062 () Int)
(declare-fun x123 () Int)
(declare-fun x255 () Int)
(declare-fun x697 () Int)
(declare-fun x490 () Int)
(declare-fun x34 () Int)
(declare-fun x630 () Bool)
(declare-fun x636 () Bool)
(declare-fun x670 () Int)
(declare-fun x256 () Bool)
(declare-fun x609 () Bool)
(declare-fun x742 () Int)
(declare-fun x866 () Int)
(declare-fun x847 () Int)
(declare-fun x448 () Int)
(declare-fun x898 () Bool)
(declare-fun x785 () Int)
(declare-fun x326 () Bool)
(declare-fun x294 () Bool)
(declare-fun x1125 () Bool)
(declare-fun x748 () Bool)
(declare-fun x1085 () Bool)
(declare-fun x1018 () Int)
(declare-fun x29 () Int)
(declare-fun x96 () Int)
(declare-fun x726 () Bool)
(declare-fun x379 () Bool)
(declare-fun x75 () Bool)
(declare-fun x74 () Int)
(declare-fun x270 () Bool)
(declare-fun x329 () Bool)
(declare-fun x573 () Int)
(declare-fun x331 () Int)
(declare-fun x430 () Bool)
(declare-fun x817 () Int)
(declare-fun x1101 () Int)
(declare-fun x287 () Bool)
(declare-fun x363 () Bool)
(declare-fun x232 () Int)
(declare-fun x221 () Bool)
(declare-fun x623 () Int)
(declare-fun x139 () Bool)
(declare-fun x572 () Int)
(declare-fun x170 () Bool)
(declare-fun x355 () Bool)
(declare-fun x986 () Int)
(declare-fun x62 () Int)
(declare-fun x883 () Int)
(declare-fun x79 () Bool)
(declare-fun x132 () Int)
(declare-fun x55 () Int)
(declare-fun x905 () Bool)
(declare-fun x128 () Bool)
(declare-fun x71 () Bool)
(declare-fun x667 () Bool)
(declare-fun x1134 () Int)
(declare-fun x1015 () Int)
(declare-fun x180 () Int)
(declare-fun x1144 () Bool)
(declare-fun x462 () Int)
(declare-fun x775 () Int)
(declare-fun x580 () Int)
(declare-fun x453 () Bool)
(declare-fun x1100 () Bool)
(declare-fun x1054 () Int)
(declare-fun x557 () Bool)
(declare-fun x518 () Bool)
(declare-fun x50 () Int)
(declare-fun x226 () Int)
(declare-fun x515 () Int)
(declare-fun x505 () Bool)
(declare-fun x796 () Int)
(declare-fun x242 () Bool)
(declare-fun x2 () Bool)
(declare-fun x297 () Bool)
(declare-fun x304 () Int)
(declare-fun x1097 () Int)
(declare-fun x495 () Int)
(declare-fun x704 () Int)
(declare-fun x968 () Int)
(declare-fun x521 () Int)
(declare-fun x423 () Int)
(declare-fun x624 () Int)
(declare-fun x739 () Bool)
(declare-fun x1117 () Int)
(declare-fun x1021 () Int)
(declare-fun x519 () Int)
(declare-fun x406 () Bool)
(declare-fun x120 () Bool)
(declare-fun x728 () Bool)
(declare-fun x354 (Int) Int)
(declare-fun x1112 () Int)
(declare-fun x983 () Bool)
(declare-fun x424 () Bool)
(declare-fun x874 () Bool)
(declare-fun x517 () Int)
(declare-fun x498 () Bool)
(declare-fun x886 () Bool)
(declare-fun x1115 () Int)
(declare-fun x940 (Int) Int)
(declare-fun x690 () Int)
(declare-fun x1028 () Bool)
(declare-fun x587 () Int)
(declare-fun x340 () Bool)
(declare-fun x1036 () Int)
(declare-fun x440 () Bool)
(declare-fun x899 () Int)
(declare-fun x30 () Bool)
(declare-fun x247 () Bool)
(declare-fun x1039 () Int)
(declare-fun x367 () Int)
(declare-fun x712 () Int)
(declare-fun x212 () Int)
(declare-fun x957 () Int)
(declare-fun x645 () Int)
(declare-fun x626 () Int)
(declare-fun x870 () Int)
(declare-fun x516 () Bool)
(declare-fun x530 () Int)
(declare-fun x111 () Bool)
(declare-fun x1020 () Int)
(declare-fun x1145 () Int)
(declare-fun x159 () Int)
(declare-fun x522 () Int)
(declare-fun x830 () Bool)
(declare-fun x332 () Int)
(declare-fun x343 () Int)
(declare-fun x476 () Int)
(declare-fun x484 () Bool)
(declare-fun x903 () Bool)
(declare-fun x344 () Int)
(declare-fun x391 () Bool)
(declare-fun x359 () Bool)
(declare-fun x591 () Int)
(declare-fun x752 () Int)
(declare-fun x408 () Bool)
(declare-fun x714 () Int)
(declare-fun x990 () Int)
(declare-fun x596 () Int)
(declare-fun x1081 () Bool)
(declare-fun x1035 () Int)
(declare-fun x887 () Int)
(declare-fun x933 () Int)
(declare-fun x99 () Bool)
(declare-fun x1074 () Bool)
(declare-fun x401 () Bool)
(declare-fun x286 () Int)
(declare-fun x788 () Int)
(declare-fun x250 () Int)
(declare-fun x330 () Int)
(declare-fun x632 () Int)
(declare-fun x964 () Int)
(declare-fun x730 (Int) Int)
(declare-fun x1030 () Int)
(declare-fun x442 () Int)
(declare-fun x508 () Bool)
(declare-fun x164 () Int)
(declare-fun x1142 () Bool)
(declare-fun x1084 (Int) Int)
(declare-fun x600 () Bool)
(declare-fun x349 () Bool)
(declare-fun x1146 () Int)
(declare-fun x507 () Int)
(declare-fun x1022 () Int)
(declare-fun x547 () Int)
(declare-fun x840 () Bool)
(declare-fun x1063 () Bool)
(declare-fun x1120 () Bool)
(declare-fun x618 () Bool)
(declare-fun x888 () Int)
(declare-fun x766 () Bool)
(declare-fun x992 () Int)
(declare-fun x59 () Int)
(declare-fun x806 () Int)
(declare-fun x993 () Bool)
(declare-fun x901 () Int)
(declare-fun x357 () Int)
(declare-fun x319 () Bool)
(declare-fun x361 () Bool)
(declare-fun x288 () Bool)
(declare-fun x722 () Int)
(declare-fun x320 () Bool)
(declare-fun x831 () Int)
(declare-fun x787 () Int)
(declare-fun x928 () Bool)
(declare-fun x978 () Bool)
(declare-fun x815 () Int)
(declare-fun x576 () Bool)
(declare-fun x222 () Bool)
(declare-fun x396 () Int)
(declare-fun x668 () Int)
(declare-fun x842 () Int)
(declare-fun x1111 () Int)
(declare-fun x116 () Bool)
(declare-fun x418 () Int)
(declare-fun x533 () Bool)
(declare-fun x849 () Int)
(declare-fun x412 () Int)
(declare-fun x192 () Int)
(declare-fun x545 () Int)
(declare-fun x679 () Bool)
(declare-fun x337 () Bool)
(declare-fun x758 () Bool)
(declare-fun x171 () Bool)
(declare-fun x733 () Bool)
(declare-fun x575 () Bool)
(declare-fun x597 () Int)
(declare-fun x201 () Int)
(declare-fun x317 () Bool)
(declare-fun x89 () Bool)
(declare-fun x907 () Int)
(declare-fun x999 () Bool)
(declare-fun x837 () Bool)
(declare-fun x101 () Bool)
(declare-fun x798 () Bool)
(declare-fun x290 () Bool)
(declare-fun x695 () Int)
(declare-fun x567 () Int)
(declare-fun x713 () Int)
(declare-fun x181 () Int)
(declare-fun x51 () Bool)
(declare-fun x339 () Bool)
(declare-fun x601 () Int)
(declare-fun x419 () Int)
(declare-fun x1070 () Int)
(declare-fun x179 () Int)
(declare-fun x144 () Bool)
(declare-fun x475 () Int)
(declare-fun x764 () Bool)
(declare-fun x960 () Int)
(declare-fun x540 () Int)
(declare-fun x938 () Bool)
(declare-fun x1099 () Bool)
(declare-fun x107 () Bool)
(declare-fun x433 () Bool)
(declare-fun x862 () Int)
(declare-fun x504 () Int)
(declare-fun x274 () Int)
(declare-fun x28 () Int)
(declare-fun x858 () Int)
(declare-fun x246 (Int Int) Int)
(declare-fun x718 () Int)
(declare-fun x789 () Bool)
(declare-fun x1136 () Int)
(declare-fun x1092 () Bool)
(declare-fun x586 () Int)
(declare-fun x629 () Int)
(declare-fun x207 () Bool)
(declare-fun x1 () Int)
(declare-fun x33 () Int)
(declare-fun x910 () Int)
(declare-fun x146 (Int) Int)
(declare-fun x148 () Int)
(declare-fun x252 () Int)
(declare-fun x362 () Int)
(declare-fun x882 () Bool)
(declare-fun x1083 () Bool)
(declare-fun x150 () Int)
(declare-fun x275 () Int)
(declare-fun x417 () Int)
(declare-fun x1088 () Int)
(declare-fun x177 () Bool)
(declare-fun x6 () Bool)
(declare-fun x1056 () Int)
(declare-fun x951 () Int)
(declare-fun x182 () Int)
(declare-fun x509 () Bool)
(declare-fun x974 () Bool)
(declare-fun x736 () Int)
(declare-fun x835 () Bool)
(declare-fun x691 () Int)
(declare-fun x153 () Int)
(declare-fun x465 () Bool)
(declare-fun x392 () Bool)
(declare-fun x805 () Int)
(declare-fun x651 () Int)
(declare-fun x638 () Bool)
(declare-fun x1110 () Bool)
(declare-fun x1126 () Int)
(declare-fun x251 () Bool)
(declare-fun x605 () Int)
(declare-fun x1118 () Bool)
(declare-fun x1103 () Bool)
(declare-fun x5 () Int)
(declare-fun x1122 () Bool)
(declare-fun x946 () Bool)
(declare-fun x921 () Bool)
(declare-fun x1059 () Bool)
(declare-fun x478 () Int)
(declare-fun x872 () Int)
(declare-fun x930 () Int)
(declare-fun x617 () Bool)
(declare-fun x611 () Bool)
(declare-fun x461 () Bool)
(declare-fun x771 () Bool)
(declare-fun x137 () Int)
(declare-fun x309 () Bool)
(declare-fun x129 () Int)
(declare-fun x778 () Int)
(declare-fun x612 (Int Int) Int)
(declare-fun x380 () Bool)
(declare-fun x216 () Int)
(declare-fun x264 () Bool)
(declare-fun x650 () Bool)
(declare-fun x166 () Int)
(declare-fun x943 () Bool)
(declare-fun x94 () Int)
(declare-fun x558 () Bool)
(declare-fun x38 () Bool)
(declare-fun x285 () Int)
(declare-fun x277 () Bool)
(declare-fun x420 () Bool)
(declare-fun x602 () Int)
(declare-fun x725 () Int)
(declare-fun x855 () Int)
(declare-fun x19 () Int)
(declare-fun x374 () Int)
(declare-fun x674 () Int)
(declare-fun x224 () Int)
(declare-fun x1072 () Int)
(declare-fun x550 () Int)
(declare-fun x385 () Int)
(declare-fun x25 () Bool)
(declare-fun x450 () Bool)
(declare-fun x240 () Int)
(declare-fun x220 () Int)
(declare-fun x753 () Bool)
(declare-fun x614 () Int)
(declare-fun x569 () Int)
(declare-fun x377 () Int)
(declare-fun x14 () Bool)
(declare-fun x98 () Int)
(declare-fun x768 () Int)
(declare-fun x750 () Int)
(declare-fun x512 () Int)
(declare-fun x13 () Bool)
(declare-fun x117 () Bool)
(declare-fun x165 () Int)
(declare-fun x688 () Int)
(declare-fun x318 () Int)
(declare-fun x130 () Bool)
(declare-fun x1026 () Bool)
(declare-fun x189 () Bool)
(declare-fun x152 () Int)
(declare-fun x829 () Bool)
(declare-fun x302 () Int)
(declare-fun x1124 () Bool)
(declare-fun x776 () Bool)
(declare-fun x364 () Bool)
(declare-fun x749 () Int)
(declare-fun x790 () Int)
(declare-fun x895 () Int)
(declare-fun x720 () Int)
(declare-fun x894 () Int)
(declare-fun x929 () Int)
(declare-fun x1073 () Int)
(declare-fun x851 () Int)
(declare-fun x338 () Bool)
(declare-fun x345 () Int)
(declare-fun x78 () Int)
(declare-fun x11 () Int)
(declare-fun x342 () Int)
(declare-fun x1025 () Int)
(declare-fun x167 () Int)
(declare-fun x8 () Int)
(declare-fun x932 () Bool)
(declare-fun x942 () Bool)
(declare-fun x687 () Int)
(declare-fun x757 () Bool)
(declare-fun x1080 () Bool)
(declare-fun x794 () Bool)
(declare-fun x1128 () Int)
(declare-fun x244 () Bool)
(declare-fun x1045 () Bool)
(declare-fun x311 (Int) Int)
(declare-fun x541 () Bool)
(declare-fun x972 () Bool)
(declare-fun x772 () Int)
(declare-fun x897 () Int)
(declare-fun x229 () Int)
(declare-fun x594 () Int)
(declare-fun x308 () Int)
(declare-fun x1148 () Int)
(declare-fun x46 () Int)
(declare-fun x102 () Int)
(declare-fun x258 () Int)
(declare-fun x1016 () Int)
(declare-fun x237 () Bool)
(declare-fun x306 () Int)
(declare-fun x1033 () Int)
(declare-fun x954 () Int)
(declare-fun x387 (Int) Int)
(declare-fun x526 () Bool)
(declare-fun x169 () Bool)
(declare-fun x115 () Bool)
(declare-fun x365 () Bool)
(declare-fun x143 () Bool)
(declare-fun x425 () Int)
(declare-fun x233 () Bool)
(declare-fun x105 () Int)
(declare-fun x42 () Bool)
(declare-fun x10 () Int)
(declare-fun x456 () Bool)
(declare-fun x756 () Bool)
(declare-fun x945 () Int)
(declare-fun x486 () Bool)
(declare-fun x47 () Bool)
(declare-fun x781 () Int)
(declare-fun x908 () Int)
(declare-fun x639 () Int)
(declare-fun x348 () Bool)
(declare-fun x689 () Bool)
(declare-fun x716 () Int)
(declare-fun x269 () Bool)
(declare-fun x20 () Int)
(declare-fun x239 () Int)
(declare-fun x114 () Bool)
(declare-fun x40 () Bool)
(declare-fun x906 (Int) Int)
(declare-fun x761 () Int)
(declare-fun x963 () Int)
(declare-fun x1061 () Bool)
(declare-fun x646 () Int)
(declare-fun x877 () Int)
(declare-fun x827 () Int)
(declare-fun x69 () Bool)
(declare-fun x441 () Bool)
(declare-fun x7 () Int)
(declare-fun x27 () Bool)
(declare-fun x371 () Bool)
(declare-fun x481 () Int)
(declare-fun x535 () Bool)
(declare-fun x950 () Int)
(declare-fun x774 () Bool)
(declare-fun x352 () Int)
(declare-fun x60 () Bool)
(declare-fun x1135 () Int)
(declare-fun x1107 (Int) Int)
(declare-fun x741 () Bool)
(declare-fun x563 () Int)
(declare-fun x334 () Bool)
(declare-fun x802 () Int)
(declare-fun x931 () Int)
(declare-fun x936 () Int)
(declare-fun x647 () Int)
(declare-fun x782 () Int)
(declare-fun x956 () Bool)
(declare-fun x593 () Int)
(declare-fun x770 () Bool)
(declare-fun x65 () Int)
(declare-fun x706 () Bool)
(declare-fun x1012 () Int)
(declare-fun x997 () Bool)
(declare-fun x648 () Bool)
(declare-fun x677 () Bool)
(declare-fun x350 () Bool)
(declare-fun x39 () Bool)
(declare-fun x859 (Int Int) Int)
(declare-fun x608 () Int)
(declare-fun x292 () Bool)
(declare-fun x925 () Bool)
(declare-fun x37 () Bool)
(declare-fun x595 () Int)
(declare-fun x80 () Bool)
(declare-fun x223 () Int)
(declare-fun x549 () Int)
(declare-fun x813 () Bool)
(declare-fun x721 () Int)
(declare-fun x142 () Int)
(declare-fun x472 () Bool)
(declare-fun x984 () Int)
(declare-fun x556 () Bool)
(declare-fun x565 () Int)
(declare-fun x660 () Bool)
(declare-fun x1032 () Bool)
(declare-fun x801 () Bool)
(declare-fun x995 () Int)
(declare-fun x955 () Bool)
(declare-fun x457 () Bool)
(declare-fun x427 () Bool)
(declare-fun x1141 () Int)
(declare-fun x1051 () Bool)
(declare-fun x828 () Int)
(declare-fun x514 () Bool)
(declare-fun x204 () Int)
(declare-fun x333 () Int)
(declare-fun x754 () Int)
(declare-fun x1096 () Bool)
(declare-fun x658 () Int)
(declare-fun x1014 () Int)
(declare-fun x310 () Int)
(declare-fun x654 () Bool)
(declare-fun x719 () Bool)
(declare-fun x996 () Int)
(declare-fun x729 () Int)
(declare-fun x268 () Int)
(declare-fun x683 () Bool)
(declare-fun x826 () Bool)
(declare-fun x411 () Bool)
(declare-fun x803 (Int Int) Int)
(declare-fun x808 () Bool)
(declare-fun x154 (Int) Int)
(declare-fun x257 () Int)
(declare-fun x1038 () Bool)
(declare-fun x86 () Int)
(declare-fun x1131 () Bool)
(declare-fun x818 () Bool)
(declare-fun x823 () Bool)
(declare-fun x83 () Bool)
(declare-fun x22 () Bool)
(declare-fun x198 () Int)
(declare-fun x853 () Bool)
(declare-fun x422 () Int)
(declare-fun x737 () Int)
(declare-fun x227 () Bool)
(declare-fun x206 () Bool)
(declare-fun x163 () Int)
(declare-fun x16 () Int)
(declare-fun x896 () Bool)
(declare-fun x935 () Bool)
(declare-fun x31 () Bool)
(declare-fun x1047 () Int)
(declare-fun x1075 () Bool)
(declare-fun x869 () Int)
(declare-fun x1066 () Bool)
(declare-fun x979 () Int)
(declare-fun x426 () Bool)
(declare-fun x681 () Bool)
(declare-fun x112 () Int)
(declare-fun x44 () Int)
(declare-fun x692 () Int)
(declare-fun x248 () Bool)
(declare-fun x468 () Int)
(declare-fun x542 () Int)
(declare-fun x656 () Bool)
(declare-fun x312 () Int)
(declare-fun x641 (Int) Int)
(declare-fun x696 () Bool)
(declare-fun x1040 () Int)
(declare-fun x962 () Bool)
(declare-fun x1029 () Int)
(declare-fun x889 () Int)
(declare-fun x675 () Int)
(declare-fun x977 () Bool)
(declare-fun x375 () Bool)
(declare-fun x458 () Int)
(declare-fun x588 () Bool)
(declare-fun x810 () Bool)
(declare-fun x854 () Bool)
(declare-fun x941 () Int)
(declare-fun x61 () Int)
(declare-fun x779 () Int)
(declare-fun x24 () Int)
(declare-fun x529 () Int)
(declare-fun x188 () Int)
(declare-fun x631 () Int)
(declare-fun x196 () Bool)
(declare-fun x762 () Bool)
(declare-fun x546 () Bool)
(declare-fun x85 () Bool)
(declare-fun x108 () Bool)
(declare-fun x489 () Int)
(declare-fun x922 () Int)
(declare-fun x915 () Int)
(declare-fun x873 () Bool)
(declare-fun x876 () Int)
(declare-fun x45 () Int)
(declare-fun x723 () Int)
(declare-fun x389 () Bool)
(declare-fun x538 () Bool)
(declare-fun x880 () Int)
(declare-fun x43 () Bool)
(declare-fun x832 () Bool)
(declare-fun x376 () Int)
(declare-fun x9 () Int)
(declare-fun x63 () Int)
(declare-fun x157 () Int)
(declare-fun x809 () Int)
(declare-fun x315 () Bool)
(declare-fun x265 () Int)
(declare-fun x745 () Bool)
(declare-fun x846 () Int)
(declare-fun x769 () Bool)
(declare-fun x421 () Bool)
(declare-fun x126 () Bool)
(declare-fun x731 () Int)
(declare-fun x825 () Bool)
(declare-fun x532 () Bool)
(declare-fun x289 () Bool)
(declare-fun x372 () Int)
(declare-fun x335 () Int)
(declare-fun x763 () Int)
(declare-fun x435 () Bool)
(declare-fun x432 () Bool)
(declare-fun x214 () Bool)
(declare-fun x657 () Int)
(declare-fun x965 () Bool)
(declare-fun x1079 () Bool)
(declare-fun x560 () Int)
(declare-fun x35 () Int)
(declare-fun x485 () Int)
(declare-fun x628 () Int)
(declare-fun x701 () Bool)
(declare-fun x100 () Bool)
(declare-fun x1113 () Bool)
(declare-fun x912 () Bool)
(declare-fun x299 () Bool)
(declare-fun x125 () Int)
(declare-fun x414 () Int)
(declare-fun x205 () Bool)
(declare-fun x857 () Int)
(declare-fun x280 () Int)
(declare-fun x685 () Int)
(declare-fun x1069 () Int)
(declare-fun x717 () Int)
(declare-fun x582 () Int)
(declare-fun x300 () Int)
(declare-fun x969 () Int)
(declare-fun x793 () Bool)
(declare-fun x1078 () Int)
(declare-fun x1007 () Int)
(declare-fun x780 () Int)
(declare-fun x708 () Int)
(declare-fun x924 () Int)
(declare-fun x477 () Bool)
(declare-fun x577 () Bool)
(declare-fun x759 () Bool)
(declare-fun x296 () Bool)
(declare-fun x885 () Int)
(declare-fun x669 () Int)
(declare-fun x271 () Bool)
(declare-fun x449 () Bool)
(declare-fun x493 () Bool)
(declare-fun x937 () Int)
(declare-fun x1046 () Bool)
(declare-fun x500 () Bool)
(declare-fun x386 () Bool)
(declare-fun x155 (Int) Int)
(declare-fun x151 () Int)
(declare-fun x1147 () Bool)
(declare-fun x622 () Int)
(declare-fun x661 () Bool)
(declare-fun x263 () Int)
(declare-fun x606 () Bool)
(declare-fun x1086 () Int)
(declare-fun x1071 () Int)
(declare-fun x1053 () Int)
(declare-fun x797 () Int)
(declare-fun x491 () Bool)
(declare-fun x644 () Bool)
(declare-fun x369 () Int)
(declare-fun x12 () Bool)
(declare-fun x1001 (Int Int) Int)
(declare-fun x68 () Bool)
(declare-fun x503 () Bool)
(declare-fun x973 () Int)
(declare-fun x131 () Int)
(declare-fun x918 () Bool)
(declare-fun x199 () Bool)
(declare-fun x273 () Int)
(declare-fun x402 () Bool)
(declare-fun x571 () Bool)
(declare-fun x671 () Int)
(declare-fun x156 () Int)
(declare-fun x994 () Bool)
(declare-fun x665 (Int) Int)
(declare-fun x682 () Int)
(declare-fun x474 () Int)
(declare-fun x341 () Int)
(declare-fun x447 () Bool)
(declare-fun x552 () Int)
(declare-fun x307 (Int) Int)
(declare-fun x141 () Int)
(declare-fun x856 () Int)
(declare-fun x871 () Bool)
(declare-fun x492 () Int)
(declare-fun x966 () Bool)
(declare-fun x1009 () Int)
(declare-fun x551 () Bool)
(declare-fun x178 () Int)
(declare-fun x162 () Bool)
(declare-fun x1002 () Bool)
(declare-fun x561 () Bool)
(declare-fun x176 () Bool)
(declare-fun x1127 () Int)
(declare-fun x991 () Bool)
(declare-fun x513 () Int)
(declare-fun x531 () Bool)
(declare-fun x890 () Bool)
(declare-fun x705 () Int)
(declare-fun x202 () Bool)
(declare-fun x370 () Int)
(declare-fun x231 () Int)
(declare-fun x429 () Bool)
(declare-fun x121 () Bool)
(declare-fun x303 () Bool)
(declare-fun x409 () Int)
(declare-fun x1087 () Bool)
(declare-fun x709 () Int)
(declare-fun x527 () Bool)
(declare-fun x740 () Int)
(declare-fun x494 () Bool)
(declare-fun x245 () Bool)
(declare-fun x466 () Bool)
(declare-fun x666 () Bool)
(declare-fun x446 () Bool)
(declare-fun x1123 () Bool)
(declare-fun x81 () Int)
(declare-fun x1105 () Int)
(declare-fun x416 () Int)
(declare-fun x122 () Int)
(declare-fun x480 () Int)
(declare-fun x619 () Bool)
(declare-fun x555 () Int)
(declare-fun x710 () Bool)
(declare-fun x1058 () Int)
(declare-fun x693 () Int)
(declare-fun x603 () Bool)
(declare-fun x585 () Int)
(declare-fun x678 () Int)
(declare-fun x698 (Int) Int)
(declare-fun x536 () Int)
(declare-fun x566 () Int)
(declare-fun x747 () Int)
(declare-fun x1010 () Int)
(declare-fun x767 () Bool)
(declare-fun x961 () Int)
(declare-fun x124 () Int)
(declare-fun x469 () Int)
(declare-fun x589 () Int)
(declare-fun x488 () Bool)
(declare-fun x615 () Int)
(declare-fun x1114 () Bool)
(declare-fun x325 () Int)
(declare-fun x1139 () Int)
(declare-fun x64 () Bool)
(declare-fun x510 () Bool)
(declare-fun x1008 () Int)
(declare-fun x1129 () Int)
(declare-fun x322 () Bool)
(declare-fun x592 () Int)
(declare-fun x584 () Bool)
(declare-fun x49 () Int)
(declare-fun x570 (Int) Int)
(declare-fun x843 () Int)
(declare-fun x1017 () Int)
(declare-fun x998 () Bool)
(declare-fun x927 () Bool)
(declare-fun x604 () Int)
(declare-fun x1143 () Bool)
(declare-fun x291 () Bool)
(declare-fun x865 () Bool)
(declare-fun x467 () Int)
(declare-fun x649 () Bool)
(declare-fun x191 () Bool)
(declare-fun x403 () Int)
(declare-fun x893 () Bool)
(declare-fun x381 () Bool)
(declare-fun x109 () Int)
(declare-fun x724 () Int)
(declare-fun x219 () Int)
(declare-fun x119 () Bool)
(declare-fun x454 () Bool)
(declare-fun x1011 () Int)
(declare-fun x382 () Bool)
(declare-fun x161 (Int) Int)
(declare-fun x755 () Bool)
(declare-fun x455 () Int)
(declare-fun x598 () Bool)
(declare-fun x634 () Int)
(declare-fun x976 () Int)
(declare-fun x694 () Int)
(declare-fun x136 () Int)
(declare-fun x1095 () Int)
(declare-fun x72 () Int)
(declare-fun x917 () Bool)
(declare-fun x1057 () Int)
(declare-fun x795 () Bool)
(declare-fun x323 () Bool)
(declare-fun x820 () Bool)
(declare-fun x1104 () Bool)
(declare-fun x1006 (Int) Int)
(declare-fun x92 () Int)
(declare-fun x67 () Int)
(declare-fun x195 () Bool)
(declare-fun x786 () Int)
(declare-fun x209 () Int)
(declare-fun x1082 () Int)
(declare-fun x236 () Int)
(declare-fun x471 () Bool)
(declare-fun x106 () Int)
(declare-fun x971 () Int)
(declare-fun x952 () Bool)
(declare-fun x366 () Int)
(declare-fun x672 () Bool)
(declare-fun x487 () Bool)
(declare-fun x559 () Bool)
(declare-fun x208 () Int)
(declare-fun x66 () Bool)
(declare-fun x914 () Int)
(declare-fun x373 () Int)
(declare-fun x948 () Int)
(declare-fun x848 () Int)
(declare-fun x1130 () Int)
(declare-fun x149 () Int)
(declare-fun x664 () Bool)
(declare-fun x1019 () Bool)
(declare-fun x186 () Bool)
(declare-fun x463 () Bool)
(declare-fun x91 () Int)
(declare-fun x499 () Bool)
(declare-fun x659 () Bool)
(declare-fun x1089 () Bool)
(declare-fun x703 () Bool)
(declare-fun x732 () Int)
(declare-fun x616 () Bool)
(declare-fun x23 () Int)
(declare-fun x238 () Int)
(declare-fun x397 () Bool)
(declare-fun x878 () Bool)
(declare-fun x919 () Int)
(declare-fun x444 () Bool)
(declare-fun x562 () Bool)
(declare-fun x528 () Bool)
(declare-fun x56 () Int)
(declare-fun x97 () Int)
(declare-fun x777 () Int)
(declare-fun x190 () Int)
(declare-fun x393 () Int)
(declare-fun x949 () Int)
(declare-fun x501 () Bool)
(declare-fun x235 () Int)
(declare-fun x133 () Int)
(declare-fun x428 () Bool)
(declare-fun x460 () Bool)
(declare-fun x544 () Bool)
(declare-fun x399 () Int)
(declare-fun x1055 () Int)
(declare-fun x1109 () Int)
(declare-fun x1034 () Bool)
(declare-fun x77 () Int)
(declare-fun x324 () Int)
(declare-fun x431 () Bool)
(declare-fun x305 () Int)
(declare-fun x316 () Int)
(declare-fun x200 () Bool)
(declare-fun x185 () Bool)
(declare-fun x443 () Int)
(declare-fun x680 () Bool)
(declare-fun x814 () Int)
(declare-fun x21 () Bool)
(declare-fun x875 () Int)
(declare-fun x1149 () Bool)
(declare-fun x834 () Bool)
(declare-fun x699 () Int)
(declare-fun x346 () Int)
(declare-fun x958 () Int)
(declare-fun x599 () Bool)
(declare-fun x482 () Int)
(declare-fun x821 () Int)
(declare-fun x863 () Bool)
(declare-fun x824 () Int)
(declare-fun x980 () Bool)
(declare-fun x868 () Int)
(declare-fun x17 () Int)
(declare-fun x841 () Bool)
(declare-fun x439 () Int)
(declare-fun x860 () Int)
(declare-fun x266 () Bool)
(declare-fun x1049 () Bool)
(declare-fun x272 () Int)
(declare-fun x351 () Int)
(declare-fun x347 () Int)
(declare-fun x1027 () Bool)
(declare-fun x1013 () Int)
(declare-fun x451 () Bool)
(declare-fun x438 () Int)
(declare-fun x1003 () Bool)
(declare-fun x934 () Bool)
(declare-fun x210 () Bool)
(declare-fun x792 () Bool)
(declare-fun x127 () Bool)
(declare-fun x174 () Int)
(declare-fun x578 () Bool)
(declare-fun x76 () Bool)
(declare-fun x819 () Bool)
(declare-fun x241 () Bool)
(declare-fun x175 () Int)
(declare-fun x1037 () Int)
(declare-fun x1005 () Int)
(declare-fun x1132 () Bool)
(declare-fun x902 () Int)
(declare-fun x583 () Int)
(declare-fun x1077 () Bool)
(declare-fun x635 () Int)
(declare-fun x1119 () Bool)
(declare-fun x218 () Int)
(declare-fun x415 () Int)
(define-fun x187 ((x445 Int)) Int (ite (and (>= x445 0) (< x445 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x445 (- x445 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x73 ((x445 Int)) Int (ite (and (> 0 x445) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x445)) (+ x445 115792089237316195423570985008687907853269984665640564039457584007913129639936) x445))
(define-fun x1041 ((x445 Int)) Int (ite (and (< x445 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x445)) x445 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x445) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x445)) (- x445 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x445) (< x445 0)) (+ x445 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x803 x445 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x388 ((x804 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x804) (<= 0 x804)))
(define-fun x502 ((x804 Int)) Bool (and (< x804 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x804 0)))
(define-fun x581 ((x804 Int)) Bool (and (= x804 (x859 x804 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x859 115792089237316195423570985008687907853269984665640564039457584007913129639935 x804) x804)))
(define-fun x807 ((x804 Int)) Bool (and (= 0 (x859 0 x804)) (= 0 (x859 x804 0))))
(define-fun x197 ((x804 Int)) Bool (= x804 (x859 x804 x804)))
(define-fun x1151 ((x804 Int)) Bool (and (x197 x804) (x581 x804) (x807 x804)))
(define-fun x473 ((x804 Int) (x554 Int)) Bool (= (x859 x554 x804) (x859 x804 x554)))
(define-fun x32 ((x804 Int) (x554 Int)) Bool (and (=> (<= 0 x554) (<= (x859 x804 x554) x554)) (=> (<= 0 x804) (>= x804 (x859 x804 x554))) (>= (x859 x804 x554) 0)))
(define-fun x773 ((x804 Int) (x554 Int)) Bool (and (x32 x804 x554) (x473 x804 x554)))
(define-fun x160 ((x804 Int)) Bool (= (+ (x803 x804 32) (x859 x804 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x1041 x804)))
(define-fun x539 ((x804 Int)) Bool (and (x773 x804 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x160 x804)))
(define-fun x353 ((x804 Int) (x554 Int)) Bool (and (> x554 (x803 x804 x554)) (>= (x803 x804 x554) 0)))
(define-fun x822 ((x804 Int) (x554 Int)) Bool (=> (and (< 0 x554) (>= x804 0)) (= (< x804 x554) (= x804 (x803 x804 x554)))))
(define-fun x395 ((x804 Int) (x554 Int)) Bool (=> (and (> x554 0) (and (< x804 (+ x554 x554)) (>= x804 x554))) (= (- x804 x554) (x803 x804 x554))))
(define-fun x861 ((x804 Int)) Bool (= (x803 0 x804) 0))
(define-fun x836 ((x804 Int)) Bool (= 0 (x803 x804 1)))
(define-fun x613 ((x804 Int)) Bool (= (x803 x804 x804) 0))
(define-fun x259 ((x804 Int)) Bool (and (x613 x804) (x836 x804) (x861 x804)))
(define-fun x633 ((x804 Int) (x554 Int)) Bool (=> (and (< 0 x554) (< 0 x804)) (= (< (x900 x804 x554) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x1001 (x1041 (x900 x804 x554)) x804) x554))))
(define-fun x194 ((x804 Int) (x554 Int)) Bool (=> (and (not (= x804 0)) (not (= 0 x554))) (and (= x804 (x1001 (x900 x804 x554) x554)) (= x554 (x1001 (x900 x804 x554) x804)))))
(define-fun x1121 ((x804 Int) (x554 Int)) Bool (=> (and (> x554 0) (> x804 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x900 x804 x554)) (< (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639935 x804) x554))))
(define-fun x228 ((x804 Int) (x554 Int)) Bool (and (= (x1041 (x900 (- x804 115792089237316195423570985008687907853269984665640564039457584007913129639936) x554)) (x1041 (x900 x804 x554))) (= (x1041 (x900 x804 x554)) (x1041 (x900 (- x804 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x554 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x1041 (x900 x804 x554)) (x1041 (x900 x804 (- x554 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x520 ((x804 Int) (x554 Int)) Bool (and (=> (and (and (<= x804 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x804 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x554 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x554 0))) (= (>= (x900 (- x804 115792089237316195423570985008687907853269984665640564039457584007913129639936) x554) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x1001 57896044618658097711785492504343953926634992332820282019728792003956564819968 x554) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x804)))) (=> (and (and (< 0 x554) (<= x554 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x804) (> x804 0))) (= (>= (x1001 57896044618658097711785492504343953926634992332820282019728792003956564819967 x554) x804) (<= (x900 x804 x554) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (<= x804 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x804)) (and (> x554 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x554 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x1001 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x804)) (<= (x900 (- x804 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x554 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x554 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x554)) (and (> x804 0) (<= x804 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x900 x804 (- x554 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x1001 57896044618658097711785492504343953926634992332820282019728792003956564819968 x804) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554))))))
(define-fun x479 ((x804 Int)) Bool (and (= (x900 0 x804) 0) (= 0 (x900 x804 0))))
(define-fun x920 ((x804 Int)) Bool (and (= (x900 x804 1) x804) (= (x900 1 x804) x804)))
(define-fun x975 ((x804 Int)) Bool (and (x479 x804) (x920 x804)))
(define-fun x838 ((x804 Int)) Bool (= (x859 x804 1461501637330902918203684832716283019655932542975) (x803 x804 1461501637330902918203684832716283019655932542976)))
(define-fun x276 ((x804 Int)) Bool (and (x838 x804) (x773 x804 1461501637330902918203684832716283019655932542975)))
(define-fun x213 ((x625 Int)) Int (ite (< x625 x333) (x1107 x625) 0))
(define-fun x394 ((x625 Int)) Int (x940 x625))
(define-fun x436 ((x625 Int)) Int (ite (= x625 x971) x374 (x161 x625)))
(define-fun x884 ((x625 Int)) Int (ite (= x788 x625) x629 (x436 x625)))
(define-fun x215 ((x625 Int)) Int (ite (= 128 x625) x831 (x641 x625)))
(define-fun x58 ((x625 Int)) Int (ite (and (>= x625 160) (< x625 (+ 160 x831))) (x940 (+ x404 (- x625 160))) (x215 x625)))
(define-fun x36 ((x625 Int)) Int (ite (= x625 x63) 0 (x58 x625)))
(define-fun x158 ((x625 Int)) Int (ite (= x625 x490) x28 (x36 x625)))
(define-fun x735 ((x625 Int)) Int (ite (and (< x625 (+ x1037 x28)) (<= x1037 x625)) (x940 (+ x306 (- x625 x1037))) (x158 x625)))
(define-fun x134 ((x625 Int)) Int (ite (= x720 x625) 0 (x735 x625)))
(define-fun x84 ((x625 Int)) Int (ite (= x625 x697) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x134 x625)))
(define-fun x967 ((x625 Int)) Int (ite (= x625 x529) 160 (x84 x625)))
(define-fun x298 ((x625 Int)) Int (ite (= x625 x304) x305 (x967 x625)))
(define-fun x1091 ((x625 Int)) Int (ite (= x403 x625) x412 (x298 x625)))
(define-fun x511 ((x625 Int)) Int (ite (= x625 x396) x777 (x1091 x625)))
(define-fun x225 ((x625 Int)) Int (ite (= x625 x1101) x414 (x511 x625)))
(define-fun x93 ((x625 Int)) Int (ite (= x695 x625) x1112 (x225 x625)))
(define-fun x1043 ((x625 Int)) Int (ite x893 (x225 x625) (ite x759 (x511 x625) (ite x493 (x1091 x625) (ite x558 (x298 x625) (x93 x625))))))
(define-fun x1140 ((x625 Int)) Int (ite (= x1115 x625) 0 (x1043 x625)))
(define-fun x844 ((x625 Int)) Int (ite x1080 (x1043 x625) (x1140 x625)))
(define-fun x760 ((x625 Int)) Int (ite (= x597 x625) x373 (x844 x625)))
(define-fun x398 ((x625 Int)) Int (ite (= x275 x625) x313 (x760 x625)))
(define-fun x95 ((x625 Int)) Int (ite (= x625 x862) x1057 (x398 x625)))
(define-fun x833 ((x625 Int)) Int (ite (= x257 x625) x937 (x95 x625)))
(define-fun x1052 ((x625 Int)) Int (ite (= x625 x136) x285 (x833 x625)))
(define-fun x864 ((x625 Int)) Int (ite (= x625 x376) x1082 (x1052 x625)))
(define-fun x293 ((x625 Int)) Int (ite x31 (x1052 x625) (ite x162 (x833 x625) (ite x119 (x95 x625) (ite x454 (x398 x625) (x864 x625))))))
(define-fun x1068 ((x625 Int)) Int (ite (= x625 x33) 0 (x293 x625)))
(define-fun x791 ((x625 Int)) Int (ite x337 (x293 x625) (x1068 x625)))
(define-fun x1044 ((x625 Int)) Int (ite (= x302 x625) x1053 (x791 x625)))
(define-fun x230 ((x625 Int)) Int (ite (= x17 x625) x868 (x1044 x625)))
(define-fun x203 ((x625 Int)) Int (ite (= x458 x625) x675 (x230 x625)))
(define-fun x53 ((x625 Int)) Int (ite (= x625 x418) x814 (x203 x625)))
(define-fun x845 ((x625 Int)) Int (ite (= x1005 x625) x67 (x53 x625)))
(define-fun x48 ((x625 Int)) Int (ite (= x910 x625) x150 (x845 x625)))
(define-fun x553 ((x625 Int)) Int (ite (= x605 x625) x137 (x48 x625)))
(define-fun x989 ((x625 Int)) Int (ite x503 (x48 x625) (ite x1046 (x845 x625) (ite x491 (x53 x625) (ite x110 (x203 x625) (x553 x625))))))
(define-fun x1108 ((x625 Int)) Int (ite (= x625 x238) x883 (x989 x625)))
(define-fun x405 ((x625 Int)) Int (ite (= x625 x750) x124 (x1108 x625)))
(define-fun x1031 ((x625 Int)) Int (ite (= x65 x625) x842 (x405 x625)))
(define-fun x700 ((x625 Int)) Int (ite (= x625 x318) x7 (x1031 x625)))
(define-fun x746 ((x625 Int)) Int (ite (and (>= x625 x425) (< x625 (+ x425 x7))) (x940 (+ (- x625 x425) x332)) (x700 x625)))
(define-fun x295 ((x625 Int)) Int (ite (= x817 x625) 0 (x746 x625)))
(define-fun x627 ((x625 Int)) Int (ite x650 (x405 x625) (x295 x625)))
(define-fun x926 ((x625 Int)) Int (ite (= x625 x697) x88 (x627 x625)))
(define-fun x336 ((x625 Int)) Int (ite x355 (x627 x625) (ite x244 (x926 x625) (x627 x625))))
(define-fun x254 ((x625 Int)) Int (ite (= x625 x201) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x336 x625)))
(define-fun x356 ((x625 Int)) Int (ite (and (<= x201 x625) (< x625 (+ 32 x201))) (x311 (+ (- x625 x201) 0)) (x254 x625)))
(define-fun x383 ((x625 Int)) Int (ite (and (<= 196 x625) (< x625 (+ 196 (x73 (- x586 196))))) (x627 (+ (- x625 196) (x187 (+ x697 196)))) (x213 x625)))
(define-fun x1137 ((x625 Int)) Int (ite (= 128 x625) x626 (x665 x625)))
(define-fun x839 ((x625 Int)) Int (ite (and (> (+ x626 160) x625) (>= x625 160)) (x383 (+ 196 (- x625 160))) (x1137 x625)))
(define-fun x118 ((x625 Int)) Int (ite (= x482 x625) 0 (x839 x625)))
(define-fun x784 ((x625 Int)) Int (ite (= x875 x625) x809 (x118 x625)))
(define-fun x652 ((x625 Int)) Int (ite (and (<= x936 x625) (< x625 (+ x936 x809))) (x383 (+ (- x625 x936) x1056)) (x784 x625)))
(define-fun x579 ((x625 Int)) Int (ite (= x393 x625) 0 (x652 x625)))
(define-fun x543 ((x625 Int)) Int (ite (= x1097 x625) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x579 x625)))
(define-fun x407 ((x625 Int)) Int (ite (= x625 x1097) x623 (x543 x625)))
(define-fun x90 ((x625 Int)) Int (ite (= x788 x625) x902 (x884 x625)))
(define-fun x301 ((x625 Int)) Int (ite (= x669 x625) x899 (x90 x625)))
(define-fun x743 ((x625 Int)) Int (ite (and (<= x674 x625) (< x625 (+ 0 x674))) (x307 (+ (- x625 x674) 0)) (x407 x625)))
(define-fun x1076 ((x625 Int)) Int (ite x499 (x407 x625) (ite x1032 (x743 x625) (x407 x625))))
(define-fun x1050 ((x625 Int)) Int (ite x499 (x354 x625) (x307 x625)))
(define-fun x867 ((x625 Int)) Int (ite (= x674 x625) x369 (x1076 x625)))
(define-fun x267 ((x625 Int)) Int (ite (and (<= x29 x625) (< x625 (+ x369 x29))) (x1050 (+ 0 (- x625 x29))) (x867 x625)))
(define-fun x168 ((x625 Int)) Int (ite x1032 (x570 x625) (x301 x625)))
(define-fun x483 ((x625 Int)) Int (ite (= x625 x669) x969 (x168 x625)))
(define-fun x172 ((x625 Int)) Int (ite (= x788 x625) x345 (x483 x625)))
(define-fun x452 ((x625 Int)) Int (ite x428 (x884 x625) (ite x499 (x884 x625) (ite x214 (x168 x625) (x172 x625)))))
(define-fun x413 ((x625 Int)) Int (ite x428 (x579 x625) (ite x681 (x1076 x625) (x267 x625))))
(define-fun x953 ((x625 Int)) Int (ite (= x625 x788) x876 (x452 x625)))
(define-fun x1150 ((x625 Int)) Int (ite (= x866 x625) x239 (x953 x625)))
(define-fun x643 ((x625 Int)) Int (ite (= x625 x866) x343 (x1150 x625)))
(define-fun x981 ((x625 Int)) Int (ite (= x625 x788) x692 (x643 x625)))
(define-fun x1093 ((x625 Int)) Int (ite (= x625 x589) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x413 x625)))
(define-fun x1102 ((x625 Int)) Int (ite (= x625 x858) 192 (x1093 x625)))
(define-fun x437 ((x625 Int)) Int (ite (= x23 x625) x419 (x1102 x625)))
(define-fun x183 ((x625 Int)) Int (ite (= x625 x725) x986 (x437 x625)))
(define-fun x959 ((x625 Int)) Int (ite (= x625 x327) x847 (x183 x625)))
(define-fun x57 ((x625 Int)) Int (ite (= x409 x625) x175 (x959 x625)))
(define-fun x637 ((x625 Int)) Int (ite x309 (x360 x625) (x981 x625)))
(define-fun x1094 ((x625 Int)) Int (ite x609 (x637 x625) (ite x260 (x155 x625) (x637 x625))))
(define-fun x1064 ((x625 Int)) Int (ite (= x625 x218) x367 (x57 x625)))
(define-fun x727 ((x625 Int)) Int (ite x598 (x57 x625) (ite x334 (x959 x625) (ite x1104 (x183 x625) (ite x379 (x437 x625) (x1064 x625))))))
(define-fun x314 ((x625 Int)) Int (ite (= x280 x625) 0 (x727 x625)))
(define-fun x279 ((x625 Int)) Int (ite x241 (x727 x625) (x314 x625)))
(define-fun x1060 ((x625 Int)) Int (ite (= x181 x625) x1 (x279 x625)))
(define-fun x892 ((x625 Int)) Int (ite (= x545 x625) x1133 (x1060 x625)))
(define-fun x904 ((x625 Int)) Int (ite (= x625 x707) x843 (x892 x625)))
(define-fun x590 ((x625 Int)) Int (ite (= x625 x507) x481 (x904 x625)))
(define-fun x947 ((x625 Int)) Int (ite (= x625 x1105) x958 (x590 x625)))
(define-fun x378 ((x625 Int)) Int (ite (= x785 x625) x708 (x947 x625)))
(define-fun x193 ((x625 Int)) Int (ite x818 (x947 x625) (ite x14 (x590 x625) (ite x466 (x904 x625) (ite x1149 (x892 x625) (x378 x625))))))
(define-fun x610 ((x625 Int)) Int (ite (= x625 x780) 0 (x193 x625)))
(define-fun x909 ((x625 Int)) Int (ite x508 (x193 x625) (x610 x625)))
(define-fun x568 ((x625 Int)) Int (ite (= x232 x625) x1011 (x909 x625)))
(define-fun x642 ((x625 Int)) Int (ite (= x587 x625) x438 (x568 x625)))
(define-fun x812 ((x625 Int)) Int (ite (= x489 x625) x547 (x642 x625)))
(define-fun x173 ((x625 Int)) Int (ite (= x625 x673) x515 (x812 x625)))
(define-fun x744 ((x625 Int)) Int (ite (and (>= x625 x589) (> (+ 0 x589) x625)) (x730 (+ 0 (- x625 x589))) (x173 x625)))
(define-fun x400 ((x625 Int)) Int (ite x309 (x744 x625) (x173 x625)))
(define-fun x987 ((x625 Int)) Int (ite (= x625 x216) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x400 x625)))
(define-fun x284 ((x625 Int)) Int (ite (= x335 x625) x1070 (x987 x625)))
(define-fun x1000 ((x625 Int)) Int (ite (= x122 x625) x805 (x284 x625)))
(define-fun x184 ((x625 Int)) Int (ite (= x625 x963) x476 (x1000 x625)))
(define-fun x497 ((x625 Int)) Int (ite (= x180 x625) x1008 (x184 x625)))
(define-fun x970 ((x625 Int)) Int (ite x1092 (x184 x625) (ite x406 (x1000 x625) (ite x1096 (x284 x625) (ite x441 (x987 x625) (x497 x625))))))
(define-fun x282 ((x625 Int)) Int (ite (= x625 x236) 0 (x970 x625)))
(define-fun x41 ((x625 Int)) Int (ite x13 (x970 x625) (x282 x625)))
(define-fun x738 ((x625 Int)) Int (ite (= x625 x589) x1030 (x41 x625)))
(define-fun x3 ((x625 Int)) Int (ite (= x188 x625) x754 (x738 x625)))
(define-fun x879 ((x625 Int)) Int (ite (= x492 x625) x657 (x3 x625)))
(define-fun x1138 ((x625 Int)) Int (ite (= x624 x625) x796 (x879 x625)))
(define-fun x262 ((x625 Int)) Int (ite (= x1128 x625) x462 (x1138 x625)))
(define-fun x147 ((x625 Int)) Int (ite (= x625 x742) x678 (x262 x625)))
(define-fun x640 ((x625 Int)) Int (ite (= x625 x286) x639 (x147 x625)))
(define-fun x1024 ((x625 Int)) Int (ite x450 (x147 x625) (ite x1147 (x262 x625) (ite x79 (x1138 x625) (ite x60 (x879 x625) (x640 x625))))))
(define-fun x15 ((x625 Int)) Int (ite (= x682 x625) 0 (x1024 x625)))
(define-fun x939 ((x625 Int)) Int (ite x1123 (x1024 x625) (x15 x625)))
(define-fun x765 ((x625 Int)) Int (ite (= x736 x625) x512 (x939 x625)))
(define-fun x464 ((x625 Int)) Int (ite x810 (x356 x625) (x254 x625)))
(define-fun x368 ((x625 Int)) Int (ite (= x102 x625) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x464 x625)))
(define-fun x916 ((x625 Int)) Int (ite (and (<= x102 x625) (> (+ 32 x102) x625)) (x906 (+ (- x625 x102) 0)) (x368 x625)))
(define-fun x1067 ((x625 Int)) Int (ite x290 (x916 x625) (x368 x625)))
(define-fun x113 ((x625 Int)) Int (ite (= x625 x372) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x1067 x625)))
(define-fun x211 ((x625 Int)) Int (ite (and (> (+ 32 x372) x625) (>= x625 x372)) (x1084 (+ (- x625 x372) 0)) (x113 x625)))
(define-fun x811 ((x625 Int)) Int (ite x361 (x211 x625) (x113 x625)))
(define-fun x321 ((x625 Int)) Int (ite (= x625 x555) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x811 x625)))
(define-fun x911 ((x625 Int)) Int (ite (and (< x625 (+ 32 x555)) (<= x555 x625)) (x146 (+ (- x625 x555) 0)) (x321 x625)))
(define-fun x459 ((x625 Int)) Int (ite x1051 (x911 x625) (x321 x625)))
(define-fun x548 ((x625 Int)) Int (ite (= x625 x647) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x459 x625)))
(define-fun x982 ((x625 Int)) Int (ite (and (< x625 (+ x647 32)) (>= x625 x647)) (x387 (+ (- x625 x647) 0)) (x548 x625)))
(define-fun x1048 ((x625 Int)) Int (ite x672 (x982 x625) (x548 x625)))
(assert (= (x641 (+ (- (+ 196 (- x988 160)) 196) (x187 (+ 196 x697)))) 0))
(assert (x502 x547))
(assert (x502 x693))
(assert (= 0 (x641 (+ (- x950 196) (x187 (+ x697 196))))))
(assert (= x813 (or x1074 x89)))
(assert (x502 x10))
(assert (x502 x855))
(assert (= (and x667 (not x1089)) x454))
(assert (x502 x55))
(assert (= (and x762 (not x776)) x329))
(assert (x502 x866))
(assert (= (=> (and (or (not x64) x64) (= (= x138 0) x64)) x873) x498))
(assert (= (and x37 (not x715)) x818))
(assert (x502 x1015))
(assert (x502 x1033))
(assert (= (and x1119 x1144) x938))
(assert (x502 x1020))
(assert (x502 x45))
(assert (= x574 (and x40 x170)))
(assert (= x706 (and (not x121) x575)))
(assert (= 0 (x665 x61)))
(assert (x502 x469))
(assert (x502 x474))
(assert (= (and (not x364) x1103) x1087))
(assert (= x465 (and x667 x1089)))
(assert (x259 x704))
(assert (x502 x1007))
(assert (and (x395 x519 32) (=> (> 32 0) (= x519 (+ (* 32 (x1001 x519 32)) (x803 x519 32)))) (x822 x519 32) (x353 x519 32)))
(assert (= (x641 (+ (- (+ (- 224 x936) x1056) 196) (x187 (+ 196 x697)))) 0))
(assert (x502 x105))
(assert (= (and x758 (not x429)) x2))
(assert (x502 x517))
(assert (x502 x786))
(assert (= 0 (x354 (- 128 x29))))
(assert (x259 x924))
(assert (x539 x960))
(assert (x502 x1070))
(assert (x502 x608))
(assert (x502 x569))
(assert (x502 x713))
(assert (= (and x689 x935) x292))
(assert (and (x395 x887 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x887 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x887 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x887 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x887 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x887 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x316))
(assert (= x248 (=> (and (or (and x380 (= (x187 (+ x419 x870)) x280)) (not x380)) (= (> x608 x419) x380)) x434)))
(assert (x539 x565))
(assert (x502 x862))
(assert (= (and x509 (not x757)) x896))
(assert (x502 x166))
(assert (= (=> (and (= x841 (= 0 x1106)) (<= 0 x1106) (< x1106 256) (>= 255 x1106)) (and (=> (and (and (<= 0 x782) (= x866 x663) (= (x859 1461501637330902918203684832716283019655932542975 x866) x20) (= x1010 (x452 x788)) (= (x1150 x866) x1020) (= (x643 x788) x692) (= (= x622 x663) x43) (= x866 (x612 x788 x1016)) (= x876 x1010) (<= x782 1461501637330902918203684832716283019655932542975) (= (= 0 x20) x544) (= x1016 (x154 x788)) (= x1020 x343) x43 (< (+ x78 x692) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x953 x866) x239) (= 0 x78) (= x1073 x622) (< x782 1461501637330902918203684832716283019655932542976) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x239)) x841) (and (=> (and (and (= x220 x547) (= x1011 x806) (= x778 x438) (= x515 x198) (= x112 0)) x544) x139) (=> (and (not x544) (and (= x858 (x187 (+ x589 4))) (> 1461501637330902918203684832716283019655932542976 x515) (<= 0 x547) (= (x187 (+ 192 x858)) x23) (<= 0 x438) (< x438 1461501637330902918203684832716283019655932542976) (<= x515 1461501637330902918203684832716283019655932542975) (>= x515 0) (<= x438 1461501637330902918203684832716283019655932542975) (< x547 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x1011) (= (x1102 128) x419) (>= x1011 0) (>= 1461501637330902918203684832716283019655932542975 x547) (= x870 (x187 (+ 32 x23))) (> 1461501637330902918203684832716283019655932542976 x1011) (= (x859 1461501637330902918203684832716283019655932542975 x866) x106) (= x365 (< 0 x419)))) (and (=> (and (and (= x725 x870) (= (x437 160) x986) (= x562 (< 32 x419))) x365) (and (=> (and (and (= x847 (x183 192)) (= (> x419 64) x528) (= (x187 (+ 32 x870)) x327)) x562) (and (=> (and (= x608 64) (not x528)) x248) (=> (and x528 (and (= (x959 224) x175) (= (> x419 96) x281) (= x409 (x187 (+ x870 64))))) (and (=> x281 x116) (=> (and (not x281) (= 96 x608)) x248))))) (=> (and (not x562) (= 32 x608)) x248))) (=> (and (= x608 0) (not x365)) x248))))) (=> (and (not x841) (and (= x515 x198) (= x778 x438) (= x220 x547) (= x112 0) (= x806 x1011))) x139))) x435))
(assert (x502 x495))
(assert (x502 x1014))
(assert (x502 x1146))
(assert (and (x395 x310 32) (=> (> 32 0) (= x310 (+ (* 32 (x1001 x310 32)) (x803 x310 32)))) (x822 x310 32) (x353 x310 32)))
(assert (x539 x828))
(assert (= x487 (and x701 x430)))
(assert (x502 x302))
(assert (and (x395 x1072 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x1072 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x1072 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x1072 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x1072 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x1072 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= 0 (x641 (+ (- (+ 196 (- x62 160)) 196) (x187 (+ 196 x697))))))
(assert (and (x395 x924 32) (=> (> 32 0) (= x924 (+ (* 32 (x1001 x924 32)) (x803 x924 32)))) (x822 x924 32) (x353 x924 32)))
(assert (x502 x165))
(assert (x502 x777))
(assert (x502 x772))
(assert (x502 x731))
(assert (x502 x352))
(assert (x502 x163))
(assert (= x242 (or (and (not x1075) x538) x696)))
(assert (x502 x182))
(assert (x502 x132))
(assert (x502 x857))
(assert (x502 x62))
(assert (x502 x369))
(assert (= x606 (=> (and (or (not x170) (and x170 (= (x187 (+ x596 x313)) x33))) (= x170 (< x313 x1130))) x145)))
(assert (= (and (not x1143) x30) x14))
(assert (= (and x117 x537) x703))
(assert (x502 x201))
(assert (x502 x272))
(assert (x502 x344))
(assert (x502 x657))
(assert (= x898 (or x531 (and (not x769) x991))))
(assert (x502 x883))
(assert (x502 x620))
(assert (x502 x74))
(assert (= x1124 (and x1045 x998)))
(assert (x502 x635))
(assert (= (=> (and (= x302 (x187 (+ 32 x597))) (= (x187 (+ x302 32)) x17) (= (x187 (+ x1033 x596)) x458) (= x868 (x73 (- x458 x529))) (= (> x675 0) x402) (= (x187 (+ x313 31)) x797) (= (x187 (+ x458 32)) x418) (= x1033 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x797))) (and (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x814) (= (x187 (+ 32 x418)) x1005) (= x814 (x940 x443)) (= (x187 (+ 32 x443)) x45) (= (> x675 1) x881)) x402) (and (=> (and x881 (and (>= 1461501637330902918203684832716283019655932542975 x67) (= x24 (x187 (+ 32 x45))) (= x67 (x940 x45)) (= (< 2 x675) x557) (= x910 (x187 (+ 32 x1005))))) (and (=> (and (and (= x935 (< 3 x675)) (= x150 (x940 x24)) (= x605 (x187 (+ 32 x910))) (= x342 (x187 (+ 32 x24))) (>= 1461501637330902918203684832716283019655932542975 x150)) x557) (and (=> (and (= x750 x605) (not x935)) x210) (=> x935 x795))) (=> (and (= x910 x750) (not x557)) x210))) (=> (and (= x750 x1005) (not x881)) x210))) (=> (and (not x402) (= x418 x750)) x210))) x145))
(assert (x502 x63))
(assert (x502 x1109))
(assert (x1151 x469))
(assert (= (x665 256) 0))
(assert (x502 x901))
(assert (x502 x742))
(assert (= 0 (x354 (- x988 x29))))
(assert (x502 x1037))
(assert (and (x395 x519 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x519 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x519 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x519 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x519 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x519 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x639))
(assert (x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x528 x200) x76))
(assert (x502 x595))
(assert (not x271))
(assert (x502 x851))
(assert (x502 x682))
(assert (= (and x296 x977) x488))
(assert (= x503 (and (not x935) x689)))
(assert (x502 x49))
(assert (x502 x255))
(assert (= (x641 (+ (- x530 196) (x187 (+ 196 x697)))) 0))
(assert (= x1081 (and (not x510) x39)))
(assert (x502 x455))
(assert (x502 x106))
(assert (= (and x532 x706) x584))
(assert (x502 x218))
(assert (and (x395 x924 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x924 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x924 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x924 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x924 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x924 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x419))
(assert (x502 x802))
(assert (= (and x75 x557) x689))
(assert (= x253 (and x1059 x381)))
(assert (x502 x687))
(assert (= x974 (and (not x505) x896)))
(assert (= (and x896 x505) x575))
(assert (x502 x94))
(assert (x502 x273))
(assert (x502 x29))
(assert (x502 x880))
(assert (x502 x626))
(assert (= (x641 (+ (x187 (+ x697 196)) (- (+ x1056 (- x872 x936)) 196))) 0))
(assert (= 0 (x641 256)))
(assert (and (x395 x1127 32) (=> (> 32 0) (= x1127 (+ (* 32 (x1001 x1127 32)) (x803 x1127 32)))) (x822 x1127 32) (x353 x1127 32)))
(assert (x502 x1054))
(assert (= (and x813 x1100) x303))
(assert (= x905 (and x534 x611)))
(assert (x259 x519))
(assert (x502 x775))
(assert (x259 x469))
(assert (x502 x1134))
(assert (= x108 (and x451 x1083)))
(assert (x502 x885))
(assert (x502 x673))
(assert (x502 x848))
(assert (x259 x1129))
(assert (x502 x596))
(assert (= x241 (and (not x380) x6)))
(assert (x502 x468))
(assert (and (x395 x565 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x565 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x565 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x565 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x565 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x565 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x178))
(assert (= x644 (and x39 x510)))
(assert (= x144 (and (not x299) x242)))
(assert (x539 x797))
(assert (= x526 (and x878 (not x340))))
(assert (= (and x544 x830) x127))
(assert (= x1080 (and x1083 (not x451))))
(assert (x502 x782))
(assert (x502 x945))
(assert (x502 x515))
(assert (x502 x781))
(assert (x502 x28))
(assert (x502 x507))
(assert (x502 x1115))
(assert (= x564 (and x461 (not x457))))
(assert (= (and x391 x446) x27))
(assert (= x358 (or x463 x1147 x79 x450 x60)))
(assert (x502 x54))
(assert (= (and x526 (not x83)) x1132))
(assert (x502 x1))
(assert (x276 x81))
(assert (= (and x898 x1114) x196))
(assert (x502 x843))
(assert (= (=> (and (= 2005408114 x620) (= x631 (x698 x788)) (= x724 x772) (not (= x620 1245659826)) (not (= x620 1845979623)) (= (or (and (= true (<= x9 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x9 160)) (> x9 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x114) (= x586 x888) (not (= 1901074598 x620)) (< 0 x631) x603 (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x951) (= (x73 (- x888 4)) x9) (= x586 (x73 (- x1036 x697))) (not (= 1262878978 x620)) (= (= (x213 164) x305) x603) (< x620 2220280665) (>= x888 292) (not (> 4 x888)) (= x868 x968) (= x883 x996) (not (< x620 1245659826)) (= x163 x373) (not (= 1553423035 x620))) (and (=> (and (and (= x914 x515) (= x1078 x547) (= x877 x521) (= x8 x1011) (= 0 x165) (= x438 x344)) x114) x22) (=> (and (= x776 (and (> x888 195) (= true (<= x888 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (not x114)) (and (=> (and (not x776) (and (= x1011 x806) (= x438 x778) (= x112 0) (= x198 x515) (= x547 x220))) x139) (=> (and x776 (and (= x364 (< 18446744073709551615 x626)) (= x626 (x383 164)))) (and (=> (and (not x364) (and (= (or x269 x636) x983) (= x269 (< x875 128)) (= x636 (< 18446744073709551615 x875)) (= x834 (= 0 (ite x983 1 0))) (= x614 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x263)) (= (x187 (+ 32 x614)) x129) (= (x187 (+ 31 x129)) x1129) (= x263 (x187 (+ 31 x626))) (= (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1129) x1015) (= x875 (x187 (+ x1015 128))))) (and (=> (and (and (= x806 x1011) (= x547 x220) (= x778 x438) (= x515 x198) (= x112 0)) (not x834)) x139) (=> (and x834 (and (= (x187 (+ x626 196)) x580) (= x588 (< x888 x580)))) (and (=> (and (and (= x220 x547) (= x1011 x806) (= x438 x778) (= x198 x515) (= 0 x112)) x588) x139) (=> (and (not x588) (and (= (< 18446744073709551615 x373) x661) (= x482 (x187 (+ 160 x626))))) (and (=> (and (not x661) (and (= x616 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x888) (<= x192 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x192 x888)) (and (<= x888 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x192)))) (= (x187 (+ x950 31)) x192) (= x950 (x187 (+ x163 4))))) (and (=> (and x616 (and (= x1056 (x187 (+ 32 x950))) (= x757 (< 18446744073709551615 x809)) (= (x383 x950) x809))) (and (=> (and (and (= 0 x112) (= x438 x778) (= x1011 x806) (= x220 x547) (= x515 x198)) x757) x139) (=> (and (and (= (x187 (+ x595 32)) x560) (= (x187 (+ 31 x809)) x174) (= (> x1097 18446744073709551615) x42) (= x505 (= (ite x371 1 0) 0)) (= x1097 (x187 (+ x737 x875))) (= x371 (or x985 x42)) (= (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x174) x595) (= (x187 (+ 31 x560)) x828) (= x737 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x828)) (= (< x1097 x875) x985)) (not x757)) (and (=> (and (and (= x112 0) (= x198 x515) (= x438 x778) (= x1011 x806) (= x547 x220)) (not x505)) x139) (=> (and (and (= (x187 (+ 32 x875)) x936) (= (x187 (+ x809 x1056)) x330) (= (> x330 x888) x121)) x505) (and (=> (and (and (= (> x868 18446744073709551615) x532) (= x393 (x187 (+ x809 x936)))) (not x121)) (and (=> (and (and (= (x187 (+ 4 x968)) x182) (= (or (and (> x536 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x888 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x888 x536) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x888) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x536)))) x619) (= x536 (x187 (+ x182 31)))) (not x532)) (and (=> (and (not x619) (and (= x806 x1011) (= x112 0) (= x198 x515) (= x547 x220) (= x778 x438))) x139) (=> (and x619 (and (= (> x915 18446744073709551615) x956) (= x915 (x383 x182)))) (and (=> (and (not x956) (and (= (> x105 x888) x340) (= x569 (x1041 (* 32 x915))) (= x105 (x187 (+ x569 x855))) (= (x187 (+ 32 x182)) x855))) (and (=> (and (and (= x198 x515) (= 0 x112) (= x778 x438) (= x1011 x806) (= x220 x547)) x340) x139) (=> (and (= (> x883 18446744073709551615) x83) (not x340)) (and (=> (and (not x83) (and (= x4 (x187 (+ x933 31))) (= x933 (x187 (+ 4 x996))) (= x140 (or (and (> x4 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x888)) (and (> x888 x4) (= (<= x888 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x4 57896044618658097711785492504343953926634992332820282019728792003956564819967))))))) (and (=> (and x140 (and (= (x383 x933) x552) (= (> x552 18446744073709551615) x47))) (and (=> (and x47 (and (= x1011 x806) (= x438 x778) (= x220 x547) (= 0 x112) (= x198 x515))) x139) (=> (and (not x47) (and (= (< x888 x5) x510) (= x670 (x1041 (* x552 32))) (= x5 (x187 (+ x908 x670))) (= (x187 (+ x933 32)) x908))) (and (=> (and (and (= x515 x198) (= 0 x112) (= x806 x1011) (= x438 x778) (= x220 x547)) x510) x139) (=> (and (not x510) (and (>= x1106 0) (<= x1106 255) (= (= 0 x1106) x618) (< x1106 256))) (and (=> (and (and (<= 0 x907) (<= x907 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x111 (< 0 x907))) x618) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x907) (= (= x907 0) x1142) (<= 0 x907)) x111) (and (=> (and (and (>= x623 0) (= (x698 x788) x566) (> x566 0) (not (> 2220280665 x229)) (= x229 2376452955) (= x653 x583) (= x583 4) (= x92 (x407 x1097)) (= (= x984 x92) x766) (> 3084411429 x229) (not (= 2249206060 x229)) (<= x623 1461501637330902918203684832716283019655932542975) (= 4 x653) (= x984 (x859 1461501637330902918203684832716283019655932542975 x92)) (not (= 2220280665 x229)) (= x894 64069044923792539370177021244577383457373632460708312080110356237917649633280) (not (< x653 4)) (= (x187 (+ 32 x1097)) x674) (not (= x229 2329570063)) (< x623 1461501637330902918203684832716283019655932542976)) x1142) (and (=> (and (and (= (x859 1461501637330902918203684832716283019655932542975 x92) x669) (= (and (< (+ x46 x219) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x56 0)) x222) (= x219 0) (= (x884 x788) x56) (= x46 (x884 x669))) x766) (and (=> (and (and (= x671 0) (= 0 x369)) (not x222)) x826) (=> (and (and (or (not x411) (and x411 (and (= x91 (x301 x669)) (= x683 (= (x570 x669) x91)) (= x854 (<= x153 (x570 x788))) x854 (= x153 (x301 x788)) (< x55 4294967296) x683))) (and (= x902 x752) (= (< 0 x149) x411) (= x899 x931) (= (x884 x788) x752) (= x931 (x90 x669)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x219 x931)))) x222) x1002))) (=> (and (not x766) (and (= x1011 x806) (= x438 x778) (= x515 x198) (= 0 x112) (= x547 x220))) x139))) (=> (and (not x1142) (and (= x515 x198) (= x806 x1011) (= x220 x547) (= x778 x438) (= x112 0))) x139))) (=> (and (= x589 x1097) (not x111)) x435))) (=> (and (not x618) (and (= 0 x112) (= x220 x547) (= x1011 x806) (= x198 x515) (= x438 x778))) x139))))))) (=> (and (and (= 0 x112) (= x198 x515) (= x547 x220) (= x438 x778) (= x1011 x806)) (not x140)) x139))) (=> (and (and (= x1011 x806) (= x778 x438) (= x515 x198) (= x547 x220) (= x112 0)) x83) x139))))) (=> (and x956 (and (= x547 x220) (= x198 x515) (= 0 x112) (= x438 x778) (= x806 x1011))) x139))))) (=> (and x532 (and (= x547 x220) (= x1011 x806) (= x515 x198) (= 0 x112) (= x438 x778))) x139))) (=> (and (and (= x547 x220) (= x515 x198) (= x778 x438) (= x1011 x806) (= x112 0)) x121) x139))))))) (=> (and (and (= x778 x438) (= x198 x515) (= x547 x220) (= x112 0) (= x806 x1011)) (not x616)) x139))) (=> (and (and (= x547 x220) (= x515 x198) (= x438 x778) (= 0 x112) (= x806 x1011)) x661) x139))))))) (=> (and (and (= x198 x515) (= x220 x547) (= x1011 x806) (= x778 x438) (= x112 0)) x364) x139))))))) x966))
(assert (x502 x692))
(assert (= (and x745 x837) x322))
(assert (x502 x274))
(assert (= (and (not x296) x977) x701))
(assert (x502 x331))
(assert (= (=> (and (or (not x451) (and x451 (= (x187 (+ x467 x305)) x1115))) (= (< x305 x573) x451)) x679) x912))
(assert (x502 x868))
(assert (x1151 x385))
(assert (x502 x44))
(assert (= 0 (x641 (+ (x187 (+ 196 x697)) (- (+ x1056 (- x224 x936)) 196)))))
(assert (x1151 x960))
(assert (x502 x856))
(assert (= x337 (and (not x170) x40)))
(assert (x502 x817))
(assert (and (x395 x887 32) (=> (> 32 0) (= x887 (+ (* 32 (x1001 x887 32)) (x803 x887 32)))) (x822 x887 32) (x353 x887 32)))
(assert (= x463 (and x648 x384)))
(assert (x502 x278))
(assert (x502 x438))
(assert (x502 x97))
(assert (x502 x150))
(assert (= (and (not x420) x905) x31))
(assert (x502 x686))
(assert (x502 x567))
(assert (x502 x1036))
(assert (= (and (not x227) x264) x558))
(assert (x502 x736))
(assert (and (x395 x828 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x828 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x828 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x828 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x828 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x828 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x1098))
(assert (x502 x135))
(assert (x502 x930))
(assert (x502 x190))
(assert (x502 x846))
(assert (x502 x167))
(assert (x502 x723))
(assert (= x52 (and x114 x1003)))
(assert (x502 x519))
(assert (= (or x441 x406 x1092 x1096 x261) x99))
(assert (x502 x566))
(assert (= (or x205 x506 x974 x487 x584 x319 x680 x127 x289 x918 x654 x726 x386 x1026 x234 x432 x1113 x599 x488 x576 x66 x890 x819 x329 x751 x256 x169 x993 x792 x453 x421 x644 x564 x1120) x355))
(assert (= (=> (and (= (not (< 128 x313)) x51) (= (x1052 x592) x1082) (= (x187 (+ 96 x1037)) x592) (= x376 (x187 (+ x596 96)))) (and x51 (=> (= 128 x1130) x606))) x103))
(assert (x502 x968))
(assert (= x115 (and x420 x905)))
(assert (x502 x280))
(assert (= (=> (and (and (<= x1106 255) (<= 0 x346) (>= 1461501637330902918203684832716283019655932542975 x132) (= x97 (x698 x788)) (= (> (x698 x990) 0) x733) (>= 1461501637330902918203684832716283019655932542975 x164) (>= x802 0) (<= 0 x1071) x191 (>= 1461501637330902918203684832716283019655932542975 x35) (= x954 832554005) (<= 0 x178) (<= x781 1461501637330902918203684832716283019655932542975) (>= x515 0) (<= 0 x1106) (<= x547 1461501637330902918203684832716283019655932542975) (= false x315) (<= 0 x732) (= x475 1262878978) (<= 0 x141) (<= 0 x423) (>= 1461501637330902918203684832716283019655932542975 x346) (<= x567 1461501637330902918203684832716283019655932542975) (>= x164 0) (<= x515 1461501637330902918203684832716283019655932542975) (> 1245659826 x954) (<= x716 1461501637330902918203684832716283019655932542975) (<= 0 x438) (= x422 x567) (<= x790 255) x733 (not (= x788 x990)) (<= 0 x547) (>= x723 0) (<= 0 x132) (>= x781 0) (>= x235 0) (>= x300 0) (>= 255 x1071) (>= x790 0) (<= x1011 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x782) (>= 255 x1126) (<= x723 1461501637330902918203684832716283019655932542975) (<= 0 x602) (<= 0 x686) (= x1049 false) (<= 0 x1011) (<= x423 255) (>= 1461501637330902918203684832716283019655932542975 x602) (<= 0 x716) (<= 0 x243) (= false x363) (= x251 true) (>= x623 0) (not (= x954 818759841)) (< x954 2220280665) (>= x1011 0) (<= x686 255) (>= x919 0) (>= x567 0) (<= x990 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x178) (> x788 0) (= (< 0 (x698 x788)) x191) (<= x628 79228162514264337593543950335) (= 5 x1117) (>= 255 x1086) (< 0 x97) (>= 1461501637330902918203684832716283019655932542975 x919) (= x141 (x161 x788)) (<= x732 1461501637330902918203684832716283019655932542975) (<= x235 1461501637330902918203684832716283019655932542975) (<= x300 255) (< x1011 1461501637330902918203684832716283019655932542976) (>= x35 0) (<= x623 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x802) (= x164 x971) (>= x782 0) (<= x1011 1461501637330902918203684832716283019655932542975) (<= 0 x1126) (<= 0 x628) (<= 0 x1086) (>= 1461501637330902918203684832716283019655932542975 x438) (= x243 (x161 x990)) (= x705 x1011) (not (= x954 75068239)) (<= x788 1461501637330902918203684832716283019655932542975) (> x990 0)) (and (and (and (and (and (and (and (= x889 x615) (not (= x655 3084411429)) (= x852 x547) (not (= 3705713892 x655)) (= x527 (not (= x615 0))) (= x1013 0) (not (= x655 4076725131)) (> 1461501637330902918203684832716283019655932542976 x547) (= x245 (and x527 x874)) (>= x547 0) (= x655 4199168155) (not (= 3572374928 x655)) (not (< x655 3084411429)) (<= x547 1461501637330902918203684832716283019655932542975) (not (> 2220280665 x655)) (< 0 x226) (= x226 (x698 x788))) (and (and (= (> x971 0) x980) (= (= 0 x971) x477) (= x439 x517) (= (< x549 x717) x1119) (> 1461501637330902918203684832716283019655932542976 x971) (= (x161 x971) x549) x928 (= (not (= x517 0)) x638) (or x477 x980) (= (or x348 x444) x928) (= x444 (and x291 x638)) (= x148 0)) (and (< 0 x651) (not (< x964 2220280665)) (not (= x964 2220280665)) (= x617 (not (= 0 x957))) (= x651 (x698 x788)) (>= x515 0) (> 3084411429 x964) (= x439 x515) (not (= x964 2249206060)) (< x515 1461501637330902918203684832716283019655932542976) (= 0 x849) (= x957 x852) (>= 1461501637330902918203684832716283019655932542975 x515) (= (and x617 x245) x291) (= x964 2329570063)))) (and (not (> 1245659826 x18)) (= x18 1245659826) (= (not (= x929 0)) x874) (= x929 x54) (>= 1461501637330902918203684832716283019655932542975 x438) (= (x698 x788) x1047) (< x18 2220280665) (= x438 x889) (< 0 x1047) (= x869 0) (< x438 1461501637330902918203684832716283019655932542976) (>= x438 0))) (and (> x44 0) (not (= 75068239 x347)) (not (= 818759841 x347)) (< x1011 1461501637330902918203684832716283019655932542976) (= (and x449 x917) x348) (= x347 832554005) (= x1011 x54) (= x250 x166) (= x44 (x698 x788)) (<= x1011 1461501637330902918203684832716283019655932542975) (< x347 1245659826) (= 0 x208) (< x347 2220280665) (<= 0 x1011) (= (= 0 x166) x449))) (and (not (> 2220280665 x131)) (= 0 x415) (= x1019 (= x768 0)) (= x250 x515) (> 1461501637330902918203684832716283019655932542976 x515) (< 0 x94) (not (= x131 2220280665)) (> 3084411429 x131) (= x768 x123) (not (= x131 2249206060)) (>= 1461501637330902918203684832716283019655932542975 x515) (= x94 (x698 x788)) (>= x515 0) (= (and x1019 x741) x917) (= x131 2329570063))) (and (not (< x646 3084411429)) (> x50 0) (= (and x171 x972) x741) (= (x698 x788) x50) (not (= 3705713892 x646)) (= 0 x749) (>= 1461501637330902918203684832716283019655932542975 x547) (= x272 x846) (<= 0 x547) (< x547 1461501637330902918203684832716283019655932542976) (= x972 (= 0 x272)) (not (= 3084411429 x646)) (not (< x646 2220280665)) (not (= 3572374928 x646)) (= 4199168155 x646) (not (= x646 4076725131)) (= x547 x123))) (and (= x438 x846) (not (> 1245659826 x522)) (= x540 0) (= x324 x705) (<= x438 1461501637330902918203684832716283019655932542975) (= 1245659826 x522) (<= 0 x438) (= x133 (x698 x788)) (< 0 x133) (> 1461501637330902918203684832716283019655932542976 x438) (= (= x324 0) x171) (< x522 2220280665)))) (and (=> (and (not x1119) (and (= x273 (ite x186 1 0)) (= (or x484 x934) x186) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x333) (> x721 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x721) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x333)) (> x333 x721))) (not (> x240 x333)) (not (< 18446744073709551615 x28)) (= x761 (x187 (+ 4 x167))) (not (< 18446744073709551615 x831)) (= x104 x1088) (= (x967 128) x305) (= (- x1025 x717) x374) (= x28 (x940 x761)) (= x542 (x73 (- x333 4))) (= (x187 (+ 31 x28)) x565) (not (< 18446744073709551615 x124)) (<= 0 x1145) (= (x187 (+ x404 x831)) x231) (not (> 1245659826 x255)) (= (x940 x1134) x124) (not (< 18446744073709551615 x675)) (= x399 (x187 (+ 32 x913))) (= x72 x687) (= x621 (x187 (+ x443 x787))) (or (and (= (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x734 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x734 x333)) (and (> x734 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x19 (ite x283 1 0)) (not (or (and (= true (<= x542 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 160 x542)) (> x542 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (or (and (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x594)) (and (= (<= x594 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x333)) (> x333 x594))) (= x1135 x1053) (= (x698 x788) x1035) (= 0 x273) (= x1145 x971) (= x1058 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x887)) (= x572 (x436 x788)) (= x913 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x565)) (= (x187 (+ 32 x490)) x1037) (not (< 18446744073709551615 x390)) (= x325 x341) (or (and (> x513 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x513)) (< x513 x333))) (< x255 2220280665) (= (x187 (+ x72 4)) x979) (= (x940 x645) x675) (= (x187 (+ x1134 31)) x594) (> x1035 0) (= x306 (x187 (+ 32 x761))) (= x484 (< 18446744073709551615 x490)) (= x1098 x104) (= (< x697 x490) x997) (not (< x333 x34)) (= x763 x74) (= (x187 (+ x717 x572)) x629) (<= x1088 1461501637330902918203684832716283019655932542975) (= x645 (x187 (+ 4 x325))) (= (x187 (+ x831 31)) x887) (not (< 18446744073709551615 x687)) (= (x187 (+ x880 x775)) x34) (= x720 (x187 (+ x28 x1037))) (= (x161 x971) x1025) (= x255 1262878978) (= x19 0) (= x717 x190) (= (> x697 18446744073709551615) x523) (= (x187 (+ x490 x77)) x697) (= x901 x971) (= x880 (x187 (+ 32 x1134))) (= x934 (> 128 x490)) (not (< x333 x231)) (= x513 (x187 (+ 31 x979))) (= x831 (x940 x979)) (= (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x519) x1141) (>= x634 0) (= (x187 (+ 31 x399)) x1072) (= x787 (x1041 (* x675 32))) (= (x187 (+ x306 x28)) x240) (= x404 (x187 (+ 32 x979))) (= (x1041 (* x124 32)) x775) (= x734 (x187 (+ x645 31))) (= x167 x390) (= x77 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1072)) (= (x187 (+ x831 160)) x63) (not (< x333 x621)) (>= x1088 0) (= x490 (x187 (+ 128 x1141))) (and (< 163 x333) (= true (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x227 (> x305 0)) (= x1053 x772) (not (= x255 1245659826)) (not (< x333 4)) (= (x187 (+ 32 x1058)) x815) (not (> x341 18446744073709551615)) (not (< 18446744073709551615 x74)) (= (x187 (+ 31 x815)) x519) (>= 1461501637330902918203684832716283019655932542975 x634) (= x283 (or x523 x997)) (= x721 (x187 (+ x761 31))) (= x1134 (x187 (+ 4 x763))) (>= 1461501637330902918203684832716283019655932542975 x1145) (= (x187 (+ 4 x697)) x529) (= (x187 (+ 160 x529)) x304) (= x443 (x187 (+ x645 32))) (< (+ x572 x190) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x187 (+ 32 x304)) x467))) (and (=> (and (and (= x998 (> x305 32)) (= x467 x403) (= x412 (x298 160))) x227) (and (=> (and x998 (and (= (x187 (+ x467 32)) x396) (= x101 (> x305 64)) (= x777 (x1091 192)))) (and (=> (and (and (= (x187 (+ 64 x467)) x1101) (= x863 (< 96 x305)) (= (x511 224) x414)) x101) (and (=> (and (not x863) (= 96 x573)) x912) (=> x863 x932))) (=> (and (not x101) (= 64 x573)) x912))) (=> (and (= x573 32) (not x998)) x912))) (=> (and (not x227) (= x573 0)) x912))) (=> (and (and (= x946 true) (= x739 false) (= x370 x438) (= x515 x922) (= x1011 x550) (= x547 x223)) x1119) x87))) x271))
(assert (= x1065 (=> (and (or (and (and (< x1109 4294967296) (= 1 x16)) x107) (and (= x125 x16) (not x107))) (and (= (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x960) x632) (= x960 (x187 (+ x722 31))) (= (x464 x201) x1062) (not (= 0 x362)) (= x107 (> x125 0)) (>= 1461501637330902918203684832716283019655932542975 x1062) (= x102 (x187 (+ x632 x201))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722)) (< x722 32)))))) x494)))
(assert (x502 x950))
(assert (x502 x1022))
(assert (x502 x780))
(assert (x502 x907))
(assert (x502 x9))
(assert (x502 x151))
(assert (x502 x312))
(assert (= x1149 (and (not x317) x338)))
(assert (x502 x976))
(assert (x502 x236))
(assert (x502 x973))
(assert (= (=> (= x840 (not (> x915 1))) (and x189 x840)) x1023))
(assert (x502 x688))
(assert (x502 x669))
(assert (and (x395 x797 32) (=> (> 32 0) (= x797 (+ (* 32 (x1001 x797 32)) (x803 x797 32)))) (x822 x797 32) (x353 x797 32)))
(assert (and (x395 x866 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x866 (+ (* 1461501637330902918203684832716283019655932542976 (x1001 x866 1461501637330902918203684832716283019655932542976)) (x803 x866 1461501637330902918203684832716283019655932542976)))) (x822 x866 1461501637330902918203684832716283019655932542976) (x353 x866 1461501637330902918203684832716283019655932542976)))
(assert (and (x633 32 x124) (x194 32 x124) (x228 32 x124) (and (= (* (- x124 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x900 32 (- x124 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x124 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x124 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x124 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x124) (* x124 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x124))) (x1121 32 x124) (= (x900 32 x124) (* 32 x124)) (x520 32 x124)))
(assert (= (or x241 x85) x338))
(assert (= x825 (and (not x588) x456)))
(assert (x502 x529))
(assert (and (x395 x174 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x174 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x174 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x174 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x174 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x174 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x886 (=> (and (= (= 0 x827) x769) (or x769 (not x769))) x850)))
(assert (x502 x285))
(assert (= x1032 (and x349 x411)))
(assert (x502 x1058))
(assert (= (and x121 x575) x599))
(assert (x502 x671))
(assert (x502 x156))
(assert (x502 x1069))
(assert (= (and x767 x881) x75))
(assert (= x447 (or x832 x672)))
(assert (and (x633 32 x552) (x194 32 x552) (x228 32 x552) (and (= (* (- x552 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x900 32 (- x552 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x552 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x552 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x552 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x552) (* x552 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x552))) (x1121 32 x552) (= (x900 32 x552) (* 32 x552)) (x520 32 x552)))
(assert (x502 x409))
(assert (= (and x471 (not x237)) x441))
(assert (x259 x565))
(assert (x502 x330))
(assert (x502 x439))
(assert (= x516 (or x27 (and x391 (not x446)))))
(assert (x502 x306))
(assert (= x1125 (=> (= (< 0 x915) x1100) (and (=> (not x1100) x189) (=> (and (= (> x915 0) x1027) x1100) (and (=> (and (not x1027) (and (= x438 x778) (= x112 0) (= x220 x547) (= x806 x1011) (= x198 x515))) x139) (=> (and x1027 (and (= x81 (x383 x530)) (= (x859 1461501637330902918203684832716283019655932542975 x81) x209) (= x530 x855) (= x837 (= x81 x209)))) (and (=> (and (not x837) (and (= x198 x515) (= x806 x1011) (= x778 x438) (= x547 x220) (= x112 0))) x139) (=> (and (= (< 0 x552) x199) x837) (and (=> (and (and (= x515 x198) (= x806 x1011) (= x547 x220) (= x438 x778) (= x112 0)) (not x199)) x139) (=> (and (and (= x702 (x383 x821)) (= x882 (or (and (= (<= x702 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x478)) (> x478 x702)) (and (> x702 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x478)))) (= x908 x821) (= (x73 (- x888 x908)) x442) (= x478 (x73 (- x442 31)))) x199) (and (=> (and (not x882) (and (= x198 x515) (= x438 x778) (= x547 x220) (= x112 0) (= x1011 x806))) x139) (=> (and (and (= (> x417 18446744073709551615) x296) (= x417 (x383 x274)) (= (x187 (+ x908 x702)) x274)) x882) (and (=> (and (and (= x220 x547) (= x438 x778) (= x806 x1011) (= 0 x112) (= x515 x198)) x296) x139) (=> (and (and (= (or (and (= (<= x591 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x668 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x668 x591)) (and (> x668 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x591))) x430) (= x668 (x73 (- x888 x417))) (= x591 (x187 (+ x274 32)))) (not x296)) (and (=> (and x430 (and (= x438 x778) (= x112 0) (= x547 x220) (= x806 x1011) (= x515 x198))) x139) (=> (and (not x430) (and (or (and (and (= x978 (= (x155 x81) x593)) x978 (= x973 (x637 x788)) x233 (= x593 (x637 x81)) (= (<= x973 (x155 x788)) x233) (< x468 4294967296)) x551) (not x551)) (= x551 (< 0 x827)))) x886)))))))))))))))))
(assert (= (and x322 (not x199)) x654))
(assert (= (=> (and (= x188 (x187 (+ x1040 x729))) (= x204 (x73 (- x188 x589))) (= (x187 (+ x188 96)) x492) (= x657 (x3 128)) (= (> x657 0) x853) (= x941 (x187 (+ 32 x492))) (= (x73 (- x204 32)) x1030) (= x754 96)) (and (=> (and (not x853) (= 0 x783)) x755) (=> (and (and (= (x879 160) x796) (= (< 32 x657) x994) (= x941 x624)) x853) (and (=> (and (= x783 32) (not x994)) x755) (=> (and (and (= (> x657 64) x350) (= (x1138 192) x462) (= x1128 (x187 (+ x941 32)))) x994) (and (=> (and (not x350) (= x783 64)) x755) (=> (and x350 (and (= x742 (x187 (+ x941 64))) (= (x262 224) x678) (= x384 (> x657 96)))) (and (=> x384 x808) (=> (and (not x384) (= 96 x783)) x755))))))))) x431))
(assert (x502 x530))
(assert (= (and (not x557) x75) x1046))
(assert (x502 x96))
(assert (x502 x92))
(assert (= x408 (and x1081 x618)))
(assert (= x1120 (and x676 (not x619))))
(assert (x502 x141))
(assert (x502 x631))
(assert (x502 x1148))
(assert (= (and x299 x242) x810))
(assert (x502 x957))
(assert (x502 x416))
(assert (= 0 (x641 (+ (- x182 196) (x187 (+ x697 196))))))
(assert (= x432 (and x789 x401)))
(assert (x502 x235))
(assert (x259 x263))
(assert (= (x816 (x612 x788 x1016)) 0))
(assert (x502 x941))
(assert (= (and (not x834) x1087) x205))
(assert (x502 x763))
(assert (x539 x1072))
(assert (x502 x313))
(assert (x502 x646))
(assert (x502 x629))
(assert (x502 x797))
(assert (x502 x229))
(assert (x502 x102))
(assert (x502 x478))
(assert (= x927 (=> (and (and (= x223 x1078) (= x914 x922) (= x946 false) (= false x739) (= x344 x370) (= x8 x550)) (and (>= 1461501637330902918203684832716283019655932542975 x635) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x856)) (< x856 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x856))) (= x747 x582) (= x635 (x1048 x647)) (not (= x824 0)))) x87)))
(assert (x502 x828))
(assert (= x397 (and x471 x237)))
(assert (x1151 x1017))
(assert (x539 x263))
(assert (x502 x304))
(assert (x1151 x797))
(assert (x502 x257))
(assert (x259 x385))
(assert (x502 x796))
(assert (x502 x188))
(assert (= x531 (and x769 x991)))
(assert (x502 x732))
(assert (= x1110 (and x1066 (not x501))))
(assert (x539 x174))
(assert (x502 x345))
(assert (= x1099 (=> (and (= x962 (> x731 x1133)) (or (not x962) (and x962 (= (x187 (+ x308 x1133)) x780)))) x546)))
(assert (= (x354 (- x61 x29)) 0))
(assert (x502 x573))
(assert (x502 x754))
(assert (x502 x899))
(assert (= (and x703 (not x942)) x561))
(assert (x1151 x70))
(assert (x502 x685))
(assert (= x1147 (and x1118 (not x350))))
(assert (x259 x92))
(assert (= (x641 160) 0))
(assert (x1151 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x502 x724))
(assert (= x991 (or x287 x260)))
(assert (= (and x794 (not x871)) x832))
(assert (= x648 (and x1118 x350)))
(assert (and (x395 x1129 32) (=> (> 32 0) (= x1129 (+ (* 32 (x1001 x1129 32)) (x803 x1129 32)))) (x822 x1129 32) (x353 x1129 32)))
(assert (= (and x217 x358) x288))
(assert (x502 x11))
(assert (= (x641 x592) 0))
(assert (x502 x1127))
(assert (= x334 (and x200 (not x528))))
(assert (x502 x33))
(assert (= x576 (and x774 (not x1142))))
(assert (x502 x308))
(assert (= 0 (x641 (+ (- (+ (- x61 x936) x1056) 196) (x187 (+ x697 196))))))
(assert (x502 x647))
(assert (= x326 (and x865 x863)))
(assert (= (=> (and (= (< 0 x312) x501) (= (x187 (+ x188 32)) x736) (= x1029 (x187 (+ x941 x897))) (= (x187 (+ 31 x657)) x385) (= x312 (x765 x589)) (= (x73 (- x1029 x188)) x512) (= x897 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x385))) (and (=> (and (= x537 (> x312 32)) x501) (and (=> (and x537 (= (< 64 x312) x942)) (and (=> (and (not x942) (= 64 x1111)) x829) (=> (and (= x69 (> x312 96)) x942) (and (=> (and (= x1111 96) (not x69)) x829) (=> x69 x955))))) (=> (and (not x537) (= x1111 32)) x829))) (=> (and (not x501) (= 0 x1111)) x829))) x440))
(assert (x502 x597))
(assert (x502 x614))
(assert (x502 x747))
(assert (= x600 (and (not x107) x128)))
(assert (= (and x841 x1122) x830))
(assert (= 0 (x665 x224)))
(assert (x502 x1016))
(assert (x1151 x263))
(assert (x502 x582))
(assert (= (=> (and (or (not x1038) x1038) (= (> x1111 x312) x1038)) x1125) x829))
(assert (and (x395 x81 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x81 (+ (* 1461501637330902918203684832716283019655932542976 (x1001 x81 1461501637330902918203684832716283019655932542976)) (x803 x81 1461501637330902918203684832716283019655932542976)))) (x822 x81 1461501637330902918203684832716283019655932542976) (x353 x81 1461501637330902918203684832716283019655932542976)))
(assert (x502 x333))
(assert (x975 32))
(assert (x502 x668))
(assert (= (x641 (+ (x187 (+ x697 196)) (- (+ x1056 (- 128 x936)) 196))) 0))
(assert (x1151 x565))
(assert (= (x641 (+ 64 (x187 (+ 196 x697)))) 0))
(assert (= 0 (x641 (+ (x187 (+ x697 196)) (- (+ x1056 (- 192 x936)) 196)))))
(assert (x502 x258))
(assert (x502 x937))
(assert (x1151 x174))
(assert (= (x641 (x187 (+ x697 196))) 0))
(assert (= (and x76 x281) x392))
(assert (x502 x385))
(assert (= (x665 x1069) 0))
(assert (x502 x124))
(assert (= x461 (or x196 x426)))
(assert (= x826 (=> (and (or (and (and (= x585 x961) (= x156 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x310)) (= (x187 (+ 32 x674)) x29) (= (x187 (+ x369 63)) x310) (= (x187 (+ x674 x156)) x961)) (not x578)) (and x578 (= x674 x585))) (= x578 (= x369 0))) x320)))
(assert (= (and x1143 x30) x37))
(assert (x276 x92))
(assert (x502 x821))
(assert (= x234 (and (not x616) x965)))
(assert (= (and x501 x1066) x117))
(assert (x259 x81))
(assert (x502 x990))
(assert (x502 x1082))
(assert (= (x354 (- x224 x29)) 0))
(assert (x1151 x310))
(assert (x502 x366))
(assert (x502 x717))
(assert (x502 x458))
(assert (= x711 (=> (and (not (< 18446744073709551615 x7)) (= (x187 (+ 31 x7)) x1017) (= x7 (x940 x709)) (= (x187 (+ 32 x709)) x332) (= (not (> x124 1)) x771) (= x817 (x187 (+ x425 x7))) (= (x73 (- x333 x880)) x151) (not (or (and (= (<= x860 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x332)) (< x860 x332)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x860) (<= x332 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x10 (x187 (+ x425 x895))) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x799) (<= x1009 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1009) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x799)) (> x1009 x799))) (= x709 (x187 (+ x799 x880))) (= x425 (x187 (+ 32 x318))) (= x842 x714) (= x895 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1017)) (= x799 (x940 x880)) (= x1009 (x73 (- x151 31))) (= (x73 (- x333 x7)) x860)) (and x771 (=> (= x10 x1036) x966)))))
(assert (= (and x486 x222) x349))
(assert (= (and x1103 x364) x993))
(assert (= 0 (x641 (+ 96 (x187 (+ x697 196))))))
(assert (= 0 (x641 (+ (x187 (+ 196 x697)) (- (+ (- x278 x936) x1056) 196)))))
(assert (= (=> (and (= x238 (x187 (+ x17 32))) (= x318 (x187 (+ x65 x714))) (= x925 (> x124 0)) (= (x1041 (* 32 x124)) x714) (= x883 (x73 (- x750 x529))) (= x65 (x187 (+ x750 32)))) (and (=> (and (= x1036 x318) (not x925)) x966) (=> x925 x711))) x210))
(assert (x502 x372))
(assert (= (x665 x62) 0))
(assert (= x260 (and x551 x339)))
(assert (x502 x602))
(assert (x502 x591))
(assert (and (<= (x612 x788 x1016) 340282366920938463463374607431768211455) (>= (x612 x788 x1016) 10000)))
(assert (= (and x789 (not x401)) x903))
(assert (x502 x565))
(assert (x502 x219))
(assert (= (and x107 x128) x290))
(assert (= x309 (and x143 x903)))
(assert (x502 x318))
(assert (= x256 (and x381 (not x1059))))
(assert (= (and x1124 (not x101)) x759))
(assert (= x80 (and x2 x999)))
(assert (x502 x1078))
(assert (= (and x457 x461) x664))
(assert (= x1066 (or x1123 x288)))
(assert (x502 x877))
(assert (x502 x1009))
(assert (x502 x740))
(assert (x502 x480))
(assert (x1151 x1072))
(assert (x502 x72))
(assert (x502 x721))
(assert (x502 x224))
(assert (x502 x1055))
(assert (= 0 (x354 (- 224 x29))))
(assert (= x726 (and (not x618) x1081)))
(assert (= x798 (or x359 x424 x561 x943 x1110)))
(assert (x502 x663))
(assert (x502 x1071))
(assert (x502 x752))
(assert (and (x395 x976 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x976 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x976 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x976 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x976 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x976 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x679 (=> (and (= (< 0 x313) x1089) (= (x73 (- x275 x529)) x373) (= (x187 (+ x275 32)) x596) (= x313 (x760 x490)) (= (x187 (+ 32 x529)) x597) (= x740 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1127)) (= (x187 (+ x740 x467)) x275) (= (x187 (+ x305 31)) x1127)) (and (=> (and (= 0 x1130) (not x1089)) x606) (=> (and (and (= x713 x1037) (= x862 x596) (= x1057 (x398 x713)) (= (< 32 x313) x500)) x1089) (and (=> (and (not x500) (= x1130 32)) x606) (=> (and x500 (and (= (x95 x357) x937) (= x357 (x187 (+ 32 x1037))) (= (x187 (+ x596 32)) x257) (= (< 64 x313) x611))) (and (=> (and (not x611) (= 64 x1130)) x606) (=> (and x611 (and (= x136 (x187 (+ 64 x596))) (= (x833 x316) x285) (= (< 96 x313) x420) (= x316 (x187 (+ x1037 64))))) (and (=> x420 x103) (=> (and (= 96 x1130) (not x420)) x606)))))))))))
(assert (x502 x849))
(assert (x502 x159))
(assert (x502 x1056))
(assert (x502 x1141))
(assert (x502 x1106))
(assert (x502 x583))
(assert (x502 x1129))
(assert (x502 x525))
(assert (= (and x762 x776) x1103))
(assert (= x659 (and x365 x207)))
(assert (x502 x593))
(assert (x502 x589))
(assert (x502 x153))
(assert (x502 x504))
(assert (x259 x866))
(assert (= 0 (x641 192)))
(assert (x502 x77))
(assert (x502 x5))
(assert (= x1092 (and (not x666) x195)))
(assert (= x320 (=> (= x1059 (< 0 x671)) (and (=> (and (= x589 x585) x1059) x435) (=> (and (and (= x547 x220) (= x778 x438) (= x515 x198) (= x1011 x806) (= 0 x112)) (not x1059)) x139)))))
(assert (= (and (not x756) x660) x294))
(assert (x259 x797))
(assert (x502 x180))
(assert (= (and (not x998) x1045) x493))
(assert (x502 x549))
(assert (= (and x1122 (not x841)) x506))
(assert (x502 x209))
(assert (= x1003 (or x656 x650)))
(assert (= (and x1038 x798) x89))
(assert (= (and (not x384) x648) x450))
(assert (x539 x887))
(assert (= x207 (and (not x544) x830)))
(assert (= 0 (x641 (+ (x187 (+ x697 196)) 32))))
(assert (x502 x347))
(assert (= (or x818 x466 x472 x1149 x14) x944))
(assert (= 0 (x641 (+ (- (+ 196 (- x872 160)) 196) (x187 (+ 196 x697))))))
(assert (x1151 x1127))
(assert (x502 x695))
(assert (x502 x585))
(assert (= x1096 (and x397 (not x100))))
(assert (x502 x174))
(assert (x502 x109))
(assert (x502 x628))
(assert (x502 x81))
(assert (x502 x1101))
(assert (= 0 (x354 (- 256 x29))))
(assert (x502 x580))
(assert (x502 x513))
(assert (= x873 (=> (= (= x138 0) x375) (and (=> (and (and (= x237 (< 0 x729)) (= (x987 x875) x729) (= (x187 (+ x589 32)) x216) (= (x187 (+ 3 x474)) x1040) (= x474 (x187 (+ 32 x589)))) (not x375)) (and (=> (and (not x237) (= x1139 0)) x577) (=> (and x237 (and (= x335 x1040) (= x1070 (x987 x872)) (= (< 32 x729) x100) (= x872 x936))) (and (=> (and x100 (and (= (x284 x1069) x805) (= x122 (x187 (+ x1040 32))) (= x748 (> x729 64)) (= (x187 (+ 32 x936)) x1069))) (and (=> (and x748 (and (= x331 (x187 (+ x936 64))) (= x476 (x1000 x331)) (= (< 96 x729) x666) (= x963 (x187 (+ x1040 64))))) (and (=> x666 x177) (=> (and (not x666) (= x1139 96)) x577))) (=> (and (not x748) (= x1139 64)) x577))) (=> (and (not x100) (= 32 x1139)) x577))))) (=> (and (and (= 0 x112) (= x806 x1011) (= x438 x778) (= x515 x198) (= x220 x547)) x375) x139)))))
(assert (= (and (not x143) x903) x820))
(assert (x502 x423))
(assert (x502 x714))
(assert (= 0 (x665 x278)))
(assert (= 0 (x641 (+ (x187 (+ x697 196)) (- (+ 196 (- x278 160)) 196)))))
(assert (= (and x429 x758) x386))
(assert (x502 x709))
(assert (x975 x124))
(assert (= (=> (and (= x695 (x187 (+ x467 96))) (= (not (> x305 128)) x891) (= x1112 (x225 256))) (and (=> (= 128 x573) x912) x891)) x932))
(assert (= x319 (and x303 (not x1027))))
(assert (= 0 (x665 x988)))
(assert (x502 x870))
(assert (= x66 (and x956 x71)))
(assert (x502 x545))
(assert (x1151 x92))
(assert (x388 x81))
(assert (x502 x572))
(assert (x502 x198))
(assert (= (and x176 x766) x486))
(assert (x502 x142))
(assert (x502 x226))
(assert (= x1077 (and x349 (not x411))))
(assert (= x119 (and (not x500) x465)))
(assert (= x471 (and (not x375) x793)))
(assert (and (x395 x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x385 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x385 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x385 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x385 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x8))
(assert (x502 x858))
(assert (x502 x915))
(assert (and (x395 x469 32) (=> (> 32 0) (= x469 (+ (* 32 (x1001 x469 32)) (x803 x469 32)))) (x822 x469 32) (x353 x469 32)))
(assert (x502 x125))
(assert (x502 x78))
(assert (x502 x7))
(assert (= x609 (and (not x1100) x813)))
(assert (x502 x481))
(assert (x502 x138))
(assert (= (x354 (- x331 x29)) 0))
(assert (x502 x734))
(assert (= x893 (and (not x863) x865)))
(assert (= x767 (and x402 x823)))
(assert (x502 x240))
(assert (and (x395 x174 32) (=> (> 32 0) (= x174 (+ (* 32 (x1001 x174 32)) (x803 x174 32)))) (x822 x174 32) (x353 x174 32)))
(assert (x502 x860))
(assert (= (=> (and (or x1114 (not x1114)) (= (= x468 0) x1114)) x1034) x850))
(assert (x502 x179))
(assert (x502 x212))
(assert (x502 x367))
(assert (x502 x847))
(assert (= (and x607 (not x882)) x169))
(assert (x502 x824))
(assert (x502 x239))
(assert (= (x641 (+ (x187 (+ 196 x697)) (- (+ (- 256 x936) x1056) 196))) 0))
(assert (x502 x563))
(assert (x502 x931))
(assert (= (and x514 (not x748)) x406))
(assert (= x1123 (and x358 (not x217))))
(assert (= x1026 (and x745 (not x837))))
(assert (x502 x1128))
(assert (x502 x778))
(assert (x502 x412))
(assert (= (x641 224) 0))
(assert (= (x641 (+ (- x821 196) (x187 (+ x697 196)))) 0))
(assert (x502 x605))
(assert (x539 x310))
(assert (and (x395 x263 32) (=> (> 32 0) (= x263 (+ (* 32 (x1001 x263 32)) (x803 x263 32)))) (x822 x263 32) (x353 x263 32)))
(assert (x502 x164))
(assert (= x534 (and x465 x500)))
(assert (x502 x373))
(assert (= (and x962 x944) x130))
(assert (= x656 (and x518 x925)))
(assert (= (=> (and (= (x698 x106) x265) (= x673 (x187 (+ 32 x489))) (= x587 (x187 (+ 32 x232))) (= (= x265 0) x401) (= (x187 (+ x181 32)) x232) (= x489 (x187 (+ x587 32)))) (and (=> (and (and (or (and x143 (and (= (= x525 (x360 x106)) x68) (< x49 4294967296) x68 (= x658 (x981 x788)) (= (x981 x106) x525) (= x710 (<= x658 (x360 x788))) x710)) (not x143)) (= (< 0 x138) x143)) (not x401)) x498) (=> (and x401 (and (= x198 x515) (= 0 x112) (= x438 x778) (= x806 x1011) (= x547 x220))) x139))) x546))
(assert (x502 x995))
(assert (= (and (not x766) x176) x751))
(assert (x502 x1097))
(assert (x502 x414))
(assert (x502 x914))
(assert (x502 x675))
(assert (= (x641 (+ (x187 (+ x697 196)) (- x274 196))) 0))
(assert (and (x395 x70 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x70 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x70 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x70 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x70 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x70 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x122))
(assert (= (=> (and (and (= x563 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x924)) (= (x811 x372) x109) (= x924 (x187 (+ 31 x1095))) (not (= x1007 0)) (= x433 (< 0 x1018)) (not (or (and (< x1095 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1095) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1095))) (= (x187 (+ x372 x563)) x555) (<= x109 1461501637330902918203684832716283019655932542975)) (or (and x433 (and (< x948 4294967296) (= x848 1))) (and (not x433) (= x848 x1018)))) x835) x221))
(assert (x502 x806))
(assert (x502 x88))
(assert (and (x395 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x469 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x910))
(assert (= (and (not x247) x516) x244))
(assert (= x381 (or x202 x681)))
(assert (x502 x332))
(assert (x502 x470))
(assert (x388 x866))
(assert (x502 x448))
(assert (x502 x908))
(assert (= x1051 (and x556 x433)))
(assert (x502 x913))
(assert (x502 x129))
(assert (x502 x632))
(assert (= x39 (and x1061 (not x47))))
(assert (and (x395 x960 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x960 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x960 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x960 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x960 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x960 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (or x110 x491 x292 x503 x1046) x518))
(assert (x502 x996))
(assert (x502 x17))
(assert (= (or x294 x361) x556))
(assert (= x339 (and (not x430) x701)))
(assert (x502 x70))
(assert (and (x633 32 x675) (x194 32 x675) (x228 32 x675) (and (= (* (- x675 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x900 32 (- x675 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x675 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x675 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x675 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x675) (* x675 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x675))) (x1121 32 x675) (= (x900 32 x675) (* 32 x675)) (x520 32 x675)))
(assert (x502 x809))
(assert (x1151 x1129))
(assert (x502 x462))
(assert (x502 x951))
(assert (x502 x555))
(assert (x502 x46))
(assert (and (x395 x263 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x263 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x263 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x263 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x263 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x263 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x1126))
(assert (x502 x831))
(assert (x388 x971))
(assert (x502 x872))
(assert (x502 x1086))
(assert (x502 x476))
(assert (and (x395 x1017 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x1017 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x1017 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x1017 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x1017 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x1017 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x1073))
(assert (= (and x965 x616) x509))
(assert (x539 x1129))
(assert (= x162 (and x534 (not x611))))
(assert (x502 x708))
(assert (x502 x133))
(assert (x502 x707))
(assert (x1151 x704))
(assert (= x508 (and (not x962) x944)))
(assert (x502 x485))
(assert (= (=> (= x247 (= 0 x135)) (and (=> (and x247 (and (= x220 x547) (= 0 x112) (= x515 x198) (= x438 x778) (= x1011 x806))) x139) (=> (and (and (= (x859 1461501637330902918203684832716283019655932542975 x866) x88) (= x1011 x8) (= x547 x1078) (= x914 x515) (= x521 32) (= 1 x165) (= x438 x344)) (not x247)) x22))) x801))
(assert (x502 x1139))
(assert (= 0 (x354 (- x278 x29))))
(assert (x502 x1133))
(assert (= 0 (x641 (+ (x187 (+ x697 196)) (- (+ (- x224 160) 196) 196)))))
(assert (x1151 x519))
(assert (x502 x1053))
(assert (x502 x720))
(assert (= x650 (and (not x925) x518)))
(assert (x259 1461501637330902918203684832716283019655932542976))
(assert (x1151 x887))
(assert (x502 x540))
(assert (= 0 (x641 (+ (- (+ x1056 (- x1069 x936)) 196) (x187 (+ x697 196))))))
(assert (x502 x1008))
(assert (= x755 (=> (and (or (not x217) (and x217 (= (x187 (+ x941 x657)) x682))) (= (< x657 x783) x217)) x440)))
(assert (x502 x137))
(assert (= x434 (=> (and (= (x73 (- x545 x858)) x1) (= x545 (x187 (+ x416 x870))) (= x181 (x187 (+ x858 32))) (= x308 (x187 (+ x545 32))) (= (x1060 x875) x1133) (= x704 (x187 (+ 31 x419))) (= (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x704) x416) (= x317 (> x1133 0))) (and (=> (and (= x731 0) (not x317)) x1099) (=> (and (and (= x707 x308) (= x843 (x892 x988)) (= x988 x936) (= (> x1133 32) x126)) x317) (and (=> (and (= x731 32) (not x126)) x1099) (=> (and (and (= x481 (x904 x62)) (= x62 (x187 (+ 32 x936))) (= x1143 (< 64 x1133)) (= x507 (x187 (+ 32 x308)))) x126) (and (=> (and (= x731 64) (not x1143)) x1099) (=> (and x1143 (and (= (x187 (+ 64 x936)) x224) (= x958 (x590 x224)) (= (x187 (+ x308 64)) x1105) (= (> x1133 96) x715))) (and (=> (and (not x715) (= 96 x731)) x1099) (=> x715 x277)))))))))))
(assert (and (x395 x1129 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x1129 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x1129 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x1129 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x1129 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x1129 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x456 x588) x453))
(assert (= (and x1142 x774) x176))
(assert (x502 x958))
(assert (= x890 (and (not x140) x1132)))
(assert (x388 x990))
(assert (x259 x1127))
(assert (x502 x1088))
(assert (x502 x542))
(assert (x502 x815))
(assert (x502 x678))
(assert (x259 x1072))
(assert (x502 x404))
(assert (x975 x675))
(assert (x502 x522))
(assert (and (x633 32 x915) (x194 32 x915) (x228 32 x915) (and (= (* (- x915 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x900 32 (- x915 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x915 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x915 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x915 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x915) (* x915 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x900 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x915))) (x1121 32 x915) (= (x900 32 x915) (* 32 x915)) (x520 32 x915)))
(assert (x502 x737))
(assert (x259 x1017))
(assert (x502 x587))
(assert (x502 x705))
(assert (= x391 (or x80 x535)))
(assert (x502 x232))
(assert (= (x641 x713) 0))
(assert (= 0 (x665 x331)))
(assert (x502 x750))
(assert (x502 x1039))
(assert (x502 x390))
(assert (x502 x929))
(assert (x502 x768))
(assert (x259 x976))
(assert (= x793 (or x382 (and (not x64) x266))))
(assert (x502 x489))
(assert (x539 x519))
(assert (x502 x82))
(assert (x502 x86))
(assert (= (x665 160) 0))
(assert (x502 x586))
(assert (x502 x20))
(assert (x502 x653))
(assert (x502 x712))
(assert (x502 x175))
(assert (x502 x933))
(assert (= (and x340 x878) x680))
(assert (= (and (not x1114) x898) x426))
(assert (x502 x1105))
(assert (x502 x805))
(assert (x502 x716))
(assert (= x361 (and x660 x756)))
(assert (x502 x1030))
(assert (x502 x604))
(assert (x502 x783))
(assert (x502 x1018))
(assert (= (and x322 x199) x607))
(assert (= 0 (x641 (+ (x187 (+ 196 x697)) (- (+ 196 (- x1069 160)) 196)))))
(assert (= (and x853 x649) x25))
(assert (= x577 (=> (and (or (not x524) (and x524 (= (x187 (+ x729 x1040)) x236))) (= (> x1139 x729) x524)) x431)))
(assert (= x359 (and x69 x952)))
(assert (= true x1144))
(assert (= x1085 (and x338 x317)))
(assert (x502 x56))
(assert (x502 x67))
(assert (x502 x104))
(assert (= (=> (and (and (not (or (> x1109 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1109)) (< x1109 32)))) (= (x187 (+ 31 x1109)) x469) (= x258 (x1067 x102)) (<= x258 1461501637330902918203684832716283019655932542975) (not (= 0 x16)) (= x691 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x469)) (= x756 (> x1021 0)) (= x372 (x187 (+ x102 x691)))) (or (and (= x1007 x1021) (not x756)) (and x756 (and (= x1007 1) (< x1095 4294967296))))) x221) x494))
(assert (x502 x702))
(assert (x502 x482))
(assert (x502 x690))
(assert (x502 x936))
(assert (x502 x971))
(assert (x502 x300))
(assert (x502 x960))
(assert (x502 x799))
(assert (x502 x651))
(assert (x502 x443))
(assert (x502 x691))
(assert (x502 x725))
(assert (= x71 (and x676 x619)))
(assert (= x745 (and x303 x1027)))
(assert (x502 x749))
(assert (= (and (not x853) x649) x60))
(assert (and (x395 x1127 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x1127 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x1127 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x1127 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x1127 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x1127 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x655))
(assert (= x116 (=> (and (= (x187 (+ x870 96)) x218) (= x559 (not (< 128 x419))) (= (x57 256) x367)) (and x559 (=> (= 128 x608) x248)))))
(assert (x975 x552))
(assert (x539 x1127))
(assert (x502 x761))
(assert (and (x395 x92 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x92 (+ (* 1461501637330902918203684832716283019655932542976 (x1001 x92 1461501637330902918203684832716283019655932542976)) (x803 x92 1461501637330902918203684832716283019655932542976)))) (x822 x92 1461501637330902918203684832716283019655932542976) (x353 x92 1461501637330902918203684832716283019655932542976)))
(assert (= (x641 (+ (x187 (+ 196 x697)) (- (+ x1056 (- x331 x936)) 196))) 0))
(assert (x502 x992))
(assert (x1151 x866))
(assert (= (and x297 x578) x681))
(assert (x502 x1117))
(assert (x502 x790))
(assert (x502 x310))
(assert (= x514 (and x100 x397)))
(assert (x502 x377))
(assert (x502 x788))
(assert (x259 x828))
(assert (= (x641 x357) 0))
(assert (= (and x677 x389) x249))
(assert (= x538 (or x52 x244 x355)))
(assert (= (and x994 x25) x1118))
(assert (x502 x919))
(assert (x539 x924))
(assert (x502 x948))
(assert (x502 x988))
(assert (x502 x1112))
(assert (x502 x475))
(assert (x502 x351))
(assert (= x1045 (and x264 x227)))
(assert (x502 x961))
(assert (x502 x697))
(assert (= (and x871 x794) x672))
(assert (= x808 (=> (and (= x286 (x187 (+ 96 x941))) (= (x147 256) x639) (= (not (< 128 x657)) x323)) (and x323 (=> (= 128 x783) x755)))))
(assert (x502 x252))
(assert (and (x395 x70 32) (=> (> 32 0) (= x70 (+ (* 32 (x1001 x70 32)) (x803 x70 32)))) (x822 x70 32) (x353 x70 32)))
(assert (= (x354 (- x872 x29)) 0))
(assert (x502 x34))
(assert (x259 x960))
(assert (= (and x823 (not x402)) x110))
(assert (x502 x35))
(assert (x502 x954))
(assert (= x1002 (=> (and (or (and (and (= x149 x671) (= x369 x55)) (not x677)) (and (and (= x604 0) (= x969 x1136) (= x671 x149) (= x55 x369) (= (x483 x788) x485) (= x485 x345) (< (+ x604 x485) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1136 (x168 x669))) x677)) (= (= 0 x149) x677)) x826)))
(assert (x502 x325))
(assert (x502 x268))
(assert (= (and x661 x825) x792))
(assert (= x794 (or x1051 x427)))
(assert (= 0 (x665 x872)))
(assert (= (and x195 x666) x261))
(assert (= x977 (and x882 x607)))
(assert (x502 x422))
(assert (= x466 (and x1085 (not x126))))
(assert (= 0 (x665 224)))
(assert (x502 x1012))
(assert (= (and x538 x1075) x696))
(assert (x502 x19))
(assert (x502 x560))
(assert (and (x395 x1017 32) (=> (> 32 0) (= x1017 (+ (* 32 (x1001 x1017 32)) (x803 x1017 32)))) (x822 x1017 32) (x353 x1017 32)))
(assert (x1151 x924))
(assert (x502 x208))
(assert (= x297 (or x499 x214 x249)))
(assert (= x789 (or x130 x508)))
(assert (x388 x788))
(assert (x502 x552))
(assert (= x1104 (and x659 (not x562))))
(assert (= 0 (x641 (+ (x187 (+ x697 196)) (- (+ x1056 (- x62 x936)) 196)))))
(assert (x502 x59))
(assert (x502 x1025))
(assert (= x266 (or x820 x309)))
(assert (x502 x112))
(assert (x502 x403))
(assert (and (x395 x960 32) (=> (> 32 0) (= x960 (+ (* 32 (x1001 x960 32)) (x803 x960 32)))) (x822 x960 32) (x353 x960 32)))
(assert (= (and x64 x266) x382))
(assert (= x87 (=> (and (and (and (= 1245659826 x1146) (<= 0 x370) (>= 1461501637330902918203684832716283019655932542975 x370) (= (x698 x788) x96) (> 2220280665 x1146) (< 0 x96) (= x370 x11) (= x1090 (= x1148 0)) (= 0 x684) (= x1148 x923) (< x370 1461501637330902918203684832716283019655932542976) (not (> 1245659826 x1146))) (and (and (= 4199168155 x930) (not (> 2220280665 x930)) (<= 0 x223) (not (= x930 3705713892)) (= x98 x223) (= (= 0 x1054) x630) (not (= 3084411429 x930)) (> x179 0) (= x1022 0) (>= 1461501637330902918203684832716283019655932542975 x223) (= (x698 x788) x179) (not (= 3572374928 x930)) (< x223 1461501637330902918203684832716283019655932542976) (not (= 4076725131 x930)) (not (< x930 3084411429)) (= (and x1090 x630) x770) (= x1054 x11)) (and (and (and (and (>= x370 0) (> 2220280665 x949) (= x949 1245659826) (= x152 (x698 x788)) (= x370 x694) (< x370 1461501637330902918203684832716283019655932542976) (= x448 x1039) (= x571 (not (= x448 0))) (< 0 x152) (<= x370 1461501637330902918203684832716283019655932542975) (= x718 0) (not (> 1245659826 x949))) (and (and (and (> 1461501637330902918203684832716283019655932542976 x922) (<= 0 x922) (= 2329570063 x159) (not (= 2249206060 x159)) (= 0 x82) (< 0 x851) (= x688 x992) (< x159 3084411429) (not (= x159 2220280665)) (= (not (= x992 0)) x120) (<= x922 1461501637330902918203684832716283019655932542975) (not (> 2220280665 x159)) (= x1042 (and x120 x764)) (= x851 (x698 x788)) (= x455 x922)) (and (= (or x21 x1028) x185) (= (and x1042 x410) x1028) (= x786 0) (= x455 x685) (= x410 (not (= 0 x685))))) (and (not (= x945 3084411429)) (not (= 3572374928 x945)) (not (< x945 2220280665)) (< x223 1461501637330902918203684832716283019655932542976) (= x270 (not (= 0 x480))) (< 0 x352) (not (= 3705713892 x945)) (= 4199168155 x945) (= (x698 x788) x352) (>= x223 0) (= x480 x694) (= x223 x688) (not (< x945 3084411429)) (>= 1461501637330902918203684832716283019655932542975 x223) (= 0 x601) (= (and x571 x270) x764) (not (= 4076725131 x945))))) (and (not (= x690 818759841)) (= x690 832554005) (> 1245659826 x690) (= (= 0 x26) x1079) (= (x698 x788) x268) (= x1012 x26) (>= x550 0) (= (and x541 x1079) x21) (= x885 0) (not (= 75068239 x690)) (> 1461501637330902918203684832716283019655932542976 x550) (<= x550 1461501637330902918203684832716283019655932542975) (= x550 x1039) (< x690 2220280665) (< 0 x268))) (and (= x212 (x698 x788)) (= 2329570063 x699) (not (= 2249206060 x699)) (not (< x699 2220280665)) (= 0 x157) (= x1012 x922) (= x98 x1055) (> x212 0) (>= 1461501637330902918203684832716283019655932542975 x922) (> 3084411429 x699) (= x541 (and x770 x460)) (< x922 1461501637330902918203684832716283019655932542976) (= x460 (= 0 x1055)) (not (= 2220280665 x699)) (>= x922 0))))) (and (not (= x59 818759841)) (not x946) (>= 1461501637330902918203684832716283019655932542975 x550) (= x550 x923) (> 2220280665 x59) (= x59 832554005) (not (= 75068239 x59)) (> x693 0) (> 1245659826 x59) (< x550 1461501637330902918203684832716283019655932542976) (not x739) (= (x698 x788) x693) (<= 0 x550))) x185)))
(assert (x502 x888))
(assert (= (or x600 x290) x660))
(assert (= (and x952 (not x69)) x424))
(assert (= x177 (=> (and (= x180 (x187 (+ 96 x1040))) (= (x187 (+ x936 96)) x61) (= x1008 (x184 x61)) (= x533 (not (< 128 x729)))) (and x533 (=> (= 128 x1139) x577)))))
(assert (= x676 (and x706 (not x532))))
(assert (x502 x1035))
(assert (x502 x979))
(assert (x502 x467))
(assert (= 0 (x354 (- 160 x29))))
(assert (x502 x18))
(assert (= (and x757 x509) x918))
(assert (x502 x536))
(assert (= x1034 (=> (= (< 0 x827) x457) (and (=> x457 x1023) (=> (and (not x457) (and (= x1011 x806) (= x198 x515) (= x547 x220) (= 0 x112) (= x438 x778))) x139)))))
(assert (x502 x814))
(assert (x502 x362))
(assert (x502 x4))
(assert (x502 x869))
(assert (= x1074 (and (not x1038) x798)))
(assert (= x965 (and x825 (not x661))))
(assert (x539 x976))
(assert (x502 x852))
(assert (x502 x415))
(assert (x502 x1040))
(assert (x539 x469))
(assert (= (and x1061 x47) x819))
(assert (x502 x787))
(assert (= x535 (and x2 (not x999))))
(assert (= (=> (and (or x1075 (not x1075)) (= (= 0 x165) x1075)) x206) x22))
(assert (x259 x310))
(assert (= 0 (x665 192)))
(assert (= (and x207 (not x365)) x379))
(assert (x502 x327))
(assert (= (and x375 x793) x421))
(assert (= (and x1003 (not x114)) x762))
(assert (x259 x70))
(assert (= (x641 (+ (x187 (+ x697 196)) (- (+ 196 (- x61 160)) 196))) 0))
(assert (x502 x875))
(assert (x502 x418))
(assert (= x85 (and x6 x380)))
(assert (x502 x305))
(assert (x502 x887))
(assert (x502 x964))
(assert (x975 x915))
(assert (x502 x1135))
(assert (x388 x857))
(assert (x259 32))
(assert (= x287 (and (not x551) x339)))
(assert (x502 x425))
(assert (x502 x1062))
(assert (x502 x1010))
(assert (x502 x243))
(assert (and (x395 x797 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x797 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x797 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x797 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x797 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x797 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x502 x220))
(assert (= (and x126 x1085) x30))
(assert (x502 x250))
(assert (x502 x148))
(assert (and (x395 x828 32) (=> (> 32 0) (= x828 (+ (* 32 (x1001 x828 32)) (x803 x828 32)))) (x822 x828 32) (x353 x828 32)))
(assert (and (x395 x565 32) (=> (> 32 0) (= x565 (+ (* 32 (x1001 x565 32)) (x803 x565 32)))) (x822 x565 32) (x353 x565 32)))
(assert (= x206 (=> (and (and (= x299 (> x366 0)) (= (x187 (+ x697 x504)) x201) (= x976 (x187 (+ 31 x521))) (not (= x165 0)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x521) (and (> 32 x521) (= true (<= x521 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x504 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x976)) (>= 1461501637330902918203684832716283019655932542975 x582) (= x582 (x336 x697))) (or (and (and (= 1 x362) (< x722 4294967296)) x299) (and (not x299) (= x366 x362)))) x1065)))
(assert (= (=> (and (= x1131 (not (< 4 x675))) (<= x137 1461501637330902918203684832716283019655932542975) (= x137 (x940 x342)) (= (x187 (+ 32 x605)) x995)) (and (=> (= x750 x995) x210) x1131)) x795))
(assert (x502 x1111))
(assert (x502 x376))
(assert (x502 x346))
(assert (x259 x887))
(assert (x1151 x976))
(assert (= x835 (=> (and (or (and x871 (and (= 1 x824) (> 4294967296 x856))) (and (not x871) (= x824 x252))) (and (= x647 (x187 (+ x1014 x555))) (= (x459 x555) x779) (>= 1461501637330902918203684832716283019655932542975 x779) (= (< 0 x252) x871) (= x1014 (x859 115792089237316195423570985008687907853269984665640564039457584007913129639904 x70)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x948) (and (< x948 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x948) true)))) (not (= x848 0)) (= x70 (x187 (+ 31 x948))))) x927)))
(assert (x502 x231))
(assert (x502 x1072))
(assert (x502 x1013))
(assert (x502 x1029))
(assert (x1151 1461501637330902918203684832716283019655932542975))
(assert (= x128 (or x810 x144)))
(assert (= x456 (and x1087 x834)))
(assert (= (x641 (+ (- x933 196) (x187 (+ 196 x697)))) 0))
(assert (x502 x98))
(assert (= (x641 (+ (- (+ (- x875 x936) x1056) 196) (x187 (+ x697 196)))) 0))
(assert (x502 x417))
(assert (x502 x442))
(assert (= (and (not x433) x556) x427))
(assert (= (=> (and (or (not x446) x446) (= x446 (= 0 x135))) x801) x12))
(assert (x539 x704))
(assert (x502 x1057))
(assert (= (or x428 x253) x1122))
(assert (= (and (not x677) x389) x214))
(assert (x502 x357))
(assert (x502 x275))
(assert (= (and (not x956) x71) x878))
(assert (x1151 x81))
(assert (= 0 (x641 (+ (- (+ x1056 (- x988 x936)) 196) (x187 (+ x697 196))))))
(assert (x502 x157))
(assert (x502 x615))
(assert (x502 x335))
(assert (x502 x1011))
(assert (= x667 (or x108 x1080)))
(assert (x502 x263))
(assert (x502 x897))
(assert (= x491 (and x767 (not x881))))
(assert (= (x641 (+ (- (+ (- 160 x936) x1056) 196) (x187 (+ 196 x697)))) 0))
(assert (= (and x1132 x140) x1061))
(assert (x502 x223))
(assert (x502 x699))
(assert (x502 x684))
(assert (x502 x492))
(assert (= x649 (or x13 x719)))
(assert (x502 x91))
(assert (x502 x1021))
(assert (x502 x152))
(assert (x502 x490))
(assert (x502 x149))
(assert (= (and x659 x562) x200))
(assert (x502 x779))
(assert (x502 x26))
(assert (x502 x181))
(assert (x502 x729))
(assert (x502 x658))
(assert (x502 x65))
(assert (= (or x574 x337) x823))
(assert (= (and x247 x516) x289))
(assert (x502 x1136))
(assert (x502 x1095))
(assert (x502 x1017))
(assert (= x389 (or x1077 x1032)))
(assert (= (and (not x222) x486) x499))
(assert (x502 x621))
(assert (x502 x1047))
(assert (x502 x342))
(assert (and (x395 x704 32) (=> (> 32 0) (= x704 (+ (* 32 (x1001 x704 32)) (x803 x704 32)))) (x822 x704 32) (x353 x704 32)))
(assert (x539 x1017))
(assert (x502 x894))
(assert (x502 x23))
(assert (= (and (not x524) x99) x13))
(assert (and (x395 x385 32) (=> (> 32 0) (= x385 (+ (* 32 (x1001 x385 32)) (x803 x385 32)))) (x822 x385 32) (x353 x385 32)))
(assert (x502 x949))
(assert (and (x395 x310 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x310 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x310 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x310 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x310 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x310 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x354 (- x875 x29)) 0))
(assert (= (x354 (- x62 x29)) 0))
(assert (x502 x800))
(assert (= (x354 (- x1069 x29)) 0))
(assert (x502 x341))
(assert (x502 x123))
(assert (x502 x1005))
(assert (= 0 (x641 (+ (- (+ 196 (- x331 160)) 196) (x187 (+ x697 196))))))
(assert (x502 x718))
(assert (= x1083 (or x759 x558 x493 x326 x893)))
(assert (x502 x922))
(assert (x259 x174))
(assert (x502 x634))
(assert (= x189 (=> (and (= x429 (= 0 x142)) (= x142 (x698 x857)) (= (x859 1461501637330902918203684832716283019655932542975 x866) x857)) (and (=> (and (not x429) (and (= x999 (< 0 x135)) (or (not x999) (and x999 (and x38 (> 4294967296 x470) (= x495 (x1094 x857)) (= (x1094 x788) x86) (= x753 (>= (x1006 x788) x86)) (= (= x495 (x1006 x857)) x38) x753))))) x12) (=> (and (and (= x112 0) (= x220 x547) (= x515 x198) (= x806 x1011) (= x438 x778)) x429) x139)))))
(assert (x539 x385))
(assert (= (x354 (- 192 x29)) 0))
(assert (= x428 (and x408 (not x111))))
(assert (x502 x986))
(assert (= x139 (=> (and (= x778 x344) (= x806 x8) (= x112 x165) (= x220 x1078) (= x198 x914) (= x521 x877)) x22)))
(assert (x502 x923))
(assert (and (x395 x1072 32) (=> (> 32 0) (= x1072 (+ (* 32 (x1001 x1072 32)) (x803 x1072 32)))) (x822 x1072 32) (x353 x1072 32)))
(assert (= (and x748 x514) x195))
(assert (x276 x866))
(assert (x502 x550))
(assert (x502 x842))
(assert (x502 x24))
(assert (x502 x827))
(assert (= x1113 (and x526 x83)))
(assert (x502 x674))
(assert (x502 x601))
(assert (x539 x70))
(assert (= x952 (and x703 x942)))
(assert (= x264 (and (not x1119) x1144)))
(assert (x502 x785))
(assert (x502 x216))
(assert (x502 x512))
(assert (x502 x645))
(assert (x502 x594))
(assert (x502 x624))
(assert (x388 x669))
(assert (x502 x622))
(assert (= x277 (=> (and (= x785 (x187 (+ x308 96))) (= (not (< 128 x1133)) x921) (= x278 (x187 (+ x936 96))) (= x708 (x947 x278))) (and (=> (= 128 x731) x1099) x921))))
(assert (x502 x889))
(assert (x502 x286))
(assert (x502 x592))
(assert (= x728 (or x447 x938)))
(assert (x502 x16))
(assert (x502 x399))
(assert (x1151 x828))
(assert (= (and x297 (not x578)) x202))
(assert (x502 x136))
(assert (x502 x192))
(assert (x502 x204))
(assert (= 0 (x641 x316)))
(assert (x502 x1145))
(assert (x502 x238))
(assert (x502 x924))
(assert (= (or x31 x119 x454 x115 x162) x40))
(assert (and (= (x900 9 3) 27) (= 81 (x900 27 3)) (= (x900 3 3) 9) (= 81 (x900 9 9))))
(assert (x502 x521))
(assert (x502 x623))
(assert (x502 x670))
(assert (= (and (not x537) x117) x943))
(assert (x502 x704))
(assert (x502 x370))
(assert (x502 x984))
(assert (x502 x265))
(assert (x502 x1130))
(assert (x502 x393))
(assert (x502 x396))
(assert (x502 x694))
(assert (= (and x25 (not x994)) x79))
(assert (x502 x895))
(assert (and (x395 x704 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x704 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1001 x704 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x803 x704 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x822 x704 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x353 x704 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x598 (and (not x281) x76)))
(assert (x502 x722))
(assert (= (and x715 x37) x472))
(assert (and (x395 x976 32) (=> (> 32 0) (= x976 (+ (* 32 (x1001 x976 32)) (x803 x976 32)))) (x822 x976 32) (x353 x976 32)))
(assert (= (or x1104 x598 x334 x379 x392) x6))
(assert (= x719 (and x524 x99)))
(assert (x388 x106))
(assert (= x758 (or x609 x664)))
(assert (= x774 (and x111 x408)))
(assert (x502 x963))
(assert (x502 x131))
(assert (x502 x324))
(assert (= (and x101 x1124) x865))
(assert (x502 x50))
(assert (x502 x61))
(assert (= x955 (=> (= (not (< 128 x312)) x1063) (and (=> (= x1111 128) x829) x1063))))
(check-sat)
(exit)
