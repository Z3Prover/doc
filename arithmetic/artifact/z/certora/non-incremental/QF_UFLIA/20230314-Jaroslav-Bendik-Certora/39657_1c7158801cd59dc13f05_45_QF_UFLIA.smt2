(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x758 () Int)
(declare-fun x902 () Int)
(declare-fun x278 () Bool)
(declare-fun x875 () Bool)
(declare-fun x774 () Int)
(declare-fun x615 () Int)
(declare-fun x844 () Int)
(declare-fun x617 () Bool)
(declare-fun x756 (Int) Int)
(declare-fun x813 () Int)
(declare-fun x541 () Int)
(declare-fun x510 () Int)
(declare-fun x111 () Bool)
(declare-fun x987 () Int)
(declare-fun x880 () Int)
(declare-fun x8 () Int)
(declare-fun x568 () Int)
(declare-fun x750 () Bool)
(declare-fun x160 () Int)
(declare-fun x936 (Int) Int)
(declare-fun x339 () Bool)
(declare-fun x710 () Int)
(declare-fun x1040 () Int)
(declare-fun x525 () Int)
(declare-fun x456 () Int)
(declare-fun x131 (Int) Int)
(declare-fun x350 () Bool)
(declare-fun x661 () Int)
(declare-fun x426 () Bool)
(declare-fun x337 () Int)
(declare-fun x223 () Int)
(declare-fun x779 () Int)
(declare-fun x203 () Bool)
(declare-fun x332 () Int)
(declare-fun x868 () Int)
(declare-fun x531 () Int)
(declare-fun x648 () Bool)
(declare-fun x344 () Int)
(declare-fun x1008 () Int)
(declare-fun x170 () Int)
(declare-fun x105 () Bool)
(declare-fun x9 () Bool)
(declare-fun x693 () Int)
(declare-fun x845 () Int)
(declare-fun x396 () Int)
(declare-fun x991 () Int)
(declare-fun x115 () Bool)
(declare-fun x205 () Int)
(declare-fun x887 () Bool)
(declare-fun x317 () Int)
(declare-fun x46 () Int)
(declare-fun x504 () Bool)
(declare-fun x27 () Bool)
(declare-fun x805 () Int)
(declare-fun x340 () Int)
(declare-fun x876 () Bool)
(declare-fun x110 () Bool)
(declare-fun x992 () Bool)
(declare-fun x620 () Bool)
(declare-fun x622 () Int)
(declare-fun x667 () Bool)
(declare-fun x82 () Int)
(declare-fun x507 () Bool)
(declare-fun x500 () Bool)
(declare-fun x38 () Bool)
(declare-fun x297 () Bool)
(declare-fun x981 () Bool)
(declare-fun x683 () Int)
(declare-fun x25 () Bool)
(declare-fun x1042 () Int)
(declare-fun x715 () Bool)
(declare-fun x549 () Bool)
(declare-fun x161 () Bool)
(declare-fun x893 () Int)
(declare-fun x224 () Bool)
(declare-fun x640 () Bool)
(declare-fun x189 () Int)
(declare-fun x956 () Bool)
(declare-fun x497 () Bool)
(declare-fun x71 () Int)
(declare-fun x619 () Bool)
(declare-fun x119 () Int)
(declare-fun x724 () Int)
(declare-fun x762 () Int)
(declare-fun x123 () Bool)
(declare-fun x385 () Bool)
(declare-fun x395 () Bool)
(declare-fun x717 () Int)
(declare-fun x694 () Int)
(declare-fun x1011 () Int)
(declare-fun x988 () Bool)
(declare-fun x815 (Int) Int)
(declare-fun x199 () Int)
(declare-fun x412 () Int)
(declare-fun x639 () Int)
(declare-fun x741 () Int)
(declare-fun x975 () Int)
(declare-fun x107 () Bool)
(declare-fun x807 () Bool)
(declare-fun x572 () Int)
(declare-fun x486 () Bool)
(declare-fun x475 () Int)
(declare-fun x16 () Bool)
(declare-fun x493 () Int)
(declare-fun x736 () Int)
(declare-fun x138 () Int)
(declare-fun x853 () Bool)
(declare-fun x976 () Int)
(declare-fun x233 () Bool)
(declare-fun x556 () Bool)
(declare-fun x675 () Bool)
(declare-fun x195 () Bool)
(declare-fun x827 () Int)
(declare-fun x955 () Bool)
(declare-fun x460 () Bool)
(declare-fun x309 () Int)
(declare-fun x187 () Int)
(declare-fun x571 () Bool)
(declare-fun x830 () Bool)
(declare-fun x306 () Int)
(declare-fun x1029 () Int)
(declare-fun x542 () Bool)
(declare-fun x970 () Bool)
(declare-fun x965 () Bool)
(declare-fun x242 () Int)
(declare-fun x973 () Int)
(declare-fun x325 () Int)
(declare-fun x457 () Bool)
(declare-fun x143 () Int)
(declare-fun x557 (Int) Int)
(declare-fun x214 () Int)
(declare-fun x43 () Bool)
(declare-fun x231 () Bool)
(declare-fun x274 () Bool)
(declare-fun x899 () Bool)
(declare-fun x268 () Bool)
(declare-fun x849 () Int)
(declare-fun x116 () Int)
(declare-fun x469 () Int)
(declare-fun x89 () Bool)
(declare-fun x104 () Int)
(declare-fun x653 () Int)
(declare-fun x384 () Bool)
(declare-fun x1017 () Bool)
(declare-fun x783 () Bool)
(declare-fun x562 () Int)
(declare-fun x1016 () Bool)
(declare-fun x879 () Bool)
(declare-fun x409 () Int)
(declare-fun x589 () Bool)
(declare-fun x550 () Int)
(declare-fun x609 () Bool)
(declare-fun x877 () Int)
(declare-fun x335 (Int) Int)
(declare-fun x795 () Bool)
(declare-fun x372 () Int)
(declare-fun x405 () Int)
(declare-fun x948 () Int)
(declare-fun x812 () Int)
(declare-fun x397 () Int)
(declare-fun x614 () Int)
(declare-fun x714 () Int)
(declare-fun x30 () Int)
(declare-fun x512 (Int Int) Int)
(declare-fun x870 () Int)
(declare-fun x597 () Bool)
(declare-fun x450 () Int)
(declare-fun x864 () Int)
(declare-fun x743 () Bool)
(declare-fun x402 () Bool)
(declare-fun x610 () Int)
(declare-fun x778 () Bool)
(declare-fun x888 () Int)
(declare-fun x933 () Int)
(declare-fun x851 () Int)
(declare-fun x566 () Bool)
(declare-fun x498 () Int)
(declare-fun x643 () Bool)
(declare-fun x574 () Int)
(declare-fun x797 () Bool)
(declare-fun x252 () Bool)
(declare-fun x850 () Bool)
(declare-fun x638 () Int)
(declare-fun x298 () Bool)
(declare-fun x941 () Int)
(declare-fun x642 () Bool)
(declare-fun x749 () Bool)
(declare-fun x770 () Bool)
(declare-fun x428 () Int)
(declare-fun x618 () Bool)
(declare-fun x32 () Bool)
(declare-fun x482 () Int)
(declare-fun x440 () Int)
(declare-fun x1006 () Int)
(declare-fun x626 () Int)
(declare-fun x511 () Int)
(declare-fun x997 () Int)
(declare-fun x913 () Int)
(declare-fun x586 () Bool)
(declare-fun x822 () Int)
(declare-fun x11 () Bool)
(declare-fun x596 () Bool)
(declare-fun x722 () Bool)
(declare-fun x804 () Int)
(declare-fun x705 () Int)
(declare-fun x489 () Bool)
(declare-fun x634 (Int) Int)
(declare-fun x334 () Bool)
(declare-fun x761 () Bool)
(declare-fun x256 () Int)
(declare-fun x776 () Int)
(declare-fun x519 () Bool)
(declare-fun x629 () Int)
(declare-fun x179 () Int)
(declare-fun x700 () Int)
(declare-fun x892 () Int)
(declare-fun x57 () Int)
(declare-fun x918 () Int)
(declare-fun x744 () Int)
(declare-fun x7 () Int)
(declare-fun x54 () Bool)
(declare-fun x1012 () Bool)
(declare-fun x443 () Int)
(declare-fun x881 () Bool)
(declare-fun x49 () Bool)
(declare-fun x647 () Int)
(declare-fun x754 () Bool)
(declare-fun x633 () Int)
(declare-fun x772 () Bool)
(declare-fun x21 () Int)
(declare-fun x336 () Bool)
(declare-fun x156 () Int)
(declare-fun x958 () Int)
(declare-fun x732 () Int)
(declare-fun x984 () Int)
(declare-fun x859 () Bool)
(declare-fun x1039 () Int)
(declare-fun x452 () Bool)
(declare-fun x245 () Bool)
(declare-fun x659 () Bool)
(declare-fun x681 () Bool)
(declare-fun x289 () Int)
(declare-fun x446 () Bool)
(declare-fun x1027 () Bool)
(declare-fun x891 () Int)
(declare-fun x164 () Int)
(declare-fun x97 () Int)
(declare-fun x842 () Int)
(declare-fun x178 () Bool)
(declare-fun x898 () Int)
(declare-fun x600 () Bool)
(declare-fun x662 () Int)
(declare-fun x745 () Bool)
(declare-fun x563 () Int)
(declare-fun x878 () Bool)
(declare-fun x172 () Int)
(declare-fun x765 () Int)
(declare-fun x86 () Bool)
(declare-fun x232 () Int)
(declare-fun x737 () Bool)
(declare-fun x287 () Int)
(declare-fun x303 () Bool)
(declare-fun x236 () Int)
(declare-fun x843 () Bool)
(declare-fun x219 () Bool)
(declare-fun x293 () Int)
(declare-fun x730 (Int) Int)
(declare-fun x234 () Int)
(declare-fun x487 () Bool)
(declare-fun x582 () Bool)
(declare-fun x129 () Bool)
(declare-fun x576 () Int)
(declare-fun x341 () Bool)
(declare-fun x631 () Int)
(declare-fun x215 () Bool)
(declare-fun x726 () Bool)
(declare-fun x1023 () Int)
(declare-fun x554 () Int)
(declare-fun x136 () Int)
(declare-fun x448 () Bool)
(declare-fun x963 () Int)
(declare-fun x398 () Int)
(declare-fun x751 () Bool)
(declare-fun x408 () Int)
(declare-fun x484 () Bool)
(declare-fun x539 () Int)
(declare-fun x241 () Int)
(declare-fun x437 () Int)
(declare-fun x742 () Bool)
(declare-fun x910 () Int)
(declare-fun x180 () Bool)
(declare-fun x218 () Bool)
(declare-fun x454 () Bool)
(declare-fun x520 () Bool)
(declare-fun x846 () Int)
(declare-fun x670 () Int)
(declare-fun x971 () Int)
(declare-fun x280 () Int)
(declare-fun x718 () Bool)
(declare-fun x53 () Bool)
(declare-fun x863 () Bool)
(declare-fun x569 () Int)
(declare-fun x917 () Bool)
(declare-fun x752 () Int)
(declare-fun x387 () Bool)
(declare-fun x645 () Bool)
(declare-fun x866 () Bool)
(declare-fun x627 () Bool)
(declare-fun x267 () Int)
(declare-fun x767 () Int)
(declare-fun x740 () Int)
(declare-fun x94 (Int Int) Int)
(declare-fun x701 () Bool)
(declare-fun x546 () Int)
(declare-fun x463 () Int)
(declare-fun x906 () Bool)
(declare-fun x1003 () Bool)
(declare-fun x599 () Bool)
(declare-fun x793 () Bool)
(declare-fun x646 () Bool)
(declare-fun x513 () Bool)
(declare-fun x577 () Int)
(declare-fun x1004 () Int)
(declare-fun x543 () Bool)
(declare-fun x835 () Bool)
(declare-fun x45 () Int)
(declare-fun x655 (Int) Int)
(declare-fun x78 () Bool)
(declare-fun x664 () Bool)
(declare-fun x228 () Int)
(declare-fun x1038 () Bool)
(declare-fun x248 () Int)
(declare-fun x433 () Int)
(declare-fun x882 () Int)
(declare-fun x155 () Bool)
(declare-fun x972 () Int)
(declare-fun x422 () Int)
(declare-fun x764 () Int)
(declare-fun x286 () Bool)
(declare-fun x784 () Bool)
(declare-fun x369 () Int)
(declare-fun x727 () Bool)
(declare-fun x1032 () Bool)
(declare-fun x101 () Bool)
(declare-fun x581 () Int)
(declare-fun x564 () Int)
(declare-fun x847 () Bool)
(declare-fun x533 () Int)
(declare-fun x731 (Int) Int)
(declare-fun x391 () Int)
(declare-fun x208 () Int)
(declare-fun x1018 () Int)
(declare-fun x198 () Bool)
(declare-fun x349 () Int)
(declare-fun x269 () Int)
(declare-fun x182 () Bool)
(declare-fun x674 () Bool)
(declare-fun x445 () Bool)
(declare-fun x73 () Int)
(declare-fun x294 () Int)
(declare-fun x342 () Bool)
(declare-fun x854 () Int)
(declare-fun x735 () Bool)
(declare-fun x919 () Int)
(declare-fun x1009 () Int)
(declare-fun x934 () Bool)
(declare-fun x966 () Int)
(declare-fun x535 () Int)
(declare-fun x326 () Bool)
(declare-fun x108 () Int)
(declare-fun x884 () Bool)
(declare-fun x95 () Int)
(declare-fun x1037 () Int)
(declare-fun x100 () Bool)
(declare-fun x544 () Int)
(declare-fun x36 () Int)
(declare-fun x660 () Int)
(declare-fun x896 () Bool)
(declare-fun x781 () Int)
(declare-fun x1021 () Int)
(declare-fun x261 () Int)
(declare-fun x58 () Int)
(declare-fun x388 () Bool)
(declare-fun x746 () Int)
(declare-fun x465 () Bool)
(declare-fun x929 () Bool)
(declare-fun x292 () Int)
(declare-fun x96 () Bool)
(declare-fun x410 () Bool)
(declare-fun x134 () Bool)
(declare-fun x499 () Int)
(declare-fun x530 () Bool)
(declare-fun x999 () Bool)
(declare-fun x993 () Bool)
(declare-fun x872 () Bool)
(declare-fun x782 () Int)
(declare-fun x382 () Bool)
(declare-fun x147 () Int)
(declare-fun x690 () Bool)
(declare-fun x14 () Int)
(declare-fun x691 () Bool)
(declare-fun x650 () Int)
(declare-fun x939 () Int)
(declare-fun x501 () Int)
(declare-fun x320 (Int Int) Int)
(declare-fun x52 () Bool)
(declare-fun x288 () Bool)
(declare-fun x77 () Bool)
(declare-fun x529 () Int)
(declare-fun x462 () Int)
(declare-fun x370 () Int)
(declare-fun x904 () Bool)
(declare-fun x5 () Int)
(declare-fun x828 () Bool)
(declare-fun x889 () Bool)
(declare-fun x430 () Bool)
(declare-fun x841 () Int)
(declare-fun x283 () Int)
(declare-fun x152 () Bool)
(declare-fun x800 () Bool)
(declare-fun x895 () Bool)
(declare-fun x240 () Bool)
(declare-fun x696 () Int)
(declare-fun x496 () Int)
(declare-fun x547 () Bool)
(declare-fun x411 () Int)
(declare-fun x773 (Int) Int)
(declare-fun x983 () Int)
(declare-fun x353 () Bool)
(declare-fun x150 () Bool)
(declare-fun x492 () Bool)
(declare-fun x823 () Bool)
(declare-fun x950 () Bool)
(declare-fun x270 () Bool)
(declare-fun x74 (Int Int) Int)
(declare-fun x623 () Int)
(declare-fun x518 () Bool)
(declare-fun x820 () Int)
(declare-fun x244 () Int)
(declare-fun x365 () Bool)
(declare-fun x264 () Bool)
(declare-fun x461 () Bool)
(declare-fun x381 () Bool)
(declare-fun x608 () Bool)
(declare-fun x712 () Bool)
(declare-fun x837 () Int)
(declare-fun x15 () Bool)
(declare-fun x225 () Int)
(declare-fun x838 () Int)
(declare-fun x491 () Bool)
(declare-fun x658 () Int)
(declare-fun x553 () Bool)
(declare-fun x193 () Int)
(declare-fun x962 () Bool)
(declare-fun x855 () Bool)
(declare-fun x861 () Int)
(declare-fun x362 () Bool)
(declare-fun x523 () Int)
(declare-fun x206 () Int)
(declare-fun x139 () Int)
(declare-fun x900 () Int)
(declare-fun x126 () Int)
(declare-fun x438 () Bool)
(declare-fun x536 () Int)
(declare-fun x704 () Int)
(declare-fun x371 () Int)
(declare-fun x551 () Int)
(declare-fun x573 () Bool)
(declare-fun x869 () Bool)
(declare-fun x858 () Int)
(declare-fun x157 () Bool)
(declare-fun x990 () Bool)
(declare-fun x40 () Int)
(declare-fun x528 () Bool)
(declare-fun x319 () Bool)
(declare-fun x734 () Int)
(declare-fun x12 () Bool)
(declare-fun x273 () Int)
(declare-fun x316 () Int)
(declare-fun x417 () Int)
(declare-fun x721 () Int)
(declare-fun x279 () Int)
(declare-fun x505 () Bool)
(declare-fun x464 () Int)
(declare-fun x607 () Int)
(declare-fun x824 () Int)
(declare-fun x692 () Int)
(declare-fun x769 () Int)
(declare-fun x34 () Int)
(declare-fun x449 () Int)
(declare-fun x220 () Bool)
(declare-fun x601 () Bool)
(declare-fun x183 () Int)
(declare-fun x262 () Int)
(declare-fun x373 () Bool)
(declare-fun x677 () Int)
(declare-fun x188 () Int)
(declare-fun x197 () Bool)
(declare-fun x363 () Bool)
(declare-fun x271 () Bool)
(declare-fun x250 () Bool)
(declare-fun x238 () Bool)
(declare-fun x625 () Int)
(declare-fun x207 () Int)
(declare-fun x211 () Bool)
(declare-fun x346 () Int)
(declare-fun x865 () Bool)
(declare-fun x821 () Bool)
(declare-fun x435 () Int)
(declare-fun x829 () Int)
(declare-fun x28 () Int)
(declare-fun x621 () Int)
(declare-fun x954 () Int)
(declare-fun x413 () Bool)
(declare-fun x106 (Int) Int)
(declare-fun x473 () Bool)
(declare-fun x79 () Int)
(declare-fun x168 () Bool)
(declare-fun x299 () Int)
(declare-fun x669 () Bool)
(declare-fun x545 () Bool)
(declare-fun x480 () Bool)
(declare-fun x171 () Bool)
(declare-fun x331 () Bool)
(declare-fun x137 () Bool)
(declare-fun x260 () Bool)
(declare-fun x427 (Int) Int)
(declare-fun x403 () Bool)
(declare-fun x885 () Bool)
(declare-fun x485 () Int)
(declare-fun x285 () Bool)
(declare-fun x425 () Bool)
(declare-fun x567 () Int)
(declare-fun x593 () Int)
(declare-fun x1022 () Bool)
(declare-fun x928 () Bool)
(declare-fun x418 () Int)
(declare-fun x50 () Bool)
(declare-fun x725 () Bool)
(declare-fun x222 () Int)
(declare-fun x176 () Bool)
(declare-fun x347 () Int)
(declare-fun x351 () Bool)
(declare-fun x6 () Int)
(declare-fun x311 () Int)
(declare-fun x42 () Bool)
(declare-fun x995 () Int)
(declare-fun x591 () Int)
(declare-fun x977 () Int)
(declare-fun x552 () Int)
(declare-fun x424 () Int)
(declare-fun x338 () Bool)
(declare-fun x29 () Bool)
(declare-fun x961 (Int) Int)
(declare-fun x375 () Int)
(declare-fun x98 () Bool)
(declare-fun x93 () Bool)
(declare-fun x771 () Bool)
(declare-fun x314 () Bool)
(declare-fun x360 (Int Int) Int)
(declare-fun x112 () Int)
(declare-fun x282 () Int)
(declare-fun x856 () Bool)
(declare-fun x318 () Bool)
(declare-fun x474 () Bool)
(declare-fun x212 () Int)
(declare-fun x663 () Int)
(declare-fun x723 () Int)
(declare-fun x478 () Int)
(declare-fun x476 () Int)
(declare-fun x348 () Bool)
(declare-fun x181 () Int)
(declare-fun x453 () Bool)
(declare-fun x310 () Int)
(declare-fun x281 () Int)
(declare-fun x612 () Int)
(declare-fun x333 () Bool)
(declare-fun x792 () Int)
(declare-fun x671 () Int)
(declare-fun x559 () Int)
(declare-fun x229 () Int)
(declare-fun x253 () Int)
(declare-fun x689 () Bool)
(declare-fun x777 () Int)
(declare-fun x1035 () Bool)
(declare-fun x61 () Int)
(declare-fun x649 () Int)
(declare-fun x809 () Bool)
(declare-fun x91 () Int)
(declare-fun x308 () Int)
(declare-fun x251 () Bool)
(declare-fun x810 () Int)
(declare-fun x467 () Int)
(declare-fun x24 () Int)
(declare-fun x243 () Bool)
(declare-fun x613 () Bool)
(declare-fun x1001 (Int Int) Int)
(declare-fun x357 () Int)
(declare-fun x41 () Int)
(declare-fun x291 () Int)
(declare-fun x18 () Bool)
(declare-fun x952 () Bool)
(declare-fun x59 () Bool)
(declare-fun x914 () Bool)
(declare-fun x62 () Int)
(declare-fun x374 () Bool)
(declare-fun x635 () Int)
(declare-fun x922 () Int)
(declare-fun x989 () Bool)
(declare-fun x969 () Bool)
(declare-fun x637 () Bool)
(declare-fun x874 () Bool)
(declare-fun x394 () Bool)
(declare-fun x210 () Bool)
(declare-fun x862 () Int)
(declare-fun x173 () Int)
(declare-fun x611 () Int)
(declare-fun x421 () Bool)
(declare-fun x791 () Int)
(declare-fun x819 () Bool)
(declare-fun x527 () Bool)
(declare-fun x682 () Bool)
(declare-fun x949 () Int)
(declare-fun x355 () Int)
(declare-fun x652 () Int)
(declare-fun x759 () Bool)
(declare-fun x190 () Bool)
(declare-fun x92 () Int)
(declare-fun x515 (Int) Int)
(declare-fun x254 () Int)
(declare-fun x930 () Int)
(declare-fun x799 () Int)
(declare-fun x263 () Bool)
(declare-fun x996 () Bool)
(declare-fun x602 () Int)
(declare-fun x47 () Bool)
(declare-fun x249 () Bool)
(declare-fun x506 (Int) Int)
(declare-fun x400 () Int)
(declare-fun x788 () Bool)
(declare-fun x266 () Int)
(declare-fun x580 () Int)
(declare-fun x697 (Int) Int)
(declare-fun x201 () Bool)
(declare-fun x794 () Int)
(declare-fun x495 () Bool)
(declare-fun x957 () Int)
(declare-fun x502 () Int)
(declare-fun x565 () Bool)
(declare-fun x209 () Bool)
(declare-fun x897 () Bool)
(declare-fun x695 () Int)
(declare-fun x55 () Int)
(declare-fun x216 () Int)
(declare-fun x616 () Bool)
(declare-fun x76 () Int)
(declare-fun x184 () Int)
(declare-fun x420 () Bool)
(declare-fun x494 () Int)
(declare-fun x204 () Bool)
(declare-fun x237 () Bool)
(declare-fun x548 () Int)
(declare-fun x802 () Int)
(declare-fun x867 () Bool)
(declare-fun x831 () Int)
(declare-fun x324 () Bool)
(declare-fun x213 () Bool)
(declare-fun x407 () Int)
(declare-fun x641 () Bool)
(declare-fun x676 (Int) Int)
(declare-fun x651 () Bool)
(declare-fun x666 () Bool)
(declare-fun x275 () Int)
(declare-fun x284 () Int)
(declare-fun x508 () Bool)
(declare-fun x227 () Int)
(declare-fun x148 () Int)
(declare-fun x122 () Int)
(declare-fun x200 () Int)
(declare-fun x1010 () Int)
(declare-fun x120 () Bool)
(declare-fun x290 () Bool)
(declare-fun x483 () Bool)
(declare-fun x943 () Int)
(declare-fun x946 () Bool)
(declare-fun x202 () Int)
(declare-fun x806 () Bool)
(declare-fun x315 () Bool)
(declare-fun x439 () Bool)
(declare-fun x503 () Int)
(declare-fun x272 () Bool)
(declare-fun x522 () Int)
(declare-fun x713 () Int)
(declare-fun x624 () Bool)
(declare-fun x561 () Int)
(declare-fun x1025 () Bool)
(declare-fun x247 () Bool)
(declare-fun x848 () Bool)
(declare-fun x698 () Int)
(declare-fun x644 () Bool)
(declare-fun x755 () Bool)
(declare-fun x185 () Bool)
(declare-fun x13 () Bool)
(declare-fun x931 () Bool)
(declare-fun x871 () Bool)
(declare-fun x817 () Bool)
(declare-fun x169 () Bool)
(declare-fun x915 () Bool)
(declare-fun x470 () Int)
(declare-fun x979 () Int)
(declare-fun x135 () Int)
(declare-fun x37 () Bool)
(declare-fun x114 () Bool)
(declare-fun x221 () Bool)
(declare-fun x729 () Bool)
(declare-fun x578 () Int)
(declare-fun x636 () Int)
(declare-fun x673 () Bool)
(declare-fun x217 () Int)
(declare-fun x321 (Int) Int)
(declare-fun x356 () Bool)
(declare-fun x1002 () Bool)
(declare-fun x720 () Bool)
(declare-fun x832 () Bool)
(declare-fun x90 () Int)
(declare-fun x70 () Int)
(declare-fun x606 () Int)
(declare-fun x153 () Bool)
(declare-fun x588 () Int)
(declare-fun x814 () Int)
(declare-fun x935 () Int)
(declare-fun x133 () Bool)
(declare-fun x524 () Int)
(declare-fun x808 () Int)
(declare-fun x657 () Int)
(declare-fun x436 () Bool)
(declare-fun x787 () Int)
(declare-fun x481 () Int)
(declare-fun x901 () Int)
(declare-fun x811 () Bool)
(declare-fun x920 () Bool)
(declare-fun x84 () Bool)
(declare-fun x857 () Int)
(declare-fun x393 () Bool)
(declare-fun x509 () Bool)
(declare-fun x392 () Int)
(declare-fun x938 () Bool)
(declare-fun x102 () Int)
(declare-fun x305 () Bool)
(declare-fun x163 () Bool)
(declare-fun x477 () Bool)
(declare-fun x873 () Bool)
(declare-fun x951 () Bool)
(declare-fun x459 () Bool)
(declare-fun x26 () Bool)
(declare-fun x684 () Bool)
(declare-fun x361 () Int)
(declare-fun x514 () Int)
(declare-fun x175 () Bool)
(declare-fun x1013 () Int)
(declare-fun x1026 () Int)
(declare-fun x708 () Int)
(declare-fun x359 () Int)
(declare-fun x852 () Int)
(declare-fun x75 () Int)
(declare-fun x65 () Int)
(declare-fun x379 () Int)
(declare-fun x404 () Int)
(declare-fun x839 () Bool)
(declare-fun x118 () Int)
(declare-fun x964 () Int)
(declare-fun x258 () Bool)
(declare-fun x192 () Int)
(declare-fun x304 () Int)
(declare-fun x239 () Int)
(declare-fun x789 () Int)
(declare-fun x594 () Bool)
(declare-fun x1028 () Int)
(declare-fun x167 () Int)
(declare-fun x654 () Bool)
(declare-fun x162 () Bool)
(declare-fun x48 () Bool)
(declare-fun x985 () Bool)
(declare-fun x688 () Int)
(declare-fun x1019 () Bool)
(declare-fun x521 () Bool)
(declare-fun x803 () Bool)
(declare-fun x399 () Int)
(declare-fun x125 () Int)
(declare-fun x587 () Bool)
(declare-fun x455 () Bool)
(declare-fun x532 () Int)
(declare-fun x974 () Int)
(declare-fun x998 () Int)
(declare-fun x526 () Bool)
(declare-fun x31 () Bool)
(declare-fun x472 () Int)
(declare-fun x444 () Int)
(declare-fun x128 () Bool)
(declare-fun x748 () Int)
(declare-fun x886 () Int)
(declare-fun x925 () Int)
(declare-fun x66 () Int)
(declare-fun x1000 () Bool)
(declare-fun x678 () Bool)
(declare-fun x706 () Bool)
(declare-fun x246 () Int)
(declare-fun x328 () Bool)
(declare-fun x945 () Bool)
(declare-fun x833 () Int)
(declare-fun x186 () Int)
(declare-fun x628 () Bool)
(declare-fun x145 () Bool)
(declare-fun x1041 () Bool)
(declare-fun x679 () Int)
(declare-fun x1024 () Bool)
(declare-fun x924 () Bool)
(declare-fun x944 () Bool)
(declare-fun x716 () Int)
(declare-fun x1014 () Int)
(declare-fun x836 () Int)
(declare-fun x585 () Bool)
(declare-fun x912 () Bool)
(declare-fun x786 () Bool)
(declare-fun x68 () Int)
(declare-fun x277 (Int) Int)
(declare-fun x56 () Bool)
(declare-fun x1015 () Int)
(declare-fun x1007 () Bool)
(declare-fun x584 () Int)
(declare-fun x921 () Bool)
(declare-fun x940 () Bool)
(declare-fun x942 () Bool)
(declare-fun x796 () Int)
(declare-fun x538 () Bool)
(declare-fun x570 () Bool)
(declare-fun x295 () Bool)
(declare-fun x680 () Int)
(declare-fun x558 () Int)
(declare-fun x894 () Int)
(declare-fun x747 () Bool)
(declare-fun x67 () Bool)
(declare-fun x801 () Bool)
(declare-fun x2 () Bool)
(declare-fun x85 () Bool)
(declare-fun x816 () Bool)
(declare-fun x665 () Bool)
(declare-fun x707 () Bool)
(declare-fun x196 () Int)
(declare-fun x466 () Int)
(declare-fun x302 () Bool)
(declare-fun x159 () Bool)
(declare-fun x322 () Int)
(declare-fun x3 () Int)
(declare-fun x834 () Int)
(declare-fun x790 () Int)
(declare-fun x630 () Int)
(declare-fun x903 () Int)
(declare-fun x166 () Int)
(declare-fun x760 () Bool)
(declare-fun x719 () Bool)
(declare-fun x33 () Bool)
(declare-fun x330 () Bool)
(declare-fun x818 () Int)
(declare-fun x329 () Int)
(declare-fun x174 () Bool)
(declare-fun x383 () Int)
(declare-fun x605 () Bool)
(declare-fun x429 () Int)
(declare-fun x376 () Int)
(define-fun x560 ((x840 Int)) Int (ite (and (>= x840 0) (< x840 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x840 (- x840 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1033 ((x840 Int)) Int (ite (and (> 0 x840) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x840)) (+ x840 115792089237316195423570985008687907853269984665640564039457584007913129639936) x840))
(define-fun x23 ((x840 Int)) Int (ite (and (< x840 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x840)) x840 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x840) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x840)) (- x840 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x840) (< x840 0)) (+ x840 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x512 x840 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x144 ((x276 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x276) (<= 0 x276)))
(define-fun x149 ((x276 Int)) Bool (and (< x276 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x276 0)))
(define-fun x87 ((x276 Int)) Bool (and (= x276 (x1001 x276 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639935 x276) x276)))
(define-fun x63 ((x276 Int)) Bool (and (= 0 (x1001 0 x276)) (= 0 (x1001 x276 0))))
(define-fun x109 ((x276 Int)) Bool (= x276 (x1001 x276 x276)))
(define-fun x1030 ((x276 Int)) Bool (and (x109 x276) (x87 x276) (x63 x276)))
(define-fun x780 ((x276 Int) (x419 Int)) Bool (= (x1001 x419 x276) (x1001 x276 x419)))
(define-fun x739 ((x276 Int) (x419 Int)) Bool (and (=> (<= 0 x419) (<= (x1001 x276 x419) x419)) (=> (<= 0 x276) (>= x276 (x1001 x276 x419))) (>= (x1001 x276 x419) 0)))
(define-fun x798 ((x276 Int) (x419 Int)) Bool (and (x739 x276 x419) (x780 x276 x419)))
(define-fun x127 ((x276 Int)) Bool (= (+ (x512 x276 32) (x1001 x276 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x23 x276)))
(define-fun x142 ((x276 Int)) Bool (and (x798 x276 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x127 x276)))
(define-fun x980 ((x276 Int) (x419 Int)) Bool (and (> x419 (x512 x276 x419)) (>= (x512 x276 x419) 0)))
(define-fun x595 ((x276 Int) (x419 Int)) Bool (=> (and (< 0 x419) (>= x276 0)) (= (< x276 x419) (= x276 (x512 x276 x419)))))
(define-fun x590 ((x276 Int) (x419 Int)) Bool (=> (and (> x419 0) (and (< x276 (+ x419 x419)) (>= x276 x419))) (= (- x276 x419) (x512 x276 x419))))
(define-fun x312 ((x276 Int)) Bool (= (x512 0 x276) 0))
(define-fun x537 ((x276 Int)) Bool (= 0 (x512 x276 1)))
(define-fun x982 ((x276 Int)) Bool (= (x512 x276 x276) 0))
(define-fun x364 ((x276 Int)) Bool (and (x982 x276) (x537 x276) (x312 x276)))
(define-fun x69 ((x276 Int) (x419 Int)) Bool (=> (and (< 0 x419) (< 0 x276)) (= (< (x94 x276 x419) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x360 (x23 (x94 x276 x419)) x276) x419))))
(define-fun x130 ((x276 Int) (x419 Int)) Bool (=> (and (not (= x276 0)) (not (= 0 x419))) (and (= x276 (x360 (x94 x276 x419) x419)) (= x419 (x360 (x94 x276 x419) x276)))))
(define-fun x80 ((x276 Int) (x419 Int)) Bool (=> (and (> x419 0) (> x276 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x94 x276 x419)) (< (x360 115792089237316195423570985008687907853269984665640564039457584007913129639935 x276) x419))))
(define-fun x377 ((x276 Int) (x419 Int)) Bool (and (= (x23 (x94 (- x276 115792089237316195423570985008687907853269984665640564039457584007913129639936) x419)) (x23 (x94 x276 x419))) (= (x23 (x94 x276 x419)) (x23 (x94 (- x276 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x23 (x94 x276 x419)) (x23 (x94 x276 (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x994 ((x276 Int) (x419 Int)) Bool (and (=> (and (and (<= x276 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x276 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x419 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x419 0))) (= (>= (x94 (- x276 115792089237316195423570985008687907853269984665640564039457584007913129639936) x419) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x360 57896044618658097711785492504343953926634992332820282019728792003956564819968 x419) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x276)))) (=> (and (and (< 0 x419) (<= x419 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x276) (> x276 0))) (= (>= (x360 57896044618658097711785492504343953926634992332820282019728792003956564819967 x419) x276) (<= (x94 x276 x419) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (<= x276 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x276)) (and (> x419 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x419 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x360 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x419)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x276)) (<= (x94 (- x276 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x419 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x419)) (and (> x276 0) (<= x276 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x94 x276 (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x360 57896044618658097711785492504343953926634992332820282019728792003956564819968 x276) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x419))))))
(define-fun x728 ((x276 Int)) Bool (and (= (x94 0 x276) 0) (= 0 (x94 x276 0))))
(define-fun x923 ((x276 Int)) Bool (and (= (x94 x276 1) x276) (= (x94 1 x276) x276)))
(define-fun x72 ((x276 Int)) Bool (and (x728 x276) (x923 x276)))
(define-fun x296 ((x276 Int)) Bool (= (x1001 x276 1461501637330902918203684832716283019655932542975) (x512 x276 1461501637330902918203684832716283019655932542976)))
(define-fun x468 ((x276 Int)) Bool (and (x296 x276) (x798 x276 1461501637330902918203684832716283019655932542975)))
(define-fun x432 ((x194 Int)) Int (ite (< x194 x325) (x335 x194) 0))
(define-fun x947 ((x194 Int)) Int (x106 x194))
(define-fun x668 ((x194 Int)) Int (ite (= x194 x205) x281 (x961 x194)))
(define-fun x124 ((x194 Int)) Int (ite (= x112 x194) x36 (x668 x194)))
(define-fun x785 ((x194 Int)) Int (ite (= 128 x194) x963 (x506 x194)))
(define-fun x908 ((x194 Int)) Int (ite (and (>= x194 160) (< x194 (+ 160 x963))) (x106 (+ x501 (- x194 160))) (x785 x194)))
(define-fun x132 ((x194 Int)) Int (ite (= x194 x752) 0 (x908 x194)))
(define-fun x415 ((x194 Int)) Int (ite (= x194 x1006) x851 (x132 x194)))
(define-fun x230 ((x194 Int)) Int (ite (and (< x194 (+ x207 x851)) (<= x207 x194)) (x106 (+ x1026 (- x194 x207))) (x415 x194)))
(define-fun x711 ((x194 Int)) Int (ite (= x5 x194) 0 (x230 x194)))
(define-fun x753 ((x194 Int)) Int (ite (= x194 x503) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x711 x194)))
(define-fun x766 ((x194 Int)) Int (ite (= x194 x437) 160 (x753 x194)))
(define-fun x307 ((x194 Int)) Int (ite (= x194 x791) x930 (x766 x194)))
(define-fun x235 ((x194 Int)) Int (ite (= x888 x194) x918 (x307 x194)))
(define-fun x390 ((x194 Int)) Int (ite (= x194 x8) x466 (x235 x194)))
(define-fun x632 ((x194 Int)) Int (ite (= x194 x522) x638 (x390 x194)))
(define-fun x39 ((x194 Int)) Int (ite (= x804 x194) x857 (x632 x194)))
(define-fun x259 ((x194 Int)) Int (ite x642 (x632 x194) (ite x153 (x390 x194) (ite x77 (x235 x194) (ite x843 (x307 x194) (x39 x194))))))
(define-fun x763 ((x194 Int)) Int (ite (= x450 x194) 0 (x259 x194)))
(define-fun x416 ((x194 Int)) Int (ite x545 (x259 x194) (x763 x194)))
(define-fun x703 ((x194 Int)) Int (ite (= x371 x194) x611 (x416 x194)))
(define-fun x978 ((x194 Int)) Int (ite (= x412 x194) x435 (x703 x194)))
(define-fun x358 ((x194 Int)) Int (ite (= x194 x222) x476 (x978 x194)))
(define-fun x699 ((x194 Int)) Int (ite (= x424 x194) x584 (x358 x194)))
(define-fun x685 ((x194 Int)) Int (ite (= x194 x1009) x744 (x699 x194)))
(define-fun x890 ((x194 Int)) Int (ite (= x194 x332) x741 (x685 x194)))
(define-fun x516 ((x194 Int)) Int (ite x120 (x685 x194) (ite x648 (x699 x194) (ite x617 (x358 x194) (ite x159 (x978 x194) (x890 x194))))))
(define-fun x583 ((x194 Int)) Int (ite (= x194 x399) 0 (x516 x194)))
(define-fun x826 ((x194 Int)) Int (ite x1000 (x516 x194) (x583 x194)))
(define-fun x909 ((x194 Int)) Int (ite (= x525 x194) x777 (x826 x194)))
(define-fun x323 ((x194 Int)) Int (ite (= x523 x194) x710 (x909 x194)))
(define-fun x117 ((x194 Int)) Int (ite (= x304 x194) x289 (x323 x194)))
(define-fun x113 ((x194 Int)) Int (ite (= x194 x444) x892 (x117 x194)))
(define-fun x738 ((x194 Int)) Int (ite (= x369 x194) x562 (x113 x194)))
(define-fun x686 ((x194 Int)) Int (ite (= x66 x194) x991 (x738 x194)))
(define-fun x986 ((x194 Int)) Int (ite (= x68 x194) x1039 (x686 x194)))
(define-fun x733 ((x194 Int)) Int (ite x48 (x686 x194) (ite x701 (x738 x194) (ite x835 (x113 x194) (ite x760 (x117 x194) (x986 x194))))))
(define-fun x656 ((x194 Int)) Int (ite (= x194 x269) x837 (x733 x194)))
(define-fun x490 ((x194 Int)) Int (ite (= x194 x411) x317 (x656 x194)))
(define-fun x442 ((x194 Int)) Int (ite (= x514 x194) x404 (x490 x194)))
(define-fun x99 ((x194 Int)) Int (ite (= x194 x979) x554 (x442 x194)))
(define-fun x1034 ((x194 Int)) Int (ite (and (>= x194 x546) (< x194 (+ x546 x554))) (x106 (+ (- x194 x546) x232)) (x99 x194)))
(define-fun x401 ((x194 Int)) Int (ite (= x167 x194) 0 (x1034 x194)))
(define-fun x534 ((x194 Int)) Int (ite x454 (x490 x194) (x401 x194)))
(define-fun x907 ((x194 Int)) Int (ite (= x194 x503) x370 (x534 x194)))
(define-fun x959 ((x194 Int)) Int (ite x643 (x534 x194) (ite x571 (x907 x194) (x534 x194))))
(define-fun x17 ((x194 Int)) Int (ite (= x194 x499) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x959 x194)))
(define-fun x22 ((x194 Int)) Int (ite (and (<= x499 x194) (< x194 (+ 32 x499))) (x131 (+ (- x194 x499) 0)) (x17 x194)))
(define-fun x300 ((x194 Int)) Int (ite (and (<= 196 x194) (< x194 (+ 196 (x1033 (- x346 196))))) (x534 (+ (- x194 196) (x560 (+ x503 196)))) (x432 x194)))
(define-fun x598 ((x194 Int)) Int (ite (= 128 x194) x206 (x697 x194)))
(define-fun x354 ((x194 Int)) Int (ite (and (> (+ x206 160) x194) (>= x194 160)) (x300 (+ 196 (- x194 160))) (x598 x194)))
(define-fun x368 ((x194 Int)) Int (ite (= x422 x194) 0 (x354 x194)))
(define-fun x709 ((x194 Int)) Int (ite (= x625 x194) x398 (x368 x194)))
(define-fun x517 ((x194 Int)) Int (ite (and (<= x1042 x194) (< x194 (+ x1042 x398))) (x300 (+ (- x194 x1042) x248)) (x709 x194)))
(define-fun x10 ((x194 Int)) Int (ite (= x877 x194) 0 (x517 x194)))
(define-fun x257 ((x194 Int)) Int (ite (= x511 x194) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x10 x194)))
(define-fun x423 ((x194 Int)) Int (ite (= x194 x511) x170 (x257 x194)))
(define-fun x60 ((x194 Int)) Int (ite (= x112 x194) x472 (x124 x194)))
(define-fun x757 ((x194 Int)) Int (ite (= x30 x194) x531 (x60 x194)))
(define-fun x389 ((x194 Int)) Int (ite (and (<= x469 x194) (< x194 (+ 0 x469))) (x730 (+ (- x194 x469) 0)) (x423 x194)))
(define-fun x1020 ((x194 Int)) Int (ite x651 (x423 x194) (ite x586 (x389 x194) (x423 x194))))
(define-fun x191 ((x194 Int)) Int (ite x651 (x515 x194) (x730 x194)))
(define-fun x431 ((x194 Int)) Int (ite (= x469 x194) x696 (x1020 x194)))
(define-fun x154 ((x194 Int)) Int (ite (and (<= x626 x194) (< x194 (+ x696 x626))) (x191 (+ 0 (- x194 x626))) (x431 x194)))
(define-fun x927 ((x194 Int)) Int (ite x586 (x277 x194) (x757 x194)))
(define-fun x911 ((x194 Int)) Int (ite (= x194 x30) x311 (x927 x194)))
(define-fun x883 ((x194 Int)) Int (ite (= x112 x194) x762 (x911 x194)))
(define-fun x1031 ((x194 Int)) Int (ite x86 (x124 x194) (ite x651 (x124 x194) (ite x245 (x927 x194) (x883 x194)))))
(define-fun x386 ((x194 Int)) Int (ite x86 (x10 x194) (ite x238 (x1020 x194) (x154 x194))))
(define-fun x672 ((x194 Int)) Int (ite (= x194 x112) x186 (x1031 x194)))
(define-fun x51 ((x194 Int)) Int (ite (= x359 x194) x216 (x672 x194)))
(define-fun x226 ((x194 Int)) Int (ite (= x194 x359) x790 (x51 x194)))
(define-fun x165 ((x194 Int)) Int (ite (= x194 x112) x769 (x226 x194)))
(define-fun x768 ((x194 Int)) Int (ite (= x194 x657) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x386 x194)))
(define-fun x327 ((x194 Int)) Int (ite (= x194 x485) 192 (x768 x194)))
(define-fun x451 ((x194 Int)) Int (ite (= x225 x194) x126 (x327 x194)))
(define-fun x540 ((x194 Int)) Int (ite (= x194 x636) x533 (x451 x194)))
(define-fun x301 ((x194 Int)) Int (ite (= x194 x977) x846 (x540 x194)))
(define-fun x905 ((x194 Int)) Int (ite (= x308 x194) x683 (x301 x194)))
(define-fun x860 ((x194 Int)) Int (ite x737 (x815 x194) (x165 x194)))
(define-fun x555 ((x194 Int)) Int (ite x137 (x860 x194) (ite x110 (x936 x194) (x860 x194))))
(define-fun x458 ((x194 Int)) Int (ite (= x194 x254) x510 (x905 x194)))
(define-fun x146 ((x194 Int)) Int (ite x573 (x905 x194) (ite x811 (x301 x194) (ite x904 (x540 x194) (ite x15 (x451 x194) (x458 x194))))))
(define-fun x35 ((x194 Int)) Int (ite (= x588 x194) 0 (x146 x194)))
(define-fun x447 ((x194 Int)) Int (ite x587 (x146 x194) (x35 x194)))
(define-fun x967 ((x194 Int)) Int (ite (= x329 x194) x602 (x447 x194)))
(define-fun x352 ((x194 Int)) Int (ite (= x65 x194) x976 (x967 x194)))
(define-fun x406 ((x194 Int)) Int (ite (= x194 x882) x765 (x352 x194)))
(define-fun x4 ((x194 Int)) Int (ite (= x194 x972) x227 (x406 x194)))
(define-fun x579 ((x194 Int)) Int (ite (= x194 x997) x187 (x4 x194)))
(define-fun x380 ((x194 Int)) Int (ite (= x568 x194) x299 (x579 x194)))
(define-fun x88 ((x194 Int)) Int (ite x784 (x579 x194) (ite x674 (x4 x194) (ite x78 (x406 x194) (ite x899 (x352 x194) (x380 x194))))))
(define-fun x83 ((x194 Int)) Int (ite (= x194 x723) 0 (x88 x194)))
(define-fun x151 ((x194 Int)) Int (ite x50 (x88 x194) (x83 x194)))
(define-fun x932 ((x194 Int)) Int (ite (= x688 x194) x964 (x151 x194)))
(define-fun x441 ((x194 Int)) Int (ite (= x714 x194) x849 (x932 x194)))
(define-fun x367 ((x194 Int)) Int (ite (= x802 x194) x551 (x441 x194)))
(define-fun x20 ((x194 Int)) Int (ite (= x194 x478) x984 (x367 x194)))
(define-fun x103 ((x194 Int)) Int (ite (and (>= x194 x657) (> (+ 0 x657) x194)) (x321 (+ 0 (- x194 x657))) (x20 x194)))
(define-fun x479 ((x194 Int)) Int (ite x737 (x103 x194) (x20 x194)))
(define-fun x603 ((x194 Int)) Int (ite (= x194 x383) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x479 x194)))
(define-fun x825 ((x194 Int)) Int (ite (= x900 x194) x679 (x603 x194)))
(define-fun x19 ((x194 Int)) Int (ite (= x1037 x194) x870 (x825 x194)))
(define-fun x366 ((x194 Int)) Int (ite (= x194 x322) x253 (x19 x194)))
(define-fun x343 ((x194 Int)) Int (ite (= x79 x194) x629 (x366 x194)))
(define-fun x265 ((x194 Int)) Int (ite x18 (x366 x194) (ite x295 (x19 x194) (ite x582 (x825 x194) (ite x455 (x603 x194) (x343 x194))))))
(define-fun x345 ((x194 Int)) Int (ite (= x194 x792) 0 (x265 x194)))
(define-fun x121 ((x194 Int)) Int (ite x215 (x265 x194) (x345 x194)))
(define-fun x953 ((x194 Int)) Int (ite (= x194 x657) x70 (x121 x194)))
(define-fun x926 ((x194 Int)) Int (ite (= x199 x194) x536 (x953 x194)))
(define-fun x434 ((x194 Int)) Int (ite (= x564 x194) x987 (x926 x194)))
(define-fun x775 ((x194 Int)) Int (ite (= x196 x194) x24 (x434 x194)))
(define-fun x916 ((x194 Int)) Int (ite (= x841 x194) x833 (x775 x194)))
(define-fun x414 ((x194 Int)) Int (ite (= x194 x805) x1010 (x916 x194)))
(define-fun x81 ((x194 Int)) Int (ite (= x194 x661) x179 (x414 x194)))
(define-fun x44 ((x194 Int)) Int (ite x133 (x414 x194) (ite x324 (x916 x194) (ite x452 (x775 x194) (ite x474 (x434 x194) (x81 x194))))))
(define-fun x1036 ((x194 Int)) Int (ite (= x578 x194) 0 (x44 x194)))
(define-fun x177 ((x194 Int)) Int (ite x243 (x44 x194) (x1036 x194)))
(define-fun x158 ((x194 Int)) Int (ite (= x995 x194) x621 (x177 x194)))
(define-fun x937 ((x194 Int)) Int (ite x788 (x22 x194) (x17 x194)))
(define-fun x140 ((x194 Int)) Int (ite (= x55 x194) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x937 x194)))
(define-fun x488 ((x194 Int)) Int (ite (and (<= x55 x194) (> (+ 32 x55) x194)) (x756 (+ (- x194 x55) 0)) (x140 x194)))
(define-fun x313 ((x194 Int)) Int (ite x150 (x488 x194) (x140 x194)))
(define-fun x604 ((x194 Int)) Int (ite (= x194 x116) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x313 x194)))
(define-fun x687 ((x194 Int)) Int (ite (and (> (+ 32 x116) x194) (>= x194 x116)) (x655 (+ (- x194 x116) 0)) (x604 x194)))
(define-fun x1005 ((x194 Int)) Int (ite x84 (x687 x194) (x604 x194)))
(define-fun x702 ((x194 Int)) Int (ite (= x194 x858) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x1005 x194)))
(define-fun x255 ((x194 Int)) Int (ite (and (< x194 (+ 32 x858)) (<= x858 x194)) (x427 (+ (- x194 x858) 0)) (x702 x194)))
(define-fun x968 ((x194 Int)) Int (ite x1007 (x255 x194) (x702 x194)))
(define-fun x141 ((x194 Int)) Int (ite (= x194 x396) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x968 x194)))
(define-fun x471 ((x194 Int)) Int (ite (and (< x194 (+ x396 32)) (>= x194 x396)) (x731 (+ (- x194 x396) 0)) (x141 x194)))
(define-fun x960 ((x194 Int)) Int (ite x341 (x471 x194) (x141 x194)))
(assert (= x438 (and x542 x123)))
(assert (x149 x958))
(assert (x149 x232))
(assert (x149 x626))
(assert (= (and (not x465) x543) x934))
(assert (x149 x814))
(assert (= 0 (x506 (+ (- (+ (- x1028 160) 196) 196) (x560 (+ 196 x503))))))
(assert (= 0 (x506 (+ (- (+ x248 (- 192 x1042)) 196) (x560 (+ 196 x503))))))
(assert (= (=> (and (= (= x974 0) x388) (= x974 (x773 x256)) (= x802 (x560 (+ x714 32))) (= (x560 (+ x688 32)) x714) (= (x560 (+ x802 32)) x478) (= (x560 (+ x329 32)) x688)) (and (=> (and (not x388) (and (or (not x351) (and (and x628 x897 (= x306 (x165 x112)) (= x897 (= (x815 x256) x694)) (< x705 4294967296) (= (x165 x256) x694) (= (<= x306 (x815 x112)) x628)) x351)) (= (< 0 x758) x351))) x726) (=> (and (and (= x7 x563) (= x844 0)) x388) x439))) x832))
(assert (x149 x392))
(assert (x149 x852))
(assert (x149 x652))
(assert (= (and x258 x783) x410))
(assert (= (x506 (+ (x560 (+ x503 196)) (- (+ 196 (- x41 160)) 196))) 0))
(assert (x149 x170))
(assert (x149 x854))
(assert (= (or x643 x571 x1017) x874))
(assert (x72 32))
(assert (x149 x782))
(assert (x149 x299))
(assert (= (and x111 (not x669)) x760))
(assert (x149 x910))
(assert (= (and x342 (not x1025)) x617))
(assert (= x213 (and x801 (not x190))))
(assert (x149 x602))
(assert (= (and x809 (not x761)) x989))
(assert (x149 x862))
(assert (= 0 (x506 x294)))
(assert (x149 x679))
(assert (x149 x482))
(assert (x149 x539))
(assert (x149 x774))
(assert (x149 x721))
(assert (x149 x591))
(assert (x1030 x650))
(assert (= (x697 192) 0))
(assert (= x77 (and (not x747) x420)))
(assert (x149 x467))
(assert (x149 x716))
(assert (= x527 (and x605 x928)))
(assert (x149 x984))
(assert (= (and x381 (not x690)) x290))
(assert (x149 x677))
(assert (= 0 (x515 (- 128 x626))))
(assert (x1030 x188))
(assert (x149 x160))
(assert (= (or x1007 x803) x801))
(assert (x1030 x902))
(assert (x1030 x309))
(assert (= 0 (x506 (+ (- (+ (- x662 160) 196) 196) (x560 (+ x503 196))))))
(assert (x149 x1014))
(assert (x149 x188))
(assert (x149 x949))
(assert (= x315 (=> (= (> x118 0) x530) (and (=> (not x530) x691) (=> (and x530 (= (> x118 0) x465)) (and (=> (and x465 (and (= x898 (x300 x392)) (= (= x1023 x898) x508) (= x1023 (x1001 1461501637330902918203684832716283019655932542975 x898)) (= x355 x392))) (and (=> (and x508 (= x707 (< 0 x544))) (and (=> (and (and (= x1040 x831) (= (x1033 (- x284 31)) x375) (= x639 (x300 x831)) (= (or (and (= (<= x639 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x375 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x375 x639)) (and (> x639 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x375))) x209) (= x284 (x1033 (- x776 x1040)))) x707) (and (=> (and (not x209) (and (= x7 x563) (= x844 0))) x439) (=> (and x209 (and (= x231 (> x1011 18446744073709551615)) (= x1011 (x300 x429)) (= x429 (x560 (+ x1040 x639))))) (and (=> (and (and (= x7 x563) (= 0 x844)) x231) x439) (=> (and (not x231) (and (= (x560 (+ 32 x429)) x1029) (= (or (and (= (<= x827 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1029)) (< x827 x1029)) (and (> x827 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1029 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x944) (= (x1033 (- x776 x1011)) x827))) (and (=> (and x944 (and (= x7 x563) (= 0 x844))) x439) (=> (and (and (or (not x305) (and x305 (and x667 (= x347 (x860 x112)) (= (= x660 (x936 x898)) x667) (= x660 (x860 x898)) (> 4294967296 x836) x203 (= x203 (>= (x936 x112) x347))))) (= (< 0 x868) x305)) (not x944)) x100))))))) (=> (and (and (= x844 0) (= x563 x7)) (not x707)) x439))) (=> (and (not x508) (and (= 0 x844) (= x7 x563))) x439))) (=> (and (not x465) (and (= 0 x844) (= x563 x7))) x439)))))))
(assert (x149 x511))
(assert (= (x697 224) 0))
(assert (x149 x581))
(assert (= (x506 (+ (x560 (+ x503 196)) (- (+ (- x662 x1042) x248) 196))) 0))
(assert (= (and x382 (not x231)) x896))
(assert (= (or x904 x573 x15 x866 x811) x1032))
(assert (x149 x173))
(assert (x149 x429))
(assert (x149 x172))
(assert (= x33 (and x896 x944)))
(assert (x149 x635))
(assert (x149 x902))
(assert (x149 x606))
(assert (= x839 (=> (and (= (x703 x1006) x435) (= (x560 (+ x930 31)) x698) (= x611 (x1033 (- x412 x437))) (= (x560 (+ x412 32)) x417) (= x371 (x560 (+ x437 32))) (= x143 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x698)) (= x412 (x560 (+ x143 x591))) (= (> x435 0) x42)) (and (=> (and (not x42) (= 0 x652)) x492) (=> (and x42 (and (= (x978 x716) x476) (= x207 x716) (= x222 x417) (= (> x435 32) x1025))) (and (=> (and (not x1025) (= x652 32)) x492) (=> (and x1025 (and (= (x560 (+ 32 x417)) x424) (= x139 (x560 (+ 32 x207))) (= (x358 x139) x584) (= (> x435 64) x105))) (and (=> (and x105 (and (= x871 (> x435 96)) (= x744 (x699 x418)) (= x1009 (x560 (+ x417 64))) (= x418 (x560 (+ x207 64))))) (and (=> x871 x715) (=> (and (= 96 x652) (not x871)) x492))) (=> (and (not x105) (= x652 64)) x492)))))))))
(assert (x149 x891))
(assert (= (x697 x580) 0))
(assert (x149 x499))
(assert (x149 x622))
(assert (and (x590 x550 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x550 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x550 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x550 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x550 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x550 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x1026))
(assert (= (=> (and (= (= x283 0) x16) (or (and x16 (and (= x696 x433) (= x762 x631) (= x311 x781) (= (x927 x30) x781) (= (x911 x112) x631) (= 0 x337) (= x283 x3) (< (+ x337 x631) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (and (= x283 x3) (= x696 x433)) (not x16)))) x507) x185))
(assert (x364 x481))
(assert (= x129 (and x946 x298)))
(assert (= (or x459 (and x616 (not x426))) x821))
(assert (x149 x563))
(assert (= (and x720 x314) x620))
(assert (= (x506 (+ (x560 (+ x503 196)) 32)) 0))
(assert (= (=> (and (= (x560 (+ x199 96)) x564) (= 96 x536) (= (x1033 (- x199 x657)) x808) (= x148 (x560 (+ 32 x564))) (= (x560 (+ x880 x14)) x199) (= x987 (x926 128)) (= (x1033 (- x808 32)) x70) (= x519 (> x987 0))) (and (=> (and (and (= (> x987 32) x920) (= x196 x148) (= x24 (x434 160))) x519) (and (=> (and (and (= (< 64 x987) x596) (= (x560 (+ 32 x148)) x841) (= x833 (x775 192))) x920) (and (=> (and (= 64 x1021) (not x596)) x521) (=> (and x596 (and (= x314 (> x987 96)) (= x805 (x560 (+ 64 x148))) (= (x916 224) x1010))) (and (=> (and (= 96 x1021) (not x314)) x521) (=> x314 x115))))) (=> (and (= 32 x1021) (not x920)) x521))) (=> (and (not x519) (= x1021 0)) x521))) x457))
(assert (x142 x700))
(assert (= x384 (and x32 x168)))
(assert (and (x590 x700 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x700 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x700 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x700 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x700 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x700 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x408))
(assert (= (and (not x297) x848) x917))
(assert (= (and x278 x305) x110))
(assert (x149 x398))
(assert (x149 x450))
(assert (x149 x493))
(assert (= (=> (and (= (x1033 (- x325 x554)) x622) (= x814 (x1033 (- x325 x92))) (= x546 (x560 (+ 32 x979))) (= (x560 (+ x539 x546)) x34) (or (and (= (<= x958 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x935 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x935 x958)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x958) (> x935 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (< 18446744073709551615 x554)) (not (or (and (> x232 x622) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x622) (<= x232 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x622 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x232 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x404 x75) (= (x560 (+ x92 x935)) x794) (= (x560 (+ x546 x554)) x167) (= (x106 x794) x554) (= (x560 (+ x794 32)) x232) (= x958 (x1033 (- x814 31))) (= x361 (x560 (+ x554 31))) (= x539 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x361)) (= x1024 (not (> x317 1))) (= x935 (x106 x92))) (and (=> (= x34 x713) x491) x1024)) x218))
(assert (x142 x62))
(assert (x149 x405))
(assert (x149 x698))
(assert (x149 x827))
(assert (x149 x1009))
(assert (= (or x240 x587) x286))
(assert (= x520 (and (not x209) x793)))
(assert (x144 x310))
(assert (x149 x522))
(assert (= (and x382 x231) x171))
(assert (x149 x337))
(assert (= (=> (= x783 (> x868 0)) (and (=> x783 x224) (=> (and (and (= 0 x844) (= x7 x563)) (not x783)) x439))) x128))
(assert (x149 x125))
(assert (x149 x485))
(assert (x149 x900))
(assert (= x394 (=> (and (= x669 (< 0 x289)) (= (x560 (+ 32 x525)) x523) (= (x1033 (- x304 x437)) x710) (= x304 (x560 (+ x417 x125))) (= (x560 (+ x304 32)) x444) (= x525 (x560 (+ 32 x371))) (= x309 (x560 (+ 31 x435))) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x309) x125)) (and (=> (and x669 (and (<= x892 1461501637330902918203684832716283019655932542975) (= x349 (x560 (+ 32 x635))) (= (< 1 x289) x988) (= (x106 x635) x892) (= x369 (x560 (+ 32 x444))))) (and (=> (and (= x411 x369) (not x988)) x29) (=> (and x988 (and (= (> x289 2) x27) (= x562 (x106 x349)) (= (x560 (+ x349 32)) x670) (= (x560 (+ 32 x369)) x66) (<= x562 1461501637330902918203684832716283019655932542975))) (and (=> (and (not x27) (= x66 x411)) x29) (=> (and (and (<= x991 1461501637330902918203684832716283019655932542975) (= (< 3 x289) x270) (= x861 (x560 (+ 32 x670))) (= (x106 x670) x991) (= x68 (x560 (+ 32 x66)))) x27) (and (=> (and (not x270) (= x411 x68)) x29) (=> x270 x992))))))) (=> (and (= x411 x444) (not x669)) x29)))))
(assert (x149 x119))
(assert (x1030 x62))
(assert (x149 x943))
(assert (x149 x112))
(assert (= x491 (=> (and x495 (not (= 1845979623 x677)) (= x379 x611) (= x837 x40) (= (x1033 (- x776 4)) x173) (= (x773 x112) x279) (= 2005408114 x677) (not (= x677 1245659826)) (= x346 (x1033 (- x713 x503))) (= x710 x614) (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x440) (<= 292 x776) (> 2220280665 x677) (not (> 4 x776)) (= x776 x346) (> x279 0) (= x495 (= (x432 164) x930)) (not (= 1901074598 x677)) (not (= 1262878978 x677)) (= x1008 x340) (not (< x677 1245659826)) (not (= 1553423035 x677)) (= x754 (or (and (= (<= x173 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x173 160)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x173)))) (and (=> (and (= x921 (and (< 195 x776) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x776) true))) (not x754)) (and (=> (and (and (= x338 (< 18446744073709551615 x206)) (= x206 (x300 164))) x921) (and (=> (and x338 (and (= x563 x7) (= 0 x844))) x439) (=> (and (not x338) (and (= x625 (x560 (+ x680 128))) (= (= (ite x318 1 0) 0) x553) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x464) x680) (= (< x625 128) x881) (= x318 (or x879 x881)) (= x879 (< 18446744073709551615 x625)) (= x428 (x560 (+ x91 32))) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x550) x91) (= (x560 (+ 31 x206)) x550) (= (x560 (+ x428 31)) x464))) (and (=> (and x553 (and (= x344 (x560 (+ 196 x206))) (= (< x776 x344) x252))) (and (=> (and (and (= x563 x7) (= 0 x844)) x252) x439) (=> (and (not x252) (and (= (> x611 18446744073709551615) x12) (= (x560 (+ x206 160)) x422))) (and (=> (and (and (= (x560 (+ 31 x357)) x647) (= x357 (x560 (+ x379 4))) (= x161 (or (and (= (<= x776 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x647)) (< x647 x776)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x776) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x647))))) (not x12)) (and (=> (and x161 (and (= x297 (< 18446744073709551615 x398)) (= x248 (x560 (+ 32 x357))) (= (x300 x357) x398))) (and (=> (and (not x297) (and (= (x560 (+ x625 x919)) x511) (= x800 (or x302 x970)) (= x228 (x560 (+ x398 31))) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x119) x919) (= x824 (x560 (+ x724 32))) (= (< 18446744073709551615 x511) x302) (= (= 0 (ite x800 1 0)) x996) (= x724 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x228)) (= (x560 (+ x824 31)) x119) (= x970 (< x511 x625)))) (and (=> (and (not x996) (and (= x563 x7) (= 0 x844))) x439) (=> (and x996 (and (= (x560 (+ x625 32)) x1042) (= (> x949 x776) x940) (= (x560 (+ x398 x248)) x949))) (and (=> (and (and (= x877 (x560 (+ x1042 x398))) (= x480 (> x710 18446744073709551615))) (not x940)) (and (=> (and (and (= x7 x563) (= x844 0)) x480) x439) (=> (and (not x480) (and (= x58 (x560 (+ 31 x1014))) (= (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x58) (<= x776 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x776 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x58)) (> x776 x58))) x89) (= (x560 (+ x614 4)) x1014))) (and (=> (and x89 (and (= (< 18446744073709551615 x118) x32) (= x118 (x300 x1014)))) (and (=> (and (and (= x355 (x560 (+ x1014 32))) (= x542 (< x776 x829)) (= (x23 (* x118 32)) x287) (= (x560 (+ x355 x287)) x829)) (not x32)) (and (=> (and x542 (and (= x7 x563) (= x844 0))) x439) (=> (and (= x816 (< 18446744073709551615 x837)) (not x542)) (and (=> (and (and (= x563 x7) (= x844 0)) x816) x439) (=> (and (and (= (or (and (<= x776 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x102 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x776) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x102)) (< x102 x776))) x795) (= x192 (x560 (+ x40 4))) (= x102 (x560 (+ x192 31)))) (not x816)) (and (=> (and (and (= x544 (x300 x192)) (= (< 18446744073709551615 x544) x547)) x795) (and (=> (and x547 (and (= x844 0) (= x7 x563))) x439) (=> (and (not x547) (and (= (x560 (+ x954 x1040)) x273) (= (x560 (+ x192 32)) x1040) (= x951 (> x273 x776)) (= (x23 (* x544 32)) x954))) (and (=> (and (not x951) (and (>= 255 x569) (< x569 256) (<= 0 x569) (= x303 (= 0 x569)))) (and (=> (and (and (= 0 x844) (= x7 x563)) (not x303)) x439) (=> (and (and (>= x563 0) (= (< 0 x563) x645) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x563)) x303) (and (=> (and (not x645) (= x511 x657)) x613) (=> (and (and (= x260 (= x563 0)) (<= x563 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x563 0)) x645) (and (=> (and (and (= x7 x563) (= x844 0)) (not x260)) x439) (=> (and x260 (and (= x862 x193) (< 0 x695) (= 2376452955 x692) (= x449 (x1001 1461501637330902918203684832716283019655932542975 x854)) (<= x170 1461501637330902918203684832716283019655932542975) (= x193 4) (not (= x692 2329570063)) (= x695 (x773 x112)) (not (> 4 x862)) (= (x560 (+ x511 32)) x469) (= (x423 x511) x854) (= x470 64069044923792539370177021244577383457373632460708312080110356237917649633280) (< x692 3084411429) (not (= 2249206060 x692)) (= x946 (= x449 x854)) (>= x170 0) (not (= 2220280665 x692)) (= x862 4) (not (< x692 2220280665)) (< x170 1461501637330902918203684832716283019655932542976))) (and (=> (and x946 (and (= x572 (x124 x112)) (= x658 0) (= x1019 (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x658 x903)) (<= 0 x572))) (= (x124 x30) x903) (= (x1001 1461501637330902918203684832716283019655932542975 x854) x30))) (and (=> (and (and (= 0 x696) (= x3 0)) (not x1019)) x507) (=> (and (and (and (= x945 (< 0 x283)) (= x820 x472) (= x405 (x60 x30)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x658 x405)) (= x531 x405) (= x820 (x124 x112))) (or (and (and (= (<= x975 (x277 x112)) x285) (> 4294967296 x433) x950 (= x1004 (x757 x30)) x285 (= x950 (= (x277 x30) x1004)) (= (x757 x112) x975)) x945) (not x945))) x1019) x185))) (=> (and (and (= x7 x563) (= x844 0)) (not x946)) x439))))))))) (=> (and (and (= x7 x563) (= x844 0)) x951) x439))))) (=> (and (not x795) (and (= x7 x563) (= x844 0))) x439))))))) (=> (and x32 (and (= x563 x7) (= x844 0))) x439))) (=> (and (and (= x7 x563) (= 0 x844)) (not x89)) x439))))) (=> (and (and (= 0 x844) (= x563 x7)) x940) x439))))) (=> (and x297 (and (= x563 x7) (= x844 0))) x439))) (=> (and (not x161) (and (= 0 x844) (= x563 x7))) x439))) (=> (and x12 (and (= x7 x563) (= x844 0))) x439))))) (=> (and (not x553) (and (= x563 x7) (= 0 x844))) x439))))) (=> (and (not x921) (and (= x563 x7) (= x844 0))) x439))) (=> (and (and (= x893 x563) (= x852 0) (= x73 x552)) x754) x413)))))
(assert (x149 x428))
(assert (= (and x549 x942) x770))
(assert (= x153 (and (not x211) x461)))
(assert (x149 x71))
(assert (x149 x541))
(assert (= x381 (or (and (not x985) x965) x727)))
(assert (= x111 (or x929 x1000)))
(assert (x149 x1011))
(assert (= (and (not x944) x896) x278))
(assert (= (x515 (- x789 x626)) 0))
(assert (x149 x370))
(assert (x149 x1039))
(assert (x149 x469))
(assert (= x664 (and (not x993) x771)))
(assert (x149 x705))
(assert (x149 x842))
(assert (x149 x922))
(assert (x468 x359))
(assert (x149 x796))
(assert (= (and x163 x874) x365))
(assert (x149 x383))
(assert (x149 x325))
(assert (= x743 (and x271 x16)))
(assert (= x745 (and x123 (not x542))))
(assert (x149 x636))
(assert (= x251 (=> (= x509 (= 0 x758)) (and (=> (and (and (= 0 x844) (= x563 x7)) x509) x439) (=> (and (and (= (x560 (+ 3 x740)) x880) (= x383 (x560 (+ x657 32))) (= (> x14 0) x513) (= x740 (x560 (+ 32 x657))) (= x14 (x603 x625))) (not x509)) (and (=> (and (= 0 x212) (not x513)) x990) (=> (and x513 (and (= (x603 x973) x679) (= x880 x900) (= x25 (< 32 x14)) (= x1042 x973))) (and (=> (and (not x25) (= 32 x212)) x990) (=> (and (and (= (x560 (+ 32 x1042)) x580) (= x402 (< 64 x14)) (= (x825 x580) x870) (= (x560 (+ 32 x880)) x1037)) x25) (and (=> (and x402 (and (= x253 (x19 x41)) (= x322 (x560 (+ 64 x880))) (= (> x14 96) x328) (= x41 (x560 (+ 64 x1042))))) (and (=> x328 x806) (=> (and (not x328) (= x212 96)) x990))) (=> (and (not x402) (= x212 64)) x990)))))))))))
(assert (= (x515 (- 256 x626)) 0))
(assert (and (x590 x309 32) (=> (> 32 0) (= x309 (+ (* 32 (x360 x309 32)) (x512 x309 32)))) (x595 x309 32) (x980 x309 32)))
(assert (x149 x845))
(assert (x142 x698))
(assert (x144 x112))
(assert (x149 x269))
(assert (= x691 (=> (and (= (x773 x782) x576) (= x782 (x1001 1461501637330902918203684832716283019655932542975 x359)) (= x330 (= x576 0))) (and (=> (and (and (= x844 0) (= x563 x7)) x330) x439) (=> (and (not x330) (and (= (> x76 0) x605) (or (not x605) (and x605 (and (= (x555 x112) x316) (> 4294967296 x983) x56 x101 (= (= x734 (x634 x782)) x56) (= (>= (x634 x112) x316) x101) (= x734 (x555 x782))))))) x182)))))
(assert (= x18 (and (not x328) x237)))
(assert (x149 x846))
(assert (and (x69 32 x317) (x130 32 x317) (x377 32 x317) (and (= (* (- x317 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x94 32 (- x317 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x317 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x317 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x317 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x317) (* x317 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x317))) (x80 32 x317) (= (x94 32 x317) (* 32 x317)) (x994 32 x317)))
(assert (= (and x570 x489) x778))
(assert (x364 x62))
(assert (x149 x135))
(assert (= x500 (and x480 x675)))
(assert (x149 x913))
(assert (= x137 (and (not x530) x873)))
(assert (= x486 (=> (and (and (not (or (> x241 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x241)) (> 32 x241)))) (= x244 (x313 x55)) (<= x244 1461501637330902918203684832716283019655932542975) (= (< 0 x482) x233) (= x234 (x560 (+ x241 31))) (not (= 0 x61)) (= x116 (x560 (+ x391 x55))) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x234) x391)) (or (and (and (= 1 x933) (> 4294967296 x736)) x233) (and (not x233) (= x482 x933)))) x875)))
(assert (= (or x150 x981) x54))
(assert (= (=> (and (and (= x876 false) (= x280 x893) (= x867 false)) (and (not (= x21 0)) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x717)) (> 32 x717)) (> x717 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x653 x443) (= (x960 x396) x266) (>= 1461501637330902918203684832716283019655932542975 x266))) x425) x969))
(assert (x149 x1023))
(assert (= x674 (and x52 (not x336))))
(assert (and (x590 x842 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x842 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x842 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x842 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x842 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x842 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x506 192) 0))
(assert (= (x697 x1028) 0))
(assert (= (x697 x236) 0))
(assert (and (x590 x494 32) (=> (> 32 0) (= x494 (+ (* 32 (x360 x494 32)) (x512 x494 32)))) (x595 x494 32) (x980 x494 32)))
(assert (and (x590 x898 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x898 (+ (* 1461501637330902918203684832716283019655932542976 (x360 x898 1461501637330902918203684832716283019655932542976)) (x512 x898 1461501637330902918203684832716283019655932542976)))) (x595 x898 1461501637330902918203684832716283019655932542976) (x980 x898 1461501637330902918203684832716283019655932542976)))
(assert (x149 x222))
(assert (= x793 (and x594 x707)))
(assert (x149 x523))
(assert (= (x506 (+ (- (+ 196 (- x580 160)) 196) (x560 (+ x503 196)))) 0))
(assert (= x771 (and x684 x853)))
(assert (= (or x455 x295 x18 x582 x497) x942))
(assert (= x642 (and (not x830) x198)))
(assert (= 0 (x697 x662)))
(assert (= x274 (or x674 x784 x319 x899 x78)))
(assert (= (and (not x865) x175) x78))
(assert (x149 x92))
(assert (= x599 (=> (and (and (> 1461501637330902918203684832716283019655932542976 x205) (= x577 x812) (= (x961 x205) x925) (= x912 (> x998 x925)) (= x11 (= x205 0)) (or x201 x11) (= (< 0 x205) x201)) (and (<= x28 255) (= (> (x773 x310) 0) x249) (>= 1461501637330902918203684832716283019655932542975 x200) (= x561 (x773 x112)) (= (x961 x112) x558) (>= x104 0) (>= x498 0) (<= 0 x467) (>= 1461501637330902918203684832716283019655932542975 x310) (>= 255 x569) (= x400 3705713892) (= (< 0 (x773 x112)) x759) (<= x612 79228162514264337593543950335) (>= x610 0) (<= 0 x28) (<= x532 1461501637330902918203684832716283019655932542975) (= false x483) (<= 0 x615) (= x838 1262878978) (>= 1461501637330902918203684832716283019655932542975 x948) (<= 0 x748) x249 (<= x964 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x170) (<= x610 1461501637330902918203684832716283019655932542975) (not (> 3084411429 x400)) (<= x184 1461501637330902918203684832716283019655932542975) (<= 0 x172) (<= x104 1461501637330902918203684832716283019655932542975) (<= x293 1461501637330902918203684832716283019655932542975) (>= x558 0) (>= 1461501637330902918203684832716283019655932542975 x242) (<= 0 x532) (>= x623 0) (<= 0 x200) (>= x612 0) (>= x97 0) (>= x267 0) (>= 255 x467) (>= x293 0) (<= x984 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x551) (>= 255 x156) (<= x623 255) (<= 0 x262) (<= 0 x292) (= x1041 false) (<= 0 x563) (<= x748 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x262) (<= 0 x184) (>= x242 0) (= false x38) (= x518 true) (>= x849 0) (not (= x400 3572374928)) (not (< x400 2220280665)) (>= x984 0) (<= x292 255) (>= x939 0) (>= x964 0) (= x948 x205) x759 (= (x961 x310) x275) (> x310 0) (>= 1461501637330902918203684832716283019655932542975 x112) (= 5 x291) (>= 1461501637330902918203684832716283019655932542975 x671) (< 0 x561) (>= 1461501637330902918203684832716283019655932542975 x939) (<= 0 x948) (<= x615 1461501637330902918203684832716283019655932542975) (<= x97 255) (<= x267 255) (= x563 x812) (>= x569 0) (<= x849 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x498) (>= x170 0) (>= x551 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x563) (<= 0 x156) (< 0 x112) (<= 0 x671) (>= 1461501637330902918203684832716283019655932542975 x172) (= x242 x181) (not (= x112 x310)) (not (= x400 3084411429)) (>= x275 0))) (and (=> (and (and (= x876 false) (= x563 x280) (= true x867)) x912) x425) (=> (and (and (= x998 x886) (= x535 x777) (not (< 18446744073709551615 x693)) (= x408 x818) (= (x23 (* x289 32)) x957) (= x71 (x560 (+ x957 x635))) (= (x560 (+ 4 x913)) x548) (> 2220280665 x108) (= (x560 (+ x372 4)) x606) (= (x560 (+ 32 x45)) x635) (= x791 (x560 (+ 160 x437))) (= x822 (x560 (+ x559 32))) (not (< x325 x208)) (= x963 (x106 x606)) (= x164 (ite x162 1 0)) (= x437 (x560 (+ x503 4))) (= x581 x502) (= (x106 x901) x851) (= x239 x913) (or (and (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x966)) (and (> x325 x966) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x966) (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x560 (+ x851 x207)) x5) (not (> x746 18446744073709551615)) (= x1006 (x560 (+ 128 x214))) (= x272 (> x1006 x503)) (= x966 (x560 (+ x548 31))) (= (< x1006 128) x823) (= x95 (x560 (+ 31 x822))) (= x281 (- x663 x998)) (= x475 0) (>= x732 0) (= x799 (x560 (+ x963 x501))) (not (< 18446744073709551615 x963)) (or (and (= (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x834 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x325 x834)) (and (> x834 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325))) (<= 0 x721) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x650) x559) (= x894 (x560 (+ x607 32))) (= x943 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x481)) (= x807 (< 0 x930)) (= (x560 (+ x45 31)) x496) (= x45 (x560 (+ x147 4))) (= (x560 (+ x894 31)) x481) (> x261 0) (= x46 (x560 (+ 31 x606))) (= x504 (or x823 x597)) (= x122 (x1033 (- x325 4))) (= x746 x372) (= (x560 (+ x943 x1006)) x503) (not (> x317 18446744073709551615)) (not (< 18446744073709551615 x239)) (= (x560 (+ x1006 32)) x207) (not (= x108 1245659826)) (= x834 (x560 (+ 31 x901))) (= x607 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x902)) (not (> x864 x325)) (= (x23 (* 32 x317)) x82) (= x162 (or x640 x272)) (>= 1461501637330902918203684832716283019655932542975 x732) (= x777 x340) (= x930 (x766 128)) (= x475 (ite x504 1 0)) (= x289 (x106 x45)) (= x752 (x560 (+ x963 160))) (= (> x503 18446744073709551615) x640) (or (and (= (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496)) (< x496 x325)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496) (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (> x1006 18446744073709551615) x597) (>= 1461501637330902918203684832716283019655932542975 x708) (= (x560 (+ 31 x851)) x902) (= (x560 (+ 31 x963)) x650) (not (> x851 18446744073709551615)) (= (x773 x112) x261) (= (x560 (+ 32 x606)) x501) (= x208 (x560 (+ x851 x1026))) (= x591 (x560 (+ 32 x791))) (not (> x799 x325)) (= x663 (x961 x205)) (= x214 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x95)) (and (< 163 x325) (= true (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x560 (+ 32 x548)) x92) (<= 0 x708) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x122) (and (= true (<= x122 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x122 160)))) (= x205 x845) (= x693 x147) (= (x668 x112) x1018) (not (< x108 1245659826)) (= (x560 (+ x92 x82)) x864) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x46) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325)) (and (< x46 x325) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x46)))) (= x164 0) (= x732 x818) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1018 x886)) (= (x560 (+ x1018 x998)) x36) (>= 1461501637330902918203684832716283019655932542975 x721) (= x317 (x106 x548)) (= x1026 (x560 (+ 32 x901))) (not (< 18446744073709551615 x502)) (= x901 (x560 (+ 4 x581))) (= 1262878978 x108) (not (< 18446744073709551615 x289)) (not (< x325 4)) (not (< x325 x71)) (= x708 x205)) (not x912)) (and (=> (and (not x807) (= 0 x160)) x85) (=> (and (and (= (x307 160) x918) (= (> x930 32) x747) (= x888 x591)) x807) (and (=> (and x747 (and (= (x235 192) x466) (= x211 (> x930 64)) (= (x560 (+ x591 32)) x8))) (and (=> (and (not x211) (= 64 x160)) x85) (=> (and (and (= (x390 224) x638) (= (< 96 x930) x830) (= (x560 (+ 64 x591)) x522)) x211) (and (=> x830 x353) (=> (and (not x830) (= 96 x160)) x85))))) (=> (and (not x747) (= x160 32)) x85)))))))))
(assert (x149 x552))
(assert (and (x590 x493 32) (=> (> 32 0) (= x493 (+ (* 32 (x360 x493 32)) (x512 x493 32)))) (x595 x493 32) (x980 x493 32)))
(assert (= (x506 (+ 64 (x560 (+ 196 x503)))) 0))
(assert (and (x590 x854 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x854 (+ (* 1461501637330902918203684832716283019655932542976 (x360 x854 1461501637330902918203684832716283019655932542976)) (x512 x854 1461501637330902918203684832716283019655932542976)))) (x595 x854 1461501637330902918203684832716283019655932542976) (x980 x854 1461501637330902918203684832716283019655932542976)))
(assert (x1030 1461501637330902918203684832716283019655932542975))
(assert (x142 x493))
(assert (x149 x361))
(assert (x149 x412))
(assert (x149 x864))
(assert (x149 x244))
(assert (= x718 (and (not x509) x821)))
(assert (= (and (not x27) x339) x701))
(assert (x149 x411))
(assert (x149 x24))
(assert (= x52 (and x865 x175)))
(assert (x149 x207))
(assert (x149 x399))
(assert (x149 x954))
(assert (x468 x898))
(assert (x149 x939))
(assert (and (x590 x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x119 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x119 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x119 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x119 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x692))
(assert (x364 x698))
(assert (x149 x444))
(assert (x364 x228))
(assert (x149 x849))
(assert (x149 x533))
(assert (x149 x894))
(assert (x149 x975))
(assert (= x247 (and (not x26) x872)))
(assert (x149 x1010))
(assert (= x86 (and (not x645) x742)))
(assert (= (and (not x42) x750) x159))
(assert (x149 x70))
(assert (= (=> (and (or (not x797) (and x797 (= x723 (x560 (+ x976 x891))))) (= x797 (< x976 x941))) x832) x725))
(assert (= (and (not x330) x915) x928))
(assert (= x243 (and x828 (not x178))))
(assert (= (and x914 (not x547)) x608))
(assert (x149 x266))
(assert (x364 x902))
(assert (= x114 (or x365 (and (not x163) x874))))
(assert (= x924 (and x114 (not x356))))
(assert (x149 x777))
(assert (= (and x54 (not x233)) x1016))
(assert (x149 x893))
(assert (x149 x90))
(assert (x149 x568))
(assert (= x990 (=> (and (or (and x549 (= (x560 (+ x880 x14)) x792)) (not x549)) (= (< x14 x212) x549)) x457)))
(assert (x149 x108))
(assert (= x487 (and x9 x67)))
(assert (= 0 (x506 (+ (x560 (+ 196 x503)) (- (+ (- x236 x1042) x248) 196)))))
(assert (= (and x884 x920) x952))
(assert (and (x590 x493 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x493 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x493 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x493 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x493 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x493 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x93 x589) x134))
(assert (= 0 (x506 (+ (x560 (+ x503 196)) (- x831 196)))))
(assert (= (x506 (+ (- (+ x248 (- x774 x1042)) 196) (x560 (+ x503 196)))) 0))
(assert (x149 x744))
(assert (= x627 (and x436 x338)))
(assert (x149 x456))
(assert (x149 x196))
(assert (x149 x433))
(assert (= (x515 (- x1028 x626)) 0))
(assert (= x150 (and x484 x556)))
(assert (and (x69 32 x289) (x130 32 x289) (x377 32 x289) (and (= (* (- x289 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x94 32 (- x289 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x289 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x289 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x289 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x289) (* x289 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x289))) (x80 32 x289) (= (x94 32 x289) (* 32 x289)) (x994 32 x289)))
(assert (and (x590 x842 32) (=> (> 32 0) (= x842 (+ (* 32 (x360 x842 32)) (x512 x842 32)))) (x595 x842 32) (x980 x842 32)))
(assert (= x545 (and (not x430) x1003)))
(assert (= (x515 (- x236 x626)) 0))
(assert (x149 x802))
(assert (= x238 (and x26 x872)))
(assert (= (and x37 x508) x594))
(assert (= x461 (and x420 x747)))
(assert (x149 x567))
(assert (x149 x138))
(assert (= (x506 (+ (x560 (+ 196 x503)) (- (+ x248 (- x625 x1042)) 196))) 0))
(assert (x149 x147))
(assert (= (and x951 x608) x666))
(assert (x149 x316))
(assert (x149 x857))
(assert (x1030 x698))
(assert (= (and x538 x134) x866))
(assert (x149 x629))
(assert (x149 x256))
(assert (= x421 (and x871 x326)))
(assert (x149 x710))
(assert (= x460 (and x594 (not x707))))
(assert (= (and x952 (not x596)) x324))
(assert (x149 x779))
(assert (and (<= 10000 (x74 x112 x971)) (>= 340282366920938463463374607431768211455 (x74 x112 x971))))
(assert (= x342 (and x42 x750)))
(assert (x149 x293))
(assert (x149 x284))
(assert (x149 x379))
(assert (x149 x143))
(assert (x149 x700))
(assert (= x573 (and (not x538) x134)))
(assert (and (x590 x95 32) (=> (> 32 0) (= x95 (+ (* 32 (x360 x95 32)) (x512 x95 32)))) (x595 x95 32) (x980 x95 32)))
(assert (x149 x764))
(assert (= (and x221 x921) x436))
(assert (= x772 (and x853 (not x684))))
(assert (= 0 (x697 x973)))
(assert (x364 x464))
(assert (x149 x693))
(assert (= (and (not x1012) x286) x899))
(assert (= (x515 (- x973 x626)) 0))
(assert (= x350 (and x689 x446)))
(assert (x149 x649))
(assert (= (and (not x689) x446) x15))
(assert (= (x506 (+ (x560 (+ 196 x503)) (- (+ x248 (- x973 x1042)) 196))) 0))
(assert (x149 x476))
(assert (x149 x569))
(assert (x149 x55))
(assert (and (x590 x361 32) (=> (> 32 0) (= x361 (+ (* 32 (x360 x361 32)) (x512 x361 32)))) (x595 x361 32) (x980 x361 32)))
(assert (= (x506 (+ (- (+ (- x580 x1042) x248) 196) (x560 (+ 196 x503)))) 0))
(assert (x149 x462))
(assert (x149 x714))
(assert (x149 x663))
(assert (= (and x271 (not x16)) x245))
(assert (x149 x212))
(assert (x149 x1004))
(assert (= (and x326 (not x871)) x120))
(assert (x149 x234))
(assert (x149 x199))
(assert (= x169 (=> (and (and (= x779 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x188)) (= (x560 (+ x73 31)) x188) (= x356 (> x764 0)) (not (= 0 x852)) (not (or (and (= true (<= x73 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x73 32)) (> x73 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x499 (x560 (+ x503 x779))) (<= x443 1461501637330902918203684832716283019655932542975) (= x443 (x959 x503))) (or (and (not x356) (= x764 x229)) (and (and (> 4294967296 x90) (= x229 1)) x356))) x445)))
(assert (x149 x670))
(assert (x149 x344))
(assert (= x678 (and x388 x641)))
(assert (x149 x223))
(assert (x149 x227))
(assert (x149 x347))
(assert (x149 x696))
(assert (x364 x550))
(assert (x149 x375))
(assert (x149 x717))
(assert (x149 x574))
(assert (= (and x356 x114) x788))
(assert (x149 x200))
(assert (x149 x261))
(assert (= 0 (x515 (- x662 x626))))
(assert (= 0 (x506 (+ (- (+ (- 256 x1042) x248) 196) (x560 (+ x503 196))))))
(assert (x149 x437))
(assert (= x37 (and x465 x543)))
(assert (x149 x82))
(assert (x149 x139))
(assert (x149 x630))
(assert (and (x590 x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x62 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x62 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x62 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x62 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x418))
(assert (x149 x424))
(assert (= (=> (and (= (< x987 x1021) x178) (or (not x178) (and (= x578 (x560 (+ x148 x987))) x178))) x906) x521))
(assert (x149 x593))
(assert (x149 x822))
(assert (x149 x1018))
(assert (x149 x76))
(assert (x149 x189))
(assert (and (x590 x234 32) (=> (> 32 0) (= x234 (+ (* 32 (x360 x234 32)) (x512 x234 32)))) (x595 x234 32) (x980 x234 32)))
(assert (x149 x501))
(assert (x149 x829))
(assert (x149 x983))
(assert (x149 x880))
(assert (x149 x241))
(assert (= x448 (and x339 x27)))
(assert (x149 x531))
(assert (x149 x695))
(assert (= x197 (and x895 x1002)))
(assert (= (or x410 x137) x915))
(assert (and (x590 x361 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x361 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x361 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x361 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x361 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x361 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x1006))
(assert (= (and (not x754) x331) x221))
(assert (x149 x275))
(assert (x149 x104))
(assert (= x353 (=> (and (= (not (> x930 128)) x665) (= (x632 256) x857) (= x804 (x560 (+ x591 96)))) (and x665 (=> (= x160 128) x85)))))
(assert (= x333 (and x1038 (not x161))))
(assert (x149 x612))
(assert (and (x590 x650 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x650 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x650 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x650 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x650 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x650 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x506 (+ (x560 (+ 196 x503)) (- x192 196))) 0))
(assert (and (x590 x309 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x309 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x309 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x1030 x228))
(assert (= x755 (=> (and (= x299 (x579 x1028)) (= (x560 (+ 96 x891)) x568) (= x1028 (x560 (+ 96 x1042))) (= (not (> x976 128)) x393)) (and x393 (=> (= 128 x941) x725)))))
(assert (= x180 (and (not x351) x107)))
(assert (= x587 (and x1032 (not x288))))
(assert (x149 x559))
(assert (x149 x647))
(assert (x149 x167))
(assert (x149 x748))
(assert (= 0 (x506 (+ (- (+ (- 160 x1042) x248) 196) (x560 (+ 196 x503))))))
(assert (x149 x41))
(assert (x149 x102))
(assert (and (x590 x464 32) (=> (> 32 0) (= x464 (+ (* 32 (x360 x464 32)) (x512 x464 32)))) (x595 x464 32) (x980 x464 32)))
(assert (not x599))
(assert (x149 x396))
(assert (= (or x637 x263) x873))
(assert (x149 x372))
(assert (x149 x657))
(assert (= (=> (and (= (< x930 x160) x430) (or (and x430 (= x450 (x560 (+ x930 x591)))) (not x430))) x839) x85))
(assert (x149 x95))
(assert (x149 x202))
(assert (= (and x303 x363) x742))
(assert (= x268 (and x363 (not x303))))
(assert (x149 x376))
(assert (= (and x993 x771) x1002))
(assert (x142 x842))
(assert (x364 x700))
(assert (x149 x292))
(assert (x149 x925))
(assert (x149 x723))
(assert (= 0 (x506 (+ (- x357 196) (x560 (+ 196 x503))))))
(assert (= x473 (and x270 x448)))
(assert (x149 x273))
(assert (= x586 (and x174 x945)))
(assert (= (and x819 x260) x298))
(assert (x149 x1015))
(assert (x149 x973))
(assert (= (and x1003 x430) x751))
(assert (x149 x898))
(assert (= (and (not x549) x942) x215))
(assert (x72 x317))
(assert (x149 x349))
(assert (x142 x361))
(assert (x1030 x234))
(assert (x149 x724))
(assert (x144 x205))
(assert (and (x590 x359 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x359 (+ (* 1461501637330902918203684832716283019655932542976 (x360 x359 1461501637330902918203684832716283019655932542976)) (x512 x359 1461501637330902918203684832716283019655932542976)))) (x595 x359 1461501637330902918203684832716283019655932542976) (x980 x359 1461501637330902918203684832716283019655932542976)))
(assert (= (=> (and (or (not x426) x426) (= (= 0 x758) x426)) x251) x726))
(assert (= (and x965 x985) x727))
(assert (= x439 (=> (and (= x552 x73) (= x7 x893) (= x844 x852)) x413)))
(assert (x149 x166))
(assert (x149 x799))
(assert (= x659 (and (not x921) x221)))
(assert (x149 x208))
(assert (x149 x28))
(assert (x149 x818))
(assert (x149 x503))
(assert (x149 x239))
(assert (x144 x898))
(assert (x149 x184))
(assert (= x720 (and x596 x952)))
(assert (= x869 (and x274 x797)))
(assert (= (and (not x553) x955) x31))
(assert (= x786 (and (not x783) x258)))
(assert (= (=> (and (and (<= 0 x280) (not (= 3572374928 x223)) (= x280 x135) (not (< x223 2220280665)) (not x876) (<= x280 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x166 (x773 x112)) (not x867) (= x223 3705713892) (not (< x223 3084411429)) (< 0 x166) (not (= x223 3084411429))) (and (= x135 x456) (= x577 x649) (= x817 (= x649 x456)))) x817) x425))
(assert (x149 x708))
(assert (x149 x5))
(assert (x149 x752))
(assert (= (and x37 (not x508)) x348))
(assert (and (x590 x541 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x541 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x541 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x541 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x541 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x541 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x111 x669) x47))
(assert (x149 x91))
(assert (x149 x704))
(assert (x149 x611))
(assert (x149 x713))
(assert (= x295 (and x505 (not x402))))
(assert (= x373 (and x917 x996)))
(assert (x149 x148))
(assert (x149 x217))
(assert (= 0 (x697 x789)))
(assert (x149 x242))
(assert (x142 x541))
(assert (x149 x466))
(assert (= (or x238 x247) x889))
(assert (= (and x940 x373) x219))
(assert (x1030 x481))
(assert (= (=> (and (= x163 (= 0 x852)) (or (not x163) x163)) x169) x413))
(assert (= (or x835 x473 x760 x701 x48) x1035))
(assert (= 0 (x506 (+ (x560 (+ x503 196)) (- x1014 196)))))
(assert (x149 x524))
(assert (x149 x355))
(assert (x364 x234))
(assert (x149 x216))
(assert (= (x515 (- x774 x626)) 0))
(assert (and (x590 x541 32) (=> (> 32 0) (= x541 (+ (* 32 (x360 x541 32)) (x512 x541 32)))) (x595 x541 32) (x980 x541 32)))
(assert (x149 x308))
(assert (= (=> (= x729 (not (< 1 x118))) (and x691 x729)) x224))
(assert (= (and (not x480) x675) x855))
(assert (x149 x463))
(assert (= 0 (x697 160)))
(assert (x149 x957))
(assert (x149 x804))
(assert (x149 x510))
(assert (= x803 (and x682 (not x566))))
(assert (= (x515 (- 160 x626)) 0))
(assert (x149 x633))
(assert (x149 x997))
(assert (x149 x304))
(assert (x142 x95))
(assert (and (x590 x902 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x902 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x902 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x902 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x902 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x902 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (=> (= x195 (not (< 128 x217))) (and x195 (=> (= 128 x1013) x1027))) x600))
(assert (x364 x119))
(assert (= (and (not x374) x350) x904))
(assert (= (or x77 x642 x646 x843 x153) x1003))
(assert (x149 x206))
(assert (and (x590 x481 32) (=> (> 32 0) (= x481 (+ (* 32 (x360 x481 32)) (x512 x481 32)))) (x595 x481 32) (x980 x481 32)))
(assert (x149 x976))
(assert (= x906 (=> (and (= x621 (x1033 (- x567 x199))) (= (x560 (+ 31 x987)) x493) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x493) x57) (= x761 (> x217 0)) (= (x560 (+ x148 x57)) x567) (= x995 (x560 (+ x199 32))) (= (x158 x657) x217)) (and (=> (and (= (< 32 x217) x684) x761) (and (=> (and (= x1013 32) (not x684)) x1027) (=> (and (= (< 64 x217) x993) x684) (and (=> (and (= x1013 64) (not x993)) x1027) (=> (and (= (< 96 x217) x895) x993) (and (=> x895 x600) (=> (and (not x895) (= x1013 96)) x1027))))))) (=> (and (= x1013 0) (not x761)) x1027)))))
(assert (= (x506 (+ (x560 (+ x503 196)) (- (+ (- x774 160) 196) 196))) 0))
(assert (= (x506 256) 0))
(assert (x149 x14))
(assert (x142 x650))
(assert (and (x590 x188 32) (=> (> 32 0) (= x188 (+ (* 32 (x360 x188 32)) (x512 x188 32)))) (x595 x188 32) (x980 x188 32)))
(assert (x149 x935))
(assert (= (and x761 x809) x853))
(assert (x149 x991))
(assert (x149 x246))
(assert (= (and x12 x644) x385))
(assert (x149 x607))
(assert (= x334 (=> (= x67 (= 0 x76)) (and (=> (and (not x67) (and (= (x1001 1461501637330902918203684832716283019655932542975 x359) x370) (= x852 1) (= x563 x893) (= x73 32))) x413) (=> (and (and (= x563 x7) (= x844 0)) x67) x439)))))
(assert (= (and x336 x52) x722))
(assert (x149 x187))
(assert (= 0 (x506 (x560 (+ 196 x503)))))
(assert (and (x590 x650 32) (=> (> 32 0) (= x650 (+ (* 32 (x360 x650 32)) (x512 x650 32)))) (x595 x650 32) (x980 x650 32)))
(assert (x149 x834))
(assert (x1030 x493))
(assert (x149 x888))
(assert (= 0 (x506 (+ (x560 (+ 196 x503)) 96))))
(assert (x149 x73))
(assert (x149 x584))
(assert (x149 x858))
(assert (x149 x58))
(assert (= (and x601 x13) x2))
(assert (x1030 x494))
(assert (= x875 (=> (and (or (and (not x566) (= x189 x910)) (and (and (= x910 1) (< x810 4294967296)) x566)) (and (= x767 (x1005 x116)) (= (x560 (+ 31 x736)) x541) (= (> x189 0) x566) (not (or (> x736 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x736) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x736) true)))) (not (= 0 x933)) (>= 1461501637330902918203684832716283019655932542975 x767) (= (x560 (+ x136 x116)) x858) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x541) x136))) x250)))
(assert (= 0 (x697 256)))
(assert (= (=> (and (= (x685 x294) x741) (= (not (> x435 128)) x220) (= (x560 (+ 96 x417)) x332) (= x294 (x560 (+ x207 96)))) (and (=> (= 128 x652) x492) x220)) x715))
(assert (= x362 (and x889 (not x152))))
(assert (= (=> (and (= (= 0 x569) x489) (<= 0 x569) (> 256 x569) (>= 255 x569)) (and (=> (and x489 (and x847 (= x463 (x1001 1461501637330902918203684832716283019655932542975 x359)) (< x104 1461501637330902918203684832716283019655932542976) (= 0 x787) (= (x676 x112) x971) (= x409 x186) (= x847 (= x462 x6)) (= (= 0 x463) x453) (= x376 (x51 x359)) (<= 0 x104) (< (+ x769 x787) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x462 x246) (= x6 x359) (= (x1031 x112) x409) (= x769 (x226 x112)) (< x216 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x376 x790) (>= 1461501637330902918203684832716283019655932542975 x104) (= (x74 x112 x971) x359) (= x216 (x672 x359)))) (and (=> (and (and (= x225 (x560 (+ x485 192))) (> 1461501637330902918203684832716283019655932542976 x984) (> 1461501637330902918203684832716283019655932542976 x551) (>= x984 0) (<= x849 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x964) (>= 1461501637330902918203684832716283019655932542975 x964) (= (< 0 x126) x689) (>= x849 0) (= (x327 128) x126) (>= x551 0) (<= x551 1461501637330902918203684832716283019655932542975) (= x574 (x560 (+ 32 x225))) (>= 1461501637330902918203684832716283019655932542975 x984) (< x849 1461501637330902918203684832716283019655932542976) (= (x1001 1461501637330902918203684832716283019655932542975 x359) x256) (>= x964 0) (= (x560 (+ x657 4)) x485)) (not x453)) (and (=> (and (= 0 x593) (not x689)) x145) (=> (and x689 (and (= x374 (< 32 x126)) (= x574 x636) (= (x451 160) x533))) (and (=> (and (not x374) (= 32 x593)) x145) (=> (and (and (= x93 (> x126 64)) (= (x540 192) x846) (= (x560 (+ 32 x574)) x977)) x374) (and (=> (and (= 64 x593) (not x93)) x145) (=> (and x93 (and (= (< 96 x126) x538) (= (x560 (+ x574 64)) x308) (= (x301 224) x683))) (and (=> (and (not x538) (= 96 x593)) x145) (=> x538 x528))))))))) (=> (and x453 (and (= x563 x7) (= 0 x844))) x439))) (=> (and (not x489) (and (= x7 x563) (= x844 0))) x439))) x613))
(assert (x149 x741))
(assert (= (and (not x105) x619) x648))
(assert (x149 x544))
(assert (x149 x680))
(assert (x149 x1021))
(assert (x72 x289))
(assert (x149 x317))
(assert (= (and (not x314) x720) x133))
(assert (x149 x279))
(assert (x149 x116))
(assert (= (and (not x945) x174) x176))
(assert (x149 x205))
(assert (= (and x1012 x286) x175))
(assert (= 0 (x506 160)))
(assert (= x59 (and x547 x914)))
(assert (x149 x1040))
(assert (x149 x625))
(assert (x364 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x149 x870))
(assert (= x50 (and x274 (not x797))))
(assert (= (and x778 x453) x387))
(assert (x1030 x361))
(assert (= x609 (and x956 (not x795))))
(assert (x149 x833))
(assert (= (x515 (- x41 x626)) 0))
(assert (x149 x192))
(assert (= (x515 (- x580 x626)) 0))
(assert (= (and x43 (not x519)) x474))
(assert (x1030 x464))
(assert (= (and x742 x645) x819))
(assert (x149 x79))
(assert (= x454 (and (not x96) x1035)))
(assert (and (x69 32 x544) (x130 32 x544) (x377 32 x544) (and (= (* (- x544 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x94 32 (- x544 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x544 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x544 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x544 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x544) (* x544 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x544))) (x80 32 x544) (= (x94 32 x544) (* 32 x544)) (x994 32 x544)))
(assert (x149 x225))
(assert (= x992 (=> (and (= x1039 (x106 x861)) (<= x1039 1461501637330902918203684832716283019655932542975) (= (not (> x289 4)) x210) (= x630 (x560 (+ x68 32)))) (and x210 (=> (= x411 x630) x29)))))
(assert (x149 x548))
(assert (= x182 (=> (and (= (= x76 0) x13) (or x13 (not x13))) x334)))
(assert (x364 x650))
(assert (x364 x494))
(assert (= (x506 (+ (- (+ (- 224 x1042) x248) 196) (x560 (+ x503 196)))) 0))
(assert (= 0 (x506 (+ (- (+ x248 (- x1028 x1042)) 196) (x560 (+ x503 196))))))
(assert (x149 x650))
(assert (x149 x496))
(assert (= (and (not x951) x608) x363))
(assert (x142 x550))
(assert (x364 x898))
(assert (and (x590 x902 32) (=> (> 32 0) (= x902 (+ (* 32 (x360 x902 32)) (x512 x902 32)))) (x595 x902 32) (x980 x902 32)))
(assert (= (=> (and (or (and x484 (and (= x61 1) (> 4294967296 x241))) (and (not x484) (= x407 x61))) (and (= x633 (x937 x499)) (= (x560 (+ x90 31)) x62) (not (= x229 0)) (>= 1461501637330902918203684832716283019655932542975 x633) (= x704 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x62)) (= (> x407 0) x484) (= (x560 (+ x499 x704)) x55) (not (or (and (= true (<= x90 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x90 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x90))))) x486) x445))
(assert (= (and x461 x211) x198))
(assert (= 0 (x506 (+ (x560 (+ 196 x503)) (- (+ (- x789 x1042) x248) 196)))))
(assert (x149 x478))
(assert (x149 x933))
(assert (x149 x671))
(assert (x149 x1029))
(assert (x149 x781))
(assert (x149 x21))
(assert (x149 x97))
(assert (x149 x974))
(assert (x149 x254))
(assert (= 0 (x506 x716)))
(assert (x149 x75))
(assert (x149 x662))
(assert (= x100 (=> (and (= x985 (= 0 x868)) (or x985 (not x985))) x477)))
(assert (x149 x126))
(assert (x149 x322))
(assert (= (and x641 (not x388)) x107))
(assert (= (and x297 x848) x938))
(assert (= (or x2 (and (not x13) x601)) x9))
(assert (x149 x736))
(assert (x149 x3))
(assert (x149 x417))
(assert (x149 x948))
(assert (= (=> (= (> x3 0) x152) (and (=> (and (not x152) (and (= x844 0) (= x563 x7))) x439) (=> (and (= x183 x657) x152) x613))) x706))
(assert (and (x590 x698 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x698 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x698 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x698 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x698 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x698 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x142 x902))
(assert (= (x506 (+ (x560 (+ x503 196)) (- x392 196))) 0))
(assert (= x589 (and x374 x350)))
(assert (and (x590 x481 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x481 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x481 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x481 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x481 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x481 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x572))
(assert (and (x590 x234 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x234 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x234 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x234 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x234 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x234 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x294))
(assert (= 0 (x515 (- x625 x626))))
(assert (= x571 (and x9 (not x67))))
(assert (x149 x282))
(assert (x364 x95))
(assert (= (and (not x260) x819) x264))
(assert (x149 x964))
(assert (= (and x298 (not x946)) x878))
(assert (and (x590 x119 32) (=> (> 32 0) (= x119 (+ (* 32 (x360 x119 32)) (x512 x119 32)))) (x595 x119 32) (x980 x119 32)))
(assert (x149 x61))
(assert (x149 x767))
(assert (x149 x214))
(assert (x149 x475))
(assert (x149 x963))
(assert (= x828 (or x474 x324 x620 x133 x452)))
(assert (= (and x873 x530) x543))
(assert (= 0 (x506 (+ (- (+ (- x789 160) 196) 196) (x560 (+ x503 196))))))
(assert (x149 x267))
(assert (x149 x918))
(assert (x149 x861))
(assert (= x681 (and x1035 x96)))
(assert (x149 x68))
(assert (x1030 x95))
(assert (x149 x787))
(assert (x149 x792))
(assert (x149 x805))
(assert (x149 x502))
(assert (= x528 (=> (and (= (x560 (+ 96 x574)) x254) (= (x905 256) x510) (= (not (> x126 128)) x565)) (and (=> (= 128 x593) x145) x565))))
(assert (x149 x660))
(assert (x1030 x842))
(assert (= (and x89 x855) x168))
(assert (and (x590 x188 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x188 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x188 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x188 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x188 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x188 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x529))
(assert (= (and (not x453) x778) x446))
(assert (= (=> (and (or (not x712) x712) (= x712 (< x217 x1013))) x315) x1027))
(assert (x149 x332))
(assert (= (or x869 x50) x641))
(assert (x149 x514))
(assert (x149 x882))
(assert (and (x590 x494 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x494 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x494 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x494 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x494 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x494 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x149 x291))
(assert (x149 x734))
(assert (x149 x346))
(assert (x149 x576))
(assert (x149 x588))
(assert (x149 x758))
(assert (= 0 (x506 (+ (- (+ (- x41 x1042) x248) 196) (x560 (+ x503 196))))))
(assert (= x53 (and x513 x718)))
(assert (x149 x844))
(assert (x149 x740))
(assert (x364 x359))
(assert (x364 x854))
(assert (= x271 (or x586 x176)))
(assert (x149 x561))
(assert (x149 x653))
(assert (x149 x810))
(assert (x149 x812))
(assert (x142 x228))
(assert (x149 x309))
(assert (= (and x956 x795) x914))
(assert (x1030 x359))
(assert (x149 x621))
(assert (= (or x454 x681) x331))
(assert (x149 x903))
(assert (x149 x287))
(assert (x149 x306))
(assert (x149 x732))
(assert (x149 x813))
(assert (x149 x615))
(assert (= (and (not x816) x745) x956))
(assert (and (= (x94 9 3) 27) (= (x94 9 9) 81) (= 81 (x94 27 3)) (= 9 (x94 3 3))))
(assert (= (x506 (+ (x560 (+ 196 x503)) (- (+ (- x236 160) 196) 196))) 0))
(assert (x149 x400))
(assert (= x507 (=> (and (or (and (= x183 x469) x26) (and (not x26) (and (= x813 (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x842)) (= x842 (x560 (+ 63 x696))) (= (x560 (+ 32 x469)) x626) (= (x560 (+ x813 x469)) x1015) (= x183 x1015)))) (= x26 (= x696 0))) x706)))
(assert (x364 x493))
(assert (= (and (not x25) x53) x582))
(assert (= (and x1032 x288) x240))
(assert (= (and x53 x25) x505))
(assert (x149 x164))
(assert (x144 x359))
(assert (x364 32))
(assert (x149 x789))
(assert (x149 x62))
(assert (and (x69 32 x118) (x130 32 x118) (x377 32 x118) (and (= (* (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x94 32 (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 32 x118) (* x118 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x118))) (x80 32 x118) (= (x94 32 x118) (* 32 x118)) (x994 32 x118)))
(assert (x149 x229))
(assert (x149 x746))
(assert (= (or x654 x290) x258))
(assert (x149 x481))
(assert (x149 x877))
(assert (= x955 (and x436 (not x338))))
(assert (x149 x851))
(assert (and (x590 x228 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x228 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x228 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x835 (and x47 (not x988))))
(assert (x149 x562))
(assert (x149 x610))
(assert (x149 x359))
(assert (= (and x821 x509) x585))
(assert (= x885 (or x887 x772 x197 x664 x989)))
(assert (x149 x972))
(assert (= x403 (and x278 (not x305))))
(assert (= x174 (and x1019 x129)))
(assert (= x556 (or x788 x924)))
(assert (= (and (not x12) x644) x1038))
(assert (= (and x885 (not x712)) x263))
(assert (x149 x580))
(assert (x149 x979))
(assert (= (and x830 x198) x646))
(assert (= (and x915 x330) x719))
(assert (x149 x808))
(assert (x149 x443))
(assert (x149 x868))
(assert (and (x590 x62 32) (=> (> 32 0) (= x62 (+ (* 32 (x360 x62 32)) (x512 x62 32)))) (x595 x62 32) (x980 x62 32)))
(assert (= (and x889 x152) x526))
(assert (x149 x310))
(assert (= (or x213 x341) x618))
(assert (= x420 (and x807 x863)))
(assert (= (x515 (- 224 x626)) 0))
(assert (= 0 (x506 (+ (x560 (+ x503 196)) (- x429 196)))))
(assert (= (and x342 x1025) x619))
(assert (x149 x57))
(assert (x149 x404))
(assert (= (and x955 x553) x673))
(assert (= (or x651 x743 x245) x872))
(assert (x149 x971))
(assert (= (or x180 x737) x616))
(assert (x142 x481))
(assert (= x319 (and x157 x722)))
(assert (x149 x525))
(assert (x149 x45))
(assert (x149 x40))
(assert (x149 x554))
(assert (x149 x941))
(assert (x149 x118))
(assert (= (and x855 (not x89)) x624))
(assert (x149 x977))
(assert (= (and x252 x673) x155))
(assert (and (x590 x700 32) (=> (> 32 0) (= x700 (+ (* 32 (x360 x700 32)) (x512 x700 32)))) (x595 x700 32) (x980 x700 32)))
(assert (x149 x631))
(assert (= x570 (or x86 x526)))
(assert (x149 x837))
(assert (x142 x309))
(assert (= (and x47 x988) x339))
(assert (= x811 (and (not x93) x589)))
(assert (x149 x577))
(assert (x149 x769))
(assert (x149 x838))
(assert (x149 x34))
(assert (x149 x369))
(assert (= x981 (and x556 (not x484))))
(assert (= (and x43 x519) x884))
(assert (x149 x289))
(assert (x149 x919))
(assert (x149 x371))
(assert (x142 x119))
(assert (= (and x98 (not x912)) x863))
(assert (x149 x449))
(assert (= x84 (and x54 x233)))
(assert (x149 x262))
(assert (x364 x188))
(assert (x149 x470))
(assert (= (=> (and (= x789 (x560 (+ 96 x1042))) (= (not (< 128 x14)) x931) (= x79 (x560 (+ x880 96))) (= x629 (x366 x789))) (and (=> (= x212 128) x990) x931)) x806))
(assert (x149 x6))
(assert (x149 x409))
(assert (= x497 (and x237 x328)))
(assert (= 0 (x506 (+ (x560 (+ x503 196)) (- (+ x248 (- 128 x1042)) 196)))))
(assert (x149 x550))
(assert (x149 x688))
(assert (= x809 (or x243 x1022)))
(assert (= (and x884 (not x920)) x452))
(assert (x1030 x700))
(assert (x1030 x119))
(assert (x149 x820))
(assert (x149 x564))
(assert (x149 x122))
(assert (= x1000 (and x735 (not x962))))
(assert (x149 x558))
(assert (x149 x66))
(assert (= (and x801 x190) x341))
(assert (and (x590 x698 32) (=> (> 32 0) (= x698 (+ (* 32 (x360 x698 32)) (x512 x698 32)))) (x595 x698 32) (x980 x698 32)))
(assert (x149 x253))
(assert (= x965 (or x403 x110)))
(assert (= x929 (and x962 x735)))
(assert (x149 x535))
(assert (= 0 (x506 x139)))
(assert (x149 x930))
(assert (x149 x998))
(assert (x142 x494))
(assert (= true x98))
(assert (= x735 (or x648 x159 x421 x617 x120)))
(assert (x149 x30))
(assert (x142 x234))
(assert (x149 x407))
(assert (x364 x842))
(assert (= 0 (x697 x41)))
(assert (x149 x639))
(assert (x149 x1037))
(assert (= x856 (and x745 x816)))
(assert (x149 x1013))
(assert (and (x590 x228 32) (=> (> 32 0) (= x228 (+ (* 32 (x360 x228 32)) (x512 x228 32)))) (x595 x228 32) (x980 x228 32)))
(assert (x149 x776))
(assert (= x859 (or x618 x49)))
(assert (x149 x357))
(assert (x149 x435))
(assert (= (=> (and (= (= 0 x836) x690) (or x690 (not x690))) x128) x477))
(assert (x149 x156))
(assert (= x326 (and x105 x619)))
(assert (x149 x193))
(assert (x149 x1008))
(assert (= (x557 (x74 x112 x971)) 0))
(assert (x149 x824))
(assert (= x654 (and x690 x381)))
(assert (x149 x329))
(assert (x149 x966))
(assert (x149 x1028))
(assert (x149 x791))
(assert (= 0 (x506 x418)))
(assert (= 0 (x506 224)))
(assert (x364 x541))
(assert (= x29 (=> (and (= x837 (x1033 (- x411 x437))) (= x75 (x23 (* 32 x317))) (= (x560 (+ 32 x523)) x269) (= (x560 (+ x75 x514)) x979) (= x514 (x560 (+ 32 x411))) (= (> x317 0) x96)) (and (=> x96 x218) (=> (and (= x713 x979) (not x96)) x491)))))
(assert (x149 x440))
(assert (x144 x30))
(assert (x149 x228))
(assert (x149 x661))
(assert (x149 x236))
(assert (x149 x886))
(assert (x149 x397))
(assert (x149 x765))
(assert (x1030 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x149 x36))
(assert (x468 x854))
(assert (x149 x46))
(assert (x72 x118))
(assert (= x843 (and x863 (not x807))))
(assert (x149 x546))
(assert (x149 x464))
(assert (x364 1461501637330902918203684832716283019655932542976))
(assert (= (or x204 x527) x601))
(assert (= (and (not x513) x718) x455))
(assert (= (=> (and (or (and x288 (= x588 (x560 (+ x574 x126)))) (not x288)) (= (> x593 x126) x288)) x999) x145))
(assert (= (and (not x157) x722) x784))
(assert (x1030 x854))
(assert (= x682 (or x84 x1016)))
(assert (= x48 (and (not x270) x448)))
(assert (x149 x551))
(assert (= (and x168 (not x32)) x123))
(assert (= x395 (and (not x996) x917)))
(assert (= x637 (and x885 x712)))
(assert (x149 x694))
(assert (= 0 (x506 (+ (x560 (+ x503 196)) (- (+ (- x973 160) 196) 196)))))
(assert (x149 x683))
(assert (x149 x181))
(assert (x149 x422))
(assert (x149 x901))
(assert (= (and (not x605) x928) x204))
(assert (x149 x1042))
(assert (x364 x361))
(assert (= x43 (or x770 x215)))
(assert (x364 x309))
(assert (x1030 x541))
(assert (= (and x566 x682) x1007))
(assert (= (=> (and (= (x560 (+ 32 x65)) x891) (= x602 (x1033 (- x65 x485))) (= x976 (x967 x625)) (= x700 (x560 (+ x126 31))) (= (x560 (+ x796 x574)) x65) (= (> x976 0) x1012) (= (x560 (+ 32 x485)) x329) (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x700) x796)) (and (=> (and x1012 (and (= (x352 x662) x765) (= x662 x1042) (= x865 (> x976 32)) (= x891 x882))) (and (=> (and (= 32 x941) (not x865)) x725) (=> (and x865 (and (= x236 (x560 (+ 32 x1042))) (= (< 64 x976) x336) (= x227 (x406 x236)) (= (x560 (+ x891 32)) x972))) (and (=> (and x336 (and (= (x560 (+ x1042 64)) x774) (= x997 (x560 (+ x891 64))) (= (< 96 x976) x157) (= (x4 x774) x187))) (and (=> (and (= x941 96) (not x157)) x725) (=> x157 x755))) (=> (and (not x336) (= x941 64)) x725))))) (=> (and (= x941 0) (not x1012)) x725))) x999))
(assert (x149 x136))
(assert (x149 x841))
(assert (x149 x762))
(assert (= x737 (and x107 x351)))
(assert (x1030 x898))
(assert (x149 x836))
(assert (x149 x248))
(assert (x149 x794))
(assert (= (and x505 x402) x237))
(assert (x142 x188))
(assert (= (x697 x774) 0))
(assert (x149 x532))
(assert (= (=> (and (= (< x435 x652) x962) (or (and (= x399 (x560 (+ x417 x435))) x962) (not x962))) x394) x492))
(assert (x144 x782))
(assert (x149 x536))
(assert (x149 x831))
(assert (= x115 (=> (and (= (not (< 128 x987)) x850) (= x179 (x414 256)) (= x661 (x560 (+ 96 x148)))) (and (=> (= x1021 128) x521) x850))))
(assert (x149 x638))
(assert (= (and (not x940) x373) x675))
(assert (x149 x614))
(assert (and (x590 x464 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x464 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x464 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x464 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x464 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x464 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x144 x256))
(assert (= (or x545 x751) x750))
(assert (= x887 (and (not x895) x1002)))
(assert (= (=> (and (or (and (and (= 1 x21) (< x717 4294967296)) x190) (and (not x190) (= x21 x524))) (and (= (x1001 115792089237316195423570985008687907853269984665640564039457584007913129639904 x494) x138) (= (x560 (+ x810 31)) x494) (not (or (> x810 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x810 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x810))))) (= (x560 (+ x858 x138)) x396) (= x922 (x968 x858)) (= (< 0 x524) x190) (not (= x910 0)) (>= 1461501637330902918203684832716283019655932542975 x922))) x969) x250))
(assert (x149 x183))
(assert (x149 x494))
(assert (and (x590 x550 32) (=> (> 32 0) (= x550 (+ (* 32 (x360 x550 32)) (x512 x550 32)))) (x595 x550 32) (x980 x550 32)))
(assert (= 0 (x515 (- 192 x626))))
(assert (= x848 (and x161 x1038)))
(assert (= (and x426 x616) x459))
(assert (x142 x464))
(assert (= x1017 (and x331 x754)))
(assert (x149 x340))
(assert (x149 x8))
(assert (x149 x987))
(assert (x149 x995))
(assert (x149 x179))
(assert (x149 x498))
(assert (x72 x544))
(assert (x1030 x550))
(assert (= (and x209 x793) x382))
(assert (x149 x391))
(assert (= (and x178 x828) x1022))
(assert (= (and x570 (not x489)) x749))
(assert (x149 x280))
(assert (= x644 (and x673 (not x252))))
(assert (x149 x65))
(assert (and (x590 x95 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x95 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x360 x95 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x512 x95 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x595 x95 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x980 x95 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (or x585 x678 x385 x171 x460 x786 x609 x520 x219 x659 x624 x749 x938 x500 x487 x395 x33 x438 x387 x878 x155 x264 x666 x31 x719 x934 x333 x362 x268 x384 x59 x856 x348 x627) x643))
(assert (x149 x892))
(assert (x149 x283))
(assert (x149 x623))
(assert (x149 x578))
(assert (= x49 (and x912 x98)))
(assert (x149 x658))
(assert (= (and x129 (not x1019)) x651))
(assert (x149 x7))
(check-sat)
(exit)
