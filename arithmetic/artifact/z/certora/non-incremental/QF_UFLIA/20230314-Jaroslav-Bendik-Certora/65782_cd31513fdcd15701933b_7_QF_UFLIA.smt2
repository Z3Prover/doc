(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x248 () Int)
(declare-fun x165 () Int)
(declare-fun x274 () Bool)
(declare-fun x168 (Int) Int)
(declare-fun x96 () Int)
(declare-fun x93 () Int)
(declare-fun x332 () Bool)
(declare-fun x174 () Int)
(declare-fun x164 () Int)
(declare-fun x138 () Bool)
(declare-fun x250 () Int)
(declare-fun x220 () Bool)
(declare-fun x60 () Bool)
(declare-fun x315 () Int)
(declare-fun x297 () Int)
(declare-fun x311 () Bool)
(declare-fun x147 () Bool)
(declare-fun x197 () Bool)
(declare-fun x56 () Int)
(declare-fun x19 () Int)
(declare-fun x76 () Bool)
(declare-fun x21 () Int)
(declare-fun x109 () Int)
(declare-fun x175 () Int)
(declare-fun x331 () Int)
(declare-fun x185 () Int)
(declare-fun x42 () Bool)
(declare-fun x4 () Bool)
(declare-fun x229 () Int)
(declare-fun x324 () Int)
(declare-fun x238 () Int)
(declare-fun x305 () Int)
(declare-fun x266 () Int)
(declare-fun x54 () Int)
(declare-fun x323 () Bool)
(declare-fun x328 () Int)
(declare-fun x265 () Bool)
(declare-fun x273 () Bool)
(declare-fun x318 () Bool)
(declare-fun x150 () Int)
(declare-fun x140 () Int)
(declare-fun x28 () Int)
(declare-fun x2 () Int)
(declare-fun x31 () Int)
(declare-fun x133 () Bool)
(declare-fun x27 () Int)
(declare-fun x58 () Bool)
(declare-fun x241 () Int)
(declare-fun x333 () Bool)
(declare-fun x191 () Int)
(declare-fun x86 () Bool)
(declare-fun x294 () Int)
(declare-fun x337 () Bool)
(declare-fun x59 () Int)
(declare-fun x256 () Int)
(declare-fun x129 (Int Int) Int)
(declare-fun x267 () Int)
(declare-fun x268 () Bool)
(declare-fun x221 () Int)
(declare-fun x74 () Bool)
(declare-fun x255 () Int)
(declare-fun x231 () Bool)
(declare-fun x258 () Bool)
(declare-fun x8 () Int)
(declare-fun x279 () Int)
(declare-fun x325 () Int)
(declare-fun x137 () Int)
(declare-fun x320 () Bool)
(declare-fun x301 () Int)
(declare-fun x34 () Int)
(declare-fun x117 () Bool)
(declare-fun x182 () Int)
(declare-fun x122 () Int)
(declare-fun x346 () Bool)
(declare-fun x299 () Bool)
(declare-fun x45 () Int)
(declare-fun x237 () Int)
(declare-fun x71 () Bool)
(declare-fun x251 () Int)
(declare-fun x171 () Int)
(declare-fun x341 () Int)
(declare-fun x35 () Int)
(declare-fun x110 (Int) Int)
(declare-fun x218 () Int)
(declare-fun x334 () Int)
(declare-fun x319 () Int)
(declare-fun x313 () Bool)
(declare-fun x159 () Bool)
(declare-fun x339 () Int)
(declare-fun x23 () Int)
(declare-fun x287 () Int)
(declare-fun x128 () Bool)
(declare-fun x14 () Bool)
(declare-fun x263 () Bool)
(declare-fun x17 () Int)
(declare-fun x127 () Bool)
(declare-fun x329 () Bool)
(declare-fun x1 () Int)
(declare-fun x252 () Int)
(declare-fun x149 () Int)
(declare-fun x249 () Bool)
(declare-fun x214 () Int)
(declare-fun x154 () Bool)
(declare-fun x47 () Bool)
(declare-fun x264 () Int)
(declare-fun x307 () Bool)
(declare-fun x253 () Int)
(declare-fun x12 () Int)
(declare-fun x62 () Int)
(declare-fun x118 () Bool)
(declare-fun x99 () Bool)
(declare-fun x13 () Int)
(declare-fun x139 () Int)
(declare-fun x81 () Int)
(declare-fun x130 () Bool)
(declare-fun x70 () Int)
(declare-fun x290 () Int)
(declare-fun x190 () Int)
(declare-fun x186 () Bool)
(declare-fun x300 () Int)
(declare-fun x338 () Bool)
(declare-fun x169 () Int)
(declare-fun x73 (Int) Int)
(declare-fun x125 (Int) Int)
(declare-fun x85 () Int)
(declare-fun x205 () Int)
(declare-fun x219 () Bool)
(declare-fun x271 () Int)
(declare-fun x193 () Int)
(declare-fun x10 () Bool)
(declare-fun x302 (Int) Int)
(declare-fun x327 () Int)
(declare-fun x80 () Int)
(declare-fun x172 () Bool)
(declare-fun x254 () Int)
(declare-fun x242 () Int)
(declare-fun x194 () Int)
(declare-fun x51 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x310 () Int)
(declare-fun x61 () Int)
(declare-fun x314 () Int)
(declare-fun x55 () Int)
(declare-fun x113 () Int)
(declare-fun x78 () Int)
(declare-fun x98 () Int)
(declare-fun x288 () Int)
(declare-fun x115 () Int)
(declare-fun x295 () Bool)
(declare-fun x82 () Bool)
(declare-fun x123 () Int)
(declare-fun x187 () Int)
(declare-fun x184 () Bool)
(declare-fun x283 () Int)
(declare-fun x216 () Int)
(declare-fun x30 () Bool)
(declare-fun x120 () Int)
(declare-fun x145 () Int)
(declare-fun x225 () Int)
(declare-fun x101 () Bool)
(declare-fun x119 () Int)
(declare-fun x68 () Int)
(declare-fun x102 () Int)
(declare-fun x46 () Bool)
(declare-fun x246 () Int)
(declare-fun x144 () Int)
(declare-fun x89 () Int)
(declare-fun x170 () Int)
(declare-fun x135 () Bool)
(declare-fun x90 () Int)
(declare-fun x136 () Int)
(declare-fun x108 () Int)
(declare-fun x11 () Bool)
(declare-fun x243 () Int)
(declare-fun x40 () Int)
(declare-fun x3 () Int)
(declare-fun x201 () Bool)
(declare-fun x95 () Bool)
(declare-fun x209 () Bool)
(declare-fun x41 () Int)
(declare-fun x317 () Int)
(declare-fun x91 () Int)
(declare-fun x77 () Int)
(declare-fun x259 () Int)
(declare-fun x157 () Bool)
(declare-fun x309 () Int)
(declare-fun x304 () Int)
(declare-fun x64 (Int Int) Int)
(declare-fun x5 () Int)
(declare-fun x308 () Int)
(declare-fun x79 () Int)
(declare-fun x24 () Bool)
(declare-fun x177 (Int) Int)
(declare-fun x336 () Bool)
(declare-fun x48 () Int)
(declare-fun x203 () Bool)
(declare-fun x148 () Bool)
(declare-fun x16 () Bool)
(declare-fun x260 () Int)
(declare-fun x343 () Int)
(declare-fun x226 () Bool)
(declare-fun x189 () Int)
(declare-fun x134 () Int)
(declare-fun x155 () Int)
(declare-fun x69 () Bool)
(declare-fun x103 () Bool)
(declare-fun x292 () Int)
(declare-fun x200 (Int Int) Int)
(declare-fun x198 (Int Int) Int)
(declare-fun x116 () Int)
(declare-fun x344 (Int Int) Int)
(declare-fun x112 () Bool)
(declare-fun x36 () Int)
(declare-fun x57 () Bool)
(declare-fun x272 () Bool)
(declare-fun x176 (Int Int) Int)
(declare-fun x87 (Int) Int)
(declare-fun x142 () Int)
(declare-fun x239 () Int)
(declare-fun x153 () Int)
(declare-fun x196 () Bool)
(declare-fun x162 () Int)
(declare-fun x132 () Int)
(declare-fun x208 () Bool)
(declare-fun x92 () Int)
(declare-fun x269 () Int)
(declare-fun x166 () Int)
(declare-fun x43 () Int)
(declare-fun x296 () Bool)
(declare-fun x6 () Bool)
(declare-fun x211 () Int)
(declare-fun x38 () Int)
(declare-fun x146 () Int)
(declare-fun x131 () Int)
(declare-fun x232 () Int)
(declare-fun x210 () Int)
(declare-fun x106 () Int)
(declare-fun x257 () Bool)
(declare-fun x235 () Bool)
(declare-fun x215 () Int)
(declare-fun x212 () Bool)
(declare-fun x158 () Int)
(declare-fun x276 () Bool)
(declare-fun x240 () Int)
(declare-fun x83 () Int)
(declare-fun x7 () Bool)
(declare-fun x114 () Int)
(declare-fun x230 () Int)
(declare-fun x67 () Int)
(declare-fun x180 () Bool)
(declare-fun x26 (Int Int) Int)
(declare-fun x340 () Bool)
(declare-fun x94 () Int)
(declare-fun x234 () Int)
(declare-fun x298 () Int)
(declare-fun x342 () Int)
(declare-fun x233 (Int) Int)
(declare-fun x152 () Int)
(declare-fun x173 () Int)
(declare-fun x195 () Bool)
(declare-fun x206 () Int)
(declare-fun x100 () Int)
(declare-fun x160 () Bool)
(declare-fun x65 () Bool)
(declare-fun x156 () Bool)
(declare-fun x124 () Int)
(declare-fun x316 () Int)
(declare-fun x50 () Int)
(declare-fun x270 () Int)
(define-fun x25 ((x181 Int)) Int (ite (and (>= x181 0) (< x181 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x181 (- x181 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x223 ((x181 Int)) Int (ite (and (< x181 0) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x181)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x181) x181))
(define-fun x104 ((x181 Int)) Int (ite (and (< x181 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x181 0)) x181 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x181) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x181)) (- x181 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x181 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x181)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x181) (x198 x181 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x20 ((x32 Int)) Bool (and (>= x32 0) (< x32 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x66 ((x32 Int)) Bool (and (<= 0 x32) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x32)))
(define-fun x282 ((x32 Int) (x105 Int)) Bool (= (x176 x32 x105) (x176 x105 x32)))
(define-fun x167 ((x32 Int) (x105 Int)) Bool (and (=> (and (< 0 x105) (> x32 0)) (> (x176 x32 x105) 0)) (=> (and (< 0 x32) (< x105 0)) (< (x176 x32 x105) 0)) (=> (and (> 0 x105) (> 0 x32)) (< 0 (x176 x32 x105))) (=> (and (< 0 x105) (> 0 x32)) (> 0 (x176 x32 x105)))))
(define-fun x303 ((x32 Int) (x105 Int)) Bool (=> (and (< 0 x105) (> x32 0)) (= (= (x200 (x104 (x176 x32 x105)) x32) x105) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x176 x32 x105)))))
(define-fun x289 ((x32 Int) (x105 Int)) Bool (=> (and (not (= x32 0)) (not (= x105 0))) (and (= (x200 (x176 x32 x105) x105) x32) (= (x200 (x176 x32 x105) x32) x105))))
(define-fun x29 ((x32 Int) (x105 Int)) Bool (=> (and (< 0 x105) (> x32 0)) (= (> (x176 x32 x105) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x105 (x200 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32)))))
(define-fun x121 ((x32 Int) (x105 Int)) Bool (and (= (x104 (x176 x32 x105)) (x104 (x176 (- x32 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x104 (x176 x32 x105)) (x104 (x176 x32 (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x104 (x176 x32 x105)) (x104 (x176 (- x32 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105)))))
(define-fun x88 ((x32 Int) (x105 Int)) Bool (and (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32) (< 0 x32)) (and (<= x105 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x105 0))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x176 x32 x105)) (<= x32 (x200 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105)))) (=> (and (and (> x105 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x176 (- x32 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x32) (x200 57896044618658097711785492504343953926634992332820282019728792003956564819968 x105)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x105))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x176 (- x32 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x200 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x32)))) (=> (and (and (> x105 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x105)) (and (< 0 x32) (<= x32 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x176 x32 (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105) (x200 57896044618658097711785492504343953926634992332820282019728792003956564819968 x32))))))
(define-fun x228 ((x32 Int) (x105 Int)) Bool (and (x88 x32 x105) (x289 x32 x105) (x167 x32 x105) (x282 x32 x105) (x121 x32 x105) (x303 x32 x105) (x29 x32 x105)))
(define-fun x15 ((x32 Int)) Bool (and (= 0 (x176 x32 0)) (= 0 (x176 0 x32))))
(define-fun x284 ((x32 Int)) Bool (and (= x32 (x176 x32 1)) (= (x176 1 x32) x32)))
(define-fun x178 ((x32 Int)) Bool (and (x15 x32) (x284 x32)))
(define-fun x18 ((x32 Int) (x105 Int)) Bool (=> (and (< 0 x105) (> x32 0)) (and (>= x32 (x200 x32 x105)) (<= 0 (x200 x32 x105)))))
(define-fun x213 ((x32 Int) (x105 Int)) Bool (=> (and (and (<= 1 x105) (< x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x32) (<= 0 x32))) (and (< (x200 x32 x105) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x200 x32 x105)))))
(define-fun x277 ((x32 Int) (x105 Int)) Bool (=> (and (< 1 x105) (< x105 x32)) (< (x200 x32 x105) x32)))
(define-fun x293 ((x32 Int) (x105 Int)) Bool (=> (and (< 0 x105) (> x32 0)) (= (< x32 x105) (= (x200 x32 x105) 0))))
(define-fun x275 ((x32 Int) (x105 Int)) Bool (=> (and (< 0 x32) (< 0 x105)) (and (>= x32 (x176 (x200 x32 x105) x105)) (> (x176 (x200 x32 x105) x105) (- x32 x105)))))
(define-fun x143 ((x32 Int) (x105 Int)) Bool (and (x277 x32 x105) (x213 x32 x105) (x275 x32 x105) (x18 x32 x105) (x293 x32 x105)))
(define-fun x84 ((x32 Int)) Bool (= (x200 0 x32) 0))
(define-fun x217 ((x32 Int)) Bool (= (x200 x32 1) x32))
(define-fun x330 ((x32 Int)) Bool (=> (not (= 0 x32)) (= (x200 x32 x32) 1)))
(define-fun x222 ((x32 Int)) Bool (and (x217 x32) (x330 x32) (x84 x32)))
(define-fun x163 ((x32 Int)) Bool (and (= (x64 x32 115792089237316195423570985008687907853269984665640564039457584007913129639935) x32) (= (x64 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) x32)))
(define-fun x33 ((x32 Int)) Bool (and (= (x64 0 x32) 0) (= 0 (x64 x32 0))))
(define-fun x224 ((x32 Int)) Bool (= (x64 x32 x32) x32))
(define-fun x321 ((x32 Int)) Bool (and (x33 x32) (x163 x32) (x224 x32)))
(define-fun x245 ((x32 Int) (x105 Int)) Bool (= (x64 x105 x32) (x64 x32 x105)))
(define-fun x52 ((x32 Int) (x105 Int)) Bool (and (=> (>= x32 0) (<= (x64 x32 x105) x32)) (=> (>= x105 0) (<= (x64 x32 x105) x105)) (>= (x64 x32 x105) 0)))
(define-fun x53 ((x32 Int) (x105 Int)) Bool (and (x245 x32 x105) (x52 x32 x105)))
(define-fun x285 ((x32 Int)) Bool (= (x64 x32 1461501637330902918203684832716283019655932542975) (x198 x32 1461501637330902918203684832716283019655932542976)))
(define-fun x63 ((x32 Int)) Bool (and (x285 x32) (x53 x32 1461501637330902918203684832716283019655932542975)))
(define-fun x183 ((x32 Int) (x105 Int)) Bool (and (<= 0 (x198 x32 x105)) (< (x198 x32 x105) x105)))
(define-fun x39 ((x32 Int) (x105 Int)) Bool (=> (and (> x105 0) (<= 0 x32)) (= (> x105 x32) (= x32 (x198 x32 x105)))))
(define-fun x49 ((x32 Int) (x105 Int)) Bool (=> (and (> x105 0) (and (< x32 (+ x105 x105)) (>= x32 x105))) (= (x198 x32 x105) (- x32 x105))))
(define-fun x286 ((x32 Int)) Bool (= (x198 0 x32) 0))
(define-fun x22 ((x32 Int)) Bool (= (x198 x32 1) 0))
(define-fun x126 ((x32 Int)) Bool (= 0 (x198 x32 x32)))
(define-fun x291 ((x32 Int)) Bool (and (x22 x32) (x286 x32) (x126 x32)))
(define-fun x199 ((x32 Int)) Bool (and (= (x344 x32 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x344 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x347 ((x32 Int)) Bool (and (= x32 (x344 0 x32)) (= (x344 x32 0) x32)))
(define-fun x312 ((x32 Int)) Bool (= x32 (x344 x32 x32)))
(define-fun x278 ((x32 Int)) Bool (and (x312 x32) (x347 x32) (x199 x32)))
(define-fun x37 ((x32 Int) (x105 Int)) Bool (= (x344 x32 x105) (x344 x105 x32)))
(define-fun x227 ((x32 Int) (x105 Int)) Bool (and (=> (>= x105 0) (>= (x344 x32 x105) x105)) (=> (>= x32 0) (>= (x344 x32 x105) x32)) (>= (+ x105 x32) (x344 x32 x105))))
(define-fun x236 ((x32 Int) (x105 Int)) Bool (and (x227 x32 x105) (x37 x32 x105)))
(define-fun x97 ((x326 Int)) Int (ite (= x326 x269) x23 (x73 x326)))
(define-fun x202 ((x326 Int)) Int (ite (= x326 x294) x146 (x97 x326)))
(define-fun x262 ((x326 Int)) Int (ite x197 (x73 x326) (x202 x326)))
(define-fun x247 ((x326 Int)) Int (ite (= x326 x43) x246 (x262 x326)))
(define-fun x306 ((x326 Int)) Int (ite (= x326 x270) x210 (x247 x326)))
(define-fun x75 ((x326 Int)) Int (ite x30 (x262 x326) (ite x160 (x262 x326) (x306 x326))))
(define-fun x188 ((x326 Int)) Int (x233 x326))
(define-fun x345 ((x326 Int)) Int (x51 x326))
(define-fun x161 ((x326 Int)) Int (ite (= x326 x67) x27 (x188 x326)))
(define-fun x151 ((x326 Int)) Int (ite (= x326 128) x327 (x87 x326)))
(define-fun x207 ((x326 Int)) Int (ite (= x326 128) x131 (x151 x326)))
(define-fun x261 ((x326 Int)) Int (ite (= x326 160) x327 (x207 x326)))
(define-fun x107 ((x326 Int)) Int (ite (= 128 x326) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x261 x326)))
(define-fun x322 ((x326 Int)) Int (ite (= x326 132) x21 (x107 x326)))
(define-fun x204 ((x326 Int)) Int (ite (= 164 x326) x131 (x322 x326)))
(define-fun x192 ((x326 Int)) Int (ite (= x326 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x110 x326)))
(define-fun x141 ((x326 Int)) Int (ite (= 132 x326) x89 (x192 x326)))
(define-fun x72 ((x326 Int)) Int (ite (= 164 x326) x19 (x141 x326)))
(define-fun x44 ((x326 Int)) Int (ite (= 196 x326) x343 (x72 x326)))
(define-fun x281 ((x32 Int) (x105 Int) (x244 Int) (x280 Int)) Bool (=> (and (>= x32 0) (>= x244 x32) (<= x105 x280) (<= 0 x105)) (<= (x176 x32 x105) (x176 x244 x280))))
(define-fun x335 ((x32 Int) (x105 Int) (x244 Int) (x280 Int)) Bool (=> (= x244 x32) (= (x176 x32 (- x105 x280)) (- (x176 x32 x105) (x176 x244 x280)))))
(assert (x66 x175))
(assert (=> (<= x89 10000) (not (= x89 (x26 x19 x309)))))
(assert (not (= (x26 x83 4) (x26 x301 3))))
(assert (not (= (x26 x19 x309) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= true x172))
(assert (not (= (x26 x19 x309) 404098525)))
(assert (not (= 3026235284 (x26 x41 1))))
(assert (=> (<= x83 10000) (not (= x83 (x26 x89 x162)))))
(assert (not (= 2514000705 (x26 x301 3))))
(assert (=> (= (x26 x19 x309) (x26 x169 3)) (and (= x19 x169) (= 3 x309))))
(assert (x178 x102))
(assert (not (= (x26 x19 x309) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x66 x165))
(assert (not (= (x26 x94 1) 2376452955)))
(assert (not (= 1889567281 (x26 x301 3))))
(assert (x66 x164))
(assert (not (= 170435703 (x26 x301 3))))
(assert (= x231 (and (not x336) x329)))
(assert (not (= 826074471 (x26 x19 1))))
(assert (not (= 1 (x26 x89 x162))))
(assert (not (= 1889567281 (x26 x94 1))))
(assert (x66 x83))
(assert (=> (= (x26 x94 2) (x26 x19 x309)) (and (= x19 x94) (= x309 2))))
(assert (not (= (x26 x19 x309) 3026235284)))
(assert (x335 x343 x102 x327 x310))
(assert (=> (<= x83 10000) (not (= (x26 x169 3) x83))))
(assert (not (= (x26 x239 1) 3026235284)))
(assert (not (= 1 (x26 x19 1))))
(assert (=> (<= x94 10000) (not (= x94 (x26 x19 1)))))
(assert (not (= (x26 x94 2) 3)))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x89 x162))))
(assert (= x311 (or x197 x118)))
(assert (x66 x45))
(assert (not (= (x26 x94 2) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x66 x317))
(assert (not (= (x26 x169 3) (x26 x239 1))))
(assert (not (= 3017275065 (x26 x89 x162))))
(assert (x321 x13))
(assert (=> (>= 10000 x41) (not (= x41 (x26 x301 3)))))
(assert (x66 x136))
(assert (x20 x94))
(assert (= x147 (=> (and (= x334 0) (= x292 x102) (= x314 x5) (= x3 x35)) x273)))
(assert (not (= 3337024914 (x26 x19 x309))))
(assert (x66 x94))
(assert (x66 x327))
(assert (=> (= (x26 x94 1) (x26 x19 x309)) (and (= 1 x309) (= x19 x94))))
(assert (x53 x134 x115))
(assert (not (= (x26 x94 1) 170435703)))
(assert (not (= 3337024914 (x26 x94 1))))
(assert (not (= 1851080549 (x26 x19 1))))
(assert (=> (= (x26 x89 x162) (x26 x169 3)) (and (= x169 x89) (= x162 3))))
(assert (x228 x102 (- x343 x310)))
(assert (not (= 1289409798 (x26 x41 1))))
(assert (x321 x166))
(assert (x66 x246))
(assert (=> (>= 10000 x315) (not (= x315 (x26 x19 1)))))
(assert (not (= 330252341 (x26 x19 1))))
(assert (=> (<= x315 10000) (not (= (x26 x301 3) x315))))
(assert (x66 x79))
(assert (not (= 2514000705 (x26 x41 1))))
(assert (x66 x232))
(assert (not (= (x26 x89 x162) 3)))
(assert (not (= 117300739 (x26 x301 3))))
(assert (=> (= (x26 x19 1) (x26 x19 x309)) (= 1 x309)))
(assert (=> (>= 10000 x315) (not (= (x26 x94 1) x315))))
(assert (x321 1461501637330902918203684832716283019655932542975))
(assert (=> (>= 10000 x169) (not (= x169 (x26 x169 3)))))
(assert (not (= (x26 x19 1) 2376452955)))
(assert (not (= 2835717307 (x26 x19 x309))))
(assert (x66 x193))
(assert (x278 x216))
(assert (not (= (x26 x89 x162) 330252341)))
(assert (x66 x331))
(assert (not (= (x26 x239 1) 2)))
(assert (=> (<= x41 10000) (not (= x41 (x26 x19 1)))))
(assert (x66 x68))
(assert (not (= 2514000705 (x26 x94 1))))
(assert (=> (>= 10000 x89) (not (= (x26 x19 1) x89))))
(assert (x335 x327 x310 x102 x343))
(assert (=> (= (x26 x19 x309) (x26 x89 x162)) (and (= x19 x89) (= x309 x162))))
(assert (x66 x150))
(assert (not (= (x26 x169 3) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x26 x169 3) 404098525)))
(assert (not (= 404098525 (x26 x83 4))))
(assert (x66 x35))
(assert (= x340 (or x82 x201)))
(assert (=> (<= x19 10000) (not (= (x26 x301 3) x19))))
(assert (x66 x146))
(assert (x66 x55))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 x19 1))))
(assert (=> (>= 10000 x19) (not (= (x26 x89 x162) x19))))
(assert (not (= 117300739 (x26 x239 1))))
(assert (=> (= (x26 x19 1) (x26 x94 1)) (= x19 x94)))
(assert (x66 x214))
(assert (x321 x248))
(assert (=> (>= 10000 x94) (not (= (x26 x169 3) x94))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x26 x89 x162))))
(assert (not (= 599290589 (x26 x169 3))))
(assert (x66 x106))
(assert (not (= (x26 x19 x309) 1)))
(assert (=> (>= 10000 x301) (not (= (x26 x169 3) x301))))
(assert (not (= (x26 x169 3) (x26 x19 1))))
(assert (=> (>= 10000 x239) (not (= x239 (x26 x301 3)))))
(assert (x66 x185))
(assert (x66 x292))
(assert (not (= (x26 x94 2) (x26 x169 3))))
(assert (not (= (x26 x83 4) 1)))
(assert (=> (= (x26 x41 1) (x26 x94 1)) (= x94 x41)))
(assert (x66 x145))
(assert (x66 x89))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x26 x301 3))))
(assert (x66 x77))
(assert (x66 x91))
(assert (x66 x153))
(assert (not (= (x26 x83 4) 170435703)))
(assert (not (= (x26 x83 4) (x26 x41 1))))
(assert (not (= (x26 x94 1) (x26 x83 4))))
(assert (x20 x89))
(assert (not (= (x26 x94 2) (x26 x94 1))))
(assert (= x235 (and x103 x311)))
(assert (x236 x55 x70))
(assert (not (= (x26 x94 1) (x26 x301 3))))
(assert (= (or x208 x160 x30) x226))
(assert (x66 x140))
(assert (x66 x108))
(assert (not (= (x26 x19 1) 3026235284)))
(assert (x178 (- x310 x102)))
(assert (x66 x62))
(assert (=> (<= x19 10000) (not (= x19 (x26 x169 3)))))
(assert (x66 x328))
(assert (x66 x173))
(assert (x66 x142))
(assert (x66 x304))
(assert (not (= (x26 x301 3) 2376452955)))
(assert (=> (<= x94 10000) (not (= (x26 x19 x309) x94))))
(assert (=> (<= x239 10000) (not (= x239 (x26 x41 1)))))
(assert (not (= 3121116754 (x26 x19 1))))
(assert (x66 x225))
(assert (=> (<= x169 10000) (not (= (x26 x301 3) x169))))
(assert (not (= 1 (x26 x94 1))))
(assert (=> (<= x301 10000) (not (= x301 (x26 x94 1)))))
(assert (x281 x102 x343 x327 x310))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x83 4))))
(assert (x335 x343 x102 x310 x327))
(assert (=> (>= 10000 x169) (not (= x169 (x26 x19 x309)))))
(assert (= x212 (=> (and (= (x168 x315) x264) (> x264 0) (< x259 826074471) (= x266 100) (not (= 404098525 x259)) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x316) (not (= 117300739 x259)) (not (= x259 157198259)) (= x41 x19) (not (= 0 x229)) (= 128 x218) (= x241 x94) (= x145 x343) (not (< x266 4)) (= (x223 (- x266 4)) x325) (= x249 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325) true) (< x325 96)) (> x325 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= 599290589 x259)) (and (=> x249 x147) (=> (and (and (= x94 x158) (= x196 true)) (not x249)) (and (=> (not x196) x147) (=> (and (and (= x50 x41) (= true x203)) x196) (and (=> (not x203) x147) (=> (and (and (= x78 (x73 x80)) (= x145 x252) (= (x26 x94 1) x80) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x78) (= (> x343 x78) x133) (>= x78 0)) x203) (and (=> (and (= (> x145 x78) x299) (not x133)) (and (=> x299 x147) (=> (and (not x299) (and (= (x26 x94 1) x269) (>= x234 0) (= x17 (x223 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145))) (= (x26 x41 1) x342) (= (< x17 x234) x220) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x234) (= x23 (x223 (- x78 x145))) (= (x97 x342) x234))) (and (=> (and (not x220) (and (= (x25 (+ x145 x234)) x146) (= x336 (> x234 x146)))) (and (=> (and (and (= x81 (x26 x19 x309)) (= x294 (x26 x41 1)) (= (x125 x81) x109) (>= x109 0) (= x309 (x26 x94 2)) (<= x109 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x57 (> x145 x109))) (not x336)) (and (=> (and (not x57) (= (< x109 x145) x186)) (and (=> (and (and (= x314 32) (= x3 x35) (= (x223 (- x109 x145)) x59) (= x102 x292) (= x334 1)) (not x186)) x273) (=> x186 x147))) (=> x57 x147))) (=> x336 x147))) (=> x220 x147))))) (=> x133 x147)))))))))))
(assert (= x257 (and x95 x203)))
(assert (not (= (x26 x169 3) 2835717307)))
(assert (x222 x144))
(assert (x66 x155))
(assert (not (= (x26 x83 4) 2376452955)))
(assert (not (= 157198259 (x26 x83 4))))
(assert (=> (>= 10000 x315) (not (= x315 (x26 x89 x162)))))
(assert (x66 x271))
(assert (x66 x93))
(assert (not (= (x26 x94 2) 1461501637330902918203684832716283019655932542975)))
(assert (x66 x114))
(assert (not (= 4 (x26 x239 1))))
(assert (x178 (- x102 x310)))
(assert (x66 x187))
(assert (not (= (x26 x239 1) 404098525)))
(assert (not (= (x26 x94 2) (x26 x239 1))))
(assert (=> (= (x26 x94 1) (x26 x239 1)) (= x94 x239)))
(assert (x66 x96))
(assert (not (= (x26 x301 3) 157198259)))
(assert (= (and x154 (not x299)) x130))
(assert (=> (>= 10000 x239) (not (= x239 (x26 x94 2)))))
(assert (not (= (x26 x83 4) 3017275065)))
(assert (not (= (x26 x19 x309) 826074471)))
(assert (not (= (x26 x169 3) (x26 x41 1))))
(assert (not (= 117300739 (x26 x89 x162))))
(assert (= (or x265 x69) x268))
(assert (x321 x205))
(assert (not (= 170435703 (x26 x19 x309))))
(assert (x66 x85))
(assert (=> (= (x26 x19 x309) (x26 x83 4)) (and (= x309 4) (= x19 x83))))
(assert (x66 x238))
(assert (not (= 599290589 (x26 x94 1))))
(assert (=> (= (x26 x89 x162) (x26 x301 3)) (and (= x301 x89) (= x162 3))))
(assert (not (= (x26 x19 1) (x26 x301 3))))
(assert (not (= (x26 x169 3) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (not (= 826074471 (x26 x83 4))))
(assert (x66 x50))
(assert (x66 x41))
(assert (not (= 2514000705 (x26 x83 4))))
(assert (x66 x70))
(assert (=> (<= x19 10000) (not (= (x26 x94 2) x19))))
(assert (not (= 826074471 (x26 x94 2))))
(assert (not (= 1851080549 (x26 x19 x309))))
(assert (not (= (x26 x301 3) 404098525)))
(assert (=> (>= 10000 x83) (not (= (x26 x94 2) x83))))
(assert (=> (<= x94 10000) (not (= (x26 x301 3) x94))))
(assert (not (= (x26 x41 1) 1)))
(assert (x66 x170))
(assert (x278 x55))
(assert (not (= 3026235284 (x26 x83 4))))
(assert (x66 x134))
(assert (= (and x318 x172) x69))
(assert (= (and (not x333) x340) x195))
(assert (=> (>= 10000 x19) (not (= x19 (x26 x83 4)))))
(assert (x291 1461501637330902918203684832716283019655932542976))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x26 x169 3))))
(assert (x278 x173))
(assert (=> (<= x83 10000) (not (= (x26 x41 1) x83))))
(assert (not (= 826074471 (x26 x41 1))))
(assert (=> (= (x26 x169 3) (x26 x301 3)) (= x301 x169)))
(assert (not (= 1851080549 (x26 x89 x162))))
(assert (not (= (x26 x301 3) 330252341)))
(assert (not (= (x26 x19 x309) 157198259)))
(assert (not (= 404098525 (x26 x94 2))))
(assert (not (= (x26 x83 4) 4)))
(assert (=> (<= x301 10000) (not (= x301 (x26 x19 1)))))
(assert (= x71 (and x333 x340)))
(assert (x20 x41))
(assert (x178 x327))
(assert (x222 x171))
(assert (= x60 (and x10 x112)))
(assert (=> (>= 10000 x239) (not (= x239 (x26 x19 1)))))
(assert (=> (>= 10000 x94) (not (= (x26 x94 2) x94))))
(assert (x66 x279))
(assert (x66 x59))
(assert (not (= (x26 x94 2) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (and x268 (not x249)) x127))
(assert (= (=> (and (and (and (= 1889567281 x187) (< 0 x331) (= x243 (x26 x19 1)) (not (= 826074471 x187)) (= x279 x253) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x328) (<= x19 1461501637330902918203684832716283019655932542975) (not (> 826074471 x187)) (= (x75 x243) x328) (= x139 x328) (>= x328 0) (= x331 (x168 x315))) (and (= x339 x100) (= x11 (>= x100 x255)) (= x339 x139) (= x185 x255))) (and (= x13 (ite (> x140 31) 1 0)) (> x283 0) (= x253 x131) (= (x344 x173 x216) x248) (= (ite (= 0 x140) 1 0) x216) (= (x64 x248 x205) x283) (= x173 (x64 x77 x13)) (= (ite (= 1 x169) 1 0) x77))) x11) x337))
(assert (x53 x248 x205))
(assert (not (= (x26 x94 2) (x26 x301 3))))
(assert (x66 x237))
(assert (x335 x102 x343 x327 x310))
(assert (not (= (x26 x83 4) 330252341)))
(assert (= x65 (or x71 x195)))
(assert (not (= (x26 x169 3) 330252341)))
(assert (not (= 4 (x26 x89 x162))))
(assert (not (= (x26 x19 1) 1289409798)))
(assert (= (=> (and (= x140 x1) (= 0 x205)) x258) x184))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x26 x239 1))))
(assert (x278 x70))
(assert (not (= (x26 x94 1) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (<= x83 10000) (not (= x83 (x26 x239 1)))))
(assert (x66 x137))
(assert (x178 x343))
(assert (x66 x1))
(assert (= (and x257 (not x133)) x154))
(assert (x178 (- x343 x327)))
(assert (not (= (x26 x169 3) 3017275065)))
(assert (not (= 3017275065 (x26 x301 3))))
(assert (=> (>= 10000 x239) (not (= (x26 x169 3) x239))))
(assert (x222 x343))
(assert (=> (>= 10000 x301) (not (= (x26 x41 1) x301))))
(assert (not (= (x26 x94 2) (x26 x19 1))))
(assert (not (= (x26 x94 2) 3026235284)))
(assert (not (= (x26 x169 3) 157198259)))
(assert (x66 x239))
(assert (=> (<= x83 10000) (not (= x83 (x26 x301 3)))))
(assert (x228 x327 x310))
(assert (not (= (x26 x83 4) (x26 x169 3))))
(assert (=> (>= 10000 x89) (not (= x89 (x26 x41 1)))))
(assert (=> (>= 10000 x19) (not (= (x26 x239 1) x19))))
(assert (=> (<= x94 10000) (not (= x94 (x26 x83 4)))))
(assert (not (= (x26 x301 3) 3121116754)))
(assert (not (= 2 (x26 x19 x309))))
(assert (not (= (x26 x301 3) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 404098525 (x26 x41 1))))
(assert (x66 x215))
(assert (x66 x23))
(assert (= (and x138 (not x117)) x274))
(assert (x66 x248))
(assert (x66 x266))
(assert (x321 x267))
(assert (not (= (x26 x94 2) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (x26 x19 x309) 599290589)))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x301 3))))
(assert (x66 x28))
(assert (x228 x343 x102))
(assert (not (= (x26 x239 1) 599290589)))
(assert (not (= (x26 x19 x309) 4)))
(assert (=> (<= x94 10000) (not (= (x26 x89 x162) x94))))
(assert (not (= 170435703 (x26 x169 3))))
(assert (= (and (not x10) x112) x135))
(assert (not (= 3 (x26 x239 1))))
(assert (not (= (x26 x19 x309) 1289409798)))
(assert (not (= (x26 x41 1) (x26 x301 3))))
(assert (= x58 (and x226 x313)))
(assert (x66 x144))
(assert (x178 (- x327 x343)))
(assert (x66 x27))
(assert (=> (>= 10000 x19) (not (= x19 (x26 x19 1)))))
(assert (x66 x206))
(assert (not (= (x26 x239 1) (x26 x83 4))))
(assert (x66 x38))
(assert (=> (>= 10000 x41) (not (= x41 (x26 x41 1)))))
(assert (x66 x341))
(assert (not (= (x26 x169 3) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x66 x132))
(assert (x66 x191))
(assert (not (= 826074471 (x26 x239 1))))
(assert (not (= (x26 x239 1) 1)))
(assert (not (= (x26 x19 1) 2)))
(assert (x335 x310 x327 x343 x102))
(assert (= x197 (or (and x249 x268) x42 x156 (and x95 (not x203)) (and x329 x336) (and x127 (not x196)) x346 (and x257 x133) (and x231 x57))))
(assert (not (= (x26 x94 2) (x26 x41 1))))
(assert (not (= 157198259 (x26 x19 1))))
(assert (x66 x116))
(assert (not (= (x26 x301 3) 1289409798)))
(assert (not (= (x26 x169 3) 3)))
(assert (x66 x54))
(assert (=> (= (x26 x19 x309) (x26 x239 1)) (and (= x239 x19) (= 1 x309))))
(assert (x66 x158))
(assert (x66 x109))
(assert (not (= 157198259 (x26 x89 x162))))
(assert (not (= 1289409798 (x26 x83 4))))
(assert (not (= (x26 x239 1) 157198259)))
(assert (not (= (x26 x239 1) 1289409798)))
(assert (=> (<= x89 10000) (not (= x89 (x26 x169 3)))))
(assert (=> (>= 10000 x315) (not (= x315 (x26 x169 3)))))
(assert (x66 x171))
(assert (=> (<= x315 10000) (not (= (x26 x83 4) x315))))
(assert (x66 x169))
(assert (=> (>= 10000 x83) (not (= x83 (x26 x94 1)))))
(assert (=> (= (x26 x89 x162) (x26 x41 1)) (and (= x41 x89) (= x162 1))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 x94 1))))
(assert (x66 x290))
(assert (x66 x300))
(assert (x20 x315))
(assert (not (= (x26 x94 1) 1461501637330902918203684832716283019655932542975)))
(assert (= x112 (and (not x46) x276)))
(assert (x66 x253))
(assert (not (= (x26 x19 x309) 1461501637330902918203684832716283019655932542975)))
(assert (= (=> (and (and (= x19 x251) (> x8 0) (= (x177 x19) x34) (= x24 (not (= x251 x62))) (not (= x85 330252341)) (= (x168 x19) x8) (>= 1461501637330902918203684832716283019655932542975 x290) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x102) x338 (<= x237 1461501637330902918203684832716283019655932542975) (> 2376452955 x85) (= (< 0 (x168 x315)) x338) (= x89 x238) (not (= x315 x19)) (<= 0 x102) x7 (> 826074471 x85) (not (> 170435703 x85)) (= x56 x190) (= x193 x290) (<= 0 x136) (= x85 404098525) (>= x290 0) (>= 1461501637330902918203684832716283019655932542975 x315) (<= x56 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x238) (> x315 0) (>= x238 0) (= x62 x89) (= x7 (not (= x114 x190))) (<= 0 x56) (>= 1461501637330902918203684832716283019655932542975 x61) (= (x177 x315) x136) (<= 0 x237) x14 (= x102 x319) (= x14 (> (x168 x19) 0)) (not (= x85 170435703)) (>= x61 0) (= x19 x114) (>= x34 0) x24 (<= x19 1461501637330902918203684832716283019655932542975) (> x19 0)) (and (and (<= x120 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x194 (x26 x19 1)) (<= 0 x120) (> x240 0) (= (x73 x194) x120) (>= 1461501637330902918203684832716283019655932542975 x19) (= 0 x287) (= x304 1889567281) (= (x168 x315) x240) (not (> 826074471 x304)) (= x319 x155) (not (= x304 826074471)) (= x120 x28) x272 (= (not (= 0 x155)) x272)) (and (and (not (> 1289409798 x250)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x102) (= (= 0 x102) x318) (= 1851080549 x250) (= x79 x165) (= x36 x150) (= x36 0) (not (= 1289409798 x250)) (>= x152 0) (not (< x250 826074471)) (<= 0 x79) (>= 1461501637330902918203684832716283019655932542975 x79) (= x343 x122) (= x297 x56) (= (x168 x19) x206) (>= 1461501637330902918203684832716283019655932542975 x297) (>= x241 0) (= x89 x241) (= x174 x165) (< 0 x206) (<= 0 x102) (= x28 x185) (< x250 2376452955) (>= 1461501637330902918203684832716283019655932542975 x152) (>= 1461501637330902918203684832716283019655932542975 x241)) (or (and (and (= x320 (= x225 x102)) (<= 0 x35) (> x96 0) (= x225 (x200 x171 x343)) (= (ite (or x320 x295) 1 0) x93) (<= x35 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x200 x171 x35) x182) (= (= 0 x35) x128) (= (ite (not x128) 1 0) x40) (= (x104 (x176 x343 x102)) x171) (= x229 x182) (= (= 0 x343) x295) (= x96 (x64 x40 x93))) (not x318)) (and (= x229 x343) x318))))) x212) x148))
(assert (x53 x77 x13))
(assert (not (= (x26 x94 2) 157198259)))
(assert (not (= (x26 x169 3) 2376452955)))
(assert (not (= 3121116754 (x26 x169 3))))
(assert (not (= 3026235284 (x26 x89 x162))))
(assert (not (= 170435703 (x26 x239 1))))
(assert (=> (>= 10000 x301) (not (= x301 (x26 x83 4)))))
(assert (=> (>= 10000 x41) (not (= x41 (x26 x94 2)))))
(assert (not (= (x26 x89 x162) 170435703)))
(assert (not (= 3017275065 (x26 x239 1))))
(assert (not (= (x26 x301 3) 3337024914)))
(assert (not (= 157198259 (x26 x41 1))))
(assert (not (= (x26 x169 3) (x26 x94 1))))
(assert (x66 x102))
(assert (not (= (x26 x169 3) 4)))
(assert (not (= 1851080549 (x26 x94 2))))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x239 1))))
(assert (= (and x209 (not x86)) x208))
(assert (x66 x216))
(assert (x66 x205))
(assert (=> (<= x94 10000) (not (= x94 (x26 x41 1)))))
(assert (not (= 2835717307 (x26 x41 1))))
(assert (= x82 (or x60 x135)))
(assert (not (= 1889567281 (x26 x94 2))))
(assert (x66 x17))
(assert (not (= (x26 x41 1) 170435703)))
(assert (x66 x98))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x317 (+ (x198 x317 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x200 x317 1461501637330902918203684832716283019655932542976))))) (x183 x317 1461501637330902918203684832716283019655932542976) (x49 x317 1461501637330902918203684832716283019655932542976) (x39 x317 1461501637330902918203684832716283019655932542976)))
(assert (not (= (x26 x94 1) 2)))
(assert (x66 x166))
(assert (=> (<= x89 10000) (not (= x89 (x26 x94 1)))))
(assert (= (and x138 x117) x323))
(assert (x63 x297))
(assert (x222 x327))
(assert (=> (>= 10000 x301) (not (= (x26 x94 2) x301))))
(assert (not (= (x26 x169 3) 2)))
(assert (x66 x120))
(assert (not (= 599290589 (x26 x41 1))))
(assert (not (= 117300739 (x26 x94 1))))
(assert (not (= (x26 x169 3) 1289409798)))
(assert (x66 x124))
(assert (not (= 4 (x26 x19 1))))
(assert (not (= 3337024914 (x26 x169 3))))
(assert (x66 x113))
(assert (= x42 (and x220 x130)))
(assert (=> (>= 10000 x169) (not (= x169 (x26 x83 4)))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x26 x19 1))))
(assert (x228 x343 (- x102 x327)))
(assert (x66 x267))
(assert (x66 x259))
(assert (=> (= (x26 x94 1) (x26 x89 x162)) (and (= x162 1) (= x94 x89))))
(assert (not (= 3 (x26 x83 4))))
(assert (x66 x218))
(assert (not (= (x26 x19 1) 599290589)))
(assert (not (= (x26 x301 3) 1461501637330902918203684832716283019655932542975)))
(assert (x178 (- x327 x102)))
(assert (x20 x83))
(assert (not (= (x26 x19 x309) 3)))
(assert (not (= (x26 x83 4) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x89 10000) (not (= (x26 x239 1) x89))))
(assert (=> (<= x169 10000) (not (= x169 (x26 x239 1)))))
(assert (x66 x56))
(assert (x66 x139))
(assert (x335 x327 x310 x343 x102))
(assert (=> (<= x301 10000) (not (= (x26 x301 3) x301))))
(assert (= x180 (and (not x57) x231)))
(assert (not (= 2 (x26 x83 4))))
(assert (=> (= (x26 x301 3) (x26 x19 x309)) (and (= x309 3) (= x301 x19))))
(assert (x66 x252))
(assert (x321 x297))
(assert (=> (>= 10000 x239) (not (= x239 (x26 x94 1)))))
(assert (x66 x288))
(assert (= (and x46 x276) x201))
(assert (not (= (x26 x89 x162) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (>= 10000 x239) (not (= (x26 x89 x162) x239))))
(assert (x66 x319))
(assert (not (= (x26 x239 1) 1889567281)))
(assert (=> (<= x41 10000) (not (= x41 (x26 x83 4)))))
(assert (not (= (x26 x94 1) 3121116754)))
(assert (not (= 1851080549 (x26 x239 1))))
(assert (not (= (x26 x169 3) 117300739)))
(assert (x143 x341 x144))
(assert (not (= 3121116754 (x26 x94 2))))
(assert (x228 x327 (- x310 x102)))
(assert (x321 x134))
(assert (not (= (x26 x301 3) 4)))
(assert (not (= (x26 x94 1) 330252341)))
(assert (x66 x283))
(assert (x66 x61))
(assert (x66 x34))
(assert (x66 x298))
(assert (x66 x3))
(assert (=> (>= 10000 x301) (not (= x301 (x26 x19 x309)))))
(assert (=> (>= 10000 x19) (not (= x19 (x26 x41 1)))))
(assert (x66 x19))
(assert (not (= (x26 x169 3) 826074471)))
(assert (=> (<= x41 10000) (not (= (x26 x89 x162) x41))))
(assert (not (= (x26 x301 3) 1851080549)))
(assert (not (= (x26 x19 1) 117300739)))
(assert (=> (= (x26 x94 2) (x26 x89 x162)) (and (= x94 x89) (= 2 x162))))
(assert (not (= (x26 x89 x162) 3121116754)))
(assert (x53 x40 x93))
(assert (not (= 1 (x26 x169 3))))
(assert (= x156 (and x299 x154)))
(assert (x66 x21))
(assert (= x209 (and x274 (not x76))))
(assert (= x138 (and x296 (not x16))))
(assert (x321 x334))
(assert (x291 x317))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x94 1))))
(assert (x178 x310))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 x239 1))))
(assert (= (and x101 x263) x296))
(assert (x63 x317))
(assert (not (= (x26 x94 2) 330252341)))
(assert (x66 x250))
(assert (= x118 (and (not x186) x180)))
(assert (x20 x309))
(assert (=> (>= 10000 x94) (not (= (x26 x94 1) x94))))
(assert (not (= (x26 x301 3) 826074471)))
(assert (not (= 4 (x26 x41 1))))
(assert (not (= (x26 x301 3) 3026235284)))
(assert (x66 x119))
(assert (x66 x2))
(assert (not (= (x26 x19 x309) 330252341)))
(assert (x66 x254))
(assert (not (= (x26 x19 1) 3)))
(assert (x66 x324))
(assert (= x159 (or (and x226 (not x313)) x58)))
(assert (x66 x92))
(assert (x20 x162))
(assert (x236 x173 x216))
(assert (x228 x343 (- x102 x310)))
(assert (not (= (x26 x94 2) 3337024914)))
(assert (not (= 2376452955 (x26 x89 x162))))
(assert (not (= (x26 x89 x162) 2514000705)))
(assert (= x332 (=> (and (or (and (= x327 x131) x333) (and (and (= x134 (ite (not x4) 1 0)) (= x131 x298) (= x115 (ite (or x74 x99) 1 0)) (<= 0 x310) (= x99 (= 0 x327)) (= (= x310 x108) x74) (= (x200 x341 x327) x108) (= (= 0 x144) x4) (<= x310 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x179) (= (x104 (x176 x327 x310)) x341) (= (x64 x134 x115) x179) (= x298 (x200 x341 x144))) (not x333))) (and (= x333 (= x144 0)) (<= 0 x144) (<= x144 115792089237316195423570985008687907853269984665640564039457584007913129639935))) x157)))
(assert (x66 x255))
(assert (x20 x19))
(assert (not (= (x26 x41 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 2376452955 (x26 x19 x309))))
(assert (not (= (x26 x94 2) 2376452955)))
(assert (not (= (x26 x89 x162) 599290589)))
(assert (= (=> (and (> x91 0) (= 128 x116) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54) (= (x168 x315) x91) (= x232 x131) (<= x144 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x305 (x26 x169 3)) (>= x144 0) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x164) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119) true) (< x119 64))) x47) (not (< x2 4)) (not (= x131 0)) (not (= x38 826074471)) (>= x54 0) (= (x64 1461501637330902918203684832716283019655932542975 x317) x169) (= (x223 (- x144 x327)) x123) (= (x161 x305) x54) (= (x223 (- x54 x327)) x254) (not (= x38 2514000705)) (>= x310 0) (not (= x38 1889567281)) (= 2835717307 x38) (not (< x38 826074471)) (= x239 x21) (= (x223 (- x310 x131)) x68) (= x119 (x223 (- x2 4))) (= x2 68) (not (< x310 x131)) (<= x310 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (> x327 x54))) (and (=> (and (and (= x101 (= x239 x21)) (= x239 x211)) (not x47)) (and (=> (and (and (= x175 x232) (= x16 (< x45 x131)) (= x260 (x26 x19 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) (>= x45 0) (= (x262 x260) x45)) x101) (and (=> x16 x184) (=> (and (not x16) (= (> x232 x45) x117)) (and (=> (and (not x117) (and (= (x26 x239 1) x48) (= x12 (x247 x48)) (= x246 (x223 (- x45 x232))) (= (x223 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x232)) x153) (= (> x12 x153) x76) (<= x12 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x26 x19 1) x43) (<= 0 x12))) (and (=> x76 x184) (=> (and (and (= (< x210 x12) x86) (= x210 (x25 (+ x232 x12)))) (not x76)) (and (=> x86 x184) (=> (and (and (= (x26 x239 1) x270) (= 1 x205) (= 32 x140)) (not x86)) x258))))) (=> x117 x184))))) (=> (not x101) x184))) (=> (and x47 (and (= x1 x140) (= x205 0))) x258))) x157))
(assert (not (= 157198259 (x26 x94 1))))
(assert (=> (>= 10000 x315) (not (= (x26 x41 1) x315))))
(assert (not (= (x26 x41 1) 330252341)))
(assert (x66 x5))
(assert (not (= (x26 x41 1) 117300739)))
(assert (x66 x190))
(assert (=> (>= 10000 x41) (not (= x41 (x26 x239 1)))))
(assert (x228 x310 (- x327 x343)))
(assert (x66 x78))
(assert (not (= (x26 x83 4) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 3337024914 (x26 x41 1))))
(assert (x222 x341))
(assert (x66 x152))
(assert (x66 x240))
(assert (and (= (x176 9 3) 27) (= 81 (x176 9 9)) (= (x176 3 3) 9) (= (x176 27 3) 81)))
(assert (not (= 2376452955 (x26 x41 1))))
(assert (=> (= (x26 x89 x162) (x26 x19 1)) (and (= x162 1) (= x19 x89))))
(assert (x66 x251))
(assert (= x346 (and x186 x180)))
(assert (=> (<= x89 10000) (not (= (x26 x89 x162) x89))))
(assert (x66 x8))
(assert (not (= 3026235284 (x26 x94 1))))
(assert (not (= 1889567281 (x26 x169 3))))
(assert (= x263 (and x65 (not x47))))
(assert (x66 x264))
(assert (=> (= (x26 x89 x162) (x26 x239 1)) (and (= x162 1) (= x89 x239))))
(assert (not (= (x26 x83 4) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= 3017275065 (x26 x19 1))))
(assert (x66 x36))
(assert (x66 x343))
(assert (x66 x325))
(assert (=> (>= 10000 x301) (not (= (x26 x239 1) x301))))
(assert (x66 x310))
(assert (not (= (x26 x239 1) 3337024914)))
(assert (not x148))
(assert (x321 x93))
(assert (=> (<= x315 10000) (not (= (x26 x239 1) x315))))
(assert (not (= 2514000705 (x26 x169 3))))
(assert (= x219 x332))
(assert (not (= (x26 x89 x162) 1289409798)))
(assert (x178 (- x343 x310)))
(assert (not (= (x26 x239 1) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x26 x41 1) 1889567281)))
(assert (x143 x171 x343))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x297 (+ (x198 x297 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x200 x297 1461501637330902918203684832716283019655932542976))))) (x183 x297 1461501637330902918203684832716283019655932542976) (x49 x297 1461501637330902918203684832716283019655932542976) (x39 x297 1461501637330902918203684832716283019655932542976)))
(assert (not (= 2514000705 (x26 x94 2))))
(assert (x321 x317))
(assert (x291 x297))
(assert (x66 x211))
(assert (not (= (x26 x89 x162) 826074471)))
(assert (x66 x315))
(assert (=> (= (x26 x83 4) (x26 x89 x162)) (and (= x89 x83) (= x162 4))))
(assert (not (= 1851080549 (x26 x169 3))))
(assert (not (= 599290589 (x26 x94 2))))
(assert (not (= (x26 x239 1) 330252341)))
(assert (x281 x327 x310 x343 x102))
(assert (x335 x310 x327 x102 x343))
(assert (not (= (x26 x301 3) 599290589)))
(assert (=> (>= 10000 x89) (not (= (x26 x83 4) x89))))
(assert (x66 x149))
(assert (x321 x308))
(assert (x66 x13))
(assert (x178 (- x310 x343)))
(assert (= x30 (or (and x263 (not x101)) (and x86 x209) (and x16 x296) x307 x323)))
(assert (x66 x334))
(assert (x66 x308))
(assert (not (= 1 (x26 x94 2))))
(assert (x321 x77))
(assert (not (= 3337024914 (x26 x89 x162))))
(assert (not (= 2835717307 (x26 x19 1))))
(assert (x66 x115))
(assert (x222 x35))
(assert (x66 x241))
(assert (not (= 2514000705 (x26 x19 x309))))
(assert (x66 x31))
(assert (not (= 3 (x26 x41 1))))
(assert (not (= 2 (x26 x301 3))))
(assert (x66 x12))
(assert (not (= 3017275065 (x26 x94 1))))
(assert (not (= 2514000705 (x26 x19 1))))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x41 1))))
(assert (=> (>= 10000 x83) (not (= (x26 x19 1) x83))))
(assert (x66 x297))
(assert (not (= (x26 x19 x309) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x321 x40))
(assert (not (= (x26 x94 2) (x26 x83 4))))
(assert (not (= 1889567281 (x26 x83 4))))
(assert (x66 x174))
(assert (= x307 (and x274 x76)))
(assert (not (= (x26 x94 1) 404098525)))
(assert (not (= (x26 x94 2) 2835717307)))
(assert (x66 x100))
(assert (x228 x310 (- x327 x102)))
(assert (=> (>= 10000 x19) (not (= (x26 x94 1) x19))))
(assert (not (= 2 (x26 x94 2))))
(assert (x66 x234))
(assert (not (= (x26 x19 1) 404098525)))
(assert (x66 x210))
(assert (x66 x40))
(assert (not (= (x26 x94 2) 3017275065)))
(assert (x66 x301))
(assert (not (= (x26 x41 1) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (= (x26 x41 1) (x26 x19 1)) (= x19 x41)))
(assert (not (= 2835717307 (x26 x83 4))))
(assert (=> (>= 10000 x239) (not (= (x26 x19 x309) x239))))
(assert (=> (= (x26 x239 1) (x26 x19 1)) (= x239 x19)))
(assert (x281 x343 x102 x327 x310))
(assert (x335 x102 x343 x310 x327))
(assert (x66 x221))
(assert (not (= 3337024914 (x26 x19 1))))
(assert (not (= (x26 x19 x309) 3121116754)))
(assert (not (= (x26 x83 4) 3121116754)))
(assert (x66 x189))
(assert (=> (<= x41 10000) (not (= x41 (x26 x94 1)))))
(assert (=> (<= x83 10000) (not (= (x26 x83 4) x83))))
(assert (=> (<= x94 10000) (not (= (x26 x239 1) x94))))
(assert (not (= 2835717307 (x26 x239 1))))
(assert (x143 x341 x327))
(assert (not (= (x26 x239 1) 2514000705)))
(assert (not (= 2 (x26 x41 1))))
(assert (not (= 404098525 (x26 x89 x162))))
(assert (=> (>= 10000 x169) (not (= (x26 x41 1) x169))))
(assert (not (= (x26 x83 4) 117300739)))
(assert (x66 x242))
(assert (= x329 (and (not x220) x130)))
(assert (=> (<= x169 10000) (not (= (x26 x19 1) x169))))
(assert (not (= (x26 x301 3) 1)))
(assert (not (= 2835717307 (x26 x89 x162))))
(assert (=> (>= 10000 x169) (not (= (x26 x94 1) x169))))
(assert (x281 x310 x327 x343 x102))
(assert (x228 x327 (- x310 x343)))
(assert (x321 x115))
(assert (=> (>= 10000 x89) (not (= x89 (x26 x301 3)))))
(assert (x53 x267 x334))
(assert (x20 x301))
(assert (x178 (- x102 x327)))
(assert (=> (>= 10000 x315) (not (= x315 (x26 x19 x309)))))
(assert (not (= 4 (x26 x94 2))))
(assert (=> (>= 10000 x19) (not (= (x26 x19 x309) x19))))
(assert (not (= (x26 x89 x162) 2)))
(assert (=> (<= x239 10000) (not (= x239 (x26 x83 4)))))
(assert (not (= 3121116754 (x26 x41 1))))
(assert (not (= 170435703 (x26 x94 2))))
(assert (not (= (x26 x94 2) 117300739)))
(assert (x66 x179))
(assert (x66 x123))
(assert (not (= 117300739 (x26 x19 x309))))
(assert (not (= 3121116754 (x26 x239 1))))
(assert (=> (= (x26 x19 x309) (x26 x41 1)) (and (= x41 x19) (= 1 x309))))
(assert (not (= 826074471 (x26 x94 1))))
(assert (not (= 4 (x26 x94 1))))
(assert (x66 x122))
(assert (x66 x131))
(assert (not (= (x26 x89 x162) 1889567281)))
(assert (not (= 2835717307 (x26 x94 1))))
(assert (=> (= (x26 x41 1) (x26 x239 1)) (= x41 x239)))
(assert (x20 x169))
(assert (=> (<= x89 10000) (not (= (x26 x94 2) x89))))
(assert (=> (>= 10000 x169) (not (= x169 (x26 x94 2)))))
(assert (= (or (and (not x103) x311) x235) x276))
(assert (not (= 1289409798 (x26 x94 2))))
(assert (x66 x339))
(assert (not (= (x26 x19 1) 170435703)))
(assert (=> (>= 10000 x301) (not (= x301 (x26 x89 x162)))))
(assert (not (= 3017275065 (x26 x19 x309))))
(assert (not (= (x26 x169 3) 3026235284)))
(assert (=> (>= 10000 x41) (not (= x41 (x26 x19 x309)))))
(assert (x66 x314))
(assert (not (= (x26 x94 1) 1289409798)))
(assert (not (= 3017275065 (x26 x41 1))))
(assert (= (and (not x318) x172) x265))
(assert (not (= (x26 x83 4) 599290589)))
(assert (not (= 2376452955 (x26 x239 1))))
(assert (not (= (x26 x94 1) 3)))
(assert (=> (<= x239 10000) (not (= x239 (x26 x239 1)))))
(assert (not (= (x26 x83 4) 3337024914)))
(assert (not (= 1851080549 (x26 x41 1))))
(assert (not (= (x26 x41 1) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x169) (not (= x169 (x26 x89 x162)))))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x26 x19 1))))
(assert (x66 x316))
(assert (x53 x166 x308))
(assert (=> (>= 10000 x83) (not (= (x26 x19 x309) x83))))
(assert (= (=> (and (= x313 (= 0 x205)) (or (not x313) x313)) x337) x258))
(assert (= (and x196 x127) x95))
(assert (not (= (x26 x83 4) (x26 x19 1))))
(assert (x228 x102 (- x343 x327)))
(assert (= (and x65 x47) x160))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 x89 x162))))
(assert (not (= (x26 x301 3) 2835717307)))
(assert (not (= 1889567281 (x26 x19 1))))
(assert (not (= (x26 x19 1) 1461501637330902918203684832716283019655932542975)))
(assert (x143 x171 x35))
(assert (x66 x287))
(assert (x20 x239))
(assert (x66 x229))
(assert (x66 x182))
(assert (not (= (x26 x94 1) 1851080549)))
(assert (= x6 (=> (and (and (= x230 (+ x229 x292)) (<= 0 x221) (= x301 (x64 1461501637330902918203684832716283019655932542975 x297)) (= (x64 x267 x334) x106) (= x144 x230) (< (+ x292 x229) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292) (< 0 x106) (= x166 (ite (= x124 1) 1 0)) (= (x344 x55 x70) x267) (= x191 x230) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x221) (= (x25 (+ x229 x221)) x27) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x3) (= (x26 x301 3) x67) (<= 0 x292) (= x310 x90) (= (ite (> x314 31) 1 0) x308) (= x215 x229) (= x221 (x188 x67)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x343 x3)) (<= 0 x3) (= x90 x214) (= x55 (x64 x166 x308)) (= x70 (ite (= 0 x314) 1 0)) (= x90 (+ x3 x343))) (and (= x149 x317) (= x31 x327) (not (> 3017275065 x300)) (= x170 (x168 x19)) (= x142 x132) (<= x142 1461501637330902918203684832716283019655932542975) (<= 0 x142) (= x56 x21) (not (= x300 3017275065)) (= x317 x98) (= (= x89 x317) x46) (<= x21 1461501637330902918203684832716283019655932542975) (not (< x300 2376452955)) (< x300 3337024914) (>= 1461501637330902918203684832716283019655932542975 x242) (= x237 x149) (< 0 x170) (= x288 x89) (not (= x300 3026235284)) (= x215 x31) (= x132 x174) (= 0 x324) (<= 0 x288) (>= 1461501637330902918203684832716283019655932542975 x288) (= x300 3121116754) (>= 1461501637330902918203684832716283019655932542975 x317) (>= x242 0) (= x150 x324))) (and (=> x46 x332) (=> (and (not x46) (and (and (<= 0 x113) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113) (= x83 (x64 1461501637330902918203684832716283019655932542975 x317)) (= x162 (x26 x83 4)) (= x256 (x26 x89 x162)) (= x10 (= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x345 x256) x113)) (or (and (not x10) (and (not (< x113 x327)) (= (x223 (- x113 x327)) x271) (= (x64 1461501637330902918203684832716283019655932542975 x317) x189))) x10))) x219)))))
(assert (=> (<= x41 10000) (not (= (x26 x169 3) x41))))
(assert (not (= (x26 x83 4) 1851080549)))
(assert (not (= 3 (x26 x301 3))))
(assert (= (=> (and (or (not x103) x103) (= (= x334 0) x103)) x6) x273))
(assert (not (= (x26 x239 1) (x26 x301 3))))
(assert (=> (>= 10000 x315) (not (= x315 (x26 x94 2)))))
(assert (not (= (x26 x19 x309) 1889567281)))
(check-sat)
(exit)
