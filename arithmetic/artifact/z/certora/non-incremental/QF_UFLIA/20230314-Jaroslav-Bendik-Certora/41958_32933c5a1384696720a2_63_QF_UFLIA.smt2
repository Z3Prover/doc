(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x336 () Bool)
(declare-fun x387 () Bool)
(declare-fun x29 () Int)
(declare-fun x161 () Int)
(declare-fun x380 () Int)
(declare-fun x388 () Int)
(declare-fun x229 () Int)
(declare-fun x36 () Bool)
(declare-fun x88 () Int)
(declare-fun x303 () Bool)
(declare-fun x338 () Int)
(declare-fun x293 () Bool)
(declare-fun x216 () Int)
(declare-fun x364 () Int)
(declare-fun x349 () Bool)
(declare-fun x366 () Bool)
(declare-fun x288 () Bool)
(declare-fun x190 () Int)
(declare-fun x321 () Int)
(declare-fun x256 () Int)
(declare-fun x413 () Int)
(declare-fun x319 () Bool)
(declare-fun x285 () Int)
(declare-fun x226 () Int)
(declare-fun x334 () Int)
(declare-fun x117 () Bool)
(declare-fun x97 () Int)
(declare-fun x89 () Bool)
(declare-fun x341 () Int)
(declare-fun x384 () Bool)
(declare-fun x407 () Int)
(declare-fun x93 () Bool)
(declare-fun x323 () Bool)
(declare-fun x43 () Int)
(declare-fun x257 () Bool)
(declare-fun x145 () Bool)
(declare-fun x202 () Int)
(declare-fun x51 () Bool)
(declare-fun x125 () Bool)
(declare-fun x307 () Bool)
(declare-fun x195 () Bool)
(declare-fun x34 () Int)
(declare-fun x48 () Int)
(declare-fun x47 () Bool)
(declare-fun x267 () Bool)
(declare-fun x355 () Bool)
(declare-fun x32 () Bool)
(declare-fun x274 () Int)
(declare-fun x220 () Int)
(declare-fun x168 () Int)
(declare-fun x11 () Int)
(declare-fun x10 () Bool)
(declare-fun x373 () Int)
(declare-fun x176 () Int)
(declare-fun x378 () Bool)
(declare-fun x396 () Int)
(declare-fun x26 () Int)
(declare-fun x305 () Int)
(declare-fun x372 () Bool)
(declare-fun x135 () Bool)
(declare-fun x3 () Bool)
(declare-fun x159 () Int)
(declare-fun x297 () Bool)
(declare-fun x163 () Int)
(declare-fun x58 () Int)
(declare-fun x27 () Int)
(declare-fun x57 () Bool)
(declare-fun x196 () Bool)
(declare-fun x14 () Int)
(declare-fun x66 () Int)
(declare-fun x92 () Int)
(declare-fun x292 () Int)
(declare-fun x128 () Bool)
(declare-fun x178 () Int)
(declare-fun x54 () Int)
(declare-fun x25 () Int)
(declare-fun x381 () Int)
(declare-fun x185 () Bool)
(declare-fun x335 () Int)
(declare-fun x152 () Int)
(declare-fun x249 () Int)
(declare-fun x141 () Int)
(declare-fun x155 () Int)
(declare-fun x180 () Int)
(declare-fun x33 () Bool)
(declare-fun x67 () Bool)
(declare-fun x31 () Int)
(declare-fun x6 () Int)
(declare-fun x386 () Bool)
(declare-fun x200 () Int)
(declare-fun x37 () Bool)
(declare-fun x116 () Bool)
(declare-fun x171 () Bool)
(declare-fun x162 () Bool)
(declare-fun x20 () Bool)
(declare-fun x165 () Int)
(declare-fun x211 () Bool)
(declare-fun x213 () Bool)
(declare-fun x154 () Bool)
(declare-fun x45 () Bool)
(declare-fun x107 () Int)
(declare-fun x339 () Bool)
(declare-fun x262 () Int)
(declare-fun x197 () Bool)
(declare-fun x351 () Bool)
(declare-fun x218 () Bool)
(declare-fun x385 () Int)
(declare-fun x350 () Bool)
(declare-fun x204 () Int)
(declare-fun x156 () Bool)
(declare-fun x273 () Bool)
(declare-fun x175 () Bool)
(declare-fun x130 () Int)
(declare-fun x212 () Int)
(declare-fun x203 () Int)
(declare-fun x201 () Bool)
(declare-fun x403 () Int)
(declare-fun x415 () Bool)
(declare-fun x61 () Bool)
(declare-fun x263 () Bool)
(declare-fun x90 () Bool)
(declare-fun x360 () Bool)
(declare-fun x105 () Int)
(declare-fun x245 () Int)
(declare-fun x15 () Bool)
(declare-fun x153 () Int)
(declare-fun x291 () Int)
(declare-fun x397 () Int)
(declare-fun x278 () Int)
(declare-fun x63 () Bool)
(declare-fun x270 () Bool)
(declare-fun x271 () Int)
(declare-fun x283 () Bool)
(declare-fun x389 () Bool)
(declare-fun x46 () Int)
(declare-fun x266 () Int)
(declare-fun x374 () Int)
(declare-fun x84 () Int)
(declare-fun x414 () Bool)
(declare-fun x244 () Int)
(declare-fun x42 () Int)
(declare-fun x106 () Bool)
(declare-fun x133 () Int)
(declare-fun x177 () Bool)
(declare-fun x332 () Int)
(declare-fun x205 () Int)
(declare-fun x140 () Int)
(declare-fun x113 () Int)
(declare-fun x187 () Bool)
(declare-fun x207 () Bool)
(declare-fun x172 () Int)
(declare-fun x258 () Bool)
(declare-fun x71 () Int)
(declare-fun x127 () Int)
(declare-fun x73 () Bool)
(declare-fun x53 () Int)
(declare-fun x137 () Int)
(declare-fun x119 () Int)
(declare-fun x361 () Int)
(declare-fun x144 () Int)
(declare-fun x311 () Int)
(declare-fun x112 () Int)
(declare-fun x148 () Int)
(declare-fun x147 (Int Int) Int)
(declare-fun x404 () Bool)
(declare-fun x375 () Int)
(declare-fun x35 () Bool)
(declare-fun x239 () Int)
(declare-fun x306 () Int)
(declare-fun x1 () Bool)
(declare-fun x221 () Bool)
(declare-fun x228 () Int)
(declare-fun x138 () Bool)
(declare-fun x344 () Bool)
(declare-fun x337 () Bool)
(declare-fun x214 () Int)
(declare-fun x222 () Bool)
(declare-fun x167 () Int)
(declare-fun x394 () Bool)
(declare-fun x41 () Int)
(declare-fun x325 () Int)
(declare-fun x324 () Bool)
(declare-fun x320 () Int)
(declare-fun x359 () Bool)
(declare-fun x416 () Bool)
(declare-fun x101 () Int)
(declare-fun x333 () Bool)
(declare-fun x16 () Int)
(declare-fun x96 () Int)
(declare-fun x340 () Int)
(declare-fun x217 () Int)
(declare-fun x158 () Bool)
(declare-fun x181 () Bool)
(declare-fun x253 () Int)
(declare-fun x225 () Bool)
(declare-fun x327 () Int)
(declare-fun x365 () Bool)
(declare-fun x166 () Bool)
(declare-fun x269 (Int Int) Int)
(declare-fun x317 () Bool)
(declare-fun x295 () Int)
(declare-fun x215 () Int)
(declare-fun x191 () Bool)
(declare-fun x280 () Bool)
(declare-fun x252 () Bool)
(declare-fun x77 () Int)
(declare-fun x173 () Bool)
(declare-fun x19 () Bool)
(declare-fun x169 () Int)
(declare-fun x188 () Bool)
(declare-fun x132 (Int Int) Int)
(declare-fun x376 () Bool)
(declare-fun x233 () Int)
(declare-fun x304 () Bool)
(declare-fun x289 () Int)
(declare-fun x143 () Bool)
(declare-fun x115 () Int)
(declare-fun x23 () Bool)
(declare-fun x367 () Bool)
(declare-fun x56 () Int)
(declare-fun x400 () Int)
(declare-fun x243 () Int)
(declare-fun x401 () Int)
(declare-fun x296 () Int)
(declare-fun x410 () Int)
(declare-fun x369 () Bool)
(declare-fun x357 () Int)
(declare-fun x370 () Int)
(declare-fun x399 () Bool)
(declare-fun x91 () Int)
(declare-fun x227 () Bool)
(declare-fun x246 () Int)
(declare-fun x75 () Bool)
(declare-fun x7 () Bool)
(declare-fun x99 () Bool)
(declare-fun x118 () Int)
(declare-fun x193 () Bool)
(declare-fun x281 () Bool)
(declare-fun x74 () Bool)
(declare-fun x186 () Int)
(declare-fun x276 () Bool)
(declare-fun x330 () Int)
(declare-fun x81 () Bool)
(declare-fun x313 () Bool)
(declare-fun x94 () Int)
(declare-fun x209 () Bool)
(declare-fun x356 () Bool)
(declare-fun x219 () Bool)
(declare-fun x277 () Bool)
(declare-fun x102 () Int)
(declare-fun x87 () Bool)
(declare-fun x65 () Int)
(declare-fun x40 () Int)
(declare-fun x409 () Int)
(declare-fun x206 () Bool)
(declare-fun x322 () Int)
(declare-fun x314 () Int)
(declare-fun x371 () Bool)
(declare-fun x251 () Bool)
(declare-fun x343 () Int)
(declare-fun x345 () Bool)
(declare-fun x402 () Bool)
(declare-fun x353 () Bool)
(declare-fun x406 () Bool)
(declare-fun x331 () Int)
(declare-fun x50 () Bool)
(declare-fun x5 () Int)
(declare-fun x208 () Bool)
(declare-fun x160 () Int)
(declare-fun x240 () Int)
(declare-fun x198 () Bool)
(declare-fun x260 () Bool)
(declare-fun x408 () Int)
(declare-fun x60 (Int) Int)
(declare-fun x363 () Bool)
(declare-fun x184 () Int)
(declare-fun x30 () Bool)
(declare-fun x126 (Int Int) Int)
(declare-fun x64 () Bool)
(declare-fun x17 () Int)
(declare-fun x183 () Bool)
(declare-fun x150 () Bool)
(declare-fun x346 () Bool)
(declare-fun x210 () Int)
(declare-fun x383 () Int)
(declare-fun x272 () Bool)
(declare-fun x235 () Int)
(declare-fun x224 () Int)
(declare-fun x264 (Int) Int)
(declare-fun x111 () Int)
(declare-fun x80 () Int)
(declare-fun x122 () Bool)
(declare-fun x164 () Int)
(declare-fun x308 () Int)
(declare-fun x318 () Bool)
(declare-fun x59 () Bool)
(declare-fun x129 () Bool)
(declare-fun x223 () Bool)
(declare-fun x411 () Int)
(declare-fun x300 () Bool)
(declare-fun x62 () Int)
(declare-fun x82 () Int)
(declare-fun x247 () Int)
(declare-fun x69 () Int)
(declare-fun x261 () Int)
(declare-fun x241 () Bool)
(declare-fun x79 () Bool)
(declare-fun x362 () Bool)
(declare-fun x412 () Int)
(declare-fun x231 () Int)
(declare-fun x390 () Bool)
(declare-fun x139 () Bool)
(declare-fun x348 () Int)
(declare-fun x282 () Int)
(declare-fun x310 () Int)
(declare-fun x254 () Bool)
(declare-fun x21 () Bool)
(declare-fun x72 () Bool)
(declare-fun x170 () Bool)
(declare-fun x358 () Int)
(declare-fun x248 () Bool)
(declare-fun x199 () Int)
(declare-fun x395 () Int)
(declare-fun x347 (Int) Int)
(declare-fun x13 () Int)
(declare-fun x49 () Bool)
(declare-fun x232 () Bool)
(declare-fun x95 () Int)
(declare-fun x149 () Int)
(declare-fun x265 () Int)
(declare-fun x315 () Int)
(declare-fun x120 () Int)
(declare-fun x157 () Int)
(declare-fun x312 () Int)
(declare-fun x354 () Int)
(declare-fun x86 () Int)
(declare-fun x236 () Bool)
(declare-fun x83 () Bool)
(declare-fun x294 () Int)
(declare-fun x238 () Bool)
(declare-fun x329 () Int)
(declare-fun x302 (Int Int) Int)
(declare-fun x174 () Bool)
(declare-fun x286 () Int)
(declare-fun x179 () Bool)
(declare-fun x78 () Bool)
(declare-fun x70 () Int)
(declare-fun x259 () Bool)
(declare-fun x279 () Int)
(declare-fun x194 () Int)
(declare-fun x275 () Int)
(declare-fun x4 () Int)
(declare-fun x230 () Bool)
(declare-fun x255 () Bool)
(declare-fun x352 () Int)
(declare-fun x377 () Bool)
(declare-fun x121 () Int)
(declare-fun x103 () Int)
(declare-fun x379 () Bool)
(declare-fun x250 () Bool)
(declare-fun x182 () Bool)
(declare-fun x299 () Int)
(declare-fun x393 () Bool)
(declare-fun x326 () Bool)
(declare-fun x39 () Int)
(declare-fun x142 () Int)
(declare-fun x189 () Int)
(declare-fun x268 () Int)
(declare-fun x114 () Bool)
(declare-fun x28 () Int)
(declare-fun x131 () Bool)
(declare-fun x68 () Bool)
(declare-fun x342 () Int)
(declare-fun x85 () Bool)
(declare-fun x104 () Int)
(declare-fun x18 () Bool)
(define-fun x12 ((x328 Int)) Int (ite (and (>= x328 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x328)) x328 (- x328 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x237 ((x328 Int)) Int (ite (and (> 0 x328) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x328)) (+ x328 115792089237316195423570985008687907853269984665640564039457584007913129639936) x328))
(define-fun x108 ((x328 Int)) Int (ite (and (< x328 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x328 0)) x328 (ite (and (< x328 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x328 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x328 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x328 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x328)) (+ x328 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x269 x328 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x287 ((x52 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x52) (<= 0 x52)))
(define-fun x134 ((x52 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x52) (>= x52 0)))
(define-fun x44 ((x52 Int) (x368 Int)) Bool (= (x132 x368 x52) (x132 x52 x368)))
(define-fun x100 ((x52 Int) (x368 Int)) Bool (and (=> (and (> x52 0) (< 0 x368)) (< 0 (x132 x52 x368))) (=> (and (< x52 0) (> 0 x368)) (> (x132 x52 x368) 0)) (=> (and (> x368 0) (> 0 x52)) (< (x132 x52 x368) 0)) (=> (and (< 0 x52) (< x368 0)) (> 0 (x132 x52 x368)))))
(define-fun x136 ((x52 Int) (x368 Int)) Bool (=> (and (> x52 0) (< 0 x368)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x132 x52 x368)) (= x368 (x147 (x108 (x132 x52 x368)) x52)))))
(define-fun x398 ((x52 Int) (x368 Int)) Bool (=> (and (not (= 0 x52)) (not (= 0 x368))) (and (= x52 (x147 (x132 x52 x368) x368)) (= x368 (x147 (x132 x52 x368) x52)))))
(define-fun x405 ((x52 Int) (x368 Int)) Bool (=> (and (> x368 0) (< 0 x52)) (= (> x368 (x147 115792089237316195423570985008687907853269984665640564039457584007913129639935 x52)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x132 x52 x368)))))
(define-fun x234 ((x52 Int) (x368 Int)) Bool (and (= (x108 (x132 x52 x368)) (x108 (x132 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x368 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x108 (x132 x52 x368)) (x108 (x132 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) x368))) (= (x108 (x132 x52 (- x368 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x108 (x132 x52 x368)))))
(define-fun x284 ((x52 Int) (x368 Int)) Bool (and (=> (and (and (<= x368 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x368 0)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x52) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x52))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x52) (x147 57896044618658097711785492504343953926634992332820282019728792003956564819968 x368)) (>= (x132 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) x368) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x368) (> x368 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x52) (> x52 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x147 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x368)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x52)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x132 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x368 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x368) (< 0 x368)) (and (> x52 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x52))) (= (<= (x132 x52 x368) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x147 57896044618658097711785492504343953926634992332820282019728792003956564819967 x368) x52))) (=> (and (and (> x52 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x52)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x368) (> x368 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x368) (x147 57896044618658097711785492504343953926634992332820282019728792003956564819968 x52)) (>= (x132 x52 (- x368 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968))))))
(define-fun x151 ((x52 Int) (x368 Int)) Bool (and (x284 x52 x368) (x44 x52 x368) (x100 x52 x368) (x136 x52 x368) (x398 x52 x368) (x405 x52 x368) (x234 x52 x368)))
(define-fun x298 ((x52 Int)) Bool (and (= (x132 0 x52) 0) (= (x132 x52 0) 0)))
(define-fun x391 ((x52 Int)) Bool (and (= (x132 x52 1) x52) (= x52 (x132 1 x52))))
(define-fun x22 ((x52 Int)) Bool (and (x298 x52) (x391 x52)))
(define-fun x110 ((x52 Int) (x368 Int)) Bool (=> (and (< 0 x368) (> x52 0)) (and (>= (x147 x52 x368) 0) (>= x52 (x147 x52 x368)))))
(define-fun x109 ((x52 Int) (x368 Int)) Bool (=> (and (and (>= x52 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x52)) (and (>= x368 1) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x368))) (and (< (x147 x52 x368) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x147 x52 x368)))))
(define-fun x192 ((x52 Int) (x368 Int)) Bool (=> (and (< x368 x52) (> x368 1)) (< (x147 x52 x368) x52)))
(define-fun x76 ((x52 Int) (x368 Int)) Bool (=> (and (> x368 0) (> x52 0)) (= (= (x147 x52 x368) 0) (< x52 x368))))
(define-fun x8 ((x52 Int) (x368 Int)) Bool (=> (and (> x368 0) (< 0 x52)) (and (< (- x52 x368) (x132 (x147 x52 x368) x368)) (>= x52 (x132 (x147 x52 x368) x368)))))
(define-fun x98 ((x52 Int) (x368 Int)) Bool (and (x76 x52 x368) (x109 x52 x368) (x110 x52 x368) (x192 x52 x368) (x8 x52 x368)))
(define-fun x2 ((x52 Int)) Bool (= 0 (x147 0 x52)))
(define-fun x316 ((x52 Int)) Bool (= x52 (x147 x52 1)))
(define-fun x38 ((x52 Int)) Bool (=> (not (= x52 0)) (= (x147 x52 x52) 1)))
(define-fun x382 ((x52 Int)) Bool (and (x316 x52) (x2 x52) (x38 x52)))
(define-fun x242 ((x52 Int) (x368 Int) (x9 Int) (x290 Int)) Bool (=> (and (>= x9 x52) (<= x368 x290) (>= x368 0) (<= 0 x52)) (>= (x132 x9 x290) (x132 x52 x368))))
(define-fun x24 ((x52 Int) (x368 Int) (x9 Int) (x290 Int)) Bool (=> (= x52 x9) (= (x132 x52 (- x368 x290)) (- (x132 x52 x368) (x132 x9 x290)))))
(assert (= (and x191 x195) x363))
(assert (and (x284 2 x388) (and (= (- (* x388 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x388)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x388)) (= (x132 2 (- x388 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x388 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x388 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 2 (- x388 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x388 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 2 x388) (x136 2 x388) (x398 2 x388) (x234 2 x388) (= (* x388 2) (x132 2 x388))))
(assert (x134 x240))
(assert (= (=> (and (and (= x374 x172) (= (x147 x305 500) x374) (= x174 x351)) (and (= x384 x125) (= x414 false) x384 (= x338 x305) (= x229 500))) x238) x353))
(assert (x22 x282))
(assert (x134 x331))
(assert (x134 x286))
(assert (x134 x364))
(assert (x134 x357))
(assert (and (x284 3 x361) (and (= (- (* x361 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x361)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x361)) (= (x132 3 (- x361 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x361 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x361 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x361 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x361 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 3 x361) (x136 3 x361) (x398 3 x361) (x234 3 x361) (= (* x361 3) (x132 3 x361))))
(assert (x134 x80))
(assert (x134 x231))
(assert (x134 x84))
(assert (and (x110 x152 2) (x109 x152 2) (x76 x152 2) (=> (and (> 2 0) (> x152 0)) (and (<= (* (x147 x152 2) 2) x152) (> (* 2 (x147 x152 2)) (- x152 2)))) (x192 x152 2) (= (- x152 (x302 1 x152)) (* 2 (x147 x152 2)))))
(assert (x134 x224))
(assert (x134 x299))
(assert (= x416 (and (not x317) x64)))
(assert (x382 x42))
(assert (x134 x210))
(assert (x22 10))
(assert (x22 x62))
(assert (x134 x410))
(assert (x22 x165))
(assert (x22 x6))
(assert (x134 x159))
(assert (and (x284 400 x168) (and (= (- (* x168 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x168)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x168)) (= (x132 400 (- x168 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 400 (- x168 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x168 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 400 (- x168 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x168 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 400 x168) (x136 400 x168) (x398 400 x168) (x234 400 x168) (= (* x168 400) (x132 400 x168))))
(assert (and (x284 10 x92) (and (= (- (* x92 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x92)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x92)) (= (x132 10 (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 10 (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 10 (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 10 x92) (x136 10 x92) (x398 10 x92) (x234 10 x92) (= (* x92 10) (x132 10 x92))))
(assert (= x404 (and (not x32) x182)))
(assert (x134 x148))
(assert (and (x284 2 x291) (and (= (- (* x291 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x291)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x291)) (= (x132 2 (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 2 (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 2 x291) (x136 2 x291) (x398 2 x291) (x234 2 x291) (= (* x291 2) (x132 2 x291))))
(assert (x134 x40))
(assert (x134 x322))
(assert (x134 x370))
(assert (x134 x34))
(assert (x134 x289))
(assert (x134 x5))
(assert (and (x110 x189 2) (x109 x189 2) (x76 x189 2) (=> (and (> 2 0) (> x189 0)) (and (<= (* (x147 x189 2) 2) x189) (> (* 2 (x147 x189 2)) (- x189 2)))) (x192 x189 2) (= (- x189 (x302 1 x189)) (* 2 (x147 x189 2)))))
(assert (and (x284 500 x115) (and (= (- (* x115 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x115)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x115)) (= (x132 500 (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 500 (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 500 (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 500 x115) (x136 500 x115) (x398 500 x115) (x234 500 x115) (= (* x115 500) (x132 500 x115))))
(assert (x22 3))
(assert (x134 x178))
(assert (= x79 (and (not x318) x259)))
(assert (x134 x56))
(assert (and (x284 400 x249) (and (= (- (* x249 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x249)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x249)) (= (x132 400 (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 400 (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 400 (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 400 x249) (x136 400 x249) (x398 400 x249) (x234 400 x249) (= (* x249 400) (x132 400 x249))))
(assert (x22 x101))
(assert (x134 x245))
(assert (= x344 (and (not x195) x191)))
(assert (x134 x332))
(assert (x22 x71))
(assert (= x179 (and x393 x125)))
(assert (= (and x218 (not x89)) x360))
(assert (and (x284 10 x140) (and (= (- (* x140 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x140)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x140)) (= (x132 10 (- x140 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 10 (- x140 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x140 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 10 (- x140 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x140 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 10 x140) (x136 10 x140) (x398 10 x140) (x234 10 x140) (= (* x140 10) (x132 10 x140))))
(assert (x382 10))
(assert (x382 2))
(assert (= x15 (and x272 x406)))
(assert (x134 x41))
(assert (x22 x388))
(assert (x22 500))
(assert (x134 x140))
(assert (and (= (x132 9 9) 81) (= 27 (x132 9 3)) (= 9 (x132 3 3)) (= 81 (x132 27 3))))
(assert (x22 x41))
(assert (x134 x291))
(assert (= x1 (and x45 x87)))
(assert (x22 x295))
(assert (x134 x217))
(assert (x134 x229))
(assert (= x201 (and x177 x33)))
(assert (x134 x381))
(assert (x134 x212))
(assert (x22 x348))
(assert (x134 x4))
(assert (x287 x231))
(assert (x134 x118))
(assert (x134 x92))
(assert (x134 x113))
(assert (x134 x274))
(assert (x134 x86))
(assert (x134 x354))
(assert (x134 x266))
(assert (x134 x46))
(assert (x134 x327))
(assert (x134 x373))
(assert (x134 x27))
(assert (= (and x72 x402) x181))
(assert (and (x76 x358 400) (x110 x358 400) (x192 x358 400) (x109 x358 400) (=> (and (> 400 0) (> x358 0)) (and (<= (* (x147 x358 400) 400) x358) (> (* 400 (x147 x358 400)) (- x358 400))))))
(assert (x134 x31))
(assert (= x218 (and (not x251) x372)))
(assert (x382 x343))
(assert (= (and (not x106) x416) x45))
(assert (= x20 (and x73 x3)))
(assert (x134 x180))
(assert (x134 x97))
(assert (x134 x53))
(assert (x134 x115))
(assert (x134 x111))
(assert (x151 x256 x334))
(assert (x382 500))
(assert (and (x76 x305 500) (x110 x305 500) (x192 x305 500) (x109 x305 500) (=> (and (> 500 0) (> x305 0)) (and (<= (* (x147 x305 500) 500) x305) (> (* 500 (x147 x305 500)) (- x305 500))))))
(assert (x134 x16))
(assert (x382 x199))
(assert (x134 x282))
(assert (= (and x304 x162) x166))
(assert (x134 x409))
(assert (= (=> (and (and (= x281 false) (= x107 2) (= x272 x254) (= x370 x152) x254) (and (= x174 x351) (= x172 x332) (= x332 (x147 x152 2)))) x238) x248))
(assert (and (x284 10 x165) (and (= (- (* x165 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x165)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x165)) (= (x132 10 (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 10 (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 10 (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 10 x165) (x136 10 x165) (x398 10 x165) (x234 10 x165) (= (* x165 10) (x132 10 x165))))
(assert (= x170 (and x64 x317)))
(assert (x134 x95))
(assert (x134 x306))
(assert (x22 x163))
(assert (x22 x176))
(assert (and (x284 10 x282) (and (= (- (* x282 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x282)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x282)) (= (x132 10 (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 10 (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 10 (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 10 x282) (x136 10 x282) (x398 10 x282) (x234 10 x282) (= (* x282 10) (x132 10 x282))))
(assert (x134 x265))
(assert (x134 x233))
(assert (= (=> (and (and x258 (= x336 x258) (= x196 false) (= 3 x327) (= x338 x289)) (and (= x351 x174) (= x172 x239) (= x239 (x147 x289 3)))) x238) x303))
(assert (and (x284 2 x6) (and (= (- (* x6 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x6)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x6)) (= (x132 2 (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 2 (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 2 x6) (x136 2 x6) (x398 2 x6) (x234 2 x6) (= (* x6 2) (x132 2 x6))))
(assert (x134 x400))
(assert (x134 x220))
(assert (x22 x168))
(assert (= (and (not x73) x3) x50))
(assert (x134 x200))
(assert (x134 x305))
(assert (x134 x352))
(assert (x134 x342))
(assert (and (x284 3 x95) (and (= (- (* x95 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x95)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x95)) (= (x132 3 (- x95 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x95 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x95 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x95 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x95 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 3 x95) (x136 3 x95) (x398 3 x95) (x234 3 x95) (= (* x95 3) (x132 3 x95))))
(assert (= (and x406 (not x272)) x182))
(assert (x134 x226))
(assert (x22 x256))
(assert (x382 x120))
(assert (x134 x144))
(assert (x134 x137))
(assert (= (and (not x336) x79) x3))
(assert (x134 x96))
(assert (x98 x411 x42))
(assert (x134 x199))
(assert (= x154 (and x404 (not x349))))
(assert (x134 x253))
(assert (and (x284 500 x348) (and (= (- (* x348 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x348)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x348)) (= (x132 500 (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 500 (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 500 (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 500 x348) (x136 500 x348) (x398 500 x348) (x234 500 x348) (= (* x348 500) (x132 500 x348))))
(assert (x134 x358))
(assert (x134 x13))
(assert (x134 x65))
(assert (= x280 (or x20 x7 x201 x355 x260 x288 x83 x1 x15 x363 x211 x319 x179 x252 x326 x360 x181 x166 x138 x273 x170 x193 x128 x175)))
(assert (= (=> (and (and (= x397 x113) (= x113 x266) x351 (= x113 x172)) (and (= x375 x266) (= x369 (= x277 x356)) (= x277 (= x310 x375)))) x369) x238))
(assert (x134 x256))
(assert (and (x76 x161 500) (x110 x161 500) (x192 x161 500) (x109 x161 500) (=> (and (> 500 0) (> x161 0)) (and (<= (* (x147 x161 500) 500) x161) (> (* 500 (x147 x161 500)) (- x161 500))))))
(assert (and (x76 x322 10) (x110 x322 10) (x192 x322 10) (x109 x322 10) (=> (and (> 10 0) (> x322 0)) (and (<= (* (x147 x322 10) 10) x322) (> (* 10 (x147 x322 10)) (- x322 10))))))
(assert (x22 x95))
(assert (x134 x348))
(assert (x134 x163))
(assert (x134 x216))
(assert (x134 x176))
(assert (and (x284 3 x40) (and (= (- (* x40 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x40)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x40)) (= (x132 3 (- x40 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x40 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x40 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x40 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x40 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 3 x40) (x136 3 x40) (x398 3 x40) (x234 3 x40) (= (* x40 3) (x132 3 x40))))
(assert (x134 x311))
(assert (x22 x56))
(assert (x22 x16))
(assert (and (x284 10 x228) (and (= (- (* x228 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x228)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x228)) (= (x132 10 (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 10 (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 10 (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 10 x228) (x136 10 x228) (x398 10 x228) (x234 10 x228) (= (* x228 10) (x132 10 x228))))
(assert (and (x76 x289 3) (x110 x289 3) (x192 x289 3) (x109 x289 3) (=> (and (> 3 0) (> x289 0)) (and (<= (* (x147 x289 3) 3) x289) (> (* 3 (x147 x289 3)) (- x289 3))))))
(assert (= (=> (and (and (= x188 false) (= x210 500) x23 (= x23 x222) (= x161 x370)) (and (= x240 (x147 x161 500)) (= x172 x240) (= x174 x351))) x238) x35))
(assert (x134 x186))
(assert (x134 x43))
(assert (x134 x396))
(assert (x134 x320))
(assert (x134 x401))
(assert (= x259 (and x154 (not x67))))
(assert (x134 x167))
(assert (x134 x127))
(assert (x22 x291))
(assert (and (x284 400 x16) (and (= (- (* x16 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x16)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x16)) (= (x132 400 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 400 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 400 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 400 x16) (x136 400 x16) (x398 400 x16) (x234 400 x16) (= (* x16 400) (x132 400 x16))))
(assert (x134 x119))
(assert (= x128 (and x213 x222)))
(assert (x134 x91))
(assert (x134 x215))
(assert (and (x284 2 x163) (and (= (- (* x163 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x163)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x163)) (= (x132 2 (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 2 (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 2 x163) (x136 2 x163) (x398 2 x163) (x234 2 x163) (= (* x163 2) (x132 2 x163))))
(assert (x151 x176 x54))
(assert (x134 x314))
(assert (x22 x364))
(assert (x134 x235))
(assert (= x49 true))
(assert (x134 x268))
(assert (x134 x28))
(assert (x382 x358))
(assert (x22 x92))
(assert (x22 x204))
(assert (and (x284 3 x101) (and (= (- (* x101 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x101)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x101)) (= (x132 3 (- x101 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x101 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x101 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x101 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x101 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 3 x101) (x136 3 x101) (x398 3 x101) (x234 3 x101) (= (* x101 3) (x132 3 x101))))
(assert (x134 x375))
(assert (= (and x32 x182) x175))
(assert (and (x284 400 x41) (and (= (- (* x41 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x41)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x41)) (= (x132 400 (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 400 (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 400 (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 400 x41) (x136 400 x41) (x398 400 x41) (x234 400 x41) (= (* x41 400) (x132 400 x41))))
(assert (= x372 (and (not x183) x344)))
(assert (and (x284 2 x31) (and (= (- (* x31 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x31)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x31)) (= (x132 2 (- x31 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x31 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x31 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 2 (- x31 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x31 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 2 x31) (x136 2 x31) (x398 2 x31) (x234 2 x31) (= (* x31 2) (x132 2 x31))))
(assert (x134 x407))
(assert (x134 x42))
(assert (= x83 (and x154 x67)))
(assert (x134 x101))
(assert (and (x284 500 x204) (and (= (- (* x204 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x204)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x204)) (= (x132 500 (- x204 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 500 (- x204 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x204 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 500 (- x204 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x204 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 500 x204) (x136 500 x204) (x398 500 x204) (x234 500 x204) (= (* x204 500) (x132 500 x204))))
(assert (x382 x161))
(assert (x134 x261))
(assert (x382 x152))
(assert (x382 400))
(assert (x134 x130))
(assert (= x406 (and (not x87) x45)))
(assert (x134 x249))
(assert (= (and x318 x259) x7))
(assert (= (and x129 x30) x252))
(assert (x22 x224))
(assert (x134 x228))
(assert (x134 x25))
(assert (x134 x214))
(assert (x134 x69))
(assert (not x208))
(assert (x134 x168))
(assert (and (x284 500 x295) (and (= (- (* x295 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x295)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x295)) (= (x132 500 (- x295 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 500 (- x295 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x295 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 500 (- x295 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x295 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 500 x295) (x136 500 x295) (x398 500 x295) (x234 500 x295) (= (* x295 500) (x132 500 x295))))
(assert (x134 x321))
(assert (x134 x315))
(assert (x382 x411))
(assert (and (x284 500 x71) (and (= (- (* x71 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x71)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x71)) (= (x132 500 (- x71 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 500 (- x71 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x71 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 500 (- x71 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x71 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 500 x71) (x136 500 x71) (x398 500 x71) (x234 500 x71) (= (* x71 500) (x132 500 x71))))
(assert (= (and x416 x106) x355))
(assert (x134 x308))
(assert (= x211 (and x404 x349)))
(assert (x134 x107))
(assert (x134 x88))
(assert (x382 3))
(assert (= (=> (and (and (= x14 (x147 x322 10)) (= x174 x351) (= x14 x172)) (and (= x401 10) x241 (= x322 x370) (= x122 false) (= x241 x304))) x238) x206))
(assert (x134 x104))
(assert (x22 x334))
(assert (x134 x374))
(assert (x382 x289))
(assert (and (x284 3 x364) (and (= (- (* x364 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x364)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x364)) (= (x132 3 (- x364 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x364 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x364 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x364 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x364 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 3 x364) (x136 3 x364) (x398 3 x364) (x234 3 x364) (= (* x364 3) (x132 3 x364))))
(assert (x134 x408))
(assert (x134 x205))
(assert (x134 x413))
(assert (x134 x271))
(assert (x22 x31))
(assert (x382 x305))
(assert (= x114 (=> (and (and x10 (= x343 x338) (= x169 400) (= x10 x89) (= false x378)) (and (= x380 x172) (= x380 (x147 x343 400)) (= x351 x174))) x238)))
(assert (x22 x25))
(assert (x134 x11))
(assert (x134 x330))
(assert (x134 x153))
(assert (x134 x155))
(assert (x134 x310))
(assert (x134 x103))
(assert (x134 x26))
(assert (x134 x296))
(assert (= x208 (=> (and (not (= 149895259 x53)) (= x334 x149) (= (< 0 (x347 x231)) x219) (= x410 x217) x219 (= x86 x285) (= (x147 x411 x42) x157) (= x84 x306) (= (x347 x231) x119) (= x315 x176) (> x119 0) (= x88 x338) (= x17 x86) (> x231 0) (= x389 x145) (= x133 x84) (= x354 x285) (= x91 x217) (= x77 0) (= x133 x315) (= x335 x256) (= (= x88 0) x377) (= x411 (x132 x176 x54)) (= x54 x354) (= x357 (x264 x231)) (= x236 x51) (= x338 x149) (>= 1461501637330902918203684832716283019655932542975 x231) (= x53 2685885107) (not (= x53 1245370514)) (= (and x51 x389) x174) (>= x357 0) (= (or x230 x377) x135) (= x310 x216) (= x340 x91) (= x111 x217) (= x121 (x132 x256 x334)) (= x370 x133) (= x335 x370) (= x230 (= 0 x46)) (= (= x278 x157) x356) (= 0 x352) (= x236 (not (= x340 0))) (= x148 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (<= x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) x145) (= x285 x338) (= 0 x159) (= x278 x216) (= x42 x111) (= x370 x46) (= 400 x409) (= x410 x314)) (and (=> (and (and (= x11 0) (= x172 x11) x379 (= x135 x379) (= x351 x174)) x135) x238) (=> (and (and (= (not x270) x158) (= x270 x135) x158 (= x91 x82) (= x33 (= x261 x82)) (= x338 x261)) (not x135)) (and (=> (and (and (= x96 x172) (= x174 x351) x276 (= x370 x96) (= x276 x33)) x33) x238) (=> (and (not x33) (and (= x74 (not x61)) (= x61 x33) (= x233 x91) (= (= x233 x311) x317) x74 (= x311 x370))) (and (=> (and (and (= x13 x338) (= (* x388 2) x190) x257 (= (not x99) x257) (= x106 (= x13 x190)) (= x91 x388) (= 2 x155) (= x317 x99)) (not x317)) (and (=> (and (and (= x87 (= x203 x137)) (= x91 x31) (= x137 x370) x47 (= x106 x227) (= x203 (* x31 2)) (= 2 x220) (= x47 (not x227))) (not x106)) (and (=> (and (not x87) (and (= (* x331 2) x395) (= (= x395 x385) x272) (= x338 x331) (= x308 2) (= x91 x385) x36 (= x36 (not x59)) (= x59 x87))) (and (=> x272 x248) (=> (and (and (= x407 2) (= x127 x91) (= x272 x78) (= (= x127 x279) x32) (= (* x291 2) x279) (= x370 x291) (= (not x78) x293) x293) (not x272)) (and (=> x32 x386) (=> (and (and (= (* x364 3) x141) (= x364 x91) (= x307 (not x93)) x307 (= x338 x383) (= (= x383 x141) x349) (= x235 3) (= x93 x32)) (not x32)) (and (=> (and (and (= 3 x274) (= (= x341 x408) x67) x371 (= x349 x263) (= x370 x408) (= x361 x91) (= (* 3 x361) x341) (= (not x263) x371)) (not x349)) (and (=> (and (not x67) (and (= x91 x130) (= (* x40 3) x66) (= (not x362) x324) (= x338 x40) (= x362 x67) (= x94 3) x324 (= (= x130 x66) x318))) (and (=> (and (not x318) (and (= 3 x104) (= x370 x224) (= (not x68) x337) (= x381 x91) (= x336 (= x381 x275)) (= x318 x68) (= (* 3 x224) x275) x337)) (and (=> x336 x303) (=> (and (not x336) (and (= x338 x212) (= x105 (* 10 x118)) (= (not x223) x415) (= x43 10) x415 (= (= x212 x105) x73) (= x118 x91) (= x223 x336))) (and (=> (and (and (= x351 x174) (= x73 x19) (= x48 (x108 (* 10 x282))) (= x48 x172) x19 (= x370 x282) (= x70 10)) x73) x238) (=> (and (and (= x91 x165) (= x4 x370) (= x325 (* 10 x165)) (= x139 (= x325 x4)) (= 10 x215) (= x197 (not x350)) x197 (= x73 x350)) (not x73)) (and (=> (and (and (= x338 x228) (= x412 x172) (= x226 10) (= (x108 (* 10 x228)) x412) (= x351 x174) (= x346 x139) x346) x139) x238) (=> (and (and (= x321 10) (= (= x178 x247) x304) (= (* x92 10) x247) (= (not x18) x81) (= x178 x91) x81 (= x18 x139) (= x338 x92)) (not x139)) (and (=> (and (not x304) (and (= (* 10 x140) x294) x117 (= x312 x91) (= 10 x34) (= (= x294 x312) x90) (= x117 (not x173)) (= x140 x370) (= x173 x304))) (and (=> (and (not x90) (and (= 500 x329) (= (not x156) x185) (= (= x262 x184) x30) (= (* x204 500) x262) (= x338 x184) (= x91 x204) (= x90 x156) x185)) (and (=> (and x30 (and (= x174 x351) (= x172 x167) x57 (= x57 x30) (= x167 (x108 (* 500 x348))) (= x27 500) (= x370 x348))) x238) (=> (and (and (= (= x265 x160) x72) (= x313 x30) (= x299 500) (= x265 x370) (= x85 (not x313)) (= x91 x295) (= x160 (* 500 x295)) x85) (not x30)) (and (=> (and x72 (and (= x338 x56) (= x351 x174) (= x172 x144) x250 (= x144 (x108 (* x56 500))) (= 500 x202) (= x250 x72))) x238) (=> (and (and (= x102 (* 500 x115)) (= x338 x115) (= x222 (= x28 x102)) (= x28 x91) x225 (= x65 500) (= (not x399) x225) (= x72 x399)) (not x72)) (and (=> x222 x35) (=> (and (not x222) (and (= x330 500) x297 (= x125 (= x164 x39)) (= (* 500 x71) x164) (= x370 x71) (= x387 x222) (= x91 x39) (= x297 (not x387)))) (and (=> x125 x353) (=> (and (and (= x345 x125) (= x131 (not x345)) (= x338 x373) x131 (= 400 x200) (= x91 x249) (= (= x246 x373) x195) (= x246 (* 400 x249))) (not x125)) (and (=> (and (and (= (* 400 x25) x194) x323 (= (not x75) x323) (= x183 (= x296 x194)) (= x296 x370) (= x195 x75) (= 400 x268) (= x91 x25)) (not x195)) (and (=> (and (and (= x183 x394) (= x80 (x108 (* x16 400))) (= x351 x174) x394 (= x338 x16) (= x172 x80) (= x413 400)) x183) x238) (=> (and (and (= x338 x62) x367 (= x112 400) (= (not x37) x367) (= x183 x37) (= x91 x103) (= (= x403 x103) x251) (= (* 400 x62) x403)) (not x183)) (and (=> x251 x390) (=> (and (not x251) (and x171 (= 400 x29) (= (* x168 400) x142) (= x168 x370) (= x26 x91) (= x251 x143) (= x171 (not x143)) (= x89 (= x26 x142)))) (and (=> (and (not x89) (and (= x69 0) x359 (= x359 (not x376)) (= x376 x89) (= x172 x69) (= x21 false) (= x21 x351))) x238) (=> x89 x114))))))) (=> (and x195 (and (= x351 x174) x300 (= x396 x172) (= x244 400) (= x300 x195) (= x396 (x108 (* 400 x41))) (= x370 x41))) x238))))))))))) (=> x90 x333))) (=> x304 x206))))))))) (=> x318 x150))) (=> (and x67 (and (= x172 x214) (= 3 x320) (= x214 (x108 (* x95 3))) (= x338 x95) (= x351 x174) (= x67 x187) x187)) x238))) (=> (and x349 (and (= 3 x205) x339 (= x174 x351) (= x101 x370) (= x286 x172) (= x339 x349) (= (x108 (* 3 x101)) x286))) x238))))))) (=> (and (and x116 (= (x108 (* 2 x6)) x58) (= x172 x58) (= x174 x351) (= x5 2) (= x338 x6) (= x116 x87)) x87) x238))) (=> (and x106 (and (= x207 x106) (= x172 x153) (= x400 2) (= (x108 (* x163 2)) x153) (= x351 x174) x207 (= x370 x163))) x238))) (=> (and x317 (and (= x174 x351) (= x97 x172) x63 (= x97 x338) (= x317 x63))) x238)))))))))
(assert (= x260 (and x251 x372)))
(assert (x22 x118))
(assert (and (x284 10 x118) (and (= (- (* x118 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x118)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x118)) (= (x132 10 (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 10 (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 10 (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 10 x118) (x136 10 x118) (x398 10 x118) (x234 10 x118) (= (* x118 10) (x132 10 x118))))
(assert (= (and x89 x218) x326))
(assert (x134 x70))
(assert (x134 x149))
(assert (= x402 (and x129 (not x30))))
(assert (x134 x383))
(assert (x22 x54))
(assert (x134 x17))
(assert (x134 x335))
(assert (x134 x244))
(assert (x382 x189))
(assert (x22 400))
(assert (x134 x338))
(assert (x134 x204))
(assert (x134 x184))
(assert (x134 x312))
(assert (= x64 (and x177 (not x33))))
(assert (x134 x133))
(assert (and (x284 3 x224) (and (= (- (* x224 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x224)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x224)) (= (x132 3 (- x224 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x224 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x224 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x224 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x224 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 3 x224) (x136 3 x224) (x398 3 x224) (x234 3 x224) (= (* x224 3) (x132 3 x224))))
(assert (x22 x228))
(assert (= (and x49 x135) x138))
(assert (x134 x77))
(assert (x134 x71))
(assert (x22 2))
(assert (x134 x397))
(assert (= (and x50 (not x139)) x162))
(assert (and (x76 x199 3) (x110 x199 3) (x192 x199 3) (x109 x199 3) (=> (and (> 3 0) (> x199 0)) (and (<= (* (x147 x199 3) 3) x199) (> (* 3 (x147 x199 3)) (- x199 3))))))
(assert (x134 x388))
(assert (= x150 (=> (and (and (= x199 x370) (= false x209) (= x186 3) x283 (= x283 x318)) (and (= x351 x174) (= x271 x172) (= (x147 x199 3) x271))) x238)))
(assert (x134 x172))
(assert (x134 x62))
(assert (x134 x165))
(assert (= x393 (and x213 (not x222))))
(assert (and (x284 500 x56) (and (= (- (* x56 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x56)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x56)) (= (x132 500 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 500 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 500 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 500 x56) (x136 500 x56) (x398 500 x56) (x234 500 x56) (= (* x56 500) (x132 500 x56))))
(assert (x134 x278))
(assert (x134 x202))
(assert (x134 x189))
(assert (x134 x152))
(assert (x134 x29))
(assert (x134 x14))
(assert (x134 x292))
(assert (x134 x48))
(assert (= x386 (=> (and (and (= x351 x174) (= x253 (x147 x189 2)) (= x253 x172)) (and (= x32 x366) x366 (= false x365) (= x189 x338) (= 2 x245))) x238)))
(assert (x134 x340))
(assert (= (and (not x90) x198) x129))
(assert (x134 x94))
(assert (and (x284 400 x25) (and (= (- (* x25 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x25)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x25)) (= (x132 400 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 400 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 400 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 400 x25) (x136 400 x25) (x398 400 x25) (x234 400 x25) (= (* x25 400) (x132 400 x25))))
(assert (x22 x249))
(assert (x134 x343))
(assert (x134 x6))
(assert (x134 x295))
(assert (x134 x161))
(assert (x134 x169))
(assert (x134 x412))
(assert (= x177 (and (not x135) x49)))
(assert (= (and (not x125) x393) x191))
(assert (= (and x336 x79) x273))
(assert (and (x76 x120 10) (x110 x120 10) (x192 x120 10) (x109 x120 10) (=> (and (> 10 0) (> x120 0)) (and (<= (* (x147 x120 10) 10) x120) (> (* 10 (x147 x120 10)) (- x120 10))))))
(assert (x134 x82))
(assert (= (and (not x72) x402) x213))
(assert (= x319 (and x90 x198)))
(assert (= x333 (=> (and (and (= (x147 x120 10) x243) (= x243 x172) (= x351 x174)) (and (= x342 10) (= x90 x267) (= x120 x338) (= false x232) x267)) x238)))
(assert (= (and x162 (not x304)) x198))
(assert (x134 x380))
(assert (x22 x40))
(assert (x134 x120))
(assert (x134 x385))
(assert (x134 x58))
(assert (x382 x322))
(assert (x134 x243))
(assert (x134 x334))
(assert (x22 x361))
(assert (x22 x140))
(assert (x134 x239))
(assert (x134 x39))
(assert (= (and x344 x183) x193))
(assert (and (x76 x343 400) (x110 x343 400) (x192 x343 400) (x109 x343 400) (=> (and (> 400 0) (> x343 0)) (and (<= (* (x147 x343 400) 400) x343) (> (* 400 (x147 x343 400)) (- x343 400))))))
(assert (and (x284 2 x331) (and (= (- (* x331 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x331)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x331)) (= (x132 2 (- x331 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x331 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x331 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 2 (- x331 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x331 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 2 x331) (x136 2 x331) (x398 2 x331) (x234 2 x331) (= (* x331 2) (x132 2 x331))))
(assert (and (x284 400 x62) (and (= (- (* x62 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x62)) (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x62)) (= (x132 400 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 400 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x132 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 400 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x405 400 x62) (x136 400 x62) (x398 400 x62) (x234 400 x62) (= (* x62 400) (x132 400 x62))))
(assert (= (=> (and (and (= (x147 x358 400) x292) (= x292 x172) (= x174 x351)) (and (= x180 400) x255 (= x255 x251) (= x370 x358) (= false x221))) x238) x390))
(assert (x134 x285))
(assert (= (and x50 x139) x288))
(assert (x134 x329))
(assert (x22 x331))
(assert (x134 x361))
(assert (x22 x115))
(assert (x134 x54))
(assert (x134 x112))
(check-sat)
(exit)
