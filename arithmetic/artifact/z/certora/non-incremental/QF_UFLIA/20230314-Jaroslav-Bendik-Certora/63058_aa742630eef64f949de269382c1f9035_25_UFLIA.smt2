(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x310 () Int)
(declare-fun x60 (Int) Int)
(declare-fun x264 () Int)
(declare-fun x199 () Int)
(declare-fun x255 () Bool)
(declare-fun x223 () Int)
(declare-fun x25 () Int)
(declare-fun x259 () Bool)
(declare-fun x331 () Int)
(declare-fun x38 () Bool)
(declare-fun x251 () Int)
(declare-fun x307 () Int)
(declare-fun x167 () Int)
(declare-fun x170 () Int)
(declare-fun x224 (Int Int) Int)
(declare-fun x109 () Bool)
(declare-fun x352 () Int)
(declare-fun x348 () Bool)
(declare-fun x182 () Int)
(declare-fun x322 () Int)
(declare-fun x15 () Int)
(declare-fun x43 () Bool)
(declare-fun x51 (Int) Int)
(declare-fun x77 () Int)
(declare-fun x268 () Int)
(declare-fun x20 (Int) Int)
(declare-fun x122 () Int)
(declare-fun x257 () Int)
(declare-fun x283 () Bool)
(declare-fun x179 () Int)
(declare-fun x94 () Int)
(declare-fun x324 () Int)
(declare-fun x44 () Int)
(declare-fun x120 () Int)
(declare-fun x261 () Int)
(declare-fun x157 () Bool)
(declare-fun x161 () Bool)
(declare-fun x209 () Int)
(declare-fun x312 () Int)
(declare-fun x279 () Int)
(declare-fun x236 () Int)
(declare-fun x269 (Int Int) Int)
(declare-fun x81 () Int)
(declare-fun x100 () Int)
(declare-fun x165 () Int)
(declare-fun x232 (Int Int) Int)
(declare-fun x234 () Bool)
(declare-fun x335 () Bool)
(declare-fun x169 () Int)
(declare-fun x235 () Int)
(declare-fun x39 (Int Int) Int)
(declare-fun x194 () Bool)
(declare-fun x210 () Bool)
(declare-fun x49 () Int)
(declare-fun x145 () Int)
(declare-fun x252 () Int)
(declare-fun x133 () Int)
(declare-fun x336 () Int)
(declare-fun x215 () Int)
(declare-fun x281 () Int)
(declare-fun x311 () Bool)
(declare-fun x175 () Int)
(declare-fun x42 () Int)
(declare-fun x57 () Bool)
(declare-fun x196 () Int)
(declare-fun x67 () Int)
(declare-fun x171 () Int)
(declare-fun x69 () Bool)
(declare-fun x76 () Int)
(declare-fun x72 () Int)
(declare-fun x62 () Int)
(declare-fun x297 () Bool)
(declare-fun x45 () Bool)
(declare-fun x216 () Int)
(declare-fun x5 () Int)
(declare-fun x221 () Bool)
(declare-fun x147 () Bool)
(declare-fun x275 () Bool)
(declare-fun x219 () Int)
(declare-fun x150 () Bool)
(declare-fun x303 () Bool)
(declare-fun x114 () Int)
(declare-fun x278 () Int)
(declare-fun x233 () Int)
(declare-fun x26 () Int)
(declare-fun x241 () Int)
(declare-fun x111 () Bool)
(declare-fun x104 () Int)
(declare-fun x231 () Int)
(declare-fun x225 (Int) Int)
(declare-fun x247 () Int)
(declare-fun x214 () Bool)
(declare-fun x330 () Int)
(declare-fun x2 () Bool)
(declare-fun x325 () Int)
(declare-fun x107 () Int)
(declare-fun x1 () Bool)
(declare-fun x316 () Int)
(declare-fun x293 () Int)
(declare-fun x101 () Int)
(declare-fun x308 () Int)
(declare-fun x195 () Bool)
(declare-fun x55 () Bool)
(declare-fun x341 () Int)
(declare-fun x197 () Bool)
(declare-fun x82 () Bool)
(declare-fun x272 () Int)
(declare-fun x321 () Int)
(declare-fun x7 () Int)
(declare-fun x121 () Int)
(declare-fun x351 () Int)
(declare-fun x276 () Bool)
(declare-fun x205 () Int)
(declare-fun x227 () Int)
(declare-fun x344 () Int)
(declare-fun x46 () Int)
(declare-fun x302 () Int)
(declare-fun x174 () Int)
(declare-fun x80 () Int)
(declare-fun x274 () Bool)
(declare-fun x124 () Int)
(declare-fun x346 () Int)
(declare-fun x154 () Int)
(declare-fun x155 () Int)
(declare-fun x202 () Bool)
(declare-fun x290 () Int)
(declare-fun x102 () Int)
(declare-fun x115 () Int)
(declare-fun x98 () Int)
(declare-fun x211 () Bool)
(declare-fun x267 () Bool)
(declare-fun x230 () Int)
(declare-fun x271 () Bool)
(declare-fun x319 () Int)
(declare-fun x253 () Int)
(declare-fun x61 () Int)
(declare-fun x32 () Bool)
(declare-fun x198 (Int Int) Int)
(declare-fun x327 () Int)
(declare-fun x222 () Bool)
(declare-fun x71 () Bool)
(declare-fun x183 () Int)
(declare-fun x262 () Int)
(declare-fun x260 () Bool)
(declare-fun x141 () Int)
(declare-fun x288 () Int)
(declare-fun x142 () Int)
(declare-fun x73 () Int)
(declare-fun x181 () Int)
(declare-fun x203 () Int)
(declare-fun x160 () Int)
(declare-fun x187 () Int)
(declare-fun x146 () Bool)
(declare-fun x240 () Int)
(declare-fun x33 () Bool)
(declare-fun x300 () Int)
(declare-fun x106 () Int)
(declare-fun x243 () Bool)
(declare-fun x254 () Bool)
(declare-fun x65 () Int)
(declare-fun x229 () Int)
(declare-fun x246 () Int)
(declare-fun x282 () Int)
(declare-fun x323 () Bool)
(declare-fun x93 () Int)
(declare-fun x50 () Bool)
(declare-fun x63 () Int)
(declare-fun x148 () Bool)
(declare-fun x337 () Int)
(declare-fun x317 () Int)
(declare-fun x347 () Int)
(declare-fun x305 (Int Int) Int)
(declare-fun x304 () Bool)
(declare-fun x332 () Int)
(declare-fun x172 () Int)
(declare-fun x326 () Int)
(declare-fun x244 () Int)
(declare-fun x177 () Int)
(declare-fun x164 () Bool)
(declare-fun x296 () Int)
(declare-fun x108 () Int)
(declare-fun x309 () Int)
(declare-fun x266 () Bool)
(declare-fun x287 () Int)
(declare-fun x256 () Int)
(declare-fun x298 () Int)
(declare-fun x213 () Bool)
(declare-fun x18 () Int)
(declare-fun x128 () Int)
(declare-fun x113 () Int)
(declare-fun x277 () Int)
(declare-fun x345 () Int)
(declare-fun x99 () Int)
(declare-fun x116 () Int)
(declare-fun x40 () Int)
(declare-fun x228 () Int)
(declare-fun x206 () Int)
(declare-fun x47 () Int)
(declare-fun x318 () Bool)
(declare-fun x313 () Bool)
(declare-fun x294 () Int)
(declare-fun x173 () Int)
(declare-fun x226 () Int)
(declare-fun x306 () Int)
(declare-fun x24 (Int) Int)
(declare-fun x295 () Bool)
(declare-fun x29 () Int)
(declare-fun x95 (Int) Int)
(declare-fun x184 () Int)
(declare-fun x286 () Int)
(declare-fun x36 () Int)
(declare-fun x19 () Int)
(declare-fun x23 () Int)
(declare-fun x11 () Int)
(declare-fun x83 () Bool)
(declare-fun x166 () Bool)
(declare-fun x242 () Int)
(declare-fun x189 () Int)
(declare-fun x37 () Int)
(declare-fun x186 () Bool)
(declare-fun x340 () Int)
(declare-fun x178 () Bool)
(declare-fun x70 () Int)
(declare-fun x130 () Int)
(declare-fun x334 () Bool)
(declare-fun x10 () Int)
(declare-fun x149 () Int)
(declare-fun x68 () Int)
(declare-fun x299 () Bool)
(declare-fun x135 () Int)
(declare-fun x265 () Int)
(declare-fun x237 () Int)
(declare-fun x110 () Int)
(declare-fun x92 () Int)
(declare-fun x192 () Int)
(declare-fun x156 () Int)
(declare-fun x138 () Int)
(declare-fun x292 () Bool)
(declare-fun x117 () Int)
(declare-fun x320 () Int)
(declare-fun x52 () Int)
(declare-fun x21 () Int)
(declare-fun x85 () Bool)
(declare-fun x188 () Bool)
(declare-fun x131 () Int)
(declare-fun x139 () Int)
(declare-fun x190 (Int) Int)
(declare-fun x273 () Bool)
(declare-fun x27 (Int) Int)
(declare-fun x353 () Int)
(declare-fun x48 () Int)
(declare-fun x153 () Bool)
(declare-fun x66 () Bool)
(declare-fun x349 () Bool)
(declare-fun x158 () Int)
(declare-fun x136 () Int)
(declare-fun x16 () Int)
(declare-fun x250 (Int) Int)
(declare-fun x284 () Bool)
(declare-fun x301 () Int)
(declare-fun x217 () Bool)
(declare-fun x270 () Int)
(declare-fun x338 () Int)
(declare-fun x354 () Int)
(declare-fun x263 () Int)
(declare-fun x212 () Int)
(declare-fun x79 () Int)
(declare-fun x339 () Int)
(declare-fun x31 () Int)
(declare-fun x22 () Int)
(declare-fun x90 () Bool)
(declare-fun x4 () Int)
(declare-fun x208 () Bool)
(declare-fun x245 () Int)
(declare-fun x112 () Int)
(define-fun x151 ((x285 Int)) Int (ite (and (>= x285 0) (< x285 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x285 (- x285 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x125 ((x285 Int)) Int (ite (and (< x285 0) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x285)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x285) x285))
(define-fun x248 ((x285 Int)) Int (ite (and (< x285 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x285 0)) x285 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x285) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x285)) (- x285 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x285 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x285)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x285) (x39 x285 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x84 ((x333 Int)) Bool (and (>= x333 0) (< x333 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x350 ((x333 Int)) Bool (and (<= 0 x333) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x333)))
(define-fun x185 ((x333 Int)) Bool (and (= (x269 x333 115792089237316195423570985008687907853269984665640564039457584007913129639935) x333) (= x333 (x269 115792089237316195423570985008687907853269984665640564039457584007913129639935 x333))))
(define-fun x143 ((x333 Int)) Bool (and (= 0 (x269 x333 0)) (= (x269 0 x333) 0)))
(define-fun x238 ((x333 Int)) Bool (= (x269 x333 x333) x333))
(define-fun x126 ((x333 Int)) Bool (and (x238 x333) (x143 x333) (x185 x333)))
(define-fun x89 ((x333 Int) (x220 Int)) Bool (= (x269 x333 x220) (x269 x220 x333)))
(define-fun x59 ((x333 Int) (x220 Int)) Bool (and (=> (>= x333 0) (>= x333 (x269 x333 x220))) (<= 0 (x269 x333 x220)) (=> (>= x220 0) (>= x220 (x269 x333 x220)))))
(define-fun x87 ((x333 Int) (x220 Int)) Bool (and (x89 x333 x220) (x59 x333 x220)))
(define-fun x180 ((x333 Int)) Bool (= (x39 x333 1461501637330902918203684832716283019655932542976) (x269 x333 1461501637330902918203684832716283019655932542975)))
(define-fun x315 ((x333 Int)) Bool (and (x180 x333) (x87 x333 1461501637330902918203684832716283019655932542975)))
(define-fun x41 ((x333 Int) (x220 Int)) Bool (and (<= 0 (x39 x333 x220)) (< (x39 x333 x220) x220)))
(define-fun x144 ((x333 Int) (x220 Int)) Bool (=> (and (<= 0 x333) (> x220 0)) (= (= (x39 x333 x220) x333) (> x220 x333))))
(define-fun x291 ((x333 Int) (x220 Int)) Bool (=> (and (> x220 0) (and (<= x220 x333) (< x333 (+ x220 x220)))) (= (x39 x333 x220) (- x333 x220))))
(define-fun x168 ((x333 Int)) Bool (= (x39 0 x333) 0))
(define-fun x176 ((x333 Int)) Bool (= (x39 x333 1) 0))
(define-fun x201 ((x333 Int)) Bool (= (x39 x333 x333) 0))
(define-fun x35 ((x333 Int)) Bool (and (x176 x333) (x201 x333) (x168 x333)))
(define-fun x258 ((x333 Int) (x220 Int)) Bool (=> (and (< 0 x333) (< 0 x220)) (= (= x220 (x198 (x248 (x224 x333 x220)) x333)) (< (x224 x333 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x127 ((x333 Int) (x220 Int)) Bool (=> (and (not (= 0 x220)) (not (= 0 x333))) (and (= (x198 (x224 x333 x220) x220) x333) (= (x198 (x224 x333 x220) x333) x220))))
(define-fun x118 ((x333 Int) (x220 Int)) Bool (=> (and (> x333 0) (> x220 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x224 x333 x220)) (< (x198 115792089237316195423570985008687907853269984665640564039457584007913129639935 x333) x220))))
(define-fun x123 ((x333 Int) (x220 Int)) Bool (and (= (x248 (x224 (- x333 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x248 (x224 x333 x220))) (= (x248 (x224 x333 x220)) (x248 (x224 (- x333 115792089237316195423570985008687907853269984665640564039457584007913129639936) x220))) (= (x248 (x224 x333 (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x248 (x224 x333 x220)))))
(define-fun x91 ((x333 Int) (x220 Int)) Bool (and (=> (and (and (> x333 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x333 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x220) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x220))) (= (<= (x224 (- x333 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x333) (x198 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220))))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x333) (> x333 0)) (and (> x220 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x220))) (= (>= (x224 x333 (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x198 57896044618658097711785492504343953926634992332820282019728792003956564819968 x333) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220)))) (=> (and (and (> x333 0) (<= x333 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 0 x220) (<= x220 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x224 x333 x220)) (<= x333 (x198 57896044618658097711785492504343953926634992332820282019728792003956564819967 x220)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x333) (<= x333 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x220) (> x220 0))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x224 (- x333 115792089237316195423570985008687907853269984665640564039457584007913129639936) x220)) (>= (x198 57896044618658097711785492504343953926634992332820282019728792003956564819968 x220) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x333))))))
(define-fun x86 ((x333 Int)) Bool (and (= (x224 x333 0) 0) (= (x224 0 x333) 0)))
(define-fun x162 ((x333 Int)) Bool (and (= (x224 1 x333) x333) (= x333 (x224 x333 1))))
(define-fun x12 ((x333 Int)) Bool (and (x86 x333) (x162 x333)))
(define-fun x30 ((x333 Int) (x220 Int)) Bool (=> (and (< 0 x220) (< 0 x333)) (and (>= x333 (x198 x333 x220)) (<= 0 (x198 x333 x220)))))
(define-fun x204 ((x333 Int) (x220 Int)) Bool (=> (and (and (< x220 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x220 1)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x333) (>= x333 0))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x198 x333 x220)) (>= (x198 x333 x220) 0))))
(define-fun x105 ((x333 Int) (x220 Int)) Bool (=> (and (> x333 x220) (< 1 x220)) (< (x198 x333 x220) x333)))
(define-fun x140 ((x333 Int) (x220 Int)) Bool (=> (and (< 0 x333) (< 0 x220)) (= (= (x198 x333 x220) 0) (< x333 x220))))
(define-fun x218 ((x333 Int) (x220 Int)) Bool (=> (and (> x220 0) (< 0 x333)) (and (> (x224 (x198 x333 x220) x220) (- x333 x220)) (<= (x224 (x198 x333 x220) x220) x333))))
(define-fun x132 ((x333 Int) (x220 Int)) Bool (and (x218 x333 x220) (x204 x333 x220) (x30 x333 x220) (x105 x333 x220) (x140 x333 x220)))
(define-fun x191 ((x333 Int)) Bool (= (x198 0 x333) 0))
(define-fun x8 ((x333 Int)) Bool (= x333 (x198 x333 1)))
(define-fun x152 ((x333 Int)) Bool (=> (not (= x333 0)) (= 1 (x198 x333 x333))))
(define-fun x193 ((x333 Int)) Bool (and (x8 x333) (x191 x333) (x152 x333)))
(define-fun x64 ((x333 Int) (x220 Int)) Bool (= (x224 x220 x333) (x224 x333 x220)))
(define-fun x28 ((x333 Int) (x220 Int)) Bool (and (=> (and (< 0 x333) (< x220 0)) (< (x224 x333 x220) 0)) (=> (and (> x220 0) (< 0 x333)) (> (x224 x333 x220) 0)) (=> (and (> 0 x220) (> 0 x333)) (> (x224 x333 x220) 0)) (=> (and (< x333 0) (> x220 0)) (> 0 (x224 x333 x220)))))
(define-fun x88 ((x333 Int) (x220 Int)) Bool (and (x28 x333 x220) (x123 x333 x220) (x127 x333 x220) (x91 x333 x220) (x118 x333 x220) (x258 x333 x220) (x64 x333 x220)))
(define-fun x239 ((x333 Int)) Bool (= (x39 x333 1099511627776) (x269 x333 1099511627775)))
(define-fun x207 ((x333 Int)) Bool (and (x239 x333) (x87 x333 1099511627775)))
(define-fun x6 ((x163 Int)) Int (ite (= 384 x163) x5 (x20 x163)))
(define-fun x58 ((x163 Int)) Int (ite x32 (x20 x163) (x6 x163)))
(define-fun x14 ((x163 Int)) Int (ite (= 384 x163) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x58 x163)))
(define-fun x17 ((x163 Int)) Int (ite (= x163 388) x155 (x14 x163)))
(define-fun x159 ((x163 Int)) Int (ite (= 420 x163) x23 (x17 x163)))
(define-fun x74 ((x163 Int)) Int (ite (= x163 452) x70 (x159 x163)))
(define-fun x119 ((x163 Int)) Int (ite (and (>= x163 384) (< x163 (+ 384 0))) (x190 (+ 0 (- x163 384))) (x74 x163)))
(define-fun x13 ((x163 Int)) Int (ite x276 (x58 x163) (ite x211 (x119 x163) (x74 x163))))
(define-fun x78 ((x163 Int)) Int (ite (= 384 x163) x130 (x13 x163)))
(define-fun x103 ((x163 Int)) Int (ite (= x163 384) x130 (x78 x163)))
(define-fun x134 ((x163 Int)) Int (ite (= 416 x163) x306 (x103 x163)))
(define-fun x342 ((x163 Int)) Int (ite (= 448 x163) x167 (x134 x163)))
(define-fun x200 ((x163 Int)) Int (ite (= 480 x163) x114 (x342 x163)))
(define-fun x328 ((x163 Int)) Int (ite (= 512 x163) x296 (x200 x163)))
(define-fun x3 ((x163 Int)) Int (ite (= x163 544) x113 (x328 x163)))
(define-fun x314 ((x163 Int)) Int (ite (= x163 384) (ite x295 1 0) (x3 x163)))
(define-fun x129 ((x163 Int)) Int (ite (= 416 x163) x113 (x314 x163)))
(define-fun x97 ((x163 Int)) Int (ite (= 448 x163) x296 (x129 x163)))
(define-fun x96 ((x333 Int) (x220 Int) (x343 Int) (x34 Int)) Bool (=> (and (<= 0 x220) (<= x333 x343) (<= 0 x333) (>= x34 x220)) (<= (x224 x333 x220) (x224 x343 x34))))
(define-fun x56 ((x333 Int) (x220 Int) (x343 Int) (x34 Int)) Bool (=> (= x333 x343) (= (x224 x333 (- x220 x34)) (- (x224 x333 x220) (x224 x343 x34)))))
(assert (x350 x290))
(assert (not (= (x305 x76 56) 56)))
(assert (x350 x42))
(assert (x84 x46))
(assert (x350 x281))
(assert (x12 x23))
(assert (x350 x235))
(assert (not (= 2646777772 (x305 x29 54))))
(assert (x126 x170))
(assert (x350 x106))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x305 x29 54))))
(assert (x350 x300))
(assert (not (= 1976722451 (x305 x29 54))))
(assert (not (= (x305 x300 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x350 x115))
(assert (not (= (x305 x76 56) 117300739)))
(assert (x207 x286))
(assert (x350 x128))
(assert (x350 x216))
(assert (not (= (x305 x300 56) 1000000000000000000000000000)))
(assert (not (= 2432105714 (x305 x76 56))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x305 x46 56))))
(assert (= x82 (=> (and (= x55 (= x139 0)) (or x55 (not x55))) x260)))
(assert (x12 x231))
(assert (=> (= (x305 x62 56) (x305 x115 x26)) (and (= x26 56) (= x115 x62))))
(assert (=> (= (x305 x29 54) (x305 x115 x26)) (and (= x29 x115) (= x26 54))))
(assert (x350 x261))
(assert (not (= (x305 x46 56) 1976722451)))
(assert (=> (>= 10000 x300) (not (= (x305 x62 56) x300))))
(assert (x350 x278))
(assert (x350 x353))
(assert (x84 x25))
(assert (not (= (x305 x300 56) 157198259)))
(assert (not (= (x305 x76 56) 3226110480)))
(assert (x350 x183))
(assert (= (or x276 x274) x284))
(assert (not (= (x305 x115 x26) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= (x305 x29 54) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (not (= 1000000000 (x305 x29 54))))
(assert (not (= (x305 x46 56) 1889567281)))
(assert (x350 x322))
(assert (not (= 404098525 (x305 x62 56))))
(assert (not (= 1889567281 (x305 x29 54))))
(assert (not (= 1976722451 (x305 x115 x26))))
(assert (x350 x107))
(assert (=> (<= x115 10000) (not (= (x305 x62 56) x115))))
(assert (x193 x154))
(assert (x350 x212))
(assert (not (= (x305 x203 56) 1461501637330902918203684832716283019655932542976)))
(assert (and (x140 x317 1000000000000000000000000000) (x204 x317 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x317)) (and (< (- x317 1000000000000000000000000000) (* (x198 x317 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* (x198 x317 1000000000000000000000000000) 1000000000000000000000000000) x317))) (x105 x317 1000000000000000000000000000) (x30 x317 1000000000000000000000000000)))
(assert (x350 x336))
(assert (x350 x223))
(assert (x350 x37))
(assert (x350 x167))
(assert (x350 x21))
(assert (and (x123 1000000000 x23) (x258 1000000000 x23) (= (x224 1000000000 x23) (* 1000000000 x23)) (x118 1000000000 x23) (x91 1000000000 x23) (x127 1000000000 x23) (and (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x23 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000 (- x23 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x23 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x23) (- (* x23 1000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x23))) (= (x224 1000000000 (- x23 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000 (- x23 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x84 x26))
(assert (not (= (x305 x203 56) 56)))
(assert (not (= (x305 x76 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (not (= 1809280292 (x305 x203 56))))
(assert (x350 x237))
(assert (and (x30 x268 2) (x204 x268 2) (x105 x268 2) (= (* (x198 x268 2) 2) (- x268 (x269 1 x268))) (x140 x268 2) (=> (and (< 0 2) (< 0 x268)) (and (< (- x268 2) (* (x198 x268 2) 2)) (<= (* (x198 x268 2) 2) x268)))))
(assert (not (= (x305 x62 56) 157198259)))
(assert (not (= (x305 x29 54) 2432105714)))
(assert (=> (<= x203 10000) (not (= x203 (x305 x76 56)))))
(assert (not (= (x305 x203 56) 1000000000)))
(assert (=> (<= x203 10000) (not (= x203 (x305 x203 56)))))
(assert (not (= (x305 x300 56) 1976722451)))
(assert (not (= 2976520670 (x305 x300 56))))
(assert (not (= (x305 x76 56) 3018967357)))
(assert (x350 x251))
(assert (not (= 2432105714 (x305 x115 x26))))
(assert (not (= (x305 x46 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x305 x46 56) 1000000000)))
(assert (x350 x138))
(assert (=> (>= 10000 x226) (not (= x226 (x305 x62 56)))))
(assert (not (= 1809280292 (x305 x300 56))))
(assert (not (= (x305 x29 54) 54)))
(assert (not (= 2976520670 (x305 x203 56))))
(assert (x12 1000000000000000000000000000))
(assert (not (= 4294967296 (x305 x46 56))))
(assert (x350 x116))
(assert (not (= 3018967357 (x305 x46 56))))
(assert (= (=> (not (= 0 x139)) x254) x260))
(assert (not (= (x305 x115 x26) 1809280292)))
(assert (x350 x70))
(assert (= x274 (or x69 (and x195 (not x55)))))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x198 x170 1461501637330902918203684832716283019655932542976)) (x39 x170 1461501637330902918203684832716283019655932542976)) x170)) (x144 x170 1461501637330902918203684832716283019655932542976) (x41 x170 1461501637330902918203684832716283019655932542976) (x291 x170 1461501637330902918203684832716283019655932542976)))
(assert (not (= 2976520670 (x305 x62 56))))
(assert (x350 x265))
(assert (= x202 (=> (and (= x156 (+ x302 x92)) (= x324 (x248 (x224 x231 x142))) (= x10 x257) (= (> x67 x229) x213) (< 0 x169) (= x217 (= 0 x336)) (= x33 (= 0 x310)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x257 1000000000)) (= x268 (x248 (* 1000000000 x240))) (= (x225 x233) x189) (= (x198 x344 1000000000000000000000000000) x352) (>= 340282366920938463463374607431768211455 x265) (= x49 (x198 115792089237316195423570985008687907853269984665640064039457584007913129639935 x332)) (= x112 x77) (= x288 (x305 x76 56)) (= (> x265 x340) x2) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x23 1000000000)) (= x121 (x151 (+ x264 x16))) (= x262 x189) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000 x113)) (>= x189 0) (< (+ x257 x167) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x171 (x248 (* x67 1000000000000000000000000000))) (= x210 (< x307 x142)) (= x307 (x198 115792089237316195423570985008687907853269984665640064039457584007913129639935 x231)) (= (x198 x121 x336) x312) (= x275 (= x142 0)) (= x46 (x269 1461501637330902918203684832716283019655932542975 x170)) (= (or x50 x217) x266) x71 (= x106 (x198 x317 1000000000000000000000000000)) (= (- x156 x262) x347) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x298)) x326) (= x114 (x198 x120 x268)) (= (x198 x268 2) x182) (> 340282366920938463463374607431768211456 x70) (= (or x271 x153) x323) (= (not x221) x297) (= (+ x173 x112) x322) (= (not x335) x50) (= (not x210) x161) (= x344 (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x345))) (< x25 1461501637330902918203684832716283019655932542976) (= x68 (x248 (x224 x142 x231))) (> x242 0) (= (x305 x300 56) x233) (= x85 (< x352 x322)) (= (x198 115792089237316195423570985008687907853269984665640064039457584007913129639935 x310) x340) (= x306 x351) (= x67 (+ x228 x245)) (>= 340282366920938463463374607431768211455 x206) (= (x248 (x224 x99 x332)) x278) (>= x70 0) (= x264 (x248 (* 1000000000000000000000000000 x322))) (= 0 x263) (= (x198 115792089237316195423570985008687907853269984665640064039457584007913129639935 x142) x301) (not (< 340282366920938463463374607431768211455 x114)) (= (or x33 x349) x348) x303 (< x99 340282366920938463463374607431768211456) (< (+ x257 x23) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x99) (= (x248 (x224 x265 x310)) x279) (= (x151 (+ x68 500000000000000000000000000)) x317) (= x117 (x151 (+ 500000000000000000000000000 x279))) (= x244 (ite x266 1 0)) (= x345 (x198 x336 2)) (= x349 (not x2)) (not (> x130 340282366920938463463374607431768211455)) (= (not x90) x66) (>= x25 0) (= x310 (x248 (* x306 1000000000))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x23) (= (x51 x135) x265) (= (or x275 x66) x243) (= x47 x130) (= (ite x323 1 0) x169) (= x216 (x198 x117 1000000000000000000000000000)) (< (* 1000000000 x306) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x252 x70) (= x43 (< x49 x99)) (= x71 (>= x281 x70)) (= (x305 x46 56) x135) (= (< x301 x337) x90) (= x120 (x151 (+ x182 x171))) (= x263 (ite x1 1 0)) (<= x99 340282366920938463463374607431768211455) (= x281 x92) (= (x198 x268 2) x298) (= x1 (or x297 x299)) (< (+ x257 x306) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x113 x101) (= x309 x257) (= (not x85) x335) (= x21 x81) (= x247 (ite x348 1 0)) (= (x225 x288) x70) (= x130 (+ x294 x10)) (= x313 (= 0 x25)) (= x106 x245) (= (x248 (* 1000000000 x113)) x336) (not (> x296 340282366920938463463374607431768211455)) (<= x99 340282366920938463463374607431768211455) (<= x25 1461501637330902918203684832716283019655932542975) (= x104 (x151 (+ 500000000000000000000000000 x278))) (= x300 (x269 1461501637330902918203684832716283019655932542975 x170)) (= x242 (ite x147 1 0)) (= (x269 1099511627775 x286) x138) (>= x99 0) (= (x269 1461501637330902918203684832716283019655932542975 x170) x76) (= x16 (x198 x336 2)) (= x77 (x198 x104 1000000000000000000000000000)) (= x101 x339) (> 340282366920938463463374607431768211456 x265) (> x52 0) (= x302 x206) (= x229 (x198 x326 1000000000000000000000000000)) (= x253 (x198 x154 1000000000000000000000000000)) (>= x265 0) (= x216 x228) (> x247 0) (= x186 (= x337 0)) (< x99 340282366920938463463374607431768211456) (= x253 x173) (= (+ x351 x309) x240) (<= x189 340282366920938463463374607431768211455) (= (+ x23 x257) x101) (< (+ x253 x77) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x332 (x248 (* x23 1000000000))) (>= x23 0) (= (= x268 0) x299) (< (+ x216 x106) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x154 (x151 (+ 500000000000000000000000000 x324))) (= (x269 1461501637330902918203684832716283019655932542975 x170) x320) (= x147 (or x161 x186)) (= x153 (= x332 0)) (= x271 (not x43)) (= x206 (+ x47 x252)) (< (* 1000000000 x240) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x52 (ite x243 1 0)) (< (+ x130 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 0 x244) (= (not x213) x221) (= x296 (x198 x121 x336)) (= x142 (x248 (* 1000000000 x277))) (= (x269 1099511627775 x286) x145) (= x110 (x269 1461501637330902918203684832716283019655932542975 x170)) (= x294 x167) (>= 340282366920938463463374607431768211455 x70) (= x303 (= x81 x347))) (and (=> (and (and (or (and x150 (and (= x222 (<= x212 (x60 x226))) (= (x95 x25) x179) x208 (= x208 (= (x60 x25) x179)) x222 (> 4294967296 x183) (= x212 (x95 x226)))) (not x150)) (and (not (= 0 x256)) (>= x25 0) (= (> x139 0) x150) (= (x27 x25) x256) (<= x25 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x25) (= x155 (x269 1461501637330902918203684832716283019655932542975 x170)))) (not x313)) x82) (=> x313 x254)))))
(assert (x350 x244))
(assert (not x111))
(assert (not (= (x305 x203 56) 2835717307)))
(assert (not (= 157198259 (x305 x115 x26))))
(assert (=> (<= x46 10000) (not (= (x305 x76 56) x46))))
(assert (not (= (x305 x62 56) 1809280292)))
(assert (x350 x11))
(assert (x126 1099511627775))
(assert (not (= (x305 x62 56) 189977944)))
(assert (= (and x255 (not x150)) x259))
(assert (x35 x22))
(assert (not (= 56 (x305 x115 x26))))
(assert (x35 1099511627776))
(assert (x35 x141))
(assert (x350 x124))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x198 x22 1461501637330902918203684832716283019655932542976)) (x39 x22 1461501637330902918203684832716283019655932542976)) x22)) (x144 x22 1461501637330902918203684832716283019655932542976) (x41 x22 1461501637330902918203684832716283019655932542976) (x291 x22 1461501637330902918203684832716283019655932542976)))
(assert (x350 x18))
(assert (=> (= (x305 x115 x26) (x305 x76 56)) (and (= x76 x115) (= x26 56))))
(assert (=> (<= x62 10000) (not (= x62 (x305 x203 56)))))
(assert (not (= 599290589 (x305 x76 56))))
(assert (x84 x62))
(assert (x350 x325))
(assert (not (= (x305 x62 56) 56)))
(assert (not (= (x305 x29 54) 3226110480)))
(assert (not (= (x305 x46 56) 599290589)))
(assert (not (= (x305 x115 x26) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x350 x172))
(assert (not (= (x305 x46 56) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 1889567281 (x305 x115 x26))))
(assert (=> (= (x305 x300 56) (x305 x76 56)) (= x300 x76)))
(assert (x350 x286))
(assert (not (= 54 (x305 x46 56))))
(assert (x193 x336))
(assert (not (= (x305 x300 56) 1099511627775)))
(assert (=> (= (x305 x203 56) (x305 x76 56)) (= x76 x203)))
(assert (x350 x154))
(assert (=> (>= 10000 x76) (not (= x76 (x305 x46 56)))))
(assert (not (= 1966461510 (x305 x29 54))))
(assert (x350 x94))
(assert (x350 x182))
(assert (not (= 2976520670 (x305 x115 x26))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x305 x300 56))))
(assert (=> (<= x46 10000) (not (= (x305 x300 56) x46))))
(assert (x350 x354))
(assert (not (= 404098525 (x305 x46 56))))
(assert (=> (= (x305 x203 56) (x305 x62 56)) (= x203 x62)))
(assert (x350 x141))
(assert (=> (<= x115 10000) (not (= x115 (x305 x115 x26)))))
(assert (not (= (x305 x29 54) 599290589)))
(assert (x350 x246))
(assert (x350 x184))
(assert (=> (>= 10000 x76) (not (= (x305 x62 56) x76))))
(assert (=> (>= 10000 x46) (not (= x46 (x305 x46 56)))))
(assert (x350 x199))
(assert (x350 x120))
(assert (not (= (x305 x115 x26) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x193 2))
(assert (not (= 1809280292 (x305 x29 54))))
(assert (and (= (x224 3 3) 9) (= (x224 9 3) 27) (= (x224 9 9) 81) (= 81 (x224 27 3))))
(assert (x350 x320))
(assert (= (and x194 (not x197)) x57))
(assert (x350 x92))
(assert (x126 1461501637330902918203684832716283019655932542975))
(assert (x350 x338))
(assert (x350 x317))
(assert (x350 x63))
(assert (=> (= (x305 x300 56) (x305 x203 56)) (= x300 x203)))
(assert (x350 x341))
(assert (x350 x241))
(assert (not (= 157198259 (x305 x76 56))))
(assert (=> (<= x115 10000) (not (= x115 (x305 x29 54)))))
(assert (x350 x339))
(assert (not (= 2835717307 (x305 x29 54))))
(assert (=> (>= 10000 x226) (not (= (x305 x29 54) x226))))
(assert (x350 x52))
(assert (not (= 2646777772 (x305 x300 56))))
(assert (x193 x104))
(assert (not (= (x305 x29 54) (x305 x300 56))))
(assert (x35 x175))
(assert (not (= 340282366920938463463374607431768211456 (x305 x76 56))))
(assert (x350 x287))
(assert (not (= 340282366920938463463374607431768211456 (x305 x46 56))))
(assert (not (= (x305 x115 x26) 1000000000)))
(assert (not (= (x305 x46 56) 340282366920938463463374607431768211455)))
(assert (x350 x262))
(assert (x132 115792089237316195423570985008687907853269984665640064039457584007913129639935 x310))
(assert (x350 x72))
(assert (not (= (x305 x62 56) 4294967296)))
(assert (x35 x286))
(assert (and (=> (> 1099511627776 0) (= (+ (* 1099511627776 (x198 x286 1099511627776)) (x39 x286 1099511627776)) x286)) (x144 x286 1099511627776) (x41 x286 1099511627776) (x291 x286 1099511627776)))
(assert (x350 x49))
(assert (not (= (x305 x203 56) 2646777772)))
(assert (x350 x23))
(assert (x350 x330))
(assert (not (= 1865579259 (x305 x203 56))))
(assert (=> (>= 10000 x226) (not (= x226 (x305 x76 56)))))
(assert (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x305 x46 56))))
(assert (=> (>= 10000 x300) (not (= (x305 x46 56) x300))))
(assert (x350 x22))
(assert (not (= (x305 x115 x26) 404098525)))
(assert (x12 x310))
(assert (x132 115792089237316195423570985008687907853269984665640064039457584007913129639935 x332))
(assert (not (= 1966461510 (x305 x46 56))))
(assert (not (= 340282366920938463463374607431768211455 (x305 x62 56))))
(assert (= true x38))
(assert (x350 x236))
(assert (x350 x312))
(assert (not (= (x305 x76 56) 1809280292)))
(assert (not (= (x305 x300 56) 1000000000)))
(assert (not (= (x305 x115 x26) 1966461510)))
(assert (not (= 340282366920938463463374607431768211455 (x305 x76 56))))
(assert (not (= (x305 x62 56) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= (x305 x76 56) 1000000000000000000000000000)))
(assert (x193 1000000000000000000000000000))
(assert (x84 x203))
(assert (not (= (x305 x29 54) 404098525)))
(assert (x350 x179))
(assert (not (= (x305 x203 56) 1889567281)))
(assert (x350 x99))
(assert (not (= (x305 x46 56) 1461501637330902918203684832716283019655932542976)))
(assert (x350 x67))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x305 x29 54))))
(assert (not (= (x305 x115 x26) 2835717307)))
(assert (x350 x16))
(assert (x193 x120))
(assert (x350 x113))
(assert (x193 x344))
(assert (x350 x100))
(assert (x193 x317))
(assert (not (= (x305 x46 56) 2976520670)))
(assert (not (= (x305 x300 56) 1966461510)))
(assert (not (= (x305 x62 56) 1000000000)))
(assert (x350 x308))
(assert (=> (>= 10000 x25) (not (= x25 (x305 x46 56)))))
(assert (=> (>= 10000 x76) (not (= (x305 x76 56) x76))))
(assert (not (= 3018967357 (x305 x29 54))))
(assert (=> (>= 10000 x46) (not (= (x305 x203 56) x46))))
(assert (not (= 340282366920938463463374607431768211456 (x305 x203 56))))
(assert (x315 x22))
(assert (=> (>= 10000 x25) (not (= (x305 x203 56) x25))))
(assert (x350 x240))
(assert (x315 x175))
(assert (x350 x327))
(assert (not (= (x305 x76 56) 1461501637330902918203684832716283019655932542976)))
(assert (= (and x150 x255) x211))
(assert (not (= (x305 x76 56) 2835717307)))
(assert (and (x123 1000000000 x306) (x258 1000000000 x306) (= (x224 1000000000 x306) (* 1000000000 x306)) (x118 1000000000 x306) (x91 1000000000 x306) (x127 1000000000 x306) (and (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x306 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000 (- x306 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x306 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x306) (- (* x306 1000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x306))) (= (x224 1000000000 (- x306 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000 (- x306 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x305 x62 56))))
(assert (=> (= (x305 x62 56) (x305 x76 56)) (= x76 x62)))
(assert (=> (>= 10000 x62) (not (= x62 (x305 x46 56)))))
(assert (x12 x277))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x198 x175 1461501637330902918203684832716283019655932542976)) (x39 x175 1461501637330902918203684832716283019655932542976)) x175)) (x144 x175 1461501637330902918203684832716283019655932542976) (x41 x175 1461501637330902918203684832716283019655932542976) (x291 x175 1461501637330902918203684832716283019655932542976)))
(assert (not (= (x305 x62 56) (x305 x29 54))))
(assert (= x255 (and (not x313) x214)))
(assert (not (= 500000000000000000000000000 (x305 x76 56))))
(assert (=> (<= x115 10000) (not (= (x305 x203 56) x115))))
(assert (not (= (x305 x300 56) 599290589)))
(assert (x350 x117))
(assert (not (= 500000000000000000000000000 (x305 x300 56))))
(assert (x350 x142))
(assert (x350 x332))
(assert (not (= 2976520670 (x305 x76 56))))
(assert (x350 x256))
(assert (not (= 1865579259 (x305 x29 54))))
(assert (x350 x203))
(assert (=> (= (x305 x76 56) (x305 x46 56)) (= x76 x46)))
(assert (not (= (x305 x300 56) 2432105714)))
(assert (not (= (x305 x300 56) 1889567281)))
(assert (=> (>= 10000 x29) (not (= x29 (x305 x203 56)))))
(assert (x126 x22))
(assert (x350 x205))
(assert (x350 x242))
(assert (not (= (x305 x62 56) 500000000000000000000000000)))
(assert (x350 x187))
(assert (not (= 1966461510 (x305 x62 56))))
(assert (and (x140 x117 1000000000000000000000000000) (x204 x117 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x117)) (and (< (- x117 1000000000000000000000000000) (* (x198 x117 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* (x198 x117 1000000000000000000000000000) 1000000000000000000000000000) x117))) (x105 x117 1000000000000000000000000000) (x30 x117 1000000000000000000000000000)))
(assert (=> (<= x203 10000) (not (= (x305 x62 56) x203))))
(assert (x350 x263))
(assert (=> (>= 10000 x300) (not (= (x305 x115 x26) x300))))
(assert (=> (<= x62 10000) (not (= (x305 x115 x26) x62))))
(assert (= x194 (or x164 x32)))
(assert (x350 x102))
(assert (x350 x319))
(assert (=> (>= 10000 x62) (not (= (x305 x29 54) x62))))
(assert (not (= (x305 x115 x26) 1461501637330902918203684832716283019655932542976)))
(assert (not (= 1099511627775 (x305 x203 56))))
(assert (x350 x340))
(assert (=> (>= 10000 x203) (not (= (x305 x29 54) x203))))
(assert (x350 x165))
(assert (x350 x169))
(assert (x193 x121))
(assert (x350 x68))
(assert (x350 x25))
(assert (=> (<= x29 10000) (not (= x29 (x305 x76 56)))))
(assert (x350 x46))
(assert (not (= (x305 x76 56) 1865579259)))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x305 x62 56))))
(assert (= x69 (and x55 x195)))
(assert (x315 x141))
(assert (x350 x346))
(assert (not (= 1000000000000000000000000000 (x305 x203 56))))
(assert (not (= (x305 x29 54) (x305 x203 56))))
(assert (not (= (x305 x115 x26) 117300739)))
(assert (not (= (x305 x115 x26) 3226110480)))
(assert (not (= (x305 x300 56) 117300739)))
(assert (=> (= (x305 x300 56) (x305 x46 56)) (= x300 x46)))
(assert (not (= (x305 x46 56) 56)))
(assert (x350 x40))
(assert (x350 x133))
(assert (not (= 3018967357 (x305 x115 x26))))
(assert (x12 x240))
(assert (x350 x215))
(assert (=> (= (x305 x300 56) (x305 x115 x26)) (and (= 56 x26) (= x300 x115))))
(assert (x350 x36))
(assert (=> (<= x25 10000) (not (= x25 (x305 x62 56)))))
(assert (not (= (x305 x300 56) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x115) (not (= x115 (x305 x300 56)))))
(assert (not (= 54 (x305 x115 x26))))
(assert (not (= (x305 x76 56) 2646777772)))
(assert (=> (<= x203 10000) (not (= x203 (x305 x115 x26)))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x305 x76 56))))
(assert (x35 x170))
(assert (not (= (x305 x203 56) 54)))
(assert (not (= 404098525 (x305 x76 56))))
(assert (x350 x277))
(assert (x350 x79))
(assert (not (= 4294967296 (x305 x115 x26))))
(assert (x84 x300))
(assert (x350 x93))
(assert (x12 x113))
(assert (not (= (x305 x203 56) 189977944)))
(assert (=> (<= x29 10000) (not (= (x305 x115 x26) x29))))
(assert (and (x140 x104 1000000000000000000000000000) (x204 x104 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x104)) (and (< (- x104 1000000000000000000000000000) (* (x198 x104 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* (x198 x104 1000000000000000000000000000) 1000000000000000000000000000) x104))) (x105 x104 1000000000000000000000000000) (x30 x104 1000000000000000000000000000)))
(assert (not (= 157198259 (x305 x46 56))))
(assert (=> (>= 10000 x226) (not (= x226 (x305 x115 x26)))))
(assert (x350 x104))
(assert (=> (>= 10000 x29) (not (= (x305 x29 54) x29))))
(assert (x350 x229))
(assert (not (= 340282366920938463463374607431768211455 (x305 x115 x26))))
(assert (not (= 500000000000000000000000000 (x305 x46 56))))
(assert (not (= 1889567281 (x305 x62 56))))
(assert (not (= (x305 x203 56) 3018967357)))
(assert (not (= (x305 x203 56) 1976722451)))
(assert (not (= 1099511627775 (x305 x76 56))))
(assert (x350 x80))
(assert (x350 x76))
(assert (not (= (x305 x29 54) 1461501637330902918203684832716283019655932542976)))
(assert (x350 x98))
(assert (x12 x142))
(assert (=> (>= 10000 x115) (not (= (x305 x76 56) x115))))
(assert (x350 x321))
(assert (=> (>= 10000 x25) (not (= (x305 x76 56) x25))))
(assert (not (= (x305 x62 56) 1000000000000000000000000000)))
(assert (not (= 1099511627775 (x305 x62 56))))
(assert (x350 x219))
(assert (not (= (x305 x29 54) 56)))
(assert (not (= 117300739 (x305 x46 56))))
(assert (not (= (x305 x29 54) 117300739)))
(assert (x193 x268))
(assert (not (= (x305 x29 54) 4294967296)))
(assert (not (= (x305 x300 56) 54)))
(assert (=> (>= 10000 x226) (not (= (x305 x300 56) x226))))
(assert (=> (>= 10000 x300) (not (= (x305 x203 56) x300))))
(assert (=> (<= x46 10000) (not (= (x305 x29 54) x46))))
(assert (x350 x247))
(assert (not (= (x305 x29 54) 1099511627775)))
(assert (x350 x227))
(assert (not (= 3018967357 (x305 x300 56))))
(assert (x350 x264))
(assert (x193 x231))
(assert (not (= (x305 x76 56) 1966461510)))
(assert (x12 x322))
(assert (x350 x48))
(assert (x350 x145))
(assert (= x32 (and x38 x109)))
(assert (not (= (x305 x62 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x84 x76))
(assert (x350 x331))
(assert (not (= (x305 x300 56) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x350 x131))
(assert (not (= (x305 x115 x26) 1461501637330902918203684832716283019655932542975)))
(assert (x350 x158))
(assert (=> (<= x62 10000) (not (= x62 (x305 x62 56)))))
(assert (=> (= (x305 x115 x26) (x305 x203 56)) (and (= x115 x203) (= 56 x26))))
(assert (not (= 2432105714 (x305 x203 56))))
(assert (= (=> (and (and (= x23 x199) (>= x181 0) (>= 1461501637330902918203684832716283019655932542975 x226) (>= 340282366920938463463374607431768211455 x99) (<= x80 1461501637330902918203684832716283019655932542975) (> 599290589 x338) (>= x25 0) (= 4 x282) (= x36 x122) (<= 0 x330) (<= x223 1461501637330902918203684832716283019655932542975) (<= 0 x246) (= 0 x261) (<= x181 255) (> 1809280292 x338) (>= x341 0) x188 (= x330 x141) (not (= x338 157198259)) (= x7 (x27 x226)) (= false x311) (>= 255 x341) (>= x287 0) (not (= x338 189977944)) (>= 340282366920938463463374607431768211455 x99) (< 0 x226) (<= 0 x321) (= 3018967357 x187) (<= 0 x99) (<= x31 1461501637330902918203684832716283019655932542975) (= x122 x290) (= false x334) (<= 0 x31) (>= 1461501637330902918203684832716283019655932542975 x36) (>= 1461501637330902918203684832716283019655932542975 x330) (= (x95 x226) x287) (= x338 404098525) (= x261 x124) (>= x36 0) (not (= x338 117300739)) (= x188 (< 0 (x27 x226))) (= false x304) (<= x23 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x246 1461501637330902918203684832716283019655932542975) (> 2432105714 x338) (>= x23 0) (>= x99 0) (<= 0 x80) (= x319 x80) (>= 1461501637330902918203684832716283019655932542975 x25) (<= x321 1099511627775) (> x7 0) (< x99 340282366920938463463374607431768211456) (<= 0 x223) (= x141 x31) (= false x292)) (and (and (and (= (<= x165 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x165 131)) (= x141 x192) (= x100 3018967357) (= x124 x44) (>= x79 0) (= x209 x290) (= x257 x277) (not (> 2835717307 x100)) (= x209 x79) (>= 1461501637330902918203684832716283019655932542975 x346) (= x131 x170) (> x272 0) (= x174 x277) (not (< x100 2432105714)) (not (= x100 2976520670)) (<= x192 1461501637330902918203684832716283019655932542975) (= x199 x172) (not (= x100 2835717307)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x219) (and (< x219 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x219))))) (= 0 x44) (= (= x170 x175) x109) (= (x125 (- x165 4)) x219) (= x149 x175) (<= x170 1461501637330902918203684832716283019655932542975) (not (< x165 4)) (= x331 (x269 1461501637330902918203684832716283019655932542975 x141)) (= x231 x337) (<= x175 1461501637330902918203684832716283019655932542975) (= x170 x98) (= (x27 x226) x272) (= x136 x231) (<= 0 x192) (= (x269 1461501637330902918203684832716283019655932542975 x22) x102) (<= 0 x346) (= x102 x331) (< x100 3226110480) (= x61 x175) (>= 1461501637330902918203684832716283019655932542975 x79)) (or x109 (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x72) (= (x269 1461501637330902918203684832716283019655932542975 x175) x115) (>= x223 0) (= x72 (x250 x108)) (= (x125 (- x72 x277)) x5) (<= 0 x72) (= x26 (x305 x29 54)) (= (x305 x115 x26) x108) (<= x223 1461501637330902918203684832716283019655932542975) (< x223 1461501637330902918203684832716283019655932542976) (not (> x257 x72)) (= x215 (x269 1461501637330902918203684832716283019655932542975 x170)) (= (x269 1461501637330902918203684832716283019655932542975 x175) x353) (= (x269 1461501637330902918203684832716283019655932542975 x170) x29)) (not x109))))) x166) x111))
(assert (= x254 (=> (and (and (and (= x251 x290) (= x236 x339) (= (x27 x226) x354) (>= 1461501637330902918203684832716283019655932542975 x241) (= x316 x251) (not (= x48 189977944)) (<= 0 x296) (< x312 340282366920938463463374607431768211456) (> x354 0) (<= x339 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 404098525 x48) (not (= 157198259 x48)) (>= 1461501637330902918203684832716283019655932542975 x316) (= x141 x11) (>= x11 0) (> 2432105714 x48) (>= 1461501637330902918203684832716283019655932542975 x11) (< x48 1809280292) (not (= x48 117300739)) (> 599290589 x48) (= 0 x230) (<= x296 340282366920938463463374607431768211455) (>= x316 0) (= x230 x124) (>= x241 0) (>= x339 0)) (and (and (= x83 false) (= true x273) (= x270 x205) (= x283 (= x15 x205)) (= 3018967357 x184) (= true x45) (= x157 x283) (= 3018967357 x63) (= x37 2646777772) (= (or (not x146) x157) x318) (= x196 3018967357)) (and (= (x269 1461501637330902918203684832716283019655932542975 x22) x133) (< x19 1976722451) (= x128 x290) (>= x235 0) (= x308 x42) (= x177 0) (= x124 x177) (not (< x19 1809280292)) (not (= x19 1865579259)) (<= 0 x93) (= x236 x308) (<= x325 1461501637330902918203684832716283019655932542975) (< x19 2432105714) (not (= 1889567281 x19)) (<= x235 1461501637330902918203684832716283019655932542975) (= x235 x141) (not (= 1809280292 x19)) (= x160 x172) (= x270 x133) (= x128 x325) (>= 1461501637330902918203684832716283019655932542975 x93) (>= x325 0) (> x40 0) (= x141 x15) (= 1966461510 x19) (= x146 (not (= x42 x160))) (= x40 (x27 x226))))) (and (= x178 (= x306 0)) (= x94 (x97 448)) (= x295 x178) (= (x97 384) x327) (= x4 (x97 416)))) x318)))
(assert (not (= (x305 x203 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x350 x81))
(assert (not (= (x305 x46 56) 1099511627775)))
(assert (x132 x121 x336))
(assert (x350 x160))
(assert (x193 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x350 x31))
(assert (x350 x122))
(assert (not (= (x305 x203 56) 599290589)))
(assert (x350 x174))
(assert (not (= 1099511627775 (x305 x115 x26))))
(assert (x350 x65))
(assert (= (or x211 x259) x195))
(assert (x350 x226))
(assert (=> (= (x305 x300 56) (x305 x62 56)) (= x62 x300)))
(assert (not (= (x305 x76 56) 1000000000)))
(assert (x193 x326))
(assert (x350 x189))
(assert (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x305 x203 56))))
(assert (=> (>= 10000 x203) (not (= (x305 x300 56) x203))))
(assert (x350 x344))
(assert (x350 x230))
(assert (x350 x177))
(assert (=> (>= 10000 x25) (not (= (x305 x115 x26) x25))))
(assert (not (= 1865579259 (x305 x62 56))))
(assert (=> (>= 10000 x76) (not (= x76 (x305 x203 56)))))
(assert (not (= 599290589 (x305 x62 56))))
(assert (not (= 1865579259 (x305 x46 56))))
(assert (not (= (x305 x29 54) 500000000000000000000000000)))
(assert (x350 x62))
(assert (x12 x67))
(assert (x350 x4))
(assert (=> (<= x62 10000) (not (= x62 (x305 x300 56)))))
(assert (not (= (x305 x29 54) 189977944)))
(assert (=> (<= x300 10000) (not (= x300 (x305 x300 56)))))
(assert (not (= (x305 x76 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x305 x62 56) 1976722451)))
(assert (x12 x332))
(assert (not (= 3226110480 (x305 x300 56))))
(assert (x350 x77))
(assert (x350 x337))
(assert (=> (>= 10000 x25) (not (= x25 (x305 x300 56)))))
(assert (=> (>= 10000 x29) (not (= (x305 x62 56) x29))))
(assert (not (= 189977944 (x305 x46 56))))
(assert (=> (<= x115 10000) (not (= (x305 x46 56) x115))))
(assert (not (= (x305 x203 56) 500000000000000000000000000)))
(assert (not (= (x305 x62 56) 54)))
(assert (not (= 3018967357 (x305 x62 56))))
(assert (= x214 (or x148 x57)))
(assert (x350 x306))
(assert (x12 x306))
(assert (x193 x117))
(assert (not (= (x305 x115 x26) 1000000000000000000000000000)))
(assert (x350 x192))
(assert (=> (= (x305 x46 56) (x305 x115 x26)) (and (= x115 x46) (= 56 x26))))
(assert (=> (= (x305 x62 56) (x305 x46 56)) (= x62 x46)))
(assert (x350 x301))
(assert (and (x123 1000000000000000000000000000 x322) (x258 1000000000000000000000000000 x322) (= (x224 1000000000000000000000000000 x322) (* 1000000000000000000000000000 x322)) (x118 1000000000000000000000000000 x322) (x91 1000000000000000000000000000 x322) (x127 1000000000000000000000000000 x322) (and (= (x224 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x322 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x322 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x322 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x322) (- (* x322 1000000000000000000000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x322))) (= (x224 1000000000000000000000000000 (- x322 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x322 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x350 x181))
(assert (x350 x206))
(assert (x350 x121))
(assert (x350 x282))
(assert (not (= 340282366920938463463374607431768211456 (x305 x29 54))))
(assert (x350 x196))
(assert (x88 x99 x332))
(assert (not (= (x305 x115 x26) 500000000000000000000000000)))
(assert (x84 x29))
(assert (not (= (x305 x203 56) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x350 x110))
(assert (x84 x115))
(assert (not (= 2432105714 (x305 x62 56))))
(assert (not (= 189977944 (x305 x115 x26))))
(assert (= (and x313 x214) x276))
(assert (x193 x142))
(assert (x350 x29))
(assert (x350 x302))
(assert (x350 x268))
(assert (not (= (x305 x46 56) 1000000000000000000000000000)))
(assert (x350 x296))
(assert (=> (>= 10000 x76) (not (= (x305 x300 56) x76))))
(assert (x350 x19))
(assert (and (x30 x336 2) (x204 x336 2) (x105 x336 2) (= (* (x198 x336 2) 2) (- x336 (x269 1 x336))) (x140 x336 2) (=> (and (< 0 2) (< 0 x336)) (and (< (- x336 2) (* (x198 x336 2) 2)) (<= (* (x198 x336 2) 2) x336)))))
(assert (x350 x279))
(assert (x12 x99))
(assert (not (= 599290589 (x305 x115 x26))))
(assert (not (= 157198259 (x305 x29 54))))
(assert (not (= (x305 x76 56) 1976722451)))
(assert (x350 x270))
(assert (x126 x286))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x305 x76 56))))
(assert (x350 x209))
(assert (=> (<= x29 10000) (not (= x29 (x305 x300 56)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x305 x203 56))))
(assert (x350 x316))
(assert (not (= 117300739 (x305 x203 56))))
(assert (not (= (x305 x62 56) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 1889567281 (x305 x76 56))))
(assert (not (= 157198259 (x305 x203 56))))
(assert (not (= (x305 x203 56) 3226110480)))
(assert (not (= (x305 x76 56) 4294967296)))
(assert (=> (<= x29 10000) (not (= x29 (x305 x46 56)))))
(assert (x350 x15))
(assert (not (= (x305 x62 56) 3226110480)))
(assert (x350 x7))
(assert (x350 x272))
(assert (x132 115792089237316195423570985008687907853269984665640064039457584007913129639935 x231))
(assert (not (= 2976520670 (x305 x29 54))))
(assert (x350 x155))
(assert (and (x123 1000000000 x277) (x258 1000000000 x277) (= (x224 1000000000 x277) (* 1000000000 x277)) (x118 1000000000 x277) (x91 1000000000 x277) (x127 1000000000 x277) (and (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x277 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000 (- x277 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x277 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x277) (- (* x277 1000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x277))) (= (x224 1000000000 (- x277 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000 (- x277 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (not (= (x305 x46 56) 3226110480)))
(assert (and (x140 x326 1000000000000000000000000000) (x204 x326 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x326)) (and (< (- x326 1000000000000000000000000000) (* (x198 x326 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* (x198 x326 1000000000000000000000000000) 1000000000000000000000000000) x326))) (x105 x326 1000000000000000000000000000) (x30 x326 1000000000000000000000000000)))
(assert (x126 x175))
(assert (not (= (x305 x203 56) 1966461510)))
(assert (x12 1000000000))
(assert (not (= (x305 x300 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x350 x326))
(assert (x84 x226))
(assert (=> (= (x305 x46 56) (x305 x203 56)) (= x203 x46)))
(assert (x350 x307))
(assert (not (= (x305 x46 56) 2646777772)))
(assert (not (= (x305 x29 54) (x305 x46 56))))
(assert (not (= (x305 x29 54) 1000000000000000000000000000)))
(assert (x350 x5))
(assert (= (=> (and (or (and (not x197) (and (< x107 340282366920938463463374607431768211456) (<= x107 340282366920938463463374607431768211455) (= (x269 1461501637330902918203684832716283019655932542975 x170) x203) (not (> x158 x107)) (= x18 x167) (= (x125 (- x107 x158)) x18) (= x73 (x305 x203 56)) (= x306 x107) x234 (= x234 (<= x107 x281)) (= x158 x65) (= (x225 x73) x107) (>= x107 0))) (and x197 (and (= 0 x65) (= 0 x306) (= x167 0)))) (and (< x158 340282366920938463463374607431768211456) (= x62 (x269 1461501637330902918203684832716283019655932542975 x170)) (= (= x158 0) x197) (>= 340282366920938463463374607431768211455 x158) x267 (= (x225 x293) x158) (<= 0 x158) (= (x305 x62 56) x293) (= (<= x158 x281) x267))) x202) x166))
(assert (=> (<= x46 10000) (not (= (x305 x62 56) x46))))
(assert (not (= 340282366920938463463374607431768211456 (x305 x300 56))))
(assert (=> (<= x226 10000) (not (= (x305 x46 56) x226))))
(assert (x193 x332))
(assert (= x148 (and x194 x197)))
(assert (not (= (x305 x203 56) 4294967296)))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x198 x141 1461501637330902918203684832716283019655932542976)) (x39 x141 1461501637330902918203684832716283019655932542976)) x141)) (x144 x141 1461501637330902918203684832716283019655932542976) (x41 x141 1461501637330902918203684832716283019655932542976) (x291 x141 1461501637330902918203684832716283019655932542976)))
(assert (not (= (x305 x76 56) (x305 x29 54))))
(assert (x350 x136))
(assert (x350 x175))
(assert (=> (<= x226 10000) (not (= (x305 x203 56) x226))))
(assert (x132 115792089237316195423570985008687907853269984665640064039457584007913129639935 x142))
(assert (x350 x171))
(assert (and (x140 x154 1000000000000000000000000000) (x204 x154 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x154)) (and (< (- x154 1000000000000000000000000000) (* (x198 x154 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* (x198 x154 1000000000000000000000000000) 1000000000000000000000000000) x154))) (x105 x154 1000000000000000000000000000) (x30 x154 1000000000000000000000000000)))
(assert (not (= (x305 x76 56) 54)))
(assert (x350 x130))
(assert (x350 x324))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x305 x29 54))))
(assert (not (= (x305 x46 56) 2432105714)))
(assert (x126 x141))
(assert (not (= (x305 x76 56) 189977944)))
(assert (not (= 4294967296 (x305 x300 56))))
(assert (not (= (x305 x29 54) 340282366920938463463374607431768211455)))
(assert (not (= 56 (x305 x300 56))))
(assert (=> (<= x25 10000) (not (= x25 (x305 x29 54)))))
(assert (x35 1461501637330902918203684832716283019655932542976))
(assert (=> (>= 10000 x300) (not (= (x305 x76 56) x300))))
(assert (=> (>= 10000 x300) (not (= (x305 x29 54) x300))))
(assert (=> (<= x76 10000) (not (= x76 (x305 x115 x26)))))
(assert (x350 x253))
(assert (not (= (x305 x62 56) 340282366920938463463374607431768211456)))
(assert (not (= (x305 x115 x26) 2646777772)))
(assert (x350 x298))
(assert (not (= (x305 x300 56) 189977944)))
(assert (not (= 2646777772 (x305 x62 56))))
(assert (x132 x120 x268))
(assert (and (x140 x344 1000000000000000000000000000) (x204 x344 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x344)) (and (< (- x344 1000000000000000000000000000) (* (x198 x344 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* (x198 x344 1000000000000000000000000000) 1000000000000000000000000000) x344))) (x105 x344 1000000000000000000000000000) (x30 x344 1000000000000000000000000000)))
(assert (= (and x38 (not x109)) x164))
(assert (x350 x61))
(assert (not (= (x305 x203 56) 340282366920938463463374607431768211455)))
(assert (not (= 2835717307 (x305 x300 56))))
(assert (x350 x139))
(assert (not (= 2835717307 (x305 x62 56))))
(assert (=> (<= x76 10000) (not (= x76 (x305 x29 54)))))
(assert (=> (>= 10000 x62) (not (= x62 (x305 x76 56)))))
(assert (x350 x345))
(assert (x88 x142 x231))
(assert (not (= 1865579259 (x305 x115 x26))))
(assert (and (x123 1000000000 x240) (x258 1000000000 x240) (= (x224 1000000000 x240) (* 1000000000 x240)) (x118 1000000000 x240) (x91 1000000000 x240) (x127 1000000000 x240) (and (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x240) (- (* x240 1000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x240))) (= (x224 1000000000 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (not (= (x305 x300 56) 1865579259)))
(assert (x350 x231))
(assert (x350 x149))
(assert (x350 x170))
(assert (not (= (x305 x300 56) 340282366920938463463374607431768211455)))
(assert (not (= 1809280292 (x305 x46 56))))
(assert (x315 x170))
(assert (x350 x114))
(assert (=> (>= 10000 x46) (not (= x46 (x305 x115 x26)))))
(assert (x88 x265 x310))
(assert (not (= (x305 x203 56) 404098525)))
(assert (x350 x44))
(assert (not (= 2835717307 (x305 x46 56))))
(assert (and (x123 1000000000 x113) (x258 1000000000 x113) (= (x224 1000000000 x113) (* 1000000000 x113)) (x118 1000000000 x113) (x91 1000000000 x113) (x127 1000000000 x113) (and (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x113) (- (* x113 1000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x113))) (= (x224 1000000000 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (not (= (x305 x300 56) 404098525)))
(assert (x193 x310))
(assert (=> (>= 10000 x203) (not (= x203 (x305 x46 56)))))
(assert (x350 x352))
(assert (x350 x310))
(assert (and (x123 1000000000000000000000000000 x67) (x258 1000000000000000000000000000 x67) (= (x224 1000000000000000000000000000 x67) (* 1000000000000000000000000000 x67)) (x118 1000000000000000000000000000 x67) (x91 1000000000000000000000000000 x67) (x127 1000000000000000000000000000 x67) (and (= (x224 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x224 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x67) (- (* x67 1000000000000000000000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x67))) (= (x224 1000000000000000000000000000 (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (not (= (x305 x115 x26) 340282366920938463463374607431768211456)))
(assert (not (= (x305 x62 56) 117300739)))
(assert (x12 x265))
(assert (x350 x257))
(check-sat)
(exit)