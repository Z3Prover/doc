(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x197 (Int) Bool)
(declare-fun x261 () Int)
(declare-fun x201 () Int)
(declare-fun x243 () Int)
(declare-fun x23 () Bool)
(declare-fun x258 () Bool)
(declare-fun x40 () Bool)
(declare-fun x93 () Int)
(declare-fun x192 () Bool)
(declare-fun x33 () Int)
(declare-fun x241 () Int)
(declare-fun x67 () Bool)
(declare-fun x22 () Int)
(declare-fun x174 () Int)
(declare-fun x16 (Int) Int)
(declare-fun x37 () Int)
(declare-fun x294 () Int)
(declare-fun x279 () Int)
(declare-fun x137 () Int)
(declare-fun x101 () Bool)
(declare-fun x269 () Int)
(declare-fun x266 () Bool)
(declare-fun x171 () Int)
(declare-fun x123 () Int)
(declare-fun x50 () Int)
(declare-fun x286 () Int)
(declare-fun x75 () Bool)
(declare-fun x288 () Bool)
(declare-fun x17 () Int)
(declare-fun x163 () Bool)
(declare-fun x250 () Int)
(declare-fun x31 () Int)
(declare-fun x105 () Bool)
(declare-fun x154 () Int)
(declare-fun x61 () Int)
(declare-fun x32 () Int)
(declare-fun x94 () Int)
(declare-fun x69 () Bool)
(declare-fun x265 () Int)
(declare-fun x249 () Int)
(declare-fun x121 () Bool)
(declare-fun x175 () Int)
(declare-fun x242 () Int)
(declare-fun x88 () Int)
(declare-fun x220 () Int)
(declare-fun x274 () Int)
(declare-fun x126 () Int)
(declare-fun x15 () Int)
(declare-fun x49 () Int)
(declare-fun x147 () Int)
(declare-fun x215 () Int)
(declare-fun x158 () Bool)
(declare-fun x39 (Int Int Int Int) Int)
(declare-fun x34 () Bool)
(declare-fun x204 () Int)
(declare-fun x12 () Int)
(declare-fun x231 () Bool)
(declare-fun x155 () Bool)
(declare-fun x132 () Bool)
(declare-fun x72 () Bool)
(declare-fun x90 () Int)
(declare-fun x182 () Int)
(declare-fun x184 () Int)
(declare-fun x144 () Bool)
(declare-fun x221 () Int)
(declare-fun x35 () Int)
(declare-fun x145 () Int)
(declare-fun x102 (Int Int) Int)
(declare-fun x46 () Bool)
(declare-fun x276 () Int)
(declare-fun x239 () Int)
(declare-fun x129 (Int Int) Int)
(declare-fun x56 () Bool)
(declare-fun x299 () Int)
(declare-fun x133 () Int)
(declare-fun x270 () Int)
(declare-fun x268 () Int)
(declare-fun x47 () Int)
(declare-fun x89 () Int)
(declare-fun x43 () Bool)
(declare-fun x108 () Int)
(declare-fun x200 (Int Int) Int)
(declare-fun x180 () Int)
(declare-fun x122 () Int)
(declare-fun x164 () Bool)
(declare-fun x131 () Int)
(declare-fun x295 () Int)
(declare-fun x160 (Int) Int)
(declare-fun x165 () Int)
(declare-fun x26 () Int)
(declare-fun x104 () Bool)
(declare-fun x236 () Int)
(declare-fun x4 () Int)
(declare-fun x141 () Int)
(declare-fun x282 () Int)
(declare-fun x198 () Bool)
(declare-fun x218 () Int)
(declare-fun x21 () Int)
(declare-fun x170 () Bool)
(declare-fun x183 () Int)
(declare-fun x287 () Bool)
(declare-fun x109 (Int Int) Int)
(declare-fun x103 () Bool)
(declare-fun x169 () Int)
(declare-fun x68 () Int)
(declare-fun x143 () Int)
(declare-fun x159 () Int)
(declare-fun x213 () Bool)
(declare-fun x260 () Int)
(declare-fun x53 () Int)
(declare-fun x225 () Int)
(declare-fun x54 () Bool)
(declare-fun x202 () Int)
(declare-fun x115 () Int)
(declare-fun x211 () Int)
(declare-fun x52 () Int)
(declare-fun x86 () Int)
(declare-fun x9 () Int)
(declare-fun x51 (Int Int) Int)
(declare-fun x227 () Int)
(declare-fun x278 () Int)
(declare-fun x178 () Bool)
(declare-fun x187 (Int) Int)
(declare-fun x284 () Int)
(declare-fun x95 (Int Int) Int)
(declare-fun x207 () Int)
(declare-fun x81 (Int) Int)
(declare-fun x136 (Int Int) Int)
(declare-fun x297 (Int) Int)
(declare-fun x55 () Bool)
(declare-fun x246 () Int)
(declare-fun x199 () Int)
(declare-fun x301 () Bool)
(declare-fun x292 () Int)
(declare-fun x73 () Bool)
(declare-fun x151 () Bool)
(declare-fun x289 (Int Int) Int)
(declare-fun x119 () Int)
(declare-fun x125 (Int) Int)
(declare-fun x3 () Int)
(declare-fun x44 () Int)
(declare-fun x100 () Int)
(declare-fun x59 () Int)
(declare-fun x57 () Int)
(declare-fun x134 () Int)
(declare-fun x186 () Bool)
(declare-fun x302 () Int)
(declare-fun x106 (Int Int) Int)
(declare-fun x240 () Int)
(declare-fun x99 () Int)
(declare-fun x87 () Bool)
(declare-fun x255 () Bool)
(declare-fun x98 () Int)
(declare-fun x92 () Int)
(declare-fun x190 () Int)
(declare-fun x78 () Int)
(declare-fun x224 (Int) Int)
(declare-fun x66 () Int)
(declare-fun x146 () Bool)
(declare-fun x222 (Int) Int)
(declare-fun x139 () Int)
(declare-fun x11 () Int)
(declare-fun x176 () Int)
(declare-fun x205 () Bool)
(declare-fun x5 () Int)
(declare-fun x2 () Int)
(declare-fun x259 () Bool)
(declare-fun x283 () Int)
(declare-fun x10 () Int)
(declare-fun x179 () Bool)
(declare-fun x130 () Int)
(declare-fun x42 () Int)
(declare-fun x303 () Int)
(declare-fun x233 () Int)
(declare-fun x237 () Bool)
(declare-fun x293 () Int)
(declare-fun x117 () Bool)
(declare-fun x177 () Int)
(declare-fun x252 () Bool)
(declare-fun x167 () Int)
(declare-fun x285 () Int)
(declare-fun x216 () Int)
(declare-fun x70 () Int)
(declare-fun x140 () Bool)
(declare-fun x212 () Int)
(declare-fun x116 () Int)
(declare-fun x228 () Int)
(declare-fun x214 () Int)
(declare-fun x251 () Int)
(declare-fun x45 () Int)
(declare-fun x138 () Bool)
(declare-fun x194 () Bool)
(declare-fun x217 (Int) Int)
(declare-fun x290 () Int)
(declare-fun x206 (Int Int) Int)
(declare-fun x83 () Int)
(declare-fun x13 () Int)
(declare-fun x74 () Bool)
(declare-fun x191 () Int)
(declare-fun x296 () Int)
(declare-fun x63 () Int)
(declare-fun x264 () Bool)
(declare-fun x76 () Int)
(declare-fun x20 () Int)
(declare-fun x36 () Int)
(declare-fun x28 () Int)
(declare-fun x291 () Bool)
(declare-fun x234 () Int)
(declare-fun x230 () Bool)
(declare-fun x24 () Int)
(declare-fun x14 () Int)
(declare-fun x272 () Int)
(declare-fun x263 () Bool)
(declare-fun x110 (Int) Int)
(declare-fun x298 () Int)
(declare-fun x168 () Int)
(declare-fun x280 () Int)
(declare-fun x58 () Bool)
(declare-fun x156 () Int)
(declare-fun x120 () Int)
(declare-fun x111 () Int)
(declare-fun x6 () Bool)
(declare-fun x256 () Int)
(declare-fun x128 () Bool)
(define-fun x172 ((x96 Int)) Int (ite (and (>= x96 0) (< x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x96 (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x114 ((x96 Int)) Int (ite (and (< x96 0) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x96)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96) x96))
(define-fun x127 ((x96 Int)) Int (ite (and (< x96 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x96 0)) x96 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x96) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96)) (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x96 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x96)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96) (x136 x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x223 ((x275 Int)) Bool (and (>= x275 0) (< x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x62 ((x275 Int)) Bool (and (<= 0 x275) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x275)))
(define-fun x84 ((x275 Int) (x271 Int)) Bool (=> (and (> x275 0) (< 0 x271)) (and (>= x275 (x129 x275 x271)) (<= 0 (x129 x275 x271)))))
(define-fun x48 ((x275 Int) (x271 Int)) Bool (=> (and (and (<= 0 x275) (< x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (<= 1 x271) (< x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x275 x271)) (>= (x129 x275 x271) 0))))
(define-fun x149 ((x275 Int) (x271 Int)) Bool (=> (and (> x271 1) (< x271 x275)) (> x275 (x129 x275 x271))))
(define-fun x195 ((x275 Int) (x271 Int)) Bool (=> (and (< 0 x271) (< 0 x275)) (= (> x271 x275) (= (x129 x275 x271) 0))))
(define-fun x150 ((x275 Int)) Bool (= 0 (x129 0 x275)))
(define-fun x157 ((x275 Int)) Bool (= (x129 x275 1) x275))
(define-fun x97 ((x275 Int)) Bool (=> (not (= 0 x275)) (= (x129 x275 x275) 1)))
(define-fun x262 ((x275 Int)) Bool (and (x97 x275) (x150 x275) (x157 x275)))
(define-fun x91 ((x275 Int)) Bool (and (= x275 (x289 x275 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x289 115792089237316195423570985008687907853269984665640564039457584007913129639935 x275) x275)))
(define-fun x193 ((x275 Int)) Bool (and (= 0 (x289 0 x275)) (= (x289 x275 0) 0)))
(define-fun x229 ((x275 Int)) Bool (= (x289 x275 x275) x275))
(define-fun x118 ((x275 Int)) Bool (and (x229 x275) (x193 x275) (x91 x275)))
(define-fun x41 ((x275 Int) (x271 Int)) Bool (= (x289 x275 x271) (x289 x271 x275)))
(define-fun x79 ((x275 Int) (x271 Int)) Bool (and (=> (>= x275 0) (>= x275 (x289 x275 x271))) (>= (x289 x275 x271) 0) (=> (<= 0 x271) (>= x271 (x289 x275 x271)))))
(define-fun x142 ((x275 Int) (x271 Int)) Bool (and (x79 x275 x271) (x41 x275 x271)))
(define-fun x244 ((x275 Int)) Bool (= (x289 x275 255) (x136 x275 256)))
(define-fun x112 ((x275 Int)) Bool (and (x244 x275) (x142 x275 255)))
(define-fun x153 ((x275 Int) (x271 Int)) Bool (and (>= (x136 x275 x271) 0) (> x271 (x136 x275 x271))))
(define-fun x273 ((x275 Int) (x271 Int)) Bool (=> (and (< 0 x271) (>= x275 0)) (= (= (x136 x275 x271) x275) (> x271 x275))))
(define-fun x281 ((x275 Int) (x271 Int)) Bool (=> (and (and (< x275 (+ x271 x271)) (<= x271 x275)) (> x271 0)) (= (- x275 x271) (x136 x275 x271))))
(define-fun x19 ((x275 Int)) Bool (= 0 (x136 0 x275)))
(define-fun x267 ((x275 Int)) Bool (= 0 (x136 x275 1)))
(define-fun x18 ((x275 Int)) Bool (= 0 (x136 x275 x275)))
(define-fun x226 ((x275 Int)) Bool (and (x18 x275) (x19 x275) (x267 x275)))
(define-fun x148 ((x275 Int) (x271 Int)) Bool (=> (and (> x271 0) (< 0 x275)) (= (= x271 (x129 (x127 (x106 x275 x271)) x275)) (< (x106 x275 x271) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x247 ((x275 Int) (x271 Int)) Bool (=> (and (not (= x275 0)) (not (= 0 x271))) (and (= (x129 (x106 x275 x271) x275) x271) (= x275 (x129 (x106 x275 x271) x271)))))
(define-fun x65 ((x275 Int) (x271 Int)) Bool (=> (and (> x275 0) (< 0 x271)) (= (> (x106 x275 x271) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (x129 115792089237316195423570985008687907853269984665640564039457584007913129639935 x275) x271))))
(define-fun x188 ((x275 Int) (x271 Int)) Bool (and (= (x127 (x106 x275 x271)) (x127 (x106 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) x271))) (= (x127 (x106 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x127 (x106 x275 x271))) (= (x127 (x106 x275 x271)) (x127 (x106 x275 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x82 ((x275 Int) (x271 Int)) Bool (and (=> (and (and (> x275 0) (<= x275 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x271 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x271 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x129 57896044618658097711785492504343953926634992332820282019728792003956564819968 x275) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x271)) (>= (x106 x275 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x275) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x275)) (and (< 0 x271) (<= x271 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x106 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) x271)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x275) (x129 57896044618658097711785492504343953926634992332820282019728792003956564819968 x271)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x271) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x271)) (and (<= x275 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x275))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x275) (x129 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x271))) (<= (x106 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x271) (< 0 x271)) (and (< 0 x275) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x275))) (= (<= (x106 x275 x271) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x129 57896044618658097711785492504343953926634992332820282019728792003956564819967 x271) x275)))))
(define-fun x257 ((x275 Int)) Bool (and (= 0 (x106 0 x275)) (= (x106 x275 0) 0)))
(define-fun x245 ((x275 Int)) Bool (and (= (x106 1 x275) x275) (= x275 (x106 x275 1))))
(define-fun x7 ((x275 Int)) Bool (and (x245 x275) (x257 x275)))
(define-fun x203 ((x275 Int)) Bool (= (x136 x275 26959946667150639794667015087019630673637144422540572481103610249216) (x289 x275 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x248 ((x275 Int)) Bool (and (x142 x275 26959946667150639794667015087019630673637144422540572481103610249215) (x203 x275)))
(define-fun x8 ((x275 Int)) Bool (= (x136 x275 1461501637330902918203684832716283019655932542976) (x289 x275 1461501637330902918203684832716283019655932542975)))
(define-fun x25 ((x275 Int)) Bool (and (x8 x275) (x142 x275 1461501637330902918203684832716283019655932542975)))
(define-fun x189 ((x275 Int)) Bool (and (= (x206 x275 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x206 115792089237316195423570985008687907853269984665640564039457584007913129639935 x275))))
(define-fun x162 ((x275 Int)) Bool (and (= x275 (x206 0 x275)) (= x275 (x206 x275 0))))
(define-fun x1 ((x275 Int)) Bool (= x275 (x206 x275 x275)))
(define-fun x219 ((x275 Int)) Bool (and (x189 x275) (x1 x275) (x162 x275)))
(define-fun x29 ((x275 Int) (x271 Int)) Bool (= (x206 x271 x275) (x206 x275 x271)))
(define-fun x232 ((x275 Int) (x271 Int)) Bool (and (=> (<= 0 x271) (<= x271 (x206 x275 x271))) (=> (>= x275 0) (>= (x206 x275 x271) x275)) (>= (+ x275 x271) (x206 x275 x271))))
(define-fun x209 ((x275 Int) (x271 Int)) Bool (and (x29 x275 x271) (x232 x275 x271)))
(define-fun x85 ((x107 Int)) Int (x16 x107))
(define-fun x254 ((x107 Int)) Int (ite (= x107 164) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x81 x107)))
(define-fun x30 ((x107 Int)) Int (ite (= x107 128) 36 (x254 x107)))
(define-fun x38 ((x107 Int)) Int (ite (= x107 160) x265 (x30 x107)))
(define-fun x238 ((x107 Int)) Int (ite (= x107 232) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x38 x107)))
(define-fun x196 ((x107 Int)) Int (ite (= x107 196) 36 (x238 x107)))
(define-fun x71 ((x107 Int)) Int (ite (= x107 228) x283 (x196 x107)))
(define-fun x235 ((x107 Int)) Int (ite x288 (x38 x107) (x71 x107)))
(define-fun x124 ((x107 Int)) Int (ite (= x107 x20) 0 (x235 x107)))
(define-fun x27 ((x107 Int)) Int (ite (= x228 x107) x207 (x124 x107)))
(define-fun x80 ((x107 Int)) Int (ite (= x107 x93) x90 (x27 x107)))
(define-fun x253 ((x107 Int)) Int (ite x121 (x81 x107) (ite x263 (x235 x107) (x80 x107))))
(define-fun x161 ((x107 Int)) Int (ite (= x284 x107) x165 (x253 x107)))
(define-fun x181 ((x107 Int)) Int (ite (= x220 x107) x137 (x161 x107)))
(define-fun x152 ((x107 Int)) Int (ite (= x107 x68) x100 (x181 x107)))
(define-fun x60 ((x107 Int)) Int (ite (= x42 x107) x44 (x152 x107)))
(define-fun x277 ((x107 Int)) Int (ite (and (> (+ x89 x116) x107) (>= x107 x116)) (x16 (+ (- x107 x116) x294)) (x60 x107)))
(define-fun x135 ((x107 Int)) Int (ite (= x204 x107) 0 (x277 x107)))
(define-fun x166 ((x107 Int)) Int (ite (= x107 x292) x83 (x224 x107)))
(assert (not (= 2510660263 (x95 x175 1))))
(assert (=> (>= 10000 x50) (not (= x50 (+ 3 x261)))))
(assert (not (= (x95 x276 4) 292666793)))
(assert (not (= 2510660263 (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (<= x61 10000) (not (= x61 (x95 x122 1)))))
(assert (=> (>= 10000 x21) (not (= x21 (x95 x61 1)))))
(assert (x62 x9))
(assert (=> (= (x95 x123 x17) (x95 x63 x279)) (and (= x63 x123) (= x17 x279))))
(assert (x112 x290))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x95 x70 x256))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x95 x242 x37))))
(assert (=> (<= x24 10000) (not (= x24 (x95 x63 x279)))))
(assert (not (= (+ x57 3) (x95 x175 1))))
(assert (x62 x218))
(assert (=> (<= x123 10000) (not (= (x95 x63 x279) x123))))
(assert (not (= 292666793 (x95 x243 x227))))
(assert (x62 x37))
(assert (not (= (x95 x243 x227) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= (x95 x63 x279) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= (+ 3 x216) 292666793)))
(assert (=> (>= 10000 x24) (not (= x24 (x95 x21 x154)))))
(assert (not (= (x95 x21 x154) 32)))
(assert (=> (<= x175 10000) (not (= x175 (x95 x243 x227)))))
(assert (= (and x213 x264) x151))
(assert (= x105 (=> (and (and (>= x47 0) (= x227 (x95 x122 1)) (<= 0 x269) (>= 1461501637330902918203684832716283019655932542975 x122) (= (x125 x214) x133) (> x159 0) (> x236 0) (= x176 388749022) (= (> (x187 x236) 0) x164) (= x261 (x95 x243 x227)) (= x128 (not x56)) (= x256 (+ 3 x261)) (= x32 (x95 x70 x256)) (>= 1461501637330902918203684832716283019655932542975 x59) (= x249 (ite x258 1 0)) (<= x182 1461501637330902918203684832716283019655932542975) (= (x289 255 x290) x270) (>= x133 0) (= x241 464684736) (= (x289 x3 x295) x13) (<= 0 x130) (= x47 (x125 x236)) (<= x214 1461501637330902918203684832716283019655932542975) (not (= x236 x182)) x170 (= (= 0 x13) x56) (= x138 (not x128)) (<= x4 1461501637330902918203684832716283019655932542975) (= x258 (not x138)) (= x43 (< 0 (x187 x214))) x43 (= (< 0 (x187 x182)) x170) (= x295 (x102 1 x270)) (not (= x236 x214)) (<= 0 x274) (= x75 false) (= (x125 x182) x130) (= 4 x115) (= x15 x59) (<= 0 x59) x164 (= x5 x274) (<= x274 1461501637330902918203684832716283019655932542975) (= (x187 x214) x159) (<= x269 1461501637330902918203684832716283019655932542975) (< 0 x182) (not (= x214 x182)) (> 2510660263 x241) (= x52 x290) (not (= x241 388749022)) (<= x3 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x109 x290 8) x70) (<= 0 x3) (= x86 x243) (= x87 false) (= false x192) (>= 1461501637330902918203684832716283019655932542975 x236) (= false x146) (not (= x241 292666793)) (<= 0 x4) (= (x224 x32) x3) (> x214 0) (= x4 x122)) (and (<= x10 1461501637330902918203684832716283019655932542975) (not (< x9 x278)) (= x66 x211) (<= x120 1461501637330902918203684832716283019655932542975) (not (or (> x94 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x94 128) (= true (<= x94 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= (x127 (* 32 x44)) x302) (= x78 x276) (= x67 (not (= x249 0))) (= (x114 (- x9 4)) x94) (= x123 x92) (> 256 x126) (< x293 2510660263) (= x45 x233) (not (< x9 4)) (not (= 2 x215)) (= x237 x67) (= x201 (x95 x276 4)) (or (and (> x171 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x9)) (and (= (<= x9 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x171 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x9 x171))) (= x303 x120) (<= x215 115792089237316195423570985008687907853269984665640564039457584007913129639935) (and (< 131 x9) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x9) true)) (> x145 0) (= x167 x276) (= (x16 x14) x44) (= x278 (x172 (+ x294 x302))) (<= 0 x10) (= (x172 (+ x14 31)) x171) (>= x126 0) (not (> x44 18446744073709551615)) (= (> x126 0) x287) (= (x217 x201) x126) (not (= x293 292666793)) (= 388749022 x293) (= x285 x165) (>= x215 0) (= 0 x66) (= x15 x10) (<= x298 1461501637330902918203684832716283019655932542975) (not (> x12 18446744073709551615)) (<= 0 x298) (= (x172 (+ x14 32)) x294) (>= 1461501637330902918203684832716283019655932542975 x276) (= (x172 (+ x260 4)) x14) (= x123 x168) (= x88 x303) (<= x126 255) (= x260 x12) (= x145 (x187 x214)) (<= 0 x120))) (and (=> (and x287 (= 128 x68)) x178) (=> (and (not x287) (and (or (and (and (= x228 196) (= x221 x108)) x117) (and (and (= x98 (ite x255 1 0)) (= x108 (ite x54 1 0)) (= x134 1) (= 264 x228) (= (x197 115792089210356248756420345214020892766250353992003419616917011526809519390720) x255) (= (x172 (+ x199 904250603428552709895185118199468575982109441609966099573332780532423983104)) x283) (= x225 (x196 228)) (= x199 (x289 26959946667150639794667015087019630673637144422540572481103610249215 x225)) (= x252 false) (= (= x212 0) x54) (= (ite x252 x134 (ite (< 0 x98) 1 0)) x212)) (not x117))) (and (= x144 (x197 904250603428552709895185118199468575982109441609966099573332780532423983104)) (= (x30 160) x286) (= x221 (ite (> (ite x144 1 0) 0) 1 0)) (= x49 (x289 26959946667150639794667015087019630673637144422540572481103610249215 x286)) (= x265 (x172 (+ x49 904250603428552709895185118199468575982109441609966099573332780532423983104))) (= (= x221 0) x117)))) x259)))))
(assert (x223 x50))
(assert (not (= 464684736 (x95 x175 1))))
(assert (x62 x130))
(assert (=> (<= x21 10000) (not (= (+ 3 x261) x21))))
(assert (=> (>= 10000 x61) (not (= (x95 x61 1) x61))))
(assert (=> (<= x122 10000) (not (= (x95 x242 x37) x122))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x50 x268))))
(assert (=> (>= 10000 x70) (not (= (+ x261 3) x70))))
(assert (not (= (x95 x243 x227) (+ x57 1))))
(assert (not (= (x95 x63 x279) 388749022)))
(assert (x226 1461501637330902918203684832716283019655932542976))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x95 x50 x268))))
(assert (not (= (x95 x21 x154) 4)))
(assert (=> (= (x95 x175 1) (x95 x122 1)) (= x175 x122)))
(assert (x226 (ite (> 256 x191) (x200 2 x191) 0)))
(assert (x226 (* 79228162514264337593543950336 x15)))
(assert (=> (<= x61 10000) (not (= x61 (+ x216 3)))))
(assert (x62 x98))
(assert (not (= (x95 x63 x279) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (>= 10000 x24) (not (= (x95 x123 x17) x24))))
(assert (= (x102 1 x191) (x127 (ite (> 256 x191) (x200 2 x191) 0))))
(assert (not (= (x95 x242 x37) 18446744073709551615)))
(assert (x62 x220))
(assert (=> (>= 10000 x175) (not (= x175 (+ x57 1)))))
(assert (x223 x57))
(assert (=> (<= x243 10000) (not (= x243 (+ x57 2)))))
(assert (= 0 (x81 x93)))
(assert (and (x273 x286 26959946667150639794667015087019630673637144422540572481103610249216) (x281 x286 26959946667150639794667015087019630673637144422540572481103610249216) (x153 x286 26959946667150639794667015087019630673637144422540572481103610249216) (=> (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (= x286 (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x129 x286 26959946667150639794667015087019630673637144422540572481103610249216)) (x136 x286 26959946667150639794667015087019630673637144422540572481103610249216))))))
(assert (=> (>= 10000 x214) (not (= x214 (+ x57 2)))))
(assert (= (x109 x290 8) (x129 x290 256)))
(assert (=> (<= (x109 x137 96) 10000) (not (= (x95 x123 x17) (x109 x137 96)))))
(assert (x223 x70))
(assert (=> (<= x180 10000) (not (= x180 (x95 x61 1)))))
(assert (not (= (+ x57 3) (+ x57 2))))
(assert (not (= (x95 x50 x268) (+ 1 x57))))
(assert (not (= (+ 2 x57) (x95 x242 x37))))
(assert (=> (<= x243 10000) (not (= x243 (x95 x122 1)))))
(assert (not (= (x95 x61 1) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= 1 (+ x261 3))))
(assert (x62 x86))
(assert (=> (<= x63 10000) (not (= x63 (x95 x50 x268)))))
(assert (not (= (+ x57 2) 2510660263)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x95 x61 1))))
(assert (x62 x274))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (x95 x50 x268))))
(assert (=> (<= x50 10000) (not (= x50 (x95 x175 1)))))
(assert (= (x102 1 x156) (x127 (ite (< x156 256) (x200 2 x156) 0))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x21 x154))))
(assert (=> (>= 10000 x214) (not (= x214 (x95 x242 x37)))))
(assert (=> (<= x24 10000) (not (= x24 (x95 x50 x268)))))
(assert (x62 x286))
(assert (not (= (+ x57 1) (+ x57 2))))
(assert (x142 x280 x33))
(assert (=> (= (x95 x243 x227) (x95 x21 x154)) (and (= x154 x227) (= x243 x21))))
(assert (=> (>= 10000 x123) (not (= x123 (x95 x123 x17)))))
(assert (not (= (x95 x70 x256) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x118 x3))
(assert (x62 x295))
(assert (not (= (x95 x276 4) (x95 x122 1))))
(assert (= (=> (and (= (x135 x42) x131) (= x101 (not (< 1 x131)))) (and (=> (= x169 x28) x6) x101)) x231))
(assert (x223 x154))
(assert (x62 x171))
(assert (not (= 4 (x95 x61 1))))
(assert (let ((x271 (x200 2 x156))) (and (x148 1 x271) (x65 1 x271) (= (x106 1 x271) (* x271 1)) (x82 1 x271) (x247 1 x271) (and (= (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x271) (- (* 1 x271) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x271))) (= (- (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x188 1 x271))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x95 x175 1))))
(assert (=> (>= 10000 x24) (not (= (x95 x276 4) x24))))
(assert (=> (= (x95 x122 1) (x95 x61 1)) (= x122 x61)))
(assert (let ((x275 (ite (< x156 256) (x200 2 x156) 0))) (and (x273 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x281 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x153 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x275 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x136 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (=> (>= 10000 x180) (not (= x180 (+ 3 x216)))))
(assert (=> (<= (x109 x137 96) 10000) (not (= (x109 x137 96) (x95 x243 x227)))))
(assert (=> (>= 10000 x70) (not (= x70 (+ x216 3)))))
(assert (x118 x165))
(assert (not (= (+ 2 x57) (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (>= 10000 x182) (not (= (x95 x63 x279) x182))))
(assert (not (= (x95 x243 x227) 4)))
(assert (x62 x211))
(assert (=> (>= 10000 x70) (not (= x70 (x95 x21 x154)))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (+ 3 x57))))
(assert (=> (>= 10000 x165) (not (= x165 (x95 x21 x154)))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (x95 x242 x37)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 2 x57))))
(assert (=> (<= x243 10000) (not (= x243 (x95 x276 4)))))
(assert (not (= 4 (x95 x242 x37))))
(assert (not (= (+ 3 x216) (x95 x242 x37))))
(assert (=> (>= 10000 x123) (not (= x123 (+ x57 2)))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (x95 x21 x154)))))
(assert (=> (>= 10000 x214) (not (= (x95 x123 x17) x214))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x70 x256))))
(assert (= (x81 160) 0))
(assert (=> (<= x21 10000) (not (= x21 (x95 x21 x154)))))
(assert (x7 (x200 2 x191)))
(assert (not (= (+ 2 x57) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x226 (ite (< x270 256) (x200 2 x270) 0)))
(assert (x262 x137))
(assert (x118 x225))
(assert (x7 (x200 2 x141)))
(assert (=> (>= 10000 x123) (not (= (x95 x61 1) x123))))
(assert (not (= (x95 x243 x227) 32)))
(assert (=> (<= x180 10000) (not (= x180 (+ 2 x57)))))
(assert (=> (<= x63 10000) (not (= (x95 x123 x17) x63))))
(assert (=> (<= x24 10000) (not (= x24 (+ 3 x261)))))
(assert (not (= 2510660263 (x95 x50 x268))))
(assert (x62 x133))
(assert (not (= (+ 2 x57) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x226 x31))
(assert (=> (>= 10000 x182) (not (= (x95 x70 x256) x182))))
(assert (x262 x272))
(assert (=> (>= 10000 x63) (not (= x63 (x95 x70 x256)))))
(assert (not (= (x95 x63 x279) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x182) (not (= (x95 x122 1) x182))))
(assert (=> (<= x70 10000) (not (= (x95 x242 x37) x70))))
(assert (not (= 52 (+ 3 x57))))
(assert (not (= (x95 x175 1) (x95 x276 4))))
(assert (=> (= (x95 x242 x37) (x95 x276 4)) (and (= x242 x276) (= 4 x37))))
(assert (x62 x66))
(assert (= x40 (and (not x213) x264)))
(assert (x62 x15))
(assert (=> (>= 10000 x236) (not (= x236 (x95 x123 x17)))))
(assert (=> (<= x175 10000) (not (= x175 (x95 x242 x37)))))
(assert (=> (<= x243 10000) (not (= (x95 x63 x279) x243))))
(assert (x62 x228))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (+ x57 2)))))
(assert (=> (<= x180 10000) (not (= x180 (x39 52 32 x165 (x109 x137 96))))))
(assert (x62 x33))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x95 x122 1))))
(assert (x62 x212))
(assert (= (and x74 x46) x263))
(assert (not (= 292666793 (x39 52 32 x165 (x109 x137 96)))))
(assert (not (= (+ x261 3) (x95 x50 x268))))
(assert (=> (= (x95 x276 4) (x95 x21 x154)) (and (= 4 x154) (= x276 x21))))
(assert (and (x273 x31 26959946667150639794667015087019630673637144422540572481103610249216) (x281 x31 26959946667150639794667015087019630673637144422540572481103610249216) (x153 x31 26959946667150639794667015087019630673637144422540572481103610249216) (=> (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (= x31 (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x129 x31 26959946667150639794667015087019630673637144422540572481103610249216)) (x136 x31 26959946667150639794667015087019630673637144422540572481103610249216))))))
(assert (not (= (x95 x242 x37) (+ x57 1))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 18446744073709551615)))
(assert (not (= (x95 x276 4) 464684736)))
(assert (not (= (+ 3 x57) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (=> (>= 10000 x180) (not (= x180 (x95 x123 x17)))))
(assert (=> (>= 10000 x175) (not (= (x95 x61 1) x175))))
(assert (x62 x156))
(assert (not (= (x95 x276 4) 18446744073709551615)))
(assert (=> (= (x95 x242 x37) (x95 x175 1)) (and (= 1 x37) (= x175 x242))))
(assert (=> (<= x63 10000) (not (= x63 (+ x216 3)))))
(assert (not (= 388749022 (+ 1 x57))))
(assert (x62 x108))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (+ x216 3))))
(assert (=> (<= x37 10000) (not (= x37 (x95 x242 x37)))))
(assert (=> (<= x276 10000) (not (= x276 (+ x216 3)))))
(assert (x62 x184))
(assert (x62 x13))
(assert (x62 x269))
(assert (=> (>= 10000 x276) (not (= (x95 x63 x279) x276))))
(assert (x62 x4))
(assert (not (= 1 (x95 x61 1))))
(assert (=> (<= x21 10000) (not (= x21 (x95 x70 x256)))))
(assert (x118 x35))
(assert (=> (>= 10000 x175) (not (= x175 (x95 x175 1)))))
(assert (not (= 4 (+ x261 3))))
(assert (=> (>= 10000 x243) (not (= (+ 3 x57) x243))))
(assert (=> (>= 10000 x122) (not (= x122 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= 464684736 (x95 x243 x227))))
(assert (not (= (+ 1 x57) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (= (x95 x122 1) (x95 x243 x227)) (and (= x227 1) (= x122 x243))))
(assert (x219 x11))
(assert (x62 x137))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x242 x37))))
(assert (=> (<= x243 10000) (not (= (+ x57 1) x243))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (>= 10000 x236) (not (= (+ 3 x216) x236))))
(assert (=> (<= x123 10000) (not (= (x39 52 32 x165 (x109 x137 96)) x123))))
(assert (=> (>= 10000 x122) (not (= x122 (+ 3 x216)))))
(assert (not (= (x95 x70 x256) 32)))
(assert (not (= (x95 x122 1) 464684736)))
(assert (=> (>= 10000 x276) (not (= (+ 3 x57) x276))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x95 x122 1))))
(assert (not (= 292666793 (x95 x122 1))))
(assert (not (= 388749022 (+ x216 3))))
(assert (= x55 true))
(assert (not (= (+ 3 x216) 32)))
(assert (=> (= (x95 x242 x37) (x95 x50 x268)) (and (= x242 x50) (= x37 x268))))
(assert (=> (<= x165 10000) (not (= x165 (x95 x242 x37)))))
(assert (=> (>= 10000 x21) (not (= (x95 x242 x37) x21))))
(assert (=> (<= x63 10000) (not (= (x95 x122 1) x63))))
(assert (=> (= (x95 x50 x268) (x95 x21 x154)) (and (= x50 x21) (= x268 x154))))
(assert (=> (<= x24 10000) (not (= x24 (+ x57 1)))))
(assert (not (= (+ x57 1) (x95 x175 1))))
(assert (x262 x290))
(assert (=> (>= 10000 x175) (not (= x175 (+ 3 x261)))))
(assert (=> (<= x70 10000) (not (= x70 (x95 x243 x227)))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (+ 3 x57) (x109 x137 96)))))
(assert (=> (>= 10000 x24) (not (= (x95 x122 1) x24))))
(assert (x62 x10))
(assert (not (= 1 (+ x216 3))))
(assert (x226 (ite (< x156 256) (x200 2 x156) 0)))
(assert (not (= (x95 x63 x279) 464684736)))
(assert (=> (>= 10000 x165) (not (= x165 (x95 x243 x227)))))
(assert (=> (>= 10000 x165) (not (= x165 (x95 x61 1)))))
(assert (not (= (x95 x243 x227) (+ x216 3))))
(assert (not (= 18446744073709551615 (x95 x243 x227))))
(assert (x62 x89))
(assert (not (= (+ x261 3) 18446744073709551615)))
(assert (x118 x276))
(assert (=> (>= 10000 x180) (not (= (x95 x243 x227) x180))))
(assert (not (= (+ x261 3) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (=> (>= 10000 x182) (not (= x182 (+ x261 3)))))
(assert (not (= (+ x216 3) (x95 x21 x154))))
(assert (not (= (+ 3 x261) (x95 x61 1))))
(assert (=> (>= 10000 x70) (not (= x70 (x95 x61 1)))))
(assert (not (= (x95 x21 x154) 52)))
(assert (= (or x263 x103) x179))
(assert (=> (>= 10000 x180) (not (= (x95 x122 1) x180))))
(assert (x62 x31))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x95 x242 x37))))
(assert (not (= (+ 2 x57) (+ x216 3))))
(assert (x223 x236))
(assert (=> (>= 10000 x276) (not (= (x95 x242 x37) x276))))
(assert (x226 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (<= x236 10000) (not (= x236 (+ 2 x57)))))
(assert (let ((x275 (* 79228162514264337593543950336 x15))) (and (x273 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x281 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x153 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x275 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x136 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (=> (>= 10000 x63) (not (= x63 (x95 x63 x279)))))
(assert (not (= 388749022 (x95 x175 1))))
(assert (not (= (x95 x122 1) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (x95 x242 x37))))
(assert (not (= (+ 3 x57) (x95 x123 x17))))
(assert (and (x48 x137 79228162514264337593543950336) (x84 x137 79228162514264337593543950336) (x149 x137 79228162514264337593543950336) (= (- x137 (x289 79228162514264337593543950335 x137)) (* (x129 x137 79228162514264337593543950336) 79228162514264337593543950336)) (x195 x137 79228162514264337593543950336) (=> (and (< 0 x137) (> 79228162514264337593543950336 0)) (and (< (- x137 79228162514264337593543950336) (* (x129 x137 79228162514264337593543950336) 79228162514264337593543950336)) (>= x137 (* 79228162514264337593543950336 (x129 x137 79228162514264337593543950336)))))))
(assert (=> (>= 10000 x122) (not (= x122 (x95 x50 x268)))))
(assert (not (= 388749022 (+ x57 3))))
(assert (not (= 464684736 (+ x57 1))))
(assert (=> (<= x180 10000) (not (= (x95 x242 x37) x180))))
(assert (=> (= (x95 x243 x227) (x95 x61 1)) (and (= x227 1) (= x243 x61))))
(assert (=> (= (x95 x21 x154) (x95 x61 1)) (and (= x154 1) (= x21 x61))))
(assert (=> (>= 10000 x236) (not (= x236 (+ x261 3)))))
(assert (not (= (x95 x50 x268) 52)))
(assert (x62 x134))
(assert (=> (<= x37 10000) (not (= (+ x216 3) x37))))
(assert (x62 x21))
(assert (x226 x272))
(assert (not (= 292666793 (x95 x61 1))))
(assert (not (= (x95 x70 x256) (+ 3 x57))))
(assert (=> (>= 10000 x21) (not (= (x95 x175 1) x21))))
(assert (=> (<= x122 10000) (not (= x122 (x95 x21 x154)))))
(assert (x209 x119 x11))
(assert (not (= 18446744073709551615 (+ x57 2))))
(assert (=> (>= 10000 x50) (not (= (x95 x276 4) x50))))
(assert (=> (<= x175 10000) (not (= x175 (x95 x21 x154)))))
(assert (=> (>= 10000 x61) (not (= (+ 2 x57) x61))))
(assert (not (= (x95 x123 x17) (+ x57 2))))
(assert (x262 256))
(assert (not (= 388749022 (x95 x61 1))))
(assert (not (= (x95 x70 x256) 1)))
(assert (not (= 18446744073709551615 (+ 3 x57))))
(assert (x62 x11))
(assert (=> (<= x24 10000) (not (= (x95 x243 x227) x24))))
(assert (=> (>= 10000 x182) (not (= (x95 x276 4) x182))))
(assert (=> (>= 10000 x123) (not (= (+ 3 x261) x123))))
(assert (not (= (x95 x175 1) (+ x261 3))))
(assert (x223 x123))
(assert (=> (>= 10000 x214) (not (= (x95 x61 1) x214))))
(assert (x118 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x7 79228162514264337593543950336))
(assert (x226 x286))
(assert (x62 x239))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x95 x123 x17))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (+ x216 3)))))
(assert (=> (= (+ x57 3) (+ 3 x261)) (and (= x243 x123) (= x17 x227))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ x261 3))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (<= x61 10000) (not (= (+ 3 x57) x61))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ 3 x216))))
(assert (not (= 4 (x95 x175 1))))
(assert (= x23 (or x158 x140)))
(assert (not (= (x95 x61 1) 18446744073709551615)))
(assert (x223 x279))
(assert (=> (>= 10000 x63) (not (= x63 (+ 3 x57)))))
(assert (x62 x44))
(assert (=> (<= x243 10000) (not (= (+ x216 3) x243))))
(assert (=> (<= x122 10000) (not (= (+ 2 x57) x122))))
(assert (=> (>= 10000 x37) (not (= x37 (x39 52 32 x165 (x109 x137 96))))))
(assert (x226 256))
(assert (not (= (x95 x21 x154) 2510660263)))
(assert (x62 x94))
(assert (not (= (x95 x242 x37) 2510660263)))
(assert (not (= 2510660263 (x95 x243 x227))))
(assert (not (= (x95 x276 4) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ x57 2) (+ x261 3))))
(assert (=> (<= x182 10000) (not (= x182 (x95 x50 x268)))))
(assert (not (= 388749022 (x95 x122 1))))
(assert (not (= (x95 x70 x256) (+ 2 x57))))
(assert (x62 x123))
(assert (=> (<= x70 10000) (not (= x70 (+ x57 2)))))
(assert (x223 x180))
(assert (x118 x272))
(assert (not (= (x95 x175 1) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (<= x61 10000) (not (= x61 (x95 x243 x227)))))
(assert (=> (= (x95 x175 1) (x95 x63 x279)) (and (= x279 1) (= x175 x63))))
(assert (=> (<= x165 10000) (not (= x165 (+ x57 2)))))
(assert (not (= (x95 x122 1) (+ x216 3))))
(assert (=> (<= x165 10000) (not (= (+ 3 x57) x165))))
(assert (=> (>= 10000 x21) (not (= (+ 3 x216) x21))))
(assert (x62 x143))
(assert (=> (<= x165 10000) (not (= x165 (+ 3 x261)))))
(assert (=> (<= x122 10000) (not (= (x95 x175 1) x122))))
(assert (x62 x131))
(assert (=> (<= x37 10000) (not (= (x95 x21 x154) x37))))
(assert (x62 x243))
(assert (not (= (x95 x122 1) 4)))
(assert (=> (>= 10000 x63) (not (= (x95 x21 x154) x63))))
(assert (x118 x280))
(assert (x62 x176))
(assert (=> (= (x95 x175 1) (x95 x21 x154)) (and (= 1 x154) (= x175 x21))))
(assert (=> (<= x182 10000) (not (= x182 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (+ 3 x57) (x95 x242 x37))))
(assert (x223 x256))
(assert (not (= 388749022 (x95 x50 x268))))
(assert (=> (= (x95 x175 1) (x95 x61 1)) (= x175 x61)))
(assert (=> (>= 10000 x180) (not (= x180 (+ 3 x57)))))
(assert (=> (<= x175 10000) (not (= (+ 3 x216) x175))))
(assert (not (= (+ 3 x261) 388749022)))
(assert (=> (<= x165 10000) (not (= (+ x216 3) x165))))
(assert (x142 x35 x296))
(assert (=> (>= 10000 x276) (not (= (x95 x243 x227) x276))))
(assert (=> (>= 10000 x50) (not (= x50 (x95 x123 x17)))))
(assert (x223 x243))
(assert (=> (= (x95 x123 x17) (x95 x122 1)) (and (= x122 x123) (= 1 x17))))
(assert (=> (<= x50 10000) (not (= x50 (x95 x61 1)))))
(assert (not (= (x95 x63 x279) (+ 1 x57))))
(assert (=> (<= x243 10000) (not (= (x95 x243 x227) x243))))
(assert (=> (>= 10000 x165) (not (= (x95 x123 x17) x165))))
(assert (not (= (x95 x123 x17) 292666793)))
(assert (=> (>= 10000 x276) (not (= x276 (x95 x50 x268)))))
(assert (x62 x115))
(assert (=> (>= 10000 x276) (not (= x276 (+ 2 x57)))))
(assert (=> (>= 10000 x165) (not (= x165 (+ 1 x57)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 3 x57))))
(assert (not (= 292666793 (+ x57 3))))
(assert (x219 x119))
(assert (not (= (+ x57 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x62 x14))
(assert (not (= 1 (x95 x21 x154))))
(assert (=> (>= 10000 x61) (not (= (+ 1 x57) x61))))
(assert (=> (>= 10000 x276) (not (= (x95 x276 4) x276))))
(assert (=> (>= 10000 x276) (not (= x276 (x95 x21 x154)))))
(assert (not (= 52 (x95 x242 x37))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (x95 x70 x256)))))
(assert (=> (>= 10000 x21) (not (= (x95 x50 x268) x21))))
(assert (=> (>= 10000 x123) (not (= x123 (x95 x276 4)))))
(assert (=> (>= 10000 x24) (not (= (x95 x70 x256) x24))))
(assert (=> (= (x95 x276 4) (x95 x70 x256)) (and (= 4 x256) (= x276 x70))))
(assert (and (x48 x290 256) (x84 x290 256) (x149 x290 256) (= (- x290 (x289 255 x290)) (* (x129 x290 256) 256)) (x195 x290 256) (=> (and (< 0 x290) (> 256 0)) (and (< (- x290 256) (* (x129 x290 256) 256)) (>= x290 (* 256 (x129 x290 256)))))))
(assert (not (= 32 (+ 3 x57))))
(assert (=> (= (x95 x243 x227) (x95 x276 4)) (and (= x276 x243) (= 4 x227))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (x95 x122 1)))))
(assert (not (= (x95 x123 x17) (+ 1 x57))))
(assert (=> (>= 10000 x123) (not (= (x95 x21 x154) x123))))
(assert (not (= 292666793 (x95 x175 1))))
(assert (not (= 388749022 (x95 x70 x256))))
(assert (x62 x147))
(assert (=> (>= 10000 x70) (not (= x70 (x95 x50 x268)))))
(assert (not (= (x95 x21 x154) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x123 10000) (not (= (+ 3 x216) x123))))
(assert (=> (<= x70 10000) (not (= x70 (x95 x276 4)))))
(assert (not (= (x95 x21 x154) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x50 x268))))
(assert (not (= (+ 3 x216) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (and (= (x106 27 3) 81) (= 9 (x106 3 3)) (= (x106 9 9) 81) (= (x106 9 3) 27)))
(assert (=> (<= x236 10000) (not (= x236 (x39 52 32 x165 (x109 x137 96))))))
(assert (=> (<= x24 10000) (not (= x24 (x95 x61 1)))))
(assert (not (= 1 (+ x57 1))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x63 x279))))
(assert (= (x129 x272 256) (x109 x272 8)))
(assert (=> (= (+ 3 x261) (+ x216 3)) (and (= x243 x63) (= x279 x227))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x95 x61 1))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x57 3))))
(assert (=> (>= 10000 x175) (not (= (x95 x123 x17) x175))))
(assert (=> (<= x182 10000) (not (= x182 (x95 x175 1)))))
(assert (not (= (x95 x50 x268) 1)))
(assert (and (x148 32 x44) (x65 32 x44) (= (x106 32 x44) (* x44 32)) (x82 32 x44) (x247 32 x44) (and (= (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x44) (- (* 32 x44) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x44))) (= (- (* (- x44 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x44 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x44 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* 32 (- x44 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 32 (- x44 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x188 32 x44)))
(assert (=> (>= 10000 x236) (not (= (x95 x70 x256) x236))))
(assert (x62 x119))
(assert (x226 x276))
(assert (and (x273 x165 256) (x281 x165 256) (x153 x165 256) (=> (> 256 0) (= x165 (+ (* 256 (x129 x165 256)) (x136 x165 256))))))
(assert (=> (<= x123 10000) (not (= x123 (x95 x50 x268)))))
(assert (= (x109 x165 8) (x129 x165 256)))
(assert (not (= (x95 x122 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x95 x243 x227))))
(assert (not (= 4 (x95 x123 x17))))
(assert (=> (= (x95 x276 4) (x95 x50 x268)) (and (= x276 x50) (= x268 4))))
(assert (not (= 32 (+ 1 x57))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (x95 x123 x17) (x39 52 32 x165 (x109 x137 96)))))
(assert (not (= (+ x57 3) (x95 x122 1))))
(assert (=> (<= x37 10000) (not (= (x95 x70 x256) x37))))
(assert (=> (>= 10000 x122) (not (= x122 (+ 3 x57)))))
(assert (x62 x299))
(assert (not (= (x95 x123 x17) 2510660263)))
(assert (=> (= (x95 x242 x37) (x95 x243 x227)) (and (= x227 x37) (= x243 x242))))
(assert (not (= 18446744073709551615 (x95 x50 x268))))
(assert (=> (<= x276 10000) (not (= (x39 52 32 x165 (x109 x137 96)) x276))))
(assert (and (= (x200 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 44601490397061246283071436545296723011960832 (x200 2 145)) (= 21778071482940061661655974875633165533184 (x200 2 134)) (= (x200 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x200 2 91) 2475880078570760549798248448) (= 191561942608236107294793378393788647952342390272950272 (x200 2 177)) (= (x200 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 5708990770823839524233143877797980545530986496 (x200 2 152)) (= (x200 2 77) 151115727451828646838272) (= (x200 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x200 2 171) 2993155353253689176481146537402947624255349848014848) (= (x200 2 8) 256) (= (x200 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x200 2 59) 576460752303423488) (= 19342813113834066795298816 (x200 2 84)) (= 200867255532373784442745261542645325315275374222849104412672 (x200 2 197)) (= (x200 2 120) 1329227995784915872903807060280344576) (= (x200 2 109) 649037107316853453566312041152512) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x200 2 249)) (= (x200 2 153) 11417981541647679048466287755595961091061972992) (= 680564733841876926926749214863536422912 (x200 2 129)) (= 2 (x200 2 1)) (= (x200 2 38) 274877906944) (= 2147483648 (x200 2 31)) (= (x200 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x200 2 229)) (= (x200 2 69) 590295810358705651712) (= (x200 2 85) 38685626227668133590597632) (= 4 (x200 2 2)) (= 182687704666362864775460604089535377456991567872 (x200 2 157)) (= (x200 2 163) 11692013098647223345629478661730264157247460343808) (= (x200 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x200 2 34) 17179869184) (= (x200 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 9903520314283042199192993792 (x200 2 93)) (= (x200 2 60) 1152921504606846976) (= (x200 2 158) 365375409332725729550921208179070754913983135744) (= (x200 2 73) 9444732965739290427392) (= 332306998946228968225951765070086144 (x200 2 118)) (= (x200 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 68719476736 (x200 2 36)) (= (x200 2 23) 8388608) (= (x200 2 131) 2722258935367507707706996859454145691648) (= (x200 2 72) 4722366482869645213696) (= (x200 2 50) 1125899906842624) (= (x200 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x200 2 176) 95780971304118053647396689196894323976171195136475136) (= 713623846352979940529142984724747568191373312 (x200 2 149)) (= 18889465931478580854784 (x200 2 74)) (= 24519928653854221733733552434404946937899825954937634816 (x200 2 184)) (= 17592186044416 (x200 2 44)) (= 21267647932558653966460912964485513216 (x200 2 124)) (= (x200 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 9671406556917033397649408 (x200 2 83)) (= (x200 2 52) 4503599627370496) (= 1496577676626844588240573268701473812127674924007424 (x200 2 170)) (= 512 (x200 2 9)) (= 87112285931760246646623899502532662132736 (x200 2 136)) (= 85070591730234615865843651857942052864 (x200 2 126)) (= (x200 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x200 2 46) 70368744177664) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x200 2 222)) (= (x200 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x200 2 19) 524288) (= 10141204801825835211973625643008 (x200 2 103)) (= (x200 2 68) 295147905179352825856) (= 8192 (x200 2 13)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x200 2 247)) (= (x200 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x200 2 254)) (= (x200 2 156) 91343852333181432387730302044767688728495783936) (= (x200 2 88) 309485009821345068724781056) (= 10633823966279326983230456482242756608 (x200 2 123)) (= (x200 2 96) 79228162514264337593543950336) (= (x200 2 43) 8796093022208) (= 1427247692705959881058285969449495136382746624 (x200 2 150)) (= (x200 2 51) 2251799813685248) (= (x200 2 189) 784637716923335095479473677900958302012794430558004314112) (= 2199023255552 (x200 2 41)) (= (x200 2 21) 2097152) (= 5192296858534827628530496329220096 (x200 2 112)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x200 2 255)) (= (x200 2 119) 664613997892457936451903530140172288) (= (x200 2 27) 134217728) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x200 2 224)) (= (x200 2 45) 35184372088832) (= (x200 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x200 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 23384026197294446691258957323460528314494920687616 (x200 2 164)) (= (x200 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 12554203470773361527671578846415332832204710888928069025792 (x200 2 193)) (= 77371252455336267181195264 (x200 2 86)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x200 2 245)) (= (x200 2 55) 36028797018963968) (= 6277101735386680763835789423207666416102355444464034512896 (x200 2 192)) (= 4096 (x200 2 12)) (= (x200 2 111) 2596148429267413814265248164610048) (= (x200 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x200 2 24) 16777216) (= 348449143727040986586495598010130648530944 (x200 2 138)) (= 131072 (x200 2 17)) (= 822752278660603021077484591278675252491367932816789931674304512 (x200 2 209)) (= (x200 2 25) 33554432) (= (x200 2 179) 766247770432944429179173513575154591809369561091801088) (= 178405961588244985132285746181186892047843328 (x200 2 147)) (= 20282409603651670423947251286016 (x200 2 104)) (= 324518553658426726783156020576256 (x200 2 108)) (= 5316911983139663491615228241121378304 (x200 2 122)) (= (x200 2 174) 23945242826029513411849172299223580994042798784118784) (= 51422017416287688817342786954917203280710495801049370729644032 (x200 2 205)) (= (x200 2 70) 1180591620717411303424) (= 13164036458569648337239753460458804039861886925068638906788872192 (x200 2 213)) (= (x200 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x200 2 162) 5846006549323611672814739330865132078623730171904) (= 11150372599265311570767859136324180752990208 (x200 2 143)) (= (x200 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x200 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 22835963083295358096932575511191922182123945984 (x200 2 154)) (= (x200 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x200 2 22) 4194304) (= (x200 2 175) 47890485652059026823698344598447161988085597568237568) (= 12259964326927110866866776217202473468949912977468817408 (x200 2 183)) (= (x200 2 35) 34359738368) (= 2535301200456458802993406410752 (x200 2 101)) (= 618970019642690137449562112 (x200 2 89)) (= (x200 2 58) 288230376151711744) (= 4611686018427387904 (x200 2 62)) (= 10889035741470030830827987437816582766592 (x200 2 133)) (= (x200 2 140) 1393796574908163946345982392040522594123776) (= (x200 2 121) 2658455991569831745807614120560689152) (= (x200 2 48) 281474976710656) (= (x200 2 151) 2854495385411919762116571938898990272765493248) (= (x200 2 127) 170141183460469231731687303715884105728) (= (x200 2 146) 89202980794122492566142873090593446023921664) (= (x200 2 82) 4835703278458516698824704) (= (x200 2 116) 83076749736557242056487941267521536) (= (x200 2 173) 11972621413014756705924586149611790497021399392059392) (= 1208925819614629174706176 (x200 2 80)) (= (x200 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 49039857307708443467467104868809893875799651909875269632 (x200 2 185)) (= 262144 (x200 2 18)) (= (x200 2 20) 1048576) (= 162259276829213363391578010288128 (x200 2 107)) (= 137438953472 (x200 2 37)) (= 2417851639229258349412352 (x200 2 81)) (= 5444517870735015415413993718908291383296 (x200 2 132)) (= 40564819207303340847894502572032 (x200 2 105)) (= 340282366920938463463374607431768211456 (x200 2 128)) (= (x200 2 97) 158456325028528675187087900672) (= (x200 2 79) 604462909807314587353088) (= 5986310706507378352962293074805895248510699696029696 (x200 2 172)) (= (x200 2 90) 1237940039285380274899124224) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x200 2 220)) (= 36893488147419103232 (x200 2 65)) (= 45671926166590716193865151022383844364247891968 (x200 2 155)) (= 18014398509481984 (x200 2 54)) (= 8589934592 (x200 2 33)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x200 2 219)) (= 4398046511104 (x200 2 42)) (= 8 (x200 2 3)) (= (x200 2 167) 187072209578355573530071658587684226515959365500928) (= 383123885216472214589586756787577295904684780545900544 (x200 2 178)) (= (x200 2 139) 696898287454081973172991196020261297061888) (= (x200 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x200 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 316912650057057350374175801344 (x200 2 98)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x200 2 216)) (= 268435456 (x200 2 28)) (= 128 (x200 2 7)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x200 2 210)) (= (x200 2 110) 1298074214633706907132624082305024) (= (x200 2 106) 81129638414606681695789005144064) (= (x200 2 71) 2361183241434822606848) (= 5070602400912917605986812821504 (x200 2 102)) (= (x200 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x200 2 227)) (= (x200 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x200 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x200 2 30) 1073741824) (= (x200 2 161) 2923003274661805836407369665432566039311865085952) (= 356811923176489970264571492362373784095686656 (x200 2 148)) (= (x200 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x200 2 87) 154742504910672534362390528) (= (x200 2 53) 9007199254740992) (= 6427752177035961102167848369364650410088811975131171341205504 (x200 2 202)) (= 1099511627776 (x200 2 40)) (= 2048 (x200 2 11)) (= (x200 2 32) 4294967296) (= (x200 2 141) 2787593149816327892691964784081045188247552) (= 65536 (x200 2 16)) (= (x200 2 168) 374144419156711147060143317175368453031918731001856) (= (x200 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x200 2 251)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x200 2 230)) (= (x200 2 159) 730750818665451459101842416358141509827966271488) (= 9223372036854775808 (x200 2 63)) (= 25711008708143844408671393477458601640355247900524685364822016 (x200 2 204)) (= 67108864 (x200 2 26)) (= 1 (x200 2 0)) (= 205688069665150755269371147819668813122841983204197482918576128 (x200 2 207)) (= (x200 2 92) 4951760157141521099596496896) (= (x200 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x200 2 61) 2305843009213693952) (= (x200 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x200 2 67) 147573952589676412928) (= (x200 2 10) 1024) (= (x200 2 135) 43556142965880123323311949751266331066368) (= 549755813888 (x200 2 39)) (= (x200 2 95) 39614081257132168796771975168) (= (x200 2 99) 633825300114114700748351602688) (= (x200 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x200 2 226)) (= (x200 2 130) 1361129467683753853853498429727072845824) (= 536870912 (x200 2 29)) (= 140737488355328 (x200 2 47)) (= 46768052394588893382517914646921056628989841375232 (x200 2 165)) (= 5575186299632655785383929568162090376495104 (x200 2 142)) (= (x200 2 14) 16384) (= 302231454903657293676544 (x200 2 78)) (= (x200 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x200 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x200 2 5) 32) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x200 2 246)) (= (x200 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x200 2 49) 562949953421312) (= (x200 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x200 2 66) 73786976294838206464) (= (x200 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 32768 (x200 2 15)) (= 174224571863520493293247799005065324265472 (x200 2 137)) (= 16 (x200 2 4)) (= (x200 2 100) 1267650600228229401496703205376) (= (x200 2 76) 75557863725914323419136) (= 1569275433846670190958947355801916604025588861116008628224 (x200 2 190)) (= 10384593717069655257060992658440192 (x200 2 113)) (= (x200 2 115) 41538374868278621028243970633760768) (= 64 (x200 2 6)) (= (x200 2 125) 42535295865117307932921825928971026432) (= (x200 2 57) 144115188075855872) (= 18446744073709551616 (x200 2 64)) (= 37778931862957161709568 (x200 2 75)) (= (x200 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 72057594037927936 (x200 2 56)) (= (x200 2 166) 93536104789177786765035829293842113257979682750464) (= (x200 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 1461501637330902918203684832716283019655932542976 (x200 2 160)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x200 2 252)) (= (x200 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x200 2 94) 19807040628566084398385987584) (= (x200 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x200 2 144) 22300745198530623141535718272648361505980416) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x200 2 239)) (= (x200 2 114) 20769187434139310514121985316880384) (= (x200 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 166153499473114484112975882535043072 (x200 2 117)) (= (x200 2 169) 748288838313422294120286634350736906063837462003712)))
(assert (x226 x225))
(assert (not (= (+ x57 3) (x95 x63 x279))))
(assert (x62 x50))
(assert (=> (= (x95 x70 x256) (x95 x63 x279)) (and (= x70 x63) (= x256 x279))))
(assert (=> (= (x95 x63 x279) (x95 x242 x37)) (and (= x242 x63) (= x279 x37))))
(assert (x62 x159))
(assert (not (= (x95 x61 1) (+ x57 3))))
(assert (=> (<= x24 10000) (not (= x24 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (+ 3 x216) 2510660263)))
(assert (not (= (+ x261 3) (x95 x123 x17))))
(assert (=> (>= 10000 x214) (not (= (x95 x50 x268) x214))))
(assert (not (= 464684736 (x95 x50 x268))))
(assert (not (= 52 (+ x261 3))))
(assert (not (= (x95 x63 x279) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (+ x57 1))))
(assert (=> (>= 10000 x182) (not (= x182 (x95 x243 x227)))))
(assert (x25 x276))
(assert (not (= 464684736 (+ 3 x57))))
(assert (=> (= (x95 x70 x256) (x95 x242 x37)) (and (= x70 x242) (= x37 x256))))
(assert (=> (<= x175 10000) (not (= (x95 x50 x268) x175))))
(assert (not (= (+ x216 3) (x95 x70 x256))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (x95 x175 1)))))
(assert (= (=> (and (= x61 (x289 1461501637330902918203684832716283019655932542975 x276)) (<= 0 x24) (= (x114 (- x184 32)) x100) (= x250 (x95 x180 x154)) (= (x114 (- x42 x68)) x184) (= x291 (= 0 x2)) (= x213 (< 0 x143)) (<= x22 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x139 x233)) (= (x127 (* 32 x44)) x89) (= x180 (x109 x165 8)) (<= 0 x22) (= x53 (+ 1 x57)) (< 0 x111) (= x220 (x172 (+ x284 32))) (= x42 (x172 (+ x220 20))) (= (x289 255 x165) x191) (not x230) (= (x222 x57) x111) (= x57 (x95 x123 x17)) (= x2 (x289 x35 x296)) x291 (= x137 (x102 x15 96)) (= (x172 (+ 32 x68)) x284) (= (x110 x53) x22) (= (x172 (+ x89 x116)) x204) (= (+ x57 3) x154) (>= x139 0) (= x143 (x135 x42)) (= x35 (x224 x250)) (= (x102 1 x191) x296) (<= x111 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x230 (< x233 x22)) (= (x95 x61 1) x17) (= (x172 (+ x42 32)) x116) (<= x139 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35) (= (x222 x57) x24) (<= 0 x35) (<= x24 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x111) (= (+ x53 1) x36) (= x139 (x297 x36)) (= (x39 52 32 x165 (x109 x137 96)) x242)) (and (=> (and (= x242 x169) (not x213)) x6) (=> (and x213 (and (or (and (and (= x28 x177) (= (x95 x242 x37) x177)) x72) (and (and (= x251 (x95 x37 x242)) (= x251 x28)) (not x72))) (and (= x234 (x172 (+ 32 x42))) (= x147 (x135 x42)) (= x37 (x135 x234)) (= (< x242 x37) x72) (< 0 x147)))) x231))) x178))
(assert (=> (>= 10000 x243) (not (= x243 (x95 x50 x268)))))
(assert (x118 x296))
(assert (= x140 (and x72 x151)))
(assert (not (= 464684736 (x95 x123 x17))))
(assert (=> (<= x123 10000) (not (= (x95 x122 1) x123))))
(assert (=> (<= x123 10000) (not (= (x95 x175 1) x123))))
(assert (=> (<= x180 10000) (not (= (+ x57 1) x180))))
(assert (=> (<= x276 10000) (not (= x276 (x95 x175 1)))))
(assert (x223 x182))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x95 x123 x17))))
(assert (x62 x204))
(assert (x62 x190))
(assert (=> (<= x180 10000) (not (= x180 (x95 x175 1)))))
(assert (not (= (+ 3 x216) 18446744073709551615)))
(assert (x223 x261))
(assert (=> (<= x21 10000) (not (= x21 (+ x57 3)))))
(assert (=> (= (x95 x123 x17) (x95 x61 1)) (and (= x17 1) (= x61 x123))))
(assert (x62 x122))
(assert (=> (>= 10000 x21) (not (= x21 (+ 1 x57)))))
(assert (=> (= (x95 x63 x279) (x95 x21 x154)) (and (= x279 x154) (= x63 x21))))
(assert (x62 x92))
(assert (=> (<= x24 10000) (not (= x24 (+ x216 3)))))
(assert (x7 1))
(assert (=> (>= 10000 x122) (not (= x122 (x95 x70 x256)))))
(assert (=> (<= x50 10000) (not (= x50 (x95 x63 x279)))))
(assert (x62 x278))
(assert (=> (<= x61 10000) (not (= x61 (x95 x175 1)))))
(assert (=> (= (x95 x21 x154) (x95 x123 x17)) (and (= x123 x21) (= x154 x17))))
(assert (=> (>= 10000 x182) (not (= x182 (+ 2 x57)))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x122 1))))
(assert (=> (<= x214 10000) (not (= x214 (x95 x122 1)))))
(assert (not (= 1 (x95 x175 1))))
(assert (=> (<= x276 10000) (not (= x276 (x95 x70 x256)))))
(assert (x62 x182))
(assert (=> (<= x122 10000) (not (= (x95 x123 x17) x122))))
(assert (x226 (ite (> 256 x141) (x200 2 x141) 0)))
(assert (x62 x249))
(assert (not (= (+ x216 3) (x95 x50 x268))))
(assert (=> (>= 10000 x243) (not (= (x95 x21 x154) x243))))
(assert (=> (<= x37 10000) (not (= (+ x57 2) x37))))
(assert (=> (= (x95 x276 4) (x95 x123 x17)) (and (= x276 x123) (= 4 x17))))
(assert (x62 x12))
(assert (=> (<= x70 10000) (not (= x70 (x95 x122 1)))))
(assert (=> (= (x95 x70 x256) (x95 x50 x268)) (and (= x70 x50) (= x256 x268))))
(assert (not (= (x95 x122 1) 1)))
(assert (=> (>= 10000 x180) (not (= x180 (x95 x70 x256)))))
(assert (x226 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= x46 (or x163 x288)))
(assert (=> (>= 10000 x182) (not (= (x95 x123 x17) x182))))
(assert (let ((x271 (x200 2 x141))) (and (x148 1 x271) (x65 1 x271) (= (x106 1 x271) (* x271 1)) (x82 1 x271) (x247 1 x271) (and (= (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x271) (- (* 1 x271) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x271))) (= (- (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x188 1 x271))))
(assert (=> (>= 10000 x50) (not (= (x95 x122 1) x50))))
(assert (not (= (x95 x70 x256) (+ 1 x57))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 3 x216))))
(assert (not (= (x95 x63 x279) 52)))
(assert (= x288 (and x58 x117)))
(assert (not (= (+ x261 3) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x62 x302))
(assert (x62 x236))
(assert (not (= (x95 x21 x154) 1461501637330902918203684832716283019655932542975)))
(assert (=> (<= x50 10000) (not (= (x95 x243 x227) x50))))
(assert (not (= (+ x57 1) (x95 x122 1))))
(assert (=> (= (x95 x70 x256) (x95 x123 x17)) (and (= x256 x17) (= x123 x70))))
(assert (x62 x272))
(assert (x62 x240))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x61 1))))
(assert (not (= (x95 x70 x256) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x62 x290))
(assert (x118 x290))
(assert (=> (>= 10000 x236) (not (= (+ x57 1) x236))))
(assert (x62 x191))
(assert (x62 x280))
(assert (not (= (+ x57 1) (+ x216 3))))
(assert (= x259 (=> (and (= (= x108 0) x74) (or (and x74 (and (= x228 x99) (= x239 x108))) (and (not x74) (and (= (x172 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x299)) x90) (= x76 x99) (= x76 (x172 (+ x20 32))) (= (x114 (- x76 x228)) x190) (= x240 1) (= false x198) (= x299 (x289 26959946667150639794667015087019630673637144422540572481103610249215 x31)) (= (x114 (- x190 32)) x207) (= x186 (x197 0)) (= x31 (x27 x93)) (= (ite x198 x240 (ite (< 0 x218) 1 0)) x239) (= x93 (x172 (+ 32 x228))) (= x20 (x172 (+ x228 36))) (= x218 (ite x186 1 0)))))) x73)))
(assert (x62 x199))
(assert (= (=> (and (and (= x132 (not (= x183 0))) (= (or (not x266) x69) x205) (= x69 x132)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x119) (= x63 x86) (= 464684736 x202) (not (= 292666793 x202)) (= x104 (not x301)) (= (x187 x214) x246) (= (x109 x272 8) x50) (= (not x34) x301) (= x282 (x95 x50 x268)) (= x175 x4) (= (x95 x63 x279) x216) (= x237 x266) (= (x95 x175 1) x279) (= x83 (x206 x119 x11)) (>= x280 0) (not (= x202 388749022)) (= x156 (x289 255 x272)) (= x34 (not x155)) (= (x289 255 x165) x141) (= x119 (x224 x292)) (= (x289 x280 x33) x174) (> x246 0) (= x169 x24) (= x272 x52) (= x268 (+ x216 3)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280) (= (x109 x165 8) x21) (<= x175 1461501637330902918203684832716283019655932542975) (= x292 (x95 x21 x154)) (> 2510660263 x202) (= (= 0 x174) x155) (>= x119 0) (= (x166 x282) x280) (= (x102 1 x141) x11) (= x183 (ite x104 1 0)) (= x33 (x102 1 x156)))) x205) x6))
(assert (=> (>= 10000 x165) (not (= x165 (x95 x63 x279)))))
(assert (=> (<= x70 10000) (not (= x70 (x95 x175 1)))))
(assert (x62 x221))
(assert (= (x127 (* x15 79228162514264337593543950336)) (x102 x15 96)))
(assert (x62 x78))
(assert (x62 x22))
(assert (x7 x44))
(assert (=> (<= x236 10000) (not (= (x95 x21 x154) x236))))
(assert (not (= (x95 x21 x154) (+ x261 3))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (x95 x276 4))))
(assert (not (= (x95 x123 x17) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x50 10000) (not (= x50 (+ x57 2)))))
(assert (not (= (+ 3 x216) (x95 x175 1))))
(assert (=> (= (x95 x276 4) (x95 x63 x279)) (and (= x276 x63) (= 4 x279))))
(assert (=> (>= 10000 x21) (not (= x21 (x95 x243 x227)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x95 x123 x17))))
(assert (x223 x61))
(assert (=> (>= 10000 x165) (not (= (x95 x122 1) x165))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x95 x276 4) (x109 x137 96)))))
(assert (=> (= (x95 x122 1) (x95 x70 x256)) (and (= x70 x122) (= x256 1))))
(assert (=> (<= x165 10000) (not (= x165 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= 52 (+ 2 x57))))
(assert (x118 255))
(assert (=> (<= x165 10000) (not (= x165 (x95 x50 x268)))))
(assert (=> (<= x182 10000) (not (= x182 (+ 1 x57)))))
(assert (=> (<= x175 10000) (not (= x175 (+ 2 x57)))))
(assert (not (= (+ 3 x57) 2510660263)))
(assert (=> (>= 10000 x70) (not (= x70 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (+ x216 3) 4)))
(assert (=> (>= 10000 x21) (not (= (x95 x123 x17) x21))))
(assert (=> (<= x123 10000) (not (= x123 (+ x57 3)))))
(assert (=> (<= x236 10000) (not (= x236 (x95 x276 4)))))
(assert (not (= (x95 x61 1) (x39 52 32 x165 (x109 x137 96)))))
(assert (not (= (+ x57 2) (x95 x122 1))))
(assert (not (= 1 (x95 x63 x279))))
(assert (=> (<= x236 10000) (not (= (x95 x243 x227) x236))))
(assert (x223 x175))
(assert (=> (>= 10000 x24) (not (= (x95 x242 x37) x24))))
(assert (not (= (+ 1 x57) (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (= (x95 x61 1) (x95 x50 x268)) (and (= x50 x61) (= 1 x268))))
(assert (=> (>= 10000 x243) (not (= x243 (x95 x242 x37)))))
(assert (x7 (x200 2 x156)))
(assert (not (= (x95 x122 1) 2510660263)))
(assert (=> (<= x243 10000) (not (= (+ x261 3) x243))))
(assert (not (= 2510660263 (x95 x70 x256))))
(assert (not (= (+ x261 3) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x62 x45))
(assert (=> (>= 10000 x50) (not (= (+ x216 3) x50))))
(assert (not (= (x95 x276 4) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x62 x120))
(assert (not (= 464684736 (+ x57 2))))
(assert (=> (>= 10000 x63) (not (= x63 (x95 x61 1)))))
(assert (=> (>= 10000 x61) (not (= (x95 x123 x17) x61))))
(assert (=> (>= 10000 x63) (not (= (+ 1 x57) x63))))
(assert (not (= (x95 x63 x279) 18446744073709551615)))
(assert (x62 x35))
(assert (=> (<= x50 10000) (not (= x50 (x95 x242 x37)))))
(assert (not (= (+ 2 x57) (x95 x175 1))))
(assert (x62 x293))
(assert (not (= 388749022 (+ x57 2))))
(assert (=> (>= 10000 x50) (not (= x50 (x95 x70 x256)))))
(assert (=> (<= x236 10000) (not (= x236 (+ x57 3)))))
(assert (not (= (x95 x70 x256) 292666793)))
(assert (not (= (x95 x70 x256) 18446744073709551615)))
(assert (x223 x21))
(assert (not x105))
(assert (not (= (+ x261 3) (x95 x242 x37))))
(assert (=> (= (x95 x70 x256) (x95 x243 x227)) (and (= x256 x227) (= x70 x243))))
(assert (=> (<= x123 10000) (not (= x123 (x95 x243 x227)))))
(assert (=> (<= (x109 x137 96) 10000) (not (= (+ x57 1) (x109 x137 96)))))
(assert (not (= (x95 x50 x268) 4)))
(assert (not (= (x95 x123 x17) 1)))
(assert (=> (>= 10000 x63) (not (= x63 (x95 x243 x227)))))
(assert (=> (>= 10000 x236) (not (= (x95 x63 x279) x236))))
(assert (x223 x216))
(assert (=> (>= 10000 x276) (not (= x276 (+ 1 x57)))))
(assert (=> (>= 10000 x243) (not (= (x95 x70 x256) x243))))
(assert (let ((x275 (ite (> 256 x141) (x200 2 x141) 0))) (and (x273 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x281 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x153 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x275 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x136 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x226 x290))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 388749022)))
(assert (not (= (x95 x21 x154) 18446744073709551615)))
(assert (x62 x20))
(assert (=> (= (x95 x21 x154) (x95 x122 1)) (and (= x21 x122) (= x154 1))))
(assert (=> (<= x214 10000) (not (= x214 (+ x216 3)))))
(assert (x62 x207))
(assert (=> (= (x95 x122 1) (x95 x63 x279)) (and (= 1 x279) (= x63 x122))))
(assert (not (= 388749022 (x95 x243 x227))))
(assert (x142 x3 x295))
(assert (not (= (x95 x122 1) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (<= x165 10000) (not (= x165 (x95 x276 4)))))
(assert (not (= (x95 x70 x256) (+ x261 3))))
(assert (not (= (x95 x276 4) (+ 3 x57))))
(assert (=> (= (x95 x70 x256) (x95 x61 1)) (and (= x70 x61) (= 1 x256))))
(assert (not (= (x95 x21 x154) 292666793)))
(assert (not (= 52 (x95 x122 1))))
(assert (x223 x63))
(assert (not (= (+ x57 2) 292666793)))
(assert (=> (<= x182 10000) (not (= x182 (x95 x242 x37)))))
(assert (not (= 52 (x95 x276 4))))
(assert (=> (= (x95 x175 1) (x95 x70 x256)) (and (= x70 x175) (= x256 1))))
(assert (x118 x286))
(assert (=> (= (x95 x50 x268) (x95 x243 x227)) (and (= x50 x243) (= x227 x268))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x276 4))))
(assert (not (= (x95 x122 1) (+ x261 3))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x276 4))))
(assert (not (= 292666793 (x95 x242 x37))))
(assert (x223 x165))
(assert (not (= (x95 x175 1) 52)))
(assert (=> (>= 10000 x123) (not (= x123 (x95 x70 x256)))))
(assert (not (= (x95 x61 1) (+ x57 2))))
(assert (=> (>= 10000 x180) (not (= x180 (x95 x63 x279)))))
(assert (=> (<= x50 10000) (not (= x50 (+ 3 x57)))))
(assert (=> (= (x95 x61 1) (x95 x242 x37)) (and (= x61 x242) (= 1 x37))))
(assert (=> (<= x175 10000) (not (= (x95 x63 x279) x175))))
(assert (x62 x265))
(assert (x118 x33))
(assert (=> (>= 10000 x37) (not (= (x95 x123 x17) x37))))
(assert (=> (<= x122 10000) (not (= (x95 x61 1) x122))))
(assert (not (= (x95 x63 x279) (+ 3 x261))))
(assert (not (= (x95 x61 1) 52)))
(assert (not (= 292666793 (x95 x63 x279))))
(assert (=> (>= 10000 x21) (not (= (x39 52 32 x165 (x109 x137 96)) x21))))
(assert (=> (<= x21 10000) (not (= (x95 x276 4) x21))))
(assert (x62 x141))
(assert (not (= (x95 x61 1) 2510660263)))
(assert (x7 (x200 2 x270)))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (+ x261 3))))
(assert (=> (<= x243 10000) (not (= x243 (x95 x175 1)))))
(assert (x7 32))
(assert (x62 x111))
(assert (x223 x37))
(assert (= x103 (and x46 (not x74))))
(assert (not (= 52 (+ 3 x216))))
(assert (=> (>= 10000 x50) (not (= x50 (x95 x50 x268)))))
(assert (not (= (x95 x63 x279) 32)))
(assert (not (= (+ x57 2) (x95 x50 x268))))
(assert (not (= (x95 x70 x256) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x95 x61 1))))
(assert (not (= (+ x57 1) (+ 3 x57))))
(assert (x226 x165))
(assert (x62 x24))
(assert (=> (>= 10000 x61) (not (= (x95 x21 x154) x61))))
(assert (= (x127 (ite (< x270 256) (x200 2 x270) 0)) (x102 1 x270)))
(assert (=> (<= x63 10000) (not (= (x95 x175 1) x63))))
(assert (=> (<= x182 10000) (not (= (x95 x61 1) x182))))
(assert (x62 x5))
(assert (not (= (x95 x243 x227) 1)))
(assert (x62 x116))
(assert (=> (<= x236 10000) (not (= (x95 x122 1) x236))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 464684736)))
(assert (x62 x260))
(assert (let ((x275 (ite (< x270 256) (x200 2 x270) 0))) (and (x273 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x281 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x153 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x275 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x136 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (= (x81 228) 0))
(assert (x223 x268))
(assert (not (= (+ 2 x57) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (= (x95 x122 1) (x95 x50 x268)) (and (= x268 1) (= x50 x122))))
(assert (= (and x55 x287) x121))
(assert (=> (= (x95 x61 1) (x95 x63 x279)) (and (= 1 x279) (= x63 x61))))
(assert (not (= (x95 x123 x17) (+ 3 x216))))
(assert (not (= (x95 x21 x154) (+ x57 1))))
(assert (not (= (x95 x276 4) 1)))
(assert (=> (= (x95 x175 1) (x95 x123 x17)) (and (= x175 x123) (= 1 x17))))
(assert (not (= (x95 x243 x227) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x62 x49))
(assert (x62 x284))
(assert (x62 x303))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x109 x137 96) (+ 3 x261)))))
(assert (=> (>= 10000 x122) (not (= x122 (x95 x243 x227)))))
(assert (=> (>= 10000 x175) (not (= (+ x57 3) x175))))
(assert (x223 x214))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x95 x243 x227))))
(assert (not (= (x95 x50 x268) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (<= x70 10000) (not (= x70 (+ x57 1)))))
(assert (not (= (x95 x276 4) (+ x57 1))))
(assert (x62 x93))
(assert (not (= (+ x261 3) (x95 x243 x227))))
(assert (=> (>= 10000 x243) (not (= (x95 x61 1) x243))))
(assert (x7 x15))
(assert (x62 x214))
(assert (not (= (+ 3 x216) (x95 x276 4))))
(assert (=> (>= 10000 x175) (not (= (x95 x70 x256) x175))))
(assert (=> (<= x243 10000) (not (= x243 (x95 x123 x17)))))
(assert (x62 x246))
(assert (=> (>= 10000 x70) (not (= (x95 x123 x17) x70))))
(assert (not (= (x95 x21 x154) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (>= 10000 x236) (not (= (x95 x175 1) x236))))
(assert (=> (>= 10000 x61) (not (= (x95 x70 x256) x61))))
(assert (not (= (+ 2 x57) (x95 x63 x279))))
(assert (not (= (x95 x243 x227) (+ x57 3))))
(assert (=> (<= x122 10000) (not (= x122 (+ x57 1)))))
(assert (not (= 52 (x39 52 32 x165 (x109 x137 96)))))
(assert (not (= (x95 x243 x227) 52)))
(assert (=> (>= 10000 x236) (not (= x236 (x95 x50 x268)))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x95 x63 x279) (x109 x137 96)))))
(assert (not (= (+ x57 1) 1461501637330902918203684832716283019655932542975)))
(assert (x62 x215))
(assert (not (= (x95 x61 1) (+ x216 3))))
(assert (not (= (+ 3 x57) (x95 x50 x268))))
(assert (x62 x68))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (>= 10000 x243) (not (= (x39 52 32 x165 (x109 x137 96)) x243))))
(assert (not (= (+ 3 x261) 2510660263)))
(assert (=> (<= x61 10000) (not (= x61 (+ 3 x261)))))
(assert (not (= 388749022 (x95 x242 x37))))
(assert (x62 x234))
(assert (=> (= (x95 x123 x17) (x95 x243 x227)) (and (= x123 x243) (= x17 x227))))
(assert (x62 x202))
(assert (not (= 18446744073709551615 (x95 x175 1))))
(assert (not (= 1 (+ x57 3))))
(assert (x62 x167))
(assert (x62 x276))
(assert (=> (<= x37 10000) (not (= x37 (x95 x50 x268)))))
(assert (=> (>= 10000 x37) (not (= (x95 x122 1) x37))))
(assert (x223 x17))
(assert (not (= 464684736 (+ 3 x261))))
(assert (=> (<= x21 10000) (not (= (+ 2 x57) x21))))
(assert (not (= 4 (+ 2 x57))))
(assert (not (= (+ 3 x261) (+ 1 x57))))
(assert (x248 x286))
(assert (=> (<= x37 10000) (not (= (x95 x61 1) x37))))
(assert (not (= 388749022 (x95 x123 x17))))
(assert (not (= 18446744073709551615 (x95 x122 1))))
(assert (=> (= (x95 x50 x268) (x95 x123 x17)) (and (= x17 x268) (= x123 x50))))
(assert (not (= 4 (x95 x63 x279))))
(assert (not (= (+ 1 x57) 2510660263)))
(assert (not (= 32 (x95 x61 1))))
(assert (not (= (x95 x276 4) 4)))
(assert (not (= 388749022 (x95 x276 4))))
(assert (x62 x99))
(assert (not (= (x95 x276 4) 2510660263)))
(assert (not (= (+ x57 3) (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (<= x165 10000) (not (= x165 (x95 x70 x256)))))
(assert (=> (>= 10000 x37) (not (= x37 (x95 x243 x227)))))
(assert (=> (<= x50 10000) (not (= (x95 x21 x154) x50))))
(assert (=> (>= 10000 x214) (not (= x214 (x95 x276 4)))))
(assert (and (x273 x290 256) (x281 x290 256) (x153 x290 256) (=> (> 256 0) (= x290 (+ (* 256 (x129 x290 256)) (x136 x290 256))))))
(assert (= (x102 1 x141) (x127 (ite (> 256 x141) (x200 2 x141) 0))))
(assert (not (= (x95 x243 x227) (+ 2 x57))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= (+ x57 3) 4)))
(assert (x248 x225))
(assert (=> (= (x95 x63 x279) (x95 x243 x227)) (and (= x279 x227) (= x243 x63))))
(assert (x62 x52))
(assert (not (= (x95 x61 1) (x95 x276 4))))
(assert (=> (<= x123 10000) (not (= (x95 x242 x37) x123))))
(assert (x62 x296))
(assert (x62 x285))
(assert (=> (>= 10000 x24) (not (= (+ x57 2) x24))))
(assert (=> (>= 10000 x214) (not (= (+ x261 3) x214))))
(assert (not (= (+ 1 x57) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (>= 10000 x214) (not (= x214 (x95 x63 x279)))))
(assert (=> (>= 10000 x276) (not (= x276 (x95 x123 x17)))))
(assert (not (= (x95 x70 x256) 4)))
(assert (x62 x42))
(assert (=> (>= 10000 x165) (not (= x165 (x95 x175 1)))))
(assert (x62 x90))
(assert (not (= (x95 x123 x17) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (>= 10000 x214) (not (= (x95 x175 1) x214))))
(assert (x62 x139))
(assert (=> (<= x123 10000) (not (= x123 (+ 1 x57)))))
(assert (not (= (x95 x21 x154) 388749022)))
(assert (=> (<= x37 10000) (not (= x37 (x95 x175 1)))))
(assert (= (and x58 (not x117)) x163))
(assert (=> (>= 10000 x122) (not (= x122 (+ x261 3)))))
(assert (=> (= (x95 x63 x279) (x95 x50 x268)) (and (= x268 x279) (= x63 x50))))
(assert (x223 x227))
(assert (=> (<= x175 10000) (not (= x175 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (+ x261 3) (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (<= x180 10000) (not (= (x95 x276 4) x180))))
(assert (=> (= (x95 x242 x37) (x95 x21 x154)) (and (= x154 x37) (= x21 x242))))
(assert (not (= 464684736 (x95 x21 x154))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x95 x63 x279))))
(assert (=> (>= 10000 x182) (not (= x182 (+ x57 3)))))
(assert (x62 x126))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (and (x273 x225 26959946667150639794667015087019630673637144422540572481103610249216) (x281 x225 26959946667150639794667015087019630673637144422540572481103610249216) (x153 x225 26959946667150639794667015087019630673637144422540572481103610249216) (=> (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (= x225 (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x129 x225 26959946667150639794667015087019630673637144422540572481103610249216)) (x136 x225 26959946667150639794667015087019630673637144422540572481103610249216))))))
(assert (x223 x242))
(assert (=> (<= x182 10000) (not (= x182 (+ 3 x216)))))
(assert (=> (<= x21 10000) (not (= (x95 x122 1) x21))))
(assert (not (= (+ x57 2) (x95 x21 x154))))
(assert (=> (>= 10000 x63) (not (= x63 (+ 2 x57)))))
(assert (not (= 292666793 (+ 3 x261))))
(assert (x62 x100))
(assert (not (= (x95 x70 x256) (x39 52 32 x165 (x109 x137 96)))))
(assert (x62 x88))
(assert (x62 x168))
(assert (=> (<= x63 10000) (not (= (+ 3 x261) x63))))
(assert (= (or x23 x40) x194))
(assert (x62 x2))
(assert (and (x273 x272 256) (x281 x272 256) (x153 x272 256) (=> (> 256 0) (= x272 (+ (* 256 (x129 x272 256)) (x136 x272 256))))))
(assert (x223 x24))
(assert (=> (<= x214 10000) (not (= x214 (+ 1 x57)))))
(assert (= x73 (=> (and (> x239 0) (= x99 x68)) x178)))
(assert (=> (>= 10000 x63) (not (= x63 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (x95 x63 x279) (+ x216 3))))
(assert (x248 x31))
(assert (not (= (x95 x61 1) (+ 1 x57))))
(assert (=> (<= x236 10000) (not (= (x95 x242 x37) x236))))
(assert (not (= 4 (+ 1 x57))))
(assert (x62 x76))
(assert (= (or x121 x179) x264))
(assert (not (= (+ 3 x261) (x95 x276 4))))
(assert (x112 x165))
(assert (and (x48 x272 256) (x84 x272 256) (x149 x272 256) (= (- x272 (x289 255 x272)) (* (x129 x272 256) 256)) (x195 x272 256) (=> (and (< 0 x272) (> 256 0)) (and (< (- x272 256) (* (x129 x272 256) 256)) (>= x272 (* 256 (x129 x272 256)))))))
(assert (not (= 52 (+ 1 x57))))
(assert (=> (<= x122 10000) (not (= x122 (x95 x63 x279)))))
(assert (x62 x180))
(assert (x62 x233))
(assert (not (= (+ x57 3) (x95 x21 x154))))
(assert (not (= (x95 x123 x17) 18446744073709551615)))
(assert (=> (>= 10000 x50) (not (= x50 (+ 1 x57)))))
(assert (x118 x295))
(assert (=> (>= 10000 x37) (not (= x37 (+ 3 x261)))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (x95 x21 x154))))
(assert (and (x48 x165 256) (x84 x165 256) (x149 x165 256) (= (- x165 (x289 255 x165)) (* (x129 x165 256) 256)) (x195 x165 256) (=> (and (< 0 x165) (> 256 0)) (and (< (- x165 256) (* (x129 x165 256) 256)) (>= x165 (* 256 (x129 x165 256)))))))
(assert (not (= (+ 3 x216) (x39 52 32 x165 (x109 x137 96)))))
(assert (not (= 32 (+ 2 x57))))
(assert (=> (>= 10000 x214) (not (= x214 (x95 x70 x256)))))
(assert (not (= (+ 3 x57) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (not (= 18446744073709551615 (+ 1 x57))))
(assert (not (= (x95 x175 1) 32)))
(assert (=> (>= 10000 x182) (not (= x182 (x95 x21 x154)))))
(assert (=> (<= x276 10000) (not (= x276 (x95 x61 1)))))
(assert (x62 x241))
(assert (=> (<= x24 10000) (not (= x24 (x95 x175 1)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x95 x50 x268))))
(assert (=> (<= x61 10000) (not (= x61 (x95 x242 x37)))))
(assert (=> (= (x95 x175 1) (x95 x243 x227)) (and (= x175 x243) (= 1 x227))))
(assert (=> (= (x95 x122 1) (x95 x242 x37)) (and (= x37 1) (= x122 x242))))
(assert (not (= (+ 3 x216) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (+ 2 x57))))
(assert (=> (<= x214 10000) (not (= (+ x57 3) x214))))
(assert (=> (>= 10000 x214) (not (= (x39 52 32 x165 (x109 x137 96)) x214))))
(assert (x62 x47))
(assert (=> (<= x175 10000) (not (= (x95 x276 4) x175))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x95 x50 x268) (x109 x137 96)))))
(assert (x62 x183))
(assert (not (= (x95 x175 1) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 292666793 (x95 x50 x268))))
(assert (=> (= (x95 x123 x17) (x95 x242 x37)) (and (= x123 x242) (= x37 x17))))
(assert (not (= (x95 x63 x279) 2510660263)))
(assert (=> (= (+ x57 3) (+ x216 3)) (and (= x123 x63) (= x279 x17))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x175 1))))
(assert (not (= (x95 x175 1) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= (x95 x175 1) (x39 52 32 x165 (x109 x137 96)))))
(assert (let ((x271 (x200 2 x191))) (and (x148 1 x271) (x65 1 x271) (= (x106 1 x271) (* x271 1)) (x82 1 x271) (x247 1 x271) (and (= (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x271) (- (* 1 x271) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x271))) (= (- (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x188 1 x271))))
(assert (and (x148 x15 79228162514264337593543950336) (x65 x15 79228162514264337593543950336) (= (x106 x15 79228162514264337593543950336) (* 79228162514264337593543950336 x15)) (x82 x15 79228162514264337593543950336) (x247 x15 79228162514264337593543950336) (and (= (x106 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 79228162514264337593543950336) (- (* x15 79228162514264337593543950336) 9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496)) (= (- (* (- 115792089237316195423570985008687907853269984665561335876943319670319585689600) x15) (- 13407807929942597099574024998205846127479365820583219383259601157675320746492338629038688038210230303195081502828938359349399943579666495733993146259865600)) (x106 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985008687907853269984665561335876943319670319585689600))) (= (* x15 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (x106 x15 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)))) (x188 x15 79228162514264337593543950336)))
(assert (x223 x137))
(assert (=> (>= 10000 x214) (not (= (x95 x21 x154) x214))))
(assert (not (= (x95 x123 x17) 32)))
(assert (= (x109 x137 96) (x129 x137 79228162514264337593543950336)))
(assert (=> (<= x61 10000) (not (= x61 (x95 x50 x268)))))
(assert (=> (= (x95 x21 x154) (x95 x70 x256)) (and (= x21 x70) (= x256 x154))))
(assert (not (= 52 (x95 x70 x256))))
(assert (x62 x165))
(assert (=> (>= 10000 x63) (not (= x63 (x95 x276 4)))))
(assert (not (= (x95 x242 x37) 32)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x95 x243 x227))))
(assert (=> (<= x276 10000) (not (= x276 (+ 3 x261)))))
(assert (=> (<= x61 10000) (not (= (x95 x63 x279) x61))))
(assert (not (= (x95 x242 x37) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= (+ x57 2) 1)))
(assert (not (= 32 (+ 3 x261))))
(assert (x62 x270))
(assert (not (= (x95 x70 x256) 464684736)))
(assert (=> (>= 10000 x37) (not (= x37 (x95 x63 x279)))))
(assert (=> (<= x70 10000) (not (= (x95 x63 x279) x70))))
(assert (=> (>= 10000 x24) (not (= x24 (+ x57 3)))))
(assert (x62 x175))
(assert (not (= (x95 x242 x37) 464684736)))
(assert (=> (<= x37 10000) (not (= x37 (+ 3 x57)))))
(assert (=> (<= x70 10000) (not (= x70 (+ 3 x57)))))
(assert (=> (>= 10000 x61) (not (= x61 (x39 52 32 x165 (x109 x137 96))))))
(assert (x223 x276))
(assert (not (= (x95 x276 4) 32)))
(assert (=> (>= 10000 x21) (not (= (x95 x63 x279) x21))))
(assert (not (= 1 (x95 x242 x37))))
(assert (x118 x31))
(assert (x62 x83))
(assert (not (= (x95 x122 1) 32)))
(assert (x112 x272))
(assert (=> (<= x122 10000) (not (= (x95 x276 4) x122))))
(assert (and (x273 x276 1461501637330902918203684832716283019655932542976) (x281 x276 1461501637330902918203684832716283019655932542976) (x153 x276 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x276 (+ (* 1461501637330902918203684832716283019655932542976 (x129 x276 1461501637330902918203684832716283019655932542976)) (x136 x276 1461501637330902918203684832716283019655932542976))))))
(assert (not (= 464684736 (x95 x61 1))))
(assert (=> (>= 10000 x276) (not (= (x95 x122 1) x276))))
(assert (x62 x26))
(assert (=> (<= x180 10000) (not (= (x95 x50 x268) x180))))
(assert (not (= 464684736 (+ 3 x216))))
(assert (not (= 52 (x95 x123 x17))))
(assert (x62 x283))
(assert (not (= (+ x57 1) 292666793)))
(assert (x62 x61))
(assert (= (and (not x72) x151) x158))
(assert (x62 x3))
(assert (x62 x294))
(assert (x62 x70))
(assert (=> (<= x175 10000) (not (= x175 (x95 x122 1)))))
(assert (=> (<= x50 10000) (not (= x50 (x39 52 32 x165 (x109 x137 96))))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x243 x227))))
(assert (x62 x298))
(assert (not (= 32 (x95 x50 x268))))
(assert (=> (<= x63 10000) (not (= x63 (x95 x242 x37)))))
(assert (=> (<= x214 10000) (not (= x214 (x95 x243 x227)))))
(assert (x62 x59))
(assert (not (= (x95 x276 4) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (= (x81 x234) 0))
(assert (=> (>= 10000 x180) (not (= (x95 x21 x154) x180))))
(assert (not (= 1 (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (<= x70 10000) (not (= x70 (x95 x70 x256)))))
(assert (x62 x225))
(assert (=> (>= 10000 x236) (not (= (x95 x61 1) x236))))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) (x95 x242 x37))))
(assert (not (= 32 (x39 52 32 x165 (x109 x137 96)))))
(assert (=> (<= x180 10000) (not (= x180 (+ 3 x261)))))
(assert (x62 x145))
(assert (let ((x271 (x200 2 x270))) (and (x148 1 x271) (x65 1 x271) (= (x106 1 x271) (* x271 1)) (x82 1 x271) (x247 1 x271) (and (= (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x271) (- (* 1 x271) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x271))) (= (- (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x106 1 (- x271 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x188 1 x271))))
(assert (x62 x174))
(assert (not (= (x39 52 32 x165 (x109 x137 96)) 4)))
(assert (x223 x122))
(assert (=> (>= 10000 x61) (not (= x61 (x95 x276 4)))))
(assert (=> (>= 10000 x37) (not (= x37 (+ x57 1)))))
(assert (=> (= (x95 x175 1) (x95 x50 x268)) (and (= x50 x175) (= x268 1))))
(assert (=> (>= 10000 x37) (not (= (x95 x276 4) x37))))
(assert (x62 x63))
(assert (x262 x165))
(assert (=> (>= 10000 x122) (not (= (x95 x122 1) x122))))
(assert (x118 1461501637330902918203684832716283019655932542975))
(assert (= x58 (and (not x287) x55)))
(assert (let ((x275 (ite (> 256 x191) (x200 2 x191) 0))) (and (x273 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x281 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x153 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x275 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x136 x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x262 79228162514264337593543950336))
(assert (not (= (x95 x276 4) (+ x57 2))))
(assert (=> (>= 10000 (x109 x137 96)) (not (= (x95 x61 1) (x109 x137 96)))))
(check-sat)
(exit)
