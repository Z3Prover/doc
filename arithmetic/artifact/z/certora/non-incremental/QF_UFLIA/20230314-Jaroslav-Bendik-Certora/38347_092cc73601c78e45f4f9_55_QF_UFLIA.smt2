(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x151 () Int)
(declare-fun x219 () Int)
(declare-fun x7 () Int)
(declare-fun x5 () Int)
(declare-fun x39 () Int)
(declare-fun x201 (Int) Int)
(declare-fun x142 () Int)
(declare-fun x245 () Int)
(declare-fun x21 (Int) Int)
(declare-fun x83 () Int)
(declare-fun x50 () Int)
(declare-fun x108 (Int Int) Int)
(declare-fun x222 () Int)
(declare-fun x277 () Int)
(declare-fun x96 () Int)
(declare-fun x45 () Int)
(declare-fun x241 () Int)
(declare-fun x153 () Int)
(declare-fun x9 () Int)
(declare-fun x88 () Int)
(declare-fun x131 () Int)
(declare-fun x43 () Int)
(declare-fun x15 () Int)
(declare-fun x115 () Int)
(declare-fun x159 () Int)
(declare-fun x128 () Int)
(declare-fun x236 () Int)
(declare-fun x261 () Int)
(declare-fun x20 () Int)
(declare-fun x258 () Int)
(declare-fun x78 () Int)
(declare-fun x99 () Int)
(declare-fun x269 () Int)
(declare-fun x107 () Int)
(declare-fun x193 () Int)
(declare-fun x152 () Int)
(declare-fun x10 () Int)
(declare-fun x145 () Int)
(declare-fun x71 () Int)
(declare-fun x132 () Bool)
(declare-fun x46 () Int)
(declare-fun x73 () Bool)
(declare-fun x155 (Int) Int)
(declare-fun x231 () Bool)
(declare-fun x176 () Int)
(declare-fun x98 () Int)
(declare-fun x81 () Int)
(declare-fun x247 () Int)
(declare-fun x195 () Bool)
(declare-fun x229 () Int)
(declare-fun x242 () Int)
(declare-fun x250 () Bool)
(declare-fun x29 () Int)
(declare-fun x238 () Int)
(declare-fun x14 () Int)
(declare-fun x141 () Int)
(declare-fun x106 () Int)
(declare-fun x267 () Int)
(declare-fun x191 (Int) Int)
(declare-fun x154 () Int)
(declare-fun x2 (Int Int) Int)
(declare-fun x257 () Bool)
(declare-fun x55 (Int) Int)
(declare-fun x92 () Int)
(declare-fun x175 () Int)
(declare-fun x75 () Int)
(declare-fun x48 () Bool)
(declare-fun x168 () Int)
(declare-fun x70 () Int)
(declare-fun x54 () Int)
(declare-fun x125 () Bool)
(declare-fun x206 () Bool)
(declare-fun x3 () Int)
(declare-fun x185 () Int)
(declare-fun x164 () Int)
(declare-fun x35 () Bool)
(declare-fun x91 () Int)
(declare-fun x109 () Int)
(declare-fun x72 () Int)
(declare-fun x4 () Int)
(declare-fun x121 () Int)
(declare-fun x30 () Int)
(declare-fun x216 () Int)
(declare-fun x271 () Int)
(declare-fun x113 () Int)
(declare-fun x51 () Int)
(declare-fun x101 () Int)
(declare-fun x25 () Int)
(declare-fun x274 () Int)
(declare-fun x36 () Int)
(declare-fun x114 () Int)
(declare-fun x186 () Int)
(declare-fun x6 () Int)
(declare-fun x40 () Int)
(declare-fun x157 () Bool)
(declare-fun x130 () Int)
(declare-fun x137 () Int)
(declare-fun x235 () Int)
(declare-fun x123 () Int)
(declare-fun x61 () Int)
(declare-fun x230 (Int Int) Int)
(declare-fun x239 () Int)
(declare-fun x223 () Int)
(declare-fun x26 () Int)
(declare-fun x167 () Int)
(declare-fun x264 () Int)
(declare-fun x265 () Int)
(declare-fun x249 () Int)
(declare-fun x163 () Int)
(declare-fun x82 () Int)
(declare-fun x262 () Int)
(declare-fun x69 () Bool)
(declare-fun x204 () Bool)
(declare-fun x64 () Int)
(declare-fun x28 () Int)
(declare-fun x18 () Int)
(declare-fun x104 () Bool)
(declare-fun x199 () Int)
(declare-fun x111 (Int Int) Int)
(declare-fun x134 () Int)
(declare-fun x52 () Int)
(declare-fun x126 () Int)
(declare-fun x93 () Int)
(declare-fun x179 (Int) Int)
(declare-fun x260 () Bool)
(declare-fun x136 () Int)
(declare-fun x32 (Int) Int)
(declare-fun x246 () Int)
(declare-fun x194 () Int)
(declare-fun x228 () Bool)
(declare-fun x68 () Int)
(declare-fun x161 () Int)
(declare-fun x86 () Int)
(declare-fun x12 () Int)
(declare-fun x112 () Int)
(declare-fun x181 () Int)
(declare-fun x31 () Int)
(declare-fun x150 () Int)
(declare-fun x17 () Int)
(declare-fun x59 (Int) Int)
(declare-fun x268 (Int) Int)
(declare-fun x27 () Int)
(declare-fun x13 () Int)
(declare-fun x160 () Bool)
(declare-fun x102 () Int)
(declare-fun x177 () Int)
(declare-fun x143 () Int)
(declare-fun x212 (Int) Int)
(declare-fun x120 () Int)
(declare-fun x211 () Int)
(declare-fun x41 () Int)
(declare-fun x252 () Int)
(declare-fun x62 () Int)
(declare-fun x203 () Int)
(declare-fun x84 () Int)
(declare-fun x87 () Int)
(declare-fun x224 () Int)
(declare-fun x16 () Bool)
(declare-fun x208 () Int)
(declare-fun x275 () Int)
(declare-fun x169 () Int)
(declare-fun x89 () Int)
(declare-fun x79 () Int)
(declare-fun x182 () Int)
(declare-fun x127 () Bool)
(declare-fun x42 () Int)
(declare-fun x44 () Int)
(declare-fun x243 () Int)
(declare-fun x110 () Int)
(declare-fun x189 (Int) Int)
(declare-fun x37 (Int) Int)
(declare-fun x139 () Int)
(declare-fun x205 () Int)
(declare-fun x196 () Int)
(declare-fun x209 () Int)
(declare-fun x23 () Int)
(declare-fun x234 () Int)
(declare-fun x214 () Int)
(declare-fun x95 (Int) Int)
(declare-fun x116 () Int)
(declare-fun x227 () Int)
(declare-fun x173 () Int)
(declare-fun x74 () Int)
(declare-fun x166 () Int)
(declare-fun x118 () Int)
(declare-fun x144 () Int)
(declare-fun x94 () Int)
(declare-fun x174 () Int)
(declare-fun x225 () Int)
(declare-fun x215 () Int)
(declare-fun x49 () Int)
(declare-fun x146 () Int)
(declare-fun x251 () Int)
(declare-fun x255 () Int)
(declare-fun x221 () Int)
(declare-fun x138 () Int)
(declare-fun x124 () Int)
(declare-fun x8 (Int Int) Int)
(declare-fun x148 () Int)
(declare-fun x133 () Int)
(declare-fun x171 () Int)
(declare-fun x105 () Int)
(declare-fun x97 () Int)
(declare-fun x218 () Int)
(declare-fun x187 () Int)
(declare-fun x192 (Int Int) Int)
(declare-fun x217 () Int)
(declare-fun x188 () Int)
(define-fun x253 ((x248 Int)) Int (ite (and (<= 0 x248) (< x248 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x248 (- x248 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x190 ((x248 Int)) Int (ite (and (> 0 x248) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x248)) (+ x248 115792089237316195423570985008687907853269984665640564039457584007913129639936) x248))
(define-fun x180 ((x248 Int)) Int (ite (and (< x248 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x248)) x248 (ite (and (>= x248 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x248)) (- x248 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x248 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x248)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x248) (x8 x248 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x276 ((x58 Int)) Bool (and (>= x58 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x58)))
(define-fun x56 ((x58 Int)) Bool (and (< x58 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x58)))
(define-fun x165 ((x58 Int) (x47 Int)) Bool (=> (and (> x58 0) (< 0 x47)) (and (>= x58 (x2 x58 x47)) (<= 0 (x2 x58 x47)))))
(define-fun x158 ((x58 Int) (x47 Int)) Bool (=> (and (and (>= x47 1) (< x47 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (< x58 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x58 0))) (and (>= (x2 x58 x47) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x2 x58 x47)))))
(define-fun x270 ((x58 Int) (x47 Int)) Bool (=> (and (> x58 x47) (< 1 x47)) (< (x2 x58 x47) x58)))
(define-fun x90 ((x58 Int) (x47 Int)) Bool (=> (and (> x58 0) (< 0 x47)) (= (= (x2 x58 x47) 0) (< x58 x47))))
(define-fun x232 ((x58 Int)) Bool (= 0 (x2 0 x58)))
(define-fun x38 ((x58 Int)) Bool (= (x2 x58 1) x58))
(define-fun x184 ((x58 Int)) Bool (=> (not (= x58 0)) (= (x2 x58 x58) 1)))
(define-fun x266 ((x58 Int)) Bool (and (x232 x58) (x38 x58) (x184 x58)))
(define-fun x272 ((x58 Int)) Bool (and (= (x192 x58 115792089237316195423570985008687907853269984665640564039457584007913129639935) x58) (= x58 (x192 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58))))
(define-fun x103 ((x58 Int)) Bool (and (= 0 (x192 0 x58)) (= 0 (x192 x58 0))))
(define-fun x11 ((x58 Int)) Bool (= x58 (x192 x58 x58)))
(define-fun x76 ((x58 Int)) Bool (and (x11 x58) (x103 x58) (x272 x58)))
(define-fun x129 ((x58 Int) (x47 Int)) Bool (= (x192 x47 x58) (x192 x58 x47)))
(define-fun x226 ((x58 Int) (x47 Int)) Bool (and (<= 0 (x192 x58 x47)) (=> (>= x47 0) (>= x47 (x192 x58 x47))) (=> (>= x58 0) (<= (x192 x58 x47) x58))))
(define-fun x119 ((x58 Int) (x47 Int)) Bool (and (x129 x58 x47) (x226 x58 x47)))
(define-fun x183 ((x58 Int)) Bool (= (x8 x58 4294967296) (x192 x58 4294967295)))
(define-fun x53 ((x58 Int)) Bool (and (x119 x58 4294967295) (x183 x58)))
(define-fun x147 ((x58 Int) (x47 Int)) Bool (and (< (x8 x58 x47) x47) (>= (x8 x58 x47) 0)))
(define-fun x117 ((x58 Int) (x47 Int)) Bool (=> (and (< 0 x47) (>= x58 0)) (= (> x47 x58) (= x58 (x8 x58 x47)))))
(define-fun x22 ((x58 Int) (x47 Int)) Bool (=> (and (and (< x58 (+ x47 x47)) (<= x47 x58)) (> x47 0)) (= (x8 x58 x47) (- x58 x47))))
(define-fun x170 ((x58 Int)) Bool (= 0 (x8 0 x58)))
(define-fun x85 ((x58 Int)) Bool (= 0 (x8 x58 1)))
(define-fun x172 ((x58 Int)) Bool (= (x8 x58 x58) 0))
(define-fun x207 ((x58 Int)) Bool (and (x170 x58) (x172 x58) (x85 x58)))
(define-fun x233 ((x58 Int)) Bool (= (x8 x58 340282366920938463463374607431768211456) (x192 x58 340282366920938463463374607431768211455)))
(define-fun x273 ((x58 Int)) Bool (and (x233 x58) (x119 x58 340282366920938463463374607431768211455)))
(define-fun x156 ((x58 Int)) Bool (= (x8 x58 1461501637330902918203684832716283019655932542976) (x192 x58 1461501637330902918203684832716283019655932542975)))
(define-fun x256 ((x58 Int)) Bool (and (x119 x58 1461501637330902918203684832716283019655932542975) (x156 x58)))
(define-fun x149 ((x58 Int)) Bool (= (x8 x58 256) (x192 x58 255)))
(define-fun x178 ((x58 Int)) Bool (and (x119 x58 255) (x149 x58)))
(define-fun x24 ((x58 Int)) Bool (= (x180 x58) (+ (x192 x58 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x8 x58 256))))
(define-fun x66 ((x58 Int)) Bool (and (x24 x58) (x119 x58 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(define-fun x162 ((x34 Int)) Int (ite (= x34 128) x255 (x179 x34)))
(define-fun x63 ((x34 Int)) Int (ite (= x34 160) x107 (x162 x34)))
(define-fun x263 ((x34 Int)) Int (ite (= 192 x34) x238 (x63 x34)))
(define-fun x65 ((x34 Int)) Int (ite (= 224 x34) x29 (x263 x34)))
(define-fun x237 ((x34 Int)) Int (ite (= x34 256) x4 (x65 x34)))
(define-fun x67 ((x34 Int)) Int (ite (= 128 x34) x186 (x21 x34)))
(define-fun x254 ((x34 Int)) Int (ite (= x34 160) x214 (x189 x34)))
(define-fun x19 ((x34 Int)) Int (ite (= x34 192) x236 (x95 x34)))
(define-fun x197 ((x34 Int)) Int (ite (= 224 x34) x3 (x55 x34)))
(define-fun x122 ((x34 Int)) Int (ite (= 256 x34) x91 (x268 x34)))
(define-fun x60 ((x34 Int)) Int (ite (= 288 x34) x245 (x155 x34)))
(define-fun x210 ((x34 Int)) Int (ite (= x34 512) x121 (x59 x34)))
(define-fun x135 ((x34 Int)) Int (ite (= 544 x34) x12 (x210 x34)))
(define-fun x57 ((x34 Int)) Int (ite (= x34 576) x224 (x135 x34)))
(define-fun x202 ((x34 Int)) Int (ite (= 608 x34) x265 (x57 x34)))
(define-fun x100 ((x34 Int)) Int (ite (= x34 640) x54 (x202 x34)))
(define-fun x80 ((x34 Int)) Int (ite (= 672 x34) x258 (x100 x34)))
(define-fun x33 ((x34 Int)) Int (ite (= x123 x34) x223 (x191 x34)))
(define-fun x140 ((x34 Int)) Int (ite (= x34 128) x221 (x212 x34)))
(define-fun x200 ((x34 Int)) Int (ite (= 160 x34) x17 (x140 x34)))
(define-fun x213 ((x34 Int)) Int (ite (= x34 192) x176 (x200 x34)))
(define-fun x198 ((x34 Int)) Int (ite (= x34 224) x71 (x213 x34)))
(define-fun x240 ((x34 Int)) Int (ite (= 256 x34) x193 (x198 x34)))
(assert (x76 x83))
(assert (not (= 947726895 (+ 3 x205))))
(assert (not (= 2220280665 (+ 2 x205))))
(assert (not (= 1960641893 (+ x205 3))))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x108 x277 x124))))
(assert (x56 x13))
(assert (not (= (x108 x261 x222) 1960939212)))
(assert (x76 x218))
(assert (x56 x15))
(assert (x56 x225))
(assert (=> (>= 10000 x261) (not (= (+ 2 x205) x261))))
(assert (x56 x174))
(assert (not (= (+ x205 2) (x108 x86 x271))))
(assert (not (= (x108 x261 x222) 911855590)))
(assert (not (= 3110348530 (x108 x261 x222))))
(assert (=> (<= x153 10000) (not (= (+ 2 x205) x153))))
(assert (not (= 18446744073709551616 (x108 x86 x271))))
(assert (not (= (x108 x261 x222) 662108492)))
(assert (=> (>= 10000 x89) (not (= x89 (+ 2 x205)))))
(assert (not (= (x108 x261 x222) 1960641893)))
(assert (x56 x219))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (+ x205 3))))
(assert (not (= (x108 x277 x124) 340282366920938463463374607431768211455)))
(assert (=> (= (x108 x277 x124) (x108 x261 x222)) (and (= x222 x124) (= x277 x261))))
(assert (not (= 662108492 (x108 x277 x124))))
(assert (x56 x130))
(assert (=> (<= x153 10000) (not (= (+ x27 3) x153))))
(assert (x207 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x277) (not (= (+ x27 3) x277))))
(assert (=> (>= 10000 x153) (not (= (x108 x261 x222) x153))))
(assert (not (= 3110348530 (+ x27 3))))
(assert (=> (<= x50 10000) (not (= (+ x27 2) x50))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x108 x86 x271))))
(assert (x266 x7))
(assert (x56 x121))
(assert (x56 x152))
(assert (x56 x97))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x108 x153 x124))))
(assert (=> (>= 10000 x86) (not (= (x108 x153 x124) x86))))
(assert (not (= (+ 3 x205) 18446744073709551616)))
(assert (=> (>= 10000 x50) (not (= x50 (+ x205 2)))))
(assert (x56 x61))
(assert (=> (<= x277 10000) (not (= (x108 x261 x222) x277))))
(assert (=> (<= x86 10000) (not (= (+ 2 x27) x86))))
(assert (x56 x131))
(assert (and (x22 x242 4294967296) (x147 x242 4294967296) (x117 x242 4294967296) (=> (< 0 4294967296) (= x242 (+ (x8 x242 4294967296) (* (x2 x242 4294967296) 4294967296))))))
(assert (=> (= (+ x205 2) (+ 2 x27)) (and (= x86 x261) (= x222 x271))))
(assert (and (x22 x217 4294967296) (x147 x217 4294967296) (x117 x217 4294967296) (=> (< 0 4294967296) (= x217 (+ (x8 x217 4294967296) (* (x2 x217 4294967296) 4294967296))))))
(assert (not (= 18446744073709551616 (+ x27 2))))
(assert (x56 x126))
(assert (not (= (x108 x261 x222) 3547226261)))
(assert (not (= (x108 x277 x124) (+ x205 2))))
(assert (x276 x27))
(assert (x266 x126))
(assert (x178 x218))
(assert (not (= (+ 3 x27) (x108 x261 x222))))
(assert (x56 x224))
(assert (not (= (x108 x86 x271) 4294967295)))
(assert (not (= 79228162514264337593543950336 (x108 x261 x222))))
(assert (x53 x217))
(assert (x56 x166))
(assert (not (= (x108 x86 x271) 2220280665)))
(assert (=> (<= x124 10000) (not (= (x108 x261 x222) x124))))
(assert (not (= (x108 x86 x271) 3547226261)))
(assert (x56 x50))
(assert (not x104))
(assert (x56 x9))
(assert (not (= (+ 3 x27) 3547226261)))
(assert (x56 x79))
(assert (not (= (x108 x86 x271) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (not (= 662108492 (+ x205 3))))
(assert (x76 x64))
(assert (not (= (+ x205 2) 4294967296)))
(assert (not (= 3250587425 (x108 x86 x271))))
(assert (not (= 3250587425 (+ 2 x205))))
(assert (=> (>= 10000 x124) (not (= x124 (+ 2 x27)))))
(assert (not (= (+ x27 2) 1960939212)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (+ 2 x27))))
(assert (and (x158 x208 4294967296) (= (- x208 (x192 4294967295 x208)) (* (x2 x208 4294967296) 4294967296)) (=> (and (> 4294967296 0) (> x208 0)) (and (<= (* 4294967296 (x2 x208 4294967296)) x208) (< (- x208 4294967296) (* (x2 x208 4294967296) 4294967296)))) (x270 x208 4294967296) (x90 x208 4294967296) (x165 x208 4294967296)))
(assert (x76 x30))
(assert (not (= (+ x27 3) 911855590)))
(assert (not (= (+ x205 2) 1960641893)))
(assert (not (= (+ x205 3) 1960939212)))
(assert (not (= (+ 3 x27) (x108 x277 x124))))
(assert (x56 x143))
(assert (x56 x161))
(assert (x56 x150))
(assert (x56 x258))
(assert (=> (>= 10000 x124) (not (= x124 (+ 3 x205)))))
(assert (x56 x102))
(assert (x56 x185))
(assert (not (= (x108 x277 x124) 1084754510)))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x108 x153 x124))))
(assert (not (= (+ 3 x205) 4294967295)))
(assert (x56 x173))
(assert (x56 x41))
(assert (not (= 1749768213 (x108 x277 x124))))
(assert (x56 x182))
(assert (x56 x242))
(assert (x56 x5))
(assert (not (= 1960641893 (x108 x86 x271))))
(assert (x266 4294967296))
(assert (x56 x43))
(assert (not (= 1960939212 (x108 x153 x124))))
(assert (=> (= (x108 x153 x124) (x108 x261 x222)) (and (= x222 x124) (= x261 x153))))
(assert (=> (<= x86 10000) (not (= (+ 3 x205) x86))))
(assert (x76 x227))
(assert (x56 x159))
(assert (not (= (+ 2 x27) 947726895)))
(assert (x56 x141))
(assert (x53 x83))
(assert (not (= (x108 x86 x271) 911855590)))
(assert (x56 x29))
(assert (x56 x203))
(assert (x276 x161))
(assert (x56 x31))
(assert (=> (>= 10000 x261) (not (= x261 (x108 x86 x271)))))
(assert (not (= (+ 2 x205) (+ 3 x27))))
(assert (not (= 1084754510 (+ x205 3))))
(assert (x56 x188))
(assert (=> (>= 10000 x261) (not (= x261 (+ x205 3)))))
(assert (not (= (x108 x86 x271) 1960939212)))
(assert (x56 x209))
(assert (not (= (+ x205 3) (+ x27 2))))
(assert (x76 x242))
(assert (x76 1461501637330902918203684832716283019655932542975))
(assert (x56 x251))
(assert (not (= (x108 x86 x271) 3110348530)))
(assert (=> (= (x108 x277 x124) (x108 x86 x271)) (and (= x86 x277) (= x124 x271))))
(assert (=> (>= 10000 x50) (not (= x50 (x108 x153 x124)))))
(assert (not (= (x108 x153 x124) (+ x27 2))))
(assert (=> (>= 10000 x50) (not (= x50 (x108 x86 x271)))))
(assert (not (= (x108 x261 x222) (+ x27 2))))
(assert (and (x22 x64 1461501637330902918203684832716283019655932542976) (x147 x64 1461501637330902918203684832716283019655932542976) (x117 x64 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= x64 (+ (x8 x64 1461501637330902918203684832716283019655932542976) (* (x2 x64 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976))))))
(assert (=> (<= x261 10000) (not (= (x108 x153 x124) x261))))
(assert (and (x22 x83 4294967296) (x147 x83 4294967296) (x117 x83 4294967296) (=> (< 0 4294967296) (= x83 (+ (x8 x83 4294967296) (* (x2 x83 4294967296) 4294967296))))))
(assert (not (= 2220280665 (+ 3 x205))))
(assert (not (= (x108 x261 x222) 1749768213)))
(assert (not (= (x108 x277 x124) (+ 3 x205))))
(assert (x56 x84))
(assert (x56 x247))
(assert (not (= (+ 2 x205) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x108 x261 x222))))
(assert (not (= (+ 2 x27) 4294967296)))
(assert (x56 x30))
(assert (x56 x261))
(assert (= x16 true))
(assert (and (x22 x227 256) (x147 x227 256) (x117 x227 256) (=> (< 0 256) (= x227 (+ (x8 x227 256) (* (x2 x227 256) 256))))))
(assert (not (= (+ x27 3) 1749768213)))
(assert (=> (>= 10000 x86) (not (= x86 (+ 3 x27)))))
(assert (x56 x138))
(assert (x56 x94))
(assert (not (= (x108 x153 x124) 911855590)))
(assert (x276 x89))
(assert (=> (<= x261 10000) (not (= x261 (+ 2 x27)))))
(assert (x56 x115))
(assert (=> (>= 10000 x86) (not (= (+ 2 x205) x86))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ x205 2))))
(assert (not (= 2220280665 (x108 x153 x124))))
(assert (not (= 18446744073709551616 (+ x205 2))))
(assert (not (= 3110348530 (x108 x277 x124))))
(assert (x56 x120))
(assert (not (= (+ 3 x27) 4294967296)))
(assert (=> (<= x277 10000) (not (= x277 (x108 x153 x124)))))
(assert (=> (>= 10000 x50) (not (= x50 (+ x205 3)))))
(assert (not (= (x108 x261 x222) (+ 2 x205))))
(assert (x56 x265))
(assert (=> (<= x123 10000) (not (= x123 (x108 x86 x271)))))
(assert (x276 x277))
(assert (not (= 1061922874 (+ 2 x205))))
(assert (x56 x86))
(assert (not (= (x108 x277 x124) 3547226261)))
(assert (not (= (+ 3 x205) (x108 x153 x124))))
(assert (=> (>= 10000 x89) (not (= (+ x27 2) x89))))
(assert (not (= (+ 2 x27) 911855590)))
(assert (x207 x64))
(assert (x56 x142))
(assert (x56 x243))
(assert (x56 x116))
(assert (x56 x6))
(assert (x76 x81))
(assert (x56 x262))
(assert (x207 4294967296))
(assert (not (= 941780010 (x108 x153 x124))))
(assert (=> (<= x86 10000) (not (= x86 (x108 x261 x222)))))
(assert (x266 x208))
(assert (not (= (+ 2 x205) (+ x205 3))))
(assert (=> (<= x277 10000) (not (= (+ x205 3) x277))))
(assert (x56 x105))
(assert (x56 x17))
(assert (not (= (+ 2 x205) 947726895)))
(assert (not (= 340282366920938463463374607431768211455 (+ 3 x205))))
(assert (not (= (x108 x261 x222) 1061922874)))
(assert (=> (>= 10000 x261) (not (= x261 (+ x27 3)))))
(assert (x56 x3))
(assert (not (= (x108 x261 x222) 3250587425)))
(assert (not (= 2652930389 (x108 x277 x124))))
(assert (not (= 340282366920938463463374607431768211455 (+ x27 3))))
(assert (=> (>= 10000 x161) (not (= (+ x27 2) x161))))
(assert (=> (<= x124 10000) (not (= x124 (x108 x153 x124)))))
(assert (x66 x227))
(assert (not (= (x108 x277 x124) 1960939212)))
(assert (not (= (+ 3 x27) 1960641893)))
(assert (x56 x181))
(assert (x56 x218))
(assert (x56 x70))
(assert (x56 x199))
(assert (not (= 79228162514264337593543950336 (+ x27 2))))
(assert (x56 x36))
(assert (x56 x264))
(assert (x276 x261))
(assert (x56 x255))
(assert (x266 x20))
(assert (x56 x167))
(assert (=> (>= 10000 x123) (not (= (+ x27 3) x123))))
(assert (x266 18446744073709551616))
(assert (not (= (x108 x261 x222) 4294967296)))
(assert (not (= 1749768213 (+ x205 3))))
(assert (and (x22 x81 4294967296) (x147 x81 4294967296) (x117 x81 4294967296) (=> (< 0 4294967296) (= x81 (+ (x8 x81 4294967296) (* (x2 x81 4294967296) 4294967296))))))
(assert (not (= 1960939212 (+ 2 x205))))
(assert (x56 x245))
(assert (x266 x45))
(assert (not (= 4294967295 (x108 x261 x222))))
(assert (not (= (x108 x261 x222) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x161) (not (= (x108 x86 x271) x161))))
(assert (x56 x49))
(assert (x56 x175))
(assert (x56 x234))
(assert (not (= 1749768213 (x108 x153 x124))))
(assert (x56 x128))
(assert (x56 x64))
(assert (x276 x205))
(assert (x207 256))
(assert (and (x22 x30 340282366920938463463374607431768211456) (x147 x30 340282366920938463463374607431768211456) (x117 x30 340282366920938463463374607431768211456) (=> (< 0 340282366920938463463374607431768211456) (= x30 (+ (x8 x30 340282366920938463463374607431768211456) (* (x2 x30 340282366920938463463374607431768211456) 340282366920938463463374607431768211456))))))
(assert (x56 x151))
(assert (x56 x110))
(assert (x56 x72))
(assert (not (= (x108 x153 x124) (+ x205 2))))
(assert (not (= (x108 x86 x271) 941780010)))
(assert (x56 x139))
(assert (x207 x242))
(assert (x56 x267))
(assert (not (= 662108492 (+ 3 x27))))
(assert (not (= 4294967295 (x108 x277 x124))))
(assert (not (= (+ x27 3) (x108 x153 x124))))
(assert (and (x22 x84 340282366920938463463374607431768211456) (x147 x84 340282366920938463463374607431768211456) (x117 x84 340282366920938463463374607431768211456) (=> (< 0 340282366920938463463374607431768211456) (= x84 (+ (x8 x84 340282366920938463463374607431768211456) (* (x2 x84 340282366920938463463374607431768211456) 340282366920938463463374607431768211456))))))
(assert (=> (>= 10000 x153) (not (= (+ 3 x205) x153))))
(assert (=> (>= 10000 x161) (not (= x161 (x108 x261 x222)))))
(assert (x56 x44))
(assert (=> (<= x261 10000) (not (= (x108 x277 x124) x261))))
(assert (not (= (x108 x86 x271) 947726895)))
(assert (=> (>= 10000 x153) (not (= (x108 x153 x124) x153))))
(assert (=> (>= 10000 x50) (not (= (+ x27 3) x50))))
(assert (x56 x187))
(assert (not (= (+ x205 3) (x108 x86 x271))))
(assert (=> (>= 10000 x277) (not (= (x108 x277 x124) x277))))
(assert (x76 255))
(assert (=> (<= x89 10000) (not (= x89 (+ 3 x27)))))
(assert (not (= (+ x27 2) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 911855590 (x108 x277 x124))))
(assert (x56 x215))
(assert (x56 x114))
(assert (x207 340282366920938463463374607431768211456))
(assert (not (= 1061922874 (x108 x153 x124))))
(assert (= (=> (and (and (= x39 x51) (= x171 (x237 192)) (= (x191 x106) x255) (>= 4294967295 x31) (= x28 0) (not (> 2652930389 x143)) (= x69 (< 0 (x32 x50))) (= (x237 128) x96) (>= x144 0) (= x206 false) (>= 1461501637330902918203684832716283019655932542975 x50) (= (+ 1 x106) x229) (>= x110 0) (>= x26 0) (<= x110 1461501637330902918203684832716283019655932542975) (<= 0 x148) (= (x2 x126 18446744073709551616) x81) (= x126 (x191 x229)) (>= x246 0) (>= x46 0) (= false x132) (>= x152 0) (= (< 0 (x32 x161)) x73) (>= x113 0) (= x208 (x191 x229)) (= x260 false) x69 (= x154 0) (= (x108 x86 x271) x205) (<= 0 x15) (= x68 (x237 224)) (> 3547226261 x143) x35 (= 1061922874 x52) (>= x51 0) (= (x37 x89) x74) (= x75 x153) (= x83 (x2 x208 4294967296)) (= x238 (x192 4294967295 x83)) (= x40 (x32 x161)) (= x29 (x192 340282366920938463463374607431768211455 x30)) (= (x37 x50) x246) (not (< x143 3110348530)) (= (> (x32 x89) 0) x35) (>= 1461501637330902918203684832716283019655932542975 x144) (<= 0 x62) (< 0 x40) (< 0 x50) (<= 0 x203) (= x30 (x2 x36 79228162514264337593543950336)) (>= 4294967295 x15) x73 (>= x31 0) (not (< x143 1749768213)) (= (x192 4294967295 x81) x4) (>= 1461501637330902918203684832716283019655932542975 x26) (>= 1461501637330902918203684832716283019655932542975 x148) (>= x74 0) (not (= x89 x50)) (<= x113 1461501637330902918203684832716283019655932542975) (= x36 (x191 x229)) (= (x237 160) x168) (<= 0 x113) (= (x191 x205) x107) (not (= x161 x50)) (<= x46 1461501637330902918203684832716283019655932542975) (= x271 (x108 x153 x124)) (>= 1461501637330902918203684832716283019655932542975 x89) (not (= x89 x161)) (= 3250587425 x143) (>= 1461501637330902918203684832716283019655932542975 x216) (= false x250) (= x239 (x237 256)) (= (+ x205 2) x106) (= x82 x86) (not (= x143 3110348530)) (<= x113 1461501637330902918203684832716283019655932542975) (<= x203 1461501637330902918203684832716283019655932542975) (= (x37 x161) x62) (<= x161 1461501637330902918203684832716283019655932542975) (<= x152 340282366920938463463374607431768211455) (>= x216 0) (<= x51 1461501637330902918203684832716283019655932542975) (> x89 0) (> x161 0)) (and (and (and (>= 1461501637330902918203684832716283019655932542975 x188) (= x98 x215) (= (+ 1 x252) x146) (= x48 (= x99 x177)) (= x125 (= x6 x173)) (< 0 x134) (not (> 2652930389 x167)) (= x120 x150) (<= 0 x144) (= (+ x27 2) x252) (< 0 x251) (= x45 (x33 x146)) (= (x240 128) x115) (= x196 (x32 x161)) (= x257 (= x13 x159)) (= x88 x82) (not (> 3110348530 x167)) (= x211 x274) x157 (not (= 947726895 x101)) (= x199 x99) (= x61 x262) x204 x231 (= x227 (x191 x123)) (>= 4294967295 x145) (= (= x41 x262) x231) (= 0 x133) (not (< x101 662108492)) (= x235 x82) (= x118 x275) (> 1749768213 x101) (not (= x101 911855590)) (= x242 (x2 x45 18446744073709551616)) (= x41 x23) (= x241 x23) (= (x192 4294967295 x217) x176) (= (x108 x261 x222) x27) (= x159 x219) (= x78 x219) (= (x2 x20 4294967296) x217) (= x151 0) x160 x257 (>= x131 0) (= x275 x13) (= x209 x25) x127 (= 1061922874 x101) (>= 1461501637330902918203684832716283019655932542975 x18) (< x101 1084754510) (< x167 3547226261) (= x177 x185) (<= x247 4294967295) (>= 340282366920938463463374607431768211455 x131) (= x82 x261) x228 (= (x191 x123) x218) (<= 0 x188) (>= x247 0) (= (x33 x146) x20) (= x188 x10) (= x64 (x191 81955473079516046949633743016697847541294818689821282749996681496272635257091)) (= (not (= x225 x118)) x228) (= (x192 1461501637330902918203684832716283019655932542975 x64) x9) (= x7 (x33 x146)) (<= x216 1461501637330902918203684832716283019655932542975) (< 0 x196) (not (< x182 4)) x48 (= x225 x82) (= (x108 x277 x124) x222) (= (x2 x7 79228162514264337593543950336) x84) (= (x240 160) x72) (= x267 x185) (= x209 x128) x125 (<= 0 x112) (= x249 (x240 224)) (= x234 (x240 192)) (= (= x128 x211) x127) (= (x192 255 x218) x251) (= (not (= x88 x92)) x160) (= x44 x136) (= x150 x6) (= x221 (x33 x252)) (= x169 x18) (= (x32 x161) x134) (>= 1461501637330902918203684832716283019655932542975 x139) (<= 0 x18) (= (x192 340282366920938463463374607431768211455 x84) x71) (= x75 x277) (= x173 x98) (>= x216 0) (>= x145 0) (not (= 3110348530 x167)) (= x92 x61) (= (x240 256) x49) (= (not (= x215 x235)) x204) (and (= (<= x182 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x182 3)) (>= x139 0) (= x136 x114) (= (= x114 x87) x157) (= x167 3250587425) (= (x33 x27) x17) (= x223 (x192 115792089237316195423570985008687907853269984665640564039457584007913129639680 x227)) (not (< x167 1749768213)) (not (< x101 911855590)) (= (x192 4294967295 x242) x193) (>= 1461501637330902918203684832716283019655932542975 x112) (= x216 x9) (= x105 x87) (not (= 941780010 x101)) (<= x144 1461501637330902918203684832716283019655932542975)) (and (= x115 x116) (= x249 x137) (= x93 x68) (= x187 x72) (= (= x93 x137) x195))) (and (= (x19 192) x224) (= (x80 576) x241) (<= x216 1461501637330902918203684832716283019655932542975) (= (x80 608) x25) (not (or (and (= (<= x130 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 192 x130)) (> x130 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x181 1960939212) (= x169 x138) (= (x80 672) x44) (not (< x181 1749768213)) (= x12 (x254 160)) (= x78 (x80 640)) (= x174 (x190 (- x182 68))) (<= 0 x138) (>= 1461501637330902918203684832716283019655932542975 x79) (= x166 128) (= 192 x42) (= (x122 256) x54) (= x163 x168) (= 256 x97) (= x164 256) (= (x197 224) x265) (>= 1461501637330902918203684832716283019655932542975 x138) (< x181 2220280665) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x243) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x243) true) (> 64 x243)))) (and (< 195 x182) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x182) true)) (= (x32 x161) x14) (= x258 (x60 288)) (not (> 1960641893 x181)) (= (x190 (- x182 132)) x243) (= (x190 (- x182 4)) x130) (= (x80 512) x120) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x174)) (> 64 x174)) (> x174 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 0 x14) (= x151 0) (<= 0 x216) (<= 0 x79) (= 128 x102) (> 2652930389 x181) (= 192 x141) (not (> 4 x182)) (= x96 x5) (= (x67 128) x121) (not (= 1960641893 x181)) (= x267 (x80 544))))) x195) x104))
(assert (x76 x84))
(assert (x56 x96))
(assert (not (= 1061922874 (+ x205 3))))
(assert (not (= 2652930389 (+ 3 x205))))
(assert (x56 x113))
(assert (x56 x14))
(assert (not (= (x108 x261 x222) 2220280665)))
(assert (not (= 3250587425 (+ x27 2))))
(assert (not (= (x108 x153 x124) 4294967296)))
(assert (x56 x153))
(assert (and (x158 x20 4294967296) (= (- x20 (x192 4294967295 x20)) (* (x2 x20 4294967296) 4294967296)) (=> (and (> 4294967296 0) (> x20 0)) (and (<= (* 4294967296 (x2 x20 4294967296)) x20) (< (- x20 4294967296) (* (x2 x20 4294967296) 4294967296)))) (x270 x20 4294967296) (x90 x20 4294967296) (x165 x20 4294967296)))
(assert (x56 x124))
(assert (x56 x7))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (+ 2 x205))))
(assert (x56 x176))
(assert (x56 x211))
(assert (not (= (+ 3 x27) 4294967295)))
(assert (x273 x84))
(assert (x56 x196))
(assert (x56 x109))
(assert (x56 x216))
(assert (x56 x10))
(assert (not (= 2220280665 (+ x27 2))))
(assert (x56 x144))
(assert (x56 x221))
(assert (not (= 1960641893 (x108 x277 x124))))
(assert (=> (>= 10000 x277) (not (= x277 (x108 x86 x271)))))
(assert (not (= (+ x27 2) 4294967295)))
(assert (x76 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (not (= (+ x27 2) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (=> (>= 10000 x124) (not (= (x108 x277 x124) x124))))
(assert (not (= (+ x27 3) 1960939212)))
(assert (x56 x238))
(assert (not (= 1084754510 (+ x27 2))))
(assert (x56 x169))
(assert (not (= 941780010 (x108 x277 x124))))
(assert (x56 x214))
(assert (x53 x242))
(assert (x56 x39))
(assert (not (= (x108 x153 x124) 3547226261)))
(assert (x56 x154))
(assert (=> (>= 10000 x89) (not (= (+ x205 3) x89))))
(assert (x56 x89))
(assert (x56 x20))
(assert (x56 x62))
(assert (not (= (+ x27 3) 1061922874)))
(assert (not (= 2220280665 (x108 x277 x124))))
(assert (not (= (+ 2 x205) 1749768213)))
(assert (x276 x271))
(assert (not (= (+ 2 x205) 340282366920938463463374607431768211455)))
(assert (=> (= (x108 x261 x222) (x108 x86 x271)) (and (= x86 x261) (= x222 x271))))
(assert (x56 x54))
(assert (x56 x241))
(assert (x56 x99))
(assert (and (x158 x45 18446744073709551616) (= (- x45 (x192 18446744073709551615 x45)) (* (x2 x45 18446744073709551616) 18446744073709551616)) (=> (and (> 18446744073709551616 0) (> x45 0)) (and (<= (* 18446744073709551616 (x2 x45 18446744073709551616)) x45) (< (- x45 18446744073709551616) (* (x2 x45 18446744073709551616) 18446744073709551616)))) (x270 x45 18446744073709551616) (x90 x45 18446744073709551616) (x165 x45 18446744073709551616)))
(assert (x56 x107))
(assert (=> (<= x123 10000) (not (= x123 (+ x205 3)))))
(assert (x56 x23))
(assert (not (= (+ 3 x205) (x108 x261 x222))))
(assert (not (= 79228162514264337593543950336 (+ 3 x205))))
(assert (x207 x84))
(assert (=> (<= x161 10000) (not (= (x108 x153 x124) x161))))
(assert (x56 x163))
(assert (not (= (x108 x153 x124) 662108492)))
(assert (x207 x227))
(assert (x56 x52))
(assert (x56 x275))
(assert (x56 x269))
(assert (x76 4294967295))
(assert (x56 x81))
(assert (=> (= (x108 x277 x124) (x108 x153 x124)) (= x153 x277)))
(assert (not (= 3250587425 (+ 3 x205))))
(assert (=> (>= 10000 x261) (not (= (x108 x261 x222) x261))))
(assert (=> (<= x161 10000) (not (= (+ 3 x27) x161))))
(assert (=> (>= 10000 x89) (not (= x89 (x108 x277 x124)))))
(assert (not (= (x108 x261 x222) 340282366920938463463374607431768211455)))
(assert (x76 340282366920938463463374607431768211455))
(assert (not (= 1061922874 (x108 x86 x271))))
(assert (not (= (x108 x86 x271) 1084754510)))
(assert (x56 x133))
(assert (=> (>= 10000 x123) (not (= x123 (x108 x277 x124)))))
(assert (not (= 3110348530 (+ 3 x205))))
(assert (x56 x194))
(assert (=> (<= x124 10000) (not (= x124 (+ x205 2)))))
(assert (not (= 1061922874 (+ x27 2))))
(assert (and (= 27 (x111 9 3)) (= (x111 9 9) 81) (= 81 (x111 27 3)) (= (x111 3 3) 9)))
(assert (not (= (+ 3 x27) 2652930389)))
(assert (x56 x4))
(assert (not (= 911855590 (+ 2 x205))))
(assert (x56 x98))
(assert (x56 x208))
(assert (x56 x26))
(assert (x56 x223))
(assert (not (= 947726895 (+ x27 3))))
(assert (not (= 4294967295 (+ x205 2))))
(assert (x56 x186))
(assert (x56 x68))
(assert (x56 x51))
(assert (not (= (+ 2 x27) 3110348530)))
(assert (not (= 18446744073709551616 (x108 x277 x124))))
(assert (not (= (x108 x86 x271) (+ 2 x27))))
(assert (not (= (x108 x86 x271) 79228162514264337593543950336)))
(assert (x276 x153))
(assert (x56 x40))
(assert (not (= 1749768213 (x108 x86 x271))))
(assert (not (= 1061922874 (x108 x277 x124))))
(assert (x207 x30))
(assert (not (= 18446744073709551616 (x108 x153 x124))))
(assert (x56 x91))
(assert (not (= (x108 x153 x124) 340282366920938463463374607431768211455)))
(assert (x56 x123))
(assert (x56 x137))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 3 x27))))
(assert (x56 x46))
(assert (x56 x246))
(assert (not (= 941780010 (+ x205 3))))
(assert (=> (>= 10000 x161) (not (= x161 (x108 x277 x124)))))
(assert (x56 x168))
(assert (=> (>= 10000 x153) (not (= (+ x27 2) x153))))
(assert (x56 x112))
(assert (not (= (+ 2 x27) 3547226261)))
(assert (=> (>= 10000 x86) (not (= x86 (x108 x86 x271)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x108 x277 x124))))
(assert (=> (<= x86 10000) (not (= (x108 x277 x124) x86))))
(assert (x276 x123))
(assert (=> (>= 10000 x124) (not (= (+ x27 3) x124))))
(assert (not (= (x108 x153 x124) 4294967295)))
(assert (not (= (x108 x86 x271) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ 2 x27) 1960641893)))
(assert (x56 x74))
(assert (not (= (x108 x153 x124) 947726895)))
(assert (not (= (+ 3 x27) 18446744073709551616)))
(assert (x56 x93))
(assert (=> (>= 10000 x161) (not (= (+ 3 x205) x161))))
(assert (=> (>= 10000 x123) (not (= (+ x27 2) x123))))
(assert (not (= 947726895 (x108 x261 x222))))
(assert (x56 x193))
(assert (x56 x217))
(assert (not (= (x108 x277 x124) 3250587425)))
(assert (x276 x86))
(assert (not (= (+ x205 2) 1084754510)))
(assert (x56 x177))
(assert (x56 x134))
(assert (x273 x30))
(assert (x207 x217))
(assert (not (= (x108 x261 x222) 2652930389)))
(assert (=> (= (x108 x153 x124) (x108 x86 x271)) (and (= x153 x86) (= x124 x271))))
(assert (=> (>= 10000 x123) (not (= (x108 x153 x124) x123))))
(assert (not (= (x108 x153 x124) 3110348530)))
(assert (x207 1461501637330902918203684832716283019655932542976))
(assert (not (= 4294967296 (x108 x277 x124))))
(assert (x266 79228162514264337593543950336))
(assert (not (= (x108 x153 x124) 3250587425)))
(assert (and (x158 x7 79228162514264337593543950336) (= (- x7 (x192 79228162514264337593543950335 x7)) (* (x2 x7 79228162514264337593543950336) 79228162514264337593543950336)) (=> (and (> 79228162514264337593543950336 0) (> x7 0)) (and (<= (* 79228162514264337593543950336 (x2 x7 79228162514264337593543950336)) x7) (< (- x7 79228162514264337593543950336) (* (x2 x7 79228162514264337593543950336) 79228162514264337593543950336)))) (x270 x7 79228162514264337593543950336) (x90 x7 79228162514264337593543950336) (x165 x7 79228162514264337593543950336)))
(assert (not (= (+ x27 3) 2220280665)))
(assert (x56 x12))
(assert (x56 x28))
(assert (x76 x217))
(assert (not (= (x108 x261 x222) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (not (= 79228162514264337593543950336 (+ 3 x27))))
(assert (not (= 1960641893 (x108 x153 x124))))
(assert (x56 x82))
(assert (x207 x83))
(assert (not (= (+ x27 2) (x108 x277 x124))))
(assert (not (= (+ x205 2) 2652930389)))
(assert (not (= (x108 x261 x222) 18446744073709551616)))
(assert (not (= 941780010 (+ 2 x205))))
(assert (not (= (+ x205 2) 3547226261)))
(assert (x56 x71))
(assert (x276 x124))
(assert (x56 x92))
(assert (x56 x239))
(assert (x56 x136))
(assert (and (x158 x36 79228162514264337593543950336) (= (- x36 (x192 79228162514264337593543950335 x36)) (* (x2 x36 79228162514264337593543950336) 79228162514264337593543950336)) (=> (and (> 79228162514264337593543950336 0) (> x36 0)) (and (<= (* 79228162514264337593543950336 (x2 x36 79228162514264337593543950336)) x36) (< (- x36 79228162514264337593543950336) (* (x2 x36 79228162514264337593543950336) 79228162514264337593543950336)))) (x270 x36 79228162514264337593543950336) (x90 x36 79228162514264337593543950336) (x165 x36 79228162514264337593543950336)))
(assert (and (x158 x126 18446744073709551616) (= (- x126 (x192 18446744073709551615 x126)) (* (x2 x126 18446744073709551616) 18446744073709551616)) (=> (and (> 18446744073709551616 0) (> x126 0)) (and (<= (* 18446744073709551616 (x2 x126 18446744073709551616)) x126) (< (- x126 18446744073709551616) (* (x2 x126 18446744073709551616) 18446744073709551616)))) (x270 x126 18446744073709551616) (x90 x126 18446744073709551616) (x165 x126 18446744073709551616)))
(assert (=> (>= 10000 x124) (not (= x124 (x108 x86 x271)))))
(assert (x56 x148))
(assert (not (= 947726895 (x108 x277 x124))))
(assert (and (x22 x218 256) (x147 x218 256) (x117 x218 256) (=> (< 0 256) (= x218 (+ (x8 x218 256) (* (x2 x218 256) 256))))))
(assert (not (= (x108 x86 x271) 2652930389)))
(assert (x56 x171))
(assert (=> (>= 10000 x153) (not (= x153 (x108 x86 x271)))))
(assert (not (= (+ 3 x27) (x108 x86 x271))))
(assert (x56 x101))
(assert (=> (<= x89 10000) (not (= (x108 x261 x222) x89))))
(assert (x56 x277))
(assert (x56 x45))
(assert (x256 x64))
(assert (not (= 2652930389 (x108 x153 x124))))
(assert (x207 x218))
(assert (x56 x75))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (+ 3 x27))))
(assert (not (= (+ 3 x205) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ x27 3) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x56 x25))
(assert (not (= (+ 2 x27) 941780010)))
(assert (x276 x222))
(assert (=> (>= 10000 x153) (not (= (x108 x277 x124) x153))))
(assert (x56 x18))
(assert (not (= (+ 2 x27) (+ x27 3))))
(assert (x56 x274))
(assert (x56 x227))
(assert (=> (= (+ x27 3) (+ 3 x205)) (and (= x261 x86) (= x271 x222))))
(assert (=> (<= x50 10000) (not (= (x108 x277 x124) x50))))
(assert (x56 x87))
(assert (not (= 662108492 (x108 x86 x271))))
(assert (=> (<= x89 10000) (not (= x89 (x108 x153 x124)))))
(assert (=> (<= x50 10000) (not (= x50 (x108 x261 x222)))))
(assert (x266 x36))
(assert (not (= 4294967296 (+ x205 3))))
(assert (x207 x81))
(assert (not (= (+ 2 x27) 340282366920938463463374607431768211455)))
(assert (not (= 941780010 (+ x27 3))))
(assert (=> (<= x123 10000) (not (= x123 (x108 x261 x222)))))
(assert (not (= (+ 2 x27) 662108492)))
(assert (and (x22 x227 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x147 x227 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x117 x227 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x227 (+ (x8 x227 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x2 x227 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x56 x164))
(assert (not (= 340282366920938463463374607431768211455 (x108 x86 x271))))
(assert (not (= (+ x27 3) 1084754510)))
(assert (x56 x42))
(assert (not (= 662108492 (+ x205 2))))
(assert (not (= 1749768213 (+ x27 2))))
(assert (not (= 911855590 (+ x205 3))))
(assert (not (= (x108 x277 x124) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x56 x83))
(assert (not (= 79228162514264337593543950336 (x108 x277 x124))))
(assert (x56 x118))
(assert (not (= (+ x205 2) 3110348530)))
(assert (not (= (x108 x153 x124) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 79228162514264337593543950336 (x108 x153 x124))))
(assert (x56 x78))
(assert (x56 x145))
(assert (not (= 2652930389 (+ 2 x27))))
(assert (=> (<= x89 10000) (not (= (x108 x86 x271) x89))))
(assert (x56 x235))
(assert (x276 x50))
(assert (not (= (+ 3 x27) 3250587425)))
(assert (x56 x88))
(assert (x56 x249))
(assert (=> (<= x123 10000) (not (= (+ 2 x205) x123))))
(assert (not (= (+ 3 x205) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (=> (<= x277 10000) (not (= x277 (+ 2 x27)))))
(assert (not (= (x108 x86 x271) 4294967296)))
(assert (not (= (+ x205 2) 79228162514264337593543950336)))
(assert (not (= 3547226261 (+ x205 3))))
(assert (=> (<= x277 10000) (not (= x277 (+ 2 x205)))))
(assert (not (= 941780010 (x108 x261 x222))))
(assert (x56 x236))
(assert (not (= 1084754510 (x108 x153 x124))))
(assert (x53 x81))
(assert (=> (>= 10000 x161) (not (= (+ 2 x205) x161))))
(assert (not (= (x108 x261 x222) 1084754510)))
(check-sat)
(exit)
