(set-info :smt-lib-version 2.6)
(set-logic QF_UFLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x158 (Int) Int)
(declare-fun x134 () Int)
(declare-fun x95 () Int)
(declare-fun x40 () Int)
(declare-fun x73 () Bool)
(declare-fun x63 () Bool)
(declare-fun x185 () Bool)
(declare-fun x155 () Int)
(declare-fun x97 (Int) Int)
(declare-fun x136 () Int)
(declare-fun x94 (Int) Int)
(declare-fun x42 () Bool)
(declare-fun x122 () Int)
(declare-fun x9 () Bool)
(declare-fun x30 (Int) Int)
(declare-fun x38 () Bool)
(declare-fun x154 () Bool)
(declare-fun x123 () Int)
(declare-fun x177 () Int)
(declare-fun x15 () Int)
(declare-fun x74 () Bool)
(declare-fun x115 () Bool)
(declare-fun x16 () Int)
(declare-fun x6 () Int)
(declare-fun x103 () Int)
(declare-fun x173 () Int)
(declare-fun x44 () Int)
(declare-fun x64 () Int)
(declare-fun x113 () Bool)
(declare-fun x149 () Int)
(declare-fun x100 (Int) Int)
(declare-fun x51 () Int)
(declare-fun x84 () Bool)
(declare-fun x146 () Int)
(declare-fun x28 () Int)
(declare-fun x125 () Int)
(declare-fun x182 () Bool)
(declare-fun x166 () Bool)
(declare-fun x18 () Int)
(declare-fun x159 () Int)
(declare-fun x99 () Int)
(declare-fun x139 (Int Int) Int)
(declare-fun x189 () Int)
(declare-fun x148 () Bool)
(declare-fun x25 () Int)
(declare-fun x45 () Int)
(declare-fun x56 () Bool)
(declare-fun x161 () Bool)
(declare-fun x162 () Int)
(declare-fun x160 () Bool)
(declare-fun x86 () Bool)
(declare-fun x107 () Bool)
(declare-fun x164 () Bool)
(declare-fun x61 () Int)
(declare-fun x90 () Int)
(declare-fun x150 () Int)
(declare-fun x172 () Int)
(declare-fun x135 () Int)
(declare-fun x43 () Bool)
(declare-fun x167 () Int)
(declare-fun x93 () Int)
(declare-fun x181 (Int Int) Int)
(declare-fun x59 (Int) Int)
(declare-fun x80 () Int)
(declare-fun x186 () Bool)
(declare-fun x4 () Int)
(declare-fun x169 () Int)
(declare-fun x157 () Int)
(declare-fun x76 () Bool)
(declare-fun x8 () Int)
(declare-fun x32 () Int)
(declare-fun x13 () Bool)
(declare-fun x70 (Int Int) Int)
(declare-fun x121 () Bool)
(declare-fun x180 () Int)
(declare-fun x1 () Int)
(declare-fun x152 () Int)
(declare-fun x36 () Int)
(declare-fun x179 () Int)
(declare-fun x175 () Int)
(declare-fun x58 () Bool)
(declare-fun x47 () Bool)
(declare-fun x163 () Int)
(declare-fun x108 () Bool)
(declare-fun x78 (Int) Int)
(declare-fun x171 () Bool)
(declare-fun x128 () Int)
(declare-fun x116 () Bool)
(declare-fun x3 () Int)
(declare-fun x184 () Int)
(declare-fun x62 () Int)
(declare-fun x92 () Int)
(declare-fun x129 () Int)
(declare-fun x34 () Int)
(declare-fun x39 () Int)
(declare-fun x176 () Int)
(declare-fun x141 () Int)
(declare-fun x2 () Int)
(declare-fun x187 (Int) Int)
(declare-fun x7 () Int)
(declare-fun x138 () Bool)
(declare-fun x75 () Int)
(declare-fun x49 () Bool)
(declare-fun x66 () Bool)
(declare-fun x102 () Bool)
(declare-fun x69 () Int)
(declare-fun x31 () Int)
(declare-fun x23 () Bool)
(declare-fun x118 () Int)
(declare-fun x183 () Int)
(declare-fun x41 () Bool)
(declare-fun x22 () Bool)
(declare-fun x65 () Bool)
(declare-fun x79 () Bool)
(declare-fun x104 () Bool)
(declare-fun x68 () Int)
(declare-fun x37 () Bool)
(declare-fun x72 () Bool)
(declare-fun x35 (Int Int) Int)
(declare-fun x82 () Int)
(declare-fun x11 () Int)
(declare-fun x119 () Bool)
(declare-fun x46 (Int Int) Int)
(declare-fun x10 () Bool)
(declare-fun x83 () Bool)
(define-fun x142 ((x67 Int)) Int (ite (and (>= x67 0) (< x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x67 (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x81 ((x67 Int)) Int (ite (and (< x67 0) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x67)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x67) x67))
(define-fun x110 ((x67 Int)) Int (ite (and (< x67 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x67 0)) x67 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x67) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x67)) (- x67 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x67 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x67)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x67) (x35 x67 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x178 ((x114 Int)) Bool (and (>= x114 0) (< x114 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x54 ((x114 Int)) Bool (and (<= 0 x114) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x114)))
(define-fun x88 ((x114 Int) (x50 Int)) Bool (=> (and (> x114 0) (< 0 x50)) (and (>= x114 (x139 x114 x50)) (<= 0 (x139 x114 x50)))))
(define-fun x140 ((x114 Int) (x50 Int)) Bool (=> (and (and (<= 0 x114) (< x114 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (<= 1 x50) (< x50 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x139 x114 x50)) (>= (x139 x114 x50) 0))))
(define-fun x144 ((x114 Int) (x50 Int)) Bool (=> (and (> x50 1) (< x50 x114)) (> x114 (x139 x114 x50))))
(define-fun x71 ((x114 Int) (x50 Int)) Bool (=> (and (< 0 x50) (< 0 x114)) (= (> x50 x114) (= (x139 x114 x50) 0))))
(define-fun x21 ((x114 Int)) Bool (= 0 (x139 0 x114)))
(define-fun x170 ((x114 Int)) Bool (= (x139 x114 1) x114))
(define-fun x53 ((x114 Int)) Bool (=> (not (= 0 x114)) (= (x139 x114 x114) 1)))
(define-fun x33 ((x114 Int)) Bool (and (x53 x114) (x21 x114) (x170 x114)))
(define-fun x143 ((x114 Int)) Bool (and (= x114 (x181 x114 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x181 115792089237316195423570985008687907853269984665640564039457584007913129639935 x114) x114)))
(define-fun x117 ((x114 Int)) Bool (and (= 0 (x181 0 x114)) (= (x181 x114 0) 0)))
(define-fun x77 ((x114 Int)) Bool (= (x181 x114 x114) x114))
(define-fun x87 ((x114 Int)) Bool (and (x77 x114) (x117 x114) (x143 x114)))
(define-fun x29 ((x114 Int) (x50 Int)) Bool (= (x181 x114 x50) (x181 x50 x114)))
(define-fun x130 ((x114 Int) (x50 Int)) Bool (and (=> (>= x114 0) (>= x114 (x181 x114 x50))) (>= (x181 x114 x50) 0) (=> (<= 0 x50) (>= x50 (x181 x114 x50)))))
(define-fun x52 ((x114 Int) (x50 Int)) Bool (and (x130 x114 x50) (x29 x114 x50)))
(define-fun x145 ((x114 Int)) Bool (= (x181 x114 1) (x35 x114 2)))
(define-fun x12 ((x114 Int)) Bool (and (x145 x114) (x52 x114 1)))
(define-fun x20 ((x114 Int) (x50 Int)) Bool (and (>= (x35 x114 x50) 0) (> x50 (x35 x114 x50))))
(define-fun x151 ((x114 Int) (x50 Int)) Bool (=> (and (< 0 x50) (>= x114 0)) (= (= (x35 x114 x50) x114) (> x50 x114))))
(define-fun x57 ((x114 Int) (x50 Int)) Bool (=> (and (and (< x114 (+ x50 x50)) (<= x50 x114)) (> x50 0)) (= (- x114 x50) (x35 x114 x50))))
(define-fun x48 ((x114 Int)) Bool (= 0 (x35 0 x114)))
(define-fun x24 ((x114 Int)) Bool (= 0 (x35 x114 1)))
(define-fun x60 ((x114 Int)) Bool (= 0 (x35 x114 x114)))
(define-fun x105 ((x114 Int)) Bool (and (x60 x114) (x48 x114) (x24 x114)))
(define-fun x98 ((x114 Int)) Bool (= (x181 x114 127) (x35 x114 128)))
(define-fun x174 ((x114 Int)) Bool (and (x98 x114) (x52 x114 127)))
(define-fun x55 ((x114 Int) (x50 Int)) Bool (=> (and (< 0 x50) (> x114 0)) (= (= x50 (x139 (x110 (x46 x114 x50)) x114)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x46 x114 x50)))))
(define-fun x91 ((x114 Int) (x50 Int)) Bool (=> (and (not (= x50 0)) (not (= x114 0))) (and (= (x139 (x46 x114 x50) x50) x114) (= x50 (x139 (x46 x114 x50) x114)))))
(define-fun x89 ((x114 Int) (x50 Int)) Bool (=> (and (> x50 0) (> x114 0)) (= (> (x46 x114 x50) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x50 (x139 115792089237316195423570985008687907853269984665640564039457584007913129639935 x114)))))
(define-fun x27 ((x114 Int) (x50 Int)) Bool (and (= (x110 (x46 x114 x50)) (x110 (x46 x114 (- x50 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x110 (x46 x114 x50)) (x110 (x46 (- x114 115792089237316195423570985008687907853269984665640564039457584007913129639936) x50))) (= (x110 (x46 x114 x50)) (x110 (x46 (- x114 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x50 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x96 ((x114 Int) (x50 Int)) Bool (and (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x114) (> x114 0)) (and (< 0 x50) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x50))) (= (<= (x46 x114 x50) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x139 57896044618658097711785492504343953926634992332820282019728792003956564819967 x50) x114))) (=> (and (and (<= x114 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x114)) (and (<= x50 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x50))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x50) (x139 57896044618658097711785492504343953926634992332820282019728792003956564819968 x114)) (>= (x46 x114 (- x50 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x114) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x114)) (and (< 0 x50) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x50))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x114) (x139 57896044618658097711785492504343953926634992332820282019728792003956564819968 x50)) (>= (x46 (- x114 115792089237316195423570985008687907853269984665640564039457584007913129639936) x50) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (<= x50 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x50)) (and (<= x114 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x114 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x139 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x50)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x114)) (<= (x46 (- x114 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x50 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))
(define-fun x109 ((x114 Int)) Bool (and (= 0 (x46 0 x114)) (= 0 (x46 x114 0))))
(define-fun x26 ((x114 Int)) Bool (and (= (x46 1 x114) x114) (= x114 (x46 x114 1))))
(define-fun x120 ((x114 Int)) Bool (and (x26 x114) (x109 x114)))
(define-fun x153 ((x106 Int)) Int (ite (= 128 x106) x146 (x94 x106)))
(define-fun x14 ((x106 Int)) Int (ite (= x106 160) x68 (x59 x106)))
(define-fun x156 ((x106 Int)) Int (ite (= 160 x106) x103 (x59 x106)))
(define-fun x5 ((x106 Int)) Int (ite (= 192 x106) x34 (x14 x106)))
(define-fun x132 ((x106 Int)) Int (ite x66 (x59 x106) (ite x42 (ite x43 (x14 x106) (x5 x106)) (x156 x106))))
(define-fun x127 ((x106 Int)) Int (ite (= x106 x162) 32 (x158 x106)))
(define-fun x165 ((x106 Int)) Int (ite (= x106 x25) x125 (x127 x106)))
(define-fun x111 ((x106 Int)) Int (ite (= x159 x106) x93 (x165 x106)))
(define-fun x85 ((x106 Int)) Int (ite (= x44 x106) x4 (x111 x106)))
(define-fun x188 ((x106 Int)) Int (ite (= x135 x106) x39 (x85 x106)))
(define-fun x126 ((x106 Int)) Int (ite (= x106 x31) x163 (x188 x106)))
(define-fun x168 ((x106 Int)) Int (ite x10 (x188 x106) (ite x38 (x85 x106) (ite x49 (x111 x106) (ite x58 (x165 x106) (x126 x106))))))
(define-fun x112 ((x106 Int)) Int (ite (= x106 x2) 0 (x168 x106)))
(assert (not (= 157198259 (+ 1 x184))))
(assert (x54 x31))
(assert (and (= (x46 3 3) 9) (= 27 (x46 9 3)) (= 81 (x46 9 9)) (= (x46 27 3) 81)))
(assert (x54 x39))
(assert (x54 x3))
(assert (not (= (+ 1 x184) 2495578189)))
(assert (not (= (x78 1) 404098525)))
(assert (= (and (not x119) x186) x10))
(assert (= x121 true))
(assert (x54 x75))
(assert (x105 x45))
(assert (not (= 3337024914 (x78 1))))
(assert (x54 x162))
(assert (x54 x32))
(assert (= x160 (or x38 x113 x49 x10 x58)))
(assert (= (=> (and (and (>= x175 0) (= x32 (x30 x82)) (<= 0 x64) (<= x90 1461501637330902918203684832716283019655932542975) (not (= x141 117300739)) (not (= 157198259 x141)) (>= 1461501637330902918203684832716283019655932542975 x64) (= x141 404098525) (<= x95 1461501637330902918203684832716283019655932542975) (= x175 x176) (< 0 x32) (= x183 (ite (= 0 x162) x3 (ite (= 32 x162) x169 (ite (= x162 64) x162 (ite x13 (x168 x162) (x112 x162)))))) (= x16 0) (<= 0 x95) (<= x175 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x141 826074471) (<= 0 x90) (= x149 x64)) (and (= x73 (= x7 x36)) (= x80 x176) (= x80 x36) (= x7 x129))) x73) x9))
(assert (and (x89 32 x157) (and (= (- (* 32 x157) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x157)) (x46 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x157)) (= (x46 32 (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (x46 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x46 32 x157) (* x157 32)) (x55 32 x157) (x91 32 x157) (x27 32 x157) (x96 32 x157)))
(assert (x54 x152))
(assert (x54 x95))
(assert (= x47 (and x37 x160)))
(assert (x54 x173))
(assert (= x113 (and x186 x119)))
(assert (= x104 (and x41 x56)))
(assert (x33 256))
(assert (x54 x4))
(assert (not (= 117300739 (x78 1))))
(assert (x54 x128))
(assert (not (= (+ x184 1) (x78 1))))
(assert (= x76 (and x148 x74)))
(assert (= 0 (x59 224)))
(assert (x54 x93))
(assert (not (= (x78 1) 1)))
(assert (= 0 (x59 192)))
(assert (not (= (+ 1 x184) 404098525)))
(assert (x174 x45))
(assert (= x66 (and x121 x65)))
(assert (not (= 2376452955 (+ x184 1))))
(assert (x54 x36))
(assert (= (=> (and (= x116 (not (< 128 x125))) (= x163 (x132 256)) (= (x142 (+ 96 x159)) x31)) (and x116 (=> (= x28 128) x107))) x84))
(assert (x54 x123))
(assert (= (=> (and (= (< x125 x28) x37) (or (not x37) (and x37 (= x2 (x142 (+ x125 x159)))))) x9) x107))
(assert (x54 x169))
(assert (= (or x182 x42 x66) x74))
(assert (x54 x122))
(assert (=> (>= 10000 x82) (not (= (x78 1) x82))))
(assert (= (and (not x148) x74) x58))
(assert (x54 x180))
(assert (x54 x172))
(assert (x54 x44))
(assert (x54 x25))
(assert (x33 x177))
(assert (x54 x45))
(assert (x54 x157))
(assert (x54 x150))
(assert (= (and (not x37) x160) x13))
(assert (x54 x64))
(assert (not (= 117300739 (+ 1 x184))))
(assert (x54 x176))
(assert (x54 x69))
(assert (x12 x177))
(assert (x178 x61))
(assert (x54 x118))
(assert (x54 x51))
(assert (= x38 (and (not x86) x63)))
(assert (x54 x99))
(assert (not (= 2514000705 (x78 1))))
(assert (x54 x177))
(assert (= (x59 160) 0))
(assert (x54 x183))
(assert (not (= 826074471 (x78 1))))
(assert (x54 x163))
(assert (x178 x82))
(assert (and (x151 x45 128) (x57 x45 128) (x20 x45 128) (=> (> 128 0) (= x45 (+ (* 128 (x139 x45 128)) (x35 x45 128))))))
(assert (x54 x11))
(assert (x33 32))
(assert (not (= 3337024914 (+ x184 1))))
(assert (and (x140 x177 256) (x88 x177 256) (x144 x177 256) (= (- x177 (x181 255 x177)) (* (x139 x177 256) 256)) (x71 x177 256) (=> (and (< 0 x177) (> 256 0)) (and (< (- x177 256) (* (x139 x177 256) 256)) (>= x177 (* 256 (x139 x177 256)))))))
(assert (not x79))
(assert (= x182 (and x108 (not x164))))
(assert (x178 x184))
(assert (x54 x189))
(assert (= (x59 256) 0))
(assert (= x42 (or x104 x43)))
(assert (x120 x157))
(assert (=> (>= 10000 x61) (not (= (x78 1) x61))))
(assert (= x108 (and (not x65) x121)))
(assert (= (=> (and (= x148 (< 0 x125)) (= (x142 (+ x25 32)) x159) (= (x142 (+ x162 32)) x25) (= (x153 128) x125)) (and (=> (and x148 (and (= (x132 160) x93) (= (> x125 32) x72))) (and (=> (and x72 (and (= (< 64 x125) x86) (= (x142 (+ x159 32)) x44) (= x4 (x132 192)))) (and (=> (and (= x28 64) (not x86)) x107) (=> (and (and (= (< 96 x125) x119) (= (x142 (+ x159 64)) x135) (= (x132 224) x39)) x86) (and (=> (and (= x28 96) (not x119)) x107) (=> x119 x84))))) (=> (and (= x28 32) (not x72)) x107))) (=> (and (not x148) (= 0 x28)) x107))) x83))
(assert (x54 x103))
(assert (x54 x129))
(assert (x33 x75))
(assert (x54 x80))
(assert (not (= (+ x184 1) 826074471)))
(assert (not (= (x78 1) 2495578189)))
(assert (not (= (x78 1) 157198259)))
(assert (x54 x62))
(assert (= x43 (and (not x41) x56)))
(assert (x54 x135))
(assert (x54 x179))
(assert (x54 x34))
(assert (= (and x108 x164) x56))
(assert (x120 256))
(assert (x54 x146))
(assert (not (= (x78 1) 2376452955)))
(assert (x105 128))
(assert (x54 x82))
(assert (x105 2))
(assert (not (= (+ 1 x184) 3017275065)))
(assert (=> (<= x82 10000) (not (= (+ 1 x184) x82))))
(assert (x54 x2))
(assert (x54 x175))
(assert (= x49 (and (not x72) x76)))
(assert (x54 x134))
(assert (x87 x177))
(assert (x54 x125))
(assert (and (x140 x75 32) (x88 x75 32) (x144 x75 32) (= (- x75 (x181 31 x75)) (* (x139 x75 32) 32)) (x71 x75 32) (=> (and (< 0 x75) (> 32 0)) (and (< (- x75 32) (* (x139 x75 32) 32)) (>= x75 (* 32 (x139 x75 32)))))))
(assert (x105 x177))
(assert (x54 x92))
(assert (= x63 (and x72 x76)))
(assert (x54 x6))
(assert (x120 x180))
(assert (x54 x90))
(assert (x54 x136))
(assert (x54 x40))
(assert (not (= (x78 1) 3017275065)))
(assert (x54 x68))
(assert (= (=> (and (and (not (= x123 2376452955)) (= x162 (x142 (+ 128 x51))) (not (> 2376452955 x123)) (<= x90 1461501637330902918203684832716283019655932542975) (not (= x123 2495578189)) (> 3337024914 x123) (= x179 x149) (= x45 (x139 x177 2)) (= x146 (ite (> x15 0) x45 (x181 127 x45))) (<= x99 1461501637330902918203684832716283019655932542975) (<= 0 x179) (= (x139 x75 32) x157) (and (< 3 x172) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x172) true)) (= 0 x16) (= x11 (x110 (* x157 32))) (= x51 (x142 (+ x11 32))) (<= 0 x99) (= (= x146 0) x65) (= (x30 x61) x136) (<= 0 x90) (= x15 (x181 1 x177)) (<= x179 1461501637330902918203684832716283019655932542975) (= x69 (ite (> 32 x146) 1 0)) (< 0 x136) (> 3017275065 x123) (not (< x172 4)) (= (x142 (+ x146 31)) x75) (not (= x15 x69)) (= 2514000705 x123) (= x129 x8)) (and (not (= x61 x82)) (<= x175 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x175) (>= 1461501637330902918203684832716283019655932542975 x173) (>= x40 0) (>= 1461501637330902918203684832716283019655932542975 x61) (= x175 x8) (= x23 true) (<= 0 x90) x166 (>= x173 0) (<= 0 x118) (<= x150 1461501637330902918203684832716283019655932542975) (= x149 x189) (<= x189 1461501637330902918203684832716283019655932542975) (= 404098525 x62) (= x154 false) (= 2514000705 x6) (= x185 false) (<= x90 1461501637330902918203684832716283019655932542975) (<= x128 1461501637330902918203684832716283019655932542975) (= x171 false) (= x122 0) (not (= x62 157198259)) (= (x100 x82) x40) (>= x150 0) (= (> (x30 x61) 0) x102) (<= x90 1461501637330902918203684832716283019655932542975) x102 (= x16 0) (> x61 0) (= (< 0 (x30 x82)) x166) (>= x90 0) (not (= x62 117300739)) (< 0 x82) (= (x30 x82) x167) (> 826074471 x62) (>= x128 0) (= (x100 x61) x118) (< 0 x167) (>= 1461501637330902918203684832716283019655932542975 x82) (>= x189 0))) (and (=> (and (not x65) (= x164 (> x146 31))) (and (=> (and (and (= x103 (x110 (* x180 256))) (= x180 (x139 x177 256)) (= x1 x3)) (not x164)) x83) (=> (and (and (= x68 (x97 x184)) (= x134 (x142 (+ x146 160))) (= (+ 1 x184) x155) (= (< 192 x134) x41) (= (x78 1) x184)) x164) (and (=> x41 x138) (=> (not x41) x161))))) (=> (and (= x1 x3) x65) x83))) x79))
(assert (x87 127))
(assert (x33 2))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x184 1))))
(assert (x54 x28))
(assert (x54 x141))
(assert (and (x140 x177 2) (x88 x177 2) (x144 x177 2) (= (- x177 (x181 1 x177)) (* (x139 x177 2) 2)) (x71 x177 2) (=> (and (< 0 x177) (> 2 0)) (and (< (- x177 2) (* (x139 x177 2) 2)) (>= x177 (* 2 (x139 x177 2)))))))
(assert (and (x151 x177 2) (x57 x177 2) (x20 x177 2) (=> (> 2 0) (= x177 (+ (* 2 (x139 x177 2)) (x35 x177 2))))))
(assert (= (or x13 x47) x22))
(assert (x54 x15))
(assert (x120 32))
(assert (x54 x18))
(assert (x87 x45))
(assert (x87 1))
(assert (x54 x1))
(assert (x54 x61))
(assert (x54 x159))
(assert (x54 x167))
(assert (not (= (+ x184 1) 1461501637330902918203684832716283019655932542975)))
(assert (x54 x7))
(assert (=> (>= 10000 x61) (not (= (+ 1 x184) x61))))
(assert (and (x89 256 x180) (and (= (- (* 256 x180) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x180)) (x46 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x180)) (= (x46 256 (- x180 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256)) (= (x46 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x180 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 256 (- x180 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x46 256 x180) (* x180 256)) (x55 256 x180) (x91 256 x180) (x27 256 x180) (x96 256 x180)))
(assert (x54 x149))
(assert (x54 x8))
(assert (= (=> (and (= x115 (not (< 224 x134))) (= x34 (x97 x155))) (and x161 x115)) x138))
(assert (= (=> (= x3 1) x83) x161))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x78 1))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x78 1))))
(assert (= x186 (and x63 x86)))
(assert (not (= (+ 1 x184) 2514000705)))
(assert (not (= 1 (+ x184 1))))
(assert (x54 x16))
(check-sat)
(exit)
