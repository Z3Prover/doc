(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x29 0)) (((x73 (x121 x29) (x612 x29) (x379 Int)) (x821 (x255 Int)) (x72 (x844 x29) (x414 Int)))))
(declare-fun x534 () Int)
(declare-fun x25 () Bool)
(declare-fun x185 () Int)
(declare-fun x107 () Bool)
(declare-fun x831 () Bool)
(declare-fun x368 () Int)
(declare-fun x212 (Int Int) Int)
(declare-fun x184 () Int)
(declare-fun x539 () Bool)
(declare-fun x41 () Bool)
(declare-fun x783 () Bool)
(declare-fun x879 () Bool)
(declare-fun x444 () Bool)
(declare-fun x248 () Int)
(declare-fun x237 () Bool)
(declare-fun x499 () Bool)
(declare-fun x74 () Bool)
(declare-fun x144 () Int)
(declare-fun x533 () Int)
(declare-fun x174 () Bool)
(declare-fun x44 () Bool)
(declare-fun x153 () Int)
(declare-fun x22 () Bool)
(declare-fun x876 () Bool)
(declare-fun x744 () Bool)
(declare-fun x439 () Bool)
(declare-fun x843 (x29) Int)
(declare-fun x528 () Bool)
(declare-fun x867 () Bool)
(declare-fun x223 () Int)
(declare-fun x729 () Bool)
(declare-fun x664 () Bool)
(declare-fun x757 () Int)
(declare-fun x269 () Int)
(declare-fun x817 () Bool)
(declare-fun x317 () Int)
(declare-fun x687 () Bool)
(declare-fun x132 () Int)
(declare-fun x247 () Int)
(declare-fun x298 () Bool)
(declare-fun x27 () x29)
(declare-fun x862 () Int)
(declare-fun x616 () Bool)
(declare-fun x592 () Bool)
(declare-fun x6 () Int)
(declare-fun x498 () Bool)
(declare-fun x611 () Int)
(declare-fun x727 () Bool)
(declare-fun x764 () Bool)
(declare-fun x421 () Bool)
(declare-fun x458 () x29)
(declare-fun x552 () Int)
(declare-fun x560 () Int)
(declare-fun x377 () Int)
(declare-fun x35 () Int)
(declare-fun x796 () Int)
(declare-fun x20 () Bool)
(declare-fun x490 () Int)
(declare-fun x789 () Int)
(declare-fun x403 () Int)
(declare-fun x355 () Int)
(declare-fun x64 () Bool)
(declare-fun x33 () Int)
(declare-fun x742 () Bool)
(declare-fun x840 () Int)
(declare-fun x19 () Int)
(declare-fun x402 () Int)
(declare-fun x405 () Int)
(declare-fun x513 (x29) Int)
(declare-fun x762 () Int)
(declare-fun x133 () Int)
(declare-fun x685 (x29) Int)
(declare-fun x126 () Int)
(declare-fun x200 () Bool)
(declare-fun x756 () Int)
(declare-fun x686 () Int)
(declare-fun x422 () Int)
(declare-fun x145 () Bool)
(declare-fun x857 () Int)
(declare-fun x838 () Int)
(declare-fun x93 () Int)
(declare-fun x80 (x29) Int)
(declare-fun x760 () Int)
(declare-fun x453 () Bool)
(declare-fun x140 () Int)
(declare-fun x629 () Int)
(declare-fun x605 () Bool)
(declare-fun x501 () Int)
(declare-fun x613 () Bool)
(declare-fun x470 () Int)
(declare-fun x369 () Int)
(declare-fun x226 () Int)
(declare-fun x538 () Int)
(declare-fun x471 () Int)
(declare-fun x813 () Int)
(declare-fun x719 () Int)
(declare-fun x429 () Bool)
(declare-fun x281 () Bool)
(declare-fun x364 () Int)
(declare-fun x579 (x29) Int)
(declare-fun x78 () Bool)
(declare-fun x58 () Int)
(declare-fun x827 () Bool)
(declare-fun x325 () Int)
(declare-fun x550 () Bool)
(declare-fun x308 () Bool)
(declare-fun x45 () Bool)
(declare-fun x211 () Int)
(declare-fun x583 () Bool)
(declare-fun x683 () Int)
(declare-fun x598 () Int)
(declare-fun x302 () Int)
(declare-fun x782 () Bool)
(declare-fun x201 () Int)
(declare-fun x766 () Int)
(declare-fun x673 () Int)
(declare-fun x131 () Bool)
(declare-fun x81 () Int)
(declare-fun x741 () x29)
(declare-fun x205 () Int)
(declare-fun x232 (Int) Int)
(declare-fun x71 () Int)
(declare-fun x644 (x29) Int)
(declare-fun x178 () x29)
(declare-fun x620 () Int)
(declare-fun x134 () Bool)
(declare-fun x274 () Bool)
(declare-fun x286 () Bool)
(declare-fun x708 (x29) Int)
(declare-fun x825 () Int)
(declare-fun x818 () x29)
(declare-fun x627 () Bool)
(declare-fun x111 () Int)
(declare-fun x31 () Int)
(declare-fun x7 () Int)
(declare-fun x166 () Int)
(declare-fun x91 () Int)
(declare-fun x576 () Int)
(declare-fun x618 () Int)
(declare-fun x689 () Int)
(declare-fun x79 () Int)
(declare-fun x15 () Int)
(declare-fun x712 () Int)
(declare-fun x565 () Int)
(declare-fun x692 () Bool)
(declare-fun x700 () Bool)
(declare-fun x149 () Int)
(declare-fun x407 () Bool)
(declare-fun x337 () Int)
(declare-fun x507 () Int)
(declare-fun x180 () Int)
(declare-fun x138 () Bool)
(declare-fun x383 (Int) x29)
(declare-fun x880 () Int)
(declare-fun x799 () Int)
(declare-fun x464 () Bool)
(declare-fun x240 (Int Int) Int)
(declare-fun x494 () Int)
(declare-fun x90 () Int)
(declare-fun x785 () Int)
(declare-fun x661 () Bool)
(declare-fun x856 () Bool)
(declare-fun x745 () Int)
(declare-fun x521 () Int)
(declare-fun x698 (Int) Int)
(declare-fun x791 () Int)
(declare-fun x313 (x29) Int)
(declare-fun x451 () Bool)
(declare-fun x697 () Bool)
(declare-fun x772 () Int)
(declare-fun x653 () Bool)
(declare-fun x340 () Int)
(declare-fun x142 () Int)
(declare-fun x389 () Int)
(declare-fun x445 () Bool)
(declare-fun x711 () Int)
(declare-fun x491 () Bool)
(declare-fun x455 () Int)
(declare-fun x873 () Bool)
(declare-fun x781 () Int)
(declare-fun x136 () Bool)
(declare-fun x786 () Int)
(declare-fun x143 () Bool)
(declare-fun x624 () Int)
(declare-fun x577 () Int)
(declare-fun x34 () x29)
(declare-fun x129 () Int)
(declare-fun x877 () Int)
(declare-fun x373 () Bool)
(declare-fun x622 () Int)
(declare-fun x556 () Bool)
(declare-fun x672 () Int)
(declare-fun x346 (x29) Int)
(declare-fun x858 () Bool)
(declare-fun x569 (x29) Int)
(declare-fun x594 () Bool)
(declare-fun x869 () Int)
(declare-fun x519 () Bool)
(declare-fun x861 () Int)
(declare-fun x468 (Int) Int)
(declare-fun x77 () Bool)
(declare-fun x147 () Int)
(declare-fun x418 () Int)
(declare-fun x483 () Int)
(declare-fun x419 () Int)
(declare-fun x496 () Bool)
(declare-fun x842 () Int)
(declare-fun x384 () Int)
(declare-fun x800 () Bool)
(declare-fun x411 () Bool)
(declare-fun x551 () Int)
(declare-fun x737 () Int)
(declare-fun x350 () Int)
(declare-fun x738 () Bool)
(declare-fun x293 () Bool)
(declare-fun x773 () Int)
(declare-fun x60 () Bool)
(declare-fun x113 () Bool)
(declare-fun x502 () Int)
(declare-fun x229 () Bool)
(declare-fun x375 () Int)
(declare-fun x396 () x29)
(declare-fun x221 () Int)
(declare-fun x778 () Int)
(declare-fun x625 () Bool)
(declare-fun x227 () Int)
(declare-fun x803 () Int)
(declare-fun x621 () Bool)
(declare-fun x645 () Int)
(declare-fun x423 (x29) Int)
(declare-fun x259 () Int)
(declare-fun x639 () Int)
(declare-fun x265 () Int)
(declare-fun x710 () Int)
(declare-fun x17 () Int)
(declare-fun x466 () Bool)
(declare-fun x883 () Int)
(declare-fun x794 () Bool)
(declare-fun x401 () Int)
(declare-fun x631 () Bool)
(declare-fun x537 () Int)
(declare-fun x304 () Bool)
(declare-fun x319 (x29) Int)
(declare-fun x1 () Int)
(declare-fun x826 () Int)
(declare-fun x768 () Int)
(declare-fun x485 () Bool)
(declare-fun x779 () Int)
(declare-fun x488 () Int)
(declare-fun x667 () Bool)
(declare-fun x431 () Bool)
(declare-fun x278 () Bool)
(declare-fun x628 () Bool)
(declare-fun x665 () Bool)
(declare-fun x467 () Bool)
(declare-fun x123 () Int)
(declare-fun x110 () Bool)
(declare-fun x739 () Int)
(declare-fun x260 () Int)
(declare-fun x292 () Int)
(declare-fun x159 (x29) Int)
(declare-fun x321 () Int)
(declare-fun x484 () Int)
(declare-fun x438 () Int)
(declare-fun x242 () Int)
(declare-fun x630 () Bool)
(declare-fun x39 () Bool)
(declare-fun x726 () Bool)
(declare-fun x246 () Int)
(declare-fun x841 () Int)
(declare-fun x740 () Int)
(declare-fun x648 () Int)
(declare-fun x442 () Int)
(declare-fun x593 () Bool)
(declare-fun x481 () Int)
(declare-fun x87 () Bool)
(declare-fun x510 () Int)
(declare-fun x408 () Int)
(declare-fun x736 () Int)
(declare-fun x306 () Int)
(declare-fun x854 () Bool)
(declare-fun x70 () x29)
(declare-fun x390 () Bool)
(declare-fun x303 () Int)
(declare-fun x290 () x29)
(declare-fun x305 () Int)
(declare-fun x202 () Bool)
(declare-fun x243 () Bool)
(declare-fun x75 () Int)
(declare-fun x393 () Int)
(declare-fun x288 () Int)
(declare-fun x822 () Int)
(declare-fun x690 () Int)
(declare-fun x802 () Bool)
(declare-fun x432 () Bool)
(declare-fun x575 () Int)
(declare-fun x199 () Int)
(declare-fun x213 () Int)
(declare-fun x209 () Int)
(declare-fun x570 () Bool)
(declare-fun x806 () x29)
(declare-fun x658 () Int)
(declare-fun x157 () Int)
(declare-fun x809 () Bool)
(declare-fun x370 () Int)
(declare-fun x787 () Int)
(declare-fun x558 () Bool)
(declare-fun x43 () Int)
(declare-fun x112 () Int)
(declare-fun x824 () Int)
(declare-fun x456 () Bool)
(declare-fun x334 () Int)
(declare-fun x264 () Bool)
(declare-fun x245 () Int)
(declare-fun x38 () Int)
(declare-fun x669 () Int)
(declare-fun x713 (x29) Int)
(declare-fun x731 () Int)
(declare-fun x677 () Int)
(declare-fun x649 () Bool)
(declare-fun x678 () Int)
(declare-fun x203 () Int)
(declare-fun x36 () Int)
(declare-fun x198 () Int)
(declare-fun x601 () Int)
(declare-fun x553 () Int)
(declare-fun x115 () Int)
(declare-fun x406 () Bool)
(declare-fun x746 () Bool)
(declare-fun x2 () x29)
(declare-fun x183 () Int)
(declare-fun x150 () Bool)
(declare-fun x790 () Int)
(declare-fun x875 () Int)
(declare-fun x441 () Int)
(declare-fun x410 () Bool)
(declare-fun x354 () Bool)
(declare-fun x282 () Bool)
(declare-fun x633 () Bool)
(declare-fun x852 () Bool)
(declare-fun x463 () Bool)
(declare-fun x714 () Int)
(declare-fun x37 () Bool)
(declare-fun x452 () Bool)
(declare-fun x189 () Bool)
(declare-fun x732 () Bool)
(declare-fun x208 () Bool)
(declare-fun x371 () Bool)
(declare-fun x296 (x29) Int)
(declare-fun x524 () Int)
(declare-fun x532 () Bool)
(declare-fun x563 () Int)
(declare-fun x540 () Int)
(declare-fun x415 () Int)
(declare-fun x847 () Bool)
(declare-fun x273 () Bool)
(declare-fun x231 () Bool)
(declare-fun x105 () Int)
(declare-fun x12 () Bool)
(declare-fun x765 () Int)
(declare-fun x216 () Int)
(declare-fun x175 () Bool)
(declare-fun x284 () Int)
(declare-fun x365 () Int)
(declare-fun x137 (Int Int) Int)
(declare-fun x160 () Int)
(declare-fun x473 () Int)
(declare-fun x749 () Int)
(declare-fun x430 () Bool)
(declare-fun x170 () Bool)
(declare-fun x518 () Bool)
(declare-fun x805 (x29) Int)
(declare-fun x318 () Int)
(declare-fun x688 () Int)
(declare-fun x116 () Int)
(declare-fun x18 () Int)
(declare-fun x647 () Bool)
(declare-fun x546 () Int)
(declare-fun x682 () Bool)
(declare-fun x721 () Int)
(declare-fun x307 () Bool)
(declare-fun x251 () Int)
(declare-fun x860 (Int) Int)
(declare-fun x197 () Bool)
(declare-fun x769 () Int)
(declare-fun x236 () Int)
(declare-fun x330 () Int)
(declare-fun x391 () Int)
(declare-fun x94 () Bool)
(declare-fun x604 () Int)
(declare-fun x703 () Bool)
(declare-fun x695 () Int)
(declare-fun x392 () Bool)
(declare-fun x652 () Bool)
(declare-fun x819 () Int)
(declare-fun x886 () Int)
(declare-fun x568 () Bool)
(declare-fun x124 () Int)
(declare-fun x333 () Int)
(declare-fun x804 () Bool)
(declare-fun x86 () Bool)
(declare-fun x155 () Int)
(declare-fun x517 () Int)
(declare-fun x361 () Int)
(declare-fun x11 () Int)
(declare-fun x332 () Int)
(declare-fun x767 (x29) Int)
(declare-fun x413 () Int)
(declare-fun x400 () Bool)
(declare-fun x599 () Int)
(declare-fun x514 () Int)
(declare-fun x256 () Bool)
(declare-fun x397 () Bool)
(declare-fun x623 () Bool)
(declare-fun x555 () Int)
(declare-fun x585 () Bool)
(declare-fun x156 () Int)
(declare-fun x249 () Bool)
(declare-fun x55 () Bool)
(declare-fun x190 () Bool)
(declare-fun x294 () Int)
(declare-fun x660 () Int)
(declare-fun x88 () Int)
(declare-fun x462 () Int)
(declare-fun x541 () Int)
(declare-fun x428 () Int)
(declare-fun x181 () Bool)
(declare-fun x582 () Bool)
(declare-fun x734 () Int)
(declare-fun x448 () Int)
(declare-fun x748 () Int)
(declare-fun x567 () Bool)
(declare-fun x495 () Bool)
(declare-fun x871 () Int)
(declare-fun x120 () Bool)
(declare-fun x526 () Bool)
(declare-fun x823 () Int)
(declare-fun x65 () Bool)
(declare-fun x358 (x29) Int)
(declare-fun x846 () Int)
(declare-fun x309 () Int)
(declare-fun x56 () Int)
(declare-fun x192 () Int)
(declare-fun x454 () Bool)
(declare-fun x372 () Int)
(declare-fun x244 (Int) Int)
(declare-fun x52 () Int)
(declare-fun x206 () Int)
(declare-fun x67 () Bool)
(declare-fun x759 () Bool)
(declare-fun x753 () Int)
(declare-fun x705 () Int)
(declare-fun x204 () Bool)
(declare-fun x357 () Int)
(declare-fun x348 (x29) Int)
(declare-fun x851 () Int)
(declare-fun x752 () Bool)
(declare-fun x114 () Bool)
(declare-fun x580 () Int)
(declare-fun x701 () Bool)
(declare-fun x312 () Int)
(declare-fun x108 () Bool)
(declare-fun x747 () Int)
(declare-fun x770 () Int)
(declare-fun x53 () Int)
(declare-fun x859 () Bool)
(declare-fun x557 () Bool)
(declare-fun x554 () Bool)
(declare-fun x820 () Bool)
(declare-fun x311 (x29) Int)
(declare-fun x863 () Int)
(declare-fun x559 () Int)
(declare-fun x493 () Bool)
(declare-fun x486 () Int)
(declare-fun x807 () Int)
(declare-fun x704 () Int)
(declare-fun x360 (Int Int) Int)
(declare-fun x479 (x29) Int)
(declare-fun x99 () Bool)
(declare-fun x291 (x29) Int)
(declare-fun x367 () Int)
(declare-fun x66 () Bool)
(declare-fun x478 () Bool)
(declare-fun x276 () x29)
(declare-fun x215 () Bool)
(declare-fun x57 () Int)
(declare-fun x167 () Int)
(declare-fun x561 () Int)
(declare-fun x659 () Int)
(declare-fun x191 () Bool)
(declare-fun x327 () Int)
(declare-fun x504 () Int)
(declare-fun x754 () Bool)
(declare-fun x261 () Int)
(declare-fun x210 () Bool)
(declare-fun x636 () Int)
(declare-fun x168 () Int)
(declare-fun x459 () Bool)
(declare-fun x460 () Int)
(declare-fun x864 () Bool)
(declare-fun x280 () Bool)
(declare-fun x21 () Bool)
(declare-fun x239 () Int)
(declare-fun x543 () Int)
(declare-fun x735 () Int)
(declare-fun x316 () Int)
(declare-fun x42 () Int)
(declare-fun x398 () Int)
(declare-fun x702 () Int)
(declare-fun x449 () Bool)
(declare-fun x506 () Int)
(declare-fun x95 () Int)
(declare-fun x258 () Int)
(declare-fun x328 () Int)
(declare-fun x586 () Bool)
(declare-fun x219 () Int)
(declare-fun x885 () Bool)
(declare-fun x101 () Int)
(declare-fun x207 () Int)
(declare-fun x277 () Bool)
(declare-fun x104 () Int)
(declare-fun x13 (x29) Int)
(declare-fun x536 () Int)
(declare-fun x676 () Int)
(declare-fun x51 () Int)
(declare-fun x356 () Int)
(declare-fun x425 () Int)
(declare-fun x882 () Int)
(declare-fun x54 () Int)
(declare-fun x596 () Int)
(declare-fun x404 (Int) Int)
(declare-fun x461 (x29) Int)
(declare-fun x409 () Bool)
(declare-fun x32 (x29) Int)
(declare-fun x525 () Int)
(declare-fun x177 () Int)
(declare-fun x562 () Int)
(declare-fun x323 () Int)
(declare-fun x426 () Bool)
(declare-fun x314 () Int)
(declare-fun x771 () Bool)
(declare-fun x662 () Int)
(declare-fun x542 () Int)
(declare-fun x855 () Int)
(declare-fun x173 () Int)
(declare-fun x353 (Int) Int)
(declare-fun x359 () Bool)
(declare-fun x696 () Bool)
(declare-fun x709 () Bool)
(declare-fun x761 () Int)
(declare-fun x443 () Int)
(declare-fun x28 () Int)
(declare-fun x164 () Bool)
(declare-fun x297 () Int)
(declare-fun x635 () Int)
(declare-fun x222 () x29)
(declare-fun x572 () Bool)
(declare-fun x366 () Int)
(declare-fun x89 () Bool)
(declare-fun x119 () Int)
(declare-fun x171 () Bool)
(declare-fun x643 () Bool)
(declare-fun x220 () Bool)
(declare-fun x670 () Bool)
(declare-fun x845 () Bool)
(declare-fun x706 () Bool)
(declare-fun x182 () Bool)
(declare-fun x750 () Int)
(declare-fun x608 () Int)
(declare-fun x193 (Int) Int)
(declare-fun x450 (Int Int) Int)
(declare-fun x342 () Bool)
(declare-fun x16 () Int)
(declare-fun x194 () Int)
(declare-fun x279 () Bool)
(declare-fun x674 () Bool)
(declare-fun x595 () Bool)
(declare-fun x564 () Int)
(declare-fun x322 (Int) Int)
(declare-fun x154 () Int)
(declare-fun x61 () Int)
(declare-fun x681 () Int)
(declare-fun x606 () Int)
(declare-fun x675 () Bool)
(declare-fun x76 () Int)
(declare-fun x434 () Bool)
(declare-fun x46 () Int)
(declare-fun x40 () Int)
(declare-fun x878 () Int)
(declare-fun x671 () Int)
(declare-fun x792 () Int)
(declare-fun x285 () Bool)
(declare-fun x589 () Int)
(declare-fun x584 () Int)
(declare-fun x812 () Bool)
(declare-fun x634 () Int)
(declare-fun x188 () Int)
(declare-fun x84 () Int)
(declare-fun x544 () Int)
(declare-fun x798 () Int)
(declare-fun x723 () Int)
(declare-fun x162 () Bool)
(declare-fun x141 () Bool)
(declare-fun x352 () Int)
(declare-fun x283 () Int)
(declare-fun x338 () Int)
(declare-fun x376 () Int)
(declare-fun x469 () Int)
(declare-fun x218 () Int)
(declare-fun x287 () Int)
(declare-fun x808 () Bool)
(declare-fun x566 () Int)
(declare-fun x152 () Bool)
(declare-fun x106 () Int)
(declare-fun x315 () Bool)
(declare-fun x271 () Int)
(declare-fun x68 () Bool)
(declare-fun x617 () Int)
(declare-fun x829 () Int)
(declare-fun x117 () Int)
(declare-fun x477 () Int)
(declare-fun x310 () Bool)
(declare-fun x83 () Int)
(declare-fun x289 () x29)
(declare-fun x724 () Int)
(declare-fun x386 () Int)
(declare-fun x777 () Int)
(declare-fun x24 () Int)
(declare-fun x581 () Int)
(declare-fun x435 () Bool)
(declare-fun x130 () Int)
(declare-fun x62 () Int)
(declare-fun x511 () Int)
(declare-fun x619 () Int)
(declare-fun x385 () Int)
(declare-fun x275 () Int)
(declare-fun x268 () Int)
(declare-fun x49 () Bool)
(declare-fun x666 () Int)
(declare-fun x347 () Int)
(declare-fun x127 () Int)
(declare-fun x717 () Int)
(declare-fun x725 () Int)
(declare-fun x399 () Bool)
(declare-fun x776 () Int)
(declare-fun x591 () Int)
(declare-fun x351 () Int)
(declare-fun x257 () Int)
(declare-fun x96 () Int)
(declare-fun x235 () Bool)
(declare-fun x814 () Bool)
(declare-fun x295 () Int)
(declare-fun x657 () Bool)
(declare-fun x733 () Int)
(declare-fun x186 () Bool)
(declare-fun x382 () Int)
(declare-fun x10 () x29)
(declare-fun x440 () Bool)
(declare-fun x603 () Bool)
(declare-fun x228 () Bool)
(declare-fun x163 () Int)
(declare-fun x187 () Bool)
(declare-fun x751 () Int)
(declare-fun x395 () Bool)
(declare-fun x335 () Bool)
(declare-fun x839 (x29) Int)
(declare-fun x722 () Int)
(declare-fun x549 () Bool)
(declare-fun x59 () Bool)
(declare-fun x853 () Int)
(declare-fun x394 () Int)
(declare-fun x730 () Int)
(declare-fun x362 () Int)
(declare-fun x250 () Int)
(declare-fun x578 () Int)
(declare-fun x345 () Int)
(declare-fun x326 () Bool)
(declare-fun x424 () Int)
(declare-fun x4 () Int)
(declare-fun x109 () Int)
(declare-fun x788 () Bool)
(declare-fun x830 () Int)
(declare-fun x103 () Bool)
(declare-fun x602 () Int)
(declare-fun x135 () Int)
(declare-fun x336 () Int)
(declare-fun x63 () Int)
(declare-fun x654 (Int) Int)
(declare-fun x341 () Int)
(declare-fun x263 () Int)
(declare-fun x300 () Bool)
(declare-fun x378 () Int)
(declare-fun x836 () Int)
(declare-fun x230 () Int)
(declare-fun x427 () Bool)
(declare-fun x774 (x29) Int)
(declare-fun x835 (Int Int) Int)
(declare-fun x299 () Bool)
(declare-fun x655 () Bool)
(declare-fun x457 () Int)
(declare-fun x571 (x29) Int)
(declare-fun x9 () Bool)
(declare-fun x801 () Bool)
(declare-fun x884 () Int)
(declare-fun x535 () Int)
(declare-fun x97 () Bool)
(declare-fun x718 () Int)
(declare-fun x795 () Int)
(declare-fun x85 () Bool)
(declare-fun x699 () Int)
(declare-fun x707 () Bool)
(declare-fun x98 () Int)
(declare-fun x492 () Int)
(declare-fun x224 () Int)
(declare-fun x474 () Int)
(declare-fun x715 () Bool)
(declare-fun x609 () Int)
(declare-fun x811 () x29)
(declare-fun x545 () Int)
(declare-fun x169 () Bool)
(declare-fun x640 () Bool)
(declare-fun x417 () Bool)
(declare-fun x500 () Int)
(declare-fun x331 () Int)
(declare-fun x26 () Int)
(declare-fun x881 () Int)
(declare-fun x329 () Int)
(declare-fun x339 () Bool)
(declare-fun x14 () Int)
(declare-fun x607 () Bool)
(declare-fun x573 () Bool)
(declare-fun x680 () Bool)
(declare-fun x590 () Int)
(declare-fun x5 () Bool)
(declare-fun x548 () Int)
(declare-fun x638 () Int)
(declare-fun x165 () Int)
(declare-fun x217 () Bool)
(declare-fun x587 () Bool)
(declare-fun x832 () Bool)
(declare-fun x865 () Bool)
(declare-fun x446 () Int)
(declare-fun x508 () Bool)
(declare-fun x793 () Int)
(declare-fun x758 () Int)
(declare-fun x151 () Int)
(declare-fun x509 () Bool)
(declare-fun x195 () Int)
(declare-fun x122 () Bool)
(declare-fun x523 () Int)
(declare-fun x866 () Int)
(declare-fun x125 () Int)
(declare-fun x447 () Int)
(declare-fun x381 () Int)
(define-fun x262 ((x29 x29) (x684 Int)) x29 (ite ((_ is x72) x29) (x72 (x844 x29) (+ x684 (x414 x29))) (ite ((_ is x73) x29) (x73 (x121 x29) (x612 x29) (+ x684 (x379 x29))) (x821 (+ (x255 x29) x684)))))
(define-fun x92 ((x679 Int)) Int (ite (and (>= x679 0) (< x679 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x679 (- x679 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x234 ((x679 Int)) Int (ite (and (< x679 0) (>= x679 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x679) x679))
(define-fun x146 ((x650 Int)) Bool (and (<= 0 x650) (< x650 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x69 ((x650 Int)) Bool (and (= (x835 x650 115792089237316195423570985008687907853269984665640564039457584007913129639935) x650) (= (x835 115792089237316195423570985008687907853269984665640564039457584007913129639935 x650) x650)))
(define-fun x482 ((x650 Int)) Bool (and (= (x835 x650 0) 0) (= (x835 0 x650) 0)))
(define-fun x161 ((x650 Int)) Bool (= x650 (x835 x650 x650)))
(define-fun x148 ((x650 Int)) Bool (and (x161 x650) (x69 x650) (x482 x650)))
(define-fun x176 ((x650 Int) (x516 Int)) Bool (= (x835 x650 x516) (x835 x516 x650)))
(define-fun x225 ((x650 Int) (x516 Int)) Bool (and (=> (>= x516 0) (<= (x835 x650 x516) x516)) (<= 0 (x835 x650 x516)) (=> (>= x650 0) (>= x650 (x835 x650 x516)))))
(define-fun x642 ((x650 Int) (x516 Int)) Bool (and (x225 x650 x516) (x176 x650 x516)))
(define-fun x380 ((x650 Int)) Bool (= (+ (x835 x650 1208907372870555465154560) (mod x650 18446744073709551616)) (mod x650 1208925819614629174706176)))
(define-fun x497 ((x650 Int)) Bool (and (x380 x650) (x642 x650 1208907372870555465154560)))
(define-fun x172 ((x650 Int)) Bool (= (+ (x835 x650 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x650 32)) (mod x650 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x47 ((x650 Int)) Bool (and (x172 x650) (x642 x650 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x50 ((x650 Int)) Bool (=> (and (>= x650 0) (> 2 x650)) (= 0 (x835 77194726158210796949047323339125271902179989777093709359638389338608753093290 x650))))
(define-fun x784 ((x650 Int)) Bool (and (x50 x650) (x642 x650 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(define-fun x476 ((x650 Int)) Bool (and (= (x137 x650 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x137 115792089237316195423570985008687907853269984665640564039457584007913129639935 x650))))
(define-fun x344 ((x650 Int)) Bool (and (= (x137 x650 0) x650) (= (x137 0 x650) x650)))
(define-fun x374 ((x650 Int)) Bool (= (x137 x650 x650) x650))
(define-fun x870 ((x650 Int)) Bool (and (x476 x650) (x344 x650) (x374 x650)))
(define-fun x637 ((x650 Int) (x516 Int)) Bool (= (x137 x516 x650) (x137 x650 x516)))
(define-fun x8 ((x650 Int) (x516 Int)) Bool (and (=> (>= x650 0) (<= x650 (x137 x650 x516))) (=> (<= 0 x516) (>= (x137 x650 x516) x516)) (<= (x137 x650 x516) (+ x516 x650))))
(define-fun x615 ((x650 Int) (x516 Int)) Bool (and (x8 x650 x516) (x637 x650 x516)))
(define-fun x363 ((x650 Int)) Bool (= (mod x650 144115188075855872) (+ (x835 x650 72057594037927936) (mod x650 72057594037927936))))
(define-fun x797 ((x650 Int)) Bool (and (x363 x650) (x642 x650 72057594037927936)))
(define-fun x489 ((x650 Int)) Bool (= (+ (mod x650 144115188075855872) (x835 x650 144115188075855872)) (mod x650 288230376151711744)))
(define-fun x531 ((x650 Int)) Bool (and (x489 x650) (x642 x650 144115188075855872)))
(define-fun x515 ((x650 Int)) Bool (= (mod x650 576460752303423488) (+ (mod x650 288230376151711744) (x835 x650 288230376151711744))))
(define-fun x343 ((x650 Int)) Bool (and (x515 x650) (x642 x650 288230376151711744)))
(define-fun x241 ((x650 Int)) Bool (= (+ (mod x650 576460752303423488) (x835 x650 576460752303423488)) (mod x650 1152921504606846976)))
(define-fun x158 ((x650 Int)) Bool (and (x642 x650 576460752303423488) (x241 x650)))
(define-fun x505 ((x650 Int)) Bool (= (+ (x835 x650 1152921504606846976) (mod x650 1152921504606846976)) (mod x650 2305843009213693952)))
(define-fun x512 ((x650 Int)) Bool (and (x642 x650 1152921504606846976) (x505 x650)))
(define-fun x816 ((x650 Int)) Bool (= (mod x650 5708990770823839524233143877797980545530986496) (+ (mod x650 83076749736557242056487941267521536) (x835 x650 5708990770740762774496586635741492604263464960))))
(define-fun x588 ((x650 Int)) Bool (and (x642 x650 5708990770740762774496586635741492604263464960) (x816 x650)))
(define-fun x118 ((x650 Int)) Bool (= (mod x650 72057594037927936) (+ (x835 x650 71776119061217280) (mod x650 281474976710656))))
(define-fun x837 ((x650 Int)) Bool (and (x642 x650 71776119061217280) (x118 x650)))
(define-fun x420 ((x650 Int)) Bool (= (mod x650 6582018229284824168619876730229402019930943462534319453394436096) (+ (x835 x650 6582018229189043197315758676582005330734049138558148258257960960) (mod x650 95780971304118053647396689196894323976171195136475136))))
(define-fun x522 ((x650 Int)) Bool (and (x420 x650) (x642 x650 6582018229189043197315758676582005330734049138558148258257960960)))
(define-fun x574 ((x650 Int)) Bool (= (+ (x835 x650 7237005577325680195743901738874374364099144639582604309003564681041176166400) (mod x650 6582018229284824168619876730229402019930943462534319453394436096)) (mod x650 7237005577332262213973186563042994240829374041602535252466099000494570602496)))
(define-fun x610 ((x650 Int)) Bool (and (x574 x650) (x642 x650 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(define-fun x626 ((x650 Int)) Bool (= (mod x650 340282366920938463463374607431768211456) (x835 x650 340282366920938463463374607431768211455)))
(define-fun x668 ((x650 Int)) Bool (and (x642 x650 340282366920938463463374607431768211455) (x626 x650)))
(define-fun x716 ((x650 Int)) Bool (= (x835 x650 1) (mod x650 2)))
(define-fun x646 ((x650 Int)) Bool (and (x716 x650) (x642 x650 1)))
(define-fun x139 ((x650 Int)) Bool (= (x835 x650 1099511627775) (mod x650 1099511627776)))
(define-fun x433 ((x650 Int)) Bool (and (x139 x650) (x642 x650 1099511627775)))
(define-fun x755 ((x641 Int)) Int (ite (= 256 x641) 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x468 x641)))
(define-fun x349 ((x641 Int)) Int (ite (= x641 260) 52 (x755 x641)))
(define-fun x475 ((x641 Int)) Int (ite (= 292 x641) 54 (x349 x641)))
(define-fun x102 ((x641 Int)) Int (ite (= 324 x641) (x805 x806) (x475 x641)))
(define-fun x301 ((x641 Int)) Int (ite (= 356 x641) x283 (x102 x641)))
(define-fun x763 ((x641 Int)) Int (ite (= 388 x641) x227 (x301 x641)))
(define-fun x253 ((x641 Int)) Int (ite (= x641 420) x381 (x763 x641)))
(define-fun x872 ((x641 Int)) Int (ite (= 452 x641) x511 (x253 x641)))
(define-fun x693 ((x641 Int)) Int (ite (= x641 1632) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x353 x641)))
(define-fun x694 ((x641 Int)) Int (ite (and (> (+ 1632 32) x641) (<= 1632 x641)) (x404 (+ (- x641 1632) 0)) (x693 x641)))
(define-fun x780 ((x641 Int)) Int (ite x298 (x694 x641) (x693 x641)))
(define-fun x527 ((x641 Int)) Int (ite (= x318 x641) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x780 x641)))
(define-fun x663 ((x641 Int)) Int (ite (and (>= x641 x318) (< x641 (+ x318 128))) (x244 (+ (- x641 x318) 0)) (x527 x641)))
(define-fun x815 ((x641 Int)) Int (ite x499 (x663 x641) (x527 x641)))
(define-fun x775 ((x641 Int)) Int (ite (= x168 x641) 2 (x815 x641)))
(define-fun x472 ((x641 Int)) Int (ite (= x259 x641) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x775 x641)))
(define-fun x547 ((x641 Int)) Int (ite (= x641 x717) 2 (x472 x641)))
(define-fun x266 ((x641 Int)) Int (ite (= x641 x798) 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x547 x641)))
(define-fun x691 ((x641 Int)) Int (ite (= x488 x641) 2 (x266 x641)))
(define-fun x720 ((x641 Int)) Int (ite (= x641 x341) 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x691 x641)))
(define-fun x436 ((x641 Int)) Int (ite (= x641 x248) 2 (x720 x641)))
(define-fun x656 ((x641 Int)) Int (ite (= x829 x641) 22714585864790908941122872669550960439478132978232957325611369323817919840256 (x436 x641)))
(define-fun x437 ((x641 Int)) Int (ite (= x762 x641) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x656 x641)))
(define-fun x849 ((x641 Int)) Int (ite (and (> (+ x762 32) x641) (>= x641 x762)) (x322 (+ 0 (- x641 x762))) (x437 x641)))
(define-fun x833 ((x641 Int)) Int (ite x67 (x849 x641) (x437 x641)))
(define-fun x233 ((x641 Int)) Int (ite (= x731 x641) 2 (x833 x641)))
(define-fun x520 ((x641 Int)) Int (ite (= x207 x641) 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x233 x641)))
(define-fun x632 ((x641 Int)) Int (ite (= x762 x641) 2 (x656 x641)))
(define-fun x254 ((x641 Int)) Int (ite (= x447 x641) 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x632 x641)))
(define-fun x850 ((x641 Int)) Int (ite x567 (x520 x641) (x254 x641)))
(define-fun x412 ((x641 Int)) Int (ite (= x641 x785) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x850 x641)))
(define-fun x272 ((x641 Int)) Int (ite (= x641 x555) x443 (x412 x641)))
(define-fun x480 ((x641 Int)) Int (ite (= x641 x666) x1 (x272 x641)))
(define-fun x887 ((x641 Int)) Int (ite (= x735 x641) 0 (x480 x641)))
(define-fun x848 ((x641 Int)) Int (ite (= x641 x246) x770 (x887 x641)))
(define-fun x600 ((x641 Int)) Int (ite (= x548 x641) x846 (x848 x641)))
(define-fun x214 ((x641 Int)) Int (ite (= x641 x362) x773 (x600 x641)))
(define-fun x728 ((x641 Int)) Int (ite (= x224 x641) x624 (x214 x641)))
(define-fun x270 ((x641 Int)) Int (ite (= x619 x641) x283 (x728 x641)))
(define-fun x48 ((x641 Int)) Int (ite (= x602 x641) x184 (x270 x641)))
(define-fun x834 ((x641 Int)) Int (ite (and (< x641 (+ 96 x785)) (>= x641 x785)) (x193 (+ 0 (- x641 x785))) (x48 x641)))
(define-fun x416 ((x641 Int)) Int (ite x37 (x834 x641) (x48 x641)))
(define-fun x828 ((x641 Int)) Int (ite (= x16 x641) x24 (x416 x641)))
(define-fun x267 ((x641 Int)) Int (ite (= x641 x581) x799 (x828 x641)))
(define-fun x252 ((x641 Int)) Int (ite (= x641 x378) x659 (x267 x641)))
(define-fun x530 ((x641 Int)) Int (ite (= x641 x419) x838 (x252 x641)))
(define-fun x743 ((x641 Int)) Int (ite (= x641 x636) x116 (x530 x641)))
(define-fun x874 ((x641 Int)) Int (ite (= x641 x16) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x743 x641)))
(define-fun x30 ((x641 Int)) Int (ite (= x641 x394) x620 (x874 x641)))
(define-fun x465 ((x641 Int)) Int (ite (= x641 x76) x184 (x30 x641)))
(define-fun x810 ((x641 Int)) Int (ite (= x333 x641) x1 (x465 x641)))
(define-fun x487 ((x641 Int)) Int (ite (and (< x641 (+ 0 0)) (>= x641 0)) (x654 (+ (- x641 0) 0)) (x810 x641)))
(define-fun x614 ((x641 Int)) Int (ite x867 (x487 x641) (x810 x641)))
(define-fun x3 ((x641 Int)) Int (ite (and (< x641 (+ 0 x825)) (<= 0 x641)) (x654 (+ 0 (- x641 0))) (x614 x641)))
(define-fun x651 ((x641 Int)) Int (ite x429 (x614 x641) (x3 x641)))
(define-fun x388 ((x641 Int)) Int (ite (= x641 x16) 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x651 x641)))
(define-fun x196 ((x641 Int)) Int (ite (= x641 x7) x620 (x388 x641)))
(define-fun x128 ((x641 Int)) Int (ite (= x309 x641) x381 (x196 x641)))
(define-fun x868 ((x641 Int)) Int (ite (= x366 x641) x1 (x128 x641)))
(define-fun x179 ((x641 Int)) Int (ite (= x641 x853) x838 (x868 x641)))
(define-fun x82 ((x641 Int)) Int (ite (and (> (+ x16 32) x641) (>= x641 x16)) (x232 (+ (- x641 x16) 0)) (x179 x641)))
(define-fun x529 ((x641 Int)) Int (ite x607 (x82 x641) (x179 x641)))
(define-fun x23 ((x641 x29)) Int (ite x607 (x713 x641) (ite x867 (x569 x641) (x32 x641))))
(define-fun x597 ((x641 x29)) Int (ite x607 (x13 x641) (ite x867 (x513 x641) (x774 x641))))
(define-fun x238 ((x641 x29)) Int (ite (= x641 x276) x721 (x348 x641)))
(define-fun x324 ((x641 x29)) Int (ite x478 (ite x809 (x348 x641) (ite x854 (x348 x641) (x238 x641))) (x348 x641)))
(define-fun x320 ((x641 x29)) Int (ite x867 (x685 x641) (x311 x641)))
(define-fun x503 ((x641 x29)) Int (ite x607 (x80 x641) (ite x867 (x313 x641) (x296 x641))))
(define-fun x387 ((x641 x29)) Int (ite x607 (x291 x641) (ite x867 (x839 x641) (x319 x641))))
(define-fun x100 ((x650 Int)) Bool (=> (and (not (= x650 6582018229189043197315758676582005330734049138558148258257960960)) (not (= x650 1208907372870555465154560)) (not (= 144115188075855872 x650)) (not (= 1099511627775 x650)) (not (= x650 22714585864790908941122872669550960439478132978232957325611369323817919840256)) (not (= x650 22716352711855687325452455967051703357993960462129832944569490930019212460032)) (not (= 1099511627776 x650)) (not (= x650 340282366920938463463374607431768211455)) (not (= x650 5708990770740762774496586635741492604263464960)) (not (= 18446744073709551615 x650)) (not (= x650 71776119061217280)) (not (= 288230376151711744 x650)) (not (= 31536000 x650)) (not (= 65535 x650)) (not (= x650 115792089237316195423570985008687907853269984665640064039457584007913129639935)) (not (= x650 7237005577325680195743901738874374364099144639582604309003564681041176166400)) (not (= x650 115792089237316195423570985008687907853269984665640564039457584007913129634935)) (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 x650)) (> x650 10000) (not (= x650 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 x650)) (not (= 2054196882 x650)) (not (= x650 54940573406046109056602222415596668683460243721328594580962599660119180443648)) (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 x650)) (not (= x650 1000000000000000000000000000)) (not (= 4294967296 x650)) (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 x650)) (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 x650)) (not (= x650 420737377)) (not (= x650 946116605)) (not (= 72057594037927936 x650)) (not (= 340282366920938463463374607431768211456 x650)) (not (= 274184521717934524641157099916833587358 x650)) (not (= x650 1152921504606846976)) (not (= x650 994519296000000)) (not (= 409856580 x650)) (not (= x650 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (not (= 65536 x650)) (not (= x650 576460752303423488)) (not (= x650 1461501637330902918203684832716283019655932542975)) (not (= x650 74874610042509929465218460033027201126834042060343647393369405262880053395456)) (not (= x650 1635491895)) (not (= 1461501637330902918203684832716283019655932542976 x650)) (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 x650)) (not (= x650 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 500000000000000000000000000 x650)) (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 x650))) (not ((_ is x821) (x383 x650)))))
(assert (x146 x525))
(assert (x146 x123))
(assert (x146 x714))
(assert (= (x240 x260 1) (div x260 2)))
(assert (x146 x352))
(assert (= x643 (=> (and (= x28 0) (= 0 x795) (= 0 x565)) x122)))
(assert (=> (<= x733 10000) (= (x383 x733) (x821 x733))))
(assert (x146 x481))
(assert (= (=> (and (= x616 (= 0 x565)) (or (and (= (ite x616 1 0) x748) (not x616)) (and x616 (and (= x534 (x835 7237005577325680195743901738874374364099144639582604309003564681041176166400 x370)) (= x528 (= x525 0)) (= x748 (ite x528 1 0)) (= x525 (x240 x534 212)))))) x858) x122))
(assert (x146 x559))
(assert (x146 x705))
(assert (x146 x862))
(assert (x146 x265))
(assert (x47 x719))
(assert (x146 x321))
(assert (= (and (not x726) x432) x879))
(assert (= (and (not x307) x237) x399))
(assert (x146 x787))
(assert (x146 x183))
(assert (x148 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x146 x247))
(assert (x146 x401))
(assert (x100 x672))
(assert (x668 x861))
(assert (x100 x599))
(assert (= x217 (and x495 (not x373))))
(assert (x146 x341))
(assert (x610 x205))
(assert (x148 x659))
(assert (x146 x598))
(assert (x146 x424))
(assert (x146 x98))
(assert (= x181 (=> (and (= (mod (* x367 x704) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x384) (not x407) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x367) x258) (= x384 x98) (= x407 (> x704 x258))) x707)))
(assert (= (x821 1099511627776) (x383 1099511627776)))
(assert (x146 x683))
(assert (x146 x223))
(assert (x146 x471))
(assert (x146 x460))
(assert (x146 x309))
(assert (x146 x62))
(assert (x47 x36))
(assert (= x613 (and (not x152) x308)))
(assert (x146 x762))
(assert (x148 1))
(assert (= (+ (x805 x178) 1) (x805 (x262 x178 1))))
(assert (x146 x42))
(assert (= (div x534 6582018229284824168619876730229402019930943462534319453394436096) (x240 x534 212)))
(assert (x146 x830))
(assert (x146 x402))
(assert (x146 x88))
(assert (= (and x592 x249) x550))
(assert (x146 x258))
(assert (= (x821 80397878463760440755375692149700041695399247739548614023716483005714108776448) (x383 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x146 x79))
(assert (x146 x620))
(assert (= (x383 288230376151711744) (x821 288230376151711744)))
(assert (x146 x177))
(assert (x146 x53))
(assert (x146 x227))
(assert (= (x805 (x383 x154)) x154))
(assert (x146 x195))
(assert (x146 x659))
(assert (x146 x561))
(assert (x148 x24))
(assert true)
(assert (x784 x199))
(assert (x146 x514))
(assert (x146 x772))
(assert (x146 x494))
(assert (x146 x242))
(assert (= (or x298 x788) x627))
(assert (x146 x294))
(assert (x146 x105))
(assert (x146 x83))
(assert (= (and x237 x307) x264))
(assert (x146 x75))
(assert (x146 x760))
(assert (= (or x170 x429) x754))
(assert (=> (>= 10000 x492) (= (x821 x492) (x383 x492))))
(assert (=> (>= 10000 x160) (= (x383 x160) (x821 x160))))
(assert (x146 x838))
(assert (x146 x160))
(assert (x146 x370))
(assert (= (=> (and (= x605 (= x1 0)) (= (x92 (+ x168 32)) x259) (= (x92 (+ x168 64)) x717)) (and (=> x605 x86) (=> (and (and (= x798 (x92 (+ x717 32))) (= x493 (not (= x538 0))) (= x670 (not (= 0 x662))) (= x488 (x92 (+ 64 x717))) (= x457 (x835 144115188075855872 x370)) (= x486 1600) (= (x835 576460752303423488 x370) x321) (= x162 (not (= x500 0))) (= (not (= x457 0)) x700) (= x538 (x835 1152921504606846976 x370)) (= x674 (not (= x321 0))) (= x500 (x835 288230376151711744 x370)) (= (x835 72057594037927936 x370) x662)) (not x605)) (and (=> (and x670 (and (= x248 (x92 (+ 64 x488))) (= x341 (x92 (+ x488 32))))) (and (=> x493 x86) (=> (and (not x493) (and (= x762 (x92 (+ 64 x248))) (= x829 (x92 (+ x248 32))))) (and (=> (and (not x700) (and (= x481 (x240 x364 116)) (= (x835 5708990770740762774496586635741492604263464960 x370) x364) (= x471 1600) (= (= x481 0) x697))) (and (=> (and (and (= x126 x562) (= (x92 (+ 32 x762)) x447) (= x126 (x92 (+ 64 x762)))) x697) x771) (=> (and (and (= (x240 x155 48) x260) (= x173 1600) (= x249 (> x260 0)) (= (x835 71776119061217280 x370) x155)) (not x697)) (and (=> (and x249 (and (= (ite (< x260 32) 1 0) x93) (= x293 (= 0 (x137 x424 x93))) (= (ite (> 78 x260) 1 0) x424))) (and (=> (and (not x293) (= x98 (x450 10 x260))) x707) (=> (and (= x87 (< 1 x260)) x293) (and (=> (and (and (= 10 x367) (= x704 1)) (not x87)) x181) (=> x87 x876))))) (=> (and (= 1 x98) (not x249)) x707))))) (=> x700 x86))))) (=> (not x670) x86))))) x299))
(assert (=> (>= 10000 x184) (= (x821 x184) (x383 x184))))
(assert (x870 x502))
(assert (= x733 (x805 (x383 x733))))
(assert (x148 x506))
(assert (x146 x19))
(assert (=> (>= 10000 x672) (= (x383 x672) (x821 x672))))
(assert (x146 x578))
(assert (x146 x676))
(assert (= (x805 (x821 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (= (=> (and (= (= x624 0) x39) (= x166 (x92 (+ 192 x239)))) (and (=> (and (not x39) (and (or (and (= x736 1000000000000000000000000000) x78) (and (not x78) (and (= (div x590 1000000000000000000000000000) x288) (= x331 (mod (* x773 x773) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x773) x345) (= x490 x117) (= x807 (div x33 1000000000000000000000000000)) (< (+ x302 x167) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x826 x250) (< (+ x490 x826) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (< x681 x617) x9) (< 0 x561) (= (or x286 x55) x709) (= (+ x483 x536) x826) (< (* x376 x789) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (ite (> x91 x469) 1 0) x724) (= x561 (ite x709 1 0)) (> x553 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x824 x609)) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x261) x469) (= (x234 (- x261 1)) x91) (= x681 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x773)) (= x167 (+ x316 x841)) (= x736 x337) (= (* x617 x405) x622) (= (mod (* x773 x617) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x156) (= x734 (* x376 x789)) (= (div x351 31536000) x372) (= x302 x536) (= x167 x483) (= (+ x250 x117) x337) (= x22 (not x586)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x773 x261)) (= x789 (mod (* x91 x261) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (ite (not x746) 1 0) x90) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x372 1000000000000000000000000000)) (= x33 (x92 (+ x331 500000000000000000000000000))) (= x302 (div x622 2)) (= x263 (* x824 x609)) (= x209 (x835 x90 x724)) (= x351 (* x773 x261)) (= x191 (= x773 0)) (= (div x263 6) x490) (= x372 x316) (= (x92 (+ x156 500000000000000000000000000)) x590) (= (= 0 x261) x746) (= 1000000000000000000000000000 x841) (< (* x617 x405) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x192 x405) (= (or x191 x22) x498) (= x192 (* x261 x91)) (= (div x288 31536000) x824) (= 0 x209) (= x553 (ite x498 1 0)) (= x617 (div x807 994519296000000)) (= x286 (not x9)) (= x55 (= x773 0)) (= (ite (< 2 x261) (x234 (- x261 2)) 0) x376) (= (< x345 x773) x586) (= x734 x609) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x91 x261))))) (and (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x188) x514) (= (= 0 x261) x78) (= (div x523 1000000000000000000000000000) x106) (= x369 (ite x150 1 0)) (= x218 (mod (* x768 x294) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x306 x580) x649) (= (= 0 x768) x60) (= x568 (not x715)) (= x587 (= x188 0)) (= x556 (or x277 x60)) (= (div x297 1000000000000000000000000000) x393) (not x649) (= (x234 (- x580 x306)) x261) (= x523 (x92 (+ x218 500000000000000000000000000))) (= x715 (< x514 x294)) (= (> x294 x418) x285) (> x540 0) (= (or x587 x568) x150) (= x277 (not x285)) (= (ite x556 1 0) x540) (= (mod (* x294 x188) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x52) (= x297 (x92 (+ x52 500000000000000000000000000))) (= x418 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x768)) (> x369 0)))) x371) (=> x39 x99))) x583))
(assert (= (x805 (x821 1635491895)) 1635491895))
(assert (= (=> (= x59 (= x294 0)) (and (=> (and (and (or (and (and (= x403 (div x17 1000000000000000000000000000)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x683 x422)) (= x15 x840) (= (= x6 0) x25) (= 1000000000000000000000000000 x648) (= x712 x504) (= x712 (+ x356 x836)) (= x683 (+ x677 x793)) (< (* x71 x563) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x15 (* x566 x778)) (= 0 x537) (= (x835 x506 x740) x537) (= x820 (not x197)) (= (= 0 x6) x727) (= x338 x71) (< (* x598 x6) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (mod (* x6 x563) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x275) (= x198 (div x749 1000000000000000000000000000)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x6) x213) (< (* x566 x778) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x793 x84) (= x766 x377) (= x197 (> x563 x213)) (= (= x598 0) x549) (= x564 (div x198 31536000)) (= (div x855 31536000) x377) (= (* x564 x840) x711) (= x566 (mod (* x776 x598) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x796 x84)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x564 x840)) (< (* x598 x776) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (or x727 x820) x64) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x598) x201) (= x422 (div x711 6)) (= x84 (div x543 2)) (= x677 x796) (= x814 (or x25 x141)) (= x356 x683) (= x750 (ite x814 1 0)) (= (div x403 994519296000000) x563) (= (ite (not x549) 1 0) x506) (= x575 (ite x64 1 0)) (= (* x6 x598) x855) (= (x92 (+ x484 500000000000000000000000000)) x17) (= (x92 (+ 500000000000000000000000000 x275)) x749) (= (* x598 x776) x338) (= x422 x836) (= (ite (> x598 2) (x234 (- x598 2)) 0) x778) (< 0 x750) (= x484 (mod (* x6 x6) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (* x563 x71) x543) (= (+ x648 x766) x796) (< (+ x377 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x601 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x6)) (= (ite (> x776 x201) 1 0) x740) (= x141 (not x354)) (= x354 (> x6 x601)) (< 0 x575) (= x776 (x234 (- x598 1)))) (not x623)) (and (= 1000000000000000000000000000 x504) x623)) (and (= (< x634 x580) x421) (= x623 (= 0 x598)) (not x421) (= (x234 (- x596 x580)) x598))) (not x59)) x532) (=> (and x59 (= x188 x768)) x583))) x509))
(assert (x146 x660))
(assert (x146 x717))
(assert (= (or x567 x800) x114))
(assert (x146 x329))
(assert (x146 x336))
(assert (x146 x24))
(assert (x146 x209))
(assert (x146 x403))
(assert (= (x805 (x821 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (= x204 (and x85 (not x605))))
(assert (x146 x368))
(assert (x146 x101))
(assert (x146 x688))
(assert (= (x821 74874610042509929465218460033027201126834042060343647393369405262880053395456) (x383 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (= x85 (or x113 x478)))
(assert (and (= 10000000000000000000000000000000 (x450 10 31)) (= (x450 10 66) 1000000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 7) 10000000) (= 1000000000000000000000 (x450 10 21)) (= 1000000000000000000000000000000000000000000 (x450 10 42)) (= (x450 10 48) 1000000000000000000000000000000000000000000000000) (= (x450 10 16) 10000000000000000) (= (x450 10 5) 100000) (= 100000000000000000000000000 (x450 10 26)) (= (x450 10 57) 1000000000000000000000000000000000000000000000000000000000) (= (x450 10 54) 1000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000 (x450 10 44)) (= (x450 10 13) 10000000000000) (= (x450 10 11) 100000000000) (= (x450 10 72) 1000000000000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000 (x450 10 47)) (= (x450 10 73) 10000000000000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 2) 100) (= 100000000000000000000000000000000000000000000000000 (x450 10 50)) (= 10000000000000000000000 (x450 10 22)) (= 100000000000000000000000000000000000000000 (x450 10 41)) (= 10000000000000000000000000000000000000000000000000000000000000 (x450 10 61)) (= 100000000000000000000000 (x450 10 23)) (= (x450 10 55) 10000000000000000000000000000000000000000000000000000000) (= (x450 10 65) 100000000000000000000000000000000000000000000000000000000000000000) (= 1 (x450 10 0)) (= (x450 10 36) 1000000000000000000000000000000000000) (= (x450 10 35) 100000000000000000000000000000000000) (= (x450 10 37) 10000000000000000000000000000000000000) (= 10000000000000000000 (x450 10 19)) (= (x450 10 60) 1000000000000000000000000000000000000000000000000000000000000) (= 1000000000 (x450 10 9)) (= 10000000000000000000000000000000000 (x450 10 34)) (= (x450 10 64) 10000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 20) 100000000000000000000) (= 10000000000000000000000000000000000000000000000000000 (x450 10 52)) (= (x450 10 29) 100000000000000000000000000000) (= (x450 10 49) 10000000000000000000000000000000000000000000000000) (= (x450 10 59) 100000000000000000000000000000000000000000000000000000000000) (= (x450 10 74) 100000000000000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 76) 10000000000000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000 (x450 10 15)) (= 1000000000000000000000000000000000000000000000000000000000000000 (x450 10 63)) (= 10000000000000000000000000 (x450 10 25)) (= (x450 10 70) 10000000000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 3) 1000) (= 100000000000000000000000000000000000000000000000000000000000000000000 (x450 10 68)) (= 100000000000000000000000000000000 (x450 10 32)) (= (x450 10 46) 10000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000000000 (x450 10 69)) (= (x450 10 12) 1000000000000) (= (x450 10 43) 10000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000 (x450 10 58)) (= 100000000000000000000000000000000000000 (x450 10 38)) (= (x450 10 27) 1000000000000000000000000000) (= 1000000 (x450 10 6)) (= (x450 10 71) 100000000000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 75) 1000000000000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000 (x450 10 30)) (= 100000000 (x450 10 8)) (= (x450 10 67) 10000000000000000000000000000000000000000000000000000000000000000000) (= 10 (x450 10 1)) (= (x450 10 18) 1000000000000000000) (= (x450 10 28) 10000000000000000000000000000) (= (x450 10 14) 100000000000000) (= (x450 10 17) 100000000000000000) (= 100000000000000000000000000000000000000000000000000000 (x450 10 53)) (= (x450 10 40) 10000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000 (x450 10 56)) (= 1000000000000000000000000000000000000000 (x450 10 39)) (= 1000000000000000000000000000000000 (x450 10 33)) (= 1000000000000000000000000000000000000000000000000000 (x450 10 51)) (= (x450 10 4) 10000) (= (x450 10 24) 1000000000000000000000000) (= (x450 10 10) 10000000000) (= (x450 10 77) 100000000000000000000000000000000000000000000000000000000000000000000000000000) (= (x450 10 45) 1000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000 (x450 10 62))))
(assert (x146 x555))
(assert (x146 x702))
(assert (x146 x385))
(assert (x146 x33))
(assert (x146 x442))
(assert (x146 x523))
(assert (x642 x460 x745))
(assert (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (x805 (x821 22714585864790908941122872669550960439478132978232957325611369323817919840256))))
(assert (x146 x93))
(assert (= x459 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x58) (<= x381 1461501637330902918203684832716283019655932542975) (= (x843 (x383 x177)) x757) x628 (not (= x599 x160)) (not (= x672 x62)) (= 228 x857) (= (x73 (x383 x381) (x821 53) 0) x806) (<= x474 65535) (not (= x58 x608)) (<= x165 255) (= (x311 (x383 x733)) x57) (<= 0 x195) (not (= x160 x385)) (< 0 x230) (= x180 (x835 1208907372870555465154560 x370)) (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 x787) (<= x599 1461501637330902918203684832716283019655932542975) (not (= x160 x672)) (not (= x177 x230)) (not (= x385 x58)) (not (> 946116605 x669)) (> x672 0) (<= 0 x332) (not (= x177 x672)) (not (or (> x560 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x560 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 128 x560)))) (= (x346 x290) x455) (= x19 x283) (= (> x584 0) x804) (> x62 0) (not (= x599 x230)) (> 340282366920938463463374607431768211456 x455) (= x702 1600) (= (> (x843 (x383 x599)) 0) x466) (> x733 0) (<= 0 x790) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x438)) (< x438 224)) (> x438 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x738) (<= 0 x57) (< 0 x599) (= x624 (x240 x180 64)) (= x184 (x767 x2)) (<= x195 340282366920938463463374607431768211455) (not (= x385 x154)) (> 340282366920938463463374607431768211456 x188) x136 (= (= x177 0) x279) (not (= x599 x672)) (not (= x61 x733)) (>= 1461501637330902918203684832716283019655932542975 x672) (>= 1461501637330902918203684832716283019655932542975 x203) (< 0 x58) (not (= x177 x608)) (>= x714 0) (= (x262 x2 1) x222) (not (< x857 4)) (<= x160 1461501637330902918203684832716283019655932542975) (= (x234 (- x660 4)) x560) (>= 340282366920938463463374607431768211455 x884) (= (x843 (x383 274184521717934524641157099916833587358)) x185) (>= 1461501637330902918203684832716283019655932542975 x635) (= (x311 (x383 x608)) x441) (= (< 0 (x843 (x383 x160))) x630) (<= 0 x402) (not (= x608 x733)) (<= x786 255) x20 (>= x151 0) (not (= x160 x61)) (> 340282366920938463463374607431768211456 x6) (<= 0 x165) (<= 0 x589) x467 (>= 340282366920938463463374607431768211455 x188) (= x847 false) (= x339 (or (> x305 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x305 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x305))))) (= x290 (x262 x70 1)) (<= 0 x415) (not (= x58 x177)) (not (= x733 x230)) (not (= x160 x492)) (not (= x733 x672)) (= x570 (< 0 (x843 (x383 x608)))) (not (= x58 x733)) (< 0 x385) (not (= x672 x385)) (= x202 (> (x843 (x383 x385)) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x370) (not x738) (= x866 (x311 (x383 x230))) x409 (not (= x385 x177)) (>= 1461501637330902918203684832716283019655932542975 x154) (= 1635491895 x669) x65 (= x580 (x479 x289)) (not (= 0 x185)) (>= x577 0) (>= 340282366920938463463374607431768211455 x6) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x660)) (> x660 131)) (= (x262 x178 1) x289) (<= 0 x580) (not (= x58 x230)) (not (< x669 1635491895)) (= (x311 (x383 x492)) x115) (= x381 x271) (= x133 x283) (<= x140 1461501637330902918203684832716283019655932542975) (= (x843 (x383 x177)) x761) (= (x708 x222) x544) (<= x760 1461501637330902918203684832716283019655932542975) (> x608 0) (not (= x61 x154)) (not (= x62 x177)) (= x283 x877) (not (= x385 x61)) (<= 0 x370) (= (x311 (x383 x160)) x638) (<= 0 x455) (not (= x492 x62)) (= x370 (x319 x70)) (not (= x492 x672)) (= x806 x27) (not (= x599 x154)) (not (= x599 x61)) (not (= x62 x230)) x202 (not (= x62 x385)) (not (= x672 x154)) (= false x692) (>= x779 0) (>= x31 0) x630 (= (> (x843 (x383 x177)) 0) x20) (= x31 x576) (> x154 0) (<= x177 1461501637330902918203684832716283019655932542975) (not (= x154 x230)) (= x518 (< 0 (x843 (x383 x733)))) (>= 1461501637330902918203684832716283019655932542975 x95) (not (= x61 x230)) (<= 0 x295) (<= 0 x535) (= x138 (< 0 (x843 (x383 x58)))) (>= x365 0) (>= x216 0) (not (= x177 x61)) (not (= x492 x230)) (> x761 0) (>= 1461501637330902918203684832716283019655932542975 x283) (not (= x160 x154)) (= x576 x705) (>= 1461501637330902918203684832716283019655932542975 x492) (= x769 x620) (<= 0 x618) (<= x878 1461501637330902918203684832716283019655932542975) (<= 0 x6) (not (= x385 x733)) (>= 18446744073709551615 x216) (>= x688 0) (= x402 (x311 (x383 x154))) (<= 0 x119) (= x119 (x579 x458)) (= x781 x822) (> x757 0) (= (x461 x178) x6) (> 2054196882 x669) (>= 1461501637330902918203684832716283019655932542975 x688) (= (> (x843 (x383 x672)) 0) x65) (not (= x492 x599)) (= false x143) (>= 1461501637330902918203684832716283019655932542975 x119) (>= x517 0) (not (= x398 409856580)) (not (= x160 x177)) (<= x577 340282366920938463463374607431768211455) (not (= x599 x733)) (= x473 x381) (= x381 x53) (= (< 0 (x843 (x383 x154))) x467) (= x458 (x262 x222 1)) (<= 0 x786) (>= 65535 x511) (= x596 x634) (= x438 (x234 (- x857 4))) (< x580 1099511627776) (>= x95 0) (<= x332 255) (<= 0 x760) (not (= x733 x160)) (>= x474 0) (not (= x385 x492)) (not (= x733 x62)) (> x61 0) (not (= x62 x58)) (<= 0 x184) (= x628 (> (x843 (x383 x61)) 0)) (not (= x62 x160)) (<= x580 1099511627775) (not (= x154 x62)) (= x620 x104) (not (= x160 x58)) (>= 1461501637330902918203684832716283019655932542975 x413) (not (= x492 x608)) (= x546 928) (>= 1461501637330902918203684832716283019655932542975 x769) (= x105 x283) (= x678 4) (= (x311 (x383 x599)) x869) (= x381 x886) (not (= x61 x492)) (not (= x230 x160)) (not (= x608 x160)) (not x279) (not (= x599 x62)) (>= x188 0) (>= 1461501637330902918203684832716283019655932542975 x295) (= x409 (< 0 (x843 (x383 x62)))) (= x611 x511) (= x1 x545) (= x242 1635491895) (= x352 x511) (<= 0 x115) (>= x448 0) (>= 340282366920938463463374607431768211455 x517) (= 0 x822) (<= 0 x413) (not (= x608 x154)) (>= x884 0) (>= x104 0) (= 52 x542) (= x645 x511) (<= x714 1461501637330902918203684832716283019655932542975) (<= x211 255) (not (= x62 x608)) (not (= x177 x733)) (> x177 0) (= false x94) (= x283 x340) (>= x211 0) (= x381 x676) (>= 1461501637330902918203684832716283019655932542975 x385) (>= 1461501637330902918203684832716283019655932542975 x62) (not (= x599 x58)) (<= x608 1461501637330902918203684832716283019655932542975) (= x305 (x234 (- x857 100))) (< x119 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x104) (>= x769 0) (<= x535 255) (not (= x608 x385)) (<= 0 x869) x466 (>= x140 0) x138 (< x544 1461501637330902918203684832716283019655932542976) (>= x441 0) (not x339) (<= x31 1461501637330902918203684832716283019655932542975) (= (x311 (x383 x62)) x365) (not (= x599 x177)) (not (= x230 x385)) (= x283 x739) (not (= x608 x230)) (<= x230 1461501637330902918203684832716283019655932542975) (> x160 0) (= x151 (x311 (x383 x61))) (not (> 4 x660)) (not (= x492 x733)) (not (= x61 x58)) (= x136 (> (x843 (x383 x492)) 0)) (not (= x599 x385)) x518 (= x852 (> (x843 (x383 x230)) 0)) (= 54 x101) (not (= x61 x672)) (>= 1461501637330902918203684832716283019655932542975 x544) (not (= x492 x177)) (not (= x672 x608)) (>= x544 0) (= x1 x334) (not (= x492 x58)) (= x398 420737377) (>= x638 0) (= x111 x511) (= (x311 (x383 x672)) x589) (= x413 x135) (= x779 (x311 (x383 x58))) (not (= x230 x672)) (= 256 x157) (>= x203 0) (not (= x58 x672)) (<= 0 x88) (not (= x154 x58)) (>= 255 x415) (= (x73 (x383 x283) (x821 52) 0) x70) (>= 340282366920938463463374607431768211455 x455) (< x184 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x61) (= x2 (x262 x178 2)) (not (= x492 x154)) (not (= x177 x154)) (not (= x62 x61)) x852 (<= x448 1099511627775) (not (= x61 x608)) (= (x311 (x383 x177)) x88) (not (= x154 x733)) (>= 1461501637330902918203684832716283019655932542975 x733) (= x884 (x159 x290)) (= x545 x477) (<= x184 1461501637330902918203684832716283019655932542975) x570 (= x790 (x311 (x383 x385))) (> x492 0) (= x227 x477) (not (= x599 x608)) (= x178 (x262 x290 1)) (>= x866 0) (<= 0 x878) (= 228 x857) (= x27 x818) (> 340282366920938463463374607431768211456 x884) (>= 255 x618) (= x188 (x423 x178)) (= x40 x477) (>= x635 0)) (or (and (= x584 x194) (not x804)) (and (and (< x14 4294967296) (= x194 1)) x804))) x625)))
(assert (x146 x773))
(assert (x146 x350))
(assert (= x230 (x805 (x383 x230))))
(assert (x146 x149))
(assert (x146 x185))
(assert (x146 x538))
(assert (x146 x109))
(assert (x146 x798))
(assert (x146 x216))
(assert (x146 x206))
(assert (= (and x664 (not x74)) x170))
(assert (= (and x573 (not x231)) x174))
(assert (x146 x345))
(assert (= (x805 (x383 x61)) x61))
(assert (x146 x500))
(assert (x100 x733))
(assert (x146 x447))
(assert (x146 x14))
(assert (= (x821 946116605) (x383 946116605)))
(assert (= (and x152 x308) x113))
(assert (x100 x283))
(assert (x146 x292))
(assert (x146 x31))
(assert (= (x383 22716352711855687325452455967051703357993960462129832944569490930019212460032) (x821 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (= x573 (or x66 x169)))
(assert (x100 x408))
(assert (= (+ 1 (x805 x458)) (x805 (x262 x458 1))))
(assert (= 0 (x353 x51)))
(assert (x146 x581))
(assert (= (=> (and (and (not x856) (not x431) (= x210 (> x659 340282366920938463463374607431768211455)) (= x333 (x92 (+ 32 x76))) (= x446 (x92 (+ 32 x524))) (= (x92 (+ x880 x785)) x16) (= (x835 115792089237316195423570985008687907853269984665640564039457584007913129639904 x284) x880) (= x856 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x747) true) (< x747 96)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x747))) (not x310) (= (x92 (+ 32 x16)) x581) (= x283 x226) (= x419 (x92 (+ x378 32))) (not x456) (= (x92 (+ x419 32)) x636) (= (> x871 0) x200) (= x394 (x92 (+ x16 4))) (= x710 (x835 340282366920938463463374607431768211455 x659)) (= x123 (x835 340282366920938463463374607431768211455 x24)) (= (x416 x524) x799) (= x524 (x92 (+ 32 x785))) (= x76 (x92 (+ x394 32))) (= x310 (> x24 340282366920938463463374607431768211455)) (= x431 (= 0 x391)) (= x456 (< 340282366920938463463374607431768211455 x799)) (= (x835 340282366920938463463374607431768211455 x799) x268) (= x284 (x92 (+ 31 x747))) (= x24 (x416 x785)) (not x210) (= x378 (x92 (+ x581 32))) (= (x416 x446) x659)) (or (not x200) (and (and (< x825 4294967296) (= (x311 (x383 x283)) x206) x186 x595 (= (<= x604 (x685 (x383 x160))) x595) (= x186 (= x206 (x685 (x383 x283)))) (= (x311 (x383 x160)) x604)) x200))) x220) x496))
(assert (x146 x789))
(assert (= (x805 (x821 6582018229189043197315758676582005330734049138558148258257960960)) 6582018229189043197315758676582005330734049138558148258257960960))
(assert (x146 x457))
(assert (= (and x131 (not x675)) x859))
(assert (=> (<= x61 10000) (= (x383 x61) (x821 x61))))
(assert (x146 x54))
(assert (= 500000000000000000000000000 (x805 (x821 500000000000000000000000000))))
(assert (x146 x619))
(assert (x148 x269))
(assert (x146 x334))
(assert (x146 x781))
(assert (x146 x756))
(assert (= x315 (or x744 x463)))
(assert (x146 x477))
(assert (x146 x268))
(assert (x146 x124))
(assert (= (div x591 4) (x240 x591 2)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x805 (x821 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= x171 (and x59 x582)))
(assert (x146 x575))
(assert (= (or x682 x41) x495))
(assert (x146 x735))
(assert (x148 x205))
(assert (x146 x180))
(assert (x146 x43))
(assert (x146 x672))
(assert (x146 x673))
(assert (= (x821 1461501637330902918203684832716283019655932542975) (x383 1461501637330902918203684832716283019655932542975)))
(assert (= x729 (and x593 x390)))
(assert (= (and x39 x519) x854))
(assert (x146 x544))
(assert (x146 x757))
(assert (x146 x63))
(assert (= (=> (= 1 x578) x208) x97))
(assert (x146 x6))
(assert (x146 x142))
(assert (= (or x37 x879) x400))
(assert (= (x383 115792089237316195423570985008687907853269984665640564039457584007913129634935) (x821 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x146 x111))
(assert (= (=> (and (and (= (> x81 0) x726) (= x548 (x92 (+ 32 x246))) (= x362 (x92 (+ x548 32))) (= (x92 (+ 32 x555)) x666) (= (x92 (+ x735 32)) x246) (= (x92 (+ 4 x785)) x555) (= (x92 (+ x224 32)) x619) (= (x92 (+ 32 x666)) x735) (= (x92 (+ x362 32)) x224) (= (x92 (+ x619 32)) x602)) (or (and (= x81 x391) (not x726)) (and (and (= 1 x391) (> 4294967296 x747)) x726))) x496) x427))
(assert (= x499 (and x454 x627)))
(assert (= (x821 1152921504606846976) (x383 1152921504606846976)))
(assert (= x426 (and x550 x293)))
(assert (x146 x381))
(assert (x146 x35))
(assert (= (x805 (x383 x62)) x62))
(assert (x148 x861))
(assert (x146 x260))
(assert (= (x821 1000000000000000000000000000) (x383 1000000000000000000000000000)))
(assert (= (x821 2054196882) (x383 2054196882)))
(assert (x146 x886))
(assert (x146 x405))
(assert (= (x805 (x821 22716352711855687325452455967051703357993960462129832944569490930019212460032)) 22716352711855687325452455967051703357993960462129832944569490930019212460032))
(assert (= (=> (and (or (and x5 (= x443 0)) (and (and (<= x606 340282366920938463463374607431768211455) (= (x262 x741 1) x10) (= x606 x443) (= x606 (x571 x10)) (<= 0 x606) (> 340282366920938463463374607431768211456 x606)) (not x5))) (and (= (x92 (+ x4 500000000000000000000000000)) x327) (< 0 x163) (= x846 (div x327 1000000000000000000000000000)) (= x5 (= x863 0)) (= (> x294 x375) x667) (= (x92 (+ x325 288)) x785) (= x863 (x240 x541 176)) (= (mod (* x116 x294) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x4) (= (x92 (+ x562 128)) x325) (= x801 (or x631 x326)) (= (ite x801 1 0) x163) (< x361 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x361) (= x375 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x116)) (= (x262 x458 1) x741) (>= x361 0) (= (= 0 x116) x326) (= x631 (not x667)) (= (x358 x741) x361) (= x11 1600) (= x541 (x835 6582018229189043197315758676582005330734049138558148258257960960 x370)))) x427) x771))
(assert (= (x821 6582018229189043197315758676582005330734049138558148258257960960) (x383 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x146 x846))
(assert (x146 x372))
(assert (x148 x370))
(assert (x146 x807))
(assert (x100 274184521717934524641157099916833587358))
(assert (x146 x382))
(assert (x146 x147))
(assert (= (x805 (x383 x385)) x385))
(assert (x146 x314))
(assert (x146 x135))
(assert (x146 x877))
(assert (= 1152921504606846976 (x805 (x821 1152921504606846976))))
(assert (x615 x424 x93))
(assert (x146 x325))
(assert (x146 x533))
(assert (x146 x769))
(assert (x146 x686))
(assert (x146 x565))
(assert (x148 6582018229189043197315758676582005330734049138558148258257960960))
(assert (= (=> (and (and (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x736) x149) (= (< x83 x125) x12) (= x751 (+ x470 x257)) (= x647 (not x108)) (= (ite x107 1 0) x425) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x624) x314) (= x395 (= x624 0)) (= x382 (div x658 10000)) (= x470 x770) (= x287 (x92 (+ 500000000000000000000000000 x79))) (= x190 (= 0 x736)) (= x106 x257) (= (div x287 1000000000000000000000000000) x125) (= (x234 (- x751 x393)) x83) (= (or x647 x190) x107) (= x673 (x234 (- x83 x125))) (= x658 (x92 (+ x42 5000))) (= (ite x103 1 0) x127) (< 0 x127) (not x12) (= (= 0 x382) x373) (= x108 (< x149 x124)) (< (+ x770 x106) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not x794) (> x425 0) (= x103 (or x395 x451)) (= x451 (not x845)) (= (mod (* x736 x124) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x79) (= (> x393 x751) x794) (= x845 (< x314 x673)) (= x42 (mod (* x624 x673) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (or (and (and (= (x835 340282366920938463463374607431768211455 x861) x551) (= (< 340282366920938463463374607431768211455 x861) x449) (= x145 (not x657)) (= (or x175 x687) x508) (> 340282366920938463463374607431768211456 x355) (= (div x737 x718) x861) (>= x355 0) (< (+ x355 x551) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x695 340282366920938463463374607431768211455) (= x175 (= 0 x718)) (= x221 (div x718 2)) (= (x835 340282366920938463463374607431768211455 x695) x721) (= x758 0) (= x347 x551) (= x355 (x348 x276)) (= (+ x144 x347) x695) (= x737 (x92 (+ x730 x221))) (= x368 (x234 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x75))) (not x449) (= x276 (x262 x458 2)) (= (mod (* 1000000000000000000000000000 x382) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x730) (= x758 (ite x508 1 0)) (= (div x368 1000000000000000000000000000) x507) (= x75 (div x718 2)) (= x355 x144) (<= x355 340282366920938463463374607431768211455) (= x657 (< x507 x382)) (= x687 (not x145))) (not x373)) x373)) x99) x371))
(assert (= x219 (x805 (x383 x219))))
(assert (x146 x534))
(assert (x146 x786))
(assert (= (div x155 281474976710656) (x240 x155 48)))
(assert (x146 x251))
(assert (= (=> (and (= (x92 (+ 32 x318)) x51) (= (x815 x318) x124) (= (x835 1099511627775 x596) x791) (= x773 (x815 x722)) (>= 1099511627775 x245) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x389) (and (> 128 x389) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x389) true))) x110) (= (x835 115792089237316195423570985008687907853269984665640564039457584007913129639904 x36) x328) (= x36 (x92 (+ 31 x389))) (= (x815 x494) x306) (<= 0 x245) (not x273) (> 1099511627776 x245) (= x239 (x92 (+ x318 x328))) (= (x92 (+ x722 32)) x494) (= x722 (x92 (+ 32 x51))) (= x273 (= x777 0)) (>= 1099511627775 x306) (= (x815 x51) x770) (= x245 (x479 x289)) (not x110) (= (= x791 x245) x152)) (and (=> (and (and (or (and (and (= x723 (x835 340282366920938463463374607431768211455 x629)) (= x357 1000000000000000000000000000) (= x147 (ite x703 1 0)) (not x392) (= x392 (> x629 340282366920938463463374607431768211455)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x884) x823) (= x510 (* x455 x765)) (= (mod (* x813 x884) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x753) (= (div x510 31536000) x63) (= x281 (> x580 x634)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x765 x455)) (> x147 0) (= (x234 (- x596 x580)) x765) (= x292 (x92 (+ x753 500000000000000000000000000))) (= x629 x718) (not x281) (= x725 x63) (= x782 (< x823 x813)) (= x703 (or x359 x621)) (= x621 (= 0 x884)) (= (div x292 1000000000000000000000000000) x629) (< (+ 1000000000000000000000000000 x63) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x725 x357) x813) (= (not x782) x359)) (not x680)) (and x680 (= x884 x718))) (= x680 (= x455 0))) (not x152)) x509) (=> (and x152 (and (= x188 x116) (= x239 x168) (= x838 x884))) x299))) x274))
(assert (x146 x115))
(assert (= 65536 (x805 (x821 65536))))
(assert (= (or x539 x134) x557))
(assert (=> (>= 10000 x608) (= (x821 x608) (x383 x608))))
(assert (x146 x398))
(assert (x148 x26))
(assert (=> (>= 10000 x154) (= (x821 x154) (x383 x154))))
(assert (= x607 (and x342 x754)))
(assert (x146 x415))
(assert (x146 x261))
(assert (x100 x58))
(assert (x146 x662))
(assert (x146 x297))
(assert (x158 x370))
(assert (=> (>= 10000 x283) (= (x383 x283) (x821 x283))))
(assert (= (x383 340282366920938463463374607431768211455) (x821 340282366920938463463374607431768211455)))
(assert (x146 x71))
(assert (= (x821 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x383 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x148 144115188075855872))
(assert (x146 x40))
(assert (= (x383 22711052170661352172463706074549474602446478010439206087695126111415334600704) (x821 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (= x532 (=> (and (= x552 x768) (not x732) (= (> x504 x699) x187) (= x35 (ite x228 1 0)) (= x558 (not x187)) (< 0 x35) (= x732 (> x552 340282366920938463463374607431768211455)) (= (x92 (+ 500000000000000000000000000 x881)) x862) (= (or x558 x633) x228) (= (mod (* x188 x504) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x881) (= x699 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x188)) (= x633 (= x188 0)) (= x552 (div x862 1000000000000000000000000000)) (= x689 (x835 340282366920938463463374607431768211455 x552))) x583)))
(assert (= (and x434 x440) x397))
(assert (x146 x507))
(assert (= (x821 5708990770740762774496586635741492604263464960) (x383 5708990770740762774496586635741492604263464960)))
(assert (x146 x813))
(assert (x100 x62))
(assert (x146 x218))
(assert (x146 x1))
(assert (x146 x795))
(assert (x146 x745))
(assert (x148 x596))
(assert (x148 288230376151711744))
(assert (x146 x511))
(assert (= 71776119061217280 (x805 (x821 71776119061217280))))
(assert (x146 x666))
(assert (= (and x114 x5) x832))
(assert (x146 x333))
(assert (= (and x78 x603) x41))
(assert (= x67 (and x675 x131)))
(assert (x146 x441))
(assert (x146 x132))
(assert (x148 1208907372870555465154560))
(assert (x146 x246))
(assert (x531 x370))
(assert (x146 x851))
(assert (x146 x853))
(assert (x146 x166))
(assert (= (mod (* 2 x686) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x360 x686 1)))
(assert (x148 x629))
(assert (= (and x627 (not x454)) x661))
(assert (= (x805 (x821 1208907372870555465154560)) 1208907372870555465154560))
(assert (x146 x328))
(assert (x146 x790))
(assert (= (x805 (x821 115792089237316195423570985008687907853269984665640564039457584007913129634935)) 115792089237316195423570985008687907853269984665640564039457584007913129634935))
(assert (= x411 (and x434 (not x440))))
(assert (=> (<= x62 10000) (= (x821 x62) (x383 x62))))
(assert (x146 x747))
(assert (x146 x119))
(assert (x146 x779))
(assert (x148 x284))
(assert (= (x353 x494) 0))
(assert (x146 x636))
(assert (x146 x303))
(assert (= x585 (=> (= x231 (= 0 x18)) (and (=> (and (and (= (x597 x289) x686) (= (> 128 x686) x278) (> 65536 x686) (>= x686 0) (= 1 x875) (>= 65535 x686)) (not x231)) (and (=> (not x278) x86) (=> (and x278 (and (<= x882 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x137 x882 x502) x690) (= (x23 x27) x882) (= (x92 (+ 1 (mod (x360 x686 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x142) (= (x360 1 x142) x502) (>= x882 0))) x742))) (=> x231 x742)))))
(assert (= x177 (x805 (x383 x177))))
(assert (= 576460752303423488 (x805 (x821 576460752303423488))))
(assert (= (x805 (x383 x184)) x184))
(assert (x146 x545))
(assert (= (and x417 x697) x800))
(assert (x100 x230))
(assert (x146 x221))
(assert (x146 x391))
(assert (= x464 (or x607 x49)))
(assert (= x406 true))
(assert (x870 x882))
(assert (x148 x695))
(assert (x146 x671))
(assert (= x120 (or x452 x867)))
(assert (= 4294967296 (x805 (x821 4294967296))))
(assert (x146 x730))
(assert (= (x821 71776119061217280) (x383 71776119061217280)))
(assert (x668 x695))
(assert (x146 x535))
(assert (x668 x552))
(assert (x146 x689))
(assert (x146 x551))
(assert (x146 x327))
(assert (x146 x681))
(assert (= (and x174 x278) x744))
(assert (x146 x751))
(assert (x148 72057594037927936))
(assert (= (x383 72057594037927936) (x821 72057594037927936)))
(assert (= (div x180 18446744073709551616) (x240 x180 64)))
(assert (= x280 (=> (and (= x440 (= 0 x350)) (= x811 (x73 (x383 x219) (x821 52) 0)) (<= 0 x219) (= x43 (x835 7237005577325680195743901738874374364099144639582604309003564681041176166400 x205)) (>= x205 0) (= x350 (x240 x43 212)) (= x396 (x73 (x383 x408) (x821 54) 0)) (= x205 (x387 x811)) (<= x219 1461501637330902918203684832716283019655932542975) (= (x503 x396) x219) (< x219 1461501637330902918203684832716283019655932542976) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x205)) (and (=> (and (not x440) (and (= x219 x795) (= x565 1) (= x350 x28))) x122) (=> x440 x643)))))
(assert (x146 x443))
(assert (= (and x231 x573) x463))
(assert (= (and (not x304) x453) x567))
(assert (x146 x796))
(assert (x668 x629))
(assert (= (x805 (x821 22711052170661352172463706074549474602446478010439206087695126111415334600704)) 22711052170661352172463706074549474602446478010439206087695126111415334600704))
(assert (x146 x704))
(assert (x148 x260))
(assert (= 409856580 (x805 (x821 409856580))))
(assert (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x805 (x821 16156842317565293874272834530371880720966471053262404558597773956279093428224))))
(assert (= x582 (or x594 x235)))
(assert (x146 x56))
(assert (x146 x154))
(assert (x146 x840))
(assert (= x625 (=> (and (or (and (and (> 4294967296 x389) (= x777 1)) x454) (and (= x777 x671) (not x454))) (and (= (or (> x14 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x14 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x14))) x640) (= (x92 (+ x14 31)) x26) (not x640) (= x572 (= x194 0)) (not x572) (= x462 (x835 115792089237316195423570985008687907853269984665640564039457584007913129639904 x26)) (= (< 0 x671) x454) (= x318 (x92 (+ x462 1632))) (= x294 (x780 1632)))) x274)))
(assert (= (and x120 x189) x831))
(assert (x146 x283))
(assert (x146 x770))
(assert (x148 x719))
(assert (x146 x369))
(assert (x870 x93))
(assert (= (x805 (x262 x178 2)) (+ (x805 x178) 2)))
(assert (x146 x857))
(assert (x146 x18))
(assert (= (or x808 x215) x335))
(assert (x148 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (= (div x541 95780971304118053647396689196894323976171195136475136) (x240 x541 176)))
(assert (x146 x608))
(assert (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x805 (x821 54940573406046109056602222415596668683460243721328594580962599660119180443648))))
(assert (x146 x61))
(assert (x146 x173))
(assert (x146 x95))
(assert (x100 x492))
(assert (x100 x381))
(assert (x146 x7))
(assert (= (or x809 x217 x854) x478))
(assert (x146 x486))
(assert (x146 x418))
(assert (x146 x658))
(assert (x146 x822))
(assert (= (or (and (not x491) x464) x68) x593))
(assert (x146 x739))
(assert (x148 1152921504606846976))
(assert (x146 x155))
(assert (x100 x184))
(assert (= (x383 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x821 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x146 x733))
(assert (= (x383 18446744073709551615) (x821 18446744073709551615)))
(assert (=> (<= x381 10000) (= (x383 x381) (x821 x381))))
(assert (x146 x740))
(assert (x146 x629))
(assert (x146 x883))
(assert (= 18446744073709551615 (x805 (x821 18446744073709551615))))
(assert (=> (>= 10000 x177) (= (x821 x177) (x383 x177))))
(assert (x47 x26))
(assert (x47 x284))
(assert (= 274184521717934524641157099916833587358 (x805 (x821 274184521717934524641157099916833587358))))
(assert (x146 x866))
(assert (= (x821 576460752303423488) (x383 576460752303423488)))
(assert (x522 x370))
(assert (x146 x198))
(assert (x146 x17))
(assert (x146 x184))
(assert (x146 x230))
(assert (= (x821 994519296000000) (x383 994519296000000)))
(assert (x146 x871))
(assert (x146 x219))
(assert (= x809 (and x495 x373)))
(assert (x146 x245))
(assert (= 72057594037927936 (x805 (x821 72057594037927936))))
(assert (x146 x226))
(assert (= (x805 (x821 7237005577325680195743901738874374364099144639582604309003564681041176166400)) 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (x146 x323))
(assert (x146 x156))
(assert (= x707 (=> (and (or (and (= x96 x109) (not x675)) (and x675 (and (< x533 4294967296) (= 1 x96)))) (and (= (x324 x34) x130) (> 340282366920938463463374607431768211456 x130) (<= 0 x130) (< (* x98 x481) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x34 (x262 x458 2)) (= (* x98 x481) x330) (>= 340282366920938463463374607431768211455 x130) (= (< 0 x109) x675))) x485)))
(assert (x646 x260))
(assert (x146 x133))
(assert (x642 x336 (x234 (- x336 1))))
(assert (= (and x804 x406) x298))
(assert (x146 x377))
(assert (x146 x521))
(assert (x146 x875))
(assert (x146 x57))
(assert (x146 x317))
(assert (x146 x361))
(assert (= (div x43 6582018229284824168619876730229402019930943462534319453394436096) (x240 x43 212)))
(assert (x146 x269))
(assert (x100 x154))
(assert (x146 x863))
(assert (x146 x306))
(assert (= x435 (and x204 x670)))
(assert (= (or x859 x67) x453))
(assert (x146 x748))
(assert (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x805 (x821 11343057244796852251080018516132066157134835194109900141777915041485456146432))))
(assert (x146 x271))
(assert (x146 x312))
(assert (= (x821 420737377) (x383 420737377)))
(assert (=> (<= x230 10000) (= (x821 x230) (x383 x230))))
(assert (x100 x385))
(assert (= (x353 x446) 0))
(assert (x146 x384))
(assert (= (and x406 (not x804)) x788))
(assert (= x408 (x805 (x383 x408))))
(assert (= (x821 81391198934588725741764901232338779421906459474344603328544298677233738842112) (x383 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (= x77 (and x435 (not x493))))
(assert (= x608 (x805 (x383 x608))))
(assert (= (x821 274184521717934524641157099916833587358) (x383 274184521717934524641157099916833587358)))
(assert (= (x383 340282366920938463463374607431768211456) (x821 340282366920938463463374607431768211456)))
(assert (x146 x168))
(assert (x146 x492))
(assert (x146 x777))
(assert (x146 x590))
(assert (x146 x340))
(assert (= x652 (and x812 x256)))
(assert (= (x821 500000000000000000000000000) (x383 500000000000000000000000000)))
(assert (= (x805 (x383 x283)) x283))
(assert (x146 x413))
(assert (x146 x58))
(assert (x146 x91))
(assert (= (and x613 (not x680)) x594))
(assert (x146 x438))
(assert (x146 x577))
(assert (= (and (not x700) x77) x417))
(assert (x146 x791))
(assert (x146 x842))
(assert (= x526 (and x550 (not x293))))
(assert (= (and x623 x182) x539))
(assert (x146 x624))
(assert (x146 x504))
(assert (= x752 (=> (and (or (not x491) x491) (= (= x38 0) x491)) x827)))
(assert (x146 x16))
(assert (x146 x284))
(assert (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x805 (x821 81391198934588725741764901232338779421906459474344603328544298677233738842112))))
(assert (x146 x749))
(assert (x146 x537))
(assert (x146 x332))
(assert (= (x353 x722) 0))
(assert (x148 71776119061217280))
(assert (x146 x878))
(assert (x146 x236))
(assert (x146 x669))
(assert (x668 x799))
(assert (x642 x506 x740))
(assert (= x665 (and x696 x616)))
(assert (= x696 (or x411 x410)))
(assert (= x134 (and (not x623) x182)))
(assert (x512 x370))
(assert (x146 x52))
(assert (x148 x336))
(assert (= x45 (or x315 x729)))
(assert (x146 x165))
(assert (x146 x367))
(assert (= (and x652 x164) x237))
(assert (x146 x224))
(assert (= x672 (x805 (x383 x672))))
(assert (= (x805 (x262 x222 1)) (+ (x805 x222) 1)))
(assert (x148 x740))
(assert (x146 x425))
(assert (x146 x194))
(assert (x146 x601))
(assert (x146 x562))
(assert (=> (<= x58 10000) (= (x821 x58) (x383 x58))))
(assert (x148 x552))
(assert (x146 x589))
(assert (x146 x364))
(assert (x148 x745))
(assert (x146 x239))
(assert (x146 x488))
(assert (= x381 (x805 (x383 x381))))
(assert (x146 x446))
(assert (= (x383 31536000) (x821 31536000)))
(assert (x497 x370))
(assert (x146 x580))
(assert (x146 x448))
(assert (x146 x502))
(assert (x146 x394))
(assert (x146 x474))
(assert (x615 x882 x502))
(assert (x146 x799))
(assert (x146 x819))
(assert (x146 x564))
(assert (= (x805 (x821 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x343 x370))
(assert (x146 x724))
(assert (x146 x38))
(assert (x146 x126))
(assert (= (+ 2 (x805 x458)) (x805 (x262 x458 2))))
(assert (= 1099511627776 (x805 (x821 1099511627776))))
(assert (x100 x160))
(assert (= (x383 24059156481087259415935762067616321430022848223755303352741911643001603489792) (x821 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (x146 x566))
(assert (= (x805 (x383 x58)) x58))
(assert (x146 x203))
(assert (= 420737377 (x805 (x821 420737377))))
(assert (x146 x408))
(assert (= (x805 (x821 144115188075855872)) 144115188075855872))
(assert (= (x240 x303 2) (div x303 4)))
(assert (x146 x51))
(assert (= (x383 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x821 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (= (or x832 x701) x432))
(assert (= (x805 (x383 x599)) x599))
(assert (x146 x125))
(assert (x146 x758))
(assert (x146 x548))
(assert (x146 x376))
(assert (= (x383 65536) (x821 65536)))
(assert (x588 x370))
(assert (= (or (and x120 (not x189)) x831) x664))
(assert (= (x805 (x262 x741 1)) (+ 1 (x805 x741))))
(assert (x146 x584))
(assert (= (x821 1208907372870555465154560) (x383 1208907372870555465154560)))
(assert (= (=> (= (= (x240 x303 2) 0) x243) (and (=> (= 1 x408) x280) x243)) x864))
(assert (x146 x375))
(assert (x146 x560))
(assert (x146 x26))
(assert (x146 x76))
(assert (x146 x609))
(assert (= (and (not x256) x812) x169))
(assert (x146 x591))
(assert (x146 x699))
(assert (x146 x869))
(assert (x146 x275))
(assert (x146 x861))
(assert (x146 x695))
(assert (= (or x335 x885 x526) x131))
(assert (x146 x140))
(assert (= x182 (and x582 (not x59))))
(assert (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x805 (x821 80397878463760440755375692149700041695399247739548614023716483005714108776448))))
(assert (x146 x378))
(assert (= (and x464 x491) x68))
(assert (x146 x188))
(assert (x146 x596))
(assert (x146 x635))
(assert (x146 x541))
(assert (x146 x737))
(assert (x146 x163))
(assert (= (=> (= x748 x18) x585) x858))
(assert (x146 x618))
(assert (x146 x718))
(assert (x146 x127))
(assert (x146 x484))
(assert (x146 x599))
(assert (= (x805 (x821 74874610042509929465218460033027201126834042060343647393369405262880053395456)) 74874610042509929465218460033027201126834042060343647393369405262880053395456))
(assert (= (or x499 x661) x308))
(assert (= (x821 1461501637330902918203684832716283019655932542976) (x383 1461501637330902918203684832716283019655932542976)))
(assert (=> (<= x219 10000) (= (x383 x219) (x821 x219))))
(assert (=> (>= 10000 x385) (= (x821 x385) (x383 x385))))
(assert (x146 x248))
(assert (x837 x370))
(assert (x100 x608))
(assert (x146 x167))
(assert (x146 x750))
(assert (x146 x462))
(assert (x146 x419))
(assert (= (x383 1099511627775) (x821 1099511627775)))
(assert (x146 x207))
(assert (x146 x130))
(assert (x148 x799))
(assert (= x86 (=> (= 0 x578) x208)))
(assert (x146 x576))
(assert (= (div x364 83076749736557242056487941267521536) (x240 x364 116)))
(assert (= x215 (and (not x87) x426)))
(assert (= 2054196882 (x805 (x821 2054196882))))
(assert (= (and x613 x680) x235))
(assert (x146 x826))
(assert (x146 x517))
(assert (x146 x84))
(assert (x146 x761))
(assert (not x459))
(assert (x146 x318))
(assert (= (x805 (x383 274184521717934524641157099916833587358)) 274184521717934524641157099916833587358))
(assert (= (x805 (x262 x290 1)) (+ (x805 x290) 1)))
(assert (x146 x104))
(assert (x146 x768))
(assert (= (x805 (x821 946116605)) 946116605))
(assert (x797 x370))
(assert (x146 x28))
(assert (x146 x678))
(assert (= (x805 (x821 65535)) 65535))
(assert (x146 x553))
(assert (x146 x604))
(assert (x146 x81))
(assert (= (x821 7237005577325680195743901738874374364099144639582604309003564681041176166400) (x383 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (= (x821 77194726158210796949047323339125271902179989777093709359638389338608753093290) (x383 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x146 x259))
(assert (= x208 (= 0 x578)))
(assert (= x429 (and x74 x664)))
(assert (x146 x765))
(assert (x146 x331))
(assert (= (and x417 (not x697)) x592))
(assert (x146 x469))
(assert (and (= 19807040628566084398385987584 (x450 2 94)) (= (x450 2 109) 649037107316853453566312041152512) (= (x450 2 74) 18889465931478580854784) (= (x450 2 112) 5192296858534827628530496329220096) (= (x450 2 96) 79228162514264337593543950336) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x450 2 222)) (= (x450 2 164) 23384026197294446691258957323460528314494920687616) (= 2417851639229258349412352 (x450 2 81)) (= 4398046511104 (x450 2 42)) (= 51422017416287688817342786954917203280710495801049370729644032 (x450 2 205)) (= 98079714615416886934934209737619787751599303819750539264 (x450 2 186)) (= (x450 2 123) 10633823966279326983230456482242756608) (= 4294967296 (x450 2 32)) (= 39614081257132168796771975168 (x450 2 95)) (= (x450 2 148) 356811923176489970264571492362373784095686656) (= 1237940039285380274899124224 (x450 2 90)) (= 44601490397061246283071436545296723011960832 (x450 2 145)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x450 2 211)) (= 10141204801825835211973625643008 (x450 2 103)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x450 2 218)) (= 1569275433846670190958947355801916604025588861116008628224 (x450 2 190)) (= (x450 2 139) 696898287454081973172991196020261297061888) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x450 2 236)) (= 618970019642690137449562112 (x450 2 89)) (= 1125899906842624 (x450 2 50)) (= (x450 2 20) 1048576) (= 295147905179352825856 (x450 2 68)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x450 2 228)) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x450 2 220)) (= 10384593717069655257060992658440192 (x450 2 113)) (= (x450 2 65) 36893488147419103232) (= (x450 2 51) 2251799813685248) (= (x450 2 169) 748288838313422294120286634350736906063837462003712) (= (x450 2 48) 281474976710656) (= (x450 2 54) 18014398509481984) (= 268435456 (x450 2 28)) (= 348449143727040986586495598010130648530944 (x450 2 138)) (= (x450 2 29) 536870912) (= (x450 2 133) 10889035741470030830827987437816582766592) (= 2854495385411919762116571938898990272765493248 (x450 2 151)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x450 2 234)) (= 18446744073709551616 (x450 2 64)) (= 38685626227668133590597632 (x450 2 85)) (= (x450 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 20769187434139310514121985316880384 (x450 2 114)) (= (x450 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 324518553658426726783156020576256 (x450 2 108)) (= (x450 2 111) 2596148429267413814265248164610048) (= 730750818665451459101842416358141509827966271488 (x450 2 159)) (= 151115727451828646838272 (x450 2 77)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x450 2 227)) (= (x450 2 131) 2722258935367507707706996859454145691648) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x450 2 251)) (= 17592186044416 (x450 2 44)) (= 24519928653854221733733552434404946937899825954937634816 (x450 2 184)) (= (x450 2 18) 262144) (= (x450 2 53) 9007199254740992) (= 5316911983139663491615228241121378304 (x450 2 122)) (= 81129638414606681695789005144064 (x450 2 106)) (= 576460752303423488 (x450 2 59)) (= 22300745198530623141535718272648361505980416 (x450 2 144)) (= 1267650600228229401496703205376 (x450 2 100)) (= (x450 2 170) 1496577676626844588240573268701473812127674924007424) (= 766247770432944429179173513575154591809369561091801088 (x450 2 179)) (= (x450 2 124) 21267647932558653966460912964485513216) (= (x450 2 99) 633825300114114700748351602688) (= (x450 2 88) 309485009821345068724781056) (= 102844034832575377634685573909834406561420991602098741459288064 (x450 2 206)) (= (x450 2 10) 1024) (= (x450 2 1) 2) (= 6582018229284824168619876730229402019930943462534319453394436096 (x450 2 212)) (= (x450 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= 174224571863520493293247799005065324265472 (x450 2 137)) (= (x450 2 21) 2097152) (= (x450 2 182) 6129982163463555433433388108601236734474956488734408704) (= 105312291668557186697918027683670432318895095400549111254310977536 (x450 2 216)) (= 17179869184 (x450 2 34)) (= (x450 2 11) 2048) (= 19342813113834066795298816 (x450 2 84)) (= 33554432 (x450 2 25)) (= 137438953472 (x450 2 37)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x450 2 219)) (= (x450 2 69) 590295810358705651712) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x450 2 231)) (= 46768052394588893382517914646921056628989841375232 (x450 2 165)) (= 411376139330301510538742295639337626245683966408394965837152256 (x450 2 208)) (= (x450 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 70368744177664 (x450 2 46)) (= (x450 2 78) 302231454903657293676544) (= 256 (x450 2 8)) (= (x450 2 57) 144115188075855872) (= (x450 2 7) 128) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x450 2 248)) (= (x450 2 86) 77371252455336267181195264) (= 41538374868278621028243970633760768 (x450 2 115)) (= 5846006549323611672814739330865132078623730171904 (x450 2 162)) (= (x450 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x450 2 152) 5708990770823839524233143877797980545530986496) (= (x450 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x450 2 62) 4611686018427387904) (= (x450 2 126) 85070591730234615865843651857942052864) (= 6427752177035961102167848369364650410088811975131171341205504 (x450 2 202)) (= (x450 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 1361129467683753853853498429727072845824 (x450 2 130)) (= (x450 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 9903520314283042199192993792 (x450 2 93)) (= (x450 2 181) 3064991081731777716716694054300618367237478244367204352) (= 5070602400912917605986812821504 (x450 2 102)) (= 83076749736557242056487941267521536 (x450 2 116)) (= 35184372088832 (x450 2 45)) (= (x450 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 1645504557321206042154969182557350504982735865633579863348609024 (x450 2 210)) (= (x450 2 0) 1) (= 1298074214633706907132624082305024 (x450 2 110)) (= (x450 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x450 2 38) 274877906944) (= (x450 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 16384 (x450 2 14)) (= (x450 2 175) 47890485652059026823698344598447161988085597568237568) (= 147573952589676412928 (x450 2 67)) (= (x450 2 120) 1329227995784915872903807060280344576) (= 332306998946228968225951765070086144 (x450 2 118)) (= (x450 2 104) 20282409603651670423947251286016) (= 93536104789177786765035829293842113257979682750464 (x450 2 166)) (= 4951760157141521099596496896 (x450 2 92)) (= (x450 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x450 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x450 2 15) 32768) (= 95780971304118053647396689196894323976171195136475136 (x450 2 176)) (= (x450 2 82) 4835703278458516698824704) (= (x450 2 71) 2361183241434822606848) (= (x450 2 153) 11417981541647679048466287755595961091061972992) (= 40564819207303340847894502572032 (x450 2 105)) (= 365375409332725729550921208179070754913983135744 (x450 2 158)) (= (x450 2 39) 549755813888) (= 50216813883093446110686315385661331328818843555712276103168 (x450 2 195)) (= (x450 2 172) 5986310706507378352962293074805895248510699696029696) (= (x450 2 163) 11692013098647223345629478661730264157247460343808) (= 680564733841876926926749214863536422912 (x450 2 129)) (= (x450 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x450 2 43) 8796093022208) (= (x450 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x450 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 316912650057057350374175801344 (x450 2 98)) (= 67108864 (x450 2 26)) (= 1427247692705959881058285969449495136382746624 (x450 2 150)) (= 12259964326927110866866776217202473468949912977468817408 (x450 2 183)) (= (x450 2 47) 140737488355328) (= (x450 2 35) 34359738368) (= (x450 2 72) 4722366482869645213696) (= (x450 2 141) 2787593149816327892691964784081045188247552) (= 512 (x450 2 9)) (= 22835963083295358096932575511191922182123945984 (x450 2 154)) (= (x450 2 136) 87112285931760246646623899502532662132736) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x450 2 223)) (= (x450 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x450 2 149) 713623846352979940529142984724747568191373312) (= (x450 2 23) 8388608) (= 1606938044258990275541962092341162602522202993782792835301376 (x450 2 200)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x450 2 254)) (= (x450 2 91) 2475880078570760549798248448) (= (x450 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= 374144419156711147060143317175368453031918731001856 (x450 2 168)) (= 4194304 (x450 2 22)) (= (x450 2 125) 42535295865117307932921825928971026432) (= 11150372599265311570767859136324180752990208 (x450 2 143)) (= 803469022129495137770981046170581301261101496891396417650688 (x450 2 199)) (= (x450 2 33) 8589934592) (= 158456325028528675187087900672 (x450 2 97)) (= 401734511064747568885490523085290650630550748445698208825344 (x450 2 198)) (= 340282366920938463463374607431768211456 (x450 2 128)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x450 2 250)) (= 2535301200456458802993406410752 (x450 2 101)) (= 25711008708143844408671393477458601640355247900524685364822016 (x450 2 204)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x450 2 213)) (= (x450 2 83) 9671406556917033397649408) (= (x450 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 604462909807314587353088 (x450 2 79)) (= 68719476736 (x450 2 36)) (= 383123885216472214589586756787577295904684780545900544 (x450 2 178)) (= (x450 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 4096 (x450 2 12)) (= 11972621413014756705924586149611790497021399392059392 (x450 2 173)) (= 131072 (x450 2 17)) (= (x450 2 19) 524288) (= 8192 (x450 2 13)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x450 2 253)) (= (x450 2 31) 2147483648) (= 23945242826029513411849172299223580994042798784118784 (x450 2 174)) (= (x450 2 180) 1532495540865888858358347027150309183618739122183602176) (= 32 (x450 2 5)) (= 36028797018963968 (x450 2 55)) (= (x450 2 58) 288230376151711744) (= 25108406941546723055343157692830665664409421777856138051584 (x450 2 194)) (= (x450 2 4) 16) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x450 2 225)) (= 392318858461667547739736838950479151006397215279002157056 (x450 2 188)) (= (x450 2 161) 2923003274661805836407369665432566039311865085952) (= (x450 2 70) 1180591620717411303424) (= 45671926166590716193865151022383844364247891968 (x450 2 155)) (= 2199023255552 (x450 2 41)) (= (x450 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x450 2 140) 1393796574908163946345982392040522594123776) (= 1461501637330902918203684832716283019655932542976 (x450 2 160)) (= 170141183460469231731687303715884105728 (x450 2 127)) (= (x450 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x450 2 238)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x450 2 226)) (= (x450 2 56) 72057594037927936) (= 9444732965739290427392 (x450 2 73)) (= (x450 2 76) 75557863725914323419136) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x450 2 240)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x450 2 252)) (= (x450 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x450 2 60) 1152921504606846976) (= (x450 2 66) 73786976294838206464) (= (x450 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x450 2 157) 182687704666362864775460604089535377456991567872) (= 191561942608236107294793378393788647952342390272950272 (x450 2 177)) (= (x450 2 16) 65536) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x450 2 235)) (= 89202980794122492566142873090593446023921664 (x450 2 146)) (= (x450 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 64 (x450 2 6)) (= (x450 2 147) 178405961588244985132285746181186892047843328) (= 166153499473114484112975882535043072 (x450 2 117)) (= (x450 2 167) 187072209578355573530071658587684226515959365500928) (= 2993155353253689176481146537402947624255349848014848 (x450 2 171)) (= (x450 2 24) 16777216) (= (x450 2 40) 1099511627776) (= (x450 2 2) 4) (= (x450 2 121) 2658455991569831745807614120560689152) (= (x450 2 49) 562949953421312) (= (x450 2 107) 162259276829213363391578010288128) (= (x450 2 30) 1073741824) (= 1208925819614629174706176 (x450 2 80)) (= 2305843009213693952 (x450 2 61)) (= (x450 2 142) 5575186299632655785383929568162090376495104) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x450 2 230)) (= 43556142965880123323311949751266331066368 (x450 2 135)) (= (x450 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 134217728 (x450 2 27)) (= (x450 2 87) 154742504910672534362390528) (= (x450 2 75) 37778931862957161709568) (= 196159429230833773869868419475239575503198607639501078528 (x450 2 187)) (= (x450 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x450 2 3) 8) (= (x450 2 52) 4503599627370496) (= 9223372036854775808 (x450 2 63)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x450 2 242)) (= 3213876088517980551083924184682325205044405987565585670602752 (x450 2 201)) (= 200867255532373784442745261542645325315275374222849104412672 (x450 2 197)) (= (x450 2 134) 21778071482940061661655974875633165533184) (= 5444517870735015415413993718908291383296 (x450 2 132)) (= (x450 2 119) 664613997892457936451903530140172288) (= 91343852333181432387730302044767688728495783936 (x450 2 156))))
(assert (= (x805 (x821 340282366920938463463374607431768211456)) 340282366920938463463374607431768211456))
(assert (= (x360 1 x142) (mod (ite (> 256 x142) (x450 2 x142) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x148 x90))
(assert (= x66 (or x430 x665)))
(assert (= 1099511627775 (x805 (x821 1099511627775))))
(assert (x100 x177))
(assert (x146 x639))
(assert (= (or x817 x397) x410))
(assert (= x701 (and x114 (not x5))))
(assert (= x817 (and (not x164) x652)))
(assert (= x97 x742))
(assert (= 994519296000000 (x805 (x821 994519296000000))))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x805 (x821 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x146 x617))
(assert (= (=> (and (= x838 x718) (= x428 (x835 1099511627775 x596)) (= x168 x166) (= x768 x116)) x299) x99))
(assert (x146 x690))
(assert (= (=> (and (= (x92 (+ 31 x842)) x269) (= (= x38 0) x655) (= x764 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x842) (and (< x842 32) (= (<= x842 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x442 (x92 (+ x883 x16))) (= x251 (x529 x16)) (= (x835 115792089237316195423570985008687907853269984665640564039457584007913129639904 x269) x883) (= x390 (= x251 0)) (not x764) (not x655)) (and (=> (and (and (= x323 1600) (= x756 (x835 77194726158210796949047323339125271902179989777093709359638389338608753093290 x265)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x265) (= (x92 (+ x442 32)) x521) (= x265 (x23 x27)) (= x256 (not (= 0 x756))) (>= x265 0)) (not x390)) (and (=> (and (and (= (ite (not x706) (= 0 (x835 x336 (x234 (- x336 1)))) (not x706)) x164) (= (x92 (+ 32 x521)) x559) (<= 0 x199) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x199) (= x336 (x835 77194726158210796949047323339125271902179989777093709359638389338608753093290 x199)) (= (x23 x27) x199) (= x706 (= x336 0))) x256) (and (=> (not x164) x643) (=> (and x164 (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x56) x745) (= x307 (= 0 x303)) (= x56 (x234 (- x460 1))) (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 x223) (= x591 (x835 x460 x745)) (= x303 (x240 x591 2)) (= x460 (x835 77194726158210796949047323339125271902179989777093709359638389338608753093290 x199)))) (and (=> (and x307 (= x408 0)) x280) (=> (not x307) x864))))) (=> (and (not x256) (= 1 x18)) x585))) (=> x390 x97))) x827))
(assert (= 5708990770740762774496586635741492604263464960 (x805 (x821 5708990770740762774496586635741492604263464960))))
(assert (x146 x11))
(assert (x146 x153))
(assert (x146 x362))
(assert (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x805 (x821 22712819017726130556793289372050217520962305494336081706653247717616627220480))))
(assert (x146 x736))
(assert (x146 x199))
(assert (x146 x778))
(assert (= (x383 11343057244796852251080018516132066157134835194109900141777915041485456146432) (x821 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (x805 (x821 77194726158210796949047323339125271902179989777093709359638389338608753093290))))
(assert (= x806 (x383 (x805 x806))))
(assert (= (x805 (x262 x2 1)) (+ 1 (x805 x2))))
(assert (= x812 (and (not x390) x593)))
(assert (x146 x882))
(assert (x146 x116))
(assert (x146 x824))
(assert (= (x383 4294967296) (x821 4294967296)))
(assert (= x682 (and x603 (not x78))))
(assert (x146 x731))
(assert (= (and x426 x87) x808))
(assert (x784 x265))
(assert (= x430 (and (not x616) x696)))
(assert (x146 x776))
(assert (=> (<= x599 10000) (= (x383 x599) (x821 x599))))
(assert (x146 x157))
(assert (x146 x546))
(assert (x146 x540))
(assert (= (x821 54940573406046109056602222415596668683460243721328594580962599660119180443648) (x383 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (= x492 (x805 (x383 x492))))
(assert (= (or (and x174 (not x278)) (and x304 x453) (and (not x670) x204) (and x700 x77) (and x85 x605) (and x435 x493)) x653))
(assert (x146 x422))
(assert (x146 x355))
(assert (x148 x36))
(assert (= (x805 (x262 x70 1)) (+ 1 (x805 x70))))
(assert (x146 x490))
(assert (x148 (x234 (- x336 1))))
(assert (x146 x722))
(assert (= (x383 409856580) (x821 409856580)))
(assert (= (=> (and (= (x92 (+ x639 x762)) x731) (= x334 x386) (< (+ x54 x130) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x130 x46) (= (x92 (+ 64 x731)) x153) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x838) x317) (= (= x96 0) x445) (= x54 (x833 x762)) (= x312 (mod (* x838 x132) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x792 (+ x386 x803)) (< (+ x334 x329) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x639 (x835 115792089237316195423570985008687907853269984665640564039457584007913129639904 x719)) (> x819 0) (= x329 (div x830 1000000000000000000000000000)) (= x819 (ite x444 1 0)) (= x54 x501) (= x207 (x92 (+ x731 32))) (= x132 (+ x501 x46)) (= (< x330 x792) x304) (= x803 x329) (= (x92 (+ 31 x533)) x719) (not x873) (= x759 (> x132 x317)) (= (x92 (+ 500000000000000000000000000 x312)) x830) (= x229 (= x838 0)) (= x444 (or x229 x89)) (not x445) (= x873 (or (and (= (<= x533 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x533 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x533))) (= x89 (not x759))) (and (=> x304 x86) (=> (and (= x562 x153) (not x304)) x771))) x485))
(assert (x100 x61))
(assert (= x37 (and x726 x432)))
(assert (x146 x723))
(assert (x146 x721))
(assert (=> (<= x408 10000) (= (x821 x408) (x383 x408))))
(assert (= x519 (or x557 x171)))
(assert (x146 x634))
(assert (= (x821 144115188075855872) (x383 144115188075855872)))
(assert (= (x805 (x821 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x146 x552))
(assert (= x160 (x805 (x383 x160))))
(assert (x146 x719))
(assert (x148 x724))
(assert (= (and x400 x200) x867))
(assert (x146 x365))
(assert (x146 x302))
(assert (x148 340282366920938463463374607431768211455))
(assert (x146 x112))
(assert (x146 x602))
(assert (x146 x606))
(assert (x146 x455))
(assert (x642 x90 x724))
(assert (= (or x653 x45) x44))
(assert (x433 x596))
(assert (= (and (not x200) x400) x452))
(assert (x146 x287))
(assert (x146 x823))
(assert (= 1461501637330902918203684832716283019655932542976 (x805 (x821 1461501637330902918203684832716283019655932542976))))
(assert (x146 x884))
(assert (= (x383 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x821 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x148 5708990770740762774496586635741492604263464960))
(assert (= (x821 65535) (x383 65535)))
(assert (x146 x393))
(assert (x148 x460))
(assert (x146 x366))
(assert (= x603 (and (not x39) x519)))
(assert (x148 x199))
(assert (= (x821 22712819017726130556793289372050217520962305494336081706653247717616627220480) (x383 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x146 x36))
(assert (x146 x753))
(assert (x146 x96))
(assert (x146 x305))
(assert (x146 x428))
(assert (x146 x611))
(assert (x148 x265))
(assert (x146 x473))
(assert (= (or x264 x399) x434))
(assert (x146 x205))
(assert (x146 x211))
(assert (x146 x295))
(assert (x146 x288))
(assert (= (x383 22714585864790908941122872669550960439478132978232957325611369323817919840256) (x821 22714585864790908941122872669550960439478132978232957325611369323817919840256)))
(assert (x146 x201))
(assert (x146 x829))
(assert (x146 x90))
(assert (x146 x524))
(assert (= (=> (and (or (and (and (= (x843 (x383 x283)) x183) (< 0 x183) (= 1 x772)) x74) (and (and (= x554 (= 0 x877)) (= x300 (not x554)) (= (ite x300 1 0) x772) (= 32 x825)) (not x74))) (and (> x871 0) (= (= 0 x825) x74))) x865) x439))
(assert (x146 x542))
(assert (x610 x370))
(assert (x146 x638))
(assert (x146 x825))
(assert (x146 x785))
(assert (= (x805 (x821 288230376151711744)) 288230376151711744))
(assert (x100 x219))
(assert (x148 576460752303423488))
(assert (x146 x710))
(assert (= (=> (and (= (not (< 1 x247)) x21) (= x247 (x240 x260 1)) (= x401 (x835 1 x260)) (= x783 (= 0 x401))) (and (=> (and (= (ite x783 1 10) x704) (= x367 100)) x181) x21)) x876))
(assert (x146 x129))
(assert (x146 x506))
(assert (= (=> (and (or (not x342) (and (and (< x842 4294967296) (= x851 (x320 (x383 x160))) (= (= (x644 (x383 x184)) x129) x802) x282 x802 (= x129 (x320 (x383 x184))) (= (>= (x644 (x383 x160)) x851) x282)) x342)) (and (= x309 (x92 (+ x7 32))) (= (x92 (+ x16 4)) x7) (= (x92 (+ x366 32)) x853) (< 0 x772) (= x366 (x92 (+ x309 32))) (= (< 0 x38) x342))) x752) x865))
(assert (x47 x269))
(assert (= (=> (and (or x189 (not x189)) (= (= x871 0) x189)) x439) x220))
(assert (x148 1099511627775))
(assert (x146 x880))
(assert (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x805 (x821 24059156481087259415935762067616321430022848223755303352741911643001603489792))))
(assert (x668 x659))
(assert (x870 x424))
(assert (x146 x389))
(assert (x146 x151))
(assert (x148 77194726158210796949047323339125271902179989777093709359638389338608753093290))
(assert (= (x353 x524) 0))
(assert (= (x821 1635491895) (x383 1635491895)))
(assert (x668 x24))
(assert (x146 x563))
(assert (x146 x881))
(assert (= (and x592 (not x249)) x885))
(assert (x146 x213))
(assert (= x49 (and x754 (not x342))))
(assert (x146 x4))
(assert (x146 x106))
(assert (x146 x645))
(assert (= 31536000 (x805 (x821 31536000))))
(check-sat)
(exit)