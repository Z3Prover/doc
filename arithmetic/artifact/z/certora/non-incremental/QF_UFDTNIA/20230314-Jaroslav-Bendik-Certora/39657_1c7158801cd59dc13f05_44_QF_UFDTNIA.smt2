(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x4 0)) (((x702 (x509 x4) (x1011 Int)) (x575 (x542 Int)) (x983 (x911 x4) (x310 x4) (x733 Int)))))
(declare-fun x356 () Bool)
(declare-fun x84 () Bool)
(declare-fun x517 () Int)
(declare-fun x67 () Bool)
(declare-fun x183 () Int)
(declare-fun x767 () Int)
(declare-fun x1004 () Bool)
(declare-fun x692 () Int)
(declare-fun x890 () Bool)
(declare-fun x1002 () Int)
(declare-fun x609 () Bool)
(declare-fun x165 () Int)
(declare-fun x446 () Bool)
(declare-fun x553 () Bool)
(declare-fun x1001 () Int)
(declare-fun x731 () Bool)
(declare-fun x841 () Bool)
(declare-fun x266 () Bool)
(declare-fun x988 () Int)
(declare-fun x1030 () Bool)
(declare-fun x376 () Int)
(declare-fun x794 () Bool)
(declare-fun x459 () Bool)
(declare-fun x167 () Bool)
(declare-fun x218 () Int)
(declare-fun x142 () Bool)
(declare-fun x796 () Bool)
(declare-fun x829 () Bool)
(declare-fun x268 () Bool)
(declare-fun x14 () Int)
(declare-fun x22 () Bool)
(declare-fun x477 () Int)
(declare-fun x533 () Int)
(declare-fun x618 () Int)
(declare-fun x927 () Int)
(declare-fun x425 () Bool)
(declare-fun x59 () Bool)
(declare-fun x688 () Bool)
(declare-fun x643 () Bool)
(declare-fun x550 () Int)
(declare-fun x756 () Int)
(declare-fun x628 () Int)
(declare-fun x254 () Int)
(declare-fun x411 (x4) Int)
(declare-fun x85 () Bool)
(declare-fun x306 () Bool)
(declare-fun x637 () Int)
(declare-fun x158 () Int)
(declare-fun x596 () Bool)
(declare-fun x854 () Int)
(declare-fun x647 () Bool)
(declare-fun x339 () Bool)
(declare-fun x961 () Int)
(declare-fun x663 () Bool)
(declare-fun x857 () Bool)
(declare-fun x316 () Bool)
(declare-fun x779 () Bool)
(declare-fun x475 () Int)
(declare-fun x116 () Int)
(declare-fun x680 () Bool)
(declare-fun x936 (Int) Int)
(declare-fun x487 () Int)
(declare-fun x896 () Int)
(declare-fun x822 () Int)
(declare-fun x290 () Int)
(declare-fun x536 () Int)
(declare-fun x938 () Bool)
(declare-fun x932 () Bool)
(declare-fun x205 () Bool)
(declare-fun x828 () Int)
(declare-fun x140 () Bool)
(declare-fun x1048 () Bool)
(declare-fun x1038 () Int)
(declare-fun x455 () Int)
(declare-fun x741 () Bool)
(declare-fun x281 () Bool)
(declare-fun x716 () Bool)
(declare-fun x595 () Bool)
(declare-fun x185 () Int)
(declare-fun x293 () Int)
(declare-fun x755 () Int)
(declare-fun x13 () Int)
(declare-fun x597 () Int)
(declare-fun x160 () Int)
(declare-fun x180 () Int)
(declare-fun x451 () Int)
(declare-fun x68 () Bool)
(declare-fun x724 () Int)
(declare-fun x658 () Int)
(declare-fun x1062 () Int)
(declare-fun x124 () Bool)
(declare-fun x333 () Int)
(declare-fun x419 () Bool)
(declare-fun x162 () Bool)
(declare-fun x500 () Bool)
(declare-fun x479 () Bool)
(declare-fun x348 () Int)
(declare-fun x928 () Int)
(declare-fun x635 () Bool)
(declare-fun x910 () Bool)
(declare-fun x100 () Bool)
(declare-fun x765 () Bool)
(declare-fun x625 () Int)
(declare-fun x914 () Int)
(declare-fun x944 () Int)
(declare-fun x766 () Bool)
(declare-fun x491 () Int)
(declare-fun x430 () Int)
(declare-fun x489 () Bool)
(declare-fun x353 () Bool)
(declare-fun x943 () Bool)
(declare-fun x812 () Bool)
(declare-fun x861 () Bool)
(declare-fun x869 () Bool)
(declare-fun x894 () Bool)
(declare-fun x659 () Int)
(declare-fun x511 () Int)
(declare-fun x89 () Bool)
(declare-fun x585 () Int)
(declare-fun x824 () Bool)
(declare-fun x296 () Bool)
(declare-fun x154 () Int)
(declare-fun x286 () Int)
(declare-fun x441 () Int)
(declare-fun x638 () Bool)
(declare-fun x917 () Bool)
(declare-fun x636 () Int)
(declare-fun x523 () Int)
(declare-fun x1050 () Int)
(declare-fun x456 () Bool)
(declare-fun x237 () Int)
(declare-fun x577 () Bool)
(declare-fun x818 () Bool)
(declare-fun x919 () Bool)
(declare-fun x677 () Int)
(declare-fun x66 () Int)
(declare-fun x745 () Int)
(declare-fun x786 () Int)
(declare-fun x149 () Int)
(declare-fun x907 () Int)
(declare-fun x1031 () Int)
(declare-fun x651 () Int)
(declare-fun x752 () Int)
(declare-fun x645 () Bool)
(declare-fun x37 () Bool)
(declare-fun x615 () Bool)
(declare-fun x28 () Int)
(declare-fun x853 () Int)
(declare-fun x137 () Bool)
(declare-fun x1016 () Int)
(declare-fun x360 () Bool)
(declare-fun x736 () Int)
(declare-fun x284 () Int)
(declare-fun x601 () Bool)
(declare-fun x385 () Bool)
(declare-fun x53 () Int)
(declare-fun x63 () Int)
(declare-fun x1040 () Int)
(declare-fun x159 () Bool)
(declare-fun x126 () Int)
(declare-fun x654 () Bool)
(declare-fun x959 () Int)
(declare-fun x121 () Bool)
(declare-fun x192 () Int)
(declare-fun x501 () Int)
(declare-fun x997 () Bool)
(declare-fun x742 () Bool)
(declare-fun x288 () Bool)
(declare-fun x429 () Int)
(declare-fun x586 () Int)
(declare-fun x21 () Bool)
(declare-fun x614 () Int)
(declare-fun x1043 () Int)
(declare-fun x780 () Int)
(declare-fun x788 () Int)
(declare-fun x191 () Int)
(declare-fun x287 () Int)
(declare-fun x283 () Int)
(declare-fun x705 () Int)
(declare-fun x908 () Int)
(declare-fun x937 () Bool)
(declare-fun x24 () Int)
(declare-fun x607 () Bool)
(declare-fun x918 () Int)
(declare-fun x46 () Int)
(declare-fun x673 () Int)
(declare-fun x967 () Int)
(declare-fun x54 () Int)
(declare-fun x855 () Int)
(declare-fun x341 () Int)
(declare-fun x913 () Int)
(declare-fun x301 () Int)
(declare-fun x302 () Bool)
(declare-fun x386 () Int)
(declare-fun x750 () Bool)
(declare-fun x526 () Bool)
(declare-fun x220 () Bool)
(declare-fun x64 () Bool)
(declare-fun x632 () Bool)
(declare-fun x995 (Int) Int)
(declare-fun x1009 () Int)
(declare-fun x904 () Bool)
(declare-fun x234 () Int)
(declare-fun x213 () Int)
(declare-fun x133 () Bool)
(declare-fun x734 (Int) x4)
(declare-fun x993 () Int)
(declare-fun x979 () Int)
(declare-fun x843 () Int)
(declare-fun x42 () Int)
(declare-fun x400 () Bool)
(declare-fun x99 () Bool)
(declare-fun x737 () Int)
(declare-fun x686 () Int)
(declare-fun x541 () Bool)
(declare-fun x17 () Bool)
(declare-fun x282 () Int)
(declare-fun x407 () Bool)
(declare-fun x557 () Bool)
(declare-fun x581 () Int)
(declare-fun x317 () Bool)
(declare-fun x439 () Int)
(declare-fun x163 () Int)
(declare-fun x131 () Bool)
(declare-fun x423 () Bool)
(declare-fun x624 () Int)
(declare-fun x170 () Bool)
(declare-fun x359 () Int)
(declare-fun x217 () Bool)
(declare-fun x1020 () Bool)
(declare-fun x1025 () Bool)
(declare-fun x271 () Int)
(declare-fun x666 () Bool)
(declare-fun x202 () Int)
(declare-fun x35 () Bool)
(declare-fun x506 () Bool)
(declare-fun x582 () Bool)
(declare-fun x994 () Bool)
(declare-fun x362 () Bool)
(declare-fun x276 () Int)
(declare-fun x483 () Int)
(declare-fun x579 () Int)
(declare-fun x825 (Int) Int)
(declare-fun x384 () Int)
(declare-fun x769 () Bool)
(declare-fun x277 () Bool)
(declare-fun x555 () Int)
(declare-fun x887 () Bool)
(declare-fun x873 () Bool)
(declare-fun x588 () Int)
(declare-fun x1047 () Int)
(declare-fun x1055 () Int)
(declare-fun x422 () Bool)
(declare-fun x342 () Bool)
(declare-fun x539 () Bool)
(declare-fun x327 () Int)
(declare-fun x177 () Int)
(declare-fun x448 () Int)
(declare-fun x60 () Int)
(declare-fun x668 () Bool)
(declare-fun x806 () Bool)
(declare-fun x583 () Bool)
(declare-fun x719 () Int)
(declare-fun x198 () Bool)
(declare-fun x125 () Bool)
(declare-fun x640 () Int)
(declare-fun x388 () Bool)
(declare-fun x415 () Int)
(declare-fun x93 () Bool)
(declare-fun x1059 () Bool)
(declare-fun x838 () Int)
(declare-fun x527 () Bool)
(declare-fun x564 () Int)
(declare-fun x665 () Bool)
(declare-fun x65 () Int)
(declare-fun x481 () Bool)
(declare-fun x1003 () Bool)
(declare-fun x751 () Int)
(declare-fun x875 () Int)
(declare-fun x580 () Bool)
(declare-fun x256 () Bool)
(declare-fun x73 () Bool)
(declare-fun x265 () Int)
(declare-fun x695 () Bool)
(declare-fun x26 () Int)
(declare-fun x879 () Bool)
(declare-fun x128 () Bool)
(declare-fun x1022 () Bool)
(declare-fun x621 () Int)
(declare-fun x514 () Bool)
(declare-fun x139 () Int)
(declare-fun x298 (Int) Int)
(declare-fun x948 () Bool)
(declare-fun x535 () Bool)
(declare-fun x453 () Bool)
(declare-fun x671 () Bool)
(declare-fun x683 () Int)
(declare-fun x404 () Int)
(declare-fun x968 () Bool)
(declare-fun x365 () Bool)
(declare-fun x488 () Int)
(declare-fun x764 () Int)
(declare-fun x398 () Int)
(declare-fun x534 () Bool)
(declare-fun x106 () Int)
(declare-fun x576 () Bool)
(declare-fun x859 () Int)
(declare-fun x909 () Bool)
(declare-fun x552 () Int)
(declare-fun x338 () Bool)
(declare-fun x698 () Bool)
(declare-fun x972 () Int)
(declare-fun x20 (x4) Int)
(declare-fun x935 () Int)
(declare-fun x593 () Bool)
(declare-fun x945 () Bool)
(declare-fun x176 () Bool)
(declare-fun x831 () Bool)
(declare-fun x839 () Int)
(declare-fun x893 () Int)
(declare-fun x612 () Int)
(declare-fun x754 () Bool)
(declare-fun x1019 () Int)
(declare-fun x94 () Int)
(declare-fun x653 () Int)
(declare-fun x319 () Bool)
(declare-fun x629 () Int)
(declare-fun x212 () Bool)
(declare-fun x966 () Bool)
(declare-fun x340 () Bool)
(declare-fun x321 () Bool)
(declare-fun x729 () Bool)
(declare-fun x554 () Int)
(declare-fun x47 () Bool)
(declare-fun x532 () Bool)
(declare-fun x639 () Int)
(declare-fun x516 () Bool)
(declare-fun x551 () Int)
(declare-fun x414 () Bool)
(declare-fun x785 () Bool)
(declare-fun x33 () Bool)
(declare-fun x807 () Bool)
(declare-fun x401 () Int)
(declare-fun x723 () Bool)
(declare-fun x886 () Int)
(declare-fun x1065 () Bool)
(declare-fun x443 () Bool)
(declare-fun x396 () Bool)
(declare-fun x494 () Int)
(declare-fun x543 () Bool)
(declare-fun x678 () Bool)
(declare-fun x971 () Int)
(declare-fun x79 () Int)
(declare-fun x48 () Bool)
(declare-fun x562 () Int)
(declare-fun x958 () Bool)
(declare-fun x519 () Int)
(declare-fun x626 () Int)
(declare-fun x1039 () Int)
(declare-fun x417 () Int)
(declare-fun x253 () Int)
(declare-fun x403 () Bool)
(declare-fun x549 () Bool)
(declare-fun x15 () Bool)
(declare-fun x923 () Int)
(declare-fun x364 () Bool)
(declare-fun x735 () Int)
(declare-fun x373 () Int)
(declare-fun x230 () Int)
(declare-fun x980 () Bool)
(declare-fun x882 () Bool)
(declare-fun x172 () Int)
(declare-fun x986 () Int)
(declare-fun x518 () Int)
(declare-fun x604 () Bool)
(declare-fun x657 () Int)
(declare-fun x975 (Int) Int)
(declare-fun x1032 () Int)
(declare-fun x485 () Int)
(declare-fun x876 () Int)
(declare-fun x880 () Bool)
(declare-fun x1054 () Bool)
(declare-fun x156 () Int)
(declare-fun x810 () Int)
(declare-fun x1045 () Int)
(declare-fun x32 () Int)
(declare-fun x613 () Int)
(declare-fun x193 () Int)
(declare-fun x521 () Bool)
(declare-fun x83 () Bool)
(declare-fun x155 () Bool)
(declare-fun x91 () Int)
(declare-fun x346 () Int)
(declare-fun x232 () Int)
(declare-fun x646 () Bool)
(declare-fun x681 () Bool)
(declare-fun x782 () Bool)
(declare-fun x708 () Int)
(declare-fun x136 () Int)
(declare-fun x233 () Int)
(declare-fun x247 () Bool)
(declare-fun x1041 () Bool)
(declare-fun x74 () Int)
(declare-fun x244 () Int)
(declare-fun x45 () Bool)
(declare-fun x168 () Int)
(declare-fun x390 (Int) Int)
(declare-fun x906 () Int)
(declare-fun x783 () Int)
(declare-fun x713 () Bool)
(declare-fun x963 () Bool)
(declare-fun x530 () Int)
(declare-fun x428 () Bool)
(declare-fun x449 () Bool)
(declare-fun x44 () Int)
(declare-fun x476 () Int)
(declare-fun x1070 () Bool)
(declare-fun x498 () Int)
(declare-fun x1037 () Bool)
(declare-fun x323 () Bool)
(declare-fun x956 () Bool)
(declare-fun x728 () Bool)
(declare-fun x75 () Bool)
(declare-fun x209 () Bool)
(declare-fun x280 () Bool)
(declare-fun x691 () Int)
(declare-fun x104 () Int)
(declare-fun x634 () Bool)
(declare-fun x216 () Int)
(declare-fun x922 () Bool)
(declare-fun x129 () Int)
(declare-fun x732 () Int)
(declare-fun x391 () Bool)
(declare-fun x371 () Bool)
(declare-fun x817 () Bool)
(declare-fun x903 () Bool)
(declare-fun x326 () Int)
(declare-fun x182 () Int)
(declare-fun x592 () Int)
(declare-fun x320 () Bool)
(declare-fun x947 () Int)
(declare-fun x78 () Bool)
(declare-fun x951 () Int)
(declare-fun x1071 () Int)
(declare-fun x946 () Int)
(declare-fun x633 () Bool)
(declare-fun x495 () Int)
(declare-fun x955 () Bool)
(declare-fun x34 () Int)
(declare-fun x452 () Bool)
(declare-fun x795 () Int)
(declare-fun x228 () Int)
(declare-fun x219 () Bool)
(declare-fun x726 () Int)
(declare-fun x926 () Bool)
(declare-fun x748 () Bool)
(declare-fun x902 () Bool)
(declare-fun x594 () Int)
(declare-fun x1013 () Bool)
(declare-fun x804 () Int)
(declare-fun x118 () Bool)
(declare-fun x740 () Int)
(declare-fun x18 () Int)
(declare-fun x10 () Int)
(declare-fun x215 () Bool)
(declare-fun x587 () Int)
(declare-fun x895 () Bool)
(declare-fun x164 () Bool)
(declare-fun x437 () Int)
(declare-fun x898 () Bool)
(declare-fun x103 () Int)
(declare-fun x405 () Int)
(declare-fun x772 () Int)
(declare-fun x231 () Int)
(declare-fun x747 () Bool)
(declare-fun x107 () Bool)
(declare-fun x808 () Int)
(declare-fun x982 () Int)
(declare-fun x1008 () Int)
(declare-fun x572 () Int)
(declare-fun x566 () Int)
(declare-fun x270 () Bool)
(declare-fun x925 () Int)
(declare-fun x468 () Bool)
(declare-fun x49 () Int)
(declare-fun x11 () Int)
(declare-fun x334 () Int)
(declare-fun x797 () Bool)
(declare-fun x1034 () Int)
(declare-fun x70 () Bool)
(declare-fun x856 () Bool)
(declare-fun x134 () Bool)
(declare-fun x981 () Int)
(declare-fun x260 () Bool)
(declare-fun x707 () Int)
(declare-fun x427 () Bool)
(declare-fun x311 () Int)
(declare-fun x574 () Bool)
(declare-fun x395 () Int)
(declare-fun x493 () Bool)
(declare-fun x863 () Int)
(declare-fun x315 () Int)
(declare-fun x970 () Bool)
(declare-fun x881 () Bool)
(declare-fun x418 () Int)
(declare-fun x43 () Int)
(declare-fun x791 () Int)
(declare-fun x901 () Int)
(declare-fun x363 () Int)
(declare-fun x996 () Int)
(declare-fun x852 () Bool)
(declare-fun x721 () Int)
(declare-fun x148 () Bool)
(declare-fun x762 () Int)
(declare-fun x174 () Bool)
(declare-fun x600 () Bool)
(declare-fun x605 () Bool)
(declare-fun x1051 () Bool)
(declare-fun x730 () Bool)
(declare-fun x761 () Bool)
(declare-fun x463 () Int)
(declare-fun x648 () Bool)
(declare-fun x973 () Int)
(declare-fun x3 () Bool)
(declare-fun x567 () Bool)
(declare-fun x263 () Bool)
(declare-fun x410 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x619 () Int)
(declare-fun x289 () Int)
(declare-fun x314 () Bool)
(declare-fun x299 () Int)
(declare-fun x1007 () Bool)
(declare-fun x821 () Int)
(declare-fun x1060 (x4) Int)
(declare-fun x1061 () Bool)
(declare-fun x921 () Bool)
(declare-fun x503 () Int)
(declare-fun x669 () Int)
(declare-fun x900 () Bool)
(declare-fun x200 () Int)
(declare-fun x357 () Int)
(declare-fun x203 () Bool)
(declare-fun x860 () Int)
(declare-fun x743 () Bool)
(declare-fun x492 () Int)
(declare-fun x151 () Bool)
(declare-fun x715 () Int)
(declare-fun x264 () Int)
(declare-fun x484 () Bool)
(declare-fun x109 () Bool)
(declare-fun x690 () Int)
(declare-fun x132 () Int)
(declare-fun x1046 () Bool)
(declare-fun x62 () Bool)
(declare-fun x525 () Int)
(declare-fun x701 () Int)
(declare-fun x563 () Int)
(declare-fun x667 (Int) Int)
(declare-fun x1000 () Bool)
(declare-fun x95 () Int)
(declare-fun x257 () Int)
(declare-fun x473 () Bool)
(declare-fun x267 () Bool)
(declare-fun x602 () Bool)
(declare-fun x546 () Bool)
(declare-fun x679 () Bool)
(declare-fun x1057 () Int)
(declare-fun x584 () Int)
(declare-fun x16 () Bool)
(declare-fun x540 (x4) Int)
(declare-fun x279 () Int)
(declare-fun x591 () Bool)
(declare-fun x814 () Int)
(declare-fun x108 () Bool)
(declare-fun x877 () Int)
(declare-fun x784 () Int)
(declare-fun x336 () Bool)
(declare-fun x236 () Bool)
(declare-fun x840 () Int)
(declare-fun x888 () Bool)
(declare-fun x992 () Int)
(declare-fun x275 () Int)
(declare-fun x813 () Bool)
(declare-fun x990 () Int)
(declare-fun x71 () Int)
(declare-fun x815 () Bool)
(declare-fun x41 () Int)
(declare-fun x720 () Bool)
(declare-fun x377 () Int)
(declare-fun x201 () Int)
(declare-fun x589 () Int)
(declare-fun x522 () Int)
(declare-fun x447 () Int)
(declare-fun x776 () Int)
(declare-fun x375 () Bool)
(declare-fun x1015 () Int)
(declare-fun x929 () Bool)
(declare-fun x366 () Int)
(declare-fun x889 () Int)
(declare-fun x544 () Int)
(declare-fun x120 () Bool)
(declare-fun x331 () Bool)
(declare-fun x5 () Int)
(declare-fun x190 () Int)
(declare-fun x303 () Int)
(declare-fun x2 () Int)
(declare-fun x413 () Bool)
(declare-fun x169 () Bool)
(declare-fun x369 () Bool)
(declare-fun x19 () Int)
(declare-fun x50 () Int)
(declare-fun x1052 () Int)
(declare-fun x188 () Int)
(declare-fun x412 () Int)
(declare-fun x954 () Int)
(declare-fun x1049 () Int)
(declare-fun x775 () Int)
(declare-fun x693 () Bool)
(declare-fun x482 () Int)
(declare-fun x379 () Bool)
(declare-fun x531 () Bool)
(declare-fun x88 () Bool)
(declare-fun x227 () Int)
(declare-fun x55 () Bool)
(declare-fun x313 () Int)
(declare-fun x687 () Int)
(declare-fun x712 () Bool)
(declare-fun x208 () Int)
(declare-fun x508 () Bool)
(declare-fun x36 (x4) Int)
(declare-fun x718 () Int)
(declare-fun x989 () Bool)
(declare-fun x915 () Bool)
(declare-fun x440 () Int)
(declare-fun x969 () Bool)
(declare-fun x892 () Bool)
(declare-fun x173 () Int)
(declare-fun x620 () Bool)
(declare-fun x469 () Bool)
(declare-fun x883 () Bool)
(declare-fun x709 () Int)
(declare-fun x1005 () Int)
(declare-fun x322 () Bool)
(declare-fun x147 () Int)
(declare-fun x221 () Int)
(declare-fun x846 () Int)
(declare-fun x152 () Bool)
(declare-fun x561 () Int)
(declare-fun x349 () Bool)
(declare-fun x1029 () Bool)
(declare-fun x307 () Bool)
(declare-fun x235 () Bool)
(declare-fun x1018 () Int)
(declare-fun x832 () Bool)
(declare-fun x471 () Bool)
(declare-fun x650 () Bool)
(declare-fun x222 () Int)
(declare-fun x273 () Bool)
(declare-fun x885 () Int)
(declare-fun x146 () Int)
(declare-fun x206 () Int)
(declare-fun x556 () Int)
(declare-fun x545 () Int)
(declare-fun x891 () Int)
(declare-fun x763 () Int)
(declare-fun x397 () Int)
(declare-fun x1069 () Int)
(declare-fun x135 () Int)
(declare-fun x912 () Bool)
(declare-fun x1033 () Int)
(declare-fun x29 () Bool)
(declare-fun x461 () Int)
(declare-fun x122 () Int)
(declare-fun x789 () Bool)
(declare-fun x960 () Bool)
(declare-fun x978 () Bool)
(declare-fun x560 () Int)
(declare-fun x1024 () Bool)
(declare-fun x31 () Bool)
(declare-fun x127 () Bool)
(declare-fun x739 () Bool)
(declare-fun x664 () Int)
(declare-fun x800 () Bool)
(declare-fun x269 () Int)
(declare-fun x324 () Int)
(declare-fun x105 () Int)
(declare-fun x300 () Int)
(declare-fun x355 () Bool)
(declare-fun x513 () Int)
(declare-fun x1067 () Int)
(declare-fun x627 () Bool)
(declare-fun x870 () Int)
(declare-fun x611 () Int)
(declare-fun x662 () Bool)
(declare-fun x381 () Int)
(declare-fun x474 () Bool)
(declare-fun x834 () Int)
(declare-fun x878 () Int)
(declare-fun x559 () Int)
(declare-fun x420 () Bool)
(declare-fun x294 () Bool)
(declare-fun x39 () Int)
(declare-fun x248 () Int)
(declare-fun x570 () Int)
(declare-fun x57 () Bool)
(declare-fun x345 () Int)
(declare-fun x229 () Bool)
(declare-fun x1014 () Bool)
(declare-fun x239 () Bool)
(declare-fun x421 (Int) Int)
(declare-fun x792 () Int)
(declare-fun x92 (Int) Int)
(declare-fun x571 () Bool)
(declare-fun x210 () Int)
(declare-fun x661 () Bool)
(declare-fun x242 () Int)
(declare-fun x351 () Int)
(declare-fun x199 () Int)
(declare-fun x23 (Int Int) Int)
(declare-fun x933 () Int)
(declare-fun x865 () Int)
(declare-fun x141 () Bool)
(declare-fun x166 () Int)
(declare-fun x502 () Int)
(declare-fun x930 () Int)
(declare-fun x942 () Bool)
(declare-fun x505 () Bool)
(declare-fun x835 () Bool)
(declare-fun x590 () Bool)
(declare-fun x394 () Int)
(declare-fun x81 (Int Int) Int)
(declare-fun x603 () Int)
(declare-fun x343 () Bool)
(declare-fun x258 () Bool)
(declare-fun x102 () Int)
(declare-fun x1026 () Int)
(declare-fun x866 () Int)
(declare-fun x12 () Bool)
(declare-fun x710 () Bool)
(declare-fun x608 () Bool)
(declare-fun x171 () Bool)
(declare-fun x225 () Int)
(declare-fun x370 () Int)
(declare-fun x757 () Bool)
(declare-fun x515 () Int)
(declare-fun x309 () Bool)
(declare-fun x844 () Int)
(declare-fun x462 () Bool)
(declare-fun x98 () Int)
(declare-fun x833 () Bool)
(declare-fun x848 () Bool)
(declare-fun x826 () Bool)
(declare-fun x703 () Bool)
(declare-fun x957 () Int)
(declare-fun x805 () Int)
(declare-fun x652 () Int)
(declare-fun x548 () Int)
(declare-fun x246 () Int)
(declare-fun x224 () Bool)
(declare-fun x119 () Bool)
(declare-fun x1063 () Int)
(declare-fun x211 () Int)
(declare-fun x798 () Bool)
(declare-fun x406 () Int)
(declare-fun x999 () Bool)
(declare-fun x950 () Int)
(declare-fun x304 () Int)
(declare-fun x622 () Bool)
(declare-fun x1042 () Int)
(declare-fun x520 () Int)
(declare-fun x998 () Int)
(declare-fun x714 () Int)
(declare-fun x86 () Int)
(declare-fun x606 () Int)
(declare-fun x450 () Bool)
(declare-fun x953 () Int)
(declare-fun x623 () Int)
(declare-fun x184 () Int)
(declare-fun x255 () Bool)
(declare-fun x9 () Int)
(declare-fun x773 () Int)
(declare-fun x195 () Int)
(declare-fun x178 () Bool)
(declare-fun x389 () Bool)
(declare-fun x573 () Bool)
(declare-fun x656 () Int)
(declare-fun x358 (Int Int) Int)
(declare-fun x194 () Bool)
(declare-fun x251 () Int)
(declare-fun x964 () Int)
(declare-fun x238 () Bool)
(declare-fun x1056 () Bool)
(declare-fun x285 () Bool)
(declare-fun x82 () Int)
(declare-fun x297 () Bool)
(declare-fun x984 () Int)
(declare-fun x809 () Bool)
(declare-fun x197 () Int)
(declare-fun x252 () Int)
(declare-fun x850 () Bool)
(declare-fun x905 () Bool)
(declare-fun x38 (x4) Int)
(declare-fun x862 () Int)
(declare-fun x145 (x4) Int)
(declare-fun x392 () Int)
(declare-fun x305 () Bool)
(declare-fun x69 () Bool)
(declare-fun x819 () Int)
(declare-fun x438 () Int)
(declare-fun x777 () Int)
(declare-fun x1068 () Bool)
(declare-fun x774 () Bool)
(declare-fun x631 () Int)
(declare-fun x700 () Bool)
(declare-fun x111 () Int)
(declare-fun x175 (x4) Int)
(declare-fun x278 () Bool)
(declare-fun x368 () Bool)
(declare-fun x372 () Int)
(declare-fun x56 () Int)
(declare-fun x830 () Int)
(declare-fun x249 () Bool)
(declare-fun x464 () Bool)
(declare-fun x72 () Int)
(declare-fun x87 () Int)
(declare-fun x138 () Bool)
(declare-fun x952 () Int)
(declare-fun x672 () Int)
(declare-fun x827 () Int)
(declare-fun x934 (Int) Int)
(declare-fun x434 () Int)
(declare-fun x458 () Int)
(declare-fun x354 () Bool)
(declare-fun x802 () Bool)
(declare-fun x245 () Int)
(declare-fun x616 () Int)
(declare-fun x153 () Bool)
(declare-fun x470 () Bool)
(declare-fun x6 () Bool)
(declare-fun x466 () Bool)
(declare-fun x837 () Int)
(declare-fun x985 () Bool)
(declare-fun x655 () Int)
(declare-fun x816 () Bool)
(declare-fun x337 () Bool)
(declare-fun x1058 () Bool)
(declare-fun x787 () Bool)
(declare-fun x884 () Int)
(declare-fun x144 () Int)
(declare-fun x847 () Int)
(declare-fun x991 () Int)
(declare-fun x694 () Bool)
(declare-fun x380 () Int)
(declare-fun x352 () Int)
(declare-fun x760 () Bool)
(declare-fun x507 () Int)
(declare-fun x1072 () Bool)
(declare-fun x52 () Bool)
(declare-fun x416 () Int)
(declare-fun x811 () Int)
(declare-fun x1021 () Bool)
(declare-fun x790 () Bool)
(declare-fun x1036 () Bool)
(declare-fun x704 () Int)
(declare-fun x433 () Bool)
(declare-fun x711 () Int)
(declare-fun x940 () Int)
(declare-fun x186 () Int)
(declare-fun x864 () Int)
(declare-fun x823 () Int)
(declare-fun x598 () Int)
(declare-fun x157 () Int)
(declare-fun x335 () Int)
(declare-fun x460 () Bool)
(declare-fun x115 () Bool)
(declare-fun x259 () Bool)
(declare-fun x445 () Bool)
(declare-fun x382 () Int)
(declare-fun x538 () Bool)
(declare-fun x684 () Bool)
(declare-fun x987 () Bool)
(declare-fun x80 () Bool)
(declare-fun x261 () Int)
(declare-fun x670 () Bool)
(declare-fun x181 () Bool)
(declare-fun x424 () Int)
(declare-fun x725 () Int)
(declare-fun x496 () Int)
(declare-fun x117 () Bool)
(declare-fun x949 () Int)
(declare-fun x1073 () Int)
(declare-fun x528 (Int) Int)
(declare-fun x675 () Int)
(declare-fun x717 () Int)
(declare-fun x480 () Int)
(declare-fun x8 () Int)
(declare-fun x329 () Int)
(declare-fun x90 () Int)
(declare-fun x318 () Int)
(declare-fun x727 () Int)
(declare-fun x565 () Bool)
(declare-fun x344 () Bool)
(declare-fun x243 () Int)
(declare-fun x467 () Bool)
(declare-fun x497 () Int)
(declare-fun x101 () Int)
(declare-fun x793 (Int) Int)
(declare-fun x1053 () Bool)
(declare-fun x1044 () Int)
(define-fun x442 ((x4 x4) (x332 Int)) x4 (ite ((_ is x983) x4) (x983 (x911 x4) (x310 x4) (+ x332 (x733 x4))) (ite ((_ is x702) x4) (x702 (x509 x4) (+ x332 (x1011 x4))) (x575 (+ (x542 x4) x332)))))
(define-fun x312 ((x1028 Int)) Int (ite (and (>= x1028 0) (< x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x1028 (- x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x51 ((x1028 Int)) Int (ite (and (< x1028 0) (>= x1028 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1028) x1028))
(define-fun x537 ((x768 Int)) Bool (and (<= 0 x768) (< x768 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x347 ((x768 Int)) Bool (and (= (x81 x768 115792089237316195423570985008687907853269984665640564039457584007913129639935) x768) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639935 x768) x768)))
(define-fun x916 ((x768 Int)) Bool (and (= (x81 x768 0) 0) (= (x81 0 x768) 0)))
(define-fun x431 ((x768 Int)) Bool (= x768 (x81 x768 x768)))
(define-fun x130 ((x768 Int)) Bool (and (x431 x768) (x347 x768) (x916 x768)))
(define-fun x204 ((x768 Int) (x931 Int)) Bool (= (x81 x768 x931) (x81 x931 x768)))
(define-fun x478 ((x768 Int) (x931 Int)) Bool (and (=> (>= x931 0) (<= (x81 x768 x931) x931)) (<= 0 (x81 x768 x931)) (=> (>= x768 0) (>= x768 (x81 x768 x931)))))
(define-fun x409 ((x768 Int) (x931 Int)) Bool (and (x478 x768 x931) (x204 x768 x931)))
(define-fun x40 ((x768 Int)) Bool (= (+ (x81 x768 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x768 32)) (mod x768 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x328 ((x768 Int)) Bool (and (x40 x768) (x409 x768 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x250 ((x768 Int)) Bool (= (x81 x768 1461501637330902918203684832716283019655932542975) (mod x768 1461501637330902918203684832716283019655932542976)))
(define-fun x207 ((x768 Int)) Bool (and (x409 x768 1461501637330902918203684832716283019655932542975) (x250 x768)))
(define-fun x7 ((x113 Int)) Int (ite (> x5 x113) (x92 x113) 0))
(define-fun x868 ((x113 Int)) Int (x421 x113))
(define-fun x472 ((x113 x4)) Int (ite (= (x734 x234) x113) x701 (x1060 x113)))
(define-fun x529 ((x113 x4)) Int (ite (= x113 (x734 x341)) x918 (x472 x113)))
(define-fun x214 ((x113 Int)) Int (ite (= x113 128) x376 (x934 x113)))
(define-fun x226 ((x113 Int)) Int (ite (and (<= 160 x113) (> (+ x376 160) x113)) (x421 (+ (- x113 160) x149)) (x214 x113)))
(define-fun x330 ((x113 Int)) Int (ite (= x113 x54) 0 (x226 x113)))
(define-fun x143 ((x113 Int)) Int (ite (= x113 x755) x628 (x330 x113)))
(define-fun x97 ((x113 Int)) Int (ite (and (>= x113 x404) (< x113 (+ x628 x404))) (x421 (+ (- x113 x404) x1040)) (x143 x113)))
(define-fun x189 ((x113 Int)) Int (ite (= x834 x113) 0 (x97 x113)))
(define-fun x851 ((x113 Int)) Int (ite (= x352 x113) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x189 x113)))
(define-fun x96 ((x113 Int)) Int (ite (= x318 x113) 160 (x851 x113)))
(define-fun x858 ((x113 Int)) Int (ite (= x113 x126) x767 (x96 x113)))
(define-fun x61 ((x113 Int)) Int (ite (= x837 x113) x533 (x858 x113)))
(define-fun x722 ((x113 Int)) Int (ite (= x113 x261) x795 (x61 x113)))
(define-fun x749 ((x113 Int)) Int (ite (= x233 x113) x439 (x722 x113)))
(define-fun x617 ((x113 Int)) Int (ite (= x113 x1052) x304 (x749 x113)))
(define-fun x435 ((x113 Int)) Int (ite x1007 (x749 x113) (ite x75 (x722 x113) (ite x815 (x61 x113) (ite x643 (x858 x113) (x617 x113))))))
(define-fun x161 ((x113 Int)) Int (ite (= x382 x113) 0 (x435 x113)))
(define-fun x899 ((x113 Int)) Int (ite x607 (x435 x113) (x161 x113)))
(define-fun x842 ((x113 Int)) Int (ite (= x659 x113) x719 (x899 x113)))
(define-fun x803 ((x113 Int)) Int (ite (= x113 x488) x66 (x842 x113)))
(define-fun x512 ((x113 Int)) Int (ite (= x438 x113) x907 (x803 x113)))
(define-fun x272 ((x113 Int)) Int (ite (= x251 x113) x424 (x512 x113)))
(define-fun x699 ((x113 Int)) Int (ite (= x113 x491) x840 (x272 x113)))
(define-fun x110 ((x113 Int)) Int (ite (= x870 x113) x105 (x699 x113)))
(define-fun x150 ((x113 Int)) Int (ite x841 (x699 x113) (ite x760 (x272 x113) (ite x882 (x512 x113) (ite x648 (x803 x113) (x110 x113))))))
(define-fun x499 ((x113 Int)) Int (ite (= x113 x686) 0 (x150 x113)))
(define-fun x1066 ((x113 Int)) Int (ite x128 (x150 x113) (x499 x113)))
(define-fun x426 ((x113 Int)) Int (ite (= x113 x230) x891 (x1066 x113)))
(define-fun x383 ((x113 Int)) Int (ite (= x625 x113) x206 (x426 x113)))
(define-fun x758 ((x113 Int)) Int (ite (= x519 x113) x772 (x383 x113)))
(define-fun x295 ((x113 Int)) Int (ite (= x113 x1015) x192 (x758 x113)))
(define-fun x976 ((x113 Int)) Int (ite (= x113 x692) x927 (x295 x113)))
(define-fun x845 ((x113 Int)) Int (ite (= x745 x113) x463 (x976 x113)))
(define-fun x697 ((x113 Int)) Int (ite (= x113 x26) x913 (x845 x113)))
(define-fun x393 ((x113 Int)) Int (ite x583 (x845 x113) (ite x790 (x976 x113) (ite x812 (x295 x113) (ite x782 (x758 x113) (x697 x113))))))
(define-fun x378 ((x113 Int)) Int (ite (= x113 x619) x751 (x393 x113)))
(define-fun x308 ((x113 Int)) Int (ite (= x113 x940) x914 (x378 x113)))
(define-fun x1017 ((x113 Int)) Int (ite (= x507 x113) x451 (x308 x113)))
(define-fun x402 ((x113 Int)) Int (ite (= x9 x113) x185 (x1017 x113)))
(define-fun x399 ((x113 Int)) Int (ite (and (>= x113 x405) (> (+ x405 x185) x113)) (x421 (+ (- x113 x405) x946)) (x402 x113)))
(define-fun x771 ((x113 Int)) Int (ite (= x113 x372) 0 (x399 x113)))
(define-fun x444 ((x113 Int)) Int (ite x355 (x308 x113) (x771 x113)))
(define-fun x685 ((x113 Int)) Int (ite (= x352 x113) x764 (x444 x113)))
(define-fun x187 ((x113 Int)) Int (ite x260 (x444 x113) (x685 x113)))
(define-fun x262 ((x113 Int)) Int (ite (= x113 x763) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x187 x113)))
(define-fun x746 ((x113 Int)) Int (ite (and (< x113 (+ 32 x763)) (>= x113 x763)) (x390 (+ 0 (- x113 x763))) (x262 x113)))
(define-fun x799 ((x113 Int)) Int (ite (and (>= x113 196) (> (+ 196 (x51 (- x434 196))) x113)) (x444 (+ (x312 (+ 196 x352)) (- x113 196))) (x7 x113)))
(define-fun x27 ((x113 Int)) Int (ite (= 128 x113) x440 (x995 x113)))
(define-fun x649 ((x113 Int)) Int (ite (and (<= 160 x113) (< x113 (+ 160 x440))) (x799 (+ (- x113 160) 196)) (x27 x113)))
(define-fun x1006 ((x113 Int)) Int (ite (= x113 x394) 0 (x649 x113)))
(define-fun x977 ((x113 Int)) Int (ite (= x854 x113) x788 (x1006 x113)))
(define-fun x674 ((x113 Int)) Int (ite (and (<= x954 x113) (< x113 (+ x788 x954))) (x799 (+ x363 (- x113 x954))) (x977 x113)))
(define-fun x941 ((x113 Int)) Int (ite (= x579 x113) 0 (x674 x113)))
(define-fun x849 ((x113 Int)) Int (ite (= x113 x614) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x941 x113)))
(define-fun x241 ((x113 Int)) Int (ite (= x113 x614) x222 (x849 x113)))
(define-fun x350 ((x113 x4)) Int (ite (= x113 (x734 x341)) x687 (x529 x113)))
(define-fun x504 ((x113 x4)) Int (ite (= (x734 x447) x113) x673 (x350 x113)))
(define-fun x920 ((x113 Int)) Int (ite (and (>= x113 x1008) (< x113 (+ 0 x1008))) (x793 (+ (- x113 x1008) 0)) (x241 x113)))
(define-fun x510 ((x113 Int)) Int (ite x151 (x241 x113) (ite x728 (x920 x113) (x241 x113))))
(define-fun x836 ((x113 Int)) Int (ite x151 (x298 x113) (x793 x113)))
(define-fun x630 ((x113 Int)) Int (ite (= x1008 x113) x550 (x510 x113)))
(define-fun x274 ((x113 Int)) Int (ite (and (< x113 (+ x165 x550)) (>= x113 x165)) (x836 (+ (- x113 x165) 0)) (x630 x113)))
(define-fun x778 ((x113 x4)) Int (ite x728 (x36 x113) (x504 x113)))
(define-fun x696 ((x113 x4)) Int (ite (= (x734 x447) x113) x65 (x778 x113)))
(define-fun x291 ((x113 x4)) Int (ite (= (x734 x341) x113) x737 (x696 x113)))
(define-fun x781 ((x113 x4)) Int (ite x343 (x529 x113) (ite x151 (x529 x113) (ite x356 (x778 x113) (x291 x113)))))
(define-fun x114 ((x113 Int)) Int (ite x343 (x941 x113) (ite x694 (x510 x113) (x274 x113))))
(define-fun x642 ((x113 x4)) Int (ite (= (x734 x341) x113) x570 (x781 x113)))
(define-fun x408 ((x113 x4)) Int (ite (= x113 (x734 x502)) x804 (x642 x113)))
(define-fun x1 ((x113 x4)) Int (ite (= x113 (x734 x502)) x561 (x408 x113)))
(define-fun x1064 ((x113 x4)) Int (ite (= x113 (x734 x341)) x90 (x1 x113)))
(define-fun x374 ((x113 Int)) Int (ite (= x113 x821) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x114 x113)))
(define-fun x361 ((x113 Int)) Int (ite (= x448 x113) 192 (x374 x113)))
(define-fun x744 ((x113 Int)) Int (ite (= x293 x113) x992 (x361 x113)))
(define-fun x965 ((x113 Int)) Int (ite (= x113 x776) x1057 (x744 x113)))
(define-fun x874 ((x113 Int)) Int (ite (= x113 x732) x477 (x965 x113)))
(define-fun x939 ((x113 Int)) Int (ite (= x113 x1033) x458 (x874 x113)))
(define-fun x867 ((x113 x4)) Int (ite x371 (x540 x113) (x1064 x113)))
(define-fun x660 ((x113 x4)) Int (ite x1037 (x867 x113) (ite x84 (x411 x113) (x867 x113))))
(define-fun x367 ((x113 Int)) Int (ite (= x113 x24) x592 (x939 x113)))
(define-fun x1010 ((x113 Int)) Int (ite x99 (x939 x113) (ite x627 (x874 x113) (ite x354 (x965 x113) (ite x229 (x744 x113) (x367 x113))))))
(define-fun x292 ((x113 Int)) Int (ite (= x113 x221) 0 (x1010 x113)))
(define-fun x578 ((x113 Int)) Int (ite x943 (x1010 x113) (x292 x113)))
(define-fun x1012 ((x113 Int)) Int (ite (= x113 x1062) x655 (x578 x113)))
(define-fun x1023 ((x113 Int)) Int (ite (= x113 x653) x315 (x1012 x113)))
(define-fun x682 ((x113 Int)) Int (ite (= x113 x63) x988 (x1023 x113)))
(define-fun x25 ((x113 Int)) Int (ite (= x658 x113) x711 (x682 x113)))
(define-fun x223 ((x113 Int)) Int (ite (= x113 x19) x498 (x25 x113)))
(define-fun x436 ((x113 Int)) Int (ite (= x326 x113) x351 (x223 x113)))
(define-fun x871 ((x113 Int)) Int (ite x905 (x223 x113) (ite x481 (x25 x113) (ite x80 (x682 x113) (ite x109 (x1023 x113) (x436 x113))))))
(define-fun x974 ((x113 Int)) Int (ite (= x60 x113) 0 (x871 x113)))
(define-fun x759 ((x113 Int)) Int (ite x880 (x871 x113) (x974 x113)))
(define-fun x490 ((x113 Int)) Int (ite (= x113 x324) x98 (x759 x113)))
(define-fun x558 ((x113 Int)) Int (ite (= x551 x113) x286 (x490 x113)))
(define-fun x196 ((x113 Int)) Int (ite (= x1038 x113) x132 (x558 x113)))
(define-fun x820 ((x113 Int)) Int (ite (= x973 x113) x191 (x196 x113)))
(define-fun x77 ((x113 Int)) Int (ite (and (<= x821 x113) (> (+ 0 x821) x113)) (x667 (+ (- x113 x821) 0)) (x820 x113)))
(define-fun x1035 ((x113 Int)) Int (ite x371 (x77 x113) (x820 x113)))
(define-fun x962 ((x113 Int)) Int (ite (= x705 x113) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x1035 x113)))
(define-fun x706 ((x113 Int)) Int (ite (= x43 x113) x520 (x962 x113)))
(define-fun x457 ((x113 Int)) Int (ite (= x511 x113) x485 (x706 x113)))
(define-fun x1027 ((x113 Int)) Int (ite (= x838 x113) x756 (x457 x113)))
(define-fun x689 ((x113 Int)) Int (ite (= x113 x395) x560 (x1027 x113)))
(define-fun x753 ((x113 Int)) Int (ite x577 (x1027 x113) (ite x407 (x457 x113) (ite x926 (x706 x113) (ite x100 (x962 x113) (x689 x113))))))
(define-fun x770 ((x113 Int)) Int (ite (= x257 x113) 0 (x753 x113)))
(define-fun x547 ((x113 Int)) Int (ite x779 (x753 x113) (x770 x113)))
(define-fun x872 ((x113 Int)) Int (ite (= x821 x113) x683 (x547 x113)))
(define-fun x123 ((x113 Int)) Int (ite (= x10 x113) x1047 (x872 x113)))
(define-fun x599 ((x113 Int)) Int (ite (= x111 x113) x299 (x123 x113)))
(define-fun x58 ((x113 Int)) Int (ite (= x113 x552) x736 (x599 x113)))
(define-fun x112 ((x113 Int)) Int (ite (= x113 x677) x893 (x58 x113)))
(define-fun x568 ((x113 Int)) Int (ite (= x113 x199) x588 (x112 x113)))
(define-fun x738 ((x113 Int)) Int (ite (= x113 x827) x584 (x568 x113)))
(define-fun x801 ((x113 Int)) Int (ite x456 (x568 x113) (ite x852 (x112 x113) (ite x817 (x58 x113) (ite x331 (x599 x113) (x738 x113))))))
(define-fun x486 ((x113 Int)) Int (ite (= x1067 x113) 0 (x801 x113)))
(define-fun x76 ((x113 Int)) Int (ite x1003 (x801 x113) (x486 x113)))
(define-fun x454 ((x113 Int)) Int (ite (= x113 x556) x211 (x76 x113)))
(define-fun x644 ((x113 Int)) Int (ite x479 (x746 x113) (x262 x113)))
(define-fun x387 ((x113 Int)) Int (ite (= x113 x735) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x644 x113)))
(define-fun x465 ((x113 Int)) Int (ite (and (>= x113 x735) (< x113 (+ x735 32))) (x936 (+ (- x113 x735) 0)) (x387 x113)))
(define-fun x30 ((x113 Int)) Int (ite x385 (x465 x113) (x387 x113)))
(define-fun x432 ((x113 Int)) Int (ite (= x947 x113) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x30 x113)))
(define-fun x897 ((x113 Int)) Int (ite (and (> (+ x947 32) x113) (>= x113 x947)) (x975 (+ (- x113 x947) 0)) (x432 x113)))
(define-fun x676 ((x113 Int)) Int (ite x665 (x897 x113) (x432 x113)))
(define-fun x641 ((x113 Int)) Int (ite (= x860 x113) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x676 x113)))
(define-fun x524 ((x113 Int)) Int (ite (and (<= x860 x113) (> (+ 32 x860) x113)) (x410 (+ (- x113 x860) 0)) (x641 x113)))
(define-fun x610 ((x113 Int)) Int (ite x464 (x524 x113) (x641 x113)))
(define-fun x325 ((x113 Int)) Int (ite (= x103 x113) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x610 x113)))
(define-fun x569 ((x113 Int)) Int (ite (and (>= x113 x103) (< x113 (+ 32 x103))) (x528 (+ 0 (- x113 x103))) (x325 x113)))
(define-fun x924 ((x113 Int)) Int (ite x450 (x569 x113) (x325 x113)))
(define-fun x240 ((x768 Int)) Bool (=> (and (not (= x768 75068239)) (> x768 10000) (not (= 1845979623 x768)) (not (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x768)) (not (= 1262878978 x768)) (not (= x768 33582922474372145882413589741236248003507108108518759994751911431010219196416)) (not (= x768 4739670319144124481003130557741556594755290868171975227769803894069435301888)) (not (= x768 1245659826)) (not (= x768 22445611572322667099362401052093617030957452505749565894135597532943828910080)) (not (= x768 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 818759841 x768)) (not (= x768 1461501637330902918203684832716283019655932542975)) (not (= 18446744073709551615 x768)) (not (= x768 2376452955)) (not (= x768 2249206060)) (not (= 113209349505197351213641468582317386984598294884268236158119619414039440916480 x768)) (not (= 2220280665 x768)) (not (= x768 4294967296)) (not (= x768 1461501637330902918203684832716283019655932542976)) (not (= 4076725131 x768)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x768)) (not (= x768 64069044923792539370177021244577383457373632460708312080110356237917649633280)) (not (= x768 62805084655870755976952745400290271510621614971557940054860603637793562820608)) (not (= 1553423035 x768)) (not (= x768 1901074598)) (not (= 4199168155 x768)) (not (= x768 3705713892)) (not (= 2329570063 x768)) (not (= x768 3572374928)) (not (= 3084411429 x768)) (not (= 79228162514264337593543950335 x768)) (not (= 832554005 x768)) (not (= x768 2005408114)) (not (= 102499615646744134772650717477688572466918151731817230690449879178893085114368 x768))) (not ((_ is x575) (x734 x768)))))
(assert (= x543 (and (not x471) x895)))
(assert (x537 x918))
(assert (x537 x146))
(assert (= x661 (or x1037 x679)))
(assert (x537 x714))
(assert (x537 x777))
(assert (x537 x775))
(assert (x328 x28))
(assert (x537 x686))
(assert (x537 x584))
(assert (x537 x199))
(assert (= x765 (or x260 x307)))
(assert (x537 x91))
(assert (= x469 (and x205 x1014)))
(assert (x537 x144))
(assert (x537 x1044))
(assert (= (and x59 x365) x688))
(assert (x537 x690))
(assert (x537 x717))
(assert (x537 x715))
(assert (x537 x875))
(assert (x537 x566))
(assert (= x391 (or (and (not x6) x765) x423)))
(assert (= x339 (and x137 x700)))
(assert (= (x20 (x575 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x142 (or x620 x470)))
(assert (x537 x46))
(assert (= (and x796 (not x169)) x1048))
(assert (= (and (not x306) x215) x596))
(assert (x537 x492))
(assert (x537 x126))
(assert (x537 x981))
(assert (= (x734 818759841) (x575 818759841)))
(assert (x537 x628))
(assert (x537 x863))
(assert (x130 x104))
(assert (x537 x780))
(assert (= x938 (=> (and (= x534 (not (< 128 x992))) (= (x312 (+ x554 96)) x24) (= (x939 256) x592)) (and x534 (=> (= x967 128) x203)))))
(assert (x537 x585))
(assert (= (and x671 x712) x174))
(assert (x537 x498))
(assert (x328 x275))
(assert (= x270 (and x873 x785)))
(assert (= x370 (x20 (x734 x370))))
(assert (x537 x530))
(assert (= (and (not x955) x67) x852))
(assert (x537 x412))
(assert (x537 x406))
(assert (= x648 (and (not x89) x120)))
(assert (= x761 (or x688 x151 x356)))
(assert (= (and x400 x932) x236))
(assert (x537 x71))
(assert (x537 x5))
(assert (= (and x33 x52) x663))
(assert (x537 x823))
(assert (= (x934 192) 0))
(assert (x537 x348))
(assert (= (=> (and (or (and x680 (and (= 1 x559) (> 4294967296 x959))) (and (not x680) (= x559 x163))) (and (not (= x172 0)) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x39) x523) (= (< 0 x163) x680) (not (or (> x616 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x616) (= (<= x616 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x232 (x676 x947)) (= x860 (x312 (+ x523 x947))) (= x39 (x312 (+ 31 x616))) (<= x232 1461501637330902918203684832716283019655932542975))) x818) x443))
(assert (= (x734 1901074598) (x575 1901074598)))
(assert (x537 x315))
(assert (x537 x287))
(assert (x537 x494))
(assert (x537 x652))
(assert (= x508 (=> (and (or (and (= x1034 x1008) x576) (and (and (= x101 x1034) (= (x312 (+ x1008 32)) x165) (= x1073 (x312 (+ 63 x550))) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1073) x136) (= (x312 (+ x1008 x136)) x101)) (not x576))) (= x576 (= x550 0))) x73)))
(assert (x240 x287))
(assert (= (x20 (x575 54065695799311150304516525983669583430195215316752708547810291668471328538624)) 54065695799311150304516525983669583430195215316752708547810291668471328538624))
(assert (x130 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x537 x555))
(assert (x130 x1039))
(assert (x537 x188))
(assert (= (and x270 x602) x280))
(assert (= x698 (and x666 (not x716))))
(assert (x537 x1016))
(assert (x537 x86))
(assert (= x595 (and x142 x273)))
(assert (x537 x764))
(assert (x537 x979))
(assert (x537 x483))
(assert (x537 x964))
(assert (x537 x891))
(assert (x537 x865))
(assert (= x342 (and x729 x661)))
(assert (x537 x491))
(assert (x207 x502))
(assert (x537 x792))
(assert (= (x995 192) 0))
(assert (= (and x391 x710) x479))
(assert (x130 x28))
(assert (x537 x736))
(assert (= (=> (and (not (= x200 1262878978)) (= x786 x282) (not (= 1845979623 x200)) (= 2005408114 x200) (= (or (and (> 160 x725) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x725) true)) (> x725 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x78) (>= x972 292) (= (x51 (- x814 x352)) x434) (= x719 x173) (< x200 2220280665) (not (= x200 1901074598)) (not (= x200 1245659826)) (= (x38 (x734 x341)) x707) (not (= x200 1553423035)) (not (< x972 4)) (= (x51 (- x972 4)) x725) x526 (= x526 (= x767 (x7 164))) (= x206 x982) (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x664) (< 0 x707) (not (< x200 1245659826)) (= x972 x434) (= x751 x525)) (and (=> (and (not x78) (= x958 (and (> x972 195) (= true (<= x972 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (and (=> (not x958) x605) (=> (and x958 (and (= (x799 164) x440) (= x604 (< 18446744073709551615 x440)))) (and (=> x604 x605) (=> (and (not x604) (and (= x179 (x312 (+ x455 31))) (= x906 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x819)) (= x85 (= 0 (ite x88 1 0))) (= x455 (x312 (+ 32 x906))) (= x289 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x179)) (= (> x854 18446744073709551615) x703) (= x220 (< x854 128)) (= (or x220 x703) x88) (= x819 (x312 (+ x440 31))) (= (x312 (+ x289 128)) x854))) (and (=> (not x85) x605) (=> (and x85 (and (= (> x1049 x972) x1022) (= (x312 (+ x440 196)) x1049))) (and (=> x1022 x605) (=> (and (and (= (x312 (+ 160 x440)) x394) (= x285 (> x719 18446744073709551615))) (not x1022)) (and (=> x285 x605) (=> (and (and (= x138 (or (and (> x972 x805) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x805) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x972))) (and (> x805 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x972 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x312 (+ 4 x173)) x847) (= x805 (x312 (+ 31 x847)))) (not x285)) (and (=> (not x138) x605) (=> (and (and (= (x312 (+ x847 32)) x363) (= (< 18446744073709551615 x788) x929) (= (x799 x847) x788)) x138) (and (=> (and (and (= x928 (x312 (+ 32 x522))) (= x321 (or x609 x389)) (= x28 (x312 (+ 31 x928))) (= x389 (< 18446744073709551615 x614)) (= x522 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x79)) (= x1014 (= 0 (ite x321 1 0))) (= (x312 (+ x788 31)) x79) (= (< x614 x854) x609) (= x996 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x28)) (= x614 (x312 (+ x854 x996)))) (not x929)) (and (=> (and (and (= (x312 (+ x363 x788)) x416) (= (< x972 x416) x259) (= (x312 (+ 32 x854)) x954)) x1014) (and (=> x259 x605) (=> (and (not x259) (and (= (< 18446744073709551615 x206) x960) (= (x312 (+ x788 x954)) x579))) (and (=> x960 x605) (=> (and (not x960) (and (= x148 (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x972) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x190)) (and (< x190 x972) (= (<= x972 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x190 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x690 (x312 (+ 4 x982))) (= (x312 (+ 31 x690)) x190))) (and (=> (and x148 (and (= (x799 x690) x122) (= (> x122 18446744073709551615) x671))) (and (=> x671 x605) (=> (and (and (= (> x586 x972) x471) (= (mod (* x122 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x246) (= x586 (x312 (+ x246 x166))) (= (x312 (+ x690 32)) x166)) (not x671)) (and (=> (and (not x471) (= x319 (> x751 18446744073709551615))) (and (=> (and (and (= x894 (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x629) (<= x972 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x972 x629) (= (<= x629 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x972))))) (= x517 (x312 (+ 4 x525))) (= (x312 (+ 31 x517)) x629)) (not x319)) (and (=> (not x894) x605) (=> (and x894 (and (= x935 (x799 x517)) (= (< 18446744073709551615 x935) x176))) (and (=> (and (and (= x513 (x312 (+ x517 32))) (= x612 (mod (* x935 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x622 (< x972 x979)) (= (x312 (+ x513 x612)) x979)) (not x176)) (and (=> x622 x605) (=> (and (and (< x740 256) (= (= x740 0) x162) (<= x740 255) (>= x740 0)) (not x622)) (and (=> (and (and (<= 0 x672) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x672) (= x474 (> x672 0))) x162) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x672) (= (= x672 0) x873) (>= x672 0)) x474) (and (=> (not x873) x605) (=> (and x873 (and (= x480 x177) (not (= x889 2329570063)) (= (x241 x614) x811) (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 x1002) (= (x312 (+ 32 x614)) x1008) (not (> 2220280665 x889)) (= (x38 (x734 x341)) x986) (not (= 2220280665 x889)) (<= 0 x222) (= (x81 1461501637330902918203684832716283019655932542975 x811) x862) (= 4 x480) (= x602 (= x862 x811)) (= x889 2376452955) (not (= 2249206060 x889)) (> x986 0) (< x222 1461501637330902918203684832716283019655932542976) (< x889 3084411429) (<= x222 1461501637330902918203684832716283019655932542975) (= x177 4) (not (< x177 4)))) (and (=> (not x602) x605) (=> (and (and (= (and (>= x381 0) (< (+ x208 x611) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x969) (= (x81 1461501637330902918203684832716283019655932542975 x811) x447) (= 0 x611) (= x208 (x529 (x734 x447))) (= (x529 (x734 x341)) x381)) x602) (and (=> (and (not x969) (and (= x550 0) (= x606 0))) x508) (=> (and x969 (and (or (and (and (= (>= (x36 (x734 x341)) x777) x963) (> 4294967296 x708) x857 (= (x504 (x734 x341)) x777) x963 (= (= x639 (x36 (x734 x447))) x857) (= x639 (x504 (x734 x447)))) x349) (not x349)) (and (= x687 x1045) (= x1045 (x529 (x734 x341))) (= (< 0 x253) x349) (= (x350 (x734 x447)) x227) (< (+ x611 x227) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x227 x673)))) x892))))))) (=> (and (not x474) (= x614 x821)) x57))) (=> (not x162) x605))))) (=> x176 x605))))) (=> x319 x605))) (=> x471 x605))))) (=> (not x148) x605))))))) (=> (not x1014) x605))) (=> x929 x605))))))))))))))) (=> x78 x605))) x29))
(assert (= x340 (and x471 x895)))
(assert (x537 x28))
(assert (= (x20 (x734 x784)) x784))
(assert (x537 x998))
(assert (= x720 (and x467 (not x622))))
(assert (= (=> (= (= x623 0) x239) (and (=> (and (and (= x98 x853) (= 1 x863) (= x210 32) (= x201 x971) (= x430 x132) (= x839 x286) (= x191 x193) (= x764 (x81 1461501637330902918203684832716283019655932542975 x502))) (not x239)) x353) (=> x239 x605))) x937))
(assert (x537 x66))
(assert (x537 x11))
(assert (= x1056 (and x633 x309)))
(assert (x537 x191))
(assert (x537 x1018))
(assert (x328 x1073))
(assert (x537 x269))
(assert (= (or x1003 x296) x215))
(assert (=> (>= 10000 x447) (= (x734 x447) (x575 x447))))
(assert (x328 x613))
(assert (= (and x12 (not x573)) x796))
(assert (x537 x598))
(assert (x537 x165))
(assert (= 0 (x995 x884)))
(assert (x537 x862))
(assert (= (and (not x148) x445) x194))
(assert (= x55 (and x467 x622)))
(assert (x537 x496))
(assert (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x20 (x575 4739670319144124481003130557741556594755290868171975227769803894069435301888))))
(assert (= (and (not x960) x317) x445))
(assert (x537 x318))
(assert (= x403 (and x1051 x369)))
(assert (x537 x935))
(assert (x537 x384))
(assert (= (and x375 (not x167)) x407))
(assert (= x695 (and x661 (not x729))))
(assert (= x546 (and x247 x538)))
(assert (= x1037 (and x368 (not x209))))
(assert (x537 x784))
(assert (= (x734 64069044923792539370177021244577383457373632460708312080110356237917649633280) (x575 64069044923792539370177021244577383457373632460708312080110356237917649633280)))
(assert (x537 x243))
(assert (x130 x544))
(assert (x537 x727))
(assert (x537 x447))
(assert (= (x20 (x734 x502)) x502))
(assert (x537 x1032))
(assert (= (and (not x873) x785) x153))
(assert (= x535 (and (not x958) x910)))
(assert (x537 x877))
(assert (= (x995 256) 0))
(assert (=> (<= x234 10000) (= (x734 x234) (x575 x234))))
(assert (x328 x104))
(assert (= (=> (and (or (not x425) (and (= (x312 (+ x11 x1063)) x257) x425)) (= (> x1050 x11) x425)) x413) x789))
(assert (= (and x604 x850) x615))
(assert (= 0 (x934 x243)))
(assert (x130 x669))
(assert (x537 x50))
(assert (x537 x276))
(assert (x537 x913))
(assert (x537 x95))
(assert (x537 x392))
(assert (= (and x633 (not x309)) x607))
(assert (x537 x448))
(assert (x537 x430))
(assert (x328 x1039))
(assert (= (and x1054 x281) x665))
(assert (x537 x951))
(assert (x537 x776))
(assert (x537 x359))
(assert (= x632 (=> (and (= x726 (x312 (+ x954 96))) (= (not (> x315 128)) x362) (= x326 (x312 (+ x276 96))) (= x351 (x223 x726))) (and (=> (= x8 128) x134) x362))))
(assert (= 4076725131 (x20 (x575 4076725131))))
(assert (x537 x34))
(assert (x537 x1015))
(assert (= (and (not x638) x69) x93))
(assert (x537 x386))
(assert (= (x934 (x312 (+ x352 196))) 0))
(assert (x537 x984))
(assert (= (=> (and (= x433 (not (> x299 128))) (= (x568 256) x584) (= (x312 (+ x160 96)) x827)) (and x433 (=> (= x216 128) x647))) x966))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ (- x726 x954) x363) 196))) 0))
(assert (= (and x360 (not x489)) x782))
(assert (x537 x889))
(assert (x537 x265))
(assert (x537 x210))
(assert (x537 x334))
(assert (= x400 (or x427 x84)))
(assert (= x337 (and x757 (not x285))))
(assert (= (and (not x848) x115) x790))
(assert (x537 x1049))
(assert (x537 x501))
(assert (= 0 (x995 x335)))
(assert (= 2376452955 (x20 (x575 2376452955))))
(assert (x537 x745))
(assert (= x538 (and x294 (not x531))))
(assert (x537 x363))
(assert (x328 x1055))
(assert (= (=> (and (or (not x309) (and (= x382 (x312 (+ x598 x767))) x309)) (= (< x767 x1019) x309)) x794) x493))
(assert (= 0 (x934 (+ (x312 (+ x352 196)) (- (+ 196 (- x792 160)) 196)))))
(assert (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x20 (x575 64069044923792539370177021244577383457373632460708312080110356237917649633280))))
(assert (x537 x990))
(assert (x537 x157))
(assert (x537 x953))
(assert (= (and (not x1014) x205) x338))
(assert (= (x934 (+ (- x847 196) (x312 (+ x352 196)))) 0))
(assert (x537 x135))
(assert (x537 x2))
(assert (= (x734 75068239) (x575 75068239)))
(assert (= (and x181 x970) x1020))
(assert (= (x734 1245659826) (x575 1245659826)))
(assert (x537 x19))
(assert (x537 x1045))
(assert (= (and (not x650) x800) x567))
(assert (x130 x762))
(assert (x537 x907))
(assert (= x898 (=> (and (or (and (= x686 (x312 (+ x66 x717))) x460) (not x460)) (= (> x329 x66) x460)) x861)))
(assert (= x238 (and x894 x141)))
(assert (x537 x683))
(assert (=> (>= 10000 x502) (= (x734 x502) (x575 x502))))
(assert (= 18446744073709551615 (x20 (x575 18446744073709551615))))
(assert (= 0 (x825 (x23 x341 x218))))
(assert (x537 x301))
(assert (x537 x74))
(assert (= (and (not x319) x543) x141))
(assert (x537 x195))
(assert (x537 x56))
(assert (x537 x843))
(assert (x537 x625))
(assert (= x481 (and (not x267) x549)))
(assert (x537 x237))
(assert (x537 x522))
(assert (= (x734 2220280665) (x575 2220280665)))
(assert (x537 x208))
(assert (= (=> (and (or (and (not x365) (and (= x606 x253) (= x708 x550))) (and (and (= x737 x866) (= (x778 (x734 x447)) x53) (= x866 (x696 (x734 x341))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x866 x1001)) (= x708 x550) (= x65 x53) (= x606 x253) (= 0 x1001)) x365)) (= x365 (= 0 x253))) x508) x892))
(assert (x537 x495))
(assert (x537 x376))
(assert (x537 x351))
(assert (x537 x455))
(assert (x537 x563))
(assert (x537 x828))
(assert (x537 x1052))
(assert (= 79228162514264337593543950335 (x20 (x575 79228162514264337593543950335))))
(assert (= x678 (and x903 x1013)))
(assert (= (and x693 x1036) x634))
(assert (x537 x279))
(assert (= (x734 33582922474372145882413589741236248003507108108518759994751911431010219196416) (x575 33582922474372145882413589741236248003507108108518759994751911431010219196416)))
(assert (= (x934 (+ (- (+ (- x42 160) 196) 196) (x312 (+ x352 196)))) 0))
(assert (x537 x606))
(assert (x537 x884))
(assert (x537 x560))
(assert (x328 x594))
(assert (x537 x552))
(assert (= (=> (and (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x275) x496) (= x275 (x312 (+ x992 31))) (= (x1012 x854) x315) (= x879 (< 0 x315)) (= (x312 (+ x448 32)) x1062) (= x655 (x51 (- x653 x448))) (= (x312 (+ 32 x653)) x276) (= x653 (x312 (+ x554 x496)))) (and (=> (and (= x8 0) (not x879)) x134) (=> (and x879 (and (= x276 x63) (= x988 (x1023 x652)) (= (> x315 32) x119) (= x954 x652))) (and (=> (and (not x119) (= x8 32)) x134) (=> (and x119 (and (= (> x315 64) x267) (= (x682 x791) x711) (= (x312 (+ 32 x954)) x791) (= (x312 (+ 32 x276)) x658))) (and (=> (and (and (= (x25 x42) x498) (= (> x315 96) x500) (= x42 (x312 (+ 64 x954))) (= x19 (x312 (+ 64 x276)))) x267) (and (=> x500 x632) (=> (and (not x500) (= x8 96)) x134))) (=> (and (= x8 64) (not x267)) x134))))))) x532))
(assert (x130 x1055))
(assert (= (and x67 x955) x741))
(assert (= (x575 2376452955) (x734 2376452955)))
(assert (x537 x82))
(assert (x537 x283))
(assert (x537 x550))
(assert (= (and x761 (not x576)) x83))
(assert (= (=> (and (= (x312 (+ 96 x717)) x870) (= (x699 x243) x105) (= (not (> x66 128)) x591) (= (x312 (+ x404 96)) x243)) (and (=> (= x329 128) x898) x591)) x224))
(assert (x130 x811))
(assert (x537 x313))
(assert (= (x934 (+ (x312 (+ x352 196)) (- x283 196))) 0))
(assert (= (=> (and (= x386 (x51 (- x10 x821))) (= 96 x1047) (= x127 (> x299 0)) (= x683 (x51 (- x386 32))) (= (x312 (+ x11 x1063)) x10) (= (x123 128) x299) (= (x312 (+ 32 x111)) x160) (= (x312 (+ 96 x10)) x111)) (and (=> (and (and (= x160 x552) (= (x599 160) x736) (= x945 (< 32 x299))) x127) (and (=> (and (and (= x893 (x58 192)) (= x677 (x312 (+ x160 32))) (= x955 (< 64 x299))) x945) (and (=> (and (and (= x588 (x112 224)) (= (x312 (+ 64 x160)) x199) (= (< 96 x299) x1046)) x955) (and (=> (and (= 96 x216) (not x1046)) x647) (=> x1046 x966))) (=> (and (= 64 x216) (not x955)) x647))) (=> (and (not x945) (= x216 32)) x647))) (=> (and (= 0 x216) (not x127)) x647))) x413))
(assert (= (and x994 x680) x464))
(assert (= x785 (and x742 x474)))
(assert (= 0 (x934 (+ (x312 (+ 196 x352)) (- (+ 196 (- x884 160)) 196)))))
(assert (x537 x105))
(assert (x537 x381))
(assert (x537 x885))
(assert (= x35 (and x848 x115)))
(assert (x537 x822))
(assert (x537 x972))
(assert (x537 x293))
(assert (= (and x1068 (not x832)) x364))
(assert (x537 x345))
(assert (x537 x523))
(assert (x537 x708))
(assert (x537 x441))
(assert (x537 x166))
(assert (= (x934 (+ (- (+ x363 (- x269 x954)) 196) (x312 (+ 196 x352)))) 0))
(assert (x537 x275))
(assert (= (and (not x247) x538) x643))
(assert (= (x995 224) 0))
(assert (x537 x1062))
(assert (= (=> (= x912 (< 0 x606)) (and (=> (and (= x821 x1034) x912) x57) (=> (not x912) x605))) x73))
(assert (= x539 (and (not x970) x181)))
(assert (= (and (not x1021) x678) x841))
(assert (= (x575 1461501637330902918203684832716283019655932542975) (x734 1461501637330902918203684832716283019655932542975)))
(assert (x537 x44))
(assert (= 0 (x934 (+ (x312 (+ 196 x352)) 64))))
(assert (= (=> (and (or (not x273) x273) (= x273 (= x623 0))) x937) x344))
(assert (x537 x1057))
(assert (x537 x811))
(assert (= (x734 79228162514264337593543950335) (x575 79228162514264337593543950335)))
(assert (= (x575 2249206060) (x734 2249206060)))
(assert (= x668 (and x748 (not x590))))
(assert (x537 x788))
(assert (x537 x804))
(assert (x537 x357))
(assert (x537 x548))
(assert (x537 x755))
(assert (= (and (not x85) x217) x21))
(assert (x537 x476))
(assert (x537 x691))
(assert (x537 x637))
(assert (x328 x562))
(assert (= (and x638 x69) x997))
(assert (=> (<= x228 10000) (= (x575 x228) (x734 x228))))
(assert (= x229 (and x15 (not x987))))
(assert (= x31 (and x571 x900)))
(assert (= x117 (or x595 (and (not x273) x142))))
(assert (x537 x122))
(assert (= x693 (and x987 x15)))
(assert (= x356 (and (not x365) x59)))
(assert (x537 x545))
(assert (x537 x101))
(assert (= x371 (and x796 x169)))
(assert (= (or x1048 x371) x553))
(assert (= x45 (or x343 x17)))
(assert (x537 x928))
(assert (= (x575 54065695799311150304516525983669583430195215316752708547810291668471328538624) (x734 54065695799311150304516525983669583430195215316752708547810291668471328538624)))
(assert (x537 x401))
(assert (x537 x718))
(assert (= x760 (and (not x1013) x903)))
(assert (x537 x847))
(assert (x537 x658))
(assert (x537 x719))
(assert (x537 x586))
(assert (x537 x439))
(assert (= x635 (or x450 x70)))
(assert (= (and x1004 (not x646)) x70))
(assert (x537 x1002))
(assert (= (x575 3572374928) (x734 3572374928)))
(assert (x537 x614))
(assert (= (and x904 x929) x1065))
(assert (x537 x669))
(assert (= x1068 (and x797 x997)))
(assert (x537 x930))
(assert (x537 x940))
(assert (x537 x373))
(assert (= 0 (x298 (- x854 x165))))
(assert (= (=> (and (or (not x369) (and x369 (= (x312 (+ x554 x992)) x221))) (= (< x992 x967) x369)) x532) x203))
(assert (x537 x116))
(assert (x537 x740))
(assert (= (and (not x459) x420) x427))
(assert (= (=> (= (= 0 x656) x716) (and (=> x716 x605) (=> (and (not x716) (and (= (x312 (+ 3 x828)) x1063) (= (x962 x854) x11) (= x887 (> x11 0)) (= x705 (x312 (+ 32 x821))) (= (x312 (+ 32 x821)) x828))) (and (=> (and (= x1050 0) (not x887)) x789) (=> (and x887 (and (= x954 x792) (= (< 32 x11) x422) (= x43 x1063) (= (x962 x792) x520))) (and (=> (and x422 (and (= x884 (x312 (+ x954 32))) (= (< 64 x11) x167) (= (x706 x884) x485) (= x511 (x312 (+ x1063 32))))) (and (=> (and (and (= x269 (x312 (+ 64 x954))) (= (x457 x269) x756) (= (x312 (+ 64 x1063)) x838) (= x131 (> x11 96))) x167) (and (=> x131 x263) (=> (and (not x131) (= 96 x1050)) x789))) (=> (and (not x167) (= 64 x1050)) x789))) (=> (and (not x422) (= 32 x1050)) x789))))))) x305))
(assert (= (x20 (x575 1901074598)) 1901074598))
(assert (= (=> (and (= x230 (x312 (+ x659 32))) (= (x51 (- x519 x318)) x206) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1039) x184) (= x519 (x312 (+ x184 x717))) (= x489 (< 0 x772)) (= (x312 (+ x519 32)) x1015) (= x625 (x312 (+ x230 32))) (= x1039 (x312 (+ 31 x66)))) (and (=> (and (and (= (x312 (+ 32 x1015)) x692) (= x192 (x421 x1031)) (= (x312 (+ 32 x1031)) x545) (<= x192 1461501637330902918203684832716283019655932542975) (= (> x772 1) x807)) x489) (and (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x927) (= x848 (> x772 2)) (= x927 (x421 x545)) (= (x312 (+ x545 32)) x252) (= x745 (x312 (+ x692 32)))) x807) (and (=> (and x848 (and (= x26 (x312 (+ x745 32))) (= x463 (x421 x252)) (= (< 3 x772) x917) (= x237 (x312 (+ x252 32))) (>= 1461501637330902918203684832716283019655932542975 x463))) (and (=> (and (= x26 x940) (not x917)) x170) (=> x917 x557))) (=> (and (not x848) (= x745 x940)) x170))) (=> (and (not x807) (= x940 x692)) x170))) (=> (and (= x940 x1015) (not x489)) x170))) x861))
(assert (= (x934 (+ (x312 (+ 196 x352)) (- (+ x363 (- x652 x954)) 196))) 0))
(assert (x537 x303))
(assert (x537 x87))
(assert (= (and (not x1022) x816) x757))
(assert (= (=> (and (= (not (> x767 128)) x902) (= x1052 (x312 (+ 96 x598))) (= (x749 256) x304)) (and x902 (=> (= x1019 128) x493))) x824))
(assert (= (and (not x879) x580) x109))
(assert (x207 x811))
(assert (= (=> (and (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x562) x44) (= (x312 (+ 31 x299)) x562) (= (x312 (+ x160 x44)) x384) (= x556 (x312 (+ x10 32))) (= x306 (> x254 0)) (= x211 (x51 (- x384 x10))) (= (x454 x821) x254)) (and (=> (and (= (> x254 32) x638) x306) (and (=> (and (not x638) (= x202 32)) x730) (=> (and (= (> x254 64) x797) x638) (and (=> (and (= (> x254 96) x832) x797) (and (=> x832 x47) (=> (and (= 96 x202) (not x832)) x730))) (=> (and (= x202 64) (not x797)) x730))))) (=> (and (= x202 0) (not x306)) x730))) x743))
(assert (= x831 (and x1021 x678)))
(assert (x537 x18))
(assert (= (=> (and (>= 1461501637330902918203684832716283019655932542975 x913) (= x46 (x312 (+ 32 x26))) (= (x421 x237) x913) (= x266 (not (> x772 4)))) (and (=> (= x46 x940) x170) x266)) x557))
(assert (x537 x60))
(assert (x537 x232))
(assert (= (x575 102499615646744134772650717477688572466918151731817230690449879178893085114368) (x734 102499615646744134772650717477688572466918151731817230690449879178893085114368)))
(assert (= (and x118 x322) x320))
(assert (x537 x724))
(assert (x537 x184))
(assert (= (x575 832554005) (x734 832554005)))
(assert (= x739 (and x1022 x816)))
(assert (x537 x284))
(assert (x537 x944))
(assert (= (and x634 (not x235)) x627))
(assert (not x125))
(assert (x537 x1047))
(assert (= x212 (and x108 x449)))
(assert (x537 x814))
(assert (x537 x252))
(assert (= x712 (and x148 x445)))
(assert (x130 x819))
(assert (x537 x767))
(assert (x537 x996))
(assert (= (x20 (x575 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (= x277 (=> (= (> x621 0) x302) (and (=> (not x302) x605) (=> x302 x968)))))
(assert (x537 x870))
(assert (= (=> (and (<= 0 x740) (>= 255 x740) (< x740 256) (= (= 0 x740) x881)) (and (=> (and (and (> 1461501637330902918203684832716283019655932542976 x971) (= (x408 (x734 x502)) x102) (< x804 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x515 x1009) (= (x1 (x734 x341)) x90) (>= 1461501637330902918203684832716283019655932542975 x971) (= x561 x102) (= x218 (x175 (x734 x341))) (= x804 (x642 (x734 x502))) (= (x81 1461501637330902918203684832716283019655932542975 x502) x810) (= x388 (= x82 x515)) x388 (= x502 x82) (< (+ x718 x90) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x781 (x734 x341)) x94) (= x570 x94) (>= x971 0) (= (= 0 x810) x900) (= 0 x718) (= (x23 x341 x218) x502)) x881) (and (=> x900 x605) (=> (and (not x900) (and (< x191 1461501637330902918203684832716283019655932542976) (= x448 (x312 (+ 4 x821))) (> 1461501637330902918203684832716283019655932542976 x98) (<= x286 1461501637330902918203684832716283019655932542975) (= (x312 (+ 32 x293)) x554) (> 1461501637330902918203684832716283019655932542976 x286) (= x987 (> x992 0)) (= x293 (x312 (+ 192 x448))) (<= x191 1461501637330902918203684832716283019655932542975) (= (x361 128) x992) (>= x98 0) (>= 1461501637330902918203684832716283019655932542975 x132) (>= x286 0) (> 1461501637330902918203684832716283019655932542976 x132) (>= x191 0) (= x228 (x81 1461501637330902918203684832716283019655932542975 x502)) (<= x98 1461501637330902918203684832716283019655932542975) (>= x132 0))) (and (=> (and (= x967 0) (not x987)) x203) (=> (and (and (= x1036 (> x992 32)) (= (x744 160) x1057) (= x776 x554)) x987) (and (=> (and (and (= (> x992 64) x235) (= x732 (x312 (+ x554 32))) (= x477 (x965 192))) x1036) (and (=> (and (and (= (> x992 96) x700) (= x1033 (x312 (+ x554 64))) (= x458 (x874 224))) x235) (and (=> x700 x938) (=> (and (= x967 96) (not x700)) x203))) (=> (and (not x235) (= 64 x967)) x203))) (=> (and (= 32 x967) (not x1036)) x203))))))) (=> (not x881) x605))) x57))
(assert (x537 x264))
(assert (x537 x805))
(assert (= (x734 4294967296) (x575 4294967296)))
(assert (= x260 (or x948 x608 x342 x600 x219 x601 x21 x107 x527 x174 x379 x153 x68 x31 x890 x681 x338 x1065 x340 x255 x336 x288 x473 x535 x739 x798 x723 x1072 x194 x713 x615 x654 x505 x55 x684)))
(assert (= 0 (x298 (- 128 x165))))
(assert (x537 x1033))
(assert (= (and x666 x716) x68))
(assert (= x12 (or x663 x880)))
(assert (x537 x959))
(assert (= x583 (and x35 (not x917))))
(assert (= (and x176 x238) x798))
(assert (= x67 (and x574 x945)))
(assert (x537 x221))
(assert (x537 x397))
(assert (x537 x103))
(assert (= (x575 113209349505197351213641468582317386984598294884268236158119619414039440916480) (x734 113209349505197351213641468582317386984598294884268236158119619414039440916480)))
(assert (x537 x311))
(assert (x537 x458))
(assert (x537 x834))
(assert (x130 x179))
(assert (= (and x489 x360) x747))
(assert (x537 x149))
(assert (x537 x79))
(assert (x537 x692))
(assert (x130 x562))
(assert (x537 x651))
(assert (x537 x597))
(assert (x130 x502))
(assert (x537 x517))
(assert (x537 x556))
(assert (x537 x808))
(assert (=> (>= 10000 x287) (= (x734 x287) (x575 x287))))
(assert (= x294 true))
(assert (x537 x440))
(assert (x537 x855))
(assert (= (x298 (- x791 x165)) 0))
(assert (= (x734 4199168155) (x575 4199168155)))
(assert (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x20 (x575 62805084655870755976952745400290271510621614971557940054860603637793562820608))))
(assert (x537 x1008))
(assert (x537 x417))
(assert (x537 x156))
(assert (x537 x1005))
(assert (= x360 (or x128 x999)))
(assert (= (and (not x369) x1051) x943))
(assert (x537 x629))
(assert (= 1262878978 (x20 (x575 1262878978))))
(assert (x537 x372))
(assert (= 0 (x934 (+ 96 (x312 (+ x352 196))))))
(assert (x537 x704))
(assert (x537 x838))
(assert (x537 x677))
(assert (x537 x192))
(assert (x130 x657))
(assert (x537 x282))
(assert (x537 x102))
(assert (x537 x416))
(assert (x537 x488))
(assert (= 1553423035 (x20 (x575 1553423035))))
(assert (= (and (not x121) x546) x815))
(assert (= (x734 2329570063) (x575 2329570063)))
(assert (x537 x908))
(assert (x537 x395))
(assert (= x903 (and x258 x980)))
(assert (= x125 (=> (and (>= 1461501637330902918203684832716283019655932542975 x952) (>= 1461501637330902918203684832716283019655932542975 x855) (>= x618 0) (<= 0 x242) (= (> (x38 (x734 x341)) 0) x1053) (<= x14 255) (>= x222 0) (= x86 x234) (<= 0 x855) (<= 0 x626) (<= x581 1461501637330902918203684832716283019655932542975) (<= x715 1461501637330902918203684832716283019655932542975) (= x487 x626) (<= x536 255) (>= 1461501637330902918203684832716283019655932542975 x530) (>= 1461501637330902918203684832716283019655932542975 x341) (>= 1461501637330902918203684832716283019655932542975 x116) (not (= x341 x370)) (<= x86 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x191) (<= 0 x132) x1053 (<= 0 x715) (>= x116 0) (<= x370 1461501637330902918203684832716283019655932542975) (<= x98 1461501637330902918203684832716283019655932542975) (= false x297) (< 0 x370) (<= 0 x191) (<= 0 x971) (< x234 1461501637330902918203684832716283019655932542976) (>= 255 x415) (= x829 (< 0 (x38 (x734 x370)))) (= false x159) (>= 1461501637330902918203684832716283019655932542975 x154) (>= 1461501637330902918203684832716283019655932542975 x1042) (>= x581 0) (>= 1461501637330902918203684832716283019655932542975 x572) (= (x1060 (x734 x341)) x248) x829 (<= x740 255) (= (< x773 x95) x531) (>= x373 0) (= (= x234 0) x565) (= x316 false) (< 0 x341) (= x225 1262878978) (= 5 x878) (>= x86 0) (<= 0 x572) (<= 0 x536) (<= 0 x1042) (<= 0 x154) (= true x256) (or x565 x452) (>= x248 0) (= x452 (> x234 0)) (>= 255 x242) (>= 255 x597) (>= x952 0) (<= 0 x740) (>= 1461501637330902918203684832716283019655932542975 x182) (>= x98 0) (<= 0 x875) (<= x886 1461501637330902918203684832716283019655932542975) (<= 0 x886) (>= 1461501637330902918203684832716283019655932542975 x626) (>= 1461501637330902918203684832716283019655932542975 x286) (<= x373 255) (<= 0 x286) (>= 79228162514264337593543950335 x930) (<= x971 1461501637330902918203684832716283019655932542975) (<= x132 1461501637330902918203684832716283019655932542975) (>= x923 0) (<= 0 x14) (= (x1060 (x734 x370)) x875) (<= 0 x415) (>= 255 x923) (>= x530 0) (>= 1461501637330902918203684832716283019655932542975 x618) (<= 0 x182) (<= 0 x930) (= x773 (x1060 (x734 x234))) (>= 1461501637330902918203684832716283019655932542975 x222) (<= 0 x597)) (and (=> (and (not x531) (and (= x247 (> x767 0)) (= (x312 (+ x991 32)) x1040) (= x767 (x96 128)) (= (x312 (+ 4 x984)) x991) (not (< x5 x245)) (= x786 x891) (= x891 x56) (= (x1060 (x734 x234)) x197) (= x183 (x312 (+ x265 4))) (= (or x888 x396) x915) (>= 1461501637330902918203684832716283019655932542975 x327) (= x245 (x312 (+ x628 x1040))) (= (mod (* 32 x772) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x461) (= x357 (x312 (+ x555 4))) (= (x38 (x734 x341)) x783) (= (x312 (+ x675 32)) x727) (= (x312 (+ 31 x284)) x501) (= x401 (ite x133 1 0)) (= x303 (x312 (+ 32 x334))) (not (< 18446744073709551615 x376)) (= x864 (x51 (- x5 4))) (<= 0 x13) (= (ite x915 1 0) x1016) (>= 1461501637330902918203684832716283019655932542975 x843) (= (x312 (+ x628 31)) x104) (not (> x990 x5)) (= x396 (> x755 18446744073709551615)) (or (and (< x106 x5) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x106) (<= x5 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x5) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x106))) (= (x312 (+ 4 x476)) x284) (= x1031 (x312 (+ x284 32))) (= x352 (x312 (+ x755 x157))) (= x675 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x762)) (= x476 x721) (= x1044 x981) (= x135 x555) (= x755 (x312 (+ 128 x1018))) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x669) x157) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x501) (<= x5 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x501 x5)) (and (> x501 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x5 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x412 (x312 (+ x461 x1031))) (not (< 18446744073709551615 x628)) (= x914 (x421 x357)) (= x311 (x312 (+ x991 31))) (= x149 (x312 (+ 32 x183))) (= (x421 x284) x772) (= 0 x1016) (= x691 (x312 (+ 31 x727))) (not (> x964 x5)) (= (x421 x991) x628) (= x918 (x312 (+ x72 x95))) (not (= 1245659826 x925)) (>= x843 0) (= x844 x984) (= (x312 (+ x755 32)) x404) (< x925 2220280665) (= x133 (or x809 x769)) (>= 1461501637330902918203684832716283019655932542975 x13) (not (> x412 x5)) (= (x312 (+ 4 x352)) x318) (or (and (> x5 x311) (= (<= x5 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x311))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x5) (> x311 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x5 163) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x5) true)) (= x327 x234) (= x483 (x312 (+ 32 x357))) (= x990 (x312 (+ x301 x483))) (not (< 18446744073709551615 x914)) (<= 0 x327) (= (x472 (x734 x341)) x72) (= x376 (x421 x183)) (> x783 0) (= x809 (> x352 18446744073709551615)) (= (mod (* 32 x914) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x72 x244)) (not (< x5 4)) (= (< x755 128) x888) (= x13 x1044) (= x54 (x312 (+ x376 160))) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x864)) (> 160 x864)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x864))) (= (x312 (+ x357 31)) x406) (not (< x925 1245659826)) (= (x312 (+ 31 x376)) x762) (= x95 x244) (= (- x197 x95) x701) (not (< 18446744073709551615 x418)) (= (x312 (+ 31 x183)) x106) (= x998 x234) (= (x312 (+ x318 160)) x126) (= x769 (> x755 x352)) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x104) x334) (= x401 0) (not (> x844 18446744073709551615)) (= x834 (x312 (+ x628 x404))) (or (and (> x5 x406) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x5) (<= x406 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (<= x5 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x406 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x964 (x312 (+ x376 x149))) (= 1262878978 x925) (= x265 x418) (not (< 18446744073709551615 x772)) (not (> x135 18446744073709551615)) (not (< 18446744073709551615 x721)) (= x598 (x312 (+ x126 32))) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x691) x1018) (= (x312 (+ x303 31)) x669))) (and (=> (and (and (= x837 x598) (= (x858 160) x533) (= x121 (< 32 x767))) x247) (and (=> (and (not x121) (= x1019 32)) x493) (=> (and x121 (and (= x16 (< 64 x767)) (= x261 (x312 (+ x598 32))) (= (x61 192) x795))) (and (=> (and (and (= (< 96 x767) x449) (= (x722 224) x439) (= x233 (x312 (+ x598 64)))) x16) (and (=> x449 x824) (=> (and (= 96 x1019) (not x449)) x493))) (=> (and (= 64 x1019) (not x16)) x493))))) (=> (and (= x1019 0) (not x247)) x493))) (=> (and x531 (and (= x896 x971) (= true x787) (= x286 x168) (= x132 x822) (= x191 x714) (= x74 x98) (= false x802))) x323)))))
(assert (x537 x859))
(assert (= 0 (x934 (+ (- (+ 196 (- x335 160)) 196) (x312 (+ 196 x352))))))
(assert (= (and (not x449) x108) x1007))
(assert (= (=> (and (= x201 x971) (= x132 x430) (= x193 x191) (= x98 x853) (= x210 x704) (= x286 x839) (= 0 x863)) x353) x605))
(assert (x537 x611))
(assert (= x728 (and x349 x869)))
(assert (x537 x1039))
(assert (= x816 (and x85 x217)))
(assert (= 0 (x934 (+ (- (+ (- 224 x954) x363) 196) (x312 (+ 196 x352))))))
(assert (= x343 (and (not x474) x742)))
(assert (= x331 (and (not x127) x985)))
(assert (= (x20 (x575 22445611572322667099362401052093617030957452505749565894135597532943828910080)) 22445611572322667099362401052093617030957452505749565894135597532943828910080))
(assert (x537 x624))
(assert (= (x575 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x734 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x985 (or x1024 x779)))
(assert (x537 x1031))
(assert (= 2329570063 (x20 (x575 2329570063))))
(assert (= (and x280 (not x969)) x151))
(assert (x537 x231))
(assert (= (and x178 x695) x620))
(assert (= (x575 2005408114) (x734 2005408114)))
(assert (x537 x136))
(assert (x537 x982))
(assert (x537 x991))
(assert (= (and x306 x215) x69))
(assert (= (and x469 x259) x600))
(assert (x537 x946))
(assert (x537 x1042))
(assert (= x368 (or x1020 x539)))
(assert (x537 x404))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ x363 (- x42 x954)) 196))) 0))
(assert (x130 x691))
(assert (= x647 (=> (and (= x645 (> x216 x299)) (or (and x645 (= x1067 (x312 (+ x299 x160)))) (not x645))) x743)))
(assert (x537 x43))
(assert (= x1070 (=> (and (= (= 0 x656) x921) (or (not x921) x921)) x305)))
(assert (= x59 (or x833 x728)))
(assert (x537 x511))
(assert (x537 x672))
(assert (x537 x233))
(assert (= 0 (x934 x264)))
(assert (= (x734 3084411429) (x575 3084411429)))
(assert (= x1061 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x518) (= x763 (x312 (+ x71 x352))) (= (x312 (+ 31 x210)) x544) (= x71 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x544)) (= (x187 x352) x518) (not (= 0 x863)) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x210)) (< x210 32)) (> x210 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (< 0 x933) x710)) (or (and x710 (and (> 4294967296 x366) (= x951 1))) (and (not x710) (= x933 x951)))) x750)))
(assert (x537 x418))
(assert (= (x20 (x575 832554005)) 832554005))
(assert (x537 x257))
(assert (x537 x705))
(assert (x537 x1067))
(assert (x537 x216))
(assert (= (x934 x637) 0))
(assert (= (x20 (x575 1245659826)) 1245659826))
(assert (x537 x377))
(assert (x537 x886))
(assert (= x278 (and x131 x1058)))
(assert (x537 x482))
(assert (= x942 (or x922 x37)))
(assert (x537 x631))
(assert (= x164 (=> (and (or x419 (not x419)) (= x419 (= x492 0))) x277)))
(assert (x537 x827))
(assert (= (and x127 x985) x574))
(assert (x537 x54))
(assert (x537 x564))
(assert (x537 x227))
(assert (x537 x147))
(assert (= (and x33 (not x52)) x880))
(assert (x328 x179))
(assert (x537 x659))
(assert (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x20 (x575 33582922474372145882413589741236248003507108108518759994751911431010219196416))))
(assert (= x198 (and x281 (not x1054))))
(assert (x537 x503))
(assert (x537 x168))
(assert (= x730 (=> (and (= x970 (< x254 x202)) (or (not x970) x970)) x506)))
(assert (= (x575 3705713892) (x734 3705713892)))
(assert (x537 x32))
(assert (x537 x507))
(assert (x537 x906))
(assert (= (=> (and (= (x38 (x734 x228)) x589) (= (x312 (+ 32 x324)) x551) (= x324 (x312 (+ 32 x1062))) (= x973 (x312 (+ x1038 32))) (= x1038 (x312 (+ 32 x551))) (= (= x589 0) x573)) (and (=> x573 x605) (=> (and (and (= x169 (> x656 0)) (or (not x169) (and x169 (and (= x2 (x1064 (x734 x228))) (= x541 (>= (x540 (x734 x341)) x877)) (> 4294967296 x41) x541 x124 (= (= (x540 (x734 x228)) x2) x124) (= (x1064 (x734 x341)) x877))))) (not x573)) x1070))) x766))
(assert (x130 x275))
(assert (= 0 (x934 (+ (- (+ x363 (- 192 x954)) 196) (x312 (+ x352 196))))))
(assert (= (and (not x138) x337) x473))
(assert (= (x934 (+ (- x1005 196) (x312 (+ 196 x352)))) 0))
(assert (x537 x94))
(assert (= (or x826 x109 x80 x905 x481) x33))
(assert (x537 x914))
(assert (x537 x993))
(assert (x537 x218))
(assert (x537 x783))
(assert (= x601 (and x270 (not x602))))
(assert (x537 x1001))
(assert (= x968 (=> (= (not (< 1 x122)) x593) (and x670 x593))))
(assert (= x608 (and x1059 x78)))
(assert (x537 x518))
(assert (= (and x969 x280) x869))
(assert (= x263 (=> (and (= (x1027 x335) x560) (= x335 (x312 (+ 96 x954))) (= (x312 (+ x1063 96)) x395) (= (not (< 128 x11)) x909)) (and (=> (= 128 x1050) x789) x909))))
(assert (= (x20 (x575 113209349505197351213641468582317386984598294884268236158119619414039440916480)) 113209349505197351213641468582317386984598294884268236158119619414039440916480))
(assert (= x666 (or x1041 (and x553 (not x921)))))
(assert (= (x995 x791) 0))
(assert (= x742 (and x720 x162)))
(assert (= x948 (and x757 x285)))
(assert (= 0 (x934 (+ (- (+ (- x335 x954) x363) 196) (x312 (+ 196 x352))))))
(assert (= (and x119 x989) x549))
(assert (x537 x160))
(assert (= 0 (x934 (+ (x312 (+ 196 x352)) (- x690 196)))))
(assert (x537 x163))
(assert (x537 x382))
(assert (x537 x286))
(assert (x537 x737))
(assert (x537 x1050))
(assert (x537 x664))
(assert (= (x934 (+ (- x517 196) (x312 (+ 196 x352)))) 0))
(assert (x537 x327))
(assert (x537 x1063))
(assert (= (and (not x881) x45) x527))
(assert (x537 x626))
(assert (= (x20 (x575 3572374928)) 3572374928))
(assert (= x120 (or x607 x1056)))
(assert (x537 x772))
(assert (= 0 (x934 256)))
(assert (= x80 (and (not x119) x989)))
(assert (x537 x98))
(assert (x537 x967))
(assert (x537 x72))
(assert (x130 x1073))
(assert (x537 x839))
(assert (x537 x487))
(assert (x537 x429))
(assert (= (and (not x131) x1058) x577))
(assert (x537 x394))
(assert (= x355 (and x484 (not x521))))
(assert (= (x734 4739670319144124481003130557741556594755290868171975227769803894069435301888) (x575 4739670319144124481003130557741556594755290868171975227769803894069435301888)))
(assert (= (and x314 x320) x748))
(assert (x537 x424))
(assert (= (x995 x42) 0))
(assert (x328 x544))
(assert (x130 x39))
(assert (x537 x461))
(assert (= (and x268 x446) x152))
(assert (= (and x553 x921) x1041))
(assert (= (x575 18446744073709551615) (x734 18446744073709551615)))
(assert (= (x20 (x734 x287)) x287))
(assert (x537 x41))
(assert (= (x298 (- x269 x165)) 0))
(assert (x537 x878))
(assert (x537 x821))
(assert (= (and x3 (not x419)) x922))
(assert (x537 x173))
(assert (= x713 (and x543 x319)))
(assert (x537 x1043))
(assert (x537 x186))
(assert (=> (<= x370 10000) (= (x734 x370) (x575 x370))))
(assert (x537 x986))
(assert (= (x20 (x575 3084411429)) 3084411429))
(assert (x328 x691))
(assert (x537 x111))
(assert (x537 x485))
(assert (x537 x515))
(assert (x537 x480))
(assert (x537 x603))
(assert (x537 x1069))
(assert (=> (<= x341 10000) (= (x734 x341) (x575 x341))))
(assert (= (and x590 x748) x107))
(assert (= (and x322 (not x118)) x288))
(assert (x537 x398))
(assert (= x731 (=> (and (or (not x932) x932) (= (= x621 0) x932)) x164)))
(assert (= 0 (x934 (+ (x312 (+ 196 x352)) (- (+ (- x726 160) 196) 196)))))
(assert (x537 x933))
(assert (x537 x90))
(assert (x537 x592))
(assert (x537 x896))
(assert (x537 x952))
(assert (x130 x885))
(assert (= x989 (and x580 x879)))
(assert (= (and x942 x302) x679))
(assert (= x633 (or x643 x212 x815 x75 x1007)))
(assert (x537 x612))
(assert (x537 x1040))
(assert (= x375 (and x422 x516)))
(assert (x537 x589))
(assert (x537 x588))
(assert (= (and x668 x856) x505))
(assert (x537 x177))
(assert (x537 x497))
(assert (= x307 (and (not x239) x117)))
(assert (x537 x554))
(assert (= x750 (=> (and (and (= (x644 x763) x290) (= x650 (> x957 0)) (not (= 0 x951)) (not (or (and (= true (<= x366 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x366)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x366))) (= x735 (x312 (+ x763 x437))) (= (x312 (+ 31 x366)) x1055) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1055) x437) (>= 1461501637330902918203684832716283019655932542975 x290)) (or (and (= x503 x957) (not x650)) (and (and (< x392 4294967296) (= x503 1)) x650))) x22)))
(assert (x537 x1034))
(assert (x537 x653))
(assert (x537 x992))
(assert (x537 x329))
(assert (= x379 (and x117 x239)))
(assert (x537 x533))
(assert (x537 x901))
(assert (x537 x26))
(assert (x537 x721))
(assert (x537 x190))
(assert (= x817 (and (not x945) x574)))
(assert (= (and x576 x761) x694))
(assert (x240 x784))
(assert (= (and x883 x425) x1024))
(assert (x328 x669))
(assert (x537 x1009))
(assert (= x181 (or x364 x48 x1030 x596 x93)))
(assert (x537 x947))
(assert (x537 x13))
(assert (x537 x352))
(assert (= (and x960 x317) x654))
(assert (x537 x14))
(assert (= (x934 (+ (- (+ x363 (- x854 x954)) 196) (x312 (+ 196 x352)))) 0))
(assert (x537 x438))
(assert (= x462 (and x35 x917)))
(assert (x328 x657))
(assert (= 0 (x995 x269)))
(assert (x537 x202))
(assert (= 75068239 (x20 (x575 75068239))))
(assert (x537 x380))
(assert (x537 x39))
(assert (x537 x957))
(assert (x537 x866))
(assert (x537 x762))
(assert (x537 x251))
(assert (x537 x735))
(assert (= x994 (or x665 x198)))
(assert (x537 x324))
(assert (= (x934 (+ (x312 (+ 196 x352)) (- (+ x363 (- 128 x954)) 196))) 0))
(assert (= x17 (and x912 x1029)))
(assert (= (and x419 x3) x37))
(assert (x537 x581))
(assert (= x484 (or x462 x583 x790 x812 x782)))
(assert (= (and x994 (not x680)) x582))
(assert (x537 x711))
(assert (x537 x182))
(assert (x537 x246))
(assert (= (x575 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x734 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x537 x289))
(assert (= x1030 (and x832 x1068)))
(assert (= x833 (and x869 (not x349))))
(assert (x537 x335))
(assert (= x890 (and x12 x573)))
(assert (= (and x904 (not x929)) x205))
(assert (= x255 (and x942 (not x302))))
(assert (= (and x910 x958) x850))
(assert (x537 x927))
(assert (x328 x762))
(assert (= x423 (and x765 x6)))
(assert (x537 x244))
(assert (x537 x673))
(assert (x537 x616))
(assert (x537 x245))
(assert (x537 x621))
(assert (x537 x572))
(assert (x537 x618))
(assert (x537 x129))
(assert (x537 x795))
(assert (x537 x477))
(assert (x537 x726))
(assert (x537 x973))
(assert (= (x20 (x575 818759841)) 818759841))
(assert (x537 x230))
(assert (= x323 (=> (and (and (and (= (= x146 x50) x249) (= x50 x475)) (and (>= x896 0) (>= 1461501637330902918203684832716283019655932542975 x896) (= x859 x146) (= x180 (x38 (x734 x341))) (< 0 x180) (= 75068239 x345) (> 1245659826 x345) (< x345 2220280665) (= x896 x475) (> 1461501637330902918203684832716283019655932542976 x896))) (and (< 0 x188) (< x823 1245659826) (> 2220280665 x823) (> 1461501637330902918203684832716283019655932542976 x971) (>= 1461501637330902918203684832716283019655932542975 x971) (= x823 75068239) (>= x971 0) (= (x38 (x734 x341)) x188) (= x859 x971) (not x787) (not x802))) (and x249 (=> (and (and (and (= x497 x74) (= x313 (x38 (x734 x341))) (<= x74 1461501637330902918203684832716283019655932542975) (= x752 832554005) (= x585 x279) (< x74 1461501637330902918203684832716283019655932542976) (< x752 2220280665) (<= 0 x74) (not (= 818759841 x752)) (not (= x752 75068239)) (< 0 x313) (< x752 1245659826)) (and (= x1025 (= x348 x585)) (= x348 x497))) (and (> x624 0) (= x98 x279) (not (= x603 75068239)) (< x603 1245659826) (= x624 (x38 (x734 x341))) (< x603 2220280665) (not (= 818759841 x603)) (>= x98 0) (> 1461501637330902918203684832716283019655932542976 x98) (<= x98 1461501637330902918203684832716283019655932542975) (= 832554005 x603))) (and x1025 (=> (and (and (<= x286 1461501637330902918203684832716283019655932542975) (= x286 x195) (= x944 (x38 (x734 x341))) (not (< x147 1245659826)) (>= x286 0) (> x944 0) (= x147 1245659826) (< x286 1461501637330902918203684832716283019655932542976) (< x147 2220280665)) (and (and (= (= x1032 x587) x64) (= x587 x775)) (and (< x168 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x168) (= 1245659826 x359) (= x563 (x38 (x734 x341))) (< 0 x563) (= x168 x775) (<= 0 x168) (not (> 1245659826 x359)) (< x359 2220280665) (= x195 x1032)))) (and (=> (and (and (and (= x429 (x38 (x734 x341))) (not (< x156 3084411429)) (not (= x156 3705713892)) (> 1461501637330902918203684832716283019655932542976 x822) (< 0 x429) (not (< x156 2220280665)) (not (= x156 4076725131)) (= x129 x18) (= 4199168155 x156) (<= 0 x822) (>= 1461501637330902918203684832716283019655932542975 x822) (= x876 x822) (not (= 3084411429 x156)) (not (= 3572374928 x156))) (and (= (= x231 x129) x835) (= x876 x231))) (and (not (= 3084411429 x901)) (not (> 3084411429 x901)) (= x132 x18) (= 4199168155 x901) (= x87 (x38 (x734 x341))) (not (= x901 4076725131)) (> x87 0) (not (< x901 2220280665)) (not (= 3705713892 x901)) (not (= x901 3572374928)) (> 1461501637330902918203684832716283019655932542976 x132) (>= x132 0) (>= 1461501637330902918203684832716283019655932542975 x132))) (and x835 (=> (and (and (and (= x428 (= x482 x49)) (= x49 x300)) (and (< x139 3084411429) (not (= x139 2220280665)) (not (> 2220280665 x139)) (<= x714 1461501637330902918203684832716283019655932542975) (not (= x139 2249206060)) (= x949 x482) (= x139 2329570063) (= x300 x714) (= (x38 (x734 x341)) x346) (< 0 x346) (<= 0 x714) (> 1461501637330902918203684832716283019655932542976 x714))) (and (not (< x709 2220280665)) (not (= 2249206060 x709)) (> 1461501637330902918203684832716283019655932542976 x191) (= 2329570063 x709) (= x949 x191) (not (= 2220280665 x709)) (<= 0 x191) (> 3084411429 x709) (= (x38 (x734 x341)) x961) (> x961 0) (<= x191 1461501637330902918203684832716283019655932542975))) x428))) x64))))))))
(assert (= (x575 1553423035) (x734 1553423035)))
(assert (= x75 (and x978 (not x16))))
(assert (= (x20 (x575 3705713892)) 3705713892))
(assert (x537 x559))
(assert (= x516 (and x698 x887)))
(assert (= (x934 (+ (- (+ 196 (- x269 160)) 196) (x312 (+ x352 196)))) 0))
(assert (x537 x206))
(assert (x537 x405))
(assert (x537 x242))
(assert (x537 x525))
(assert (x537 x675))
(assert (= (and x267 x549) x453))
(assert (= x1003 (and (not x645) x919)))
(assert (= x818 (=> (and (and (<= x830 1461501637330902918203684832716283019655932542975) (= (x610 x860) x830) (= x646 (< 0 x950)) (not (= x559 0)) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x885) x441) (= (x312 (+ x441 x860)) x103) (not (or (and (= (<= x959 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x959)) (> x959 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x885 (x312 (+ x959 31)))) (or (and (not x646) (= x993 x950)) (and (and (= x993 1) (< x808 4294967296)) x646))) x171)))
(assert (= 0 (x934 (+ (x312 (+ 196 x352)) (- x333 196)))))
(assert (= (x575 22445611572322667099362401052093617030957452505749565894135597532943828910080) (x734 22445611572322667099362401052093617030957452505749565894135597532943828910080)))
(assert (x537 x864))
(assert (= x336 (and x1029 (not x912))))
(assert (x537 x954))
(assert (= x956 (or x760 x831 x841 x648 x882)))
(assert (= x905 (and x453 (not x500))))
(assert (= 0 (x995 x652)))
(assert (= (x298 (- 224 x165)) 0))
(assert (x537 x300))
(assert (= (x298 (- 192 x165)) 0))
(assert (x537 x437))
(assert (x240 x341))
(assert (x537 x844))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ (- 160 x954) x363) 196))) 0))
(assert (x537 x594))
(assert (= (and (not x176) x238) x467))
(assert (= x234 (x20 (x734 x234))))
(assert (= x514 (and x294 x531)))
(assert (x537 x623))
(assert (x130 1461501637330902918203684832716283019655932542975))
(assert (x537 x579))
(assert (x328 x79))
(assert (= x904 (and x337 x138)))
(assert (x537 x732))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ 196 (- x652 160)) 196))) 0))
(assert (= (and x516 (not x422)) x926))
(assert (= (=> (= x209 (> x122 0)) (and (=> (and x209 (= (> x122 0) x446)) (and (=> (and x446 (and (= x166 x283) (= x662 (= x287 x636)) (= x636 (x81 1461501637330902918203684832716283019655932542975 x287)) (= (x799 x283) x287))) (and (=> (and (= (> x935 0) x118) x662) (and (=> (not x118) x605) (=> (and (and (= x417 (x799 x333)) (= (or (and (> x495 x417) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x417) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x495))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x495) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x417))) x314) (= x513 x333) (= x548 (x51 (- x972 x513))) (= x495 (x51 (- x548 31)))) x118) (and (=> (not x314) x605) (=> (and x314 (and (= x1005 (x312 (+ x417 x513))) (= (> x380 18446744073709551615) x590) (= (x799 x1005) x380))) (and (=> (and (and (= (x312 (+ x1005 32)) x91) (= x1043 (x51 (- x972 x380))) (= (or (and (> x1043 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x91 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x91 x1043) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1043) (<= x91 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x856)) (not x590)) (and (=> (and (and (= x459 (> x621 0)) (or (not x459) (and (and (> 4294967296 x492) (= (<= x564 (x411 (x734 x341))) x806) x468 x806 (= (x867 (x734 x287)) x640) (= x468 (= x640 (x411 (x734 x287)))) (= x564 (x867 (x734 x341)))) x459))) (not x856)) x731) (=> x856 x605))) (=> x590 x605))))))) (=> (not x662) x605))) (=> (not x446) x605))) (=> (not x209) x670))) x506))
(assert (x537 x201))
(assert (= x99 (and x137 (not x700))))
(assert (= (and x320 (not x314)) x219))
(assert (x537 x346))
(assert (x537 x197))
(assert (= (x575 62805084655870755976952745400290271510621614971557940054860603637793562820608) (x734 62805084655870755976952745400290271510621614971557940054860603637793562820608)))
(assert (x537 x619))
(assert (x537 x587))
(assert (x537 x53))
(assert (= 0 (x298 (- x726 x165))))
(assert (x537 x513))
(assert (= 4294967296 (x20 (x575 4294967296))))
(assert (= x414 (=> (and (= (x312 (+ 31 x185)) x594) (= (not (> x914 1)) x155) (= (x312 (+ x9 32)) x405) (= (x312 (+ x566 x483)) x32) (= x566 (x421 x483)) (or (and (> x865 x566) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x566) (<= x865 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (<= x865 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x566))) (not (or (and (< x724 x946) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x946) (<= x724 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x724) (<= x946 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x372 (x312 (+ x405 x185))) (= x946 (x312 (+ x32 32))) (= x953 (x51 (- x5 x483))) (= x865 (x51 (- x953 31))) (= (x421 x32) x185) (= x34 x451) (= (x51 (- x5 x185)) x724) (= x1069 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x594)) (= (x312 (+ x1069 x405)) x651) (not (> x185 18446744073709551615))) (and (=> (= x651 x814) x29) x155))))
(assert (= (and x956 x460) x999))
(assert (x537 x544))
(assert (x240 x447))
(assert (= (and x152 (not x662)) x723))
(assert (x537 x656))
(assert (x537 x415))
(assert (x240 x502))
(assert (= x258 (and x120 x89)))
(assert (= 0 (x298 (- 256 x165))))
(assert (x537 x463))
(assert (x537 x923))
(assert (= (and (not x162) x720) x1072))
(assert (x537 x640))
(assert (= x571 (and x45 x881)))
(assert (= (x20 (x575 2220280665)) 2220280665))
(assert (= 2005408114 (x20 (x575 2005408114))))
(assert (= (=> (and (and (<= x186 1461501637330902918203684832716283019655932542975) (= x1026 x518) (= (x924 x103) x186) (not (= 0 x993)) (not (or (and (= (<= x808 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x808 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x808)))) (and (= false x787) (= x201 x896) (= x193 x714) (= x822 x430) (= x74 x853) (= x802 false) (= x839 x168))) x323) x171))
(assert (= x580 (or x403 x943)))
(assert (x537 x225))
(assert (= x447 (x20 (x734 x447))))
(assert (= x779 (and (not x425) x883)))
(assert (x537 x24))
(assert (= (x995 x726) 0))
(assert (= (x575 4076725131) (x734 4076725131)))
(assert (x537 x786))
(assert (= (x20 (x575 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (x934 (+ 32 (x312 (+ x352 196)))) 0))
(assert (x537 x222))
(assert (x537 x756))
(assert (x537 x613))
(assert (x537 x971))
(assert (x537 x228))
(assert (= x140 (and x391 (not x710))))
(assert (= (=> (and (= (> x66 0) x89) (= x377 (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x613)) (= (x312 (+ x377 x598)) x488) (= (x51 (- x488 x318)) x719) (= x613 (x312 (+ 31 x767))) (= x717 (x312 (+ 32 x488))) (= x659 (x312 (+ 32 x318))) (= (x842 x755) x66)) (and (=> (and (= x329 0) (not x89)) x898) (=> (and x89 (and (= (< 32 x66) x980) (= (x803 x637) x907) (= x438 x717) (= x404 x637))) (and (=> (and (= x329 32) (not x980)) x898) (=> (and x980 (and (= x251 (x312 (+ 32 x717))) (= x424 (x512 x264)) (= x264 (x312 (+ 32 x404))) (= x1013 (> x66 64)))) (and (=> (and (not x1013) (= 64 x329)) x898) (=> (and x1013 (and (= x908 (x312 (+ 64 x404))) (= x840 (x272 x908)) (= x1021 (> x66 96)) (= x491 (x312 (+ 64 x717))))) (and (=> (and (not x1021) (= 96 x329)) x898) (=> x1021 x224))))))))) x794))
(assert (x537 x961))
(assert (x537 x1073))
(assert (x537 x8))
(assert (x537 x234))
(assert (x537 x837))
(assert (x537 x854))
(assert (= (and x712 (not x671)) x895))
(assert (x537 x853))
(assert (x537 x290))
(assert (x537 x49))
(assert (= (and x997 (not x797)) x48))
(assert (= (x298 (- x792 x165)) 0))
(assert (=> (>= 10000 x784) (= (x575 x784) (x734 x784))))
(assert (x537 x810))
(assert (x537 x193))
(assert (x207 x287))
(assert (= (x995 x792) 0))
(assert (x537 x475))
(assert (x537 x846))
(assert (= x1004 (or x464 x582)))
(assert (= 0 (x298 (- 160 x165))))
(assert (x537 x707))
(assert (= (or x83 x694) x1029))
(assert (x537 x520))
(assert (= x137 (and x235 x634)))
(assert (x537 x185))
(assert (x537 x106))
(assert (x537 x10))
(assert (x537 x988))
(assert (x537 x299))
(assert (= (and (not x980) x258) x882))
(assert (= (or x466 x355) x1059))
(assert (= (and x645 x919) x296))
(assert (= (x298 (- x335 x165)) 0))
(assert (= x800 (or x479 x140)))
(assert (= (x298 (- x884 x165)) 0))
(assert (= x22 (=> (and (or (and (not x1054) (= x172 x631)) (and x1054 (and (< x616 4294967296) (= x172 1)))) (and (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x392)) (< x392 32)) (> x392 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x503 0)) (= (x30 x735) x780) (= (x81 115792089237316195423570985008687907853269984665640564039457584007913129639904 x657) x398) (<= x780 1461501637330902918203684832716283019655932542975) (= (x312 (+ x392 31)) x657) (= (x312 (+ x398 x735)) x947) (= x1054 (< 0 x631)))) x443)))
(assert (x537 x830))
(assert (= 0 (x298 (- x652 x165))))
(assert (x537 x213))
(assert (x537 x104))
(assert (= x681 (and (not x894) x141)))
(assert (= 2249206060 (x20 (x575 2249206060))))
(assert (= x268 (and x209 x368)))
(assert (x537 x536))
(assert (x328 x39))
(assert (x130 x613))
(assert (x537 x333))
(assert (= x15 (and x571 (not x900))))
(assert (= (and (not x460) x956) x128))
(assert (x537 x341))
(assert (= (or x567 x385) x281))
(assert (x537 x1071))
(assert (= (x20 (x575 4199168155)) 4199168155))
(assert (= (x995 160) 0))
(assert (x537 x271))
(assert (= x978 (and x121 x546)))
(assert (x537 x1019))
(assert (= x170 (=> (and (= (> x914 0) x521) (= x34 (mod (* 32 x914) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x751 (x51 (- x940 x318))) (= x9 (x312 (+ x507 x34))) (= (x312 (+ x625 32)) x619) (= x507 (x312 (+ 32 x940)))) (and (=> (and (not x521) (= x814 x9)) x29) (=> x521 x414)))))
(assert (x537 x636))
(assert (= (x934 224) 0))
(assert (= (and x16 x978) x108))
(assert (= (and (not x78) x1059) x910))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ x363 (- x791 x954)) 196))) 0))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ x363 (- 256 x954)) 196))) 0))
(assert (= 0 (x934 (+ (x312 (+ 196 x352)) (- (+ x363 (- x792 x954)) 196)))))
(assert (x328 x885))
(assert (x537 x657))
(assert (x537 x1026))
(assert (x537 x725))
(assert (x537 x876))
(assert (x537 x925))
(assert (x537 x752))
(assert (x537 x562))
(assert (and (<= 10000 (x23 x341 x218)) (<= (x23 x341 x218) 340282366920938463463374607431768211455)))
(assert (x537 x709))
(assert (= (x20 (x575 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x684 (and x268 (not x446))))
(assert (x130 x287))
(assert (= x134 (=> (and (or (and x52 (= (x312 (+ x315 x276)) x60)) (not x52)) (= x52 (< x315 x8))) x766)))
(assert (x537 x326))
(assert (= (x20 (x575 102499615646744134772650717477688572466918151731817230690449879178893085114368)) 102499615646744134772650717477688572466918151731817230690449879178893085114368))
(assert (x537 x551))
(assert (= (x734 1845979623) (x575 1845979623)))
(assert (x328 x819))
(assert (= 0 (x934 160)))
(assert (x537 x179))
(assert (= 0 (x298 (- x42 x165))))
(assert (x130 x594))
(assert (x537 x949))
(assert (= (or (and (not x932) x400) x236) x3))
(assert (x240 x370))
(assert (= (and x1004 x646) x450))
(assert (x537 x751))
(assert (x537 x253))
(assert (= x466 (and x521 x484)))
(assert (= (x934 x908) 0))
(assert (x537 x1055))
(assert (= (and (not x856) x668) x420))
(assert (x537 x840))
(assert (= (and x500 x453) x826))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ (- x791 160) 196) 196))) 0))
(assert (= (=> (= x62 (not (> x254 128))) (and (=> (= 128 x202) x730) x62)) x47))
(assert (x537 x261))
(assert (= (x20 (x734 x341)) x341))
(assert (= x353 (=> (and (= (= x863 0) x6) (or (not x6) x6)) x1061)))
(assert (x537 x819))
(assert (= (x20 (x575 1845979623)) 1845979623))
(assert (x537 x180))
(assert (= (or x331 x817 x456 x754 x852) x919))
(assert (x537 x200))
(assert (= (x934 (+ (x312 (+ x352 196)) (- (+ x363 (- x884 x954)) 196))) 0))
(assert (x537 x172))
(assert (x537 x139))
(assert (x537 x132))
(assert (= (and (not x887) x698) x100))
(assert (x537 x791))
(assert (= x317 (and x469 (not x259))))
(assert (x537 x763))
(assert (x537 x434))
(assert (x537 x655))
(assert (= (and x152 x662) x322))
(assert (x537 x773))
(assert (x537 x248))
(assert (x537 x158))
(assert (x240 x234))
(assert (= (and x747 x807) x115))
(assert (x537 x639))
(assert (= (or x577 x407 x100 x926 x278) x883))
(assert (x537 x183))
(assert (x537 x370))
(assert (= x84 (and x459 x420)))
(assert (= (x734 1461501637330902918203684832716283019655932542976) (x575 1461501637330902918203684832716283019655932542976)))
(assert (x537 x304))
(assert (= (x575 1262878978) (x734 1262878978)))
(assert (x240 x228))
(assert (= (and (not x178) x695) x470))
(assert (= x1051 (or x99 x627 x339 x354 x229)))
(assert (x537 x154))
(assert (= (and (not x1046) x741) x456))
(assert (= x385 (and x650 x800)))
(assert (x537 x9))
(assert (x537 x254))
(assert (= x354 (and x693 (not x1036))))
(assert (x537 x366))
(assert (x130 x79))
(assert (= (and x167 x375) x1058))
(assert (= (and x1046 x741) x754))
(assert (= (=> (and (= x213 (x38 (x734 x784))) (= (= x213 0) x729) (= (x81 1461501637330902918203684832716283019655932542975 x502) x784)) (and (=> x729 x605) (=> (and (and (= x178 (< 0 x623)) (or (not x178) (and (and x1000 (> 4294967296 x271) (= (x660 (x734 x341)) x1071) (= (<= x1071 (x145 (x734 x341))) x813) x813 (= (x660 (x734 x784)) x397) (= (= (x145 (x734 x784)) x397) x1000)) x178))) (not x729)) x344))) x670))
(assert (x537 x893))
(assert (x537 x211))
(assert (= x812 (and x747 (not x807))))
(assert (x537 x950))
(assert (x537 x42))
(assert (x537 x502))
(assert (= x228 (x20 (x734 x228))))
(assert (x537 x519))
(assert (= (or x514 x635) x774))
(assert (x537 x1038))
(assert (x537 x451))
(assert (= (and x850 (not x604)) x217))
(assert (x537 x63))
(assert (x537 x860))
(check-sat)
(exit)