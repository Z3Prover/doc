(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x688 0)) (((x440 (x225 x688) (x82 x688) (x428 Int)) (x307 (x112 Int)) (x265 (x646 x688) (x410 Int)))))
(declare-fun x351 () Int)
(declare-fun x209 () Bool)
(declare-fun x23 () Int)
(declare-fun x431 () Bool)
(declare-fun x594 () Bool)
(declare-fun x483 () Int)
(declare-fun x7 () Int)
(declare-fun x555 () Int)
(declare-fun x406 () Bool)
(declare-fun x57 () x688)
(declare-fun x35 () Bool)
(declare-fun x224 () Bool)
(declare-fun x689 () x688)
(declare-fun x547 () Int)
(declare-fun x501 () Int)
(declare-fun x260 () Bool)
(declare-fun x601 () Int)
(declare-fun x680 () x688)
(declare-fun x511 () Bool)
(declare-fun x49 () Bool)
(declare-fun x108 () Bool)
(declare-fun x609 () Int)
(declare-fun x329 () Int)
(declare-fun x311 () Int)
(declare-fun x720 () Int)
(declare-fun x121 () Bool)
(declare-fun x201 (Int) Int)
(declare-fun x138 () x688)
(declare-fun x606 () Int)
(declare-fun x323 () x688)
(declare-fun x540 () Int)
(declare-fun x583 () x688)
(declare-fun x53 () Bool)
(declare-fun x44 () Int)
(declare-fun x515 () Int)
(declare-fun x502 () Bool)
(declare-fun x111 () Int)
(declare-fun x64 () Bool)
(declare-fun x180 () Int)
(declare-fun x414 () Bool)
(declare-fun x343 () Bool)
(declare-fun x568 () Bool)
(declare-fun x259 () Bool)
(declare-fun x367 () Int)
(declare-fun x665 () Bool)
(declare-fun x435 () Int)
(declare-fun x126 () Int)
(declare-fun x159 () Bool)
(declare-fun x438 () Bool)
(declare-fun x439 () Int)
(declare-fun x212 () Int)
(declare-fun x332 () Int)
(declare-fun x661 () Bool)
(declare-fun x22 () Int)
(declare-fun x679 () Int)
(declare-fun x75 () Int)
(declare-fun x253 () x688)
(declare-fun x263 () Int)
(declare-fun x177 () Int)
(declare-fun x699 () Int)
(declare-fun x340 () Int)
(declare-fun x622 () Bool)
(declare-fun x274 () Bool)
(declare-fun x110 () Int)
(declare-fun x147 () Int)
(declare-fun x256 () Bool)
(declare-fun x73 () Int)
(declare-fun x221 () Bool)
(declare-fun x337 () Int)
(declare-fun x207 () x688)
(declare-fun x250 () Int)
(declare-fun x373 () Int)
(declare-fun x300 () Int)
(declare-fun x552 () x688)
(declare-fun x74 () Bool)
(declare-fun x536 () Int)
(declare-fun x458 () Int)
(declare-fun x468 () Bool)
(declare-fun x90 () Int)
(declare-fun x24 () Int)
(declare-fun x692 () Int)
(declare-fun x471 () Int)
(declare-fun x186 () Bool)
(declare-fun x423 () Int)
(declare-fun x347 () x688)
(declare-fun x704 () Int)
(declare-fun x519 () Int)
(declare-fun x291 () Int)
(declare-fun x588 () Int)
(declare-fun x381 () Int)
(declare-fun x102 () Int)
(declare-fun x342 () Bool)
(declare-fun x387 () Bool)
(declare-fun x589 () Int)
(declare-fun x160 () Int)
(declare-fun x633 () Bool)
(declare-fun x537 () x688)
(declare-fun x517 () Int)
(declare-fun x357 () Int)
(declare-fun x632 () Int)
(declare-fun x334 () Bool)
(declare-fun x727 () Int)
(declare-fun x362 () Int)
(declare-fun x238 () Int)
(declare-fun x586 () Bool)
(declare-fun x570 () Int)
(declare-fun x418 () Bool)
(declare-fun x247 (x688) Int)
(declare-fun x303 () Int)
(declare-fun x558 () Bool)
(declare-fun x366 () Bool)
(declare-fun x318 () Bool)
(declare-fun x83 () x688)
(declare-fun x550 () Int)
(declare-fun x429 () Int)
(declare-fun x128 (x688) Int)
(declare-fun x648 () Int)
(declare-fun x684 () x688)
(declare-fun x564 () Int)
(declare-fun x281 () x688)
(declare-fun x319 () Bool)
(declare-fun x172 () Bool)
(declare-fun x544 () Bool)
(declare-fun x328 () Int)
(declare-fun x404 () Int)
(declare-fun x192 () Int)
(declare-fun x208 () Int)
(declare-fun x30 () Int)
(declare-fun x18 () Bool)
(declare-fun x585 () x688)
(declare-fun x543 () Int)
(declare-fun x11 () Int)
(declare-fun x506 () Int)
(declare-fun x141 (Int Int) Int)
(declare-fun x243 () Int)
(declare-fun x363 () Bool)
(declare-fun x67 () Int)
(declare-fun x14 () Int)
(declare-fun x613 () Int)
(declare-fun x189 () Int)
(declare-fun x97 () Int)
(declare-fun x93 () Bool)
(declare-fun x308 () Int)
(declare-fun x531 () Bool)
(declare-fun x696 () Bool)
(declare-fun x664 () Int)
(declare-fun x1 () Bool)
(declare-fun x316 () x688)
(declare-fun x721 () Int)
(declare-fun x549 () Int)
(declare-fun x58 () Int)
(declare-fun x687 () Int)
(declare-fun x369 () Bool)
(declare-fun x620 () Int)
(declare-fun x643 () Int)
(declare-fun x29 () Int)
(declare-fun x447 () Int)
(declare-fun x706 () Int)
(declare-fun x155 () Int)
(declare-fun x290 () Int)
(declare-fun x686 () Int)
(declare-fun x641 () Bool)
(declare-fun x578 () Int)
(declare-fun x456 () Bool)
(declare-fun x140 () Bool)
(declare-fun x229 () Bool)
(declare-fun x539 () Bool)
(declare-fun x135 () Int)
(declare-fun x39 () Bool)
(declare-fun x190 () Int)
(declare-fun x344 () Int)
(declare-fun x61 () Bool)
(declare-fun x714 () Int)
(declare-fun x576 () Int)
(declare-fun x638 () Bool)
(declare-fun x284 () Bool)
(declare-fun x462 () Int)
(declare-fun x145 () Int)
(declare-fun x197 () x688)
(declare-fun x178 () x688)
(declare-fun x677 () Int)
(declare-fun x395 () Bool)
(declare-fun x711 () Int)
(declare-fun x455 () Int)
(declare-fun x66 () Int)
(declare-fun x572 () Int)
(declare-fun x492 () Bool)
(declare-fun x454 () Int)
(declare-fun x275 () Bool)
(declare-fun x518 () Int)
(declare-fun x149 () Int)
(declare-fun x460 () Int)
(declare-fun x554 () Bool)
(declare-fun x117 () Int)
(declare-fun x3 () Bool)
(declare-fun x59 () Int)
(declare-fun x619 () Int)
(declare-fun x244 () Bool)
(declare-fun x718 () Bool)
(declare-fun x181 () Int)
(declare-fun x682 () Bool)
(declare-fun x48 () Bool)
(declare-fun x405 () Int)
(declare-fun x442 () Bool)
(declare-fun x94 () x688)
(declare-fun x701 () Bool)
(declare-fun x312 () Bool)
(declare-fun x264 () Int)
(declare-fun x261 () Int)
(declare-fun x436 () Bool)
(declare-fun x249 () Bool)
(declare-fun x45 () Bool)
(declare-fun x88 () Int)
(declare-fun x71 () Int)
(declare-fun x282 () Bool)
(declare-fun x51 () Int)
(declare-fun x504 () Int)
(declare-fun x139 () Int)
(declare-fun x301 () Int)
(declare-fun x52 () Int)
(declare-fun x710 () Int)
(declare-fun x579 () Int)
(declare-fun x616 () Int)
(declare-fun x513 () Int)
(declare-fun x288 () Int)
(declare-fun x529 () Int)
(declare-fun x295 () x688)
(declare-fun x396 () Int)
(declare-fun x694 () Bool)
(declare-fun x658 () Int)
(declare-fun x4 () Bool)
(declare-fun x134 () Bool)
(declare-fun x478 () Int)
(declare-fun x448 () Bool)
(declare-fun x380 () Int)
(declare-fun x419 () Bool)
(declare-fun x388 () Int)
(declare-fun x13 () Int)
(declare-fun x350 () Int)
(declare-fun x498 (Int Int) Int)
(declare-fun x481 () x688)
(declare-fun x593 () Int)
(declare-fun x191 () Bool)
(declare-fun x314 () Int)
(declare-fun x403 (x688) Int)
(declare-fun x394 () Bool)
(declare-fun x92 () Int)
(declare-fun x669 () Bool)
(declare-fun x409 () x688)
(declare-fun x199 () Bool)
(declare-fun x120 () Bool)
(declare-fun x127 () Int)
(declare-fun x475 () Bool)
(declare-fun x412 () Int)
(declare-fun x105 () Bool)
(declare-fun x590 () Bool)
(declare-fun x148 () Bool)
(declare-fun x293 () Bool)
(declare-fun x179 () Bool)
(declare-fun x151 () Int)
(declare-fun x729 () Bool)
(declare-fun x272 () Bool)
(declare-fun x106 () Int)
(declare-fun x608 () Bool)
(declare-fun x407 () Int)
(declare-fun x577 () Bool)
(declare-fun x488 () Int)
(declare-fun x326 () Int)
(declare-fun x277 () Bool)
(declare-fun x239 () Int)
(declare-fun x144 () Int)
(declare-fun x289 () Bool)
(declare-fun x173 () x688)
(declare-fun x625 () x688)
(declare-fun x47 () Bool)
(declare-fun x43 () Int)
(declare-fun x434 () Int)
(declare-fun x524 () Bool)
(declare-fun x670 () Bool)
(declare-fun x305 () Bool)
(declare-fun x560 () Int)
(declare-fun x668 () Bool)
(declare-fun x685 () Bool)
(declare-fun x523 () Bool)
(declare-fun x503 () Bool)
(declare-fun x432 () Bool)
(declare-fun x185 () Int)
(declare-fun x352 () Bool)
(declare-fun x382 () Int)
(declare-fun x68 () Bool)
(declare-fun x116 () Bool)
(declare-fun x89 () Int)
(declare-fun x553 () Int)
(declare-fun x349 () Int)
(declare-fun x21 () Bool)
(declare-fun x485 (Int) Int)
(declare-fun x652 () Int)
(declare-fun x530 () Int)
(declare-fun x371 () Int)
(declare-fun x695 () Int)
(declare-fun x728 () Int)
(declare-fun x279 () Int)
(declare-fun x484 () Int)
(declare-fun x194 () Int)
(declare-fun x499 () Int)
(declare-fun x60 () Bool)
(declare-fun x565 () Bool)
(declare-fun x416 () Int)
(declare-fun x379 () Bool)
(declare-fun x567 () Int)
(declare-fun x464 () Int)
(declare-fun x637 () Int)
(declare-fun x356 () Int)
(declare-fun x600 () Int)
(declare-fun x480 () Bool)
(declare-fun x467 () Bool)
(declare-fun x582 () Int)
(declare-fun x426 () Int)
(declare-fun x487 () Bool)
(declare-fun x133 (Int Int) Int)
(declare-fun x656 () Int)
(declare-fun x313 () Bool)
(declare-fun x296 () Int)
(declare-fun x494 () Int)
(declare-fun x262 () Int)
(declare-fun x479 () Int)
(declare-fun x397 () Int)
(declare-fun x286 () Int)
(declare-fun x666 () Int)
(declare-fun x258 () Int)
(declare-fun x546 () Bool)
(declare-fun x297 () Int)
(declare-fun x273 () Int)
(declare-fun x174 (Int) Int)
(declare-fun x667 () Bool)
(declare-fun x587 () Int)
(declare-fun x708 () Int)
(declare-fun x99 () Int)
(declare-fun x533 () Int)
(declare-fun x320 () Bool)
(declare-fun x109 () Bool)
(declare-fun x709 () Bool)
(declare-fun x227 () Bool)
(declare-fun x639 () Bool)
(declare-fun x41 () Bool)
(declare-fun x461 () Int)
(declare-fun x505 () Int)
(declare-fun x598 () Int)
(declare-fun x640 () Int)
(declare-fun x495 () Bool)
(declare-fun x514 () Bool)
(declare-fun x216 () Int)
(declare-fun x231 () Bool)
(declare-fun x683 () Bool)
(declare-fun x618 () Int)
(declare-fun x54 (Int) x688)
(declare-fun x330 () Int)
(declare-fun x446 () Int)
(declare-fun x508 () Int)
(declare-fun x527 () Int)
(declare-fun x348 () Int)
(declare-fun x374 () Int)
(declare-fun x624 () Int)
(declare-fun x98 () x688)
(declare-fun x602 () Int)
(declare-fun x525 () Bool)
(declare-fun x220 () Bool)
(declare-fun x631 () Int)
(declare-fun x634 () Bool)
(declare-fun x445 () Bool)
(declare-fun x298 () Int)
(declare-fun x187 () Int)
(declare-fun x698 () Int)
(declare-fun x444 () Int)
(declare-fun x156 () Bool)
(declare-fun x130 () Int)
(declare-fun x424 () Int)
(declare-fun x113 () Int)
(declare-fun x490 () Bool)
(declare-fun x491 () Int)
(declare-fun x114 () Bool)
(declare-fun x230 () Bool)
(declare-fun x278 () Int)
(declare-fun x237 () Int)
(declare-fun x716 () Int)
(declare-fun x538 () Int)
(declare-fun x486 () Int)
(declare-fun x542 () Bool)
(declare-fun x422 (x688) Int)
(declare-fun x77 () Int)
(declare-fun x164 () Int)
(declare-fun x236 () Int)
(declare-fun x183 () Int)
(declare-fun x6 () Int)
(declare-fun x56 () Int)
(declare-fun x95 () Int)
(declare-fun x465 () Int)
(declare-fun x581 () Int)
(declare-fun x551 () Int)
(declare-fun x119 () Int)
(declare-fun x345 () Int)
(declare-fun x304 () Bool)
(declare-fun x2 () Int)
(declare-fun x615 () Bool)
(declare-fun x218 () Bool)
(declare-fun x101 () Int)
(declare-fun x614 () Int)
(declare-fun x562 () Bool)
(declare-fun x595 () Int)
(declare-fun x365 () Int)
(declare-fun x87 () x688)
(declare-fun x234 (Int) Int)
(declare-fun x378 () Int)
(declare-fun x459 () Int)
(declare-fun x283 () Bool)
(declare-fun x33 () Int)
(declare-fun x621 () Int)
(declare-fun x597 () Int)
(declare-fun x630 () Bool)
(declare-fun x715 (x688) Int)
(declare-fun x103 () Int)
(declare-fun x693 () Int)
(declare-fun x267 () Bool)
(declare-fun x25 () Int)
(declare-fun x50 () Int)
(declare-fun x674 () Int)
(declare-fun x599 () Bool)
(declare-fun x723 () Int)
(declare-fun x333 () Bool)
(declare-fun x402 () Bool)
(declare-fun x171 () Int)
(declare-fun x496 () Int)
(declare-fun x315 () Int)
(declare-fun x219 () Bool)
(declare-fun x34 () Bool)
(declare-fun x678 () Int)
(declare-fun x228 () Int)
(declare-fun x257 () Bool)
(declare-fun x131 () Bool)
(declare-fun x42 () Bool)
(declare-fun x556 () Int)
(declare-fun x647 () Int)
(declare-fun x591 () Int)
(declare-fun x603 () Bool)
(declare-fun x241 () Bool)
(declare-fun x580 () Bool)
(declare-fun x81 () Int)
(declare-fun x629 () x688)
(declare-fun x242 () Int)
(declare-fun x364 () Bool)
(declare-fun x80 () Bool)
(declare-fun x425 () Bool)
(declare-fun x712 () Bool)
(declare-fun x522 () Int)
(declare-fun x27 () x688)
(declare-fun x377 () Bool)
(declare-fun x507 () Bool)
(declare-fun x541 () Int)
(declare-fun x702 () Bool)
(declare-fun x500 () Bool)
(declare-fun x375 () x688)
(declare-fun x165 () Int)
(declare-fun x309 () Int)
(declare-fun x84 () Bool)
(declare-fun x474 () Bool)
(declare-fun x617 () Int)
(declare-fun x472 () Int)
(declare-fun x78 () Int)
(declare-fun x463 () Int)
(declare-fun x157 () Int)
(declare-fun x19 () Bool)
(declare-fun x724 () Bool)
(declare-fun x86 () Int)
(declare-fun x569 () Int)
(declare-fun x389 () Int)
(declare-fun x636 () Int)
(declare-fun x390 () Int)
(declare-fun x559 () Int)
(declare-fun x8 () Int)
(declare-fun x235 () Int)
(declare-fun x612 () Int)
(declare-fun x372 () Int)
(declare-fun x287 () Int)
(declare-fun x457 () Int)
(declare-fun x132 () Bool)
(declare-fun x493 () Int)
(declare-fun x276 () Int)
(declare-fun x673 () Int)
(declare-fun x675 () Bool)
(declare-fun x358 () Int)
(declare-fun x306 () Int)
(declare-fun x268 () Int)
(declare-fun x726 () Int)
(declare-fun x584 () Int)
(declare-fun x175 () Int)
(declare-fun x548 () Bool)
(declare-fun x476 (x688) Int)
(declare-fun x223 () Int)
(declare-fun x255 () Int)
(declare-fun x10 () Bool)
(declare-fun x707 () Int)
(declare-fun x411 () Int)
(declare-fun x452 () Int)
(declare-fun x346 () Int)
(declare-fun x166 () Int)
(declare-fun x310 () Bool)
(declare-fun x202 () Bool)
(declare-fun x327 () Int)
(declare-fun x62 () Bool)
(declare-fun x176 () x688)
(declare-fun x184 () Bool)
(declare-fun x645 () Int)
(declare-fun x725 () Int)
(declare-fun x317 () Int)
(declare-fun x510 () Bool)
(declare-fun x85 () Int)
(declare-fun x526 () Int)
(declare-fun x384 () x688)
(declare-fun x399 () Bool)
(declare-fun x466 () Int)
(declare-fun x359 () Int)
(declare-fun x421 () Int)
(declare-fun x528 () Int)
(declare-fun x393 () Bool)
(declare-fun x722 () Int)
(declare-fun x125 () x688)
(declare-fun x271 () Bool)
(declare-fun x383 () Int)
(declare-fun x663 () Bool)
(declare-fun x561 () x688)
(declare-fun x427 () Int)
(declare-fun x28 () Int)
(declare-fun x15 () Int)
(declare-fun x26 () Int)
(declare-fun x182 () Int)
(declare-fun x55 () Bool)
(declare-fun x697 () Int)
(declare-fun x596 () Int)
(declare-fun x215 () Int)
(declare-fun x129 () Int)
(declare-fun x644 () Int)
(declare-fun x360 () x688)
(declare-fun x168 () Int)
(declare-fun x659 () Bool)
(declare-fun x626 () Int)
(declare-fun x676 () Int)
(declare-fun x649 () Int)
(declare-fun x532 () Int)
(declare-fun x557 () Bool)
(declare-fun x611 () Bool)
(declare-fun x443 () Int)
(declare-fun x470 () Int)
(declare-fun x563 () Int)
(declare-fun x719 () Int)
(declare-fun x385 () Bool)
(declare-fun x417 () Bool)
(declare-fun x331 () Int)
(declare-fun x167 () x688)
(declare-fun x150 () Int)
(declare-fun x16 () Bool)
(declare-fun x534 () Int)
(declare-fun x400 () Bool)
(declare-fun x20 () Int)
(declare-fun x137 () Int)
(declare-fun x100 () Int)
(declare-fun x453 () Bool)
(declare-fun x575 () Int)
(declare-fun x437 () Int)
(declare-fun x217 () Int)
(declare-fun x9 () Int)
(declare-fun x355 () Int)
(declare-fun x489 () Bool)
(declare-fun x206 () Bool)
(declare-fun x302 () Int)
(declare-fun x118 () Bool)
(declare-fun x433 () Int)
(declare-fun x152 () x688)
(declare-fun x451 () Int)
(declare-fun x195 () Int)
(declare-fun x650 () Int)
(declare-fun x266 () Int)
(declare-fun x671 () x688)
(declare-fun x703 () Int)
(declare-fun x115 () Bool)
(declare-fun x76 () Int)
(declare-fun x232 () Bool)
(declare-fun x336 () Int)
(declare-fun x482 () Bool)
(declare-fun x198 () Int)
(declare-fun x294 () Bool)
(declare-fun x251 () Bool)
(declare-fun x450 () Bool)
(declare-fun x203 () Bool)
(declare-fun x338 () Bool)
(declare-fun x91 () Bool)
(declare-fun x69 () Int)
(declare-fun x512 () Int)
(declare-fun x142 () Int)
(declare-fun x592 () Bool)
(declare-fun x398 () Int)
(declare-fun x193 () Int)
(declare-fun x65 () Int)
(declare-fun x635 () Bool)
(declare-fun x441 () Int)
(declare-fun x341 () Bool)
(declare-fun x162 () Int)
(declare-fun x705 () Int)
(declare-fun x226 () Int)
(declare-fun x38 () Int)
(declare-fun x571 (x688) Int)
(declare-fun x246 () Bool)
(declare-fun x17 () Int)
(declare-fun x623 () Int)
(declare-fun x654 () Int)
(declare-fun x413 () Bool)
(declare-fun x535 () Bool)
(declare-fun x143 () Int)
(declare-fun x420 () x688)
(declare-fun x196 () Int)
(declare-fun x240 () Int)
(declare-fun x566 () Bool)
(declare-fun x391 () Int)
(declare-fun x415 () Int)
(declare-fun x292 () Int)
(declare-fun x653 (Int) Int)
(declare-fun x96 () Int)
(declare-fun x245 () Int)
(declare-fun x170 () Int)
(declare-fun x205 () Bool)
(declare-fun x214 () Bool)
(declare-fun x690 () Int)
(declare-fun x285 () Bool)
(declare-fun x376 () Bool)
(declare-fun x169 (Int) Int)
(declare-fun x63 () Bool)
(declare-fun x211 () Int)
(declare-fun x104 () Bool)
(declare-fun x79 () Bool)
(declare-fun x642 () Bool)
(declare-fun x662 () Int)
(declare-fun x660 () x688)
(declare-fun x124 () Int)
(define-fun x12 ((x688 x688) (x321 Int)) x688 (ite ((_ is x265) x688) (x265 (x646 x688) (+ x321 (x410 x688))) (ite ((_ is x440) x688) (x440 (x225 x688) (x82 x688) (+ x321 (x428 x688))) (x307 (+ (x112 x688) x321)))))
(define-fun x252 ((x299 Int)) Int (ite (and (>= x299 0) (< x299 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x299 (- x299 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x200 ((x299 Int)) Int (ite (and (< x299 0) (>= x299 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x299) x299))
(define-fun x607 ((x386 Int)) Bool (and (<= 0 x386) (< x386 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x322 ((x386 Int)) Bool (and (= (x133 x386 115792089237316195423570985008687907853269984665640564039457584007913129639935) x386) (= (x133 115792089237316195423570985008687907853269984665640564039457584007913129639935 x386) x386)))
(define-fun x270 ((x386 Int)) Bool (and (= (x133 x386 0) 0) (= (x133 0 x386) 0)))
(define-fun x325 ((x386 Int)) Bool (= x386 (x133 x386 x386)))
(define-fun x430 ((x386 Int)) Bool (and (x325 x386) (x322 x386) (x270 x386)))
(define-fun x153 ((x386 Int) (x324 Int)) Bool (= (x133 x386 x324) (x133 x324 x386)))
(define-fun x473 ((x386 Int) (x324 Int)) Bool (and (=> (>= x324 0) (<= (x133 x386 x324) x324)) (<= 0 (x133 x386 x324)) (=> (>= x386 0) (>= x386 (x133 x386 x324)))))
(define-fun x370 ((x386 Int) (x324 Int)) Bool (and (x473 x386 x324) (x153 x386 x324)))
(define-fun x655 ((x386 Int)) Bool (= (x133 x386 1461501637330902918203684832716283019655932542975) (mod x386 1461501637330902918203684832716283019655932542976)))
(define-fun x46 ((x386 Int)) Bool (and (x370 x386 1461501637330902918203684832716283019655932542975) (x655 x386)))
(define-fun x497 ((x386 Int)) Bool (and (= (x141 x386 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x141 115792089237316195423570985008687907853269984665640564039457584007913129639935 x386) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x449 ((x386 Int)) Bool (and (= (x141 x386 0) x386) (= (x141 0 x386) x386)))
(define-fun x469 ((x386 Int)) Bool (= (x141 x386 x386) x386))
(define-fun x72 ((x386 Int)) Bool (and (x497 x386) (x469 x386) (x449 x386)))
(define-fun x31 ((x386 Int) (x324 Int)) Bool (= (x141 x324 x386) (x141 x386 x324)))
(define-fun x354 ((x386 Int) (x324 Int)) Bool (and (=> (<= 0 x386) (>= (x141 x386 x324) x386)) (>= (+ x324 x386) (x141 x386 x324)) (=> (>= x324 0) (<= x324 (x141 x386 x324)))))
(define-fun x657 ((x386 Int) (x324 Int)) Bool (and (x31 x386 x324) (x354 x386 x324)))
(define-fun x691 ((x361 x688)) Int (x571 x361))
(define-fun x545 ((x361 x688)) Int (ite (= x361 x173) x506 (x691 x361)))
(define-fun x628 ((x361 x688)) Int (ite x542 (x571 x361) (x545 x361)))
(define-fun x269 ((x361 x688)) Int (x628 x361))
(define-fun x401 ((x361 x688)) Int (ite (= x361 x347) x534 (x715 x361)))
(define-fun x107 ((x361 x688)) Int (ite x542 (x715 x361) (ite x369 (x715 x361) (x401 x361))))
(define-fun x353 ((x361 x688)) Int (ite (= x207 x361) x513 (x403 x361)))
(define-fun x233 ((x361 x688)) Int (ite (= x625 x361) x444 (x353 x361)))
(define-fun x627 ((x361 x688)) Int (ite x542 (x403 x361) (ite x369 (x403 x361) (x233 x361))))
(define-fun x210 ((x361 x688)) Int (x422 x361))
(define-fun x136 ((x361 x688)) Int (ite (= x361 x409) x135 (x627 x361)))
(define-fun x40 ((x361 x688)) Int (ite (= x361 x420) x356 (x136 x361)))
(define-fun x521 ((x361 x688)) Int (ite x116 (x627 x361) (ite x638 (x627 x361) (x40 x361))))
(define-fun x188 ((x361 x688)) Int (ite (= x384 x361) x301 (x269 x361)))
(define-fun x477 ((x361 x688)) Int (ite x116 (x628 x361) (x188 x361)))
(define-fun x5 ((x361 x688)) Int (x210 x361))
(define-fun x248 ((x361 x688)) Int (ite (= x152 x361) x15 (x521 x361)))
(define-fun x122 ((x361 x688)) Int (ite (= x689 x361) x415 (x248 x361)))
(define-fun x280 ((x361 x688)) Int (ite x554 (x521 x361) (ite x352 (x521 x361) (x122 x361))))
(define-fun x604 ((x361 x688)) Int (ite (= x361 x83) x411 (x5 x361)))
(define-fun x713 ((x361 x688)) Int (ite x694 (x604 x361) (x5 x361)))
(define-fun x158 ((x361 x688)) Int (ite x230 (x5 x361) (x713 x361)))
(define-fun x146 ((x361 x688)) Int (ite x554 (x5 x361) (x158 x361)))
(define-fun x154 ((x361 x688)) Int (ite (= x361 x57) x164 (x477 x361)))
(define-fun x651 ((x361 x688)) Int (ite x554 (x477 x361) (x154 x361)))
(define-fun x161 ((x361 x688)) Int (ite (= x684 x361) x483 (x280 x361)))
(define-fun x672 ((x361 x688)) Int (ite (= x660 x361) x647 (x161 x361)))
(define-fun x163 ((x361 x688)) Int (ite x343 (x280 x361) (ite x320 (x280 x361) (ite x218 (x280 x361) (x672 x361)))))
(define-fun x37 ((x361 x688)) Int (ite (= x361 x552) x397 (x651 x361)))
(define-fun x516 ((x361 x688)) Int (ite x343 (x651 x361) (x37 x361)))
(define-fun x700 ((x361 Int)) Int (ite (= x361 128) x344 (x653 x361)))
(define-fun x610 ((x361 Int)) Int (ite (= 128 x361) x212 (x700 x361)))
(define-fun x392 ((x361 Int)) Int (ite (= x361 160) x344 (x610 x361)))
(define-fun x335 ((x361 Int)) Int (ite (= 128 x361) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x392 x361)))
(define-fun x573 ((x361 Int)) Int (ite (= 132 x361) x674 (x335 x361)))
(define-fun x123 ((x361 Int)) Int (ite (= 164 x361) x212 (x573 x361)))
(define-fun x509 ((x361 Int)) Int (x174 x361))
(define-fun x204 ((x361 Int)) Int (ite (= x361 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x201 x361)))
(define-fun x520 ((x361 Int)) Int (ite (= x361 132) x564 (x204 x361)))
(define-fun x339 ((x361 Int)) Int (ite (= 164 x361) x236 (x520 x361)))
(define-fun x222 ((x361 Int)) Int (ite (= 196 x361) x306 (x339 x361)))
(define-fun x574 ((x361 Int)) Int (ite (= 128 x361) x549 (x169 x361)))
(define-fun x681 ((x361 Int)) Int (ite (= x361 128) x362 (x574 x361)))
(define-fun x213 ((x361 Int)) Int (ite (= 160 x361) x549 (x681 x361)))
(define-fun x36 ((x361 Int)) Int (ite (= x361 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x213 x361)))
(define-fun x70 ((x361 Int)) Int (ite (= x361 132) x624 (x36 x361)))
(define-fun x254 ((x361 Int)) Int (ite (= 164 x361) x362 (x70 x361)))
(define-fun x605 ((x361 Int)) Int (ite (= 128 x361) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x485 x361)))
(define-fun x717 ((x361 Int)) Int (ite (= x361 132) x564 (x605 x361)))
(define-fun x368 ((x361 Int)) Int (ite (= 164 x361) x236 (x717 x361)))
(define-fun x408 ((x361 Int)) Int (ite (= 196 x361) x223 (x368 x361)))
(define-fun x32 ((x386 Int)) Bool (=> (and (not (= 3026235284 x386)) (not (= x386 117300739)) (not (= x386 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 2514000705 x386)) (not (= 157198259 x386)) (not (= 3337024914 x386)) (not (= x386 3121116754)) (not (= 1889567281 x386)) (not (= x386 404098525)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x386)) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x386)) (not (= x386 4294967295)) (not (= 170435703 x386)) (not (= 3017275065 x386)) (not (= x386 1851080549)) (< 10000 x386) (not (= x386 826074471)) (not (= x386 2376452955)) (not (= 2835717307 x386)) (not (= x386 128110906)) (not (= 1461501637330902918203684832716283019655932542975 x386)) (not (= 330252341 x386)) (not (= x386 1289409798)) (not (= x386 2495578189)) (not (= x386 599290589)) (not (= 31576340 x386))) (not ((_ is x307) (x54 x386)))))
(assert (= x468 x184))
(assert (x607 x501))
(assert (=> (>= 10000 x236) (= (x307 x236) (x54 x236))))
(assert (=> (<= x441 10000) (= (x307 x441) (x54 x441))))
(assert (= (=> (and (= (= x519 0) x419) (or x419 (not x419))) x450) x395))
(assert (x607 x59))
(assert (= (x128 (x54 x236)) x236))
(assert (x607 x239))
(assert (x430 x359))
(assert (x607 x567))
(assert (x607 x620))
(assert (= (=> (and (= x591 x287) (= x77 x421) (= x458 x649) (= x7 0)) x622) x376))
(assert (x607 x447))
(assert (x607 x624))
(assert (x607 x397))
(assert (x370 x551 x59))
(assert (x607 x560))
(assert (x607 x85))
(assert (x607 x444))
(assert (x607 x212))
(assert (x607 x666))
(assert (= (x54 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x307 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (and x283 (not x148)) x74))
(assert (x607 x388))
(assert (= (and x251 x93) x535))
(assert (x607 x704))
(assert (= x427 (x128 (x54 x427))))
(assert (x607 x327))
(assert (x430 x519))
(assert (= (x54 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x307 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x607 x697))
(assert (x607 x719))
(assert (x607 x96))
(assert (x607 x692))
(assert (x430 x7))
(assert (x607 x344))
(assert (= (x128 (x307 31576340)) 31576340))
(assert (= (x54 157198259) (x307 157198259)))
(assert (x607 x488))
(assert (= x241 (or x554 x608)))
(assert (x430 x532))
(assert (x607 x588))
(assert (x607 x534))
(assert (x607 x238))
(assert (x607 x549))
(assert (x430 x640))
(assert (= x663 (and x61 x544)))
(assert (x607 x512))
(assert (x607 x358))
(assert (x607 x14))
(assert (x607 x707))
(assert (x607 x340))
(assert (x430 x526))
(assert (x607 x315))
(assert (x607 x506))
(assert (x607 x505))
(assert (=> (>= 10000 x427) (= (x54 x427) (x307 x427))))
(assert (x32 x255))
(assert (= x413 (=> (and (<= 0 x357) (= x674 x56) (= x10 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x350) (and (< x350 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x350))))) (not (> 4 x50)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505) (= x552 (x440 (x54 x470) (x307 3) 0)) (not (= x263 1889567281)) (not (> x344 x357)) (not (= 2514000705 x263)) (<= 0 x183) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x645) (<= 0 x505) (= x129 (x200 (- x505 x212))) (not (= x263 826074471)) (not (= 0 x212)) (= x556 (x200 (- x183 x344))) (> x443 0) (= (x200 (- x357 x344)) x397) (= 68 x50) (= (x200 (- x183 x344)) x187) (= x212 x194) (= (x133 1461501637330902918203684832716283019655932542975 x423) x470) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x357) (= x26 (x200 (- x505 x212))) (= (x200 (- x50 4)) x350) (= x443 (x247 (x54 x365))) (= x263 2835717307) (not (< x263 826074471)) (not (< x505 x212)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (= x357 (x651 x552)) (= 128 x117)) (and (=> (and (not x10) (and (= x704 x56) (= x665 (= x674 x56)))) (and (=> (and x665 (and (= x194 x346) (<= 0 x656) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x656) (= (x280 x629) x656) (= x120 (> x212 x656)) (= x629 (x440 (x54 x236) (x307 1) 0)))) (and (=> x120 x48) (=> (and (not x120) (= (< x656 x194) x41)) (and (=> x41 x48) (=> (and (not x41) (and (= (x161 x167) x623) (<= x623 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x623) (= (x200 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x194)) x290) (= x483 (x200 (- x656 x194))) (= x684 (x440 (x54 x236) (x307 1) 0)) (= x167 (x440 (x54 x56) (x307 1) 0)) (= x271 (< x290 x623)))) (and (=> x271 x48) (=> (and (and (= (< x647 x623) x333) (= (x252 (+ x623 x194)) x647)) (not x271)) (and (=> x333 x48) (=> (and (not x333) (and (= x102 x556) (= x380 x26) (= (x440 (x54 x56) (x307 1) 0) x660) (= x722 32) (= 1 x90))) x456))))))))) (=> (not x665) x48))) (=> (and (and (= x345 x380) (= x556 x102) (= 0 x90) (= x345 (x200 (- x505 x212))) (= x722 x707)) x10) x456)))))
(assert (x607 x73))
(assert (= (and x60 x363) x482))
(assert (= (or x387 x638) x45))
(assert (x607 x245))
(assert (= (x128 (x54 x56)) x56))
(assert (= (x128 (x307 1289409798)) 1289409798))
(assert (x370 x298 x496))
(assert (x607 x591))
(assert (x607 x654))
(assert (x607 x613))
(assert (= (and x259 x558) x232))
(assert (x607 x240))
(assert (= (and x566 (not x438)) x220))
(assert (=> (>= 10000 x564) (= (x307 x564) (x54 x564))))
(assert (x370 x457 x584))
(assert (= x320 (or x399 (and (not x665) x219) (and x417 x120) (and x206 x333) x402)))
(assert (x607 x237))
(assert (x46 x423))
(assert (x430 x208))
(assert (x607 x314))
(assert (= (and x63 (not x272)) x3))
(assert (x32 x69))
(assert (= x105 (=> (and (= x52 x597) (and (= x119 x52) (= x723 x486) (= x654 2) (= x279 (+ x697 x119)) (= x398 x619) (= x279 x30) (= x712 (>= x226 x619)) (= (* x486 2) x687) (= (+ x687 x30) x226))) x712)))
(assert (= x369 (or x35 x663 (and x214 x611) (and x318 (not x80)) (and x148 x283) (and x34 x47) x685 (and x74 (not x642)) (and x249 x115))))
(assert (= (or x221 x352) x525))
(assert (= 3017275065 (x128 (x307 3017275065))))
(assert (x607 x415))
(assert (x607 x165))
(assert (x607 x637))
(assert (x430 x315))
(assert (x607 x484))
(assert (= x221 (and x338 (not x293))))
(assert (x607 x652))
(assert (x607 x92))
(assert (= (and x414 x702) x285))
(assert (x607 x494))
(assert (x607 x526))
(assert (x607 x538))
(assert (= x399 (and x41 x282)))
(assert (x607 x614))
(assert (=> (>= 10000 x614) (= (x54 x614) (x307 x614))))
(assert (x607 x463))
(assert (x430 x551))
(assert (x607 x407))
(assert (x607 x623))
(assert (x607 x726))
(assert (x607 x33))
(assert (x607 x578))
(assert (x607 x656))
(assert (x430 x59))
(assert (= x343 (and x241 (not x21))))
(assert (x607 x499))
(assert (= (and x417 (not x120)) x282))
(assert (x607 x215))
(assert (x607 x714))
(assert (x32 x383))
(assert (x607 x678))
(assert (= x1 (and (not x41) x282)))
(assert (x607 x71))
(assert (x607 x151))
(assert (x607 x439))
(assert (= (x54 4294967295) (x307 4294967295)))
(assert (x607 x261))
(assert (x607 x664))
(assert (=> (<= x404 10000) (= (x54 x404) (x307 x404))))
(assert (x607 x543))
(assert (x370 x526 x208))
(assert (x607 x710))
(assert (x370 x716 x676))
(assert (x607 x223))
(assert (x607 x155))
(assert (x607 x211))
(assert (= 157198259 (x128 (x307 157198259))))
(assert (x607 x127))
(assert (x607 x372))
(assert (x607 x550))
(assert (= x470 (x128 (x54 x470))))
(assert (= (x307 3121116754) (x54 3121116754)))
(assert (x607 x593))
(assert (= (and x257 x400) x191))
(assert (x607 x147))
(assert (x607 x317))
(assert (x607 x7))
(assert (= (and (not x670) x385) x116))
(assert (x607 x677))
(assert (x607 x346))
(assert (= (and x277 x305) x641))
(assert (x607 x228))
(assert (x370 x126 x613))
(assert (x607 x434))
(assert (x607 x308))
(assert (x607 x725))
(assert (x607 x235))
(assert (= (x128 (x54 x560)) x560))
(assert (= (x307 2376452955) (x54 2376452955)))
(assert (x32 x365))
(assert (= x364 (and x84 x104)))
(assert (=> (>= 10000 x65) (= (x307 x65) (x54 x65))))
(assert (x607 x28))
(assert (x607 x618))
(assert (x32 x686))
(assert (x430 x298))
(assert (x607 x302))
(assert (= (x128 (x307 3121116754)) 3121116754))
(assert (x607 x643))
(assert (x607 x441))
(assert (x607 x348))
(assert (x370 x532 x606))
(assert (x607 x424))
(assert (x607 x362))
(assert (x607 x491))
(assert (x607 x673))
(assert (= x683 (and (not x172) x592)))
(assert (= (and x80 x318) x47))
(assert (x607 x711))
(assert (x430 x171))
(assert (=> (>= 10000 x245) (= (x54 x245) (x307 x245))))
(assert (= (x128 (x307 330252341)) 330252341))
(assert (x430 x631))
(assert (x607 x658))
(assert (x607 x300))
(assert (x607 x617))
(assert (= x633 (and x108 x91)))
(assert (x607 x427))
(assert (x607 x556))
(assert (x607 x180))
(assert (x607 x722))
(assert (x607 x421))
(assert (x607 x727))
(assert (x607 x66))
(assert (x607 x183))
(assert (x607 x716))
(assert (x32 x348))
(assert (= x363 (and (not x305) x277)))
(assert (x607 x632))
(assert (x607 x278))
(assert (x607 x101))
(assert (= x257 (and (not x199) x244)))
(assert (= (and x271 x1) x402))
(assert (x607 x371))
(assert (= x659 (or x696 x16)))
(assert (= (x54 3026235284) (x307 3026235284)))
(assert (x607 x723))
(assert (x607 x596))
(assert (x430 x595))
(assert (x607 x337))
(assert (= x245 (x128 (x54 x245))))
(assert (x607 x56))
(assert (= x492 (and (not x718) x418)))
(assert (= (and x289 x467) x729))
(assert (x607 x356))
(assert (= x142 (x128 (x54 x142))))
(assert (x607 x175))
(assert (x32 x441))
(assert (x607 x273))
(assert (= (=> (and (= x258 x155) (and (and (>= 1461501637330902918203684832716283019655932542975 x245) (= x17 x723) (= x103 (x403 x360)) (= x328 x103) (<= 0 x103) x682 (not (< x97 826074471)) (= x97 1889567281) (= x437 x245) (< 0 x576) (= (not (= x17 0)) x682) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x103) (= x20 0) (not (= 826074471 x97)) (= x723 x258) (= x360 (x440 (x54 x245) (x307 1) 0)) (= x576 (x247 (x54 x365)))) (and (and (>= x113 0) (= x303 x328) (= x441 x437) (> 2376452955 x308) (= x262 (x247 (x54 x236))) (= x472 x113) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113) (>= 1461501637330902918203684832716283019655932542975 x441) (not (= x308 1851080549)) (= (x440 (x54 x441) (x307 3) 0) x253) (= x113 (x571 x253)) (= x308 1889567281) (not (= 1289409798 x308)) (< 0 x262) (not (> 826074471 x308)) (not (< x308 1289409798))) (and (= x337 x478) (= x292 x273) (= x541 x327) (= x504 x437) (= 1851080549 x388) (= (= 1851080549 x698) x156) (= x235 x165) (= x472 x621) (= x228 x648) (= x336 x698) (= x626 (* x358 x621)) (= x358 x723) (= x398 (+ x303 x626)) (= x237 x302) (= x711 x677) (= x286 x564) (= x533 x278) (= x547 x587) (= x326 x652))))) (and (=> (and (and (and (<= x73 1461501637330902918203684832716283019655932542975) (= 0 x455) (>= 1461501637330902918203684832716283019655932542975 x130) (= x455 x302) (<= 0 x433) (= x351 x73) (= x494 (x247 (x54 x236))) x134 (not (> 1289409798 x66)) (<= x451 1461501637330902918203684832716283019655932542975) (> 2376452955 x66) (= x165 x351) (= x223 x326) (= x414 (= x317 0)) (> x494 0) (= x564 x130) (<= 0 x73) (= x134 x156) (>= x130 0) (= x451 x504) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x317) (<= 0 x317) (>= 1461501637330902918203684832716283019655932542975 x433) (not (> 826074471 x66)) (= x66 1851080549) (not (= 1289409798 x66))) (or (and (= x223 x101) x414) (and (not x414) (and (= (div x143 x223) x261) (= x143 (mod (* x223 x317) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= x261 x317) x474) (= x530 (div x143 x725)) (= x101 x530) (= (x133 x551 x59) x374) (= x59 (ite (or x474 x503) 1 0)) (= x246 (= 0 x725)) (>= x725 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x725) (= x551 (ite (not x246) 1 0)) (< 0 x374) (= x503 (= x223 0)))))) x156) x393) (=> (and (not x156) (and (= x591 x725) x342 (= x77 x317) (= x342 (not x709)) (= x156 x709))) x55))) x448))
(assert (= (=> (and (= x447 3026235284) (= x336 x459) (= x39 (= x459 3026235284))) (and (=> (and (and (or (and (not x104) (and (= x229 (= 0 x177)) (= x166 (mod (* x529 x362) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x193 x177) x8) (= x217 (x252 (+ 1 x8))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177) (= x192 (x133 x692 x601)) (= (ite (not x229) 1 0) x692) (= x266 (ite (not x179) x217 0)) (= x159 (= x362 0)) (= (x200 (- x166 1)) x193) (= x601 (ite (or x594 x159) 1 0)) (= x549 x266) (<= 0 x177) (= (= x529 x168) x594) (= (div x166 x362) x168) (> x192 0) (= x179 (= x166 0)))) (and (= x362 x549) x104)) (and (= x165 x330) x341 (>= 1461501637330902918203684832716283019655932542975 x540) (not (= 3017275065 x464)) (< x464 3337024914) (= (x247 (x54 x236)) x340) (<= x710 1461501637330902918203684832716283019655932542975) (= x564 x710) (>= x540 0) (not (< x464 2376452955)) (<= x315 1461501637330902918203684832716283019655932542975) (<= 0 x710) (<= x529 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x362 x326) (= x726 x302) (= x330 x540) (> x340 0) (not (> 3017275065 x464)) (= x464 3026235284) (>= x529 0) (= x341 x39) (= x624 x504) (= x104 (= 0 x529)) (= x726 0) (<= x76 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x624) (<= 0 x76))) x39) x568) (=> (and (not x39) (and (= x183 x529) (= x334 (not x68)) x334 (= x68 x39) (= x177 x505))) x275))) x19))
(assert (not x523))
(assert (= x310 (and x669 x45)))
(assert (x32 x142))
(assert (= (and x42 (not x661)) x694))
(assert (x607 x563))
(assert (x607 x451))
(assert (x607 x486))
(assert (x607 x149))
(assert (= x65 (x128 (x54 x65))))
(assert (x607 x332))
(assert (x607 x429))
(assert (= (x54 826074471) (x307 826074471)))
(assert (x607 x189))
(assert (= x275 (=> (and (= x336 x250) (= (= 3121116754 x250) x21) (= x240 3121116754)) (and (=> (and (not x21) (and (= x432 x21) x531 (= (not x432) x531) (= x183 x288) (= x367 x505))) x490) (=> (and (and (= x533 x344) (not (> 3017275065 x300)) (= x504 x674) (= x575 x151) (>= 1461501637330902918203684832716283019655932542975 x423) (> 3337024914 x300) (= (= x564 x423) x305) (= x304 x21) (<= x728 1461501637330902918203684832716283019655932542975) (= x182 0) (<= x674 1461501637330902918203684832716283019655932542975) x304 (= x165 x151) (= x578 (x247 (x54 x236))) (>= x728 0) (<= 0 x575) (<= 0 x579) (not (= 3026235284 x300)) (= 3121116754 x300) (< 0 x578) (not (= 3017275065 x300)) (= x728 x564) (not (< x300 2376452955)) (= x182 x302) (<= x579 1461501637330902918203684832716283019655932542975) (<= x575 1461501637330902918203684832716283019655932542975)) x21) (and (=> x305 x184) (=> (and (and (and (= (x440 (x54 x614) (x307 4) 0) x323) (= x614 (x133 1461501637330902918203684832716283019655932542975 x423)) (= (x146 x125) x636) (<= x636 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x636) (= x60 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x636)) (= (x440 (x54 x564) x323 0) x125)) (or x60 (and (not x60) (and (= (x200 (- x636 x344)) x643) (= (x133 1461501637330902918203684832716283019655932542975 x423) x75) (not (> x344 x636)))))) (not x305)) x468)))))))
(assert (x607 x650))
(assert (x607 x208))
(assert (x607 x690))
(assert (x607 x589))
(assert (= (and x661 x42) x667))
(assert (= (and (not x333) x206) x4))
(assert (x607 x330))
(assert (x607 x529))
(assert (= x42 (and x502 (not x319))))
(assert (x607 x416))
(assert (x607 x381))
(assert (x607 x171))
(assert (= (x128 (x307 3026235284)) 3026235284))
(assert (= x267 (or x64 x3)))
(assert (= x639 (and x718 x418)))
(assert (x607 x38))
(assert (x607 x129))
(assert (= x675 (and (not x611) x214)))
(assert (x607 x306))
(assert (= x502 (or x364 x557)))
(assert (=> (>= 10000 x255) (= (x307 x255) (x54 x255))))
(assert (x607 x423))
(assert (x607 x190))
(assert (= (=> (and (and (= (+ x306 x287) x703) (= (x133 x631 x7) x463) (= (x440 (x54 x383) (x307 3) 0) x384) (= (ite (= 0 x458) 1 0) x695) (< (+ x306 x287) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (< 0 x463) (= x493 x466) (= (ite (> x458 31) 1 0) x606) (<= x239 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x239 0) (= x493 (+ x421 x243)) (<= 0 x287) (= (x269 x384) x239) (= (x133 x532 x606) x553) (= x110 x703) (= (x141 x553 x695) x631) (<= x421 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x301 (x252 (+ x239 x243))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x243 x421)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x287) (= x306 x44) (= x532 (ite (= 1 x382) 1 0)) (<= 0 x421)) (and (= x177 x703) (= x493 x529))) x19) x18))
(assert (x607 x126))
(assert (x607 x51))
(assert (x607 x268))
(assert (x607 x679))
(assert (x607 x168))
(assert (=> (<= x69 10000) (= (x307 x69) (x54 x69))))
(assert (x607 x9))
(assert (= x441 (x128 (x54 x441))))
(assert (x607 x443))
(assert (= (x54 404098525) (x307 404098525)))
(assert (= x64 (and x272 x63)))
(assert (x607 x290))
(assert (x607 x452))
(assert (= (x128 (x307 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (= (x54 1851080549) (x307 1851080549)))
(assert (=> (<= x348 10000) (= (x307 x348) (x54 x348))))
(assert (x607 x309))
(assert (=> (>= 10000 x560) (= (x307 x560) (x54 x560))))
(assert (x607 x181))
(assert (x607 x465))
(assert (x607 x194))
(assert (= x69 (x128 (x54 x69))))
(assert (x607 x195))
(assert (x370 x171 x595))
(assert (x607 x349))
(assert (= x565 (and (not x60) x363)))
(assert (x607 x575))
(assert (x607 x478))
(assert (= 170435703 (x128 (x307 170435703))))
(assert (x607 x119))
(assert (= (x128 (x54 x614)) x614))
(assert (x607 x559))
(assert (x607 x67))
(assert (x607 x479))
(assert (x607 x649))
(assert (x607 x142))
(assert (x607 x2))
(assert (x607 x569))
(assert (x430 1461501637330902918203684832716283019655932542975))
(assert (x607 x508))
(assert (=> (<= x470 10000) (= (x307 x470) (x54 x470))))
(assert (x607 x612))
(assert (x607 x540))
(assert (x32 x560))
(assert (= x686 (x128 (x54 x686))))
(assert (=> (>= 10000 x593) (= (x307 x593) (x54 x593))))
(assert (= (and x675 x630) x685))
(assert (= x724 (and x232 (not x590))))
(assert (x32 x65))
(assert (= x219 (and (not x10) x701)))
(assert (= x592 (or x603 x230)))
(assert (x32 x614))
(assert (x607 x411))
(assert (x607 x182))
(assert (x370 x721 x90))
(assert (x430 x126))
(assert (x607 x553))
(assert (x607 x326))
(assert (= x218 (and x10 x701)))
(assert (x607 x616))
(assert (x607 x50))
(assert (x72 x695))
(assert (x607 x345))
(assert (= x490 (=> (and (and (not (< x33 826074471)) (<= 0 x28) (> x582 0) (= (x247 (x54 x365)) x582) (= (x163 x481) x28) (= x515 x28) (>= 1461501637330902918203684832716283019655932542975 x404) (= x33 1889567281) (= (x440 (x54 x404) (x307 1) 0) x481) (= x404 x437) (<= x28 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x33 826074471))) (and (and (= x460 x517) (not (= 1851080549 x11)) (not (> 1289409798 x11)) (= x570 (x247 (x54 x236))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x517) (= x697 x515) (< 0 x570) (not (= x11 1289409798)) (> 2376452955 x11) (= x375 (x440 (x54 x560) (x307 3) 0)) (= x517 (x516 x375)) (not (> 826074471 x11)) (<= x560 1461501637330902918203684832716283019655932542975) (<= 0 x517) (= x437 x560) (= 1889567281 x11)) (and (or (and (not x635) (and (= (ite (not x132) 1 0) x526) (< 0 x268) (= x195 (div x405 x288)) (<= 0 x367) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x367) (= x268 (x133 x526 x208)) (= x597 x195) (= x131 (= x367 x632)) (= (mod (* x367 x460) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x405) (= (= x355 0) x284) (= x132 (= x288 0)) (= x208 (ite (or x284 x131) 1 0)) (= x632 (div x405 x460)))) (and (= x460 x597) x635)) (and (= (= x288 0) x635) (< 0 x491) (> 170435703 x567) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x288) (= x460 x355) (not (= x567 31576340)) (not (= 117300739 x567)) (>= x288 0) (= 128110906 x567) (> 2376452955 x567) (< x567 826074471) (= x491 (x247 (x54 x236))))))) x105)))
(assert (x32 x427))
(assert (x370 x631 x7))
(assert (x607 x601))
(assert (x607 x160))
(assert (= x348 (x128 (x54 x348))))
(assert (=> (<= x142 10000) (= (x307 x142) (x54 x142))))
(assert (x607 x631))
(assert (= true x418))
(assert (x32 x245))
(assert (x607 x461))
(assert (= (and (not x400) x257) x203))
(assert (x607 x564))
(assert (x607 x296))
(assert (x607 x404))
(assert (x607 x242))
(assert (x607 x460))
(assert (x607 x144))
(assert (x607 x483))
(assert (x657 x690 x190))
(assert (= (x307 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x54 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x607 x380))
(assert (= (x54 599290589) (x307 599290589)))
(assert (= x55 (=> (and (= x670 (= x412 2495578189)) (= x412 x336) (= 2495578189 x693)) (and (=> (and (and (and x511 (= x165 x276) (not (> 2376452955 x22)) (>= x407 0) (>= x23 0) (= x662 x302) (<= x77 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 3337024914 x22) (= x511 x670) (= x383 x504) (= x276 x407) (<= 0 x719) (<= x719 1461501637330902918203684832716283019655932542975) (not (= 2376452955 x22)) (>= x77 0) (<= x383 1461501637330902918203684832716283019655932542975) (= x22 2495578189) (< x22 3017275065) (<= x23 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x407) (> x637 0) (= x23 x564) (= x533 x243) (= x272 (= 0 x77)) (= x637 (x247 (x54 x236))) (= x662 0)) (or (and (= x243 x306) x272) (and (and (= x501 x306) (= x595 (ite (or x366 x377) 1 0)) (= x171 (ite (not x79) 1 0)) (= (= 0 x77) x79) (= x366 (= x243 0)) (= x720 (mod (* x591 x243) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x454 (div x181 x77)) (> x589 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x591) (= (= x124 x591) x377) (= (x252 (+ 1 x454)) x38) (= x181 (x200 (- x720 1))) (= x445 (= 0 x720)) (= (ite (not x445) x38 0) x501) (<= 0 x591) (= x124 (div x720 x243)) (= (x133 x171 x595) x589)) (not x272)))) x670) x514) (=> (and (not x670) (and x379 (= x507 x670) (= x177 x591) (= x529 x77) (= (not x507) x379))) x19)))))
(assert (x607 x124))
(assert (x32 x56))
(assert (x607 x522))
(assert (x72 x139))
(assert (x430 x90))
(assert (x607 x250))
(assert (x72 x673))
(assert (x607 x708))
(assert (= (x128 (x307 117300739)) 117300739))
(assert (x607 x328))
(assert (= (x54 2514000705) (x307 2514000705)))
(assert (= (=> (and (and (= x183 x446) (= x678 x505)) (and (= x549 x679) (> x434 0) (= x528 (x141 x144 x139)) (= x139 (ite (= 0 x618) 1 0)) (= (x133 x71 x359) x144) (= (x133 x528 x519) x434) (= (ite (= 1 x427) 1 0) x71) (= x359 (ite (< 31 x618) 1 0)))) x275) x450))
(assert (x607 x99))
(assert (= (and x724 (not x580)) x566))
(assert (= (x54 2495578189) (x307 2495578189)))
(assert (= (or x320 x218 x4) x251))
(assert (x607 x130))
(assert (x430 x496))
(assert (x370 x528 x519))
(assert (x607 x606))
(assert (= (x54 31576340) (x307 31576340)))
(assert (x607 x97))
(assert (=> (>= 10000 x216) (= (x307 x216) (x54 x216))))
(assert (x607 x266))
(assert (= (x128 (x307 4294967295)) 4294967295))
(assert (= x431 (or x492 x639)))
(assert (x607 x255))
(assert (x607 x192))
(assert (= 1889567281 (x128 (x307 1889567281))))
(assert (x607 x145))
(assert (x607 x519))
(assert (x607 x600))
(assert (=> (>= 10000 x365) (= (x307 x365) (x54 x365))))
(assert (= x283 (or x442 x285)))
(assert (x430 x423))
(assert (x430 x613))
(assert (x607 x572))
(assert (x607 x336))
(assert (= (=> (and (= x380 x666) (= (x200 (- x505 x212)) x666) (= 0 x90) (= x556 x102) (= x722 x707)) x456) x48))
(assert (= x383 (x128 (x54 x383))))
(assert (x657 x673 x162))
(assert (= (=> (and (= (= x584 0) x313) (or (not x313) x313)) x140) x256))
(assert (x607 x426))
(assert (x607 x528))
(assert (x607 x262))
(assert (x607 x329))
(assert (x607 x582))
(assert (x607 x728))
(assert (x607 x695))
(assert (x607 x298))
(assert (x32 x451))
(assert (= x523 (=> (and (and (not (= x527 170435703)) (> 826074471 x527) x599 (> x236 0) (= (x476 (x54 x236)) x9) x394 (<= x598 1461501637330902918203684832716283019655932542975) (= (> (x247 (x54 x236)) 0) x599) (= (not (= x617 x296)) x406) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x317) (= x487 (not (= x616 x658))) (= x437 x617) (= (x247 (x54 x236)) x85) (<= x51 1461501637330902918203684832716283019655932542975) (not (= 330252341 x527)) (not (> 170435703 x527)) (not (= x236 x365)) (<= x236 1461501637330902918203684832716283019655932542975) (<= 0 x437) (> x85 0) (>= 1461501637330902918203684832716283019655932542975 x437) (> 2376452955 x527) (= x51 x286) (= 404098525 x527) (= x147 x711) (>= x317 0) (>= x429 0) (= x336 x429) (= x394 (and x406 x487)) x205 (<= x365 1461501637330902918203684832716283019655932542975) (= x205 (> (x247 (x54 x365)) 0)) (= x296 x236) (<= x147 1461501637330902918203684832716283019655932542975) (<= 0 x67) (= (x476 (x54 x365)) x67) (>= x51 0) (>= x147 0) (> x365 0) (<= x429 4294967295) (>= x9 0) (= x616 x236) (= x658 x286) (<= 0 x598) (= x596 x317)) (and (and (and (= x317 x238) (= 404098525 x157) (not (= x157 170435703)) (<= 0 x317) (< x157 826074471) (not (< x157 170435703)) (< 0 x569) (= x708 x137) (< x157 2376452955) (<= x317 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x157 330252341)) (= (x247 (x54 x236)) x569)) (and (and (and (= (x571 x176) x714) (not (< x426 1289409798)) (= x348 x437) (= x426 1889567281) (>= x714 0) (= x176 (x440 (x54 x348) (x307 3) 0)) (= (x247 (x54 x236)) x390) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x714) (not (= 1851080549 x426)) (= x309 x714) (<= x348 1461501637330902918203684832716283019655932542975) (not (< x426 826074471)) (> 2376452955 x426) (not (= 1289409798 x426)) (< 0 x390) (= x699 x652)) (and (or (and (and (= x725 x149) (<= 0 x725) (= (ite (not x510) 1 0) x126) (< 0 x371) (= (= 0 x317) x510) (= (div x149 1) x550) (= x371 (x133 x126 x613)) (= x155 x543) (<= x725 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite x586 1 0) x613) (= (div x149 x317) x543) (= x586 (= x550 x725))) (not x718)) (and x718 (= 1 x155))) (and (< x58 826074471) (>= x317 0) (< x58 170435703) (not (= x58 117300739)) (> 2376452955 x58) (< 0 x242) (= (= x317 0) x718) (<= x317 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x150) (= x278 x309) (= x58 128110906) (= (x247 (x54 x236)) x242) (not (= x58 31576340))))) (and (< 0 x602) (>= x465 0) (= (x440 (x54 x593) (x307 1) 0) x197) (>= 1461501637330902918203684832716283019655932542975 x593) (not (< x29 826074471)) (= (>= x86 x137) x274) (= 1889567281 x29) (= x602 (x247 (x54 x365))) (= x238 x86) (= x593 x437) (= x699 x465) x274 (<= x465 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x465 (x403 x197)) (not (= x29 826074471))))) (and (= x518 1889567281) (< x518 2376452955) (= x437 x2) (< 0 x160) x668 (<= 0 x512) (>= 1461501637330902918203684832716283019655932542975 x2) (= x596 x706) (= (x571 x178) x512) (not (= x518 1851080549)) (not (< x518 1289409798)) (not (> 826074471 x518)) (= (x440 (x54 x2) (x307 3) 0) x178) (= (x247 (x54 x236)) x160) (<= x512 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x471) (= (not (= 0 x706)) x668) (= x512 x708) (not (= 1289409798 x518))))) x448)))
(assert (=> (>= 10000 x264) (= (x307 x264) (x54 x264))))
(assert (= x577 (and x267 (not x227))))
(assert (= x62 (or x535 (and (not x93) x251))))
(assert (= x84 (and x39 x524)))
(assert (= x622 (=> (and (or x669 (not x669)) (= (= 0 x7) x669)) x18)))
(assert (x607 x389))
(assert (= x224 (=> (and (and (= x288 x102) (= x380 x367)) (and (= x716 (ite (= x470 1) 1 0)) (= (x133 x721 x90) x180) (= (ite (> x722 31) 1 0) x676) (< 0 x180) (= x690 (x133 x716 x676)) (= x721 (x141 x690 x190)) (= x190 (ite (= 0 x722) 1 0)) (= x211 x212))) x490)))
(assert (x607 x648))
(assert (x607 x527))
(assert (x607 x640))
(assert (= x61 (and x260 (not x489))))
(assert (x607 x454))
(assert (= x91 (and (not x500) x480)))
(assert (= (x54 128110906) (x307 128110906)))
(assert (x32 x404))
(assert (= (x54 3337024914) (x307 3337024914)))
(assert (x607 x286))
(assert (= (=> (and (= x461 (x477 x57)) (= x620 (x200 (- x127 4))) (<= x461 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x620) (and (= true (<= x620 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 64 x620))) x172) (= x362 x331) (<= 0 x529) (= 68 x127) (= x255 x624) (not (< x177 x362)) (= x57 (x440 (x54 x427) (x307 3) 0)) (<= x177 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x127 4)) (< 0 x559) (= x439 (x200 (- x529 x549))) (= x555 (x200 (- x177 x362))) (not (= x24 826074471)) (not (= x24 1889567281)) (<= 0 x461) (not (> x549 x461)) (not (> 826074471 x24)) (<= x529 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x200 (- x177 x362)) x81) (>= x177 0) (= x24 2835717307) (not (= x24 2514000705)) (= x499 (x200 (- x529 x549))) (= (x133 1461501637330902918203684832716283019655932542975 x315) x427) (= (x200 (- x461 x549)) x164) (= x189 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= (x247 (x54 x365)) x559) (= x373 128)) (and (=> (and (not x172) (and (= x436 (= x255 x624)) (= x255 x508))) (and (=> (not x436) x539) (=> (and (and (= (< x484 x362) x199) (<= x484 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x440 (x54 x236) (x307 1) 0) x316) (= x484 (x521 x316)) (>= x484 0) (= x196 x331)) x436) (and (=> (and (= (> x331 x484) x400) (not x199)) (and (=> (and (not x400) (and (= (x200 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x331)) x424) (<= x416 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x416 (x248 x680)) (= x680 (x440 (x54 x255) (x307 1) 0)) (= (x440 (x54 x236) (x307 1) 0) x152) (= x562 (< x424 x416)) (= x15 (x200 (- x484 x331))) (>= x416 0))) (and (=> x562 x539) (=> (and (not x562) (and (= x415 (x252 (+ x416 x331))) (= x293 (< x415 x416)))) (and (=> (and (not x293) (and (= (x440 (x54 x255) (x307 1) 0) x689) (= 1 x519) (= x618 32) (= x446 x499) (= x678 x555))) x395) (=> x293 x539))))) (=> x400 x539))) (=> x199 x539))))) (=> x172 x539))) x121))
(assert (x607 x365))
(assert (= (=> (and (or x93 (not x93)) (= x93 (= 0 x90))) x224) x456))
(assert (x607 x110))
(assert (=> (<= x451 10000) (= (x307 x451) (x54 x451))))
(assert (x607 x106))
(assert (x607 x647))
(assert (x607 x216))
(assert (x607 x263))
(assert (x607 x217))
(assert (= (x307 2835717307) (x54 2835717307)))
(assert (x607 x458))
(assert (x607 x621))
(assert (x607 x77))
(assert (x607 x518))
(assert (x430 x528))
(assert (= x2 (x128 (x54 x2))))
(assert (x607 x396))
(assert (x607 x541))
(assert (x607 x705))
(assert (x607 x58))
(assert (x607 x459))
(assert (= x539 (=> (and (= x314 x678) (= x446 x499) (= (x200 (- x177 x362)) x314) (= 0 x519) (= x609 x618)) x395)))
(assert (= x365 (x128 (x54 x365))))
(assert (x607 x187))
(assert (x607 x721))
(assert (= (x307 1461501637330902918203684832716283019655932542975) (x54 1461501637330902918203684832716283019655932542975)))
(assert (x607 x373))
(assert (x370 x640 x396))
(assert (= x338 (and (not x562) x203)))
(assert (= (or x548 x633 (and x577 (not x114)) (and x259 (not x558)) (and x294 x220) (and x232 x590) (and x227 x267) (and x500 x480) x453) x638))
(assert (= (or x565 x482) x209))
(assert (= x696 (and x635 x615)))
(assert (x607 x89))
(assert (= (or x202 (and (not x313) x634)) x109))
(assert (= (and x21 x241) x277))
(assert (x607 x25))
(assert (= x568 (=> (and (= x452 (x133 1461501637330902918203684832716283019655932542975 x315)) (= x319 (= x564 x452))) (and (=> x319 x121) (=> (and (not x319) (and (and (= x661 (= x378 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x686 (x133 1461501637330902918203684832716283019655932542975 x315)) (= x378 (x5 x27)) (<= x378 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x378 0) (= x27 (x440 (x54 x564) x583 0)) (= x583 (x440 (x54 x686) (x307 4) 0))) (or (and (and (= (x440 (x54 x564) x87 0) x83) (not (> x549 x378)) (= (x133 1461501637330902918203684832716283019655932542975 x315) x65) (= x411 (x200 (- x378 x549))) (= (x440 (x54 x65) (x307 4) 0) x87)) (not x661)) x661))) x231)))))
(assert (= x49 (or x310 (and x45 (not x669)))))
(assert (x607 x517))
(assert (= (=> (and (or (and (= x344 x212) x467) (and (and (= (ite (or x186 x312) 1 0) x396) (= x212 x381) (= x546 (= x183 0)) (<= x505 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x505 0) (= x312 (= x185 x505)) (= (div x297 x183) x381) (= (x133 x640 x396) x522) (= x186 (= 0 x344)) (= (div x297 x344) x185) (> x522 0) (= (mod (* x505 x344) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x297) (= (ite (not x546) 1 0) x640)) (not x467))) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (= (= 0 x183) x467) (>= x183 0))) x413) x184))
(assert (= (x128 (x307 404098525)) 404098525))
(assert (x607 x536))
(assert (x607 x367))
(assert (x607 x357))
(assert (= (and x385 x670) x63))
(assert (x607 x579))
(assert (x607 x198))
(assert (x607 x78))
(assert (= x140 (=> (and (and (< (+ x175 x101) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x92 (x691 x173)) (= x506 (x252 (+ x101 x92))) (= x298 (ite (= 1 x372) 1 0)) (<= x332 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x175) (= x588 x581) (= (x440 (x54 x451) (x307 3) 0) x173) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x175) (<= 0 x332) (= (x133 x457 x584) x106) (= x99 x101) (= x162 (ite (= 0 x100) 1 0)) (= (x141 x673 x162) x457) (= x673 (x133 x298 x496)) (= x311 x705) (= (ite (> x100 31) 1 0) x496) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92) (< 0 x106) (= x311 (+ x175 x101)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x223 x332)) (= (+ x223 x332) x581) (>= x92 0)) (and (= x311 x77) (= x581 x591))) x55)))
(assert (= (and (not x294) x220) x480))
(assert (x607 x26))
(assert (x607 x609))
(assert (x607 x496))
(assert (= (and (not x249) x115) x214))
(assert (x32 x593))
(assert (x607 x135))
(assert (x607 x185))
(assert (x607 x471))
(assert (= (and x642 x74) x318))
(assert (x607 x644))
(assert (x72 x553))
(assert (= 599290589 (x128 (x307 599290589))))
(assert (x607 x698))
(assert (x607 x164))
(assert (x32 x264))
(assert (x430 x676))
(assert (x607 x532))
(assert (x607 x177))
(assert (x607 x699))
(assert (x657 x144 x139))
(assert (x607 x391))
(assert (x607 x598))
(assert (x607 x264))
(assert (x607 x595))
(assert (x32 x470))
(assert (x607 x674))
(assert (x607 x23))
(assert (x607 x530))
(assert (= x387 (and x91 (not x108))))
(assert (= (and x203 x562) x425))
(assert (x607 x88))
(assert (x607 x297))
(assert (x607 x693))
(assert (= x35 (and x489 x260)))
(assert (x607 x81))
(assert (x32 x216))
(assert (= x564 (x128 (x54 x564))))
(assert (x607 x95))
(assert (x430 x71))
(assert (x607 x52))
(assert (x607 x150))
(assert (x607 x292))
(assert (= (x128 (x307 826074471)) 826074471))
(assert (= (x128 (x307 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x370 x692 x601))
(assert (= (or x495 x729) x701))
(assert (x607 x139))
(assert (x607 x276))
(assert (= x514 (=> (and (= x69 x23) (= (x247 (x54 x365)) x488) (= 100 x435) (= x111 599290589) (= x600 (x200 (- x435 4))) (= x145 16156842317565293874272834530371880720966471053262404558597773956279093428224) (< 0 x488) (= 128 x329) (not (< x435 4)) (not (= 404098525 x111)) (not (= x111 157198259)) (not (= 117300739 x111)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x600) (and (= true (<= x600 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 96 x600))) x227) (= x236 x264) (< x111 826074471) (= x306 x391)) (and (=> x227 x376) (=> (and (and (= x69 x170) (= true x114)) (not x227)) (and (=> (and (and (= x558 true) (= x264 x349)) x114) (and (=> (not x558) x376) (=> (and (and (<= 0 x95) (= x95 (x627 x295)) (= (x440 (x54 x69) (x307 1) 0) x295) (= x590 (< x95 x306)) (<= x95 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x391 x389)) x558) (and (=> (and (not x590) (= x580 (> x391 x95))) (and (=> x580 x376) (=> (and (not x580) (and (= (x136 x671) x43) (= (x440 (x54 x264) (x307 1) 0) x671) (= x135 (x200 (- x95 x391))) (= x409 (x440 (x54 x69) (x307 1) 0)) (= x438 (> x43 x479)) (>= x43 0) (= (x200 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391)) x479) (<= x43 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x438 x376) (=> (and (not x438) (and (= (> x43 x356) x294) (= (x252 (+ x391 x43)) x356))) (and (=> x294 x376) (=> (and (and (= x585 (x440 (x54 x236) x94 0)) (= (x440 (x54 x69) (x307 2) 0) x94) (>= x291 0) (= (< x291 x391) x500) (<= x291 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x107 x585) x291) (= x420 (x440 (x54 x264) (x307 1) 0))) (not x294)) (and (=> x500 x376) (=> (and (= (< x291 x391) x108) (not x500)) (and (=> x108 x376) (=> (and (not x108) (and (= x77 x421) (= 1 x7) (= (x200 (- x291 x391)) x563) (= x591 x287) (= 32 x458))) x622))))))))))) (=> x590 x376))))) (=> (not x114) x376)))))))
(assert (= 3337024914 (x128 (x307 3337024914))))
(assert (x607 x676))
(assert (x607 x17))
(assert (= (or x641 x209) x289))
(assert (x607 x258))
(assert (x607 x636))
(assert (= (x128 (x54 x264)) x264))
(assert (x607 x44))
(assert (= (and x525 x419) x118))
(assert (= 128110906 (x128 (x307 128110906))))
(assert (= (x54 3017275065) (x307 3017275065)))
(assert (x607 x76))
(assert (=> (<= x383 10000) (= (x307 x383) (x54 x383))))
(assert (x430 x721))
(assert (= (x128 (x307 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (x607 x374))
(assert (x607 x645))
(assert (x72 x190))
(assert (= (x128 (x307 2376452955)) 2376452955))
(assert (= (x128 (x307 2495578189)) 2495578189))
(assert (x46 x315))
(assert (x607 x22))
(assert (x607 x455))
(assert (= (x54 170435703) (x307 170435703)))
(assert (x607 x662))
(assert (x607 x457))
(assert (x607 x6))
(assert (x430 x396))
(assert (x607 x13))
(assert (x607 x547))
(assert (x607 x355))
(assert (x607 x584))
(assert (= (and x665 x219) x417))
(assert (= x216 (x128 (x54 x216))))
(assert (= x352 (or (and x683 (not x436)) (and x172 x592) x425 (and x244 x199) x191 (and x293 x338))))
(assert (= (x54 1289409798) (x307 1289409798)))
(assert (x607 x86))
(assert (x607 x75))
(assert (= (and x580 x724) x453))
(assert (x32 x236))
(assert (= (and x84 (not x104)) x557))
(assert (x370 x71 x359))
(assert (x607 x602))
(assert (x607 x29))
(assert (= x16 (and x615 (not x635))))
(assert (x657 x553 x695))
(assert (x607 x576))
(assert (= x206 (and x1 (not x271))))
(assert (x607 x291))
(assert (x607 x166))
(assert (= (and (not x156) x431) x542))
(assert (=> (>= 10000 x686) (= (x54 x686) (x307 x686))))
(assert (x32 x564))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 (x307 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (x128 (x54 x593)) x593))
(assert (=> (<= x2 10000) (= (x307 x2) (x54 x2))))
(assert (= x230 (and x502 x319)))
(assert (x607 x437))
(assert (x607 x513))
(assert (x607 x359))
(assert (x607 x405))
(assert (= x231 x121))
(assert (x607 x111))
(assert (x607 x15))
(assert (= x260 (and (not x34) x47)))
(assert (= (or x542 x109) x385))
(assert (x607 x472))
(assert (= (x54 330252341) (x307 330252341)))
(assert (x607 x193))
(assert (x72 x690))
(assert (x607 x706))
(assert (x607 x157))
(assert (x607 x412))
(assert (x607 x102))
(assert (x607 x350))
(assert (x607 x100))
(assert (x607 x103))
(assert (x607 x435))
(assert (x32 x2))
(assert (x607 x65))
(assert (= x53 (=> (and (= x317 x175) (= x332 x725) (= x584 0) (= x78 x100)) x256)))
(assert (x607 x433))
(assert (x430 x584))
(assert (x72 x162))
(assert (= x495 (and (not x467) x289)))
(assert (x430 x601))
(assert (= (and (not x630) x675) x475))
(assert (x607 x170))
(assert (= (and x577 x114) x259))
(assert (x607 x162))
(assert (x430 x716))
(assert (x607 x551))
(assert (x607 x69))
(assert (x607 x686))
(assert (x607 x464))
(assert (x607 x8))
(assert (= (or x369 x475) x634))
(assert (x607 x288))
(assert (= x393 (=> (and (not (> 4 x13)) (not (= 404098525 x6)) (= 100 x13) (not (= 0 x101)) (not (= 117300739 x6)) (= 128 x644) (not (= 157198259 x6)) (= x6 599290589) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x612) (= x130 x216) (= (x247 (x54 x365)) x572) (= (or (> x88 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x88) true) (< x88 96))) x148) (= x96 x223) (< 0 x572) (> 826074471 x6) (= x236 x142) (= (x200 (- x13 4)) x88)) (and (=> x148 x53) (=> (and (and (= true x642) (= x216 x462)) (not x148)) (and (=> (not x642) x53) (=> (and (and (= x664 x142) (= x80 true)) x642) (and (=> (not x80) x53) (=> (and (and (>= x25 0) (<= x25 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x96 x538) (= x34 (> x223 x25)) (= (x403 x98) x25) (= x98 (x440 (x54 x216) (x307 1) 0))) x80) (and (=> (and (not x34) (= (< x25 x96) x489)) (and (=> (and (and (= (x353 x138) x14) (= (< x198 x14) x544) (= x513 (x200 (- x25 x96))) (= (x440 (x54 x142) (x307 1) 0) x138) (= x207 (x440 (x54 x216) (x307 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x14) (<= 0 x14) (= x198 (x200 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x96)))) (not x489)) (and (=> (and (not x544) (and (= x444 (x252 (+ x96 x14))) (= x249 (> x14 x444)))) (and (=> (and (and (= x625 (x440 (x54 x142) (x307 1) 0)) (= x611 (< x89 x96)) (= x281 (x440 (x54 x216) (x307 2) 0)) (= (x440 (x54 x236) x281 0) x561) (= x89 (x715 x561)) (>= x89 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x89)) (not x249)) (and (=> (and (= (< x89 x96) x630) (not x611)) (and (=> x630 x53) (=> (and (not x630) (and (= x537 (x440 (x54 x216) (x307 2) 0)) (= 32 x100) (= x175 x317) (= x347 (x440 (x54 x236) x537 0)) (= x534 (x200 (- x89 x96))) (= x725 x332) (= 1 x584))) x256))) (=> x611 x53))) (=> x249 x53))) (=> x544 x53))) (=> x489 x53))) (=> x34 x53)))))))))))
(assert (x430 x692))
(assert (x607 x470))
(assert (x607 x287))
(assert (x430 x457))
(assert (x607 x390))
(assert (= x524 (or x49 x116)))
(assert (x607 x243))
(assert (= (or (and x525 (not x419)) x118) x608))
(assert (x607 x378))
(assert (x607 x11))
(assert (x430 x606))
(assert (x607 x597))
(assert (x607 x720))
(assert (x607 x24))
(assert (= x548 (and x438 x566)))
(assert (x607 x351))
(assert (= x202 (and x634 x313)))
(assert (x607 x196))
(assert (x607 x117))
(assert (=> (>= 10000 x56) (= (x307 x56) (x54 x56))))
(assert (x607 x43))
(assert (x607 x137))
(assert (x607 x587))
(assert (x607 x331))
(assert (= (x307 1889567281) (x54 1889567281)))
(assert (= (and x156 x431) x702))
(assert (= 2835717307 (x128 (x307 2835717307))))
(assert (x607 x555))
(assert (x72 x144))
(assert (x607 x570))
(assert (= (or x667 x694) x603))
(assert (= 1851080549 (x128 (x307 1851080549))))
(assert (= x615 (or x62 x343)))
(assert (x607 x462))
(assert (= x244 (and x436 x683)))
(assert (= x115 (and x61 (not x544))))
(assert (= (x128 (x307 2514000705)) 2514000705))
(assert (x607 x504))
(assert (x607 x533))
(assert (x607 x301))
(assert (= x404 (x128 (x54 x404))))
(assert (x607 x20))
(assert (= x451 (x128 (x54 x451))))
(assert (x607 x446))
(assert (= x442 (and x702 (not x414))))
(assert (x607 x236))
(assert (= x554 (and (not x39) x524)))
(assert (x607 x113))
(assert (x607 x382))
(assert (x607 x515))
(assert (x607 x466))
(assert (= (x54 117300739) (x307 117300739)))
(assert (= x255 (x128 (x54 x255))))
(assert (x607 x383))
(assert (x607 x143))
(assert (x607 x90))
(check-sat)
(exit)