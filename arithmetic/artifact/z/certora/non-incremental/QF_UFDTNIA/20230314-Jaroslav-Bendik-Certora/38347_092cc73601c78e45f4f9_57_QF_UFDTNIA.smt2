(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x375 0)) (((x189 (x417 x375) (x214 x375) (x171 Int)) (x335 (x43 Int)) (x194 (x402 x375) (x242 Int)))))
(declare-fun x105 () Int)
(declare-fun x312 () x375)
(declare-fun x379 (Int) Int)
(declare-fun x199 () Int)
(declare-fun x401 () Int)
(declare-fun x150 () Int)
(declare-fun x301 () Int)
(declare-fun x193 () Int)
(declare-fun x266 () Int)
(declare-fun x423 () Int)
(declare-fun x420 () Bool)
(declare-fun x109 () Int)
(declare-fun x179 () Int)
(declare-fun x428 () x375)
(declare-fun x341 () Int)
(declare-fun x206 () Int)
(declare-fun x308 () Int)
(declare-fun x263 () Int)
(declare-fun x39 () Int)
(declare-fun x218 () x375)
(declare-fun x125 () Bool)
(declare-fun x182 () Int)
(declare-fun x2 () Int)
(declare-fun x53 () x375)
(declare-fun x135 () Int)
(declare-fun x371 () x375)
(declare-fun x121 () Int)
(declare-fun x264 () Int)
(declare-fun x288 () Int)
(declare-fun x42 () Int)
(declare-fun x94 () Int)
(declare-fun x390 (Int) Int)
(declare-fun x346 () Int)
(declare-fun x397 () Int)
(declare-fun x303 (Int) Int)
(declare-fun x185 () Int)
(declare-fun x198 () Int)
(declare-fun x114 (Int) Int)
(declare-fun x245 () Int)
(declare-fun x406 () Int)
(declare-fun x156 () Int)
(declare-fun x284 () Bool)
(declare-fun x172 () Int)
(declare-fun x106 () x375)
(declare-fun x66 () Int)
(declare-fun x132 () Int)
(declare-fun x376 () x375)
(declare-fun x131 () Int)
(declare-fun x323 () Int)
(declare-fun x394 () Bool)
(declare-fun x35 () Int)
(declare-fun x96 () Int)
(declare-fun x291 () x375)
(declare-fun x307 () Int)
(declare-fun x236 () Int)
(declare-fun x95 () Int)
(declare-fun x325 () Int)
(declare-fun x243 () Int)
(declare-fun x34 () Bool)
(declare-fun x222 () Int)
(declare-fun x11 () Int)
(declare-fun x302 () Int)
(declare-fun x10 () Int)
(declare-fun x313 () Int)
(declare-fun x127 () Int)
(declare-fun x355 () Int)
(declare-fun x130 () Bool)
(declare-fun x208 () Int)
(declare-fun x103 () Int)
(declare-fun x360 () Int)
(declare-fun x342 () Int)
(declare-fun x352 () Int)
(declare-fun x56 () Int)
(declare-fun x350 () Int)
(declare-fun x48 () Int)
(declare-fun x210 (Int) Int)
(declare-fun x50 () x375)
(declare-fun x216 () Int)
(declare-fun x225 () Int)
(declare-fun x196 () Int)
(declare-fun x186 () Int)
(declare-fun x215 () Int)
(declare-fun x149 () Int)
(declare-fun x351 () Int)
(declare-fun x413 () Int)
(declare-fun x33 () Bool)
(declare-fun x191 () Int)
(declare-fun x97 (Int) Int)
(declare-fun x136 () Bool)
(declare-fun x207 () Int)
(declare-fun x359 () Int)
(declare-fun x415 () Int)
(declare-fun x294 () Int)
(declare-fun x256 () Int)
(declare-fun x400 () Int)
(declare-fun x304 () Int)
(declare-fun x31 () Int)
(declare-fun x290 (x375) Int)
(declare-fun x328 () Int)
(declare-fun x418 () Int)
(declare-fun x283 () Int)
(declare-fun x119 () Int)
(declare-fun x25 () Int)
(declare-fun x277 () Bool)
(declare-fun x358 () Int)
(declare-fun x157 () Int)
(declare-fun x244 () Int)
(declare-fun x338 () Bool)
(declare-fun x333 () Int)
(declare-fun x249 () Int)
(declare-fun x61 (Int Int) Int)
(declare-fun x334 (Int) Int)
(declare-fun x212 () Int)
(declare-fun x422 () Int)
(declare-fun x148 () Int)
(declare-fun x273 () Int)
(declare-fun x59 () Bool)
(declare-fun x337 () Bool)
(declare-fun x285 () Int)
(declare-fun x373 () Int)
(declare-fun x29 () Int)
(declare-fun x175 (Int Int) Int)
(declare-fun x146 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x246 () Int)
(declare-fun x336 () Int)
(declare-fun x51 () Int)
(declare-fun x427 () Int)
(declare-fun x107 () Int)
(declare-fun x44 () Int)
(declare-fun x67 () Int)
(declare-fun x269 () Int)
(declare-fun x261 () x375)
(declare-fun x7 () Int)
(declare-fun x141 () Int)
(declare-fun x321 () Int)
(declare-fun x147 () Int)
(declare-fun x190 () Int)
(declare-fun x159 () Int)
(declare-fun x345 () Bool)
(declare-fun x255 () Int)
(declare-fun x110 () Int)
(declare-fun x251 () Bool)
(declare-fun x75 () Int)
(declare-fun x201 () Int)
(declare-fun x241 () Int)
(declare-fun x89 () Int)
(declare-fun x315 () Int)
(declare-fun x188 (x375) Int)
(declare-fun x393 () Int)
(declare-fun x306 () Int)
(declare-fun x271 () Int)
(declare-fun x26 () Int)
(declare-fun x101 () Int)
(declare-fun x384 () Int)
(declare-fun x421 () Int)
(declare-fun x383 () Int)
(declare-fun x311 (Int) Int)
(declare-fun x349 () Int)
(declare-fun x229 () Int)
(declare-fun x276 (Int) x375)
(declare-fun x152 () Int)
(declare-fun x378 () Int)
(declare-fun x237 () Int)
(declare-fun x195 () Int)
(declare-fun x326 () x375)
(declare-fun x412 () Int)
(declare-fun x145 () Int)
(declare-fun x37 () Int)
(declare-fun x411 () Int)
(declare-fun x65 () Int)
(declare-fun x386 () Int)
(declare-fun x267 () Int)
(declare-fun x278 (Int) Int)
(declare-fun x305 () Int)
(declare-fun x362 () Int)
(declare-fun x385 () Int)
(declare-fun x361 () Int)
(declare-fun x85 () Int)
(declare-fun x15 () Int)
(declare-fun x409 () Int)
(declare-fun x279 () Int)
(declare-fun x64 () Int)
(declare-fun x69 () Int)
(declare-fun x254 () Int)
(declare-fun x92 () Int)
(declare-fun x60 () Int)
(declare-fun x259 () Int)
(declare-fun x13 () Int)
(declare-fun x209 () Bool)
(declare-fun x73 () x375)
(declare-fun x282 () Int)
(declare-fun x184 () Int)
(declare-fun x353 () Bool)
(declare-fun x426 () Int)
(declare-fun x268 () Int)
(declare-fun x253 () Int)
(declare-fun x240 () Bool)
(declare-fun x115 () Bool)
(declare-fun x12 () Int)
(declare-fun x299 () x375)
(declare-fun x163 () Bool)
(declare-fun x227 () Bool)
(declare-fun x403 () Bool)
(declare-fun x102 () x375)
(declare-fun x391 () Int)
(declare-fun x137 () Int)
(declare-fun x407 () Int)
(declare-fun x370 () Int)
(declare-fun x8 () Bool)
(declare-fun x133 () Int)
(declare-fun x18 () Int)
(declare-fun x262 () Bool)
(declare-fun x380 () Bool)
(declare-fun x399 () Int)
(declare-fun x203 () Int)
(declare-fun x233 () Int)
(declare-fun x62 () x375)
(declare-fun x230 () x375)
(declare-fun x297 (Int) Int)
(declare-fun x419 () Int)
(declare-fun x87 () Int)
(declare-fun x90 () Int)
(declare-fun x9 () Bool)
(declare-fun x32 () Int)
(declare-fun x153 () Int)
(declare-fun x368 () Int)
(declare-fun x287 () Int)
(declare-fun x388 () x375)
(declare-fun x248 () Int)
(declare-fun x139 () Int)
(declare-fun x405 () Int)
(declare-fun x272 () Int)
(declare-fun x70 () Int)
(declare-fun x124 () Int)
(declare-fun x369 () Int)
(declare-fun x71 () Int)
(declare-fun x41 () Int)
(declare-fun x389 () Int)
(declare-fun x78 () Int)
(declare-fun x270 () Int)
(declare-fun x224 () Int)
(declare-fun x320 () Int)
(declare-fun x45 () Bool)
(declare-fun x339 () Int)
(declare-fun x357 () Int)
(declare-fun x120 () Int)
(declare-fun x322 () Int)
(declare-fun x187 () Int)
(declare-fun x429 () Int)
(declare-fun x178 () Int)
(declare-fun x260 () Bool)
(declare-fun x143 () Int)
(declare-fun x387 () Int)
(declare-fun x289 () Int)
(declare-fun x410 () Int)
(declare-fun x235 () Int)
(declare-fun x181 () Int)
(declare-fun x128 () Int)
(declare-fun x374 () Int)
(declare-fun x414 () Int)
(declare-fun x170 () Int)
(declare-fun x54 () Int)
(declare-fun x22 () Bool)
(declare-fun x173 () Int)
(declare-fun x238 () Int)
(declare-fun x340 (Int) Int)
(declare-fun x158 () Bool)
(declare-fun x36 () Int)
(declare-fun x327 (Int) Int)
(declare-fun x84 () Int)
(declare-fun x316 () Int)
(declare-fun x99 () x375)
(declare-fun x296 () Int)
(declare-fun x364 () Int)
(declare-fun x154 () Int)
(declare-fun x200 (x375) Int)
(declare-fun x232 () x375)
(declare-fun x347 () Int)
(declare-fun x217 () Int)
(declare-fun x134 () Int)
(declare-fun x52 () Int)
(declare-fun x250 () Bool)
(declare-fun x231 () Int)
(declare-fun x408 (Int) Int)
(declare-fun x404 () Int)
(declare-fun x151 () Int)
(declare-fun x204 () Int)
(declare-fun x28 () Int)
(declare-fun x309 () Int)
(declare-fun x17 (Int) Int)
(declare-fun x300 (x375) Int)
(declare-fun x275 () Int)
(declare-fun x219 () Int)
(declare-fun x77 () Int)
(declare-fun x252 () Int)
(declare-fun x27 () Int)
(declare-fun x220 () Int)
(declare-fun x226 () Int)
(declare-fun x100 () Int)
(declare-fun x392 () Int)
(declare-fun x3 () Int)
(declare-fun x176 () x375)
(declare-fun x129 () Int)
(declare-fun x221 () Int)
(declare-fun x122 () Int)
(declare-fun x329 () Int)
(declare-fun x183 () Int)
(declare-fun x286 () Int)
(declare-fun x332 () Bool)
(declare-fun x23 () Int)
(declare-fun x58 () Int)
(declare-fun x354 () Bool)
(declare-fun x372 () x375)
(declare-fun x280 () Int)
(declare-fun x144 () Int)
(declare-fun x363 () Int)
(declare-fun x343 () Int)
(declare-fun x57 () Bool)
(declare-fun x317 () Int)
(declare-fun x112 (Int) Int)
(declare-fun x47 () Int)
(declare-fun x292 () Int)
(declare-fun x174 () Int)
(declare-fun x126 () Int)
(declare-fun x197 () Int)
(declare-fun x19 () Int)
(declare-fun x223 () Int)
(declare-fun x281 () Int)
(declare-fun x166 () Int)
(declare-fun x93 () Int)
(declare-fun x116 () Int)
(declare-fun x21 (Int) Int)
(declare-fun x162 () Int)
(declare-fun x164 () Bool)
(declare-fun x247 () Int)
(declare-fun x213 () x375)
(declare-fun x113 () Int)
(declare-fun x117 () Bool)
(declare-fun x228 () x375)
(declare-fun x424 () Int)
(declare-fun x138 () Int)
(declare-fun x202 () Int)
(declare-fun x30 () x375)
(declare-fun x192 () Int)
(declare-fun x239 () Int)
(declare-fun x314 () Bool)
(declare-fun x177 () Int)
(declare-fun x40 () Int)
(declare-fun x211 () x375)
(declare-fun x168 () Bool)
(declare-fun x20 () Int)
(declare-fun x381 () Int)
(define-fun x108 ((x375 x375) (x79 Int)) x375 (ite ((_ is x194) x375) (x194 (x402 x375) (+ x79 (x242 x375))) (ite ((_ is x189) x375) (x189 (x417 x375) (x214 x375) (+ x79 (x171 x375))) (x335 (+ (x43 x375) x79)))))
(define-fun x72 ((x24 Int)) Int (ite (and (>= x24 0) (< x24 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x24 (- x24 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x319 ((x24 Int)) Int (ite (and (< x24 0) (>= x24 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x24) x24))
(define-fun x74 ((x55 Int)) Bool (and (<= 0 x55) (< x55 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x365 ((x55 Int)) Bool (and (= (x175 x55 115792089237316195423570985008687907853269984665640564039457584007913129639935) x55) (= (x175 115792089237316195423570985008687907853269984665640564039457584007913129639935 x55) x55)))
(define-fun x160 ((x55 Int)) Bool (and (= (x175 x55 0) 0) (= (x175 0 x55) 0)))
(define-fun x83 ((x55 Int)) Bool (= x55 (x175 x55 x55)))
(define-fun x104 ((x55 Int)) Bool (and (x83 x55) (x365 x55) (x160 x55)))
(define-fun x140 ((x55 Int) (x425 Int)) Bool (= (x175 x55 x425) (x175 x425 x55)))
(define-fun x310 ((x55 Int) (x425 Int)) Bool (and (=> (>= x425 0) (<= (x175 x55 x425) x425)) (<= 0 (x175 x55 x425)) (=> (>= x55 0) (>= x55 (x175 x55 x425)))))
(define-fun x1 ((x55 Int) (x425 Int)) Bool (and (x310 x55 x425) (x140 x55 x425)))
(define-fun x81 ((x55 Int)) Bool (= (x175 x55 4294967295) (mod x55 4294967296)))
(define-fun x330 ((x55 Int)) Bool (and (x1 x55 4294967295) (x81 x55)))
(define-fun x167 ((x55 Int)) Bool (= (x175 x55 340282366920938463463374607431768211455) (mod x55 340282366920938463463374607431768211456)))
(define-fun x76 ((x55 Int)) Bool (and (x1 x55 340282366920938463463374607431768211455) (x167 x55)))
(define-fun x6 ((x55 Int)) Bool (= (ite (> 170141183460469231731687303715884105728 (x175 x55 340282366920938463463374607431768211455)) (x175 x55 340282366920938463463374607431768211455) (+ (x175 x55 340282366920938463463374607431768211455) 115792089237316195423570985008687907852929702298719625575994209400481361428480)) (x278 x55)))
(define-fun x46 ((x55 Int)) Bool (= (+ (x175 x55 115792089237316195423570985008687907852929702298719625575994209400481361428480) (mod x55 340282366920938463463374607431768211456)) (mod x55 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x123 ((x55 Int)) Bool (and (x1 x55 115792089237316195423570985008687907852929702298719625575994209400481361428480) (x46 x55)))
(define-fun x377 ((x55 Int)) Bool (= (+ (mod x55 4294967296) (x175 x55 115792089237316195423570985008687907853269984665640564039457584007908834672640)) (mod x55 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x5 ((x55 Int)) Bool (and (x1 x55 115792089237316195423570985008687907853269984665640564039457584007908834672640) (x377 x55)))
(define-fun x265 ((x257 Int)) Int (ite (= x257 128) x94 (x97 x257)))
(define-fun x86 ((x257 Int)) Int (ite (= x257 160) x328 (x265 x257)))
(define-fun x274 ((x257 Int)) Int (ite (= x257 192) x409 (x86 x257)))
(define-fun x331 ((x257 Int)) Int (ite (= 224 x257) x184 (x274 x257)))
(define-fun x180 ((x257 Int)) Int (ite (= x257 256) x23 (x331 x257)))
(define-fun x344 ((x257 Int)) Int (ite (= 128 x257) x255 (x334 x257)))
(define-fun x396 ((x257 Int)) Int (ite (= 160 x257) x154 (x327 x257)))
(define-fun x98 ((x257 Int)) Int (ite (= x257 192) x357 (x210 x257)))
(define-fun x318 ((x257 Int)) Int (ite (= 224 x257) x266 (x112 x257)))
(define-fun x348 ((x257 Int)) Int (ite (= x257 256) x128 (x303 x257)))
(define-fun x16 ((x257 Int)) Int (ite (= x257 288) x349 (x297 x257)))
(define-fun x395 ((x257 Int)) Int (ite (= 512 x257) x384 (x114 x257)))
(define-fun x382 ((x257 Int)) Int (ite (= 544 x257) x292 (x395 x257)))
(define-fun x356 ((x257 Int)) Int (ite (= x257 576) x392 (x382 x257)))
(define-fun x49 ((x257 Int)) Int (ite (= x257 608) x233 (x356 x257)))
(define-fun x14 ((x257 Int)) Int (ite (= 640 x257) x13 (x49 x257)))
(define-fun x324 ((x257 Int)) Int (ite (= x257 672) x27 (x14 x257)))
(define-fun x165 ((x257 Int)) Int (ite (= 128 x257) x119 (x311 x257)))
(define-fun x82 ((x257 Int)) Int (ite (= x257 192) x150 (x379 x257)))
(define-fun x80 ((x257 Int)) Int (ite (= 320 x257) 1 (x408 x257)))
(define-fun x205 ((x257 Int)) Int (ite (= x257 384) 0 (x165 x257)))
(define-fun x91 ((x257 Int)) Int (ite (= x257 352) 384 (x340 x257)))
(define-fun x169 ((x257 Int)) Int (ite (= 352 x257) 128 (x91 x257)))
(define-fun x63 ((x257 Int)) Int (ite (= 448 x257) 1 (x21 x257)))
(define-fun x367 ((x257 Int)) Int (ite (= 512 x257) 0 (x82 x257)))
(define-fun x295 ((x257 Int)) Int (ite (= x257 480) 512 (x38 x257)))
(define-fun x234 ((x257 Int)) Int (ite (= 480 x257) 192 (x295 x257)))
(define-fun x298 ((x257 x375)) Int (ite (= x106 x257) x195 (x300 x257)))
(define-fun x155 ((x257 x375)) Int (ite (= x299 x257) x313 (x298 x257)))
(define-fun x142 ((x257 x375)) Int (ite (= x257 x30) x201 (x155 x257)))
(define-fun x111 ((x257 x375)) Int (ite x420 (x300 x257) (x142 x257)))
(define-fun x416 ((x257 x375)) Int (ite (= x257 x388) x271 (x111 x257)))
(define-fun x118 ((x257 x375)) Int (ite (= x257 x291) x283 (x416 x257)))
(define-fun x4 ((x257 x375)) Int (ite (= x428 x257) x58 (x118 x257)))
(define-fun x366 ((x257 x375)) Int (ite x45 (x111 x257) (x4 x257)))
(define-fun x68 ((x257 Int)) Int (ite (= x257 128) x134 (x390 x257)))
(define-fun x398 ((x257 Int)) Int (ite (= x257 160) x288 (x68 x257)))
(define-fun x258 ((x257 Int)) Int (ite (= x257 192) x96 (x398 x257)))
(define-fun x88 ((x257 Int)) Int (ite (= x257 224) x231 (x258 x257)))
(define-fun x293 ((x257 Int)) Int (ite (= x257 256) x306 (x88 x257)))
(define-fun x161 ((x55 Int)) Bool (=> (and (not (= 4294967295 x55)) (not (= 2220280665 x55)) (not (= x55 4294967296)) (not (= 1145971871 x55)) (not (= 1084754510 x55)) (not (= x55 170141183460469231731687303715884105727)) (not (= 79228162514264337593543950336 x55)) (not (= x55 3547226261)) (not (= 2652930389 x55)) (not (= x55 115792089237316195423570985008687907852929702298719625575994209400481361428480)) (not (= x55 1461501637330902918203684832716283019655932542975)) (not (= 1960939212 x55)) (not (= 1266268229 x55)) (not (= 3250587425 x55)) (not (= x55 18446744073709551616)) (not (= x55 115792089237316195423570985008687907853099843482180094807725896704197245534209)) (not (= 3110348530 x55)) (not (= 1272242479 x55)) (not (= 1749768213 x55)) (not (= x55 115792089237316195423570985008687907853099843482180094807725896704197245534208)) (not (= x55 1960641893)) (not (= 1408642612 x55)) (not (= x55 340282366920938463463374607431768211455)) (not (= x55 340282366920938463463374607431768211456)) (not (= x55 115792089237316195423570985008687907853269984665640564039457584007908834672640)) (> x55 10000)) (not ((_ is x335) (x276 x55)))))
(assert (x104 x407))
(assert (x104 x304))
(assert (x76 x39))
(assert (= (x200 (x276 x3)) x3))
(assert (x74 x368))
(assert (x74 x13))
(assert (x74 x19))
(assert (x74 x320))
(assert (x74 x419))
(assert (x104 x238))
(assert (x74 x48))
(assert (x74 x405))
(assert (x74 x87))
(assert (x74 x381))
(assert (= 1084754510 (x200 (x335 1084754510))))
(assert (=> (<= x133 10000) (= (x276 x133) (x335 x133))))
(assert (= (x200 (x335 2652930389)) 2652930389))
(assert (x74 x386))
(assert (x74 x170))
(assert (x74 x126))
(assert (x74 x20))
(assert (= 2220280665 (x200 (x335 2220280665))))
(assert (x74 x401))
(assert (x74 x199))
(assert (x74 x343))
(assert (x74 x113))
(assert (x74 x245))
(assert (= x137 (x200 (x276 x137))))
(assert (x74 x134))
(assert (x74 x178))
(assert (x74 x96))
(assert (x74 x47))
(assert (x74 x198))
(assert (x74 x150))
(assert (= (x335 2652930389) (x276 2652930389)))
(assert (= (x200 (x276 x70)) x70))
(assert (x74 x393))
(assert (x74 x141))
(assert (x74 x373))
(assert (= (+ (x200 x312) 3) (x200 (x108 x312 3))))
(assert (x76 x317))
(assert (x74 x357))
(assert (x74 x26))
(assert (x74 x267))
(assert (x104 x143))
(assert (x74 x71))
(assert (not x345))
(assert (x74 x182))
(assert (x74 x40))
(assert (= (x311 x225) 0))
(assert (x74 x410))
(assert (x74 x308))
(assert (x74 x128))
(assert (x74 x120))
(assert (x74 x374))
(assert (x161 x162))
(assert (x76 x208))
(assert (= (x276 4294967295) (x335 4294967295)))
(assert (=> (<= x269 10000) (= (x335 x269) (x276 x269))))
(assert (x104 x28))
(assert (x74 x39))
(assert (x161 x269))
(assert (x74 x173))
(assert (x74 x411))
(assert (= x345 (=> (and (and (<= x70 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x10) (= x94 (x300 x50)) (<= x7 340282366920938463463374607431768211455) (= x391 (x180 160)) (not (= x207 3110348530)) (= x221 (x188 (x276 x268))) (= (x300 x213) x328) (= x144 x197) (<= x3 1461501637330902918203684832716283019655932542975) (= x315 x287) (>= x132 0) (= x42 x67) (not (= x70 x268)) (= x296 (x300 x218)) (= false x403) x337 (not (= x70 x3)) (= x62 (x189 (x276 x269) x326 0)) (= (x300 x218) x333) (= x421 x270) (<= 0 x197) (<= 0 x7) (= x50 (x108 x62 2)) (= x28 (div x404 18446744073709551616)) (<= x393 1461501637330902918203684832716283019655932542975) (= x196 x157) (= false x164) (= x23 (x175 4294967295 x28)) (>= 1461501637330902918203684832716283019655932542975 x179) (>= 4294967295 x212) (>= 1461501637330902918203684832716283019655932542975 x197) (= (x180 128) x341) (not (= x268 x3)) (<= 0 x10) (= false x34) (<= 0 x212) (>= x149 0) (<= 0 x37) (= (x108 x50 1) x218) (<= 0 x267) (= x412 x236) (<= x236 1461501637330902918203684832716283019655932542975) (= (x175 340282366920938463463374607431768211455 x32) x184) (= (div x333 79228162514264337593543950336) x32) (> x309 0) (< x207 3547226261) (not (< x207 2652930389)) (>= 1461501637330902918203684832716283019655932542975 x157) (< 0 x268) (= x397 (x180 224)) (<= 0 x393) (<= 0 x236) (>= 1461501637330902918203684832716283019655932542975 x268) (> x70 0) (<= 0 x26) (= x207 3250587425) (<= 0 x287) (< 0 x3) (>= x157 0) (= x162 x223) (= (x188 (x276 x3)) x37) (<= x149 1461501637330902918203684832716283019655932542975) (not (< x207 1749768213)) (= x280 x179) (= (< 0 (x290 (x276 x70))) x277) (= (x188 (x276 x70)) x132) (= x309 (x290 (x276 x268))) (= x326 (x189 (x276 x162) (x276 x66) 0)) (= (x300 x218) x404) (= x185 x267) (not (< x207 3110348530)) (= (x180 192) x174) (= x337 (> (x290 (x276 x268)) 0)) (= 0 x67) (= 5 x127) (= x182 x270) (<= 0 x221) x168 (= (< 0 (x290 (x276 x3))) x168) (= x62 x213) (<= 0 x421) (= x59 false) (>= 1461501637330902918203684832716283019655932542975 x421) (<= x267 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x287) x277 (>= 4294967295 x26) (= x269 x359) (<= 0 x179) (= x181 x66) (= x393 x196) (= x401 (div x296 4294967296)) (= x95 (x180 256)) (= x373 1266268229) (= x409 (x175 4294967295 x401))) (and (and (= x359 x19) (= 448 x282) (= x186 x249) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336) (and (< x336 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336))))) (>= 1461501637330902918203684832716283019655932542975 x427) (= x202 x139) (= x380 (= x51 x346)) (= (= x159 x187) x394) (not (> 4 x226)) (> x289 0) (= x139 x358) (= x170 x249) (>= x427 0) x354 (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x29) (and (> 64 x29) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x29) true)))) (not (= 1084754510 x84)) (<= 0 x186) x394 (= x386 x129) x284 (= x272 x101) (= x199 x65) (= (= x385 x199) x284) (= (x80 320) x264) (> 1749768213 x84) (> 1272242479 x84) (not (< x84 1084754510)) (= (= x364 x129) x130) (= (= x202 x343) x115) x115 (= (x290 (x276 x268)) x289) (= x20 x279) (= (= x272 x11) x260) (= x29 (x319 (- x226 132))) x130 (<= 0 x191) (= x35 0) (= x353 (not (= x422 x263))) (<= x186 1461501637330902918203684832716283019655932542975) (= (not (= x220 x107)) x354) (= 1266268229 x84) (= x11 x126) (= x343 x414) (= x158 (not (= x352 x19))) (= x413 x385) (= x181 x215) (= x419 x159) (= x336 (x319 (- x226 68))) (= x153 x71) (not (or (and (= true (<= x89 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 256 x89)) (> x89 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x52 x187) (= (x319 (- x226 4)) x89) (= x386 x323) (= x374 320) x353 (= x422 x359) (= 0 x193) (= x126 x423) x380 (not (= 1145971871 x84)) x260 (> 1408642612 x84) (= x153 x51) (= x251 (< 0 x264)) (= x413 x244) (= x329 x52) (= 0 x362) (= x120 x364) (= x20 0) (and (> x226 259) (= true (<= x226 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x346 x216) (= (x189 (x276 x322) (x276 x215) 0) x102) (= x352 x414) (= x107 x101) (= x65 x263) x158 (>= 1461501637330902918203684832716283019655932542975 x191) (= x144 x427) (= x220 x359)) (and (not (> 1749768213 x116)) (>= 1461501637330902918203684832716283019655932542975 x307) (= (x348 256) x13) (< x116 2652930389) (= x292 (x396 160)) (= x256 (x319 (- x226 132))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x135) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x135) true) (> 192 x135)))) (= x40 x341) (= x305 192) (= (x324 608) x329) (= x116 1960939212) (<= x141 1461501637330902918203684832716283019655932542975) (= x424 x391) (= x244 (x324 512)) (= (x324 576) x358) (= x351 128) (= x54 0) (= (x16 288) x27) (= 192 x183) (= x190 (x290 (x276 x268))) (= x44 256) (= 256 x361) (not (or (> x256 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 64 x256) (= (<= x256 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (>= 1461501637330902918203684832716283019655932542975 x248) (= x423 (x324 640)) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x226)) (> x226 195)) (= (x319 (- x226 4)) x135) (<= 0 x141) (> x190 0) (= x392 (x98 192)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253)) (> 64 x253)))) (= (x318 224) x233) (= (x324 672) x323) (= (x344 128) x384) (= x54 x279) (< x116 2220280665) (= x71 (x324 544)) (<= 0 x248) (>= x307 0) (not (> 1960641893 x116)) (not (< x226 4)) (= x307 x109) (= (x319 (- x226 68)) x253) (= x144 x248) (not (= 1960641893 x116)) (= x170 x109) (= 128 x148)))) (and (=> (not x251) x240) (=> x251 x163)))))
(assert (= 1960939212 (x200 (x335 1960939212))))
(assert (= (x200 (x276 x269)) x269))
(assert (x161 x66))
(assert (x161 x18))
(assert (= (x335 3250587425) (x276 3250587425)))
(assert (x1 x415 x238))
(assert (= (x276 18446744073709551616) (x335 18446744073709551616)))
(assert (x76 x69))
(assert (= (x276 340282366920938463463374607431768211456) (x335 340282366920938463463374607431768211456)))
(assert (x74 x289))
(assert (x76 x294))
(assert (x74 x287))
(assert (x6 x39))
(assert (x104 x339))
(assert (x74 x272))
(assert (= 1461501637330902918203684832716283019655932542975 (x200 (x335 1461501637330902918203684832716283019655932542975))))
(assert (x104 x370))
(assert (=> (>= 10000 x162) (= (x276 x162) (x335 x162))))
(assert (x74 x281))
(assert (x74 x133))
(assert (x76 x124))
(assert (x74 x301))
(assert (x74 x212))
(assert (x104 115792089237316195423570985008687907853269984665640564039457584007908834672640))
(assert (= x117 true))
(assert (x74 x151))
(assert (x74 x259))
(assert (x74 x41))
(assert (x76 x145))
(assert (x74 x360))
(assert (x74 x351))
(assert (= 115792089237316195423570985008687907853099843482180094807725896704197245534209 (x200 (x335 115792089237316195423570985008687907853099843482180094807725896704197245534209))))
(assert (x74 x135))
(assert (x104 x90))
(assert (= (x200 (x276 x103)) x103))
(assert (x74 x207))
(assert (x74 x77))
(assert (x104 x273))
(assert (x104 x64))
(assert (x74 x28))
(assert (x74 x203))
(assert (= 115792089237316195423570985008687907853099843482180094807725896704197245534208 (x200 (x335 115792089237316195423570985008687907853099843482180094807725896704197245534208))))
(assert (x74 x369))
(assert (x74 x54))
(assert (= (x200 (x276 x268)) x268))
(assert (x74 x186))
(assert (= (x276 115792089237316195423570985008687907853099843482180094807725896704197245534209) (x335 115792089237316195423570985008687907853099843482180094807725896704197245534209)))
(assert (x74 x148))
(assert (x74 x346))
(assert (x74 x121))
(assert (x104 x173))
(assert (= 1749768213 (x200 (x335 1749768213))))
(assert (x330 x143))
(assert (x74 x304))
(assert (x74 x197))
(assert (x74 x421))
(assert (x74 x223))
(assert (x74 x139))
(assert (x74 x317))
(assert (= (+ 1 (x200 x232)) (x200 (x108 x232 1))))
(assert (= (or x420 x57) x33))
(assert (x74 x269))
(assert (x161 x322))
(assert (x1 x173 x407))
(assert (x74 x329))
(assert (x74 x347))
(assert (=> (>= 10000 x103) (= (x276 x103) (x335 x103))))
(assert (x104 x69))
(assert (x74 x215))
(assert (x74 x29))
(assert (x74 x93))
(assert (x74 x217))
(assert (x74 x137))
(assert (=> (>= 10000 x137) (= (x276 x137) (x335 x137))))
(assert (x5 x370))
(assert (x74 x355))
(assert (x74 x427))
(assert (x74 x294))
(assert (x74 x418))
(assert (x74 x226))
(assert (x161 x75))
(assert (x74 x201))
(assert (x74 x67))
(assert (x104 x325))
(assert (x74 x153))
(assert (x74 x162))
(assert (x74 x426))
(assert (= (x276 1266268229) (x335 1266268229)))
(assert (x74 x183))
(assert (= (x335 2220280665) (x276 2220280665)))
(assert (= (+ (x200 x376) 4) (x200 (x108 x376 4))))
(assert (=> (>= 10000 x215) (= (x335 x215) (x276 x215))))
(assert (x74 x222))
(assert (x74 x12))
(assert (x74 x333))
(assert (= 1272242479 (x200 (x335 1272242479))))
(assert (= (x200 (x108 x62 2)) (+ 2 (x200 x62))))
(assert (x74 x78))
(assert (x74 x322))
(assert (x6 x339))
(assert (x74 x302))
(assert (x74 x296))
(assert (x104 x401))
(assert (x74 x89))
(assert (x104 x152))
(assert (x74 x399))
(assert (x74 x177))
(assert (x104 x239))
(assert (x76 x32))
(assert (x74 x132))
(assert (x104 x145))
(assert (x74 x412))
(assert (x74 x306))
(assert (x74 x244))
(assert (x74 x285))
(assert (x74 x391))
(assert (= (x276 1084754510) (x335 1084754510)))
(assert (x74 x350))
(assert (x74 x309))
(assert (x74 x389))
(assert (x74 x325))
(assert (= (x276 79228162514264337593543950336) (x335 79228162514264337593543950336)))
(assert (x330 x28))
(assert (= (x276 1960641893) (x335 1960641893)))
(assert (x74 x361))
(assert (= (x276 1408642612) (x335 1408642612)))
(assert (= (x335 1749768213) (x276 1749768213)))
(assert (x74 x313))
(assert (x74 x387))
(assert (x74 x51))
(assert (x161 x268))
(assert (x74 x109))
(assert (x74 x100))
(assert (x74 x10))
(assert (x161 x133))
(assert (= (x379 x237) 0))
(assert (x74 x42))
(assert (x74 x237))
(assert (x74 x36))
(assert (x74 x44))
(assert (= x22 (=> (and (and (= x397 x235) (= x369 x320) (= x399 x387) (= x227 (= x399 x235)) (= x347 x368)) (and (= x387 (x293 224)) (= x156 (x366 x176)) (<= 0 x275) (= x230 (x189 (x276 x103) (x276 x133) 0)) (>= x56 0) (= (x293 128) x369) (= (x108 x232 1) x176) (= x254 x245) (>= 1461501637330902918203684832716283019655932542975 x378) (= (x293 256) x15) (= x181 x133) (= x275 x185) (= x134 (x366 x232)) (= (x175 340282366920938463463374607431768211455 x224) x231) (>= 340282366920938463463374607431768211455 x252) (<= x56 4294967295) (>= 4294967295 x410) (= x302 x316) (= x261 (x189 (x276 x137) x230 0)) (not (> 2652930389 x138)) (= (x108 x261 2) x232) (= (x366 x176) x105) (= x211 x261) (= (x175 4294967295 x285) x306) (= x138 3250587425) (not (< x138 3110348530)) (>= 1461501637330902918203684832716283019655932542975 x275) (>= x378 0) (= x31 (x293 192)) (>= x383 0) (= (x175 4294967295 x143) x96) (= x285 (div x105 18446744073709551616)) (= x223 x103) (= (div x147 79228162514264337593543950336) x224) (= (x290 (x276 x268)) x203) (= (x366 x211) x288) (= x347 (x293 160)) (< 0 x203) (= x254 x383) (not (< x138 1749768213)) (>= x252 0) (not (= x138 3110348530)) (= 0 x302) (= x147 (x366 x176)) (<= 0 x410) (= x359 x137) (> 3547226261 x138) (= (div x156 4294967296) x143) (>= 1461501637330902918203684832716283019655932542975 x383))) x227)))
(assert (= 3250587425 (x200 (x335 3250587425))))
(assert (= (x276 3547226261) (x335 3547226261)))
(assert (x74 x95))
(assert (x76 x93))
(assert (= (x200 (x335 4294967296)) 4294967296))
(assert (x74 x352))
(assert (x74 x145))
(assert (x74 x270))
(assert (x74 x144))
(assert (x74 x424))
(assert (x74 x233))
(assert (x161 x3))
(assert (x6 x64))
(assert (= (x200 (x335 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x74 x149))
(assert (x74 x172))
(assert (x104 x317))
(assert (= (x276 1145971871) (x335 1145971871)))
(assert (= 170141183460469231731687303715884105727 (x200 (x335 170141183460469231731687303715884105727))))
(assert (= (x276 115792089237316195423570985008687907853269984665640564039457584007908834672640) (x335 115792089237316195423570985008687907853269984665640564039457584007908834672640)))
(assert (x74 x185))
(assert (x74 x252))
(assert (x74 x204))
(assert (x74 x92))
(assert (x74 x105))
(assert (x74 x286))
(assert (x74 x336))
(assert (= x163 (=> (and (= (x205 x225) x75) (= (x175 115792089237316195423570985008687907853269984665640564039457584007908834672640 x370) x87) (= x325 (x278 x208)) (= (x155 x30) x370) (= x299 x73) (= x124 (div x166 340282366920938463463374607431768211456)) (= 0 x222) (= (x80 320) x100) (= x312 (x189 (x276 x75) x102 0)) (< 0 x243) (= x201 (x72 (+ 1 x87))) (= (ite x250 1 0) x222) (= x294 (x298 x299)) (= x360 (x175 340282366920938463463374607431768211455 x145)) (= (ite x338 1 0) x381) (= (and (= false (<= x36 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x36 115792089237316195423570985008687907853099843482180094807725896704197245534209)) x250) (= (x175 340282366920938463463374607431768211455 x325) x85) (= (x80 320) x243) (= x321 (x278 x124)) (= x313 (x72 (+ x406 x121))) (= x113 x85) (= (x175 115792089237316195423570985008687907852929702298719625575994209400481361428480 x60) x219) (= x131 (x169 352)) (= x99 x106) (= (x278 x64) x145) (= (not (> x100 1)) x136) (= (x175 340282366920938463463374607431768211455 x294) x406) (= x121 (mod (* x360 340282366920938463463374607431768211456) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x30 (x108 x312 3)) (= x64 (x319 (- x321 1))) (= x381 0) (= x338 (and (= (<= x321 57896044618658097711785492504343953926634992332820282019728792003956564819967) false) (< x321 115792089237316195423570985008687907853099843482180094807725896704197245534209))) (= (x319 (- x36 1)) x208) (= x225 x131) (= x195 (x72 (+ x219 x113))) (= (x278 x273) x36) (= (x300 x106) x273) (= x99 (x189 (x335 0) x228 0)) (= x60 (x300 x106)) (= (x189 (x335 0) x228 0) x73) (= (x108 x312 4) x228) (= (x298 x299) x166)) (and x240 x136))))
(assert (x74 x37))
(assert (x74 x64))
(assert (x74 x384))
(assert (x74 x116))
(assert (x74 x154))
(assert (x74 x235))
(assert (= (and x9 x33) x125))
(assert (x74 x221))
(assert (x74 x70))
(assert (x104 x60))
(assert (x6 x208))
(assert (x74 x25))
(assert (= (x200 (x335 79228162514264337593543950336)) 79228162514264337593543950336))
(assert (x74 x383))
(assert (= x420 (and x117 (not x251))))
(assert (x74 x3))
(assert (x74 x11))
(assert (= 4294967295 (x200 (x335 4294967295))))
(assert (x74 x264))
(assert (x74 x131))
(assert (x161 x103))
(assert (x74 x316))
(assert (= x57 (and x251 x117)))
(assert (x74 x283))
(assert (x74 x247))
(assert (x74 x127))
(assert (x74 x103))
(assert (x74 x110))
(assert (= (+ 4 (x200 x312)) (x200 (x108 x312 4))))
(assert (x161 x215))
(assert (x104 x294))
(assert (x74 x90))
(assert (x74 x400))
(assert (x74 x280))
(assert (x74 x370))
(assert (x74 x195))
(assert (x74 x192))
(assert (x74 x321))
(assert (x104 x285))
(assert (x74 x413))
(assert (x74 x349))
(assert (x74 x328))
(assert (= (x200 (x335 1266268229)) 1266268229))
(assert (x74 x119))
(assert (= 340282366920938463463374607431768211456 (x200 (x335 340282366920938463463374607431768211456))))
(assert (x74 x279))
(assert (x330 x401))
(assert (x74 x407))
(assert (x74 x184))
(assert (x74 x191))
(assert (= (x276 3110348530) (x335 3110348530)))
(assert (x74 x385))
(assert (= 1145971871 (x200 (x335 1145971871))))
(assert (x104 340282366920938463463374607431768211455))
(assert (x74 x7))
(assert (= (x200 (x108 x376 3)) (+ 3 (x200 x376))))
(assert (x74 x208))
(assert (= x18 (x200 (x276 x18))))
(assert (= (x200 (x276 x215)) x215))
(assert (=> (<= x3 10000) (= (x335 x3) (x276 x3))))
(assert (x74 x15))
(assert (x76 x286))
(assert (x74 x220))
(assert (x74 x147))
(assert (x74 x32))
(assert (x74 x273))
(assert (x74 x65))
(assert (x74 x339))
(assert (x74 x254))
(assert (x104 115792089237316195423570985008687907852929702298719625575994209400481361428480))
(assert (= (x200 (x335 115792089237316195423570985008687907853269984665640564039457584007908834672640)) 115792089237316195423570985008687907853269984665640564039457584007908834672640))
(assert (x74 x193))
(assert (= (x335 4294967296) (x276 4294967296)))
(assert (x74 x288))
(assert (x104 x32))
(assert (x74 x94))
(assert (x74 x256))
(assert (x74 x84))
(assert (x74 x238))
(assert (x74 x143))
(assert (x104 x110))
(assert (= (x200 (x335 3547226261)) 3547226261))
(assert (x74 x423))
(assert (x74 x107))
(assert (x161 x70))
(assert (x74 x239))
(assert (x74 x358))
(assert (x104 x411))
(assert (x1 x411 x239))
(assert (x74 x224))
(assert (= (=> (and (= x371 x388) (= x39 (x72 (+ 1 x426))) (= (x175 x173 x407) x281) (> x25 0) (= x407 (ite (or (> x342 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x342 1) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x342) true))) 1 0)) (= (x63 448) x77) (= x2 x237) (= x429 (x175 x90 x304)) (= x301 (x175 115792089237316195423570985008687907853269984665640564039457584007908834672640 x110)) (= (x367 x237) x18) (= x262 (not (> x77 1))) (= (x189 (x335 0) x372 0) x371) (= (x278 x178) x426) (= (x319 (- 115792089237316195423570985008687907853099843482180094807725896704197245534208 x172)) x355) (= (ite (or (and (> 1 x400) (= true (<= x400 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x400)) 1 0) x239) (= 0 x41) (= (x278 x317) x172) (= x411 (ite (not x209) 1 0)) (= (x175 340282366920938463463374607431768211455 x93) x217) (= (x319 (- 170141183460469231731687303715884105727 x426)) x342) (= (x416 x291) x151) (= x304 (ite (and (= true (<= x355 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x355 1)) 1 0)) (= 0 x92) (= (x319 (- 170141183460469231731687303715884105727 x172)) x400) (= x2 (x234 480)) (= x415 (ite (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x426) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x426)) (> 0 x426))) 1 0)) (= (ite (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x172) true) (> 0 x172)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x172)) 1 0) x90) (= (x175 x411 x239) x92) (= x146 (x175 115792089237316195423570985008687907852929702298719625575994209400481361428480 x152)) (= x428 (x108 x376 3)) (= x363 (mod (* 340282366920938463463374607431768211456 x246) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x189 (x276 x18) x102 0) x376) (= x53 x291) (= x41 (x175 x415 x238)) (= (x72 (+ 1 x301)) x58) (= x53 (x189 (x335 0) x372 0)) (= x69 (x278 x39)) (= x286 (x278 x339)) (= x339 (x72 (+ 1 x172))) (= (ite (not x332) 1 0) x173) (= (x118 x428) x110) (= x332 (or (> x426 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 0 x426) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x426))))) (= x429 0) (= x238 (ite (and (< 1 x198) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x198) true)) 1 0)) (= x152 (x111 x388)) (= x372 (x108 x376 4)) (= (x175 340282366920938463463374607431768211455 x69) x246) (= x78 x418) (= (x111 x388) x317) (= (x175 340282366920938463463374607431768211455 x286) x418) (= (x72 (+ x146 x78)) x271) (= (x319 (- 115792089237316195423570985008687907853099843482180094807725896704197245534208 x426)) x198) (= (div x151 340282366920938463463374607431768211456) x178) (= (x63 448) x25) (= (x416 x291) x93) (= (x72 (+ x363 x217)) x283) (= 0 x281) (= (or (and (> 0 x172) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x172))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x172)) x209)) (and x22 x262)) x8))
(assert (x76 x64))
(assert (x104 x208))
(assert (x74 x66))
(assert (x74 x406))
(assert (= (x200 (x335 1960641893)) 1960641893))
(assert (= (x276 340282366920938463463374607431768211455) (x335 340282366920938463463374607431768211455)))
(assert (x74 x229))
(assert (=> (>= 10000 x268) (= (x335 x268) (x276 x268))))
(assert (x74 x246))
(assert (= (x200 (x276 x75)) x75))
(assert (x74 x305))
(assert (= 115792089237316195423570985008687907852929702298719625575994209400481361428480 (x200 (x335 115792089237316195423570985008687907852929702298719625575994209400481361428480))))
(assert (= (x200 (x335 1408642612)) 1408642612))
(assert (x104 x178))
(assert (x74 x362))
(assert (= (+ 1 (x200 x50)) (x200 (x108 x50 1))))
(assert (x74 x307))
(assert (x74 x415))
(assert (x74 x124))
(assert (= x162 (x200 (x276 x162))))
(assert (x74 x315))
(assert (x123 x60))
(assert (x161 x137))
(assert (x5 x110))
(assert (x74 x31))
(assert (x74 x263))
(assert (x74 x157))
(assert (x74 x378))
(assert (= (x335 115792089237316195423570985008687907852929702298719625575994209400481361428480) (x276 115792089237316195423570985008687907852929702298719625575994209400481361428480)))
(assert (x74 x52))
(assert (x6 x317))
(assert (x74 x282))
(assert (x74 x253))
(assert (x74 x166))
(assert (x74 x216))
(assert (x74 x181))
(assert (= (x276 1272242479) (x335 1272242479)))
(assert (x74 x392))
(assert (=> (>= 10000 x70) (= (x276 x70) (x335 x70))))
(assert (x76 x178))
(assert (x74 x69))
(assert (x74 x341))
(assert (x74 x122))
(assert (x74 x271))
(assert (= (x200 (x335 18446744073709551616)) 18446744073709551616))
(assert (x74 x138))
(assert (x74 x363))
(assert (x74 x56))
(assert (x104 4294967295))
(assert (x74 x225))
(assert (= (+ (x200 x261) 2) (x200 (x108 x261 2))))
(assert (x104 x224))
(assert (x74 x196))
(assert (x104 x39))
(assert (x104 x93))
(assert (x6 x124))
(assert (= (=> (and (= x9 (< 0 x122)) (= x122 (x63 448))) (and (=> (not x9) x22) (=> x9 x8))) x240))
(assert (x74 x18))
(assert (x74 x359))
(assert (x74 x129))
(assert (x74 x101))
(assert (x76 x325))
(assert (x74 x429))
(assert (x74 x146))
(assert (x74 x58))
(assert (x123 x152))
(assert (x74 x60))
(assert (x76 x224))
(assert (= (x335 115792089237316195423570985008687907853099843482180094807725896704197245534208) (x276 115792089237316195423570985008687907853099843482180094807725896704197245534208)))
(assert (x74 x202))
(assert (x74 x414))
(assert (= (x200 (x276 x322)) x322))
(assert (=> (<= x322 10000) (= (x335 x322) (x276 x322))))
(assert (x74 x255))
(assert (=> (>= 10000 x18) (= (x276 x18) (x335 x18))))
(assert (x74 x241))
(assert (x74 x85))
(assert (= 3110348530 (x200 (x335 3110348530))))
(assert (x6 x178))
(assert (x74 x174))
(assert (x74 x266))
(assert (x74 x159))
(assert (x74 x243))
(assert (=> (>= 10000 x75) (= (x276 x75) (x335 x75))))
(assert (x330 x285))
(assert (x74 x323))
(assert (x74 x27))
(assert (=> (>= 10000 x66) (= (x276 x66) (x335 x66))))
(assert (x74 x249))
(assert (= (x276 1960939212) (x335 1960939212)))
(assert (x74 x236))
(assert (x74 x206))
(assert (= (x200 (x276 x66)) x66))
(assert (= (x335 170141183460469231731687303715884105727) (x276 170141183460469231731687303715884105727)))
(assert (x74 x35))
(assert (x74 x268))
(assert (x74 x422))
(assert (x76 x339))
(assert (x74 x275))
(assert (= x133 (x200 (x276 x133))))
(assert (x104 x286))
(assert (x74 x156))
(assert (= x314 (or x125 x45)))
(assert (x74 x364))
(assert (x74 x2))
(assert (x74 x152))
(assert (x74 x75))
(assert (x74 x397))
(assert (= x45 (and (not x9) x33)))
(assert (x74 x248))
(assert (x74 x219))
(assert (x74 x231))
(assert (x76 x273))
(assert (x74 x342))
(assert (x74 x404))
(assert (x74 x179))
(assert (x74 x187))
(assert (x74 x23))
(assert (x104 x124))
(assert (x74 x190))
(assert (= (x276 1461501637330902918203684832716283019655932542975) (x335 1461501637330902918203684832716283019655932542975)))
(assert (x6 x273))
(assert (x74 x409))
(assert (x1 x90 x304))
(assert (x74 x292))
(assert (x104 x415))
(check-sat)
(exit)