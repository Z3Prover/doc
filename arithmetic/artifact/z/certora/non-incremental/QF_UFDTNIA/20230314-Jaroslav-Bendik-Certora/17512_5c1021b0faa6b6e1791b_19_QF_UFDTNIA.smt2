(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x119 0)) (((x129 (x232 x119) (x8 x119) (x126 Int)) (x162 (x209 Int)) (x203 (x204 x119) (x297 Int)))))
(declare-fun x220 () Int)
(declare-fun x27 () Int)
(declare-fun x402 () Int)
(declare-fun x158 () Bool)
(declare-fun x360 () Int)
(declare-fun x48 () Int)
(declare-fun x275 () Int)
(declare-fun x359 () Int)
(declare-fun x421 () Bool)
(declare-fun x175 () Int)
(declare-fun x78 () Int)
(declare-fun x417 () Int)
(declare-fun x80 () Bool)
(declare-fun x121 () Bool)
(declare-fun x269 () Int)
(declare-fun x400 () Int)
(declare-fun x20 () Int)
(declare-fun x179 () Bool)
(declare-fun x222 () Int)
(declare-fun x240 () Int)
(declare-fun x279 (Int) Int)
(declare-fun x392 () Int)
(declare-fun x51 () Int)
(declare-fun x315 () Bool)
(declare-fun x122 () Bool)
(declare-fun x54 () Int)
(declare-fun x164 () Bool)
(declare-fun x429 () Int)
(declare-fun x223 () Int)
(declare-fun x35 () Int)
(declare-fun x131 () Bool)
(declare-fun x394 () Int)
(declare-fun x296 () Int)
(declare-fun x170 () Int)
(declare-fun x401 () Int)
(declare-fun x189 () Int)
(declare-fun x140 () Bool)
(declare-fun x93 () Int)
(declare-fun x280 () Int)
(declare-fun x367 () Int)
(declare-fun x206 () Int)
(declare-fun x82 () Int)
(declare-fun x135 () Int)
(declare-fun x218 () x119)
(declare-fun x255 () Int)
(declare-fun x254 () Bool)
(declare-fun x143 (x119) Int)
(declare-fun x30 () Int)
(declare-fun x160 () Bool)
(declare-fun x147 () Int)
(declare-fun x363 () Int)
(declare-fun x157 () Bool)
(declare-fun x193 () Int)
(declare-fun x311 () Int)
(declare-fun x434 () x119)
(declare-fun x318 () Int)
(declare-fun x373 () Int)
(declare-fun x353 () Int)
(declare-fun x439 () Int)
(declare-fun x182 () Int)
(declare-fun x273 () Int)
(declare-fun x163 () Int)
(declare-fun x374 () Int)
(declare-fun x357 () Int)
(declare-fun x195 () Int)
(declare-fun x228 () x119)
(declare-fun x148 () Bool)
(declare-fun x104 () Bool)
(declare-fun x298 () Bool)
(declare-fun x171 () Int)
(declare-fun x408 () Int)
(declare-fun x137 () Int)
(declare-fun x396 () Bool)
(declare-fun x272 () Int)
(declare-fun x342 () Int)
(declare-fun x210 () Bool)
(declare-fun x156 () Int)
(declare-fun x91 () Int)
(declare-fun x432 () Int)
(declare-fun x99 () Int)
(declare-fun x181 () Bool)
(declare-fun x257 () Int)
(declare-fun x369 () Int)
(declare-fun x247 () Int)
(declare-fun x132 () Int)
(declare-fun x274 (Int) Int)
(declare-fun x381 () Int)
(declare-fun x388 () Bool)
(declare-fun x237 () Bool)
(declare-fun x253 () Bool)
(declare-fun x355 () Int)
(declare-fun x62 () Bool)
(declare-fun x202 () Int)
(declare-fun x109 () Int)
(declare-fun x252 () Bool)
(declare-fun x77 () Int)
(declare-fun x94 () Int)
(declare-fun x304 () Bool)
(declare-fun x284 () Int)
(declare-fun x428 () Int)
(declare-fun x349 () Int)
(declare-fun x322 () Bool)
(declare-fun x86 () Bool)
(declare-fun x95 () Int)
(declare-fun x199 () Int)
(declare-fun x385 () Int)
(declare-fun x176 (Int) Int)
(declare-fun x10 () Int)
(declare-fun x168 () Int)
(declare-fun x386 () Bool)
(declare-fun x188 () Int)
(declare-fun x282 () Int)
(declare-fun x365 () x119)
(declare-fun x45 () Int)
(declare-fun x236 () Int)
(declare-fun x310 () Int)
(declare-fun x3 () Bool)
(declare-fun x321 () Int)
(declare-fun x414 () Int)
(declare-fun x337 () Int)
(declare-fun x368 (Int) Int)
(declare-fun x348 () Int)
(declare-fun x409 () Bool)
(declare-fun x87 () Bool)
(declare-fun x187 () Bool)
(declare-fun x24 (x119) Int)
(declare-fun x113 () Int)
(declare-fun x380 () Bool)
(declare-fun x283 () Bool)
(declare-fun x90 () Bool)
(declare-fun x314 () Bool)
(declare-fun x117 () Int)
(declare-fun x103 () Int)
(declare-fun x125 () Int)
(declare-fun x76 () Int)
(declare-fun x2 () Int)
(declare-fun x260 () Bool)
(declare-fun x256 () x119)
(declare-fun x224 () Int)
(declare-fun x332 () Int)
(declare-fun x316 () Int)
(declare-fun x395 () Int)
(declare-fun x15 () Int)
(declare-fun x41 () Int)
(declare-fun x404 () Int)
(declare-fun x149 () Int)
(declare-fun x399 () Int)
(declare-fun x267 () x119)
(declare-fun x32 () Int)
(declare-fun x305 () Bool)
(declare-fun x370 () Bool)
(declare-fun x208 () Bool)
(declare-fun x84 () Int)
(declare-fun x50 () Int)
(declare-fun x302 () Int)
(declare-fun x59 () Int)
(declare-fun x238 () Int)
(declare-fun x155 () Int)
(declare-fun x66 () x119)
(declare-fun x153 () Int)
(declare-fun x16 () Int)
(declare-fun x278 () Int)
(declare-fun x85 (Int) Int)
(declare-fun x291 () Int)
(declare-fun x384 () Int)
(declare-fun x435 () Bool)
(declare-fun x390 () Int)
(declare-fun x231 () Int)
(declare-fun x118 () Int)
(declare-fun x72 () Int)
(declare-fun x317 () Int)
(declare-fun x120 () Int)
(declare-fun x53 () Bool)
(declare-fun x173 () x119)
(declare-fun x196 () Int)
(declare-fun x239 () Int)
(declare-fun x397 () Bool)
(declare-fun x266 () Int)
(declare-fun x19 () Int)
(declare-fun x398 () Bool)
(declare-fun x212 () Bool)
(declare-fun x42 () Int)
(declare-fun x438 () Int)
(declare-fun x79 () Int)
(declare-fun x67 () Int)
(declare-fun x200 () Int)
(declare-fun x431 () Int)
(declare-fun x70 () Bool)
(declare-fun x292 () Int)
(declare-fun x65 () x119)
(declare-fun x416 () Int)
(declare-fun x123 () Int)
(declare-fun x320 () Int)
(declare-fun x57 () Int)
(declare-fun x177 () Int)
(declare-fun x344 () Int)
(declare-fun x335 () Int)
(declare-fun x427 () Int)
(declare-fun x309 () Int)
(declare-fun x331 () Int)
(declare-fun x350 () Int)
(declare-fun x333 () Int)
(declare-fun x26 () Int)
(declare-fun x110 () Bool)
(declare-fun x338 () Int)
(declare-fun x234 () Bool)
(declare-fun x139 () Int)
(declare-fun x216 () Bool)
(declare-fun x88 () Bool)
(declare-fun x289 () Int)
(declare-fun x127 (Int Int) Int)
(declare-fun x312 () Int)
(declare-fun x287 () Bool)
(declare-fun x437 () Int)
(declare-fun x191 () Int)
(declare-fun x376 () Int)
(declare-fun x364 () Int)
(declare-fun x97 () Bool)
(declare-fun x40 () Bool)
(declare-fun x250 () Bool)
(declare-fun x52 () Int)
(declare-fun x39 () Bool)
(declare-fun x413 () Int)
(declare-fun x75 () Int)
(declare-fun x420 () x119)
(declare-fun x60 () Int)
(declare-fun x340 () Int)
(declare-fun x351 () Bool)
(declare-fun x128 () x119)
(declare-fun x221 () Bool)
(declare-fun x354 () Int)
(declare-fun x150 () Int)
(declare-fun x276 () Bool)
(declare-fun x108 () Int)
(declare-fun x419 () Int)
(declare-fun x356 () Int)
(declare-fun x23 () Int)
(declare-fun x73 () Bool)
(declare-fun x293 () Int)
(declare-fun x12 () Bool)
(declare-fun x145 () Int)
(declare-fun x430 () Int)
(declare-fun x378 () Int)
(declare-fun x410 () Int)
(declare-fun x277 (Int) x119)
(declare-fun x9 () Int)
(declare-fun x264 () Int)
(declare-fun x334 () Int)
(declare-fun x11 () x119)
(declare-fun x407 () Int)
(declare-fun x167 () Int)
(declare-fun x185 () Int)
(declare-fun x172 () Int)
(declare-fun x6 () Int)
(declare-fun x7 () Int)
(declare-fun x89 () Int)
(declare-fun x329 () Int)
(declare-fun x294 () Bool)
(declare-fun x372 () Int)
(declare-fun x21 () Int)
(declare-fun x249 () x119)
(declare-fun x136 () x119)
(declare-fun x43 () x119)
(declare-fun x303 (x119) Int)
(declare-fun x34 () Bool)
(declare-fun x366 () Int)
(declare-fun x190 () Int)
(declare-fun x138 () Int)
(declare-fun x301 () Int)
(declare-fun x192 () Bool)
(declare-fun x313 () Int)
(declare-fun x406 () Int)
(declare-fun x5 () Int)
(declare-fun x412 (Int) Int)
(declare-fun x116 () Int)
(declare-fun x47 (Int) Int)
(declare-fun x299 () Int)
(declare-fun x230 () Bool)
(declare-fun x290 () Int)
(declare-fun x211 () Bool)
(declare-fun x178 () Int)
(declare-fun x241 () x119)
(declare-fun x261 () Int)
(declare-fun x219 () Bool)
(declare-fun x251 () Int)
(declare-fun x124 () Bool)
(declare-fun x246 () Int)
(declare-fun x371 () Int)
(declare-fun x403 () Bool)
(declare-fun x111 () Bool)
(declare-fun x307 () Int)
(declare-fun x166 () Int)
(declare-fun x362 () Int)
(declare-fun x207 (Int) Int)
(declare-fun x352 () Bool)
(declare-fun x336 () Int)
(declare-fun x339 () Bool)
(declare-fun x106 () x119)
(declare-fun x217 () Int)
(declare-fun x379 () Bool)
(declare-fun x159 () Int)
(declare-fun x286 () Int)
(declare-fun x98 () Int)
(declare-fun x425 () Int)
(declare-fun x328 () Int)
(declare-fun x130 () Int)
(declare-fun x271 () Int)
(declare-fun x243 () Int)
(declare-fun x58 () Bool)
(declare-fun x411 () Bool)
(declare-fun x242 () Int)
(declare-fun x415 () Int)
(declare-fun x114 () Int)
(declare-fun x375 () Int)
(declare-fun x244 () Int)
(declare-fun x25 () Int)
(declare-fun x198 () Int)
(declare-fun x300 () Int)
(declare-fun x81 () Int)
(declare-fun x423 () Bool)
(declare-fun x214 () Int)
(declare-fun x324 () Int)
(declare-fun x345 () Int)
(declare-fun x183 () Int)
(declare-fun x382 () Int)
(declare-fun x100 () Bool)
(declare-fun x61 () Int)
(declare-fun x14 () Int)
(declare-fun x151 () Bool)
(declare-fun x17 () Bool)
(declare-fun x174 () Int)
(declare-fun x424 () Int)
(declare-fun x22 () Int)
(declare-fun x96 () Int)
(declare-fun x346 () Int)
(declare-fun x268 (Int Int) Int)
(declare-fun x33 () Int)
(declare-fun x433 () Int)
(declare-fun x263 () Int)
(declare-fun x426 () Int)
(declare-fun x142 () Int)
(declare-fun x146 () x119)
(declare-fun x64 () Int)
(declare-fun x154 (x119) Int)
(declare-fun x186 () Int)
(declare-fun x343 () Bool)
(declare-fun x169 () Int)
(declare-fun x358 () Int)
(declare-fun x63 (x119) Int)
(declare-fun x377 () Int)
(declare-fun x319 () Int)
(declare-fun x259 () Int)
(declare-fun x13 () Int)
(declare-fun x197 () Int)
(declare-fun x422 () Int)
(declare-fun x258 () Bool)
(declare-fun x56 () Int)
(declare-fun x295 () Bool)
(declare-fun x248 () Int)
(declare-fun x180 () Int)
(declare-fun x233 () Bool)
(declare-fun x107 () Bool)
(declare-fun x55 () Int)
(define-fun x270 ((x119 x119) (x144 Int)) x119 (ite ((_ is x203) x119) (x203 (x204 x119) (+ x144 (x297 x119))) (ite ((_ is x129) x119) (x129 (x232 x119) (x8 x119) (+ x144 (x126 x119))) (x162 (+ (x209 x119) x144)))))
(define-fun x83 ((x74 Int)) Int (ite (and (>= x74 0) (< x74 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x74 (- x74 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x201 ((x74 Int)) Int (ite (and (< x74 0) (>= x74 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x74) x74))
(define-fun x391 ((x134 Int)) Bool (and (<= 0 x134) (< x134 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x405 ((x134 Int)) Bool (and (= (x127 x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) x134) (= (x127 115792089237316195423570985008687907853269984665640564039457584007913129639935 x134) x134)))
(define-fun x347 ((x134 Int)) Bool (and (= (x127 x134 0) 0) (= (x127 0 x134) 0)))
(define-fun x323 ((x134 Int)) Bool (= x134 (x127 x134 x134)))
(define-fun x265 ((x134 Int)) Bool (and (x323 x134) (x405 x134) (x347 x134)))
(define-fun x101 ((x134 Int) (x69 Int)) Bool (= (x127 x134 x69) (x127 x69 x134)))
(define-fun x235 ((x134 Int) (x69 Int)) Bool (and (=> (>= x69 0) (<= (x127 x134 x69) x69)) (<= 0 (x127 x134 x69)) (=> (>= x134 0) (>= x134 (x127 x134 x69)))))
(define-fun x38 ((x134 Int) (x69 Int)) Bool (and (x235 x134 x69) (x101 x134 x69)))
(define-fun x285 ((x134 Int)) Bool (= (x127 x134 1461501637330902918203684832716283019655932542975) (mod x134 1461501637330902918203684832716283019655932542976)))
(define-fun x31 ((x134 Int)) Bool (and (x38 x134 1461501637330902918203684832716283019655932542975) (x285 x134)))
(define-fun x330 ((x68 Int)) Int (ite (= x68 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x47 x68)))
(define-fun x327 ((x68 Int)) Int (ite (= x68 132) x137 (x330 x68)))
(define-fun x262 ((x68 Int)) Int (ite (= x68 128) x275 (x327 x68)))
(define-fun x229 ((x68 Int)) Int (ite (= x68 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x176 x68)))
(define-fun x361 ((x68 Int)) Int (ite (= x68 132) x137 (x229 x68)))
(define-fun x341 ((x68 Int)) Int (ite (= x68 128) x275 (x361 x68)))
(define-fun x71 ((x68 x119)) Int (ite (= x68 x218) 1000000000000000000000000000 (x154 x68)))
(define-fun x418 ((x68 x119)) Int (ite (= x128 x68) x320 (x143 x68)))
(define-fun x29 ((x68 Int)) Int (ite (= 320 x68) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x368 x68)))
(define-fun x133 ((x68 Int)) Int (ite (= x68 324) x117 (x29 x68)))
(define-fun x436 ((x68 Int)) Int (ite (= x68 356) x45 (x133 x68)))
(define-fun x387 ((x68 Int)) Int (ite (= x68 388) x198 (x436 x68)))
(define-fun x225 ((x68 Int)) Int (ite x40 (x368 x68) (x387 x68)))
(define-fun x383 ((x68 Int)) Int (ite (= 320 x68) x271 (x225 x68)))
(define-fun x115 ((x68 Int)) Int (ite (= x68 320) x271 (x383 x68)))
(define-fun x245 ((x68 Int)) Int (ite (= 352 x68) x171 (x115 x68)))
(define-fun x18 ((x68 Int)) Int (ite (= 384 x68) 1000000000000000000000000000 (x245 x68)))
(define-fun x308 ((x68 Int)) Int (ite (= x68 320) (ite x97 1 0) (x18 x68)))
(define-fun x1 ((x68 x119)) Int (ite (= x420 x68) 1000000000000000000000000000 (x71 x68)))
(define-fun x92 ((x68 x119)) Int (ite (= x68 x65) x170 (x418 x68)))
(define-fun x4 ((x68 Int)) Int (ite (= x68 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x279 x68)))
(define-fun x205 ((x68 Int)) Int (ite (= x68 324) x266 (x4 x68)))
(define-fun x184 ((x68 Int)) Int (ite (= x68 356) x291 (x205 x68)))
(define-fun x37 ((x68 Int)) Int (ite (= x68 388) x431 (x184 x68)))
(define-fun x152 ((x68 Int)) Int (ite x62 (x279 x68) (x37 x68)))
(define-fun x326 ((x68 Int)) Int (ite (= x68 320) x64 (x152 x68)))
(define-fun x215 ((x68 Int)) Int (ite (= x68 320) x64 (x326 x68)))
(define-fun x28 ((x68 Int)) Int (ite (= 352 x68) x236 (x215 x68)))
(define-fun x306 ((x68 Int)) Int (ite (= 384 x68) 1000000000000000000000000000 (x28 x68)))
(define-fun x393 ((x68 Int)) Int (ite (= 320 x68) (ite x121 1 0) (x306 x68)))
(define-fun x161 ((x68 Int)) Int (ite (= 128 x68) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x207 x68)))
(define-fun x102 ((x68 Int)) Int (ite (= 132 x68) x137 (x161 x68)))
(define-fun x389 ((x68 Int)) Int (ite (= x68 128) x275 (x102 x68)))
(define-fun x112 ((x68 x119)) Int (ite (= x267 x68) x309 (x92 x68)))
(define-fun x194 ((x68 Int)) Int (ite (= x68 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x274 x68)))
(define-fun x226 ((x68 Int)) Int (ite (= 324 x68) x108 (x194 x68)))
(define-fun x165 ((x68 Int)) Int (ite (= 356 x68) x432 (x226 x68)))
(define-fun x213 ((x68 Int)) Int (ite (= x68 388) x57 (x165 x68)))
(define-fun x281 ((x68 Int)) Int (ite x3 (x274 x68) (x213 x68)))
(define-fun x36 ((x68 Int)) Int (ite (= x68 320) x366 (x281 x68)))
(define-fun x46 ((x68 Int)) Int (ite (= 320 x68) x366 (x36 x68)))
(define-fun x288 ((x68 Int)) Int (ite (= 352 x68) x61 (x46 x68)))
(define-fun x325 ((x68 Int)) Int (ite (= x68 384) 1000000000000000000000000000 (x288 x68)))
(define-fun x227 ((x68 Int)) Int (ite (= x68 320) (ite x70 1 0) (x325 x68)))
(define-fun x141 ((x68 Int)) Int (ite (= x68 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x85 x68)))
(define-fun x105 ((x68 Int)) Int (ite (= x68 132) x137 (x141 x68)))
(define-fun x44 ((x68 Int)) Int (ite (= x68 128) x275 (x105 x68)))
(define-fun x49 ((x134 Int)) Bool (=> (and (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 x134)) (not (= 500000000000000000000000000 x134)) (not (= 826074471 x134)) (not (= x134 1865579259)) (not (= x134 3018967357)) (not (= 1461501637330902918203684832716283019655932542975 x134)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x134)) (not (= x134 2113256763)) (< 10000 x134) (not (= x134 1000000000000000000000000000)) (not (= 340282366920938463463374607431768211455 x134)) (not (= 3607235850 x134)) (not (= x134 1461501637330902918203684832716283019655932542976)) (not (= x134 115792089237316195423570985008687907853269984665640)) (not (= x134 340282366920938463463374607431768211456)) (not (= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 1889567281 x134)) (not (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 x134))) (not ((_ is x162) (x277 x134)))))
(assert (= (x162 3607235850) (x277 3607235850)))
(assert (x391 x9))
(assert (= 1000000000000000000000000000 x275))
(assert (x391 x384))
(assert (x391 x244))
(assert (x391 x269))
(assert (=> (<= x77 10000) (= (x277 x77) (x162 x77))))
(assert (x391 x289))
(assert (x391 x369))
(assert (x391 x81))
(assert (x391 x408))
(assert (x391 x202))
(assert (x391 x33))
(assert (x49 x117))
(assert (= 1000000000000000000000000000 (x63 (x162 1000000000000000000000000000))))
(assert (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x63 (x162 115792089237316195423570985008687907853269984665640064039457584007913129639935))))
(assert (x391 x145))
(assert (= 1461501637330902918203684832716283019655932542975 (x63 (x162 1461501637330902918203684832716283019655932542975))))
(assert (= (x63 (x277 x108)) x108))
(assert (= (x162 94699471215667416670508682402181198833950827816622411988269365108481485438976) (x277 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (x391 x172))
(assert (=> (>= 10000 x54) (= (x277 x54) (x162 x54))))
(assert (x391 x137))
(assert (x391 x59))
(assert (x391 x419))
(assert (= x294 true))
(assert (=> (>= 10000 x266) (= (x277 x266) (x162 x266))))
(assert (x391 x7))
(assert (x391 x82))
(assert (x391 x109))
(assert (x391 x21))
(assert (x49 x77))
(assert (x391 x240))
(assert (= x352 (and x315 (not x237))))
(assert (x391 x222))
(assert (x391 x175))
(assert (x391 x372))
(assert (x391 x130))
(assert (= (x63 (x162 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x391 x395))
(assert (x391 x214))
(assert (x391 x333))
(assert (= (and x315 x237) x62))
(assert (x391 x5))
(assert (x391 x414))
(assert (x391 x123))
(assert (x391 x417))
(assert (x391 x284))
(assert (x31 x337))
(assert (x391 x142))
(assert (x391 x79))
(assert (x391 x378))
(assert (x391 x437))
(assert (not x253))
(assert (x391 x14))
(assert (x391 x429))
(assert (x391 x125))
(assert (x391 x307))
(assert (x391 x319))
(assert (x391 x20))
(assert (x391 x98))
(assert (x391 x292))
(assert (= (x63 (x277 x348)) x348))
(assert (x391 x183))
(assert (= x423 (and (not x110) x87)))
(assert (x391 x99))
(assert (= x40 (and x254 x294)))
(assert (x391 x263))
(assert (x391 x26))
(assert (x391 x149))
(assert (x391 x406))
(assert (=> (<= x284 10000) (= (x162 x284) (x277 x284))))
(assert (= (or x352 x62) x87))
(assert (x391 x32))
(assert (x391 x89))
(assert (x391 x375))
(assert (x391 x16))
(assert (x391 x255))
(assert (x391 x182))
(assert (x391 x264))
(assert (x391 x381))
(assert (= x77 (x63 (x277 x77))))
(assert (x391 x60))
(assert (x391 x431))
(assert (= (x63 (x162 1865579259)) 1865579259))
(assert (x391 x275))
(assert (x391 x84))
(assert (x391 x190))
(assert (x391 x174))
(assert (x391 x64))
(assert (=> (>= 10000 x348) (= (x277 x348) (x162 x348))))
(assert (x391 x153))
(assert (x391 x344))
(assert (x391 x61))
(assert (x391 x188))
(assert (x391 x332))
(assert (x391 x427))
(assert (x265 x417))
(assert (x391 x331))
(assert (x391 x19))
(assert (x391 x291))
(assert (x391 x217))
(assert (= (or x40 x34) x315))
(assert (x391 x155))
(assert (= (and (not x254) x294) x34))
(assert (x391 x52))
(assert (x391 x27))
(assert (x391 x310))
(assert (=> (>= 10000 x360) (= (x162 x360) (x277 x360))))
(assert (x391 x335))
(assert (x391 x117))
(assert (x391 x301))
(assert (x391 x177))
(assert (x391 x356))
(assert (x391 x422))
(assert (x31 x417))
(assert (x391 x290))
(assert (x391 x400))
(assert (= (x162 2113256763) (x277 2113256763)))
(assert (x391 x402))
(assert (x391 x45))
(assert (x391 x311))
(assert (x391 x247))
(assert (x391 x191))
(assert (x391 x72))
(assert (x391 x413))
(assert (= (x277 500000000000000000000000000) (x162 500000000000000000000000000)))
(assert (x391 x266))
(assert (x391 x239))
(assert (= (x277 1461501637330902918203684832716283019655932542976) (x162 1461501637330902918203684832716283019655932542976)))
(assert (x391 x186))
(assert (x49 x54))
(assert (x391 x334))
(assert (= (x63 (x277 x266)) x266))
(assert (x391 x357))
(assert (= (x277 3018967357) (x162 3018967357)))
(assert (x391 x93))
(assert (x391 x428))
(assert (= (x63 (x162 500000000000000000000000000)) 500000000000000000000000000))
(assert (x391 x367))
(assert (= (=> (and (and (and (not (< 340282366920938463463374607431768211455 x149)) (< x246 340282366920938463463374607431768211456) (= x429 x374) (= x79 (mod (* x372 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x239 1461501637330902918203684832716283019655932542975) (= (x129 (x277 x266) (x162 52) 0) x65) (<= x266 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x348) (not (= x149 0)) (= x266 x113) (= (= x200 x22) x140) (<= x246 340282366920938463463374607431768211455) (= x174 x93) (= x413 x193) (= x374 (x127 1461501637330902918203684832716283019655932542975 x417)) (not (> 2113256763 x163)) (= (div x35 1000000000000000000000000000) x269) (>= x246 0) (<= x336 1461501637330902918203684832716283019655932542975) (= (x83 (+ 500000000000000000000000000 x2)) x35) (= x413 0) (>= x33 0) (> x335 0) (= (x83 (+ 500000000000000000000000000 x182)) x404) (= x172 x372) (= (x127 1461501637330902918203684832716283019655932542975 x337) x174) (= (ite x212 1 0) x197) (= x431 (x418 x365)) (< 0 x197) (= (not x295) x104) (= x322 (not x104)) (= x435 (= x114 0)) (<= x33 1461501637330902918203684832716283019655932542975) (= (x418 x241) x246) (= x192 (> x246 115792089237316195423570985008687907853269984665640)) (= x332 x244) (= x196 (div x404 1000000000000000000000000000)) (= x149 (div x167 1000000000000000000000000000)) (= (x24 (x277 x166)) x335) (= (< 115792089237316195423570985008687907853269984665640 x372) x295) x140 (= x188 (x418 x65)) (>= x431 0) (= x179 x322) (= (x129 (x277 x266) (x162 52) 0) x241) (= x290 x239) (>= x202 0) (= x93 (x127 1461501637330902918203684832716283019655932542975 x417)) (>= 1461501637330902918203684832716283019655932542975 x348) (= x432 x354) (< x431 340282366920938463463374607431768211456) (< (+ x149 x291) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x431 x149)) (= x354 (+ x149 x291)) (= x365 (x129 (x277 x266) (x162 52) 0)) (= x111 (not x192)) (= x149 x410) (= x236 (x201 (- x269 x196))) (<= x188 340282366920938463463374607431768211455) (= x111 x386) (= x367 (ite x386 1 0)) (= x159 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x114)) (< 0 x367) (= (mod (* x246 x114) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x182) (= x2 (mod (* x246 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x431 x48) (>= 1461501637330902918203684832716283019655932542975 x202) (<= x170 340282366920938463463374607431768211455) (= x212 (or x148 x435)) (= x237 (= x348 0)) (>= x291 0) (= x167 (x83 (+ 500000000000000000000000000 x79))) (>= 340282366920938463463374607431768211455 x431) (= (x127 1461501637330902918203684832716283019655932542975 x337) x429) (= x163 3018967357) (= 1000000000000000000000000000 x5) (= (x71 x434) x114) (>= x188 0) (not (< x163 3018967357)) (= 0 x25) (= x420 (x129 (x277 x266) (x162 52) 0)) (not (< x269 x196)) (= (- x118 x188) x200) (> 3607235850 x163) (= x286 x21) (= x220 x354) (= (x129 (x277 x266) (x162 52) 0) x434) (= (< x159 x246) x314) (= x33 x417) (<= 0 x348) (= x99 1000000000000000000000000000) (= (ite x179 1 0) x25) (= (+ x48 x410) x170) (= (not x314) x148) (< x114 340282366920938463463374607431768211456) (= x336 x286) (<= 0 x114) (<= 0 x336) (<= x291 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (+ x382 x170) x118) (>= 340282366920938463463374607431768211455 x114)) (or (and (not x237) (and (= (x24 (x277 x348)) x251) (not (= 0 x251)))) x237)) (and (= x17 x97) (= (x308 320) x145) (= x60 x150) (< (+ x60 x171) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x171 x242) (= x271 (+ x150 x242)) (= (= 0 x259) x17))) x234) x260))
(assert (x391 x56))
(assert (x391 x433))
(assert (x391 x364))
(assert (= x276 (or x423 x3)))
(assert (= 1461501637330902918203684832716283019655932542976 (x63 (x162 1461501637330902918203684832716283019655932542976))))
(assert (x391 x278))
(assert (x391 x426))
(assert (x391 x336))
(assert (x391 x25))
(assert (x391 x195))
(assert (= (=> (and (and (and (not (< x282 1865579259)) (> 340282366920938463463374607431768211456 x56) (not (= 1865579259 x282)) (< 0 x392) (= (mod (* x56 x384) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x67) (>= x137 0) (<= x56 340282366920938463463374607431768211455) (> 1461501637330902918203684832716283019655932542976 x137) (= x199 x180) (= (x24 (x277 x166)) x392) (not (< x282 826074471)) (< x282 2113256763) (= (x129 (x277 x54) (x162 52) 0) x136) (>= x56 0) (>= 1461501637330902918203684832716283019655932542975 x137) (< 0 x96) (= (or x100 x164) x219) (= (= 0 x384) x164) (>= 1461501637330902918203684832716283019655932542975 x54) (= (x112 x136) x56) (= x313 x54) (= x96 (ite x219 1 0)) (= x32 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x384)) (= (div x357 1000000000000000000000000000) x199) (= 1889567281 x282) (= (> x56 x32) x283) (= (x83 (+ x67 500000000000000000000000000)) x357) (= (not x283) x100) (= (x44 128) x384)) (and (= (+ x55 x147) x300) (= x238 x51) (= x153 x78) (= x52 x147) (= x177 3) (= x363 x51) (= (<= x153 x300) x216) (= x289 x52) (= (* x363 3) x55) (= x189 (+ x328 x13)) (= x180 x52) (= (and x216 x86) x80) (= x78 x13) (= (* x238 3) x328) (= x26 3) (= (<= x289 x189) x86))) (and (= x70 x339) (= x366 (+ x358 x50)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x390 x61)) (= x390 x358) (= x50 x61) (= x82 (x227 320)) (= (= 0 x333) x339))) x80) x221))
(assert (= (x162 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x277 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x391 x2))
(assert (= (x277 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x162 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x49 x166))
(assert (x391 x374))
(assert (= (x63 (x162 3018967357)) 3018967357))
(assert (x391 x120))
(assert (x391 x337))
(assert (x391 x360))
(assert (x391 x439))
(assert (x391 x139))
(assert (x391 x321))
(assert (= (x63 (x162 2113256763)) 2113256763))
(assert (= (x277 340282366920938463463374607431768211456) (x162 340282366920938463463374607431768211456)))
(assert (x391 x167))
(assert (x391 x438))
(assert (x391 x302))
(assert (x391 x180))
(assert (x391 x196))
(assert (x391 x178))
(assert (x391 x293))
(assert (x391 x42))
(assert (x391 x286))
(assert (x391 x318))
(assert (x391 x15))
(assert (x391 x231))
(assert (x391 x198))
(assert (x391 x366))
(assert (x391 x223))
(assert (x49 x360))
(assert (x391 x280))
(assert (x391 x324))
(assert (= (x277 1865579259) (x162 1865579259)))
(assert (x265 1461501637330902918203684832716283019655932542975))
(assert (x391 x353))
(assert (x391 x171))
(assert (= x360 (x63 (x277 x360))))
(assert (x391 x41))
(assert (x391 x257))
(assert (x391 x424))
(assert (= (x63 (x162 94699471215667416670508682402181198833950827816622411988269365108481485438976)) 94699471215667416670508682402181198833950827816622411988269365108481485438976))
(assert (x391 x132))
(assert (x391 x54))
(assert (x391 x13))
(assert (x391 x338))
(assert (x391 x114))
(assert (x391 x243))
(assert (x391 x185))
(assert (x265 x337))
(assert (x49 x284))
(assert (= (x63 (x277 x166)) x166))
(assert (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x63 (x162 22402283082756182618670880521465619040657731284550890770856599233457073160192))))
(assert (= (x162 826074471) (x277 826074471)))
(assert (x391 x329))
(assert (x391 x76))
(assert (x391 x376))
(assert (= 340282366920938463463374607431768211456 (x63 (x162 340282366920938463463374607431768211456))))
(assert (= x234 (=> (and (and (and (= x426 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x280)) (= x280 (x389 128)) (= x293 x394) (= (not x208) x151) (not (= 1865579259 x342)) (= (ite x12 1 0) x345) (> 1461501637330902918203684832716283019655932542976 x137) (>= x414 0) (> 340282366920938463463374607431768211456 x414) (not (> 826074471 x342)) (= (x92 x173) x414) (<= x137 1461501637330902918203684832716283019655932542975) (= (x24 (x277 x166)) x240) (> x240 0) (<= 0 x137) (= x113 x175) (< 0 x345) (= x293 (div x395 1000000000000000000000000000)) (= x12 (or x124 x151)) (= 1889567281 x342) (<= x175 1461501637330902918203684832716283019655932542975) (> 2113256763 x342) (not (> 1865579259 x342)) (= (x83 (+ 500000000000000000000000000 x41)) x395) (>= 340282366920938463463374607431768211455 x414) (= x173 (x129 (x277 x175) (x162 52) 0)) (= (mod (* x414 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x41) (= (= 0 x280) x124) (= x208 (< x426 x414))) (and (or x110 (and (not x110) (and (not (= 0 x331)) (= (x24 (x277 x348)) x331)))) (and (< (+ x432 x123) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 1000000000000000000000000000 x299) (= x399 x432) (= x290 x310) (= (x127 1461501637330902918203684832716283019655932542975 x417) x6) (= (ite x90 1 0) x42) (= (x127 1461501637330902918203684832716283019655932542975 x337) x91) (< (+ x57 x123) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x307 340282366920938463463374607431768211455) (= (div x319 1000000000000000000000000000) x402) (= (x129 (x277 x108) (x162 52) 0) x256) (= (x127 1461501637330902918203684832716283019655932542975 x337) x132) (< 0 x42) (= x132 x359) (= x309 (+ x10 x425)) (= x59 0) (<= x432 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x195 (x83 (+ 500000000000000000000000000 x138))) (= x287 (< 115792089237316195423570985008687907853269984665640 x390)) (not (> 3018967357 x135)) (= x6 x91) (> x433 0) (= (x24 (x277 x166)) x186) (= x397 x39) (= x10 x57) (= (x129 (x277 x108) (x162 52) 0) x228) (= x130 (x1 x228)) (= x7 (div x195 1000000000000000000000000000)) (>= x364 0) (= x90 (or x211 x53)) (>= x57 0) (> 1461501637330902918203684832716283019655932542976 x348) (= (not x380) x398) (>= x333 0) (= (= 0 x348) x110) (< x57 340282366920938463463374607431768211456) (= x78 x394) (= x231 x21) (= x278 x244) (<= 0 x130) (= x390 (x83 (+ x318 x375))) (>= x432 0) (not (= 0 x123)) (<= x272 1461501637330902918203684832716283019655932542975) (= x264 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x130)) (= x318 x172) (= x385 (+ x22 x309)) (= (x201 (- x7 x402)) x61) (= x400 (x83 (+ 500000000000000000000000000 x27))) (= (x129 (x277 x108) (x162 52) 0) x11) (>= x348 0) (= x433 (ite x39 1 0)) (>= 1461501637330902918203684832716283019655932542975 x108) (= (x92 x256) x333) (>= 1461501637330902918203684832716283019655932542975 x217) (< x135 3607235850) (= x364 x231) (= (not x250) x397) (<= x310 1461501637330902918203684832716283019655932542975) (= x425 x123) (= (= x130 0) x53) (<= x333 340282366920938463463374607431768211455) (not (< x7 x402)) (>= 1461501637330902918203684832716283019655932542975 x348) (= (x92 x11) x57) (= x398 x58) (= (mod (* 1000000000000000000000000000 x390) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x27) (= 1000000000000000000000000000 x20) (<= 0 x217) (= (div x400 1000000000000000000000000000) x123) (= (ite x58 1 0) x321) (= x135 3018967357) (= x59 x193) (= (> x333 x264) x305) (= x211 (not x305)) (= (x127 1461501637330902918203684832716283019655932542975 x417) x359) (= x108 x313) (<= x57 340282366920938463463374607431768211455) (= (mod (* x333 x130) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x422) (<= 0 x272) (< x333 340282366920938463463374607431768211456) (= (x92 x267) x307) (= x267 (x129 (x277 x108) (x162 52) 0)) (= x301 (+ x399 x349)) (= (> x333 115792089237316195423570985008687907853269984665640) x250) (> x186 0) (<= 0 x307) (= x349 x123) (> 340282366920938463463374607431768211456 x130) (= x375 x14) (= (= x98 x416) x379) (= x417 x217) (>= 340282366920938463463374607431768211455 x130) (not (< 340282366920938463463374607431768211455 x123)) (= x416 (- x385 x307)) (= x319 (x83 (+ x422 500000000000000000000000000))) (>= 1461501637330902918203684832716283019655932542975 x364) x379 (= x138 (mod (* x333 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x321 0) (>= 340282366920938463463374607431768211455 x309) (not (< x135 2113256763)) (= x380 (not x287))))) (and (= x160 (= x246 0)) (= x430 x372) (< (+ x236 x372) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x103 x430) x64) (= x236 x103) (= x160 x121) (= x311 (x393 320)))) x221)))
(assert (x391 x248))
(assert (=> (<= x166 10000) (= (x162 x166) (x277 x166))))
(assert (x391 x6))
(assert (= x253 (=> (and (and (and (<= 0 x369) (>= 1461501637330902918203684832716283019655932542975 x137) (= x419 (x341 128)) (not (< x156 1865579259)) (< 0 x139) (<= x284 1461501637330902918203684832716283019655932542975) (<= x369 340282366920938463463374607431768211455) (< x156 2113256763) (= (= x419 0) x298) (= x369 (x143 x146)) (= (> x369 x340) x158) (= x156 1889567281) (= x142 x338) (= x340 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x419)) (not (= x156 1865579259)) (= x284 x313) (= x247 (mod (* x369 x419) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (< x156 826074471)) (= x407 x155) (= (or x233 x298) x131) (= x146 (x129 (x277 x284) (x162 52) 0)) (= x30 (ite x131 1 0)) (= (not x158) x233) (= (x83 (+ 500000000000000000000000000 x247)) x191) (= (x24 (x277 x166)) x139) (= (div x191 1000000000000000000000000000) x407) (> x30 0) (> 1461501637330902918203684832716283019655932542976 x137) (<= 0 x137) (> 340282366920938463463374607431768211456 x369)) (and (or (and (and (= x428 (x24 (x277 x348))) (not (= x428 0))) (not x254)) x254) (and (> 3607235850 x125) (not (< x125 2113256763)) (= (x83 (+ x109 500000000000000000000000000)) x248) (<= 0 x45) (= x210 (not x122)) (>= x190 0) (= 3018967357 x125) (= x373 x427) (= x356 x417) (= x334 (x127 1461501637330902918203684832716283019655932542975 x337)) (<= 0 x356) (= x415 (mod (* x60 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x259 (x143 x249)) (>= 340282366920938463463374607431768211455 x406) (= x73 x187) (= (+ x45 x355) x373) (< 0 x169) (= (x129 (x277 x117) (x162 52) 0) x128) (<= 0 x259) (= x255 (div x72 1000000000000000000000000000)) (<= x356 1461501637330902918203684832716283019655932542975) (= (< 115792089237316195423570985008687907853269984665640 x60) x403) (<= x259 340282366920938463463374607431768211455) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x355 x198)) (<= x9 1461501637330902918203684832716283019655932542975) (> 340282366920938463463374607431768211456 x259) (= x437 x193) (> 340282366920938463463374607431768211456 x198) (= (x143 x128) x324) (= x296 (div x248 1000000000000000000000000000)) (= x350 (- x401 x324)) (= x401 (+ x320 x302)) (<= x320 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x292) (not (< 340282366920938463463374607431768211455 x355)) (= x72 (x83 (+ x378 500000000000000000000000000))) (= (mod (* x406 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x109) (> 340282366920938463463374607431768211456 x406) (= x198 x346) (not (> x296 x255)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x406) x317) (= (= x350 x382) x411) (= x408 (x127 1461501637330902918203684832716283019655932542975 x417)) (= (x143 x106) x198) (>= x324 0) (= x396 (not x304)) (>= x406 0) (= x95 (ite x181 1 0)) (= x181 x210) (<= x348 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x190) (not (= x355 0)) (= (< x317 x259) x304) (= (not x403) x122) (= x178 (x24 (x277 x166))) (not (> 3018967357 x125)) x107 (= 1000000000000000000000000000 x381) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x355 x45)) (= (= 0 x406) x351) (= x190 x89) (<= 0 x348) (= (mod (* 1000000000000000000000000000 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x378) (> x178 0) (= (x201 (- x255 x296)) x171) x411 (= x187 (not x252)) (= (div x438 1000000000000000000000000000) x355) (= x320 (+ x346 x312)) (> 1461501637330902918203684832716283019655932542976 x348) (= x373 x291) (= x107 (and x421 x388)) (= (= x338 x353) x388) (= x117 x113) (= x343 (or x396 x351)) (= x439 x244) (= x155 x353) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) (= (ite x73 1 0) x344) (= x313 x15) (= x437 0) (= (x129 (x277 x117) (x162 52) 0) x106) (= x95 0) (>= x9 0) (= x94 1000000000000000000000000000) (= (ite x343 1 0) x169) (= x66 (x129 (x277 x117) (x162 52) 0)) (= x406 (x154 x66)) (= x60 x14) (<= x198 340282366920938463463374607431768211455) (= x113 x206) (<= x324 340282366920938463463374607431768211455) (= x249 (x129 (x277 x117) (x162 52) 0)) (= (< 115792089237316195423570985008687907853269984665640 x259) x252) (= x424 (x127 1461501637330902918203684832716283019655932542975 x337)) (= x290 x292) (= x254 (= 0 x348)) (= x222 (x127 1461501637330902918203684832716283019655932542975 x417)) (<= 0 x198) (= x312 x355) (> x344 0) (= x438 (x83 (+ x415 500000000000000000000000000))) (<= x117 1461501637330902918203684832716283019655932542975) (= x408 x424) (= x421 (not (= x15 x206))) (= x334 x222) (= x218 (x129 (x277 x117) (x162 52) 0)) (= x89 x21)))) (and (< 0 x81) (>= x329 0) (= x142 x120) x88 (<= 0 x313) (>= x75 0) (< x168 340282366920938463463374607431768211456) (= (< x84 x168) x230) (<= x183 255) (>= 1461501637330902918203684832716283019655932542975 x214) (>= 1461501637330902918203684832716283019655932542975 x137) (>= 1461501637330902918203684832716283019655932542975 x348) (<= 0 x168) (> x16 0) (= (x143 x43) x168) (= x417 x75) (<= 0 x113) (= x275 x244) (= x371 (mod (* x168 x257) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 340282366920938463463374607431768211455 x168) (= (or x258 x370) x157) (<= x360 1461501637330902918203684832716283019655932542975) (= x88 (< 0 (x24 (x277 x77)))) (<= x313 1461501637330902918203684832716283019655932542975) (>= x290 0) (= x120 (div x243 1000000000000000000000000000)) (> 1461501637330902918203684832716283019655932542976 x137) (= (x83 (+ x371 500000000000000000000000000)) x243) (<= 0 x76) (<= 0 x137) (>= x348 0) (not (= x166 x77)) (= x84 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x257)) (>= 1461501637330902918203684832716283019655932542975 x137) (= x77 x137) (= x244 x316) (>= x214 0) (not (= 1865579259 x362)) (= (x262 128) x257) (= x360 x113) (<= x166 1461501637330902918203684832716283019655932542975) (= (= 0 x257) x370) (= (not x230) x258) (<= x75 1461501637330902918203684832716283019655932542975) (>= x183 0) (= (x303 (x277 x166)) x273) (= x51 (div x316 1000000000000000000000000000)) (<= 0 x377) (>= 1461501637330902918203684832716283019655932542975 x329) (not (> 1865579259 x362)) (not (< x362 826074471)) (= x43 (x129 (x277 x360) (x162 52) 0)) (= (ite x157 1 0) x16) (<= 0 x273) (<= x113 1461501637330902918203684832716283019655932542975) (> x77 0) (> x166 0) (<= 0 x137) (= (> (x24 (x277 x166)) 0) x409) (= (x303 (x277 x77)) x76) (>= 1461501637330902918203684832716283019655932542975 x77) (= x224 x214) (= (x24 (x277 x166)) x81) x409 (< x362 2113256763) (= x19 1000000000000000000000000000) (= x362 1889567281) (>= 1461501637330902918203684832716283019655932542975 x290) (>= 255 x377))) x260)))
(assert (=> (>= 10000 x108) (= (x162 x108) (x277 x108))))
(assert (= (x277 1889567281) (x162 1889567281)))
(assert (x391 x135))
(assert (x391 x340))
(assert (x391 x313))
(assert (x391 x316))
(assert (x391 x394))
(assert (x391 x392))
(assert (=> (>= 10000 x175) (= (x277 x175) (x162 x175))))
(assert (x391 x169))
(assert (x391 x296))
(assert (=> (<= x117 10000) (= (x277 x117) (x162 x117))))
(assert (x391 x197))
(assert (x391 x193))
(assert (x391 x163))
(assert (= (x277 340282366920938463463374607431768211455) (x162 340282366920938463463374607431768211455)))
(assert (x391 x96))
(assert (x391 x199))
(assert (x391 x317))
(assert (x391 x415))
(assert (x391 x206))
(assert (x391 x224))
(assert (= (x63 (x162 3607235850)) 3607235850))
(assert (x391 x94))
(assert (x391 x320))
(assert (x391 x78))
(assert (= (x277 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x162 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x391 x220))
(assert (x391 x432))
(assert (= (x63 (x277 x54)) x54))
(assert (x391 x113))
(assert (x391 x108))
(assert (x391 x170))
(assert (= (x63 (x277 x117)) x117))
(assert (= (x63 (x162 1889567281)) 1889567281))
(assert (= (x277 115792089237316195423570985008687907853269984665640) (x162 115792089237316195423570985008687907853269984665640)))
(assert (x391 x404))
(assert (x391 x116))
(assert (x391 x407))
(assert (x391 x345))
(assert (x49 x108))
(assert (x391 x246))
(assert (x391 x272))
(assert (x391 x168))
(assert (x391 x91))
(assert (= (x63 (x277 x284)) x284))
(assert (x391 x377))
(assert (x391 x390))
(assert (x391 x159))
(assert (x391 x57))
(assert (x49 x348))
(assert (x49 x266))
(assert (= (x63 (x162 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x391 x156))
(assert (= (and x87 x110) x3))
(assert (x391 x359))
(assert (= (x63 (x162 115792089237316195423570985008687907853269984665640)) 115792089237316195423570985008687907853269984665640))
(assert (= (x162 1461501637330902918203684832716283019655932542975) (x277 1461501637330902918203684832716283019655932542975)))
(assert (x391 x261))
(assert (x391 x95))
(assert (x391 x259))
(assert (x391 x362))
(assert (= (x162 1000000000000000000000000000) (x277 1000000000000000000000000000)))
(assert (x391 x348))
(assert (x391 x35))
(assert (x391 x355))
(assert (x391 x22))
(assert (x391 x236))
(assert (x391 x166))
(assert (x391 x67))
(assert (x391 x282))
(assert (x391 x271))
(assert (= x175 (x63 (x277 x175))))
(assert (x391 x75))
(assert (x391 x138))
(assert (x391 x299))
(assert (= 826074471 (x63 (x162 826074471))))
(assert (x391 x23))
(assert (x49 x175))
(assert (x391 x30))
(assert (x391 x251))
(assert (x391 x77))
(assert (x391 x147))
(assert (x391 x309))
(assert (x391 x371))
(assert (x391 x273))
(assert (x391 x382))
(assert (x391 x342))
(check-sat)
(exit)