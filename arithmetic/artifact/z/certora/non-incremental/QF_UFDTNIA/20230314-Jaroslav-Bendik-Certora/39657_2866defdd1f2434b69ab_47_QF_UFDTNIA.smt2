(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x268 0)) (((x176 (x133 Int)) (x139 (x10 x268) (x99 x268) (x237 x268) (x86 x268) (x100 Int)) (x180 (x132 x268) (x127 Int)) (x205 (x164 x268) (x236 x268) (x45 Int)))))
(declare-fun x216 () Int)
(declare-fun x125 () Int)
(declare-fun x13 () Bool)
(declare-fun x243 () x268)
(declare-fun x41 () Int)
(declare-fun x78 () Bool)
(declare-fun x91 () Int)
(declare-fun x186 () Int)
(declare-fun x154 () Bool)
(declare-fun x111 () Int)
(declare-fun x30 () Int)
(declare-fun x138 () Int)
(declare-fun x217 (x268) Int)
(declare-fun x136 (Int) Int)
(declare-fun x201 () Int)
(declare-fun x69 () Int)
(declare-fun x9 () Int)
(declare-fun x194 () Int)
(declare-fun x47 () Int)
(declare-fun x171 () Int)
(declare-fun x170 () Bool)
(declare-fun x244 () Int)
(declare-fun x63 () Int)
(declare-fun x57 () Bool)
(declare-fun x75 () Bool)
(declare-fun x76 () Bool)
(declare-fun x238 () Int)
(declare-fun x6 () Int)
(declare-fun x158 () Int)
(declare-fun x60 (Int Int) Int)
(declare-fun x190 () Int)
(declare-fun x108 () Int)
(declare-fun x273 () Bool)
(declare-fun x43 () x268)
(declare-fun x239 () Int)
(declare-fun x275 () Bool)
(declare-fun x251 () Int)
(declare-fun x226 () Bool)
(declare-fun x206 () Int)
(declare-fun x106 () Int)
(declare-fun x145 () Int)
(declare-fun x183 () Int)
(declare-fun x44 () Bool)
(declare-fun x149 () Bool)
(declare-fun x110 () Int)
(declare-fun x285 () Int)
(declare-fun x181 () Int)
(declare-fun x219 () Int)
(declare-fun x53 () Bool)
(declare-fun x23 () Int)
(declare-fun x282 () Int)
(declare-fun x162 () Bool)
(declare-fun x80 () Int)
(declare-fun x203 () Bool)
(declare-fun x256 () Int)
(declare-fun x157 () Bool)
(declare-fun x229 () Bool)
(declare-fun x28 () Int)
(declare-fun x254 () x268)
(declare-fun x204 () Bool)
(declare-fun x169 () Int)
(declare-fun x16 (x268) Int)
(declare-fun x257 () Int)
(declare-fun x26 () Bool)
(declare-fun x70 () Int)
(declare-fun x68 () Int)
(declare-fun x143 () Int)
(declare-fun x284 () Int)
(declare-fun x232 () Int)
(declare-fun x103 () Int)
(declare-fun x74 () Int)
(declare-fun x142 () Int)
(declare-fun x160 () Int)
(declare-fun x67 () Bool)
(declare-fun x215 (x268) Int)
(declare-fun x155 () x268)
(declare-fun x130 () Int)
(declare-fun x146 () Int)
(declare-fun x15 () Int)
(declare-fun x20 () Int)
(declare-fun x247 () Int)
(declare-fun x221 () Int)
(declare-fun x105 () Int)
(declare-fun x112 () Int)
(declare-fun x159 () Int)
(declare-fun x37 () x268)
(declare-fun x90 () Int)
(declare-fun x7 () x268)
(declare-fun x144 () Int)
(declare-fun x276 () Int)
(declare-fun x225 (Int Int) Int)
(declare-fun x227 () Int)
(declare-fun x208 () Bool)
(declare-fun x27 () Int)
(declare-fun x4 () Int)
(declare-fun x252 () Int)
(declare-fun x175 () Bool)
(declare-fun x198 (Int) Int)
(declare-fun x266 (Int Int) Int)
(declare-fun x174 () Int)
(declare-fun x31 () x268)
(declare-fun x8 () Bool)
(declare-fun x261 () Int)
(declare-fun x59 () Int)
(declare-fun x167 () Bool)
(declare-fun x214 () Int)
(declare-fun x230 () Int)
(declare-fun x228 () Int)
(declare-fun x242 () Int)
(declare-fun x200 () Int)
(declare-fun x279 (x268) Int)
(declare-fun x123 () Bool)
(declare-fun x17 () x268)
(declare-fun x92 () Int)
(declare-fun x222 () x268)
(declare-fun x102 () Int)
(declare-fun x269 () Int)
(declare-fun x3 () Bool)
(declare-fun x22 () Int)
(declare-fun x151 () Bool)
(declare-fun x96 () x268)
(declare-fun x188 () Int)
(declare-fun x121 () Int)
(declare-fun x62 () Bool)
(declare-fun x42 () Int)
(declare-fun x122 () Int)
(declare-fun x193 () Bool)
(declare-fun x272 () Int)
(declare-fun x182 () Int)
(declare-fun x255 () Int)
(declare-fun x168 () Bool)
(declare-fun x51 () Int)
(declare-fun x166 () Int)
(declare-fun x249 () Int)
(declare-fun x278 (Int Int) Int)
(declare-fun x150 () Int)
(declare-fun x11 () Bool)
(declare-fun x124 () Int)
(declare-fun x178 () Bool)
(declare-fun x165 (x268) Int)
(declare-fun x235 () Bool)
(declare-fun x19 () Int)
(declare-fun x258 (x268) Int)
(declare-fun x260 () Int)
(declare-fun x185 () Int)
(declare-fun x64 (Int Int) Int)
(declare-fun x88 () Bool)
(declare-fun x141 () x268)
(declare-fun x126 () x268)
(declare-fun x84 () Bool)
(declare-fun x192 () Int)
(declare-fun x196 () Int)
(declare-fun x93 () Int)
(declare-fun x14 () x268)
(declare-fun x197 () Bool)
(declare-fun x264 () Int)
(declare-fun x119 () Bool)
(declare-fun x191 () Int)
(declare-fun x116 () Bool)
(declare-fun x245 () Bool)
(declare-fun x55 () Int)
(declare-fun x109 () Int)
(declare-fun x248 () Bool)
(declare-fun x134 () x268)
(declare-fun x224 () x268)
(declare-fun x274 () Int)
(declare-fun x223 () Int)
(declare-fun x98 () Bool)
(declare-fun x267 () Bool)
(declare-fun x286 () Bool)
(declare-fun x153 (x268) Int)
(declare-fun x52 () x268)
(declare-fun x262 () Bool)
(declare-fun x118 () x268)
(declare-fun x104 () Int)
(declare-fun x32 (Int Int) Int)
(declare-fun x277 () Int)
(declare-fun x187 () Int)
(declare-fun x207 () Bool)
(declare-fun x89 () Int)
(declare-fun x33 () Int)
(declare-fun x35 () Bool)
(declare-fun x233 () x268)
(declare-fun x152 () Int)
(declare-fun x50 () Int)
(declare-fun x71 () Bool)
(declare-fun x211 () Bool)
(declare-fun x49 () Int)
(declare-fun x24 () x268)
(declare-fun x234 () Bool)
(declare-fun x29 () Bool)
(declare-fun x18 (Int) Int)
(declare-fun x114 () x268)
(declare-fun x83 () Int)
(declare-fun x161 (Int) x268)
(declare-fun x283 () Int)
(declare-fun x263 () Int)
(declare-fun x94 (Int) Bool)
(declare-fun x117 () Bool)
(declare-fun x231 () Bool)
(declare-fun x113 () Int)
(declare-fun x128 () Int)
(declare-fun x36 () Int)
(declare-fun x72 () Bool)
(declare-fun x1 () Int)
(declare-fun x270 () Int)
(declare-fun x195 (x268) Int)
(declare-fun x2 () Int)
(declare-fun x39 () Bool)
(declare-fun x120 () Int)
(declare-fun x101 () Int)
(declare-fun x95 () Int)
(declare-fun x66 () Bool)
(declare-fun x5 () Int)
(declare-fun x79 () x268)
(declare-fun x202 () Int)
(declare-fun x209 () Bool)
(declare-fun x87 () Int)
(declare-fun x140 () Bool)
(declare-fun x281 () Int)
(declare-fun x73 () Int)
(define-fun x38 ((x268 x268) (x212 Int)) x268 (ite ((_ is x180) x268) (x180 (x132 x268) (+ x212 (x127 x268))) (ite ((_ is x139) x268) (x139 (x10 x268) (x99 x268) (x237 x268) (x86 x268) (+ x212 (x100 x268))) (ite ((_ is x205) x268) (x205 (x164 x268) (x236 x268) (+ x212 (x45 x268))) (x176 (+ x212 (x133 x268)))))))
(define-fun x156 ((x115 Int)) Int (ite (and (< x115 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x115 0)) x115 (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x25 ((x115 Int)) Int (ite (and (> 0 x115) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x115)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x115) x115))
(define-fun x12 ((x177 Int)) Bool (and (>= x177 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x177)))
(define-fun x40 ((x177 Int)) Bool (and (= (x225 x177 115792089237316195423570985008687907853269984665640564039457584007913129639935) x177) (= x177 (x225 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177))))
(define-fun x265 ((x177 Int)) Bool (and (= 0 (x225 x177 0)) (= 0 (x225 0 x177))))
(define-fun x137 ((x177 Int)) Bool (= x177 (x225 x177 x177)))
(define-fun x280 ((x177 Int)) Bool (and (x137 x177) (x40 x177) (x265 x177)))
(define-fun x65 ((x177 Int) (x46 Int)) Bool (= (x225 x46 x177) (x225 x177 x46)))
(define-fun x179 ((x177 Int) (x46 Int)) Bool (and (=> (<= 0 x177) (>= x177 (x225 x177 x46))) (<= 0 (x225 x177 x46)) (=> (<= 0 x46) (<= (x225 x177 x46) x46))))
(define-fun x172 ((x177 Int) (x46 Int)) Bool (and (x179 x177 x46) (x65 x177 x46)))
(define-fun x240 ((x177 Int)) Bool (= (mod x177 256) (x225 x177 255)))
(define-fun x199 ((x177 Int)) Bool (and (x172 x177 255) (x240 x177)))
(define-fun x163 ((x177 Int)) Bool (= (mod x177 26959946667150639794667015087019630673637144422540572481103610249216) (x225 x177 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x81 ((x177 Int)) Bool (and (x163 x177) (x172 x177 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x271 ((x177 Int)) Bool (= (x225 x177 1461501637330902918203684832716283019655932542975) (mod x177 1461501637330902918203684832716283019655932542976)))
(define-fun x210 ((x177 Int)) Bool (and (x271 x177) (x172 x177 1461501637330902918203684832716283019655932542975)))
(define-fun x97 ((x177 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x32 x177 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x32 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177))))
(define-fun x253 ((x177 Int)) Bool (and (= (x32 x177 0) x177) (= x177 (x32 0 x177))))
(define-fun x61 ((x177 Int)) Bool (= (x32 x177 x177) x177))
(define-fun x213 ((x177 Int)) Bool (and (x253 x177) (x97 x177) (x61 x177)))
(define-fun x220 ((x177 Int) (x46 Int)) Bool (= (x32 x46 x177) (x32 x177 x46)))
(define-fun x21 ((x177 Int) (x46 Int)) Bool (and (=> (>= x177 0) (>= (x32 x177 x46) x177)) (=> (<= 0 x46) (<= x46 (x32 x177 x46))) (<= (x32 x177 x46) (+ x46 x177))))
(define-fun x82 ((x177 Int) (x46 Int)) Bool (and (x220 x177 x46) (x21 x177 x46)))
(define-fun x131 ((x85 Int)) Int (x136 x85))
(define-fun x250 ((x85 Int)) Int (ite (= x85 164) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x18 x85)))
(define-fun x218 ((x85 Int)) Int (ite (= 128 x85) 36 (x250 x85)))
(define-fun x241 ((x85 Int)) Int (ite (= x85 160) x83 (x218 x85)))
(define-fun x246 ((x85 Int)) Int (ite (= x85 232) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x241 x85)))
(define-fun x54 ((x85 Int)) Int (ite (= x85 196) 36 (x246 x85)))
(define-fun x34 ((x85 Int)) Int (ite (= 228 x85) x130 (x54 x85)))
(define-fun x259 ((x85 Int)) Int (ite x157 (x241 x85) (x34 x85)))
(define-fun x77 ((x85 Int)) Int (ite (= x104 x85) 0 (x259 x85)))
(define-fun x48 ((x85 Int)) Int (ite (= x85 x200) x90 (x77 x85)))
(define-fun x184 ((x85 Int)) Int (ite (= x23 x85) x146 (x48 x85)))
(define-fun x148 ((x85 Int)) Int (ite x116 (x18 x85) (ite x170 (x259 x85) (x184 x85))))
(define-fun x189 ((x85 Int)) Int (ite (= x108 x85) x283 (x148 x85)))
(define-fun x173 ((x85 Int)) Int (ite (= x85 x93) x219 (x189 x85)))
(define-fun x147 ((x85 Int)) Int (ite (= x270 x85) x191 (x173 x85)))
(define-fun x135 ((x85 Int)) Int (ite (= x238 x85) x227 (x147 x85)))
(define-fun x56 ((x85 Int)) Int (ite (and (<= x166 x85) (< x85 (+ x110 x166))) (x136 (+ (- x85 x166) x128)) (x135 x85)))
(define-fun x129 ((x85 Int)) Int (ite (= x274 x85) 0 (x56 x85)))
(define-fun x58 ((x85 x268)) Int (ite (= x79 x85) x196 (x258 x85)))
(define-fun x107 ((x177 Int)) Bool (=> (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177)) (not (= x177 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (not (= 292666793 x177)) (not (= x177 1461501637330902918203684832716283019655932542975)) (not (= x177 2510660263)) (not (= x177 18446744073709551615)) (not (= x177 464684736)) (not (= x177 26959946667150639794667015087019630673637144422540572481103610249215)) (< 10000 x177) (not (= x177 388749022)) (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 x177))) (not ((_ is x176) (x161 x177)))))
(assert (=> (>= 10000 x261) (= (x161 x261) (x176 x261))))
(assert (=> (>= 10000 x109) (= (x176 x109) (x161 x109))))
(assert (x82 x122 x120))
(assert (x12 x252))
(assert (= x245 (and x66 (not x231))))
(assert (= 0 (x18 x23)))
(assert (= x88 true))
(assert (x280 x283))
(assert (x107 x223))
(assert (x280 x174))
(assert (x12 x128))
(assert (x12 x263))
(assert (x12 x36))
(assert (= x207 (and (not x67) x75)))
(assert (x12 x150))
(assert (x107 x283))
(assert (x12 x201))
(assert (x12 x227))
(assert (x12 x244))
(assert (x12 x242))
(assert (x12 x74))
(assert (x12 x256))
(assert (= (x176 292666793) (x161 292666793)))
(assert (=> (>= 10000 x125) (= (x176 x125) (x161 x125))))
(assert (x107 x277))
(assert (= (mod (ite (> 256 x202) (x266 2 x202) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x278 1 x202)))
(assert (x12 x171))
(assert (x12 x113))
(assert (= (x176 26959946667150639794667015087019630673637144422540572481103610249215) (x161 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x280 x111))
(assert (=> (<= x277 10000) (= (x176 x277) (x161 x277))))
(assert (x280 255))
(assert (= (or x157 x209) x75))
(assert (= (x153 (x176 26959946667150639794667015087019630673637144422540572481103610249215)) 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (= x264 (x153 (x161 x264))))
(assert (x107 x282))
(assert (x12 x2))
(assert (= (x153 (x161 (x60 x219 96))) (x60 x219 96)))
(assert (=> (>= 10000 x260) (= (x161 x260) (x176 x260))))
(assert (x12 x143))
(assert (x12 x63))
(assert (= (x60 x219 96) (div x219 79228162514264337593543950336)))
(assert (x12 x285))
(assert (=> (>= 10000 x223) (= (x176 x223) (x161 x223))))
(assert (x12 x112))
(assert (x12 x20))
(assert (x213 x120))
(assert (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x153 (x176 115792089210356248756420345214020892766250353992003419616917011526809519390720))))
(assert (x12 x276))
(assert (x81 x47))
(assert (x12 x41))
(assert (=> (>= 10000 x283) (= (x176 x283) (x161 x283))))
(assert (x12 x282))
(assert (=> (>= 10000 x282) (= (x161 x282) (x176 x282))))
(assert (= (x278 1 x276) (mod (ite (> 256 x276) (x266 2 x276) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x107 x59))
(assert (x12 x68))
(assert (not x71))
(assert (x12 x42))
(assert (x210 x223))
(assert (= x261 (x153 (x161 x261))))
(assert (= x170 (and x67 x75)))
(assert (x12 x160))
(assert (x12 x216))
(assert (x107 x247))
(assert (x12 x33))
(assert (x12 x55))
(assert (x12 x6))
(assert (= x102 (x153 (x161 x102))))
(assert (x12 x249))
(assert (x107 x150))
(assert (x12 x269))
(assert (=> (<= x264 10000) (= (x161 x264) (x176 x264))))
(assert (= x223 (x153 (x161 x223))))
(assert (x107 x20))
(assert (x12 x206))
(assert (= x125 (x153 (x161 x125))))
(assert (x199 x9))
(assert (x107 x251))
(assert (= (x153 (x161 x150)) x150))
(assert (= 0 (x18 228)))
(assert (x12 x274))
(assert (x107 x261))
(assert (= (x161 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x176 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x12 x1))
(assert (= 464684736 (x153 (x176 464684736))))
(assert (x12 x91))
(assert (= x282 (x153 (x161 x282))))
(assert (x12 x194))
(assert (= x277 (x153 (x161 x277))))
(assert (x280 1461501637330902918203684832716283019655932542975))
(assert (= 2510660263 (x153 (x176 2510660263))))
(assert (= (x176 904250603428552709895185118199468575982109441609966099573332780532423983104) (x161 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x12 x196))
(assert (x12 x152))
(assert (x107 x206))
(assert (x12 x103))
(assert (= (x60 x9 8) (div x9 256)))
(assert (x172 x51 x257))
(assert (x12 x144))
(assert (x280 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x12 x49))
(assert (x12 x28))
(assert (= (x176 388749022) (x161 388749022)))
(assert (= (and x193 x229) x157))
(assert (x172 x111 x174))
(assert (x12 x87))
(assert (= (=> (and (and (< 0 x159) (not (= 292666793 x269)) (= x128 (x156 (+ 32 x158))) (<= 0 x2) (<= x19 1461501637330902918203684832716283019655932542975) (not (or (> x101 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x101) true) (> 128 x101)))) (>= 255 x188) (= x206 x144) (= x284 x30) (= x223 x49) (= (x156 (+ x158 31)) x216) (not (< x185 4)) (= x124 (x156 (+ x92 x128))) (<= x223 1461501637330902918203684832716283019655932542975) (>= x188 0) (<= 0 x19) (= x92 (mod (* 32 x227) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x25 (- x185 4)) x101) (= x160 x206) (= (> x188 0) x140) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x185) true) (< 131 x185)) (>= 1461501637330902918203684832716283019655932542975 x2) (not (= x103 2)) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x216) (<= x185 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x216 x185) (= (<= x216 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x185)))) (>= x103 0) (< x269 2510660263) (not (> x41 18446744073709551615)) (<= x152 1461501637330902918203684832716283019655932542975) (= x255 x223) (= (x136 x158) x227) (= (x165 x118) x188) (= x41 x50) (not (> x227 18446744073709551615)) (= x158 (x156 (+ x50 4))) (not (< x185 x124)) (= x214 0) (> 256 x188) (= x118 (x205 (x161 x223) (x176 4) 0)) (= x159 (x217 (x161 x59))) (= (not (= x105 0)) x53) (= x143 x214) (= x167 x53) (= x186 x36) (<= x103 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x232 x283) (= x19 x239) (>= x152 0) (= 388749022 x269) (= x186 x152)) (and (<= x59 1461501637330902918203684832716283019655932542975) (= x234 false) (= (ite x29 1 0) x105) (>= 1461501637330902918203684832716283019655932542975 x125) (not (= x59 x264)) (= x203 false) (<= x121 1461501637330902918203684832716283019655932542975) (< x73 2510660263) (< 0 x263) (>= 1461501637330902918203684832716283019655932542975 x150) (= x125 x221) (= (not x117) x29) (= x62 (< 0 (x217 (x161 x59)))) (= (= 0 x15) x204) (>= x121 0) (< 0 x59) (< 0 x264) (= 464684736 x73) (not (= x73 292666793)) (= x286 false) (= x190 (x225 255 x9)) (not (= x264 x150)) (= x17 (x205 (x161 x109) x224 0)) (= x9 x138) (= x98 false) (= x154 (> (x217 (x161 x150)) 0)) (not (= 388749022 x73)) (= x257 (x278 1 x190)) (<= x221 1461501637330902918203684832716283019655932542975) (<= x264 1461501637330902918203684832716283019655932542975) (> x150 0) (>= x221 0) x154 (>= x89 0) (<= x22 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x95) (= x28 4) (= (x215 (x161 x150)) x27) (>= x142 0) (= (x258 x126) x51) x168 (= (x225 x51 x257) x15) (= x89 (x215 (x161 x264))) (not (= x59 x150)) (= (x38 x17 3) x31) (>= x22 0) (= (x60 x9 8) x277) (= x109 x63) (<= 0 x27) (= x181 388749022) (= x224 (x205 (x161 x125) (x176 1) 0)) (= x117 (not x35)) (= x230 x121) (= (> (x217 (x161 x264)) 0) x168) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x51) (= x22 x239) (<= 0 x51) (= (x215 (x161 x59)) x142) x62 (= x35 (not x204)) (= (x205 (x161 x277) x31 0) x126) (<= 0 x95) (= (x217 (x161 x59)) x263))) (and (=> (and x140 (= 128 x270)) x175) (=> (and (not x140) (and (and (= (x94 904250603428552709895185118199468575982109441609966099573332780532423983104) x197) (= (x156 (+ x171 904250603428552709895185118199468575982109441609966099573332780532423983104)) x83) (= (= 0 x169) x229) (= (ite (> (ite x197 1 0) 0) 1 0) x169) (= (x225 26959946667150639794667015087019630673637144422540572481103610249215 x47) x171) (= x47 (x218 160))) (or (and (and (= 196 x200) (= x169 x74)) x229) (and (not x229) (and (= x74 (ite x273 1 0)) (= (x94 115792089210356248756420345214020892766250353992003419616917011526809519390720) x178) (= x200 264) (= (ite x211 x42 (ite (< 0 x106) 1 0)) x1) (= (x54 228) x252) (= x273 (= x1 0)) (= false x211) (= x106 (ite x178 1 0)) (= x130 (x156 (+ x187 904250603428552709895185118199468575982109441609966099573332780532423983104))) (= (x225 26959946667150639794667015087019630673637144422540572481103610249215 x252) x187) (= 1 x42)))))) x11))) x71))
(assert (x12 x261))
(assert (x280 x249))
(assert (x12 x93))
(assert (x12 x4))
(assert (= (x278 x239 96) (mod (* 79228162514264337593543950336 x239) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (=> (>= 10000 x247) (= (x176 x247) (x161 x247))))
(assert (x107 (x60 x219 96)))
(assert (= x260 (x153 (x161 x260))))
(assert (x12 x188))
(assert (= 388749022 (x153 (x176 388749022))))
(assert (= (and x140 x88) x116))
(assert (=> (>= 10000 x20) (= (x161 x20) (x176 x20))))
(assert (x12 x145))
(assert (x12 x23))
(assert (x12 x50))
(assert (x12 x230))
(assert (x12 x111))
(assert (x199 x283))
(assert (x107 x109))
(assert (= (div x249 256) (x60 x249 8)))
(assert (x107 x260))
(assert (x12 x182))
(assert (x12 x9))
(assert (= (x153 (x38 x243 3)) (+ 3 (x153 x243))))
(assert (= (x153 (x176 18446744073709551615)) 18446744073709551615))
(assert (x12 x104))
(assert (= (x153 (x38 x243 1)) (+ (x153 x243) 1)))
(assert (= (x278 1 x190) (mod (ite (< x190 256) (x266 2 x190) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x280 x194))
(assert (= (x153 (x161 x20)) x20))
(assert (x12 x120))
(assert (= (x153 (x161 x281)) x281))
(assert (= x11 (=> (and (= x67 (= 0 x74)) (or (and x67 (and (= x5 x200) (= x182 x74))) (and (not x67) (and (= (x48 x23) x194) (= (x156 (+ x104 32)) x6) (= (x225 26959946667150639794667015087019630673637144422540572481103610249215 x194) x145) (= x76 (x94 0)) (= (x156 (+ x200 36)) x104) (= (x25 (- x6 x200)) x91) (= (ite x76 1 0) x192) (= x23 (x156 (+ 32 x200))) (= x6 x5) (= x182 (ite x208 x272 (ite (< 0 x192) 1 0))) (= false x208) (= (x156 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x145)) x146) (= x272 1) (= (x25 (- x91 32)) x90))))) x119)))
(assert (x12 x281))
(assert (= (x161 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x176 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x12 x158))
(assert (x12 x283))
(assert (x12 x270))
(assert (x12 x192))
(assert (x12 x73))
(assert (= (x153 (x161 x247)) x247))
(assert (x12 x264))
(assert (x12 x239))
(assert (= (x153 (x161 x59)) x59))
(assert (x280 x55))
(assert (x12 x47))
(assert (= (x153 (x176 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x235 (=> (and (and (= (or (not x26) x123) x262) (= x123 x162) (= (not (= 0 x112)) x162)) (and (<= 0 x55) (= x79 (x205 (x161 x260) x14 0)) (= x151 (not x39)) (= (x278 1 x242) x120) (= x275 (= x285 0)) (> x68 0) (= (x225 255 x249) x276) (= (x38 x114 3) x155) (< x33 2510660263) (= (not x151) x84) (not (= x33 388749022)) (>= 1461501637330902918203684832716283019655932542975 x261) (= (x205 (x161 x20) x7 0) x114) (= x52 (x205 (x161 x102) x155 0)) (= x285 (x225 x55 x69)) (= x242 (x225 255 x283)) (= x39 (not x275)) (not (= 292666793 x33)) (= x112 (ite x84 1 0)) (= x26 x167) (= (x60 x249 8) x102) (= x68 (x217 (x161 x59))) (= 464684736 x33) (= x122 (x258 x79)) (= x249 x138) (= (x205 (x161 x261) (x176 1) 0) x7) (= (x58 x52) x55) (= x196 (x32 x122 x120)) (= x63 x20) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x122) (= x134 (x161 x251)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x55) (>= x122 0) (= x261 x221) (= (x60 x283 8) x260) (= (x278 1 x276) x69))) x262)))
(assert (x12 x214))
(assert (x12 x27))
(assert (= (x176 2510660263) (x161 2510660263)))
(assert (x12 x124))
(assert (x12 x22))
(assert (x12 x89))
(assert (= (x153 (x38 x114 3)) (+ (x153 x114) 3)))
(assert (= x251 (x153 (x161 x251))))
(assert (= (=> (and (< 0 x182) (= x270 x5)) x175) x119))
(assert (x12 x247))
(assert (x107 x264))
(assert (x81 x252))
(assert (x12 x191))
(assert (= (=> (and (= (x129 x238) x113) (= x78 (not (> x113 1)))) (and x78 (=> (= x134 x254) x235))) x57))
(assert (x12 x174))
(assert (x12 x284))
(assert (x12 x260))
(assert (x280 x257))
(assert (x12 x169))
(assert (x280 x51))
(assert (=> (>= 10000 (x60 x219 96)) (= (x161 (x60 x219 96)) (x176 (x60 x219 96)))))
(assert (= x109 (x153 (x161 x109))))
(assert (= x8 (and (not x44) x248)))
(assert (= (x153 (x161 x283)) x283))
(assert (= (x161 464684736) (x176 464684736)))
(assert (= x66 (and x44 x248)))
(assert (= 1461501637330902918203684832716283019655932542975 (x153 (x176 1461501637330902918203684832716283019655932542975))))
(assert (= (x161 18446744073709551615) (x176 18446744073709551615)))
(assert (x12 x110))
(assert (x12 x142))
(assert (x12 x90))
(assert (x280 x223))
(assert (x12 x138))
(assert (x12 x83))
(assert (= (x153 (x38 x233 1)) (+ (x153 x233) 1)))
(assert (x12 x277))
(assert (= x72 (or x245 x226)))
(assert (= x175 (=> (and (= (x225 x111 x174) x201) (= x24 (x205 (x161 x281) x14 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x251) (not (< x87 x284)) (= x93 (x156 (+ x108 32))) (= x80 (x16 x243)) (= (x156 (+ x238 32)) x166) (<= x111 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x44 (> x4 0)) (= (x205 (x161 x206) x96 0) x243) (= (= 0 x201) x3) (= x191 (x25 (- x228 32))) (> x80 0) (= x274 (x156 (+ x110 x166))) (not x267) (= x141 (x38 x233 1)) (= x174 (x278 1 x202)) (= x219 (x278 x239 96)) (= x238 (x156 (+ x93 20))) (= (x129 x238) x4) x3 (= (x38 x243 3) x14) (= x247 (x225 1461501637330902918203684832716283019655932542975 x223)) (= x202 (x225 255 x283)) (= x110 (mod (* x227 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x222 (x139 (x176 52) (x176 32) (x161 x283) (x161 (x60 x219 96)) 0)) (= (> x70 x284) x267) (= (x156 (+ x270 32)) x108) (>= x87 0) (>= x80 0) (= (x16 x243) x251) (= (x258 x24) x111) (= (x205 (x161 x247) (x176 1) 0) x96) (>= x70 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x87) (= x70 (x195 x233)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x70) (<= x80 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x25 (- x238 x270)) x228) (= (x279 x141) x87) (= x233 (x38 x243 1)) (>= x251 0) (= (x60 x283 8) x281) (<= 0 x111)) (and (=> (and x44 (and (or (and (and (= x37 (x205 x222 (x161 x282) 0)) (= x254 x37)) x231) (and (not x231) (and (= (x205 (x161 x282) x222 0) x43) (= x43 x254)))) (and (= x231 (> x282 (x153 x222))) (= x183 (x129 x238)) (= (x156 (+ 32 x238)) x256) (> x183 0) (= (x129 x256) x282)))) x57) (=> (and (= x134 x222) (not x44)) x235)))))
(assert (=> (>= 10000 x59) (= (x161 x59) (x176 x59))))
(assert (x12 x122))
(assert (x12 x5))
(assert (x107 x281))
(assert (= x209 (and (not x229) x193)))
(assert (= (div x283 256) (x60 x283 8)))
(assert (=> (>= 10000 x206) (= (x176 x206) (x161 x206))))
(assert (x12 x228))
(assert (and (= 9444732965739290427392 (x266 2 73)) (= 524288 (x266 2 19)) (= (x266 2 49) 562949953421312) (= 22300745198530623141535718272648361505980416 (x266 2 144)) (= (x266 2 12) 4096) (= (x266 2 41) 2199023255552) (= (x266 2 94) 19807040628566084398385987584) (= 178405961588244985132285746181186892047843328 (x266 2 147)) (= (x266 2 123) 10633823966279326983230456482242756608) (= 3138550867693340381917894711603833208051177722232017256448 (x266 2 191)) (= 4611686018427387904 (x266 2 62)) (= (x266 2 23) 8388608) (= (x266 2 59) 576460752303423488) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x266 2 223)) (= 332306998946228968225951765070086144 (x266 2 118)) (= 89202980794122492566142873090593446023921664 (x266 2 146)) (= (x266 2 145) 44601490397061246283071436545296723011960832) (= (x266 2 18) 262144) (= (x266 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x266 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x266 2 122) 5316911983139663491615228241121378304) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x266 2 245)) (= (x266 2 5) 32) (= (x266 2 65) 36893488147419103232) (= 162259276829213363391578010288128 (x266 2 107)) (= (x266 2 95) 39614081257132168796771975168) (= 35184372088832 (x266 2 45)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x266 2 218)) (= 713623846352979940529142984724747568191373312 (x266 2 149)) (= (x266 2 105) 40564819207303340847894502572032) (= 2596148429267413814265248164610048 (x266 2 111)) (= 383123885216472214589586756787577295904684780545900544 (x266 2 178)) (= 803469022129495137770981046170581301261101496891396417650688 (x266 2 199)) (= (x266 2 22) 4194304) (= (x266 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x266 2 154) 22835963083295358096932575511191922182123945984) (= (x266 2 28) 268435456) (= 16777216 (x266 2 24)) (= (x266 2 40) 1099511627776) (= 21778071482940061661655974875633165533184 (x266 2 134)) (= (x266 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x266 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 680564733841876926926749214863536422912 (x266 2 129)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x266 2 210)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x266 2 212)) (= 281474976710656 (x266 2 48)) (= (x266 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x266 2 103) 10141204801825835211973625643008) (= 288230376151711744 (x266 2 58)) (= (x266 2 11) 2048) (= (x266 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x266 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x266 2 1) 2) (= (x266 2 169) 748288838313422294120286634350736906063837462003712) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x266 2 226)) (= (x266 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 340282366920938463463374607431768211456 (x266 2 128)) (= 256 (x266 2 8)) (= 6129982163463555433433388108601236734474956488734408704 (x266 2 182)) (= 2251799813685248 (x266 2 51)) (= (x266 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 2923003274661805836407369665432566039311865085952 (x266 2 161)) (= (x266 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x266 2 221)) (= (x266 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 2658455991569831745807614120560689152 (x266 2 121)) (= 12554203470773361527671578846415332832204710888928069025792 (x266 2 193)) (= (x266 2 47) 140737488355328) (= (x266 2 61) 2305843009213693952) (= (x266 2 78) 302231454903657293676544) (= 1208925819614629174706176 (x266 2 80)) (= (x266 2 35) 34359738368) (= 5192296858534827628530496329220096 (x266 2 112)) (= (x266 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 604462909807314587353088 (x266 2 79)) (= 182687704666362864775460604089535377456991567872 (x266 2 157)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x266 2 216)) (= 309485009821345068724781056 (x266 2 88)) (= 17179869184 (x266 2 34)) (= 11692013098647223345629478661730264157247460343808 (x266 2 163)) (= (x266 2 74) 18889465931478580854784) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x266 2 236)) (= (x266 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x266 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x266 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x266 2 63) 9223372036854775808) (= (x266 2 93) 9903520314283042199192993792) (= (x266 2 86) 77371252455336267181195264) (= 2787593149816327892691964784081045188247552 (x266 2 141)) (= (x266 2 33) 8589934592) (= 1073741824 (x266 2 30)) (= 147573952589676412928 (x266 2 67)) (= 1532495540865888858358347027150309183618739122183602176 (x266 2 180)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x266 2 227)) (= 70368744177664 (x266 2 46)) (= 83076749736557242056487941267521536 (x266 2 116)) (= 200867255532373784442745261542645325315275374222849104412672 (x266 2 197)) (= (x266 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 664613997892457936451903530140172288 (x266 2 119)) (= (x266 2 142) 5575186299632655785383929568162090376495104) (= (x266 2 7) 128) (= 5708990770823839524233143877797980545530986496 (x266 2 152)) (= (x266 2 36) 68719476736) (= 85070591730234615865843651857942052864 (x266 2 126)) (= 1 (x266 2 0)) (= 8796093022208 (x266 2 43)) (= 8 (x266 2 3)) (= 374144419156711147060143317175368453031918731001856 (x266 2 168)) (= (x266 2 13) 8192) (= 1152921504606846976 (x266 2 60)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x266 2 248)) (= 392318858461667547739736838950479151006397215279002157056 (x266 2 188)) (= 16 (x266 2 4)) (= (x266 2 165) 46768052394588893382517914646921056628989841375232) (= (x266 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 1267650600228229401496703205376 (x266 2 100)) (= 47890485652059026823698344598447161988085597568237568 (x266 2 175)) (= 75557863725914323419136 (x266 2 76)) (= 87112285931760246646623899502532662132736 (x266 2 136)) (= (x266 2 96) 79228162514264337593543950336) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x266 2 235)) (= 2475880078570760549798248448 (x266 2 91)) (= 512 (x266 2 9)) (= (x266 2 72) 4722366482869645213696) (= 696898287454081973172991196020261297061888 (x266 2 139)) (= (x266 2 167) 187072209578355573530071658587684226515959365500928) (= (x266 2 109) 649037107316853453566312041152512) (= (x266 2 130) 1361129467683753853853498429727072845824) (= (x266 2 174) 23945242826029513411849172299223580994042798784118784) (= (x266 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x266 2 102) 5070602400912917605986812821504) (= 549755813888 (x266 2 39)) (= 4503599627370496 (x266 2 52)) (= (x266 2 183) 12259964326927110866866776217202473468949912977468817408) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x266 2 228)) (= (x266 2 15) 32768) (= (x266 2 37) 137438953472) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x266 2 247)) (= 10889035741470030830827987437816582766592 (x266 2 133)) (= 411376139330301510538742295639337626245683966408394965837152256 (x266 2 208)) (= (x266 2 162) 5846006549323611672814739330865132078623730171904) (= (x266 2 69) 590295810358705651712) (= 1496577676626844588240573268701473812127674924007424 (x266 2 170)) (= (x266 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x266 2 77) 151115727451828646838272) (= 536870912 (x266 2 29)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x266 2 211)) (= (x266 2 85) 38685626227668133590597632) (= (x266 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x266 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x266 2 250)) (= (x266 2 26) 67108864) (= (x266 2 127) 170141183460469231731687303715884105728) (= (x266 2 148) 356811923176489970264571492362373784095686656) (= 17592186044416 (x266 2 44)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x266 2 213)) (= 10384593717069655257060992658440192 (x266 2 113)) (= (x266 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x266 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x266 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x266 2 120) 1329227995784915872903807060280344576) (= (x266 2 99) 633825300114114700748351602688) (= 4398046511104 (x266 2 42)) (= 23384026197294446691258957323460528314494920687616 (x266 2 164)) (= (x266 2 106) 81129638414606681695789005144064) (= (x266 2 14) 16384) (= 2993155353253689176481146537402947624255349848014848 (x266 2 171)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x266 2 222)) (= 73786976294838206464 (x266 2 66)) (= 11972621413014756705924586149611790497021399392059392 (x266 2 173)) (= (x266 2 83) 9671406556917033397649408) (= 134217728 (x266 2 27)) (= 316912650057057350374175801344 (x266 2 98)) (= (x266 2 6) 64) (= (x266 2 115) 41538374868278621028243970633760768) (= 4 (x266 2 2)) (= (x266 2 155) 45671926166590716193865151022383844364247891968) (= (x266 2 160) 1461501637330902918203684832716283019655932542976) (= 65536 (x266 2 16)) (= (x266 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x266 2 10) 1024) (= 11150372599265311570767859136324180752990208 (x266 2 143)) (= 5986310706507378352962293074805895248510699696029696 (x266 2 172)) (= 50216813883093446110686315385661331328818843555712276103168 (x266 2 195)) (= (x266 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x266 2 135) 43556142965880123323311949751266331066368) (= (x266 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x266 2 25) 33554432) (= 2854495385411919762116571938898990272765493248 (x266 2 151)) (= (x266 2 32) 4294967296) (= 91343852333181432387730302044767688728495783936 (x266 2 156)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x266 2 239)) (= 93536104789177786765035829293842113257979682750464 (x266 2 166)) (= 1298074214633706907132624082305024 (x266 2 110)) (= (x266 2 97) 158456325028528675187087900672) (= (x266 2 138) 348449143727040986586495598010130648530944) (= (x266 2 114) 20769187434139310514121985316880384) (= (x266 2 53) 9007199254740992) (= 295147905179352825856 (x266 2 68)) (= 784637716923335095479473677900958302012794430558004314112 (x266 2 189)) (= (x266 2 92) 4951760157141521099596496896) (= 1048576 (x266 2 20)) (= (x266 2 140) 1393796574908163946345982392040522594123776) (= (x266 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x266 2 71) 2361183241434822606848) (= 11417981541647679048466287755595961091061972992 (x266 2 153)) (= (x266 2 150) 1427247692705959881058285969449495136382746624) (= (x266 2 131) 2722258935367507707706996859454145691648) (= 12855504354071922204335696738729300820177623950262342682411008 (x266 2 203)) (= (x266 2 108) 324518553658426726783156020576256) (= 2535301200456458802993406410752 (x266 2 101)) (= 25108406941546723055343157692830665664409421777856138051584 (x266 2 194)) (= 72057594037927936 (x266 2 56)) (= (x266 2 84) 19342813113834066795298816) (= 1606938044258990275541962092341162602522202993782792835301376 (x266 2 200)) (= 49039857307708443467467104868809893875799651909875269632 (x266 2 185)) (= (x266 2 82) 4835703278458516698824704) (= (x266 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 5444517870735015415413993718908291383296 (x266 2 132)) (= (x266 2 124) 21267647932558653966460912964485513216) (= 274877906944 (x266 2 38)) (= 98079714615416886934934209737619787751599303819750539264 (x266 2 186)) (= 6427752177035961102167848369364650410088811975131171341205504 (x266 2 202)) (= 2147483648 (x266 2 31)) (= 1125899906842624 (x266 2 50)) (= (x266 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 154742504910672534362390528 (x266 2 87)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x266 2 217)) (= (x266 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x266 2 117) 166153499473114484112975882535043072) (= (x266 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x266 2 89) 618970019642690137449562112) (= (x266 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x266 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x266 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x266 2 159) 730750818665451459101842416358141509827966271488) (= (x266 2 137) 174224571863520493293247799005065324265472) (= 20282409603651670423947251286016 (x266 2 104)) (= (x266 2 81) 2417851639229258349412352) (= 42535295865117307932921825928971026432 (x266 2 125)) (= (x266 2 75) 37778931862957161709568) (= (x266 2 90) 1237940039285380274899124224) (= (x266 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 365375409332725729550921208179070754913983135744 (x266 2 158)) (= 144115188075855872 (x266 2 57)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x266 2 241)) (= 766247770432944429179173513575154591809369561091801088 (x266 2 179)) (= (x266 2 55) 36028797018963968) (= (x266 2 54) 18014398509481984) (= (x266 2 177) 191561942608236107294793378393788647952342390272950272) (= (x266 2 176) 95780971304118053647396689196894323976171195136475136) (= (x266 2 17) 131072) (= (x266 2 21) 2097152) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x266 2 244)) (= 18446744073709551616 (x266 2 64)) (= (x266 2 70) 1180591620717411303424)))
(assert (x12 x185))
(assert (= x222 (x161 (x153 x222))))
(assert (x12 x15))
(assert (= x13 (or x8 x72)))
(assert (x12 x255))
(assert (x12 x105))
(assert (= (x18 160) 0))
(assert (x12 x130))
(assert (x12 x80))
(assert (x12 x219))
(assert (x12 x187))
(assert (= 0 (x18 x256)))
(assert (x12 x102))
(assert (x12 x202))
(assert (x12 x166))
(assert (x12 x159))
(assert (x12 x200))
(assert (= (x153 (x176 292666793)) 292666793))
(assert (=> (>= 10000 x150) (= (x161 x150) (x176 x150))))
(assert (= x206 (x153 (x161 x206))))
(assert (x12 x70))
(assert (x280 x69))
(assert (x12 x257))
(assert (x12 x190))
(assert (x107 x125))
(assert (x12 x19))
(assert (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x153 (x176 904250603428552709895185118199468575982109441609966099573332780532423983104))))
(assert (x12 x181))
(assert (x12 x121))
(assert (= (or x116 x149) x248))
(assert (x12 x146))
(assert (x12 x223))
(assert (= x226 (and x231 x66)))
(assert (x12 x69))
(assert (x12 x59))
(assert (x172 x55 x69))
(assert (x12 x92))
(assert (=> (<= x102 10000) (= (x161 x102) (x176 x102))))
(assert (x12 x183))
(assert (x12 x108))
(assert (x12 x238))
(assert (x12 x101))
(assert (x12 x51))
(assert (x280 x47))
(assert (x12 x251))
(assert (x199 x249))
(assert (x12 x109))
(assert (x12 x125))
(assert (x81 x194))
(assert (x12 x95))
(assert (x12 x221))
(assert (x12 x272))
(assert (x213 x122))
(assert (= (mod (ite (> 256 x242) (x266 2 x242) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x278 1 x242)))
(assert (= x193 (and x88 (not x140))))
(assert (= (+ 3 (x153 x17)) (x153 (x38 x17 3))))
(assert (= (x161 1461501637330902918203684832716283019655932542975) (x176 1461501637330902918203684832716283019655932542975)))
(assert (x12 x232))
(assert (x107 x102))
(assert (x12 x106))
(assert (x280 x9))
(assert (x12 x30))
(assert (= x149 (or x207 x170)))
(assert (x12 x186))
(assert (x280 x252))
(assert (=> (>= 10000 x251) (= (x176 x251) (x161 x251))))
(assert (=> (<= x281 10000) (= (x161 x281) (x176 x281))))
(check-sat)
(exit)