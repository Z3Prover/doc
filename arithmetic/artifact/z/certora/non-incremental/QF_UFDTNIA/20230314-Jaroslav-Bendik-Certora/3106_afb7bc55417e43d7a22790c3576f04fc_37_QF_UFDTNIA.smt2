(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x136 0)) (((x314 (x1053 x136) (x953 x136) (x775 Int)) (x205 (x795 Int)) (x1213 (x454 x136) (x607 x136) (x1332 x136) (x779 x136) (x592 Int)) (x1418 (x999 x136) (x57 Int)))))
(declare-fun x1440 () Bool)
(declare-fun x142 () Bool)
(declare-fun x1439 () Int)
(declare-fun x1345 () Int)
(declare-fun x402 () Int)
(declare-fun x509 () Int)
(declare-fun x1054 () Int)
(declare-fun x556 () Bool)
(declare-fun x458 () Int)
(declare-fun x1429 () Bool)
(declare-fun x584 () Bool)
(declare-fun x100 () Int)
(declare-fun x179 () Int)
(declare-fun x681 () Bool)
(declare-fun x502 () Int)
(declare-fun x248 () x136)
(declare-fun x27 () Bool)
(declare-fun x745 () Int)
(declare-fun x207 () Int)
(declare-fun x947 () Bool)
(declare-fun x1310 () Int)
(declare-fun x982 () Int)
(declare-fun x1131 () Int)
(declare-fun x639 (Int) Int)
(declare-fun x878 () Int)
(declare-fun x347 () Int)
(declare-fun x1435 () Int)
(declare-fun x1192 () Int)
(declare-fun x139 (Int Int Int Int) Int)
(declare-fun x173 () Bool)
(declare-fun x765 () Bool)
(declare-fun x1432 () x136)
(declare-fun x629 () Int)
(declare-fun x319 () Int)
(declare-fun x1384 () Int)
(declare-fun x73 () Bool)
(declare-fun x1353 () Bool)
(declare-fun x1284 () Bool)
(declare-fun x76 () Int)
(declare-fun x340 () Bool)
(declare-fun x422 () Bool)
(declare-fun x453 () Bool)
(declare-fun x856 () Bool)
(declare-fun x885 () Int)
(declare-fun x949 () Int)
(declare-fun x374 () Bool)
(declare-fun x977 () Int)
(declare-fun x261 () Int)
(declare-fun x41 () Bool)
(declare-fun x850 () Int)
(declare-fun x1259 () Int)
(declare-fun x167 () Bool)
(declare-fun x462 () Bool)
(declare-fun x1138 () Int)
(declare-fun x1407 () Bool)
(declare-fun x151 () Bool)
(declare-fun x78 () Int)
(declare-fun x1433 () Bool)
(declare-fun x1444 () x136)
(declare-fun x81 () Bool)
(declare-fun x730 () Bool)
(declare-fun x816 () Int)
(declare-fun x801 () Bool)
(declare-fun x526 () Bool)
(declare-fun x1089 () Bool)
(declare-fun x841 () Bool)
(declare-fun x259 () Int)
(declare-fun x353 () Int)
(declare-fun x1293 () Int)
(declare-fun x264 () Bool)
(declare-fun x60 () Int)
(declare-fun x1260 () Bool)
(declare-fun x390 () Bool)
(declare-fun x225 () Bool)
(declare-fun x611 () Bool)
(declare-fun x472 () Bool)
(declare-fun x1096 () Int)
(declare-fun x815 () Int)
(declare-fun x698 () Int)
(declare-fun x59 () Int)
(declare-fun x218 () Int)
(declare-fun x604 () Bool)
(declare-fun x819 () Bool)
(declare-fun x1451 () Bool)
(declare-fun x1005 () Int)
(declare-fun x457 () Int)
(declare-fun x511 () Int)
(declare-fun x899 () x136)
(declare-fun x354 () Int)
(declare-fun x763 () Bool)
(declare-fun x1392 () Bool)
(declare-fun x1036 () Int)
(declare-fun x836 () x136)
(declare-fun x491 () Int)
(declare-fun x1325 () Int)
(declare-fun x1188 () x136)
(declare-fun x348 () Int)
(declare-fun x1233 () x136)
(declare-fun x1106 () Int)
(declare-fun x884 () Int)
(declare-fun x1360 () Int)
(declare-fun x194 (Int) Int)
(declare-fun x1306 () Int)
(declare-fun x1447 () Bool)
(declare-fun x1159 () Bool)
(declare-fun x1404 () Bool)
(declare-fun x54 () Bool)
(declare-fun x749 () Int)
(declare-fun x980 () Bool)
(declare-fun x934 () Bool)
(declare-fun x1111 () Int)
(declare-fun x50 () Bool)
(declare-fun x270 () Int)
(declare-fun x720 () Int)
(declare-fun x553 () Bool)
(declare-fun x291 () Int)
(declare-fun x1167 () Bool)
(declare-fun x812 () Bool)
(declare-fun x617 () Int)
(declare-fun x890 () Int)
(declare-fun x544 () Int)
(declare-fun x826 () x136)
(declare-fun x1239 () x136)
(declare-fun x299 () Int)
(declare-fun x528 () Int)
(declare-fun x1015 () Int)
(declare-fun x330 () x136)
(declare-fun x1095 () Int)
(declare-fun x1009 () Bool)
(declare-fun x1198 () Bool)
(declare-fun x1369 () Int)
(declare-fun x829 () Int)
(declare-fun x589 () Bool)
(declare-fun x7 () Bool)
(declare-fun x313 () Bool)
(declare-fun x1298 () Bool)
(declare-fun x922 () Bool)
(declare-fun x521 () Int)
(declare-fun x1142 () Bool)
(declare-fun x459 () Int)
(declare-fun x992 () Bool)
(declare-fun x506 () Bool)
(declare-fun x713 () Int)
(declare-fun x149 () Int)
(declare-fun x983 () Int)
(declare-fun x214 () Int)
(declare-fun x725 () Bool)
(declare-fun x1270 () Bool)
(declare-fun x627 () Bool)
(declare-fun x1174 () Int)
(declare-fun x240 () Int)
(declare-fun x574 () Bool)
(declare-fun x96 () Bool)
(declare-fun x734 () Bool)
(declare-fun x210 () Int)
(declare-fun x1279 () Int)
(declare-fun x683 () Int)
(declare-fun x538 () Bool)
(declare-fun x780 () Int)
(declare-fun x883 () Int)
(declare-fun x1457 () x136)
(declare-fun x85 () Int)
(declare-fun x1048 () Int)
(declare-fun x190 (Int) Int)
(declare-fun x165 () Bool)
(declare-fun x74 () Int)
(declare-fun x708 () Bool)
(declare-fun x417 () Int)
(declare-fun x1400 () Bool)
(declare-fun x406 () Bool)
(declare-fun x1258 () Bool)
(declare-fun x869 () Int)
(declare-fun x1442 () Int)
(declare-fun x1287 () Bool)
(declare-fun x990 () Int)
(declare-fun x438 () Bool)
(declare-fun x716 () Int)
(declare-fun x235 () Int)
(declare-fun x534 () Int)
(declare-fun x966 () Int)
(declare-fun x1058 () Bool)
(declare-fun x192 () Bool)
(declare-fun x1401 () Int)
(declare-fun x1312 () Int)
(declare-fun x383 () Bool)
(declare-fun x859 () Bool)
(declare-fun x174 () Int)
(declare-fun x1373 () Bool)
(declare-fun x227 () Bool)
(declare-fun x561 () Int)
(declare-fun x321 () Int)
(declare-fun x726 () Int)
(declare-fun x803 () Bool)
(declare-fun x1113 () Bool)
(declare-fun x1477 () Int)
(declare-fun x785 () Bool)
(declare-fun x193 () Bool)
(declare-fun x1460 () Int)
(declare-fun x492 () Int)
(declare-fun x391 () Int)
(declare-fun x570 (Int) Int)
(declare-fun x437 () x136)
(declare-fun x1033 () Int)
(declare-fun x525 () Bool)
(declare-fun x160 () x136)
(declare-fun x1275 () Int)
(declare-fun x426 () Int)
(declare-fun x853 () Int)
(declare-fun x483 () Int)
(declare-fun x79 () Bool)
(declare-fun x153 () Bool)
(declare-fun x1094 () Bool)
(declare-fun x837 () Bool)
(declare-fun x1363 () Int)
(declare-fun x961 () Bool)
(declare-fun x1349 () Bool)
(declare-fun x256 () x136)
(declare-fun x1471 () Bool)
(declare-fun x907 () Int)
(declare-fun x49 () Int)
(declare-fun x798 () x136)
(declare-fun x1116 () Int)
(declare-fun x670 () Bool)
(declare-fun x662 () Int)
(declare-fun x113 () Bool)
(declare-fun x318 () Int)
(declare-fun x963 () Bool)
(declare-fun x164 () Bool)
(declare-fun x832 () Bool)
(declare-fun x632 () Int)
(declare-fun x477 () Int)
(declare-fun x640 () Int)
(declare-fun x1154 () Bool)
(declare-fun x115 () Int)
(declare-fun x1039 () Int)
(declare-fun x378 (Int) Int)
(declare-fun x68 () Bool)
(declare-fun x687 () Int)
(declare-fun x1396 () Int)
(declare-fun x1367 () Bool)
(declare-fun x464 () Int)
(declare-fun x942 () Bool)
(declare-fun x1443 () Int)
(declare-fun x288 () Int)
(declare-fun x835 () x136)
(declare-fun x1478 () Bool)
(declare-fun x15 () Bool)
(declare-fun x410 () Int)
(declare-fun x336 () Int)
(declare-fun x503 () Int)
(declare-fun x24 () Bool)
(declare-fun x350 () Bool)
(declare-fun x1395 () Int)
(declare-fun x808 () Bool)
(declare-fun x874 () Int)
(declare-fun x873 () Int)
(declare-fun x1289 () Bool)
(declare-fun x1253 () Bool)
(declare-fun x1065 () Int)
(declare-fun x510 () Bool)
(declare-fun x886 () x136)
(declare-fun x1405 () Int)
(declare-fun x322 () Bool)
(declare-fun x1335 () Int)
(declare-fun x191 () Bool)
(declare-fun x366 () Bool)
(declare-fun x38 () Bool)
(declare-fun x1352 (Int) Int)
(declare-fun x1163 () x136)
(declare-fun x952 () Int)
(declare-fun x154 () Int)
(declare-fun x158 () Bool)
(declare-fun x1072 (Int) Int)
(declare-fun x721 () Bool)
(declare-fun x1286 () Int)
(declare-fun x1386 () Bool)
(declare-fun x392 () Int)
(declare-fun x500 () Int)
(declare-fun x168 () Int)
(declare-fun x82 () Int)
(declare-fun x320 () Int)
(declare-fun x533 () Bool)
(declare-fun x1389 () Bool)
(declare-fun x444 () Int)
(declare-fun x750 () Bool)
(declare-fun x381 () Bool)
(declare-fun x714 () x136)
(declare-fun x767 () Int)
(declare-fun x1346 () Int)
(declare-fun x445 () Bool)
(declare-fun x43 () Bool)
(declare-fun x937 (Int Int) Int)
(declare-fun x684 () Bool)
(declare-fun x1185 () x136)
(declare-fun x1225 () Int)
(declare-fun x1030 () Int)
(declare-fun x70 () Bool)
(declare-fun x957 () Int)
(declare-fun x971 () Int)
(declare-fun x418 () Bool)
(declare-fun x1123 () Bool)
(declare-fun x88 () Int)
(declare-fun x588 () Int)
(declare-fun x958 () x136)
(declare-fun x1 () Int)
(declare-fun x1203 () Int)
(declare-fun x548 () Int)
(declare-fun x344 () Bool)
(declare-fun x130 () x136)
(declare-fun x742 () Int)
(declare-fun x460 () Int)
(declare-fun x1453 () x136)
(declare-fun x1076 () Int)
(declare-fun x1086 () Int)
(declare-fun x661 () Int)
(declare-fun x515 () Int)
(declare-fun x276 () Int)
(declare-fun x226 () Bool)
(declare-fun x1381 () Int)
(declare-fun x908 () Int)
(declare-fun x58 () x136)
(declare-fun x135 () Bool)
(declare-fun x1087 () Int)
(declare-fun x1144 () Bool)
(declare-fun x727 () Bool)
(declare-fun x105 () Bool)
(declare-fun x266 () Int)
(declare-fun x129 () Int)
(declare-fun x514 () Bool)
(declare-fun x188 () Bool)
(declare-fun x900 () Bool)
(declare-fun x394 () Bool)
(declare-fun x701 () Int)
(declare-fun x666 () Int)
(declare-fun x1055 () x136)
(declare-fun x866 () Int)
(declare-fun x919 () Int)
(declare-fun x1409 () Int)
(declare-fun x1254 () Int)
(declare-fun x104 () Bool)
(declare-fun x1021 () Bool)
(declare-fun x1169 () Int)
(declare-fun x1434 () Int)
(declare-fun x542 () Int)
(declare-fun x61 () Int)
(declare-fun x369 () Int)
(declare-fun x271 () Int)
(declare-fun x237 () Bool)
(declare-fun x305 () Bool)
(declare-fun x328 () Int)
(declare-fun x161 () Int)
(declare-fun x951 () Int)
(declare-fun x265 () Int)
(declare-fun x737 () Int)
(declare-fun x359 () Bool)
(declare-fun x912 () Bool)
(declare-fun x232 (x136) Int)
(declare-fun x1227 () Int)
(declare-fun x56 () Bool)
(declare-fun x317 () Int)
(declare-fun x559 () Int)
(declare-fun x1093 () Bool)
(declare-fun x398 () Int)
(declare-fun x964 () Int)
(declare-fun x1294 () Int)
(declare-fun x988 () Int)
(declare-fun x1272 () Int)
(declare-fun x412 () Int)
(declare-fun x902 () Int)
(declare-fun x389 () Bool)
(declare-fun x1337 () Int)
(declare-fun x1063 () Int)
(declare-fun x1299 () Bool)
(declare-fun x817 () Int)
(declare-fun x1170 () Bool)
(declare-fun x221 () Int)
(declare-fun x215 () Int)
(declare-fun x519 () x136)
(declare-fun x1358 () Int)
(declare-fun x1097 () Bool)
(declare-fun x788 () Bool)
(declare-fun x1406 () Bool)
(declare-fun x144 () Int)
(declare-fun x497 () Bool)
(declare-fun x1216 () Int)
(declare-fun x1323 () Int)
(declare-fun x1297 () Int)
(declare-fun x1103 () Int)
(declare-fun x504 () Int)
(declare-fun x998 () Int)
(declare-fun x1207 () Int)
(declare-fun x1140 () Int)
(declare-fun x213 () Int)
(declare-fun x1143 () x136)
(declare-fun x1181 () Int)
(declare-fun x827 () Int)
(declare-fun x578 () Int)
(declare-fun x911 () Bool)
(declare-fun x1161 () Int)
(declare-fun x599 () Int)
(declare-fun x1118 () Int)
(declare-fun x363 () Bool)
(declare-fun x1003 () Bool)
(declare-fun x282 () Int)
(declare-fun x1403 () Int)
(declare-fun x610 () Int)
(declare-fun x1379 () Bool)
(declare-fun x405 () Int)
(declare-fun x206 () Int)
(declare-fun x921 () x136)
(declare-fun x871 () Int)
(declare-fun x209 () Bool)
(declare-fun x770 () Bool)
(declare-fun x1075 () Int)
(declare-fun x87 () Int)
(declare-fun x134 () x136)
(declare-fun x229 () Bool)
(declare-fun x575 () Int)
(declare-fun x784 () Int)
(declare-fun x1365 () Int)
(declare-fun x1371 () Bool)
(declare-fun x414 () Int)
(declare-fun x430 () Int)
(declare-fun x132 () Int)
(declare-fun x1291 () Bool)
(declare-fun x651 () x136)
(declare-fun x1420 () x136)
(declare-fun x1045 () Bool)
(declare-fun x616 () Int)
(declare-fun x861 () Bool)
(declare-fun x1455 () Bool)
(declare-fun x1315 () Int)
(declare-fun x1028 () Bool)
(declare-fun x973 () Bool)
(declare-fun x1417 () Bool)
(declare-fun x21 () Int)
(declare-fun x480 () Bool)
(declare-fun x1105 () Int)
(declare-fun x960 () Int)
(declare-fun x1390 () Int)
(declare-fun x762 () Bool)
(declare-fun x804 () Int)
(declare-fun x169 () Bool)
(declare-fun x432 (x136) Int)
(declare-fun x485 () Int)
(declare-fun x895 () Int)
(declare-fun x1150 () Bool)
(declare-fun x1166 () Int)
(declare-fun x748 () x136)
(declare-fun x536 (x136) Int)
(declare-fun x818 () Int)
(declare-fun x897 () Bool)
(declare-fun x116 () Int)
(declare-fun x1120 () Bool)
(declare-fun x979 () Int)
(declare-fun x943 () Bool)
(declare-fun x1430 () Bool)
(declare-fun x1128 () Bool)
(declare-fun x690 () Bool)
(declare-fun x125 () Int)
(declare-fun x1414 () Bool)
(declare-fun x1038 () Bool)
(declare-fun x254 () Bool)
(declare-fun x549 () Bool)
(declare-fun x1004 () Bool)
(declare-fun x275 () x136)
(declare-fun x1428 () Int)
(declare-fun x1461 () Bool)
(declare-fun x114 () Bool)
(declare-fun x1204 () x136)
(declare-fun x1137 () Int)
(declare-fun x250 () Int)
(declare-fun x295 () Bool)
(declare-fun x249 () Bool)
(declare-fun x828 () Int)
(declare-fun x1423 () Bool)
(declare-fun x1079 (Int) Int)
(declare-fun x65 () Bool)
(declare-fun x568 () Int)
(declare-fun x106 () x136)
(declare-fun x1235 () x136)
(declare-fun x898 () x136)
(declare-fun x66 () Int)
(declare-fun x273 () Bool)
(declare-fun x772 () Int)
(declare-fun x603 () Int)
(declare-fun x1292 () Int)
(declare-fun x361 () Int)
(declare-fun x736 () Int)
(declare-fun x547 () Int)
(declare-fun x793 () Bool)
(declare-fun x1064 () Int)
(declare-fun x703 () Int)
(declare-fun x1119 () Int)
(declare-fun x876 () Bool)
(declare-fun x102 () Int)
(declare-fun x719 () Int)
(declare-fun x133 () Bool)
(declare-fun x411 () Int)
(declare-fun x851 () Int)
(declare-fun x593 () Int)
(declare-fun x669 () Int)
(declare-fun x1329 () Bool)
(declare-fun x1080 (Int) Int)
(declare-fun x729 () Int)
(declare-fun x1361 () Int)
(declare-fun x1336 () Int)
(declare-fun x893 () Int)
(declare-fun x112 () Int)
(declare-fun x1331 () Bool)
(declare-fun x1320 () Bool)
(declare-fun x30 () Int)
(declare-fun x571 () Bool)
(declare-fun x1368 () Int)
(declare-fun x1452 () Int)
(declare-fun x346 () Int)
(declare-fun x18 () Int)
(declare-fun x608 () Bool)
(declare-fun x1464 () Int)
(declare-fun x968 () Bool)
(declare-fun x1025 () Bool)
(declare-fun x831 () Int)
(declare-fun x345 () Int)
(declare-fun x34 () Int)
(declare-fun x1482 () Int)
(declare-fun x1042 () Bool)
(declare-fun x182 () Bool)
(declare-fun x216 () Int)
(declare-fun x95 () Int)
(declare-fun x1269 () Int)
(declare-fun x602 () Int)
(declare-fun x456 () Int)
(declare-fun x1313 () x136)
(declare-fun x1184 () Bool)
(declare-fun x13 () Bool)
(declare-fun x178 () Int)
(declare-fun x724 () Int)
(declare-fun x636 () Bool)
(declare-fun x126 () Int)
(declare-fun x342 () Int)
(declare-fun x551 () Int)
(declare-fun x152 () Bool)
(declare-fun x712 () Bool)
(declare-fun x199 () Bool)
(declare-fun x26 () Bool)
(declare-fun x637 () Bool)
(declare-fun x809 () Int)
(declare-fun x370 () Int)
(declare-fun x702 () Bool)
(declare-fun x635 () Int)
(declare-fun x1122 () Bool)
(declare-fun x230 () Int)
(declare-fun x1374 () Int)
(declare-fun x1157 () Int)
(declare-fun x487 () Int)
(declare-fun x843 () Bool)
(declare-fun x1059 () Int)
(declare-fun x159 () Int)
(declare-fun x1473 () Bool)
(declare-fun x1220 () Int)
(declare-fun x1277 () Int)
(declare-fun x1301 () Bool)
(declare-fun x594 () Int)
(declare-fun x31 () Int)
(declare-fun x800 () Bool)
(declare-fun x471 () x136)
(declare-fun x239 () Bool)
(declare-fun x1101 () Int)
(declare-fun x293 () Int)
(declare-fun x103 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x1304 () x136)
(declare-fun x1226 () Bool)
(declare-fun x711 () Int)
(declare-fun x583 () Int)
(declare-fun x1366 () Int)
(declare-fun x660 () x136)
(declare-fun x396 () x136)
(declare-fun x1073 () Int)
(declare-fun x923 () Bool)
(declare-fun x380 () Int)
(declare-fun x1246 () Int)
(declare-fun x1378 () Bool)
(declare-fun x889 () Bool)
(declare-fun x119 () Bool)
(declare-fun x938 (Int Int) Int)
(declare-fun x212 () Int)
(declare-fun x1249 () Bool)
(declare-fun x757 () Bool)
(declare-fun x823 () Int)
(declare-fun x308 () Int)
(declare-fun x494 () Bool)
(declare-fun x1340 () Int)
(declare-fun x468 () Int)
(declare-fun x984 () Bool)
(declare-fun x1327 () Int)
(declare-fun x333 () Bool)
(declare-fun x740 () x136)
(declare-fun x238 () Int)
(declare-fun x469 () x136)
(declare-fun x1446 (x136) Int)
(declare-fun x434 () Int)
(declare-fun x1175 () Bool)
(declare-fun x1147 () Int)
(declare-fun x243 () Bool)
(declare-fun x452 () Int)
(declare-fun x446 () Int)
(declare-fun x613 () Int)
(declare-fun x117 () Bool)
(declare-fun x67 () Bool)
(declare-fun x1419 () Int)
(declare-fun x455 () Bool)
(declare-fun x427 () Int)
(declare-fun x1129 () Int)
(declare-fun x1145 () Bool)
(declare-fun x941 () x136)
(declare-fun x656 () Int)
(declare-fun x172 () Bool)
(declare-fun x1328 () Int)
(declare-fun x601 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x781 () Int)
(declare-fun x997 () Bool)
(declare-fun x894 () Bool)
(declare-fun x710 () Int)
(declare-fun x94 () Int)
(declare-fun x1006 () Bool)
(declare-fun x1278 () Bool)
(declare-fun x530 () Bool)
(declare-fun x685 () Int)
(declare-fun x695 () Bool)
(declare-fun x91 () Bool)
(declare-fun x257 () Int)
(declare-fun x384 () Bool)
(declare-fun x758 () Bool)
(declare-fun x529 () Int)
(declare-fun x860 () Int)
(declare-fun x875 () Bool)
(declare-fun x648 () Int)
(declare-fun x86 () Bool)
(declare-fun x1110 () Int)
(declare-fun x1029 () Bool)
(declare-fun x1324 () Int)
(declare-fun x1357 () Bool)
(declare-fun x1394 () Int)
(declare-fun x1234 () Int)
(declare-fun x824 () Int)
(declare-fun x1344 () Int)
(declare-fun x751 () Int)
(declare-fun x388 () x136)
(declare-fun x1191 () Int)
(declare-fun x566 () Bool)
(declare-fun x403 () Bool)
(declare-fun x1300 () Int)
(declare-fun x699 () Int)
(declare-fun x156 () Int)
(declare-fun x1245 () Int)
(declare-fun x1342 () Int)
(declare-fun x1362 () Int)
(declare-fun x761 () Int)
(declare-fun x375 () Int)
(declare-fun x696 () Int)
(declare-fun x6 () x136)
(declare-fun x311 () x136)
(declare-fun x1219 () Int)
(declare-fun x1283 () Int)
(declare-fun x315 () Int)
(declare-fun x1205 () Bool)
(declare-fun x373 () Bool)
(declare-fun x676 () Bool)
(declare-fun x69 () Int)
(declare-fun x1020 () Int)
(declare-fun x1377 () Int)
(declare-fun x141 () Int)
(declare-fun x626 () Bool)
(declare-fun x307 (Int) Int)
(declare-fun x1149 () Bool)
(declare-fun x1465 () Int)
(declare-fun x1380 () x136)
(declare-fun x450 () Bool)
(declare-fun x612 () Bool)
(declare-fun x1302 () Bool)
(declare-fun x478 () Int)
(declare-fun x564 () Int)
(declare-fun x682 () Int)
(declare-fun x1251 () Int)
(declare-fun x849 () Bool)
(declare-fun x567 () Int)
(declare-fun x925 () Bool)
(declare-fun x1481 () Bool)
(declare-fun x228 () x136)
(declare-fun x516 () x136)
(declare-fun x989 () Int)
(declare-fun x888 () Int)
(declare-fun x769 (Int) Int)
(declare-fun x1040 () Bool)
(declare-fun x171 () Bool)
(declare-fun x1391 () Bool)
(declare-fun x309 () Bool)
(declare-fun x63 () Int)
(declare-fun x1044 () Int)
(declare-fun x901 () Int)
(declare-fun x476 () Int)
(declare-fun x1383 () Int)
(declare-fun x1046 (x136) Int)
(declare-fun x1450 () x136)
(declare-fun x10 () Int)
(declare-fun x433 () Int)
(declare-fun x439 () Int)
(declare-fun x1412 () Bool)
(declare-fun x634 () Int)
(declare-fun x1411 () Bool)
(declare-fun x1399 () Bool)
(declare-fun x1334 () Int)
(declare-fun x23 () Int)
(declare-fun x658 () Int)
(declare-fun x1322 () Int)
(declare-fun x197 () Int)
(declare-fun x845 () Int)
(declare-fun x535 () Bool)
(declare-fun x1448 () Int)
(declare-fun x244 () Bool)
(declare-fun x1309 () Bool)
(declare-fun x1126 () Bool)
(declare-fun x880 () Bool)
(declare-fun x1408 () x136)
(declare-fun x416 () Int)
(declare-fun x1134 () Bool)
(declare-fun x1222 () Int)
(declare-fun x665 () Int)
(declare-fun x431 () Bool)
(declare-fun x1151 () Int)
(declare-fun x1115 (x136) Int)
(declare-fun x940 () Int)
(declare-fun x644 (Int Int) Int)
(declare-fun x211 () Int)
(declare-fun x1060 () Int)
(declare-fun x280 () x136)
(declare-fun x1016 () Bool)
(declare-fun x1135 () Int)
(declare-fun x1173 () Int)
(declare-fun x1467 () Int)
(declare-fun x877 () Bool)
(declare-fun x1232 () Bool)
(declare-fun x428 () Bool)
(declare-fun x1002 () Bool)
(declare-fun x1153 () Bool)
(declare-fun x475 () Bool)
(declare-fun x512 () Int)
(declare-fun x691 () Bool)
(declare-fun x787 () Int)
(declare-fun x794 () Int)
(declare-fun x946 () Bool)
(declare-fun x881 () Int)
(declare-fun x631 () Int)
(declare-fun x932 () Bool)
(declare-fun x175 () Int)
(declare-fun x1402 () Int)
(declare-fun x799 () Bool)
(declare-fun x75 () Int)
(declare-fun x579 () Int)
(declare-fun x1318 () Bool)
(declare-fun x1229 () Int)
(declare-fun x840 () Bool)
(declare-fun x786 () Bool)
(declare-fun x663 () Bool)
(declare-fun x1160 () Int)
(declare-fun x107 () Int)
(declare-fun x55 () Bool)
(declare-fun x1187 () x136)
(declare-fun x520 () Int)
(declare-fun x595 () Int)
(declare-fun x1242 () Bool)
(declare-fun x1199 () Int)
(declare-fun x1257 () Bool)
(declare-fun x1197 () Bool)
(declare-fun x92 () Int)
(declare-fun x591 () Int)
(declare-fun x1202 () Bool)
(declare-fun x1422 () Int)
(declare-fun x1176 () Bool)
(declare-fun x292 () x136)
(declare-fun x1026 () Bool)
(declare-fun x1027 () Int)
(declare-fun x1092 () Int)
(declare-fun x1347 () Int)
(declare-fun x944 () Bool)
(declare-fun x421 () Int)
(declare-fun x1011 () Int)
(declare-fun x1051 (Int) Int)
(declare-fun x507 () Bool)
(declare-fun x304 () Bool)
(declare-fun x759 () Int)
(declare-fun x918 () Int)
(declare-fun x1043 () Int)
(declare-fun x1255 () Bool)
(declare-fun x633 () Int)
(declare-fun x985 () Bool)
(declare-fun x1057 () Int)
(declare-fun x962 () Int)
(declare-fun x1339 () Int)
(declare-fun x290 () Int)
(declare-fun x680 () Int)
(declare-fun x974 () Bool)
(declare-fun x1214 () x136)
(declare-fun x272 () x136)
(declare-fun x700 () Bool)
(declare-fun x1168 () Bool)
(declare-fun x776 () Int)
(declare-fun x1182 () Int)
(declare-fun x677 () Int)
(declare-fun x576 () Int)
(declare-fun x1189 () Int)
(declare-fun x1085 () Int)
(declare-fun x294 () Int)
(declare-fun x929 () Bool)
(declare-fun x408 () Bool)
(declare-fun x954 () Int)
(declare-fun x1372 () Bool)
(declare-fun x731 () x136)
(declare-fun x1248 () Bool)
(declare-fun x1351 () Bool)
(declare-fun x625 () Int)
(declare-fun x1139 () x136)
(declare-fun x419 () Int)
(declare-fun x1230 () Int)
(declare-fun x1178 () Bool)
(declare-fun x122 (Int) x136)
(declare-fun x732 () Int)
(declare-fun x285 () Int)
(declare-fun x766 () Int)
(declare-fun x744 () Bool)
(declare-fun x1067 () Bool)
(declare-fun x98 () Int)
(declare-fun x792 () Int)
(declare-fun x1288 () x136)
(declare-fun x19 () Int)
(declare-fun x274 () x136)
(declare-fun x546 () Int)
(declare-fun x657 () Bool)
(declare-fun x277 () Int)
(declare-fun x1466 () Int)
(declare-fun x1112 () Int)
(declare-fun x550 () Bool)
(declare-fun x463 () Int)
(declare-fun x97 () Int)
(declare-fun x312 () x136)
(declare-fun x914 () Bool)
(declare-fun x1427 () Int)
(declare-fun x760 () Bool)
(declare-fun x811 (Int) Int)
(declare-fun x1056 () Int)
(declare-fun x777 () Int)
(declare-fun x1082 () Int)
(declare-fun x1077 () x136)
(declare-fun x965 () Int)
(declare-fun x335 () Int)
(declare-fun x628 () Int)
(declare-fun x1268 () Int)
(declare-fun x554 () Int)
(declare-fun x733 () Bool)
(declare-fun x689 () Int)
(declare-fun x368 () x136)
(declare-fun x489 () x136)
(declare-fun x1132 () Int)
(declare-fun x1437 () x136)
(declare-fun x4 () Bool)
(declare-fun x413 (Int) Int)
(declare-fun x52 () Bool)
(declare-fun x531 () Int)
(declare-fun x753 () Bool)
(declare-fun x109 () Bool)
(declare-fun x756 () x136)
(declare-fun x224 () Int)
(declare-fun x782 () Bool)
(declare-fun x517 (Int) Int)
(declare-fun x936 () Int)
(declare-fun x523 () Bool)
(declare-fun x1014 () Int)
(declare-fun x253 () Int)
(declare-fun x959 () Int)
(declare-fun x399 () Int)
(declare-fun x802 () Int)
(declare-fun x327 () Int)
(declare-fun x755 () Bool)
(declare-fun x382 () Int)
(declare-fun x89 () Int)
(declare-fun x718 () Int)
(declare-fun x1241 () Int)
(declare-fun x498 () Bool)
(declare-fun x1350 () Bool)
(declare-fun x1264 () Bool)
(declare-fun x365 () Bool)
(declare-fun x1388 () Bool)
(declare-fun x833 () Bool)
(declare-fun x9 () x136)
(declare-fun x131 () x136)
(declare-fun x986 () Int)
(declare-fun x1303 () Bool)
(declare-fun x1333 () Bool)
(declare-fun x1074 () Int)
(declare-fun x673 () Int)
(declare-fun x286 () Int)
(declare-fun x1252 () Bool)
(declare-fun x1463 () Bool)
(declare-fun x255 () Int)
(declare-fun x587 () Bool)
(declare-fun x196 () Bool)
(declare-fun x1382 () Bool)
(declare-fun x1031 () Bool)
(declare-fun x939 (Int) Int)
(declare-fun x655 () Bool)
(declare-fun x1359 () x136)
(declare-fun x440 () Int)
(declare-fun x1354 () x136)
(declare-fun x442 () x136)
(declare-fun x783 () x136)
(declare-fun x479 () Bool)
(declare-fun x1201 () Int)
(declare-fun x844 () Int)
(declare-fun x1305 () Bool)
(declare-fun x28 () Int)
(declare-fun x789 () Int)
(declare-fun x645 () x136)
(declare-fun x420 () Bool)
(declare-fun x590 () x136)
(declare-fun x1196 () Int)
(declare-fun x569 () Int)
(declare-fun x615 () Int)
(declare-fun x693 () Int)
(declare-fun x814 () Bool)
(declare-fun x22 () Int)
(declare-fun x1148 () Bool)
(declare-fun x12 () Int)
(declare-fun x1370 () Int)
(declare-fun x1158 () Int)
(declare-fun x560 () Bool)
(declare-fun x1459 () x136)
(declare-fun x436 () Int)
(declare-fun x630 () Bool)
(declare-fun x341 () x136)
(declare-fun x870 () Bool)
(declare-fun x1355 () Bool)
(declare-fun x892 () Int)
(declare-fun x774 () Int)
(declare-fun x269 () Int)
(declare-fun x868 () Int)
(declare-fun x83 () Int)
(declare-fun x641 () Bool)
(declare-fun x1127 () Int)
(declare-fun x1070 () Int)
(declare-fun x1397 () Int)
(declare-fun x598 () Int)
(declare-fun x166 () x136)
(declare-fun x1458 () Bool)
(declare-fun x246 () Int)
(declare-fun x1410 () Int)
(declare-fun x302 () Bool)
(declare-fun x1071 () Bool)
(declare-fun x739 () Int)
(declare-fun x839 () Int)
(declare-fun x678 () Bool)
(declare-fun x14 () x136)
(declare-fun x741 () Bool)
(declare-fun x600 () Bool)
(declare-fun x664 () Int)
(declare-fun x1068 () x136)
(declare-fun x451 () Int)
(declare-fun x1387 () Bool)
(declare-fun x796 () Int)
(declare-fun x397 () Bool)
(declare-fun x537 () Bool)
(declare-fun x176 () Bool)
(declare-fun x1081 (x136) Int)
(declare-fun x717 () Bool)
(declare-fun x1479 () Bool)
(declare-fun x127 () Bool)
(declare-fun x465 () Int)
(declare-fun x976 () Bool)
(declare-fun x84 () x136)
(declare-fun x807 () Int)
(declare-fun x917 () Int)
(declare-fun x1290 () Int)
(declare-fun x981 () Bool)
(declare-fun x39 () Int)
(declare-fun x920 () Int)
(declare-fun x771 () Int)
(declare-fun x948 () Int)
(declare-fun x337 () Int)
(declare-fun x970 () Int)
(declare-fun x653 () Int)
(declare-fun x234 () Bool)
(declare-fun x1364 () Bool)
(declare-fun x622 () Int)
(declare-fun x1183 () Int)
(declare-fun x1084 () Int)
(declare-fun x1050 () Bool)
(declare-fun x148 () Bool)
(declare-fun x752 () Bool)
(declare-fun x488 () Bool)
(declare-fun x522 () Int)
(declare-fun x1348 () x136)
(declare-fun x1475 () Int)
(declare-fun x543 () Int)
(declare-fun x928 () Bool)
(declare-fun x1261 () Int)
(declare-fun x415 () Int)
(declare-fun x913 () Bool)
(declare-fun x848 () Bool)
(declare-fun x545 () Int)
(declare-fun x1206 () Bool)
(declare-fun x1295 () Bool)
(declare-fun x400 () Int)
(declare-fun x358 () Bool)
(declare-fun x1445 () Int)
(declare-fun x387 () Bool)
(declare-fun x838 () Bool)
(declare-fun x372 () Int)
(declare-fun x300 (Int) Int)
(declare-fun x1356 () Int)
(declare-fun x1266 () Int)
(declare-fun x1223 () Int)
(declare-fun x791 () Int)
(declare-fun x2 () Bool)
(declare-fun x577 () Bool)
(declare-fun x903 () Int)
(declare-fun x33 () Bool)
(declare-fun x486 () Bool)
(declare-fun x268 () Bool)
(declare-fun x1162 () Int)
(declare-fun x53 () Bool)
(declare-fun x910 () Bool)
(declare-fun x857 () Bool)
(declare-fun x672 () Bool)
(declare-fun x121 () Bool)
(declare-fun x580 () Bool)
(declare-fun x101 () Int)
(declare-fun x279 () Bool)
(declare-fun x993 () Int)
(declare-fun x35 () Int)
(declare-fun x16 () Int)
(declare-fun x120 () Int)
(declare-fun x614 () Int)
(declare-fun x332 () Bool)
(declare-fun x1215 () Int)
(declare-fun x654 () x136)
(declare-fun x1217 () Int)
(declare-fun x1125 () Bool)
(declare-fun x674 () Bool)
(declare-fun x1240 () Int)
(declare-fun x219 () Int)
(declare-fun x3 () Bool)
(declare-fun x704 () Int)
(declare-fun x1193 () Int)
(declare-fun x1273 () Int)
(declare-fun x1017 () x136)
(declare-fun x606 () Int)
(declare-fun x1469 () Int)
(declare-fun x705 () Int)
(declare-fun x882 () Int)
(declare-fun x108 () Bool)
(declare-fun x1098 () Int)
(declare-fun x470 () Bool)
(declare-fun x527 () Bool)
(declare-fun x596 () x136)
(declare-fun x262 () Int)
(declare-fun x582 (Int) Int)
(declare-fun x150 () Int)
(declare-fun x865 () Int)
(declare-fun x619 () Int)
(declare-fun x334 () Bool)
(declare-fun x251 () Int)
(declare-fun x1208 () Bool)
(declare-fun x573 () Int)
(declare-fun x1090 () Int)
(declare-fun x325 () Bool)
(declare-fun x806 () Int)
(declare-fun x208 () Int)
(declare-fun x1019 () Int)
(declare-fun x267 () Int)
(declare-fun x170 () Bool)
(declare-fun x830 () Int)
(declare-fun x364 () Int)
(declare-fun x896 () Int)
(declare-fun x1104 (Int) Int)
(declare-fun x490 () Int)
(declare-fun x36 () x136)
(declare-fun x1343 () Int)
(declare-fun x435 () Int)
(declare-fun x926 () Bool)
(declare-fun x181 () Int)
(declare-fun x495 () Int)
(declare-fun x1102 () Bool)
(declare-fun x805 () Int)
(declare-fun x323 () Bool)
(declare-fun x1228 () Bool)
(declare-fun x1034 () Bool)
(declare-fun x448 () Bool)
(declare-fun x1236 () Bool)
(declare-fun x1296 () Bool)
(declare-fun x906 () Int)
(declare-fun x991 (Int) Int)
(declare-fun x909 () Bool)
(declare-fun x820 () Bool)
(declare-fun x1276 () Int)
(declare-fun x1244 () x136)
(declare-fun x773 () Bool)
(declare-fun x987 () Int)
(declare-fun x746 () Int)
(declare-fun x371 () Bool)
(declare-fun x1441 () Bool)
(declare-fun x72 () Int)
(declare-fun x201 () Int)
(declare-fun x722 () Bool)
(declare-fun x1468 () Int)
(declare-fun x1049 () x136)
(declare-fun x118 () Bool)
(declare-fun x242 (Int) Int)
(declare-fun x284 () Int)
(declare-fun x393 () Int)
(declare-fun x1231 () Bool)
(declare-fun x931 () Bool)
(declare-fun x624 (Int) Int)
(declare-fun x1177 () Bool)
(declare-fun x223 () Int)
(declare-fun x326 () Int)
(declare-fun x1415 () Int)
(declare-fun x623 () Int)
(declare-fun x1041 () Int)
(declare-fun x45 () Int)
(declare-fun x184 () Bool)
(declare-fun x339 () Bool)
(declare-fun x967 () Bool)
(declare-fun x296 () Bool)
(declare-fun x650 () Int)
(declare-fun x955 () Int)
(declare-fun x187 () Int)
(declare-fun x474 () x136)
(declare-fun x915 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x694 () Int)
(declare-fun x1263 () Int)
(declare-fun x186 () Bool)
(declare-fun x281 () x136)
(declare-fun x1398 () Int)
(declare-fun x379 () x136)
(declare-fun x306 () Int)
(declare-fun x1472 () Int)
(declare-fun x1152 () Bool)
(declare-fun x1330 (Int) Int)
(declare-fun x1308 () Int)
(declare-fun x247 () Int)
(declare-fun x177 () Bool)
(declare-fun x1013 () Int)
(declare-fun x825 () x136)
(declare-fun x51 () Bool)
(declare-fun x539 (Int) Int)
(declare-fun x505 () Bool)
(declare-fun x48 () Int)
(declare-fun x1155 () Int)
(declare-fun x916 () x136)
(declare-fun x563 () Bool)
(declare-fun x233 () Bool)
(declare-fun x425 () Int)
(declare-fun x1062 () Int)
(declare-fun x362 () Int)
(declare-fun x1247 (Int Int) Int)
(declare-fun x162 () Bool)
(declare-fun x508 () Bool)
(declare-fun x204 () Int)
(declare-fun x367 () Int)
(declare-fun x111 () Int)
(declare-fun x124 () Bool)
(declare-fun x1425 () Int)
(declare-fun x532 () Int)
(declare-fun x449 () Bool)
(declare-fun x241 () Bool)
(declare-fun x137 () x136)
(declare-fun x879 () Int)
(declare-fun x355 () Int)
(declare-fun x1165 () Int)
(declare-fun x728 () Bool)
(declare-fun x558 () Int)
(declare-fun x493 () Bool)
(declare-fun x443 () Bool)
(declare-fun x1210 () Bool)
(declare-fun x950 () Bool)
(declare-fun x360 () Bool)
(declare-fun x518 () Bool)
(declare-fun x1237 () Int)
(declare-fun x1262 () Int)
(declare-fun x891 () Int)
(declare-fun x1282 () Bool)
(declare-fun x555 () Bool)
(declare-fun x1109 () Bool)
(declare-fun x813 () Int)
(declare-fun x64 () Int)
(declare-fun x441 () Bool)
(declare-fun x1238 () Int)
(declare-fun x283 () Int)
(declare-fun x1317 () Int)
(declare-fun x198 () Int)
(declare-fun x1099 () Int)
(declare-fun x349 () Int)
(declare-fun x778 () Bool)
(declare-fun x1424 () Int)
(declare-fun x1195 () Bool)
(declare-fun x203 () Int)
(declare-fun x821 () Bool)
(declare-fun x357 () x136)
(declare-fun x71 () Int)
(declare-fun x846 () Int)
(declare-fun x692 () Bool)
(declare-fun x245 () Int)
(declare-fun x1052 () Int)
(declare-fun x697 () Int)
(declare-fun x482 () x136)
(declare-fun x1393 () x136)
(declare-fun x945 () Bool)
(declare-fun x20 () Int)
(declare-fun x183 () Int)
(declare-fun x1256 () Bool)
(declare-fun x263 () Bool)
(declare-fun x924 () Bool)
(declare-fun x972 () Int)
(declare-fun x217 () Bool)
(declare-fun x790 () Int)
(declare-fun x481 () Int)
(declare-fun x1047 () Int)
(declare-fun x854 () Bool)
(declare-fun x287 () Int)
(declare-fun x1007 () Int)
(declare-fun x905 () Bool)
(declare-fun x461 (Int) Int)
(declare-fun x643 () Bool)
(declare-fun x1088 () Bool)
(declare-fun x668 () Bool)
(declare-fun x996 () Bool)
(declare-fun x146 () Bool)
(declare-fun x138 (Int) Int)
(declare-fun x1421 () Int)
(declare-fun x343 (Int) Int)
(declare-fun x1032 () Int)
(declare-fun x572 () Int)
(declare-fun x303 () Int)
(declare-fun x930 () Int)
(declare-fun x1078 () Int)
(declare-fun x1061 () Int)
(declare-fun x1130 () x136)
(declare-fun x1271 () Bool)
(declare-fun x352 () Bool)
(declare-fun x706 () Int)
(declare-fun x1124 () Bool)
(declare-fun x1114 () Bool)
(declare-fun x667 () Bool)
(declare-fun x1100 () Int)
(declare-fun x620 () Int)
(declare-fun x1001 () Bool)
(declare-fun x1186 () Int)
(declare-fun x1221 () Int)
(declare-fun x646 () Bool)
(declare-fun x562 () Bool)
(declare-fun x1438 () Bool)
(declare-fun x1146 () Bool)
(declare-fun x552 () Bool)
(declare-fun x735 () x136)
(declare-fun x163 () Int)
(declare-fun x11 () Int)
(declare-fun x649 () Int)
(declare-fun x822 () Int)
(define-fun x93 ((x136 x136) (x723 Int)) x136 (ite ((_ is x1418) x136) (x1418 (x999 x136) (+ (x57 x136) x723)) (ite ((_ is x1213) x136) (x1213 (x454 x136) (x607 x136) (x1332 x136) (x779 x136) (+ x723 (x592 x136))) (ite ((_ is x314) x136) (x314 (x1053 x136) (x953 x136) (+ x723 (x775 x136))) (x205 (+ (x795 x136) x723))))))
(define-fun x222 ((x297 Int)) Int (ite (and (>= x297 0) (< x297 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x297 (- x297 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x586 ((x297 Int)) Int (ite (and (> 0 x297) (>= x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297) x297))
(define-fun x143 ((x1413 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1413) (<= 0 x1413)))
(define-fun x90 ((x1413 Int)) Bool (and (= (x938 x1413 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1413) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1413) x1413)))
(define-fun x1018 ((x1413 Int)) Bool (and (= (x938 0 x1413) 0) (= 0 (x938 x1413 0))))
(define-fun x540 ((x1413 Int)) Bool (= (x938 x1413 x1413) x1413))
(define-fun x524 ((x1413 Int)) Bool (and (x540 x1413) (x1018 x1413) (x90 x1413)))
(define-fun x1431 ((x1413 Int) (x401 Int)) Bool (= (x938 x401 x1413) (x938 x1413 x401)))
(define-fun x324 ((x1413 Int) (x401 Int)) Bool (and (=> (<= 0 x401) (<= (x938 x1413 x401) x401)) (=> (>= x1413 0) (<= (x938 x1413 x401) x1413)) (>= (x938 x1413 x401) 0)))
(define-fun x747 ((x1413 Int) (x401 Int)) Bool (and (x1431 x1413 x401) (x324 x1413 x401)))
(define-fun x47 ((x1413 Int)) Bool (= (x938 x1413 1461501637330902918203684832716283019655932542975) (mod x1413 1461501637330902918203684832716283019655932542976)))
(define-fun x1209 ((x1413 Int)) Bool (and (x747 x1413 1461501637330902918203684832716283019655932542975) (x47 x1413)))
(define-fun x466 ((x1413 Int)) Bool (= (mod x1413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x1413 1461501637330902918203684832716283019655932542976) (x938 x1413 115792089237316195423570985007226406215939081747436879206741300988257197096960))))
(define-fun x585 ((x1413 Int)) Bool (and (x466 x1413) (x747 x1413 115792089237316195423570985007226406215939081747436879206741300988257197096960)))
(define-fun x447 ((x1413 Int)) Bool (= (x938 x1413 4294967295) (mod x1413 4294967296)))
(define-fun x423 ((x1413 Int)) Bool (and (x447 x1413) (x747 x1413 4294967295)))
(define-fun x642 ((x1413 Int)) Bool (= (mod x1413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x938 x1413 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x1413 32))))
(define-fun x597 ((x1413 Int)) Bool (and (x747 x1413 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x642 x1413)))
(define-fun x298 ((x1413 Int)) Bool (= (x938 x1413 255) (mod x1413 256)))
(define-fun x858 ((x1413 Int)) Bool (and (x298 x1413) (x747 x1413 255)))
(define-fun x652 ((x467 Int)) Int (x1079 x467))
(define-fun x688 ((x467 Int)) Int (ite (= 128 x467) 41880202175123281672023411390868823785620507377596298514233450382794225090560 (x1352 x467)))
(define-fun x647 ((x467 Int)) Int (ite (and (< x467 (+ 128 32)) (>= x467 128)) (x242 (+ (- x467 128) 0)) (x688 x467)))
(define-fun x1319 ((x467 Int)) Int (ite x1004 (x647 x467) (x688 x467)))
(define-fun x329 ((x467 Int)) Int (ite (= x467 x648) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x1319 x467)))
(define-fun x200 ((x467 Int)) Int (ite (= x1044 x467) x112 (x329 x467)))
(define-fun x847 ((x467 Int)) Int (ite (and (>= x467 x648) (< x467 (+ x648 32))) (x461 (+ 0 (- x467 x648))) (x200 x467)))
(define-fun x1285 ((x467 Int)) Int (ite x1357 (x847 x467) (x200 x467)))
(define-fun x236 ((x467 Int)) Int (ite x133 (x1285 x467) (x1319 x467)))
(define-fun x1265 ((x467 Int)) Int (ite (= x787 x467) 12283247964407756808830995669474934993630555597489544120741799677115838234624 (x236 x467)))
(define-fun x1449 ((x467 Int)) Int (ite (= x370 x467) x1366 (x1265 x467)))
(define-fun x1326 ((x467 Int)) Int (ite (and (> (+ x787 32) x467) (<= x787 x467)) (x194 (+ 0 (- x467 x787))) (x1449 x467)))
(define-fun x140 ((x467 Int)) Int (ite x103 (x1326 x467) (x1449 x467)))
(define-fun x185 ((x467 Int)) Int (ite x695 (x140 x467) (x1319 x467)))
(define-fun x258 ((x467 Int)) Int (ite (= x467 x828) x161 (x185 x467)))
(define-fun x904 ((x467 Int)) Int (ite (= x467 x1468) x705 (x258 x467)))
(define-fun x110 ((x467 Int)) Int (ite (= x965 x467) x957 (x904 x467)))
(define-fun x863 ((x467 Int)) Int (ite (= x257 x467) 11430537079145650693387304458692941425836787954612963690241153482819318579200 (x110 x467)))
(define-fun x978 ((x467 Int)) Int (ite (= x1158 x467) (x1115 x482) (x863 x467)))
(define-fun x862 ((x467 Int)) Int (ite (= x1076 x467) x1384 (x978 x467)))
(define-fun x975 ((x467 Int)) Int (ite (= x467 x907) x512 (x862 x467)))
(define-fun x707 ((x467 Int)) Int (ite (and (< x467 (+ x326 x512)) (>= x467 x326)) (x1079 (+ (- x467 x326) x246)) (x975 x467)))
(define-fun x1250 ((x467 Int)) Int (ite (= x467 x277) 0 (x707 x467)))
(define-fun x331 ((x467 Int)) Int (ite (= x467 x337) 0 (x1250 x467)))
(define-fun x1375 ((x467 Int)) Int (ite (= x829 x467) (x1115 x1432) (x331 x467)))
(define-fun x1280 ((x467 Int)) Int (ite (= x467 x414) x48 (x1375 x467)))
(define-fun x1311 ((x467 Int)) Int (ite (= x882 x467) x711 (x1280 x467)))
(define-fun x429 ((x467 Int)) Int (ite (= x467 x294) x1397 (x1311 x467)))
(define-fun x499 ((x467 Int)) Int (ite (= x467 x1216) x971 (x429 x467)))
(define-fun x842 ((x467 Int)) Int (ite (= x467 x1308) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x499 x467)))
(define-fun x887 ((x467 Int)) Int (ite (= x620 x467) x112 (x842 x467)))
(define-fun x1470 ((x467 Int)) Int (ite (and (>= x467 x1308) (> (+ x1308 32) x467)) (x1051 (+ 0 (- x467 x1308))) (x887 x467)))
(define-fun x1476 ((x467 x136)) Int (ite (= x467 x437) x1225 (x432 x467)))
(define-fun x659 ((x467 x136)) Int (ite (= x160 x467) x1186 (x1476 x467)))
(define-fun x386 ((x467 x136)) Int (ite (= x467 x1304) x1383 (x659 x467)))
(define-fun x618 ((x467 x136)) Int (ite (= x467 x166) x436 (x386 x467)))
(define-fun x1091 ((x467 x136)) Int (ite (= x467 x916) 0 (x618 x467)))
(define-fun x376 ((x467 x136)) Int (ite (= x1163 x467) 0 (x1091 x467)))
(define-fun x1022 ((x467 x136)) Int (ite (= x396 x467) 0 (x376 x467)))
(define-fun x1307 ((x467 x136)) Int (ite (= x467 x130) x1300 (x1022 x467)))
(define-fun x147 ((x467 x136)) Int (ite (= x471 x467) x210 (x1307 x467)))
(define-fun x310 ((x467 Int)) Int (x811 x467))
(define-fun x1224 ((x467 Int)) Int (ite (= 128 x467) 41880202175123281672023411390868823785620507377596298514233450382794225090560 (x1080 x467)))
(define-fun x1462 ((x467 Int)) Int (ite (and (<= 128 x467) (> (+ 32 128) x467)) (x1104 (+ 0 (- x467 128))) (x1224 x467)))
(define-fun x933 ((x467 Int)) Int (ite x86 (x1470 x467) (x887 x467)))
(define-fun x501 ((x467 Int)) Int (ite x985 (x933 x467) (x499 x467)))
(define-fun x1164 ((x467 Int)) Int (ite (= x1439 x467) 53555067238089503724735347336495418478014768613909373709225909316790851207168 (x501 x467)))
(define-fun x252 ((x467 Int)) Int (ite (and (<= x1439 x467) (< x467 (+ 32 x1439))) (x138 (+ (- x467 x1439) 0)) (x1164 x467)))
(define-fun x1107 ((x467 Int)) Int (ite x1386 (x252 x467) (x1164 x467)))
(define-fun x810 ((x467 Int)) Int (ite (= x467 x572) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x1107 x467)))
(define-fun x1180 ((x467 Int)) Int (ite (= x1203 x467) x603 (x810 x467)))
(define-fun x1480 ((x467 Int)) Int (ite (and (>= x467 x572) (< x467 (+ x572 32))) (x343 (+ 0 (- x467 x572))) (x1180 x467)))
(define-fun x1136 ((x467 Int)) Int (ite x932 (x1480 x467) (x1180 x467)))
(define-fun x180 ((x467 Int)) Int (ite x1303 (x1136 x467) (x1107 x467)))
(define-fun x1200 ((x467 Int)) Int (ite (= x267 x467) 107954783943672036892603255375593993710912147498776614820764573710931487358976 (x180 x467)))
(define-fun x145 ((x467 Int)) Int (ite (= x467 x49) x1186 (x1200 x467)))
(define-fun x77 ((x467 Int)) Int (ite (and (< x467 (+ x267 32)) (>= x467 x267)) (x307 (+ 0 (- x467 x267))) (x145 x467)))
(define-fun x123 ((x467 Int)) Int (ite x1025 (x77 x467) (x145 x467)))
(define-fun x1194 ((x467 Int)) Int (ite x390 (x1462 x467) (x1224 x467)))
(define-fun x1314 ((x467 Int)) Int (ite (= x739 x467) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x1194 x467)))
(define-fun x1023 ((x467 Int)) Int (ite (= x467 x18) x112 (x1314 x467)))
(define-fun x301 ((x467 Int)) Int (ite (and (> (+ x739 32) x467) (<= x739 x467)) (x517 (+ (- x467 x739) 0)) (x1023 x467)))
(define-fun x609 ((x467 Int)) Int (ite x1202 (x301 x467) (x1023 x467)))
(define-fun x872 ((x467 Int)) Int (ite x152 (x609 x467) (x1194 x467)))
(define-fun x715 ((x467 Int)) Int (ite (= x606 x467) 12283247964407756808830995669474934993630555597489544120741799677115838234624 (x872 x467)))
(define-fun x1281 ((x467 Int)) Int (ite (= x542 x467) x602 (x715 x467)))
(define-fun x738 ((x467 Int)) Int (ite (and (<= x606 x467) (< x467 (+ 32 x606))) (x570 (+ 0 (- x467 x606))) (x1281 x467)))
(define-fun x220 ((x467 Int)) Int (ite x1006 (x738 x467) (x1281 x467)))
(define-fun x1179 ((x467 Int)) Int (ite x1373 (x220 x467) (x1194 x467)))
(define-fun x513 ((x467 Int)) Int (ite (= x868 x467) x283 (x1179 x467)))
(define-fun x484 ((x467 Int)) Int (ite (= x467 x583) x285 (x513 x467)))
(define-fun x189 ((x467 Int)) Int (ite (= x703 x467) x1030 (x484 x467)))
(define-fun x1141 ((x467 Int)) Int (ite (= x467 x175) 11430537079145650693387304458692941425836787954612963690241153482819318579200 (x189 x467)))
(define-fun x1000 ((x467 Int)) Int (ite (= x467 x920) (x1115 x274) (x1141 x467)))
(define-fun x1133 ((x467 Int)) Int (ite (= x467 x839) x878 (x1000 x467)))
(define-fun x1024 ((x467 Int)) Int (ite (= x1263 x467) x790 (x1133 x467)))
(define-fun x834 ((x467 Int)) Int (ite (and (< x467 (+ x790 x804)) (<= x804 x467)) (x811 (+ (- x467 x804) x1452)) (x1024 x467)))
(define-fun x1456 ((x467 Int)) Int (ite (= x467 x183) 0 (x834 x467)))
(define-fun x385 ((x467 Int)) Int (ite (= x467 x822) 0 (x1456 x467)))
(define-fun x496 ((x467 Int)) Int (ite (= x724 x467) (x1115 x292) (x385 x467)))
(define-fun x1212 ((x467 Int)) Int (ite (= x467 x16) x853 (x496 x467)))
(define-fun x1426 ((x467 Int)) Int (ite (= x467 x1015) x865 (x1212 x467)))
(define-fun x1436 ((x467 Int)) Int (ite (= x1215 x467) x1160 (x1426 x467)))
(define-fun x17 ((x467 Int)) Int (ite (= x349 x467) x791 (x1436 x467)))
(define-fun x1274 ((x467 Int)) Int (ite (= x467 x528) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x17 x467)))
(define-fun x867 ((x467 Int)) Int (ite (= x467 x72) x112 (x1274 x467)))
(define-fun x155 ((x467 Int)) Int (ite (and (> (+ 32 x528) x467) (<= x528 x467)) (x624 (+ (- x467 x528) 0)) (x867 x467)))
(define-fun x37 ((x467 x136)) Int (ite x1195 (x536 x467) (x232 x467)))
(define-fun x743 ((x467 x136)) Int (ite x296 (ite x1364 (x37 x467) (x232 x467)) (x232 x467)))
(define-fun x356 ((x467 x136)) Int (ite (= x1055 x467) x1402 (x432 x467)))
(define-fun x927 ((x467 x136)) Int (ite (= x467 x58) x781 (x356 x467)))
(define-fun x1037 ((x467 x136)) Int (ite (= x467 x921) x60 (x927 x467)))
(define-fun x407 ((x467 x136)) Int (ite (= x467 x1143) x218 (x1037 x467)))
(define-fun x80 ((x467 x136)) Int (ite (= x467 x1459) 0 (x407 x467)))
(define-fun x679 ((x467 x136)) Int (ite (= x467 x714) 0 (x80 x467)))
(define-fun x797 ((x467 x136)) Int (ite (= x467 x596) 0 (x679 x467)))
(define-fun x473 ((x467 x136)) Int (ite (= x467 x825) x120 (x797 x467)))
(define-fun x1211 ((x467 x136)) Int (ite (= x1049 x467) x215 (x473 x467)))
(define-fun x1010 ((x467 x136)) Int (ite (= x256 x467) x439 (x1211 x467)))
(define-fun x1172 ((x467 x136)) Int (ite x188 (x473 x467) (x1010 x467)))
(define-fun x40 ((x467 Int)) Int (x1079 x467))
(define-fun x351 ((x467 Int)) Int (ite (= 128 x467) 41880202175123281672023411390868823785620507377596298514233450382794225090560 (x1330 x467)))
(define-fun x1117 ((x467 Int)) Int (ite (and (>= x467 128) (> (+ 32 128) x467)) (x1072 (+ 0 (- x467 128))) (x351 x467)))
(define-fun x638 ((x467 Int)) Int (ite x562 (x155 x467) (x867 x467)))
(define-fun x260 ((x467 Int)) Int (ite x992 (x638 x467) (x17 x467)))
(define-fun x671 ((x467 Int)) Int (ite (= x467 x650) 53555067238089503724735347336495418478014768613909373709225909316790851207168 (x260 x467)))
(define-fun x1156 ((x467 Int)) Int (ite (and (>= x467 x650) (> (+ 32 x650) x467)) (x939 (+ (- x467 x650) 0)) (x671 x467)))
(define-fun x377 ((x467 Int)) Int (ite x1333 (x1156 x467) (x671 x467)))
(define-fun x1321 ((x467 Int)) Int (ite (= x918 x467) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x377 x467)))
(define-fun x32 ((x467 Int)) Int (ite (= x459 x467) x603 (x1321 x467)))
(define-fun x675 ((x467 Int)) Int (ite (and (>= x467 x918) (> (+ 32 x918) x467)) (x378 (+ (- x467 x918) 0)) (x32 x467)))
(define-fun x768 ((x467 Int)) Int (ite x843 (x675 x467) (x32 x467)))
(define-fun x621 ((x467 Int)) Int (ite x814 (x768 x467) (x377 x467)))
(define-fun x278 ((x467 Int)) Int (ite (= x477 x467) 107954783943672036892603255375593993710912147498776614820764573710931487358976 (x621 x467)))
(define-fun x5 ((x467 Int)) Int (ite (= x178 x467) x781 (x278 x467)))
(define-fun x409 ((x467 Int)) Int (ite (and (< x467 (+ 32 x477)) (<= x477 x467)) (x413 (+ 0 (- x467 x477))) (x5 x467)))
(define-fun x541 ((x467 Int)) Int (ite x1195 (x409 x467) (x5 x467)))
(define-fun x581 ((x467 x136)) Int (ite (= x84 x467) x1118 (x1172 x467)))
(define-fun x1243 ((x467 x136)) Int (ite (= x467 x1139) x1181 (x581 x467)))
(define-fun x1267 ((x467 x136)) Int (ite (= x1244 x467) x132 (x1243 x467)))
(define-fun x565 ((x467 x136)) Int (ite (= x1408 x467) x776 (x1267 x467)))
(define-fun x62 ((x467 x136)) Int (ite (= x467 x1188) 0 (x565 x467)))
(define-fun x1121 ((x467 x136)) Int (ite (= x467 x798) 0 (x62 x467)))
(define-fun x8 ((x467 x136)) Int (ite (= x467 x1077) 0 (x1121 x467)))
(define-fun x1474 ((x467 x136)) Int (ite (= x467 x783) x742 (x8 x467)))
(define-fun x1012 ((x467 x136)) Int (ite (= x467 x735) x82 (x1474 x467)))
(define-fun x969 ((x467 Int)) Int (ite x808 (x1117 x467) (x351 x467)))
(define-fun x25 ((x467 Int)) Int (ite (= x467 x986) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x969 x467)))
(define-fun x42 ((x467 Int)) Int (ite (= x467 x1217) x112 (x25 x467)))
(define-fun x557 ((x467 Int)) Int (ite (and (>= x467 x986) (> (+ 32 x986) x467)) (x300 (+ 0 (- x467 x986))) (x42 x467)))
(define-fun x195 ((x467 Int)) Int (ite x462 (x557 x467) (x42 x467)))
(define-fun x852 ((x467 Int)) Int (ite x498 (x195 x467) (x969 x467)))
(define-fun x1218 ((x467 Int)) Int (ite (= x467 x893) 12283247964407756808830995669474934993630555597489544120741799677115838234624 (x852 x467)))
(define-fun x99 ((x467 Int)) Int (ite (= x398 x467) x318 (x1218 x467)))
(define-fun x29 ((x467 Int)) Int (ite (and (<= x893 x467) (> (+ 32 x893) x467)) (x769 (+ 0 (- x467 x893))) (x99 x467)))
(define-fun x1316 ((x467 Int)) Int (ite x643 (x29 x467) (x99 x467)))
(define-fun x157 ((x467 Int)) Int (ite x1066 (x1316 x467) (x969 x467)))
(define-fun x128 ((x467 Int)) Int (ite (= x467 x955) x1238 (x157 x467)))
(define-fun x1171 ((x467 Int)) Int (ite (= x972 x467) x1465 (x128 x467)))
(define-fun x1341 ((x467 Int)) Int (ite (= x467 x245) x1096 (x1171 x467)))
(define-fun x864 ((x467 Int)) Int (ite (= x467 x619) 11430537079145650693387304458692941425836787954612963690241153482819318579200 (x1341 x467)))
(define-fun x1416 ((x467 Int)) Int (ite (= x1073 x467) (x1115 x756) (x864 x467)))
(define-fun x1338 ((x467 Int)) Int (ite (= x336 x467) x31 (x1416 x467)))
(define-fun x935 ((x467 Int)) Int (ite (= x467 x1381) x881 (x1338 x467)))
(define-fun x289 ((x467 Int)) Int (ite (and (>= x467 x548) (> (+ x548 x881) x467)) (x1079 (+ x490 (- x467 x548))) (x935 x467)))
(define-fun x855 ((x467 Int)) Int (ite (= x405 x467) 0 (x289 x467)))
(define-fun x709 ((x467 Int)) Int (ite (= x1246 x467) 0 (x855 x467)))
(define-fun x1454 ((x467 Int)) Int (ite (= x20 x467) (x1115 x474) (x709 x467)))
(define-fun x956 ((x467 Int)) Int (ite (= x467 x534) x197 (x1454 x467)))
(define-fun x1376 ((x467 Int)) Int (ite (= x467 x885) x930 (x956 x467)))
(define-fun x1108 ((x467 Int)) Int (ite (= x467 x495) x1207 (x1376 x467)))
(define-fun x764 ((x467 Int)) Int (ite (= x467 x1405) x1269 (x1108 x467)))
(define-fun x605 ((x467 Int)) Int (ite (= x467 x578) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x764 x467)))
(define-fun x424 ((x467 Int)) Int (ite (= x579 x467) x112 (x605 x467)))
(define-fun x202 ((x467 Int)) Int (ite (and (< x467 (+ x578 32)) (>= x467 x578)) (x539 (+ 0 (- x467 x578))) (x424 x467)))
(define-fun x995 ((x467 Int)) Int (ite x877 (x202 x467) (x424 x467)))
(define-fun x1385 ((x467 Int)) Int (ite x313 (x995 x467) (x764 x467)))
(define-fun x316 ((x467 Int)) Int (ite (= x467 x492) 53555067238089503724735347336495418478014768613909373709225909316790851207168 (x1385 x467)))
(define-fun x994 ((x467 Int)) Int (ite (and (<= x492 x467) (< x467 (+ 32 x492))) (x991 (+ 0 (- x467 x492))) (x316 x467)))
(define-fun x46 ((x467 Int)) Int (ite x976 (x994 x467) (x316 x467)))
(define-fun x44 ((x467 Int)) Int (ite (= x719 x467) 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x46 x467)))
(define-fun x404 ((x467 Int)) Int (ite (= x467 x628) x603 (x44 x467)))
(define-fun x395 ((x467 Int)) Int (ite (and (> (+ x719 32) x467) (>= x467 x719)) (x639 (+ 0 (- x467 x719))) (x404 x467)))
(define-fun x231 ((x467 Int)) Int (ite x153 (x395 x467) (x404 x467)))
(define-fun x1069 ((x467 Int)) Int (ite x135 (x231 x467) (x46 x467)))
(define-fun x754 ((x467 Int)) Int (ite (= x846 x467) 107954783943672036892603255375593993710912147498776614820764573710931487358976 (x1069 x467)))
(define-fun x1190 ((x467 Int)) Int (ite (= x419 x467) x1181 (x754 x467)))
(define-fun x338 ((x467 Int)) Int (ite (and (<= x846 x467) (> (+ 32 x846) x467)) (x582 (+ 0 (- x467 x846))) (x1190 x467)))
(define-fun x686 ((x467 Int)) Int (ite x323 (x338 x467) (x1190 x467)))
(define-fun x1083 ((x1413 Int)) Bool (=> (and (not (= x1413 107954783943672036892603255375593993710912147498776614820764573710931487358976)) (not (= x1413 53555067238089503724735347336495418478014768613909373709225909316790851207168)) (not (= x1413 2974191442)) (not (= 3219105711 x1413)) (not (= 41880202175123281672023411390868823785620507377596298514233450382794225090560 x1413)) (not (= 57896044618658097711785492504343953926418782139537452191302581570759080747168 x1413)) (not (= 4294967295 x1413)) (not (= 2801674539 x1413)) (< 10000 x1413) (not (= x1413 79228162514264337593543950336)) (not (= x1413 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (not (= 12283247964407756808830995669474934993630555597489544120741799677115838234624 x1413)) (not (= 11430537079145650693387304458692941425836787954612963690241153482819318579200 x1413)) (not (= x1413 2661379305446904779734859349833089258949455794555359447896749126450)) (not (= 18446744073709551615 x1413)) (not (= x1413 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x1413 2543820636)) (not (= x1413 1461501637330902918203684832716283019655932542975)) (not (= x1413 2794781754)) (not (= 4294967296 x1413)) (not (= x1413 2769337888)) (not (= 111898140286184639627988011319402352826893257207651552004621811389633377861632 x1413))) (not ((_ is x205) (x122 x1413)))))
(assert (x143 x919))
(assert (=> (>= 10000 x45) (= (x122 x45) (x205 x45))))
(assert (x585 x544))
(assert (x143 x439))
(assert (x143 x487))
(assert (= (and x946 x1226) x313))
(assert (= (and x1228 (not x1433)) x73))
(assert (x143 x1100))
(assert (= (+ 1 (x1115 x826)) (x1115 (x93 x826 1))))
(assert (x143 x893))
(assert (x143 x326))
(assert (x423 x353))
(assert (x143 x1306))
(assert (x143 x701))
(assert (= (and (not x1406) x1260) x1114))
(assert (= (mod (* 79228162514264337593543950336 x1312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x644 x1312 96)))
(assert (= (and (not x472) x550) x974))
(assert (=> (<= x1106 10000) (= (x205 x1106) (x122 x1106))))
(assert (= x706 (x1115 (x122 x706))))
(assert (= (or x1167 x1195) x1154))
(assert (x524 x290))
(assert (= (x1080 x591) 0))
(assert (= x1186 (x1115 (x122 x1186))))
(assert (x143 x704))
(assert (= (or x313 x788) x1003))
(assert (= (x122 41880202175123281672023411390868823785620507377596298514233450382794225090560) (x205 41880202175123281672023411390868823785620507377596298514233450382794225090560)))
(assert (x143 x412))
(assert (x143 x327))
(assert (= (and (not x165) x840) x727))
(assert (= x344 (and (not x721) x1038)))
(assert (x524 x342))
(assert (= (x122 115792089237316195423570985007226406215939081747436879206741300988257197096960) (x205 115792089237316195423570985007226406215939081747436879206741300988257197096960)))
(assert (x143 x150))
(assert (= x418 (and (not x381) x1252)))
(assert (x143 x1183))
(assert (x143 x35))
(assert (= 0 (x1330 (x222 (+ 32 x685)))))
(assert (= (or x296 x717) x832))
(assert (x143 x156))
(assert (= (x1330 (x222 (+ 96 x685))) 0))
(assert (x143 x1020))
(assert (x143 x1054))
(assert (x1083 x603))
(assert (= x1353 (=> (and (and (= x1102 (< x1173 x551)) (= (ite (< x713 x291) x713 x291) x940) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x818 x940))) (= x551 (x222 (+ x789 x1062))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x789 x1062))) (= x1173 (x222 (+ x940 x818)))) (or (and (not x1102) (and (= x483 x315) (= x483 (x586 (- x1173 x551))) (not (< x1173 x551)))) (and x1102 (= 0 x315)))) x363)))
(assert (= (or x843 x169) x814))
(assert (x1209 x1360))
(assert (x423 x1347))
(assert (x524 x693))
(assert (= (and x1461 x358) x1148))
(assert (x143 x64))
(assert (= x1168 (and x833 x812)))
(assert (x143 x677))
(assert (x143 x1343))
(assert (x143 x1324))
(assert (x143 x1129))
(assert (= x950 (=> (and (<= 0 x1241) (<= x1241 1461501637330902918203684832716283019655932542975) (= x91 (= x1369 0)) (= x751 x132) (< 0 x22) (<= x851 1461501637330902918203684832716283019655932542975) (= x1181 x895) (= x1110 x613) (<= 0 x851) (= x1101 x851) (= x1312 x726) (= x568 x613) (= x977 x683) (>= 1461501637330902918203684832716283019655932542975 x1110) (<= 0 x1110) (= (x1446 (x122 x1191)) x22) (= x63 x64) (and (> x303 163) (= (<= x303 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) (and (=> (and x91 (and (not (= x1290 2794781754)) (= 2801674539 x1290) (= (or (and (< x1052 160) (= true (<= x1052 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1052)) x641) (not (= x1290 2769337888)) (> 3219105711 x1290) (not (> 2769337888 x1290)) (= (x586 (- x303 4)) x1052) (not (> 2543820636 x1290)) (> 2974191442 x1290) (not (< x303 4)))) (and (=> x641 x973) (=> (and (and (= x1312 x287) (= x1085 x1181) (= x132 x1020) (= x1042 (= x726 x1312))) (not x641)) (and (=> (and x1042 (and (= (< 18446744073709551615 x683) x1388) (= x745 x63))) (and (=> (and (and (= (x222 (+ 31 x1356)) x1279) (= x1356 (x222 (+ x977 4))) (= x1236 (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1279) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x303)) (and (= (<= x1279 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x303 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x1279 x303))))) (not x1388)) (and (=> (not x1236) x973) (=> (and x1236 (and (= (< 18446744073709551615 x881) x900) (= x881 (x1079 x1356)))) (and (=> x900 x973) (=> (and (and (= x666 (x222 (+ x490 x881))) (= (< x303 x666) x229) (= (x222 (+ 32 x1356)) x490)) (not x900)) (and (=> x229 x973) (=> (and (not x229) (and (= x1146 (= 0 x1105)) (= (x1446 (x122 x328)) x1105) (= x784 (x1172 (x205 0))) (= x328 (x938 1461501637330902918203684832716283019655932542975 x784)))) (and (=> (and (and (= x186 (> x1090 0)) (or (and x186 (and (= 1 x150) (> 4294967296 x286))) (and (not x186) (= x150 x1090)))) (not x1146)) x1298) (=> x1146 x973))))))))) (=> x1388 x973))) (=> (not x1042) x973))))) (=> (not x91) x973)))))
(assert (x143 x1019))
(assert (= (and x832 (not x692)) x188))
(assert (= (and (not x397) x963) x1392))
(assert (x143 x88))
(assert (=> (<= x603 10000) (= (x122 x603) (x205 x603))))
(assert (x143 x531))
(assert (x143 x787))
(assert (x524 x250))
(assert (= x172 (and x1260 x1406)))
(assert (x143 x1030))
(assert (x143 x1390))
(assert (= x363 (=> (and (not (> x1014 x315)) (= x444 x901)) x239)))
(assert (x143 x687))
(assert (= x1432 (x122 (x1115 x1432))))
(assert (x143 x1383))
(assert (x143 x120))
(assert (x143 x903))
(assert (= x1088 (and x967 x182)))
(assert (x143 x468))
(assert (x143 x224))
(assert (= (x1080 (x222 (+ x653 32))) 0))
(assert (x143 x94))
(assert (= 0 (x1080 x174)))
(assert (x597 x35))
(assert (x143 x483))
(assert (=> (<= x1312 10000) (= (x205 x1312) (x122 x1312))))
(assert (= x849 (=> (and (= x1292 x546) (= x653 (x222 (+ x822 32))) (= 128 x421) (= (x17 x509) x1095) (= x1424 (x1436 (x222 (+ 32 x653)))) (= (x586 (- x653 32)) x509) (= x1215 (x222 (+ 32 x1015))) (= (x222 (+ x16 32)) x1015) (= x791 (x139 x230 x1424 x1132 x816)) (= x724 x653) (= x546 (x938 1461501637330902918203684832716283019655932542975 x1095)) (= (< 0 x60) x861) (= (x586 (- x653 32)) x349) (= (x1436 (x222 (+ x653 64))) x1132) (= x16 (x222 (+ x653 32))) (= x964 (x938 1461501637330902918203684832716283019655932542975 x1095)) (not (= 0 x964)) (>= 1461501637330902918203684832716283019655932542975 x791) (= (x1436 (x222 (+ x653 96))) x816) (= x230 (x1436 x653))) (and (=> (and (and (or (and (not x173) (and (< (* x902 x284) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1234 x824) (= (mod (* x902 x284) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x824))) (and x173 (= x1234 0))) (and (not (> x625 x1427)) (= (x93 x281 1) x272) (= x9 (x314 (x122 x1161) (x205 14) 0)) (= x958 (x93 x1068 2)) (= x173 (= x284 0)) (= x284 (x586 (- x1427 x625))) (= (x938 4294967295 x1345) x902) (= (x432 (x205 19)) x1345) (= x1427 (x432 x899)) (= x9 x899) (= (x432 x272) x625) (= (x222 (+ 128 x653)) x1482) (= (x93 x9 1) x281) (= (x432 x281) x1162) (= x802 (x432 x958)) (= (x314 (x122 x1161) (x205 20) 0) x1068))) x861) x757) (=> (and (and (not (> x485 x266)) (= (x93 x835 1) x748) (not (> x214 x223)) (= x415 x369) (= x835 (x314 (x122 x1161) (x205 14) 0)) (= (x432 x654) x214) (= x654 (x93 x748 1)) (= (x586 (- x223 x214)) x266) (= x485 (x432 (x205 12))) (= (x432 x330) x223) (= x330 x835) (= x369 (x222 (+ x653 128)))) (not x861)) x926)))))
(assert (x143 x1015))
(assert (x143 x906))
(assert (x143 x141))
(assert (= 2661379305446904779734859349833089258949455794555359447896749126450 (x1115 (x122 2661379305446904779734859349833089258949455794555359447896749126450))))
(assert (= (x1115 (x205 79228162514264337593543950336)) 79228162514264337593543950336))
(assert (= (+ 1 (x1115 x798)) (x1115 (x93 x798 1))))
(assert (x143 x774))
(assert (x1083 (x937 x1238 96)))
(assert (x143 x884))
(assert (x597 x500))
(assert (= (=> (and (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x433) (and (= (<= x433 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x433 32)))) (= x95 (x541 x1011)) (= x95 x522) (not (= 0 x468)) (= x1011 x477)) x753) x507))
(assert (x143 x464))
(assert (= (x1352 x1193) 0))
(assert (= x1066 (and x1400 (not x980))))
(assert (=> (<= (x937 x285 96) 10000) (= (x122 (x937 x285 96)) (x205 (x937 x285 96)))))
(assert (x1083 x520))
(assert (x143 x337))
(assert (x1209 x89))
(assert (x143 x749))
(assert (x143 x490))
(assert (x597 x860))
(assert (= (and x54 (not x56)) x1282))
(assert (x1209 x1401))
(assert (x143 x427))
(assert (x143 x594))
(assert (= (and x1320 x684) x1006))
(assert (x143 x481))
(assert (x1083 x1191))
(assert (x524 x860))
(assert (= (x1115 (x122 x603)) x603))
(assert (= (x1115 (x93 x137 1)) (+ (x1115 x137) 1)))
(assert (x143 x315))
(assert (x143 x223))
(assert (= x857 (and (not x263) x691)))
(assert (= (x1115 (x93 x916 1)) (+ 1 (x1115 x916))))
(assert (x143 x1160))
(assert (x143 x1131))
(assert (x143 x1465))
(assert (x143 x575))
(assert (= (and (not x612) x1471) x1284))
(assert (=> (<= x269 10000) (= (x205 x269) (x122 x269))))
(assert (= (=> (and (= x968 x325) (= x325 (not x96)) (= x812 x96)) x968) x243))
(assert (x143 x865))
(assert (= (+ (x1115 x280) 3) (x1115 (x93 x280 3))))
(assert (x143 x561))
(assert (= (x644 x558 96) (mod (* 79228162514264337593543950336 x558) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x362 (x1115 (x122 x362))))
(assert (= x1271 (and x470 (not x1388))))
(assert (x143 x1363))
(assert (x1209 x21))
(assert (= (x1115 (x122 x98)) x98))
(assert (x524 x830))
(assert (x143 x1300))
(assert (x143 x287))
(assert (= (or x877 x1153) x384))
(assert (x143 x1340))
(assert (x143 x696))
(assert (= (and x1301 x1142) x947))
(assert (= x684 (or x690 x152)))
(assert (x143 x569))
(assert (x143 x650))
(assert (x597 x465))
(assert (x143 x970))
(assert (= (x1330 x871) 0))
(assert (=> (<= (x937 x1238 96) 10000) (= (x122 (x937 x1238 96)) (x205 (x937 x1238 96)))))
(assert (= (and x584 x574) x984))
(assert (= x305 (and (not x730) x79)))
(assert (= x11 (x1115 (x122 x11))))
(assert (x143 x866))
(assert (= (and (not x209) x537) x838))
(assert (x143 x1106))
(assert (x143 x896))
(assert (= (x1115 (x122 x1181)) x1181))
(assert (x1083 x213))
(assert (x143 x706))
(assert (x143 x1425))
(assert (= (x205 4294967296) (x122 4294967296)))
(assert (= (and (not x1094) x1001) x217))
(assert (x143 x822))
(assert (= x1257 (or x992 x1278)))
(assert (x143 x602))
(assert (x143 x1078))
(assert (= (and x304 x234) x1351))
(assert (= (x1115 (x205 57896044618658097711785492504343953926418782139537452191302581570759080747168)) 57896044618658097711785492504343953926418782139537452191302581570759080747168))
(assert (= (and x928 x1034) x1228))
(assert (= (and (not x533) x374) x765))
(assert (x143 x1312))
(assert (x143 x72))
(assert (= x758 (and x494 x91)))
(assert (x143 x1381))
(assert (= x1451 (and (not x360) x142)))
(assert (= (=> (= (= x111 0) x981) (and (=> x981 x973) (=> (and (and (= (x222 (+ x792 31)) x1100) (= (x222 (+ x936 x492)) x719) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1100) x936) (= x333 (or (and (< x792 32) (= true (<= x792 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x792 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (not x981)) (and (=> x333 x973) (=> (and (and (= x608 (> x132 0)) (= x492 x1340) (= (x46 x1340) x776)) (not x333)) (and (=> (and (= x742 0) (not x608)) x549) (=> (and x608 (and (= x518 (= x1361 0)) (= (x1172 x1453) x736) (= (x938 1461501637330902918203684832716283019655932542975 x736) x1361) (= (x314 (x122 x603) (x205 1) 0) x1453))) (and (=> (and (and (= x846 x719) (= x952 x1361)) (not x518)) x929) (=> (and x518 (and (= (= 0 x1032) x334) (= (x938 1461501637330902918203684832716283019655932542975 x206) x1047) (= x628 x1) (= x1032 (x1446 (x122 x1047))) (= (x222 (+ x719 4)) x1) (= x206 (x1172 (x205 0))))) (and (=> x334 x973) (=> (and (not x334) (and (= (< 0 x427) x1349) (or (and x1349 (and (> 4294967296 x761) (= 1 x1293))) (and (not x1349) (= x1293 x427))))) x170))))))))))) x70))
(assert (x143 x375))
(assert (x143 x83))
(assert (= 0 (x1330 x1064)))
(assert (= (and x905 (not x552)) x1026))
(assert (= (and x443 x488) x428))
(assert (x143 x364))
(assert (x143 x868))
(assert (= x923 (=> (and (= (x314 (x122 x662) (x205 15) 0) x1204) (= x1113 (= 0 x1472)) x1175 (= (x938 1461501637330902918203684832716283019655932542975 x21) x1472) (not (= 0 x1448)) (= x14 x1204) (= (x432 x14) x21) (= x1448 (x938 1461501637330902918203684832716283019655932542975 x270)) (= x662 (x938 1461501637330902918203684832716283019655932542975 x270))) (and (=> (and (and (= x219 0) (= x648 x965)) x1113) x1159) (=> (and (and (= (x432 x106) x61) (= (= x61 0) x234) (= x106 (x93 x1204 3))) (not x1113)) (and (=> (and x234 (and (= x219 4) (= x648 x965))) x1159) (=> (and (and (= x1366 (x432 x645)) (= x1406 (= 0 x1366)) (= x645 (x93 x106 1))) (not x234)) (and (=> (and x1406 (and (= x965 x648) (= x219 1))) x1159) (=> (and (not x1406) (and (= x311 (x314 (x122 x112) (x205 1) 0)) (= (x432 x311) x503) (= (x938 1461501637330902918203684832716283019655932542975 x503) x457) (= x801 (= 0 x457)))) (and (=> (and (and (= x45 x457) (= x787 x648)) (not x801)) x961) (=> (and (and (or (and (and (< x251 4294967296) (= 1 x732)) x636) (and (not x636) (= x154 x732))) (and (= (x432 (x205 0)) x1084) (= x636 (> x154 0)) (= x1106 (x938 1461501637330902918203684832716283019655932542975 x1084)) (= x1044 x1409) (not (= x970 0)) (= x1409 (x222 (+ 4 x648))) (= (x1446 (x122 x1106)) x970))) x801) x819)))))))))))
(assert (x524 x1277))
(assert (x143 x1268))
(assert (= x1093 (and x526 x943)))
(assert (= x1124 (and x1184 x765)))
(assert (x1209 x293))
(assert (= x126 (x1115 (x122 x126))))
(assert (x143 x1092))
(assert (=> (>= 10000 x1201) (= (x205 x1201) (x122 x1201))))
(assert (= 0 (x1330 (x222 (+ x685 64)))))
(assert (x143 x745))
(assert (=> (<= x1007 10000) (= (x122 x1007) (x205 x1007))))
(assert (= 111898140286184639627988011319402352826893257207651552004621811389633377861632 (x1115 (x205 111898140286184639627988011319402352826893257207651552004621811389633377861632))))
(assert (x143 x460))
(assert (= x803 (and x931 (not x854))))
(assert (= (and x870 (not x1113)) x304))
(assert (x143 x39))
(assert (x143 x253))
(assert (= (x1115 (x93 x160 1)) (+ (x1115 x160) 1)))
(assert (x143 x361))
(assert (x143 x265))
(assert (x524 x661))
(assert (x143 x306))
(assert (= (+ 1 (x1115 x1214)) (x1115 (x93 x1214 1))))
(assert (x143 x809))
(assert (= x670 (and x778 x1088)))
(assert (x143 x573))
(assert (x143 x267))
(assert (x143 x962))
(assert (x143 x434))
(assert (x1083 x1181))
(assert (= (x1115 (x122 x1070)) x1070))
(assert (= x963 (and x1301 (not x1142))))
(assert (x143 x174))
(assert (= x678 (and x870 x1113)))
(assert (= (x937 x1238 96) (div x1238 79228162514264337593543950336)))
(assert (x143 x262))
(assert (x143 x370))
(assert (x143 x986))
(assert (x143 x66))
(assert (x143 x216))
(assert (= (or x1120 (and x1387 x1008)) x358))
(assert (x1083 x687))
(assert (x143 x320))
(assert (= x687 (x1115 (x122 x687))))
(assert (= (and x352 x1128) x65))
(assert (= 115792089237316195423570985007226406215939081747436879206741300988257197096960 (x1115 (x205 115792089237316195423570985007226406215939081747436879206741300988257197096960))))
(assert (x143 x815))
(assert (x143 x918))
(assert (x143 x632))
(assert (= (or x894 x1168) x1430))
(assert (=> (<= x1394 10000) (= (x205 x1394) (x122 x1394))))
(assert (= (and x1021 x1126) x4))
(assert (x143 x89))
(assert (x143 x402))
(assert (= x26 (=> (and (<= x380 1461501637330902918203684832716283019655932542975) (not (= 0 x34)) (not (or (> x1151 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x1151) (= true (<= x1151 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= (x222 (+ x983 x1308)) x850) (= (x222 (+ x1151 31)) x500) (= x410 x1308) (= x983 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x500)) (= x380 x805) (= x1439 x850) (= x380 (x933 x410))) x945)))
(assert (x143 x1266))
(assert (= (=> (and (= x993 (x1172 x651)) (= x578 (x222 (+ x440 256))) (= (x314 (x122 x112) (x205 1) 0) x651) (= (= 0 x576) x1404) (= x576 (x938 1461501637330902918203684832716283019655932542975 x993))) (and (=> (and x1404 (and (= x1043 (x222 (+ 4 x578))) (= x1043 x579) (= (x938 1461501637330902918203684832716283019655932542975 x1262) x98) (= x1262 (x1172 (x205 0))) (= (= 0 x774) x479) (= (x1446 (x122 x98)) x774))) (and (=> x479 x973) (=> (and (and (or (and (and (> 4294967296 x806) (= x1240 1)) x1302) (and (not x1302) (= x599 x1240))) (= x1302 (> x599 0))) (not x479)) x750))) (=> (and (not x1404) (and (= x492 x578) (= x576 x247))) x553))) x1429))
(assert (= x1318 (and x626 x912)))
(assert (= x897 (and (not x981) x445)))
(assert (= (or x1389 x455) x793))
(assert (x143 x853))
(assert (x143 x1368))
(assert (x143 x631))
(assert (x143 x547))
(assert (x143 x1047))
(assert (x143 x16))
(assert (x143 x19))
(assert (= (and (not x387) x225) x1438))
(assert (x143 x1328))
(assert (x143 x588))
(assert (= (and x151 x1349) x153))
(assert (=> (<= x11 10000) (= (x205 x11) (x122 x11))))
(assert (= x292 (x122 (x1115 x292))))
(assert (x143 x831))
(assert (x143 x616))
(assert (= (and x712 x636) x1357))
(assert (x143 x1398))
(assert (x524 x319))
(assert (= (+ 1 (x1115 x1233)) (x1115 (x93 x1233 1))))
(assert (x524 x665))
(assert (= 0 (x1352 x265)))
(assert (= x929 (=> (= x1178 (= 0 x952)) (and (=> (and (= 0 x547) x1178) x1249) (=> (and (not x1178) (and (= (x222 (+ 4 x846)) x673) (= x673 x419) (= x400 (x1446 (x122 x952))) (= x854 (= 0 x400)))) (and (=> (and (not x854) (and (= x1152 (> x1445 0)) (or (not x1152) (and (and (= (<= x767 (x1046 (x122 x1191))) x1371) (< x1370 4294967296) x1371 (= (x743 (x122 x1191)) x767) (= (x743 (x122 x952)) x1098) x725 (= (= x1098 (x1046 (x122 x952))) x725)) x1152)))) x1309) (=> x854 x973)))))))
(assert (x143 x521))
(assert (= 3219105711 (x1115 (x205 3219105711))))
(assert (x143 x1155))
(assert (x143 x85))
(assert (= x1195 (and x67 x1438)))
(assert (= (and x68 x1042) x470))
(assert (x524 x261))
(assert (x143 x342))
(assert (= (and (not x366) x1392) x1150))
(assert (x143 x1336))
(assert (= (or x1357 x1197) x133))
(assert (x143 x623))
(assert (x143 x299))
(assert (x143 x1036))
(assert (x143 x771))
(assert (= (and x1144 x518) x114))
(assert (x143 x266))
(assert (x143 x593))
(assert (= (or x1364 x657) x296))
(assert (x143 x382))
(assert (x143 x101))
(assert (= (+ (x1115 x1459) 1) (x1115 (x93 x1459 1))))
(assert (x143 x181))
(assert (x143 x972))
(assert (x143 x95))
(assert (x143 x615))
(assert (= 0 (x1352 x410)))
(assert (x143 x115))
(assert (x143 x393))
(assert (x143 x1039))
(assert (= (and x339 x820) x1355))
(assert (x143 x522))
(assert (x143 x440))
(assert (= x273 (and (not x162) x254)))
(assert (= (+ 1 (x1115 x9)) (x1115 (x93 x9 1))))
(assert (x143 x1135))
(assert (x524 x102))
(assert (= x1128 (and x1264 x438)))
(assert (x143 x286))
(assert (= x443 (or x799 x1089)))
(assert (x143 x917))
(assert (x524 x1013))
(assert (x524 x76))
(assert (= (or x976 x33) x445))
(assert (x143 x1325))
(assert (x143 x729))
(assert (=> (>= 10000 (x937 x161 96)) (= (x205 (x937 x161 96)) (x122 (x937 x161 96)))))
(assert (x143 x879))
(assert (= (x205 2794781754) (x122 2794781754)))
(assert (= x1411 (or x601 x1303)))
(assert (= (or x103 x52) x695))
(assert (x143 x336))
(assert (x143 x1173))
(assert (= (and (not x196) x1003) x1331))
(assert (= (or x403 x985) x550))
(assert (=> (<= x247 10000) (= (x205 x247) (x122 x247))))
(assert (= (x1115 (x205 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x143 x328))
(assert (= 4294967295 (x1115 (x205 4294967295))))
(assert (x143 x1151))
(assert (x143 x1060))
(assert (x1083 x662))
(assert (x143 x414))
(assert (x143 x1322))
(assert (= (x1115 (x93 x1204 3)) (+ (x1115 x1204) 3)))
(assert (= (x1330 x685) 0))
(assert (x143 x1246))
(assert (= (x1352 x543) 0))
(assert (x143 x144))
(assert (x143 x293))
(assert (= x1208 (=> (and (= x176 (= x468 0)) (or x176 (not x176))) x507)))
(assert (= (and (not x627) x249) x309))
(assert (x143 x791))
(assert (x524 x89))
(assert (x1083 x1054))
(assert (x143 x380))
(assert (= x199 (or x587 x1333)))
(assert (x1083 x1394))
(assert (x143 x1222))
(assert (= x945 (=> (and (or (and (not x472) (= x1196 x1342)) (and x472 (and (> 4294967296 x989) (= 1 x1342)))) (and (= x1377 (x1446 (x122 x805))) (not (= x1377 0)) (= (> x1196 0) x472))) x996)))
(assert (x143 x1276))
(assert (= x462 (and x1270 x763)))
(assert (x1209 x665))
(assert (= (x205 79228162514264337593543950336) (x122 79228162514264337593543950336)))
(assert (x524 4294967295))
(assert (= x164 (and x840 x165)))
(assert (x143 x1064))
(assert (= x75 (x1115 (x122 x75))))
(assert (= (x1115 (x93 x106 1)) (+ 1 (x1115 x106))))
(assert (x143 x270))
(assert (x524 x465))
(assert (= (and x1252 x381) x3))
(assert (x143 x648))
(assert (x143 x936))
(assert (=> (>= 10000 x706) (= (x205 x706) (x122 x706))))
(assert (x143 x711))
(assert (= (x937 x285 96) (div x285 79228162514264337593543950336)))
(assert (= x241 (and x577 x924)))
(assert (x143 x291))
(assert (x143 x1070))
(assert (x143 x116))
(assert (= x914 (or x1125 (and x51 (not x177)))))
(assert (= x322 (and (not x1479) x700)))
(assert (= (x1115 (x205 11430537079145650693387304458692941425836787954612963690241153482819318579200)) 11430537079145650693387304458692941425836787954612963690241153482819318579200))
(assert (x143 x804))
(assert (x143 x682))
(assert (x143 x698))
(assert (= (and x389 (not x600)) x1089))
(assert (x1083 x328))
(assert (x143 x107))
(assert (x143 x1033))
(assert (x143 x411))
(assert (x143 x683))
(assert (= (x1330 x966) 0))
(assert (x143 x578))
(assert (= x556 (=> (= x1045 (= 0 x11)) (and (=> (and (= 0 x224) x1045) x237) (=> (and (not x1045) (and (or (and (and (= x1016 (<= x159 (x1081 (x122 x1191)))) (= x1050 (= x1189 (x1081 (x122 x11)))) (= (x232 (x122 x1191)) x159) (= (x232 (x122 x11)) x1189) (< x392 4294967296) x1016 x1050) x43) (not x43)) (and (= (x1446 (x122 x11)) x827) (= x43 (> x903 0)) (not (= x827 0)) (= x74 x49) (= (x222 (+ x267 4)) x74)))) x800)))))
(assert (x143 x22))
(assert (x143 x1419))
(assert (x143 x1223))
(assert (= (x1115 (x122 (x937 x283 96))) (x937 x283 96)))
(assert (= (div x283 79228162514264337593543950336) (x937 x283 96)))
(assert (= (x1115 (x122 x1191)) x1191))
(assert (= (x1115 (x93 x835 1)) (+ (x1115 x835) 1)))
(assert (=> (<= x75 10000) (= (x205 x75) (x122 x75))))
(assert (x143 x823))
(assert (x143 x1362))
(assert (x143 x49))
(assert (= (x122 4294967295) (x205 4294967295)))
(assert (= (x1080 x1477) 0))
(assert (x143 x901))
(assert (x524 x1360))
(assert (= x1382 (or x41 x135)))
(assert (x143 x421))
(assert (x143 x34))
(assert (x143 x640))
(assert (x143 x392))
(assert (x524 x622))
(assert (x143 x892))
(assert (x143 x92))
(assert (x143 x1207))
(assert (x143 x567))
(assert (= (+ 1 (x1115 x516)) (x1115 (x93 x516 1))))
(assert (= x562 (and x730 x79)))
(assert (x143 x255))
(assert (= x152 (or x344 x1202)))
(assert (x143 x210))
(assert (x143 x1116))
(assert (x143 x710))
(assert (x143 x839))
(assert (x143 x28))
(assert (= (x1115 (x122 (x937 x1238 96))) (x937 x1238 96)))
(assert (x143 x132))
(assert (x524 x35))
(assert (= (x1115 (x122 x112)) x112))
(assert (x524 1461501637330902918203684832716283019655932542975))
(assert (= x237 (=> (= x1300 x224) x663)))
(assert (x1083 x1007))
(assert (x524 x1345))
(assert (x1209 x993))
(assert (x1083 x531))
(assert (x143 x456))
(assert (x423 x1345))
(assert (x143 x1191))
(assert (= (and (not x233) x1145) x1226))
(assert (x143 x347))
(assert (x143 x419))
(assert (x143 x1110))
(assert (x143 x71))
(assert (x143 x930))
(assert (x143 x45))
(assert (x143 x1279))
(assert (x143 x988))
(assert (x143 x846))
(assert (= (x205 18446744073709551615) (x122 18446744073709551615)))
(assert (x143 x595))
(assert (x524 x1084))
(assert (x143 x212))
(assert (x143 x1334))
(assert (x143 x890))
(assert (= x158 (and (not x1414) x934)))
(assert (x143 x1061))
(assert (x143 x959))
(assert (x143 x206))
(assert (=> (>= 10000 x1161) (= (x122 x1161) (x205 x1161))))
(assert (x143 x416))
(assert (=> (>= 10000 x687) (= (x205 x687) (x122 x687))))
(assert (= x1047 (x1115 (x122 x1047))))
(assert (x143 x982))
(assert (x143 x425))
(assert (x524 x491))
(assert (= (or x172 x678 x1351 x695) x700))
(assert (= x422 (=> (and (= x520 x28) (= x28 (x609 x1155)) (= x739 x1155) (= x1137 x606) (not (= x1041 0)) (= (x222 (+ 31 x320)) x465) (not (or (and (< x320 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x320))) (> x320 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x222 (+ x739 x698)) x1137) (= x698 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x465)) (>= 1461501637330902918203684832716283019655932542975 x28)) x555)))
(assert (x143 x1132))
(assert (x143 x1199))
(assert (= (and x121 (not x1071)) x744))
(assert (x143 x1))
(assert (x143 x818))
(assert (= (x122 111898140286184639627988011319402352826893257207651552004621811389633377861632) (x205 111898140286184639627988011319402352826893257207651552004621811389633377861632)))
(assert (x1209 x1174))
(assert (x143 x18))
(assert (x143 x726))
(assert (x143 x183))
(assert (= (x1115 (x122 x1219)) x1219))
(assert (= (x937 x285 96) (x1115 (x122 (x937 x285 96)))))
(assert (x143 x1234))
(assert (x143 x658))
(assert (x524 x1268))
(assert (x143 x761))
(assert (= x50 (and x1236 x1271)))
(assert (x143 x1477))
(assert (x143 x718))
(assert (=> (<= x781 10000) (= (x122 x781) (x205 x781))))
(assert (x143 x48))
(assert (x1083 x706))
(assert (= 0 (x1352 x1415)))
(assert (x143 x1227))
(assert (= x1058 (and x173 x702)))
(assert (=> (<= (x937 x705 96) 10000) (= (x122 (x937 x705 96)) (x205 (x937 x705 96)))))
(assert (= x1296 (and x273 (not x1170))))
(assert (x143 x348))
(assert (x143 x1356))
(assert (x143 x1157))
(assert (= (or x1177 (and (not x148) x793)) x1379))
(assert (x143 x656))
(assert (x143 x1225))
(assert (= (and x1284 (not x782)) x911))
(assert (= x33 (and (not x1455) x1331)))
(assert (x524 x59))
(assert (= (and x550 x472) x1386))
(assert (= (and (not x497) x821) x741))
(assert (= (x205 107954783943672036892603255375593993710912147498776614820764573710931487358976) (x122 107954783943672036892603255375593993710912147498776614820764573710931487358976)))
(assert (x143 x1442))
(assert (x143 x400))
(assert (x143 x154))
(assert (= (or x944 x322) x264))
(assert (x1209 x622))
(assert (x143 x955))
(assert (x143 x1111))
(assert (= x1202 (and x1038 x721)))
(assert (x143 x1073))
(assert (x143 x1262))
(assert (= (and x118 x264) x577))
(assert (x143 x230))
(assert (x143 x1464))
(assert (x143 x781))
(assert (x1083 (x937 x161 96)))
(assert (x143 x319))
(assert (= (or x408 x1282) x119))
(assert (x143 x98))
(assert (= x268 (=> (and (not (= 0 x903)) (= x614 (x123 x729)) (not (or (> x392 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x392 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x392))))) (= x224 x614) (= x267 x729)) x237)))
(assert (x858 x290))
(assert (x143 x1127))
(assert (= x770 (and x1417 x1404)))
(assert (x143 x610))
(assert (= (or x394 x672) x1301))
(assert (x858 x906))
(assert (x143 x1076))
(assert (x143 x907))
(assert (= x53 (and x1114 (not x801))))
(assert (= x328 (x1115 (x122 x328))))
(assert (x143 x568))
(assert (= x104 (or x65 x744 x1372 x1473 x1440 x947 x762 (and x479 x770) (and x612 x1471) x1291 x124 x604 x856 x1255 (and x900 x50) x7 (and x279 x734) (and (not x1367) x295) (and x229 x997) (and x1388 x470) (and x931 x854) (and (not x91) x494) x1026 (and x1146 x1350) x527 x1031 x193 x1148 x670 (and x741 (not x530)) (and x1145 x233) x1391 (and x841 x158) (and x1003 x196) (and (not x1042) x68) (and x333 x897) (and x497 x821) (and x114 x334) (and x1400 x980) x655 x1407 (and (not x1236) x1271) (and x733 x922) (and x1109 x560) x1124 (and x641 x758) (and x1226 (not x946)) x1318 x1355 x1441)))
(assert (x143 x998))
(assert (x143 x1443))
(assert (= (and x861 x350) x702))
(assert (= (=> (= (= x1240 0) x406) (and (=> x406 x973) (=> (and (and (= x1273 (x222 (+ x806 31))) (= x701 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1273)) (= (x222 (+ x701 x578)) x446) (= x233 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x806) (and (< x806 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x806) true))))) (not x406)) (and (=> (and (and (= (x938 1461501637330902918203684832716283019655932542975 x238) x1410) (= x66 x578) (= (= x1410 x238) x946) (= x238 (x995 x66))) (not x233)) (and (=> (and (and (= x446 x492) (= x247 x238)) x946) x553) (=> (not x946) x973))) (=> x233 x973))))) x750))
(assert (=> (<= x1186 10000) (= (x122 x1186) (x205 x1186))))
(assert (= (x1115 (x122 x1054)) x1054))
(assert (= (=> (and (and (not (= x1039 0)) (= x1039 (x1446 (x122 x45))) (= x1317 (x222 (+ x787 4))) (= x1317 x370) (= (< 0 x382) x1253)) (or (and (not x1253) (= x382 x1127)) (and (and (> 4294967296 x168) (= x1127 1)) x1253))) x340) x961))
(assert (= 0 (x1080 x509)))
(assert (= x1473 (and x1170 x273)))
(assert (=> (>= 10000 x952) (= (x205 x952) (x122 x952))))
(assert (x143 x873))
(assert (x143 x693))
(assert (x143 x405))
(assert (= (and x600 x389) x799))
(assert (x143 x271))
(assert (x597 x491))
(assert (x524 x88))
(assert (= x1478 (=> (and (= x398 x919) (= (x222 (+ 4 x893)) x919) (= (x1446 (x122 x362)) x813) (= (= 0 x813) x612)) (and (=> x612 x973) (=> (and (and (or (and x782 (and (= x575 1) (< x149 4294967296))) (and (not x782) (= x211 x575))) (= x782 (< 0 x211))) (not x612)) x646)))))
(assert (= 18446744073709551615 (x1115 (x205 18446744073709551615))))
(assert (x143 x367))
(assert (x143 x1219))
(assert (x143 x989))
(assert (= (and (not x441) x1150) x773))
(assert (=> (<= x126 10000) (= (x205 x126) (x122 x126))))
(assert (= (and x226 x1029) x1264))
(assert (= x1298 (=> (= x1295 (= 0 x150)) (and (=> x1295 x973) (=> (and (not x1295) (and (= x35 (x222 (+ 31 x286))) (= x456 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x35)) (= x922 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x286) (and (< x286 32) (= true (<= x286 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= (x222 (+ x456 128)) x986))) (and (=> x922 x973) (=> (and (and (= x567 (x969 128)) (= x1412 (= x567 0))) (not x922)) (and (=> (not x1412) x973) (=> (and x1412 (and (= true x448) (or (and x448 (= x448 x182)) (and (and (= x290 (x1172 x275)) (= x525 (= 0 x259)) (= (x314 (x122 x1101) x1187 0) x275) (= (x314 (x122 x1101) (x205 21) 0) x1187) (= x259 (x938 255 x290)) (= x182 (not x525))) (not x448))))) x728)))))))))
(assert (x143 x1101))
(assert (x143 x951))
(assert (= (and x533 x374) x7))
(assert (x143 x1434))
(assert (= x2 (and x1128 (not x352))))
(assert (x143 x215))
(assert (x143 x87))
(assert (x143 x1086))
(assert (x1083 x1201))
(assert (x143 x829))
(assert (x143 x294))
(assert (x143 x111))
(assert (x1083 (x937 x1465 96)))
(assert (x524 x412))
(assert (= (or x1296 x505) x1417))
(assert (x143 x713))
(assert (= x992 (or x562 x305)))
(assert (= (=> (= (= 0 x1293) x1414) (and (=> (and (and (= (x222 (+ x761 31)) x511) (= x841 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x761) (and (> 32 x761) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x761) true)))) (= (x222 (+ x719 x1183)) x1092) (= x1183 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x511))) (not x1414)) (and (=> x841 x973) (=> (and (not x841) (and (= (x231 x1421) x622) (= x1421 x719) (= (= x622 x1075) x1367) (= x1075 (x938 1461501637330902918203684832716283019655932542975 x622)))) (and (=> (not x1367) x973) (=> (and x1367 (and (= x846 x1092) (= x952 x622))) x929))))) (=> x1414 x973))) x170))
(assert (x143 x1342))
(assert (x143 x767))
(assert (x143 x112))
(assert (x143 x1424))
(assert (= (=> (and (or (and x584 (and (= x516 (x314 (x122 x1101) (x205 14) 0)) (= x134 (x314 (x122 x1186) (x205 16) 0)) (= x85 (x1307 x471)) (not (>= (+ x1014 x85) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1057 (x147 x134)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1014 x1057))) (= (x93 x516 1) x471) (= (x222 (+ x1057 x1383)) x1374) (= x210 (x222 (+ x85 x1383))))) (not x584)) (and (= x1225 (x222 (+ x101 x144))) (= (x314 (x122 x1394) (x205 15) 0) x469) (= (x93 x1163 1) x396) (= x166 (x93 x1304 1)) (= (> x1383 0) x584) (= (x93 x396 1) x130) (= x1101 x144) (= x1304 (x93 x160 1)) (= (x938 115792089237316195423570985007226406215939081747436879206741300988257197096960 x693) x101) (= x916 (x93 x166 1)) (= x469 x437) (= x1163 (x93 x916 1)) (= x160 (x93 x469 1)) (= (x938 1461501637330902918203684832716283019655932542975 x270) x1394) (= (x432 x437) x693))) x332) x663))
(assert (x524 x736))
(assert (x143 x817))
(assert (x143 x1162))
(assert (x1209 x206))
(assert (= x1399 (and (not x1152) x803)))
(assert (= x877 (and x1302 x785)))
(assert (x143 x559))
(assert (x143 x653))
(assert (x524 x845))
(assert (x143 x851))
(assert (= (and x1094 x1001) x124))
(assert (= 12283247964407756808830995669474934993630555597489544120741799677115838234624 (x1115 (x205 12283247964407756808830995669474934993630555597489544120741799677115838234624))))
(assert (= x800 (=> (and (or x1067 (not x1067)) (= (= x903 0) x1067)) x268)))
(assert (x143 x214))
(assert (x1209 x1223))
(assert (x143 x1119))
(assert (x143 x816))
(assert (x143 x665))
(assert (x143 x742))
(assert (x524 x1273))
(assert (x143 x528))
(assert (= x1256 (and x359 x448)))
(assert (x143 x1221))
(assert (x143 x619))
(assert (= x1400 (and x912 (not x626))))
(assert (x143 x446))
(assert (= (x1115 (x93 x1304 1)) (+ 1 (x1115 x1304))))
(assert (x524 x1174))
(assert (x143 x97))
(assert (x143 x1317))
(assert (x143 x1230))
(assert (=> (>= 10000 x520) (= (x122 x520) (x205 x520))))
(assert (x143 x1482))
(assert (x143 x1402))
(assert (= (and (not x43) x38) x244))
(assert (= (=> (and (= (ite (< x616 x746) x616 x746) x1334) (= (< x759 x460) x1142) (= x759 (x222 (+ x1334 x460)))) (and (=> x1142 x973) (=> (and (not x1142) (and (= x71 (x222 (+ x1464 x1435))) (= (< x71 x1435) x397))) (and (=> (and (not x397) (= x366 (< x759 x71))) (and (=> (and (= 0 x716) x366) x113) (=> (and (not x366) (= x441 (< x759 x71))) (and (=> (and (and (= x716 x115) (= x115 (x586 (- x759 x71)))) (not x441)) x113) (=> x441 x973))))) (=> x397 x973))))) x722))
(assert (x524 x1140))
(assert (= x81 (=> (= false x812) x1210)))
(assert (= (x1115 (x205 4294967296)) 4294967296))
(assert (x143 x777))
(assert (x143 x1147))
(assert (= (x1352 x1344) 0))
(assert (x143 x746))
(assert (= 0 (x1352 (x222 (+ 32 x265)))))
(assert (x524 x306))
(assert (= (x1330 x664) 0))
(assert (= (and x1152 x803) x323))
(assert (= (x1115 (x93 x228 1)) (+ (x1115 x228) 1)))
(assert (= x781 (x1115 (x122 x781))))
(assert (x143 x218))
(assert (x143 x1011))
(assert (x143 x415))
(assert (x143 x680))
(assert (x143 x60))
(assert (x143 x1237))
(assert (= (=> (and (and (= x600 true) (= x845 (x222 (+ x1358 31))) (= x739 (x222 (+ x502 128))) (= x282 (x1194 128)) (not (= x564 0)) (= x502 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x845)) (= x282 0) (not (or (> x1358 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1358) true) (> 32 x1358))))) (or (and (and (= (not x1009) x910) (= (= x1466 0) x1009) (= x1354 (x314 (x122 x1161) x368 0)) (= (x938 255 x10) x1466) (= (x432 x1354) x10) (= (x314 (x122 x1161) (x205 21) 0) x368)) (not x600)) (and x600 (= x600 x910)))) x755) x708))
(assert (x143 x317))
(assert (x143 x451))
(assert (x143 x290))
(assert (x143 x598))
(assert (= x1008 (and x2 (not x1423))))
(assert (= (and x684 (not x1320)) x108))
(assert (x1083 (x937 x283 96)))
(assert (x1083 x1186))
(assert (x143 x772))
(assert (x143 x878))
(assert (x143 x1174))
(assert (x143 x1427))
(assert (= (x1115 (x122 x952)) x952))
(assert (x143 x1087))
(assert (x143 x572))
(assert (x1209 x76))
(assert (x1083 x1219))
(assert (x143 x564))
(assert (= (and (not x1412) x1028) x762))
(assert (x143 x201))
(assert (= x226 (or x637 x365 x1066 x1134)))
(assert (x524 x500))
(assert (=> (>= 10000 x1181) (= (x205 x1181) (x122 x1181))))
(assert (= x1038 (and x727 x915)))
(assert (x143 x1229))
(assert (x143 x828))
(assert (x597 x1103))
(assert (x597 x845))
(assert (x143 x149))
(assert (= (x1115 (x93 x1244 1)) (+ (x1115 x1244) 1)))
(assert (x143 x1335))
(assert (x143 x1251))
(assert (= 0 (x1330 x1005)))
(assert (x524 x890))
(assert (x143 x751))
(assert (= (x1115 (x122 x531)) x531))
(assert (= (or x420 x674) x928))
(assert (x143 x662))
(assert (x143 x1052))
(assert (x143 x1084))
(assert (= (x122 1461501637330902918203684832716283019655932542975) (x205 1461501637330902918203684832716283019655932542975)))
(assert (x143 x1421))
(assert (= (x122 2543820636) (x205 2543820636)))
(assert (= x931 (and (not x1178) x1382)))
(assert (= (+ 3 (x1115 x1017)) (x1115 (x93 x1017 3))))
(assert (x143 x335))
(assert (= 0 (x1080 x1396)))
(assert (= (+ 1 (x1115 x1163)) (x1115 (x93 x1163 1))))
(assert (x1209 x1140))
(assert (x143 x1344))
(assert (x143 x1099))
(assert (x143 x179))
(assert (x143 x1074))
(assert (x143 x1103))
(assert (x143 x993))
(assert (x143 x1165))
(assert (x423 x908))
(assert (x143 x620))
(assert (x143 x830))
(assert (= (and (not x1021) x1126) x840))
(assert (= (x1115 (x205 2974191442)) 2974191442))
(assert (x143 x1384))
(assert (= (or x1379 x104) x833))
(assert (x143 x30))
(assert (x143 x1323))
(assert (x1209 x88))
(assert (= x514 (and x475 (not x563))))
(assert (x524 x1428))
(assert (= x184 (=> (and (= x267 x1199) (= x1182 (x1136 x543)) (= x1199 (x222 (+ x572 x1335))) (not (= 0 x1061)) (not (or (> x959 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x959 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x959)))) (= x11 x1182) (<= x1182 1461501637330902918203684832716283019655932542975) (= x572 x543) (= x425 (x222 (+ 31 x959))) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x425) x1335)) x556)))
(assert (= x601 (and (not x1248) x3)))
(assert (x143 x987))
(assert (x143 x520))
(assert (x143 x633))
(assert (x143 x1261))
(assert (= x876 (or x133 x53)))
(assert (x143 x235))
(assert (= (x1115 (x205 2794781754)) 2794781754))
(assert (x143 x492))
(assert (x143 x669))
(assert (x143 x1467))
(assert (= 0 (x1330 x1340)))
(assert (= (x205 53555067238089503724735347336495418478014768613909373709225909316790851207168) (x122 53555067238089503724735347336495418478014768613909373709225909316790851207168)))
(assert (x143 x1346))
(assert (x1209 x1084))
(assert (= (or x1058 x510) x54))
(assert (= x383 (and (not x943) x526)))
(assert (= x455 (and x1198 (not x608))))
(assert (= (and x1257 x117) x1333))
(assert (x597 x319))
(assert (x143 x463))
(assert (x143 x1409))
(assert (x143 x457))
(assert (= x637 (and x302 x1451)))
(assert (= x474 (x122 (x1115 x474))))
(assert (x524 x10))
(assert (= 2801674539 (x1115 (x205 2801674539))))
(assert (= (and x928 (not x1034)) x403))
(assert (x143 x1272))
(assert (x143 x606))
(assert (x143 x545))
(assert (x143 x635))
(assert (x143 x1098))
(assert (= x889 (and x1045 x1411)))
(assert (x143 x629))
(assert (= (x205 11430537079145650693387304458692941425836787954612963690241153482819318579200) (x122 11430537079145650693387304458692941425836787954612963690241153482819318579200)))
(assert (x1083 x1047))
(assert (x143 x354))
(assert (= x51 (or x1399 x323)))
(assert (x143 x221))
(assert (x143 x511))
(assert (x143 x1259))
(assert (= x526 (and x199 x1289)))
(assert (x1209 x1262))
(assert (= (=> (= x859 (= x1445 0)) (and (=> (and (not x859) (= x279 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1370) (and (< x1370 32) (= (<= x1370 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))))) (and (=> (and (and (= x515 x547) (= (x686 x1005) x515) (= x846 x1005)) (not x279)) x1249) (=> x279 x973))) (=> x859 x973))) x373))
(assert (x1083 x1442))
(assert (= x1303 (or x309 x932)))
(assert (x597 x261))
(assert (x597 x890))
(assert (= x1350 (and (not x229) x997)))
(assert (x143 x1245))
(assert (x143 x960))
(assert (= x1255 (and (not x438) x1264)))
(assert (x143 x1090))
(assert (x143 x546))
(assert (x143 x459))
(assert (x143 x902))
(assert (x143 x1397))
(assert (= (x1115 (x93 x36 1)) (+ 1 (x1115 x36))))
(assert (x143 x1377))
(assert (= x712 (and x801 x1114)))
(assert (x143 x1290))
(assert (= (or (and x1231 (not x1067)) x837) x127))
(assert (x143 x737))
(assert (x143 x1439))
(assert (= (x205 2769337888) (x122 2769337888)))
(assert (= (and x453 x676) x538))
(assert (= (x1115 (x122 x1106)) x1106))
(assert (x143 x1240))
(assert (= (x1352 (x222 (+ x265 64))) 0))
(assert (x597 x511))
(assert (x143 x1217))
(assert (= x450 (or x241 x1035)))
(assert (= x1097 (and (not x186) x146)))
(assert (x143 x10))
(assert (= x249 (and x1248 x3)))
(assert (= (div x399 452312848583266388373324160190187140051835877600158453279131187530910662656) (x937 x399 248)))
(assert (x143 x276))
(assert (x143 x203))
(assert (x143 x69))
(assert (= (div x161 79228162514264337593543950336) (x937 x161 96)))
(assert (x143 x1365))
(assert (x143 x1075))
(assert (x143 x1138))
(assert (x143 x784))
(assert (= (x937 x777 248) (div x777 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x1083 x1161))
(assert (= x728 (and (=> (not x182) x973) (=> (and x182 (= x778 (= 0 x1312))) (and (=> x778 x973) (=> (and (and (= x360 (= x1074 0)) (= (x938 1461501637330902918203684832716283019655932542975 x830) x1074) (= x1017 x341) (= (x314 (x122 x1312) (x205 15) 0) x1017) (= x830 (x1172 x341))) (not x778)) (and (=> (and (and (= (= x1129 0) x302) (= (x1172 x660) x1129) (= (x93 x1017 3) x660)) (not x360)) (and (=> (and (and (= 4 x888) (= x245 x986)) x302) x191) (=> (and (not x302) (and (= x886 (x93 x660 1)) (= x318 (x1172 x886)) (= x535 (= 0 x318)))) (and (=> (and (and (= (x314 (x122 x112) (x205 1) 0) x388) (= (= 0 x656) x480) (= (x938 1461501637330902918203684832716283019655932542975 x372) x656) (= x372 (x1172 x388))) (not x535)) (and (=> (and (not x480) (and (= x893 x986) (= x656 x362))) x1478) (=> (and (and (= (x938 1461501637330902918203684832716283019655932542975 x1140) x1337) (= x682 x1217) (= (= x635 0) x560) (= x1140 (x1172 (x205 0))) (= x635 (x1446 (x122 x1337))) (= x682 (x222 (+ 4 x986)))) x480) (and (=> (and (and (or (and (and (= 1 x892) (< x962 4294967296)) x763) (and (= x694 x892) (not x763))) (= (< 0 x694) x763)) (not x560)) x913) (=> x560 x973))))) (=> (and (and (= 1 x888) (= x986 x245)) x535) x191))))) (=> (and x360 (and (= x986 x245) (= x888 0))) x191))))))))
(assert (= (=> (and (= x1268 (x432 x1359)) (= (x222 (+ 256 x901)) x1308) (= x677 (x938 1461501637330902918203684832716283019655932542975 x1268)) (= x1359 (x314 (x122 x112) (x205 1) 0)) (= x1034 (= 0 x677))) (and (=> (and (not x1034) (and (= x805 x677) (= x1439 x1308))) x945) (=> (and (and (and (= x1433 (> x1443 0)) (= (x938 1461501637330902918203684832716283019655932542975 x293) x1219) (not (= 0 x487)) (= x293 (x432 (x205 0))) (= x487 (x1446 (x122 x1219))) (= (x222 (+ x1308 4)) x1275) (= x1275 x620)) (or (and (and (< x1151 4294967296) (= 1 x34)) x1433) (and (not x1433) (= x34 x1443)))) x1034) x26))) x239))
(assert (= (and x186 x146) x808))
(assert (= (and (not x1146) x1350) x146))
(assert (=> (>= 10000 x1054) (= (x122 x1054) (x205 x1054))))
(assert (x143 x532))
(assert (x524 x1223))
(assert (= (+ (x1115 x590) 1) (x1115 (x93 x590 1))))
(assert (x143 x504))
(assert (x524 x544))
(assert (x143 x207))
(assert (x1209 x1259))
(assert (= x1337 (x1115 (x122 x1337))))
(assert (x143 x705))
(assert (x524 x993))
(assert (x143 x802))
(assert (x143 x1013))
(assert (x143 x583))
(assert (x524 x1245))
(assert (x143 x1466))
(assert (= 2543820636 (x1115 (x205 2543820636))))
(assert (x143 x78))
(assert (x143 x860))
(assert (x143 x1297))
(assert (x143 x796))
(assert (=> (<= x1047 10000) (= (x122 x1047) (x205 x1047))))
(assert (= (x122 3219105711) (x205 3219105711)))
(assert (x143 x1275))
(assert (x143 x739))
(assert (= true x691))
(assert (x143 x881))
(assert (x143 x766))
(assert (x1209 x1095))
(assert (x524 x21))
(assert (x143 x716))
(assert (= (and x217 (not x1122)) x905))
(assert (x524 x238))
(assert (x143 x1096))
(assert (x524 x1095))
(assert true)
(assert (= (+ (x1115 x248) 1) (x1115 (x93 x248 1))))
(assert (= x788 (and x1417 (not x1404))))
(assert (x1083 (x937 x285 96)))
(assert (x524 x1103))
(assert (x143 x1263))
(assert (= x394 (and x905 x552)))
(assert (x143 x1065))
(assert (= x1035 (and (not x924) x577)))
(assert (x143 x1360))
(assert (= (x937 x1465 96) (div x1465 79228162514264337593543950336)))
(assert (x143 x1452))
(assert (= (x1115 (x93 x131 2)) (+ (x1115 x131) 2)))
(assert (x1083 x1337))
(assert (x143 x548))
(assert (x143 x282))
(assert (x143 x558))
(assert (= (or x1040 x498) x1471))
(assert (= x734 (and x914 (not x859))))
(assert (x143 x883))
(assert (x1083 x11))
(assert (x143 x246))
(assert (= (+ 1 (x1115 x469)) (x1115 (x93 x469 1))))
(assert (= x1442 (x1115 (x122 x1442))))
(assert (= (and x450 (not x1102)) x371))
(assert (= 0 (x1352 x326)))
(assert (x143 x1345))
(assert (= (x1115 (x205 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x143 x534))
(assert (x143 x208))
(assert (= x1201 (x1115 (x122 x1201))))
(assert (x1083 x75))
(assert (x143 x576))
(assert (= x913 (=> (= (= 0 x892) x339) (and (=> x339 x973) (=> (and (not x339) (and (= (x222 (+ x986 x815)) x595) (= x497 (or (and (> 32 x962) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x962))) (> x962 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x1469 (x222 (+ x962 31))) (= x815 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1469)))) (and (=> x497 x973) (=> (and (not x497) (and (= x1064 x986) (= x665 (x195 x1064)) (= (= x665 x1112) x530) (= (x938 1461501637330902918203684832716283019655932542975 x665) x1112))) (and (=> (and x530 (and (= x665 x362) (= x595 x893))) x1478) (=> (not x530) x973)))))))))
(assert (x143 x444))
(assert (x143 x1395))
(assert (x143 x613))
(assert (x143 x355))
(assert (x143 x1059))
(assert (x597 x1469))
(assert (x143 x1269))
(assert (= x1391 (and x1206 x1176)))
(assert (x143 x1273))
(assert (x524 x270))
(assert (= 0 (x1080 (x222 (+ x653 96)))))
(assert (= (x1115 (x93 x596 1)) (+ 1 (x1115 x596))))
(assert (x143 x965))
(assert (= x733 (and (not x1295) x1458)))
(assert (x143 x794))
(assert (x143 x736))
(assert (x143 x664))
(assert (x524 x503))
(assert (x1209 x784))
(assert (= x1299 (or x127 x889)))
(assert (x143 x1140))
(assert (x143 x703))
(assert (= 0 (x1352 (x222 (+ 96 x265)))))
(assert (= (x1115 (x205 2769337888)) 2769337888))
(assert (x143 x435))
(assert (= x1001 (and x493 x668)))
(assert (= (and x765 (not x1184)) x1177))
(assert (x143 x954))
(assert (= (=> (and (= x402 (x1446 (x122 x247))) (= x196 (= 0 x402))) (and (=> x196 x973) (=> (and (and (or (and (= x111 x632) (not x1455)) (and (and (< x792 4294967296) (= x111 1)) x1455)) (= (> x632 0) x1455)) (not x196)) x70))) x553))
(assert (x143 x579))
(assert (= (+ (x1115 x281) 1) (x1115 (x93 x281 1))))
(assert (= x1291 (and x859 x914)))
(assert (x524 x425))
(assert (x143 x824))
(assert (= (x122 2661379305446904779734859349833089258949455794555359447896749126450) (x205 2661379305446904779734859349833089258949455794555359447896749126450)))
(assert (x143 x1005))
(assert (= (or x1232 x153) x934))
(assert (x1209 x503))
(assert (x143 x673))
(assert (= (x205 2974191442) (x122 2974191442)))
(assert (= (=> (and (and (= x1258 false) (= x571 false) (>= x737 0) (> x706 0) x1002 (>= x92 0) (> x375 0) (= (x232 (x122 x213)) x896) (= x69 x1101) (<= x270 1461501637330902918203684832716283019655932542975) (= (> x807 0) x263) (= (< 0 (x1446 (x122 x1054))) x1447) (= 2801674539 x1328) (= x201 x1369) (= (= x1327 x1082) x1002) (= x1101 x874) (> x1054 0) (not (= x706 x1054)) (= 0 x201) (= x1082 x92) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x303) true) (< 163 x303)) (< 0 x1191) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x623) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x303)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x623) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x303)) (< x623 x303))) (<= 0 x896) (= false x1378) (= x1383 x1014) (= x949 (x232 (x122 x1191))) (>= 1461501637330902918203684832716283019655932542975 x1272) (= x615 (x938 1461501637330902918203684832716283019655932542975 x76)) (>= x593 0) (not (= x1191 x213)) (not (> 2769337888 x1328)) (= (x232 (x122 x1054)) x593) (> 3219105711 x1328) (<= 0 x680) (not (= x213 x706)) (= x1186 x288) (< x1328 2974191442) (not (= 2769337888 x1328)) (>= 1461501637330902918203684832716283019655932542975 x1078) (not (= x1328 2794781754)) (>= x69 0) (< 0 x213) (= x212 x1419) (= (x586 (- x303 4)) x951) (not (< 18446744073709551615 x766)) (not (< x303 4)) (not (< 18446744073709551615 x512)) (not (or (and (< x951 160) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x951))) (> x951 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x895 x1186) (= x737 x633) (= x568 x1283) (= x327 x270) (not (= 0 x1138)) (<= 0 x949) x167 (= x751 x1383) (= x683 x766) (>= 1461501637330902918203684832716283019655932542975 x1191) (= x109 (> (x1446 (x122 x706)) 0)) (= x1272 x1283) (= x512 (x1079 x982)) (not (= x1054 x1191)) (<= 0 x1078) (>= 1461501637330902918203684832716283019655932542975 x213) (= (x432 (x205 0)) x76) (= x1116 2801674539) (= x167 (< 0 (x1446 (x122 x213)))) (= x430 (x222 (+ x512 x246))) (not (< x303 x430)) (= x270 x726) (<= x69 1461501637330902918203684832716283019655932542975) (>= x874 0) x109 (= 5 x1060) (not (= x213 x1054)) (<= x874 1461501637330902918203684832716283019655932542975) (= x1327 x1101) (<= 0 x1272) (not (< x1328 2543820636)) x1149 (<= x706 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x92) (= (x232 (x122 x706)) x680) (= (x222 (+ 31 x982)) x623) (= false x848) x1447 (not (= x1191 x706)) (= (x1446 (x122 x615)) x1138) (= x246 (x222 (+ x982 32))) (>= 1461501637330902918203684832716283019655932542975 x737) (= x1149 (> (x1446 (x122 x1191)) 0)) (= x64 x1419) (= (x1446 (x122 x1191)) x375) (= (x222 (+ 4 x683)) x982) (<= x1054 1461501637330902918203684832716283019655932542975)) (or (and (not x263) (= x125 x807)) (and (and (= 1 x125) (> 4294967296 x434)) x263))) x760) x589))
(assert (= x121 (and (not x1461) x358)))
(assert (x143 x261))
(assert (x143 x895))
(assert (x143 x399))
(assert (x143 x1401))
(assert (= x1120 (and x2 x1423)))
(assert (x143 x697))
(assert (x143 x1182))
(assert (x143 x792))
(assert (x1209 x736))
(assert (x143 x888))
(assert (x1209 x59))
(assert (= x717 (and x199 (not x1289))))
(assert (x524 x1347))
(assert (x585 x102))
(assert (x143 x1327))
(assert (= x1389 (or x24 x431)))
(assert (=> (>= 10000 x1191) (= (x205 x1191) (x122 x1191))))
(assert (not x589))
(assert (= (x937 x161 96) (x1115 (x122 (x937 x161 96)))))
(assert (x143 x391))
(assert (x143 x807))
(assert (= (or x449 x371) x420))
(assert (x143 x885))
(assert (=> (>= 10000 x1070) (= (x205 x1070) (x122 x1070))))
(assert (=> (>= 10000 x1101) (= (x205 x1101) (x122 x1101))))
(assert (x143 x634))
(assert (= x55 (=> (and (= x271 x703) (= x606 x174) (= x630 (< x1422 x253)) (= (x220 x174) x1422) (= (x432 (x205 13)) x1019) (= x271 (x222 (+ x988 x606))) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x960) true) (< x960 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x960))) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x860) x988) (= (x222 (+ x960 31)) x860) (not (= x345 0)) (= x253 (x938 4294967295 x353)) (= (div x1019 79228162514264337593543950336) x353) (= x817 (ite x630 2 3))) x506)))
(assert (x143 x1254))
(assert (x1083 x362))
(assert (= (=> (and (= x1482 x415) (not (> x554 x141))) x926) x1463))
(assert (x143 x20))
(assert (x143 x178))
(assert (x143 x129))
(assert (x524 x353))
(assert (= x191 (=> (= x1029 (= x888 0)) (and (=> (and x1029 (and (= (x222 (+ x548 x881)) x405) (= (x586 (- x1381 x336)) x116) (= (x586 (- x336 x245)) x1325) (= (x222 (+ x1381 32)) x548) (= (x222 (+ x955 20)) x972) (= x97 (x222 (+ 32 x1048))) (= x1222 (div x335 32)) (= (x222 (+ x245 32)) x955) (= x1073 (x222 (+ 28 x411))) (= (x1213 (x205 60) (x205 28) (x122 2661379305446904779734859349833089258949455794555359447896749126450) x756 0) x474) (= (x1213 (x205 40) (x205 20) (x122 (x937 x1238 96)) (x122 (x937 x1465 96)) 0) x756) (= (x586 (- x116 32)) x31) (= x1238 (x644 x1101 96)) (= x1381 (x222 (+ x1073 32))) (= x336 (x222 (+ x972 20))) (= (x644 x1312 96) x1465) (= (x855 x1381) x354) (= x1096 (x586 (- x1325 32))) (= x619 (x222 (+ 32 x336))) (= x438 (= 65 x354)) (= x335 (x222 (+ 31 x881))) (= x1048 (mod (* x1222 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x411 (x222 (+ 32 x336))) (= (x222 (+ x1381 x97)) x1246))) (and (=> (not x438) x973) (=> (and x438 (and (= (x222 (+ 32 x966)) x391) (= (x855 x966) x1207) (= x399 (x855 x391)) (= x352 (> x1207 57896044618658097711785492504343953926418782139537452191302581570759080747168)) (= x930 (x855 x548)) (= x197 (x937 x399 248)) (= x966 (x222 (+ x548 32))))) (and (=> x352 x973) (=> (and (= (= x197 27) x1423) (not x352)) (and (=> (and (= (= x197 28) x1387) (not x1423)) (and (=> (not x1387) x973) (=> x1387 x192))) (=> x1423 x192))))))) (=> (not x1029) x973)))))
(assert (= 0 (x1080 x653)))
(assert (x143 x159))
(assert (x524 255))
(assert (= (and x254 x162) x1440))
(assert (x143 x1186))
(assert (x524 x1401))
(assert (x143 x1112))
(assert (x143 x175))
(assert (= (x1080 x417) 0))
(assert (= (and x304 (not x234)) x1260))
(assert (x143 x478))
(assert (x143 x1082))
(assert (x143 x257))
(assert (= (or x514 x390) x389))
(assert (=> (<= x1442 10000) (= (x205 x1442) (x122 x1442))))
(assert (= (+ 1 (x1115 x1077)) (x1115 (x93 x1077 1))))
(assert (= (x1080 x1155) 0))
(assert (x143 x345))
(assert (= 0 (x1080 x804)))
(assert (x143 x59))
(assert (x143 x1161))
(assert (x524 x1259))
(assert (x1083 x1106))
(assert (x143 x1192))
(assert (x143 x1095))
(assert (= (and (not x182) x967) x1407))
(assert (x143 x1422))
(assert (= (or x1097 x808) x1458))
(assert (= x15 (=> (and (= x591 x918) (= x559 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x491)) (<= x1297 1461501637330902918203684832716283019655932542975) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1237) (and (< x1237 32) (= true (<= x1237 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x477 x545) (= (x222 (+ x918 x559)) x545) (= x491 (x222 (+ x1237 31))) (not (= x1324 0)) (= x1297 (x768 x591)) (= x1297 x531)) x27)))
(assert (x1209 x1428))
(assert (x143 x591))
(assert (x143 x245))
(assert (= 0 (x1352 x573)))
(assert (= (x1115 (x93 x396 1)) (+ (x1115 x396) 1)))
(assert (x143 x724))
(assert (x143 x485))
(assert (x143 x283))
(assert (= x753 (=> (= x120 x522) x752)))
(assert (x143 x125))
(assert (x143 x805))
(assert (x143 x1337))
(assert (= (and x450 x1102) x449))
(assert (= x1145 (and x384 (not x406))))
(assert (= (or x880 x1256) x967))
(assert (= (and (not x1349) x151) x1232))
(assert (x143 x82))
(assert (x143 x21))
(assert (x143 x1043))
(assert (x143 x362))
(assert (= x1028 (and (not x922) x733)))
(assert (= (and x177 x51) x1125))
(assert (= (+ (x1115 x1139) 1) (x1115 (x93 x1139 1))))
(assert (= x681 (and (not x763) x1270)))
(assert (= (=> (and (or (and x209 (= x209 x1175)) (and (not x209) (and (= (x938 255 x906) x1086) (= (x314 (x122 x1101) x1444 0) x1185) (= x1444 (x314 (x122 x1101) (x205 21) 0)) (= x1175 (not x611)) (= (= x1086 0) x611) (= (x432 x1185) x906)))) (and (not (= x125 0)) (= x129 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x319)) (= x1363 0) (= (x1319 128) x1363) (= x319 (x222 (+ 31 x434))) (= x648 (x222 (+ 128 x129))) (= true x209) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x434) (and (< x434 32) (= true (<= x434 57896044618658097711785492504343953926634992332820282019728792003956564819967))))))) x923) x760))
(assert (= (x1330 x66) 0))
(assert (= (and x1178 x1382) x431))
(assert (= x52 (and x876 (not x1253))))
(assert (x585 x693))
(assert (x143 x1293))
(assert (= (and (not x488) x443) x1126))
(assert (x143 x430))
(assert (x143 x1445))
(assert (x143 x502))
(assert (x143 x476))
(assert (= x254 (and x668 (not x493))))
(assert (x1209 x372))
(assert (x143 x940))
(assert (= (x1115 (x93 x714 1)) (+ 1 (x1115 x714))))
(assert (x143 x689))
(assert (x143 x318))
(assert (x1083 x615))
(assert (x143 x845))
(assert (x143 x666))
(assert (= x912 (or x643 x911)))
(assert (x597 x250))
(assert (= (and (not x636) x712) x1197))
(assert (= x674 (and (not x118) x264)))
(assert (x143 x238))
(assert (= (or x508 x538) x350))
(assert (=> (<= x662 10000) (= (x122 x662) (x205 x662))))
(assert (x1083 x98))
(assert (= (x122 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x205 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x359 (and x1028 x1412)))
(assert (= x976 (and x1331 x1455)))
(assert (x143 x1428))
(assert (x143 x1057))
(assert (x143 x949))
(assert (= (and x359 (not x448)) x880))
(assert (= (or x383 x814) x225))
(assert (x143 x776))
(assert (x143 x285))
(assert (= (+ (x1115 x1408) 1) (x1115 (x93 x1408 1))))
(assert (= 53555067238089503724735347336495418478014768613909373709225909316790851207168 (x1115 (x205 53555067238089503724735347336495418478014768613909373709225909316790851207168))))
(assert (= x752 (=> (and (and (= (x93 x1143 1) x1459) (= x825 (x93 x596 1)) (= (x93 x714 1) x596) (= (x222 (+ x87 x464)) x1402) (= (x93 x1459 1) x714) (= (x938 1461501637330902918203684832716283019655932542975 x1223) x1201) (= x58 (x93 x826 1)) (= x826 x1055) (= x921 (x93 x58 1)) (= x544 (x432 x1055)) (= x826 (x314 (x122 x1201) (x205 15) 0)) (= (x93 x921 1) x1143) (= x692 (< 0 x60)) (= x464 x1161) (= (x938 115792089237316195423570985007226406215939081747436879206741300988257197096960 x544) x87)) (or (and (and (= (x473 x1049) x1227) (= x312 (x314 (x122 x781) (x205 16) 0)) (= (x314 (x122 x781) (x205 16) 0) x256) (= (x222 (+ x1227 x60)) x215) (= (x93 x740 1) x1049) (= x588 (x1211 x312)) (= x439 (x222 (+ x588 x60))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x554 x1227))) (= x740 (x314 (x122 x1161) (x205 14) 0)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x588 x554)))) x692) (not x692))) x950)))
(assert (=> (<= x531 10000) (= (x205 x531) (x122 x531))))
(assert (x143 x952))
(assert (x1083 x269))
(assert (x1209 x238))
(assert (x143 x1294))
(assert (x143 x719))
(assert (x143 x1193))
(assert (x597 x661))
(assert (x1209 x830))
(assert (= x142 (and x1088 (not x778))))
(assert (= 0 (x1080 x1011)))
(assert (x143 x321))
(assert (=> (<= (x937 x1465 96) 10000) (= (x205 (x937 x1465 96)) (x122 (x937 x1465 96)))))
(assert (= (+ (x1115 x748) 1) (x1115 (x93 x748 1))))
(assert (= (and x1067 x1231) x837))
(assert (= (div x705 79228162514264337593543950336) (x937 x705 96)))
(assert (= x942 (=> (and (>= 1461501637330902918203684832716283019655932542975 x971) (= (x222 (+ 32 x265)) x414) (= x971 (x139 x796 x355 x718 x361)) (= x118 (< 0 x1383)) (= (x222 (+ x882 32)) x294) (not (= 0 x100)) (= (x429 (x222 (+ x265 64))) x718) (= (x938 1461501637330902918203684832716283019655932542975 x1259) x19) (= x361 (x429 (x222 (+ x265 96)))) (= x235 128) (= x265 x829) (= (x429 x265) x796) (= x1259 (x499 x1415)) (= x882 (x222 (+ 32 x414))) (= (x586 (- x265 32)) x1415) (= (x938 1461501637330902918203684832716283019655932542975 x1259) x100) (= x355 (x429 (x222 (+ x265 32)))) (= (x586 (- x265 32)) x1216) (= (x222 (+ x337 32)) x265) (= x1425 x19)) (and (=> (and (not x118) (and (= x1393 x898) (not (> x891 x30)) (= x901 x689) (= (x586 (- x521 x1033)) x30) (= (x93 x137 1) x1380) (= (x432 x1380) x1033) (= x137 (x93 x898 1)) (= (x314 (x122 x1101) (x205 14) 0) x898) (= (x222 (+ 128 x265)) x689) (= x521 (x432 x1393)) (= x891 (x432 (x205 12))) (not (> x1033 x521)))) x239) (=> (and x118 (and (and (= (x314 (x122 x1101) (x205 20) 0) x1420) (= (x432 x357) x789) (= x519 (x93 x1420 2)) (= x924 (= x869 0)) (= x357 (x93 x1214 1)) (= x1214 (x93 x1235 1)) (= x869 (x586 (- x818 x789))) (= (x222 (+ 128 x265)) x444) (= (x432 (x205 19)) x1277) (not (< x818 x789)) (= (x314 (x122 x1101) (x205 14) 0) x1235) (= (x432 x1214) x1062) (= x291 (x432 x519)) (= x1313 x1235) (= (x938 4294967295 x1277) x1036) (= x818 (x432 x1313))) (or (and x924 (= 0 x713)) (and (not x924) (and (= x1365 x713) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x869 x1036)) (= x1365 (mod (* x869 x1036) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))) x1353)))))
(assert (x143 x1189))
(assert (= (and (not x841) x158) x295))
(assert (= (=> (= true x812) x1210) x973))
(assert (= x1278 (and (not x1287) x523)))
(assert (x1209 x270))
(assert (x1083 x1070))
(assert (x143 x1158))
(assert (x143 x346))
(assert (= (and (not x1302) x785) x1153))
(assert (x143 x495))
(assert (x143 x1308))
(assert (= (x122 12283247964407756808830995669474934993630555597489544120741799677115838234624) (x205 12283247964407756808830995669474934993630555597489544120741799677115838234624)))
(assert (x143 x1085))
(assert (x143 x617))
(assert (x143 x789))
(assert (x143 x1374))
(assert (x524 x372))
(assert (= (and x963 x397) x856))
(assert (x143 x251))
(assert (x143 x1396))
(assert (= (x1080 x347) 0))
(assert (= (=> (and (= x1111 128) (= x885 (x222 (+ x534 32))) (= (x1108 (x222 (+ 32 x685))) x1087) (= (x764 x664) x1360) (<= x1269 1461501637330902918203684832716283019655932542975) (= (x1108 (x222 (+ x685 64))) x78) (= (x586 (- x685 32)) x664) (= x481 (x938 1461501637330902918203684832716283019655932542975 x1360)) (= (x139 x1065 x1087 x78 x1346) x1269) (= x20 x685) (= x495 (x222 (+ 32 x885))) (= x685 (x222 (+ x1246 32))) (= x1461 (= x481 0)) (= x1405 (x586 (- x685 32))) (= x1346 (x1108 (x222 (+ 96 x685)))) (= x534 (x222 (+ 32 x685))) (= x1065 (x1108 x685))) (and (=> (and (and (= (x938 1461501637330902918203684832716283019655932542975 x1360) x1322) (= x1071 (= x1312 x1322))) (not x1461)) (and (=> (not x1071) x973) (=> (and x1071 (= (> x132 0) x493)) (and (=> (and (not x493) (and (= (x1172 x442) x658) (= x1063 (x1172 x1130)) (= x987 (x222 (+ 128 x685))) (= x1437 (x93 x248 1)) (= x442 x248) (= (x314 (x122 x1101) (x205 14) 0) x248) (= (> x1063 x658) x162) (= (x93 x1437 1) x1130) (= (x1172 (x205 12)) x299))) (and (=> (and (and (= (> x299 x12) x1170) (= (x586 (- x658 x1063)) x12)) (not x162)) (and (=> (and (not x1170) (= x987 x440)) x1429) (=> x1170 x973))) (=> x162 x973))) (=> (and (and (= x1261 (x222 (+ x685 128))) (= x908 (x1172 (x205 19))) (= (x93 x590 1) x379) (= (x1172 x1348) x460) (= (x1172 x379) x1464) (= (< x460 x1464) x1094) (= x884 (x938 4294967295 x908)) (= (x314 (x122 x1101) (x205 20) 0) x131) (= (x1172 x6) x746) (= (x93 x131 2) x6) (= x1435 (x1172 x590)) (= x1233 x1348) (= x590 (x93 x1233 1)) (= (x314 (x122 x1101) (x205 14) 0) x1233)) x493) (and (=> x1094 x973) (=> (and (and (= (x586 (- x460 x1464)) x954) (= x1122 (= 0 x954))) (not x1094)) (and (=> (and (= x616 0) x1122) x722) (=> (and (and (= x346 (mod (* x954 x884) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (< (* x884 x954) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x552)) (not x1122)) (and (=> (and x552 (= x616 x346)) x722) (=> (not x552) x973))))))))))) (=> x1461 x973))) x192))
(assert (= (x1115 (x122 x1101)) x1101))
(assert (x143 x720))
(assert (= (or (and (not x176) x1154) x1205) x1364))
(assert (=> (>= 10000 x1337) (= (x205 x1337) (x122 x1337))))
(assert (= (or x418 x1299) x574))
(assert (x143 x1361))
(assert (x143 x1468))
(assert (= (or x462 x681) x820))
(assert (x143 x1310))
(assert (x1209 x1268))
(assert (= x668 (and x121 x1071)))
(assert (x597 x1273))
(assert (x143 x694))
(assert (= x340 (=> (and (= x306 (x222 (+ 31 x168))) (= x917 (x222 (+ x879 x787))) (= (div x181 79228162514264337593543950336) x1347) (= (x140 x573) x416) (= (< x416 x1229) x566) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x306) x879) (= x1229 (x938 4294967295 x1347)) (= x573 x787) (= x965 x917) (not (= 0 x1127)) (not (or (and (> 32 x168) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x168) true)) (> x168 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x432 (x205 13)) x181) (= x219 (ite x566 2 3))) x1159)))
(assert (x1209 x1245))
(assert (x143 x964))
(assert (x524 x784))
(assert (x1083 x1312))
(assert (x143 x551))
(assert (x143 x398))
(assert (x143 x61))
(assert (x143 x780))
(assert (= (x1330 x391) 0))
(assert (= (and x1176 (not x1206)) x505))
(assert (= (and x1433 x1228) x86))
(assert (x597 x306))
(assert (= x667 (and x1392 x366)))
(assert (x143 x1118))
(assert (= (x1115 (x122 x805)) x805))
(assert (x1209 x412))
(assert (= (and x225 x387) x657))
(assert (x143 x31))
(assert (x143 x100))
(assert (x1209 x948))
(assert (=> (<= x362 10000) (= (x205 x362) (x122 x362))))
(assert (x143 x187))
(assert (x143 x11))
(assert (x143 x871))
(assert (= (and x480 x1305) x1109))
(assert (x143 x1286))
(assert (= x475 (or x984 (and (not x584) x574))))
(assert (x143 x426))
(assert (x524 x1469))
(assert (= (and x741 x530) x498))
(assert (x143 x512))
(assert (= 0 (x1330 x548)))
(assert (= 0 (x1330 x1421)))
(assert (x143 x63))
(assert (=> (<= x98 10000) (= (x122 x98) (x205 x98))))
(assert (x143 x1410))
(assert (= x926 (=> (and (= x528 (x222 (+ x415 256))) (= x649 (x938 1461501637330902918203684832716283019655932542975 x88)) (= x731 (x314 (x122 x112) (x205 1) 0)) (= x1287 (= 0 x649)) (= (x432 x731) x88)) (and (=> (and (not x1287) (and (= x650 x528) (= x1442 x649))) x875) (=> (and (and (or (and (and (> 4294967296 x1119) (= 1 x1310)) x730) (and (= x452 x1310) (not x730))) (and (= x730 (> x452 0)) (= x1401 (x432 (x205 0))) (= x823 (x1446 (x122 x1007))) (= x866 x72) (not (= 0 x823)) (= (x938 1461501637330902918203684832716283019655932542975 x1401) x1007) (= x866 (x222 (+ 4 x528))))) x1287) x786)))))
(assert (= (and (not x453) x676) x508))
(assert (= x1167 (and (not x67) x1438)))
(assert (=> (<= x805 10000) (= (x122 x805) (x205 x805))))
(assert (x423 x1277))
(assert (x143 x759))
(assert (x143 x458))
(assert (= x690 (and (not x915) x727)))
(assert (x143 x269))
(assert (x1083 x45))
(assert (x143 x1041))
(assert (= (x1115 (x93 x740 1)) (+ 1 (x1115 x740))))
(assert (x143 x1166))
(assert (= (x1115 (x205 41880202175123281672023411390868823785620507377596298514233450382794225090560)) 41880202175123281672023411390868823785620507377596298514233450382794225090560))
(assert (x143 x515))
(assert (x143 x603))
(assert (= x1305 (and (not x535) x105)))
(assert (x143 x542))
(assert (= 2661379305446904779734859349833089258949455794555359447896749126450 (x1115 (x205 2661379305446904779734859349833089258949455794555359447896749126450))))
(assert (x143 x1105))
(assert (= x1481 (and x350 (not x861))))
(assert (= (x1115 (x122 x1312)) x1312))
(assert (x1083 x805))
(assert (=> (<= x328 10000) (= (x122 x328) (x205 x328))))
(assert (= (mod (* 79228162514264337593543950336 x1362) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x644 x1362 96)))
(assert (= x408 (and x54 x56)))
(assert (= (and x627 x249) x932))
(assert (= (x1115 (x122 x45)) x45))
(assert (= (x1115 (x122 (x937 x705 96))) (x937 x705 96)))
(assert (x143 x543))
(assert (= (=> (and (= x661 (x222 (+ x251 31))) (= x1467 x45) (>= 1461501637330902918203684832716283019655932542975 x1467) (= x1475 x787) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x661) x697) (not (= x732 0)) (= (x222 (+ x697 x648)) x1475) (= x1467 (x1285 x1344)) (= x648 x1344) (not (or (and (> 32 x251) (= (<= x251 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251)))) x961) x819))
(assert (x143 x908))
(assert (= x213 (x1115 (x122 x213))))
(assert (x143 x372))
(assert (= (and x1253 x876) x103))
(assert (= x1161 (x1115 (x122 x1161))))
(assert (x143 x284))
(assert (x143 x1220))
(assert (=> (<= x1219 10000) (= (x205 x1219) (x122 x1219))))
(assert (x143 x1056))
(assert (= (and x176 x1154) x1205))
(assert (= (+ (x1115 x1188) 1) (x1115 (x93 x1188 1))))
(assert (= (=> (and (not (= x1310 0)) (= (x222 (+ 31 x1119)) x890) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x890) x1165) (= (x222 (+ x1165 x528)) x629) (= x1442 x198) (<= x198 1461501637330902918203684832716283019655932542975) (not (or (> x1119 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x1119) (= true (<= x1119 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x528 x347) (= x650 x629) (= (x638 x347) x198)) x875) x786))
(assert (x143 x369))
(assert (x524 x906))
(assert (= x1441 (and x1008 (not x1387))))
(assert (=> (>= 10000 x112) (= (x205 x112) (x122 x112))))
(assert (= (and x700 x1479) x944))
(assert (= x274 (x122 (x1115 x274))))
(assert (x143 x197))
(assert (= x646 (=> (= x626 (= x575 0)) (and (=> x626 x973) (=> (and (and (= (x222 (+ x1169 x893)) x23) (= x1169 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x250)) (= x980 (or (and (< x149 32) (= (<= x149 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x149 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x250 (x222 (+ 31 x149)))) (not x626)) (and (=> (and (and (= x245 x23) (= x1056 (x1172 (x205 13))) (= x893 x871) (= (div x1056 79228162514264337593543950336) x1013) (= (> x1230 x308) x1329) (= (x1316 x871) x308) (= x1230 (x938 4294967295 x1013)) (= x888 (ite x1329 2 3))) (not x980)) x191) (=> x980 x973)))))))
(assert (x1083 x126))
(assert (x143 x1460))
(assert (x143 x1369))
(assert (x143 x1196))
(assert (x143 x1469))
(assert (x143 x491))
(assert (= (x1115 (x122 x662)) x662))
(assert (= (x1115 (x93 x1068 2)) (+ (x1115 x1068) 2)))
(assert (= x785 (and x770 (not x479))))
(assert (x143 x869))
(assert (= x247 (x1115 (x122 x247))))
(assert (x143 x76))
(assert (= x1159 (=> (and (and (= x569 65) (= x1339 (x222 (+ 32 x998))) (= x1076 (x222 (+ x1468 20))) (= (x1250 x696) x749) (= x1323 (x586 (- x1076 x965))) (= (x1213 (x205 60) (x205 28) (x122 2661379305446904779734859349833089258949455794555359447896749126450) x482 0) x1432) (= (x1250 x326) x711) (= x1384 (x586 (- x221 32))) (= x94 (x222 (+ x326 32))) (= (x222 (+ x1158 32)) x907) (= (x1250 x94) x1397) (= (div x710 32) x207) (= x1397 x426) (= x161 (x644 x1101 96)) (= x998 (mod (* x207 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x48 (x937 x749 248)) (= x219 0) (= (x222 (+ 20 x828)) x1468) (= x435 (x222 (+ 32 x1076))) (= (x222 (+ 32 x94)) x696) (= (x1250 x907) x569) (= (x222 (+ x512 x326)) x277) (= (x222 (+ x907 x1339)) x337) (= (= x48 27) x1479) (= x1158 (x222 (+ 28 x435))) (= (x222 (+ x907 32)) x326) (= x558 (x938 1461501637330902918203684832716283019655932542975 x270)) (= x710 (x222 (+ x512 31))) (= (x222 (+ x965 32)) x828) (not (> x426 57896044618658097711785492504343953926418782139537452191302581570759080747168)) (= (x644 x558 96) x705) (= (x222 (+ x1076 32)) x257) (= x482 (x1213 (x205 40) (x205 20) (x122 (x937 x161 96)) (x122 (x937 x705 96)) 0)) (= x1425 (x938 1461501637330902918203684832716283019655932542975 x270)) (= (x586 (- x907 x1076)) x221) (= x957 (x586 (- x1323 32)))) (or (and (= x48 28) (not x1479)) x1479)) x942)))
(assert (x143 x219))
(assert (x143 x477))
(assert (x143 x979))
(assert (x143 x240))
(assert (x143 x23))
(assert (x143 x213))
(assert (= (=> (and (and (not (>= (+ x1162 x625) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x222 (+ x179 x1427)) x1368) (not (>= (+ x1427 x179) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x222 (+ x1162 x625)) x529) (= (< x1368 x529) x56) (= x179 (ite (< x1234 x802) x1234 x802))) (or (and (= 0 x141) x56) (and (and (= (x586 (- x1368 x529)) x203) (= x203 x141) (not (> x529 x1368))) (not x56)))) x1463) x757))
(assert (x143 x75))
(assert (x143 x827))
(assert (= x374 (and x793 x148)))
(assert (= (+ 1 (x1115 x660)) (x1115 (x93 x660 1))))
(assert (= (+ (x1115 x898) 1) (x1115 (x93 x898 1))))
(assert (x1083 x1101))
(assert (x143 x1238))
(assert (x143 x126))
(assert (x143 x628))
(assert (= x996 (=> (and (= (> x1383 0) x381) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x989) true) (< x989 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x989))) (= (x222 (+ x478 x1439)) x572) (= x478 (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x261)) (= (x222 (+ 31 x989)) x261) (not (= x1342 0)) (= x1439 x1193) (= x436 (x1107 x1193))) (and (=> (and (and (= (x938 1461501637330902918203684832716283019655932542975 x59) x699) (= (= 0 x699) x1248) (= x836 (x314 (x122 x603) (x205 1) 0)) (= (x432 x836) x59)) x381) (and (=> (and (and (or (and (and (= x1061 1) (> 4294967296 x959)) x627) (and (not x627) (= x1061 x1221))) (and (= (x1446 (x122 x1070)) x1147) (= (x938 1461501637330902918203684832716283019655932542975 x948) x1070) (= x780 x1203) (= (x432 (x205 0)) x948) (= (x222 (+ x572 4)) x780) (= (> x1221 0) x627) (not (= 0 x1147)))) x1248) x184) (=> (and (and (= x11 x699) (= x572 x267)) (not x1248)) x556))) (=> (and (not x381) (= 0 x1300)) x663)))))
(assert (= (and (not x900) x50) x997))
(assert (x143 x957))
(assert (x143 x1007))
(assert (= (and (not x173) x702) x510))
(assert (x143 x503))
(assert (x143 x599))
(assert (x143 x1169))
(assert (= x151 (and (not x334) x114)))
(assert (x143 x1027))
(assert (= x390 (and x475 x563)))
(assert (x143 x891))
(assert (x143 x850))
(assert (= 0 (x1352 x696)))
(assert (= (+ 1 (x1115 x166)) (x1115 (x93 x166 1))))
(assert (x143 x790))
(assert (x143 x436))
(assert (x524 x1100))
(assert (= x41 (and (not x518) x1144)))
(assert (= (=> (and (= x650 x1396) (= x1103 (x222 (+ x1027 31))) (not (or (> x1027 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x1027 32) (= (<= x1027 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= (x377 x1396) x218) (not (= 0 x1192)) (= (x222 (+ x650 x1059)) x918) (= (> x60 0) x1289) (= (x938 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1103) x1059)) (and (=> (and x1289 (and (= (x938 1461501637330902918203684832716283019655932542975 x1174) x1306) (= x1174 (x432 x489)) (= x943 (= 0 x1306)) (= (x314 (x122 x603) (x205 1) 0) x489))) (and (=> (and (not x943) (and (= x477 x918) (= x1306 x531))) x27) (=> (and (and (and (= x1336 x459) (= x1336 (x222 (+ 4 x918))) (= x1245 (x432 (x205 0))) (= x909 (< 0 x463)) (not (= 0 x240)) (= (x1446 (x122 x126)) x240) (= x126 (x938 1461501637330902918203684832716283019655932542975 x1245))) (or (and (= x1324 x463) (not x909)) (and (and (< x1237 4294967296) (= x1324 1)) x909))) x943) x15))) (=> (and (not x1289) (= x120 0)) x752))) x925))
(assert (= x169 (and (not x909) x1093)))
(assert (x143 x1292))
(assert (= (=> (and (or x453 (and (not x453) (= x853 28))) (and (= (x1456 x1477) x777) (= (x1456 x417) x1160) (= (x1456 x1263) x873) (= (x222 (+ x393 x1263)) x822) (= (div x1286 32) x504) (= x853 (x937 x777 248)) (= x878 (x586 (- x990 32))) (= x804 (x222 (+ x1263 32))) (= (x1213 (x205 40) (x205 20) (x122 (x937 x283 96)) (x122 (x937 x285 96)) 0) x274) (= x453 (= x853 27)) (= x283 (x644 x1161 96)) (= (x586 (- x844 32)) x1030) (= x920 (x222 (+ 28 x617))) (= x839 (x222 (+ 20 x583))) (= (x1213 (x205 60) (x205 28) (x122 2661379305446904779734859349833089258949455794555359447896749126450) x274 0) x292) (= x844 (x586 (- x839 x703))) (= x1292 (x938 1461501637330902918203684832716283019655932542975 x1223)) (= x873 65) (= x1220 (mod (* 32 x504) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x222 (+ 20 x868)) x583) (= (x222 (+ 32 x839)) x175) (= x1160 x364) (= (x644 x1362 96) x285) (not (> x364 57896044618658097711785492504343953926418782139537452191302581570759080747168)) (= x183 (x222 (+ x790 x804))) (= (x938 1461501637330902918203684832716283019655932542975 x1223) x1362) (= x1286 (x222 (+ x790 31))) (= (x586 (- x1263 x839)) x990) (= x617 (x222 (+ x839 32))) (= x868 (x222 (+ 32 x703))) (= (x222 (+ x804 32)) x417) (= x1263 (x222 (+ x920 32))) (= (x222 (+ 32 x417)) x1477) (= x865 (x1456 x804)) (= (x222 (+ 32 x1220)) x393) (= x817 0))) x849) x506))
(assert (= (x1352 x729) 0))
(assert (= x171 (and x537 x209)))
(assert (= (and x523 x1287) x79))
(assert (x1083 (x937 x705 96)))
(assert (= (=> (= x547 x742) x549) x1249))
(assert (x143 x983))
(assert (x143 x102))
(assert (x143 x1415))
(assert (x143 x277))
(assert (x143 x1347))
(assert (x143 x699))
(assert (x143 x1063))
(assert (= (x1115 (x122 x269)) x269))
(assert (= (=> (and (or x177 (not x177)) (= x177 (= x1445 0))) x373) x1309))
(assert (=> (>= 10000 x615) (= (x205 x615) (x122 x615))))
(assert (= (and x1284 x782) x643))
(assert (= x655 (and x406 x384)))
(assert (= (or x1006 x108) x1373))
(assert (= x1144 (and x608 x1198)))
(assert (= (x644 x1161 96) (mod (* 79228162514264337593543950336 x1161) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (=> (and (or (and (and (> 4294967296 x1027) (= x1192 1)) x117) (and (not x117) (= x1192 x451))) (and (= x1398 (x1446 (x122 x1442))) (not (= x1398 0)) (= (< 0 x451) x117))) x925) x875))
(assert (x143 x1315))
(assert (x143 x500))
(assert (= (or x1481 x119) x523))
(assert (x143 x1044))
(assert (x143 x161))
(assert (= (x122 57896044618658097711785492504343953926418782139537452191302581570759080747168) (x205 57896044618658097711785492504343953926418782139537452191302581570759080747168)))
(assert (x143 x622))
(assert (= (and x1305 (not x480)) x1040))
(assert (x143 x1062))
(assert (x143 x1366))
(assert (x524 x293))
(assert (= (and x734 (not x279)) x24))
(assert (= (and (not x641) x758) x68))
(assert (= (x1080 (x222 (+ x653 64))) 0))
(assert (x143 x882))
(assert (= x756 (x122 (x1115 x756))))
(assert (x143 x1403))
(assert (x423 x1013))
(assert (= x113 (=> (= (> x132 x716) x1206) (and (=> (and (= x440 x1261) (not x1206)) x1429) (=> x1206 x973)))))
(assert (x143 x554))
(assert (= (x1115 (x122 x520)) x520))
(assert (= (+ (x1115 x1437) 1) (x1115 (x93 x1437 1))))
(assert (= (or x4 x1373 x428 x164) x676))
(assert (= x482 (x122 (x1115 x482))))
(assert (x143 x1203))
(assert (x143 x1216))
(assert (x143 x806))
(assert (x143 x977))
(assert (x524 x948))
(assert (x143 x1181))
(assert (x143 x649))
(assert (x524 x908))
(assert (= (or x244 x1025) x1231))
(assert (x143 x844))
(assert (x143 x74))
(assert (x143 x410))
(assert (=> (<= x213 10000) (= (x122 x213) (x205 x213))))
(assert (x143 x1241))
(assert (x143 x168))
(assert (x143 x1215))
(assert (= x38 (and x1411 (not x1045))))
(assert (x143 x303))
(assert (x143 x198))
(assert (= (and x38 x43) x1025))
(assert (x143 x920))
(assert (x143 x1283))
(assert (= (or x838 x171) x870))
(assert (x143 x452))
(assert (x143 x661))
(assert (x143 x247))
(assert (= x672 (and x1122 x217)))
(assert (x143 x966))
(assert (x143 x1370))
(assert (x143 x1475))
(assert (x143 x204))
(assert (x524 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x143 x211))
(assert (= x494 (or x188 x227)))
(assert (x143 x1048))
(assert (= (+ 2 (x1115 x1420)) (x1115 (x93 x1420 2))))
(assert (= (x1115 (x93 x921 1)) (+ 1 (x1115 x921))))
(assert (= x193 (and x441 x1150)))
(assert (x143 x732))
(assert (= x1031 (and x445 x981)))
(assert (x143 x1405))
(assert (= (x205 2801674539) (x122 2801674539)))
(assert (= (+ (x1115 x1143) 1) (x1115 (x93 x1143 1))))
(assert (x1083 x781))
(assert (= (and x1451 (not x302)) x105))
(assert (x143 x509))
(assert (x143 x1448))
(assert (x597 x425))
(assert (= (x1115 (x205 107954783943672036892603255375593993710912147498776614820764573710931487358976)) 107954783943672036892603255375593993710912147498776614820764573710931487358976))
(assert (= (+ (x1115 x1235) 1) (x1115 (x93 x1235 1))))
(assert (= (+ 1 (x1115 x1450)) (x1115 (x93 x1450 1))))
(assert (= (x937 x1465 96) (x1115 (x122 (x937 x1465 96)))))
(assert (= (x1115 (x122 x615)) x615))
(assert (x143 x971))
(assert (= (x1115 (x93 x58 1)) (+ (x1115 x58) 1)))
(assert (= (or x857 x1004) x537))
(assert (x1083 x247))
(assert (x143 x1472))
(assert (x143 x529))
(assert (x524 x511))
(assert (x143 x685))
(assert (= x27 (=> (= (= 0 x531) x387) (and (=> (and (not x387) (and (and (= x67 (> x468 0)) (= x178 x1166) (= (x222 (+ x477 4)) x1166) (not (= x255 0)) (= (x1446 (x122 x531)) x255)) (or (not x67) (and x67 (and x1242 (= x532 (x232 (x122 x1191))) (< x433 4294967296) (= x1123 (= (x536 (x122 x531)) x594)) (= x1242 (>= (x536 (x122 x1191)) x532)) (= (x232 (x122 x531)) x594) x1123))))) x1208) (=> (and (= x522 0) x387) x753)))))
(assert (x143 x465))
(assert (= x332 (=> (and (or (and (not x563) (= x564 x1254)) (and (and (= 1 x564) (> 4294967296 x1358)) x563)) (and (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x317) (and (> 160 x317) (= (<= x317 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x790 (x811 x831)) (= x554 x60) (= x1315 x1276) (= x13 (not (= x321 x598))) (and (= true (<= x39 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x39 163)) (= x83 x1266) (= (x586 (- x39 4)) x317) (not (< x39 4)) (< x216 3219105711) (not (> x790 18446744073709551615)) (= x610 x781) (not (> 2543820636 x216)) (= x561 x1395) (= x1161 x1390) (= (x222 (+ 31 x831)) x1403) (>= 1461501637330902918203684832716283019655932542975 x262) (not (< x216 2769337888)) (= x687 (x938 1461501637330902918203684832716283019655932542975 x89)) (= x458 x187) (= x367 (x222 (+ x790 x1452))) (= x831 (x222 (+ 4 x458))) (= x1161 x598) (>= 1461501637330902918203684832716283019655932542975 x669) (not (= 2769337888 x216)) (= x276 x1315) (= (x1446 (x122 x687)) x1099) (= x83 x262) (= x208 x1434) (= x580 false) (= x1223 x1343) (not (= x216 2794781754)) (>= 1461501637330902918203684832716283019655932542975 x1395) (<= x1223 1461501637330902918203684832716283019655932542975) (= (< 0 x1254) x563) (>= x476 0) (>= x1395 0) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x39) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1403)) (> x39 x1403)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1403) (<= x39 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x1099 0)) (<= 0 x262) (= x883 (x1446 (x122 x1191))) (>= x669 0) (= x781 x107) (= x1161 x669) (<= x476 1461501637330902918203684832716283019655932542975) (= x1452 (x222 (+ 32 x831))) (= x1434 0) (= x321 x1101) (= x204 x60) (< 0 x883) (= (x432 (x205 0)) x89) (= x486 true) (= x1135 x1223) (> 2974191442 x216) x13 (= 2801674539 x216) (not (< x39 x367)) (not (> x187 18446744073709551615)) (<= 0 x1390) (<= x1390 1461501637330902918203684832716283019655932542975))) x708)))
(assert (x143 x288))
(assert (x143 x417))
(assert (= (or x1386 x974) x1252))
(assert (x143 x250))
(assert (= (=> (and (= (x938 1461501637330902918203684832716283019655932542975 x1223) x1251) (= x280 x941) (= x772 (x938 1461501637330902918203684832716283019655932542975 x342)) (not (= x1251 0)) (= x342 (x432 x941)) x910 (= x488 (= 0 x772)) (= x269 (x938 1461501637330902918203684832716283019655932542975 x1223)) (= (x314 (x122 x269) (x205 15) 0) x280)) (and (=> (and (and (= x228 (x93 x280 3)) (= x634 (x432 x228)) (= x1021 (= 0 x634))) (not x488)) (and (=> (and (and (= x739 x703) (= x817 4)) x1021) x506) (=> (and (not x1021) (and (= x602 (x432 x1457)) (= (= x602 0) x165) (= x1457 (x93 x228 1)))) (and (=> (and (and (= x703 x739) (= x817 1)) x165) x506) (=> (and (and (= x1294 (x938 1461501637330902918203684832716283019655932542975 x1428)) (= x1428 (x432 x1288)) (= (= x1294 0) x915) (= (x314 (x122 x112) (x205 1) 0) x1288)) (not x165)) (and (=> (and (and (= x606 x739) (= x520 x1294)) (not x915)) x555) (=> (and (and (or (and (= x1041 x979) (not x721)) (and x721 (and (< x320 4294967296) (= x1041 1)))) (and (= (x1446 (x122 x75)) x794) (= (x938 1461501637330902918203684832716283019655932542975 x412) x75) (= x721 (> x979 0)) (not (= 0 x794)) (= x771 (x222 (+ 4 x739))) (= x18 x771) (= x412 (x432 (x205 0))))) x915) x422))))))) (=> (and x488 (and (= x817 0) (= x739 x703))) x506))) x755))
(assert (= (=> (and (= x348 x1101) (= (x314 (x122 x1312) (x205 15) 0) x36) (= x1408 (x93 x1244 1)) (= x1118 (x222 (+ x348 x720))) (= (x93 x798 1) x1077) (= (x93 x1077 1) x783) (= x148 (> x132 0)) (= x36 x84) (= x1188 (x93 x1408 1)) (= x720 (x938 115792089237316195423570985007226406215939081747436879206741300988257197096960 x102)) (= x102 (x1172 x84)) (= (x93 x36 1) x1139) (= x1244 (x93 x1139 1)) (= x798 (x93 x1188 1))) (and (=> (and (and (= x735 (x93 x1450 1)) (= x1450 (x314 (x122 x1101) (x205 14) 0)) (= x533 (< x82 x163)) (= x163 (x1474 x735)) (= (x222 (+ x163 x132)) x82)) x148) (and (=> x533 x973) (=> (and (not x533) (and (= x704 (x222 (+ x1131 x132))) (= (< x704 x1131) x1184) (= (x314 (x122 x1181) (x205 16) 0) x1239) (= x1131 (x1012 x1239)))) (and (=> x1184 x973) (=> (not x1184) x81))))) (=> (not x148) x81))) x549))
(assert (x1083 x112))
(assert (= (x1352 x94) 0))
(assert (= x985 (or x73 x86)))
(assert (= x1004 (and x263 x691)))
(assert (x143 x544))
(assert (= (and x142 x360) x1134))
(assert (= x135 (and x295 x1367)))
(assert (= (=> (or (not x812) x812) x243) x1210))
(assert (x143 x1032))
(assert (x143 x813))
(assert (= x365 (and x535 x105)))
(assert (x524 x1262))
(assert (x1083 x952))
(assert (x143 x1358))
(assert (= (and x1109 (not x560)) x1270))
(assert (= x1394 (x1115 (x122 x1394))))
(assert (= (=> (and (or (and (not x1320) (= x345 x809)) (and x1320 (and (= 1 x345) (< x960 4294967296)))) (and (not (= x156 0)) (= x1157 x542) (= (x1446 (x122 x520)) x156) (= x1157 (x222 (+ 4 x606))) (= x1320 (< 0 x809)))) x55) x555))
(assert (=> (>= 10000 (x937 x283 96)) (= (x122 (x937 x283 96)) (x205 (x937 x283 96)))))
(assert (x143 x433))
(assert (x143 x625))
(assert (x143 x614))
(assert (= x1198 (and x897 (not x333))))
(assert (= x227 (and x692 x832)))
(assert (x143 x1014))
(assert (= x527 (and x934 x1414)))
(assert (x143 x1435))
(assert (= x587 (and (not x117) x1257)))
(assert (x858 x10))
(assert (x143 x259))
(assert (x143 x353))
(assert (= x1176 (or x667 x773)))
(assert (x524 115792089237316195423570985007226406215939081747436879206741300988257197096960))
(assert (x143 x1394))
(assert (x1209 x342))
(assert (= (x937 x749 248) (div x749 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x143 x1201))
(assert (= x604 (and (not x1029) x226)))
(assert (x143 x874))
(assert (x143 x12))
(assert (x143 x349))
(assert (x597 x1100))
(assert (= x821 (and x820 (not x339))))
(assert (x1083 2661379305446904779734859349833089258949455794555359447896749126450))
(assert (x143 x1137))
(assert (x143 x948))
(assert (x143 x1277))
(assert (= (and x909 x1093) x843))
(assert (x143 x1339))
(assert (x143 x990))
(assert (x143 x163))
(assert (x524 x206))
(assert (= x1372 (and x1295 x1458)))
(assert (x143 x308))
(assert (= (x1115 (x122 x1007)) x1007))
(assert (= x894 (and x833 (not x812))))
(assert (= (x644 x1101 96) (mod (* 79228162514264337593543950336 x1101) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(check-sat)
(exit)