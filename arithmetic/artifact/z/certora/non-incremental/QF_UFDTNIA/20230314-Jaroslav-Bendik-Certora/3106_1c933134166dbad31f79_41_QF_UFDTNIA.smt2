(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x318 0)) (((x178 (x502 x318) (x157 x318) (x271 x318) (x337 x318) (x455 x318) (x41 x318) (x187 x318) (x493 Int)) (x594 (x363 x318) (x500 x318) (x661 x318) (x244 Int)) (x460 (x702 x318) (x573 x318) (x128 x318) (x482 x318) (x294 Int)) (x637 (x312 x318) (x405 x318) (x174 Int)) (x511 (x727 Int)) (x336 (x33 x318) (x742 x318) (x433 x318) (x138 x318) (x372 x318) (x377 x318) (x399 Int)) (x195 (x690 x318) (x385 Int)) (x31 (x355 x318) (x74 x318) (x676 x318) (x411 x318) (x162 x318) (x602 Int)))))
(declare-fun x543 () Int)
(declare-fun x327 () Int)
(declare-fun x463 () Bool)
(declare-fun x89 () Int)
(declare-fun x476 () Int)
(declare-fun x210 (x318) Int)
(declare-fun x708 () Bool)
(declare-fun x698 () Int)
(declare-fun x442 () Bool)
(declare-fun x351 () Int)
(declare-fun x793 (Int) Int)
(declare-fun x769 (Int) x318)
(declare-fun x640 () Int)
(declare-fun x237 () Int)
(declare-fun x673 () Bool)
(declare-fun x141 () Int)
(declare-fun x262 () Int)
(declare-fun x278 () Int)
(declare-fun x623 () Int)
(declare-fun x169 () Bool)
(declare-fun x34 () Int)
(declare-fun x382 () Bool)
(declare-fun x149 () Bool)
(declare-fun x561 () Int)
(declare-fun x817 () Bool)
(declare-fun x84 () Bool)
(declare-fun x781 () Bool)
(declare-fun x568 () Int)
(declare-fun x755 () Int)
(declare-fun x147 () Bool)
(declare-fun x426 () Bool)
(declare-fun x762 () Int)
(declare-fun x76 () Bool)
(declare-fun x671 () Int)
(declare-fun x7 () Bool)
(declare-fun x571 () Int)
(declare-fun x510 () Int)
(declare-fun x419 () Int)
(declare-fun x292 () Bool)
(declare-fun x193 () Bool)
(declare-fun x269 () Int)
(declare-fun x499 () Bool)
(declare-fun x522 () Bool)
(declare-fun x134 () Int)
(declare-fun x638 () Int)
(declare-fun x205 () Bool)
(declare-fun x785 () Int)
(declare-fun x173 () Int)
(declare-fun x515 () Int)
(declare-fun x592 (x318) Int)
(declare-fun x678 () Int)
(declare-fun x732 () Bool)
(declare-fun x153 () Int)
(declare-fun x121 (Int) Int)
(declare-fun x38 () Bool)
(declare-fun x538 () Int)
(declare-fun x443 () Int)
(declare-fun x344 () Bool)
(declare-fun x161 () Int)
(declare-fun x492 () Int)
(declare-fun x261 () Int)
(declare-fun x783 () Int)
(declare-fun x275 () Bool)
(declare-fun x770 () Bool)
(declare-fun x447 () Bool)
(declare-fun x451 () Bool)
(declare-fun x434 () Int)
(declare-fun x258 () Bool)
(declare-fun x756 () Int)
(declare-fun x264 () Int)
(declare-fun x738 () Bool)
(declare-fun x300 () Bool)
(declare-fun x636 () Bool)
(declare-fun x30 () Bool)
(declare-fun x816 () Bool)
(declare-fun x609 () Bool)
(declare-fun x158 () Int)
(declare-fun x282 () Int)
(declare-fun x71 () Bool)
(declare-fun x666 () Bool)
(declare-fun x744 () Bool)
(declare-fun x291 () Int)
(declare-fun x532 () Int)
(declare-fun x21 () Int)
(declare-fun x600 () x318)
(declare-fun x660 (Int Int) Int)
(declare-fun x396 () Int)
(declare-fun x120 () Bool)
(declare-fun x316 () Bool)
(declare-fun x154 () Bool)
(declare-fun x449 () Int)
(declare-fun x219 () Bool)
(declare-fun x720 () Bool)
(declare-fun x151 () Bool)
(declare-fun x530 () Int)
(declare-fun x627 () Int)
(declare-fun x348 () Int)
(declare-fun x650 () Int)
(declare-fun x503 () Bool)
(declare-fun x751 () Int)
(declare-fun x687 () Int)
(declare-fun x551 () Bool)
(declare-fun x118 () Bool)
(declare-fun x496 () Bool)
(declare-fun x733 () Bool)
(declare-fun x646 () Int)
(declare-fun x576 () Bool)
(declare-fun x306 () x318)
(declare-fun x165 () Int)
(declare-fun x767 () x318)
(declare-fun x375 () Int)
(declare-fun x384 () Bool)
(declare-fun x558 () Bool)
(declare-fun x578 () Bool)
(declare-fun x566 () Int)
(declare-fun x53 () Bool)
(declare-fun x305 () Bool)
(declare-fun x796 () Int)
(declare-fun x22 () Bool)
(declare-fun x658 () Bool)
(declare-fun x562 () Bool)
(declare-fun x519 () Int)
(declare-fun x163 () Int)
(declare-fun x159 () Bool)
(declare-fun x560 () Int)
(declare-fun x61 () Int)
(declare-fun x242 () Bool)
(declare-fun x345 () Bool)
(declare-fun x140 () Bool)
(declare-fun x745 () Bool)
(declare-fun x608 () Int)
(declare-fun x192 () Bool)
(declare-fun x196 () Int)
(declare-fun x129 () Bool)
(declare-fun x323 () Bool)
(declare-fun x310 () Int)
(declare-fun x91 () Int)
(declare-fun x238 () Bool)
(declare-fun x487 () Int)
(declare-fun x464 () Int)
(declare-fun x704 () Bool)
(declare-fun x206 () Int)
(declare-fun x656 () Bool)
(declare-fun x657 () Bool)
(declare-fun x810 () Bool)
(declare-fun x604 () Bool)
(declare-fun x172 () Bool)
(declare-fun x546 () Int)
(declare-fun x266 () Int)
(declare-fun x296 () Int)
(declare-fun x435 (Int) Int)
(declare-fun x507 () Int)
(declare-fun x800 () Int)
(declare-fun x421 () Int)
(declare-fun x497 () Bool)
(declare-fun x653 () Int)
(declare-fun x430 () Bool)
(declare-fun x531 () Int)
(declare-fun x683 () Bool)
(declare-fun x588 () Bool)
(declare-fun x212 () Int)
(declare-fun x96 () Int)
(declare-fun x805 () Int)
(declare-fun x450 () Bool)
(declare-fun x127 () Bool)
(declare-fun x281 () Int)
(declare-fun x710 () Int)
(declare-fun x559 () Bool)
(declare-fun x424 () Bool)
(declare-fun x668 () Bool)
(declare-fun x760 () Bool)
(declare-fun x184 (Int Int) Int)
(declare-fun x741 () Bool)
(declare-fun x782 () Bool)
(declare-fun x277 () Bool)
(declare-fun x456 () Bool)
(declare-fun x109 () Int)
(declare-fun x564 () x318)
(declare-fun x255 () Int)
(declare-fun x56 () Bool)
(declare-fun x643 () Bool)
(declare-fun x711 () Int)
(declare-fun x57 () Bool)
(declare-fun x773 () Int)
(declare-fun x216 () Bool)
(declare-fun x226 () Bool)
(declare-fun x106 () Int)
(declare-fun x67 () Bool)
(declare-fun x686 () Bool)
(declare-fun x641 () Bool)
(declare-fun x240 (x318) Int)
(declare-fun x759 () Bool)
(declare-fun x808 () Int)
(declare-fun x10 () Bool)
(declare-fun x395 () Bool)
(declare-fun x330 () Int)
(declare-fun x346 () Bool)
(declare-fun x601 () Int)
(declare-fun x659 () Bool)
(declare-fun x498 () Bool)
(declare-fun x518 () Bool)
(declare-fun x404 () Bool)
(declare-fun x501 () Int)
(declare-fun x626 () Bool)
(declare-fun x508 () Int)
(declare-fun x325 (x318) Int)
(declare-fun x488 () Bool)
(declare-fun x410 () Bool)
(declare-fun x786 () Bool)
(declare-fun x771 () Int)
(declare-fun x356 (x318) Int)
(declare-fun x572 () Bool)
(declare-fun x112 () Bool)
(declare-fun x624 () Bool)
(declare-fun x135 () Int)
(declare-fun x5 () Int)
(declare-fun x794 () Int)
(declare-fun x390 () Bool)
(declare-fun x648 () Int)
(declare-fun x713 () Bool)
(declare-fun x87 () Int)
(declare-fun x54 () Bool)
(declare-fun x779 () Bool)
(declare-fun x371 () Int)
(declare-fun x471 () Int)
(declare-fun x104 () Int)
(declare-fun x603 () Int)
(declare-fun x37 () Int)
(declare-fun x505 () Int)
(declare-fun x301 () Bool)
(declare-fun x606 (Int) Int)
(declare-fun x478 () Bool)
(declare-fun x313 () Int)
(declare-fun x814 () x318)
(declare-fun x35 () Int)
(declare-fun x712 () Bool)
(declare-fun x204 () Int)
(declare-fun x587 () Bool)
(declare-fun x825 (x318) Int)
(declare-fun x228 () Int)
(declare-fun x317 () Int)
(declare-fun x185 () Int)
(declare-fun x203 () Int)
(declare-fun x280 () Bool)
(declare-fun x806 () Bool)
(declare-fun x611 () Int)
(declare-fun x470 () Int)
(declare-fun x787 () Int)
(declare-fun x617 () Bool)
(declare-fun x481 () Bool)
(declare-fun x791 () Bool)
(declare-fun x599 () Int)
(declare-fun x749 () Bool)
(declare-fun x479 () x318)
(declare-fun x4 () Int)
(declare-fun x466 () Int)
(declare-fun x145 () Bool)
(declare-fun x231 () Bool)
(declare-fun x155 () Int)
(declare-fun x62 () Int)
(declare-fun x332 () Int)
(declare-fun x230 () Bool)
(declare-fun x824 () Bool)
(declare-fun x457 () Int)
(declare-fun x11 () Bool)
(declare-fun x412 () Int)
(declare-fun x150 () Int)
(declare-fun x642 () Int)
(declare-fun x730 () Bool)
(declare-fun x649 () Int)
(declare-fun x790 () x318)
(declare-fun x358 () Int)
(declare-fun x217 () Int)
(declare-fun x504 () Bool)
(declare-fun x314 () Bool)
(declare-fun x304 () Int)
(declare-fun x295 () Bool)
(declare-fun x714 () Int)
(declare-fun x362 () Int)
(declare-fun x684 () Int)
(declare-fun x402 () Int)
(declare-fun x597 () Bool)
(declare-fun x284 () Bool)
(declare-fun x689 () Int)
(declare-fun x621 () Int)
(declare-fun x320 () Int)
(declare-fun x526 () Int)
(declare-fun x77 () Int)
(declare-fun x48 () Int)
(declare-fun x752 () Bool)
(declare-fun x365 () Bool)
(declare-fun x610 () Int)
(declare-fun x775 () Int)
(declare-fun x213 () Int)
(declare-fun x721 () Bool)
(declare-fun x465 () Bool)
(declare-fun x735 () Int)
(declare-fun x180 () Bool)
(declare-fun x285 () Int)
(declare-fun x407 () Bool)
(declare-fun x308 () Int)
(declare-fun x338 () Bool)
(declare-fun x373 () Int)
(declare-fun x644 () Bool)
(declare-fun x670 () Bool)
(declare-fun x513 () Int)
(declare-fun x222 () Bool)
(declare-fun x63 () Bool)
(declare-fun x454 () Bool)
(declare-fun x669 () Int)
(declare-fun x533 () Bool)
(declare-fun x152 () Int)
(declare-fun x474 () Bool)
(declare-fun x792 () Int)
(declare-fun x298 (Int) Int)
(declare-fun x86 () Bool)
(declare-fun x615 () x318)
(declare-fun x750 () Bool)
(declare-fun x350 () Bool)
(declare-fun x516 () Bool)
(declare-fun x107 () Bool)
(declare-fun x357 () Bool)
(declare-fun x717 () Int)
(declare-fun x352 () Int)
(declare-fun x349 () Int)
(declare-fun x682 () Bool)
(declare-fun x489 () Bool)
(declare-fun x703 () Int)
(declare-fun x475 () Bool)
(declare-fun x85 () Int)
(declare-fun x198 () Int)
(declare-fun x777 () Bool)
(declare-fun x369 () x318)
(declare-fun x39 () Bool)
(declare-fun x567 () Int)
(declare-fun x667 () Bool)
(declare-fun x26 () Int)
(declare-fun x171 () Bool)
(declare-fun x160 () Int)
(declare-fun x527 () Bool)
(declare-fun x263 () Bool)
(declare-fun x448 () Int)
(declare-fun x19 () Bool)
(declare-fun x144 () Int)
(declare-fun x329 () Int)
(declare-fun x718 () Int)
(declare-fun x763 () Int)
(declare-fun x25 () Bool)
(declare-fun x700 () Bool)
(declare-fun x679 () x318)
(declare-fun x631 () Bool)
(declare-fun x225 () Bool)
(declare-fun x359 () Bool)
(declare-fun x100 () Int)
(declare-fun x401 () Bool)
(declare-fun x256 () Int)
(declare-fun x582 () Int)
(declare-fun x45 () Bool)
(declare-fun x459 () Bool)
(declare-fun x43 () Int)
(declare-fun x439 () Bool)
(declare-fun x27 () Bool)
(declare-fun x427 () Int)
(declare-fun x131 () Bool)
(declare-fun x802 () Int)
(declare-fun x674 () Bool)
(declare-fun x818 () Bool)
(declare-fun x693 () Bool)
(declare-fun x386 () Bool)
(declare-fun x557 () Bool)
(declare-fun x16 () Bool)
(declare-fun x807 () Int)
(declare-fun x197 () Bool)
(declare-fun x798 () Bool)
(declare-fun x211 () Int)
(declare-fun x645 () Int)
(declare-fun x462 () Int)
(declare-fun x524 () Bool)
(declare-fun x270 (x318) Int)
(declare-fun x692 () Bool)
(declare-fun x389 () Int)
(declare-fun x68 () Bool)
(declare-fun x553 () Int)
(declare-fun x754 () Int)
(declare-fun x799 () Bool)
(declare-fun x393 () Int)
(declare-fun x44 () Int)
(declare-fun x191 () Int)
(declare-fun x652 () Bool)
(declare-fun x575 () Bool)
(declare-fun x570 () Bool)
(declare-fun x81 () Bool)
(declare-fun x633 () Bool)
(declare-fun x299 () Bool)
(declare-fun x123 () Int)
(declare-fun x335 () Int)
(declare-fun x593 () Int)
(declare-fun x438 () Bool)
(declare-fun x146 () Int)
(declare-fun x491 () Bool)
(declare-fun x311 () Bool)
(declare-fun x545 () Int)
(declare-fun x590 () Int)
(declare-fun x381 () Int)
(declare-fun x119 () Int)
(declare-fun x125 () Int)
(declare-fun x403 () Int)
(declare-fun x273 () Int)
(declare-fun x774 () Int)
(declare-fun x289 () Bool)
(declare-fun x13 () Bool)
(declare-fun x328 () Bool)
(declare-fun x234 () Bool)
(declare-fun x701 () Int)
(declare-fun x581 () Bool)
(declare-fun x715 () Bool)
(declare-fun x425 () Int)
(declare-fun x50 () Int)
(declare-fun x249 () Int)
(declare-fun x93 () Bool)
(declare-fun x322 () Int)
(declare-fun x360 () Bool)
(declare-fun x753 () Int)
(declare-fun x250 () Int)
(declare-fun x826 () Bool)
(declare-fun x695 () Bool)
(declare-fun x73 (Int) Int)
(declare-fun x813 () Bool)
(declare-fun x415 (Int) Int)
(declare-fun x635 () Bool)
(declare-fun x75 () Int)
(declare-fun x632 (Int) Int)
(declare-fun x321 () Bool)
(declare-fun x616 () Int)
(declare-fun x223 () Int)
(declare-fun x528 () Bool)
(declare-fun x400 () Int)
(declare-fun x620 () Int)
(declare-fun x542 () Bool)
(declare-fun x215 (Int Int) Int)
(declare-fun x780 () Bool)
(declare-fun x288 () Bool)
(declare-fun x248 () Int)
(declare-fun x199 () Bool)
(declare-fun x267 () Int)
(declare-fun x398 () Int)
(declare-fun x467 () Bool)
(declare-fun x97 () x318)
(declare-fun x257 () Int)
(declare-fun x218 () x318)
(declare-fun x201 () Int)
(declare-fun x803 () Bool)
(declare-fun x484 () Bool)
(declare-fun x110 () Int)
(declare-fun x677 () Bool)
(declare-fun x181 () Int)
(declare-fun x1 () Bool)
(declare-fun x290 () Bool)
(declare-fun x688 () Bool)
(declare-fun x58 () Int)
(declare-fun x368 () Int)
(declare-fun x370 () Bool)
(declare-fun x177 () Bool)
(declare-fun x143 () Int)
(declare-fun x748 () Int)
(declare-fun x168 () Bool)
(declare-fun x628 () Bool)
(declare-fun x82 () Bool)
(declare-fun x514 () Int)
(declare-fun x3 () Bool)
(declare-fun x422 () Int)
(declare-fun x137 () Int)
(declare-fun x731 () Int)
(declare-fun x789 () Bool)
(declare-fun x220 () Bool)
(declare-fun x176 () Bool)
(declare-fun x102 () Bool)
(declare-fun x472 () Int)
(declare-fun x333 () Int)
(declare-fun x574 () Int)
(declare-fun x820 () Bool)
(declare-fun x2 () Bool)
(declare-fun x55 () Bool)
(declare-fun x105 () Int)
(declare-fun x417 () Bool)
(declare-fun x364 () Bool)
(declare-fun x164 () Bool)
(declare-fun x9 () Int)
(declare-fun x490 () Bool)
(declare-fun x132 () x318)
(declare-fun x681 () Bool)
(declare-fun x12 () Bool)
(declare-fun x259 () Int)
(declare-fun x797 () Bool)
(declare-fun x24 () Int)
(declare-fun x156 () Bool)
(declare-fun x117 () Bool)
(declare-fun x190 () Bool)
(declare-fun x441 () Bool)
(declare-fun x563 () x318)
(declare-fun x279 () Bool)
(declare-fun x665 () Int)
(declare-fun x354 () Bool)
(declare-fun x795 () Bool)
(declare-fun x719 () Int)
(declare-fun x585 () Bool)
(declare-fun x705 () Bool)
(declare-fun x452 () Bool)
(declare-fun x552 () Bool)
(declare-fun x268 () Bool)
(declare-fun x761 () Bool)
(declare-fun x245 () Bool)
(declare-fun x103 () Bool)
(declare-fun x361 () Bool)
(declare-fun x473 () Int)
(declare-fun x139 () Bool)
(declare-fun x809 () Bool)
(declare-fun x685 () Int)
(declare-fun x194 () Bool)
(declare-fun x544 () Int)
(declare-fun x672 () Bool)
(declare-fun x272 () Bool)
(declare-fun x440 () Bool)
(declare-fun x6 () Bool)
(declare-fun x78 () Bool)
(declare-fun x60 () Bool)
(declare-fun x65 (x318) Int)
(declare-fun x694 () Bool)
(declare-fun x227 () Bool)
(declare-fun x647 () Bool)
(declare-fun x722 (Int) Int)
(declare-fun x550 () Int)
(declare-fun x232 () Bool)
(declare-fun x29 () Bool)
(declare-fun x480 () Bool)
(declare-fun x116 () Int)
(declare-fun x111 () Bool)
(declare-fun x768 () x318)
(declare-fun x40 () Bool)
(declare-fun x536 () Bool)
(declare-fun x619 () Int)
(declare-fun x477 () Bool)
(declare-fun x583 () Bool)
(declare-fun x540 () Int)
(declare-fun x416 () Int)
(declare-fun x241 () Bool)
(declare-fun x758 () Int)
(declare-fun x366 () Bool)
(declare-fun x468 () Bool)
(declare-fun x556 () Bool)
(declare-fun x28 () Int)
(declare-fun x367 () Int)
(declare-fun x622 () Int)
(declare-fun x8 () Int)
(declare-fun x15 () Int)
(declare-fun x746 () Int)
(declare-fun x495 () Bool)
(declare-fun x764 () Int)
(declare-fun x589 () Bool)
(declare-fun x707 () Int)
(declare-fun x379 () Int)
(declare-fun x101 () Bool)
(declare-fun x506 () Bool)
(declare-fun x549 () Bool)
(declare-fun x253 () Bool)
(declare-fun x324 (Int Int) Int)
(declare-fun x639 () Int)
(declare-fun x630 () Bool)
(declare-fun x555 () Bool)
(declare-fun x584 () Int)
(declare-fun x625 () Bool)
(declare-fun x47 () Bool)
(declare-fun x236 () Int)
(declare-fun x200 () Bool)
(declare-fun x579 () Bool)
(declare-fun x577 () Bool)
(declare-fun x406 () Bool)
(declare-fun x529 () Bool)
(declare-fun x182 () Bool)
(declare-fun x729 () Int)
(declare-fun x221 () Bool)
(declare-fun x418 () Int)
(declare-fun x612 () Int)
(declare-fun x83 () Bool)
(declare-fun x136 () Bool)
(declare-fun x629 () Int)
(declare-fun x784 () Bool)
(declare-fun x655 () Bool)
(declare-fun x444 () x318)
(declare-fun x437 () Bool)
(declare-fun x812 () Bool)
(declare-fun x23 () Int)
(declare-fun x483 () Bool)
(declare-fun x114 () Bool)
(declare-fun x494 () Bool)
(declare-fun x548 () Bool)
(declare-fun x115 () Bool)
(declare-fun x397 () Bool)
(declare-fun x716 () Bool)
(declare-fun x736 (x318) Int)
(declare-fun x207 () Bool)
(declare-fun x725 () Int)
(declare-fun x512 () Int)
(declare-fun x821 () Int)
(declare-fun x446 () Int)
(declare-fun x80 () Int)
(declare-fun x254 () Int)
(declare-fun x458 () Bool)
(declare-fun x675 () Bool)
(declare-fun x347 () Bool)
(declare-fun x521 () Int)
(declare-fun x431 () Bool)
(declare-fun x307 () Int)
(declare-fun x388 () Int)
(declare-fun x535 () Bool)
(declare-fun x276 () Bool)
(declare-fun x634 () Int)
(declare-fun x696 () Int)
(declare-fun x409 () Bool)
(declare-fun x537 () Int)
(declare-fun x243 () Bool)
(declare-fun x315 () Bool)
(declare-fun x334 () Bool)
(declare-fun x302 () Bool)
(declare-fun x485 () Bool)
(declare-fun x607 () Bool)
(declare-fun x547 () Bool)
(declare-fun x801 () Bool)
(declare-fun x239 () Bool)
(declare-fun x662 () Int)
(declare-fun x778 () Bool)
(declare-fun x46 () Int)
(declare-fun x202 () Int)
(declare-fun x246 () Bool)
(declare-fun x392 () Bool)
(declare-fun x776 () Bool)
(declare-fun x394 () Int)
(declare-fun x469 () Int)
(declare-fun x815 () Bool)
(declare-fun x691 () Int)
(declare-fun x728 () Bool)
(declare-fun x260 () Bool)
(declare-fun x208 () Bool)
(declare-fun x517 () Int)
(declare-fun x233 () Bool)
(declare-fun x188 () Int)
(declare-fun x387 () Bool)
(declare-fun x461 () Bool)
(declare-fun x52 () Int)
(declare-fun x723 () Int)
(declare-fun x214 () Bool)
(declare-fun x743 () Bool)
(declare-fun x453 () Bool)
(declare-fun x66 () Bool)
(declare-fun x772 () Bool)
(declare-fun x283 () Int)
(declare-fun x49 () Bool)
(declare-fun x811 () Int)
(declare-fun x42 () Int)
(declare-fun x586 () Bool)
(declare-fun x251 () Int)
(declare-fun x664 () Bool)
(declare-fun x614 () Bool)
(declare-fun x148 () Bool)
(declare-fun x209 () Bool)
(declare-fun x186 () Int)
(declare-fun x374 () Int)
(declare-fun x724 () Bool)
(declare-fun x79 () Bool)
(declare-fun x697 () Bool)
(declare-fun x740 () Bool)
(declare-fun x353 () Bool)
(declare-fun x130 () Int)
(declare-fun x651 () Bool)
(declare-fun x343 () Bool)
(declare-fun x432 () Int)
(declare-fun x605 () Int)
(declare-fun x72 () Int)
(declare-fun x297 () Int)
(declare-fun x414 () Bool)
(define-fun x326 ((x318 x318) (x32 Int)) x318 (ite ((_ is x178) x318) (x178 (x502 x318) (x157 x318) (x271 x318) (x337 x318) (x455 x318) (x41 x318) (x187 x318) (+ x32 (x493 x318))) (ite ((_ is x336) x318) (x336 (x33 x318) (x742 x318) (x433 x318) (x138 x318) (x372 x318) (x377 x318) (+ (x399 x318) x32)) (ite ((_ is x31) x318) (x31 (x355 x318) (x74 x318) (x676 x318) (x411 x318) (x162 x318) (+ (x602 x318) x32)) (ite ((_ is x460) x318) (x460 (x702 x318) (x573 x318) (x128 x318) (x482 x318) (+ (x294 x318) x32)) (ite ((_ is x594) x318) (x594 (x363 x318) (x500 x318) (x661 x318) (+ x32 (x244 x318))) (ite ((_ is x195) x318) (x195 (x690 x318) (+ x32 (x385 x318))) (ite ((_ is x637) x318) (x637 (x312 x318) (x405 x318) (+ x32 (x174 x318))) (x511 (+ (x727 x318) x32))))))))))
(define-fun x391 ((x122 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x122) (<= 0 x122)) x122 (- x122 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x339 ((x122 Int)) Int (ite (and (< x122 0) (>= x122 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x122) x122))
(define-fun x726 ((x436 Int)) Bool (and (>= x436 0) (< x436 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x765 ((x436 Int)) Bool (and (= (x184 x436 115792089237316195423570985008687907853269984665640564039457584007913129639935) x436) (= (x184 115792089237316195423570985008687907853269984665640564039457584007913129639935 x436) x436)))
(define-fun x36 ((x436 Int)) Bool (and (= 0 (x184 0 x436)) (= 0 (x184 x436 0))))
(define-fun x613 ((x436 Int)) Bool (= x436 (x184 x436 x436)))
(define-fun x331 ((x436 Int)) Bool (and (x36 x436) (x765 x436) (x613 x436)))
(define-fun x303 ((x436 Int) (x17 Int)) Bool (= (x184 x436 x17) (x184 x17 x436)))
(define-fun x92 ((x436 Int) (x17 Int)) Bool (and (=> (<= 0 x436) (<= (x184 x436 x17) x436)) (=> (>= x17 0) (>= x17 (x184 x436 x17))) (>= (x184 x436 x17) 0)))
(define-fun x618 ((x436 Int) (x17 Int)) Bool (and (x303 x436 x17) (x92 x436 x17)))
(define-fun x819 ((x436 Int)) Bool (= (mod x436 1461501637330902918203684832716283019655932542976) (x184 x436 1461501637330902918203684832716283019655932542975)))
(define-fun x747 ((x436 Int)) Bool (and (x819 x436) (x618 x436 1461501637330902918203684832716283019655932542975)))
(define-fun x341 ((x436 Int)) Bool (= (+ (x184 x436 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x436 32)) (mod x436 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x95 ((x436 Int)) Bool (and (x618 x436 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x341 x436)))
(define-fun x274 ((x436 Int)) Bool (= (mod x436 131072) (+ (x184 x436 65536) (mod x436 65536))))
(define-fun x766 ((x436 Int)) Bool (and (x618 x436 65536) (x274 x436)))
(define-fun x539 ((x436 Int)) Bool (= (mod x436 262144) (+ (mod x436 131072) (x184 x436 131072))))
(define-fun x224 ((x436 Int)) Bool (and (x539 x436) (x618 x436 131072)))
(define-fun x737 ((x436 Int)) Bool (= (mod x436 2) (x184 x436 1)))
(define-fun x596 ((x436 Int)) Bool (and (x618 x436 1) (x737 x436)))
(define-fun x591 ((x436 Int)) Bool (= (x184 x436 127) (mod x436 128)))
(define-fun x113 ((x436 Int)) Bool (and (x591 x436) (x618 x436 127)))
(define-fun x64 ((x436 Int)) Bool (= (+ (mod x436 4) (x184 x436 4)) (mod x436 8)))
(define-fun x423 ((x436 Int)) Bool (and (x64 x436) (x618 x436 4)))
(define-fun x520 ((x436 Int)) Bool (= (mod x436 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x184 x436 115792089210356248756420345214020892766250353992003419616917011526809519390720) (mod x436 26959946667150639794667015087019630673637144422540572481103610249216))))
(define-fun x309 ((x436 Int)) Bool (and (x520 x436) (x618 x436 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(define-fun x90 ((x436 Int)) Bool (= (x184 x436 18446744073709551615) (mod x436 18446744073709551616)))
(define-fun x376 ((x436 Int)) Bool (and (x90 x436) (x618 x436 18446744073709551615)))
(define-fun x739 ((x436 Int)) Bool (= (mod x436 4294967296) (x184 x436 4294967295)))
(define-fun x378 ((x436 Int)) Bool (and (x618 x436 4294967295) (x739 x436)))
(define-fun x59 ((x680 Int)) Int (x298 x680))
(define-fun x598 ((x680 Int)) Int (ite (= 128 x680) x653 (x793 x680)))
(define-fun x319 ((x680 Int)) Int (ite (and (<= 160 x680) (> (+ 160 x653) x680)) (x298 (+ x719 (- x680 160))) (x598 x680)))
(define-fun x408 ((x680 Int)) Int (ite (= x21 x680) 0 (x319 x680)))
(define-fun x286 ((x680 Int)) Int (x606 x680))
(define-fun x20 ((x680 Int)) Int (ite (= 128 x680) x640 (x121 x680)))
(define-fun x175 ((x680 Int)) Int (ite (and (<= 160 x680) (< x680 (+ 160 x640))) (x606 (+ x545 (- x680 160))) (x20 x680)))
(define-fun x525 ((x680 Int)) Int (ite (= x680 x466) 0 (x175 x680)))
(define-fun x804 ((x680 Int)) Int (ite (= x783 x680) x262 (x408 x680)))
(define-fun x580 ((x680 Int)) Int (ite (= x680 x662) x543 (x804 x680)))
(define-fun x709 ((x680 Int)) Int (ite (= x680 x517) x5 (x580 x680)))
(define-fun x124 ((x680 Int)) Int (ite (= x680 x662) x267 (x804 x680)))
(define-fun x340 ((x680 Int)) Int (ite x194 (x804 x680) (ite x154 (ite x7 (x580 x680) (x709 x680)) (x124 x680))))
(define-fun x699 ((x680 Int)) Int (ite x816 (x340 x680) (x408 x680)))
(define-fun x293 ((x680 Int)) Int (ite (= x680 x627) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x699 x680)))
(define-fun x445 ((x680 Int)) Int (ite (= x680 x266) (x240 x444) (x293 x680)))
(define-fun x788 ((x680 Int)) Int (ite (and (> (+ x627 32) x680) (>= x680 x627)) (x73 (+ 0 (- x680 x627))) (x445 x680)))
(define-fun x380 ((x680 Int)) Int (ite x424 (x788 x680) (x445 x680)))
(define-fun x108 ((x680 Int)) Int (ite x299 (x380 x680) (x699 x680)))
(define-fun x663 ((x680 Int)) Int (ite (= x505 x680) x756 (x108 x680)))
(define-fun x14 ((x680 Int)) Int (ite (= x808 x680) x373 (x663 x680)))
(define-fun x142 ((x680 Int)) Int (ite (= x505 x680) 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x14 x680)))
(define-fun x229 ((x680 Int)) Int (ite (= x593 x680) x204 (x142 x680)))
(define-fun x179 ((x680 Int)) Int (ite (= x774 x680) x394 (x229 x680)))
(define-fun x822 ((x680 Int)) Int (ite (= x680 x388) x756 (x179 x680)))
(define-fun x133 ((x680 Int)) Int (ite (= x729 x680) x373 (x822 x680)))
(define-fun x69 ((x680 Int)) Int (ite (= x501 x680) 160 (x133 x680)))
(define-fun x70 ((x680 Int)) Int (ite (= x362 x680) x106 (x69 x680)))
(define-fun x342 ((x680 Int)) Int (ite (= x680 x72) x731 (x70 x680)))
(define-fun x167 ((x680 Int)) Int (ite (= x680 x422) x472 (x342 x680)))
(define-fun x265 ((x680 Int)) Int (ite (= x680 x432) x746 (x167 x680)))
(define-fun x189 ((x680 Int)) Int (ite (= x680 x684) x320 (x265 x680)))
(define-fun x413 ((x680 Int)) Int (ite x576 (x265 x680) (ite x145 (x167 x680) (ite x733 (x342 x680) (ite x818 (x70 x680) (x189 x680))))))
(define-fun x554 ((x680 Int)) Int (ite (= x680 x711) 0 (x413 x680)))
(define-fun x523 ((x680 Int)) Int (ite (and (>= x680 x505) (> (+ 32 x505) x680)) (x722 (+ (- x680 x505) 0)) (x554 x680)))
(define-fun x534 ((x680 Int)) Int (ite x497 (x523 x680) (x554 x680)))
(define-fun x235 ((x680 Int)) Int (ite (= x680 x512) x710 (x525 x680)))
(define-fun x428 ((x680 Int)) Int (ite (= x603 x680) x649 (x235 x680)))
(define-fun x170 ((x680 Int)) Int (ite (= x352 x680) x665 (x428 x680)))
(define-fun x252 ((x680 Int)) Int (ite (= x603 x680) x537 (x235 x680)))
(define-fun x98 ((x680 Int)) Int (ite x245 (x235 x680) (ite x452 (ite x321 (x428 x680) (x170 x680)) (x252 x680))))
(define-fun x569 ((x680 Int)) Int (ite x536 (x98 x680) (x525 x680)))
(define-fun x757 ((x680 Int)) Int (ite (= x519 x680) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x569 x680)))
(define-fun x565 ((x680 Int)) Int (ite (= x680 x393) (x240 x767) (x757 x680)))
(define-fun x541 ((x680 Int)) Int (ite (and (>= x680 x519) (> (+ 32 x519) x680)) (x415 (+ (- x680 x519) 0)) (x565 x680)))
(define-fun x429 ((x680 Int)) Int (ite x197 (x541 x680) (x565 x680)))
(define-fun x287 ((x680 Int)) Int (ite x205 (x429 x680) (x569 x680)))
(define-fun x88 ((x680 Int)) Int (ite (= x680 x623) x638 (x287 x680)))
(define-fun x51 ((x680 Int)) Int (ite (= x257 x680) x443 (x88 x680)))
(define-fun x509 ((x680 Int)) Int (ite (= x680 x623) 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x51 x680)))
(define-fun x383 ((x680 Int)) Int (ite (= x680 x261) x584 (x509 x680)))
(define-fun x823 ((x680 Int)) Int (ite (= x561 x680) x448 (x383 x680)))
(define-fun x18 ((x680 Int)) Int (ite (= x680 x217) x638 (x823 x680)))
(define-fun x126 ((x680 Int)) Int (ite (= x44 x680) x443 (x18 x680)))
(define-fun x166 ((x680 Int)) Int (ite (= x203 x680) 160 (x126 x680)))
(define-fun x706 ((x680 Int)) Int (ite (= x680 x464) x620 (x166 x680)))
(define-fun x486 ((x680 Int)) Int (ite (= x680 x62) x703 (x706 x680)))
(define-fun x734 ((x680 Int)) Int (ite (= x163 x680) x402 (x486 x680)))
(define-fun x94 ((x680 Int)) Int (ite (= x206 x680) x50 (x734 x680)))
(define-fun x420 ((x680 Int)) Int (ite (= x249 x680) x796 (x94 x680)))
(define-fun x595 ((x680 Int)) Int (ite x295 (x94 x680) (ite x305 (x734 x680) (ite x93 (x486 x680) (ite x795 (x706 x680) (x420 x680))))))
(define-fun x654 ((x680 Int)) Int (ite (= x680 x802) 0 (x595 x680)))
(define-fun x99 ((x680 Int)) Int (ite (and (<= x623 x680) (< x680 (+ 32 x623))) (x632 (+ (- x680 x623) 0)) (x654 x680)))
(define-fun x247 ((x680 Int)) Int (ite x528 (x99 x680) (x654 x680)))
(define-fun x183 ((x436 Int)) Bool (=> (and (not (= x436 3951748400)) (not (= x436 65536)) (not (= x436 4001282680)) (not (= x436 3477112867)) (not (= x436 97199519776808029778168953285215024309695167179541945341261303444449322336256)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x436)) (not (= 4064428842 x436)) (> x436 10000) (not (= x436 3917867461)) (not (= 109562948294120585953088955926913691080166221410047079322077399086870164406272 x436)) (not (= x436 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x436 4294967295)) (not (= x436 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (not (= x436 131072)) (not (= x436 1666326814)) (not (= x436 7776000)) (not (= x436 4294967296)) (not (= x436 1461501637330902918203684832716283019655932542975)) (not (= 18446744073709551615 x436)) (not (= 3983562061 x436))) (not ((_ is x511) (x769 x436)))))
(assert (x747 x610))
(assert (x423 x264))
(assert (= x756 (x240 (x769 x756))))
(assert (=> (>= 10000 x571) (= (x769 x571) (x511 x571))))
(assert (x726 x756))
(assert (x726 x538))
(assert (= (and (not x442) x239) x67))
(assert (= x630 (and (not x409) x682)))
(assert (= x323 (and (not x750) x56)))
(assert (= (x769 1666326814) (x511 1666326814)))
(assert (x726 x449))
(assert (x726 x198))
(assert (x331 x251))
(assert (x726 x317))
(assert (= (=> (= x700 false) x677) x721))
(assert (x747 x152))
(assert (x726 x811))
(assert (= (x769 7776000) (x511 7776000)))
(assert (= x697 (and x275 x749)))
(assert (=> (<= (x98 (x391 (+ x601 192))) 10000) (= (x769 (x98 (x391 (+ x601 192)))) (x511 (x98 (x391 (+ x601 192)))))))
(assert (=> (<= (x98 (x391 (+ x601 32))) 10000) (= (x769 (x98 (x391 (+ x601 32)))) (x511 (x98 (x391 (+ 32 x601)))))))
(assert (x331 x273))
(assert (= (and x129 (not x559)) x474))
(assert (x726 x256))
(assert (x726 x5))
(assert (x726 x512))
(assert (= (or x549 x7) x154))
(assert (= (=> (or x700 (not x700)) x760) x677))
(assert (= x497 (and x290 x353)))
(assert (= (and x353 (not x290)) x426))
(assert (x183 x335))
(assert (= (=> (= x83 (= 1 x373)) (and (=> (and (and (= (x184 1461501637330902918203684832716283019655932542975 x37) x748) (= x468 (= x748 x374)) (= (x184 1461501637330902918203684832716283019655932542975 x4) x374)) x83) (and (=> (and (and (= x761 (< 0 x248)) (= (x339 (- x701 x52)) x248) (= x701 (x184 1461501637330902918203684832716283019655932542975 x4)) (= x52 (x184 1461501637330902918203684832716283019655932542975 x8))) x468) (and (=> (and (and (= x439 (< 0 x134)) (= (x391 (+ x85 (mod (x324 x212 160) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x333) (= x134 (x356 (x769 x531))) (= (x184 1461501637330902918203684832716283019655932542975 x8) x531) (= (x391 (+ (mod (x324 x173 192) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x333)) x717) (= x808 (x391 (+ 32 x505))) (= x212 (x184 4294967295 x125)) (= x85 (x184 1461501637330902918203684832716283019655932542975 x8))) x761) (and (=> (and x439 (and (= (x69 128) x106) (= (x391 (+ x774 32)) x388) (= (x184 1461501637330902918203684832716283019655932542975 x37) x394) (= x230 (> x106 0)) (= x362 (x391 (+ x593 160))) (= x729 (x391 (+ x388 32))) (= (x391 (+ x362 32)) x553) (= x593 (x391 (+ x505 4))) (= (x184 1461501637330902918203684832716283019655932542975 x8) x255) (= (x391 (+ 32 x729)) x501) (= (x391 (+ 32 x593)) x774))) (and (=> (not x230) x49) (=> (and x230 (and (= x72 x553) (= (> x106 32) x810) (= (x70 160) x731))) (and (=> (not x810) x49) (=> (and x810 (and (= x344 (< 64 x106)) (= (x391 (+ x553 32)) x422) (= (x342 192) x472))) (and (=> (and (and (= x746 (x167 224)) (= x432 (x391 (+ x553 64))) (= x347 (> x106 96))) x344) (and (=> (not x347) x49) (=> x347 x6))) (=> (not x344) x49))))))) (=> (not x439) x786))) (=> (not x761) x786))) (=> (not x468) x260))) (=> (not x83) x260))) x454))
(assert (x726 x785))
(assert (= x112 (or (and x635 x311) (and x199 x148))))
(assert (= 0 (x793 192)))
(assert (=> (<= (x340 (x391 (+ 192 x24))) 10000) (= (x769 (x340 (x391 (+ x24 192)))) (x511 (x340 (x391 (+ 192 x24)))))))
(assert (= (and x83 x744) x695))
(assert (= (and x214 (not x117)) x529))
(assert (x726 x584))
(assert (= (and x190 (not x209)) x193))
(assert (= 4294967296 (x240 (x511 4294967296))))
(assert (x726 x808))
(assert (x331 1461501637330902918203684832716283019655932542975))
(assert (x726 x519))
(assert (x726 x774))
(assert (x378 x125))
(assert (= (x340 (x391 (+ x24 192))) (x240 (x769 (x340 (x391 (+ 192 x24)))))))
(assert (x331 x610))
(assert (= x655 (and x114 x668)))
(assert (x766 x264))
(assert (= (and (not x617) x495) x171))
(assert (= x7 (and x483 (not x586))))
(assert (= (x240 (x769 (x340 (x391 (+ 64 x24))))) (x340 (x391 (+ 64 x24)))))
(assert (x726 x466))
(assert (x726 x505))
(assert (x726 x531))
(assert (= x791 (and x316 x624)))
(assert (x726 x783))
(assert (x726 x515))
(assert (= x284 (=> (and (= x114 (< x330 x104)) (= x330 (x391 (+ 1 x104)))) (and (=> (and (not x114) (and (= x444 x97) (= x691 x627))) x664) (=> x114 x260)))))
(assert (= (x121 256) 0))
(assert (x183 (x340 (x391 (+ 192 x24)))))
(assert (= 0 (x793 (x391 (+ 192 x24)))))
(assert (x331 x707))
(assert (= (and x456 (not x226)) x406))
(assert (= (x98 (x391 (+ x601 128))) (x240 (x769 (x98 (x391 (+ x601 128)))))))
(assert (= x667 (and (not x357) x82)))
(assert (x726 x473))
(assert (= (and x740 x79) x292))
(assert (x726 x537))
(assert (x183 x756))
(assert (= 0 (x793 256)))
(assert (x726 x105))
(assert (x726 x158))
(assert (x183 x470))
(assert (x331 x48))
(assert (= (and x230 x140) x542))
(assert (=> (<= x255 10000) (= (x511 x255) (x769 x255))))
(assert (x331 x37))
(assert (= (x240 (x511 1666326814)) 1666326814))
(assert (x726 x684))
(assert (= x778 (and x40 x289)))
(assert (= 0 (x121 192)))
(assert (x224 x751))
(assert (= (and x115 (not x25)) x242))
(assert (x726 x507))
(assert (= (or x670 x780) x752))
(assert (=> (>= 10000 x204) (= (x769 x204) (x511 x204))))
(assert (= 0 (x121 x601)))
(assert (x726 x394))
(assert (= (x793 (x391 (+ x24 96))) 0))
(assert (x726 x718))
(assert (= x744 (or (and x672 x478) (and x516 x704))))
(assert (= (and (not x27) x548) x93))
(assert (= (and x728 x474) x459))
(assert (= (or x302 x299) x401))
(assert (x726 x269))
(assert (x726 x612))
(assert (= x208 (and x172 x182)))
(assert (x726 x593))
(assert (= (x240 (x769 x449)) x449))
(assert (= (x240 (x769 x714)) x714))
(assert (= 4001282680 (x240 (x511 4001282680))))
(assert (= (x240 (x511 4064428842)) 4064428842))
(assert (= (x98 (x391 (+ x601 32))) (x240 (x769 (x98 (x391 (+ x601 32)))))))
(assert (= x528 (and x555 x431)))
(assert (x726 x144))
(assert (x726 x710))
(assert (= x410 (and x441 x112)))
(assert (x726 x352))
(assert (= (and x71 x490) x522))
(assert (= (and x131 (not x345)) x299))
(assert (x726 x608))
(assert (= x60 (or x67 x716)))
(assert (x726 x123))
(assert (x726 x307))
(assert (x726 x85))
(assert (x726 x645))
(assert (= (or x733 x145 x576 x818 x705) x353))
(assert (x726 x689))
(assert (= (or x207 x193) x300))
(assert (x726 x4))
(assert (x726 x639))
(assert (= (and (not x10) x798) x30))
(assert (x726 x501))
(assert (= x588 (or x604 x536)))
(assert (x726 x746))
(assert (= x812 (and x272 x503)))
(assert (x726 x201))
(assert (x331 4))
(assert (= x571 (x240 (x769 x571))))
(assert (x376 x329))
(assert (= (x340 (x391 (+ x24 160))) (x240 (x769 (x340 (x391 (+ 160 x24)))))))
(assert (= (=> (and (or (not x290) (and (and x177 (= x177 (<= x281 (x270 (x769 x143)))) x47 (= (x736 (x769 x143)) x281) (= x47 (= (x270 (x769 x255)) x476)) (< x696 4294967296) (= (x736 (x769 x255)) x476)) x290)) (and (= x290 (< 0 x398)) (= x711 (x391 (+ x106 x553))))) x151) x49))
(assert (x726 x723))
(assert (x726 x545))
(assert (x726 x329))
(assert (x726 x304))
(assert (x726 x181))
(assert (= (x769 18446744073709551615) (x511 18446744073709551615)))
(assert (x726 x188))
(assert (x726 x691))
(assert (= (and x301 (not x16)) x56))
(assert (x726 x764))
(assert (x726 x80))
(assert (x726 x62))
(assert (x726 x264))
(assert (x331 x191))
(assert (x726 x638))
(assert (= (x793 x24) 0))
(assert (= (or x708 x242) x390))
(assert (x726 x267))
(assert (= x732 (and x674 x292)))
(assert (= x633 (and (not x806) x68)))
(assert (x331 x152))
(assert (x726 x412))
(assert (= (mod (* x763 1461501637330902918203684832716283019655932542976) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x324 x763 160)))
(assert (x726 x100))
(assert (= x585 (or x693 x197)))
(assert (x726 x796))
(assert (= (=> (and (= x681 (<= x771 224)) (= x601 (x391 (+ x603 1)))) (and x681 (=> (= (ite (<= x771 32) (x195 (x769 (x98 x601)) 0) (ite (>= 64 x771) (x637 (x769 (x98 x601)) (x769 (x98 (x391 (+ 32 x601)))) 0) (ite (>= 96 x771) (x594 (x769 (x98 x601)) (x769 (x98 (x391 (+ x601 32)))) (x769 (x98 (x391 (+ x601 64)))) 0) (ite (>= 128 x771) (x460 (x769 (x98 x601)) (x769 (x98 (x391 (+ x601 32)))) (x769 (x98 (x391 (+ 64 x601)))) (x769 (x98 (x391 (+ 96 x601)))) 0) (ite (<= x771 160) (x31 (x769 (x98 x601)) (x769 (x98 (x391 (+ 32 x601)))) (x769 (x98 (x391 (+ x601 64)))) (x769 (x98 (x391 (+ 96 x601)))) (x769 (x98 (x391 (+ x601 128)))) 0) (ite (>= 192 x771) (x336 (x769 (x98 x601)) (x769 (x98 (x391 (+ 32 x601)))) (x769 (x98 (x391 (+ x601 64)))) (x769 (x98 (x391 (+ x601 96)))) (x769 (x98 (x391 (+ x601 128)))) (x769 (x98 (x391 (+ x601 160)))) 0) (ite (<= x771 224) (x178 (x769 (x98 x601)) (x769 (x98 (x391 (+ 32 x601)))) (x769 (x98 (x391 (+ 64 x601)))) (x769 (x98 (x391 (+ 96 x601)))) (x769 (x98 (x391 (+ 128 x601)))) (x769 (x98 (x391 (+ 160 x601)))) (x769 (x98 (x391 (+ x601 192)))) 0) (x769 x714)))))))) x814) x407))) x268))
(assert (x726 x283))
(assert (= x548 (and x437 x697)))
(assert (x331 x8))
(assert (= (x511 4064428842) (x769 4064428842)))
(assert (x726 x24))
(assert (x95 x123))
(assert (= x705 (and x347 x518)))
(assert (x726 x152))
(assert (= (and x759 x488) x483))
(assert (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x240 (x511 115792089210356248756420345214020892766250353992003419616917011526809519390720))))
(assert (= x557 (and x506 x3)))
(assert (= (or x453 x447) x692))
(assert (= x214 (or x154 x276 x194)))
(assert (= (x240 (x511 97199519776808029778168953285215024309695167179541945341261303444449322336256)) 97199519776808029778168953285215024309695167179541945341261303444449322336256))
(assert (x726 x492))
(assert (x726 x707))
(assert (x747 x37))
(assert (x726 x373))
(assert (x726 x792))
(assert (x726 x800))
(assert (x726 x748))
(assert (x726 x517))
(assert (x726 x106))
(assert (= x659 (and x720 x354)))
(assert (x331 65536))
(assert (x726 x266))
(assert (= (=> (and (= (x340 x783) x560) (= (> x560 0) x117)) (and (=> (not x117) x260) (=> (and x117 (and (= (< 0 x104) x10) (= x46 (x340 x662)) (= (x215 x46 248) x104))) (and (=> (and (and (= x538 (x391 (+ x104 1))) (= (< x35 x538) x227) (= x35 (x340 x783))) x10) (and (=> x227 x260) (=> (not x227) x776))) (=> (and (not x10) (= x97 (x511 0))) x284))))) x551))
(assert (x726 x434))
(assert (x726 x297))
(assert (=> (<= x304 10000) (= (x511 x304) (x769 x304))))
(assert (= x197 (and x575 x39)))
(assert (= (x511 1461501637330902918203684832716283019655932542975) (x769 1461501637330902918203684832716283019655932542975)))
(assert (x726 x510))
(assert (x726 x571))
(assert (x726 x471))
(assert (= 0 (x793 (x391 (+ 64 x24)))))
(assert (x183 (x340 x24)))
(assert (= x670 (and x220 x700)))
(assert (x726 x544))
(assert (= (and x390 x745) x704))
(assert (= (mod (* 6277101735386680763835789423207666416102355444464034512896 x173) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x324 x173 192)))
(assert (= (x511 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x769 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x89 (x240 (x769 x89))))
(assert (= x370 (or (and x475 (not x826)) (and (not x749) x275) x414)))
(assert (= (and (not x810) x542) x733))
(assert (x726 x755))
(assert (= (x240 (x769 (x98 (x391 (+ x601 192))))) (x98 (x391 (+ x601 192)))))
(assert (= x82 (and x583 (not x589))))
(assert (x726 x787))
(assert (= x818 (and (not x230) x140)))
(assert (= x302 (and x136 x169)))
(assert (= (and x60 x803) x199))
(assert (x596 x707))
(assert (x726 x422))
(assert (=> (>= 10000 x335) (= (x511 x335) (x769 x335))))
(assert (x726 x48))
(assert (x726 x530))
(assert (x726 x685))
(assert (= (and (not x651) x208) x139))
(assert (x726 x719))
(assert (x331 x100))
(assert (= (and x176 x392) x784))
(assert (= x531 (x240 (x769 x531))))
(assert (x726 x203))
(assert (x331 x751))
(assert (x726 x821))
(assert (= x780 (and (not x700) x220)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x240 (x511 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (and x219 (not x715)) x583))
(assert (= x801 (and x120 x359)))
(assert (= (and (not x740) x79) x216))
(assert (= (and x190 x209) x207))
(assert (= (=> (and (or (and (and (= x4 x188) (= x125 x751)) (not x673)) (and (and (= x4 (ite x107 0 x188)) (= 0 x125) (= (x184 65536 x751) x645) (= x107 (= 65536 x645))) x673)) (= x673 (< x173 x526))) x78) x430))
(assert (= (and x66 x809) x129))
(assert (x183 x255))
(assert (= x450 (and x25 x115)))
(assert (= x760 (=> (and (= x572 x700) (= x643 (not x328)) (= x328 (and x243 x504)) (= x686 x243) (= x504 x815) (= (not x572) x815)) x643)))
(assert (x726 x560))
(assert (x726 x508))
(assert (x726 x35))
(assert (= (=> (and (or (not x490) x490) (= (= 0 x398) x490)) x365) x151))
(assert (x726 x285))
(assert (x726 x249))
(assert (= (and x480 x625) x609))
(assert (= (x340 (x391 (+ x24 128))) (x240 (x769 (x340 (x391 (+ 128 x24)))))))
(assert (x726 x191))
(assert (x726 x669))
(assert (x331 x144))
(assert (=> (>= 10000 x714) (= (x769 x714) (x511 x714))))
(assert (= (or (and (not x439) x626) (and x533 (not x761)) x659) x334))
(assert (x726 x566))
(assert (x726 x273))
(assert (x726 x26))
(assert (= x253 (and x585 x81)))
(assert (x331 x123))
(assert (= (or x334 x263) x190))
(assert (x726 x248))
(assert (x726 x362))
(assert (= x365 (=> (= x730 (= 0 x398)) (and (=> x730 x260) (=> (and (= x277 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x696) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x696) true) (< x696 32)))) (not x730)) (and (=> (and (not x277) (and (= (= x141 x540) x658) (= (x184 115792089210356248756420345214020892766250353992003419616917011526809519390720 x540) x141) (= x540 (x534 x505)))) (and (=> (and x658 (and (= x354 (= x619 109562948294120585953088955926913691080166221410047079322077399086870164406272)) (= (x184 115792089210356248756420345214020892766250353992003419616917011526809519390720 x540) x619))) (and (=> (not x354) x260) (=> x354 x786))) (=> (not x658) x260))) (=> x277 x260)))))))
(assert (x726 x146))
(assert (x726 x665))
(assert (x309 x540))
(assert (x726 x443))
(assert (x726 x805))
(assert (= (=> (= (= (x511 0) x767) x118) (and (=> (and (and (= (x215 x775 192) x807) (= x519 x623)) x118) x417) (=> (and (not x118) (and (and (= x393 (x391 (+ 4 x519))) (= x39 (< 0 x237))) (or (and x39 (and (> 4294967296 x567) (= 1 x381))) (and (not x39) (= x237 x381))))) x232))) x314))
(assert (x726 x333))
(assert (= (x240 (x511 7776000)) 7776000))
(assert (= (x240 (x511 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x726 x398))
(assert (x331 x375))
(assert (= 0 (x121 (x391 (+ x601 192)))))
(assert (x183 x204))
(assert (= (x215 x775 192) (div x775 6277101735386680763835789423207666416102355444464034512896)))
(assert (= x533 (and x468 x695)))
(assert (x726 x698))
(assert (= (div x188 6277101735386680763835789423207666416102355444464034512896) (x215 x188 192)))
(assert (x747 x8))
(assert (x726 x91))
(assert (x726 x50))
(assert (x726 x211))
(assert (= 3917867461 (x240 (x511 3917867461))))
(assert (x309 x669))
(assert (= x465 (or x570 x770)))
(assert (=> (>= 10000 (x98 (x391 (+ 160 x601)))) (= (x511 (x98 (x391 (+ x601 160)))) (x769 (x98 (x391 (+ x601 160)))))))
(assert (= 0 (x121 (x391 (+ 128 x601)))))
(assert (= (x793 (x391 (+ 160 x24))) 0))
(assert (= (and x200 x103) x245))
(assert (x726 x75))
(assert (= (x340 (x391 (+ 32 x24))) (x240 (x769 (x340 (x391 (+ 32 x24)))))))
(assert (= (or x30 x221) x668))
(assert (x726 x561))
(assert (x726 x487))
(assert (x726 x257))
(assert (= x789 (and x465 x111)))
(assert (= x205 (and x633 (not x724))))
(assert (x331 18446744073709551615))
(assert (= x289 (or x382 x424)))
(assert (x747 x273))
(assert (= x777 (=> (and (>= 1461501637330902918203684832716283019655932542975 x787) (= x9 x610) (= x186 x198) (<= 0 x87) (>= 1461501637330902918203684832716283019655932542975 x821) (>= 1461501637330902918203684832716283019655932542975 x135) (>= x821 0) (<= x87 1461501637330902918203684832716283019655932542975) (= x209 x159) (and (= true (<= x358 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 163 x358)) (= x273 x375) (< 0 x285) (= (not x159) x686) (>= x787 0) x168 (= x135 x584) (>= x419 0) (>= 1461501637330902918203684832716283019655932542975 x419) (= x787 x584) (= x400 x278) (= x256 x755) (= x213 x443) (= x29 (= x96 0)) (= x419 x400) (= (not (= x198 x622)) x168) (= x638 x550) (<= 0 x135) (= x584 x622) (= x285 (x356 (x769 x143))) (= x821 x648)) (and (=> (and x29 (and (= 4064428842 x269) (not (< x358 4)) (not (= x269 3917867461)) (= x236 (x339 (- x358 4))) (not (= x269 3983562061)) (not (> 1666326814 x269)) (not (= x269 3951748400)) (not (< x269 3477112867)) (not (= x269 4001282680)) (= x581 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236) (and (> 160 x236) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236) true)))) (not (< x269 3917867461)))) (and (=> (and (not x581) (and (= (x184 1461501637330902918203684832716283019655932542975 x273) x508) (= (= x273 x508) x359))) (and (=> (and x359 (and (= x250 (x184 1461501637330902918203684832716283019655932542975 x9)) (= x499 (= x9 x250)))) (and (=> (and (and (= x211 x638) (= x226 (> x755 18446744073709551615))) x499) (and (=> x226 x547) (=> (and (not x226) (and (= x102 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x544) (<= x358 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x544 x358)) (and (<= x358 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x544)))) (= x544 (x391 (+ 31 x396))) (= x396 (x391 (+ x256 4))))) (and (=> (and (and (= (< 18446744073709551615 x640) x624) (= x640 (x606 x396)) (= (x391 (+ 32 x396)) x545)) x102) (and (=> x624 x547) (=> (and (not x624) (and (= x535 (< 18446744073709551615 x512)) (= x687 (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904 x367)) (= x597 (> 128 x512)) (= (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904 x611) x590) (= (x391 (+ 128 x590)) x512) (= (or x535 x597) x666) (= (x391 (+ x640 31)) x367) (= (= 0 (ite x666 1 0)) x409) (= x611 (x391 (+ x574 31))) (= (x391 (+ x687 32)) x574))) (and (=> (and (and (= (> x26 x358) x652) (= (x391 (+ x545 x640)) x26)) x409) (and (=> x652 x547) (=> (and (not x652) (and (= x466 (x391 (+ x640 160))) (= x16 (= x650 0)) (= x650 (x184 1461501637330902918203684832716283019655932542975 x610)))) (and (=> (and (and (= (x184 1461501637330902918203684832716283019655932542975 x375) x389) (= x750 (= x584 x389))) (not x16)) (and (=> (and (and (= (x637 (x769 x335) (x511 2) 0) x369) (= (x825 x564) x109) (>= x109 0) (= (x184 1461501637330902918203684832716283019655932542975 x375) x335) (= (x637 (x769 x584) x369 0) x564) (<= x109 255) (> 256 x109) (= (> x109 0) x481)) (not x750)) (and (=> x481 x84) (=> (not x481) x547))) (=> x750 x84))) (=> x16 x547))))) (=> (not x409) x547))))) (=> (not x102) x547))))) (=> (not x499) x547))) (=> (not x359) x547))) (=> x581 x547))) (=> (not x29) x547)))))
(assert (= x22 (and x56 x750)))
(assert (= x204 (x240 (x769 x204))))
(assert (= x452 (or x609 x321)))
(assert (x183 x638))
(assert (= 65536 (x240 (x511 65536))))
(assert (= (and x440 (not x338)) x716))
(assert (x726 x717))
(assert (x726 x368))
(assert (x726 x87))
(assert (x726 x711))
(assert (x726 x77))
(assert (= (and x720 (not x354)) x817))
(assert (x766 x125))
(assert (= (x511 3983562061) (x769 3983562061)))
(assert (x726 x42))
(assert (= (and x812 (not x579)) x343))
(assert (x726 x603))
(assert (x726 x58))
(assert (x726 x332))
(assert (x726 x648))
(assert (x726 x351))
(assert (x726 x89))
(assert (= (and x82 x357) x556))
(assert (x726 x634))
(assert (= (and x712 (not x277)) x233))
(assert (x183 x89))
(assert (x726 x470))
(assert (x331 x723))
(assert (= (x511 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x769 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (= x575 (and x588 (not x118))))
(assert (= (x121 160) 0))
(assert (= x693 (and (not x39) x575)))
(assert (x183 (x98 (x391 (+ 96 x601)))))
(assert (x726 x457))
(assert (= (x511 4001282680) (x769 4001282680)))
(assert (x726 x104))
(assert (= (or (and x386 x732) (and x456 x226) (and x477 x288) x2 (and x801 (not x499)) x253 x364 (and x76 x781) x384 (and x494 x652) x343 x791 x387 (and x68 x806) (and x581 x644) x813 x630 x216 x139 (and (not x182) x172) x404 x789 (and x300 (not x29)) (and (not x102) x406) x12 (and (not x359) x120) (and x112 (not x441))) x463))
(assert (x726 x616))
(assert (= x720 (and x658 x233)))
(assert (= (and (not x114) x668) x816))
(assert (x726 x44))
(assert (x726 x526))
(assert (= x164 (and x704 (not x516))))
(assert (x726 x729))
(assert (= (and x102 x406) x316))
(assert (x747 x9))
(assert (= x570 (and x732 (not x386))))
(assert (= 4294967295 (x240 (x511 4294967295))))
(assert (=> (<= (x340 (x391 (+ 160 x24))) 10000) (= (x511 (x340 (x391 (+ 160 x24)))) (x769 (x340 (x391 (+ x24 160)))))))
(assert (= (and (not x227) x13) x221))
(assert (= x275 (and x475 x826)))
(assert (x331 x669))
(assert (x726 x155))
(assert (= (or x22 (and x323 x481)) x503))
(assert (x331 x605))
(assert (x726 x335))
(assert (= 0 (x121 (x391 (+ 96 x601)))))
(assert (x224 x264))
(assert (x726 x621))
(assert (x726 x379))
(assert (= x795 (and x697 (not x437))))
(assert (x726 x46))
(assert (x726 x173))
(assert (= (x340 (x391 (+ x24 96))) (x240 (x769 (x340 (x391 (+ x24 96)))))))
(assert (x726 x52))
(assert (= (and (not x468) x695) x647))
(assert (= (and x798 x10) x13))
(assert (=> (<= x584 10000) (= (x511 x584) (x769 x584))))
(assert (= x6 (=> (and (= (not (< 128 x106)) x225) (= (x391 (+ 96 x553)) x684) (= x320 (x265 256))) (and x49 x225))))
(assert (= x491 (=> (and (= (x94 256) x796) (= (not (< 128 x620)) x741) (= (x391 (+ 96 x137)) x249)) (and x741 x57))))
(assert (x726 x143))
(assert (x378 x264))
(assert (= (x769 4294967295) (x511 4294967295)))
(assert (x95 x48))
(assert (= (and x316 (not x624)) x682))
(assert (x726 x250))
(assert (x726 x640))
(assert (x747 x375))
(assert (x726 x464))
(assert (= x644 (and x29 x300)))
(assert (= (and x208 x651) x414))
(assert (x726 x28))
(assert (x183 (x98 (x391 (+ x601 32)))))
(assert (= x456 (and x499 x801)))
(assert (x726 x8))
(assert (= (=> (and (= (x391 (+ x517 32)) x698) (= x5 (x210 x563)) (= (not (< x698 x616)) x820)) (and x820 x467)) x451))
(assert (= x772 (=> (and (= (x98 x512) x646) (= (> x646 0) x740)) (and (=> (and (and (= (< 0 x771) x674) (= x332 (x98 x603)) (= (x215 x332 248) x771)) x740) (and (=> (and x674 (and (= (x391 (+ x771 1)) x351) (= (> x351 x416) x386) (= x416 (x98 x512)))) (and (=> x386 x547) (=> (not x386) x268))) (=> (and (= (x511 0) x814) (not x674)) x407))) (=> (not x740) x547)))))
(assert (= (x769 (x240 x767)) x767))
(assert (= x404 (and (not x311) x635)))
(assert (x183 (x98 (x391 (+ x601 160)))))
(assert (x726 x540))
(assert (x113 x251))
(assert (x331 x264))
(assert (= (and x63 x458) x641))
(assert (x331 127))
(assert (= x772 x628))
(assert (= x238 (and x589 x583)))
(assert (= (and x410 (not x101)) x387))
(assert (x183 x143))
(assert (= x495 (or (and x667 x797) x556)))
(assert (x726 x110))
(assert (x726 x476))
(assert (= x614 (=> (and (<= 0 x61) (> x89 0) (not (= x689 x89)) (<= x143 1461501637330902918203684832716283019655932542975) (= false x11) (= x599 x487) (>= x202 0) (<= 0 x296) (= 5 x403) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196) true) (< 163 x196)) (= x153 x181) (= x582 x756) (>= 1461501637330902918203684832716283019655932542975 x202) (= (x736 (x769 x143)) x296) (= x186 x412) (= x291 x373) (< 0 x143) (= x577 false) (= x656 (< 0 (x356 (x769 x689)))) x19 (>= 1461501637330902918203684832716283019655932542975 x379) (= x642 x599) (= (< 0 (x356 (x769 x89))) x485) (<= 0 x642) (= x66 (= x80 0)) (= x446 x204) (< 0 x671) (= x105 x204) (<= 0 x110) x485 x683 (= x671 (x356 (x769 x143))) (= false x192) (>= x446 0) (<= 0 x186) (= (x736 (x769 x89)) x457) (not (= x143 x89)) (<= x186 1461501637330902918203684832716283019655932542975) (= x685 x202) (<= x612 1461501637330902918203684832716283019655932542975) (<= 0 x379) (<= x446 1461501637330902918203684832716283019655932542975) (= x725 4064428842) (= x37 x152) (not (= x143 x689)) (> x689 0) (<= 0 x612) (= x282 x8) (<= 0 x753) (<= 0 x457) (= (= x412 x105) x683) (<= x689 1461501637330902918203684832716283019655932542975) (<= x43 1461501637330902918203684832716283019655932542975) (<= x61 1461501637330902918203684832716283019655932542975) (= x484 false) (= x110 (x736 (x769 x689))) (>= x43 0) (>= 1461501637330902918203684832716283019655932542975 x753) (<= x642 1461501637330902918203684832716283019655932542975) x656 (= x204 x61) (>= 1461501637330902918203684832716283019655932542975 x89) (= x19 (> (x356 (x769 x143)) 0))) (and (=> (not x66) x260) (=> (and x66 (and (not (< x492 3477112867)) (= (x339 (- x196 4)) x634) (not (= 3917867461 x492)) (not (= x492 3951748400)) (= x559 (or (> x634 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 160 x634) (= (<= x634 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (not (> 4 x196)) (not (= 4001282680 x492)) (not (> 1666326814 x492)) (not (< x492 3917867461)) (not (= 3983562061 x492)) (= 4064428842 x492))) (and (=> x559 x260) (=> (and (and (= x728 (= x152 x469)) (= (x184 1461501637330902918203684832716283019655932542975 x152) x469)) (not x559)) (and (=> (not x728) x260) (=> (and (and (= x688 (= x282 x119)) (= x119 (x184 1461501637330902918203684832716283019655932542975 x282))) x728) (and (=> (and x688 (and (= x532 x756) (= x246 (< 18446744073709551615 x153)))) (and (=> (and (not x246) (and (= (x391 (+ x181 4)) x259) (= (or (and (< x621 x196) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x621) (<= x196 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x621 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196))) x350) (= (x391 (+ x259 31)) x621))) (and (=> (not x350) x260) (=> (and (and (= (x298 x259) x653) (= (x391 (+ x259 32)) x719) (= (> x653 18446744073709551615) x458)) x350) (and (=> (and (not x458) (and (= (or x45 x222) x631) (= (= (ite x631 1 0) 0) x461) (= x723 (x391 (+ x471 31))) (= (x391 (+ 128 x758)) x783) (= (< x783 128) x222) (= x521 (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904 x48)) (= x471 (x391 (+ 32 x521))) (= x45 (< 18446744073709551615 x783)) (= x48 (x391 (+ 31 x653))) (= (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904 x723) x758))) (and (=> (and x461 (and (= x754 (x391 (+ x719 x653))) (= x715 (> x754 x196)))) (and (=> x715 x260) (=> (and (not x715) (and (= x589 (= x718 0)) (= (x184 1461501637330902918203684832716283019655932542975 x8) x718) (= x21 (x391 (+ x653 160))))) (and (=> x589 x260) (=> (and (and (= x546 (x184 1461501637330902918203684832716283019655932542975 x37)) (= (= x546 x204) x357)) (not x589)) (and (=> x357 x361) (=> (and (and (< x254 256) (= x254 (x825 x600)) (= (> x254 0) x797) (= x470 (x184 1461501637330902918203684832716283019655932542975 x37)) (= x132 (x637 (x769 x470) (x511 2) 0)) (<= 0 x254) (>= 255 x254) (= x600 (x637 (x769 x204) x132 0))) (not x357)) (and (=> (not x797) x260) (=> x797 x361))))))))) (=> (not x461) x260))) (=> x458 x260))))) (=> x246 x260))) (=> (not x688) x260)))))))))))
(assert (= (and x483 x586) x549))
(assert (= x799 (=> (= x477 (= x434 0)) (and (=> x477 x547) (=> (and (not x477) (= x76 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x23) true) (> 32 x23)) (> x23 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (and (=> x76 x547) (=> (and (and (= (= x313 x669) x182) (= x669 (x247 x623)) (= (x184 115792089210356248756420345214020892766250353992003419616917011526809519390720 x669) x313)) (not x76)) (and (=> (and x182 (and (= (x184 115792089210356248756420345214020892766250353992003419616917011526809519390720 x669) x762) (= x651 (= 109562948294120585953088955926913691080166221410047079322077399086870164406272 x762)))) (and (=> (not x651) x547) (=> x651 x721))) (=> (not x182) x547)))))))))
(assert (= (x793 (x391 (+ 128 x24))) 0))
(assert (x747 x282))
(assert (= (x511 65536) (x769 65536)))
(assert (= (=> (= (> x371 x42) x803) (and (=> (and (and (= (= 0 x515) x311) (= (x184 4 x264) x515)) (not x803)) (and (=> x311 x657) (=> (not x311) x547))) (=> (and x803 (and (= (= 0 x805) x148) (= (x184 65536 x264) x805))) (and (=> x148 x657) (=> (not x148) x547))))) x438))
(assert (=> (>= 10000 x689) (= (x511 x689) (x769 x689))))
(assert (= x301 (and (not x652) x494)))
(assert (= (and x397 x258) x194))
(assert (x726 x775))
(assert (= (and (not x673) x401) x447))
(assert (= (x769 (x240 x444)) x444))
(assert (x726 x611))
(assert (= x813 (and (not x481) x323)))
(assert (= x759 (and (not x397) x258)))
(assert (= (and (not x488) x759) x276))
(assert (= x79 (or x346 x245 x452)))
(assert (x183 x449))
(assert (x726 x348))
(assert (x726 x137))
(assert (=> (>= 10000 (x98 (x391 (+ x601 96)))) (= (x769 (x98 (x391 (+ 96 x601)))) (x511 (x98 (x391 (+ x601 96)))))))
(assert (= x552 (=> (= x745 (< x283 x526)) (and (=> (and (not x745) (and (= x77 (x184 4 x125)) (= (= 0 x77) x672))) (and (=> x672 x454) (=> (not x672) x260))) (=> (and (and (= x150 (x184 65536 x125)) (= (= 0 x150) x516)) x745) (and (=> x516 x454) (=> (not x516) x260)))))))
(assert (= (and x478 (not x672)) x562))
(assert (x726 x278))
(assert (= (and x578 (not x54)) x346))
(assert (x726 x21))
(assert (= (x511 3951748400) (x769 3951748400)))
(assert (x726 x255))
(assert (x331 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x726 x771))
(assert (=> (<= x143 10000) (= (x511 x143) (x769 x143))))
(assert (= x475 (and x410 x101)))
(assert (x726 x400))
(assert (x183 x714))
(assert (= x335 (x240 (x769 x335))))
(assert (x726 x375))
(assert (x726 x160))
(assert (= x239 (or x527 x557)))
(assert (x726 x322))
(assert (x726 x402))
(assert (=> (<= x756 10000) (= (x769 x756) (x511 x756))))
(assert (= x241 (and (not x461) x315)))
(assert (= (x240 (x769 x584)) x584))
(assert (x726 x261))
(assert (x331 131072))
(assert (= 0 (x793 160)))
(assert (x726 x259))
(assert (= x453 (and x401 x673)))
(assert (x726 x425))
(assert (x726 x150))
(assert (x376 x605))
(assert (x726 x389))
(assert (x726 x807))
(assert (x766 x751))
(assert (x726 x223))
(assert (x726 x419))
(assert (x726 x282))
(assert (= x478 (and (not x745) x390)))
(assert (x726 x308))
(assert (x726 x418))
(assert (= (and x136 (not x169)) x86))
(assert (x726 x254))
(assert (= (x240 (x769 (x340 x24))) (x340 x24)))
(assert (x726 x546))
(assert (= x305 (and (not x231) x156)))
(assert (= (or x497 x426) x71))
(assert (x726 x330))
(assert (= (=> (and (= x24 (x391 (+ x662 1))) (= (>= 224 x104) x743)) (and (=> (= x97 (ite (<= x104 32) (x195 (x769 (x340 x24)) 0) (ite (>= 64 x104) (x637 (x769 (x340 x24)) (x769 (x340 (x391 (+ 32 x24)))) 0) (ite (<= x104 96) (x594 (x769 (x340 x24)) (x769 (x340 (x391 (+ x24 32)))) (x769 (x340 (x391 (+ x24 64)))) 0) (ite (<= x104 128) (x460 (x769 (x340 x24)) (x769 (x340 (x391 (+ 32 x24)))) (x769 (x340 (x391 (+ 64 x24)))) (x769 (x340 (x391 (+ x24 96)))) 0) (ite (<= x104 160) (x31 (x769 (x340 x24)) (x769 (x340 (x391 (+ 32 x24)))) (x769 (x340 (x391 (+ 64 x24)))) (x769 (x340 (x391 (+ x24 96)))) (x769 (x340 (x391 (+ x24 128)))) 0) (ite (>= 192 x104) (x336 (x769 (x340 x24)) (x769 (x340 (x391 (+ x24 32)))) (x769 (x340 (x391 (+ 64 x24)))) (x769 (x340 (x391 (+ 96 x24)))) (x769 (x340 (x391 (+ 128 x24)))) (x769 (x340 (x391 (+ 160 x24)))) 0) (ite (>= 224 x104) (x178 (x769 (x340 x24)) (x769 (x340 (x391 (+ x24 32)))) (x769 (x340 (x391 (+ x24 64)))) (x769 (x340 (x391 (+ 96 x24)))) (x769 (x340 (x391 (+ 128 x24)))) (x769 (x340 (x391 (+ x24 160)))) (x769 (x340 (x391 (+ x24 192)))) 0) (x769 x304))))))))) x284) x743)) x776))
(assert (= (x769 3917867461) (x511 3917867461)))
(assert (x726 x762))
(assert (x726 x320))
(assert (= x527 (and (not x506) x3)))
(assert (= x258 (and x149 x360)))
(assert (= x84 (=> (and (= x191 (x215 x775 160)) (<= 0 x775) (= (x184 131072 x191) x462) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x775) (= (= x462 131072) x272) (= (x325 x306) x775) (= (x637 (x769 x638) (x511 1) 0) x306)) (and (=> (and (and (= (x637 (x769 x638) (x511 5) 0) x790) (= (div x707 2) x327) (= x707 (x65 x790)) (= x507 (mod (- x421 (ite x782 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (ite (> x421 0) x327 (x184 127 x327)) x710) (= (> 32 x710) x782) (= x579 (> x507 0)) (= x421 (x184 1 x707))) x272) (and (=> (and (and (= (div x368 32) x185) (= x368 (x391 (+ 31 x710))) (= (x391 (+ x773 x512)) x530) (= x161 (mod (* x185 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x200 (= 0 x710)) (= x773 (x391 (+ 32 x161))) (= (x391 (+ 32 x512)) x603)) x579) (and (=> (and (= x54 (< 31 x710)) (not x200)) (and (=> (and x54 (and (= x649 (x210 x679)) (= (x195 x790 0) x679) (= (x326 x679 1) x218) (= x625 (> x425 x352)) (= x352 (x391 (+ 32 x603))) (= (x391 (+ x710 x603)) x425))) (and (=> x625 x498) (=> (not x625) x628))) (=> (and (and (= (x65 x790) x473) (= (div x473 256) x568) (= (mod (* 256 x568) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x537)) (not x54)) x772))) (=> x200 x772))) (=> (not x579) x547))) (=> (and (and (= x512 x519) (= (x511 0) x767)) (not x272)) x314)))))
(assert (x183 (x340 (x391 (+ 64 x24)))))
(assert (= (and x53 (not x558)) x131))
(assert (= x156 (and x548 x27)))
(assert (x726 x43))
(assert (= (x240 (x511 109562948294120585953088955926913691080166221410047079322077399086870164406272)) 109562948294120585953088955926913691080166221410047079322077399086870164406272))
(assert (x726 x582))
(assert (x726 x327))
(assert (= (x511 3477112867) (x769 3477112867)))
(assert (= (x121 x603) 0))
(assert (x726 x310))
(assert (= (and x147 x692) x115))
(assert (x726 x773))
(assert (= x694 (=> (and (= x442 (= x201 131072)) (= (x184 131072 x264) x201)) (and (=> (and (and (= (> x160 18446744073709551615) x338) (= x160 (x339 (- x807 7776000)))) x442) (and (=> (and (not x338) (= x160 x42)) x438) (=> x338 x547))) (=> (and (= x42 x807) (not x442)) x438)))))
(assert (x331 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x331 x329))
(assert (x726 x374))
(assert (= (or x522 (and x71 (not x490))) x496))
(assert (x726 x236))
(assert (=> (<= (x98 (x391 (+ 128 x601))) 10000) (= (x511 (x98 (x391 (+ 128 x601)))) (x769 (x98 (x391 (+ 128 x601)))))))
(assert (= x809 true))
(assert (= x518 (and x127 x344)))
(assert (= (x769 4294967296) (x511 4294967296)))
(assert (x726 x550))
(assert (x726 x610))
(assert (x183 (x98 x601)))
(assert (x726 x61))
(assert (= (div x188 1461501637330902918203684832716283019655932542976) (x215 x188 160)))
(assert (x726 x427))
(assert (x726 x371))
(assert (x726 x204))
(assert (=> (<= x449 10000) (= (x511 x449) (x769 x449))))
(assert (= x779 (and (not x246) x607)))
(assert (x183 (x340 (x391 (+ 160 x24)))))
(assert (= (and (not x81) x585) x68))
(assert (= (x324 x212 160) (mod (* x212 1461501637330902918203684832716283019655932542976) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x240 (x511 3983562061)) 3983562061))
(assert (= x280 (and x738 x38)))
(assert (x224 x191))
(assert (= x786 (=> (= false x209) x489)))
(assert (= (x240 (x769 x638)) x638))
(assert (x331 x367))
(assert (= x103 (and x579 x812)))
(assert (= (and x350 x779) x63))
(assert (x726 x696))
(assert (x726 x313))
(assert (= x424 (and x86 x234)))
(assert (= x607 (and x459 x688)))
(assert (= x489 (=> (or (not x209) x209) x777)))
(assert (= (x215 x332 248) (div x332 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x726 x296))
(assert (= 0 (x121 (x391 (+ 64 x601)))))
(assert (x726 x627))
(assert (x331 x9))
(assert (x726 x763))
(assert (= x467 x551))
(assert (x726 x649))
(assert (x331 4294967295))
(assert (=> (>= 10000 (x98 x601)) (= (x769 (x98 x601)) (x511 (x98 x601)))))
(assert (x726 x758))
(assert (x726 x186))
(assert (=> (<= (x340 (x391 (+ x24 32))) 10000) (= (x511 (x340 (x391 (+ 32 x24)))) (x769 (x340 (x391 (+ 32 x24)))))))
(assert (x726 x802))
(assert (= x770 (and x292 (not x674))))
(assert (x726 x532))
(assert (x726 x416))
(assert (x726 x574))
(assert (x331 x4))
(assert (x95 x367))
(assert (not x614))
(assert (x726 x543))
(assert (= (=> (and (= x794 (x391 (+ 1 x771))) (= (> x771 x794) x111)) (and (=> (and (not x111) (and (= x530 x519) (= x814 x767))) x314) (=> x111 x547))) x407))
(assert (= x626 (and x761 x533)))
(assert (= x140 (and x626 x439)))
(assert (x726 x381))
(assert (= (and (not x344) x127) x145))
(assert (x726 x469))
(assert (x726 x165))
(assert (x726 x202))
(assert (x726 x212))
(assert (= 0 (x121 224)))
(assert (= 18446744073709551615 (x240 (x511 18446744073709551615))))
(assert (x726 x213))
(assert (x726 x15))
(assert (x726 x281))
(assert (x726 x731))
(assert (x726 x448))
(assert (x726 x687))
(assert (x726 x678))
(assert (x423 x125))
(assert (x726 x622))
(assert (= x295 (and x738 (not x38))))
(assert (= x1 (and x588 x118)))
(assert (x726 x153))
(assert (x726 x462))
(assert (x726 x553))
(assert (= x260 (=> (= true x209) x489)))
(assert (= x498 (=> (and (= x665 (x210 x218)) (= (x391 (+ 32 x352)) x317) (= (not (< x317 x425)) x524)) (and x628 x524))))
(assert (x726 x472))
(assert (x726 x568))
(assert (x331 1))
(assert (x726 x725))
(assert (x726 x599))
(assert (= (and x86 (not x234)) x382))
(assert (x726 x514))
(assert (x726 x432))
(assert (= (x769 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x511 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x747 x4))
(assert (x726 x9))
(assert (= (x121 (x391 (+ 32 x601))) 0))
(assert (x726 x161))
(assert (x331 x611))
(assert (= x220 (or x370 x463)))
(assert (x331 x540))
(assert (= (x98 x601) (x240 (x769 (x98 x601)))))
(assert (x183 (x340 (x391 (+ 96 x24)))))
(assert (= (or x816 x171) x136))
(assert (= (or x164 x562 x778 (and x712 x277) (and (not x658) x233) (and x474 (not x728)) x450 (and x730 x496) x279 (and x129 x559) x675 x647 (and (not x66) x809) x529 x636 (and x227 x13) (and x246 x607) x241 (and x558 x53) (and (not x688) x459) x238 x641 x655 (and x744 (not x83)) x817 (and (not x350) x779) (and x219 x715)) x263))
(assert (= (=> (and (= x147 (= 131072 x514)) (= x514 (x184 131072 x125))) (and (=> (and (= x283 x173) (not x147)) x552) (=> (and (and (= (x339 (- x173 7776000)) x764) (= x25 (< 18446744073709551615 x764))) x147) (and (=> x25 x260) (=> (and (= x283 x764) (not x25)) x552))))) x78))
(assert (x726 x217))
(assert (= (mod (* x807 6277101735386680763835789423207666416102355444464034512896) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x324 x807 192)))
(assert (= x798 (and x117 x214)))
(assert (x726 x753))
(assert (= x675 (and x345 x131)))
(assert (= (and (not x76) x781) x172))
(assert (=> (<= x638 10000) (= (x769 x638) (x511 x638))))
(assert (= (x240 (x769 x255)) x255))
(assert (x726 x735))
(assert (= (x793 (x391 (+ 32 x24))) 0))
(assert (= x781 (and x288 (not x477))))
(assert (x726 x601))
(assert (= x636 (and (not x797) x667)))
(assert (x726 x521))
(assert (= x604 (and (not x272) x503)))
(assert (x726 x251))
(assert (= (or x528 x824) x392))
(assert (= x12 (and x301 x16)))
(assert (= (x793 224) 0))
(assert (= (x769 97199519776808029778168953285215024309695167179541945341261303444449322336256) (x511 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (= x555 (or x280 x305 x295 x795 x93)))
(assert (= (x240 (x769 (x98 (x391 (+ x601 96))))) (x98 (x391 (+ x601 96)))))
(assert (x726 x206))
(assert (= (and x496 (not x730)) x712))
(assert (= (x769 131072) (x511 131072)))
(assert (x726 x393))
(assert (x183 (x98 (x391 (+ 128 x601)))))
(assert (= x384 (and x338 x440)))
(assert (x726 x619))
(assert (=> (>= 10000 x531) (= (x511 x531) (x769 x531))))
(assert (x183 x584))
(assert (x726 x396))
(assert (x331 x327))
(assert (x183 (x340 (x391 (+ x24 32)))))
(assert (x596 x100))
(assert (x726 x794))
(assert (=> (<= (x340 (x391 (+ x24 96))) 10000) (= (x769 (x340 (x391 (+ x24 96)))) (x511 (x340 (x391 (+ x24 96)))))))
(assert (x183 x571))
(assert (= x664 (=> (= x169 (= (x511 0) x444)) (and (=> (and (not x169) (and (and (= (< 0 x566) x234) (= x266 (x391 (+ 4 x627)))) (or (and (and (= 1 x91) (< x785 4294967296)) x234) (and (= x91 x566) (not x234))))) x366) (=> (and x169 (and (= x173 (x215 x188 192)) (= x505 x627))) x430)))))
(assert (= (x240 (x769 x304)) x304))
(assert (= (and x617 x495) x149))
(assert (= x689 (x240 (x769 x689))))
(assert (= x576 (and x518 (not x347))))
(assert (x726 x135))
(assert (= (or x205 x1) x3))
(assert (x113 x327))
(assert (= (and x103 (not x200)) x578))
(assert (x726 x96))
(assert (x726 x358))
(assert (x331 x282))
(assert (=> (<= x470 10000) (= (x769 x470) (x511 x470))))
(assert (= x288 (or (and x392 (not x176)) x784)))
(assert (= x53 (and (not x40) x289)))
(assert (x726 x37))
(assert (x726 x653))
(assert (x726 x662))
(assert (x726 x446))
(assert (x183 (x340 (x391 (+ 128 x24)))))
(assert (x747 x144))
(assert (= x279 (and x149 (not x360))))
(assert (x726 x421))
(assert (x331 x155))
(assert (= (=> (= x700 true) x677) x547))
(assert (x726 x751))
(assert (= x364 (and x724 x633)))
(assert (x726 x116))
(assert (x726 x109))
(assert (x726 x605))
(assert (= x2 (and (not x148) x199)))
(assert (x726 x623))
(assert (x726 x701))
(assert (= 0 (x793 x662)))
(assert (= (=> (and (= x176 (= 0 x434)) (or (not x176) x176)) x799) x587))
(assert (x726 x130))
(assert (x183 x304))
(assert (= x440 (and x239 x442)))
(assert (=> (<= (x340 (x391 (+ x24 64))) 10000) (= (x511 (x340 (x391 (+ x24 64)))) (x769 (x340 (x391 (+ 64 x24)))))))
(assert (= (and x409 x682) x494))
(assert (= x417 (=> (and (= (> x371 x807) x506) (or (and (and (= x775 x144) (= x191 x264)) (not x506)) (and x506 (and (= x811 (x184 65536 x191)) (= x395 (= 65536 x811)) (= (ite x395 0 x775) x144) (= 0 x264))))) x694)))
(assert (= (and x63 (not x458)) x315))
(assert (x726 x185))
(assert (x726 x34))
(assert (= (=> (= x441 (= x443 1)) (and (=> (and x441 (and (= (x184 1461501637330902918203684832716283019655932542975 x375) x510) (= x101 (= x34 x510)) (= (x184 1461501637330902918203684832716283019655932542975 x144) x34))) (and (=> (and x101 (and (= (< 0 x308) x826) (= (x184 1461501637330902918203684832716283019655932542975 x610) x800) (= x513 (x184 1461501637330902918203684832716283019655932542975 x144)) (= x308 (x339 (- x513 x800))))) (and (=> (and (and (= x449 (x184 1461501637330902918203684832716283019655932542975 x610)) (= x257 (x391 (+ x623 32))) (= (x184 1461501637330902918203684832716283019655932542975 x610) x28) (= (x356 (x769 x449)) x678) (= x763 (x184 4294967295 x264)) (= (x391 (+ (mod (x324 x763 160) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x28)) x792) (= (x391 (+ x792 (mod (x324 x807 192) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x297) (= x749 (< 0 x678))) x826) (and (=> (and x749 (and (= (< 0 x620) x437) (= (x391 (+ x261 160)) x464) (= x261 (x391 (+ 4 x623))) (= (x184 1461501637330902918203684832716283019655932542975 x610) x571) (= (x184 1461501637330902918203684832716283019655932542975 x375) x448) (= (x391 (+ 32 x217)) x44) (= (x391 (+ 32 x464)) x137) (= (x391 (+ 32 x44)) x203) (= (x391 (+ x561 32)) x217) (= (x166 128) x620) (= (x391 (+ 32 x261)) x561))) (and (=> (not x437) x57) (=> (and (and (= (> x620 32) x27) (= (x706 160) x703) (= x137 x62)) x437) (and (=> (and x27 (and (= (> x620 64) x231) (= x163 (x391 (+ 32 x137))) (= (x486 192) x402))) (and (=> (and x231 (and (= x38 (> x620 96)) (= (x734 224) x50) (= (x391 (+ x137 64)) x206))) (and (=> x38 x491) (=> (not x38) x57))) (=> (not x231) x57))) (=> (not x27) x57))))) (=> (not x749) x721))) (=> (not x826) x721))) (=> (not x101) x547))) (=> (not x441) x547))) x657))
(assert (x183 x689))
(assert (= (and (not x111) x465) x536))
(assert (x726 x403))
(assert (x726 x163))
(assert (x183 (x98 (x391 (+ 192 x601)))))
(assert (= (x240 (x511 3951748400)) 3951748400))
(assert (x726 x754))
(assert (= (x240 (x326 x679 1)) (+ (x240 x679) 1)))
(assert (x183 (x98 (x391 (+ 64 x601)))))
(assert (= x219 (and x315 x461)))
(assert (= x708 (and (not x147) x692)))
(assert (x726 x23))
(assert (x726 x367))
(assert (x726 x642))
(assert (= 131072 (x240 (x511 131072))))
(assert (x726 x629))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x240 (x511 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= x366 (=> (= x40 (= x91 0)) (and (=> x40 x260) (=> (and (not x40) (and (= (x391 (+ 31 x785)) x155) (= (x391 (+ x223 x627)) x310) (= x558 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x785) (and (> 32 x785) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x785))))) (= x223 (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904 x155)))) (and (=> (and (not x558) (and (= (< 18446744073709551615 x116) x345) (= x605 (x380 x627)) (= x629 (x184 18446744073709551615 x605)) (= (x391 (+ 7776000 x629)) x116))) (and (=> x345 x260) (=> (and (not x345) (and (= x310 x505) (= x173 x116))) x430))) (=> x558 x260)))))))
(assert (= x480 (and x578 x54)))
(assert (= (=> (= x81 (= 0 x381)) (and (=> x81 x547) (=> (and (not x81) (and (= x806 (or (> x567 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x567 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x567))))) (= x735 (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904 x123)) (= x123 (x391 (+ 31 x567))) (= (x391 (+ x519 x735)) x348))) (and (=> x806 x547) (=> (and (and (= (x184 18446744073709551615 x329) x158) (= x329 (x429 x519)) (= (x391 (+ 7776000 x158)) x639) (= (< 18446744073709551615 x639) x724)) (not x806)) (and (=> x724 x547) (=> (and (and (= x348 x623) (= x639 x807)) (not x724)) x417))))))) x232))
(assert (=> (>= 10000 (x98 (x391 (+ 64 x601)))) (= (x769 (x98 (x391 (+ 64 x601)))) (x511 (x98 (x391 (+ 64 x601)))))))
(assert (= (and (not x431) x555) x824))
(assert (= x143 (x240 (x769 x143))))
(assert (x726 x237))
(assert (= (x240 (x769 x470)) x470))
(assert (= (x98 (x391 (+ x601 64))) (x240 (x769 (x98 (x391 (+ 64 x601)))))))
(assert (= (x215 x775 160) (div x775 1461501637330902918203684832716283019655932542976)))
(assert (x726 x590))
(assert (x95 x611))
(assert (x726 x125))
(assert (x726 x620))
(assert (x726 x703))
(assert (x726 x196))
(assert (x726 x714))
(assert (x726 x650))
(assert (= (x240 (x511 3477112867)) 3477112867))
(assert (x726 x349))
(assert (x726 x228))
(assert (x726 x72))
(assert (x95 x155))
(assert (x726 x513))
(assert (x95 x723))
(assert (x726 x141))
(assert (x766 x191))
(assert (= x361 (=> (and (= x617 (= x130 131072)) (= (x637 (x769 x756) (x511 1) 0) x479) (= x130 (x184 131072 x751)) (<= 0 x188) (= (x325 x479) x188) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x188) (= x751 (x215 x188 160))) (and (=> (and (and (= x307 (mod (- x349 (ite x55 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x55 (< x262 32)) (= (ite (< 0 x349) x251 (x184 127 x251)) x262) (= (x65 x615) x100) (= (< 0 x307) x360) (= x615 (x637 (x769 x756) (x511 5) 0)) (= (div x100 2) x251) (= (x184 1 x100) x349)) x617) (and (=> (not x360) x260) (=> (and x360 (and (= (div x58 32) x322) (= (= 0 x262) x397) (= (x391 (+ x146 x783)) x691) (= x662 (x391 (+ 32 x783))) (= x146 (x391 (+ x228 32))) (= (mod (* x322 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x228) (= (x391 (+ x262 31)) x58))) (and (=> (and (= x488 (> x262 31)) (not x397)) (and (=> (and x488 (and (= (< x517 x616) x586) (= x768 (x195 x615 0)) (= x517 (x391 (+ 32 x662))) (= (x210 x768) x543) (= x616 (x391 (+ x262 x662))) (= x563 (x326 x768 1)))) (and (=> x586 x451) (=> (not x586) x467))) (=> (and (and (= x418 (x65 x615)) (= (mod (* 256 x165) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x267) (= (div x418 256) x165)) (not x488)) x551))) (=> x397 x551))))) (=> (and (not x617) (and (= x444 (x511 0)) (= x783 x627))) x664)))))
(assert (= (x121 (x391 (+ x601 160))) 0))
(assert (x726 x262))
(assert (= (x240 (x769 (x98 (x391 (+ 160 x601))))) (x98 (x391 (+ x601 160)))))
(assert (x726 x567))
(assert (=> (>= 10000 (x340 x24)) (= (x511 (x340 x24)) (x769 (x340 x24)))))
(assert (= (+ 1 (x240 x768)) (x240 (x326 x768 1))))
(assert (x183 x531))
(assert (x726 x646))
(assert (= x127 (and x542 x810)))
(assert (x726 x134))
(assert (x224 x125))
(assert (= (and x480 (not x625)) x321))
(assert (= (and x644 (not x581)) x120))
(assert (x726 x119))
(assert (= (div x46 452312848583266388373324160190187140051835877600158453279131187530910662656) (x215 x46 248)))
(assert (x726 x388))
(assert (x331 x125))
(assert (= x635 (and x60 (not x803))))
(assert (x726 x291))
(assert (x726 x671))
(assert (= (x769 109562948294120585953088955926913691080166221410047079322077399086870164406272) (x511 109562948294120585953088955926913691080166221410047079322077399086870164406272)))
(assert (= x57 (=> (and (and (= (x391 (+ x137 x620)) x802) (= (< 0 x434) x431)) (or (and (and (= x608 (x736 (x769 x143))) x180 (= x75 (x736 (x769 x571))) (= x713 (= x75 (x592 (x769 x571)))) (< x23 4294967296) (= (<= x608 (x592 (x769 x143))) x180) x713) x431) (not x431))) x587)))
(assert (=> (>= 10000 x89) (= (x769 x89) (x511 x89))))
(assert (= (and x156 x231) x738))
(assert (=> (<= (x340 (x391 (+ x24 128))) 10000) (= (x769 (x340 (x391 (+ x24 128)))) (x511 (x340 (x391 (+ 128 x24)))))))
(check-sat)
(exit)