(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x14 0)) (((x171 (x259 x14) (x200 x14) (x232 Int)) (x187 (x9 Int)) (x119 (x234 x14) (x125 Int)))))
(declare-fun x1 () Int)
(declare-fun x50 (Int) Int)
(declare-fun x34 () Int)
(declare-fun x89 () Int)
(declare-fun x104 () Int)
(declare-fun x167 () Bool)
(declare-fun x249 () Int)
(declare-fun x29 () Int)
(declare-fun x31 () Int)
(declare-fun x40 () Int)
(declare-fun x37 (Int) x14)
(declare-fun x175 () Int)
(declare-fun x117 () Int)
(declare-fun x20 () x14)
(declare-fun x192 (Int) Int)
(declare-fun x112 () Int)
(declare-fun x22 () Int)
(declare-fun x203 () Int)
(declare-fun x164 () Bool)
(declare-fun x224 () Bool)
(declare-fun x107 () Int)
(declare-fun x114 () Bool)
(declare-fun x197 () Int)
(declare-fun x247 () Int)
(declare-fun x185 () x14)
(declare-fun x263 () Int)
(declare-fun x146 () Int)
(declare-fun x105 (Int) Int)
(declare-fun x211 () Int)
(declare-fun x212 () Int)
(declare-fun x55 () Int)
(declare-fun x221 () Int)
(declare-fun x79 () Int)
(declare-fun x194 (Int) Int)
(declare-fun x84 () Bool)
(declare-fun x72 (Int) Int)
(declare-fun x252 () x14)
(declare-fun x91 () Bool)
(declare-fun x21 () Int)
(declare-fun x101 () Int)
(declare-fun x255 () Int)
(declare-fun x148 () Int)
(declare-fun x147 () Int)
(declare-fun x43 () Int)
(declare-fun x152 () Bool)
(declare-fun x71 () Int)
(declare-fun x80 () Int)
(declare-fun x229 () Int)
(declare-fun x216 () Int)
(declare-fun x191 () Int)
(declare-fun x124 () Int)
(declare-fun x156 () Int)
(declare-fun x61 () Int)
(declare-fun x214 () Bool)
(declare-fun x210 () Int)
(declare-fun x174 () x14)
(declare-fun x54 () Int)
(declare-fun x144 () Int)
(declare-fun x16 () Int)
(declare-fun x205 () x14)
(declare-fun x163 () Int)
(declare-fun x76 () Int)
(declare-fun x26 () Int)
(declare-fun x131 () Int)
(declare-fun x115 () Int)
(declare-fun x78 () Int)
(declare-fun x5 () Int)
(declare-fun x56 () Bool)
(declare-fun x236 () Int)
(declare-fun x173 () Int)
(declare-fun x227 () Int)
(declare-fun x172 () Int)
(declare-fun x46 () Int)
(declare-fun x36 () Int)
(declare-fun x86 () Int)
(declare-fun x245 () Int)
(declare-fun x135 () Int)
(declare-fun x207 () Int)
(declare-fun x264 () Int)
(declare-fun x140 (x14) Int)
(declare-fun x223 () x14)
(declare-fun x3 (x14) Int)
(declare-fun x24 () Bool)
(declare-fun x237 () Int)
(declare-fun x251 () Int)
(declare-fun x60 () Int)
(declare-fun x90 () Int)
(declare-fun x188 () Int)
(declare-fun x262 () x14)
(declare-fun x151 () Int)
(declare-fun x165 () Int)
(declare-fun x116 () Int)
(declare-fun x257 () Int)
(declare-fun x88 () Int)
(declare-fun x218 () Int)
(declare-fun x134 (Int) Int)
(declare-fun x66 () Int)
(declare-fun x11 () Int)
(declare-fun x15 () Int)
(declare-fun x219 () Int)
(declare-fun x122 () Int)
(declare-fun x199 () Int)
(declare-fun x102 () Int)
(declare-fun x108 () Int)
(declare-fun x28 () Int)
(declare-fun x65 () Bool)
(declare-fun x18 () Int)
(declare-fun x190 (x14) Int)
(declare-fun x241 () Bool)
(declare-fun x82 () Int)
(declare-fun x231 () Int)
(declare-fun x128 () Int)
(declare-fun x39 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x169 () Int)
(declare-fun x70 () Bool)
(declare-fun x111 () Int)
(declare-fun x121 () Int)
(declare-fun x81 () Int)
(declare-fun x180 () Int)
(declare-fun x113 () Int)
(declare-fun x62 () Int)
(declare-fun x94 () Int)
(declare-fun x32 () Bool)
(declare-fun x42 () Int)
(declare-fun x44 () Int)
(declare-fun x242 () Int)
(declare-fun x118 () Int)
(declare-fun x233 () Int)
(declare-fun x33 () Int)
(declare-fun x30 () Int)
(declare-fun x206 () Int)
(declare-fun x208 () Int)
(declare-fun x98 () Int)
(declare-fun x93 () Int)
(declare-fun x53 () Int)
(declare-fun x246 () Int)
(declare-fun x142 () Bool)
(declare-fun x177 () x14)
(declare-fun x186 () Int)
(declare-fun x58 () Bool)
(declare-fun x243 () Int)
(declare-fun x85 () Int)
(declare-fun x157 () Int)
(declare-fun x215 () Int)
(declare-fun x23 () Int)
(declare-fun x129 () Int)
(declare-fun x143 () Int)
(declare-fun x64 () Int)
(declare-fun x12 () Int)
(declare-fun x202 () Bool)
(declare-fun x130 () Int)
(declare-fun x155 () Int)
(declare-fun x145 () Bool)
(declare-fun x63 (Int) Int)
(declare-fun x68 () Int)
(declare-fun x248 () Int)
(declare-fun x51 () Int)
(declare-fun x7 () Int)
(declare-fun x265 () Int)
(declare-fun x73 () Int)
(declare-fun x17 () Int)
(declare-fun x153 () Int)
(declare-fun x100 () Int)
(declare-fun x25 () Int)
(declare-fun x41 () Int)
(declare-fun x95 () Int)
(declare-fun x154 () Int)
(declare-fun x228 () Int)
(declare-fun x260 () Int)
(declare-fun x123 () Int)
(declare-fun x48 () Int)
(declare-fun x222 () Int)
(declare-fun x96 (Int) Int)
(declare-fun x69 (x14) Int)
(declare-fun x161 (Int Int) Int)
(declare-fun x137 () Int)
(declare-fun x184 (Int) Int)
(declare-fun x193 () Int)
(declare-fun x57 () Int)
(declare-fun x49 () Int)
(declare-fun x45 () Int)
(declare-fun x179 () Int)
(declare-fun x97 () Int)
(declare-fun x120 () Int)
(declare-fun x235 () Int)
(declare-fun x209 () Int)
(declare-fun x213 () Int)
(declare-fun x27 () Int)
(declare-fun x141 () Bool)
(declare-fun x182 () Int)
(declare-fun x261 () Int)
(declare-fun x110 () Int)
(declare-fun x256 () Int)
(declare-fun x149 () Int)
(declare-fun x162 () Int)
(declare-fun x35 () Int)
(declare-fun x250 () Int)
(declare-fun x253 () Int)
(declare-fun x176 () Int)
(declare-fun x106 () Int)
(declare-fun x132 () Int)
(declare-fun x160 () Int)
(declare-fun x181 () Int)
(declare-fun x225 () Int)
(define-fun x196 ((x14 x14) (x183 Int)) x14 (ite ((_ is x119) x14) (x119 (x234 x14) (+ (x125 x14) x183)) (ite ((_ is x171) x14) (x171 (x259 x14) (x200 x14) (+ (x232 x14) x183)) (x187 (+ x183 (x9 x14))))))
(define-fun x166 ((x139 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x139) (>= x139 0)) x139 (- x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x6 ((x139 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x139) (> 0 x139)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x139) x139))
(define-fun x10 ((x240 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x240) (>= x240 0)))
(define-fun x230 ((x240 Int)) Bool (and (= (x161 115792089237316195423570985008687907853269984665640564039457584007913129639935 x240) x240) (= x240 (x161 x240 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x59 ((x240 Int)) Bool (and (= (x161 0 x240) 0) (= 0 (x161 x240 0))))
(define-fun x168 ((x240 Int)) Bool (= (x161 x240 x240) x240))
(define-fun x258 ((x240 Int)) Bool (and (x168 x240) (x230 x240) (x59 x240)))
(define-fun x159 ((x240 Int) (x19 Int)) Bool (= (x161 x19 x240) (x161 x240 x19)))
(define-fun x4 ((x240 Int) (x19 Int)) Bool (and (>= (x161 x240 x19) 0) (=> (>= x19 0) (>= x19 (x161 x240 x19))) (=> (<= 0 x240) (>= x240 (x161 x240 x19)))))
(define-fun x103 ((x240 Int) (x19 Int)) Bool (and (x159 x240 x19) (x4 x240 x19)))
(define-fun x195 ((x240 Int)) Bool (= (mod x240 4294967296) (x161 x240 4294967295)))
(define-fun x99 ((x240 Int)) Bool (and (x103 x240 4294967295) (x195 x240)))
(define-fun x204 ((x240 Int)) Bool (= (mod x240 340282366920938463463374607431768211456) (x161 x240 340282366920938463463374607431768211455)))
(define-fun x170 ((x240 Int)) Bool (and (x103 x240 340282366920938463463374607431768211455) (x204 x240)))
(define-fun x8 ((x240 Int)) Bool (= (x161 x240 1461501637330902918203684832716283019655932542975) (mod x240 1461501637330902918203684832716283019655932542976)))
(define-fun x74 ((x240 Int)) Bool (and (x8 x240) (x103 x240 1461501637330902918203684832716283019655932542975)))
(define-fun x244 ((x240 Int)) Bool (= (mod x240 256) (x161 x240 255)))
(define-fun x220 ((x240 Int)) Bool (and (x244 x240) (x103 x240 255)))
(define-fun x47 ((x240 Int)) Bool (= (mod x240 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x161 x240 115792089237316195423570985008687907853269984665640564039457584007913129639680) (mod x240 256))))
(define-fun x75 ((x240 Int)) Bool (and (x103 x240 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x47 x240)))
(define-fun x13 ((x133 Int)) Int (ite (= x133 128) x132 (x72 x133)))
(define-fun x158 ((x133 Int)) Int (ite (= 160 x133) x182 (x13 x133)))
(define-fun x150 ((x133 Int)) Int (ite (= x133 192) x131 (x158 x133)))
(define-fun x189 ((x133 Int)) Int (ite (= x133 224) x153 (x150 x133)))
(define-fun x178 ((x133 Int)) Int (ite (= x133 256) x76 (x189 x133)))
(define-fun x92 ((x133 Int)) Int (ite (= x133 128) x113 (x96 x133)))
(define-fun x217 ((x133 Int)) Int (ite (= 160 x133) x64 (x38 x133)))
(define-fun x136 ((x133 Int)) Int (ite (= x133 192) x215 (x134 x133)))
(define-fun x83 ((x133 Int)) Int (ite (= 224 x133) x156 (x194 x133)))
(define-fun x226 ((x133 Int)) Int (ite (= x133 256) x25 (x105 x133)))
(define-fun x238 ((x133 Int)) Int (ite (= x133 288) x80 (x184 x133)))
(define-fun x201 ((x133 Int)) Int (ite (= 512 x133) x148 (x50 x133)))
(define-fun x126 ((x133 Int)) Int (ite (= 544 x133) x35 (x201 x133)))
(define-fun x198 ((x133 Int)) Int (ite (= 576 x133) x191 (x126 x133)))
(define-fun x2 ((x133 Int)) Int (ite (= x133 608) x40 (x198 x133)))
(define-fun x138 ((x133 Int)) Int (ite (= 640 x133) x247 (x2 x133)))
(define-fun x52 ((x133 Int)) Int (ite (= 672 x133) x89 (x138 x133)))
(define-fun x254 ((x133 x14)) Int (ite (= (x37 x27) x133) x231 (x69 x133)))
(define-fun x127 ((x133 Int)) Int (ite (= x133 128) x41 (x63 x133)))
(define-fun x109 ((x133 Int)) Int (ite (= 160 x133) x208 (x127 x133)))
(define-fun x67 ((x133 Int)) Int (ite (= x133 192) x124 (x109 x133)))
(define-fun x77 ((x133 Int)) Int (ite (= 224 x133) x249 (x67 x133)))
(define-fun x87 ((x133 Int)) Int (ite (= x133 256) x253 (x77 x133)))
(define-fun x239 ((x240 Int)) Bool (=> (and (not (= 947726895 x240)) (not (= 1749768213 x240)) (not (= x240 340282366920938463463374607431768211455)) (not (= 3110348530 x240)) (not (= x240 4294967296)) (not (= x240 3547226261)) (not (= 1960641893 x240)) (not (= x240 4294967295)) (not (= x240 3250587425)) (not (= x240 79228162514264337593543950336)) (not (= x240 2652930389)) (not (= x240 2220280665)) (< 10000 x240) (not (= x240 115792089237316195423570985008687907853269984665640564039457584007913129639680)) (not (= x240 1084754510)) (not (= x240 1461501637330902918203684832716283019655932542975)) (not (= x240 18446744073709551616)) (not (= x240 662108492)) (not (= x240 911855590)) (not (= x240 1960939212)) (not (= 1061922874 x240)) (not (= 941780010 x240)) (not (= x240 81955473079516046949633743016697847541294818689821282749996681496272635257091))) (not ((_ is x187) (x37 x240)))))
(assert (= (x190 (x37 x147)) x147))
(assert (x10 x73))
(assert (x258 x104))
(assert (x10 x39))
(assert (x10 x206))
(assert (x10 x237))
(assert (x258 255))
(assert (x239 x264))
(assert (x10 x215))
(assert (x10 x30))
(assert (= true x91))
(assert (x10 x22))
(assert (x10 x209))
(assert (x10 x100))
(assert (x10 x260))
(assert (= (x190 (x37 x246)) x246))
(assert (= (x190 (x196 x177 2)) (+ 2 (x190 x177))))
(assert (= (+ 1 (x190 x205)) (x190 (x196 x205 1))))
(assert (= (x187 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x37 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (=> (<= x27 10000) (= (x187 x27) (x37 x27))))
(assert (= 2652930389 (x190 (x187 2652930389))))
(assert (x239 x265))
(assert (x258 x123))
(assert (x10 x250))
(assert (x10 x176))
(assert (= (x187 340282366920938463463374607431768211455) (x37 340282366920938463463374607431768211455)))
(assert (x10 x151))
(assert (x10 x157))
(assert (= (x187 2220280665) (x37 2220280665)))
(assert (x170 x66))
(assert (x10 x122))
(assert (x99 x211))
(assert (x99 x101))
(assert (x10 x23))
(assert (= (x37 2652930389) (x187 2652930389)))
(assert (= x214 (=> (and (and (and (= (x83 224) x40) (not (< x157 1749768213)) (not (or (> x227 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x227 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 64 x227)))) (= x165 (x52 640)) (>= 1461501637330902918203684832716283019655932542975 x88) (not (= 1960641893 x157)) (= x210 x120) (= 192 x229) (not (> 1960641893 x157)) (= x263 (x52 576)) (>= 1461501637330902918203684832716283019655932542975 x179) (= x46 (x52 672)) (and (< 195 x48) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x48))) (= x162 128) (= 0 x17) (= x236 x55) (<= 0 x93) (= x191 (x136 192)) (= (x52 608) x118) (= 1960939212 x157) (= x222 (x52 544)) (> 2220280665 x157) (< x157 2652930389) (= (x6 (- x48 68)) x212) (>= 1461501637330902918203684832716283019655932542975 x93) (= (x238 288) x89) (= x179 x68) (= (x226 256) x247) (= x95 192) (= x35 (x217 160)) (= x148 (x92 128)) (not (> 4 x48)) (= (x6 (- x48 132)) x227) (= 256 x43) (= 256 x176) (> x121 0) (= (x52 512) x173) (= 128 x248) (not (or (and (> 64 x212) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x212) true)) (> x212 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= 0 x179) (not (or (and (= (<= x86 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x86 192)) (> x86 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= x88 0) (= x86 (x6 (- x48 4))) (= (x3 (x37 x16)) x121)) (and (and (= x29 x44) (= x97 x225) (= x107 x34) (= x114 (= x225 x34)) (= x31 x39)) (and (= x164 (= x206 x33)) (= x124 (x161 4294967295 x23)) (= x265 x209) (<= 0 x93) (<= 0 x257) (= x141 (= x146 x1)) (= x206 x135) (<= 0 x42) (= x137 (x69 (x37 x27))) (= (x69 (x37 81955473079516046949633743016697847541294818689821282749996681496272635257091)) x123) (= (x161 4294967295 x104) x253) (= x15 x264) (= (= x111 x102) x241) (= x46 x36) (>= x60 0) (= (x254 x174) x116) (= (x3 (x37 x16)) x188) (= (x161 1461501637330902918203684832716283019655932542975 x123) x197) (= (div x116 18446744073709551616) x104) x167 (not (= 941780010 x144)) (= x111 x172) (= x62 x146) (not (> 911855590 x144)) (= x53 x15) (< 0 x169) (= x175 x36) (>= 1461501637330902918203684832716283019655932542975 x108) (= x85 x94) (= x79 x73) x241 (= x223 (x196 x262 2)) (= x17 0) (not (> 1749768213 x160)) (= 0 x26) (= (= x251 x85) x65) (= x15 x245) x141 (< 0 x188) (= x128 x49) (= x102 x7) (>= x154 0) (> 1084754510 x144) x145 (= (x254 x262) x208) (= x24 (= x175 x128)) (= x115 x62) (<= x60 340282366920938463463374607431768211455) (= (not (= x51 x245)) x58) (<= x154 1461501637330902918203684832716283019655932542975) (>= x129 0) (= (x87 128) x29) (not (> 3110348530 x160)) (<= x81 1461501637330902918203684832716283019655932542975) (not (> 2652930389 x160)) (= x22 x251) x24 (= 3250587425 x160) (= x181 (x87 256)) (= x261 x15) (= (x87 192) x228) (= x197 x93) (= x151 x255) (= x23 (div x122 4294967296)) (= x21 x1) (= (x161 340282366920938463463374607431768211455 x149) x249) (<= x93 1461501637330902918203684832716283019655932542975) (= x21 x173) (= x30 (x161 255 x137)) x65 (= x33 x71) (= x151 x221) (= x231 (x161 115792089237316195423570985008687907853269984665640564039457584007913129639680 x207)) (> 1749768213 x144) (not (= x160 3110348530)) (= x145 (= x73 x221)) (= x174 (x196 x223 1)) (= (x87 224) x97) x58 (= x185 (x171 (x37 x265) (x37 x243) 0)) (= x167 (not (= x261 x255))) (= 1061922874 x144) (>= x81 0) (= (x69 (x37 x27)) x207) (= (x171 (x37 x264) x185 0) x262) (<= 0 x233) (= (x254 x174) x122) (>= 1461501637330902918203684832716283019655932542975 x257) (= x149 (div x218 79228162514264337593543950336)) x202 (= x218 (x254 x174)) (>= 4294967295 x233) (= x135 x118) (and (< 3 x48) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x48))) (<= 0 x108) (< 0 x30) (= x222 x7) (not (> 662108492 x144)) (<= x129 1461501637330902918203684832716283019655932542975) (= x202 (not (= x115 x53))) (not (= 911855590 x144)) (= x22 x51) x164 (< x160 3547226261) (= x219 x81) (= (x254 x223) x41) (= (x3 (x37 x16)) x169) (= x165 x94) (not (> 4 x48)) (= x257 x68) (<= x42 4294967295) (= x263 x79) (not (= x144 947726895)) (= (x87 160) x39)))) (and (not (> 2652930389 x237)) (= x216 x98) (<= x130 1461501637330902918203684832716283019655932542975) (> x16 0) (<= x112 1461501637330902918203684832716283019655932542975) (<= x213 1461501637330902918203684832716283019655932542975) (= (> (x3 (x37 x147)) 0) x32) (<= 0 x256) (= (x69 x252) x235) (= x246 x15) (<= x256 1461501637330902918203684832716283019655932542975) (> 3547226261 x237) (>= x61 0) (= x70 false) x32 (>= 1461501637330902918203684832716283019655932542975 x5) (= false x84) (= x120 (x178 160)) (>= x130 0) (= x66 (div x260 79228162514264337593543950336)) (<= 0 x155) (= (x69 x177) x182) (< 0 x147) (>= 1461501637330902918203684832716283019655932542975 x106) (= x152 (< 0 (x3 (x37 x16)))) (>= x54 0) (= (x178 256) x78) (<= 0 x154) (>= x98 0) (= x209 x110) (<= 0 x5) (>= 340282366920938463463374607431768211455 x180) (> x45 0) (= x76 (x161 4294967295 x211)) (>= 1461501637330902918203684832716283019655932542975 x5) (= x56 false) (= x20 (x171 (x37 x110) (x37 x243) 0)) (<= 0 x28) (= (x178 192) x100) (<= 0 x5) (= (x140 (x37 x16)) x61) (= (x178 224) x107) (not (= x16 x147)) (= x199 (x140 (x37 x147))) (>= x180 0) (= x131 (x161 4294967295 x101)) (= (x140 (x37 x213)) x54) (>= 1461501637330902918203684832716283019655932542975 x93) (= 0 x242) x152 (= x177 (x171 (x37 x246) x20 0)) (>= x106 0) (>= x112 0) (= x203 0) (= 3250587425 x237) (= x142 false) (= (x3 (x37 x16)) x45) (<= x16 1461501637330902918203684832716283019655932542975) (not (> 3110348530 x237)) (>= x143 0) (> x213 0) (= (x69 x252) x18) (= (x196 x205 1) x252) (= (x196 x177 2) x205) (<= x147 1461501637330902918203684832716283019655932542975) (= x236 (x178 128)) (= (div x235 4294967296) x101) (= (x161 340282366920938463463374607431768211455 x66) x153) (not (< x237 1749768213)) (= x260 (x69 x252)) (not (= x16 x213)) (<= x143 4294967295) (= x250 1061922874) (>= 1461501637330902918203684832716283019655932542975 x28) (<= x154 1461501637330902918203684832716283019655932542975) x224 (= (div x18 18446744073709551616) x211) (>= x199 0) (not (= x213 x147)) (not (= 3110348530 x237)) (= x132 (x69 x205)) (<= x155 4294967295) (= (> (x3 (x37 x213)) 0) x224) (<= x98 1461501637330902918203684832716283019655932542975) (>= x93 0))) x114)))
(assert (x10 x89))
(assert (x10 x163))
(assert (= (x190 (x187 941780010)) 941780010))
(assert (x10 x42))
(assert (x10 x253))
(assert (= (x190 (x187 662108492)) 662108492))
(assert (x10 x228))
(assert (x10 x21))
(assert (x10 x146))
(assert (x10 x112))
(assert (x10 x82))
(assert (= (x190 (x187 81955473079516046949633743016697847541294818689821282749996681496272635257091)) 81955473079516046949633743016697847541294818689821282749996681496272635257091))
(assert (x10 x41))
(assert (x10 x165))
(assert (x10 x147))
(assert (x10 x149))
(assert (not x214))
(assert (x10 x218))
(assert (x10 x94))
(assert (x10 x62))
(assert (= 4294967296 (x190 (x187 4294967296))))
(assert (= (x190 (x187 3547226261)) 3547226261))
(assert (x258 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x10 x29))
(assert (x10 x130))
(assert (x10 x154))
(assert (x10 x102))
(assert (x10 x48))
(assert (x258 x137))
(assert (= (x37 4294967296) (x187 4294967296)))
(assert (=> (<= x243 10000) (= (x37 x243) (x187 x243))))
(assert (x10 x216))
(assert (= 18446744073709551616 (x190 (x187 18446744073709551616))))
(assert (x10 x181))
(assert (x220 x137))
(assert (x10 x160))
(assert (x10 x101))
(assert (x10 x98))
(assert (x258 x149))
(assert (x10 x36))
(assert (x10 x248))
(assert (x10 x33))
(assert (x10 x208))
(assert (x10 x193))
(assert (x239 x246))
(assert (x10 x169))
(assert (x10 x261))
(assert (x10 x54))
(assert (x10 x243))
(assert (x10 x153))
(assert (x10 x45))
(assert (x10 x106))
(assert (x10 x247))
(assert (x258 x101))
(assert (= (x37 662108492) (x187 662108492)))
(assert (x10 x121))
(assert (x10 x143))
(assert (x10 x40))
(assert (x10 x211))
(assert (= 3250587425 (x190 (x187 3250587425))))
(assert (x10 x203))
(assert (x10 x135))
(assert (=> (<= x147 10000) (= (x37 x147) (x187 x147))))
(assert (x10 x60))
(assert (= (x190 (x37 x243)) x243))
(assert (x10 x173))
(assert (= (x37 3250587425) (x187 3250587425)))
(assert (x239 x16))
(assert (x10 x148))
(assert (x10 x221))
(assert (x258 x211))
(assert (x10 x172))
(assert (x10 x28))
(assert (x10 x46))
(assert (x258 x66))
(assert (x10 x71))
(assert (x10 x179))
(assert (= (x37 18446744073709551616) (x187 18446744073709551616)))
(assert true)
(assert (= 340282366920938463463374607431768211455 (x190 (x187 340282366920938463463374607431768211455))))
(assert (=> (<= x110 10000) (= (x37 x110) (x187 x110))))
(assert (x10 x222))
(assert (x10 x257))
(assert (x10 x26))
(assert (= 1960939212 (x190 (x187 1960939212))))
(assert (x10 x31))
(assert (x10 x27))
(assert (= (x190 (x37 x264)) x264))
(assert (x258 x23))
(assert (x239 81955473079516046949633743016697847541294818689821282749996681496272635257091))
(assert (x239 x213))
(assert (= (x190 (x187 3110348530)) 3110348530))
(assert (x10 x246))
(assert (=> (<= x265 10000) (= (x187 x265) (x37 x265))))
(assert (= (x187 1461501637330902918203684832716283019655932542975) (x37 1461501637330902918203684832716283019655932542975)))
(assert (x10 x34))
(assert (x10 x107))
(assert (x10 x55))
(assert (x10 x219))
(assert (= (x190 (x187 4294967295)) 4294967295))
(assert (x10 x251))
(assert (x10 x85))
(assert (= (x187 947726895) (x37 947726895)))
(assert (x258 1461501637330902918203684832716283019655932542975))
(assert (x10 x12))
(assert (x10 x197))
(assert (=> (<= x16 10000) (= (x187 x16) (x37 x16))))
(assert (x10 x131))
(assert (x10 x236))
(assert (x10 x242))
(assert (= (x187 3547226261) (x37 3547226261)))
(assert (x10 x155))
(assert (x10 x137))
(assert (x10 x144))
(assert (x10 x213))
(assert (x10 x108))
(assert (x10 x93))
(assert (x10 x123))
(assert (= x16 (x190 (x37 x16))))
(assert (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x190 (x37 81955473079516046949633743016697847541294818689821282749996681496272635257091))))
(assert (x10 x175))
(assert (= 1084754510 (x190 (x187 1084754510))))
(assert (x239 x147))
(assert (x10 x15))
(assert (x10 x188))
(assert (x10 x132))
(assert (= (x190 (x187 79228162514264337593543950336)) 79228162514264337593543950336))
(assert (x10 x225))
(assert (x10 x88))
(assert (= (x187 79228162514264337593543950336) (x37 79228162514264337593543950336)))
(assert (x10 x104))
(assert (x258 4294967295))
(assert (= (x37 1960939212) (x187 1960939212)))
(assert (= (x190 (x37 x265)) x265))
(assert (= (x187 1960641893) (x37 1960641893)))
(assert (x239 x27))
(assert (x10 x120))
(assert (x10 x110))
(assert (x258 340282366920938463463374607431768211455))
(assert (= (x37 911855590) (x187 911855590)))
(assert (x10 x7))
(assert (x10 x61))
(assert (= (x37 941780010) (x187 941780010)))
(assert (x10 x78))
(assert (x10 x86))
(assert (x10 x95))
(assert (x10 x79))
(assert (x10 x199))
(assert (x10 x128))
(assert (x10 x264))
(assert (= (x190 (x37 x110)) x110))
(assert (x10 x66))
(assert (=> (>= 10000 x213) (= (x187 x213) (x37 x213))))
(assert (x99 x23))
(assert (x10 x80))
(assert (= (x37 1749768213) (x187 1749768213)))
(assert (= 1960641893 (x190 (x187 1960641893))))
(assert (x258 x207))
(assert (x10 x231))
(assert (x10 x210))
(assert (x10 x57))
(assert (= (x187 1084754510) (x37 1084754510)))
(assert (x10 x255))
(assert (x10 x245))
(assert (x10 x16))
(assert (= (x37 1061922874) (x187 1061922874)))
(assert (x10 x265))
(assert (x10 x51))
(assert (x239 x243))
(assert (x10 x156))
(assert (x10 x76))
(assert (= 947726895 (x190 (x187 947726895))))
(assert (=> (>= 10000 x264) (= (x37 x264) (x187 x264))))
(assert (x10 x25))
(assert (x10 x53))
(assert (x10 x124))
(assert (= (x190 (x37 x27)) x27))
(assert (= (x190 (x196 x262 2)) (+ (x190 x262) 2)))
(assert (x10 x115))
(assert (=> (<= x246 10000) (= (x187 x246) (x37 x246))))
(assert (x10 x5))
(assert (x10 x68))
(assert (x10 x229))
(assert (= (x190 (x187 1061922874)) 1061922874))
(assert (= x213 (x190 (x37 x213))))
(assert (x10 x207))
(assert (x10 x162))
(assert (x10 x1))
(assert (x10 x113))
(assert (x10 x44))
(assert (x99 x104))
(assert (= (x37 4294967295) (x187 4294967295)))
(assert (x10 x11))
(assert (= (x190 (x187 911855590)) 911855590))
(assert (x10 x43))
(assert (= 1749768213 (x190 (x187 1749768213))))
(assert (x75 x207))
(assert (x10 x263))
(assert (x10 x17))
(assert (x10 x235))
(assert (x10 x64))
(assert (= (x190 (x187 2220280665)) 2220280665))
(assert (x10 x35))
(assert (x10 x18))
(assert (x239 x110))
(assert (x10 x118))
(assert (x10 x117))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x190 (x187 115792089237316195423570985008687907853269984665640564039457584007913129639680))))
(assert (x10 x97))
(assert (x10 x49))
(assert (x10 x233))
(assert (x10 x249))
(assert (x10 x182))
(assert (= (x190 (x187 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x10 x256))
(assert (x10 x180))
(assert (x10 x116))
(assert (x10 x227))
(assert (x10 x186))
(assert (x10 x191))
(assert (x10 x111))
(assert (x170 x149))
(assert (x10 x90))
(assert (x10 x212))
(assert (= (x187 81955473079516046949633743016697847541294818689821282749996681496272635257091) (x37 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (= (+ 1 (x190 x223)) (x190 (x196 x223 1))))
(assert (x10 x81))
(assert (x10 x129))
(assert (= (x37 3110348530) (x187 3110348530)))
(assert (x74 x123))
(check-sat)
(exit)