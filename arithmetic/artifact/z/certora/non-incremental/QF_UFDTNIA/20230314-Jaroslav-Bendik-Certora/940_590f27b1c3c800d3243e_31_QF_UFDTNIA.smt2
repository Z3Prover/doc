(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x1153 0)) (((x158 (x1249 x1153) (x74 Int)) (x473 (x474 x1153) (x770 x1153) (x594 Int)) (x495 (x173 Int)))))
(declare-fun x342 () Int)
(declare-fun x136 () Int)
(declare-fun x577 () Int)
(declare-fun x929 () Bool)
(declare-fun x83 () Int)
(declare-fun x16 () Bool)
(declare-fun x331 () Int)
(declare-fun x363 () Bool)
(declare-fun x1090 () Int)
(declare-fun x1031 () Int)
(declare-fun x776 () Int)
(declare-fun x829 () Bool)
(declare-fun x1108 () Int)
(declare-fun x665 () Int)
(declare-fun x1128 () Bool)
(declare-fun x305 () x1153)
(declare-fun x313 () x1153)
(declare-fun x1157 () Int)
(declare-fun x1002 () Int)
(declare-fun x699 () Bool)
(declare-fun x19 () Int)
(declare-fun x60 () Bool)
(declare-fun x86 () Int)
(declare-fun x1248 () Bool)
(declare-fun x554 () Bool)
(declare-fun x179 () Bool)
(declare-fun x122 () Int)
(declare-fun x821 () Bool)
(declare-fun x328 () Bool)
(declare-fun x1318 () Int)
(declare-fun x858 () Int)
(declare-fun x364 () Int)
(declare-fun x863 () Int)
(declare-fun x237 () Int)
(declare-fun x1255 () Bool)
(declare-fun x799 () Int)
(declare-fun x572 () Int)
(declare-fun x28 () Bool)
(declare-fun x904 () Int)
(declare-fun x32 () Int)
(declare-fun x1172 () Int)
(declare-fun x1177 () Int)
(declare-fun x138 () Int)
(declare-fun x941 () Int)
(declare-fun x1071 () Int)
(declare-fun x1013 () Int)
(declare-fun x729 () Int)
(declare-fun x918 () Int)
(declare-fun x14 () Bool)
(declare-fun x352 () Int)
(declare-fun x234 () Bool)
(declare-fun x39 (Int) x1153)
(declare-fun x720 () Int)
(declare-fun x534 () Int)
(declare-fun x1269 () Int)
(declare-fun x270 () Int)
(declare-fun x1093 () Bool)
(declare-fun x1242 () Int)
(declare-fun x750 () Bool)
(declare-fun x351 () Int)
(declare-fun x503 () Int)
(declare-fun x326 () Int)
(declare-fun x959 () Bool)
(declare-fun x768 () Int)
(declare-fun x151 () Int)
(declare-fun x396 () Bool)
(declare-fun x931 () Int)
(declare-fun x165 () x1153)
(declare-fun x939 () Int)
(declare-fun x194 () Int)
(declare-fun x860 () Int)
(declare-fun x169 () Int)
(declare-fun x329 () Bool)
(declare-fun x374 () Int)
(declare-fun x666 () Int)
(declare-fun x1244 () Int)
(declare-fun x489 () Int)
(declare-fun x775 () Int)
(declare-fun x1057 () Int)
(declare-fun x1292 () x1153)
(declare-fun x1106 () x1153)
(declare-fun x610 () Bool)
(declare-fun x448 () Int)
(declare-fun x549 () Int)
(declare-fun x260 () Bool)
(declare-fun x1145 () Bool)
(declare-fun x483 () Bool)
(declare-fun x159 () Int)
(declare-fun x215 () Bool)
(declare-fun x212 () Bool)
(declare-fun x421 () Bool)
(declare-fun x1159 () Int)
(declare-fun x1059 () Bool)
(declare-fun x185 () Int)
(declare-fun x1230 () Int)
(declare-fun x359 () Bool)
(declare-fun x920 () Bool)
(declare-fun x529 () Int)
(declare-fun x424 () Int)
(declare-fun x339 () Bool)
(declare-fun x696 () Int)
(declare-fun x124 () x1153)
(declare-fun x1322 () Int)
(declare-fun x1038 () Bool)
(declare-fun x189 () Bool)
(declare-fun x362 () Bool)
(declare-fun x976 () Int)
(declare-fun x1062 () Int)
(declare-fun x869 () Int)
(declare-fun x900 () Bool)
(declare-fun x1118 () Int)
(declare-fun x849 () Int)
(declare-fun x811 () Int)
(declare-fun x46 () Bool)
(declare-fun x733 (x1153) Int)
(declare-fun x121 () Bool)
(declare-fun x747 () Int)
(declare-fun x172 () Int)
(declare-fun x451 () Int)
(declare-fun x1063 () Bool)
(declare-fun x466 () Bool)
(declare-fun x970 () Bool)
(declare-fun x126 () Bool)
(declare-fun x54 () Int)
(declare-fun x102 () Int)
(declare-fun x985 () Bool)
(declare-fun x515 () Bool)
(declare-fun x1303 () Int)
(declare-fun x361 () Bool)
(declare-fun x420 () Bool)
(declare-fun x694 () Bool)
(declare-fun x950 () Int)
(declare-fun x1046 () Int)
(declare-fun x592 () Int)
(declare-fun x819 () Int)
(declare-fun x1262 () Int)
(declare-fun x590 () Int)
(declare-fun x41 () Int)
(declare-fun x541 () Bool)
(declare-fun x312 () Bool)
(declare-fun x925 () Int)
(declare-fun x506 () Int)
(declare-fun x113 () Bool)
(declare-fun x203 () Int)
(declare-fun x1096 () Bool)
(declare-fun x31 () Int)
(declare-fun x779 () Int)
(declare-fun x974 () Int)
(declare-fun x1259 () Int)
(declare-fun x1182 () Bool)
(declare-fun x569 () Bool)
(declare-fun x794 () Bool)
(declare-fun x1080 () Int)
(declare-fun x1267 () Bool)
(declare-fun x285 () Int)
(declare-fun x1187 () Int)
(declare-fun x912 () Int)
(declare-fun x324 () x1153)
(declare-fun x570 () Int)
(declare-fun x195 () Bool)
(declare-fun x225 () Bool)
(declare-fun x633 () Int)
(declare-fun x101 () Bool)
(declare-fun x944 () Int)
(declare-fun x1193 () Int)
(declare-fun x1134 () Int)
(declare-fun x1207 () Int)
(declare-fun x335 () Bool)
(declare-fun x532 () Bool)
(declare-fun x764 () Bool)
(declare-fun x903 () Bool)
(declare-fun x587 () Int)
(declare-fun x478 () Int)
(declare-fun x398 () Bool)
(declare-fun x919 () Int)
(declare-fun x1060 () Int)
(declare-fun x1210 () Bool)
(declare-fun x55 () Int)
(declare-fun x408 () Bool)
(declare-fun x644 () Int)
(declare-fun x187 () Int)
(declare-fun x689 () Bool)
(declare-fun x1180 () Bool)
(declare-fun x606 () Int)
(declare-fun x455 () Bool)
(declare-fun x667 () Int)
(declare-fun x199 () Bool)
(declare-fun x688 () Int)
(declare-fun x810 () Bool)
(declare-fun x415 () Bool)
(declare-fun x596 () Bool)
(declare-fun x1164 () Bool)
(declare-fun x80 () Bool)
(declare-fun x765 () Bool)
(declare-fun x626 () Bool)
(declare-fun x1214 () Bool)
(declare-fun x675 () Int)
(declare-fun x1290 () Int)
(declare-fun x790 () Int)
(declare-fun x293 () Bool)
(declare-fun x79 () Bool)
(declare-fun x669 () Int)
(declare-fun x797 () Int)
(declare-fun x382 () Bool)
(declare-fun x458 () Int)
(declare-fun x738 () Int)
(declare-fun x223 () Int)
(declare-fun x1099 () Int)
(declare-fun x757 (Int) Int)
(declare-fun x1133 () Bool)
(declare-fun x973 () Bool)
(declare-fun x864 () Int)
(declare-fun x861 () Int)
(declare-fun x979 () Bool)
(declare-fun x1306 () Int)
(declare-fun x1141 () Bool)
(declare-fun x90 () Bool)
(declare-fun x834 () Int)
(declare-fun x284 () Int)
(declare-fun x888 () Int)
(declare-fun x615 () Bool)
(declare-fun x1263 () Int)
(declare-fun x73 () Bool)
(declare-fun x154 () Bool)
(declare-fun x366 () Bool)
(declare-fun x993 () Int)
(declare-fun x739 () Int)
(declare-fun x726 () Int)
(declare-fun x635 () Int)
(declare-fun x771 () Bool)
(declare-fun x486 () Int)
(declare-fun x211 () Int)
(declare-fun x163 () Bool)
(declare-fun x137 () Int)
(declare-fun x1239 () Bool)
(declare-fun x1064 () Int)
(declare-fun x70 () Int)
(declare-fun x192 () Bool)
(declare-fun x902 () Int)
(declare-fun x589 () Int)
(declare-fun x213 () Int)
(declare-fun x375 () Bool)
(declare-fun x368 () Bool)
(declare-fun x250 () Int)
(declare-fun x752 () Int)
(declare-fun x650 () Bool)
(declare-fun x562 () Int)
(declare-fun x1004 () Int)
(declare-fun x432 () Int)
(declare-fun x22 () Int)
(declare-fun x848 () Int)
(declare-fun x575 () Bool)
(declare-fun x619 (x1153) Int)
(declare-fun x519 () Bool)
(declare-fun x376 () Bool)
(declare-fun x202 () Int)
(declare-fun x536 () Int)
(declare-fun x1288 () Bool)
(declare-fun x1129 () Bool)
(declare-fun x77 () Int)
(declare-fun x878 () Bool)
(declare-fun x953 () Bool)
(declare-fun x402 () Int)
(declare-fun x132 () Bool)
(declare-fun x853 () Int)
(declare-fun x1163 () Bool)
(declare-fun x1165 () Int)
(declare-fun x785 () Int)
(declare-fun x1315 () Int)
(declare-fun x670 () Bool)
(declare-fun x1107 () Bool)
(declare-fun x527 () Int)
(declare-fun x945 () Int)
(declare-fun x257 () Int)
(declare-fun x330 () Bool)
(declare-fun x911 () Bool)
(declare-fun x822 () Int)
(declare-fun x1010 () Int)
(declare-fun x1195 () Int)
(declare-fun x1125 () Bool)
(declare-fun x35 () Int)
(declare-fun x891 () Int)
(declare-fun x705 () Int)
(declare-fun x500 () Int)
(declare-fun x1047 () Int)
(declare-fun x697 () Int)
(declare-fun x524 () Bool)
(declare-fun x1281 () Int)
(declare-fun x1126 () Bool)
(declare-fun x1203 () Int)
(declare-fun x817 () Bool)
(declare-fun x509 () Int)
(declare-fun x236 () Bool)
(declare-fun x153 () Int)
(declare-fun x630 (Int) Int)
(declare-fun x44 () Int)
(declare-fun x1289 () Bool)
(declare-fun x825 () Int)
(declare-fun x1192 () x1153)
(declare-fun x673 () Bool)
(declare-fun x552 () Int)
(declare-fun x1138 () Int)
(declare-fun x235 () Int)
(declare-fun x916 () Bool)
(declare-fun x975 () Int)
(declare-fun x986 () Bool)
(declare-fun x611 () Int)
(declare-fun x278 () Int)
(declare-fun x922 () Int)
(declare-fun x1179 () Int)
(declare-fun x484 () Bool)
(declare-fun x1083 () x1153)
(declare-fun x178 () Int)
(declare-fun x778 () Int)
(declare-fun x1178 (x1153) Int)
(declare-fun x603 () Bool)
(declare-fun x719 () Bool)
(declare-fun x576 () Int)
(declare-fun x1264 () Bool)
(declare-fun x906 () Int)
(declare-fun x494 (x1153) Int)
(declare-fun x1206 () Int)
(declare-fun x1272 () Bool)
(declare-fun x30 () Int)
(declare-fun x1228 () Bool)
(declare-fun x384 () Int)
(declare-fun x730 () Bool)
(declare-fun x897 () Int)
(declare-fun x854 () Bool)
(declare-fun x1273 () Int)
(declare-fun x743 () Int)
(declare-fun x921 () Bool)
(declare-fun x300 () Int)
(declare-fun x160 () Bool)
(declare-fun x53 () Bool)
(declare-fun x662 () Int)
(declare-fun x1276 () Int)
(declare-fun x496 () Int)
(declare-fun x567 () Bool)
(declare-fun x58 () Bool)
(declare-fun x671 () Int)
(declare-fun x226 () Bool)
(declare-fun x1032 () Int)
(declare-fun x281 () Bool)
(declare-fun x901 () Int)
(declare-fun x1029 () Int)
(declare-fun x266 () Int)
(declare-fun x1221 () Bool)
(declare-fun x616 () Bool)
(declare-fun x1121 () Int)
(declare-fun x876 () Bool)
(declare-fun x465 () Int)
(declare-fun x813 () Bool)
(declare-fun x135 () Bool)
(declare-fun x713 () Bool)
(declare-fun x1087 () x1153)
(declare-fun x1132 () Bool)
(declare-fun x128 () Int)
(declare-fun x1094 () x1153)
(declare-fun x501 () Int)
(declare-fun x182 () Bool)
(declare-fun x303 () Int)
(declare-fun x449 () Int)
(declare-fun x1043 () Int)
(declare-fun x254 () Int)
(declare-fun x835 () Int)
(declare-fun x933 () Int)
(declare-fun x1229 () Int)
(declare-fun x1143 () Int)
(declare-fun x1111 () Bool)
(declare-fun x1136 () Int)
(declare-fun x1027 () Int)
(declare-fun x227 () Int)
(declare-fun x340 () Bool)
(declare-fun x3 () Int)
(declare-fun x808 () Int)
(declare-fun x629 () Int)
(declare-fun x1194 () Bool)
(declare-fun x847 () Int)
(declare-fun x663 () Int)
(declare-fun x1223 () Int)
(declare-fun x1024 () Bool)
(declare-fun x1278 () Int)
(declare-fun x258 () Int)
(declare-fun x262 () Bool)
(declare-fun x952 () Bool)
(declare-fun x271 () Bool)
(declare-fun x40 () Int)
(declare-fun x456 () Int)
(declare-fun x140 () Int)
(declare-fun x423 () Bool)
(declare-fun x627 () x1153)
(declare-fun x648 () Int)
(declare-fun x181 () Bool)
(declare-fun x139 () Int)
(declare-fun x1116 () Int)
(declare-fun x354 () Int)
(declare-fun x276 () Int)
(declare-fun x1225 () Bool)
(declare-fun x1058 () Int)
(declare-fun x207 () Bool)
(declare-fun x728 () Int)
(declare-fun x1270 () Bool)
(declare-fun x275 () Bool)
(declare-fun x405 () Int)
(declare-fun x1079 () Int)
(declare-fun x687 () Int)
(declare-fun x412 () Int)
(declare-fun x59 () Int)
(declare-fun x498 () Int)
(declare-fun x378 () Bool)
(declare-fun x267 () Bool)
(declare-fun x323 () Int)
(declare-fun x978 () Bool)
(declare-fun x488 () Int)
(declare-fun x1104 () Int)
(declare-fun x998 () Int)
(declare-fun x247 () Bool)
(declare-fun x177 () Bool)
(declare-fun x1227 () Int)
(declare-fun x228 () Bool)
(declare-fun x704 () Bool)
(declare-fun x346 () Bool)
(declare-fun x482 () Int)
(declare-fun x1147 () Int)
(declare-fun x1188 () Int)
(declare-fun x942 () Bool)
(declare-fun x605 () Bool)
(declare-fun x277 () Int)
(declare-fun x454 () Bool)
(declare-fun x884 () Int)
(declare-fun x870 () Int)
(declare-fun x327 () Int)
(declare-fun x1316 () Int)
(declare-fun x441 () Bool)
(declare-fun x676 () Int)
(declare-fun x1295 () Int)
(declare-fun x426 () Int)
(declare-fun x545 () Bool)
(declare-fun x229 (Int Int) Int)
(declare-fun x559 () Int)
(declare-fun x628 () Int)
(declare-fun x763 () Int)
(declare-fun x414 () Bool)
(declare-fun x350 () Int)
(declare-fun x724 () Int)
(declare-fun x622 () Int)
(declare-fun x264 () Bool)
(declare-fun x453 () Int)
(declare-fun x830 () Int)
(declare-fun x789 () Int)
(declare-fun x114 () Int)
(declare-fun x467 () Bool)
(declare-fun x1169 () Int)
(declare-fun x760 () Int)
(declare-fun x239 () Int)
(declare-fun x45 () Bool)
(declare-fun x824 () Int)
(declare-fun x306 () Bool)
(declare-fun x1268 () Int)
(declare-fun x1036 () Int)
(declare-fun x1040 () Int)
(declare-fun x691 () Int)
(declare-fun x1077 () Int)
(declare-fun x593 () Int)
(declare-fun x1218 () Bool)
(declare-fun x700 () Int)
(declare-fun x338 () Bool)
(declare-fun x856 () Bool)
(declare-fun x1 () Int)
(declare-fun x1035 () Bool)
(declare-fun x723 () Bool)
(declare-fun x537 () Bool)
(declare-fun x343 () Int)
(declare-fun x292 () Bool)
(declare-fun x1158 () Bool)
(declare-fun x142 () Int)
(declare-fun x1105 (x1153) Int)
(declare-fun x682 () Bool)
(declare-fun x6 () Int)
(declare-fun x373 () Bool)
(declare-fun x1028 () Int)
(declare-fun x892 () Int)
(declare-fun x144 () Int)
(declare-fun x308 () Int)
(declare-fun x43 () Bool)
(declare-fun x4 () Bool)
(declare-fun x288 () Int)
(declare-fun x741 () Bool)
(declare-fun x196 (x1153) Int)
(declare-fun x406 () Bool)
(declare-fun x97 () Bool)
(declare-fun x845 () Bool)
(declare-fun x175 () Bool)
(declare-fun x525 () Int)
(declare-fun x710 () Int)
(declare-fun x827 (x1153) Int)
(declare-fun x814 () Int)
(declare-fun x788 () Int)
(declare-fun x337 () Int)
(declare-fun x997 () Int)
(declare-fun x833 () Int)
(declare-fun x91 () Int)
(declare-fun x871 () Int)
(declare-fun x994 () Int)
(declare-fun x857 () Int)
(declare-fun x371 () Int)
(declare-fun x110 () Int)
(declare-fun x1137 () Int)
(declare-fun x1098 () Int)
(declare-fun x651 () Bool)
(declare-fun x756 () Int)
(declare-fun x450 () Int)
(declare-fun x1184 () Int)
(declare-fun x1200 () Bool)
(declare-fun x184 () Int)
(declare-fun x772 () Bool)
(declare-fun x1296 () Int)
(declare-fun x341 () Int)
(declare-fun x1319 () Bool)
(declare-fun x1308 () Bool)
(declare-fun x356 () Int)
(declare-fun x623 () Bool)
(declare-fun x604 () Int)
(declare-fun x915 () Int)
(declare-fun x598 () Int)
(declare-fun x714 () Int)
(declare-fun x1091 () Int)
(declare-fun x815 () Bool)
(declare-fun x563 () Int)
(declare-fun x98 () Bool)
(declare-fun x287 () Bool)
(declare-fun x852 () Bool)
(declare-fun x416 () Bool)
(declare-fun x491 () Bool)
(declare-fun x737 () Int)
(declare-fun x679 () Int)
(declare-fun x1241 () Bool)
(declare-fun x955 () Int)
(declare-fun x84 () Bool)
(declare-fun x556 () Int)
(declare-fun x279 (Int) Int)
(declare-fun x1124 (x1153) Int)
(declare-fun x1152 () Int)
(declare-fun x542 () Bool)
(declare-fun x652 () Int)
(declare-fun x66 () Int)
(declare-fun x167 () Bool)
(declare-fun x403 () Bool)
(declare-fun x949 () Bool)
(declare-fun x419 () x1153)
(declare-fun x850 () Int)
(declare-fun x243 () Int)
(declare-fun x1076 () Bool)
(declare-fun x93 () Int)
(declare-fun x1314 () Bool)
(declare-fun x1049 () Bool)
(declare-fun x125 () Int)
(declare-fun x1112 () Int)
(declare-fun x1258 () Int)
(declare-fun x708 () Bool)
(declare-fun x1168 () Bool)
(declare-fun x782 () Bool)
(declare-fun x127 () Bool)
(declare-fun x233 () Int)
(declare-fun x492 () Int)
(declare-fun x1113 () Int)
(declare-fun x826 () Int)
(declare-fun x208 () Bool)
(declare-fun x1183 () Int)
(declare-fun x1007 () Bool)
(declare-fun x231 () Int)
(declare-fun x241 () Bool)
(declare-fun x502 () Int)
(declare-fun x1307 () x1153)
(declare-fun x1155 () Bool)
(declare-fun x672 () Bool)
(declare-fun x1020 () Int)
(declare-fun x206 () Int)
(declare-fun x1072 () Int)
(declare-fun x1084 () Int)
(declare-fun x1243 () Int)
(declare-fun x1265 () Int)
(declare-fun x781 () Bool)
(declare-fun x5 () Bool)
(declare-fun x1100 () Int)
(declare-fun x1000 () Int)
(declare-fun x744 () Bool)
(declare-fun x246 () Bool)
(declare-fun x9 () Int)
(declare-fun x401 () Bool)
(declare-fun x1186 () Int)
(declare-fun x1061 () Bool)
(declare-fun x349 () Bool)
(declare-fun x831 () Int)
(declare-fun x602 () Int)
(declare-fun x1185 () Bool)
(declare-fun x157 () Bool)
(declare-fun x259 () Bool)
(declare-fun x580 () Int)
(declare-fun x1313 () Bool)
(declare-fun x1238 () Int)
(declare-fun x1130 () Int)
(declare-fun x846 () Bool)
(declare-fun x1190 () Int)
(declare-fun x636 () Int)
(declare-fun x445 () Bool)
(declare-fun x510 () Int)
(declare-fun x428 () Int)
(declare-fun x543 () Bool)
(declare-fun x791 () Int)
(declare-fun x773 () Bool)
(declare-fun x1048 () Bool)
(declare-fun x600 () Int)
(declare-fun x409 () Int)
(declare-fun x23 () Int)
(declare-fun x523 () Bool)
(declare-fun x873 () Bool)
(declare-fun x923 () Int)
(declare-fun x632 () Int)
(declare-fun x715 () Int)
(declare-fun x1166 () Bool)
(declare-fun x1246 () Int)
(declare-fun x161 () Int)
(declare-fun x166 () Bool)
(declare-fun x120 () Int)
(declare-fun x485 () Bool)
(declare-fun x477 () Int)
(declare-fun x809 () Int)
(declare-fun x1012 () Bool)
(declare-fun x1189 (Int) Int)
(declare-fun x557 () Int)
(declare-fun x358 () Int)
(declare-fun x1283 () Int)
(declare-fun x150 () Int)
(declare-fun x1122 () Bool)
(declare-fun x656 () Int)
(declare-fun x807 () Bool)
(declare-fun x468 () x1153)
(declare-fun x882 () Int)
(declare-fun x800 () Bool)
(declare-fun x321 () Int)
(declare-fun x1066 () Bool)
(declare-fun x585 () Int)
(declare-fun x885 () Bool)
(declare-fun x440 () Bool)
(declare-fun x938 () Int)
(declare-fun x387 () Bool)
(declare-fun x1127 () Bool)
(declare-fun x383 () Int)
(declare-fun x348 () Int)
(declare-fun x895 () Int)
(declare-fun x452 () Int)
(declare-fun x1135 () Int)
(declare-fun x94 () Int)
(declare-fun x395 () Int)
(declare-fun x646 () Bool)
(declare-fun x25 () Int)
(declare-fun x528 () Bool)
(declare-fun x1026 () Int)
(declare-fun x322 () Int)
(declare-fun x843 () Bool)
(declare-fun x701 () Int)
(declare-fun x463 () Int)
(declare-fun x360 () Int)
(declare-fun x972 () Int)
(declare-fun x889 () Bool)
(declare-fun x1208 () Int)
(declare-fun x123 () Bool)
(declare-fun x1070 () Bool)
(declare-fun x1003 () Int)
(declare-fun x188 () Int)
(declare-fun x487 () Int)
(declare-fun x353 () Int)
(declare-fun x13 () Bool)
(declare-fun x1199 () Bool)
(declare-fun x148 () Int)
(declare-fun x582 () Int)
(declare-fun x879 () Bool)
(declare-fun x936 () Int)
(declare-fun x695 () Int)
(declare-fun x75 () Bool)
(declare-fun x1017 () Int)
(declare-fun x1068 () Int)
(declare-fun x683 () Int)
(declare-fun x49 () Bool)
(declare-fun x20 () Int)
(declare-fun x1102 () Int)
(declare-fun x1297 () Int)
(declare-fun x63 () Bool)
(declare-fun x1317 () Bool)
(declare-fun x461 () Bool)
(declare-fun x1204 () Int)
(declare-fun x370 () Int)
(declare-fun x437 () Int)
(declare-fun x935 (Int) Int)
(declare-fun x795 () Int)
(declare-fun x718 () Int)
(declare-fun x48 () Bool)
(declare-fun x624 () Bool)
(declare-fun x470 () Int)
(declare-fun x141 () Bool)
(declare-fun x907 () Bool)
(declare-fun x319 () Bool)
(declare-fun x937 () Int)
(declare-fun x251 (Int) Int)
(declare-fun x564 () Bool)
(declare-fun x1005 () Int)
(declare-fun x85 () Bool)
(declare-fun x531 () Bool)
(declare-fun x280 () Bool)
(declare-fun x717 () Int)
(declare-fun x1078 () Int)
(declare-fun x433 () Bool)
(declare-fun x99 () Int)
(declare-fun x332 () Int)
(declare-fun x1280 () Int)
(declare-fun x565 () Int)
(declare-fun x490 () Int)
(declare-fun x255 () Int)
(declare-fun x62 () Int)
(declare-fun x712 () Bool)
(declare-fun x190 () Int)
(declare-fun x1151 () Int)
(declare-fun x555 () Int)
(declare-fun x678 () Int)
(declare-fun x1170 () Bool)
(declare-fun x617 (Int) Int)
(declare-fun x42 () Bool)
(declare-fun x573 () Bool)
(declare-fun x1219 () Int)
(declare-fun x1254 () Bool)
(declare-fun x377 () Int)
(declare-fun x963 () Bool)
(declare-fun x1115 () Bool)
(declare-fun x898 () Bool)
(declare-fun x1226 () Int)
(declare-fun x1042 () Int)
(declare-fun x645 () Int)
(declare-fun x631 () Int)
(declare-fun x634 () Int)
(declare-fun x698 () Int)
(declare-fun x887 () x1153)
(declare-fun x659 () Bool)
(declare-fun x1142 () Int)
(declare-fun x37 () Int)
(declare-fun x475 () Int)
(declare-fun x76 () Bool)
(declare-fun x1019 () Bool)
(declare-fun x1284 () Bool)
(declare-fun x964 () Bool)
(declare-fun x1213 () Bool)
(declare-fun x1211 () Int)
(declare-fun x928 () Int)
(declare-fun x240 () Bool)
(declare-fun x1222 () Int)
(declare-fun x400 () Int)
(declare-fun x72 () Bool)
(declare-fun x143 () Int)
(declare-fun x609 () Bool)
(declare-fun x793 () Bool)
(declare-fun x574 () Int)
(declare-fun x837 (Int Int) Int)
(declare-fun x548 () Int)
(declare-fun x1167 () Bool)
(declare-fun x105 () Int)
(declare-fun x183 () Bool)
(declare-fun x1282 () Int)
(declare-fun x989 () Bool)
(declare-fun x1253 () Int)
(declare-fun x214 () Bool)
(declare-fun x104 () Bool)
(declare-fun x397 () Bool)
(declare-fun x578 () Int)
(declare-fun x71 () Int)
(declare-fun x816 () Bool)
(declare-fun x427 () Bool)
(declare-fun x404 () Bool)
(declare-fun x544 () Bool)
(declare-fun x886 () Int)
(declare-fun x1275 () Int)
(declare-fun x867 () Int)
(declare-fun x1008 () Bool)
(declare-fun x1231 () Bool)
(declare-fun x344 (Int) Int)
(declare-fun x197 () Int)
(declare-fun x784 () Bool)
(declare-fun x430 () Int)
(declare-fun x268 () Bool)
(declare-fun x21 () Int)
(declare-fun x232 () Int)
(declare-fun x1224 () Bool)
(declare-fun x1082 (Int) Int)
(declare-fun x88 () Bool)
(declare-fun x599 () Int)
(declare-fun x508 () Bool)
(declare-fun x511 () Bool)
(declare-fun x434 () Bool)
(declare-fun x1291 () Bool)
(declare-fun x1181 () Int)
(declare-fun x732 () Bool)
(declare-fun x242 () Bool)
(declare-fun x261 () Int)
(declare-fun x95 () Bool)
(declare-fun x381 () Int)
(declare-fun x806 () Bool)
(declare-fun x1198 () Int)
(declare-fun x883 () Int)
(declare-fun x92 () Int)
(declare-fun x69 () Int)
(declare-fun x640 (x1153) Int)
(declare-fun x612 () Int)
(declare-fun x735 () Int)
(declare-fun x205 () Bool)
(declare-fun x1015 () Bool)
(declare-fun x431 () Int)
(declare-fun x934 () Bool)
(declare-fun x283 () Bool)
(declare-fun x908 () Int)
(declare-fun x1293 () Bool)
(declare-fun x707 () Int)
(declare-fun x295 () Bool)
(declare-fun x1103 () Bool)
(declare-fun x792 () Int)
(declare-fun x1201 () Bool)
(declare-fun x844 () Bool)
(declare-fun x294 () Bool)
(declare-fun x1073 () Int)
(declare-fun x116 () Int)
(declare-fun x643 () Int)
(declare-fun x222 () Bool)
(declare-fun x89 () Int)
(declare-fun x680 () Bool)
(declare-fun x399 () Bool)
(declare-fun x1266 () Bool)
(declare-fun x1175 () Bool)
(declare-fun x642 () Int)
(declare-fun x176 () Bool)
(declare-fun x990 () Bool)
(declare-fun x369 () Int)
(declare-fun x1301 () Bool)
(declare-fun x407 () Int)
(declare-fun x238 () Int)
(declare-fun x1056 () Bool)
(declare-fun x367 () Bool)
(declare-fun x731 () Int)
(declare-fun x220 () Bool)
(declare-fun x174 () Int)
(declare-fun x472 () Bool)
(declare-fun x647 () Int)
(declare-fun x1191 () Int)
(declare-fun x117 () Bool)
(declare-fun x389 () Int)
(declare-fun x24 () Int)
(declare-fun x1299 () Int)
(declare-fun x171 () Int)
(declare-fun x507 () Int)
(declare-fun x1088 () Int)
(declare-fun x1217 () Int)
(declare-fun x625 () Bool)
(declare-fun x805 () Bool)
(declare-fun x1260 () Bool)
(declare-fun x674 () Int)
(declare-fun x927 () Bool)
(declare-fun x746 () Int)
(declare-fun x1052 () Bool)
(declare-fun x112 () Int)
(declare-fun x930 () Int)
(declare-fun x1006 () Int)
(declare-fun x393 () Bool)
(declare-fun x836 () Bool)
(declare-fun x1045 () Int)
(declare-fun x769 () Int)
(declare-fun x1220 () Bool)
(declare-fun x365 () Int)
(declare-fun x320 () Int)
(declare-fun x394 () Int)
(declare-fun x435 () Int)
(declare-fun x429 (Int) Int)
(declare-fun x517 () Int)
(declare-fun x561 () Int)
(declare-fun x1120 () Int)
(declare-fun x780 () Int)
(declare-fun x145 () Int)
(declare-fun x315 () Int)
(declare-fun x390 () Int)
(declare-fun x971 () Int)
(declare-fun x855 () Int)
(declare-fun x245 () Int)
(declare-fun x613 () Int)
(declare-fun x767 () Int)
(declare-fun x469 () Int)
(declare-fun x67 () Bool)
(declare-fun x758 () Int)
(declare-fun x868 () Int)
(declare-fun x204 () Bool)
(declare-fun x586 () Int)
(declare-fun x862 () Int)
(declare-fun x783 () Bool)
(declare-fun x992 () Int)
(declare-fun x926 () Int)
(declare-fun x965 () Bool)
(declare-fun x1279 () Int)
(declare-fun x1149 () Int)
(declare-fun x499 () Bool)
(declare-fun x520 () Int)
(declare-fun x318 () Int)
(declare-fun x1161 () x1153)
(declare-fun x1034 () Bool)
(declare-fun x444 () Int)
(declare-fun x958 () Int)
(declare-fun x1095 () Int)
(declare-fun x740 () Int)
(declare-fun x291 () x1153)
(declare-fun x115 () Int)
(declare-fun x333 () Bool)
(declare-fun x47 () Int)
(declare-fun x1235 () Int)
(declare-fun x282 () Int)
(declare-fun x608 () Bool)
(declare-fun x347 () Int)
(declare-fun x1089 () Int)
(declare-fun x1320 () Int)
(declare-fun x386 () Bool)
(declare-fun x866 () Int)
(declare-fun x568 () Bool)
(declare-fun x668 () Int)
(declare-fun x702 () Bool)
(declare-fun x106 () Int)
(declare-fun x299 () Int)
(declare-fun x134 () Int)
(declare-fun x725 () Int)
(declare-fun x504 () Int)
(declare-fun x1321 () Int)
(declare-fun x50 () Int)
(declare-fun x859 () Int)
(declare-fun x1274 () Bool)
(declare-fun x1050 () Int)
(declare-fun x481 () Bool)
(declare-fun x1131 () Bool)
(declare-fun x252 () Int)
(declare-fun x1144 () Int)
(declare-fun x422 () Int)
(declare-fun x961 () Int)
(declare-fun x425 () Bool)
(declare-fun x51 () Int)
(declare-fun x460 () Bool)
(declare-fun x956 () Int)
(declare-fun x777 () Bool)
(declare-fun x96 () Bool)
(declare-fun x418 () Int)
(declare-fun x968 () Int)
(declare-fun x1033 () Int)
(declare-fun x607 () Int)
(declare-fun x818 () Bool)
(declare-fun x129 () Int)
(declare-fun x751 () Bool)
(declare-fun x980 () Int)
(declare-fun x81 () Int)
(declare-fun x1160 () Bool)
(declare-fun x655 () Bool)
(declare-fun x917 () Int)
(declare-fun x1171 () Int)
(declare-fun x78 () Bool)
(declare-fun x842 () Bool)
(declare-fun x118 () Int)
(declare-fun x61 () Bool)
(declare-fun x951 () Int)
(declare-fun x219 (x1153) Int)
(declare-fun x1037 () Int)
(declare-fun x130 () Bool)
(declare-fun x595 () Int)
(declare-fun x734 () Int)
(declare-fun x1016 () Bool)
(declare-fun x290 () Bool)
(declare-fun x1286 () Int)
(declare-fun x1140 () Int)
(declare-fun x334 () x1153)
(declare-fun x962 () Bool)
(declare-fun x298 () Int)
(declare-fun x803 () Int)
(declare-fun x1086 () Int)
(declare-fun x1041 () Bool)
(declare-fun x653 () Int)
(declare-fun x417 () Int)
(declare-fun x865 () Bool)
(declare-fun x65 () Int)
(declare-fun x896 () Bool)
(declare-fun x762 () Bool)
(declare-fun x263 () Int)
(declare-fun x727 () Bool)
(declare-fun x302 () Bool)
(declare-fun x516 () Bool)
(declare-fun x621 () Bool)
(declare-fun x905 () Bool)
(declare-fun x787 () Int)
(declare-fun x316 () Int)
(declare-fun x1250 () Int)
(declare-fun x566 () Int)
(declare-fun x749 () Int)
(declare-fun x661 () Bool)
(declare-fun x464 () Bool)
(declare-fun x514 () Int)
(declare-fun x438 () Int)
(declare-fun x357 () Int)
(declare-fun x82 () Bool)
(declare-fun x924 () Bool)
(declare-fun x1001 () Bool)
(declare-fun x149 () Int)
(declare-fun x584 () Bool)
(declare-fun x380 () Bool)
(declare-fun x881 () Bool)
(declare-fun x914 () Bool)
(declare-fun x52 () Bool)
(declare-fun x1277 () Int)
(declare-fun x840 () Int)
(declare-fun x15 () Int)
(declare-fun x754 () Bool)
(declare-fun x301 () Bool)
(declare-fun x1074 (x1153) Int)
(declare-fun x1117 () Bool)
(declare-fun x1065 () Int)
(declare-fun x56 () Int)
(declare-fun x198 () Bool)
(declare-fun x1252 () Int)
(declare-fun x820 () Int)
(declare-fun x991 () Bool)
(declare-fun x686 () Bool)
(declare-fun x786 () Bool)
(declare-fun x641 () Bool)
(declare-fun x801 () Int)
(declare-fun x1114 () Int)
(declare-fun x111 () Bool)
(declare-fun x133 () Int)
(declare-fun x721 () Bool)
(declare-fun x497 () Int)
(declare-fun x100 () x1153)
(declare-fun x583 () Int)
(declare-fun x505 () Int)
(declare-fun x447 () Bool)
(declare-fun x690 () Bool)
(declare-fun x1085 () Bool)
(declare-fun x1240 () Bool)
(declare-fun x890 () Int)
(declare-fun x297 () Bool)
(declare-fun x753 () Bool)
(declare-fun x755 () Bool)
(declare-fun x620 () Int)
(declare-fun x1069 () Bool)
(declare-fun x639 () Int)
(declare-fun x289 () Int)
(declare-fun x1067 () Int)
(declare-fun x109 () Bool)
(declare-fun x29 () Int)
(declare-fun x832 () Bool)
(declare-fun x1174 () Int)
(declare-fun x1044 () Bool)
(declare-fun x1257 () Int)
(declare-fun x745 () Int)
(declare-fun x692 () Bool)
(declare-fun x244 () Int)
(declare-fun x893 () Int)
(declare-fun x553 () Bool)
(declare-fun x1302 () Int)
(declare-fun x1323 () Bool)
(declare-fun x1054 () Int)
(declare-fun x1251 () Int)
(declare-fun x1305 () Int)
(declare-fun x798 () Bool)
(declare-fun x146 () Int)
(declare-fun x940 () Int)
(declare-fun x703 () Bool)
(declare-fun x681 () Bool)
(declare-fun x325 () Int)
(declare-fun x311 () Bool)
(declare-fun x180 () Bool)
(declare-fun x960 () Bool)
(declare-fun x909 () Bool)
(declare-fun x218 () Bool)
(declare-fun x1173 () Bool)
(declare-fun x812 () Bool)
(declare-fun x518 () Int)
(declare-fun x162 () Int)
(declare-fun x107 () Bool)
(declare-fun x535 () Bool)
(declare-fun x802 () Int)
(declare-fun x1053 () Int)
(declare-fun x152 () Bool)
(declare-fun x200 () Bool)
(declare-fun x439 () Bool)
(declare-fun x87 () Int)
(declare-fun x957 () Int)
(declare-fun x1310 () Int)
(declare-fun x512 () Int)
(declare-fun x372 () Bool)
(declare-fun x1014 () Bool)
(declare-fun x657 () Int)
(declare-fun x677 () Int)
(declare-fun x1271 () Int)
(declare-fun x217 () Int)
(declare-fun x894 () Bool)
(declare-fun x1018 () Int)
(declare-fun x1245 () Int)
(declare-fun x446 () Int)
(declare-fun x1162 () Int)
(declare-fun x637 () Int)
(declare-fun x1197 () Int)
(declare-fun x1300 () Bool)
(declare-fun x170 () Bool)
(declare-fun x442 () Int)
(declare-fun x1234 () Int)
(declare-fun x1101 () Bool)
(declare-fun x983 () Int)
(declare-fun x1237 () Bool)
(declare-fun x307 () Int)
(declare-fun x18 () Int)
(declare-fun x899 () Int)
(declare-fun x355 () Int)
(declare-fun x658 () x1153)
(declare-fun x546 () Int)
(declare-fun x988 () Bool)
(declare-fun x479 () Int)
(declare-fun x1236 () Int)
(declare-fun x579 () Int)
(declare-fun x413 () Int)
(declare-fun x571 () Bool)
(declare-fun x664 () Int)
(declare-fun x547 () Int)
(declare-fun x314 () Bool)
(declare-fun x984 () Bool)
(declare-fun x17 () Int)
(declare-fun x736 () Bool)
(declare-fun x388 () Bool)
(declare-fun x946 () Int)
(declare-fun x1232 () Int)
(declare-fun x248 () Bool)
(declare-fun x748 () Int)
(declare-fun x522 () Int)
(declare-fun x209 () Int)
(declare-fun x436 () Int)
(declare-fun x711 () Bool)
(declare-fun x296 () Bool)
(declare-fun x969 () Int)
(declare-fun x987 () Bool)
(declare-fun x119 () Int)
(declare-fun x774 () Bool)
(declare-fun x913 () Int)
(declare-fun x1287 () Int)
(declare-fun x1212 () Int)
(declare-fun x995 () Int)
(declare-fun x2 () Int)
(declare-fun x224 () Int)
(declare-fun x108 () Int)
(declare-fun x1025 () Int)
(declare-fun x68 () Int)
(define-fun x462 ((x1153 x1153) (x649 Int)) x1153 (ite ((_ is x158) x1153) (x158 (x1249 x1153) (+ x649 (x74 x1153))) (ite ((_ is x473) x1153) (x473 (x474 x1153) (x770 x1153) (+ x649 (x594 x1153))) (x495 (+ (x173 x1153) x649)))))
(define-fun x804 ((x392 Int)) Int (ite (and (>= x392 0) (< x392 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x392 (- x392 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x521 ((x392 Int)) Int (ite (and (>= x392 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x392 0)) (+ x392 115792089237316195423570985008687907853269984665640564039457584007913129639936) x392))
(define-fun x684 ((x1021 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1021) (>= x1021 0)))
(define-fun x274 ((x1021 Int)) Bool (and (= x1021 (x837 x1021 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x1021 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1021))))
(define-fun x716 ((x1021 Int)) Bool (and (= (x837 0 x1021) 0) (= 0 (x837 x1021 0))))
(define-fun x533 ((x1021 Int)) Bool (= x1021 (x837 x1021 x1021)))
(define-fun x168 ((x1021 Int)) Bool (and (x274 x1021) (x533 x1021) (x716 x1021)))
(define-fun x34 ((x1021 Int) (x954 Int)) Bool (= (x837 x1021 x954) (x837 x954 x1021)))
(define-fun x550 ((x1021 Int) (x954 Int)) Bool (and (=> (>= x954 0) (>= x954 (x837 x1021 x954))) (=> (>= x1021 0) (<= (x837 x1021 x954) x1021)) (<= 0 (x837 x1021 x954))))
(define-fun x191 ((x1021 Int) (x954 Int)) Bool (and (x34 x1021 x954) (x550 x1021 x954)))
(define-fun x823 ((x1021 Int)) Bool (= (+ (mod x1021 32) (x837 x1021 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x1021 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1215 ((x1021 Int)) Bool (and (x191 x1021 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x823 x1021)))
(define-fun x1298 ((x1021 Int)) Bool (= (x837 x1021 1461501637330902918203684832716283019655932542975) (mod x1021 1461501637330902918203684832716283019655932542976)))
(define-fun x932 ((x1021 Int)) Bool (and (x1298 x1021) (x191 x1021 1461501637330902918203684832716283019655932542975)))
(define-fun x1205 ((x1021 Int)) Bool (= (mod x1021 1099511627776) (x837 x1021 1099511627775)))
(define-fun x1247 ((x1021 Int)) Bool (and (x191 x1021 1099511627775) (x1205 x1021)))
(define-fun x273 ((x286 Int)) Int (x251 x286))
(define-fun x513 ((x286 x1153)) Int (ite (= (x39 x19) x286) x1278 (x733 x286)))
(define-fun x310 ((x286 x1153)) Int (ite (= x286 (x39 x1060)) x503 (x513 x286)))
(define-fun x591 ((x286 Int)) Int (ite (= 288 x286) x559 (x935 x286)))
(define-fun x538 ((x286 x1153)) Int (x619 x286))
(define-fun x480 ((x286 x1153)) Int (x619 x286))
(define-fun x230 ((x286 x1153)) Int (ite x646 (x480 x286) (ite x362 (x480 x286) (x619 x286))))
(define-fun x1030 ((x286 x1153)) Int (ite x382 (x619 x286) (ite x43 (x538 x286) (ite x260 (x230 x286) (x619 x286)))))
(define-fun x654 ((x286 x1153)) Int (ite (= x1161 x286) x452 (x1030 x286)))
(define-fun x1055 ((x286 x1153)) Int (ite (= x286 x1161) x972 (x654 x286)))
(define-fun x8 ((x286 x1153)) Int (ite x414 (x1055 x286) (x619 x286)))
(define-fun x759 ((x286 x1153)) Int (x494 x286))
(define-fun x766 ((x286 x1153)) Int (x494 x286))
(define-fun x272 ((x286 x1153)) Int (ite x646 (x766 x286) (ite x362 (x766 x286) (x494 x286))))
(define-fun x1092 ((x286 x1153)) Int (ite x382 (x494 x286) (ite x43 (x759 x286) (ite x260 (x272 x286) (x494 x286)))))
(define-fun x1156 ((x286 x1153)) Int (ite (= x1161 x286) 3 (x1092 x286)))
(define-fun x1119 ((x286 x1153)) Int (ite x414 (x1156 x286) (x494 x286)))
(define-fun x1022 ((x286 Int)) Int (ite (= x286 x190) x149 (x591 x286)))
(define-fun x336 ((x286 Int)) Int (ite (and (> (+ x1033 x149) x286) (>= x286 x1033)) (x251 (+ x118 (- x286 x1033))) (x1022 x286)))
(define-fun x1311 ((x286 Int)) Int (ite (= x791 x286) 0 (x336 x286)))
(define-fun x411 ((x286 Int)) Int (ite (= 320 x286) x190 (x1311 x286)))
(define-fun x838 ((x286 Int)) Int (ite x553 (x591 x286) (x411 x286)))
(define-fun x660 ((x286 Int)) Int (ite (= x286 x1095) x357 (x838 x286)))
(define-fun x1009 ((x286 Int)) Int (ite (= x37 x286) x1086 (x660 x286)))
(define-fun x1150 ((x286 Int)) Int (ite (and (<= x327 x286) (< x286 (+ x1086 x327))) (x251 (+ x437 (- x286 x327))) (x1009 x286)))
(define-fun x874 ((x286 Int)) Int (ite (= x298 x286) 0 (x1150 x286)))
(define-fun x309 ((x286 Int)) Int (ite (= x631 x286) x37 (x874 x286)))
(define-fun x391 ((x286 Int)) Int (ite x689 (x660 x286) (x309 x286)))
(define-fun x11 ((x286 Int)) Int (ite (= x286 x69) x245 (x391 x286)))
(define-fun x256 ((x286 Int)) Int (ite (= x286 x337) x307 (x11 x286)))
(define-fun x742 ((x286 Int)) Int (ite (and (<= x29 x286) (< x286 (+ x307 x29))) (x251 (+ x656 (- x286 x29))) (x256 x286)))
(define-fun x1216 ((x286 Int)) Int (ite (= x286 x1279) 0 (x742 x286)))
(define-fun x966 ((x286 Int)) Int (ite (= x286 x278) x337 (x1216 x286)))
(define-fun x379 ((x286 Int)) Int (ite x929 (x11 x286) (x966 x286)))
(define-fun x1039 ((x286 Int)) Int (ite (= x286 x250) x108 (x379 x286)))
(define-fun x981 ((x286 Int)) Int (ite (= x286 x1195) x908 (x1039 x286)))
(define-fun x588 ((x286 Int)) Int (ite (= x286 x714) x1169 (x981 x286)))
(define-fun x638 ((x286 Int)) Int (ite (= x356 x286) x153 (x588 x286)))
(define-fun x193 ((x286 Int)) Int (ite (= x286 x657) x1183 (x638 x286)))
(define-fun x1023 ((x286 Int)) Int (ite (= x561 x286) x1195 (x193 x286)))
(define-fun x147 ((x286 Int)) Int (ite x98 (x1039 x286) (x1023 x286)))
(define-fun x910 ((x286 Int)) Int (ite (= x831 x286) x331 (x147 x286)))
(define-fun x1154 ((x286 Int)) Int (ite (= x54 x286) x507 (x910 x286)))
(define-fun x1196 ((x286 Int)) Int (ite x1201 (x910 x286) (x1154 x286)))
(define-fun x38 ((x286 Int)) Int (ite (= x286 x915) x1098 (x1196 x286)))
(define-fun x64 ((x286 x1153)) Int (ite (= (x39 x285) x286) x792 (x310 x286)))
(define-fun x1148 ((x286 x1153)) Int (ite (= (x39 x547) x286) x213 (x64 x286)))
(define-fun x943 ((x286 x1153)) Int (x1148 x286))
(define-fun x1176 ((x286 x1153)) Int (ite (= x286 (x39 x547)) x389 (x943 x286)))
(define-fun x540 ((x286 x1153)) Int (ite (= (x39 x285) x286) x768 (x1176 x286)))
(define-fun x471 ((x286 x1153)) Int (ite x646 (x943 x286) (ite x362 (x540 x286) (x310 x286))))
(define-fun x186 ((x286 x1153)) Int (ite x382 (x310 x286) (ite x43 (x310 x286) (ite x260 (x471 x286) (x310 x286)))))
(define-fun x249 ((x286 x1153)) Int (x640 x286))
(define-fun x1233 ((x286 x1153)) Int (x640 x286))
(define-fun x27 ((x286 x1153)) Int (ite x646 (x1233 x286) (ite x362 (x1233 x286) (x640 x286))))
(define-fun x618 ((x286 x1153)) Int (ite x382 (x640 x286) (ite x43 (x249 x286) (ite x260 (x27 x286) (x640 x286)))))
(define-fun x601 ((x286 Int)) Int (ite (= x286 x1006) x1040 (x38 x286)))
(define-fun x7 ((x286 Int)) Int (ite (and (> (+ x1242 x1040) x286) (>= x286 x1242)) (x251 (+ (- x286 x1242) x342)) (x601 x286)))
(define-fun x164 ((x286 Int)) Int (ite (= x869 x286) 0 (x7 x286)))
(define-fun x155 ((x286 Int)) Int (ite (= x850 x286) x1006 (x164 x286)))
(define-fun x1075 ((x286 Int)) Int (ite x154 (x38 x286) (x155 x286)))
(define-fun x269 ((x286 Int)) Int (ite (= x40 x286) x1112 (x1075 x286)))
(define-fun x493 ((x286 Int)) Int (ite (= x465 x286) x237 (x269 x286)))
(define-fun x1146 ((x286 Int)) Int (ite (and (<= x1002 x286) (> (+ x1002 x237) x286)) (x251 (+ (- x286 x1002) x769)) (x493 x286)))
(define-fun x221 ((x286 Int)) Int (ite (= x286 x277) 0 (x1146 x286)))
(define-fun x796 ((x286 Int)) Int (ite (= x286 x691) x465 (x221 x286)))
(define-fun x851 ((x286 Int)) Int (ite x515 (x269 x286) (x796 x286)))
(define-fun x1209 ((x286 Int)) Int (ite (= x286 x801) x1065 (x851 x286)))
(define-fun x828 ((x286 Int)) Int (ite (= x286 x405) x595 (x1209 x286)))
(define-fun x317 ((x286 Int)) Int (ite (and (>= x286 x790) (> (+ x595 x790) x286)) (x251 (+ x731 (- x286 x790))) (x828 x286)))
(define-fun x1202 ((x286 Int)) Int (ite (= x286 x30) 0 (x317 x286)))
(define-fun x1097 ((x286 Int)) Int (ite (= x286 x718) x405 (x1202 x286)))
(define-fun x982 ((x286 Int)) Int (ite x989 (x1209 x286) (x1097 x286)))
(define-fun x1139 ((x286 Int)) Int (ite (= x286 x55) x789 (x982 x286)))
(define-fun x36 ((x286 Int)) Int (ite (= x1029 x286) x1137 (x1139 x286)))
(define-fun x1011 ((x286 Int)) Int (ite (= x785 x286) x930 (x36 x286)))
(define-fun x539 ((x286 Int)) Int (ite (= x286 x110) x1080 (x1011 x286)))
(define-fun x872 ((x286 Int)) Int (ite (= x666 x286) x857 (x539 x286)))
(define-fun x560 ((x286 Int)) Int (ite (= x286 x582) x1029 (x872 x286)))
(define-fun x103 ((x286 Int)) Int (ite x1160 (x1139 x286) (x560 x286)))
(define-fun x1123 ((x286 Int)) Int (ite (= x286 x501) x365 (x103 x286)))
(define-fun x685 ((x286 Int)) Int (ite (= x286 x1315) x1151 (x1123 x286)))
(define-fun x131 ((x286 Int)) Int (ite x1019 (x1123 x286) (x685 x286)))
(define-fun x410 ((x286 Int)) Int (ite (= x286 x835) 101252785324535458888692376134782526488201703179675774606846032596167196409856 (x131 x286)))
(define-fun x709 ((x286 Int)) Int (ite (= x632 x286) x347 (x410 x286)))
(define-fun x1294 ((x286 Int)) Int (ite (= x438 x286) 259200 (x709 x286)))
(define-fun x841 ((x286 Int)) Int (ite (= x835 x286) x66 (x1294 x286)))
(define-fun x551 ((x286 Int)) Int (ite (= x589 x286) 49030629496366843004481757320339876143172005997263197338613197606857211904000 (x841 x286)))
(define-fun x304 ((x286 Int)) Int (ite (= x286 x360) x1211 (x551 x286)))
(define-fun x948 ((x286 Int)) Int (ite (= x997 x286) x347 (x304 x286)))
(define-fun x443 ((x286 Int)) Int (ite (= x1144 x286) x1060 (x948 x286)))
(define-fun x1256 ((x286 Int)) Int (ite x382 (x131 x286) (x443 x286)))
(define-fun x57 ((x286 x1153)) Int (x1074 x286))
(define-fun x977 ((x286 x1153)) Int (x1074 x286))
(define-fun x558 ((x286 x1153)) Int (ite x646 (x977 x286) (ite x362 (x977 x286) (x1074 x286))))
(define-fun x996 ((x286 x1153)) Int (ite x382 (x1074 x286) (ite x43 (x57 x286) (ite x260 (x558 x286) (x1074 x286)))))
(define-fun x875 ((x286 Int)) Int (ite (= x820 x286) 38731024311866695680078894486728619323467920029808689935542550702492038987776 (x1256 x286)))
(define-fun x10 ((x286 Int)) Int (ite (= x286 x946) x469 (x875 x286)))
(define-fun x1261 ((x286 Int)) Int (ite (= x286 x634) 288 (x10 x286)))
(define-fun x345 ((x286 Int)) Int (ite (= x282 x286) x644 (x1261 x286)))
(define-fun x581 ((x286 Int)) Int (ite (= x286 x325) x171 (x345 x286)))
(define-fun x706 ((x286 Int)) Int (ite (= x904 x286) x1159 (x581 x286)))
(define-fun x476 ((x286 Int)) Int (ite (= x286 x22) x992 (x706 x286)))
(define-fun x201 ((x286 Int)) Int (ite (= x1120 x286) x677 (x476 x286)))
(define-fun x12 ((x286 Int)) Int (ite x953 (x476 x286) (ite x1218 (x706 x286) (ite x367 (x581 x286) (ite x773 (x345 x286) (x201 x286))))))
(define-fun x253 ((x286 Int)) Int (ite (= x1036 x286) 0 (x12 x286)))
(define-fun x761 ((x286 Int)) Int (ite x508 (x12 x286) (x253 x286)))
(define-fun x459 ((x286 Int)) Int (ite (= x514 x286) x1316 (x761 x286)))
(define-fun x597 ((x286 Int)) Int (ite (= x286 x799) x151 (x459 x286)))
(define-fun x1051 ((x286 Int)) Int (ite (= x1227 x286) x635 (x597 x286)))
(define-fun x1081 ((x286 Int)) Int (ite (= x552 x286) x1276 (x1051 x286)))
(define-fun x216 ((x286 Int)) Int (ite (= x286 x633) x739 (x1081 x286)))
(define-fun x530 ((x286 Int)) Int (ite (= x536 x286) x1295 (x216 x286)))
(define-fun x156 ((x286 Int)) Int (ite x1052 (x216 x286) (ite x1041 (x1081 x286) (ite x60 (x1051 x286) (ite x879 (x597 x286) (x530 x286))))))
(define-fun x1304 ((x286 Int)) Int (ite (= x678 x286) 0 (x156 x286)))
(define-fun x210 ((x286 Int)) Int (ite x109 (x156 x286) (x1304 x286)))
(define-fun x1312 ((x286 Int)) Int (ite (= x194 x286) x822 (x210 x286)))
(define-fun x1110 ((x286 x1153)) Int (ite (= (x39 x1060) x286) x261 (x186 x286)))
(define-fun x722 ((x286 x1153)) Int (ite (= x286 (x39 x590)) x497 (x1110 x286)))
(define-fun x265 ((x286 Int)) Int (ite (= x286 128) 89953063794570797914675343120038501642627609741519254829220540789936042803200 (x630 x286)))
(define-fun x1309 ((x286 Int)) Int (ite (= 132 x286) x239 (x265 x286)))
(define-fun x26 ((x286 Int)) Int (ite (= x286 164) x1265 (x1309 x286)))
(define-fun x880 ((x286 x1153)) Int (ite x247 (x827 x286) (x722 x286)))
(define-fun x1285 ((x286 x1153)) Int (ite (= x286 (x39 x590)) x1077 (x880 x286)))
(define-fun x457 ((x286 Int)) Int (ite (= x286 128) 89953063794570797914675343120038501642627609741519254829220540789936042803200 (x757 x286)))
(define-fun x967 ((x286 Int)) Int (ite (= 132 x286) x239 (x457 x286)))
(define-fun x947 ((x286 Int)) Int (ite (= 164 x286) x938 (x967 x286)))
(define-fun x1109 ((x286 Int)) Int (ite (= x286 128) x853 (x947 x286)))
(define-fun x614 ((x286 Int)) Int (ite x401 (x947 x286) (x1109 x286)))
(define-fun x877 ((x286 Int)) Int (ite (= 0 x286) x853 (x279 x286)))
(define-fun x33 ((x286 Int)) Int (ite x401 (x279 x286) (x877 x286)))
(define-fun x999 ((x286 Int)) Int (ite (= x286 x1003) (ite true 1 0) (x429 x286)))
(define-fun x526 ((x286 Int)) Int (ite (= 128 x286) x1320 (x26 x286)))
(define-fun x839 ((x286 Int)) Int (ite x670 (x26 x286) (x526 x286)))
(define-fun x385 ((x286 Int)) Int (ite (= x286 0) x1320 (x1189 x286)))
(define-fun x693 ((x1021 Int)) Bool (=> (and (not (= 1997499061 x1021)) (not (= x1021 18446744073709551615)) (not (= 65536 x1021)) (not (= x1021 1631253430)) (not (= 2835717307 x1021)) (not (= x1021 418493994)) (not (= 1000000000000000000000000000 x1021)) (not (= x1021 2307130307)) (not (= x1021 101252785324535458888692376134782526488201703179675774606846032596167196409856)) (not (= x1021 31536000000000000000000000000000000)) (not (= x1021 32000000000000000000)) (not (= x1021 4294967296)) (not (= 49030629496366843004481757320339876143172005997263197338613197606857211904000 x1021)) (not (= 66268296141940672851042108147304593538321322149885339258387047461996478413388 x1021)) (not (= 3755674541 x1021)) (not (= x1021 3414818225)) (not (= 1461501637330902918203684832716283019655932542975 x1021)) (not (= x1021 452312848583266388373324160190187140051835877600158453279131187530910662655)) (not (= 1461501637330902918203684832716283019655932542976 x1021)) (not (= 115792089237316195423570985008687907853269984665640 x1021)) (not (= x1021 2446411860)) (not (= 3336544575 x1021)) (not (= 1381722888 x1021)) (not (= 1818647125 x1021)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1021)) (not (= 38731024311866695680078894486728619323467920029808689935542550702492038987776 x1021)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1021)) (not (= 3515665801 x1021)) (not (= 1099511627776 x1021)) (not (= x1021 865950217)) (not (= 259200 x1021)) (not (= x1021 24000000000000000000)) (< 10000 x1021) (not (= 1099511627775 x1021)) (not (= x1021 3714247998)) (not (= x1021 1703538655)) (not (= x1021 31536000)) (not (= x1021 791671133)) (not (= 3498358313 x1021)) (not (= 2961265839 x1021)) (not (= 89953063794570797914675343120038501642627609741519254829220540789936042803200 x1021)) (not (= x1021 428079936)) (not (= x1021 3629318494)) (not (= x1021 65535)) (not (= 1008072988 x1021)) (not (= x1021 3578229791))) (not ((_ is x495) (x39 x1021)))))
(assert (x684 x739))
(assert (x684 x1262))
(assert (x684 x394))
(assert (= 3414818225 (x1124 (x495 3414818225))))
(assert (x684 x299))
(assert (= 65536 (x1124 (x495 65536))))
(assert (x684 x1054))
(assert (= (x39 89953063794570797914675343120038501642627609741519254829220540789936042803200) (x495 89953063794570797914675343120038501642627609741519254829220540789936042803200)))
(assert (= (x495 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x39 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x911 (and x397 x338)))
(assert (x684 x734))
(assert (x684 x244))
(assert (x684 x254))
(assert (x684 x937))
(assert (x684 x587))
(assert (x693 x583))
(assert (x684 x1058))
(assert (x684 x1183))
(assert (x1215 x534))
(assert (= (x495 3498358313) (x39 3498358313)))
(assert (= x467 (=> (= (= 0 x1321) x655) (and (=> (and (not x655) (and (= (x804 (+ x1005 128)) x1003) (= (x804 (+ 31 x270)) x172) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x172) x1005) (= x180 (or (and (> 32 x270) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x270) true)) (> x270 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (and (=> (and x180 (= x897 0)) x852) (=> (and (and (= x1206 (ite (< x453 x1100) 1 0)) (= x424 (ite (not x293) 1 0)) (= (x614 128) x802) (= (= x802 0) x293) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x802) x453) (= x408 (= x1193 0)) (= x1193 (x837 x424 x1206))) (not x180)) (and (=> (and (not x408) (= x897 0)) x852) (=> (and x408 (and (= x412 (mod (* x802 x1100) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> 1000000000000000000000000000 x752) x363) (= (x521 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x99)) x752) (= (div x412 31536000) x99))) (and (=> (and x363 (= x897 0)) x852) (=> (and (not x363) (and (= x957 (ite (> x883 x394) 1 0)) (= (x837 x707 x957) x780) (= (= x925 0) x651) (= x707 (ite (not x651) 1 0)) (= x394 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x925)) (= (x804 (+ 1000000000000000000000000000 x99)) x883) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x925) (= x335 (= x780 0)) (>= x925 0))) (and (=> (and (not x335) (= x897 0)) x852) (=> (and (and (= x302 (= 0 x667)) (= (x473 (x39 x3) (x495 15) 0) x313) (= x667 (x219 x313)) (>= 255 x667) (>= x667 0) (< x667 256) (= (div x1318 1000000000000000000000000000) x112) (= (div x1318 1000000000000000000000000000) x1017) (= (mod (* x925 x883) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1318)) x335) (and (=> (and x302 (and (>= x938 0) (<= x938 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x329 (< x938 x9)))) (and (=> (and (not x329) (and (<= 0 x938) (<= x1017 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x913 (x999 x1003)) (<= x938 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite (not x1225) 1 0) x1275) (= x1225 (= x913 0)) (= x517 (x310 (x39 x285))) (= x1240 (> x9 x517)) (= (x521 (- x938 x9)) x1258) (= (x804 (+ 96 x1003)) x284) (>= x1017 0))) (and (=> (and (and (= (x310 (x39 x547)) x308) (= x969 (x310 (x39 x285))) (= (and (>= x969 x1018) (< (+ x308 x1018) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x1015)) (not x1240)) (and (=> (and (and (= x956 (x196 (x39 x1060))) (= 0 x1186) (= x571 (= x679 (x614 x284))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x252 x1018)) (= x252 (x64 (x39 x547))) (= (x804 (+ x9 x252)) x213) (= (x310 (x39 x285)) x243) (= (> 4 x1186) x67) (= (- x243 x9) x792) (> x956 0) x571) x1015) (and (=> (and x67 (= x703 (> x1186 0))) (and (=> (and (not x703) (= true x772)) (and (=> (and x772 (and (= x332 0) (= x776 1))) x567) (=> (not x772) x1267))) (=> x703 x1267))) (=> (and (not x67) (and (not (= x143 3414818225)) (not (> 2961265839 x143)) (not (= x143 3578229791)) (not (= 3515665801 x143)) (not (= 3629318494 x143)) (not (= 3498358313 x143)) (not (< x143 2307130307)) (not (< x143 3414818225)))) x1267))) (=> (and (and (= x68 0) (= 0 x47)) (not x1015)) x609))) (=> (and (= x897 0) x1240) x852))) (=> (and x329 (= 0 x897)) x852))) (=> (and (= x897 0) (not x302)) x852))))))))))) (=> (and (= 0 x897) x655) x852)))))
(assert (x693 x590))
(assert (= (x495 259200) (x39 259200)))
(assert (x684 x657))
(assert (= x285 (x1124 (x39 x285))))
(assert (x684 x298))
(assert (= (=> (and (or (not x72) (and x72 (= x1036 (x804 (+ x599 x644))))) (= (< x644 x518) x72)) x268) x1132))
(assert (x684 x803))
(assert (= (and (not x368) x49) x214))
(assert (= (and x296 (not x692)) x1173))
(assert (= (and x793 x755) x362))
(assert (= (and x78 x166) x296))
(assert (x684 x188))
(assert (= (and x1300 x615) x1224))
(assert (x684 x915))
(assert (x684 x337))
(assert (= x346 (=> (and (= (x837 1461501637330902918203684832716283019655932542975 x583) x56) (<= 0 x452) (>= 65535 x861) (> 1461501637330902918203684832716283019655932542976 x452) (= (x462 x1292 1) x1161) (= (x618 x1161) x861) (= (x473 (x39 x56) (x495 2) 0) x1292) (= x271 false) (> 65536 x861) (>= 1461501637330902918203684832716283019655932542975 x452) (= (x996 x1161) x134) (<= 0 x861) (= x774 false) (>= 1099511627775 x134) (<= 0 x134) (= x546 (x837 1099511627775 x1219)) (< x134 1099511627776) (= (x1030 x1161) x452)) x208)))
(assert (x684 x586))
(assert (x684 x365))
(assert (= x626 (=> (and (= x316 (x804 (+ x116 32))) (= x75 (or x959 x292)) (= (mod (* x357 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1172) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1143) x432) (= x116 (x804 (+ x1287 x858))) (= x488 (x804 (+ 32 x1287))) (= x1143 (x804 (+ x606 31))) (= x631 (x804 (+ x1095 32))) (= x995 (ite x75 1 0)) (= x858 (x251 x488)) (= (x804 (+ x492 x316)) x254) (= (> x37 18446744073709551615) x292) (= x606 (x804 (+ 32 x1172))) (or (and (= (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x647)) (< x647 x767)) (and (> x647 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767))) (= 0 x995) (= x37 (x804 (+ x432 x1095))) (= x959 (> x1095 x37)) (not (> x254 x767)) (not (< 18446744073709551615 x357)) (= (< x316 x254) x181) (= (mod (* x357 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x492) (not (> x858 18446744073709551615)) (= x647 (x804 (+ x116 31))) (= (x251 x116) x357)) (and (=> x181 x1167) (=> (and (not x181) (= x69 x37)) x121)))))
(assert (x684 x825))
(assert (= (and x1048 x842) x104))
(assert (= x48 (=> (and (= 0 x1321) (= x572 x270)) x467)))
(assert (x684 x1208))
(assert (= (x1124 (x495 3578229791)) 3578229791))
(assert (x684 x613))
(assert (x684 x697))
(assert (x684 x252))
(assert (= (x1124 (x495 1703538655)) 1703538655))
(assert (= (=> (or (and (and (= (x1196 x250) x197) (= x301 (= x1280 x197)) (= x1280 (x1196 x69))) x1126) (and (not x1126) (= x1126 x301))) x978) x403))
(assert (x684 x194))
(assert (x684 x446))
(assert (x684 x505))
(assert (x684 x413))
(assert (= (and x755 (not x793)) x646))
(assert (= x382 (and (not x445) x681)))
(assert (x684 x315))
(assert (= x378 (and x921 (not x387))))
(assert (x684 x426))
(assert (x684 x93))
(assert (x684 x1193))
(assert (= (and x519 x1260) x821))
(assert (= (x495 1099511627775) (x39 1099511627775)))
(assert (x1215 x172))
(assert (x684 x108))
(assert (x684 x578))
(assert (x684 x747))
(assert (x684 x802))
(assert (x684 x633))
(assert (x684 x790))
(assert (= (+ 1 (x1124 x1292)) (x1124 (x462 x1292 1))))
(assert (x168 x1078))
(assert (= (and x523 (not x1284)) x952))
(assert (x684 x956))
(assert (x684 x563))
(assert (x684 x797))
(assert (x684 x566))
(assert (x684 x1190))
(assert (= (=> (= (> x47 0) x542) (and (=> (and (= 0 x897) (not x542)) x852) (=> (and x542 (= 1 x585)) x524))) x441))
(assert (= (and x1141 x750) x349))
(assert (x684 x891))
(assert (= 1818647125 (x1124 (x495 1818647125))))
(assert (x168 x1273))
(assert (x684 x444))
(assert (x693 66268296141940672851042108147304593538321322149885339258387047461996478413388))
(assert (x684 x128))
(assert (= (x495 1461501637330902918203684832716283019655932542976) (x39 1461501637330902918203684832716283019655932542976)))
(assert (x684 x1268))
(assert (= x625 (and (not x1069) x986)))
(assert (= (or x104 x367 x773 x1218 x953) x843))
(assert (x684 x1086))
(assert (= (x495 3578229791) (x39 3578229791)))
(assert (= x699 (and x335 x439)))
(assert (= (x495 49030629496366843004481757320339876143172005997263197338613197606857211904000) (x39 49030629496366843004481757320339876143172005997263197338613197606857211904000)))
(assert (x684 x740))
(assert (x168 x578))
(assert (x684 x17))
(assert (x684 x1322))
(assert (x684 x886))
(assert (x684 x1140))
(assert (x684 x1098))
(assert (= 0 (x935 x743)))
(assert (= (x1124 (x495 3336544575)) 3336544575))
(assert (x684 x1279))
(assert (x684 x119))
(assert (x684 x129))
(assert (x168 x688))
(assert (= x1012 (and x699 (not x302))))
(assert (x684 x840))
(assert (x684 x593))
(assert (x684 x430))
(assert (x684 x961))
(assert (x684 x580))
(assert (x684 x731))
(assert (= (and x445 x681) x1314))
(assert (x684 x735))
(assert (x684 x897))
(assert (x684 x714))
(assert (x684 x556))
(assert (x684 x938))
(assert (x684 x1027))
(assert (x684 x913))
(assert (= x781 (and (not x335) x439)))
(assert (= x1044 (and x1085 x363)))
(assert (= x1293 (=> (and (or (not x132) x132) (= x132 (< x86 x882))) x881)))
(assert (= (and x762 x79) x1199))
(assert (= (and x625 x991) x372))
(assert (= (and x1070 x1122) x247))
(assert (= (and x52 (not x1125)) x109))
(assert (= (and (not x703) x226) x290))
(assert (= (and (not x1175) x225) x264))
(assert (= x107 (and (not x991) x625)))
(assert (x191 x707 x957))
(assert (= (and x1240 x736) x1007))
(assert (= (x39 65535) (x495 65535)))
(assert (x684 x604))
(assert (x684 x30))
(assert (= (and x764 (not x176)) x179))
(assert (x684 x869))
(assert (x684 x106))
(assert (x684 x282))
(assert (= (x1124 (x495 101252785324535458888692376134782526488201703179675774606846032596167196409856)) 101252785324535458888692376134782526488201703179675774606846032596167196409856))
(assert (= (or x673 x689) x605))
(assert (= (or x1214 x1019) x681))
(assert (= true x375))
(assert (x684 x118))
(assert (= (and x1001 (not x723)) x4))
(assert (x684 x858))
(assert (x168 x1025))
(assert (= (and (not x338) x397) x1201))
(assert (x684 x355))
(assert (= x16 (and x605 x934)))
(assert (x684 x726))
(assert (x684 x668))
(assert (= x333 (and x180 x398)))
(assert (x684 x1286))
(assert (x1215 x417))
(assert (= (and x672 x107) x1231))
(assert (= (and x4 (not x281)) x466))
(assert (x684 x1010))
(assert (x684 x648))
(assert (x684 x1195))
(assert (= (and x605 (not x934)) x929))
(assert (x684 x1235))
(assert (x684 x743))
(assert (= (and x1066 (not x845)) x1052))
(assert (x684 x585))
(assert (x684 x1207))
(assert (= (=> (and (= x506 (x804 (+ 32 x169))) (= x541 (not (> x1235 x506))) (= x507 (x251 x169))) (and x483 x541)) x199))
(assert (x684 x289))
(assert (= (=> (and (= x1151 (x251 x505)) (= x1103 (not (< x17 x512))) (= x17 (x804 (+ 32 x505)))) (and x485 x1103)) x177))
(assert (x168 x463))
(assert (x684 x958))
(assert (= x984 (and x340 x359)))
(assert (x684 x490))
(assert (= x401 (or x1096 x659 x267 x175 x686 x312 x455 x372 x1107 x806 x236 (and x723 x1001) x297)))
(assert (= (and x596 x408) x1085))
(assert (x684 x936))
(assert (x684 x1242))
(assert (= (x1124 (x39 x735)) x735))
(assert (= (=> (and (not (< 18446744073709551615 x245)) (= x1305 (mod (* x245 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (< 18446744073709551615 x1217)) (= x337 (x804 (+ x1297 x69))) (= (ite x491 1 0) x700) (= (x804 (+ x1305 x975)) x1165) (= x934 (< x975 x1165)) (= x1053 (mod (* 32 x245) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x71 (x804 (+ x351 31))) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (> x587 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x587 x767) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x587) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)))) (= 0 x700) (= x813 (> x337 18446744073709551615)) (= x975 (x804 (+ 32 x866))) (not (> x1165 x767)) (= (< x337 x69) x1264) (= (x251 x1302) x1217) (= (or x813 x1264) x491) (= x278 (x804 (+ x69 32))) (= (x804 (+ 32 x488)) x1302) (= x866 (x804 (+ x1287 x1217))) (= (x804 (+ 32 x1053)) x351) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x71) x1297) (= x245 (x251 x866)) (= (x804 (+ 31 x866)) x587)) (and (=> (and (= x250 x337) (not x934)) x1308) (=> x934 x13))) x121))
(assert (x191 x1078 x668))
(assert (= (x39 2307130307) (x495 2307130307)))
(assert (x684 x1305))
(assert (x684 x136))
(assert (x684 x1187))
(assert (x684 x503))
(assert (x684 x946))
(assert (x168 x707))
(assert (x168 x1072))
(assert (x684 x1283))
(assert (x684 x968))
(assert (x684 x951))
(assert (x684 x1120))
(assert (= (and x846 x1008) x873))
(assert (x693 x1174))
(assert (x684 x1053))
(assert (= (x935 x352) 0))
(assert (x684 x653))
(assert (x684 x469))
(assert (x684 x1245))
(assert (x168 x1020))
(assert (x1215 x482))
(assert (x684 x1276))
(assert (x684 x835))
(assert (x684 x758))
(assert (x684 x501))
(assert (x684 x284))
(assert (= x1174 (x1124 (x39 x1174))))
(assert (= (or x154 x1288) x1163))
(assert (= x361 (=> (and (= x1010 (x804 (+ x944 x1287))) (= (x251 x1134) x944) (= x338 (> x1235 x169)) (= x54 (x804 (+ x831 32))) (not (< 18446744073709551615 x944)) (= 0 x728) (= (x804 (+ 32 x354)) x1134) (= (< 18446744073709551615 x436) x157) (= x756 (x804 (+ 31 x720))) (= x933 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x756)) (or (and (> x767 x1130) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (<= x1130 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (> x1130 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x720 (x804 (+ x487 32))) (= x1130 (x804 (+ x1010 31))) (= x728 (ite x1014 1 0)) (= x748 (mod (* x331 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x436 (x804 (+ x831 x933))) (= (x804 (+ x748 x169)) x1235) (= x949 (> x831 x436)) (= x331 (x251 x1010)) (not (< 18446744073709551615 x331)) (not (> x1235 x767)) (= x169 (x804 (+ x1010 32))) (= (or x949 x157) x1014) (= (mod (* x331 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x487)) (and (=> (not x338) x483) (=> x338 x199)))))
(assert (= (=> (and (= x985 (= 0 x696)) (or (and (not x985) (= x1045 x696)) (and (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x636 x1236)) (= (- x758 x1236) x1077) (= x636 (x1285 (x39 x1060))) (= x758 (x880 (x39 x590))) (= (ite (= 0 x696) 32000000000000000000 0) x1236) (= x1045 x696) (= (x804 (+ x636 x1236)) x808)) x985))) x45) x537))
(assert (= x623 (and x1015 x1220)))
(assert (= (x1124 (x495 452312848583266388373324160190187140051835877600158453279131187530910662655)) 452312848583266388373324160190187140051835877600158453279131187530910662655))
(assert (x684 x71))
(assert (x684 x662))
(assert (= (and x1126 x732) x798))
(assert (x684 x351))
(assert (x684 x691))
(assert (x684 x933))
(assert (x684 x749))
(assert (= x204 (and x1284 x523)))
(assert (= (x495 1631253430) (x39 1631253430)))
(assert (x684 x277))
(assert (x684 x518))
(assert (x684 x448))
(assert (x168 x1229))
(assert (= (x495 1000000000000000000000000000) (x39 1000000000000000000000000000)))
(assert (x684 x278))
(assert (x684 x918))
(assert (x684 x383))
(assert (x684 x1282))
(assert (x684 x1280))
(assert (= (and (not x363) x1085) x439))
(assert (x684 x114))
(assert (x684 x520))
(assert (= x1127 (and x415 x682)))
(assert (x684 x1306))
(assert (x684 x853))
(assert (x684 x1257))
(assert (x684 x728))
(assert (x684 x1112))
(assert (x168 x390))
(assert (x684 x412))
(assert (x684 x105))
(assert (x693 x56))
(assert (= (x935 x674) 0))
(assert (x684 x139))
(assert (= (=> (and (= 0 x976) (= x231 x400)) x920) x1180))
(assert (x684 x1238))
(assert (= (and (not x543) x805) x1019))
(assert (x684 x983))
(assert (x684 x384))
(assert (x684 x150))
(assert (= (and x296 x692) x175))
(assert (x684 x332))
(assert (= (and x281 x4) x511))
(assert (= x1308 (=> (and (= (< 18446744073709551615 x1195) x1182) (or (and (= (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x664 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x767 x664)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (> x664 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x482) x1149) (= x1034 (or x406 x1182)) (= x1177 (x804 (+ 32 x939))) (= x898 (> x1226 x1177)) (= 0 x701) (= x354 (x804 (+ x1302 32))) (= (x251 x939) x108) (not (< 18446744073709551615 x1071)) (= x561 (x804 (+ x250 32))) (= (x804 (+ 31 x1197)) x482) (= (ite x1034 1 0) x701) (not (< x767 x1226)) (= (x804 (+ x1071 x1287)) x939) (not (> x108 18446744073709551615)) (= (mod (* 32 x108) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x950) (= (x804 (+ x1177 x1088)) x1226) (= (x804 (+ x250 x1149)) x1195) (= (x251 x354) x1071) (= (< x1195 x250) x406) (= x664 (x804 (+ x939 31))) (= (mod (* 128 x108) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1088) (= (x804 (+ 32 x950)) x1197)) (and (=> (and (not x898) (= x831 x1195)) x361) (=> x898 x782)))))
(assert (x684 x675))
(assert (x684 x760))
(assert (x1215 x662))
(assert (= x483 (=> (and (and (= x1121 (x1196 288)) (= x21 (x1196 x1095)) (= (= x1121 x21) x1284)) (or (and (not x1284) (= x1284 x1126)) (and x1284 (and (= x1126 (= x140 x446)) (= (x1196 x1095) x446) (= x140 (x1196 x69)))))) x403)))
(assert (x684 x213))
(assert (x684 x664))
(assert (x684 x787))
(assert (x684 x768))
(assert (= (and x319 (not x754)) x989))
(assert (x693 x285))
(assert (x684 x1089))
(assert (x684 x29))
(assert (x684 x405))
(assert (= (or x1063 x388) x755))
(assert (x684 x848))
(assert (= (x1124 (x495 2835717307)) 2835717307))
(assert (x684 x450))
(assert (x684 x23))
(assert (= (and x721 x416) x905))
(assert (x684 x748))
(assert (x684 x1031))
(assert (x684 x1222))
(assert (x684 x1047))
(assert (= x1115 (=> (and (not (= 0 x585)) (= x820 x589)) x183)))
(assert (= (x495 1008072988) (x39 1008072988)))
(assert (= x650 (and x207 x1133)))
(assert (= x1230 (x1124 (x39 x1230))))
(assert (x684 x456))
(assert (x684 x507))
(assert (= x415 (and x264 x963)))
(assert (= (and x786 x181) x673))
(assert (x684 x1017))
(assert (x1215 x1234))
(assert (= (and x615 (not x1300)) x621))
(assert (= (and x295 (not x399)) x896))
(assert (x684 x19))
(assert (x684 x1297))
(assert (=> (>= 10000 x642) (= (x495 x642) (x39 x642))))
(assert (= (=> (and (= (mod (* x789 128) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x407) (= (x804 (+ x55 x936)) x1029) (= x217 (ite x464 1 0)) (= x1128 (> x1029 18446744073709551615)) (= (> x129 x1147) x127) (not (< 18446744073709551615 x789)) (= x1147 (x804 (+ x1269 32))) (= x498 (x804 (+ 32 x734))) (= 0 x217) (not (< x767 x129)) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x162)) (> x767 x162)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (> x162 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (> x55 x1029) x544) (= (x251 x354) x350) (not (> x350 18446744073709551615)) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x577) x936) (= (x804 (+ x350 x1287)) x1269) (= x129 (x804 (+ x1147 x407))) (= (x804 (+ 32 x55)) x582) (= x464 (or x544 x1128)) (= (x804 (+ x498 31)) x577) (= (x251 x1269) x789) (= x162 (x804 (+ x1269 31))) (= (mod (* 32 x789) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x734)) (and (=> x127 x152) (=> (and (= x1029 x501) (not x127)) x96))) x404))
(assert (= x208 (=> (and (and (not (< x211 2307130307)) (not (< x211 2961265839)) (not x774) (not x271) (> x510 0) (= x1027 (x8 x658)) (= 3414818225 x211) (not (< x211 3414818225)) (= x124 (x473 (x39 x735) (x495 2) 0)) (< x1027 1461501637330902918203684832716283019655932542976) (= x1027 x663) (= x658 (x462 x124 1)) (<= x735 1461501637330902918203684832716283019655932542975) (= x1102 x735) (>= 1461501637330902918203684832716283019655932542975 x1027) (= (x196 (x39 x1060)) x510) (<= 0 x1027)) (and (and (= x562 x922) (= 1 x106) (= (>= 1 x922) x844) (= (= x844 x189) x876)) (and (<= x1230 1461501637330902918203684832716283019655932542975) (not (= x377 418493994)) (not (> 418493994 x377)) (= x1230 x1102) (< 0 x1187) (> 256 x89) (= (= 0 x413) x189) (< x377 2307130307) (= x1094 (x473 (x39 x1230) (x495 2) 0)) (= x1106 (x462 x1094 1)) (= (x1119 x1106) x89) (= 428079936 x377) (= x413 x663) (= x1187 (x196 (x39 x1060))) (> 791671133 x377) (= x834 0) (= x89 x562) (not (> x89 3))))) x876)))
(assert (x684 x276))
(assert (x684 x1263))
(assert (x684 x809))
(assert (x684 x857))
(assert (x684 x674))
(assert (= x163 (and x1066 x845)))
(assert (= (x935 x451) 0))
(assert (= (x39 3755674541) (x495 3755674541)))
(assert (x684 x1157))
(assert (x168 x676))
(assert (=> (<= x1174 10000) (= (x39 x1174) (x495 x1174))))
(assert (x684 x1234))
(assert (x168 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x684 x343))
(assert (= x225 (and x924 x294)))
(assert (x684 x369))
(assert (x684 x517))
(assert (x684 x1114))
(assert (= (or x362 x535 x646) x765))
(assert (x693 x642))
(assert (x684 x908))
(assert (x684 x149))
(assert (x684 x637))
(assert (= (and x290 x772) x388))
(assert (= (x935 x1162) 0))
(assert (x684 x669))
(assert (x684 x233))
(assert (x684 x746))
(assert (= (x1124 (x39 x642)) x642))
(assert (x684 x1136))
(assert (x1215 x323))
(assert (x684 x1116))
(assert (= (and x1248 x262) x900))
(assert (= (x1124 (x495 3714247998)) 3714247998))
(assert (= (x39 452312848583266388373324160190187140051835877600158453279131187530910662655) (x495 452312848583266388373324160190187140051835877600158453279131187530910662655)))
(assert (x684 x400))
(assert (x684 x1118))
(assert (x684 x870))
(assert (x684 x371))
(assert (x684 x1243))
(assert (= x1107 (and (not x228) x306)))
(assert (x684 x855))
(assert (= (x39 4294967296) (x495 4294967296)))
(assert (=> (>= 10000 x583) (= (x495 x583) (x39 x583))))
(assert (x684 x866))
(assert (x684 x500))
(assert (= (x1124 (x495 49030629496366843004481757320339876143172005997263197338613197606857211904000)) 49030629496366843004481757320339876143172005997263197338613197606857211904000))
(assert (x684 x347))
(assert (x684 x178))
(assert (= (and x704 (not x447)) x1301))
(assert (x684 x122))
(assert (x684 x54))
(assert (x684 x957))
(assert (x684 x969))
(assert (x684 x325))
(assert (x168 x430))
(assert (= (x1124 (x495 418493994)) 418493994))
(assert (x684 x120))
(assert (=> (>= 10000 x590) (= (x495 x590) (x39 x590))))
(assert (x684 x1246))
(assert (= (x1124 (x495 3515665801)) 3515665801))
(assert (x168 x622))
(assert (x684 x327))
(assert (x684 x679))
(assert (x684 x1108))
(assert (x684 x435))
(assert (= x397 (or x98 x241)))
(assert (=> (<= x3 10000) (= (x495 x3) (x39 x3))))
(assert (x684 x1258))
(assert (x684 x622))
(assert (x684 x1032))
(assert (x684 x683))
(assert (x684 x850))
(assert (x684 x738))
(assert (= x1254 (and x765 (not x393))))
(assert (= x553 (and (not x14) x545)))
(assert (= (x935 x971) 0))
(assert (x684 x901))
(assert (x684 x357))
(assert (x684 x92))
(assert (x684 x925))
(assert (= (=> (and (= x976 1) (= x231 32)) x920) x339))
(assert (= x240 (and x765 x393)))
(assert (x684 x238))
(assert (x684 x600))
(assert (x684 x1033))
(assert (= (and x440 x1272) x921))
(assert (x684 x32))
(assert (x684 x20))
(assert (= (x1124 (x495 2446411860)) 2446411860))
(assert (= x262 (and x1323 x661)))
(assert (x1215 x622))
(assert (x684 x795))
(assert (x684 x322))
(assert (= (and x1093 x127) x832))
(assert (= x126 (and x661 (not x1323))))
(assert (x684 x801))
(assert (x684 x348))
(assert (x684 x595))
(assert (x684 x546))
(assert (x684 x512))
(assert (= (x1124 (x39 x92)) x92))
(assert (x684 x509))
(assert (x684 x110))
(assert (= (or x170 x553) x786))
(assert (x684 x250))
(assert (x684 x1002))
(assert (= (or x247 x712) x283))
(assert (= x535 (and (not x1015) x1220)))
(assert (x684 x142))
(assert (x168 x1114))
(assert (x684 x285))
(assert (= x306 (and x905 (not x973))))
(assert (= (=> (and (= x1198 (mod (* 32 x1065) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x251 x729) x1065) (= x718 (x804 (+ x801 32))) (= (x804 (+ 31 x675)) x578) (= (> x405 18446744073709551615) x234) (= x1208 (x804 (+ x729 31))) (= (x804 (+ x892 x801)) x405) (= (ite x84 1 0) x797) (= x811 (x804 (+ x370 x1090))) (= x754 (> x811 x1090)) (or (and (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1208)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1208) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)) (> x767 x1208))) (not (> x811 x767)) (= x729 (x804 (+ x1287 x1263))) (= (x804 (+ x1198 32)) x675) (= (mod (* 32 x1065) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x370) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x578) x892) (= x1090 (x804 (+ x729 32))) (not (< 18446744073709551615 x1065)) (= x797 0) (not (< 18446744073709551615 x1263)) (= (or x234 x865) x84) (= (x251 x1302) x1263) (= (> x801 x405) x865)) (and (=> x754 x1101) (=> (and (not x754) (= x55 x405)) x404))) x123))
(assert (x684 x436))
(assert (= (x495 32000000000000000000) (x39 32000000000000000000)))
(assert (x684 x86))
(assert (x684 x360))
(assert (x684 x998))
(assert (x684 x81))
(assert (= (x39 1703538655) (x495 1703538655)))
(assert (= x1220 (and (not x1240) x736)))
(assert (x168 x91))
(assert (x684 x631))
(assert (x684 x1217))
(assert (x684 x478))
(assert (= 259200 (x1124 (x495 259200))))
(assert (x684 x1078))
(assert (x684 x323))
(assert (x684 x904))
(assert (= x978 (=> (and (<= x1046 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (> x1098 18446744073709551615)) (= (x1196 x831) x1047) (= 0 x738) (= (x473 (x39 x371) (x495 2) 0) x1307) (= x1282 (x804 (+ 31 x884))) (< x70 65536) (= (x804 (+ 32 x884)) x486) (< x972 1461501637330902918203684832716283019655932542976) (= (x640 x291) x70) (= x884 (x804 (+ x1140 x1287))) (not (or (and (< x159 160) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x159) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x159))) (= x549 (x521 (- x159 31))) (or (and (< x592 x549) (= (<= x592 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x549))) (and (> x592 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x549 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (< x767 x364)) x301 (= x1277 (x494 x291)) (>= x972 0) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1072) x238) (= x456 x1047) (= (> x915 18446744073709551615) x61) (= 0 x1310) (not (> x1042 18446744073709551615)) (= x1042 x70) (<= x972 1461501637330902918203684832716283019655932542975) (<= x50 1099511627775) (not (or (and (<= x128 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x612)) (and (= (<= x128 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x612 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x128 x612)))) (= x850 (x804 (+ x915 32))) (= x291 (x462 x1307 1)) (= x355 (mod (* x1098 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x940 (mod (* x1098 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x251 x884) x1098) (or (and (> x1282 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x1282 x767) (= (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1282 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (<= 0 x70) (= (x251 x1287) x592) (= (x804 (+ x940 32)) x458) (= (x251 x1287) x1140) (= x380 (> x1006 18446744073709551615)) (< x50 1099511627776) (= (x619 x291) x972) (= (> x509 x915) x1213) (= x915 (x804 (+ x509 160))) (= (x804 (+ 160 x436)) x509) (= x371 (x837 1461501637330902918203684832716283019655932542975 x583)) (= (x804 (+ 31 x458)) x1072) (not (> x1277 3)) (= x738 (ite x1319 1 0)) (> 256 x1277) (= x421 (or x61 x1213)) (= x1310 (ite x421 1 0)) (= x456 (x1196 x250)) (= x63 (> x915 x1006)) (<= 0 x1046) (= (x804 (+ x355 x486)) x364) (= x128 (x804 (+ x321 32))) (not (> x1140 18446744073709551615)) (= (mod (* x1042 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x629) (= (< x486 x364) x616) (= (x1178 x1307) x1046) (= x1006 (x804 (+ x915 x238))) (>= x50 0) (<= x70 65535) (= x50 (x1074 x291)) (= x612 (x521 (- x767 x629))) (= x321 (x804 (+ x1287 x592))) (= x1319 (or x63 x380)) (= x1042 (x251 x321))) (and (=> x616 x461) (=> (and (not x616) (= x1006 x40)) x95)))))
(assert (= x730 (and (not x970) x1158)))
(assert (x1215 x463))
(assert (= (and (not x72) x843) x508))
(assert (x684 x572))
(assert (x684 x775))
(assert (x684 x696))
(assert (x684 x352))
(assert (x684 x882))
(assert (x168 x756))
(assert (x684 x47))
(assert (x684 x1079))
(assert (= x45 (=> (and (= x708 (not (> x70 1))) (not (= 0 x1045))) (and x346 x708))))
(assert (=> (>= 10000 x92) (= (x39 x92) (x495 x92))))
(assert (x684 x725))
(assert (x684 x899))
(assert (x684 x1068))
(assert (x1215 x71))
(assert (x684 x628))
(assert (= 2961265839 (x1124 (x495 2961265839))))
(assert (not x1117))
(assert (x168 x71))
(assert (=> (>= 10000 x371) (= (x39 x371) (x495 x371))))
(assert (x684 x826))
(assert (x684 x1134))
(assert (x684 x422))
(assert (x684 x867))
(assert (x684 x59))
(assert (= x609 (=> (and (or x393 (not x393)) (= x393 (= x68 0))) x441)))
(assert (= (and (not x800) x694) x986))
(assert (x191 x1118 x1114))
(assert (x684 x145))
(assert (x684 x808))
(assert (x684 x320))
(assert (x693 x371))
(assert (x684 x1230))
(assert (x684 x143))
(assert (= (x1124 (x39 x6)) x6))
(assert (= x516 (=> (and (= x1125 (< x151 x1079)) (or (and x1125 (= x678 (x804 (+ x303 x151)))) (not x1125))) x215)))
(assert (= (x1124 (x495 32000000000000000000)) 32000000000000000000))
(assert (x684 x65))
(assert (x168 x448))
(assert (x684 x56))
(assert (x684 x1006))
(assert (x684 x463))
(assert (x684 x162))
(assert (= (or x771 x126 x960 x573 x794) x964))
(assert (= (and x1093 (not x127)) x1160))
(assert (x168 x819))
(assert (=> (<= x6 10000) (= (x39 x6) (x495 x6))))
(assert (x684 x926))
(assert (x684 x737))
(assert (x684 x1186))
(assert (x684 x354))
(assert (x684 x884))
(assert (x932 x600))
(assert (= x762 (and x704 x447)))
(assert (= x73 (and x329 x117)))
(assert (x684 x1226))
(assert (x684 x647))
(assert (x684 x390))
(assert (x684 x778))
(assert (x684 x536))
(assert (= (or x414 x878) x610))
(assert (x168 x1143))
(assert (x684 x811))
(assert (x684 x409))
(assert (x168 x1219))
(assert (x684 x1137))
(assert (x684 x1177))
(assert (x684 x667))
(assert (x684 x1179))
(assert (x684 x1020))
(assert (x684 x1191))
(assert (x684 x1303))
(assert (x684 x1273))
(assert (x684 x917))
(assert (= x1210 (or x1254 x240)))
(assert (x684 x939))
(assert (= x1218 (and x894 (not x1317))))
(assert (= x545 (and (not x182) x375)))
(assert (= (x39 2835717307) (x495 2835717307)))
(assert (= (=> (= x727 (> x70 0)) (and (=> (not x727) x346) (=> (and x727 (and (= x946 (x804 (+ 4 x820))) (= (x1256 x55) x1043) (= (< 0 x644) x340) (= x951 (x804 (+ x801 32))) (= x697 (x804 (+ 32 x40))) (= x65 (x1256 x801)) (= (x1256 x352) x1184) (= x634 (x804 (+ 32 x946))) (= x743 (x1256 x951)) (> x442 0) (= (x837 1461501637330902918203684832716283019655932542975 x600) x590) (= (x804 (+ 32 x1184)) x244) (= (x837 1461501637330902918203684832716283019655932542975 x583) x469) (= (x804 (+ x282 32)) x599) (> x1043 0) (= x833 (x1256 x697)) (= x644 (x1261 x1184)) (= (x1256 x915) x902) (= (x804 (+ x946 288)) x282) (= x442 (x1256 x40)) (> x65 0) (= x643 (x1256 x501)) (= (x804 (+ x915 32)) x352) (< 0 x902) (> x643 0))) (and (=> (and x340 (and (= (x345 x1162) x171) (= x325 x599) (= x1162 x244) (= x927 (< 32 x644)))) (and (=> (and (not x927) (= 32 x518)) x1132) (=> (and x927 (and (= (x804 (+ 32 x599)) x904) (= (< 64 x644) x1317) (= x1159 (x581 x318)) (= x318 (x804 (+ x244 32))))) (and (=> (and (= 64 x518) (not x1317)) x1132) (=> (and (and (= (> x644 96) x1048) (= (x804 (+ x599 64)) x22) (= x1207 (x804 (+ x244 64))) (= (x706 x1207) x992)) x1317) (and (=> x1048 x907) (=> (and (= x518 96) (not x1048)) x1132))))))) (=> (and (= x518 0) (not x340)) x1132))))) x183))
(assert (= (x495 3515665801) (x39 3515665801)))
(assert (x684 x1250))
(assert (x684 x69))
(assert (x684 x486))
(assert (= 791671133 (x1124 (x495 791671133))))
(assert (= (x39 101252785324535458888692376134782526488201703179675774606846032596167196409856) (x495 101252785324535458888692376134782526488201703179675774606846032596167196409856)))
(assert (= (x1124 (x462 x1307 1)) (+ (x1124 x1307) 1)))
(assert (x684 x159))
(assert (= 0 (x757 x284)))
(assert (x684 x860))
(assert (x693 x6))
(assert (x684 x629))
(assert (= (x495 2446411860) (x39 2446411860)))
(assert (= (x39 2961265839) (x495 2961265839)))
(assert (x684 x729))
(assert (x684 x1104))
(assert (= (and x182 x375) x878))
(assert (x168 x662))
(assert (= x805 (or x832 x1160)))
(assert (x168 x668))
(assert (x684 x995))
(assert (=> (>= 10000 x1230) (= (x39 x1230) (x495 x1230))))
(assert (x684 x715))
(assert (x684 x300))
(assert (x684 x1028))
(assert (x684 x1287))
(assert (= x532 (and (not x542) x1210)))
(assert (x684 x1203))
(assert (= (and x1125 x52) x328))
(assert (x684 x37))
(assert (= (and x283 x985) x690))
(assert (x684 x822))
(assert (x684 x514))
(assert (x684 x1277))
(assert (= x1063 (or x807 (and x703 x226) x702)))
(assert (= (x495 1099511627776) (x39 1099511627776)))
(assert (x684 x428))
(assert (= (and x1231 (not x314)) x49))
(assert (x684 x666))
(assert (= (+ 1 (x1124 x1083)) (x1124 (x462 x1083 1))))
(assert (= (x935 x697) 0))
(assert (x684 x724))
(assert (x684 x971))
(assert (x684 x350))
(assert (= (and x90 x427) x1066))
(assert (x684 x1149))
(assert (= (x39 1997499061) (x495 1997499061)))
(assert (x684 x1018))
(assert (= (=> (and (= (x216 x971) x1295) (= x536 (x804 (+ 96 x303))) (= x971 (x804 (+ x809 96))) (= (not (> x151 128)) x1241)) (and (=> (= 128 x1079) x516) x1241)) x916))
(assert (x684 x50))
(assert (x684 x341))
(assert (= x615 (and x1008 (not x846))))
(assert (= (+ 1 (x1124 x165)) (x1124 (x462 x165 1))))
(assert (x684 x1057))
(assert (= (or x952 x204) x732))
(assert (x684 x1295))
(assert (= x56 (x1124 (x39 x56))))
(assert (= x1041 (and (not x427) x90)))
(assert (x684 x700))
(assert (x684 x1045))
(assert (x693 x1060))
(assert (x684 x525))
(assert (x684 x598))
(assert (x684 x137))
(assert (x684 x209))
(assert (x684 x134))
(assert (= x1272 (and (not x829) x1155)))
(assert (x684 x342))
(assert (x684 x217))
(assert (x684 x834))
(assert (x684 x3))
(assert (x693 x795))
(assert (= (and x264 (not x963)) x42))
(assert (x168 x583))
(assert (x684 x752))
(assert (= (and x1314 x280) x167))
(assert (x684 x2))
(assert (x684 x663))
(assert (= (+ (x1124 x1094) 1) (x1124 (x462 x1094 1))))
(assert (= (x39 1381722888) (x495 1381722888)))
(assert (x684 x799))
(assert (x684 x442))
(assert (x684 x705))
(assert (x684 x819))
(assert (x1215 x1072))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1124 (x495 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x693 x92))
(assert (x684 x187))
(assert (x684 x1219))
(assert (= (and (not x222) x179) x1158))
(assert (= x852 (=> (= x897 x585) x524)))
(assert (x684 x1029))
(assert (x684 x263))
(assert (x684 x780))
(assert (x684 x1232))
(assert (x684 x1296))
(assert (=> (<= x735 10000) (= (x39 x735) (x495 x735))))
(assert (x684 x579))
(assert (x684 x25))
(assert (x684 x318))
(assert (x684 x562))
(assert (x684 x77))
(assert (= x359 (and x727 x1228)))
(assert (x684 x1171))
(assert (x684 x224))
(assert (x684 x574))
(assert (x693 x735))
(assert (= (=> (and (= (x804 (+ 31 x151)) x1229) (= x194 (x804 (+ x514 32))) (= x86 (x1312 x743)) (= (> x86 0) x1289) (= x822 (x521 (- x826 x946))) (= x1181 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1229)) (= (x804 (+ x303 x1181)) x826)) (and (=> (and (= 0 x882) (not x1289)) x1293) (=> (and x1289 (= x1323 (< 32 x86))) (and (=> (and (not x1323) (= x882 32)) x1293) (=> (and x1323 (= x1248 (< 64 x86))) (and (=> (and (= 64 x882) (not x1248)) x1293) (=> (and (= (< 96 x86) x1035) x1248) (and (=> (and (not x1035) (= x882 96)) x1293) (=> x1035 x818))))))))) x215))
(assert (x684 x643))
(assert (= (x1124 (x462 x627 1)) (+ 1 (x1124 x627))))
(assert (x684 x202))
(assert (x1215 x289))
(assert (= x694 (and (not x416) x721)))
(assert (= (x1124 (x495 1099511627775)) 1099511627775))
(assert (x684 x527))
(assert (x168 x323))
(assert (x1215 x756))
(assert (= (x39 791671133) (x495 791671133)))
(assert (x684 x632))
(assert (= (or (and (not x1260) x519) x821) x499))
(assert (x1215 x819))
(assert (x684 x698))
(assert (x684 x1040))
(assert (x684 x1302))
(assert (x684 x871))
(assert (= x481 (and (not x682) x415)))
(assert (x684 x1204))
(assert (x684 x116))
(assert (= x782 (=> (and (= x908 (x251 x1177)) (= (x251 x899) x1183) (= (x804 (+ 32 x145)) x579) (= x714 (x804 (+ x1195 32))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x299) (and (= true (<= x299 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 128 x299)))) (= x955 0) (= (not (< x1271 x1226)) x82) (<= x908 452312848583266388373324160190187140051835877600158453279131187530910662655) (= (x521 (- x767 x1177)) x299) (<= x1169 255) (= x568 (< 18446744073709551615 x862)) (= x899 (x804 (+ x579 32))) (= (ite x784 1 0) x955) (= (x251 x579) x153) (= (x804 (+ 128 x1195)) x862) (= (or x1239 x568) x784) (= (< x862 x1195) x1239) (= (x251 x145) x1169) (= x356 (x804 (+ x714 32))) (= (x804 (+ x356 32)) x657) (= (x804 (+ 32 x899)) x1271) (= (x804 (+ x1177 32)) x145)) (and (=> (= x831 x862) x361) x82))))
(assert (x684 x1259))
(assert (= (x39 3336544575) (x495 3336544575)))
(assert (x684 x504))
(assert (x684 x707))
(assert (x684 x890))
(assert (x684 x506))
(assert (x684 x381))
(assert (x684 x862))
(assert (= (and x732 (not x1126)) x990))
(assert (x684 x1091))
(assert (= x1061 (and (not x1133) x207)))
(assert (x684 x270))
(assert (= x1096 (and x1069 x986)))
(assert (x684 x458))
(assert (=> (<= x795 10000) (= (x495 x795) (x39 x795))))
(assert (= (x495 428079936) (x39 428079936)))
(assert (= 89953063794570797914675343120038501642627609741519254829220540789936042803200 (x1124 (x495 89953063794570797914675343120038501642627609741519254829220540789936042803200))))
(assert (x684 x1162))
(assert (= (x1124 (x39 x547)) x547))
(assert (x684 x576))
(assert (x684 x358))
(assert (x684 x91))
(assert (x684 x656))
(assert (x684 x496))
(assert (= x704 (and x812 x396)))
(assert (x168 1099511627775))
(assert (x684 x791))
(assert (x684 x174))
(assert (= x226 (and x67 x623)))
(assert (x684 x171))
(assert (x684 x945))
(assert (x684 x620))
(assert (x168 x957))
(assert (x684 x1138))
(assert (x684 x1265))
(assert (= x420 (and x783 (not x569))))
(assert (x684 x997))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x1124 (x495 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= x750 (and x924 (not x294))))
(assert (= x817 (or x929 x16)))
(assert (x1215 x1025))
(assert (= x1122 (and x295 x399)))
(assert (x168 x600))
(assert (x684 x701))
(assert (= x818 (=> (= (not (< 128 x86)) x744) (and x744 (=> (= x882 128) x1293)))))
(assert (x684 x789))
(assert (x684 x549))
(assert (x684 x559))
(assert (= (and x927 x984) x894))
(assert (x684 x479))
(assert (x168 x450))
(assert (x684 x498))
(assert (= (and x777 (not x1289)) x794))
(assert (x684 x1))
(assert (= x771 (and x900 x1035)))
(assert (x684 x720))
(assert (x684 x316))
(assert (x684 x470))
(assert (x684 x1271))
(assert (x684 x487))
(assert (= (=> (and (= x776 0) (= x383 x332)) x567) x1267))
(assert (x684 x552))
(assert (= x46 (and x1175 x225)))
(assert (x684 x590))
(assert (x684 x477))
(assert (x684 x612))
(assert (x191 x1020 x1273))
(assert (= (and x132 x964) x1056))
(assert (x168 x1037))
(assert (x684 x1090))
(assert (x684 x570))
(assert (= (=> (and (= x1002 (x804 (+ x465 32))) (= x965 (not (< x890 x18))) (= (ite x903 1 0) x613) (= (> x918 18446744073709551615) x719) (not (> x941 x767)) (= (x251 x1062) x974) (= x237 (x251 x993)) (= x890 (x804 (+ 32 x1062))) (= x1246 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x622)) (or (and (> x142 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)) (and (> x767 x142) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x142) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)))) (= (x804 (+ x1246 32)) x2) (= x142 (x804 (+ 31 x993))) (= (x804 (+ 32 x993)) x769) (= (x804 (+ x974 x1062)) x993) (not (< 18446744073709551615 x237)) (= (x804 (+ x769 x237)) x941) (= x903 (or x719 x909)) (= (x804 (+ x2 31)) x91) (= x918 (x804 (+ x705 x465))) (= x613 0) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x91) x705) (= x622 (x804 (+ x237 31))) (= (x804 (+ x1002 x237)) x277) (not (> x974 18446744073709551615)) (= x909 (< x918 x465))) (and (=> (= x918 x801) x123) x965)) x97))
(assert (x684 x814))
(assert (x684 x745))
(assert (x684 x677))
(assert (x684 x1310))
(assert (x684 x864))
(assert (x684 x1004))
(assert (= 1631253430 (x1124 (x495 1631253430))))
(assert (x684 x115))
(assert (x684 x678))
(assert (x684 x1026))
(assert (x684 x1315))
(assert (= 428079936 (x1124 (x495 428079936))))
(assert (x684 x1223))
(assert (x168 x424))
(assert (= x1111 (and x366 x655)))
(assert (x684 x1316))
(assert true)
(assert (= (and x262 (not x1248)) x960))
(assert (x684 x99))
(assert (= (x495 1461501637330902918203684832716283019655932542975) (x39 1461501637330902918203684832716283019655932542975)))
(assert (= (x39 1818647125) (x495 1818647125)))
(assert (= x879 (and x680 (not x200))))
(assert (= (x1124 (x462 x124 1)) (+ (x1124 x124) 1)))
(assert (x684 x883))
(assert (x684 x718))
(assert (= (and x1127 (not x1221)) x80))
(assert (x693 x3))
(assert (= (x1124 (x39 x583)) x583))
(assert (= x19 (x1124 (x39 x19))))
(assert (x684 x1037))
(assert (x168 x534))
(assert (x684 x1184))
(assert (x684 x235))
(assert (x684 x763))
(assert (x684 x51))
(assert (x684 x1100))
(assert (x684 x89))
(assert (= x154 (and (not x616) x854)))
(assert (= x806 (and x49 x368)))
(assert (= x907 (=> (and (= (x804 (+ x599 96)) x1120) (= (not (< 128 x644)) x111) (= x677 (x476 x674)) (= (x804 (+ x244 96)) x674)) (and (=> (= x518 128) x1132) x111))))
(assert (x684 x1269))
(assert (x684 x950))
(assert (= x236 (and x314 x1231)))
(assert (= x856 (and (not x889) x466)))
(assert (x684 x756))
(assert (= (=> (and (= (x804 (+ x41 x316)) x431) (= x454 (or x1274 x816)) (= x620 (ite x454 1 0)) (= (x804 (+ 32 x576)) x867) (= (x804 (+ 32 x37)) x327) (= (not (< x496 x254)) x212) (not (> x41 18446744073709551615)) (= (> x1152 18446744073709551615) x1274) (not (< x767 x787)) (= (x804 (+ x431 31)) x343) (= (x804 (+ x316 32)) x496) (= (< x1152 x37) x816) (= (x804 (+ x37 x840)) x1152) (= x576 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1179)) (= x1086 (x251 x431)) (not (> x1086 18446744073709551615)) (= (x804 (+ x327 x1086)) x298) (= x787 (x804 (+ x437 x1086))) (= x534 (x804 (+ x867 31))) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x343) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x767 x343) (= (<= x343 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)))) (= (x804 (+ 32 x431)) x437) (= x41 (x251 x316)) (= 0 x620) (= x840 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x534)) (= x1179 (x804 (+ x1086 31)))) (and x212 (=> (= x69 x1152) x121))) x1167))
(assert (x684 x288))
(assert (= (and x117 (not x329)) x736))
(assert (x684 x424))
(assert (= (x39 865950217) (x495 865950217)))
(assert (=> (<= x547 10000) (= (x39 x547) (x495 x547))))
(assert (= 1008072988 (x1124 (x495 1008072988))))
(assert (x684 x849))
(assert (x191 x390 x430))
(assert (x684 x185))
(assert (= (and x1291 x1061) x484))
(assert (x684 x1099))
(assert (= (and (not x927) x984) x367))
(assert (x684 x642))
(assert (x684 x652))
(assert (x684 x1290))
(assert (= (and x1313 x1038) x90))
(assert (x684 x833))
(assert (x684 x161))
(assert (x684 x1067))
(assert (= x275 (and x1145 x1163)))
(assert (x684 x645))
(assert (= 0 (x935 x1207)))
(assert (= x3 (x1124 (x39 x3))))
(assert (x684 x912))
(assert (= (x1124 (x39 x371)) x371))
(assert (= (x1124 (x495 865950217)) 865950217))
(assert (= (and (not x166) x78) x267))
(assert (x693 x547))
(assert (x684 x223))
(assert (= x472 (and x179 x222)))
(assert (x684 x303))
(assert (x168 x520))
(assert (x684 x955))
(assert (= (x495 3629318494) (x39 3629318494)))
(assert (x1215 x1143))
(assert (= x567 (=> (and (= x793 (= 0 x776)) (or (and x793 (and (= (x804 (+ x763 x1157)) x768) (< (+ x1157 x763) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (- x133 x763) x389) (= (x1176 (x39 x285)) x1157) (= (ite (= 0 x776) x9 0) x763) (= (x943 (x39 x547)) x133) (= x776 x47) (= x68 x332))) (and (not x793) (and (= x332 x68) (= x47 x776))))) x609)))
(assert (= 3629318494 (x1124 (x495 3629318494))))
(assert (x684 x606))
(assert (x684 x1043))
(assert (= (and x290 (not x772)) x702))
(assert (x684 x453))
(assert (x684 x353))
(assert (= (or x275 x515) x319))
(assert (x684 x583))
(assert (= (x39 18446744073709551615) (x495 18446744073709551615)))
(assert (= x1060 (x1124 (x39 x1060))))
(assert (= x773 (and x359 (not x340))))
(assert (x684 x611))
(assert (x684 x255))
(assert (x684 x974))
(assert (x684 x976))
(assert (x684 x1144))
(assert (x684 x492))
(assert (x684 x1102))
(assert (x684 x1151))
(assert (= 31536000 (x1124 (x495 31536000))))
(assert (= (and (not x440) x1272) x1129))
(assert (x684 x824))
(assert (= (x39 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x495 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x684 x331))
(assert (x684 x1174))
(assert (x684 x1236))
(assert (x684 x211))
(assert (= (x495 3414818225) (x39 3414818225)))
(assert (x1215 x577))
(assert (x684 x717))
(assert (x684 x1212))
(assert (= x207 (and x750 (not x1141))))
(assert (= (x1124 (x495 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (= x241 (and x817 x898)))
(assert (x684 x438))
(assert (x684 x830))
(assert (= (and (not x79) x762) x751))
(assert (= (and x302 x699) x117))
(assert (= 18446744073709551615 (x1124 (x495 18446744073709551615))))
(assert (= (and x751 x53) x1001))
(assert (x684 x356))
(assert (= x5 (and (not x132) x964)))
(assert (x684 x1152))
(assert (x684 x489))
(assert (x191 x448 x450))
(assert (x684 x22))
(assert (x684 x231))
(assert (= x661 (and x1289 x777)))
(assert (x684 x671))
(assert (x684 x40))
(assert (x684 x482))
(assert (= 1997499061 (x1124 (x495 1997499061))))
(assert (= (and (not x67) x623) x807))
(assert (x684 x465))
(assert (x684 x172))
(assert (x684 x1320))
(assert (= (x495 418493994) (x39 418493994)))
(assert (x684 x169))
(assert (x684 x55))
(assert (= x764 (and (not x192) x167)))
(assert (x684 x676))
(assert (x684 x190))
(assert (x1215 x578))
(assert (= (x1124 (x462 x887 1)) (+ (x1124 x887) 1)))
(assert (x684 x1165))
(assert (x684 x1062))
(assert (x168 1461501637330902918203684832716283019655932542975))
(assert (x684 x779))
(assert (=> (>= 10000 x285) (= (x495 x285) (x39 x285))))
(assert (= x218 (=> (and (= x270 32) (= 1 x1321)) x467)))
(assert (x684 x266))
(assert (= (and x596 (not x408)) x248))
(assert (= 0 (x935 x870)))
(assert (x684 x906))
(assert (= (x39 31536000) (x495 31536000)))
(assert (= x1170 (and x1155 x829)))
(assert (x684 x922))
(assert (x1215 x1229))
(assert (x684 x83))
(assert (x932 x583))
(assert (x684 x307))
(assert (= (x935 x833) 0))
(assert (x684 x820))
(assert (x684 x1050))
(assert (x1215 x676))
(assert (= (=> (and (= x512 (x804 (+ x886 x505))) (= x1059 (or x1185 x434)) (= (x804 (+ 31 x444)) x593) (= (> x501 x835) x434) (= (ite x1059 1 0) x1028) (not (> x365 18446744073709551615)) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x688) x1108) (= (x804 (+ x444 32)) x505) (= (x804 (+ x501 32)) x1315) (= 0 x1028) (not (> x512 x767)) (= x444 (x804 (+ x1287 x958))) (= x835 (x804 (+ x1108 x501))) (= (x804 (+ x1091 32)) x87) (or (and (> x593 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)) (and (> x767 x593) (= (<= x593 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x804 (+ x87 31)) x688) (= x543 (> x512 x505)) (= x1185 (< 18446744073709551615 x835)) (= x958 (x251 x1134)) (not (> x958 18446744073709551615)) (= x365 (x251 x444)) (= (mod (* x365 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1091) (= x886 (mod (* x365 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (=> x543 x177) (=> (not x543) x485))) x96))
(assert (= x312 (and (not x672) x107)))
(assert (x168 x1206))
(assert (= (and (not x180) x398) x596))
(assert (= 66268296141940672851042108147304593538321322149885339258387047461996478413388 (x1124 (x495 66268296141940672851042108147304593538321322149885339258387047461996478413388))))
(assert (x684 x1000))
(assert (= (x39 66268296141940672851042108147304593538321322149885339258387047461996478413388) (x495 66268296141940672851042108147304593538321322149885339258387047461996478413388)))
(assert (x684 x87))
(assert (= (x1124 (x39 x590)) x590))
(assert (x684 x377))
(assert (x684 x1172))
(assert (x684 x66))
(assert (= (x935 x318) 0))
(assert (= (and x1061 (not x1291)) x783))
(assert (x684 x928))
(assert (x684 x863))
(assert (= x13 (=> (and (= 0 x556) (= x1089 (x804 (+ x307 x656))) (= (not (> x1165 x1188)) x624) (= (x804 (+ 32 x337)) x29) (= x58 (< x586 x337)) (= (x804 (+ x975 x1113)) x1067) (= (x804 (+ x29 x307)) x1279) (= x307 (x251 x1067)) (= (< 18446744073709551615 x586) x1168) (= (x804 (+ x1067 31)) x778) (= (or x1168 x58) x1024) (= x656 (x804 (+ x1067 32))) (not (> x1113 18446744073709551615)) (= (ite x1024 1 0) x556) (= (x804 (+ 32 x975)) x1188) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x778) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767)) (> x767 x778)) (and (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x778 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (> x307 18446744073709551615)) (= x358 (x804 (+ 32 x15))) (= (x804 (+ x358 31)) x323) (= x289 (x804 (+ 31 x307))) (= x710 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x323)) (= x15 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x289)) (= (x804 (+ x710 x337)) x586) (= x1113 (x251 x975)) (not (> x1089 x767))) (and x624 (=> (= x250 x586) x1308)))))
(assert (x684 x687))
(assert (x684 x710))
(assert (= (and x680 x200) x1313))
(assert (x684 x1197))
(assert (x684 x599))
(assert (= (and x176 x764) x942))
(assert (x684 x21))
(assert (x684 x557))
(assert (x693 x19))
(assert (= x854 (or x990 x798)))
(assert (x684 x112))
(assert (= x98 (and (not x898) x817)))
(assert (x684 x644))
(assert (= (and x1127 x1221) x885))
(assert (x684 x243))
(assert (x684 x41))
(assert (x168 x289))
(assert (= x608 (and x396 (not x812))))
(assert (= (x495 3714247998) (x39 3714247998)))
(assert (x684 x1025))
(assert (= (x39 38731024311866695680078894486728619323467920029808689935542550702492038987776) (x495 38731024311866695680078894486728619323467920029808689935542550702492038987776)))
(assert (x684 x6))
(assert (x168 x172))
(assert (x684 x497))
(assert (x684 x1121))
(assert (x684 x930))
(assert (= x920 (=> (and (= x695 (x804 (+ x360 96))) (not (> 1631253430 x105)) (= x35 (* 24000000000000000000 x70)) (= 49030629496366843004481757320339876143172005997263197338613197606857211904000 x62) (= (x804 (+ x997 32)) x1144) (= x803 (x196 (x39 x285))) (= x529 (x521 (- x227 4))) (= (x196 (x39 x285)) x928) (= x347 x9) (< (* 24000000000000000000 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x841 x835) x300) (not (= x928 0)) (< (* x479 x1116) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x753 (= 0 x976)) (= (x804 (+ x589 4)) x360) (not (< x202 x1064)) (= x1211 x3) (= x589 (x804 (+ 32 x835))) (= (or (and (> 96 x529) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x529) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x529)) x829) (< x105 2835717307) (not x1049) (not (= x105 1631253430)) (= x227 100) (not x753) (= (x839 128) x479) (= x1060 x547) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 259200 x235)) (= x202 x35) (= x300 x1281) (= x227 x353) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x231) (and (< x231 32) (= (<= x231 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x1049) (= (x837 1461501637330902918203684832716283019655932542975 x583) x1211) (< 0 x803) (= x475 x347) (= (* 259200 x235) x206) (= x565 (+ x1281 x475)) (= (x804 (+ x360 32)) x997) (= x66 (div x206 31536000000000000000000000000000000)) (> 2446411860 x105) (= x1064 x565) (= 1818647125 x105) (= (* x1116 x479) x1253) (< (+ x347 x300) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1253 x235) (= x353 (x521 (- x695 x589))) (not (< x227 4))) (and (=> (and (not x829) (and (= true x440) (= x161 x3))) (and (=> (and x440 (and (= x1018 x9) (= x387 true) (= x185 x547))) (and (=> (and (not x387) (= x897 0)) x852) (=> (and (and (>= x1322 0) (= (= x1322 0) x812) (<= x1322 255) (> 256 x1322)) x387) (and (=> (and (not x812) (= 0 x897)) x852) (=> (and (and (<= 0 x223) (>= 255 x223) (> 256 x223) (= x1087 (x473 (x39 x1060) x419 0)) (= (> x223 0) x447) (= x419 (x473 (x39 66268296141940672851042108147304593538321322149885339258387047461996478413388) (x495 0) 0)) (= x223 (x1105 x1087))) x812) (and (=> (and x447 (and (>= x1026 0) (<= x1026 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x79 (< x1219 x1026)))) (and (=> (and (and (and (and (= 3336544575 x25) (> x232 0) (= 89953063794570797914675343120038501642627609741519254829220540789936042803200 x637) (= x938 x1057) (not (= x25 1008072988)) (= x232 (x196 (x39 x642))) (= (x521 (- x1031 4)) x737) (= x1031 68) (not (= 1997499061 x25)) (not (> 4 x1031)) (not (= 1703538655 x25)) (= x723 (or (> x737 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x737 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x737))))) (= x1031 68) (= x239 x1223)) x53) (and (= x53 (= x642 x961)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x938) (< x961 1461501637330902918203684832716283019655932542976) (= x1100 (x521 (- x1219 x1026))) (<= x239 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x961 1461501637330902918203684832716283019655932542975) (<= 0 x239) (= 128 x563) (<= 0 x961) (<= 0 x938))) (not x79)) (and (=> (and (= x281 (= x239 0)) (not x723)) (and (=> (and (= x478 x853) x281) x218) (=> (and (not x281) (= (> x1057 x1223) x889)) (and (=> x889 x48) (=> (and (not x889) (and (= x988 (= (ite x113 1 0) 0)) (= x426 (x521 (- x1223 x1057))) (= (> x426 115792089237316195423570985008687907853269984665640) x113))) (and (=> (and (and (= x416 (< x266 x917)) (= (div x120 x1223) x266) (= (mod (* 1000000000000000000000000000 x426) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x120)) x988) (and (=> (and (not x416) (= (< 1000000000000000000000000000 x917) x800)) (and (=> x800 x48) (=> (and (not x800) (and (= x859 (x521 (- 1000000000000000000000000000 x917))) (= x1069 (< x266 x917)) (= (= 1000000000000000000000000000 x917) x314))) (and (=> (and (not x1069) (and (= (< x1004 x1296) x991) (= (x521 (- x266 x917)) x1084))) (and (=> (and (and (= x184 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x906)) (= x683 (x837 x448 x450)) (= (x521 (- x1004 x1296)) x906) (= (= x683 0) x672) (= x450 (ite (> x1084 x184) 1 0)) (= (= x906 0) x836) (= x448 (ite (not x836) 1 0))) (not x991)) (and (=> (and (= (mod (* x1084 x906) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x555) x672) (and (=> (and (not x314) (and (= x368 (< x51 x1296)) (= x51 (x521 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1190))) (= x1190 (div x555 x859)))) (and (=> x368 x48) (=> (and (and (= x24 x853) (= (x804 (+ x1190 x1296)) x24)) (not x368)) x218))) (=> x314 x48))) (=> (not x672) x48))) (=> x991 x48))) (=> x1069 x48))))) (=> (and x416 (= (> x478 x1296) x973)) (and (=> x973 x48) (=> (and (not x973) (and (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x122) x1032) (= (= 0 x122) x554) (= x1114 (ite (> x266 x1032) 1 0)) (= (= 0 x119) x228) (= (ite (not x554) 1 0) x1118) (= x119 (x837 x1118 x1114)) (= x122 (x521 (- x1296 x478))))) (and (=> (not x228) x48) (=> (and (and (= x653 (mod (* x122 x266) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x166 (> x917 0))) x228) (and (=> (and x166 (and (= (div x653 x917) x525) (= (x521 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x525)) x102) (= (< x102 x478) x692))) (and (=> x692 x48) (=> (and (not x692) (and (= (x804 (+ x525 x478)) x580) (= x580 x853))) x218))) (=> (not x166) x48))))))))) (=> (not x988) x48))))))) (=> x723 x48))) (=> (and x79 (= 0 x897)) x852))) (=> (and (not x447) (= x897 0)) x852))))))) (=> (and (not x440) (= x897 0)) x852))) (=> (and (= 0 x585) x829) x524)))))
(assert (x684 x146))
(assert (x684 x1003))
(assert (x684 x257))
(assert (x684 x133))
(assert (x684 x547))
(assert (x684 x1095))
(assert (x168 x1179))
(assert (x684 x1206))
(assert (x684 x994))
(assert (x693 x1230))
(assert (x684 x1135))
(assert (x684 x1227))
(assert (= (and x988 x856) x721))
(assert (x684 x18))
(assert (x684 x15))
(assert (x684 x1244))
(assert (= (or x508 x713) x680))
(assert (= (x39 24000000000000000000) (x495 24000000000000000000)))
(assert (x684 x1072))
(assert (x684 x634))
(assert (x684 x1275))
(assert (x684 x831))
(assert (x684 x140))
(assert (x684 x919))
(assert (x684 x993))
(assert (x684 x1181))
(assert (x684 x555))
(assert (x684 x432))
(assert (x684 x635))
(assert (x684 x534))
(assert (x684 x232))
(assert (= (x935 x1) 0))
(assert (x684 x1036))
(assert (= (and x1313 (not x1038)) x60))
(assert (x684 x94))
(assert (x168 x577))
(assert (= (and x387 x921) x396))
(assert (= (x1124 (x39 66268296141940672851042108147304593538321322149885339258387047461996478413388)) 66268296141940672851042108147304593538321322149885339258387047461996478413388))
(assert (= x670 (or x481 x472 (and x192 x167) x885 x420 x349 x1224 x46 x42 x730 x873 x484 x650)))
(assert (x684 x972))
(assert (x684 x1252))
(assert (x684 x62))
(assert (= x795 (x1124 (x39 x795))))
(assert (x684 x1229))
(assert (x684 x1143))
(assert (x684 x1142))
(assert (= (and x1314 (not x280)) x101))
(assert (x684 x1013))
(assert (x684 x695))
(assert (x684 x1088))
(assert (x1247 x1219))
(assert (x684 x582))
(assert (x684 x868))
(assert (= x95 (=> (and (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x819) x604) (= (x804 (+ 32 x557)) x895) (= x465 (x804 (+ x40 x604))) (= (x804 (+ x502 32)) x1062) (= (< 18446744073709551615 x465) x1266) (= (> x40 x465) x815) (= x983 (mod (* x1112 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (< 18446744073709551615 x504)) (= x598 0) (= (x804 (+ x1062 x983)) x18) (= (x804 (+ x1287 x504)) x502) (= (ite x914 1 0) x598) (= x914 (or x815 x1266)) (= (x251 x502) x1112) (or (and (> x767 x422) (= (<= x422 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x422) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767))) (= (mod (* 32 x1112) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x557) (not (> x18 x767)) (= x1145 (> x18 x1062)) (= x819 (x804 (+ 31 x895))) (= (x251 x488) x504) (= x691 (x804 (+ x40 32))) (= (x804 (+ 31 x502)) x422) (not (< 18446744073709551615 x1112))) (and (=> x1145 x97) (=> (and (= x465 x801) (not x1145)) x123)))))
(assert (= x524 (=> (and (= (= 0 x585) x1260) (or (not x1260) x1260)) x1115)))
(assert (x684 x9))
(assert (x684 x370))
(assert (x684 x1169))
(assert (x684 x31))
(assert (x684 x437))
(assert (x684 x431))
(assert (= (and x366 (not x655)) x398))
(assert (x684 x237))
(assert (= (or x499 x382) x1228))
(assert (x684 x944))
(assert (= (x1124 (x495 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (= (x39 65536) (x495 65536)))
(assert (x684 x144))
(assert (x684 x1113))
(assert (= (x1124 (x495 38731024311866695680078894486728619323467920029808689935542550702492038987776)) 38731024311866695680078894486728619323467920029808689935542550702492038987776))
(assert (= (or x76 (and (not x727) x1228)) x414))
(assert (x684 x395))
(assert (= x297 (and x694 x800)))
(assert (x684 x197))
(assert (x684 x561))
(assert (x684 x125))
(assert (x684 x151))
(assert (x684 x1159))
(assert (x684 x245))
(assert (x191 x424 x1206))
(assert (x684 x788))
(assert (x168 x1234))
(assert (x684 x510))
(assert (x684 x589))
(assert (= (x935 x951) 0))
(assert (= x573 (and x900 (not x1035))))
(assert (= (or x911 x1201) x523))
(assert (= (and x545 x14) x170))
(assert (x1215 x1179))
(assert (= (and x306 x228) x78))
(assert (x684 x44))
(assert (x684 x893))
(assert (= (and (not x985) x283) x810))
(assert (= (or x195 x989) x1093))
(assert (x684 x522))
(assert (x684 x931))
(assert (x684 x1251))
(assert (= (and x72 x843) x713))
(assert (x684 x888))
(assert (= (and x854 x616) x1288))
(assert (x684 x1064))
(assert (= x564 (=> (and (not (< x767 x726)) (= 0 x968) (not (> x149 18446744073709551615)) (= x1138 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1234)) (= x417 (x804 (+ 31 x687))) (= x1234 (x804 (+ x149 31))) (= x44 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x417)) (= (> x698 18446744073709551615) x376) (= x698 (x804 (+ x44 x190))) (= (x804 (+ x149 x1033)) x791) (= x687 (x804 (+ 32 x1138))) (= (x804 (+ 32 x864)) x1058) (= x330 (not (< x1058 x1191))) (= x160 (> x190 x698)) (= x648 (x804 (+ x1073 x864))) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x747) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x747 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x747 x767))) (= x1073 (x251 x864)) (= x968 (ite x584 1 0)) (= x747 (x804 (+ 31 x648))) (= (x804 (+ x648 32)) x118) (= (x251 x648) x149) (= (x804 (+ x118 x149)) x726) (= x584 (or x160 x376)) (= (x804 (+ x190 32)) x1033) (not (< 18446744073709551615 x1073))) (and (=> (= x698 x1095) x626) x330))))
(assert (= (x495 31536000000000000000000000000000000) (x39 31536000000000000000000000000000000)))
(assert (x684 x607))
(assert (= (and (not x1048) x842) x953))
(assert (x684 x70))
(assert (= 1461501637330902918203684832716283019655932542975 (x1124 (x495 1461501637330902918203684832716283019655932542975))))
(assert (x684 x153))
(assert (= (and x786 (not x181)) x689))
(assert (= (x495 115792089237316195423570985008687907853269984665640) (x39 115792089237316195423570985008687907853269984665640)))
(assert (x684 x1071))
(assert (= (x1124 (x495 3498358313)) 3498358313))
(assert (x684 x548))
(assert (= (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x795) (= x741 false) (= (x473 (x39 x795) (x495 2) 0) x1083) (= false x425) (= 0 x1252) (<= 0 x919) (= x205 (< 0 (x196 (x39 x1174)))) (>= 1461501637330902918203684832716283019655932542975 x1102) (= (> (x196 (x39 x1060)) 0) x641) (>= x435 0) (not (> 2307130307 x749)) (>= x174 0) (>= 1461501637330902918203684832716283019655932542975 x642) (<= 0 x348) (< x919 1461501637330902918203684832716283019655932542976) (<= 0 x139) (not (= x285 x1174)) (= true x528) (>= x384 0) (<= x285 1461501637330902918203684832716283019655932542975) (not (= x1174 x1060)) (> x285 0) (>= 255 x871) (= x130 (< 0 (x196 (x39 x642)))) (not (= x285 x1060)) (<= x1244 1461501637330902918203684832716283019655932542975) (not (< x749 3414818225)) (not (= x642 x285)) (= false x1270) x641 (< 0 x1060) (= x795 x1102) (= (x619 x305) x919) (<= 0 x341) (<= x1322 255) (< 0 x639) (= x94 x919) (not (= x642 x1174)) (>= 1461501637330902918203684832716283019655932542975 x919) (= x639 (x196 (x39 x1060))) x130 (= x341 (x733 (x39 x642))) (>= 1461501637330902918203684832716283019655932542975 x1060) (= x384 (x733 (x39 x1174))) (>= 255 x1000) (< 0 x642) (= x148 865950217) (>= x1322 0) (= (x462 x1083 1) x305) (<= x961 1461501637330902918203684832716283019655932542975) (> x1174 0) (= x19 x1244) (= x1251 2) (<= x139 1461501637330902918203684832716283019655932542975) x1016 (>= x1102 0) (= x574 x348) (<= 0 x961) x205 (<= 0 x1244) (= x435 (x733 (x39 x285))) (not (= x1060 x642)) (<= 0 x871) (= x749 3414818225) (= x1016 (< 0 (x196 (x39 x285)))) (<= 0 x1000) (not (< x749 2961265839)) (>= 1461501637330902918203684832716283019655932542975 x348) (>= 1461501637330902918203684832716283019655932542975 x1174) (= (x733 (x39 x1060)) x174)) (and (and (and (= x901 x263) (< x19 1461501637330902918203684832716283019655932542976) (= x1164 (= x1255 x287)) (= 1 x607) (= x182 (> x1259 x489)) (= x259 (= 0 x19)) (= x489 (x733 (x39 x19))) (= x287 (<= x263 1)) (or x85 x259) x1164 (= x85 (< 0 x19))) (and (= x136 428079936) (= (x462 x627 1) x100) (= (= 0 x779) x1255) (> x326 0) (> 256 x31) (not (= x136 418493994)) (< x136 791671133) (= x1303 0) (= x715 x779) (> 2307130307 x136) (not (> x31 3)) (= x627 (x473 (x39 x92) (x495 2) 0)) (= x31 (x494 x100)) (= x31 x901) (not (> 418493994 x136)) (>= 1461501637330902918203684832716283019655932542975 x92) (= x92 x1102) (= x326 (x196 (x39 x1060))))) (and (< 0 x740) (not (< x1068 3414818225)) (= x1102 x6) (= x94 x395) (<= x6 1461501637330902918203684832716283019655932542975) (= x1068 3414818225) (= (x462 x165 1) x324) (<= x418 1461501637330902918203684832716283019655932542975) (= x418 x715) (not (> 2307130307 x1068)) (<= 0 x418) (< x418 1461501637330902918203684832716283019655932542976) (= x740 (x196 (x39 x1060))) (not (< x1068 2961265839)) (= x418 (x619 x324)) (= (x473 (x39 x6) (x495 2) 0) x165)))) (and (=> (and (not x182) (and (= (x804 (+ x1013 31)) x150) (> 2307130307 x20) (= (x251 x1013) x559) (>= x1243 0) (< x20 1381722888) (not (< x767 4)) (= x717 (x251 x1287)) (or (and (> x150 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (<= x150 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x767 x150))) (not (or (and (> 160 x159) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x159) true)) (> x159 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x159 (x521 (- x767 x1287))) (< x115 256) (= x994 x1259) (= x369 (mod (* x559 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x462 x887 1) x1192) (< x1268 1461501637330902918203684832716283019655932542976) (= x652 (x733 (x39 x19))) (>= 1461501637330902918203684832716283019655932542975 x288) (= x603 (or x242 x135)) (<= x583 1461501637330902918203684832716283019655932542975) (= (x462 x468 1) x334) (= x611 x937) (= (x804 (+ 32 x320)) x1257) (= x19 x1232) (not (< 18446744073709551615 x1054)) (not (> 791671133 x20)) (<= 0 x1268) (= x1259 x1135) (= x912 x1219) (= x1268 x288) (= x860 128) (>= x288 0) (= x848 x583) (= x1037 (x804 (+ 31 x1257))) (= 0 x570) (= (x196 (x39 x1060)) x855) (= x583 x276) (= (- x652 x1259) x1278) (= x178 (x521 (- x767 4))) (not (> x559 18446744073709551615)) (= (x804 (+ 288 x114)) x190) (not (= x20 791671133)) (= x1013 (x804 (+ x717 x1287))) (= x115 2) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x994 x645)) (<= x611 1461501637330902918203684832716283019655932542975) (= (x619 x334) x1268) (<= 0 x137) (= x135 (> 288 x190)) (<= x1243 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x137 1461501637330902918203684832716283019655932542975) (= (ite x603 1 0) x570) (and (= true (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 195 x767)) (not (or (and (> 64 x178) (= (<= x178 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x178 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x583 x187) (= 865950217 x20) (<= x1268 1461501637330902918203684832716283019655932542975) (= x144 x583) (= (x473 (x39 x583) (x495 2) 0) x887) (= x14 (< x864 x1191)) (= x115 (x494 x1192)) (> x855 0) (= x242 (> x190 18446744073709551615)) (= x937 x428) (not (or (> x159 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x159 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x159 160)))) (= x468 (x473 (x39 x583) (x495 2) 0)) (not (> x115 3)) (= (x804 (+ x369 x864)) x1191) (= (x513 (x39 x1060)) x645) (= (mod (* 32 x559) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x320) (= x114 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1037)) (= (x804 (+ 32 x1013)) x864) (= x1287 (x804 (+ x1054 4))) (<= 0 x611) (not (> x717 18446744073709551615)) (not (= 2 x1243)) (= x503 (x804 (+ x645 x1259))) (not (> x1191 x767)) (= x19 x288))) (and (=> x14 x564) (=> (and (not x14) (= x190 x1095)) x626))) (=> (and x182 (and (= x271 false) (= x774 true))) x208))) x1117))
(assert (= x519 (or x43 x260 x1170)))
(assert (= (and (not x1070) x1122) x712))
(assert (x684 x636))
(assert (x684 x577))
(assert (x684 x364))
(assert (x684 x239))
(assert (x684 x602))
(assert (= x461 (=> (and (= x760 (x804 (+ x255 31))) (= x83 (x804 (+ x1006 x500))) (= (x804 (+ 32 x255)) x342) (= x203 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x662)) (or (and (= (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x760)) (< x760 x767)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x760))) (= x746 (x804 (+ x486 32))) (= x724 (x804 (+ x1040 x342))) (not (> x32 18446744073709551615)) (= x255 (x804 (+ x486 x32))) (= x1040 (x251 x255)) (= x849 0) (= (or x962 x1200) x373) (= (not (> x364 x746)) x220) (= (< x83 x1006) x1200) (not (> x1040 18446744073709551615)) (not (> x724 x767)) (= (x804 (+ x1283 31)) x676) (= (x804 (+ x1040 31)) x662) (= x869 (x804 (+ x1242 x1040))) (= x32 (x251 x486)) (= x849 (ite x373 1 0)) (= x500 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x676)) (= x1283 (x804 (+ x203 32))) (= x962 (> x83 18446744073709551615)) (= x1242 (x804 (+ x1006 32)))) (and x220 (=> (= x83 x40) x95)))))
(assert (= 24000000000000000000 (x1124 (x495 24000000000000000000))))
(assert (= x842 (and x1317 x894)))
(assert (x684 x502))
(assert (x684 x665))
(assert (x684 x923))
(assert (= 31536000000000000000000000000000000 (x1124 (x495 31536000000000000000000000000000000))))
(assert (= (x1124 (x495 1381722888)) 1381722888))
(assert (x684 x895))
(assert (x684 x203))
(assert (x684 x1211))
(assert (= x924 (and x1158 x970)))
(assert (x1215 x520))
(assert (x1215 x1037))
(assert (= x515 (and x1163 (not x1145))))
(assert (x684 x24))
(assert (x684 x941))
(assert (x684 x992))
(assert (= x1155 (or x460 x670)))
(assert (x684 x1065))
(assert (= x260 (and x1210 x542)))
(assert (x684 x1080))
(assert (x684 x975))
(assert (x684 x1147))
(assert (= (or x423 x401) x366))
(assert (x684 x1042))
(assert (x684 x452))
(assert (x1215 x688))
(assert (= (or x1173 x511 x214) x423))
(assert (=> (>= 10000 x1060) (= (x495 x1060) (x39 x1060))))
(assert (= (x935 x1184) 0))
(assert (= x659 (and x889 x466)))
(assert (= (and x783 x569) x1008))
(assert (= (=> (and (= x1203 (x186 (x39 x590))) (not (= x1250 0)) (= (x196 (x39 x590)) x1250) (= x399 (and (>= x945 32000000000000000000) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1203 32000000000000000000)))) (= (x186 (x39 x1060)) x945)) (and (=> (and (and (and (= x497 (x804 (+ x566 32000000000000000000))) (= x566 (x1110 (x39 x590))) (= x1238 (x186 (x39 x1060))) (= x1070 (> x696 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x566 32000000000000000000)) (= x261 (- x1238 32000000000000000000))) (or (not x1070) (and (and (= (x722 (x39 x1060)) x409) (= (x722 (x39 x590)) x669) x979 (= x1194 (>= (x827 (x39 x1060)) x409)) (= x979 (= x669 (x827 (x39 x590)))) x1194 (< x322 4294967296)) x1070))) x399) x537) (=> (and (not x399) (= x1045 0)) x45))) x881))
(assert (x684 x1299))
(assert (x168 x417))
(assert (x684 x1321))
(assert (= x1214 (and x805 x543)))
(assert (= x195 (and x754 x319)))
(assert (= x152 (=> (and (= x81 (x804 (+ x315 32))) (= x665 (x804 (+ x81 32))) (= (x251 x81) x1080) (= (not (> x129 x891)) x1131) (= x1050 (ite x246 1 0)) (= (x804 (+ x1147 32)) x315) (= x980 (x804 (+ x1029 128))) (not (or (> x847 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x847 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 128 x847)))) (<= x1137 452312848583266388373324160190187140051835877600158453279131187530910662655) (= (> x980 18446744073709551615) x987) (= x891 (x804 (+ x665 32))) (= (or x987 x198) x246) (= x110 (x804 (+ x785 32))) (= (x804 (+ 32 x1029)) x785) (= x857 (x251 x665)) (= x1137 (x251 x1147)) (= x847 (x521 (- x767 x1147))) (= (x804 (+ 32 x110)) x666) (= (> x1029 x980) x198) (>= 255 x930) (= 0 x1050) (= x930 (x251 x315))) (and (=> (= x501 x980) x96) x1131))))
(assert (x684 x785))
(assert (x684 x148))
(assert (= 4294967296 (x1124 (x495 4294967296))))
(assert (x684 x592))
(assert (x684 x1073))
(assert (= (or x1041 x879 x60 x1052 x163) x52))
(assert (= 1099511627776 (x1124 (x495 1099511627776))))
(assert (x684 x451))
(assert (x168 x482))
(assert (x684 x767))
(assert (x684 x529))
(assert (= (x1124 (x462 x468 1)) (+ (x1124 x468) 1)))
(assert (x684 x1084))
(assert (x684 x1060))
(assert (x684 x402))
(assert (x684 x859))
(assert (= 3755674541 (x1124 (x495 3755674541))))
(assert (x684 x776))
(assert (= x485 (=> (and (< (* 32000000000000000000 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x445 (> x374 x1259)) (= x374 (* 32000000000000000000 x70))) (and (=> (and (= x820 x835) (not x445)) x183) (=> (and x445 (and (and (= x146 (x196 (x39 x285))) (not (< x868 1631253430)) (not x1076) (= x548 101252785324535458888692376134782526488201703179675774606846032596167196409856) (not x575) (= x632 (x804 (+ 4 x835))) (= 0 x23) (= (x804 (+ 32 x632)) x438) (not (> 3629318494 x868)) (= x477 68) (= x1290 x477) (= x1222 128) (<= 0 x961) (= x575 (or (and (> 64 x830) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x830))) (> x830 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (= x70 0) x141) (= x1265 (x521 (- x938 x745))) (not x386) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x938) (< 0 x146) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x239) (= (mod (* x70 32000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x628) (= (< x938 x745) x1076) (not (= x868 3629318494)) (= x430 (ite (> 32000000000000000000 x775) 1 0)) (= x745 x347) (>= x938 0) (= x745 x1116) (= x1290 (x521 (- x602 x835))) (= (ite (not x141) 1 0) x390) (not (< x477 4)) (= x775 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x70)) (not (= 3714247998 x868)) (= x868 3755674541) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x938) (= x23 (x837 x390 x430)) (= x830 (x521 (- x477 4))) (= (x521 (- x628 x1259)) x347) (= (x804 (+ 64 x632)) x602) (>= x938 0) (= (< x938 x1116) x386) (= x280 (= x961 x642)) (not (< x868 2835717307)) (not (> x1135 x628)) (>= 1461501637330902918203684832716283019655932542975 x961) (<= 0 x239) (< x961 1461501637330902918203684832716283019655932542976)) (and x280 (and (= 89953063794570797914675343120038501642627609741519254829220540789936042803200 x1104) (= x725 x1265) (not (= x814 1997499061)) (= 68 x125) (= x239 x258) (not (= x814 1703538655)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x522) (and (= true (<= x522 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 64 x522))) x192) (not (< x125 4)) (not (= 1008072988 x814)) (= (x521 (- x125 4)) x522) (= (x196 (x39 x642)) x1171) (= x125 68) (= x814 3336544575) (< 0 x1171))))) (and (=> x192 x1180) (=> (and (= (= 0 x239) x176) (not x192)) (and (=> (and (not x176) (= x222 (> x725 x258))) (and (=> x222 x1180) (=> (and (not x222) (and (= x311 (> x490 115792089237316195423570985008687907853269984665640)) (= x490 (x521 (- x258 x725))) (= (= (ite x311 1 0) 0) x970))) (and (=> (not x970) x1180) (=> (and (and (= (> x917 x224) x294) (= (mod (* 1000000000000000000000000000 x490) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x671) (= (div x671 x258) x224)) x970) (and (=> (and x294 (= (< x1296 x478) x1175)) (and (=> x1175 x1180) (=> (and (and (= x893 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402)) (= (ite (> x224 x893) 1 0) x1273) (= x711 (= x402 0)) (= x402 (x521 (- x1296 x478))) (= (ite (not x711) 1 0) x1020) (= (x837 x1020 x1273) x1299) (= x963 (= 0 x1299))) (not x1175)) (and (=> (not x963) x1180) (=> (and (and (= x682 (> x917 0)) (= x449 (mod (* x402 x224) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x963) (and (=> (and (and (= (x521 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x209)) x1245) (= (< x1245 x478) x1221) (= (div x449 x917) x209)) x682) (and (=> (and (and (= x824 (x804 (+ x478 x209))) (= x1320 x824)) (not x1221)) x339) (=> x1221 x1180))) (=> (not x682) x1180))))))) (=> (and (not x294) (= (< 1000000000000000000000000000 x917) x1141)) (and (=> (and (not x1141) (and (= x846 (= x917 1000000000000000000000000000)) (= (x521 (- 1000000000000000000000000000 x917)) x1099) (= x1133 (> x917 x224)))) (and (=> x1133 x1180) (=> (and (not x1133) (and (= (x521 (- x224 x917)) x233) (= x1291 (> x1296 x1004)))) (and (=> x1291 x1180) (=> (and (and (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1142) x381) (= x1142 (x521 (- x1004 x1296))) (= x668 (ite (> x233 x381) 1 0)) (= (= 0 x93) x569) (= (ite (not x88) 1 0) x1078) (= x88 (= x1142 0)) (= (x837 x1078 x668) x93)) (not x1291)) (and (=> (and (= x825 (mod (* x233 x1142) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x569) (and (=> x846 x1180) (=> (and (not x846) (and (= x1300 (< x1306 x1296)) (= x1306 (x521 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x998))) (= (div x825 x1099) x998))) (and (=> (and (and (= x926 (x804 (+ x1296 x998))) (= x1320 x926)) (not x1300)) x339) (=> x1300 x1180))))) (=> (not x569) x1180))))))) (=> x1141 x1180))))))))) (=> (and x176 (= x478 x1320)) x339)))))))))
(assert (= (and x905 x973) x455))
(assert (= (or x109 x328) x777))
(assert (=> (<= x56 10000) (= (x495 x56) (x39 x56))))
(assert (x684 x902))
(assert (=> (>= 10000 x19) (= (x495 x19) (x39 x19))))
(assert (x684 x138))
(assert (= (or x942 x80 x621) x460))
(assert (x1215 x91))
(assert (= (or x5 x1056) x295))
(assert (x684 x184))
(assert (x684 x1130))
(assert (x684 x980))
(assert (x684 x1046))
(assert (x684 x639))
(assert (x684 x321))
(assert (x684 x1188))
(assert (x684 x326))
(assert (x684 x892))
(assert (x684 x769))
(assert (x684 x861))
(assert (x684 x227))
(assert (x684 x417))
(assert (x684 x1318))
(assert (= x1237 (and x751 (not x53))))
(assert (= (or x532 x1199 x1301 x1111 x248 x1129 x781 x1007 x1044 x378 x73 x1012 x608 x333) x43))
(assert (x684 x418))
(assert (x684 x308))
(assert (= x1101 (=> (and (not (< 18446744073709551615 x1204)) (= x1025 (x804 (+ 31 x595))) (= (ite x433 1 0) x931) (= (x804 (+ x1262 32)) x59) (= x520 (x804 (+ x59 31))) (= (x251 x1090) x1204) (= x470 (x804 (+ x1090 x1204))) (= (x804 (+ x470 32)) x731) (not (> x257 x767)) (= (> x405 x1212) x531) (= (< 18446744073709551615 x1212) x28) (= (x804 (+ x731 x595)) x257) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x767) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x888)) (> x767 x888)) (and (> x888 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x767 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x804 (+ x1286 x405)) x1212) (= x1166 (not (> x811 x138))) (= x1286 (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x520)) (= (x804 (+ x790 x595)) x30) (= x790 (x804 (+ 32 x405))) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1025) x1262) (not (> x595 18446744073709551615)) (= x595 (x251 x470)) (= (or x28 x531) x433) (= x931 0) (= x888 (x804 (+ 31 x470))) (= x138 (x804 (+ 32 x1090)))) (and x1166 (=> (= x1212 x55) x404)))))
(assert (x684 x1005))
(assert (x684 x940))
(assert (x684 x688))
(assert (= (=> (and (= x514 (x804 (+ x634 32))) (= x200 (< 0 x151)) (= x809 (x804 (+ 32 x833))) (= x463 (x804 (+ 31 x644))) (= (x837 115792089237316195423570985008687907853269984665640564039457584007913129639904 x463) x788) (= x303 (x804 (+ 32 x799))) (= (x459 x833) x151) (= x799 (x804 (+ x788 x599))) (= (x521 (- x799 x946)) x1316)) (and (=> (and (= 0 x1079) (not x200)) x516) (=> (and (and (= x1 x809) (= x1227 x303) (= (> x151 32) x1038) (= (x597 x1) x635)) x200) (and (=> (and x1038 (and (= (x804 (+ x303 32)) x552) (= (x804 (+ 32 x809)) x870) (= (< 64 x151) x427) (= x1276 (x1051 x870)))) (and (=> (and x427 (and (= (x804 (+ x303 64)) x633) (= (x1081 x451) x739) (= (x804 (+ 64 x809)) x451) (= (< 96 x151) x845))) (and (=> x845 x916) (=> (and (not x845) (= x1079 96)) x516))) (=> (and (not x427) (= 64 x1079)) x516))) (=> (and (= x1079 32) (not x1038)) x516))))) x268))
(assert (x168 x1118))
(assert (x684 x449))
(assert (x684 x488))
(assert (= x686 (and x856 (not x988))))
(assert (= (or x690 x810 x896) x76))
(assert (x684 x1198))
(assert (x684 x407))
(assert (x684 x847))
(assert (= (x1124 (x495 2307130307)) 2307130307))
(assert (= (x1124 (x495 115792089237316195423570985008687907853269984665640)) 115792089237316195423570985008687907853269984665640))
(assert (x684 x68))
(assert (x684 x102))
(assert (= (x1124 (x495 65535)) 65535))
(assert (x684 x258))
(check-sat)
(exit)