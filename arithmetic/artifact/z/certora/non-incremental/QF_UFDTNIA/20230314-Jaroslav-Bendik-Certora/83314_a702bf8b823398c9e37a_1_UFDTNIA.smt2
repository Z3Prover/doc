(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x833 0)) (((x251 (x404 x833) (x121 x833) (x420 Int)) (x151 (x117 x833) (x8 Int)) (x820 (x554 Int)))))
(declare-fun x527 () Int)
(declare-fun x534 () Int)
(declare-fun x776 () Int)
(declare-fun x806 () Int)
(declare-fun x355 () Int)
(declare-fun x392 () Int)
(declare-fun x863 () Int)
(declare-fun x344 () Bool)
(declare-fun x108 () Bool)
(declare-fun x594 () Int)
(declare-fun x451 () Bool)
(declare-fun x758 () Int)
(declare-fun x822 () Bool)
(declare-fun x329 () Int)
(declare-fun x405 () Int)
(declare-fun x493 () Int)
(declare-fun x693 () Bool)
(declare-fun x244 () Int)
(declare-fun x467 () Int)
(declare-fun x751 () Int)
(declare-fun x465 () Int)
(declare-fun x781 () Int)
(declare-fun x587 () Int)
(declare-fun x55 () Int)
(declare-fun x851 () Bool)
(declare-fun x204 () Int)
(declare-fun x213 () Int)
(declare-fun x707 () Bool)
(declare-fun x771 () Int)
(declare-fun x538 () Int)
(declare-fun x122 () Int)
(declare-fun x7 () Bool)
(declare-fun x449 () Int)
(declare-fun x411 () Int)
(declare-fun x105 () Int)
(declare-fun x703 () x833)
(declare-fun x852 () Int)
(declare-fun x364 () Int)
(declare-fun x775 () Int)
(declare-fun x790 () Int)
(declare-fun x52 () Int)
(declare-fun x733 () Int)
(declare-fun x642 () Int)
(declare-fun x755 () Int)
(declare-fun x428 () Int)
(declare-fun x348 () Int)
(declare-fun x807 () Int)
(declare-fun x54 () Int)
(declare-fun x208 () Bool)
(declare-fun x436 () Int)
(declare-fun x600 (x833) Int)
(declare-fun x454 () Int)
(declare-fun x338 () Bool)
(declare-fun x4 () Int)
(declare-fun x750 () Bool)
(declare-fun x521 () Int)
(declare-fun x226 () Bool)
(declare-fun x88 () Bool)
(declare-fun x309 () Bool)
(declare-fun x389 () Bool)
(declare-fun x11 () Bool)
(declare-fun x548 () Int)
(declare-fun x250 () Int)
(declare-fun x261 () Bool)
(declare-fun x224 () Bool)
(declare-fun x791 () Int)
(declare-fun x735 () Int)
(declare-fun x53 () Int)
(declare-fun x616 () Int)
(declare-fun x495 () Int)
(declare-fun x59 () Bool)
(declare-fun x801 () Bool)
(declare-fun x357 () Bool)
(declare-fun x669 () Int)
(declare-fun x540 () Int)
(declare-fun x17 () Int)
(declare-fun x690 () Int)
(declare-fun x513 () Int)
(declare-fun x652 () Int)
(declare-fun x48 () Bool)
(declare-fun x566 () Int)
(declare-fun x788 () Bool)
(declare-fun x754 () Int)
(declare-fun x320 () Bool)
(declare-fun x391 () Int)
(declare-fun x76 () Bool)
(declare-fun x38 () Int)
(declare-fun x673 () Int)
(declare-fun x376 () Int)
(declare-fun x295 () Bool)
(declare-fun x377 () Int)
(declare-fun x724 () Bool)
(declare-fun x158 () Int)
(declare-fun x523 () Int)
(declare-fun x478 () Int)
(declare-fun x254 () Bool)
(declare-fun x118 () Bool)
(declare-fun x312 () Bool)
(declare-fun x783 () Int)
(declare-fun x632 () Int)
(declare-fun x568 () Int)
(declare-fun x302 () Int)
(declare-fun x729 () Int)
(declare-fun x738 () Bool)
(declare-fun x624 () Int)
(declare-fun x846 () Int)
(declare-fun x164 () Int)
(declare-fun x232 () Int)
(declare-fun x176 () Int)
(declare-fun x68 () Bool)
(declare-fun x556 () Int)
(declare-fun x233 () Int)
(declare-fun x878 () Bool)
(declare-fun x203 () Int)
(declare-fun x487 () Int)
(declare-fun x192 () Int)
(declare-fun x825 () Bool)
(declare-fun x802 () Int)
(declare-fun x128 () Int)
(declare-fun x591 () Int)
(declare-fun x294 () Int)
(declare-fun x763 () Int)
(declare-fun x563 () Bool)
(declare-fun x603 () Int)
(declare-fun x220 (Int) Int)
(declare-fun x106 () Bool)
(declare-fun x400 () Int)
(declare-fun x237 () Int)
(declare-fun x340 () Bool)
(declare-fun x307 () Int)
(declare-fun x485 () Bool)
(declare-fun x533 () Int)
(declare-fun x696 () Bool)
(declare-fun x337 () Bool)
(declare-fun x305 () Int)
(declare-fun x179 () Int)
(declare-fun x200 () Int)
(declare-fun x15 () Int)
(declare-fun x419 () Int)
(declare-fun x610 () Int)
(declare-fun x290 () Int)
(declare-fun x288 () Int)
(declare-fun x541 () Bool)
(declare-fun x50 () Int)
(declare-fun x161 () Int)
(declare-fun x455 () Bool)
(declare-fun x227 () Int)
(declare-fun x526 () Bool)
(declare-fun x235 () Int)
(declare-fun x536 () Int)
(declare-fun x184 () Int)
(declare-fun x328 () Int)
(declare-fun x193 () Int)
(declare-fun x73 () Int)
(declare-fun x269 () Int)
(declare-fun x674 () Int)
(declare-fun x780 () Int)
(declare-fun x655 () Int)
(declare-fun x676 () Int)
(declare-fun x697 () Int)
(declare-fun x98 () Int)
(declare-fun x190 () Bool)
(declare-fun x653 () Int)
(declare-fun x721 () Int)
(declare-fun x737 () Bool)
(declare-fun x612 () Int)
(declare-fun x445 () Int)
(declare-fun x819 () Int)
(declare-fun x615 () Bool)
(declare-fun x866 () Int)
(declare-fun x710 () x833)
(declare-fun x343 () Bool)
(declare-fun x793 () Int)
(declare-fun x29 () Int)
(declare-fun x99 () Bool)
(declare-fun x101 () Int)
(declare-fun x414 () Int)
(declare-fun x366 () Int)
(declare-fun x115 () Int)
(declare-fun x297 () Int)
(declare-fun x869 () Int)
(declare-fun x408 () Int)
(declare-fun x441 () Int)
(declare-fun x463 () Int)
(declare-fun x341 () Int)
(declare-fun x148 () Int)
(declare-fun x461 () Int)
(declare-fun x545 () Int)
(declare-fun x858 () Bool)
(declare-fun x380 () Bool)
(declare-fun x530 () Int)
(declare-fun x743 () Bool)
(declare-fun x667 () Int)
(declare-fun x1 () Int)
(declare-fun x647 () Int)
(declare-fun x619 () Int)
(declare-fun x27 () Int)
(declare-fun x512 () Int)
(declare-fun x388 () Bool)
(declare-fun x498 () Bool)
(declare-fun x641 () Int)
(declare-fun x379 () Int)
(declare-fun x79 () Int)
(declare-fun x456 () Int)
(declare-fun x306 () Int)
(declare-fun x109 () Int)
(declare-fun x123 () Int)
(declare-fun x432 () Int)
(declare-fun x185 () Int)
(declare-fun x61 () Int)
(declare-fun x722 () Int)
(declare-fun x546 () Int)
(declare-fun x768 () Int)
(declare-fun x132 (Int) Int)
(declare-fun x94 () Int)
(declare-fun x515 () Int)
(declare-fun x474 () Bool)
(declare-fun x41 () Int)
(declare-fun x56 (x833) Int)
(declare-fun x253 () Int)
(declare-fun x406 () Int)
(declare-fun x114 () Int)
(declare-fun x639 () Int)
(declare-fun x719 () Int)
(declare-fun x354 () Int)
(declare-fun x375 () Int)
(declare-fun x740 () Int)
(declare-fun x198 () Int)
(declare-fun x476 () Int)
(declare-fun x633 () Int)
(declare-fun x651 () Int)
(declare-fun x24 () Int)
(declare-fun x648 () Bool)
(declare-fun x282 () Int)
(declare-fun x734 () Int)
(declare-fun x42 () Bool)
(declare-fun x614 () Int)
(declare-fun x601 () Int)
(declare-fun x714 () Int)
(declare-fun x145 () Int)
(declare-fun x520 () Bool)
(declare-fun x113 () Int)
(declare-fun x518 () Int)
(declare-fun x675 () Int)
(declare-fun x199 () Int)
(declare-fun x3 () Bool)
(declare-fun x430 () Int)
(declare-fun x867 () Int)
(declare-fun x44 () Bool)
(declare-fun x569 () Int)
(declare-fun x453 () Int)
(declare-fun x579 () Int)
(declare-fun x191 () Int)
(declare-fun x12 (Int) Int)
(declare-fun x384 () Int)
(declare-fun x657 () Int)
(declare-fun x20 () Int)
(declare-fun x812 () Int)
(declare-fun x685 () Bool)
(declare-fun x18 () Bool)
(declare-fun x464 () Int)
(declare-fun x759 () Bool)
(declare-fun x319 () Int)
(declare-fun x838 () Int)
(declare-fun x25 () Int)
(declare-fun x70 () Bool)
(declare-fun x753 () Int)
(declare-fun x479 () Int)
(declare-fun x209 () Bool)
(declare-fun x827 () Int)
(declare-fun x435 () Bool)
(declare-fun x681 () Int)
(declare-fun x40 () Int)
(declare-fun x111 () Int)
(declare-fun x786 () Int)
(declare-fun x845 () Int)
(declare-fun x517 () Int)
(declare-fun x140 () Int)
(declare-fun x672 () Int)
(declare-fun x326 () Int)
(declare-fun x511 () Int)
(declare-fun x346 () Int)
(declare-fun x769 () Int)
(declare-fun x528 () Int)
(declare-fun x705 () Int)
(declare-fun x631 () Int)
(declare-fun x334 () Int)
(declare-fun x439 () Int)
(declare-fun x514 () Int)
(declare-fun x537 () Int)
(declare-fun x640 () Bool)
(declare-fun x582 () Int)
(declare-fun x182 () Int)
(declare-fun x147 () Int)
(declare-fun x300 () Int)
(declare-fun x84 () Int)
(declare-fun x134 () Int)
(declare-fun x748 () Int)
(declare-fun x779 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x23 () Int)
(declare-fun x798 () Int)
(declare-fun x480 () Int)
(declare-fun x330 () Int)
(declare-fun x773 () Bool)
(declare-fun x448 () Int)
(declare-fun x78 () Int)
(declare-fun x499 () Int)
(declare-fun x133 () Int)
(declare-fun x234 () Int)
(declare-fun x444 () Int)
(declare-fun x731 () Int)
(declare-fun x10 () Int)
(declare-fun x597 () Int)
(declare-fun x477 () Bool)
(declare-fun x92 () Int)
(declare-fun x620 () Int)
(declare-fun x847 () Int)
(declare-fun x625 () x833)
(declare-fun x876 () Bool)
(declare-fun x767 () Int)
(declare-fun x829 () Int)
(declare-fun x47 () Bool)
(declare-fun x87 () Bool)
(declare-fun x757 () Int)
(declare-fun x292 () Int)
(declare-fun x365 () Int)
(declare-fun x522 () Bool)
(declare-fun x138 () Int)
(declare-fun x276 () Int)
(declare-fun x861 () Int)
(declare-fun x267 (Int Int) Int)
(declare-fun x834 () Int)
(declare-fun x739 () Bool)
(declare-fun x345 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x789 () Int)
(declare-fun x746 () Int)
(declare-fun x58 () Bool)
(declare-fun x584 () Int)
(declare-fun x325 () Int)
(declare-fun x629 () Int)
(declare-fun x35 (Int) Int)
(declare-fun x390 () Int)
(declare-fun x490 () Bool)
(declare-fun x507 () Int)
(declare-fun x159 () Bool)
(declare-fun x586 () Int)
(declare-fun x506 () Int)
(declare-fun x347 () Int)
(declare-fun x211 () Bool)
(declare-fun x37 () x833)
(declare-fun x440 () Int)
(declare-fun x352 () Int)
(declare-fun x762 () Int)
(declare-fun x578 () Int)
(declare-fun x658 () Bool)
(declare-fun x356 (Int) Int)
(declare-fun x146 () Int)
(declare-fun x378 () Int)
(declare-fun x607 () Bool)
(declare-fun x422 (x833) Int)
(declare-fun x588 () Int)
(declare-fun x638 () Bool)
(declare-fun x362 () Int)
(declare-fun x202 () Int)
(declare-fun x510 () Int)
(declare-fun x849 () Int)
(declare-fun x547 () Bool)
(declare-fun x529 () Int)
(declare-fun x815 () Int)
(declare-fun x431 () Int)
(declare-fun x136 () Bool)
(declare-fun x186 () Int)
(declare-fun x277 () Bool)
(declare-fun x195 () Int)
(declare-fun x713 () Bool)
(declare-fun x74 () Int)
(declare-fun x609 () Int)
(declare-fun x715 () Int)
(declare-fun x745 () Int)
(declare-fun x298 () Int)
(declare-fun x212 () Int)
(declare-fun x264 () Bool)
(declare-fun x749 () Int)
(declare-fun x810 () Bool)
(declare-fun x580 () Int)
(declare-fun x560 () Bool)
(declare-fun x727 () Bool)
(declare-fun x764 () Int)
(declare-fun x784 () Int)
(declare-fun x604 () Int)
(declare-fun x828 () x833)
(declare-fun x217 () Int)
(declare-fun x856 () Bool)
(declare-fun x165 () Int)
(declare-fun x555 () Int)
(declare-fun x803 () Bool)
(declare-fun x831 () Int)
(declare-fun x137 () Int)
(declare-fun x744 () Int)
(declare-fun x144 () Bool)
(declare-fun x596 () Int)
(declare-fun x839 () Int)
(declare-fun x677 () Int)
(declare-fun x81 () Bool)
(declare-fun x287 () Int)
(declare-fun x874 () Int)
(declare-fun x374 () Int)
(declare-fun x577 () Int)
(declare-fun x816 () Int)
(declare-fun x501 () Bool)
(declare-fun x369 () Int)
(declare-fun x592 () Bool)
(declare-fun x699 () Bool)
(declare-fun x286 () Int)
(declare-fun x93 () Int)
(declare-fun x256 () Int)
(declare-fun x543 () Int)
(declare-fun x760 () Int)
(declare-fun x688 () Int)
(declare-fun x39 () Bool)
(declare-fun x562 () Int)
(declare-fun x854 () Int)
(declare-fun x505 () Int)
(declare-fun x663 () Int)
(declare-fun x387 () Bool)
(declare-fun x398 () Int)
(declare-fun x321 () Int)
(declare-fun x503 () Int)
(declare-fun x304 () Int)
(declare-fun x524 () Int)
(declare-fun x154 () Int)
(declare-fun x407 (Int) x833)
(declare-fun x497 () Int)
(declare-fun x576 () Int)
(declare-fun x654 () Int)
(declare-fun x201 () Int)
(declare-fun x16 () Int)
(declare-fun x481 () Int)
(declare-fun x339 () Bool)
(declare-fun x189 () Int)
(declare-fun x245 () Int)
(declare-fun x178 () Int)
(declare-fun x171 () Int)
(declare-fun x153 () Bool)
(declare-fun x255 () Int)
(declare-fun x247 () Int)
(declare-fun x157 () Int)
(declare-fun x124 () Int)
(declare-fun x489 () Bool)
(declare-fun x14 () Int)
(declare-fun x492 () Int)
(declare-fun x508 () Bool)
(declare-fun x558 () Int)
(declare-fun x756 () Int)
(declare-fun x850 () Bool)
(declare-fun x539 () Int)
(declare-fun x678 () Int)
(declare-fun x323 () Bool)
(declare-fun x736 () Int)
(declare-fun x656 () Int)
(declare-fun x139 () Int)
(declare-fun x458 () Int)
(declare-fun x679 () Int)
(declare-fun x472 () Bool)
(declare-fun x865 () Int)
(declare-fun x486 () Int)
(declare-fun x49 () Int)
(declare-fun x353 () Int)
(declare-fun x278 () Bool)
(declare-fun x104 () Int)
(declare-fun x427 () Int)
(declare-fun x599 () Int)
(declare-fun x32 () Int)
(declare-fun x2 () Int)
(declare-fun x666 () Int)
(declare-fun x796 () Int)
(declare-fun x425 () Int)
(declare-fun x606 () Int)
(declare-fun x429 () Bool)
(declare-fun x778 () Int)
(declare-fun x89 () Int)
(declare-fun x664 () Int)
(declare-fun x817 () Int)
(declare-fun x808 () Int)
(declare-fun x28 () Int)
(declare-fun x859 () Bool)
(declare-fun x711 () Int)
(declare-fun x567 () Bool)
(declare-fun x636 () Int)
(declare-fun x617 () Bool)
(declare-fun x502 () Int)
(declare-fun x608 () Bool)
(declare-fun x712 () Int)
(declare-fun x80 () Bool)
(declare-fun x581 () Int)
(declare-fun x590 () Bool)
(declare-fun x782 () Bool)
(declare-fun x857 () Int)
(declare-fun x426 () Int)
(declare-fun x359 () Int)
(declare-fun x230 () Bool)
(declare-fun x500 () Int)
(declare-fun x63 () Bool)
(declare-fun x741 () Int)
(declare-fun x221 () Int)
(declare-fun x310 () Int)
(declare-fun x162 () Int)
(declare-fun x434 () Int)
(declare-fun x349 () Int)
(declare-fun x246 () Int)
(declare-fun x446 () Int)
(declare-fun x837 () Int)
(declare-fun x216 (Int Int) Int)
(declare-fun x662 () Int)
(declare-fun x273 () Int)
(declare-fun x585 () Bool)
(declare-fun x107 () Int)
(declare-fun x800 () Int)
(declare-fun x670 () Int)
(declare-fun x174 () Int)
(declare-fun x814 () Int)
(declare-fun x36 () Int)
(declare-fun x605 () Bool)
(declare-fun x289 () Bool)
(declare-fun x231 () Int)
(declare-fun x239 () Int)
(declare-fun x813 () Int)
(declare-fun x317 () Int)
(declare-fun x393 () Int)
(declare-fun x868 () Int)
(declare-fun x223 () Int)
(declare-fun x210 () Int)
(declare-fun x613 () Int)
(declare-fun x155 () Int)
(declare-fun x602 () Int)
(declare-fun x680 () Bool)
(declare-fun x716 () Int)
(declare-fun x284 () Int)
(declare-fun x266 () Int)
(declare-fun x150 () Int)
(declare-fun x879 () Bool)
(declare-fun x821 () Int)
(declare-fun x841 () Int)
(declare-fun x240 () Int)
(declare-fun x259 () Int)
(declare-fun x853 () Bool)
(declare-fun x728 () Bool)
(declare-fun x844 () Int)
(declare-fun x271 () Bool)
(declare-fun x618 () Int)
(declare-fun x855 () Int)
(declare-fun x765 () Int)
(declare-fun x671 () Int)
(declare-fun x372 () Bool)
(declare-fun x142 () Int)
(declare-fun x777 () Bool)
(declare-fun x301 () Bool)
(declare-fun x466 () Int)
(declare-fun x835 () Int)
(declare-fun x416 () Int)
(declare-fun x830 () Bool)
(declare-fun x706 () Bool)
(declare-fun x626 () Int)
(declare-fun x525 () Int)
(declare-fun x574 () Int)
(declare-fun x316 () Int)
(declare-fun x236 () Bool)
(declare-fun x51 () Int)
(declare-fun x811 () Bool)
(declare-fun x394 () Int)
(declare-fun x872 () Int)
(declare-fun x262 () Int)
(declare-fun x848 (Int) Int)
(declare-fun x805 () Int)
(declare-fun x701 () Int)
(declare-fun x197 () Int)
(declare-fun x127 () Bool)
(declare-fun x437 () Int)
(declare-fun x870 () Int)
(declare-fun x228 () Int)
(declare-fun x229 () Int)
(declare-fun x268 () Bool)
(declare-fun x77 () Int)
(declare-fun x468 () Int)
(declare-fun x611 (Int) Int)
(declare-fun x595 () Bool)
(declare-fun x371 () Int)
(declare-fun x634 () Int)
(declare-fun x173 () Int)
(declare-fun x747 () Int)
(declare-fun x459 () Int)
(declare-fun x313 () Bool)
(declare-fun x415 () Int)
(declare-fun x413 () Bool)
(declare-fun x172 () Int)
(declare-fun x509 () Bool)
(declare-fun x804 () Bool)
(declare-fun x85 () Bool)
(declare-fun x110 () Int)
(declare-fun x331 () Bool)
(declare-fun x644 () Bool)
(declare-fun x350 () Int)
(declare-fun x280 () Int)
(declare-fun x668 () Bool)
(declare-fun x691 () Int)
(declare-fun x291 () Int)
(declare-fun x720 () Bool)
(declare-fun x421 () Bool)
(declare-fun x187 () Int)
(declare-fun x57 () Int)
(declare-fun x131 () Int)
(declare-fun x265 () Int)
(declare-fun x583 () Int)
(declare-fun x218 () Int)
(declare-fun x447 () Int)
(declare-fun x873 () Int)
(declare-fun x82 () Bool)
(declare-fun x761 () Int)
(declare-fun x418 () Bool)
(declare-fun x21 () Int)
(declare-fun x452 () x833)
(declare-fun x561 () Bool)
(declare-fun x650 () Int)
(declare-fun x342 () Int)
(declare-fun x71 () Bool)
(declare-fun x383 () Int)
(declare-fun x471 () Int)
(declare-fun x332 () Int)
(declare-fun x593 () Int)
(declare-fun x424 () Int)
(declare-fun x386 () Int)
(declare-fun x488 () Bool)
(declare-fun x766 () Int)
(declare-fun x709 () Int)
(declare-fun x270 () Int)
(declare-fun x797 () Int)
(declare-fun x34 (Int Int) Int)
(declare-fun x248 () Int)
(declare-fun x86 () Int)
(declare-fun x116 () Int)
(declare-fun x623 () Int)
(declare-fun x442 () Int)
(declare-fun x473 (Int) Int)
(declare-fun x572 () Int)
(declare-fun x504 (Int Int) Int)
(declare-fun x252 () Int)
(declare-fun x460 () Int)
(declare-fun x621 () Int)
(declare-fun x274 () Int)
(declare-fun x717 () Bool)
(declare-fun x45 () Bool)
(declare-fun x840 () Int)
(declare-fun x725 () Bool)
(declare-fun x361 () Bool)
(declare-fun x557 () Int)
(declare-fun x564 () Bool)
(declare-fun x243 () Int)
(declare-fun x686 () Int)
(declare-fun x399 () Int)
(declare-fun x314 () Int)
(declare-fun x860 () Int)
(declare-fun x263 () Int)
(declare-fun x120 () Bool)
(declare-fun x222 () Int)
(declare-fun x285 () Bool)
(declare-fun x694 (x833) Int)
(declare-fun x206 () Int)
(declare-fun x327 () Bool)
(declare-fun x149 () Int)
(declare-fun x635 () Bool)
(declare-fun x702 () Int)
(declare-fun x684 () Bool)
(declare-fun x103 () Int)
(declare-fun x196 () Bool)
(declare-fun x531 () Int)
(declare-fun x519 () Bool)
(declare-fun x215 () Int)
(declare-fun x785 () Int)
(declare-fun x723 () Int)
(declare-fun x787 () Bool)
(declare-fun x875 () Int)
(declare-fun x180 () Int)
(declare-fun x823 () Int)
(declare-fun x60 () Int)
(declare-fun x373 () Int)
(declare-fun x469 () Int)
(declare-fun x360 () Bool)
(declare-fun x643 () Bool)
(declare-fun x95 () Int)
(declare-fun x163 () Int)
(declare-fun x433 () Int)
(declare-fun x417 () Int)
(declare-fun x22 () Int)
(declare-fun x792 (Int) Int)
(declare-fun x188 () Int)
(declare-fun x126 () Int)
(declare-fun x403 () Int)
(declare-fun x370 () Int)
(declare-fun x156 () Int)
(declare-fun x573 () Int)
(declare-fun x832 () Int)
(declare-fun x5 () Int)
(declare-fun x368 () Bool)
(declare-fun x382 () Int)
(declare-fun x423 () Int)
(declare-fun x167 () Int)
(declare-fun x367 () Int)
(declare-fun x396 () Int)
(declare-fun x175 () Int)
(declare-fun x410 () Int)
(declare-fun x482 () Bool)
(declare-fun x630 () Int)
(declare-fun x168 () Int)
(declare-fun x836 () Int)
(declare-fun x494 () Bool)
(declare-fun x112 () Int)
(declare-fun x553 () Int)
(declare-fun x177 () Int)
(declare-fun x303 () Int)
(declare-fun x794 () Bool)
(declare-fun x65 () Int)
(declare-fun x207 () Bool)
(declare-fun x646 () Int)
(declare-fun x660 () Int)
(declare-fun x483 () Int)
(declare-fun x491 () Bool)
(declare-fun x475 () Bool)
(declare-fun x570 () Int)
(declare-fun x363 () Int)
(declare-fun x324 () Int)
(declare-fun x559 () Int)
(declare-fun x877 () Int)
(declare-fun x249 () Int)
(declare-fun x66 () Int)
(declare-fun x279 () Bool)
(declare-fun x91 () Int)
(declare-fun x143 () Int)
(declare-fun x130 () Bool)
(declare-fun x843 () Int)
(declare-fun x90 () Int)
(declare-fun x730 () Int)
(declare-fun x46 () Int)
(declare-fun x470 () Int)
(declare-fun x33 () Bool)
(declare-fun x194 () Int)
(declare-fun x842 () Int)
(declare-fun x628 () Bool)
(declare-fun x31 () Int)
(declare-fun x704 () Int)
(declare-fun x774 () Bool)
(declare-fun x665 () Int)
(declare-fun x322 () Int)
(declare-fun x708 () Bool)
(declare-fun x622 () Bool)
(declare-fun x160 () Int)
(declare-fun x627 () Bool)
(declare-fun x225 () Int)
(declare-fun x170 () Bool)
(declare-fun x457 () Int)
(declare-fun x260 () Int)
(declare-fun x183 () Int)
(declare-fun x125 () Int)
(declare-fun x589 () Bool)
(declare-fun x551 () Bool)
(declare-fun x687 (Int) Int)
(declare-fun x381 () Int)
(declare-fun x700 () Bool)
(declare-fun x166 () Int)
(declare-fun x443 () Int)
(declare-fun x795 () Int)
(declare-fun x141 () Int)
(declare-fun x532 () Bool)
(declare-fun x335 () Int)
(declare-fun x549 () Int)
(declare-fun x462 () x833)
(declare-fun x62 () Bool)
(declare-fun x692 () Int)
(declare-fun x402 () x833)
(declare-fun x214 () Int)
(declare-fun x299 () Int)
(declare-fun x450 () Int)
(declare-fun x772 () Bool)
(define-fun x496 ((x833 x833) (x129 Int)) x833 (ite ((_ is x151) x833) (x151 (x117 x833) (+ (x8 x833) x129)) (ite ((_ is x251) x833) (x251 (x404 x833) (x121 x833) (+ x129 (x420 x833))) (x820 (+ (x554 x833) x129)))))
(define-fun x535 ((x682 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x682) (>= x682 0)) x682 (- x682 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x119 ((x682 Int)) Int (ite (and (< x682 0) (>= x682 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x682 115792089237316195423570985008687907853269984665640564039457584007913129639936) x682))
(define-fun x826 ((x13 Int)) Bool (and (<= 0 x13) (< x13 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x72 ((x13 Int)) Bool (and (= (x34 115792089237316195423570985008687907853269984665640564039457584007913129639935 x13) x13) (= x13 (x34 x13 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x718 ((x13 Int)) Bool (and (= (x34 0 x13) 0) (= (x34 x13 0) 0)))
(define-fun x484 ((x13 Int)) Bool (= (x34 x13 x13) x13))
(define-fun x315 ((x13 Int)) Bool (and (x484 x13) (x72 x13) (x718 x13)))
(define-fun x9 ((x13 Int) (x135 Int)) Bool (= (x34 x135 x13) (x34 x13 x135)))
(define-fun x67 ((x13 Int) (x135 Int)) Bool (and (>= (x34 x13 x135) 0) (=> (>= x135 0) (<= (x34 x13 x135) x135)) (=> (<= 0 x13) (<= (x34 x13 x135) x13))))
(define-fun x659 ((x13 Int) (x135 Int)) Bool (and (x67 x13 x135) (x9 x13 x135)))
(define-fun x333 ((x13 Int)) Bool (= (x34 x13 255) (mod x13 256)))
(define-fun x97 ((x13 Int)) Bool (and (x333 x13) (x659 x13 255)))
(define-fun x645 ((x13 Int)) Bool (= (x34 x13 57896044618658097711785492504343953926634992332820282019728792003956564819967) (mod x13 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(define-fun x809 ((x13 Int)) Bool (and (x645 x13) (x659 x13 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(define-fun x516 ((x13 Int)) Bool (= (+ (x34 x13 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x13 32)) (mod x13 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x385 ((x13 Int)) Bool (and (x659 x13 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x516 x13)))
(define-fun x598 ((x13 Int)) Bool (= (mod x13 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x13 256) (x34 x13 115792089237316195423570985008687907853269984665640564039457584007913129639680))))
(define-fun x351 ((x13 Int)) Bool (and (x659 x13 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x598 x13)))
(define-fun x358 ((x13 Int)) Bool (= (mod x13 2) (x34 x13 1)))
(define-fun x409 ((x13 Int)) Bool (and (x659 x13 1) (x358 x13)))
(define-fun x661 ((x13 Int)) Bool (= (mod x13 79228162514264337593543950336) (x34 x13 79228162514264337593543950335)))
(define-fun x770 ((x13 Int)) Bool (and (x659 x13 79228162514264337593543950335) (x661 x13)))
(define-fun x308 ((x13 Int)) Bool (= (x34 x13 115792089237316195417293883273301227089434195242512125785869492901042639077375) (- x13 (x34 x13 6277101735386680763835789423128438253588091106870490562560))))
(define-fun x293 ((x13 Int)) Bool (and (x659 x13 115792089237316195417293883273301227089434195242512125785869492901042639077375) (x308 x13)))
(define-fun x438 ((x13 Int)) Bool (= (mod x13 6277101735386680763835789423207666416102355444464034512896) (+ (mod x13 79228162514264337593543950336) (x34 x13 6277101735386680763835789423128438253588091106870490562560))))
(define-fun x695 ((x13 Int)) Bool (and (x659 x13 6277101735386680763835789423128438253588091106870490562560) (x438 x13)))
(define-fun x272 ((x726 Int)) Int (x220 x726))
(define-fun x96 ((x726 Int)) Int (ite (= x726 128) x260 (x473 x726)))
(define-fun x242 ((x726 Int)) Int (ite (= 160 x726) (ite x590 1 0) (x96 x726)))
(define-fun x871 ((x726 Int)) Int (x220 x726))
(define-fun x824 ((x726 Int)) Int (ite (= 128 x726) x829 (x356 x726)))
(define-fun x283 ((x726 Int)) Int (ite (= 160 x726) (ite x519 1 0) (x824 x726)))
(define-fun x6 ((x726 Int)) Int (x220 x726))
(define-fun x83 ((x726 Int)) Int (ite (= 128 x726) x432 (x779 x726)))
(define-fun x26 ((x726 Int)) Int (ite (= x726 160) (ite x488 1 0) (x83 x726)))
(define-fun x395 ((x726 Int)) Int (x848 x726))
(define-fun x258 ((x726 x833)) Int (ite (= (x820 8) x726) x795 (x422 x726)))
(define-fun x219 ((x726 Int)) Int (ite (= x726 128) (ite x508 1 0) (x35 x726)))
(define-fun x69 ((x726 Int)) Int (ite (= 128 x726) 112762432447299995021467288873193731040449111418389949397557428784167418593280 (x219 x726)))
(define-fun x102 ((x726 Int)) Int (ite (= x726 132) x255 (x69 x726)))
(define-fun x238 ((x726 Int)) Int (ite (and (< x726 (+ 0 128)) (<= 128 x726)) (x43 (+ (- x726 128) 0)) (x102 x726)))
(define-fun x296 ((x726 Int)) Int (ite (= 128 x726) x197 (x238 x726)))
(define-fun x152 ((x726 Int)) Int (ite (and (> (+ x197 160) x726) (>= x726 160)) (x43 (+ (- x726 160) 0)) (x296 x726)))
(define-fun x100 ((x726 Int)) Int (ite (= x22 x726) x436 (x152 x726)))
(define-fun x862 ((x726 Int)) Int (ite (= x206 x726) x789 (x100 x726)))
(define-fun x552 ((x726 Int)) Int (ite (= x291 x726) x139 (x862 x726)))
(define-fun x257 ((x726 Int)) Int (ite (= x458 x726) x335 (x552 x726)))
(define-fun x318 ((x726 Int)) Int (ite (= 128 x726) x574 (x792 x726)))
(define-fun x205 ((x726 Int)) Int (ite (= x726 160) (ite x71 1 0) (x318 x726)))
(define-fun x575 ((x726 Int)) Int (x220 x726))
(define-fun x732 ((x726 x833)) Int (ite (= x726 (x820 9)) x464 (x258 x726)))
(define-fun x336 ((x726 x833)) Int (ite (= (x820 19) x726) x832 (x732 x726)))
(define-fun x401 ((x726 x833)) Int (ite (= x726 (x820 20)) x411 (x336 x726)))
(define-fun x169 ((x726 x833)) Int (ite (= x726 x625) x842 (x401 x726)))
(define-fun x864 ((x726 x833)) Int (ite x45 (x401 x726) (x169 x726)))
(define-fun x565 ((x726 x833)) Int (ite x327 (x258 x726) (ite x48 (x401 x726) (x864 x726))))
(define-fun x818 ((x726 Int)) Int (ite (= 128 x726) x610 (x132 x726)))
(define-fun x698 ((x726 Int)) Int (ite (= x726 160) (ite x58 1 0) (x818 x726)))
(define-fun x75 ((x726 Int)) Int (ite (= x726 x866) x819 (x257 x726)))
(define-fun x64 ((x726 Int)) Int (ite x738 (x257 x726) (ite x788 (x552 x726) (ite x627 (x862 x726) (ite x700 (x100 x726) (x75 x726))))))
(define-fun x311 ((x726 Int)) Int (ite (= x322 x726) x347 (x64 x726)))
(define-fun x275 ((x726 Int)) Int (ite (= x90 x726) x558 (x311 x726)))
(define-fun x412 ((x726 Int)) Int (ite (= x431 x726) x463 (x275 x726)))
(define-fun x689 ((x726 Int)) Int (ite (= x94 x726) x576 (x412 x726)))
(define-fun x683 ((x726 Int)) Int (ite (= x470 x726) x745 (x689 x726)))
(define-fun x397 ((x726 Int)) Int (ite x773 (x689 x726) (ite x380 (x412 x726) (ite x63 (x275 x726) (ite x387 (x311 x726) (x683 x726))))))
(define-fun x19 ((x726 Int)) Int (ite (= x525 x726) x761 (x397 x726)))
(define-fun x281 ((x726 Int)) Int (ite (and (<= x86 x726) (> (+ x86 x442) x726)) (x848 (+ (- x726 x86) x493)) (x19 x726)))
(define-fun x241 ((x726 Int)) Int (ite x684 (x19 x726) (x281 x726)))
(define-fun x571 ((x726 Int)) Int (ite (= x593 x726) x531 (x241 x726)))
(define-fun x542 ((x726 Int)) Int (ite x526 (x241 x726) (x571 x726)))
(define-fun x637 ((x726 Int)) Int (ite (= x726 x497) 112349551054952423155953805921267728290102753186399332250345724850365349756928 (x542 x726)))
(define-fun x742 ((x726 Int)) Int (ite (= x553 x726) x857 (x637 x726)))
(define-fun x550 ((x726 Int)) Int (ite (= 64 x726) 128 (x12 x726)))
(define-fun x544 ((x726 Int)) Int (ite (= x636 x726) x751 (x550 x726)))
(define-fun x799 ((x726 Int)) Int (ite (and (<= x497 x726) (> (+ (ite (< x817 32) x817 32) x497) x726)) (x544 (+ (- x726 x497) x40)) (x742 x726)))
(define-fun x649 ((x726 Int)) Int (ite (and (> (+ x817 0) x726) (<= 0 x726)) (x544 (+ x40 (- x726 0))) (x687 x726)))
(define-fun x752 ((x726 Int)) Int (x220 x726))
(define-fun x181 ((x13 Int)) Bool (=> (and (not (= 2458934263 x13)) (not (= x13 2580288415)) (not (= x13 954831406)) (not (= 3586168516 x13)) (not (= x13 79228162514264337593543950335)) (not (= x13 1461501637330902918203684832716283019655932542975)) (not (= x13 115792089237316195423570985008687907853269984665640564039457584007913129639680)) (not (= 3567393941 x13)) (not (= x13 826074471)) (not (= 3996650231 x13)) (not (= 3890975986 x13)) (not (= 1862597803 x13)) (not (= x13 228615836)) (not (= x13 307731845)) (not (= 3008386744 x13)) (not (= 2966737888 x13)) (not (= x13 1439069736)) (not (= x13 3812870723)) (not (= x13 2863377861)) (not (= 18446744073709551615 x13)) (not (= 503383097 x13)) (not (= x13 2039265891)) (not (= 3249860859 x13)) (not (= x13 1816029635)) (not (= x13 238709543)) (not (= 519173431 x13)) (not (= 1871194811 x13)) (not (= 596258137 x13)) (not (= x13 1840041978)) (not (= 3714247998 x13)) (not (= 361691454 x13)) (not (= x13 3028789119)) (not (= x13 3002540418)) (not (= 822145385 x13)) (not (= 3224796394 x13)) (not (= 4294967296 x13)) (not (= 274184521717934524641157099916833587280 x13)) (not (= 3051865383 x13)) (not (= 686821956 x13)) (not (= x13 922701707)) (not (= x13 3506505391)) (not (= 743225245 x13)) (not (= 1738207182 x13)) (not (= 112349551054952423155953805921267728290102753186399332250345724850365349756928 x13)) (not (= x13 5000000)) (not (= 363856219 x13)) (not (= x13 3670205928)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x13)) (not (= 2417572732 x13)) (not (= x13 115792089237316195417293883273301227089434195242512125785869492901042639077375)) (< 10000 x13) (not (= x13 4167276458)) (not (= x13 599290589)) (not (= x13 1531409238)) (not (= 112762432447299995021467288873193731040449111418389949397557428784167418593280 x13)) (not (= x13 3366849169)) (not (= 100000 x13)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x13)) (not (= x13 2876725745)) (not (= x13 2064814097)) (not (= 1779675522 x13)) (not (= 500647658 x13)) (not (= 910484757 x13)) (not (= 3573918927 x13)) (not (= 2379291291 x13)) (not (= x13 2272211003)) (not (= x13 2127478272)) (not (= 86400 x13)) (not (= 1984976886 x13))) (not ((_ is x820) (x407 x13)))))
(assert (= (x820 503383097) (x407 503383097)))
(assert (x826 x771))
(assert (= 3002540418 (x56 (x820 3002540418))))
(assert (x826 x423))
(assert (x826 x330))
(assert (x826 x632))
(assert (x826 x556))
(assert (= x289 (=> (and (= x832 x793) (= 1 x273)) x777)))
(assert (= 79228162514264337593543950335 (x56 (x820 79228162514264337593543950335))))
(assert (x826 x616))
(assert (x826 x134))
(assert (x826 x712))
(assert (x826 x602))
(assert (x826 x631))
(assert (x826 x53))
(assert (= (or x638 x475) x822))
(assert (= (x407 1840041978) (x820 1840041978)))
(assert (x826 x454))
(assert (x826 x95))
(assert (x826 x735))
(assert (x826 x27))
(assert (x826 x364))
(assert (x826 x481))
(assert (x826 x374))
(assert (= (x407 3366849169) (x820 3366849169)))
(assert (x409 x688))
(assert (x826 x304))
(assert (x826 x424))
(assert (x826 x425))
(assert (= (x407 2417572732) (x820 2417572732)))
(assert (= 2966737888 (x56 (x820 2966737888))))
(assert (x826 x160))
(assert (= (x56 (x820 743225245)) 743225245))
(assert (x315 x503))
(assert (x826 x487))
(assert (x826 x131))
(assert (x826 x191))
(assert (= (x56 (x820 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x826 x497))
(assert (= x724 (or x99 x45)))
(assert (x826 x576))
(assert (x826 x840))
(assert (x826 x457))
(assert (= x331 (and x615 x18)))
(assert (x826 x266))
(assert (x826 x214))
(assert (= 1862597803 (x56 (x820 1862597803))))
(assert (x826 x90))
(assert (x826 x621))
(assert (x826 x273))
(assert (x826 x50))
(assert (x826 x533))
(assert (= (x56 (x820 954831406)) 954831406))
(assert (x826 x24))
(assert (x826 x841))
(assert (x826 x84))
(assert (x826 x305))
(assert (= (x56 (x820 307731845)) 307731845))
(assert (= x526 (and x585 (not x301))))
(assert (= (x820 5000000) (x407 5000000)))
(assert (= (x820 2580288415) (x407 2580288415)))
(assert (x826 x332))
(assert (= (x820 112762432447299995021467288873193731040449111418389949397557428784167418593280) (x407 112762432447299995021467288873193731040449111418389949397557428784167418593280)))
(assert (= (=> (and (= 1 x677) (= x260 x346)) x685) x644))
(assert (x826 x672))
(assert (x826 x28))
(assert (x826 x416))
(assert (= (x56 (x820 3996650231)) 3996650231))
(assert (= (x820 3028789119) (x407 3028789119)))
(assert (= (x820 3008386744) (x407 3008386744)))
(assert (x826 x721))
(assert (= (x56 (x407 x852)) x852))
(assert (x826 x142))
(assert (= x738 (and (not x271) x825)))
(assert (= (x56 (x820 1840041978)) 1840041978))
(assert (x826 x584))
(assert (x181 x734))
(assert (x826 x639))
(assert (= (and x615 (not x18)) x11))
(assert (x826 x709))
(assert (x826 x371))
(assert (= (x820 3224796394) (x407 3224796394)))
(assert (x826 x185))
(assert (= true x295))
(assert (x826 x751))
(assert (= x794 (and (not x668) x595)))
(assert (= (x56 (x820 2458934263)) 2458934263))
(assert (x826 x757))
(assert (x826 x187))
(assert (x826 x729))
(assert (= (x407 3051865383) (x820 3051865383)))
(assert (= (x820 238709543) (x407 238709543)))
(assert (x826 x342))
(assert (x826 x133))
(assert (x826 x280))
(assert (= x30 (x56 (x407 x30))))
(assert (= 2417572732 (x56 (x820 2417572732))))
(assert (x826 x831))
(assert (= (x56 (x820 3249860859)) 3249860859))
(assert (x826 x5))
(assert (= (x820 954831406) (x407 954831406)))
(assert (x826 x673))
(assert (= (x35 x868) 0))
(assert (x315 x369))
(assert (= 3366849169 (x56 (x820 3366849169))))
(assert (x826 x630))
(assert (x826 x813))
(assert (= x48 (and (not x455) x822)))
(assert (x826 x781))
(assert (x826 x601))
(assert (x826 x545))
(assert (= (x407 2379291291) (x820 2379291291)))
(assert (x826 x377))
(assert (= 18446744073709551615 (x56 (x820 18446744073709551615))))
(assert (x826 x610))
(assert (x315 x688))
(assert (x826 x247))
(assert (x826 x641))
(assert (x826 x877))
(assert (= x520 (=> (and (= x624 (x258 (x820 14))) (= x583 (x258 (x820 13))) (= (x258 (x820 16)) x433) (= (x258 (x820 15)) x55) (= x750 (< x721 x433))) (and (=> (and (not x750) (and (= x273 0) (= x832 x624))) x777) (=> (and (and (= x59 (< x583 x624)) (or (and (and (< 0 x860) (= x383 x793) (= x454 (x119 (- x721 x55))) (= (div x478 x860) x403) (= (mod (* x454 x714) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x478) (= (x119 (- x583 x624)) x714) (= (x119 (- x433 x55)) x860) (= (x119 (- x583 x403)) x383)) (not x59)) (and x59 (and (= (x119 (- x721 x55)) x392) (= (x119 (- x433 x55)) x784) (= (x119 (- x624 x583)) x722) (= x20 (x535 (+ x583 x780))) (< 0 x784) (= (div x749 x784) x780) (= x749 (mod (* x392 x722) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x20 x793))))) x750) x289)))))
(assert (= (x407 1461501637330902918203684832716283019655932542975) (x820 1461501637330902918203684832716283019655932542975)))
(assert (x826 x383))
(assert (x826 x688))
(assert (x826 x716))
(assert (x826 x674))
(assert (= (x35 x189) 0))
(assert (= (x56 (x820 2127478272)) 2127478272))
(assert (x826 x290))
(assert (x826 x587))
(assert (= (x56 (x820 922701707)) 922701707))
(assert (x826 x755))
(assert (x826 x691))
(assert (x826 x626))
(assert (x826 x362))
(assert (x826 x192))
(assert (x826 x222))
(assert (x826 x593))
(assert (x826 x778))
(assert (= 3573918927 (x56 (x820 3573918927))))
(assert (x826 x276))
(assert (x826 x525))
(assert (x826 x116))
(assert (x826 x206))
(assert (x826 x513))
(assert (x826 x161))
(assert (x826 x867))
(assert (x826 x171))
(assert (= (x407 18446744073709551615) (x820 18446744073709551615)))
(assert (= (x407 3573918927) (x820 3573918927)))
(assert (x826 x180))
(assert (= (and x81 x563) x340))
(assert (= 0 (x35 x366)))
(assert (x826 x203))
(assert (x826 x148))
(assert (x826 x178))
(assert (x826 x517))
(assert (x826 x162))
(assert (= x788 (and x787 (not x482))))
(assert (x826 x784))
(assert (= 361691454 (x56 (x820 361691454))))
(assert (= (x820 2876725745) (x407 2876725745)))
(assert (x826 x398))
(assert (x826 x307))
(assert (x826 x306))
(assert (x826 x286))
(assert (= (x407 599290589) (x820 599290589)))
(assert (x826 x98))
(assert (x826 x795))
(assert (x826 x215))
(assert (=> (>= 10000 x359) (= (x407 x359) (x820 x359))))
(assert (= (x820 500647658) (x407 500647658)))
(assert (x826 x711))
(assert (= (x820 1984976886) (x407 1984976886)))
(assert (= (x56 (x820 3714247998)) 3714247998))
(assert (x826 x104))
(assert (x826 x505))
(assert (x826 x821))
(assert (x826 x734))
(assert (x826 x834))
(assert (x826 x629))
(assert (x826 x411))
(assert (= (x407 100000) (x820 100000)))
(assert (x826 x256))
(assert (= (and x295 (not x372)) x343))
(assert (x826 x570))
(assert (x826 x137))
(assert (x826 x124))
(assert (= (and x822 x455) x3))
(assert (x826 x815))
(assert (x826 x875))
(assert (x826 x233))
(assert (x826 x198))
(assert (= x803 (and x372 x295)))
(assert (x826 x764))
(assert (x826 x790))
(assert (x826 x582))
(assert (= (x12 (+ (- x603 x497) x40)) 0))
(assert (= (=> (and (= x455 (< 0 x15)) (= x411 (x732 x710)) (= x341 (x542 x525)) (= x464 (x535 (+ 1 x517))) (= (x732 x452) x165) (= x14 (x542 x513)) (= x359 (x542 x366)) (= x462 (x251 (x407 x832) (x820 10) 0)) (= x710 (x251 (x407 x359) x703 0)) (> x165 0) (= (x535 (+ 32 x525)) x513) (= (x251 (x407 x14) x828 0) x402) (< 1 x341) (= x703 (x251 (x407 x375) x462 0)) (= x517 (x34 115792089237316195423570985008687907853269984665640564039457584007913129639680 x229)) (= 0 x250) (= (x535 (+ x513 32)) x366) (= (x251 (x407 x832) (x820 10) 0) x828) (= x524 (x542 x525)) (= x363 (x542 x366)) (= (x251 (x407 x363) x402 0) x452) (= (x542 x513) x375) (= x229 (x258 (x820 9))) (> x524 0)) (and (=> (not x455) x498) (=> (and (and (or (and x261 (and (= x27 (x694 (x407 274184521717934524641157099916833587280))) (= (x34 115792089237316195417293883273301227089434195242512125785869492901042639077375 x369) x162) (= x400 255) (not (= x27 0)) (= x651 36) (= x847 x162) (= x79 x553) (not (< x651 4)) (> x459 0) (= x540 96) (= x715 (x535 (+ x847 x730))) (= x603 x497) (= (x34 79228162514264337593543950335 x415) x621) (= x112 x415) (= x191 160) (= (x119 (- x651 4)) x449) (not x337) (= (x694 (x407 x734)) x459) (= x711 112349551054952423155953805921267728290102753186399332250345724850365349756928) (= x175 96) (= x857 x270) (= (x535 (+ x497 4)) x79) (not (= 3028789119 x111)) (= x111 4167276458) (= (ite (>= 79228162514264337593543950335 x847) x715 x184) x751) (= (x119 (- x51 x40)) x817) (= (x799 x603) x842) (not (= x111 1779675522)) (= x270 x112) (= (x401 x37) x857) (= (x535 (+ x730 x847)) x184) (= x40 (x544 64)) (= x84 x651) (= (x550 64) x636) (= (x535 (+ x636 32)) x51) (= 160 x240) (= (< x449 32) x337) (= x625 (x251 (x820 0) (x820 17) 0)) (= x369 x270) (= x37 (x251 (x820 0) (x820 17) 0)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x817) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x817)) (> 32 x817)))) (= 0 x77) (= x393 (x535 (+ x79 32))) (= x84 (x119 (- x393 x497))) (= 96 x396) (= x730 (x267 x621 96)))) (not x261)) (and (= (x216 x373 6) x688) (= (x34 1 x688) x262) (= x690 6) (= (= 1 x262) x261))) x455) x361))) x777))
(assert (x826 x227))
(assert (x826 x686))
(assert (x826 x791))
(assert (= 0 (x35 x171)))
(assert (x826 x55))
(assert (= x509 (=> (and (and (= x71 (not (= x771 0))) (= x597 (x205 128)) (= x138 (x205 160))) (and (and (and (= x314 5000000) (= (x694 (x407 x734)) x325) (= x785 x110) (= x342 x348) (not (< x202 3008386744)) (= x545 x831) (<= x65 1461501637330902918203684832716283019655932542975) (<= 0 x288) (not (> 2580288415 x202)) (not (= x202 3008386744)) (= x218 (x565 (x820 16))) (not (> 2127478272 x202)) (= x790 (x565 (x820 14))) (= x566 x182) (= x873 x855) (= x52 x566) (<= 0 x167) (= x202 3051865383) (> x325 0) (> 3224796394 x202) (= x581 x754) (= x38 x656) (= 0 x232) (>= 1461501637330902918203684832716283019655932542975 x167) (= x288 x38) (= x232 x873) (= x185 (x565 (x820 13))) (>= 1461501637330902918203684832716283019655932542975 x288) (= x382 (x565 (x820 15))) (= x91 x570) (= (>= 5000000 x386) x693) (not (> 2863377861 x202)) (>= x65 0) (= (> x218 x570) x18) (= x428 x588) (= x52 x167) (= 1000 x572)) (and (not (= x28 1738207182)) (not (< x28 1439069736)) (= (x694 (x407 x734)) x586) (< 0 x586) (= 1000 x426) (not (< x28 954831406)) (= 5000 x507) (not (< x28 1738207182)) (> 2127478272 x28) (= 1816029635 x28) (< x28 1871194811))) (and (= x183 x221) (not (> 500647658 x616)) (> 2127478272 x616) (= x386 x183) (= x707 x33) (= 519173431 x616) (not (= x616 503383097)) (> 596258137 x616) (= x499 5000) (= (x694 (x407 x734)) x256) (not (= 500647658 x616)) (< x616 954831406) (= (not (= 0 x138)) x33) (= x597 x221) (= 5000 x514) (> x256 0) (> 743225245 x616)))) (and (=> (and (not x18) (and (= x610 x790) (= 0 x305))) x477) (=> (and x18 (and (= x85 (< x185 x790)) (or (and (and (= (x119 (- x218 x382)) x594) (= x712 x178) (= x178 (x119 (- x185 x150))) (= (div x410 x594) x150) (< 0 x594) (= (x119 (- x185 x790)) x316) (= x410 (mod (* x316 x854) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x854 (x119 (- x570 x382)))) (not x85)) (and (and (= (mod (* x863 x692) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x204) (= (x119 (- x790 x185)) x863) (= x74 (div x204 x123)) (= x425 (x535 (+ x185 x74))) (= x123 (x119 (- x218 x382))) (< 0 x123) (= x425 x712) (= (x119 (- x570 x382)) x692)) x85)))) x42)))))
(assert (x826 x756))
(assert (x826 x310))
(assert (x385 x503))
(assert (x826 x502))
(assert (= (x820 112349551054952423155953805921267728290102753186399332250345724850365349756928) (x407 112349551054952423155953805921267728290102753186399332250345724850365349756928)))
(assert (x826 x405))
(assert (x826 x663))
(assert (= (x407 2458934263) (x820 2458934263)))
(assert (= 1531409238 (x56 (x820 1531409238))))
(assert (x826 x156))
(assert (x826 x10))
(assert (x826 x667))
(assert (x315 115792089237316195417293883273301227089434195242512125785869492901042639077375))
(assert (x826 x432))
(assert (x181 x363))
(assert (= (or x343 x207) x130))
(assert (x826 x463))
(assert (x826 x51))
(assert (x826 x441))
(assert (x826 x480))
(assert (x826 x534))
(assert (x826 x375))
(assert (x826 x503))
(assert (x826 x458))
(assert (x826 x381))
(assert (= (x56 (x820 2064814097)) 2064814097))
(assert (= (x820 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x407 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= 0 (x35 192)))
(assert (x826 x284))
(assert (= (x56 (x820 500647658)) 500647658))
(assert (x826 x355))
(assert (x826 x403))
(assert (x826 x22))
(assert (x826 x143))
(assert (x826 x317))
(assert (= (x820 363856219) (x407 363856219)))
(assert (= (x56 (x820 3008386744)) 3008386744))
(assert (x826 x518))
(assert (x826 x363))
(assert (x809 x154))
(assert (= (x407 2064814097) (x820 2064814097)))
(assert (= 2039265891 (x56 (x820 2039265891))))
(assert (x826 x426))
(assert (x826 x549))
(assert (= x858 (or x44 x63 x387 x380 x773)))
(assert (= (x407 1816029635) (x820 1816029635)))
(assert (x826 x141))
(assert (x826 x410))
(assert (x826 x17))
(assert (= (x35 x557) 0))
(assert (x826 x583))
(assert (x826 x769))
(assert (= x501 (and x648 x560)))
(assert (x826 x335))
(assert (x826 x838))
(assert (x181 x375))
(assert (= x42 (=> (and (= x712 x610) (= x305 1)) x477)))
(assert (x826 x523))
(assert (= (or x264 x47) x474))
(assert (= (x820 1439069736) (x407 1439069736)))
(assert (x826 x599))
(assert (= (x35 x512) 0))
(assert (x826 x346))
(assert (x826 x164))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x56 (x820 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x826 x329))
(assert (x826 x41))
(assert (x826 x21))
(assert (= x743 (and x271 x825)))
(assert (x826 x531))
(assert (= (x56 (x407 x734)) x734))
(assert (= (x820 3812870723) (x407 3812870723)))
(assert (x826 x705))
(assert (x826 x572))
(assert (x826 x109))
(assert (x826 x244))
(assert (x826 x636))
(assert (x826 x54))
(assert (x826 x188))
(assert (= x211 (and (not x85) x331)))
(assert (x826 x259))
(assert (x826 x723))
(assert (x826 x29))
(assert (x826 x400))
(assert (x826 x603))
(assert (x826 x467))
(assert (= (x407 3996650231) (x820 3996650231)))
(assert (= (x216 x355 255) (div x355 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x826 x439))
(assert (= (and x668 x595) x876))
(assert (x826 x754))
(assert (x826 x786))
(assert (x826 x745))
(assert (= (and x617 (not x750)) x475))
(assert (x826 x94))
(assert (= 3506505391 (x56 (x820 3506505391))))
(assert (x826 x446))
(assert (x315 x415))
(assert (x826 x393))
(assert (x826 x780))
(assert (x826 x671))
(assert (= 826074471 (x56 (x820 826074471))))
(assert (= x323 (and x301 x585)))
(assert (x181 x852))
(assert (x826 x316))
(assert (= x617 (or x526 x323)))
(assert (x826 x40))
(assert (x826 x470))
(assert (= (and x3 (not x261)) x45))
(assert (x826 x158))
(assert (x826 x79))
(assert (= (x820 3506505391) (x407 3506505391)))
(assert (= (x407 826074471) (x820 826074471)))
(assert (x826 x237))
(assert (x826 x447))
(assert (= (x820 1531409238) (x407 1531409238)))
(assert (x826 x823))
(assert (x826 x827))
(assert (= 0 (x35 x237)))
(assert (= x435 (and x338 x418)))
(assert (= x207 (or x313 x320)))
(assert (x826 x240))
(assert (x695 x369))
(assert (x293 x369))
(assert (x826 x228))
(assert (x826 x730))
(assert (= (x35 x603) 0))
(assert (x826 x500))
(assert (x181 x832))
(assert (x826 x270))
(assert (x315 79228162514264337593543950335))
(assert (x826 x326))
(assert (x826 x245))
(assert (x826 x145))
(assert (x826 x762))
(assert (= (x820 1862597803) (x407 1862597803)))
(assert (x826 x287))
(assert (x826 x213))
(assert (= x254 (and x858 (not x696))))
(assert (x826 x653))
(assert (= (x267 x621 96) (mod (* x621 79228162514264337593543950336) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x826 x453))
(assert (x826 x869))
(assert (= (x56 (x820 3890975986)) 3890975986))
(assert (x826 x521))
(assert (x826 x793))
(assert (= (and (not x494) x640) x699))
(assert (x826 x186))
(assert (x826 x719))
(assert (= x106 (=> (and (and (= false x312) (not (= x852 x30)) (not (= x235 x734)) (= x447 1) (< 0 x30) (= x249 x350) (not (< x838 2127478272)) (= x589 (> (x694 (x407 x235)) 0)) (not (= x147 x30)) (= x41 (x600 (x407 x734))) (>= 1461501637330902918203684832716283019655932542975 x852) (= x573 (x694 (x407 x734))) (> 3366849169 x838) (< x838 3567393941) x589 x136 (>= 1461501637330902918203684832716283019655932542975 x235) (= (x600 (x407 x235)) x469) (not (= x734 x30)) (not (> 3224796394 x838)) (not (= x852 x147)) x421 (>= x849 0) (<= 0 x41) (not (= x838 3224796394)) (= 2458934263 x143) x224 (= x533 (x600 (x407 x852))) (not (= x852 x235)) (= x307 86400) (>= x350 0) (= (> (x694 (x407 x30)) 0) x224) (= (x600 (x407 x30)) x362) (not (= x147 x734)) (<= 0 x164) (= false x567) (<= x147 1461501637330902918203684832716283019655932542975) x429 (>= x533 0) (> x147 0) (<= x781 1461501637330902918203684832716283019655932542975) (<= x734 1461501637330902918203684832716283019655932542975) (= x754 x827) (>= 1461501637330902918203684832716283019655932542975 x30) (> x852 0) (< 0 x235) (= (x600 (x407 x147)) x164) (= x136 (< 0 (x694 (x407 x852)))) (not (= x734 x852)) (>= 1461501637330902918203684832716283019655932542975 x827) (<= 0 x827) (= x725 false) (= x656 x849) (<= 0 x362) (= false x277) (> 3812870723 x838) (>= 1461501637330902918203684832716283019655932542975 x849) (= x838 3249860859) (>= x469 0) (= (> (x694 (x407 x147)) 0) x429) (= x781 x786) (= x421 (< 0 (x694 (x407 x734)))) (not (= x235 x147)) (>= x781 0) (<= x350 1461501637330902918203684832716283019655932542975) (< 0 x573) (< 0 x734) (not (= x30 x235))) (and (and (and (< 0 x414) (= 2 x365) (= 86400 x445) (not (= x161 910484757)) (> 2127478272 x161) (< x161 954831406) (not (= x161 822145385)) (not (= x161 826074471)) (not (< x161 743225245)) (not (> 500647658 x161)) (not (> 822145385 x161)) (= x414 (x694 (x407 x734))) (= x161 922701707) (= 0 x671)) (and (and (and (and (and (and (and (= x198 100000) (not (= 2876725745 x867)) (> 3224796394 x867) (not (> 2127478272 x867)) (not (= 2966737888 x867)) (= (x694 (x407 x734)) x416) (not (< x867 2863377861)) (< 0 x416) (= x867 3002540418) (not (= 2863377861 x867)) (= x646 0) (< x867 3008386744) (= x253 5000) (not (< x867 2580288415))) (and (and (= 0 x4) (not (= 2039265891 x719)) (= x719 2064814097) (= 64 x701) (< x719 2127478272) (= true x720) (not (= x719 1984976886)) (= (x694 (x407 x734)) x377) (= 0 x587) (< 0 x377) (not (< x719 1984976886)) (not (> 1439069736 x719)) (not (< x719 1871194811)) (not (> 954831406 x719))) (and (and (and (and (and (and (and (= x855 x399) (= 0 x633) (<= x872 1461501637330902918203684832716283019655932542975) (= x182 x487) (>= 1461501637330902918203684832716283019655932542975 x521) (= x754 x629) (not (< x602 2863377861)) (<= x814 1461501637330902918203684832716283019655932542975) (>= x521 0) (> 3224796394 x602) (not (> 3008386744 x602)) (not (< x602 2127478272)) (= x723 (x422 (x820 14))) (= x776 x487) (<= 0 x814) (>= x872 0) (= x728 (not x739)) (= (not (= 0 x775)) x564) (= x332 x348) (= x252 x656) (= x564 x739) (= x32 (x422 (x820 16))) (= x785 x17) (< 0 x310) (= (x694 (x407 x734)) x310) (= x776 x872) (not (> 2580288415 x602)) (= x91 x568) (not (= 3008386744 x602)) (= (x422 (x820 13)) x228) (= x372 (> x32 x568)) (= x521 x252) (= x399 x633) (= x95 x545) (= x602 3051865383) (= (x422 (x820 15)) x213) (= x650 x588)) (and (< x647 500647658) (not (= x647 228615836)) (= (not (= 0 x247)) x268) (= x70 (not x82)) (= x57 (x422 (x820 26))) (not (< x647 228615836)) (< x647 2127478272) (= (x694 (x407 x734)) x841) (< 0 x841) (= (ite x70 1 0) x775) (not (= 238709543 x647)) (= 361691454 x647) (= x376 (x34 255 x57)) (> 363856219 x647) (not (= x647 307731845)) (< x647 954831406) x268 (= x82 (= x376 0)))) (and (= 64 x579) (= x561 true) (= 3008386744 x778) (not (< x778 2580288415)) (= x355 (x422 (x820 8))) (= x398 64) (not (> 3008386744 x778)) (= (x216 x355 255) x280) (< x778 3224796394) (= x606 255) (= x247 (ite x853 1 0)) (= x706 (= 1 x280)) (not (> 2127478272 x778)) (= x596 (x694 (x407 x734))) (= (not x706) x878) (not (< x778 2863377861)) (> x596 0) (= x853 (not x878)))) (and (= 64 x381) (not (< x223 954831406)) (= (x694 (x407 x734)) x225) (= 64 x303) (= 64 x798) (= x279 true) (< 0 x225) (= x223 1871194811) (not (> 1439069736 x223)) (not (< x223 1871194811)) (< x223 1984976886) (< x223 2127478272))) (and (= 192 x675) (> x193 0) (> 3996650231 x29) (= 192 x203) (not (> 3812870723 x29)) (= (x694 (x407 x734)) x193) (not (< x29 3890975986)) (= 64 x823) (not (> 2127478272 x29)) (= 3890975986 x29) (= x120 true) (not (< x29 3224796394)))) (and (not (< x125 1738207182)) (= true x592) (= x502 (x694 (x407 x734))) (not (= 1816029635 x125)) (= 1862597803 x125) (not (= x125 1738207182)) (= x466 128) (= 128 x702) (not (= x125 1840041978)) (> 2127478272 x125) (> 1871194811 x125) (= 192 x808) (not (< x125 954831406)) (not (> 1439069736 x125)) (> x502 0))) (and (not (< x500 3224796394)) (> x31 0) (not (= 3366849169 x500)) (= 3506505391 x500) (> 3567393941 x500) (> 3812870723 x500) (not (< x500 2127478272)) (= x811 true) (= 128 x302) (= x31 (x694 (x407 x734))) (not (> 3366849169 x500)) (= x620 64) (= x486 64))))) (and (= 5000 x619) (not (> 500647658 x394)) (< 0 x430) (> 743225245 x394) (not (= x394 503383097)) (= x394 519173431) (= 1 x748) (= (x694 (x407 x734)) x430) (> 954831406 x394) (not (= x394 500647658)) (= 5000 x243) (< x394 2127478272) (= 0 x769) (> 596258137 x394))) (and (not (= x843 596258137)) (> 743225245 x843) (= 686821956 x843) (< 0 x427) (= x265 1) (not (> 500647658 x843)) (= 1 x137) (= 1 x549) (> 954831406 x843) (not (< x843 596258137)) (= (x694 (x407 x734)) x427) (> 2127478272 x843) (not (= x843 599290589)))) (and (not (= x613 599290589)) (not (= 596258137 x613)) (> 2127478272 x613) (< x613 743225245) (= (x694 (x407 x734)) x329) (not (< x613 500647658)) (not (< x613 596258137)) (= x796 1) (< 0 x329) (< x613 954831406) (= x61 5000) (= 686821956 x613) (= 1 x736))) (and (= 1000 x113) (= 5000 x639) (not (= 500647658 x471)) (not (= 503383097 x471)) (= 519173431 x471) (= x762 5000) (> 2127478272 x471) (< 0 x384) (= (x694 (x407 x734)) x384) (not (> 500647658 x471)) (= x541 true) (= x483 1000) (< x471 954831406) (> 596258137 x471) (< x471 743225245))) (and (= (x694 (x407 x734)) x539) (= 2 x233) (not (< x146 1439069736)) (= x146 1816029635) (< 0 x539) (= true x635) (= x612 2) (= 1000 x835) (not (< x146 954831406)) (> 2127478272 x146) (not (= x146 1738207182)) (not (< x146 1738207182)) (< x146 1871194811)))) (and (not (= 3224796394 x705)) (< 0 x528) (= 86400 x195) (> 3567393941 x705) (= 1531409238 x763) (= x705 3249860859) (> 3366849169 x705) (= x24 86400) (not (< x705 3224796394)) (not (< x705 2127478272)) (= x528 (x694 (x407 x734))) (> 3812870723 x705)))) (and (=> (and x372 (and (= x309 (> x723 x228)) (or (and (and (= x346 x641) (= x282 (x119 (- x32 x213))) (= x641 (x119 (- x228 x227))) (= (div x768 x282) x227) (= x179 (x119 (- x568 x213))) (= (x119 (- x228 x723)) x210) (= (mod (* x210 x179) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x768) (< 0 x282)) (not x309)) (and x309 (and (= x510 (x535 (+ x228 x839))) (= (x119 (- x568 x213)) x632) (= x839 (div x133 x747)) (= (x119 (- x32 x213)) x747) (= (x119 (- x723 x228)) x704) (= x510 x346) (= (mod (* x704 x632) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x133) (> x747 0)))))) x644) (=> (and (and (= x723 x260) (= 0 x677)) (not x372)) x685)))))
(assert (x826 x200))
(assert (x826 x210))
(assert (x826 x74))
(assert (x826 x113))
(assert (x826 x291))
(assert (x315 255))
(assert (= (and x803 x309) x313))
(assert (x826 x89))
(assert (= (x56 (x820 1738207182)) 1738207182))
(assert (x826 x14))
(assert (x826 x586))
(assert (= (=> (and (= x745 (x689 x189)) (= (not (< 4 x347)) x708)) (and x708 x856)) x605))
(assert (= (and x804 x340) x44))
(assert (x826 x623))
(assert (x826 x614))
(assert (x826 x814))
(assert (x826 x195))
(assert (x826 x657))
(assert (= (x407 910484757) (x820 910484757)))
(assert (x826 x396))
(assert (x826 x450))
(assert (= (mod (* 57896044618658097711785492504343953926634992332820282019728792003956564819968 x417) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x267 x417 255)))
(assert (= (or x472 x389) x640))
(assert (x826 x114))
(assert (x826 x353))
(assert (= (x56 (x820 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x826 x776))
(assert (x826 x262))
(assert (= (x56 (x820 115792089237316195417293883273301227089434195242512125785869492901042639077375)) 115792089237316195417293883273301227089434195242512125785869492901042639077375))
(assert (x826 x173))
(assert (x826 x676))
(assert (= (x56 (x820 238709543)) 238709543))
(assert (x826 x449))
(assert (x97 x57))
(assert (x826 x179))
(assert (x826 x349))
(assert (= (x407 1779675522) (x820 1779675522)))
(assert (= (x56 (x407 x147)) x147))
(assert (x826 x30))
(assert (x826 x767))
(assert (x826 x471))
(assert (x826 x167))
(assert (x826 x580))
(assert (x181 x14))
(assert (x826 x609))
(assert (x826 x530))
(assert (x826 x829))
(assert (x826 x255))
(assert (x826 x176))
(assert (= 3812870723 (x56 (x820 3812870723))))
(assert (x826 x235))
(assert (x826 x123))
(assert (x826 x624))
(assert (x826 x775))
(assert (x315 x154))
(assert (x826 x57))
(assert (x826 x92))
(assert (x826 x168))
(assert (x826 x248))
(assert (x826 x359))
(assert (x826 x246))
(assert (x826 x292))
(assert (x826 x805))
(assert (x826 x802))
(assert (= (x820 3670205928) (x407 3670205928)))
(assert (x826 x594))
(assert (x826 x445))
(assert (= (x820 3890975986) (x407 3890975986)))
(assert (= (=> (= x127 (not (> x15 1))) (and x127 x498)) x361))
(assert (= (x56 (x820 1816029635)) 1816029635))
(assert (x826 x483))
(assert (x826 x443))
(assert (x826 x212))
(assert (x181 x30))
(assert (x826 x857))
(assert (= x773 (and (not x804) x340)))
(assert (x826 x147))
(assert (x826 x865))
(assert (x826 x183))
(assert (x826 x288))
(assert (=> (<= x375 10000) (= (x820 x375) (x407 x375))))
(assert (= 0 (x35 x765)))
(assert (x826 x172))
(assert (x826 x1))
(assert (= (x35 160) 0))
(assert (x826 x866))
(assert (x826 x282))
(assert (x826 x468))
(assert (x826 x428))
(assert (x826 x740))
(assert (x826 x651))
(assert (= (x56 (x820 1779675522)) 1779675522))
(assert (= (x407 3002540418) (x820 3002540418)))
(assert (x826 x469))
(assert (x826 x394))
(assert (x826 x366))
(assert (x181 x235))
(assert (not x106))
(assert (x826 x701))
(assert (= (and x522 x879) x490))
(assert (= x638 (or x153 x774)))
(assert (= (x820 3714247998) (x407 3714247998)))
(assert (= 599290589 (x56 (x820 599290589))))
(assert (=> (<= x734 10000) (= (x407 x734) (x820 x734))))
(assert (x826 x465))
(assert (x826 x448))
(assert (x826 x697))
(assert (x181 x147))
(assert (x826 x365))
(assert (= (x56 (x820 596258137)) 596258137))
(assert (x826 x350))
(assert (x826 x456))
(assert (= (x56 (x820 112349551054952423155953805921267728290102753186399332250345724850365349756928)) 112349551054952423155953805921267728290102753186399332250345724850365349756928))
(assert (x826 x154))
(assert (x826 x231))
(assert (= 0 (x35 x513)))
(assert (x826 x112))
(assert (x826 x515))
(assert (x826 x442))
(assert (x826 x495))
(assert (x826 x300))
(assert (x315 x229))
(assert (= (and (not x309) x803) x320))
(assert (= (or x11 x489) x230))
(assert (x826 x223))
(assert (= (x820 596258137) (x407 596258137)))
(assert (x826 x768))
(assert (x826 x175))
(assert (x826 x527))
(assert (x826 x800))
(assert (x826 x670))
(assert (=> (>= 10000 x852) (= (x407 x852) (x820 x852))))
(assert (x826 x263))
(assert (x826 x202))
(assert (= (=> (and (and (= (not (= 0 x677)) x590) (= (x242 128) x813) (= x731 (x242 160))) (and (and (and (> 743225245 x89) (not (= 503383097 x89)) (not (= 500647658 x89)) (= x345 5000) (< x89 2127478272) (= x10 x419) (< x89 954831406) (< x89 596258137) (not (< x89 500647658)) (= x89 519173431) (= x556 (x694 (x407 x734))) (= 5000 x559) (> x556 0)) (and (and (= x158 5000) (not (< x299 954831406)) (> 1871194811 x299) (> 2127478272 x299) (= 1816029635 x299) (not (< x299 1738207182)) (= x821 (x694 (x407 x734))) (= x245 1000) (> x821 0) (not (< x299 1439069736)) (not (= 1738207182 x299))) (and (and (< 0 x609) (= x103 3670205928) (not (< x103 2127478272)) (not (= x103 3586168516)) (= x609 (x694 (x407 x734))) (= x378 (x422 (x820 14))) (= x378 x297) (> 3714247998 x103) (< x103 3812870723) (not (> 3224796394 x103)) (not (< x103 3567393941)) (not (= 3567393941 x103)) (= x194 5000000) (= x68 (<= x419 5000000)) (not (= x103 3573918927)) (= x364 1000)) (and (and (not (= x49 599290589)) (< x49 743225245) (> 2127478272 x49) (not (< x49 596258137)) (= x49 686821956) (not (= x49 596258137)) (< x49 954831406) (< 0 x756) (= x756 (x694 (x407 x734))) (= x783 x297) (= 1 x654) (not (> 500647658 x49)) (= x290 1)) (and (and (= x678 x5) (= x352 (x422 (x820 13))) (= x172 x754) (not (= 3008386744 x456)) (= x468 (x422 (x820 14))) (= x186 x785) (>= x660 0) (<= 0 x5) x388 (= x212 x101) (= x66 0) (= x66 x370) (= x348 x192) (< 0 x353) (= x865 1000) (not (> 2580288415 x456)) (< x456 3224796394) (= 1000 x837) (= (> x266 x495) x801) (= x766 x182) (<= 0 x212) (<= x5 1461501637330902918203684832716283019655932542975) (= x266 (x422 (x820 16))) (= x91 x495) (= x678 x656) (= x196 (>= x783 1000)) (<= x212 1461501637330902918203684832716283019655932542975) (= x370 x855) (= x766 x101) (not (> 2863377861 x456)) (= x456 3051865383) (>= 1461501637330902918203684832716283019655932542975 x660) (not (< x456 3008386744)) (= x353 (x694 (x407 x734))) (= x284 (x422 (x820 15))) (= x545 x591) (= (and x196 x68) x388) (not (< x456 2127478272)) (= x588 x461)) (and (not (> 1439069736 x584)) (= 1816029635 x584) (= x160 1) (not (= x584 1738207182)) (not (> 1738207182 x584)) (= 1000 x666) (< 0 x440) (< x584 1871194811) (not (> 954831406 x584)) (= x440 (x694 (x407 x734))) (> 2127478272 x584))))))) (and (= 3670205928 x287) (= 0 x670) (= x98 x740) (> x244 0) (= x813 x98) (= x851 x859) (= (not (= x731 0)) x859) (not (= 3586168516 x287)) (not (< x287 3567393941)) x628 (= x199 x740) (not (= x287 3573918927)) (not (= x287 3567393941)) (> 3714247998 x287) (not (> 2127478272 x287)) (= x76 (= x199 0)) (not (> 3224796394 x287)) (= x10 x652) (> 3812870723 x287) (= x652 (x422 (x820 14))) (= x628 (or x76 (not x728))) (= (x694 (x407 x734)) x244)))) (and (=> (and x801 (and (or (and (and (< 0 x530) (= x457 (div x569 x530)) (= x434 (x119 (- x495 x284))) (= (mod (* x434 x443) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x569) (= x506 (x119 (- x352 x457))) (= (x119 (- x352 x468)) x443) (= (x119 (- x266 x284)) x530) (= x812 x506)) (not x643)) (and x643 (and (= x188 (x119 (- x495 x284))) (= (x119 (- x266 x284)) x667) (= x812 x676) (= x276 (x119 (- x468 x352))) (= x753 (mod (* x276 x188) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x676 (x535 (+ x352 x128))) (= x128 (div x753 x667)) (> x667 0)))) (= (> x468 x352) x643))) x62) (=> (and (and (= x829 x468) (= x631 0)) (not x801)) x226))) x685))
(assert (x315 x57))
(assert (= 2379291291 (x56 (x820 2379291291))))
(assert (x826 x77))
(assert (= (x407 1738207182) (x820 1738207182)))
(assert (= x80 (and x617 x750)))
(assert (x826 x193))
(assert (x826 x128))
(assert (x826 x253))
(assert (= (x820 922701707) (x407 922701707)))
(assert (x826 x744))
(assert (= (x56 (x820 3670205928)) 3670205928))
(assert (=> (>= 10000 x30) (= (x407 x30) (x820 x30))))
(assert (x826 x369))
(assert (= (x407 79228162514264337593543950335) (x820 79228162514264337593543950335)))
(assert (x826 x163))
(assert (x826 x846))
(assert (x826 x874))
(assert (x826 x392))
(assert (x826 x252))
(assert (= (=> (and (= x209 (or x451 x551)) (= x90 (x535 (+ x322 32))) (= x328 (x535 (+ x105 x492))) (= (x64 x171) x347) (= x861 (ite x209 1 0)) (not (> x347 18446744073709551615)) (= (x64 192) x104) (not (> x104 18446744073709551615)) (= x134 (mod (* 32 x347) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x535 (+ 32 x134)) x460) (= (> x525 18446744073709551615) x551) (= (x535 (+ 31 x171)) x145) (= x171 (x535 (+ x104 160))) (= (x535 (+ x460 x322)) x525) (= (mod (* x347 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105) (= x451 (> x322 x525)) (= 0 x861) (= (< 0 x347) x560) (not (< x116 x328)) (= (x535 (+ x171 32)) x492) (or (and (> x116 x145) (= (<= x116 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x145))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x116) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x145)))) (and (=> (not x560) x856) (=> (and x560 (and (= (x535 (+ x90 32)) x431) (= x558 (x311 x492)) (= (< 1 x347) x759) (= (x535 (+ x492 32)) x512))) (and (=> (not x759) x856) (=> (and (and (= (x275 x512) x463) (= x557 (x535 (+ 32 x512))) (= x563 (< 2 x347)) (= x94 (x535 (+ x431 32)))) x759) (and (=> (and x563 (and (= (x412 x557) x576) (= x804 (< 3 x347)) (= x189 (x535 (+ 32 x557))) (= x470 (x535 (+ x94 32))))) (and (=> x804 x605) (=> (not x804) x856))) (=> (not x563) x856))))))) x717))
(assert (x826 x847))
(assert (= (x407 519173431) (x820 519173431)))
(assert (x826 x529))
(assert (x826 x568))
(assert (x826 x860))
(assert (x826 x250))
(assert (=> (<= x235 10000) (= (x407 x235) (x820 x235))))
(assert (x826 x855))
(assert (x826 x797))
(assert (x826 x91))
(assert (= (=> (and (and (and (and (> x269 0) (not (> 954831406 x874)) (= x511 1000) (not (< x874 1439069736)) (not (= x874 1738207182)) (= x874 1816029635) (not (> 1738207182 x874)) (< x874 2127478272) (= x269 (x694 (x407 x734))) (< x874 1871194811) (= 1 x292)) (and (= (and x693 x830) x607) (= (>= x321 1000) x830) (= x222 1000) (= 1000 x537))) (and (> x806 0) (= x532 x782) (not (= 599290589 x467)) (not (= x467 596258137)) (= x806 (x694 (x407 x734))) (< x467 2127478272) (= x321 x107) (not (< x467 500647658)) (= x744 1) (> 954831406 x467) (> 743225245 x467) (= x109 1) (= x60 x300) (not (< x467 596258137)) (= x300 x107) (= (not (= 0 x231)) x782) (= x467 686821956))) (and (= (x698 128) x60) (= (x698 160) x231) (= (not (= x305 0)) x58))) x607) x477))
(assert (= (x407 2863377861) (x820 2863377861)))
(assert (x826 x760))
(assert (x826 x302))
(assert (= x387 (and x648 (not x560))))
(assert (= (and (not x622) x608) x522))
(assert (x826 x110))
(assert (= (and x680 x876) x264))
(assert (x826 x746))
(assert (x826 x218))
(assert (= (x56 (x820 115792089237316195423570985008687907853269984665640564039457584007913129639680)) 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (= (x407 307731845) (x820 307731845)))
(assert (x826 x115))
(assert (x826 x852))
(assert (x826 x679))
(assert (x826 x155))
(assert (= (or x435 x360) x850))
(assert true)
(assert (x826 x139))
(assert (= (=> (and (and (= x73 (x397 x322)) (= x497 (x535 (+ x174 x525))) (= (x535 (+ 32 x614)) x174) (= x614 (mod (* x761 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x696 (= 0 x761)) (= (x119 (- x73 1)) x761) (not (< 18446744073709551615 x761))) (or x696 (and (not x696) (and (= (mod (* x761 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x442) (= x86 (x535 (+ 32 x525))))))) x547) x856))
(assert (= (x820 115792089237316195417293883273301227089434195242512125785869492901042639077375) (x407 115792089237316195417293883273301227089434195242512125785869492901042639077375)))
(assert (x826 x808))
(assert (x826 x319))
(assert (x826 x812))
(assert (= x47 (and (not x680) x876)))
(assert (= (=> (and (= x812 x829) (= x631 1)) x226) x62))
(assert (x826 x798))
(assert (= (x820 686821956) (x407 686821956)))
(assert (x826 x61))
(assert (= (x407 1871194811) (x820 1871194811)))
(assert (= x585 (or x254 x684)))
(assert (= (x407 3249860859) (x820 3249860859)))
(assert (x826 x620))
(assert (x315 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x826 x493))
(assert (= (x407 822145385) (x820 822145385)))
(assert (= (x820 2272211003) (x407 2272211003)))
(assert (= (x56 (x820 2580288415)) 2580288415))
(assert (x826 x796))
(assert (= 519173431 (x56 (x820 519173431))))
(assert (x826 x125))
(assert (x826 x430))
(assert (x826 x613))
(assert (x826 x486))
(assert (x826 x294))
(assert (x826 x20))
(assert (=> (<= x14 10000) (= (x407 x14) (x820 x14))))
(assert (x826 x577))
(assert (= (x820 57896044618658097711785492504343953926634992332820282019728792003956564819967) (x407 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= (and x261 x3) x99))
(assert (= (x820 361691454) (x407 361691454)))
(assert (x826 x652))
(assert (x826 x440))
(assert (= (x35 x877) 0))
(assert (x826 x269))
(assert (= x700 (and x522 (not x879))))
(assert (x826 x539))
(assert (x826 x690))
(assert (= 2863377861 (x56 (x820 2863377861))))
(assert (x826 x612))
(assert (x826 x816))
(assert (x826 x749))
(assert (= 228615836 (x56 (x820 228615836))))
(assert (x826 x49))
(assert (x826 x408))
(assert (x826 x543))
(assert (x181 274184521717934524641157099916833587280))
(assert (x826 x78))
(assert (= (or x738 x627 x700 x743 x788) x648))
(assert (x826 x588))
(assert (x826 x574))
(assert (x826 x872))
(assert (= x235 (x56 (x407 x235))))
(assert (x826 x540))
(assert (x826 x265))
(assert (= (div x373 64) (x216 x373 6)))
(assert (x826 x836))
(assert (= 503383097 (x56 (x820 503383097))))
(assert (x826 x789))
(assert (x826 x666))
(assert (x826 x870))
(assert (= (x820 3567393941) (x407 3567393941)))
(assert (x826 x105))
(assert (x826 x466))
(assert (x826 x555))
(assert (=> (>= 10000 x832) (= (x820 x832) (x407 x832))))
(assert (= 3586168516 (x56 (x820 3586168516))))
(assert (= (x56 (x820 3567393941)) 3567393941))
(assert (= (x56 (x407 x832)) x832))
(assert (= (x407 4294967296) (x820 4294967296)))
(assert (x826 x437))
(assert (= x63 (and x501 (not x759))))
(assert (= (or x724 x48) x39))
(assert (=> (<= x147 10000) (= (x820 x147) (x407 x147))))
(assert (x826 x415))
(assert (= (=> (and (and (and (= x214 x142) (> 954831406 x758) (> 596258137 x758) (= x214 x845) (= x149 (x694 (x407 x734))) (= x534 x142) (= x758 519173431) (< x758 2127478272) (= 5000 x642) (not (< x758 500647658)) (= x87 (not (= x664 0))) (not (= 500647658 x758)) (> x149 0) (not (= x758 503383097)) (= 5000 x391) (= x737 x87) (> 743225245 x758)) (and (and (= x855 x379) (= x875 x348) (>= 1461501637330902918203684832716283019655932542975 x53) (< x816 3224796394) (not (< x816 2580288415)) (= x465 (x422 (x820 13))) (= (x422 (x820 14)) x115) (not (> 2127478272 x816)) (= x1 x791) (not (= x816 3008386744)) (<= 0 x53) (<= 0 x239) (not (> 2863377861 x816)) (= x588 x582) (= x371 0) (= x545 x176) (= x760 x131) (= x304 x754) (= x494 (> x408 x114)) (= x656 x791) (not (> 3008386744 x816)) (= x114 x91) (<= 0 x1) (= x626 (x422 (x820 15))) (<= x239 1461501637330902918203684832716283019655932542975) (= 1000 x476) (= x182 x131) (= 5000000 x741) (= (<= x845 5000000) x413) (= x408 (x422 (x820 16))) (= (x694 (x407 x734)) x374) (< 0 x374) (= x379 x371) (= x662 x785) (>= 1461501637330902918203684832716283019655932542975 x1) (= 3051865383 x816) (= x760 x53)) (and (not (> 1738207182 x177)) (> 2127478272 x177) (= x50 1000) (< x177 1871194811) (= 1816029635 x177) (not (> 954831406 x177)) (= x523 (x694 (x407 x734))) (> x523 0) (not (> 1439069736 x177)) (= x840 5000) (not (= 1738207182 x177))))) (and (= (x283 128) x534) (= (x283 160) x664) (= x519 (not (= 0 x631))))) (and (=> (and (and (= 0 x215) (= x115 x432)) (not x494)) x208) (=> (and x494 (and (or (and (and (= (x535 (+ x465 x623)) x46) (= (mod (* x155 x807) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x93) (= x298 (x119 (- x408 x626))) (= (div x93 x298) x623) (= (x119 (- x115 x465)) x155) (= x807 (x119 (- x114 x626))) (= x405 x46) (< 0 x298)) x418) (and (and (= x187 (div x630 x446)) (< 0 x446) (= x246 (x119 (- x465 x115))) (= x2 (x119 (- x114 x626))) (= x630 (mod (* x246 x2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x119 (- x408 x626)) x446) (= (x119 (- x465 x187)) x764) (= x405 x764)) (not x418))) (= (> x115 x465) x418))) x108))) x226))
(assert (= (x56 (x820 1984976886)) 1984976886))
(assert (= x774 (and x80 (not x59))))
(assert (x826 x512))
(assert (x826 x647))
(assert (x826 x868))
(assert (x826 x835))
(assert (= 1439069736 (x56 (x820 1439069736))))
(assert (x826 x399))
(assert (x826 x678))
(assert (x826 x274))
(assert (= (x56 (x820 1871194811)) 1871194811))
(assert (x826 x650))
(assert (x315 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x826 x692))
(assert (x826 x597))
(assert (= (and x608 x622) x327))
(assert (x826 x714))
(assert (= (x820 2966737888) (x407 2966737888)))
(assert (x826 x733))
(assert (x826 x478))
(assert (x826 x581))
(assert (x315 1))
(assert (x826 x86))
(assert (x826 x766))
(assert (x826 x681))
(assert (x826 x499))
(assert (x826 x873))
(assert (x826 x32))
(assert (= (x407 86400) (x820 86400)))
(assert (= x389 (or x144 x236)))
(assert (x826 x243))
(assert (x826 x557))
(assert (= (x56 (x820 363856219)) 363856219))
(assert (x826 x16))
(assert (= (x56 (x820 3051865383)) 3051865383))
(assert (x826 x646))
(assert (x826 x66))
(assert (x826 x573))
(assert (x826 x31))
(assert (x826 x514))
(assert (= (x56 (x820 2876725745)) 2876725745))
(assert (= x489 (or x713 x211)))
(assert (x826 x677))
(assert (x826 x174))
(assert (x826 x662))
(assert (x826 x38))
(assert (x826 x101))
(assert (x826 x103))
(assert (= (x56 (x407 x14)) x14))
(assert (x826 x747))
(assert (x826 x382))
(assert (x826 x844))
(assert (x826 x849))
(assert (x826 x25))
(assert (x826 x217))
(assert (x826 x436))
(assert (= (x820 3586168516) (x407 3586168516)))
(assert (x826 x863))
(assert (x826 x182))
(assert (x826 x656))
(assert (= 0 (x35 x492)))
(assert (x826 x765))
(assert (x826 x558))
(assert (x826 x669))
(assert (= (x820 274184521717934524641157099916833587280) (x407 274184521717934524641157099916833587280)))
(assert (x826 x861))
(assert (= (or x850 x699) x608))
(assert (x826 x73))
(assert (x826 x839))
(assert (= (x820 2127478272) (x407 2127478272)))
(assert (x826 x464))
(assert (x826 x23))
(assert (= (x56 (x820 3028789119)) 3028789119))
(assert (x826 x249))
(assert (= x615 (or x794 x474)))
(assert (= (x820 4167276458) (x407 4167276458)))
(assert (x826 x184))
(assert (x826 x15))
(assert (x826 x619))
(assert (= (x56 (x407 x363)) x363))
(assert (x826 x618))
(assert (x826 x546))
(assert (x826 x111))
(assert (= 86400 (x56 (x820 86400))))
(assert (= (x56 (x407 x359)) x359))
(assert (= (x56 (x820 100000)) 100000))
(assert (x826 x736))
(assert (= (=> (and (= x681 (x241 x525)) (= x301 (< 0 x681))) (and (=> (not x301) x520) (=> x301 x491))) x547))
(assert (= (=> (and (= (not (< 1 x330)) x285) (> x406 0) (= (mod (* x529 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x234) (= x531 (x241 x868)) (= x481 (x535 (+ x234 32))) (< x529 x148) (= (x241 x322) x148) (= x529 (ite (< 0 x263) 0 1)) (= (x535 (+ 32 x525)) x593) (= (x241 x525) x406) (= (x571 x525) x330) (= (x535 (+ x481 x322)) x868)) (and x520 x285)) x491))
(assert (= (x56 (x820 822145385)) 822145385))
(assert (x826 x122))
(assert (x826 x538))
(assert (= x144 (and (not x643) x772)))
(assert (= (x56 (x820 112762432447299995021467288873193731040449111418389949397557428784167418593280)) 112762432447299995021467288873193731040449111418389949397557428784167418593280))
(assert (x826 x406))
(assert (x826 x4))
(assert (x826 x414))
(assert (x826 x46))
(assert (x826 x633))
(assert (= x360 (and (not x418) x338)))
(assert (x826 x654))
(assert (x770 x415))
(assert (x826 x785))
(assert (x826 x664))
(assert (x826 x328))
(assert (x826 x373))
(assert (= 274184521717934524641157099916833587280 (x56 (x407 274184521717934524641157099916833587280))))
(assert (x826 x303))
(assert (x826 x189))
(assert (x826 x562))
(assert (x826 x748))
(assert (x826 x634))
(assert (x826 x390))
(assert (x826 x431))
(assert (x826 x511))
(assert (x826 x52))
(assert (x826 x606))
(assert (= (x56 (x407 x375)) x375))
(assert (x826 x334))
(assert (x826 x367))
(assert (x826 x197))
(assert (x826 x722))
(assert (=> (>= 10000 x363) (= (x407 x363) (x820 x363))))
(assert (x826 x579))
(assert (x826 x665))
(assert (x826 x604))
(assert (x826 x753))
(assert (x826 x384))
(assert (x826 x239))
(assert (x826 x459))
(assert (= x713 (and x85 x331)))
(assert (x826 x149))
(assert (= 0 (x35 x846)))
(assert (x826 x591))
(assert (x826 x807))
(assert (x826 x434))
(assert (x826 x345))
(assert (x826 x221))
(assert (x826 x731))
(assert (x826 x506))
(assert (= 686821956 (x56 (x820 686821956))))
(assert (x826 x479))
(assert (x826 x260))
(assert (x826 x819))
(assert (= x825 (and x482 x787)))
(assert (x826 x348))
(assert (x826 x378))
(assert (x826 x460))
(assert (= (or x39 x327) x595))
(assert (= (and (not x159) x490) x627))
(assert (x826 x229))
(assert (= (=> (and (= x432 x405) (= x215 1)) x208) x108))
(assert (= (x56 (x820 3224796394)) 3224796394))
(assert (x826 x843))
(assert (x826 x702))
(assert (x826 x528))
(assert (x826 x559))
(assert (x181 x359))
(assert (x826 x354))
(assert (x826 x157))
(assert (= x787 (and x490 x159)))
(assert (= 2272211003 (x56 (x820 2272211003))))
(assert (x826 x553))
(assert (x826 x596))
(assert (= x153 (and x80 x59)))
(assert (x826 x138))
(assert (x826 x433))
(assert (x826 x232))
(assert (x826 x2))
(assert (= x772 (and x130 x801)))
(assert (x826 x806))
(assert (x826 x566))
(assert (x826 x65))
(assert (x826 x391))
(assert (x826 x150))
(assert (x826 x126))
(assert (= (x407 743225245) (x820 743225245)))
(assert (x826 x763))
(assert (= (and x640 x494) x338))
(assert (x826 x204))
(assert (x826 x507))
(assert (x826 x417))
(assert (x826 x655))
(assert (x826 x166))
(assert (x315 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (x56 (x820 4294967296)) 4294967296))
(assert (= (and x858 x696) x684))
(assert (x826 x299))
(assert (x826 x107))
(assert (x826 x225))
(assert (x826 x370))
(assert (x826 x548))
(assert (= (=> (and (= x668 (> x618 x697)) (= (x565 (x820 14)) x124) (<= 0 x367) (= x599 x691) (= 0 x599) (not (> 2127478272 x834)) (not (< x834 2580288415)) (= x855 x691) (= x180 (x565 (x820 15))) (= x697 x91) (= x815 x182) (<= x367 1461501637330902918203684832716283019655932542975) (= x844 (x694 (x407 x734))) (= x200 (x565 (x820 13))) (= x618 (x565 (x820 16))) (>= 1461501637330902918203684832716283019655932542975 x173) (not (= x834 3008386744)) (not (> 3008386744 x834)) (= x36 x348) (>= 1461501637330902918203684832716283019655932542975 x653) (= x834 3051865383) (= x754 x543) (= x122 x545) (= x173 x259) (= x805 x656) (< 0 x844) (= x653 x805) (<= 0 x653) (< x834 3224796394) (<= 0 x173) (= x785 x735) (not (< x834 2863377861)) (= x259 x815) (= x16 x588)) (and (=> (and (and (= 0 x771) (= x124 x574)) (not x668)) x509) (=> (and x668 (and (= x680 (< x200 x124)) (or (and (not x680) (and (= (x119 (- x697 x180)) x546) (= (div x479 x527) x673) (= x527 (x119 (- x618 x180))) (= x424 (x119 (- x200 x673))) (= (mod (* x201 x546) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x479) (< 0 x527) (= x480 x424) (= (x119 (- x200 x124)) x201))) (and x680 (and (< 0 x634) (= x437 (x119 (- x124 x200))) (= x354 (mod (* x437 x248) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x156 (x535 (+ x450 x200))) (= (x119 (- x697 x180)) x248) (= x450 (div x354 x634)) (= x156 x480) (= x634 (x119 (- x618 x180)))))))) x7))) x810))
(assert (x826 x660))
(assert (x826 x642))
(assert (x826 x854))
(assert (x826 x376))
(assert (= (x35 x755) 0))
(assert (x826 x177))
(assert (x826 x444))
(assert (= (and (not x563) x81) x380))
(assert (x826 x60))
(assert (x826 x324))
(assert (x826 x379))
(assert (x315 6277101735386680763835789423128438253588091106870490562560))
(assert (x826 x201))
(assert (x826 x146))
(assert (x826 x492))
(assert (x826 x325))
(assert (x826 x297))
(assert (x826 x298))
(assert (= 5000000 (x56 (x820 5000000))))
(assert (= x810 x498))
(assert (= x339 (=> (and (<= x819 1461501637330902918203684832716283019655932542975) (= (x257 x237) x819) (= (not (< 4 x436)) x190)) (and x190 x717))))
(assert (x826 x510))
(assert (x826 x322))
(assert (= (x56 (x820 274184521717934524641157099916833587280)) 274184521717934524641157099916833587280))
(assert (x826 x758))
(assert (x826 x569))
(assert (x826 x704))
(assert (x826 x461))
(assert (x826 x93))
(assert (= 4167276458 (x56 (x820 4167276458))))
(assert (= (=> (and (and (= (x26 160) x580) (= x869 (x26 128)) (= x488 (not (= 0 x215)))) (and (and (and (not (> 1439069736 x716)) (= (x694 (x407 x734)) x166) (= 1 x453) (< x716 2127478272) (< 0 x166) (= 1000 x686) (not (> 1738207182 x716)) (not (> 954831406 x716)) (= x716 1816029635) (> 1871194811 x716) (not (= 1738207182 x716))) (and (not (< x326 2272211003)) (= x334 (x267 x417 255)) (= x21 (ite x344 1 0)) (= x622 (> x439 0)) x368 (<= x672 1461501637330902918203684832716283019655932542975) (<= x555 1461501637330902918203684832716283019655932542975) (= x518 x800) (= x555 x786) (= x672 x518) (= x439 x601) (= (x694 (x407 x734)) x141) (= (x34 57896044618658097711785492504343953926634992332820282019728792003956564819967 x154) x757) (< x326 2580288415) (= x836 1000) (>= x767 0) (= x578 1000) (not (< x493 4)) (<= 0 x555) (= x368 (and x88 x413)) (= (= x439 0) x485) (= (not x485) x344) (= x439 x674) (= (not (= 0 x674)) x508) (= x795 (x535 (+ x334 x757))) (not (= 2417572732 x326)) (< x326 3224796394) (= x306 x729) (= x439 x21) (> x141 0) (not (< x326 2127478272)) (= (ite x658 1 0) x417) (= x54 x154) (= x870 (x119 (- x493 4))) (>= 1461501637330902918203684832716283019655932542975 x767) (= x515 255) (= x88 (>= x536 1000)) (<= 0 x672) (= x658 (< 0 x439)) (= x306 0) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x493)) (< 35 x493)) (not (> 2379291291 x326)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x870) (and (< x870 32) (= true (<= x870 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (not (= x326 2379291291)) (= x54 (x422 (x820 8))) (= 2458934263 x326))) (and (< x140 954831406) (= x390 x657) (= 1 x802) (= 686821956 x140) (> 2127478272 x140) (= x390 x536) (> x562 0) (= x657 x869) (= x357 (not (= 0 x580))) (= (x694 (x407 x734)) x562) (not (< x140 596258137)) (not (< x140 500647658)) (< x140 743225245) (not (= x140 596258137)) (not (= x140 599290589)) (= 1 x163) (= x727 x357)))) (and (=> (and (and (= (x535 (+ x548 x765)) x577) (= (x152 160) x444) (= x25 (ite x118 1 0)) (not (= x274 0)) (not (> x444 18446744073709551615)) (= (x535 (+ x538 32)) x294) (< x197 4294967296) (= (x535 (+ x22 32)) x206) (= (mod (* x436 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x548) (= (x535 (+ x22 x294)) x322) (= (x34 115792089237316195423570985008687907853269984665640564039457584007913129639904 x503) x217) (= x25 0) (not (> x436 18446744073709551615)) (not (= x324 0)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197) (and (> 96 x197) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197) true)))) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x116) (> x423 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x116 x423) (= (<= x423 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x116 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x170 (> x22 x322)) (= (x535 (+ 31 x197)) x503) (= (x694 (x407 x852)) x274) (= (x535 (+ 31 x877)) x423) (= x436 (x152 x877)) (= x877 (x535 (+ 160 x444))) (= x278 (< 18446744073709551615 x322)) (= x118 (or x278 x170)) (= (x535 (+ 160 x217)) x22) (= (mod (* x436 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x538) (= (< 0 x436) x879) (= (x535 (+ 160 x197)) x116) (= (x535 (+ 32 x877)) x765) (not (> x577 x116))) (not x622)) (and (=> (not x879) x717) (=> (and (and (= (x535 (+ 32 x765)) x846) (= x789 (x100 x765)) (= (> x436 1) x159) (= x291 (x535 (+ 32 x206))) (<= x789 1461501637330902918203684832716283019655932542975)) x879) (and (=> (and (and (= x139 (x862 x846)) (= (x535 (+ 32 x846)) x755) (<= x139 1461501637330902918203684832716283019655932542975) (= (< 2 x436) x482) (= x458 (x535 (+ 32 x291)))) x159) (and (=> (and (and (= (x552 x755) x335) (= (x535 (+ 32 x458)) x866) (= (x535 (+ 32 x755)) x237) (= x271 (> x436 3)) (>= 1461501637330902918203684832716283019655932542975 x335)) x482) (and (=> (not x271) x717) (=> x271 x339))) (=> (not x482) x717))) (=> (not x159) x717))))) (=> x622 x810))) x208))
(assert (x826 x199))
(assert (x826 x341))
(assert (x826 x36))
(assert (x826 x165))
(assert (x826 x832))
(assert (x826 x347))
(assert (x826 x352))
(assert (= (=> (and (= x574 x480) (= x771 1)) x509) x7))
(assert (= (and x501 x759) x81))
(assert (= (x820 228615836) (x407 228615836)))
(assert (x826 x817))
(assert (= x236 (and x772 x643)))
(assert (= 910484757 (x56 (x820 910484757))))
(assert (x826 x715))
(assert (x826 x140))
(assert (x826 x761))
(assert (x826 x476))
(assert (x826 x524))
(assert (x351 x229))
(assert (x826 x427))
(assert (= (x407 2039265891) (x820 2039265891)))
(assert (= (x407 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x820 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (= (and (not x801) x130) x472))
(assert (x826 x234))
(assert (x826 x842))
(assert (x826 x675))
(check-sat)
(exit)