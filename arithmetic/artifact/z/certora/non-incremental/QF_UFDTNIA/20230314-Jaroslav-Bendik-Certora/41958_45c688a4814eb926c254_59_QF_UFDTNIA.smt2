(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x22 0)) (((x3 (x1061 x22) (x141 x22) (x181 Int)) (x642 (x748 x22) (x1 Int)) (x1192 (x1196 Int)))))
(declare-fun x1158 () Bool)
(declare-fun x690 () Int)
(declare-fun x810 () Int)
(declare-fun x1273 () Int)
(declare-fun x36 () Int)
(declare-fun x4 () Bool)
(declare-fun x933 () Int)
(declare-fun x1123 () Bool)
(declare-fun x398 () x22)
(declare-fun x37 () Bool)
(declare-fun x1010 () Int)
(declare-fun x422 () Int)
(declare-fun x1011 () Bool)
(declare-fun x1323 () Int)
(declare-fun x660 () Int)
(declare-fun x463 () Bool)
(declare-fun x263 () Bool)
(declare-fun x23 () Bool)
(declare-fun x102 (x22) Int)
(declare-fun x360 () x22)
(declare-fun x661 () Int)
(declare-fun x1320 () Int)
(declare-fun x1217 () Bool)
(declare-fun x1013 () Int)
(declare-fun x726 () Int)
(declare-fun x39 () Int)
(declare-fun x822 () Int)
(declare-fun x332 () Bool)
(declare-fun x672 () Bool)
(declare-fun x153 () Bool)
(declare-fun x304 () x22)
(declare-fun x491 () Bool)
(declare-fun x201 () x22)
(declare-fun x779 () Int)
(declare-fun x786 () Int)
(declare-fun x1214 () Int)
(declare-fun x1150 () Bool)
(declare-fun x1333 () Int)
(declare-fun x1153 () Bool)
(declare-fun x898 () Bool)
(declare-fun x262 () Int)
(declare-fun x1091 () Bool)
(declare-fun x573 () x22)
(declare-fun x154 () Int)
(declare-fun x778 () Bool)
(declare-fun x92 () Bool)
(declare-fun x209 () Int)
(declare-fun x155 () Int)
(declare-fun x568 () Bool)
(declare-fun x419 () Int)
(declare-fun x73 () Int)
(declare-fun x197 () Int)
(declare-fun x1225 () Bool)
(declare-fun x221 () Int)
(declare-fun x805 () Int)
(declare-fun x862 () Bool)
(declare-fun x503 () Int)
(declare-fun x575 (Int) Int)
(declare-fun x51 () x22)
(declare-fun x1007 () Bool)
(declare-fun x372 () Int)
(declare-fun x163 () Int)
(declare-fun x814 () Bool)
(declare-fun x143 () Int)
(declare-fun x315 () Bool)
(declare-fun x1053 () Int)
(declare-fun x887 () Bool)
(declare-fun x282 () Int)
(declare-fun x48 () Bool)
(declare-fun x125 () Int)
(declare-fun x678 () Bool)
(declare-fun x397 () Int)
(declare-fun x770 () Bool)
(declare-fun x156 () Int)
(declare-fun x873 () Bool)
(declare-fun x183 () Int)
(declare-fun x548 () Int)
(declare-fun x230 () x22)
(declare-fun x474 () Int)
(declare-fun x308 () Int)
(declare-fun x1172 () Bool)
(declare-fun x667 () Int)
(declare-fun x1313 () x22)
(declare-fun x819 () x22)
(declare-fun x893 () Int)
(declare-fun x459 () Int)
(declare-fun x1339 () Int)
(declare-fun x847 () x22)
(declare-fun x1261 () Bool)
(declare-fun x977 () Bool)
(declare-fun x969 () x22)
(declare-fun x359 () Int)
(declare-fun x1136 () Bool)
(declare-fun x1130 () Int)
(declare-fun x1045 () Int)
(declare-fun x1069 () Int)
(declare-fun x666 () Bool)
(declare-fun x1248 () Int)
(declare-fun x870 () Bool)
(declare-fun x439 () Int)
(declare-fun x464 () Int)
(declare-fun x1063 () Bool)
(declare-fun x844 () x22)
(declare-fun x17 () x22)
(declare-fun x965 () Bool)
(declare-fun x342 () x22)
(declare-fun x910 () Bool)
(declare-fun x1185 () Int)
(declare-fun x1297 () Bool)
(declare-fun x38 () Bool)
(declare-fun x654 () x22)
(declare-fun x1342 () Bool)
(declare-fun x949 () x22)
(declare-fun x581 () Int)
(declare-fun x111 () Int)
(declare-fun x1034 () Int)
(declare-fun x325 () Bool)
(declare-fun x1176 () Int)
(declare-fun x101 () Bool)
(declare-fun x612 () Int)
(declare-fun x1193 () x22)
(declare-fun x1131 () Int)
(declare-fun x1165 () Int)
(declare-fun x647 () Int)
(declare-fun x129 () Int)
(declare-fun x448 () Int)
(declare-fun x179 () Bool)
(declare-fun x1264 () Int)
(declare-fun x668 () Int)
(declare-fun x981 () Int)
(declare-fun x528 () Int)
(declare-fun x473 () Int)
(declare-fun x632 () Int)
(declare-fun x1197 () Int)
(declare-fun x82 () Bool)
(declare-fun x399 () Int)
(declare-fun x967 () Bool)
(declare-fun x462 () x22)
(declare-fun x717 () Int)
(declare-fun x540 () Bool)
(declare-fun x1234 () Bool)
(declare-fun x1269 () x22)
(declare-fun x760 () Bool)
(declare-fun x1118 (Int) Int)
(declare-fun x218 () Bool)
(declare-fun x643 () Bool)
(declare-fun x358 () Bool)
(declare-fun x922 () Int)
(declare-fun x618 () Int)
(declare-fun x766 () Bool)
(declare-fun x1052 () Bool)
(declare-fun x1187 () Bool)
(declare-fun x973 () Int)
(declare-fun x1228 (Int) Int)
(declare-fun x1240 (Int) Int)
(declare-fun x874 () Int)
(declare-fun x623 () Int)
(declare-fun x600 () Int)
(declare-fun x856 () Bool)
(declare-fun x378 () x22)
(declare-fun x1164 () Bool)
(declare-fun x735 () Bool)
(declare-fun x773 () Bool)
(declare-fun x913 () Int)
(declare-fun x566 () Bool)
(declare-fun x772 () x22)
(declare-fun x912 () Int)
(declare-fun x83 () x22)
(declare-fun x556 () Bool)
(declare-fun x471 () Int)
(declare-fun x1237 () Int)
(declare-fun x1281 () Bool)
(declare-fun x1205 () Int)
(declare-fun x578 () Bool)
(declare-fun x921 () Int)
(declare-fun x50 () Bool)
(declare-fun x132 () Bool)
(declare-fun x700 () Int)
(declare-fun x734 () Bool)
(declare-fun x420 () x22)
(declare-fun x577 () Int)
(declare-fun x630 () Int)
(declare-fun x371 () Int)
(declare-fun x1126 () Int)
(declare-fun x802 () x22)
(declare-fun x1009 () x22)
(declare-fun x146 () Int)
(declare-fun x1218 () Int)
(declare-fun x806 () Bool)
(declare-fun x904 (Int) Int)
(declare-fun x745 () Int)
(declare-fun x392 () Bool)
(declare-fun x650 () x22)
(declare-fun x504 () x22)
(declare-fun x721 () Int)
(declare-fun x545 () Bool)
(declare-fun x926 () Bool)
(declare-fun x882 () Bool)
(declare-fun x370 () Int)
(declare-fun x446 () Bool)
(declare-fun x1072 () Int)
(declare-fun x1282 () Bool)
(declare-fun x1324 () Bool)
(declare-fun x13 () Int)
(declare-fun x68 () Int)
(declare-fun x42 () Int)
(declare-fun x1144 () Int)
(declare-fun x1163 () Int)
(declare-fun x213 () Int)
(declare-fun x281 () Bool)
(declare-fun x742 () x22)
(declare-fun x628 () Bool)
(declare-fun x223 () Int)
(declare-fun x925 () Int)
(declare-fun x54 () Int)
(declare-fun x1075 () x22)
(declare-fun x644 () Int)
(declare-fun x1277 () Int)
(declare-fun x393 () Bool)
(declare-fun x996 () Int)
(declare-fun x1292 () Int)
(declare-fun x357 () Bool)
(declare-fun x570 () Int)
(declare-fun x182 () Bool)
(declare-fun x1166 () Int)
(declare-fun x339 () Int)
(declare-fun x1029 () Int)
(declare-fun x1017 () Int)
(declare-fun x160 () x22)
(declare-fun x993 () Int)
(declare-fun x274 () Bool)
(declare-fun x461 () Bool)
(declare-fun x1202 () Int)
(declare-fun x634 () Int)
(declare-fun x865 () Bool)
(declare-fun x1321 () Bool)
(declare-fun x855 () Bool)
(declare-fun x105 () Int)
(declare-fun x757 () Int)
(declare-fun x1215 () Int)
(declare-fun x383 () Bool)
(declare-fun x635 () Int)
(declare-fun x130 () Int)
(declare-fun x1272 () Int)
(declare-fun x1108 () Bool)
(declare-fun x249 () Int)
(declare-fun x1275 () x22)
(declare-fun x1132 () Bool)
(declare-fun x147 () Int)
(declare-fun x15 () Bool)
(declare-fun x1085 () Bool)
(declare-fun x1128 () Bool)
(declare-fun x62 () x22)
(declare-fun x960 () Int)
(declare-fun x89 () Int)
(declare-fun x555 () Int)
(declare-fun x616 () Int)
(declare-fun x1309 () Bool)
(declare-fun x825 () x22)
(declare-fun x736 () Bool)
(declare-fun x451 () Int)
(declare-fun x582 () Bool)
(declare-fun x588 () Int)
(declare-fun x1235 () Int)
(declare-fun x1298 () Int)
(declare-fun x695 () Int)
(declare-fun x519 () Int)
(declare-fun x94 () Int)
(declare-fun x1149 () x22)
(declare-fun x465 () Int)
(declare-fun x756 () Bool)
(declare-fun x879 () x22)
(declare-fun x1156 () Int)
(declare-fun x307 () x22)
(declare-fun x1301 () x22)
(declare-fun x1161 () Bool)
(declare-fun x888 () Bool)
(declare-fun x514 () x22)
(declare-fun x1247 () Int)
(declare-fun x665 () Int)
(declare-fun x126 (Int) Int)
(declare-fun x506 () Int)
(declare-fun x974 () Int)
(declare-fun x658 () Int)
(declare-fun x1296 () Int)
(declare-fun x607 () Int)
(declare-fun x271 () x22)
(declare-fun x818 () Bool)
(declare-fun x438 () Bool)
(declare-fun x911 () Bool)
(declare-fun x539 () Int)
(declare-fun x250 () Int)
(declare-fun x1250 () Bool)
(declare-fun x1116 () Bool)
(declare-fun x811 () Int)
(declare-fun x783 () Int)
(declare-fun x1260 () Bool)
(declare-fun x84 (Int) Int)
(declare-fun x604 () Bool)
(declare-fun x167 () Bool)
(declare-fun x297 () Bool)
(declare-fun x840 () Int)
(declare-fun x72 () Int)
(declare-fun x930 () Bool)
(declare-fun x1318 () Int)
(declare-fun x850 () Int)
(declare-fun x1087 () Bool)
(declare-fun x187 () x22)
(declare-fun x490 () Bool)
(declare-fun x530 () Bool)
(declare-fun x1043 () Int)
(declare-fun x406 () Bool)
(declare-fun x458 () x22)
(declare-fun x1317 () Int)
(declare-fun x1300 () Int)
(declare-fun x171 () Bool)
(declare-fun x564 () Bool)
(declare-fun x466 () Int)
(declare-fun x798 () Bool)
(declare-fun x1268 () Int)
(declare-fun x538 () Int)
(declare-fun x1345 () x22)
(declare-fun x135 () Bool)
(declare-fun x1310 () Int)
(declare-fun x936 () Bool)
(declare-fun x199 () Int)
(declare-fun x374 () Int)
(declare-fun x938 () x22)
(declare-fun x6 () Bool)
(declare-fun x919 () Bool)
(declare-fun x1280 () Bool)
(declare-fun x1042 () Int)
(declare-fun x684 () Bool)
(declare-fun x897 () Int)
(declare-fun x348 () Bool)
(declare-fun x803 () Bool)
(declare-fun x907 () Bool)
(declare-fun x416 () Int)
(declare-fun x593 () Int)
(declare-fun x404 () Int)
(declare-fun x1270 () Int)
(declare-fun x46 () Bool)
(declare-fun x137 () Int)
(declare-fun x649 () Bool)
(declare-fun x641 () Bool)
(declare-fun x303 () x22)
(declare-fun x1232 () Int)
(declare-fun x754 () Bool)
(declare-fun x982 () Int)
(declare-fun x177 () x22)
(declare-fun x424 () Int)
(declare-fun x780 (Int) Int)
(declare-fun x1022 () Int)
(declare-fun x1152 () Int)
(declare-fun x330 () Int)
(declare-fun x942 () x22)
(declare-fun x61 () Int)
(declare-fun x1279 () Bool)
(declare-fun x1104 () Int)
(declare-fun x238 () Int)
(declare-fun x591 () Int)
(declare-fun x1188 () Bool)
(declare-fun x652 (x22) Int)
(declare-fun x1081 () Int)
(declare-fun x952 () Bool)
(declare-fun x350 () Int)
(declare-fun x309 () Bool)
(declare-fun x265 () Bool)
(declare-fun x801 () x22)
(declare-fun x299 () Bool)
(declare-fun x110 () Bool)
(declare-fun x214 () Bool)
(declare-fun x407 () Int)
(declare-fun x702 () Int)
(declare-fun x547 () Int)
(declare-fun x284 () Int)
(declare-fun x28 () Int)
(declare-fun x1233 () Bool)
(declare-fun x470 () x22)
(declare-fun x645 () Int)
(declare-fun x953 () x22)
(declare-fun x1299 (Int) Int)
(declare-fun x510 () Int)
(declare-fun x117 () Int)
(declare-fun x1223 () Int)
(declare-fun x994 () Int)
(declare-fun x1209 () Bool)
(declare-fun x931 () Bool)
(declare-fun x1074 () Int)
(declare-fun x1350 () Int)
(declare-fun x116 () Bool)
(declare-fun x984 () Int)
(declare-fun x792 () Int)
(declare-fun x902 () Int)
(declare-fun x918 () Int)
(declare-fun x1332 () Int)
(declare-fun x554 () Int)
(declare-fun x403 () Int)
(declare-fun x69 () Int)
(declare-fun x1040 () Bool)
(declare-fun x1245 () x22)
(declare-fun x603 () Int)
(declare-fun x908 () Int)
(declare-fun x175 () Int)
(declare-fun x1304 () Int)
(declare-fun x567 () Int)
(declare-fun x937 () Int)
(declare-fun x152 () Int)
(declare-fun x450 () Bool)
(declare-fun x394 () Bool)
(declare-fun x562 () Int)
(declare-fun x590 () Bool)
(declare-fun x853 () x22)
(declare-fun x1159 () Bool)
(declare-fun x966 () Bool)
(declare-fun x85 () Int)
(declare-fun x710 () Int)
(declare-fun x433 () Bool)
(declare-fun x807 () Int)
(declare-fun x997 () Int)
(declare-fun x144 () Bool)
(declare-fun x758 () Int)
(declare-fun x195 () Int)
(declare-fun x711 () Int)
(declare-fun x1076 () Bool)
(declare-fun x277 () Bool)
(declare-fun x1015 () Int)
(declare-fun x121 () Bool)
(declare-fun x98 () Int)
(declare-fun x605 () Int)
(declare-fun x1251 () x22)
(declare-fun x523 () Bool)
(declare-fun x1204 () Int)
(declare-fun x1037 () Bool)
(declare-fun x927 () Int)
(declare-fun x1155 () Int)
(declare-fun x1227 () Int)
(declare-fun x558 () Int)
(declare-fun x1055 () Int)
(declare-fun x1025 () x22)
(declare-fun x515 () Int)
(declare-fun x313 () Int)
(declare-fun x1189 () Bool)
(declare-fun x314 () Int)
(declare-fun x532 () x22)
(declare-fun x830 () Int)
(declare-fun x1212 () Int)
(declare-fun x1259 () x22)
(declare-fun x91 (Int) Int)
(declare-fun x891 () Bool)
(declare-fun x837 () Bool)
(declare-fun x1137 () Bool)
(declare-fun x35 () Bool)
(declare-fun x136 () Int)
(declare-fun x598 () Int)
(declare-fun x638 () Bool)
(declare-fun x615 () Bool)
(declare-fun x401 () Int)
(declare-fun x423 (Int) Int)
(declare-fun x347 () x22)
(declare-fun x460 () Bool)
(declare-fun x1283 () Int)
(declare-fun x569 () Int)
(declare-fun x1186 () Bool)
(declare-fun x283 () Int)
(declare-fun x409 () x22)
(declare-fun x390 () Int)
(declare-fun x533 () Bool)
(declare-fun x445 () Int)
(declare-fun x869 () Int)
(declare-fun x1148 () Int)
(declare-fun x1141 () Bool)
(declare-fun x334 () x22)
(declare-fun x741 () Bool)
(declare-fun x1135 () x22)
(declare-fun x1315 () Int)
(declare-fun x738 () Int)
(declare-fun x243 () Int)
(declare-fun x1349 () Int)
(declare-fun x1147 () Bool)
(declare-fun x859 () Int)
(declare-fun x1219 () Bool)
(declare-fun x516 () Bool)
(declare-fun x1059 () Bool)
(declare-fun x468 () Bool)
(declare-fun x198 () Bool)
(declare-fun x752 () Int)
(declare-fun x158 () Int)
(declare-fun x541 () Int)
(declare-fun x1244 () Int)
(declare-fun x440 () Bool)
(declare-fun x128 () Int)
(declare-fun x787 () Int)
(declare-fun x1057 () Bool)
(declare-fun x821 () Bool)
(declare-fun x946 () Bool)
(declare-fun x985 () x22)
(declare-fun x29 () Bool)
(declare-fun x1288 () Int)
(declare-fun x59 () Int)
(declare-fun x226 () Bool)
(declare-fun x1024 () Int)
(declare-fun x475 () Int)
(declare-fun x768 () Bool)
(declare-fun x1307 () Int)
(declare-fun x119 () Int)
(declare-fun x191 () Bool)
(declare-fun x583 () x22)
(declare-fun x1000 () Int)
(declare-fun x444 () Int)
(declare-fun x920 () Bool)
(declare-fun x761 () Bool)
(declare-fun x432 () Bool)
(declare-fun x55 () Int)
(declare-fun x714 () Int)
(declare-fun x750 () x22)
(declare-fun x808 () Int)
(declare-fun x1114 () Int)
(declare-fun x24 () Int)
(declare-fun x205 () x22)
(declare-fun x493 () Bool)
(declare-fun x620 () Bool)
(declare-fun x500 () Bool)
(declare-fun x1092 () Bool)
(declare-fun x704 () Int)
(declare-fun x795 () Int)
(declare-fun x890 () Int)
(declare-fun x639 (Int) Int)
(declare-fun x640 () Bool)
(declare-fun x1286 () Int)
(declare-fun x914 () Bool)
(declare-fun x275 () Int)
(declare-fun x1239 () Int)
(declare-fun x1089 () Bool)
(declare-fun x421 () Int)
(declare-fun x601 () Int)
(declare-fun x20 () Bool)
(declare-fun x115 () Int)
(declare-fun x677 () Int)
(declare-fun x1213 () Int)
(declare-fun x553 () Bool)
(declare-fun x369 () x22)
(declare-fun x1105 () Bool)
(declare-fun x382 () Int)
(declare-fun x1221 () Int)
(declare-fun x1294 () Int)
(declare-fun x956 () Int)
(declare-fun x659 () Int)
(declare-fun x210 () Int)
(declare-fun x296 () Int)
(declare-fun x264 () x22)
(declare-fun x1117 () Int)
(declare-fun x300 () Bool)
(declare-fun x1004 () Bool)
(declare-fun x70 () Int)
(declare-fun x286 () Int)
(declare-fun x1102 () Bool)
(declare-fun x813 () x22)
(declare-fun x689 () Bool)
(declare-fun x184 () Bool)
(declare-fun x498 () Int)
(declare-fun x203 () Int)
(declare-fun x1058 () Int)
(declare-fun x505 () Int)
(declare-fun x418 () Int)
(declare-fun x1001 () Bool)
(declare-fun x657 () Int)
(declare-fun x749 () Bool)
(declare-fun x52 () Int)
(declare-fun x1325 () Int)
(declare-fun x1289 () Int)
(declare-fun x991 () Bool)
(declare-fun x290 () Bool)
(declare-fun x292 () x22)
(declare-fun x1326 () Bool)
(declare-fun x310 () Bool)
(declare-fun x851 () Bool)
(declare-fun x1113 () Int)
(declare-fun x1005 () Bool)
(declare-fun x434 () Int)
(declare-fun x486 () Int)
(declare-fun x1285 () Bool)
(declare-fun x172 () Bool)
(declare-fun x1316 (Int) Int)
(declare-fun x1064 () Int)
(declare-fun x499 () Int)
(declare-fun x472 () Int)
(declare-fun x707 () Int)
(declare-fun x524 () Bool)
(declare-fun x1094 () Int)
(declare-fun x442 () x22)
(declare-fun x1160 () Bool)
(declare-fun x1107 () Bool)
(declare-fun x679 (Int) Int)
(declare-fun x254 () Int)
(declare-fun x676 () Int)
(declare-fun x1174 () x22)
(declare-fun x1073 () x22)
(declare-fun x849 () x22)
(declare-fun x168 () Int)
(declare-fun x211 () Bool)
(declare-fun x240 () Bool)
(declare-fun x164 () x22)
(declare-fun x436 () Int)
(declare-fun x99 () Bool)
(declare-fun x1278 () Int)
(declare-fun x44 () Int)
(declare-fun x934 () x22)
(declare-fun x1162 () Bool)
(declare-fun x563 () Bool)
(declare-fun x1168 () Int)
(declare-fun x430 () Int)
(declare-fun x1203 () Bool)
(declare-fun x718 () Int)
(declare-fun x935 () Int)
(declare-fun x138 () Int)
(declare-fun x1173 () Bool)
(declare-fun x871 () Bool)
(declare-fun x950 () Bool)
(declare-fun x834 () Bool)
(declare-fun x585 () Bool)
(declare-fun x986 () Int)
(declare-fun x663 () Bool)
(declare-fun x817 () Bool)
(declare-fun x610 () Int)
(declare-fun x222 () Int)
(declare-fun x954 () Int)
(declare-fun x21 () Int)
(declare-fun x53 () Bool)
(declare-fun x185 () Bool)
(declare-fun x1039 () Bool)
(declare-fun x363 () Bool)
(declare-fun x1181 () Bool)
(declare-fun x521 () Int)
(declare-fun x87 () Int)
(declare-fun x765 () Bool)
(declare-fun x1068 () Bool)
(declare-fun x915 () Bool)
(declare-fun x45 () Int)
(declare-fun x1112 () Int)
(declare-fun x107 () Bool)
(declare-fun x1343 () Bool)
(declare-fun x550 () Int)
(declare-fun x1346 () Bool)
(declare-fun x832 () Int)
(declare-fun x1103 () Int)
(declare-fun x1006 () Int)
(declare-fun x720 () Bool)
(declare-fun x306 () Int)
(declare-fun x108 () Bool)
(declare-fun x1336 () Int)
(declare-fun x839 () Bool)
(declare-fun x743 () Bool)
(declare-fun x681 () Int)
(declare-fun x673 () Int)
(declare-fun x100 () Int)
(declare-fun x708 () Bool)
(declare-fun x305 () Bool)
(declare-fun x1101 () Bool)
(declare-fun x269 () Int)
(declare-fun x456 () Bool)
(declare-fun x1290 () Int)
(declare-fun x584 () Bool)
(declare-fun x379 () Int)
(declare-fun x880 () Bool)
(declare-fun x804 () Bool)
(declare-fun x233 () Bool)
(declare-fun x1338 () Bool)
(declare-fun x1293 () Int)
(declare-fun x180 () x22)
(declare-fun x596 () Bool)
(declare-fun x705 () x22)
(declare-fun x270 () Int)
(declare-fun x1262 () Int)
(declare-fun x777 () Int)
(declare-fun x1295 () Int)
(declare-fun x200 () Int)
(declare-fun x79 () Int)
(declare-fun x289 () Int)
(declare-fun x885 () Int)
(declare-fun x868 () Int)
(declare-fun x951 () Int)
(declare-fun x225 () Bool)
(declare-fun x327 () Int)
(declare-fun x963 () Int)
(declare-fun x321 () x22)
(declare-fun x664 () Int)
(declare-fun x485 () Int)
(declare-fun x866 () Int)
(declare-fun x790 () Int)
(declare-fun x194 () Bool)
(declare-fun x948 () Bool)
(declare-fun x941 () Int)
(declare-fun x759 () Bool)
(declare-fun x896 () x22)
(declare-fun x788 () Int)
(declare-fun x1099 () Bool)
(declare-fun x80 () x22)
(declare-fun x417 () Int)
(declare-fun x2 () x22)
(declare-fun x775 () Bool)
(declare-fun x1348 () Bool)
(declare-fun x355 () Int)
(declare-fun x1200 () Bool)
(declare-fun x467 () Bool)
(declare-fun x876 () x22)
(declare-fun x725 () Int)
(declare-fun x1109 () Int)
(declare-fun x354 () Int)
(declare-fun x237 () x22)
(declare-fun x1122 () Bool)
(declare-fun x481 () Bool)
(declare-fun x410 () Int)
(declare-fun x427 () Int)
(declare-fun x280 () x22)
(declare-fun x1347 (Int) Int)
(declare-fun x122 () Bool)
(declare-fun x557 () Int)
(declare-fun x1140 () Int)
(declare-fun x193 () Int)
(declare-fun x958 () Int)
(declare-fun x428 () Int)
(declare-fun x625 () x22)
(declare-fun x728 () Int)
(declare-fun x381 () Int)
(declare-fun x1340 () x22)
(declare-fun x1222 () Int)
(declare-fun x992 () Int)
(declare-fun x746 () Bool)
(declare-fun x881 () Int)
(declare-fun x1086 () Bool)
(declare-fun x1254 () Bool)
(declare-fun x940 () x22)
(declare-fun x1080 () Int)
(declare-fun x331 () Bool)
(declare-fun x1134 () x22)
(declare-fun x1138 () Int)
(declare-fun x77 () Bool)
(declare-fun x251 () Bool)
(declare-fun x103 () Bool)
(declare-fun x800 () Bool)
(declare-fun x715 () Bool)
(declare-fun x858 () Bool)
(declare-fun x476 () Int)
(declare-fun x682 () Int)
(declare-fun x826 () Int)
(declare-fun x637 () x22)
(declare-fun x751 () Bool)
(declare-fun x384 () x22)
(declare-fun x25 () x22)
(declare-fun x482 () Bool)
(declare-fun x559 () Int)
(declare-fun x572 () Bool)
(declare-fun x34 () Bool)
(declare-fun x323 () Int)
(declare-fun x26 () Int)
(declare-fun x909 () Int)
(declare-fun x924 () Bool)
(declare-fun x145 () Int)
(declare-fun x1096 () Int)
(declare-fun x1056 () Int)
(declare-fun x298 () Int)
(declare-fun x1207 () Bool)
(declare-fun x522 () x22)
(declare-fun x517 () Int)
(declare-fun x131 (Int) Int)
(declare-fun x479 () Bool)
(declare-fun x212 () Bool)
(declare-fun x1095 (Int) Int)
(declare-fun x368 () x22)
(declare-fun x1090 () Bool)
(declare-fun x1066 () Int)
(declare-fun x872 () Int)
(declare-fun x857 () Bool)
(declare-fun x809 () Int)
(declare-fun x469 () x22)
(declare-fun x113 () Int)
(declare-fun x962 () Int)
(declare-fun x1198 () Bool)
(declare-fun x713 () Int)
(declare-fun x396 () x22)
(declare-fun x502 () Int)
(declare-fun x597 () Int)
(declare-fun x674 () x22)
(declare-fun x537 () Int)
(declare-fun x944 () Bool)
(declare-fun x895 () Bool)
(declare-fun x889 () x22)
(declare-fun x905 () Bool)
(declare-fun x789 () x22)
(declare-fun x526 () Bool)
(declare-fun x1084 () Bool)
(declare-fun x1331 () Bool)
(declare-fun x631 () Int)
(declare-fun x574 () Int)
(declare-fun x220 () Int)
(declare-fun x972 (x22) Int)
(declare-fun x431 () x22)
(declare-fun x1252 () Int)
(declare-fun x608 () Bool)
(declare-fun x1267 () Int)
(declare-fun x1157 () Bool)
(declare-fun x477 () Int)
(declare-fun x1220 () Bool)
(declare-fun x380 () Bool)
(declare-fun x76 () Int)
(declare-fun x636 () Int)
(declare-fun x244 () Bool)
(declare-fun x899 () Bool)
(declare-fun x268 () Int)
(declare-fun x186 () Int)
(declare-fun x402 () Bool)
(declare-fun x1129 () Int)
(declare-fun x1287 () Bool)
(declare-fun x405 () Int)
(declare-fun x389 () Int)
(declare-fun x648 () Bool)
(declare-fun x452 () Int)
(declare-fun x518 () Bool)
(declare-fun x349 () Int)
(declare-fun x400 () Int)
(declare-fun x1032 () x22)
(declare-fun x507 () Int)
(declare-fun x329 () Bool)
(declare-fun x443 () Bool)
(declare-fun x680 () Int)
(declare-fun x293 () Int)
(declare-fun x1241 () Int)
(declare-fun x206 () Int)
(declare-fun x435 () Int)
(declare-fun x964 () Bool)
(declare-fun x149 () Int)
(declare-fun x161 () x22)
(declare-fun x653 () Int)
(declare-fun x843 () Int)
(declare-fun x970 () Int)
(declare-fun x835 () Int)
(declare-fun x1051 () Bool)
(declare-fun x273 () x22)
(declare-fun x587 () Int)
(declare-fun x1067 () Int)
(declare-fun x901 () Bool)
(declare-fun x1312 () x22)
(declare-fun x96 () x22)
(declare-fun x999 () Bool)
(declare-fun x41 () Int)
(declare-fun x328 () Int)
(declare-fun x1191 () Int)
(declare-fun x173 () Int)
(declare-fun x278 () Bool)
(declare-fun x534 () Bool)
(declare-fun x33 () Bool)
(declare-fun x385 () Bool)
(declare-fun x227 () x22)
(declare-fun x1265 () Int)
(declare-fun x812 () Int)
(declare-fun x1154 () x22)
(declare-fun x929 () Int)
(declare-fun x1274 () Int)
(declare-fun x671 () Int)
(declare-fun x1266 () Int)
(declare-fun x1097 (x22) Int)
(declare-fun x719 () Int)
(declare-fun x104 () Int)
(declare-fun x411 () x22)
(declare-fun x40 () Int)
(declare-fun x1036 () x22)
(declare-fun x978 () Bool)
(declare-fun x483 () Int)
(declare-fun x78 () Bool)
(declare-fun x351 () Int)
(declare-fun x1023 () Int)
(declare-fun x449 () Int)
(declare-fun x733 () Int)
(declare-fun x353 () Int)
(declare-fun x252 () Int)
(declare-fun x202 () x22)
(declare-fun x686 () Int)
(declare-fun x1284 () Int)
(declare-fun x701 () x22)
(declare-fun x796 () Int)
(declare-fun x234 () Bool)
(declare-fun x395 () Int)
(declare-fun x823 () Int)
(declare-fun x159 () x22)
(declare-fun x11 () Int)
(declare-fun x571 () Bool)
(declare-fun x586 () Bool)
(declare-fun x247 () Int)
(declare-fun x266 () Bool)
(declare-fun x739 () Bool)
(declare-fun x256 () Int)
(declare-fun x565 () Bool)
(declare-fun x1054 () Int)
(declare-fun x971 () Int)
(declare-fun x74 () Bool)
(declare-fun x961 () Int)
(declare-fun x1142 () Int)
(declare-fun x549 () Int)
(declare-fun x877 () Bool)
(declare-fun x959 () Int)
(declare-fun x829 () Bool)
(declare-fun x917 () Int)
(declare-fun x1077 () Int)
(declare-fun x345 () Bool)
(declare-fun x1021 () Int)
(declare-fun x544 () Int)
(declare-fun x947 () Bool)
(declare-fun x259 () x22)
(declare-fun x527 () Int)
(declare-fun x776 () Bool)
(declare-fun x979 () Bool)
(declare-fun x165 (Int) Int)
(declare-fun x1243 () Bool)
(declare-fun x1314 () Bool)
(declare-fun x1041 () Bool)
(declare-fun x939 () Bool)
(declare-fun x1327 () Int)
(declare-fun x120 () Bool)
(declare-fun x626 () Bool)
(declare-fun x683 () Int)
(declare-fun x123 () Bool)
(declare-fun x599 () Bool)
(declare-fun x1111 () Int)
(declare-fun x764 () x22)
(declare-fun x246 () Int)
(declare-fun x1082 () Bool)
(declare-fun x166 () Bool)
(declare-fun x124 () Int)
(declare-fun x188 () Int)
(declare-fun x257 () x22)
(declare-fun x1182 () Int)
(declare-fun x820 () Int)
(declare-fun x338 () Int)
(declare-fun x1344 () Bool)
(declare-fun x133 () Int)
(declare-fun x14 () Int)
(declare-fun x216 () Bool)
(declare-fun x56 () x22)
(declare-fun x322 () Bool)
(declare-fun x606 () x22)
(declare-fun x162 () Int)
(declare-fun x63 () Bool)
(declare-fun x619 (Int) Int)
(declare-fun x691 () Int)
(declare-fun x767 () Bool)
(declare-fun x1018 () Bool)
(declare-fun x1329 () Int)
(declare-fun x148 () Bool)
(declare-fun x375 () Int)
(declare-fun x316 () Int)
(declare-fun x412 () Bool)
(declare-fun x988 () x22)
(declare-fun x65 () Bool)
(declare-fun x387 () Int)
(declare-fun x453 () Bool)
(declare-fun x1171 () Bool)
(declare-fun x57 () Int)
(declare-fun x5 () Bool)
(declare-fun x232 (x22) Int)
(declare-fun x43 () Int)
(declare-fun x318 () x22)
(declare-fun x755 () Int)
(declare-fun x140 () Bool)
(declare-fun x495 () Bool)
(declare-fun x955 () Int)
(declare-fun x794 () Bool)
(declare-fun x1170 () Int)
(declare-fun x215 () Int)
(declare-fun x127 () Bool)
(declare-fun x169 () Bool)
(declare-fun x302 () Int)
(declare-fun x224 () Int)
(declare-fun x1088 () Bool)
(declare-fun x1330 () Bool)
(declare-fun x204 () Bool)
(declare-fun x669 () x22)
(declare-fun x1008 () Int)
(declare-fun x1311 () Int)
(declare-fun x543 () Int)
(declare-fun x883 () Int)
(declare-fun x58 () Bool)
(declare-fun x114 () Bool)
(declare-fun x97 () Bool)
(declare-fun x1146 () Bool)
(declare-fun x31 () Int)
(declare-fun x1003 () Int)
(declare-fun x894 () Bool)
(declare-fun x27 () Bool)
(declare-fun x324 () Int)
(declare-fun x824 () Bool)
(declare-fun x67 () Int)
(declare-fun x771 () x22)
(declare-fun x580 () Int)
(declare-fun x945 () Int)
(declare-fun x579 () x22)
(declare-fun x1236 () Bool)
(declare-fun x662 () Bool)
(declare-fun x1305 () Int)
(declare-fun x457 () Int)
(declare-fun x93 () Bool)
(declare-fun x670 () Bool)
(declare-fun x1184 () Int)
(declare-fun x192 () Bool)
(declare-fun x831 () Int)
(declare-fun x875 () Int)
(declare-fun x239 () Int)
(declare-fun x980 () Int)
(declare-fun x1258 () Int)
(declare-fun x134 () Int)
(declare-fun x362 () Int)
(declare-fun x998 () Int)
(declare-fun x95 () Int)
(declare-fun x1124 () Int)
(declare-fun x335 () Bool)
(declare-fun x336 () x22)
(declare-fun x301 () Int)
(declare-fun x60 () Int)
(declare-fun x343 () Int)
(declare-fun x88 () Bool)
(declare-fun x1083 () x22)
(declare-fun x245 () Int)
(declare-fun x561 () Int)
(declare-fun x236 () x22)
(declare-fun x1208 () Int)
(declare-fun x797 () Int)
(declare-fun x508 () Bool)
(declare-fun x287 () Int)
(declare-fun x848 () Int)
(declare-fun x1120 () Bool)
(declare-fun x71 () Int)
(declare-fun x1183 () Bool)
(declare-fun x709 () Int)
(declare-fun x229 () Int)
(declare-fun x189 () Int)
(declare-fun x729 () x22)
(declare-fun x731 () Int)
(declare-fun x248 () Int)
(declare-fun x365 (Int) Int)
(declare-fun x480 () Int)
(declare-fun x983 () Bool)
(declare-fun x497 () x22)
(declare-fun x356 () Int)
(declare-fun x611 () Bool)
(declare-fun x617 () Bool)
(declare-fun x1224 () Int)
(declare-fun x716 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x81 () Int)
(declare-fun x633 () Bool)
(declare-fun x627 () Int)
(declare-fun x576 () Int)
(declare-fun x536 () Int)
(declare-fun x732 () Int)
(declare-fun x621 () Int)
(declare-fun x928 () Bool)
(declare-fun x692 () x22)
(declare-fun x437 () Int)
(declare-fun x512 () Bool)
(declare-fun x1133 () Bool)
(declare-fun x852 () Int)
(declare-fun x957 () Int)
(declare-fun x12 () Int)
(declare-fun x388 () Int)
(declare-fun x989 () Int)
(declare-fun x86 () Bool)
(declare-fun x763 () Bool)
(declare-fun x1020 () Bool)
(declare-fun x1253 () x22)
(declare-fun x1180 () Int)
(declare-fun x1322 () Bool)
(declare-fun x769 () x22)
(declare-fun x1139 () Bool)
(declare-fun x706 () Int)
(declare-fun x529 () Int)
(declare-fun x793 () Int)
(declare-fun x139 () Int)
(declare-fun x1062 () Int)
(declare-fun x174 () Int)
(declare-fun x494 () Bool)
(declare-fun x496 () x22)
(declare-fun x1050 () Bool)
(declare-fun x1115 () Int)
(declare-fun x846 () Bool)
(declare-fun x426 () Bool)
(declare-fun x361 () Bool)
(declare-fun x501 () Bool)
(declare-fun x1060 () Bool)
(declare-fun x854 () Int)
(declare-fun x75 () Int)
(declare-fun x629 () Bool)
(declare-fun x511 () Bool)
(declare-fun x1271 () Int)
(declare-fun x196 () Bool)
(declare-fun x651 () Int)
(declare-fun x487 () Int)
(declare-fun x478 () Bool)
(declare-fun x1190 (Int) Int)
(declare-fun x1249 () x22)
(declare-fun x19 () x22)
(declare-fun x1047 () x22)
(declare-fun x864 () Int)
(declare-fun x1027 () Bool)
(declare-fun x863 () Bool)
(declare-fun x1033 () Bool)
(declare-fun x646 () Bool)
(declare-fun x367 () Int)
(declare-fun x784 () Bool)
(declare-fun x1319 () Int)
(declare-fun x344 () Int)
(declare-fun x1226 () x22)
(declare-fun x208 () Int)
(declare-fun x903 () Int)
(declare-fun x272 (Int) Int)
(declare-fun x32 () Int)
(declare-fun x413 () Int)
(declare-fun x1002 () Bool)
(declare-fun x781 () Bool)
(declare-fun x106 () Bool)
(declare-fun x1079 () Int)
(declare-fun x1276 () Int)
(declare-fun x1038 () Int)
(declare-fun x594 () Int)
(declare-fun x602 () Bool)
(declare-fun x551 () Int)
(declare-fun x346 () Bool)
(declare-fun x288 () Bool)
(declare-fun x260 () Int)
(declare-fun x740 () Bool)
(declare-fun x675 () Bool)
(declare-fun x816 () Int)
(declare-fun x838 () Bool)
(declare-fun x190 () Bool)
(declare-fun x614 () Int)
(declare-fun x30 () Bool)
(declare-fun x112 () Bool)
(declare-fun x7 () Int)
(declare-fun x531 () Bool)
(declare-fun x109 () Bool)
(declare-fun x698 () Int)
(declare-fun x1246 () Int)
(declare-fun x1145 () Int)
(declare-fun x1143 () Int)
(declare-fun x267 () Bool)
(declare-fun x1031 () Int)
(declare-fun x592 () Int)
(declare-fun x693 () Bool)
(declare-fun x291 () x22)
(declare-fun x488 () Int)
(declare-fun x170 () Int)
(declare-fun x1195 () Int)
(declare-fun x696 () Int)
(declare-fun x1125 () Int)
(declare-fun x737 () Int)
(declare-fun x1206 () Int)
(declare-fun x1256 () Int)
(declare-fun x892 () Bool)
(declare-fun x799 () Int)
(declare-fun x242 () Bool)
(declare-fun x340 () Bool)
(declare-fun x261 () Bool)
(declare-fun x525 () Int)
(declare-fun x18 () Int)
(declare-fun x535 () Int)
(declare-fun x1030 () x22)
(declare-fun x782 () x22)
(declare-fun x595 () Bool)
(declare-fun x276 (Int) x22)
(declare-fun x253 () x22)
(declare-fun x377 () Int)
(declare-fun x285 () Bool)
(declare-fun x1167 () Bool)
(declare-fun x622 () Bool)
(declare-fun x1026 () Bool)
(declare-fun x861 () Bool)
(declare-fun x373 () Bool)
(declare-fun x727 () Bool)
(declare-fun x1049 () Bool)
(declare-fun x366 () Bool)
(declare-fun x1100 () Int)
(declare-fun x49 () Int)
(declare-fun x178 () Int)
(declare-fun x968 () Bool)
(declare-fun x900 () Int)
(declare-fun x694 () Int)
(declare-fun x489 () Bool)
(declare-fun x860 () Int)
(declare-fun x1151 () x22)
(declare-fun x916 () Int)
(declare-fun x1179 () Bool)
(declare-fun x241 () Int)
(declare-fun x703 () Int)
(declare-fun x1255 () Int)
(declare-fun x923 () Int)
(declare-fun x722 () Bool)
(declare-fun x932 () x22)
(declare-fun x1230 () x22)
(declare-fun x1016 () Int)
(declare-fun x744 () Int)
(declare-fun x1231 () Bool)
(declare-fun x1070 () Bool)
(declare-fun x142 () Bool)
(declare-fun x1334 () Int)
(declare-fun x774 () Int)
(declare-fun x441 () Int)
(declare-fun x484 () Int)
(declare-fun x414 () x22)
(declare-fun x724 () Int)
(declare-fun x699 () Bool)
(declare-fun x386 () Int)
(declare-fun x66 () Int)
(declare-fun x656 () Int)
(declare-fun x1093 () Int)
(declare-fun x723 () Int)
(declare-fun x492 () x22)
(declare-fun x207 () x22)
(declare-fun x609 () Int)
(declare-fun x552 () Bool)
(declare-fun x228 () Bool)
(declare-fun x1341 () Bool)
(declare-fun x995 () Int)
(declare-fun x1178 () Bool)
(declare-fun x1194 () Int)
(declare-fun x1210 () x22)
(declare-fun x886 () Int)
(declare-fun x546 () Bool)
(declare-fun x1048 () Bool)
(declare-fun x976 () Int)
(declare-fun x753 () Bool)
(declare-fun x352 () Int)
(declare-fun x47 () Int)
(declare-fun x513 () x22)
(declare-fun x842 () Int)
(declare-fun x319 () Bool)
(declare-fun x833 () Int)
(declare-fun x16 () Bool)
(declare-fun x1127 () Bool)
(declare-fun x447 () Int)
(declare-fun x320 () x22)
(declare-fun x10 () Int)
(declare-fun x279 () Int)
(declare-fun x841 () Bool)
(declare-fun x1199 () Int)
(declare-fun x217 () Int)
(declare-fun x1177 () Bool)
(declare-fun x815 () Bool)
(declare-fun x326 (Int Int) Int)
(declare-fun x157 () Bool)
(declare-fun x1019 () Int)
(declare-fun x884 () Int)
(declare-fun x712 () Int)
(declare-fun x455 () Int)
(declare-fun x64 () Int)
(declare-fun x425 () Bool)
(declare-fun x990 () x22)
(declare-fun x311 () Bool)
(declare-fun x150 (Int) Int)
(declare-fun x333 () Bool)
(declare-fun x255 () Int)
(declare-fun x118 () Int)
(declare-fun x1257 () Bool)
(declare-fun x762 () Int)
(declare-fun x258 () Int)
(declare-fun x1242 () Bool)
(declare-fun x687 () Int)
(declare-fun x1028 () Int)
(declare-fun x509 () Bool)
(declare-fun x1337 () Int)
(declare-fun x791 () Int)
(declare-fun x1306 () Int)
(declare-fun x1046 () Int)
(declare-fun x1216 () Int)
(declare-fun x391 () Bool)
(declare-fun x1106 () x22)
(declare-fun x747 () Bool)
(declare-fun x1110 () Bool)
(declare-fun x9 () Int)
(declare-fun x975 () Bool)
(declare-fun x1071 () Int)
(declare-fun x8 () Bool)
(declare-fun x1308 () Int)
(declare-fun x176 () Int)
(declare-fun x589 () Bool)
(declare-fun x785 () Bool)
(declare-fun x235 () Int)
(declare-fun x231 () x22)
(declare-fun x560 () Int)
(declare-fun x454 () Int)
(declare-fun x219 () Bool)
(declare-fun x1303 () Int)
(declare-fun x1098 () Bool)
(declare-fun x1078 () x22)
(declare-fun x90 () Int)
(declare-fun x1201 () Int)
(declare-fun x312 () Bool)
(declare-fun x1229 () x22)
(declare-fun x987 () Int)
(declare-fun x827 () Bool)
(declare-fun x1175 () Int)
(declare-fun x1238 () Bool)
(declare-fun x1012 () Bool)
(define-fun x1211 ((x22 x22) (x294 Int)) x22 (ite ((_ is x642) x22) (x642 (x748 x22) (+ (x1 x22) x294)) (ite ((_ is x3) x22) (x3 (x1061 x22) (x141 x22) (+ x294 (x181 x22))) (x1192 (+ (x1196 x22) x294)))))
(define-fun x429 ((x836 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x836) (>= x836 0)) x836 (- x836 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x685 ((x836 Int)) Int (ite (and (< x836 0) (>= x836 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x836 115792089237316195423570985008687907853269984665640564039457584007913129639936) x836))
(define-fun x1065 ((x542 Int)) Bool (and (<= 0 x542) (< x542 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x613 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x780 x1335)))
(define-fun x337 ((x1335 Int)) Int (ite (= x1335 128) x510 (x679 x1335)))
(define-fun x408 ((x1335 Int)) Int (ite (= x1335 128) x510 (x1190 x1335)))
(define-fun x376 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x619 x1335)))
(define-fun x341 ((x1335 Int)) Int (ite (= x1335 128) x510 (x131 x1335)))
(define-fun x520 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x1228 x1335)))
(define-fun x943 ((x1335 Int)) Int (ite (= x1335 128) x510 (x272 x1335)))
(define-fun x845 ((x1335 Int)) Int (ite (= 128 x1335) x485 (x91 x1335)))
(define-fun x1263 ((x1335 x22)) Int (ite (= x705 x1335) x313 (x652 x1335)))
(define-fun x1291 ((x1335 x22)) Int (ite x936 (x652 x1335) (x1263 x1335)))
(define-fun x655 ((x1335 x22)) Int (ite (= x1335 x1312) 0 (x1291 x1335)))
(define-fun x1119 ((x1335 x22)) Int (ite x1342 (x652 x1335) (x655 x1335)))
(define-fun x697 ((x1335 Int)) Int (ite (= x1335 128) x510 (x575 x1335)))
(define-fun x1302 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x639 x1335)))
(define-fun x624 ((x1335 Int)) Int (ite (= x1335 128) x510 (x423 x1335)))
(define-fun x688 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x1316 x1335)))
(define-fun x295 ((x1335 x22)) Int (ite (= x1335 x940) x711 (x972 x1335)))
(define-fun x1328 ((x1335 Int)) Int (ite (= x1335 128) x510 (x126 x1335)))
(define-fun x1121 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x1118 x1335)))
(define-fun x1014 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x365 x1335)))
(define-fun x828 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x904 x1335)))
(define-fun x1169 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x1240 x1335)))
(define-fun x364 ((x1335 Int)) Int (ite (= x1335 128) x510 (x1299 x1335)))
(define-fun x317 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x1347 x1335)))
(define-fun x906 ((x1335 Int)) Int (ite (= 128 x1335) x510 (x84 x1335)))
(define-fun x730 ((x1335 Int)) Int (ite (= x1335 128) x510 (x165 x1335)))
(define-fun x151 ((x1335 Int)) Int (ite (= x1335 128) x510 (x1095 x1335)))
(define-fun x415 ((x1335 x22)) Int (ite x936 (x972 x1335) (x295 x1335)))
(define-fun x878 ((x1335 x22)) Int (ite (= x1075 x1335) 0 (x415 x1335)))
(define-fun x1044 ((x1335 x22)) Int (ite x1342 (x972 x1335) (x878 x1335)))
(define-fun x867 ((x542 Int)) Bool (=> (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x542)) (not (= 1250999895 x542)) (not (= x542 701022898)) (not (= 2485876314 x542)) (not (= x542 2429653569)) (not (= 3686129278 x542)) (not (= x542 954915356)) (not (= x542 1461501637330902918203684832716283019655932542975)) (> x542 10000) (not (= x542 1729973928)) (not (= x542 1572751336))) (not ((_ is x1192) (x276 x542)))))
(assert (= x669 (x276 (x102 x669))))
(assert (= x1146 (=> (and (= x809 x379) (and (and (not (= 954915356 x550)) (not (= 701022898 x550)) (= (not (= 0 x464)) x699) (> x577 0) (= x215 0) (= (x232 (x276 x400)) x577) (= 1250999895 x550) (> 1729973928 x550) (= x699 x838) (= x662 (= 0 x510)) (= 0 x486)) (and (= x464 (ite x946 1 0)) (= x1338 (not x300)) (<= x809 1461501637330902918203684832716283019655932542975) (= x946 (not x1338)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1072) (= x243 1572751336) (= 0 x389) (not (= x243 1250999895)) (= (x972 x606) x1072) (not (= x243 701022898)) (= x306 0) (= x717 (x232 (x276 x400))) (= (x3 (x276 x809) (x1192 1) 0) x606) (< x243 1729973928) (>= x1072 0) (not (= x243 954915356)) (= (not (= x1072 0)) x300) (> x717 0)))) (and (=> x662 x839) (=> (and (and (= x267 (> 1461501637330902918203684832716283019655932542975 x961)) (= x62 (x1211 x492 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x961) (= (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x133) (= (x652 x492) x961) (= x692 (x642 (x1192 0) 0)) (= x12 (x429 (+ x133 160))) (= (< 192 x12) x491) (>= x961 0) x267 (= (x642 (x1192 0) 0) x492) (= (div (mod (- (x102 x492) (x102 x692)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1043)) (not x662)) (and (=> x491 x511) (=> (not x491) x1041)))))))
(assert (= (x1192 954915356) (x276 954915356)))
(assert (x867 x152))
(assert (x1065 x410))
(assert (= (x276 (x102 x1251)) x1251))
(assert (x1065 x199))
(assert (x1065 x1017))
(assert (x1065 x377))
(assert (= (or x626 x78) x646))
(assert (= (or x265 (and x366 x1068)) x1250))
(assert (x1065 x962))
(assert (x1065 x1306))
(assert (x1065 x538))
(assert (x1065 x521))
(assert (x1065 x400))
(assert (= (x102 (x1211 x398 x793)) (+ x793 (x102 x398))))
(assert (x1065 x1293))
(assert (x1065 x758))
(assert (x1065 x1267))
(assert (x1065 x1329))
(assert (= (and (not x1132) x1207) x930))
(assert (x1065 x1031))
(assert (x1065 x517))
(assert (x1065 x1327))
(assert (x1065 x528))
(assert (x1065 x1307))
(assert (x1065 x1046))
(assert (x1065 x136))
(assert (= (x1192 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x276 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x1065 x1180))
(assert (x1065 x75))
(assert (x1065 x1199))
(assert (x1065 x73))
(assert (x1065 x922))
(assert (x1065 x1156))
(assert (= x1252 (x102 (x276 x1252))))
(assert (x1065 x609))
(assert (x1065 x350))
(assert (x1065 x805))
(assert (x1065 x1284))
(assert (x1065 x1244))
(assert (=> (>= 10000 x957) (= (x276 x957) (x1192 x957))))
(assert (x1065 x111))
(assert (= (=> (and (and (< 0 x255) (= 0 x359) (= x1246 1) (= x47 (x685 (- x39 x1246))) (= x758 3686129278) (not (< x758 1729973928)) (= x255 (x232 (x276 x400))) (not (= 2485876314 x758)) (= x47 x653) (= (= 0 x510) x931) (= x39 x1278) (= x235 0) (not (= x758 1729973928)) (not (= 2429653569 x758))) (and (= x1278 x723) (= x659 128) (= 128 x1310) (= x723 (x408 128)))) (and (=> (and (and (<= x1109 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1231 (< x1109 1461501637330902918203684832716283019655932542975)) (>= x1109 0) (= x782 (x642 (x1192 0) 0)) (= x951 (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1109 (x652 x825)) (= x1194 (x429 (+ 160 x951))) (= x840 (div (mod (- (x102 x825) (x102 x782)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x1211 x825 1) x360) (= (< 192 x1194) x834) x1231 (= x825 (x642 (x1192 0) 0))) (not x931)) (and (=> x834 x975) (=> (not x834) x846))) (=> x931 x526))) x1343))
(assert (x1065 x1305))
(assert (x1065 x1034))
(assert (x1065 x951))
(assert (x1065 x296))
(assert (x1065 x113))
(assert (= x545 (=> (and (and (= (= x510 0) x1007) (= (x685 (- x707 x1021)) x618) (not (< x1114 1729973928)) (not (= 1729973928 x1114)) (= x707 x593) (= x1021 1) (not (= 2485876314 x1114)) (= x1114 3686129278) (= x10 (x232 (x276 x400))) (= x176 0) (> x10 0) (= 0 x1268) (= x618 x430) (not (= x1114 2429653569))) (and (= 128 x455) (= x354 (x688 128)) (= x593 x354) (= x1094 128))) (and (=> (and (not x1007) (and (= x304 (x642 (x1192 0) 0)) (= (< 192 x1333) x882) (= x1333 (x429 (+ 160 x1093))) (<= 0 x609) (= (x652 x514) x609) x1172 (= (x642 (x1192 0) 0) x514) (= x1093 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x90 (div (mod (- (x102 x514) (x102 x304)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (<= x609 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x609 1461501637330902918203684832716283019655932542975) x1172) (= (x1211 x514 1) x1245))) (and (=> x882 x910) (=> (not x882) x1198))) (=> x1007 x50)))))
(assert (= (x102 (x1211 x1275 x343)) (+ (x102 x1275) x343)))
(assert (x1065 x176))
(assert (= (and x734 x1309) x952))
(assert (x1065 x1112))
(assert (= x583 (x276 (x102 x583))))
(assert (x1065 x686))
(assert (x1065 x721))
(assert (=> (<= x45 10000) (= (x276 x45) (x1192 x45))))
(assert (= (or x345 x905) x103))
(assert (x1065 x206))
(assert (x1065 x1021))
(assert (x1065 x388))
(assert (= (=> (and (and (not (= x42 1729973928)) (= x1115 0) (> x362 0) (not (> 1729973928 x42)) (= 1 x1213) (= 3686129278 x42) (= x623 x864) (= (x685 (- x623 x1213)) x249) (= (x232 (x276 x400)) x362) (not (= x42 2429653569)) (= x249 x541) (not (= x42 2485876314)) (= (= 0 x485) x722) (= 0 x538)) (= x864 x139)) (and (=> (and (not x722) (and (= x1199 (mod (* 32 x485) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1008) (= x841 (< 192 x324)) (= x268 (div (mod (- (x102 x844) (x102 x347)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x1211 x844 1) x321) x617 (= x844 (x642 (x1192 0) 0)) (= (> 1461501637330902918203684832716283019655932542975 x1008) x617) (= (x642 (x1192 0) 0) x347) (= x324 (x429 (+ 160 x1199))) (<= 0 x1008) (= (x1119 x844) x1008))) (and (=> x841 x5) (=> (not x841) x720))) (=> x722 x1027))) x1280))
(assert (x1065 x282))
(assert (=> (<= x560 10000) (= (x276 x560) (x1192 x560))))
(assert (= x266 (and x964 x15)))
(assert (x1065 x454))
(assert (x1065 x574))
(assert (= (=> (and (or (and (= x405 0) (not x383)) (and x383 (and (< x541 x485) (= x1149 (x642 (x1192 0) 0)) (= x405 x984) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x984) (= (x1119 x932) x984) (= x1175 0) x112 (= x932 (x1211 x1149 x249)) (= (> 1461501637330902918203684832716283019655932542975 x984) x112) (= x850 0) (>= x984 0)))) (and (= x1305 (x845 128)) (= 128 x421) (= (> x1305 x249) x383) (= 128 x387))) x928) x1027))
(assert (x1065 x416))
(assert (= (or x1090 x261) x37))
(assert (x1065 x1320))
(assert (x1065 x286))
(assert (x1065 x437))
(assert (= x127 (or x708 x595)))
(assert (= x824 (=> (and (or (and (= 0 x1176) (not x898)) (and (and (= (x642 (x1192 0) 0) x469) (= (< x1206 1461501637330902918203684832716283019655932542975) x643) (= x105 0) (< x902 x510) (= (x652 x497) x1206) (>= x1206 0) (<= x1206 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1206 x1176) (= x497 (x1211 x469 x1165)) x643 (= 0 x338)) x898)) (and (= (> x448 x1165) x898) (= x1294 128) (= x448 (x1328 128)) (= x269 128))) x1059)))
(assert (= (and (not x1039) x153) x905))
(assert (x1065 x1265))
(assert (= (x1192 1250999895) (x276 1250999895)))
(assert (x1065 x1318))
(assert (= (x102 (x276 x957)) x957))
(assert (x1065 x1081))
(assert (x1065 x714))
(assert (x1065 x44))
(assert (x1065 x539))
(assert (x1065 x42))
(assert (= x132 (or x93 (and (not x834) x518))))
(assert (x1065 x793))
(assert (= (and (not x722) x331) x747))
(assert (= x482 (and x666 (not x1011))))
(assert (x1065 x551))
(assert (x1065 x71))
(assert (x1065 x651))
(assert (= (+ 1 (x102 x1174)) (x102 (x1211 x1174 1))))
(assert (= x1186 (=> (and (and (or (and x1098 (and (= x1204 (x972 x496)) (= (x3 (x276 x413) (x1192 1) 0) x496) (= 0 x158) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1204) (not (> 1 x1204)) (= x31 (x685 (- x1204 1))) (= x937 0) (= x66 x1069) (<= 0 x1204) (= x66 (x429 (+ x31 1))))) (and (not x1098) (= x1069 0))) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (<= 0 x183) (= x183 (x972 x160)) (= (x232 (x276 x400)) x993) (>= 1461501637330902918203684832716283019655932542975 x413) (= (x3 (x276 x413) (x1192 1) 0) x160) (= 0 x55) (= x275 0) (not (> 1729973928 x445)) (= (not (= 0 x183)) x1098) (= x445 1729973928) (< 0 x993))) (= x270 x413)) x1341)))
(assert (x1065 x1213))
(assert (x1065 x852))
(assert (x1065 x1069))
(assert (= (=> (and (>= x134 0) (= (div (mod (- (x102 x1345) (x102 x273)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x18) (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1099 (= x273 (x642 (x1192 0) 0)) (= x1099 (< x134 1461501637330902918203684832716283019655932542975)) (= x531 (not (< 224 x544))) (= x134 (x652 x1345))) (and x531 x340)) x1120))
(assert (= x1282 x545))
(assert (x1065 x70))
(assert (x1065 x1067))
(assert (x1065 x745))
(assert (x1065 x197))
(assert (= (x102 (x1192 954915356)) 954915356))
(assert (x1065 x1239))
(assert (= (=> (and (and (not (> 1729973928 x449)) (= x260 1) (= (x685 (- x1168 x260)) x89) (> x1311 0) (not (= 2429653569 x449)) (= x516 (= 0 x510)) (= 3686129278 x449) (= x631 x1168) (not (= 1729973928 x449)) (not (= 2485876314 x449)) (= x89 x1239) (= x1311 (x232 (x276 x400))) (= 0 x1332) (= x661 0)) (and (= x868 128) (= x812 x631) (= x812 (x376 128)) (= x137 128))) (and (=> x516 x218) (=> (and (not x516) (and (= (x652 x1174) x1296) x736 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1296) (= x28 (x429 (+ x1140 160))) (= x1174 (x642 (x1192 0) 0)) (= x751 (> x28 192)) (= x1210 (x1211 x1174 1)) (= x1140 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x985 (x642 (x1192 0) 0)) (>= x1296 0) (= x736 (< x1296 1461501637330902918203684832716283019655932542975)) (= (div (mod (- (x102 x1174) (x102 x985)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x7))) (and (=> (not x751) x274) (=> x751 x446))))) x1260))
(assert (x1065 x1246))
(assert (=> (<= x1300 10000) (= (x276 x1300) (x1192 x1300))))
(assert (= (x102 (x1211 x307 x1293)) (+ (x102 x307) x1293)))
(assert (x1065 x1289))
(assert (=> (<= x1195 10000) (= (x1192 x1195) (x276 x1195))))
(assert (= x460 (=> (and (and (= x1148 128) (= x419 x435) (= x419 (x151 128)) (= 128 x79)) (and (not (= x162 1729973928)) (= x866 (x232 (x276 x400))) (= x1247 0) (= x162 3686129278) (not (> 1729973928 x162)) (= x808 0) (= x435 x125) (not (= x162 2485876314)) (= (x685 (- x125 x752)) x71) (> x866 0) (= x1257 (= 0 x510)) (= x811 x71) (= x752 1) (not (= 2429653569 x162)))) (and (=> (and (not x1257) (and (= (x652 x942) x128) (>= x128 0) x829 (= x479 (< 192 x13)) (= x610 (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x849 (x1211 x942 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x128) (= x201 (x642 (x1192 0) 0)) (= (div (mod (- (x102 x942) (x102 x201)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x976) (= x829 (< x128 1461501637330902918203684832716283019655932542975)) (= (x642 (x1192 0) 0) x942) (= x13 (x429 (+ 160 x610))))) (and (=> x479 x244) (=> (not x479) x584))) (=> x1257 x4)))))
(assert (= x1151 (x276 (x102 x1151))))
(assert (= (x102 (x1192 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (+ x249 (x102 x1149)) (x102 (x1211 x1149 x249))))
(assert (x1065 x1010))
(assert (x1065 x733))
(assert (x1065 x381))
(assert (x1065 x417))
(assert (x1065 x728))
(assert (= (or x109 x608) x114))
(assert (= (x1192 1572751336) (x276 1572751336)))
(assert (x1065 x657))
(assert (x1065 x704))
(assert (= (and x999 x1238) x1085))
(assert (x1065 x1258))
(assert (= x184 (and x1086 x412)))
(assert (= (=> (and (and (= (x341 128) x682) (= x955 x682) (= 128 x119) (= x69 128)) (and (= 0 x1166) (= x671 0) (not (> 1729973928 x1096)) (< 0 x998) (= x955 x1323) (not (= x1096 2429653569)) (= x459 1) (= (= 0 x510) x939) (= x1096 3686129278) (= x24 x457) (not (= 2485876314 x1096)) (= (x685 (- x1323 x459)) x24) (not (= x1096 1729973928)) (= (x232 (x276 x400)) x998))) (and (=> (and (not x939) (and (= (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x601) x785 (= (> x208 192) x734) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x706) (= x253 (x642 (x1192 0) 0)) (= x785 (< x706 1461501637330902918203684832716283019655932542975)) (= (div (mod (- (x102 x253) (x102 x236)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x703) (= x236 (x642 (x1192 0) 0)) (= x706 (x652 x253)) (= x742 (x1211 x253 1)) (= (x429 (+ 160 x601)) x208) (>= x706 0))) (and (=> x734 x596) (=> (not x734) x166))) (=> x939 x689))) x1052))
(assert (= x608 (and x198 (not x383))))
(assert (= x741 (and x1234 x898)))
(assert (x1065 x790))
(assert (= x1060 (or x86 x167)))
(assert (x1065 x974))
(assert (x1065 x301))
(assert (x1065 x872))
(assert (= x182 (=> (and (= x1195 x60) (and (and (= 0 x436) (= 1729973928 x57) (= 0 x1006) (>= 1461501637330902918203684832716283019655932542975 x1195) (not (> 1729973928 x57)) (= x852 (x972 x303)) (= (not (= x852 0)) x6) (= (x232 (x276 x400)) x922) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x852) (<= 0 x852) (= x303 (x3 (x276 x1195) (x1192 1) 0)) (< 0 x922)) (or (and (and (= x592 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x302) (>= x302 0) (= (x429 (+ x1197 1)) x220) (= (x3 (x276 x1195) (x1192 1) 0) x80) (not (> 1 x302)) (= x1334 x220) (= x302 (x972 x80)) (= (x685 (- x302 1)) x1197) (= 0 x548)) x6) (and (= x1334 0) (not x6))))) x759)))
(assert (x1065 x248))
(assert (x1065 x1266))
(assert (= (x102 (x1211 x334 x154)) (+ x154 (x102 x334))))
(assert (= x148 x740))
(assert (x1065 x925))
(assert (= (=> (and (and (= x1185 128) (= 128 x774) (= x417 x284) (= x284 (x697 128))) (and (> x155 0) (= x1046 x417) (= 0 x168) (= 3686129278 x929) (= (x232 (x276 x400)) x155) (= x670 (= x510 0)) (not (= x929 1729973928)) (= x793 (x685 (- x1046 x1138))) (not (> 1729973928 x929)) (not (= x929 2429653569)) (not (= 2485876314 x929)) (= x600 0) (= x989 x793) (= 1 x1138))) (and (=> x670 x1136) (=> (and (and (= x280 (x642 (x1192 0) 0)) (= (x642 (x1192 0) 0) x420) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x558) x540 (= (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1103) (<= 0 x558) (= (x1211 x280 1) x654) (= (div (mod (- (x102 x280) (x102 x420)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x569) (= x540 (< x558 1461501637330902918203684832716283019655932542975)) (= x1350 (x429 (+ 160 x1103))) (= x558 (x652 x280)) (= x968 (> x1350 192))) (not x670)) (and (=> x968 x329) (=> (not x968) x1344))))) x281))
(assert (= (=> (and (and (and (and (> 1729973928 x1241) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x118) (not (= x1241 701022898)) (= x118 (x972 x1047)) (= (x232 (x276 x400)) x59) (<= 0 x118) (= (and x122 x58) x106) (= x598 0) (= x428 x957) (= x437 (ite x335 1 0)) (= (not (= 0 x221)) x851) (= x851 x122) (not (= 1250999895 x1241)) (not (= x1241 954915356)) (= x335 (not x947)) (<= x957 1461501637330902918203684832716283019655932542975) (= x1047 (x3 (x276 x957) (x1192 1) 0)) (= (not x432) x947) (> x59 0) (= 0 x44) (= (not (= 0 x118)) x432) (= x1241 1572751336)) (and (and (= x920 x135) (= x375 0) (= x192 (and x106 x920)) (not (> 1729973928 x757)) (= x152 x1273) (<= x152 1461501637330902918203684832716283019655932542975) (= 1729973928 x757) (>= x1124 0) (= x135 (not (= 0 x437))) (= x1124 (x972 x953)) (= (x3 (x276 x152) (x1192 1) 0) x953) (> x816 0) (<= x1124 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1170 0) (= (not (= 0 x1124)) x8) (= (x232 (x276 x400)) x816)) (or (and (not x8) (= x224 0)) (and (and (= (x429 (+ x1318 1)) x517) (= 0 x1272) (= x517 x224) (<= x1274 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x972 x876) x1274) (= 0 x555) (= x1318 (x685 (- x1274 1))) (not (< x1274 1)) (= x876 (x3 (x276 x152) (x1192 1) 0)) (<= 0 x1274)) x8)))) (and (= (ite x348 1 0) x221) (= x353 0) (= (not (= 0 x712)) x1314) (< x721 1729973928) (= x1290 x428) (> x1262 0) (<= x712 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 954915356 x721)) (= x1262 (x232 (x276 x400))) (not (= x721 701022898)) (= x348 (not x530)) (= x1273 x407) (= (= x1290 x397) x196) (= (x3 (x276 x407) (x1192 1) 0) x291) (= x428 x903) (>= 1461501637330902918203684832716283019655932542975 x407) (= x1273 x1182) (= x530 (not x1314)) (= 1572751336 x721) (= (x972 x291) x712) (= x319 (or (not x837) x196)) (= 0 x1113) (= (not (= x1182 x903)) x58) (>= x712 0) x319 (not (= x721 1250999895)) (= x807 x397))) (= x807 x726)) x509) x191))
(assert (x1065 x1264))
(assert (x1065 x413))
(assert (= x779 (x102 (x276 x779))))
(assert (x1065 x1143))
(assert (x1065 x893))
(assert (x1065 x239))
(assert (x1065 x842))
(assert (= x870 x1343))
(assert (x1065 x156))
(assert (= (and (not x468) x120) x765))
(assert (x1065 x677))
(assert (x1065 x1043))
(assert (x1065 x569))
(assert (= x82 (=> (and (= (x652 x368) x580) (= x813 (x642 (x1192 0) 0)) (<= x580 115792089237316195423570985008687907853269984665640564039457584007913129639935) x297 (= x1141 (not (> x909 224))) (>= x580 0) (= (> 1461501637330902918203684832716283019655932542975 x580) x297) (= (div (mod (- (x102 x368) (x102 x813)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x695)) (and x1141 x1282))))
(assert (= x924 (=> (and (or (and (and (= 0 x822) (= x1249 (x642 (x1192 0) 0)) (<= x247 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x1117 x510) (= x247 (x652 x342)) (= (< x247 1461501637330902918203684832716283019655932542975) x144) (<= 0 x247) (= (x1211 x1249 x971) x342) (= 0 x200) (= x1195 x247) x144) x770) (and (= x1195 0) (not x770))) (and (= x738 128) (= (> x1265 x971) x770) (= x1265 (x906 128)) (= x189 128))) x182)))
(assert (x1065 x349))
(assert (x1065 x1298))
(assert (x1065 x726))
(assert (x1065 x850))
(assert (= x1313 (x276 (x102 x1313))))
(assert (x1065 x807))
(assert (= (or x1297 (and x211 (not x1012))) x263))
(assert (x1065 x339))
(assert (= x692 (x276 (x102 x692))))
(assert (=> (>= 10000 x407) (= (x1192 x407) (x276 x407))))
(assert (= x936 (and x482 x861)))
(assert (x1065 x703))
(assert (x1065 x1055))
(assert (= x532 (x276 (x102 x532))))
(assert (x1065 x731))
(assert (= (=> (and (= x350 (div (mod (- (x102 x1151) (x102 x1193)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (<= 0 x535) x773 (= (not (> x536 224)) x30) (= (x652 x1151) x535) (= (x642 (x1192 0) 0) x1193) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x535) (= (> 1461501637330902918203684832716283019655932542975 x535) x773)) (and x30 x171)) x88))
(assert (x1065 x1129))
(assert (x1065 x89))
(assert (x1065 x1290))
(assert (x1065 x1079))
(assert (= (+ x24 (x102 x522)) (x102 (x1211 x522 x24))))
(assert (= x393 (or (and x1287 x911) x512)))
(assert (x1065 x799))
(assert (x1065 x1111))
(assert (x1065 x47))
(assert (= x523 (and (not x1137) x566)))
(assert (x1065 x1140))
(assert (x1065 x779))
(assert (= (x276 (x102 x1073)) x1073))
(assert (= (and (not x670) x888) x500))
(assert (x1065 x486))
(assert (= (x276 (x102 x1083)) x1083))
(assert (x1065 x984))
(assert (= x1041 x839))
(assert (= (x276 (x102 x231)) x231))
(assert (x1065 x1185))
(assert (x1065 x673))
(assert (= (x276 (x102 x1078)) x1078))
(assert (= (or (and x1250 x931) x132) x101))
(assert (= x1229 (x276 (x102 x1229))))
(assert (x1065 x260))
(assert (= (x276 (x102 x207)) x207))
(assert (x1065 x1013))
(assert (= (=> (and (= x444 x1145) (and (not (= 954915356 x1212)) (= x367 (x232 (x276 x400))) (< x1212 1729973928) (= x444 x352) (not (= 701022898 x1212)) (= 0 x147) (= 1250999895 x1212) (= 0 x178) (< 0 x367) (= (= 0 x510) x716))) (and (=> x716 x545) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x256) (= (div (mod (- (x102 x1301) (x102 x896)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x316) (= x478 (> x909 192)) (= (x642 (x1192 0) 0) x1301) (= (< x256 1461501637330902918203684832716283019655932542975) x242) (= (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x634) (= x896 (x642 (x1192 0) 0)) x242 (= (x652 x1301) x256) (= x909 (x429 (+ 160 x634))) (<= 0 x256) (= x368 (x1211 x1301 1))) (not x716)) (and (=> (not x478) x1282) (=> x478 x82))))) x628))
(assert (= x360 (x276 (x102 x360))))
(assert (x1065 x434))
(assert (x1065 x958))
(assert (= (and x523 x768) x578))
(assert (= x1106 (x276 (x102 x1106))))
(assert (= (=> (and (and (and (= x883 x428) (not (= x173 701022898)) (= x800 (not x108)) (= x1226 (x3 (x276 x883) (x1192 1) 0)) (<= x372 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1016 0) (> 1729973928 x173) (not (= 1250999895 x173)) (= 0 x471) (<= x883 1461501637330902918203684832716283019655932542975) (= x982 (x232 (x276 x400))) (not (= x173 954915356)) (= x1152 x796) (<= 0 x372) (= (ite x800 1 0) x733) (= (not x402) x108) (< 0 x982) (= x402 (not (= x372 0))) (= x372 (x972 x1226)) (= x173 1572751336) (= (not (= x104 x1152)) x225)) (and (= 1250999895 x1264) (not (= x1264 954915356)) (= x1081 (x232 (x276 x400))) (= 0 x505) (= x1158 (and x456 x225)) (= x456 x157) (= (= x510 0) x1070) (> 1729973928 x1264) (not (= 701022898 x1264)) (> x1081 0) (= x157 (not (= x733 0))) (= 0 x1255))) (= x796 x1306)) (and (=> (and (not x1070) (and (= (x429 (+ x677 160)) x98) (= x411 (x642 (x1192 0) 0)) (= (div (mod (- (x102 x411) (x102 x669)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1298) (= x26 (x652 x411)) (= (> 1461501637330902918203684832716283019655932542975 x26) x794) (= x827 (< 192 x98)) x794 (>= x26 0) (= (x642 (x1192 0) 0) x669) (= x677 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1211 x411 1) x19) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x26))) (and (=> x827 x556) (=> (not x827) x251))) (=> x1070 x77))) x760))
(assert (= x446 (=> (and (= x163 (x652 x1210)) (= (div (mod (- (x102 x1210) (x102 x177)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1066) x1122 (= x1063 (not (> x28 224))) (= (> 1461501637330902918203684832716283019655932542975 x163) x1122) (<= 0 x163) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x163) (= (x642 (x1192 0) 0) x177)) (and x1063 x274))))
(assert (= x1076 (or (and (not x412) x1086) x184)))
(assert (x1065 x1096))
(assert (= (and x101 (not x385)) x361))
(assert (x1065 x787))
(assert (= (and x873 (not x240)) x604))
(assert (= (=> (and (= x1105 (not (< 224 x222))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x897) x1157 (= (> 1461501637330902918203684832716283019655932542975 x897) x1157) (>= x897 0) (= x264 (x642 (x1192 0) 0)) (= (div (mod (- (x102 x650) (x102 x264)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x382) (= (x652 x650) x897)) (and x1105 x740)) x1183))
(assert (x1065 x822))
(assert (= (and x366 (not x1068)) x633))
(assert (x1065 x1333))
(assert (x1065 x707))
(assert (= (or (and x311 x490) x263) x288))
(assert (x1065 x90))
(assert (x1065 x1339))
(assert (=> (<= x313 10000) (= (x1192 x313) (x276 x313))))
(assert (= x110 (and x798 (not x770))))
(assert (x1065 x1216))
(assert (x1065 x506))
(assert (x1065 x791))
(assert (= (x102 (x276 x883)) x883))
(assert (x1065 x561))
(assert (= (x102 (x1211 x583 1)) (+ (x102 x583) 1)))
(assert (x1065 x557))
(assert (x1065 x786))
(assert (x1065 x1195))
(assert (= (and (not x1242) x103) x880))
(assert (x1065 x864))
(assert (x1065 x502))
(assert (= (and x240 x873) x1110))
(assert (x1065 x820))
(assert (= x180 (x276 (x102 x180))))
(assert (x1065 x1148))
(assert (= (or (and x142 (not x827)) x1187) x746))
(assert (x1065 x1072))
(assert (x1065 x464))
(assert (x1065 x1350))
(assert (= (x102 (x276 x1300)) x1300))
(assert (x1065 x933))
(assert (x1065 x744))
(assert (= x460 x1171))
(assert (x1065 x95))
(assert (x1065 x1071))
(assert (x1065 x1145))
(assert (x1065 x854))
(assert (= x556 (=> (and (= (< x339 1461501637330902918203684832716283019655932542975) x863) (>= x339 0) (= x339 (x652 x19)) (= (div (mod (- (x102 x19) (x102 x847)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1015) (<= x339 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x847 (x642 (x1192 0) 0)) (= x564 (not (< 224 x98))) x863) (and x564 x251))))
(assert (x1065 x923))
(assert (x1065 x547))
(assert (x1065 x1221))
(assert (= (+ (x102 x934) x581) (x102 (x1211 x934 x581))))
(assert (x1065 x427))
(assert (= x264 (x276 (x102 x264))))
(assert (= x34 (and (not x620) x778)))
(assert (= (or (and (not x1128) x880) x763) x1084))
(assert (x1065 x49))
(assert (= x924 x1348))
(assert (x1065 x189))
(assert (= x345 (and x1039 x153)))
(assert (x1065 x195))
(assert (x1065 x702))
(assert (= x226 (and (not x999) x1238)))
(assert (x1065 x163))
(assert (x1065 x255))
(assert (x1065 x900))
(assert (x1065 x1066))
(assert (x1065 x591))
(assert (= (or x1342 x966) x944))
(assert (= (x276 (x102 x177)) x177))
(assert (= x815 (and (not x1257) x533)))
(assert (= x1033 (=> (and (= x149 x1071) (and (not (= x710 701022898)) (> 1729973928 x710) (not (= x710 954915356)) (= x1071 x958) (= x635 0) (= x710 1250999895) (> x704 0) (= (x232 (x276 x400)) x704) (= x620 (= 0 x510)) (= x694 0))) (and (=> x620 x1052) (=> (and (and (= x767 (< x956 1461501637330902918203684832716283019655932542975)) (= x1151 (x1211 x625 1)) (= x536 (x429 (+ 160 x732))) (= x164 (x642 (x1192 0) 0)) (<= 0 x956) x767 (= x625 (x642 (x1192 0) 0)) (= (div (mod (- (x102 x625) (x102 x164)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x973) (= x214 (< 192 x536)) (= x732 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x956) (= x956 (x652 x625))) (not x620)) (and (=> (not x214) x171) (=> x214 x88)))))))
(assert (= x159 (x276 (x102 x159))))
(assert (x1065 x612))
(assert (x1065 x1315))
(assert (x1065 x1056))
(assert (x1065 x1288))
(assert (x1065 x209))
(assert (=> (<= x400 10000) (= (x276 x400) (x1192 x400))))
(assert (x1065 x694))
(assert (= x1004 (=> (and (= x223 (x685 (- x510 1))) (= x343 (x685 (- x510 1))) (= x485 x223) (= (x1211 x1275 x343) x1312) (= x67 1) (< 0 x510) (= (x3 (x276 x779) (x1192 1) 0) x1075) (= (x642 (x1192 0) 0) x1275)) x1220)))
(assert (= (+ (x102 x462) 1) (x102 (x1211 x462 1))))
(assert (x1065 x1283))
(assert (x1065 x1295))
(assert (x1065 x221))
(assert (x1065 x499))
(assert (x1065 x1114))
(assert (x1065 x270))
(assert (= (x276 (x102 x420)) x420))
(assert (x1065 x1218))
(assert (x1065 x1093))
(assert (x1065 x698))
(assert (= x966 (or x936 x1107)))
(assert (x867 x1252))
(assert (x1065 x1286))
(assert (x1065 x903))
(assert (= x237 (x276 (x102 x237))))
(assert (x1065 x738))
(assert (x1065 x1019))
(assert (= (x102 (x1211 x409 x47)) (+ x47 (x102 x409))))
(assert (= (x1192 1729973928) (x276 1729973928)))
(assert (x1065 x881))
(assert (= x595 (and x1346 x1098)))
(assert (x1065 x1292))
(assert (x1065 x558))
(assert (= x1088 x1123))
(assert (x1065 x403))
(assert (= x4 x584))
(assert (= x123 (=> (and (and (and (= (x3 (x276 x45) (x1192 1) 0) x988) (= 0 x1339) (= x252 (x972 x988)) (= 1729973928 x554) (= x916 0) (<= x252 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x15 (not (= 0 x252))) (not (< x554 1729973928)) (= (x232 (x276 x400)) x1129) (<= x45 1461501637330902918203684832716283019655932542975) (< 0 x1129) (>= x252 0)) (or (and x15 (and (= 0 x1216) (= 0 x1125) (= x874 (x972 x1025)) (= (x685 (- x874 1)) x1222) (not (< x874 1)) (<= 0 x874) (= (x3 (x276 x45) (x1192 1) 0) x1025) (= x859 (x429 (+ x1222 1))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x874) (= x1277 x859))) (and (= 0 x1277) (not x15)))) (= x45 x43)) x219)))
(assert (= x1174 (x276 (x102 x1174))))
(assert (= (x276 (x102 x1032)) x1032))
(assert (x1065 x117))
(assert (x1065 x607))
(assert (x1065 x527))
(assert (x1065 x217))
(assert (= x615 (and x944 x1051)))
(assert (x1065 x178))
(assert (x1065 x254))
(assert (x1065 x598))
(assert (= x641 (or (and x888 x670) x766)))
(assert (= (and (not x894) x1089) x426))
(assert (x1065 x338))
(assert (= x346 (=> (and (= x551 x1288) (and (= x213 1250999895) (= x777 (x232 (x276 x400))) x1087 (= (not (= x498 x111)) x1049) (= x1273 x250) (= 0 x884) (= (or (not x192) x1049) x1087) (= 0 x1143) (not (= x213 954915356)) (> 1729973928 x213) (not (= x213 701022898)) (= x1242 (= x510 0)) (= x498 x1288) (> x777 0))) (and (=> (and (not x1242) (and (= (div (mod (- (x102 x396) (x102 x1030)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x68) (= (> x854 192) x1128) (<= x843 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1327) (= x1313 (x1211 x396 1)) (= x854 (x429 (+ x1327 160))) (>= x843 0) (= (x652 x396) x843) (= (< x843 1461501637330902918203684832716283019655932542975) x1127) (= (x642 (x1192 0) 0) x396) x1127 (= (x642 (x1192 0) 0) x1030))) (and (=> (not x1128) x572) (=> x1128 x333))) (=> x1242 x761)))))
(assert (= x1195 (x102 (x276 x1195))))
(assert (x1065 x418))
(assert (x867 x809))
(assert (= x166 x689))
(assert (x1065 x362))
(assert (x1065 x283))
(assert (x1065 x119))
(assert (x1065 x647))
(assert (x1065 x1300))
(assert (= (=> (and (>= x248 0) (= x739 (not (> x399 224))) (= x248 (x652 x819)) (= (div (mod (- (x102 x819) (x102 x701)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x665) (= x1091 (< x248 1461501637330902918203684832716283019655932542975)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x248) x1091 (= (x642 (x1192 0) 0) x701)) (and x739 x602)) x190))
(assert (x1065 x712))
(assert (x1065 x32))
(assert (= x1101 (=> (and (= (div (mod (- (x102 x1259) (x102 x83)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1286) x552 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1227) (>= x1227 0) (= x1227 (x652 x1259)) (= x83 (x642 (x1192 0) 0)) (= (not (< 224 x562)) x727) (= (> 1461501637330902918203684832716283019655932542975 x1227) x552)) (and x727 x1123))))
(assert (= (+ (x102 x336) 1) (x102 (x1211 x336 1))))
(assert (x1065 x229))
(assert (x1065 x379))
(assert (= x1233 (and x1060 x8)))
(assert (x1065 x130))
(assert (= (and x1209 (not x1070)) x142))
(assert (= (+ (x102 x573) x1317) (x102 (x1211 x573 x1317))))
(assert (= (x276 (x102 x336)) x336))
(assert (x867 x400))
(assert (= (and x6 x380) x1090))
(assert (x1065 x1223))
(assert (x1065 x1325))
(assert (x1065 x354))
(assert (=> (<= x130 10000) (= (x1192 x130) (x276 x130))))
(assert (x867 x1300))
(assert (x1065 x139))
(assert (= (+ (x102 x396) 1) (x102 (x1211 x396 1))))
(assert (x1065 x1317))
(assert (x1065 x1303))
(assert (x1065 x143))
(assert (= (or (and x500 (not x968)) x1179) x766))
(assert (x1065 x36))
(assert (x1065 x308))
(assert (= (x276 (x102 x257)) x257))
(assert (x1065 x632))
(assert (x1065 x66))
(assert (= (or x1084 (and x103 x1242)) x305))
(assert (x1065 x152))
(assert (= x825 (x276 (x102 x825))))
(assert (x1065 x664))
(assert (x1065 x203))
(assert (= x380 (or x110 x425)))
(assert (x1065 x902))
(assert (= (x276 3686129278) (x1192 3686129278)))
(assert (x1065 x884))
(assert (= x518 (and (not x931) x1250)))
(assert (x1065 x125))
(assert (x1065 x570))
(assert (x1065 x623))
(assert (x1065 x43))
(assert (= (and (not x46) x1254) x775))
(assert (x1065 x955))
(assert (= x4 (=> (and (or (and (not x926) (= x809 0)) (and x926 (and (= x49 0) (= (x652 x938) x330) (= x1181 (< x330 1461501637330902918203684832716283019655932542975)) (= (x642 (x1192 0) 0) x853) (= x938 (x1211 x853 x71)) (= 0 x452) (= x809 x330) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x330) x1181 (< x811 x510) (<= 0 x330)))) (and (= 128 x289) (= x848 (x317 128)) (= (< x71 x848) x926) (= 128 x820))) x1146)))
(assert (x1065 x314))
(assert (= (x102 (x1211 x853 x71)) (+ x71 (x102 x853))))
(assert (= x1136 (=> (and (and (= x842 128) (= (< x793 x418) x1057) (= (x1121 128) x418) (= 128 x395)) (or (and (= 0 x560) (not x1057)) (and x1057 (and (<= 0 x1024) (= (< x1024 1461501637330902918203684832716283019655932542975) x965) x965 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1024) (= x1024 x560) (= 0 x908) (= x398 (x642 (x1192 0) 0)) (< x989 x510) (= 0 x762) (= x1135 (x1211 x398 x793)) (= (x652 x1135) x1024))))) x856)))
(assert (x1065 x630))
(assert (x1065 x941))
(assert (x1065 x9))
(assert (x1065 x690))
(assert (x1065 x168))
(assert (= (x102 (x1192 1572751336)) 1572751336))
(assert (x1065 x436))
(assert (x1065 x367))
(assert (x1065 x477))
(assert (= (+ (x102 x411) 1) (x102 (x1211 x411 1))))
(assert (= (and (not x1324) x37) x978))
(assert (x1065 x316))
(assert (= (or (and (not x768) x523) x578) x585))
(assert (x1065 x1270))
(assert (x1065 x783))
(assert (x1065 x175))
(assert (= (or (and x46 x1254) x1177) x1207))
(assert (= (or x979 x1233) x153))
(assert (= (x102 (x1211 x492 1)) (+ (x102 x492) 1)))
(assert (x1065 x777))
(assert (= (x276 (x102 x201)) x201))
(assert (x1065 x996))
(assert (= (x276 (x102 x819)) x819))
(assert (= (and x23 x930) x546))
(assert (x1065 x1006))
(assert (x1065 x1232))
(assert (= (=> (and (and (or (and (= x551 0) (not x1039)) (and x1039 (and (not (< x73 1)) (>= x73 0) (= (x685 (- x73 1)) x199) (= x525 (x429 (+ x199 1))) (= (x3 (x276 x728) (x1192 1) 0) x161) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x73) (= x521 0) (= (x972 x161) x73) (= 0 x193) (= x551 x525)))) (and (<= x728 1461501637330902918203684832716283019655932542975) (= x111 x1029) (<= x1223 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x232 (x276 x400)) x1258) (> x1258 0) (= x1039 (not (= 0 x1223))) (= x428 x728) (= x390 0) (not (< x1349 1729973928)) (>= x1223 0) (= x349 0) (= x1349 1729973928) (= (x3 (x276 x728) (x1192 1) 0) x1230) (= (x972 x1230) x1223))) (= x1029 x224)) x346) x509))
(assert (x1065 x100))
(assert (x1065 x471))
(assert (= (x276 (x102 x847)) x847))
(assert (x1065 x222))
(assert (x1065 x404))
(assert (= x650 (x276 (x102 x650))))
(assert (x1065 x848))
(assert (= (x276 (x102 x414)) x414))
(assert (x867 x560))
(assert (x1065 x719))
(assert (= x513 (x276 (x102 x513))))
(assert (x1065 x430))
(assert (x1065 x183))
(assert (x1065 x1224))
(assert (x1065 x85))
(assert (x1065 x592))
(assert (x867 x1284))
(assert (x1065 x875))
(assert (x1065 x594))
(assert (= x896 (x276 (x102 x896))))
(assert (= x648 (or x121 (and x649 (not x478)))))
(assert (x1065 x549))
(assert (x1065 x687))
(assert (x1065 x439))
(assert (x1065 x616))
(assert (x1065 x1214))
(assert (x1065 x208))
(assert (= x99 (and x775 x322)))
(assert (x1065 x7))
(assert (= (x102 (x276 x407)) x407))
(assert (= (x276 (x102 x462)) x462))
(assert (x867 x356))
(assert (x1065 x353))
(assert (= x1220 (=> (and (and (= x858 (= x67 0)) (= x899 (not x858)) (= x474 (ite x899 1 0))) (and (and (not (= x344 1250999895)) (>= x377 0) (= 1572751336 x344) (<= x377 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (not x1147) x1225) (= x1253 (x3 (x276 x356) (x1192 1) 0)) (= (x232 (x276 x400)) x1028) (< 0 x1028) (not (= x344 954915356)) (= (not x1225) x233) (>= 1461501637330902918203684832716283019655932542975 x356) (= (x1044 x1253) x377) (= 0 x588) (not (= 701022898 x344)) (> 1729973928 x344) (= x1147 (not (= 0 x377))) (= x434 0) (= x428 x356) (= (ite x233 1 0) x374)) (and (or (and x1051 (and (= 0 x668) (= x1303 0) (<= 0 x594) (= x271 (x3 (x276 x1284) (x1192 1) 0)) (= x286 x139) (= x286 (x429 (+ x301 1))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x594) (= x594 (x1044 x271)) (= x301 (x685 (- x594 1))) (not (> 1 x594)))) (and (= 0 x139) (not x1051))) (and (not (> 1729973928 x826)) (= x1051 (not (= x488 0))) (= x204 (not (= 0 x374))) (< 0 x700) (= (x1044 x750) x488) (= (x3 (x276 x1284) (x1192 1) 0) x750) (>= 1461501637330902918203684832716283019655932542975 x1284) (= (x232 (x276 x400)) x700) (= 0 x1112) (= x204 x1018) (= 0 x1184) (= x1284 x428) (>= x488 0) (= 1729973928 x826) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x488))))) x1280)))
(assert (x1065 x544))
(assert (= (x276 (x102 x849)) x849))
(assert (x1065 x1126))
(assert (= x1159 x1281))
(assert (= x862 (=> (and (= x170 x1221) (and (= 0 x454) (= x1287 (= x510 0)) (> x403 0) (= x403 (x232 (x276 x400))) (not (= x296 2429653569)) (not (= 2485876314 x296)) (= x296 3686129278) (= x614 0) (= 1 x621) (not (> 1729973928 x296)) (= x1293 x745) (not (= 1729973928 x296)) (= x1293 (x685 (- x1056 x621))) (= x1056 x170))) (and (=> (and (not x1287) (and x663 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x386) (= x94 (div (mod (- (x102 x1134) (x102 x949)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x1134 (x642 (x1192 0) 0)) (= (x1211 x1134 1) x650) (= (x429 (+ 160 x203)) x222) (= x203 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= x386 0) (= (< x386 1461501637330902918203684832716283019655932542975) x663) (= x1200 (> x222 192)) (= (x652 x1134) x386) (= x949 (x642 (x1192 0) 0)))) (and (=> (not x1200) x740) (=> x1200 x1183))) (=> x1287 x148)))))
(assert (x1065 x989))
(assert (x1065 x603))
(assert (= (x102 (x276 x400)) x400))
(assert (= (or x604 x1110) x753))
(assert (= x526 x846))
(assert (= (x102 (x1211 x1134 1)) (+ 1 (x102 x1134))))
(assert (= x228 (or (and x753 x716) x648)))
(assert (x1065 x146))
(assert (x1065 x1273))
(assert (= x1036 (x276 (x102 x1036))))
(assert (= x1089 (or x216 x765)))
(assert (= (or x952 (and (not x734) x1309)) x438))
(assert (x1065 x421))
(assert (= x172 (or x640 (and (not x214) x34))))
(assert (x1065 x252))
(assert (x1065 x487))
(assert (= x789 (x276 (x102 x789))))
(assert (x1065 x1319))
(assert (= (and (not x516) x288) x1203))
(assert (x1065 x1278))
(assert (x1065 x1256))
(assert (= x967 (and x964 (not x15))))
(assert (= (x276 (x102 x942)) x942))
(assert (x1065 x945))
(assert (= (x276 (x102 x347)) x347))
(assert (x1065 x890))
(assert (x1065 x937))
(assert (x1065 x660))
(assert (x1065 x24))
(assert (x1065 x1175))
(assert (x1065 x1054))
(assert (x1065 x485))
(assert (x1065 x1124))
(assert (= x311 (or x967 x266)))
(assert (x1065 x1201))
(assert (x1065 x1166))
(assert (x1065 x324))
(assert (= x167 (and x393 x29)))
(assert (x1065 x1334))
(assert (x1065 x145))
(assert (= (x276 (x102 x985)) x985))
(assert (= x928 (=> (and (= x405 x795) (and (= x576 x405) (= x463 (or x1243 (not x1018))) (= (= x529 x576) x1243) (= x428 x529))) x463)))
(assert (x1065 x129))
(assert (x1065 x644))
(assert (= x1321 (and (not x1005) x92)))
(assert (= (=> (and (= x1334 x1304) (and (= x1304 x792) (= x1307 0) (= x1266 0) (= (= 0 x510) x1324) (> x1191 0) (= x581 (x685 (- x792 x115))) (= 3686129278 x76) (= x755 x581) (= 1 x115) (= x1191 (x232 (x276 x400))) (not (= 2485876314 x76)) (not (= x76 1729973928)) (not (= 2429653569 x76)) (not (> 1729973928 x76)))) (and (=> x1324 x1159) (=> (and (not x1324) (and (= x51 (x642 (x1192 0) 0)) (<= x519 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1003 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x429 (+ x1003 160)) x713) (= (x642 (x1192 0) 0) x159) (= (x1211 x159 1) x25) (= x1001 (< 192 x713)) (= (div (mod (- (x102 x159) (x102 x51)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x627) (= x519 (x652 x159)) (= (> 1461501637330902918203684832716283019655932542975 x519) x1330) x1330 (<= 0 x519))) (and (=> (not x1001) x1281) (=> x1001 x1331))))) x759))
(assert (x1065 x200))
(assert (x1065 x808))
(assert (x1065 x921))
(assert (x1065 x250))
(assert (= (x1192 2485876314) (x276 2485876314)))
(assert (x1065 x1202))
(assert (x1065 x298))
(assert (= (=> (and (or (and (and (= (x1211 x409 x47) x384) (<= x1248 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x210) (< x653 x510) (= x1248 (x652 x384)) (= (x642 (x1192 0) 0) x409) (= x1248 x45) x806 (<= 0 x1248) (= (> 1461501637330902918203684832716283019655932542975 x1248) x806) (= x175 0)) x385) (and (not x385) (= 0 x45))) (and (= (x1014 128) x1337) (= x36 128) (= x385 (< x47 x1337)) (= 128 x986))) x123) x526))
(assert (= x1259 (x276 (x102 x1259))))
(assert (x867 x883))
(assert (= x1269 (x276 (x102 x1269))))
(assert (= x216 (and x468 x120)))
(assert (= x120 (or (and x566 x1137) x585)))
(assert (x1065 x869))
(assert (x1065 x323))
(assert (= (x276 (x102 x701)) x701))
(assert (x1065 x155))
(assert (= (and x1321 x991) x534))
(assert (x1065 x1168))
(assert (= x406 (and x481 (not x309))))
(assert (x1065 x661))
(assert (x1065 x1152))
(assert (x1065 x1235))
(assert (= (+ 1 (x102 x844)) (x102 (x1211 x844 1))))
(assert (x1065 x445))
(assert (= (x102 (x1192 3686129278)) 3686129278))
(assert (= x1030 (x276 (x102 x1030))))
(assert (x1065 x600))
(assert (= (x102 (x1211 x253 1)) (+ 1 (x102 x253))))
(assert (= x440 (or (and x1007 x228) x611)))
(assert (= x742 (x276 (x102 x742))))
(assert (= (x102 (x1211 x579 1)) (+ (x102 x579) 1)))
(assert (= (=> (and (= (not (< 224 x1350)) x27) (<= 0 x484) (= (x642 (x1192 0) 0) x1078) x821 (= x484 (x652 x654)) (= (> 1461501637330902918203684832716283019655932542975 x484) x821) (<= x484 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x974 (div (mod (- (x102 x654) (x102 x1078)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (and x27 x1344)) x329))
(assert (= (or x1139 x589) x666))
(assert (= x198 (or (and x722 x331) x684)))
(assert (= (+ 1 (x102 x514)) (x102 (x1211 x514 1))))
(assert (x1065 x1115))
(assert (x1065 x1349))
(assert (x1065 x868))
(assert (x1065 x811))
(assert (= x265 (or x1285 (and (not x568) x633))))
(assert (= x211 (and x311 (not x490))))
(assert (= (x276 (x102 x1301)) x1301))
(assert (= (=> (and (= (div (mod (- (x102 x25) (x102 x513)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1201) (= (x652 x25) x1214) (= (> 1461501637330902918203684832716283019655932542975 x1214) x950) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1214) (<= 0 x1214) (= (not (< 224 x713)) x629) x950 (= (x642 (x1192 0) 0) x513)) (and x1281 x629)) x1331))
(assert (x1065 x909))
(assert (x1065 x1104))
(assert (= (or (and (not x1200) x453) x1326) x512))
(assert (x867 x957))
(assert (x1065 x1125))
(assert (x1065 x732))
(assert (x1065 x258))
(assert (x1065 x695))
(assert (= x493 (and x48 x882)))
(assert (= (x276 (x102 x625)) x625))
(assert (x1065 x671))
(assert (x1065 x245))
(assert (= (=> (and (= x833 x439) (and (and (= 0 x860) (= x914 (not x63)) (< x797 1729973928) (= x63 (not (= x960 0))) (<= x960 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x797 701022898)) (= x963 (ite x1217 1 0)) (= x960 (x972 x990)) (= 0 x996) (<= x439 1461501637330902918203684832716283019655932542975) (not (= x797 1250999895)) (= x797 1572751336) (not (= 954915356 x797)) (= (x232 (x276 x400)) x543) (< 0 x543) (>= x960 0) (= (not x914) x1217) (= (x3 (x276 x439) (x1192 1) 0) x990)) (and (or (and (= 0 x149) (not x894)) (and x894 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x664) (= x1224 0) (= (x685 (- x664 1)) x875) (= x1156 (x429 (+ x875 1))) (= x149 x1156) (= 0 x788) (not (< x664 1)) (= x259 (x3 (x276 x1252) (x1192 1) 0)) (>= x664 0) (= x664 (x972 x259))))) (and (= x234 (not (= x963 0))) (= (not (= x644 0)) x894) (<= x1252 1461501637330902918203684832716283019655932542975) (= x549 0) (= (x972 x378) x644) (= 0 x1270) (= x378 (x3 (x276 x1252) (x1192 1) 0)) (not (> 1729973928 x424)) (= x234 x508) (<= x644 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x443 (and x508 x1158)) (> x872 0) (= 1729973928 x424) (= (x232 (x276 x400)) x872) (= x1252 x428) (>= x644 0))))) x1033) x1153))
(assert (= x261 (and (not x6) x380)))
(assert (x867 x728))
(assert (x1065 x737))
(assert (x1065 x306))
(assert (x1065 x755))
(assert (= (x102 (x1211 x1249 x971)) (+ (x102 x1249) x971)))
(assert (= x1219 (or x290 (and x1203 (not x751)))))
(assert (= (or x546 (and (not x23) x930)) x1261))
(assert (= (=> (and (= (< x1232 1461501637330902918203684832716283019655932542975) x107) (= (div (mod (- (x102 x180) (x102 x442)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1013) x107 (<= x1232 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x1232) (= (x652 x180) x1232) (= (x642 (x1192 0) 0) x442) (= x743 (not (> x636 224)))) (and x870 x743)) x877))
(assert (x1065 x10))
(assert (= (x276 (x102 x801)) x801))
(assert (x1065 x480))
(assert (x1065 x452))
(assert (x1065 x1271))
(assert (x1065 x1237))
(assert (x1065 x147))
(assert (= x563 (and x53 x433)))
(assert (x1065 x293))
(assert (= true x1238))
(assert (x1065 x98))
(assert (x1065 x832))
(assert (x1065 x287))
(assert (x1065 x424))
(assert (x1065 x256))
(assert (= x1050 (and x894 x1089)))
(assert (x1065 x61))
(assert (= (x276 (x102 x442)) x442))
(assert (x1065 x954))
(assert (= x236 (x276 (x102 x236))))
(assert (x1065 x210))
(assert (x1065 x913))
(assert (x1065 x559))
(assert (= (=> (and (or (and (= 0 x439) (not x468)) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1058) (< x656 x510) (= 0 x981) (= x719 0) (= (x652 x187) x1058) x855 (= x187 (x1211 x573 x1317)) (= (x642 (x1192 0) 0) x573) (= x439 x1058) (= x855 (> 1461501637330902918203684832716283019655932542975 x1058)) (>= x1058 0)) x468)) (and (= (> x129 x1317) x468) (= (x1169 128) x129) (= x447 128) (= x709 128))) x1153) x1088))
(assert (x1065 x605))
(assert (x1065 x466))
(assert (x1065 x929))
(assert (x1065 x1294))
(assert (= x109 (and x383 x198)))
(assert (x1065 x224))
(assert (x1065 x41))
(assert (x1065 x68))
(assert (x1065 x422))
(assert (= (or x226 x1085) x911))
(assert (= (x276 (x102 x802)) x802))
(assert (x1065 x1074))
(assert (= (and x385 x101) x35))
(assert (x1065 x548))
(assert (x1065 x238))
(assert (= (x276 (x102 x782)) x782))
(assert (x1065 x1165))
(assert (= x312 (and (not x1040) x127)))
(assert (x1065 x57))
(assert (x1065 x76))
(assert (x1065 x262))
(assert (x1065 x344))
(assert (x1065 x1308))
(assert (x1065 x980))
(assert (= (or x563 (and (not x53) x433)) x1160))
(assert (= x784 x1260))
(assert (x1065 x710))
(assert (x1065 x1311))
(assert (x1065 x193))
(assert (= (x102 (x1192 1250999895)) 1250999895))
(assert (x1065 x797))
(assert (x1065 x138))
(assert (x867 x1195))
(assert (x1065 x709))
(assert (= (x102 (x1192 1729973928)) 1729973928))
(assert (x1065 x1155))
(assert (x1065 x576))
(assert (x1065 x723))
(assert (x1065 x505))
(assert (x1065 x1170))
(assert (x1065 x213))
(assert (= x925 (x102 (x276 x925))))
(assert (x1065 x1332))
(assert (= x895 (or (and x865 (not x491)) x1048)))
(assert (= (and x911 (not x1287)) x453))
(assert (= (x102 (x276 x439)) x439))
(assert (x1065 x1182))
(assert (= x171 x1052))
(assert (x1065 x1058))
(assert (x1065 x918))
(assert (x1065 x1130))
(assert (x1065 x11))
(assert (x1065 x40))
(assert (= x514 (x276 (x102 x514))))
(assert (x1065 x1142))
(assert (= (x276 (x102 x253)) x253))
(assert (x1065 x1310))
(assert (= (x276 (x102 x304)) x304))
(assert (x1065 x658))
(assert (x1065 x835))
(assert (x867 x779))
(assert (= x93 (and x834 x518)))
(assert (=> (<= x883 10000) (= (x1192 x883) (x276 x883))))
(assert (x1065 x1080))
(assert (x1065 x313))
(assert (x1065 x1272))
(assert (x1065 x897))
(assert (= x396 (x276 (x102 x396))))
(assert (= (and x305 (not x803)) x1086))
(assert (= (+ x89 (x102 x674)) (x102 (x1211 x674 x89))))
(assert (x1065 x1194))
(assert (= x680 (x102 (x276 x680))))
(assert (= (x276 701022898) (x1192 701022898)))
(assert (= x572 x761))
(assert (= x804 (=> (and (= x591 x475) (and (= x997 0) (= x1068 (= x510 0)) (not (= 954915356 x1000)) (= 1250999895 x1000) (= x591 x466) (> 1729973928 x1000) (= 0 x1080) (not (= 701022898 x1000)) (> x987 0) (= (x232 (x276 x400)) x987))) (and (=> (and (and (= (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x54) (= x462 (x642 (x1192 0) 0)) (= x672 (> 1461501637330902918203684832716283019655932542975 x410)) (>= x410 0) x672 (<= x410 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x889 (x642 (x1192 0) 0)) (= (div (mod (- (x102 x462) (x102 x889)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x927) (= (x429 (+ x54 160)) x636) (= x568 (> x636 192)) (= x410 (x652 x462)) (= (x1211 x462 1) x180)) (not x1068)) (and (=> (not x568) x870) (=> x568 x877))) (=> x1068 x1343)))))
(assert (x1065 x115))
(assert (x1065 x128))
(assert (x1065 x372))
(assert (x1065 x137))
(assert (x867 x130))
(assert (x1065 x1029))
(assert (x1065 x105))
(assert (x1065 x370))
(assert (= x602 x281))
(assert (= x5 (=> (and (= (not (< 224 x324)) x1082) (= (div (mod (- (x102 x321) (x102 x532)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x441) x814 (= x532 (x642 (x1192 0) 0)) (= x814 (< x547 1461501637330902918203684832716283019655932542975)) (= x547 (x1119 x321)) (>= x547 0) (<= x547 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and x720 x1082))))
(assert (=> (>= 10000 x356) (= (x276 x356) (x1192 x356))))
(assert (x1065 x1016))
(assert (x1065 x795))
(assert (x1065 x389))
(assert (x867 x439))
(assert (= x1297 (and x1012 x211)))
(assert (x1065 x866))
(assert (x1065 x352))
(assert (x867 x680))
(assert (= (=> (and (and (= 128 x75) (= (x943 128) x607) (= x1042 128) (= (> x607 x581) x240)) (or (and (and (<= x890 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x444 x890) (<= 0 x890) (= x890 (x652 x772)) (< x755 x510) (= 0 x1019) (= (> 1461501637330902918203684832716283019655932542975 x890) x299) (= (x1211 x934 x581) x772) x299 (= (x642 (x1192 0) 0) x934) (= 0 x660)) x240) (and (not x240) (= 0 x444)))) x628) x1159))
(assert (x1065 x970))
(assert (x1065 x987))
(assert (x1065 x275))
(assert (=> (>= 10000 x413) (= (x1192 x413) (x276 x413))))
(assert (= x915 (=> (and (and (= x56 (x3 (x276 x130) (x1192 1) 0)) (<= 0 x1273) (= x130 x428) (= 1572751336 x1205) (>= x428 0) (= x731 (x972 x56)) (= x179 (not x693)) (>= 1461501637330902918203684832716283019655932542975 x130) (= (> (x232 (x276 x400)) 0) x33) (>= 1461501637330902918203684832716283019655932542975 x428) (>= 1461501637330902918203684832716283019655932542975 x400) (< 0 x400) (= x693 (not x1178)) (= x472 (ite x179 1 0)) (> 1729973928 x1205) (= 0 x206) (not (= 954915356 x1205)) (not (= x1205 1250999895)) (= x1178 (not (= 0 x731))) (= (x232 (x276 x400)) x673) (<= x1273 1461501637330902918203684832716283019655932542975) x33 (= 0 x917) (= (x1097 (x276 x400)) x14) (< 0 x673) (not (= 701022898 x1205)) (<= 0 x731) (>= x14 0) (<= x731 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (and (= 0 x480) (<= 0 x1256) (= x559 x428) (= x999 (not (= x1256 0))) (= (x3 (x276 x559) (x1192 1) 0) x230) (= x277 x837) (= x1055 0) (<= x559 1461501637330902918203684832716283019655932542975) (= 1729973928 x186) (> x381 0) (= x1256 (x972 x230)) (= x277 (not (= x472 0))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1256) (= x381 (x232 (x276 x400))) (not (> 1729973928 x186))) (or (and (= 0 x1221) (not x999)) (and (and (= x574 x1221) (= x574 (x429 (+ 1 x21))) (= x292 (x3 (x276 x559) (x1192 1) 0)) (= x328 0) (not (< x1267 1)) (= x21 (x685 (- x1267 1))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1267) (>= x1267 0) (= x217 0) (= (x972 x292) x1267)) x999)))) x862)))
(assert (x1065 x691))
(assert (= (x102 (x1211 x825 1)) (+ (x102 x825) 1)))
(assert (x1065 x681))
(assert (= (=> (and (>= x923 0) (= x227 (x642 (x1192 0) 0)) (= x1131 (div (mod (- (x102 x360) (x102 x227)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (> 1461501637330902918203684832716283019655932542975 x923) x586) x586 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x923) (= (x652 x360) x923) (= (not (< 224 x1194)) x590)) (and x846 x590)) x975))
(assert (x1065 x577))
(assert (x1065 x718))
(assert (= x251 x77))
(assert (x1065 x927))
(assert (= (and (not x1098) x1346) x708))
(assert (= x560 (x102 (x276 x560))))
(assert (x1065 x1274))
(assert (x1065 x223))
(assert (x1065 x994))
(assert (= x1285 (and x568 x633)))
(assert (x1065 x170))
(assert (= x290 (and x1203 x751)))
(assert (x1065 x1212))
(assert (x1065 x351))
(assert (x1065 x55))
(assert (x1065 x792))
(assert (x1065 x668))
(assert (x1065 x1094))
(assert (= x411 (x276 (x102 x411))))
(assert (= (x102 (x276 x130)) x130))
(assert (= (or x1236 x461) x501))
(assert (=> (<= x809 10000) (= (x276 x809) (x1192 x809))))
(assert (x1065 x809))
(assert (x1065 x327))
(assert (= (x102 (x1211 x625 1)) (+ (x102 x625) 1)))
(assert (x1065 x935))
(assert (= x1162 (=> (and (= x1283 x64) (and (= (x972 x202) x711) (= x1273 x779) (<= 0 x711) (= 2429653569 x783) (= x1163 0) (= (= x117 x352) x1002) (not (= 1729973928 x783)) (= x298 (x232 (x276 x400))) (= (= x711 0) x1011) (>= 1461501637330902918203684832716283019655932542975 x779) (= x962 0) x1161 (= (x3 (x276 x779) (x1192 1) 0) x202) (< 0 x298) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x711) (= (or x1002 (not x838)) x1161) (not (< x783 1729973928)) (= x1283 x117))) (and (=> (and (and (= x485 x510) (= x67 0)) x1011) x1220) (=> (and (and (and (= (x685 (- x510 1)) x587) (= x154 (x685 (- x711 1))) (not (< x510 1)) (= (= x154 x587) x861)) (or x861 (and (and (= (x3 (x276 x313) (x1192 1) 0) x940) (= x705 (x1211 x334 x154)) (= x334 (x642 (x1192 0) 0)) (= x313 (x652 x637)) x1322 (= x637 (x1211 x729 x587)) (> x510 x154) (= x729 (x642 (x1192 0) 0)) (= (< x313 1461501637330902918203684832716283019655932542975) x1322) (< x587 x510) (<= x313 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x313)) (not x861)))) (not x1011)) x1004)))))
(assert (x1065 x162))
(assert (x1065 x843))
(assert (= x888 (or x1160 (and x1116 x675))))
(assert (= (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x681) (= x38 (> 1461501637330902918203684832716283019655932542975 x681)) (= (not (< 224 x537)) x1150) (= (x642 (x1192 0) 0) x969) (<= 0 x681) x38 (= x651 (div (mod (- (x102 x1340) (x102 x969)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x681 (x652 x1340))) (and x1150 x1171)) x871))
(assert (x1065 x957))
(assert (= (and x865 x491) x1048))
(assert (x1065 x428))
(assert (x1065 x1023))
(assert (=> (<= x680 10000) (= (x1192 x680) (x276 x680))))
(assert (x1065 x541))
(assert (= (and x482 (not x861)) x1107))
(assert (x1065 x543))
(assert (= (+ 1 (x102 x1251)) (x102 (x1211 x1251 1))))
(assert (x1065 x567))
(assert (= (=> (and (or (and (not x97) (= x796 0)) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) (= 0 x287) (= x796 x32) (= (x1211 x674 x89) x17) (= x32 (x652 x17)) (< x1239 x510) (= 0 x737) (= (> 1461501637330902918203684832716283019655932542975 x32) x919) (>= x32 0) (= x674 (x642 (x1192 0) 0)) x919) x97)) (and (= (< x89 x1034) x97) (= x1034 (x828 128)) (= x528 128) (= x570 128))) x760) x218))
(assert (x1065 x186))
(assert (x1065 x26))
(assert (= x461 (and x1057 x641)))
(assert (x1065 x94))
(assert (x1065 x636))
(assert (x1065 x874))
(assert (x1065 x1248))
(assert (x1065 x269))
(assert (= (x276 (x102 x813)) x813))
(assert (x1065 x659))
(assert (x1065 x279))
(assert (= x20 (and x944 (not x1051))))
(assert (x1065 x13))
(assert (= (or x746 (and x1209 x1070)) x566))
(assert (= (or x1188 x185) x366))
(assert (= (and x1128 x880) x763))
(assert (x1065 x1206))
(assert (x1065 x243))
(assert (x1065 x1296))
(assert (= (=> (and (= x116 (not (> x143 224))) (= x835 (x652 x1032)) (= (div (mod (- (x102 x1032) (x102 x231)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x388) (= (x642 (x1192 0) 0) x231) (<= x835 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x835) (= x278 (< x835 1461501637330902918203684832716283019655932542975)) x278) (and x116 x1164)) x907))
(assert (x1065 x14))
(assert (= (or x1261 (and x1207 x1132)) x533))
(assert (x1065 x1336))
(assert (= (x102 (x1211 x1301 1)) (+ 1 (x102 x1301))))
(assert (x1065 x69))
(assert (x1065 x241))
(assert (x1065 x826))
(assert (x1065 x535))
(assert (x1065 x449))
(assert (= x218 x274))
(assert (x1065 x908))
(assert (x867 x45))
(assert (= x244 (=> (and (= x427 (x652 x849)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x427) (= x524 (not (< 224 x13))) x599 (= (< x427 1461501637330902918203684832716283019655932542975) x599) (<= 0 x427) (= x1319 (div (mod (- (x102 x849) (x102 x1154)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x642 (x1192 0) 0) x1154)) (and x584 x524))))
(assert (x1065 x1176))
(assert (x1065 x375))
(assert (x1065 x1262))
(assert (x1065 x653))
(assert (x1065 x371))
(assert (x1065 x973))
(assert (x1065 x465))
(assert (= x1134 (x276 (x102 x1134))))
(assert (= (x276 (x102 x771)) x771))
(assert (x1065 x976))
(assert (x1065 x993))
(assert (= x559 (x102 (x276 x559))))
(assert (x1065 x581))
(assert (x1065 x52))
(assert (x1065 x529))
(assert (x1065 x1015))
(assert (= x1059 (=> (and (and (and (not (= 701022898 x869)) (= (x972 x879) x197) (= 0 x145) (= x1176 x725) (= x869 1572751336) (> x1320 0) (= x1320 (x232 (x276 x400))) (> 1729973928 x869) (not (= 1250999895 x869)) (= (not x494) x749) (= x1273 x1300) (= x332 (not x749)) (= (not (= 0 x197)) x494) (not (= x869 954915356)) (= x879 (x3 (x276 x1300) (x1192 1) 0)) (<= 0 x197) (= x1102 (not (= x725 x250))) (= 0 x885) (>= 1461501637330902918203684832716283019655932542975 x1300) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x197) (= x293 (ite x332 1 0))) (and (= x675 (= x510 0)) (not (= x805 701022898)) (= (and x1102 x1026) x74) (= x597 (x232 (x276 x400))) (= 0 x283) (> 1729973928 x805) (not (= x805 954915356)) (> x597 0) (= (not (= 0 x293)) x756) (= x1026 x756) (= 0 x85) (= x805 1250999895))) (= x980 x1176)) (and (=> (and (and (= (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x913) (= (div (mod (- (x102 x369) (x102 x789)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x355) (= (x642 (x1192 0) 0) x369) (>= x146 0) (= x53 (< 192 x399)) (= x819 (x1211 x369 1)) x553 (= x399 (x429 (+ x913 160))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x146) (= x553 (> 1461501637330902918203684832716283019655932542975 x146)) (= (x652 x369) x146) (= (x642 (x1192 0) 0) x789)) (not x675)) (and (=> x53 x190) (=> (not x53) x602))) (=> x675 x281)))))
(assert (x1065 x713))
(assert (x1065 x72))
(assert (= (x276 (x102 x320)) x320))
(assert (x867 x313))
(assert (= x1164 x824))
(assert (x1065 x1252))
(assert (x1065 x475))
(assert (x1065 x174))
(assert (x1065 x124))
(assert (x1065 x64))
(assert (x1065 x249))
(assert (x1065 x971))
(assert (= x809 (x102 (x276 x809))))
(assert (x1065 x676))
(assert (= (=> (and (<= 0 x1308) (= (x652 x742) x1308) (= x310 (< x1308 1461501637330902918203684832716283019655932542975)) (<= x1308 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x642 (x1192 0) 0) x207) (= (not (< 224 x208)) x901) x310 (= x612 (div (mod (- (x102 x742) (x102 x207)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (and x901 x166)) x596))
(assert (x1065 x960))
(assert (x1065 x21))
(assert (x1065 x444))
(assert (x1065 x447))
(assert (x1065 x1163))
(assert (= (=> (and (and (not (= 954915356 x113)) (= (= 0 x510) x490) (= 0 x714) (= 1250999895 x113) (= x209 (x232 (x276 x400))) (= (or x1189 (not x212)) x776) (= x881 0) (> 1729973928 x113) (= x1189 (not (= x466 x1111))) (not (= 701022898 x113)) (= x428 x104) (< 0 x209) (= x95 x1111) x776) (= x1277 x95)) (and (=> (and (and (= x802 (x642 (x1192 0) 0)) (= (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x676) (= (div (mod (- (x102 x579) (x102 x802)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x124) (= (x429 (+ 160 x676)) x1126) (= (x642 (x1192 0) 0) x579) (= x948 (< x935 1461501637330902918203684832716283019655932542975)) (<= x935 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x1126 192) x1012) (= (x1211 x579 1) x318) x948 (= x935 (x652 x579)) (<= 0 x935)) (not x490)) (and (=> (not x1012) x784) (=> x1012 x357))) (=> x490 x1260))) x219))
(assert (x1065 x448))
(assert (x1065 x1045))
(assert (x1065 x484))
(assert (= (x1192 2429653569) (x276 2429653569)))
(assert (x1065 x580))
(assert (x1065 x59))
(assert (x1065 x959))
(assert (= x86 (and x393 (not x29))))
(assert (x1065 x981))
(assert (x1065 x60))
(assert (x1065 x1205))
(assert (x1065 x1103))
(assert (x1065 x28))
(assert (x1065 x536))
(assert (x1065 x246))
(assert (=> (<= x728 10000) (= (x1192 x728) (x276 x728))))
(assert (= (=> (and (and x194 (= (>= x657 x616) x194) (not (= x1235 701022898)) (= x188 0) (> x686 0) (= x1235 1250999895) (not (= x1235 954915356)) (= x1132 (= 0 x510)) (> 1729973928 x1235) (= x686 (x232 (x276 x400))) (= x1023 x657) (= 0 x70)) (and (= 128 x351) (= x1023 x1144) (= 128 x245) (= (x520 128) x1144))) (and (=> x1132 x460) (=> (and (not x1132) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1100) (= x1208 (div (mod (- (x102 x1229) (x102 x801)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x429 (+ x831 160)) x537) x817 (= (x1211 x1229 1) x1340) (= x23 (> x537 192)) (= x1100 (x652 x1229)) (= x801 (x642 (x1192 0) 0)) (>= x1100 0) (= x817 (< x1100 1461501637330902918203684832716283019655932542975)) (= (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x831) (= x1229 (x642 (x1192 0) 0)))) (and (=> (not x23) x1171) (=> x23 x871))))) x392))
(assert (= x1198 x50))
(assert (x1065 x399))
(assert (= (x276 (x102 x1345)) x1345))
(assert (x1065 x1109))
(assert (x1065 x634))
(assert (= x51 (x276 (x102 x51))))
(assert (x1065 x87))
(assert (x1065 x917))
(assert (= x798 (or (and x1005 x92) x450)))
(assert (x1065 x79))
(assert (= x1254 (or x16 x312)))
(assert (x1065 x982))
(assert (x1065 x472))
(assert (x1065 x1117))
(assert (x1065 x455))
(assert (= (+ 1 (x102 x1073)) (x102 (x1211 x1073 1))))
(assert (= x45 (x102 (x276 x45))))
(assert (= (=> (and (and (= 0 x687) (= x810 (x232 (x276 x400))) (= (= 0 x510) x46) (not (= 701022898 x1292)) (not (= 954915356 x1292)) (= x1292 1250999895) (= x616 x941) (< 0 x810) (= 0 x503) (< x1292 1729973928)) (= x941 x1180)) (and (=> (and (and (= (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x371) (= x322 (< 192 x544)) (<= 0 x527) (<= x527 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x652 x1073) x527) (= (x642 (x1192 0) 0) x504) (= (> 1461501637330902918203684832716283019655932542975 x527) x582) (= x1345 (x1211 x1073 1)) (= (x642 (x1192 0) 0) x1073) (= x544 (x429 (+ x371 160))) (= x323 (div (mod (- (x102 x1073) (x102 x504)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x582) (not x46)) (and (=> x322 x1120) (=> (not x322) x340))) (=> x46 x392))) x358))
(assert (x1065 x1077))
(assert (x867 x413))
(assert (x1065 x587))
(assert (x1065 x831))
(assert (x1065 x498))
(assert (x1065 x588))
(assert (x1065 x476))
(assert (x1065 x1204))
(assert (= (or x438 (and x939 x285)) x481))
(assert (x1065 x343))
(assert (x1065 x1276))
(assert (x1065 x289))
(assert (= (or x35 x361) x964))
(assert (x1065 x1113))
(assert (= x684 (or (and (not x841) x747) x857)))
(assert (= x78 (and x571 (not x926))))
(assert (= x333 (=> (and (= (> 1461501637330902918203684832716283019655932542975 x41) x891) (= (x642 (x1192 0) 0) x414) (= (not (< 224 x854)) x467) (= x41 (x652 x1313)) (= x994 (div (mod (- (x102 x1313) (x102 x414)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (<= 0 x41) (<= x41 115792089237316195423570985008687907853269984665640564039457584007913129639935) x891) (and x467 x572))))
(assert (= x65 (and x815 x479)))
(assert (x1065 x555))
(assert (x1065 x247))
(assert (= (+ (x102 x942) 1) (x102 (x1211 x942 1))))
(assert (= x92 (or (and x646 x662) x895)))
(assert (= x1342 (and x1011 x666)))
(assert (x1065 x1191))
(assert (x1065 x515))
(assert (x1065 x525))
(assert (x1065 x302))
(assert (= x589 (and x715 x440)))
(assert (=> (<= x152 10000) (= (x1192 x152) (x276 x152))))
(assert (x1065 x816))
(assert (= (x276 1461501637330902918203684832716283019655932542975) (x1192 1461501637330902918203684832716283019655932542975)))
(assert (= (and x481 x309) x1108))
(assert (= (=> (and (and (= x1077 128) (= (x730 128) x229) (= x715 (> x229 x618)) (= 128 x918)) (or (and (= 0 x1283) (not x715)) (and x715 (and x678 (= x1283 x605) (= x605 (x652 x470)) (< x430 x510) (= x2 (x642 (x1192 0) 0)) (= 0 x138) (= 0 x473) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x605) (>= x605 0) (= (< x605 1461501637330902918203684832716283019655932542975) x678) (= x470 (x1211 x2 x618)))))) x1162) x50))
(assert (x1065 x1053))
(assert (= x152 (x102 (x276 x152))))
(assert (x1065 x118))
(assert (x1065 x405))
(assert (x1065 x1337))
(assert (x1065 x627))
(assert (x1065 x1064))
(assert (= (or x20 x615) x331))
(assert (x1065 x503))
(assert (x1065 x154))
(assert (x867 x407))
(assert (= x1279 (=> (and (= x9 (x652 x257)) x1092 (<= 0 x9) (= x771 (x642 (x1192 0) 0)) (= (div (mod (- (x102 x257) (x102 x771)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x900) (= x1092 (< x9 1461501637330902918203684832716283019655932542975)) (= x983 (not (> x451 224))) (<= x9 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and x1348 x983))))
(assert (x1065 x39))
(assert (= x321 (x276 (x102 x321))))
(assert (= (x276 (x102 x1193)) x1193))
(assert (= x626 (and x926 x571)))
(assert (x1065 x717))
(assert (x1065 x1038))
(assert (x1065 x956))
(assert (x1065 x796))
(assert (x1065 x133))
(assert (x1065 x31))
(assert (x1065 x81))
(assert (x1065 x998))
(assert (x1065 x401))
(assert (= (x276 (x102 x318)) x318))
(assert (= (x276 (x102 x25)) x25))
(assert (= (and x1001 x978) x315))
(assert (x1065 x395))
(assert (= x778 (or x1050 x426)))
(assert (x1065 x435))
(assert (x1065 x483))
(assert (x1065 x1277))
(assert (= x1326 (and x453 x1200)))
(assert (x1065 x593))
(assert (= (x102 (x276 x313)) x313))
(assert (x1065 x451))
(assert (= x164 (x276 (x102 x164))))
(assert (x1065 x158))
(assert (= x720 x1027))
(assert (x1065 x474))
(assert (= (=> (and (= x977 (not (< 224 x1126))) (= x1329 (div (mod (- (x102 x318) (x102 x320)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (> 1461501637330902918203684832716283019655932542975 x1053) x1133) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1053) (= (x652 x318) x1053) (>= x1053 0) x1133 (= x320 (x642 (x1192 0) 0))) (and x784 x977)) x357))
(assert (x1065 x762))
(assert (x1065 x390))
(assert (= x83 (x276 (x102 x83))))
(assert (= x1346 (or x406 x1108)))
(assert (x1065 x1268))
(assert (= (and (not x716) x753) x649))
(assert (x867 x559))
(assert (= x1179 (and x968 x500)))
(assert (x1065 x696))
(assert (x1065 x537))
(assert (= (x276 (x102 x969)) x969))
(assert (x1065 x149))
(assert (= (and x1040 x127) x16))
(assert (= x285 (or x172 (and x778 x620))))
(assert (x1065 x382))
(assert (x1065 x1003))
(assert (x1065 x810))
(assert (= x761 (=> (and (and (> x912 0) (= x803 (= x510 0)) (= x1165 (x685 (- x658 x830))) (= x823 3686129278) (not (= 2429653569 x823)) (= x658 x499) (not (= 1729973928 x823)) (= 0 x370) (not (< x823 1729973928)) (not (= 2485876314 x823)) (= (x232 (x276 x400)) x912) (= x1315 0) (= x830 1) (= x902 x1165)) (and (= x1325 128) (= x1064 x499) (= 128 x506) (= x1064 (x337 128)))) (and (=> (and (not x803) (and (<= 0 x603) (= x786 (div (mod (- (x102 x583) (x102 x1106)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x583 (x642 (x1192 0) 0)) x1035 (= x1032 (x1211 x583 1)) (= x1035 (< x603 1461501637330902918203684832716283019655932542975)) (= x603 (x652 x583)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x603) (= x1106 (x642 (x1192 0) 0)) (= x143 (x429 (+ x246 160))) (= (> x143 192) x412) (= x246 (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and (=> (not x412) x1164) (=> x412 x907))) (=> x803 x824)))))
(assert (x1065 x614))
(assert (= (x102 (x1192 2429653569)) 2429653569))
(assert (= (x276 (x102 x1154)) x1154))
(assert (x1065 x912))
(assert (x1065 x235))
(assert (x1065 x1304))
(assert (x1065 x665))
(assert (x1065 x407))
(assert (= x889 (x276 (x102 x889))))
(assert (x1065 x507))
(assert (x1065 x1028))
(assert (x1065 x356))
(assert (x1065 x601))
(assert (= x185 (and x501 x622)))
(assert (= (or x1219 (and x516 x288)) x363))
(assert (= x1116 (or x741 x818)))
(assert (= (or x495 x638) x1209))
(assert (= (x276 (x102 x1245)) x1245))
(assert (= (x276 (x102 x844)) x844))
(assert (= x856 (=> (and (= x560 x744) (and (and (and (= x680 x1273) (= x52 (x972 x431)) (not (< x477 1729973928)) (<= 0 x52) (= x477 1729973928) (= x622 (not (= 0 x52))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x52) (= x431 (x3 (x276 x680) (x1192 1) 0)) (= x565 (not (= x1244 0))) (= x1271 0) (= x61 (x232 (x276 x400))) (<= x680 1461501637330902918203684832716283019655932542975) (= x892 x565) (= (and x74 x892) x212) (< 0 x61) (= x1010 0)) (or (and x622 (and (= (x972 x458) x645) (= x458 (x3 (x276 x680) (x1192 1) 0)) (= x476 x475) (<= x645 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x476 (x429 (+ 1 x1038))) (= 0 x308) (= x1045 0) (not (< x645 1)) (= (x685 (- x645 1)) x1038) (>= x645 0))) (and (not x622) (= 0 x475)))) (and (= x174 (x232 (x276 x400))) (= 0 x422) (not (= x1130 1250999895)) (<= x995 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x174) (<= 0 x995) (= x325 (not (= x995 0))) (not (= 954915356 x1130)) (= x1037 (not x325)) (= x1244 (ite x373 1 0)) (not (= 701022898 x1130)) (= x690 0) (> 1729973928 x1130) (= (x972 x764) x995) (= x764 (x3 (x276 x560) (x1192 1) 0)) (= x1130 1572751336) (>= 1461501637330902918203684832716283019655932542975 x560) (= (not x1037) x373)))) x804)))
(assert (= x689 (=> (and (or (and x309 (and (= (x642 (x1192 0) 0) x522) (< x457 x510) (= (x1211 x522 x24) x769) (= x1202 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x945) (= (> 1461501637330902918203684832716283019655932542975 x945) x169) x169 (= x1142 0) (= x413 x945) (= x945 (x652 x769)) (<= 0 x945))) (and (not x309) (= 0 x413))) (and (= x1022 (x364 128)) (= (> x1022 x24) x309) (= x282 128) (= 128 x933))) x1186)))
(assert (= x728 (x102 (x276 x728))))
(assert (= (+ x587 (x102 x729)) (x102 (x1211 x729 x587))))
(assert (x1065 x554))
(assert (x1065 x1215))
(assert (= (+ (x102 x369) 1) (x102 (x1211 x369 1))))
(assert (x1065 x1131))
(assert (x1065 x752))
(assert (= (x102 (x1211 x2 x618)) (+ (x102 x2) x618)))
(assert (= x121 (and x649 x478)))
(assert (= x273 (x276 (x102 x273))))
(assert (= (x102 (x276 x356)) x356))
(assert (x1065 x473))
(assert (x1065 x631))
(assert (x1065 x359))
(assert (x1065 x1022))
(assert (x1065 x397))
(assert (= x654 (x276 (x102 x654))))
(assert (x1065 x457))
(assert (x1065 x45))
(assert (x1065 x330))
(assert (x1065 x134))
(assert (x1065 x18))
(assert (= x1187 (and x142 x827)))
(assert (= (and (not x1057) x641) x1236))
(assert (= (x102 (x1192 2485876314)) 2485876314))
(assert (=> (<= x559 10000) (= (x1192 x559) (x276 x559))))
(assert (= x910 (=> (and (= (> 1461501637330902918203684832716283019655932542975 x1079) x735) (= (not (> x1333 224)) x489) x735 (<= x1079 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x642 (x1192 0) 0) x237) (= (div (mod (- (x102 x1245) (x102 x237)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x557) (= x1079 (x652 x1245)) (>= x1079 0)) (and x489 x1198))))
(assert (x867 x925))
(assert (x1065 x1197))
(assert (x1065 x997))
(assert (x1065 x885))
(assert (= x640 (and x214 x34)))
(assert (x1065 x519))
(assert (= (x276 (x102 x368)) x368))
(assert (x1065 x621))
(assert (x1065 x610))
(assert (= (and x363 x97) x495))
(assert (= (and (not x898) x1234) x818))
(assert (x1065 x667))
(assert (= (or x140 (and x37 x1324)) x873))
(assert (x1065 x1184))
(assert (x1065 x833))
(assert (x1065 x459))
(assert (x1065 x823))
(assert (= x492 (x276 (x102 x492))))
(assert (= (and x440 (not x715)) x1139))
(assert (x1065 x1323))
(assert (x1065 x12))
(assert (x1065 x1062))
(assert (= x1210 (x276 (x102 x1210))))
(assert (= (x276 (x102 x504)) x504))
(assert (= (x276 (x102 x62)) x62))
(assert (= x865 (and (not x662) x646)))
(assert (= (x276 (x102 x1340)) x1340))
(assert (= (and (not x97) x363) x638))
(assert (x1065 x963))
(assert (x1065 x1255))
(assert (x1065 x1208))
(assert (x1065 x886))
(assert (x1065 x1000))
(assert (= (and (not x622) x501) x1188))
(assert (x1065 x419))
(assert (x1065 x284))
(assert (= (or x493 (and x48 (not x882))) x611))
(assert (x1065 x986))
(assert (= x140 (or x315 (and x978 (not x1001)))))
(assert (= (=> (and x781 (= (> 1461501637330902918203684832716283019655932542975 x992) x781) (>= x992 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x992) (= x992 (x652 x62)) (= x1036 (x642 (x1192 0) 0)) (= (not (< 224 x12)) x391) (= x1336 (div (mod (- (x102 x62) (x102 x1036)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (and x1041 x391)) x511))
(assert (= (x102 (x1192 701022898)) 701022898))
(assert (x1065 x173))
(assert (x1065 x859))
(assert (x1065 x268))
(assert (x1065 x550))
(assert (x1065 x562))
(assert (x1065 x645))
(assert (= 1461501637330902918203684832716283019655932542975 (x102 (x1192 1461501637330902918203684832716283019655932542975))))
(assert (= x19 (x276 (x102 x19))))
(assert (= (x102 (x276 x1284)) x1284))
(assert (x1065 x860))
(assert (x1065 x840))
(assert (x1065 x1222))
(assert (x1065 x1100))
(assert (x1065 x992))
(assert (= x77 (=> (and (and (= 128 x790) (= 128 x1155) (= (x1302 128) x567) (= x567 x254)) (and (= (x685 (- x886 x959)) x1317) (= x136 0) (= x254 x886) (not (> 1729973928 x791)) (= x656 x1317) (= x959 1) (> x1218 0) (= x791 3686129278) (= x1218 (x232 (x276 x400))) (= (= 0 x510) x1137) (= 0 x1215) (not (= x791 2429653569)) (not (= x791 1729973928)) (not (= 2485876314 x791)))) (and (=> (and (and (= (mod (* x510 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x698) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1054) (= (div (mod (- (x102 x1251) (x102 x1269)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x832) (= (x1211 x1251 1) x1259) (= x562 (x429 (+ 160 x698))) x887 (= x1054 (x652 x1251)) (= x768 (> x562 192)) (= x887 (< x1054 1461501637330902918203684832716283019655932542975)) (= (x642 (x1192 0) 0) x1269) (= x1251 (x642 (x1192 0) 0)) (<= 0 x1054)) (not x1137)) (and (=> x768 x1101) (=> (not x768) x1123))) (=> x1137 x1088)))))
(assert (x1065 x374))
(assert (= (x276 (x102 x949)) x949))
(assert (x1065 x215))
(assert (x1065 x961))
(assert (= x1344 x1136))
(assert (= (and x228 (not x1007)) x48))
(assert (x1065 x67))
(assert (= x754 (or (and (not x479) x815) x65)))
(assert (x1065 x812))
(assert (x1065 x1227))
(assert (x1065 x1144))
(assert (x1065 x597))
(assert (= (x276 (x102 x579)) x579))
(assert (x1065 x711))
(assert (x1065 x724))
(assert (x1065 x656))
(assert (= (and x285 (not x939)) x1309))
(assert (x1065 x104))
(assert (= x369 (x276 (x102 x369))))
(assert (= x340 x392))
(assert (= (=> (and (and (not (> 1729973928 x893)) (= 1 x696) (= (x232 (x276 x400)) x40) (= x971 x1117) (= x799 0) (< 0 x40) (= (x685 (- x87 x696)) x971) (= x1031 x87) (not (= 2485876314 x893)) (= x1005 (= 0 x510)) (not (= x893 2429653569)) (= x893 3686129278) (not (= 1729973928 x893)) (= 0 x11)) (and (= x1031 x667) (= x1074 128) (= x279 128) (= (x624 128) x667))) (and (=> x1005 x924) (=> (and (not x1005) (and (= (> x451 192) x991) (= x336 (x642 (x1192 0) 0)) (= x451 (x429 (+ x156 160))) (= x156 (mod (* 32 x510) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x487 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1173 (< x487 1461501637330902918203684832716283019655932542975)) (= x257 (x1211 x336 1)) x1173 (= (x652 x336) x487) (= x539 (div (mod (- (x102 x336) (x102 x1083)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (>= x487 0) (= x1083 (x642 (x1192 0) 0)))) (and (=> (not x991) x1348) (=> x991 x1279))))) x839))
(assert (x1065 x757))
(assert (x1065 x635))
(assert (= (x102 (x1211 x469 x1165)) (+ x1165 (x102 x469))))
(assert (= (x102 (x1211 x280 1)) (+ (x102 x280) 1)))
(assert (x1065 x618))
(assert (= (x276 (x102 x280)) x280))
(assert (=> (>= 10000 x779) (= (x276 x779) (x1192 x779))))
(assert (x1065 x387))
(assert (= x148 (=> (and (or (and (and (> x510 x745) (= (x652 x96) x921) (= (< x921 1461501637330902918203684832716283019655932542975) x1020) (= x921 x807) (= x787 0) (= x241 0) (= x96 (x1211 x307 x1293)) (>= x921 0) (= (x642 (x1192 0) 0) x307) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x921) x1020) x29) (and (not x29) (= 0 x807))) (and (= 128 x258) (= x683 128) (= (< x1293 x72) x29) (= x72 (x613 128)))) x191)))
(assert (x1065 x328))
(assert (x1065 x386))
(assert (= x450 (or (and (not x991) x1321) x534)))
(assert (x1065 x1241))
(assert (=> (>= 10000 x1252) (= (x276 x1252) (x1192 x1252))))
(assert (= (and x841 x747) x857))
(assert (x1065 x995))
(assert (x1065 x1247))
(assert (x1065 x830))
(assert (x1065 x706))
(assert (= x1234 (or x1076 (and x305 x803))))
(assert (x1065 x682))
(assert (= x413 (x102 (x276 x413))))
(assert (x1065 x441))
(assert (=> (>= 10000 x439) (= (x276 x439) (x1192 x439))))
(assert (x1065 x788))
(assert (x1065 x560))
(assert (= (and (not x675) x1116) x433))
(assert (= (=> (and (and (and (= x647 x724) (= x81 0) (= x925 x428) (= (or (not x443) x1167) x394) (= x1009 (x3 (x276 x925) (x1192 1) 0)) (= 1729973928 x1062) (= x1040 (not (= 0 x465))) (= x1017 (x232 (x276 x400))) (not (< x1062 1729973928)) (< 0 x1017) (>= 1461501637330902918203684832716283019655932542975 x925) (= 0 x1104) (= x465 (x972 x1009)) x394 (<= 0 x465) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x465) (= x1167 (not (= x958 x647)))) (or (and (= 0 x1180) (not x1040)) (and x1040 (and (not (< x100 1)) (= (x685 (- x100 1)) x483) (= (x3 (x276 x925) (x1192 1) 0) x205) (= x1289 0) (<= 0 x100) (= x1180 x416) (<= x100 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x972 x205) x100) (= (x429 (+ x483 1)) x416) (= 0 x702))))) (= x724 x1069)) x358) x1341))
(assert (x1065 x1138))
(assert (x1065 x54))
(assert (x1065 x188))
(assert (x1065 x1008))
(assert (x1065 x1042))
(assert (not x915))
(assert (x1065 x700))
(assert (x1065 x725))
(assert (= x1177 (or x99 (and (not x322) x775))))
(assert (x1065 x355))
(assert (= x227 (x276 (x102 x227))))
(assert (x1065 x774))
(assert (x1065 x916))
(assert (x1065 x488))
(assert (= x979 (and (not x8) x1060)))
(assert (x1065 x510))
(assert (=> (>= 10000 x925) (= (x276 x925) (x1192 x925))))
(assert (x1065 x1024))
(assert (= x571 (or (and x533 x1257) x754)))
(assert (x1065 x680))
(assert (= (and x798 x770) x425))
(assert (x1065 x883))
(assert (= (+ 1 (x102 x159)) (x102 (x1211 x159 1))))
(assert (x1065 x220))
(assert (= (+ 1 (x102 x1229)) (x102 (x1211 x1229 1))))
(assert (x1065 x683))
(assert (=> (>= 10000 x1284) (= (x276 x1284) (x1192 x1284))))
(check-sat)
(exit)