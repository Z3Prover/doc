(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x62 0)) (((x295 (x317 Int)) (x53 (x10 x62) (x338 x62) (x137 Int)) (x162 (x232 x62) (x102 Int)) (x63 (x243 x62) (x8 x62) (x188 x62) (x147 x62) (x92 Int)))))
(declare-fun x116 () Int)
(declare-fun x139 () Int)
(declare-fun x64 () Int)
(declare-fun x347 () Int)
(declare-fun x213 () Bool)
(declare-fun x203 (Int Int) Int)
(declare-fun x288 () Bool)
(declare-fun x138 () Bool)
(declare-fun x189 () Bool)
(declare-fun x145 () Int)
(declare-fun x136 (x62) Int)
(declare-fun x25 () x62)
(declare-fun x340 () Int)
(declare-fun x82 () Int)
(declare-fun x156 () Bool)
(declare-fun x186 () Int)
(declare-fun x107 () Int)
(declare-fun x142 () x62)
(declare-fun x217 () Int)
(declare-fun x174 () Int)
(declare-fun x140 (x62) Int)
(declare-fun x150 () Int)
(declare-fun x234 () x62)
(declare-fun x4 (Int) x62)
(declare-fun x90 () x62)
(declare-fun x26 () Int)
(declare-fun x15 () Int)
(declare-fun x208 () Int)
(declare-fun x252 () Bool)
(declare-fun x155 () x62)
(declare-fun x151 () Int)
(declare-fun x179 () Int)
(declare-fun x129 () Bool)
(declare-fun x97 () Int)
(declare-fun x18 () Bool)
(declare-fun x119 () Int)
(declare-fun x320 (Int Int) Int)
(declare-fun x114 (Int) Int)
(declare-fun x177 () Int)
(declare-fun x70 () Bool)
(declare-fun x22 () Bool)
(declare-fun x202 () Int)
(declare-fun x315 () x62)
(declare-fun x111 () Int)
(declare-fun x38 () Int)
(declare-fun x350 () x62)
(declare-fun x237 () Int)
(declare-fun x86 () x62)
(declare-fun x1 () Int)
(declare-fun x303 () Int)
(declare-fun x286 () Int)
(declare-fun x93 () Int)
(declare-fun x264 () Int)
(declare-fun x190 () Int)
(declare-fun x224 () Int)
(declare-fun x89 () Bool)
(declare-fun x231 (Int Int) Int)
(declare-fun x11 () Bool)
(declare-fun x35 () Int)
(declare-fun x115 () Int)
(declare-fun x130 () Int)
(declare-fun x108 () Int)
(declare-fun x95 () x62)
(declare-fun x133 () Int)
(declare-fun x31 () Bool)
(declare-fun x74 () Int)
(declare-fun x117 () Int)
(declare-fun x212 () Int)
(declare-fun x332 () x62)
(declare-fun x302 () Int)
(declare-fun x218 () Bool)
(declare-fun x141 () x62)
(declare-fun x309 () Int)
(declare-fun x301 () Int)
(declare-fun x260 () x62)
(declare-fun x104 () Int)
(declare-fun x294 (x62) Int)
(declare-fun x173 () Int)
(declare-fun x346 () Int)
(declare-fun x247 () Int)
(declare-fun x126 () x62)
(declare-fun x206 () Int)
(declare-fun x118 () Int)
(declare-fun x353 (Int Int) Int)
(declare-fun x345 () Int)
(declare-fun x169 () Int)
(declare-fun x306 () Int)
(declare-fun x109 () Int)
(declare-fun x110 () Int)
(declare-fun x76 () Int)
(declare-fun x45 () Int)
(declare-fun x319 () Int)
(declare-fun x291 () Int)
(declare-fun x171 () Int)
(declare-fun x204 () Int)
(declare-fun x351 () Int)
(declare-fun x263 () Int)
(declare-fun x267 () Bool)
(declare-fun x40 () Int)
(declare-fun x330 () Int)
(declare-fun x83 () Int)
(declare-fun x101 () Int)
(declare-fun x123 () Int)
(declare-fun x324 () Int)
(declare-fun x262 () x62)
(declare-fun x72 () x62)
(declare-fun x249 () Int)
(declare-fun x197 () Int)
(declare-fun x152 () Int)
(declare-fun x308 () Int)
(declare-fun x99 () Bool)
(declare-fun x178 (x62) Int)
(declare-fun x273 () Bool)
(declare-fun x201 () Int)
(declare-fun x210 () Int)
(declare-fun x277 () x62)
(declare-fun x49 () Bool)
(declare-fun x55 () x62)
(declare-fun x32 () Int)
(declare-fun x172 () Bool)
(declare-fun x12 () Bool)
(declare-fun x283 () Int)
(declare-fun x335 () Bool)
(declare-fun x296 () Int)
(declare-fun x289 () Int)
(declare-fun x278 () x62)
(declare-fun x327 () Bool)
(declare-fun x120 () Bool)
(declare-fun x354 () Int)
(declare-fun x261 () Int)
(declare-fun x127 () Int)
(declare-fun x87 () Int)
(declare-fun x342 () Int)
(declare-fun x176 () Int)
(declare-fun x14 () Int)
(declare-fun x192 () Int)
(declare-fun x160 () x62)
(declare-fun x103 () Int)
(declare-fun x27 () x62)
(declare-fun x98 () Int)
(declare-fun x79 () Int)
(declare-fun x175 () x62)
(declare-fun x304 () x62)
(declare-fun x125 () Int)
(declare-fun x19 () Int)
(declare-fun x113 () Bool)
(declare-fun x228 () Int)
(declare-fun x199 () Bool)
(declare-fun x146 () Int)
(declare-fun x242 () Int)
(declare-fun x298 (Int) Bool)
(declare-fun x279 () Int)
(declare-fun x105 () Bool)
(declare-fun x225 (Int Int) Int)
(declare-fun x312 () Int)
(declare-fun x5 () Int)
(declare-fun x259 () x62)
(declare-fun x69 () Int)
(declare-fun x185 () Bool)
(declare-fun x245 () Int)
(declare-fun x230 () x62)
(declare-fun x318 () Bool)
(declare-fun x48 () Bool)
(declare-fun x292 () Int)
(declare-fun x331 () Int)
(declare-fun x58 () x62)
(declare-fun x6 () Int)
(declare-fun x205 () Int)
(declare-fun x272 () Int)
(declare-fun x41 () Int)
(declare-fun x258 () Int)
(declare-fun x164 () x62)
(declare-fun x299 () Int)
(declare-fun x269 () Int)
(declare-fun x94 () Int)
(declare-fun x60 () Int)
(declare-fun x159 () Bool)
(declare-fun x326 () x62)
(declare-fun x284 () Int)
(declare-fun x148 () Bool)
(declare-fun x314 () x62)
(declare-fun x42 () Int)
(declare-fun x257 () Bool)
(declare-fun x73 () Int)
(declare-fun x240 () Int)
(declare-fun x181 () Bool)
(declare-fun x195 () Int)
(declare-fun x2 () Int)
(declare-fun x144 (x62) Int)
(declare-fun x344 () x62)
(declare-fun x233 () x62)
(declare-fun x219 () Bool)
(declare-fun x334 () x62)
(declare-fun x229 () Int)
(declare-fun x163 () Int)
(declare-fun x149 () Int)
(declare-fun x57 () Bool)
(declare-fun x165 () Int)
(declare-fun x153 () Bool)
(declare-fun x246 () Int)
(declare-fun x254 () Int)
(declare-fun x265 () Int)
(declare-fun x191 () Int)
(declare-fun x226 () Int)
(declare-fun x255 () Bool)
(declare-fun x59 () Bool)
(declare-fun x167 (Int) Int)
(declare-fun x236 () Int)
(declare-fun x50 () x62)
(declare-fun x337 () Bool)
(declare-fun x168 () x62)
(declare-fun x71 () Bool)
(declare-fun x80 () Int)
(declare-fun x56 () Bool)
(declare-fun x322 () x62)
(declare-fun x287 () Int)
(declare-fun x9 () x62)
(declare-fun x285 () Int)
(declare-fun x211 () Int)
(declare-fun x209 () Int)
(declare-fun x16 () x62)
(declare-fun x271 () Int)
(declare-fun x166 () Int)
(declare-fun x313 () Bool)
(declare-fun x300 () Bool)
(declare-fun x256 () Bool)
(declare-fun x214 () Bool)
(declare-fun x81 () Bool)
(declare-fun x339 () Bool)
(declare-fun x7 () Int)
(declare-fun x275 () x62)
(declare-fun x68 (Int Int) Int)
(declare-fun x281 () Int)
(declare-fun x194 () Int)
(declare-fun x21 () x62)
(declare-fun x355 () Bool)
(declare-fun x193 () Bool)
(declare-fun x348 () Int)
(declare-fun x321 () Int)
(declare-fun x200 () Int)
(declare-fun x13 () Int)
(declare-fun x235 () Int)
(declare-fun x310 () Int)
(declare-fun x333 () Int)
(declare-fun x328 () Int)
(declare-fun x84 () Int)
(declare-fun x61 () Int)
(declare-fun x75 () Bool)
(declare-fun x222 () x62)
(declare-fun x215 () x62)
(declare-fun x253 () Int)
(declare-fun x44 () Int)
(declare-fun x270 () Int)
(declare-fun x85 () Int)
(declare-fun x37 () Int)
(declare-fun x24 () Bool)
(declare-fun x282 () Bool)
(declare-fun x52 (x62) Int)
(declare-fun x280 () Bool)
(declare-fun x325 () Int)
(declare-fun x23 () x62)
(declare-fun x182 () Bool)
(declare-fun x266 () Int)
(declare-fun x51 () Bool)
(declare-fun x77 () Int)
(declare-fun x39 (x62) Int)
(declare-fun x196 () Int)
(declare-fun x170 () Bool)
(declare-fun x3 () Int)
(declare-fun x180 () Int)
(declare-fun x128 () Int)
(declare-fun x352 () Int)
(declare-fun x239 () Int)
(declare-fun x132 () Int)
(declare-fun x187 () Int)
(declare-fun x88 () Int)
(declare-fun x47 () Int)
(declare-fun x17 () Bool)
(declare-fun x54 () Int)
(declare-fun x221 () Int)
(declare-fun x78 () Int)
(declare-fun x36 () Int)
(declare-fun x43 () Int)
(declare-fun x223 () Int)
(declare-fun x227 (x62) Int)
(declare-fun x248 () Int)
(declare-fun x297 () Int)
(declare-fun x349 () Int)
(declare-fun x358 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x96 () Int)
(declare-fun x290 () Int)
(declare-fun x293 () Int)
(declare-fun x67 () Int)
(define-fun x158 ((x62 x62) (x121 Int)) x62 (ite ((_ is x162) x62) (x162 (x232 x62) (+ (x102 x62) x121)) (ite ((_ is x63) x62) (x63 (x243 x62) (x8 x62) (x188 x62) (x147 x62) (+ (x92 x62) x121)) (ite ((_ is x53) x62) (x53 (x10 x62) (x338 x62) (+ x121 (x137 x62))) (x295 (+ (x317 x62) x121))))))
(define-fun x251 ((x220 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220) (<= 0 x220)) x220 (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x184 ((x220 Int)) Int (ite (and (> 0 x220) (>= x220 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x220) x220))
(define-fun x238 ((x157 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x157) (<= 0 x157)))
(define-fun x66 ((x157 Int)) Bool (and (= (x225 x157 115792089237316195423570985008687907853269984665640564039457584007913129639935) x157) (= x157 (x225 115792089237316195423570985008687907853269984665640564039457584007913129639935 x157))))
(define-fun x33 ((x157 Int)) Bool (and (= (x225 0 x157) 0) (= 0 (x225 x157 0))))
(define-fun x135 ((x157 Int)) Bool (= x157 (x225 x157 x157)))
(define-fun x268 ((x157 Int)) Bool (and (x135 x157) (x66 x157) (x33 x157)))
(define-fun x336 ((x157 Int) (x341 Int)) Bool (= (x225 x341 x157) (x225 x157 x341)))
(define-fun x207 ((x157 Int) (x341 Int)) Bool (and (>= (x225 x157 x341) 0) (=> (>= x341 0) (>= x341 (x225 x157 x341))) (=> (<= 0 x157) (<= (x225 x157 x341) x157))))
(define-fun x100 ((x157 Int) (x341 Int)) Bool (and (x207 x157 x341) (x336 x157 x341)))
(define-fun x274 ((x157 Int)) Bool (= (mod x157 26959946667150639794667015087019630673637144422540572481103610249216) (x225 x157 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x241 ((x157 Int)) Bool (and (x274 x157) (x100 x157 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x134 ((x157 Int)) Bool (= (x225 x157 1461501637330902918203684832716283019655932542975) (mod x157 1461501637330902918203684832716283019655932542976)))
(define-fun x161 ((x157 Int)) Bool (and (x134 x157) (x100 x157 1461501637330902918203684832716283019655932542975)))
(define-fun x198 ((x157 Int)) Bool (= (mod x157 256) (x225 x157 255)))
(define-fun x276 ((x157 Int)) Bool (and (x100 x157 255) (x198 x157)))
(define-fun x154 ((x157 Int)) Bool (and (= (x353 115792089237316195423570985008687907853269984665640564039457584007913129639935 x157) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x353 x157 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x106 ((x157 Int)) Bool (and (= x157 (x353 0 x157)) (= x157 (x353 x157 0))))
(define-fun x307 ((x157 Int)) Bool (= x157 (x353 x157 x157)))
(define-fun x323 ((x157 Int)) Bool (and (x106 x157) (x307 x157) (x154 x157)))
(define-fun x20 ((x157 Int) (x341 Int)) Bool (= (x353 x341 x157) (x353 x157 x341)))
(define-fun x250 ((x157 Int) (x341 Int)) Bool (and (=> (<= 0 x157) (<= x157 (x353 x157 x341))) (>= (+ x157 x341) (x353 x157 x341)) (=> (<= 0 x341) (>= (x353 x157 x341) x341))))
(define-fun x329 ((x157 Int) (x341 Int)) Bool (and (x20 x157 x341) (x250 x157 x341)))
(define-fun x112 ((x357 Int)) Int (x114 x357))
(define-fun x316 ((x357 Int)) Int (ite (= x357 164) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x358 x357)))
(define-fun x122 ((x357 Int)) Int (ite (= 128 x357) 36 (x316 x357)))
(define-fun x216 ((x357 Int)) Int (ite (= x357 160) x7 (x122 x357)))
(define-fun x65 ((x357 Int)) Int (ite (= 232 x357) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x216 x357)))
(define-fun x46 ((x357 Int)) Int (ite (= 196 x357) 36 (x65 x357)))
(define-fun x29 ((x357 Int)) Int (ite (= 228 x357) x308 (x46 x357)))
(define-fun x124 ((x357 Int)) Int (ite x159 (x216 x357) (x29 x357)))
(define-fun x311 ((x357 Int)) Int (ite (= x245 x357) 0 (x124 x357)))
(define-fun x183 ((x357 Int)) Int (ite (= x357 x319) x351 (x311 x357)))
(define-fun x28 ((x357 Int)) Int (ite (= x270 x357) x254 (x183 x357)))
(define-fun x244 ((x357 Int)) Int (ite x18 (x358 x357) (ite x11 (x124 x357) (x28 x357))))
(define-fun x131 ((x357 Int)) Int (ite (= x201 x357) x265 (x244 x357)))
(define-fun x305 ((x357 Int)) Int (ite (= x283 x357) x119 (x131 x357)))
(define-fun x91 ((x357 Int)) Int (ite (= x80 x357) x293 (x305 x357)))
(define-fun x343 ((x357 Int)) Int (ite (= x192 x357) x223 (x91 x357)))
(define-fun x356 ((x357 Int)) Int (ite (and (< x357 (+ x103 x286)) (<= x103 x357)) (x114 (+ (- x357 x103) x301)) (x343 x357)))
(define-fun x34 ((x357 Int)) Int (ite (= x306 x357) 0 (x356 x357)))
(define-fun x143 ((x157 Int)) Bool (=> (and (not (= 752823349 x157)) (not (= x157 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (not (= x157 904250603428552709895185118199468575982109441609966099573332780532423983104)) (> x157 10000) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x157)) (not (= 1315048582 x157)) (not (= x157 2544733239)) (not (= x157 18446744073709551615)) (not (= x157 388749022)) (not (= x157 26959946667150639794667015087019630673637144422540572481103610249215)) (not (= x157 464684736)) (not (= x157 2510660263)) (not (= 1461501637330902918203684832716283019655932542975 x157)) (not (= x157 2630751253)) (not (= 292666793 x157))) (not ((_ is x295) (x4 x157)))))
(assert (x238 x235))
(assert (x238 x19))
(assert (= x204 (x227 (x4 x204))))
(assert (x238 x348))
(assert (x238 x302))
(assert (x143 x279))
(assert (x143 x145))
(assert (= x117 (x227 (x4 x117))))
(assert (x238 x290))
(assert (x238 x291))
(assert (x238 x246))
(assert (x238 x245))
(assert (= (x4 2544733239) (x295 2544733239)))
(assert (x238 x279))
(assert (=> (>= 10000 x117) (= (x4 x117) (x295 x117))))
(assert (x238 x301))
(assert (= (x295 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x4 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x288 (or x273 x300)))
(assert (= x212 (x227 (x4 x212))))
(assert (x143 x190))
(assert (x238 x265))
(assert (x238 x41))
(assert (x268 x82))
(assert (x238 x312))
(assert (x238 x289))
(assert (= (or x18 x113) x24))
(assert (= (x295 752823349) (x4 752823349)))
(assert (x143 x36))
(assert (=> (>= 10000 x36) (= (x295 x36) (x4 x36))))
(assert (= (=> (and (or (and (and (= x61 (x251 (+ x245 32))) (= x235 1) (= x163 (x184 (- x61 x319))) (= x186 (x225 26959946667150639794667015087019630673637144422540572481103610249215 x5)) (= x351 (x184 (- x163 32))) (= (x298 0) x327) (= (x251 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x186)) x254) (= (ite x172 x235 (ite (> x272 0) 1 0)) x87) (= (x251 (+ 36 x319)) x245) (= x61 x98) (= false x172) (= x5 (x183 x270)) (= (x251 (+ x319 32)) x270) (= x272 (ite x327 1 0))) (not x99)) (and x99 (and (= x87 x340) (= x319 x98)))) (= (= 0 x340) x99)) x213) x56))
(assert (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x227 (x295 115792089210356248756420345214020892766250353992003419616917011526809519390720))))
(assert (x238 x38))
(assert (x238 x107))
(assert (= (x295 464684736) (x4 464684736)))
(assert (= (x4 388749022) (x295 388749022)))
(assert (x238 x117))
(assert (and (= 3213876088517980551083924184682325205044405987565585670602752 (x320 2 201)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x320 2 227)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x320 2 242)) (= (x320 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 256 (x320 2 8)) (= (x320 2 150) 1427247692705959881058285969449495136382746624) (= 166153499473114484112975882535043072 (x320 2 117)) (= 2923003274661805836407369665432566039311865085952 (x320 2 161)) (= (x320 2 183) 12259964326927110866866776217202473468949912977468817408) (= 1237940039285380274899124224 (x320 2 90)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x320 2 241)) (= 65536 (x320 2 16)) (= 41538374868278621028243970633760768 (x320 2 115)) (= 21778071482940061661655974875633165533184 (x320 2 134)) (= (x320 2 57) 144115188075855872) (= (x320 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 2147483648 (x320 2 31)) (= (x320 2 159) 730750818665451459101842416358141509827966271488) (= 47890485652059026823698344598447161988085597568237568 (x320 2 175)) (= (x320 2 108) 324518553658426726783156020576256) (= (x320 2 177) 191561942608236107294793378393788647952342390272950272) (= (x320 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x320 2 28) 268435456) (= (x320 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 1606938044258990275541962092341162602522202993782792835301376 (x320 2 200)) (= (x320 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x320 2 153) 11417981541647679048466287755595961091061972992) (= 49039857307708443467467104868809893875799651909875269632 (x320 2 185)) (= 37778931862957161709568 (x320 2 75)) (= (x320 2 126) 85070591730234615865843651857942052864) (= 10889035741470030830827987437816582766592 (x320 2 133)) (= (x320 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 1 (x320 2 0)) (= 8 (x320 2 3)) (= 2417851639229258349412352 (x320 2 81)) (= 64 (x320 2 6)) (= (x320 2 79) 604462909807314587353088) (= (x320 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x320 2 80) 1208925819614629174706176) (= 5708990770823839524233143877797980545530986496 (x320 2 152)) (= 1329227995784915872903807060280344576 (x320 2 120)) (= 50216813883093446110686315385661331328818843555712276103168 (x320 2 195)) (= 288230376151711744 (x320 2 58)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x320 2 217)) (= 11692013098647223345629478661730264157247460343808 (x320 2 163)) (= 1267650600228229401496703205376 (x320 2 100)) (= (x320 2 46) 70368744177664) (= 2199023255552 (x320 2 41)) (= (x320 2 34) 17179869184) (= (x320 2 65) 36893488147419103232) (= 9671406556917033397649408 (x320 2 83)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x320 2 252)) (= 3064991081731777716716694054300618367237478244367204352 (x320 2 181)) (= (x320 2 129) 680564733841876926926749214863536422912) (= (x320 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 274877906944 (x320 2 38)) (= (x320 2 155) 45671926166590716193865151022383844364247891968) (= (x320 2 104) 20282409603651670423947251286016) (= 131072 (x320 2 17)) (= (x320 2 61) 2305843009213693952) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x320 2 223)) (= (x320 2 107) 162259276829213363391578010288128) (= (x320 2 26) 67108864) (= 2 (x320 2 1)) (= (x320 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 13164036458569648337239753460458804039861886925068638906788872192 (x320 2 213)) (= 25108406941546723055343157692830665664409421777856138051584 (x320 2 194)) (= 10633823966279326983230456482242756608 (x320 2 123)) (= 23384026197294446691258957323460528314494920687616 (x320 2 164)) (= (x320 2 56) 72057594037927936) (= (x320 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x320 2 20) 1048576) (= (x320 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 16777216 (x320 2 24)) (= 766247770432944429179173513575154591809369561091801088 (x320 2 179)) (= 549755813888 (x320 2 39)) (= 170141183460469231731687303715884105728 (x320 2 127)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x320 2 234)) (= (x320 2 74) 18889465931478580854784) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x320 2 240)) (= (x320 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x320 2 144) 22300745198530623141535718272648361505980416) (= (x320 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 512 (x320 2 9)) (= (x320 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 8192 (x320 2 13)) (= (x320 2 52) 4503599627370496) (= 2854495385411919762116571938898990272765493248 (x320 2 151)) (= (x320 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= (x320 2 160) 1461501637330902918203684832716283019655932542976) (= (x320 2 32) 4294967296) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x320 2 243)) (= 713623846352979940529142984724747568191373312 (x320 2 149)) (= 40564819207303340847894502572032 (x320 2 105)) (= (x320 2 171) 2993155353253689176481146537402947624255349848014848) (= (x320 2 78) 302231454903657293676544) (= 4194304 (x320 2 22)) (= (x320 2 15) 32768) (= 5986310706507378352962293074805895248510699696029696 (x320 2 172)) (= (x320 2 12) 4096) (= (x320 2 89) 618970019642690137449562112) (= 822752278660603021077484591278675252491367932816789931674304512 (x320 2 209)) (= 4951760157141521099596496896 (x320 2 92)) (= (x320 2 82) 4835703278458516698824704) (= (x320 2 77) 151115727451828646838272) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x320 2 232)) (= 1073741824 (x320 2 30)) (= (x320 2 73) 9444732965739290427392) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x320 2 233)) (= 262144 (x320 2 18)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x320 2 247)) (= 348449143727040986586495598010130648530944 (x320 2 138)) (= (x320 2 156) 91343852333181432387730302044767688728495783936) (= (x320 2 139) 696898287454081973172991196020261297061888) (= 26328072917139296674479506920917608079723773850137277813577744384 (x320 2 214)) (= 2596148429267413814265248164610048 (x320 2 111)) (= (x320 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 9223372036854775808 (x320 2 63)) (= (x320 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x320 2 71) 2361183241434822606848) (= (x320 2 23) 8388608) (= (x320 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x320 2 124) 21267647932558653966460912964485513216) (= 4611686018427387904 (x320 2 62)) (= 8589934592 (x320 2 33)) (= (x320 2 162) 5846006549323611672814739330865132078623730171904) (= (x320 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x320 2 114) 20769187434139310514121985316880384) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x320 2 225)) (= 401734511064747568885490523085290650630550748445698208825344 (x320 2 198)) (= (x320 2 128) 340282366920938463463374607431768211456) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x320 2 220)) (= 332306998946228968225951765070086144 (x320 2 118)) (= 18014398509481984 (x320 2 54)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x320 2 218)) (= (x320 2 101) 2535301200456458802993406410752) (= (x320 2 68) 295147905179352825856) (= 2658455991569831745807614120560689152 (x320 2 121)) (= 383123885216472214589586756787577295904684780545900544 (x320 2 178)) (= (x320 2 116) 83076749736557242056487941267521536) (= 44601490397061246283071436545296723011960832 (x320 2 145)) (= (x320 2 140) 1393796574908163946345982392040522594123776) (= 1569275433846670190958947355801916604025588861116008628224 (x320 2 190)) (= (x320 2 70) 1180591620717411303424) (= (x320 2 59) 576460752303423488) (= (x320 2 51) 2251799813685248) (= (x320 2 99) 633825300114114700748351602688) (= (x320 2 143) 11150372599265311570767859136324180752990208) (= (x320 2 29) 536870912) (= 19807040628566084398385987584 (x320 2 94)) (= (x320 2 113) 10384593717069655257060992658440192) (= (x320 2 106) 81129638414606681695789005144064) (= (x320 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x320 2 109) 649037107316853453566312041152512) (= 1361129467683753853853498429727072845824 (x320 2 130)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x320 2 230)) (= (x320 2 66) 73786976294838206464) (= (x320 2 40) 1099511627776) (= 842498333348457493583344221469363458551160763204392890034487820288 (x320 2 219)) (= (x320 2 69) 590295810358705651712) (= (x320 2 36) 68719476736) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x320 2 253)) (= (x320 2 86) 77371252455336267181195264) (= (x320 2 42) 4398046511104) (= 664613997892457936451903530140172288 (x320 2 119)) (= (x320 2 50) 1125899906842624) (= (x320 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x320 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 5192296858534827628530496329220096 (x320 2 112)) (= (x320 2 91) 2475880078570760549798248448) (= 158456325028528675187087900672 (x320 2 97)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x320 2 245)) (= (x320 2 19) 524288) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x320 2 249)) (= 17592186044416 (x320 2 44)) (= 5070602400912917605986812821504 (x320 2 102)) (= (x320 2 2) 4) (= (x320 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 374144419156711147060143317175368453031918731001856 (x320 2 168)) (= (x320 2 174) 23945242826029513411849172299223580994042798784118784) (= (x320 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 562949953421312 (x320 2 49)) (= 18446744073709551616 (x320 2 64)) (= (x320 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 392318858461667547739736838950479151006397215279002157056 (x320 2 188)) (= (x320 2 7) 128) (= 2722258935367507707706996859454145691648 (x320 2 131)) (= 35184372088832 (x320 2 45)) (= 2048 (x320 2 11)) (= (x320 2 141) 2787593149816327892691964784081045188247552) (= 75557863725914323419136 (x320 2 76)) (= 79228162514264337593543950336 (x320 2 96)) (= 187072209578355573530071658587684226515959365500928 (x320 2 167)) (= 316912650057057350374175801344 (x320 2 98)) (= (x320 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 365375409332725729550921208179070754913983135744 (x320 2 158)) (= 16 (x320 2 4)) (= 411376139330301510538742295639337626245683966408394965837152256 (x320 2 208)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x320 2 211)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x320 2 229)) (= (x320 2 14) 16384) (= 147573952589676412928 (x320 2 67)) (= 43556142965880123323311949751266331066368 (x320 2 135)) (= (x320 2 93) 9903520314283042199192993792) (= 1298074214633706907132624082305024 (x320 2 110)) (= (x320 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 93536104789177786765035829293842113257979682750464 (x320 2 166)) (= 174224571863520493293247799005065324265472 (x320 2 137)) (= 22835963083295358096932575511191922182123945984 (x320 2 154)) (= (x320 2 142) 5575186299632655785383929568162090376495104) (= 6129982163463555433433388108601236734474956488734408704 (x320 2 182)) (= 1496577676626844588240573268701473812127674924007424 (x320 2 170)) (= 24519928653854221733733552434404946937899825954937634816 (x320 2 184)) (= (x320 2 186) 98079714615416886934934209737619787751599303819750539264) (= 42535295865117307932921825928971026432 (x320 2 125)) (= 12554203470773361527671578846415332832204710888928069025792 (x320 2 193)) (= (x320 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 5444517870735015415413993718908291383296 (x320 2 132)) (= (x320 2 165) 46768052394588893382517914646921056628989841375232) (= (x320 2 55) 36028797018963968) (= 182687704666362864775460604089535377456991567872 (x320 2 157)) (= 32 (x320 2 5)) (= (x320 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 33554432 (x320 2 25)) (= 9007199254740992 (x320 2 53)) (= 38685626227668133590597632 (x320 2 85)) (= 2097152 (x320 2 21)) (= 19342813113834066795298816 (x320 2 84)) (= (x320 2 103) 10141204801825835211973625643008) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x320 2 246)) (= 51422017416287688817342786954917203280710495801049370729644032 (x320 2 205)) (= 178405961588244985132285746181186892047843328 (x320 2 147)) (= 154742504910672534362390528 (x320 2 87)) (= (x320 2 27) 134217728) (= 784637716923335095479473677900958302012794430558004314112 (x320 2 189)) (= (x320 2 47) 140737488355328) (= 87112285931760246646623899502532662132736 (x320 2 136)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x320 2 221)) (= (x320 2 88) 309485009821345068724781056) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x320 2 231)) (= (x320 2 48) 281474976710656) (= 8796093022208 (x320 2 43)) (= (x320 2 176) 95780971304118053647396689196894323976171195136475136) (= (x320 2 148) 356811923176489970264571492362373784095686656) (= (x320 2 169) 748288838313422294120286634350736906063837462003712) (= (x320 2 122) 5316911983139663491615228241121378304) (= (x320 2 146) 89202980794122492566142873090593446023921664) (= 39614081257132168796771975168 (x320 2 95)) (= 1024 (x320 2 10)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x320 2 210)) (= 4722366482869645213696 (x320 2 72)) (= (x320 2 60) 1152921504606846976) (= 11972621413014756705924586149611790497021399392059392 (x320 2 173)) (= 137438953472 (x320 2 37)) (= (x320 2 35) 34359738368) (= (x320 2 202) 6427752177035961102167848369364650410088811975131171341205504)))
(assert (x238 x352))
(assert (x143 x349))
(assert (=> (>= 10000 x145) (= (x295 x145) (x4 x145))))
(assert (x238 x237))
(assert (x238 x145))
(assert (= (x227 (x4 x79)) x79))
(assert (x238 x253))
(assert (= 18446744073709551615 (x227 (x295 18446744073709551615))))
(assert (= true x280))
(assert (x238 x146))
(assert (=> (>= 10000 x104) (= (x295 x104) (x4 x104))))
(assert (= (x227 (x4 x224)) x224))
(assert (x238 x229))
(assert (x238 x347))
(assert (= (x227 (x4 x279)) x279))
(assert (= (+ 1 (x227 x164)) (x227 (x158 x164 1))))
(assert (x238 x283))
(assert (x143 x333))
(assert (x143 x171))
(assert (x238 x177))
(assert (x238 x191))
(assert (x238 x309))
(assert (x238 x45))
(assert (=> (<= x171 10000) (= (x4 x171) (x295 x171))))
(assert (= 0 (x358 160)))
(assert (=> (>= 10000 x79) (= (x295 x79) (x4 x79))))
(assert (x238 x15))
(assert (=> (>= 10000 x212) (= (x4 x212) (x295 x212))))
(assert (x238 x132))
(assert (= (+ 1 (x227 x304)) (x227 (x158 x304 1))))
(assert (= (x295 1461501637330902918203684832716283019655932542975) (x4 1461501637330902918203684832716283019655932542975)))
(assert (x238 x40))
(assert (x238 x186))
(assert (= (x227 (x295 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x238 x76))
(assert (= (x227 (x4 x36)) x36))
(assert (= (x227 (x4 x139)) x139))
(assert (x238 x43))
(assert (x238 x247))
(assert (x238 x296))
(assert (x238 x64))
(assert (x238 x88))
(assert (x143 x117))
(assert (x238 x261))
(assert (x238 x84))
(assert (= (and x189 x318) x300))
(assert (x238 x163))
(assert (= x71 (=> (and (and (and (and (= x84 (x178 x25)) (<= x349 1461501637330902918203684832716283019655932542975) (= x25 (x53 (x4 x101) x141 0)) (= x1 (x39 (x4 x79))) (= (x53 (x4 x349) (x295 1) 0) x141) (< x152 2630751253) (= x349 x47) (not (> 2510660263 x152)) (= x101 x83) (= x199 (< x296 x202)) (<= x84 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x84) (= x38 x202) (> x1 0) (= 2510660263 x152) (= x226 x84)) (and (and (and (= (x53 (x4 x279) x314 0) x215) (not (= 464684736 x324)) (= x83 x279) (= x72 (x158 x215 2)) (= x324 1315048582) (not (= 292666793 x324)) (not (= 752823349 x324)) (<= x132 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x345 0) (>= 1461501637330902918203684832716283019655932542975 x205) (= (x53 (x4 x205) (x295 1) 0) x314) (<= 0 x132) (not (= x324 388749022)) (= (x39 (x4 x79)) x345) (= (and x105 x313) x59) (< x324 2510660263) (= x313 (= x206 0)) (= x132 x93) (= x206 x64) (= x128 0) (= x132 (x136 x72)) (= x47 x205)) (and (= (or x267 x199) x89) (= x258 x93) (= x267 (and x22 x59)) (= x237 0) (= x22 (= 0 x258)))) (and (= x264 x83) (= x166 x226) (= x326 (x53 (x4 x264) x262 0)) (<= x289 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x115 x47) (> 2630751253 x291) (> x45 0) (= (x39 (x4 x79)) x45) (= 2544733239 x291) (= x64 x289) (not (= x291 2510660263)) (= x95 (x158 x326 1)) (<= 0 x289) (not (> 2510660263 x291)) (= x262 (x53 (x4 x115) (x295 1) 0)) (= x289 (x140 x95)) (= 0 x110) (= x105 (= 0 x166)) (>= 1461501637330902918203684832716283019655932542975 x115)))) (and (= x27 (x53 (x4 x151) x155 0)) (= x296 x96) (= x211 (x39 (x4 x79))) (<= x108 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x130 x47) (not (= 292666793 x297)) (not (= 388749022 x297)) (not (= x297 752823349)) (= 1315048582 x297) (not (= 464684736 x297)) (<= x130 1461501637330902918203684832716283019655932542975) (= (x136 x230) x108) (= x38 x108) (< 0 x211) (= (x53 (x4 x130) (x295 1) 0) x155) (= (x158 x27 2) x230) (<= 0 x108) (= x83 x151) (> 2510660263 x297))) (and (> 2630751253 x299) (= (x39 (x4 x79)) x44) (= x47 x85) (= (x53 (x4 x224) x55 0) x234) (<= x54 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x299 2510660263)) (<= x239 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x85) (not (> 2510660263 x299)) (= x315 (x53 (x4 x85) (x295 1) 0)) (>= x239 0) (= x126 (x4 x204)) (= (x203 x265 8) x224) (= (x353 x239 x73) x133) (= x96 x54) (= (x225 255 x265) x116) (= x309 x83) (= x73 (x68 1 x116)) (= x260 (x53 (x4 x309) x315 0)) (< 0 x44) (= x239 (x52 x234)) (= x90 (x158 x260 1)) (= (x140 x90) x54) (= 2544733239 x299) (<= 0 x54))) x89)))
(assert (x238 x36))
(assert (= 2510660263 (x227 (x295 2510660263))))
(assert (x238 x202))
(assert (= 388749022 (x227 (x295 388749022))))
(assert (= (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x2) (= x15 (x140 x9)) (= x78 (x178 x334)) (= x55 (x158 x334 3)) (= (x178 x334) x204) (not (< x19 x197)) (= (x68 x285 96) x119) (= x334 (x53 (x4 x150) x322 0)) (> x78 0) (= x6 (x225 x2 x97)) (= (x251 (+ x192 32)) x103) (= x120 (= 0 x6)) (= x168 (x63 (x295 52) (x295 32) (x4 x265) (x4 (x203 x119 96)) 0)) (= (x251 (+ 32 x80)) x201) (>= x2 0) (= x139 (x203 x265 8)) (= x275 (x53 (x4 x139) x55 0)) (= x2 (x52 x275)) (= x322 (x53 (x4 x190) (x295 1) 0)) (= (x251 (+ x283 20)) x192) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x19) (>= x204 0) (= x19 (x136 x23)) (= (x225 1461501637330902918203684832716283019655932542975 x200) x190) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x78) (= (x251 (+ x286 x103)) x306) (= x214 (> x30 0)) (>= x19 0) (= (x184 (- x192 x80)) x174) (= (x251 (+ 32 x201)) x283) (not x257) (>= x15 0) (= x97 (x68 1 x146)) (<= 0 x78) (= (x158 x9 1) x23) (= (x158 x334 1) x9) (= x257 (< x197 x15)) (= (x184 (- x174 32)) x293) (= x286 (mod (* 32 x223) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x34 x192) x30) (<= x204 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x146 (x225 255 x265)) x120 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x15)) (and (=> (and (and (and (= (x34 x192) x240) (= x173 (x34 x165)) (= (x251 (+ 32 x192)) x165) (= x189 (> x173 (x227 x168))) (< 0 x240)) (or (and (not x189) (and (= x222 (x53 (x4 x173) x168 0)) (= x222 x50))) (and (and (= x175 (x53 x168 (x4 x173) 0)) (= x175 x50)) x189))) x214) x31) (=> (and (= x168 x126) (not x214)) x71))) x335))
(assert (= x265 (x227 (x4 x265))))
(assert (x143 x79))
(assert (x238 x285))
(assert (x238 x111))
(assert (x238 x152))
(assert (x238 x97))
(assert (= (x227 (x158 x215 2)) (+ (x227 x215) 2)))
(assert (x238 x32))
(assert (x238 x125))
(assert (= 26959946667150639794667015087019630673637144422540572481103610249215 (x227 (x295 26959946667150639794667015087019630673637144422540572481103610249215))))
(assert (x143 x151))
(assert (x143 x115))
(assert (= (x227 (x4 x85)) x85))
(assert (x238 x85))
(assert (= (or x159 x12) x75))
(assert (x238 x130))
(assert (= (=> (and (and (and (and (and (and (not (= x88 464684736)) (> x107 0) (> 2510660263 x88) (= x149 x290) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x149) (>= x149 0) (= x107 (x39 (x4 x79))) (= x328 0) (= x339 (and x337 x49)) (= x88 1315048582) (= x142 (x53 (x4 x333) (x295 1) 0)) (= x149 (x136 x344)) (not (= 752823349 x88)) (<= x333 1461501637330902918203684832716283019655932542975) (not (= x88 292666793)) (= (x158 x160 2) x344) (= x212 x83) (= x160 (x53 (x4 x212) x142 0)) (= x176 x60) (= x333 x47) (= (= 0 x176) x337) (not (= x88 388749022))) (and (= x193 (or x17 x138)) (not (= 292666793 x37)) (= x109 x150) (<= x43 1461501637330902918203684832716283019655932542975) (<= 0 x76) (= (x114 x271) x223) (= x312 0) (= x332 (x53 (x4 x200) (x295 4) 0)) (not (= x13 2)) (> 2510660263 x37) (= x138 (and x339 x219)) (or (and (<= x236 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x32 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x32 x236) (= (<= x236 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x32)))) (= x271 (x251 (+ x310 4))) (= x169 x200) (<= 0 x43) (= x177 x200) (< 0 x67) (= x266 x76) (= x43 x285) (<= x200 1461501637330902918203684832716283019655932542975) (= (x251 (+ 32 x271)) x301) (= x249 (mod (* x223 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x40 x236)) (<= x348 255) (= x123 x197) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x13) (= x196 x263) (= 388749022 x37) (= x180 x290) (not (< 18446744073709551615 x223)) (<= 0 x13) (<= x76 1461501637330902918203684832716283019655932542975) (<= 0 x325) (= (x294 x332) x348) (= x32 (x251 (+ 31 x271))) (< x348 256) x193 (not (> 4 x236)) (not (> x248 18446744073709551615)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x342) (and (< x342 128) (= (<= x342 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= (x39 (x4 x79)) x67) (= x125 x266) (= x194 x265) (= x153 (< 0 x348)) (= x342 (x184 (- x236 4))) (= x221 x150) (= 0 x196) (>= 1461501637330902918203684832716283019655932542975 x325) (= x248 x310) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236) true) (> x236 131)) (= x40 (x251 (+ x301 x249))) (= (= x180 0) x219) (>= x348 0))) (and (= x49 (= x94 0)) (not (= x69 2510660263)) (= x269 x60) (= x94 x354) (not (> 2510660263 x69)) (= x118 x47) (= (x158 x164 1) x350) (>= x269 0) (>= 1461501637330902918203684832716283019655932542975 x118) (= (x140 x350) x269) (= x69 2544733239) (<= x269 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x352 0) (= (x53 (x4 x118) (x295 1) 0) x21) (= (x39 (x4 x79)) x284) (= x83 x242) (> x284 0) (= (x53 (x4 x242) x21 0) x164) (< x69 2630751253))) (and (= x36 x47) (= x321 x83) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x247) (not (> 2510660263 x42)) (= (x53 (x4 x321) x16 0) x259) (< 0 x281) (= x42 2510660263) (= (x53 (x4 x36) (x295 1) 0) x16) (< x42 2630751253) (<= x36 1461501637330902918203684832716283019655932542975) (= (> x111 x35) x17) (>= x247 0) (= x247 x354) (= (x178 x259) x247) (= (x39 (x4 x79)) x281) (= x208 x111))) (and (= (x39 (x4 x79)) x246) (= x86 (x53 (x4 x292) x277 0)) (not (= 388749022 x209)) (not (= 292666793 x209)) (not (= x209 464684736)) (< x209 2510660263) (<= x195 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x14 x35) (>= 1461501637330902918203684832716283019655932542975 x228) (= x47 x228) (= (x53 (x4 x228) (x295 1) 0) x277) (= x195 (x136 x278)) (= x278 (x158 x86 2)) (= x292 x83) (= x209 1315048582) (not (= 752823349 x209)) (>= x195 0) (= x195 x208) (> x246 0))) (and (= x347 (x144 (x4 x79))) (<= x171 1461501637330902918203684832716283019655932542975) (> x117 0) (<= 0 x346) (= x14 x127) (> 2630751253 x253) (= (x140 x233) x127) (<= x217 1461501637330902918203684832716283019655932542975) (not (= x145 x117)) (not (< x253 2510660263)) (= x58 (x53 (x4 x171) (x295 1) 0)) (<= 0 x261) (= (x39 (x4 x79)) x330) (< 0 x79) x57 (<= 0 x347) (>= 1461501637330902918203684832716283019655932542975 x187) (<= 0 x41) (= x261 (x144 (x4 x145))) (= x48 (< 0 (x39 (x4 x145)))) (= (x158 x304 1) x233) (= 2544733239 x253) (>= x127 0) (= x218 false) (= (x144 (x4 x117)) x346) (> x330 0) (< 0 x145) (>= 1461501637330902918203684832716283019655932542975 x41) (= x57 (> (x39 (x4 x79)) 0)) (<= 0 x47) (= x41 x191) (not (= x253 2510660263)) (<= 0 x187) (>= x217 0) (= false x182) (<= x127 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x145 1461501637330902918203684832716283019655932542975) (<= x117 1461501637330902918203684832716283019655932542975) (= false x252) (= x47 x171) (= 4 x331) (= (> (x39 (x4 x117)) 0) x282) (>= 1461501637330902918203684832716283019655932542975 x79) x282 (= false x355) (not (= x79 x145)) (= x302 388749022) (= x304 (x53 (x4 x104) x58 0)) (<= x47 1461501637330902918203684832716283019655932542975) (= x104 x83) x48 (= x285 x187) (not (= x117 x79)))) (and (=> (and (not x153) (and (and (= (ite (< 0 (ite x181 1 0)) 1 0) x3) (= x181 (x298 904250603428552709895185118199468575982109441609966099573332780532423983104)) (= x255 (= x3 0)) (= (x122 160) x210) (= (x225 26959946667150639794667015087019630673637144422540572481103610249215 x210) x77) (= (x251 (+ x77 904250603428552709895185118199468575982109441609966099573332780532423983104)) x7)) (or (and (and (= x3 x340) (= x319 196)) x255) (and (and (= (ite x51 x26 (ite (< 0 x287) 1 0)) x229) (= (= x229 0) x81) (= x340 (ite x81 1 0)) (= (ite x156 1 0) x287) (= x51 false) (= x74 (x225 26959946667150639794667015087019630673637144422540572481103610249215 x82)) (= x82 (x46 228)) (= 1 x26) (= x156 (x298 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (= x319 264) (= x308 (x251 (+ x74 904250603428552709895185118199468575982109441609966099573332780532423983104)))) (not x255))))) x56) (=> (and x153 (= 128 x80)) x335))) x185))
(assert (x143 x204))
(assert (x238 x263))
(assert (x143 x173))
(assert (= x159 (and x255 x129)))
(assert (x238 x77))
(assert (x238 x44))
(assert (x238 x330))
(assert (x238 x78))
(assert (x161 x200))
(assert (x238 x30))
(assert (x238 x14))
(assert (= x242 (x227 (x4 x242))))
(assert (x238 x324))
(assert (=> (<= x349 10000) (= (x4 x349) (x295 x349))))
(assert (x238 x139))
(assert (=> (>= 10000 x150) (= (x4 x150) (x295 x150))))
(assert (= (x227 (x158 x260 1)) (+ (x227 x260) 1)))
(assert (=> (>= 10000 x190) (= (x4 x190) (x295 x190))))
(assert (x238 x292))
(assert (x268 x210))
(assert (= (mod (* 79228162514264337593543950336 x285) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x68 x285 96)))
(assert (x238 x271))
(assert (=> (<= x151 10000) (= (x4 x151) (x295 x151))))
(assert (= (x227 (x295 292666793)) 292666793))
(assert (=> (>= 10000 x242) (= (x295 x242) (x4 x242))))
(assert (=> (<= x205 10000) (= (x4 x205) (x295 x205))))
(assert (= (+ 1 (x227 x9)) (x227 (x158 x9 1))))
(assert (=> (>= 10000 x85) (= (x295 x85) (x4 x85))))
(assert (x238 x306))
(assert (x238 x171))
(assert (x238 x13))
(assert (x238 x209))
(assert (x238 x217))
(assert (x238 x179))
(assert (= (x227 (x4 (x203 x119 96))) (x203 x119 96)))
(assert (x238 x319))
(assert (x238 x221))
(assert (= x12 (and (not x255) x129)))
(assert (x238 x47))
(assert (=> (>= 10000 x200) (= (x4 x200) (x295 x200))))
(assert (= (x295 2630751253) (x4 2630751253)))
(assert (x143 x118))
(assert (x238 x351))
(assert (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x227 (x295 904250603428552709895185118199468575982109441609966099573332780532423983104))))
(assert (x238 x287))
(assert (=> (<= x115 10000) (= (x295 x115) (x4 x115))))
(assert (x238 x73))
(assert (= x113 (or x70 x11)))
(assert (x323 x73))
(assert (x238 x61))
(assert (= x349 (x227 (x4 x349))))
(assert (x238 x349))
(assert (= (x295 904250603428552709895185118199468575982109441609966099573332780532423983104) (x4 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x143 x212))
(assert (x268 255))
(assert (x238 x83))
(assert (x143 x321))
(assert (x238 x110))
(assert (= (x295 292666793) (x4 292666793)))
(assert (x238 x224))
(assert (x268 1461501637330902918203684832716283019655932542975))
(assert (x238 x115))
(assert (x238 x196))
(assert (x143 x150))
(assert (x238 x80))
(assert (x238 x331))
(assert (x238 x190))
(assert (x143 x130))
(assert (x238 x239))
(assert (x238 x119))
(assert (x238 x201))
(assert (x238 x281))
(assert (= x309 (x227 (x4 x309))))
(assert (= x129 (and (not x153) x280)))
(assert (x143 x242))
(assert (= (x227 (x295 2544733239)) 2544733239))
(assert (x241 x210))
(assert (x238 x54))
(assert (= (=> (and (= (not (< 1 x179)) x170) (= x179 (x34 x192))) (and (=> (= x50 x126) x71) x170)) x31))
(assert (x143 x228))
(assert (x241 x82))
(assert (x268 x200))
(assert (x238 x7))
(assert (= 1461501637330902918203684832716283019655932542975 (x227 (x295 1461501637330902918203684832716283019655932542975))))
(assert (x238 x94))
(assert (x238 x123))
(assert (x143 x200))
(assert (= x228 (x227 (x4 x228))))
(assert (x143 (x203 x119 96)))
(assert (x238 x248))
(assert (x238 x194))
(assert (x238 x2))
(assert (x238 x67))
(assert (= (and (not x99) x75) x70))
(assert (= x171 (x227 (x4 x171))))
(assert (x238 x35))
(assert (= 2630751253 (x227 (x295 2630751253))))
(assert (= (x227 (x4 x205)) x205))
(assert (x238 x212))
(assert (x238 x340))
(assert (x238 x133))
(assert (x238 x310))
(assert (= (x358 x270) 0))
(assert (x238 x333))
(assert (=> (>= 10000 x309) (= (x4 x309) (x295 x309))))
(assert (x238 x151))
(assert (= (x227 (x295 464684736)) 464684736))
(assert (= (x295 26959946667150639794667015087019630673637144422540572481103610249215) (x4 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (= (x227 (x158 x334 1)) (+ (x227 x334) 1)))
(assert (x238 x166))
(assert (= (+ 2 (x227 x27)) (x227 (x158 x27 2))))
(assert (x276 x265))
(assert (x238 x270))
(assert (= x318 (and x214 x24)))
(assert (= x145 (x227 (x4 x145))))
(assert (x238 x293))
(assert (x238 x236))
(assert (not x185))
(assert (= (+ (x227 x160) 2) (x227 (x158 x160 2))))
(assert (x238 x174))
(assert (=> (<= x224 10000) (= (x295 x224) (x4 x224))))
(assert (x238 x249))
(assert (x143 x205))
(assert (x238 x228))
(assert (x238 x192))
(assert (x238 x79))
(assert (= (x227 (x4 x150)) x150))
(assert (x238 x205))
(assert (= (div x119 79228162514264337593543950336) (x203 x119 96)))
(assert (= x213 (=> (and (= x98 x80) (< 0 x87)) x335)))
(assert (x143 x292))
(assert (x238 x3))
(assert (x238 x116))
(assert (x238 x211))
(assert (= x130 (x227 (x4 x130))))
(assert (x268 x265))
(assert (x238 x60))
(assert (=> (>= 10000 x204) (= (x295 x204) (x4 x204))))
(assert (=> (<= x264 10000) (= (x4 x264) (x295 x264))))
(assert (= (x203 x265 8) (div x265 256)))
(assert (x238 x223))
(assert (x238 x264))
(assert (=> (>= 10000 x139) (= (x4 x139) (x295 x139))))
(assert (x238 x101))
(assert (= x190 (x227 (x4 x190))))
(assert (= (+ (x227 x86) 2) (x227 (x158 x86 2))))
(assert (x238 x26))
(assert (= (+ (x227 x334) 3) (x227 (x158 x334 3))))
(assert (= (+ (x227 x326) 1) (x227 (x158 x326 1))))
(assert (= (x295 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x4 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x238 x74))
(assert (x238 x325))
(assert (x268 x5))
(assert (x238 x321))
(assert (=> (<= x101 10000) (= (x4 x101) (x295 x101))))
(assert (= (x4 (x227 x168)) x168))
(assert (x268 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x238 x98))
(assert (x238 x254))
(assert (= (x4 2510660263) (x295 2510660263)))
(assert (x238 x345))
(assert (=> (>= 10000 x173) (= (x295 x173) (x4 x173))))
(assert (=> (>= 10000 x265) (= (x4 x265) (x295 x265))))
(assert (x238 x82))
(assert (x238 x6))
(assert (x238 x37))
(assert (x238 x272))
(assert (x238 x354))
(assert (x238 x128))
(assert (x143 x309))
(assert (= x273 (and x318 (not x189))))
(assert (x238 x187))
(assert (x268 x97))
(assert (x143 x139))
(assert (x238 x109))
(assert (x238 x69))
(assert (= (x227 (x4 x118)) x118))
(assert (x238 x169))
(assert (x238 x346))
(assert (x238 x180))
(assert (=> (>= 10000 x292) (= (x4 x292) (x295 x292))))
(assert (x143 x85))
(assert (x238 x127))
(assert (x329 x239 x73))
(assert (x238 x197))
(assert (x238 x103))
(assert (x238 x208))
(assert (x143 x264))
(assert (= x151 (x227 (x4 x151))))
(assert (x238 x284))
(assert (= x264 (x227 (x4 x264))))
(assert (= x173 (x227 (x4 x173))))
(assert (x238 x108))
(assert (x238 x204))
(assert (x238 x328))
(assert (= (and x153 x280) x18))
(assert (=> (>= 10000 (x203 x119 96)) (= (x4 (x203 x119 96)) (x295 (x203 x119 96)))))
(assert (x238 x303))
(assert (x143 x265))
(assert (x238 x269))
(assert (= 0 (x358 x165)))
(assert (x238 x150))
(assert (=> (>= 10000 x333) (= (x4 x333) (x295 x333))))
(assert (=> (<= x321 10000) (= (x4 x321) (x295 x321))))
(assert (= x333 (x227 (x4 x333))))
(assert (x143 x104))
(assert (x238 x200))
(assert (x268 x2))
(assert (= (x358 228) 0))
(assert (x238 x240))
(assert (x323 x239))
(assert (x241 x5))
(assert (= x101 (x227 (x4 x101))))
(assert (x143 x224))
(assert (x238 x258))
(assert (x238 x96))
(assert (x238 x118))
(assert (= x256 (or x148 x288)))
(assert (x100 x2 x97))
(assert (= x11 (and x75 x99)))
(assert (=> (>= 10000 x130) (= (x295 x130) (x4 x130))))
(assert (= (and (not x214) x24) x148))
(assert (= (x227 (x4 x292)) x292))
(assert (=> (<= x279 10000) (= (x4 x279) (x295 x279))))
(assert (x238 x210))
(assert (=> (>= 10000 x228) (= (x4 x228) (x295 x228))))
(assert (x143 x101))
(assert (=> (>= 10000 x118) (= (x295 x118) (x4 x118))))
(assert (x238 x42))
(assert (x238 x165))
(assert (x238 x299))
(assert (x238 x206))
(assert (x238 x226))
(assert (= (x68 1 x146) (mod (ite (< x146 256) (x320 2 x146) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x295 1315048582) (x4 1315048582)))
(assert (= x321 (x227 (x4 x321))))
(assert (x238 x149))
(assert (x238 x176))
(assert (= (mod (ite (> 256 x116) (x320 2 x116) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x68 1 x116)))
(assert (x238 x242))
(assert (x238 x297))
(assert (= 1315048582 (x227 (x295 1315048582))))
(assert (= x200 (x227 (x4 x200))))
(assert (x238 x93))
(assert (= (x227 (x4 x115)) x115))
(assert (x238 x342))
(assert (= (x227 (x4 x104)) x104))
(assert (x238 x1))
(assert (x238 x104))
(assert (= (x227 (x295 752823349)) 752823349))
(assert (= (x295 18446744073709551615) (x4 18446744073709551615)))
(assert (x238 x286))
(assert (x238 x195))
(assert (x238 x87))
(assert (x238 x5))
(assert (x238 x266))
(assert (x238 x308))
(assert (x238 x173))
(check-sat)
(exit)