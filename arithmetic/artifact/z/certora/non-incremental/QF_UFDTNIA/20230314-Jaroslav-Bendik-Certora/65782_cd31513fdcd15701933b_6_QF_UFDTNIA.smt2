(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x157 0)) (((x55 (x111 x157) (x76 Int)) (x140 (x116 x157) (x19 x157) (x62 Int)) (x161 (x166 Int)))))
(declare-fun x165 () Int)
(declare-fun x73 () Int)
(declare-fun x99 () Int)
(declare-fun x125 () Bool)
(declare-fun x126 () Bool)
(declare-fun x108 () Int)
(declare-fun x120 () Bool)
(declare-fun x88 () Int)
(declare-fun x35 () Int)
(declare-fun x3 () Bool)
(declare-fun x9 () Int)
(declare-fun x131 () Bool)
(declare-fun x34 () Int)
(declare-fun x48 () Int)
(declare-fun x114 () Int)
(declare-fun x94 () Bool)
(declare-fun x127 () Int)
(declare-fun x4 () Int)
(declare-fun x27 () Int)
(declare-fun x110 (Int) x157)
(declare-fun x150 () Bool)
(declare-fun x137 () Int)
(declare-fun x152 () Int)
(declare-fun x158 (Int Int) Int)
(declare-fun x106 () Int)
(declare-fun x75 () Int)
(declare-fun x24 () Int)
(declare-fun x141 () Int)
(declare-fun x144 () Bool)
(declare-fun x36 () Int)
(declare-fun x22 (Int) Int)
(declare-fun x107 () Bool)
(declare-fun x63 () Int)
(declare-fun x42 () Int)
(declare-fun x160 () Bool)
(declare-fun x98 () Bool)
(declare-fun x45 () Int)
(declare-fun x90 () Int)
(declare-fun x92 () Bool)
(declare-fun x82 () Int)
(declare-fun x6 () Bool)
(declare-fun x15 () Bool)
(declare-fun x164 () Bool)
(declare-fun x122 () Int)
(declare-fun x109 () Int)
(declare-fun x124 () Bool)
(declare-fun x121 () Int)
(declare-fun x103 () Int)
(declare-fun x53 () Int)
(declare-fun x33 () Bool)
(declare-fun x83 () Int)
(declare-fun x7 () Int)
(declare-fun x100 () Int)
(declare-fun x105 () Bool)
(declare-fun x46 () Bool)
(declare-fun x159 () Int)
(declare-fun x132 (Int) Int)
(declare-fun x149 () Int)
(declare-fun x163 () Int)
(declare-fun x135 () Bool)
(declare-fun x61 () Int)
(declare-fun x49 (Int) Int)
(declare-fun x145 (x157) Int)
(declare-fun x58 (x157) Int)
(declare-fun x28 () Bool)
(declare-fun x101 () Bool)
(declare-fun x123 () Bool)
(declare-fun x38 () Int)
(declare-fun x74 () Int)
(declare-fun x148 () Int)
(declare-fun x12 () Bool)
(declare-fun x91 () Bool)
(declare-fun x139 () Int)
(declare-fun x86 () Int)
(declare-fun x1 () Int)
(declare-fun x69 () Int)
(declare-fun x87 (Int) Int)
(declare-fun x13 () Bool)
(declare-fun x31 () Bool)
(declare-fun x59 () x157)
(declare-fun x56 () Int)
(declare-fun x138 () Int)
(declare-fun x11 (x157) Int)
(declare-fun x79 () Bool)
(declare-fun x37 () Int)
(declare-fun x70 () Bool)
(declare-fun x17 () Bool)
(declare-fun x51 () Bool)
(declare-fun x96 () Bool)
(declare-fun x129 () Int)
(declare-fun x29 () Int)
(declare-fun x64 (x157) Int)
(declare-fun x104 () Int)
(declare-fun x57 () Int)
(declare-fun x118 () Bool)
(declare-fun x102 () Int)
(declare-fun x128 () Int)
(declare-fun x117 () Int)
(declare-fun x155 () Int)
(declare-fun x40 () Int)
(declare-fun x112 () Bool)
(declare-fun x134 () Int)
(declare-fun x54 () Int)
(declare-fun x66 () Bool)
(declare-fun x50 () Int)
(declare-fun x2 () Bool)
(declare-fun x84 () Int)
(declare-fun x32 () Bool)
(declare-fun x30 () x157)
(declare-fun x44 () Int)
(declare-fun x156 () Bool)
(declare-fun x25 () Int)
(declare-fun x151 () Bool)
(declare-fun x60 () Bool)
(declare-fun x43 () Bool)
(declare-fun x81 () Int)
(declare-fun x85 () Int)
(declare-fun x95 () Bool)
(declare-fun x47 () Bool)
(declare-fun x130 (Int Int) Int)
(declare-fun x8 () Bool)
(declare-fun x142 () Int)
(declare-fun x77 () Bool)
(define-fun x147 ((x157 x157) (x10 Int)) x157 (ite ((_ is x140) x157) (x140 (x116 x157) (x19 x157) (+ (x62 x157) x10)) (ite ((_ is x55) x157) (x55 (x111 x157) (+ x10 (x76 x157))) (x161 (+ (x166 x157) x10)))))
(define-fun x72 ((x113 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x113) (>= x113 0)) x113 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x67 ((x113 Int)) Int (ite (and (< x113 0) (>= x113 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) x113))
(define-fun x162 ((x20 Int)) Bool (and (<= 0 x20) (< x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x16 ((x20 Int)) Bool (and (= (x130 115792089237316195423570985008687907853269984665640564039457584007913129639935 x20) x20) (= x20 (x130 x20 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x153 ((x20 Int)) Bool (and (= (x130 0 x20) 0) (= (x130 x20 0) 0)))
(define-fun x119 ((x20 Int)) Bool (= (x130 x20 x20) x20))
(define-fun x39 ((x20 Int)) Bool (and (x119 x20) (x16 x20) (x153 x20)))
(define-fun x133 ((x20 Int) (x21 Int)) Bool (= (x130 x21 x20) (x130 x20 x21)))
(define-fun x89 ((x20 Int) (x21 Int)) Bool (and (>= (x130 x20 x21) 0) (=> (>= x21 0) (<= (x130 x20 x21) x21)) (=> (<= 0 x20) (<= (x130 x20 x21) x20))))
(define-fun x18 ((x20 Int) (x21 Int)) Bool (and (x89 x20 x21) (x133 x20 x21)))
(define-fun x65 ((x20 Int)) Bool (= (x130 x20 1) (mod x20 2)))
(define-fun x71 ((x20 Int)) Bool (and (x65 x20) (x18 x20 1)))
(define-fun x143 ((x20 Int)) Bool (= (x130 x20 127) (mod x20 128)))
(define-fun x26 ((x20 Int)) Bool (and (x143 x20) (x18 x20 127)))
(define-fun x23 ((x5 Int)) Int (ite (= 128 x5) x148 (x22 x5)))
(define-fun x146 ((x5 Int)) Int (ite (= x5 160) x100 (x49 x5)))
(define-fun x41 ((x5 Int)) Int (ite (= x5 160) x152 (x49 x5)))
(define-fun x167 ((x5 Int)) Int (ite (= x5 192) x141 (x146 x5)))
(define-fun x97 ((x5 Int)) Int (ite x92 (x49 x5) (ite x101 (ite x112 (x146 x5) (x167 x5)) (x41 x5))))
(define-fun x93 ((x5 Int)) Int (ite (= x5 x99) 32 (x132 x5)))
(define-fun x115 ((x5 Int)) Int (ite (= x38 x5) x50 (x93 x5)))
(define-fun x78 ((x5 Int)) Int (ite (= x24 x5) x4 (x115 x5)))
(define-fun x14 ((x5 Int)) Int (ite (= x5 x129) x44 (x78 x5)))
(define-fun x80 ((x5 Int)) Int (ite (= x5 x29) x69 (x14 x5)))
(define-fun x136 ((x5 Int)) Int (ite (= x121 x5) x48 (x80 x5)))
(define-fun x52 ((x5 Int)) Int (ite x33 (x80 x5) (ite x91 (x14 x5) (ite x95 (x78 x5) (ite x79 (x115 x5) (x136 x5))))))
(define-fun x154 ((x5 Int)) Int (ite (= x5 x122) 0 (x52 x5)))
(define-fun x68 ((x20 Int)) Bool (=> (and (not (= x20 826074471)) (not (= 404098525 x20)) (not (= x20 2514000705)) (not (= x20 3337024914)) (not (= 2376452955 x20)) (not (= 2495578189 x20)) (not (= 1461501637330902918203684832716283019655932542975 x20)) (not (= 117300739 x20)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x20)) (not (= 3017275065 x20)) (< 10000 x20) (not (= x20 157198259))) (not ((_ is x161) (x110 x20)))))
(assert (x162 x108))
(assert (x162 x134))
(assert (= (x110 117300739) (x161 117300739)))
(assert (x39 127))
(assert (= (x161 1461501637330902918203684832716283019655932542975) (x110 1461501637330902918203684832716283019655932542975)))
(assert (= (x11 (x161 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x68 x149))
(assert (= (+ (x11 x59) 1) (x11 (x147 x59 1))))
(assert (x162 x99))
(assert (x162 x138))
(assert (x162 x40))
(assert (x162 x139))
(assert (= (x11 (x161 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= 2376452955 (x11 (x161 2376452955))))
(assert (= x79 (and (not x105) x98)))
(assert (= (x161 157198259) (x110 157198259)))
(assert (= (x11 (x161 404098525)) 404098525))
(assert (= (=> (= 1 x128) x3) x70))
(assert (x162 x75))
(assert (x162 x9))
(assert (=> (>= 10000 x34) (= (x161 x34) (x110 x34))))
(assert (= (and x131 x47) x77))
(assert (= (and x12 x151) x131))
(assert (= (x161 2495578189) (x110 2495578189)))
(assert (= (and x60 x43) x92))
(assert (x162 x25))
(assert (x162 x69))
(assert (x162 x103))
(assert (x162 x148))
(assert (= 826074471 (x11 (x161 826074471))))
(assert (x162 x37))
(assert (x162 x165))
(assert (x162 x102))
(assert (= (x11 (x161 157198259)) 157198259))
(assert (= x149 (x11 (x110 x149))))
(assert (= x8 (or x79 x95 x31 x91 x33)))
(assert (x162 x117))
(assert (x162 x109))
(assert (= x112 (and (not x156) x135)))
(assert (x162 x149))
(assert (= (=> (and (and (= x83 x90) (= (= x109 x90) x164) (= x139 x109) (= x139 x25)) (and (= x27 x25) (= (ite (= 0 x99) x128 (ite (= x99 32) x36 (ite (= 64 x99) x99 (ite x126 (x52 x99) (x154 x99))))) x103) (< x74 826074471) (<= x45 1461501637330902918203684832716283019655932542975) (<= x40 1461501637330902918203684832716283019655932542975) (<= 0 x53) (= x155 0) (>= x40 0) (<= 0 x45) (= x138 x45) (> x108 0) (<= x27 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 404098525 x74) (>= 1461501637330902918203684832716283019655932542975 x53) (>= x27 0) (not (= x74 157198259)) (= (x145 (x110 x34)) x108) (not (= x74 117300739)))) x164) x124))
(assert (x39 x159))
(assert (x162 x44))
(assert (x162 x159))
(assert (x162 x42))
(assert (= 0 (x49 160)))
(assert (x162 x127))
(assert (= (and (not x66) x94) x160))
(assert (x162 x7))
(assert (= 0 (x49 224)))
(assert (x162 x34))
(assert (x162 x84))
(assert (x162 x29))
(assert (x39 x127))
(assert (x68 x34))
(assert (= 2514000705 (x11 (x161 2514000705))))
(assert (= (x161 2376452955) (x110 2376452955)))
(assert (= x135 (and x66 x94)))
(assert (= (and x8 (not x107)) x126))
(assert (= (x49 256) 0))
(assert (x162 x88))
(assert (= (x11 (x161 3337024914)) 3337024914))
(assert (x162 x24))
(assert (= x43 true))
(assert (= (x161 826074471) (x110 826074471)))
(assert (=> (>= 10000 x149) (= (x110 x149) (x161 x149))))
(assert (x162 x163))
(assert (x162 x129))
(assert (x162 x104))
(assert (x162 x141))
(assert (x26 x127))
(assert (x162 x38))
(assert (= (=> (and (or (and (= x122 (x72 (+ x50 x24))) x107) (not x107)) (= (> x106 x50) x107)) x124) x123))
(assert (= (x161 3337024914) (x110 3337024914)))
(assert (x162 x73))
(assert (= (and x15 x77) x31))
(assert (x162 x50))
(assert (= (x161 2514000705) (x110 2514000705)))
(assert (not x6))
(assert (x162 x155))
(assert (= (and x131 (not x47)) x91))
(assert (x162 x100))
(assert (x162 x90))
(assert (x162 x48))
(assert (x162 x1))
(assert (x162 x122))
(assert (= x32 (and x8 x107)))
(assert (= x6 (=> (and (and (= (< 0 (x145 (x110 x149))) x118) (<= x149 1461501637330902918203684832716283019655932542975) (= x138 x35) (>= 1461501637330902918203684832716283019655932542975 x34) x144 (= false x17) (= (x145 (x110 x34)) x163) (< 0 x149) x118 (= x144 (> (x145 (x110 x34)) 0)) (> x163 0) (>= 1461501637330902918203684832716283019655932542975 x53) (>= x114 0) (not (= x149 x34)) (= 404098525 x81) (= 0 x1) (>= x53 0) (>= x137 0) (>= x35 0) (>= x73 0) (<= x9 1461501637330902918203684832716283019655932542975) (>= x53 0) (>= x134 0) (= false x13) (< x81 826074471) (<= 0 x9) (= (x64 (x110 x34)) x114) (<= x27 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x155 0) (= x56 x27) (= x125 false) (>= 1461501637330902918203684832716283019655932542975 x73) (> x34 0) (<= x35 1461501637330902918203684832716283019655932542975) (not (= x81 157198259)) (>= x27 0) (= x104 2514000705) (not (= 117300739 x81)) (>= 1461501637330902918203684832716283019655932542975 x53) (>= 1461501637330902918203684832716283019655932542975 x137) (= true x150) (= x134 (x64 (x110 x149)))) (and (= 0 x155) (>= 1461501637330902918203684832716283019655932542975 x142) (> 3337024914 x37) (not (< x37 2376452955)) (not (< x165 4)) (= (div x54 32) x7) (>= x117 0) (= x148 (ite (> x61 0) x127 (x130 127 x127))) (>= 1461501637330902918203684832716283019655932542975 x117) (= (x72 (+ x102 32)) x57) (and (= true (<= x165 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x165 3)) (not (= 2495578189 x37)) (= 2514000705 x37) (= x86 (x145 (x110 x149))) (= (x130 1 x159) x61) (= x127 (div x159 2)) (<= x53 1461501637330902918203684832716283019655932542975) (= x60 (= 0 x148)) (= x117 x138) (= x54 (x72 (+ x148 31))) (< 0 x86) (>= x142 0) (= x99 (x72 (+ 128 x57))) (> 3017275065 x37) (>= x53 0) (not (= x37 2376452955)) (= x102 (mod (* 32 x7) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x83 x56) (not (= x61 x85)) (= (ite (< x148 32) 1 0) x85))) (and (=> (and (= x63 x128) x60) x3) (=> (and (not x60) (= (< 31 x148) x66)) (and (=> (and (not x66) (and (= x63 x128) (= x152 (mod (* x82 256) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x159 256) x82))) x3) (=> (and x66 (and (= (x147 x59 1) x30) (= x100 (x58 x59)) (= (x55 (x161 1) 0) x59) (= (x72 (+ 160 x148)) x75) (= (< 192 x75) x156))) (and (=> x156 x28) (=> (not x156) x70)))))))))
(assert (= (and x151 (not x12)) x95))
(assert (= (x161 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x110 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x71 x159))
(assert (x162 x85))
(assert (x162 x81))
(assert (x162 x142))
(assert (x162 x82))
(assert (x162 x54))
(assert (= (x11 (x161 2495578189)) 2495578189))
(assert (x162 x106))
(assert (= x98 (or x160 x101 x92)))
(assert (x162 x137))
(assert (x162 x27))
(assert (x162 x121))
(assert (x39 1))
(assert (x162 x35))
(assert (= x96 (=> (and (= (not (> x50 128)) x51) (= (x72 (+ 96 x24)) x121) (= (x97 256) x48)) (and x51 (=> (= 128 x106) x123)))))
(assert (= x101 (or x120 x112)))
(assert (x162 x83))
(assert (= (=> (and (= (x72 (+ x38 32)) x24) (= x38 (x72 (+ x99 32))) (= (< 0 x50) x105) (= x50 (x23 128))) (and (=> (and (and (= x4 (x97 160)) (= x12 (> x50 32))) x105) (and (=> (and (= 32 x106) (not x12)) x123) (=> (and x12 (and (= (x72 (+ x24 32)) x129) (= (< 64 x50) x47) (= x44 (x97 192)))) (and (=> (and (not x47) (= 64 x106)) x123) (=> (and (and (= x29 (x72 (+ 64 x24))) (= x69 (x97 224)) (= (< 96 x50) x15)) x47) (and (=> (and (= 96 x106) (not x15)) x123) (=> x15 x96))))))) (=> (and (not x105) (= x106 0)) x123))) x3))
(assert (= x34 (x11 (x110 x34))))
(assert (= (and x105 x98) x151))
(assert (= (and x135 x156) x120))
(assert (= x33 (and x77 (not x15))))
(assert (x162 x114))
(assert (x162 x36))
(assert (x162 x74))
(assert (x162 x57))
(assert (x162 x45))
(assert (x162 x128))
(assert (= (x110 3017275065) (x161 3017275065)))
(assert (x162 x63))
(assert (= (x11 (x161 117300739)) 117300739))
(assert (x162 x61))
(assert (= 0 (x49 192)))
(assert (= (x161 404098525) (x110 404098525)))
(assert (x162 x86))
(assert (= (=> (and (= x141 (x58 x30)) (= x2 (not (< 224 x75)))) (and x70 x2)) x28))
(assert (= x46 (or x32 x126)))
(assert (x162 x53))
(assert (= x94 (and (not x60) x43)))
(assert (x162 x152))
(assert (x162 x56))
(assert (x162 x4))
(assert (= 3017275065 (x11 (x161 3017275065))))
(check-sat)
(exit)