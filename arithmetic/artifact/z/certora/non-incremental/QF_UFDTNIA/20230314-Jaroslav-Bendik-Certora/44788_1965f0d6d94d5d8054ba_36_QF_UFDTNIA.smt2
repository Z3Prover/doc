(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x592 0)) (((x458 (x67 Int)) (x614 (x87 x592) (x114 Int)) (x531 (x19 x592) (x85 x592) (x456 Int)))))
(declare-fun x497 () Bool)
(declare-fun x365 () Bool)
(declare-fun x624 () Bool)
(declare-fun x312 () Int)
(declare-fun x222 () Bool)
(declare-fun x72 () x592)
(declare-fun x561 () Bool)
(declare-fun x313 () Bool)
(declare-fun x537 () Bool)
(declare-fun x154 () Int)
(declare-fun x389 () Int)
(declare-fun x505 () Int)
(declare-fun x305 () Int)
(declare-fun x565 (Int) Int)
(declare-fun x34 () Bool)
(declare-fun x342 () Bool)
(declare-fun x12 () Int)
(declare-fun x616 () Int)
(declare-fun x408 () Int)
(declare-fun x295 () Int)
(declare-fun x50 (Int Int) Int)
(declare-fun x117 () Bool)
(declare-fun x159 () Bool)
(declare-fun x396 () Int)
(declare-fun x568 () Int)
(declare-fun x62 () Bool)
(declare-fun x153 () Int)
(declare-fun x160 () Bool)
(declare-fun x152 () Bool)
(declare-fun x461 () Int)
(declare-fun x205 () Int)
(declare-fun x21 () Bool)
(declare-fun x227 () Int)
(declare-fun x217 () Int)
(declare-fun x298 () Int)
(declare-fun x352 () Int)
(declare-fun x172 () Int)
(declare-fun x133 () x592)
(declare-fun x477 () Int)
(declare-fun x436 () Bool)
(declare-fun x190 () Bool)
(declare-fun x415 () Int)
(declare-fun x595 () Bool)
(declare-fun x252 (x592) Int)
(declare-fun x435 () Int)
(declare-fun x273 () Int)
(declare-fun x510 () Int)
(declare-fun x634 () Bool)
(declare-fun x611 () Bool)
(declare-fun x134 () Bool)
(declare-fun x45 () Int)
(declare-fun x465 () Int)
(declare-fun x253 (x592) Int)
(declare-fun x538 () Int)
(declare-fun x281 () Int)
(declare-fun x282 () Int)
(declare-fun x521 () Bool)
(declare-fun x208 () Int)
(declare-fun x179 () Bool)
(declare-fun x601 () Bool)
(declare-fun x550 () Bool)
(declare-fun x279 () Int)
(declare-fun x432 () Bool)
(declare-fun x221 () Bool)
(declare-fun x121 () Int)
(declare-fun x307 () Int)
(declare-fun x357 () Int)
(declare-fun x180 () Bool)
(declare-fun x377 () Int)
(declare-fun x289 () Int)
(declare-fun x522 () Int)
(declare-fun x255 () Bool)
(declare-fun x60 () Int)
(declare-fun x511 () Int)
(declare-fun x219 () Int)
(declare-fun x137 () Int)
(declare-fun x11 () Int)
(declare-fun x178 () Int)
(declare-fun x80 () Int)
(declare-fun x573 () Bool)
(declare-fun x141 () Int)
(declare-fun x162 () Bool)
(declare-fun x429 () Int)
(declare-fun x588 () Bool)
(declare-fun x328 () Int)
(declare-fun x603 () Int)
(declare-fun x25 () Bool)
(declare-fun x337 () Bool)
(declare-fun x175 () Int)
(declare-fun x105 () Bool)
(declare-fun x430 () Bool)
(declare-fun x428 () Bool)
(declare-fun x100 () Int)
(declare-fun x618 () Bool)
(declare-fun x376 () Int)
(declare-fun x628 () Bool)
(declare-fun x606 () Bool)
(declare-fun x120 () Int)
(declare-fun x607 () Bool)
(declare-fun x392 () Int)
(declare-fun x556 (x592) Int)
(declare-fun x334 () Int)
(declare-fun x308 () Int)
(declare-fun x7 () Bool)
(declare-fun x482 () Bool)
(declare-fun x53 () Bool)
(declare-fun x631 () x592)
(declare-fun x527 () Int)
(declare-fun x424 () Int)
(declare-fun x480 () Int)
(declare-fun x467 () Int)
(declare-fun x499 () Int)
(declare-fun x512 () Bool)
(declare-fun x304 () Int)
(declare-fun x570 () Int)
(declare-fun x315 () Int)
(declare-fun x70 () Int)
(declare-fun x75 () Int)
(declare-fun x379 () x592)
(declare-fun x39 () Int)
(declare-fun x587 () Bool)
(declare-fun x325 () Int)
(declare-fun x310 () Bool)
(declare-fun x407 () Bool)
(declare-fun x437 () Int)
(declare-fun x639 () Int)
(declare-fun x517 () Bool)
(declare-fun x513 () Bool)
(declare-fun x293 () Int)
(declare-fun x40 () Int)
(declare-fun x161 () Bool)
(declare-fun x375 () Int)
(declare-fun x250 () Int)
(declare-fun x215 () Int)
(declare-fun x383 () Int)
(declare-fun x630 () Int)
(declare-fun x356 () Int)
(declare-fun x193 () Int)
(declare-fun x336 () Int)
(declare-fun x170 () Bool)
(declare-fun x516 () Int)
(declare-fun x68 () x592)
(declare-fun x214 () Bool)
(declare-fun x487 () Bool)
(declare-fun x191 () Int)
(declare-fun x267 () Int)
(declare-fun x181 () Int)
(declare-fun x440 () Bool)
(declare-fun x575 () Bool)
(declare-fun x489 () Int)
(declare-fun x257 () Bool)
(declare-fun x116 () Int)
(declare-fun x332 () Bool)
(declare-fun x108 () Bool)
(declare-fun x530 () Int)
(declare-fun x86 () Int)
(declare-fun x288 () Bool)
(declare-fun x446 () Int)
(declare-fun x239 () x592)
(declare-fun x405 () Int)
(declare-fun x335 () Int)
(declare-fun x115 () Int)
(declare-fun x594 () Int)
(declare-fun x102 () Int)
(declare-fun x622 () Bool)
(declare-fun x344 () Int)
(declare-fun x381 () x592)
(declare-fun x299 () Int)
(declare-fun x1 (x592) Int)
(declare-fun x438 () Int)
(declare-fun x367 () x592)
(declare-fun x502 () Int)
(declare-fun x202 () Bool)
(declare-fun x107 (Int) x592)
(declare-fun x577 () Int)
(declare-fun x157 () Int)
(declare-fun x156 () x592)
(declare-fun x73 () Int)
(declare-fun x6 () Int)
(declare-fun x319 () Int)
(declare-fun x2 () Bool)
(declare-fun x124 () Int)
(declare-fun x84 () Bool)
(declare-fun x140 (x592) Int)
(declare-fun x451 () Int)
(declare-fun x271 () Int)
(declare-fun x301 () Int)
(declare-fun x536 () Int)
(declare-fun x54 () Int)
(declare-fun x258 () Bool)
(declare-fun x88 () Int)
(declare-fun x543 () Int)
(declare-fun x371 () Bool)
(declare-fun x203 () Bool)
(declare-fun x294 () Int)
(declare-fun x52 () Int)
(declare-fun x218 () Int)
(declare-fun x347 () Bool)
(declare-fun x418 () x592)
(declare-fun x94 () x592)
(declare-fun x495 () x592)
(declare-fun x245 () Bool)
(declare-fun x397 () Int)
(declare-fun x399 () Bool)
(declare-fun x469 () Bool)
(declare-fun x150 () Bool)
(declare-fun x596 () Int)
(declare-fun x113 () Int)
(declare-fun x168 () Int)
(declare-fun x579 () Bool)
(declare-fun x509 () Int)
(declare-fun x200 () Int)
(declare-fun x534 () Int)
(declare-fun x192 () Bool)
(declare-fun x478 () Int)
(declare-fun x63 () Int)
(declare-fun x224 () Int)
(declare-fun x91 () Bool)
(declare-fun x18 () Int)
(declare-fun x372 (Int) Int)
(declare-fun x280 () Int)
(declare-fun x225 () Bool)
(declare-fun x15 () x592)
(declare-fun x441 () Int)
(declare-fun x567 () Bool)
(declare-fun x590 () Bool)
(declare-fun x514 () x592)
(declare-fun x125 () Int)
(declare-fun x265 () Int)
(declare-fun x414 () Bool)
(declare-fun x574 () Bool)
(declare-fun x413 () Bool)
(declare-fun x291 () Int)
(declare-fun x475 () Int)
(declare-fun x605 () Int)
(declare-fun x393 () Int)
(declare-fun x348 () Int)
(declare-fun x13 () Int)
(declare-fun x139 () Int)
(declare-fun x320 () Int)
(declare-fun x27 () Int)
(declare-fun x351 () Int)
(declare-fun x69 () Bool)
(declare-fun x207 () Int)
(declare-fun x486 (Int) Int)
(declare-fun x578 () Bool)
(declare-fun x8 () Int)
(declare-fun x10 () Bool)
(declare-fun x284 () Bool)
(declare-fun x89 () Int)
(declare-fun x457 () Int)
(declare-fun x213 () Int)
(declare-fun x135 () Bool)
(declare-fun x468 () Int)
(declare-fun x431 () Int)
(declare-fun x358 () Int)
(declare-fun x306 () Int)
(declare-fun x247 () Bool)
(declare-fun x287 () Bool)
(declare-fun x194 () Int)
(declare-fun x251 () Int)
(declare-fun x302 () Bool)
(declare-fun x41 () Bool)
(declare-fun x563 () Bool)
(declare-fun x276 () Int)
(declare-fun x82 () Int)
(declare-fun x118 () Bool)
(declare-fun x188 () Bool)
(declare-fun x56 () Int)
(declare-fun x83 () Bool)
(declare-fun x231 () Bool)
(declare-fun x562 () Bool)
(declare-fun x171 () Bool)
(declare-fun x492 () Int)
(declare-fun x260 () Int)
(declare-fun x433 () Bool)
(declare-fun x235 () Int)
(declare-fun x29 () Int)
(declare-fun x220 () Int)
(declare-fun x602 () Int)
(declare-fun x240 () Bool)
(declare-fun x632 () Bool)
(declare-fun x470 () Bool)
(declare-fun x459 () Int)
(declare-fun x228 () Bool)
(declare-fun x564 () Bool)
(declare-fun x155 () Bool)
(declare-fun x557 () Bool)
(declare-fun x503 () Int)
(declare-fun x484 () Int)
(declare-fun x582 () Int)
(declare-fun x103 () Bool)
(declare-fun x508 () Int)
(declare-fun x338 () Bool)
(declare-fun x366 () Bool)
(declare-fun x423 () Bool)
(declare-fun x500 () Bool)
(declare-fun x391 () Int)
(declare-fun x331 () Int)
(declare-fun x529 () Int)
(declare-fun x182 (x592) Int)
(declare-fun x230 () Int)
(declare-fun x286 () Bool)
(declare-fun x339 () Int)
(declare-fun x300 () Int)
(declare-fun x216 () Bool)
(declare-fun x559 () Bool)
(declare-fun x398 () Int)
(declare-fun x434 () Bool)
(declare-fun x593 () Int)
(declare-fun x177 () Int)
(declare-fun x243 () Int)
(declare-fun x585 () Int)
(declare-fun x278 () Bool)
(declare-fun x232 () Bool)
(declare-fun x30 (x592) Int)
(declare-fun x597 () Int)
(declare-fun x571 () Bool)
(declare-fun x409 () x592)
(declare-fun x206 () Bool)
(declare-fun x425 () Bool)
(declare-fun x59 () Int)
(declare-fun x234 () x592)
(declare-fun x22 () Int)
(declare-fun x445 () Int)
(declare-fun x539 () Int)
(declare-fun x242 () Bool)
(declare-fun x33 () Bool)
(declare-fun x98 () Bool)
(declare-fun x483 () Bool)
(declare-fun x353 () Bool)
(declare-fun x369 () Int)
(declare-fun x615 () Int)
(declare-fun x421 () Int)
(declare-fun x176 (x592) Int)
(declare-fun x145 () Int)
(declare-fun x552 () Int)
(declare-fun x412 () Bool)
(declare-fun x506 () Bool)
(declare-fun x275 () Int)
(declare-fun x110 () Bool)
(declare-fun x481 () Int)
(declare-fun x544 () Int)
(declare-fun x32 () Int)
(declare-fun x558 () Int)
(declare-fun x164 () Bool)
(declare-fun x158 () Int)
(declare-fun x226 () Int)
(declare-fun x619 () x592)
(declare-fun x138 () Int)
(declare-fun x417 () Int)
(declare-fun x591 () Int)
(declare-fun x613 () Int)
(declare-fun x4 () Int)
(declare-fun x496 () Int)
(declare-fun x491 () Int)
(declare-fun x204 () Int)
(declare-fun x373 () Bool)
(declare-fun x447 () Int)
(declare-fun x360 () Int)
(declare-fun x540 () Int)
(declare-fun x81 () Int)
(declare-fun x343 (x592) Int)
(declare-fun x127 () Int)
(declare-fun x326 (x592) Int)
(declare-fun x119 () Bool)
(declare-fun x528 () Int)
(declare-fun x296 () Bool)
(declare-fun x576 () Int)
(declare-fun x600 () Int)
(declare-fun x71 () Int)
(declare-fun x149 () Bool)
(declare-fun x324 () Bool)
(declare-fun x419 () Int)
(declare-fun x66 () Bool)
(declare-fun x262 () Bool)
(declare-fun x128 () Int)
(declare-fun x450 () Bool)
(declare-fun x76 () Int)
(declare-fun x504 () Bool)
(declare-fun x237 () Int)
(declare-fun x272 () Int)
(declare-fun x79 () Int)
(declare-fun x270 () Int)
(declare-fun x241 () Bool)
(declare-fun x548 () Int)
(declare-fun x411 () Int)
(declare-fun x314 () Int)
(declare-fun x471 () Bool)
(declare-fun x583 () Int)
(declare-fun x385 () Bool)
(declare-fun x266 () Int)
(declare-fun x122 () Bool)
(declare-fun x400 () Bool)
(declare-fun x169 () Int)
(declare-fun x3 () Bool)
(declare-fun x524 () Int)
(declare-fun x229 () Int)
(declare-fun x283 () x592)
(declare-fun x259 () Int)
(declare-fun x633 () Int)
(declare-fun x183 () Int)
(declare-fun x586 () Int)
(declare-fun x166 () Bool)
(declare-fun x479 () Int)
(declare-fun x452 () Int)
(declare-fun x130 () Int)
(declare-fun x269 () Int)
(declare-fun x93 () Int)
(declare-fun x609 () Int)
(declare-fun x626 () Bool)
(declare-fun x126 () Int)
(declare-fun x185 () Bool)
(declare-fun x9 () Int)
(declare-fun x111 () Bool)
(declare-fun x99 () Int)
(declare-fun x24 () Bool)
(declare-fun x519 () Int)
(declare-fun x256 () Bool)
(declare-fun x309 () Bool)
(declare-fun x264 () Int)
(declare-fun x78 () Bool)
(declare-fun x74 () Int)
(declare-fun x466 () Int)
(declare-fun x17 () Bool)
(declare-fun x106 () Int)
(declare-fun x404 () x592)
(declare-fun x598 () Int)
(declare-fun x473 () Int)
(declare-fun x403 () Bool)
(declare-fun x545 () Int)
(declare-fun x638 () Bool)
(declare-fun x368 () Int)
(declare-fun x395 () Int)
(declare-fun x64 () Bool)
(declare-fun x261 () Bool)
(declare-fun x547 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x555 () Bool)
(declare-fun x442 () Int)
(declare-fun x362 () Bool)
(declare-fun x165 () Int)
(declare-fun x494 () Int)
(declare-fun x274 () Int)
(declare-fun x340 () Bool)
(declare-fun x361 () Bool)
(declare-fun x318 () Bool)
(declare-fun x625 () Int)
(declare-fun x246 () Int)
(declare-fun x90 () Bool)
(declare-fun x635 (x592) Int)
(declare-fun x109 () Int)
(declare-fun x402 () Int)
(declare-fun x198 () x592)
(declare-fun x493 () Int)
(declare-fun x341 () Int)
(declare-fun x401 () Bool)
(declare-fun x551 () Bool)
(declare-fun x146 () Bool)
(declare-fun x448 () Int)
(declare-fun x359 () Int)
(declare-fun x316 () Int)
(declare-fun x148 () Int)
(declare-fun x363 () Int)
(declare-fun x349 () Int)
(declare-fun x406 () Int)
(declare-fun x167 () Bool)
(declare-fun x589 () Int)
(declare-fun x195 () Bool)
(declare-fun x572 () Bool)
(declare-fun x354 () Int)
(declare-fun x77 () Bool)
(declare-fun x410 () Int)
(declare-fun x92 () Int)
(declare-fun x462 () Bool)
(declare-fun x485 () Int)
(declare-fun x525 () Bool)
(declare-fun x333 () Bool)
(declare-fun x422 () Bool)
(declare-fun x174 () Bool)
(declare-fun x612 () Int)
(declare-fun x474 () Bool)
(declare-fun x236 () x592)
(declare-fun x303 () Int)
(declare-fun x238 () Bool)
(declare-fun x427 () Int)
(declare-fun x184 () Int)
(declare-fun x608 () Bool)
(declare-fun x629 () Int)
(declare-fun x636 () Bool)
(declare-fun x476 () Int)
(declare-fun x5 () Int)
(declare-fun x186 (x592) Int)
(declare-fun x147 () Int)
(declare-fun x535 () Bool)
(declare-fun x610 () Bool)
(declare-fun x197 () Int)
(declare-fun x498 () x592)
(declare-fun x560 () Bool)
(declare-fun x515 () Int)
(declare-fun x16 () Int)
(declare-fun x637 () Bool)
(declare-fun x426 () Bool)
(declare-fun x460 () Int)
(declare-fun x378 () Int)
(declare-fun x132 () Int)
(declare-fun x48 () Bool)
(declare-fun x507 () Int)
(declare-fun x329 () Bool)
(declare-fun x388 () Bool)
(declare-fun x212 () Int)
(declare-fun x549 () Bool)
(declare-fun x244 () Int)
(declare-fun x523 () Int)
(declare-fun x455 () Int)
(declare-fun x285 () Bool)
(declare-fun x163 () Int)
(declare-fun x49 () Bool)
(declare-fun x101 () Bool)
(declare-fun x390 () Bool)
(declare-fun x394 () Int)
(declare-fun x580 () Bool)
(declare-fun x57 () Int)
(declare-fun x151 () Int)
(declare-fun x211 () Bool)
(declare-fun x322 () Bool)
(declare-fun x311 () Bool)
(declare-fun x199 () Int)
(declare-fun x581 () x592)
(declare-fun x439 (Int) Int)
(declare-fun x355 () x592)
(declare-fun x28 () Bool)
(declare-fun x95 () Bool)
(declare-fun x488 () Bool)
(declare-fun x61 () Bool)
(declare-fun x20 () Int)
(declare-fun x463 () Int)
(declare-fun x345 () Int)
(declare-fun x44 () Int)
(declare-fun x384 () Int)
(declare-fun x321 () Bool)
(declare-fun x443 () x592)
(declare-fun x541 () Int)
(declare-fun x617 () Bool)
(declare-fun x569 () Bool)
(declare-fun x323 () Int)
(declare-fun x23 () Bool)
(declare-fun x490 () Int)
(declare-fun x420 () Int)
(declare-fun x31 () Int)
(declare-fun x173 () x592)
(declare-fun x42 () Int)
(declare-fun x449 () Bool)
(declare-fun x263 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x223 () Int)
(declare-fun x14 () Int)
(declare-fun x142 () Bool)
(declare-fun x26 () Int)
(declare-fun x248 () Int)
(declare-fun x201 () Int)
(declare-fun x189 () Int)
(declare-fun x96 () Bool)
(declare-fun x268 () Bool)
(declare-fun x553 () Bool)
(declare-fun x47 () Int)
(declare-fun x129 () Bool)
(declare-fun x97 () x592)
(declare-fun x350 () Int)
(declare-fun x604 () Bool)
(declare-fun x317 () Bool)
(declare-fun x453 () Int)
(declare-fun x620 () Int)
(declare-fun x144 () Int)
(declare-fun x382 () Bool)
(declare-fun x58 () Int)
(declare-fun x546 () x592)
(declare-fun x621 () Int)
(declare-fun x51 () Int)
(declare-fun x526 () Int)
(declare-fun x297 () Bool)
(declare-fun x370 () Int)
(declare-fun x599 () Int)
(declare-fun x327 () Int)
(declare-fun x292 () Bool)
(declare-fun x210 () Bool)
(declare-fun x584 () Bool)
(declare-fun x233 () x592)
(declare-fun x55 () Bool)
(declare-fun x136 () Bool)
(declare-fun x36 () x592)
(declare-fun x143 () Bool)
(declare-fun x554 () Bool)
(declare-fun x290 (Int Int) Int)
(declare-fun x387 () Bool)
(declare-fun x112 () Int)
(declare-fun x444 () Bool)
(declare-fun x623 () Bool)
(declare-fun x330 () Int)
(define-fun x364 ((x592 x592) (x532 Int)) x592 (ite ((_ is x614) x592) (x614 (x87 x592) (+ (x114 x592) x532)) (ite ((_ is x531) x592) (x531 (x19 x592) (x85 x592) (+ (x456 x592) x532)) (x458 (+ x532 (x67 x592))))))
(define-fun x374 ((x627 Int)) Int (ite (and (< x627 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x627)) x627 (- x627 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x249 ((x627 Int)) Int (ite (and (>= x627 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x627 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x627) x627))
(define-fun x454 ((x277 Int)) Bool (and (< x277 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x277 0)))
(define-fun x346 ((x277 Int)) Bool (and (= (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935 x277) x277) (= (x50 x277 115792089237316195423570985008687907853269984665640564039457584007913129639935) x277)))
(define-fun x65 ((x277 Int)) Bool (and (= 0 (x50 x277 0)) (= (x50 0 x277) 0)))
(define-fun x46 ((x277 Int)) Bool (= (x50 x277 x277) x277))
(define-fun x416 ((x277 Int)) Bool (and (x65 x277) (x46 x277) (x346 x277)))
(define-fun x123 ((x277 Int) (x380 Int)) Bool (= (x50 x277 x380) (x50 x380 x277)))
(define-fun x196 ((x277 Int) (x380 Int)) Bool (and (>= (x50 x277 x380) 0) (=> (<= 0 x380) (<= (x50 x277 x380) x380)) (=> (>= x277 0) (<= (x50 x277 x380) x277))))
(define-fun x520 ((x277 Int) (x380 Int)) Bool (and (x123 x277 x380) (x196 x277 x380)))
(define-fun x104 ((x542 Int)) Int (ite (= x542 128) x543 (x43 x542)))
(define-fun x472 ((x542 Int)) Int (ite (= 160 x542) x223 (x104 x542)))
(define-fun x518 ((x542 Int)) Int (ite (= x542 192) x275 (x472 x542)))
(define-fun x501 ((x542 Int)) Int (ite (= 224 x542) x121 (x518 x542)))
(define-fun x566 ((x542 Int)) Int (ite (= 256 x542) x510 (x501 x542)))
(define-fun x131 ((x542 Int)) Int (ite (= 128 x542) x63 (x439 x542)))
(define-fun x187 ((x542 Int)) Int (ite (= 160 x542) x526 (x131 x542)))
(define-fun x533 ((x542 Int)) Int (ite (= x542 128) x151 (x38 x542)))
(define-fun x37 ((x542 Int)) Int (ite (= x542 160) x141 (x533 x542)))
(define-fun x464 ((x542 x592)) Int (ite (= x542 x498) x598 (x326 x542)))
(define-fun x386 ((x542 x592)) Int (ite (= x418 x542) x56 (x186 x542)))
(define-fun x254 ((x542 x592)) Int (ite (= x94 x542) x197 (x464 x542)))
(define-fun x35 ((x542 x592)) Int (ite (= x72 x542) x629 (x386 x542)))
(define-fun x209 ((x277 Int)) Bool (=> (and (not (= 558109909 x277)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x277)) (not (= x277 1461501637330902918203684832716283019655932542975)) (not (= 699302164 x277)) (not (= 3207937467 x277)) (not (= x277 3647180086)) (not (= 2265735533 x277)) (not (= 1161348331 x277)) (not (= 606387804 x277)) (not (= 231365057 x277)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x277)) (not (= x277 1710941022)) (not (= x277 3995103268)) (< 10000 x277) (not (= 2746363844 x277)) (not (= 2094874590 x277)) (not (= x277 436938878))) (not ((_ is x458) (x107 x277)))))
(assert (x454 x378))
(assert (x454 x243))
(assert (x454 x325))
(assert (= (and x83 x2) x152))
(assert (= x564 (and x342 (not x362))))
(assert (x454 x330))
(assert (x454 x275))
(assert (= (=> (and (and (and (= x480 1161348331) (not (> 1161348331 x480)) (<= x547 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x547 0) (> 1710941022 x480) (= x546 (x531 (x107 x93) (x458 1) 0)) (= x621 x427) (= (x343 (x107 x172)) x363) (= x348 x492) (< x480 2094874590) (= x377 x547) (>= 1461501637330902918203684832716283019655932542975 x93) (= x146 (= x348 x298)) (<= x621 1461501637330902918203684832716283019655932542975) (= x281 x86) (< 0 x363) (= x298 x427) (= x547 (x182 x15)) (= (x531 (x107 x621) x546 0) x15) (= x93 x492)) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x395) (= x36 (x531 (x107 x20) x409 0)) (= (= x57 1) x216) (> x522 0) (= x395 x45) (= (x531 (x107 x218) (x458 1) 0) x409) (= x427 x420) (= 1 x178) (= x20 x427) (= x599 1161348331) (= x218 x181) (>= 1461501637330902918203684832716283019655932542975 x218) (= (= x485 x420) x535) (= x522 (x343 (x107 x172))) (<= x20 1461501637330902918203684832716283019655932542975) (= x377 x57) (>= x395 0) (> 1710941022 x599) (= (x182 x36) x395) (not (< x599 1161348331)) (= x485 x181) (= x10 (or x146 x216)) (< x599 2094874590)) (and (and (>= x275 0) (= x108 (= x481 x193)) (= x524 (x566 160)) (> x405 0) (= (x635 x156) x121) (not (= x615 3207937467)) (= (x566 192) x609) (= (= x168 1) x329) (= x142 (= x370 x223)) (= (x364 x283 1) x379) (= x540 (x566 224)) (= x259 x476) (< x615 3995103268) (not (< x615 3207937467)) (not (> 2094874590 x615)) (= x476 x244) (= x156 (x364 x379 1)) (= x543 (x556 x381)) (= (x253 x631) x510) (= 1 x503) (>= x543 0) (= x45 x168) (<= x543 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x30 x379) x275) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x510) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x275) (= x193 x543) (= x631 (x364 x156 1)) x142 (= (x486 x244) x481) (<= x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x566 256) x130) (= (x343 (x107 x172)) x405) (= x210 (or x329 x535)) (<= 0 x510) (= x381 (x531 (x107 x476) (x458 2) 0)) (<= 0 x121) (<= x223 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x566 128) x230) (>= x223 0) (= (x364 x381 1) x283) (= x223 (x252 x283)) (= x370 (x565 x476)) x108 (= 3647180086 x615)) (and (and (= x526 (x186 x236)) (< x442 1161348331) (< x442 2094874590) (= x328 x130) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x63) (= x115 (x343 (x107 x172))) (= (x326 x495) x63) (< 0 x115) (not (= x442 436938878)) (< x442 699302164) (= x259 x499) (= (x187 128) x294) (= x431 (x187 160)) (= x596 x230) (= x609 x200) (not (= 558109909 x442)) (= (x364 x495 1) x236) (>= x63 0) (= (x531 (x107 x499) (x458 3) 0) x239) (= x492 x384) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x526) (<= x384 1461501637330902918203684832716283019655932542975) (= x540 x591) (not (= 231365057 x442)) (= x495 (x531 (x107 x384) x239 0)) (<= 0 x526) (= 606387804 x442) (= x605 x524)) (and (and (= (x364 x234 1) x97) (<= 0 x141) (> 1161348331 x316) (= 606387804 x316) (> 699302164 x316) (not (= 231365057 x316)) (= x128 x294) (not (= 436938878 x316)) (= x334 (x37 128)) (= x360 (x343 (x107 x172))) (> x360 0) (<= x13 1461501637330902918203684832716283019655932542975) (= (x531 (x107 x191) (x458 3) 0) x173) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x141) (= (x531 (x107 x13) x173 0) x234) (= x181 x13) (<= x151 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x326 x234) x151) (= (x37 160) x491) (= x191 x259) (not (= x316 558109909)) (= (x186 x97) x141) (= x330 x431) (>= x151 0) (< x316 2094874590)) (and (and (= x582 x181) (= x493 x492) (= x576 x491) (= x2 (not (= x493 x582))) (= x435 x334)) (or (and (and (= x319 x558) (= x138 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x39) x39 (- x39 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x304 x516) (= x128 x410) (= (- x132 x138) x319) (= x132 x410) (= x39 x177)) x2) (and (and (= x251 x128) (= x99 x558) (= x194 x251) (= x194 x304)) (not x2))))))))) (and (>= 1461501637330902918203684832716283019655932542975 x71) (= x154 (x176 (x107 x172))) (>= x71 0) (not (< x356 2094874590)) (>= 1461501637330902918203684832716283019655932542975 x260) (>= x570 0) (<= x620 1461501637330902918203684832716283019655932542975) (> 3995103268 x356) (>= 1461501637330902918203684832716283019655932542975 x492) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x570) (not (> 3207937467 x356)) (>= x260 0) (> x593 0) (>= 1461501637330902918203684832716283019655932542975 x172) (> x172 0) (>= x154 0) (= 3207937467 x356) (= x233 (x531 (x107 x620) (x458 0) 0)) (= x86 x570) (= x427 x71) (= x593 (x343 (x107 x172))) (= x570 (x1 x233)) (<= 0 x181) (<= 0 x492) (= x639 x260) (>= 1461501637330902918203684832716283019655932542975 x181) x48 (= (> (x343 (x107 x172)) 0) x48) (= x620 x427))) x569) x506))
(assert (x454 x596))
(assert (x454 x18))
(assert (x454 x585))
(assert (x454 x577))
(assert (x454 x217))
(assert (x454 x543))
(assert (= (and x436 x423) x432))
(assert (x520 x74 x419))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x140 (x458 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x454 x42))
(assert (= x412 (and x608 (not x559))))
(assert (= x191 (x140 (x107 x191))))
(assert (x454 x200))
(assert (x454 x406))
(assert (x454 x100))
(assert (x454 x348))
(assert (= (=> (and (and (= x541 x492) (= (ite x2 x558 x304) x336) (= x295 x181) (= x362 (not (= x295 x541)))) (or (and (and (= x280 x22) (= x341 (ite (<= x113 57896044618658097711785492504343953926634992332820282019728792003956564819967) x113 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x394 x429) (= x44 x92) (= x330 x92) (= x113 x523) (= x280 (- x44 x341))) x362) (and (and (= x237 x22) (= x307 x538) (= x538 x394) (= x307 x330)) (not x362)))) x101) x569))
(assert (= (or x390 x488) x195))
(assert (x454 x339))
(assert (x454 x289))
(assert (x209 x218))
(assert (x454 x235))
(assert (= x180 (and x618 (not x578))))
(assert (x454 x75))
(assert (x454 x208))
(assert (x454 x273))
(assert (= (or x590 x449 x180 x412) x373))
(assert (x209 x441))
(assert (x454 x605))
(assert (x454 x307))
(assert (=> (<= x191 10000) (= (x107 x191) (x458 x191))))
(assert (x454 x301))
(assert (x454 x359))
(assert (x454 x357))
(assert (= (and (not x214) x84) x423))
(assert (x454 x384))
(assert (x454 x60))
(assert (x454 x375))
(assert (x454 x442))
(assert (= (x458 2746363844) (x107 2746363844)))
(assert (= x384 (x140 (x107 x384))))
(assert (x520 x465 x344))
(assert (x454 x74))
(assert (x454 x124))
(assert (x454 x408))
(assert (x454 x352))
(assert (x454 x576))
(assert (x454 x191))
(assert (x416 x344))
(assert (x454 x629))
(assert (x454 x435))
(assert (x454 x281))
(assert (x454 x79))
(assert (x454 x153))
(assert (x454 x165))
(assert (x454 x251))
(assert (x416 x392))
(assert (x209 x172))
(assert (= x342 (or x513 x152)))
(assert (x209 x20))
(assert (x454 x398))
(assert (=> (>= 10000 x147) (= (x107 x147) (x458 x147))))
(assert (x454 x137))
(assert (x454 x570))
(assert (x454 x536))
(assert (x416 x465))
(assert (= (x107 3207937467) (x458 3207937467)))
(assert (= (=> (and (and (= x492 x109) (= x181 x461) (= x602 (ite x362 x22 x394)) (= (not (= x461 x109)) x322)) (or (and x322 (and (= x177 x490) (= x463 x5) (= x248 x274) (= (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x490) x490 (- x490 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x279) (= x5 x435) (= x327 (+ x463 x279)) (= x148 x327))) (and (and (= x235 x220) (= x415 x148) (= x220 x248) (= x435 x235)) (not x322)))) x551) x101))
(assert (x454 x552))
(assert (x454 x193))
(assert (= (+ 1 (x140 x94)) (x140 (x364 x94 1))))
(assert (= 606387804 (x140 (x458 606387804))))
(assert (x454 x491))
(assert (x454 x447))
(assert (x454 x420))
(assert (x454 x293))
(assert (= x240 (and x53 x371)))
(assert (x454 x609))
(assert (x454 x76))
(assert (= (=> (= true x164) x258) x469))
(assert (x454 x230))
(assert (= x64 (=> (and (= x145 x147) (= x448 x273) (= x177 x459) (>= x411 0) (= x357 x459) (= x519 x453) (= x468 x357) (= x441 x137) (= x81 x269) (<= 0 x594) (= x453 x451) (= x181 x269) (= x137 x259) (<= x411 1461501637330902918203684832716283019655932542975) (= x553 (= x266 0)) (<= x448 1461501637330902918203684832716283019655932542975) (= x519 x523) (= x568 (ite x313 x282 x369)) (= x492 x145) (= (x343 (x107 x172)) x126) (= x411 x427) (>= x448 0) (> x126 0) (= x250 x81) (<= x594 1461501637330902918203684832716283019655932542975) (= x273 x312)) (and (=> (and (not x553) (= x164 true)) x258) (=> (and x553 (and (not (= x153 2094874590)) (= x153 2265735533) (= (= x145 x147) x241) (not (< x153 2094874590)) (> 3207937467 x153) (= x441 x70) (= x147 x455) (> 2746363844 x153))) (and (=> (and x241 (and (= x361 (= x81 x250)) (= x424 x250))) (and (=> (and (not x361) (= x164 true)) x258) (=> (and (and (= x619 (x531 (x107 x441) (x458 3) 0)) (= x601 (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x468) true) (> x468 0))) (= (x531 (x107 x147) x68 0) x498) (= (ite (not x601) (not x601) (not (< x11 x598))) x595) (= (x326 x498) x11) (<= x11 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x249 (- x11 x357)) x598) (= x443 (x531 (x107 x441) (x458 2) 0)) (= x489 x451) (= x468 x293) (= x68 (x531 (x107 x441) (x458 3) 0)) (>= x11 0) (= x94 (x531 (x107 x250) x619 0))) x361) (and (=> (and (and (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x293) true) (> 0 x293)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x293)) x483) (= x24 (ite (not x483) (not x483) (not (> x11 x598))))) x595) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391) (= x56 (x249 (- x391 x451))) (<= 0 x391) (= x617 (and (> x489 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x489) true))) (= x391 (x186 x418)) (= (x364 x498 1) x418) (= x255 (ite (not x617) (not x617) (not (> x56 x391))))) x24) (and (=> (not x255) x469) (=> (and (and (= (ite (not x561) (not x561) (not (> x391 x56))) x607) (= x561 (or (> x489 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x489)) (> 0 x489))))) x255) (and (=> (not x607) x469) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) (= x606 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x293) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x293)) (> 0 x293)))) (= x399 (ite (not x606) (not x606) (not (< x402 x197)))) (= x197 (x374 (+ x468 x402))) (= x402 (x464 x94)) (>= x402 0)) x607) (and (=> (not x399) x469) (=> (and (and (= x179 (and (= true (<= x293 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 0 x293))) (= x222 (ite (not x179) (not x179) (not (> x402 x197))))) x399) (and (=> (not x222) x469) (=> (and (and (= x629 (x374 (+ x271 x451))) (= (ite (not x7) (not x7) (not (< x271 x629))) x53) (= x72 (x364 x94 1)) (<= x271 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x271) (= x271 (x386 x72)) (= (or (> x489 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x489 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x489) true))) x7)) x222) (and (=> (not x53) x469) (=> (and (and (= (and (< 0 x489) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x489) true)) x129) (= x90 (ite (not x129) (not x129) (not (< x629 x271))))) x53) (and (=> (and x90 (and (= x55 (= 0 x127)) (= x428 (= x227 x335)) (>= x227 0) (= x228 (= 0 x625)) (= (x364 x443 1) x133) (= (ite (< x42 x227) 1 0) x419) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x625) (= x74 (ite (not x228) 1 0)) (<= x227 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x625 0) (= (x252 x133) x227) (= x127 (x50 x74 x419)) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x625) x42) x428 (= x335 (x565 x441)) (= x625 (x35 x418)))) (and (=> (and (and (= (= x527 x585) x268) (= x232 (= x545 0)) (<= x545 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x50 x465 x344) x397) (= (= x397 0) x578) (>= x527 0) (= x9 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x545)) (= x158 (mod (* x625 x227) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x35 x72) x545) (<= 0 x545) (= x585 (x565 x441)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x527) (= (ite (< x9 x527) 1 0) x344) (= (ite (not x232) 1 0) x465) (= (x252 x133) x527) x268) x55) (and (=> (and (and (= (ite (or x400 x23) 1 0) x552) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505) (<= 0 x52) (= x505 (x182 x198)) (= x301 (mod (* x527 x545) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x477 (ite x23 1 0)) (= (= x52 1) x23) (= x404 (x531 (x107 x250) (x458 1) 0)) (= x497 (= x505 1)) (= x562 (< 0 x76)) (= x198 (x531 (x107 x427) x404 0)) (= x28 (= x427 x250)) (= x305 (ite x400 1 0)) (= x165 (ite (or x28 x497) 1 0)) (= (ite x497 1 0) x163) (= (x182 x367) x52) (>= x505 0) (<= x52 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x400 (= x427 x147)) (= x32 (ite x28 1 0)) (= (x50 x552 x165) x76) (= (x531 (x107 x147) (x458 1) 0) x581) (= x367 (x531 (x107 x427) x581 0))) x578) (and (=> (not x562) x623) (=> (and x562 (and (= (x364 x133 1) x355) (>= x393 0) (= x103 (= x398 0)) (= x392 (ite (not x103) 1 0)) (>= x398 0) (= (ite (< x447 x393) 1 0) x213) (= x398 (x254 x498)) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x398) x447) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x398) (= x352 (x50 x392 x213)) (= x559 (= 0 x352)) (<= x393 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x30 x355) x393))) (and (=> (not x559) x262) (=> (and (and (= (< x14 x158) x610) (= x14 (mod (* x398 x393) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x559) (and (=> (and (and (<= x406 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x406) (>= x276 0) (= (ite (< x350 x276) 1 0) x577) (<= x276 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x276 (x30 x355)) (= x175 (x50 x26 x577)) (= (ite (not x143) 1 0) x26) (= x143 (= 0 x406)) (= (x254 x94) x406) (= x350 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x406)) (= x49 (= 0 x175))) (not x610)) (and (=> (and x49 (and (= (mod (* x276 x406) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x270) (= x214 (> x301 x270)))) (and (=> (and (not x214) (and (= (ite x317 1 0) x265) (= (< 0 x246) x436) (= (not (< x158 x215)) x317) (= x515 (ite x387 1 0)) (= x514 (x364 x355 2)) (<= 0 x60) (= (x253 x514) x215) (<= x215 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x246 (ite (or x317 x387) 1 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x60) (<= 0 x215) (= (= x60 0) x387) (= (x35 x418) x60))) (and (=> (not x436) x623) (=> (and x436 (and (= (x253 x514) x208) (<= x383 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x208) (= (not (< x301 x208)) x338) (= x185 (= x383 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x208) (= (ite x185 1 0) x58) (>= x383 0) (= x462 (> x183 0)) (= (ite (or x338 x185) 1 0) x183) (= x339 (ite x338 1 0)) (= x383 (x35 x72)))) (and (=> (and (= x164 false) x462) x258) (=> (not x462) x623))))) (=> x214 x623))) (=> (not x49) x262))) (=> x610 x623))))))) (=> (not x578) x262))) (=> (not x55) x262))) (=> (not x90) x469))))))))))))) (=> (not x24) x469))) (=> (not x595) x469))))) (=> (and (= true x164) (not x241)) x258)))))))
(assert (x454 x227))
(assert (x454 x334))
(assert (= x521 (or x174 x564)))
(assert (= (and x98 x595) x41))
(assert (x454 x88))
(assert (x454 x260))
(assert (=> (>= 10000 x621) (= (x107 x621) (x458 x621))))
(assert (x454 x349))
(assert (= (x140 (x107 x620)) x620))
(assert (= x171 (and x313 x195)))
(assert (x454 x158))
(assert (x454 x86))
(assert (not x506))
(assert (= (x107 436938878) (x458 436938878)))
(assert (x454 x395))
(assert (x454 x145))
(assert (= (x458 606387804) (x107 606387804)))
(assert (x454 x5))
(assert (x454 x477))
(assert (x454 x63))
(assert (= 2746363844 (x140 (x458 2746363844))))
(assert (= (and x231 x607) x575))
(assert (x454 x541))
(assert (=> (<= x172 10000) (= (x107 x172) (x458 x172))))
(assert (x454 x144))
(assert (x454 x480))
(assert (x454 x57))
(assert (x416 x26))
(assert (= x20 (x140 (x107 x20))))
(assert (x454 x370))
(assert (x454 x528))
(assert (x454 x294))
(assert (= (x140 (x107 x147)) x147))
(assert (x454 x9))
(assert (= x105 (or x555 x33 x242 x413 x430)))
(assert (= (x140 (x458 1710941022)) 1710941022))
(assert (= true x83))
(assert (= (+ (x140 x495) 1) (x140 (x364 x495 1))))
(assert (= (and x432 x462) x66))
(assert (= (or x105 x580 x66 x117 x414 x373 x134) x297))
(assert (x454 x271))
(assert (= x218 (x140 (x107 x218))))
(assert (x454 x226))
(assert (x454 x594))
(assert (= (x140 (x364 x283 1)) (+ (x140 x283) 1)))
(assert (x454 x465))
(assert (x454 x519))
(assert (x454 x467))
(assert (= (x458 1161348331) (x107 1161348331)))
(assert (x454 x20))
(assert (= x174 (and x342 x362)))
(assert (x416 x419))
(assert (x454 x598))
(assert (=> (<= x441 10000) (= (x107 x441) (x458 x441))))
(assert (= (x140 (x458 436938878)) 436938878))
(assert (= (and (not x164) x297) x637))
(assert (= (and x159 x361) x98))
(assert (x454 x620))
(assert (= (x140 (x458 2094874590)) 2094874590))
(assert (x454 x479))
(assert (= (x140 (x107 x172)) x172))
(assert (x454 x93))
(assert (x454 x12))
(assert (= x513 (and (not x2) x83)))
(assert (= x590 (and (not x49) x487)))
(assert (x454 x419))
(assert (=> (>= 10000 x250) (= (x107 x250) (x458 x250))))
(assert (= (x458 699302164) (x107 699302164)))
(assert (= (+ (x140 x133) 1) (x140 (x364 x133 1))))
(assert (x454 x39))
(assert (x454 x489))
(assert (x209 x191))
(assert (x454 x168))
(assert (=> (>= 10000 x476) (= (x458 x476) (x107 x476))))
(assert (x454 x397))
(assert (x454 x492))
(assert (x209 x499))
(assert (x454 x71))
(assert (x454 x437))
(assert (x454 x526))
(assert (=> (>= 10000 x499) (= (x107 x499) (x458 x499))))
(assert (x454 x376))
(assert (x454 x615))
(assert (x454 x613))
(assert (x454 x475))
(assert (= (+ 2 (x140 x355)) (x140 (x364 x355 2))))
(assert (x454 x544))
(assert (x454 x229))
(assert (x454 x27))
(assert (x454 x603))
(assert (x209 x620))
(assert (x454 x183))
(assert (=> (<= x13 10000) (= (x458 x13) (x107 x13))))
(assert (x454 x306))
(assert (x454 x424))
(assert (x454 x128))
(assert (x454 x89))
(assert (x454 x599))
(assert (x454 x441))
(assert (x454 x315))
(assert (x454 x356))
(assert (x454 x582))
(assert (= (x140 (x458 3647180086)) 3647180086))
(assert (x454 x92))
(assert (= (and x521 (not x322)) x488))
(assert (x454 x265))
(assert (= x242 (and x610 x34)))
(assert (x454 x453))
(assert (x454 x417))
(assert (= (and (not x361) x159) x580))
(assert (= (and x608 x559) x34))
(assert (x454 x639))
(assert (x454 x490))
(assert (= (=> (= x164 true) x258) x262))
(assert (x454 x363))
(assert (x454 x244))
(assert (x454 x16))
(assert (x454 x427))
(assert (x209 x427))
(assert (x454 x109))
(assert (= (=> (and (= x10 x500) (= x272 x299) (= x170 x164) (= x602 x204) (= x378 x200) (= x494 x613) (= (* x299 x169) x452) (= (or x474 x162) x634) (= x224 x466) (= x112 x325) (= x285 (and x434 x302)) (= x359 x484) (= x278 (> x263 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (> x331 115792089237316195423570985008687907853269984665640564039457584007913129639935) x162) (= x446 (ite (<= x349 57896044618658097711785492504343953926634992332820282019728792003956564819967) x349 (- x349 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x605 x243) (= x359 x576) (= 0 x597) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x408) (= (> x351 115792089237316195423570985008687907853269984665640564039457584007913129639935) x573) (= x550 (or x471 x91)) (= x529 x602) (= x306 x435) (= x29 x576) (= x135 (or (not x136) x170)) (= x210 x636) (= x605 x75) (= x314 x616) (= x544 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x139 x417) (= x226 x523) (= x509 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x18) x18 (- x18 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x534 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x120) x120 (- x120 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x331 (- x314 x421)) (= x157 0) (= x539 (* x457 x204)) (= x29 x106) (= x328 x536) (= x291 (* x8 x4)) (= x504 (> x100 0)) (= x511 (* x80 x473)) (= x321 (and x574 x611)) (= x479 0) (= x272 x605) (= x161 (not (= x212 x51))) (= x572 (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x320)) (= (> x303 x291) x202) (= x568 x82) (= x75 x473) (= x630 0) (= x349 x177) (= x445 x200) (= (or x572 x96) x21) (= x401 (< x207 x536)) (= (> x511 115792089237316195423570985008687907853269984665640564039457584007913129639935) x257) (= x467 x181) (= x4 x378) (= x122 (> 0 x478)) (= (* x460 x583) x351) (= x80 x568) (= x523 x315) (= x508 (* x139 x59)) (= x263 (+ x6 x189)) (= x638 (< x47 0)) (= x504 x136) (= (or x122 x118) x77) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x345) (= x605 x89) (= (and x77 x161) x62) (= x471 (not x500)) (= 0 x79) (= x460 x336) (= x602 x438) (= x306 x6) (= x389 x435) (= x421 (ite (<= x226 57896044618658097711785492504343953926634992332820282019728792003956564819967) x226 (- x226 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x212 x181) (= x124 x177) (= x474 (> 0 x184)) (= x523 x612) (= x308 x396) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x88) (= x8 x336) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x300) x118) (= x616 x330) (= x600 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x96 (< x116 0)) (= x385 (< x508 x31)) (= x289 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x445 x201) (= x583 x229) (= x91 (not x636)) (= (+ x267 x534) x47) (= (< x539 x12) x611) (= x492 x51) (= (not (= x438 0)) x574) (= x267 x389) (= x266 x100) (= (- x396 x446) x116) (= x199 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x16) x16 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (ite (<= x315 57896044618658097711785492504343953926634992332820282019728792003956564819967) x315 (- x315 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x586) (= x328 x12) (= x128 x308) (= x613 x330) (= x475 x492) (= x530 0) (= x18 x177) (= x605 x217) (= x354 x89) (= x286 (and x587 x401)) (= x302 (or x278 x638)) (= x523 x16) (= x548 x568) (= x507 x568) (= (+ x106 x199) x300) (= x247 (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x452)) (= (- x466 x509) x320) (= x217 x457) (= x189 (ite (<= x124 57896044618658097711785492504343953926634992332820282019728792003956564819967) x124 (- x124 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* x112 x548) x31) (= x324 (> x589 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x417 x200) (= x184 (- x494 x358)) (= (not (= x82 0)) x587) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x633) (= x128 x224) (= x59 x40) (= x207 (* x354 x507)) (= x200 x229) (= x177 x120) (= (not (= x467 x475)) x434) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x219) (= (* x529 x264) x303) (= x243 x264) (= (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x612) x612 (- x612 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x358) (= x589 (* x502 x201)) (= x602 x169) (= x40 x502) (= (+ x484 x586) x478) (= x605 x325) (= x437 0)) (and (=> (and (= x333 x164) (= (or (not x25) x333) x563) (= x25 x21)) (and (=> (and (= (or x517 (not x190)) x288) (= x164 x517) (= x190 x634)) (and (=> (and (= (or x318 (not x221)) x482) (= x221 x285) (= x318 x164)) (and x482 (=> (and (= x164 x340) (= x62 x119) (= x588 (or (not x119) x340))) (and (=> (and (= (or (not x512) x628) x78) (= x164 x628) (= x512 x247)) (and (=> (and (= x257 x440) (= x525 x164) (= (or x525 (not x440)) x310)) (and (=> (and (= x110 x164) (= (or (not x365) x110) x167) (= x365 x550)) (and x167 (=> (and (= x549 x573) (= x164 x261) (= (or x261 (not x549)) x150)) (and x150 (=> (and (= x284 (or (not x238) x206)) (= x238 x202) (= x206 x164)) (and x284 (=> (and (= x164 x626) (= x324 x433) (= (or (not x433) x626) x624)) (and x624 (=> (and (= x296 x385) (= x149 (or (not x296) x337)) (= x164 x337)) (and x149 (=> (and (= x160 x164) (= x321 x560) (= x17 (or (not x560) x160))) (and x17 (=> (and (= x286 x95) (= x164 x444) (= x69 (or (not x95) x444))) (and x69 (=> (and (= x188 (or x584 x225)) (= (or x192 x188) x309) (= x385 x604) (= x554 (or (not x557) x425)) (= x550 x632) (= (or x347 x382) x422) (= x426 (or x450 x256)) (= x407 (or x426 x292)) (= (or x622 x155) x567) (= x285 x388) (= (or x3 x245) x61) (= x622 (or x309 x604)) (= x164 x557) (= x247 x203) (= (or x632 x61) x403) (= x3 x257) (= x202 x225) (= (or x166 x403) x584) (= x425 (or x211 x567)) (= (or x422 x203) x245) (= x62 x347) (= x450 x21) (= x504 x256) (= x211 x286) (= (or x407 x388) x382) (= x634 x292) (= x192 x324) (= x321 x155) (= x166 x573)) x554))))))))))))))) x310)) x78)) x588)))) x288)) x563)) x135)) x287))
(assert (= (and x537 (not x55)) x449))
(assert (= (+ (x140 x443) 1) (x140 (x364 x443 1))))
(assert (x454 x45))
(assert (x454 x530))
(assert (x454 x151))
(assert (x454 x157))
(assert (x454 x350))
(assert (x454 x505))
(assert (x454 x81))
(assert (=> (>= 10000 x620) (= (x458 x620) (x107 x620))))
(assert (x454 x270))
(assert (x454 x141))
(assert (= (x140 (x458 231365057)) 231365057))
(assert (= (+ (x140 x381) 1) (x140 (x364 x381 1))))
(assert (= x623 (=> (= true x164) x258)))
(assert (x454 x26))
(assert (x454 x461))
(assert (= x311 (and x41 x24)))
(assert (x454 x383))
(assert (x520 x26 x577))
(assert (x454 x459))
(assert (x416 x213))
(assert (x454 x410))
(assert (x454 x163))
(assert (x454 x515))
(assert (= (x140 (x458 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (=> (>= 10000 x218) (= (x458 x218) (x107 x218))))
(assert (x454 x276))
(assert (x454 x451))
(assert (x454 x597))
(assert (= (x140 (x458 3995103268)) 3995103268))
(assert (= x476 (x140 (x107 x476))))
(assert (x454 x496))
(assert (= (x458 231365057) (x107 231365057)))
(assert (= x332 (and x195 (not x313))))
(assert (x454 x298))
(assert (= x33 (and (not x562) x353)))
(assert (= (x140 (x458 2265735533)) 2265735533))
(assert (x454 x305))
(assert (x454 x308))
(assert (x454 x344))
(assert (x454 x223))
(assert (x454 x219))
(assert (x416 x165))
(assert (x454 x499))
(assert (x454 x468))
(assert (x454 x316))
(assert (= (x107 57896044618658097711785492504343953926634992332820282019728792003956564819967) (x458 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (=> (<= x427 10000) (= (x458 x427) (x107 x427))))
(assert (x454 x250))
(assert (x454 x127))
(assert (x454 x120))
(assert (x454 x503))
(assert (= x231 (and x255 x311)))
(assert (x454 x593))
(assert (= (x458 2265735533) (x107 2265735533)))
(assert (= (x107 1461501637330902918203684832716283019655932542975) (x458 1461501637330902918203684832716283019655932542975)))
(assert (x209 x93))
(assert (x454 x197))
(assert (x454 x455))
(assert (x454 x445))
(assert (x416 x552))
(assert (x209 x147))
(assert (x209 x250))
(assert (x454 x335))
(assert (x520 x392 x213))
(assert (x454 x527))
(assert (= x366 (or x637 x470)))
(assert (x454 x13))
(assert (x416 x577))
(assert (x454 x266))
(assert (= (=> (or (not x164) x164) x287) x258))
(assert (= (x458 1710941022) (x107 1710941022)))
(assert (x209 x384))
(assert (= x134 (and (not x553) x579)))
(assert (= (and x553 x579) x111))
(assert (x454 x431))
(assert (x209 x476))
(assert (x454 x545))
(assert (x454 x522))
(assert (x454 x411))
(assert (x454 x113))
(assert (= x555 (and (not x436) x423)))
(assert (x454 x392))
(assert (= (and (not x610) x34) x487))
(assert (x454 x32))
(assert (= (and x322 x521) x390))
(assert (= (x140 (x107 x250)) x250))
(assert (= x353 (and x578 x618)))
(assert (x454 x591))
(assert (= x618 (and x55 x537)))
(assert (x454 x175))
(assert (= x427 (x140 (x107 x427))))
(assert (x454 x121))
(assert (x454 x246))
(assert (= (x140 (x107 x93)) x93))
(assert (= (and x240 x90) x537))
(assert (x454 x633))
(assert (= (x140 (x458 558109909)) 558109909))
(assert (x454 x616))
(assert (= (and x49 x487) x84))
(assert (x454 x360))
(assert (= (x140 (x107 x621)) x621))
(assert (x454 x621))
(assert (x454 x625))
(assert (x454 x51))
(assert (x454 x181))
(assert (= (x107 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x458 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x140 (x364 x234 1)) (+ (x140 x234) 1)))
(assert (x454 x328))
(assert (x454 x600))
(assert (x454 x391))
(assert (= (x140 (x107 x441)) x441))
(assert (x454 x612))
(assert (x454 x213))
(assert (x454 x177))
(assert (x454 x269))
(assert (= x413 (and x432 (not x462))))
(assert (= (x140 (x458 1161348331)) 1161348331))
(assert (x454 x510))
(assert (x454 x476))
(assert (x454 x389))
(assert (x454 x547))
(assert (x454 x102))
(assert (x454 x56))
(assert (x454 x448))
(assert (= (x140 (x364 x498 1)) (+ 1 (x140 x498))))
(assert (x454 x126))
(assert (x454 x115))
(assert (x454 x493))
(assert (x454 x172))
(assert (x454 x212))
(assert (x416 x74))
(assert (x520 x552 x165))
(assert (x454 x52))
(assert (x454 x630))
(assert (x454 x377))
(assert (=> (>= 10000 x384) (= (x107 x384) (x458 x384))))
(assert (x454 x402))
(assert (x454 x29))
(assert (x454 x540))
(assert (x454 x178))
(assert (x454 x147))
(assert (x454 x312))
(assert (= x371 (and x571 x222)))
(assert (x454 x14))
(assert (= (x458 3995103268) (x107 3995103268)))
(assert (x454 x295))
(assert (x209 x621))
(assert (x454 x481))
(assert (=> (<= x93 10000) (= (x458 x93) (x107 x93))))
(assert (x454 x224))
(assert (x209 x13))
(assert (= (x140 (x107 x499)) x499))
(assert (x454 x215))
(assert (= (x140 (x458 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= (x140 (x364 x379 1)) (+ (x140 x379) 1)))
(assert (= (and x84 x214) x430))
(assert (= x117 (or (and x311 (not x255)) (and (not x399) x575) (and x98 (not x595)) (and (not x53) x371) (and (not x24) x41) (and x240 (not x90)) (and x231 (not x607)) (and x571 (not x222)))))
(assert (= (and x111 (not x241)) x414))
(assert (= 699302164 (x140 (x458 699302164))))
(assert (x454 x259))
(assert (x454 x70))
(assert (= (and x575 x399) x571))
(assert (= (x458 558109909) (x107 558109909)))
(assert (x454 x130))
(assert (x454 x272))
(assert (x454 x154))
(assert (= (x140 (x107 x13)) x13))
(assert (x454 x405))
(assert (= (+ 1 (x140 x156)) (x140 (x364 x156 1))))
(assert (= (x140 (x458 3207937467)) 3207937467))
(assert (= x551 (=> (and (and (= x492 x496) (= x181 x603) (= (ite x322 x148 x248) x40) (= x313 (not (= x603 x496)))) (or (and (and (= x54 x369) (= x376 x576) (= x282 x205) (= x54 x376)) (not x313)) (and x313 (and (= x125 (ite (<= x27 57896044618658097711785492504343953926634992332820282019728792003956564819967) x27 (- x27 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (+ x125 x323) x73) (= x576 x102) (= x102 x323) (= x523 x27) (= x282 x73) (= x369 x368))))) x64)))
(assert (x454 x11))
(assert (= (x458 3647180086) (x107 3647180086)))
(assert (x454 x524))
(assert (= x579 (or x332 x171)))
(assert (x454 x485))
(assert (x454 x393))
(assert (= (x458 2094874590) (x107 2094874590)))
(assert (= (and x164 x297) x470))
(assert (=> (>= 10000 x20) (= (x107 x20) (x458 x20))))
(assert (= (and x353 x562) x608))
(assert (x454 x523))
(assert (= (and x111 x241) x159))
(assert (x454 x218))
(assert (x454 x345))
(assert (x454 x58))
(check-sat)
(exit)