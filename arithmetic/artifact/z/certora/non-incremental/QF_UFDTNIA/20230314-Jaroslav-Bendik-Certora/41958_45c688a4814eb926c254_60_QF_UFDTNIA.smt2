(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x185 0)) (((x172 (x988 x185) (x404 x185) (x1017 Int)) (x26 (x810 Int)) (x790 (x46 x185) (x83 Int)))))
(declare-fun x984 () Bool)
(declare-fun x796 () Int)
(declare-fun x307 () Bool)
(declare-fun x201 () Int)
(declare-fun x25 () Int)
(declare-fun x11 () Int)
(declare-fun x268 () Int)
(declare-fun x586 () Bool)
(declare-fun x222 () Int)
(declare-fun x877 () Bool)
(declare-fun x556 (Int) Int)
(declare-fun x10 () Int)
(declare-fun x994 () Int)
(declare-fun x254 () Int)
(declare-fun x493 () Bool)
(declare-fun x243 () Int)
(declare-fun x631 () Int)
(declare-fun x407 () Int)
(declare-fun x87 () Bool)
(declare-fun x621 () Int)
(declare-fun x1037 () Int)
(declare-fun x65 () Int)
(declare-fun x750 () Bool)
(declare-fun x195 () x185)
(declare-fun x489 () Bool)
(declare-fun x350 () Bool)
(declare-fun x366 () Int)
(declare-fun x925 () Int)
(declare-fun x891 () Int)
(declare-fun x102 () Bool)
(declare-fun x1009 () Int)
(declare-fun x482 () Bool)
(declare-fun x614 () Int)
(declare-fun x30 () Int)
(declare-fun x679 () Bool)
(declare-fun x895 () Int)
(declare-fun x669 () x185)
(declare-fun x797 () Int)
(declare-fun x780 () Int)
(declare-fun x735 () Bool)
(declare-fun x985 () Int)
(declare-fun x210 () Bool)
(declare-fun x302 () Int)
(declare-fun x387 () x185)
(declare-fun x841 () Int)
(declare-fun x365 () Bool)
(declare-fun x4 () x185)
(declare-fun x691 () Int)
(declare-fun x217 () Int)
(declare-fun x876 () Bool)
(declare-fun x449 () Bool)
(declare-fun x783 () Bool)
(declare-fun x712 () Int)
(declare-fun x161 () Int)
(declare-fun x481 () Int)
(declare-fun x563 () Bool)
(declare-fun x553 () Int)
(declare-fun x22 () Int)
(declare-fun x928 () Int)
(declare-fun x94 () Int)
(declare-fun x590 () Bool)
(declare-fun x1018 () Int)
(declare-fun x558 () x185)
(declare-fun x138 () Bool)
(declare-fun x197 () Bool)
(declare-fun x45 () Bool)
(declare-fun x740 () Int)
(declare-fun x162 () Int)
(declare-fun x508 () x185)
(declare-fun x942 (x185) Int)
(declare-fun x395 () x185)
(declare-fun x683 () Bool)
(declare-fun x441 () Bool)
(declare-fun x287 () Bool)
(declare-fun x548 () Bool)
(declare-fun x888 () Bool)
(declare-fun x951 (x185) Int)
(declare-fun x74 () Bool)
(declare-fun x453 () Int)
(declare-fun x198 () Int)
(declare-fun x139 () Bool)
(declare-fun x677 () Int)
(declare-fun x41 () Int)
(declare-fun x462 () Int)
(declare-fun x791 () Int)
(declare-fun x660 () Int)
(declare-fun x402 () Int)
(declare-fun x695 () Bool)
(declare-fun x905 () Bool)
(declare-fun x930 () Bool)
(declare-fun x134 () Int)
(declare-fun x206 () Int)
(declare-fun x633 () Int)
(declare-fun x907 () Bool)
(declare-fun x530 () Bool)
(declare-fun x277 () Bool)
(declare-fun x878 () Bool)
(declare-fun x179 () Int)
(declare-fun x571 (Int) Int)
(declare-fun x526 () Int)
(declare-fun x31 () x185)
(declare-fun x245 () Int)
(declare-fun x244 () x185)
(declare-fun x899 () Int)
(declare-fun x943 () Bool)
(declare-fun x573 (Int) Int)
(declare-fun x600 () Bool)
(declare-fun x705 () Int)
(declare-fun x719 () Int)
(declare-fun x344 () x185)
(declare-fun x16 () Bool)
(declare-fun x261 () Bool)
(declare-fun x865 () Int)
(declare-fun x531 () Int)
(declare-fun x689 () Int)
(declare-fun x834 () Int)
(declare-fun x215 () Bool)
(declare-fun x180 () x185)
(declare-fun x147 () x185)
(declare-fun x406 () Bool)
(declare-fun x318 () Int)
(declare-fun x181 () Int)
(declare-fun x765 () Bool)
(declare-fun x240 () Int)
(declare-fun x754 () Int)
(declare-fun x290 () Bool)
(declare-fun x439 () x185)
(declare-fun x345 () Bool)
(declare-fun x821 () Bool)
(declare-fun x738 () Int)
(declare-fun x264 () Int)
(declare-fun x1040 () Int)
(declare-fun x166 () Int)
(declare-fun x122 () Bool)
(declare-fun x183 () Bool)
(declare-fun x317 () Int)
(declare-fun x118 () Bool)
(declare-fun x313 (Int Int) Int)
(declare-fun x1043 () Bool)
(declare-fun x282 () Bool)
(declare-fun x812 () x185)
(declare-fun x697 () Bool)
(declare-fun x971 () Bool)
(declare-fun x1046 () Int)
(declare-fun x588 () x185)
(declare-fun x759 () Int)
(declare-fun x1020 () Bool)
(declare-fun x470 () Int)
(declare-fun x959 () Bool)
(declare-fun x595 () Bool)
(declare-fun x398 () Int)
(declare-fun x305 () Bool)
(declare-fun x836 () Bool)
(declare-fun x348 () Int)
(declare-fun x852 () Int)
(declare-fun x886 () x185)
(declare-fun x121 () Bool)
(declare-fun x546 () Int)
(declare-fun x457 () Bool)
(declare-fun x380 () Int)
(declare-fun x503 () Int)
(declare-fun x82 () Int)
(declare-fun x126 () x185)
(declare-fun x212 () Int)
(declare-fun x1012 () Bool)
(declare-fun x843 () Bool)
(declare-fun x923 () Int)
(declare-fun x1031 () x185)
(declare-fun x433 () Int)
(declare-fun x604 () Bool)
(declare-fun x221 () Int)
(declare-fun x211 () Int)
(declare-fun x996 () Int)
(declare-fun x339 () x185)
(declare-fun x202 () Int)
(declare-fun x170 () Int)
(declare-fun x730 () Int)
(declare-fun x718 () Int)
(declare-fun x218 () Bool)
(declare-fun x729 () x185)
(declare-fun x270 () x185)
(declare-fun x564 () Bool)
(declare-fun x900 () Bool)
(declare-fun x55 () x185)
(declare-fun x912 () x185)
(declare-fun x381 () Int)
(declare-fun x832 () Bool)
(declare-fun x954 () x185)
(declare-fun x363 () Int)
(declare-fun x826 () Int)
(declare-fun x880 () Bool)
(declare-fun x474 () Int)
(declare-fun x255 (Int) Int)
(declare-fun x612 () Bool)
(declare-fun x149 () Int)
(declare-fun x178 () Int)
(declare-fun x353 () Int)
(declare-fun x637 () Int)
(declare-fun x687 () Bool)
(declare-fun x751 () Int)
(declare-fun x392 () Int)
(declare-fun x1022 () x185)
(declare-fun x948 () Int)
(declare-fun x105 () Bool)
(declare-fun x813 () Int)
(declare-fun x12 () Int)
(declare-fun x636 () Bool)
(declare-fun x412 () Bool)
(declare-fun x818 () x185)
(declare-fun x756 () Int)
(declare-fun x699 () Int)
(declare-fun x39 () Bool)
(declare-fun x295 () x185)
(declare-fun x5 () Int)
(declare-fun x396 () Int)
(declare-fun x981 () Bool)
(declare-fun x924 () Int)
(declare-fun x113 () Bool)
(declare-fun x804 () Int)
(declare-fun x120 () Int)
(declare-fun x440 () Bool)
(declare-fun x872 () Bool)
(declare-fun x807 () Int)
(declare-fun x308 () x185)
(declare-fun x902 () Int)
(declare-fun x722 () Bool)
(declare-fun x500 () Int)
(declare-fun x129 () Int)
(declare-fun x14 () Int)
(declare-fun x303 () Int)
(declare-fun x511 () Bool)
(declare-fun x260 () Int)
(declare-fun x854 () Int)
(declare-fun x297 () Int)
(declare-fun x459 () Int)
(declare-fun x343 () Int)
(declare-fun x521 () Bool)
(declare-fun x223 () Bool)
(declare-fun x205 () Int)
(declare-fun x496 () Bool)
(declare-fun x93 () Bool)
(declare-fun x711 () Int)
(declare-fun x413 () Int)
(declare-fun x629 () Int)
(declare-fun x976 () Bool)
(declare-fun x800 () Bool)
(declare-fun x817 () Bool)
(declare-fun x271 () Bool)
(declare-fun x266 () Int)
(declare-fun x427 () Int)
(declare-fun x555 () Bool)
(declare-fun x252 (Int) Int)
(declare-fun x547 () x185)
(declare-fun x417 () Int)
(declare-fun x137 () Int)
(declare-fun x501 () Int)
(declare-fun x103 () Int)
(declare-fun x256 () Bool)
(declare-fun x864 () Bool)
(declare-fun x693 () Int)
(declare-fun x641 () x185)
(declare-fun x758 () Int)
(declare-fun x835 () Bool)
(declare-fun x584 () Int)
(declare-fun x285 () Bool)
(declare-fun x520 () Bool)
(declare-fun x312 () Int)
(declare-fun x49 () Bool)
(declare-fun x232 () Int)
(declare-fun x970 () Int)
(declare-fun x848 () x185)
(declare-fun x360 () Int)
(declare-fun x861 () Bool)
(declare-fun x674 () Int)
(declare-fun x235 () x185)
(declare-fun x316 () Int)
(declare-fun x85 () Bool)
(declare-fun x668 () Int)
(declare-fun x771 () Int)
(declare-fun x1028 () x185)
(declare-fun x956 () x185)
(declare-fun x921 () Int)
(declare-fun x803 () Int)
(declare-fun x419 () Int)
(declare-fun x111 () x185)
(declare-fun x788 () Int)
(declare-fun x44 () Int)
(declare-fun x227 () Int)
(declare-fun x275 () x185)
(declare-fun x792 () Bool)
(declare-fun x752 () Int)
(declare-fun x576 () x185)
(declare-fun x101 () Int)
(declare-fun x394 () Bool)
(declare-fun x156 () Int)
(declare-fun x779 () x185)
(declare-fun x471 () Bool)
(declare-fun x32 () Bool)
(declare-fun x857 () Int)
(declare-fun x570 () Bool)
(declare-fun x233 () Int)
(declare-fun x337 () Int)
(declare-fun x726 () Bool)
(declare-fun x504 () Int)
(declare-fun x335 () Int)
(declare-fun x594 () Bool)
(declare-fun x554 () Bool)
(declare-fun x451 () Bool)
(declare-fun x935 () Int)
(declare-fun x506 () Bool)
(declare-fun x587 () Int)
(declare-fun x978 () Bool)
(declare-fun x1007 (Int) Int)
(declare-fun x596 () Bool)
(declare-fun x401 () Int)
(declare-fun x643 () Bool)
(declare-fun x593 () Int)
(declare-fun x927 () Int)
(declare-fun x914 () Int)
(declare-fun x421 () Int)
(declare-fun x802 () Bool)
(declare-fun x27 () Bool)
(declare-fun x659 () Int)
(declare-fun x863 () Bool)
(declare-fun x153 () Bool)
(declare-fun x849 () Int)
(declare-fun x947 () Bool)
(declare-fun x370 () Int)
(declare-fun x173 () Int)
(declare-fun x409 () Bool)
(declare-fun x862 () Int)
(declare-fun x284 () Int)
(declare-fun x525 () Bool)
(declare-fun x488 () Int)
(declare-fun x116 () Int)
(declare-fun x833 () Bool)
(declare-fun x1047 () Int)
(declare-fun x88 () Int)
(declare-fun x720 () Int)
(declare-fun x764 () x185)
(declare-fun x487 () Bool)
(declare-fun x993 () Int)
(declare-fun x653 () Bool)
(declare-fun x622 () Int)
(declare-fun x1016 () Int)
(declare-fun x71 () Bool)
(declare-fun x424 () Int)
(declare-fun x429 () Bool)
(declare-fun x715 () Int)
(declare-fun x774 () Bool)
(declare-fun x624 () Int)
(declare-fun x680 () Int)
(declare-fun x507 () Bool)
(declare-fun x106 () Int)
(declare-fun x278 () Bool)
(declare-fun x539 () Int)
(declare-fun x2 () Int)
(declare-fun x467 (Int) Int)
(declare-fun x177 () Bool)
(declare-fun x144 () Bool)
(declare-fun x445 () Bool)
(declare-fun x656 () Int)
(declare-fun x1024 () Int)
(declare-fun x315 () Int)
(declare-fun x397 () Int)
(declare-fun x974 () Int)
(declare-fun x296 () Int)
(declare-fun x289 () Bool)
(declare-fun x808 () Int)
(declare-fun x522 () Bool)
(declare-fun x1049 () x185)
(declare-fun x579 () Int)
(declare-fun x1052 () Bool)
(declare-fun x990 () Bool)
(declare-fun x875 () Int)
(declare-fun x199 () Bool)
(declare-fun x744 () Int)
(declare-fun x856 () Int)
(declare-fun x1013 () x185)
(declare-fun x962 () Bool)
(declare-fun x187 () Bool)
(declare-fun x269 () Int)
(declare-fun x1048 () Int)
(declare-fun x24 () Int)
(declare-fun x647 () Int)
(declare-fun x9 () Int)
(declare-fun x464 () Int)
(declare-fun x431 () Int)
(declare-fun x603 () Int)
(declare-fun x6 () x185)
(declare-fun x824 () Int)
(declare-fun x582 () Int)
(declare-fun x333 () Int)
(declare-fun x847 () Int)
(declare-fun x259 () Int)
(declare-fun x1044 () Bool)
(declare-fun x977 () Int)
(declare-fun x473 () Int)
(declare-fun x140 () Bool)
(declare-fun x379 () Int)
(declare-fun x908 () Int)
(declare-fun x231 () x185)
(declare-fun x63 () Int)
(declare-fun x463 () Bool)
(declare-fun x626 () Int)
(declare-fun x666 () Int)
(declare-fun x390 () Int)
(declare-fun x517 () Bool)
(declare-fun x50 () Int)
(declare-fun x124 () Bool)
(declare-fun x314 () Int)
(declare-fun x152 () Bool)
(declare-fun x939 () Int)
(declare-fun x330 () Bool)
(declare-fun x336 () Int)
(declare-fun x591 () Int)
(declare-fun x1034 () Int)
(declare-fun x887 () Bool)
(declare-fun x229 () x185)
(declare-fun x234 () x185)
(declare-fun x583 () Int)
(declare-fun x532 () Int)
(declare-fun x799 () x185)
(declare-fun x505 () x185)
(declare-fun x727 () Int)
(declare-fun x64 () Int)
(declare-fun x262 () Int)
(declare-fun x615 () Int)
(declare-fun x1011 () Bool)
(declare-fun x48 () Int)
(declare-fun x250 () Int)
(declare-fun x772 () Bool)
(declare-fun x672 (Int) x185)
(declare-fun x418 () Int)
(declare-fun x238 () Int)
(declare-fun x871 () Bool)
(declare-fun x766 () x185)
(declare-fun x416 () Int)
(declare-fun x613 () Int)
(declare-fun x551 () Int)
(declare-fun x696 () Int)
(declare-fun x495 () Bool)
(declare-fun x283 () Int)
(declare-fun x191 () Int)
(declare-fun x540 () Int)
(declare-fun x605 () Int)
(declare-fun x142 () Bool)
(declare-fun x408 () x185)
(declare-fun x909 () Int)
(declare-fun x447 () Int)
(declare-fun x159 () Bool)
(declare-fun x884 () Int)
(declare-fun x216 () Int)
(declare-fun x949 () Int)
(declare-fun x444 () Bool)
(declare-fun x572 () Int)
(declare-fun x704 () x185)
(declare-fun x940 () Int)
(declare-fun x52 () x185)
(declare-fun x904 () Bool)
(declare-fun x589 () Bool)
(declare-fun x331 () Bool)
(declare-fun x549 () Int)
(declare-fun x1001 () Int)
(declare-fun x174 () Int)
(declare-fun x1000 () Int)
(declare-fun x874 () Bool)
(declare-fun x148 () Int)
(declare-fun x1050 () Int)
(declare-fun x578 () Int)
(declare-fun x916 () Bool)
(declare-fun x357 () Int)
(declare-fun x692 () Bool)
(declare-fun x171 () Bool)
(declare-fun x559 () Bool)
(declare-fun x625 () Int)
(declare-fun x811 () Bool)
(declare-fun x678 () Int)
(declare-fun x28 () Bool)
(declare-fun x550 () Bool)
(declare-fun x793 () Int)
(declare-fun x910 () Bool)
(declare-fun x13 () Int)
(declare-fun x953 () Int)
(declare-fun x536 () Int)
(declare-fun x820 () x185)
(declare-fun x944 () Int)
(declare-fun x950 () Bool)
(declare-fun x890 () Bool)
(declare-fun x340 () Bool)
(declare-fun x33 () Bool)
(declare-fun x280 () Int)
(declare-fun x299 () x185)
(declare-fun x341 () Bool)
(declare-fun x468 () Int)
(declare-fun x757 () Int)
(declare-fun x746 () Int)
(declare-fun x767 () Bool)
(declare-fun x20 () Bool)
(declare-fun x465 () Int)
(declare-fun x598 () Int)
(declare-fun x78 () Bool)
(declare-fun x347 () x185)
(declare-fun x768 () Bool)
(declare-fun x986 () Int)
(declare-fun x786 () Int)
(declare-fun x784 () Bool)
(declare-fun x739 () Int)
(declare-fun x367 () Bool)
(declare-fun x708 () Int)
(declare-fun x742 () Bool)
(declare-fun x560 () Bool)
(declare-fun x632 () Int)
(declare-fun x1029 () Int)
(declare-fun x135 () Int)
(declare-fun x484 () Int)
(declare-fun x681 () Bool)
(declare-fun x794 () Bool)
(declare-fun x91 () Int)
(declare-fun x184 () Int)
(declare-fun x456 () Int)
(declare-fun x870 () Int)
(declare-fun x196 () Int)
(declare-fun x650 () Int)
(declare-fun x157 () Int)
(declare-fun x226 () Bool)
(declare-fun x286 () Int)
(declare-fun x209 () Bool)
(declare-fun x922 () Bool)
(declare-fun x288 () Int)
(declare-fun x76 () Bool)
(declare-fun x334 () Bool)
(declare-fun x214 () Bool)
(declare-fun x736 () Bool)
(declare-fun x436 () Bool)
(declare-fun x272 () Int)
(declare-fun x846 () Int)
(declare-fun x349 () Int)
(declare-fun x66 () Bool)
(declare-fun x146 () Int)
(declare-fun x182 () Int)
(declare-fun x1042 () x185)
(declare-fun x369 () Bool)
(declare-fun x81 () x185)
(declare-fun x577 () Int)
(declare-fun x662 () Bool)
(declare-fun x458 () Int)
(declare-fun x580 () Int)
(declare-fun x98 () Int)
(declare-fun x969 () Int)
(declare-fun x552 () Bool)
(declare-fun x127 () Int)
(declare-fun x717 () Bool)
(declare-fun x1025 () Int)
(declare-fun x827 () Int)
(declare-fun x574 () Bool)
(declare-fun x1032 () Int)
(declare-fun x825 () Bool)
(declare-fun x513 () Bool)
(declare-fun x155 () Int)
(declare-fun x79 () Int)
(declare-fun x845 () Bool)
(declare-fun x661 () x185)
(declare-fun x1039 () Bool)
(declare-fun x537 () Bool)
(declare-fun x698 () Bool)
(declare-fun x667 () x185)
(declare-fun x906 () Bool)
(declare-fun x151 () Bool)
(declare-fun x361 () Int)
(declare-fun x186 () Int)
(declare-fun x249 () Int)
(declare-fun x476 () Int)
(declare-fun x920 () Int)
(declare-fun x452 () Int)
(declare-fun x291 () Bool)
(declare-fun x158 () x185)
(declare-fun x472 () x185)
(declare-fun x710 () Int)
(declare-fun x362 () Bool)
(declare-fun x761 () Int)
(declare-fun x610 () Int)
(declare-fun x502 () Int)
(declare-fun x509 () Int)
(declare-fun x805 () Bool)
(declare-fun x265 () Int)
(declare-fun x228 () Bool)
(declare-fun x957 () Int)
(declare-fun x220 () Bool)
(declare-fun x617 () x185)
(declare-fun x321 () Int)
(declare-fun x702 () Int)
(declare-fun x534 () Int)
(declare-fun x425 () Bool)
(declare-fun x753 () Int)
(declare-fun x175 () Int)
(declare-fun x84 () Int)
(declare-fun x569 () Bool)
(declare-fun x1033 () Int)
(declare-fun x798 () Int)
(declare-fun x945 () Int)
(declare-fun x581 () Int)
(declare-fun x937 () Int)
(declare-fun x901 () Int)
(declare-fun x60 () Int)
(declare-fun x654 () Int)
(declare-fun x703 () Int)
(declare-fun x776 () Int)
(declare-fun x760 () x185)
(declare-fun x688 () Bool)
(declare-fun x775 () Bool)
(declare-fun x732 () Bool)
(declare-fun x405 () Int)
(declare-fun x320 () x185)
(declare-fun x585 () Int)
(declare-fun x466 () Bool)
(declare-fun x7 () Int)
(declare-fun x535 () Bool)
(declare-fun x516 () x185)
(declare-fun x59 () Bool)
(declare-fun x896 () Int)
(declare-fun x1002 () Int)
(declare-fun x1045 () x185)
(declare-fun x987 () Bool)
(declare-fun x741 () Int)
(declare-fun x3 () Int)
(declare-fun x979 () x185)
(declare-fun x414 () Int)
(declare-fun x725 () x185)
(declare-fun x635 () Int)
(declare-fun x639 () Bool)
(declare-fun x913 () Int)
(declare-fun x36 () x185)
(declare-fun x1003 () Bool)
(declare-fun x640 () Int)
(declare-fun x194 (Int) Int)
(declare-fun x273 () Int)
(declare-fun x685 () x185)
(declare-fun x1027 () Int)
(declare-fun x443 () Int)
(declare-fun x809 () Int)
(declare-fun x642 () Int)
(declare-fun x56 () Int)
(declare-fun x411 () Int)
(declare-fun x538 () Bool)
(declare-fun x814 () Int)
(declare-fun x762 () Int)
(declare-fun x460 () Bool)
(declare-fun x241 () Bool)
(declare-fun x374 () Bool)
(declare-fun x204 () Int)
(declare-fun x926 () Int)
(declare-fun x737 () Int)
(declare-fun x868 () Bool)
(declare-fun x934 (Int) Int)
(declare-fun x842 () Bool)
(declare-fun x961 () Int)
(declare-fun x782 () Bool)
(declare-fun x634 () Int)
(declare-fun x393 () Int)
(declare-fun x1014 () Bool)
(declare-fun x480 () Int)
(declare-fun x606 () Int)
(declare-fun x450 () Bool)
(declare-fun x964 () Int)
(declare-fun x769 () Int)
(declare-fun x894 () Int)
(declare-fun x193 () Bool)
(declare-fun x364 () Int)
(declare-fun x338 () Bool)
(declare-fun x671 () Bool)
(declare-fun x851 () x185)
(declare-fun x437 (x185) Int)
(declare-fun x346 () Int)
(declare-fun x382 () Bool)
(declare-fun x475 () x185)
(declare-fun x1036 () Int)
(declare-fun x267 () x185)
(declare-fun x132 () Int)
(declare-fun x952 () Int)
(declare-fun x992 () Bool)
(declare-fun x714 () Bool)
(declare-fun x609 () Int)
(declare-fun x293 () Int)
(declare-fun x885 () Int)
(declare-fun x911 () Bool)
(declare-fun x19 () Int)
(declare-fun x645 () Int)
(declare-fun x1010 () Int)
(declare-fun x164 () Bool)
(declare-fun x867 () x185)
(declare-fun x492 () Int)
(declare-fun x356 () x185)
(declare-fun x1019 () Int)
(declare-fun x428 () x185)
(declare-fun x18 () Bool)
(declare-fun x310 () Int)
(declare-fun x107 () Bool)
(declare-fun x112 () Bool)
(declare-fun x168 () Bool)
(declare-fun x351 () Int)
(declare-fun x893 () Bool)
(declare-fun x855 () Bool)
(declare-fun x958 () x185)
(declare-fun x165 () Int)
(declare-fun x61 () Int)
(declare-fun x415 () Int)
(declare-fun x21 () Bool)
(declare-fun x92 () Int)
(declare-fun x237 () x185)
(declare-fun x557 () Int)
(declare-fun x816 () Int)
(declare-fun x17 () Bool)
(declare-fun x1006 () Bool)
(declare-fun x329 (Int) Int)
(declare-fun x89 () Bool)
(declare-fun x37 () Bool)
(declare-fun x608 () x185)
(declare-fun x777 () Int)
(declare-fun x694 () Int)
(declare-fun x141 () Int)
(declare-fun x663 () Int)
(declare-fun x306 () Bool)
(declare-fun x840 () Int)
(declare-fun x965 () Int)
(declare-fun x86 () Bool)
(declare-fun x850 () Bool)
(declare-fun x200 () Int)
(declare-fun x989 (Int) Int)
(declare-fun x38 () Int)
(declare-fun x432 () Int)
(declare-fun x999 () Int)
(declare-fun x682 () Bool)
(declare-fun x592 () Int)
(declare-fun x57 () Int)
(declare-fun x319 () Bool)
(declare-fun x649 () Bool)
(declare-fun x236 () Int)
(declare-fun x664 () Bool)
(declare-fun x69 () Int)
(declare-fun x815 () x185)
(declare-fun x384 () Bool)
(declare-fun x748 () Int)
(declare-fun x176 () Int)
(declare-fun x749 () x185)
(declare-fun x294 () Int)
(declare-fun x1051 () Int)
(declare-fun x114 () Int)
(declare-fun x219 () Int)
(declare-fun x247 () Int)
(declare-fun x514 () x185)
(declare-fun x190 () Bool)
(declare-fun x29 (x185) Int)
(declare-fun x541 () Int)
(declare-fun x115 () Bool)
(declare-fun x975 () Bool)
(declare-fun x342 () Int)
(declare-fun x446 () Bool)
(declare-fun x565 () x185)
(declare-fun x960 () x185)
(declare-fun x246 () Int)
(declare-fun x619 () x185)
(declare-fun x859 () Int)
(declare-fun x747 () Int)
(declare-fun x253 () Bool)
(declare-fun x512 () Int)
(declare-fun x1023 () Bool)
(declare-fun x494 () Int)
(declare-fun x628 () Bool)
(declare-fun x510 () Bool)
(declare-fun x955 () Bool)
(declare-fun x998 () x185)
(declare-fun x188 () Int)
(declare-fun x873 () Int)
(declare-fun x448 () Int)
(declare-fun x355 () Int)
(declare-fun x657 () Int)
(declare-fun x377 () Int)
(declare-fun x860 () x185)
(declare-fun x58 () Int)
(declare-fun x566 () Int)
(declare-fun x263 () Int)
(declare-fun x665 () x185)
(declare-fun x400 () Int)
(declare-fun x242 () Bool)
(declare-fun x1038 () Int)
(declare-fun x545 () Int)
(declare-fun x519 () x185)
(declare-fun x1 () Int)
(declare-fun x67 () Bool)
(declare-fun x721 () Int)
(declare-fun x486 () Bool)
(declare-fun x789 () Bool)
(declare-fun x966 () Int)
(declare-fun x324 () Int)
(declare-fun x352 () Bool)
(declare-fun x97 () Int)
(declare-fun x823 () Int)
(declare-fun x844 () x185)
(declare-fun x77 () x185)
(declare-fun x676 () Int)
(declare-fun x518 () Int)
(declare-fun x169 () x185)
(declare-fun x853 (Int) Int)
(declare-fun x542 () x185)
(declare-fun x257 () Int)
(declare-fun x995 () Int)
(declare-fun x648 () Bool)
(declare-fun x828 () Int)
(declare-fun x225 () Int)
(declare-fun x831 () Int)
(declare-fun x770 () Int)
(declare-fun x773 () Bool)
(declare-fun x378 () Bool)
(declare-fun x1041 () Bool)
(declare-fun x858 () Int)
(declare-fun x627 () Bool)
(declare-fun x422 () Int)
(declare-fun x838 () Bool)
(declare-fun x391 () Int)
(declare-fun x438 () Int)
(declare-fun x991 () Bool)
(declare-fun x375 () Int)
(declare-fun x701 () Bool)
(declare-fun x946 () Int)
(declare-fun x973 () Int)
(declare-fun x35 () Int)
(declare-fun x743 () Bool)
(declare-fun x499 () Int)
(declare-fun x372 (Int) Int)
(declare-fun x154 () Int)
(declare-fun x918 () Bool)
(declare-fun x543 () Bool)
(declare-fun x376 () Bool)
(declare-fun x51 () Bool)
(declare-fun x785 () Bool)
(declare-fun x524 () Int)
(declare-fun x829 () Bool)
(declare-fun x700 () Int)
(declare-fun x128 () Bool)
(declare-fun x601 () Int)
(declare-fun x932 () x185)
(declare-fun x533 () Int)
(declare-fun x709 () Bool)
(declare-fun x567 () Int)
(declare-fun x602 () Int)
(declare-fun x478 (x185) Int)
(declare-fun x490 () Int)
(declare-fun x936 () Int)
(declare-fun x498 () Int)
(declare-fun x130 () Int)
(declare-fun x630 () Bool)
(declare-fun x523 () Int)
(declare-fun x96 (Int Int) Int)
(declare-fun x599 () x185)
(declare-fun x568 () Bool)
(declare-fun x309 () Int)
(declare-fun x917 () Bool)
(declare-fun x919 () Int)
(declare-fun x497 () Int)
(declare-fun x145 () Int)
(declare-fun x410 () Bool)
(declare-fun x301 () Int)
(declare-fun x787 () Int)
(declare-fun x778 (Int) Int)
(declare-fun x755 () Int)
(declare-fun x213 () x185)
(declare-fun x123 () Bool)
(declare-fun x881 () Bool)
(declare-fun x373 () Int)
(declare-fun x734 () Bool)
(declare-fun x983 () Int)
(declare-fun x208 () Bool)
(declare-fun x745 () Bool)
(declare-fun x99 () Int)
(declare-fun x707 () Int)
(declare-fun x143 () Int)
(declare-fun x386 () Bool)
(declare-fun x892 () Int)
(declare-fun x607 () Int)
(declare-fun x879 () Int)
(declare-fun x368 () Bool)
(declare-fun x276 () Int)
(declare-fun x544 () Bool)
(declare-fun x529 () Int)
(declare-fun x822 () Int)
(declare-fun x684 () Bool)
(declare-fun x230 (Int) Int)
(declare-fun x454 () x185)
(declare-fun x133 () x185)
(declare-fun x327 () Int)
(declare-fun x938 () Int)
(declare-fun x763 (Int) Int)
(declare-fun x90 () Int)
(declare-fun x119 () Int)
(declare-fun x109 () x185)
(declare-fun x883 () Int)
(declare-fun x95 () Bool)
(declare-fun x136 () Int)
(declare-fun x358 () Int)
(declare-fun x426 () Bool)
(declare-fun x110 () Int)
(declare-fun x42 () Bool)
(declare-fun x423 () Bool)
(declare-fun x435 () Int)
(declare-fun x311 () Bool)
(declare-fun x479 () Int)
(declare-fun x75 () Int)
(declare-fun x690 () Bool)
(declare-fun x34 () Int)
(declare-fun x53 () Int)
(declare-fun x898 () Bool)
(declare-fun x724 () Int)
(declare-fun x304 () Bool)
(declare-fun x515 () Bool)
(declare-fun x620 () Int)
(declare-fun x80 () Bool)
(declare-fun x281 () Int)
(declare-fun x189 () Bool)
(declare-fun x388 () x185)
(declare-fun x716 () Bool)
(declare-fun x125 () Int)
(declare-fun x359 () Int)
(declare-fun x686 () Int)
(declare-fun x611 () Int)
(declare-fun x795 () Bool)
(declare-fun x869 () Int)
(declare-fun x670 () Int)
(declare-fun x1004 () Int)
(declare-fun x616 () Bool)
(declare-fun x638 () x185)
(declare-fun x967 () Int)
(declare-fun x1026 () Bool)
(declare-fun x70 () Int)
(declare-fun x655 () Bool)
(declare-fun x461 () Int)
(declare-fun x258 () Bool)
(declare-fun x972 () Int)
(declare-fun x239 () Bool)
(declare-fun x980 () Bool)
(declare-fun x389 () Int)
(declare-fun x646 () Bool)
(declare-fun x839 () Int)
(declare-fun x385 () Int)
(declare-fun x723 () Int)
(declare-fun x117 () x185)
(declare-fun x982 (Int) Int)
(declare-fun x54 () Int)
(declare-fun x167 () Int)
(declare-fun x248 () Bool)
(declare-fun x929 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x830 () Bool)
(declare-fun x399 () Bool)
(declare-fun x354 () Int)
(declare-fun x675 () Int)
(declare-fun x322 () Int)
(declare-fun x300 () Int)
(declare-fun x131 () Bool)
(declare-fun x434 () Int)
(declare-fun x941 () Bool)
(declare-fun x673 () Int)
(declare-fun x23 () Int)
(declare-fun x15 () Bool)
(declare-fun x1021 () Bool)
(declare-fun x931 () Int)
(declare-fun x72 () Int)
(declare-fun x160 () Int)
(declare-fun x68 () Int)
(declare-fun x163 () Bool)
(declare-fun x403 () Int)
(declare-fun x623 () Bool)
(declare-fun x279 () Bool)
(declare-fun x915 () Int)
(declare-fun x963 () Int)
(declare-fun x837 () Int)
(declare-fun x491 () Int)
(declare-fun x706 () Int)
(declare-fun x100 () Int)
(declare-fun x1035 () Int)
(declare-fun x1005 () Int)
(declare-fun x618 () Int)
(declare-fun x430 () Bool)
(declare-fun x150 () Int)
(declare-fun x251 () Bool)
(declare-fun x298 () Int)
(declare-fun x882 () Int)
(declare-fun x781 () Int)
(declare-fun x933 () Bool)
(declare-fun x968 () Int)
(declare-fun x713 () Bool)
(declare-fun x207 () Int)
(declare-fun x527 () Bool)
(declare-fun x455 () x185)
(declare-fun x469 () Int)
(declare-fun x326 () Int)
(declare-fun x73 () Bool)
(declare-fun x192 () Int)
(declare-fun x8 () Int)
(declare-fun x292 () Int)
(declare-fun x806 () Int)
(declare-fun x477 () Int)
(declare-fun x644 () Int)
(declare-fun x575 () Bool)
(declare-fun x728 () Bool)
(define-fun x371 ((x185 x185) (x897 Int)) x185 (ite ((_ is x790) x185) (x790 (x46 x185) (+ x897 (x83 x185))) (ite ((_ is x172) x185) (x172 (x988 x185) (x404 x185) (+ x897 (x1017 x185))) (x26 (+ (x810 x185) x897)))))
(define-fun x442 ((x332 Int)) Int (ite (and (>= x332 0) (< x332 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x332 (- x332 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x40 ((x332 Int)) Int (ite (and (< x332 0) (>= x332 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x332) x332))
(define-fun x733 ((x651 Int)) Bool (and (<= 0 x651) (< x651 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x62 ((x651 Int)) Bool (and (= (x313 x651 115792089237316195423570985008687907853269984665640564039457584007913129639935) x651) (= (x313 115792089237316195423570985008687907853269984665640564039457584007913129639935 x651) x651)))
(define-fun x819 ((x651 Int)) Bool (and (= (x313 x651 0) 0) (= (x313 0 x651) 0)))
(define-fun x1015 ((x651 Int)) Bool (= x651 (x313 x651 x651)))
(define-fun x561 ((x651 Int)) Bool (and (x1015 x651) (x62 x651) (x819 x651)))
(define-fun x652 ((x651 Int) (x323 Int)) Bool (= (x313 x651 x323) (x313 x323 x651)))
(define-fun x224 ((x651 Int) (x323 Int)) Bool (and (=> (>= x323 0) (<= (x313 x651 x323) x323)) (<= 0 (x313 x651 x323)) (=> (>= x651 0) (>= x651 (x313 x651 x323)))))
(define-fun x997 ((x651 Int) (x323 Int)) Bool (and (x224 x651 x323) (x652 x651 x323)))
(define-fun x43 ((x651 Int)) Bool (= (x313 x651 1461501637330902918203684832716283019655932542975) (mod x651 1461501637330902918203684832716283019655932542976)))
(define-fun x866 ((x651 Int)) Bool (and (x997 x651 1461501637330902918203684832716283019655932542975) (x43 x651)))
(define-fun x1030 ((x485 Int)) Int (ite (= x485 128) x192 (x989 x485)))
(define-fun x203 ((x485 Int)) Int (ite (= x485 128) x192 (x778 x485)))
(define-fun x483 ((x485 Int)) Int (ite (= x485 128) x192 (x571 x485)))
(define-fun x528 ((x485 Int)) Int (ite (= x485 128) x192 (x1007 x485)))
(define-fun x801 ((x485 Int)) Int (ite (= x485 128) x192 (x230 x485)))
(define-fun x903 ((x485 Int)) Int (ite (= x485 128) x192 (x934 x485)))
(define-fun x274 ((x485 Int)) Int (ite (= x485 128) x192 (x556 x485)))
(define-fun x889 ((x485 Int)) Int (ite (= 128 x485) x192 (x573 x485)))
(define-fun x328 ((x485 x185)) Int (ite (= x860 x485) x660 (x29 x485)))
(define-fun x658 ((x485 x185)) Int (ite x773 (x29 x485) (x328 x485)))
(define-fun x383 ((x485 Int)) Int (ite (= x485 128) x192 (x255 x485)))
(define-fun x108 ((x485 Int)) Int (ite (= x485 128) x192 (x467 x485)))
(define-fun x47 ((x485 Int)) Int (ite (= x485 128) x192 (x982 x485)))
(define-fun x731 ((x485 Int)) Int (ite (= 128 x485) x192 (x763 x485)))
(define-fun x104 ((x485 Int)) Int (ite (= x485 128) x192 (x252 x485)))
(define-fun x562 ((x485 Int)) Int (ite (= 128 x485) x192 (x372 x485)))
(define-fun x420 ((x485 Int)) Int (ite (= 128 x485) x192 (x329 x485)))
(define-fun x597 ((x485 Int)) Int (ite (= x485 128) x192 (x853 x485)))
(define-fun x325 ((x651 Int)) Bool (=> (and (> x651 10000) (not (= 1729973928 x651)) (not (= x651 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 701022898 x651)) (not (= 1572751336 x651)) (not (= x651 1461501637330902918203684832716283019655932542975)) (not (= x651 2485876314)) (not (= 954915356 x651)) (not (= 1250999895 x651)) (not (= x651 2429653569)) (not (= x651 3686129278))) (not ((_ is x26) (x672 x651)))))
(assert (x733 x551))
(assert (x733 x84))
(assert (= x445 (=> (and (= (x790 (x26 0) 0) x588) (<= 0 x419) (<= x419 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1043 (= (x942 x81) x419) (= (< x419 1461501637330902918203684832716283019655932542975) x1043) (= x214 (not (> x276 224))) (= (div (mod (- (x437 x81) (x437 x588)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1016)) (and x214 x980))))
(assert (x733 x902))
(assert (x733 x699))
(assert (x733 x154))
(assert (x733 x302))
(assert (= (and (not x164) x784) x374))
(assert (x733 x240))
(assert (= (or (and x835 x880) x95) x409))
(assert (= x589 (=> (and (= x106 x385) (and (or (and (= 0 x796) (not x261)) (and x261 (and (= 0 x458) (= (x40 (- x1001 1)) x355) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1001) (not (< x1001 1)) (= x762 x796) (>= x1001 0) (= 0 x416) (= x762 (x442 (+ 1 x355))) (= x454 (x172 (x672 x846) (x26 1) 0)) (= x1001 (x29 x454))))) (and (< 0 x24) (<= x724 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1005 x846) (>= x724 0) (= x219 x385) (= x812 (x172 (x672 x846) (x26 1) 0)) (<= x846 1461501637330902918203684832716283019655932542975) (= x724 (x29 x812)) (= (not (= 0 x724)) x261) (= (x478 (x672 x622)) x24) (= x84 0) (= 1729973928 x797) (not (< x797 1729973928)) (= x101 0)))) x107)))
(assert (x733 x397))
(assert (x733 x985))
(assert (x733 x826))
(assert (= 2429653569 (x437 (x26 2429653569))))
(assert (x733 x315))
(assert (x733 x69))
(assert (x733 x808))
(assert (x325 x443))
(assert (x733 x983))
(assert (= x426 (or (and x1052 x122) x142)))
(assert (x733 x846))
(assert (= x987 x226))
(assert (x733 x170))
(assert (= x209 x728))
(assert (= (and x189 x845) x39))
(assert (x733 x841))
(assert (x733 x674))
(assert (= (and x930 x193) x530))
(assert (=> (<= x91 10000) (= (x26 x91) (x672 x91))))
(assert (= x338 (=> (and (or (and (not x563) (= x316 0)) (and (and (= x221 x316) (<= x221 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x370) (= x431 0) (= x495 (< x221 1461501637330902918203684832716283019655932542975)) x495 (= x764 (x371 x428 x9)) (< x9 x192) (= (x790 (x26 0) 0) x428) (= (x942 x764) x221) (>= x221 0)) x563)) (and (= (x889 128) x349) (= 128 x379) (= 128 x859) (= x563 (> x349 x9)))) x66)))
(assert (x733 x88))
(assert (= x821 x992))
(assert (x733 x453))
(assert (x733 x894))
(assert (= x45 (and x190 x742)))
(assert (x733 x680))
(assert (= (=> (and (= (< x939 1461501637330902918203684832716283019655932542975) x253) (>= x939 0) (= x565 (x790 (x26 0) 0)) (= x964 (div (mod (- (x437 x147) (x437 x565)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x253 (= x939 (x942 x147)) (= (not (< 224 x58)) x878) (<= x939 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and x878 x410)) x239))
(assert (x733 x949))
(assert (x733 x438))
(assert (= x450 (or (and x643 x15) x67)))
(assert (x325 x346))
(assert (= (=> (and (and (or (and (= 0 x920) (not x382)) (and (and (= (x172 (x672 x443) (x26 1) 0) x558) (= (x40 (- x327 1)) x53) (not (< x327 1)) (= 0 x545) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x327) (= x443 (x313 1461501637330902918203684832716283019655932542975 x996)) (= x938 x920) (= (x29 x558) x327) (= x756 0) (= x938 (x442 (+ 1 x53))) (<= 0 x327)) x382)) (and (= (x172 (x672 x996) (x26 1) 0) x267) (>= 1461501637330902918203684832716283019655932542975 x996) (< 0 x675) (= x513 (>= x605 x120)) (= x243 0) (= (x478 (x672 x622)) x675) x513 (>= x492 0) (= x605 x75) (not (> 1729973928 x944)) (= x996 x1005) (= (x29 x267) x492) (= x382 (not (= x492 0))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x492) (= x245 0) (= x944 1729973928))) (and (= x965 (x1030 128)) (= 128 x678) (= x433 128) (= x965 x75))) x187) x209))
(assert (x733 x1002))
(assert (x733 x200))
(assert (= (and x941 x520) x331))
(assert (x733 x401))
(assert (= x514 (x672 (x437 x514))))
(assert (x733 x259))
(assert (= (x672 701022898) (x26 701022898)))
(assert (x733 x456))
(assert (x733 x435))
(assert (x733 x186))
(assert (x733 x181))
(assert (x733 x300))
(assert (x733 x807))
(assert (x733 x686))
(assert (x733 x572))
(assert (= x990 (or x365 x510)))
(assert (x733 x1051))
(assert (= (and x616 (not x745)) x86))
(assert (x733 x831))
(assert (x733 x216))
(assert (= x844 (x672 (x437 x844))))
(assert (= (+ (x437 x31) 1) (x437 (x371 x31 1))))
(assert (x733 x694))
(assert (x733 x937))
(assert (x733 x245))
(assert (x733 x940))
(assert (x733 x633))
(assert (x733 x212))
(assert (x733 x531))
(assert (= x954 (x672 (x437 x954))))
(assert (= (and x37 x493) x648))
(assert (x733 x421))
(assert (= x521 (and (not x15) x643)))
(assert (x733 x708))
(assert (x733 x91))
(assert (x733 x150))
(assert (x733 x953))
(assert (= x634 (x437 (x672 x634))))
(assert (x733 x219))
(assert (x733 x1033))
(assert (= x811 (or x538 (and x330 x782))))
(assert (x733 x30))
(assert (x733 x1037))
(assert (x733 x921))
(assert (x733 x970))
(assert (x733 x721))
(assert (=> (>= 10000 x166) (= (x26 x166) (x672 x166))))
(assert (x733 x488))
(assert (= (x672 (x437 x244)) x244))
(assert (= x799 (x672 (x437 x799))))
(assert (x733 x284))
(assert (x733 x873))
(assert (= (=> (and (and (= x207 (x420 128)) (= x645 128) (= x862 128) (= x207 x179)) (and (and (= x295 (x172 (x672 x202) (x26 1) 0)) (= x626 1729973928) (<= x432 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x202 x1005) (<= x202 1461501637330902918203684832716283019655932542975) (= (not (= x432 0)) x734) (not (< x626 1729973928)) (= x114 x179) (= x632 0) (= 0 x902) (= x714 (> x114 x94)) (> x360 0) (= x360 (x478 (x672 x622))) (= (x29 x295) x432) (<= 0 x432)) (or (and (and (>= x211 0) (= x286 0) (<= x211 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x211 1)) (= x834 (x442 (+ x983 1))) (= x479 x834) (= x211 (x29 x308)) (= 0 x607) (= (x40 (- x211 1)) x983) (= x308 (x172 (x672 x202) (x26 1) 0))) x734) (and (= 0 x479) (not x734))))) x140) x947))
(assert (= (x437 (x672 x598)) x598))
(assert (= (=> (and (and (or (and (= x967 0) (not x496)) (and x496 (and (<= 0 x532) (= 0 x813) (= (x40 (- x532 1)) x3) (= x232 x967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x532) (= x1028 (x172 (x672 x346) (x26 1) 0)) (= x232 (x442 (+ 1 x3))) (= (x29 x1028) x532) (not (> 1 x532)) (= x539 0)))) (and (= (> x447 x470) x653) (= x1000 (x29 x766)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1000) (= x499 (x478 (x672 x622))) (= x970 0) (> x499 0) (= x766 (x172 (x672 x346) (x26 1) 0)) (<= x346 1461501637330902918203684832716283019655932542975) (= x346 x401) (= x447 x353) (<= 0 x1000) (= x496 (not (= 0 x1000))) (= 0 x400) (not (> 1729973928 x269)) (= 1729973928 x269))) (and (= x718 128) (= (x104 128) x69) (= 128 x577) (= x353 x69))) x306) x80))
(assert (x733 x847))
(assert (x733 x634))
(assert (x733 x615))
(assert (= (x437 (x672 x346)) x346))
(assert (x733 x1048))
(assert (= x287 (=> (and (or (and (and (= x807 (x313 1461501637330902918203684832716283019655932542975 x422)) (= x540 x758) (not (< x500 1)) (= x617 (x172 (x672 x807) (x26 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x500) (= (x442 (+ x1025 1)) x758) (= 0 x125) (= 0 x165) (= (x40 (- x500 1)) x1025) (<= 0 x500) (= x500 (x29 x617))) x941) (and (not x941) (= x540 0))) (and (= (> (x478 (x672 x622)) 0) x74) (>= 1461501637330902918203684832716283019655932542975 x957) (= x630 false) (<= 0 x401) (< 0 x25) (= x200 (x951 (x672 x622))) (<= x622 1461501637330902918203684832716283019655932542975) (not (> 1729973928 x116)) (= x480 x957) (<= 0 x533) (= 0 x63) (= x620 0) (<= 0 x739) (>= 1461501637330902918203684832716283019655932542975 x422) (= 954915356 x469) (<= x401 1461501637330902918203684832716283019655932542975) (= x116 1729973928) (>= x200 0) (= x533 (x29 x6)) (= x25 (x478 (x672 x622))) (>= 1461501637330902918203684832716283019655932542975 x1005) (= x687 false) (= x263 1) (<= x533 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x585 x739) (= x772 false) (= x941 (not (= 0 x533))) x74 (<= x739 1461501637330902918203684832716283019655932542975) (<= 0 x1005) (> x622 0) (<= 0 x957) (= (x172 (x672 x422) (x26 1) 0) x6) (= false x425) (= x401 x422))) x487)))
(assert (x733 x891))
(assert (= x18 (and x864 x825)))
(assert (= x784 (or x384 (and x449 x522))))
(assert (= (or x304 x51) x394))
(assert (= x933 x1020))
(assert (x733 x355))
(assert (x733 x98))
(assert (x733 x418))
(assert (x733 x403))
(assert (= (x672 (x437 x1031)) x1031))
(assert (= x794 (and x991 x486)))
(assert (x733 x479))
(assert (= (=> (and (= x1011 (> 1461501637330902918203684832716283019655932542975 x50)) x1011 (= x1031 (x790 (x26 0) 0)) (= x50 (x942 x180)) (<= 0 x50) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x50) (= (div (mod (- (x437 x180) (x437 x1031)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x625) (= x971 (not (< 224 x236)))) (and x701 x971)) x278))
(assert (x325 x202))
(assert (= x1021 (or x929 x525)))
(assert (x733 x602))
(assert (x733 x402))
(assert (x733 x103))
(assert (x733 x422))
(assert (x325 x892))
(assert (x733 x952))
(assert (= x1044 (and x515 x904)))
(assert (x733 x201))
(assert (x733 x494))
(assert (= x220 x248))
(assert (= x71 (or x1006 (and x811 x559))))
(assert (x733 x2))
(assert (x733 x724))
(assert (x325 x807))
(assert (= x775 (=> (and (= x186 x461) (and (and (= (x478 (x672 x622)) x1038) (> x1038 0) (= x347 (x172 (x672 x896) (x26 1) 0)) (<= x896 1461501637330902918203684832716283019655932542975) (= x806 x461) (= x476 0) (= (not (= x315 0)) x890) (= x1005 x896) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x315) (not (> 1729973928 x155)) (= x315 (x29 x347)) (= x411 0) (>= x315 0) (= 1729973928 x155)) (or (and x890 (and (= (x40 (- x637 1)) x977) (<= 0 x637) (not (< x637 1)) (= x883 0) (= x126 (x172 (x672 x896) (x26 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x637) (= (x442 (+ 1 x977)) x686) (= 0 x216) (= x637 (x29 x126)) (= x686 x644))) (and (= 0 x644) (not x890))))) x115)))
(assert (= x1013 (x672 (x437 x1013))))
(assert (x733 x614))
(assert (x733 x292))
(assert (= x850 (and x918 x440)))
(assert (x733 x744))
(assert (= 1250999895 (x437 (x26 1250999895))))
(assert (x733 x839))
(assert (x733 x620))
(assert (x733 x464))
(assert (x733 x908))
(assert (x733 x787))
(assert (x733 x393))
(assert (= x698 x701))
(assert (x733 x19))
(assert (x733 x182))
(assert (x733 x373))
(assert (x733 x776))
(assert (x733 x865))
(assert (= (x437 (x672 x996)) x996))
(assert (= x715 (x437 (x672 x715))))
(assert (x733 x621))
(assert (x733 x913))
(assert (x733 x770))
(assert (x733 x611))
(assert (x733 x751))
(assert (= (=> (and (and (= x22 x581) (= x92 128) (= x322 128) (= x22 (x203 128))) (and (= x1019 1250999895) (> 1729973928 x1019) (not (= x1019 701022898)) (= (<= x41 x740) x596) (> x312 0) (= x581 x740) x596 (not (= x1019 954915356)) (= (x478 (x672 x622)) x312) (= 0 x462) (= 0 x497) (= x559 (= x192 0)))) (and (=> x559 x177) (=> (and (and (= (x371 x661 1) x958) (= x818 (x790 (x26 0) 0)) (= (> x865 192) x189) (= (div (mod (- (x437 x661) (x437 x818)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x405) (= x168 (< x849 1461501637330902918203684832716283019655932542975)) (= (x790 (x26 0) 0) x661) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x849) (= (x942 x661) x849) (= (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x246) x168 (= x865 (x442 (+ x246 160))) (>= x849 0)) (not x559)) (and (=> x189 x223) (=> (not x189) x735))))) x340))
(assert (= (x437 (x371 x998 1)) (+ (x437 x998) 1)))
(assert (x733 x553))
(assert (= (+ x9 (x437 x428)) (x437 (x371 x428 x9))))
(assert (= x1026 (or x139 x768)))
(assert (x733 x82))
(assert (x733 x584))
(assert (x733 x184))
(assert (x733 x813))
(assert (= (and (not x382) x409) x984))
(assert (= x845 (and x811 (not x559))))
(assert (x733 x632))
(assert (x733 x712))
(assert (= (x437 (x672 x198)) x198))
(assert (x733 x1))
(assert (x733 x524))
(assert (x733 x268))
(assert (x733 x518))
(assert (x733 x896))
(assert (x733 x710))
(assert (= (x672 (x437 x320)) x320))
(assert (x733 x762))
(assert (x733 x973))
(assert (x733 x60))
(assert (= x441 (and x430 x450)))
(assert (= (=> (and (= (div (mod (- (x437 x169) (x437 x729)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x361) (= (x790 (x26 0) 0) x729) (= (x942 x169) x310) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x310) (>= x310 0) (= (< x310 1461501637330902918203684832716283019655932542975) x1014) x1014 (= (not (< 224 x614)) x697)) (and x697 x548)) x113))
(assert (x733 x741))
(assert (x733 x161))
(assert (x733 x198))
(assert (= x692 (=> (and (= x65 x986) (and (not (= x761 701022898)) (= x1046 (x478 (x672 x622))) (< x761 1729973928) (= 1 x777) (= (= x192 0) x78) (= x776 0) (not (= 954915356 x761)) (= x881 (not (= x333 x417))) (= x48 0) (< 0 x1046) (= x118 (and x881 x829)) (= x65 x38) (= (- x38 1) x720) (= 1250999895 x761) (= (mod x720 115792089237316195423570985008687907853269984665640564039457584007913129639936) x333))) (and (=> (and (not x78) (and x975 (= x147 (x371 x542 1)) (= x58 (x442 (+ 160 x737))) (= x399 (< 192 x58)) (= (x790 (x26 0) 0) x542) (= (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x737) (= (< x693 1461501637330902918203684832716283019655932542975) x975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x693) (= x320 (x790 (x26 0) 0)) (= x693 (x942 x542)) (= (div (mod (- (x437 x542) (x437 x320)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x88) (>= x693 0))) (and (=> x399 x239) (=> (not x399) x410))) (=> x78 x800)))))
(assert (x733 x61))
(assert (x733 x541))
(assert (not x287))
(assert (= x1020 (=> (and (and (= x894 (x801 128)) (= x856 128) (= 128 x994) (= (< x822 x894) x430)) (or (and x430 (and (= (< x963 1461501637330902918203684832716283019655932542975) x73) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x963) (= x780 0) (= (x371 x1045 x822) x704) (= (x942 x704) x963) (< x822 x192) x73 (= x963 x366) (= (x790 (x26 0) 0) x1045) (<= 0 x963) (= x536 0))) (and (not x430) (= x366 0)))) x743)))
(assert (x733 x635))
(assert (x733 x654))
(assert (= x807 (x437 (x672 x807))))
(assert (x733 x106))
(assert (x733 x346))
(assert (= x338 x507))
(assert (= (=> (and (and (= (x731 128) x474) (= x995 x474) (= 128 x629) (= 128 x579)) (and (< x757 1729973928) (= x924 (x478 (x672 x622))) (= x132 (- x181 1)) (= x456 0) (= 0 x710) (not (= x757 701022898)) (not (= x757 954915356)) (= x765 (= 0 x192)) (= 1 x196) (= (mod x132 115792089237316195423570985008687907853269984665640564039457584007913129639936) x470) (= x757 1250999895) (< 0 x924) (= x181 x995))) (and (=> (and (not x765) (and (= x162 (x942 x133)) (= x844 (x790 (x26 0) 0)) (= x314 (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (< 192 x614) x904) (= x959 (< x162 1461501637330902918203684832716283019655932542975)) (<= 0 x162) x959 (= (x442 (+ x314 160)) x614) (= (x371 x133 1) x169) (= x19 (div (mod (- (x437 x133) (x437 x844)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x162) (= (x790 (x26 0) 0) x133))) (and (=> (not x904) x548) (=> x904 x113))) (=> x765 x80))) x177))
(assert (= x732 (or (and (not x805) x795) x1023)))
(assert (= x877 (=> (and (<= 0 x141) (= x222 (div (mod (- (x437 x195) (x437 x356)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x141) (= x356 (x790 (x26 0) 0)) x568 (= x690 (not (< 224 x551))) (= x141 (x942 x195)) (= x568 (> 1461501637330902918203684832716283019655932542975 x141))) (and x690 x933))))
(assert (= (x437 (x371 x55 x247)) (+ x247 (x437 x55))))
(assert (=> (>= 10000 x70) (= (x672 x70) (x26 x70))))
(assert (x733 x92))
(assert (x733 x723))
(assert (x733 x8))
(assert (x733 x44))
(assert (x325 x198))
(assert (= (x437 (x371 x395 1)) (+ 1 (x437 x395))))
(assert (x733 x452))
(assert (x733 x415))
(assert (= (x672 (x437 x229)) x229))
(assert (x733 x470))
(assert (x733 x727))
(assert (=> (>= 10000 x896) (= (x26 x896) (x672 x896))))
(assert (x733 x297))
(assert (x733 x862))
(assert (= (=> (and (= x920 x747) (and (= (x478 (x672 x622)) x161) (not (= 701022898 x1010)) (= x985 0) (> 1729973928 x1010) (= 1250999895 x1010) (< 0 x161) (= x703 0) (= x747 x41) (not (= x1010 954915356)) (= x330 (= 0 x192)))) (and (=> x330 x340) (=> (and (and (>= x157 0) (= (x790 (x26 0) 0) x619) (= x915 (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x407 192) x646) x681 (<= x157 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x407 (x442 (+ 160 x915))) (= x681 (> 1461501637330902918203684832716283019655932542975 x157)) (= (x790 (x26 0) 0) x505) (= (x371 x619 1) x475) (= x188 (div (mod (- (x437 x619) (x437 x505)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x157 (x942 x619))) (not x330)) (and (=> x646 x560) (=> (not x646) x123))))) x187))
(assert (x733 x879))
(assert (x733 x314))
(assert (= (x672 (x437 x356)) x356))
(assert (x733 x433))
(assert (= (and x871 (not x42)) x767))
(assert (x733 x349))
(assert (= (x437 (x371 x231 1)) (+ 1 (x437 x231))))
(assert (x733 x273))
(assert (x733 x1050))
(assert (x733 x882))
(assert (x733 x178))
(assert (x733 x269))
(assert (x733 x54))
(assert (x733 x64))
(assert (x733 x610))
(assert (x733 x540))
(assert (= x319 (and x864 (not x825))))
(assert (x325 x166))
(assert (= x639 (and x563 x131)))
(assert (=> (<= x443 10000) (= (x672 x443) (x26 x443))))
(assert (= x422 (x437 (x672 x422))))
(assert (= x235 (x672 (x437 x235))))
(assert (x325 x634))
(assert (x733 x606))
(assert (x733 x361))
(assert (x733 x175))
(assert (x733 x317))
(assert (x733 x883))
(assert (x325 x91))
(assert (x733 x303))
(assert (x733 x316))
(assert (x733 x125))
(assert (x733 x512))
(assert (x733 x254))
(assert (x733 x666))
(assert (x733 x336))
(assert (= x1041 (=> (and x623 (= x677 (x942 x158)) (<= x677 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x16 (not (< 224 x968))) (= x238 (div (mod (- (x437 x158) (x437 x815)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (>= x677 0) (= (x790 (x26 0) 0) x815) (= x623 (> 1461501637330902918203684832716283019655932542975 x677))) (and x285 x16))))
(assert (= (x672 (x437 x475)) x475))
(assert (x733 x348))
(assert (x733 x301))
(assert (x733 x57))
(assert (= x223 (=> (and (= (x942 x958) x945) (= (not (< 224 x865)) x446) x709 (<= x945 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x945 1461501637330902918203684832716283019655932542975) x709) (= x932 (x790 (x26 0) 0)) (= x754 (div (mod (- (x437 x958) (x437 x932)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (>= x945 0)) (and x735 x446))))
(assert (x733 x145))
(assert (= (x672 (x437 x725)) x725))
(assert (x733 x477))
(assert (x733 x592))
(assert (x733 x377))
(assert (x733 x901))
(assert (x733 x915))
(assert (= (x672 (x437 x542)) x542))
(assert (= (=> (and (<= 0 x260) x649 (= x237 (x790 (x26 0) 0)) (= (> 1461501637330902918203684832716283019655932542975 x260) x649) (= x260 (x942 x851)) (<= x260 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (div (mod (- (x437 x851) (x437 x237)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x72) (= (not (< 224 x707)) x27)) (and x992 x27)) x600))
(assert (= x123 x340))
(assert (x733 x823))
(assert (x733 x459))
(assert (x733 x814))
(assert (x733 x137))
(assert (x733 x647))
(assert (x733 x79))
(assert (x733 x38))
(assert (x733 x1001))
(assert (x733 x321))
(assert (= (+ (x437 x52) 1) (x437 (x371 x52 1))))
(assert (x733 x207))
(assert (= x768 (and x734 x406)))
(assert (x733 x557))
(assert (=> (<= x598 10000) (= (x26 x598) (x672 x598))))
(assert (= x510 (and x842 x33)))
(assert (x733 x806))
(assert (x733 x1038))
(assert (x733 x411))
(assert (= (and x450 (not x430)) x451))
(assert (x733 x499))
(assert (x733 x532))
(assert (x733 x834))
(assert (x733 x925))
(assert (x733 x162))
(assert (x733 x127))
(assert (x733 x536))
(assert (= (x672 (x437 x998)) x998))
(assert (x733 x312))
(assert (x733 x798))
(assert (x733 x166))
(assert (x733 x110))
(assert (= x555 (or x648 x350)))
(assert (x733 x447))
(assert (x733 x545))
(assert (x733 x755))
(assert (= (x672 1250999895) (x26 1250999895)))
(assert (x733 x326))
(assert (x733 x385))
(assert (x733 x526))
(assert (x733 x993))
(assert (x325 x854))
(assert (= (+ (x437 x244) 1) (x437 (x371 x244 1))))
(assert (x733 x1047))
(assert (= x115 (=> (and (and (= (mod x803 115792089237316195423570985008687907853269984665640564039457584007913129639936) x9) (> x7 0) (not (= 2485876314 x217)) (= 3686129278 x217) (= 0 x509) (= x804 x621) (= (x478 (x672 x622)) x7) (not (> 1729973928 x217)) (not (= 1729973928 x217)) (= x557 1) (= x215 (= x192 0)) (= x803 (- x621 1)) (not (= 2429653569 x217)) (= x398 0)) (= x804 x644)) (and (=> x215 x338) (=> (and (and x838 (= (> 1461501637330902918203684832716283019655932542975 x1051) x838) (= x805 (< 192 x611)) (= (x790 (x26 0) 0) x998) (= (x790 (x26 0) 0) x725) (>= x1051 0) (= x828 (div (mod (- (x437 x998) (x437 x725)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (<= x1051 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1037 (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x371 x998 1) x867) (= x1051 (x942 x998)) (= (x442 (+ x1037 160)) x611)) (not x215)) (and (=> (not x805) x507) (=> x805 x20)))))))
(assert (= x231 (x672 (x437 x231))))
(assert (x733 x578))
(assert (x325 x615))
(assert (= x180 (x672 (x437 x180))))
(assert (= (=> (and (and (not (= 2485876314 x364)) (not (= x364 1729973928)) (= x415 0) (= 0 x972) (= x488 (x478 (x672 x622))) (= x15 (= x192 0)) (= (- x14 1) x781) (= x14 x788) (= x999 1) (not (= x364 2429653569)) (not (< x364 1729973928)) (= x822 (mod x781 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> x488 0) (= x364 3686129278)) (= x572 x788)) (and (=> (and (not x15) (and (<= x786 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x786 1461501637330902918203684832716283019655932542975) x1012) (= (x371 x234 1) x195) (= x551 (x442 (+ 160 x204))) (= (div (mod (- (x437 x234) (x437 x299)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x324) (= (x790 (x26 0) 0) x234) (>= x786 0) (= (x942 x234) x786) (= x204 (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x836 (< 192 x551)) (= (x790 (x26 0) 0) x299) x1012)) (and (=> (not x836) x933) (=> x836 x877))) (=> x15 x1020))) x887))
(assert (x733 x730))
(assert (x733 x260))
(assert (= (x672 (x437 x77)) x77))
(assert (x733 x243))
(assert (x733 x748))
(assert (x733 x928))
(assert (= (=> (and (and (and (and (or (and x745 (and (= x1022 (x172 (x672 x715) (x26 1) 0)) (= x302 (x442 (+ 1 x357))) (= 0 x134) (>= x191 0) (not (< x191 1)) (= (x658 x1022) x191) (<= x191 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x302 x587) (= (x40 (- x191 1)) x357) (= x857 0))) (and (= 0 x587) (not x745))) (and (= x401 x715) (= (not (= x351 0)) x906) (> x170 0) (= x624 1729973928) (= (and x590 x1003) x367) (= x745 (not (= x659 0))) (= x176 0) (= x1003 x906) (>= x659 0) (<= x659 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x624 1729973928)) (= x694 0) (= (x478 (x672 x622)) x170) (<= x715 1461501637330902918203684832716283019655932542975) (= (x658 x912) x659) (= (x172 (x672 x715) (x26 1) 0) x912))) (and (= x802 x463) (not (= x1047 1250999895)) (= x516 (x172 (x672 x854) (x26 1) 0)) (= x298 0) (= (not (= x149 0)) x802) (not (= 954915356 x1047)) (> 1729973928 x1047) (= x436 (not x511)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x839) (= x351 (ite x575 1 0)) (= x511 (not (= x839 0))) (= (not x436) x575) (< 0 x61) (not (= x1047 701022898)) (= 0 x633) (= 1572751336 x1047) (= x1005 x854) (= x839 (x658 x516)) (<= x854 1461501637330902918203684832716283019655932542975) (>= x839 0) (= (x478 (x672 x622)) x61) (= (and x855 x463) x590))) (and (= x401 x294) (= (ite x218 1 0) x149) (= 1572751336 x1004) (= x408 (x172 (x672 x91) (x26 1) 0)) (= (x658 x408) x296) (not (= x1004 701022898)) (= (not (= 0 x296)) x783) (= x471 (not x783)) (= 0 x582) (<= x91 1461501637330902918203684832716283019655932542975) (not (= 954915356 x1004)) (= x855 (not (= x895 x294))) (> x512 0) (>= x296 0) (= x401 x91) (= (not x471) x218) (= (x478 (x672 x622)) x512) (= 0 x240) (> 1729973928 x1004) (= x895 x1005) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x296) (not (= 1250999895 x1004)))) (and (= x460 (= x826 0)) (= x843 (not x460)) (= (ite x843 1 0) x98))) x368) x76))
(assert (x733 x398))
(assert (x733 x780))
(assert (= (x672 (x437 x818)) x818))
(assert (x733 x529))
(assert (x733 x1046))
(assert (= (and (not x595) x1026) x193))
(assert (x733 x424))
(assert (x733 x249))
(assert (x733 x5))
(assert (x733 x498))
(assert (=> (<= x202 10000) (= (x26 x202) (x672 x202))))
(assert (= (and x102 x679) x861))
(assert (x733 x931))
(assert (x733 x468))
(assert (x733 x923))
(assert (= x773 (and x121 x394)))
(assert (x733 x935))
(assert (x733 x1004))
(assert (= x910 (and (not x604) x981)))
(assert (= x334 (or x197 (and x71 x765))))
(assert (x733 x691))
(assert (x733 x375))
(assert (x733 x157))
(assert (x733 x1029))
(assert (= x636 (=> (and (or (and x164 (and (= x830 (< x498 1461501637330902918203684832716283019655932542975)) (= 0 x503) (= x824 0) (= x749 (x371 x508 x919)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x498) x830 (= (x790 (x26 0) 0) x508) (= x461 x498) (= (x942 x749) x498) (<= 0 x498) (> x192 x919))) (and (= 0 x461) (not x164))) (and (= (x47 128) x798) (= x593 128) (= 128 x884) (= x164 (< x919 x798)))) x775)))
(assert (= (and (not x563) x131) x49))
(assert (x733 x869))
(assert (= (x672 3686129278) (x26 3686129278)))
(assert (= x550 (and x832 (not x962))))
(assert (= x102 (or x550 x279)))
(assert (x733 x703))
(assert (= (and x261 x85) x304))
(assert (= (x672 (x437 x665)) x665))
(assert (x733 x101))
(assert (x325 x996))
(assert (= (=> (and (and (= 1250999895 x852) (< 0 x584) (= x584 (x478 (x672 x622))) (= (= x192 0) x604) (< x852 1729973928) (not (= x852 701022898)) (= x978 (< x723 x264)) (= x254 0) (= x791 x264) (= x829 (and x978 x653)) (not (= x852 954915356)) (= 0 x82)) (and (= 128 x610) (= x791 x390) (= 128 x529) (= (x483 128) x390))) (and (=> x604 x821) (=> (and (not x604) (and (= (div (mod (- (x437 x52) (x437 x954)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x946) (= (x371 x52 1) x851) (= x129 (x942 x52)) (= (< 192 x707) x21) (= x56 (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x52 (x790 (x26 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x129) x662 (= (x790 (x26 0) 0) x954) (= (x442 (+ x56 160)) x707) (<= 0 x129) (= x662 (< x129 1461501637330902918203684832716283019655932542975)))) (and (=> x21 x600) (=> (not x21) x992))))) x163))
(assert (= (x437 (x672 x854)) x854))
(assert (= true x520))
(assert (x733 x567))
(assert (x733 x504))
(assert (x733 x966))
(assert (x733 x924))
(assert (x733 x188))
(assert (x733 x705))
(assert (x733 x156))
(assert (x733 x53))
(assert (= x202 (x437 (x672 x202))))
(assert (x733 x134))
(assert (x733 x601))
(assert (= (x437 (x26 701022898)) 701022898))
(assert (= (or x441 x451) x1052))
(assert (= 1461501637330902918203684832716283019655932542975 (x437 (x26 1461501637330902918203684832716283019655932542975))))
(assert (x733 x581))
(assert (= x622 (x437 (x672 x622))))
(assert (= (x672 (x437 x886)) x886))
(assert (= (x672 (x437 x117)) x117))
(assert (= (and (not x586) x341) x574))
(assert (x733 x490))
(assert (= (or x817 (and x910 (not x21))) x917))
(assert (x561 x422))
(assert (x733 x583))
(assert (x733 x90))
(assert (= (x437 (x26 954915356)) 954915356))
(assert (= (and x868 x943) x282))
(assert (= (+ (x437 x508) x919) (x437 (x371 x508 x919))))
(assert (x733 x492))
(assert (x733 x296))
(assert (x733 x670))
(assert (x733 x791))
(assert (= x190 (and (not x59) x863)))
(assert (x733 x659))
(assert (x733 x689))
(assert (x733 x327))
(assert (x733 x72))
(assert (x733 x875))
(assert (= x306 (=> (and (and (not (= 701022898 x635)) (= 0 x993) (= (= 0 x192) x1039) (= x663 (- x156 1)) (< x635 1729973928) (= x156 x642) (= (mod x663 115792089237316195423570985008687907853269984665640564039457584007913129639936) x723) (= x618 1) (= x336 (x478 (x672 x622))) (not (= 954915356 x635)) (= x635 1250999895) (> x336 0) (= 0 x680)) (= x967 x642)) (and (=> x1039 x163) (=> (and (and (= x391 (x442 (+ 160 x913))) (= (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x913) (= (x371 x1042 1) x608) (<= x175 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x790 (x26 0) 0) x77) (= (x942 x1042) x175) (= (< x175 1461501637330902918203684832716283019655932542975) x717) (= (> x391 192) x594) x717 (= (div (mod (- (x437 x1042) (x437 x77)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x914) (= (x790 (x26 0) 0) x1042) (<= 0 x175)) (not x1039)) (and (=> (not x594) x376) (=> x594 x352)))))))
(assert (= (x437 (x26 2485876314)) 2485876314))
(assert (= x729 (x672 (x437 x729))))
(assert (= (or x319 x18) x341))
(assert (= (x672 (x437 x234)) x234))
(assert (x733 x974))
(assert (= (or (and (not x836) x521) x688) x67))
(assert (x733 x100))
(assert (x733 x7))
(assert (= x661 (x672 (x437 x661))))
(assert (= x169 (x672 (x437 x169))))
(assert (x733 x593))
(assert (= (x672 1572751336) (x26 1572751336)))
(assert (x733 x396))
(assert (= x66 (=> (and (= x316 x656) (and (and (not (= 1250999895 x318)) (<= x1018 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x28 (not (= x806 x459))) (>= x1018 0) (= x544 (not (= 0 x1018))) (= 0 x477) (= x318 1572751336) (> 1729973928 x318) (= x708 (x478 (x672 x622))) (not (= x318 701022898)) (not (= 954915356 x318)) (< 0 x708) (= x166 x401) (= 0 x969) (= (not x916) x552) (= x916 (not x544)) (>= 1461501637330902918203684832716283019655932542975 x166) x785 (= x242 (not (= x12 x250))) (= x1005 x250) (= x12 x401) (= x459 x316) (= (or x28 (not x489)) x785) (= (x172 (x672 x166) (x26 1) 0) x641) (= (ite x552 1 0) x358) (= x1018 (x29 x641))) (and (and (= x128 (not x612)) (> 1729973928 x711) (= (not (= 0 x358)) x444) (= x307 (not (= x746 0))) (<= x598 1461501637330902918203684832716283019655932542975) (= 0 x770) (= (x172 (x672 x598) (x26 1) 0) x979) (= (ite x128 1 0) x673) (not (= 954915356 x711)) (= x32 (and x242 x570)) (= x711 1572751336) (= x612 (not x307)) (= x1005 x598) (= 0 x676) (= (x478 (x672 x622)) x793) (> x793 0) (<= 0 x746) (not (= 1250999895 x711)) (= (x29 x979) x746) (not (= x711 701022898)) (= x570 x444) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x746)) (and (or (and x42 (and (= x885 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) (>= x402 0) (= x928 x106) (not (< x402 1)) (= x160 0) (= x602 (x40 (- x402 1))) (= (x29 x344) x402) (= (x172 (x672 x634) (x26 1) 0) x344) (= x928 (x442 (+ x602 1))))) (and (not x42) (= x106 0))) (and (= 0 x337) (= x667 (x172 (x672 x634) (x26 1) 0)) (<= 0 x847) (= (and x774 x32) x87) (not (< x940 1729973928)) (= (x478 (x672 x622)) x769) (= (not (= 0 x673)) x722) (<= x634 1461501637330902918203684832716283019655932542975) (<= x847 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x634 x401) (= (not (= x847 0)) x42) (= x722 x774) (= x403 0) (= 1729973928 x940) (> x769 0) (= (x29 x667) x847)))))) x589)))
(assert (x733 x944))
(assert (x733 x626))
(assert (= x743 (=> (and (= x366 x606) (and x535 (= (x478 (x672 x622)) x259) (= x122 (= x192 0)) (not (= x1029 954915356)) (< 0 x259) (not (= x1029 701022898)) (= 1250999895 x1029) (= x366 x297) (= x473 0) (< x1029 1729973928) (= 0 x103) (= (or x482 (not x118)) x535) (= x482 (not (= x424 x297))))) (and (=> (and (and (= (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x580) (= x671 (> 1461501637330902918203684832716283019655932542975 x706)) (= x706 (x942 x229)) (= (x790 (x26 0) 0) x229) (= (x790 (x26 0) 0) x886) (<= x706 115792089237316195423570985008687907853269984665640564039457584007913129639935) x671 (= x81 (x371 x229 1)) (= x918 (< 192 x276)) (= (div (mod (- (x437 x229) (x437 x886)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x2) (<= 0 x706) (= (x442 (+ x580 160)) x276)) (not x122)) (and (=> x918 x445) (=> (not x918) x980))) (=> x122 x713)))))
(assert (x733 x587))
(assert (= (x26 2429653569) (x672 2429653569)))
(assert (x733 x854))
(assert (= x158 (x672 (x437 x158))))
(assert (x733 x257))
(assert (x733 x324))
(assert (x733 x756))
(assert (x733 x48))
(assert (x733 x192))
(assert (x733 x58))
(assert (x325 x598))
(assert (x733 x431))
(assert (= (x672 (x437 x619)) x619))
(assert (x325 x926))
(assert (=> (>= 10000 x807) (= (x672 x807) (x26 x807))))
(assert (x733 x738))
(assert (= (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x167) x537 (= x799 (x790 (x26 0) 0)) (= (div (mod (- (x437 x519) (x437 x799)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x148) (= (not (> x518 224)) x893) (= (x942 x519) x167) (= (< x167 1461501637330902918203684832716283019655932542975) x537) (>= x167 0)) (and x159 x893)) x726))
(assert (x733 x407))
(assert (= (and x112 x684) x655))
(assert (x733 x63))
(assert (= x171 x636))
(assert (= (x672 (x437 x685)) x685))
(assert (= (x672 (x437 x52)) x52))
(assert (= (x437 (x26 1729973928)) 1729973928))
(assert (= (=> (and (and (= x418 x281) (= x753 1) (not (= x300 2429653569)) (= x300 3686129278) (not (> 1729973928 x300)) (< 0 x434) (not (= 1729973928 x300)) (not (= 2485876314 x300)) (= (x478 (x672 x622)) x434) (= (mod x491 115792089237316195423570985008687907853269984665640564039457584007913129639936) x919) (= x449 (= x192 0)) (= x491 (- x418 1)) (= x541 0) (= 0 x759)) (and (= x205 128) (= x293 x281) (= 128 x484) (= x293 (x274 128)))) (and (=> x449 x636) (=> (and (not x449) (and (<= 0 x1027) (= x779 (x790 (x26 0) 0)) (= (x442 (+ x909 160)) x64) (= x36 (x790 (x26 0) 0)) (= x225 (div (mod (- (x437 x36) (x437 x779)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x235 (x371 x36 1)) (= x991 (< 192 x64)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1027) (= x429 (< x1027 1461501637330902918203684832716283019655932542975)) x429 (= x909 (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1027 (x942 x36)))) (and (=> x991 x950) (=> (not x991) x171))))) x138))
(assert (= x980 x713))
(assert (x733 x502))
(assert (x733 x400))
(assert (= (=> (and (= (x942 x956) x668) (= x976 (> 1461501637330902918203684832716283019655932542975 x668)) (= (not (> x375 224)) x683) x976 (= (x790 (x26 0) 0) x388) (<= x668 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (div (mod (- (x437 x956) (x437 x388)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x363) (>= x668 0)) (and x683 x248)) x736))
(assert (= (and (not x89) x426) x112))
(assert (= x628 (or (and (not x399) x457) x874)))
(assert (= (and x805 x795) x1023))
(assert (= (and (not x121) x394) x152))
(assert (= (x672 (x437 x638)) x638))
(assert (= (and x409 x382) x716))
(assert (x733 x3))
(assert (= (and x871 x42) x792))
(assert (x733 x405))
(assert (x733 x165))
(assert (= (x437 (x672 x91)) x91))
(assert (x733 x936))
(assert (x733 x196))
(assert (x733 x793))
(assert (x733 x740))
(assert (= x929 (and x496 x334)))
(assert (= x153 (and x1021 (not x1039))))
(assert (x733 x786))
(assert (= (or (and x1039 x1021) x105) x981))
(assert (x733 x591))
(assert (x733 x644))
(assert (x733 x909))
(assert (=> (>= 10000 x634) (= (x672 x634) (x26 x634))))
(assert (= (x672 1461501637330902918203684832716283019655932542975) (x26 1461501637330902918203684832716283019655932542975)))
(assert (x733 x155))
(assert (x733 x141))
(assert (x733 x965))
(assert (= x943 (and (not x144) x228)))
(assert (x733 x501))
(assert (x733 x276))
(assert (= (or x789 (and x426 x89)) x406))
(assert (x733 x146))
(assert (= x350 (and (not x37) x493)))
(assert (x733 x926))
(assert (x733 x116))
(assert (= (and (not x261) x85) x51))
(assert (x733 x939))
(assert (x733 x476))
(assert (x733 x265))
(assert (x733 x263))
(assert (= (=> (and (= x730 x705) (and (= x93 (not (= x953 x30))) (= x311 (or (not x367) x93)) (= x705 x30))) x311) x386))
(assert (x733 x828))
(assert (x733 x914))
(assert (=> (<= x346 10000) (= (x672 x346) (x26 x346))))
(assert (x733 x419))
(assert (x325 x715))
(assert (x733 x1024))
(assert (= x70 (x437 (x672 x70))))
(assert (x733 x236))
(assert (x733 x657))
(assert (x733 x840))
(assert (x733 x392))
(assert (= (and (not x835) x880) x378))
(assert (x733 x859))
(assert (= (or x767 x792) x85))
(assert (x733 x707))
(assert (x733 x379))
(assert (x733 x605))
(assert (x733 x434))
(assert (x733 x598))
(assert (x733 x759))
(assert (x733 x497))
(assert (x733 x272))
(assert (= (x672 (x437 x960)) x960))
(assert (x733 x579))
(assert (x733 x549))
(assert (x733 x870))
(assert (x733 x24))
(assert (x733 x381))
(assert (x733 x719))
(assert (x733 x143))
(assert (x733 x65))
(assert (= x107 (=> (and (= x796 x174) (and (or (and (and (= 1 x826) (= x660 (x442 (+ 1 x192))) (= (x172 (x672 x70) (x26 1) 0) x860)) (not x121)) (and x121 (= x826 0))) (and (<= 0 x280) (= x481 x70) (>= 1461501637330902918203684832716283019655932542975 x70) (= (x29 x576) x321) (= 0 x60) (= x283 x751) (= (x478 (x672 x622)) x143) (not (> 4 x392)) (= x34 954915356) (>= x321 0) (= x345 (not (= x1036 x219))) (<= x335 1461501637330902918203684832716283019655932542975) (>= x335 0) (= x110 x70) (= x751 x524) (and (= (<= x392 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 35 x392)) (= x613 0) x362 (not (or (and (> 32 x925) (= true (<= x925 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x925 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x427 x70) (= x174 x1036) (< x34 1729973928) (>= x524 0) (> x143 0) (= x362 (or x345 (not x87))) (= x923 0) (= x923 x546) (not (= x34 701022898)) (<= x321 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x576 (x172 (x672 x70) (x26 1) 0)) (<= x524 1461501637330902918203684832716283019655932542975) (= x585 x335) (>= 1461501637330902918203684832716283019655932542975 x280) (= x121 (not (= x321 0))) (= x925 (x40 (- x392 4)))))) x76)))
(assert (= (or x369 (and (not x664) x378)) x95))
(assert (= x369 (and x378 x664)))
(assert (= x258 (or x530 (and x193 (not x930)))))
(assert (= (or x639 x49) x871))
(assert (= (and (not x122) x1052) x440))
(assert (= (x672 (x437 x851)) x851))
(assert (= x515 (and (not x765) x71)))
(assert (x733 x523))
(assert (= (x672 (x437 x299)) x299))
(assert (x733 x293))
(assert (x733 x432))
(assert (x733 x12))
(assert (= x486 (and x522 (not x449))))
(assert (= (and x521 x836) x688))
(assert (= x31 (x672 (x437 x31))))
(assert (x733 x94))
(assert (x733 x737))
(assert (= x197 (or x1044 (and (not x904) x515))))
(assert (= (x672 (x437 x588)) x588))
(assert (x733 x335))
(assert (= (=> (and (and (and (= x926 x1005) (= (x172 (x672 x926) (x26 1) 0) x669) (= x825 (not (= x601 0))) (= (- x284 1) x650) (= (mod x650 115792089237316195423570985008687907853269984665640564039457584007913129639936) x691) (= x601 (x29 x669)) (= x578 1729973928) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x601) (= x1024 0) (not (> 1729973928 x578)) (>= x601 0) (= 1 x689) (< 0 x809) (= x809 (x478 (x672 x622))) (>= 1461501637330902918203684832716283019655932542975 x926) (= x284 x10) (= x873 0)) (or (and (= x377 0) (not x825)) (and x825 (and (= (x29 x387) x870) (= (x172 (x672 x926) (x26 1) 0) x387) (<= x870 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x870 0) (= 0 x973) (= x377 x1009) (not (< x870 1)) (= (x40 (- x870 1)) x875) (= x1009 (x442 (+ x875 1))) (= x150 0))))) (and (= x10 x891) (= x952 128) (= x891 (x597 128)) (= 128 x182))) x256) x226))
(assert (x733 x1027))
(assert (x733 x534))
(assert (= x820 (x672 (x437 x820))))
(assert (x733 x41))
(assert (=> (>= 10000 x846) (= (x26 x846) (x672 x846))))
(assert (x733 x625))
(assert (x733 x56))
(assert (= x131 (or x732 (and x872 x215))))
(assert (x733 x191))
(assert (= x256 (=> (and (and (= x1 1) (not (= x567 954915356)) (= (and x876 x900) x489) (= x901 (mod x816 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (not (= x691 x901)) x876) (< 0 x136) (= 0 x504) (= (- x738 1) x816) (not (= 701022898 x567)) (< x567 1729973928) (= x136 (x478 (x672 x622))) (= (= 0 x192) x586) (= x961 x738) (= 0 x393) (= x567 1250999895)) (= x961 x377)) (and (=> (and (and (= (x442 (+ x748 160)) x968) (= x712 (x942 x31)) (= x31 (x790 (x26 0) 0)) (= x158 (x371 x31 1)) x898 (<= 0 x712) (= x1013 (x790 (x26 0) 0)) (= x57 (div (mod (- (x437 x31) (x437 x1013)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x898 (> 1461501637330902918203684832716283019655932542975 x712)) (<= x712 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 192 x968) x695) (= (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x748)) (not x586)) (and (=> (not x695) x285) (=> x695 x1041))) (=> x586 x138)))))
(assert (x325 x846))
(assert (x733 x35))
(assert (x733 x500))
(assert (x733 x250))
(assert (x733 x884))
(assert (= x643 (or x305 x861)))
(assert (x733 x804))
(assert (x733 x310))
(assert (x733 x70))
(assert (= (or (and x153 (not x594)) x564) x105))
(assert (= (and x406 (not x734)) x139))
(assert (x733 x788))
(assert (= (=> (and (or (and (= x755 0) (not x962)) (and (and x277 (<= x380 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x380 0) (= x277 (< x380 1461501637330902918203684832716283019655932542975)) (= x380 x755) (= (x790 (x26 0) 0) x55) (= (x942 x111) x380) (> x192 x247) (= (x371 x55 x247) x111) (= 0 x674) (= 0 x97)) x962)) (and (= 128 x908) (= 128 x591) (= (> x292 x247) x962) (= (x108 128) x292))) x543) x698))
(assert (x733 x752))
(assert (= (or x773 x152) x616))
(assert (x733 x678))
(assert (x733 x337))
(assert (= x228 (or x628 (and x78 x555))))
(assert (= x177 x735))
(assert (= (+ 1 (x437 x760)) (x437 (x371 x760 1))))
(assert (= (x437 (x672 x846)) x846))
(assert (= (x437 (x672 x166)) x166))
(assert (x733 x333))
(assert (x733 x969))
(assert (x733 x11))
(assert (x733 x1009))
(assert (x733 x753))
(assert (x733 x34))
(assert (= (x672 (x437 x956)) x956))
(assert (= x1006 (or (and x845 (not x189)) x39)))
(assert (x733 x964))
(assert (x733 x899))
(assert (x325 x896))
(assert (x733 x262))
(assert (x733 x777))
(assert (= (x437 (x26 1572751336)) 1572751336))
(assert (x733 x533))
(assert (x733 x351))
(assert (= x472 (x672 (x437 x472))))
(assert (= (or x554 (and x574 (not x695))) x527))
(assert (x733 x696))
(assert (= (+ 1 (x437 x661)) (x437 (x371 x661 1))))
(assert (= x1042 (x672 (x437 x1042))))
(assert (= x821 (=> (and (and (and (= x119 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x413) (= x11 1729973928) (not (> 1729973928 x11)) (= x414 (- x421 1)) (= (x172 (x672 x615) (x26 1) 0) x1049) (= x401 x615) (= x421 x35) (= x974 (x478 (x672 x622))) (= (mod x414 115792089237316195423570985008687907853269984665640564039457584007913129639936) x417) (= x1040 1) (= (x29 x1049) x413) (< 0 x974) (<= x615 1461501637330902918203684832716283019655932542975) (= 0 x553) (= x37 (not (= 0 x413))) (<= 0 x413)) (or (and (not x37) (= x986 0)) (and (and (= (x442 (+ 1 x841)) x99) (= 0 x827) (<= x44 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x44 0) (not (< x44 1)) (= (x40 (- x44 1)) x841) (= x935 0) (= x4 (x172 (x672 x615) (x26 1) 0)) (= (x29 x4) x44) (= x986 x99)) x37))) (and (= x317 128) (= (x562 128) x273) (= x526 128) (= x35 x273))) x692)))
(assert (= (x672 (x437 x133)) x133))
(assert (x733 x509))
(assert (= x285 x138))
(assert (= (x672 2485876314) (x26 2485876314)))
(assert (x733 x448))
(assert (x733 x357))
(assert (x733 x1000))
(assert (x733 x706))
(assert (x733 x824))
(assert (x733 x167))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x437 (x26 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= x760 (x672 (x437 x760))))
(assert (x733 x364))
(assert (x733 x225))
(assert (x733 x996))
(assert (x733 x211))
(assert (= (x437 (x371 x229 1)) (+ (x437 x229) 1)))
(assert (x866 x422))
(assert (x733 x264))
(assert (= x220 (=> (and (and (< x490 1729973928) (= (< x137 x396) x183) (= (= 0 x192) x59) (= 0 x966) (< 0 x654) (not (= x490 954915356)) (= (and x714 x183) x900) (not (= 701022898 x490)) (= x206 0) (= x1050 x396) (= x490 1250999895) (= x654 (x478 (x672 x622)))) (and (= (x903 128) x127) (= x1050 x127) (= 128 x787) (= 128 x879))) (and (=> x59 x226) (=> (and (not x59) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x666) (= (x790 (x26 0) 0) x439) (>= x666 0) (= x666 (x942 x439)) (= (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x268) (= x627 (< x666 1461501637330902918203684832716283019655932542975)) (= (< 192 x468) x742) (= (x371 x439 1) x514) x627 (= (x442 (+ 160 x268)) x468) (= x154 (div (mod (- (x437 x439) (x437 x665)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x790 (x26 0) 0) x665))) (and (=> x742 x151) (=> (not x742) x987)))))))
(assert (x733 x957))
(assert (x733 x986))
(assert (x733 x283))
(assert (x325 x70))
(assert (= (x672 (x437 x388)) x388))
(assert (=> (<= x622 10000) (= (x26 x622) (x672 x622))))
(assert (x733 x1010))
(assert (x733 x469))
(assert (= x817 (and x910 x21)))
(assert (x733 x919))
(assert (x733 x946))
(assert (= x538 (or x466 (and x210 (not x646)))))
(assert (=> (>= 10000 x892) (= (x672 x892) (x26 x892))))
(assert (= (or x271 (and x144 x228)) x832))
(assert (x733 x613))
(assert (x733 x968))
(assert (= x815 (x672 (x437 x815))))
(assert (= (+ 1 (x437 x1042)) (x437 (x371 x1042 1))))
(assert (x733 x462))
(assert (x733 x656))
(assert (x733 x281))
(assert (x733 x427))
(assert (x733 x217))
(assert (x733 x858))
(assert (= (x672 (x437 x339)) x339))
(assert (x733 x676))
(assert (= (x437 (x371 x234 1)) (+ 1 (x437 x234))))
(assert (x733 x771))
(assert (= (x672 (x437 x519)) x519))
(assert (x733 x746))
(assert (= x872 (or x517 x289)))
(assert (x733 x360))
(assert (= x522 (or (and x586 x341) x527)))
(assert (= x289 (and x890 x907)))
(assert (x733 x1016))
(assert (x733 x22))
(assert (x733 x796))
(assert (= (+ 1 (x437 x36)) (x437 (x371 x36 1))))
(assert (x733 x25))
(assert (= x958 (x672 (x437 x958))))
(assert (= (x26 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x672 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x733 x353))
(assert (x733 x465))
(assert (x733 x852))
(assert (x733 x754))
(assert (x733 x822))
(assert (x733 x130))
(assert (=> (>= 10000 x926) (= (x26 x926) (x672 x926))))
(assert (=> (<= x422 10000) (= (x26 x422) (x672 x422))))
(assert (x733 x797))
(assert (x733 x23))
(assert (x733 x461))
(assert (x733 x9))
(assert (x733 x1005))
(assert (x733 x642))
(assert (x733 x892))
(assert (x733 x1019))
(assert (x733 x675))
(assert (x733 x961))
(assert (= x365 (and x842 (not x33))))
(assert (x733 x481))
(assert (=> (>= 10000 x198) (= (x672 x198) (x26 x198))))
(assert (x733 x640))
(assert (= (+ (x437 x133) 1) (x437 (x371 x133 1))))
(assert (x733 x50))
(assert (x733 x1025))
(assert (= x279 (and x832 x962)))
(assert (x733 x999))
(assert (x733 x363))
(assert (= (x672 (x437 x505)) x505))
(assert (x733 x10))
(assert (x733 x539))
(assert (x733 x75))
(assert (= (+ 1 (x437 x619)) (x437 (x371 x619 1))))
(assert (x733 x895))
(assert (x733 x546))
(assert (= (=> (and (= x184 x540) (and (< x702 1729973928) (= x835 (= 0 x192)) (= 0 x90) (not (= 954915356 x702)) (< 0 x858) (not (= 701022898 x702)) (= x120 x184) (= (x478 (x672 x622)) x858) (= 0 x502) (= x702 1250999895))) (and (=> (and (and (= x664 (> x453 192)) (= x1002 (div (mod (- (x437 x231) (x437 x685)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x741 (mod (* x192 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x790 (x26 0) 0) x231) (= x465 (x942 x231)) (= x453 (x442 (+ x741 160))) (>= x465 0) (<= x465 115792089237316195423570985008687907853269984665640564039457584007913129639935) x888 (= (x371 x231 1) x339) (= x888 (< x465 1461501637330902918203684832716283019655932542975)) (= x685 (x790 (x26 0) 0))) (not x835)) (and (=> (not x664) x728) (=> x664 x682))) (=> x835 x209))) x487))
(assert (x733 x967))
(assert (x733 x14))
(assert (x733 x1040))
(assert (= (x672 (x437 x455)) x455))
(assert (= (+ 1 (x437 x542)) (x437 (x371 x542 1))))
(assert (x733 x359))
(assert (= 3686129278 (x437 (x26 3686129278))))
(assert (= (x26 1729973928) (x672 1729973928)))
(assert (x733 x758))
(assert (=> (>= 10000 x996) (= (x26 x996) (x672 x996))))
(assert (= (x437 (x672 x926)) x926))
(assert (x561 1461501637330902918203684832716283019655932542975))
(assert (x733 x99))
(assert (= (or x331 x905) x880))
(assert (x733 x370))
(assert (x325 x422))
(assert (x733 x135))
(assert (x733 x221))
(assert (x733 x354))
(assert (x733 x920))
(assert (x325 x622))
(assert (x733 x160))
(assert (= (x672 (x437 x147)) x147))
(assert (x733 x416))
(assert (x733 x849))
(assert (x733 x856))
(assert (x733 x668))
(assert (= x795 (and x872 (not x215))))
(assert (= x237 (x672 (x437 x237))))
(assert (x733 x607))
(assert (x733 x660))
(assert (x733 x129))
(assert (x733 x673))
(assert (= x368 (=> (and (= x587 x303) (and (and (<= x719 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x719 (x658 x109)) (= x109 (x172 (x672 x198) (x26 1) 0)) (= x1005 x198) (>= 1461501637330902918203684832716283019655932542975 x198) (not (> 1729973928 x647)) (= 0 x54) (= x727 (x478 (x672 x622))) (= x33 (not (= 0 x719))) (< 0 x727) (= x303 x953) (= x771 0) (<= 0 x719) (= 1729973928 x647)) (or (and x33 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x494) (= x609 0) (= (x40 (- x494 1)) x464) (= (x442 (+ x464 1)) x831) (not (> 1 x494)) (= x599 (x172 (x672 x198) (x26 1) 0)) (= x831 x730) (= x931 0) (= x494 (x658 x599)) (<= 0 x494))) (and (not x33) (= x730 0))))) x386)))
(assert (= x833 (and x745 x616)))
(assert (x733 x585))
(assert (x733 x458))
(assert (x733 x238))
(assert (x733 x322))
(assert (= x376 x163))
(assert (= x151 (=> (and (>= x146 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x146) (= (div (mod (- (x437 x514) (x437 x820)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x342) (= x820 (x790 (x26 0) 0)) (= x199 (not (> x468 224))) (= (> 1461501637330902918203684832716283019655932542975 x146) x423) x423 (= x146 (x942 x514))) (and x987 x199))))
(assert (x733 x582))
(assert (x733 x757))
(assert (x733 x232))
(assert (x733 x173))
(assert (x733 x280))
(assert (= (and x164 x784) x750))
(assert (= (x672 (x437 x779)) x779))
(assert (x733 x837))
(assert (= (+ x822 (x437 x1045)) (x437 (x371 x1045 x822))))
(assert (x733 x13))
(assert (x733 x963))
(assert (x733 x473))
(assert (x733 x474))
(assert (= x547 (x672 (x437 x547))))
(assert (= x410 x800))
(assert (x733 x97))
(assert (x733 x294))
(assert (x733 x1035))
(assert (x733 x206))
(assert (x733 x298))
(assert (x733 x995))
(assert (= x782 (or x984 x716)))
(assert (x733 x927))
(assert (x733 x390))
(assert (x733 x309))
(assert (= x457 (and x555 (not x78))))
(assert (= x608 (x672 (x437 x608))))
(assert (=> (>= 10000 x715) (= (x672 x715) (x26 x715))))
(assert (x733 x288))
(assert (= x439 (x672 (x437 x439))))
(assert (x733 x318))
(assert (=> (>= 10000 x854) (= (x26 x854) (x672 x854))))
(assert (= (+ (x437 x439) 1) (x437 (x371 x439 1))))
(assert (x733 x739))
(assert (x733 x480))
(assert (x733 x136))
(assert (=> (<= x615 10000) (= (x672 x615) (x26 x615))))
(assert (x733 x484))
(assert (x733 x1034))
(assert (x733 x885))
(assert (x733 x1018))
(assert (= x80 x548))
(assert (x733 x286))
(assert (x733 x577))
(assert (x733 x677))
(assert (x733 x945))
(assert (= x395 (x672 (x437 x395))))
(assert (= x713 (=> (and (and (= x948 x549) (= x583 128) (= x549 (x383 128)) (= 128 x265)) (and (not (= x534 701022898)) (= 1 x178) (= x5 0) (= (= 0 x192) x89) (= x266 (- x8 1)) (= 1250999895 x534) (< 0 x837) (= x927 0) (< x534 1729973928) (= x948 x8) (= x94 (mod x266 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (= 954915356 x534)) (= (x478 (x672 x622)) x837))) (and (=> (and (not x89) (and (= x455 (x790 (x26 0) 0)) (= (x371 x760 1) x519) x922 (= x684 (> x518 192)) (= x922 (< x700 1461501637330902918203684832716283019655932542975)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x700) (= (x942 x760) x700) (= (x442 (+ 160 x130)) x518) (= x760 (x790 (x26 0) 0)) (= x130 (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= 0 x700) (= (div (mod (- (x437 x760) (x437 x455)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x1035))) (and (=> (not x684) x159) (=> x684 x726))) (=> x89 x947)))))
(assert (x733 x624))
(assert (x733 x938))
(assert (x733 x227))
(assert (= x892 (x437 (x672 x892))))
(assert (x733 x233))
(assert (x733 x747))
(assert (x733 x977))
(assert (= x275 (x672 (x437 x275))))
(assert (x733 x622))
(assert (x733 x580))
(assert (= (x672 (x437 x195)) x195))
(assert (x733 x202))
(assert (x733 x413))
(assert (= (=> (and (= x755 x949) (and (or (and (not x679) (= 0 x572)) (and x679 (and (= (x29 x848) x145) (not (> 1 x145)) (= x572 x657) (= x631 0) (>= x145 0) (= 0 x227) (= (x40 (- x145 1)) x257) (= x657 (x442 (+ x257 1))) (<= x145 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x848 (x172 (x672 x892) (x26 1) 0))))) (and (= x424 x755) (= x100 (x478 (x672 x622))) (< 0 x100) (= x523 0) (<= x173 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x892) (= x270 (x172 (x672 x892) (x26 1) 0)) (= 1729973928 x1032) (<= 0 x173) (= x173 (x29 x270)) (= 0 x721) (not (> 1729973928 x1032)) (= x892 x401) (= x679 (not (= x173 0)))))) x887) x543))
(assert (x733 x972))
(assert (= x210 (and (not x330) x782)))
(assert (x733 x222))
(assert (= (x672 954915356) (x26 954915356)))
(assert (x733 x857))
(assert (x733 x205))
(assert (= x493 (or x917 (and x981 x604))))
(assert (x733 x566))
(assert (= (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x354) (= x208 (> 1461501637330902918203684832716283019655932542975 x354)) x208 (= (x942 x339) x354) (= x117 (x790 (x26 0) 0)) (<= 0 x354) (= x448 (div (mod (- (x437 x339) (x437 x117)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= x911 (not (> x453 224)))) (and x728 x911)) x682))
(assert (x733 x176))
(assert (= x863 (or x258 (and x1026 x595))))
(assert (x733 x609))
(assert (x733 x618))
(assert (= (=> (and (= (div (mod (- (x437 x235) (x437 x547)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x288) x241 (= (< x823 1461501637330902918203684832716283019655932542975) x241) (= x547 (x790 (x26 0) 0)) (= x955 (not (< 224 x64))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x823) (>= x823 0) (= x823 (x942 x235))) (and x171 x955)) x950))
(assert (= x907 (or x750 x374)))
(assert (x733 x119))
(assert (= x517 (and x907 (not x890))))
(assert (x733 x443))
(assert (= (or x45 (and x190 (not x742))) x290))
(assert (x866 x996))
(assert (x733 x148))
(assert (x733 x700))
(assert (x733 x204))
(assert (x733 x391))
(assert (= (or (and x112 (not x684)) x655) x789))
(assert (x733 x114))
(assert (= (x437 (x672 x615)) x615))
(assert (x733 x1036))
(assert (x733 x68))
(assert (= x352 (=> (and (= (not (< 224 x391)) x412) (<= 0 x744) (= x960 (x790 (x26 0) 0)) x569 (= x201 (div (mod (- (x437 x608) (x437 x960)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x942 x608) x744) (= x569 (< x744 1461501637330902918203684832716283019655932542975)) (<= x744 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and x412 x376))))
(assert (= (or (and x863 x59) x290) x864))
(assert (= x305 (and (not x679) x102)))
(assert (= x384 (or x794 (and x486 (not x991)))))
(assert (x733 x827))
(assert (x561 x996))
(assert (x733 x503))
(assert (x733 x603))
(assert (x733 x631))
(assert (x733 x629))
(assert (x733 x948))
(assert (x733 x366))
(assert (x733 x342))
(assert (= x20 (=> (and (= (x942 x867) x531) (>= x531 0) (= x506 (not (> x611 224))) (<= x531 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x17 (< x531 1461501637330902918203684832716283019655932542975)) x17 (= x1033 (div (mod (- (x437 x867) (x437 x275)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (x790 (x26 0) 0) x275)) (and x507 x506))))
(assert (x733 x174))
(assert (= (x672 (x437 x932)) x932))
(assert (= (or x86 x833) x842))
(assert (x733 x246))
(assert (x733 x769))
(assert (= (x437 (x672 x443)) x443))
(assert (x733 x637))
(assert (= (x672 (x437 x213)) x213))
(assert (x733 x149))
(assert (= x466 (and x646 x210)))
(assert (= x905 (and x520 (not x941))))
(assert (= x800 (=> (and (and (= x144 (= x192 0)) (not (< x68 1729973928)) (= (- x326 1) x343) (not (= 2485876314 x68)) (= (x478 (x672 x622)) x696) (not (= 1729973928 x68)) (< 0 x696) (not (= 2429653569 x68)) (= x135 x326) (= x68 3686129278) (= 0 x1048) (= 1 x381) (= 0 x1034) (= x247 (mod x343 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (= 128 x23) (= 128 x592) (= x359 x135) (= (x528 128) x359))) (and (=> (and (and (= x251 (< x249 1461501637330902918203684832716283019655932542975)) x251 (= (x942 x244) x249) (>= x249 0) (= (x442 (+ x937 160)) x236) (= x244 (x790 (x26 0) 0)) (= (x790 (x26 0) 0) x213) (= (div (mod (- (x437 x244) (x437 x213)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x79) (= x937 (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x236 192) x868) (= (x371 x244 1) x180) (<= x249 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not x144)) (and (=> x868 x278) (=> (not x868) x701))) (=> x144 x698)))))
(assert (x733 x645))
(assert (= x560 (=> (and (= (x790 (x26 0) 0) x638) (= x603 (x942 x475)) (>= x603 0) (= (div (mod (- (x437 x475) (x437 x638)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) x262) (<= x603 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x291 (not (> x407 224))) (= (< x603 1461501637330902918203684832716283019655932542975) x124) x124) (and x291 x123))))
(assert (x733 x358))
(assert (x733 x702))
(assert (x733 x417))
(assert (x733 x715))
(assert (x733 x247))
(assert (x733 x718))
(assert (= x140 (=> (and (and (= (= x192 0) x595) (< x438 1729973928) (not (= x438 954915356)) (= x921 1) (= x137 (mod x389 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> x452 0) (= (- x699 1) x389) (= x699 x309) (= x452 (x478 (x672 x622))) (not (= 701022898 x438)) (= x869 0) (= x840 0) (= x438 1250999895)) (= x309 x479)) (and (=> (and (and (= (< x13 1461501637330902918203684832716283019655932542975) x1008) (= (x790 (x26 0) 0) x472) x1008 (= x375 (x442 (+ x808 160))) (= x501 (div (mod (- (x437 x395) (x437 x472)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (<= 0 x13) (= (> x375 192) x930) (= x956 (x371 x395 1)) (= x395 (x790 (x26 0) 0)) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x942 x395) x13) (= x808 (mod (* 32 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x595)) (and (=> x930 x736) (=> (not x930) x248))) (=> x595 x220)))))
(assert (x733 x120))
(assert (x733 x380))
(assert (x733 x761))
(assert (= (x672 (x437 x81)) x81))
(assert (x733 x693))
(assert (= x947 x159))
(assert (x733 x711))
(assert (= x874 (and x457 x399)))
(assert (= x867 (x672 (x437 x867))))
(assert (= (and x334 (not x496)) x525))
(assert (= (x437 (x672 x896)) x896))
(assert (= x565 (x672 (x437 x565))))
(assert (x733 x809))
(assert (= x554 (and x695 x574)))
(assert (= (x672 (x437 x36)) x36))
(assert (x733 x179))
(assert (= x142 (or x850 (and (not x918) x440))))
(assert (= (or (and x943 (not x868)) x282) x271))
(assert (x733 x1032))
(assert (= x564 (and x594 x153)))
(assert (x733 x994))
(check-sat)
(exit)