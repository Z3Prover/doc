(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x366 0)) (((x255 (x432 x366) (x148 x366) (x328 x366) (x215 x366) (x78 x366) (x291 x366) (x29 Int)) (x247 (x382 x366) (x279 x366) (x360 x366) (x95 Int)) (x1 (x50 x366) (x52 x366) (x265 x366) (x196 x366) (x97 x366) (x79 Int)) (x323 (x187 x366) (x159 x366) (x64 x366) (x26 x366) (x405 Int)) (x349 (x356 x366) (x14 x366) (x439 x366) (x352 x366) (x140 x366) (x417 x366) (x322 x366) (x311 Int)) (x94 (x347 x366) (x154 Int)) (x132 (x51 x366) (x243 x366) (x289 Int)) (x34 (x384 Int)))))
(declare-fun x192 () Bool)
(declare-fun x261 () x366)
(declare-fun x258 () Int)
(declare-fun x423 () Int)
(declare-fun x459 () Int)
(declare-fun x58 (Int Int) Int)
(declare-fun x20 () Int)
(declare-fun x165 () Int)
(declare-fun x398 () Int)
(declare-fun x201 (Int) Int)
(declare-fun x402 () Int)
(declare-fun x342 () Int)
(declare-fun x278 (Int) Int)
(declare-fun x144 () Int)
(declare-fun x69 () Int)
(declare-fun x337 () Bool)
(declare-fun x283 () Int)
(declare-fun x63 () Int)
(declare-fun x409 () Int)
(declare-fun x370 () Int)
(declare-fun x229 () Bool)
(declare-fun x17 () Int)
(declare-fun x45 () Int)
(declare-fun x242 (Int) Int)
(declare-fun x220 () Int)
(declare-fun x166 () Bool)
(declare-fun x178 () Int)
(declare-fun x185 () Int)
(declare-fun x436 () Int)
(declare-fun x5 () Bool)
(declare-fun x72 () Int)
(declare-fun x379 () Int)
(declare-fun x217 () Int)
(declare-fun x189 () Int)
(declare-fun x386 () Bool)
(declare-fun x359 () Int)
(declare-fun x41 () Int)
(declare-fun x400 () Bool)
(declare-fun x197 () Int)
(declare-fun x318 () Bool)
(declare-fun x129 () Bool)
(declare-fun x33 () Int)
(declare-fun x43 () Int)
(declare-fun x380 () Int)
(declare-fun x91 () Bool)
(declare-fun x288 () Int)
(declare-fun x199 () Bool)
(declare-fun x35 () Int)
(declare-fun x302 () Bool)
(declare-fun x316 () Int)
(declare-fun x313 () Int)
(declare-fun x92 () Int)
(declare-fun x130 () Bool)
(declare-fun x397 () Int)
(declare-fun x350 () Int)
(declare-fun x297 () x366)
(declare-fun x373 () Int)
(declare-fun x246 () Int)
(declare-fun x326 () Int)
(declare-fun x454 () x366)
(declare-fun x90 (Int) Int)
(declare-fun x344 () Bool)
(declare-fun x7 () Int)
(declare-fun x250 () Int)
(declare-fun x351 () x366)
(declare-fun x182 () Int)
(declare-fun x403 () Int)
(declare-fun x19 () Bool)
(declare-fun x36 () Int)
(declare-fun x32 () Int)
(declare-fun x333 () Int)
(declare-fun x354 () Int)
(declare-fun x467 () x366)
(declare-fun x55 () Int)
(declare-fun x420 () Bool)
(declare-fun x42 () Int)
(declare-fun x292 () Int)
(declare-fun x131 () Int)
(declare-fun x348 () Int)
(declare-fun x221 () x366)
(declare-fun x180 () Int)
(declare-fun x239 () Int)
(declare-fun x191 () Bool)
(declare-fun x339 () Int)
(declare-fun x238 () Bool)
(declare-fun x104 () Int)
(declare-fun x248 () Int)
(declare-fun x324 () Int)
(declare-fun x38 () Bool)
(declare-fun x149 () Int)
(declare-fun x13 () Bool)
(declare-fun x120 (Int) Int)
(declare-fun x204 () Int)
(declare-fun x330 () Int)
(declare-fun x300 () Int)
(declare-fun x358 (x366) Int)
(declare-fun x128 () Int)
(declare-fun x449 (x366) Int)
(declare-fun x21 () Int)
(declare-fun x86 () Int)
(declare-fun x451 () Bool)
(declare-fun x372 () Int)
(declare-fun x105 () Int)
(declare-fun x441 () Int)
(declare-fun x389 () Int)
(declare-fun x117 () Int)
(declare-fun x353 () Int)
(declare-fun x321 () Int)
(declare-fun x234 () Int)
(declare-fun x2 () Int)
(declare-fun x67 () Bool)
(declare-fun x198 () Bool)
(declare-fun x412 () Int)
(declare-fun x96 () Int)
(declare-fun x114 () Int)
(declare-fun x460 (Int Int) Int)
(declare-fun x445 () Int)
(declare-fun x298 () Int)
(declare-fun x74 () Bool)
(declare-fun x429 () Int)
(declare-fun x268 () Int)
(declare-fun x277 () Int)
(declare-fun x226 () Int)
(declare-fun x103 () Int)
(declare-fun x426 () Int)
(declare-fun x142 () Int)
(declare-fun x203 () Int)
(declare-fun x173 () Int)
(declare-fun x195 () Int)
(declare-fun x414 () Int)
(declare-fun x396 () Int)
(declare-fun x168 () Int)
(declare-fun x375 () Bool)
(declare-fun x224 () Int)
(declare-fun x413 () Int)
(declare-fun x446 () Bool)
(declare-fun x127 () Int)
(declare-fun x39 () Int)
(declare-fun x437 () Int)
(declare-fun x81 () Int)
(declare-fun x111 () Int)
(declare-fun x273 () Int)
(declare-fun x269 () Int)
(declare-fun x88 () Int)
(declare-fun x275 (Int) x366)
(declare-fun x136 () Int)
(declare-fun x431 () Int)
(declare-fun x327 () Bool)
(declare-fun x464 () Bool)
(declare-fun x61 () Int)
(declare-fun x202 () Int)
(declare-fun x306 (x366) Int)
(declare-fun x425 () Bool)
(declare-fun x309 () Int)
(declare-fun x249 () Int)
(declare-fun x393 () Int)
(declare-fun x62 () Bool)
(declare-fun x335 () Int)
(declare-fun x98 () Int)
(declare-fun x230 () Bool)
(declare-fun x28 (x366) Int)
(declare-fun x463 () Int)
(declare-fun x444 () Int)
(declare-fun x411 () Int)
(declare-fun x16 () Int)
(declare-fun x341 () Int)
(declare-fun x367 () Int)
(declare-fun x455 () Int)
(declare-fun x272 () Int)
(declare-fun x75 () Bool)
(declare-fun x362 () x366)
(declare-fun x299 (Int) Int)
(declare-fun x59 (Int) Int)
(declare-fun x461 () Int)
(declare-fun x345 () Int)
(declare-fun x338 () x366)
(declare-fun x443 () Int)
(declare-fun x83 () Int)
(declare-fun x227 () Int)
(declare-fun x76 () Int)
(declare-fun x371 () Int)
(declare-fun x381 () Int)
(declare-fun x223 () Int)
(declare-fun x424 () Int)
(declare-fun x121 () Int)
(declare-fun x116 () Int)
(declare-fun x207 () Int)
(declare-fun x101 (Int) Int)
(declare-fun x112 () Int)
(declare-fun x301 () Int)
(declare-fun x177 () Int)
(declare-fun x138 () Int)
(declare-fun x93 () Int)
(declare-fun x329 () Int)
(declare-fun x458 () Int)
(declare-fun x6 () Int)
(declare-fun x107 () Int)
(declare-fun x135 () Int)
(declare-fun x4 () Int)
(declare-fun x68 () Int)
(declare-fun x264 () Bool)
(declare-fun x160 () Int)
(declare-fun x174 () Int)
(declare-fun x240 () x366)
(declare-fun x282 () Int)
(declare-fun x18 () Bool)
(declare-fun x267 () Int)
(declare-fun x161 () Bool)
(declare-fun x57 (Int) Int)
(declare-fun x82 (Int) Int)
(declare-fun x66 () Int)
(declare-fun x312 () Int)
(declare-fun x270 () Int)
(declare-fun x310 () Int)
(declare-fun x22 () Int)
(declare-fun x49 () Bool)
(declare-fun x186 () Int)
(declare-fun x125 () Int)
(declare-fun x357 () Int)
(declare-fun x53 () Int)
(declare-fun x133 () Bool)
(declare-fun x331 (Int) Int)
(declare-fun x46 () Int)
(declare-fun x293 () Int)
(declare-fun x334 () Int)
(declare-fun x466 () Bool)
(declare-fun x170 () Int)
(declare-fun x194 () Int)
(declare-fun x416 () Bool)
(declare-fun x89 () Int)
(declare-fun x102 () Bool)
(declare-fun x427 () Int)
(declare-fun x172 () Int)
(declare-fun x286 () Int)
(declare-fun x332 () Bool)
(declare-fun x27 () Int)
(declare-fun x274 () Int)
(declare-fun x40 (Int) Int)
(declare-fun x48 () Int)
(declare-fun x363 () Int)
(declare-fun x193 () Bool)
(declare-fun x139 () Bool)
(declare-fun x80 () Int)
(declare-fun x235 () Int)
(declare-fun x262 () Int)
(declare-fun x176 () Int)
(declare-fun x124 () Int)
(declare-fun x296 (Int) Int)
(declare-fun x167 () Int)
(declare-fun x233 () Int)
(declare-fun x190 () Int)
(declare-fun x157 () Bool)
(declare-fun x108 () Int)
(declare-fun x266 () Bool)
(declare-fun x315 () Int)
(declare-fun x448 () Int)
(declare-fun x408 () Bool)
(declare-fun x134 () Int)
(declare-fun x231 () Int)
(declare-fun x257 () Int)
(declare-fun x276 () Int)
(declare-fun x209 () Int)
(declare-fun x374 () Int)
(declare-fun x465 () Int)
(declare-fun x241 (Int Int) Int)
(declare-fun x305 () Int)
(declare-fun x450 () Int)
(declare-fun x376 () Int)
(declare-fun x254 () Int)
(declare-fun x118 () Int)
(declare-fun x325 () Int)
(declare-fun x228 () Int)
(declare-fun x252 () Int)
(declare-fun x87 () Int)
(declare-fun x169 () Int)
(declare-fun x184 () Int)
(declare-fun x434 () Int)
(declare-fun x54 () Int)
(declare-fun x152 () Int)
(declare-fun x146 () Int)
(declare-fun x410 () Int)
(declare-fun x179 () Int)
(declare-fun x211 () Int)
(declare-fun x390 () Int)
(declare-fun x171 () x366)
(declare-fun x3 () Int)
(declare-fun x438 () Int)
(declare-fun x383 () Int)
(declare-fun x77 () Int)
(declare-fun x156 () Int)
(declare-fun x200 (Int) Int)
(declare-fun x256 () Int)
(declare-fun x214 () Int)
(declare-fun x453 () Int)
(declare-fun x155 () Int)
(declare-fun x163 () Int)
(declare-fun x440 (Int) Int)
(declare-fun x284 () Bool)
(declare-fun x206 () Int)
(declare-fun x394 () Int)
(declare-fun x468 () Int)
(declare-fun x73 () Bool)
(declare-fun x141 () Bool)
(declare-fun x236 () Int)
(declare-fun x314 () Int)
(declare-fun x122 () Int)
(declare-fun x44 () Int)
(declare-fun x15 () Int)
(declare-fun x377 () x366)
(declare-fun x295 () Int)
(declare-fun x388 () Int)
(declare-fun x183 () Int)
(declare-fun x365 () Bool)
(declare-fun x99 () Int)
(declare-fun x143 () Int)
(declare-fun x65 () Int)
(declare-fun x106 () x366)
(declare-fun x259 () Int)
(declare-fun x294 (Int) Int)
(declare-fun x153 () Int)
(declare-fun x452 () Int)
(declare-fun x8 () Bool)
(declare-fun x418 () Int)
(declare-fun x422 () Int)
(declare-fun x442 () Int)
(declare-fun x378 () Int)
(declare-fun x110 () Int)
(declare-fun x280 () Int)
(declare-fun x205 () Int)
(declare-fun x447 () Int)
(declare-fun x290 () Int)
(declare-fun x37 () Int)
(declare-fun x260 () Int)
(declare-fun x31 () Int)
(declare-fun x175 () Bool)
(declare-fun x404 () Bool)
(declare-fun x406 () Bool)
(declare-fun x123 () Bool)
(declare-fun x308 () Int)
(declare-fun x319 () Int)
(declare-fun x421 () Int)
(declare-fun x399 () Int)
(declare-fun x115 () Int)
(declare-fun x216 () Int)
(declare-fun x343 () Int)
(declare-fun x387 () Int)
(declare-fun x137 () Int)
(declare-fun x24 () x366)
(declare-fun x285 () Bool)
(declare-fun x435 () Bool)
(declare-fun x456 () Int)
(declare-fun x263 () Int)
(declare-fun x395 () x366)
(declare-fun x407 () Int)
(declare-fun x430 () Int)
(declare-fun x369 (Int) Int)
(declare-fun x317 () Int)
(declare-fun x346 () Int)
(define-fun x304 ((x366 x366) (x307 Int)) x366 (ite ((_ is x349) x366) (x349 (x356 x366) (x14 x366) (x439 x366) (x352 x366) (x140 x366) (x417 x366) (x322 x366) (+ x307 (x311 x366))) (ite ((_ is x255) x366) (x255 (x432 x366) (x148 x366) (x328 x366) (x215 x366) (x78 x366) (x291 x366) (+ x307 (x29 x366))) (ite ((_ is x1) x366) (x1 (x50 x366) (x52 x366) (x265 x366) (x196 x366) (x97 x366) (+ (x79 x366) x307)) (ite ((_ is x323) x366) (x323 (x187 x366) (x159 x366) (x64 x366) (x26 x366) (+ x307 (x405 x366))) (ite ((_ is x247) x366) (x247 (x382 x366) (x279 x366) (x360 x366) (+ x307 (x95 x366))) (ite ((_ is x94) x366) (x94 (x347 x366) (+ (x154 x366) x307)) (ite ((_ is x132) x366) (x132 (x51 x366) (x243 x366) (+ (x289 x366) x307)) (x34 (+ (x384 x366) x307))))))))))
(define-fun x147 ((x210 Int)) Int (ite (and (<= 0 x210) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x210)) x210 (- x210 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x213 ((x210 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x210) (< x210 0)) (+ x210 115792089237316195423570985008687907853269984665640564039457584007913129639936) x210))
(define-fun x355 ((x85 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x85) (<= 0 x85)))
(define-fun x232 ((x85 Int)) Bool (and (= (x58 x85 115792089237316195423570985008687907853269984665640564039457584007913129639935) x85) (= (x58 115792089237316195423570985008687907853269984665640564039457584007913129639935 x85) x85)))
(define-fun x320 ((x85 Int)) Bool (and (= (x58 x85 0) 0) (= 0 (x58 0 x85))))
(define-fun x151 ((x85 Int)) Bool (= (x58 x85 x85) x85))
(define-fun x457 ((x85 Int)) Bool (and (x232 x85) (x320 x85) (x151 x85)))
(define-fun x219 ((x85 Int) (x60 Int)) Bool (= (x58 x85 x60) (x58 x60 x85)))
(define-fun x23 ((x85 Int) (x60 Int)) Bool (and (=> (>= x60 0) (<= (x58 x85 x60) x60)) (=> (>= x85 0) (>= x85 (x58 x85 x60))) (<= 0 (x58 x85 x60))))
(define-fun x11 ((x85 Int) (x60 Int)) Bool (and (x23 x85 x60) (x219 x85 x60)))
(define-fun x462 ((x85 Int)) Bool (= (x58 x85 4294967295) (mod x85 4294967296)))
(define-fun x145 ((x85 Int)) Bool (and (x11 x85 4294967295) (x462 x85)))
(define-fun x251 ((x85 Int)) Bool (= (x58 x85 340282366920938463463374607431768211455) (mod x85 340282366920938463463374607431768211456)))
(define-fun x281 ((x85 Int)) Bool (and (x251 x85) (x11 x85 340282366920938463463374607431768211455)))
(define-fun x181 ((x85 Int)) Bool (= (mod x85 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x85 32) (x58 x85 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x225 ((x85 Int)) Bool (and (x181 x85) (x11 x85 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x433 ((x85 Int)) Bool (= (x58 x85 255) (mod x85 256)))
(define-fun x244 ((x85 Int)) Bool (and (x433 x85) (x11 x85 255)))
(define-fun x30 ((x85 Int)) Bool (= (x58 x85 1461501637330902918203684832716283019655932542975) (mod x85 1461501637330902918203684832716283019655932542976)))
(define-fun x222 ((x85 Int)) Bool (and (x11 x85 1461501637330902918203684832716283019655932542975) (x30 x85)))
(define-fun x208 ((x415 Int)) Int (ite (= 128 x415) x321 (x296 x415)))
(define-fun x109 ((x415 Int)) Int (ite (= x415 160) x452 (x208 x415)))
(define-fun x119 ((x415 Int)) Int (ite (= 192 x415) x33 (x109 x415)))
(define-fun x162 ((x415 Int)) Int (ite (= x415 224) x272 (x119 x415)))
(define-fun x47 ((x415 Int)) Int (ite (= x415 256) x353 (x162 x415)))
(define-fun x113 ((x415 Int)) Int (ite (= 128 x415) x93 (x294 x415)))
(define-fun x287 ((x415 Int)) Int (ite (= 160 x415) x422 (x299 x415)))
(define-fun x245 ((x415 Int)) Int (ite (= 192 x415) x388 (x440 x415)))
(define-fun x150 ((x415 Int)) Int (ite (= x415 224) x413 (x200 x415)))
(define-fun x419 ((x415 Int)) Int (ite (= 256 x415) x217 (x331 x415)))
(define-fun x218 ((x415 Int)) Int (ite (= 288 x415) x72 (x90 x415)))
(define-fun x84 ((x415 Int)) Int (ite (= 512 x415) x341 (x120 x415)))
(define-fun x401 ((x415 Int)) Int (ite (= x415 544) x27 (x84 x415)))
(define-fun x100 ((x415 Int)) Int (ite (= 576 x415) x445 (x401 x415)))
(define-fun x385 ((x415 Int)) Int (ite (= x415 608) x397 (x100 x415)))
(define-fun x361 ((x415 Int)) Int (ite (= x415 640) x367 (x385 x415)))
(define-fun x9 ((x415 Int)) Int (ite (= 672 x415) x402 (x361 x415)))
(define-fun x25 ((x415 Int)) Int (x59 x415))
(define-fun x303 ((x415 Int)) Int (ite (= 128 x415) x348 (x40 x415)))
(define-fun x253 ((x415 x366)) Int (ite (= x415 x221) (x358 x467) (x449 x415)))
(define-fun x56 ((x415 x366)) Int (ite x420 (x449 x415) (x253 x415)))
(define-fun x336 ((x415 Int)) Int (ite (= x415 128) x465 (x369 x415)))
(define-fun x392 ((x415 Int)) Int (ite (= x415 160) x270 (x336 x415)))
(define-fun x12 ((x415 Int)) Int (ite (= x415 192) x418 (x392 x415)))
(define-fun x237 ((x415 Int)) Int (ite (= x415 224) x87 (x12 x415)))
(define-fun x70 ((x415 Int)) Int (ite (= 256 x415) x346 (x237 x415)))
(define-fun x368 ((x415 Int)) Int (ite (= 160 x415) x453 (x57 x415)))
(define-fun x188 ((x415 Int)) Int (ite x302 (x57 x415) (x368 x415)))
(define-fun x212 ((x415 Int)) Int (ite (= x415 x111) x259 (x278 x415)))
(define-fun x340 ((x415 Int)) Int (ite x302 (x278 x415) (x212 x415)))
(define-fun x158 ((x415 Int)) Int (ite (= x415 x409) 32 (x201 x415)))
(define-fun x164 ((x415 Int)) Int (ite (= x415 x298) x142 (x158 x415)))
(define-fun x126 ((x415 Int)) Int (ite (= x104 x415) x292 (x164 x415)))
(define-fun x271 ((x415 Int)) Int (ite (= x178 x415) x345 (x82 x415)))
(define-fun x10 ((x415 Int)) Int (ite x302 (x82 x415) (x271 x415)))
(define-fun x71 ((x415 Int)) Int (ite (= x35 x415) x136 (x126 x415)))
(define-fun x364 ((x415 Int)) Int (ite x266 (x164 x415) (x71 x415)))
(define-fun x428 ((x415 Int)) Int (ite (= x415 x286) x280 (x242 x415)))
(define-fun x391 ((x85 Int)) Bool (=> (and (not (= x85 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 340282366920938463463374607431768211455 x85)) (not (= 18446744073709551615 x85)) (not (= x85 79228162514264337593543950336)) (not (= x85 4294967296)) (not (= x85 1960641893)) (not (= x85 3110348530)) (not (= 1960939212 x85)) (not (= 3547226261 x85)) (> x85 10000) (not (= x85 1461501637330902918203684832716283019655932542975)) (not (= x85 3250587425)) (not (= x85 47171411)) (not (= x85 4534642)) (not (= x85 396482575)) (not (= x85 1084754510)) (not (= 2220280665 x85)) (not (= x85 4294967295)) (not (= 1749768213 x85)) (not (= x85 18446744073709551616)) (not (= x85 2652930389)) (not (= 662108492 x85)) (not (= x85 1000000))) (not ((_ is x34) (x275 x85)))))
(assert (x355 x463))
(assert (x355 x4))
(assert (= (x358 (x34 47171411)) 47171411))
(assert (x355 x124))
(assert (x355 x163))
(assert (x355 x250))
(assert (x355 x88))
(assert (x355 x93))
(assert (x355 x305))
(assert (x355 x262))
(assert (= (x201 x262) 0))
(assert (= 1461501637330902918203684832716283019655932542975 (x358 (x34 1461501637330902918203684832716283019655932542975))))
(assert (x355 x98))
(assert (x355 x89))
(assert (=> (>= 10000 x31) (= (x275 x31) (x34 x31))))
(assert (x355 x61))
(assert (x355 x182))
(assert (= 18446744073709551616 (x358 (x34 18446744073709551616))))
(assert (=> (<= (x364 (x147 (+ 64 x262))) 10000) (= (x275 (x364 (x147 (+ x262 64)))) (x34 (x364 (x147 (+ 64 x262)))))))
(assert (x457 x437))
(assert (= (x358 (x275 x44)) x44))
(assert (x457 x170))
(assert (x355 x388))
(assert (x355 x371))
(assert (x355 x32))
(assert (x355 x37))
(assert (x391 (x364 (x147 (+ x262 32)))))
(assert (x355 x99))
(assert (= x207 (x358 (x275 x207))))
(assert (x355 x292))
(assert (x355 x138))
(assert (= (+ 1 (x358 x338)) (x358 (x304 x338 1))))
(assert (x281 x170))
(assert (x355 x335))
(assert (x457 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x355 x334))
(assert (x355 x66))
(assert (x355 x16))
(assert (x355 x426))
(assert (= x319 (x358 (x275 x319))))
(assert (x355 x239))
(assert (x355 x195))
(assert (x355 x86))
(assert (x355 x174))
(assert (x355 x414))
(assert (x355 x6))
(assert (= (x34 3110348530) (x275 3110348530)))
(assert (x355 x83))
(assert (x391 x350))
(assert (= (=> (not (< 1000000 x149)) x365) x400))
(assert (=> (>= 10000 (x364 (x147 (+ x262 160)))) (= (x275 (x364 (x147 (+ 160 x262)))) (x34 (x364 (x147 (+ x262 160)))))))
(assert (x355 x194))
(assert (x355 x389))
(assert (x355 x110))
(assert (x391 x207))
(assert (x355 x429))
(assert (x355 x35))
(assert (x355 x203))
(assert (x355 x411))
(assert (x355 x254))
(assert (x355 x309))
(assert (x457 255))
(assert (x355 x217))
(assert (=> (>= 10000 x69) (= (x275 x69) (x34 x69))))
(assert (x355 x260))
(assert (x355 x42))
(assert (x457 x168))
(assert (= 4534642 (x358 (x34 4534642))))
(assert (x355 x160))
(assert (x355 x456))
(assert (x355 x137))
(assert (x355 x45))
(assert (= (x358 (x304 x106 2)) (+ (x358 x106) 2)))
(assert (x355 x370))
(assert (= 2652930389 (x358 (x34 2652930389))))
(assert (= (x358 (x34 1084754510)) 1084754510))
(assert (= (x358 (x34 3547226261)) 3547226261))
(assert (x355 x87))
(assert (= (x275 2652930389) (x34 2652930389)))
(assert (= (x358 (x34 3250587425)) 3250587425))
(assert (= (x201 (x147 (+ x262 32))) 0))
(assert (= (x364 (x147 (+ 128 x262))) (x358 (x275 (x364 (x147 (+ 128 x262)))))))
(assert (x355 x441))
(assert (x355 x329))
(assert (= (or x238 x129) x62))
(assert (x355 x135))
(assert (x355 x330))
(assert (= (+ 2 (x358 x351)) (x358 (x304 x351 2))))
(assert (= (x275 3547226261) (x34 3547226261)))
(assert (x457 x228))
(assert (x355 x339))
(assert (x355 x390))
(assert (= (x34 1084754510) (x275 1084754510)))
(assert (x355 x398))
(assert (= (=> (and (= x319 (x449 x221)) (= x75 (= x467 (x275 x319))) (= x454 x221)) (and (=> x75 x365) (=> (and (not x75) (and (= x81 (x303 128)) (not (< 200 x61)) (= (> x81 0) x139) (= x61 (x303 128)))) (and (=> (and (not x139) (= 0 x149)) x400) (=> x139 x229))))) x38))
(assert (x355 x256))
(assert (x355 x249))
(assert (x355 x48))
(assert (= x451 (and (not x75) x191)))
(assert (= (=> (and (= x459 (x449 (x275 x134))) (= x153 (x58 1461501637330902918203684832716283019655932542975 x168)) (= x466 (= 0 x37)) (= (x449 x240) x168) (= x153 x194) (= x252 (x58 255 x459)) (= x37 (x303 128)) (= (x132 (x275 x184) (x275 x44) 0) x240) (= x63 x458) (= (x241 x372 224) x184) (= (x132 (x275 x372) (x275 x458) 0) x454) (= x252 0) (= x277 x134) (= x44 (x147 (+ 1 x250)))) (and (=> (and (and (= (x147 (+ x298 32)) x268) (= x409 (x147 (+ x286 32))) (= x416 (> x142 0)) (= x142 (x303 128)) (= x298 (x147 (+ x286 64)))) (not x466)) (and (=> x416 x318) (=> (and (not x416) (and (= x268 x89) (= 160 x326) (= 0 x144))) x67))) (=> (and x466 (= x467 (x34 0))) x38))) x193))
(assert (x355 x436))
(assert (= x458 (x358 (x275 x458))))
(assert (x355 x68))
(assert (x355 x236))
(assert (= (x34 396482575) (x275 396482575)))
(assert (x355 x354))
(assert (=> (>= 10000 x380) (= (x34 x380) (x275 x380))))
(assert (x391 x458))
(assert (x355 x186))
(assert (= (x358 (x275 (x364 (x147 (+ 192 x262))))) (x364 (x147 (+ x262 192)))))
(assert (= (x358 (x275 x31)) x31))
(assert (x355 x231))
(assert (x355 x317))
(assert (= (and x123 x264) x375))
(assert (x355 x295))
(assert (x355 x342))
(assert (x355 x310))
(assert (x457 x276))
(assert (x355 x387))
(assert (x355 x280))
(assert (x355 x170))
(assert (x355 x180))
(assert (x355 x459))
(assert (= 0 (x201 (x147 (+ x262 96)))))
(assert (x355 x396))
(assert (= (x358 (x275 x134)) x134))
(assert (x355 x258))
(assert (=> (>= 10000 x319) (= (x275 x319) (x34 x319))))
(assert (x355 x397))
(assert (x355 x36))
(assert (x355 x108))
(assert (x355 x33))
(assert (x355 x363))
(assert (x355 x173))
(assert (x355 x458))
(assert (= (x358 (x34 2220280665)) 2220280665))
(assert (x355 x410))
(assert (x457 x92))
(assert (x355 x412))
(assert (x355 x407))
(assert (x355 x300))
(assert (= x129 (and x451 x139)))
(assert (x145 x276))
(assert (= (x34 1960939212) (x275 1960939212)))
(assert (x355 x214))
(assert (x391 (x364 (x147 (+ x262 64)))))
(assert (x355 x152))
(assert (x355 x226))
(assert (=> (<= x174 10000) (= (x275 x174) (x34 x174))))
(assert (x391 x134))
(assert (= (x275 4294967296) (x34 4294967296)))
(assert (x457 x169))
(assert (x355 x216))
(assert (x355 x104))
(assert (= (or x302 x375) x446))
(assert (x355 x246))
(assert (x355 x134))
(assert (x355 x53))
(assert (= x264 true))
(assert (x355 x252))
(assert (x355 x413))
(assert (x355 x211))
(assert (= (=> (and (= x117 (x147 (+ x268 x283))) (= x312 (mod (* 32 x142) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x16 (mod x274 32)) (= (x147 (+ x286 32)) x262) (= (mod (* 64 x142) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x283) (= x326 x127) (= x280 (x213 (- x125 32))) (= (x147 (+ x312 160)) x127) (= (x213 (- x89 x286)) x125) (= x144 x142) (= x16 0) (= x32 (x428 x286)) (= x117 x89) (= x141 (>= 224 x32)) (= x274 (x428 x286))) (and (=> (= x467 (ite (>= 32 x32) (x94 (x275 (x364 x262)) 0) (ite (<= x32 64) (x132 (x275 (x364 x262)) (x275 (x364 (x147 (+ 32 x262)))) 0) (ite (<= x32 96) (x247 (x275 (x364 x262)) (x275 (x364 (x147 (+ 32 x262)))) (x275 (x364 (x147 (+ 64 x262)))) 0) (ite (<= x32 128) (x323 (x275 (x364 x262)) (x275 (x364 (x147 (+ 32 x262)))) (x275 (x364 (x147 (+ 64 x262)))) (x275 (x364 (x147 (+ 96 x262)))) 0) (ite (<= x32 160) (x1 (x275 (x364 x262)) (x275 (x364 (x147 (+ 32 x262)))) (x275 (x364 (x147 (+ 64 x262)))) (x275 (x364 (x147 (+ x262 96)))) (x275 (x364 (x147 (+ 128 x262)))) 0) (ite (>= 192 x32) (x255 (x275 (x364 x262)) (x275 (x364 (x147 (+ x262 32)))) (x275 (x364 (x147 (+ 64 x262)))) (x275 (x364 (x147 (+ x262 96)))) (x275 (x364 (x147 (+ x262 128)))) (x275 (x364 (x147 (+ 160 x262)))) 0) (ite (>= 224 x32) (x349 (x275 (x364 x262)) (x275 (x364 (x147 (+ x262 32)))) (x275 (x364 (x147 (+ x262 64)))) (x275 (x364 (x147 (+ x262 96)))) (x275 (x364 (x147 (+ x262 128)))) (x275 (x364 (x147 (+ 160 x262)))) (x275 (x364 (x147 (+ 192 x262)))) 0) (x275 x69))))))))) x38) x141)) x67))
(assert (= 1749768213 (x358 (x34 1749768213))))
(assert (x355 x276))
(assert (x457 x167))
(assert (x355 x345))
(assert (x355 x424))
(assert (x391 x98))
(assert (x355 x92))
(assert (x355 x248))
(assert (x355 x438))
(assert (= (or x62 x420) x19))
(assert (x355 x445))
(assert (x391 x39))
(assert (x355 x107))
(assert (x225 x370))
(assert (x355 x353))
(assert (x355 x301))
(assert (x355 x227))
(assert (x355 x379))
(assert (x355 x155))
(assert (x391 x69))
(assert (x355 x393))
(assert (x355 x65))
(assert (= x155 (x358 (x275 x155))))
(assert (= (x34 47171411) (x275 47171411)))
(assert (x355 x234))
(assert (x355 x116))
(assert (=> (>= 10000 (x364 (x147 (+ 32 x262)))) (= (x34 (x364 (x147 (+ 32 x262)))) (x275 (x364 (x147 (+ 32 x262)))))))
(assert (x355 x367))
(assert (x355 x122))
(assert (x355 x165))
(assert (x355 x136))
(assert (x355 x190))
(assert (x355 x348))
(assert (x355 x409))
(assert (x355 x41))
(assert (x355 x209))
(assert (= x318 (=> (and (= (x10 x325) x92) (= x387 x195) (= (x147 (+ 32 x195)) x325) (= (not (< 1 x142)) x161) (= (x340 x387) x292) (= x195 (x188 160)) (= x35 (x147 (+ 32 x268))) (= (x147 (+ x35 32)) x456) (= x104 x268) (= (x58 4294967295 x92) x136)) (and x161 (=> (and (= x144 1) (= 192 x326) (= x89 x456)) x67)))))
(assert (= (x275 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x34 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x355 x55))
(assert (= (x34 1000000) (x275 1000000)))
(assert (x355 x450))
(assert (x355 x402))
(assert (x355 x442))
(assert (x355 x437))
(assert (x355 x283))
(assert (x145 x228))
(assert (x355 x293))
(assert (= (and x75 x191) x420))
(assert (x355 x39))
(assert (= (x34 3250587425) (x275 3250587425)))
(assert (= x302 (and (not x123) x264)))
(assert (x222 x168))
(assert (x355 x43))
(assert (x457 4294967295))
(assert (x355 x434))
(assert (x355 x312))
(assert (x355 x127))
(assert (x355 x314))
(assert (x355 x111))
(assert (x355 x431))
(assert (= (x275 18446744073709551616) (x34 18446744073709551616)))
(assert (= (x358 (x275 x461)) x461))
(assert (x355 x374))
(assert (x355 x461))
(assert (= (x201 (x147 (+ 160 x262))) 0))
(assert (x355 x178))
(assert (= x350 (x358 (x275 x350))))
(assert (= x174 (x358 (x275 x174))))
(assert (x145 x437))
(assert (x355 x455))
(assert (x355 x207))
(assert (x281 x167))
(assert (x355 x319))
(assert (x355 x15))
(assert (=> (>= 10000 x461) (= (x275 x461) (x34 x461))))
(assert (x355 x63))
(assert (= x230 (or x266 x102)))
(assert (= (x358 (x275 (x364 x262))) (x364 x262)))
(assert (= (x82 x301) 0))
(assert (x391 (x364 x262)))
(assert (= (x275 2220280665) (x34 2220280665)))
(assert (= (x34 4534642) (x275 4534642)))
(assert (x355 x46))
(assert (x355 x31))
(assert (x391 x380))
(assert (x355 x81))
(assert (x391 x44))
(assert (= (x201 (x147 (+ x262 128))) 0))
(assert (x391 (x364 (x147 (+ x262 160)))))
(assert (x355 x423))
(assert (x355 x350))
(assert (x355 x381))
(assert (x355 x357))
(assert (= 0 (x278 x387)))
(assert (=> (<= (x364 x262) 10000) (= (x275 (x364 x262)) (x34 (x364 x262)))))
(assert (= (x358 (x275 (x364 (x147 (+ 160 x262))))) (x364 (x147 (+ x262 160)))))
(assert (= (x358 (x34 4294967296)) 4294967296))
(assert (x355 x146))
(assert (x391 x31))
(assert (x355 x185))
(assert (= (x358 (x275 (x364 (x147 (+ 32 x262))))) (x364 (x147 (+ x262 32)))))
(assert (x355 x220))
(assert (= 18446744073709551615 (x358 (x34 18446744073709551615))))
(assert (x355 x156))
(assert (x457 x15))
(assert (x391 (x364 (x147 (+ x262 96)))))
(assert (x355 x96))
(assert (x355 x202))
(assert (x391 x461))
(assert (x391 x155))
(assert (x355 x197))
(assert (x355 x3))
(assert (x355 x346))
(assert (x355 x263))
(assert (x355 x143))
(assert (x355 x468))
(assert (= 0 (x57 160)))
(assert (= (x275 (x358 x467)) x467))
(assert (= x192 (=> (and (and (= (div x231 4294967296) x276) (<= 0 x293) (>= x103 0) (>= x308 0) (>= 340282366920938463463374607431768211455 x308) (= (x449 x362) x389) (= x160 (x28 (x275 x380))) (= x452 (x449 x395)) (<= x380 1461501637330902918203684832716283019655932542975) (<= 0 x324) (= x206 x77) (= x233 (x28 (x275 x207))) (= x425 false) (<= 0 x426) (= x24 (x132 (x275 x31) (x275 x350) 0)) (<= x80 1461501637330902918203684832716283019655932542975) (>= x214 0) (not (= x305 3110348530)) (= x22 (x28 (x275 x155))) (= x68 x206) (= x236 x350) (= x362 (x304 x297 1)) (<= x207 1461501637330902918203684832716283019655932542975) (<= x343 1461501637330902918203684832716283019655932542975) (= (x47 256) x442) (= x216 (x47 128)) (>= 1461501637330902918203684832716283019655932542975 x398) (= (div x389 18446744073709551616) x228) (= x285 (> (x306 (x275 x380)) 0)) (>= 1461501637330902918203684832716283019655932542975 x103) (= x202 (x47 160)) (>= x343 0) (>= 1461501637330902918203684832716283019655932542975 x316) (= x103 x108) (= (x449 x362) x231) (= x183 (x449 x362)) (<= x324 1461501637330902918203684832716283019655932542975) (= x43 x426) (= x272 (x58 340282366920938463463374607431768211455 x170)) (<= 0 x233) (> x155 0) (>= x160 0) (not (= x207 x155)) (>= 1461501637330902918203684832716283019655932542975 x293) (= x321 (x449 x297)) (= x42 x128) (= (x47 192) x443) (= x39 x205) (<= x214 1461501637330902918203684832716283019655932542975) (<= x426 1461501637330902918203684832716283019655932542975) (>= x354 0) x133 (= x214 x108) (> x380 0) (= x107 x398) x285 (>= x269 0) (<= 0 x316) (>= x80 0) (= (x58 4294967295 x228) x353) (not (> 1749768213 x305)) (not (= x380 x155)) (= x18 false) (>= 4294967295 x269) (not (= x207 x380)) (>= 1461501637330902918203684832716283019655932542975 x77) (<= 0 x22) (<= 0 x77) (not (> 2652930389 x305)) (= x239 x324) (= x106 x395) (>= 4294967295 x354) (<= x155 1461501637330902918203684832716283019655932542975) (> x45 0) (= 47171411 x137) (= (div x183 79228162514264337593543950336) x170) (= x128 0) (= x130 (< 0 (x306 (x275 x207)))) (= (> (x306 (x275 x155)) 0) x133) (= (x47 224) x436) (= x297 (x304 x106 2)) (= x332 false) (> 3547226261 x305) (= (x58 4294967295 x276) x33) (= x80 x165) (= 3250587425 x305) (= 2 x223) (= false x91) (not (> 3110348530 x305)) x130 (= x45 (x306 (x275 x155))) (<= 0 x398) (> x207 0) (= x316 x423) (= x106 (x132 (x275 x39) x24 0)) (= x31 x441)) (and (and (= (not (= x429 x373)) x5) (= (= x424 x411) x199) (= x220 x152) (< x66 396482575) x198 (= x258 x88) (= (= x300 x396) x406) (= x363 (x147 (+ x267 x378))) (or (and (<= x96 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x211 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x211 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x96)) (> x96 x211))) (not (> 4 x96)) (= (not (= x430 x182)) x198) (= x235 x2) (not (= 4534642 x66)) (= x329 x122) x199 x327 (= x152 x182) (= (mod (* 32 x348) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x468) (= 0 x173) (= x197 x376) (= x13 (= x46 x235)) x344 (= x173 (ite x49 1 0)) (= x8 (> x453 18446744073709551615)) (= (x58 115792089237316195423570985008687907853269984665640564039457584007913129639904 x370) x371) (= x234 x424) (= x290 x7) (= x448 x88) (= x295 x431) (and (> x96 67) (= true (<= x96 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x7 x36) (= x411 x122) (not (< x96 x363)) (<= 0 x342) (= x2 x393) (= (x147 (+ 4 x463)) x379) (= x176 x314) (= x65 0) (= x66 47171411) (= x373 x20) (= (= x258 x412) x327) (= x337 (> 128 x453)) (= (x213 (- x96 4)) x121) (= x370 (x147 (+ x124 31))) (= x65 x447) (= x309 x333) (= (x306 (x275 x155)) x99) (= x197 x396) (= x107 x194) x13 (<= 0 x176) (= x334 x372) (< 0 x99) (= x73 (not (= x295 x444))) (>= 1461501637330902918203684832716283019655932542975 x342) (not (or (and (< x121 64) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x121) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x121))) (= x455 x372) (= (x147 (+ 128 x371)) x453) (< x66 1749768213) (= (= x220 x333) x166) (= x344 (= x257 x290)) (= (x147 (+ x379 31)) x211) (= x20 x257) (= x309 x381) (not (< 18446744073709551615 x463)) (= x124 (x147 (+ x468 32))) (= x115 x300) (= x205 x429) (= (x59 x379) x348) (not (> x348 18446744073709551615)) (= x430 x205) (< x66 1084754510) (= x378 (mod (* 64 x348) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (< x267 x363) x123) (<= x194 1461501637330902918203684832716283019655932542975) (= x49 (or x337 x8)) (= x431 x46) (= 128 x263) (> 662108492 x66) (= x403 x412) x5 (= (x147 (+ x379 32)) x267) (= x205 x444) (<= 0 x194) x73 (= x314 x394) (<= x176 1461501637330902918203684832716283019655932542975) x166 x406) (and (= x381 (x9 512)) (not (or (and (> 64 x226) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x226) true)) (> x226 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x447 x189) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x390) (and (< x390 64) (= (<= x390 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x402 (x218 288)) (= (x113 128) x341) (= x434 x86) (= 192 x315) (= 192 x450) (<= 0 x260) (= (x306 (x275 x155)) x317) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374)) (> 192 x374)) (> x374 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x213 (- x96 4)) x374) (>= 1461501637330902918203684832716283019655932542975 x260) (not (= 1960641893 x185)) (= (x9 640) x36) (< x185 2220280665) (= (x213 (- x96 68)) x390) (= x376 (x9 672)) (>= 1461501637330902918203684832716283019655932542975 x177) (<= x434 1461501637330902918203684832716283019655932542975) (= x394 x86) (= (x213 (- x96 132)) x226) (not (> 1749768213 x185)) (= (x419 256) x367) (= x448 (x9 608)) (= x27 (x287 160)) (= 128 x288) (= x189 0) (= x107 x260) (= 256 x180) (= (x9 544) x329) (< 0 x317) (not (< x96 4)) (= (x9 576) x393) (= 128 x186) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x96)) (> x96 195)) (< x185 2652930389) (>= x177 0) (>= x434 0) (= 1960939212 x185) (= x17 x216) (= (x245 192) x445) (not (< x185 1960641893)) (= 256 x310) (= x224 x202) (= (x150 224) x397)))) (and (=> (and (= x286 x453) (not x123)) x193) (=> x123 x175)))))
(assert (= x408 (and x446 x466)))
(assert (= (x358 (x34 79228162514264337593543950336)) 79228162514264337593543950336))
(assert (=> (>= 10000 (x364 (x147 (+ 128 x262)))) (= (x34 (x364 (x147 (+ 128 x262)))) (x275 (x364 (x147 (+ 128 x262)))))))
(assert (x355 x168))
(assert (x355 x394))
(assert (= (x358 (x275 x98)) x98))
(assert (= (x358 (x275 x372)) x372))
(assert (=> (>= 10000 x207) (= (x275 x207) (x34 x207))))
(assert (x355 x378))
(assert (= x229 (=> (and (= (x303 128) x335) (= x209 x438) (> x335 0) (= x53 (x213 (- 18446744073709551615 x438))) (not (= x105 0)) (= x135 (x303 128)) (= x179 (x188 160)) (= x105 (x58 4294967295 x169)) (= (x147 (+ x179 32)) x301) (= (x58 4294967295 x169) x438) (not (> 0 x53)) (= x169 (x10 x301)) (= x404 (not (> x135 1)))) (and (=> (= x149 x209) x400) x404))))
(assert (x391 x372))
(assert (x355 x257))
(assert (x145 x92))
(assert (x355 x183))
(assert (x355 x269))
(assert (x355 x274))
(assert (x355 x427))
(assert (x355 x179))
(assert (x355 x118))
(assert (x355 x228))
(assert (x355 x430))
(assert (x355 x27))
(assert (x355 x20))
(assert (x355 x144))
(assert (x355 x7))
(assert (x457 340282366920938463463374607431768211455))
(assert (x355 x298))
(assert (=> (<= (x364 (x147 (+ 192 x262))) 10000) (= (x34 (x364 (x147 (+ 192 x262)))) (x275 (x364 (x147 (+ 192 x262)))))))
(assert (=> (<= x155 10000) (= (x275 x155) (x34 x155))))
(assert (x355 x372))
(assert (x355 x153))
(assert (x355 x142))
(assert (x355 x205))
(assert (x355 x103))
(assert (x457 x459))
(assert (x355 x169))
(assert (= (=> (and (= x453 x111) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x414)) (> 64 x414)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x414))) (= (x147 (+ 32 x383)) x76) (= (x59 x143) x259) (= x178 (x147 (+ x453 32))) (= x143 x267) (= (x59 x383) x345) (= (< 18446744073709551615 x313) x435) (= x414 (x213 (- x96 x267))) (= (x147 (+ x453 64)) x313) (= x74 (not (> x363 x76))) (>= 4294967295 x345) (= (> x453 x313) x464) (= x386 (or x435 x464)) (= x383 (x147 (+ 32 x267))) (= (ite x386 1 0) x421) (= x421 0)) (and x74 (=> (= x286 x313) x193))) x175))
(assert (x355 x421))
(assert (x391 x184))
(assert (= (x34 1749768213) (x275 1749768213)))
(assert (x355 x224))
(assert (x391 x174))
(assert (= (+ (x358 x297) 1) (x358 (x304 x297 1))))
(assert (x355 x343))
(assert (x355 x380))
(assert (x355 x172))
(assert (x457 1461501637330902918203684832716283019655932542975))
(assert (=> (<= x134 10000) (= (x34 x134) (x275 x134))))
(assert (x355 x333))
(assert (= 662108492 (x358 (x34 662108492))))
(assert (x355 x189))
(assert (x355 x290))
(assert (= (x358 (x275 (x364 (x147 (+ 64 x262))))) (x364 (x147 (+ 64 x262)))))
(assert (x355 x268))
(assert (= (x34 18446744073709551615) (x275 18446744073709551615)))
(assert (= (x358 (x34 4294967295)) 4294967295))
(assert (= (x34 4294967295) (x275 4294967295)))
(assert (x355 x233))
(assert (= (x358 (x34 1960939212)) 1960939212))
(assert (x355 x128))
(assert (x355 x125))
(assert (= (x358 (x34 1000000)) 1000000))
(assert (= (x201 (x147 (+ x262 192))) 0))
(assert (=> (<= x98 10000) (= (x275 x98) (x34 x98))))
(assert (x355 x114))
(assert (x355 x282))
(assert (= x380 (x358 (x275 x380))))
(assert (x355 x206))
(assert (x355 x80))
(assert (x355 x184))
(assert (=> (<= x372 10000) (= (x34 x372) (x275 x372))))
(assert (= (x364 (x147 (+ 96 x262))) (x358 (x275 (x364 (x147 (+ x262 96)))))))
(assert (x355 x223))
(assert (= (x34 79228162514264337593543950336) (x275 79228162514264337593543950336)))
(assert (= (x358 (x34 1960641893)) 1960641893))
(assert (x355 x443))
(assert (x355 x270))
(assert (= (x34 340282366920938463463374607431768211455) (x275 340282366920938463463374607431768211455)))
(assert (x355 x452))
(assert (= 3110348530 (x358 (x34 3110348530))))
(assert (x355 x273))
(assert (x355 x359))
(assert (x355 x324))
(assert (x355 x121))
(assert (x355 x325))
(assert (x355 x447))
(assert (x145 x15))
(assert (x355 x399))
(assert (= (x34 662108492) (x275 662108492)))
(assert (x355 x44))
(assert (=> (>= 10000 x458) (= (x34 x458) (x275 x458))))
(assert (= (x275 1461501637330902918203684832716283019655932542975) (x34 1461501637330902918203684832716283019655932542975)))
(assert (x355 x22))
(assert (x355 x177))
(assert (= x266 (and x284 (not x416))))
(assert (=> (<= (x364 (x147 (+ x262 96))) 10000) (= (x34 (x364 (x147 (+ x262 96)))) (x275 (x364 (x147 (+ x262 96)))))))
(assert (x457 x370))
(assert (x355 x448))
(assert (x355 x418))
(assert (= (or x230 x408) x191))
(assert (x355 x403))
(assert (x244 x459))
(assert (x355 x149))
(assert (x355 x288))
(assert (x355 x112))
(assert (x355 x72))
(assert (= (x358 (x275 x184)) x184))
(assert (= 0 (x82 x325)))
(assert (= (x358 (x275 x69)) x69))
(assert (x355 x17))
(assert (x355 x308))
(assert (x355 x313))
(assert (=> (<= x39 10000) (= (x275 x39) (x34 x39))))
(assert (x355 x131))
(assert (x355 x21))
(assert (x355 x105))
(assert (x355 x341))
(assert (=> (>= 10000 x350) (= (x275 x350) (x34 x350))))
(assert (= (x275 1960641893) (x34 1960641893)))
(assert (x355 x277))
(assert (= (x241 x372 224) (div x372 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (= x284 (and x446 (not x466))))
(assert (x355 x272))
(assert (x355 x267))
(assert (= x102 (and x416 x284)))
(assert (x355 x259))
(assert (x355 x117))
(assert (x355 x235))
(assert (=> (<= x44 10000) (= (x34 x44) (x275 x44))))
(assert (= x365 (=> (and (and (= x248 x407) (= 0 x399) (<= 0 x4) (= x167 (div x6 79228162514264337593543950336)) (= x190 (x56 x377)) (> 3547226261 x254) (>= x204 0) (= x351 x171) (= (x56 x171) x270) (= (x132 (x275 x98) (x275 x174) 0) x261) (= (x70 160) x55) (not (< x254 3110348530)) (= x15 (div x138 18446744073709551616)) (<= x204 340282366920938463463374607431768211455) (= x236 x174) (<= 0 x282) (= (x70 224) x156) (<= 0 x116) (not (= x254 3110348530)) (= 3250587425 x254) (= x338 (x304 x351 2)) (= x146 x399) (<= 0 x357) (>= x330 0) (not (< x254 2652930389)) (= x437 (div x190 4294967296)) (= x465 (x56 x338)) (>= 4294967295 x116) (= x407 x4) (>= 1461501637330902918203684832716283019655932542975 x4) (= (x70 192) x41) (< 0 x54) (= (x70 128) x48) (not (> 1749768213 x254)) (= (x56 x377) x6) (= x377 (x304 x338 1)) (= x87 (x58 340282366920938463463374607431768211455 x167)) (= x138 (x56 x377)) (= x418 (x58 4294967295 x437)) (= x98 x441) (= x461 x205) (= (x58 4294967295 x15) x346) (>= 1461501637330902918203684832716283019655932542975 x330) (= x54 (x306 (x275 x155))) (= (x70 256) x427) (>= 1461501637330902918203684832716283019655932542975 x282) (= x351 (x132 (x275 x461) x261 0)) (= x282 x239) (>= 4294967295 x357)) (and (= x48 x410) (= x83 x436) (= x157 (= x256 x83)) (= x227 x55) (= x256 x156))) x157)))
(assert (x355 x376))
(assert (x355 x326))
(assert (x355 x167))
(assert (x355 x453))
(assert (x355 x286))
(assert (x355 x69))
(assert (x391 (x364 (x147 (+ 128 x262)))))
(assert (= (x358 (x34 396482575)) 396482575))
(assert (x355 x204))
(assert (x355 x465))
(assert (x355 x383))
(assert (x355 x373))
(assert (= (x358 (x34 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x355 x321))
(assert (= (x201 (x147 (+ x262 64))) 0))
(assert (x355 x115))
(assert (x355 x2))
(assert (x355 x316))
(assert (x355 x422))
(assert (x391 (x364 (x147 (+ 192 x262)))))
(assert (x355 x315))
(assert (x145 x169))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x358 (x34 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= (x358 (x275 x39)) x39))
(assert (=> (<= x184 10000) (= (x275 x184) (x34 x184))))
(assert (x355 x76))
(assert (x355 x444))
(assert (x391 x319))
(assert (x355 x54))
(assert (x355 x77))
(assert (not x192))
(assert (x355 x176))
(assert (= (and (not x139) x451) x238))
(check-sat)
(exit)