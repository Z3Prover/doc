(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x289 0)) (((x367 (x355 Int)) (x200 (x29 x289) (x92 x289) (x37 Int)) (x388 (x253 x289) (x84 Int)) (x226 (x213 x289) (x377 x289) (x70 x289) (x348 x289) (x344 x289) (x61 Int)))))
(declare-fun x144 () Int)
(declare-fun x142 () Int)
(declare-fun x211 () Int)
(declare-fun x252 () Int)
(declare-fun x194 (Int Int) Int)
(declare-fun x34 () Int)
(declare-fun x376 () Int)
(declare-fun x278 () Int)
(declare-fun x154 () x289)
(declare-fun x168 () x289)
(declare-fun x129 () Int)
(declare-fun x96 () Int)
(declare-fun x254 () Int)
(declare-fun x186 () Int)
(declare-fun x359 () Bool)
(declare-fun x279 () Int)
(declare-fun x340 () Bool)
(declare-fun x290 () Int)
(declare-fun x51 (Int) Int)
(declare-fun x183 () Int)
(declare-fun x310 () Int)
(declare-fun x40 () Int)
(declare-fun x12 () Int)
(declare-fun x114 () Int)
(declare-fun x54 () Int)
(declare-fun x101 () x289)
(declare-fun x63 () Int)
(declare-fun x62 () Bool)
(declare-fun x316 () Int)
(declare-fun x156 () Int)
(declare-fun x265 () Bool)
(declare-fun x41 () Bool)
(declare-fun x50 () Int)
(declare-fun x143 () Bool)
(declare-fun x275 () Int)
(declare-fun x212 () Bool)
(declare-fun x188 () Int)
(declare-fun x385 () Bool)
(declare-fun x336 () Bool)
(declare-fun x48 () Int)
(declare-fun x272 () x289)
(declare-fun x313 () Bool)
(declare-fun x177 () Int)
(declare-fun x263 () Int)
(declare-fun x164 () Int)
(declare-fun x4 () Int)
(declare-fun x266 () Int)
(declare-fun x98 () Int)
(declare-fun x239 () Int)
(declare-fun x293 () x289)
(declare-fun x69 () x289)
(declare-fun x160 () x289)
(declare-fun x58 () Int)
(declare-fun x370 () Int)
(declare-fun x17 () Int)
(declare-fun x127 () Int)
(declare-fun x264 () Bool)
(declare-fun x113 () Int)
(declare-fun x18 () Int)
(declare-fun x372 () Bool)
(declare-fun x39 () Bool)
(declare-fun x258 () Bool)
(declare-fun x302 () Bool)
(declare-fun x10 () Bool)
(declare-fun x361 () Bool)
(declare-fun x282 () Int)
(declare-fun x181 () x289)
(declare-fun x105 () Int)
(declare-fun x374 () Int)
(declare-fun x189 () x289)
(declare-fun x324 () Int)
(declare-fun x206 () Bool)
(declare-fun x67 () Int)
(declare-fun x36 () Bool)
(declare-fun x167 () Bool)
(declare-fun x192 () Int)
(declare-fun x298 () x289)
(declare-fun x90 () Int)
(declare-fun x35 () Int)
(declare-fun x204 () x289)
(declare-fun x216 () x289)
(declare-fun x157 () Int)
(declare-fun x236 () Int)
(declare-fun x85 () Int)
(declare-fun x299 () Bool)
(declare-fun x77 () Int)
(declare-fun x242 (Int Int) Int)
(declare-fun x288 () Int)
(declare-fun x60 () Bool)
(declare-fun x203 () Int)
(declare-fun x315 () Int)
(declare-fun x174 () Int)
(declare-fun x271 () Int)
(declare-fun x103 () Int)
(declare-fun x112 () Int)
(declare-fun x100 () Int)
(declare-fun x180 () Int)
(declare-fun x83 () x289)
(declare-fun x65 () Int)
(declare-fun x30 () Int)
(declare-fun x81 () Int)
(declare-fun x16 () Int)
(declare-fun x378 () Int)
(declare-fun x88 () Int)
(declare-fun x162 () Bool)
(declare-fun x246 () Int)
(declare-fun x115 () x289)
(declare-fun x2 () Int)
(declare-fun x214 () Bool)
(declare-fun x260 () Bool)
(declare-fun x321 () Int)
(declare-fun x331 () Int)
(declare-fun x1 () Int)
(declare-fun x126 () x289)
(declare-fun x387 () Int)
(declare-fun x350 () Int)
(declare-fun x26 () Int)
(declare-fun x362 () x289)
(declare-fun x32 () Int)
(declare-fun x137 () Bool)
(declare-fun x312 () Int)
(declare-fun x45 () Bool)
(declare-fun x128 () x289)
(declare-fun x146 () x289)
(declare-fun x121 () Bool)
(declare-fun x269 () Int)
(declare-fun x178 () Bool)
(declare-fun x185 () Int)
(declare-fun x122 () Bool)
(declare-fun x247 () Bool)
(declare-fun x78 () Int)
(declare-fun x111 () Int)
(declare-fun x175 (Int Int) Int)
(declare-fun x110 () Int)
(declare-fun x72 () x289)
(declare-fun x43 () Bool)
(declare-fun x220 () Int)
(declare-fun x64 () Int)
(declare-fun x20 () Int)
(declare-fun x38 () Int)
(declare-fun x80 () Int)
(declare-fun x66 () Bool)
(declare-fun x346 () x289)
(declare-fun x91 () x289)
(declare-fun x244 () Int)
(declare-fun x343 () Int)
(declare-fun x165 () x289)
(declare-fun x358 () Int)
(declare-fun x267 () Int)
(declare-fun x93 () Bool)
(declare-fun x317 () Int)
(declare-fun x291 (Int) Int)
(declare-fun x184 () Bool)
(declare-fun x256 () Int)
(declare-fun x94 () Bool)
(declare-fun x73 () Int)
(declare-fun x191 () Bool)
(declare-fun x139 () Int)
(declare-fun x171 () Bool)
(declare-fun x333 () x289)
(declare-fun x23 () Bool)
(declare-fun x286 (x289) Int)
(declare-fun x224 () Int)
(declare-fun x79 () Int)
(declare-fun x232 (Int Int) Int)
(declare-fun x6 () x289)
(declare-fun x296 () Bool)
(declare-fun x308 () Bool)
(declare-fun x52 () x289)
(declare-fun x149 () Int)
(declare-fun x251 () Int)
(declare-fun x136 () Bool)
(declare-fun x117 () Int)
(declare-fun x13 () Int)
(declare-fun x21 () Int)
(declare-fun x318 () x289)
(declare-fun x284 () Int)
(declare-fun x363 () Int)
(declare-fun x390 () x289)
(declare-fun x391 () Int)
(declare-fun x225 () Bool)
(declare-fun x270 () Bool)
(declare-fun x176 () Bool)
(declare-fun x82 () Int)
(declare-fun x341 () Int)
(declare-fun x283 () Bool)
(declare-fun x179 () Int)
(declare-fun x371 () Int)
(declare-fun x130 () Int)
(declare-fun x273 (x289) Int)
(declare-fun x335 () Int)
(declare-fun x75 () x289)
(declare-fun x104 () Bool)
(declare-fun x356 () Bool)
(declare-fun x301 () Int)
(declare-fun x250 () Bool)
(declare-fun x116 () x289)
(declare-fun x207 () Int)
(declare-fun x369 () Bool)
(declare-fun x218 () Int)
(declare-fun x148 () x289)
(declare-fun x27 () Int)
(declare-fun x172 () Int)
(declare-fun x337 () x289)
(declare-fun x145 () Int)
(declare-fun x89 () Int)
(declare-fun x230 () Int)
(declare-fun x354 () Int)
(declare-fun x304 () x289)
(declare-fun x3 (x289) Int)
(declare-fun x135 () Bool)
(declare-fun x347 () Bool)
(declare-fun x292 () Bool)
(declare-fun x56 (x289) Int)
(declare-fun x383 (Int) x289)
(declare-fun x19 () Int)
(declare-fun x382 () Bool)
(declare-fun x327 () Bool)
(declare-fun x24 () x289)
(declare-fun x274 () Bool)
(declare-fun x245 () Int)
(declare-fun x28 () Int)
(declare-fun x161 () Int)
(declare-fun x262 () Int)
(declare-fun x243 () Bool)
(declare-fun x22 () Int)
(declare-fun x345 () Int)
(declare-fun x134 () x289)
(declare-fun x107 () Bool)
(declare-fun x120 () Bool)
(declare-fun x386 () x289)
(declare-fun x9 () Int)
(declare-fun x325 () Int)
(declare-fun x87 () x289)
(declare-fun x152 () Int)
(declare-fun x33 () Int)
(declare-fun x108 () Int)
(declare-fun x109 () Int)
(declare-fun x76 () Int)
(declare-fun x147 () Int)
(declare-fun x97 () Int)
(declare-fun x169 () Int)
(declare-fun x248 () Int)
(declare-fun x237 () Int)
(declare-fun x364 () Int)
(declare-fun x59 () Int)
(declare-fun x187 () Bool)
(declare-fun x15 () Int)
(declare-fun x368 (x289) Int)
(declare-fun x71 () Int)
(declare-fun x389 () Int)
(declare-fun x339 () Int)
(declare-fun x309 () Bool)
(declare-fun x257 () Int)
(declare-fun x234 () Int)
(declare-fun x131 () Int)
(declare-fun x231 () Int)
(declare-fun x351 () x289)
(declare-fun x86 () Int)
(declare-fun x190 () Bool)
(declare-fun x140 () Int)
(declare-fun x295 () Int)
(declare-fun x338 () x289)
(declare-fun x202 () Int)
(declare-fun x330 (Int) Int)
(declare-fun x319 () Int)
(declare-fun x159 () Int)
(declare-fun x322 () Int)
(declare-fun x241 () Bool)
(declare-fun x133 () Bool)
(declare-fun x384 () Int)
(declare-fun x305 () Bool)
(declare-fun x219 () Bool)
(declare-fun x210 (x289) Int)
(declare-fun x201 () Int)
(declare-fun x342 () Bool)
(declare-fun x132 () Int)
(declare-fun x222 () Bool)
(declare-fun x320 () Bool)
(declare-fun x124 () Int)
(declare-fun x49 () Int)
(declare-fun x228 (x289) Int)
(declare-fun x329 () Bool)
(declare-fun x25 () Bool)
(declare-fun x380 () Int)
(declare-fun x353 () Int)
(declare-fun x328 () Int)
(declare-fun x106 () Bool)
(declare-fun x123 () Int)
(declare-fun x163 () x289)
(declare-fun x323 () Bool)
(declare-fun x261 () Bool)
(declare-fun x193 () Bool)
(declare-fun x53 () Int)
(declare-fun x276 () Int)
(declare-fun x46 () Int)
(declare-fun x375 () Int)
(declare-fun x255 () Int)
(declare-fun x221 () Int)
(declare-fun x196 () Int)
(declare-fun x182 () Int)
(declare-fun x357 () x289)
(declare-fun x150 () Int)
(declare-fun x99 () Int)
(declare-fun x55 () Int)
(declare-fun x268 () Bool)
(declare-fun x215 () Int)
(declare-fun x68 () Int)
(declare-fun x297 () x289)
(declare-fun x119 () Int)
(declare-fun x31 () Int)
(declare-fun x334 (Int Int) Int)
(declare-fun x166 () Int)
(declare-fun x8 () Int)
(declare-fun x381 (x289) Int)
(declare-fun x259 () x289)
(declare-fun x11 () Int)
(declare-fun x229 () Int)
(declare-fun x332 () Int)
(declare-fun x285 () Int)
(declare-fun x47 () Bool)
(declare-fun x240 () Int)
(declare-fun x326 () Int)
(declare-fun x125 () Int)
(declare-fun x306 () Int)
(declare-fun x307 () Int)
(declare-fun x249 () Int)
(declare-fun x173 () Bool)
(declare-fun x287 () Int)
(declare-fun x360 () Int)
(declare-fun x153 () Bool)
(declare-fun x205 (Int Int) Int)
(declare-fun x294 () Int)
(declare-fun x235 () Int)
(define-fun x118 ((x289 x289) (x379 Int)) x289 (ite ((_ is x388) x289) (x388 (x253 x289) (+ (x84 x289) x379)) (ite ((_ is x226) x289) (x226 (x213 x289) (x377 x289) (x70 x289) (x348 x289) (x344 x289) (+ (x61 x289) x379)) (ite ((_ is x200) x289) (x200 (x29 x289) (x92 x289) (+ x379 (x37 x289))) (x367 (+ x379 (x355 x289)))))))
(define-fun x223 ((x303 Int)) Int (ite (and (<= 0 x303) (< x303 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x303 (- x303 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x233 ((x303 Int)) Int (ite (and (< x303 0) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x303)) (+ x303 115792089237316195423570985008687907853269984665640564039457584007913129639936) x303))
(define-fun x14 ((x151 Int)) Bool (and (< x151 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x151)))
(define-fun x170 ((x151 Int)) Bool (and (= (x175 115792089237316195423570985008687907853269984665640564039457584007913129639935 x151) x151) (= (x175 x151 115792089237316195423570985008687907853269984665640564039457584007913129639935) x151)))
(define-fun x227 ((x151 Int)) Bool (and (= 0 (x175 x151 0)) (= 0 (x175 0 x151))))
(define-fun x238 ((x151 Int)) Bool (= x151 (x175 x151 x151)))
(define-fun x277 ((x151 Int)) Bool (and (x238 x151) (x170 x151) (x227 x151)))
(define-fun x208 ((x151 Int) (x57 Int)) Bool (= (x175 x151 x57) (x175 x57 x151)))
(define-fun x365 ((x151 Int) (x57 Int)) Bool (and (=> (<= 0 x151) (>= x151 (x175 x151 x57))) (<= 0 (x175 x151 x57)) (=> (<= 0 x57) (>= x57 (x175 x151 x57)))))
(define-fun x42 ((x151 Int) (x57 Int)) Bool (and (x365 x151 x57) (x208 x151 x57)))
(define-fun x280 ((x151 Int)) Bool (= (x175 x151 255) (mod x151 256)))
(define-fun x102 ((x151 Int)) Bool (and (x280 x151) (x42 x151 255)))
(define-fun x44 ((x151 Int)) Bool (and (= (x205 x151 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x205 115792089237316195423570985008687907853269984665640564039457584007913129639935 x151) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x74 ((x151 Int)) Bool (and (= x151 (x205 0 x151)) (= x151 (x205 x151 0))))
(define-fun x138 ((x151 Int)) Bool (= x151 (x205 x151 x151)))
(define-fun x195 ((x151 Int)) Bool (and (x74 x151) (x44 x151) (x138 x151)))
(define-fun x373 ((x151 Int) (x57 Int)) Bool (= (x205 x57 x151) (x205 x151 x57)))
(define-fun x158 ((x151 Int) (x57 Int)) Bool (and (=> (>= x57 0) (<= x57 (x205 x151 x57))) (<= (x205 x151 x57) (+ x57 x151)) (=> (>= x151 0) (>= (x205 x151 x57) x151))))
(define-fun x95 ((x151 Int) (x57 Int)) Bool (and (x373 x151 x57) (x158 x151 x57)))
(define-fun x300 ((x151 Int)) Bool (= (mod x151 1461501637330902918203684832716283019655932542976) (x175 x151 1461501637330902918203684832716283019655932542975)))
(define-fun x198 ((x151 Int)) Bool (and (x300 x151) (x42 x151 1461501637330902918203684832716283019655932542975)))
(define-fun x7 ((x349 Int)) Int (x291 x349))
(define-fun x197 ((x349 Int)) Int (ite (= x349 160) x263 (x330 x349)))
(define-fun x141 ((x349 Int)) Int (ite (= x349 192) x192 (x197 x349)))
(define-fun x352 ((x349 Int)) Int (ite (= x349 212) x8 (x141 x349)))
(define-fun x5 ((x349 Int)) Int (ite (= 128 x349) 84 (x352 x349)))
(define-fun x217 ((x349 Int)) Int (ite (= 244 x349) x97 (x5 x349)))
(define-fun x155 ((x349 Int)) Int (ite (and (<= 276 x349) (< x349 (+ x156 276))) (x291 (+ x63 (- x349 276))) (x217 x349)))
(define-fun x366 ((x349 Int)) Int (ite (= x349 x325) 0 (x155 x349)))
(define-fun x281 ((x349 Int)) Int (ite (= x349 x110) 31029940780905195875731109435447583271917780249877154904291146747782681853952 (x366 x349)))
(define-fun x209 ((x349 Int)) Int (ite (= x349 x46) x65 (x281 x349)))
(define-fun x311 ((x349 Int)) Int (ite (= x255 x349) x245 (x209 x349)))
(define-fun x199 ((x349 x289)) Int (ite (= x75 x349) x326 (x273 x349)))
(define-fun x314 ((x151 Int)) Bool (=> (and (not (= x151 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 1315048582 x151)) (< 10000 x151) (not (= x151 1150964472)) (not (= 475336206 x151)) (not (= x151 115792089237316195423570985008687907853269984665640564039457584007913129639934)) (not (= x151 961581905)) (not (= x151 941162192)) (not (= x151 752823349)) (not (= x151 2494227977)) (not (= x151 910484757)) (not (= x151 18446744073709551615)) (not (= 1461501637330902918203684832716283019655932542975 x151)) (not (= 1245659826 x151)) (not (= 832554005 x151)) (not (= 1451294997 x151)) (not (= x151 292666793)) (not (= 464684736 x151)) (not (= 2510660263 x151)) (not (= 31029940780905195875731109435447583271917780249877154904291146747782681853952 x151)) (not (= x151 2544733239))) (not ((_ is x367) (x383 x151)))))
(assert (x314 x350))
(assert (x14 x218))
(assert (=> (>= 10000 x150) (= (x367 x150) (x383 x150))))
(assert (= 2494227977 (x3 (x367 2494227977))))
(assert (x14 x16))
(assert (x14 x103))
(assert (= x244 (x3 (x383 x244))))
(assert (x14 x20))
(assert (x14 x262))
(assert (=> (>= 10000 x380) (= (x367 x380) (x383 x380))))
(assert (x14 x186))
(assert (= x222 (or x305 (and (not x36) x137))))
(assert (x14 x54))
(assert (= (and x39 (not x184)) x167))
(assert (x14 x40))
(assert (=> (<= x203 10000) (= (x383 x203) (x367 x203))))
(assert (x14 x174))
(assert (= 0 (x330 276)))
(assert (x14 x230))
(assert (x14 x147))
(assert (x14 x188))
(assert (= (x3 (x383 x105)) x105))
(assert (= (x383 464684736) (x367 464684736)))
(assert (x14 x76))
(assert (= x135 true))
(assert (x14 x370))
(assert (x14 x130))
(assert (x14 x73))
(assert (=> (>= 10000 x245) (= (x367 x245) (x383 x245))))
(assert (x14 x251))
(assert (= 31029940780905195875731109435447583271917780249877154904291146747782681853952 (x3 (x367 31029940780905195875731109435447583271917780249877154904291146747782681853952))))
(assert (x314 x229))
(assert (x14 x341))
(assert (= x243 (=> (and (and (and (<= 0 x4) (= x4 (x56 x91)) (>= 1461501637330902918203684832716283019655932542975 x244) (< x86 2494227977) (< 0 x26) (not (= x86 292666793)) (= x254 x180) (= x146 (x200 (x383 x244) (x367 1) 0)) (= x183 x244) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (not (= x86 464684736)) (= x32 x105) (= x4 x81) (= (x118 x69 2) x91) (= x86 1315048582) (not (= 752823349 x86)) (= (x200 (x383 x105) x146 0) x69) (= x26 (x228 (x383 x350)))) (and (and (= (< x180 x315) x121) (= x32 x38) (<= x360 1461501637330902918203684832716283019655932542975) (= (x200 (x383 x38) x259 0) x126) (= x259 (x200 (x383 x360) (x367 1) 0)) (= x99 x312) (= x183 x360) (< 0 x295) (<= 0 x312) (= (x368 x126) x312) (= x315 x81) (= x295 (x228 (x383 x350))) (not (= 2494227977 x267)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x312) (not (< x267 2494227977)) (= x267 2510660263)) (and (and (and (= 0 x202) (= (or x250 x121) x45) (= (= x285 0) x361) (= x285 x207) (= (and x107 x361) x250)) (and (= x272 (x118 x181 2)) (= (= 0 x186) x171) (not (= 752823349 x96)) (= (x56 x272) x211) (not (= x96 292666793)) (not (= 464684736 x96)) (= (x200 (x383 x109) (x367 1) 0) x160) (= x183 x109) (< 0 x252) (= x211 x207) (<= 0 x211) (= x32 x215) (= x186 x269) (> 2494227977 x96) (= x96 1315048582) (<= x109 1461501637330902918203684832716283019655932542975) (= (x228 (x383 x350)) x252) (= x278 0) (<= x211 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (and x41 x171) x107) (= x181 (x200 (x383 x215) x160 0)))) (and (= 2544733239 x11) (not (< x11 2494227977)) (= x99 x343) (= x32 x112) (< 0 x17) (= (= x343 0) x41) (= x269 x391) (= (x200 (x383 x316) (x367 1) 0) x297) (= (x118 x87 1) x154) (= x183 x316) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391) (not (= x11 2494227977)) (<= x316 1461501637330902918203684832716283019655932542975) (= x188 0) (= x87 (x200 (x383 x112) x297 0)) (= x391 (x210 x154)) (= (x228 (x383 x350)) x17) (<= 0 x391) (not (= x11 2510660263)))))) (and (not (= x82 2494227977)) (<= x240 1461501637330902918203684832716283019655932542975) (not (= 0 x161)) (= x254 x79) (= x79 (x210 x333)) (not (= 2510660263 x82)) (< 0 x140) (= x32 x203) (= x140 (x228 (x383 x350))) (<= x79 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x200 (x383 x240) (x367 1) 0) x72) (= x333 (x118 x116 1)) (<= 0 x79) (= x82 2544733239) (= x116 (x200 (x383 x203) x72 0)) (not (< x82 2494227977)) (= x183 x240))) x45)))
(assert (= (or x329 x104) x137))
(assert (x14 x363))
(assert (x14 x376))
(assert (=> (<= x244 10000) (= (x383 x244) (x367 x244))))
(assert (x14 x287))
(assert (x314 x18))
(assert (= x270 (or x120 x260)))
(assert (x314 x244))
(assert (=> (>= 10000 x30) (= (x383 x30) (x367 x30))))
(assert (x314 x22))
(assert (= (x3 (x367 475336206)) 475336206))
(assert (x14 x55))
(assert (= (x242 x33 8) (div x33 256)))
(assert (= (x3 (x383 x245)) x245))
(assert (x14 x317))
(assert (x14 x375))
(assert (= (x3 (x383 x54)) x54))
(assert (x14 x353))
(assert (= (and x268 (not x178)) x264))
(assert (= (x383 1315048582) (x367 1315048582)))
(assert (x14 x19))
(assert (x314 x279))
(assert (x14 x295))
(assert (x14 x124))
(assert (x14 x78))
(assert (= 1315048582 (x3 (x367 1315048582))))
(assert (x14 x144))
(assert (x14 x27))
(assert (= x190 (and x274 (not x247))))
(assert (= (x367 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x383 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (=> (and (= (x366 244) x149) (= (not (< 1 x149)) x283)) (and x283 (=> (= x362 x337) x66))) x136))
(assert (= (x367 941162192) (x383 941162192)))
(assert (=> (<= x316 10000) (= (x367 x316) (x383 x316))))
(assert (x14 x65))
(assert (=> (>= 10000 x360) (= (x367 x360) (x383 x360))))
(assert (x14 x360))
(assert (x14 x196))
(assert (x14 x63))
(assert (x14 x307))
(assert (= (and x135 (not x372)) x292))
(assert (x14 x97))
(assert (= x313 (or x23 (and (not x382) x225))))
(assert (x14 x11))
(assert (=> (<= x109 10000) (= (x367 x109) (x383 x109))))
(assert (x14 x183))
(assert (= (and (not x162) x122) x25))
(assert (= (mod (ite (> 256 x169) (x232 2 x169) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x334 1 x169)))
(assert (x314 x150))
(assert (x14 x211))
(assert (x277 x185))
(assert (x14 x96))
(assert (x314 x124))
(assert (x314 x316))
(assert (x14 x221))
(assert (= x10 (and x308 (not x258))))
(assert (= (x383 115792089237316195423570985008687907853269984665640564039457584007913129639934) (x367 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (= (x3 (x118 x181 2)) (+ (x3 x181) 2)))
(assert (x14 x33))
(assert (x14 x266))
(assert (x14 x207))
(assert (=> (<= x317 10000) (= (x367 x317) (x383 x317))))
(assert (= (x3 (x383 x196)) x196))
(assert (= (and x187 x214) x260))
(assert (x14 x13))
(assert (=> (<= x38 10000) (= (x383 x38) (x367 x38))))
(assert (x314 x294))
(assert (= x111 (x3 (x383 x111))))
(assert (= (x383 832554005) (x367 832554005)))
(assert (x14 x112))
(assert (x14 x278))
(assert (=> (>= 10000 x105) (= (x367 x105) (x383 x105))))
(assert (x14 x99))
(assert (x14 x79))
(assert (x14 x354))
(assert (x14 x350))
(assert (x14 x71))
(assert (= x153 (and x94 (not x323))))
(assert (x14 x279))
(assert (x314 x50))
(assert (x314 x27))
(assert (x277 x113))
(assert (x314 (x242 x192 96)))
(assert (x14 x244))
(assert (x314 x196))
(assert (x14 x89))
(assert (= (x3 (x383 x27)) x27))
(assert (x314 x345))
(assert (x195 x218))
(assert (x14 x237))
(assert (x14 x119))
(assert (= 2544733239 (x3 (x367 2544733239))))
(assert (x14 x82))
(assert (x314 x105))
(assert (x14 x172))
(assert (x14 x254))
(assert (x14 x156))
(assert (x14 x100))
(assert (x14 x321))
(assert (x14 x215))
(assert (x14 x326))
(assert (x14 x50))
(assert (x14 x235))
(assert (x14 x220))
(assert (x14 x125))
(assert (x14 x98))
(assert (x14 x177))
(assert (x14 x306))
(assert (= (x3 (x383 x234)) x234))
(assert (= x13 (x3 (x383 x13))))
(assert (x14 x110))
(assert (= 464684736 (x3 (x367 464684736))))
(assert (x14 x111))
(assert (x314 x15))
(assert (= 941162192 (x3 (x367 941162192))))
(assert (x14 x343))
(assert (x14 x157))
(assert (x14 x9))
(assert (x14 x169))
(assert (x314 x240))
(assert (x14 x132))
(assert (x14 x380))
(assert (x14 x192))
(assert (x14 x275))
(assert (= 1150964472 (x3 (x367 1150964472))))
(assert (= (x3 (x118 x168 2)) (+ 2 (x3 x168))))
(assert (= (=> (= 0 x161) x342) x191))
(assert (= x293 (x383 (x3 x293))))
(assert (x14 x180))
(assert (x14 x35))
(assert (= x106 (=> (= x161 1) x342)))
(assert (=> (<= x54 10000) (= (x367 x54) (x383 x54))))
(assert (x14 x26))
(assert (x14 x203))
(assert (= (x3 (x367 18446744073709551615)) 18446744073709551615))
(assert (x14 x105))
(assert (x14 x179))
(assert (x14 x164))
(assert (x314 x215))
(assert (x277 1461501637330902918203684832716283019655932542975))
(assert (= x112 (x3 (x383 x112))))
(assert (= x133 (and (=> (not x36) x106) (=> (and (and (= x359 (> x28 115792089237316195423570985008687907853269984665640564039457584007913129639934)) (<= 0 x28) (<= x28 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x36) (and (=> x359 x191) (=> (and (not x359) (= (x223 (+ 1 x28)) x103)) x106))))))
(assert (x14 x267))
(assert (= x94 (and x25 x206)))
(assert (x314 x301))
(assert (= (x383 2494227977) (x367 2494227977)))
(assert (x14 x4))
(assert (= (x3 (x367 115792089237316195423570985008687907853269984665640564039457584007913129639934)) 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x14 x30))
(assert (= (x3 (x383 x22)) x22))
(assert (x14 x387))
(assert (x14 x149))
(assert (x277 x317))
(assert (= x15 (x3 (x383 x15))))
(assert (=> (<= x279 10000) (= (x383 x279) (x367 x279))))
(assert (x277 x33))
(assert (= (x383 2544733239) (x367 2544733239)))
(assert (x14 x86))
(assert (x14 x117))
(assert (= (x383 31029940780905195875731109435447583271917780249877154904291146747782681853952) (x367 31029940780905195875731109435447583271917780249877154904291146747782681853952)))
(assert (x14 x109))
(assert (x14 x185))
(assert (= (x367 1461501637330902918203684832716283019655932542975) (x383 1461501637330902918203684832716283019655932542975)))
(assert (x314 x380))
(assert (= x109 (x3 (x383 x109))))
(assert (= (x3 (x118 x87 1)) (+ 1 (x3 x87))))
(assert (x14 x127))
(assert (x14 x391))
(assert (= (x3 (x383 x230)) x230))
(assert (x14 x129))
(assert (x14 x316))
(assert (=> (<= x27 10000) (= (x367 x27) (x383 x27))))
(assert (= x240 (x3 (x383 x240))))
(assert (= x142 (x3 (x383 x142))))
(assert (x14 x288))
(assert (x14 x68))
(assert (= (x3 (x367 832554005)) 832554005))
(assert (x14 x257))
(assert (x198 x185))
(assert (x14 x12))
(assert (= (x367 292666793) (x383 292666793)))
(assert (x14 x252))
(assert (= x30 (x3 (x383 x30))))
(assert (x14 x345))
(assert (x314 x109))
(assert (x14 x67))
(assert (x14 x335))
(assert (x14 x34))
(assert (=> (>= 10000 x301) (= (x383 x301) (x367 x301))))
(assert (x198 x113))
(assert (x14 x2))
(assert (= x342 (=> (and (or (not x382) x382) (= (= x161 0) x382)) x243)))
(assert (x14 x249))
(assert (x14 x325))
(assert (= (mod (ite (> 256 x310) (x232 2 x310) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x334 1 x310)))
(assert (x14 x108))
(assert (x14 x80))
(assert (x14 x123))
(assert (= x50 (x3 (x383 x50))))
(assert (= (x3 (x383 x345)) x345))
(assert (x14 x374))
(assert (= (and x135 x372) x187))
(assert (x14 x236))
(assert (x14 x139))
(assert (x14 x15))
(assert (x14 x276))
(assert (= x43 (and x153 x62)))
(assert (x14 x282))
(assert (x14 x150))
(assert (= (+ (x3 x204) 1) (x3 (x118 x204 1))))
(assert (= x120 (and (not x214) x187)))
(assert (x14 x246))
(assert (x14 x231))
(assert (x14 x64))
(assert (x14 x290))
(assert (=> (<= x240 10000) (= (x383 x240) (x367 x240))))
(assert (x14 x152))
(assert (x14 x182))
(assert (x277 x257))
(assert (= (x367 752823349) (x383 752823349)))
(assert (x195 x328))
(assert (x14 x22))
(assert (=> (<= x196 10000) (= (x383 x196) (x367 x196))))
(assert (= (and x137 x36) x219))
(assert (x314 x13))
(assert (= 752823349 (x3 (x367 752823349))))
(assert (x14 x38))
(assert (= x203 (x3 (x383 x203))))
(assert (= (x367 18446744073709551615) (x383 18446744073709551615)))
(assert (= x350 (x3 (x383 x350))))
(assert (= (+ 2 (x3 x338)) (x3 (x118 x338 2))))
(assert (=> (>= 10000 x15) (= (x383 x15) (x367 x15))))
(assert (= x336 (=> (and (and (<= 0 x59) (<= x276 255) (not (= x380 x50)) (= x339 2544733239) (<= 0 x183) (<= x380 1461501637330902918203684832716283019655932542975) (not (= x229 x50)) (= x89 x332) (= x173 false) (not (= x350 x380)) (>= x64 0) (>= x31 0) (<= x31 255) (= false x356) (> x350 0) (= x134 (x118 x346 1)) (not (= x350 x229)) (>= x353 0) (not (= 2510660263 x339)) (>= x332 0) (<= x251 255) (<= x353 1461501637330902918203684832716283019655932542975) (>= 255 x144) (= x78 (x381 (x383 x229))) (> x50 0) (>= 1461501637330902918203684832716283019655932542975 x229) x369 (>= 1461501637330902918203684832716283019655932542975 x1) (= (x381 (x383 x380)) x182) (<= x332 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x64 1461501637330902918203684832716283019655932542975) (not (< x339 2494227977)) (<= x59 1461501637330902918203684832716283019655932542975) (<= 0 x236) (<= x288 1461501637330902918203684832716283019655932542975) (<= x236 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x319) x143 (= x302 (< 0 (x228 (x383 x229)))) (>= x117 0) (< 0 x174) (= x52 (x200 (x383 x294) (x367 1) 0)) (= x93 (< 0 (x228 (x383 x380)))) (>= 1461501637330902918203684832716283019655932542975 x294) (= x35 1451294997) (>= 1461501637330902918203684832716283019655932542975 x12) (= x59 x290) (<= 0 x12) (= x369 (< 0 (x228 (x383 x50)))) (>= x78 0) (= (x210 x134) x332) (< 0 x380) (= x65 x288) (<= x19 255) (= (< 0 (x228 (x383 x350))) x143) (= x30 x32) (= false x241) (not (= x339 2494227977)) (>= x182 0) (= x387 (x381 (x383 x350))) (<= x183 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x350) (>= x387 0) (<= 0 x374) (= 5 x284) (= x183 x294) (= x296 false) (= x117 (x381 (x383 x50))) (>= x251 0) x93 (>= 255 x374) (> x229 0) (>= x19 0) (>= x276 0) (not (= x350 x50)) (<= x50 1461501637330902918203684832716283019655932542975) (= x346 (x200 (x383 x30) x52 0)) x302 (<= 0 x1) (<= 0 x144) (not (= x380 x229)) (>= x288 0) (<= 0 x319) (= x174 (x228 (x383 x350)))) (and (and (= (x56 x163) x166) (= x331 x166) (= x6 (x200 (x383 x22) (x367 1) 0)) (not (= x123 752823349)) (= x18 x32) (= 1315048582 x123) (= x338 (x200 (x383 x18) x6 0)) (not (= 464684736 x123)) (not (= 292666793 x123)) (> x9 0) (<= x22 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x166) (= (x228 (x383 x350)) x9) (= x89 x341) (>= x166 0) (= x183 x22) (= x163 (x118 x338 2)) (> 2494227977 x123)) (and (and (and (and (>= 1461501637330902918203684832716283019655932542975 x21) (>= 1461501637330902918203684832716283019655932542975 x34) (= x100 (x56 x357)) (= (x286 x386) x257) (= x384 x389) (= (x223 (+ 244 x235)) x110) (= (x175 x257 x287) x376) (> 2494227977 x201) (not (= 2 x88)) (= x235 (x223 (+ x177 32))) (= x192 (x334 x65 96)) x320 (= x128 (x118 x115 3)) (<= 0 x88) (= x20 0) (= (x368 x115) x67) (<= 0 x113) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x77) (= (x175 255 x263) x169) (not (= x201 292666793)) (= x320 (or x261 x193)) (<= x317 1461501637330902918203684832716283019655932542975) (= (x291 x248) x97) (= x33 x263) (not x340) (= (x200 (x383 x13) x128 0) x386) (= x179 x317) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x88) (= (x210 x83) x77) (= x21 x389) (= x256 x111) x176 (or (and (< x239 x53) (= (<= x239 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x53 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x239) (<= x53 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (< x53 x266)) (> x67 0) (= x76 x157) (= (x118 x115 1) x83) (>= 1461501637330902918203684832716283019655932542975 x113) (= (x223 (+ x63 x378)) x266) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x279) (= x55 x80) (>= x34 0) (< 0 x324) (= x90 x125) (not (= x201 1315048582)) (= (x200 (x383 x111) x390 0) x115) (= x245 x8) (not (< x53 4)) (= x63 (x223 (+ 32 x248))) (= (x368 x115) x279) (= x340 (> x77 x90)) (<= x100 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x378 (mod (* x97 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x287 (x334 1 x169)) (= x325 (x223 (+ x156 276))) (= (x228 (x383 x350)) x324) (= x68 (x233 (- x53 4))) (= 0 x2) (>= x77 0) (= x111 x130) (= (x118 x83 1) x357) (>= x279 0) (not (= x201 752823349)) (and (< 163 x53) (= (<= x53 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (= x13 (x242 x33 8)) (= x20 x131) (= x293 (x226 (x367 84) (x367 8244) (x383 x33) (x383 (x242 x192 96)) (x383 x245) 0)) (<= x257 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x21) (= (x223 (+ 31 x248)) x239) (= x317 x282) (= (mod (* x97 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x177) (not (= 464684736 x201)) (<= 0 x100) (= x108 (x366 244)) (= x245 x71) (= x201 1451294997) (= x248 (x223 (+ x80 4))) (<= x67 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x372 (< 0 x108)) (not (< 18446744073709551615 x55)) (= (and x60 x347) x261) (= (x200 (x383 x317) (x367 1) 0) x390) (= x176 (= 0 x376)) (= x113 x65) (= (mod (* x97 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x156) (<= 0 x67) (not (< 18446744073709551615 x97)) (not (> x90 x100)) (not (or (and (< x68 160) (= (<= x68 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x68 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= x257 0) (= (= x157 0) x60)) (and (= (x118 x168 2) x318) (not (= x354 752823349)) (< x354 2494227977) (= x298 (x200 (x383 x196) (x367 1) 0)) (< 0 x224) (<= x196 1461501637330902918203684832716283019655932542975) (= x48 x145) (not (= x354 292666793)) (not (= 464684736 x354)) (<= 0 x119) (= x363 0) (= x224 (x228 (x383 x350))) (= x183 x196) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x119) (= (and x309 x385) x347) (= x76 x119) (= x309 (= x48 0)) (= x354 1315048582) (= (x200 (x383 x345) x298 0) x168) (= x345 x32) (= x119 (x56 x318)))) (and (not (= x114 2494227977)) (<= 0 x221) (= (= 0 x370) x385) (= x145 x221) (>= 1461501637330902918203684832716283019655932542975 x54) (= (x200 (x383 x301) x304 0) x204) (not (> 2494227977 x114)) (= x114 2544733239) (= x183 x54) (> x364 0) (= x189 (x118 x204 1)) (= 0 x220) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x221) (= (x228 (x383 x350)) x364) (not (= 2510660263 x114)) (= x304 (x200 (x383 x54) (x367 1) 0)) (= x262 x370) (= x221 (x210 x189)) (= x32 x301))) (and (= (< x341 x40) x193) (= x32 x234) (= x331 x40) (>= x147 0) (= (x200 (x383 x230) (x367 1) 0) x148) (not (= x335 2494227977)) (= (x368 x216) x147) (= (x200 (x383 x234) x148 0) x216) (>= 1461501637330902918203684832716283019655932542975 x230) (not (< x335 2494227977)) (= 2510660263 x335) (> x58 0) (= x230 x183) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x147) (= x262 x147) (= x58 (x228 (x383 x350))))))) (and (=> (and (not x372) (= x293 x337)) x66) (=> (and x372 (and (and (< 0 x275) (= (x366 244) x275) (= (> x27 (x3 x293)) x214) (= (x366 276) x27)) (or (and (not x214) (and (= x101 x362) (= (x200 (x383 x27) x293 0) x101))) (and x214 (and (= (x200 x293 (x383 x27) 0) x351) (= x351 x362)))))) x136)))))
(assert (= x212 (and x359 x219)))
(assert (= (+ 1 (x3 x346)) (x3 (x118 x346 1))))
(assert (x314 x245))
(assert (x14 x240))
(assert (= 1245659826 (x3 (x367 1245659826))))
(assert (x14 x166))
(assert (x102 x33))
(assert (=> (>= 10000 x33) (= (x383 x33) (x367 x33))))
(assert (x14 x21))
(assert (x14 x263))
(assert (x14 x140))
(assert (=> (>= 10000 x230) (= (x367 x230) (x383 x230))))
(assert (=> (>= 10000 x350) (= (x383 x350) (x367 x350))))
(assert (= (x367 1150964472) (x383 1150964472)))
(assert (= (x367 961581905) (x383 961581905)))
(assert (x14 x77))
(assert (=> (>= 10000 x22) (= (x367 x22) (x383 x22))))
(assert (x14 x202))
(assert (=> (>= 10000 x18) (= (x367 x18) (x383 x18))))
(assert (= x316 (x3 (x383 x316))))
(assert (= x301 (x3 (x383 x301))))
(assert (=> (<= x294 10000) (= (x367 x294) (x383 x294))))
(assert (x14 x18))
(assert (= (x383 1245659826) (x367 1245659826)))
(assert (x14 x229))
(assert (x14 x319))
(assert (x14 x59))
(assert (x314 x317))
(assert (x277 255))
(assert (x14 x201))
(assert (x14 x364))
(assert (x14 x17))
(assert (= (+ 2 (x3 x69)) (x3 (x118 x69 2))))
(assert (= x279 (x3 (x383 x279))))
(assert (x14 x245))
(assert (= (x3 (x383 x18)) x18))
(assert (x14 x332))
(assert (x14 x339))
(assert (x14 x284))
(assert (= (x3 (x383 x317)) x317))
(assert (x14 x159))
(assert (= x104 (and x10 x265)))
(assert (= (x3 (x118 x116 1)) (+ 1 (x3 x116))))
(assert (= (or x270 x292) x39))
(assert (x14 x271))
(assert (=> (<= x50 10000) (= (x367 x50) (x383 x50))))
(assert (x14 x85))
(assert (x14 x88))
(assert (x14 x145))
(assert (x14 x114))
(assert (x14 x294))
(assert (= (x3 (x118 x83 1)) (+ (x3 x83) 1)))
(assert (x14 x81))
(assert (x14 x131))
(assert (= (x3 (x367 1451294997)) 1451294997))
(assert (x14 x255))
(assert (= (x3 (x383 x380)) x380))
(assert (x314 x33))
(assert (x14 x8))
(assert (x14 x378))
(assert (= (or x190 x327 x264 x43 x212 x47 (and x162 x122) (and x25 (not x206))) x299))
(assert (= 961581905 (x3 (x367 961581905))))
(assert (x42 x257 x287))
(assert (=> (<= x111 10000) (= (x367 x111) (x383 x111))))
(assert (= (x3 (x383 x33)) x33))
(assert (x314 x111))
(assert (x14 x331))
(assert (= x66 (=> (and (and (= x337 (x383 x279)) (= (x334 1 x310) x218) (= (x223 (+ x46 32)) x255) (>= x328 0) (= (x286 x24) x328) (= x142 (x242 x33 8)) (= x46 (x223 (+ 4 x110))) (= x150 (x175 1461501637330902918203684832716283019655932542975 x317)) (= (x200 (x383 x142) x128 0) x24) (= (x233 (- x164 x110)) x249) (= x310 (x175 255 x33)) (= (x223 (+ x46 64)) x164) (<= x328 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x228 (x383 x150)) x98) (= x184 (= x229 x150)) (not (= 0 x98)) (= x49 (x205 x328 x218))) (and (and (= x371 (x228 (x383 x229))) (= 31029940780905195875731109435447583271917780249877154904291146747782681853952 x322) (not (< x152 4)) (< x73 1245659826) (= (or (and (< x16 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x16))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x16)) x162) (not (> 475336206 x73)) (not (= 941162192 x73)) (= 68 x152) (= x16 (x233 (- x152 4))) (< 0 x371) (not (= 832554005 x73)) (= x73 1150964472) (= x307 x71) (not (> 832554005 x73)) (not (= x73 961581905)) (not (= x73 910484757)) (= x249 x152) (= x113 x185)) x184)) (and (=> x162 x191) (=> (and (and (= x206 (= x139 x113)) (= x185 x358) (= x139 (x175 1461501637330902918203684832716283019655932542975 x113))) (not x162)) (and (=> (and (and (<= x237 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x85 x307) (>= x237 0) (= (= 2 x237) x323)) x206) (and (=> x323 x191) (=> (and (and (= (= x129 0) x62) (= x129 (x175 1461501637330902918203684832716283019655932542975 x185))) (not x323)) (and (=> x62 x191) (=> (and (and (= (< 0 x307) x247) (= x172 0)) (not x62)) (and (=> (not x247) x191) (=> (and x247 (= x178 (< 0 x306))) (and (=> (not x178) x191) (=> (and x178 (and (= (x233 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x307)) x231) (= x258 (> x271 x231)) (<= 0 x271) (<= x271 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x258 x191) (=> (and (and (or (and x265 (and (<= x246 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x199 x165) x246) (= (= x85 x246) x36) (= x15 (x175 1461501637330902918203684832716283019655932542975 x185)) (>= x246 0) (= x165 (x200 (x383 x15) (x367 155) 0)))) (and (not x265) (= x265 x36))) (and (= (x175 1461501637330902918203684832716283019655932542975 x185) x124) (= x375 0) (>= x321 0) (= (x175 1461501637330902918203684832716283019655932542975 x185) x159) (= x265 (not (= x159 0))) (= (x223 (+ x307 x321)) x326) (<= x321 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x132 (x223 (+ x271 x307))) (= x321 (x273 x75)) (= (x200 (x383 x124) (x367 155) 0) x75))) (not x258)) x133))))))))))) (=> (not x206) x191)))))))
(assert (x314 x234))
(assert (x14 x234))
(assert (= (and (not x62) x153) x274))
(assert (= (x383 1451294997) (x367 1451294997)))
(assert (x14 x310))
(assert (= (x3 (x118 x115 1)) (+ (x3 x115) 1)))
(assert (x314 x203))
(assert (x14 x301))
(assert (x14 x269))
(assert (= x225 (or x222 x299)))
(assert (x14 x31))
(assert (x14 x142))
(assert (=> (>= 10000 x124) (= (x367 x124) (x383 x124))))
(assert (x14 x389))
(assert (x14 x358))
(assert (x14 x324))
(assert (=> (>= 10000 x345) (= (x383 x345) (x367 x345))))
(assert (x277 x287))
(assert (x14 x49))
(assert (=> (>= 10000 x142) (= (x383 x142) (x367 x142))))
(assert (= (x3 (x367 910484757)) 910484757))
(assert (x14 x46))
(assert (= (x242 x192 96) (div x192 79228162514264337593543950336)))
(assert (x314 x230))
(assert (x102 x263))
(assert (= (x3 (x383 x215)) x215))
(assert (= x122 (and x39 x184)))
(assert (=> (>= 10000 x112) (= (x367 x112) (x383 x112))))
(assert (=> (>= 10000 x13) (= (x367 x13) (x383 x13))))
(assert (x14 x239))
(assert (x14 x328))
(assert (= x23 (and x225 x382)))
(assert (x14 x90))
(assert (x95 x328 x218))
(assert (x314 x54))
(assert (= 1461501637330902918203684832716283019655932542975 (x3 (x367 1461501637330902918203684832716283019655932542975))))
(assert (x198 x317))
(assert (x14 x32))
(assert (x14 x224))
(assert (x14 x53))
(assert (= (and x94 x323) x47))
(assert (= (x367 2510660263) (x383 2510660263)))
(assert (=> (<= (x242 x192 96) 10000) (= (x367 (x242 x192 96)) (x383 (x242 x192 96)))))
(assert (=> (>= 10000 x215) (= (x383 x215) (x367 x215))))
(assert (x277 x263))
(assert (x14 x1))
(assert (x14 x256))
(assert (and (= 618970019642690137449562112 (x232 2 89)) (= (x232 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 4294967296 (x232 2 32)) (= (x232 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 11972621413014756705924586149611790497021399392059392 (x232 2 173)) (= 73786976294838206464 (x232 2 66)) (= 680564733841876926926749214863536422912 (x232 2 129)) (= 2 (x232 2 1)) (= (x232 2 179) 766247770432944429179173513575154591809369561091801088) (= 47890485652059026823698344598447161988085597568237568 (x232 2 175)) (= (x232 2 18) 262144) (= 6427752177035961102167848369364650410088811975131171341205504 (x232 2 202)) (= (x232 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x232 2 80) 1208925819614629174706176) (= 4 (x232 2 2)) (= 50216813883093446110686315385661331328818843555712276103168 (x232 2 195)) (= 9903520314283042199192993792 (x232 2 93)) (= (x232 2 23) 8388608) (= (x232 2 70) 1180591620717411303424) (= 324518553658426726783156020576256 (x232 2 108)) (= 2475880078570760549798248448 (x232 2 91)) (= (x232 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x232 2 177) 191561942608236107294793378393788647952342390272950272) (= 1267650600228229401496703205376 (x232 2 100)) (= 4194304 (x232 2 22)) (= (x232 2 103) 10141204801825835211973625643008) (= 2596148429267413814265248164610048 (x232 2 111)) (= 2535301200456458802993406410752 (x232 2 101)) (= 1048576 (x232 2 20)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x232 2 255)) (= (x232 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x232 2 158) 365375409332725729550921208179070754913983135744) (= 12259964326927110866866776217202473468949912977468817408 (x232 2 183)) (= (x232 2 118) 332306998946228968225951765070086144) (= (x232 2 167) 187072209578355573530071658587684226515959365500928) (= (x232 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 5070602400912917605986812821504 (x232 2 102)) (= 822752278660603021077484591278675252491367932816789931674304512 (x232 2 209)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x232 2 227)) (= 748288838313422294120286634350736906063837462003712 (x232 2 169)) (= (x232 2 9) 512) (= (x232 2 149) 713623846352979940529142984724747568191373312) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x232 2 250)) (= (x232 2 145) 44601490397061246283071436545296723011960832) (= 1298074214633706907132624082305024 (x232 2 110)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x232 2 244)) (= 9007199254740992 (x232 2 53)) (= (x232 2 133) 10889035741470030830827987437816582766592) (= (x232 2 166) 93536104789177786765035829293842113257979682750464) (= 383123885216472214589586756787577295904684780545900544 (x232 2 178)) (= 696898287454081973172991196020261297061888 (x232 2 139)) (= 32 (x232 2 5)) (= (x232 2 7) 128) (= 131072 (x232 2 17)) (= 170141183460469231731687303715884105728 (x232 2 127)) (= (x232 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x232 2 60) 1152921504606846976) (= 39614081257132168796771975168 (x232 2 95)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x232 2 234)) (= (x232 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 38685626227668133590597632 (x232 2 85)) (= 649037107316853453566312041152512 (x232 2 109)) (= (x232 2 8) 256) (= (x232 2 59) 576460752303423488) (= 1569275433846670190958947355801916604025588861116008628224 (x232 2 190)) (= 803469022129495137770981046170581301261101496891396417650688 (x232 2 199)) (= 95780971304118053647396689196894323976171195136475136 (x232 2 176)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x232 2 213)) (= 140737488355328 (x232 2 47)) (= (x232 2 162) 5846006549323611672814739330865132078623730171904) (= 5444517870735015415413993718908291383296 (x232 2 132)) (= (x232 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x232 2 116) 83076749736557242056487941267521536) (= (x232 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x232 2 16) 65536) (= (x232 2 28) 268435456) (= (x232 2 188) 392318858461667547739736838950479151006397215279002157056) (= 16 (x232 2 4)) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x232 2 238)) (= (x232 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 9223372036854775808 (x232 2 63)) (= 77371252455336267181195264 (x232 2 86)) (= 2305843009213693952 (x232 2 61)) (= 604462909807314587353088 (x232 2 79)) (= 5575186299632655785383929568162090376495104 (x232 2 142)) (= 87112285931760246646623899502532662132736 (x232 2 136)) (= (x232 2 123) 10633823966279326983230456482242756608) (= 1427247692705959881058285969449495136382746624 (x232 2 150)) (= (x232 2 65) 36893488147419103232) (= 524288 (x232 2 19)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x232 2 224)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x232 2 217)) (= (x232 2 107) 162259276829213363391578010288128) (= 105312291668557186697918027683670432318895095400549111254310977536 (x232 2 216)) (= (x232 2 172) 5986310706507378352962293074805895248510699696029696) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x232 2 245)) (= (x232 2 160) 1461501637330902918203684832716283019655932542976) (= (x232 2 14) 16384) (= 64 (x232 2 6)) (= 9444732965739290427392 (x232 2 73)) (= 22835963083295358096932575511191922182123945984 (x232 2 154)) (= 158456325028528675187087900672 (x232 2 97)) (= (x232 2 94) 19807040628566084398385987584) (= (x232 2 156) 91343852333181432387730302044767688728495783936) (= 196159429230833773869868419475239575503198607639501078528 (x232 2 187)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x232 2 225)) (= 1125899906842624 (x232 2 50)) (= 144115188075855872 (x232 2 57)) (= (x232 2 64) 18446744073709551616) (= 2722258935367507707706996859454145691648 (x232 2 131)) (= (x232 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x232 2 171) 2993155353253689176481146537402947624255349848014848) (= 52656145834278593348959013841835216159447547700274555627155488768 (x232 2 215)) (= (x232 2 33) 8589934592) (= 3138550867693340381917894711603833208051177722232017256448 (x232 2 191)) (= 8192 (x232 2 13)) (= 633825300114114700748351602688 (x232 2 99)) (= (x232 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 20769187434139310514121985316880384 (x232 2 114)) (= (x232 2 128) 340282366920938463463374607431768211456) (= 32768 (x232 2 15)) (= (x232 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x232 2 74) 18889465931478580854784) (= 2923003274661805836407369665432566039311865085952 (x232 2 161)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x232 2 251)) (= (x232 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 41538374868278621028243970633760768 (x232 2 115)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x232 2 246)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x232 2 252)) (= 33554432 (x232 2 25)) (= 72057594037927936 (x232 2 56)) (= 43556142965880123323311949751266331066368 (x232 2 135)) (= 562949953421312 (x232 2 49)) (= 536870912 (x232 2 29)) (= 11150372599265311570767859136324180752990208 (x232 2 143)) (= (x232 2 180) 1532495540865888858358347027150309183618739122183602176) (= 3064991081731777716716694054300618367237478244367204352 (x232 2 181)) (= (x232 2 55) 36028797018963968) (= (x232 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x232 2 159) 730750818665451459101842416358141509827966271488) (= (x232 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x232 2 83) 9671406556917033397649408) (= (x232 2 163) 11692013098647223345629478661730264157247460343808) (= 68719476736 (x232 2 36)) (= (x232 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x232 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 182687704666362864775460604089535377456991567872 (x232 2 157)) (= 8796093022208 (x232 2 43)) (= 2417851639229258349412352 (x232 2 81)) (= 22300745198530623141535718272648361505980416 (x232 2 144)) (= 1 (x232 2 0)) (= 302231454903657293676544 (x232 2 78)) (= (x232 2 122) 5316911983139663491615228241121378304) (= 151115727451828646838272 (x232 2 77)) (= (x232 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 75557863725914323419136 (x232 2 76)) (= (x232 2 106) 81129638414606681695789005144064) (= 1329227995784915872903807060280344576 (x232 2 120)) (= (x232 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x232 2 37) 137438953472) (= (x232 2 168) 374144419156711147060143317175368453031918731001856) (= (x232 2 138) 348449143727040986586495598010130648530944) (= (x232 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x232 2 182) 6129982163463555433433388108601236734474956488734408704) (= 166153499473114484112975882535043072 (x232 2 117)) (= (x232 2 21) 2097152) (= (x232 2 11) 2048) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x232 2 221)) (= 288230376151711744 (x232 2 58)) (= (x232 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x232 2 45) 35184372088832) (= (x232 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 12554203470773361527671578846415332832204710888928069025792 (x232 2 193)) (= (x232 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x232 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 1393796574908163946345982392040522594123776 (x232 2 140)) (= (x232 2 124) 21267647932558653966460912964485513216) (= 2199023255552 (x232 2 41)) (= (x232 2 48) 281474976710656) (= 2658455991569831745807614120560689152 (x232 2 121)) (= (x232 2 30) 1073741824) (= (x232 2 155) 45671926166590716193865151022383844364247891968) (= (x232 2 39) 549755813888) (= 42535295865117307932921825928971026432 (x232 2 125)) (= (x232 2 54) 18014398509481984) (= (x232 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 590295810358705651712 (x232 2 69)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x232 2 236)) (= 316912650057057350374175801344 (x232 2 98)) (= (x232 2 105) 40564819207303340847894502572032) (= 2147483648 (x232 2 31)) (= (x232 2 112) 5192296858534827628530496329220096) (= 154742504910672534362390528 (x232 2 87)) (= (x232 2 92) 4951760157141521099596496896) (= (x232 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x232 2 44) 17592186044416) (= 1496577676626844588240573268701473812127674924007424 (x232 2 170)) (= (x232 2 164) 23384026197294446691258957323460528314494920687616) (= 3291009114642412084309938365114701009965471731267159726697218048 (x232 2 211)) (= (x232 2 67) 147573952589676412928) (= 49039857307708443467467104868809893875799651909875269632 (x232 2 185)) (= (x232 2 27) 134217728) (= (x232 2 148) 356811923176489970264571492362373784095686656) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x232 2 242)) (= 17179869184 (x232 2 34)) (= (x232 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x232 2 147) 178405961588244985132285746181186892047843328) (= 1606938044258990275541962092341162602522202993782792835301376 (x232 2 200)) (= 1099511627776 (x232 2 40)) (= (x232 2 84) 19342813113834066795298816) (= 295147905179352825856 (x232 2 68)) (= (x232 2 151) 2854495385411919762116571938898990272765493248) (= 70368744177664 (x232 2 46)) (= 23945242826029513411849172299223580994042798784118784 (x232 2 174)) (= (x232 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x232 2 235)) (= (x232 2 96) 79228162514264337593543950336) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x232 2 253)) (= (x232 2 104) 20282409603651670423947251286016) (= (x232 2 42) 4398046511104) (= (x232 2 165) 46768052394588893382517914646921056628989841375232) (= (x232 2 153) 11417981541647679048466287755595961091061972992) (= 411376139330301510538742295639337626245683966408394965837152256 (x232 2 208)) (= (x232 2 12) 4096) (= (x232 2 119) 664613997892457936451903530140172288) (= 21778071482940061661655974875633165533184 (x232 2 134)) (= (x232 2 71) 2361183241434822606848) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x232 2 243)) (= (x232 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x232 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x232 2 10) 1024) (= (x232 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 401734511064747568885490523085290650630550748445698208825344 (x232 2 198)) (= 4835703278458516698824704 (x232 2 82)) (= 8 (x232 2 3)) (= (x232 2 152) 5708990770823839524233143877797980545530986496) (= 4611686018427387904 (x232 2 62)) (= 67108864 (x232 2 26)) (= 274877906944 (x232 2 38)) (= (x232 2 130) 1361129467683753853853498429727072845824) (= 200867255532373784442745261542645325315275374222849104412672 (x232 2 197)) (= (x232 2 24) 16777216) (= (x232 2 90) 1237940039285380274899124224) (= 174224571863520493293247799005065324265472 (x232 2 137)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x232 2 247)) (= 34359738368 (x232 2 35)) (= (x232 2 51) 2251799813685248) (= (x232 2 141) 2787593149816327892691964784081045188247552) (= 309485009821345068724781056 (x232 2 88)) (= (x232 2 126) 85070591730234615865843651857942052864) (= 89202980794122492566142873090593446023921664 (x232 2 146)) (= (x232 2 72) 4722366482869645213696) (= (x232 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x232 2 75) 37778931862957161709568) (= 4503599627370496 (x232 2 52)) (= 10384593717069655257060992658440192 (x232 2 113))))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x3 (x367 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (x383 910484757) (x367 910484757)))
(assert (= (x3 (x383 x360)) x360))
(assert (x14 x384))
(assert (= (x3 (x383 x229)) x229))
(assert (= x305 (and x219 (not x359))))
(assert (= x329 (and x10 (not x265))))
(assert (= (and x274 x247) x268))
(assert (=> (>= 10000 x229) (= (x367 x229) (x383 x229))))
(assert (x14 x371))
(assert (x14 x285))
(assert (x14 x248))
(assert (= x38 (x3 (x383 x38))))
(assert (= (x367 475336206) (x383 475336206)))
(assert (x14 x58))
(assert (x14 x28))
(assert (x314 x38))
(assert (= (x334 x65 96) (mod (* 79228162514264337593543950336 x65) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x14 x315))
(assert (= x150 (x3 (x383 x150))))
(assert (x14 x312))
(assert (=> (>= 10000 x234) (= (x367 x234) (x383 x234))))
(assert (= (x3 (x367 2510660263)) 2510660263))
(assert (= (x3 (x118 x115 3)) (+ (x3 x115) 3)))
(assert (x14 x322))
(assert (= x308 (and x178 x268)))
(assert (x314 x142))
(assert (x314 x360))
(assert (= x294 (x3 (x383 x294))))
(assert (= 292666793 (x3 (x367 292666793))))
(assert (x14 x161))
(assert (= (x3 (x383 (x242 x192 96))) (x242 x192 96)))
(assert (= (x3 (x383 x124)) x124))
(assert (x14 x48))
(assert (x314 x30))
(assert (= x327 (and x258 x308)))
(assert (x314 x112))
(assert (not x336))
(assert (x14 x113))
(check-sat)
(exit)