(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x1471 0)) (((x344 (x646 x1471) (x1404 x1471) (x939 x1471) (x1445 x1471) (x321 x1471) (x1474 x1471) (x1354 x1471) (x1194 Int)) (x562 (x784 x1471) (x1408 x1471) (x1163 x1471) (x1184 Int)) (x517 (x488 x1471) (x1278 x1471) (x814 x1471) (x536 x1471) (x1391 Int)) (x389 (x596 x1471) (x17 Int)) (x1034 (x1121 Int)) (x948 (x1199 x1471) (x1233 x1471) (x1250 x1471) (x186 x1471) (x878 x1471) (x1263 x1471) (x832 Int)) (x719 (x460 x1471) (x1334 x1471) (x20 Int)) (x1062 (x405 x1471) (x802 x1471) (x1394 x1471) (x637 x1471) (x35 x1471) (x1367 Int)))))
(declare-fun x1466 () Bool)
(declare-fun x1448 () Int)
(declare-fun x1220 () Int)
(declare-fun x1428 () Bool)
(declare-fun x639 () Bool)
(declare-fun x1347 () Int)
(declare-fun x1468 () Int)
(declare-fun x580 () Int)
(declare-fun x1275 () Bool)
(declare-fun x154 () Bool)
(declare-fun x146 () Bool)
(declare-fun x410 () Bool)
(declare-fun x911 () Bool)
(declare-fun x93 () Int)
(declare-fun x712 () Int)
(declare-fun x340 (x1471) Int)
(declare-fun x1109 () Bool)
(declare-fun x381 () Bool)
(declare-fun x1247 () Int)
(declare-fun x930 () Int)
(declare-fun x464 () Int)
(declare-fun x696 () Int)
(declare-fun x947 () Bool)
(declare-fun x404 () Int)
(declare-fun x1363 () Int)
(declare-fun x350 () Bool)
(declare-fun x268 () Int)
(declare-fun x1364 () Int)
(declare-fun x1076 () Bool)
(declare-fun x898 () Bool)
(declare-fun x967 () Bool)
(declare-fun x174 () Int)
(declare-fun x449 () Bool)
(declare-fun x1153 () Int)
(declare-fun x125 () Int)
(declare-fun x621 () Bool)
(declare-fun x1094 () Int)
(declare-fun x1230 () Bool)
(declare-fun x203 () Int)
(declare-fun x224 () x1471)
(declare-fun x142 () Bool)
(declare-fun x1178 () Int)
(declare-fun x1133 () Bool)
(declare-fun x303 () Bool)
(declare-fun x732 () Int)
(declare-fun x266 () Int)
(declare-fun x672 () Bool)
(declare-fun x195 () Int)
(declare-fun x262 () Int)
(declare-fun x818 () Bool)
(declare-fun x560 () Int)
(declare-fun x965 () Bool)
(declare-fun x235 () Bool)
(declare-fun x300 () Int)
(declare-fun x620 () Int)
(declare-fun x114 () Bool)
(declare-fun x963 () Int)
(declare-fun x475 () Int)
(declare-fun x793 () Bool)
(declare-fun x182 () Bool)
(declare-fun x1446 () Int)
(declare-fun x28 () Int)
(declare-fun x744 () Bool)
(declare-fun x1351 () Int)
(declare-fun x975 () Bool)
(declare-fun x1298 () Int)
(declare-fun x122 () Int)
(declare-fun x869 () Int)
(declare-fun x710 () Int)
(declare-fun x1077 () Int)
(declare-fun x550 () Int)
(declare-fun x738 () Int)
(declare-fun x275 () Int)
(declare-fun x1321 () Int)
(declare-fun x1221 () Bool)
(declare-fun x116 () Bool)
(declare-fun x770 () Int)
(declare-fun x791 () Int)
(declare-fun x1427 () Bool)
(declare-fun x660 () Int)
(declare-fun x528 () Bool)
(declare-fun x840 () Bool)
(declare-fun x1426 () Int)
(declare-fun x875 () Int)
(declare-fun x1181 () Bool)
(declare-fun x1392 () Bool)
(declare-fun x193 () Int)
(declare-fun x1248 () Bool)
(declare-fun x828 () Int)
(declare-fun x1421 () Int)
(declare-fun x1449 () Int)
(declare-fun x838 () Int)
(declare-fun x1015 () Bool)
(declare-fun x820 () Bool)
(declare-fun x927 () Bool)
(declare-fun x789 () Int)
(declare-fun x915 () Bool)
(declare-fun x312 () Int)
(declare-fun x274 () Bool)
(declare-fun x1072 () Int)
(declare-fun x1274 () Int)
(declare-fun x1304 () Int)
(declare-fun x917 (Int) Int)
(declare-fun x1037 () Bool)
(declare-fun x1343 () Bool)
(declare-fun x1258 () Int)
(declare-fun x674 () Bool)
(declare-fun x1050 () Bool)
(declare-fun x1353 () Int)
(declare-fun x194 () Int)
(declare-fun x520 () Int)
(declare-fun x135 () Int)
(declare-fun x648 () Int)
(declare-fun x373 () Int)
(declare-fun x671 () Bool)
(declare-fun x846 () Bool)
(declare-fun x459 () Bool)
(declare-fun x253 () Bool)
(declare-fun x576 () Int)
(declare-fun x977 () Bool)
(declare-fun x271 () Int)
(declare-fun x1443 () Bool)
(declare-fun x132 () Bool)
(declare-fun x1395 () Int)
(declare-fun x102 () Int)
(declare-fun x1243 () Int)
(declare-fun x933 () Bool)
(declare-fun x739 () Int)
(declare-fun x717 () Bool)
(declare-fun x743 () Int)
(declare-fun x192 () Int)
(declare-fun x775 () Int)
(declare-fun x1399 () Int)
(declare-fun x867 () Bool)
(declare-fun x849 () Bool)
(declare-fun x255 () Int)
(declare-fun x563 () Bool)
(declare-fun x1331 (x1471) Int)
(declare-fun x998 () Int)
(declare-fun x1039 () Int)
(declare-fun x1043 () Bool)
(declare-fun x241 () Bool)
(declare-fun x1048 () Bool)
(declare-fun x908 () Bool)
(declare-fun x1246 () Bool)
(declare-fun x1003 () Int)
(declare-fun x131 () Int)
(declare-fun x501 () Int)
(declare-fun x1257 () Int)
(declare-fun x909 (Int) Int)
(declare-fun x299 () Bool)
(declare-fun x356 () Int)
(declare-fun x36 () Int)
(declare-fun x1253 () Int)
(declare-fun x72 () Bool)
(declare-fun x1455 () Int)
(declare-fun x1152 (x1471) Int)
(declare-fun x1202 () Int)
(declare-fun x516 () x1471)
(declare-fun x107 () Bool)
(declare-fun x1299 () Bool)
(declare-fun x222 () Int)
(declare-fun x801 () Int)
(declare-fun x269 () x1471)
(declare-fun x217 () Bool)
(declare-fun x1386 () Bool)
(declare-fun x663 () Int)
(declare-fun x179 () Int)
(declare-fun x1320 () x1471)
(declare-fun x651 () Int)
(declare-fun x259 () Bool)
(declare-fun x1044 () Bool)
(declare-fun x1441 () Bool)
(declare-fun x385 () Int)
(declare-fun x1376 () Bool)
(declare-fun x366 () Int)
(declare-fun x936 () Bool)
(declare-fun x63 () Int)
(declare-fun x1171 () Bool)
(declare-fun x1242 (x1471) Int)
(declare-fun x1210 () Int)
(declare-fun x242 () Int)
(declare-fun x1430 () Int)
(declare-fun x323 () Int)
(declare-fun x400 () Bool)
(declare-fun x803 () Int)
(declare-fun x1240 () Bool)
(declare-fun x1307 () Bool)
(declare-fun x1130 () Int)
(declare-fun x583 () Int)
(declare-fun x433 () Bool)
(declare-fun x780 () Bool)
(declare-fun x1105 () Bool)
(declare-fun x657 () Int)
(declare-fun x546 () Bool)
(declare-fun x465 () Int)
(declare-fun x765 () Int)
(declare-fun x103 () Int)
(declare-fun x665 () Int)
(declare-fun x2 () Bool)
(declare-fun x80 () Int)
(declare-fun x150 () Int)
(declare-fun x1389 () Bool)
(declare-fun x1195 () Bool)
(declare-fun x758 () Int)
(declare-fun x946 () Int)
(declare-fun x594 () Int)
(declare-fun x1150 () Bool)
(declare-fun x1436 () Bool)
(declare-fun x90 () Int)
(declare-fun x958 () Bool)
(declare-fun x1160 () Int)
(declare-fun x468 () Int)
(declare-fun x1071 () Int)
(declare-fun x675 () Bool)
(declare-fun x1255 () Bool)
(declare-fun x934 () Bool)
(declare-fun x1358 () Int)
(declare-fun x1464 () Int)
(declare-fun x861 () Int)
(declare-fun x957 () Int)
(declare-fun x1419 () Bool)
(declare-fun x1269 () Int)
(declare-fun x1087 () Int)
(declare-fun x144 () Int)
(declare-fun x414 () Bool)
(declare-fun x690 () Int)
(declare-fun x298 () Bool)
(declare-fun x1267 () Bool)
(declare-fun x245 () Bool)
(declare-fun x1014 () Bool)
(declare-fun x317 () Bool)
(declare-fun x1162 (x1471) Int)
(declare-fun x506 () Int)
(declare-fun x302 () Int)
(declare-fun x27 () Int)
(declare-fun x440 () Bool)
(declare-fun x769 (Int) Int)
(declare-fun x523 (Int) Int)
(declare-fun x586 () Int)
(declare-fun x1124 () Int)
(declare-fun x787 () Bool)
(declare-fun x1306 () Int)
(declare-fun x1339 () Bool)
(declare-fun x1301 () Int)
(declare-fun x437 () Int)
(declare-fun x112 () Bool)
(declare-fun x136 () Int)
(declare-fun x876 () Bool)
(declare-fun x834 () Bool)
(declare-fun x1151 () Bool)
(declare-fun x1381 (Int Int) Int)
(declare-fun x708 () Bool)
(declare-fun x1290 () Int)
(declare-fun x673 () Int)
(declare-fun x1122 () Bool)
(declare-fun x1256 () Int)
(declare-fun x272 () Int)
(declare-fun x622 () Int)
(declare-fun x542 () Bool)
(declare-fun x1268 () Bool)
(declare-fun x97 () Bool)
(declare-fun x1136 () Int)
(declare-fun x1222 () Bool)
(declare-fun x684 () x1471)
(declare-fun x730 () Int)
(declare-fun x1110 () Bool)
(declare-fun x491 () Bool)
(declare-fun x283 () Int)
(declare-fun x1140 () x1471)
(declare-fun x1200 () Int)
(declare-fun x442 () Int)
(declare-fun x1047 () Bool)
(declare-fun x1026 () Bool)
(declare-fun x979 () Bool)
(declare-fun x591 () Int)
(declare-fun x18 () Bool)
(declare-fun x1069 () Int)
(declare-fun x904 () Bool)
(declare-fun x1219 () Int)
(declare-fun x75 () Bool)
(declare-fun x1099 () Bool)
(declare-fun x446 () x1471)
(declare-fun x54 () Int)
(declare-fun x807 () Bool)
(declare-fun x1460 () Bool)
(declare-fun x552 () Int)
(declare-fun x306 () Int)
(declare-fun x603 () Int)
(declare-fun x452 () Int)
(declare-fun x96 () Bool)
(declare-fun x184 () Int)
(declare-fun x1176 () Bool)
(declare-fun x180 () Int)
(declare-fun x279 () Int)
(declare-fun x522 () Int)
(declare-fun x361 () Bool)
(declare-fun x655 () Bool)
(declare-fun x554 () Bool)
(declare-fun x1158 () Bool)
(declare-fun x1201 () Bool)
(declare-fun x1295 () Bool)
(declare-fun x304 () Bool)
(declare-fun x48 () Int)
(declare-fun x100 () Bool)
(declare-fun x1349 () Int)
(declare-fun x157 () Bool)
(declare-fun x260 () Int)
(declare-fun x403 () Bool)
(declare-fun x903 () Int)
(declare-fun x101 () Int)
(declare-fun x640 () Int)
(declare-fun x1012 (x1471) Int)
(declare-fun x309 () Bool)
(declare-fun x447 () Int)
(declare-fun x1226 () Int)
(declare-fun x362 () Int)
(declare-fun x587 () Int)
(declare-fun x434 () x1471)
(declare-fun x113 () Int)
(declare-fun x380 () Int)
(declare-fun x430 (Int) Int)
(declare-fun x837 () Bool)
(declare-fun x358 () Bool)
(declare-fun x565 () Int)
(declare-fun x1040 () Bool)
(declare-fun x601 () Bool)
(declare-fun x635 () Bool)
(declare-fun x1005 () Bool)
(declare-fun x175 () Bool)
(declare-fun x428 () Bool)
(declare-fun x40 () Int)
(declare-fun x458 () Bool)
(declare-fun x86 () Int)
(declare-fun x556 () Int)
(declare-fun x1280 () Int)
(declare-fun x851 () Int)
(declare-fun x307 () Int)
(declare-fun x844 () Int)
(declare-fun x1170 () Bool)
(declare-fun x1138 () Int)
(declare-fun x733 () Int)
(declare-fun x1064 () Int)
(declare-fun x1038 () Int)
(declare-fun x52 () Bool)
(declare-fun x1379 () Bool)
(declare-fun x766 () Int)
(declare-fun x1344 () Bool)
(declare-fun x109 () Int)
(declare-fun x267 () x1471)
(declare-fun x173 () Bool)
(declare-fun x310 () Int)
(declare-fun x34 (Int Int) Int)
(declare-fun x1116 () Int)
(declare-fun x524 () Bool)
(declare-fun x432 () Bool)
(declare-fun x796 () Int)
(declare-fun x1287 () Bool)
(declare-fun x474 () Bool)
(declare-fun x392 () Int)
(declare-fun x1264 () Int)
(declare-fun x853 () Int)
(declare-fun x701 () Bool)
(declare-fun x778 () Int)
(declare-fun x953 () Int)
(declare-fun x847 () Bool)
(declare-fun x207 () Bool)
(declare-fun x1182 () Int)
(declare-fun x1397 () Bool)
(declare-fun x1028 () Bool)
(declare-fun x1231 () Int)
(declare-fun x978 () Int)
(declare-fun x670 () Int)
(declare-fun x328 () Int)
(declare-fun x1101 () Int)
(declare-fun x1046 () Bool)
(declare-fun x800 () Bool)
(declare-fun x989 () x1471)
(declare-fun x295 () Int)
(declare-fun x794 () Int)
(declare-fun x1388 () Int)
(declare-fun x1355 () Int)
(declare-fun x912 () Bool)
(declare-fun x1338 (Int) Int)
(declare-fun x1078 () Bool)
(declare-fun x811 () Int)
(declare-fun x1174 () Bool)
(declare-fun x1434 () Int)
(declare-fun x1164 () Bool)
(declare-fun x108 () Int)
(declare-fun x831 () Int)
(declare-fun x721 () Bool)
(declare-fun x515 () Int)
(declare-fun x496 () Int)
(declare-fun x545 () Bool)
(declare-fun x1107 () Int)
(declare-fun x1289 (x1471) Int)
(declare-fun x1203 () Bool)
(declare-fun x882 () Bool)
(declare-fun x118 () Int)
(declare-fun x226 () Bool)
(declare-fun x602 () Bool)
(declare-fun x375 () Int)
(declare-fun x945 () Int)
(declare-fun x1118 () Int)
(declare-fun x537 () Int)
(declare-fun x566 () Bool)
(declare-fun x1206 () Bool)
(declare-fun x968 () Bool)
(declare-fun x160 () Bool)
(declare-fun x218 () Bool)
(declare-fun x1175 () Bool)
(declare-fun x986 () Int)
(declare-fun x1327 () Bool)
(declare-fun x124 (Int) Int)
(declare-fun x1415 () Int)
(declare-fun x289 () Bool)
(declare-fun x783 () Bool)
(declare-fun x940 () Bool)
(declare-fun x498 () Bool)
(declare-fun x1300 () Bool)
(declare-fun x393 () Bool)
(declare-fun x1036 () Bool)
(declare-fun x1144 () Bool)
(declare-fun x134 () Int)
(declare-fun x767 () Bool)
(declare-fun x330 () Bool)
(declare-fun x956 () Bool)
(declare-fun x1277 () Bool)
(declare-fun x89 () Int)
(declare-fun x378 () Bool)
(declare-fun x1055 () Bool)
(declare-fun x1089 () Bool)
(declare-fun x1450 () Int)
(declare-fun x551 () Int)
(declare-fun x1236 () Bool)
(declare-fun x508 () Bool)
(declare-fun x644 () Bool)
(declare-fun x659 () Bool)
(declare-fun x156 () Int)
(declare-fun x676 () Int)
(declare-fun x346 () Bool)
(declare-fun x308 () Int)
(declare-fun x538 () Int)
(declare-fun x1336 () Int)
(declare-fun x277 () Int)
(declare-fun x1402 () Bool)
(declare-fun x1214 () Int)
(declare-fun x1341 () Bool)
(declare-fun x171 () Int)
(declare-fun x1437 () Int)
(declare-fun x1068 () Int)
(declare-fun x351 () Int)
(declare-fun x230 () Int)
(declare-fun x53 () Int)
(declare-fun x19 () Bool)
(declare-fun x823 () Int)
(declare-fun x364 () Int)
(declare-fun x1370 () Bool)
(declare-fun x264 () Bool)
(declare-fun x47 () Bool)
(declare-fun x630 () Int)
(declare-fun x1377 () Int)
(declare-fun x610 () Bool)
(declare-fun x692 () Int)
(declare-fun x1075 () Bool)
(declare-fun x68 () Bool)
(declare-fun x531 () Bool)
(declare-fun x1329 () Int)
(declare-fun x204 () Bool)
(declare-fun x984 () Int)
(declare-fun x1023 () Bool)
(declare-fun x1293 () Int)
(declare-fun x990 () Int)
(declare-fun x798 () Bool)
(declare-fun x568 () Int)
(declare-fun x479 () Bool)
(declare-fun x514 () Int)
(declare-fun x316 () Int)
(declare-fun x480 () Int)
(declare-fun x1423 () Int)
(declare-fun x345 () Int)
(declare-fun x1350 () Int)
(declare-fun x642 () Int)
(declare-fun x1049 () Bool)
(declare-fun x499 () Int)
(declare-fun x860 () Bool)
(declare-fun x244 () Int)
(declare-fun x1285 () Int)
(declare-fun x942 () Int)
(declare-fun x972 () Bool)
(declare-fun x189 () Int)
(declare-fun x336 () Bool)
(declare-fun x240 () Bool)
(declare-fun x896 (Int Int) Int)
(declare-fun x593 (Int) Int)
(declare-fun x453 () Int)
(declare-fun x1035 () Bool)
(declare-fun x6 () Bool)
(declare-fun x482 () Int)
(declare-fun x699 () Int)
(declare-fun x629 () Bool)
(declare-fun x1478 () Int)
(declare-fun x572 () Bool)
(declare-fun x1033 () Bool)
(declare-fun x865 () Bool)
(declare-fun x82 () Int)
(declare-fun x1374 () Int)
(declare-fun x424 () Bool)
(declare-fun x1149 () Bool)
(declare-fun x704 () Bool)
(declare-fun x191 () Bool)
(declare-fun x1241 () Int)
(declare-fun x745 () Bool)
(declare-fun x962 () Bool)
(declare-fun x215 () Bool)
(declare-fun x1413 () Int)
(declare-fun x830 () Int)
(declare-fun x76 () Int)
(declare-fun x455 () Int)
(declare-fun x994 () Bool)
(declare-fun x1390 () Bool)
(declare-fun x396 () Int)
(declare-fun x248 () Int)
(declare-fun x325 () Int)
(declare-fun x891 () Int)
(declare-fun x1102 () Int)
(declare-fun x902 () Int)
(declare-fun x949 () Bool)
(declare-fun x737 () Bool)
(declare-fun x85 () Bool)
(declare-fun x467 () Bool)
(declare-fun x322 () Int)
(declare-fun x183 () Bool)
(declare-fun x98 () Bool)
(declare-fun x553 () Int)
(declare-fun x1119 (x1471) Int)
(declare-fun x333 () Int)
(declare-fun x1207 () Bool)
(declare-fun x1022 () Int)
(declare-fun x567 () Bool)
(declare-fun x534 () Bool)
(declare-fun x889 () Bool)
(declare-fun x1125 (x1471) Int)
(declare-fun x141 (Int) Int)
(declare-fun x883 () Bool)
(declare-fun x926 () Bool)
(declare-fun x569 () Bool)
(declare-fun x748 () Bool)
(declare-fun x1324 () Bool)
(declare-fun x457 () Int)
(declare-fun x1020 () Int)
(declare-fun x388 () Int)
(declare-fun x703 () Bool)
(declare-fun x1406 () Bool)
(declare-fun x1198 () Bool)
(declare-fun x1016 () Bool)
(declare-fun x604 () Int)
(declare-fun x1458 () Bool)
(declare-fun x495 () Int)
(declare-fun x1475 () Bool)
(declare-fun x205 () Int)
(declare-fun x354 () Int)
(declare-fun x839 () Int)
(declare-fun x117 () Int)
(declare-fun x877 () Int)
(declare-fun x1429 (x1471) Int)
(declare-fun x88 () Bool)
(declare-fun x742 () Bool)
(declare-fun x1410 () Bool)
(declare-fun x1204 () Int)
(declare-fun x225 () Int)
(declare-fun x785 () Bool)
(declare-fun x1302 () Bool)
(declare-fun x441 () Int)
(declare-fun x1315 () Bool)
(declare-fun x261 () Bool)
(declare-fun x1360 () Int)
(declare-fun x886 () Bool)
(declare-fun x1456 () Int)
(declare-fun x463 () Bool)
(declare-fun x10 () Bool)
(declare-fun x705 () Int)
(declare-fun x954 () Int)
(declare-fun x1179 () Int)
(declare-fun x167 () Bool)
(declare-fun x590 () Int)
(declare-fun x386 () Int)
(declare-fun x153 () Int)
(declare-fun x406 () Int)
(declare-fun x573 () Bool)
(declare-fun x147 () Bool)
(declare-fun x510 () Bool)
(declare-fun x809 () Int)
(declare-fun x200 () Bool)
(declare-fun x1470 () Bool)
(declare-fun x104 () Int)
(declare-fun x67 () Int)
(declare-fun x1081 () Int)
(declare-fun x216 () Int)
(declare-fun x819 () Int)
(declare-fun x588 () Bool)
(declare-fun x1435 () Int)
(declare-fun x914 () Bool)
(declare-fun x925 () Int)
(declare-fun x500 (x1471) Int)
(declare-fun x653 () Int)
(declare-fun x879 () Int)
(declare-fun x13 () Bool)
(declare-fun x413 () Bool)
(declare-fun x110 () Bool)
(declare-fun x1297 () Bool)
(declare-fun x761 () Bool)
(declare-fun x1447 () Bool)
(declare-fun x42 () Bool)
(declare-fun x715 () Int)
(declare-fun x1461 () Int)
(declare-fun x23 () Int)
(declare-fun x1318 () Bool)
(declare-fun x609 () Bool)
(declare-fun x616 () Int)
(declare-fun x1273 () Int)
(declare-fun x320 () Int)
(declare-fun x353 () x1471)
(declare-fun x1007 () Bool)
(declare-fun x1070 () Int)
(declare-fun x512 (Int) Int)
(declare-fun x805 () Int)
(declare-fun x1019 () Int)
(declare-fun x127 () Int)
(declare-fun x39 () Bool)
(declare-fun x582 () Bool)
(declare-fun x14 () Bool)
(declare-fun x401 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x1333 () Bool)
(declare-fun x774 () Int)
(declare-fun x1400 () Int)
(declare-fun x1284 () Int)
(declare-fun x1244 () Int)
(declare-fun x894 () Int)
(declare-fun x427 () Int)
(declare-fun x943 () Int)
(declare-fun x270 () Bool)
(declare-fun x1342 () Bool)
(declare-fun x41 () Bool)
(declare-fun x584 () Bool)
(declare-fun x1227 () Int)
(declare-fun x502 () Int)
(declare-fun x1139 () Int)
(declare-fun x471 () Bool)
(declare-fun x1361 (x1471) Int)
(declare-fun x119 () Int)
(declare-fun x415 () Int)
(declare-fun x1191 () Int)
(declare-fun x162 () Bool)
(declare-fun x1323 () Int)
(declare-fun x650 () Bool)
(declare-fun x1229 () Int)
(declare-fun x1356 () Bool)
(declare-fun x1303 () Int)
(declare-fun x1322 (x1471) Int)
(declare-fun x1319 () Int)
(declare-fun x50 () Bool)
(declare-fun x1352 () Bool)
(declare-fun x236 () Bool)
(declare-fun x201 () Bool)
(declare-fun x438 () Bool)
(declare-fun x1393 () Int)
(declare-fun x490 () Int)
(declare-fun x478 () Bool)
(declare-fun x140 () Int)
(declare-fun x1454 () Bool)
(declare-fun x606 () Int)
(declare-fun x649 () Int)
(declare-fun x38 () Bool)
(declare-fun x632 () Int)
(declare-fun x1281 () Int)
(declare-fun x408 () Int)
(declare-fun x929 () Int)
(declare-fun x1059 () Int)
(declare-fun x1112 () Bool)
(declare-fun x419 () Int)
(declare-fun x548 () Int)
(declare-fun x214 () Bool)
(declare-fun x829 () Bool)
(declare-fun x1309 () Int)
(declare-fun x391 () Int)
(declare-fun x707 () Bool)
(declare-fun x1131 () Int)
(declare-fun x1296 () Bool)
(declare-fun x700 () Bool)
(declare-fun x906 () Int)
(declare-fun x539 () Int)
(declare-fun x688 () Int)
(declare-fun x87 () Bool)
(declare-fun x1054 () Int)
(declare-fun x251 () Bool)
(declare-fun x409 () Int)
(declare-fun x238 () Int)
(declare-fun x1193 () Int)
(declare-fun x56 () Bool)
(declare-fun x848 () Int)
(declare-fun x494 () Bool)
(declare-fun x773 () x1471)
(declare-fun x286 () Int)
(declare-fun x884 () Bool)
(declare-fun x1187 () Int)
(declare-fun x436 () x1471)
(declare-fun x729 () Bool)
(declare-fun x555 () Bool)
(declare-fun x1126 () Int)
(declare-fun x489 () Bool)
(declare-fun x854 () Bool)
(declare-fun x881 () Bool)
(declare-fun x535 () Int)
(declare-fun x511 () Int)
(declare-fun x395 () Bool)
(declare-fun x213 () Bool)
(declare-fun x547 () Bool)
(declare-fun x422 () Int)
(declare-fun x833 () Bool)
(declare-fun x980 () Bool)
(declare-fun x1111 () Bool)
(declare-fun x77 () Int)
(declare-fun x1018 () Bool)
(declare-fun x445 () Int)
(declare-fun x1092 () Int)
(declare-fun x799 () Int)
(declare-fun x1409 () Bool)
(declare-fun x1145 () Bool)
(declare-fun x1115 () Bool)
(declare-fun x1080 (Int) x1471)
(declare-fun x727 () Bool)
(declare-fun x613 () Int)
(declare-fun x996 () Int)
(declare-fun x874 () Int)
(declare-fun x1189 () Bool)
(declare-fun x857 () Int)
(declare-fun x1288 () Bool)
(declare-fun x227 () Bool)
(declare-fun x263 () Bool)
(declare-fun x1477 () Bool)
(declare-fun x476 () Int)
(declare-fun x319 () Bool)
(declare-fun x92 () Int)
(declare-fun x1238 () Bool)
(declare-fun x492 () Bool)
(declare-fun x574 () Int)
(declare-fun x21 () Int)
(declare-fun x284 () Int)
(declare-fun x827 () Bool)
(declare-fun x1017 () Bool)
(declare-fun x477 () Bool)
(declare-fun x181 () Bool)
(declare-fun x387 () Int)
(declare-fun x11 () Int)
(declare-fun x1217 () Bool)
(declare-fun x290 () Bool)
(declare-fun x1282 () Int)
(declare-fun x669 () Bool)
(declare-fun x368 () Int)
(declare-fun x764 () Bool)
(declare-fun x974 () x1471)
(declare-fun x625 () Int)
(declare-fun x985 (x1471) Int)
(declare-fun x1383 () Int)
(declare-fun x579 () Int)
(declare-fun x1422 () x1471)
(declare-fun x318 () Bool)
(declare-fun x685 () Bool)
(declare-fun x121 () Int)
(declare-fun x30 () Bool)
(declare-fun x1330 () Bool)
(declare-fun x220 () Bool)
(declare-fun x1058 () Bool)
(declare-fun x871 () Int)
(declare-fun x348 () Int)
(declare-fun x5 () Int)
(declare-fun x123 () Int)
(declare-fun x862 () Bool)
(declare-fun x341 () Int)
(declare-fun x981 () Bool)
(declare-fun x487 () Int)
(declare-fun x549 () Int)
(declare-fun x1266 () Bool)
(declare-fun x1305 () Bool)
(declare-fun x1316 () Int)
(declare-fun x997 () Bool)
(declare-fun x4 () Int)
(declare-fun x836 () Int)
(declare-fun x421 () Bool)
(declare-fun x970 (Int) Int)
(declare-fun x1375 () Bool)
(declare-fun x24 (Int) Int)
(declare-fun x969 () Int)
(declare-fun x1008 () Int)
(declare-fun x1060 () Int)
(declare-fun x456 () Bool)
(declare-fun x278 () Int)
(declare-fun x314 () Bool)
(declare-fun x786 () Bool)
(declare-fun x815 () Bool)
(declare-fun x1260 () Int)
(declare-fun x870 () Bool)
(declare-fun x1451 () Bool)
(declare-fun x750 () Int)
(declare-fun x1325 () Bool)
(declare-fun x1177 () Bool)
(declare-fun x454 () Bool)
(declare-fun x172 () Bool)
(declare-fun x1425 () Int)
(declare-fun x1234 () Int)
(declare-fun x165 () Int)
(declare-fun x1382 () Bool)
(declare-fun x151 () Bool)
(declare-fun x1476 () Int)
(declare-fun x806 () Int)
(declare-fun x772 () Int)
(declare-fun x991 () x1471)
(declare-fun x714 () Bool)
(declare-fun x988 () Bool)
(declare-fun x821 () Int)
(declare-fun x1459 () Bool)
(declare-fun x1414 () Int)
(declare-fun x1228 () Bool)
(declare-fun x1156 () Bool)
(declare-fun x859 () Bool)
(declare-fun x1462 () Bool)
(declare-fun x698 () Int)
(declare-fun x256 () Int)
(declare-fun x91 () Bool)
(declare-fun x682 () Bool)
(declare-fun x781 () Int)
(declare-fun x1123 () Bool)
(declare-fun x1096 () Int)
(declare-fun x762 () Int)
(declare-fun x71 () Int)
(declare-fun x614 () Int)
(declare-fun x1137 () Int)
(declare-fun x617 () Bool)
(declare-fun x417 () Bool)
(declare-fun x503 () Int)
(declare-fun x507 () Int)
(declare-fun x1453 () Int)
(declare-fun x281 () Int)
(declare-fun x1480 () Bool)
(declare-fun x841 () Bool)
(declare-fun x1357 () Int)
(declare-fun x161 () x1471)
(declare-fun x816 () Int)
(declare-fun x1186 () Bool)
(declare-fun x9 () Int)
(declare-fun x760 () Int)
(declare-fun x575 () Int)
(declare-fun x57 () Int)
(declare-fun x1057 () Int)
(declare-fun x725 () Int)
(declare-fun x941 () Int)
(declare-fun x668 () Int)
(declare-fun x1432 () Int)
(declare-fun x209 () Int)
(declare-fun x252 () Bool)
(declare-fun x753 () Int)
(declare-fun x1313 () Bool)
(declare-fun x920 () Int)
(declare-fun x324 () Int)
(declare-fun x169 () Int)
(declare-fun x924 () Int)
(declare-fun x1205 () x1471)
(declare-fun x1192 () Bool)
(declare-fun x581 () Bool)
(declare-fun x178 () Bool)
(declare-fun x233 () Int)
(declare-fun x483 () Bool)
(declare-fun x822 () Int)
(declare-fun x1398 () Bool)
(declare-fun x177 () Bool)
(declare-fun x1114 () Int)
(declare-fun x1120 () Bool)
(declare-fun x1387 () Bool)
(declare-fun x1132 () Bool)
(declare-fun x1463 () Int)
(declare-fun x1006 () Int)
(declare-fun x1180 () Int)
(declare-fun x533 () Int)
(declare-fun x718 () Bool)
(declare-fun x288 () Bool)
(declare-fun x1271 () Int)
(declare-fun x790 () Int)
(declare-fun x65 () Bool)
(declare-fun x558 () Bool)
(declare-fun x1254 () Bool)
(declare-fun x1147 () Int)
(declare-fun x29 () Bool)
(declare-fun x1328 () Int)
(declare-fun x763 () Bool)
(declare-fun x1042 () Int)
(declare-fun x890 () Bool)
(declare-fun x1129 (Int) Int)
(declare-fun x1473 () Bool)
(declare-fun x1100 () Int)
(declare-fun x1371 () Bool)
(declare-fun x1056 () Bool)
(declare-fun x115 () Bool)
(declare-fun x285 () Bool)
(declare-fun x1332 () Bool)
(declare-fun x987 () Int)
(declare-fun x679 () Bool)
(declare-fun x964 () Bool)
(declare-fun x1372 () Int)
(declare-fun x509 () Bool)
(declare-fun x1405 () Int)
(declare-fun x1 () Int)
(declare-fun x1146 () Bool)
(declare-fun x371 () Int)
(declare-fun x808 () Int)
(declare-fun x329 () Int)
(declare-fun x1090 () Int)
(declare-fun x899 () Int)
(declare-fun x843 () Int)
(declare-fun x713 () Int)
(declare-fun x752 () Bool)
(declare-fun x1440 () Bool)
(declare-fun x619 () Int)
(declare-fun x1337 () Bool)
(declare-fun x612 () Int)
(declare-fun x1378 () Bool)
(declare-fun x64 () Int)
(declare-fun x1051 () Int)
(declare-fun x1082 () Bool)
(declare-fun x779 () Bool)
(declare-fun x525 () Bool)
(declare-fun x1004 () Int)
(declare-fun x1283 () Int)
(declare-fun x1212 () Int)
(declare-fun x311 () Int)
(declare-fun x139 () Bool)
(declare-fun x305 () Int)
(declare-fun x666 () Bool)
(declare-fun x423 () Int)
(declare-fun x1469 () Int)
(declare-fun x905 () Int)
(declare-fun x1442 () Bool)
(declare-fun x530 () Int)
(declare-fun x1104 () Int)
(declare-fun x1276 () Bool)
(declare-fun x1209 () Int)
(declare-fun x678 () Int)
(declare-fun x1279 () Int)
(declare-fun x1312 () Bool)
(declare-fun x952 () Int)
(declare-fun x652 () Int)
(declare-fun x1009 () Int)
(declare-fun x176 () Int)
(declare-fun x229 () Bool)
(declare-fun x128 () Int)
(declare-fun x31 () Bool)
(declare-fun x734 () Int)
(declare-fun x1173 () Int)
(declare-fun x654 (Int) Int)
(declare-fun x1270 () Bool)
(declare-fun x598 (x1471) Int)
(declare-fun x3 () Bool)
(declare-fun x741 () Int)
(declare-fun x296 () Int)
(declare-fun x1291 () Bool)
(declare-fun x1000 () Int)
(declare-fun x337 () x1471)
(declare-fun x1317 () Bool)
(declare-fun x78 () Int)
(declare-fun x1412 () Bool)
(declare-fun x15 () Int)
(declare-fun x313 () Int)
(declare-fun x43 () Int)
(declare-fun x662 () Int)
(declare-fun x1380 () Int)
(declare-fun x995 () Bool)
(declare-fun x439 () x1471)
(declare-fun x95 () Int)
(declare-fun x529 () Int)
(declare-fun x25 () Bool)
(declare-fun x287 () Int)
(declare-fun x1431 () Bool)
(declare-fun x282 () Bool)
(declare-fun x1218 () x1471)
(declare-fun x390 () Int)
(declare-fun x1167 () Bool)
(declare-fun x645 () Int)
(declare-fun x202 () Int)
(declare-fun x1135 () Int)
(declare-fun x755 () Int)
(declare-fun x726 () Bool)
(declare-fun x1093 () Int)
(declare-fun x1142 () Bool)
(declare-fun x1314 () Int)
(declare-fun x1134 () Bool)
(declare-fun x578 () Int)
(declare-fun x1030 () Bool)
(declare-fun x1161 () Int)
(declare-fun x855 () Bool)
(declare-fun x686 () Bool)
(declare-fun x1366 () Bool)
(declare-fun x631 () Int)
(declare-fun x420 () Int)
(declare-fun x850 () x1471)
(declare-fun x185 () Bool)
(declare-fun x461 () Int)
(declare-fun x1416 () Int)
(declare-fun x190 () x1471)
(declare-fun x518 () Int)
(declare-fun x628 () Int)
(declare-fun x1169 () Int)
(declare-fun x1418 () Bool)
(declare-fun x16 () Int)
(declare-fun x301 () Bool)
(declare-fun x608 () Bool)
(declare-fun x369 () Int)
(declare-fun x79 () Bool)
(declare-fun x1001 () Int)
(declare-fun x633 () Int)
(declare-fun x728 () x1471)
(declare-fun x377 () Bool)
(declare-fun x1369 () Int)
(declare-fun x754 () Bool)
(declare-fun x527 (Int) Int)
(declare-fun x418 () Bool)
(declare-fun x243 () Bool)
(declare-fun x297 () Bool)
(declare-fun x473 () Bool)
(declare-fun x599 () Bool)
(declare-fun x1183 () Bool)
(declare-fun x777 () Int)
(declare-fun x825 () Int)
(declare-fun x1310 () Int)
(declare-fun x716 () Int)
(declare-fun x1027 () Bool)
(declare-fun x382 () Bool)
(declare-fun x326 () Bool)
(declare-fun x749 () Bool)
(declare-fun x722 () Bool)
(declare-fun x359 () Bool)
(declare-fun x170 () Int)
(declare-fun x960 () Int)
(declare-fun x992 (x1471) Int)
(declare-fun x1472 () Int)
(declare-fun x1311 () x1471)
(declare-fun x757 () Bool)
(declare-fun x892 () Bool)
(declare-fun x1127 () Bool)
(declare-fun x206 () Int)
(declare-fun x1365 () Bool)
(declare-fun x1061 () Bool)
(declare-fun x148 () Bool)
(declare-fun x1385 () Bool)
(declare-fun x1143 () Bool)
(declare-fun x937 () Int)
(declare-fun x895 () x1471)
(declare-fun x561 () Int)
(declare-fun x835 () Int)
(declare-fun x1308 () Int)
(declare-fun x697 () Bool)
(declare-fun x249 (x1471) Int)
(declare-fun x624 () Bool)
(declare-fun x376 () Int)
(declare-fun x901 () Int)
(declare-fun x693 () Int)
(declare-fun x399 () Int)
(declare-fun x231 () Bool)
(declare-fun x1346 () Int)
(declare-fun x1292 () Int)
(declare-fun x168 () Bool)
(declare-fun x327 () Int)
(declare-fun x69 () Int)
(declare-fun x294 () Int)
(declare-fun x634 () Bool)
(declare-fun x797 () x1471)
(declare-fun x1103 () Bool)
(declare-fun x246 () Int)
(declare-fun x32 () Int)
(declare-fun x521 () Bool)
(declare-fun x155 () Int)
(declare-fun x374 () Int)
(declare-fun x221 () Int)
(declare-fun x735 () Int)
(declare-fun x959 () Bool)
(declare-fun x885 () Int)
(declare-fun x880 () Int)
(declare-fun x736 () Bool)
(declare-fun x852 () x1471)
(declare-fun x1024 () Int)
(declare-fun x481 () x1471)
(declare-fun x1041 () Int)
(declare-fun x910 () Int)
(declare-fun x1045 () Int)
(declare-fun x1439 () Int)
(declare-fun x223 () Int)
(declare-fun x1113 () Bool)
(declare-fun x658 () Int)
(declare-fun x493 () Bool)
(declare-fun x647 () Int)
(declare-fun x683 () Int)
(declare-fun x771 () Int)
(declare-fun x188 () Int)
(declare-fun x1272 () Bool)
(declare-fun x919 () Bool)
(declare-fun x544 () Bool)
(declare-fun x106 () Bool)
(declare-fun x1286 () Int)
(declare-fun x1032 () Int)
(declare-fun x720 () Int)
(declare-fun x8 () Int)
(declare-fun x605 () Bool)
(declare-fun x1479 (x1471) Int)
(declare-fun x526 () Int)
(declare-fun x349 () Int)
(declare-fun x1165 () Int)
(declare-fun x976 () Int)
(declare-fun x1031 () Int)
(declare-fun x486 () Bool)
(declare-fun x641 (x1471) Int)
(declare-fun x431 () Bool)
(declare-fun x365 () Bool)
(declare-fun x918 (x1471) Int)
(declare-fun x291 () Int)
(declare-fun x1237 () Int)
(declare-fun x817 (Int) Int)
(declare-fun x951 () Int)
(declare-fun x397 () Bool)
(declare-fun x105 () Bool)
(declare-fun x792 () Int)
(declare-fun x626 () x1471)
(declare-fun x129 () Int)
(declare-fun x661 () Int)
(declare-fun x383 () Int)
(declare-fun x111 () Bool)
(declare-fun x1359 () Bool)
(declare-fun x7 () Bool)
(declare-fun x664 () Int)
(declare-fun x592 () Int)
(declare-fun x983 () Int)
(declare-fun x643 () Int)
(declare-fun x250 () Int)
(declare-fun x426 () Int)
(declare-fun x740 () Bool)
(declare-fun x1424 () Int)
(declare-fun x1457 () Int)
(declare-fun x257 () Int)
(declare-fun x70 () Int)
(declare-fun x607 () Bool)
(declare-fun x219 () Bool)
(declare-fun x12 () Bool)
(declare-fun x993 () Bool)
(declare-fun x211 () Bool)
(declare-fun x342 () Bool)
(declare-fun x723 () Int)
(declare-fun x66 () Int)
(declare-fun x1265 () x1471)
(declare-fun x402 () Int)
(declare-fun x196 () Int)
(declare-fun x49 () Int)
(declare-fun x210 () Int)
(declare-fun x564 () Int)
(declare-fun x1159 () Int)
(declare-fun x1172 () Bool)
(declare-fun x541 () Int)
(declare-fun x768 () Bool)
(declare-fun x1168 () Bool)
(declare-fun x1340 () Bool)
(declare-fun x689 () Bool)
(declare-fun x597 () Bool)
(declare-fun x681 () Bool)
(declare-fun x293 () Int)
(declare-fun x1095 () x1471)
(declare-fun x759 () Int)
(declare-fun x1396 () Bool)
(declare-fun x470 () Int)
(declare-fun x900 () Int)
(declare-fun x94 () Bool)
(declare-fun x747 () Int)
(declare-fun x1208 () Bool)
(declare-fun x519 () Bool)
(declare-fun x702 () Bool)
(declare-fun x1141 () Bool)
(declare-fun x485 () Bool)
(declare-fun x1213 () Int)
(declare-fun x152 () Int)
(declare-fun x338 () Int)
(declare-fun x999 () Bool)
(declare-fun x1225 () Int)
(declare-fun x868 () Int)
(declare-fun x448 () Int)
(declare-fun x1188 () Int)
(declare-fun x667 () Bool)
(declare-fun x813 () Bool)
(declare-fun x1155 () Bool)
(declare-fun x856 () Int)
(declare-fun x1088 () Int)
(declare-fun x1029 () Int)
(declare-fun x1326 () Int)
(declare-fun x618 (x1471) Int)
(define-fun x627 ((x1471 x1471) (x472 Int)) x1471 (ite ((_ is x344) x1471) (x344 (x646 x1471) (x1404 x1471) (x939 x1471) (x1445 x1471) (x321 x1471) (x1474 x1471) (x1354 x1471) (+ x472 (x1194 x1471))) (ite ((_ is x948) x1471) (x948 (x1199 x1471) (x1233 x1471) (x1250 x1471) (x186 x1471) (x878 x1471) (x1263 x1471) (+ (x832 x1471) x472)) (ite ((_ is x1062) x1471) (x1062 (x405 x1471) (x802 x1471) (x1394 x1471) (x637 x1471) (x35 x1471) (+ (x1367 x1471) x472)) (ite ((_ is x517) x1471) (x517 (x488 x1471) (x1278 x1471) (x814 x1471) (x536 x1471) (+ (x1391 x1471) x472)) (ite ((_ is x562) x1471) (x562 (x784 x1471) (x1408 x1471) (x1163 x1471) (+ x472 (x1184 x1471))) (ite ((_ is x719) x1471) (x719 (x460 x1471) (x1334 x1471) (+ (x20 x1471) x472)) (ite ((_ is x389) x1471) (x389 (x596 x1471) (+ x472 (x17 x1471))) (x1034 (+ (x1121 x1471) x472))))))))))
(define-fun x1097 ((x59 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x59) (<= 0 x59)) x59 (- x59 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x497 ((x59 Int)) Int (ite (and (< x59 0) (>= x59 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x59) x59))
(define-fun x585 ((x394 Int)) Bool (and (>= x394 0) (< x394 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1420 ((x394 Int)) Bool (and (= (x896 x394 115792089237316195423570985008687907853269984665640564039457584007913129639935) x394) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639935 x394) x394)))
(define-fun x1098 ((x394 Int)) Bool (and (= 0 (x896 0 x394)) (= 0 (x896 x394 0))))
(define-fun x46 ((x394 Int)) Bool (= x394 (x896 x394 x394)))
(define-fun x695 ((x394 Int)) Bool (and (x1098 x394) (x1420 x394) (x46 x394)))
(define-fun x1232 ((x394 Int) (x1368 Int)) Bool (= (x896 x394 x1368) (x896 x1368 x394)))
(define-fun x932 ((x394 Int) (x1368 Int)) Bool (and (=> (<= 0 x394) (<= (x896 x394 x1368) x394)) (=> (>= x1368 0) (>= x1368 (x896 x394 x1368))) (>= (x896 x394 x1368) 0)))
(define-fun x1065 ((x394 Int) (x1368 Int)) Bool (and (x1232 x394 x1368) (x932 x394 x1368)))
(define-fun x370 ((x394 Int)) Bool (= (+ (mod x394 32) (x896 x394 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x394 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x504 ((x394 Int)) Bool (and (x1065 x394 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x370 x394)))
(define-fun x691 ((x394 Int)) Bool (= (x896 x394 1461501637330902918203684832716283019655932542975) (mod x394 1461501637330902918203684832716283019655932542976)))
(define-fun x44 ((x394 Int)) Bool (and (x1065 x394 1461501637330902918203684832716283019655932542975) (x691 x394)))
(define-fun x1067 ((x372 Int)) Int (ite (< x372 x1369) (x512 x372) 0))
(define-fun x864 ((x372 Int)) Int (ite (< x372 x1369) (x817 x372) 0))
(define-fun x315 ((x372 Int)) Int (ite (< x372 x1369) (x523 x372) 0))
(define-fun x782 ((x372 Int)) Int (x769 x372))
(define-fun x615 ((x372 Int)) Int (ite (= 128 x372) x136 (x430 x372)))
(define-fun x694 ((x372 Int)) Int (ite (= 128 x372) x1439 (x615 x372)))
(define-fun x247 ((x372 Int)) Int (ite (and (>= x372 160) (< x372 (+ x1439 160))) (x769 (+ x990 (- x372 160))) (x694 x372)))
(define-fun x1235 ((x372 Int)) Int (ite (= x1200 x372) 0 (x247 x372)))
(define-fun x360 ((x372 Int)) Int (ite (= x372 x320) x613 (x1235 x372)))
(define-fun x1262 ((x372 Int)) Int (ite x1115 (x1235 x372) (x360 x372)))
(define-fun x907 ((x372 Int)) Int (ite (= x372 x1039) 0 (x1262 x372)))
(define-fun x928 ((x372 Int)) Int (ite x489 (x1262 x372) (x907 x372)))
(define-fun x466 ((x372 Int)) Int (ite (= x564 x372) 9 (x928 x372)))
(define-fun x746 ((x372 Int)) Int (ite (= x372 x1355) x905 (x466 x372)))
(define-fun x1465 ((x372 Int)) Int (ite x178 (x466 x372) (x746 x372)))
(define-fun x955 ((x372 Int)) Int (ite (= x372 x1316) 0 (x1465 x372)))
(define-fun x543 ((x372 Int)) Int (ite x47 (x1465 x372) (x955 x372)))
(define-fun x1011 ((x372 Int)) Int (ite (= x1029 x372) 13 (x543 x372)))
(define-fun x1362 ((x372 Int)) Int (ite (= x372 x104) x583 (x1011 x372)))
(define-fun x1294 ((x372 Int)) Int (ite x458 (x1011 x372) (x1362 x372)))
(define-fun x1433 ((x372 Int)) Int (ite (= x372 x1092) 0 (x1294 x372)))
(define-fun x45 ((x372 Int)) Int (ite x1300 (x1294 x372) (x1433 x372)))
(define-fun x824 ((x372 Int)) Int (ite (= x372 x1071) 19 (x45 x372)))
(define-fun x505 ((x372 Int)) Int (ite (= x1188 x372) x470 (x824 x372)))
(define-fun x1021 ((x372 Int)) Int (ite x977 (x824 x372) (x505 x372)))
(define-fun x1417 ((x372 Int)) Int (ite (= x372 x1227) 0 (x1021 x372)))
(define-fun x858 ((x372 Int)) Int (ite x854 (x1021 x372) (x1417 x372)))
(define-fun x931 ((x372 Int)) Int (ite (= x372 x127) 19 (x858 x372)))
(define-fun x258 ((x372 Int)) Int (ite x546 (x931 x372) (x824 x372)))
(define-fun x81 ((x372 Int)) Int (ite (= x372 x533) x262 (x258 x372)))
(define-fun x842 ((x372 Int)) Int (ite x111 (x258 x372) (x81 x372)))
(define-fun x1085 ((x372 Int)) Int (ite (= x372 x1118) 0 (x842 x372)))
(define-fun x751 ((x372 Int)) Int (ite x1230 (x842 x372) (x1085 x372)))
(define-fun x265 ((x372 Int)) Int (ite (= x372 x642) 14 (x751 x372)))
(define-fun x1166 ((x372 Int)) Int (ite (= x665 x372) x1319 (x265 x372)))
(define-fun x1407 ((x372 Int)) Int (ite x964 (x265 x372) (x1166 x372)))
(define-fun x212 ((x372 Int)) Int (ite (= x1469 x372) 0 (x1407 x372)))
(define-fun x484 ((x372 Int)) Int (ite x813 (x1407 x372) (x212 x372)))
(define-fun x130 ((x372 Int)) Int (ite (= x372 x1360) 19 (x484 x372)))
(define-fun x1452 ((x372 Int)) Int (ite (= x372 x1377) x522 (x130 x372)))
(define-fun x1084 ((x372 Int)) Int (ite x689 (x130 x372) (x1452 x372)))
(define-fun x379 ((x372 Int)) Int (ite (= x155 x372) 0 (x1084 x372)))
(define-fun x239 ((x372 Int)) Int (ite x1398 (x1084 x372) (x379 x372)))
(define-fun x143 ((x372 Int)) Int (ite (= x372 x77) 19 (x239 x372)))
(define-fun x595 ((x372 Int)) Int (ite x865 (x143 x372) (x130 x372)))
(define-fun x1239 ((x372 Int)) Int (ite (= x372 x819) x1449 (x595 x372)))
(define-fun x367 ((x372 Int)) Int (ite x146 (x595 x372) (x1239 x372)))
(define-fun x332 ((x372 Int)) Int (ite (= x372 x774) 0 (x367 x372)))
(define-fun x62 ((x372 Int)) Int (ite x413 (x367 x372) (x332 x372)))
(define-fun x795 ((x372 Int)) Int (ite (= x372 x612) 13 (x62 x372)))
(define-fun x1013 ((x372 Int)) Int (ite (= x1349 x372) x310 (x795 x372)))
(define-fun x731 ((x372 Int)) Int (ite x1149 (x795 x372) (x1013 x372)))
(define-fun x1444 ((x372 Int)) Int (ite (= x1399 x372) 0 (x731 x372)))
(define-fun x74 ((x372 Int)) Int (ite x1171 (x731 x372) (x1444 x372)))
(define-fun x897 ((x372 Int)) Int (ite (= x372 x1054) 14 (x74 x372)))
(define-fun x887 ((x372 Int)) Int (ite (and (> (+ x580 0) x372) (>= x372 x580)) (x917 (+ (- x372 x580) 0)) (x897 x372)))
(define-fun x1053 ((x372 Int)) Int (ite x722 (x897 x372) (ite x584 (x887 x372) (x897 x372))))
(define-fun x638 ((x372 Int)) Int (ite x722 (x970 x372) (x917 x372)))
(define-fun x863 ((x372 Int)) Int (ite (= x372 x580) x874 (x1053 x372)))
(define-fun x133 ((x372 Int)) Int (ite (and (> (+ x874 x448) x372) (>= x372 x448)) (x638 (+ 0 (- x372 x448))) (x863 x372)))
(define-fun x412 ((x372 Int)) Int (ite x330 (x1053 x372) (x133 x372)))
(define-fun x1185 ((x372 Int)) Int (ite (= x951 x372) x15 (x412 x372)))
(define-fun x922 ((x372 Int)) Int (ite (= x1114 x372) x420 (x1185 x372)))
(define-fun x208 ((x372 Int)) Int (ite (= x1257 x372) x210 (x922 x372)))
(define-fun x199 ((x372 Int)) Int (ite x1307 (x922 x372) (x208 x372)))
(define-fun x469 ((x372 Int)) Int (ite (= x372 x943) 0 (x199 x372)))
(define-fun x137 ((x372 Int)) Int (ite x1240 (x199 x372) (x469 x372)))
(define-fun x623 ((x372 Int)) Int (ite (= x372 x426) x518 (x137 x372)))
(define-fun x1249 ((x372 Int)) Int (ite (= x372 x1446) x1301 (x623 x372)))
(define-fun x826 ((x372 Int)) Int (ite x800 (x615 x372) (ite x785 (x265 x372) (x1249 x372))))
(define-fun x1108 ((x372 Int)) Int (ite (= x1243 x372) x223 (x826 x372)))
(define-fun x600 ((x372 Int)) Int (ite (and (>= x372 x419) (> (+ x419 x223) x372)) (x769 (+ (- x372 x419) x1004)) (x1108 x372)))
(define-fun x1259 ((x372 Int)) Int (ite (= x1350 x372) 0 (x600 x372)))
(define-fun x1245 ((x372 Int)) Int (ite (= x372 x1045) x502 (x1259 x372)))
(define-fun x1073 ((x372 Int)) Int (ite x474 (x1259 x372) (x1245 x372)))
(define-fun x254 ((x372 Int)) Int (ite (= x643 x372) 0 (x1073 x372)))
(define-fun x1261 ((x372 Int)) Int (ite x752 (x1073 x372) (x254 x372)))
(define-fun x22 ((x372 Int)) Int (ite (= x1077 x372) 13 (x1261 x372)))
(define-fun x888 ((x372 Int)) Int (ite (= x857 x372) 82070247630637395725875354456112310357886651100252770250446759337321580986368 (x22 x372)))
(define-fun x570 ((x372 Int)) Int (ite (= x372 x535) 32 (x888 x372)))
(define-fun x26 ((x372 Int)) Int (ite (= x372 x664) x375 (x570 x372)))
(define-fun x145 ((x372 Int)) Int (ite (= x387 x372) x123 (x26 x372)))
(define-fun x1157 ((x372 Int)) Int (ite x25 (x26 x372) (x145 x372)))
(define-fun x407 ((x372 Int)) Int (ite (= x1383 x372) 0 (x1157 x372)))
(define-fun x680 ((x372 Int)) Int (ite x582 (x1157 x372) (x407 x372)))
(define-fun x532 ((x372 Int)) Int (ite (and (<= 68 x372) (> (+ 68 (x497 (- x1139 68))) x372)) (x680 (+ (- x372 68) (x1097 (+ x857 68)))) (x1067 x372)))
(define-fun x916 ((x372 Int)) Int (ite (= x372 128) x1178 (x1129 x372)))
(define-fun x164 ((x372 Int)) Int (ite (and (< x372 (+ x1178 160)) (<= 160 x372)) (x532 (+ 68 (- x372 160))) (x916 x372)))
(define-fun x711 ((x372 Int)) Int (ite (= x953 x372) 0 (x164 x372)))
(define-fun x60 ((x372 Int)) Int (ite (= x372 x406) x1220 (x711 x372)))
(define-fun x1384 ((x372 Int)) Int (ite (= x179 x372) x506 (x60 x372)))
(define-fun x33 ((x372 Int)) Int (ite (= x135 x372) x150 (x1384 x372)))
(define-fun x159 ((x372 Int)) Int (ite (= x848 x372) x131 (x33 x372)))
(define-fun x571 ((x372 Int)) Int (ite x50 (x33 x372) (ite x862 (x1384 x372) (ite x1313 (x60 x372) (ite x264 (x711 x372) (x159 x372))))))
(define-fun x961 ((x372 Int)) Int (ite (= x372 x134) 0 (x571 x372)))
(define-fun x1190 ((x372 Int)) Int (ite x100 (x571 x372) (x961 x372)))
(define-fun x276 ((x372 Int)) Int (ite (= x1374 x372) 112 (x1190 x372)))
(define-fun x347 ((x372 Int)) Int (ite (= x372 x541) x851 (x276 x372)))
(define-fun x55 ((x372 Int)) Int (ite (= x372 x1147) x48 (x347 x372)))
(define-fun x352 ((x372 Int)) Int (ite (= x372 x603) x735 (x55 x372)))
(define-fun x429 ((x372 Int)) Int (ite (= x568 x372) x205 (x352 x372)))
(define-fun x1403 ((x372 Int)) Int (ite x597 (x352 x372) (ite x1027 (x55 x372) (ite x671 (x347 x372) (ite x837 (x276 x372) (x429 x372))))))
(define-fun x1010 ((x372 Int)) Int (ite (= x1448 x372) 0 (x1403 x372)))
(define-fun x973 ((x372 Int)) Int (ite x431 (x1403 x372) (x1010 x372)))
(define-fun x577 ((x372 Int)) Int (ite (= x372 x880) 112 (x973 x372)))
(define-fun x1117 ((x372 Int)) Int (ite (= x372 x1031) 43611735268480658727360147997893738071856775535381453097760378360336924803072 (x577 x372)))
(define-fun x873 ((x372 Int)) Int (ite (= x1244 x372) x1304 (x1117 x372)))
(define-fun x451 ((x372 Int)) Int (ite (= x372 x1031) x490 (x873 x372)))
(define-fun x611 ((x372 Int)) Int (ite x1030 (x873 x372) (x451 x372)))
(define-fun x944 ((x372 Int)) Int (ite (= x673 x372) 105741823712686017468623175546783284002282906648395100416871018427217256382464 (x611 x372)))
(define-fun x343 ((x372 Int)) Int (ite (= x372 x879) 32 (x944 x372)))
(define-fun x1224 ((x372 Int)) Int (ite (= x772 x372) x1204 (x343 x372)))
(define-fun x1154 ((x372 Int)) Int (ite (= x1000 x372) x792 (x1224 x372)))
(define-fun x237 ((x372 Int)) Int (ite (= x119 x372) x8 (x1154 x372)))
(define-fun x1083 ((x372 Int)) Int (ite (= x372 x690) x180 (x237 x372)))
(define-fun x166 ((x372 Int)) Int (ite (= x372 x64) x777 (x1083 x372)))
(define-fun x357 ((x372 Int)) Int (ite x1026 (x1083 x372) (ite x558 (x237 x372) (ite x485 (x1154 x372) (ite x779 (x1224 x372) (x166 x372))))))
(define-fun x444 ((x372 Int)) Int (ite (= x372 x822) 0 (x357 x372)))
(define-fun x845 ((x372 Int)) Int (ite x1267 (x357 x372) (x444 x372)))
(define-fun x756 ((x372 Int)) Int (ite (and (< x372 (+ 68 (x497 (- x316 68)))) (>= x372 68)) (x845 (+ (x1097 (+ x673 68)) (- x372 68))) (x864 x372)))
(define-fun x58 ((x372 Int)) Int (ite (= 128 x372) x325 (x593 x372)))
(define-fun x687 ((x372 Int)) Int (ite (and (<= 160 x372) (< x372 (+ 160 x325))) (x756 (+ 68 (- x372 160))) (x58 x372)))
(define-fun x1401 ((x372 Int)) Int (ite (= x1421 x372) 0 (x687 x372)))
(define-fun x804 ((x372 Int)) Int (ite (= x372 x57) x1226 (x1401 x372)))
(define-fun x938 ((x372 Int)) Int (ite (= x372 x242) x108 (x804 x372)))
(define-fun x443 ((x372 Int)) Int (ite (= x372 x550) x1260 (x938 x372)))
(define-fun x99 ((x372 Int)) Int (ite (= x76 x372) x725 (x443 x372)))
(define-fun x163 ((x372 Int)) Int (ite x547 (x443 x372) (ite x1375 (x938 x372) (ite x644 (x804 x372) (ite x607 (x1401 x372) (x99 x372))))))
(define-fun x1196 ((x372 Int)) Int (ite (= x1024 x372) 0 (x163 x372)))
(define-fun x1335 ((x372 Int)) Int (ite x1466 (x163 x372) (x1196 x372)))
(define-fun x450 ((x372 Int)) Int (ite (= x920 x372) 155 (x1335 x372)))
(define-fun x1467 ((x372 Int)) Int (ite (= x305 x372) 86587964985574495804695408441416066048332504164997306664935388907017567469568 (x450 x372)))
(define-fun x1063 ((x372 Int)) Int (ite (= x372 x983) 32 (x1467 x372)))
(define-fun x1348 ((x372 Int)) Int (ite (= x372 x1126) x376 (x1063 x372)))
(define-fun x363 ((x372 Int)) Int (ite (= x836 x372) x1032 (x1348 x372)))
(define-fun x1251 ((x372 Int)) Int (ite (= x372 x838) x733 (x363 x372)))
(define-fun x1197 ((x372 Int)) Int (ite (= x372 x238) x1274 (x1251 x372)))
(define-fun x1411 ((x372 Int)) Int (ite (= x1293 x372) x268 (x1197 x372)))
(define-fun x1345 ((x372 Int)) Int (ite x1133 (x1197 x372) (ite x403 (x1251 x372) (ite x52 (x363 x372) (ite x288 (x1348 x372) (x1411 x372))))))
(define-fun x339 ((x372 Int)) Int (ite (= x372 x816) 0 (x1345 x372)))
(define-fun x126 ((x372 Int)) Int (ite x91 (x1345 x372) (x339 x372)))
(define-fun x335 ((x372 Int)) Int (ite (= x305 x372) x311 (x126 x372)))
(define-fun x331 ((x372 Int)) Int (ite x1113 (x126 x372) (x335 x372)))
(define-fun x355 ((x372 Int)) Int (ite x650 (x331 x372) (x450 x372)))
(define-fun x709 ((x372 Int)) Int (ite (= x720 x372) x49 (x355 x372)))
(define-fun x435 ((x372 Int)) Int (ite (= x1072 x372) x529 (x709 x372)))
(define-fun x462 ((x372 Int)) Int (ite (= x372 x1069) x225 (x435 x372)))
(define-fun x1086 ((x372 Int)) Int (ite (= x1060 x372) (ite x1141 1 0) (x462 x372)))
(define-fun x1211 ((x372 Int)) Int (ite (and (< x372 (+ x673 (ite (< x1280 128) x1280 128))) (<= x673 x372)) (x1086 (+ (- x372 x673) x720)) (x845 x372)))
(define-fun x923 ((x372 Int)) Int (ite x912 (x845 x372) (x1211 x372)))
(define-fun x234 ((x372 Int)) Int (ite (= x372 x924) x1304 (x923 x372)))
(define-fun x589 ((x372 Int)) Int (ite (= x372 x153) x260 (x234 x372)))
(define-fun x232 ((x372 Int)) Int (ite (= x372 x1070) x1326 (x589 x372)))
(define-fun x540 ((x372 Int)) Int (ite (= x372 x1087) x1273 (x232 x372)))
(define-fun x982 ((x372 Int)) Int (ite (= x372 x753) x902 (x540 x372)))
(define-fun x966 ((x372 Int)) Int (ite (= x372 x1253) (ite x847 1 0) (x982 x372)))
(define-fun x83 ((x372 Int)) Int (ite (and (< x372 (+ (ite (> 192 x698) x698 192) x857)) (<= x857 x372)) (x966 (+ x976 (- x372 x857))) (x680 x372)))
(define-fun x84 ((x372 Int)) Int (ite (= x372 x271) 43611735268480658727360147997893738071856775535381453097760378360336924803072 (x83 x372)))
(define-fun x51 ((x372 Int)) Int (ite (= x372 x1107) x755 (x84 x372)))
(define-fun x398 ((x372 Int)) Int (ite (= x271 x372) x1455 (x51 x372)))
(define-fun x197 ((x372 Int)) Int (ite (= x372 x1100) x565 (x398 x372)))
(define-fun x872 ((x372 Int)) Int (ite x157 (x398 x372) (x197 x372)))
(define-fun x187 ((x372 Int)) Int (ite (= x283 x372) 0 (x872 x372)))
(define-fun x416 ((x372 Int)) Int (ite x870 (x872 x372) (x187 x372)))
(define-fun x1148 ((x372 Int)) Int (ite (= x576 x372) 18 (x416 x372)))
(define-fun x866 ((x372 Int)) Int (ite (= x372 x716) x894 (x1148 x372)))
(define-fun x425 ((x372 Int)) Int (ite x933 (x1148 x372) (x866 x372)))
(define-fun x812 ((x372 Int)) Int (ite (= x372 x27) 0 (x425 x372)))
(define-fun x724 ((x372 Int)) Int (ite x1208 (x425 x372) (x812 x372)))
(define-fun x292 ((x372 Int)) Int (ite (= x372 x801) 12 (x724 x372)))
(define-fun x935 ((x372 Int)) Int (ite (= x1423 x372) x1068 (x292 x372)))
(define-fun x1025 ((x372 Int)) Int (ite x289 (x292 x372) (x935 x372)))
(define-fun x1128 ((x372 Int)) Int (ite (= x372 x323) 0 (x1025 x372)))
(define-fun x149 ((x372 Int)) Int (ite x1325 (x1025 x372) (x1128 x372)))
(define-fun x788 ((x372 Int)) Int (ite (= x372 x734) 13 (x149 x372)))
(define-fun x1252 ((x372 Int)) Int (ite (= x372 x5) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x788 x372)))
(define-fun x198 ((x372 Int)) Int (ite (= x372 x930) x941 (x1252 x372)))
(define-fun x1215 ((x372 Int)) Int (ite (= x372 x1173) x906 (x198 x372)))
(define-fun x557 ((x372 Int)) Int (ite (and (< x372 (+ x5 32)) (<= x5 x372)) (x24 (+ (- x372 x5) 0)) (x1215 x372)))
(define-fun x810 ((x372 Int)) Int (ite x177 (x557 x372) (x1215 x372)))
(define-fun x384 ((x372 Int)) Int (ite (= x372 x649) x390 (x810 x372)))
(define-fun x921 ((x372 x1471)) Int (ite x584 (x992 x372) (x598 x372)))
(define-fun x513 ((x372 x1471)) Int (ite x722 (x598 x372) (x921 x372)))
(define-fun x893 ((x372 x1471)) Int (ite x584 (x500 x372) (x641 x372)))
(define-fun x61 ((x372 x1471)) Int (ite x722 (x641 x372) (x893 x372)))
(define-fun x273 ((x372 x1471)) Int (ite x584 (x1361 x372) (x1162 x372)))
(define-fun x1074 ((x372 x1471)) Int (ite x722 (x1162 x372) (x273 x372)))
(define-fun x120 ((x372 x1471)) Int (ite (= x372 (x1080 x188)) x758 (x1152 x372)))
(define-fun x677 ((x372 x1471)) Int (ite (= (x1080 x1161) x372) x899 (x120 x372)))
(define-fun x1106 ((x372 x1471)) Int (ite x584 (x1479 x372) (x677 x372)))
(define-fun x971 ((x372 x1471)) Int (ite (= x372 (x1080 x1161)) x296 (x1106 x372)))
(define-fun x138 ((x372 x1471)) Int (ite (= x372 (x1080 x188)) x1022 (x971 x372)))
(define-fun x776 ((x372 x1471)) Int (ite x722 (x1152 x372) (ite x545 (x1106 x372) (x138 x372))))
(define-fun x636 ((x372 x1471)) Int (ite x584 (x1242 x372) (x1429 x372)))
(define-fun x1216 ((x372 x1471)) Int (ite x722 (x1429 x372) (x636 x372)))
(define-fun x1223 ((x372 x1471)) Int (ite x584 (x1119 x372) (x1012 x372)))
(define-fun x1373 ((x372 x1471)) Int (ite x722 (x1012 x372) (x1223 x372)))
(define-fun x656 ((x372 x1471)) Int (ite x800 (x1012 x372) (ite x785 (x1012 x372) (x1373 x372))))
(define-fun x37 ((x372 x1471)) Int (ite x800 (x1152 x372) (ite x785 (x1152 x372) (x776 x372))))
(define-fun x950 ((x372 x1471)) Int (ite x800 (x598 x372) (ite x785 (x598 x372) (x513 x372))))
(define-fun x280 ((x372 x1471)) Int (ite x800 (x641 x372) (ite x785 (x641 x372) (x61 x372))))
(define-fun x1091 ((x372 x1471)) Int (ite x800 (x1162 x372) (ite x785 (x1162 x372) (x1074 x372))))
(define-fun x411 ((x372 x1471)) Int (ite x800 (x1429 x372) (ite x785 (x1429 x372) (x1216 x372))))
(define-fun x73 ((x372 Int)) Int (ite (= 0 x372) x490 (x1338 x372)))
(define-fun x334 ((x372 Int)) Int (ite (and (> (+ x698 0) x372) (<= 0 x372)) (x966 (+ x976 (- x372 0))) (x654 x372)))
(define-fun x158 ((x372 Int)) Int (ite (and (> (+ 68 (x497 (- x1284 68))) x372) (<= 68 x372)) (x126 (+ (- x372 68) (x1097 (+ 68 x305)))) (x315 x372)))
(define-fun x1002 ((x372 Int)) Int (ite (= x372 128) x606 (x909 x372)))
(define-fun x1052 ((x372 Int)) Int (ite (and (> (+ x1280 0) x372) (>= x372 0)) (x1086 (+ (- x372 0) x720)) (x141 x372)))
(define-fun x1438 ((x372 Int)) Int (ite (= 0 x372) x311 (x124 x372)))
(define-fun x913 ((x372 Int)) Int (ite x1113 (x124 x372) (x1438 x372)))
(define-fun x559 ((x372 Int)) Int (ite (and (>= x372 160) (> (+ x606 160) x372)) (x158 (+ 68 (- x372 160))) (x1002 x372)))
(define-fun x706 ((x372 Int)) Int (ite (= x372 x21) 0 (x559 x372)))
(define-fun x228 ((x372 Int)) Int (ite (= x372 x1191) 112 (x706 x372)))
(define-fun x1079 ((x394 Int)) Bool (=> (and (not (= x394 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= x394 2376452955)) (not (= x394 1461501637330902918203684832716283019655932542976)) (not (= x394 3104404863)) (not (= x394 1000000000000000000000000)) (not (= 1208925819614629174706175 x394)) (not (= x394 1461501637330902918203684832716283019655932542975)) (not (= x394 2710164492)) (not (= 2061859742 x394)) (not (= x394 2996296902)) (not (= x394 1208925819614629174706176)) (not (= 86587964985574495804695408441416066048332504164997306664935388907017567469568 x394)) (not (= x394 3450351392)) (not (= x394 1617649167)) (not (= x394 4294967296)) (not (= 3548638100 x394)) (not (= 2745196236 x394)) (not (= 2868243304 x394)) (not (= 105741823712686017468623175546783284002282906648395100416871018427217256382464 x394)) (not (= 1000000000 x394)) (not (= x394 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x394 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 2872958028 x394)) (not (= 3211726123 x394)) (not (= 3044154673 x394)) (not (= 3922182229 x394)) (not (= x394 82070247630637395725875354456112310357886651100252770250446759337321580986368)) (not (= x394 18446744073709551615)) (not (= 1882194962 x394)) (not (= x394 1405909242)) (< 10000 x394) (not (= 3592363634 x394)) (not (= x394 43611735268480658727360147997893738071856775535381453097760378360336924803072)) (not (= x394 3109197603)) (not (= x394 65536)) (not (= 65535 x394)) (not (= x394 3624036542)) (not (= x394 2075580284))) (not ((_ is x1034) (x1080 x394)))))
(assert (=> (>= 10000 x1414) (= (x1034 x1414) (x1080 x1414))))
(assert (= (and x1248 x1332) x714))
(assert (x1079 (x276 (x1097 (+ x1031 128)))))
(assert (x1079 (x795 (x1097 (+ 64 x580)))))
(assert (x585 x1377))
(assert (= (and x1470 x1330) x1419))
(assert (= x492 (or x1337 x813)))
(assert (= (=> (and (= (not (> x420 32)) x1459) (= x210 (x922 160)) (= x1257 x1090)) (and (=> (= 32 x152) x1341) x1459)) x75))
(assert (x585 x1212))
(assert (= x1254 (=> (and (= (> x1346 x1153) x172) (or (not x172) (and (= (x1097 (+ x5 x1153)) x283) x172))) x659)))
(assert (= (and x319 x14) x1366))
(assert (= (x593 (+ x720 (- (+ (- (x1097 (+ x5 128)) x857) x976) x673))) 0))
(assert (x1079 x447))
(assert (= (x1080 1461501637330902918203684832716283019655932542975) (x1034 1461501637330902918203684832716283019655932542975)))
(assert (= (and x767 (not x1206)) x1142))
(assert (x585 x942))
(assert (x695 x538))
(assert (x585 x1147))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ (- x594 x673) x720) 160)) 68)) 160) 68) 68)) x448))))
(assert (x1079 x586))
(assert (x1079 (x130 (x1097 (+ x580 96)))))
(assert (x504 x293))
(assert (= 3624036542 (x1331 (x1034 3624036542))))
(assert (x1079 (x276 x1031)))
(assert (x44 x117))
(assert (x585 x495))
(assert (= (x1129 (+ (- x578 x857) x976)) 0))
(assert (= (x430 (+ (- (+ 68 (- (+ x976 (- (x1097 (+ x5 128)) x857)) 160)) 68) (x1097 (+ 68 x857)))) 0))
(assert (= (and x214 x112) x477))
(assert (x585 x1104))
(assert (x1079 x658))
(assert (x585 x15))
(assert (x585 x1456))
(assert (= 0 (x970 (- x402 x448))))
(assert (x585 x1290))
(assert (= (or x182 x1149) x336))
(assert (x585 x594))
(assert (= (x1080 1461501637330902918203684832716283019655932542976) (x1034 1461501637330902918203684832716283019655932542976)))
(assert (=> (<= (x577 (x1097 (+ 192 x1031))) 10000) (= (x1080 (x577 (x1097 (+ x1031 192)))) (x1034 (x577 (x1097 (+ 192 x1031)))))))
(assert (x1079 (x228 160)))
(assert (x1079 (x1148 (x1097 (+ 64 x5)))))
(assert (= 0 (x593 (+ 128 (x1097 (+ x305 68))))))
(assert (=> (<= (x577 (x1097 (+ x1031 96))) 10000) (= (x1080 (x577 (x1097 (+ x1031 96)))) (x1034 (x577 (x1097 (+ x1031 96)))))))
(assert (x585 x1191))
(assert (= (and x493 x1397) x1386))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ x976 (- x657 x857)) 160) 68) 68)) x448)) 0))
(assert (= (x1331 (x1080 (x795 (x1097 (+ x580 128))))) (x795 (x1097 (+ x580 128)))))
(assert (x585 x725))
(assert (x1079 (x897 x580)))
(assert (= 0 (x430 x580)))
(assert (x585 x1350))
(assert (= (and x381 (not x38)) x413))
(assert (= (and (not x742) x400) x39))
(assert (x585 x1292))
(assert (= 0 (x1129 (+ (x1097 (+ 68 x673)) (- (+ (- (x1097 (+ x305 64)) 160) 68) 68)))))
(assert (= x1175 (and x1172 (not x382))))
(assert (x585 x455))
(assert (x585 x539))
(assert (= (or x1133 x52 x42 x403 x288) x1023))
(assert (= 0 (x430 (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ (- (+ x976 (- x856 x857)) x673) x720) 160)) 68)) 160)) 68)))))
(assert (=> (<= (x788 (x1097 (+ 128 x5))) 10000) (= (x1080 (x788 (x1097 (+ x5 128)))) (x1034 (x788 (x1097 (+ x5 128)))))))
(assert (x585 x1226))
(assert (= (x1080 3044154673) (x1034 3044154673)))
(assert (x585 x66))
(assert (x504 x475))
(assert (x585 x891))
(assert (x585 x631))
(assert (x585 x27))
(assert (= (x970 (- (+ (- (+ (- x594 160) 68) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ 68 (- (+ (- x976 x673) x720) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68)))))
(assert (x1079 (x897 (x1097 (+ 160 x580)))))
(assert (= (=> (and (= x1158 (not (> x957 32))) (= x905 (x466 160)) (= x1355 x580)) (and x1158 (=> (= 32 x1202) x624))) x304))
(assert (x1079 x1187))
(assert (x585 x1453))
(assert (x585 x278))
(assert (x1079 (x788 (x1097 (+ x5 64)))))
(assert (x585 x801))
(assert (x585 x266))
(assert (x585 x960))
(assert (= (x1011 x580) (x1331 (x1080 (x1011 x580)))))
(assert (= (x1148 x5) (x1331 (x1080 (x1148 x5)))))
(assert (= 0 (x909 224)))
(assert (x1079 (x292 (x1097 (+ 160 x5)))))
(assert (= (and (not x142) x911) x489))
(assert (= x779 (and x1385 (not x1318))))
(assert (= (x228 192) (x1331 (x1080 (x228 192)))))
(assert (=> (<= (x897 (x1097 (+ 128 x580))) 10000) (= (x1080 (x897 (x1097 (+ 128 x580)))) (x1034 (x897 (x1097 (+ 128 x580)))))))
(assert (= (x1129 (x1097 (+ x1031 64))) 0))
(assert (= (and (not x892) x994) x178))
(assert (= 0 (x1129 (+ 64 (x1097 (+ 68 x673))))))
(assert (x695 x453))
(assert (x585 x661))
(assert (=> (<= x188 10000) (= (x1080 x188) (x1034 x188))))
(assert (x585 x48))
(assert (x504 x551))
(assert (x585 x1364))
(assert (x695 x1213))
(assert (=> (<= (x265 (x1097 (+ 32 x580))) 10000) (= (x1080 (x265 (x1097 (+ x580 32)))) (x1034 (x265 (x1097 (+ 32 x580)))))))
(assert (x585 x1101))
(assert (x585 x952))
(assert (= (x450 (x1097 (+ x305 160))) (x1331 (x1080 (x450 (x1097 (+ x305 160)))))))
(assert (= x154 (=> (= x438 (not (> x371 1))) (and (=> (and (= x1243 x775) (= x1372 x366)) x41) x438))))
(assert (x1079 (x265 (x1097 (+ x580 64)))))
(assert (= x1297 (and x456 x167)))
(assert (=> (>= 10000 (x466 x580)) (= (x1034 (x466 x580)) (x1080 (x466 x580)))))
(assert (= (or (and x1315 (not x317)) x701) x301))
(assert (= (x430 (+ (- (+ (- (+ (- (+ 68 (- (+ x720 (- (+ (- (x1097 (+ 128 x5)) x857) x976) x673)) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ x857 68)))) 0))
(assert (= (x1331 (x1034 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x1079 (x143 (x1097 (+ 192 x580)))))
(assert (x585 x1182))
(assert (= (x430 (+ (- (+ (- (+ (- (+ (- (x1097 (+ x305 96)) 160) 68) 68) (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ 68 x857)))) 0))
(assert (x585 x206))
(assert (= 65536 (x1331 (x1034 65536))))
(assert (x1079 (x1011 x580)))
(assert (= (x1331 (x1080 x658)) x658))
(assert (= (and (not x1475) x1016) x288))
(assert (x1079 (x228 288)))
(assert (x585 x586))
(assert (= (x1080 1208925819614629174706176) (x1034 1208925819614629174706176)))
(assert (x585 x1258))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ (- (+ 68 (- (+ x720 (- (+ x976 (- x5 x857)) x673)) 160)) 68) (x1097 (+ x673 68))) 160)) 68)) x448)) 0))
(assert (x585 x310))
(assert (x585 x790))
(assert (= x763 (or x25 x588)))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ x720 (- (+ (- (x1097 (+ 128 x5)) x857) x976) x673)) 160)) 68)) 160)) 68)) x448))))
(assert (= 0 (x430 (x1097 (+ 96 x857)))))
(assert (= (x1331 (x1080 x1425)) x1425))
(assert (x585 x86))
(assert (= (x1331 (x1034 3104404863)) 3104404863))
(assert (x585 x104))
(assert (x585 x1219))
(assert (x585 x196))
(assert (= x483 (and (not x744) x740)))
(assert (x585 x125))
(assert (= (x1331 (x1080 x1461)) x1461))
(assert (=> (<= (x228 224) 10000) (= (x1034 (x228 224)) (x1080 (x228 224)))))
(assert (x585 x5))
(assert (x585 x903))
(assert (x585 x1314))
(assert (= 0 (x1129 (+ (- (+ 68 (- (x1097 (+ x305 128)) 160)) 68) (x1097 (+ 68 x673))))))
(assert (x585 x1247))
(assert (= (x824 (x1097 (+ x580 128))) (x1331 (x1080 (x824 (x1097 (+ 128 x580)))))))
(assert (=> (<= x1161 10000) (= (x1080 x1161) (x1034 x1161))))
(assert (x585 x805))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (- (+ 68 (- (+ (- (+ (- x657 x857) x976) x673) x720) 160)) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (x1079 x645))
(assert (x585 x759))
(assert (=> (<= (x292 (x1097 (+ x5 128))) 10000) (= (x1080 (x292 (x1097 (+ x5 128)))) (x1034 (x292 (x1097 (+ 128 x5)))))))
(assert (=> (<= x755 10000) (= (x1080 x755) (x1034 x755))))
(assert (=> (>= 10000 (x292 (x1097 (+ x5 32)))) (= (x1080 (x292 (x1097 (+ x5 32)))) (x1034 (x292 (x1097 (+ x5 32)))))))
(assert (= (=> (and (= (> x295 x1309) x1043) (or (and x1043 (= (x1097 (+ x1309 x580)) x1227)) (not x1043))) x1382) x201))
(assert (x585 x82))
(assert (= (x1331 (x1080 (x824 (x1097 (+ 32 x580))))) (x824 (x1097 (+ x580 32)))))
(assert (= x607 (and (not x1055) x1015)))
(assert (= (and x1343 x336) x829))
(assert (x1079 x1303))
(assert (= (x430 (x1097 (+ 192 x5))) 0))
(assert (= 0 (x1129 (+ x976 (- (x1097 (+ 64 x5)) x857)))))
(assert (= 0 (x970 (- (+ (x1097 (+ 68 x857)) (- (+ (- (+ (- (+ 68 (- (+ (- (+ x976 (- (x1097 (+ 160 x5)) x857)) x673) x720) 160)) 68) (x1097 (+ 68 x673))) 160) 68) 68)) x448))))
(assert (= (x1080 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x1034 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x585 x92))
(assert (x585 x171))
(assert (= (x466 x580) (x1331 (x1080 (x466 x580)))))
(assert (= (and x1299 x972) x498))
(assert (x585 x324))
(assert (x585 x354))
(assert (x585 x1304))
(assert (x585 x568))
(assert (= (x897 x580) (x1331 (x1080 (x897 x580)))))
(assert (x585 x1202))
(assert (x585 x723))
(assert (= (=> (and (= x1286 (x1148 x1243)) (= x151 (< 0 x1286))) (and (=> x151 x919) (=> (and (= x284 0) (not x151)) x432))) x521))
(assert (x585 x1256))
(assert (= 0 (x430 (x1097 (+ 64 x857)))))
(assert (= (x1129 (+ x976 (- (x1097 (+ 32 x5)) x857))) 0))
(assert (x585 x580))
(assert (x1079 x1161))
(assert (= (x577 (x1097 (+ 32 x1031))) (x1331 (x1080 (x577 (x1097 (+ x1031 32)))))))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (- (+ (- (+ (x1097 (+ x305 68)) 128) 160) 68) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (x585 x1369))
(assert (= x1431 (or x1325 x1379)))
(assert (=> (>= 10000 x1303) (= (x1080 x1303) (x1034 x1303))))
(assert (= (x1080 18446744073709551615) (x1034 18446744073709551615)))
(assert (= (x1331 (x1080 (x265 (x1097 (+ x580 128))))) (x265 (x1097 (+ x580 128)))))
(assert (= (x466 (x1097 (+ x580 32))) (x1331 (x1080 (x466 (x1097 (+ x580 32)))))))
(assert (=> (<= x328 10000) (= (x1034 x328) (x1080 x328))))
(assert (= 3109197603 (x1331 (x1034 3109197603))))
(assert (= x697 (and x892 x994)))
(assert (x695 x796))
(assert (x585 x1432))
(assert (= (and x1046 (not x726)) x1115))
(assert (=> (<= x1425 10000) (= (x1034 x1425) (x1080 x1425))))
(assert (x585 x476))
(assert (= 0 (x430 x129)))
(assert (x1079 (x1011 (x1097 (+ x580 96)))))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ 96 (x1097 (+ x305 68))) 160)) 68))) 0))
(assert (x1079 x328))
(assert (x585 x441))
(assert (x585 x244))
(assert (x585 x419))
(assert (x585 x1416))
(assert (= (x1331 (x1080 (x22 (x1097 (+ x857 32))))) (x22 (x1097 (+ 32 x857)))))
(assert (= 0 (x970 (- (+ (- (+ (- (+ (- (x1097 (+ x5 64)) x857) x976) 160) 68) 68) (x1097 (+ x857 68))) x448))))
(assert (= (x130 x580) (x1331 (x1080 (x130 x580)))))
(assert (x585 x69))
(assert (=> (<= (x228 288) 10000) (= (x1034 (x228 288)) (x1080 (x228 288)))))
(assert (=> (>= 10000 (x788 (x1097 (+ 96 x5)))) (= (x1034 (x788 (x1097 (+ x5 96)))) (x1080 (x788 (x1097 (+ x5 96)))))))
(assert (= (x1080 3104404863) (x1034 3104404863)))
(assert (x585 x591))
(assert (x585 x1092))
(assert (x585 x468))
(assert (x585 x233))
(assert (x585 x1130))
(assert (= 0 (x430 (x1097 (+ 96 x580)))))
(assert (x585 x564))
(assert (x1079 (x931 (x1097 (+ 192 x580)))))
(assert (x1079 (x788 (x1097 (+ 160 x5)))))
(assert (x585 x643))
(assert (x585 x1135))
(assert (x585 x616))
(assert (= x229 (=> (and (= (not (< 32 x1165)) x1207) (= (x1011 160) x583) (= x104 x580)) (and (=> (= x1180 32) x471) x1207))))
(assert (x585 x1179))
(assert (x585 x738))
(assert (= 0 (x593 192)))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (- (+ (- (+ x720 (- (+ x976 (- (x1097 (+ 64 x5)) x857)) x673)) 160) 68) 68) (x1097 (+ 68 x673))) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ 96 (x1097 (+ 68 x673))) 160)) 68))) 0))
(assert (= 0 (x970 (- (+ (x1097 (+ 68 x857)) (- (+ (- (+ (- (x1097 (+ x5 160)) x857) x976) 160) 68) 68)) x448))))
(assert (= (and x105 x151) x1186))
(assert (x585 x1286))
(assert (x585 x953))
(assert (x585 x1455))
(assert (= (x897 (x1097 (+ x580 128))) (x1331 (x1080 (x897 (x1097 (+ x580 128)))))))
(assert (x585 x325))
(assert (= 0 (x909 256)))
(assert (= (x1129 192) 0))
(assert (x585 x464))
(assert (= x431 (and x1033 (not x999))))
(assert (x585 x1395))
(assert (=> (>= 10000 x118) (= (x1080 x118) (x1034 x118))))
(assert (= (=> (and (= x420 (x1185 128)) (= x1090 (x1097 (+ x1114 32))) (= 96 x15) (> x230 0) (= (x1097 (+ x951 96)) x1114) (= x112 (> x420 0))) (and (=> x112 x75) (=> (and (= x152 0) (not x112)) x1341))) x997))
(assert (= 0 (x593 (x1097 (+ 96 x305)))))
(assert (= (and x1023 (not x116)) x91))
(assert (x585 x774))
(assert (x585 x835))
(assert (= (x1331 (x1080 (x466 (x1097 (+ 64 x580))))) (x466 (x1097 (+ 64 x580)))))
(assert (x585 x957))
(assert (x585 x257))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (x1097 (+ x673 68)) (- (+ (- (x1097 (+ 96 x305)) 160) 68) 68)) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (= (x265 (x1097 (+ x580 96))) (x1331 (x1080 (x265 (x1097 (+ 96 x580)))))))
(assert (x585 x518))
(assert (x585 x306))
(assert (x1079 (x265 (x1097 (+ x580 96)))))
(assert (x585 x203))
(assert (x585 x447))
(assert (x585 x311))
(assert (x585 x192))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- x594 160) 68) 68)))))
(assert (x585 x77))
(assert (= 0 (x430 (x1097 (+ x857 128)))))
(assert (= 0 (x430 (x1097 (+ x857 192)))))
(assert (x695 x117))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (- (+ 68 (- (+ (- (+ x976 (- (x1097 (+ 32 x5)) x857)) x673) x720) 160)) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (= x1396 (and x1198 (not x1268))))
(assert (x585 x169))
(assert (x585 x652))
(assert (= (x1331 (x1080 (x897 (x1097 (+ x580 192))))) (x897 (x1097 (+ 192 x580)))))
(assert (= (=> (and (or x1392 (not x1392)) (= x1392 (= x1081 0))) x967) x1177))
(assert (= 0 (x970 (- (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ (- (+ 64 (x1097 (+ 68 x305))) 160) 68) 68)) 160)) 68)) x448))))
(assert (x585 x741))
(assert (=> (>= 10000 (x824 (x1097 (+ x580 192)))) (= (x1034 (x824 (x1097 (+ x580 192)))) (x1080 (x824 (x1097 (+ x580 192)))))))
(assert (= (and x718 x172) x915))
(assert (= (x430 (+ (- (+ (- (+ (- (+ 68 (- (+ x720 (- (+ x976 (- x578 x857)) x673)) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ x857 68)))) 0))
(assert (= 0 (x593 (+ x720 (- (+ x976 (- x1001 x857)) x673)))))
(assert (x585 x452))
(assert (=> (<= (x292 x5) 10000) (= (x1080 (x292 x5)) (x1034 (x292 x5)))))
(assert (=> (<= (x276 x1031) 10000) (= (x1034 (x276 x1031)) (x1080 (x276 x1031)))))
(assert (=> (<= (x450 (x1097 (+ 192 x305))) 10000) (= (x1080 (x450 (x1097 (+ x305 192)))) (x1034 (x450 (x1097 (+ 192 x305)))))))
(assert (= (x466 (x1097 (+ x580 96))) (x1331 (x1080 (x466 (x1097 (+ x580 96)))))))
(assert (x585 x806))
(assert (= (x795 (x1097 (+ 96 x580))) (x1331 (x1080 (x795 (x1097 (+ 96 x580)))))))
(assert (= (or x1171 x829) x1470))
(assert (x585 x1336))
(assert (=> (>= 10000 (x824 x580)) (= (x1034 (x824 x580)) (x1080 (x824 x580)))))
(assert (= (x1331 (x1080 (x1011 (x1097 (+ x580 160))))) (x1011 (x1097 (+ x580 160)))))
(assert (x585 x356))
(assert (x585 x796))
(assert (x585 x822))
(assert (= (and x841 x478) x745))
(assert (= (and x1392 x219) x358))
(assert (x585 x575))
(assert (= (x593 (+ (- x1463 x673) x720)) 0))
(assert (x585 x1400))
(assert (= 0 (x1129 x976)))
(assert (x585 x1285))
(assert (=> (>= 10000 (x130 x580)) (= (x1080 (x130 x580)) (x1034 (x130 x580)))))
(assert (= (x1331 (x1080 (x1148 (x1097 (+ x5 32))))) (x1148 (x1097 (+ x5 32)))))
(assert (=> (>= 10000 (x22 (x1097 (+ 192 x857)))) (= (x1080 (x22 (x1097 (+ x857 192)))) (x1034 (x22 (x1097 (+ 192 x857)))))))
(assert (= (and x686 x1150) x361))
(assert (x585 x549))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ 68 (- x306 160)) 68))) 0))
(assert (= x421 (and x685 x1370)))
(assert (= 0 (x593 (+ 192 (x1097 (+ 68 x305))))))
(assert (x585 x662))
(assert (x585 x127))
(assert (= (=> (and (= (x1097 (+ x734 32)) x441) (= x87 (<= x165 224)) (= (x1097 (+ x5 x28)) x734) (= x165 (x497 (- x925 32))) (= x925 (x497 (- x441 x5)))) (and (=> (and (= (>= 224 x925) x563) (= (ite (>= 32 x165) (x389 (x1080 (x788 x5)) 0) (ite (>= 64 x165) (x719 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) 0) (ite (<= x165 96) (x562 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ 64 x5)))) 0) (ite (>= 128 x165) (x517 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ x5 64)))) (x1080 (x788 (x1097 (+ x5 96)))) 0) (ite (>= 160 x165) (x1062 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ x5 32)))) (x1080 (x788 (x1097 (+ 64 x5)))) (x1080 (x788 (x1097 (+ 96 x5)))) (x1080 (x788 (x1097 (+ x5 128)))) 0) (ite (>= 192 x165) (x948 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ x5 64)))) (x1080 (x788 (x1097 (+ x5 96)))) (x1080 (x788 (x1097 (+ 128 x5)))) (x1080 (x788 (x1097 (+ x5 160)))) 0) (ite (<= x165 224) (x344 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ 64 x5)))) (x1080 (x788 (x1097 (+ x5 96)))) (x1080 (x788 (x1097 (+ x5 128)))) (x1080 (x788 (x1097 (+ x5 160)))) (x1080 (x788 (x1097 (+ x5 192)))) 0) (x1080 x1303)))))))) x190)) (and x563 (=> (and (or (and x528 (and x1287 (= (>= (x340 (x1080 x188)) x738) x1287) (= x738 (x37 (x1080 x188))) (= x1238 (= (x340 (x1080 x291)) x1102)) (= x1102 (x37 (x1080 x291))) x1238 (> 4294967296 x823))) (not x528)) (and (>= x900 0) (= (x719 (x1080 x853) (ite (>= 32 x925) (x389 (x1080 (x788 x5)) 0) (ite (<= x925 64) (x719 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) 0) (ite (>= 96 x925) (x562 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ 64 x5)))) 0) (ite (<= x925 128) (x517 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ x5 64)))) (x1080 (x788 (x1097 (+ 96 x5)))) 0) (ite (>= 160 x925) (x1062 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ 64 x5)))) (x1080 (x788 (x1097 (+ 96 x5)))) (x1080 (x788 (x1097 (+ x5 128)))) 0) (ite (<= x925 192) (x948 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ x5 32)))) (x1080 (x788 (x1097 (+ x5 64)))) (x1080 (x788 (x1097 (+ x5 96)))) (x1080 (x788 (x1097 (+ 128 x5)))) (x1080 (x788 (x1097 (+ x5 160)))) 0) (ite (<= x925 224) (x344 (x1080 (x788 x5)) (x1080 (x788 (x1097 (+ 32 x5)))) (x1080 (x788 (x1097 (+ 64 x5)))) (x1080 (x788 (x1097 (+ x5 96)))) (x1080 (x788 (x1097 (+ x5 128)))) (x1080 (x788 (x1097 (+ x5 160)))) (x1080 (x788 (x1097 (+ x5 192)))) 0) (x1080 x1182)))))))) 0) x728) (= x528 (< 0 x1081)) (<= x900 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x930 (x1097 (+ x5 4))) (= (x1097 (+ x930 32)) x1173) (= x900 (x1125 x728)) (= (x896 1461501637330902918203684832716283019655932542975 x1314) x941) (not (> x906 x900)) (= (x497 (- x900 x906)) x388))) x1177))) x87)) x3))
(assert (= (x1129 (+ (x1097 (+ x673 68)) (- (+ (- (+ (- (+ x976 (- x856 x857)) x673) x720) 160) 68) 68))) 0))
(assert (x585 x625))
(assert (= x820 (or x584 x1291)))
(assert (=> (>= 10000 (x466 (x1097 (+ 32 x580)))) (= (x1080 (x466 (x1097 (+ 32 x580)))) (x1034 (x466 (x1097 (+ x580 32)))))))
(assert (=> (>= 10000 (x265 (x1097 (+ x580 64)))) (= (x1080 (x265 (x1097 (+ 64 x580)))) (x1034 (x265 (x1097 (+ 64 x580)))))))
(assert (= (x1080 1405909242) (x1034 1405909242)))
(assert (x585 x391))
(assert (x1079 x755))
(assert (= (x795 (x1097 (+ 192 x580))) (x1331 (x1080 (x795 (x1097 (+ x580 192)))))))
(assert (= (x1331 (x1080 (x931 (x1097 (+ x580 160))))) (x931 (x1097 (+ 160 x580)))))
(assert (= (and x1143 x634) x114))
(assert (= x1430 (x1331 (x1080 x1430))))
(assert (= (and (not x1397) x493) x671))
(assert (=> (>= 10000 (x897 (x1097 (+ x580 192)))) (= (x1080 (x897 (x1097 (+ 192 x580)))) (x1034 (x897 (x1097 (+ x580 192)))))))
(assert (= (x430 (x1097 (+ 32 x857))) 0))
(assert (=> (<= (x292 (x1097 (+ x5 96))) 10000) (= (x1080 (x292 (x1097 (+ 96 x5)))) (x1034 (x292 (x1097 (+ x5 96)))))))
(assert (= 1000000000000000000000000 (x1331 (x1034 1000000000000000000000000))))
(assert (= (x1011 (x1097 (+ x580 64))) (x1331 (x1080 (x1011 (x1097 (+ 64 x580)))))))
(assert (x585 x383))
(assert (x585 x1165))
(assert (= x718 (or x157 x1412)))
(assert (= x768 (and (=> (and x231 (and (= (x1097 (+ x1126 32)) x1094) (<= x1372 1461501637330902918203684832716283019655932542975) (= x376 (x1063 128)) (= (< 0 x376) x1475) (> 1461501637330902918203684832716283019655932542976 x1372) (= x983 (x1097 (+ x305 4))) (= x1126 (x1097 (+ 32 x983))) (>= x1372 0))) (and (=> (and (= 0 x338) (not x1475)) x754) (=> (and x1475 (and (= x6 (> x376 32)) (= (x1348 160) x1032) (= x836 x1094))) (and (=> (and x6 (and (= x838 (x1097 (+ x1094 32))) (= x173 (> x376 64)) (= (x363 192) x733))) (and (=> (and x173 (and (= (x1251 224) x1274) (= (x1097 (+ 64 x1094)) x238) (= (< 96 x376) x1275))) (and (=> x1275 x1406) (=> (and (not x1275) (= 96 x338)) x754))) (=> (and (= 64 x338) (not x173)) x754))) (=> (and (= x338 32) (not x6)) x754))))) (=> (and (not x231) (and (= x720 x305) (= x290 x231))) x707))))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (x1097 (+ 64 x1031)) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (= 0 (x430 (x1097 (+ x5 128)))))
(assert (= (x1331 (x1080 x1057)) x1057))
(assert (= (and x1477 x554) x1061))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ (- (+ (- (+ 68 (- (+ (x1097 (+ x305 68)) 192) 160)) 68) (x1097 (+ 68 x673))) 160) 68) 68))) 0))
(assert (= (x1129 (+ x976 (- (x1097 (+ x5 128)) x857))) 0))
(assert (x585 x287))
(assert (x585 x1072))
(assert (x504 x93))
(assert (x585 x530))
(assert (= 0 (x430 (+ (- (+ (- (+ (x1097 (+ 68 x673)) 32) 160) 68) 68) (x1097 (+ 68 x857))))))
(assert (x585 x1355))
(assert (x585 x487))
(assert (x585 x122))
(assert (= x471 (=> (and (= (< x1165 x1180) x1302) (or (not x1302) (and x1302 (= x1092 (x1097 (+ x580 x1165)))))) x629)))
(assert (= (x788 (x1097 (+ x5 96))) (x1331 (x1080 (x788 (x1097 (+ x5 96)))))))
(assert (=> (>= 10000 (x143 x580)) (= (x1034 (x143 x580)) (x1080 (x143 x580)))))
(assert (= (x1034 1617649167) (x1080 1617649167)))
(assert (= (and (not x1145) x834) x47))
(assert (x1079 (x795 (x1097 (+ x580 192)))))
(assert (x585 x520))
(assert (= (or x227 x111) x1143))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) 96) x448)) 0))
(assert (x585 x1003))
(assert (= x447 (x1331 (x1080 x447))))
(assert (x585 x1227))
(assert (= (and x1023 x116) x815))
(assert (x585 x683))
(assert (=> (<= x1285 10000) (= (x1034 x1285) (x1080 x1285))))
(assert (= (x970 (- (+ (- (+ (- (+ 32 (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (x585 x1284))
(assert (x585 x619))
(assert (x585 x250))
(assert (x1079 (x450 (x1097 (+ x305 32)))))
(assert (=> (>= 10000 (x466 (x1097 (+ 96 x580)))) (= (x1034 (x466 (x1097 (+ 96 x580)))) (x1080 (x466 (x1097 (+ 96 x580)))))))
(assert (= (x1331 (x1080 (x22 (x1097 (+ x857 160))))) (x22 (x1097 (+ 160 x857)))))
(assert (= (x1331 (x1080 (x1011 (x1097 (+ 96 x580))))) (x1011 (x1097 (+ x580 96)))))
(assert (x585 x851))
(assert (= (=> (and (= x1454 (< x420 x152)) (or (and x1454 (= (x1097 (+ x1090 x420)) x943)) (not x1454))) x859) x1341))
(assert (=> (>= 10000 (x292 (x1097 (+ x5 64)))) (= (x1080 (x292 (x1097 (+ 64 x5)))) (x1034 (x292 (x1097 (+ 64 x5)))))))
(assert (= x686 (and x162 x737)))
(assert (x585 x320))
(assert (x585 x1169))
(assert (= (x1080 82070247630637395725875354456112310357886651100252770250446759337321580986368) (x1034 82070247630637395725875354456112310357886651100252770250446759337321580986368)))
(assert (= (x593 (+ (- (+ (- (x1097 (+ 160 x5)) x857) x976) x673) x720)) 0))
(assert (= (=> (and (= x1280 x1306) (= x1280 128) (= (x1097 (+ x720 32)) x1072) (= x1141 x290) (= x1069 (x1097 (+ 32 x1072))) (= 1 x445) (= (x1097 (+ 32 x1069)) x1060)) x609) x707))
(assert (x1079 (x788 (x1097 (+ 128 x5)))))
(assert (= (x1331 (x1080 (x931 (x1097 (+ 128 x580))))) (x931 (x1097 (+ x580 128)))))
(assert (x1079 (x22 x857)))
(assert (= (or x854 x980) x546))
(assert (x585 x170))
(assert (x585 x809))
(assert (= (or x798 x1030) x1385))
(assert (=> (>= 10000 x194) (= (x1080 x194) (x1034 x194))))
(assert (= 2376452955 (x1331 (x1034 2376452955))))
(assert (=> (>= 10000 (x265 (x1097 (+ x580 96)))) (= (x1080 (x265 (x1097 (+ 96 x580)))) (x1034 (x265 (x1097 (+ x580 96)))))))
(assert (x1079 (x824 x580)))
(assert (= (x228 352) (x1331 (x1080 (x228 352)))))
(assert (= x1375 (and (not x107) x1440)))
(assert (= (or x330 x39) x214))
(assert (x695 x632))
(assert (x1079 (x1148 (x1097 (+ 128 x5)))))
(assert (x585 x900))
(assert (x585 x338))
(assert (x585 x461))
(assert (x585 x1161))
(assert (= 0 (x430 (+ (x1097 (+ 68 x857)) (- (+ (- x495 160) 68) 68)))))
(assert (= (x1331 (x1080 (x22 (x1097 (+ 128 x857))))) (x22 (x1097 (+ x857 128)))))
(assert (x585 x856))
(assert (= (x593 (+ (- (+ x976 (- (x1097 (+ x5 32)) x857)) x673) x720)) 0))
(assert (x1079 (x824 (x1097 (+ x580 160)))))
(assert (= (and (not x1181) x220) x458))
(assert (x585 x831))
(assert (= (and x763 x1333) x1044))
(assert (x585 x658))
(assert (x1079 (x130 (x1097 (+ x580 32)))))
(assert (= x1015 (and x1155 (not x115))))
(assert (= (and (not x1043) x1105) x854))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x1331 (x1034 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (x585 x1450))
(assert (= x79 (and x454 (not x840))))
(assert (x585 x771))
(assert (x585 x283))
(assert (= (and (not x867) x79) x681))
(assert (= (x1129 (+ (- (+ (- (+ x720 (- (+ (- x402 x857) x976) x673)) 160) 68) 68) (x1097 (+ x673 68)))) 0))
(assert (x585 x792))
(assert (=> (>= 10000 (x228 320)) (= (x1080 (x228 320)) (x1034 (x228 320)))))
(assert (= (x1331 (x1080 (x292 (x1097 (+ 160 x5))))) (x292 (x1097 (+ x5 160)))))
(assert (= x1221 (and x908 (not x949))))
(assert (= 1000000000 (x1331 (x1034 1000000000))))
(assert (= (x276 x1031) (x1331 (x1080 (x276 x1031)))))
(assert (= 0 (x1129 (+ (- (+ 68 (- (+ x720 (- (+ (- x5 x857) x976) x673)) 160)) 68) (x1097 (+ 68 x673))))))
(assert (= (and (not x151) x105) x933))
(assert (=> (<= (x1148 (x1097 (+ x5 32))) 10000) (= (x1034 (x1148 (x1097 (+ x5 32)))) (x1080 (x1148 (x1097 (+ 32 x5)))))))
(assert (= 0 (x1129 (+ (- (+ 68 (- (+ (x1097 (+ 68 x305)) 64) 160)) 68) (x1097 (+ x673 68))))))
(assert (= (=> (and (= x713 x803) (= x1290 x277) (= (+ x286 x770) x713) (<= x286 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x286 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x770 x286)) (= x1457 x713)) x183) x378))
(assert (= (x1331 (x1034 2710164492)) 2710164492))
(assert (= (x1331 (x1080 (x788 (x1097 (+ 192 x5))))) (x788 (x1097 (+ 192 x5)))))
(assert (= x456 (and x860 x492)))
(assert (x585 x388))
(assert (x585 x606))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ (- (x1097 (+ 192 x5)) x857) x976) 160)) 68)))))
(assert (= x264 (and (not x1189) x708)))
(assert (= (x593 (+ 32 (x1097 (+ 68 x305)))) 0))
(assert (= (=> (and (= x68 (not (> x312 32))) (= (x265 160) x1319) (= x580 x665)) (and x68 (=> (= x1241 32) x846))) x1146))
(assert (= x1017 (=> (and (or (not x1333) (and (= (x1097 (+ x375 x762)) x1383) x1333)) (= x1333 (> x63 x375))) x1050)))
(assert (=> (<= x622 10000) (= (x1034 x622) (x1080 x622))))
(assert (= x486 (=> (and (= (x497 (- x1104 32)) x203) (= (x1097 (+ x920 32)) x520) (= x700 (>= 224 x203)) (= x1104 (x497 (- x520 x305))) (= x920 (x1097 (+ x830 x305)))) (and x700 (=> (and (= (>= 224 x1104) x655) (= (ite (>= 32 x203) (x389 (x1080 (x450 x305)) 0) (ite (>= 64 x203) (x719 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ x305 32)))) 0) (ite (>= 96 x203) (x562 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ 64 x305)))) 0) (ite (>= 128 x203) (x517 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ 64 x305)))) (x1080 (x450 (x1097 (+ 96 x305)))) 0) (ite (<= x203 160) (x1062 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ x305 32)))) (x1080 (x450 (x1097 (+ x305 64)))) (x1080 (x450 (x1097 (+ x305 96)))) (x1080 (x450 (x1097 (+ 128 x305)))) 0) (ite (>= 192 x203) (x948 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ x305 64)))) (x1080 (x450 (x1097 (+ x305 96)))) (x1080 (x450 (x1097 (+ 128 x305)))) (x1080 (x450 (x1097 (+ 160 x305)))) 0) (ite (>= 224 x203) (x344 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ x305 64)))) (x1080 (x450 (x1097 (+ x305 96)))) (x1080 (x450 (x1097 (+ x305 128)))) (x1080 (x450 (x1097 (+ x305 160)))) (x1080 (x450 (x1097 (+ x305 192)))) 0) (x1080 x586)))))))) x626)) (and x655 (=> (and (= (x1091 x1140) x49) (= x1005 (= (mod x225 2) 1)) (>= 1461501637330902918203684832716283019655932542975 x49) (= (x280 x1140) x225) (>= x49 0) (> 1461501637330902918203684832716283019655932542976 x49) (< x225 65536) (>= x225 0) (<= 0 x529) (> 1208925819614629174706176 x529) (= (ite (<= x1104 32) (x389 (x1080 (x450 x305)) 0) (ite (<= x1104 64) (x719 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) 0) (ite (<= x1104 96) (x562 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ 64 x305)))) 0) (ite (>= 128 x1104) (x517 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ x305 64)))) (x1080 (x450 (x1097 (+ x305 96)))) 0) (ite (>= 160 x1104) (x1062 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ x305 32)))) (x1080 (x450 (x1097 (+ x305 64)))) (x1080 (x450 (x1097 (+ 96 x305)))) (x1080 (x450 (x1097 (+ 128 x305)))) 0) (ite (>= 192 x1104) (x948 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ x305 64)))) (x1080 (x450 (x1097 (+ x305 96)))) (x1080 (x450 (x1097 (+ 128 x305)))) (x1080 (x450 (x1097 (+ 160 x305)))) 0) (ite (>= 224 x1104) (x344 (x1080 (x450 x305)) (x1080 (x450 (x1097 (+ 32 x305)))) (x1080 (x450 (x1097 (+ 64 x305)))) (x1080 (x450 (x1097 (+ 96 x305)))) (x1080 (x450 (x1097 (+ x305 128)))) (x1080 (x450 (x1097 (+ x305 160)))) (x1080 (x450 (x1097 (+ x305 192)))) 0) (x1080 x1130)))))))) x1140) (>= 1208925819614629174706175 x529) (= x652 0) (= (x411 x1140) x529) (>= 65535 x225)) (and (=> (and (and (and (= 0 x1456) (= (= (mod x225 2) 1) x382)) (or (and x382 (and (= (= (mod x828 2) 1) x139) (= x828 (x1381 x225 1)) (= x1388 1) (= x14 (not x139)))) (and (not x382) (= x14 x382)))) x1005) x1409) (=> (not x1005) x181)))))))))
(assert (= (x1080 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1034 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x585 x156))
(assert (= (x430 x5) 0))
(assert (x585 x420))
(assert (= x263 (=> (and (= (x706 128) x1298) (= (>= 224 x1298) x1047) (= (x1097 (+ 160 x606)) x21)) (and x1047 (=> (and (= (x706 128) x616) (= x1191 (x1097 (+ x415 128))) (= x468 (x1097 (+ 32 x616))) (= x415 (x1097 (+ 32 x616))) (= x886 (<= x468 224))) (and (=> (and (= x161 (ite (>= 32 x468) (x389 (x1080 (x228 160)) 0) (ite (>= 64 x468) (x719 (x1080 (x228 160)) (x1080 (x228 192)) 0) (ite (<= x468 96) (x562 (x1080 (x228 160)) (x1080 (x228 192)) (x1080 (x228 224)) 0) (ite (>= 128 x468) (x517 (x1080 (x228 160)) (x1080 (x228 192)) (x1080 (x228 224)) (x1080 (x228 256)) 0) (ite (<= x468 160) (x1062 (x1080 (x228 160)) (x1080 (x228 192)) (x1080 (x228 224)) (x1080 (x228 256)) (x1080 (x228 288)) 0) (ite (<= x468 192) (x948 (x1080 (x228 160)) (x1080 (x228 192)) (x1080 (x228 224)) (x1080 (x228 256)) (x1080 (x228 288)) (x1080 (x228 320)) 0) (ite (<= x468 224) (x344 (x1080 (x228 160)) (x1080 (x228 192)) (x1080 (x228 224)) (x1080 (x228 256)) (x1080 (x228 288)) (x1080 (x228 320)) (x1080 (x228 352)) 0) (x1080 x658))))))))) (= 32 x40) (= (x656 x161) x640) (= x311 (x896 1461501637330902918203684832716283019655932542975 x640)) (= x442 1)) x494) x886))))))
(assert (=> (>= 10000 x1424) (= (x1034 x1424) (x1080 x1424))))
(assert (=> (>= 10000 (x577 (x1097 (+ x1031 160)))) (= (x1080 (x577 (x1097 (+ 160 x1031)))) (x1034 (x577 (x1097 (+ x1031 160)))))))
(assert (x585 x692))
(assert (= x729 (or x1410 x752)))
(assert (=> (>= 10000 (x292 (x1097 (+ 192 x5)))) (= (x1034 (x292 (x1097 (+ 192 x5)))) (x1080 (x292 (x1097 (+ x5 192)))))))
(assert (= (x970 (- (+ (- (+ 68 (- x1031 160)) 68) (x1097 (+ x857 68))) x448)) 0))
(assert (x585 x838))
(assert (x585 x9))
(assert (x1079 (x143 x580)))
(assert (x1079 x1057))
(assert (x585 x1060))
(assert (x585 x811))
(assert (x1079 (x1011 (x1097 (+ x580 128)))))
(assert (x585 x448))
(assert (= x927 (and x904 x96)))
(assert (x585 x371))
(assert (= 0 (x430 (+ 32 (x1097 (+ x857 68))))))
(assert (= x956 (=> (and (= x1210 (x595 128)) (= x567 (< 0 x1210))) (and (=> (and (= x216 0) (not x567)) x433) (=> x567 x1236)))))
(assert (x1079 (x143 (x1097 (+ x580 32)))))
(assert (= 0 (x1129 (x1097 (+ x1031 32)))))
(assert (x1079 (x22 (x1097 (+ 128 x857)))))
(assert (x585 x880))
(assert (= (and (not x704) x440) x547))
(assert (x695 x128))
(assert (= (and (not x947) x898) x977))
(assert (x1079 (x931 x580)))
(assert (= (x897 (x1097 (+ 64 x580))) (x1331 (x1080 (x897 (x1097 (+ 64 x580)))))))
(assert (= x401 (or x926 x100)))
(assert (= (=> (and (= (not (< 32 x1351)) x761) (= x533 x580) (= x262 (x258 160))) (and (=> (= x868 32) x346) x761)) x675))
(assert (x585 x978))
(assert (= (and x979 (not x975)) x111))
(assert (x585 x1457))
(assert (x1079 (x897 (x1097 (+ 128 x580)))))
(assert (x1079 (x824 (x1097 (+ x580 32)))))
(assert (x585 x329))
(assert (= (x1129 (+ (- (+ 68 (- (x1097 (+ x305 32)) 160)) 68) (x1097 (+ x673 68)))) 0))
(assert (= x393 (=> (and (= x578 x419) (= x5 x1423) (= x1068 (x292 x578)) (= (not (< 32 x28)) x1120)) (and (=> (= 32 x663) x934) x1120))))
(assert (= x659 (=> (and (= x1364 (x497 (- x1059 x5))) (= (x497 (- x1364 32)) x877) (= x1059 (x1097 (+ x576 32))) (= (>= 224 x877) x573) (= x576 (x1097 (+ x1153 x5)))) (and (=> (and (= x410 (>= 224 x1364)) (= x434 (ite (<= x877 32) (x389 (x1080 (x1148 x5)) 0) (ite (<= x877 64) (x719 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ x5 32)))) 0) (ite (<= x877 96) (x562 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ x5 64)))) 0) (ite (<= x877 128) (x517 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ x5 32)))) (x1080 (x1148 (x1097 (+ x5 64)))) (x1080 (x1148 (x1097 (+ 96 x5)))) 0) (ite (>= 160 x877) (x1062 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ 64 x5)))) (x1080 (x1148 (x1097 (+ 96 x5)))) (x1080 (x1148 (x1097 (+ x5 128)))) 0) (ite (<= x877 192) (x948 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ x5 64)))) (x1080 (x1148 (x1097 (+ x5 96)))) (x1080 (x1148 (x1097 (+ 128 x5)))) (x1080 (x1148 (x1097 (+ x5 160)))) 0) (ite (<= x877 224) (x344 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ x5 32)))) (x1080 (x1148 (x1097 (+ 64 x5)))) (x1080 (x1148 (x1097 (+ 96 x5)))) (x1080 (x1148 (x1097 (+ x5 128)))) (x1080 (x1148 (x1097 (+ 160 x5)))) (x1080 (x1148 (x1097 (+ x5 192)))) 0) (x1080 x1328)))))))))) (and x410 (=> (and (and (= (x249 x224) x202) (<= 0 x202) (= x224 (ite (<= x1364 32) (x389 (x1080 (x1148 x5)) 0) (ite (>= 64 x1364) (x719 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ x5 32)))) 0) (ite (>= 96 x1364) (x562 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ x5 32)))) (x1080 (x1148 (x1097 (+ 64 x5)))) 0) (ite (<= x1364 128) (x517 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ 64 x5)))) (x1080 (x1148 (x1097 (+ x5 96)))) 0) (ite (>= 160 x1364) (x1062 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ 64 x5)))) (x1080 (x1148 (x1097 (+ x5 96)))) (x1080 (x1148 (x1097 (+ x5 128)))) 0) (ite (>= 192 x1364) (x948 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ 64 x5)))) (x1080 (x1148 (x1097 (+ x5 96)))) (x1080 (x1148 (x1097 (+ x5 128)))) (x1080 (x1148 (x1097 (+ 160 x5)))) 0) (ite (<= x1364 224) (x344 (x1080 (x1148 x5)) (x1080 (x1148 (x1097 (+ 32 x5)))) (x1080 (x1148 (x1097 (+ 64 x5)))) (x1080 (x1148 (x1097 (+ x5 96)))) (x1080 (x1148 (x1097 (+ x5 128)))) (x1080 (x1148 (x1097 (+ 160 x5)))) (x1080 (x1148 (x1097 (+ 192 x5)))) 0) (x1080 x324))))))))) (> 256 x202) (= x30 (> x202 0)) (<= x202 255)) (or x30 (and (and (not (> x906 x1450)) (= (x497 (- x1450 x906)) x43) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1450) (>= x1450 0)) (not x30)))) x521))) x573))))
(assert (x585 x1193))
(assert (= x837 (and (not x1127) x401)))
(assert (x585 x1380))
(assert (x1079 x660))
(assert (x1079 (x292 (x1097 (+ x5 96)))))
(assert (=> (>= 10000 (x228 160)) (= (x1034 (x228 160)) (x1080 (x228 160)))))
(assert (x1079 (x795 (x1097 (+ x580 160)))))
(assert (= (x909 192) 0))
(assert (x1079 (x1148 (x1097 (+ x5 192)))))
(assert (= (x276 (x1097 (+ x1031 32))) (x1331 (x1080 (x276 (x1097 (+ 32 x1031)))))))
(assert (= (x788 (x1097 (+ 32 x5))) (x1331 (x1080 (x788 (x1097 (+ x5 32)))))))
(assert (= (x1129 (+ x976 (- (x1097 (+ 160 x5)) x857))) 0))
(assert (= 3044154673 (x1331 (x1034 3044154673))))
(assert (= (x430 (x1097 (+ 128 x580))) 0))
(assert (= x800 (and x1418 (not x56))))
(assert (= 0 (x430 (+ (- (+ 68 (- (+ x976 (- (x1097 (+ x5 160)) x857)) 160)) 68) (x1097 (+ x857 68))))))
(assert (= (x593 (+ x720 (- (+ (- (x1097 (+ x5 96)) x857) x976) x673))) 0))
(assert (= (x970 (- (+ (- (+ (- (+ (x1097 (+ x673 68)) 96) 160) 68) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (= 0 (x1129 (x1097 (+ x1031 160)))))
(assert (= x261 (=> (and (= x958 (not (> x699 32))) (= x522 (x130 160)) (= x1377 x580)) (and x958 (=> (= 32 x875) x428)))))
(assert (x585 x376))
(assert (= x1325 (and x1462 (not x106))))
(assert (= 0 (x970 (- (+ (- (+ (- x306 160) 68) 68) (x1097 (+ 68 x857))) x448))))
(assert (=> (<= x447 10000) (= (x1034 x447) (x1080 x447))))
(assert (x585 x221))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (x1097 (+ x673 68)) 64) 160)) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (x585 x954))
(assert (= x1328 (x1331 (x1080 x1328))))
(assert (= (x1034 3922182229) (x1080 3922182229)))
(assert (x1079 (x795 (x1097 (+ 32 x580)))))
(assert (= (x1331 (x1080 (x466 (x1097 (+ x580 128))))) (x466 (x1097 (+ x580 128)))))
(assert (= 0 (x593 (+ (x1097 (+ x305 68)) 64))))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ (- (+ x720 (- x457 x673)) 160) 68) 68)) 160)) 68) (x1097 (+ 68 x857))) x448))))
(assert (x1079 (x292 (x1097 (+ x5 64)))))
(assert (=> (>= 10000 (x931 x580)) (= (x1080 (x931 x580)) (x1034 (x931 x580)))))
(assert (x585 x665))
(assert (x585 x23))
(assert (= (x1034 1882194962) (x1080 1882194962)))
(assert (=> (>= 10000 (x450 (x1097 (+ 160 x305)))) (= (x1080 (x450 (x1097 (+ x305 160)))) (x1034 (x450 (x1097 (+ 160 x305)))))))
(assert (x585 x670))
(assert (= (=> (or (and x14 (and (= 2 x591) (= (not x1352) x231) (= x1283 (x1381 x225 2)) (= (= (mod x1283 2) 1) x1352))) (and (not x14) (= x14 x231))) x768) x1409))
(assert (= x1313 (and (not x1460) x314)))
(assert (= (and x685 (not x1370)) x1428))
(assert (= (or x1307 x477) x253))
(assert (x585 x1126))
(assert (=> (>= 10000 (x265 (x1097 (+ x580 128)))) (= (x1034 (x265 (x1097 (+ x580 128)))) (x1080 (x265 (x1097 (+ x580 128)))))))
(assert (=> (<= (x276 (x1097 (+ x1031 96))) 10000) (= (x1080 (x276 (x1097 (+ x1031 96)))) (x1034 (x276 (x1097 (+ x1031 96)))))))
(assert (=> (>= 10000 (x795 (x1097 (+ x580 192)))) (= (x1080 (x795 (x1097 (+ 192 x580)))) (x1034 (x795 (x1097 (+ 192 x580)))))))
(assert (x1079 (x1011 (x1097 (+ x580 64)))))
(assert (= (or x1044 x582) x1111))
(assert (x585 x1281))
(assert (x585 x906))
(assert (x585 x327))
(assert (= (=> (and (= (x497 (- x54 x1031)) x799) (= x1374 (x1097 (+ x1031 x404))) (= x215 (>= 224 x811)) (= (x1097 (+ x1374 32)) x54) (= (x497 (- x799 32)) x811)) (and (=> (= (<= x799 224) x175) (and x175 (=> (and (= x684 (ite (>= 32 x799) (x389 (x1080 (x276 x1031)) 0) (ite (<= x799 64) (x719 (x1080 (x276 x1031)) (x1080 (x276 (x1097 (+ 32 x1031)))) 0) (ite (>= 96 x799) (x562 (x1080 (x276 x1031)) (x1080 (x276 (x1097 (+ x1031 32)))) (x1080 (x276 (x1097 (+ x1031 64)))) 0) (ite (<= x799 128) (x517 (x1080 (x276 x1031)) (x1080 (x276 (x1097 (+ 32 x1031)))) (x1080 (x276 (x1097 (+ x1031 64)))) (x1080 (x276 (x1097 (+ 96 x1031)))) 0) (ite (>= 160 x799) (x1062 (x1080 (x276 x1031)) (x1080 (x276 (x1097 (+ 32 x1031)))) (x1080 (x276 (x1097 (+ x1031 64)))) (x1080 (x276 (x1097 (+ x1031 96)))) (x1080 (x276 (x1097 (+ 128 x1031)))) 0) (ite (>= 192 x799) (x948 (x1080 (x276 x1031)) (x1080 (x276 (x1097 (+ x1031 32)))) (x1080 (x276 (x1097 (+ x1031 64)))) (x1080 (x276 (x1097 (+ 96 x1031)))) (x1080 (x276 (x1097 (+ 128 x1031)))) (x1080 (x276 (x1097 (+ x1031 160)))) 0) (ite (<= x799 224) (x344 (x1080 (x276 x1031)) (x1080 (x276 (x1097 (+ x1031 32)))) (x1080 (x276 (x1097 (+ 64 x1031)))) (x1080 (x276 (x1097 (+ 96 x1031)))) (x1080 (x276 (x1097 (+ x1031 128)))) (x1080 (x276 (x1097 (+ x1031 160)))) (x1080 (x276 (x1097 (+ x1031 192)))) 0) (x1080 x1461))))))))) (= x1327 (= x90 0)) (= x90 (x896 1461501637330902918203684832716283019655932542975 x1093)) (not x1327) (= x688 (x276 128)) (= (x656 x684) x1093) (= (< 0 x688) x1127)) (and (=> (and (and (= x1397 (< 32 x688)) (= x851 (x276 160)) (= x541 x1031)) x1127) (and (=> (and x1397 (and (= x1147 (x1097 (+ x1031 32))) (= x48 (x347 192)) (= (< 64 x688) x1164))) (and (=> (and (and (= x603 (x1097 (+ x1031 64))) (= (> x688 96) x1477) (= x735 (x55 224))) x1164) (and (=> (and (not x1477) (= x427 96)) x18) (=> x1477 x682))) (=> (and (not x1164) (= x427 64)) x18))) (=> (and (= x427 32) (not x1397)) x18))) (=> (and (not x1127) (= 0 x427)) x18))))) x215)) x780))
(assert (= 0 (x1129 (x1097 (+ 68 x673)))))
(assert (x585 x930))
(assert (x585 x1303))
(assert (= (x1331 (x1080 (x276 (x1097 (+ x1031 96))))) (x276 (x1097 (+ x1031 96)))))
(assert (x585 x134))
(assert (= x876 (and x1454 x253)))
(assert (not x1048))
(assert (= (x577 (x1097 (+ x1031 192))) (x1331 (x1080 (x577 (x1097 (+ 192 x1031)))))))
(assert (x585 x184))
(assert (x585 x209))
(assert (x585 x1349))
(assert (x695 x1314))
(assert (= (x593 (+ x720 (- (+ (- x856 x857) x976) x673))) 0))
(assert (= (x1034 43611735268480658727360147997893738071856775535381453097760378360336924803072) (x1080 43611735268480658727360147997893738071856775535381453097760378360336924803072)))
(assert (= (x1381 x225 2) (div x225 4)))
(assert (x585 x747))
(assert (= (x430 (x1097 (+ x580 64))) 0))
(assert (x585 x225))
(assert (x585 x210))
(assert (= (x970 (- x129 x448)) 0))
(assert (x585 x1399))
(assert (= (x1129 224) 0))
(assert (x585 x256))
(assert (x1079 x188))
(assert (= (x1129 (+ (- x856 x857) x976)) 0))
(assert (= (x1331 (x1080 x324)) x324))
(assert (x585 x188))
(assert (=> (<= x1430 10000) (= (x1034 x1430) (x1080 x1430))))
(assert (= x181 (=> (and (= x1306 x308) (= 0 x445)) x609)))
(assert (= (x1331 (x1080 x853)) x853))
(assert (x585 x1434))
(assert (x585 x777))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (x1097 (+ x5 128)) x857) x976) 160) 68) 68)) x448)) 0))
(assert (x585 x803))
(assert (= (x1331 (x1080 (x897 (x1097 (+ x580 160))))) (x897 (x1097 (+ 160 x580)))))
(assert (x504 x901))
(assert (x1079 (x450 x305)))
(assert (x585 x781))
(assert (x585 x507))
(assert (= (x1331 (x1080 (x1148 (x1097 (+ x5 128))))) (x1148 (x1097 (+ 128 x5)))))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) 64))))
(assert (= 0 (x1129 (+ (x1097 (+ 68 x673)) 32))))
(assert (x585 x1038))
(assert (= x1018 (and x1315 x317)))
(assert (= (or (and (not x1392) x219) x358) x1248))
(assert (x1079 (x130 (x1097 (+ 64 x580)))))
(assert (= x1036 (=> (and (= x835 (x497 (- x843 32))) (= x642 (x1097 (+ x1351 x580))) (= x843 (x497 (- x206 x580))) (= x206 (x1097 (+ 32 x642))) (= x1436 (>= 224 x835))) (and (=> (and (= (ite (>= 32 x835) (x389 (x1080 (x265 x580)) 0) (ite (<= x835 64) (x719 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ x580 32)))) 0) (ite (<= x835 96) (x562 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ 32 x580)))) (x1080 (x265 (x1097 (+ 64 x580)))) 0) (ite (>= 128 x835) (x517 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ x580 32)))) (x1080 (x265 (x1097 (+ x580 64)))) (x1080 (x265 (x1097 (+ x580 96)))) 0) (ite (<= x835 160) (x1062 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ x580 32)))) (x1080 (x265 (x1097 (+ x580 64)))) (x1080 (x265 (x1097 (+ 96 x580)))) (x1080 (x265 (x1097 (+ 128 x580)))) 0) (ite (>= 192 x835) (x948 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ 32 x580)))) (x1080 (x265 (x1097 (+ x580 64)))) (x1080 (x265 (x1097 (+ 96 x580)))) (x1080 (x265 (x1097 (+ 128 x580)))) (x1080 (x265 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x835) (x344 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ 32 x580)))) (x1080 (x265 (x1097 (+ 64 x580)))) (x1080 (x265 (x1097 (+ x580 96)))) (x1080 (x265 (x1097 (+ x580 128)))) (x1080 (x265 (x1097 (+ 160 x580)))) (x1080 (x265 (x1097 (+ x580 192)))) 0) (x1080 x1285)))))))) x436) (= (>= 224 x843) x218)) (and x218 (=> (and (= x1301 (x497 (- x678 x781))) (= (x719 (x1080 x853) (ite (>= 32 x843) (x389 (x1080 (x265 x580)) 0) (ite (<= x843 64) (x719 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ x580 32)))) 0) (ite (>= 96 x843) (x562 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ 32 x580)))) (x1080 (x265 (x1097 (+ x580 64)))) 0) (ite (<= x843 128) (x517 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ x580 32)))) (x1080 (x265 (x1097 (+ x580 64)))) (x1080 (x265 (x1097 (+ 96 x580)))) 0) (ite (<= x843 160) (x1062 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ 32 x580)))) (x1080 (x265 (x1097 (+ x580 64)))) (x1080 (x265 (x1097 (+ x580 96)))) (x1080 (x265 (x1097 (+ x580 128)))) 0) (ite (<= x843 192) (x948 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ 32 x580)))) (x1080 (x265 (x1097 (+ 64 x580)))) (x1080 (x265 (x1097 (+ x580 96)))) (x1080 (x265 (x1097 (+ 128 x580)))) (x1080 (x265 (x1097 (+ x580 160)))) 0) (ite (>= 224 x843) (x344 (x1080 (x265 x580)) (x1080 (x265 (x1097 (+ x580 32)))) (x1080 (x265 (x1097 (+ 64 x580)))) (x1080 (x265 (x1097 (+ x580 96)))) (x1080 (x265 (x1097 (+ 128 x580)))) (x1080 (x265 (x1097 (+ x580 160)))) (x1080 (x265 (x1097 (+ x580 192)))) 0) (x1080 x1424)))))))) 0) x337) (= (x918 x337) x781) (not (> x781 x678)) (<= x781 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 0 x1301) x162) (>= x781 0)) (and (=> (and (and (= x954 x366) (= x580 x775)) (not x162)) x154) (=> (and x162 (and (= x121 x422) (<= x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (+ x1301 x121) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x265 128) x312) (= x1472 x1301) (= (> x312 0) x1150) (= x369 (+ x422 x1472)) (>= x121 0))) (and (=> (and (not x1150) (= x1241 0)) x846) (=> x1150 x1146))))))) x1436))))
(assert (x585 x1449))
(assert (x585 x556))
(assert (= 0 (x970 (- (x1097 (+ 192 x5)) x448))))
(assert (x585 x1004))
(assert (x695 x937))
(assert (x585 x1437))
(assert (x585 x1032))
(assert (x585 x40))
(assert (=> (<= (x466 (x1097 (+ x580 160))) 10000) (= (x1034 (x466 (x1097 (+ x580 160)))) (x1080 (x466 (x1097 (+ 160 x580)))))))
(assert (=> (<= x1461 10000) (= (x1080 x1461) (x1034 x1461))))
(assert (= 0 (x970 (- x857 x448))))
(assert (x585 x770))
(assert (= (x1331 (x1080 (x450 (x1097 (+ x305 192))))) (x450 (x1097 (+ x305 192)))))
(assert (= (x1331 (x1034 3922182229)) 3922182229))
(assert (x585 x341))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ (- (x1097 (+ x1031 96)) 160) 68) 68))) 0))
(assert (x585 x131))
(assert (x585 x535))
(assert (x585 x390))
(assert (x585 x526))
(assert (= x433 (=> (and (= x38 (< x1210 x216)) (or (not x38) (and (= (x1097 (+ x580 x1210)) x774) x38))) x965)))
(assert (x585 x49))
(assert (x585 x1081))
(assert (x585 x628))
(assert (x585 x715))
(assert (= 0 (x1129 (+ (- (+ (- (+ x720 (- (+ x976 (- (x1097 (+ 32 x5)) x857)) x673)) 160) 68) 68) (x1097 (+ 68 x673))))))
(assert (= (x430 x195) 0))
(assert (= 0 (x1129 (+ (- (+ 68 (- (+ x720 (- (+ x976 (- x1001 x857)) x673)) 160)) 68) (x1097 (+ 68 x673))))))
(assert (= (=> (and (= 0 x1453) (= x255 x614)) x1458) x855))
(assert (=> (<= (x130 (x1097 (+ 32 x580))) 10000) (= (x1034 (x130 (x1097 (+ 32 x580)))) (x1080 (x130 (x1097 (+ x580 32)))))))
(assert (= 2075580284 (x1331 (x1034 2075580284))))
(assert (=> (>= 10000 (x276 (x1097 (+ 64 x1031)))) (= (x1034 (x276 (x1097 (+ x1031 64)))) (x1080 (x276 (x1097 (+ x1031 64)))))))
(assert (x504 x1464))
(assert (x585 x924))
(assert (x585 x1045))
(assert (x585 x576))
(assert (= x42 (and x1275 x962)))
(assert (= (or x1267 x191) x884))
(assert (= x1171 (and x336 (not x1343))))
(assert (x585 x78))
(assert (x585 x1))
(assert (x585 x1153))
(assert (= (x970 (- (+ (- (+ 68 (- (+ x976 (- x578 x857)) 160)) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (= (x1331 (x1080 (x228 320))) (x228 320)))
(assert (= x865 (or x498 x1398)))
(assert (= (x593 (x1097 (+ x305 128))) 0))
(assert (x585 x1220))
(assert (x585 x710))
(assert (= (x1331 (x1080 (x265 (x1097 (+ 192 x580))))) (x265 (x1097 (+ x580 192)))))
(assert (= 0 (x430 (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (- x578 x857) x976) 160)) 68)))))
(assert (= 0 (x1129 (+ x976 (- (x1097 (+ 192 x5)) x857)))))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (- x402 x857) x976) 160)) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (=> (<= x189 10000) (= (x1034 x189) (x1080 x189))))
(assert (= (and x820 (not x235)) x545))
(assert (= x785 (and (not x162) x737)))
(assert (x1079 (x228 224)))
(assert (= x995 (and x610 x988)))
(assert (= 0 (x430 (+ (- (+ 68 (- (x1097 (+ 128 x1031)) 160)) 68) (x1097 (+ x857 68))))))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ x976 (- x657 x857)) 160)) 68))) 0))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ (- (+ x720 (- (+ x976 (- x1243 x857)) x673)) 160) 68) 68) (x1097 (+ x673 68))) 160) 68) 68)) x448)) 0))
(assert (x585 x735))
(assert (x585 x1393))
(assert (= (x1034 2996296902) (x1080 2996296902)))
(assert (=> (>= 10000 (x1011 x580)) (= (x1034 (x1011 x580)) (x1080 (x1011 x580)))))
(assert (= (x292 (x1097 (+ 64 x5))) (x1331 (x1080 (x292 (x1097 (+ x5 64)))))))
(assert (x585 x1204))
(assert (x585 x877))
(assert (x1079 (x22 (x1097 (+ x857 192)))))
(assert (=> (<= (x450 x305) 10000) (= (x1034 (x450 x305)) (x1080 (x450 x305)))))
(assert (= (or (and x993 x1402) (and x995 x849) x1142 x927 (and (not x1123) x509)) x1113))
(assert (x585 x996))
(assert (x585 x548))
(assert (=> (<= (x577 (x1097 (+ 128 x1031))) 10000) (= (x1080 (x577 (x1097 (+ x1031 128)))) (x1034 (x577 (x1097 (+ x1031 128)))))))
(assert (x1079 x1430))
(assert (x1079 (x466 (x1097 (+ x580 96)))))
(assert (= x1056 (and (not x1270) x1109)))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (x1097 (+ x673 68)) (- (+ 68 (- (+ x720 (- (+ (- (x1097 (+ 192 x5)) x857) x976) x673)) 160)) 68)) 160) 68) 68)) x448))))
(assert (x585 x1069))
(assert (= (x1331 (x1080 x1182)) x1182))
(assert (= (x970 (- x657 x448)) 0))
(assert (x585 x54))
(assert (x585 x663))
(assert (x585 x1357))
(assert (x585 x286))
(assert (= (and (not x449) x395) x813))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x1331 (x1034 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= 0 (x430 (+ (- (+ (- (+ (x1097 (+ x673 68)) (- (+ (- (x1097 (+ 192 x305)) 160) 68) 68)) 160) 68) 68) (x1097 (+ 68 x857))))))
(assert (= (=> (and (= x580 x1188) (= x470 (x824 160)) (= x1324 (not (> x1309 32)))) (and (=> (= 32 x295) x201) x1324)) x736))
(assert (= (=> (and (= x64 (x1097 (+ 96 x844))) (= x777 (x1083 256)) (= (not (> x1204 128)) x414)) (and (=> (= x549 128) x211) x414)) x807))
(assert (= (x1331 (x1034 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (=> (<= x113 10000) (= (x1080 x113) (x1034 x113))))
(assert (= x1285 (x1331 (x1080 x1285))))
(assert (= 105741823712686017468623175546783284002282906648395100416871018427217256382464 (x1331 (x1034 105741823712686017468623175546783284002282906648395100416871018427217256382464))))
(assert (x585 x613))
(assert (= (x1331 (x1080 x759)) x759))
(assert (x585 x140))
(assert (= (x1331 (x1080 (x292 x5))) (x292 x5)))
(assert (x1079 (x788 (x1097 (+ x5 96)))))
(assert (= (and x1143 (not x634)) x1230))
(assert (= (x1034 65535) (x1080 65535)))
(assert (x585 x103))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (- (+ (- (x1097 (+ x305 128)) 160) 68) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ x857 68))) x448)) 0))
(assert (x585 x1019))
(assert (= (x130 (x1097 (+ x580 32))) (x1331 (x1080 (x130 (x1097 (+ 32 x580)))))))
(assert (=> (<= x1130 10000) (= (x1080 x1130) (x1034 x1130))))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ 68 (- x1463 160)) 68))) 0))
(assert (x585 x698))
(assert (= x509 (and x995 (not x849))))
(assert (x1079 x113))
(assert (= (x430 (+ (- (+ 68 (- (x1097 (+ x1031 32)) 160)) 68) (x1097 (+ x857 68)))) 0))
(assert (= (x1331 (x1034 1208925819614629174706176)) 1208925819614629174706176))
(assert (= (x1331 (x1080 (x795 x580))) (x795 x580)))
(assert (= (x1331 (x1034 2061859742)) 2061859742))
(assert (x585 x502))
(assert (= 0 (x430 x856)))
(assert (x585 x202))
(assert (=> (<= (x265 (x1097 (+ 160 x580))) 10000) (= (x1034 (x265 (x1097 (+ 160 x580)))) (x1080 (x265 (x1097 (+ x580 160)))))))
(assert (= (or x1240 x876) x555))
(assert (x585 x1279))
(assert (= (=> (and (or (not x1343) (and (= x1399 (x1097 (+ x32 x580))) x1343)) (= (< x32 x452) x1343)) x200) x1183))
(assert (= 0 (x970 (- x195 x448))))
(assert (= (and x1277 x19) x1037))
(assert (= (x1331 (x1034 43611735268480658727360147997893738071856775535381453097760378360336924803072)) 43611735268480658727360147997893738071856775535381453097760378360336924803072))
(assert (= 0 (x430 (+ (- (+ (- (+ (x1097 (+ x673 68)) (- (+ 68 (- (+ x720 (- (+ (- x657 x857) x976) x673)) 160)) 68)) 160) 68) 68) (x1097 (+ x857 68))))))
(assert (x585 x987))
(assert (x585 x426))
(assert (x585 x386))
(assert (= (=> (and (= x1008 (x1097 (+ 32 x1360))) (= x1360 (x1097 (+ x580 x312))) (= x869 (x497 (- x1008 x580))) (= x392 (x497 (- x869 32))) (= x667 (>= 224 x392))) (and (=> (and (= x1320 (ite (>= 32 x392) (x389 (x1080 (x130 x580)) 0) (ite (>= 64 x392) (x719 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) 0) (ite (<= x392 96) (x562 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) (x1080 (x130 (x1097 (+ x580 64)))) 0) (ite (<= x392 128) (x517 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) (x1080 (x130 (x1097 (+ x580 64)))) (x1080 (x130 (x1097 (+ x580 96)))) 0) (ite (>= 160 x392) (x1062 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) (x1080 (x130 (x1097 (+ 64 x580)))) (x1080 (x130 (x1097 (+ 96 x580)))) (x1080 (x130 (x1097 (+ 128 x580)))) 0) (ite (>= 192 x392) (x948 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ 32 x580)))) (x1080 (x130 (x1097 (+ x580 64)))) (x1080 (x130 (x1097 (+ x580 96)))) (x1080 (x130 (x1097 (+ 128 x580)))) (x1080 (x130 (x1097 (+ 160 x580)))) 0) (ite (<= x392 224) (x344 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) (x1080 (x130 (x1097 (+ x580 64)))) (x1080 (x130 (x1097 (+ 96 x580)))) (x1080 (x130 (x1097 (+ 128 x580)))) (x1080 (x130 (x1097 (+ x580 160)))) (x1080 (x130 (x1097 (+ 192 x580)))) 0) (x1080 x156))))))))) (= x7 (<= x869 224))) (and (=> (and (<= 0 x437) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x437) (= (x618 x1422) x437) (= x1422 (ite (<= x869 32) (x389 (x1080 (x130 x580)) 0) (ite (>= 64 x869) (x719 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ 32 x580)))) 0) (ite (<= x869 96) (x562 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ 32 x580)))) (x1080 (x130 (x1097 (+ 64 x580)))) 0) (ite (<= x869 128) (x517 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ 32 x580)))) (x1080 (x130 (x1097 (+ 64 x580)))) (x1080 (x130 (x1097 (+ 96 x580)))) 0) (ite (<= x869 160) (x1062 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ 32 x580)))) (x1080 (x130 (x1097 (+ 64 x580)))) (x1080 (x130 (x1097 (+ x580 96)))) (x1080 (x130 (x1097 (+ x580 128)))) 0) (ite (<= x869 192) (x948 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) (x1080 (x130 (x1097 (+ x580 64)))) (x1080 (x130 (x1097 (+ 96 x580)))) (x1080 (x130 (x1097 (+ x580 128)))) (x1080 (x130 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x869) (x344 (x1080 (x130 x580)) (x1080 (x130 (x1097 (+ x580 32)))) (x1080 (x130 (x1097 (+ x580 64)))) (x1080 (x130 (x1097 (+ x580 96)))) (x1080 (x130 (x1097 (+ 128 x580)))) (x1080 (x130 (x1097 (+ 160 x580)))) (x1080 (x130 (x1097 (+ x580 192)))) 0) (x1080 x1425))))))))) (= (> x437 0) x860)) (and (=> (and (and (= (> x699 0) x167) (= (x130 128) x699)) x860) (and (=> x167 x261) (=> (and (not x167) (= 0 x875)) x428))) (=> (and (not x860) (and (>= x1457 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1457) (= x1457 x169))) x956))) x7)) x667)) x326))
(assert (= (x1080 1208925819614629174706175) (x1034 1208925819614629174706175)))
(assert (= x160 (or x1208 x727)))
(assert (= (x430 (+ (- (+ (- (+ x976 (- (x1097 (+ x5 32)) x857)) 160) 68) 68) (x1097 (+ 68 x857)))) 0))
(assert (= (x1034 65536) (x1080 65536)))
(assert (x585 x1253))
(assert (= x834 (or x697 x178)))
(assert (x585 x828))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ 68 (- (+ x720 (- x976 x673)) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68)) x448)) 0))
(assert (x585 x57))
(assert (x1079 (x897 (x1097 (+ 192 x580)))))
(assert (= (x1331 (x1080 (x130 (x1097 (+ x580 96))))) (x130 (x1097 (+ 96 x580)))))
(assert (= (x970 (- (+ (x1097 (+ 68 x857)) 32) x448)) 0))
(assert (= (x1331 (x1080 (x228 256))) (x228 256)))
(assert (x504 x963))
(assert (x585 x205))
(assert (= 0 (x430 (+ (x1097 (+ 68 x857)) (- (+ (- (+ (- (+ (- (+ (- (+ x976 (- x5 x857)) x673) x720) 160) 68) 68) (x1097 (+ x673 68))) 160) 68) 68)))))
(assert (= (and x381 x38) x1344))
(assert (x585 x678))
(assert (= (or x483 x546) x979))
(assert (x585 x1351))
(assert (= (x1331 (x1034 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x740 (or x1266 x1300)))
(assert (x585 x537))
(assert (x585 x1383))
(assert (= x969 (x1331 (x1080 x969))))
(assert (= (or x689 x1297) x1299))
(assert (= x645 (x1331 (x1080 x645))))
(assert (x44 x1093))
(assert (= (x1331 (x1080 (x931 x580))) (x931 x580)))
(assert (= 0 (x593 (+ (x1097 (+ 68 x305)) 160))))
(assert (x585 x1439))
(assert (x585 x553))
(assert (x585 x712))
(assert (= 0 (x1129 (+ (x1097 (+ x673 68)) (- (+ (- (+ x720 (- (+ x976 (- x578 x857)) x673)) 160) 68) 68)))))
(assert (x585 x1468))
(assert (= x220 (or x47 x204)))
(assert (= 0 (x1129 (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ x720 (- x594 x673)) 160)) 68)))))
(assert (= (x1331 (x1080 (x276 (x1097 (+ 128 x1031))))) (x276 (x1097 (+ 128 x1031)))))
(assert (=> (<= (x292 (x1097 (+ 160 x5))) 10000) (= (x1080 (x292 (x1097 (+ 160 x5)))) (x1034 (x292 (x1097 (+ 160 x5)))))))
(assert (= (x430 (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ (- (+ x720 (- (+ x976 (- (x1097 (+ x5 96)) x857)) x673)) 160) 68) 68)) 160)) 68) (x1097 (+ 68 x857)))) 0))
(assert (x585 x868))
(assert (= (x1331 (x1080 (x795 (x1097 (+ 160 x580))))) (x795 (x1097 (+ 160 x580)))))
(assert (= (x1080 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x1034 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x695 x901))
(assert (= 0 (x970 (- (+ (- (+ (- (+ (- (+ (- (x1097 (+ x305 192)) 160) 68) 68) (x1097 (+ 68 x673))) 160) 68) 68) (x1097 (+ x857 68))) x448))))
(assert (x585 x1187))
(assert (= (x1080 86587964985574495804695408441416066048332504164997306664935388907017567469568) (x1034 86587964985574495804695408441416066048332504164997306664935388907017567469568)))
(assert (x585 x875))
(assert (x585 x843))
(assert (= x1122 (and x213 x617)))
(assert (= (and x318 x703) x926))
(assert (= (x970 (- (+ (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ 192 (x1097 (+ x305 68))) 160)) 68)) 160) 68) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (x585 x861))
(assert (x1079 (x276 (x1097 (+ x1031 64)))))
(assert (= 0 (x970 (- x1001 x448))))
(assert (= (=> (and (= x786 (<= x998 224)) (= (x1097 (+ x801 32)) x831) (= (x1097 (+ x5 x1286)) x801) (= x125 (x497 (- x831 x5))) (= x998 (x497 (- x125 32)))) (and x786 (=> (and (= x132 (<= x125 224)) (= (ite (>= 32 x998) (x389 (x1080 (x292 x5)) 0) (ite (<= x998 64) (x719 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ x5 32)))) 0) (ite (<= x998 96) (x562 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ x5 32)))) (x1080 (x292 (x1097 (+ x5 64)))) 0) (ite (>= 128 x998) (x517 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ 32 x5)))) (x1080 (x292 (x1097 (+ 64 x5)))) (x1080 (x292 (x1097 (+ 96 x5)))) 0) (ite (>= 160 x998) (x1062 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ x5 32)))) (x1080 (x292 (x1097 (+ x5 64)))) (x1080 (x292 (x1097 (+ 96 x5)))) (x1080 (x292 (x1097 (+ x5 128)))) 0) (ite (>= 192 x998) (x948 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ x5 32)))) (x1080 (x292 (x1097 (+ 64 x5)))) (x1080 (x292 (x1097 (+ x5 96)))) (x1080 (x292 (x1097 (+ x5 128)))) (x1080 (x292 (x1097 (+ 160 x5)))) 0) (ite (>= 224 x998) (x344 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ x5 32)))) (x1080 (x292 (x1097 (+ 64 x5)))) (x1080 (x292 (x1097 (+ 96 x5)))) (x1080 (x292 (x1097 (+ x5 128)))) (x1080 (x292 (x1097 (+ x5 160)))) (x1080 (x292 (x1097 (+ x5 192)))) 0) (x1080 x118)))))))) x852)) (and (=> (and (not (< x246 x906)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x246) (= x1095 (ite (>= 32 x125) (x389 (x1080 (x292 x5)) 0) (ite (<= x125 64) (x719 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ 32 x5)))) 0) (ite (<= x125 96) (x562 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ 32 x5)))) (x1080 (x292 (x1097 (+ 64 x5)))) 0) (ite (<= x125 128) (x517 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ x5 32)))) (x1080 (x292 (x1097 (+ 64 x5)))) (x1080 (x292 (x1097 (+ x5 96)))) 0) (ite (>= 160 x125) (x1062 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ 32 x5)))) (x1080 (x292 (x1097 (+ 64 x5)))) (x1080 (x292 (x1097 (+ 96 x5)))) (x1080 (x292 (x1097 (+ 128 x5)))) 0) (ite (<= x125 192) (x948 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ 32 x5)))) (x1080 (x292 (x1097 (+ 64 x5)))) (x1080 (x292 (x1097 (+ 96 x5)))) (x1080 (x292 (x1097 (+ 128 x5)))) (x1080 (x292 (x1097 (+ x5 160)))) 0) (ite (<= x125 224) (x344 (x1080 (x292 x5)) (x1080 (x292 (x1097 (+ 32 x5)))) (x1080 (x292 (x1097 (+ x5 64)))) (x1080 (x292 (x1097 (+ x5 96)))) (x1080 (x292 (x1097 (+ x5 128)))) (x1080 (x292 (x1097 (+ x5 160)))) (x1080 (x292 (x1097 (+ x5 192)))) 0) (x1080 x645))))))))) (<= 0 x246) (= x1228 (> x28 0)) (= (x497 (- x246 x906)) x176) (= (x292 x1243) x28) (= (x985 x1095) x246)) (and (=> (and (not x1228) (= x663 0)) x934) (=> x1228 x393))) x132)))) x94))
(assert (=> (<= x759 10000) (= (x1080 x759) (x1034 x759))))
(assert (x585 x578))
(assert (= x1462 (or x827 x289)))
(assert (= (x1331 (x1080 (x228 224))) (x228 224)))
(assert (=> (>= 10000 (x130 (x1097 (+ 64 x580)))) (= (x1080 (x130 (x1097 (+ 64 x580)))) (x1034 (x130 (x1097 (+ 64 x580)))))))
(assert (x1079 (x22 (x1097 (+ 96 x857)))))
(assert (x695 x475))
(assert (x585 x1476))
(assert (= (=> (and (= (x497 (- x354 32)) x960) (= (x1097 (+ x1031 x688)) x880) (= x354 (x497 (- x676 x1031))) (= (x1097 (+ 32 x880)) x676) (= x397 (<= x960 224))) (and (=> (= (>= 224 x354) x1040) (and x1040 (=> (and (and (= x1304 (x896 1461501637330902918203684832716283019655932542975 x683)) (= x895 (ite (>= 32 x354) (x389 (x1080 (x577 x1031)) 0) (ite (<= x354 64) (x719 (x1080 (x577 x1031)) (x1080 (x577 (x1097 (+ x1031 32)))) 0) (ite (<= x354 96) (x562 (x1080 (x577 x1031)) (x1080 (x577 (x1097 (+ 32 x1031)))) (x1080 (x577 (x1097 (+ x1031 64)))) 0) (ite (>= 128 x354) (x517 (x1080 (x577 x1031)) (x1080 (x577 (x1097 (+ x1031 32)))) (x1080 (x577 (x1097 (+ 64 x1031)))) (x1080 (x577 (x1097 (+ 96 x1031)))) 0) (ite (>= 160 x354) (x1062 (x1080 (x577 x1031)) (x1080 (x577 (x1097 (+ 32 x1031)))) (x1080 (x577 (x1097 (+ 64 x1031)))) (x1080 (x577 (x1097 (+ 96 x1031)))) (x1080 (x577 (x1097 (+ 128 x1031)))) 0) (ite (<= x354 192) (x948 (x1080 (x577 x1031)) (x1080 (x577 (x1097 (+ x1031 32)))) (x1080 (x577 (x1097 (+ 64 x1031)))) (x1080 (x577 (x1097 (+ 96 x1031)))) (x1080 (x577 (x1097 (+ x1031 128)))) (x1080 (x577 (x1097 (+ 160 x1031)))) 0) (ite (<= x354 224) (x344 (x1080 (x577 x1031)) (x1080 (x577 (x1097 (+ 32 x1031)))) (x1080 (x577 (x1097 (+ 64 x1031)))) (x1080 (x577 (x1097 (+ 96 x1031)))) (x1080 (x577 (x1097 (+ x1031 128)))) (x1080 (x577 (x1097 (+ 160 x1031)))) (x1080 (x577 (x1097 (+ x1031 192)))) 0) (x1080 x447))))))))) (= x374 (x1097 (+ 4 x1031))) (= x1268 (= x1179 x1380)) (= (x896 1461501637330902918203684832716283019655932542975 x1131) x1380) (= (div x575 65536) x1131) (= x1244 x374) (= (x656 x895) x683) (= (x497 (- x82 x1031)) x364) (= (x1097 (+ 32 x374)) x82) (= x575 (x656 (x1034 0)))) (and x1268 (and (= x1041 (x1289 (x1080 x1179))) (not (> 4 x1042)) (not (< x184 1405909242)) (= x693 (x497 (- x1042 4))) (= x1270 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x693) (and (= true (<= x693 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x693)))) (not (> 1617649167 x184)) (= x1042 x364) (= x184 1617649167) (= 36 x1042) (> x1041 0) (> 2061859742 x184) (= x1304 x189) (= 43611735268480658727360147997893738071856775535381453097760378360336924803072 x791)))) (and (=> (and (= x1201 (= x189 x1304)) (not x1270)) (and (=> (and x1201 (and (= x255 32) (= 1 x1453) (= x490 (x896 1461501637330902918203684832716283019655932542975 x796)) (= x267 (x719 (x1080 x189) (x1034 109) 0)) (= (x950 x267) x796))) x1458) (=> (not x1201) x855))) (=> x1270 x855))))) x397)) x252))
(assert (x585 x857))
(assert (= (and x319 (not x14)) x467))
(assert (= (=> (and (not (> x723 x670)) (= x821 (x497 (- x670 x723))) (<= x723 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x723 0) (= (div x821 x171) x329) (= x514 x329) (> x171 0) (<= 0 x171) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x171) (= x1231 (+ x1116 x514)) (= x1290 x368) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x329 x741)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x741) (= x741 x1116) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1290 x329)) (>= x741 0) (= x56 (> x371 0)) (= x329 x766) (= (+ x368 x766) x136)) (and (=> (and (and (= 128 x1243) (= x1372 x954)) (not x56)) x41) (=> (and x56 (and (= x1439 (x769 x1353)) (= x726 (< 0 x986)) (= x1353 (x1097 (+ x1415 x891))) (> x371 0) (= x465 (x497 (- x1 x1415))) (= (x1097 (+ 31 x1439)) x71) (= x891 (x769 x391)) (= x990 (x1097 (+ x1353 32))) (= (mod (* x86 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1138) (= x986 (x1235 128)) (= (x497 (- x465 31)) x825) (or (and (= (<= x825 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x891 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x891 x825)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x891) (<= x825 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x386 128) (= x580 (x1097 (+ 128 x1137))) (= (div x71 32) x86) (not (< 18446744073709551615 x1439)) (= (x1097 (+ 160 x1439)) x1200) (= (x1097 (+ x1138 32)) x1137) (not (or (and (> x281 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x990 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x281 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x990 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x990 x281)))) (= x1415 x391) (= (x497 (- x1 x1439)) x281))) (and (=> x726 x1170) (=> (and (= 0 x952) (not x726)) x572))))) x183))
(assert (x1079 (x228 352)))
(assert (= x1089 (and x884 x418)))
(assert (= (=> (and (= (x795 160) x310) (= x1174 (not (> x32 32))) (= x580 x1349)) (and (=> (= x452 32) x1183) x1174)) x463))
(assert (= (or x1317 x1466) x1441))
(assert (=> (>= 10000 (x130 (x1097 (+ 160 x580)))) (= (x1080 (x130 (x1097 (+ x580 160)))) (x1034 (x130 (x1097 (+ x580 160)))))))
(assert (x585 x1071))
(assert (x585 x369))
(assert (= 2868243304 (x1331 (x1034 2868243304))))
(assert (= (x1331 (x1080 (x450 (x1097 (+ x305 128))))) (x450 (x1097 (+ 128 x305)))))
(assert (= (and x1007 (not x1302)) x1300))
(assert (= 82070247630637395725875354456112310357886651100252770250446759337321580986368 (x1331 (x1034 82070247630637395725875354456112310357886651100252770250446759337321580986368))))
(assert (=> (>= 10000 (x931 (x1097 (+ x580 64)))) (= (x1034 (x931 (x1097 (+ 64 x580)))) (x1080 (x931 (x1097 (+ 64 x580)))))))
(assert (= (x1331 (x1080 (x450 x305))) (x450 x305)))
(assert (= x862 (and (not x1035) x309)))
(assert (x504 x453))
(assert (= (x1129 (+ (- (+ (- (x1097 (+ x305 192)) 160) 68) 68) (x1097 (+ 68 x673)))) 0))
(assert (x585 x260))
(assert (= (or x1375 x607 x644 x524 x547) x672))
(assert (= (x130 (x1097 (+ 192 x580))) (x1331 (x1080 (x130 (x1097 (+ x580 192)))))))
(assert (x585 x165))
(assert (= x207 (or x1428 x421)))
(assert (x585 x791))
(assert (= 0 (x430 (x1097 (+ 160 x5)))))
(assert (x585 x753))
(assert (= (or x177 x1378) x219))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ (- x305 160) 68) 68))) 0))
(assert (= (x909 352) 0))
(assert (x585 x118))
(assert (x585 x1301))
(assert (= x617 (and x1443 x566)))
(assert (= (=> (and (= (< x986 x952) x142) (or (and (= x1039 (x1097 (+ x986 x580))) x142) (not x142))) x1076) x572))
(assert (= 0 (x970 (- (+ (- (+ (- (+ x976 (- x856 x857)) 160) 68) 68) (x1097 (+ x857 68))) x448))))
(assert (x585 x676))
(assert (= (x143 (x1097 (+ x580 64))) (x1331 (x1080 (x143 (x1097 (+ 64 x580)))))))
(assert (x585 x409))
(assert (x585 x937))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ (- (+ (- (+ x720 (- (+ (- (x1097 (+ 160 x5)) x857) x976) x673)) 160) 68) 68) (x1097 (+ 68 x673))) 160)) 68))) 0))
(assert (= (x265 x580) (x1331 (x1080 (x265 x580)))))
(assert (= (x1034 2710164492) (x1080 2710164492)))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (- x402 x857) x976) 160) 68) 68))) 0))
(assert (= x1365 (=> (and (or (and (and (= (x1097 (+ x278 x743)) x1022) (= (ite (= 0 x348) x1301 0) x278) (= x743 (x971 (x1080 x188))) (= x1214 (x1106 (x1080 x1161))) (= x109 x874) (= x296 (- x1214 x278)) (= x348 x230) (< (+ x743 x278) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x480 x341)) x235) (and (not x235) (and (= x341 x480) (= x230 x348) (= x109 x874)))) (= (= 0 x348) x235)) x148)))
(assert (x585 x277))
(assert (= 0 (x430 (x1097 (+ 160 x857)))))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (- (+ 68 (- x305 160)) 68) (x1097 (+ x673 68))) 160)) 68))) 0))
(assert (= 86587964985574495804695408441416066048332504164997306664935388907017567469568 (x1331 (x1034 86587964985574495804695408441416066048332504164997306664935388907017567469568))))
(assert (= x1272 (or x714 x1151)))
(assert (= (and x454 x840) x764))
(assert (= (x1331 (x1034 3211726123)) 3211726123))
(assert (= (x593 (x1097 (+ x305 64))) 0))
(assert (= (x970 (- (x1097 (+ 96 x5)) x448)) 0))
(assert (= (x593 (x1097 (+ x305 192))) 0))
(assert (x585 x561))
(assert (x585 x649))
(assert (x585 x1257))
(assert (x585 x848))
(assert (= x1187 (x1331 (x1080 x1187))))
(assert (= 0 (x970 (- (+ (- (+ (- (+ x976 (- x1001 x857)) 160) 68) 68) (x1097 (+ 68 x857))) x448))))
(assert (x585 x603))
(assert (= (x1129 (+ (- (+ (- (+ 32 (x1097 (+ x305 68))) 160) 68) 68) (x1097 (+ 68 x673)))) 0))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (- (x1097 (+ 32 x5)) x857) x976) 160)) 68) (x1097 (+ x857 68))) x448)) 0))
(assert (= 0 (x1129 (+ (- (+ (- (+ x720 (- (+ (- x1243 x857) x976) x673)) 160) 68) 68) (x1097 (+ x673 68))))))
(assert (x585 x238))
(assert (x1079 (x265 x580)))
(assert (= (=> (and (= (x497 (- x1321 32)) x66) (= x679 (<= x66 224)) (= (x1097 (+ x580 x1309)) x127) (= x1038 (x1097 (+ x127 32))) (= x1321 (x497 (- x1038 x580)))) (and (=> (and (= (ite (>= 32 x66) (x389 (x1080 (x931 x580)) 0) (ite (>= 64 x66) (x719 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) 0) (ite (<= x66 96) (x562 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ x580 32)))) (x1080 (x931 (x1097 (+ x580 64)))) 0) (ite (>= 128 x66) (x517 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ x580 32)))) (x1080 (x931 (x1097 (+ 64 x580)))) (x1080 (x931 (x1097 (+ x580 96)))) 0) (ite (>= 160 x66) (x1062 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) (x1080 (x931 (x1097 (+ x580 64)))) (x1080 (x931 (x1097 (+ 96 x580)))) (x1080 (x931 (x1097 (+ 128 x580)))) 0) (ite (>= 192 x66) (x948 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) (x1080 (x931 (x1097 (+ 64 x580)))) (x1080 (x931 (x1097 (+ x580 96)))) (x1080 (x931 (x1097 (+ 128 x580)))) (x1080 (x931 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x66) (x344 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ x580 32)))) (x1080 (x931 (x1097 (+ x580 64)))) (x1080 (x931 (x1097 (+ 96 x580)))) (x1080 (x931 (x1097 (+ 128 x580)))) (x1080 (x931 (x1097 (+ 160 x580)))) (x1080 (x931 (x1097 (+ x580 192)))) 0) (x1080 x622)))))))) x974) (= (<= x1321 224) x602)) (and (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x633) (= x850 (ite (<= x1321 32) (x389 (x1080 (x931 x580)) 0) (ite (>= 64 x1321) (x719 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ x580 32)))) 0) (ite (<= x1321 96) (x562 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) (x1080 (x931 (x1097 (+ x580 64)))) 0) (ite (>= 128 x1321) (x517 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) (x1080 (x931 (x1097 (+ 64 x580)))) (x1080 (x931 (x1097 (+ x580 96)))) 0) (ite (>= 160 x1321) (x1062 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ x580 32)))) (x1080 (x931 (x1097 (+ 64 x580)))) (x1080 (x931 (x1097 (+ 96 x580)))) (x1080 (x931 (x1097 (+ 128 x580)))) 0) (ite (>= 192 x1321) (x948 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) (x1080 (x931 (x1097 (+ x580 64)))) (x1080 (x931 (x1097 (+ x580 96)))) (x1080 (x931 (x1097 (+ 128 x580)))) (x1080 (x931 (x1097 (+ 160 x580)))) 0) (ite (<= x1321 224) (x344 (x1080 (x931 x580)) (x1080 (x931 (x1097 (+ 32 x580)))) (x1080 (x931 (x1097 (+ x580 64)))) (x1080 (x931 (x1097 (+ x580 96)))) (x1080 (x931 (x1097 (+ x580 128)))) (x1080 (x931 (x1097 (+ x580 160)))) (x1080 (x931 (x1097 (+ 192 x580)))) 0) (x1080 x1414))))))))) (= x668 x633) (= x633 (x618 x850)) (>= x633 0)) x88) x602)) x679)) x1382))
(assert (= (x1331 (x1080 x1434)) x1434))
(assert (= (and x1172 x382) x581))
(assert (= 1617649167 (x1331 (x1034 1617649167))))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ (- (x1097 (+ x305 64)) 160) 68) 68) (x1097 (+ x673 68))) 160) 68) 68)) x448))))
(assert (= x635 (or x555 x785)))
(assert (= (x970 (- 160 x448)) 0))
(assert (= (x143 (x1097 (+ 128 x580))) (x1331 (x1080 (x143 (x1097 (+ x580 128)))))))
(assert (x1079 (x577 x1031)))
(assert (=> (>= 10000 x1310) (= (x1034 x1310) (x1080 x1310))))
(assert (= 0 (x1129 (+ x976 (- x402 x857)))))
(assert (= x1371 (or x1014 x650)))
(assert (= (div x225 2) (x1381 x225 1)))
(assert (= (x931 (x1097 (+ 192 x580))) (x1331 (x1080 (x931 (x1097 (+ 192 x580)))))))
(assert (= (x1034 3109197603) (x1080 3109197603)))
(assert (= (=> (and (= x76 (x1097 (+ x305 96))) (= (not (< 128 x830)) x1195) (= x725 (x443 256))) (and (=> (= 128 x455) x98) x1195)) x936))
(assert (= (x1080 2872958028) (x1034 2872958028)))
(assert (x585 x402))
(assert (= x299 (and (not x1078) x1103)))
(assert (= x787 (and x1055 x1015)))
(assert (x585 x70))
(assert (x1079 (x450 (x1097 (+ 160 x305)))))
(assert (x585 x113))
(assert (= (and x763 (not x1333)) x582))
(assert (= x289 (and x160 (not x1228))))
(assert (x585 x808))
(assert (x585 x1096))
(assert (= (x593 (x1097 (+ 160 x305))) 0))
(assert (= (x430 (+ (- (+ (- (+ (- (x1097 (+ x5 64)) x857) x976) 160) 68) 68) (x1097 (+ 68 x857)))) 0))
(assert (=> (>= 10000 (x143 (x1097 (+ x580 192)))) (= (x1080 (x143 (x1097 (+ 192 x580)))) (x1034 (x143 (x1097 (+ 192 x580)))))))
(assert (=> (<= (x897 (x1097 (+ 96 x580))) 10000) (= (x1080 (x897 (x1097 (+ x580 96)))) (x1034 (x897 (x1097 (+ 96 x580)))))))
(assert (= 3592363634 (x1331 (x1034 3592363634))))
(assert (= (x795 (x1097 (+ 64 x580))) (x1331 (x1080 (x795 (x1097 (+ x580 64)))))))
(assert (=> (<= (x897 x580) 10000) (= (x1080 (x897 x580)) (x1034 (x897 x580)))))
(assert (x585 x1234))
(assert (x585 x574))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ 68 (- (x1097 (+ x305 160)) 160)) 68))) 0))
(assert (x1079 (x577 (x1097 (+ x1031 192)))))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ (- (x1097 (+ x305 160)) 160) 68) 68)) 160)) 68) (x1097 (+ x857 68))) x448)) 0))
(assert (x585 x1260))
(assert (= 0 (x970 (- (x1097 (+ 160 x857)) x448))))
(assert (x585 x375))
(assert (= x586 (x1331 (x1080 x586))))
(assert (= 0 (x593 224)))
(assert (= (x931 (x1097 (+ x580 32))) (x1331 (x1080 (x931 (x1097 (+ 32 x580)))))))
(assert (x585 x1209))
(assert (= (x143 (x1097 (+ 160 x580))) (x1331 (x1080 (x143 (x1097 (+ x580 160)))))))
(assert (x585 x1160))
(assert (= (x1331 (x1080 (x22 x857))) (x22 x857)))
(assert (x1079 (x577 (x1097 (+ x1031 64)))))
(assert (= x493 (and x401 x1127)))
(assert (x585 x1421))
(assert (= (x1034 3592363634) (x1080 3592363634)))
(assert (= 65535 (x1331 (x1034 65535))))
(assert (x585 x1102))
(assert (=> (<= (x897 (x1097 (+ x580 160))) 10000) (= (x1034 (x897 (x1097 (+ 160 x580)))) (x1080 (x897 (x1097 (+ x580 160)))))))
(assert (=> (<= (x130 (x1097 (+ x580 192))) 10000) (= (x1080 (x130 (x1097 (+ 192 x580)))) (x1034 (x130 (x1097 (+ x580 192)))))))
(assert (= (x1331 (x1080 (x788 x5))) (x788 x5)))
(assert (x504 x128))
(assert (x585 x396))
(assert (x585 x951))
(assert (= 0 (x1129 (+ (- (+ 68 (- (+ (- (+ (- x657 x857) x976) x673) x720) 160)) 68) (x1097 (+ x673 68))))))
(assert (= (and x1302 x1007) x1266))
(assert (= x859 (=> (and (= (x1097 (+ 32 x951)) x426) (= (x1097 (+ 32 x426)) x1446) (= (x896 1461501637330902918203684832716283019655932542975 x117) x518) (= x366 x341) (= x951 x775)) x154)))
(assert (= (and x1156 x508) x1410))
(assert (= x524 (and x440 x704)))
(assert (= 0 (x1129 (+ x976 (- (x1097 (+ x5 96)) x857)))))
(assert (x1079 (x1148 x5)))
(assert (x1079 x1416))
(assert (x585 x242))
(assert (x585 x71))
(assert (x585 x328))
(assert (=> (>= 10000 (x265 x580)) (= (x1034 (x265 x580)) (x1080 (x265 x580)))))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- x457 160) 68) 68)) x448))))
(assert (x585 x1316))
(assert (= (x1129 x457) 0))
(assert (= (and x525 x1376) x191))
(assert (x585 x76))
(assert (x585 x380))
(assert (x585 x716))
(assert (x1079 (x897 (x1097 (+ 96 x580)))))
(assert (= x660 (x1331 (x1080 x660))))
(assert (x585 x648))
(assert (= (x593 (+ (- x976 x673) x720)) 0))
(assert (= x993 (and x1206 x767)))
(assert (= (and x1440 x107) x440))
(assert (x585 x316))
(assert (= false x749))
(assert (=> (>= 10000 (x788 (x1097 (+ x5 64)))) (= (x1080 (x788 (x1097 (+ x5 64)))) (x1034 (x788 (x1097 (+ x5 64)))))))
(assert (x585 x1280))
(assert (x585 x816))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ (- (+ (- (+ x976 (- x1243 x857)) x673) x720) 160) 68) 68)) 160) 68) 68))) 0))
(assert (= (x1331 (x1080 x1416)) x1416))
(assert (x1079 (x824 (x1097 (+ x580 96)))))
(assert (x1079 x1434))
(assert (x585 x262))
(assert (= (x265 (x1097 (+ 32 x580))) (x1331 (x1080 (x265 (x1097 (+ x580 32)))))))
(assert (= (x1080 2075580284) (x1034 2075580284)))
(assert (x585 x457))
(assert (= (and (not x1390) x1419) x1291))
(assert (x585 x750))
(assert (= x798 (and x1201 x1056)))
(assert (= 0 (x593 (+ (- (+ (- x402 x857) x976) x673) x720))))
(assert (= 0 (x970 (- (+ 64 (x1097 (+ 68 x857))) x448))))
(assert (= (x1331 (x1080 (x466 (x1097 (+ 160 x580))))) (x466 (x1097 (+ 160 x580)))))
(assert (x585 x1374))
(assert (x585 x963))
(assert (=> (>= 10000 (x1011 (x1097 (+ 64 x580)))) (= (x1034 (x1011 (x1097 (+ x580 64)))) (x1080 (x1011 (x1097 (+ 64 x580)))))))
(assert (x695 x93))
(assert (x585 x155))
(assert (= (x1080 3450351392) (x1034 3450351392)))
(assert (= (and x1033 x999) x217))
(assert (=> (<= (x1148 (x1097 (+ x5 96))) 10000) (= (x1080 (x1148 (x1097 (+ 96 x5)))) (x1034 (x1148 (x1097 (+ x5 96)))))))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ 68 (- (+ (x1097 (+ x305 68)) 96) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68))) 0))
(assert (x585 x579))
(assert (x585 x1114))
(assert (x585 x1008))
(assert (= (x1129 (x1097 (+ x1031 96))) 0))
(assert (= (and x672 x702) x1317))
(assert (=> (>= 10000 (x795 (x1097 (+ x580 64)))) (= (x1080 (x795 (x1097 (+ 64 x580)))) (x1034 (x795 (x1097 (+ x580 64)))))))
(assert (= (x1331 (x1080 x622)) x622))
(assert (x585 x1131))
(assert (x585 x490))
(assert (= (=> (and (= (> x1202 x957) x1145) (or (and x1145 (= (x1097 (+ x580 x957)) x1316)) (not x1145))) x282) x624))
(assert (= 0 (x970 (- (+ (- (+ (- (+ (- (+ 68 (- (+ (- x1463 x673) x720) 160)) 68) (x1097 (+ 68 x673))) 160) 68) 68) (x1097 (+ 68 x857))) x448))))
(assert (= (and x949 x908) x685))
(assert (x1079 x1425))
(assert (= x754 (=> (and (or (and (= (x1097 (+ x376 x1094)) x816) x116) (not x116)) (= x116 (> x338 x376))) x1312)))
(assert (=> (<= x586 10000) (= (x1080 x586) (x1034 x586))))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ 68 (- (x1097 (+ 68 x305)) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68))) 0))
(assert (x585 x541))
(assert (x585 x696))
(assert (x585 x1107))
(assert (x585 x1448))
(assert (= (=> (and (= (x26 x195) x123) (= x259 (not (> x375 32))) (= x762 x387) (= x419 x195)) (and (=> (= x63 32) x1017) x259)) x2))
(assert (=> (>= 10000 (x130 (x1097 (+ 128 x580)))) (= (x1034 (x130 (x1097 (+ 128 x580)))) (x1080 (x130 (x1097 (+ 128 x580)))))))
(assert (= (x143 x580) (x1331 (x1080 (x143 x580)))))
(assert (x1079 (x1011 (x1097 (+ 192 x580)))))
(assert (=> (<= (x22 (x1097 (+ x857 96))) 10000) (= (x1034 (x22 (x1097 (+ 96 x857)))) (x1080 (x22 (x1097 (+ x857 96)))))))
(assert (= 0 (x430 x857)))
(assert (x695 x963))
(assert (= (=> (= x840 (= x442 0)) (and (=> (and (not x840) (and (= (x1097 (+ x978 x305)) x750) (= (or (> x40 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x40 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x40))) x867) (= (x1097 (+ x40 31)) x929) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x929) x978))) (and (=> x867 x181) (=> (and (not x867) (and (= (x331 x305) x1020) (= x1347 (x896 1461501637330902918203684832716283019655932542975 x1020)) (= (= x1020 x1347) x793))) (and (=> (not x793) x181) (=> (and x793 (and (= (= x1020 x328) x290) (= x720 x750))) x707))))) (=> x840 x181))) x494))
(assert (x585 x760))
(assert (x585 x308))
(assert (x585 x901))
(assert (= x454 (or x1480 x1113)))
(assert (x1079 (x292 x5)))
(assert (x585 x1200))
(assert (x585 x230))
(assert (x585 x445))
(assert (x585 x408))
(assert (= 0 (x970 (- (x1097 (+ 64 x5)) x448))))
(assert (= (x1331 (x1080 x1179)) x1179))
(assert (=> (<= x156 10000) (= (x1034 x156) (x1080 x156))))
(assert (= (x970 (- (+ (x1097 (+ 68 x857)) (- (+ (- (+ x976 (- (x1097 (+ 192 x5)) x857)) 160) 68) 68)) x448)) 0))
(assert (x504 x1101))
(assert (= (and x621 (not x1342)) x1149))
(assert (= x644 (and x787 (not x981))))
(assert (x585 x53))
(assert (x585 x28))
(assert (x585 x1070))
(assert (= (x1080 3624036542) (x1034 3624036542)))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (- (+ (- (+ (- x306 x673) x720) 160) 68) 68) (x1097 (+ x673 68))) 160) 68) 68))) 0))
(assert (x585 x732))
(assert (=> (>= 10000 (x130 (x1097 (+ 96 x580)))) (= (x1080 (x130 (x1097 (+ x580 96)))) (x1034 (x130 (x1097 (+ 96 x580)))))))
(assert (x585 x248))
(assert (= x346 (=> (and (= x634 (> x868 x1351)) (or (and (= x1118 (x1097 (+ x580 x1351))) x634) (not x634))) x1036)))
(assert (x585 x322))
(assert (x585 x941))
(assert (x585 x437))
(assert (= (or x431 x217) x1198))
(assert (= (x1034 3211726123) (x1080 3211726123)))
(assert (x585 x1478))
(assert (= (and (not x1277) x19) x485))
(assert (x585 x1424))
(assert (= (or x361 x964) x395))
(assert (= (=> (and (= (x497 (- x499 32)) x1258) (= x564 (x1097 (+ x580 x986))) (= x499 (x497 (- x69 x580))) (= (<= x1258 224) x717) (= (x1097 (+ x564 32)) x69)) (and (=> (and (= (>= 224 x499) x377) (= (ite (>= 32 x1258) (x389 (x1080 (x466 x580)) 0) (ite (<= x1258 64) (x719 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) 0) (ite (>= 96 x1258) (x562 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ x580 64)))) 0) (ite (>= 128 x1258) (x517 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ x580 64)))) (x1080 (x466 (x1097 (+ x580 96)))) 0) (ite (<= x1258 160) (x1062 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ x580 64)))) (x1080 (x466 (x1097 (+ 96 x580)))) (x1080 (x466 (x1097 (+ x580 128)))) 0) (ite (<= x1258 192) (x948 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ 64 x580)))) (x1080 (x466 (x1097 (+ x580 96)))) (x1080 (x466 (x1097 (+ x580 128)))) (x1080 (x466 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x1258) (x344 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ 64 x580)))) (x1080 (x466 (x1097 (+ 96 x580)))) (x1080 (x466 (x1097 (+ 128 x580)))) (x1080 (x466 (x1097 (+ x580 160)))) (x1080 (x466 (x1097 (+ 192 x580)))) 0) (x1080 x1434)))))))) x269)) (and (=> (and (= (> x957 0) x892) (= (x466 128) x957) (<= x1336 255) (> x1336 0) (= (x1322 x1265) x1336) (<= 0 x1336) (= (ite (>= 32 x499) (x389 (x1080 (x466 x580)) 0) (ite (>= 64 x499) (x719 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ 32 x580)))) 0) (ite (<= x499 96) (x562 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ 32 x580)))) (x1080 (x466 (x1097 (+ x580 64)))) 0) (ite (<= x499 128) (x517 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ x580 64)))) (x1080 (x466 (x1097 (+ x580 96)))) 0) (ite (>= 160 x499) (x1062 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ 64 x580)))) (x1080 (x466 (x1097 (+ 96 x580)))) (x1080 (x466 (x1097 (+ x580 128)))) 0) (ite (<= x499 192) (x948 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ x580 32)))) (x1080 (x466 (x1097 (+ x580 64)))) (x1080 (x466 (x1097 (+ x580 96)))) (x1080 (x466 (x1097 (+ 128 x580)))) (x1080 (x466 (x1097 (+ x580 160)))) 0) (ite (>= 224 x499) (x344 (x1080 (x466 x580)) (x1080 (x466 (x1097 (+ 32 x580)))) (x1080 (x466 (x1097 (+ x580 64)))) (x1080 (x466 (x1097 (+ 96 x580)))) (x1080 (x466 (x1097 (+ 128 x580)))) (x1080 (x466 (x1097 (+ 160 x580)))) (x1080 (x466 (x1097 (+ 192 x580)))) 0) (x1080 x1310)))))))) x1265) (> 256 x1336)) (and (=> x892 x304) (=> (and (not x892) (= x1202 0)) x624))) x377)) x717)) x1076))
(assert (= 0 (x430 x578)))
(assert (x585 x647))
(assert (x585 x95))
(assert (x1079 (x1148 (x1097 (+ x5 96)))))
(assert (= 0 (x1129 (+ (- x657 x857) x976))))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- x976 160) 68) 68)))))
(assert (x585 x839))
(assert (x585 x657))
(assert (=> (>= 10000 (x1011 (x1097 (+ 160 x580)))) (= (x1080 (x1011 (x1097 (+ x580 160)))) (x1034 (x1011 (x1097 (+ 160 x580)))))))
(assert (x585 x128))
(assert (x585 x622))
(assert (= (or x85 x722 x545) x400))
(assert (= (or x558 x779 x485 x1026 x745) x525))
(assert (= x650 (and x793 x681)))
(assert (= (x897 (x1097 (+ x580 96))) (x1331 (x1080 (x897 (x1097 (+ 96 x580)))))))
(assert (x585 x302))
(assert (x585 x1064))
(assert (=> (>= 10000 x324) (= (x1080 x324) (x1034 x324))))
(assert (= x701 (or x274 (and (not x889) x1272))))
(assert (= (x593 (+ x720 (- (+ x976 (- x1243 x857)) x673))) 0))
(assert (= (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- x1463 160) 68) 68)) x448)) 0))
(assert (x44 x683))
(assert (x585 x1363))
(assert (x585 x223))
(assert (x585 x1309))
(assert (= x350 (and x6 x639)))
(assert (= (x292 (x1097 (+ 128 x5))) (x1331 (x1080 (x292 (x1097 (+ 128 x5)))))))
(assert (=> (<= (x931 (x1097 (+ x580 160))) 10000) (= (x1034 (x931 (x1097 (+ 160 x580)))) (x1080 (x931 (x1097 (+ x580 160)))))))
(assert (=> (>= 10000 x507) (= (x1080 x507) (x1034 x507))))
(assert (= x841 (and x1037 x818)))
(assert (= 0 (x430 (+ (x1097 (+ 68 x857)) (- (+ (- (+ x976 (- (x1097 (+ x5 96)) x857)) 160) 68) 68)))))
(assert (= (and x395 x449) x1337))
(assert (x585 x1225))
(assert (=> (<= (x1148 (x1097 (+ 192 x5))) 10000) (= (x1080 (x1148 (x1097 (+ x5 192)))) (x1034 (x1148 (x1097 (+ x5 192)))))))
(assert (x585 x640))
(assert (= (x593 (+ x720 (- x306 x673))) 0))
(assert (= (x970 (- (x1097 (+ 96 x857)) x448)) 0))
(assert (x1079 (x577 (x1097 (+ x1031 160)))))
(assert (=> (>= 10000 (x788 x5)) (= (x1034 (x788 x5)) (x1080 (x788 x5)))))
(assert (x1079 (x130 (x1097 (+ x580 160)))))
(assert (=> (>= 10000 x1057) (= (x1080 x1057) (x1034 x1057))))
(assert (= (x1331 (x1080 (x130 (x1097 (+ 160 x580))))) (x130 (x1097 (+ 160 x580)))))
(assert (x585 x705))
(assert (= x189 (x1331 (x1080 x189))))
(assert (= (x1331 (x1080 (x824 (x1097 (+ x580 160))))) (x824 (x1097 (+ 160 x580)))))
(assert (= (x1129 (+ (- (+ 68 (- (+ 128 (x1097 (+ 68 x305))) 160)) 68) (x1097 (+ 68 x673)))) 0))
(assert (x1079 (x788 x5)))
(assert (= (x1331 (x1080 x1310)) x1310))
(assert (= (and x96 (not x904)) x767))
(assert (= x328 (x1331 (x1080 x328))))
(assert (= 0 (x430 (+ (- (+ 68 (- (+ (- x1001 x857) x976) 160)) 68) (x1097 (+ 68 x857))))))
(assert (x585 x366))
(assert (x585 x1059))
(assert (= (x450 (x1097 (+ 32 x305))) (x1331 (x1080 (x450 (x1097 (+ 32 x305)))))))
(assert (x585 x90))
(assert (x585 x885))
(assert (= x1339 (=> (and (= x318 (< x404 x1124)) (or (and x318 (= x134 (x1097 (+ x1031 x404)))) (not x318))) x780)))
(assert (x585 x1138))
(assert (x695 x640))
(assert (= 0 (x970 (- (+ (x1097 (+ 68 x857)) (- (+ (- (x1097 (+ 128 x1031)) 160) 68) 68)) x448))))
(assert (= (x1331 (x1080 (x577 (x1097 (+ x1031 64))))) (x577 (x1097 (+ x1031 64)))))
(assert (= x1030 (or (and x1109 x1270) (and (not x1201) x1056))))
(assert (=> (<= (x466 (x1097 (+ 64 x580))) 10000) (= (x1080 (x466 (x1097 (+ 64 x580)))) (x1034 (x466 (x1097 (+ 64 x580)))))))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (- x5 x857) x976) 160)) 68))) 0))
(assert (x1079 (x276 (x1097 (+ x1031 160)))))
(assert (x1079 x194))
(assert (= (x1331 (x1080 (x1148 (x1097 (+ 192 x5))))) (x1148 (x1097 (+ x5 192)))))
(assert (=> (>= 10000 (x22 x857)) (= (x1034 (x22 x857)) (x1080 (x22 x857)))))
(assert (= x1440 (and x981 x787)))
(assert (= (and x456 (not x167)) x689))
(assert (= (x788 (x1097 (+ 64 x5))) (x1331 (x1080 (x788 (x1097 (+ 64 x5)))))))
(assert (x585 x529))
(assert (= x50 (and x31 (not x1296))))
(assert (= x110 (and x1078 x1103)))
(assert (= (x1331 (x1080 (x130 (x1097 (+ x580 128))))) (x130 (x1097 (+ 128 x580)))))
(assert (x585 x406))
(assert (=> (<= (x22 (x1097 (+ 32 x857))) 10000) (= (x1034 (x22 (x1097 (+ 32 x857)))) (x1080 (x22 (x1097 (+ 32 x857)))))))
(assert (x585 x668))
(assert (=> (>= 10000 (x466 (x1097 (+ 192 x580)))) (= (x1080 (x466 (x1097 (+ 192 x580)))) (x1034 (x466 (x1097 (+ 192 x580)))))))
(assert (= (x593 (+ (- (+ (- (x1097 (+ x5 192)) x857) x976) x673) x720)) 0))
(assert (=> (>= 10000 (x795 x580)) (= (x1034 (x795 x580)) (x1080 (x795 x580)))))
(assert (=> (<= x645 10000) (= (x1080 x645) (x1034 x645))))
(assert (= (x593 (+ x720 (- (+ (- (x1097 (+ x5 64)) x857) x976) x673))) 0))
(assert (x585 x645))
(assert (= (and (not x1454) x253) x1240))
(assert (= x211 (=> (and (= x1376 (< x1204 x549)) (or (not x1376) (and x1376 (= x822 (x1097 (+ x1204 x844)))))) x359)))
(assert (=> (<= (x276 (x1097 (+ 160 x1031))) 10000) (= (x1080 (x276 (x1097 (+ 160 x1031)))) (x1034 (x276 (x1097 (+ x1031 160)))))))
(assert (x585 x246))
(assert (= (and x610 (not x988)) x473))
(assert (= (x970 (- (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (x1097 (+ x305 68)) 160)) 68)) 160)) 68)) x448)) 0))
(assert (= 0 (x909 320)))
(assert (= x177 (and x1431 x528)))
(assert (x585 x983))
(assert (x1079 (x466 (x1097 (+ 160 x580)))))
(assert (x585 x762))
(assert (x695 x683))
(assert (x585 x63))
(assert (x585 x475))
(assert (= (and x231 x883) x1016))
(assert (x585 x153))
(assert (= (and x1228 x160) x827))
(assert (x585 x1051))
(assert (x1079 (x1011 (x1097 (+ 32 x580)))))
(assert (= (and x672 (not x702)) x1466))
(assert (= (=> (and (or (not x106) (and (= (x1097 (+ x28 x5)) x323) x106)) (= (< x28 x663) x106)) x3) x934))
(assert (x585 x279))
(assert (= x703 (or x50 x1049 x862 x1313 x264)))
(assert (x585 x295))
(assert (= x204 (and x834 x1145)))
(assert (x585 x1090))
(assert (x585 x734))
(assert (= x1217 (and (not x1082) x1473)))
(assert (x585 x660))
(assert (x1079 (x788 (x1097 (+ 32 x5)))))
(assert (= (or x757 (and x491 x30)) x105))
(assert (= x1109 (and x1198 x1268)))
(assert (= (x1148 (x1097 (+ x5 64))) (x1331 (x1080 (x1148 (x1097 (+ 64 x5)))))))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (- (+ (- (+ 32 (x1097 (+ x305 68))) 160) 68) 68) (x1097 (+ 68 x673))) 160)) 68) (x1097 (+ 68 x857))) x448))))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (- x856 x857) x976) 160) 68) 68)))))
(assert (x585 x910))
(assert (= (x577 x1031) (x1331 (x1080 (x577 x1031)))))
(assert (x1079 (x1011 (x1097 (+ 160 x580)))))
(assert (= (x292 (x1097 (+ x5 96))) (x1331 (x1080 (x292 (x1097 (+ 96 x5)))))))
(assert (= (=> (and (= (x497 (- x747 x580)) x1400) (= x226 (<= x1219 224)) (= (x1097 (+ x580 x32)) x1054) (= (x1097 (+ x1054 32)) x747) (= (x497 (- x1400 32)) x1219)) (and x226 (=> (and (= (<= x1400 224) x1222) (= (ite (<= x1219 32) (x389 (x1080 (x897 x580)) 0) (ite (<= x1219 64) (x719 (x1080 (x897 x580)) (x1080 (x897 (x1097 (+ 32 x580)))) 0) (ite (>= 96 x1219) (x562 (x1080 (x897 x580)) (x1080 (x897 (x1097 (+ x580 32)))) (x1080 (x897 (x1097 (+ x580 64)))) 0) (ite (>= 128 x1219) (x517 (x1080 (x897 x580)) (x1080 (x897 (x1097 (+ 32 x580)))) (x1080 (x897 (x1097 (+ x580 64)))) (x1080 (x897 (x1097 (+ x580 96)))) 0) (ite (<= x1219 160) (x1062 (x1080 (x897 x580)) (x1080 (x897 (x1097 (+ 32 x580)))) (x1080 (x897 (x1097 (+ 64 x580)))) (x1080 (x897 (x1097 (+ 96 x580)))) (x1080 (x897 (x1097 (+ 128 x580)))) 0) (ite (>= 192 x1219) (x948 (x1080 (x897 x580)) (x1080 (x897 (x1097 (+ 32 x580)))) (x1080 (x897 (x1097 (+ 64 x580)))) (x1080 (x897 (x1097 (+ 96 x580)))) (x1080 (x897 (x1097 (+ 128 x580)))) (x1080 (x897 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x1219) (x344 (x1080 (x897 x580)) (x1080 (x897 (x1097 (+ 32 x580)))) (x1080 (x897 (x1097 (+ x580 64)))) (x1080 (x897 (x1097 (+ x580 96)))) (x1080 (x897 (x1097 (+ 128 x580)))) (x1080 (x897 (x1097 (+ 160 x580)))) (x1080 (x897 (x1097 (+ x580 192)))) 0) (x1080 x660)))))))) x989)) (and (=> (and (= x1161 (x896 1461501637330902918203684832716283019655932542975 x117)) (= x1271 (x1152 (x1080 x1161))) (= (x1152 (x1080 x188)) x628) (= (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1271 x1301)) (>= x628 x1301)) x1330)) (and (=> (and (and (= x230 0) (= 0 x874) (= x341 x954)) (not x1330)) x148) (=> (and (and (or (and x1390 (and (= x480 x579) (= x13 (<= x1225 (x1479 (x1080 x188)))) x881 (< x109 4294967296) (= x408 (x677 (x1080 x1161))) (= x1225 (x677 (x1080 x188))) x13 (= x881 (= (x1479 (x1080 x1161)) x408)))) (and (= x954 x480) (not x1390))) (and (= (x120 (x1080 x1161)) x476) (= (- x1237 x1301) x758) (= (x1152 (x1080 x188)) x1237) (< (+ x1301 x476) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x899 (x1097 (+ x1301 x476))) (= x1390 (< 0 x348)))) x1330) x1365))) x1222)))) x200))
(assert (= (x1331 (x1080 (x228 288))) (x228 288)))
(assert (x585 x1353))
(assert (= x1340 (and x1181 x220)))
(assert (x695 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x585 x1413))
(assert (= x52 (and x639 (not x6))))
(assert (x1079 (x466 (x1097 (+ x580 64)))))
(assert (= (x430 (+ (- (+ (- (+ (- (+ 68 (- (+ x720 (- (+ x976 (- (x1097 (+ 192 x5)) x857)) x673)) 160)) 68) (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ 68 x857)))) 0))
(assert (x1079 (x450 (x1097 (+ x305 192)))))
(assert (=> (>= 10000 x1416) (= (x1080 x1416) (x1034 x1416))))
(assert (x585 x123))
(assert (x585 x1006))
(assert (= (or x1340 x458) x1007))
(assert (= (x450 (x1097 (+ 64 x305))) (x1331 (x1080 (x450 (x1097 (+ x305 64)))))))
(assert (= (x430 160) 0))
(assert (= x156 (x1331 (x1080 x156))))
(assert (= (=> (and (= (not (< 32 x1153)) x1066) (= (x398 x856) x565) (= x419 x856) (= x5 x1100)) (and x1066 (=> (= x1346 32) x1254))) x72))
(assert (= (=> (and (= x669 (< x1286 x284)) (or (and (= x27 (x1097 (+ x5 x1286))) x669) (not x669))) x94) x432))
(assert (x1079 x291))
(assert (= x980 (and x1105 x1043)))
(assert (= x41 (=> (= x317 (> x371 0)) (and (=> (and x317 (and (= x424 (> x373 0)) (= x266 x1415) (> x371 0) (= (x497 (- x1 x1415)) x765) (= (x497 (- x765 31)) x871) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x696) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1004)) (< x696 x1004)) (and (<= x1004 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x696)))) (= x1004 (x1097 (+ 32 x9))) (= x1234 (div x1323 32)) (= x1159 (x1097 (+ 32 x625))) (= (x769 x537) x906) (= x625 (mod (* 32 x1234) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x769 x9) x223) (= x1350 (x1097 (+ x419 x223))) (not (< 18446744073709551615 x223)) (= (x1097 (+ x1415 x806)) x9) (> x987 0) (= (x769 x266) x806) (= (x1097 (+ 32 x1243)) x419) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x806) (<= x871 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x806 x871)) (and (> x806 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x871))) (= (x1097 (+ x223 31)) x1323) (= x373 (x1259 x1243)) (= x696 (x497 (- x1 x223))) (= x396 x537) (= x857 (x1097 (+ x1243 x1159))))) (and (=> x424 x270) (=> (and (= x1395 0) (not x424)) x243))) (=> (not x317) x749)))))
(assert (= (x1331 (x1080 x507)) x507))
(assert (= (x1331 (x1034 3450351392)) 3450351392))
(assert (= x274 (and x889 x1272)))
(assert (= (x593 256) 0))
(assert (= x1315 (or x800 x635)))
(assert (x1079 x189))
(assert (= (and x567 x417) x479))
(assert (x585 x1020))
(assert (x585 x1414))
(assert (= x919 (=> (and (= x657 x419) (= x5 x716) (= (x1148 x657) x894) (= (not (< 32 x1286)) x748)) (and (=> (= x284 32) x432) x748))))
(assert (= (x795 (x1097 (+ x580 32))) (x1331 (x1080 (x795 (x1097 (+ 32 x580)))))))
(assert (x1079 (x130 (x1097 (+ 192 x580)))))
(assert (x585 x272))
(assert (x1079 (x450 (x1097 (+ 96 x305)))))
(assert (= (x1331 (x1080 (x143 (x1097 (+ x580 32))))) (x143 (x1097 (+ x580 32)))))
(assert (=> (<= (x276 (x1097 (+ 32 x1031))) 10000) (= (x1080 (x276 (x1097 (+ 32 x1031)))) (x1034 (x276 (x1097 (+ 32 x1031)))))))
(assert (x1079 (x228 320)))
(assert (= x1046 (and x56 x1418)))
(assert (x1079 (x824 (x1097 (+ x580 192)))))
(assert (x585 x11))
(assert (=> (>= 10000 (x931 (x1097 (+ 192 x580)))) (= (x1034 (x931 (x1097 (+ x580 192)))) (x1080 (x931 (x1097 (+ x580 192)))))))
(assert (= x314 (and x708 x1189)))
(assert (= (=> (= (not (< 1 x371)) x1167) (and x749 x1167)) x674))
(assert (x585 x1360))
(assert (= 1405909242 (x1331 (x1034 1405909242))))
(assert (x585 x499))
(assert (x585 x1024))
(assert (x585 x349))
(assert (= (x1034 2745196236) (x1080 2745196236)))
(assert (= x890 (=> (= x510 (not (< 32 x548))) (and (=> (= x946 32) x240) x510))))
(assert (x585 x93))
(assert (= (x897 (x1097 (+ x580 32))) (x1331 (x1080 (x897 (x1097 (+ x580 32)))))))
(assert (= 0 (x1129 x594)))
(assert (x585 x293))
(assert (x585 x89))
(assert (x585 x1057))
(assert (x1079 (x577 (x1097 (+ 128 x1031)))))
(assert (= (x1034 2061859742) (x1080 2061859742)))
(assert (x585 x271))
(assert (x1079 x1182))
(assert (x585 x755))
(assert (= (x1129 256) 0))
(assert (= (x970 (- (x1097 (+ x857 128)) x448)) 0))
(assert (x585 x693))
(assert (x44 x640))
(assert (= (x1331 (x1080 (x824 (x1097 (+ 192 x580))))) (x824 (x1097 (+ x580 192)))))
(assert (= (x1331 (x1080 x194)) x194))
(assert (x1079 (x577 (x1097 (+ x1031 32)))))
(assert (= (x931 (x1097 (+ x580 64))) (x1331 (x1080 (x931 (x1097 (+ x580 64)))))))
(assert (= (and x1037 (not x818)) x558))
(assert (= (x1129 x1031) 0))
(assert (x585 x345))
(assert (x585 x612))
(assert (= (and x740 x744) x898))
(assert (= (x970 (- (+ (- (+ (- (+ (- (+ 68 (- (+ (x1097 (+ 68 x305)) 160) 160)) 68) (x1097 (+ 68 x673))) 160) 68) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (= 0 (x1129 160)))
(assert (= (=> (and (or (and x999 (= x1448 (x1097 (+ x1031 x688)))) (not x999)) (= x999 (< x688 x427))) x252) x18))
(assert (= x721 (and (not x418) x884)))
(assert (= (x970 (- (+ (- (+ (- (x1097 (+ x1031 192)) 160) 68) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (x504 x632))
(assert (= (x1331 (x1080 (x1148 (x1097 (+ 160 x5))))) (x1148 (x1097 (+ 160 x5)))))
(assert (= (x430 (+ (- (+ 68 (- (+ (- (+ (- (x1097 (+ x305 128)) 160) 68) 68) (x1097 (+ 68 x673))) 160)) 68) (x1097 (+ x857 68)))) 0))
(assert (x585 x1306))
(assert (x585 x651))
(assert (= (and (not x1402) x993) x1480))
(assert (=> (<= x1187 10000) (= (x1034 x1187) (x1080 x1187))))
(assert (= (=> (and (= x1156 (> x1395 x373)) (or (and x1156 (= (x1097 (+ x857 x373)) x643)) (not x1156))) x1288) x243))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (- (+ (- x305 160) 68) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ 68 x857))) x448))))
(assert (x585 x945))
(assert (=> (<= (x931 (x1097 (+ x580 96))) 10000) (= (x1080 (x931 (x1097 (+ 96 x580)))) (x1034 (x931 (x1097 (+ 96 x580)))))))
(assert (x1079 x324))
(assert (x1079 (x466 (x1097 (+ 32 x580)))))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ (- x306 x673) x720) 160)) 68))) 0))
(assert (x585 x1041))
(assert (x585 x998))
(assert (x585 x193))
(assert (= x1378 (and x1431 (not x528))))
(assert (x1079 (x265 (x1097 (+ x580 32)))))
(assert (= (x1011 (x1097 (+ 192 x580))) (x1331 (x1080 (x1011 (x1097 (+ 192 x580)))))))
(assert (x585 x984))
(assert (= (and (not x1005) x1441) x1255))
(assert (x585 x538))
(assert (x585 x1077))
(assert (= x839 (x1331 (x1080 x839))))
(assert (x585 x1118))
(assert (x585 x305))
(assert (x585 x583))
(assert (x585 x284))
(assert (x585 x1405))
(assert (x585 x1068))
(assert (= (x1148 (x1097 (+ x5 96))) (x1331 (x1080 (x1148 (x1097 (+ 96 x5)))))))
(assert (x585 x387))
(assert (= (x1331 (x1080 x188)) x188))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ (- (+ x720 (- x976 x673)) 160) 68) 68))) 0))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ (- (x1097 (+ 192 x1031)) 160) 68) 68))) 0))
(assert (= (x430 (x1097 (+ x580 192))) 0))
(assert (= (x430 (+ (- (+ (- (+ (- x1243 x857) x976) 160) 68) 68) (x1097 (+ x857 68)))) 0))
(assert (x585 x794))
(assert (= (x276 (x1097 (+ x1031 160))) (x1331 (x1080 (x276 (x1097 (+ x1031 160)))))))
(assert (x585 x1326))
(assert (= (x1331 (x1080 (x22 (x1097 (+ x857 96))))) (x22 (x1097 (+ x857 96)))))
(assert (x585 x720))
(assert (= (x1034 4294967296) (x1080 4294967296)))
(assert (= x727 (and x1058 x669)))
(assert (x585 x1469))
(assert (x585 x179))
(assert (= (x1331 (x1080 (x577 (x1097 (+ 160 x1031))))) (x577 (x1097 (+ x1031 160)))))
(assert (= (x430 (x1097 (+ x580 32))) 0))
(assert (x585 x323))
(assert (= (x824 x580) (x1331 (x1080 (x824 x580)))))
(assert (x585 x101))
(assert (x585 x4))
(assert (= (and x1318 x1385) x19))
(assert (=> (>= 10000 (x795 (x1097 (+ x580 32)))) (= (x1080 (x795 (x1097 (+ x580 32)))) (x1034 (x795 (x1097 (+ 32 x580)))))))
(assert (x585 x21))
(assert (= 0 (x1129 (+ (x1097 (+ x673 68)) 96))))
(assert (=> (>= 10000 x1328) (= (x1080 x1328) (x1034 x1328))))
(assert (x585 x117))
(assert (= (x1331 (x1080 x1161)) x1161))
(assert (=> (>= 10000 (x1148 (x1097 (+ x5 160)))) (= (x1034 (x1148 (x1097 (+ 160 x5)))) (x1080 (x1148 (x1097 (+ x5 160)))))))
(assert (x44 x1314))
(assert (=> (<= x661 10000) (= (x1034 x661) (x1080 x661))))
(assert (x1079 x1461))
(assert (= x1303 (x1331 (x1080 x1303))))
(assert (x585 x1229))
(assert (x585 x152))
(assert (x504 x1213))
(assert (= (=> (and (not (< x1160 2868243304)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x647 x121)) (= x222 x117) (not (< 18446744073709551615 x23)) (not (< 18446744073709551615 x371)) (<= 0 x794) (= 3450351392 x233) (not (= 0 x1329)) (= (x1097 (+ x362 32)) x396) (= x1358 (x1097 (+ 31 x248))) (<= x648 255) (>= x515 0) (= x1363 x552) (<= x1314 1461501637330902918203684832716283019655932542975) (= (x1152 (x1080 x328)) x1413) (= x501 x984) (<= x945 1461501637330902918203684832716283019655932542975) (<= 0 x464) (= x647 x1136) (<= x117 1461501637330902918203684832716283019655932542975) (= x542 false) (= x371 x987) (= x303 (< 0 (x1289 (x1080 x507)))) (<= 0 x587) (= x349 4) (= x362 (x1097 (+ x984 4))) (<= 0 x294) (= (x1152 (x1080 x188)) x322) (= x345 (x497 (- x1 4))) (not (< 18446744073709551615 x987)) (>= x604 0) (not (= 0 x222)) (>= 255 x885) (> x1179 0) x297 (not (< x1 x482)) (>= 1461501637330902918203684832716283019655932542975 x715) (not (= x188 x328)) (<= x294 1461501637330902918203684832716283019655932542975) (= x117 x221) (not (= x507 x188)) (>= x322 0) (>= 1461501637330902918203684832716283019655932542975 x954) (<= x730 1461501637330902918203684832716283019655932542975) (= x730 x853) (>= 1461501637330902918203684832716283019655932542975 x328) (> x1292 0) (or (and (> x1358 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1358)) (< x1358 x1))) (not (or (> x345 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x345)) (< x345 128)))) (<= x604 1461501637330902918203684832716283019655932542975) (not (= 2 x464)) (not (= x1179 x328)) (<= 0 x1476) (not (= 2996296902 x1160)) (= (x1097 (+ x662 x396)) x36) (>= x192 0) (> x188 0) (= false x1203) x12 (= x705 (x1289 (x1080 x188))) (<= x1450 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x1160 2868243304)) (= x1176 false) (= x561 x587) (= (x1097 (+ x248 32)) x1415) (not (= 2872958028 x1160)) (>= x121 0) (< x1160 3548638100) (>= 1461501637330902918203684832716283019655932542975 x526) (not (< 18446744073709551615 x501)) (= x333 x1314) (>= x945 0) (>= x885 0) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x170) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1)) (and (< x170 x1) (= (<= x1 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x170)))) (>= 1461501637330902918203684832716283019655932542975 x515) x303 (<= 0 x511) (not (= x328 x507)) (= (> (x1289 (x1080 x328)) 0) x1427) (= x647 (x1152 (x1080 x188))) (= 0 x102) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1) true) (< 131 x1)) (<= x188 1461501637330902918203684832716283019655932542975) (<= x1363 1461501637330902918203684832716283019655932542975) (>= x526 0) (= x307 x121) (>= x715 0) (>= 1461501637330902918203684832716283019655932542975 x587) (not (= x333 0)) (= x80 x117) (= (x1097 (+ x1415 x692)) x482) (not (= x371 0)) (= (x497 (- x117 x188)) x1292) (= x297 (> (x1289 (x1080 x1179)) 0)) (<= 0 x1450) (not (> 4 x1)) (= x102 x996) (not (> 2075580284 x1160)) (= false x1451) (>= 1461501637330902918203684832716283019655932542975 x507) (= (div x808 2) x670) (= x662 (mod (* x987 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x1450 0) x949) (= x170 (x1097 (+ 31 x362))) (<= x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x12 (< 0 (x1289 (x1080 x188)))) (< 0 x705) (= x192 (x1152 (x1080 x1179))) (= x23 x409) (= x604 x853) (= x692 (mod (* 32 x371) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x464) (>= 255 x794) (not (= x188 x1179)) (>= 1461501637330902918203684832716283019655932542975 x511) (not (= x507 x1179)) (<= 0 x648) x1427 (<= 0 x4) (> x507 0) (<= x1179 1461501637330902918203684832716283019655932542975) (= 3450351392 x1160) (>= x1413 0) (= x808 (+ x1136 x307)) (= x552 x140) (= (x1097 (+ x409 4)) x248) (= x1476 (x1152 (x1080 x507))) (not (> x36 x1)) (>= x730 0) (= x399 x1314) (<= 0 x954) (<= 0 x1363) (= x987 (x769 x362)) (not (= x1160 3104404863)) (<= x4 255) (= x117 x1329) (> x328 0) (= x371 (x769 x248))) (and (=> (and (and (and (>= x121 0) (= x277 (x497 (- x300 x122))) (<= x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x300 x122)) (< (+ x121 x256) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x300 (div x1212 2)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1450) (= x1212 (+ x620 x503)) (= x503 x256) (<= x122 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x620 x121) (>= x1450 0) (= x256 (x1152 (x1080 x188))) (<= 0 x122) (= (< 0 x1450) x1370)) (or (and (= 0 x770) (not x1370)) (and x1370 (and (>= x1450 0) (= (div x592 x1450) x539) (< 0 x1450) (= (* 1000000000000000000000000 x277) x592) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x277 1000000000000000000000000)) (<= x1450 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x539 x770))))) x949) x378) (=> (and (and (= x286 x1457) (= 0 x1290)) (not x949)) x183))) x1048))
(assert (= (and (not x567) x417) x146))
(assert (x585 x1188))
(assert (= 0 (x593 (+ 96 (x1097 (+ x305 68))))))
(assert (x585 x480))
(assert (= (or x168 x865) x417))
(assert (= (=> (and (= x580 x819) (= x147 (not (> x1210 32))) (= (x595 160) x1449)) (and x147 (=> (= x216 32) x433))) x1236))
(assert (= (x1080 1000000000) (x1034 1000000000)))
(assert (= (x276 (x1097 (+ 64 x1031))) (x1331 (x1080 (x276 (x1097 (+ 64 x1031)))))))
(assert (x1079 (x228 192)))
(assert (=> (<= (x143 (x1097 (+ x580 96))) 10000) (= (x1080 (x143 (x1097 (+ 96 x580)))) (x1034 (x143 (x1097 (+ 96 x580)))))))
(assert (= (x1331 (x1080 (x292 (x1097 (+ x5 32))))) (x292 (x1097 (+ 32 x5)))))
(assert (x585 x730))
(assert (= (x593 160) 0))
(assert (x585 x374))
(assert (x585 x743))
(assert (= x1151 (and (not x1332) x1248)))
(assert (= (x430 (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ x720 (- (+ x976 (- (x1097 (+ 32 x5)) x857)) x673)) 160)) 68)) 160)) 68) (x1097 (+ x857 68)))) 0))
(assert (x585 x1180))
(assert (x585 x364))
(assert (=> (>= 10000 (x897 (x1097 (+ 64 x580)))) (= (x1034 (x897 (x1097 (+ 64 x580)))) (x1080 (x897 (x1097 (+ x580 64)))))))
(assert (x1079 (x897 (x1097 (+ x580 64)))))
(assert (x585 x673))
(assert (= 0 (x970 (- (+ (- (+ (- (+ (x1097 (+ x673 68)) (- (+ 68 (- (+ (- (+ x976 (- x402 x857)) x673) x720) 160)) 68)) 160) 68) 68) (x1097 (+ x857 68))) x448))))
(assert (x1079 (x265 (x1097 (+ 192 x580)))))
(assert (= x491 (or x915 x870)))
(assert (=> (>= 10000 (x22 (x1097 (+ x857 160)))) (= (x1080 (x22 (x1097 (+ x857 160)))) (x1034 (x22 (x1097 (+ 160 x857)))))))
(assert (= (x430 (+ (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (x1097 (+ 32 x305)) 160)) 68)) 160) 68) 68) (x1097 (+ 68 x857)))) 0))
(assert (=> (<= x660 10000) (= (x1080 x660) (x1034 x660))))
(assert (= x1458 (=> (and (= (= 0 x1453) x459) (not x459) (= (x1097 (+ x1031 x1009)) x673) (= (x1097 (+ x1264 32)) x772) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x901) x1009) (= (x343 128) x1204) (= x844 (x1097 (+ 32 x772))) (<= x260 1461501637330902918203684832716283019655932542975) (not x608) (= x495 x1031) (= (x611 x495) x260) (= (or (and (< x255 32) (= true (<= x255 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x255)) x608) (= x1318 (> x1204 0)) (= x1264 (x1097 (+ 4 x673))) (= x901 (x1097 (+ 31 x255))) (= x1264 x879)) (and (=> (and x1318 (and (= x844 x1000) (= (< 32 x1204) x1277) (= x792 (x1224 160)))) (and (=> (and x1277 (and (= (x1154 192) x8) (= (< 64 x1204) x818) (= (x1097 (+ 32 x844)) x119))) (and (=> (and (not x818) (= 64 x549)) x211) (=> (and (and (= x180 (x237 224)) (= (> x1204 96) x478) (= x690 (x1097 (+ 64 x844)))) x818) (and (=> x478 x807) (=> (and (not x478) (= x549 96)) x211))))) (=> (and (not x1277) (= 32 x549)) x211))) (=> (and (= 0 x549) (not x1318)) x211)))))
(assert (=> (<= (x450 (x1097 (+ x305 64))) 10000) (= (x1034 (x450 (x1097 (+ 64 x305)))) (x1080 (x450 (x1097 (+ x305 64)))))))
(assert (x585 x630))
(assert (x585 x1173))
(assert (= x100 (and (not x318) x703)))
(assert (=> (<= (x824 (x1097 (+ 96 x580))) 10000) (= (x1080 (x824 (x1097 (+ x580 96)))) (x1034 (x824 (x1097 (+ 96 x580)))))))
(assert (x585 x969))
(assert (= (x430 (x1097 (+ x5 96))) 0))
(assert (x1079 x661))
(assert (= (x1080 105741823712686017468623175546783284002282906648395100416871018427217256382464) (x1034 105741823712686017468623175546783284002282906648395100416871018427217256382464)))
(assert (= (x292 (x1097 (+ 192 x5))) (x1331 (x1080 (x292 (x1097 (+ x5 192)))))))
(assert (x504 x937))
(assert (x1079 (x466 x580)))
(assert (= (x1331 (x1080 (x577 (x1097 (+ x1031 96))))) (x577 (x1097 (+ 96 x1031)))))
(assert (x585 x496))
(assert (= x508 (or x474 x1132)))
(assert (=> (<= (x1011 (x1097 (+ x580 32))) 10000) (= (x1080 (x1011 (x1097 (+ 32 x580)))) (x1034 (x1011 (x1097 (+ 32 x580)))))))
(assert (x585 x632))
(assert (x585 x1241))
(assert (x585 x222))
(assert (= x1155 (and x1473 x1082)))
(assert (= (x1129 (+ (- (+ 68 (- (+ (- x457 x673) x720) 160)) 68) (x1097 (+ x673 68)))) 0))
(assert (x504 x929))
(assert (x585 x1124))
(assert (x1079 (x143 (x1097 (+ x580 160)))))
(assert (x585 x506))
(assert (= x1134 (and x947 x898)))
(assert (= (and x110 (not x569)) x157))
(assert (x585 x268))
(assert (x585 x348))
(assert (= 0 (x430 (+ (- (+ (- x457 160) 68) 68) (x1097 (+ x857 68))))))
(assert (x695 x1093))
(assert (x585 x1243))
(assert (= (x1331 (x1080 (x265 (x1097 (+ 64 x580))))) (x265 (x1097 (+ x580 64)))))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- (x1097 (+ x673 68)) 160) 68) 68)))))
(assert (x585 x333))
(assert (x585 x1054))
(assert (=> (<= (x143 (x1097 (+ 128 x580))) 10000) (= (x1034 (x143 (x1097 (+ x580 128)))) (x1080 (x143 (x1097 (+ x580 128)))))))
(assert (x1079 (x265 (x1097 (+ 128 x580)))))
(assert (x1079 (x292 (x1097 (+ x5 192)))))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ (- (+ x976 (- (x1097 (+ 128 x5)) x857)) x673) x720) 160)) 68))) 0))
(assert (= (x1080 1000000000000000000000000) (x1034 1000000000000000000000000)))
(assert (x1079 (x276 (x1097 (+ 96 x1031)))))
(assert (=> (<= (x450 (x1097 (+ x305 32))) 10000) (= (x1034 (x450 (x1097 (+ x305 32)))) (x1080 (x450 (x1097 (+ x305 32)))))))
(assert (x585 x1213))
(assert (x585 x174))
(assert (x585 x1430))
(assert (= (x1331 (x1080 (x788 (x1097 (+ x5 160))))) (x788 (x1097 (+ x5 160)))))
(assert (x585 x664))
(assert (x585 x1415))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- x976 160) 68) 68)) x448))))
(assert (x1079 (x931 (x1097 (+ 96 x580)))))
(assert (x585 x189))
(assert (= x98 (=> (and (= x702 (> x455 x830)) (or (and (= (x1097 (+ x830 x305)) x1024) x702) (not x702))) x486)))
(assert (x585 x399))
(assert (x585 x108))
(assert (x585 x1178))
(assert (= (x824 (x1097 (+ x580 96))) (x1331 (x1080 (x824 (x1097 (+ x580 96)))))))
(assert (= (and (not x172) x718) x870))
(assert (x585 x1435))
(assert (= x964 (and x686 (not x1150))))
(assert (x585 x415))
(assert (=> (<= (x824 (x1097 (+ x580 128))) 10000) (= (x1080 (x824 (x1097 (+ 128 x580)))) (x1034 (x824 (x1097 (+ x580 128)))))))
(assert (x585 x590))
(assert (x585 x373))
(assert (x585 x275))
(assert (= x912 (or (and x1443 (not x566)) (and x1155 x115) (and x1089 x285) x1122 (and x867 x79) x764 x1255 x1217 (and (not x793) x681))))
(assert (x695 x551))
(assert (x1079 (x824 (x1097 (+ 64 x580)))))
(assert (x585 x899))
(assert (x1079 x1179))
(assert (x585 x522))
(assert (x585 x929))
(assert (= 0 (x970 (- (+ (x1097 (+ 68 x857)) (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ x720 (- (+ x976 (- x1001 x857)) x673)) 160)) 68)) 160) 68) 68)) x448))))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) 96))))
(assert (x1079 x1285))
(assert (= x1049 (and x31 x1296)))
(assert (= x240 (=> (and (or x889 (not x889)) (= (> x946 x548) x889)) x674)))
(assert (= (=> (and (= (not (> x986 32)) x1028) (= x580 x320) (= x613 (x1235 160))) (and (=> (= x952 32) x572) x1028)) x1170))
(assert (x585 x1328))
(assert (= 0 (x430 (+ (- (+ (- (+ 64 (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ 68 x857))))))
(assert (= (=> (and (= (> x875 x699) x972) (or (not x972) (and x972 (= x155 (x1097 (+ x580 x699)))))) x519) x428))
(assert (x585 x515))
(assert (=> (<= x291 10000) (= (x1080 x291) (x1034 x291))))
(assert (x585 x799))
(assert (x1079 (x450 (x1097 (+ 64 x305)))))
(assert (=> (>= 10000 x1434) (= (x1080 x1434) (x1034 x1434))))
(assert (= x291 (x1331 (x1080 x291))))
(assert (= (or x29 x489) x994))
(assert (= 0 (x970 (- (x1097 (+ 68 x857)) x448))))
(assert (= (x1331 (x1080 x118)) x118))
(assert (=> (>= 10000 (x1011 (x1097 (+ 192 x580)))) (= (x1080 (x1011 (x1097 (+ x580 192)))) (x1034 (x1011 (x1097 (+ 192 x580)))))))
(assert (= x1424 (x1331 (x1080 x1424))))
(assert (= (x1331 (x1080 (x788 (x1097 (+ x5 128))))) (x788 (x1097 (+ x5 128)))))
(assert (x585 x313))
(assert (= x1398 (and (not x972) x1299)))
(assert (x585 x1093))
(assert (x585 x1031))
(assert (x585 x1283))
(assert (= true x908))
(assert (x585 x565))
(assert (= (and (not x1477) x554) x597))
(assert (x585 x653))
(assert (= x883 (or x467 x1366)))
(assert (x44 x1131))
(assert (x585 x551))
(assert (= (x970 (- (x1097 (+ x5 32)) x448)) 0))
(assert (=> (>= 10000 (x265 (x1097 (+ 192 x580)))) (= (x1080 (x265 (x1097 (+ x580 192)))) (x1034 (x265 (x1097 (+ 192 x580)))))))
(assert (x585 x775))
(assert (= x752 (and (not x1156) x508)))
(assert (=> (>= 10000 (x228 192)) (= (x1080 (x228 192)) (x1034 (x228 192)))))
(assert (x1079 (x292 (x1097 (+ x5 32)))))
(assert (x585 x1039))
(assert (= x1412 (and x110 x569)))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (x1097 (+ x673 68)) 160) 68) 68)) x448))))
(assert (= x661 (x1331 (x1080 x661))))
(assert (= x1130 (x1331 (x1080 x1130))))
(assert (= x1443 (and (not x285) x1089)))
(assert (= (x1129 (+ (- (+ (- (+ (- (+ x976 (- (x1097 (+ x5 64)) x857)) x673) x720) 160) 68) 68) (x1097 (+ 68 x673)))) 0))
(assert (x1079 (x795 (x1097 (+ 128 x580)))))
(assert (x585 x453))
(assert (x1079 (x276 (x1097 (+ x1031 32)))))
(assert (= x31 (and x309 x1035)))
(assert (= 0 (x1129 (+ (- (+ (- (x1097 (+ x305 68)) 160) 68) 68) (x1097 (+ x673 68))))))
(assert (x585 x427))
(assert (x585 x1425))
(assert (x585 x604))
(assert (= (and x235 x820) x85))
(assert (= (x1034 2376452955) (x1080 2376452955)))
(assert (= x1379 (and x1462 x106)))
(assert (=> (>= 10000 (x22 (x1097 (+ x857 128)))) (= (x1080 (x22 (x1097 (+ 128 x857)))) (x1034 (x22 (x1097 (+ 128 x857)))))))
(assert (=> (>= 10000 (x795 (x1097 (+ x580 128)))) (= (x1080 (x795 (x1097 (+ x580 128)))) (x1034 (x795 (x1097 (+ 128 x580)))))))
(assert (x585 x894))
(assert (=> (>= 10000 (x788 (x1097 (+ 160 x5)))) (= (x1080 (x788 (x1097 (+ 160 x5)))) (x1034 (x788 (x1097 (+ x5 160)))))))
(assert (= 0 (x430 x657)))
(assert (= x1208 (and (not x669) x1058)))
(assert (x1079 x1310))
(assert (= 0 (x1129 (+ (- (+ (- (+ (x1097 (+ x305 68)) 192) 160) 68) 68) (x1097 (+ 68 x673))))))
(assert (= x96 (and x1123 x509)))
(assert (x585 x925))
(assert (x1079 x507))
(assert (x585 x633))
(assert (= (x1331 (x1080 x113)) x113))
(assert (x585 x772))
(assert (= x722 (and (not x1330) x1470)))
(assert (x44 x1020))
(assert (x585 x1347))
(assert (=> (<= (x1011 (x1097 (+ x580 96))) 10000) (= (x1034 (x1011 (x1097 (+ x580 96)))) (x1080 (x1011 (x1097 (+ 96 x580)))))))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (- (+ (- (+ (x1097 (+ x305 68)) 96) 160) 68) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ 68 x857))) x448))))
(assert (= (=> (and (and (and (<= x291 1461501637330902918203684832716283019655932542975) (> x1019 0) (= x710 x778) (= 1617649167 x196) (not (> 1617649167 x196)) (= x279 x755) (not (> 4 x710)) (= x710 36) (= (x1097 (+ x271 32)) x5) (= x1426 (x497 (- x710 4))) (= (x950 x991) x789) (= x291 (x398 x271)) (= x1455 (x896 1461501637330902918203684832716283019655932542975 x789)) (= 43611735268480658727360147997893738071856775535381453097760378360336924803072 x11) (= (x719 (x1080 x755) (x1034 109) 0) x991) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1426) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1426) true) (< x1426 32))) x365) (<= x279 1461501637330902918203684832716283019655932542975) (= x1153 (x398 x1243)) (= x569 (< 0 x1153)) (not (< x196 1405909242)) (> 2061859742 x196) (= x1019 (x1289 (x1080 x1179))) (not x365)) x1078) (and (= x1101 (x1097 (+ x1306 31))) (= x594 x673) (= x1463 (x1097 (+ x673 32))) (= x861 (ite x1099 1 0)) (= (x923 x306) x902) (= x153 (x1097 (+ x976 32))) (= x924 x976) (= (x1097 (+ x1070 32)) x1087) (= (x1097 (+ 32 x306)) x457) (= x1001 (x1097 (+ 32 x857))) (= (x1097 (+ x153 32)) x1070) (>= 1461501637330902918203684832716283019655932542975 x755) (= x1107 (x1097 (+ x271 4))) (= x861 x560) (= x1405 (x1097 (+ x1107 32))) (= x272 (x83 x402)) (not x236) (>= 65535 x902) (= x327 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x963)) (= x778 (x497 (- x1405 x271))) (= x1253 (x1097 (+ x753 32))) (= x959 (or (and (< x1306 128) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1306) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1306))) (>= x515 0) (= x847 (not (= x560 0))) (= (x1097 (+ x673 x1247)) x976) (= (x923 x457) x560) (<= x272 1461501637330902918203684832716283019655932542975) (= x1099 (not x342)) (= (= 0 x560) x342) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1101) x1247) (= (x83 x1001) x590) (not x959) (= x963 (x1097 (+ x698 31))) (= (= x1179 x515) x1078) (>= 1461501637330902918203684832716283019655932542975 x1326) (= (x1097 (+ x857 x327)) x271) (= x306 (x1097 (+ x1463 32))) (> 1461501637330902918203684832716283019655932542976 x515) (= (x923 x1463) x1273) (= (x1097 (+ x1001 32)) x402) (= 192 x698) (= (x1097 (+ x1087 32)) x753) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x698) (and (< x698 192) (= (<= x698 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (<= x590 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x515) (= x755 (x83 x857)) (= x236 (= 0 x445)) (= (x923 x594) x1326))) (and (=> (and (not x569) (= x1346 0)) x1254) (=> x569 x72))) x609))
(assert (= (x430 (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ x720 (- (+ x976 (- x402 x857)) x673)) 160)) 68)) 160)) 68) (x1097 (+ x857 68)))) 0))
(assert (x585 x300))
(assert (= 0 (x909 160)))
(assert (=> (<= (x577 x1031) 10000) (= (x1034 (x577 x1031)) (x1080 (x577 x1031)))))
(assert (= (and x492 (not x860)) x168))
(assert (= (x970 (- (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ (- (x1097 (+ x305 32)) 160) 68) 68)) 160)) 68) (x1097 (+ x857 68))) x448)) 0))
(assert (x585 x821))
(assert (= (x1331 (x1034 1882194962)) 1882194962))
(assert (x585 x990))
(assert (= (=> (and (= (x33 256) x131) (= (x1097 (+ x1031 96)) x848) (= x783 (not (> x404 128)))) (and x783 (=> (= 128 x1124) x1339))) x1144))
(assert (=> (<= (x276 (x1097 (+ 128 x1031))) 10000) (= (x1080 (x276 (x1097 (+ x1031 128)))) (x1034 (x276 (x1097 (+ 128 x1031)))))))
(assert (x585 x853))
(assert (= x1132 (and x424 x1018)))
(assert (x585 x294))
(assert (x1079 (x22 (x1097 (+ 64 x857)))))
(assert (= 0 (x970 (- x856 x448))))
(assert (x695 x1464))
(assert (x585 x1464))
(assert (= (x970 (- (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (x1097 (+ x673 68)) (- (+ 68 (- (+ x720 (- (+ (- x578 x857) x976) x673)) 160)) 68)) 160)) 68)) x448)) 0))
(assert (x585 x986))
(assert (= 0 (x593 x305)))
(assert (x585 x121))
(assert (x585 x1087))
(assert (= x1414 (x1331 (x1080 x1414))))
(assert (=> (>= 10000 (x22 (x1097 (+ 64 x857)))) (= (x1080 (x22 (x1097 (+ 64 x857)))) (x1034 (x22 (x1097 (+ 64 x857)))))))
(assert (= 0 (x430 (+ (- (+ 68 (- (x1097 (+ x1031 160)) 160)) 68) (x1097 (+ x857 68))))))
(assert (x1079 x1328))
(assert (x1079 x1424))
(assert (x585 x1446))
(assert (x1079 (x897 (x1097 (+ x580 32)))))
(assert (= (x1129 x306) 0))
(assert (= (x1331 (x1080 (x466 (x1097 (+ x580 192))))) (x466 (x1097 (+ x580 192)))))
(assert (=> (<= (x824 (x1097 (+ 32 x580))) 10000) (= (x1080 (x824 (x1097 (+ 32 x580)))) (x1034 (x824 (x1097 (+ 32 x580)))))))
(assert (x585 x976))
(assert (x585 x1100))
(assert (x585 x1329))
(assert (x585 x1358))
(assert (=> (>= 10000 (x143 (x1097 (+ x580 32)))) (= (x1080 (x143 (x1097 (+ x580 32)))) (x1034 (x143 (x1097 (+ 32 x580)))))))
(assert (x585 x102))
(assert (=> (<= (x931 (x1097 (+ 128 x580))) 10000) (= (x1080 (x931 (x1097 (+ x580 128)))) (x1034 (x931 (x1097 (+ 128 x580)))))))
(assert (= 0 (x970 (- (x1097 (+ x857 32)) x448))))
(assert (x585 x176))
(assert (= x1406 (=> (and (= x1293 (x1097 (+ x1094 96))) (= x268 (x1197 256)) (= (not (> x376 128)) x599)) (and (=> (= 128 x338) x754) x599))))
(assert (= (or x91 x815) x610))
(assert (= (x1331 (x1034 3548638100)) 3548638100))
(assert (= (x1331 (x1080 (x22 (x1097 (+ 64 x857))))) (x22 (x1097 (+ 64 x857)))))
(assert (x585 x1423))
(assert (= (x1129 (+ (- (+ 68 (- (+ (- (+ (- (x1097 (+ 160 x5)) x857) x976) x673) x720) 160)) 68) (x1097 (+ x673 68)))) 0))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (- (+ (- (+ x720 (- (+ (- x856 x857) x976) x673)) 160) 68) 68) (x1097 (+ 68 x673))) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (x585 x1273))
(assert (= x967 (=> (and (= 64 x390) (= (> x548 0) x1332) (= x649 (x1097 (+ x275 x5))) (= (= 0 x89) x666) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x823) (and (= (<= x823 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x823 32)))) (not (= 0 x1081)) (= (x384 x1243) x548) (= x1135 (ite x940 1 0)) (= x1135 x89) (= x940 (not x666)) (= x89 (x810 x5)) (= (x1097 (+ x823 31)) x128) (< 0 x89) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x128) x275)) (and (=> x1332 x890) (=> (and (= x946 0) (not x1332)) x240)))))
(assert (= (x1331 (x1034 2872958028)) 2872958028))
(assert (= (x1331 (x1080 (x276 (x1097 (+ x1031 192))))) (x276 (x1097 (+ 192 x1031)))))
(assert (= x1050 (=> (and (and x833 (and (= x937 (x1097 (+ x530 31))) (= x103 (x1289 (x1080 x507))) (= (x532 36) x1178) (= (= (x1067 36) x375) x1442) (= (x1097 (+ x1178 160)) x953) (= (x1097 (+ 68 x1178)) x1393) (not (> 1882194962 x351)) (not (= x351 2745196236)) (= (or x1359 x10) x914) (= (> x1031 18446744073709551615) x10) (= (< x1031 128) x1359) (= (> x1178 18446744073709551615) x968) (= x530 (x1097 (+ x461 32))) (= x630 82070247630637395725875354456112310357886651100252770250446759337321580986368) (< x351 3109197603) (not x251) (>= x209 68) (not (> 4 x209)) (= x1189 (< 0 x404)) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x937) x53) (= (x1097 (+ 31 x1178)) x538) (= x1139 x209) (= x461 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x538)) (< 0 x103) (= x1031 (x1097 (+ 128 x53))) (not x968) (not (< x351 2710164492)) (= x574 (ite x914 1 0)) (not (= x351 2710164492)) (= x556 128) (= x1387 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x732) (and (> 32 x732) (= (<= x732 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) x1442 (= x351 3044154673) (= (< x209 x1393) x251) (= x404 (x711 128)) (= 0 x574) (and (< 67 x209) (= true (<= x209 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x497 (- x209 4)) x732) (not x1387))) (and (= x833 (= x945 x507)) (= (x1097 (+ x762 x496)) x244) (= x475 (x1097 (+ 31 x375))) (= x1139 (x497 (- x244 x857))) (= x496 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x475)))) (and (=> (and (and (= x1031 x406) (= (> x404 32) x1460) (= (x711 160) x1220)) x1189) (and (=> (and (= 32 x1124) (not x1460)) x1339) (=> (and x1460 (and (= (x60 192) x506) (= x1035 (> x404 64)) (= x179 (x1097 (+ 32 x1031))))) (and (=> (and x1035 (and (= (x1097 (+ x1031 64)) x135) (= (x1384 224) x150) (= (< 96 x404) x1296))) (and (=> (and (= x1124 96) (not x1296)) x1339) (=> x1296 x1144))) (=> (and (= 64 x1124) (not x1035)) x1339))))) (=> (and (not x1189) (= x1124 0)) x1339)))))
(assert (= (or x207 x1221) x1418))
(assert (x1079 x1130))
(assert (= x319 (or x581 x1175)))
(assert (= (x1331 (x1080 (x577 (x1097 (+ x1031 128))))) (x577 (x1097 (+ 128 x1031)))))
(assert (x1079 (x466 (x1097 (+ 192 x580)))))
(assert (=> (<= x839 10000) (= (x1080 x839) (x1034 x839))))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ (x1097 (+ x673 68)) (- (+ (- (+ (- (+ (- (x1097 (+ x5 96)) x857) x976) x673) x720) 160) 68) 68)) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (x585 x80))
(assert (x585 x195))
(assert (= (=> (and (and (= x316 (x497 (- x144 x673))) (= x453 (x1097 (+ x1204 31))) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x453) x553) (= (x1097 (+ x844 x553)) x144) (= x418 (= x328 x1304))) (and (and (not (> 4 x1003)) (not (> 2376452955 x302)) (= x1003 x316) x1192 (= (= x1204 (x864 36)) x1192) (= x285 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1357)) (> 32 x1357)) (> x1357 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 3592363634 x302)) (= x1357 (x497 (- x1003 4))) (= x16 (x1289 (x1080 x328))) (< 0 x16) (>= x1003 68) (= 3922182229 x302) (not (> 3592363634 x302)) (not (= x302 3624036542)) (= 105741823712686017468623175546783284002282906648395100416871018427217256382464 x712)) x418)) (and (=> (and (= (and (< 67 x1003) (= true (<= x1003 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x566) (not x285)) (and (=> (not x566) x181) (=> (and (and (= (x756 36) x325) (= (< 18446744073709551615 x325) x213)) x566) (and (=> (and (and (= x305 (x1097 (+ x619 128))) (= 128 x942) (= x93 (x1097 (+ x325 31))) (= (= (ite x241 1 0) 0) x1082) (= (< 18446744073709551615 x305) x1389) (= x250 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x93)) (= (or x1389 x1168) x241) (= (x1097 (+ x1269 31)) x632) (= x1168 (> 128 x305)) (= x619 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x632)) (= (x1097 (+ x250 32)) x1269)) (not x213)) (and (=> (and x1082 (and (= x115 (< x1003 x771)) (= x771 (x1097 (+ 68 x325))))) (and (=> x115 x181) (=> (and (not x115) (and (= x830 (x1401 128)) (= (x1097 (+ x325 160)) x1421) (= (< 0 x830) x1055))) (and (=> (and (not x1055) (= 0 x455)) x98) (=> (and (and (= x1226 (x1401 160)) (= x305 x57) (= (> x830 32) x981)) x1055) (and (=> (and (= x455 32) (not x981)) x98) (=> (and (and (= (x1097 (+ x305 32)) x242) (= (x804 192) x108) (= (> x830 64) x107)) x981) (and (=> (and (and (= x1260 (x938 224)) (= (< 96 x830) x704) (= (x1097 (+ 64 x305)) x550)) x107) (and (=> (and (= 96 x455) (not x704)) x98) (=> x704 x936))) (=> (and (= 64 x455) (not x107)) x98))))))))) (=> (not x1082) x181))) (=> x213 x181))))) (=> x285 x181))) x359))
(assert (x1079 (x1148 (x1097 (+ x5 160)))))
(assert (= (x593 (+ x720 (- (+ x976 (- x657 x857)) x673))) 0))
(assert (x585 x587))
(assert (x1079 x622))
(assert (= (and x214 (not x112)) x1307))
(assert (= 0 (x970 (- 128 x448))))
(assert (x585 x844))
(assert (= (and x962 (not x1275)) x1133))
(assert (= 0 (x1129 (x1097 (+ x1031 192)))))
(assert (x585 x879))
(assert (x585 x442))
(assert (x585 x1022))
(assert (x585 x920))
(assert (x1079 x156))
(assert (x585 x1461))
(assert (= (x1080 2868243304) (x1034 2868243304)))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ (x1097 (+ x673 68)) (- (+ 68 (- (+ x720 (- x1463 x673)) 160)) 68)) 160)) 68)))))
(assert (=> (<= (x1148 (x1097 (+ 64 x5))) 10000) (= (x1080 (x1148 (x1097 (+ x5 64)))) (x1034 (x1148 (x1097 (+ x5 64)))))))
(assert (x1079 (x130 x580)))
(assert (x585 x739))
(assert (=> (<= (x143 (x1097 (+ 64 x580))) 10000) (= (x1034 (x143 (x1097 (+ 64 x580)))) (x1080 (x143 (x1097 (+ x580 64)))))))
(assert (= x1305 (and x1111 (not x833))))
(assert (= 0 (x430 (+ (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ (- (+ (- (+ x976 (- (x1097 (+ 64 x5)) x857)) x673) x720) 160) 68) 68)) 160) 68) 68) (x1097 (+ x857 68))))))
(assert (= (x430 (x1097 (+ x5 32))) 0))
(assert (= (x130 (x1097 (+ 64 x580))) (x1331 (x1080 (x130 (x1097 (+ 64 x580)))))))
(assert (= (or x1371 x912) x1103))
(assert (x585 x291))
(assert (= x403 (and (not x173) x350)))
(assert (= x182 (and x621 x1342)))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (x1097 (+ x673 68)) (- (+ (- (+ x720 (- (+ (- x1001 x857) x976) x673)) 160) 68) 68)) 160) 68) 68)))))
(assert (x695 x1131))
(assert (= (x430 (+ (- (+ 68 (- (+ (- (+ 68 (- (+ 160 (x1097 (+ 68 x305))) 160)) 68) (x1097 (+ 68 x673))) 160)) 68) (x1097 (+ x857 68)))) 0))
(assert (x585 x789))
(assert (x585 x1274))
(assert (x585 x109))
(assert (x585 x1293))
(assert (= (x970 (- (x1097 (+ 192 x857)) x448)) 0))
(assert (= (=> (and (= x1075 (<= x903 224)) (= x1229 (x497 (- x78 x580))) (= x903 (x497 (- x1229 32))) (= x78 (x1097 (+ x612 32))) (= x612 (x1097 (+ x1210 x580)))) (and x1075 (=> (and (= (>= 224 x1229) x65) (= x1205 (ite (>= 32 x903) (x389 (x1080 (x795 x580)) 0) (ite (>= 64 x903) (x719 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ x580 32)))) 0) (ite (<= x903 96) (x562 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ 32 x580)))) (x1080 (x795 (x1097 (+ x580 64)))) 0) (ite (<= x903 128) (x517 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ 32 x580)))) (x1080 (x795 (x1097 (+ x580 64)))) (x1080 (x795 (x1097 (+ x580 96)))) 0) (ite (<= x903 160) (x1062 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ x580 32)))) (x1080 (x795 (x1097 (+ x580 64)))) (x1080 (x795 (x1097 (+ 96 x580)))) (x1080 (x795 (x1097 (+ 128 x580)))) 0) (ite (>= 192 x903) (x948 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ x580 32)))) (x1080 (x795 (x1097 (+ x580 64)))) (x1080 (x795 (x1097 (+ 96 x580)))) (x1080 (x795 (x1097 (+ 128 x580)))) (x1080 (x795 (x1097 (+ x580 160)))) 0) (ite (<= x903 224) (x344 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ x580 32)))) (x1080 (x795 (x1097 (+ 64 x580)))) (x1080 (x795 (x1097 (+ x580 96)))) (x1080 (x795 (x1097 (+ 128 x580)))) (x1080 (x795 (x1097 (+ 160 x580)))) (x1080 (x795 (x1097 (+ 192 x580)))) 0) (x1080 x969)))))))))) (and x65 (=> (and (= x439 (x719 (x1080 x853) (ite (>= 32 x1229) (x389 (x1080 (x795 x580)) 0) (ite (<= x1229 64) (x719 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ x580 32)))) 0) (ite (>= 96 x1229) (x562 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ 32 x580)))) (x1080 (x795 (x1097 (+ x580 64)))) 0) (ite (>= 128 x1229) (x517 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ 32 x580)))) (x1080 (x795 (x1097 (+ x580 64)))) (x1080 (x795 (x1097 (+ 96 x580)))) 0) (ite (<= x1229 160) (x1062 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ 32 x580)))) (x1080 (x795 (x1097 (+ x580 64)))) (x1080 (x795 (x1097 (+ x580 96)))) (x1080 (x795 (x1097 (+ x580 128)))) 0) (ite (>= 192 x1229) (x948 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ x580 32)))) (x1080 (x795 (x1097 (+ x580 64)))) (x1080 (x795 (x1097 (+ x580 96)))) (x1080 (x795 (x1097 (+ x580 128)))) (x1080 (x795 (x1097 (+ x580 160)))) 0) (ite (>= 224 x1229) (x344 (x1080 (x795 x580)) (x1080 (x795 (x1097 (+ 32 x580)))) (x1080 (x795 (x1097 (+ 64 x580)))) (x1080 (x795 (x1097 (+ 96 x580)))) (x1080 (x795 (x1097 (+ x580 128)))) (x1080 (x795 (x1097 (+ x580 160)))) (x1080 (x795 (x1097 (+ x580 192)))) 0) (x1080 x113)))))))) 0)) (<= 0 x70) (= x1478 (div x385 1000000000000000000000000)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x70 x169)) (= x385 (* x70 x169)) (= x32 (x795 128)) (= x1342 (> x32 0)) (= x70 (x1125 x439)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x70)) (and (=> x1342 x463) (=> (and (= 0 x452) (not x1342)) x1183))))))) x965))
(assert (= (x1331 (x1034 1208925819614629174706175)) 1208925819614629174706175))
(assert (=> (>= 10000 (x143 (x1097 (+ x580 160)))) (= (x1034 (x143 (x1097 (+ 160 x580)))) (x1080 (x143 (x1097 (+ 160 x580)))))))
(assert (x585 x560))
(assert (x585 x1463))
(assert (x585 x392))
(assert (x585 x552))
(assert (x1079 (x795 (x1097 (+ 96 x580)))))
(assert (x1079 x1414))
(assert (x585 x404))
(assert (x585 x180))
(assert (x44 x796))
(assert (= (or x1115 x245) x911))
(assert (x585 x1231))
(assert (= (x1129 (+ (x1097 (+ x673 68)) (- (+ (- (x1097 (+ 96 x305)) 160) 68) 68))) 0))
(assert (x1079 (x931 (x1097 (+ 32 x580)))))
(assert (x504 x538))
(assert (= 0 (x430 (+ (- (+ 68 (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ 128 (x1097 (+ 68 x305))) 160)) 68)) 160)) 68) (x1097 (+ x857 68))))))
(assert (x585 x1042))
(assert (= (x1331 (x1080 x755)) x755))
(assert (= (x1129 x495) 0))
(assert (x1079 x839))
(assert (= (x143 (x1097 (+ x580 96))) (x1331 (x1080 (x143 (x1097 (+ 96 x580)))))))
(assert (x1079 (x931 (x1097 (+ 128 x580)))))
(assert (= (x824 (x1097 (+ 64 x580))) (x1331 (x1080 (x824 (x1097 (+ 64 x580)))))))
(assert (x585 x688))
(assert (= 0 (x970 (- (+ (x1097 (+ 68 x857)) (- (+ 68 (- (x1097 (+ x1031 96)) 160)) 68)) x448))))
(assert (= (x430 (x1097 (+ x5 64))) 0))
(assert (x1079 (x143 (x1097 (+ 96 x580)))))
(assert (x585 x465))
(assert (x585 x119))
(assert (x585 x642))
(assert (x585 x1310))
(assert (x1079 (x265 (x1097 (+ x580 160)))))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ (- (+ x720 (- x1463 x673)) 160) 68) 68))) 0))
(assert (x585 x1029))
(assert (x585 x312))
(assert (x585 x874))
(assert (= x1288 (=> (and (= (x1097 (+ x857 x373)) x1077) (= x298 (>= 224 x1468)) (= x1468 (x497 (- x653 32))) (= (x1097 (+ x1077 32)) x1193) (= (x497 (- x1193 x857)) x653)) (and x298 (=> (and (= (ite (>= 32 x1468) (x389 (x1080 (x22 x857)) 0) (ite (>= 64 x1468) (x719 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) 0) (ite (<= x1468 96) (x562 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ x857 32)))) (x1080 (x22 (x1097 (+ 64 x857)))) 0) (ite (>= 128 x1468) (x517 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ x857 32)))) (x1080 (x22 (x1097 (+ x857 64)))) (x1080 (x22 (x1097 (+ 96 x857)))) 0) (ite (<= x1468 160) (x1062 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) (x1080 (x22 (x1097 (+ x857 64)))) (x1080 (x22 (x1097 (+ 96 x857)))) (x1080 (x22 (x1097 (+ 128 x857)))) 0) (ite (<= x1468 192) (x948 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) (x1080 (x22 (x1097 (+ x857 64)))) (x1080 (x22 (x1097 (+ x857 96)))) (x1080 (x22 (x1097 (+ 128 x857)))) (x1080 (x22 (x1097 (+ 160 x857)))) 0) (ite (<= x1468 224) (x344 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ x857 32)))) (x1080 (x22 (x1097 (+ 64 x857)))) (x1080 (x22 (x1097 (+ x857 96)))) (x1080 (x22 (x1097 (+ x857 128)))) (x1080 (x22 (x1097 (+ x857 160)))) (x1080 (x22 (x1097 (+ x857 192)))) 0) (x1080 x1057)))))))) x446) (= (>= 224 x653) x1447)) (and x1447 (=> (and (<= 0 x945) (= x762 (x1097 (+ 32 x664))) (= (x1097 (+ 4 x857)) x535) (>= 1461501637330902918203684832716283019655932542975 x945) (= (x719 (x1080 x853) (ite (<= x653 32) (x389 (x1080 (x22 x857)) 0) (ite (<= x653 64) (x719 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) 0) (ite (<= x653 96) (x562 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) (x1080 (x22 (x1097 (+ 64 x857)))) 0) (ite (>= 128 x653) (x517 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ x857 32)))) (x1080 (x22 (x1097 (+ x857 64)))) (x1080 (x22 (x1097 (+ 96 x857)))) 0) (ite (<= x653 160) (x1062 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) (x1080 (x22 (x1097 (+ 64 x857)))) (x1080 (x22 (x1097 (+ 96 x857)))) (x1080 (x22 (x1097 (+ x857 128)))) 0) (ite (<= x653 192) (x948 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ x857 32)))) (x1080 (x22 (x1097 (+ 64 x857)))) (x1080 (x22 (x1097 (+ 96 x857)))) (x1080 (x22 (x1097 (+ 128 x857)))) (x1080 (x22 (x1097 (+ x857 160)))) 0) (ite (<= x653 224) (x344 (x1080 (x22 x857)) (x1080 (x22 (x1097 (+ 32 x857)))) (x1080 (x22 (x1097 (+ 64 x857)))) (x1080 (x22 (x1097 (+ x857 96)))) (x1080 (x22 (x1097 (+ 128 x857)))) (x1080 (x22 (x1097 (+ 160 x857)))) (x1080 (x22 (x1097 (+ 192 x857)))) 0) (x1080 x194)))))))) 0) x1218) (= x664 (x1097 (+ x535 32))) (= (< 0 x375) x1110) (<= x487 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (> x906 x487)) (= (x1125 x1218) x487) (< x945 1461501637330902918203684832716283019655932542976) (= (x570 x1243) x375) (<= 0 x487)) (and (=> (and (not x1110) (= x63 0)) x1017) (=> x1110 x2)))))))))
(assert (=> (>= 10000 (x931 (x1097 (+ 32 x580)))) (= (x1034 (x931 (x1097 (+ x580 32)))) (x1080 (x931 (x1097 (+ 32 x580)))))))
(assert (= x148 (=> (and (or (and (not x742) (and (= x448 (x1097 (+ x580 32))) (= x423 (x1097 (+ x287 x580))) (= (x1097 (+ 63 x874)) x293) (= x287 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x293)) (= x951 x423))) (and (= x580 x951) x742)) (= x742 (= 0 x874))) x997)))
(assert (= (x1331 (x1034 2745196236)) 2745196236))
(assert (=> (>= 10000 x969) (= (x1080 x969) (x1034 x969))))
(assert (x585 x1388))
(assert (= (=> (and (= (x497 (- x383 x580)) x631) (= x383 (x1097 (+ 32 x1029))) (= x882 (<= x92 224)) (= x1029 (x1097 (+ x957 x580))) (= (x497 (- x631 32)) x92)) (and (=> (and (= x481 (ite (<= x92 32) (x389 (x1080 (x1011 x580)) 0) (ite (<= x92 64) (x719 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) 0) (ite (<= x92 96) (x562 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) (x1080 (x1011 (x1097 (+ 64 x580)))) 0) (ite (>= 128 x92) (x517 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) (x1080 (x1011 (x1097 (+ 64 x580)))) (x1080 (x1011 (x1097 (+ 96 x580)))) 0) (ite (>= 160 x92) (x1062 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ 32 x580)))) (x1080 (x1011 (x1097 (+ 64 x580)))) (x1080 (x1011 (x1097 (+ x580 96)))) (x1080 (x1011 (x1097 (+ x580 128)))) 0) (ite (>= 192 x92) (x948 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ 32 x580)))) (x1080 (x1011 (x1097 (+ x580 64)))) (x1080 (x1011 (x1097 (+ 96 x580)))) (x1080 (x1011 (x1097 (+ 128 x580)))) (x1080 (x1011 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x92) (x344 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) (x1080 (x1011 (x1097 (+ x580 64)))) (x1080 (x1011 (x1097 (+ 96 x580)))) (x1080 (x1011 (x1097 (+ x580 128)))) (x1080 (x1011 (x1097 (+ x580 160)))) (x1080 (x1011 (x1097 (+ 192 x580)))) 0) (x1080 x1430))))))))) (= x534 (>= 224 x631))) (and x534 (=> (and (>= x809 0) (= (x1011 128) x1165) (<= x809 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (> 1000000000 x809)) (= (x719 (x1080 x853) (ite (>= 32 x631) (x389 (x1080 (x1011 x580)) 0) (ite (<= x631 64) (x719 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) 0) (ite (<= x631 96) (x562 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ 32 x580)))) (x1080 (x1011 (x1097 (+ 64 x580)))) 0) (ite (<= x631 128) (x517 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) (x1080 (x1011 (x1097 (+ x580 64)))) (x1080 (x1011 (x1097 (+ 96 x580)))) 0) (ite (>= 160 x631) (x1062 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ 32 x580)))) (x1080 (x1011 (x1097 (+ 64 x580)))) (x1080 (x1011 (x1097 (+ 96 x580)))) (x1080 (x1011 (x1097 (+ x580 128)))) 0) (ite (<= x631 192) (x948 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ 32 x580)))) (x1080 (x1011 (x1097 (+ 64 x580)))) (x1080 (x1011 (x1097 (+ x580 96)))) (x1080 (x1011 (x1097 (+ 128 x580)))) (x1080 (x1011 (x1097 (+ 160 x580)))) 0) (ite (>= 224 x631) (x344 (x1080 (x1011 x580)) (x1080 (x1011 (x1097 (+ x580 32)))) (x1080 (x1011 (x1097 (+ 64 x580)))) (x1080 (x1011 (x1097 (+ 96 x580)))) (x1080 (x1011 (x1097 (+ x580 128)))) (x1080 (x1011 (x1097 (+ x580 160)))) (x1080 (x1011 (x1097 (+ x580 192)))) 0) (x1080 x839)))))))) 0) x516) (= (x1125 x516) x809) (= (< 0 x1165) x1181)) (and (=> x1181 x229) (=> (and (= x1180 0) (not x1181)) x471))))) x882)) x282))
(assert (x585 x871))
(assert (= (x1129 (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ (- (+ x976 (- (x1097 (+ 192 x5)) x857)) x673) x720) 160)) 68))) 0))
(assert (x585 x1244))
(assert (x1079 (x931 (x1097 (+ 160 x580)))))
(assert (= x629 (=> (and (= (x1097 (+ x580 x1165)) x1071) (= (x1097 (+ 32 x1071)) x313) (= x1209 (x497 (- x101 32))) (= x1295 (>= 224 x1209)) (= x101 (x497 (- x313 x580)))) (and x1295 (=> (and (= x773 (ite (<= x1209 32) (x389 (x1080 (x824 x580)) 0) (ite (>= 64 x1209) (x719 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ x580 32)))) 0) (ite (<= x1209 96) (x562 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ x580 32)))) (x1080 (x824 (x1097 (+ x580 64)))) 0) (ite (<= x1209 128) (x517 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ x580 64)))) (x1080 (x824 (x1097 (+ x580 96)))) 0) (ite (>= 160 x1209) (x1062 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ x580 64)))) (x1080 (x824 (x1097 (+ x580 96)))) (x1080 (x824 (x1097 (+ 128 x580)))) 0) (ite (<= x1209 192) (x948 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ x580 32)))) (x1080 (x824 (x1097 (+ 64 x580)))) (x1080 (x824 (x1097 (+ 96 x580)))) (x1080 (x824 (x1097 (+ x580 128)))) (x1080 (x824 (x1097 (+ x580 160)))) 0) (ite (<= x1209 224) (x344 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ x580 64)))) (x1080 (x824 (x1097 (+ x580 96)))) (x1080 (x824 (x1097 (+ x580 128)))) (x1080 (x824 (x1097 (+ 160 x580)))) (x1080 (x824 (x1097 (+ x580 192)))) 0) (x1080 x1416))))))))) (= x97 (<= x101 224))) (and (=> (and (= x1311 (ite (<= x101 32) (x389 (x1080 (x824 x580)) 0) (ite (>= 64 x101) (x719 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ x580 32)))) 0) (ite (>= 96 x101) (x562 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ 64 x580)))) 0) (ite (>= 128 x101) (x517 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ 64 x580)))) (x1080 (x824 (x1097 (+ 96 x580)))) 0) (ite (>= 160 x101) (x1062 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ x580 64)))) (x1080 (x824 (x1097 (+ x580 96)))) (x1080 (x824 (x1097 (+ 128 x580)))) 0) (ite (<= x101 192) (x948 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ 32 x580)))) (x1080 (x824 (x1097 (+ 64 x580)))) (x1080 (x824 (x1097 (+ 96 x580)))) (x1080 (x824 (x1097 (+ x580 128)))) (x1080 (x824 (x1097 (+ x580 160)))) 0) (ite (<= x101 224) (x344 (x1080 (x824 x580)) (x1080 (x824 (x1097 (+ x580 32)))) (x1080 (x824 (x1097 (+ 64 x580)))) (x1080 (x824 (x1097 (+ x580 96)))) (x1080 (x824 (x1097 (+ 128 x580)))) (x1080 (x824 (x1097 (+ x580 160)))) (x1080 (x824 (x1097 (+ 192 x580)))) 0) (x1080 x1187))))))))) (= x744 (> x1006 0)) (= (x618 x1311) x1006) (<= 0 x1006) (<= x1006 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (=> (and (and (= x668 x1457) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1457) (>= x1457 0)) (not x744)) x88) (=> (and x744 (and (= (< 0 x1309) x947) (= x1309 (x824 128)))) (and (=> (and (= x295 0) (not x947)) x201) (=> x947 x736))))) x97))))))
(assert (=> (>= 10000 (x788 (x1097 (+ x5 32)))) (= (x1080 (x788 (x1097 (+ 32 x5)))) (x1034 (x788 (x1097 (+ 32 x5)))))))
(assert (x585 x136))
(assert (x1079 x969))
(assert (x585 x1321))
(assert (x585 x614))
(assert (=> (<= (x228 352) 10000) (= (x1080 (x228 352)) (x1034 (x228 352)))))
(assert (x585 x1137))
(assert (x585 x1426))
(assert (= 0 (x430 x1001)))
(assert (x585 x67))
(assert (x1079 (x931 (x1097 (+ 64 x580)))))
(assert (= 0 (x430 (+ (- (+ 68 (- (+ (- (+ (- (+ (x1097 (+ 68 x305)) 64) 160) 68) 68) (x1097 (+ x673 68))) 160)) 68) (x1097 (+ 68 x857))))))
(assert (= (x430 (+ (x1097 (+ x857 68)) (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ (- (x1097 (+ x305 64)) 160) 68) 68)) 160) 68) 68))) 0))
(assert (= (and (not x213) x617) x1473))
(assert (x1079 (x466 (x1097 (+ 128 x580)))))
(assert (x585 x1088))
(assert (x1079 (x130 (x1097 (+ 128 x580)))))
(assert (x1079 (x228 256)))
(assert (x585 x1319))
(assert (x1079 (x143 (x1097 (+ x580 128)))))
(assert (x695 x293))
(assert (= (and (not x478) x841) x1026))
(assert (= (x265 (x1097 (+ x580 160))) (x1331 (x1080 (x265 (x1097 (+ 160 x580)))))))
(assert (x585 x1139))
(assert (= 0 (x970 (- (x1097 (+ x857 64)) x448))))
(assert (x585 x482))
(assert (x585 x144))
(assert (x1079 (x276 (x1097 (+ 192 x1031)))))
(assert (= 2996296902 (x1331 (x1034 2996296902))))
(assert (x695 x929))
(assert (= x245 (and x1046 x726)))
(assert (x1079 (x22 (x1097 (+ x857 32)))))
(assert (= (x593 (+ x720 (- x457 x673))) 0))
(assert (x585 x216))
(assert (x1079 (x788 (x1097 (+ 192 x5)))))
(assert (x585 x1001))
(assert (= 0 (x430 (+ (x1097 (+ x857 68)) (- (+ (- x1031 160) 68) 68)))))
(assert (= (=> (and (= x442 0) (= x257 x40)) x494) x1112))
(assert (x585 x823))
(assert (= (and x1164 x1386) x554))
(assert (x695 1461501637330902918203684832716283019655932542975))
(assert (x585 x470))
(assert (x585 x1298))
(assert (x585 x43))
(assert (x585 x1009))
(assert (x695 x1020))
(assert (= 0 (x970 (- (x1097 (+ 128 x5)) x448))))
(assert (x695 x789))
(assert (x695 x1101))
(assert (= 0 (x430 (+ (- (+ 68 (- (+ (- (+ 68 (- (+ (x1097 (+ x305 68)) 32) 160)) 68) (x1097 (+ 68 x673))) 160)) 68) (x1097 (+ x857 68))))))
(assert (x1079 (x292 (x1097 (+ x5 128)))))
(assert (= (and (not x231) x883) x1014))
(assert (x585 x765))
(assert (x585 x511))
(assert (=> (<= (x1148 (x1097 (+ 128 x5))) 10000) (= (x1080 (x1148 (x1097 (+ 128 x5)))) (x1034 (x1148 (x1097 (+ x5 128)))))))
(assert (x585 x135))
(assert (= x757 (and x491 (not x30))))
(assert (= (and x1419 x1390) x584))
(assert (x585 x943))
(assert (x1079 x759))
(assert (x585 x533))
(assert (= 0 (x970 (- (+ (- (+ (- x495 160) 68) 68) (x1097 (+ x857 68))) x448))))
(assert (= x1027 (and (not x1164) x1386)))
(assert (= (x970 (- x578 x448)) 0))
(assert (x1079 (x143 (x1097 (+ x580 64)))))
(assert (x1079 x118))
(assert (x585 x1323))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ 68 (- (+ x976 (- x1243 x857)) 160)) 68)) x448))))
(assert (= 0 (x593 (+ (- x594 x673) x720))))
(assert (= (x970 (- (x1097 (+ x5 160)) x448)) 0))
(assert (= (x1331 (x1034 18446744073709551615)) 18446744073709551615))
(assert (=> (>= 10000 x1179) (= (x1080 x1179) (x1034 x1179))))
(assert (x585 x1237))
(assert (= x682 (=> (and (= (x1097 (+ x1031 96)) x568) (= x205 (x352 256)) (= (not (> x688 128)) x531)) (and (=> (= 128 x427) x18) x531))))
(assert (=> (<= (x466 (x1097 (+ 128 x580))) 10000) (= (x1080 (x466 (x1097 (+ 128 x580)))) (x1034 (x466 (x1097 (+ 128 x580)))))))
(assert (x1079 (x795 x580)))
(assert (= (and x1441 x1005) x1172))
(assert (x585 x1346))
(assert (x585 x836))
(assert (x1079 (x450 (x1097 (+ 128 x305)))))
(assert (= (x1129 (+ (- x5 x857) x976)) 0))
(assert (= (or x479 x146) x381))
(assert (=> (>= 10000 (x450 (x1097 (+ 128 x305)))) (= (x1034 (x450 (x1097 (+ x305 128)))) (x1080 (x450 (x1097 (+ x305 128)))))))
(assert (x585 x423))
(assert (x1079 (x577 (x1097 (+ 96 x1031)))))
(assert (x585 x733))
(assert (= (x430 (+ (x1097 (+ 68 x857)) (- (+ 68 (- (x1097 (+ x1031 64)) 160)) 68))) 0))
(assert (= 0 (x430 x402)))
(assert (=> (>= 10000 (x897 (x1097 (+ x580 32)))) (= (x1080 (x897 (x1097 (+ x580 32)))) (x1034 (x897 (x1097 (+ 32 x580)))))))
(assert (x585 x946))
(assert (= (x228 160) (x1331 (x1080 (x228 160)))))
(assert (= (x970 (- x5 x448)) 0))
(assert (x585 x1210))
(assert (x585 x129))
(assert (x585 x1264))
(assert (= 0 (x970 (- (+ (- (+ 68 (- (+ x976 (- (x1097 (+ 96 x5)) x857)) 160)) 68) (x1097 (+ x857 68))) x448))))
(assert (= x1033 (or x597 x671 x837 x1061 x1027)))
(assert (= 0 (x1129 x1463)))
(assert (x1079 (x22 (x1097 (+ 160 x857)))))
(assert (=> (>= 10000 (x276 (x1097 (+ 192 x1031)))) (= (x1080 (x276 (x1097 (+ x1031 192)))) (x1034 (x276 (x1097 (+ x1031 192)))))))
(assert (x585 x255))
(assert (x585 x64))
(assert (= (x593 (+ x720 (- (+ (- x578 x857) x976) x673))) 0))
(assert (x585 x1214))
(assert (x585 x1094))
(assert (x585 x869))
(assert (= (x1331 (x1080 (x450 (x1097 (+ 96 x305))))) (x450 (x1097 (+ x305 96)))))
(assert (x585 x830))
(assert (x585 x1000))
(assert (= (x931 (x1097 (+ 96 x580))) (x1331 (x1080 (x931 (x1097 (+ x580 96)))))))
(assert (= (x1011 (x1097 (+ x580 32))) (x1331 (x1080 (x1011 (x1097 (+ x580 32)))))))
(assert (=> (<= (x228 256) 10000) (= (x1034 (x228 256)) (x1080 (x228 256)))))
(assert (=> (>= 10000 (x1011 (x1097 (+ 128 x580)))) (= (x1034 (x1011 (x1097 (+ x580 128)))) (x1080 (x1011 (x1097 (+ x580 128)))))))
(assert (x1079 x853))
(assert (x585 x905))
(assert (= (x1080 3548638100) (x1034 3548638100)))
(assert (= (or x1230 x114) x737))
(assert (= 0 (x1129 (x1097 (+ x1031 128)))))
(assert (x44 x789))
(assert (=> (>= 10000 (x788 (x1097 (+ x5 192)))) (= (x1080 (x788 (x1097 (+ 192 x5)))) (x1034 (x788 (x1097 (+ 192 x5)))))))
(assert (= x1312 (=> (and (and (= (x497 (- x1437 x305)) x1284) (= (x1097 (+ x1094 x1169)) x1437) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1464) x1169) (= x988 (= x1372 x507)) (= x1464 (x1097 (+ 31 x376)))) (and x988 (and (= 3211726123 x380) x605 (not (< x380 2710164492)) (= x1435 86587964985574495804695408441416066048332504164997306664935388907017567469568) (= (x497 (- x1281 4)) x1096) (not (= 3109197603 x380)) (< 0 x95) (not (> 1882194962 x380)) (= x1281 x1284) (= (= x376 (x315 36)) x605) (not (> 4 x1281)) (not (< x380 3109197603)) (= x95 (x1289 (x1080 x507))) (<= 68 x1281) (= (or (and (< x1096 32) (= true (<= x1096 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x1096 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x849)))) (and (=> (and (= (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1281)) (< 67 x1281)) x1123) (not x849)) (and (=> (and x1123 (and (= x904 (> x606 18446744073709551615)) (= (x158 36) x606))) (and (=> x904 x1112) (=> (and (not x904) (and (= (x1097 (+ x760 128)) x910) (= x1206 (= (ite x1276 1 0) 0)) (= (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1213) x760) (= (x1097 (+ 31 x606)) x551) (= x1213 (x1097 (+ x1282 31))) (= (> x910 18446744073709551615) x1356) (= (x1097 (+ 32 x1256)) x1282) (= (or x1356 x185) x1276) (= x1256 (x896 115792089237316195423570985008687907853269984665640564039457584007913129639904 x551)) (= (< x910 128) x185))) (and (=> (and (and (= x1402 (> x805 x1281)) (= (x1097 (+ x606 68)) x805)) x1206) (and (=> x1402 x1112) (=> (not x1402) x263))) (=> (not x1206) x1112))))) (=> (not x1123) x1112))) (=> x849 x1112)))))
(assert (= x962 (and x173 x350)))
(assert (x585 x825))
(assert (= (x1331 (x1080 (x1011 (x1097 (+ 128 x580))))) (x1011 (x1097 (+ x580 128)))))
(assert (= x25 (and x729 (not x1110))))
(assert (= (and x1110 x729) x588))
(assert (x585 x778))
(assert (x585 x150))
(assert (= 0 (x593 (x1097 (+ 32 x305)))))
(assert (= (x1331 (x1034 4294967296)) 4294967296))
(assert (= 0 (x430 (x1097 (+ 160 x580)))))
(assert (= 0 (x430 (+ (- (+ (- (+ (- (+ (- (+ x720 (- x457 x673)) 160) 68) 68) (x1097 (+ x673 68))) 160) 68) 68) (x1097 (+ x857 68))))))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ (- (+ (x1097 (+ 68 x673)) (- (+ 68 (- (+ (- x306 x673) x720) 160)) 68)) 160) 68) 68)) x448))))
(assert (=> (<= (x577 (x1097 (+ x1031 32))) 10000) (= (x1080 (x577 (x1097 (+ x1031 32)))) (x1034 (x577 (x1097 (+ 32 x1031)))))))
(assert (= 0 (x1129 (+ (- x1001 x857) x976))))
(assert (=> (<= x1182 10000) (= (x1034 x1182) (x1080 x1182))))
(assert (= 0 (x430 (+ (- (+ (- (+ (- (+ 68 (- (x1097 (+ x305 160)) 160)) 68) (x1097 (+ 68 x673))) 160) 68) 68) (x1097 (+ 68 x857))))))
(assert (= (x970 (- (+ (- (+ 68 (- (x1097 (+ x1031 32)) 160)) 68) (x1097 (+ 68 x857))) x448)) 0))
(assert (=> (>= 10000 (x450 (x1097 (+ x305 96)))) (= (x1034 (x450 (x1097 (+ 96 x305)))) (x1080 (x450 (x1097 (+ 96 x305)))))))
(assert (= x330 (and x742 x400)))
(assert (=> (>= 10000 (x1148 x5)) (= (x1034 (x1148 x5)) (x1080 (x1148 x5)))))
(assert (x1079 (x824 (x1097 (+ 128 x580)))))
(assert (= (or x1186 x933) x1058))
(assert (= x1267 (and (not x1376) x525)))
(assert (x585 x351))
(assert (x585 x1271))
(assert (x585 x819))
(assert (=> (<= (x577 (x1097 (+ 64 x1031))) 10000) (= (x1034 (x577 (x1097 (+ x1031 64)))) (x1080 (x577 (x1097 (+ 64 x1031)))))))
(assert (x585 x36))
(assert (=> (>= 10000 (x795 (x1097 (+ x580 96)))) (= (x1034 (x795 (x1097 (+ x580 96)))) (x1080 (x795 (x1097 (+ 96 x580)))))))
(assert (= (x909 288) 0))
(assert (x585 x501))
(assert (= x309 (and x314 x1460)))
(assert (=> (<= (x824 (x1097 (+ 64 x580))) 10000) (= (x1034 (x824 (x1097 (+ x580 64)))) (x1080 (x824 (x1097 (+ x580 64)))))))
(assert (=> (>= 10000 (x824 (x1097 (+ 160 x580)))) (= (x1034 (x824 (x1097 (+ 160 x580)))) (x1080 (x824 (x1097 (+ x580 160)))))))
(assert (= x88 (=> (and (= x678 (div x1308 1000000000000000000000000)) (= x1308 (* x809 x668)) (= (x258 128) x1351) (= x975 (< 0 x1351)) (< (* x668 x809) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (=> x975 x675) (=> (and (not x975) (= 0 x868)) x346)))))
(assert (= 0 (x970 (- (+ (x1097 (+ x857 68)) (- (+ 68 (- (x1097 (+ 160 x1031)) 160)) 68)) x448))))
(assert (x585 x362))
(assert (x1079 (x1148 (x1097 (+ x5 32)))))
(assert (x585 x550))
(assert (= (and x833 x1111) x708))
(assert (= (or x977 x1134) x1105))
(assert (x585 x16))
(assert (= (x1129 (+ (- (+ 68 (- (+ x720 (- (+ x976 (- (x1097 (+ x5 96)) x857)) x673)) 160)) 68) (x1097 (+ x673 68)))) 0))
(assert (= 0 (x593 (x1097 (+ 68 x305)))))
(assert (=> (>= 10000 x658) (= (x1080 x658) (x1034 x658))))
(assert (= (=> (and (= (x1097 (+ 32 x77)) x1279) (= (x497 (- x1279 x580)) x1432) (= (x497 (- x1432 32)) x651) (= (>= 224 x651) x1246) (= x77 (x1097 (+ x580 x699)))) (and x1246 (=> (and (= x797 (ite (<= x651 32) (x389 (x1080 (x143 x580)) 0) (ite (>= 64 x651) (x719 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ 32 x580)))) 0) (ite (>= 96 x651) (x562 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ 32 x580)))) (x1080 (x143 (x1097 (+ 64 x580)))) 0) (ite (>= 128 x651) (x517 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ x580 32)))) (x1080 (x143 (x1097 (+ 64 x580)))) (x1080 (x143 (x1097 (+ x580 96)))) 0) (ite (>= 160 x651) (x1062 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ x580 32)))) (x1080 (x143 (x1097 (+ 64 x580)))) (x1080 (x143 (x1097 (+ 96 x580)))) (x1080 (x143 (x1097 (+ 128 x580)))) 0) (ite (<= x651 192) (x948 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ 32 x580)))) (x1080 (x143 (x1097 (+ 64 x580)))) (x1080 (x143 (x1097 (+ 96 x580)))) (x1080 (x143 (x1097 (+ x580 128)))) (x1080 (x143 (x1097 (+ 160 x580)))) 0) (ite (<= x651 224) (x344 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ x580 32)))) (x1080 (x143 (x1097 (+ 64 x580)))) (x1080 (x143 (x1097 (+ x580 96)))) (x1080 (x143 (x1097 (+ x580 128)))) (x1080 (x143 (x1097 (+ x580 160)))) (x1080 (x143 (x1097 (+ 192 x580)))) 0) (x1080 x759))))))))) (= x544 (>= 224 x1432))) (and (=> (and (>= x739 0) (= x739 x169) (= x353 (ite (<= x1432 32) (x389 (x1080 (x143 x580)) 0) (ite (>= 64 x1432) (x719 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ 32 x580)))) 0) (ite (<= x1432 96) (x562 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ 32 x580)))) (x1080 (x143 (x1097 (+ x580 64)))) 0) (ite (<= x1432 128) (x517 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ x580 32)))) (x1080 (x143 (x1097 (+ x580 64)))) (x1080 (x143 (x1097 (+ x580 96)))) 0) (ite (<= x1432 160) (x1062 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ 32 x580)))) (x1080 (x143 (x1097 (+ x580 64)))) (x1080 (x143 (x1097 (+ 96 x580)))) (x1080 (x143 (x1097 (+ x580 128)))) 0) (ite (<= x1432 192) (x948 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ x580 32)))) (x1080 (x143 (x1097 (+ x580 64)))) (x1080 (x143 (x1097 (+ x580 96)))) (x1080 (x143 (x1097 (+ x580 128)))) (x1080 (x143 (x1097 (+ x580 160)))) 0) (ite (<= x1432 224) (x344 (x1080 (x143 x580)) (x1080 (x143 (x1097 (+ x580 32)))) (x1080 (x143 (x1097 (+ 64 x580)))) (x1080 (x143 (x1097 (+ x580 96)))) (x1080 (x143 (x1097 (+ 128 x580)))) (x1080 (x143 (x1097 (+ 160 x580)))) (x1080 (x143 (x1097 (+ 192 x580)))) 0) (x1080 x661))))))))) (<= x739 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x618 x353) x739)) x956) x544)))) x519))
(assert (= (and x1475 x1016) x639))
(assert (x585 x1372))
(assert (= x621 (or x1344 x413)))
(assert (= (x430 (+ (- (+ (- (+ (- (+ (- (+ x720 (- x594 x673)) 160) 68) 68) (x1097 (+ 68 x673))) 160) 68) 68) (x1097 (+ x857 68)))) 0))
(assert (= 0 (x1129 (+ (- (+ 68 (- (+ (x1097 (+ x305 68)) 160) 160)) 68) (x1097 (+ x673 68))))))
(assert (x585 x32))
(assert (x585 x1159))
(assert (= (x593 (+ x720 (- (+ x976 (- x5 x857)) x673))) 0))
(assert (=> (>= 10000 x853) (= (x1034 x853) (x1080 x853))))
(assert (x585 x690))
(assert (= (x1331 (x1080 (x143 (x1097 (+ x580 192))))) (x143 (x1097 (+ 192 x580)))))
(assert (= 0 (x430 (x1097 (+ 68 x857)))))
(assert (x585 x1282))
(assert (= x474 (and (not x424) x1018)))
(assert (= x270 (=> (and (= x129 x419) (= (x1259 x129) x502) (= x857 x1045) (= (not (> x373 32)) x601)) (and x601 (=> (= 32 x1395) x243)))))
(assert (=> (>= 10000 (x795 (x1097 (+ 160 x580)))) (= (x1080 (x795 (x1097 (+ 160 x580)))) (x1034 (x795 (x1097 (+ x580 160)))))))
(assert (= (and x911 x142) x29))
(assert (x585 x1269))
(assert (x585 x699))
(assert (x585 x902))
(assert (= 0 (x1129 (+ (- x1243 x857) x976))))
(assert (= (x970 (- (+ (x1097 (+ 68 x857)) (- (+ 68 (- (+ (- x5 x857) x976) 160)) 68)) x448)) 0))
(assert (= (and x979 x975) x227))
(assert (= (=> (and (or (not x449) (and (= x1469 (x1097 (+ x312 x580))) x449)) (= (> x1241 x312) x449)) x326) x846))
(assert (x585 x194))
(assert (= (x1331 (x1080 (x22 (x1097 (+ x857 192))))) (x22 (x1097 (+ x857 192)))))
(assert (x585 x281))
(assert (x585 x8))
(check-sat)
(exit)