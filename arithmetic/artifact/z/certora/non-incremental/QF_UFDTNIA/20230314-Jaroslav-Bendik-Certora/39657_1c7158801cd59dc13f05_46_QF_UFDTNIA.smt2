(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x720 0)) (((x668 (x888 x720) (x561 Int)) (x51 (x189 Int)) (x114 (x119 x720) (x38 x720) (x520 Int)))))
(declare-fun x1096 () Bool)
(declare-fun x496 () Bool)
(declare-fun x992 () Bool)
(declare-fun x8 () Int)
(declare-fun x136 () Bool)
(declare-fun x697 () Int)
(declare-fun x372 () Bool)
(declare-fun x18 () Bool)
(declare-fun x512 () Bool)
(declare-fun x724 () Int)
(declare-fun x3 () Int)
(declare-fun x1111 () Bool)
(declare-fun x424 () Int)
(declare-fun x141 () Int)
(declare-fun x793 () Bool)
(declare-fun x549 () Int)
(declare-fun x1138 () Int)
(declare-fun x377 () Int)
(declare-fun x356 () Bool)
(declare-fun x784 () Bool)
(declare-fun x473 () Bool)
(declare-fun x190 () Bool)
(declare-fun x874 () Int)
(declare-fun x1097 () Int)
(declare-fun x200 () Int)
(declare-fun x996 (Int) Int)
(declare-fun x404 () Int)
(declare-fun x169 () Int)
(declare-fun x1088 () Int)
(declare-fun x851 () Bool)
(declare-fun x770 () Bool)
(declare-fun x298 () Int)
(declare-fun x550 () Bool)
(declare-fun x234 () Int)
(declare-fun x263 () Bool)
(declare-fun x110 () Bool)
(declare-fun x13 () Bool)
(declare-fun x990 () Int)
(declare-fun x1115 () Bool)
(declare-fun x236 () Int)
(declare-fun x779 () Bool)
(declare-fun x30 () Int)
(declare-fun x503 () Int)
(declare-fun x301 () Bool)
(declare-fun x1030 () Bool)
(declare-fun x1102 () Int)
(declare-fun x1033 () Bool)
(declare-fun x58 () Int)
(declare-fun x645 () Int)
(declare-fun x845 () Bool)
(declare-fun x155 () Bool)
(declare-fun x651 () Bool)
(declare-fun x44 () Bool)
(declare-fun x147 () Bool)
(declare-fun x1077 () Bool)
(declare-fun x409 () Bool)
(declare-fun x987 () Int)
(declare-fun x1136 () Bool)
(declare-fun x161 () Bool)
(declare-fun x802 () Bool)
(declare-fun x926 () Int)
(declare-fun x752 () Int)
(declare-fun x173 () Int)
(declare-fun x148 () Bool)
(declare-fun x551 () Int)
(declare-fun x785 () Bool)
(declare-fun x462 () Bool)
(declare-fun x208 () Int)
(declare-fun x1091 () Int)
(declare-fun x676 () Bool)
(declare-fun x446 () Int)
(declare-fun x707 () Int)
(declare-fun x910 () Int)
(declare-fun x543 () Bool)
(declare-fun x800 () Bool)
(declare-fun x128 () Bool)
(declare-fun x149 () Bool)
(declare-fun x235 () Bool)
(declare-fun x680 () Int)
(declare-fun x759 () Bool)
(declare-fun x526 () Bool)
(declare-fun x1123 () Int)
(declare-fun x927 () Bool)
(declare-fun x467 () Int)
(declare-fun x335 () Int)
(declare-fun x626 () Int)
(declare-fun x1015 () Bool)
(declare-fun x864 () Bool)
(declare-fun x760 () Bool)
(declare-fun x98 () Int)
(declare-fun x481 () Int)
(declare-fun x586 () Bool)
(declare-fun x818 () Bool)
(declare-fun x330 () Bool)
(declare-fun x197 () Bool)
(declare-fun x854 () Int)
(declare-fun x655 () Int)
(declare-fun x1037 () Int)
(declare-fun x1113 () Int)
(declare-fun x480 () Int)
(declare-fun x812 () Int)
(declare-fun x585 () Bool)
(declare-fun x909 () Bool)
(declare-fun x647 () Bool)
(declare-fun x307 () Int)
(declare-fun x438 () Bool)
(declare-fun x774 () Bool)
(declare-fun x484 () Bool)
(declare-fun x269 () Bool)
(declare-fun x1053 () Bool)
(declare-fun x227 () Int)
(declare-fun x1074 () Bool)
(declare-fun x514 () Int)
(declare-fun x170 () Int)
(declare-fun x482 () Int)
(declare-fun x823 () Int)
(declare-fun x948 () Int)
(declare-fun x1038 () Int)
(declare-fun x177 () Int)
(declare-fun x135 () Bool)
(declare-fun x635 (Int Int) Int)
(declare-fun x641 () Bool)
(declare-fun x374 () Int)
(declare-fun x11 () Bool)
(declare-fun x118 () Int)
(declare-fun x275 () Bool)
(declare-fun x490 () Bool)
(declare-fun x1087 () Int)
(declare-fun x986 () Bool)
(declare-fun x613 () Bool)
(declare-fun x68 () Int)
(declare-fun x1057 () Bool)
(declare-fun x782 () Int)
(declare-fun x152 () Int)
(declare-fun x350 () Int)
(declare-fun x400 () Bool)
(declare-fun x188 () Int)
(declare-fun x1089 () Bool)
(declare-fun x894 () Int)
(declare-fun x1035 () Bool)
(declare-fun x420 () Int)
(declare-fun x206 () Int)
(declare-fun x450 () Bool)
(declare-fun x1112 () Bool)
(declare-fun x988 () Int)
(declare-fun x132 () Int)
(declare-fun x1063 () Int)
(declare-fun x901 () Int)
(declare-fun x204 () Int)
(declare-fun x850 () Int)
(declare-fun x699 () Bool)
(declare-fun x1065 () Bool)
(declare-fun x326 () Bool)
(declare-fun x254 () Bool)
(declare-fun x1082 () Bool)
(declare-fun x672 () Int)
(declare-fun x1114 () Int)
(declare-fun x642 () Bool)
(declare-fun x443 () Bool)
(declare-fun x628 () Bool)
(declare-fun x5 () Bool)
(declare-fun x378 () Bool)
(declare-fun x368 (Int) Int)
(declare-fun x294 () Bool)
(declare-fun x682 () Int)
(declare-fun x813 () Int)
(declare-fun x167 () Bool)
(declare-fun x843 () Int)
(declare-fun x632 () Bool)
(declare-fun x199 () Int)
(declare-fun x1007 () Int)
(declare-fun x805 () Int)
(declare-fun x560 () Int)
(declare-fun x257 () Int)
(declare-fun x597 () Bool)
(declare-fun x702 () Bool)
(declare-fun x1045 () Int)
(declare-fun x303 () Int)
(declare-fun x1131 () Int)
(declare-fun x90 () Bool)
(declare-fun x475 () Bool)
(declare-fun x195 () Int)
(declare-fun x300 () Bool)
(declare-fun x1019 () Int)
(declare-fun x791 () Int)
(declare-fun x142 () Int)
(declare-fun x40 () Bool)
(declare-fun x661 () Int)
(declare-fun x685 () Int)
(declare-fun x656 () Bool)
(declare-fun x61 () Int)
(declare-fun x615 () Bool)
(declare-fun x686 () Bool)
(declare-fun x497 () Int)
(declare-fun x1006 () Int)
(declare-fun x315 () Int)
(declare-fun x259 () Int)
(declare-fun x572 () Int)
(declare-fun x694 () Int)
(declare-fun x445 () Bool)
(declare-fun x950 () Int)
(declare-fun x10 () Bool)
(declare-fun x671 () Bool)
(declare-fun x1095 () Int)
(declare-fun x334 () Int)
(declare-fun x1075 (x720) Int)
(declare-fun x383 () Int)
(declare-fun x82 () Int)
(declare-fun x1086 () Int)
(declare-fun x434 () Int)
(declare-fun x922 () Int)
(declare-fun x109 () Int)
(declare-fun x1050 () Int)
(declare-fun x1094 () Bool)
(declare-fun x241 () Int)
(declare-fun x417 () Int)
(declare-fun x100 () Bool)
(declare-fun x511 () Int)
(declare-fun x495 () Int)
(declare-fun x499 () Bool)
(declare-fun x523 () Int)
(declare-fun x37 () Bool)
(declare-fun x732 () Bool)
(declare-fun x657 () Int)
(declare-fun x617 () Bool)
(declare-fun x519 () Bool)
(declare-fun x302 () Bool)
(declare-fun x158 () Int)
(declare-fun x608 () Int)
(declare-fun x299 () Int)
(declare-fun x185 () Bool)
(declare-fun x590 () Int)
(declare-fun x345 () Int)
(declare-fun x171 () Int)
(declare-fun x767 () Int)
(declare-fun x21 () Int)
(declare-fun x357 () Bool)
(declare-fun x396 () Int)
(declare-fun x807 () Int)
(declare-fun x309 () Bool)
(declare-fun x905 () Int)
(declare-fun x429 () Bool)
(declare-fun x616 () Bool)
(declare-fun x565 () Int)
(declare-fun x458 () Bool)
(declare-fun x54 () Bool)
(declare-fun x32 () Bool)
(declare-fun x237 () Int)
(declare-fun x401 () Bool)
(declare-fun x886 () Bool)
(declare-fun x792 () Int)
(declare-fun x379 () Bool)
(declare-fun x163 () Int)
(declare-fun x538 () Int)
(declare-fun x594 () Bool)
(declare-fun x957 () Bool)
(declare-fun x1023 () Int)
(declare-fun x354 () Int)
(declare-fun x125 () Int)
(declare-fun x392 () Int)
(declare-fun x251 () Bool)
(declare-fun x960 () Int)
(declare-fun x836 () Bool)
(declare-fun x1104 () Int)
(declare-fun x1028 () Int)
(declare-fun x1001 () Int)
(declare-fun x1132 () Bool)
(declare-fun x932 () Bool)
(declare-fun x67 () Bool)
(declare-fun x556 () Int)
(declare-fun x709 () Int)
(declare-fun x825 () Int)
(declare-fun x794 () Int)
(declare-fun x773 () Int)
(declare-fun x801 () Int)
(declare-fun x1101 () Bool)
(declare-fun x165 () Bool)
(declare-fun x639 () Int)
(declare-fun x137 () Int)
(declare-fun x296 () Bool)
(declare-fun x139 () Bool)
(declare-fun x762 () Bool)
(declare-fun x412 () Int)
(declare-fun x666 () Bool)
(declare-fun x7 () Bool)
(declare-fun x442 () Int)
(declare-fun x931 () Bool)
(declare-fun x735 () Int)
(declare-fun x769 () Int)
(declare-fun x1004 () Bool)
(declare-fun x937 () Bool)
(declare-fun x695 () Int)
(declare-fun x260 () Int)
(declare-fun x371 () Int)
(declare-fun x712 () Int)
(declare-fun x394 () Bool)
(declare-fun x620 () Int)
(declare-fun x115 () Bool)
(declare-fun x1107 () Int)
(declare-fun x860 () Bool)
(declare-fun x704 () Bool)
(declare-fun x863 () Int)
(declare-fun x493 () Int)
(declare-fun x740 () Bool)
(declare-fun x1036 () Int)
(declare-fun x360 () Int)
(declare-fun x439 () Int)
(declare-fun x925 () Int)
(declare-fun x981 () Bool)
(declare-fun x755 () Bool)
(declare-fun x131 () Int)
(declare-fun x491 () Bool)
(declare-fun x739 () Bool)
(declare-fun x638 () Int)
(declare-fun x255 () Bool)
(declare-fun x506 () Bool)
(declare-fun x533 () Int)
(declare-fun x1139 () Int)
(declare-fun x912 () Int)
(declare-fun x485 () Int)
(declare-fun x915 () Bool)
(declare-fun x55 () Bool)
(declare-fun x618 () Int)
(declare-fun x919 () Int)
(declare-fun x531 () Int)
(declare-fun x103 () Bool)
(declare-fun x476 () Int)
(declare-fun x459 () Int)
(declare-fun x24 () Bool)
(declare-fun x71 () Int)
(declare-fun x242 () Int)
(declare-fun x1034 () Int)
(declare-fun x160 () Bool)
(declare-fun x405 () Int)
(declare-fun x468 () Int)
(declare-fun x291 () Int)
(declare-fun x902 () Int)
(declare-fun x985 () Bool)
(declare-fun x814 () Int)
(declare-fun x192 () Int)
(declare-fun x534 () Int)
(declare-fun x293 () Bool)
(declare-fun x1026 () Bool)
(declare-fun x505 () Int)
(declare-fun x201 () Bool)
(declare-fun x39 () Bool)
(declare-fun x121 () Bool)
(declare-fun x852 () Bool)
(declare-fun x729 () Int)
(declare-fun x993 () Bool)
(declare-fun x287 () Int)
(declare-fun x65 (x720) Int)
(declare-fun x567 () Int)
(declare-fun x1044 () Int)
(declare-fun x913 () Bool)
(declare-fun x542 () Int)
(declare-fun x209 () Bool)
(declare-fun x1014 () Int)
(declare-fun x525 () Int)
(declare-fun x217 () Bool)
(declare-fun x713 () Bool)
(declare-fun x83 () Int)
(declare-fun x31 () Int)
(declare-fun x42 (Int) Int)
(declare-fun x545 () Int)
(declare-fun x410 () Bool)
(declare-fun x389 () Bool)
(declare-fun x816 () Int)
(declare-fun x140 () Int)
(declare-fun x930 () Int)
(declare-fun x701 () Int)
(declare-fun x1135 () Int)
(declare-fun x12 () Int)
(declare-fun x423 () Bool)
(declare-fun x693 () Int)
(declare-fun x97 () Bool)
(declare-fun x941 () Bool)
(declare-fun x89 () Bool)
(declare-fun x674 () Bool)
(declare-fun x896 () Int)
(declare-fun x436 () Int)
(declare-fun x344 () Bool)
(declare-fun x105 () Int)
(declare-fun x282 () Bool)
(declare-fun x463 () Bool)
(declare-fun x540 () Bool)
(declare-fun x385 () Int)
(declare-fun x535 () Bool)
(declare-fun x101 (Int) Int)
(declare-fun x589 () Bool)
(declare-fun x187 () Int)
(declare-fun x198 () Bool)
(declare-fun x15 () Bool)
(declare-fun x1018 () Bool)
(declare-fun x610 () Bool)
(declare-fun x564 () Bool)
(declare-fun x312 () Int)
(declare-fun x529 () Int)
(declare-fun x145 () Bool)
(declare-fun x856 () Int)
(declare-fun x336 () Int)
(declare-fun x276 () Bool)
(declare-fun x17 () Int)
(declare-fun x130 () Bool)
(declare-fun x331 () Int)
(declare-fun x122 () Int)
(declare-fun x433 () Bool)
(declare-fun x962 () Bool)
(declare-fun x449 () Bool)
(declare-fun x1056 () Bool)
(declare-fun x319 (Int) x720)
(declare-fun x974 () Bool)
(declare-fun x862 (x720) Int)
(declare-fun x124 () Int)
(declare-fun x232 () Int)
(declare-fun x322 () Bool)
(declare-fun x546 () Bool)
(declare-fun x27 () Bool)
(declare-fun x267 () Int)
(declare-fun x56 () Int)
(declare-fun x314 () Int)
(declare-fun x907 () Bool)
(declare-fun x826 () Int)
(declare-fun x815 () Int)
(declare-fun x308 () Int)
(declare-fun x414 () Int)
(declare-fun x1058 () Int)
(declare-fun x758 () Bool)
(declare-fun x224 () Int)
(declare-fun x951 () Int)
(declare-fun x570 () Int)
(declare-fun x228 () Bool)
(declare-fun x176 () Int)
(declare-fun x134 () Int)
(declare-fun x207 () Bool)
(declare-fun x395 (Int) Int)
(declare-fun x605 () Int)
(declare-fun x1041 () Int)
(declare-fun x796 () Int)
(declare-fun x979 () Int)
(declare-fun x95 () Int)
(declare-fun x719 () Int)
(declare-fun x425 () Int)
(declare-fun x602 () Bool)
(declare-fun x559 () Int)
(declare-fun x26 () Bool)
(declare-fun x904 () Int)
(declare-fun x92 () Int)
(declare-fun x611 () Bool)
(declare-fun x75 () Int)
(declare-fun x494 () Int)
(declare-fun x332 () Bool)
(declare-fun x964 () Bool)
(declare-fun x966 () Bool)
(declare-fun x544 () Bool)
(declare-fun x824 (Int) Int)
(declare-fun x667 () Int)
(declare-fun x453 () Int)
(declare-fun x866 () Bool)
(declare-fun x562 () Int)
(declare-fun x1103 (x720) Int)
(declare-fun x47 () Bool)
(declare-fun x295 () Int)
(declare-fun x1051 () Bool)
(declare-fun x991 () Int)
(declare-fun x903 () Int)
(declare-fun x541 () Int)
(declare-fun x381 () Int)
(declare-fun x970 (Int) Int)
(declare-fun x965 () Int)
(declare-fun x539 () Bool)
(declare-fun x1073 () Int)
(declare-fun x457 () Int)
(declare-fun x917 () Int)
(declare-fun x997 () Bool)
(declare-fun x665 () Bool)
(declare-fun x841 () Int)
(declare-fun x191 () Int)
(declare-fun x233 () Int)
(declare-fun x783 () Bool)
(declare-fun x1069 () Bool)
(declare-fun x914 () Bool)
(declare-fun x607 () Bool)
(declare-fun x1119 () Int)
(declare-fun x923 () Int)
(declare-fun x1100 () Bool)
(declare-fun x684 () Int)
(declare-fun x508 () Bool)
(declare-fun x202 () Int)
(declare-fun x781 () Bool)
(declare-fun x584 () Bool)
(declare-fun x722 () Bool)
(declare-fun x817 () Bool)
(declare-fun x20 () Int)
(declare-fun x761 () Int)
(declare-fun x283 () Bool)
(declare-fun x528 () Bool)
(declare-fun x606 () Int)
(declare-fun x284 () Int)
(declare-fun x353 () Int)
(declare-fun x631 () Int)
(declare-fun x265 () Int)
(declare-fun x623 () Int)
(declare-fun x581 () Int)
(declare-fun x571 () Int)
(declare-fun x831 () Bool)
(declare-fun x803 () Int)
(declare-fun x789 () Bool)
(declare-fun x675 () Int)
(declare-fun x77 () Bool)
(declare-fun x839 () Int)
(declare-fun x107 () Int)
(declare-fun x1049 () Bool)
(declare-fun x703 () Bool)
(declare-fun x1133 () Bool)
(declare-fun x247 () Int)
(declare-fun x711 () Bool)
(declare-fun x166 () Bool)
(declare-fun x537 () Int)
(declare-fun x527 () Bool)
(declare-fun x921 () Bool)
(declare-fun x911 () Bool)
(declare-fun x509 () Int)
(declare-fun x678 () Bool)
(declare-fun x238 () Int)
(declare-fun x624 (Int) Int)
(declare-fun x776 () Int)
(declare-fun x406 () Bool)
(declare-fun x471 () Int)
(declare-fun x216 () Int)
(declare-fun x1043 () Bool)
(declare-fun x81 () Int)
(declare-fun x292 (Int Int) Int)
(declare-fun x828 () Int)
(declare-fun x727 () Bool)
(declare-fun x69 () Bool)
(declare-fun x74 () Int)
(declare-fun x384 () Int)
(declare-fun x102 () Bool)
(declare-fun x873 () Int)
(declare-fun x771 () Bool)
(declare-fun x268 () Int)
(declare-fun x1098 () Bool)
(declare-fun x78 () Int)
(declare-fun x1117 () Int)
(declare-fun x1046 () Bool)
(declare-fun x1072 () Int)
(declare-fun x35 () Int)
(declare-fun x1067 () Int)
(declare-fun x248 () Bool)
(declare-fun x181 () Int)
(declare-fun x245 () Bool)
(declare-fun x258 () Int)
(declare-fun x272 () Int)
(declare-fun x277 () Bool)
(declare-fun x878 () Bool)
(declare-fun x437 () Int)
(declare-fun x1025 () Int)
(declare-fun x1140 () Int)
(declare-fun x1128 () Int)
(declare-fun x753 () Bool)
(declare-fun x1012 () Int)
(declare-fun x273 () Int)
(declare-fun x811 () Bool)
(declare-fun x742 () Bool)
(declare-fun x79 () Bool)
(declare-fun x518 () Bool)
(declare-fun x884 () Bool)
(declare-fun x574 () Bool)
(declare-fun x976 () Bool)
(declare-fun x386 () Int)
(declare-fun x1090 () Int)
(declare-fun x361 () Bool)
(declare-fun x995 () Int)
(declare-fun x23 () Bool)
(declare-fun x1047 () Bool)
(declare-fun x213 () Int)
(declare-fun x477 () Int)
(declare-fun x355 () Bool)
(declare-fun x928 () Int)
(declare-fun x859 () Bool)
(declare-fun x989 () Bool)
(declare-fun x297 () Bool)
(declare-fun x853 () Int)
(declare-fun x600 () Int)
(declare-fun x1105 () Bool)
(declare-fun x117 () Int)
(declare-fun x498 () Int)
(declare-fun x728 () Int)
(declare-fun x375 () Int)
(declare-fun x649 () Bool)
(declare-fun x126 () Int)
(declare-fun x66 () Int)
(declare-fun x726 () Bool)
(declare-fun x629 () Int)
(declare-fun x62 () Int)
(declare-fun x521 () Bool)
(declare-fun x1027 () Bool)
(declare-fun x466 () Bool)
(declare-fun x775 () Int)
(declare-fun x96 () Bool)
(declare-fun x465 () Bool)
(declare-fun x573 () Bool)
(declare-fun x85 () Int)
(declare-fun x46 () Bool)
(declare-fun x305 () Int)
(declare-fun x28 () Int)
(declare-fun x736 () Bool)
(declare-fun x578 () Int)
(declare-fun x943 () Int)
(declare-fun x710 () Bool)
(declare-fun x968 () Int)
(declare-fun x648 () Int)
(declare-fun x415 () Int)
(declare-fun x22 () Bool)
(declare-fun x226 () Bool)
(declare-fun x834 () Int)
(declare-fun x456 () Bool)
(declare-fun x952 () Int)
(declare-fun x376 () Bool)
(declare-fun x947 () Bool)
(declare-fun x553 () Int)
(declare-fun x953 () Int)
(declare-fun x1080 (Int) Int)
(declare-fun x327 () Bool)
(declare-fun x967 () Bool)
(declare-fun x940 () Bool)
(declare-fun x848 () Bool)
(declare-fun x153 () Bool)
(declare-fun x86 () Bool)
(declare-fun x487 () Int)
(declare-fun x94 () Bool)
(declare-fun x358 () Int)
(declare-fun x596 () Int)
(declare-fun x1099 () Bool)
(declare-fun x861 () Int)
(declare-fun x1110 () Int)
(declare-fun x363 () Bool)
(declare-fun x890 () Int)
(declare-fun x530 (Int Int) Int)
(declare-fun x447 () Bool)
(declare-fun x1127 () Bool)
(declare-fun x837 () Bool)
(declare-fun x444 () Int)
(declare-fun x934 () Bool)
(declare-fun x765 () Int)
(declare-fun x847 () Int)
(declare-fun x715 () Int)
(declare-fun x127 () Bool)
(declare-fun x338 () Int)
(declare-fun x369 () Bool)
(declare-fun x650 () Int)
(declare-fun x88 () Bool)
(declare-fun x799 () Int)
(declare-fun x946 () Int)
(declare-fun x168 () Bool)
(declare-fun x516 () Bool)
(declare-fun x223 () Bool)
(declare-fun x942 () Int)
(declare-fun x203 () Bool)
(declare-fun x180 () Int)
(declare-fun x689 () Bool)
(declare-fun x144 () Bool)
(declare-fun x949 () Int)
(declare-fun x748 () Int)
(declare-fun x870 () Int)
(declare-fun x112 () Int)
(declare-fun x557 () Bool)
(declare-fun x558 () Int)
(declare-fun x41 (x720) Int)
(declare-fun x43 () Bool)
(declare-fun x373 () Int)
(declare-fun x1039 () Int)
(declare-fun x634 () Bool)
(declare-fun x426 () Bool)
(declare-fun x766 () Int)
(declare-fun x669 () Int)
(declare-fun x764 () Int)
(declare-fun x869 () Int)
(declare-fun x461 () Bool)
(declare-fun x746 () Bool)
(declare-fun x93 () Int)
(declare-fun x483 () Bool)
(declare-fun x390 () Int)
(declare-fun x889 () Bool)
(declare-fun x772 () Int)
(declare-fun x1048 () Int)
(declare-fun x53 (x720) Int)
(declare-fun x750 () Int)
(declare-fun x222 () Int)
(declare-fun x555 () Int)
(declare-fun x329 () Bool)
(declare-fun x57 () Bool)
(declare-fun x660 () Int)
(declare-fun x733 () Bool)
(declare-fun x194 () Bool)
(declare-fun x431 () Bool)
(declare-fun x221 () Bool)
(declare-fun x262 () Int)
(declare-fun x1052 () Int)
(declare-fun x317 () Bool)
(declare-fun x80 (x720) Int)
(declare-fun x806 () Bool)
(declare-fun x763 () Int)
(declare-fun x1017 (Int) Int)
(declare-fun x469 () Bool)
(declare-fun x654 () Int)
(declare-fun x1070 () Int)
(declare-fun x1121 () Bool)
(declare-fun x756 () Bool)
(declare-fun x883 () Int)
(declare-fun x440 () Bool)
(declare-fun x706 () Bool)
(declare-fun x123 () Bool)
(declare-fun x138 () Bool)
(declare-fun x971 () Int)
(declare-fun x328 () Bool)
(declare-fun x939 () Int)
(declare-fun x595 () Int)
(declare-fun x339 () Int)
(declare-fun x84 () Int)
(declare-fun x835 () Int)
(declare-fun x788 () Bool)
(declare-fun x583 () Bool)
(declare-fun x76 () Int)
(declare-fun x994 () Bool)
(declare-fun x108 () Int)
(declare-fun x885 () Bool)
(declare-fun x598 () Bool)
(declare-fun x612 () Int)
(declare-fun x827 () Bool)
(declare-fun x502 (Int) Int)
(declare-fun x1008 () Int)
(declare-fun x359 () Int)
(declare-fun x679 () Bool)
(declare-fun x721 () Int)
(declare-fun x14 () Bool)
(declare-fun x751 () Bool)
(declare-fun x780 () Int)
(declare-fun x362 () Int)
(declare-fun x1079 () Bool)
(declare-fun x944 () Bool)
(declare-fun x435 () Int)
(declare-fun x304 () Bool)
(declare-fun x9 () Bool)
(declare-fun x969 () Bool)
(declare-fun x464 () Bool)
(declare-fun x592 () Int)
(declare-fun x1083 () Int)
(declare-fun x116 () Bool)
(declare-fun x819 () Bool)
(declare-fun x492 () Int)
(declare-fun x1003 () Bool)
(declare-fun x603 () Int)
(declare-fun x714 () Int)
(declare-fun x348 () Int)
(declare-fun x978 () Bool)
(declare-fun x244 () Bool)
(declare-fun x688 () Int)
(declare-fun x1020 () Int)
(declare-fun x1 () Int)
(declare-fun x1005 () Int)
(declare-fun x593 () Bool)
(declare-fun x162 () Bool)
(declare-fun x146 () Int)
(declare-fun x1013 () Bool)
(declare-fun x196 () Int)
(declare-fun x388 () Int)
(declare-fun x1129 () Int)
(declare-fun x365 () Int)
(declare-fun x504 () Int)
(declare-fun x1021 () Bool)
(declare-fun x229 () Bool)
(declare-fun x364 () Int)
(declare-fun x1134 () Int)
(declare-fun x430 () Int)
(declare-fun x1106 () Bool)
(declare-fun x183 () Bool)
(declare-fun x398 () Bool)
(declare-fun x411 () Int)
(declare-fun x1009 () Bool)
(declare-fun x479 () Int)
(declare-fun x977 () Bool)
(declare-fun x1130 () Int)
(declare-fun x380 () Bool)
(declare-fun x833 () Bool)
(declare-fun x790 () Int)
(declare-fun x973 () Bool)
(declare-fun x749 () Int)
(declare-fun x280 () Bool)
(declare-fun x933 () Bool)
(declare-fun x402 () Int)
(declare-fun x172 () Bool)
(declare-fun x16 () Int)
(declare-fun x547 () Int)
(declare-fun x858 () Int)
(declare-fun x205 () Int)
(declare-fun x893 () Int)
(declare-fun x983 () Bool)
(declare-fun x619 () Bool)
(declare-fun x500 () Int)
(declare-fun x1118 () Bool)
(declare-fun x488 () Bool)
(declare-fun x1081 () Int)
(declare-fun x460 () Int)
(declare-fun x1093 () Bool)
(declare-fun x643 () Int)
(declare-fun x507 () Int)
(declare-fun x182 () Bool)
(declare-fun x281 () Bool)
(declare-fun x478 () Bool)
(declare-fun x164 () Bool)
(declare-fun x240 () Int)
(declare-fun x451 () Int)
(declare-fun x1125 () Bool)
(declare-fun x963 () Bool)
(declare-fun x738 () Bool)
(declare-fun x1059 () Bool)
(declare-fun x1022 (Int) Int)
(declare-fun x421 () Int)
(declare-fun x658 () Bool)
(declare-fun x289 () Bool)
(declare-fun x580 () Int)
(declare-fun x929 () Int)
(declare-fun x681 () Bool)
(declare-fun x1092 () Int)
(declare-fun x575 () Int)
(declare-fun x408 () Bool)
(declare-fun x274 () Int)
(declare-fun x1010 () Int)
(declare-fun x998 () Int)
(declare-fun x501 () Int)
(declare-fun x215 () Int)
(declare-fun x591 () Int)
(declare-fun x193 () Int)
(declare-fun x692 () Int)
(declare-fun x306 () Int)
(declare-fun x524 () Bool)
(declare-fun x880 () Int)
(declare-fun x219 () Bool)
(declare-fun x230 () Int)
(declare-fun x683 () Int)
(declare-fun x846 (Int) Int)
(declare-fun x936 () Bool)
(declare-fun x243 () Int)
(declare-fun x72 () Bool)
(declare-fun x455 () Bool)
(declare-fun x346 () Int)
(declare-fun x708 () Bool)
(declare-fun x653 () Bool)
(declare-fun x472 () Int)
(declare-fun x1002 () Int)
(declare-fun x318 () Int)
(declare-fun x352 () Int)
(declare-fun x810 () Bool)
(declare-fun x311 () Int)
(declare-fun x111 () Int)
(declare-fun x1122 () Bool)
(declare-fun x413 () Int)
(declare-fun x351 () Bool)
(declare-fun x741 () Bool)
(declare-fun x579 () Int)
(declare-fun x670 () Bool)
(declare-fun x416 () Int)
(declare-fun x33 () Bool)
(declare-fun x45 () Int)
(declare-fun x261 () Int)
(declare-fun x270 () Int)
(declare-fun x920 () Bool)
(declare-fun x159 () Int)
(declare-fun x73 () Int)
(declare-fun x1078 () Int)
(declare-fun x554 () Int)
(declare-fun x60 () Int)
(declare-fun x211 () Bool)
(declare-fun x250 () Int)
(declare-fun x659 () Bool)
(declare-fun x252 () Int)
(declare-fun x486 () Int)
(declare-fun x809 () Int)
(declare-fun x1108 () Int)
(declare-fun x474 () Bool)
(declare-fun x470 () Bool)
(declare-fun x419 () Bool)
(declare-fun x662 () Int)
(declare-fun x822 () Bool)
(declare-fun x418 () Bool)
(declare-fun x1064 () Int)
(declare-fun x489 () Int)
(declare-fun x609 () Int)
(declare-fun x625 () Int)
(declare-fun x342 () Bool)
(declare-fun x838 () Bool)
(declare-fun x104 () Int)
(declare-fun x1011 () Bool)
(declare-fun x644 () Int)
(declare-fun x717 () Int)
(declare-fun x636 () Int)
(declare-fun x212 () Int)
(declare-fun x1062 () Bool)
(declare-fun x887 () Int)
(declare-fun x2 () Int)
(declare-fun x1031 () Int)
(declare-fun x895 () Bool)
(declare-fun x178 () Int)
(declare-fun x113 () Int)
(declare-fun x36 () Bool)
(declare-fun x563 () Int)
(declare-fun x1109 () Int)
(declare-fun x587 () Bool)
(declare-fun x49 () Int)
(declare-fun x577 () Int)
(declare-fun x855 () Bool)
(declare-fun x982 () Bool)
(declare-fun x1054 () Bool)
(declare-fun x737 () Int)
(declare-fun x510 () Int)
(declare-fun x1126 () Bool)
(declare-fun x34 () Int)
(declare-fun x454 () Bool)
(declare-fun x271 () Bool)
(declare-fun x599 () Bool)
(declare-fun x532 () Bool)
(declare-fun x175 () Bool)
(declare-fun x52 () Bool)
(declare-fun x313 () Int)
(declare-fun x513 () Int)
(declare-fun x391 () Bool)
(declare-fun x264 () Bool)
(declare-fun x652 () Int)
(declare-fun x256 () Bool)
(declare-fun x1085 () Int)
(declare-fun x120 () Int)
(declare-fun x214 () Bool)
(declare-fun x959 () Int)
(declare-fun x768 () Bool)
(declare-fun x133 () Int)
(declare-fun x231 () Int)
(declare-fun x1024 () Bool)
(declare-fun x50 () Int)
(declare-fun x320 () Int)
(declare-fun x891 () Bool)
(declare-fun x427 () Int)
(declare-fun x157 () Bool)
(declare-fun x239 () Int)
(declare-fun x548 () Int)
(declare-fun x821 () Bool)
(declare-fun x877 () Bool)
(declare-fun x341 () Bool)
(declare-fun x266 () Bool)
(declare-fun x956 () Int)
(declare-fun x1042 () Bool)
(declare-fun x290 () Int)
(declare-fun x614 () Bool)
(declare-fun x787 () Bool)
(declare-fun x898 () Bool)
(declare-fun x633 () Int)
(declare-fun x795 () Int)
(declare-fun x808 () Int)
(declare-fun x337 () Int)
(declare-fun x397 () Int)
(declare-fun x935 () Bool)
(declare-fun x428 () Int)
(declare-fun x1040 () Int)
(declare-fun x184 (x720) Int)
(declare-fun x441 () Int)
(declare-fun x604 () Int)
(declare-fun x278 () Bool)
(declare-fun x343 () Int)
(declare-fun x677 () Bool)
(declare-fun x91 () Bool)
(declare-fun x150 () Int)
(declare-fun x1068 () Bool)
(declare-fun x99 () Bool)
(declare-fun x972 () Bool)
(declare-fun x1016 () Bool)
(declare-fun x552 () Int)
(declare-fun x999 () Int)
(define-fun x340 ((x720 x720) (x844 Int)) x720 (ite ((_ is x114) x720) (x114 (x119 x720) (x38 x720) (+ (x520 x720) x844)) (ite ((_ is x668) x720) (x668 (x888 x720) (+ (x561 x720) x844)) (x51 (+ x844 (x189 x720))))))
(define-fun x897 ((x324 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x324) (>= x324 0)) x324 (- x324 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x723 ((x324 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x324) (> 0 x324)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x324) x324))
(define-fun x154 ((x253 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x253) (>= x253 0)))
(define-fun x984 ((x253 Int)) Bool (and (= (x635 115792089237316195423570985008687907853269984665640564039457584007913129639935 x253) x253) (= x253 (x635 x253 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x349 ((x253 Int)) Bool (and (= (x635 0 x253) 0) (= 0 (x635 x253 0))))
(define-fun x1120 ((x253 Int)) Bool (= (x635 x253 x253) x253))
(define-fun x220 ((x253 Int)) Bool (and (x1120 x253) (x984 x253) (x349 x253)))
(define-fun x432 ((x253 Int) (x536 Int)) Bool (= (x635 x536 x253) (x635 x253 x536)))
(define-fun x87 ((x253 Int) (x536 Int)) Bool (and (>= (x635 x253 x536) 0) (=> (>= x536 0) (>= x536 (x635 x253 x536))) (=> (<= 0 x253) (>= x253 (x635 x253 x536)))))
(define-fun x734 ((x253 Int) (x536 Int)) Bool (and (x432 x253 x536) (x87 x253 x536)))
(define-fun x246 ((x253 Int)) Bool (= (mod x253 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x253 32) (x635 x253 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x566 ((x253 Int)) Bool (and (x734 x253 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x246 x253)))
(define-fun x798 ((x253 Int)) Bool (= (mod x253 1461501637330902918203684832716283019655932542976) (x635 x253 1461501637330902918203684832716283019655932542975)))
(define-fun x876 ((x253 Int)) Bool (and (x734 x253 1461501637330902918203684832716283019655932542975) (x798 x253)))
(define-fun x961 ((x19 Int)) Int (ite (> x749 x19) (x824 x19) 0))
(define-fun x1116 ((x19 Int)) Int (x1080 x19))
(define-fun x210 ((x19 x720)) Int (ite (= (x319 x959) x19) x809 (x41 x19)))
(define-fun x975 ((x19 x720)) Int (ite (= x19 (x319 x132)) x437 (x210 x19)))
(define-fun x29 ((x19 Int)) Int (ite (= x19 128) x697 (x395 x19)))
(define-fun x325 ((x19 Int)) Int (ite (and (<= 160 x19) (< x19 (+ x697 160))) (x1080 (+ x485 (- x19 160))) (x29 x19)))
(define-fun x588 ((x19 Int)) Int (ite (= x19 x965) 0 (x325 x19)))
(define-fun x1071 ((x19 Int)) Int (ite (= x19 x444) x494 (x588 x19)))
(define-fun x899 ((x19 Int)) Int (ite (and (<= x237 x19) (> (+ x494 x237) x19)) (x1080 (+ (- x19 x237) x719)) (x1071 x19)))
(define-fun x725 ((x19 Int)) Int (ite (= x19 x1002) 0 (x899 x19)))
(define-fun x857 ((x19 Int)) Int (ite (= x883 x19) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x725 x19)))
(define-fun x691 ((x19 Int)) Int (ite (= x19 x930) 160 (x857 x19)))
(define-fun x938 ((x19 Int)) Int (ite (= x19 x383) x910 (x691 x19)))
(define-fun x4 ((x19 Int)) Int (ite (= x952 x19) x274 (x938 x19)))
(define-fun x286 ((x19 Int)) Int (ite (= x66 x19) x555 (x4 x19)))
(define-fun x179 ((x19 Int)) Int (ite (= x117 x19) x1019 (x286 x19)))
(define-fun x754 ((x19 Int)) Int (ite (= x19 x451) x353 (x179 x19)))
(define-fun x875 ((x19 Int)) Int (ite x43 (x179 x19) (ite x1065 (x286 x19) (ite x564 (x4 x19) (ite x1053 (x938 x19) (x754 x19))))))
(define-fun x700 ((x19 Int)) Int (ite (= x995 x19) 0 (x875 x19)))
(define-fun x627 ((x19 Int)) Int (ite x116 (x875 x19) (x700 x19)))
(define-fun x867 ((x19 Int)) Int (ite (= x435 x19) x460 (x627 x19)))
(define-fun x830 ((x19 Int)) Int (ite (= x19 x1134) x152 (x867 x19)))
(define-fun x1076 ((x19 Int)) Int (ite (= x19 x476) x176 (x830 x19)))
(define-fun x1137 ((x19 Int)) Int (ite (= x109 x19) x1010 (x1076 x19)))
(define-fun x908 ((x19 Int)) Int (ite (= x19 x60) x313 (x1137 x19)))
(define-fun x174 ((x19 Int)) Int (ite (= x19 x1063) x386 (x908 x19)))
(define-fun x622 ((x19 Int)) Int (ite x13 (x908 x19) (ite x484 (x1137 x19) (ite x456 (x1076 x19) (ite x217 (x830 x19) (x174 x19))))))
(define-fun x63 ((x19 Int)) Int (ite (= x19 x305) 0 (x622 x19)))
(define-fun x382 ((x19 Int)) Int (ite x659 (x622 x19) (x63 x19)))
(define-fun x601 ((x19 Int)) Int (ite (= x19 x684) x28 (x382 x19)))
(define-fun x522 ((x19 Int)) Int (ite (= x19 x1) x562 (x601 x19)))
(define-fun x820 ((x19 Int)) Int (ite (= x19 x34) x81 (x522 x19)))
(define-fun x747 ((x19 Int)) Int (ite (= x505 x19) x331 (x820 x19)))
(define-fun x129 ((x19 Int)) Int (ite (= x19 x563) x416 (x747 x19)))
(define-fun x403 ((x19 Int)) Int (ite (= x19 x551) x354 (x129 x19)))
(define-fun x225 ((x19 Int)) Int (ite (= x19 x93) x853 (x403 x19)))
(define-fun x1084 ((x19 Int)) Int (ite x342 (x403 x19) (ite x433 (x129 x19) (ite x944 (x747 x19) (ite x46 (x820 x19) (x225 x19))))))
(define-fun x744 ((x19 Int)) Int (ite (= x19 x767) x652 (x1084 x19)))
(define-fun x1055 ((x19 Int)) Int (ite (= x769 x19) x202 (x744 x19)))
(define-fun x70 ((x19 Int)) Int (ite (= x776 x19) x360 (x1055 x19)))
(define-fun x646 ((x19 Int)) Int (ite (= x19 x645) x1025 (x70 x19)))
(define-fun x778 ((x19 Int)) Int (ite (and (>= x19 x265) (< x19 (+ x1025 x265))) (x1080 (+ x375 (- x19 x265))) (x646 x19)))
(define-fun x673 ((x19 Int)) Int (ite (= x19 x61) 0 (x778 x19)))
(define-fun x407 ((x19 Int)) Int (ite x153 (x1055 x19) (x673 x19)))
(define-fun x59 ((x19 Int)) Int (ite (= x19 x883) x239 (x407 x19)))
(define-fun x842 ((x19 Int)) Int (ite x933 (x407 x19) (ite x940 (x59 x19) (x407 x19))))
(define-fun x829 ((x19 Int)) Int (ite (= x19 x16) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x842 x19)))
(define-fun x849 ((x19 Int)) Int (ite (and (< x19 (+ 32 x16)) (<= x16 x19)) (x1022 (+ 0 (- x19 x16))) (x829 x19)))
(define-fun x218 ((x19 Int)) Int (ite (and (< x19 (+ (x723 (- x633 196)) 196)) (>= x19 196)) (x407 (+ (x897 (+ 196 x883)) (- x19 196))) (x961 x19)))
(define-fun x705 ((x19 Int)) Int (ite (= 128 x19) x1036 (x1017 x19)))
(define-fun x879 ((x19 Int)) Int (ite (and (< x19 (+ 160 x1036)) (<= 160 x19)) (x218 (+ (- x19 160) 196)) (x705 x19)))
(define-fun x249 ((x19 Int)) Int (ite (= x631 x19) 0 (x879 x19)))
(define-fun x696 ((x19 Int)) Int (ite (= x928 x19) x737 (x249 x19)))
(define-fun x569 ((x19 Int)) Int (ite (and (> (+ x737 x968) x19) (<= x968 x19)) (x218 (+ (- x19 x968) x30)) (x696 x19)))
(define-fun x452 ((x19 Int)) Int (ite (= x660 x19) 0 (x569 x19)))
(define-fun x640 ((x19 Int)) Int (ite (= x19 x224) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x452 x19)))
(define-fun x664 ((x19 Int)) Int (ite (= x19 x224) x291 (x640 x19)))
(define-fun x387 ((x19 x720)) Int (ite (= (x319 x132) x19) x318 (x975 x19)))
(define-fun x804 ((x19 x720)) Int (ite (= (x319 x192) x19) x233 (x387 x19)))
(define-fun x690 ((x19 Int)) Int (ite (and (<= x712 x19) (< x19 (+ 0 x712))) (x502 (+ 0 (- x19 x712))) (x664 x19)))
(define-fun x900 ((x19 Int)) Int (ite x927 (x664 x19) (ite x266 (x690 x19) (x664 x19))))
(define-fun x757 ((x19 Int)) Int (ite x927 (x101 x19) (x502 x19)))
(define-fun x64 ((x19 Int)) Int (ite (= x19 x712) x141 (x900 x19)))
(define-fun x151 ((x19 Int)) Int (ite (and (> (+ x334 x141) x19) (<= x334 x19)) (x757 (+ (- x19 x334) 0)) (x64 x19)))
(define-fun x106 ((x19 x720)) Int (ite x266 (x862 x19) (x804 x19)))
(define-fun x945 ((x19 x720)) Int (ite (= (x319 x192) x19) x579 (x106 x19)))
(define-fun x186 ((x19 x720)) Int (ite (= (x319 x132) x19) x312 (x945 x19)))
(define-fun x1141 ((x19 x720)) Int (ite x584 (x975 x19) (ite x927 (x975 x19) (ite x317 (x106 x19) (x186 x19)))))
(define-fun x366 ((x19 Int)) Int (ite x584 (x452 x19) (ite x398 (x900 x19) (x151 x19))))
(define-fun x958 ((x19 x720)) Int (ite (= (x319 x132) x19) x803 (x1141 x19)))
(define-fun x663 ((x19 x720)) Int (ite (= (x319 x205) x19) x308 (x958 x19)))
(define-fun x1060 ((x19 x720)) Int (ite (= (x319 x205) x19) x765 (x663 x19)))
(define-fun x25 ((x19 x720)) Int (ite (= x19 (x319 x132)) x685 (x1060 x19)))
(define-fun x743 ((x19 Int)) Int (ite (= x19 x554) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x366 x19)))
(define-fun x1029 ((x19 Int)) Int (ite (= x19 x541) 192 (x743 x19)))
(define-fun x916 ((x19 Int)) Int (ite (= x497 x19) x763 (x1029 x19)))
(define-fun x576 ((x19 Int)) Int (ite (= x272 x19) x442 (x916 x19)))
(define-fun x347 ((x19 Int)) Int (ite (= x606 x19) x987 (x576 x19)))
(define-fun x637 ((x19 Int)) Int (ite (= x19 x558) x200 (x347 x19)))
(define-fun x892 ((x19 x720)) Int (ite x409 (x184 x19) (x25 x19)))
(define-fun x871 ((x19 x720)) Int (ite x589 (x892 x19) (ite x296 (x1075 x19) (x892 x19))))
(define-fun x310 ((x19 Int)) Int (ite (= x682 x19) x120 (x637 x19)))
(define-fun x285 ((x19 Int)) Int (ite x464 (x637 x19) (ite x1003 (x347 x19) (ite x11 (x576 x19) (ite x271 (x916 x19) (x310 x19))))))
(define-fun x448 ((x19 Int)) Int (ite (= x905 x19) 0 (x285 x19)))
(define-fun x882 ((x19 Int)) Int (ite x756 (x285 x19) (x448 x19)))
(define-fun x48 ((x19 Int)) Int (ite (= x19 x76) x748 (x882 x19)))
(define-fun x954 ((x19 Int)) Int (ite (= x19 x813) x112 (x48 x19)))
(define-fun x797 ((x19 Int)) Int (ite (= x542 x19) x1008 (x954 x19)))
(define-fun x1000 ((x19 Int)) Int (ite (= x816 x19) x414 (x797 x19)))
(define-fun x630 ((x19 Int)) Int (ite (= x1045 x19) x782 (x1000 x19)))
(define-fun x716 ((x19 Int)) Int (ite (= x605 x19) x870 (x630 x19)))
(define-fun x1066 ((x19 Int)) Int (ite x885 (x630 x19) (ite x394 (x1000 x19) (ite x981 (x797 x19) (ite x372 (x954 x19) (x716 x19))))))
(define-fun x399 ((x19 Int)) Int (ite (= x19 x843) 0 (x1066 x19)))
(define-fun x730 ((x19 Int)) Int (ite x302 (x1066 x19) (x399 x19)))
(define-fun x980 ((x19 Int)) Int (ite (= x359 x19) x457 (x730 x19)))
(define-fun x687 ((x19 Int)) Int (ite (= x19 x425) x1007 (x980 x19)))
(define-fun x156 ((x19 Int)) Int (ite (= x436 x19) x675 (x687 x19)))
(define-fun x1061 ((x19 Int)) Int (ite (= x19 x823) x56 (x156 x19)))
(define-fun x582 ((x19 Int)) Int (ite (and (< x19 (+ x554 0)) (<= x554 x19)) (x996 (+ 0 (- x19 x554))) (x1061 x19)))
(define-fun x840 ((x19 Int)) Int (ite x409 (x582 x19) (x1061 x19)))
(define-fun x832 ((x19 Int)) Int (ite (= x365 x19) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x840 x19)))
(define-fun x881 ((x19 Int)) Int (ite (= x19 x142) x1014 (x832 x19)))
(define-fun x868 ((x19 Int)) Int (ite (= x979 x19) x1088 (x881 x19)))
(define-fun x393 ((x19 Int)) Int (ite (= x267 x19) x1052 (x868 x19)))
(define-fun x786 ((x19 Int)) Int (ite (= x439 x19) x661 (x393 x19)))
(define-fun x731 ((x19 Int)) Int (ite x445 (x393 x19) (ite x278 (x868 x19) (ite x32 (x881 x19) (ite x613 (x832 x19) (x786 x19))))))
(define-fun x698 ((x19 Int)) Int (ite (= x19 x163) 0 (x731 x19)))
(define-fun x316 ((x19 Int)) Int (ite x651 (x731 x19) (x698 x19)))
(define-fun x865 ((x19 Int)) Int (ite (= x554 x19) x912 (x316 x19)))
(define-fun x367 ((x19 Int)) Int (ite (= x772 x19) x534 (x865 x19)))
(define-fun x872 ((x19 Int)) Int (ite (= x31 x19) x427 (x367 x19)))
(define-fun x279 ((x19 Int)) Int (ite (= x19 x273) x92 (x872 x19)))
(define-fun x321 ((x19 Int)) Int (ite (= x856 x19) x306 (x279 x19)))
(define-fun x718 ((x19 Int)) Int (ite (= x1123 x19) x241 (x321 x19)))
(define-fun x906 ((x19 Int)) Int (ite (= x1070 x19) x858 (x718 x19)))
(define-fun x515 ((x19 Int)) Int (ite x221 (x718 x19) (ite x891 (x321 x19) (ite x964 (x279 x19) (ite x431 (x872 x19) (x906 x19))))))
(define-fun x370 ((x19 Int)) Int (ite (= x222 x19) 0 (x515 x19)))
(define-fun x777 ((x19 Int)) Int (ite x760 (x515 x19) (x370 x19)))
(define-fun x517 ((x19 Int)) Int (ite (= x728 x19) x1064 (x777 x19)))
(define-fun x1124 ((x19 Int)) Int (ite x1106 (x849 x19) (x829 x19)))
(define-fun x288 ((x19 Int)) Int (ite (= x19 x108) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x1124 x19)))
(define-fun x6 ((x19 Int)) Int (ite (and (< x19 (+ 32 x108)) (>= x19 x108)) (x624 (+ 0 (- x19 x108))) (x288 x19)))
(define-fun x621 ((x19 Int)) Int (ite x1016 (x6 x19) (x288 x19)))
(define-fun x568 ((x19 Int)) Int (ite (= x19 x1012) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x621 x19)))
(define-fun x333 ((x19 Int)) Int (ite (and (<= x1012 x19) (< x19 (+ 32 x1012))) (x846 (+ 0 (- x19 x1012))) (x568 x19)))
(define-fun x323 ((x19 Int)) Int (ite x1093 (x333 x19) (x568 x19)))
(define-fun x745 ((x19 Int)) Int (ite (= x19 x834) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x323 x19)))
(define-fun x955 ((x19 Int)) Int (ite (and (>= x19 x834) (> (+ 32 x834) x19)) (x970 (+ 0 (- x19 x834))) (x745 x19)))
(define-fun x918 ((x19 Int)) Int (ite x726 (x955 x19) (x745 x19)))
(define-fun x1032 ((x19 Int)) Int (ite (= x19 x339) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x918 x19)))
(define-fun x422 ((x19 Int)) Int (ite (and (> (+ x339 32) x19) (<= x339 x19)) (x368 (+ 0 (- x19 x339))) (x1032 x19)))
(define-fun x924 ((x19 Int)) Int (ite x115 (x422 x19) (x1032 x19)))
(define-fun x143 ((x253 Int)) Bool (=> (and (not (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 x253)) (not (= 113209349505197351213641468582317386984598294884268236158119619414039440916480 x253)) (not (= x253 102499615646744134772650717477688572466918151731817230690449879178893085114368)) (not (= x253 4294967296)) (not (= x253 1461501637330902918203684832716283019655932542976)) (not (= 2005408114 x253)) (not (= 1553423035 x253)) (not (= 2220280665 x253)) (not (= 79228162514264337593543950335 x253)) (not (= x253 1845979623)) (not (= x253 1461501637330902918203684832716283019655932542975)) (not (= x253 1901074598)) (not (= x253 75068239)) (not (= x253 3084411429)) (not (= x253 54065695799311150304516525983669583430195215316752708547810291668471328538624)) (not (= 2376452955 x253)) (not (= x253 818759841)) (not (= x253 18446744073709551615)) (not (= 3705713892 x253)) (not (= x253 64069044923792539370177021244577383457373632460708312080110356237917649633280)) (not (= x253 1245659826)) (not (= 4076725131 x253)) (not (= 1262878978 x253)) (not (= x253 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x253 22445611572322667099362401052093617030957452505749565894135597532943828910080)) (not (= 4199168155 x253)) (not (= 2329570063 x253)) (not (= x253 832554005)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x253)) (< 10000 x253) (not (= 2249206060 x253)) (not (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 x253)) (not (= 3572374928 x253)) (not (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 x253))) (not ((_ is x51) (x319 x253)))))
(assert (= 0 (x101 (- x12 x334))))
(assert (x154 x1117))
(assert (x566 x694))
(assert (x154 x991))
(assert (x154 x485))
(assert (x154 x1039))
(assert (x154 x968))
(assert (x154 x111))
(assert (= (and (not x982) x155) x1003))
(assert (x154 x428))
(assert (x154 x34))
(assert (x154 x854))
(assert (= 0 (x101 (- x242 x334))))
(assert (x154 x1085))
(assert (x154 x1064))
(assert (x154 x883))
(assert (= (and (not x770) x293) x1065))
(assert (x220 x1139))
(assert (x154 x124))
(assert (x154 x1007))
(assert (x220 x529))
(assert (x154 x338))
(assert (= 0 (x395 (+ (- x337 196) (x897 (+ 196 x883))))))
(assert (x154 x17))
(assert (x154 x85))
(assert (= x964 (and x326 (not x380))))
(assert (x154 x661))
(assert (x154 x498))
(assert (= 0 (x101 (- 128 x334))))
(assert (x154 x775))
(assert (x154 x437))
(assert (x154 x76))
(assert (= (and x423 x983) x1093))
(assert (= 18446744073709551615 (x1103 (x51 18446744073709551615))))
(assert (x154 x457))
(assert (x154 x537))
(assert (= (and x1018 x787) x280))
(assert (x154 x1010))
(assert (x566 x761))
(assert (= 1461501637330902918203684832716283019655932542976 (x1103 (x51 1461501637330902918203684832716283019655932542976))))
(assert (= (and x976 (not x848)) x464))
(assert (x154 x236))
(assert (= (and x594 (not x678)) x342))
(assert (x154 x202))
(assert (x154 x441))
(assert (x566 x828))
(assert (= (and x524 (not x139)) x379))
(assert (x154 x761))
(assert (x154 x555))
(assert (= x944 (and (not x1026) x519)))
(assert (= (x1103 (x51 54065695799311150304516525983669583430195215316752708547810291668471328538624)) 54065695799311150304516525983669583430195215316752708547810291668471328538624))
(assert (= x1079 (and x914 x598)))
(assert (= (x51 102499615646744134772650717477688572466918151731817230690449879178893085114368) (x319 102499615646744134772650717477688572466918151731817230690449879178893085114368)))
(assert (x154 x1001))
(assert (x154 x140))
(assert (x154 x477))
(assert (x154 x481))
(assert (= (x319 2376452955) (x51 2376452955)))
(assert (x154 x374))
(assert (= (x319 4199168155) (x51 4199168155)))
(assert (x154 x170))
(assert (= x889 (and x593 x611)))
(assert (x154 x68))
(assert (x154 x525))
(assert (x154 x572))
(assert (x154 x239))
(assert (= 0 (x395 (+ (x897 (+ 196 x883)) (- x480 196)))))
(assert (x154 x672))
(assert (x154 x825))
(assert (x154 x1036))
(assert (x154 x1023))
(assert (= x136 (and x130 (not x110))))
(assert (= x1030 (or x708 x153)))
(assert (= 1461501637330902918203684832716283019655932542975 (x1103 (x51 1461501637330902918203684832716283019655932542975))))
(assert (x154 x371))
(assert (= 3572374928 (x1103 (x51 3572374928))))
(assert (= (and x920 x14) x831))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x1103 (x51 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x220 x683))
(assert (= x410 (and x329 (not x508))))
(assert (x154 x523))
(assert (= (x319 18446744073709551615) (x51 18446744073709551615)))
(assert (= x153 (and x344 (not x168))))
(assert (x154 x28))
(assert (= x659 (and x52 (not x666))))
(assert (= (and x36 x977) x594))
(assert (x154 x373))
(assert (x154 x917))
(assert (= x355 (and x838 x877)))
(assert (x154 x173))
(assert (x154 x511))
(assert (x143 x192))
(assert (= (and x449 x755) x155))
(assert (= (x51 3572374928) (x319 3572374928)))
(assert (x143 x942))
(assert (x154 x231))
(assert (= 832554005 (x1103 (x51 832554005))))
(assert (= x281 (or x280 (and x787 (not x1018)))))
(assert (x154 x1092))
(assert (= x855 (and (not x282) x703)))
(assert (= (and x670 x1047) x1112))
(assert (x154 x402))
(assert (= 0 (x395 x158)))
(assert (= x936 (or x613 x32 x24 x278 x445)))
(assert (= (x1103 (x319 x132)) x132))
(assert (x154 x629))
(assert (x154 x267))
(assert (x154 x643))
(assert (x143 x959))
(assert (= 0 (x395 (+ (- (+ x30 (- 128 x968)) 196) (x897 (+ x883 196))))))
(assert (x566 x493))
(assert (x154 x58))
(assert (x154 x577))
(assert (x154 x685))
(assert (not x527))
(assert (x154 x95))
(assert (x154 x556))
(assert (x154 x1138))
(assert (x154 x639))
(assert (= x959 (x1103 (x319 x959))))
(assert (= x248 (and x831 x26)))
(assert (x154 x1081))
(assert (x154 x729))
(assert (= 0 (x395 192)))
(assert (= (x1017 160) 0))
(assert (x154 x839))
(assert (x154 x482))
(assert (= (=> (and (and (= x983 (> x799 0)) (= (x897 (+ x348 31)) x529) (not (= 0 x948)) (= x171 (x621 x108)) (= x421 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x529)) (not (or (and (> 32 x348) (= (<= x348 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x348 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x897 (+ x108 x421)) x1012) (>= 1461501637330902918203684832716283019655932542975 x171)) (or (and (not x983) (= x799 x392)) (and x983 (and (> 4294967296 x402) (= x392 1))))) x161) x72))
(assert (= x615 (and x379 (not x1021))))
(assert (= 0 (x395 (+ (- (+ (- x869 x968) x30) 196) (x897 (+ 196 x883))))))
(assert (=> (<= x20 10000) (= (x319 x20) (x51 x20))))
(assert (= x161 (=> (and (or (and x23 (and (= x260 1) (< x320 4294967296))) (and (not x23) (= x260 x486))) (and (not (or (and (> 32 x402) (= (<= x402 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x402))) (= x834 (x897 (+ x894 x1012))) (= x314 (x323 x1012)) (= (x897 (+ 31 x402)) x134) (<= x314 1461501637330902918203684832716283019655932542975) (not (= x392 0)) (= (> x486 0) x23) (= x894 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x134)))) x418)))
(assert (x154 x570))
(assert (x154 x270))
(assert (x154 x125))
(assert (= (and (not x1004) x443) x217))
(assert (x154 x230))
(assert (x154 x178))
(assert (= (or x357 x221 x891 x964 x431) x99))
(assert (x154 x1078))
(assert (= x1015 (=> (and (or (and x103 (= (x897 (+ x570 x910)) x995)) (not x103)) (= (< x910 x707) x103)) x759)))
(assert (= (=> (and (or (not x194) x194) (= (< x82 x1048) x194)) x198) x878))
(assert (x154 x250))
(assert (= x1096 (and x713 (not x37))))
(assert (x154 x12))
(assert (x154 x435))
(assert (= x758 (and x1074 (not x429))))
(assert (= (x1103 (x51 2220280665)) 2220280665))
(assert (= (and x1074 x429) x328))
(assert (x154 x243))
(assert (x154 x987))
(assert (= x1100 (=> (= x632 (not (< 128 x82))) (and (=> (= x1048 128) x878) x632))))
(assert (x154 x1110))
(assert (x154 x990))
(assert (x154 x163))
(assert (x154 x260))
(assert (x154 x505))
(assert (= x32 (and x207 (not x94))))
(assert (= (and x855 (not x521)) x751))
(assert (= x768 (and x97 (not x779))))
(assert (= (or x659 x1069) x165))
(assert (x154 x375))
(assert (= (or x300 x217 x484 x456 x13) x52))
(assert (x154 x337))
(assert (x154 x105))
(assert (x154 x360))
(assert (= (x51 3084411429) (x319 3084411429)))
(assert (x566 x1139))
(assert (= (x1103 (x51 2005408114)) 2005408114))
(assert (x154 x60))
(assert (= x740 (and x985 x401)))
(assert (x154 x446))
(assert (x154 x1107))
(assert (x154 x501))
(assert (x154 x504))
(assert (= 0 (x1017 x904)))
(assert (= (x101 (- 192 x334)) 0))
(assert (x154 x208))
(assert (x154 x158))
(assert (x154 x815))
(assert (x154 x31))
(assert (x154 x728))
(assert (= x1136 (and x496 x1099)))
(assert (x154 x1140))
(assert (x154 x335))
(assert (= (and x478 x297) x518))
(assert (= (or x296 x615) x787))
(assert (=> (<= x942 10000) (= (x51 x942) (x319 x942))))
(assert (x154 x773))
(assert (x154 x763))
(assert (x154 x56))
(assert (x154 x694))
(assert (x154 x122))
(assert (x154 x1014))
(assert (x154 x98))
(assert (= (x1103 (x51 2249206060)) 2249206060))
(assert (x154 x901))
(assert (x154 x82))
(assert (x154 x405))
(assert (x154 x926))
(assert (= (x395 (+ 96 (x897 (+ x883 196)))) 0))
(assert (x154 x814))
(assert (x154 x600))
(assert (x154 x272))
(assert (= (or (and (not x586) x526) x235) x341))
(assert (x154 x353))
(assert (x154 x925))
(assert (= x593 (and (not x469) x251)))
(assert (x154 x204))
(assert (x566 x381))
(assert (= (x1103 (x51 1262878978)) 1262878978))
(assert (x154 x680))
(assert (= x810 (and (not x194) x1105)))
(assert (x154 x414))
(assert (= (and x713 x37) x921))
(assert (x154 x1113))
(assert (x154 x904))
(assert (x154 x320))
(assert (= x473 (and x1096 x784)))
(assert (= (=> (and (= x351 (not (< 128 x112))) (= (x897 (+ x968 96)) x420) (= x605 (x897 (+ 96 x247))) (= (x630 x420) x870)) (and (=> (= x204 128) x866) x351)) x895))
(assert (= 0 (x101 (- x420 x334))))
(assert (x154 x384))
(assert (= 0 (x1017 x242)))
(assert (x154 x1073))
(assert (x154 x874))
(assert (x154 x618))
(assert (x154 x1002))
(assert (x154 x812))
(assert (= (and x356 x860) x932))
(assert (x154 x652))
(assert (= (x395 (+ (- (+ x30 (- x1128 x968)) 196) (x897 (+ x883 196)))) 0))
(assert (x154 x339))
(assert (= x322 (and x86 x89)))
(assert (x154 x737))
(assert (= (x1103 (x51 4739670319144124481003130557741556594755290868171975227769803894069435301888)) 4739670319144124481003130557741556594755290868171975227769803894069435301888))
(assert (= x148 (=> (and (= (not (> x910 128)) x90) (= (x897 (+ 96 x570)) x451) (= (x179 256) x353)) (and x90 (=> (= 128 x707) x1015)))))
(assert (x154 x623))
(assert (x154 x575))
(assert (x154 x604))
(assert (= x1053 (and (not x1047) x670)))
(assert (= x409 (and x39 x833)))
(assert (= x739 (or x641 x1106)))
(assert (x154 x205))
(assert (= (=> (= x973 (> x58 0)) (and (=> (not x973) x599) (=> (and x973 (= x10 (< 0 x58))) (and (=> (and (and (= x457 x805) (= x270 x675) (= x56 x1085) (= x1007 x847) (= x1091 0)) (not x10)) x183) (=> (and x10 (and (= x528 (= x428 x140)) (= x565 x581) (= x428 (x218 x565)) (= (x635 1461501637330902918203684832716283019655932542975 x428) x140))) (and (=> (and (and (= x1007 x847) (= x56 x1085) (= x805 x457) (= x270 x675) (= x1091 0)) (not x528)) x183) (=> (and x528 (= x44 (> x548 0))) (and (=> (and (not x44) (and (= x457 x805) (= 0 x1091) (= x1085 x56) (= x847 x1007) (= x270 x675))) x183) (=> (and (and (= x191 (x723 (- x199 x560))) (= x525 (x218 x988)) (= x560 x988) (= x240 (x723 (- x191 31))) (= x54 (or (and (> x525 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x240)) (and (= (<= x525 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x240 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x525 x240))))) x44) (and (=> (and (and (= x56 x1085) (= x805 x457) (= x675 x270) (= x1007 x847) (= x1091 0)) (not x54)) x183) (=> (and x54 (and (= (x218 x337) x672) (= x733 (< 18446744073709551615 x672)) (= (x897 (+ x525 x560)) x337))) (and (=> (and (and (= x56 x1085) (= x270 x675) (= x847 x1007) (= 0 x1091) (= x805 x457)) x733) x183) (=> (and (not x733) (and (= (or (and (= (<= x603 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x608 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x608 x603)) (and (<= x608 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x603 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x139) (= (x897 (+ x337 32)) x608) (= (x723 (- x199 x672)) x603))) (and (=> (and (and (= x270 x675) (= x805 x457) (= 0 x1091) (= x1007 x847) (= x1085 x56)) x139) x183) (=> (and (not x139) (and (= x1021 (< 0 x795)) (or (not x1021) (and x1021 (and (= (x892 (x319 x132)) x946) x490 x1111 (= x523 (x892 (x319 x428))) (= x490 (= x523 (x1075 (x319 x428)))) (= (>= (x1075 (x319 x132)) x946) x1111) (< x390 4294967296)))))) x1077))))))))))))))) x198))
(assert (x154 x377))
(assert (= x967 (and x57 x822)))
(assert (= (and x145 x391) x357))
(assert (x154 x654))
(assert (= (x51 75068239) (x319 75068239)))
(assert (x154 x1006))
(assert (= (or x706 x589) x226))
(assert (x154 x780))
(assert (x154 x959))
(assert (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x1103 (x51 62805084655870755976952745400290271510621614971557940054860603637793562820608))))
(assert (x154 x468))
(assert (= (x319 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x51 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x154 x311))
(assert (= x972 (and x739 (not x741))))
(assert (= (and x99 x665) x378))
(assert (= x192 (x1103 (x319 x192))))
(assert (x154 x159))
(assert (= x445 (and (not x1011) x864)))
(assert (x154 x1087))
(assert (x154 x548))
(assert (x154 x112))
(assert (= x1049 (and x986 x123)))
(assert (= (and (not x973) x1043) x589))
(assert (x154 x126))
(assert (= 0 (x395 (+ (- (+ x30 (- 256 x968)) 196) (x897 (+ 196 x883))))))
(assert (x154 x1040))
(assert (x154 x237))
(assert (x154 x808))
(assert (x154 x533))
(assert (= x277 (=> (and (and (= (x897 (+ x252 x883)) x16) (not (or (and (< x880 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x880) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x880))) (= (> x346 0) x135) (not (= 0 x626)) (= x252 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x381)) (= (x897 (+ 31 x880)) x381) (<= x1102 1461501637330902918203684832716283019655932542975) (= x1102 (x842 x883))) (or (and (= x695 x346) (not x135)) (and x135 (and (= 1 x695) (> 4294967296 x262))))) x788)))
(assert (x143 x205))
(assert (x154 x313))
(assert (= x1099 (and x753 (not x978))))
(assert (x154 x187))
(assert (= (and x149 x889) x616))
(assert (x154 x1102))
(assert (x220 x1006))
(assert (x154 x196))
(assert (= x67 (=> (and (or (not x602) (and (= x905 (x897 (+ x763 x796))) x602)) (= x602 (> x374 x763))) x516)))
(assert (x154 x580))
(assert (x154 x688))
(assert (x154 x1041))
(assert (x154 x1108))
(assert (x154 x835))
(assert (= x462 (and x836 x658)))
(assert (x154 x792))
(assert (x154 x486))
(assert (= (x101 (- 160 x334)) 0))
(assert (x154 x451))
(assert (x154 x216))
(assert (x154 x853))
(assert (= (x51 64069044923792539370177021244577383457373632460708312080110356237917649633280) (x319 64069044923792539370177021244577383457373632460708312080110356237917649633280)))
(assert (= (=> (and (= x1085 x1104) (= x626 x1091) (= x805 x287) (= x270 x358) (= x118 x847) (= x880 x951)) x617) x183))
(assert (=> (<= x205 10000) (= (x51 x205) (x319 x205))))
(assert (= 0 (x101 (- x1128 x334))))
(assert (x143 x428))
(assert (= x330 (and x88 x1126)))
(assert (x154 x750))
(assert (= (x319 1461501637330902918203684832716283019655932542975) (x51 1461501637330902918203684832716283019655932542975)))
(assert (x154 x692))
(assert (x154 x625))
(assert (= (=> (and (= x467 x460) (> 2220280665 x336) (= x199 x633) (= x231 x434) (= x336 2005408114) (not (= x336 1901074598)) (= x991 x652) (>= x199 292) (= x633 (x723 (- x78 x883))) (= x172 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x764)) (< x764 160)) (> x764 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x336 1262878978)) (< 0 x500) (not (> 4 x199)) (not (> 1245659826 x336)) (= x764 (x723 (- x199 4))) (= x500 (x80 (x319 x132))) (= x113 x562) (not (= 1845979623 x336)) (not (= 1245659826 x336)) x583 (not (= x336 1553423035)) (= x583 (= (x961 164) x910)) (= x1086 54065695799311150304516525983669583430195215316752708547810291668471328538624)) (and (=> (and (not x172) (= (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) true) (< 195 x199)) x219)) (and (=> (and (not x219) (and (= 0 x1091) (= x270 x675) (= x847 x1007) (= x1085 x56) (= x805 x457))) x183) (=> (and (and (= (x218 164) x1036) (= x1062 (> x1036 18446744073709551615))) x219) (and (=> (and x1062 (and (= x270 x675) (= x457 x805) (= x847 x1007) (= x56 x1085) (= 0 x1091))) x183) (=> (and (not x1062) (and (= (< x928 128) x1042) (= x761 (x897 (+ x1036 31))) (= x679 (< 18446744073709551615 x928)) (= x1001 (x897 (+ x714 32))) (= x404 (x897 (+ x1001 31))) (= (= 0 (ite x466 1 0)) x14) (= (or x679 x1042) x466) (= x714 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x761)) (= (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x404) x926) (= x928 (x897 (+ x926 128))))) (and (=> (and (not x14) (and (= x270 x675) (= x457 x805) (= x847 x1007) (= x1085 x56) (= 0 x1091))) x183) (=> (and (and (= x26 (> x721 x199)) (= x721 (x897 (+ x1036 196)))) x14) (and (=> (and x26 (and (= 0 x1091) (= x457 x805) (= x56 x1085) (= x1007 x847) (= x675 x270))) x183) (=> (and (not x26) (and (= (x897 (+ 160 x1036)) x631) (= x282 (> x460 18446744073709551615)))) (and (=> (and x282 (and (= x1007 x847) (= x270 x675) (= x56 x1085) (= x1091 0) (= x805 x457))) x183) (=> (and (and (= (x897 (+ x131 31)) x766) (= (or (and (< x766 x199) (= (<= x766 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x766))) x521) (= (x897 (+ 4 x467)) x131)) (not x282)) (and (=> (and x521 (and (= x737 (x218 x131)) (= (x897 (+ x131 32)) x30) (= x1126 (> x737 18446744073709551615)))) (and (=> (and (and (= x270 x675) (= 0 x1091) (= x457 x805) (= x1007 x847) (= x56 x1085)) x1126) x183) (=> (and (and (= x886 (< x224 x928)) (= (> x224 18446744073709551615) x656) (= x669 (x897 (+ 32 x350))) (= (x897 (+ x1092 x928)) x224) (= (or x886 x656) x934) (= (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x683) x350) (= x683 (x897 (+ 31 x737))) (= x1139 (x897 (+ 31 x669))) (= x1092 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1139)) (= x779 (= (ite x934 1 0) 0))) (not x1126)) (and (=> (and (and (= (x897 (+ 32 x928)) x968) (= x107 (x897 (+ x30 x737))) (= x877 (< x199 x107))) x779) (and (=> (and (not x877) (and (= x469 (< 18446744073709551615 x562)) (= (x897 (+ x968 x737)) x660))) (and (=> (and x469 (and (= x270 x675) (= x457 x805) (= x1085 x56) (= 0 x1091) (= x847 x1007))) x183) (=> (and (not x469) (and (= x715 (x897 (+ x701 31))) (= (or (and (> x715 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199)) (and (< x715 x199) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) (<= x715 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x611) (= (x897 (+ x113 4)) x701))) (and (=> (and (and (= 0 x1091) (= x805 x457) (= x1085 x56) (= x270 x675) (= x847 x1007)) (not x611)) x183) (=> (and (and (= (> x58 18446744073709551615) x149) (= x58 (x218 x701))) x611) (and (=> (and x149 (and (= x457 x805) (= x847 x1007) (= 0 x1091) (= x675 x270) (= x1085 x56))) x183) (=> (and (not x149) (and (= x956 (mod (* 32 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x897 (+ x581 x956)) x230) (= x581 (x897 (+ x701 32))) (= (> x230 x199) x37))) (and (=> (and (= (< 18446744073709551615 x652) x784) (not x37)) (and (=> (and (not x784) (and (= (x897 (+ 4 x991)) x480) (= x898 (or (and (= (<= x971 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x971 x199)) (and (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x971)))) (= x971 (x897 (+ 31 x480))))) (and (=> (and (and (= (x218 x480) x548) (= x978 (< 18446744073709551615 x548))) x898) (and (=> (and (and (= x1091 0) (= x457 x805) (= x56 x1085) (= x675 x270) (= x1007 x847)) x978) x183) (=> (and (not x978) (and (= (x897 (+ x560 x567)) x1034) (= x496 (< x199 x1034)) (= x560 (x897 (+ x480 32))) (= (mod (* 32 x548) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x567))) (and (=> (and (and (= 0 x1091) (= x1007 x847) (= x270 x675) (= x1085 x56) (= x805 x457)) x496) x183) (=> (and (and (= (= 0 x636) x245) (<= x636 255) (< x636 256) (>= x636 0)) (not x496)) (and (=> (and (and (= x1091 0) (= x56 x1085) (= x675 x270) (= x847 x1007) (= x457 x805)) (not x245)) x183) (=> (and (and (= (> x481 0) x1035) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x481) (<= 0 x481)) x245) (and (=> (and x1035 (and (<= x481 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x481 0) x989) (>= x481 0))) (and (=> (and (and (= x1091 0) (= x457 x805) (= x847 x1007) (= x1085 x56) (= x675 x270)) (not x989)) x183) (=> (and x989 (and (<= 0 x291) (= x1081 4) (< x291 1461501637330902918203684832716283019655932542976) (= (= x193 x111) x228) (not (= x21 2329570063)) (not (= 2249206060 x21)) (= x712 (x897 (+ x224 32))) (not (< x126 4)) (= x111 (x635 1461501637330902918203684832716283019655932542975 x193)) (= x21 2376452955) (= x193 (x664 x224)) (= x126 x1081) (= x943 64069044923792539370177021244577383457373632460708312080110356237917649633280) (= x126 4) (not (> 2220280665 x21)) (not (= 2220280665 x21)) (> 3084411429 x21) (> x413 0) (= x413 (x80 (x319 x132))) (>= 1461501637330902918203684832716283019655932542975 x291))) (and (=> (and x228 (and (= 0 x1107) (= x192 (x635 1461501637330902918203684832716283019655932542975 x193)) (= (and (< (+ x537 x1107) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x1041 0)) x1009) (= (x975 (x319 x192)) x537) (= x1041 (x975 (x319 x132))))) (and (=> (and (and (= 0 x510) (= x141 0)) (not x1009)) x1046) (=> (and (and (and (= x592 (x975 (x319 x132))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1107 x295)) (= x295 x233) (= x592 x318) (= x295 (x387 (x319 x192))) (= x15 (> x835 0))) (or (not x15) (and x15 (and (= x962 (= x170 (x862 (x319 x192)))) (= (>= (x862 (x319 x132)) x826) x1068) (> 4294967296 x180) (= x170 (x804 (x319 x192))) (= x826 (x804 (x319 x132))) x962 x1068)))) x1009) x164))) (=> (and (not x228) (and (= x457 x805) (= x270 x675) (= x847 x1007) (= x1085 x56) (= x1091 0))) x183))))) (=> (and (= x224 x554) (not x1035)) x7))))))))) (=> (and (not x898) (and (= x56 x1085) (= x1091 0) (= x675 x270) (= x847 x1007) (= x805 x457))) x183))) (=> (and (and (= x847 x1007) (= x805 x457) (= x1085 x56) (= 0 x1091) (= x270 x675)) x784) x183))) (=> (and (and (= x675 x270) (= x1091 0) (= x1085 x56) (= x457 x805) (= x847 x1007)) x37) x183))))))))) (=> (and (and (= x675 x270) (= x1007 x847) (= x805 x457) (= x56 x1085) (= 0 x1091)) x877) x183))) (=> (and (and (= x56 x1085) (= x675 x270) (= x1007 x847) (= x457 x805) (= x1091 0)) (not x779)) x183))))) (=> (and (not x521) (and (= x847 x1007) (= x1085 x56) (= x675 x270) (= 0 x1091) (= x805 x457))) x183))))))))))))) (=> (and x172 (and (= x358 x675) (= x118 x1007) (= x1104 x56) (= x951 x880) (= 0 x626) (= x457 x287))) x617))) x33))
(assert (= (or x740 (and (not x985) x401)) x89))
(assert (=> (<= x311 10000) (= (x319 x311) (x51 x311))))
(assert (= (x101 (- 256 x334)) 0))
(assert (x154 x305))
(assert (x154 x343))
(assert (= (x51 2249206060) (x319 2249206060)))
(assert (= x838 (and x779 x97)))
(assert (x154 x896))
(assert (x154 x78))
(assert (= x866 (=> (and (= x598 (> x204 x112)) (or (not x598) (and x598 (= (x897 (+ x247 x112)) x843)))) x1082)))
(assert (= (x1103 (x319 x942)) x942))
(assert (x154 x805))
(assert (x154 x308))
(assert (= (x395 (+ (- x131 196) (x897 (+ x883 196)))) 0))
(assert (x154 x1048))
(assert (x154 x631))
(assert (x154 x262))
(assert (x154 x769))
(assert (x154 x479))
(assert (x154 x1012))
(assert (= (and x1112 (not x474)) x564))
(assert (x154 x176))
(assert (x154 x513))
(assert (= (and (not x818) x932) x981))
(assert (x154 x721))
(assert (x154 x919))
(assert (x154 x712))
(assert (x154 x910))
(assert (x154 x1109))
(assert (x154 x1090))
(assert (= (x1103 (x319 x428)) x428))
(assert (= x1133 (and x1096 (not x784))))
(assert (x154 x146))
(assert (x154 x471))
(assert (x154 x697))
(assert (x154 x180))
(assert (x154 x261))
(assert (x154 x529))
(assert (x154 x701))
(assert (= x164 (=> (and (= x438 (= x835 0)) (or (and x438 (and (= x312 x939) (= x141 x180) (= x835 x510) (= (x945 (x319 x132)) x939) (= x559 (x106 (x319 x192))) (= x579 x559) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1129 x939)) (= 0 x1129))) (and (and (= x510 x835) (= x141 x180)) (not x438)))) x1046)))
(assert (= x550 (or x969 x1056)))
(assert (x154 x348))
(assert (x154 x1131))
(assert (x154 x265))
(assert (= 0 (x101 (- x808 x334))))
(assert (x220 x195))
(assert (= x138 (and (not x802) x674)))
(assert (x154 x748))
(assert (= (x1017 x12) 0))
(assert (x154 x416))
(assert (= (x319 1845979623) (x51 1845979623)))
(assert (x154 x1020))
(assert (= 1901074598 (x1103 (x51 1901074598))))
(assert (x154 x487))
(assert (= x704 (and (not x23) x470)))
(assert (x220 x1023))
(assert (x154 x772))
(assert (x154 x644))
(assert (= x557 (and x128 x100)))
(assert (x154 x1025))
(assert (x154 x1088))
(assert (x154 x74))
(assert (= 0 (x395 (+ (- (+ (- x1128 160) 196) 196) (x897 (+ 196 x883))))))
(assert (x220 x761))
(assert (= (=> (= (< 0 x795) x475) (and (=> x475 x361) (=> (and (and (= x1091 0) (= x805 x457) (= x1085 x56) (= x1007 x847) (= x675 x270)) (not x475)) x183))) x269))
(assert (= 3705713892 (x1103 (x51 3705713892))))
(assert (x154 x971))
(assert (= (=> (and (= (x897 (+ x1025 x265)) x61) (= (x897 (+ x315 x265)) x873) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x780) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x98)) (and (= (<= x780 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x98 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x780 x98))) (not (> x1025 18446744073709551615)) (not (or (and (< x812 x375) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x812) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x375))) (and (> x812 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x375 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x812 (x723 (- x749 x1025))) (= (x897 (+ 31 x1025)) x709) (= (x897 (+ x49 x780)) x1095) (= (x723 (- x498 31)) x98) (= (x1080 x49) x780) (= (x897 (+ 32 x1095)) x375) (= (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x709) x315) (= (not (< 1 x202)) x806) (= x265 (x897 (+ 32 x645))) (= x498 (x723 (- x749 x49))) (= x1025 (x1080 x1095)) (= x360 x791)) (and x806 (=> (= x78 x873) x33))) x811))
(assert (x154 x50))
(assert (x154 x141))
(assert (x154 x1045))
(assert (x154 x794))
(assert (x154 x133))
(assert (x154 x1130))
(assert (x154 x531))
(assert (= (x395 (+ (- (+ 196 (- x258 160)) 196) (x897 (+ 196 x883)))) 0))
(assert (= x676 (or x760 x378)))
(assert (= x607 (and x1118 x10)))
(assert (x154 x682))
(assert (x154 x648))
(assert (x154 x1095))
(assert (= x440 (and (not x10) x1118)))
(assert (x876 x428))
(assert (x154 x1091))
(assert (x154 x1037))
(assert (x154 x590))
(assert (= x297 (or x138 x398)))
(assert (x154 x669))
(assert (x154 x636))
(assert (= x986 (and x966 x994)))
(assert (x154 x549))
(assert (x154 x303))
(assert (= (and (not x44) x727) x821))
(assert (= x115 (and x130 x110)))
(assert (= 0 (x395 x604)))
(assert (= x294 (and x40 (not x228))))
(assert (x154 x259))
(assert (x154 x620))
(assert (x154 x108))
(assert (= (x319 818759841) (x51 818759841)))
(assert (= x727 (and x528 x607)))
(assert (x154 x274))
(assert (= (=> (= (> x510 0) x478) (and (=> (and (and (= x1085 x56) (= x270 x675) (= x1091 0) (= x805 x457) (= x847 x1007)) (not x478)) x183) (=> (and (= x953 x554) x478) x7))) x185))
(assert (x154 x841))
(assert (x154 x581))
(assert (x154 x693))
(assert (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x1103 (x51 64069044923792539370177021244577383457373632460708312080110356237917649633280))))
(assert (= x223 (and x909 (not x245))))
(assert (= x671 (and x245 x909)))
(assert (x154 x843))
(assert (= x788 (=> (and (or (and x741 (and (= 1 x948) (< x348 4294967296))) (and (not x741) (= x948 x950))) (and (<= x3 1461501637330902918203684832716283019655932542975) (not (or (and (= true (<= x262 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x262)) (> x262 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x1124 x16) x3) (= (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1006) x384) (= x108 (x897 (+ x16 x384))) (not (= 0 x695)) (= (< 0 x950) x741) (= x1006 (x897 (+ x262 31))))) x72)))
(assert (= (=> (and (= (x897 (+ 32 x436)) x823) (= (x80 (x319 x20)) x717) (= x359 (x897 (+ 32 x76))) (= (= x717 0) x100) (= x436 (x897 (+ 32 x425))) (= (x897 (+ x359 32)) x425)) (and (=> (and x100 (and (= x457 x805) (= x270 x675) (= x1007 x847) (= x1085 x56) (= 0 x1091))) x183) (=> (and (not x100) (and (= (> x545 0) x833) (or (and (and (= x887 (x25 (x319 x20))) (= x216 (x25 (x319 x132))) (= (>= (x184 (x319 x132)) x216) x304) (= x229 (= (x184 (x319 x20)) x887)) (< x388 4294967296) x229 x304) x833) (not x833)))) x327))) x1082))
(assert (= 1245659826 (x1103 (x51 1245659826))))
(assert (x154 x232))
(assert (= (and x128 (not x100)) x39))
(assert (= x535 (or x266 x859)))
(assert (x154 x298))
(assert (x154 x596))
(assert (= (x319 1553423035) (x51 1553423035)))
(assert (x154 x813))
(assert (= (and x474 x1112) x293))
(assert (x154 x870))
(assert (x154 x956))
(assert (x154 x233))
(assert (= (x395 (+ (- (+ x30 (- 192 x968)) 196) (x897 (+ x883 196)))) 0))
(assert (= (x319 54065695799311150304516525983669583430195215316752708547810291668471328538624) (x51 54065695799311150304516525983669583430195215316752708547810291668471328538624)))
(assert (x143 x20))
(assert (x154 x191))
(assert (x154 x1019))
(assert (= (and x774 x711) x300))
(assert (x154 x795))
(assert (x154 x776))
(assert (= 0 (x395 (+ (x897 (+ 196 x883)) (- (+ (- x904 x968) x30) 196)))))
(assert (= (x1103 (x51 22445611572322667099362401052093617030957452505749565894135597532943828910080)) 22445611572322667099362401052093617030957452505749565894135597532943828910080))
(assert (x566 x709))
(assert (= x957 true))
(assert (x154 x290))
(assert (x154 x514))
(assert (= 0 (x101 (- 224 x334))))
(assert (x154 x383))
(assert (x220 x381))
(assert (x154 x222))
(assert (= (or x409 x742) x47))
(assert (x566 x1037))
(assert (= x755 (and x376 x758)))
(assert (x143 x132))
(assert (x566 x683))
(assert (x154 x943))
(assert (x154 x767))
(assert (= (x319 3705713892) (x51 3705713892)))
(assert (= (and x135 x341) x1106))
(assert (x220 x735))
(assert (x154 x823))
(assert (x154 x542))
(assert (= (and x44 x727) x1098))
(assert (x154 x252))
(assert (x154 x503))
(assert (x154 x354))
(assert (= 0 (x395 x73)))
(assert (= (and x23 x470) x726))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1103 (x51 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= 0 (x1017 224)))
(assert (x154 x1139))
(assert (x154 x2))
(assert (x154 x928))
(assert (= x264 (and x281 (not x408))))
(assert (x154 x950))
(assert (x154 x315))
(assert (x154 x212))
(assert (= (x51 4294967296) (x319 4294967296)))
(assert (x154 x192))
(assert (x154 x541))
(assert (= 0 (x395 (+ (x897 (+ x883 196)) (- (+ (- 160 x968) x30) 196)))))
(assert (= (and (not x989) x1089) x963))
(assert (=> (>= 10000 x132) (= (x319 x132) (x51 x132))))
(assert (x154 x83))
(assert (= x1105 (or x852 x91 x647 x532 x410)))
(assert (= (x319 62805084655870755976952745400290271510621614971557940054860603637793562820608) (x51 62805084655870755976952745400290271510621614971557940054860603637793562820608)))
(assert (x154 x257))
(assert (x154 x1058))
(assert (= x91 (and x147 x263)))
(assert (= (and (not x391) x145) x221))
(assert (= x450 (and x139 x524)))
(assert (x154 x816))
(assert (=> (<= x192 10000) (= (x319 x192) (x51 x192))))
(assert (x154 x171))
(assert (x220 1461501637330902918203684832716283019655932542975))
(assert (= (and x329 x508) x147))
(assert (= x431 (and x573 (not x947))))
(assert (x154 x929))
(assert (= x7 (=> (and (>= 255 x636) (= (= 0 x636) x610) (< x636 256) (<= 0 x636)) (and (=> (and (and (= x363 (= x571 x577)) (= x765 x724) (= 0 x650) (= (x663 (x319 x205)) x724) (= x814 (x53 (x319 x132))) (>= 1461501637330902918203684832716283019655932542975 x922) (= x685 (x1060 (x319 x132))) (> 1461501637330902918203684832716283019655932542976 x922) (= (x958 (x319 x205)) x308) (<= 0 x922) (= x803 x187) (< (+ x650 x685) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x363 (= (x635 1461501637330902918203684832716283019655932542975 x205) x345) (= x205 (x292 x132 x814)) (= x187 (x1141 (x319 x132))) (= x429 (= 0 x345)) (= x595 x571) (= x205 x577) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x308)) x610) (and (=> (and (and (<= 0 x457) (>= x56 0) (= (x1029 128) x763) (= (> x763 0) x376) (<= x1007 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x675) (= (x897 (+ x541 192)) x497) (= x20 (x635 1461501637330902918203684832716283019655932542975 x205)) (= x796 (x897 (+ x497 32))) (>= 1461501637330902918203684832716283019655932542975 x457) (>= x675 0) (<= x56 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x675) (< x56 1461501637330902918203684832716283019655932542976) (<= 0 x1007) (= x541 (x897 (+ 4 x554))) (< x457 1461501637330902918203684832716283019655932542976) (< x1007 1461501637330902918203684832716283019655932542976)) (not x429)) (and (=> (and (and (= x272 x796) (= x442 (x916 160)) (= (< 32 x763) x449)) x376) (and (=> (and (and (= (x576 192) x987) (= x606 (x897 (+ x796 32))) (= (< 64 x763) x982)) x449) (and (=> (and x982 (and (= (x347 224) x200) (= (x897 (+ x796 64)) x558) (= (< 96 x763) x848))) (and (=> x848 x837) (=> (and (= x374 96) (not x848)) x67))) (=> (and (not x982) (= 64 x374)) x67))) (=> (and (not x449) (= 32 x374)) x67))) (=> (and (= 0 x374) (not x376)) x67))) (=> (and (and (= x847 x1007) (= x1091 0) (= x675 x270) (= x56 x1085) (= x457 x805)) x429) x183))) (=> (and (and (= x1007 x847) (= x675 x270) (= x1091 0) (= x1085 x56) (= x805 x457)) (not x610)) x183)))))
(assert (x154 x364))
(assert (= (and x957 x649) x1056))
(assert (= (and x39 (not x833)) x742))
(assert (x154 x421))
(assert (x154 x782))
(assert (x154 x273))
(assert (= x599 (=> (and (= (x80 (x319 x942)) x1109) (= (= 0 x1109) x55) (= (x635 1461501637330902918203684832716283019655932542975 x205) x942)) (and (=> (and (and (= x1091 0) (= x675 x270) (= x1007 x847) (= x1085 x56) (= x805 x457)) x55) x183) (=> (and (and (or (not x836) (and x836 (and (= x50 (x871 (x319 x132))) x884 x686 (= (>= (x65 (x319 x132)) x50) x884) (= (= (x65 (x319 x942)) x688) x686) (= x688 (x871 (x319 x942))) (> 4294967296 x181)))) (= x836 (> x213 0))) (not x55)) x781)))))
(assert (= (or x885 x394 x1049 x981 x372) x914))
(assert (= (x395 (+ (x897 (+ x883 196)) (- (+ x30 (- x808 x968)) 196))) 0))
(assert (= (x1103 (x51 113209349505197351213641468582317386984598294884268236158119619414039440916480)) 113209349505197351213641468582317386984598294884268236158119619414039440916480))
(assert (x154 x988))
(assert (x154 x224))
(assert (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x1103 (x51 33582922474372145882413589741236248003507108108518759994751911431010219196416))))
(assert (= 0 (x395 (+ (x897 (+ 196 x883)) 64))))
(assert (x154 x626))
(assert (x154 x247))
(assert (= (x1017 x258) 0))
(assert (x154 x336))
(assert (x154 x35))
(assert (= x483 (and x506 x1101)))
(assert (x154 x563))
(assert (x154 x558))
(assert (= x461 (=> (and (= (= 0 x390) x408) (or x408 (not x408))) x269)))
(assert (= (x1103 (x51 75068239)) 75068239))
(assert (x154 x1135))
(assert (= (x51 1245659826) (x319 1245659826)))
(assert (x154 x480))
(assert (x154 x1067))
(assert (= (and x1011 x864) x24))
(assert (= (x51 1262878978) (x319 1262878978)))
(assert (x154 x922))
(assert (= x20 (x1103 (x319 x20))))
(assert (x154 x949))
(assert (x154 x169))
(assert (x154 x939))
(assert (x154 x21))
(assert (= x940 (and (not x86) x89)))
(assert (= (and (not x665) x99) x760))
(assert (x154 x650))
(assert (x154 x547))
(assert (= (x1103 (x51 1553423035)) 1553423035))
(assert (= 0 (x101 (- x869 x334))))
(assert (= x976 (and x155 x982)))
(assert (= x524 (and x400 (not x733))))
(assert (= (or x518 x584) x913))
(assert (= x256 (=> (and (or (not x666) (and (= (x897 (+ x825 x152)) x305) x666)) (= x666 (< x152 x298))) x1054)))
(assert (x154 x134))
(assert (x154 x719))
(assert (x154 x1072))
(assert (x154 x951))
(assert (= x401 (or x462 x681)))
(assert (x154 x137))
(assert (x154 x467))
(assert (= x574 (and x848 x976)))
(assert (= x332 (=> (and (= x791 (mod (* 32 x202) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x897 (+ x769 32)) x776) (= x652 (x723 (- x769 x930))) (= x645 (x897 (+ x776 x791))) (= (x897 (+ x1 32)) x767) (= (< 0 x202) x168)) (and (=> (and (= x645 x78) (not x168)) x33) (=> x168 x811)))))
(assert (x566 x578))
(assert (x154 x510))
(assert (x154 x507))
(assert (x154 x826))
(assert (x154 x71))
(assert (= x753 (and x898 x1133)))
(assert (= x394 (and x966 (not x994))))
(assert (= 2376452955 (x1103 (x51 2376452955))))
(assert (= x418 (=> (and (or (and x110 (and (> 4294967296 x124) (= x580 1))) (and (not x110) (= x644 x580))) (and (not (= x260 0)) (= (x897 (+ x834 x917)) x339) (= (x918 x834) x122) (= (> x644 0) x110) (= x917 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1023)) (not (or (and (= true (<= x320 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x320 32)) (> x320 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= x122 1461501637330902918203684832716283019655932542975) (= x1023 (x897 (+ 31 x320))))) x1033)))
(assert (= (and x52 x666) x1069))
(assert (x154 x291))
(assert (x154 x206))
(assert (x154 x362))
(assert (= (and x344 x168) x708))
(assert (and (<= 10000 (x292 x132 x814)) (>= 340282366920938463463374607431768211455 (x292 x132 x814))))
(assert (= (and x9 (not x907)) x278))
(assert (x154 x880))
(assert (= (x1017 256) 0))
(assert (x154 x660))
(assert (x154 x132))
(assert (= (or x911 x927 x317) x674))
(assert (= 0 (x395 (+ (x897 (+ x883 196)) (- (+ x30 (- x258 x968)) 196)))))
(assert (= x969 (or x136 x115)))
(assert (x154 x152))
(assert (x154 x1063))
(assert (=> (<= x959 10000) (= (x319 x959) (x51 x959))))
(assert (x154 x717))
(assert (x220 x205))
(assert (x154 x188))
(assert (x154 x427))
(assert (= (and x165 (not x851)) x46))
(assert (x154 x801))
(assert (x154 x434))
(assert (x220 x193))
(assert (= x327 (=> (and (or x1115 (not x1115)) (= (= 0 x545) x1115)) x597)))
(assert (x154 x241))
(assert (x154 x92))
(assert (= (and x573 x947) x326))
(assert (x154 x946))
(assert (= (and x1030 (not x172)) x587))
(assert (x154 x724))
(assert (= (x51 832554005) (x319 832554005)))
(assert (x154 x3))
(assert (= x527 (=> (and (and (and (and (and (and (< x457 1461501637330902918203684832716283019655932542976) (= (= 0 x612) x653) (= (x80 (x319 x132)) x893) (= x1130 x457) (<= 0 x457) (= x915 (and x653 x539)) (= 832554005 x1114) (not (= x1114 818759841)) (> 1245659826 x1114) (= x1020 0) (>= 1461501637330902918203684832716283019655932542975 x457) (> x893 0) (= x612 x150) (< x1114 2220280665) (not (= x1114 75068239))) (and (and (and (>= x675 0) (>= 1461501637330902918203684832716283019655932542975 x675) (= (x80 (x319 x132)) x8) (< x675 1461501637330902918203684832716283019655932542976) (not (= 3084411429 x95)) (not (= 4076725131 x95)) (= 0 x775) (not (< x95 2220280665)) (= 4199168155 x95) (not (< x95 3084411429)) (= x18 (not (= x377 0))) (= x196 x675) (not (= x95 3705713892)) (= x845 (and x18 x585)) (not (= 3572374928 x95)) (> x8 0) (= x405 x377)) (and (and (= (and x27 x1051) x1125) (= 0 x655) (or x289 x512) x79 (= x649 (> x471 x1031)) (= x639 x227) (= x512 (< 0 x959)) (= x289 (= 0 x959)) (= x1031 (x41 (x319 x959))) (= (or x915 x1125) x79) (= x27 (not (= 0 x227))) (> 1461501637330902918203684832716283019655932542976 x959)) (and (not (< x1083 2220280665)) (= (not (= 0 x503)) x419) (>= 1461501637330902918203684832716283019655932542975 x56) (< x56 1461501637330902918203684832716283019655932542976) (= x1051 (and x845 x419)) (> x104 0) (not (= 2220280665 x1083)) (= (x80 (x319 x132)) x104) (= x196 x503) (= 2329570063 x1083) (> 3084411429 x1083) (= x472 0) (= x639 x56) (>= x56 0) (not (= x1083 2249206060))))) (and (= x1007 x405) (= x1130 x146) (= 1245659826 x1044) (= x479 (x80 (x319 x132))) (< x1007 1461501637330902918203684832716283019655932542976) (= (not (= 0 x146)) x585) (= 0 x385) (<= 0 x1007) (<= x1007 1461501637330902918203684832716283019655932542975) (< 0 x479) (not (> 1245659826 x1044)) (> 2220280665 x1044)))) (and (= 0 x547) (not (= x215 2220280665)) (<= 0 x56) (= 2329570063 x215) (= x150 x56) (= x362 x62) (= x539 (and x454 x819)) (not (= x215 2249206060)) (= x454 (= x62 0)) (> x411 0) (not (> 2220280665 x215)) (< x56 1461501637330902918203684832716283019655932542976) (= (x80 (x319 x132)) x411) (> 3084411429 x215) (>= 1461501637330902918203684832716283019655932542975 x56))) (and (= x396 x861) (= x675 x362) (>= 1461501637330902918203684832716283019655932542975 x675) (= x789 (= 0 x861)) (not (> 2220280665 x1078)) (not (= 3572374928 x1078)) (not (= 4076725131 x1078)) (not (= x1078 3705713892)) (< x675 1461501637330902918203684832716283019655932542976) (= 4199168155 x1078) (< 0 x68) (= x819 (and x182 x789)) (>= x675 0) (= x609 0) (not (= 3084411429 x1078)) (= (x80 (x319 x132)) x68) (not (< x1078 3084411429)))) (and (not (< x901 1245659826)) (= 1245659826 x901) (= x415 (x80 (x319 x132))) (< x1007 1461501637330902918203684832716283019655932542976) (> x415 0) (<= x1007 1461501637330902918203684832716283019655932542975) (= 0 x925) (> 2220280665 x901) (= x299 x890) (<= 0 x1007) (= x396 x1007) (= (= 0 x890) x182))) (and (<= x1131 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x648) (>= x636 0) (>= 1461501637330902918203684832716283019655932542975 x1007) (<= x902 1461501637330902918203684832716283019655932542975) (<= x960 1461501637330902918203684832716283019655932542975) (= x1057 false) (<= x453 1461501637330902918203684832716283019655932542975) (<= x839 255) (= true x634) (= (< 0 (x80 (x319 x311))) x276) (= (x41 (x319 x132)) x2) (not (= x1119 75068239)) (<= x291 1461501637330902918203684832716283019655932542975) (<= 0 x137) (<= x457 1461501637330902918203684832716283019655932542975) x276 (<= x268 255) (>= x1050 0) (<= x290 255) (<= 0 x692) (<= x1050 1461501637330902918203684832716283019655932542975) (<= 0 x457) (>= 1461501637330902918203684832716283019655932542975 x675) (> x657 0) (< x1119 2220280665) (= x657 (x80 (x319 x132))) (<= x922 1461501637330902918203684832716283019655932542975) (<= 0 x839) (>= x643 0) (<= x596 1461501637330902918203684832716283019655932542975) x677 (< 0 x311) (<= x397 255) (>= x291 0) (>= x902 0) (= x1119 832554005) (<= 0 x922) (>= x397 0) (>= 1461501637330902918203684832716283019655932542975 x311) (> 1245659826 x1119) (>= 79228162514264337593543950335 x556) (<= x643 1461501637330902918203684832716283019655932542975) (< 0 x132) (= x680 x902) (= x299 x457) (<= x234 1461501637330902918203684832716283019655932542975) (<= 0 x1040) (<= 0 x2) (<= 0 x234) (>= x1005 0) (<= x692 1461501637330902918203684832716283019655932542975) (<= 0 x1007) (>= x807 0) (<= 0 x648) (<= 0 x489) (= 5 x815) (= (< 0 (x80 (x319 x132))) x677) (= 1262878978 x236) (not (= 818759841 x1119)) (>= 1461501637330902918203684832716283019655932542975 x177) (>= 255 x807) (<= 0 x675) (<= 0 x596) (< x457 1461501637330902918203684832716283019655932542976) (<= 0 x960) (<= 0 x1131) (>= x238 0) (not (= x311 x132)) (<= 0 x457) (= false x369) (<= x489 1461501637330902918203684832716283019655932542975) (<= 0 x773) (>= 1461501637330902918203684832716283019655932542975 x132) (= (x41 (x319 x311)) x137) (>= 1461501637330902918203684832716283019655932542975 x773) (= x190 false) (>= x268 0) (>= 255 x1040) (= x959 x596) (<= 0 x56) (<= x636 255) (<= x457 1461501637330902918203684832716283019655932542975) (<= x238 255) (>= x453 0) (>= 1461501637330902918203684832716283019655932542975 x1005) (>= x290 0) (<= 0 x177) (>= 1461501637330902918203684832716283019655932542975 x56) (>= x556 0))) (and (=> (and (not x649) (and (not (> x303 x749)) (= x28 x434) (= x444 (x897 (+ x495 128))) (= x1037 (x897 (+ x590 31))) (= x307 (x897 (+ 32 x412))) (= (x1080 x84) x81) (= x335 x620) (= x514 (x897 (+ x719 x494))) (= x600 (x210 (x319 x132))) (= x471 x903) (not (< 18446744073709551615 x81)) (= (mod (* 32 x81) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1039) (= x437 (x897 (+ x471 x600))) (or (and (< x487 x749) (= (<= x749 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x487 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (<= x749 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x487))) (= (x1080 x1087) x202) (= (- x45 x471) x809) (= 0 x538) (= x654 0) (= (x897 (+ 4 x424)) x1067) (= x424 x623) (= x654 (ite x197 1 0)) (= (x897 (+ x930 160)) x383) (not (< x749 x1113)) (= x175 (> x883 18446744073709551615)) (= x283 (< x444 128)) (= (x897 (+ x1117 32)) x590) (= x482 (x897 (+ x446 31))) (= x578 (x897 (+ 31 x494))) (= (x897 (+ 32 x444)) x237) (= (x897 (+ x1087 32)) x49) (= (x897 (+ x697 160)) x965) (= x854 x625) (= (< 0 x910) x1047) (= (x897 (+ 32 x1067)) x719) (= (x691 128) x910) (= x959 x1028) (= x84 (x897 (+ x335 4))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x468) (and (< x468 160) (= true (<= x468 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (< (+ x600 x903) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (or x175 x214) x211) (= x303 (x897 (+ x49 x133))) (not (< x749 x1090)) (not (> x371 18446744073709551615)) (= x197 (or x283 x722)) (= x173 1262878978) (not (= 1245659826 x173)) (= (x897 (+ x1087 31)) x629) (= (x897 (+ x697 31)) x694) (= x883 (x897 (+ x444 x801))) (<= 0 x1028) (not (> x623 18446744073709551615)) (= x133 (mod (* 32 x202) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x570 (x897 (+ 32 x383))) (not (< x749 4)) (= (x1080 x1067) x494) (= x1002 (x897 (+ x237 x494))) (not (> x514 x749)) (= x468 (x723 (- x749 4))) (= x533 x959) (= x412 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x578)) (= x45 (x41 (x319 x959))) (= x371 x373) (not (< 18446744073709551615 x697)) (= x697 (x1080 x446)) (= x243 x28) (= x538 (ite x211 1 0)) (= x485 (x897 (+ x446 32))) (= (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x874) x801) (not (> x494 18446744073709551615)) (= (x897 (+ x84 32)) x250) (< 0 x549) (= x874 (x897 (+ x307 31))) (= (x80 (x319 x132)) x549) (>= x261 0) (>= 1461501637330902918203684832716283019655932542975 x261) (>= x352 0) (< x173 2220280665) (= x1113 (x897 (+ x697 x485))) (= x495 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1037)) (or (and (< x662 x749) (= (<= x662 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x749))) (and (> x662 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x749 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x667 x513) (or (and (> x749 x629) (= (<= x629 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x749 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x629 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x749))) (= x662 (x897 (+ x1067 31))) (= x1087 (x897 (+ 4 x373))) (not (> x620 18446744073709551615)) (or (and (> x749 x482) (= (<= x482 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x749 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x482) (<= x749 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x1090 (x897 (+ x250 x1039))) (<= x352 1461501637330902918203684832716283019655932542975) (not (> 1245659826 x173)) (= (x897 (+ x84 31)) x487) (= x352 x667) (>= 1461501637330902918203684832716283019655932542975 x1028) (= x930 (x897 (+ x883 4))) (= (< 18446744073709551615 x444) x722) (and (< 163 x749) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x749))) (= (x897 (+ 4 x625)) x446) (= x1117 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x694)) (= (< x883 x444) x214) (not (> x854 18446744073709551615)) (not (< 18446744073709551615 x202)))) (and (=> (and (not x1047) (= 0 x707)) x1015) (=> (and x1047 (and (= x474 (> x910 32)) (= x570 x952) (= x274 (x938 160)))) (and (=> (and (= 32 x707) (not x474)) x1015) (=> (and x474 (and (= x770 (> x910 64)) (= x555 (x4 192)) (= x66 (x897 (+ x570 32))))) (and (=> (and (not x770) (= 64 x707)) x1015) (=> (and x770 (and (= (x897 (+ x570 64)) x117) (= x57 (> x910 96)) (= (x286 224) x1019))) (and (=> x57 x148) (=> (and (not x57) (= x707 96)) x1015))))))))) (=> (and x649 (and (= x1024 true) (= x492 x56) (= x511 x675) (= x793 false) (= x430 x1007) (= x457 x999))) x699)))))
(assert (x154 x869))
(assert (x154 x444))
(assert (= x251 (and (not x877) x838)))
(assert (x154 x796))
(assert (x154 x603))
(assert (= (x319 4739670319144124481003130557741556594755290868171975227769803894069435301888) (x51 4739670319144124481003130557741556594755290868171975227769803894069435301888)))
(assert (x154 x605))
(assert (= (and (not x356) x860) x372))
(assert (x154 x545))
(assert (x154 x117))
(assert (= x771 (and x172 x1030)))
(assert (= (x1017 x869) 0))
(assert (x154 x420))
(assert (x154 x1005))
(assert (= (and x491 (not x1009)) x927))
(assert (= (and x889 (not x149)) x713))
(assert (x154 x412))
(assert (= (x395 (+ (- (+ 196 (- x420 160)) 196) (x897 (+ 196 x883)))) 0))
(assert (= (and x936 x732) x69))
(assert (x154 x609))
(assert (= 0 (x395 (+ (- (+ (- x904 160) 196) 196) (x897 (+ x883 196))))))
(assert (x154 x766))
(assert (x154 x45))
(assert (x154 x1052))
(assert (= (x1103 (x51 4294967296)) 4294967296))
(assert (x566 x735))
(assert (= (and (not x1101) x506) x102))
(assert (= x860 (or x993 x756)))
(assert (x154 x595))
(assert (= (and x127 x997) x628))
(assert (x154 x493))
(assert (x154 x453))
(assert (x154 x390))
(assert (= (and x167 x102) x207))
(assert (= (x395 256) 0))
(assert (= x157 (and (not x528) x607)))
(assert (= x546 (and x491 x1009)))
(assert (x154 x62))
(assert (= (and (not x762) x676) x532))
(assert (= (x51 4076725131) (x319 4076725131)))
(assert (= (x1103 (x51 818759841)) 818759841))
(assert (x154 x314))
(assert (x154 x662))
(assert (= (x1103 (x51 1845979623)) 1845979623))
(assert (= 0 (x395 (+ (- (+ (- x808 160) 196) 196) (x897 (+ x883 196))))))
(assert (x154 x404))
(assert (x154 x365))
(assert (x876 x193))
(assert (= (and (not x123) x986) x885))
(assert (= (x1017 x808) 0))
(assert (x154 x109))
(assert (= (or x22 (and (not x1115) x47)) x506))
(assert (= (x1103 (x51 79228162514264337593543950335)) 79228162514264337593543950335))
(assert (= (and x1062 x203) x1122))
(assert (= x275 (=> (and (= x439 (x897 (+ 96 x575))) (= x12 (x897 (+ 96 x968))) (= (not (< 128 x729)) x817) (= (x393 x12) x661)) (and (=> (= 128 x74) x77) x817))))
(assert (= x781 (=> (and (or x985 (not x985)) (= (= 0 x213) x985)) x209)))
(assert (= x209 (=> (= x86 (= 0 x213)) (and (=> (and (and (= x287 x457) (= x1104 x56) (= 32 x880) (= x239 (x635 1461501637330902918203684832716283019655932542975 x205)) (= x358 x675) (= 1 x626) (= x1007 x118)) (not x86)) x617) (=> (and x86 (and (= x805 x457) (= 0 x1091) (= x847 x1007) (= x56 x1085) (= x675 x270))) x183)))))
(assert (=> (>= 10000 x428) (= (x319 x428) (x51 x428))))
(assert (x154 x923))
(assert (= x484 (and (not x800) x628)))
(assert (= x254 (and x1133 (not x898))))
(assert (x154 x199))
(assert (= (and x94 x207) x9))
(assert (x154 x675))
(assert (x154 x930))
(assert (x154 x118))
(assert (x154 x551))
(assert (x154 x84))
(assert (x154 x562))
(assert (x154 x295))
(assert (x154 x350))
(assert (= (and x469 x251) x1059))
(assert (x154 x238))
(assert (x154 x905))
(assert (= (x319 2005408114) (x51 2005408114)))
(assert (x154 x559))
(assert (= (and x55 x226) x463))
(assert (x154 x240))
(assert (= (and x658 (not x836)) x681))
(assert (= (or x440 x921 x406 x426 x821 x450 x455 x689 x483 x1013 x751 x1136 x254 x543 x248 x328 x963 x1059 x768 x710 x294 x616 x702 x355 x1122 x157 x223 x322 x160 x974 x473 x463 x330 x557) x933))
(assert (= x702 (and (not x54) x1098)))
(assert (x154 x1050))
(assert (= x1094 (=> (and (= x1063 (x897 (+ 96 x825))) (= (not (< 128 x152)) x162) (= x386 (x908 x158)) (= x158 (x897 (+ 96 x237)))) (and (=> (= 128 x298) x256) x162))))
(assert (x154 x120))
(assert (= (and x15 x546) x266))
(assert (= (x319 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x51 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x154 x714))
(assert (= (x1103 (x51 4199168155)) 4199168155))
(assert (x154 x388))
(assert (= (and x738 x458) x329))
(assert (= x837 (=> (and (= x120 (x637 256)) (= x642 (not (< 128 x763))) (= x682 (x897 (+ x796 96)))) (and (=> (= 128 x374) x67) x642))))
(assert (x154 x49))
(assert (x154 x538))
(assert (x220 x874))
(assert (x154 x560))
(assert (x154 x193))
(assert (= (and x602 x1127) x993))
(assert (= 0 (x395 (+ (x897 (+ 196 x883)) (- (+ x30 (- x928 x968)) 196)))))
(assert (x154 x150))
(assert (= (x395 (x897 (+ x883 196))) 0))
(assert (x154 x942))
(assert (x154 x459))
(assert (= x130 (or x726 x704)))
(assert (= x1132 (and x380 x326)))
(assert (x154 x1097))
(assert (x154 x834))
(assert (x566 x35))
(assert (x154 x565))
(assert (= 0 (x395 (+ (- x701 196) (x897 (+ x883 196))))))
(assert (= (x395 (+ (- (+ x30 (- x242 x968)) 196) (x897 (+ 196 x883)))) 0))
(assert (x154 x1031))
(assert (= (x395 (+ (x897 (+ x883 196)) (- x988 196))) 0))
(assert (x154 x131))
(assert (= (and x997 (not x127)) x456))
(assert (= (or x574 x271 x464 x1003 x11) x1127))
(assert (x154 x890))
(assert (x154 x93))
(assert (= x852 (and (not x738) x458)))
(assert (= (and x226 (not x55)) x658))
(assert (= (and x674 x802) x398))
(assert (= x1054 (=> (and (= (x897 (+ x152 31)) x35) (= (x897 (+ x684 32)) x1) (= (x897 (+ x284 x825)) x34) (= x505 (x897 (+ x34 32))) (= x284 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x35)) (= x684 (x897 (+ 32 x435))) (= (x723 (- x34 x930)) x562) (= x851 (< 0 x81))) (and (=> (and x851 (and (>= 1461501637330902918203684832716283019655932542975 x331) (= x331 (x1080 x250)) (= (> x81 1) x1026) (= x563 (x897 (+ x505 32))) (= (x897 (+ 32 x250)) x1140))) (and (=> (and (= x563 x769) (not x1026)) x332) (=> (and x1026 (and (<= x416 1461501637330902918203684832716283019655932542975) (= x977 (> x81 2)) (= (x897 (+ x563 32)) x551) (= x417 (x897 (+ x1140 32))) (= x416 (x1080 x1140)))) (and (=> (and (and (= x998 (x897 (+ x417 32))) (= x354 (x1080 x417)) (= (> x81 3) x678) (= (x897 (+ x551 32)) x93) (<= x354 1461501637330902918203684832716283019655932542975)) x977) (and (=> (and (= x93 x769) (not x678)) x332) (=> x678 x941))) (=> (and (= x769 x551) (not x977)) x332))))) (=> (and (not x851) (= x769 x505)) x332)))))
(assert (x154 x1008))
(assert (x154 x476))
(assert (= (or x771 x933 x940) x526))
(assert (x154 x489))
(assert (= (x1103 (x51 3084411429)) 3084411429))
(assert (x154 x346))
(assert (= x920 (and x203 (not x1062))))
(assert (= x516 (=> (and (= x259 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x195)) (= (x897 (+ x813 32)) x247) (= (x897 (+ x259 x796)) x813) (= (x897 (+ 31 x763)) x195) (= x112 (x48 x928)) (= x356 (> x112 0)) (= x748 (x723 (- x813 x541))) (= x76 (x897 (+ x541 32)))) (and (=> (and (not x356) (= x204 0)) x866) (=> (and (and (= x247 x542) (= (< 32 x112) x818) (= x1008 (x954 x904)) (= x968 x904)) x356) (and (=> (and (and (= (x797 x808) x414) (= (x897 (+ x968 32)) x808) (= x994 (< 64 x112)) (= x816 (x897 (+ x247 32)))) x818) (and (=> (and (and (= x1045 (x897 (+ x247 64))) (= x123 (< 96 x112)) (= x1128 (x897 (+ 64 x968))) (= (x1000 x1128) x782)) x994) (and (=> x123 x895) (=> (and (not x123) (= x204 96)) x866))) (=> (and (= x204 64) (not x994)) x866))) (=> (and (not x818) (= x204 32)) x866)))))))
(assert (= (=> (= x1101 (= 0 x545)) (and (=> (and x1101 (and (= x457 x805) (= x1085 x56) (= x270 x675) (= x847 x1007) (= 0 x1091))) x183) (=> (and (not x1101) (and (= x729 (x832 x928)) (= x365 (x897 (+ 32 x554))) (= x575 (x897 (+ 3 x618))) (= (x897 (+ 32 x554)) x618) (= (< 0 x729) x167))) (and (=> (and (not x167) (= 0 x74)) x77) (=> (and (and (= x1014 (x832 x242)) (= x94 (< 32 x729)) (= x575 x142) (= x242 x968)) x167) (and (=> (and (= x74 32) (not x94)) x77) (=> (and (and (= x258 (x897 (+ x968 32))) (= x979 (x897 (+ x575 32))) (= x1088 (x881 x258)) (= (> x729 64) x907)) x94) (and (=> (and (not x907) (= x74 64)) x77) (=> (and (and (= (> x729 96) x1011) (= (x868 x869) x1052) (= (x897 (+ x968 64)) x869) (= x267 (x897 (+ x575 64)))) x907) (and (=> x1011 x275) (=> (and (= x74 96) (not x1011)) x77))))))))))) x597))
(assert (x154 x200))
(assert (= 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x1103 (x51 102499615646744134772650717477688572466918151731817230690449879178893085114368))))
(assert (x876 x205))
(assert (x220 x493))
(assert (= x22 (and x1115 x47)))
(assert (= x433 (and (not x977) x36)))
(assert (x220 x709))
(assert (x566 x529))
(assert (x154 x606))
(assert (x154 x657))
(assert (x154 x500))
(assert (= 0 (x101 (- x928 x334))))
(assert (x154 x75))
(assert (= (or x810 x255) x1043))
(assert (= x584 (and (not x1035) x671)))
(assert (x154 x436))
(assert (= (=> (and (= x427 (x367 128)) (= x31 (x897 (+ x772 96))) (= (> x427 0) x947) (= x638 (x897 (+ 32 x31))) (= x83 (x723 (- x772 x554))) (= x534 96) (= (x897 (+ x575 x729)) x772) (= (x723 (- x83 32)) x912)) (and (=> (and x947 (and (= x92 (x872 160)) (= x380 (< 32 x427)) (= x273 x638))) (and (=> (and (= x159 32) (not x380)) x447) (=> (and x380 (and (= x306 (x279 192)) (= x992 (< 64 x427)) (= (x897 (+ 32 x638)) x856))) (and (=> (and (not x992) (= 64 x159)) x447) (=> (and (and (= (x321 224) x241) (= x1123 (x897 (+ 64 x638))) (= x391 (> x427 96))) x992) (and (=> (and (= 96 x159) (not x391)) x447) (=> x391 x935))))))) (=> (and (not x947) (= 0 x159)) x447))) x301))
(assert (x154 x472))
(assert (x154 x612))
(assert (x154 x553))
(assert (= (and x341 (not x135)) x641))
(assert (= x406 (and (not x611) x593)))
(assert (= x911 (and x535 x438)))
(assert (= x145 (and x992 x1132)))
(assert (x154 x791))
(assert (= x966 (and x932 x818)))
(assert (= x670 (and x957 (not x649))))
(assert (x154 x735))
(assert (x154 x887))
(assert (x154 x213))
(assert (x154 x903))
(assert (= (=> (and (= x152 (x867 x444)) (= x552 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x493)) (= x1134 (x897 (+ x552 x570))) (= (> x152 0) x1004) (= (x897 (+ x910 31)) x493) (= x435 (x897 (+ 32 x930))) (= x460 (x723 (- x1134 x930))) (= x825 (x897 (+ x1134 32)))) (and (=> (and (not x1004) (= 0 x298)) x256) (=> (and x1004 (and (= x176 (x830 x73)) (= x73 x237) (= x476 x825) (= (< 32 x152) x127))) (and (=> (and (and (= (x897 (+ 32 x237)) x459) (= x109 (x897 (+ 32 x825))) (= (< 64 x152) x800) (= (x1076 x459) x1010)) x127) (and (=> (and (not x800) (= 64 x298)) x256) (=> (and x800 (and (= x60 (x897 (+ x825 64))) (= (x897 (+ 64 x237)) x604) (= x313 (x1137 x604)) (= x774 (< 96 x152)))) (and (=> (and (= 96 x298) (not x774)) x256) (=> x774 x1094))))) (=> (and (= x298 32) (not x127)) x256))))) x759))
(assert (x143 x311))
(assert (= x997 (and x1004 x443)))
(assert (x154 x242))
(assert (= x88 (and x521 x855)))
(assert (= (or x972 x1016) x423))
(assert (x154 x430))
(assert (x154 x752))
(assert (x154 x397))
(assert (= (=> (and (= (x897 (+ 32 x93)) x750) (= x853 (x1080 x998)) (<= x853 1461501637330902918203684832716283019655932542975) (= x614 (not (< 4 x81)))) (and x614 (=> (= x750 x769) x332))) x941))
(assert (= (=> (and (= (x718 256) x858) (= (not (< 128 x427)) x201) (= x1070 (x897 (+ x638 96)))) (and (=> (= 128 x159) x447) x201)) x935))
(assert (x154 x104))
(assert (= (and x1043 x973) x1118))
(assert (= (and x936 (not x732)) x651))
(assert (= (and (not x992) x1132) x891))
(assert (x220 x828))
(assert (= x689 (and x783 (not x475))))
(assert (x154 x799))
(assert (= (and x519 x1026) x36))
(assert (x154 x764))
(assert (x154 x1070))
(assert (= (x395 x459) 0))
(assert (x154 x439))
(assert (= x11 (and (not x449) x755)))
(assert (= (and x282 x703) x974))
(assert (= 0 (x395 (+ (x897 (+ x883 196)) (- (+ 196 (- x12 160)) 196)))))
(assert (x154 x1114))
(assert (x154 x113))
(assert (= (or x302 x1079) x128))
(assert (x154 x424))
(assert (x154 x1038))
(assert (= (or x1093 x488) x470))
(assert (x154 x509))
(assert (= (or x264 x1121) x783))
(assert (x154 x16))
(assert (= 0 (x1017 x420)))
(assert (= x1074 (and x913 x610)))
(assert (x154 x413))
(assert (= x302 (and (not x598) x914)))
(assert (x220 x694))
(assert (x154 x633))
(assert (x220 x35))
(assert (x154 x1083))
(assert (x154 x715))
(assert (x154 x591))
(assert (= x235 (and x586 x526)))
(assert (x154 x1134))
(assert (= x455 (and x753 x978)))
(assert (x220 x134))
(assert (= (x319 2329570063) (x51 2329570063)))
(assert (= 0 (x1017 x1128)))
(assert (x154 x965))
(assert (x154 x107))
(assert (x154 x334))
(assert (= (and x1021 x379) x296))
(assert (= x1016 (and x741 x739)))
(assert (x154 x20))
(assert (x154 x312))
(assert (x154 x709))
(assert (x154 x345))
(assert (x154 x863))
(assert (= 0 (x395 (+ (- (+ (- x869 160) 196) 196) (x897 (+ x883 196))))))
(assert (x154 x415))
(assert (= x859 (and (not x15) x546)))
(assert (= (and x920 (not x14)) x710))
(assert (= 0 (x1017 192)))
(assert (x154 x1104))
(assert (= x1121 (and x281 x408)))
(assert (x154 x850))
(assert (x154 x645))
(assert (x154 x287))
(assert (x154 x858))
(assert (= (=> (= x96 (not (> x58 1))) (and x96 x599)) x361))
(assert (x154 x571))
(assert (x566 x195))
(assert (= x491 (and x40 x228)))
(assert (x154 x460))
(assert (= (x319 113209349505197351213641468582317386984598294884268236158119619414039440916480) (x51 113209349505197351213641468582317386984598294884268236158119619414039440916480)))
(assert (= (x395 160) 0))
(assert (= (and (not x438) x535) x317))
(assert (x154 x1086))
(assert (= 0 (x395 (+ (x897 (+ x883 196)) (- (+ x30 (- x12 x968)) 196)))))
(assert (x154 x1028))
(assert (x154 x893))
(assert (x154 x66))
(assert (x154 x234))
(assert (x154 x749))
(assert (x154 x1128))
(assert (= x864 (and x9 x907)))
(assert (x154 x790))
(assert (x154 x195))
(assert (x154 x284))
(assert (= (and x671 x1035) x1089))
(assert (= (x1103 (x319 x311)) x311))
(assert (x154 x861))
(assert (= (and x758 (not x376)) x271))
(assert (x154 x61))
(assert (x154 x952))
(assert (x154 x567))
(assert (x566 x1023))
(assert (x154 x873))
(assert (= (x319 22445611572322667099362401052093617030957452505749565894135597532943828910080) (x51 22445611572322667099362401052093617030957452505749565894135597532943828910080)))
(assert (x154 x268))
(assert (= x77 (=> (and (= (< x729 x74) x732) (or (and x732 (= x163 (x897 (+ x575 x729)))) (not x732))) x301)))
(assert (x154 x960))
(assert (= 0 (x101 (- x904 x334))))
(assert (= x1033 (=> (and (and (<= x591 1461501637330902918203684832716283019655932542975) (= x591 (x924 x339)) (not (= 0 x580)) (= x841 x1102) (not (or (> x124 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x124 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x124))))) (and (= x118 x430) (= x793 false) (= x287 x999) (= x511 x358) (= false x1024) (= x1104 x492))) x699)))
(assert (x154 x953))
(assert (x566 x1006))
(assert (= (and x194 x1105) x255))
(assert (= 0 (x395 (+ (- x565 196) (x897 (+ 196 x883))))))
(assert (x154 x683))
(assert (= (x395 (+ (x897 (+ 196 x883)) (- (+ x30 (- 224 x968)) 196))) 0))
(assert (= x1046 (=> (and (or (and x802 (= x712 x953)) (and (and (= x735 (x897 (+ 63 x141))) (= x1058 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x735)) (= x953 x1110) (= x1110 (x897 (+ x1058 x712))) (= x334 (x897 (+ 32 x712)))) (not x802))) (= x802 (= x141 0))) x185)))
(assert (= x1077 (=> (and (or x1018 (not x1018)) (= x1018 (= x795 0))) x461)))
(assert (x154 x142))
(assert (x154 x1129))
(assert (x154 x411))
(assert (= (x51 1901074598) (x319 1901074598)))
(assert (= x400 (and x54 x1098)))
(assert (= x447 (=> (and (or (not x665) (and (= (x897 (+ x638 x427)) x222) x665)) (= (> x159 x427) x665)) x540)))
(assert (= x97 (and x88 (not x1126))))
(assert (x154 x81))
(assert (= (and x733 x400) x426))
(assert (= (and (not x26) x831) x703))
(assert (= (and x800 x628) x711))
(assert (x566 x874))
(assert (= (and (not x774) x711) x13))
(assert (x154 x258))
(assert (= (and x770 x293) x822))
(assert (x154 x684))
(assert (= (x395 (+ (- (+ 196 (- x242 160)) 196) (x897 (+ x883 196)))) 0))
(assert (= x43 (and (not x57) x822)))
(assert (x154 x894))
(assert (x220 x404))
(assert (= (and x423 (not x983)) x488))
(assert (= (=> (and (and (and (= x1073 0) (= 1245659826 x232) (<= x430 1461501637330902918203684832716283019655932542975) (= x509 x896) (= (x80 (x319 x132)) x208) (> 1461501637330902918203684832716283019655932542976 x430) (= x477 x430) (<= 0 x430) (= (= 0 x509) x121) (< x232 2220280665) (> x208 0) (not (< x232 1245659826))) (and (and (= 4199168155 x693) (not (= x693 3705713892)) (= x827 (= 0 x794)) (not (= x693 3084411429)) (not (= 4076725131 x693)) (= x477 x794) (= x746 (and x121 x827)) (not (< x693 2220280665)) (<= 0 x511) (>= 1461501637330902918203684832716283019655932542975 x511) (> 1461501637330902918203684832716283019655932542976 x511) (not (= 3572374928 x693)) (= x338 x511) (= x1038 (x80 (x319 x132))) (< 0 x1038) (= 0 x531) (not (< x693 3084411429))) (and (and (= x931 (and x736 x746)) (> 1461501637330902918203684832716283019655932542976 x492) (not (< x125 2220280665)) (>= x492 0) (not (= x125 2249206060)) (= (x80 (x319 x132)) x178) (= x736 (= x188 0)) (<= x492 1461501637330902918203684832716283019655932542975) (> 3084411429 x125) (> x178 0) (not (= 2220280665 x125)) (= 0 x17) (= x125 2329570063) (= x75 x492) (= x188 x338)) (and (and (and (and (>= 1461501637330902918203684832716283019655932542975 x511) (= x364 x1135) (not (= 4076725131 x850)) (not (= x850 3705713892)) (not (= x850 3084411429)) (= 4199168155 x850) (= x511 x257) (= x990 0) (<= 0 x511) (= (and x144 x389) x544) (not (> 2220280665 x850)) (> x923 0) (= x144 (not (= x364 0))) (not (< x850 3084411429)) (= (x80 (x319 x132)) x923) (< x511 1461501637330902918203684832716283019655932542976) (not (= 3572374928 x850))) (and (and (= x465 (not (= 0 x85))) (= (or x309 x619) x1027) (= 0 x1097) (= x85 x553) (= (and x937 x465) x309)) (and (= (not (= x863 0)) x5) (= 0 x507) (= x257 x863) (= (x80 (x319 x132)) x212) (<= x492 1461501637330902918203684832716283019655932542975) (< x492 1461501637330902918203684832716283019655932542976) (= x492 x553) (>= x492 0) (not (> 2220280665 x206)) (not (= 2220280665 x206)) (not (= x206 2249206060)) (< 0 x212) (= (and x544 x5) x937) (= 2329570063 x206) (< x206 3084411429)))) (and (> 1461501637330902918203684832716283019655932542976 x430) (not (< x752 1245659826)) (= x790 x71) (<= 0 x430) (> 2220280665 x752) (= (x80 (x319 x132)) x949) (< 0 x949) (= x1135 x430) (= x572 0) (= (not (= x790 0)) x389) (= x752 1245659826) (>= 1461501637330902918203684832716283019655932542975 x430))) (and (<= x999 1461501637330902918203684832716283019655932542975) (<= 0 x999) (= x343 x75) (< x999 1461501637330902918203684832716283019655932542976) (= x244 (= x343 0)) (> x792 0) (= x999 x71) (not (= 818759841 x105)) (> 2220280665 x105) (= (x80 (x319 x132)) x792) (= 832554005 x105) (> 1245659826 x105) (= x1108 0) (= x619 (and x244 x931)) (not (= 75068239 x105))))))) (and (> 1461501637330902918203684832716283019655932542976 x999) (<= 0 x999) (= (x80 (x319 x132)) x929) (> x929 0) (not x1024) (= 832554005 x1138) (>= 1461501637330902918203684832716283019655932542975 x999) (< x1138 2220280665) (= x999 x896) (> 1245659826 x1138) (not (= x1138 75068239)) (not (= x1138 818759841)) (not x793))) x1027) x699))
(assert (= x203 (and x219 x587)))
(assert (x154 x497))
(assert (= (or x116 x785) x443))
(assert (x154 x215))
(assert (x154 x392))
(assert (= x1013 (and (not x219) x587)))
(assert (x566 x404))
(assert (= (and (not x610) x913) x160))
(assert (= (and x678 x594) x499))
(assert (x154 x8))
(assert (= x166 (or x43 x564 x1065 x967 x1053)))
(assert (x154 x1119))
(assert (x154 x1034))
(assert (x154 x902))
(assert (= (x51 1461501637330902918203684832716283019655932542976) (x319 1461501637330902918203684832716283019655932542976)))
(assert (x154 x425))
(assert (x154 x552))
(assert (x220 x1037))
(assert (x154 x385))
(assert (x154 x807))
(assert (x154 x1044))
(assert (= (and (not x103) x166) x116))
(assert (x154 x386))
(assert (x154 x181))
(assert (x154 x578))
(assert (x220 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x647 (and (not x263) x147)))
(assert (= (x1103 (x51 4076725131)) 4076725131))
(assert (x154 x359))
(assert (x154 x381))
(assert (x154 x307))
(assert (= 0 (x395 (+ (x897 (+ x883 196)) (- (+ (- x420 x968) x30) 196)))))
(assert (= (and x989 x1089) x40))
(assert (= x205 (x1103 (x319 x205))))
(assert (x154 x534))
(assert (= 0 (x101 (- x258 x334))))
(assert (x154 x299))
(assert (x154 x1))
(assert (x154 x396))
(assert (x154 x227))
(assert (= (=> (and (= (> x82 0) x762) (= x1064 (x723 (- x501 x772))) (= (x517 x554) x82) (= x919 (x635 115792089237316195423570985008687907853269984665640564039457584007913129639904 x828)) (= (x897 (+ 32 x772)) x728) (= (x897 (+ x919 x638)) x501) (= (x897 (+ 31 x427)) x828)) (and (=> (and (= x738 (< 32 x82)) x762) (and (=> (and x738 (= x508 (> x82 64))) (and (=> (and (not x508) (= x1048 64)) x878) (=> (and x508 (= (< 96 x82) x263)) (and (=> x263 x1100) (=> (and (= 96 x1048) (not x263)) x878))))) (=> (and (not x738) (= x1048 32)) x878))) (=> (and (= 0 x1048) (not x762)) x878))) x540))
(assert (x154 x73))
(assert (x154 x442))
(assert (x154 x847))
(assert (x154 x667))
(assert (= 0 (x42 (x292 x132 x814))))
(assert (= 0 (x395 224)))
(assert (x154 x494))
(assert (x154 x638))
(assert (x154 x655))
(assert (x154 x998))
(assert (= (and x103 x166) x785))
(assert (= (and x1099 (not x496)) x909))
(assert (x220 x428))
(assert (= x706 (and x783 x475)))
(assert (= (x51 2220280665) (x319 2220280665)))
(assert (x154 x306))
(assert (x154 x707))
(assert (x566 x134))
(assert (x154 x608))
(assert (= (=> (and (or (not x586) x586) (= x586 (= 0 x626))) x277) x617))
(assert (x154 x592))
(assert (x154 x358))
(assert (x154 x912))
(assert (= (and x297 (not x478)) x543))
(assert (x154 x856))
(assert (= (x1103 (x51 2329570063)) 2329570063))
(assert (x154 x554))
(assert (x154 x331))
(assert (x154 x999))
(assert (= (and x851 x165) x519))
(assert (x154 x1123))
(assert (x154 x417))
(assert (x154 x995))
(assert (x154 x492))
(assert (= (x319 79228162514264337593543950335) (x51 79228162514264337593543950335)))
(assert (x154 x30))
(assert (x154 x948))
(assert (= (and x676 x762) x458))
(assert (x154 x828))
(assert (= x613 (and x102 (not x167))))
(assert (= (or x433 x342 x46 x944 x499) x344))
(assert (x154 x495))
(assert (= 0 (x395 (+ (x897 (+ x883 196)) 32))))
(assert (x220 x578))
(assert (= (x51 33582922474372145882413589741236248003507108108518759994751911431010219196416) (x319 33582922474372145882413589741236248003507108108518759994751911431010219196416)))
(assert (= x573 (or x651 x69)))
(assert (x154 x177))
(assert (= x756 (and (not x602) x1127)))
(assert (x154 x695))
(assert (x154 x352))
(assert (x154 x979))
(check-sat)
(exit)