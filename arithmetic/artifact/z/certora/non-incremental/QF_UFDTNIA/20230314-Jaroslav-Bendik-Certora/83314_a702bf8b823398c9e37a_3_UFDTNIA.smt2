(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x257 0)) (((x421 (x232 Int)) (x460 (x253 x257) (x429 x257) (x398 x257) (x522 x257) (x404 Int)) (x94 (x17 x257) (x152 Int)) (x46 (x725 x257) (x186 x257) (x566 Int)))))
(declare-fun x100 () Int)
(declare-fun x7 () Bool)
(declare-fun x281 () Int)
(declare-fun x709 () Bool)
(declare-fun x54 () Bool)
(declare-fun x409 () Int)
(declare-fun x69 () Bool)
(declare-fun x215 () Bool)
(declare-fun x419 () Int)
(declare-fun x702 () Bool)
(declare-fun x56 () Int)
(declare-fun x543 () Int)
(declare-fun x20 () Int)
(declare-fun x73 () Bool)
(declare-fun x280 () Int)
(declare-fun x102 () Int)
(declare-fun x376 () Int)
(declare-fun x172 () Bool)
(declare-fun x671 () Bool)
(declare-fun x462 () Int)
(declare-fun x124 () Int)
(declare-fun x515 () Int)
(declare-fun x607 () Int)
(declare-fun x214 () Int)
(declare-fun x502 () Int)
(declare-fun x182 () Int)
(declare-fun x660 () Int)
(declare-fun x727 () Int)
(declare-fun x266 () Int)
(declare-fun x518 () Bool)
(declare-fun x396 () Bool)
(declare-fun x378 () Bool)
(declare-fun x600 () Int)
(declare-fun x91 () Bool)
(declare-fun x741 () Int)
(declare-fun x321 () Int)
(declare-fun x4 () Int)
(declare-fun x339 () Int)
(declare-fun x453 () Bool)
(declare-fun x616 () Int)
(declare-fun x362 () Int)
(declare-fun x395 () Bool)
(declare-fun x203 () Int)
(declare-fun x756 () Bool)
(declare-fun x323 () Int)
(declare-fun x639 () Bool)
(declare-fun x672 () Int)
(declare-fun x677 (Int) Int)
(declare-fun x363 () Int)
(declare-fun x180 () Int)
(declare-fun x622 () Int)
(declare-fun x159 () Bool)
(declare-fun x407 () Int)
(declare-fun x377 (Int) Int)
(declare-fun x501 () Bool)
(declare-fun x375 () Bool)
(declare-fun x565 () Int)
(declare-fun x653 () Int)
(declare-fun x598 () Int)
(declare-fun x246 () Int)
(declare-fun x112 () Int)
(declare-fun x684 (Int) Int)
(declare-fun x669 () Int)
(declare-fun x209 () Int)
(declare-fun x559 () x257)
(declare-fun x162 () Int)
(declare-fun x445 () Int)
(declare-fun x638 () Int)
(declare-fun x343 () Int)
(declare-fun x478 () Int)
(declare-fun x350 () Int)
(declare-fun x189 () Int)
(declare-fun x68 () Int)
(declare-fun x113 () Int)
(declare-fun x153 () Int)
(declare-fun x435 () Int)
(declare-fun x336 () Int)
(declare-fun x534 () Int)
(declare-fun x367 () Int)
(declare-fun x107 () Int)
(declare-fun x272 () Int)
(declare-fun x137 () Bool)
(declare-fun x511 () Int)
(declare-fun x223 () Int)
(declare-fun x686 () Int)
(declare-fun x621 () Int)
(declare-fun x265 () Int)
(declare-fun x472 () Int)
(declare-fun x490 () Int)
(declare-fun x681 () Int)
(declare-fun x731 () Int)
(declare-fun x233 () Bool)
(declare-fun x473 () Int)
(declare-fun x516 () Int)
(declare-fun x524 () Int)
(declare-fun x341 () Int)
(declare-fun x93 () Bool)
(declare-fun x641 () Int)
(declare-fun x145 () Bool)
(declare-fun x416 () Int)
(declare-fun x754 () Int)
(declare-fun x95 () Int)
(declare-fun x650 () Int)
(declare-fun x661 () Int)
(declare-fun x529 () Bool)
(declare-fun x550 () Int)
(declare-fun x129 () Int)
(declare-fun x630 () Int)
(declare-fun x587 () Int)
(declare-fun x594 () Int)
(declare-fun x531 () Int)
(declare-fun x608 () Int)
(declare-fun x369 () Bool)
(declare-fun x691 () Int)
(declare-fun x326 () Int)
(declare-fun x437 () Int)
(declare-fun x479 () Int)
(declare-fun x269 () Bool)
(declare-fun x438 () Bool)
(declare-fun x615 () Int)
(declare-fun x740 () Int)
(declare-fun x480 () Bool)
(declare-fun x334 () Bool)
(declare-fun x617 () Int)
(declare-fun x161 () Bool)
(declare-fun x422 () Int)
(declare-fun x92 () Int)
(declare-fun x513 () Int)
(declare-fun x394 () Int)
(declare-fun x299 () Int)
(declare-fun x706 () Int)
(declare-fun x770 () Int)
(declare-fun x592 () Int)
(declare-fun x283 () Int)
(declare-fun x745 () Int)
(declare-fun x313 () Int)
(declare-fun x121 () Int)
(declare-fun x33 (Int Int) Int)
(declare-fun x504 () Bool)
(declare-fun x22 () Int)
(declare-fun x750 (Int Int) Int)
(declare-fun x340 () Int)
(declare-fun x70 () Bool)
(declare-fun x381 () Int)
(declare-fun x500 () Int)
(declare-fun x703 () Int)
(declare-fun x302 () Int)
(declare-fun x329 () Int)
(declare-fun x193 () Int)
(declare-fun x573 () Int)
(declare-fun x143 () Int)
(declare-fun x519 () Int)
(declare-fun x668 () Bool)
(declare-fun x347 () Int)
(declare-fun x520 () Int)
(declare-fun x75 () Int)
(declare-fun x188 () Bool)
(declare-fun x310 () Bool)
(declare-fun x39 () Int)
(declare-fun x540 () Int)
(declare-fun x309 () Int)
(declare-fun x391 () Int)
(declare-fun x411 () Int)
(declare-fun x9 () Int)
(declare-fun x60 () Int)
(declare-fun x338 () Bool)
(declare-fun x128 () Int)
(declare-fun x527 () Int)
(declare-fun x287 () Bool)
(declare-fun x285 () Int)
(declare-fun x303 () Int)
(declare-fun x324 () Int)
(declare-fun x774 () Int)
(declare-fun x174 () Int)
(declare-fun x108 () Int)
(declare-fun x654 () Int)
(declare-fun x575 () Int)
(declare-fun x760 () Int)
(declare-fun x510 () Int)
(declare-fun x34 () Int)
(declare-fun x530 () Int)
(declare-fun x222 () Bool)
(declare-fun x512 () Bool)
(declare-fun x43 () Int)
(declare-fun x28 () Int)
(declare-fun x644 () Int)
(declare-fun x680 () Int)
(declare-fun x380 () Int)
(declare-fun x244 () Int)
(declare-fun x439 () Int)
(declare-fun x235 () Bool)
(declare-fun x10 () Int)
(declare-fun x35 () Int)
(declare-fun x297 () Bool)
(declare-fun x360 () Bool)
(declare-fun x442 () Int)
(declare-fun x201 () Int)
(declare-fun x314 () Int)
(declare-fun x167 () Int)
(declare-fun x237 () Int)
(declare-fun x596 () Bool)
(declare-fun x767 () Int)
(declare-fun x499 () Int)
(declare-fun x254 () Bool)
(declare-fun x41 () Bool)
(declare-fun x155 () Int)
(declare-fun x206 () Bool)
(declare-fun x628 () Int)
(declare-fun x748 (Int) Int)
(declare-fun x171 () Int)
(declare-fun x434 () Int)
(declare-fun x712 () Int)
(declare-fun x729 () Int)
(declare-fun x444 () Int)
(declare-fun x400 () Int)
(declare-fun x200 () Int)
(declare-fun x224 () Int)
(declare-fun x656 () Int)
(declare-fun x177 () Int)
(declare-fun x245 () Int)
(declare-fun x728 () Int)
(declare-fun x243 () Int)
(declare-fun x306 () Int)
(declare-fun x51 () Bool)
(declare-fun x115 () Int)
(declare-fun x289 () Int)
(declare-fun x625 () Int)
(declare-fun x532 () Bool)
(declare-fun x553 () Int)
(declare-fun x542 () Int)
(declare-fun x168 () Int)
(declare-fun x227 () Int)
(declare-fun x649 () Int)
(declare-fun x184 () Bool)
(declare-fun x458 () Int)
(declare-fun x757 () Int)
(declare-fun x711 () Bool)
(declare-fun x476 () Int)
(declare-fun x688 () Int)
(declare-fun x697 () Bool)
(declare-fun x109 () Bool)
(declare-fun x158 () Bool)
(declare-fun x611 () Bool)
(declare-fun x463 () Int)
(declare-fun x101 () Bool)
(declare-fun x464 () Bool)
(declare-fun x417 () Int)
(declare-fun x619 () Int)
(declare-fun x82 () Int)
(declare-fun x647 () Int)
(declare-fun x11 () Bool)
(declare-fun x386 () Int)
(declare-fun x156 () Bool)
(declare-fun x663 () Int)
(declare-fun x284 () Int)
(declare-fun x97 () Int)
(declare-fun x402 () Int)
(declare-fun x738 () Int)
(declare-fun x242 () Int)
(declare-fun x461 () Int)
(declare-fun x685 () Int)
(declare-fun x679 () Int)
(declare-fun x497 () Int)
(declare-fun x693 () Int)
(declare-fun x467 () Int)
(declare-fun x769 () Int)
(declare-fun x413 () Int)
(declare-fun x116 () Int)
(declare-fun x300 () Int)
(declare-fun x717 () Int)
(declare-fun x58 () Int)
(declare-fun x541 () Bool)
(declare-fun x526 () Int)
(declare-fun x606 () Int)
(declare-fun x574 () Int)
(declare-fun x690 () Int)
(declare-fun x673 () Int)
(declare-fun x448 () Int)
(declare-fun x545 () Int)
(declare-fun x509 () Int)
(declare-fun x456 () Int)
(declare-fun x62 () Int)
(declare-fun x21 () Bool)
(declare-fun x236 () Bool)
(declare-fun x31 () Bool)
(declare-fun x410 () Int)
(declare-fun x708 () Int)
(declare-fun x13 () Int)
(declare-fun x514 () Int)
(declare-fun x24 () Int)
(declare-fun x67 () Int)
(declare-fun x405 (Int Int) Int)
(declare-fun x468 () Int)
(declare-fun x564 () Int)
(declare-fun x117 () Int)
(declare-fun x401 () Int)
(declare-fun x298 () Bool)
(declare-fun x267 () Int)
(declare-fun x19 () Int)
(declare-fun x475 (x257) Int)
(declare-fun x382 () Int)
(declare-fun x523 () Int)
(declare-fun x220 () Bool)
(declare-fun x557 () Int)
(declare-fun x682 () Int)
(declare-fun x652 () Int)
(declare-fun x157 () Bool)
(declare-fun x175 () Int)
(declare-fun x230 () Bool)
(declare-fun x389 () Int)
(declare-fun x348 () Int)
(declare-fun x548 () Int)
(declare-fun x390 () Int)
(declare-fun x612 () Int)
(declare-fun x507 () Int)
(declare-fun x248 () Bool)
(declare-fun x80 () Int)
(declare-fun x595 () Int)
(declare-fun x148 () Int)
(declare-fun x412 () Int)
(declare-fun x634 () Int)
(declare-fun x358 () Int)
(declare-fun x192 () Int)
(declare-fun x291 () Int)
(declare-fun x131 () Bool)
(declare-fun x424 () Int)
(declare-fun x570 () Bool)
(declare-fun x747 () Int)
(declare-fun x753 () Bool)
(declare-fun x344 () Int)
(declare-fun x651 () Int)
(declare-fun x506 () Int)
(declare-fun x544 () Int)
(declare-fun x580 () Int)
(declare-fun x755 () Int)
(declare-fun x732 () Int)
(declare-fun x305 () Int)
(declare-fun x733 () Int)
(declare-fun x599 () Int)
(declare-fun x142 () Bool)
(declare-fun x282 () Int)
(declare-fun x37 () Bool)
(declare-fun x536 () Int)
(declare-fun x247 () Int)
(declare-fun x361 () Int)
(declare-fun x133 () Int)
(declare-fun x670 () Int)
(declare-fun x765 () Bool)
(declare-fun x620 () Bool)
(declare-fun x23 () Bool)
(declare-fun x270 () Bool)
(declare-fun x491 () Bool)
(declare-fun x38 (Int) Int)
(declare-fun x352 () Bool)
(declare-fun x443 () Int)
(declare-fun x447 () Int)
(declare-fun x383 () Int)
(declare-fun x212 () Int)
(declare-fun x433 () Bool)
(declare-fun x345 () Bool)
(declare-fun x1 () Int)
(declare-fun x318 () Bool)
(declare-fun x141 () Int)
(declare-fun x64 () Int)
(declare-fun x744 (Int Int) Int)
(declare-fun x440 () Int)
(declare-fun x349 () Bool)
(declare-fun x55 () Int)
(declare-fun x571 () Bool)
(declare-fun x722 () Bool)
(declare-fun x6 () Int)
(declare-fun x45 () Int)
(declare-fun x66 () Int)
(declare-fun x503 () Bool)
(declare-fun x554 () Bool)
(declare-fun x228 () Int)
(declare-fun x176 () Int)
(declare-fun x626 () Int)
(declare-fun x240 () Int)
(declare-fun x250 () Bool)
(declare-fun x643 (Int) Int)
(declare-fun x498 () Int)
(declare-fun x568 () Int)
(declare-fun x47 () Int)
(declare-fun x719 () Int)
(declare-fun x718 () Int)
(declare-fun x239 () Int)
(declare-fun x371 () Bool)
(declare-fun x99 () Int)
(declare-fun x734 () Int)
(declare-fun x432 () Int)
(declare-fun x288 () Int)
(declare-fun x474 () Int)
(declare-fun x773 () Int)
(declare-fun x379 () Int)
(declare-fun x275 () Int)
(declare-fun x666 () Int)
(declare-fun x477 () Bool)
(declare-fun x749 () Bool)
(declare-fun x577 () Int)
(declare-fun x204 () Bool)
(declare-fun x546 () Int)
(declare-fun x746 () Int)
(declare-fun x646 () Bool)
(declare-fun x18 () Int)
(declare-fun x264 () Int)
(declare-fun x81 () Int)
(declare-fun x357 () Int)
(declare-fun x249 () Int)
(declare-fun x726 () Bool)
(declare-fun x77 () Int)
(declare-fun x261 () x257)
(declare-fun x259 () Int)
(declare-fun x110 () Int)
(declare-fun x674 () Int)
(declare-fun x695 () Bool)
(declare-fun x495 () Int)
(declare-fun x208 () Bool)
(declare-fun x52 () Int)
(declare-fun x238 () Int)
(declare-fun x85 () Int)
(declare-fun x397 () Bool)
(declare-fun x255 () Int)
(declare-fun x195 () Int)
(declare-fun x601 () Int)
(declare-fun x210 () Bool)
(declare-fun x59 () Int)
(declare-fun x147 () Int)
(declare-fun x585 () Int)
(declare-fun x517 () Int)
(declare-fun x692 () Bool)
(declare-fun x627 () Int)
(declare-fun x89 () Int)
(declare-fun x762 () Int)
(declare-fun x723 () Bool)
(declare-fun x49 () Int)
(declare-fun x469 () Int)
(declare-fun x292 () Int)
(declare-fun x293 () Int)
(declare-fun x558 () Int)
(declare-fun x120 () Bool)
(declare-fun x268 () Int)
(declare-fun x635 () Int)
(declare-fun x216 () Int)
(declare-fun x613 () Int)
(declare-fun x199 () Int)
(declare-fun x450 () Int)
(declare-fun x198 () Bool)
(declare-fun x415 () Int)
(declare-fun x508 () Int)
(declare-fun x483 () Bool)
(declare-fun x387 () Int)
(declare-fun x16 () Int)
(declare-fun x98 () Int)
(declare-fun x296 () Bool)
(declare-fun x535 () Bool)
(declare-fun x173 () Bool)
(declare-fun x698 () Int)
(declare-fun x556 () Int)
(declare-fun x27 () Int)
(declare-fun x562 () x257)
(declare-fun x645 () Bool)
(declare-fun x484 () Int)
(declare-fun x715 () Int)
(declare-fun x301 () Bool)
(declare-fun x758 () Int)
(declare-fun x279 () Int)
(declare-fun x312 () Int)
(declare-fun x48 () Int)
(declare-fun x493 () Int)
(declare-fun x604 () Int)
(declare-fun x211 () Int)
(declare-fun x603 () Bool)
(declare-fun x61 () Int)
(declare-fun x423 () Int)
(declare-fun x582 () Int)
(declare-fun x591 () Int)
(declare-fun x528 () Int)
(declare-fun x618 () Int)
(declare-fun x57 () Bool)
(declare-fun x414 () Int)
(declare-fun x584 () Int)
(declare-fun x271 () Int)
(declare-fun x286 () Bool)
(declare-fun x459 () Int)
(declare-fun x759 () Int)
(declare-fun x328 () Int)
(declare-fun x552 () Int)
(declare-fun x36 () Int)
(declare-fun x549 () Int)
(declare-fun x219 () Int)
(declare-fun x207 () Int)
(declare-fun x218 () Int)
(declare-fun x205 () Bool)
(declare-fun x164 () Int)
(declare-fun x213 () Int)
(declare-fun x26 () Int)
(declare-fun x134 () Int)
(declare-fun x374 () Int)
(declare-fun x700 () Int)
(declare-fun x65 () Bool)
(declare-fun x30 () Bool)
(declare-fun x277 () Int)
(declare-fun x561 () Int)
(declare-fun x50 () Int)
(declare-fun x74 () Int)
(declare-fun x5 () Int)
(declare-fun x337 () Int)
(declare-fun x384 () Int)
(declare-fun x430 () Int)
(declare-fun x418 () Bool)
(declare-fun x399 () Int)
(declare-fun x761 () Int)
(declare-fun x772 () Int)
(declare-fun x96 () Int)
(declare-fun x325 () Int)
(declare-fun x576 () Bool)
(declare-fun x258 () Int)
(declare-fun x631 () Int)
(declare-fun x136 () Int)
(declare-fun x179 () Int)
(declare-fun x485 () Int)
(declare-fun x106 () Int)
(declare-fun x12 () Int)
(declare-fun x190 () Int)
(declare-fun x632 () Int)
(declare-fun x191 () Int)
(declare-fun x278 () Int)
(declare-fun x751 () Int)
(declare-fun x25 () Int)
(declare-fun x768 () Int)
(declare-fun x659 () Int)
(declare-fun x3 () Int)
(declare-fun x436 () Int)
(declare-fun x130 () Int)
(declare-fun x593 () Int)
(declare-fun x736 () Int)
(declare-fun x229 () Bool)
(declare-fun x370 () Int)
(declare-fun x123 () Int)
(declare-fun x217 () Bool)
(declare-fun x225 () Int)
(declare-fun x72 () Bool)
(declare-fun x426 () Bool)
(declare-fun x637 () Int)
(declare-fun x466 () Int)
(declare-fun x665 () Int)
(declare-fun x388 () Int)
(declare-fun x342 (Int) Int)
(declare-fun x572 () Int)
(declare-fun x308 () Int)
(declare-fun x555 () Int)
(declare-fun x295 () Bool)
(declare-fun x525 () Int)
(declare-fun x333 () Int)
(declare-fun x79 () Int)
(declare-fun x273 () Int)
(declare-fun x452 () Int)
(declare-fun x353 () Int)
(declare-fun x368 () Int)
(declare-fun x431 () Bool)
(declare-fun x84 () Int)
(declare-fun x489 () Bool)
(declare-fun x657 () Int)
(declare-fun x739 () Bool)
(declare-fun x373 () Int)
(declare-fun x83 () Bool)
(declare-fun x263 () Int)
(declare-fun x710 () Int)
(declare-fun x335 () Int)
(declare-fun x675 () Int)
(declare-fun x408 () Int)
(declare-fun x166 () x257)
(declare-fun x372 () Int)
(declare-fun x487 () Int)
(declare-fun x354 (Int Int) Int)
(declare-fun x721 () Int)
(declare-fun x304 (Int) Int)
(declare-fun x538 () Bool)
(declare-fun x403 () Int)
(declare-fun x420 (x257) Int)
(declare-fun x742 () Int)
(declare-fun x609 () Bool)
(declare-fun x160 () Int)
(declare-fun x307 () Int)
(declare-fun x359 () Bool)
(declare-fun x457 () Bool)
(declare-fun x454 () Int)
(declare-fun x406 () Int)
(declare-fun x486 (x257) Int)
(declare-fun x63 () Int)
(declare-fun x139 () Int)
(declare-fun x716 () Int)
(declare-fun x231 () Bool)
(declare-fun x764 () Int)
(declare-fun x76 () Int)
(declare-fun x569 () Int)
(declare-fun x221 () Int)
(declare-fun x494 () x257)
(declare-fun x234 () Int)
(declare-fun x586 () Int)
(declare-fun x720 () Bool)
(declare-fun x446 () Int)
(declare-fun x364 () Int)
(declare-fun x226 () Int)
(declare-fun x149 () Int)
(declare-fun x505 () Bool)
(declare-fun x183 () Int)
(declare-fun x146 () Int)
(declare-fun x256 () Int)
(declare-fun x78 () Bool)
(declare-fun x170 () Int)
(declare-fun x427 () Bool)
(declare-fun x642 () Int)
(declare-fun x563 () Int)
(declare-fun x735 () Int)
(declare-fun x551 () Int)
(declare-fun x138 () Int)
(declare-fun x290 () Int)
(declare-fun x32 () Int)
(declare-fun x140 () Int)
(declare-fun x488 () Int)
(declare-fun x655 () Int)
(declare-fun x441 () Int)
(declare-fun x202 () Int)
(declare-fun x42 () Bool)
(declare-fun x567 () x257)
(declare-fun x581 (Int) x257)
(declare-fun x537 () Int)
(declare-fun x763 () Int)
(declare-fun x315 () Int)
(declare-fun x125 () Int)
(declare-fun x633 () Int)
(declare-fun x144 () Int)
(declare-fun x178 () Int)
(declare-fun x590 () Bool)
(declare-fun x331 () Bool)
(declare-fun x366 (Int) Int)
(declare-fun x114 () Bool)
(declare-fun x724 () Int)
(declare-fun x392 () Int)
(declare-fun x126 () Int)
(declare-fun x154 () Int)
(declare-fun x629 () Bool)
(declare-fun x547 () Bool)
(declare-fun x29 () Int)
(declare-fun x111 () Int)
(declare-fun x330 () Int)
(declare-fun x262 () Int)
(declare-fun x2 () Int)
(declare-fun x560 () Int)
(declare-fun x151 () Int)
(declare-fun x766 () Bool)
(declare-fun x533 () Int)
(declare-fun x135 () Int)
(declare-fun x696 () Bool)
(declare-fun x492 () Int)
(declare-fun x356 () Bool)
(declare-fun x103 () Int)
(declare-fun x428 () Bool)
(declare-fun x365 () Int)
(declare-fun x274 () Int)
(declare-fun x181 () x257)
(declare-fun x687 () Int)
(declare-fun x705 (x257) Int)
(declare-fun x197 () Bool)
(declare-fun x640 () Int)
(declare-fun x589 () Bool)
(declare-fun x676 () Int)
(declare-fun x105 () Int)
(declare-fun x425 () Bool)
(declare-fun x71 () Int)
(declare-fun x88 () Int)
(declare-fun x482 () Bool)
(declare-fun x165 () Int)
(declare-fun x583 () Int)
(declare-fun x163 () Int)
(declare-fun x605 () Int)
(declare-fun x521 () Int)
(declare-fun x132 () Bool)
(declare-fun x579 () Bool)
(declare-fun x752 () Int)
(declare-fun x683 () Int)
(declare-fun x539 () Int)
(declare-fun x14 () Bool)
(declare-fun x122 () Bool)
(declare-fun x185 () Bool)
(declare-fun x704 () x257)
(declare-fun x648 () Int)
(declare-fun x86 () Int)
(declare-fun x316 () Int)
(declare-fun x150 () Bool)
(declare-fun x90 () Int)
(declare-fun x320 () Int)
(declare-fun x44 () Int)
(declare-fun x104 () Int)
(define-fun x332 ((x257 x257) (x187 Int)) x257 (ite ((_ is x94) x257) (x94 (x17 x257) (+ (x152 x257) x187)) (ite ((_ is x46) x257) (x46 (x725 x257) (x186 x257) (+ x187 (x566 x257))) (ite ((_ is x460) x257) (x460 (x253 x257) (x429 x257) (x398 x257) (x522 x257) (+ x187 (x404 x257))) (x421 (+ (x232 x257) x187))))))
(define-fun x449 ((x8 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x8) (<= 0 x8)) x8 (- x8 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x614 ((x8 Int)) Int (ite (and (> 0 x8) (>= x8 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x8) x8))
(define-fun x701 ((x471 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x471) (<= 0 x471)))
(define-fun x743 ((x471 Int)) Bool (and (= (x405 x471 115792089237316195423570985008687907853269984665640564039457584007913129639935) x471) (= x471 (x405 115792089237316195423570985008687907853269984665640564039457584007913129639935 x471))))
(define-fun x699 ((x471 Int)) Bool (and (= (x405 0 x471) 0) (= 0 (x405 x471 0))))
(define-fun x196 ((x471 Int)) Bool (= x471 (x405 x471 x471)))
(define-fun x714 ((x471 Int)) Bool (and (x196 x471) (x743 x471) (x699 x471)))
(define-fun x578 ((x471 Int) (x319 Int)) Bool (= (x405 x319 x471) (x405 x471 x319)))
(define-fun x707 ((x471 Int) (x319 Int)) Bool (and (>= (x405 x471 x319) 0) (=> (>= x319 0) (>= x319 (x405 x471 x319))) (=> (<= 0 x471) (<= (x405 x471 x319) x471))))
(define-fun x241 ((x471 Int) (x319 Int)) Bool (and (x707 x471 x319) (x578 x471 x319)))
(define-fun x393 ((x471 Int)) Bool (= (mod x471 256) (x405 x471 255)))
(define-fun x662 ((x471 Int)) Bool (and (x393 x471) (x241 x471 255)))
(define-fun x53 ((x471 Int)) Bool (= (x405 x471 1461501637330902918203684832716283019655932542975) (mod x471 1461501637330902918203684832716283019655932542976)))
(define-fun x667 ((x471 Int)) Bool (and (x53 x471) (x241 x471 1461501637330902918203684832716283019655932542975)))
(define-fun x351 ((x471 Int)) Bool (= (mod x471 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x471 79228162514264337593543950336) (x405 x471 115792089237316195423570985008687907853269984665561335876943319670319585689600))))
(define-fun x713 ((x471 Int)) Bool (and (x241 x471 115792089237316195423570985008687907853269984665561335876943319670319585689600) (x351 x471)))
(define-fun x118 ((x471 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x744 115792089237316195423570985008687907853269984665640564039457584007913129639935 x471)) (= (x744 x471 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x636 ((x471 Int)) Bool (and (= x471 (x744 0 x471)) (= x471 (x744 x471 0))))
(define-fun x385 ((x471 Int)) Bool (= x471 (x744 x471 x471)))
(define-fun x87 ((x471 Int)) Bool (and (x385 x471) (x118 x471) (x636 x471)))
(define-fun x451 ((x471 Int) (x319 Int)) Bool (= (x744 x319 x471) (x744 x471 x319)))
(define-fun x470 ((x471 Int) (x319 Int)) Bool (and (>= (+ x319 x471) (x744 x471 x319)) (=> (>= x319 0) (<= x319 (x744 x471 x319))) (=> (<= 0 x471) (<= x471 (x744 x471 x319)))))
(define-fun x194 ((x471 Int) (x319 Int)) Bool (and (x451 x471 x319) (x470 x471 x319)))
(define-fun x602 ((x471 Int)) Bool (= (- x471 (x405 x471 26959946660873538059280334323183841250429478006438217036639575736320)) (x405 x471 115792089210356248762697446949407573530086143415211086033019366971273553903615)))
(define-fun x294 ((x471 Int)) Bool (and (x241 x471 115792089210356248762697446949407573530086143415211086033019366971273553903615) (x602 x471)))
(define-fun x689 ((x471 Int)) Bool (= (mod x471 26959946667150639794667015087019630673637144422540572481103610249216) (+ (x405 x471 26959946660873538059280334323183841250429478006438217036639575736320) (mod x471 6277101735386680763835789423207666416102355444464034512896))))
(define-fun x465 ((x471 Int)) Bool (and (x241 x471 26959946660873538059280334323183841250429478006438217036639575736320) (x689 x471)))
(define-fun x252 ((x471 Int)) Bool (= (mod x471 26959946667150639794667015087019630673637144422540572481103610249216) (x405 x471 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x40 ((x471 Int)) Bool (and (x241 x471 26959946667150639794667015087019630673637144422540572481103610249215) (x252 x471)))
(define-fun x664 ((x771 Int)) Int (x748 x771))
(define-fun x588 ((x771 Int)) Int (ite (= 128 x771) x681 (x342 x771)))
(define-fun x327 ((x771 Int)) Int (ite (= x771 160) (ite x482 1 0) (x588 x771)))
(define-fun x623 ((x771 Int)) Int (x748 x771))
(define-fun x624 ((x771 Int)) Int (ite (= 128 x771) x77 (x377 x771)))
(define-fun x597 ((x771 Int)) Int (ite (= x771 160) (ite x145 1 0) (x624 x771)))
(define-fun x169 ((x771 Int)) Int (x748 x771))
(define-fun x322 ((x771 Int)) Int (ite (= x771 128) x96 (x643 x771)))
(define-fun x694 ((x771 Int)) Int (ite (= 160 x771) (ite x356 1 0) (x322 x771)))
(define-fun x455 ((x771 Int)) Int (ite (= x771 128) x511 (x677 x771)))
(define-fun x15 ((x771 Int)) Int (ite (= 160 x771) (ite x535 1 0) (x455 x771)))
(define-fun x127 ((x771 Int)) Int (x748 x771))
(define-fun x251 ((x771 x257)) Int (ite (= x166 x771) x686 (x475 x771)))
(define-fun x260 ((x771 Int)) Int (ite (= 128 x771) x649 (x304 x771)))
(define-fun x346 ((x771 Int)) Int (ite (= x771 160) (ite x298 1 0) (x260 x771)))
(define-fun x610 ((x771 Int)) Int (ite (= x771 x467) 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x366 x771)))
(define-fun x276 ((x771 Int)) Int (ite (= x771 x467) 0 (x610 x771)))
(define-fun x481 ((x771 Int)) Int (ite (= x509 x771) 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x276 x771)))
(define-fun x119 ((x771 Int)) Int (ite (= x771 x263) (x705 x567) (x481 x771)))
(define-fun x496 ((x771 Int)) Int (ite (= x469 x771) x234 (x119 x771)))
(define-fun x737 ((x771 Int)) Int (ite (= x771 x100) x437 (x496 x771)))
(define-fun x355 ((x771 Int)) Int (ite (= x509 x771) (ite true 1 0) (x737 x771)))
(define-fun x311 ((x771 Int)) Int (ite x505 (x355 x771) (x366 x771)))
(define-fun x678 ((x771 Int)) Int (ite (= x771 x225) 46861972923178205566985210922759877011903582497231265773045854621316061069312 (x311 x771)))
(define-fun x658 ((x771 Int)) Int (ite (and (>= x771 x225) (> (+ 32 x225) x771)) (x38 (+ 0 (- x771 x225))) (x678 x771)))
(define-fun x317 ((x771 Int)) Int (x748 x771))
(define-fun x730 ((x471 Int)) Bool (=> (and (not (= x471 503383097)) (not (= 743225245 x471)) (not (= 115792089210356248762697446949407573530086143415211086033019366971273553903615 x471)) (not (= x471 1062488491900878629424266116482631147622884293147)) (not (= 922701707 x471)) (not (= x471 3714247998)) (not (= 2580288415 x471)) (not (= x471 3506505391)) (not (= x471 106320276355336348263208190817157392285036095892762275362566149969828045127680)) (not (= x471 26959946667150639794667015087019630673637144422540572481103610249216)) (not (= 3943638230 x471)) (not (= x471 910484757)) (not (= 26959946667150639794667015087019630673637144422540572481103610249215 x471)) (not (= x471 3567393941)) (not (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 x471)) (not (= x471 3573918927)) (not (= 363856219 x471)) (not (= x471 1862597803)) (not (= 307731845 x471)) (not (= x471 238709543)) (not (= 3002540418 x471)) (not (= 954831406 x471)) (not (= 110688705405039355050572217931781119515373813223972846963051619115990310191104 x471)) (not (= 3224796394 x471)) (not (= x471 4035674854)) (not (= 519173431 x471)) (not (= x471 5000000)) (not (= 2966737888 x471)) (not (= 4102657848 x471)) (not (= x471 1840041978)) (not (= 2127478272 x471)) (not (= x471 86400)) (not (= x471 4105672269)) (not (= 500647658 x471)) (not (= 3812870723 x471)) (not (= 596258137 x471)) (not (= x471 3586168516)) (not (= 100000 x471)) (not (= x471 1738207182)) (not (= x471 36576266130383907740409294828766280552204369950469466485900666250106563985408)) (not (= x471 228615836)) (not (= 4112205658 x471)) (not (= 1984976886 x471)) (not (= x471 822145385)) (not (= x471 826074471)) (not (= 3871629458 x471)) (not (= x471 361691454)) (not (= 2039265891 x471)) (not (= x471 1439069736)) (not (= 4294967296 x471)) (not (= x471 3366849169)) (not (= x471 3890975986)) (not (= x471 3996650231)) (not (= x471 1816029635)) (not (= 599290589 x471)) (not (= 3008386744 x471)) (not (= 790236105 x471)) (not (= 2863377861 x471)) (> x471 10000) (not (= x471 1531409238)) (not (= x471 2876725745)) (not (= 3249860859 x471)) (not (= x471 686821956)) (not (= x471 25742203781880459408941457317362166305709681742799472914177068605934923677696)) (not (= x471 1356689113)) (not (= x471 79228162514264337593543950335)) (not (= 3051865383 x471)) (not (= x471 2064814097)) (not (= 3670205928 x471)) (not (= x471 6277101735386680763835789423207666416102355444464034512895)) (not (= x471 1871194811)) (not (= x471 46861972923178205566985210922759877011903582497231265773045854621316061069312)) (not (= 1461501637330902918203684832716283019655932542975 x471)) (not (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 x471)) (not (= 115792089237316195423570985008687907853269984665561335876943319670319585689600 x471)) (not (= x471 21304723245256853039595661774342629002073543191790936201937503064778531143680))) (not ((_ is x421) (x581 x471)))))
(assert (x701 x762))
(assert (= (x421 500647658) (x581 500647658)))
(assert (x701 x513))
(assert (x701 x519))
(assert (x730 954831406))
(assert (= (x581 2039265891) (x421 2039265891)))
(assert (= (x421 1439069736) (x581 1439069736)))
(assert (x701 x448))
(assert (x701 x138))
(assert (x701 x348))
(assert (= (x421 36576266130383907740409294828766280552204369950469466485900666250106563985408) (x581 36576266130383907740409294828766280552204369950469466485900666250106563985408)))
(assert (= x172 (=> (and (= (x251 (x421 15)) x575) (= x634 (x251 (x421 16))) (= (x449 (+ x341 x729)) x81) (<= 0 x239) (= (x405 26959946667150639794667015087019630673637144422540572481103610249215 x201) x43) (= x440 x604) (= x400 x479) (not (= x655 0)) (= x255 (x251 (x421 14))) (= x583 64) (= 0 x358) (< x742 3224796394) (= (x449 (+ x316 x392)) x410) (not (> 2127478272 x742)) (= x607 (x405 1461501637330902918203684832716283019655932542975 x62)) (= x672 (x744 x392 x316)) (= x698 x648) (= x454 (x33 x445 96)) (= x472 x144) (= x773 x129) (= (< x440 x634) x301) (not (> 2580288415 x742)) (= x392 x24) (= 0 x79) (= x5 255) (= 32 x642) (= x316 (x354 x267 192)) (= 224 x55) (= x115 255) (= x59 (ite (>= 79228162514264337593543950335 x729) x81 (ite x438 x459 x300))) (= (x475 x494) x479) (> x651 0) (= x103 (x449 (+ x316 x392))) (>= 1461501637330902918203684832716283019655932542975 x323) (= (x486 (x581 x437)) x651) (= x500 x212) (= (x46 (x581 x136) (x421 17) 0) x166) (not (> 3008386744 x742)) (= (x354 x568 224) x768) (= (x251 (x421 13)) x700) (= (x46 (x581 x136) (x421 17) 0) x494) (= x401 x731) (= 32 x164) (= 0 x454) (= (<= x392 6277101735386680763835789423207666416102355444464034512895) x338) (not (> 2863377861 x742)) (= x201 x772) (= (>= 79228162514264337593543950335 x729) x438) (= x313 (x33 x445 96)) (= x572 255) (= x102 (x33 x267 32)) (< x35 4294967296) (= x225 x606) (= 32 x312) (= (x33 x568 32) x79) (= 255 x545) (= x144 x616) (= x63 64) (= (x486 (x581 x607)) x113) (= x24 (x405 115792089210356248762697446949407573530086143415211086033019366971273553903615 x357)) (not (= x742 3008386744)) (= (x744 x341 x729) x300) (= x445 (x658 x606)) (= x273 x227) (= (x449 (+ x341 x729)) x459) (= x239 x698) (= x323 x731) (= x686 (x449 (+ x43 x768))) (= x772 (ite (>= 6277101735386680763835789423207666416102355444464034512895 x392) x410 (ite x338 x103 x672))) (= x568 (x449 (+ x493 x125))) (= 32 x307) (= 256 x105) (>= x323 0) (= x341 x417) (= x485 192) (= x729 x445) (not (or (and (= (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x35 32)) (> x35 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 0 x113)) (= 0 x102) (>= 1461501637330902918203684832716283019655932542975 x239) (= x154 x193) (= x742 3051865383) (= x637 x401) (= x472 0) (= x357 x59) (>= 1461501637330902918203684832716283019655932542975 x348) (= x313 0) (= (x405 1461501637330902918203684832716283019655932542975 x62) x655) (= x423 x333) (= x82 96) (= (x405 115792089237316195423570985008687907853269984665561335876943319670319585689600 x400) x417) (<= 0 x348)) (and (=> (and (and (or (and (and (= x237 (x614 (- x634 x575))) (= x543 (x449 (+ x700 x138))) (= (x614 (- x440 x575)) x189) (= (x614 (- x255 x700)) x12) (= x138 (div x191 x237)) (= (mod (* x189 x12) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x191) (= x543 x226) (> x237 0)) x206) (and (and (= (x614 (- x440 x575)) x718) (= x754 (x614 (- x634 x575))) (< 0 x754) (= x259 (x614 (- x700 x255))) (= (x614 (- x700 x117)) x97) (= x97 x226) (= x117 (div x320 x754)) (= (mod (* x259 x718) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x320)) (not x206))) (= x206 (> x255 x700))) x301) x295) (=> (and (not x301) (and (= x409 0) (= x255 x511))) x231)))))
(assert (= 1439069736 (x705 (x421 1439069736))))
(assert (x701 x573))
(assert (x701 x403))
(assert (= (or x646 x723) x359))
(assert (= x215 (and x114 x433)))
(assert (= (x421 25742203781880459408941457317362166305709681742799472914177068605934923677696) (x581 25742203781880459408941457317362166305709681742799472914177068605934923677696)))
(assert (x701 x648))
(assert (= x396 (and x529 x31)))
(assert (= (=> (and (or (and (= x170 x62) x491) (and (not x491) (and (= (ite x185 x9 x147) x62) (= x185 (= 1 x136))))) (= x491 (= 0 x136))) x172) x668))
(assert (x701 x282))
(assert (x701 x143))
(assert (= (x581 822145385) (x421 822145385)))
(assert (x701 x500))
(assert (x701 x48))
(assert (= (x581 228615836) (x421 228615836)))
(assert (x194 x392 x316))
(assert (= (x705 (x421 1531409238)) 1531409238))
(assert (= (or x512 x396 x57) x83))
(assert (= (x581 2863377861) (x421 2863377861)))
(assert (x701 x110))
(assert (x701 x246))
(assert (x701 x140))
(assert (x701 x523))
(assert (x701 x644))
(assert (x701 x337))
(assert (x701 x728))
(assert (x701 x637))
(assert (=> (<= (x33 x548 224) 10000) (= (x581 (x33 x548 224)) (x421 (x33 x548 224)))))
(assert (= (x421 79228162514264337593543950335) (x581 79228162514264337593543950335)))
(assert (x701 x103))
(assert (x701 x515))
(assert (= (and (not x570) x184) x726))
(assert (x701 x550))
(assert (x701 x560))
(assert (x701 x307))
(assert (x701 x49))
(assert (x701 x82))
(assert (x701 x432))
(assert (x701 x556))
(assert (x701 x498))
(assert (x701 x548))
(assert (x701 x493))
(assert (x701 x387))
(assert (x701 x268))
(assert (x701 x130))
(assert (x701 x415))
(assert (x701 x324))
(assert (x701 x123))
(assert (x701 x267))
(assert (x701 x263))
(assert (= (and x222 x579) x541))
(assert (x701 x499))
(assert (x701 x490))
(assert (= x203 (x705 (x581 x203))))
(assert (x701 x2))
(assert (x701 x45))
(assert (x701 x77))
(assert (= (x581 1816029635) (x421 1816029635)))
(assert (x701 x291))
(assert (x701 x492))
(assert (= (x581 743225245) (x421 743225245)))
(assert (x701 x444))
(assert (= (and x222 (not x579)) x132))
(assert (x701 x55))
(assert (x701 x768))
(assert (x701 x302))
(assert (x701 x339))
(assert (= (x421 3670205928) (x581 3670205928)))
(assert (x701 x461))
(assert (= (x705 (x421 1356689113)) 1356689113))
(assert (x701 x663))
(assert (x701 x635))
(assert (x701 x411))
(assert (= x287 (and x42 (not x14))))
(assert (x701 x717))
(assert (x701 x516))
(assert (x87 x392))
(assert (x701 x583))
(assert (x701 x98))
(assert (x701 x546))
(assert (x701 x467))
(assert (x701 x604))
(assert (= (x421 100000) (x581 100000)))
(assert (x701 x754))
(assert (x701 x129))
(assert (x701 x75))
(assert (= (x33 x568 32) (div x568 4294967296)))
(assert (= x184 (and x93 x532)))
(assert (x701 x430))
(assert (x701 x312))
(assert (x701 x379))
(assert (= (x705 (x581 x337)) x337))
(assert (= x210 (=> (and (= x403 x716) (= x336 x98)) x122)))
(assert (= 0 (x366 x606)))
(assert (= (x421 3567393941) (x581 3567393941)))
(assert (= (x421 110688705405039355050572217931781119515373813223972846963051619115990310191104) (x581 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (= (x705 (x421 5000000)) 5000000))
(assert (x701 x136))
(assert (x701 x652))
(assert (x701 x176))
(assert (= (x705 (x421 3890975986)) 3890975986))
(assert (= (x581 3051865383) (x421 3051865383)))
(assert (x701 x569))
(assert (x701 x381))
(assert (= (x581 1871194811) (x421 1871194811)))
(assert (= (x421 790236105) (x581 790236105)))
(assert (x701 x606))
(assert (x701 x146))
(assert (= x709 (and x229 (not x21))))
(assert (x701 x100))
(assert (x701 x767))
(assert (x701 x20))
(assert (=> (>= 10000 x124) (= (x421 x124) (x581 x124))))
(assert (= (and x69 x286) x505))
(assert (= (mod (* x267 6277101735386680763835789423207666416102355444464034512896) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x354 x267 192)))
(assert (x701 x320))
(assert (x714 x400))
(assert (x701 x528))
(assert (= (x705 (x421 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= 2064814097 (x705 (x421 2064814097))))
(assert (x701 x280))
(assert (= (x581 3506505391) (x421 3506505391)))
(assert (x701 x616))
(assert (x701 x149))
(assert (x701 x384))
(assert (x701 x741))
(assert (x701 x653))
(assert (x701 x517))
(assert (= (=> (and (= x155 1) (= x182 x77)) x331) x501))
(assert (= 238709543 (x705 (x421 238709543))))
(assert (x701 x9))
(assert (x701 x126))
(assert (x701 x437))
(assert (x701 x329))
(assert (x701 x511))
(assert (x701 x436))
(assert (= (x33 x267 32) (div x267 4294967296)))
(assert (x701 x1))
(assert (x701 x424))
(assert (= x646 (and x198 x541)))
(assert (x701 x3))
(assert (= x42 (and x541 (not x198))))
(assert (x701 x300))
(assert (x730 x607))
(assert (x701 x121))
(assert (x701 x526))
(assert (= (x705 (x421 3506505391)) 3506505391))
(assert (x701 x443))
(assert (x701 x191))
(assert (x701 x50))
(assert (= x233 (=> (and (= 1 x635) (= x96 x126)) x235)))
(assert (x701 x416))
(assert (x701 x264))
(assert (x701 x508))
(assert (x701 x155))
(assert (x701 x262))
(assert (x701 x632))
(assert (= (x581 5000000) (x421 5000000)))
(assert (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 (x705 (x421 106320276355336348263208190817157392285036095892762275362566149969828045127680))))
(assert (= (x581 86400) (x421 86400)))
(assert (= (x581 3714247998) (x421 3714247998)))
(assert (= (x581 1862597803) (x421 1862597803)))
(assert (= true x159))
(assert (= (and x250 x375) x645))
(assert (x701 x19))
(assert (= 115792089237316195423570985008687907853269984665561335876943319670319585689600 (x705 (x421 115792089237316195423570985008687907853269984665561335876943319670319585689600))))
(assert (x701 x361))
(assert (= 36576266130383907740409294828766280552204369950469466485900666250106563985408 (x705 (x421 36576266130383907740409294828766280552204369950469466485900666250106563985408))))
(assert (x701 x582))
(assert (x701 x124))
(assert (= (and (not x301) x101) x73))
(assert (= (x581 3002540418) (x421 3002540418)))
(assert (= (x421 596258137) (x581 596258137)))
(assert (= x749 (and x114 (not x433))))
(assert (x701 x258))
(assert (x701 x225))
(assert (x701 x154))
(assert (x701 x202))
(assert (x701 x24))
(assert (x701 x688))
(assert (x701 x34))
(assert (x701 x633))
(assert (x701 x85))
(assert (= (x581 21304723245256853039595661774342629002073543191790936201937503064778531143680) (x421 21304723245256853039595661774342629002073543191790936201937503064778531143680)))
(assert (x701 x167))
(assert (x701 x244))
(assert (x701 x476))
(assert (= (x421 115792089210356248762697446949407573530086143415211086033019366971273553903615) (x581 115792089210356248762697446949407573530086143415211086033019366971273553903615)))
(assert (x701 x386))
(assert (x701 x478))
(assert (x701 x309))
(assert (x701 x545))
(assert (x701 x759))
(assert (x701 x586))
(assert (= (x581 1984976886) (x421 1984976886)))
(assert (x730 x337))
(assert (x701 x226))
(assert (= (and x83 (not x491)) x217))
(assert (= (x705 (x581 x308)) x308))
(assert (x701 x193))
(assert (= (=> (and (and (= x177 (x405 1461501637330902918203684832716283019655932542975 x546)) (< 0 x484) (= x142 (= x710 x177))) (or (and (= 0 x136) x142) (and (not x142) (and (and (= (= x406 x337) x529) (= x406 (x405 1461501637330902918203684832716283019655932542975 x546))) (or (and (= 1 x136) x529) (and (and (= (x405 1461501637330902918203684832716283019655932542975 x546) x630) (= 2 x136) (= x437 x630)) (not x529))))))) x668) x428))
(assert (= (x705 (x421 822145385)) 822145385))
(assert (= (x421 4112205658) (x581 4112205658)))
(assert (x701 x368))
(assert (x701 x514))
(assert (x701 x134))
(assert (= (and x576 x352) x489))
(assert (x701 x62))
(assert (x701 x382))
(assert (= (x581 1840041978) (x421 1840041978)))
(assert (x701 x742))
(assert (x701 x71))
(assert (= 1984976886 (x705 (x421 1984976886))))
(assert (= (x421 115792089237316195423570985008687907853269984665561335876943319670319585689600) (x581 115792089237316195423570985008687907853269984665561335876943319670319585689600)))
(assert (x701 x400))
(assert (= x57 (and x78 x142)))
(assert (= (x705 (x421 922701707)) 922701707))
(assert (x701 x670))
(assert (x701 x459))
(assert (= x369 (=> (and (= (= x291 0) x69) (or (and (and (= (x405 1461501637330902918203684832716283019655932542975 x390) x432) (= x484 (ite x692 1 0)) (= (= x432 x563) x692) (= x467 x225)) (not x69)) (and x69 (and (= (x449 (+ x509 32)) x412) (= 2863377861 x176) (= x422 x256) (>= 1461501637330902918203684832716283019655932542975 x308) (= (ite x158 1 0) x376) (= x412 x225) (= x256 4) (= x200 x376) (= x422 4) (= x263 x88) (= x88 (x449 (+ x509 4))) (= (x449 (+ 32 x469)) x100) (not (> 4 x256)) (< x176 3871629458) (= (not x590) x158) (= x308 (x276 x353)) (not (= 0 x242)) (not (> 2863377861 x176)) (= x590 (= 0 x200)) (< 0 x569) (= (x449 (+ x467 32)) x509) (= (x355 x362) x200) (= x242 (x486 (x581 x203))) (= x469 (x449 (+ x263 32))) (= (x486 (x581 x203)) x569) (= x484 x200) (not (= 0 x86)) (= x121 77196514420459877940035116867124998943289115686762304616657918434777787006976) (= x467 x353) (= x509 x362) (= x86 (x486 (x581 x308))))))) x428)))
(assert (= (x421 3224796394) (x581 3224796394)))
(assert (x701 x321))
(assert (x701 x67))
(assert (= (x581 922701707) (x421 922701707)))
(assert (x730 (x33 x548 224)))
(assert (x701 x18))
(assert (x701 x336))
(assert (x701 x732))
(assert (x701 x314))
(assert (= (x581 3586168516) (x421 3586168516)))
(assert (= x723 (or x109 x173 x205)))
(assert (x701 x666))
(assert (x701 x601))
(assert (= (x581 826074471) (x421 826074471)))
(assert (x701 x564))
(assert (x701 x36))
(assert (x701 x35))
(assert (x730 x437))
(assert (= (and x532 (not x93)) x161))
(assert (x701 x255))
(assert (x701 x112))
(assert (x701 x419))
(assert (= (and x21 x229) x504))
(assert (= (x705 (x421 1738207182)) 1738207182))
(assert (x701 x716))
(assert (= (x705 (x421 26959946667150639794667015087019630673637144422540572481103610249216)) 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x701 x284))
(assert (= (x581 2876725745) (x421 2876725745)))
(assert (x701 x189))
(assert (x701 x642))
(assert (=> (<= x607 10000) (= (x421 x607) (x581 x607))))
(assert (x701 x293))
(assert (x701 x673))
(assert (x701 x326))
(assert (x701 x328))
(assert (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x705 (x421 77196514420459877940035116867124998943289115686762304616657918434777787006976))))
(assert (x701 x199))
(assert (x701 x533))
(assert (x701 x733))
(assert (x701 x681))
(assert (x701 x607))
(assert (x701 x274))
(assert (= (x705 (x581 1356689113)) 1356689113))
(assert (x701 x278))
(assert (x701 x344))
(assert (= (x581 361691454) (x421 361691454)))
(assert (x701 x174))
(assert (x667 x546))
(assert (x701 x712))
(assert (= (x705 (x421 3366849169)) 3366849169))
(assert (= (x33 x445 96) (div x445 79228162514264337593543950336)))
(assert (x701 x447))
(assert (x701 x224))
(assert (x701 x531))
(assert (x701 x285))
(assert (x701 x79))
(assert (= x425 (and x418 x596)))
(assert (x701 x650))
(assert (= 954831406 (x705 (x581 954831406))))
(assert (= (x581 503383097) (x421 503383097)))
(assert (x701 x376))
(assert (x701 x731))
(assert (x701 x618))
(assert (= 4102657848 (x705 (x421 4102657848))))
(assert (=> (>= 10000 x710) (= (x421 x710) (x581 x710))))
(assert (x701 x373))
(assert (= (x705 (x421 228615836)) 228615836))
(assert (x701 x485))
(assert (x701 x238))
(assert (x701 x708))
(assert (x701 x487))
(assert (x701 x458))
(assert (x87 x341))
(assert (x465 x357))
(assert (= (x366 x353) 0))
(assert (x701 x687))
(assert (= (and x206 x296) x702))
(assert (x701 x474))
(assert (x730 790236105))
(assert (x701 x203))
(assert (x701 x575))
(assert (x701 x627))
(assert (x701 x661))
(assert (x701 x165))
(assert (x701 x414))
(assert (= x124 (x705 (x581 x124))))
(assert (x701 x151))
(assert (x701 x502))
(assert (x701 x308))
(assert (x730 x136))
(assert (x701 x649))
(assert (= (x421 3249860859) (x581 3249860859)))
(assert (= 25742203781880459408941457317362166305709681742799472914177068605934923677696 (x705 (x421 25742203781880459408941457317362166305709681742799472914177068605934923677696))))
(assert (x701 x370))
(assert (x701 x510))
(assert (=> (<= x136 10000) (= (x421 x136) (x581 x136))))
(assert (x701 x365))
(assert (x701 x587))
(assert (x701 x279))
(assert (x701 x682))
(assert (= (x421 3573918927) (x581 3573918927)))
(assert (x701 x769))
(assert (x701 x95))
(assert (x701 x273))
(assert (x701 x201))
(assert (x701 x125))
(assert (x701 x325))
(assert (x701 x89))
(assert (x701 x423))
(assert (x701 x207))
(assert (= 100000 (x705 (x421 100000))))
(assert (= (or x589 x702) x722))
(assert (x714 1461501637330902918203684832716283019655932542975))
(assert (x701 x117))
(assert (x701 x466))
(assert (= 3943638230 (x705 (x421 3943638230))))
(assert (x701 x536))
(assert (= (x705 (x581 x437)) x437))
(assert (x701 x746))
(assert (= (x421 2966737888) (x581 2966737888)))
(assert (x701 x568))
(assert (x701 x5))
(assert (x701 x747))
(assert (x701 x271))
(assert (= x611 (and x156 x504)))
(assert (x701 x32))
(assert (x701 x524))
(assert (x701 x153))
(assert (= (x421 686821956) (x581 686821956)))
(assert (x701 x242))
(assert (x701 x626))
(assert (x714 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x701 x542))
(assert (= 3943638230 (x705 (x581 3943638230))))
(assert (x701 x340))
(assert (x701 x335))
(assert (x701 x237))
(assert (x701 x147))
(assert (= (x33 x329 255) (div x329 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (= (and x287 (not x711)) x375))
(assert (x701 x200))
(assert (= (x421 3943638230) (x581 3943638230)))
(assert (x701 x592))
(assert (x701 x738))
(assert (x701 x683))
(assert (= (x421 1461501637330902918203684832716283019655932542975) (x581 1461501637330902918203684832716283019655932542975)))
(assert (x701 x468))
(assert (x701 x551))
(assert (x701 x574))
(assert (x714 x201))
(assert (x701 x163))
(assert (x714 115792089210356248762697446949407573530086143415211086033019366971273553903615))
(assert (x701 x92))
(assert (= 596258137 (x705 (x421 596258137))))
(assert (x701 x440))
(assert (x701 x402))
(assert (x701 x90))
(assert (x701 x333))
(assert (x701 x164))
(assert (x701 x247))
(assert (x701 x718))
(assert (x701 x315))
(assert (= (x421 106320276355336348263208190817157392285036095892762275362566149969828045127680) (x581 106320276355336348263208190817157392285036095892762275362566149969828045127680)))
(assert (=> (>= 10000 x203) (= (x581 x203) (x421 x203))))
(assert (x662 x468))
(assert (x701 x561))
(assert (x730 x203))
(assert (= (x581 46861972923178205566985210922759877011903582497231265773045854621316061069312) (x421 46861972923178205566985210922759877011903582497231265773045854621316061069312)))
(assert (= 2580288415 (x705 (x421 2580288415))))
(assert (= (and x504 (not x156)) x150))
(assert (x701 x549))
(assert (x701 x288))
(assert (= (or x457 x91) x418))
(assert (x730 3943638230))
(assert (x701 x96))
(assert (= (and x711 x287) x109))
(assert (= 3714247998 (x705 (x421 3714247998))))
(assert (= (x421 3890975986) (x581 3890975986)))
(assert (= (x354 x568 224) (mod (* x568 26959946667150639794667015087019630673637144422540572481103610249216) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x701 x58))
(assert (= (x581 519173431) (x421 519173431)))
(assert (= x114 (and x11 x159)))
(assert (x701 x686))
(assert (x701 x665))
(assert (x701 x104))
(assert (x701 x710))
(assert (x701 x593))
(assert (x701 x685))
(assert (= 790236105 (x705 (x581 790236105))))
(assert (x701 x6))
(assert (x701 x105))
(assert (not x37))
(assert (x701 x29))
(assert (= (x705 (x421 6277101735386680763835789423207666416102355444464034512895)) 6277101735386680763835789423207666416102355444464034512895))
(assert (x701 x178))
(assert (= (x705 (x421 4112205658)) 4112205658))
(assert (= (or x695 x726) x464))
(assert (x701 x22))
(assert (= (=> (and (and (= x48 (x597 160)) (= (not (= 0 x155)) x145) (= x19 (x597 128))) (and (and (and (not (= 1738207182 x436)) (= (x486 (x581 x437)) x407) (< x436 1871194811) (not (< x436 954831406)) (> 2127478272 x436) (= 1816029635 x436) (= 1000 x39) (= x676 5000) (not (> 1738207182 x436)) (not (> 1439069736 x436)) (> x407 0)) (and (= x499 x648) (not (= x214 3008386744)) (= 3051865383 x214) (< 0 x573) (= x637 x673) (>= x553 0) (= (x475 (x421 16)) x56) (= (x486 (x581 x437)) x573) (= x32 x212) (<= x553 1461501637330902918203684832716283019655932542975) (= x724 1000) (not (> 2127478272 x214)) (= 0 x379) (= x608 x604) (< x214 3224796394) (= x273 x285) (not (> 3008386744 x214)) (= x154 x130) (= x379 x746) (= x223 (x475 (x421 15))) (= x770 5000000) (= x21 (> x56 x608)) (not (> 2580288415 x214)) (= x492 x499) (= x673 x525) (= x764 x773) (not (> 2863377861 x214)) (= x616 x746) (<= x374 1461501637330902918203684832716283019655932542975) (= (x475 (x421 14)) x90) (<= 0 x492) (= x380 (x475 (x421 13))) (= x310 (<= x757 5000000)) (= x423 x34) (<= 0 x374) (= x525 x553) (<= x492 1461501637330902918203684832716283019655932542975))) (and (= x179 5000) (= (not (= x48 0)) x629) (< x16 596258137) (> 954831406 x16) (not (< x16 500647658)) (< x16 743225245) (= x757 x413) (< 0 x557) (= x16 519173431) (= x281 x19) (= (x486 (x581 x437)) x557) (= x281 x413) (not (= x16 503383097)) (= x64 5000) (not (= 500647658 x16)) (= x629 x766) (> 2127478272 x16)))) (and (=> (and (and (= x635 0) (= x90 x96)) (not x21)) x235) (=> (and x21 (and (or (and (and (= (mod (* x502 x444) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x600) (< 0 x506) (= x717 (div x600 x506)) (= x506 (x614 (- x56 x223))) (= x502 (x614 (- x608 x223))) (= x240 x126) (= (x614 (- x380 x90)) x444) (= x240 (x614 (- x380 x717)))) (not x156)) (and x156 (and (= (x449 (+ x209 x380)) x683) (= x498 (x614 (- x608 x223))) (= x288 (x614 (- x56 x223))) (= x683 x126) (> x288 0) (= (x614 (- x90 x380)) x309) (= x209 (div x587 x288)) (= x587 (mod (* x498 x309) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (= (< x380 x90) x156))) x233))) x331))
(assert (x701 x537))
(assert (x701 x706))
(assert (x701 x580))
(assert (x701 x388))
(assert (x701 x39))
(assert (= (x705 (x581 x710)) x710))
(assert (x701 x543))
(assert (x701 x214))
(assert (x701 x179))
(assert (x714 x546))
(assert (= (x581 4105672269) (x421 4105672269)))
(assert (= (x421 3008386744) (x581 3008386744)))
(assert (x701 x171))
(assert (x701 x180))
(assert (x701 x303))
(assert (x701 x539))
(assert (x701 x323))
(assert (x701 x44))
(assert (x701 x565))
(assert (= (x705 (x421 3567393941)) 3567393941))
(assert (= (x705 (x421 307731845)) 307731845))
(assert (x701 x435))
(assert (x701 x410))
(assert (x701 x640))
(assert (x701 x740))
(assert (x701 x211))
(assert (= 3051865383 (x705 (x421 3051865383))))
(assert (= (and (not x142) x78) x31))
(assert (= 3871629458 (x705 (x421 3871629458))))
(assert (x701 x617))
(assert (x701 x227))
(assert (x701 x362))
(assert (x701 x745))
(assert (x701 x772))
(assert (x701 x84))
(assert (x701 x774))
(assert (x701 x659))
(assert (= x188 (=> (and (= x740 x649) (= x165 1)) x503)))
(assert (x730 x601))
(assert (x701 x177))
(assert (= (x581 599290589) (x421 599290589)))
(assert (= x695 (and x184 x570)))
(assert (= (and (not x11) x159) x457))
(assert (x701 x655))
(assert (x701 x434))
(assert (x701 x108))
(assert (= (x421 26959946667150639794667015087019630673637144422540572481103610249216) (x581 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x701 x113))
(assert (= (x421 77196514420459877940035116867124998943289115686762304616657918434777787006976) (x581 77196514420459877940035116867124998943289115686762304616657918434777787006976)))
(assert (x701 x408))
(assert (x701 x52))
(assert (x701 x761))
(assert (x701 x495))
(assert (=> (>= 10000 x308) (= (x581 x308) (x421 x308))))
(assert (= (x421 238709543) (x581 238709543)))
(assert (x701 x259))
(assert (x701 x47))
(assert (x701 x630))
(assert (x701 x139))
(assert (x714 x390))
(assert (x701 x452))
(assert (= 599290589 (x705 (x421 599290589))))
(assert (= (=> (and (= x291 x669) (= x467 x633)) x369) x518))
(assert (= x671 (or x334 x297)))
(assert (x701 x595))
(assert (x701 x690))
(assert (= x136 (x705 (x581 x136))))
(assert (x701 x175))
(assert (x701 x758))
(assert (x701 x763))
(assert (= 2039265891 (x705 (x421 2039265891))))
(assert (x701 x450))
(assert (= x231 (=> (and (and (= x625 (x15 160)) (= x535 (not (= 0 x409))) (= (x15 128) x767)) (and (and (and (not (< x211 2127478272)) (= x416 x28) (= x207 x648) (= x93 (< x690 x151)) (= x167 (x251 (x421 15))) (<= x141 1461501637330902918203684832716283019655932542975) (= x732 x154) (>= x10 0) (not (= 3008386744 x211)) (= x773 x29) (= x450 x637) (>= x141 0) (not (> 3008386744 x211)) (= x283 x273) (>= 1461501637330902918203684832716283019655932542975 x10) (= x423 x593) (not (< x211 2863377861)) (> x162 0) (= x207 x10) (= x219 5000000) (= x212 x661) (= x315 x450) (> 3224796394 x211) (not (> 2580288415 x211)) (= x68 (x251 (x421 13))) (= x477 (<= x61 5000000)) (= x315 x539) (= x162 (x486 (x581 x437))) (= 1000 x361) (= 0 x28) (= x604 x690) (= (x251 (x421 14)) x521) (>= 1461501637330902918203684832716283019655932542975 x539) (= x616 x416) (= x151 (x251 (x421 16))) (= 3051865383 x211) (>= x539 0)) (and (> 2127478272 x274) (< x274 1871194811) (not (< x274 1439069736)) (= x274 1816029635) (not (< x274 954831406)) (< 0 x703) (not (= 1738207182 x274)) (not (< x274 1738207182)) (= x703 (x486 (x581 x437))) (= 5000 x112) (= 1000 x25))) (and (not (< x627 500647658)) (not (= 500647658 x627)) (= (not (= x625 0)) x753) (= x627 519173431) (= (x486 (x581 x437)) x36) (< x627 743225245) (< x627 2127478272) (not (= 503383097 x627)) (= x767 x228) (= 5000 x712) (= x387 x61) (< x627 596258137) (< 0 x36) (= x753 x220) (= x228 x387) (< x627 954831406) (= 5000 x306)))) (and (=> (and (not x93) (and (= x165 0) (= x521 x649))) x503) (=> (and x93 (and (or (and x570 (and (= (div x727 x675) x20) (= (x614 (- x151 x167)) x675) (> x675 0) (= (x449 (+ x20 x68)) x218) (= x218 x740) (= x727 (mod (* x488 x84) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x84 (x614 (- x521 x68))) (= (x614 (- x690 x167)) x488))) (and (not x570) (and (= x123 x740) (< 0 x552) (= x552 (x614 (- x151 x167))) (= (div x58 x552) x670) (= (mod (* x774 x605) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x58) (= x123 (x614 (- x68 x670))) (= (x614 (- x690 x167)) x774) (= (x614 (- x68 x521)) x605)))) (= (< x68 x521) x570))) x188)))))
(assert (x701 x256))
(assert (x701 x605))
(assert (= (or x150 x611) x120))
(assert (= (x705 (x421 363856219)) 363856219))
(assert (x701 x135))
(assert (= (x705 (x421 1871194811)) 1871194811))
(assert (x701 x598))
(assert (x701 x525))
(assert (x701 x275))
(assert (= (=> (and (= x226 x511) (= x409 1)) x231) x295))
(assert (x701 x552))
(assert (= (or x161 x464) x248))
(assert (x701 x209))
(assert (= 503383097 (x705 (x421 503383097))))
(assert (= x453 (and x83 x491)))
(assert (x701 x691))
(assert (x701 x615))
(assert (= (x705 (x421 21304723245256853039595661774342629002073543191790936201937503064778531143680)) 21304723245256853039595661774342629002073543191790936201937503064778531143680))
(assert (= (=> (and (and (and (and (not (= 503383097 x293)) (not (= x293 500647658)) (= x760 x4) (< x293 954831406) (= (x486 (x581 x437)) x762) (< x293 596258137) (> x762 0) (< x293 743225245) (= x174 5000) (< x293 2127478272) (not (> 500647658 x293)) (= 519173431 x293) (= 5000 x148)) (and (and (and (= (x475 (x421 14)) x523) (< 0 x584) (< x461 3714247998) (not (= x461 3573918927)) (= x765 (<= x4 5000000)) (not (= 3567393941 x461)) (< x461 3812870723) (not (> 3224796394 x461)) (= 1000 x560) (= x497 5000000) (= x769 x523) (= 3670205928 x461) (= x584 (x486 (x581 x437))) (not (< x461 2127478272)) (not (> 3567393941 x461)) (not (= 3586168516 x461))) (and (and (> x2 0) (= x2 (x486 (x581 x437))) (> 954831406 x615) (> 743225245 x615) (not (> 500647658 x615)) (= x66 x769) (= x640 1) (= 1 x140) (= x615 686821956) (not (< x615 596258137)) (< x615 2127478272) (not (= x615 599290589)) (not (= 596258137 x615))) (and (and (= (x486 (x581 x437)) x452) (= x442 1816029635) (not (> 1738207182 x442)) (not (< x442 954831406)) (= x135 1000) (> x452 0) (< x442 1871194811) (= x647 1) (not (= x442 1738207182)) (< x442 2127478272) (not (> 1439069736 x442))) (and (>= 1461501637330902918203684832716283019655932542975 x638) (>= x18 0) (< 0 x631) (<= x271 1461501637330902918203684832716283019655932542975) (= x688 x648) (= 1000 x628) (not (> 2580288415 x71)) (= x758 x154) (= x76 x616) (= (x475 (x421 14)) x107) x236 (= x688 x638) (= 3051865383 x71) (= x637 x621) (= x423 x531) (= (x486 (x581 x437)) x631) (= x236 (and x349 x765)) (not (= 3008386744 x71)) (= x466 x773) (= x626 x76) (= (x475 (x421 15)) x108) (= x536 1000) (= x528 x604) (not (> 2863377861 x71)) (>= x271 0) (= x626 0) (= x216 x212) (not (< x71 3008386744)) (not (> 2127478272 x71)) (= (> x45 x528) x596) (> 3224796394 x71) (= x273 x347) (= (>= x66 1000) x349) (= (x475 (x421 13)) x656) (= (x475 (x421 16)) x45) (= x621 x44) (<= 0 x638) (<= x18 1461501637330902918203684832716283019655932542975) (= x44 x271))))) (and (< x149 1871194811) (< x149 2127478272) (not (= 1738207182 x149)) (= 1000 x134) (not (> 954831406 x149)) (> x106 0) (not (< x149 1439069736)) (not (> 1738207182 x149)) (= 5000 x199) (= (x486 (x581 x437)) x106) (= 1816029635 x149)))) (and (= (x486 (x581 x437)) x224) (= x254 (= x47 0)) (not (= x558 3573918927)) (= x372 x47) (not (> 2127478272 x558)) x756 (= (or x254 (not x620)) x756) (= x619 x594) (= x715 0) (= x594 x372) (= x653 x760) (> 3714247998 x558) (not (> 3224796394 x558)) (> x224 0) (not (= 3586168516 x558)) (< x558 3812870723) (not (< x558 3567393941)) (not (= x558 3567393941)) (= 3670205928 x558) (= (not (= 0 x706)) x345) (= x54 x345) (= x653 (x475 (x421 14))))) (and (= (x327 128) x619) (= x482 (not (= 0 x510))) (= x706 (x327 160)))) (and (=> (and (not x596) (and (= x77 x107) (= x155 0))) x331) (=> (and (and (= (> x107 x656) x426) (or (and (and (= (x614 (- x656 x490)) x663) (= (mod (* x386 x514) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x290) (= (x614 (- x656 x107)) x386) (= x490 (div x290 x434)) (= x182 x663) (= (x614 (- x528 x108)) x514) (= x434 (x614 (- x45 x108))) (< 0 x434)) (not x426)) (and x426 (and (= x424 (x614 (- x45 x108))) (= x585 x182) (= x585 (x449 (+ x656 x74))) (= (x614 (- x528 x108)) x85) (< 0 x424) (= (x614 (- x107 x656)) x586) (= (div x680 x424) x74) (= (mod (* x586 x85) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x680))))) x596) x501))) x480))
(assert (x701 x729))
(assert (= (x705 (x581 x601)) x601))
(assert (= (x705 (x421 790236105)) 790236105))
(assert (x701 x391))
(assert (x701 x102))
(assert (x701 x634))
(assert (x701 x647))
(assert (x87 x316))
(assert (x701 x389))
(assert (x701 x672))
(assert (x701 x674))
(assert (= 686821956 (x705 (x421 686821956))))
(assert (x701 x81))
(assert (x701 x190))
(assert (= (and (not x206) x296) x589))
(assert (x701 x520))
(assert (= (x581 307731845) (x421 307731845)))
(assert (x701 x442))
(assert (x701 x594))
(assert (= (x705 (x581 4105672269)) 4105672269))
(assert (x701 x558))
(assert (x701 x764))
(assert (x701 x572))
(assert (x701 x306))
(assert (= (x421 6277101735386680763835789423207666416102355444464034512895) (x581 6277101735386680763835789423207666416102355444464034512895)))
(assert (x40 x201))
(assert (x701 x412))
(assert (= 500647658 (x705 (x421 500647658))))
(assert (= (or x453 x217) x101))
(assert (x701 x266))
(assert (x701 x374))
(assert (x701 x372))
(assert (= (x705 (x421 2127478272)) 2127478272))
(assert (= (x33 x548 224) (div x548 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x701 x358))
(assert (x701 x441))
(assert (x701 x619))
(assert (= x122 (=> (and (= x336 x669) (= x633 x403)) x518)))
(assert (= (or x359 x132) x286))
(assert (x701 x195))
(assert (= (x705 (x421 79228162514264337593543950335)) 79228162514264337593543950335))
(assert (= 1862597803 (x705 (x421 1862597803))))
(assert (x701 x660))
(assert (x701 x675))
(assert (x701 x703))
(assert (= 3224796394 (x705 (x421 3224796394))))
(assert (x701 x299))
(assert (x701 x760))
(assert (x701 x698))
(assert (= (x705 (x421 4035674854)) 4035674854))
(assert (x701 x591))
(assert (= x205 (or x270 x489 x645)))
(assert (= (x581 3366849169) (x421 3366849169)))
(assert (x701 x621))
(assert (x701 x141))
(assert (= 1062488491900878629424266116482631147622884293147 (x705 (x421 1062488491900878629424266116482631147622884293147))))
(assert (x701 x394))
(assert (x701 x700))
(assert (= (x705 (x421 86400)) 86400))
(assert (= (x705 (x421 2966737888)) 2966737888))
(assert (x701 x133))
(assert (x701 x613))
(assert (x701 x228))
(assert (= (x705 (x421 3249860859)) 3249860859))
(assert (= (x581 1356689113) (x421 1356689113)))
(assert (x701 x290))
(assert (x701 x277))
(assert (x701 x239))
(assert (x667 x62))
(assert (x714 x62))
(assert (= (=> (and (= x681 x22) (= 1 x510)) x480) x571))
(assert (x701 x183))
(assert (x701 x283))
(assert (= (x581 4294967296) (x421 4294967296)))
(assert (= 3008386744 (x705 (x421 3008386744))))
(assert (x701 x272))
(assert (= (or x671 x72) x229))
(assert (x701 x715))
(assert (x701 x401))
(assert (x701 x530))
(assert (= (x705 (x421 3002540418)) 3002540418))
(assert (x701 x80))
(assert (= x576 (and x375 (not x250))))
(assert (x701 x654))
(assert (x701 x399))
(assert (x701 x212))
(assert (x701 x115))
(assert (x701 x383))
(assert (x701 x88))
(assert (x701 x86))
(assert (x730 x308))
(assert (x701 x265))
(assert (= (x705 (x421 26959946667150639794667015087019630673637144422540572481103610249215)) 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x701 x292))
(assert (x701 x97))
(assert (x701 x555))
(assert (= 0 (x366 x362)))
(assert (x730 1356689113))
(assert (= (and x14 x42) x173))
(assert (= (x705 (x421 3812870723)) 3812870723))
(assert (x701 x462))
(assert (= (x581 3812870723) (x421 3812870723)))
(assert (x701 x577))
(assert (x701 x144))
(assert (x701 x330))
(assert (x701 x456))
(assert (x701 x608))
(assert (= (x705 (x421 954831406)) 954831406))
(assert (x701 x553))
(assert (x701 x544))
(assert (x714 255))
(assert (= (x421 1062488491900878629424266116482631147622884293147) (x581 1062488491900878629424266116482631147622884293147)))
(assert true)
(assert (= (x581 26959946667150639794667015087019630673637144422540572481103610249215) (x421 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x701 x479))
(assert (x701 x59))
(assert (x701 x363))
(assert (x701 x216))
(assert (x701 x727))
(assert (= (and (not x69) x286) x554))
(assert (x701 x218))
(assert (= (x581 910484757) (x421 910484757)))
(assert (x701 x409))
(assert (= (x705 (x421 361691454)) 361691454))
(assert (x701 x680))
(assert (x701 x128))
(assert (x701 x507))
(assert (x701 x43))
(assert (x701 x721))
(assert (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x705 (x421 70508962019145425934951811999677760319478833095128838543097651878529435959296))))
(assert (x701 x221))
(assert (= (or x709 x120) x222))
(assert (x701 x454))
(assert (x701 x170))
(assert (x701 x148))
(assert (= (x705 (x421 3670205928)) 3670205928))
(assert (x701 x27))
(assert (x701 x736))
(assert (x701 x521))
(assert (x701 x719))
(assert (x194 x341 x729))
(assert (x701 x484))
(assert (x667 x390))
(assert (x714 x468))
(assert (x701 x557))
(assert (x701 x350))
(assert (x701 x407))
(assert (= (x705 (x421 46861972923178205566985210922759877011903582497231265773045854621316061069312)) 46861972923178205566985210922759877011903582497231265773045854621316061069312))
(assert (x701 x390))
(assert (= 4294967296 (x705 (x421 4294967296))))
(assert (= (x705 (x421 826074471)) 826074471))
(assert (x87 x729))
(assert (= (x581 363856219) (x421 363856219)))
(assert (x701 x60))
(assert (x701 x364))
(assert (= (=> (and (and (= (x346 128) x591) (= (x346 160) x530) (= x298 (not (= x165 0)))) (and (and (= 686821956 x139) (= x551 1) (= x381 x430) (= x378 x7) (= x343 x381) (< x139 2127478272) (< x139 743225245) (not (= 596258137 x139)) (< 0 x324) (not (= x139 599290589)) (not (> 596258137 x139)) (= (x486 (x581 x437)) x324) (= x7 (not (= 0 x530))) (= x591 x430) (< x139 954831406) (not (> 500647658 x139)) (= 1 x415)) (and (and (< x238 2127478272) (not (> 954831406 x238)) (< 0 x519) (not (> 1738207182 x238)) (not (= x238 1738207182)) (= x448 1000) (= x519 (x486 (x581 x437))) (= x238 1816029635) (> 1871194811 x238) (= x534 1) (not (< x238 1439069736))) (and (= 1000 x599) (= x395 (>= x343 1000)) (= 1000 x339) (= (and x395 x477) x157))))) x157) x503))
(assert (x701 x192))
(assert (x701 x669))
(assert (x701 x76))
(assert (= (x705 (x421 1816029635)) 1816029635))
(assert (x701 x751))
(assert (= (x581 1531409238) (x421 1531409238)))
(assert (x701 x56))
(assert (x701 x392))
(assert (= (x581 3871629458) (x421 3871629458)))
(assert (= (x705 (x421 4105672269)) 4105672269))
(assert (x701 x584))
(assert (= 1840041978 (x705 (x421 1840041978))))
(assert (x701 x693))
(assert (= (x581 4102657848) (x421 4102657848)))
(assert (x701 x734))
(assert (x701 x357))
(assert (x701 x353))
(assert (x701 x249))
(assert (x701 x289))
(assert (x701 x773))
(assert (x701 x631))
(assert (= (x705 (x421 2863377861)) 2863377861))
(assert (x701 x240))
(assert (= (or x73 x722) x532))
(assert (x701 x243))
(assert (= (x581 2580288415) (x421 2580288415)))
(assert (x701 x563))
(assert (x701 x347))
(assert (x701 x527))
(assert (x701 x213))
(assert (x701 x16))
(assert (=> (>= 10000 x601) (= (x421 x601) (x581 x601))))
(assert (x701 x367))
(assert (x294 x357))
(assert (= x296 (and x301 x101)))
(assert (= (x33 x548 224) (x705 (x581 (x33 x548 224)))))
(assert (x701 x10))
(assert (x701 x406))
(assert (x701 x245))
(assert (x701 x473))
(assert (x701 x160))
(assert (x701 x223))
(assert (x701 x600))
(assert (x701 x488))
(assert (x714 115792089237316195423570985008687907853269984665561335876943319670319585689600))
(assert (= (and (not x352) x576) x270))
(assert (x701 x13))
(assert (x701 x469))
(assert (= (and x31 (not x529)) x512))
(assert (x701 x625))
(assert (= (x705 (x421 2876725745)) 2876725745))
(assert (x701 x305))
(assert (x701 x74))
(assert (x701 x281))
(assert (= (x705 (x421 3996650231)) 3996650231))
(assert (x701 x162))
(assert (x730 x710))
(assert (= x607 (x705 (x581 x607))))
(assert (= x78 (or x554 x505)))
(assert (x701 x724))
(assert (x730 x124))
(assert (x701 x463))
(assert (x701 x656))
(assert (= (x581 4035674854) (x421 4035674854)))
(assert (x701 x413))
(assert (x701 x106))
(assert (= (=> (and (and (and (and (> 2127478272 x682) (= x183 0) (not (< x682 743225245)) (not (= x682 826074471)) (= x487 2) (= x719 86400) (= (x486 (x581 x437)) x262) (not (> 500647658 x682)) (not (= x682 910484757)) (> 954831406 x682) (not (= x682 822145385)) (not (> 822145385 x682)) (= x682 922701707) (> x262 0)) (and (and (not (> 1738207182 x325)) (= x435 (x486 (x581 x437))) (= 2 x175) (not (> 1439069736 x325)) (= 1000 x478) (not (= x325 1738207182)) (< x325 1871194811) (= 1816029635 x325) (< x325 2127478272) (> x435 0) (= true x371) (not (< x325 954831406)) (= 2 x192)) (and (and (and (and (not (> 596258137 x340)) (< x340 2127478272) (< x340 743225245) (> 954831406 x340) (= 686821956 x340) (not (= 596258137 x340)) (= x389 1) (= x622 (x486 (x581 x437))) (not (= 599290589 x340)) (= x373 1) (= x178 1) (< 0 x622) (not (< x340 500647658))) (and (and (= 5000 x89) (< x549 596258137) (< 0 x399) (> 954831406 x549) (not (= 500647658 x549)) (< x549 743225245) (= 519173431 x549) (not (< x549 500647658)) (< x549 2127478272) (= 1 x330) (= x721 5000) (= x399 (x486 (x581 x437))) (not (= 503383097 x549)) (= x439 0)) (and (and (and (and (and (= 192 x595) (= true x603) (not (= 1840041978 x52)) (= 128 x660) (= (x486 (x581 x437)) x133) (not (> 1439069736 x52)) (not (< x52 1738207182)) (< 0 x133) (< x52 1871194811) (< x52 2127478272) (not (> 954831406 x52)) (not (= 1738207182 x52)) (not (= 1816029635 x52)) (= x52 1862597803) (= 128 x565)) (and (and (and (< x368 1984976886) (not (> 1871194811 x368)) (= x751 64) (= true x483) (= x507 (x486 (x581 x437))) (= x612 64) (= 64 x462) (not (> 1439069736 x368)) (> x507 0) (not (< x368 954831406)) (= x368 1871194811) (> 2127478272 x368)) (and (and (and (= x269 (not (= 0 x213))) (< x335 363856219) (not (= x335 228615836)) (= x41 (= 0 x674)) (not (= 307731845 x335)) (> x736 0) (< x335 954831406) (= x30 (not x41)) (< x335 2127478272) (not (< x335 228615836)) (= x402 (ite x30 1 0)) (= (x405 255 x468) x674) (= (x486 (x581 x437)) x736) (not (= x335 238709543)) x269 (= 361691454 x335) (= x468 (x475 (x421 26))) (> 500647658 x335)) (and (= x321 x734) (= x620 (not x547)) (not (< x384 2580288415)) (>= 1461501637330902918203684832716283019655932542975 x160) (= x318 (not (= x402 0))) (= x321 x733) (= (x475 (x421 14)) x516) (= x773 x128) (not (= x384 3008386744)) (= x27 x212) (= 3051865383 x384) (= x616 x95) (= x733 x637) (= x273 x247) (= x474 x423) (= (x475 (x421 15)) x302) (= 0 x268) (= x755 x154) (= x365 x648) (= x11 (< x279 x163)) (= x650 (x475 (x421 13))) (>= 1461501637330902918203684832716283019655932542975 x370) (not (< x384 3008386744)) (not (> 2127478272 x384)) (<= 0 x734) (<= 0 x370) (<= x734 1461501637330902918203684832716283019655932542975) (= x160 x365) (<= 0 x160) (= x318 x547) (= x279 x604) (< x384 3224796394) (not (> 2863377861 x384)) (= x741 (x486 (x581 x437))) (= x95 x268) (= (x475 (x421 16)) x163) (< 0 x741))) (and (= x641 3008386744) (= true x204) (not (> 2580288415 x641)) (> x738 0) (not (< x641 2863377861)) (not (> 3008386744 x641)) (> 3224796394 x641) (not (> 2127478272 x641)) (= x329 (x475 (x421 8))) (= x383 64) (= x137 (= x408 1)) (= x360 (not x431)) (= (x33 x329 255) x408) (= (not x137) x431) (= (ite x360 1 0) x213) (= 64 x463) (= (x486 (x581 x437)) x738) (= 255 x13)))) (and (not (> 3224796394 x277)) (> x266 0) (= x277 3890975986) (= x657 64) (< x277 3996650231) (not (> 3812870723 x277)) (not (< x277 2127478272)) (= x739 true) (= 192 x685) (= x266 (x486 (x581 x437))) (not (> 3890975986 x277)) (= x537 192)))) (and (= x544 64) (not (= 3366849169 x693)) (not (< x693 2127478272)) (< 0 x289) (= 3506505391 x693) (= true x208) (< x693 3812870723) (= x289 (x486 (x581 x437))) (= 128 x540) (not (> 3366849169 x693)) (not (< x693 3224796394)) (< x693 3567393941) (= 64 x592))) (and (not (= x564 2039265891)) (= 0 x278) (= 0 x613) (= x564 2064814097) (= x243 64) (not (> 1984976886 x564)) (not (< x564 1871194811)) (not (> 954831406 x564)) (not (> 1439069736 x564)) (> x747 0) (= x747 (x486 (x581 x437))) (= true x65) (not (= x564 1984976886)) (> 2127478272 x564))) (and (> 3224796394 x447) (not (> 2580288415 x447)) (= x652 0) (not (< x447 2863377861)) (not (> 2127478272 x447)) (not (= x447 2966737888)) (= x110 (x486 (x581 x437))) (< x447 3008386744) (> x110 0) (= 100000 x249) (not (= x447 2876725745)) (not (= 2863377861 x447)) (= 5000 x761) (= x447 3002540418))))) (and (= x3 5000) (= (x486 (x581 x437)) x314) (< x280 2127478272) (not (= 596258137 x280)) (not (< x280 500647658)) (= x280 686821956) (> x314 0) (< x280 743225245) (not (> 596258137 x280)) (= 1 x202) (= 1 x382) (> 954831406 x280) (not (= 599290589 x280)))) (and (= 5000 x473) (not (> 500647658 x282)) (not (= x282 503383097)) (> 596258137 x282) (< x282 743225245) (= 519173431 x282) (not (= 500647658 x282)) (< x282 2127478272) (= 1000 x550) (= x299 (x486 (x581 x437))) (= true x23) (= 1000 x244) (> x299 0) (= 5000 x687) (> 954831406 x282))))) (and (= (x486 (x581 x437)) x180) (< x363 3567393941) (= 3249860859 x363) (not (= 3224796394 x363)) (> 3366849169 x363) (= x111 86400) (> x180 0) (= 86400 x284) (< x363 3812870723) (not (> 2127478272 x363)) (= x388 1531409238) (not (< x363 3224796394)))) (and (>= x728 0) (= (> (x486 (x581 x710)) 0) x720) (not (= x203 x710)) (> 3366849169 x533) (not (= x710 x437)) (= false x197) (not (= x337 x601)) (>= x60 0) x230 (<= 0 x221) (= x508 86400) (= (x420 (x581 x203)) x264) (not (= x601 x203)) (not (= x533 3224796394)) (= (< 0 (x486 (x581 x337))) x230) (= false x696) (<= x728 1461501637330902918203684832716283019655932542975) (= x609 (> (x486 (x581 x601)) 0)) (>= 1461501637330902918203684832716283019655932542975 x601) (>= 1461501637330902918203684832716283019655932542975 x437) (not (= x337 x710)) (<= 0 x517) (<= x1 1461501637330902918203684832716283019655932542975) (= (x420 (x581 x601)) x456) (= (> (x486 (x581 x203)) 0) x639) (not (< x533 2127478272)) (< 0 x601) (<= x337 1461501637330902918203684832716283019655932542975) (not (= x337 x203)) (<= x710 1461501637330902918203684832716283019655932542975) x609 (not (> 3224796394 x533)) (>= 1461501637330902918203684832716283019655932542975 x517) (= x92 x221) (> x203 0) (> 3567393941 x533) (> 3812870723 x533) (> x665 0) x697 (= false x51) (<= 0 x456) (<= 0 x391) (not (= x437 x203)) x639 (not (= x601 x437)) (= x697 (> (x486 (x581 x437)) 0)) (<= x203 1461501637330902918203684832716283019655932542975) (= x524 (x420 (x581 x710))) (= 3249860859 x533) (= (x486 (x581 x437)) x665) (= x648 x728) (= x391 (x420 (x581 x437))) (>= x524 0) (>= 1461501637330902918203684832716283019655932542975 x221) (< 0 x337) (= 2 x745) (< 0 x710) (= false x538) (= 4105672269 x99) (= x1 x234) (not (= x710 x601)) (not (= x437 x337)) x720 (<= 0 x264) (<= 0 x1) (= (x420 (x581 x337)) x60) (< 0 x437) (= x212 x517))) (and (=> (and (and (or (and (and (< 0 x520) (= x195 (div x556 x520)) (= (x449 (+ x650 x195)) x476) (= x22 x476) (= x305 (x614 (- x516 x650))) (= x556 (mod (* x305 x328) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x614 (- x163 x302)) x520) (= (x614 (- x279 x302)) x328)) x433) (and (not x433) (and (= (x614 (- x279 x302)) x580) (= x275 (x614 (- x650 x516))) (= x22 x542) (> x292 0) (= (div x153 x292) x67) (= (x614 (- x163 x302)) x292) (= (x614 (- x650 x67)) x542) (= (mod (* x580 x275) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x153)))) (= x433 (> x516 x650))) x11) x571) (=> (and (not x11) (and (= x681 x516) (= 0 x510))) x480))) x37))
(assert (= 3573918927 (x705 (x421 3573918927))))
(assert (x701 x111))
(assert (= (x705 (x421 910484757)) 910484757))
(assert (x701 x622))
(assert (x701 x99))
(assert (= (and x425 (not x426)) x297))
(assert (x701 x509))
(assert (x701 x735))
(assert (x701 x316))
(assert (x701 x422))
(assert (= (x581 954831406) (x421 954831406)))
(assert (=> (<= x337 10000) (= (x421 x337) (x581 x337))))
(assert (x701 x313))
(assert (= (x581 1738207182) (x421 1738207182)))
(assert (x701 x63))
(assert (x701 x116))
(assert (= 110688705405039355050572217931781119515373813223972846963051619115990310191104 (x705 (x421 110688705405039355050572217931781119515373813223972846963051619115990310191104))))
(assert (x701 x540))
(assert (x701 x638))
(assert (x701 x657))
(assert (x701 x107))
(assert (x701 x651))
(assert (x701 x68))
(assert (= (and x426 x425) x334))
(assert (x701 x506))
(assert (= (or x215 x749) x91))
(assert (x701 x445))
(assert (x713 x400))
(assert (x701 x12))
(assert (x701 x472))
(assert (= (x581 (x705 x567)) x567))
(assert (x714 26959946660873538059280334323183841250429478006438217036639575736320))
(assert (x701 x234))
(assert (= (x581 2064814097) (x421 2064814097)))
(assert (x701 x676))
(assert (= (x705 (x421 115792089210356248762697446949407573530086143415211086033019366971273553903615)) 115792089210356248762697446949407573530086143415211086033019366971273553903615))
(assert (x701 x439))
(assert (=> (<= x437 10000) (= (x581 x437) (x421 x437))))
(assert (x701 x26))
(assert (x714 x357))
(assert (= 743225245 (x705 (x421 743225245))))
(assert (x701 x168))
(assert (= (=> (and (and (and (and (and (= (<= x666 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x666 67)) (< x708 4112205658) (not (= 3996650231 x708)) (= 4105672269 x708) (= x579 (not (= 1062488491900878629424266116482631147622884293147 x458))) (= 0 x265) (= x441 (x486 (x581 x437))) (<= x258 1461501637330902918203684832716283019655932542975) (<= x735 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x563) (not (< x666 4)) (not (> 3996650231 x708)) (> x441 0) (not (< x708 2127478272)) (= x561 x125) (= x125 x267) (= x131 (<= 1000 x679)) (not (or (and (= true (<= x527 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x527 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x527))) (= x75 1000) (= x458 (x405 1461501637330902918203684832716283019655932542975 x390)) (>= x735 0) (= x446 1000) x427 (= x563 x234) (= (and x131 x310) x427) (= x546 x515) (>= 1461501637330902918203684832716283019655932542975 x546) (= (x614 (- x666 4)) x527) (= x618 x265) (not (= x708 4035674854)) (not (= x708 4102657848)) (>= x563 0) (not (< x708 3812870723)) (= x548 (mod (* 26959946667150639794667015087019630673637144422540572481103610249216 x708) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x567 (x460 (x421 36) (x421 32) (x581 x124) (x581 (x33 x548 224)) 0)) (= x364 x546) (= x272 x49) (<= 0 x258) (not (> 3224796394 x708)) (= x258 x49)) (and (not (> 954831406 x526)) (< x526 1871194811) (not (> 1439069736 x526)) (not (> 1738207182 x526)) (not (= x526 1738207182)) (= 1 x171) (= x617 (x486 (x581 x437))) (< x526 2127478272) (> x617 0) (= x526 1816029635) (= 1000 x582))) (and (not (= x574 596258137)) (= x397 x70) (< 0 x143) (= (not (= 0 x367)) x397) (< x574 954831406) (= x104 1) (> 743225245 x574) (= x659 x679) (= 686821956 x574) (= x143 (x486 (x581 x437))) (= x350 x654) (< x574 2127478272) (not (> 596258137 x574)) (= 1 x26) (not (< x574 500647658)) (= x654 x659) (not (= 599290589 x574)))) (and (= x356 (not (= x635 0))) (= x350 (x694 128)) (= (x694 160) x367))) (and (=> (and (not x579) (and (= x467 196) (= x291 (ite x579 1 0)))) x369) (=> (and (and (= x198 (= x559 x567)) (= x691 110688705405039355050572217931781119515373813223972846963051619115990310191104) (= (x460 (x421 36) (x421 32) (x581 x124) (x581 4105672269) 0) x559)) x579) (and (=> (and (not x198) (and (= x181 (x460 (x421 36) (x421 32) (x581 x124) (x581 790236105) 0)) (= (= x181 x567) x14) (= x326 21304723245256853039595661774342629002073543191790936201937503064778531143680))) (and (=> (and (and (= x261 (x460 (x421 36) (x421 32) (x581 x124) (x581 3943638230) 0)) (= (= x567 x261) x711) (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 x411)) (not x14)) (and (=> (and (not x711) (and (and (= (= x567 x562) x250) (= (x460 (x421 36) (x421 32) (x581 x124) (x581 954831406) 0) x562) (= x246 25742203781880459408941457317362166305709681742799472914177068605934923677696)) (or (and (and (= (ite x250 1 0) x98) (= x716 468)) x250) (and (and (or (and x352 (and (= x98 (ite x352 1 0)) (= 536 x716))) (and (and (= 536 x716) (= 0 x752) (= 0 x98)) (not x352))) (and (= x352 (= x704 x567)) (= (x460 (x421 36) (x421 32) (x581 x124) (x581 1356689113) 0) x704) (= x759 36576266130383907740409294828766280552204369950469466485900666250106563985408))) (not x250))))) x210) (=> (and x711 (and (= x336 (ite x711 1 0)) (= 400 x403))) x122))) (=> (and x14 (and (= (ite x14 1 0) x336) (= 332 x403))) x122))) (=> (and (and (= x669 (ite x198 1 0)) (= 264 x633)) x198) x518))))) x235))
(assert (x701 x380))
(assert (= (x705 (x421 519173431)) 519173431))
(assert (x701 x755))
(assert (x701 x534))
(assert (= 3586168516 (x705 (x421 3586168516))))
(assert (= x72 (and x418 (not x596))))
(assert (x701 x64))
(assert (= (x421 2127478272) (x581 2127478272)))
(assert (= (x421 3996650231) (x581 3996650231)))
(assert (x701 x28))
(assert (= (x421 70508962019145425934951811999677760319478833095128838543097651878529435959296) (x581 70508962019145425934951811999677760319478833095128838543097651878529435959296)))
(assert (x730 4105672269))
(assert (x701 x182))
(assert (x701 x25))
(assert (x701 x612))
(assert (x701 x341))
(assert (x701 x585))
(assert (x701 x752))
(assert (x701 x641))
(assert (x701 x417))
(check-sat)
(exit)