(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x366 0)) (((x228 (x1212 Int)) (x909 (x612 x366) (x379 Int)) (x1283 (x789 x366) (x652 x366) (x1308 Int)))))
(declare-fun x973 () Int)
(declare-fun x666 () Bool)
(declare-fun x1306 () Int)
(declare-fun x1161 () Bool)
(declare-fun x911 () Int)
(declare-fun x1030 (x366) Int)
(declare-fun x1010 (x366) Int)
(declare-fun x470 () Bool)
(declare-fun x397 () Bool)
(declare-fun x868 () Int)
(declare-fun x50 () Bool)
(declare-fun x1312 () Int)
(declare-fun x371 () Int)
(declare-fun x1143 () Bool)
(declare-fun x509 () Bool)
(declare-fun x1256 () Int)
(declare-fun x142 () Int)
(declare-fun x365 () Bool)
(declare-fun x110 () Int)
(declare-fun x1180 () Bool)
(declare-fun x15 () Bool)
(declare-fun x475 () Bool)
(declare-fun x130 () Int)
(declare-fun x1063 () Int)
(declare-fun x129 () Int)
(declare-fun x261 () Int)
(declare-fun x183 () Int)
(declare-fun x971 () Int)
(declare-fun x1015 (x366) Int)
(declare-fun x820 () Int)
(declare-fun x861 () Int)
(declare-fun x517 () Bool)
(declare-fun x165 () Int)
(declare-fun x1182 () Int)
(declare-fun x17 () Int)
(declare-fun x425 () Int)
(declare-fun x1223 () Int)
(declare-fun x98 () Int)
(declare-fun x592 () Bool)
(declare-fun x173 () Int)
(declare-fun x1213 () Int)
(declare-fun x568 () Int)
(declare-fun x848 () Int)
(declare-fun x619 () Bool)
(declare-fun x279 () Int)
(declare-fun x431 () Int)
(declare-fun x391 () Int)
(declare-fun x368 () Int)
(declare-fun x323 () Int)
(declare-fun x673 () Int)
(declare-fun x445 () Bool)
(declare-fun x200 () Int)
(declare-fun x33 () Bool)
(declare-fun x258 () Int)
(declare-fun x82 () Int)
(declare-fun x888 () Int)
(declare-fun x885 () Bool)
(declare-fun x663 () Bool)
(declare-fun x1267 () Int)
(declare-fun x944 () Int)
(declare-fun x1287 () Int)
(declare-fun x1282 (x366) Int)
(declare-fun x604 () x366)
(declare-fun x965 () Bool)
(declare-fun x593 () Bool)
(declare-fun x779 () Int)
(declare-fun x689 () Bool)
(declare-fun x527 () Int)
(declare-fun x342 () Bool)
(declare-fun x1072 () Int)
(declare-fun x364 () Bool)
(declare-fun x306 () x366)
(declare-fun x405 () Int)
(declare-fun x1196 () Int)
(declare-fun x367 () Int)
(declare-fun x920 () Int)
(declare-fun x1027 () Int)
(declare-fun x731 () Int)
(declare-fun x760 () Int)
(declare-fun x662 () Bool)
(declare-fun x839 () Bool)
(declare-fun x1297 (Int) Int)
(declare-fun x1311 () Int)
(declare-fun x1130 () Bool)
(declare-fun x1194 () Int)
(declare-fun x355 () Int)
(declare-fun x819 () Bool)
(declare-fun x576 (Int) Int)
(declare-fun x1069 () Bool)
(declare-fun x307 () Bool)
(declare-fun x1038 () Bool)
(declare-fun x131 () Int)
(declare-fun x858 () Int)
(declare-fun x621 () Bool)
(declare-fun x71 () Int)
(declare-fun x84 () Int)
(declare-fun x873 () Int)
(declare-fun x1135 () Int)
(declare-fun x567 () Bool)
(declare-fun x505 () Int)
(declare-fun x1192 () Bool)
(declare-fun x1246 () Int)
(declare-fun x1193 () Int)
(declare-fun x908 () Int)
(declare-fun x81 () x366)
(declare-fun x561 () Int)
(declare-fun x328 () Int)
(declare-fun x1195 () Bool)
(declare-fun x102 () x366)
(declare-fun x122 (x366) Int)
(declare-fun x1017 () Int)
(declare-fun x1259 () Bool)
(declare-fun x172 () Int)
(declare-fun x1243 () Bool)
(declare-fun x799 () Int)
(declare-fun x1138 () x366)
(declare-fun x949 () Bool)
(declare-fun x181 () Bool)
(declare-fun x219 () Int)
(declare-fun x918 () Int)
(declare-fun x693 () Bool)
(declare-fun x1348 () Bool)
(declare-fun x479 () Bool)
(declare-fun x611 () Bool)
(declare-fun x1236 () Bool)
(declare-fun x132 () x366)
(declare-fun x605 () Int)
(declare-fun x1122 () Int)
(declare-fun x135 () Int)
(declare-fun x781 () Int)
(declare-fun x469 () Int)
(declare-fun x720 () Int)
(declare-fun x195 () Int)
(declare-fun x1136 () Int)
(declare-fun x713 (x366) Int)
(declare-fun x1328 () Int)
(declare-fun x814 () Int)
(declare-fun x381 () Bool)
(declare-fun x774 () Int)
(declare-fun x956 () Bool)
(declare-fun x1008 () Int)
(declare-fun x982 (x366) Int)
(declare-fun x1083 () Bool)
(declare-fun x599 () Int)
(declare-fun x733 () Int)
(declare-fun x57 () x366)
(declare-fun x429 () Bool)
(declare-fun x1068 () Int)
(declare-fun x462 () Int)
(declare-fun x797 (x366) Int)
(declare-fun x1090 () Bool)
(declare-fun x1049 () x366)
(declare-fun x1082 () Int)
(declare-fun x1231 () Int)
(declare-fun x1242 () Bool)
(declare-fun x892 () Bool)
(declare-fun x294 () Int)
(declare-fun x1286 () Int)
(declare-fun x426 () Int)
(declare-fun x728 () Int)
(declare-fun x312 () Bool)
(declare-fun x1303 () Int)
(declare-fun x14 () Int)
(declare-fun x773 () Int)
(declare-fun x484 () Int)
(declare-fun x264 () Int)
(declare-fun x107 () Int)
(declare-fun x879 () Int)
(declare-fun x762 (Int Int) Int)
(declare-fun x876 () Int)
(declare-fun x515 () Bool)
(declare-fun x969 () Bool)
(declare-fun x648 () Int)
(declare-fun x635 () Int)
(declare-fun x1225 () Bool)
(declare-fun x628 () Bool)
(declare-fun x670 () Int)
(declare-fun x947 () Int)
(declare-fun x764 () Int)
(declare-fun x632 () Int)
(declare-fun x1191 () Bool)
(declare-fun x1313 () Int)
(declare-fun x718 () Int)
(declare-fun x1281 () Bool)
(declare-fun x683 () Int)
(declare-fun x840 () Int)
(declare-fun x1275 () Int)
(declare-fun x31 () Int)
(declare-fun x1094 () Int)
(declare-fun x1334 () Bool)
(declare-fun x853 () Int)
(declare-fun x398 () x366)
(declare-fun x630 () Int)
(declare-fun x551 () Bool)
(declare-fun x363 () Int)
(declare-fun x417 () Int)
(declare-fun x1269 () Int)
(declare-fun x304 () Int)
(declare-fun x939 () Bool)
(declare-fun x168 () Bool)
(declare-fun x240 () Int)
(declare-fun x69 () Int)
(declare-fun x1347 () Int)
(declare-fun x1304 () Int)
(declare-fun x724 () Bool)
(declare-fun x727 () Int)
(declare-fun x1088 () Bool)
(declare-fun x1171 () Int)
(declare-fun x150 () Bool)
(declare-fun x953 () Bool)
(declare-fun x512 () Bool)
(declare-fun x695 () Bool)
(declare-fun x1190 () Int)
(declare-fun x1028 () Int)
(declare-fun x348 () Bool)
(declare-fun x1080 () Int)
(declare-fun x912 () Int)
(declare-fun x870 () Int)
(declare-fun x986 () Bool)
(declare-fun x1145 () Bool)
(declare-fun x603 () Int)
(declare-fun x583 () Bool)
(declare-fun x548 () Int)
(declare-fun x755 () Int)
(declare-fun x782 () Bool)
(declare-fun x480 () Int)
(declare-fun x1093 () Int)
(declare-fun x844 () Int)
(declare-fun x656 () Int)
(declare-fun x622 () Int)
(declare-fun x584 () Bool)
(declare-fun x988 () Bool)
(declare-fun x1206 () Bool)
(declare-fun x970 () Int)
(declare-fun x418 () Int)
(declare-fun x1291 () Bool)
(declare-fun x930 () Bool)
(declare-fun x1031 () Bool)
(declare-fun x376 () Int)
(declare-fun x1103 () Bool)
(declare-fun x55 () Int)
(declare-fun x800 () Int)
(declare-fun x972 () Int)
(declare-fun x1029 () Int)
(declare-fun x354 () Bool)
(declare-fun x1053 () Int)
(declare-fun x686 () Int)
(declare-fun x1237 () Int)
(declare-fun x855 () Int)
(declare-fun x595 () Int)
(declare-fun x506 () Int)
(declare-fun x530 () Int)
(declare-fun x41 (x366) Int)
(declare-fun x1079 (x366) Int)
(declare-fun x661 () Int)
(declare-fun x528 (Int) Int)
(declare-fun x1108 () Int)
(declare-fun x627 () Bool)
(declare-fun x1100 () Bool)
(declare-fun x70 () Int)
(declare-fun x435 () Int)
(declare-fun x639 () x366)
(declare-fun x114 () Int)
(declare-fun x254 () Int)
(declare-fun x752 () Bool)
(declare-fun x52 () Int)
(declare-fun x277 () Int)
(declare-fun x311 () Bool)
(declare-fun x935 () Bool)
(declare-fun x1163 () x366)
(declare-fun x801 () Int)
(declare-fun x39 () Int)
(declare-fun x534 () Int)
(declare-fun x1330 () Int)
(declare-fun x495 (x366) Int)
(declare-fun x999 () Bool)
(declare-fun x916 () Bool)
(declare-fun x1084 () Int)
(declare-fun x1177 () Bool)
(declare-fun x591 () Int)
(declare-fun x21 () Int)
(declare-fun x741 () Int)
(declare-fun x75 () Bool)
(declare-fun x320 () Int)
(declare-fun x778 () Int)
(declare-fun x833 () Int)
(declare-fun x615 () Int)
(declare-fun x300 () Int)
(declare-fun x193 () Int)
(declare-fun x156 () Int)
(declare-fun x1198 () Bool)
(declare-fun x1209 () Int)
(declare-fun x1054 () Int)
(declare-fun x9 () Int)
(declare-fun x1137 () Int)
(declare-fun x1201 () Int)
(declare-fun x12 () Int)
(declare-fun x341 () Int)
(declare-fun x719 () Int)
(declare-fun x1235 () Int)
(declare-fun x198 () Int)
(declare-fun x353 () Bool)
(declare-fun x1172 () Int)
(declare-fun x339 () Int)
(declare-fun x649 (x366) Int)
(declare-fun x1262 () Bool)
(declare-fun x167 () Int)
(declare-fun x734 () Int)
(declare-fun x1066 () Int)
(declare-fun x596 () Bool)
(declare-fun x1018 () Int)
(declare-fun x443 () Int)
(declare-fun x401 () Int)
(declare-fun x125 () Int)
(declare-fun x851 () Bool)
(declare-fun x45 () Int)
(declare-fun x834 () Bool)
(declare-fun x334 () Int)
(declare-fun x440 () Int)
(declare-fun x153 (Int) Int)
(declare-fun x900 () Bool)
(declare-fun x497 () Int)
(declare-fun x987 () Int)
(declare-fun x138 () Int)
(declare-fun x1043 (x366) Int)
(declare-fun x424 () Int)
(declare-fun x196 () Bool)
(declare-fun x347 () Int)
(declare-fun x174 () Int)
(declare-fun x919 () Int)
(declare-fun x26 () Bool)
(declare-fun x326 () Bool)
(declare-fun x891 () Int)
(declare-fun x556 () Int)
(declare-fun x1224 () Int)
(declare-fun x962 () Int)
(declare-fun x430 (Int) Int)
(declare-fun x1210 () Int)
(declare-fun x601 () Int)
(declare-fun x97 () Int)
(declare-fun x24 () Int)
(declare-fun x309 (Int) Int)
(declare-fun x803 () Int)
(declare-fun x644 () Bool)
(declare-fun x872 () Int)
(declare-fun x392 () Int)
(declare-fun x1019 () Bool)
(declare-fun x549 () Bool)
(declare-fun x816 () Int)
(declare-fun x296 () Int)
(declare-fun x1205 (x366) Int)
(declare-fun x901 () Bool)
(declare-fun x989 () Int)
(declare-fun x932 () Int)
(declare-fun x1070 () Bool)
(declare-fun x356 () x366)
(declare-fun x983 () Bool)
(declare-fun x231 () Int)
(declare-fun x439 () Bool)
(declare-fun x883 () Bool)
(declare-fun x1309 () Int)
(declare-fun x618 () Int)
(declare-fun x1016 () Int)
(declare-fun x563 () Bool)
(declare-fun x698 () Bool)
(declare-fun x957 () Int)
(declare-fun x881 () Bool)
(declare-fun x199 () Int)
(declare-fun x1011 () x366)
(declare-fun x914 () Int)
(declare-fun x1098 () Int)
(declare-fun x40 () Int)
(declare-fun x1332 (x366) Int)
(declare-fun x1329 () Bool)
(declare-fun x473 () Bool)
(declare-fun x1336 () Int)
(declare-fun x477 () x366)
(declare-fun x518 (x366) Int)
(declare-fun x994 () Int)
(declare-fun x361 () Int)
(declare-fun x1164 () Int)
(declare-fun x218 () Bool)
(declare-fun x1241 () Bool)
(declare-fun x80 () Int)
(declare-fun x217 () Int)
(declare-fun x1263 (x366) Int)
(declare-fun x854 () Int)
(declare-fun x481 () Int)
(declare-fun x791 () Int)
(declare-fun x936 () Int)
(declare-fun x1273 (x366) Int)
(declare-fun x187 () Bool)
(declare-fun x636 () Int)
(declare-fun x850 () Int)
(declare-fun x330 () Bool)
(declare-fun x493 () Int)
(declare-fun x913 () Bool)
(declare-fun x65 () Int)
(declare-fun x344 () Int)
(declare-fun x390 () Bool)
(declare-fun x1014 () Int)
(declare-fun x145 () Int)
(declare-fun x1005 () Int)
(declare-fun x1222 () Bool)
(declare-fun x736 () Bool)
(declare-fun x253 () Int)
(declare-fun x966 () Int)
(declare-fun x842 (Int) Int)
(declare-fun x104 (Int) Int)
(declare-fun x1065 (Int Int) Int)
(declare-fun x359 () Int)
(declare-fun x1114 () Int)
(declare-fun x929 () Int)
(declare-fun x558 () Bool)
(declare-fun x434 () Int)
(declare-fun x963 () Bool)
(declare-fun x1260 () Bool)
(declare-fun x824 () Int)
(declare-fun x540 () Int)
(declare-fun x1339 () Bool)
(declare-fun x1343 () Bool)
(declare-fun x828 () Bool)
(declare-fun x1071 () Int)
(declare-fun x1121 () Int)
(declare-fun x1073 () Int)
(declare-fun x1067 () x366)
(declare-fun x837 () Bool)
(declare-fun x32 () Int)
(declare-fun x997 () Int)
(declare-fun x287 () Int)
(declare-fun x1152 () Bool)
(declare-fun x1166 () Int)
(declare-fun x1289 (x366) Int)
(declare-fun x1006 () Bool)
(declare-fun x1188 () Bool)
(declare-fun x607 () x366)
(declare-fun x322 () Int)
(declare-fun x262 () Int)
(declare-fun x845 () Int)
(declare-fun x536 () Bool)
(declare-fun x1056 () Int)
(declare-fun x267 () Bool)
(declare-fun x557 () Int)
(declare-fun x154 () Int)
(declare-fun x1097 () Bool)
(declare-fun x1204 () Int)
(declare-fun x494 () Bool)
(declare-fun x780 () Bool)
(declare-fun x580 () Int)
(declare-fun x256 () Int)
(declare-fun x958 () Bool)
(declare-fun x542 () Int)
(declare-fun x280 () Int)
(declare-fun x412 (x366) Int)
(declare-fun x1101 () Int)
(declare-fun x701 () Int)
(declare-fun x1045 () Int)
(declare-fun x954 () Int)
(declare-fun x124 () Bool)
(declare-fun x1185 () Bool)
(declare-fun x1230 () Bool)
(declare-fun x589 () Bool)
(declare-fun x59 () Bool)
(declare-fun x699 () Int)
(declare-fun x400 () Bool)
(declare-fun x171 (x366) Int)
(declare-fun x927 () Int)
(declare-fun x757 () Bool)
(declare-fun x933 () Int)
(declare-fun x642 () Int)
(declare-fun x1159 () Int)
(declare-fun x990 () Int)
(declare-fun x646 () Int)
(declare-fun x710 () Bool)
(declare-fun x1211 () Int)
(declare-fun x813 () Int)
(declare-fun x1035 () Int)
(declare-fun x78 () Int)
(declare-fun x786 () x366)
(declare-fun x38 () Bool)
(declare-fun x282 () Bool)
(declare-fun x1129 () Int)
(declare-fun x1296 () Bool)
(declare-fun x1146 () Int)
(declare-fun x163 () Int)
(declare-fun x1048 () Bool)
(declare-fun x960 () Int)
(declare-fun x678 () Bool)
(declare-fun x1064 () Int)
(declare-fun x922 () Bool)
(declare-fun x759 () Bool)
(declare-fun x1160 () Int)
(declare-fun x1147 () Int)
(declare-fun x1107 () Int)
(declare-fun x784 () Bool)
(declare-fun x1252 () Int)
(declare-fun x984 () Int)
(declare-fun x1271 () Int)
(declare-fun x1203 () Int)
(declare-fun x1266 () x366)
(declare-fun x54 () Bool)
(declare-fun x89 () Int)
(declare-fun x694 () Int)
(declare-fun x1032 () Int)
(declare-fun x1052 () Int)
(declare-fun x682 () x366)
(declare-fun x454 () Int)
(declare-fun x818 () Bool)
(declare-fun x283 () Int)
(declare-fun x907 () Int)
(declare-fun x377 () Int)
(declare-fun x1181 () Bool)
(declare-fun x441 () Bool)
(declare-fun x415 () Int)
(declare-fun x374 () Int)
(declare-fun x226 () Int)
(declare-fun x968 () Bool)
(declare-fun x1310 () Bool)
(declare-fun x1167 () Bool)
(declare-fun x1186 () Int)
(declare-fun x222 () Int)
(declare-fun x623 () Int)
(declare-fun x404 () Bool)
(declare-fun x765 () Bool)
(declare-fun x702 () x366)
(declare-fun x610 () Int)
(declare-fun x113 () Int)
(declare-fun x886 () Bool)
(declare-fun x526 (x366) Int)
(declare-fun x545 () Bool)
(declare-fun x208 () Bool)
(declare-fun x708 () Bool)
(declare-fun x1124 () Int)
(declare-fun x188 () Int)
(declare-fun x318 () Int)
(declare-fun x402 (x366) Int)
(declare-fun x420 () Int)
(declare-fun x96 () Bool)
(declare-fun x111 () Int)
(declare-fun x1340 () Bool)
(declare-fun x372 () Int)
(declare-fun x793 () Int)
(declare-fun x738 () Bool)
(declare-fun x1099 () Bool)
(declare-fun x838 () Int)
(declare-fun x284 (x366) Int)
(declare-fun x871 () Int)
(declare-fun x216 () Int)
(declare-fun x350 () Bool)
(declare-fun x269 () Bool)
(declare-fun x1139 () Bool)
(declare-fun x696 () Bool)
(declare-fun x252 () Bool)
(declare-fun x923 () Int)
(declare-fun x523 () Bool)
(declare-fun x676 () Bool)
(declare-fun x992 () Int)
(declare-fun x533 () Int)
(declare-fun x1096 () Int)
(declare-fun x722 () Bool)
(declare-fun x4 () Int)
(declare-fun x463 () Bool)
(declare-fun x1150 () Int)
(declare-fun x744 () Bool)
(declare-fun x790 () Bool)
(declare-fun x303 () Bool)
(declare-fun x362 () Int)
(declare-fun x829 () Int)
(declare-fun x1057 () Int)
(declare-fun x667 () Int)
(declare-fun x1292 () Int)
(declare-fun x403 () Bool)
(declare-fun x924 () Int)
(declare-fun x1023 () Bool)
(declare-fun x22 () Int)
(declare-fun x239 () x366)
(declare-fun x575 () Bool)
(declare-fun x1081 () Int)
(declare-fun x1155 () Bool)
(declare-fun x1255 () Int)
(declare-fun x564 () Int)
(declare-fun x1153 () Bool)
(declare-fun x120 () Bool)
(declare-fun x903 (x366) Int)
(declare-fun x792 () Int)
(declare-fun x382 () Int)
(declare-fun x385 () Bool)
(declare-fun x278 () Bool)
(declare-fun x503 () Int)
(declare-fun x716 () Int)
(declare-fun x152 () Bool)
(declare-fun x1009 () Int)
(declare-fun x235 () Bool)
(declare-fun x887 () Int)
(declare-fun x178 () Bool)
(declare-fun x106 () Int)
(declare-fun x940 () Int)
(declare-fun x30 () Bool)
(declare-fun x998 () Bool)
(declare-fun x1278 () Bool)
(declare-fun x832 () Int)
(declare-fun x905 () Int)
(declare-fun x3 () Int)
(declare-fun x1251 (Int Int) Int)
(declare-fun x543 () Bool)
(declare-fun x1175 (x366) Int)
(declare-fun x1318 () Bool)
(declare-fun x1229 () Bool)
(declare-fun x1319 () Bool)
(declare-fun x292 () Int)
(declare-fun x629 () Bool)
(declare-fun x18 () Int)
(declare-fun x671 () Bool)
(declare-fun x6 () Int)
(declare-fun x1148 () Int)
(declare-fun x665 () Int)
(declare-fun x501 () Int)
(declare-fun x594 () Int)
(declare-fun x461 () Bool)
(declare-fun x476 () Int)
(declare-fun x653 () Bool)
(declare-fun x465 () Bool)
(declare-fun x250 () Int)
(declare-fun x706 () Int)
(declare-fun x836 () Int)
(declare-fun x588 () Int)
(declare-fun x552 () Bool)
(declare-fun x904 () Int)
(declare-fun x899 () Bool)
(declare-fun x146 () Bool)
(declare-fun x783 (Int Int) Int)
(declare-fun x625 () Int)
(declare-fun x295 () Bool)
(declare-fun x1321 () Int)
(declare-fun x1020 () Bool)
(declare-fun x471 () Int)
(declare-fun x804 () Bool)
(declare-fun x664 () Bool)
(declare-fun x771 () Bool)
(declare-fun x213 (Int) Int)
(declare-fun x112 () Int)
(declare-fun x272 () Int)
(declare-fun x573 () Int)
(declare-fun x1187 () Int)
(declare-fun x1244 () Bool)
(declare-fun x422 () Int)
(declare-fun x1036 () Int)
(declare-fun x823 () Bool)
(declare-fun x890 (Int) Int)
(declare-fun x660 () Int)
(declare-fun x270 () Int)
(declare-fun x1095 () Bool)
(declare-fun x35 () Int)
(declare-fun x1047 () Bool)
(declare-fun x177 () Int)
(declare-fun x544 () Bool)
(declare-fun x357 () Bool)
(declare-fun x1162 () Int)
(declare-fun x1037 () Int)
(declare-fun x669 () Int)
(declare-fun x846 () Int)
(declare-fun x1314 () Bool)
(declare-fun x802 () Bool)
(declare-fun x148 () Int)
(declare-fun x123 () Int)
(declare-fun x1050 () Bool)
(declare-fun x1220 () Int)
(declare-fun x474 () Bool)
(declare-fun x860 () Int)
(declare-fun x931 () x366)
(declare-fun x161 () Int)
(declare-fun x869 () Int)
(declare-fun x428 () Int)
(declare-fun x442 () Int)
(declare-fun x1002 () Int)
(declare-fun x1322 () Int)
(declare-fun x1200 () Int)
(declare-fun x166 () Int)
(declare-fun x1134 () Bool)
(declare-fun x207 () Bool)
(declare-fun x915 () Bool)
(declare-fun x1337 () Bool)
(declare-fun x490 () Int)
(declare-fun x1261 () Int)
(declare-fun x301 () Int)
(declare-fun x859 () Bool)
(declare-fun x1157 () Int)
(declare-fun x1221 () Int)
(declare-fun x1176 () Bool)
(declare-fun x993 () Int)
(declare-fun x380 () Int)
(declare-fun x631 () Int)
(declare-fun x338 () Int)
(declare-fun x1003 (Int) Int)
(declare-fun x423 () Int)
(declare-fun x1307 () Bool)
(declare-fun x651 () Int)
(declare-fun x266 () Bool)
(declare-fun x251 () Bool)
(declare-fun x1110 () Int)
(declare-fun x340 () x366)
(declare-fun x427 () Int)
(declare-fun x459 () Int)
(declare-fun x457 () Bool)
(declare-fun x697 () Int)
(declare-fun x1323 () x366)
(declare-fun x233 () Bool)
(declare-fun x634 () Int)
(declare-fun x754 () Int)
(declare-fun x585 () Bool)
(declare-fun x852 () Bool)
(declare-fun x271 () Int)
(declare-fun x1059 () Bool)
(declare-fun x761 () Int)
(declare-fun x489 () Bool)
(declare-fun x77 () Int)
(declare-fun x1248 () Int)
(declare-fun x555 () Bool)
(declare-fun x1284 () Bool)
(declare-fun x437 () Int)
(declare-fun x387 () Int)
(declare-fun x61 () Int)
(declare-fun x586 () Int)
(declare-fun x76 () Int)
(declare-fun x1324 () Bool)
(declare-fun x487 () Bool)
(declare-fun x201 () Int)
(declare-fun x133 () Int)
(declare-fun x53 (x366) Int)
(declare-fun x227 () Int)
(declare-fun x805 () Int)
(declare-fun x951 () Int)
(declare-fun x616 (x366) Int)
(declare-fun x99 () Bool)
(declare-fun x343 () Int)
(declare-fun x657 () Int)
(declare-fun x1091 () Bool)
(declare-fun x179 () Bool)
(declare-fun x74 () Bool)
(declare-fun x290 () Bool)
(declare-fun x399 () Bool)
(declare-fun x624 () Int)
(declare-fun x243 () Bool)
(declare-fun x60 () Bool)
(declare-fun x571 () Int)
(declare-fun x574 () Bool)
(declare-fun x598 () Int)
(declare-fun x319 () Bool)
(declare-fun x707 () Int)
(declare-fun x570 () Int)
(declare-fun x335 () Bool)
(declare-fun x1149 () Int)
(declare-fun x535 () Int)
(declare-fun x703 () Int)
(declare-fun x1302 () x366)
(declare-fun x841 () Int)
(declare-fun x1156 () Int)
(declare-fun x1295 () Int)
(declare-fun x467 (Int) x366)
(declare-fun x1012 () Int)
(declare-fun x620 () Bool)
(declare-fun x751 () Bool)
(declare-fun x794 () Int)
(declare-fun x1119 () Bool)
(declare-fun x86 () Int)
(declare-fun x1074 () Int)
(declare-fun x25 () Bool)
(declare-fun x507 (x366) Int)
(declare-fun x1215 () Int)
(declare-fun x204 () Int)
(declare-fun x48 () Int)
(declare-fun x1294 () Int)
(declare-fun x577 () Int)
(declare-fun x13 () Int)
(declare-fun x245 () Int)
(declare-fun x421 () Int)
(declare-fun x1240 () Bool)
(declare-fun x679 () Bool)
(declare-fun x721 () Bool)
(declare-fun x1264 () Int)
(declare-fun x1257 () Int)
(declare-fun x709 () Bool)
(declare-fun x1234 () Bool)
(declare-fun x72 (Int) Int)
(declare-fun x1320 () x366)
(declare-fun x432 () Bool)
(declare-fun x514 () Int)
(declare-fun x684 () Bool)
(declare-fun x565 () Int)
(declare-fun x47 () Bool)
(declare-fun x1086 () Bool)
(declare-fun x51 () Int)
(declare-fun x49 () Int)
(declare-fun x83 () Bool)
(declare-fun x808 () Int)
(declare-fun x550 () Int)
(declare-fun x796 () Int)
(declare-fun x821 () Int)
(declare-fun x1115 () Int)
(declare-fun x8 (Int) Int)
(declare-fun x812 (x366) Int)
(declare-fun x1117 () Int)
(declare-fun x369 () Bool)
(declare-fun x1228 () Int)
(declare-fun x211 () Int)
(declare-fun x212 () Bool)
(declare-fun x118 () x366)
(declare-fun x170 (Int) Int)
(declare-fun x396 () Int)
(declare-fun x613 () Bool)
(declare-fun x996 () x366)
(declare-fun x674 () Int)
(declare-fun x134 () Int)
(declare-fun x268 () Int)
(declare-fun x406 () Bool)
(declare-fun x640 () Bool)
(declare-fun x64 () Bool)
(declare-fun x1141 () Int)
(declare-fun x587 () Bool)
(declare-fun x806 () Bool)
(declare-fun x460 () Bool)
(declare-fun x1106 () Int)
(declare-fun x1226 () Int)
(declare-fun x1109 () Int)
(declare-fun x964 () Int)
(declare-fun x1118 () Int)
(declare-fun x1131 () Int)
(declare-fun x485 () Bool)
(declare-fun x221 () Int)
(declare-fun x1184 () Bool)
(declare-fun x1232 () Int)
(declare-fun x830 () Int)
(declare-fun x63 () Int)
(declare-fun x1338 () Bool)
(declare-fun x180 () Bool)
(declare-fun x1039 () Bool)
(declare-fun x159 () Int)
(declare-fun x730 () Int)
(declare-fun x847 () Int)
(declare-fun x409 () Bool)
(declare-fun x162 () Bool)
(declare-fun x329 () Int)
(declare-fun x1128 () Int)
(declare-fun x1253 () Bool)
(declare-fun x1249 () Bool)
(declare-fun x1341 () Int)
(declare-fun x28 () Int)
(declare-fun x763 () Int)
(declare-fun x1007 () x366)
(declare-fun x184 () Int)
(declare-fun x160 () Int)
(declare-fun x1125 () Bool)
(declare-fun x659 () Int)
(declare-fun x547 () Int)
(declare-fun x1342 () Int)
(declare-fun x938 () Int)
(declare-fun x433 () Int)
(declare-fun x775 () Int)
(declare-fun x314 () Bool)
(declare-fun x811 () Int)
(declare-fun x1247 () Bool)
(declare-fun x1142 () Int)
(declare-fun x370 () Int)
(declare-fun x867 () Bool)
(declare-fun x1227 () Int)
(declare-fun x788 () Int)
(declare-fun x1105 () Int)
(declare-fun x1315 () Bool)
(declare-fun x767 () Int)
(declare-fun x937 () Int)
(declare-fun x777 () Int)
(declare-fun x447 () Int)
(declare-fun x880 () x366)
(declare-fun x491 () x366)
(declare-fun x955 () Int)
(declare-fun x1179 (x366) Int)
(declare-fun x499 () Int)
(declare-fun x164 () Int)
(declare-fun x483 () Int)
(declare-fun x614 () Int)
(declare-fun x946 () Bool)
(declare-fun x633 (x366) Int)
(declare-fun x346 () Bool)
(declare-fun x202 () Int)
(declare-fun x315 () Int)
(declare-fun x449 () Int)
(declare-fun x336 () Bool)
(declare-fun x967 (x366) Int)
(declare-fun x643 () Int)
(declare-fun x265 () Int)
(declare-fun x991 () Int)
(declare-fun x810 () Int)
(declare-fun x468 () Int)
(declare-fun x1183 () Int)
(declare-fun x209 (Int) Int)
(declare-fun x1127 () Int)
(declare-fun x410 () Int)
(declare-fun x73 () Int)
(declare-fun x67 () Int)
(declare-fun x1040 () Int)
(declare-fun x230 () Int)
(declare-fun x281 () Int)
(declare-fun x1058 (Int Int) Int)
(declare-fun x729 () Int)
(declare-fun x742 () Int)
(declare-fun x331 (x366) Int)
(declare-fun x247 () Bool)
(declare-fun x232 () Bool)
(declare-fun x1075 () Int)
(declare-fun x835 () Bool)
(declare-fun x1299 () Bool)
(declare-fun x882 () Int)
(declare-fun x1199 () Int)
(declare-fun x56 () Bool)
(declare-fun x1214 () Int)
(declare-fun x44 () Bool)
(declare-fun x537 () Int)
(declare-fun x609 () Int)
(declare-fun x1051 () Bool)
(declare-fun x337 () Bool)
(declare-fun x950 () Bool)
(declare-fun x109 () Int)
(declare-fun x817 () Bool)
(declare-fun x831 (Int) Int)
(declare-fun x194 () Int)
(declare-fun x516 (x366) Int)
(declare-fun x519 () Bool)
(declare-fun x1326 () Int)
(declare-fun x948 () Bool)
(declare-fun x655 () Int)
(declare-fun x248 () Bool)
(declare-fun x1258 () Int)
(declare-fun x578 () Int)
(declare-fun x444 () Int)
(declare-fun x582 () x366)
(declare-fun x115 () Int)
(declare-fun x486 () Bool)
(declare-fun x608 () Int)
(declare-fun x758 () Int)
(declare-fun x977 () Int)
(declare-fun x566 (x366) Int)
(declare-fun x1217 () Int)
(declare-fun x141 (x366) Int)
(declare-fun x826 () Bool)
(declare-fun x411 () Int)
(declare-fun x452 () Int)
(declare-fun x140 () Int)
(declare-fun x393 () Bool)
(declare-fun x538 () Bool)
(declare-fun x895 () Int)
(declare-fun x451 () Bool)
(declare-fun x766 () Int)
(declare-fun x352 () Int)
(declare-fun x91 () Int)
(declare-fun x1238 () Int)
(declare-fun x46 () Bool)
(declare-fun x144 () x366)
(declare-fun x1169 (x366) Int)
(declare-fun x590 () Int)
(declare-fun x62 (x366) Int)
(declare-fun x36 () Bool)
(declare-fun x770 () Int)
(declare-fun x220 () Int)
(declare-fun x1270 () Bool)
(declare-fun x1174 () Int)
(declare-fun x1004 () Bool)
(declare-fun x1285 () Int)
(declare-fun x1239 () Int)
(declare-fun x768 () Int)
(declare-fun x672 () Int)
(declare-fun x898 () Int)
(declare-fun x23 () Int)
(declare-fun x1305 () Bool)
(declare-fun x878 () Bool)
(declare-fun x19 () Int)
(declare-fun x128 () Int)
(declare-fun x910 () Bool)
(declare-fun x58 () Int)
(declare-fun x560 () Bool)
(declare-fun x92 () Int)
(declare-fun x1154 () Bool)
(declare-fun x1293 () Bool)
(declare-fun x100 () Int)
(declare-fun x478 () Bool)
(declare-fun x714 () Bool)
(declare-fun x458 () Bool)
(declare-fun x182 () Bool)
(declare-fun x691 () Bool)
(declare-fun x541 () Int)
(declare-fun x358 () Bool)
(declare-fun x297 (Int) Int)
(declare-fun x482 () Bool)
(declare-fun x175 () Int)
(declare-fun x103 () Int)
(declare-fun x798 () Int)
(declare-fun x299 () Bool)
(declare-fun x351 () Int)
(declare-fun x90 (x366) Int)
(declare-fun x244 () Bool)
(declare-fun x658 () Bool)
(declare-fun x237 () Int)
(declare-fun x787 () Int)
(declare-fun x1158 () Int)
(declare-fun x857 () Bool)
(declare-fun x384 () Int)
(declare-fun x488 () Int)
(declare-fun x1165 () Int)
(declare-fun x715 () Int)
(declare-fun x928 () Bool)
(declare-fun x151 () Int)
(declare-fun x308 () Int)
(declare-fun x1060 () Int)
(declare-fun x735 () Bool)
(declare-fun x34 () Int)
(declare-fun x743 () Int)
(declare-fun x29 () Int)
(declare-fun x753 () Int)
(declare-fun x88 () Int)
(declare-fun x980 (x366) Int)
(declare-fun x205 () Bool)
(declare-fun x559 () Int)
(declare-fun x95 () Bool)
(declare-fun x1170 () Int)
(declare-fun x1250 () Int)
(declare-fun x293 () Int)
(declare-fun x756 () Int)
(declare-fun x313 () Int)
(declare-fun x446 () Int)
(declare-fun x1077 () Int)
(declare-fun x215 () Int)
(declare-fun x1333 () Bool)
(declare-fun x101 () Int)
(declare-fun x274 () Bool)
(declare-fun x745 () Int)
(declare-fun x260 () Bool)
(declare-fun x176 () Int)
(declare-fun x139 () Bool)
(declare-fun x985 () Int)
(declare-fun x521 () Bool)
(declare-fun x255 () Int)
(declare-fun x740 () Bool)
(declare-fun x1046 () Int)
(declare-fun x602 () Int)
(declare-fun x863 () Int)
(declare-fun x975 () Int)
(declare-fun x327 () Int)
(declare-fun x1349 () Bool)
(declare-fun x238 () Bool)
(declare-fun x688 () Int)
(declare-fun x310 () Bool)
(declare-fun x325 () Int)
(declare-fun x712 () Int)
(declare-fun x785 () Bool)
(declare-fun x388 () Bool)
(declare-fun x843 () Int)
(declare-fun x685 () Bool)
(declare-fun x1026 () Bool)
(declare-fun x87 () Bool)
(declare-fun x37 () Int)
(declare-fun x529 () Bool)
(declare-fun x866 () Bool)
(declare-fun x650 () Int)
(declare-fun x645 () Int)
(declare-fun x1042 () Int)
(declare-fun x1216 () Int)
(declare-fun x1061 () Int)
(declare-fun x943 () Bool)
(declare-fun x147 () Int)
(declare-fun x1254 () Int)
(declare-fun x185 () Bool)
(declare-fun x875 () Int)
(declare-fun x546 () Int)
(declare-fun x748 () Int)
(declare-fun x438 (x366) Int)
(declare-fun x941 () Int)
(declare-fun x959 () Int)
(declare-fun x1290 () x366)
(declare-fun x414 () Int)
(declare-fun x522 () Bool)
(declare-fun x143 () Bool)
(declare-fun x1034 () Bool)
(declare-fun x224 () Int)
(declare-fun x395 () Bool)
(declare-fun x500 () Bool)
(declare-fun x961 (x366) Int)
(declare-fun x189 () Bool)
(declare-fun x1024 () Bool)
(declare-fun x464 () Int)
(declare-fun x1219 () Int)
(declare-fun x324 () Int)
(declare-fun x273 () Int)
(declare-fun x7 () Int)
(declare-fun x668 () Int)
(declare-fun x1113 () Int)
(declare-fun x276 () Bool)
(declare-fun x1317 () Int)
(declare-fun x906 () Bool)
(declare-fun x11 () Bool)
(declare-fun x1218 () Bool)
(declare-fun x1178 () Int)
(declare-fun x1277 () Bool)
(declare-fun x1044 () Int)
(declare-fun x321 () Int)
(declare-fun x569 () Int)
(declare-fun x383 () Bool)
(declare-fun x192 () Int)
(declare-fun x1 () Bool)
(declare-fun x572 () Bool)
(declare-fun x647 () Int)
(declare-fun x874 () Int)
(declare-fun x42 () Int)
(declare-fun x407 () Int)
(declare-fun x389 () x366)
(declare-fun x191 () x366)
(declare-fun x1123 () Bool)
(declare-fun x289 () Int)
(declare-fun x1078 () Bool)
(declare-fun x16 () Int)
(declare-fun x1087 () Bool)
(declare-fun x680 () Int)
(declare-fun x626 () Int)
(declare-fun x979 () Int)
(declare-fun x681 () Bool)
(declare-fun x1345 () Bool)
(declare-fun x349 () Bool)
(declare-fun x119 () Int)
(declare-fun x638 () Int)
(declare-fun x1022 (x366) Int)
(declare-fun x945 () Int)
(declare-fun x692 () Bool)
(declare-fun x386 () Bool)
(declare-fun x520 () Int)
(declare-fun x1197 () Bool)
(declare-fun x1208 () Int)
(declare-fun x675 () Int)
(declare-fun x285 () Bool)
(declare-fun x896 () Bool)
(declare-fun x117 () Bool)
(declare-fun x1025 () Int)
(declare-fun x1112 () Bool)
(declare-fun x79 (x366) Int)
(declare-fun x747 () Bool)
(declare-fun x723 () Int)
(declare-fun x246 () Int)
(declare-fun x229 () Int)
(declare-fun x974 () Int)
(declare-fun x1327 () Int)
(declare-fun x286 () Bool)
(declare-fun x934 () Bool)
(declare-fun x749 () Int)
(declare-fun x1331 () Bool)
(declare-fun x345 () Int)
(declare-fun x579 () Bool)
(declare-fun x121 () Int)
(declare-fun x242 () Int)
(declare-fun x822 () Int)
(declare-fun x448 () Int)
(declare-fun x1120 () Int)
(declare-fun x1133 () Bool)
(declare-fun x1102 () Int)
(declare-fun x210 () Int)
(declare-fun x1055 () Bool)
(declare-fun x1265 () Int)
(declare-fun x108 () Bool)
(declare-fun x617 () Bool)
(declare-fun x769 () Int)
(declare-fun x1126 () Int)
(declare-fun x815 () Int)
(declare-fun x249 () Bool)
(define-fun x502 ((x366 x366) (x155 Int)) x366 (ite ((_ is x909) x366) (x909 (x612 x366) (+ (x379 x366) x155)) (ite ((_ is x1283) x366) (x1283 (x789 x366) (x652 x366) (+ (x1308 x366) x155)) (x228 (+ x155 (x1212 x366))))))
(define-fun x827 ((x508 Int)) Int (ite (and (< x508 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x508)) x508 (- x508 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x206 ((x508 Int)) Int (ite (and (>= x508 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x508 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x508) x508))
(define-fun x85 ((x158 Int)) Bool (and (< x158 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x158 0)))
(define-fun x581 ((x158 Int)) Bool (and (= (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639935 x158) x158) (= (x1251 x158 115792089237316195423570985008687907853269984665640564039457584007913129639935) x158)))
(define-fun x865 ((x158 Int)) Bool (and (= 0 (x1251 x158 0)) (= (x1251 0 x158) 0)))
(define-fun x1104 ((x158 Int)) Bool (= (x1251 x158 x158) x158))
(define-fun x157 ((x158 Int)) Bool (and (x865 x158) (x1104 x158) (x581 x158)))
(define-fun x127 ((x158 Int) (x1316 Int)) Bool (= (x1251 x158 x1316) (x1251 x1316 x158)))
(define-fun x978 ((x158 Int) (x1316 Int)) Bool (and (>= (x1251 x158 x1316) 0) (=> (<= 0 x1316) (<= (x1251 x158 x1316) x1316)) (=> (>= x158 0) (<= (x1251 x158 x1316) x158))))
(define-fun x149 ((x158 Int) (x1316 Int)) Bool (and (x127 x158 x1316) (x978 x158 x1316)))
(define-fun x711 ((x158 Int)) Bool (=> (and (< x158 2) (<= 0 x158)) (= (x1251 38597363079105398474523661669562635951089994888546854679819194669304376546645 x158) x158)))
(define-fun x976 ((x158 Int)) Bool (and (x149 x158 38597363079105398474523661669562635951089994888546854679819194669304376546645) (x711 x158)))
(define-fun x456 ((x158 Int)) Bool (= (x1251 x158 65535) (mod x158 65536)))
(define-fun x1298 ((x158 Int)) Bool (and (x149 x158 65535) (x456 x158)))
(define-fun x302 ((x158 Int)) Bool (= (mod x158 4) (x1251 x158 3)))
(define-fun x1132 ((x158 Int)) Bool (and (x302 x158) (x149 x158 3)))
(define-fun x20 ((x158 Int)) Bool (= (+ (x1251 x158 4294901760) (mod x158 65536)) (mod x158 4294967296)))
(define-fun x952 ((x158 Int)) Bool (and (x149 x158 4294901760) (x20 x158)))
(define-fun x263 ((x158 Int)) Bool (= (mod x158 281474976710656) (+ (mod x158 4294967296) (x1251 x158 281470681743360))))
(define-fun x394 ((x158 Int)) Bool (and (x149 x158 281470681743360) (x263 x158)))
(define-fun x739 ((x158 Int)) Bool (= (mod x158 72057594037927936) (+ (x1251 x158 71776119061217280) (mod x158 281474976710656))))
(define-fun x241 ((x158 Int)) Bool (and (x149 x158 71776119061217280) (x739 x158)))
(define-fun x1344 ((x158 Int)) Bool (= (mod x158 1208925819614629174706176) (+ (mod x158 18446744073709551616) (x1251 x158 1208907372870555465154560))))
(define-fun x472 ((x158 Int)) Bool (and (x1344 x158) (x149 x158 1208907372870555465154560)))
(define-fun x413 ((x158 Int)) Bool (= (mod x158 95780971304118053647396689196894323976171195136475136) (+ (x1251 x158 95406826884961342500336545879718955523139276405473280) (mod x158 374144419156711147060143317175368453031918731001856))))
(define-fun x492 ((x158 Int)) Bool (and (x413 x158) (x149 x158 95406826884961342500336545879718955523139276405473280)))
(define-fun x1272 ((x158 Int)) Bool (= (x1251 x158 1) (mod x158 2)))
(define-fun x1202 ((x158 Int)) Bool (and (x149 x158 1) (x1272 x158)))
(define-fun x1288 ((x158 Int)) Bool (= (mod x158 340282366920938463463374607431768211456) (x1251 x158 340282366920938463463374607431768211455)))
(define-fun x893 ((x158 Int)) Bool (and (x149 x158 340282366920938463463374607431768211455) (x1288 x158)))
(define-fun x889 ((x158 Int)) Bool (= (+ (mod x158 32) (x1251 x158 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x158 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x532 ((x158 Int)) Bool (and (x149 x158 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x889 x158)))
(define-fun x717 ((x158 Int)) Bool (= (mod x158 1099511627776) (x1251 x158 1099511627775)))
(define-fun x1207 ((x158 Int)) Bool (and (x149 x158 1099511627775) (x717 x158)))
(define-fun x531 ((x158 Int)) Bool (= (mod x158 144115188075855872) (+ (x1251 x158 72057594037927936) (mod x158 72057594037927936))))
(define-fun x416 ((x158 Int)) Bool (and (x149 x158 72057594037927936) (x531 x158)))
(define-fun x1276 ((x158 Int)) Bool (= (mod x158 288230376151711744) (+ (x1251 x158 144115188075855872) (mod x158 144115188075855872))))
(define-fun x690 ((x158 Int)) Bool (and (x1276 x158) (x149 x158 144115188075855872)))
(define-fun x1076 ((x158 Int)) Bool (= (+ (mod x158 288230376151711744) (x1251 x158 288230376151711744)) (mod x158 576460752303423488)))
(define-fun x234 ((x158 Int)) Bool (and (x1076 x158) (x149 x158 288230376151711744)))
(define-fun x1092 ((x158 Int)) Bool (= (+ (mod x158 576460752303423488) (x1251 x158 576460752303423488)) (mod x158 1152921504606846976)))
(define-fun x116 ((x158 Int)) Bool (and (x1092 x158) (x149 x158 576460752303423488)))
(define-fun x637 ((x158 Int)) Bool (= (mod x158 2305843009213693952) (+ (mod x158 1152921504606846976) (x1251 x158 1152921504606846976))))
(define-fun x378 ((x158 Int)) Bool (and (x149 x158 1152921504606846976) (x637 x158)))
(define-fun x332 ((x158 Int)) Bool (= (+ (x1251 x158 6582018229189043197315758676582005330734049138558148258257960960) (mod x158 95780971304118053647396689196894323976171195136475136)) (mod x158 6582018229284824168619876730229402019930943462534319453394436096)))
(define-fun x1168 ((x158 Int)) Bool (and (x149 x158 6582018229189043197315758676582005330734049138558148258257960960) (x332 x158)))
(define-fun x553 ((x169 Int)) Int (ite (= 320 x169) 114274503271123192386478379219969658730955725740335141578591849194369543307264 (x72 x169)))
(define-fun x27 ((x169 Int)) Int (ite (and (> (+ 320 32) x169) (>= x169 320)) (x528 (+ 0 (- x169 320))) (x553 x169)))
(define-fun x105 ((x169 Int)) Int (ite x1167 (x27 x169) (x553 x169)))
(define-fun x995 ((x169 Int)) Int (ite (= x355 x169) 11049711537980759571054125042374268220760016173988553948347240322396617441280 (x105 x169)))
(define-fun x525 ((x169 Int)) Int (ite (= x169 x638) 52 (x995 x169)))
(define-fun x704 ((x169 Int)) Int (ite (= x169 x1170) 54 (x525 x169)))
(define-fun x726 ((x169 Int)) Int (ite (= x169 x727) 55 (x704 x169)))
(define-fun x510 ((x169 Int)) Int (ite (= x169 x368) (x90 x604) (x726 x169)))
(define-fun x1335 ((x169 Int)) Int (ite (= x169 x361) x1246 (x510 x169)))
(define-fun x1189 ((x169 Int)) Int (ite (= x1098 x169) x194 (x1335 x169)))
(define-fun x1268 ((x169 Int)) Int (ite (= x169 x951) x1105 (x1189 x169)))
(define-fun x897 ((x169 Int)) Int (ite (= x1008 x169) x166 (x1268 x169)))
(define-fun x926 ((x169 Int)) Int (ite (= x501 x169) x924 (x897 x169)))
(define-fun x436 ((x169 Int)) Int (ite (= x219 x169) x964 (x926 x169)))
(define-fun x288 ((x169 Int)) Int (ite (= x169 x355) x22 (x436 x169)))
(define-fun x705 ((x169 Int)) Int (ite x575 (x288 x169) (x436 x169)))
(define-fun x732 ((x169 x366)) Int (ite (= x169 x102) x1213 (x961 x169)))
(define-fun x186 ((x169 Int)) Int (ite (= 1696 x169) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x170 x169)))
(define-fun x1111 ((x169 Int)) Int (ite (and (>= x169 1696) (> (+ 1696 32) x169)) (x842 (+ 0 (- x169 1696))) (x186 x169)))
(define-fun x513 ((x169 Int)) Int (ite x953 (x1111 x169) (x186 x169)))
(define-fun x1013 ((x169 Int)) Int (ite (= x169 x845) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x513 x169)))
(define-fun x807 ((x169 Int)) Int (ite (and (>= x169 x845) (< x169 (+ x845 128))) (x309 (+ (- x169 x845) 0)) (x1013 x169)))
(define-fun x1116 ((x169 Int)) Int (ite x470 (x807 x169) (x1013 x169)))
(define-fun x66 ((x169 Int)) Int (ite (= x246 x169) 13403848742886913342097769455703835141295138244810201074363856310843329216512 (x1116 x169)))
(define-fun x700 ((x169 Int)) Int (ite (= x169 x77) x977 (x66 x169)))
(define-fun x317 ((x169 Int)) Int (ite (and (> (+ 32 x246) x169) (>= x169 x246)) (x1003 (+ (- x169 x246) 0)) (x700 x169)))
(define-fun x1144 ((x169 Int)) Int (ite x95 (x317 x169) (x700 x169)))
(define-fun x360 ((x169 Int)) Int (ite (= x888 x169) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x1144 x169)))
(define-fun x606 ((x169 Int)) Int (ite (= x854 x169) x1248 (x360 x169)))
(define-fun x1033 ((x169 Int)) Int (ite (= x1294 x169) 0 (x606 x169)))
(define-fun x316 ((x169 Int)) Int (ite (= x169 x1190) x1146 (x1033 x169)))
(define-fun x450 ((x169 Int)) Int (ite (= x1312 x169) x1014 (x316 x169)))
(define-fun x419 ((x169 Int)) Int (ite (= x729 x169) x167 (x450 x169)))
(define-fun x877 ((x169 Int)) Int (ite (= x973 x169) x697 (x419 x169)))
(define-fun x687 ((x169 Int)) Int (ite (= x879 x169) x1029 (x877 x169)))
(define-fun x677 ((x169 Int)) Int (ite (= x169 x89) x1246 (x687 x169)))
(define-fun x925 ((x169 Int)) Int (ite (= x719 x169) x974 (x677 x169)))
(define-fun x654 ((x169 Int)) Int (ite (and (< x169 (+ x888 96)) (>= x169 x888)) (x209 (+ 0 (- x169 x888))) (x925 x169)))
(define-fun x236 ((x169 Int)) Int (ite x949 (x654 x169) (x925 x169)))
(define-fun x562 ((x169 Int)) Int (ite (= x18 x169) x530 (x236 x169)))
(define-fun x5 ((x169 Int)) Int (ite (= x449 x169) x642 (x562 x169)))
(define-fun x223 ((x169 Int)) Int (ite (= x169 x609) x1025 (x5 x169)))
(define-fun x214 ((x169 Int)) Int (ite (= x660 x169) x1164 (x223 x169)))
(define-fun x849 ((x169 Int)) Int (ite (= x169 x647) x959 (x214 x169)))
(define-fun x10 ((x169 Int)) Int (ite (= x169 x84) 97250886131833805217759495634388081419703557252615901133360390455399389593600 (x849 x169)))
(define-fun x1041 ((x169 Int)) Int (ite (= x499 x169) x977 (x10 x169)))
(define-fun x190 ((x169 Int)) Int (ite (= x169 x227) x1105 (x1041 x169)))
(define-fun x524 ((x169 Int)) Int (ite (= x169 x622) x1146 (x190 x169)))
(define-fun x291 ((x169 Int)) Int (ite (= x169 x577) x1164 (x524 x169)))
(define-fun x504 ((x169 Int)) Int (ite (and (>= x169 x84) (> (+ x84 0) x169)) (x8 (+ 0 (- x169 x84))) (x291 x169)))
(define-fun x864 ((x169 x366)) Int (ite x771 (x402 x169) (ite x399 (x961 x169) (ite x928 (x961 x169) (x732 x169)))))
(define-fun x68 ((x169 x366)) Int (ite x771 (x1022 x169) (x812 x169)))
(define-fun x725 ((x169 x366)) Int (ite (= x169 x57) x1032 (x518 x169)))
(define-fun x902 ((x169 x366)) Int (ite x285 (x518 x169) (x725 x169)))
(define-fun x981 ((x169 x366)) Int (ite x771 (x79 x169) (ite x56 (x902 x169) (x518 x169))))
(define-fun x750 ((x169 x366)) Int (ite (= x57 x169) x556 (x284 x169)))
(define-fun x921 ((x169 x366)) Int (ite x771 (x171 x169) (x750 x169)))
(define-fun x375 ((x169 x366)) Int (ite (= x169 x702) x1182 (x516 x169)))
(define-fun x539 ((x169 x366)) Int (ite x1307 (x516 x169) (x375 x169)))
(define-fun x257 ((x169 x366)) Int (ite x771 (x1332 x169) (ite x56 (x539 x169) (x516 x169))))
(define-fun x1062 ((x169 x366)) Int (ite (= x702 x169) x1113 (x438 x169)))
(define-fun x862 ((x169 x366)) Int (ite x771 (x649 x169) (x1062 x169)))
(define-fun x1346 ((x169 x366)) Int (ite (= x169 x389) x34 (x903 x169)))
(define-fun x1140 ((x169 x366)) Int (ite x771 (x1043 x169) (x1346 x169)))
(define-fun x203 ((x169 x366)) Int (ite (= x389 x169) x598 (x967 x169)))
(define-fun x1301 ((x169 x366)) Int (ite x771 (x1179 x169) (ite x56 (x203 x169) (x967 x169))))
(define-fun x305 ((x169 x366)) Int (ite x771 (x1175 x169) (x1282 x169)))
(define-fun x225 ((x169 x366)) Int (ite x771 (x980 x169) (x141 x169)))
(define-fun x94 ((x169 x366)) Int (ite x771 (x331 x169) (x633 x169)))
(define-fun x498 ((x169 x366)) Int (ite x771 (x1205 x169) (x1010 x169)))
(define-fun x511 ((x169 x366)) Int (ite x771 (x507 x169) (x41 x169)))
(define-fun x554 ((x169 x366)) Int (ite (= x169 x1163) x1183 (x62 x169)))
(define-fun x1274 ((x169 x366)) Int (ite x248 (x62 x169) (ite x906 (x62 x169) (x554 x169))))
(define-fun x259 ((x169 x366)) Int (ite x771 (x412 x169) (ite x56 (x1274 x169) (x62 x169))))
(define-fun x2 ((x169 x366)) Int (ite x771 (x566 x169) (x1079 x169)))
(define-fun x496 ((x169 x366)) Int (ite x771 (x1273 x169) (x1015 x169)))
(define-fun x1000 ((x169 Int)) Int (ite (= x169 x1028) (ite false 1 0) (x430 x169)))
(define-fun x600 ((x169 Int)) Int (ite (= x169 x1072) (ite false 1 0) (x890 x169)))
(define-fun x1151 ((x169 x366)) Int (ite x771 (x495 x169) (x1289 x169)))
(define-fun x1001 ((x169 Int)) Int (ite x771 (x504 x169) (x291 x169)))
(define-fun x333 ((x169 Int)) Int (ite (= x590 x169) 81122015567734080146792821972179436176149904945806215094928935927862165241856 (x1001 x169)))
(define-fun x455 ((x169 Int)) Int (ite (= x1239 x169) x58 (x333 x169)))
(define-fun x373 ((x169 Int)) Int (ite (and (< x169 (+ x590 32)) (<= x590 x169)) (x1297 (+ 0 (- x169 x590))) (x455 x169)))
(define-fun x1089 ((x169 Int)) Int (ite x948 (x373 x169) (x455 x169)))
(define-fun x884 ((x169 Int)) Int (ite x698 (x1001 x169) (ite x1100 (x1089 x169) (x1001 x169))))
(define-fun x776 ((x169 Int)) Int (ite (= x49 x169) 81122015567734080146792821972179436176149904945806215094928935927862165241856 (x884 x169)))
(define-fun x825 ((x169 Int)) Int (ite (= x169 x51) x437 (x776 x169)))
(define-fun x453 ((x169 Int)) Int (ite (and (>= x169 x49) (< x169 (+ x49 32))) (x831 (+ 0 (- x169 x49))) (x825 x169)))
(define-fun x1300 ((x169 Int)) Int (ite x689 (x453 x169) (x825 x169)))
(define-fun x942 ((x169 Int)) Int (ite x120 (x1300 x169) (x884 x169)))
(define-fun x597 ((x169 Int)) Int (ite (= x169 x1264) 13403848742886913342097769455703835141295138244810201074363856310843329216512 (x942 x169)))
(define-fun x126 ((x169 Int)) Int (ite (= x923 x169) x977 (x597 x169)))
(define-fun x746 ((x169 Int)) Int (ite (and (> (+ 32 x1264) x169) (<= x1264 x169)) (x297 (+ 0 (- x169 x1264))) (x126 x169)))
(define-fun x917 ((x169 Int)) Int (ite x1329 (x746 x169) (x126 x169)))
(define-fun x772 ((x169 Int)) Int (ite x208 (x942 x169) (x917 x169)))
(define-fun x136 ((x169 Int)) Int (ite (= x169 x870) 13403848742886913342097769455703835141295138244810201074363856310843329216512 (x772 x169)))
(define-fun x1245 ((x169 Int)) Int (ite (= x811 x169) x977 (x136 x169)))
(define-fun x466 ((x169 Int)) Int (ite (and (>= x169 x870) (> (+ 32 x870) x169)) (x153 (+ 0 (- x169 x870))) (x1245 x169)))
(define-fun x137 ((x169 Int)) Int (ite x867 (x466 x169) (x1245 x169)))
(define-fun x1280 ((x169 Int)) Int (ite (= x433 x169) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x137 x169)))
(define-fun x809 ((x169 Int)) Int (ite (= x169 x48) x977 (x1280 x169)))
(define-fun x1173 ((x169 Int)) Int (ite (and (<= x433 x169) (> (+ x433 32) x169)) (x213 (+ (- x169 x433) 0)) (x809 x169)))
(define-fun x1279 ((x169 Int)) Int (ite x1262 (x1173 x169) (x809 x169)))
(define-fun x894 ((x169 Int)) Int (ite x178 (x772 x169) (x1279 x169)))
(define-fun x795 ((x169 Int)) Int (ite x545 (x894 x169) (x884 x169)))
(define-fun x856 ((x169 Int)) Int (ite x538 (x884 x169) (x795 x169)))
(define-fun x1325 ((x169 Int)) Int (ite x461 (x1001 x169) (ite x1020 (x1001 x169) (ite x1331 (x856 x169) (x1001 x169)))))
(define-fun x197 ((x169 Int)) Int (ite (= x659 x169) x1146 (x1325 x169)))
(define-fun x737 ((x169 Int)) Int (ite (= x659 x169) x1146 (x197 x169)))
(define-fun x1021 ((x169 x366)) Int (ite x771 (x1169 x169) (x616 x169)))
(define-fun x1233 ((x169 Int)) Int (ite (= x169 x1028) (ite true 1 0) (x1000 x169)))
(define-fun x298 ((x169 Int)) Int (ite x473 (x1233 x169) (x1000 x169)))
(define-fun x43 ((x169 Int)) Int (ite x208 (x1000 x169) (x298 x169)))
(define-fun x275 ((x169 Int)) Int (ite x538 (x1000 x169) (ite x545 (x43 x169) (x1000 x169))))
(define-fun x93 ((x169 x366)) Int (ite x771 (x53 x169) (x122 x169)))
(define-fun x408 ((x169 x366)) Int (ite x771 (x982 x169) (x713 x169)))
(define-fun x641 ((x169 Int)) Int (ite (= x1072 x169) (ite x1059 1 0) (x600 x169)))
(define-fun x1085 ((x158 Int)) Bool (=> (and (not (= 38597363079105398474523661669562635951089994888546854679819194669304376546645 x158)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 x158)) (not (= 2054196882 x158)) (not (= x158 1000000000000000000000000000)) (not (= x158 6582018229189043197315758676582005330734049138558148258257960960)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x158)) (not (= 65535 x158)) (not (= 994519296000000 x158)) (not (= 1674164320 x158)) (not (= x158 409856580)) (not (= 340282366920938463463374607431768211456 x158)) (not (= 500000000000000000000000000 x158)) (not (= x158 1461501637330902918203684832716283019655932542975)) (not (= 65536 x158)) (not (= 946116605 x158)) (not (= 95406826884961342500336545879718955523139276405473280 x158)) (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 x158)) (not (= 72057594037927936 x158)) (not (= x158 81122015567734080146792821972179436176149904945806215094928935927862165241856)) (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x158)) (not (= 1764920812 x158)) (not (= x158 54940573406046109056602222415596668683460243721328594580962599660119180443648)) (not (= 144115188075855872 x158)) (not (= 1099511627776 x158)) (not (= x158 1635491895)) (< 10000 x158) (not (= 1000000000000000000 x158)) (not (= x158 74874610042509929465218460033027201126834042060343647393369405262880053395456)) (not (= 281470681743360 x158)) (not (= x158 340282366920938463463374607431768211455)) (not (= x158 1208907372870555465154560)) (not (= x158 1461501637330902918203684832716283019655932542976)) (not (= x158 4294967296)) (not (= 1152921504606846976 x158)) (not (= x158 80397878463760440755375692149700041695399247739548614023716483005714108776448)) (not (= 11049711537980759571054125042374268220760016173988553948347240322396617441280 x158)) (not (= x158 1099511627775)) (not (= 31536000 x158)) (not (= x158 13403848742886913342097769455703835141295138244810201074363856310843329216512)) (not (= x158 115792089237316195423570985008687907853269984665640064039457584007913129639935)) (not (= x158 4294901760)) (not (= 18446744073709551615 x158)) (not (= x158 71776119061217280)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x158)) (not (= x158 114274503271123192386478379219969658730955725740335141578591849194369543307264)) (not (= 576460752303423488 x158)) (not (= 288230376151711744 x158))) (not ((_ is x228) (x467 x158)))))
(assert (x85 x1124))
(assert (= x724 (and x523 x64)))
(assert (= 65535 (x90 (x228 65535))))
(assert (= (and (not x628) x96) x1260))
(assert (x85 x174))
(assert (= x399 (and x441 (not x666))))
(assert (x85 x240))
(assert (x532 x401))
(assert (x85 x979))
(assert (x85 x769))
(assert (x532 x1255))
(assert (= (and x33 x179) x314))
(assert (x157 x39))
(assert (x85 x294))
(assert (x85 x813))
(assert (x157 1208907372870555465154560))
(assert (x85 x135))
(assert (x85 x561))
(assert (x85 x449))
(assert (= (=> (and (and (= (x827 (+ 31 x846)) x39) (= x486 (> x860 0)) (= (x513 1696) x193) (not x1247) (= (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x39) x905) (not x1345) (= x1345 (= x588 0)) (= x1247 (or (and (< x846 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x846))) (> x846 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x827 (+ 1696 x905)) x845)) (or (and (= x860 x876) (not x486)) (and (and (= x876 1) (< x774 4294967296)) x486))) x765) x395))
(assert (= x1246 (x90 (x467 x1246))))
(assert (x85 x293))
(assert (= x238 (and x555 (not x1180))))
(assert (= (=> (and (= x1222 (= x875 0)) (or x1222 (not x1222))) x1234) x439))
(assert (x157 x701))
(assert (= (and (not x1242) x181) x1259))
(assert (= (x228 71776119061217280) (x467 71776119061217280)))
(assert (x85 x533))
(assert (x1085 x442))
(assert (x85 x426))
(assert (x472 x799))
(assert (x85 x767))
(assert (=> (>= 10000 x1224) (= (x228 x1224) (x467 x1224))))
(assert (x85 x255))
(assert (x378 x1118))
(assert (x157 340282366920938463463374607431768211455))
(assert (x85 x697))
(assert (x85 x1214))
(assert (x85 x602))
(assert (x85 x632))
(assert (x85 x590))
(assert (x85 x34))
(assert (x85 x166))
(assert (x85 x573))
(assert (= x1155 (or x1262 x238)))
(assert (x85 x219))
(assert (x85 x328))
(assert (x85 x964))
(assert (x157 x147))
(assert (x85 x761))
(assert (x85 x61))
(assert (x85 x161))
(assert (= x536 (or x74 x470)))
(assert (= (=> (and (not x751) (= (not x859) x819) (= x615 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x669)) (> x200 0) (= x1225 (or x722 x819)) (= (x827 (+ x1117 500000000000000000000000000)) x343) (= x559 (div x343 1000000000000000000000000000)) (= x559 x1186) (= x200 (ite x1225 1 0)) (= x751 (> x559 340282366920938463463374607431768211455)) (= (mod (* x669 x895) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1117) (= (< x615 x895) x859) (= x1182 (x1251 340282366920938463463374607431768211455 x559)) (= (= x669 0) x722)) x644) x839))
(assert (= x1 (and x1244 (not x1229))))
(assert (x85 x1080))
(assert (x85 x800))
(assert (x85 x1057))
(assert (= (x228 4294967296) (x467 4294967296)))
(assert (x85 x657))
(assert (= x1095 (=> (and (or (and (and (= x966 1) (< x1341 4294967296)) x619) (and (not x619) (= x997 x966))) (and (= x1320 (x502 x1049 1)) (>= x626 0) (= (x827 (+ x1264 4)) x923) (> 1461501637330902918203684832716283019655932542976 x626) (= x619 (< 0 x997)) (= (x225 x1320) x626) (>= 1461501637330902918203684832716283019655932542975 x626))) x397)))
(assert (x157 4294901760))
(assert (x85 x1005))
(assert (= (and (not x1206) x266) x485))
(assert (x85 x1008))
(assert (x157 95406826884961342500336545879718955523139276405473280))
(assert (x85 x962))
(assert (x85 x1256))
(assert (x85 x339))
(assert (= (and (not x1091) x232) x817))
(assert (x85 x380))
(assert (x85 x1141))
(assert (= x266 (or x120 x585)))
(assert (= (x228 115792089237316195423570985008687907853269984665640564039457584007913129634935) (x467 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (= (x90 (x467 x437)) x437))
(assert (= x393 (=> (and (= (= x1267 0) x1091) (or (and (not x1091) (and (= x148 (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x1035)) (= (< x1044 x101) x1270) (= 0 x871) (= x706 (div x1267 2)) (= (div x434 10000) x101) (= x434 (x827 (+ x111 5000))) (= x871 (ite x205 1 0)) (= x954 x1084) (= x1188 (= 0 x1267)) (= (or x489 x494) x1130) (= x1214 (x206 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x706))) (< 0 x1109) (= x723 (mod (* 1000000000000000000 x101) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x205 (or x1188 x337)) (= (= 0 x1035) x494) (= x111 (mod (* x362 x1035) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (not x1270) x522) (= (div x1214 1000000000000000000) x1044) (= x872 (div x1267 2)) (= (x827 (+ x872 x723)) x217) (= (ite x1130 1 0) x1109) (= x337 (not x522)) (= x390 (< x148 x362)) (= x489 (not x390)) (= x954 (div x217 x1267)))) (and x1091 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1084)))) x350)))
(assert (= (ite (< x480 256) (div x665 (x1065 2 x480)) 0) (x762 x665 x480)))
(assert (x85 x407))
(assert (= (and x900 x357) x948))
(assert (x85 x1131))
(assert (x1085 x1074))
(assert (x85 x836))
(assert (= (x90 (x502 x1138 1)) (+ (x90 x1138) 1)))
(assert (= x83 (and (not x735) x1310)))
(assert (x85 x28))
(assert (x85 x433))
(assert (= (and x196 x458) x335))
(assert (x85 x1093))
(assert (x85 x183))
(assert (x85 x882))
(assert (x85 x1028))
(assert (x85 x674))
(assert (x85 x22))
(assert (= (and x1038 x714) x388))
(assert (x85 x811))
(assert (x85 x920))
(assert (x85 x1064))
(assert (x241 x799))
(assert (x85 x423))
(assert (x85 x1113))
(assert (x85 x1135))
(assert (x85 x151))
(assert (= (and x1034 (not x189)) x664))
(assert (= x330 (or x653 x282)))
(assert (x157 x1238))
(assert (x85 x1105))
(assert (= (x228 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x467 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (= (x90 (x502 x639 1)) (+ 1 (x90 x639))))
(assert (= x709 (and x1340 x551)))
(assert (= (x467 13403848742886913342097769455703835141295138244810201074363856310843329216512) (x228 13403848742886913342097769455703835141295138244810201074363856310843329216512)))
(assert (= x178 (and (not x33) x179)))
(assert (= (=> (and (= x1186 x959) (= x246 x1075) (= (x1251 1099511627775 x135) x598) (= x815 x1164)) x958) x311))
(assert (x157 x1287))
(assert (x85 x264))
(assert (x85 x344))
(assert (= (or x545 x709 x251) x572))
(assert (= 1208907372870555465154560 (x90 (x228 1208907372870555465154560))))
(assert (x85 x1237))
(assert (x85 x630))
(assert (x85 x598))
(assert (= (x228 65535) (x467 65535)))
(assert (x85 x125))
(assert (x85 x1219))
(assert (= (x90 (x228 1099511627776)) 1099511627776))
(assert (= (x228 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x467 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x85 x650))
(assert (= (and x806 x139) x1340))
(assert (x85 x860))
(assert (= (x467 114274503271123192386478379219969658730955725740335141578591849194369543307264) (x228 114274503271123192386478379219969658730955725740335141578591849194369543307264)))
(assert (x157 x960))
(assert (= 1000000000000000000000000000 (x90 (x228 1000000000000000000000000000))))
(assert (x85 x798))
(assert (x85 x1226))
(assert (x85 x12))
(assert (x85 x534))
(assert (x85 x933))
(assert (x85 x932))
(assert (= x613 (or x1019 x698)))
(assert (= 281470681743360 (x90 (x228 281470681743360))))
(assert (x85 x571))
(assert (= x545 (or x1155 x178)))
(assert (=> (<= x673 10000) (= (x467 x673) (x228 x673))))
(assert (x85 x887))
(assert (= (mod (* x832 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1058 x832 1)))
(assert (= (x90 (x502 x144 1)) (+ (x90 x144) 1)))
(assert (x85 x1149))
(assert (x85 x1073))
(assert (x85 x701))
(assert (x85 x367))
(assert (x85 x101))
(assert (= (or x663 x1319) x968))
(assert (x85 x80))
(assert (= 0 (x170 x344)))
(assert (x85 x391))
(assert (= x1039 (and x266 x1206)))
(assert (x157 38597363079105398474523661669562635951089994888546854679819194669304376546645))
(assert (x85 x874))
(assert (x85 x1084))
(assert (x85 x868))
(assert (= (and x385 x1176) x285))
(assert (x85 x1292))
(assert (= x790 (=> (and (not x780) (= x1193 (x827 (+ x49 x573))) (= x1193 x933) (= x1184 (= 0 x661)) (= (x827 (+ x769 31)) x847) (= (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x847) x573) (= (or (and (> 32 x769) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x769))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x769)) x780) (not x1184) (= x1208 x1165) (= x1165 (x1300 x49))) x543)))
(assert (x85 x670))
(assert (x893 x756))
(assert (x85 x871))
(assert (= (x467 946116605) (x228 946116605)))
(assert (= (=> (and (or (and x1206 (and (= x250 0) (= (not (= 0 x569)) x1112) (= x569 (x1251 1 x325)) (= x1112 x26) (= x820 (x827 (+ 64 x933))) (= x1264 x820) (= (x762 x798 1) x325))) (and (and (= x933 x1264) (= x1206 x26)) (not x1206))) (= (not (= x427 0)) x1206)) x752) x543))
(assert (x85 x838))
(assert (x85 x846))
(assert (x85 x505))
(assert (=> (>= 10000 x1074) (= (x467 x1074) (x228 x1074))))
(assert (= x771 (and x965 x247)))
(assert (x85 x938))
(assert (= (or x857 x867) x1243))
(assert (x85 x503))
(assert (= 0 (x170 x733)))
(assert (x85 x91))
(assert (x85 x779))
(assert (x85 x796))
(assert (=> (>= 10000 x4) (= (x467 x4) (x228 x4))))
(assert (= 1099511627775 (x90 (x228 1099511627775))))
(assert (= (x90 (x502 x239 1)) (+ 1 (x90 x239))))
(assert (x157 x1255))
(assert (x85 x338))
(assert (x85 x1264))
(assert (x85 x623))
(assert (x85 x1183))
(assert (= (x467 994519296000000) (x228 994519296000000)))
(assert (x85 x201))
(assert (x85 x720))
(assert (= (or x208 x1119) x179))
(assert (= x74 (and x710 (not x486))))
(assert (=> (<= x437 10000) (= (x228 x437) (x467 x437))))
(assert (= (and x1229 x1244) x1307))
(assert (x85 x927))
(assert (x157 x401))
(assert (x85 x103))
(assert (x157 x634))
(assert (= (x1058 x674 1) (mod (* x674 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x85 x578))
(assert (x85 x872))
(assert (x85 x712))
(assert (= 1764920812 (x90 (x228 1764920812))))
(assert (= 1000000000000000000 (x90 (x228 1000000000000000000))))
(assert (x85 x1027))
(assert (= (and x886 x536) x478))
(assert (= x406 (and (not x1176) x385)))
(assert (= (+ 1 (x90 x118)) (x90 (x502 x118 1))))
(assert (= (x228 38597363079105398474523661669562635951089994888546854679819194669304376546645) (x467 38597363079105398474523661669562635951089994888546854679819194669304376546645)))
(assert (x85 x392))
(assert (= (and x1191 x1195) x589))
(assert (= (and x563 x593) x988))
(assert (x85 x115))
(assert (x157 x376))
(assert (= (x228 2054196882) (x467 2054196882)))
(assert (x85 x281))
(assert (= (and (not x353) x1348) x1296))
(assert (= (or x60 x1100) x1019))
(assert (= x500 (and (not x249) x1243)))
(assert (x85 x200))
(assert (x85 x415))
(assert (x1298 x799))
(assert (x85 x853))
(assert (x85 x520))
(assert (x85 x805))
(assert (x85 x667))
(assert (x85 x1217))
(assert (= (x90 (x228 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= (or x1020 x364 x461) x575))
(assert (x85 x869))
(assert (= x397 (=> (and (or (and x369 (= x1275 0)) (and (and (= x936 x1275) (< x425 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x641 x1072) x586) (< (* x742 x1295) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1295 (ite (< 0 x586) x387 x1056)) (= x425 x100) (= x315 (* x1295 x742)) (= (+ x417 x100) x936) (= x417 0) (= x315 x425)) (not x369))) (and (= x1099 (= 0 x121)) (= x1284 (not x679)) (= (x827 (+ 500000000000000000000000000 x770)) x65) (= x558 (= 0 x966)) (= (x827 (+ x1264 x773)) x1060) (= x843 0) (< 0 x1005) (= x770 (mod (* x322 x13) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x91) x773) (= x1059 x1181) (= (ite x740 1 0) x887) (not x558) (= x645 (* x1208 x341)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x13) x1210) (= (or x117 x587) x740) (= x322 (x917 x1264)) (= x98 (+ x374 x843)) (= x742 x374) (= x587 (= x13 0)) (< 0 x887) (= (x827 (+ 31 x1341)) x91) (not x319) (= (div x645 x1005) x742) (= (< x1210 x322) x1139) (= (= 0 x1056) x369) (= x341 (div x65 1000000000000000000000000000)) (= x319 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1341) (and (< x1341 32) (= true (<= x1341 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x742) (= (ite (not x1099) (= x570 x1071) (not x1099)) x679) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x341 x1208)) (= (not x1139) x117) (= (not x1284) x1181))) x432)))
(assert (x85 x1221))
(assert (= x247 (or x399 x724 x928)))
(assert (= 946116605 (x90 (x228 946116605))))
(assert (x85 x3))
(assert (= 71776119061217280 (x90 (x228 71776119061217280))))
(assert (x85 x16))
(assert (= (and (not x662) x212) x461))
(assert (x85 x742))
(assert (x85 x1347))
(assert (x85 x1228))
(assert (x85 x77))
(assert (x85 x199))
(assert (x85 x35))
(assert (x157 x530))
(assert (x85 x447))
(assert (x85 x452))
(assert (= (and x326 (not x47)) x823))
(assert (x893 x642))
(assert (x85 x280))
(assert (x85 x322))
(assert (x157 x497))
(assert (x85 x39))
(assert (= (and (not x139) x806) x251))
(assert (x85 x673))
(assert (x85 x895))
(assert (x85 x140))
(assert (x85 x1252))
(assert (x85 x1309))
(assert (x85 x493))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x90 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x85 x1199))
(assert (x893 x559))
(assert (x85 x1142))
(assert (= (and x613 x802) x806))
(assert (x416 x1118))
(assert (x85 x262))
(assert (x85 x237))
(assert (x85 x542))
(assert (= (x228 409856580) (x467 409856580)))
(assert (x532 x1107))
(assert (= (x762 x160 176) (div x160 95780971304118053647396689196894323976171195136475136)))
(assert (x85 x530))
(assert (=> (>= 10000 x1071) (= (x228 x1071) (x467 x1071))))
(assert (x85 x959))
(assert (x85 x1312))
(assert (= (x467 4294901760) (x228 4294901760)))
(assert (= x1337 (=> (and (= (x1282 x389) x674) (<= 0 x674) (< x674 65536) (= x869 0) (= x64 (> 128 x674)) (= (x827 (+ 64 x990)) x803) (>= 65535 x674)) (and (=> (and x64 (and (<= x960 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x84 x803) (= x605 (x827 (+ 1 (mod (x1058 x674 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1058 1 x605)) x123) (= x960 (x961 x102)) (>= x960 0) (= x1213 (x1251 x960 x123)))) x1152) (=> (not x64) x721)))))
(assert (x157 288230376151711744))
(assert (= (x90 (x502 x1302 2)) (+ (x90 x1302) 2)))
(assert (x85 x1204))
(assert (= x30 (=> (and (= x904 x1231) (= x131 0) (< x1231 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x134 x992) (= x763 (x827 (+ x1216 x433))) (= (+ x904 x131) x411) (= x423 (x827 (+ 31 x1220))) (= x1216 (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x423)) (= x422 x1129) (= x185 (or (> x1220 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x1220 32) (= (<= x1220 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1208 x932)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1129 x134)) (= x1129 (x1279 x433)) (= (div x468 x1005) x1231) (> x1005 0) (= (+ x422 x992) x932) (= x468 (* x932 x1208)) (not x671) (not x185) (= x763 x796) (= x411 x484) (= (= x800 0) x671)) x475)))
(assert (x85 x876))
(assert (x85 x791))
(assert (= (x467 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x228 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x85 x148))
(assert (x85 x113))
(assert (x85 x855))
(assert (x157 576460752303423488))
(assert (x85 x142))
(assert (x532 x423))
(assert (x532 x91))
(assert (x85 x833))
(assert (x85 x112))
(assert (x85 x1117))
(assert (x85 x568))
(assert (x85 x1082))
(assert (x952 x799))
(assert (= (and (not x87) x560) x784))
(assert (x1085 x1261))
(assert (= (and (not x1191) x935) x1195))
(assert (= (x90 (x228 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x85 x352))
(assert (x85 x1017))
(assert (= (x228 31536000) (x467 31536000)))
(assert (= x364 (or x1291 x1088)))
(assert (x85 x1052))
(assert (= x303 (and (not x1087) x348)))
(assert (not x1338))
(assert (x85 x211))
(assert (x85 x1136))
(assert (= x983 (=> (and (= x201 (x1251 1 x230)) (= (not (= 0 x201)) x33) (= x230 x798) (= x870 (x827 (+ 64 x535))) (= 0 x273)) (and (=> (and x33 (and (and (= x811 (x827 (+ 4 x870))) (= x611 (> x824 0)) (< x1135 1461501637330902918203684832716283019655932542976) (= (x498 x582) x1135) (= x582 (x502 x1302 6)) (<= x1135 1461501637330902918203684832716283019655932542975) (<= 0 x1135)) (or (and x611 (and (= x382 1) (> 4294967296 x1066))) (and (= x382 x824) (not x611))))) x986) (=> (and (not x33) (and (= x870 x796) (= 0 x484))) x475)))))
(assert (= (x90 (x228 144115188075855872)) 144115188075855872))
(assert (x85 x499))
(assert (x85 x444))
(assert (x85 x1187))
(assert (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x90 (x228 50942633119752846454219349998365661925608737367104304655302372697894809501696))))
(assert (x149 x960 x123))
(assert (= (and x295 (not x1191)) x1069))
(assert (x85 x753))
(assert (x85 x382))
(assert (= 0 (x170 x941)))
(assert (= (and (not x26) x785) x208))
(assert (and (= 10000000000000000000000000000000000000000000000000000 (x1065 10 52)) (= (x1065 10 42) 1000000000000000000000000000000000000000000) (= (x1065 10 67) 10000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000 (x1065 10 64)) (= 1000000000000000000000000000000 (x1065 10 30)) (= (x1065 10 39) 1000000000000000000000000000000000000000) (= (x1065 10 23) 100000000000000000000000) (= (x1065 10 18) 1000000000000000000) (= 100000 (x1065 10 5)) (= 1000000000000000000000000000000000 (x1065 10 33)) (= (x1065 10 45) 1000000000000000000000000000000000000000000000) (= (x1065 10 50) 100000000000000000000000000000000000000000000000000) (= (x1065 10 55) 10000000000000000000000000000000000000000000000000000000) (= (x1065 10 11) 100000000000) (= (x1065 10 75) 1000000000000000000000000000000000000000000000000000000000000000000000000000) (= (x1065 10 69) 1000000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000 (x1065 10 57)) (= (x1065 10 59) 100000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000000000 (x1065 10 73)) (= (x1065 10 31) 10000000000000000000000000000000) (= (x1065 10 76) 10000000000000000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000000000000000 (x1065 10 74)) (= (x1065 10 51) 1000000000000000000000000000000000000000000000000000) (= (x1065 10 54) 1000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000 (x1065 10 27)) (= 100000000000000000000000000000 (x1065 10 29)) (= (x1065 10 62) 100000000000000000000000000000000000000000000000000000000000000) (= (x1065 10 26) 100000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000000000000000000 (x1065 10 77)) (= (x1065 10 19) 10000000000000000000) (= 1000 (x1065 10 3)) (= (x1065 10 2) 100) (= (x1065 10 17) 100000000000000000) (= (x1065 10 6) 1000000) (= 10000000000000000000000000000000000000000000 (x1065 10 43)) (= 10000000000000 (x1065 10 13)) (= 10000000000000000000000 (x1065 10 22)) (= 1000000000000000000000000000000000000000000000000000000000000 (x1065 10 60)) (= (x1065 10 1) 10) (= (x1065 10 14) 100000000000000) (= (x1065 10 35) 100000000000000000000000000000000000) (= (x1065 10 10) 10000000000) (= (x1065 10 65) 100000000000000000000000000000000000000000000000000000000000000000) (= (x1065 10 38) 100000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000 (x1065 10 53)) (= (x1065 10 71) 100000000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000 (x1065 10 34)) (= 1000000000000000000000000000000000000000000000000000000000000000 (x1065 10 63)) (= 1000000000 (x1065 10 9)) (= 100000000000000000000000000000000000000000000 (x1065 10 44)) (= 1000000000000 (x1065 10 12)) (= (x1065 10 48) 1000000000000000000000000000000000000000000000000) (= (x1065 10 7) 10000000) (= 1000000000000000000000000000000000000000000000000000000000000000000 (x1065 10 66)) (= (x1065 10 49) 10000000000000000000000000000000000000000000000000) (= (x1065 10 32) 100000000000000000000000000000000) (= (x1065 10 70) 10000000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000 (x1065 10 46)) (= 1000000000000000000000 (x1065 10 21)) (= 1000000000000000000000000000000000000 (x1065 10 36)) (= 1000000000000000000000000000000000000000000000000000000000000000000000000 (x1065 10 72)) (= (x1065 10 47) 100000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000 (x1065 10 58)) (= 100000000000000000000000000000000000000000000000000000000000000000000 (x1065 10 68)) (= 10000 (x1065 10 4)) (= 1000000000000000000000000 (x1065 10 24)) (= (x1065 10 56) 100000000000000000000000000000000000000000000000000000000) (= (x1065 10 16) 10000000000000000) (= 10000000000000000000000000000000000000000 (x1065 10 40)) (= (x1065 10 15) 1000000000000000) (= 100000000000000000000000000000000000000000 (x1065 10 41)) (= 1 (x1065 10 0)) (= 10000000000000000000000000 (x1065 10 25)) (= 10000000000000000000000000000000000000000000000000000000000000 (x1065 10 61)) (= 100000000000000000000 (x1065 10 20)) (= (x1065 10 28) 10000000000000000000000000000) (= (x1065 10 8) 100000000) (= 10000000000000000000000000000000000000 (x1065 10 37))))
(assert (x157 x642))
(assert (= (or x948 x681) x1100))
(assert (x85 x69))
(assert (= x1329 (and x619 x851)))
(assert (= (x90 (x502 x931 1)) (+ (x90 x931) 1)))
(assert (x85 x52))
(assert (= x271 (x90 (x467 x271))))
(assert (x85 x1193))
(assert (x85 x1265))
(assert (= x1024 (=> (and (and (= (x94 x477) x636) (= (x502 x1302 5) x477) (= (> x1148 0) x1180) (= x48 (x827 (+ 4 x433))) (>= 1461501637330902918203684832716283019655932542975 x636) (> 1461501637330902918203684832716283019655932542976 x636) (<= 0 x636)) (or (and (not x1180) (= x1148 x800)) (and (and (> 4294967296 x1220) (= 1 x800)) x1180))) x30)))
(assert (x85 x1267))
(assert (x85 x1211))
(assert (x157 x423))
(assert (x157 x1118))
(assert (x85 x253))
(assert (x85 x1016))
(assert (x85 x686))
(assert (= (x228 18446744073709551615) (x467 18446744073709551615)))
(assert (x85 x488))
(assert (= (or x285 x406) x1244))
(assert (x85 x121))
(assert (= (or x1259 x95) x1034))
(assert (x85 x133))
(assert (x85 x84))
(assert (= x977 (x90 (x467 x977))))
(assert (x85 x1074))
(assert (x85 x820))
(assert (x85 x527))
(assert (x85 x119))
(assert (= (x467 1099511627775) (x228 1099511627775)))
(assert (x85 x656))
(assert (x532 x37))
(assert (x85 x1158))
(assert (x85 x76))
(assert (x85 x425))
(assert (= (=> (and (= (x1089 x590) x1018) (= (x827 (+ x220 x590)) x435) (= x143 (= 0 x1221)) (not x307) (= (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x115) x220) (not x143) (= x115 (x827 (+ 31 x1017))) (= x1018 x31) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1017)) (< x1017 32)) (> x1017 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x307) (= x557 x435)) x640) x146))
(assert (= x479 (=> (and (= x22 (x737 x659)) (= x159 1) (= x668 32)) x383)))
(assert (x85 x271))
(assert (x85 x31))
(assert (= (x467 54940573406046109056602222415596668683460243721328594580962599660119180443648) (x228 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x85 x723))
(assert (x85 x341))
(assert (x85 x1114))
(assert (x85 x6))
(assert (= x1291 (and x1161 x708)))
(assert (= (and x735 x1310) x276))
(assert (= (x467 1461501637330902918203684832716283019655932542976) (x228 1461501637330902918203684832716283019655932542976)))
(assert (x85 x220))
(assert (x157 x115))
(assert (x85 x49))
(assert (x85 x907))
(assert (x85 x588))
(assert (= (x90 (x467 x442)) x442))
(assert (x85 x1107))
(assert (x85 x766))
(assert (x85 x824))
(assert (= (+ 1 (x90 x57)) (x90 (x502 x57 1))))
(assert (x157 x799))
(assert (= (and x96 x628) x1167))
(assert (x85 x1294))
(assert (x85 x1220))
(assert (= 340282366920938463463374607431768211456 (x90 (x228 340282366920938463463374607431768211456))))
(assert (= (div x1077 18446744073709551616) (x762 x1077 64)))
(assert (x85 x569))
(assert (= (x228 281470681743360) (x467 281470681743360)))
(assert (x85 x361))
(assert (x85 x1077))
(assert (= (+ (x90 x1302) 6) (x90 (x502 x1302 6))))
(assert (= (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x467 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x85 x841))
(assert (x85 x918))
(assert (x149 x701 x469))
(assert (x85 x683))
(assert (= (or x248 x303 x906) x56))
(assert (= (x90 (x228 13403848742886913342097769455703835141295138244810201074363856310843329216512)) 13403848742886913342097769455703835141295138244810201074363856310843329216512))
(assert (x85 x1075))
(assert (x85 x261))
(assert (= (+ (x90 x1067) 1) (x90 (x502 x1067 1))))
(assert (x85 x929))
(assert (x85 x242))
(assert (x85 x1044))
(assert (= (x762 x1108 32) (div x1108 4294967296)))
(assert (x85 x173))
(assert (x85 x755))
(assert (= x1236 (and x326 x47)))
(assert (x85 x1317))
(assert (= x274 (or x823 x1236)))
(assert (x157 x1096))
(assert (x85 x1121))
(assert (x893 x1096))
(assert (x85 x781))
(assert (x85 x727))
(assert (= x1324 (and (not x965) x247)))
(assert (x85 x559))
(assert (x157 281470681743360))
(assert (x85 x1261))
(assert (x157 x984))
(assert (= 2054196882 (x90 (x228 2054196882))))
(assert (x85 x484))
(assert (x85 x464))
(assert (x1085 x1246))
(assert (x85 x289))
(assert (x85 x147))
(assert (x85 x1271))
(assert (x85 x655))
(assert (x85 x794))
(assert (x85 x911))
(assert (x85 x680))
(assert (= (x90 (x228 81122015567734080146792821972179436176149904945806215094928935927862165241856)) 81122015567734080146792821972179436176149904945806215094928935927862165241856))
(assert (= 11049711537980759571054125042374268220760016173988553948347240322396617441280 (x90 (x228 11049711537980759571054125042374268220760016173988553948347240322396617441280))))
(assert (=> (>= 10000 x1261) (= (x467 x1261) (x228 x1261))))
(assert (x85 x1174))
(assert (x893 x530))
(assert (= x1071 (x90 (x467 x1071))))
(assert (= (=> (and (= x668 x352) (= x159 0)) x383) x721))
(assert (x85 x1108))
(assert (x85 x1248))
(assert (x85 x70))
(assert (x1202 x634))
(assert (x85 x635))
(assert (x85 x540))
(assert (=> (<= x442 10000) (= (x228 x442) (x467 x442))))
(assert (x85 x610))
(assert (x85 x327))
(assert (= (x90 (x228 4294967296)) 4294967296))
(assert (= (x90 (x228 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x85 x1018))
(assert (x85 x944))
(assert (= (=> (and (and (= x483 0) (>= x993 0) x899 (<= x651 255) (not (= x154 x1224)) (= x969 false) (not (= x154 x1261)) (>= 18446744073709551615 x643) (not (= x547 x561)) (not (= x836 x154)) (not (= x610 x1224)) x207 (< 0 x836) (not (= x561 x442)) (<= x672 255) (not (= x836 x610)) (>= x421 0) (not (= x610 x561)) (not (= x1224 x547)) (= (x1263 (x467 x202)) x1321) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1063) true) (< 99 x1063)) (>= x979 0) (>= x1204 0) (not (= x154 x202)) (not (> 1635491895 x608)) (<= x1252 1461501637330902918203684832716283019655932542975) (not (= x673 x610)) (<= 0 x426) (not (= x1261 x1224)) (not (= x1074 x673)) (not (= x271 x4)) (not (= x271 x836)) (< 0 x1074) (not (= x1074 x610)) (= x866 false) (= x61 x194) (<= x1121 255) (< 0 x32) (> x610 0) (not (= x271 x154)) (>= 1461501637330902918203684832716283019655932542975 x415) (not (= x202 x271)) x1133 (<= 0 x745) (not (= x271 x610)) (= (< 0 (x526 (x467 x836))) x1133) (not (= x673 x271)) (not (= x836 x561)) x896 (= x454 x194) (>= x891 0) (= x244 (> (x526 (x467 x610)) 0)) (= x327 3) (<= x527 1461501637330902918203684832716283019655932542975) (>= x792 0) x1048 (> x547 0) (= (> (x526 (x467 x442)) 0) x934) (not (= x154 x610)) (<= 0 x715) x738 (not (= x271 x561)) (= x648 (x1263 (x467 x1074))) (not (= 1674164320 x608)) (<= x766 1461501637330902918203684832716283019655932542975) (not (= x4 x547)) (= x896 (> (x526 (x467 x1074)) 0)) (<= 0 x651) (= (x1263 (x467 x836)) x287) (< x166 65536) (= x628 (> x261 0)) (not (= x836 x547)) (>= 255 x1057) (< 0 x442) (>= x1012 0) (= x204 (x1263 (x467 x610))) (not (= x547 x442)) (<= 0 x166) (= x916 false) (not (= x202 x1261)) (not (= x442 x1261)) (= x1252 x977) (<= 0 x672) (>= x648 0) (not (= x610 x1261)) (not (= x836 x4)) (not (= x836 x1261)) (not (= 1635491895 x608)) (not (= x4 x673)) (>= 255 x907) (not (= x1261 x547)) (<= 0 x533) (<= 0 x204) (= x32 (x526 (x467 x1261))) (not (= x610 x547)) (>= 340282366920938463463374607431768211455 x891) (not (= x1261 x1074)) (not (= x202 x836)) (<= x547 1461501637330902918203684832716283019655932542975) (= (> (x526 (x467 x271)) 0) x207) (not (= x154 x547)) (>= 65535 x166) (= x431 (x1263 (x467 x4))) (= x194 x320) (>= x35 0) (<= x414 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x442) (>= x1057 0) (< 0 x154) (>= 1461501637330902918203684832716283019655932542975 x610) (not (= x202 x4)) (not (= x673 x202)) (= x685 (< 0 (x526 (x467 x1224)))) (>= x749 0) (not (or (> x813 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 96 x813) (= true (<= x813 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) x621 (not (= x4 x1261)) (= x1253 false) (>= x805 0) (= (x1263 (x467 x673)) x533) (not (= x561 x4)) (= x1009 x1246) (= x855 x810) (>= 340282366920938463463374607431768211455 x993) (not (= x561 x1074)) (= x463 (< 0 (x526 (x467 x673)))) (not (= x1224 x561)) x244 (<= x749 255) (not (= x610 x4)) (not (= x154 x4)) (<= x271 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1012) (>= 340282366920938463463374607431768211455 x1204) (= (> (x526 (x467 x202)) 0) x738) (>= 1461501637330902918203684832716283019655932542975 x55) (not (= x202 x547)) (not (= x271 x442)) (>= x1121 0) (>= x415 0) (<= x673 1461501637330902918203684832716283019655932542975) (<= x792 1461501637330902918203684832716283019655932542975) x349 (= (x1263 (x467 x561)) x35) (not (= x610 x202)) (= x1105 x73) (not (= x1074 x202)) (<= 0 x1046) (> x1261 0) (<= 0 x907) (<= x1074 1461501637330902918203684832716283019655932542975) (= x745 (x1263 (x467 x1261))) (not (= x1261 x673)) (not (= x1224 x673)) (<= x561 1461501637330902918203684832716283019655932542975) (<= 0 x166) (<= x882 1461501637330902918203684832716283019655932542975) (= x9 x855) (not (= x442 x836)) (not (= x836 x1074)) (<= 0 x55) (not (= x202 x1224)) (<= 0 x643) (= x813 (x206 (- x1063 4))) (>= x1252 0) (<= 0 x527) (not (< x608 946116605)) (>= 65535 x166) (>= x766 0) (= (> (x526 (x467 x154)) 0) x1048) (= x444 x1246) (not (= x1224 x271)) (not (= x836 x1224)) (= x899 (> (x526 (x467 x561)) 0)) (< 0 x673) (<= 0 x414) (<= x9 1461501637330902918203684832716283019655932542975) (>= x1160 0) (= x323 1764920812) (= x1160 (x1263 (x467 x271))) (not (= x4 x1074)) (<= 0 x1194) (not (= x673 x561)) (<= x1174 1099511627775) (= x715 (x1263 (x467 x1224))) (< 0 x1224) (>= x1321 0) (not (= x271 x547)) (= x1106 x483) (= x140 x1105) (not (= x4 x1224)) (= (< 0 (x526 (x467 x547))) x621) (= x224 x135) (>= 1461501637330902918203684832716283019655932542975 x154) (not (= x1074 x442)) (<= x1246 1461501637330902918203684832716283019655932542975) (<= 0 x882) (not (= x442 x1224)) (not (= x547 x1074)) (not (= x442 x673)) (not (= x673 x547)) (<= x979 255) (= (> (x526 (x467 x4)) 0) x400) (>= 1461501637330902918203684832716283019655932542975 x805) x463 (not (= x1074 x1224)) (= x1012 x1171) (= x977 x1046) (< 0 x271) (= (x1283 (x467 x977) (x228 53) 0) x604) (not (= x271 x1261)) (>= 1461501637330902918203684832716283019655932542975 x202) (> x561 0) (>= 1461501637330902918203684832716283019655932542975 x256) (>= x256 0) (not (= x1074 x154)) (not (= x202 x442)) (not (= x154 x673)) (not (= x442 x4)) (< x608 2054196882) (= 1764920812 x608) (<= x4 1461501637330902918203684832716283019655932542975) (<= x1261 1461501637330902918203684832716283019655932542975) (not (= x271 x1074)) (not (> 4 x1063)) (>= 1461501637330902918203684832716283019655932542975 x836) x685 (not (= x561 x202)) (< 0 x4) (not (= x673 x836)) (>= x9 0) x934 (= (x1263 (x467 x442)) x426) (not (= x1261 x561)) (<= x1105 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1224) (= (x1263 (x467 x154)) x1194) (< 0 x202) (= x349 (< 0 (x526 (x467 x1261)))) (<= 0 x287) x400 (<= 0 x431) (not (= x442 x154)) (<= 0 x1174) (not (= x610 x442)) (>= 1461501637330902918203684832716283019655932542975 x1046) (not (= x154 x561)) (= (x1263 (x467 x547)) x421)) (or (and (and (= x222 1) (< x370 4294967296)) x628) (and (not x628) (= x261 x222)))) x252) x1338))
(assert (x85 x377))
(assert (x85 x661))
(assert (x85 x564))
(assert (x85 x1287))
(assert (= (div x321 374144419156711147060143317175368453031918731001856) (x762 x321 168)))
(assert (x85 x764))
(assert (= x1224 (x90 (x467 x1224))))
(assert (x85 x642))
(assert (x85 x854))
(assert (x85 x888))
(assert (x85 x647))
(assert (x85 x951))
(assert (x85 x1269))
(assert (x85 x1063))
(assert (x85 x63))
(assert (x85 x1235))
(assert (= (x90 (x467 x1261)) x1261))
(assert (x85 x1040))
(assert (= (x228 1764920812) (x467 1764920812)))
(assert (x85 x975))
(assert (x85 x160))
(assert (= (and (not x551) x1340) x714))
(assert (= x1185 (or x771 x1324)))
(assert (x85 x363))
(assert (= 288230376151711744 (x90 (x228 288230376151711744))))
(assert (x85 x188))
(assert (x85 x1081))
(assert (x85 x1002))
(assert (x85 x165))
(assert (= x836 (x90 (x467 x836))))
(assert (= x744 (or (and x523 (not x64)) (and x560 x87) (and x1055 (not x269)) (and x180 x342) (and x664 x50) (and (not x930) x46) (and x708 (not x1161)) (and x189 x1034))))
(assert (x85 x1094))
(assert (x85 x984))
(assert (x85 x1257))
(assert (x85 x14))
(assert (= (or x1078 x1125) x232))
(assert (x85 x699))
(assert (x85 x308))
(assert (x85 x763))
(assert (= (x90 (x467 x4)) x4))
(assert (x85 x1285))
(assert (x85 x32))
(assert (= x698 (and x83 x1241)))
(assert (x85 x774))
(assert (x85 x601))
(assert (x85 x987))
(assert (x1202 x230))
(assert (x85 x973))
(assert (x85 x246))
(assert (x85 x177))
(assert (x157 x847))
(assert (= (x90 (x467 x154)) x154))
(assert (x85 x947))
(assert (=> (>= 10000 x154) (= (x228 x154) (x467 x154))))
(assert (x85 x648))
(assert (x85 x226))
(assert (= x958 (=> (and (or (and (= x1215 x655) (not x1242)) (and (and (= 1 x655) (> 4294967296 x1172)) x1242)) (and (= x77 (x827 (+ 4 x246))) (= x1242 (< 0 x1215)))) x736)))
(assert (x85 x1164))
(assert (= (x90 (x502 x491 1)) (+ (x90 x491) 1)))
(assert (= (x228 1000000000000000000000000000) (x467 1000000000000000000000000000)))
(assert (x85 x279))
(assert (x532 x1147))
(assert (x532 x115))
(assert (x85 x989))
(assert (x85 x111))
(assert (= (and x212 x662) x1143))
(assert (x85 x777))
(assert (x85 x29))
(assert (x157 x469))
(assert (x85 x1238))
(assert (x1085 x977))
(assert (x85 x821))
(assert (x85 x175))
(assert (= (x762 x911 16) (div x911 65536)))
(assert (x85 x971))
(assert (x85 x1035))
(assert (x85 x384))
(assert (x85 x194))
(assert (x85 x273))
(assert (x85 x176))
(assert (x85 x603))
(assert (= x409 (and x593 (not x563))))
(assert (x85 x1255))
(assert (x85 x945))
(assert (x85 x1170))
(assert (= x1249 (and x232 x1091)))
(assert (x85 x163))
(assert (x85 x594))
(assert (x85 x192))
(assert (= (and x1 x310) x653))
(assert (= (x467 1152921504606846976) (x228 1152921504606846976)))
(assert (x85 x954))
(assert (x85 x355))
(assert (x85 x1328))
(assert (x85 x65))
(assert (x85 x73))
(assert (= x592 (or x1349 x274)))
(assert (= (x228 1208907372870555465154560) (x467 1208907372870555465154560)))
(assert (= x212 (and x935 x1191)))
(assert (x85 x898))
(assert (x85 x1327))
(assert (x85 x754))
(assert (x85 x1216))
(assert (= (=> (and (= x1031 (or (> x1066 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x1066 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x1066)))) (= (x137 x870) x1271) (not x404) (= x433 (x827 (+ x870 x775))) (= (= x382 0) x404) (= (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1147) x775) (= (= 0 x1271) x249) (= (x827 (+ 31 x1066)) x1147) (not x1031)) (and (=> (and (and (> 1099511627776 x699) (<= x699 1099511627775) (= (= x699 x135) x124) (<= 0 x699) (= (x1301 x880) x699) (= (x502 x1302 3) x880)) (not x249)) (and (=> (and (and (< x76 340282366920938463463374607431768211456) (= x1232 x76) (<= x76 340282366920938463463374607431768211455) (= (x502 x1302 2) x786) (= x76 (x257 x786)) (>= x76 0)) x124) x299) (=> (and (and (and (> 340282366920938463463374607431768211456 x328) (= (x257 x340) x328) (= x1306 (x862 x340)) (= (> x699 x224) x512) (<= 0 x328) (= (x206 (- x135 x699)) x853) (>= 340282366920938463463374607431768211455 x328) (<= 0 x1306) (= (x502 x1302 2) x340) (> 340282366920938463463374607431768211456 x1306) (= (= x853 0) x47) (not x512) (>= 340282366920938463463374607431768211455 x1306)) (or (and (not x47) (and (= x801 x195) (= x840 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1306)) (= (+ x688 x420) x110) (= x1313 (div x138 1000000000000000000000000000)) (= x14 (mod (* x1306 x1306) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> x300 0) (= x163 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x853)) (= (* x272 x446) x313) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1306) x761) (< (* x119 x338) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x119 (div x1313 994519296000000)) (= (ite (not x658) 1 0) x1036) (= x19 (mod (* x1306 x119) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x828 (not x235)) (= (= 0 x853) x658) (= 1000000000000000000000000000 x1053) (= x371 (* x277 x853)) (= x748 x272) (= (* x853 x1306) x550) (< 0 x464) (= (ite x544 1 0) x464) (= x1145 (= x1306 0)) (= x1045 (div x550 31536000)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x110 x801)) (= x128 (+ x1336 x195)) (= (div x313 6) x801) (= 0 x1159) (= x376 (ite (> x277 x163) 1 0)) (= (not x25) x358) (= (or x828 x1339) x544) (= x235 (> x1306 x761)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1002 x989)) (= x919 x1045) (= x688 x548) (= x1200 (div x816 1000000000000000000000000000)) (= x1339 (= 0 x1306)) (< (+ 1000000000000000000000000000 x1045) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x300 (ite x552 1 0)) (= x338 x371) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x272 x446)) (= x110 x1336) (= (* x119 x338) x490) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x853 x1306)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x277 x853)) (= x552 (or x1145 x358)) (= (x827 (+ x14 500000000000000000000000000)) x138) (= (div x490 2) x548) (= x1002 (ite (> x853 2) (x206 (- x853 2)) 0)) (= x446 (div x1200 31536000)) (= x778 (+ x919 x1053)) (= x128 x945) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x778 x548)) (= x748 (* x1002 x989)) (= (mod (* x853 x277) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x989) (= (< x840 x119) x25) (= (x827 (+ x19 500000000000000000000000000)) x816) (= x1159 (x1251 x1036 x376)) (= x277 (x206 (- x853 1))) (= x778 x420))) (and (= 1000000000000000000000000000 x945) x47))) (not x124)) x1315))) (=> (and (= x134 x1271) x249) x1024))) x986))
(assert (= x432 (=> (and (= (ite (< 0 x1126) x787 x427) x452) (= (+ x418 x215) x730) (< (* x452 x742) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x641 x1072) x1126) (= x1275 x71) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x380) (= x184 (* x452 x742)) (= x618 x730) (= x418 x380) (= 0 x215) (= x1060 x535) (= x184 x380) (= x98 x808)) x983)))
(assert (x85 x863))
(assert (x85 x1200))
(assert (x85 x230))
(assert (x85 x1060))
(assert (x85 x840))
(assert (x85 x156))
(assert (x85 x873))
(assert (= (=> (and (= x342 (> 1000000000000000000 x481)) (= (x827 (+ 64 x844)) x264)) (and (=> (and (= (= 0 x675) x692) (not x342)) (and (=> (and (not x692) (and (= (x827 (+ x264 64)) x329) (= (x1251 65535 x497) x1285) (= (= 0 x1285) x1161))) (and (=> (not x1161) x721) (=> (and (= x304 x329) x1161) x757))) (=> (and x692 (and (= x304 x345) (= x345 (x827 (+ x264 64))))) x757))) (=> x342 x721))) x878))
(assert (x85 x58))
(assert (= x354 (and x1243 x249)))
(assert (x85 x605))
(assert (= (x228 72057594037927936) (x467 72057594037927936)))
(assert (x85 x1056))
(assert (x85 x1148))
(assert (x157 6582018229189043197315758676582005330734049138558148258257960960))
(assert (= x1315 (=> (and (= x168 (or x386 x1334)) (= x386 (not x881)) (= x226 (mod (* x328 x945) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x113 (div x363 1000000000000000000000000000)) (= x109 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x328)) (= x1232 x113) (= x363 (x827 (+ 500000000000000000000000000 x226))) (= (ite x168 1 0) x237) (< 0 x237) (= x1334 (= x328 0)) (= (< x109 x945) x881)) x299)))
(assert (x85 x9))
(assert (x85 x792))
(assert (x85 x130))
(assert (= x1088 (and x692 x956)))
(assert (x85 x870))
(assert (x85 x955))
(assert (= (and (=> (and x26 (and (or (and (not x563) (and (< x873 340282366920938463463374607431768211456) (= x1305 (= x873 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x873) x506) (>= x173 0) (= (+ x1102 x265) x476) (= x13 x1258) (= x407 (x206 (- x135 x245))) (= x1149 (x827 (+ 500000000000000000000000000 x1150))) (not x883) (< (+ x229 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1258 (div x1149 1000000000000000000000000000)) (< (* x407 x173) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1102 x229) (= (or x1305 x150) x1004) (= x873 (x981 x191)) (= (ite x1004 1 0) x92) (<= x873 340282366920938463463374607431768211455) (= x265 1000000000000000000000000000) (> 340282366920938463463374607431768211456 x173) (= (* x173 x407) x258) (= (> x245 x224) x883) (= x173 (x921 x191)) (< 0 x92) (= x150 (not x915)) (= (< x506 x476) x915) (<= x173 340282366920938463463374607431768211455) (= (mod (* x476 x873) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1150) (= x229 (div x258 31536000)) (= (x502 x1302 1) x191) (>= x873 0))) (and (and (= x13 x955) (= (x981 x1290) x955) (>= 340282366920938463463374607431768211455 x955) (= (x502 x1302 1) x1290) (>= x955 0) (> 340282366920938463463374607431768211456 x955)) x563)) (and (= x245 (x1301 x1049)) (>= x245 0) (>= 1099511627775 x245) (= x563 (= x245 x135)) (> 1099511627776 x245) (= (x502 x1302 3) x1049)))) x1095) (=> (and (not x26) (and (= 0 x71) (= x1264 x535) (= 0 x618) (= 0 x808))) x983)) x752))
(assert (= (x90 (x228 1674164320)) 1674164320))
(assert (= (and x956 (not x692)) x708))
(assert (= (x90 (x467 x974)) x974))
(assert (x1085 x154))
(assert (x85 x51))
(assert (x85 x334))
(assert (x85 x387))
(assert (x85 x622))
(assert (x85 x469))
(assert (x157 71776119061217280))
(assert (x85 x1066))
(assert (= (or x589 x1143) x1310))
(assert (= (x228 340282366920938463463374607431768211455) (x467 340282366920938463463374607431768211455)))
(assert (= (x90 (x228 115792089237316195423570985008687907853269984665640564039457584007913129634935)) 115792089237316195423570985008687907853269984665640564039457584007913129634935))
(assert (x85 x323))
(assert (= (x467 80397878463760440755375692149700041695399247739548614023716483005714108776448) (x228 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x85 x454))
(assert (= (x467 1635491895) (x228 1635491895)))
(assert (x85 x643))
(assert (x1085 x202))
(assert (x85 x501))
(assert (x85 x217))
(assert (x85 x18))
(assert (x85 x37))
(assert (x85 x48))
(assert (x85 x991))
(assert (x85 x106))
(assert (x85 x202))
(assert (= (or x1331 x276) x180))
(assert (x85 x221))
(assert (= x939 (=> (and (= (x502 x491 1) x239) (>= x125 0) (= x1246 x165) (> 1461501637330902918203684832716283019655932542976 x564) (= (x502 x1007 1) x931) (<= 0 x1162) (= (x827 (+ 160 x1166)) x16) (>= x198 0) (> 340282366920938463463374607431768211456 x405) (= (x496 x607) x821) (<= 0 x821) (= (x68 x356) x497) (<= 0 x262) (<= 0 x497) (= x279 (x1301 x931)) (<= x405 340282366920938463463374607431768211455) (= (x864 x102) x798) (<= x69 65535) (= (x921 x1067) x52) (>= 1099511627775 x279) (< x52 340282366920938463463374607431768211456) (= x534 (x827 (+ x850 32))) (>= 340282366920938463463374607431768211455 x52) (= (x502 x639 1) x607) (= (x502 x1138 1) x1011) (= x405 (x862 x1007)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x497) (>= 1461501637330902918203684832716283019655932542975 x262) (>= 340282366920938463463374607431768211455 x198) (>= x798 0) (>= x279 0) (= (x502 x1067 1) x1007) (= x356 (x1283 (x467 x1246) (x228 52) 0)) (< x279 1099511627776) (= (x827 (+ x534 480)) x145) (= (x502 x931 1) x491) (= x262 (x225 x491)) (>= x339 0) (< x69 65536) (>= x45 0) (= (x1140 x931) x198) (> 340282366920938463463374607431768211456 x125) (< x1016 340282366920938463463374607431768211456) (>= 340282366920938463463374607431768211455 x125) (> 1461501637330902918203684832716283019655932542976 x754) (= (x498 x1138) x754) (>= 1461501637330902918203684832716283019655932542975 x1162) (<= 0 x405) (= x1166 (x827 (+ x145 32))) (<= x1016 340282366920938463463374607431768211455) (> 340282366920938463463374607431768211456 x198) (= x735 (= x798 0)) (>= x1016 0) (= (x502 x356 1) x1067) (= x210 x1246) (= x69 (x305 x931)) (< x45 340282366920938463463374607431768211456) (= x564 (x94 x239)) (>= x69 0) (= x45 (x259 x639)) (= x1138 (x502 x239 1)) (<= x754 1461501637330902918203684832716283019655932542975) (= x1162 (x511 x1011)) (= (x2 x639) x339) (<= x45 340282366920938463463374607431768211455) (> 340282366920938463463374607431768211456 x339) (<= 0 x754) (> 1461501637330902918203684832716283019655932542976 x262) (= (x257 x1007) x125) (< x821 340282366920938463463374607431768211456) (= (x981 x1067) x1016) (< x1162 1461501637330902918203684832716283019655932542976) (>= x52 0) (>= 340282366920938463463374607431768211455 x339) (= x639 (x502 x1011 1)) (>= 1461501637330902918203684832716283019655932542975 x564) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x798) (>= 340282366920938463463374607431768211455 x821) (<= 0 x564)) (and (=> (and x735 (and (= 0 x675) (= x40 0) (= x16 x844) (= x130 0) (= x914 0) (= x481 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x80 0))) x878) (=> (and (and (= (x827 (+ 32 x814)) x161) (= (x827 (+ x70 32)) x493) (= (= 0 x1071) x1241) (= x646 (x827 (+ x493 32))) (= (x827 (+ x16 32)) x503) (= (x827 (+ x614 32)) x863) (= (x827 (+ 32 x863)) x70) (= (x827 (+ 32 x716)) x944) (= (x827 (+ x646 32)) x822) (= (x827 (+ 32 x1187)) x1040) (= (x827 (+ 32 x833)) x614) (= x253 (x827 (+ 32 x161))) (= (x827 (+ x253 32)) x1187) (= (x827 (+ x503 32)) x716) (= (x827 (+ x16 608)) x590) (= x1054 (x827 (+ 32 x1040))) (= (x827 (+ 32 x1028)) x1072) (= x1028 (x827 (+ 32 x822))) (= x833 (x827 (+ 32 x1054))) (= x814 (x827 (+ x944 32)))) (not x735)) (and (=> (and (and (= x590 x667) (= x1201 0) (= 0 x787) (= x387 0)) x1241) x1153) (=> (and (and (= x996 (x1283 (x467 x1071) (x228 55) 0)) (<= 0 x58) (> 1461501637330902918203684832716283019655932542976 x58) (= (x1151 x996) x58) (<= x58 1461501637330902918203684832716283019655932542975) (= (= x58 0) x233)) (not x1241)) (and (=> (and (and (= x31 0) (= x557 x590)) x233) x640) (=> (and (and (or (and (= x471 x1221) (not x900)) (and (and (= x1221 1) (< x1017 4294967296)) x900)) (and (= x1239 (x827 (+ x590 4))) (= (> x471 0) x900))) (not x233)) x146)))))))))
(assert (x85 x638))
(assert (= x560 (and x1055 x269)))
(assert (x85 x570))
(assert (x85 x145))
(assert (x85 x977))
(assert (x85 x743))
(assert (= (x90 (x502 x702 2)) (+ 2 (x90 x702))))
(assert (x85 x668))
(assert (x85 x231))
(assert (= (or (and x666 x441) (and x1191 x1069)) x523))
(assert (x85 x733))
(assert (x85 x970))
(assert (= (+ (x90 x1007) 1) (x90 (x502 x1007 1))))
(assert (x85 x1096))
(assert (= (x90 (x228 97250886131833805217759495634388081419703557252615901133360390455399389593600)) 97250886131833805217759495634388081419703557252615901133360390455399389593600))
(assert (x85 x631))
(assert (x85 x368))
(assert (x85 x481))
(assert (= x1083 (and x458 (not x196))))
(assert (x157 1152921504606846976))
(assert (x85 x924))
(assert (x157 x1064))
(assert (= x473 (and x369 x943)))
(assert (x85 x362))
(assert (=> (<= x547 10000) (= (x467 x547) (x228 x547))))
(assert (x1298 x497))
(assert (= (x90 (x228 74874610042509929465218460033027201126834042060343647393369405262880053395456)) 74874610042509929465218460033027201126834042060343647393369405262880053395456))
(assert (x85 x1160))
(assert (x85 x347))
(assert (x85 x42))
(assert (= (x90 (x228 31536000)) 31536000))
(assert (= (x90 (x502 x1302 1)) (+ (x90 x1302) 1)))
(assert (x85 x830))
(assert (= 6582018229189043197315758676582005330734049138558148258257960960 (x90 (x228 6582018229189043197315758676582005330734049138558148258257960960))))
(assert (x85 x1313))
(assert (x85 x1246))
(assert (x85 x405))
(assert (x85 x1275))
(assert (= (x762 x520 48) (div x520 281474976710656)))
(assert (x85 x940))
(assert (x85 x858))
(assert (x85 x88))
(assert (x85 x224))
(assert (= x593 (and x785 x26)))
(assert (=> (>= 10000 x610) (= (x228 x610) (x467 x610))))
(assert (x85 x459))
(assert (x85 x250))
(assert (x85 x1014))
(assert (x85 x376))
(assert (x85 x421))
(assert (x85 x138))
(assert (x85 x21))
(assert (x157 x1147))
(assert (= x610 (x90 (x467 x610))))
(assert (= x953 (and x1318 x108)))
(assert (x157 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (<= x271 10000) (= (x467 x271) (x228 x271))))
(assert (x532 x39))
(assert (x85 x832))
(assert (x157 144115188075855872))
(assert (x85 x92))
(assert (x85 x86))
(assert (x157 x37))
(assert (x85 x442))
(assert (= (x90 (x228 80397878463760440755375692149700041695399247739548614023716483005714108776448)) 80397878463760440755375692149700041695399247739548614023716483005714108776448))
(assert (x85 x1239))
(assert (x85 x1306))
(assert (x85 x19))
(assert (= (x90 (x502 x356 1)) (+ 1 (x90 x356))))
(assert (x85 x414))
(assert (= (and (not x1038) x714) x38))
(assert (x85 x78))
(assert (= (or x1039 x485) x785))
(assert (= x538 (and (not x802) x613)))
(assert (x85 x660))
(assert (x85 x448))
(assert (x85 x1109))
(assert (x85 x1231))
(assert (= (and (not x342) x180) x956))
(assert (x85 x728))
(assert (x85 x879))
(assert (= x851 (or x988 x409)))
(assert (= x1152 (=> (and (or (and x965 (and x521 x1333 (< x947 4294967296) (= x351 (x1263 (x467 x974))) (= (>= (x797 (x467 x610)) x391) x521) (= x391 (x1263 (x467 x610))) (= (= (x797 (x467 x974)) x351) x1333))) (not x965)) (and (= (= 0 x255) x182) (not x182) (= (x827 (+ x499 32)) x227) (= x255 (x526 (x467 x974))) (= (x827 (+ x622 32)) x577) (= (< 0 x875) x965) (= x622 (x827 (+ 32 x227))) (= (x827 (+ 4 x84)) x499))) x439)))
(assert (x85 x565))
(assert (x157 x559))
(assert (x85 x1342))
(assert (x85 x694))
(assert (x85 x1186))
(assert (x85 x40))
(assert (x157 x1036))
(assert (= (x90 (x467 x1074)) x1074))
(assert (x1085 x1071))
(assert (x85 x847))
(assert (x85 x974))
(assert (x85 x300))
(assert (= (and x1180 x555) x1262))
(assert (= (x467 11049711537980759571054125042374268220760016173988553948347240322396617441280) (x228 11049711537980759571054125042374268220760016173988553948347240322396617441280)))
(assert (= (x90 (x502 x1302 3)) (+ 3 (x90 x1302))))
(assert (= (x467 95406826884961342500336545879718955523139276405473280) (x228 95406826884961342500336545879718955523139276405473280)))
(assert (x85 x329))
(assert (x85 x324))
(assert (x85 x216))
(assert (x85 x67))
(assert (= x282 (and x1 (not x310))))
(assert (= (=> (and (or (and (not x196) (and (= (div x1122 x362) x177) (< 0 x362) (= x447 x177))) (and x196 (= 0 x447))) (= (= 0 x362) x196)) x696) x278))
(assert (x85 x427))
(assert (= x470 (and x710 x486)))
(assert (= x441 (and x1191 x295)))
(assert (= (and (not x611) x314) x857))
(assert (x85 x801))
(assert (x893 x1025))
(assert (x1132 x984))
(assert (x85 x731))
(assert (x85 x428))
(assert (= (and x517 x784) x1319))
(assert (x85 x1110))
(assert (x85 x990))
(assert (= (or x1296 x1050) x348))
(assert (x85 x443))
(assert (x85 x229))
(assert (x85 x586))
(assert (x85 x960))
(assert (= (not (and (not (= x159 0)) (= x670 x1136) (not (or (and (= true (<= x668 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x668)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x668))) (= x670 (x705 x355)))) x383))
(assert (=> (<= x202 10000) (= (x467 x202) (x228 x202))))
(assert (x85 x822))
(assert (= (x228 81122015567734080146792821972179436176149904945806215094928935927862165241856) (x467 81122015567734080146792821972179436176149904945806215094928935927862165241856)))
(assert (= (=> (and (= x1075 (x827 (+ x231 192))) (= (= 0 x1029) x59)) (and (=> x59 x311) (=> (and (and (or (and (and (= x741 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x697)) (= x243 (= x697 0)) (= x1123 (or x243 x950)) (= (ite (> x841 2) (x206 (- x841 2)) 0) x24) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x829 x63)) (< (+ x686 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x838 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x697)) (= (div x97 31536000) x686) (= (mod (* x841 x424) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x602) (= x97 (* x841 x697)) (= (+ x1286 x440) x1127) (= (not x892) x620) (= x701 (ite (not x162) 1 0)) (= x67 (div x1120 2)) (= x972 x1127) (= x440 x686) (= (x206 (- x841 1)) x424) (< (+ x1127 x67) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x972 x372) x793) (= x63 x625) (= x892 (> x697 x838)) (= (mod (* x697 x697) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x635) (= x546 (* x602 x24)) (= (div x565 994519296000000) x829) (= x1120 (* x63 x829)) (= x487 (= x697 0)) (= x623 (div x791 1000000000000000000000000000)) (< (* x841 x697) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (< 0 x1326) (= x1326 (ite x1123 1 0)) (= x912 x793) (> x488 0) (< (* x602 x24) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (or x487 x620) x99) (= x1286 1000000000000000000000000000) (= x625 (* x841 x424)) (= (= x841 0) x162) (= (x827 (+ 500000000000000000000000000 x192)) x791) (= x281 0) (= (div x1303 6) x578) (= x1061 x318) (< (* x777 x908) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x424 x841)) (= x372 x67) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x578 x793)) (= x578 x591) (= x281 (x1251 x701 x469)) (= x1265 (x827 (+ x635 500000000000000000000000000))) (= (div x623 31536000) x908) (= x410 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x841)) (= (> x829 x741) x1278) (= (ite x99 1 0) x488) (= x1303 (* x908 x777)) (= (+ x591 x912) x318) (= x777 x546) (= x950 (not x1278)) (= (mod (* x697 x829) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x192) (= x469 (ite (< x410 x424) 1 0)) (= (div x1265 1000000000000000000000000000) x565)) (not x353)) (and (= 1000000000000000000000000000 x1061) x353)) (and (= x657 (ite x567 1 0)) (= (or x963 x835) x826) (= (= x841 0) x353) (< 0 x1082) (= x963 (not x460)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1186) x764) (= x841 (x206 (- x188 x3))) (= (or x837 x998) x567) (= (div x199 1000000000000000000000000000) x1199) (= x12 (mod (* x669 x193) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x260 (< x764 x193)) (= (not x260) x837) (= x728 (mod (* x193 x1186) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= 0 x1186) x998) (= (= 0 x669) x835) (= x270 (div x1137 1000000000000000000000000000)) (not x946) (= (< x188 x3) x946) (= x199 (x827 (+ 500000000000000000000000000 x728))) (= x1137 (x827 (+ x12 500000000000000000000000000))) (= x460 (< x359 x193)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x669) x359) (= (ite x826 1 0) x1082) (> x657 0))) (not x59)) x1051))) x644))
(assert (x85 x17))
(assert (= 4294901760 (x90 (x228 4294901760))))
(assert (x85 x1196))
(assert (x85 x618))
(assert (= x673 (x90 (x467 x673))))
(assert (x85 x941))
(assert (= (or x575 x744) x457))
(assert (x85 x82))
(assert (= (and x465 x388) x585))
(assert (= (=> (and (<= x985 1099511627775) (= x1006 (or (> x774 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x774 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 128 x774)))) (= x3 (x1116 x941)) (not x1006) (= (= x367 x985) x886) (= (x827 (+ x845 x1347)) x231) (= (x1116 x1052) x1014) (= x991 (x827 (+ 32 x1052))) (= x221 (x1116 x845)) (= (x827 (+ 31 x774)) x401) (= x985 (x967 x389)) (>= x985 0) (not x152) (< x985 1099511627776) (= (x1116 x991) x697) (= x367 (x1251 1099511627775 x135)) (= x1347 (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x401)) (= x941 (x827 (+ 32 x991))) (= x1052 (x827 (+ x845 32))) (>= 1099511627775 x3) (= x152 (= x876 0))) (and (=> (and (and (= (= 0 x1226) x1176) (or (and x1176 (= x815 x703)) (and (and (= x459 (x827 (+ x1027 500000000000000000000000000))) (= x289 x541) (< (* x133 x1226) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x216 (+ x541 x1101)) (= x1032 (x1251 340282366920938463463374607431768211455 x147)) (< (+ 1000000000000000000000000000 x289) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x206 (- x135 x188)) x133) (> x760 0) (= (> x147 340282366920938463463374607431768211455) x1097) (= (< x1115 x216) x596) (= x147 x815) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x703) x1115) (= (ite x381 1 0) x760) (= (or x54 x627) x381) (not x1097) (= x147 (div x459 1000000000000000000000000000)) (not x445) (= x1027 (mod (* x703 x216) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x445 (> x188 x224)) (= x289 (div x283 31536000)) (= (= 0 x703) x54) (= (not x596) x627) (= x1101 1000000000000000000000000000) (= x283 (* x1226 x133))) (not x1176)))) (not x886)) x617) (=> (and x886 (and (= x703 x1164) (= x959 x669) (= x246 x231))) x958))) x765))
(assert (= (x90 (x467 x561)) x561))
(assert (x394 x799))
(assert (x85 x1032))
(assert (x85 x1118))
(assert (= (x228 1000000000000000000) (x467 1000000000000000000)))
(assert (x85 x1098))
(assert (x85 x734))
(assert (x116 x1118))
(assert (= x689 (and x451 x747)))
(assert (= (and (not x1277) x574) x1078))
(assert (x85 x908))
(assert (x85 x760))
(assert (x85 x547))
(assert (= 340282366920938463463374607431768211455 (x90 (x228 340282366920938463463374607431768211455))))
(assert (x85 x1061))
(assert (= x218 (and (not x451) x747)))
(assert (x85 x109))
(assert (= (=> (and (not x1090) (= (= x875 0) x1090)) (and (=> (not x1191) (and (=> (and x1191 (= x84 x850)) x939) (=> (and (not x1191) (= x659 x84)) x479))) (=> (and (and (= x734 (x827 (+ x84 32))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1287) (= x662 (not (= 0 x848))) (>= x1287 0) (= (x864 x102) x1287) (= x848 (x1251 38597363079105398474523661669562635951089994888546854679819194669304376546645 x1287))) x1191) (and (=> (and x662 (= x734 x850)) x939) (=> (and (not x662) (= x659 x734)) x479))))) x1234))
(assert (x85 x793))
(assert (x85 x745))
(assert (x157 x135))
(assert (= (x228 500000000000000000000000000) (x467 500000000000000000000000000)))
(assert (x85 x1037))
(assert (x85 x537))
(assert (x157 x325))
(assert (x157 x91))
(assert (= 409856580 (x90 (x228 409856580))))
(assert (x85 x13))
(assert (x85 x401))
(assert (x85 x123))
(assert (= (+ 1 (x90 x682)) (x90 (x502 x682 1))))
(assert (= (and x353 x1348) x1050))
(assert (x85 x1232))
(assert (x85 x1178))
(assert (= (and (not x233) x999) x357))
(assert (= (or x592 x354) x555))
(assert (x85 x1072))
(assert (x85 x89))
(assert (x157 x1025))
(assert (= x46 (or x346 x949)))
(assert (x690 x1118))
(assert (x85 x556))
(assert (= (x170 x1052) 0))
(assert (x85 x706))
(assert (x85 x703))
(assert (x85 x277))
(assert (x85 x749))
(assert (x85 x480))
(assert (x85 x923))
(assert (x85 x210))
(assert (x85 x773))
(assert (= (x228 144115188075855872) (x467 144115188075855872)))
(assert (x85 x24))
(assert (= (=> (and (= x151 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1232)) (< 0 x1094) (= x175 (x827 (+ x537 500000000000000000000000000))) (= (< x151 x1271) x782) (= x1211 x134) (= (= 0 x1232) x1177) (= x537 (mod (* x1232 x1271) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1211 (div x175 1000000000000000000000000000)) (= (not x782) x36) (= x1094 (ite x922 1 0)) (= (or x1177 x36) x922)) x1024) x299))
(assert (x85 x803))
(assert (x85 x1159))
(assert (= (x90 (x502 x398 1)) (+ (x90 x398) 1)))
(assert (and (= (x1065 2 36) 68719476736) (= (x1065 2 105) 40564819207303340847894502572032) (= 42535295865117307932921825928971026432 (x1065 2 125)) (= (x1065 2 106) 81129638414606681695789005144064) (= 6582018229284824168619876730229402019930943462534319453394436096 (x1065 2 212)) (= (x1065 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 4611686018427387904 (x1065 2 62)) (= (x1065 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x1065 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x1065 2 102) 5070602400912917605986812821504) (= 45671926166590716193865151022383844364247891968 (x1065 2 155)) (= (x1065 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 19807040628566084398385987584 (x1065 2 94)) (= (x1065 2 154) 22835963083295358096932575511191922182123945984) (= (x1065 2 176) 95780971304118053647396689196894323976171195136475136) (= 9444732965739290427392 (x1065 2 73)) (= 79228162514264337593543950336 (x1065 2 96)) (= 6277101735386680763835789423207666416102355444464034512896 (x1065 2 192)) (= 5986310706507378352962293074805895248510699696029696 (x1065 2 172)) (= (x1065 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 604462909807314587353088 (x1065 2 79)) (= (x1065 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x1065 2 32) 4294967296) (= (x1065 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x1065 2 124) 21267647932558653966460912964485513216) (= (x1065 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 1461501637330902918203684832716283019655932542976 (x1065 2 160)) (= 154742504910672534362390528 (x1065 2 87)) (= (x1065 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 3213876088517980551083924184682325205044405987565585670602752 (x1065 2 201)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x1065 2 241)) (= 2251799813685248 (x1065 2 51)) (= 64 (x1065 2 6)) (= (x1065 2 153) 11417981541647679048466287755595961091061972992) (= 2048 (x1065 2 11)) (= 67108864 (x1065 2 26)) (= 196159429230833773869868419475239575503198607639501078528 (x1065 2 187)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x1065 2 223)) (= (x1065 2 116) 83076749736557242056487941267521536) (= (x1065 2 45) 35184372088832) (= (x1065 2 173) 11972621413014756705924586149611790497021399392059392) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x1065 2 235)) (= (x1065 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 374144419156711147060143317175368453031918731001856 (x1065 2 168)) (= (x1065 2 69) 590295810358705651712) (= 43556142965880123323311949751266331066368 (x1065 2 135)) (= 23945242826029513411849172299223580994042798784118784 (x1065 2 174)) (= (x1065 2 149) 713623846352979940529142984724747568191373312) (= 803469022129495137770981046170581301261101496891396417650688 (x1065 2 199)) (= 340282366920938463463374607431768211456 (x1065 2 128)) (= 98079714615416886934934209737619787751599303819750539264 (x1065 2 186)) (= 1298074214633706907132624082305024 (x1065 2 110)) (= (x1065 2 58) 288230376151711744) (= (x1065 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x1065 2 136) 87112285931760246646623899502532662132736) (= 17592186044416 (x1065 2 44)) (= (x1065 2 99) 633825300114114700748351602688) (= (x1065 2 130) 1361129467683753853853498429727072845824) (= 8192 (x1065 2 13)) (= 205688069665150755269371147819668813122841983204197482918576128 (x1065 2 207)) (= (x1065 2 15) 32768) (= 44601490397061246283071436545296723011960832 (x1065 2 145)) (= (x1065 2 56) 72057594037927936) (= (x1065 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x1065 2 137) 174224571863520493293247799005065324265472) (= (x1065 2 21) 2097152) (= 842498333348457493583344221469363458551160763204392890034487820288 (x1065 2 219)) (= 295147905179352825856 (x1065 2 68)) (= (x1065 2 180) 1532495540865888858358347027150309183618739122183602176) (= 20282409603651670423947251286016 (x1065 2 104)) (= (x1065 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x1065 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x1065 2 159) 730750818665451459101842416358141509827966271488) (= 200867255532373784442745261542645325315275374222849104412672 (x1065 2 197)) (= 302231454903657293676544 (x1065 2 78)) (= 10384593717069655257060992658440192 (x1065 2 113)) (= (x1065 2 123) 10633823966279326983230456482242756608) (= (x1065 2 101) 2535301200456458802993406410752) (= (x1065 2 77) 151115727451828646838272) (= (x1065 2 38) 274877906944) (= 421249166674228746791672110734681729275580381602196445017243910144 (x1065 2 218)) (= (x1065 2 95) 39614081257132168796771975168) (= (x1065 2 179) 766247770432944429179173513575154591809369561091801088) (= 73786976294838206464 (x1065 2 66)) (= 18446744073709551616 (x1065 2 64)) (= (x1065 2 98) 316912650057057350374175801344) (= 2993155353253689176481146537402947624255349848014848 (x1065 2 171)) (= 9223372036854775808 (x1065 2 63)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x1065 2 251)) (= (x1065 2 143) 11150372599265311570767859136324180752990208) (= (x1065 2 165) 46768052394588893382517914646921056628989841375232) (= 2305843009213693952 (x1065 2 61)) (= (x1065 2 74) 18889465931478580854784) (= (x1065 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 1152921504606846976 (x1065 2 60)) (= (x1065 2 114) 20769187434139310514121985316880384) (= 36893488147419103232 (x1065 2 65)) (= 9671406556917033397649408 (x1065 2 83)) (= (x1065 2 112) 5192296858534827628530496329220096) (= 47890485652059026823698344598447161988085597568237568 (x1065 2 175)) (= (x1065 2 8) 256) (= 70368744177664 (x1065 2 46)) (= 91343852333181432387730302044767688728495783936 (x1065 2 156)) (= (x1065 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x1065 2 20) 1048576) (= (x1065 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= (x1065 2 70) 1180591620717411303424) (= 4503599627370496 (x1065 2 52)) (= 696898287454081973172991196020261297061888 (x1065 2 139)) (= (x1065 2 103) 10141204801825835211973625643008) (= 365375409332725729550921208179070754913983135744 (x1065 2 158)) (= 8 (x1065 2 3)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x1065 2 231)) (= 5575186299632655785383929568162090376495104 (x1065 2 142)) (= (x1065 2 150) 1427247692705959881058285969449495136382746624) (= (x1065 2 18) 262144) (= 2147483648 (x1065 2 31)) (= 16384 (x1065 2 14)) (= 25711008708143844408671393477458601640355247900524685364822016 (x1065 2 204)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x1065 2 253)) (= 100433627766186892221372630771322662657637687111424552206336 (x1065 2 196)) (= 178405961588244985132285746181186892047843328 (x1065 2 147)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x1065 2 222)) (= 1237940039285380274899124224 (x1065 2 90)) (= 16777216 (x1065 2 24)) (= 4398046511104 (x1065 2 42)) (= 1125899906842624 (x1065 2 50)) (= 411376139330301510538742295639337626245683966408394965837152256 (x1065 2 208)) (= 134217728 (x1065 2 27)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x1065 2 246)) (= 128 (x1065 2 7)) (= 1208925819614629174706176 (x1065 2 80)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x1065 2 221)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x1065 2 227)) (= (x1065 2 178) 383123885216472214589586756787577295904684780545900544) (= 5444517870735015415413993718908291383296 (x1065 2 132)) (= (x1065 2 111) 2596148429267413814265248164610048) (= 680564733841876926926749214863536422912 (x1065 2 129)) (= 6129982163463555433433388108601236734474956488734408704 (x1065 2 182)) (= (x1065 2 141) 2787593149816327892691964784081045188247552) (= 144115188075855872 (x1065 2 57)) (= (x1065 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x1065 2 118) 332306998946228968225951765070086144) (= (x1065 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 4194304 (x1065 2 22)) (= (x1065 2 54) 18014398509481984) (= 24519928653854221733733552434404946937899825954937634816 (x1065 2 184)) (= (x1065 2 148) 356811923176489970264571492362373784095686656) (= 36028797018963968 (x1065 2 55)) (= 12259964326927110866866776217202473468949912977468817408 (x1065 2 183)) (= 664613997892457936451903530140172288 (x1065 2 119)) (= (x1065 2 108) 324518553658426726783156020576256) (= 392318858461667547739736838950479151006397215279002157056 (x1065 2 188)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x1065 2 250)) (= (x1065 2 121) 2658455991569831745807614120560689152) (= 512 (x1065 2 9)) (= (x1065 2 134) 21778071482940061661655974875633165533184) (= (x1065 2 59) 576460752303423488) (= 1073741824 (x1065 2 30)) (= (x1065 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x1065 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x1065 2 1) 2) (= (x1065 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x1065 2 75) 37778931862957161709568) (= 536870912 (x1065 2 29)) (= 89202980794122492566142873090593446023921664 (x1065 2 146)) (= 131072 (x1065 2 17)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x1065 2 243)) (= (x1065 2 138) 348449143727040986586495598010130648530944) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x1065 2 238)) (= 187072209578355573530071658587684226515959365500928 (x1065 2 167)) (= (x1065 2 93) 9903520314283042199192993792) (= (x1065 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x1065 2 43) 8796093022208) (= (x1065 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x1065 2 40) 1099511627776) (= 3291009114642412084309938365114701009965471731267159726697218048 (x1065 2 211)) (= (x1065 2 157) 182687704666362864775460604089535377456991567872) (= (x1065 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 16 (x1065 2 4)) (= (x1065 2 53) 9007199254740992) (= 75557863725914323419136 (x1065 2 76)) (= (x1065 2 25) 33554432) (= (x1065 2 85) 38685626227668133590597632) (= 19342813113834066795298816 (x1065 2 84)) (= 23384026197294446691258957323460528314494920687616 (x1065 2 164)) (= (x1065 2 33) 8589934592) (= 170141183460469231731687303715884105728 (x1065 2 127)) (= (x1065 2 35) 34359738368) (= 2923003274661805836407369665432566039311865085952 (x1065 2 161)) (= (x1065 2 88) 309485009821345068724781056) (= 1329227995784915872903807060280344576 (x1065 2 120)) (= (x1065 2 152) 5708990770823839524233143877797980545530986496) (= (x1065 2 82) 4835703278458516698824704) (= (x1065 2 163) 11692013098647223345629478661730264157247460343808) (= (x1065 2 151) 2854495385411919762116571938898990272765493248) (= 93536104789177786765035829293842113257979682750464 (x1065 2 166)) (= (x1065 2 16) 65536) (= (x1065 2 107) 162259276829213363391578010288128) (= (x1065 2 109) 649037107316853453566312041152512) (= (x1065 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x1065 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x1065 2 72) 4722366482869645213696) (= (x1065 2 37) 137438953472) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x1065 2 240)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x1065 2 217)) (= (x1065 2 86) 77371252455336267181195264) (= (x1065 2 144) 22300745198530623141535718272648361505980416) (= 1267650600228229401496703205376 (x1065 2 100)) (= (x1065 2 115) 41538374868278621028243970633760768) (= 32 (x1065 2 5)) (= 10889035741470030830827987437816582766592 (x1065 2 133)) (= (x1065 2 140) 1393796574908163946345982392040522594123776) (= (x1065 2 97) 158456325028528675187087900672) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x1065 2 247)) (= 784637716923335095479473677900958302012794430558004314112 (x1065 2 189)) (= 8388608 (x1065 2 23)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x1065 2 237)) (= (x1065 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x1065 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 2475880078570760549798248448 (x1065 2 91)) (= 401734511064747568885490523085290650630550748445698208825344 (x1065 2 198)) (= (x1065 2 12) 4096) (= 5846006549323611672814739330865132078623730171904 (x1065 2 162)) (= (x1065 2 131) 2722258935367507707706996859454145691648) (= (x1065 2 177) 191561942608236107294793378393788647952342390272950272) (= 618970019642690137449562112 (x1065 2 89)) (= 281474976710656 (x1065 2 48)) (= (x1065 2 71) 2361183241434822606848) (= 562949953421312 (x1065 2 49)) (= (x1065 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x1065 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x1065 2 92) 4951760157141521099596496896) (= 268435456 (x1065 2 28)) (= 140737488355328 (x1065 2 47)) (= 549755813888 (x1065 2 39)) (= 166153499473114484112975882535043072 (x1065 2 117)) (= (x1065 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 85070591730234615865843651857942052864 (x1065 2 126)) (= 17179869184 (x1065 2 34)) (= (x1065 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x1065 2 245)) (= (x1065 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= 147573952589676412928 (x1065 2 67)) (= 1496577676626844588240573268701473812127674924007424 (x1065 2 170)) (= 2417851639229258349412352 (x1065 2 81)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x1065 2 255)) (= (x1065 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 2199023255552 (x1065 2 41)) (= 524288 (x1065 2 19)) (= 748288838313422294120286634350736906063837462003712 (x1065 2 169)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x1065 2 249)) (= 1 (x1065 2 0)) (= (x1065 2 10) 1024) (= 5316911983139663491615228241121378304 (x1065 2 122)) (= (x1065 2 2) 4)))
(assert (x85 x1045))
(assert (x85 x1025))
(assert (= x867 (and x611 x314)))
(assert (x234 x1118))
(assert (x1085 x437))
(assert (= 1152921504606846976 (x90 (x228 1152921504606846976))))
(assert (= (x467 74874610042509929465218460033027201126834042060343647393369405262880053395456) (x228 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (= (=> (and (or x1087 (and (not x1087) (and (= (not x678) x44) (= (div x815 2) x505) (= x1128 x920) (not x684) (= x1163 (x502 x682 2)) (= x920 (x1251 340282366920938463463374607431768211455 x1096)) (= (div x815 2) x861) (= x678 (not x482)) (< x1124 340282366920938463463374607431768211456) (= (div x1269 1000000000000000000000000000) x594) (<= x756 340282366920938463463374607431768211455) (>= 340282366920938463463374607431768211455 x1124) (= (mod (* 1000000000000000000000000000 x1342) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1223) (= (x827 (+ x1223 x505)) x28) (= (x62 x1163) x1124) (= (or x44 x1293) x584) (= (+ x296 x1128) x756) (= x296 x1124) (= x684 (< 340282366920938463463374607431768211455 x1096)) (= x1110 (ite x584 1 0)) (= (> x1342 x594) x482) (= x1096 (div x28 x815)) (= 0 x1110) (= (= 0 x815) x1293) (< (+ x920 x1124) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1183 (x1251 340282366920938463463374607431768211455 x756)) (= (x206 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x861)) x1269) (<= 0 x1124)))) (and (= (ite x1198 1 0) x720) (= (> x758 x103) x1086) (= (div x324 10000) x1342) (= x187 (= 0 x1061)) (= x1157 x1199) (not x1281) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1061) x957) (= x1158 (mod (* x1061 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (< x753 x1256) x1281) (= x568 (+ x1157 x107)) (< (+ x1199 x1014) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not x11) (= x107 x1014) (< 0 x720) (= x1154 (not x1086)) (= x267 (> x221 x957)) (= x324 (x827 (+ 5000 x1080))) (= (x206 (- x568 x270)) x753) (= (ite x403 1 0) x1328) (= x11 (> x270 x568)) (= x1198 (or x1154 x1343)) (= x1256 (div x514 1000000000000000000000000000)) (= (x827 (+ 500000000000000000000000000 x1158)) x514) (= x758 (x206 (- x753 x1256))) (= x1087 (= 0 x1342)) (= (or x901 x187) x403) (= x103 (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x1029)) (< 0 x1328) (= (mod (* x758 x1029) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1080) (= x901 (not x267)) (= (= x1029 0) x1343))) x311) x1051))
(assert (x85 x844))
(assert (x85 x167))
(assert (= x181 (or x478 x56)))
(assert (x85 x446))
(assert (x85 x227))
(assert (x85 x1258))
(assert (x85 x370))
(assert (= (x90 (x502 x1302 5)) (+ (x90 x1302) 5)))
(assert (x85 x1129))
(assert (x85 x577))
(assert (= (and x357 (not x900)) x681))
(assert (x85 x758))
(assert (x85 x905))
(assert (= (or x689 x218) x120))
(assert (x85 x410))
(assert (x85 x937))
(assert (x85 x1012))
(assert (x85 x707))
(assert (x85 x1106))
(assert (= x943 (or x1329 x834)))
(assert (x85 x845))
(assert (= 18446744073709551615 (x90 (x228 18446744073709551615))))
(assert (x85 x614))
(assert (= (x90 (x502 x682 2)) (+ 2 (x90 x682))))
(assert (x85 x193))
(assert (x85 x55))
(assert (=> (<= x1246 10000) (= (x228 x1246) (x467 x1246))))
(assert (= (=> (= (< 0 x1196) x802) (and (=> (and x802 (and (= x301 (x827 (+ 64 x667))) (= x139 (not (= 0 x21))) (= x82 0) (= x798 x984) (= x21 (x1251 3 x984)))) (and (=> (and (and (= x1311 0) (= x987 0) (= x650 0) (= x694 x301) (= 0 x448)) (not x139)) x676) (=> (and x139 (and (<= 0 x437) (= x437 (x1021 x1266)) (< x437 1461501637330902918203684832716283019655932542976) (<= x437 1461501637330902918203684832716283019655932542975) (= (x1283 (x228 0) (x228 54) 0) x1266) (= (= x437 0) x551))) (and (=> (and (not x551) (and (= x321 (x1251 95406826884961342500336545879718955523139276405473280 x799)) (= (x1251 71776119061217280 x799) x520) (= (x68 x1302) x799) (= (x1065 10 x631) x1005) (= (x762 x911 16) x427) (= (not (= x1201 0)) x1038) (= x384 (x762 x1077 64)) (= x580 (x762 x1108 32)) (= (x827 (+ x301 32)) x49) (<= 0 x799) (= (x1251 281470681743360 x799) x1108) (= (x1251 4294901760 x799) x911) (= (x762 x321 168) x570) (= (x1251 1208907372870555465154560 x799) x1077) (<= x799 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x631 (x762 x520 48)) (= x1056 (x1251 65535 x799)) (= x1302 (x1283 (x467 x437) (x228 52) 0)))) (and (=> (and (= x465 (= x1071 x570)) x1038) (and (=> (not x465) x910) (=> (and x465 (and (= x933 x49) (= x1201 x1208))) x543))) (=> (not x1038) x910))) (=> (and (and (= x448 0) (= 0 x650) (= 0 x987) (= 0 x1311) (= x694 x301)) x551) x676))))) (=> (and (not x802) (and (= x1267 0) (= x1178 x667) (= 0 x1122) (= x874 0) (= 0 x362))) x278))) x1153))
(assert (x85 x775))
(assert (x85 x321))
(assert (= x1218 (and (not x108) x1318)))
(assert (x85 x659))
(assert (x1168 x1118))
(assert (x85 x814))
(assert (= (and (not x1241) x83) x999))
(assert (= (x228 97250886131833805217759495634388081419703557252615901133360390455399389593600) (x467 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (x85 x1122))
(assert (x85 x557))
(assert (x157 x230))
(assert (= x519 (and x1185 x1222)))
(assert (x85 x497))
(assert (x85 x716))
(assert (x149 x1238 x1064))
(assert (= x710 (or x953 x1218)))
(assert (x85 x1210))
(assert (x85 x514))
(assert (x85 x301))
(assert (x492 x799))
(assert (x85 x1213))
(assert (= x1318 (or x1260 x1167)))
(assert (= (=> (= x659 x304) x479) x757))
(assert (x157 x123))
(assert (x85 x1227))
(assert (= (+ (x90 x702) 1) (x90 (x502 x702 1))))
(assert (x85 x114))
(assert (x1085 x836))
(assert (= (+ (x90 x1323) 1) (x90 (x502 x1323 1))))
(assert (x157 65535))
(assert (= (x228 1674164320) (x467 1674164320)))
(assert (x85 x476))
(assert (x85 x1137))
(assert (x85 x580))
(assert (x85 x256))
(assert (= x691 (=> (and (and (= (x827 (+ x1312 32)) x729) (= (x827 (+ 32 x1190)) x1312) (= (x827 (+ x89 32)) x719) (= x854 (x827 (+ x888 4))) (= x579 (< 0 x731)) (= (x827 (+ x854 32)) x1294) (= (x827 (+ 32 x729)) x973) (= (x827 (+ x973 32)) x879) (= x89 (x827 (+ x879 32))) (= x1190 (x827 (+ 32 x1294)))) (or (and (not x579) (= x731 x1219)) (and (and (< x542 4294967296) (= x1219 1)) x579))) x583)))
(assert (x85 x799))
(assert (x85 x891))
(assert (x85 x615))
(assert (x85 x535))
(assert (x85 x7))
(assert (= (x1058 1 x605) (mod (ite (< x605 256) (x1065 2 x605) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x85 x985))
(assert (x85 x634))
(assert (= x346 (and x968 (not x579))))
(assert (x85 x1126))
(assert (x85 x719))
(assert (x85 x1223))
(assert (x85 x861))
(assert (= x385 (and (not x886) x536)))
(assert (= (and x1277 x574) x1125))
(assert (= (=> (and (not x759) (= (ite x1103 1 0) x755) (= (x827 (+ 64 x334)) x23) (= (= 0 x1164) x1314) (= x1026 (< x86 x1131)) (= x767 (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1107)) (= x334 (x827 (+ x246 x767))) (= (ite (= x293 115792089237316195423570985008687907853269984665640564039457584007913129639935) x656 x927) x1146) (= x1107 (x827 (+ x1172 31))) (= x656 (div x183 1000000000000000000000000000)) (= x707 (mod (* x1164 x1131) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (or x1314 x1240) x1103) (not x693) (= x86 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1164)) (< 0 x755) (= (not x1026) x1240) (= (= x655 0) x693) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1172) (and (< x1172 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1172)))) x759) (= x183 (x827 (+ x707 500000000000000000000000000))) (= (= 0 x1146) x189) (= (x1144 x246) x1131)) (and (=> x189 x721) (=> (and (not x189) (and (= (x827 (+ x23 64)) x7) (= (< x656 x1146) x50))) (and (=> (and (not x50) (and (= x269 (not (= 0 x1114))) (= (not (= 0 x683)) x87) (= x1309 (x1251 288230376151711744 x1118)) (= x680 (x1251 576460752303423488 x1118)) (= (not (= x268 0)) x885) (= x858 (x827 (+ x7 64))) (= 1664 x868) (= x1114 (x1251 72057594037927936 x1118)) (= x268 (x1251 144115188075855872 x1118)) (= (x1251 1152921504606846976 x1118) x683) (= (not (= x1309 0)) x1023) (= (not (= 0 x680)) x549))) (and (=> (not x269) x721) (=> (and x269 (= (x827 (+ 64 x858)) x632)) (and (=> x87 x721) (=> (and (not x87) (and (and (> 1461501637330902918203684832716283019655932542976 x1292) (< 0 x1322) (= (not x529) x804) (= (ite x312 1 0) x1322) (= (x827 (+ x176 288)) x888) (>= 1461501637330902918203684832716283019655932542975 x1292) (= x529 (< x1037 x193)) (= 1664 x1237) (= x1292 (x41 x398)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x959) x1037) (= (x762 x160 176) x17) (= x517 (= x17 0)) (= (x1251 6582018229189043197315758676582005330734049138558148258257960960 x1118) x160) (= (= x959 0) x75) (= x743 (x827 (+ 500000000000000000000000000 x1235))) (= (div x743 1000000000000000000000000000) x167) (= x398 (x502 x682 1)) (= x1235 (mod (* x193 x959) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x312 (or x75 x804)) (= (x827 (+ 128 x632)) x176) (>= x1292 0)) (or (and (= 0 x1248) x517) (and (not x517) (and (< x794 340282366920938463463374607431768211456) (= x1248 x794) (<= 0 x794) (= x794 (x1079 x306)) (>= 340282366920938463463374607431768211455 x794) (= x306 (x502 x398 1))))))) x691))))) (=> x50 x721))))) x736))
(assert (x85 x1209))
(assert (x85 x351))
(assert (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x90 (x228 54940573406046109056602222415596668683460243721328594580962599660119180443648))))
(assert (= (and (not x517) x784) x663))
(assert (x149 x1036 x376))
(assert (x85 x966))
(assert (= (x90 (x467 x202)) x202))
(assert (x85 x270))
(assert (= (x90 (x228 38597363079105398474523661669562635951089994888546854679819194669304376546645)) 38597363079105398474523661669562635951089994888546854679819194669304376546645))
(assert (= (and (not x124) x500) x326))
(assert (x85 x636))
(assert (= (=> (and (= x80 x362) (= x40 x447) (= x1178 x844) (= x675 x1304) (= x1035 x914) (= x130 x1267) (= x1084 x481) (= (x275 x1028) x1304)) x878) x350))
(assert (= (x467 340282366920938463463374607431768211456) (x228 340282366920938463463374607431768211456)))
(assert (x85 x829))
(assert (x85 x770))
(assert (= 500000000000000000000000000 (x90 (x228 500000000000000000000000000))))
(assert (x85 x435))
(assert (= (div x798 2) (x762 x798 1)))
(assert (= x547 (x90 (x467 x547))))
(assert (= 0 (x170 x991)))
(assert (x85 x325))
(assert (x85 x1203))
(assert (x85 x875))
(assert (= (x467 576460752303423488) (x228 576460752303423488)))
(assert (x85 x164))
(assert (x85 x1341))
(assert (x85 x1054))
(assert (x85 x222))
(assert (x85 x1321))
(assert (= (x90 (x228 994519296000000)) 994519296000000))
(assert (= (or x38 (and x388 (not x465))) x747))
(assert (x157 1))
(assert (= x949 (and x968 x579)))
(assert (x85 x1190))
(assert (x1085 x610))
(assert (x85 x1224))
(assert (x157 x1107))
(assert (= x617 (=> (= x1229 (= x193 0)) (and (=> (and (and (and (= (< x224 x188) x1134) (= x310 (= 0 x347)) (= x347 (x206 (- x135 x188))) (not x1134)) (or (and x310 (= 1000000000000000000000000000 x895)) (and (not x310) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x174 1000000000000000000000000000)) (= x142 (div x292 1000000000000000000000000000)) (= (or x336 x509) x286) (= x962 x595) (= (= x781 0) x1197) (< (* x280 x42) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1042 (mod (* x781 x781) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (* x962 x603) x172) (= (x827 (+ x1042 500000000000000000000000000)) x918) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x962 x603)) (= x211 (div x599 2)) (= x6 (+ x1330 x1068)) (= x280 (mod (* x1081 x347) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1073 (ite x290 1 0)) (= x174 x1254) (> x1073 0) (= x630 (div x918 1000000000000000000000000000)) (= x336 (= 0 x781)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x781) x377) (= x15 (= x347 0)) (= 0 x308) (= (x827 (+ x779 500000000000000000000000000)) x292) (= (* x347 x781) x462) (= x599 (* x1209 x294)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x781 x347)) (= (not x913) x509) (= x396 (div x172 6)) (= (+ x1250 x254) x624) (= (< x571 x294) x913) (= (> x781 x377) x474) (= (+ x768 x1254) x1228) (= (not x474) x695) (= (div x630 994519296000000) x294) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x347 x1081)) (< 0 x428) (= x114 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x347)) (= (ite (> x347 2) (x206 (- x347 2)) 0) x42) (= x6 x1250) (= (or x695 x1197) x290) (= 1000000000000000000000000000 x768) (= x129 x1209) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x396 x6)) (= x624 x895) (= (x1251 x1238 x1064) x308) (= x1238 (ite (not x15) 1 0)) (= x571 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x781)) (= x428 (ite x286 1 0)) (= x595 (* x280 x42)) (= (div x142 31536000) x603) (= x129 (* x1081 x347)) (= x1228 x1330) (= x1068 x211) (= x396 x254) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1209 x294)) (= (x206 (- x347 1)) x1081) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1228 x211)) (= x779 (mod (* x781 x294) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x462 31536000) x174) (= x1064 (ite (> x1081 x114) 1 0)))))) (not x1229)) x839) (=> (and x1229 (= x1186 x669)) x644)))))
(assert (x85 x1208))
(assert (x85 x268))
(assert (x85 x669))
(assert (x85 x756))
(assert (= (or x817 x1249) x1331))
(assert (x85 x134))
(assert (x85 x1311))
(assert (= x1348 (and x515 (not x59))))
(assert (x85 x434))
(assert (x157 x756))
(assert (x85 x1036))
(assert (x85 x1046))
(assert (x472 x1118))
(assert (x85 x914))
(assert (x85 x159))
(assert (= x60 (and x233 x999)))
(assert (= x676 (=> (= (not (> x29 1)) x365) (and (=> (and (= x650 x362) (= x1178 x694) (= x448 x1122) (= x987 x1267) (= x874 x1311)) x278) x365))))
(assert (= x696 (=> (and (or (and (= 0 x1035) x1277) (and (not x1277) (and (> x362 0) (= x601 x1035) (= x601 (div x874 x362))))) (= x1277 (= 0 x362))) x393)))
(assert (x85 x1162))
(assert (= (and x1087 x348) x248))
(assert (x85 x1029))
(assert (x85 x1194))
(assert (x85 x1166))
(assert (= (=> (and (<= x971 65535) (= x31 x1201) (<= 0 x971) (= x78 (x93 x996)) (= x787 x971) (< x78 65536) (<= x78 65535) (= x78 x387) (>= x78 0) (< x971 65536) (= x557 x667) (= x971 (x408 x996))) x1153) x640))
(assert (x85 x1171))
(assert (x85 x1322))
(assert (x85 x292))
(assert (x85 x287))
(assert (= (x467 1099511627776) (x228 1099511627776)))
(assert (x1085 x4))
(assert (x976 x1287))
(assert (x85 x672))
(assert (= (and x46 x930) x295))
(assert (x85 x957))
(assert (x85 x848))
(assert (x85 x741))
(assert (x85 x609))
(assert (x85 x787))
(assert (x1085 x974))
(assert (x85 x1201))
(assert (x893 x147))
(assert (= (x762 x392 64) (div x392 18446744073709551616)))
(assert (= x928 (and x1069 (not x1191))))
(assert (x85 x1304))
(assert (x157 3))
(assert (= 65536 (x90 (x228 65536))))
(assert (x85 x483))
(assert (x85 x718))
(assert (x85 x548))
(assert (= x95 (and x1242 x181)))
(assert (= x475 (=> (and (= x694 x796) (= x448 x71) (= x1311 x618) (= x484 x987) (= x650 x808)) x676)))
(assert (x85 x424))
(assert (= x583 (=> (and (= x34 (x1251 340282366920938463463374607431768211455 x642)) (= x733 (x827 (+ 32 x344))) (= x1047 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x542)) (> 96 x542)) (> x542 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= 0 x832) (= x429 (> x530 340282366920938463463374607431768211455)) (= (x827 (+ 32 x18)) x449) (= x37 (x827 (+ 31 x542))) (not x1299) (= (< x832 128) x930) (<= 0 x665) (= (x961 x102) x665) (not x1047) (= x18 (x827 (+ x888 x718))) (not x629) (= x1025 (x236 x733)) (= (> x1025 340282366920938463463374607431768211455) x1230) (not x429) (= x1299 (> x642 340282366920938463463374607431768211455)) (= (x1282 x389) x832) (= (x236 x888) x530) (= (x827 (+ x18 32)) x540) (= x718 (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x37)) (<= x665 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1251 340282366920938463463374607431768211455 x530) x556) (= x990 (x827 (+ 64 x540))) (< x832 65536) (= x660 (x827 (+ 32 x609))) (= (x827 (+ x660 32)) x647) (not x1230) (= x629 (= 0 x1219)) (= (x1251 340282366920938463463374607431768211455 x1025) x1113) (<= x832 65535) (= x344 (x827 (+ x888 32))) (= x609 (x827 (+ x449 32))) (= (x236 x344) x642)) (and (=> (and x930 (and (= (x827 (+ (mod (x1058 x832 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x480) (= x634 (x762 x665 x480)) (= x788 (x1251 1 x634)) (= x1191 (not (= x788 0))))) (and (=> (not x1191) (and (=> x1191 x1337) (=> (and (not x1191) (= x990 x84)) x1152))) (=> (and (= (= x1146 x656) x666) x1191) (and (=> x666 x1337) (=> (and (= x990 x84) (not x666)) x1152))))) (=> (not x930) x721)))))
(assert (x85 x808))
(assert (x85 x665))
(assert (x1085 x673))
(assert (x85 x506))
(assert (= x96 true))
(assert (= (x90 (x502 x1049 1)) (+ 1 (x90 x1049))))
(assert (x85 x304))
(assert (= (x228 65536) (x467 65536)))
(assert (x85 x810))
(assert (= (x467 (x90 x604)) x604))
(assert (= (or x1083 x335) x574))
(assert (= x834 (and x851 (not x619))))
(assert (= x1119 (or x473 x818)))
(assert (x85 x272))
(assert (x85 x396))
(assert (x85 x626))
(assert (x85 x1009))
(assert (= (x228 1461501637330902918203684832716283019655932542975) (x467 1461501637330902918203684832716283019655932542975)))
(assert (x85 x1172))
(assert (x85 x1165))
(assert (x85 x1127))
(assert (= (=> (and (or (and (and (= x661 1) (< x769 4294967296)) x451) (and (= x88 x661) (not x451))) (and (= x51 (x827 (+ 4 x49))) (= x451 (< 0 x88)))) x790) x910))
(assert (x85 x154))
(assert (x85 x993))
(assert (x85 x23))
(assert (x85 x431))
(assert (= (x228 288230376151711744) (x467 288230376151711744)))
(assert (x85 x345))
(assert (x85 x850))
(assert (= (x90 (x228 114274503271123192386478379219969658730955725740335141578591849194369543307264)) 114274503271123192386478379219969658730955725740335141578591849194369543307264))
(assert (x1202 x325))
(assert (x85 x729))
(assert (x85 x1150))
(assert (x85 x816))
(assert (x85 x198))
(assert (x85 x1042))
(assert (x85 x471))
(assert (= (+ 1 (x90 x1011)) (x90 (x502 x1011 1))))
(assert (= (x90 (x228 1635491895)) 1635491895))
(assert (= (x90 (x228 95406826884961342500336545879718955523139276405473280)) 95406826884961342500336545879718955523139276405473280))
(assert (x85 x1295))
(assert (x85 x788))
(assert (x85 x359))
(assert (=> (>= 10000 x836) (= (x228 x836) (x467 x836))))
(assert (x85 x343))
(assert (x85 x608))
(assert (= (x90 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x1085 x271))
(assert (x85 x997))
(assert (x85 x1071))
(assert (=> (<= x974 10000) (= (x228 x974) (x467 x974))))
(assert (x85 x1156))
(assert (x85 x1115))
(assert (= (x467 6582018229189043197315758676582005330734049138558148258257960960) (x228 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (=> (>= 10000 x977) (= (x467 x977) (x228 x977))))
(assert (x85 x815))
(assert (= x818 (and (not x369) x943)))
(assert (= (or x572 x538) x458))
(assert (x85 x675))
(assert (x85 x110))
(assert (= x252 (=> (and (or (and (not x108) (= x975 x588)) (and (and (= x588 1) (> 4294967296 x846)) x108)) (and (= (x141 x1323) x974) (= (x827 (+ x1257 320)) x355) (> 340282366920938463463374607431768211456 x1226) (= x669 (x516 x702)) (= (= x1261 0) x852) (= x108 (< 0 x975)) (<= 0 x830) (= x1098 (x827 (+ x361 32))) (= x132 (x1283 (x467 x977) (x228 56) 0)) (= x1008 (x827 (+ 32 x951))) (= (x827 (+ x638 32)) x1170) (= x1142 11049711537980759571054125042374268220760016173988553948347240322396617441280) (= (x827 (+ 4 x355)) x638) (> 340282366920938463463374607431768211456 x781) (= x727 (x827 (+ 32 x1170))) (not x1070) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x370) (and (> 32 x370) (= true (<= x370 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x927 x320) (>= 340282366920938463463374607431768211455 x1226) (> 1099511627776 x188) (= (x827 (+ x368 32)) x361) (> 1461501637330902918203684832716283019655932542976 x929) (= (x502 x702 2) x1323) (>= x669 0) (= x781 (x438 x702)) (= (x502 x118 1) x682) (= 409856580 x106) (>= 1461501637330902918203684832716283019655932542975 x929) (= x293 x927) (>= x929 0) (= x188 (x967 x389)) (= x1156 52) (= x703 (x518 x57)) (= x937 (x206 (- x240 4))) (= x1029 (x762 x392 64)) (= x1141 x1246) (not x1192) (= (x1010 x682) x929) (<= 0 x974) (> 1461501637330902918203684832716283019655932542976 x974) (= x951 (x827 (+ 32 x1098))) (= x81 x102) (= x121 x1071) (<= 0 x1226) (= x964 (x1030 x132)) (<= x830 1461501637330902918203684832716283019655932542975) (= (x827 (+ x727 32)) x368) (= (x1283 (x467 x1246) (x228 52) 0) x144) (= (x206 (- x240 132)) x1203) (>= 1099511627775 x188) (= (x206 (- x1217 x355)) x1327) (< x669 340282366920938463463374607431768211456) (= x1257 (x1251 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1255)) (= x242 1664) (= x1118 (x812 x144)) (= (x1251 1208907372870555465154560 x1118) x392) (= (x526 (x467 x1261)) x938) (>= 255 x1071) (= x1246 x1317) (= (x502 x57 1) x702) (= x1217 (x827 (+ x638 320))) (<= 0 x781) (not (= 0 x222)) (<= x1118 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x604 x102) (<= 0 x703) (= x166 x1196) (= 55 x940) (>= x188 0) (< x830 1461501637330902918203684832716283019655932542976) (= x1105 x156) (<= x669 340282366920938463463374607431768211455) (<= x781 340282366920938463463374607431768211455) (= x1070 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1203) (and (< x1203 192) (= (<= x1203 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x712 x1246) (>= 1461501637330902918203684832716283019655932542975 x924) (= x240 324) (= (x827 (+ x1008 32)) x501) (not (> 4 x240)) (<= x703 340282366920938463463374607431768211455) (= x389 (x502 x702 1)) (= x1255 (x827 (+ x370 31))) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x937) (and (< x937 320) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x937) true))) x1192) (> x938 0) (= x1105 x994) (= (x105 320) x924) (= x118 (x502 x1323 1)) (not x852) (= x29 x1196) (= x924 x898) (>= x964 0) (= x1071 x964) (= (x633 x118) x830) (< x703 340282366920938463463374607431768211456) (= (x827 (+ 32 x501)) x219) (= x1227 992) (<= x964 255) (= x240 x1327) (>= x1118 0) (<= x974 1461501637330902918203684832716283019655932542975) (< x964 256) (= x57 (x502 x144 1)) (= 54 x443) (= (x284 x57) x1226))) x395)))
(assert (x85 x45))
(assert (x85 x1326))
(assert (= (or x330 x1307) x515))
(assert (x85 x320))
(assert (x532 x847))
(assert (x85 x994))
(assert (x85 x245))
(assert (=> (<= x561 10000) (= (x467 x561) (x228 x561))))
(assert (x85 x71))
(assert (x85 x204))
(assert (x85 x1147))
(assert (x85 x1146))
(assert (x85 x651))
(assert (= (and x664 (not x50)) x1055))
(assert (x85 x4))
(assert (= x906 (and x59 x515)))
(assert (x1207 x135))
(assert (x1085 x547))
(assert (x1085 x561))
(assert (x85 x715))
(assert (x85 x646))
(assert (= x1020 (and x1195 (not x1191))))
(assert (= x935 (or (and (not x1222) x1185) x519)))
(assert (= (x90 (x228 72057594037927936)) 72057594037927936))
(assert (= (x90 (x228 576460752303423488)) 576460752303423488))
(assert (x85 x1182))
(assert (x157 1099511627775))
(assert (x85 x437))
(assert (x157 72057594037927936))
(assert (x1085 x1224))
(assert (x85 x778))
(assert (x85 x1215))
(assert (= x1349 (and x500 x124)))
(check-sat)
(exit)