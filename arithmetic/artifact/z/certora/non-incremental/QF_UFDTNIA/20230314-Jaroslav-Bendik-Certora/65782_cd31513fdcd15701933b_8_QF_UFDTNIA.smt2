(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x297 0)) (((x48 (x208 x297) (x264 x297) (x20 Int)) (x98 (x41 Int)) (x293 (x307 x297) (x29 Int)))))
(declare-fun x282 (x297) Int)
(declare-fun x34 () Bool)
(declare-fun x82 () Int)
(declare-fun x222 () Bool)
(declare-fun x155 () Bool)
(declare-fun x314 () Bool)
(declare-fun x69 () Int)
(declare-fun x162 () Int)
(declare-fun x14 () Bool)
(declare-fun x141 () Bool)
(declare-fun x286 () Bool)
(declare-fun x99 () Bool)
(declare-fun x157 () x297)
(declare-fun x292 () Int)
(declare-fun x188 () Int)
(declare-fun x176 () Int)
(declare-fun x122 () Int)
(declare-fun x124 () Int)
(declare-fun x309 () Bool)
(declare-fun x250 () Int)
(declare-fun x164 () Bool)
(declare-fun x38 () Int)
(declare-fun x262 () Int)
(declare-fun x303 () Int)
(declare-fun x207 () Int)
(declare-fun x88 () Int)
(declare-fun x12 () Int)
(declare-fun x247 () Int)
(declare-fun x28 () Int)
(declare-fun x57 () Int)
(declare-fun x302 () Bool)
(declare-fun x123 () Bool)
(declare-fun x104 () Int)
(declare-fun x276 () Int)
(declare-fun x152 () Bool)
(declare-fun x187 () Int)
(declare-fun x115 () Int)
(declare-fun x39 () Int)
(declare-fun x216 () Bool)
(declare-fun x230 () Bool)
(declare-fun x259 () Bool)
(declare-fun x140 () Int)
(declare-fun x90 () Int)
(declare-fun x156 () Int)
(declare-fun x45 () Int)
(declare-fun x1 () Bool)
(declare-fun x244 () Int)
(declare-fun x235 () Bool)
(declare-fun x21 () x297)
(declare-fun x42 () Int)
(declare-fun x175 () Bool)
(declare-fun x75 () Int)
(declare-fun x215 () Int)
(declare-fun x76 () Int)
(declare-fun x135 () Bool)
(declare-fun x10 () Int)
(declare-fun x261 () Bool)
(declare-fun x240 () Int)
(declare-fun x169 () Int)
(declare-fun x47 () Int)
(declare-fun x310 () Int)
(declare-fun x27 () Bool)
(declare-fun x151 () Int)
(declare-fun x23 () Bool)
(declare-fun x226 () Int)
(declare-fun x13 () Bool)
(declare-fun x253 (x297) Int)
(declare-fun x272 () Bool)
(declare-fun x91 () Int)
(declare-fun x102 () Int)
(declare-fun x269 () Bool)
(declare-fun x241 () Int)
(declare-fun x15 () Int)
(declare-fun x93 () Int)
(declare-fun x87 () Bool)
(declare-fun x114 () Int)
(declare-fun x191 () Int)
(declare-fun x112 () Bool)
(declare-fun x225 () Int)
(declare-fun x305 () Bool)
(declare-fun x163 () Bool)
(declare-fun x197 () Int)
(declare-fun x105 (Int Int) Int)
(declare-fun x96 () Bool)
(declare-fun x9 () Int)
(declare-fun x160 () Bool)
(declare-fun x58 () Bool)
(declare-fun x171 () Int)
(declare-fun x26 () Bool)
(declare-fun x234 (Int) Int)
(declare-fun x172 () Int)
(declare-fun x167 () Int)
(declare-fun x202 () Bool)
(declare-fun x138 () Bool)
(declare-fun x221 () Bool)
(declare-fun x30 () Bool)
(declare-fun x186 () Int)
(declare-fun x50 () Bool)
(declare-fun x181 () Bool)
(declare-fun x81 () Int)
(declare-fun x56 () Int)
(declare-fun x53 () Bool)
(declare-fun x149 () Int)
(declare-fun x308 () Bool)
(declare-fun x193 () Bool)
(declare-fun x113 () Bool)
(declare-fun x126 () Int)
(declare-fun x154 () Int)
(declare-fun x139 () Bool)
(declare-fun x315 () Int)
(declare-fun x118 () Int)
(declare-fun x62 () Bool)
(declare-fun x79 () Int)
(declare-fun x170 () Bool)
(declare-fun x131 () Int)
(declare-fun x72 () x297)
(declare-fun x265 () Int)
(declare-fun x84 () Int)
(declare-fun x59 () Int)
(declare-fun x218 () Bool)
(declare-fun x198 () Int)
(declare-fun x148 () Bool)
(declare-fun x232 () x297)
(declare-fun x229 () Int)
(declare-fun x228 () Int)
(declare-fun x5 () Int)
(declare-fun x211 () Bool)
(declare-fun x224 () Bool)
(declare-fun x219 () Bool)
(declare-fun x279 () Int)
(declare-fun x74 () Bool)
(declare-fun x220 () Bool)
(declare-fun x119 () Int)
(declare-fun x158 () Int)
(declare-fun x214 () Int)
(declare-fun x249 () Bool)
(declare-fun x89 () Int)
(declare-fun x129 () Int)
(declare-fun x294 () Bool)
(declare-fun x11 () Bool)
(declare-fun x284 () Int)
(declare-fun x299 () Int)
(declare-fun x85 () Bool)
(declare-fun x54 () Bool)
(declare-fun x43 () Int)
(declare-fun x31 () Int)
(declare-fun x46 () Int)
(declare-fun x271 () Int)
(declare-fun x280 () Int)
(declare-fun x313 (x297) Int)
(declare-fun x95 () x297)
(declare-fun x194 () Int)
(declare-fun x40 () Int)
(declare-fun x44 () Bool)
(declare-fun x106 () x297)
(declare-fun x25 () Int)
(declare-fun x49 () Int)
(declare-fun x110 () Int)
(declare-fun x209 (Int Int) Int)
(declare-fun x260 () Int)
(declare-fun x7 () Int)
(declare-fun x212 () Bool)
(declare-fun x35 (Int) Int)
(declare-fun x145 () Bool)
(declare-fun x196 () Bool)
(declare-fun x97 () Bool)
(declare-fun x128 () Bool)
(declare-fun x71 () Int)
(declare-fun x63 () Int)
(declare-fun x205 () Bool)
(declare-fun x246 () Int)
(declare-fun x19 () Int)
(declare-fun x52 () Bool)
(declare-fun x285 () Bool)
(declare-fun x277 () Bool)
(declare-fun x270 () x297)
(declare-fun x179 () Int)
(declare-fun x182 () Int)
(declare-fun x263 () Int)
(declare-fun x121 () Bool)
(declare-fun x133 () Int)
(declare-fun x254 (Int Int) Int)
(declare-fun x61 () Bool)
(declare-fun x77 () Int)
(declare-fun x252 () Int)
(declare-fun x137 () Bool)
(declare-fun x80 () Bool)
(declare-fun x245 () Bool)
(declare-fun x161 () Int)
(declare-fun x238 (x297) Int)
(declare-fun x288 () Int)
(declare-fun x289 () Int)
(declare-fun x70 () Int)
(declare-fun x66 () Int)
(declare-fun x311 () Bool)
(declare-fun x301 () x297)
(declare-fun x239 () Int)
(declare-fun x213 () Int)
(declare-fun x200 () Int)
(declare-fun x283 () x297)
(declare-fun x201 () Bool)
(declare-fun x287 () Int)
(declare-fun x37 () Int)
(declare-fun x68 () Bool)
(declare-fun x203 () Int)
(declare-fun x199 () Int)
(declare-fun x92 () Bool)
(declare-fun x227 () Int)
(declare-fun x192 () Int)
(declare-fun x174 () Int)
(declare-fun x83 (x297) Int)
(declare-fun x130 () Int)
(declare-fun x150 () Bool)
(declare-fun x195 () x297)
(declare-fun x178 () x297)
(declare-fun x237 (Int) Int)
(declare-fun x273 () Int)
(declare-fun x236 (Int) x297)
(declare-fun x312 () Int)
(declare-fun x281 () Int)
(declare-fun x316 () Int)
(declare-fun x274 () Int)
(declare-fun x55 () Int)
(declare-fun x64 () Bool)
(declare-fun x268 () Int)
(declare-fun x33 (x297) Int)
(declare-fun x159 () Bool)
(declare-fun x127 () Int)
(declare-fun x306 () Int)
(declare-fun x116 () Int)
(declare-fun x210 () x297)
(declare-fun x183 () Int)
(declare-fun x290 () x297)
(declare-fun x256 () Int)
(declare-fun x266 () Bool)
(declare-fun x101 () Bool)
(declare-fun x300 () Int)
(declare-fun x184 () Int)
(declare-fun x142 () Bool)
(declare-fun x136 () Bool)
(declare-fun x107 () Bool)
(declare-fun x24 () Int)
(declare-fun x18 () Bool)
(declare-fun x111 () Int)
(declare-fun x217 () Int)
(declare-fun x242 (x297) Int)
(declare-fun x103 () Int)
(declare-fun x173 () Int)
(declare-fun x258 () Int)
(declare-fun x134 () Int)
(declare-fun x94 () Bool)
(declare-fun x109 () Bool)
(declare-fun x243 () Int)
(declare-fun x132 () Int)
(declare-fun x304 () Int)
(declare-fun x248 () Int)
(declare-fun x223 () Int)
(declare-fun x16 () Int)
(declare-fun x255 () Int)
(declare-fun x78 () Int)
(declare-fun x296 () Int)
(declare-fun x17 () Bool)
(declare-fun x190 () Int)
(declare-fun x22 () Int)
(declare-fun x267 () Int)
(define-fun x67 ((x297 x297) (x180 Int)) x297 (ite ((_ is x293) x297) (x293 (x307 x297) (+ (x29 x297) x180)) (ite ((_ is x48) x297) (x48 (x208 x297) (x264 x297) (+ (x20 x297) x180)) (x98 (+ x180 (x41 x297))))))
(define-fun x4 ((x3 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x3) (>= x3 0)) x3 (- x3 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x189 ((x3 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x3) (> 0 x3)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x3) x3))
(define-fun x143 ((x144 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x144) (>= x144 0)))
(define-fun x168 ((x144 Int)) Bool (and (= (x209 115792089237316195423570985008687907853269984665640564039457584007913129639935 x144) x144) (= x144 (x209 x144 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x125 ((x144 Int)) Bool (and (= (x209 0 x144) 0) (= 0 (x209 x144 0))))
(define-fun x291 ((x144 Int)) Bool (= (x209 x144 x144) x144))
(define-fun x165 ((x144 Int)) Bool (and (x291 x144) (x168 x144) (x125 x144)))
(define-fun x32 ((x144 Int) (x231 Int)) Bool (= (x209 x231 x144) (x209 x144 x231)))
(define-fun x100 ((x144 Int) (x231 Int)) Bool (and (>= (x209 x144 x231) 0) (=> (>= x231 0) (>= x231 (x209 x144 x231))) (=> (<= 0 x144) (>= x144 (x209 x144 x231)))))
(define-fun x275 ((x144 Int) (x231 Int)) Bool (and (x32 x144 x231) (x100 x144 x231)))
(define-fun x295 ((x144 Int)) Bool (= (mod x144 1461501637330902918203684832716283019655932542976) (x209 x144 1461501637330902918203684832716283019655932542975)))
(define-fun x204 ((x144 Int)) Bool (and (x275 x144 1461501637330902918203684832716283019655932542975) (x295 x144)))
(define-fun x298 ((x144 Int)) Bool (and (= (x105 115792089237316195423570985008687907853269984665640564039457584007913129639935 x144) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x105 x144 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x60 ((x144 Int)) Bool (and (= (x105 0 x144) x144) (= (x105 x144 0) x144)))
(define-fun x146 ((x144 Int)) Bool (= (x105 x144 x144) x144))
(define-fun x120 ((x144 Int)) Bool (and (x298 x144) (x146 x144) (x60 x144)))
(define-fun x318 ((x144 Int) (x231 Int)) Bool (= (x105 x144 x231) (x105 x231 x144)))
(define-fun x147 ((x144 Int) (x231 Int)) Bool (and (<= (x105 x144 x231) (+ x231 x144)) (=> (>= x231 0) (<= x231 (x105 x144 x231))) (=> (<= 0 x144) (>= (x105 x144 x231) x144))))
(define-fun x317 ((x144 Int) (x231 Int)) Bool (and (x318 x144 x231) (x147 x144 x231)))
(define-fun x65 ((x2 x297)) Int (x83 x2))
(define-fun x166 ((x2 x297)) Int (ite (= x2 x195) x82 (x253 x2)))
(define-fun x36 ((x2 x297)) Int (ite (= x2 x21) x183 (x166 x2)))
(define-fun x6 ((x2 x297)) Int (ite x269 (x253 x2) (x36 x2)))
(define-fun x117 ((x2 x297)) Int (x242 x2))
(define-fun x86 ((x2 x297)) Int (ite (= x2 x301) x213 (x117 x2)))
(define-fun x51 ((x2 Int)) Int (ite (= 128 x2) x316 (x35 x2)))
(define-fun x185 ((x2 Int)) Int (ite (= x2 128) x102 (x51 x2)))
(define-fun x177 ((x2 Int)) Int (ite (= x2 160) x316 (x185 x2)))
(define-fun x257 ((x2 Int)) Int (ite (= 128 x2) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x177 x2)))
(define-fun x278 ((x2 Int)) Int (ite (= 132 x2) x110 (x257 x2)))
(define-fun x8 ((x2 Int)) Int (ite (= 164 x2) x102 (x278 x2)))
(define-fun x108 ((x2 x297)) Int (ite (= x2 x178) x66 (x6 x2)))
(define-fun x73 ((x2 Int)) Int (ite (= 128 x2) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x237 x2)))
(define-fun x206 ((x2 Int)) Int (ite (= 132 x2) x7 (x73 x2)))
(define-fun x153 ((x2 Int)) Int (ite (= x2 164) x267 (x206 x2)))
(define-fun x233 ((x2 Int)) Int (ite (= 196 x2) x239 (x153 x2)))
(define-fun x251 ((x144 Int)) Bool (=> (and (not (= x144 1289409798)) (not (= 170435703 x144)) (not (= 2376452955 x144)) (not (= x144 826074471)) (not (= 3017275065 x144)) (not (= x144 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 2835717307 x144)) (not (= 117300739 x144)) (not (= 157198259 x144)) (not (= x144 3121116754)) (not (= x144 599290589)) (not (= 404098525 x144)) (not (= x144 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (not (= x144 330252341)) (< 10000 x144) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x144)) (not (= 2514000705 x144)) (not (= x144 3026235284)) (not (= 1461501637330902918203684832716283019655932542975 x144)) (not (= 3337024914 x144)) (not (= 1889567281 x144)) (not (= 1851080549 x144))) (not ((_ is x98) (x236 x144)))))
(assert (= (x33 (x236 x228)) x228))
(assert (x143 x315))
(assert (= 826074471 (x33 (x98 826074471))))
(assert (= x182 (x33 (x236 x182))))
(assert (x143 x190))
(assert (= x261 (or x107 x269)))
(assert (x165 x296))
(assert (= (=> (and (= x56 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= (or (> x274 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x274 64) (= (<= x274 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x58) (>= x24 0) (not (> x102 x315)) (not (> x316 x214)) (= x102 x207) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x214) (<= x315 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x288 (x189 (- x24 x316))) (= x131 x110) (>= x214 0) (not (> 826074471 x276)) (= 128 x174) (not (= 2514000705 x276)) (= x214 (x86 x270)) (= x276 2835717307) (not (< x300 4)) (not (= x276 826074471)) (not (= x102 0)) (= x149 (x189 (- x315 x102))) (<= 0 x315) (= (x209 1461501637330902918203684832716283019655932542975 x296) x118) (= (x48 (x236 x118) (x98 3) 0) x270) (= x188 (x282 (x236 x115))) (= (x189 (- x214 x316)) x197) (= x274 (x189 (- x300 4))) (> x188 0) (not (= x276 1889567281)) (= x300 68)) (and (=> (and (and (= x131 x130) (= (= x131 x110) x230)) (not x58)) (and (=> (and (= 0 x199) (not x230)) x220) (=> (and (and (= (< x203 x102) x80) (<= x203 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x203) (= x192 x207) (= (x48 (x236 x267) (x98 1) 0) x232) (= (x6 x232) x203)) x230) (and (=> (and (= x224 (> x207 x203)) (not x80)) (and (=> (and (= 0 x199) x224) x220) (=> (and (not x224) (and (= x178 (x48 (x236 x267) (x98 1) 0)) (= x157 (x48 (x236 x131) (x98 1) 0)) (<= x191 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x191 0) (= x66 (x189 (- x203 x207))) (= (x108 x157) x191) (= (x189 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x207)) x119) (= x277 (< x119 x191)))) (and (=> (and (and (= x289 (x4 (+ x191 x207))) (= x62 (< x289 x191))) (not x277)) (and (=> (and x62 (= x199 0)) x220) (=> (and (not x62) (and (= x172 32) (= 1 x116))) x87))) (=> (and x277 (= x199 0)) x220))))) (=> (and x80 (= 0 x199)) x220))))) (=> (and x58 (and (= x116 0) (= x55 x172))) x87))) x170))
(assert (x143 x93))
(assert (x143 x203))
(assert (x165 x176))
(assert (x143 x42))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x33 (x98 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (x143 x110))
(assert (= (and x155 x136) x97))
(assert (x143 x243))
(assert (= x142 (=> (and (= x42 128) (< x69 826074471) (not (< x16 4)) (not (= x69 117300739)) (= x314 (or (> x246 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x246 96) (= true (<= x246 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (not (= 0 x10)) (= x267 x228) (= (x282 (x236 x115)) x265) (= x25 x182) (= 599290589 x69) (= x246 (x189 (- x16 4))) (= x239 x75) (> x265 0) (= x186 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= x69 157198259)) (= 100 x16) (not (= 404098525 x69))) (and (=> x314 x94) (=> (and (and (= x266 true) (= x182 x63)) (not x314)) (and (=> (and (and (= true x112) (= x228 x43)) x266) (and (=> (and (and (= (> x239 x281) x285) (= (x253 x283) x281) (<= x281 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x198 x75) (<= 0 x281) (= x283 (x48 (x236 x182) (x98 1) 0))) x112) (and (=> (and (= (> x75 x281) x155) (not x285)) (and (=> x155 x94) (=> (and (and (= x111 (x189 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x75))) (= (x189 (- x281 x75)) x82) (= (x48 (x236 x182) (x98 1) 0) x195) (<= x122 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x48 (x236 x228) (x98 1) 0) x290) (= (x166 x290) x122) (= (< x111 x122) x26) (>= x122 0)) (not x155)) (and (=> x26 x94) (=> (and (not x26) (and (= x216 (> x122 x183)) (= x183 (x4 (+ x122 x75))))) (and (=> x216 x94) (=> (and (and (= x21 (x48 (x236 x228) (x98 1) 0)) (= x210 (x48 (x236 x267) x95 0)) (= (< x133 x75) x235) (= (x48 (x236 x182) (x98 2) 0) x95) (= (x313 x210) x133) (>= x133 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x133)) (not x216)) (and (=> (and (not x235) (= x109 (> x75 x133))) (and (=> (and (not x109) (and (= x93 x49) (= (x189 (- x133 x75)) x77) (= x76 32) (= x9 x244) (= x247 1))) x137) (=> x109 x94))) (=> x235 x94))))))))) (=> x285 x94))) (=> (not x112) x94))) (=> (not x266) x94)))))))
(assert (x143 x156))
(assert (x120 x134))
(assert (= (=> (and (= x199 x116) (= x172 x55)) x87) x220))
(assert (= (and x221 (not x314)) x99))
(assert (= (and x230 x121) x311))
(assert (x143 x241))
(assert (x143 x7))
(assert (x165 x57))
(assert (x143 x274))
(assert (x143 x37))
(assert (x143 x288))
(assert (= (and x138 (not x235)) x308))
(assert (= (x98 1889567281) (x236 1889567281)))
(assert (x165 x252))
(assert (x143 x115))
(assert (x143 x171))
(assert (= (and x109 x308) x74))
(assert (= x68 (=> (and (and (= 3121116754 x248) (= x256 0) (not (> 2376452955 x248)) (not (< x248 3017275065)) (= x292 x190) (>= x190 0) (not (= x248 3017275065)) (= x140 x296) (>= x273 0) (= x40 x292) (= x229 x260) (= x296 x229) (not (= x248 3026235284)) (< 0 x280) (>= x179 0) (<= x273 1461501637330902918203684832716283019655932542975) (= x215 x316) (= (x282 (x236 x267)) x280) (= x215 x241) (>= 1461501637330902918203684832716283019655932542975 x110) (>= 1461501637330902918203684832716283019655932542975 x190) (= (= x7 x296) x305) (>= 1461501637330902918203684832716283019655932542975 x179) (= x110 x103) (= x256 x263) (< x248 3337024914) (<= x296 1461501637330902918203684832716283019655932542975) (= x273 x7)) (and (= x22 x24) (= x31 x315) (= (+ x244 x10) x22) (= x10 x241) (= (x117 x301) x114) (= x22 x78) (= x129 (x105 x5 x226)) (= x31 x71) (= (x209 x255 x12) x5) (= (ite (= 0 x76) 1 0) x226) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x244 x10)) (>= x244 0) (>= x114 0) (= x12 (ite (< 31 x76) 1 0)) (< 0 x124) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x244) (<= 0 x93) (= (x209 1461501637330902918203684832716283019655932542975 x176) x59) (= x213 (x4 (+ x10 x114))) (<= x114 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite (= 1 x15) 1 0) x255) (= (+ x239 x93) x31) (= (x48 (x236 x59) (x98 3) 0) x301) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x239 x93)) (= (x209 x129 x247) x124) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x93))) (and (=> (and (and (and (<= x299 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x299) (= x303 (x209 1461501637330902918203684832716283019655932542975 x296)) (= x245 (= x299 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x299 (x65 x72)) (= (x48 (x236 x7) x106 0) x72) (= x106 (x48 (x236 x303) (x98 4) 0))) (or (and (not x245) (and (= (x209 1461501637330902918203684832716283019655932542975 x296) x79) (not (< x299 x316)) (= x45 (x189 (- x299 x316))))) x245)) (not x305)) x164) (=> x305 x205)))))
(assert (= (or x113 x61) x272))
(assert (x143 x256))
(assert (x143 x284))
(assert (x143 x252))
(assert (=> (<= x267 10000) (= (x236 x267) (x98 x267))))
(assert (x143 x5))
(assert (x165 x247))
(assert (x143 x207))
(assert (x143 x262))
(assert (x143 x281))
(assert (= (x33 (x98 404098525)) 404098525))
(assert (x143 x312))
(assert (= (x98 2514000705) (x236 2514000705)))
(assert (x165 x250))
(assert (x204 x296))
(assert (= x286 (and x219 x175)))
(assert (x143 x214))
(assert (x143 x57))
(assert (x143 x263))
(assert (x143 x169))
(assert (x143 x199))
(assert (= x121 (and x148 (not x58))))
(assert (x120 x5))
(assert (x143 x267))
(assert (x143 x172))
(assert (= (x98 1461501637330902918203684832716283019655932542975) (x236 1461501637330902918203684832716283019655932542975)))
(assert (= (x98 157198259) (x236 157198259)))
(assert (x165 x129))
(assert (x165 x116))
(assert (= 3337024914 (x33 (x98 3337024914))))
(assert (= (x98 826074471) (x236 826074471)))
(assert (x143 x306))
(assert (x143 x90))
(assert (x143 x129))
(assert (x143 x91))
(assert (= (and x80 x311) x193))
(assert (= (x33 (x236 x115)) x115))
(assert (x143 x88))
(assert (= x269 (or (and x221 x314) x97 x96 (and x216 x159) (and (not x266) x99) (and x145 (not x112)) (and x222 x285) x74 (and x235 x138))))
(assert (x143 x49))
(assert (x143 x186))
(assert (x251 x59))
(assert (x143 x111))
(assert (x143 x229))
(assert (= x96 (and x1 x26)))
(assert (x143 x188))
(assert (= (x98 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x236 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x275 x129 x247))
(assert (= (and x222 (not x285)) x136))
(assert (= x94 (=> (and (= x76 x306) (= x244 x9) (= x93 x49) (= 0 x247)) x137)))
(assert (x143 x268))
(assert (x143 x198))
(assert (x143 x213))
(assert (=> (>= 10000 x115) (= (x236 x115) (x98 x115))))
(assert (x143 x192))
(assert (= (x236 2835717307) (x98 2835717307)))
(assert (x143 x276))
(assert (= x107 (and x308 (not x109))))
(assert (x143 x40))
(assert (x165 x104))
(assert (= (and x201 x62) x18))
(assert (=> (>= 10000 x59) (= (x98 x59) (x236 x59))))
(assert (= x128 (=> (and (and (>= x260 0) (= x151 x47) x27 (<= 0 x156) (= x37 x267) (< x227 2376452955) x309 (= x7 x132) (<= 0 x9) (<= 0 x171) (<= x132 1461501637330902918203684832716283019655932542975) (not (= x115 x267)) (= x91 x7) (> x115 0) (= 1000 x279) x101 x92 (= x304 (x238 (x236 x267))) (<= x47 1461501637330902918203684832716283019655932542975) (<= 0 x304) (>= x132 0) (<= x115 1461501637330902918203684832716283019655932542975) (<= x171 1461501637330902918203684832716283019655932542975) (not (= x227 170435703)) (not (> 170435703 x227)) (= (> (x282 (x236 x267)) 0) x309) (< 0 x154) (>= 1461501637330902918203684832716283019655932542975 x267) (= (x238 (x236 x115)) x156) (not (= x227 330252341)) (= 404098525 x227) (= x19 x169) (= x9 x161) (>= 1461501637330902918203684832716283019655932542975 x260) (<= 0 x47) (> 826074471 x227) (= (x282 (x236 x267)) x154) (= x92 (>= x169 1000)) (<= x103 1461501637330902918203684832716283019655932542975) (> x267 0) (<= 0 x103) (= (not (= x91 x37)) x101) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x9) (= x27 (> (x282 (x236 x115)) 0))) (and (and (= x25 x7) (= x173 x161) (= x158 x263) (= x217 1851080549) (not (< x217 1289409798)) (>= x200 0) (= 0 x262) x17 (= x176 x103) (>= x46 0) (>= x9 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x9) (= x158 0) (not (> 826074471 x217)) (= (not (= 0 x173)) x17) (= x40 x126) (= x126 x46) (<= x200 1461501637330902918203684832716283019655932542975) (<= x25 1461501637330902918203684832716283019655932542975) (= x249 (= 0 x9)) (<= 0 x25) (<= x46 1461501637330902918203684832716283019655932542975) (= x19 x239) (< 0 x287) (< x217 2376452955) (= (x282 (x236 x267)) x287) (<= x176 1461501637330902918203684832716283019655932542975) (not (= x217 1289409798))) (or (and (not x249) (and (= x196 (= x39 x9)) (= x10 x194) (= (= 0 x49) x139) (= x194 (div x312 x49)) (= x250 (ite (or x135 x196) 1 0)) (= x104 (ite (not x139) 1 0)) (= x243 (x209 x104 x250)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x49) (= (= 0 x239) x135) (>= x49 0) (= x312 (mod (* x239 x9) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x39 (div x312 x239)) (> x243 0))) (and x249 (= x239 x10))))) x142)))
(assert (x143 x75))
(assert (= (x33 (x98 170435703)) 170435703))
(assert (x143 x183))
(assert (x165 x89))
(assert (x143 x103))
(assert (= (x236 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x98 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x204 x176))
(assert (x143 x149))
(assert (x143 x127))
(assert (x317 x5 x226))
(assert (x143 x56))
(assert (= (x33 (x98 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x143 x176))
(assert (x251 x115))
(assert (=> (>= 10000 x303) (= (x236 x303) (x98 x303))))
(assert (= (x236 1289409798) (x98 1289409798)))
(assert (x143 x289))
(assert (= (x33 (x236 x267)) x267))
(assert (x143 x9))
(assert (x143 x102))
(assert (x143 x191))
(assert (= (x98 3026235284) (x236 3026235284)))
(assert (= (x33 (x98 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (not x128))
(assert (= (x33 (x98 2514000705)) 2514000705))
(assert (x251 x267))
(assert (x143 x296))
(assert (= (x98 1851080549) (x236 1851080549)))
(assert (= (x33 (x98 1851080549)) 1851080549))
(assert (x143 x126))
(assert (x143 x194))
(assert (x120 x226))
(assert (x251 x228))
(assert (x143 x59))
(assert (= (x98 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x236 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x165 x12))
(assert (x143 x55))
(assert (x143 x130))
(assert (= (x33 (x98 3017275065)) 3017275065))
(assert (x143 x287))
(assert (x275 x255 x12))
(assert (x143 x179))
(assert (x143 x45))
(assert (x143 x78))
(assert (= x218 true))
(assert (= (or x30 (and x34 (not x181))) x44))
(assert (= (x236 3121116754) (x98 3121116754)))
(assert (x251 x182))
(assert (= (x33 (x98 3026235284)) 3026235284))
(assert (= 599290589 (x33 (x98 599290589))))
(assert (x143 x84))
(assert (x143 x316))
(assert (= x259 (and x201 (not x62))))
(assert (x143 x19))
(assert (= (x33 (x98 2835717307)) 2835717307))
(assert (x143 x228))
(assert (x143 x246))
(assert (x143 x24))
(assert (=> (>= 10000 x118) (= (x98 x118) (x236 x118))))
(assert (x143 x140))
(assert (= (and (not x80) x311) x202))
(assert (= 330252341 (x33 (x98 330252341))))
(assert (x143 x280))
(assert (= (x33 (x98 1889567281)) 1889567281))
(assert (x143 x47))
(assert (x143 x46))
(assert (=> (>= 10000 x228) (= (x98 x228) (x236 x228))))
(assert (x143 x223))
(assert (= (x236 3337024914) (x98 3337024914)))
(assert (x143 x173))
(assert (x143 x250))
(assert (x143 x161))
(assert (= x303 (x33 (x236 x303))))
(assert (x143 x215))
(assert (= x205 (=> (and (and (<= 0 x24) (= x219 (= 0 x24)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24)) (or (and (and (= (= x315 x284) x212) (= (ite (or x54 x212) 1 0) x89) (= (= x24 0) x302) (= (div x90 x24) x223) (= x54 (= x316 0)) (= (x209 x252 x89) x70) (< 0 x70) (= (div x90 x316) x284) (= x102 x223) (= (mod (* x315 x316) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x90) (<= x315 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x252 (ite (not x302) 1 0)) (<= 0 x315)) (not x219)) (and (= x316 x102) x219))) x170)))
(assert (= (and x305 x160) x13))
(assert (= x164 x205))
(assert (x251 x118))
(assert (= (x33 (x98 117300739)) 117300739))
(assert (= (x33 (x98 3121116754)) 3121116754))
(assert (x251 x7))
(assert (= 2376452955 (x33 (x98 2376452955))))
(assert (= (and x34 x181) x30))
(assert (= x145 (and x99 x266)))
(assert (x143 x25))
(assert (x275 x104 x250))
(assert (x143 x154))
(assert (x275 x268 x116))
(assert (x143 x122))
(assert (= (x98 117300739) (x236 117300739)))
(assert (x165 1461501637330902918203684832716283019655932542975))
(assert (x143 x104))
(assert (= x131 (x33 (x236 x131))))
(assert (= (and (not x249) x218) x85))
(assert (x143 x200))
(assert (= (and (not x219) x175) x50))
(assert (= x7 (x33 (x236 x7))))
(assert (= (x33 (x236 x118)) x118))
(assert (= (x98 3017275065) (x236 3017275065)))
(assert (x143 x184))
(assert (x143 x71))
(assert (x143 x174))
(assert (x143 x16))
(assert (x143 x217))
(assert (=> (<= x7 10000) (= (x236 x7) (x98 x7))))
(assert (x143 x299))
(assert (= x141 (and x148 x58)))
(assert (= 157198259 (x33 (x98 157198259))))
(assert (x143 x10))
(assert (= (x33 (x236 x59)) x59))
(assert (= (x33 (x98 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (and x277 x53) x11))
(assert (x143 x158))
(assert (= (and x1 (not x26)) x159))
(assert (= (x33 (x98 1289409798)) 1289409798))
(assert (= x87 (=> (and (= x181 (= x116 0)) (or x181 (not x181))) x211)))
(assert (x143 x248))
(assert (= (or x150 x259 x141) x34))
(assert (= (and x136 (not x155)) x1))
(assert (x143 x187))
(assert (x143 x39))
(assert (x143 x15))
(assert (x165 x38))
(assert (x143 x79))
(assert (= (x236 2376452955) (x98 2376452955)))
(assert (x143 x38))
(assert (x143 x82))
(assert (x143 x300))
(assert (x143 x227))
(assert (= (and x202 (not x224)) x53))
(assert (x143 x43))
(assert (x143 x151))
(assert (= (and x294 (not x245)) x61))
(assert (x143 x239))
(assert (= (=> (and (= (= x247 0) x52) (or (not x52) x52)) x68) x137))
(assert (x143 x271))
(assert (x143 x167))
(assert (= x201 (and x53 (not x277))))
(assert (=> (>= 10000 x182) (= (x236 x182) (x98 x182))))
(assert (x143 x76))
(assert (x143 x279))
(assert (x143 x303))
(assert (x143 x292))
(assert (= (and x202 x224) x152))
(assert (= x160 (or x14 (and x261 (not x52)))))
(assert (x143 x69))
(assert (x317 x258 x134))
(assert (= x148 (or x286 x50)))
(assert (= (and x245 x294) x113))
(assert (x143 x182))
(assert (= x123 (and x121 (not x230))))
(assert (x143 x304))
(assert (= (and x261 x52) x14))
(assert (= x23 (and x218 x249)))
(assert (x143 x131))
(assert (x143 x162))
(assert (x143 x66))
(assert (x165 x268))
(assert (x143 x134))
(assert (x165 x255))
(assert (x251 x131))
(assert (x143 x89))
(assert (x143 x260))
(assert (x275 x252 x89))
(assert (x143 x273))
(assert (x143 x240))
(assert (x143 x114))
(assert (x143 x119))
(assert (x275 x57 x38))
(assert (= (and (not x305) x160) x294))
(assert (x143 x258))
(assert (x120 x258))
(assert (= (and x159 (not x216)) x138))
(assert (x143 x12))
(assert (x143 x116))
(assert (x143 x265))
(assert (x143 x226))
(assert (x143 x255))
(assert (x143 x81))
(assert (= (x98 170435703) (x236 170435703)))
(assert (x251 x303))
(assert (=> (>= 10000 x131) (= (x98 x131) (x236 x131))))
(assert (= x211 (=> (and (and (= (<= x167 x225) x64) (= x240 x184) (= x225 (* x187 2)) (= 2 x271) (= x19 x167) (= x187 x184)) (and (= (ite (> x172 31) 1 0) x38) (= (x105 x258 x134) x268) (= x240 x102) (= (x209 x57 x38) x258) (= x57 (ite (= x118 1) 1 0)) (> x28 0) (= x134 (ite (= x172 0) 1 0)) (= (x209 x268 x116) x28))) (and x64 (=> (and (= x184 x88) (= (<= x88 x310) x163) (= x19 x162) (= x310 (* 2 x162)) (= x84 2)) x163)))))
(assert (x143 x63))
(assert (= (or x272 x13) x175))
(assert (x143 x247))
(assert (x143 x133))
(assert (= (x236 404098525) (x98 404098525)))
(assert (x143 x197))
(assert (x143 x70))
(assert (x143 x28))
(assert (= x221 (or x23 x85)))
(assert (x143 x244))
(assert (x143 x77))
(assert (= (x98 330252341) (x236 330252341)))
(assert (x143 x118))
(assert (= (and x112 x145) x222))
(assert (= x150 (or x193 x152 x18 x11 x123)))
(assert (= (x98 599290589) (x236 599290589)))
(assert (x143 x132))
(assert (x143 x124))
(check-sat)
(exit)