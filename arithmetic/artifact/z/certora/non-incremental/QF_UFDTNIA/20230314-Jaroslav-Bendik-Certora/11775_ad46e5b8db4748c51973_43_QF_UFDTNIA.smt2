(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x495 0)) (((x158 (x229 x495) (x185 x495) (x143 Int)) (x515 (x558 Int)) (x427 (x142 x495) (x575 Int)))))
(declare-fun x367 () Bool)
(declare-fun x625 () Int)
(declare-fun x18 () Int)
(declare-fun x626 () Int)
(declare-fun x72 () Int)
(declare-fun x266 () Int)
(declare-fun x155 () Int)
(declare-fun x272 () Int)
(declare-fun x269 () x495)
(declare-fun x189 () Int)
(declare-fun x241 () Int)
(declare-fun x106 () Int)
(declare-fun x422 () Bool)
(declare-fun x477 () Bool)
(declare-fun x488 () Bool)
(declare-fun x597 () Int)
(declare-fun x302 () Bool)
(declare-fun x112 () Bool)
(declare-fun x208 () Bool)
(declare-fun x178 () Int)
(declare-fun x242 () Bool)
(declare-fun x346 () Int)
(declare-fun x448 () Int)
(declare-fun x146 () Int)
(declare-fun x548 () Int)
(declare-fun x280 () Int)
(declare-fun x246 () Int)
(declare-fun x591 () Int)
(declare-fun x489 () Bool)
(declare-fun x211 () Bool)
(declare-fun x316 () Int)
(declare-fun x555 () Bool)
(declare-fun x351 () Int)
(declare-fun x500 () Int)
(declare-fun x28 () Int)
(declare-fun x538 () Bool)
(declare-fun x215 (Int) Int)
(declare-fun x253 () Int)
(declare-fun x230 () x495)
(declare-fun x476 () Int)
(declare-fun x33 () Int)
(declare-fun x82 () Int)
(declare-fun x13 () Int)
(declare-fun x414 () Int)
(declare-fun x196 () Int)
(declare-fun x577 () Int)
(declare-fun x475 () Bool)
(declare-fun x78 () Bool)
(declare-fun x627 () Bool)
(declare-fun x283 () Bool)
(declare-fun x47 () Int)
(declare-fun x593 () Bool)
(declare-fun x581 () Int)
(declare-fun x397 () Bool)
(declare-fun x345 () Int)
(declare-fun x148 () Int)
(declare-fun x251 () Bool)
(declare-fun x485 () Bool)
(declare-fun x391 () Int)
(declare-fun x590 () Bool)
(declare-fun x23 () Bool)
(declare-fun x375 () Bool)
(declare-fun x141 () Int)
(declare-fun x317 () Int)
(declare-fun x557 () Int)
(declare-fun x486 () Bool)
(declare-fun x214 () Int)
(declare-fun x438 () Bool)
(declare-fun x127 () Int)
(declare-fun x93 () Int)
(declare-fun x566 () Int)
(declare-fun x606 () x495)
(declare-fun x4 () Bool)
(declare-fun x69 () Bool)
(declare-fun x314 () Int)
(declare-fun x405 () Bool)
(declare-fun x168 () Int)
(declare-fun x46 () Bool)
(declare-fun x374 () Int)
(declare-fun x361 () Int)
(declare-fun x334 () Bool)
(declare-fun x369 () Int)
(declare-fun x100 () Bool)
(declare-fun x17 () Int)
(declare-fun x285 () Bool)
(declare-fun x614 () Int)
(declare-fun x539 () Bool)
(declare-fun x273 () x495)
(declare-fun x564 () Int)
(declare-fun x254 () Int)
(declare-fun x261 () Int)
(declare-fun x149 () Int)
(declare-fun x313 () Bool)
(declare-fun x553 () Int)
(declare-fun x435 () Bool)
(declare-fun x603 (x495) Int)
(declare-fun x578 () Int)
(declare-fun x455 () Bool)
(declare-fun x267 () Int)
(declare-fun x160 () Int)
(declare-fun x377 () Bool)
(declare-fun x331 () Bool)
(declare-fun x440 () Bool)
(declare-fun x410 () Bool)
(declare-fun x583 () Int)
(declare-fun x257 () Int)
(declare-fun x308 () Int)
(declare-fun x1 () Int)
(declare-fun x356 () Bool)
(declare-fun x156 () Int)
(declare-fun x496 () Bool)
(declare-fun x31 () Int)
(declare-fun x598 () Bool)
(declare-fun x594 () Bool)
(declare-fun x278 () Bool)
(declare-fun x568 () Bool)
(declare-fun x337 () Int)
(declare-fun x589 (Int) Int)
(declare-fun x383 () Int)
(declare-fun x457 () Bool)
(declare-fun x362 () x495)
(declare-fun x607 () Int)
(declare-fun x236 () Bool)
(declare-fun x326 () Int)
(declare-fun x274 () Int)
(declare-fun x411 () Bool)
(declare-fun x25 () Int)
(declare-fun x34 () Int)
(declare-fun x259 () Int)
(declare-fun x424 () Int)
(declare-fun x221 () Bool)
(declare-fun x355 () Int)
(declare-fun x459 () Bool)
(declare-fun x570 () Int)
(declare-fun x223 () Int)
(declare-fun x12 () Int)
(declare-fun x412 () Int)
(declare-fun x601 () Int)
(declare-fun x202 () Int)
(declare-fun x111 () Int)
(declare-fun x403 () Int)
(declare-fun x592 () Int)
(declare-fun x453 () Bool)
(declare-fun x296 () Int)
(declare-fun x514 () Int)
(declare-fun x80 () Bool)
(declare-fun x258 () Int)
(declare-fun x119 () Int)
(declare-fun x494 () Int)
(declare-fun x551 () Int)
(declare-fun x550 () Bool)
(declare-fun x613 () Bool)
(declare-fun x426 () Int)
(declare-fun x11 () Bool)
(declare-fun x341 () x495)
(declare-fun x520 () Bool)
(declare-fun x523 (x495) Int)
(declare-fun x183 () Int)
(declare-fun x511 () Int)
(declare-fun x421 (x495) Int)
(declare-fun x49 () Bool)
(declare-fun x75 () Int)
(declare-fun x446 () Bool)
(declare-fun x596 () Int)
(declare-fun x532 () Bool)
(declare-fun x172 () Int)
(declare-fun x154 () Int)
(declare-fun x263 () Int)
(declare-fun x38 () Bool)
(declare-fun x65 () Int)
(declare-fun x359 () Bool)
(declare-fun x479 () Int)
(declare-fun x618 () Bool)
(declare-fun x255 () Bool)
(declare-fun x288 () Int)
(declare-fun x226 () Int)
(declare-fun x339 () x495)
(declare-fun x282 () Bool)
(declare-fun x623 () Bool)
(declare-fun x443 () Int)
(declare-fun x505 () Int)
(declare-fun x29 () Int)
(declare-fun x372 () Int)
(declare-fun x27 () Int)
(declare-fun x524 () Int)
(declare-fun x416 () Int)
(declare-fun x325 () Int)
(declare-fun x171 () Int)
(declare-fun x492 () Int)
(declare-fun x252 () Int)
(declare-fun x563 () Int)
(declare-fun x173 () Int)
(declare-fun x544 () Int)
(declare-fun x309 () Int)
(declare-fun x447 () Bool)
(declare-fun x184 () Int)
(declare-fun x94 () Int)
(declare-fun x323 () Bool)
(declare-fun x5 () Bool)
(declare-fun x481 () Int)
(declare-fun x567 () Int)
(declare-fun x177 () Int)
(declare-fun x454 () Int)
(declare-fun x212 () Int)
(declare-fun x429 () Int)
(declare-fun x535 () Int)
(declare-fun x526 () x495)
(declare-fun x537 () Int)
(declare-fun x116 () Int)
(declare-fun x275 () Int)
(declare-fun x569 () Int)
(declare-fun x92 () Int)
(declare-fun x501 (Int) Int)
(declare-fun x473 () Bool)
(declare-fun x193 () Bool)
(declare-fun x519 () Int)
(declare-fun x190 () Int)
(declare-fun x445 (Int) x495)
(declare-fun x318 () Int)
(declare-fun x55 () Int)
(declare-fun x40 () x495)
(declare-fun x294 () Int)
(declare-fun x3 () Int)
(declare-fun x77 () Int)
(declare-fun x387 () Int)
(declare-fun x545 () Int)
(declare-fun x478 () Int)
(declare-fun x602 () Int)
(declare-fun x503 () Int)
(declare-fun x205 () x495)
(declare-fun x227 (x495) Int)
(declare-fun x299 () Bool)
(declare-fun x287 () Bool)
(declare-fun x525 () Int)
(declare-fun x64 () Int)
(declare-fun x402 () Int)
(declare-fun x39 () Bool)
(declare-fun x265 () Bool)
(declare-fun x595 () Bool)
(declare-fun x161 () Int)
(declare-fun x350 () Int)
(declare-fun x385 () Int)
(declare-fun x480 () Bool)
(declare-fun x456 () Int)
(declare-fun x392 () Int)
(declare-fun x63 () Int)
(declare-fun x45 () Int)
(declare-fun x128 () Int)
(declare-fun x506 () Int)
(declare-fun x298 () Int)
(declare-fun x203 () Int)
(declare-fun x452 () Int)
(declare-fun x319 () Bool)
(declare-fun x490 () Int)
(declare-fun x244 () Int)
(declare-fun x373 () Int)
(declare-fun x370 (Int) Int)
(declare-fun x365 () Int)
(declare-fun x32 () Int)
(declare-fun x268 () Bool)
(declare-fun x437 () Int)
(declare-fun x360 () Int)
(declare-fun x344 () Int)
(declare-fun x131 () Int)
(declare-fun x504 () Int)
(declare-fun x186 () Bool)
(declare-fun x483 () Int)
(declare-fun x635 () Int)
(declare-fun x321 () Int)
(declare-fun x99 () Int)
(declare-fun x322 () Int)
(declare-fun x469 () Bool)
(declare-fun x381 () Int)
(declare-fun x30 () Int)
(declare-fun x295 () Int)
(declare-fun x130 () Int)
(declare-fun x413 () Int)
(declare-fun x107 () Bool)
(declare-fun x234 () Bool)
(declare-fun x406 () Int)
(declare-fun x332 () Bool)
(declare-fun x617 () Int)
(declare-fun x542 () Bool)
(declare-fun x311 () Int)
(declare-fun x135 () Int)
(declare-fun x220 () x495)
(declare-fun x428 (Int) Int)
(declare-fun x394 () Int)
(declare-fun x115 () Int)
(declare-fun x527 () Bool)
(declare-fun x218 () Bool)
(declare-fun x117 () Int)
(declare-fun x54 () Int)
(declare-fun x436 () Bool)
(declare-fun x97 () Int)
(declare-fun x499 () Bool)
(declare-fun x628 (Int) Int)
(declare-fun x529 () Int)
(declare-fun x466 () Bool)
(declare-fun x305 () Int)
(declare-fun x450 () Bool)
(declare-fun x540 () Bool)
(declare-fun x409 (Int) Int)
(declare-fun x546 () Int)
(declare-fun x441 () Int)
(declare-fun x68 () Int)
(declare-fun x53 () Int)
(declare-fun x507 () Int)
(declare-fun x559 () Int)
(declare-fun x510 () Int)
(declare-fun x404 () x495)
(declare-fun x556 () Int)
(declare-fun x166 () Int)
(declare-fun x572 () Bool)
(declare-fun x232 () Bool)
(declare-fun x310 () Int)
(declare-fun x562 () Bool)
(declare-fun x366 () Int)
(declare-fun x19 () Int)
(declare-fun x213 () Int)
(declare-fun x522 () Bool)
(declare-fun x400 () Int)
(declare-fun x15 () Int)
(declare-fun x371 () Int)
(declare-fun x174 () Int)
(declare-fun x169 () Int)
(declare-fun x43 () Bool)
(declare-fun x201 () Bool)
(declare-fun x357 () Int)
(declare-fun x101 () Int)
(declare-fun x22 () Int)
(declare-fun x79 () Bool)
(declare-fun x121 () Bool)
(declare-fun x216 () Bool)
(declare-fun x139 () Int)
(declare-fun x231 () Bool)
(declare-fun x153 () Bool)
(declare-fun x140 () Int)
(declare-fun x600 () Int)
(declare-fun x286 () Int)
(declare-fun x418 () Int)
(declare-fun x560 () Bool)
(declare-fun x530 () Bool)
(declare-fun x565 () Int)
(declare-fun x518 () Int)
(declare-fun x444 () x495)
(declare-fun x399 () Bool)
(declare-fun x110 () Int)
(declare-fun x247 () Int)
(declare-fun x224 () Int)
(declare-fun x50 () Bool)
(declare-fun x348 () Int)
(declare-fun x35 () Bool)
(declare-fun x612 () Int)
(declare-fun x498 () Int)
(declare-fun x264 () Int)
(declare-fun x74 () Int)
(declare-fun x59 () Int)
(declare-fun x315 () Int)
(declare-fun x329 () Bool)
(declare-fun x307 () Bool)
(declare-fun x42 () Bool)
(declare-fun x159 () Bool)
(declare-fun x210 () x495)
(declare-fun x587 () Int)
(declare-fun x124 () Int)
(declare-fun x237 () Bool)
(declare-fun x420 () Bool)
(declare-fun x48 () Bool)
(declare-fun x482 () Int)
(declare-fun x328 () Int)
(declare-fun x113 () Int)
(declare-fun x458 () Int)
(declare-fun x460 () Int)
(declare-fun x554 () x495)
(declare-fun x187 () Int)
(declare-fun x180 () Int)
(declare-fun x407 () Int)
(declare-fun x604 () Int)
(declare-fun x338 () Int)
(declare-fun x206 () Int)
(declare-fun x120 () x495)
(declare-fun x181 () x495)
(declare-fun x393 () Int)
(declare-fun x633 () Bool)
(declare-fun x133 () Bool)
(declare-fun x493 () Bool)
(declare-fun x571 () Int)
(declare-fun x207 () Int)
(declare-fun x620 () Bool)
(declare-fun x611 () Int)
(declare-fun x304 () Bool)
(declare-fun x91 () Int)
(declare-fun x150 () x495)
(declare-fun x108 () Int)
(declare-fun x378 () Int)
(declare-fun x151 () Int)
(declare-fun x145 () Int)
(declare-fun x67 () Int)
(declare-fun x389 () Int)
(declare-fun x152 () Int)
(declare-fun x245 () Int)
(declare-fun x62 () Int)
(declare-fun x250 () Bool)
(declare-fun x430 () Int)
(declare-fun x528 () Bool)
(declare-fun x102 () Bool)
(declare-fun x24 () x495)
(declare-fun x395 () Int)
(declare-fun x76 () Bool)
(declare-fun x396 () Int)
(declare-fun x349 () Int)
(declare-fun x87 () Int)
(declare-fun x386 () Int)
(declare-fun x354 () Int)
(declare-fun x98 () Int)
(declare-fun x573 () Int)
(declare-fun x20 () Int)
(declare-fun x66 () Bool)
(declare-fun x439 () Bool)
(declare-fun x312 () Int)
(declare-fun x534 () Int)
(declare-fun x330 () Int)
(declare-fun x104 (x495) Int)
(declare-fun x586 () Int)
(declare-fun x136 () Int)
(declare-fun x533 () Int)
(declare-fun x84 () Int)
(declare-fun x398 () Int)
(declare-fun x352 () Int)
(declare-fun x70 () Int)
(declare-fun x487 () Bool)
(declare-fun x497 () x495)
(declare-fun x472 () x495)
(declare-fun x380 () Int)
(declare-fun x364 () Int)
(declare-fun x324 () Bool)
(declare-fun x541 () Bool)
(declare-fun x194 () x495)
(declare-fun x451 () Bool)
(declare-fun x103 () Int)
(declare-fun x199 () Bool)
(declare-fun x342 () Int)
(declare-fun x306 () x495)
(declare-fun x609 () Int)
(declare-fun x579 () Int)
(declare-fun x521 () x495)
(declare-fun x301 () Int)
(declare-fun x335 () Bool)
(declare-fun x574 () Int)
(declare-fun x182 () Int)
(declare-fun x147 () Int)
(declare-fun x122 () Bool)
(declare-fun x464 () Int)
(declare-fun x260 () Int)
(declare-fun x256 (x495) Int)
(declare-fun x536 () Int)
(declare-fun x52 () Int)
(declare-fun x468 () Int)
(declare-fun x191 () Bool)
(declare-fun x89 () Int)
(declare-fun x327 () Int)
(declare-fun x51 () Bool)
(declare-fun x303 () x495)
(declare-fun x619 () Bool)
(declare-fun x249 () Bool)
(declare-fun x358 () Bool)
(declare-fun x209 () Int)
(declare-fun x123 () Int)
(declare-fun x239 () Bool)
(declare-fun x197 () Int)
(declare-fun x222 () Int)
(declare-fun x109 () Int)
(declare-fun x552 () Int)
(declare-fun x432 () Int)
(declare-fun x347 () Bool)
(declare-fun x290 () Int)
(declare-fun x388 () Int)
(declare-fun x164 () Bool)
(declare-fun x408 () Int)
(declare-fun x382 () Int)
(declare-fun x561 () Int)
(declare-fun x442 () Int)
(declare-fun x610 () Bool)
(declare-fun x277 () Int)
(declare-fun x376 () Int)
(declare-fun x129 () Bool)
(declare-fun x138 () Int)
(declare-fun x484 () Int)
(declare-fun x549 () Int)
(declare-fun x58 () Int)
(declare-fun x615 () Bool)
(declare-fun x632 () Int)
(declare-fun x293 () Int)
(declare-fun x629 () Bool)
(declare-fun x167 () Int)
(declare-fun x56 () Int)
(declare-fun x6 () Bool)
(declare-fun x90 () Int)
(declare-fun x434 () Int)
(declare-fun x126 () Int)
(declare-fun x281 () Bool)
(declare-fun x73 () x495)
(declare-fun x289 () Bool)
(declare-fun x157 () Int)
(declare-fun x105 () Int)
(declare-fun x248 () Bool)
(declare-fun x423 () Int)
(declare-fun x512 () Int)
(declare-fun x219 () Int)
(declare-fun x37 () Int)
(declare-fun x60 () Int)
(declare-fun x291 () Int)
(declare-fun x88 () Int)
(declare-fun x390 () x495)
(declare-fun x508 () Int)
(declare-fun x225 () Int)
(declare-fun x176 () Int)
(declare-fun x125 () Int)
(declare-fun x368 () Bool)
(declare-fun x57 () Int)
(declare-fun x465 () Int)
(declare-fun x132 () Int)
(declare-fun x144 () Bool)
(declare-fun x165 () Int)
(declare-fun x333 () Int)
(declare-fun x240 () Int)
(declare-fun x163 () Int)
(declare-fun x297 (Int) Int)
(declare-fun x384 () Bool)
(declare-fun x582 () Bool)
(declare-fun x585 () Int)
(declare-fun x467 () Int)
(declare-fun x95 () Int)
(declare-fun x276 () Int)
(declare-fun x114 () Int)
(declare-fun x343 () Int)
(declare-fun x353 () Int)
(declare-fun x580 () Int)
(declare-fun x86 () Int)
(declare-fun x415 () Bool)
(declare-fun x233 () Bool)
(declare-fun x417 () Bool)
(declare-fun x26 () Int)
(declare-fun x433 () Int)
(declare-fun x41 () Int)
(declare-fun x8 (Int Int) Int)
(declare-fun x630 () Bool)
(declare-fun x621 () Bool)
(declare-fun x517 () Int)
(declare-fun x502 () Int)
(declare-fun x379 () Int)
(declare-fun x71 () Bool)
(declare-fun x622 () Int)
(declare-fun x134 () Bool)
(declare-fun x200 () Bool)
(declare-fun x9 () Int)
(declare-fun x340 () Bool)
(declare-fun x21 () Int)
(declare-fun x188 () Int)
(declare-fun x118 () Bool)
(define-fun x195 ((x495 x495) (x547 Int)) x495 (ite ((_ is x427) x495) (x427 (x142 x495) (+ x547 (x575 x495))) (ite ((_ is x158) x495) (x158 (x229 x495) (x185 x495) (+ x547 (x143 x495))) (x515 (+ (x558 x495) x547)))))
(define-fun x179 ((x170 Int)) Int (ite (and (>= x170 0) (< x170 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x170 (- x170 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x624 ((x170 Int)) Int (ite (and (< x170 0) (>= x170 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x170) x170))
(define-fun x284 ((x235 Int)) Bool (and (<= 0 x235) (< x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x491 ((x235 Int)) Bool (and (= (x8 x235 115792089237316195423570985008687907853269984665640564039457584007913129639935) x235) (= (x8 115792089237316195423570985008687907853269984665640564039457584007913129639935 x235) x235)))
(define-fun x599 ((x235 Int)) Bool (and (= (x8 x235 0) 0) (= (x8 0 x235) 0)))
(define-fun x85 ((x235 Int)) Bool (= x235 (x8 x235 x235)))
(define-fun x228 ((x235 Int)) Bool (and (x85 x235) (x491 x235) (x599 x235)))
(define-fun x83 ((x235 Int) (x576 Int)) Bool (= (x8 x235 x576) (x8 x576 x235)))
(define-fun x516 ((x235 Int) (x576 Int)) Bool (and (=> (>= x576 0) (<= (x8 x235 x576) x576)) (<= 0 (x8 x235 x576)) (=> (>= x235 0) (>= x235 (x8 x235 x576)))))
(define-fun x271 ((x235 Int) (x576 Int)) Bool (and (x516 x235 x576) (x83 x235 x576)))
(define-fun x462 ((x235 Int)) Bool (= (+ (x8 x235 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x235 32)) (mod x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x419 ((x235 Int)) Bool (and (x462 x235) (x271 x235 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x279 ((x235 Int)) Bool (= (x8 x235 1461501637330902918203684832716283019655932542975) (mod x235 1461501637330902918203684832716283019655932542976)))
(define-fun x425 ((x235 Int)) Bool (and (x271 x235 1461501637330902918203684832716283019655932542975) (x279 x235)))
(define-fun x588 ((x471 Int)) Int (x215 x471))
(define-fun x605 ((x471 x495)) Int (ite (= x471 x521) x366 (x523 x471)))
(define-fun x363 ((x471 x495)) Int (ite (= x471 x606) x202 (x605 x471)))
(define-fun x401 ((x471 Int)) Int (ite (= x471 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x589 x471)))
(define-fun x463 ((x471 Int)) Int (ite (= x471 132) x258 (x401 x471)))
(define-fun x198 ((x471 Int)) Int (ite (= 0 x471) x597 (x628 x471)))
(define-fun x217 ((x471 Int)) Int (ite (= 128 x471) x597 (x463 x471)))
(define-fun x616 ((x471 Int)) Int (ite (= x471 0) x312 (x628 x471)))
(define-fun x531 ((x471 Int)) Int (ite (= x471 128) x312 (x463 x471)))
(define-fun x2 ((x471 Int)) Int (ite (= x471 0) x456 (x628 x471)))
(define-fun x300 ((x471 Int)) Int (ite (= x471 128) x456 (x463 x471)))
(define-fun x608 ((x471 Int)) Int (ite x417 (ite x522 (x463 x471) (x217 x471)) (ite x134 (ite x232 (x463 x471) (x531 x471)) (ite x447 (x463 x471) (x300 x471)))))
(define-fun x10 ((x471 Int)) Int (ite (= x213 x471) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x608 x471)))
(define-fun x162 ((x471 Int)) Int (ite (= x448 x471) x258 (x10 x471)))
(define-fun x192 ((x471 Int)) Int (ite (= x471 0) x177 (x409 x471)))
(define-fun x61 ((x471 Int)) Int (ite (= x213 x471) x177 (x162 x471)))
(define-fun x543 ((x471 Int)) Int (ite (= x471 0) x131 (x409 x471)))
(define-fun x449 ((x471 Int)) Int (ite (= x213 x471) x131 (x162 x471)))
(define-fun x243 ((x471 Int)) Int (ite (= x471 0) x240 (x409 x471)))
(define-fun x14 ((x471 Int)) Int (ite (= x471 x213) x240 (x162 x471)))
(define-fun x631 ((x471 Int)) Int (ite (= x471 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x501 x471)))
(define-fun x16 ((x471 Int)) Int (ite (= x471 132) x258 (x631 x471)))
(define-fun x634 ((x471 Int)) Int (ite (= 128 x471) x369 (x16 x471)))
(define-fun x270 ((x471 Int)) Int (ite (= x471 128) x290 (x16 x471)))
(define-fun x431 ((x471 Int)) Int (ite (= 128 x471) x25 (x16 x471)))
(define-fun x509 ((x471 Int)) Int (ite x100 (ite x121 (x16 x471) (x634 x471)) (ite x629 (ite x281 (x16 x471) (x270 x471)) (ite x76 (x16 x471) (x431 x471)))))
(define-fun x320 ((x471 Int)) Int (ite (= x434 x471) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x509 x471)))
(define-fun x470 ((x471 Int)) Int (ite (= x379 x471) x258 (x320 x471)))
(define-fun x513 ((x471 Int)) Int (ite (= 0 x471) x130 (x370 x471)))
(define-fun x44 ((x471 Int)) Int (ite (= x434 x471) x130 (x470 x471)))
(define-fun x81 ((x471 x495)) Int (ite (= x220 x471) x494 (x523 x471)))
(define-fun x292 ((x471 x495)) Int (ite (= x444 x471) x288 (x81 x471)))
(define-fun x96 ((x471 Int)) Int (ite (= x471 0) x161 (x370 x471)))
(define-fun x584 ((x471 Int)) Int (ite (= x471 x434) x161 (x470 x471)))
(define-fun x461 ((x471 Int)) Int (ite (= x471 0) x101 (x370 x471)))
(define-fun x238 ((x471 Int)) Int (ite (= x434 x471) x101 (x470 x471)))
(define-fun x204 ((x471 Int)) Int (ite x71 (ite x582 (x162 x471) (x61 x471)) (ite x532 (ite x6 (x162 x471) (x449 x471)) (ite x410 (x162 x471) (x14 x471)))))
(define-fun x262 ((x471 x495)) Int (ite (= x471 x526) x604 (x421 x471)))
(define-fun x175 ((x471 Int)) Int (ite (= x471 0) x369 (x297 x471)))
(define-fun x137 ((x471 Int)) Int (ite (= x471 0) x290 (x297 x471)))
(define-fun x7 ((x471 Int)) Int (ite (= 0 x471) x25 (x297 x471)))
(define-fun x36 ((x471 Int)) Int (ite x193 (ite x335 (x470 x471) (x44 x471)) (ite x231 (ite x377 (x470 x471) (x584 x471)) (ite x112 (x470 x471) (x238 x471)))))
(define-fun x336 ((x471 x495)) Int (ite (= x471 x194) x116 (x421 x471)))
(define-fun x474 ((x235 Int)) Bool (=> (and (not (= 3524403367 x235)) (> x235 10000) (not (= x235 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x235 2569101039)) (not (= 961581905 x235)) (not (= 2757214935 x235)) (not (= x235 157198259)) (not (= x235 1889567281)) (not (= x235 1461501637330902918203684832716283019655932542975)) (not (= x235 50942633119752846454219349998365661925608737367104304655302372697894809501696)) (not (= x235 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 826074471 x235)) (not (= 1989257563 x235)) (not (= x235 1952775229)) (not (= 1784838210 x235)) (not (= x235 2430363622)) (not (= x235 404098525)) (not (= 1461501637330902918203684832716283019655932542976 x235)) (not (= x235 2514000705)) (not (= 234755713 x235)) (not (= 2835717307 x235))) (not ((_ is x515) (x445 x235)))))
(assert (x284 x622))
(assert (x284 x206))
(assert (x284 x119))
(assert (x284 x276))
(assert (x284 x394))
(assert (= x49 (and x368 x191)))
(assert (= x48 (or x447 x538)))
(assert (x284 x82))
(assert (=> (>= 10000 x90) (= (x445 x90) (x515 x90))))
(assert (x284 x165))
(assert (x284 x617))
(assert (= (and x144 x334) x630))
(assert (x474 x315))
(assert (= (x445 1461501637330902918203684832716283019655932542976) (x515 1461501637330902918203684832716283019655932542976)))
(assert (= (and x218 x469) x440))
(assert (= 1461501637330902918203684832716283019655932542975 (x256 (x515 1461501637330902918203684832716283019655932542975))))
(assert (x284 x573))
(assert (x284 x596))
(assert (= x79 (=> (and (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x330) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x330) true) (> 32 x330)))) (= (x179 (+ 128 x535)) x213) (= x152 (x179 (+ x330 31))) (= (x608 128) x551) (> 1461501637330902918203684832716283019655932542976 x381) (>= x381 0) (= (= x381 x561) x399) (= x317 (x179 (+ x448 32))) (>= 1461501637330902918203684832716283019655932542975 x381) (= (x8 115792089237316195423570985008687907853269984665640564039457584007913129639904 x152) x535) (= (x624 (- x317 x213)) x338) (= (x603 (x445 x381)) x386) (not (= x65 0)) (not (= 0 x386)) (= x448 (x179 (+ 4 x213)))) (and (=> (and (= x480 (= x381 x536)) (not x399)) (and (=> (and x480 (and (= x559 1889567281) (= x77 x338) (= x77 36) (not (< x77 4)) (= x258 x611) (= (or (and (< x437 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x437))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x437)) x620) (= (x603 (x445 x536)) x567) (= x437 (x624 (- x77 4))) (not (> 826074471 x559)) (not (= x559 826074471)) (= x350 50942633119752846454219349998365661925608737367104304655302372697894809501696) (> x567 0))) (and (=> x620 x572) (=> (and (not x620) (and (= (= x611 x258) x469) (= x180 x611))) (and (=> (not x469) x572) (=> (and (and (= x273 (x158 (x445 x611) (x515 1) 0)) (>= x131 0) (= 1 x138) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x131) (= x131 (x363 x273)) (= 32 x557)) x469) x122))))) (=> (and (not x480) (and (and x164 (and (= x338 x291) (= (or (and (> 32 x587) (= true (<= x587 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x587)) x234) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x294) (= 36 x291) (< 0 x222) (= x587 (x624 (- x291 4))) (not (> 1889567281 x349)) (= x349 1889567281) (= (x603 (x445 x258)) x222) (= x258 x344) (not (> 4 x291)) (< x349 2569101039))) (= x164 (= x258 x381)))) (and (=> x234 x527) (=> (and (not x234) (and (= x69 (= x344 x258)) (= x86 x344))) (and (=> (not x69) x527) (=> (and x69 (and (= 1 x482) (<= 0 x240) (= (x421 x24) x240) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x240) (= 32 x545) (= x24 (x158 (x445 x344) (x515 0) 0)))) x78))))))) (=> (and x399 (and (> x157 0) (= (x624 (- x333 4)) x21) (not (> 4 x333)) (not (< x504 826074471)) (= (or (> x21 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x21) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x21) true))) x255) (not (= 826074471 x504)) (= x333 x338) (= x157 (x603 (x445 x561))) (= 1889567281 x504) (= x34 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x258 x119) (= x333 36))) (and (=> (and (not x255) (and (= x119 x626) (= (= x119 x258) x265))) (and (=> (and (and (= 32 x56) (= (x158 (x445 x119) (x515 1) 0) x404) (>= x177 0) (= x177 (x227 x404)) (= 1 x111) (<= x177 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x265) x485) (=> (not x265) x590))) (=> x255 x590)))))))
(assert (x284 x252))
(assert (= x76 (or (and (not x621) x356) (and x49 x415))))
(assert (x284 x388))
(assert (x284 x364))
(assert (= (x515 3524403367) (x445 3524403367)))
(assert (x284 x29))
(assert (x284 x609))
(assert (= x134 (or x232 x453)))
(assert (x284 x166))
(assert (= x289 (and x399 x42)))
(assert (x284 x376))
(assert (x284 x383))
(assert (x284 x454))
(assert (x284 x355))
(assert (x284 x412))
(assert (x284 x174))
(assert (= (x256 (x445 x90)) x90))
(assert (x284 x197))
(assert (= (=> (and (= x574 x393) (= 0 x3)) x598) x107))
(assert (x284 x111))
(assert (x284 x452))
(assert (x284 x93))
(assert (x284 x37))
(assert (x284 x101))
(assert (x284 x548))
(assert (x284 x124))
(assert (= x4 (=> (and (= x160 x514) (= x92 x45)) x623)))
(assert (= x66 (and (not x480) x595)))
(assert (x474 x344))
(assert (x284 x504))
(assert (x284 x272))
(assert (x284 x607))
(assert (x284 x612))
(assert (= x201 (and x283 x69)))
(assert (= (=> (and (= x17 x88) (= x389 0)) x486) x439))
(assert (= x316 (x256 (x445 x316))))
(assert (= x536 (x256 (x445 x536))))
(assert (x284 x546))
(assert (= x436 (and x164 x66)))
(assert (= x231 (or x377 x438)))
(assert (= (or x304 x335) x193))
(assert (x284 x116))
(assert (x284 x263))
(assert (x284 x140))
(assert (x284 x74))
(assert (x284 x482))
(assert (x284 x414))
(assert (x284 x305))
(assert (x284 x318))
(assert (x284 x103))
(assert (=> (<= x381 10000) (= (x515 x381) (x445 x381))))
(assert (x284 x458))
(assert (x284 x338))
(assert (x284 x167))
(assert (= (x256 (x445 x510)) x510))
(assert (x284 x222))
(assert (x284 x87))
(assert (x474 x57))
(assert (x284 x379))
(assert (= x538 (and x475 x329)))
(assert (= x477 (and x307 x249)))
(assert (= 404098525 (x256 (x515 404098525))))
(assert (x419 x63))
(assert (x284 x288))
(assert (x284 x3))
(assert (= (=> (and (= x65 x534) (= x174 x330)) x79) x251))
(assert (x284 x20))
(assert (x284 x180))
(assert (x284 x95))
(assert (x284 x155))
(assert (= (and x555 (not x80)) x568))
(assert (= x23 (and (not x236) x477)))
(assert (x284 x18))
(assert (x284 x145))
(assert (x284 x591))
(assert (= (and (not x399) x42) x595))
(assert (= (=> (and (= x68 x56) (= x111 x346)) x347) x485))
(assert (x284 x402))
(assert (= (and x568 x242) x496))
(assert (x284 x360))
(assert (x284 x511))
(assert (x284 x183))
(assert (x284 x106))
(assert (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x256 (x515 50942633119752846454219349998365661925608737367104304655302372697894809501696))))
(assert (x284 x108))
(assert (x284 x245))
(assert (= (or x76 x340) x208))
(assert (x284 x147))
(assert (x474 x33))
(assert (x284 x322))
(assert (x284 x172))
(assert (= (and x265 x239) x285))
(assert (x284 x346))
(assert (= (x256 (x445 x398)) x398))
(assert (= (x515 2430363622) (x445 2430363622)))
(assert (x425 x108))
(assert (x284 x21))
(assert (x284 x244))
(assert (x284 x535))
(assert (x284 x326))
(assert (x284 x169))
(assert (x284 x141))
(assert (x284 x382))
(assert (x284 x385))
(assert (= (or x493 x112) x446))
(assert (x284 x626))
(assert (x284 x508))
(assert (= (x256 (x445 x611)) x611))
(assert (= x417 (or x496 x522)))
(assert (= x191 (and x334 (not x144))))
(assert (x284 x99))
(assert (= (and (not x593) x630) x221))
(assert (x284 x90))
(assert (x284 x557))
(assert (= x435 (and (not x249) x307)))
(assert (= (x256 (x515 1784838210)) 1784838210))
(assert (x284 x113))
(assert (x284 x17))
(assert (= x218 (and (not x620) x46)))
(assert (x284 x514))
(assert (x284 x25))
(assert (=> (>= 10000 x561) (= (x445 x561) (x515 x561))))
(assert (x284 x403))
(assert (x284 x213))
(assert (x284 x350))
(assert (x284 x563))
(assert (x284 x536))
(assert (x284 x333))
(assert (x228 x108))
(assert (x284 x635))
(assert (x284 x570))
(assert (x284 x97))
(assert (x284 x311))
(assert (= x522 (or (and x80 x555) (and x568 (not x242)))))
(assert (x284 x529))
(assert (x284 x352))
(assert (= x612 (x256 (x445 x612))))
(assert (= x121 (or (and x615 x153) (and (not x282) x237))))
(assert (= (=> (and (and (= x67 x13) (= (* x565 x383) x578) (= x116 (+ x254 x187)) (= x578 x592) (= x533 (div x432 x563)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x295 x533)) (not (= x533 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x173) (= x295 x187) (not (< x383 x443)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x565 x383)) (= (x421 x194) x173) (>= x13 0) (= x365 x533) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x13) (not (= x45 0)) (= x97 x533) (< 0 x563) (= x295 (x421 x194)) (not (< x565 x378)) (<= 0 x173) (= (x158 (x445 x57) (x515 0) 0) x194) (= x432 (* x253 x13)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x533 x13)) (<= 0 x13) (not (= 0 x13)) (= (x624 (- x592 x563)) x253) (not (or (and (> 32 x514) (= (<= x514 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x514 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 0 x57)) (<= 0 x563) (= (> x383 115792089237316195423570985008687907853269984665640564039457584007913129639935) x405) (not x405) (>= x295 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x253 x13)) (= x565 (x36 x434)) (not (> x563 x592)) (<= x295 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x533 x254) (<= x563 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x103 (+ x365 x67)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x13)) (and (and (= x274 x408) (= x566 x117) (= (<= x408 x117) x473) (= x392 x274)) (and (= x32 (x603 (x445 x258))) (= x424 x316) (= (x336 x472) x596) (< 0 x32) (= x596 x392) (= x418 1889567281) (<= x316 1461501637330902918203684832716283019655932542975) (= x472 (x158 (x445 x316) (x515 0) 0)) (<= x596 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (> 1889567281 x418)) (= x97 x58) (> 2569101039 x418) (<= 0 x596)))) x473) x623))
(assert (x284 x148))
(assert (=> (<= x609 10000) (= (x445 x609) (x515 x609))))
(assert (x284 x34))
(assert (x284 x585))
(assert (=> (<= x33 10000) (= (x445 x33) (x515 x33))))
(assert (x284 x581))
(assert (x284 x226))
(assert (= (x256 (x515 2514000705)) 2514000705))
(assert (= (x256 (x445 x87)) x87))
(assert (= (x445 1989257563) (x515 1989257563)))
(assert (x284 x92))
(assert (= (x515 961581905) (x445 961581905)))
(assert (x284 x77))
(assert (= (and x159 x435) x319))
(assert (= (x445 2514000705) (x515 2514000705)))
(assert (x284 x614))
(assert (= (or (and x289 x255) (and x239 (not x265))) x582))
(assert (x474 x611))
(assert (x284 x190))
(assert (x284 x294))
(assert (x284 x22))
(assert (= x561 (x256 (x445 x561))))
(assert (x284 x583))
(assert (x284 x330))
(assert (= 1461501637330902918203684832716283019655932542976 (x256 (x515 1461501637330902918203684832716283019655932542976))))
(assert (x284 x517))
(assert (x284 x308))
(assert (x284 x184))
(assert (= x78 (=> (and (= x482 x346) (= x545 x68)) x347)))
(assert (x284 x378))
(assert (x474 x398))
(assert (=> (>= 10000 x442) (= (x515 x442) (x445 x442))))
(assert (= (=> (and (and (and (and (> 2569101039 x391) (= x541 (= 1000 x151)) (= x128 (x603 (x445 x258))) x540 (> x128 0) (= 1000 x296) (= x125 x564) (= 0 x525) (<= x125 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x212 x151) (= (x158 (x515 0) (x515 0) 0) x269) (= x391 1889567281) (not (> 1889567281 x391)) (<= 0 x125) (= x540 (or x541 x129)) (= (x421 x269) x125)) (and (and (= (x603 (x445 x258)) x519) (> 2569101039 x345) (= x326 x625) (= x345 1889567281) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x355) (= x564 x275) (not (> 1889567281 x345)) (= x355 x579) (= x355 (x421 x303)) (>= x355 0) (< 0 x519) (<= x326 1461501637330902918203684832716283019655932542975) (= (x158 (x445 x326) (x515 0) 0) x303)) (and (and (and (and (and (= x19 404098525) (not (= x19 234755713)) (= (x603 (x445 x258)) x518) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x13) (= x169 x9) (> x518 0) (= x13 x37) (< x19 826074471) (>= x13 0) (= (= x169 x280) x211) (< x19 1889567281) x211 (not (= 157198259 x19))) (and (and (and (and (not (> 1889567281 x176)) (= x206 0) (>= x378 0) (> x357 0) (= x357 (x603 (x445 x258))) (= x378 x348) (= x51 (= x503 0)) (= x617 x503) (not (= 1952775229 x176)) (<= x378 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1989257563 x176)) (> 2569101039 x176) (not (= x176 1889567281)) (= 2430363622 x176)) (and (and (< 0 x168) (>= x537 0) (= (x523 x390) x276) (= x376 x258) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x22 x537))) (= x580 1) (= x313 (and x487 x562)) (= x305 0) (<= 0 x263) (<= 0 x54) (not (= x190 1889567281)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x537) (= x168 (x603 (x445 x536))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x22 x537)) (= (< x414 x529) x520) (= x366 (x624 (- x276 x22))) (= x537 x371) (= (x158 (x445 x87) (x515 1) 0) x390) (<= x403 1461501637330902918203684832716283019655932542975) (not (= 826074471 x190)) (= x606 (x158 (x445 x258) (x515 1) 0)) (<= x54 1461501637330902918203684832716283019655932542975) (= x306 (x158 (x445 x258) (x515 1) 0)) (= x374 x468) x397 (= x348 x155) (not (> x22 x276)) (= x54 x374) (<= 0 x403) (= (x605 x306) x537) (= (x158 (x445 x87) (x515 1) 0) x521) (= x414 x585) (= 0 x591) (= 2835717307 x190) (<= x263 1461501637330902918203684832716283019655932542975) (= x529 x84) (>= x276 0) (not (= x190 2514000705)) (= x202 (+ x371 x460)) (= (not (= x322 x376)) x397) x520 (= x633 (= 0 x155)) (= x22 x84) (not (> 826074471 x190)) (= x487 (= x633 x51)) x313 (= x305 x635) (= x322 x424) (<= x276 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x460 x22) (>= 1461501637330902918203684832716283019655932542975 x258) (not (< x276 x22)) (= x87 x403)) (and (<= x135 1461501637330902918203684832716283019655932542975) (<= x52 1461501637330902918203684832716283019655932542975) (<= x378 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x140) (not (< x99 826074471)) (<= 0 x140) (not (= x99 961581905)) (> 1461501637330902918203684832716283019655932542976 x52) (= x424 x108) (= 1784838210 x99) (= x287 (= x52 x561)) (< x99 1889567281) (= x127 x140) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x443) (= (x603 (x445 x258)) x70) (= x26 x154) (<= 0 x311) (<= x108 1461501637330902918203684832716283019655932542975) (not (= 826074471 x99)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x507) (= 0 x154) (<= 0 x135) (= x182 x400) (= 128 x189) (> x70 0) (<= 0 x443) (<= 0 x507) (= x400 x311) (>= x378 0) (= x507 1) (>= 1461501637330902918203684832716283019655932542975 x311) (not (= 0 x197)) (>= x52 0) (= x197 (x603 (x445 x52)))))) (and (= x617 x13) (= x89 x321) (< x41 1889567281) (< 0 x423) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x41 826074471) (= 0 x272) (not (= x41 157198259)) (= 404098525 x41) (= (x603 (x445 x258)) x423) (= (= x367 x200) x562) (not (= x41 234755713)) (>= x13 0) (= (= 0 x89) x200))) (and (<= 0 x443) (<= x443 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x139) (= x367 (= x406 0)) (= x139 (x603 (x445 x258))) (= x406 x37) (not (< x328 1889567281)) (not (> 2569101039 x328)) (= x321 x443) (= 0 x267) (= 2569101039 x328)))) (and (= x561 x280) x560 (> 1461501637330902918203684832716283019655932542976 x381) (= x325 x110) (not (> 1889567281 x53)) (<= 0 x381) (> x502 0) (= x53 3524403367) (= x560 (= x110 x165)) (not (= 2757214935 x53)) (>= 1461501637330902918203684832716283019655932542975 x381) (= x381 x9) (not (= x53 2835717307)) (not (> 2569101039 x53)) (not (= 2569101039 x53)) (= (x603 (x445 x258)) x502))) (and (= (x603 (x445 x258)) x252) (<= x52 1461501637330902918203684832716283019655932542975) (= x416 x244) (> 1461501637330902918203684832716283019655932542976 x52) (< 0 x252) x528 (= x536 x165) (not (= 157198259 x72)) (<= 0 x52) (= 234755713 x72) (= (>= x416 x506) x528) (< x72 1889567281) (> 826074471 x72) (= x52 x325))) (and (> 826074471 x622) (= x506 (+ x275 x484)) (not (= x622 234755713)) (= x244 x13) (= 404098525 x622) (= x484 x579) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x603 (x445 x258)) x82) (< 0 x82) (< x622 1889567281) (not (= x622 157198259)) (<= 0 x13))))) (and (= x351 1889567281) (= x433 x184) (= (x158 (x515 0) (x515 0) 0) x181) (not (> 1889567281 x351)) (<= 0 x310) (> 2569101039 x351) (< 0 x327) (= 0 x517) (= x126 0) (= x327 (x603 (x445 x258))) (= x129 (= 0 x184)) (= x212 x310) (= x310 (x421 x181)) (<= x310 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (= x464 x337) (< 0 x258) (<= x602 1461501637330902918203684832716283019655932542975) (= (< 0 (x603 (x445 x536))) x5) (= (x104 (x445 x536)) x581) x542 (<= 0 x381) (not (= x561 x258)) (<= 0 x602) (= (< 0 (x603 (x445 x258))) x613) (= x552 x148) (= x245 x602) (= x127 x625) (<= 0 x64) (< x55 826074471) (>= 1461501637330902918203684832716283019655932542975 x18) (= x124 x167) (> x536 0) (>= 1461501637330902918203684832716283019655932542975 x561) (<= 0 x607) (<= x64 1461501637330902918203684832716283019655932542975) (= 404098525 x55) (= x114 x106) (>= x581 0) (= x570 (x603 (x445 x258))) (= x182 x264) (<= x424 1461501637330902918203684832716283019655932542975) (<= x258 1461501637330902918203684832716283019655932542975) (<= 0 x18) (<= 0 x342) (= 1000 x571) (= (x104 (x445 x258)) x544) (<= 0 x52) (>= x13 0) (>= 1461501637330902918203684832716283019655932542975 x342) (= x13 x433) (< x55 1889567281) (not (= x55 157198259)) (>= 1461501637330902918203684832716283019655932542975 x52) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x544) (> x570 0) (= x395 x511) (= x245 x247) (= x542 (> (x603 (x445 x561)) 0)) (not (= x536 x561)) (= x607 (x104 (x445 x561))) (not (= x536 x258)) (= x74 x18) (< 0 x561) (<= 0 x424) x613 x5 (not (= 234755713 x55)) (= x26 x147) (>= 1461501637330902918203684832716283019655932542975 x381) (= x64 x127) (= 0 x115) (= x87 x342) (<= x536 1461501637330902918203684832716283019655932542975))) (and (=> (and (= (= x536 x52) x450) (not x287)) (and (=> (and (and (and (and (= x207 36) (> 2569101039 x47) (= (or (> x364 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x364 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x364))) x488) (= 1889567281 x47) (not (< x207 4)) (> x601 0) (= x286 50942633119752846454219349998365661925608737367104304655302372697894809501696) (not (> 1889567281 x47)) (= (x624 (- x207 4)) x364) (= x258 x481) (= (x603 (x445 x258)) x601) (= 36 x207)) x618) (= (= x52 x258) x618)) (not x450)) (and (=> (and (not x488) (and (= x277 x481) (= (= x481 x258) x475))) (and (=> (and x475 (and (>= x456 0) (= x17 32) (= x389 1) (= (x158 (x445 x481) (x515 0) 0) x73) (<= x456 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x456 (x421 x73)))) x486) (=> (not x475) x439))) (=> x488 x439))) (=> (and (and (= x156 1889567281) (not (> 826074471 x156)) (not (= x156 826074471)) (= x315 x258) (not (> 4 x163)) (= x163 36) (= x15 (x624 (- x163 4))) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x1) (< 0 x214) (= (x603 (x445 x536)) x214) (= x163 36) (= x324 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x15) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x15)) (> 32 x15))))) x450) (and (=> (and (and (= x268 (= x258 x315)) (= x524 x315)) (not x324)) (and (=> (and (and (>= x312 0) (= x312 (x363 x230)) (= x174 32) (= (x158 (x445 x315) (x515 1) 0) x230) (<= x312 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x534)) x268) x251) (=> (not x268) x539))) (=> x324 x539))))) (=> (and (and (not (< x241 826074471)) (= (x603 (x445 x561)) x385) (not (= 826074471 x241)) (= x20 36) (> x385 0) (= x80 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x352) true) (< x352 32)) (> x352 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x98) (= 1889567281 x241) (not (< x20 4)) (= x612 x258) (= x20 36) (= (x624 (- x20 4)) x352)) x287) (and (=> (and (not x80) (and (= x242 (= x612 x258)) (= x612 x94))) (and (=> (and (and (= 1 x382) (<= 0 x597) (= (x227 x120) x597) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x597) (= 32 x583) (= (x158 (x445 x612) (x515 1) 0) x120)) x242) x422) (=> (not x242) x466))) (=> x80 x466))))) x186))
(assert (x284 x537))
(assert (= (x256 (x445 x344)) x344))
(assert (x284 x59))
(assert (x284 x275))
(assert (x284 x202))
(assert (=> (<= x398 10000) (= (x515 x398) (x445 x398))))
(assert (x284 x149))
(assert (x284 x345))
(assert (x284 x507))
(assert (x284 x98))
(assert (x284 x203))
(assert (x284 x441))
(assert (x474 x536))
(assert (x284 x246))
(assert (x284 x28))
(assert (= x438 (and x23 x530)))
(assert (x284 x468))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x256 (x515 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x284 x632))
(assert (= x299 (=> (and (= x293 x508) (= x479 x188)) x459)))
(assert (x284 x56))
(assert (x284 x393))
(assert (x284 x62))
(assert (x284 x579))
(assert (x284 x353))
(assert (x284 x258))
(assert (x474 x90))
(assert (x284 x131))
(assert (x284 x126))
(assert (x284 x55))
(assert (x284 x57))
(assert (= (x256 (x515 1889567281)) 1889567281))
(assert (x284 x310))
(assert (= x466 (=> (and (= x88 x583) (= 0 x382)) x422)))
(assert (x284 x178))
(assert (= (=> (and (not (or (and (= true (<= x188 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x188)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x188))) (= x434 (x179 (+ 128 x343))) (= (x603 (x445 x381)) x62) (> 1461501637330902918203684832716283019655932542976 x381) (not (= 0 x508)) (>= 1461501637330902918203684832716283019655932542975 x381) (= (x179 (+ x188 31)) x63) (not (= 0 x62)) (<= 0 x381) (= x383 (x509 128)) (= x548 (x624 (- x113 x434))) (= (x179 (+ x434 4)) x379) (= x113 (x179 (+ x379 32))) (= (x8 115792089237316195423570985008687907853269984665640564039457584007913129639904 x63) x343) (= x50 (= x381 x561))) (and (=> (and (and (not (> 4 x380)) (not (= 826074471 x109)) (= x146 (x624 (- x380 4))) (= x510 x258) (= x209 (x603 (x445 x561))) (= 36 x380) (< 0 x209) (= x109 1889567281) (= (or (and (> 32 x146) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x146) true)) (> x146 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x375) (= x29 50942633119752846454219349998365661925608737367104304655302372697894809501696) (not (> 826074471 x109)) (= x380 x548)) x50) (and (=> x375 x38) (=> (and (and (= x145 x510) (= (= x510 x258) x199)) (not x375)) (and (=> (and x199 (and (= (x158 (x445 x510) (x515 1) 0) x40) (= 1 x573) (<= x130 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x512 32) (= (x227 x40) x130) (>= x130 0))) x457) (=> (not x199) x38))))) (=> (and (= (= x536 x381) x249) (not x50)) (and (=> (and (not x249) (and (= x159 (= x381 x258)) (and x159 (and (< 0 x465) (= x178 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x353 (x624 (- x360 4))) (< x28 2569101039) (not (> 4 x360)) (= x360 x548) (= x465 (x603 (x445 x258))) (= x258 x398) (= x39 (or (> x353 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x353 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x353 32)))) (not (< x28 1889567281)) (= x360 36) (= 1889567281 x28))))) (and (=> x39 x420) (=> (and (and (= (= x258 x398) x489) (= x398 x259)) (not x39)) (and (=> (and x489 (and (= x92 1) (= x341 (x158 (x445 x398) (x515 0) 0)) (>= x101 0) (= x160 32) (= x101 (x421 x341)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x101))) x4) (=> (not x489) x420))))) (=> (and (and (= x429 (x624 (- x196 4))) (= 36 x196) (= x490 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x236 (or (and (< x429 32) (= (<= x429 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x429))) (= x196 x548) (not (= 826074471 x412)) (> x492 0) (= (x603 (x445 x536)) x492) (= x412 1889567281) (not (< x196 4)) (= x614 x258) (not (> 826074471 x412))) x249) (and (=> x236 x331) (=> (and (and (= x141 x614) (= x530 (= x614 x258))) (not x236)) (and (=> (not x530) x331) (=> (and x530 (and (<= 0 x161) (= x150 (x158 (x445 x614) (x515 1) 0)) (= 32 x75) (= x161 (x292 x150)) (= 1 x546) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x161))) x35))))))))) x459))
(assert (= (or x532 x71 x248) x332))
(assert (x284 x348))
(assert (x284 x502))
(assert (x284 x387))
(assert (x284 x176))
(assert (= (and x499 (not x287)) x102))
(assert (= x572 (=> (and (= 0 x138) (= x171 x557)) x122)))
(assert (x284 x587))
(assert (=> (<= x611 10000) (= (x515 x611) (x445 x611))))
(assert (= (or (and (not x530) x23) (and x236 x477)) x377))
(assert (=> (>= 10000 x536) (= (x445 x536) (x515 x536))))
(assert (x474 x316))
(assert (x284 x309))
(assert (= (=> (and (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x387) (= (x262 x497) x387) (= x387 x261) (= x569 1889567281) (<= x90 1461501637330902918203684832716283019655932542975) (> x478 0) (= (x158 (x445 x90) (x515 0) 0) x497) (<= 0 x387) (= x424 x90) (= x318 x549) (= x478 (x603 (x445 x258))) (< x569 2569101039) (not (> 1889567281 x569))) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x246) (= x494 (x624 (- x246 x413))) (= x225 x413) (>= 1461501637330902918203684832716283019655932542975 x30) (not (< x246 x413)) (= x566 x261) (<= x452 1461501637330902918203684832716283019655932542975) (= x205 (x158 (x445 x87) (x515 1) 0)) (= x87 x372) (<= 0 x452) (>= x372 0) (= x183 (x81 x210)) (= x396 2835717307) (< 0 x123) (= x210 (x158 (x445 x258) (x515 1) 0)) (= x413 x585) (>= x183 0) (= (x523 x205) x246) (not (= 826074471 x396)) (<= 0 x246) (not (< x396 826074471)) (= x635 x226) (>= 1461501637330902918203684832716283019655932542975 x258) (<= x372 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (= 0 x226) (= (x158 (x445 x87) (x515 1) 0) x220) (not (= x396 2514000705)) (= (x603 (x445 x536)) x123) (= x203 x468) (not (< x246 x413)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x183 x413)) (= x203 x452) (= 1 x458) (= x224 x183) (>= x30 0) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x413 x183))) (= x444 (x158 (x445 x258) (x515 1) 0)) (not (= x396 1889567281)) (= x288 (+ x224 x225))) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x378) (> 1461501637330902918203684832716283019655932542976 x52) (<= x266 1461501637330902918203684832716283019655932542975) (not (= x586 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x443) (>= 1461501637330902918203684832716283019655932542975 x373) (>= 1461501637330902918203684832716283019655932542975 x57) (not (> 826074471 x166)) (= 1 x507) (= x127 x373) (= x266 x388) (= 128 x430) (= x309 (x603 (x445 x258))) (>= x378 0) (<= 0 x52) (>= 1461501637330902918203684832716283019655932542975 x52) (<= 0 x443) (<= x95 1461501637330902918203684832716283019655932542975) (>= x507 0) (= x388 x182) (= 1784838210 x166) (> 1889567281 x166) (> x309 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x507) (<= 0 x266) (= x424 x57) (= 0 x500) (not (= x166 961581905)) (>= x95 0) (= x26 x500) (>= x373 0) (= x43 (= x561 x52)) (= x586 (x603 (x445 x52))) (not (= x166 826074471))))) (and (not (< x361 x563)) (= (x204 x213) x441) (= x223 x27) (= x442 (x8 1461501637330902918203684832716283019655932542975 x108)) (not (= x172 0)) (<= 0 x13) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x563) (< (* x483 x13) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (< x441 x378)) (= x172 x407) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x441 x551)) (= x600 (x421 x526)) (<= 0 x27) (= (* x441 x551) x219) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x68) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x68) true) (< x68 32)))) (not (= 0 x149)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x27 x172)) (= (+ x12 x60) x467) (= x172 x549) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x13 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x600) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x551) x216) (not (= x346 0)) (= (x158 (x445 x442) (x515 0) 0) x526) (= x361 x219) (= x12 x13) (>= x563 0) (not x216) (= x483 (x624 (- x361 x563))) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x172 (div x556 x563)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x27) (<= 0 x600) (= x172 x60) (= x604 (+ x407 x223)) (not (> x443 x551)) (not (= 0 x13)) (= (x8 1461501637330902918203684832716283019655932542975 x108) x149) (< (+ x172 x13) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (* x13 x483) x556) (< 0 x563) (= (x421 x526) x27))) (and (=> (and (not x43) (= x144 (= x536 x52))) (and (=> (and (not x144) (and (and x368 (and (= x59 (x603 (x445 x258))) (= x298 (x624 (- x91 4))) (not (< x91 4)) (< 0 x59) (= x415 (or (and (= true (<= x298 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x298)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x298))) (< x31 2569101039) (= x91 36) (= 36 x91) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x105) (not (< x31 1889567281)) (= 1889567281 x31) (= x33 x258))) (= (= x258 x52) x368))) (and (=> x415 x250) (=> (and (and (= x33 x476) (= (= x33 x258) x621)) (not x415)) (and (=> (not x621) x250) (=> (and (and (= x479 32) (= 1 x293) (= x25 (x421 x339)) (= x339 (x158 (x445 x33) (x515 0) 0)) (<= x25 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x25)) x621) x299))))) (=> (and x144 (and (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x426) (= (x624 (- x257 4)) x402) (not (< x257 4)) (> x394 0) (= x258 x609) (= (x603 (x445 x536)) x394) (= 36 x257) (not (> 826074471 x301)) (not (= 826074471 x301)) (= (or (and (= true (<= x402 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x402)) (> x402 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x593) (= 1889567281 x301) (= x257 36))) (and (=> x593 x455) (=> (and (and (= x278 (= x609 x258)) (= x609 x505)) (not x593)) (and (=> (not x278) x455) (=> (and (and (>= x290 0) (= x577 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x290) (= x290 (x292 x362)) (= (x158 (x445 x609) (x515 1) 0) x362) (= x260 32)) x278) x550))))))) (=> (and (and (= x454 x258) (= x632 (x624 (- x136 4))) (= x354 (x603 (x445 x561))) (= x153 (or (> x632 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x632 32) (= true (<= x632 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (not (= x498 826074471)) (not (< x136 4)) (> x354 0) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x314) (= 36 x136) (= 36 x136) (not (< x498 826074471)) (= x498 1889567281)) x43) (and (=> x153 x107) (=> (and (not x153) (and (= x454 x553) (= x282 (= x454 x258)))) (and (=> (and (and (>= x369 0) (= x369 (x227 x554)) (= 32 x574) (= x3 1) (= x554 (x158 (x445 x454) (x515 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x369)) x282) x598) (=> (not x282) x107))))))) x347))
(assert (x284 x75))
(assert (= x38 (=> (and (= 0 x573) (= x308 x512)) x457)))
(assert (x284 x597))
(assert (x284 x354))
(assert (= (=> (and (= x17 x330) (= x389 x65)) x79) x486))
(assert (x284 x381))
(assert (x284 x443))
(assert (= (and x618 x359) x118))
(assert (x284 x19))
(assert (= (or x302 x281) x629))
(assert (= (x256 (x515 2835717307)) 2835717307))
(assert (=> (<= x614 10000) (= (x445 x614) (x515 x614))))
(assert (x284 x171))
(assert (= x258 (x256 (x445 x258))))
(assert (x284 x128))
(assert (x474 x561))
(assert (x284 x328))
(assert (= (and x319 (not x39)) x323))
(assert (x284 x601))
(assert (x284 x63))
(assert (x284 x290))
(assert (x284 x68))
(assert (x284 x344))
(assert (= 157198259 (x256 (x515 157198259))))
(assert (x284 x132))
(assert (= (x515 234755713) (x445 234755713)))
(assert (= (or (and x593 x630) (and x221 (not x278))) x281))
(assert (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x515 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x284 x53))
(assert (= x6 (or (and x46 x620) (and (not x469) x218))))
(assert (x284 x117))
(assert (x284 x389))
(assert (x284 x259))
(assert (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x284 x342))
(assert (= (=> (and (= x330 x583) (= x382 x65)) x79) x422))
(assert (x284 x442))
(assert (x284 x561))
(assert (x284 x408))
(assert (= x233 (and x619 x50)))
(assert (x284 x337))
(assert (= (x256 (x515 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x284 x136))
(assert (x284 x577))
(assert (x284 x151))
(assert (x284 x430))
(assert (x284 x604))
(assert (x284 x214))
(assert (x284 x54))
(assert (x284 x565))
(assert (= x610 (and x450 x102)))
(assert (= (x256 (x445 x33)) x33))
(assert (x284 x261))
(assert (x284 x157))
(assert (= (x445 404098525) (x515 404098525)))
(assert (x284 x534))
(assert (x284 x398))
(assert (x284 x396))
(assert (= x420 (=> (and (= x160 x308) (= 0 x92)) x4)))
(assert (= (x515 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x284 x45))
(assert (x284 x58))
(assert (=> (<= x258 10000) (= (x515 x258) (x445 x258))))
(assert (= x326 (x256 (x445 x326))))
(assert (= x71 (or x285 x582)))
(assert (= x381 (x256 (x445 x381))))
(assert (x284 x315))
(assert (x284 x351))
(assert (x284 x277))
(assert (x474 x258))
(assert (= x232 (or (and (not x268) x451) (and x324 x610))))
(assert (x284 x602))
(assert (=> (<= x315 10000) (= (x445 x315) (x515 x315))))
(assert (= (x256 (x515 1989257563)) 1989257563))
(assert (x284 x266))
(assert (x284 x418))
(assert (x284 x476))
(assert (x284 x26))
(assert (= x614 (x256 (x445 x614))))
(assert (=> (>= 10000 x119) (= (x445 x119) (x515 x119))))
(assert (x284 x464))
(assert (x284 x188))
(assert (x284 x196))
(assert (x284 x580))
(assert (= x331 (=> (and (= x546 0) (= x308 x75)) x35)))
(assert (x284 x135))
(assert (x284 x325))
(assert (= (and x435 (not x159)) x594))
(assert (x474 x609))
(assert (x284 x448))
(assert (x284 x64))
(assert (x284 x434))
(assert (x284 x372))
(assert (x284 x240))
(assert (= x237 (and x615 (not x153))))
(assert (= (x445 2569101039) (x515 2569101039)))
(assert (x284 x369))
(assert (x284 x492))
(assert (x284 x494))
(assert (x284 x592))
(assert (= (x256 (x445 x52)) x52))
(assert (x284 x156))
(assert (x284 x316))
(assert (= x133 (and x282 x237)))
(assert (x284 x500))
(assert (= x11 (and x233 (not x375))))
(assert (= (or x417 x48 x134) x42))
(assert (x228 x152))
(assert (x284 x395))
(assert (= (=> (and (= x545 x171) (= 0 x482)) x78) x527))
(assert (x284 x31))
(assert (x284 x512))
(assert (= (x515 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x445 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (= x46 (and x595 x480)))
(assert (= x100 (or x121 x133)))
(assert (x474 x612))
(assert (x284 x524))
(assert (= (x256 (x515 2430363622)) 2430363622))
(assert (= x250 (=> (and (= x293 0) (= x393 x479)) x299)))
(assert (= x358 (and x66 (not x164))))
(assert (= (x515 1889567281) (x445 1889567281)))
(assert (x284 x518))
(assert (x284 x247))
(assert (=> (>= 10000 x316) (= (x515 x316) (x445 x316))))
(assert (x284 x380))
(assert (= (x256 (x445 x315)) x315))
(assert (x284 x9))
(assert (= (x515 1952775229) (x445 1952775229)))
(assert (x284 x274))
(assert (x284 x373))
(assert (x474 x326))
(assert (x284 x391))
(assert (= (and x332 (not x43)) x334))
(assert (x284 x357))
(assert (x284 x125))
(assert (= x615 (and x43 x332)))
(assert (x284 x146))
(assert (= (and (not x50) x619) x307))
(assert (x284 x91))
(assert (x284 x115))
(assert (x474 x510))
(assert (= x329 (and (not x488) x118)))
(assert (x284 x70))
(assert (x284 x317))
(assert (= (=> (and (= x577 x508) (= x188 x260)) x459) x550))
(assert (x284 x182))
(assert (= x627 (and x191 (not x368))))
(assert (x284 x505))
(assert (x284 x392))
(assert (x284 x241))
(assert (x284 x586))
(assert (x284 x361))
(assert (= x248 (or x201 x410)))
(assert (x284 x52))
(assert (=> (<= x52 10000) (= (x515 x52) (x445 x52))))
(assert (= x304 (and x199 x11)))
(assert (x284 x465))
(assert (x284 x30))
(assert (x284 x429))
(assert (x284 x478))
(assert (x284 x423))
(assert (x284 x160))
(assert (x419 x152))
(assert (x284 x15))
(assert (x284 x498))
(assert (x284 x552))
(assert (x284 x479))
(assert (x284 x327))
(assert (= x112 (or (and x39 x319) (and x323 (not x489)))))
(assert (x284 x574))
(assert (= (x445 1784838210) (x515 1784838210)))
(assert (= 1952775229 (x256 (x515 1952775229))))
(assert (= (or (and x233 x375) (and x11 (not x199))) x335))
(assert (x284 x298))
(assert (= x598 (=> (and (= x574 x188) (= x3 x508)) x459)))
(assert (x284 x110))
(assert (= x619 (or x208 x629 x100)))
(assert (x284 x545))
(assert (=> (>= 10000 x326) (= (x515 x326) (x445 x326))))
(assert (x284 x257))
(assert (x284 x13))
(assert (= (and (not x234) x436) x283))
(assert (= x122 (=> (and (= x138 x346) (= x557 x68)) x347)))
(assert (x284 x314))
(assert (= x57 (x256 (x445 x57))))
(assert (x284 x490))
(assert (x284 x177))
(assert (= (x256 (x445 x442)) x442))
(assert (x284 x456))
(assert (x284 x123))
(assert (x284 x89))
(assert (= x457 (=> (and (= x512 x514) (= x45 x573)) x623)))
(assert (x284 x481))
(assert (x284 x130))
(assert (x474 x454))
(assert (x284 x173))
(assert (x284 x264))
(assert (x284 x566))
(assert (x284 x433))
(assert (x284 x553))
(assert (= x119 (x256 (x445 x119))))
(assert (= (x256 (x445 x609)) x609))
(assert (x284 x152))
(assert (= x481 (x256 (x445 x481))))
(assert (= x447 (or (and x329 (not x475)) (and x488 x118))))
(assert (x284 x138))
(assert (x284 x189))
(assert (= (and x278 x221) x302))
(assert (= (x256 (x515 961581905)) 961581905))
(assert (x284 x525))
(assert (x284 x321))
(assert (x474 x87))
(assert (= 234755713 (x256 (x515 234755713))))
(assert (= (x515 157198259) (x445 157198259)))
(assert (x284 x544))
(assert (x284 x127))
(assert (= (or x231 x193 x446) x411))
(assert (= x539 (=> (and (= 0 x534) (= x174 x88)) x251)))
(assert (= 2757214935 (x256 (x515 2757214935))))
(assert (x284 x349))
(assert (x284 x94))
(assert (x284 x293))
(assert (= (x445 826074471) (x515 826074471)))
(assert (= (and x499 x287) x555))
(assert (x284 x569))
(assert (x284 x437))
(assert (x284 x343))
(assert (x284 x611))
(assert (x284 x32))
(assert (= (x256 (x515 3524403367)) 3524403367))
(assert (= x451 (and x610 (not x324))))
(assert (= (x256 (x515 826074471)) 826074471))
(assert (= (x256 (x445 x454)) x454))
(assert (x284 x400))
(assert (= (and x621 x356) x340))
(assert (x284 x413))
(assert (=> (<= x612 10000) (= (x515 x612) (x445 x612))))
(assert (x284 x291))
(assert (x284 x47))
(assert (x474 x119))
(assert (x284 x114))
(assert (= x239 (and x289 (not x255))))
(assert (x284 x484))
(assert (x284 x1))
(assert (x284 x72))
(assert (= (and (not x415) x49) x356))
(assert (x284 x503))
(assert (= (or (and x234 x436) (and x283 (not x69))) x410))
(assert (x284 x163))
(assert (= x493 (and x323 x489)))
(assert (x284 x312))
(assert (x284 x84))
(assert (=> (>= 10000 x87) (= (x445 x87) (x515 x87))))
(assert (x474 x52))
(assert (= (x445 1461501637330902918203684832716283019655932542975) (x515 1461501637330902918203684832716283019655932542975)))
(assert (= x499 true))
(assert (x284 x260))
(assert (= x532 (or x6 x440)))
(assert (x284 x139))
(assert (x284 x280))
(assert (x284 x549))
(assert (x284 x161))
(assert (=> (>= 10000 x344) (= (x515 x344) (x445 x344))))
(assert (x284 x406))
(assert (x284 x207))
(assert (x284 x600))
(assert (x284 x65))
(assert (x284 x567))
(assert (x284 x564))
(assert (x284 x519))
(assert (= x384 (and (not x618) x359)))
(assert (x284 x559))
(assert (x284 x209))
(assert (x284 x105))
(assert (= (and (not x450) x102) x359))
(assert (= x590 (=> (and (= x111 0) (= x56 x171)) x485)))
(assert (x284 x109))
(assert (x228 x63))
(assert (=> (>= 10000 x481) (= (x515 x481) (x445 x481))))
(assert (x284 x296))
(assert (= (=> (and (= x514 x75) (= x546 x45)) x623) x35))
(assert (= (x445 2835717307) (x515 2835717307)))
(assert (x284 x467))
(assert (x284 x41))
(assert (x284 x27))
(assert (not x186))
(assert (x474 x481))
(assert (x284 x267))
(assert (x284 x374))
(assert (x228 1461501637330902918203684832716283019655932542975))
(assert (=> (>= 10000 x454) (= (x445 x454) (x515 x454))))
(assert (x284 x386))
(assert (x284 x426))
(assert (x284 x533))
(assert (x284 x286))
(assert (x284 x253))
(assert (x284 x33))
(assert (x284 x154))
(assert (x284 x366))
(assert (x284 x625))
(assert (x284 x551))
(assert (= (and x268 x451) x453))
(assert (= (=> (and (= x393 x260) (= x577 0)) x550) x455))
(assert (x284 x86))
(assert (x284 x168))
(assert (x284 x295))
(assert (x284 x212))
(assert (= (x515 2757214935) (x445 2757214935)))
(assert (x474 x614))
(assert (x284 x571))
(assert (x474 x381))
(assert (=> (<= x510 10000) (= (x445 x510) (x515 x510))))
(assert (x474 x442))
(assert (x284 x483))
(assert (x284 x301))
(assert (x284 x88))
(assert (x284 x424))
(assert (=> (<= x57 10000) (= (x515 x57) (x445 x57))))
(assert (= 2569101039 (x256 (x515 2569101039))))
(assert (x284 x510))
(check-sat)
(exit)