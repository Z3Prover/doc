(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x514 0)) (((x621 (x234 x514) (x174 x514) (x520 Int)) (x164 (x157 Int)) (x840 (x683 x514) (x989 Int)))))
(declare-fun x222 () Bool)
(declare-fun x315 () Int)
(declare-fun x634 () Int)
(declare-fun x419 () Bool)
(declare-fun x197 () Int)
(declare-fun x1006 () Bool)
(declare-fun x503 () Bool)
(declare-fun x290 () Bool)
(declare-fun x557 () Bool)
(declare-fun x1063 () Int)
(declare-fun x506 () Int)
(declare-fun x1002 () Int)
(declare-fun x35 () Int)
(declare-fun x804 () Bool)
(declare-fun x651 () Int)
(declare-fun x799 (Int Int) Int)
(declare-fun x633 () Bool)
(declare-fun x299 () Int)
(declare-fun x752 () x514)
(declare-fun x511 () Int)
(declare-fun x775 () Int)
(declare-fun x675 () Bool)
(declare-fun x1075 () Bool)
(declare-fun x238 (x514) Int)
(declare-fun x788 () Bool)
(declare-fun x62 () Int)
(declare-fun x300 () Int)
(declare-fun x1019 () Int)
(declare-fun x131 () Int)
(declare-fun x372 () Int)
(declare-fun x916 () Int)
(declare-fun x1011 () Int)
(declare-fun x333 () Int)
(declare-fun x445 () Int)
(declare-fun x375 () Int)
(declare-fun x843 () Bool)
(declare-fun x482 () Int)
(declare-fun x638 () Int)
(declare-fun x185 () Int)
(declare-fun x78 (Int Int) Int)
(declare-fun x565 () Int)
(declare-fun x899 () Int)
(declare-fun x576 () Int)
(declare-fun x405 () Int)
(declare-fun x1034 () Bool)
(declare-fun x915 () Bool)
(declare-fun x180 (x514) Int)
(declare-fun x767 () Bool)
(declare-fun x648 () Bool)
(declare-fun x517 () Int)
(declare-fun x740 () Bool)
(declare-fun x848 () x514)
(declare-fun x509 (x514) Int)
(declare-fun x331 () Bool)
(declare-fun x94 () Int)
(declare-fun x223 () Bool)
(declare-fun x834 (Int) Int)
(declare-fun x1010 () Bool)
(declare-fun x614 () Bool)
(declare-fun x679 () Int)
(declare-fun x542 () Bool)
(declare-fun x318 () Int)
(declare-fun x352 () Int)
(declare-fun x462 () Int)
(declare-fun x345 (Int) Int)
(declare-fun x480 () Int)
(declare-fun x895 () Int)
(declare-fun x632 () Int)
(declare-fun x195 () Int)
(declare-fun x601 () Bool)
(declare-fun x904 () Bool)
(declare-fun x1049 () Int)
(declare-fun x587 () Bool)
(declare-fun x44 () Int)
(declare-fun x283 () Int)
(declare-fun x366 () Bool)
(declare-fun x827 (x514) Int)
(declare-fun x28 () Int)
(declare-fun x132 () Bool)
(declare-fun x7 () Int)
(declare-fun x162 () Bool)
(declare-fun x87 () Int)
(declare-fun x463 () Int)
(declare-fun x392 () Int)
(declare-fun x347 () Bool)
(declare-fun x769 () Int)
(declare-fun x568 () Int)
(declare-fun x685 () Int)
(declare-fun x351 () Bool)
(declare-fun x490 () Int)
(declare-fun x167 () Int)
(declare-fun x652 () Int)
(declare-fun x294 () Int)
(declare-fun x999 () Bool)
(declare-fun x691 () Int)
(declare-fun x127 () Int)
(declare-fun x51 () Bool)
(declare-fun x981 () Int)
(declare-fun x310 () Int)
(declare-fun x272 () Int)
(declare-fun x270 () Int)
(declare-fun x2 (x514) Int)
(declare-fun x193 () Bool)
(declare-fun x681 () Int)
(declare-fun x251 () Int)
(declare-fun x882 () Bool)
(declare-fun x907 () Int)
(declare-fun x117 () Bool)
(declare-fun x508 () Bool)
(declare-fun x1033 () Int)
(declare-fun x910 () x514)
(declare-fun x266 () Int)
(declare-fun x71 () Int)
(declare-fun x828 () Bool)
(declare-fun x618 () Int)
(declare-fun x571 () Bool)
(declare-fun x9 (x514) Int)
(declare-fun x623 () Int)
(declare-fun x819 () Int)
(declare-fun x371 () Int)
(declare-fun x1041 () Bool)
(declare-fun x230 (x514) Int)
(declare-fun x793 () Int)
(declare-fun x1051 () Int)
(declare-fun x302 () Bool)
(declare-fun x589 () Bool)
(declare-fun x566 () Int)
(declare-fun x153 () Int)
(declare-fun x584 () Bool)
(declare-fun x282 () Bool)
(declare-fun x8 () Int)
(declare-fun x235 () Bool)
(declare-fun x1022 () Int)
(declare-fun x343 () Bool)
(declare-fun x758 () Bool)
(declare-fun x397 () Int)
(declare-fun x126 (Int) Int)
(declare-fun x408 () Bool)
(declare-fun x199 () Bool)
(declare-fun x80 () Bool)
(declare-fun x608 () Bool)
(declare-fun x36 () Bool)
(declare-fun x771 () Int)
(declare-fun x757 () Int)
(declare-fun x944 () Bool)
(declare-fun x995 () Int)
(declare-fun x554 () Int)
(declare-fun x519 () Bool)
(declare-fun x660 () Bool)
(declare-fun x32 () Int)
(declare-fun x806 () Bool)
(declare-fun x83 () Int)
(declare-fun x321 () Int)
(declare-fun x980 () Bool)
(declare-fun x701 () Int)
(declare-fun x940 () Bool)
(declare-fun x446 () Int)
(declare-fun x723 (Int) Int)
(declare-fun x53 () Int)
(declare-fun x855 () Int)
(declare-fun x906 () Int)
(declare-fun x380 () Bool)
(declare-fun x606 () Int)
(declare-fun x15 () Int)
(declare-fun x335 () Int)
(declare-fun x705 () x514)
(declare-fun x208 () Int)
(declare-fun x385 () Bool)
(declare-fun x189 () Bool)
(declare-fun x442 () Bool)
(declare-fun x774 () Int)
(declare-fun x931 () Bool)
(declare-fun x108 () Bool)
(declare-fun x661 () Int)
(declare-fun x216 () Int)
(declare-fun x284 (x514) Int)
(declare-fun x58 () Int)
(declare-fun x726 () Int)
(declare-fun x340 () Bool)
(declare-fun x142 () Bool)
(declare-fun x85 () Int)
(declare-fun x232 () Int)
(declare-fun x432 () Bool)
(declare-fun x553 () Int)
(declare-fun x76 () Int)
(declare-fun x761 () Int)
(declare-fun x802 () Bool)
(declare-fun x708 () Int)
(declare-fun x98 () Int)
(declare-fun x713 () Int)
(declare-fun x50 () x514)
(declare-fun x970 (x514) Int)
(declare-fun x389 () Int)
(declare-fun x277 () Int)
(declare-fun x313 (Int) Int)
(declare-fun x792 () Int)
(declare-fun x424 () Int)
(declare-fun x362 () Int)
(declare-fun x732 (Int Int) Int)
(declare-fun x1061 () Bool)
(declare-fun x334 () Int)
(declare-fun x204 () Int)
(declare-fun x102 () Int)
(declare-fun x196 (x514) Int)
(declare-fun x537 (Int) Int)
(declare-fun x118 () Int)
(declare-fun x951 () Bool)
(declare-fun x382 () Int)
(declare-fun x674 () Bool)
(declare-fun x800 () Int)
(declare-fun x27 () Bool)
(declare-fun x543 () Int)
(declare-fun x992 () Int)
(declare-fun x640 () Int)
(declare-fun x823 () Bool)
(declare-fun x292 () Bool)
(declare-fun x538 () Int)
(declare-fun x280 () Int)
(declare-fun x658 () Bool)
(declare-fun x850 () Int)
(declare-fun x500 () Bool)
(declare-fun x964 () Int)
(declare-fun x596 () Int)
(declare-fun x1080 (x514) Int)
(declare-fun x847 () Int)
(declare-fun x40 () Bool)
(declare-fun x1077 () Int)
(declare-fun x152 () Int)
(declare-fun x430 () Int)
(declare-fun x629 () Bool)
(declare-fun x655 () Int)
(declare-fun x1045 () Int)
(declare-fun x214 () Bool)
(declare-fun x715 () Int)
(declare-fun x356 () Int)
(declare-fun x751 () Int)
(declare-fun x1098 () Bool)
(declare-fun x945 () Int)
(declare-fun x77 () Int)
(declare-fun x838 () Bool)
(declare-fun x346 () Int)
(declare-fun x122 (x514) Int)
(declare-fun x997 () Int)
(declare-fun x1069 (x514) Int)
(declare-fun x702 () Int)
(declare-fun x993 () Int)
(declare-fun x330 () Bool)
(declare-fun x513 () Bool)
(declare-fun x1071 () Bool)
(declare-fun x504 (Int) Int)
(declare-fun x165 () Int)
(declare-fun x12 () Int)
(declare-fun x510 () Bool)
(declare-fun x917 () Int)
(declare-fun x729 () Int)
(declare-fun x353 () Bool)
(declare-fun x144 (x514) Int)
(declare-fun x481 () Bool)
(declare-fun x425 () Int)
(declare-fun x526 () Bool)
(declare-fun x1001 () Int)
(declare-fun x639 (x514) Int)
(declare-fun x592 () Int)
(declare-fun x545 () Bool)
(declare-fun x279 () Int)
(declare-fun x918 (x514) Int)
(declare-fun x1036 () Int)
(declare-fun x505 () Int)
(declare-fun x954 () Int)
(declare-fun x706 () Bool)
(declare-fun x269 () Int)
(declare-fun x145 () Int)
(declare-fun x653 () Bool)
(declare-fun x872 () Bool)
(declare-fun x49 () Int)
(declare-fun x186 () Int)
(declare-fun x485 () Int)
(declare-fun x166 () Int)
(declare-fun x563 () Int)
(declare-fun x814 () Bool)
(declare-fun x86 () Int)
(declare-fun x156 () Int)
(declare-fun x496 () Int)
(declare-fun x474 () Int)
(declare-fun x876 () Bool)
(declare-fun x780 () Bool)
(declare-fun x201 () Bool)
(declare-fun x56 () Bool)
(declare-fun x924 () Int)
(declare-fun x475 () Int)
(declare-fun x93 () Bool)
(declare-fun x650 () Bool)
(declare-fun x396 () Int)
(declare-fun x982 () Int)
(declare-fun x168 () Int)
(declare-fun x863 () Int)
(declare-fun x730 () Bool)
(declare-fun x258 () Int)
(declare-fun x370 () Int)
(declare-fun x958 () Int)
(declare-fun x927 () Bool)
(declare-fun x871 () Int)
(declare-fun x1039 () Int)
(declare-fun x194 () Int)
(declare-fun x1046 () Bool)
(declare-fun x473 () Bool)
(declare-fun x1056 () Bool)
(declare-fun x753 () Int)
(declare-fun x322 () Bool)
(declare-fun x516 () Int)
(declare-fun x952 () Bool)
(declare-fun x686 () Int)
(declare-fun x961 () Int)
(declare-fun x68 () Int)
(declare-fun x602 () Bool)
(declare-fun x101 () Bool)
(declare-fun x528 () Bool)
(declare-fun x616 () Bool)
(declare-fun x305 () Int)
(declare-fun x1016 () Int)
(declare-fun x441 () Int)
(declare-fun x1060 () Int)
(declare-fun x527 () Int)
(declare-fun x909 () Int)
(declare-fun x386 () Int)
(declare-fun x64 () Int)
(declare-fun x748 () Int)
(declare-fun x434 () Bool)
(declare-fun x821 () Int)
(declare-fun x524 () Bool)
(declare-fun x210 () Int)
(declare-fun x577 () Bool)
(declare-fun x574 () Int)
(declare-fun x540 () Bool)
(declare-fun x854 () Bool)
(declare-fun x728 () Int)
(declare-fun x413 () Bool)
(declare-fun x1009 () Bool)
(declare-fun x991 (x514) Int)
(declare-fun x188 () Bool)
(declare-fun x968 () Bool)
(declare-fun x326 () Bool)
(declare-fun x998 () Bool)
(declare-fun x663 () Bool)
(declare-fun x105 () Int)
(declare-fun x599 () Bool)
(declare-fun x359 () Bool)
(declare-fun x711 (Int) Int)
(declare-fun x801 () Bool)
(declare-fun x247 () Int)
(declare-fun x797 () Int)
(declare-fun x949 () Int)
(declare-fun x739 () Bool)
(declare-fun x1031 () Int)
(declare-fun x341 () Int)
(declare-fun x552 () Bool)
(declare-fun x454 () Bool)
(declare-fun x647 () Int)
(declare-fun x399 () Int)
(declare-fun x10 () Int)
(declare-fun x1073 () Bool)
(declare-fun x561 (x514) Int)
(declare-fun x996 () Int)
(declare-fun x451 () Int)
(declare-fun x595 () Int)
(declare-fun x1067 () Int)
(declare-fun x30 () Int)
(declare-fun x494 () Int)
(declare-fun x1076 () Int)
(declare-fun x1079 () Int)
(declare-fun x1068 (x514) Int)
(declare-fun x297 () Bool)
(declare-fun x91 () Int)
(declare-fun x443 () Int)
(declare-fun x926 () Int)
(declare-fun x477 () Bool)
(declare-fun x42 (x514) Int)
(declare-fun x257 () Int)
(declare-fun x236 () Int)
(declare-fun x37 () Int)
(declare-fun x440 () Bool)
(declare-fun x919 () Int)
(declare-fun x874 () Int)
(declare-fun x231 () Int)
(declare-fun x845 () Int)
(declare-fun x262 () Bool)
(declare-fun x744 () Int)
(declare-fun x379 () Int)
(declare-fun x243 () Int)
(declare-fun x720 () Int)
(declare-fun x813 () Bool)
(declare-fun x110 () Bool)
(declare-fun x21 () Int)
(declare-fun x811 () Bool)
(declare-fun x205 () Bool)
(declare-fun x522 () Bool)
(declare-fun x447 () Bool)
(declare-fun x106 (x514) Int)
(declare-fun x328 (x514) Int)
(declare-fun x1028 () Int)
(declare-fun x43 () Int)
(declare-fun x309 () Int)
(declare-fun x579 () Bool)
(declare-fun x95 () Int)
(declare-fun x337 () Int)
(declare-fun x276 () Bool)
(declare-fun x444 () Bool)
(declare-fun x609 () Bool)
(declare-fun x179 () Int)
(declare-fun x988 () Int)
(declare-fun x288 () Bool)
(declare-fun x831 () Int)
(declare-fun x518 () Int)
(declare-fun x291 () Bool)
(declare-fun x611 () Int)
(declare-fun x1090 () Bool)
(declare-fun x390 () Bool)
(declare-fun x805 () Int)
(declare-fun x833 () Int)
(declare-fun x1023 () Int)
(declare-fun x746 (x514) Int)
(declare-fun x962 () Int)
(declare-fun x471 () Int)
(declare-fun x4 (Int) Int)
(declare-fun x610 () Bool)
(declare-fun x710 () Int)
(declare-fun x578 () x514)
(declare-fun x704 () Int)
(declare-fun x745 () Bool)
(declare-fun x810 () Int)
(declare-fun x1088 () Int)
(declare-fun x673 () Int)
(declare-fun x913 () Bool)
(declare-fun x586 () Int)
(declare-fun x974 () Bool)
(declare-fun x665 () Bool)
(declare-fun x550 () Bool)
(declare-fun x604 () Bool)
(declare-fun x588 () Int)
(declare-fun x244 () Int)
(declare-fun x620 () Int)
(declare-fun x39 () Bool)
(declare-fun x209 () Bool)
(declare-fun x930 () Int)
(declare-fun x1050 () Int)
(declare-fun x1085 () Bool)
(declare-fun x41 () Int)
(declare-fun x16 () Bool)
(declare-fun x14 () Bool)
(declare-fun x908 () Int)
(declare-fun x240 () Int)
(declare-fun x82 () Int)
(declare-fun x501 () Int)
(declare-fun x934 () Bool)
(declare-fun x994 () Int)
(declare-fun x512 () Bool)
(declare-fun x388 () Bool)
(declare-fun x121 () Bool)
(declare-fun x822 () Int)
(declare-fun x148 () Bool)
(declare-fun x303 () Int)
(declare-fun x421 () Int)
(declare-fun x364 () Int)
(declare-fun x1 () Bool)
(declare-fun x531 () Int)
(declare-fun x183 () Bool)
(declare-fun x515 () Bool)
(declare-fun x69 () Bool)
(declare-fun x841 (Int Int) Int)
(declare-fun x535 () Int)
(declare-fun x348 () Bool)
(declare-fun x803 () Int)
(declare-fun x887 () Bool)
(declare-fun x374 () Bool)
(declare-fun x429 () Int)
(declare-fun x211 () Int)
(declare-fun x547 () Int)
(declare-fun x103 () Bool)
(declare-fun x261 () Bool)
(declare-fun x1020 () Int)
(declare-fun x812 () Bool)
(declare-fun x523 () Int)
(declare-fun x1040 () x514)
(declare-fun x113 () x514)
(declare-fun x830 () Int)
(declare-fun x225 () Bool)
(declare-fun x31 () Bool)
(declare-fun x695 () Bool)
(declare-fun x530 () Int)
(declare-fun x304 () Int)
(declare-fun x133 () Int)
(declare-fun x499 () Int)
(declare-fun x851 () Bool)
(declare-fun x1042 () Bool)
(declare-fun x626 () Int)
(declare-fun x498 () Int)
(declare-fun x1099 (x514) Int)
(declare-fun x820 () Int)
(declare-fun x169 () Bool)
(declare-fun x227 () Bool)
(declare-fun x869 () Int)
(declare-fun x875 () Int)
(declare-fun x81 () Int)
(declare-fun x714 () Int)
(declare-fun x391 () Int)
(declare-fun x112 () Bool)
(declare-fun x709 () Int)
(declare-fun x936 () Int)
(declare-fun x943 () Int)
(declare-fun x698 () Int)
(declare-fun x662 () Int)
(declare-fun x749 () Int)
(declare-fun x1074 () Int)
(declare-fun x457 () Bool)
(declare-fun x200 () Bool)
(declare-fun x779 () Int)
(declare-fun x398 () Bool)
(declare-fun x488 () Int)
(declare-fun x921 () Bool)
(declare-fun x1054 () Int)
(declare-fun x138 () Bool)
(declare-fun x669 () Int)
(declare-fun x865 () Bool)
(declare-fun x141 () Bool)
(declare-fun x317 () Int)
(declare-fun x263 () Int)
(declare-fun x857 () Int)
(declare-fun x672 () Bool)
(declare-fun x646 () Int)
(declare-fun x259 (Int) x514)
(declare-fun x363 () Int)
(declare-fun x976 () Int)
(declare-fun x418 () Bool)
(declare-fun x637 () Int)
(declare-fun x957 () Int)
(declare-fun x48 () Bool)
(declare-fun x719 () Bool)
(declare-fun x124 () Int)
(declare-fun x407 () Bool)
(declare-fun x228 (Int Int) Int)
(declare-fun x897 () Int)
(declare-fun x281 () Int)
(declare-fun x598 () Int)
(declare-fun x20 () Bool)
(declare-fun x894 () Int)
(declare-fun x100 () Int)
(declare-fun x104 () Bool)
(declare-fun x134 () Int)
(declare-fun x903 () Bool)
(declare-fun x796 () x514)
(declare-fun x437 () Int)
(declare-fun x6 () Bool)
(declare-fun x737 (x514) Int)
(declare-fun x233 () Bool)
(declare-fun x176 () Int)
(declare-fun x34 () Int)
(declare-fun x984 () Int)
(declare-fun x972 () Bool)
(declare-fun x452 (x514) Int)
(declare-fun x295 () Bool)
(declare-fun x268 () Bool)
(declare-fun x215 () Int)
(declare-fun x29 () Int)
(declare-fun x942 () Int)
(declare-fun x622 () Bool)
(declare-fun x177 () Int)
(declare-fun x955 () Int)
(declare-fun x985 () Bool)
(declare-fun x1095 () Int)
(declare-fun x1007 () Int)
(declare-fun x941 () Int)
(declare-fun x383 () Bool)
(declare-fun x914 () Bool)
(declare-fun x697 () Bool)
(declare-fun x759 () Bool)
(declare-fun x1055 () Int)
(declare-fun x1047 () Bool)
(declare-fun x191 () Bool)
(declare-fun x57 () Int)
(declare-fun x712 () Bool)
(declare-fun x96 () Int)
(declare-fun x548 () Int)
(declare-fun x173 () Bool)
(declare-fun x585 () Int)
(declare-fun x323 () x514)
(declare-fun x38 () Int)
(declare-fun x287 () x514)
(declare-fun x402 (x514) Int)
(declare-fun x890 () Bool)
(declare-fun x747 () Bool)
(declare-fun x546 () Int)
(declare-fun x22 (x514) Int)
(declare-fun x393 () Int)
(declare-fun x808 () Bool)
(declare-fun x137 () Bool)
(declare-fun x455 () Int)
(declare-fun x136 () Int)
(declare-fun x583 () Bool)
(declare-fun x158 () Bool)
(declare-fun x960 () Bool)
(declare-fun x88 () Int)
(declare-fun x590 () Bool)
(declare-fun x13 () Bool)
(declare-fun x1086 () Int)
(declare-fun x61 () Int)
(declare-fun x755 () Int)
(declare-fun x567 () Int)
(declare-fun x593 () Bool)
(declare-fun x350 () Int)
(declare-fun x17 () Int)
(declare-fun x560 () Bool)
(declare-fun x978 () Bool)
(declare-fun x718 () Bool)
(declare-fun x427 () Bool)
(declare-fun x70 () Int)
(declare-fun x549 () Bool)
(declare-fun x877 () x514)
(declare-fun x791 () Int)
(declare-fun x203 () Bool)
(declare-fun x116 () Bool)
(declare-fun x893 () Int)
(declare-fun x836 (x514) Int)
(declare-fun x90 () Int)
(declare-fun x409 () Bool)
(declare-fun x948 () Int)
(declare-fun x533 () Int)
(declare-fun x420 () Int)
(declare-fun x479 () Int)
(declare-fun x837 () Int)
(declare-fun x901 () Int)
(declare-fun x1065 () Int)
(declare-fun x207 () Int)
(declare-fun x986 () Bool)
(declare-fun x239 () Bool)
(declare-fun x220 () Int)
(declare-fun x202 () Bool)
(declare-fun x536 () Bool)
(declare-fun x682 () Bool)
(declare-fun x1025 () Bool)
(declare-fun x178 () Bool)
(declare-fun x643 (Int) Int)
(declare-fun x642 () Int)
(declare-fun x947 (x514) Int)
(declare-fun x721 () x514)
(declare-fun x368 () Int)
(declare-fun x693 (x514) Int)
(declare-fun x716 () Bool)
(declare-fun x249 () Int)
(declare-fun x316 () Int)
(declare-fun x412 () Bool)
(declare-fun x154 () x514)
(declare-fun x967 () Int)
(declare-fun x1038 () Int)
(declare-fun x932 () Int)
(declare-fun x862 () Int)
(declare-fun x735 () x514)
(declare-fun x401 () Bool)
(declare-fun x956 () Bool)
(declare-fun x54 () Int)
(declare-fun x426 () Int)
(declare-fun x539 (x514) Int)
(declare-fun x922 () Int)
(declare-fun x900 () Int)
(declare-fun x784 () Int)
(declare-fun x603 () Int)
(declare-fun x829 () Int)
(declare-fun x461 () Bool)
(declare-fun x1097 () Bool)
(declare-fun x1052 () Int)
(declare-fun x107 () Int)
(declare-fun x448 () Int)
(declare-fun x489 () Bool)
(declare-fun x360 () Int)
(declare-fun x1030 (Int) Int)
(declare-fun x743 () Int)
(declare-fun x937 () Bool)
(declare-fun x469 () Bool)
(declare-fun x155 () Int)
(declare-fun x896 () Int)
(declare-fun x286 () Bool)
(declare-fun x406 () Int)
(declare-fun x731 () Int)
(declare-fun x264 () Int)
(declare-fun x1070 () Int)
(declare-fun x486 () Bool)
(declare-fun x376 () Int)
(declare-fun x265 () Int)
(declare-fun x5 () Int)
(declare-fun x886 () Int)
(declare-fun x241 () Int)
(declare-fun x495 () Int)
(declare-fun x867 () Bool)
(declare-fun x147 () Int)
(declare-fun x298 () Bool)
(declare-fun x128 () Int)
(declare-fun x400 () Bool)
(declare-fun x450 () Int)
(declare-fun x187 () Bool)
(declare-fun x476 () Bool)
(declare-fun x324 () Int)
(declare-fun x741 () Bool)
(declare-fun x253 () Int)
(declare-fun x1091 () Int)
(declare-fun x920 () Int)
(declare-fun x192 (x514) Int)
(declare-fun x111 () Bool)
(declare-fun x354 () Int)
(declare-fun x898 () Int)
(declare-fun x387 () Bool)
(declare-fun x559 () Bool)
(declare-fun x428 () Bool)
(declare-fun x301 () Int)
(declare-fun x667 () Int)
(declare-fun x551 () Int)
(declare-fun x824 () Bool)
(declare-fun x786 () Bool)
(declare-fun x635 () Bool)
(declare-fun x1000 () Int)
(declare-fun x403 () Bool)
(declare-fun x55 () Int)
(declare-fun x580 () Bool)
(declare-fun x11 () Bool)
(declare-fun x849 () Bool)
(declare-fun x435 () Int)
(declare-fun x226 () Bool)
(declare-fun x1087 () Int)
(declare-fun x1017 () Bool)
(declare-fun x760 () Int)
(declare-fun x1094 (Int) Int)
(declare-fun x246 () Bool)
(declare-fun x844 () Int)
(declare-fun x120 () Int)
(declare-fun x59 () Int)
(declare-fun x881 () Bool)
(declare-fun x880 (x514) Int)
(declare-fun x439 () Bool)
(declare-fun x1072 () Bool)
(declare-fun x742 () Bool)
(declare-fun x772 () Int)
(declare-fun x245 () Int)
(declare-fun x975 () Int)
(declare-fun x912 () Int)
(declare-fun x1012 () Bool)
(declare-fun x684 () Bool)
(declare-fun x129 () Int)
(declare-fun x453 () Bool)
(declare-fun x1026 () Int)
(declare-fun x839 () Bool)
(declare-fun x377 () Bool)
(declare-fun x933 () Int)
(declare-fun x267 () Bool)
(declare-fun x781 () Bool)
(declare-fun x564 (Int) Int)
(declare-fun x181 () Bool)
(declare-fun x491 () Bool)
(declare-fun x483 () Bool)
(declare-fun x1005 () Int)
(declare-fun x456 () Int)
(declare-fun x72 () Int)
(declare-fun x678 () Int)
(declare-fun x624 () Int)
(declare-fun x221 () Int)
(declare-fun x911 () Int)
(declare-fun x74 (x514) Int)
(declare-fun x46 () Bool)
(declare-fun x417 () Int)
(declare-fun x645 () Int)
(declare-fun x852 () Bool)
(declare-fun x676 () Bool)
(declare-fun x795 () Int)
(declare-fun x733 () Int)
(declare-fun x925 () Bool)
(declare-fun x218 () Int)
(declare-fun x160 () Int)
(declare-fun x1035 () Int)
(declare-fun x657 () Int)
(declare-fun x885 () Bool)
(declare-fun x115 () Int)
(declare-fun x349 () Int)
(declare-fun x468 () Bool)
(declare-fun x573 () Bool)
(declare-fun x765 () Bool)
(declare-fun x26 () Int)
(declare-fun x969 () Bool)
(declare-fun x591 () Bool)
(declare-fun x607 () Bool)
(declare-fun x314 () Int)
(declare-fun x582 () Bool)
(declare-fun x355 () Int)
(declare-fun x24 () Bool)
(declare-fun x254 () x514)
(declare-fun x502 () Int)
(declare-fun x636 () Int)
(declare-fun x858 () Bool)
(declare-fun x395 () Int)
(declare-fun x423 () Bool)
(declare-fun x367 () Bool)
(declare-fun x1044 () Int)
(declare-fun x369 () Bool)
(declare-fun x135 () Int)
(declare-fun x724 () Int)
(declare-fun x868 () Int)
(declare-fun x311 () Int)
(declare-fun x146 (x514) Int)
(declare-fun x1084 () Int)
(declare-fun x320 () Int)
(declare-fun x558 () Bool)
(declare-fun x75 () Int)
(declare-fun x1058 () Int)
(declare-fun x404 () Int)
(declare-fun x782 () Int)
(declare-fun x861 () Bool)
(declare-fun x410 () Int)
(declare-fun x1027 () Int)
(declare-fun x338 () Bool)
(declare-fun x677 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x966 () Int)
(declare-fun x119 () Int)
(declare-fun x97 () Int)
(declare-fun x756 (Int) Int)
(declare-fun x65 () Bool)
(declare-fun x60 () Int)
(declare-fun x696 () Bool)
(declare-fun x256 () Int)
(declare-fun x762 () Bool)
(declare-fun x361 () Bool)
(declare-fun x212 () Bool)
(declare-fun x1092 () Bool)
(declare-fun x597 () Bool)
(declare-fun x431 () Bool)
(declare-fun x325 () Int)
(declare-fun x92 () Bool)
(declare-fun x63 () Int)
(declare-fun x630 () Int)
(declare-fun x99 () Int)
(declare-fun x1053 () Bool)
(declare-fun x777 () Int)
(declare-fun x271 () x514)
(declare-fun x170 () Int)
(declare-fun x67 () Bool)
(declare-fun x422 () Int)
(declare-fun x615 () Int)
(declare-fun x140 () Int)
(declare-fun x507 () Int)
(declare-fun x790 () Bool)
(declare-fun x699 () Int)
(declare-fun x770 () Bool)
(declare-fun x327 () Int)
(declare-fun x612 () Int)
(declare-fun x738 () Bool)
(declare-fun x436 () Bool)
(declare-fun x1013 (x514) Int)
(declare-fun x449 () Int)
(declare-fun x464 () Int)
(declare-fun x114 () Int)
(declare-fun x306 (x514) Int)
(declare-fun x870 () Bool)
(declare-fun x465 () Bool)
(declare-fun x415 () Bool)
(declare-fun x692 () Int)
(declare-fun x853 () Bool)
(declare-fun x478 () Bool)
(declare-fun x293 () Int)
(declare-fun x888 () Bool)
(declare-fun x654 () Int)
(declare-fun x666 () Bool)
(declare-fun x826 () Int)
(declare-fun x971 () Bool)
(declare-fun x572 () Int)
(declare-fun x84 () Bool)
(declare-fun x411 () Int)
(declare-fun x892 (Int) Int)
(declare-fun x459 () Bool)
(declare-fun x990 (Int Int) Int)
(declare-fun x18 () Bool)
(declare-fun x275 () Int)
(declare-fun x255 () Bool)
(declare-fun x487 () Int)
(declare-fun x139 () Bool)
(declare-fun x641 () Int)
(declare-fun x1004 () Int)
(declare-fun x414 () Int)
(declare-fun x381 () Int)
(declare-fun x1081 () Int)
(declare-fun x1043 () Int)
(declare-fun x627 () Bool)
(declare-fun x529 () Bool)
(declare-fun x889 () Bool)
(declare-fun x928 () Bool)
(declare-fun x1057 () Int)
(declare-fun x213 (Int) Int)
(declare-fun x159 () Int)
(declare-fun x605 () Int)
(declare-fun x143 () Int)
(declare-fun x689 () Bool)
(declare-fun x959 () Bool)
(declare-fun x965 () Bool)
(declare-fun x773 () Bool)
(declare-fun x700 () Bool)
(declare-fun x832 () Int)
(declare-fun x842 () Int)
(declare-fun x644 () Int)
(declare-fun x953 () Int)
(declare-fun x384 () Int)
(declare-fun x73 () Bool)
(declare-fun x219 () Bool)
(declare-fun x23 () Bool)
(declare-fun x1029 () Bool)
(declare-fun x416 () Bool)
(declare-fun x687 () Int)
(declare-fun x625 () Bool)
(declare-fun x856 () Int)
(declare-fun x237 () Int)
(declare-fun x336 () Int)
(declare-fun x815 () Int)
(declare-fun x172 () Int)
(declare-fun x668 () Bool)
(declare-fun x707 () Bool)
(declare-fun x785 () Int)
(declare-fun x278 () Int)
(declare-fun x242 () Int)
(define-fun x768 ((x514 x514) (x619 Int)) x514 (ite ((_ is x840) x514) (x840 (x683 x514) (+ x619 (x989 x514))) (ite ((_ is x621) x514) (x621 (x234 x514) (x174 x514) (+ x619 (x520 x514))) (x164 (+ (x157 x514) x619)))))
(define-fun x260 ((x224 Int)) Int (ite (and (>= x224 0) (< x224 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x224 (- x224 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x555 ((x224 Int)) Int (ite (and (< x224 0) (>= x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x224) x224))
(define-fun x717 ((x670 Int)) Bool (and (<= 0 x670) (< x670 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1064 ((x670 Int)) Bool (and (= (x228 x670 115792089237316195423570985008687907853269984665640564039457584007913129639935) x670) (= (x228 115792089237316195423570985008687907853269984665640564039457584007913129639935 x670) x670)))
(define-fun x556 ((x670 Int)) Bool (and (= (x228 x670 0) 0) (= (x228 0 x670) 0)))
(define-fun x594 ((x670 Int)) Bool (= x670 (x228 x670 x670)))
(define-fun x1014 ((x670 Int)) Bool (and (x594 x670) (x1064 x670) (x556 x670)))
(define-fun x378 ((x670 Int) (x1093 Int)) Bool (= (x228 x670 x1093) (x228 x1093 x670)))
(define-fun x182 ((x670 Int) (x1093 Int)) Bool (and (=> (>= x1093 0) (<= (x228 x670 x1093) x1093)) (<= 0 (x228 x670 x1093)) (=> (>= x670 0) (>= x670 (x228 x670 x1093)))))
(define-fun x1048 ((x670 Int) (x1093 Int)) Bool (and (x182 x670 x1093) (x378 x670 x1093)))
(define-fun x884 ((x670 Int)) Bool (= (+ (x228 x670 1208907372870555465154560) (mod x670 18446744073709551616)) (mod x670 1208925819614629174706176)))
(define-fun x891 ((x670 Int)) Bool (and (x884 x670) (x1048 x670 1208907372870555465154560)))
(define-fun x3 ((x670 Int)) Bool (= (+ (x228 x670 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x670 32)) (mod x670 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x575 ((x670 Int)) Bool (and (x3 x670) (x1048 x670 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x273 ((x670 Int)) Bool (= (mod x670 6582018229284824168619876730229402019930943462534319453394436096) (+ (x228 x670 6582018229189043197315758676582005330734049138558148258257960960) (mod x670 95780971304118053647396689196894323976171195136475136))))
(define-fun x525 ((x670 Int)) Bool (and (x273 x670) (x1048 x670 6582018229189043197315758676582005330734049138558148258257960960)))
(define-fun x929 ((x670 Int)) Bool (=> (and (<= 0 x670) (< x670 2)) (= 0 (x228 77194726158210796949047323339125271902179989777093709359638389338608753093290 x670))))
(define-fun x664 ((x670 Int)) Bool (and (x929 x670) (x1048 x670 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(define-fun x979 ((x670 Int)) Bool (= (mod x670 7237005577332262213973186563042994240829374041602535252466099000494570602496) (+ (mod x670 6582018229284824168619876730229402019930943462534319453394436096) (x228 x670 7237005577325680195743901738874374364099144639582604309003564681041176166400))))
(define-fun x33 ((x670 Int)) Bool (and (x1048 x670 7237005577325680195743901738874374364099144639582604309003564681041176166400) (x979 x670)))
(define-fun x1062 ((x670 Int)) Bool (= (mod x670 72057594037927936) (+ (x228 x670 71776119061217280) (mod x670 281474976710656))))
(define-fun x789 ((x670 Int)) Bool (and (x1062 x670) (x1048 x670 71776119061217280)))
(define-fun x963 ((x670 Int)) Bool (and (= (x799 115792089237316195423570985008687907853269984665640564039457584007913129639935 x670) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x799 x670 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x184 ((x670 Int)) Bool (and (= (x799 0 x670) x670) (= x670 (x799 x670 0))))
(define-fun x130 ((x670 Int)) Bool (= x670 (x799 x670 x670)))
(define-fun x206 ((x670 Int)) Bool (and (x184 x670) (x963 x670) (x130 x670)))
(define-fun x725 ((x670 Int) (x1093 Int)) Bool (= (x799 x670 x1093) (x799 x1093 x670)))
(define-fun x1037 ((x670 Int) (x1093 Int)) Bool (and (=> (<= 0 x1093) (<= x1093 (x799 x670 x1093))) (=> (>= x670 0) (>= (x799 x670 x1093) x670)) (<= (x799 x670 x1093) (+ x670 x1093))))
(define-fun x312 ((x670 Int) (x1093 Int)) Bool (and (x725 x670 x1093) (x1037 x670 x1093)))
(define-fun x902 ((x670 Int)) Bool (= (+ (mod x670 72057594037927936) (x228 x670 72057594037927936)) (mod x670 144115188075855872)))
(define-fun x1096 ((x670 Int)) Bool (and (x1048 x670 72057594037927936) (x902 x670)))
(define-fun x544 ((x670 Int)) Bool (= (+ (x228 x670 144115188075855872) (mod x670 144115188075855872)) (mod x670 288230376151711744)))
(define-fun x19 ((x670 Int)) Bool (and (x1048 x670 144115188075855872) (x544 x670)))
(define-fun x1089 ((x670 Int)) Bool (= (mod x670 576460752303423488) (+ (mod x670 288230376151711744) (x228 x670 288230376151711744))))
(define-fun x252 ((x670 Int)) Bool (and (x1048 x670 288230376151711744) (x1089 x670)))
(define-fun x125 ((x670 Int)) Bool (= (mod x670 1152921504606846976) (+ (x228 x670 576460752303423488) (mod x670 576460752303423488))))
(define-fun x628 ((x670 Int)) Bool (and (x1048 x670 576460752303423488) (x125 x670)))
(define-fun x835 ((x670 Int)) Bool (= (mod x670 2305843009213693952) (+ (x228 x670 1152921504606846976) (mod x670 1152921504606846976))))
(define-fun x694 ((x670 Int)) Bool (and (x835 x670) (x1048 x670 1152921504606846976)))
(define-fun x987 ((x670 Int)) Bool (= (x228 x670 340282366920938463463374607431768211455) (mod x670 340282366920938463463374607431768211456)))
(define-fun x750 ((x670 Int)) Bool (and (x987 x670) (x1048 x670 340282366920938463463374607431768211455)))
(define-fun x879 ((x670 Int)) Bool (= (mod x670 2) (x228 x670 1)))
(define-fun x365 ((x670 Int)) Bool (and (x879 x670) (x1048 x670 1)))
(define-fun x794 ((x670 Int)) Bool (= (mod x670 1099511627776) (x228 x670 1099511627775)))
(define-fun x45 ((x670 Int)) Bool (and (x794 x670) (x1048 x670 1099511627775)))
(define-fun x79 ((x339 Int)) Int (ite (= x339 256) (ite false 1 0) (x345 x339)))
(define-fun x766 ((x339 Int)) Int (ite (= x339 288) 29360345738620397371765038775553738755387432804059789257388031015462633472000 (x643 x339)))
(define-fun x358 ((x339 Int)) Int (ite (= x339 292) 52 (x766 x339)))
(define-fun x467 ((x339 Int)) Int (ite (= x339 324) 54 (x358 x339)))
(define-fun x846 ((x339 Int)) Int (ite (= 356 x339) (x991 x323) (x467 x339)))
(define-fun x690 ((x339 Int)) Int (ite (= 388 x339) x53 (x846 x339)))
(define-fun x1018 ((x339 Int)) Int (ite (= x339 420) x165 (x690 x339)))
(define-fun x883 ((x339 Int)) Int (ite (= x339 452) x382 (x1018 x339)))
(define-fun x938 ((x339 Int)) Int (ite (= x339 484) x316 (x883 x339)))
(define-fun x161 ((x339 Int)) Int (ite (= x339 516) (ite x268 1 0) (x938 x339)))
(define-fun x472 ((x339 Int)) Int (ite (= x339 1664) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x537 x339)))
(define-fun x581 ((x339 Int)) Int (ite (and (> (+ 1664 32) x339) (<= 1664 x339)) (x711 (+ (- x339 1664) 0)) (x472 x339)))
(define-fun x274 ((x339 Int)) Int (ite (= x339 288) x386 (x161 x339)))
(define-fun x946 ((x339 Int)) Int (ite x187 (x274 x339) (x161 x339)))
(define-fun x600 ((x339 Int)) Int (ite x838 (x581 x339) (x472 x339)))
(define-fun x727 ((x339 Int)) Int (ite (= x339 x850) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x600 x339)))
(define-fun x229 ((x339 Int)) Int (ite (and (>= x339 x850) (> (+ x850 128) x339)) (x723 (+ (- x339 x850) 0)) (x727 x339)))
(define-fun x332 ((x339 Int)) Int (ite x601 (x229 x339) (x727 x339)))
(define-fun x776 ((x339 Int)) Int (ite (= x339 x800) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x332 x339)))
(define-fun x1024 ((x339 Int)) Int (ite (= x339 x349) x316 (x776 x339)))
(define-fun x109 ((x339 Int)) Int (ite (and (>= x339 x800) (< x339 (+ x800 32))) (x1030 (+ (- x339 x800) 0)) (x1024 x339)))
(define-fun x778 ((x339 Int)) Int (ite x801 (x109 x339) (x1024 x339)))
(define-fun x1032 ((x339 Int)) Int (ite (= x1051 x339) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x778 x339)))
(define-fun x1082 ((x339 Int)) Int (ite (= x642 x339) x316 (x1032 x339)))
(define-fun x1015 ((x339 Int)) Int (ite (and (< x339 (+ x1051 32)) (>= x339 x1051)) (x756 (+ (- x339 x1051) 0)) (x1082 x339)))
(define-fun x905 ((x339 Int)) Int (ite x934 (x1015 x339) (x1082 x339)))
(define-fun x532 ((x339 Int)) Int (ite (= x304 x339) 2 (x905 x339)))
(define-fun x149 ((x339 Int)) Int (ite (= x932 x339) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x532 x339)))
(define-fun x866 ((x339 Int)) Int (ite (= x548 x339) 2 (x149 x339)))
(define-fun x764 ((x339 Int)) Int (ite (= x547 x339) 23605076785439214643232854609925391371455184862258269280504658849269400207360 (x866 x339)))
(define-fun x198 ((x339 Int)) Int (ite (= x339 x548) 2 (x149 x339)))
(define-fun x541 ((x339 Int)) Int (ite (= x339 x389) 23605076785439214643232854609925391371455184862258269280504658849269400207360 (x198 x339)))
(define-fun x656 ((x339 Int)) Int (ite x403 (x764 x339) (x541 x339)))
(define-fun x171 ((x339 Int)) Int (ite (= x988 x339) 2 (x656 x339)))
(define-fun x763 ((x339 Int)) Int (ite (= x339 x837) 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x171 x339)))
(define-fun x703 ((x339 Int)) Int (ite (= x392 x339) 2 (x763 x339)))
(define-fun x1059 ((x339 Int)) Int (ite (= x339 x311) 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x703 x339)))
(define-fun x151 ((x339 Int)) Int (ite (= x204 x339) 2 (x1059 x339)))
(define-fun x671 ((x339 Int)) Int (ite (= x953 x339) 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x151 x339)))
(define-fun x319 ((x339 Int)) Int (ite (= x204 x339) 2 (x1059 x339)))
(define-fun x470 ((x339 Int)) Int (ite (= x507 x339) 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x319 x339)))
(define-fun x217 ((x339 Int)) Int (ite x326 (x671 x339) (x470 x339)))
(define-fun x680 ((x339 Int)) Int (ite (= x352 x339) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x217 x339)))
(define-fun x923 ((x339 Int)) Int (ite (= x339 x256) x300 (x680 x339)))
(define-fun x52 ((x339 Int)) Int (ite (and (>= x339 x352) (> (+ x352 32) x339)) (x504 (+ (- x339 x352) 0)) (x923 x339)))
(define-fun x939 ((x339 Int)) Int (ite x648 (x52 x339) (x923 x339)))
(define-fun x248 ((x339 Int)) Int (ite x928 (x217 x339) (x939 x339)))
(define-fun x754 ((x339 Int)) Int (ite (= x339 x1060) 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x248 x339)))
(define-fun x570 ((x339 Int)) Int (ite (= x339 x218) x316 (x754 x339)))
(define-fun x308 ((x339 Int)) Int (ite (= x339 x5) x907 (x570 x339)))
(define-fun x977 ((x339 Int)) Int (ite (and (< x339 (+ 64 x1060)) (>= x339 x1060)) (x213 (+ 0 (- x339 x1060))) (x308 x339)))
(define-fun x878 ((x339 Int)) Int (ite (= x339 x1060) 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x248 x339)))
(define-fun x973 ((x339 Int)) Int (ite (= x339 x899) x316 (x878 x339)))
(define-fun x734 ((x339 Int)) Int (ite (= x339 x437) x907 (x973 x339)))
(define-fun x688 ((x339 Int)) Int (ite (= x72 x339) x88 (x734 x339)))
(define-fun x342 ((x339 Int)) Int (ite (and (> (+ x1060 32) x339) (>= x339 x1060)) (x892 (+ 0 (- x339 x1060))) (x688 x339)))
(define-fun x818 ((x339 Int)) Int (ite x741 (x977 x339) (x308 x339)))
(define-fun x569 ((x339 Int)) Int (ite x851 (x342 x339) (x688 x339)))
(define-fun x950 ((x339 x514)) Int (ite x839 (ite x851 (x146 x339) (x880 x339)) (ite x741 (x693 x339) (x880 x339))))
(define-fun x817 ((x339 x514)) Int (ite x839 (ite x851 (x230 x339) (x2 x339)) (ite x741 (x106 x339) (x2 x339))))
(define-fun x798 ((x339 x514)) Int (ite x839 (ite x851 (x639 x339) (x452 x339)) (ite x741 (x192 x339) (x452 x339))))
(define-fun x722 ((x339 x514)) Int (ite x839 (ite x851 (x836 x339) (x1069 x339)) (ite x741 (x122 x339) (x1069 x339))))
(define-fun x562 ((x339 x514)) Int (ite x839 (ite x851 (x1068 x339) (x238 x339)) (ite x741 (x144 x339) (x238 x339))))
(define-fun x1021 ((x339 x514)) Int (ite x839 (ite x851 (x737 x339) (x1013 x339)) (ite x741 (x180 x339) (x1013 x339))))
(define-fun x150 ((x339 x514)) Int (ite x839 (ite x851 (x970 x339) (x74 x339)) (ite x741 (x827 x339) (x74 x339))))
(define-fun x1066 ((x339 x514)) Int (ite x839 (ite x851 (x539 x339) (x918 x339)) (ite x741 (x196 x339) (x918 x339))))
(define-fun x659 ((x339 Int)) Int (ite x839 (x569 x339) (x818 x339)))
(define-fun x466 ((x339 x514)) Int (ite (= x910 x339) x554 (x950 x339)))
(define-fun x394 ((x339 x514)) Int (ite x937 (x950 x339) (x466 x339)))
(define-fun x438 ((x339 Int)) Int (ite (= x384 x339) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x659 x339)))
(define-fun x89 ((x339 Int)) Int (ite (= x538 x339) x498 (x438 x339)))
(define-fun x809 ((x339 Int)) Int (ite (= x743 x339) x1057 (x89 x339)))
(define-fun x859 ((x339 Int)) Int (ite (= x339 x909) 0 (x809 x339)))
(define-fun x190 ((x339 Int)) Int (ite (= x339 x471) x896 (x859 x339)))
(define-fun x1003 ((x339 Int)) Int (ite (= x657 x339) x354 (x190 x339)))
(define-fun x25 ((x339 Int)) Int (ite (= x339 x962) x698 (x1003 x339)))
(define-fun x787 ((x339 Int)) Int (ite (= x293 x339) x83 (x25 x339)))
(define-fun x329 ((x339 Int)) Int (ite (= x339 x241) x53 (x787 x339)))
(define-fun x492 ((x339 Int)) Int (ite (= x955 x339) x59 (x329 x339)))
(define-fun x373 ((x339 Int)) Int (ite (and (< x339 (+ 96 x384)) (>= x339 x384)) (x834 (+ 0 (- x339 x384))) (x492 x339)))
(define-fun x357 ((x339 Int)) Int (ite x579 (x373 x339) (x492 x339)))
(define-fun x860 ((x339 Int)) Int (ite (= x511 x339) x119 (x357 x339)))
(define-fun x736 ((x339 Int)) Int (ite (= x339 x21) x1026 (x860 x339)))
(define-fun x497 ((x339 Int)) Int (ite (= x339 x448) x709 (x736 x339)))
(define-fun x175 ((x339 Int)) Int (ite (= x100 x339) x420 (x497 x339)))
(define-fun x1083 ((x339 Int)) Int (ite (= x753 x339) x88 (x175 x339)))
(define-fun x825 ((x339 Int)) Int (ite (= x339 x511) 2 (x1083 x339)))
(define-fun x807 ((x339 Int)) Int (ite (= x299 x339) 24969082719448127345671160280498924465674002430646247116174538836667302674432 (x825 x339)))
(define-fun x935 ((x339 Int)) Int (ite x937 (x1083 x339) (x807 x339)))
(define-fun x344 ((x339 Int)) Int (ite (= x208 x339) x623 (x935 x339)))
(define-fun x285 ((x339 Int)) Int (ite (= x208 x339) 0 (x935 x339)))
(define-fun x123 ((x339 Int)) Int (ite x773 (x935 x339) (ite x330 (x344 x339) (x285 x339))))
(define-fun x983 ((x339 Int)) Int (ite (= x339 x208) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x123 x339)))
(define-fun x47 ((x339 Int)) Int (ite (= x339 x857) x300 (x983 x339)))
(define-fun x816 ((x339 Int)) Int (ite (= x339 x479) x59 (x47 x339)))
(define-fun x296 ((x339 Int)) Int (ite (= x236 x339) x907 (x816 x339)))
(define-fun x289 ((x339 Int)) Int (ite (and (> (+ 0 0) x339) (>= x339 0)) (x1094 (+ (- x339 0) 0)) (x296 x339)))
(define-fun x1078 ((x339 Int)) Int (ite x408 (x289 x339) (x296 x339)))
(define-fun x649 ((x339 Int)) Int (ite (and (>= x339 0) (> (+ x596 0) x339)) (x1094 (+ (- x339 0) 0)) (x1078 x339)))
(define-fun x873 ((x339 Int)) Int (ite x353 (x1078 x339) (x649 x339)))
(define-fun x534 ((x339 Int)) Int (ite (= x208 x339) 61906025702411949798612179514519095217898697161212278170789384498383220113408 (x873 x339)))
(define-fun x307 ((x339 Int)) Int (ite (= x485 x339) x300 (x534 x339)))
(define-fun x433 ((x339 Int)) Int (ite (= x37 x339) x907 (x307 x339)))
(define-fun x864 ((x339 Int)) Int (ite (and (<= x208 x339) (< x339 (+ 0 x208))) (x564 (+ (- x339 x208) 0)) (x433 x339)))
(define-fun x631 ((x339 Int)) Int (ite (= x208 x339) 97250886131833805217759495634388081419703557252615901133360390455399389593600 (x123 x339)))
(define-fun x163 ((x339 Int)) Int (ite (= x339 x406) x300 (x631 x339)))
(define-fun x460 ((x339 Int)) Int (ite (= x339 x346) x59 (x163 x339)))
(define-fun x484 ((x339 Int)) Int (ite (= x281 x339) x907 (x460 x339)))
(define-fun x493 ((x339 Int)) Int (ite (= x68 x339) x420 (x484 x339)))
(define-fun x458 ((x339 Int)) Int (ite (and (>= x339 x208) (< x339 (+ x208 0))) (x4 (+ (- x339 x208) 0)) (x493 x339)))
(define-fun x613 ((x339 Int)) Int (ite x16 (ite x593 (x864 x339) (x433 x339)) (ite x944 (x458 x339) (x493 x339))))
(define-fun x250 ((x339 Int)) Int (ite (= x208 x339) x907 (x613 x339)))
(define-fun x783 ((x339 Int)) Int (ite (= x339 x543) (ite x813 1 0) (x250 x339)))
(define-fun x66 ((x339 Int)) Int (ite (= x208 x339) x907 (x783 x339)))
(define-fun x617 ((x339 x514)) Int (ite x408 (x746 x339) (x722 x339)))
(define-fun x521 ((x670 Int)) Bool (=> (and (not (= 1383405463 x670)) (not (= x670 509899769)) (not (= x670 72057594037927936)) (not (= 1208907372870555465154560 x670)) (not (= 1118877564 x670)) (not (= 71776119061217280 x670)) (not (= x670 77194726158210796949047323339125271902179989777093709359638389338608753093290)) (not (= x670 18446744073709551615)) (not (= x670 24969082719448127345671160280498924465674002430646247116174538836667302674432)) (not (= x670 340282366920938463463374607431768211455)) (not (= 1000000000000000000000000000 x670)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x670)) (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 x670)) (not (= x670 2054196882)) (not (= x670 110890046519461262771209238963172350779326551179552054297210380410598264406016)) (not (= x670 1461501637330902918203684832716283019655932542975)) (not (= 576460752303423488 x670)) (not (= x670 50942633119752846454219349998365661925608737367104304655302372697894809501696)) (not (= 1463475841 x670)) (not (= x670 54940573406046109056602222415596668683460243721328594580962599660119180443648)) (not (= x670 22716352711855687325452455967051703357993960462129832944569490930019212460032)) (not (= x670 115792089237316195423570985008687907853269984665640564039457584007913129634935)) (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 x670)) (not (= x670 6582018229189043197315758676582005330734049138558148258257960960)) (not (= 1152921504606846976 x670)) (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 x670)) (not (= 994519296000000 x670)) (not (= x670 1142400387)) (not (= x670 65536)) (> x670 10000) (not (= 1099511627776 x670)) (not (= x670 500000000000000000000000000)) (not (= x670 31536000)) (not (= x670 22711052170661352172463706074549474602446478010439206087695126111415334600704)) (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 x670)) (not (= 946116605 x670)) (not (= x670 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x670 1099511627775)) (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 x670)) (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 x670)) (not (= x670 340282366920938463463374607431768211456)) (not (= x670 97250886131833805217759495634388081419703557252615901133360390455399389593600)) (not (= 1461501637330902918203684832716283019655932542976 x670)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x670)) (not (= x670 65535)) (not (= x670 288230376151711744)) (not (= x670 7237005577325680195743901738874374364099144639582604309003564681041176166400)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x670)) (not (= x670 1089035750)) (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 x670)) (not (= 4294967296 x670)) (not (= x670 1635491895)) (not (= x670 144115188075855872)) (not (= x670 80397878463760440755375692149700041695399247739548614023716483005714108776448))) (not ((_ is x164) (x259 x670)))))
(assert (x1014 77194726158210796949047323339125271902179989777093709359638389338608753093290))
(assert (= 1000000000000000000000000000 (x991 (x164 1000000000000000000000000000))))
(assert (x750 x1026))
(assert (x717 x263))
(assert (x717 x857))
(assert (x1014 x1026))
(assert (x1014 x637))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (x991 (x164 115792089237316195423570985008687907853269984665640564039457584007913129634935))))
(assert (x717 x897))
(assert (x717 x749))
(assert (x717 x35))
(assert (= x951 (=> (and (or (not x200) x200) (= x200 (= x131 0))) x513)))
(assert (= (and x298 x267) x353))
(assert (x717 x595))
(assert (x717 x118))
(assert (x717 x283))
(assert (= 1142400387 (x991 (x164 1142400387))))
(assert (x1014 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (= (x991 (x164 1383405463)) 1383405463))
(assert (x717 x293))
(assert (x717 x356))
(assert (x717 x499))
(assert (x717 x376))
(assert (x717 x900))
(assert (x717 x53))
(assert (x717 x606))
(assert (= (div x324 18446744073709551616) (x78 x324 64)))
(assert (= x173 (or x934 x1075)))
(assert (= x1058 (x991 (x259 x1058))))
(assert (x717 x566))
(assert (x717 x1095))
(assert (= (x164 22712819017726130556793289372050217520962305494336081706653247717616627220480) (x259 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x750 x1028))
(assert (x717 x43))
(assert (x717 x563))
(assert (x717 x615))
(assert (= 71776119061217280 (x991 (x164 71776119061217280))))
(assert (x717 x850))
(assert (x206 x143))
(assert (x521 x55))
(assert (x717 x395))
(assert (x717 x743))
(assert (= x323 (x259 (x991 x323))))
(assert (x1014 x153))
(assert (x717 x988))
(assert (x717 x386))
(assert (x717 x871))
(assert (x1014 x451))
(assert (= (=> (and (= x543 (x260 (+ x208 32))) (= (x66 x208) x386) (= (not (= 0 x981)) x813) (= 32 x167) (= 1 x102)) x291) x558))
(assert (x717 x775))
(assert (x717 x455))
(assert (x717 x655))
(assert (x717 x1070))
(assert (x717 x311))
(assert (x717 x826))
(assert (x19 x451))
(assert (=> (>= 10000 x316) (= (x164 x316) (x259 x316))))
(assert (= (x259 1142400387) (x164 1142400387)))
(assert (= x226 (and (not x461) x927)))
(assert (= (or x442 x773) x927))
(assert (x717 x391))
(assert (x717 x638))
(assert (x717 x107))
(assert (= (and x589 x573) x557))
(assert (x717 x253))
(assert (= (x991 (x164 77194726158210796949047323339125271902179989777093709359638389338608753093290)) 77194726158210796949047323339125271902179989777093709359638389338608753093290))
(assert (= x937 (and x141 (not x956))))
(assert (x1014 x709))
(assert (x717 x474))
(assert (x1014 72057594037927936))
(assert (x717 x1000))
(assert (x717 x588))
(assert (= (x991 (x164 994519296000000)) 994519296000000))
(assert (x717 x54))
(assert (x717 x769))
(assert (= x117 (=> (and (and (= x677 (< 0 x15)) (= (x260 (+ 1664 x761)) x850) (= x422 (x260 (+ x757 31))) (not x246) (= (= x900 0) x246) (not x625) (= x325 (x600 1664)) (= (or (> x757 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x757 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x757)))) x625) (= x761 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x422))) (or (and (= x242 x15) (not x677)) (and (and (< x713 4294967296) (= 1 x242)) x677))) x65)))
(assert (x717 x321))
(assert (x717 x494))
(assert (x717 x994))
(assert (= (x991 (x164 1089035750)) 1089035750))
(assert (= (div x85 95780971304118053647396689196894323976171195136475136) (x78 x85 176)))
(assert (x717 x538))
(assert (x1014 x954))
(assert (= x801 (and x980 x93)))
(assert (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x991 (x164 74874610042509929465218460033027201126834042060343647393369405262880053395456))))
(assert (= (and (not x199) x359) x162))
(assert (x521 x53))
(assert (= (x259 54940573406046109056602222415596668683460243721328594580962599660119180443648) (x164 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x717 x76))
(assert (x717 x1031))
(assert (=> (<= x266 10000) (= (x259 x266) (x164 x266))))
(assert (x1014 1))
(assert (= x483 (=> (and (or (and x298 (and (< 0 x231) (= (x1080 (x259 x53)) x231) (= x810 1))) (and (not x298) (and (= x596 32) (= (= x943 0) x383) (= (ite x1008 1 0) x810) (= (not x383) x1008)))) (and (> x283 0) (= (= 0 x596) x298))) x183)))
(assert (= (x991 (x164 72057594037927936)) 72057594037927936))
(assert (= (x259 71776119061217280) (x164 71776119061217280)))
(assert (x717 x232))
(assert (x717 x785))
(assert (x717 x61))
(assert (x717 x63))
(assert (= x712 (or x322 x648)))
(assert (= x235 (=> (and (= (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x397) x995) (= x134 (x818 x1060)) (= (= 0 x179) x288) (= x1074 x698) (not x288) (= (x818 x1011) x1074) (= x696 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x916)) (> 64 x916)) (> x916 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not x696) (= x134 x896) (= (x260 (+ 32 x1060)) x1011) (= x314 (x260 (+ x1060 x995))) (= x936 x314) (= (x260 (+ 31 x916)) x397) (= x86 x325)) x121)))
(assert (x717 x679))
(assert (x717 x966))
(assert (x717 x172))
(assert (x717 x692))
(assert (= (x991 (x259 x430)) x430))
(assert (= x203 (and x867 x219)))
(assert (x717 x642))
(assert (= (x259 31536000) (x164 31536000)))
(assert (= x616 (and x1029 x413)))
(assert (x717 x748))
(assert (x717 x993))
(assert (x717 x505))
(assert (x717 x379))
(assert (x717 x760))
(assert (x717 x140))
(assert (x1014 x895))
(assert (x717 x779))
(assert (= (x991 (x259 x87)) x87))
(assert (= (and x416 (not x419)) x31))
(assert (x575 x422))
(assert (x717 x370))
(assert (= (x164 1152921504606846976) (x259 1152921504606846976)))
(assert (= x385 (and x267 (not x298))))
(assert (x717 x435))
(assert (=> (>= 10000 x815) (= (x164 x815) (x259 x815))))
(assert (x717 x396))
(assert (x717 x922))
(assert (= (x991 (x164 18446744073709551615)) 18446744073709551615))
(assert (x1014 x760))
(assert (x1014 144115188075855872))
(assert (x717 x844))
(assert (x1014 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x717 x1060))
(assert (x717 x498))
(assert (x717 x757))
(assert (= (x991 (x164 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x717 x10))
(assert (x717 x399))
(assert (= x510 (=> (and (not x1025) (= (= x391 0) x1025)) x558)))
(assert (x717 x546))
(assert (= x572 (x991 (x259 x572))))
(assert (x717 x143))
(assert (x717 x152))
(assert (x717 x430))
(assert (= x193 (or x92 x403)))
(assert (x717 x669))
(assert (= 340282366920938463463374607431768211455 (x991 (x164 340282366920938463463374607431768211455))))
(assert (= x931 (or x477 (and (not x407) x486))))
(assert (x1048 x620 x667))
(assert (x521 x654))
(assert (x717 x875))
(assert (x717 x114))
(assert (x717 x88))
(assert (x717 x451))
(assert (= (x259 18446744073709551615) (x164 18446744073709551615)))
(assert (x717 x266))
(assert (x717 x1091))
(assert (x717 x156))
(assert (= (or x741 x675) x486))
(assert (x717 x819))
(assert (x717 x1035))
(assert (x521 x982))
(assert (x717 x954))
(assert (x717 x948))
(assert (x717 x456))
(assert (x717 x485))
(assert (= (+ 1 (x991 x287)) (x991 (x768 x287 1))))
(assert (= (+ (x991 x50) 1) (x991 (x768 x50 1))))
(assert (= (and (not x584) x557) x653))
(assert (x717 x81))
(assert (x717 x127))
(assert (x521 x430))
(assert (= (x732 1 x456) (mod (ite (< x456 256) (x841 2 x456) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x717 x632))
(assert (x717 x791))
(assert (x575 x1044))
(assert (x717 x426))
(assert (= 1099511627775 (x991 (x164 1099511627775))))
(assert (x717 x318))
(assert (= (and x1046 x959) x326))
(assert (x717 x44))
(assert (= (x991 (x259 x996)) x996))
(assert (= x416 (or (and x351 (not x526)) x401)))
(assert (x717 x691))
(assert (x717 x294))
(assert (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x991 (x164 71356987572919795984103299673912204194632180251134163011139925636576289226752))))
(assert (not x469))
(assert (x717 x102))
(assert (= (x164 340282366920938463463374607431768211456) (x259 340282366920938463463374607431768211456)))
(assert (x717 x99))
(assert (x717 x124))
(assert (x717 x547))
(assert (x717 x15))
(assert (x717 x335))
(assert (x1014 x397))
(assert (= x139 (and x674 x148)))
(assert (x717 x586))
(assert (x1014 x335))
(assert (= (x78 x1016 1) (div x1016 2)))
(assert (x717 x618))
(assert (x717 x795))
(assert (= (x991 (x164 7237005577325680195743901738874374364099144639582604309003564681041176166400)) 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (x717 x949))
(assert (=> (>= 10000 x531) (= (x164 x531) (x259 x531))))
(assert (= (or x326 x870) x178))
(assert (= x622 (and x528 x806)))
(assert (= (x164 71356987572919795984103299673912204194632180251134163011139925636576289226752) (x259 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (x717 x894))
(assert (= (or x522 x579) x141))
(assert (= x858 (and x468 x635)))
(assert (x717 x362))
(assert (x717 x777))
(assert (x717 x49))
(assert (x717 x1074))
(assert (x717 x147))
(assert (= (=> (and (= x335 (div x1000 1000000000000000000000000000)) (= x17 (x228 340282366920938463463374607431768211455 x335)) (= x582 (< x1045 x784)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x805) x1045) (= x1000 (x260 (+ 500000000000000000000000000 x26))) (= (mod (* x805 x784) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x26) (= (not x582) x84) (= x865 (< 340282366920938463463374607431768211455 x335)) (= x882 (or x802 x84)) (< 0 x942) (= x335 x277) (= (= 0 x805) x802) (= (ite x882 1 0) x942) (not x865)) x913) x56))
(assert (= (x259 77194726158210796949047323339125271902179989777093709359638389338608753093290) (x164 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x717 x134))
(assert (x717 x572))
(assert (x365 x1016))
(assert (= (x259 97250886131833805217759495634388081419703557252615901133360390455399389593600) (x164 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (x717 x1020))
(assert (= (=> (and (and (= (x260 (+ 32 x241)) x955) (= (x260 (+ 32 x293)) x241) (= x538 (x260 (+ 4 x384))) (= (x260 (+ 32 x962)) x293) (= (x260 (+ x538 32)) x743) (= (x260 (+ 32 x657)) x962) (= (x260 (+ x909 32)) x471) (= x909 (x260 (+ 32 x743))) (= x657 (x260 (+ 32 x471))) (= x6 (> x506 0))) (or (and (not x6) (= x1050 x506)) (and x6 (and (= 1 x1050) (> 4294967296 x964))))) x986) x650))
(assert (x717 x516))
(assert (x717 x893))
(assert (x717 x303))
(assert (= (and x889 x890) x412))
(assert (= (x259 1461501637330902918203684832716283019655932542976) (x164 1461501637330902918203684832716283019655932542976)))
(assert (x717 x845))
(assert (x717 x70))
(assert (x717 x699))
(assert (x717 x299))
(assert (= (x991 (x768 x796 1)) (+ 1 (x991 x796))))
(assert (= 144115188075855872 (x991 (x164 144115188075855872))))
(assert (= (x991 (x259 x55)) x55))
(assert (x717 x275))
(assert (x717 x437))
(assert (x717 x364))
(assert (= (x164 74874610042509929465218460033027201126834042060343647393369405262880053395456) (x259 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (x717 x1044))
(assert (x717 x1049))
(assert (x717 x389))
(assert (x717 x855))
(assert (x717 x831))
(assert (= (x164 1089035750) (x259 1089035750)))
(assert (=> (<= x55 10000) (= (x164 x55) (x259 x55))))
(assert (x717 x397))
(assert (x717 x243))
(assert (= (x259 1461501637330902918203684832716283019655932542975) (x164 1461501637330902918203684832716283019655932542975)))
(assert (= (x991 (x164 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (x717 x1007))
(assert (= x442 (or x524 x330)))
(assert (= (and x93 (not x980)) x602))
(assert (x717 x310))
(assert (x717 x316))
(assert (= (x259 576460752303423488) (x164 576460752303423488)))
(assert (x717 x1052))
(assert (= x101 (=> (= x108 (= 0 x1020)) (and (=> (and (and (<= x715 340282366920938463463374607431768211455) (= (x555 (- x826 2)) x1016) (= (x150 x254) x715) (>= x715 0) (= x1040 (x621 (x259 x1063) (x259 x185) 0)) (> 340282366920938463463374607431768211456 x715) (= x254 (x768 x1040 9)) (not x388) (= x133 1632) (= (x78 x152 48) x826) (= (> 2 x826) x388) (= x152 (x228 71776119061217280 x451)) (= x1029 (= x826 2))) (not x108)) (and (=> (and x1029 (= 1 x1038)) x604) (=> (and (not x1029) (and (= (= (x799 x1076 x143) 0) x589) (= (ite (> 78 x1016) 1 0) x1076) (= x143 (ite (> 32 x1016) 1 0)))) (and (=> (and (not x589) (= x1038 (x841 10 x1016))) x604) (=> (and x589 (= x584 (> x1016 1))) (and (=> (and (not x584) (and (= x379 1) (= 10 x350))) x225) (=> x584 x331))))))) (=> (and (= x943 x803) x108) x398)))))
(assert (x717 x907))
(assert (= (x259 61906025702411949798612179514519095217898697161212278170789384498383220113408) (x164 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (x717 x701))
(assert (x717 x975))
(assert (x750 x119))
(assert (x717 x753))
(assert (x717 x862))
(assert (x525 x451))
(assert (x717 x265))
(assert (x717 x450))
(assert (x717 x85))
(assert (x717 x920))
(assert (x717 x554))
(assert (= (x991 (x164 23168665560438953713825780127241890498045796339729991397848622117550123122688)) 23168665560438953713825780127241890498045796339729991397848622117550123122688))
(assert (= x952 (or x209 (and x998 x540) (and x447 x740))))
(assert (x717 x654))
(assert (x717 x984))
(assert (= (or x454 x974) x540))
(assert (= x573 (and x413 (not x1029))))
(assert (x628 x451))
(assert (= 1635491895 (x991 (x164 1635491895))))
(assert (= (x991 (x164 946116605)) 946116605))
(assert (x717 x1087))
(assert (x717 x623))
(assert (= (x259 1463475841) (x164 1463475841)))
(assert (= x849 (or x903 x718)))
(assert (x717 x731))
(assert (= (x991 (x164 509899769)) 509899769))
(assert (= x398 (=> (= x461 (= x129 0)) (and (=> (and (and (and (= x281 (x260 (+ x346 32))) (= (x260 (+ x208 4)) x406) (= x68 (x260 (+ x281 32))) (not x999) (= (x1080 (x259 x59)) x429) (= x742 (> x391 0)) (= x999 (= x429 0)) (= (x260 (+ x406 32)) x346)) (or (and x742 (and x489 (< x114 4294967296) (= x7 (x722 (x259 x59))) x116 (= (= x7 (x42 (x259 x59))) x116) (= (x722 (x259 x996)) x563) (= (<= x563 (x42 (x259 x996))) x489))) (not x742))) (not x461)) x137) (=> (and x461 (and (or (not x633) (and (and (= x678 (x722 (x259 x53))) (= (>= (x746 (x259 x996)) x755) x609) (= (= (x746 (x259 x53)) x678) x40) (> 4294967296 x596) x609 (= (x722 (x259 x996)) x755) x40) x633)) (and (= (x260 (+ 4 x208)) x857) (= x53 x729) (= (< 0 x283) x633) (= (x260 (+ 32 x479)) x236) (= x479 (x260 (+ x857 32)))))) x377)))))
(assert (x1014 6582018229189043197315758676582005330734049138558148258257960960))
(assert (x717 x962))
(assert (x717 x82))
(assert (x717 x17))
(assert (= (=> (and (= (= 0 x391) x867) (or (not x867) x867)) x510) x137))
(assert (x575 x120))
(assert (x521 x531))
(assert (= (or x432 x162) x444))
(assert (= x887 (and (not x191) x707)))
(assert (x717 x1054))
(assert (= x401 (and (not x668) x103)))
(assert (x717 x641))
(assert (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x991 (x164 54940573406046109056602222415596668683460243721328594580962599660119180443648))))
(assert (x521 x59))
(assert (x1014 x396))
(assert (x717 x249))
(assert (x717 x64))
(assert (= x762 (and x348 x854)))
(assert (x312 x1076 x143))
(assert (= (and x921 x262) x361))
(assert (= 1461501637330902918203684832716283019655932542976 (x991 (x164 1461501637330902918203684832716283019655932542976))))
(assert (x789 x451))
(assert (x717 x305))
(assert (= (and x486 x407) x477))
(assert (x717 x8))
(assert (= x480 (x991 (x259 x480))))
(assert (x717 x55))
(assert (= (=> (and (= x207 (x260 (+ x204 64))) (= (x260 (+ x204 32)) x953)) (and (=> (not x959) x500) (=> (and (= x207 x352) x959) x814))) x684))
(assert (x717 x5))
(assert (x717 x612))
(assert (x717 x479))
(assert (= x413 (and (not x108) x465)))
(assert (= (=> (and (= x800 x81) (= x88 x277) (= x420 x94) (= (x228 1099511627775 x449) x220)) x1073) x18))
(assert (x717 x349))
(assert (x717 x1022))
(assert (x717 x686))
(assert (x717 x463))
(assert (x717 x487))
(assert (x717 x800))
(assert (x206 x1076))
(assert (x717 x592))
(assert (x717 x168))
(assert (= (+ 2 (x991 x50)) (x991 (x768 x50 2))))
(assert (x717 x886))
(assert (=> (>= 10000 x654) (= (x164 x654) (x259 x654))))
(assert (= (x991 (x164 6582018229189043197315758676582005330734049138558148258257960960)) 6582018229189043197315758676582005330734049138558148258257960960))
(assert (x717 x930))
(assert (x717 x1067))
(assert (x694 x451))
(assert (= x718 (and x689 x758)))
(assert (x717 x912))
(assert (x1014 x253))
(assert (x717 x281))
(assert (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x991 (x164 22712819017726130556793289372050217520962305494336081706653247717616627220480))))
(assert (=> (<= x177 10000) (= (x164 x177) (x259 x177))))
(assert (=> (<= x155 10000) (= (x259 x155) (x164 x155))))
(assert (x521 x815))
(assert (x717 x1058))
(assert (x717 x215))
(assert (= (x259 72057594037927936) (x164 72057594037927936)))
(assert (= (and x854 (not x348)) x903))
(assert (= (x991 (x164 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (= (x991 (x164 2054196882)) 2054196882))
(assert (= x839 (or x431 (and x914 (not x200)))))
(assert (= x604 (=> (and (and (= x1017 (< 340282366920938463463374607431768211455 x831)) (= (div x907 x1038) x831) (> x1038 0) (= (< x831 x715) x46) (not x1017)) (or (and (= x1063 x186) (not x46)) (and (and (= x940 (< x715 x831)) (= x186 x1063) (= (x555 (- x715 x831)) x957) (= (x228 340282366920938463463374607431768211455 x957) x395) (not x940) (= (x228 340282366920938463463374607431768211455 x957) x623)) x46))) x508)))
(assert (x717 x441))
(assert (x717 x382))
(assert (= (x78 x691 2) (div x691 4)))
(assert (x717 x917))
(assert (= x454 (and x67 x132)))
(assert (x717 x568))
(assert (x717 x744))
(assert (= (x164 1208907372870555465154560) (x259 1208907372870555465154560)))
(assert (= (and x707 x191) x851))
(assert (x717 x942))
(assert (= x468 (or x712 x928)))
(assert (= (x164 340282366920938463463374607431768211455) (x259 340282366920938463463374607431768211455)))
(assert (x717 x264))
(assert (= (and x366 (not x46)) x524))
(assert (= (x991 (x164 97250886131833805217759495634388081419703557252615901133360390455399389593600)) 97250886131833805217759495634388081419703557252615901133360390455399389593600))
(assert (x1014 x119))
(assert (= (x991 (x259 x531)) x531))
(assert (x717 x325))
(assert (x717 x821))
(assert (x717 x943))
(assert (= x513 (=> (and (= x1079 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1087)) (= x86 x124) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1070)) (< x1070 32)) (> x1070 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x529) (not x529) (= (x260 (+ 31 x1070)) x1087) (= x1005 x896) (= x821 x698) (= x124 (x569 x1060)) (= (= 0 x131) x302) (= x936 x779) (not x302) (= x779 (x260 (+ x1060 x1079)))) x121)))
(assert (= x290 (and x1092 x861)))
(assert (x717 x793))
(assert (x717 x964))
(assert (= x852 (=> (and (= x348 (ite (not x512) (= 0 (x228 x82 (x555 (- x82 1)))) (not x512))) (<= 0 x895) (= (x228 77194726158210796949047323339125271902179989777093709359638389338608753093290 x895) x82) (= (x260 (+ 32 x145)) x749) (= (x394 x910) x895) (<= x895 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x512 (= 0 x82))) (and (=> (and (and (= x692 x53) (= x855 x749) (= 52 x393)) (not x348)) x11) (=> (and (and (= (x555 (- x35 1)) x795) (= (x228 x35 x760) x785) (= (= 0 x691) x971) (= x160 77194726158210796949047323339125271902179989777093709359638389338608753093290) (= (x228 77194726158210796949047323339125271902179989777093709359638389338608753093290 x895) x35) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x795) x760) (= x691 (x78 x785 2))) x348) (and (=> (not x971) x478) (=> (and (= 0 x177) x971) x969)))))))
(assert (= (or x31 x672) x1046))
(assert (x717 x640))
(assert (x717 x820))
(assert (x717 x945))
(assert (= x815 (x991 (x259 x815))))
(assert (x717 x185))
(assert (x717 x630))
(assert (= (and x695 (not x745)) x322))
(assert (= (and x6 x444) x579))
(assert (x717 x898))
(assert (= x974 (or x730 x139)))
(assert (x1014 x120))
(assert (= (=> (and (and (= x297 (or x904 x853)) (= x790 (or x552 x110)) (= (x260 (+ x372 500000000000000000000000000)) x399) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x381 x1005)) (= (mod (* x455 x83) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x833) (= x1005 x710) (= x368 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x945)) (= x372 (mod (* x1049 x945) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x455 (x555 (- x168 x726))) (= (ite x790 1 0) x777) (= x552 (not x214)) (= (= 0 x945) x904) (not x436) (= (> x455 x948) x214) (= x436 (< x168 x726)) (= (div x399 1000000000000000000000000000) x726) (= (x260 (+ 5000 x833)) x333) (= x797 x381) (> x777 0) (= x110 (= x83 0)) (= x853 (not x14)) (> x685 0) (= (+ x710 x797) x426) (= x948 (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x83)) (= (= 0 x1036) x740) (= x168 (x555 (- x426 x91))) (= (div x333 10000) x1036) (= (ite x297 1 0) x685) (= x682 (> x91 x426)) (= (< x368 x1049) x14) (not x682)) (or x740 (and (not x740) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x862 x917)) (= x637 (div x782 x94)) (= (x768 x50 2) x721) (<= x1028 340282366920938463463374607431768211455) (= x362 (div x94 2)) (= (x260 (+ x911 x371)) x782) (= x577 (< x34 x1036)) (= 0 x211) (= x597 (not x577)) (> 340282366920938463463374607431768211456 x917) (not x261) (<= 0 x917) (= (x228 340282366920938463463374607431768211455 x637) x862) (= x917 (x328 x721)) (= x862 x941) (= (mod (* x1036 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x371) (= (div x606 1000000000000000000000000000) x34) (= x1028 (+ x941 x574)) (= (or x591 x374) x1053) (= x374 (not x597)) (>= 340282366920938463463374607431768211455 x917) (= x574 x917) (= x211 (ite x1053 1 0)) (= x820 (x228 340282366920938463463374607431768211455 x1028)) (= x606 (x555 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x362))) (= x261 (< 340282366920938463463374607431768211455 x637)) (= x911 (div x94 2)) (= (= x94 0) x591))))) x18) x503))
(assert (= x781 (or x602 x801)))
(assert (= (or x16 x663) x187))
(assert (x717 x488))
(assert (= (x991 (x164 1118877564)) 1118877564))
(assert (x717 x26))
(assert (= (x259 110890046519461262771209238963172350779326551179552054297210380410598264406016) (x164 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (= x972 (and x473 (not x142))))
(assert (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (x991 (x164 29360345738620397371765038775553738755387432804059789257388031015462633472000))))
(assert (x521 x572))
(assert (= (x164 22711052170661352172463706074549474602446478010439206087695126111415334600704) (x259 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x717 x304))
(assert (x1014 1208907372870555465154560))
(assert (x717 x896))
(assert (= x267 (or x233 (and x811 (not x738)))))
(assert (x717 x315))
(assert (x521 x480))
(assert (x717 x899))
(assert (x1014 x957))
(assert (x521 x316))
(assert (= (and (not x689) x758) x423))
(assert (x717 x7))
(assert (x575 x1002))
(assert (x1014 x1002))
(assert (x521 x996))
(assert (x717 x1019))
(assert (x717 x518))
(assert (x717 x687))
(assert (x717 x724))
(assert (x717 x21))
(assert (x717 x698))
(assert (x717 x422))
(assert (= (and (not x716) x178) x695))
(assert (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (x991 (x164 61906025702411949798612179514519095217898697161212278170789384498383220113408))))
(assert (x717 x626))
(assert (x717 x237))
(assert (x717 x38))
(assert (= (x991 (x164 23605076785439214643232854609925391371455184862258269280504658849269400207360)) 23605076785439214643232854609925391371455184862258269280504658849269400207360))
(assert (x717 x165))
(assert (= x459 (or x385 x353)))
(assert (x717 x475))
(assert (x717 x167))
(assert (x1014 x32))
(assert (= (x259 946116605) (x164 946116605)))
(assert (= (x991 (x164 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x1014 x449))
(assert (x575 x728))
(assert (x717 x327))
(assert (x521 x1077))
(assert (x717 x1011))
(assert (x717 x1079))
(assert (x717 x72))
(assert (= x215 (x991 (x259 x215))))
(assert (= x132 (or x622 x1090)))
(assert (x252 x451))
(assert (x717 x1077))
(assert (= x1075 (and x781 (not x205))))
(assert (= (x164 23605076785439214643232854609925391371455184862258269280504658849269400207360) (x259 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (x717 x337))
(assert (= x982 (x991 (x259 x982))))
(assert (= x536 (or x187 x519)))
(assert (= (or x1041 x808) x447))
(assert (= (and x461 x927) x876))
(assert (= (or x849 x423) x465))
(assert (= (and x573 (not x589)) x48))
(assert (x717 x1001))
(assert (=> (>= 10000 x430) (= (x164 x430) (x259 x430))))
(assert (x717 x805))
(assert (x717 x129))
(assert (x717 x704))
(assert (x717 x153))
(assert (x717 x471))
(assert (x717 x981))
(assert (x717 x810))
(assert (x750 x709))
(assert (x717 x906))
(assert (= (x991 (x164 1208907372870555465154560)) 1208907372870555465154560))
(assert (x717 x393))
(assert (x717 x1076))
(assert (x717 x636))
(assert (=> (<= x59 10000) (= (x164 x59) (x259 x59))))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x991 (x164 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x1048 x1095 x32))
(assert (x717 x128))
(assert (x717 x155))
(assert (x1014 288230376151711744))
(assert (x717 x105))
(assert (x717 x1045))
(assert (= (or x653 x27) x700))
(assert (= x478 (=> (= x843 (= 0 (x78 x691 2))) (and (=> (= x177 1) x969) x843))))
(assert (x717 x258))
(assert (x717 x908))
(assert (x717 x280))
(assert (x717 x1050))
(assert (x717 x733))
(assert (= x519 (or (and (not x481) x290) (and (not x804) x193) (and (not x262) x921) (and x173 x915) (and (not x959) x1046) (and x189 x697))))
(assert (x717 x97))
(assert (x717 x204))
(assert (= (x991 (x164 4294967296)) 4294967296))
(assert (= (or x601 x545) x824))
(assert (x717 x91))
(assert (x717 x83))
(assert (x717 x1043))
(assert (= (x164 288230376151711744) (x259 288230376151711744)))
(assert (= 1463475841 (x991 (x164 1463475841))))
(assert (x717 x1086))
(assert (x717 x37))
(assert (x717 x245))
(assert (x717 x34))
(assert (= (=> (and (or (and x419 (and (= x959 (= x97 2)) (not x158) (= x158 (< 2 x97)))) (and (= x959 x419) (not x419))) (= (not (= 0 x856)) x419)) x684) x542))
(assert (= (x991 (x164 500000000000000000000000000)) 500000000000000000000000000))
(assert (= x432 (and x359 x199)))
(assert (x717 x726))
(assert (= (x259 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x164 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x717 x136))
(assert (x717 x355))
(assert (x717 x535))
(assert (= (=> (and (= (= x309 0) x889) (or (not x889) x889)) x138) x104))
(assert (= (and x742 x226) x944))
(assert (x717 x720))
(assert (= (and x205 x781) x934))
(assert (x717 x501))
(assert (x717 x507))
(assert (= (=> (and (= (= x179 0) x407) (or x407 (not x407))) x235) x1034))
(assert (x717 x957))
(assert (x717 x420))
(assert (x717 x709))
(assert (= (+ (x991 x271) 1) (x991 (x768 x271 1))))
(assert (x717 x392))
(assert (= x469 (=> (and (and (not (= x480 x430)) (not (> x598 2)) (<= x240 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x531) (not (= x159 x480)) (not (= x708 946116605)) (<= x815 1461501637330902918203684832716283019655932542975) x1 (>= x495 0) (= (not x1009) x765) (not (= x155 x430)) (= 260 x446) (< 0 x996) (not (= x531 x1058)) (= x271 (x768 x705 1)) (= x215 (x1099 x50)) (>= x451 0) (= x993 288) (= (> (x1080 (x259 x1077)) 0) x985) (= (x284 x578) x128) (= (> (x1080 (x259 x1058)) 0) x1061) (<= 0 x247) (not (= x155 x1058)) (not (= x815 x1077)) (= x188 false) (not (= x815 x982)) (not (= x159 x996)) (= x845 (x1080 (x259 x531))) (>= x270 0) (>= 255 x414) (>= 1461501637330902918203684832716283019655932542975 x1067) (= x630 x53) (not (= x55 x1077)) (= x257 (x1069 (x259 x55))) (not (= x87 x1077)) (<= x451 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x266 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x215) (<= 0 x118) (> x531 0) (> 340282366920938463463374607431768211456 x984) (= x445 (x555 (- x446 4))) (< 0 x1058) (= x451 (x452 x705)) (not x347) (not (= x1077 x155)) (= (x1069 (x259 x531)) x679) (<= x55 1461501637330902918203684832716283019655932542975) (= x641 (x1069 (x259 x480))) (<= x405 255) (not (= x159 x1058)) (>= 1461501637330902918203684832716283019655932542975 x272) (>= 1461501637330902918203684832716283019655932542975 x1088) (<= 0 x59) (= x739 (> (x1080 (x259 x982)) 0)) (<= 0 x334) (= (x9 x271) x565) (not (= x155 x266)) (> 3 x598) (<= x792 1461501637330902918203684832716283019655932542975) (= x1010 (< 0 (x1080 (x259 x996)))) (> 1099511627776 x128) (<= x646 1461501637330902918203684832716283019655932542975) (<= 0 x805) (>= x244 0) (not (= x531 x159)) (= 1632 x258) (< 0 x480) (> x232 0) (>= 1461501637330902918203684832716283019655932542975 x127) (= (> (x1080 (x259 x430)) 0) x1) (>= 1461501637330902918203684832716283019655932542975 x1077) (= (x768 x735 1) x796) (= x848 (x768 x271 1)) (= (x306 x848) x984) (not (= x982 x87)) (= x53 x278) (> 340282366920938463463374607431768211456 x805) (= (x555 (- x446 100)) x443) (not (= x266 x430)) (>= 340282366920938463463374607431768211455 x495) (not (= x266 x159)) (<= x59 1461501637330902918203684832716283019655932542975) (= (x555 (- x1007 4)) x516) (<= x502 255) (>= x984 0) (not (= x55 x87)) (= x767 false) (not x1012) (= x595 x490) (= x708 1463475841) (= (x1069 (x259 x1077)) x567) (= x457 (< 0 (x1080 (x259 x155)))) (= x341 (x1069 (x259 x87))) (>= 255 x327) (< x59 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x425) (= x598 x382) (not (= x430 x87)) (= (x78 x324 64) x83) (not (= x480 x531)) (= 960 x315) (= (x509 x796) x572) (<= 0 x646) (> x266 0) (< 0 x159) (= (x1069 (x259 x1058)) x61) (= x323 (x621 (x259 x316) (x164 53) 0)) (= x97 x166) (<= 0 x572) (<= x155 1461501637330902918203684832716283019655932542975) (= (x1069 (x259 x430)) x523) (= x75 (x1069 (x259 x266))) (= x50 (x768 x796 1)) x580 (not (= x87 x996)) (not (= x815 x159)) (not (= x531 x996)) (>= 340282366920938463463374607431768211455 x673) (not (= x87 x1058)) x968 (= x251 0) (= (x1069 (x259 x996)) x720) (not (> 4 x446)) (not (= 1383405463 x708)) (not (= x982 x480)) (> 340282366920938463463374607431768211456 x565) (= x634 x251) (not (= x55 x531)) (not (= x266 x996)) (< x572 1461501637330902918203684832716283019655932542976) (<= x982 1461501637330902918203684832716283019655932542975) (= (> (x1080 (x259 x55)) 0) x1047) (= x154 x910) (<= 0 x523) (not (= x996 x155)) (not (= x266 x982)) (not (= x996 x55)) (= (< 0 (x1080 (x259 x531))) x885) (not (= x1058 x996)) (= x829 x598) (<= x245 18446744073709551615) (= 1089035750 x893) (not (= x430 x982)) (>= x263 0) (>= 1461501637330902918203684832716283019655932542975 x270) (>= 1461501637330902918203684832716283019655932542975 x263) (<= x244 1099511627775) (>= x127 0) (= (x1069 (x259 x155)) x280) (not (= x159 x155)) (= x129 x981) (>= x341 0) (not (= x982 x159)) (<= 0 x327) (>= x1088 0) (<= 0 x673) (not (= x55 x266)) (not (> 4 x1007)) (>= x257 0) (> x815 0) (not (= x159 x55)) (<= x215 1461501637330902918203684832716283019655932542975) (= (< 0 (x1080 (x259 x815))) x812) (<= 0 x906) (not (= x1077 x996)) (not (= x480 x55)) (not (= x996 x480)) (not (= x982 x1077)) (<= x926 65535) (>= 1461501637330902918203684832716283019655932542975 x334) (>= x425 0) (not (= x266 x87)) (= 4 x1086) (not (= x266 x1058)) (= x771 (ite x765 1 0)) (= 54 x49) (not (> 946116605 x708)) (> 1635491895 x708) (= x1012 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x445) (and (= true (<= x445 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x445 256)))) (not (= x996 x815)) x885 (= x347 (or (and (= true (<= x443 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 160 x443)) (> x443 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x531 x815)) (not (= x815 x1058)) (<= 0 x565) (< 0 x55) (= (x402 x271) x673) (>= 1461501637330902918203684832716283019655932542975 x572) (<= 0 x553) (>= x280 0) x812 (not (= x430 x55)) (not (= x480 x155)) (= x316 x517) (< 0 x982) (= x129 x301) (= x961 x595) (<= x430 1461501637330902918203684832716283019655932542975) (not (= 1118877564 x708)) (< 0 x845) (>= x502 0) (<= 0 x641) x739 (= x704 x316) (= x232 (x1080 (x259 x531))) (= x922 x57) (< 0 x1077) (= x270 x922) (<= x996 1461501637330902918203684832716283019655932542975) (= x107 x127) (>= 1461501637330902918203684832716283019655932542975 x1058) (= x771 x129) (>= 1461501637330902918203684832716283019655932542975 x480) (= x607 false) (>= x215 0) (not (= x55 x1058)) (not x571) (>= x240 0) (< 0 x155) (>= 1461501637330902918203684832716283019655932542975 x87) (not (= x87 x815)) (= x300 x605) (<= 0 x128) (>= x926 0) (not (= x708 1142400387)) (>= 1461501637330902918203684832716283019655932542975 x316) (<= 0 x435) (not (= x159 x1077)) (not (= x55 x155)) (not (= 509899769 x893)) (not (= x480 x87)) (not (= x266 x1077)) (not (= x480 x1077)) (>= x356 0) (not (= x266 x531)) (>= x792 0) (not (= x815 x155)) (< x166 3) (not (= x1058 x430)) (not (= x1077 x430)) (= (< 0 (x1080 (x259 x480))) x965) (<= 0 x75) (= x844 52) (not (= x55 x815)) (<= x53 1461501637330902918203684832716283019655932542975) (= x735 (x768 x848 2)) (= x598 x775) (not (= x815 x266)) (= x578 (x768 x848 1)) (>= x567 0) (not (= x480 x1058)) (= x53 x321) (= x268 (not (= 0 x411))) (>= x61 0) x590 (not (= x982 x155)) (= x59 (x22 x735)) (= false x73) (= x324 (x228 1208907372870555465154560 x451)) (not (= x87 x531)) (<= 0 x414) x1010 (not (= x55 x982)) (= (= 0 x531) x571) (= (x621 (x259 x53) (x164 52) 0) x705) (= x449 x897) (= x411 (x79 256)) x985 (<= x356 340282366920938463463374607431768211455) (<= x128 1099511627775) (not (= x531 x430)) (not (= x87 x159)) (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 x832) (= x316 x624) (>= x243 0) (not (= x87 x155)) (<= x118 255) (not (= x159 x430)) (not (= x1077 x531)) (= (ite x268 1 0) x301) (<= x605 1461501637330902918203684832716283019655932542975) (= x518 x961) (< 0 x430) (= x53 x475) (>= 255 x63) (< x673 340282366920938463463374607431768211456) (= x142 (< 0 x748)) (not (= x982 x996)) (= x968 (> (x1080 (x259 x159)) 0)) (= (x1069 (x259 x815)) x435) (= (x1069 (x259 x159)) x553) (not (= x480 x266)) (= x535 x316) x457 (= x590 (< 0 (x1080 (x259 x87)))) (< 0 x87) (= x894 1463475841) (= x906 (x1069 (x259 x982))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x516) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x516) true) (> 128 x516)))) (not (= x430 x996)) (<= 0 x63) (= x165 x490) (= x446 260) x1047 (= x316 x733) (= x775 x166) (= x1009 (= 0 x129)) (<= x984 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x247) (= x53 x886) (<= x805 340282366920938463463374607431768211455) (not (= x982 x531)) (= (> (x1080 (x259 x266)) 0) x580) (<= x243 1461501637330902918203684832716283019655932542975) (not (= x1058 x982)) x1061 (>= 340282366920938463463374607431768211455 x565) (>= 1461501637330902918203684832716283019655932542975 x159) (>= x679 0) (<= x645 255) (<= 0 x245) (= x910 x323) (<= 0 x605) (<= 0 x272) (<= 0 x1067) (= x170 x490) (not (= x155 x531)) (<= 0 x645) (not (= x1058 x1077)) (= x300 x1088) (= x805 (x561 x848)) (and (> x1007 131) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1007) true)) x965 (not (= x815 x430)) (>= x720 0) (> 2054196882 x708) (not (= x480 x815)) (>= x405 0)) (or (and x142 (and (> 4294967296 x757) (= 1 x900))) (and (not x142) (= x900 x748)))) x117)))
(assert (x717 x932))
(assert (x717 x75))
(assert (= x786 (and x762 (not x971))))
(assert (= x758 (or x1098 x786)))
(assert (= (=> (and (not x491) (not x610) (= (x260 (+ 32 x304)) x932) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269)) (> 32 x269)) (> x269 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x491) (= x304 (x260 (+ x1051 x1004))) (= x856 (x905 x1051)) (= (= x370 0) x610) (= x548 (x260 (+ 64 x304))) (= x1004 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1044)) (= x1044 (x260 (+ 31 x269))) (= (= 0 x961) x915) (= x930 x316)) (and (=> x915 x500) (=> (and (not x915) (= (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x961) x1092)) (and (=> (and x1092 (and (= x547 (x260 (+ x548 32))) (= x481 (= x300 x316)) (= (x260 (+ x548 64)) x1031))) (and (=> (not x481) x500) (=> (and x481 (= x988 x1031)) x51))) (=> (and (not x1092) (and (= (x260 (+ 32 x548)) x389) (= x404 (x260 (+ 64 x548))) (= x404 x988))) x51))))) x23))
(assert (x717 x159))
(assert (x717 x145))
(assert (x717 x242))
(assert (x717 x244))
(assert (= (x537 x494) 0))
(assert (= (x259 65535) (x164 65535)))
(assert (= x741 (and x292 x858)))
(assert (x717 x1026))
(assert (x717 x1063))
(assert (x717 x270))
(assert (= (and x468 (not x635)) x707))
(assert (= (+ (x991 x848) 2) (x991 (x768 x848 2))))
(assert (x717 x341))
(assert (x717 x715))
(assert (= (=> (and (= (x939 x352) x197) (= x197 x530) (= x120 (x260 (+ 31 x699))) (= (= 0 x975) x13) (not x13) (= (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x120) x701) (= (x260 (+ x701 x352)) x644) (= x644 x1060) (not x888) (= x888 (or (and (< x699 32) (= (<= x699 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x699 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x255) x925))
(assert (x717 x702))
(assert (x717 x997))
(assert (x717 x257))
(assert (x717 x496))
(assert (x717 x527))
(assert (x717 x868))
(assert (= x508 (=> (= x186 x943) x398)))
(assert (x717 x895))
(assert (x717 x847))
(assert (x1014 x422))
(assert (x717 x982))
(assert (= x663 (or (and x219 (not x867)) x203)))
(assert (x717 x333))
(assert (x717 x815))
(assert (x717 x301))
(assert (x750 x954))
(assert (= (and (not x915) x173) x861))
(assert (= x316 (x991 (x259 x316))))
(assert (x717 x644))
(assert (= (and x473 x142) x838))
(assert (x717 x236))
(assert (x717 x1036))
(assert (= (x259 80397878463760440755375692149700041695399247739548614023716483005714108776448) (x164 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x717 x32))
(assert (x717 x782))
(assert (= (and x465 x108) x773))
(assert (x717 x708))
(assert (x717 x620))
(assert (x717 x1004))
(assert (x717 x1088))
(assert (x717 x995))
(assert (x1014 71776119061217280))
(assert (x717 x634))
(assert (= x811 (or x408 x1006)))
(assert (x717 x502))
(assert (x717 x425))
(assert (= (and x695 x745) x648))
(assert (= x51 (=> (and (= x681 (x228 1152921504606846976 x451)) (= x837 (x260 (+ 32 x988))) (= (x260 (+ x988 64)) x392) (= (not (= 0 x1052)) x549) (= x788 (not (= 0 x337))) (= (not (= x681 0)) x189) (= x724 1632) (= x105 (x228 72057594037927936 x451)) (= x202 (not (= 0 x156))) (= (not (= x105 0)) x804) (= x1052 (x228 288230376151711744 x451)) (= x337 (x228 576460752303423488 x451)) (= (x228 144115188075855872 x451) x156)) (and (=> (and x804 (and (= (x260 (+ 64 x392)) x204) (= (x260 (+ x392 32)) x311))) (and (=> (and (= x668 (not (= 0 x364))) (not x189)) (and (=> (and x668 (and (= (= 1 x166) x526) (= (> x97 2) x36) (not x36))) (and (=> (and (and (= (x260 (+ 64 x204)) x1091) (= (x260 (+ 32 x204)) x507) (= x1091 x352)) x526) x814) (=> (not x526) x542))) (=> (not x668) x542))) (=> x189 x500))) (=> (not x804) x500)))))
(assert (= (or (and x890 (not x889)) x412) x16))
(assert (= (=> (and (= (= x994 0) x614) (= (x228 1 x1016) x994) (= (x78 x1016 1) x933) (= (not (< 1 x933)) x367)) (and (=> (and (= x379 (ite x614 1 10)) (= 100 x350)) x225) x367)) x331))
(assert (= (=> (and (= (= (ite x338 x981 (ite (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x518) 1 0)) 0) x716) (= (< 2 x97) x400) (= (= 0 x981) x338) (not x400) (= x615 (ite (= x97 1) x364 x856))) (and (=> (and (and (= x352 x1060) (= x530 x961)) x716) x255) (=> (and (not x716) (and (or (and (not x745) (= x975 x769)) (and x745 (and (> 4294967296 x699) (= 1 x975)))) (and (= (x260 (+ x352 4)) x256) (= (> x769 0) x745)))) x925))) x814))
(assert (= (x164 7237005577325680195743901738874374364099144639582604309003564681041176166400) (x259 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (x575 x1087))
(assert (x717 x208))
(assert (= (x991 (x259 x59)) x59))
(assert (= 0 (x537 x474)))
(assert (= x266 (x991 (x259 x266))))
(assert (x717 x445))
(assert (x717 x429))
(assert (x717 x551))
(assert (x717 x278))
(assert (x717 x350))
(assert (x717 x29))
(assert (= x960 (and (not x666) x459)))
(assert (= x522 (and (not x6) x444)))
(assert (x717 x1084))
(assert (x1014 x82))
(assert (= (or x887 x851) x914))
(assert (x717 x94))
(assert (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x991 (x164 22711052170661352172463706074549474602446478010439206087695126111415334600704))))
(assert (x717 x992))
(assert (= (x164 23168665560438953713825780127241890498045796339729991397848622117550123122688) (x259 23168665560438953713825780127241890498045796339729991397848622117550123122688)))
(assert (and (= (x841 10 66) 1000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000 (x841 10 46)) (= (x841 10 49) 10000000000000000000000000000000000000000000000000) (= 1000000000000 (x841 10 12)) (= (x841 10 29) 100000000000000000000000000000) (= (x841 10 59) 100000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000000000 (x841 10 69)) (= 1000000000000000000 (x841 10 18)) (= (x841 10 26) 100000000000000000000000000) (= 10000 (x841 10 4)) (= 100000000 (x841 10 8)) (= (x841 10 37) 10000000000000000000000000000000000000) (= 1000000000000000000000000000000000 (x841 10 33)) (= (x841 10 20) 100000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000 (x841 10 67)) (= 100000000000000000000000000000000000000000000000000000000000000000000000 (x841 10 71)) (= (x841 10 63) 1000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000 (x841 10 21)) (= (x841 10 9) 1000000000) (= (x841 10 76) 10000000000000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000 (x841 10 19)) (= 10000000000000000000000000000000000000000000 (x841 10 43)) (= 10000000000000000000000000000000000000000 (x841 10 40)) (= 100000000000000000000000000000000000000000000000000000000000000000 (x841 10 65)) (= (x841 10 3) 1000) (= 100000000000000 (x841 10 14)) (= 1000000000000000000000000000000000000000000 (x841 10 42)) (= (x841 10 30) 1000000000000000000000000000000) (= (x841 10 15) 1000000000000000) (= (x841 10 35) 100000000000000000000000000000000000) (= 1000000000000000000000000 (x841 10 24)) (= (x841 10 44) 100000000000000000000000000000000000000000000) (= (x841 10 34) 10000000000000000000000000000000000) (= (x841 10 48) 1000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000 (x841 10 52)) (= 10000000000000000000000000000000000000000000000000000000000000000 (x841 10 64)) (= (x841 10 2) 100) (= 1000000000000000000000000000000000000000000000000000000000000 (x841 10 60)) (= 100000000000000000000000000000000000000000000000000000 (x841 10 53)) (= 1 (x841 10 0)) (= 10000000000000000000000000000 (x841 10 28)) (= 100000000000000000000000000000000000000000 (x841 10 41)) (= 100000000000000000000000000000000000000000000000000000000000000000000000000000 (x841 10 77)) (= 10000000000000000000000000000000000000000000000000000000000000 (x841 10 61)) (= 100000000000000000000000000000000000000 (x841 10 38)) (= 10 (x841 10 1)) (= (x841 10 68) 100000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000 (x841 10 27)) (= (x841 10 54) 1000000000000000000000000000000000000000000000000000000) (= (x841 10 16) 10000000000000000) (= (x841 10 13) 10000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000000000000000 (x841 10 75)) (= 100000000000000000000000000000000 (x841 10 32)) (= (x841 10 39) 1000000000000000000000000000000000000000) (= (x841 10 47) 100000000000000000000000000000000000000000000000) (= (x841 10 45) 1000000000000000000000000000000000000000000000) (= 100000000000 (x841 10 11)) (= (x841 10 56) 100000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000 (x841 10 58)) (= (x841 10 55) 10000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000 (x841 10 25)) (= 100000000000000000000000000000000000000000000000000 (x841 10 50)) (= (x841 10 6) 1000000) (= (x841 10 5) 100000) (= 1000000000000000000000000000000000000000000000000000 (x841 10 51)) (= 1000000000000000000000000000000000000000000000000000000000 (x841 10 57)) (= 10000000000000000000000000000000 (x841 10 31)) (= (x841 10 70) 10000000000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000 (x841 10 23)) (= 10000000000000000000000 (x841 10 22)) (= (x841 10 17) 100000000000000000) (= 10000000 (x841 10 7)) (= (x841 10 10) 10000000000) (= (x841 10 74) 100000000000000000000000000000000000000000000000000000000000000000000000000) (= (x841 10 62) 100000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000000000 (x841 10 73)) (= 1000000000000000000000000000000000000 (x841 10 36)) (= (x841 10 72) 1000000000000000000000000000000000000000000000000000000000000000000000000)))
(assert (x717 x119))
(assert (= x969 (=> (and (<= 0 x153) (= (x260 (+ x749 32)) x275) (= x654 (x817 x113)) (>= x654 0) (= x626 (x228 7237005577325680195743901738874374364099144639582604309003564681041176166400 x153)) (= x210 (x78 x626 212)) (= x153 (x798 x877)) (= x113 (x621 (x259 x177) (x164 54) 0)) (>= 1461501637330902918203684832716283019655932542975 x654) (= (= x210 0) x689) (= x877 (x621 (x259 x654) (x164 52) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x153) (> 1461501637330902918203684832716283019655932542976 x654)) (and (=> (and (and (= x654 x803) (= x654 x1063) (= x1020 1) (= 52 x185) (= x275 x208) (= x99 x210)) (not x689)) x101) (=> (and x689 (and (= 52 x393) (= x654 x692) (= x275 x855))) x11)))))
(assert (= (=> (and (= x279 (mod (* x379 x350) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x318 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x350)) (= x279 x1038) (not x587) (= x587 (> x379 x318))) x604) x225))
(assert (x717 x530))
(assert (x717 x792))
(assert (x717 x272))
(assert (x717 x179))
(assert (x717 x533))
(assert (x717 x371))
(assert (x717 x1005))
(assert (x717 x368))
(assert (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x991 (x164 22716352711855687325452455967051703357993960462129832944569490930019212460032))))
(assert (x717 x86))
(assert (x717 x953))
(assert (= (x259 115792089237316195423570985008687907853269984665640564039457584007913129634935) (x164 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (= x870 (and x526 x351)))
(assert (x521 x215))
(assert (x1014 x667))
(assert (= (=> (and (and (= (x1080 (x259 x59)) x421) (not x427) (= x485 (x260 (+ 4 x208))) (= (x260 (+ x485 32)) x37) (> x810 0) (= (> x309 0) x666) (= (= x421 0) x427)) (or (not x666) (and x666 (and (= x662 (x617 (x259 x59))) (= (<= x441 (x947 (x259 x996))) x560) (= x441 (x617 (x259 x996))) (> 4294967296 x496) (= (= x662 (x947 (x259 x59))) x340) x560 x340)))) x104) x183))
(assert (x717 x1002))
(assert (x717 x646))
(assert (x1014 x728))
(assert (= x921 (and x956 x141)))
(assert (= (and x447 (not x740)) x209))
(assert (x717 x334))
(assert (x717 x1055))
(assert (x717 x218))
(assert (= (=> (and (and (= (or (> x686 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x686) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x686) true))) x719) (not x239) (not x719) (= x642 (x260 (+ 4 x1051))) (= x205 (< 0 x997)) (= x949 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x396)) (= (x260 (+ x800 x949)) x1051) (= (= x376 0) x239) (= x364 (x778 x800)) (= (x260 (+ x686 31)) x396)) (or (and (not x205) (= x997 x370)) (and x205 (and (> 4294967296 x269) (= 1 x370))))) x23) x559))
(assert (= x155 (x991 (x259 x155))))
(assert (x1014 x1044))
(assert (= (=> (and (and (= (x228 6582018229189043197315758676582005330734049138558148258257960960 x451) x85) (= x176 (x260 (+ 500000000000000000000000000 x195))) (= x354 (div x176 1000000000000000000000000000)) (= x1055 (x78 x85 176)) (>= 1461501637330902918203684832716283019655932542975 x462) (= (or x80 x227) x439) (= x687 1632) (= x287 (x768 x50 1)) (= x384 (x260 (+ x237 288))) (= x1057 (ite (> x981 0) 0 x907)) (= (= x1055 0) x199) (= x462 (x1066 x287)) (<= 0 x462) (= (not x1056) x80) (= x237 (x260 (+ x936 128))) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x88) x305) (> 1461501637330902918203684832716283019655932542976 x462) (= (= x88 0) x227) (= (ite x439 1 0) x611) (= (mod (* x86 x88) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x195) (> x611 0) (= x1056 (> x86 x305))) (or (and (not x199) (and (= (x768 x287 1) x752) (<= x488 340282366920938463463374607431768211455) (= x488 (x562 x752)) (= x488 x498) (< x488 340282366920938463463374607431768211456) (<= 0 x488))) (and (= x498 0) x199))) x650) x121))
(assert (= (or x952 x387) x93))
(assert (x521 x1058))
(assert (x717 x548))
(assert (x717 x247))
(assert (x717 x829))
(assert (= (x259 1383405463) (x164 1383405463)))
(assert (x717 x177))
(assert (x717 x936))
(assert (= (x259 4294967296) (x164 4294967296)))
(assert (= (x164 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x259 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x1014 x1087))
(assert (x521 x266))
(assert (= (=> (and (= x201 (< 2 x97)) (= (ite (> x615 x530) x530 x615) x907) (= (= 1 x166) x635) (not x201)) (and (=> (and (and (and (= x218 (x260 (+ x1060 4))) (= x5 (x260 (+ 32 x218))) (= (> x179 0) x292)) (or (not x292) (and (and (= (<= x793 (x122 (x259 x996))) x676) (= x450 (x1069 (x259 x572))) (= x380 (= x450 (x122 (x259 x572)))) (< x916 4294967296) x380 (= (x1069 (x259 x996)) x793) x676) x292))) x635) x1034) (=> (and (and (and (= (x260 (+ 32 x899)) x437) (= x899 (x260 (+ 4 x1060))) (= (x260 (+ 32 x437)) x72) (= x191 (< 0 x131))) (or (not x191) (and (and (= (<= x551 (x836 (x259 x996))) x343) x282 x343 (= x282 (= (x836 (x259 x215)) x912)) (= x912 (x1069 (x259 x215))) (< x1070 4294967296) (= x551 (x1069 (x259 x996)))) x191))) (not x635)) x951))) x255))
(assert (x717 x955))
(assert (x717 x652))
(assert (=> (>= 10000 x87) (= (x259 x87) (x164 x87))))
(assert (x750 x957))
(assert (= true x473))
(assert (= (x78 x785 2) (div x785 4)))
(assert (x717 x421))
(assert (x717 x28))
(assert (x717 x761))
(assert (x717 x830))
(assert (= x545 (and x418 (not x677))))
(assert (= (x164 144115188075855872) (x259 144115188075855872)))
(assert (x575 x397))
(assert (x717 x728))
(assert (x717 x506))
(assert (x891 x451))
(assert (x717 x131))
(assert (x717 x87))
(assert (x717 x874))
(assert (x717 x1023))
(assert (x717 x360))
(assert (= x53 (x991 (x259 x53))))
(assert (= x1041 (and x665 x780)))
(assert (x717 x372))
(assert (x717 x160))
(assert (=> (<= x982 10000) (= (x164 x982) (x259 x982))))
(assert (x717 x667))
(assert (= x233 (and x738 x811)))
(assert (x717 x624))
(assert (x521 x155))
(assert (x717 x100))
(assert (= (and x557 x584) x27))
(assert (x717 x211))
(assert (x717 x751))
(assert (= (=> (and (= x803 x692) (= 0 x99) (= x185 x393) (= 0 x1020) (= x1063 0) (= x208 x855)) x101) x11))
(assert (x717 x384))
(assert (x717 x60))
(assert (x717 x411))
(assert (= (and x540 (not x998)) x780))
(assert (x717 x12))
(assert (x717 x822))
(assert (= (x991 (x259 x1077)) x1077))
(assert (= x403 (and x290 x481)))
(assert (x33 x153))
(assert (= (x991 (x768 x1040 9)) (+ 9 (x991 x1040))))
(assert (x1014 576460752303423488))
(assert (x717 x933))
(assert (x717 x833))
(assert (x717 x449))
(assert (= x808 (and x780 (not x665))))
(assert (x1014 (x555 (- x82 1))))
(assert (= (div x626 6582018229284824168619876730229402019930943462534319453394436096) (x78 x626 212)))
(assert (=> (<= x185 10000) (= (x259 x185) (x164 x185))))
(assert (= x593 (and x459 x666)))
(assert (x717 x220))
(assert (x717 x320))
(assert (x717 x195))
(assert (=> (<= x215 10000) (= (x259 x215) (x164 x215))))
(assert (x717 x755))
(assert (= x1098 (and x762 x971)))
(assert (x717 x480))
(assert (= (x164 1000000000000000000000000000) (x259 1000000000000000000000000000)))
(assert (= (and (not x292) x858) x675))
(assert (x717 x464))
(assert (x1014 1152921504606846976))
(assert (= x330 (and x46 x366)))
(assert (= (and x419 x416) x672))
(assert (x717 x771))
(assert (x717 x414))
(assert (x717 x462))
(assert (= x601 (and x418 x677)))
(assert (x717 x837))
(assert (= (=> (and (= x81 (x260 (+ x640 192))) (= (= 0 x83) x998)) (and (=> x998 x18) (=> (and (not x998) (and (or (and (not x665) (and (= (or x440 x453) x770) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x54 x568)) (= x958 (+ x115 x58)) (= x76 (div x71 31536000)) (= x76 x41) (= (ite (not x1042) 1 0) x620) (= (mod (* x652 x1035) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x38) (= (x260 (+ x751 500000000000000000000000000)) x294) (< (* x821 x1035) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x533 x38)) (= (> x568 x702) x169) (= (ite x223 1 0) x463) (= (x228 x620 x667) x527) (= (div x64 1000000000000000000000000000) x303) (< (* x652 x1035) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (< (+ x76 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x360 (div x303 31536000)) (= x667 (ite (< x546 x652) 1 0)) (= x96 x54) (= x249 (+ x62 x482)) (= 0 x527) (= x1042 (= x1035 0)) (= (= x821 0) x440) (> x791 0) (= x58 x487) (= x966 x482) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x821) x702) (= x612 x62) (= x96 (* x652 x1035)) (= x751 (mod (* x821 x821) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x71 (* x1035 x821)) (= x64 (x260 (+ x908 500000000000000000000000000))) (< (+ x966 x612) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x821) x194) (= x487 (div x317 6)) (= x533 (ite (> x1035 2) (x555 (- x1035 2)) 0)) (= x901 x499) (= (not x1097) x295) (= x958 x945) (= x901 (* x38 x533)) (= x967 1000000000000000000000000000) (= (ite x770 1 0) x791) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x249 x487)) (= x568 (div x264 994519296000000)) (= (mod (* x568 x821) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x908) (= (not x169) x453) (= x546 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1035)) (= (+ x967 x41) x612) (= x651 (* x568 x54)) (< (* x499 x360) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (> x821 x194) x1097) (= (= 0 x821) x390) (= (div x651 2) x966) (= x249 x115) (= (or x390 x295) x223) (< 0 x463) (= x317 (* x360 x499)) (= (x555 (- x1035 1)) x652) (= x264 (div x294 1000000000000000000000000000)))) (and (= x945 1000000000000000000000000000) x665)) (and (= (x260 (+ x10 500000000000000000000000000)) x920) (= (ite x1071 1 0) x147) (= (< x424 x325) x747) (> x898 0) (not x111) (= (x260 (+ x588 500000000000000000000000000)) x355) (= (div x920 1000000000000000000000000000) x91) (= (div x355 1000000000000000000000000000) x381) (= (< x992 x325) x222) (< 0 x147) (= (= 0 x277) x369) (= x39 (not x747)) (= x10 (mod (* x805 x325) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x277) x992) (= x599 (= 0 x805)) (= x409 (not x222)) (= x1071 (or x39 x599)) (= (mod (* x325 x277) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x588) (= (= 0 x1035) x665) (= x424 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x805)) (= (ite x872 1 0) x898) (= (< x128 x501) x111) (= (or x409 x369) x872) (= x1035 (x555 (- x128 x501)))))) x503))) x913))
(assert (= x291 (not (and (not (= 0 x102)) (= x655 (x946 288)) (= x1001 x655) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x167) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x167) true) (> 32 x167))))))))
(assert (x717 x605))
(assert (=> (>= 10000 x572) (= (x164 x572) (x259 x572))))
(assert (x717 x531))
(assert (x717 x661))
(assert (= (and x103 x668) x351))
(assert (x717 x673))
(assert (= x366 (or x616 x700 x48)))
(assert (x717 x1016))
(assert (= (x259 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x164 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (x164 29360345738620397371765038775553738755387432804059789257388031015462633472000) (x259 29360345738620397371765038775553738755387432804059789257388031015462633472000)))
(assert (x717 x729))
(assert (x717 x336))
(assert (and (= (x841 2 25) 33554432) (= 22835963083295358096932575511191922182123945984 (x841 2 154)) (= 348449143727040986586495598010130648530944 (x841 2 138)) (= 47890485652059026823698344598447161988085597568237568 (x841 2 175)) (= 5708990770823839524233143877797980545530986496 (x841 2 152)) (= 187072209578355573530071658587684226515959365500928 (x841 2 167)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x841 2 212)) (= 6129982163463555433433388108601236734474956488734408704 (x841 2 182)) (= (x841 2 91) 2475880078570760549798248448) (= 10384593717069655257060992658440192 (x841 2 113)) (= (x841 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x841 2 16) 65536) (= 10889035741470030830827987437816582766592 (x841 2 133)) (= (x841 2 144) 22300745198530623141535718272648361505980416) (= 332306998946228968225951765070086144 (x841 2 118)) (= (x841 2 69) 590295810358705651712) (= (x841 2 139) 696898287454081973172991196020261297061888) (= 8796093022208 (x841 2 43)) (= 23384026197294446691258957323460528314494920687616 (x841 2 164)) (= 649037107316853453566312041152512 (x841 2 109)) (= (x841 2 0) 1) (= 32768 (x841 2 15)) (= (x841 2 7) 128) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x841 2 253)) (= 21267647932558653966460912964485513216 (x841 2 124)) (= (x841 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 4503599627370496 (x841 2 52)) (= (x841 2 76) 75557863725914323419136) (= (x841 2 95) 39614081257132168796771975168) (= (x841 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x841 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= (x841 2 44) 17592186044416) (= 512 (x841 2 9)) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x841 2 238)) (= (x841 2 147) 178405961588244985132285746181186892047843328) (= 17179869184 (x841 2 34)) (= 44601490397061246283071436545296723011960832 (x841 2 145)) (= (x841 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x841 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x841 2 132) 5444517870735015415413993718908291383296) (= (x841 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x841 2 64) 18446744073709551616) (= (x841 2 157) 182687704666362864775460604089535377456991567872) (= 5846006549323611672814739330865132078623730171904 (x841 2 162)) (= (x841 2 143) 11150372599265311570767859136324180752990208) (= (x841 2 128) 340282366920938463463374607431768211456) (= 3291009114642412084309938365114701009965471731267159726697218048 (x841 2 211)) (= 81129638414606681695789005144064 (x841 2 106)) (= (x841 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= 91343852333181432387730302044767688728495783936 (x841 2 156)) (= 401734511064747568885490523085290650630550748445698208825344 (x841 2 198)) (= (x841 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 4835703278458516698824704 (x841 2 82)) (= 36893488147419103232 (x841 2 65)) (= 309485009821345068724781056 (x841 2 88)) (= (x841 2 130) 1361129467683753853853498429727072845824) (= (x841 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x841 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 2596148429267413814265248164610048 (x841 2 111)) (= (x841 2 134) 21778071482940061661655974875633165533184) (= 274877906944 (x841 2 38)) (= 131072 (x841 2 17)) (= (x841 2 103) 10141204801825835211973625643008) (= (x841 2 36) 68719476736) (= (x841 2 70) 1180591620717411303424) (= (x841 2 110) 1298074214633706907132624082305024) (= (x841 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x841 2 98) 316912650057057350374175801344) (= (x841 2 126) 85070591730234615865843651857942052864) (= (x841 2 55) 36028797018963968) (= (x841 2 186) 98079714615416886934934209737619787751599303819750539264) (= 324518553658426726783156020576256 (x841 2 108)) (= 11417981541647679048466287755595961091061972992 (x841 2 153)) (= (x841 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 158456325028528675187087900672 (x841 2 97)) (= (x841 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x841 2 31) 2147483648) (= 24519928653854221733733552434404946937899825954937634816 (x841 2 184)) (= (x841 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 5070602400912917605986812821504 (x841 2 102)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x841 2 252)) (= 2305843009213693952 (x841 2 61)) (= (x841 2 155) 45671926166590716193865151022383844364247891968) (= (x841 2 179) 766247770432944429179173513575154591809369561091801088) (= (x841 2 3) 8) (= 1461501637330902918203684832716283019655932542976 (x841 2 160)) (= (x841 2 18) 262144) (= (x841 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 95780971304118053647396689196894323976171195136475136 (x841 2 176)) (= (x841 2 59) 576460752303423488) (= 2048 (x841 2 11)) (= (x841 2 53) 9007199254740992) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x841 2 243)) (= 5316911983139663491615228241121378304 (x841 2 122)) (= 42535295865117307932921825928971026432 (x841 2 125)) (= (x841 2 104) 20282409603651670423947251286016) (= (x841 2 32) 4294967296) (= (x841 2 105) 40564819207303340847894502572032) (= 134217728 (x841 2 27)) (= (x841 2 146) 89202980794122492566142873090593446023921664) (= (x841 2 131) 2722258935367507707706996859454145691648) (= 79228162514264337593543950336 (x841 2 96)) (= (x841 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x841 2 74) 18889465931478580854784) (= (x841 2 114) 20769187434139310514121985316880384) (= (x841 2 60) 1152921504606846976) (= (x841 2 94) 19807040628566084398385987584) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x841 2 229)) (= 2251799813685248 (x841 2 51)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x841 2 210)) (= 618970019642690137449562112 (x841 2 89)) (= 12259964326927110866866776217202473468949912977468817408 (x841 2 183)) (= 256 (x841 2 8)) (= (x841 2 136) 87112285931760246646623899502532662132736) (= 2 (x841 2 1)) (= (x841 2 135) 43556142965880123323311949751266331066368) (= (x841 2 41) 2199023255552) (= 1024 (x841 2 10)) (= 1208925819614629174706176 (x841 2 80)) (= (x841 2 81) 2417851639229258349412352) (= 16 (x841 2 4)) (= 8388608 (x841 2 23)) (= 10633823966279326983230456482242756608 (x841 2 123)) (= 1267650600228229401496703205376 (x841 2 100)) (= (x841 2 20) 1048576) (= (x841 2 45) 35184372088832) (= 70368744177664 (x841 2 46)) (= (x841 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x841 2 159) 730750818665451459101842416358141509827966271488) (= 19342813113834066795298816 (x841 2 84)) (= (x841 2 12) 4096) (= (x841 2 180) 1532495540865888858358347027150309183618739122183602176) (= 37778931862957161709568 (x841 2 75)) (= (x841 2 19) 524288) (= (x841 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x841 2 78) 302231454903657293676544) (= (x841 2 40) 1099511627776) (= 1237940039285380274899124224 (x841 2 90)) (= 140737488355328 (x841 2 47)) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x841 2 240)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x841 2 214)) (= (x841 2 99) 633825300114114700748351602688) (= (x841 2 172) 5986310706507378352962293074805895248510699696029696) (= 1569275433846670190958947355801916604025588861116008628224 (x841 2 190)) (= (x841 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x841 2 227)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x841 2 235)) (= (x841 2 24) 16777216) (= (x841 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x841 2 151) 2854495385411919762116571938898990272765493248) (= (x841 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x841 2 242)) (= 680564733841876926926749214863536422912 (x841 2 129)) (= (x841 2 79) 604462909807314587353088) (= 12554203470773361527671578846415332832204710888928069025792 (x841 2 193)) (= 9444732965739290427392 (x841 2 73)) (= 170141183460469231731687303715884105728 (x841 2 127)) (= (x841 2 187) 196159429230833773869868419475239575503198607639501078528) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x841 2 239)) (= (x841 2 62) 4611686018427387904) (= (x841 2 168) 374144419156711147060143317175368453031918731001856) (= (x841 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 46768052394588893382517914646921056628989841375232 (x841 2 165)) (= 93536104789177786765035829293842113257979682750464 (x841 2 166)) (= (x841 2 35) 34359738368) (= (x841 2 117) 166153499473114484112975882535043072) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x841 2 250)) (= (x841 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x841 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x841 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x841 2 101) 2535301200456458802993406410752) (= (x841 2 174) 23945242826029513411849172299223580994042798784118784) (= 6427752177035961102167848369364650410088811975131171341205504 (x841 2 202)) (= (x841 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 1329227995784915872903807060280344576 (x841 2 120)) (= 64 (x841 2 6)) (= (x841 2 30) 1073741824) (= 1427247692705959881058285969449495136382746624 (x841 2 150)) (= (x841 2 137) 174224571863520493293247799005065324265472) (= 295147905179352825856 (x841 2 68)) (= 713623846352979940529142984724747568191373312 (x841 2 149)) (= (x841 2 71) 2361183241434822606848) (= 383123885216472214589586756787577295904684780545900544 (x841 2 178)) (= (x841 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x841 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x841 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x841 2 21) 2097152) (= 73786976294838206464 (x841 2 66)) (= (x841 2 148) 356811923176489970264571492362373784095686656) (= (x841 2 37) 137438953472) (= (x841 2 29) 536870912) (= 2787593149816327892691964784081045188247552 (x841 2 141)) (= (x841 2 33) 8589934592) (= (x841 2 170) 1496577676626844588240573268701473812127674924007424) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x841 2 248)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x841 2 219)) (= 18014398509481984 (x841 2 54)) (= 38685626227668133590597632 (x841 2 85)) (= (x841 2 119) 664613997892457936451903530140172288) (= 2658455991569831745807614120560689152 (x841 2 121)) (= 365375409332725729550921208179070754913983135744 (x841 2 158)) (= 803469022129495137770981046170581301261101496891396417650688 (x841 2 199)) (= 16384 (x841 2 14)) (= (x841 2 5) 32) (= 549755813888 (x841 2 39)) (= 72057594037927936 (x841 2 56)) (= 4951760157141521099596496896 (x841 2 92)) (= (x841 2 26) 67108864) (= (x841 2 93) 9903520314283042199192993792) (= (x841 2 112) 5192296858534827628530496329220096) (= (x841 2 57) 144115188075855872) (= (x841 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 4722366482869645213696 (x841 2 72)) (= 154742504910672534362390528 (x841 2 87)) (= (x841 2 115) 41538374868278621028243970633760768) (= 51422017416287688817342786954917203280710495801049370729644032 (x841 2 205)) (= 2993155353253689176481146537402947624255349848014848 (x841 2 171)) (= 11692013098647223345629478661730264157247460343808 (x841 2 163)) (= (x841 2 86) 77371252455336267181195264) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x841 2 228)) (= 191561942608236107294793378393788647952342390272950272 (x841 2 177)) (= 11972621413014756705924586149611790497021399392059392 (x841 2 173)) (= (x841 2 28) 268435456) (= 9671406556917033397649408 (x841 2 83)) (= 1393796574908163946345982392040522594123776 (x841 2 140)) (= 8192 (x841 2 13)) (= 83076749736557242056487941267521536 (x841 2 116)) (= (x841 2 63) 9223372036854775808) (= 200867255532373784442745261542645325315275374222849104412672 (x841 2 197)) (= (x841 2 107) 162259276829213363391578010288128) (= (x841 2 48) 281474976710656) (= (x841 2 169) 748288838313422294120286634350736906063837462003712) (= (x841 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 147573952589676412928 (x841 2 67)) (= 3138550867693340381917894711603833208051177722232017256448 (x841 2 191)) (= (x841 2 49) 562949953421312) (= (x841 2 188) 392318858461667547739736838950479151006397215279002157056) (= 50216813883093446110686315385661331328818843555712276103168 (x841 2 195)) (= 4 (x841 2 2)) (= (x841 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x841 2 185) 49039857307708443467467104868809893875799651909875269632) (= 4194304 (x841 2 22)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x841 2 216)) (= 4398046511104 (x841 2 42)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x841 2 254)) (= (x841 2 77) 151115727451828646838272) (= (x841 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x841 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x841 2 161) 2923003274661805836407369665432566039311865085952) (= (x841 2 50) 1125899906842624) (= (x841 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x841 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 5575186299632655785383929568162090376495104 (x841 2 142)) (= (x841 2 58) 288230376151711744) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x841 2 222)) (= (x841 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824)))
(assert (= (and x804 x193) x697))
(assert (= (x991 (x768 x735 1)) (+ 1 (x991 x735))))
(assert (x575 x396))
(assert (= (x991 (x164 31536000)) 31536000))
(assert (=> (>= 10000 x1063) (= (x259 x1063) (x164 x1063))))
(assert (=> (<= x996 10000) (= (x259 x996) (x164 x996))))
(assert (x717 x511))
(assert (= (x537 x1084) 0))
(assert (x717 x363))
(assert (x717 x448))
(assert (x717 x68))
(assert (= x387 (and x824 x69)))
(assert (x717 x231))
(assert (= 1099511627776 (x991 (x164 1099511627776))))
(assert (x717 x346))
(assert (= (x991 (x164 288230376151711744)) 288230376151711744))
(assert (x717 x77))
(assert (x717 x406))
(assert (x717 x95))
(assert (= (and (not x633) x876) x1006))
(assert (x717 x662))
(assert (x717 x1051))
(assert (x717 x784))
(assert (x717 x176))
(assert (x717 x523))
(assert (= (x991 (x164 576460752303423488)) 576460752303423488))
(assert (= 65535 (x991 (x164 65535))))
(assert (x750 x637))
(assert (= (x991 (x259 x185)) x185))
(assert (= (x259 509899769) (x164 509899769)))
(assert (x521 x87))
(assert (x717 x300))
(assert (x717 x251))
(assert (x717 x241))
(assert (x717 x585))
(assert (x717 x681))
(assert (x1048 x82 (x555 (- x82 1))))
(assert (= (x991 (x259 x177)) x177))
(assert (= (=> (and (= x167 x661) (= 0 x102)) x291) x500))
(assert (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x991 (x164 80397878463760440755375692149700041695399247739548614023716483005714108776448))))
(assert (= (x991 (x164 65536)) 65536))
(assert (= (=> (and (= x738 (= 0 x283)) (or (not x738) x738)) x483) x377))
(assert (x717 x1038))
(assert (= (x259 6582018229189043197315758676582005330734049138558148258257960960) (x164 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x717 x279))
(assert (x717 x256))
(assert (= (x537 x30) 0))
(assert (x717 x210))
(assert (= (x991 (x768 x705 1)) (+ (x991 x705) 1)))
(assert (x717 x417))
(assert (x1014 x1016))
(assert (x717 x713))
(assert (x717 x352))
(assert (x717 x1057))
(assert (x521 x185))
(assert (x717 x490))
(assert (=> (<= x1058 10000) (= (x259 x1058) (x164 x1058))))
(assert (= (x164 22716352711855687325452455967051703357993960462129832944569490930019212460032) (x259 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (x717 x194))
(assert (x717 x1028))
(assert (= (x259 994519296000000) (x164 994519296000000)))
(assert (x717 x924))
(assert (= (=> (and (and (= (< 0 x868) x980) (= (x260 (+ 4 x800)) x349) (= x77 x316)) (or (and x980 (and (< x686 4294967296) (= x376 1))) (and (= x868 x376) (not x980)))) x559) x1073))
(assert (x45 x449))
(assert (x717 x517))
(assert (x1014 340282366920938463463374607431768211455))
(assert (x717 x405))
(assert (x717 x240))
(assert (x1014 x35))
(assert (x717 x170))
(assert (x717 x565))
(assert (x717 x803))
(assert (= x159 (x991 (x259 x159))))
(assert (x1014 x1028))
(assert (x717 x133))
(assert (= x92 (and x861 (not x1092))))
(assert (x521 x159))
(assert (x717 x120))
(assert (= (x164 1099511627775) (x259 1099511627775)))
(assert (x717 x404))
(assert (x717 x90))
(assert (= (x164 2054196882) (x259 2054196882)))
(assert (= (or x593 x960) x890))
(assert (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x991 (x164 110890046519461262771209238963172350779326551179552054297210380410598264406016))))
(assert (x717 x59))
(assert (=> (>= 10000 x480) (= (x259 x480) (x164 x480))))
(assert (= (x991 (x164 1152921504606846976)) 1152921504606846976))
(assert (x717 x443))
(assert (= (or x838 x972) x418))
(assert (x717 x543))
(assert (x717 x309))
(assert (x717 x919))
(assert (= x1063 (x991 (x259 x1063))))
(assert (x664 x895))
(assert (x1048 x35 x760))
(assert (= (x164 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x259 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x717 x598))
(assert (x717 x186))
(assert (x717 x354))
(assert (= (x537 x1011) 0))
(assert (=> (<= x159 10000) (= (x259 x159) (x164 x159))))
(assert (= (x164 24969082719448127345671160280498924465674002430646247116174538836667302674432) (x259 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (= x730 (and x148 (not x674))))
(assert (x717 x1039))
(assert (= (and (not x67) x132) x148))
(assert (= (x164 1099511627776) (x259 1099511627776)))
(assert (x1014 x95))
(assert (x717 x381))
(assert (x717 x495))
(assert (x521 x177))
(assert (=> (>= 10000 x1077) (= (x164 x1077) (x259 x1077))))
(assert (= (=> (= (= 0 x325) x67) (and (=> (and x67 (= x805 x277)) x913) (=> (and (and (and (not x706) (= x638 (x555 (- x449 x128))) (= (= x638 0) x674) (= (< x897 x128) x706)) (or (and (= 1000000000000000000000000000 x784) x674) (and (not x674) (and (= x434 (= 0 x638)) (= x819 (div x1065 6)) (= x618 (+ x98 x221)) (= (not x276) x629) (= (x555 (- x638 1)) x28) (= x603 (* x731 x874)) (= (mod (* x984 x874) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x44) (< (* x744 x29) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x984) x919) (< (+ x336 x830) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x260 (+ 500000000000000000000000000 x822)) x1043) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x638) x8) (= x830 (div x603 2)) (= x276 (< x919 x984)) (= x660 (= 0 x984)) (= (x228 x1095 x32) x669) (= (* x1039 x871) x1065) (= x112 (= x984 0)) (= (ite x978 1 0) x265) (= (+ x714 x647) x1027) (< (* x871 x1039) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (not x1085) x415) (= x976 (* x28 x638)) (= 0 x669) (= (mod (* x984 x984) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x822) (= x1054 (div x869 31536000)) (= (or x629 x112) x759) (= x731 x976) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x618 x819)) (= x1095 (ite (not x434) 1 0)) (= x98 x830) (< (* x638 x984) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> x1022 0) (< (+ 1000000000000000000000000000 x1054) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x638 x28)) (= x375 x1054) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x984) x70) (= x744 (ite (> x638 2) (x555 (- x638 2)) 0)) (= x32 (ite (> x28 x8) 1 0)) (= x618 x714) (= x172 (div x1081 1000000000000000000000000000)) (= (* x29 x744) x774) (= x871 x774) (= x1027 x784) (= x647 x819) (= x1022 (ite x759 1 0)) (= (or x415 x660) x978) (= (mod (* x28 x638) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x29) (= x1039 (div x172 31536000)) (= 1000000000000000000000000000 x772) (= (+ x375 x772) x336) (= x1085 (> x874 x70)) (< 0 x265) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x731 x874)) (= x410 (div x1043 1000000000000000000000000000)) (= x874 (div x410 994519296000000)) (= x1081 (x260 (+ x44 500000000000000000000000000))) (= (* x638 x984) x869) (= x336 x221))))) (not x67)) x56))) x823))
(assert (x717 x678))
(assert (= (x732 x632 1) (mod (* 2 x632) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x717 x553))
(assert (x1014 x1095))
(assert (= (or x931 x839) x359))
(assert (x521 x1063))
(assert (x717 x207))
(assert (x717 x645))
(assert (= (x991 (x164 24969082719448127345671160280498924465674002430646247116174538836667302674432)) 24969082719448127345671160280498924465674002430646247116174538836667302674432))
(assert (x717 x996))
(assert (x1014 x620))
(assert (= x138 (=> (and (= x286 (= 0 x309)) (not x286)) x558)))
(assert (= x854 (or x361 x937)))
(assert (= (or x550 x944) x219))
(assert (x717 x446))
(assert (x717 x685))
(assert (x717 x856))
(assert (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x991 (x164 50942633119752846454219349998365661925608737367104304655302372697894809501696))))
(assert (x750 x335))
(assert (x1096 x451))
(assert (x717 x567))
(assert (x717 x611))
(assert (x1048 x253 x95))
(assert (x717 x911))
(assert (= (x259 65536) (x164 65536)))
(assert (= (and (not x742) x226) x550))
(assert (x717 x916))
(assert (x717 x410))
(assert (x717 x197))
(assert (x717 x269))
(assert (x717 x909))
(assert (x717 x324))
(assert (= (x259 1118877564) (x164 1118877564)))
(assert (x717 x832))
(assert (= (x164 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x259 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (= x986 (=> (and (= x1019 (x555 (- x636 x907))) (= (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x728) x592) (= x608 (= 0 x1050)) (not x181) (= x728 (x260 (+ 31 x964))) (= (x228 340282366920938463463374607431768211455 x119) x566) (not x828) (= (x357 x384) x119) (= (x260 (+ 32 x1084)) x494) (= x310 (x228 340282366920938463463374607431768211455 x709)) (= x956 (= 0 x1019)) (= x364 x216) (not x583) (= (x228 340282366920938463463374607431768211455 x1026) x43) (= (x357 x1084) x1026) (= (x260 (+ 32 x100)) x753) (= x1084 (x260 (+ x384 32))) (= x428 (< x636 x907)) (= (x260 (+ 32 x21)) x448) (= (x357 x494) x709) (= (> x119 340282366920938463463374607431768211455) x583) (= (x260 (+ x448 32)) x100) (not x428) (= (x260 (+ 32 x511)) x21) (= (x260 (+ x384 x592)) x511) (= x212 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x964) (and (> 96 x964) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x964) true)))) (= x636 (+ x216 x863)) (= x863 x856) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x856 x364)) (not x608) (not x212) (= x828 (> x709 340282366920938463463374607431768211455)) (= x181 (< 340282366920938463463374607431768211455 x1026))) (and (=> (and x956 (and (= (x260 (+ x511 32)) x299) (= 0 x924) (< x632 65536) (= (< x632 128) x262) (<= 0 x632) (= x585 (x260 (+ 64 x511))) (<= x632 65535) (= x632 (x1021 x578)))) (and (=> (and (and (= (x732 x632 1) x456) (= x554 (x228 x253 x95)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x253) (= (x950 x910) x253) (= x95 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x732 1 x456))) (<= 0 x253) (= x145 x585)) x262) x852) (=> (not x262) x500))) (=> (and (= x145 x511) (not x956)) x852)))))
(assert (= x928 (and x178 x716)))
(assert (x717 x596))
(assert (=> (>= 10000 x53) (= (x259 x53) (x164 x53))))
(assert (x717 x961))
(assert (= (div x152 281474976710656) (x78 x152 48)))
(assert (x717 x842))
(assert (x717 x1081))
(assert (x717 x926))
(assert (= x528 (and x824 (not x69))))
(assert (= 340282366920938463463374607431768211456 (x991 (x164 340282366920938463463374607431768211456))))
(assert (= (x259 500000000000000000000000000) (x164 500000000000000000000000000)))
(assert (= (x991 (x259 x654)) x654))
(assert (= x1090 (and x528 (not x806))))
(assert (= (=> (and (not x24) (= (x332 x30) x821) (< x842 1099511627776) (= (x260 (+ 31 x713)) x1002) (>= x842 0) (<= x842 1099511627775) (= (x228 1099511627775 x449) x363) (= x1005 (x332 x474)) (= (x260 (+ x850 x875)) x640) (= x501 (x332 x320)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x713) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x713)) (< x713 128))) x24) (= (x332 x850) x1049) (>= 1099511627775 x501) (= (= x242 0) x1072) (= x842 (x284 x578)) (= x875 (x228 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1002)) (not x1072) (= x320 (x260 (+ x30 32))) (= x474 (x260 (+ 32 x850))) (= x30 (x260 (+ 32 x474))) (= (= x842 x363) x69)) (and (=> (and (not x69) (and (= x806 (= 0 x673)) (or (and (= x565 x94) x806) (and (not x806) (and (< 0 x90) (= x140 (+ x135 x576)) (= (not x476) x515) (= (div x1033 31536000) x586) (= 1000000000000000000000000000 x135) (not x658) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x565) x847) (= x954 (div x60 1000000000000000000000000000)) (= x20 (> x954 340282366920938463463374607431768211455)) (= x94 x954) (= (mod (* x140 x565) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1023) (= (< x897 x128) x658) (= x586 x576) (not x20) (= x12 (x228 340282366920938463463374607431768211455 x954)) (= (x555 (- x449 x128)) x417) (= (* x417 x673) x1033) (= (= 0 x565) x881) (= x627 (or x881 x515)) (= x90 (ite x627 1 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x417 x673)) (= x60 (x260 (+ x1023 500000000000000000000000000))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x586 1000000000000000000000000000)) (= x476 (< x847 x140))))))) x823) (=> (and x69 (and (= x88 x805) (= x800 x640) (= x420 x565))) x1073))) x65))
(assert (= (and x914 x200) x431))
(assert (x717 x166))
(assert (x717 x424))
(assert (x717 x314))
(assert (x717 x637))
(assert (x717 x657))
(assert (= (x537 x320) 0))
(assert (= (x991 (x768 x848 1)) (+ (x991 x848) 1)))
(assert (x717 x57))
(assert (x717 x277))
(assert (x1014 1099511627775))
(assert (= (and x633 x876) x408))
(assert (= (x164 1635491895) (x259 1635491895)))
(assert (x717 x30))
(assert (= (and x697 (not x189)) x103))
(check-sat)
(exit)