(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x324 0)) (((x26 (x344 x324) (x389 x324) (x107 Int)) (x164 (x186 Int)) (x369 (x6 x324) (x226 Int)))))
(declare-fun x203 () x324)
(declare-fun x57 () Bool)
(declare-fun x399 () Bool)
(declare-fun x188 () Int)
(declare-fun x217 () Int)
(declare-fun x353 () Int)
(declare-fun x307 () Int)
(declare-fun x182 () x324)
(declare-fun x345 (Int) Int)
(declare-fun x239 () Bool)
(declare-fun x141 () Bool)
(declare-fun x364 (x324) Int)
(declare-fun x109 () Bool)
(declare-fun x116 () Int)
(declare-fun x181 () Int)
(declare-fun x51 () Int)
(declare-fun x315 () x324)
(declare-fun x317 () Int)
(declare-fun x161 (Int) Int)
(declare-fun x237 () Int)
(declare-fun x408 () Bool)
(declare-fun x281 () Bool)
(declare-fun x205 () x324)
(declare-fun x17 () Bool)
(declare-fun x257 () Bool)
(declare-fun x94 (x324) Int)
(declare-fun x63 () Bool)
(declare-fun x377 () Bool)
(declare-fun x385 () Bool)
(declare-fun x279 () Int)
(declare-fun x39 () Bool)
(declare-fun x76 () x324)
(declare-fun x133 (x324) Int)
(declare-fun x412 (Int) x324)
(declare-fun x179 () Int)
(declare-fun x48 () Int)
(declare-fun x358 () Bool)
(declare-fun x295 () Bool)
(declare-fun x66 () Bool)
(declare-fun x25 () Int)
(declare-fun x167 () x324)
(declare-fun x216 () Int)
(declare-fun x23 () x324)
(declare-fun x36 () x324)
(declare-fun x202 () Bool)
(declare-fun x365 () Int)
(declare-fun x160 () Int)
(declare-fun x381 () Int)
(declare-fun x85 () x324)
(declare-fun x339 () Int)
(declare-fun x218 () x324)
(declare-fun x56 () Bool)
(declare-fun x91 () x324)
(declare-fun x264 () Int)
(declare-fun x373 () Bool)
(declare-fun x71 () Int)
(declare-fun x121 () Bool)
(declare-fun x236 () x324)
(declare-fun x192 () x324)
(declare-fun x396 () Int)
(declare-fun x151 () Int)
(declare-fun x13 () Int)
(declare-fun x383 () Bool)
(declare-fun x215 () Int)
(declare-fun x5 () Int)
(declare-fun x172 () Bool)
(declare-fun x298 () x324)
(declare-fun x171 () Bool)
(declare-fun x265 () Int)
(declare-fun x316 () x324)
(declare-fun x159 () Int)
(declare-fun x10 () Int)
(declare-fun x27 () Int)
(declare-fun x292 () Int)
(declare-fun x413 (x324) Int)
(declare-fun x143 () Int)
(declare-fun x154 () Bool)
(declare-fun x200 () x324)
(declare-fun x24 () Int)
(declare-fun x229 () Int)
(declare-fun x173 (x324) Int)
(declare-fun x38 () x324)
(declare-fun x212 () x324)
(declare-fun x79 () x324)
(declare-fun x136 () Int)
(declare-fun x84 (Int Int) Int)
(declare-fun x397 () Int)
(declare-fun x363 () Int)
(declare-fun x387 () Int)
(declare-fun x106 () Int)
(declare-fun x244 () x324)
(declare-fun x35 () Int)
(declare-fun x395 () Int)
(declare-fun x273 () Bool)
(declare-fun x9 () Int)
(declare-fun x196 () x324)
(declare-fun x52 () x324)
(declare-fun x304 () Bool)
(declare-fun x322 () x324)
(declare-fun x409 (x324) Int)
(declare-fun x20 () Bool)
(declare-fun x275 () Int)
(declare-fun x250 () Int)
(declare-fun x115 () Int)
(declare-fun x278 () Int)
(declare-fun x2 () Bool)
(declare-fun x284 () Int)
(declare-fun x33 () Bool)
(declare-fun x102 () x324)
(declare-fun x82 () Int)
(declare-fun x411 (x324) Int)
(declare-fun x168 () Int)
(declare-fun x156 () Int)
(declare-fun x266 () Int)
(declare-fun x70 () Int)
(declare-fun x193 () Bool)
(declare-fun x346 () Int)
(declare-fun x224 () Bool)
(declare-fun x392 () Bool)
(declare-fun x138 () x324)
(declare-fun x86 () Int)
(declare-fun x99 () x324)
(declare-fun x123 () Bool)
(declare-fun x206 () Bool)
(declare-fun x213 (x324) Int)
(declare-fun x238 () Bool)
(declare-fun x294 () Int)
(declare-fun x43 () Int)
(declare-fun x410 () x324)
(declare-fun x305 () Bool)
(declare-fun x97 () x324)
(declare-fun x126 () Bool)
(declare-fun x7 () Int)
(declare-fun x166 () x324)
(declare-fun x155 () x324)
(declare-fun x362 () Int)
(declare-fun x325 () Int)
(declare-fun x366 () x324)
(declare-fun x394 () Int)
(declare-fun x297 () x324)
(declare-fun x311 () x324)
(declare-fun x88 () x324)
(declare-fun x372 () x324)
(declare-fun x402 () x324)
(declare-fun x299 () x324)
(declare-fun x361 () Bool)
(declare-fun x248 () Int)
(declare-fun x4 () Int)
(declare-fun x272 () x324)
(declare-fun x391 () x324)
(declare-fun x49 () Int)
(declare-fun x335 () Bool)
(declare-fun x75 () Int)
(declare-fun x29 () Int)
(declare-fun x61 () Int)
(declare-fun x90 () x324)
(declare-fun x140 () x324)
(declare-fun x45 () Int)
(declare-fun x47 () Bool)
(declare-fun x326 () Int)
(declare-fun x15 () Int)
(declare-fun x419 (x324) Int)
(declare-fun x3 () Bool)
(declare-fun x277 () x324)
(declare-fun x139 () Int)
(declare-fun x341 () Int)
(declare-fun x321 () Bool)
(declare-fun x46 () Bool)
(declare-fun x306 () x324)
(declare-fun x280 () Bool)
(declare-fun x87 () x324)
(declare-fun x22 (x324) Int)
(declare-fun x233 () Int)
(declare-fun x14 () x324)
(declare-fun x286 (x324) Int)
(declare-fun x222 () x324)
(declare-fun x314 () Bool)
(declare-fun x165 () Int)
(declare-fun x195 () Bool)
(declare-fun x302 () Bool)
(declare-fun x320 () Int)
(declare-fun x11 () x324)
(declare-fun x152 () Int)
(declare-fun x308 () Bool)
(declare-fun x74 () Int)
(declare-fun x261 () x324)
(declare-fun x180 () Bool)
(declare-fun x125 () Int)
(declare-fun x134 () x324)
(declare-fun x425 () Bool)
(declare-fun x19 () Bool)
(declare-fun x111 () Int)
(declare-fun x197 () Int)
(declare-fun x422 () Int)
(declare-fun x68 () x324)
(declare-fun x12 () Int)
(declare-fun x329 () Int)
(declare-fun x243 () Int)
(declare-fun x414 () Int)
(declare-fun x367 () Int)
(declare-fun x54 () x324)
(declare-fun x149 () x324)
(declare-fun x211 (x324) Int)
(declare-fun x242 () Int)
(declare-fun x58 () Int)
(declare-fun x135 () Int)
(declare-fun x259 () Int)
(declare-fun x332 (Int) Int)
(declare-fun x158 (x324) Int)
(declare-fun x83 () x324)
(declare-fun x271 () Int)
(declare-fun x89 () Int)
(declare-fun x354 () Int)
(declare-fun x120 () Int)
(declare-fun x77 () Int)
(declare-fun x231 () Int)
(declare-fun x55 () Int)
(declare-fun x185 () Int)
(declare-fun x253 () x324)
(declare-fun x232 () Int)
(declare-fun x132 () x324)
(declare-fun x208 () Bool)
(declare-fun x146 () x324)
(declare-fun x401 () Int)
(declare-fun x427 () x324)
(declare-fun x421 () x324)
(declare-fun x50 () Bool)
(declare-fun x176 () Int)
(declare-fun x227 () Int)
(declare-fun x220 () Int)
(declare-fun x114 () Int)
(declare-fun x342 () Int)
(declare-fun x289 () x324)
(declare-fun x110 () Int)
(declare-fun x374 () Int)
(declare-fun x351 () Int)
(declare-fun x405 () Int)
(declare-fun x288 () Int)
(declare-fun x44 () Int)
(declare-fun x403 () Int)
(declare-fun x355 () Int)
(declare-fun x187 () Bool)
(declare-fun x296 () x324)
(declare-fun x254 () x324)
(declare-fun x327 () Int)
(declare-fun x228 () Int)
(declare-fun x163 () Bool)
(declare-fun x214 () Int)
(declare-fun x352 () Bool)
(declare-fun x96 () Int)
(declare-fun x30 () Int)
(declare-fun x251 () Int)
(declare-fun x340 () Bool)
(declare-fun x204 () x324)
(declare-fun x147 () Bool)
(declare-fun x105 () x324)
(declare-fun x400 () Int)
(declare-fun x28 () x324)
(declare-fun x174 () Int)
(declare-fun x127 () x324)
(declare-fun x198 () Int)
(declare-fun x360 () Bool)
(declare-fun x349 () x324)
(declare-fun x53 () Int)
(declare-fun x209 () x324)
(declare-fun x303 () Bool)
(declare-fun x323 () Int)
(declare-fun x65 () Bool)
(declare-fun x343 () Int)
(declare-fun x378 () Bool)
(declare-fun x162 () Bool)
(declare-fun x100 () Int)
(declare-fun x98 () x324)
(declare-fun x8 () Bool)
(declare-fun x129 () Int)
(declare-fun x104 () x324)
(declare-fun x269 () x324)
(declare-fun x260 () x324)
(declare-fun x1 () Int)
(declare-fun x241 () x324)
(declare-fun x415 () Int)
(declare-fun x178 (x324) Int)
(declare-fun x313 () x324)
(declare-fun x119 () Int)
(declare-fun x246 () Int)
(declare-fun x334 () Int)
(declare-fun x112 () x324)
(declare-fun x319 () Bool)
(declare-fun x41 () Bool)
(declare-fun x309 () Int)
(declare-fun x263 (x324) Int)
(declare-fun x388 () Int)
(declare-fun x183 () Bool)
(declare-fun x108 () x324)
(declare-fun x145 () Bool)
(declare-fun x359 () x324)
(declare-fun x337 () Int)
(declare-fun x67 () Int)
(declare-fun x247 () Int)
(declare-fun x34 () Bool)
(declare-fun x379 () Int)
(declare-fun x81 (x324) Int)
(declare-fun x190 () Bool)
(declare-fun x131 () x324)
(declare-fun x175 () Int)
(declare-fun x60 () Int)
(declare-fun x201 () Int)
(declare-fun x234 () Int)
(declare-fun x347 () x324)
(declare-fun x31 () x324)
(declare-fun x223 () x324)
(declare-fun x219 (x324) Int)
(declare-fun x122 () Bool)
(declare-fun x124 () x324)
(declare-fun x285 () x324)
(declare-fun x210 () x324)
(declare-fun x18 () Bool)
(declare-fun x64 () x324)
(declare-fun x137 () Int)
(declare-fun x262 () Int)
(declare-fun x380 () Int)
(declare-fun x240 () Int)
(declare-fun x283 () Bool)
(declare-fun x59 () Int)
(declare-fun x101 () Int)
(declare-fun x157 () Int)
(declare-fun x95 () Int)
(declare-fun x191 () Int)
(declare-fun x177 () Bool)
(declare-fun x417 () x324)
(declare-fun x40 () Int)
(declare-fun x291 () Int)
(declare-fun x230 () Int)
(declare-fun x424 () x324)
(declare-fun x256 () x324)
(declare-fun x69 () x324)
(declare-fun x153 () Bool)
(declare-fun x276 () Int)
(declare-fun x144 () Int)
(declare-fun x290 (x324) Int)
(declare-fun x235 () Bool)
(declare-fun x267 (Int Int) Int)
(declare-fun x423 () x324)
(declare-fun x258 () Bool)
(declare-fun x194 () Bool)
(declare-fun x300 () Int)
(declare-fun x338 () Bool)
(declare-fun x270 () Int)
(declare-fun x328 () Int)
(declare-fun x130 () Int)
(declare-fun x118 () Bool)
(declare-fun x386 () Int)
(declare-fun x310 () x324)
(declare-fun x113 () Bool)
(declare-fun x274 () x324)
(declare-fun x384 () Bool)
(declare-fun x42 () Bool)
(declare-fun x148 () Int)
(declare-fun x330 () Int)
(declare-fun x368 () Bool)
(declare-fun x287 () Int)
(declare-fun x142 () x324)
(declare-fun x333 () x324)
(declare-fun x406 () Bool)
(declare-fun x318 () Int)
(declare-fun x62 () Bool)
(declare-fun x184 () Int)
(declare-fun x128 () x324)
(declare-fun x376 () Int)
(declare-fun x150 () x324)
(declare-fun x416 () Int)
(declare-fun x268 () Bool)
(declare-fun x103 () Int)
(declare-fun x21 () Int)
(declare-fun x199 () Int)
(declare-fun x331 () Int)
(declare-fun x426 () Bool)
(declare-fun x356 () x324)
(declare-fun x255 () Int)
(declare-fun x293 () x324)
(declare-fun x92 () Int)
(declare-fun x245 () Bool)
(declare-fun x252 () x324)
(declare-fun x32 () Bool)
(declare-fun x348 () Int)
(declare-fun x393 () Int)
(declare-fun x73 () Int)
(declare-fun x398 () Int)
(declare-fun x221 () x324)
(define-fun x282 ((x324 x324) (x301 Int)) x324 (ite ((_ is x369) x324) (x369 (x6 x324) (+ (x226 x324) x301)) (ite ((_ is x26) x324) (x26 (x344 x324) (x389 x324) (+ (x107 x324) x301)) (x164 (+ x301 (x186 x324))))))
(define-fun x72 ((x357 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x357) (>= x357 0)) x357 (- x357 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x312 ((x357 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x357) (> 0 x357)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x357) x357))
(define-fun x170 ((x336 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x336) (>= x336 0)))
(define-fun x93 ((x336 Int)) Bool (and (= (x84 115792089237316195423570985008687907853269984665640564039457584007913129639935 x336) x336) (= x336 (x84 x336 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x404 ((x336 Int)) Bool (and (= (x84 0 x336) 0) (= 0 (x84 x336 0))))
(define-fun x78 ((x336 Int)) Bool (= (x84 x336 x336) x336))
(define-fun x249 ((x336 Int)) Bool (and (x78 x336) (x93 x336) (x404 x336)))
(define-fun x189 ((x336 Int) (x16 Int)) Bool (= (x84 x16 x336) (x84 x336 x16)))
(define-fun x382 ((x336 Int) (x16 Int)) Bool (and (>= (x84 x336 x16) 0) (=> (>= x16 0) (>= x16 (x84 x336 x16))) (=> (<= 0 x336) (>= x336 (x84 x336 x16)))))
(define-fun x207 ((x336 Int) (x16 Int)) Bool (and (x189 x336 x16) (x382 x336 x16)))
(define-fun x420 ((x336 Int)) Bool (= (mod x336 1461501637330902918203684832716283019655932542976) (x84 x336 1461501637330902918203684832716283019655932542975)))
(define-fun x375 ((x336 Int)) Bool (and (x207 x336 1461501637330902918203684832716283019655932542975) (x420 x336)))
(define-fun x370 ((x407 x324)) Int (ite (= x142 x407) x326 (x173 x407)))
(define-fun x371 ((x407 x324)) Int (ite (= x407 x138) x337 (x286 x407)))
(define-fun x117 ((x407 Int)) Int (ite (= x407 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x332 x407)))
(define-fun x37 ((x407 Int)) Int (ite (= 132 x407) x323 (x117 x407)))
(define-fun x390 ((x407 Int)) Int (ite (= 164 x407) x250 (x37 x407)))
(define-fun x169 ((x407 x324)) Int (ite (= x407 x149) x40 (x290 x407)))
(define-fun x80 ((x407 Int)) Int (ite (= 0 x407) 1 (x345 x407)))
(define-fun x225 ((x407 x324)) Int (ite (= x402 x407) x179 (x81 x407)))
(define-fun x418 ((x407 Int)) Int (ite (= 0 x407) 1 (x345 x407)))
(define-fun x350 ((x336 Int)) Bool (=> (and (not (= x336 2514000705)) (not (= 529866654 x336)) (not (= x336 616825448)) (not (= x336 2172364862)) (not (= x336 1889567281)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x336)) (not (= 1461501637330902918203684832716283019655932542976 x336)) (not (= 3569331386 x336)) (not (= 2835717307 x336)) (not (= x336 544138160)) (not (= x336 1000000000000000000)) (not (= 1086394137 x336)) (not (= x336 2646777772)) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x336)) (not (= x336 1013646637)) (not (= 1461501637330902918203684832716283019655932542975 x336)) (not (= 3265688288 x336)) (< 10000 x336)) (not ((_ is x164) (x412 x336)))))
(assert (x170 x45))
(assert (= (x22 (x412 x176)) x176))
(assert (= (x164 3265688288) (x412 3265688288)))
(assert (=> (>= 10000 x176) (= (x164 x176) (x412 x176))))
(assert (x170 x119))
(assert (x170 x101))
(assert (x170 x21))
(assert (=> (<= x323 10000) (= (x412 x323) (x164 x323))))
(assert (x350 x58))
(assert (= x43 (x22 (x412 x43))))
(assert (x170 x214))
(assert (x170 x242))
(assert (= (or (and (not x42) x118) (and x109 x273) (and x268 x193) (and x33 x2)) x32))
(assert (= x414 (x22 (x412 x414))))
(assert (= (x22 (x412 x111)) x111))
(assert (x350 x77))
(assert (x170 x309))
(assert (=> (>= 10000 x27) (= (x164 x27) (x412 x27))))
(assert (x170 x27))
(assert (x170 x276))
(assert (= (x22 (x412 x159)) x159))
(assert (= (and (not x141) x304) x235))
(assert (= (x22 (x164 1086394137)) 1086394137))
(assert (x170 x185))
(assert (= x268 (and x42 x118)))
(assert (x350 x414))
(assert (= (+ 4 (x22 x274)) (x22 (x282 x274 4))))
(assert (x350 x230))
(assert (x170 x292))
(assert (x170 x110))
(assert (x170 x227))
(assert (= x113 (or x408 (and (not x171) x180))))
(assert (= (and (not x122) x392) x187))
(assert (x350 x125))
(assert (x249 x422))
(assert (= (and x268 (not x193)) x109))
(assert (= (x22 (x412 x405)) x405))
(assert (x170 x217))
(assert (x170 x405))
(assert (x170 x159))
(assert (= x27 (x22 (x412 x27))))
(assert (= x307 (x22 (x412 x307))))
(assert (= (=> (and (= x152 x4) (= 0 x53)) x46) x425))
(assert (x170 x323))
(assert (x170 x1))
(assert (= x118 (and x33 (not x2))))
(assert (x170 x351))
(assert (= x280 (and x113 (not x340))))
(assert (x170 x330))
(assert (x350 x70))
(assert (= x426 (and (not x206) x41)))
(assert (x170 x300))
(assert (x350 x405))
(assert (x170 x329))
(assert (=> (>= 10000 x220) (= (x164 x220) (x412 x220))))
(assert (= (+ (x22 x134) 1) (x22 (x282 x134 1))))
(assert (x170 x73))
(assert (x170 x380))
(assert (x170 x327))
(assert (= (x22 (x412 x353)) x353))
(assert (= (=> (and (= x287 x152) (= 0 x234)) x383) x368))
(assert (=> (>= 10000 x414) (= (x164 x414) (x412 x414))))
(assert (x170 x341))
(assert (x375 x422))
(assert (x350 x96))
(assert (x170 x279))
(assert (=> (<= x397 10000) (= (x412 x397) (x164 x397))))
(assert (= x47 (and x109 (not x273))))
(assert (= (x412 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x164 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x170 x92))
(assert (x170 x294))
(assert (x170 x13))
(assert (x350 x198))
(assert (x170 x231))
(assert (= x121 (and x171 x180)))
(assert (x170 x348))
(assert (=> (<= x320 10000) (= (x412 x320) (x164 x320))))
(assert (x170 x15))
(assert (x350 x265))
(assert (x350 x255))
(assert (= (x22 (x164 2172364862)) 2172364862))
(assert (= x302 (or x190 x123)))
(assert (x170 x339))
(assert (= 3265688288 (x22 (x164 3265688288))))
(assert (x170 x120))
(assert (x170 x199))
(assert (x170 x387))
(assert (x170 x232))
(assert (x170 x320))
(assert (= x15 (x22 (x412 x15))))
(assert (= x408 (or (and x121 (not x195)) x18)))
(assert (x170 x291))
(assert (x170 x337))
(assert (=> (<= x175 10000) (= (x164 x175) (x412 x175))))
(assert (x350 x247))
(assert (=> (>= 10000 x307) (= (x412 x307) (x164 x307))))
(assert (x170 x353))
(assert (x170 x397))
(assert (=> (>= 10000 x353) (= (x164 x353) (x412 x353))))
(assert (=> (>= 10000 x265) (= (x412 x265) (x164 x265))))
(assert (= (x22 (x282 x333 3)) (+ 3 (x22 x333))))
(assert (= (x164 1461501637330902918203684832716283019655932542976) (x412 1461501637330902918203684832716283019655932542976)))
(assert (=> (>= 10000 x259) (= (x164 x259) (x412 x259))))
(assert (x170 x396))
(assert (x170 x184))
(assert (=> (<= x181 10000) (= (x412 x181) (x164 x181))))
(assert (x170 x136))
(assert (x170 x278))
(assert (x170 x233))
(assert (x170 x248))
(assert (x170 x60))
(assert (x350 x176))
(assert (x350 x422))
(assert (x170 x270))
(assert (x170 x362))
(assert (= x314 (and x302 x194)))
(assert (x170 x197))
(assert (= (x22 (x412 x422)) x422))
(assert (x170 x59))
(assert (x170 x246))
(assert (x249 1461501637330902918203684832716283019655932542975))
(assert (= (x22 (x164 1013646637)) 1013646637))
(assert (= (x22 (x412 x197)) x197))
(assert (= x224 (and x392 x122)))
(assert (= (x22 (x412 x247)) x247))
(assert (= x220 (x22 (x412 x220))))
(assert (x170 x398))
(assert (= (x22 (x412 x343)) x343))
(assert (=> (>= 10000 x331) (= (x412 x331) (x164 x331))))
(assert (x170 x422))
(assert (x170 x71))
(assert (x350 x259))
(assert (=> (>= 10000 x191) (= (x164 x191) (x412 x191))))
(assert (x170 x414))
(assert (= (or x224 x187) x406))
(assert (= (x164 1013646637) (x412 1013646637)))
(assert (= (and (not x373) x17) x41))
(assert (= x395 (x22 (x412 x395))))
(assert (= (=> (and (= (x84 1461501637330902918203684832716283019655932542975 x422) x130) (= (x84 1461501637330902918203684832716283019655932542975 x422) x405) (= x79 (x26 (x412 x331) x313 0)) (= (x312 (- x374 x279)) x129) (not (< x374 x279)) (<= 0 x60) (ite x19 x19 (= x129 (div x351 x339))) (= x315 (x26 (x412 x405) (x164 9) 0)) (= x339 (x364 x204)) (= (x282 x79 4) x311) (= (x26 (x412 x401) x306 0) x313) (= (= 0 x339) x19) (= x351 (mod (* x129 x339) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x45 (x84 1461501637330902918203684832716283019655932542975 x422)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x232 x59))) (= x86 (x72 (+ x232 x59))) (= (x84 1461501637330902918203684832716283019655932542975 x422) x12) (<= x60 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x26 (x412 x45) (x164 2) 0) x306) (>= x339 0) (= (x370 x311) x60) (= x232 (div x351 1000000000000000000)) (= (x26 (x412 x323) x315 0) x204) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x339)) x163) x283))
(assert (x170 x61))
(assert (x170 x229))
(assert (x170 x53))
(assert (= (x22 (x282 x269 1)) (+ (x22 x269) 1)))
(assert (x170 x415))
(assert (x170 x12))
(assert (x170 x230))
(assert (x170 x174))
(assert (x170 x103))
(assert (x350 x395))
(assert (x350 x159))
(assert (=> (<= x106 10000) (= (x412 x106) (x164 x106))))
(assert (x170 x135))
(assert (x170 x151))
(assert (x170 x58))
(assert (= x327 (x22 (x412 x327))))
(assert (x170 x271))
(assert (= (x164 1461501637330902918203684832716283019655932542975) (x412 1461501637330902918203684832716283019655932542975)))
(assert (x170 x188))
(assert (=> (>= 10000 x237) (= (x164 x237) (x412 x237))))
(assert (= (x22 (x164 1000000000000000000)) 1000000000000000000))
(assert (x170 x237))
(assert (x170 x156))
(assert (= x96 (x22 (x412 x96))))
(assert (= 616825448 (x22 (x164 616825448))))
(assert (x350 x114))
(assert (x170 x35))
(assert (x350 x323))
(assert (x170 x395))
(assert (x170 x198))
(assert (= (and x305 (not x62)) x65))
(assert (x170 x334))
(assert (=> (<= x230 10000) (= (x164 x230) (x412 x230))))
(assert (= (=> (and (= x34 (not (= 0 x74))) (and (= (ite x208 1 0) x74) (> 2172364862 x294) (not (= 544138160 x294)) (= x395 x48) (>= 1461501637330902918203684832716283019655932542975 x388) (= x256 (x282 x261 1)) (> 1013646637 x294) (= 616825448 x294) (not (> 529866654 x294)) (= x328 x181) (<= x181 1461501637330902918203684832716283019655932542975) (= (not x385) x377) (= (not x377) x208) (= x115 (x419 (x412 x346))) (>= x292 0) (= (x26 (x412 x388) (x164 4) 0) x289) (= x388 x394) (= x261 (x26 (x412 x395) x289 0)) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x291) true) (< x291 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x291))) (not (= 0 x67)) (>= 1461501637330902918203684832716283019655932542975 x395) (= (x26 (x412 x181) x256 0) x297) (= (not (= 0 x292)) x385) (= (x409 x297) x292) (<= x292 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 529866654 x294)) (> x115 0))) x34) x239))
(assert (x170 x262))
(assert (x170 x114))
(assert (x170 x403))
(assert (=> (<= x70 10000) (= (x412 x70) (x164 x70))))
(assert (x170 x394))
(assert (x350 x346))
(assert (= x323 (x22 (x412 x323))))
(assert (= (x22 (x282 x112 4)) (+ 4 (x22 x112))))
(assert (= 544138160 (x22 (x164 544138160))))
(assert (= (x22 (x412 x181)) x181))
(assert (= (=> (= (not (> x362 1)) x177) (and x177 x202)) x145))
(assert (= 3569331386 (x22 (x164 3569331386))))
(assert (x170 x139))
(assert (x170 x243))
(assert (x170 x51))
(assert (x249 x136))
(assert (=> (<= x111 10000) (= (x412 x111) (x164 x111))))
(assert (= (and x153 x319) x57))
(assert (x350 x45))
(assert (not x257))
(assert (=> (<= x376 10000) (= (x412 x376) (x164 x376))))
(assert (x170 x250))
(assert (=> (>= 10000 x247) (= (x412 x247) (x164 x247))))
(assert (= (x412 2514000705) (x164 2514000705)))
(assert (=> (>= 10000 x15) (= (x164 x15) (x412 x15))))
(assert (= (x164 529866654) (x412 529866654)))
(assert (x170 x317))
(assert (= (x412 616825448) (x164 616825448)))
(assert (x170 x228))
(assert (= (x22 (x164 2514000705)) 2514000705))
(assert (= (x22 (x282 x64 1)) (+ 1 (x22 x64))))
(assert (= (x412 2646777772) (x164 2646777772)))
(assert (= (=> (and (= x4 x291) (= x53 x67)) x147) x46))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x22 (x164 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (x22 (x412 x70)) x70))
(assert (= (x22 (x412 x262)) x262))
(assert (= (x22 (x412 x191)) x191))
(assert (x350 x106))
(assert (x350 x197))
(assert (x170 x7))
(assert (= (or x384 (and x304 x141)) x18))
(assert (=> (<= x43 10000) (= (x412 x43) (x164 x43))))
(assert (= (+ 2 (x22 x36)) (x22 (x282 x36 2))))
(assert (= x392 (and (not x3) x235)))
(assert (x170 x129))
(assert (= (and x121 x195) x66))
(assert (x170 x144))
(assert (= x320 (x22 (x412 x320))))
(assert (=> (>= 10000 x96) (= (x412 x96) (x164 x96))))
(assert (= (x22 (x164 1889567281)) 1889567281))
(assert (x170 x24))
(assert (= (x22 (x282 x108 4)) (+ 4 (x22 x108))))
(assert (= true x180))
(assert (=> (>= 10000 x77) (= (x164 x77) (x412 x77))))
(assert (x170 x307))
(assert (x170 x111))
(assert (= x265 (x22 (x412 x265))))
(assert (x350 x237))
(assert (= x383 (=> (and (= x234 x67) (= x287 x291)) x147)))
(assert (=> (<= x198 10000) (= (x164 x198) (x412 x198))))
(assert (x170 x365))
(assert (= (and x66 (not x295)) x153))
(assert (= x8 (=> (and (= (x26 (x412 x331) x218 0) x427) (= (x282 x333 3) x138) (= x85 (x26 (x412 x176) (x164 2) 0)) (= x159 (x84 1461501637330902918203684832716283019655932542975 x422)) (= x64 (x26 (x412 x331) x124 0)) (= (ite (< x21 x342) x5 x342) x337) (= x176 (x84 1461501637330902918203684832716283019655932542975 x422)) (= (x282 x64 1) x296) (= (x26 (x412 x159) (x164 2) 0) x410) (= x124 (x26 (x412 x401) x85 0)) (>= x342 0) (= x142 (x282 x427 4)) (= x98 (x26 (x412 x111) (x164 2) 0)) (= x141 (= x323 0)) (= x342 (x133 x296)) (= (x26 (x412 x401) x410 0) x102) (= (x26 (x412 x401) x98 0) x218) (= (x84 1461501637330902918203684832716283019655932542975 x422) x111) (= x333 (x26 (x412 x331) x102 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x342)) (and (=> (and (not x141) (and (>= x279 0) (<= x59 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x279 (x94 x349)) (= x59 (x219 x196)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x243) (= (x84 1461501637330902918203684832716283019655932542975 x422) x343) (= x196 (x26 (x412 x331) x423 0)) (= x23 (x26 (x412 x197) (x164 6) 0)) (= (x26 (x412 x175) (x164 7) 0) x293) (<= x279 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x26 (x412 x401) x293 0) x38) (= x3 (= x243 0)) (= x197 (x84 1461501637330902918203684832716283019655932542975 x422)) (= (x211 x417) x243) (= x417 (x26 (x412 x343) (x164 8) 0)) (= (x26 (x412 x401) x23 0) x76) (= x83 (x26 (x412 x323) x76 0)) (<= 0 x59) (= x423 (x26 (x412 x323) x38 0)) (= x175 (x84 1461501637330902918203684832716283019655932542975 x422)) (= (x26 (x412 x331) x83 0) x349) (>= x243 0))) (and (=> (and (and (= (x370 x155) x185) (= x155 (x282 x274 4)) (<= 0 x185) (= x185 x374) (= (x84 1461501637330902918203684832716283019655932542975 x422) x247) (= x274 (x26 (x412 x331) x140 0)) (= (x26 (x412 x247) (x164 2) 0) x366) (= x140 (x26 (x412 x401) x366 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x185)) x3) x283) (=> (and (and (or (and (and (= x25 (mod (* x13 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x160 x270) (< (* x13 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div x25 x24) x270)) (not x122)) (and x122 (= x160 0))) (and (>= x284 0) (= (= x49 0) x154) (ite x154 x154 (= (div x13 x49) x284)) (= x251 (ite (> x355 x21) x5 x355)) (= (mod (* x284 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x13) (= x209 (x26 (x412 x401) x210 0)) (= x105 (x282 x36 2)) (= (x211 x11) x24) (= x210 (x26 (x412 x259) (x164 2) 0)) (= x27 (x84 1461501637330902918203684832716283019655932542975 x422)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x284) (= x260 (x282 x146 3)) (= x146 (x26 (x412 x331) x209 0)) (= x284 (x413 x105)) (= x355 (x133 x205)) (= (x84 1461501637330902918203684832716283019655932542975 x422) x259) (= x307 (x84 1461501637330902918203684832716283019655932542975 x422)) (<= x309 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 0 x24)) (= x11 (x26 (x412 x307) (x164 8) 0)) (= x122 (= 0 x13)) (= (x312 (- x251 x309)) x49) (= x221 (x26 (x412 x376) (x164 2) 0)) (= x205 (x282 x134 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24) (>= x309 0) (<= 0 x24) (= (x26 (x412 x401) x221 0) x391) (= x223 (x26 (x412 x401) x104 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x355) (= x309 (x371 x260)) (<= 0 x355) (= x104 (x26 (x412 x27) (x164 2) 0)) (= (x84 1461501637330902918203684832716283019655932542975 x422) x376) (not (> x309 x251)) (= x134 (x26 (x412 x331) x223 0)) (= x36 (x26 (x412 x331) x391 0)))) (not x3)) x20))) (=> x141 x163)))))
(assert (x170 x247))
(assert (=> (<= x343 10000) (= (x164 x343) (x412 x343))))
(assert (x170 x10))
(assert (= x20 (=> (and (= (x72 (+ x160 x246)) x387) (= x246 (x370 x244)) (<= x246 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x387 x374) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x160 x246))) (= x128 (x26 (x412 x43) (x164 2) 0)) (<= 0 x246) (= x244 (x282 x112 4)) (= x112 (x26 (x412 x331) x31 0)) (= x31 (x26 (x412 x401) x128 0)) (= (x84 1461501637330902918203684832716283019655932542975 x422) x43)) x283)))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x22 (x164 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (x170 x343))
(assert (x350 x181))
(assert (x170 x115))
(assert (x170 x43))
(assert (= x335 (and (not x319) x153)))
(assert (= (x22 (x164 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (= (x412 1086394137) (x164 1086394137)))
(assert (x170 x44))
(assert (x170 x181))
(assert (x350 x401))
(assert (= x17 (and x172 x65)))
(assert (= (x412 2835717307) (x164 2835717307)))
(assert (= x304 (or x378 x238)))
(assert (x170 x9))
(assert (x170 x116))
(assert (x170 x215))
(assert (x170 x331))
(assert (= (x22 (x412 x388)) x388))
(assert (x350 x111))
(assert (x375 x288))
(assert (x350 x343))
(assert (x249 x288))
(assert (= x106 (x22 (x412 x106))))
(assert (= (and x3 x235) x338))
(assert (x170 x275))
(assert (x170 x326))
(assert (x375 x231))
(assert (x350 x397))
(assert (x350 x262))
(assert (= (x22 (x412 x237)) x237))
(assert (= (x164 544138160) (x412 544138160)))
(assert (= (+ (x22 x424) 3) (x22 (x282 x424 3))))
(assert (= (x22 (x412 x45)) x45))
(assert (= (and x66 x295) x378))
(assert (= x230 (x22 (x412 x230))))
(assert (x170 x284))
(assert (x170 x288))
(assert (= (+ (x22 x427) 4) (x22 (x282 x427 4))))
(assert (= x33 (and x280 x360)))
(assert (x170 x152))
(assert (x170 x400))
(assert (= (x22 (x282 x261 1)) (+ (x22 x261) 1)))
(assert (= x77 (x22 (x412 x77))))
(assert (x170 x367))
(assert (= (x22 (x412 x175)) x175))
(assert (x249 x231))
(assert (=> (>= 10000 x159) (= (x164 x159) (x412 x159))))
(assert (= (or (and x41 x206) (and x62 x305) (and x65 (not x172)) (and x373 x17)) x303))
(assert (= x331 (x22 (x412 x331))))
(assert (= (x22 (x412 x346)) x346))
(assert (=> (>= 10000 x197) (= (x412 x197) (x164 x197))))
(assert (x350 x320))
(assert (=> (<= x401 10000) (= (x412 x401) (x164 x401))))
(assert (= x245 (and (not x360) x280)))
(assert (= x384 (or x406 x338)))
(assert (x170 x240))
(assert (x170 x346))
(assert (x350 x175))
(assert (=> (<= x422 10000) (= (x412 x422) (x164 x422))))
(assert (= (+ (x22 x146) 3) (x22 (x282 x146 3))))
(assert (= x202 (=> (and (<= x415 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x132 (x26 (x412 x70) (x164 8) 0)) (not (> x217 x415)) (= (x84 1461501637330902918203684832716283019655932542975 x422) x379) (> x217 0) (= x127 (x26 (x412 x198) (x164 9) 0)) (= (x84 1461501637330902918203684832716283019655932542975 x422) x265) (= (x84 1461501637330902918203684832716283019655932542975 x422) x157) (= (x84 1461501637330902918203684832716283019655932542975 x422) x198) (= x228 (x211 x132)) (= (= x265 x255) x340) (<= x228 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x341 (x419 (x412 x265))) (= x203 (x26 (x412 x323) x127 0)) (<= 0 x415) (= x70 (x84 1461501637330902918203684832716283019655932542975 x422)) (= (x364 x203) x415) (not (= 0 x341)) (= x151 128) (not (> x217 x228)) (= (x312 (- x415 x250)) x116) (= x275 (x312 (- x228 x250))) (>= x228 0)) (and (=> (and (and (not (= 1086394137 x214)) (> x266 0) (not (> 4 x215)) (not (= 1889567281 x214)) (= x217 x248) (= (x312 (- x215 4)) x7) (= x62 (or (and (< x7 64) (= true (<= x7 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x7 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x215 68) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x10) (not (< x214 1086394137)) (= x215 68) (= x231 x136) (not (= 2514000705 x214)) (= (x419 (x412 x255)) x266) (not (= 2646777772 x214)) (= 2835717307 x214)) x340) (and (=> x62 x425) (=> (and (not x62) (and (= (= x231 x393) x172) (= x393 (x84 1461501637330902918203684832716283019655932542975 x231)))) (and (=> (not x172) x425) (=> (and x172 (and (= (x290 x222) x330) (<= x330 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x248 x242) (<= 0 x330) (= x373 (< x330 x217)) (= x222 (x26 (x412 x346) (x164 1) 0)))) (and (=> x373 x425) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x334) (= x40 (x312 (- x330 x248))) (= (< x229 x334) x206) (<= 0 x334) (= x229 (x72 (+ x334 x248))) (= x334 (x169 x166)) (= x353 (x84 1461501637330902918203684832716283019655932542975 x136)) (= (x26 (x412 x346) (x164 1) 0) x149) (= (x26 (x412 x353) (x164 1) 0) x166)) (not x373)) (and (=> x206 x425) (=> (and (and (= 32 x4) (= (x84 1461501637330902918203684832716283019655932542975 x136) x92) (= x53 1)) (not x206)) x46))))))))) (=> (and (and (= x360 (= x265 x230)) (and (and (= x61 68) (= x329 76450787359836037641860180984291677749980919077056822294353438043884394381312) (< 0 x365) (= (or (> x271 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x271)) (> 64 x271))) x2) (= x44 x217) (not (= x325 2646777772)) (= (x312 (- x61 4)) x271) (not (= x325 1086394137)) (not (> 4 x61)) (not (< x325 1086394137)) (= (x419 (x412 x230)) x365) (= x288 x231) (= x325 2835717307) (= 68 x61) (not (= 1889567281 x325)) (not (= 2514000705 x325))) x360)) (not x340)) (and (=> (and (not x2) (and (= x42 (= x1 x231)) (= (x84 1461501637330902918203684832716283019655932542975 x231) x1))) (and (=> (and (and (= x44 x264) (= x403 (x81 x97)) (>= x403 0) (= x97 (x26 (x412 x346) (x164 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x403) (= (> x217 x403) x193)) x42) (and (=> (and (not x193) (and (= (x72 (+ x143 x44)) x100) (= x143 (x225 x91)) (= (> x143 x100) x273) (= x237 (x84 1461501637330902918203684832716283019655932542975 x288)) (= (x312 (- x403 x44)) x179) (<= x143 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x26 (x412 x346) (x164 1) 0) x402) (= (x26 (x412 x237) (x164 1) 0) x91) (>= x143 0))) (and (=> x273 x368) (=> (and (and (= 32 x287) (= (x84 1461501637330902918203684832716283019655932542975 x288) x9) (= 1 x234)) (not x273)) x383))) (=> x193 x368))) (=> (not x42) x368))) (=> x2 x368)))))))
(assert (= x50 (or (and (not x194) x302) x314)))
(assert (= (=> (and (= x108 (x26 (x412 x331) x131 0)) (= x298 (x282 x108 4)) (= x58 (x84 1461501637330902918203684832716283019655932542975 x422)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x71) (= x71 (x173 x298)) (= x240 x326) (not (>= (+ x381 x71) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x240 (x72 (+ x71 x381))) (>= x71 0) (= x356 (x26 (x412 x58) (x164 2) 0)) (= x131 (x26 (x412 x401) x356 0))) x8) x258))
(assert (x170 x74))
(assert (= (x22 (x412 x255)) x255))
(assert (= (x22 (x164 529866654)) 529866654))
(assert (x170 x160))
(assert (x170 x342))
(assert (= (x412 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x164 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x170 x376))
(assert (x170 x259))
(assert (x170 x25))
(assert (= (x22 (x412 x401)) x401))
(assert (x170 x148))
(assert (x170 x201))
(assert (= (x412 1889567281) (x164 1889567281)))
(assert (= (x22 (x412 x397)) x397))
(assert (x170 x328))
(assert (= (x22 (x412 x58)) x58))
(assert (x170 x96))
(assert (x350 x307))
(assert (x170 x318))
(assert (x170 x325))
(assert (= (x22 (x412 x376)) x376))
(assert (x170 x157))
(assert (=> (<= x255 10000) (= (x164 x255) (x412 x255))))
(assert (x350 x327))
(assert (x170 x416))
(assert (x170 x251))
(assert (x170 x234))
(assert (=> (>= 10000 x346) (= (x164 x346) (x412 x346))))
(assert (x170 x70))
(assert (x170 x354))
(assert (=> (>= 10000 x262) (= (x412 x262) (x164 x262))))
(assert (= (+ (x22 x212) 4) (x22 (x282 x212 4))))
(assert (= (x164 2172364862) (x412 2172364862)))
(assert (x170 x49))
(assert (= (x22 (x412 x259)) x259))
(assert (x170 x168))
(assert (x170 x191))
(assert (x170 x265))
(assert (x170 x381))
(assert (x350 x353))
(assert (x170 x393))
(assert (x170 x137))
(assert (x350 x331))
(assert (= 2835717307 (x22 (x164 2835717307))))
(assert (x170 x401))
(assert (=> (>= 10000 x388) (= (x164 x388) (x412 x388))))
(assert (= (+ (x22 x347) 1) (x22 (x282 x347 1))))
(assert (x170 x86))
(assert (= (=> (and (and (= x156 (x419 (x412 x346))) (<= x416 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x101) (< x348 3569331386) (= x5 x21) (not (or (> x354 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 64 x354) (= (<= x354 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (<= x231 1461501637330902918203684832716283019655932542975) (<= 0 x101) (= x422 x386) (= x422 x139) (= x119 0) (= 3265688288 x348) (= x400 x323) (>= x231 0) (= x75 0) (<= x398 1461501637330902918203684832716283019655932542975) (= (x312 (- x165 4)) x354) (not (> 3265688288 x348)) (= x276 x250) (= x188 x119) (= x323 x231) (<= 0 x416) (<= 0 x400) (>= x300 0) (<= x300 1461501637330902918203684832716283019655932542975) (= (x26 (x412 x422) (x164 3) 0) x285) x183 (> x156 0) (= (> x362 0) x171) (<= 0 x398) (= x51 x398) (= x250 x217) (= (x178 x285) x362) (not (= 2 x101)) (>= 1461501637330902918203684832716283019655932542975 x422) (= x183 (not (= 0 x103))) (not (< x348 2172364862)) (and (> x165 67) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x165) true)) (= x227 x318) (<= x400 1461501637330902918203684832716283019655932542975) (= x416 x227) (not (< x165 4))) (and (<= x96 1461501637330902918203684832716283019655932542975) (= x126 false) (= (x282 x269 1) x54) (= x162 (not (= x317 0))) (= (ite x63 1 0) x103) (>= 1461501637330902918203684832716283019655932542975 x110) (< 0 x346) (= (x419 (x412 x346)) x120) (not (= x230 x255)) (>= 1461501637330902918203684832716283019655932542975 x346) (not (= x82 544138160)) (>= x278 0) (>= 1461501637330902918203684832716283019655932542975 x394) (= x233 3265688288) (= x99 (x26 (x412 x414) (x164 4) 0)) (= (x409 x88) x317) (= x199 (x213 (x412 x255))) (>= x48 0) (>= x317 0) (<= x114 1461501637330902918203684832716283019655932542975) x56 (= x114 x328) (= (< 0 (x419 (x412 x346))) x361) (<= x201 255) (= false x399) (= x278 (x213 (x412 x230))) (> x120 0) (not (< x82 529866654)) (< x82 1013646637) (<= x414 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x317) (not (= x255 x346)) (< 0 x255) (= x396 2) (< x82 2172364862) (= x394 x414) (= (not x162) x352) (= (x213 (x412 x346)) x168) x321 (= (< 0 (x419 (x412 x255))) x56) (>= 1461501637330902918203684832716283019655932542975 x328) (= x63 (not x352)) (= x321 (> (x419 (x412 x230)) 0)) (>= x199 0) (<= x230 1461501637330902918203684832716283019655932542975) (= false x358) (>= x394 0) (= x82 616825448) (not (= 529866654 x82)) (> x230 0) (>= x201 0) (= (x26 (x412 x96) x99 0) x269) (<= 0 x110) (not (= x230 x346)) (= x48 x96) x361 (<= 0 x168) (<= 0 x328) (<= x255 1461501637330902918203684832716283019655932542975) (<= x48 1461501637330902918203684832716283019655932542975) (= x281 false) (= (x26 (x412 x114) x54 0) x88))) (and (=> (and x171 (and (= x299 (x26 (x412 x331) x310 0)) (= x380 (x178 x253)) (= x253 (x26 (x412 x327) (x164 3) 0)) (= x150 x241) (= (x84 1461501637330902918203684832716283019655932542975 x422) x320) (= x95 0) (> 1461501637330902918203684832716283019655932542976 x331) (= x331 (x411 x150)) (= x241 (x369 x253 0)) (= (< 0 x174) x195) (> x380 0) (= x174 (x263 x299)) (>= 1461501637330902918203684832716283019655932542975 x331) (= x327 (x84 1461501637330902918203684832716283019655932542975 x422)) (>= x331 0) (= x310 (x26 (x412 x320) (x164 4) 0)))) (and (=> (and x195 (and (= (x263 x200) x89) (= x401 (x158 x52)) (= x254 x52) (>= x401 0) (<= x135 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x401 1461501637330902918203684832716283019655932542976) (= (x84 1461501637330902918203684832716283019655932542975 x422) x125) (= x295 (= x135 0)) (<= x401 1461501637330902918203684832716283019655932542975) (= x135 (x211 x87)) (= x68 (x26 (x412 x125) (x164 4) 0)) (> x89 0) (= (x26 (x412 x191) (x164 8) 0) x87) (= (x84 1461501637330902918203684832716283019655932542975 x422) x191) (= x254 (x369 x200 0)) (<= 0 x135) (= (x26 (x412 x331) x68 0) x200))) (and (=> (and (and (= (x173 x236) x148) (= (x26 (x412 x401) x372 0) x28) (= (x282 x212 4) x236) (= x326 x148) (= (x26 (x412 x331) x28 0) x212) (= x372 (x26 (x412 x106) (x164 2) 0)) (<= 0 x148) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x148) (= (x84 1461501637330902918203684832716283019655932542975 x422) x106)) x295) x8) (=> (and (not x295) (and (or (and (not x319) (and (= x35 x381) (= x137 (mod (* 1000000000000000000 x30) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x137 x216) x35) (< (* 1000000000000000000 x30) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (= x381 0) x319)) (and (= (x26 (x412 x397) (x164 2) 0) x192) (= x216 (x211 x90)) (= x316 (x26 (x412 x401) x322 0)) (= x182 (x282 x424 3)) (= (x26 (x412 x331) x272 0) x347) (= x359 (x282 x347 1)) (= (x26 (x412 x15) (x164 2) 0) x322) (= x220 (x84 1461501637330902918203684832716283019655932542975 x422)) (<= x363 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x363 0) (= (= x73 0) x39) (= x55 (x133 x359)) (not (= 0 x216)) (= x184 (ite (> x55 x21) x5 x55)) (>= x55 0) (= x397 (x84 1461501637330902918203684832716283019655932542975 x422)) (ite x39 x39 (= (div x30 x73) x29)) (= (x84 1461501637330902918203684832716283019655932542975 x422) x77) (= (x312 (- x184 x363)) x73) (= x90 (x26 (x412 x77) (x164 8) 0)) (<= x216 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x184 x363)) (= (x286 x182) x363) (= (x26 (x412 x401) x192 0) x69) (= x29 (x413 x14)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x29) (= (x282 x421 2) x14) (<= 0 x216) (= (x26 (x412 x331) x69 0) x424) (= (= 0 x30) x319) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x55) (= (x84 1461501637330902918203684832716283019655932542975 x422) x15) (= (mod (* x29 x73) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x30) (>= x29 0) (= x252 (x26 (x412 x220) (x164 2) 0)) (= x421 (x26 (x412 x331) x316 0)) (= (x26 (x412 x401) x252 0) x272)))) x258))) (=> (not x195) x145))) (=> (not x171) x202))) x257))
(assert (= (x22 (x412 x125)) x125))
(assert (= x147 (=> (and (or (not x194) x194) (= (= x67 0) x194)) x239)))
(assert (x170 x4))
(assert (x350 x43))
(assert (=> (<= x327 10000) (= (x412 x327) (x164 x327))))
(assert (x170 x67))
(assert (=> (>= 10000 x45) (= (x412 x45) (x164 x45))))
(assert (x170 x100))
(assert (= (x22 (x164 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x170 x255))
(assert (= x198 (x22 (x412 x198))))
(assert (x350 x388))
(assert (x170 x30))
(assert (x170 x176))
(assert (=> (<= x114 10000) (= (x412 x114) (x164 x114))))
(assert (=> (>= 10000 x405) (= (x164 x405) (x412 x405))))
(assert (x170 x5))
(assert (x350 x376))
(assert (x170 x130))
(assert (x170 x143))
(assert (x170 x379))
(assert (= (or x303 x426) x123))
(assert (x170 x216))
(assert (x170 x75))
(assert (= (x22 (x164 2646777772)) 2646777772))
(assert (x170 x106))
(assert (=> (<= x58 10000) (= (x164 x58) (x412 x58))))
(assert (=> (<= x125 10000) (= (x412 x125) (x164 x125))))
(assert (= (x22 (x412 x114)) x114))
(assert (= x163 (=> (and (= x144 (x263 x167)) (= (not (< 1 x144)) x308) (= (x26 (x412 x331) x277 0) x167) (= x262 (x84 1461501637330902918203684832716283019655932542975 x422)) (= (x26 (x412 x262) (x164 4) 0) x277)) (and x308 x145))))
(assert (x170 x95))
(assert (x170 x179))
(assert (= (+ (x22 x421) 2) (x22 (x282 x421 2))))
(assert (x170 x220))
(assert (= (and x340 x113) x305))
(assert (x350 x220))
(assert (x170 x55))
(assert (x170 x374))
(assert (x170 x287))
(assert (x170 x386))
(assert (x170 x82))
(assert (x170 x388))
(assert (= (x412 1000000000000000000) (x164 1000000000000000000)))
(assert (x170 x165))
(assert (x170 x89))
(assert (x170 x175))
(assert (x170 x77))
(assert (x350 x191))
(assert (= (+ (x22 x79) 4) (x22 (x282 x79 4))))
(assert (x350 x15))
(assert (x170 x48))
(assert (x170 x40))
(assert (x170 x29))
(assert (x170 x363))
(assert (= (or x57 x335) x238))
(assert (x170 x125))
(assert (=> (>= 10000 x395) (= (x412 x395) (x164 x395))))
(assert (x375 x136))
(assert (x170 x355))
(assert (= (x164 3569331386) (x412 3569331386)))
(assert (x170 x264))
(assert (x170 x266))
(assert (= (or x47 x32) x190))
(assert (x350 x27))
(check-sat)
(exit)