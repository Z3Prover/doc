(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x72 0)) (((x375 (x337 x72) (x159 x72) (x672 Int)) (x502 (x192 x72) (x188 x72) (x784 x72) (x608 x72) (x325 Int)) (x421 (x592 x72) (x825 x72) (x3 x72) (x198 x72) (x74 x72) (x755 Int)) (x656 (x289 x72) (x521 x72) (x1013 x72) (x589 x72) (x987 x72) (x818 x72) (x998 Int)) (x994 (x893 Int)) (x76 (x391 x72) (x81 x72) (x217 x72) (x193 x72) (x649 x72) (x209 x72) (x416 x72) (x631 Int)) (x541 (x117 x72) (x415 x72) (x513 x72) (x483 Int)) (x726 (x1029 x72) (x760 Int)))))
(declare-fun x473 () Bool)
(declare-fun x936 () Int)
(declare-fun x504 () Bool)
(declare-fun x431 () Bool)
(declare-fun x852 (Int) Int)
(declare-fun x432 () Bool)
(declare-fun x985 () Bool)
(declare-fun x359 () Int)
(declare-fun x270 () Bool)
(declare-fun x675 () Int)
(declare-fun x443 (x72) Int)
(declare-fun x560 () Int)
(declare-fun x702 () Int)
(declare-fun x444 () Bool)
(declare-fun x408 () x72)
(declare-fun x557 () Bool)
(declare-fun x60 () Bool)
(declare-fun x874 () Bool)
(declare-fun x748 () Int)
(declare-fun x327 () Int)
(declare-fun x365 () Bool)
(declare-fun x175 () Int)
(declare-fun x323 () Bool)
(declare-fun x38 () Bool)
(declare-fun x142 () Bool)
(declare-fun x529 () Int)
(declare-fun x744 () Bool)
(declare-fun x619 () Bool)
(declare-fun x109 () Bool)
(declare-fun x496 () Bool)
(declare-fun x222 () Int)
(declare-fun x746 () Bool)
(declare-fun x538 () Int)
(declare-fun x850 () Int)
(declare-fun x1026 () Bool)
(declare-fun x1014 () Int)
(declare-fun x122 () Bool)
(declare-fun x862 () Int)
(declare-fun x201 () Bool)
(declare-fun x584 () Int)
(declare-fun x514 () Bool)
(declare-fun x242 () Int)
(declare-fun x564 () Int)
(declare-fun x176 () Int)
(declare-fun x922 () Bool)
(declare-fun x216 () Bool)
(declare-fun x291 () Bool)
(declare-fun x200 () Bool)
(declare-fun x405 () x72)
(declare-fun x798 () Bool)
(declare-fun x140 () Int)
(declare-fun x821 () Bool)
(declare-fun x652 () Int)
(declare-fun x605 () Bool)
(declare-fun x208 () Bool)
(declare-fun x169 () Bool)
(declare-fun x898 () Bool)
(declare-fun x957 () Bool)
(declare-fun x696 () Int)
(declare-fun x738 () Int)
(declare-fun x236 () Int)
(declare-fun x183 () Bool)
(declare-fun x52 () Bool)
(declare-fun x40 () Bool)
(declare-fun x777 () Int)
(declare-fun x417 () Bool)
(declare-fun x377 () Int)
(declare-fun x85 () Int)
(declare-fun x583 () Bool)
(declare-fun x101 () Bool)
(declare-fun x620 () Int)
(declare-fun x869 () Bool)
(declare-fun x561 () Bool)
(declare-fun x223 () Bool)
(declare-fun x411 () Bool)
(declare-fun x641 () Int)
(declare-fun x531 () Bool)
(declare-fun x498 () Int)
(declare-fun x885 () Bool)
(declare-fun x875 () Int)
(declare-fun x123 () Int)
(declare-fun x468 () Int)
(declare-fun x158 () Bool)
(declare-fun x259 () Bool)
(declare-fun x685 () Bool)
(declare-fun x121 () Bool)
(declare-fun x124 () Int)
(declare-fun x880 () Bool)
(declare-fun x262 () Int)
(declare-fun x579 () Int)
(declare-fun x996 () Bool)
(declare-fun x448 () Int)
(declare-fun x261 () Bool)
(declare-fun x246 () Bool)
(declare-fun x838 () Bool)
(declare-fun x116 () Bool)
(declare-fun x435 () Bool)
(declare-fun x463 () Int)
(declare-fun x329 () Bool)
(declare-fun x721 () Int)
(declare-fun x181 () Bool)
(declare-fun x512 () Int)
(declare-fun x445 () Bool)
(declare-fun x396 () Bool)
(declare-fun x214 () Bool)
(declare-fun x626 () Int)
(declare-fun x39 () Bool)
(declare-fun x401 () Int)
(declare-fun x783 () Bool)
(declare-fun x917 () Int)
(declare-fun x990 () Bool)
(declare-fun x110 () Int)
(declare-fun x287 () Int)
(declare-fun x353 () Int)
(declare-fun x115 () Int)
(declare-fun x643 () Int)
(declare-fun x900 () Bool)
(declare-fun x414 () Int)
(declare-fun x182 () x72)
(declare-fun x269 () Bool)
(declare-fun x439 () Bool)
(declare-fun x283 () Int)
(declare-fun x455 () Int)
(declare-fun x519 () Int)
(declare-fun x65 () Bool)
(declare-fun x781 () Bool)
(declare-fun x725 () Int)
(declare-fun x66 () Bool)
(declare-fun x628 () Bool)
(declare-fun x167 () Int)
(declare-fun x860 () Int)
(declare-fun x139 () Bool)
(declare-fun x731 () Int)
(declare-fun x137 () Bool)
(declare-fun x694 (Int Int) Int)
(declare-fun x274 () Bool)
(declare-fun x891 () Bool)
(declare-fun x670 () Int)
(declare-fun x472 () Bool)
(declare-fun x879 () Bool)
(declare-fun x629 () Bool)
(declare-fun x48 () x72)
(declare-fun x132 () Bool)
(declare-fun x265 () Int)
(declare-fun x723 () Int)
(declare-fun x718 () Bool)
(declare-fun x807 () Int)
(declare-fun x338 () Bool)
(declare-fun x767 () Int)
(declare-fun x306 () Int)
(declare-fun x754 () Bool)
(declare-fun x450 () Bool)
(declare-fun x381 () Bool)
(declare-fun x636 () Bool)
(declare-fun x86 () Int)
(declare-fun x279 () Bool)
(declare-fun x4 () Int)
(declare-fun x84 () Bool)
(declare-fun x37 () Int)
(declare-fun x335 () Bool)
(declare-fun x892 () Int)
(declare-fun x842 () Int)
(declare-fun x837 () Int)
(declare-fun x789 () Int)
(declare-fun x761 () Bool)
(declare-fun x149 () Bool)
(declare-fun x940 () Bool)
(declare-fun x565 () Bool)
(declare-fun x452 () Int)
(declare-fun x1004 () Int)
(declare-fun x436 () Int)
(declare-fun x785 () Int)
(declare-fun x610 () Bool)
(declare-fun x292 () Bool)
(declare-fun x735 (Int Int) Int)
(declare-fun x575 () Int)
(declare-fun x895 () Bool)
(declare-fun x352 () Bool)
(declare-fun x465 () Bool)
(declare-fun x1000 () Bool)
(declare-fun x286 () Int)
(declare-fun x1022 () Int)
(declare-fun x1031 () Int)
(declare-fun x87 () Int)
(declare-fun x250 () Bool)
(declare-fun x770 () x72)
(declare-fun x430 () Bool)
(declare-fun x910 () Bool)
(declare-fun x966 () Int)
(declare-fun x682 () Int)
(declare-fun x525 () Bool)
(declare-fun x942 (Int) Int)
(declare-fun x634 () Int)
(declare-fun x799 () Bool)
(declare-fun x178 () Int)
(declare-fun x699 () Bool)
(declare-fun x492 () Int)
(declare-fun x264 () Int)
(declare-fun x820 () Int)
(declare-fun x366 () Int)
(declare-fun x93 () Bool)
(declare-fun x596 () Bool)
(declare-fun x141 () Int)
(declare-fun x429 () Bool)
(declare-fun x229 () Bool)
(declare-fun x62 () Bool)
(declare-fun x587 () Bool)
(declare-fun x792 () Bool)
(declare-fun x868 () x72)
(declare-fun x241 () Int)
(declare-fun x590 () Bool)
(declare-fun x983 () Bool)
(declare-fun x653 () Int)
(declare-fun x350 () Bool)
(declare-fun x778 () Bool)
(declare-fun x127 (x72) Int)
(declare-fun x648 () x72)
(declare-fun x374 () Bool)
(declare-fun x59 () Int)
(declare-fun x692 () Bool)
(declare-fun x162 () Bool)
(declare-fun x24 () Int)
(declare-fun x578 () Bool)
(declare-fun x189 () Int)
(declare-fun x816 () Int)
(declare-fun x539 () Int)
(declare-fun x904 () Bool)
(declare-fun x1021 () Bool)
(declare-fun x952 () Int)
(declare-fun x464 () Int)
(declare-fun x495 (x72) Int)
(declare-fun x314 () Int)
(declare-fun x268 () Int)
(declare-fun x243 () Int)
(declare-fun x704 () Bool)
(declare-fun x796 () Int)
(declare-fun x469 () Bool)
(declare-fun x530 () Int)
(declare-fun x157 () Bool)
(declare-fun x932 () Int)
(declare-fun x808 () Bool)
(declare-fun x877 () Bool)
(declare-fun x471 () Bool)
(declare-fun x433 () Int)
(declare-fun x145 () Bool)
(declare-fun x550 () Bool)
(declare-fun x511 () Bool)
(declare-fun x441 () Bool)
(declare-fun x526 () Bool)
(declare-fun x571 () Bool)
(declare-fun x324 () Int)
(declare-fun x756 () Bool)
(declare-fun x991 () Bool)
(declare-fun x303 () Bool)
(declare-fun x168 (Int) Int)
(declare-fun x90 () Bool)
(declare-fun x376 () Int)
(declare-fun x254 () Bool)
(declare-fun x759 () Bool)
(declare-fun x597 () Int)
(declare-fun x322 () Int)
(declare-fun x568 () Int)
(declare-fun x227 () Int)
(declare-fun x563 () Int)
(declare-fun x817 () Bool)
(declare-fun x301 () x72)
(declare-fun x602 () Int)
(declare-fun x206 () Bool)
(declare-fun x210 () Bool)
(declare-fun x523 () Int)
(declare-fun x773 () Int)
(declare-fun x144 () Int)
(declare-fun x518 () Bool)
(declare-fun x650 () Bool)
(declare-fun x282 () Int)
(declare-fun x146 () Int)
(declare-fun x489 () Bool)
(declare-fun x635 () Int)
(declare-fun x43 () Int)
(declare-fun x930 () Bool)
(declare-fun x866 () Bool)
(declare-fun x555 () Bool)
(declare-fun x1011 () Int)
(declare-fun x481 () Bool)
(declare-fun x357 () Bool)
(declare-fun x705 () Int)
(declare-fun x659 () Int)
(declare-fun x622 () Int)
(declare-fun x349 () Int)
(declare-fun x94 () Bool)
(declare-fun x625 () Int)
(declare-fun x1030 () x72)
(declare-fun x333 () Bool)
(declare-fun x961 () x72)
(declare-fun x644 () Bool)
(declare-fun x558 () x72)
(declare-fun x935 () Bool)
(declare-fun x794 () Bool)
(declare-fun x191 () Int)
(declare-fun x612 () Int)
(declare-fun x256 () Bool)
(declare-fun x939 () Int)
(declare-fun x164 () Bool)
(declare-fun x135 () Int)
(declare-fun x138 () Bool)
(declare-fun x890 () Int)
(declare-fun x805 () Bool)
(declare-fun x32 () Bool)
(declare-fun x691 () Bool)
(declare-fun x19 () x72)
(declare-fun x986 () Bool)
(declare-fun x999 () Int)
(declare-fun x766 () Int)
(declare-fun x661 () Bool)
(declare-fun x947 () Int)
(declare-fun x927 () Int)
(declare-fun x941 () Bool)
(declare-fun x824 () Bool)
(declare-fun x591 () Int)
(declare-fun x963 () Bool)
(declare-fun x255 () Int)
(declare-fun x831 () Bool)
(declare-fun x543 () Bool)
(declare-fun x867 () Bool)
(declare-fun x554 () Bool)
(declare-fun x280 () Bool)
(declare-fun x937 () Bool)
(declare-fun x791 () Int)
(declare-fun x369 () Bool)
(declare-fun x897 () Int)
(declare-fun x371 () Bool)
(declare-fun x711 () Bool)
(declare-fun x562 () Int)
(declare-fun x354 () Bool)
(declare-fun x533 () Int)
(declare-fun x290 () Int)
(declare-fun x70 () Int)
(declare-fun x104 () x72)
(declare-fun x309 () Int)
(declare-fun x928 () Bool)
(declare-fun x394 () Bool)
(declare-fun x907 () Bool)
(declare-fun x5 () Int)
(declare-fun x296 () Bool)
(declare-fun x788 () Int)
(declare-fun x984 () Bool)
(declare-fun x844 () Bool)
(declare-fun x836 () Bool)
(declare-fun x975 () Int)
(declare-fun x195 () Int)
(declare-fun x244 () Int)
(declare-fun x91 () Int)
(declare-fun x827 (Int) Int)
(declare-fun x285 () Bool)
(declare-fun x974 () Bool)
(declare-fun x953 () Bool)
(declare-fun x197 () Bool)
(declare-fun x151 () x72)
(declare-fun x962 () Int)
(declare-fun x11 () Bool)
(declare-fun x454 () Bool)
(declare-fun x658 () Bool)
(declare-fun x965 () Bool)
(declare-fun x467 () Bool)
(declare-fun x102 () Int)
(declare-fun x757 () Bool)
(declare-fun x919 () Bool)
(declare-fun x9 () x72)
(declare-fun x811 () Bool)
(declare-fun x378 () Int)
(declare-fun x1 () Int)
(declare-fun x1024 () Int)
(declare-fun x972 () Bool)
(declare-fun x31 () Bool)
(declare-fun x750 () Int)
(declare-fun x491 () Bool)
(declare-fun x1002 () Int)
(declare-fun x458 () Int)
(declare-fun x79 () Bool)
(declare-fun x413 () Int)
(declare-fun x80 () Int)
(declare-fun x688 () Int)
(declare-fun x901 () Int)
(declare-fun x708 () Bool)
(declare-fun x657 () Int)
(declare-fun x581 () x72)
(declare-fun x576 () Bool)
(declare-fun x595 () Bool)
(declare-fun x673 () Bool)
(declare-fun x803 () Bool)
(declare-fun x1019 () Bool)
(declare-fun x23 () Int)
(declare-fun x758 () Bool)
(declare-fun x507 () Bool)
(declare-fun x679 () Bool)
(declare-fun x810 () Int)
(declare-fun x654 () Int)
(declare-fun x406 () Bool)
(declare-fun x180 () Bool)
(declare-fun x582 () Bool)
(declare-fun x240 () Int)
(declare-fun x97 () Int)
(declare-fun x300 () Bool)
(declare-fun x95 () Bool)
(declare-fun x709 () Int)
(declare-fun x536 (Int) Int)
(declare-fun x520 () Bool)
(declare-fun x173 () Int)
(declare-fun x970 () Bool)
(declare-fun x129 () Bool)
(declare-fun x980 () x72)
(declare-fun x340 () Bool)
(declare-fun x774 () Int)
(declare-fun x125 () Int)
(declare-fun x674 () Int)
(declare-fun x380 () Bool)
(declare-fun x700 () Int)
(declare-fun x148 () Int)
(declare-fun x98 () Bool)
(declare-fun x1027 () Bool)
(declare-fun x651 () Int)
(declare-fun x903 () Bool)
(declare-fun x186 (x72) Int)
(declare-fun x447 () Int)
(declare-fun x580 () Bool)
(declare-fun x334 () Int)
(declare-fun x835 () Bool)
(declare-fun x46 () Int)
(declare-fun x667 () Bool)
(declare-fun x281 () Int)
(declare-fun x474 () Bool)
(declare-fun x1018 () Bool)
(declare-fun x120 () Bool)
(declare-fun x532 () x72)
(declare-fun x855 () Bool)
(declare-fun x553 () Bool)
(declare-fun x45 () Bool)
(declare-fun x663 () Int)
(declare-fun x321 () Bool)
(declare-fun x542 () Bool)
(declare-fun x535 () Int)
(declare-fun x1023 () Bool)
(declare-fun x873 () Bool)
(declare-fun x933 () Bool)
(declare-fun x298 () Int)
(declare-fun x55 () Bool)
(declare-fun x613 () Int)
(declare-fun x304 () Bool)
(declare-fun x339 () Int)
(declare-fun x632 () Bool)
(declare-fun x440 () Bool)
(declare-fun x813 () Int)
(declare-fun x747 () Bool)
(declare-fun x841 () Bool)
(declare-fun x174 (Int Int) Int)
(declare-fun x22 () Int)
(declare-fun x790 () Bool)
(declare-fun x239 () Int)
(declare-fun x49 () Bool)
(declare-fun x367 () Bool)
(declare-fun x358 () Int)
(declare-fun x83 () Int)
(declare-fun x809 () Bool)
(declare-fun x839 () Bool)
(declare-fun x114 () Bool)
(declare-fun x277 () Int)
(declare-fun x763 () Bool)
(declare-fun x769 () Bool)
(declare-fun x64 () Int)
(declare-fun x906 () Int)
(declare-fun x909 () Int)
(declare-fun x171 () Int)
(declare-fun x732 () Bool)
(declare-fun x389 () Bool)
(declare-fun x73 () Int)
(declare-fun x585 () Bool)
(declare-fun x739 () Bool)
(declare-fun x199 () Bool)
(declare-fun x508 () Bool)
(declare-fun x527 () Bool)
(declare-fun x12 (x72) Int)
(declare-fun x493 () Bool)
(declare-fun x275 () Bool)
(declare-fun x407 () Bool)
(declare-fun x846 () Int)
(declare-fun x336 () Int)
(declare-fun x515 () Bool)
(declare-fun x745 () Bool)
(declare-fun x621 () Int)
(declare-fun x231 () Bool)
(declare-fun x427 () Int)
(declare-fun x7 () Int)
(declare-fun x15 () Bool)
(declare-fun x916 () Int)
(declare-fun x740 () Bool)
(declare-fun x647 () x72)
(declare-fun x764 () Bool)
(declare-fun x390 () Int)
(declare-fun x960 () Bool)
(declare-fun x934 () Bool)
(declare-fun x872 () Int)
(declare-fun x736 () Bool)
(declare-fun x35 () Bool)
(declare-fun x219 () Int)
(declare-fun x488 () Bool)
(declare-fun x234 () Int)
(declare-fun x388 () Int)
(declare-fun x1001 () Int)
(declare-fun x232 () Int)
(declare-fun x851 () Bool)
(declare-fun x272 () Bool)
(declare-fun x712 () Int)
(declare-fun x422 () Bool)
(declare-fun x392 () Bool)
(declare-fun x105 () Int)
(declare-fun x645 () Int)
(declare-fun x1025 () Bool)
(declare-fun x1005 (x72) Int)
(declare-fun x331 () Bool)
(declare-fun x859 () Bool)
(declare-fun x462 () Int)
(declare-fun x914 () Int)
(declare-fun x522 () Int)
(declare-fun x267 () Bool)
(declare-fun x8 () Bool)
(declare-fun x402 () Bool)
(declare-fun x642 () Bool)
(declare-fun x156 () Bool)
(declare-fun x534 () Int)
(declare-fun x252 () Int)
(declare-fun x185 () Int)
(declare-fun x801 () Bool)
(declare-fun x1015 () Bool)
(declare-fun x202 () Bool)
(declare-fun x451 () Bool)
(declare-fun x729 () Bool)
(declare-fun x126 () Bool)
(declare-fun x749 () Bool)
(declare-fun x887 () Bool)
(declare-fun x822 () Int)
(declare-fun x1032 () Int)
(declare-fun x832 () Int)
(declare-fun x477 () Int)
(declare-fun x913 () Int)
(declare-fun x44 () Bool)
(declare-fun x920 () Int)
(declare-fun x103 () Int)
(declare-fun x78 () Bool)
(declare-fun x196 () Int)
(declare-fun x697 () Bool)
(declare-fun x902 () Int)
(declare-fun x664 () Int)
(declare-fun x63 () Bool)
(declare-fun x544 () Bool)
(declare-fun x71 () Bool)
(declare-fun x136 () Bool)
(declare-fun x312 () Int)
(declare-fun x989 () Int)
(declare-fun x386 () Bool)
(declare-fun x26 () Bool)
(declare-fun x479 () Bool)
(declare-fun x743 () Bool)
(declare-fun x294 () Int)
(declare-fun x412 () Bool)
(declare-fun x931 () Int)
(declare-fun x258 () Int)
(declare-fun x706 (Int) Int)
(declare-fun x385 () Bool)
(declare-fun x849 () Int)
(declare-fun x348 () Bool)
(declare-fun x918 () Bool)
(declare-fun x570 (x72) Int)
(declare-fun x344 () Bool)
(declare-fun x30 () Int)
(declare-fun x614 () x72)
(declare-fun x106 () Int)
(declare-fun x545 () Bool)
(declare-fun x154 () Int)
(declare-fun x615 () Bool)
(declare-fun x921 () Bool)
(declare-fun x165 () x72)
(declare-fun x899 () Bool)
(declare-fun x678 () Int)
(declare-fun x719 () Int)
(declare-fun x150 () Bool)
(declare-fun x395 () Bool)
(declare-fun x517 (x72) Int)
(declare-fun x993 () Bool)
(declare-fun x924 () Int)
(declare-fun x424 () Bool)
(declare-fun x27 (Int Int) Int)
(declare-fun x404 () Bool)
(declare-fun x363 () x72)
(declare-fun x896 () Bool)
(declare-fun x51 () Int)
(declare-fun x328 () Bool)
(declare-fun x871 () x72)
(declare-fun x819 () Int)
(declare-fun x403 () Bool)
(declare-fun x724 () Bool)
(declare-fun x251 () Int)
(declare-fun x131 () Int)
(declare-fun x460 () Int)
(declare-fun x548 () Bool)
(declare-fun x253 () Int)
(declare-fun x1012 () Bool)
(declare-fun x549 () Bool)
(declare-fun x829 () Bool)
(declare-fun x737 () Int)
(declare-fun x617 (Int) Int)
(declare-fun x911 () Int)
(declare-fun x487 () Int)
(declare-fun x959 () Int)
(declare-fun x929 () Bool)
(declare-fun x973 () Bool)
(declare-fun x67 () Bool)
(declare-fun x888 () Int)
(declare-fun x228 () Bool)
(declare-fun x1020 () Int)
(declare-fun x646 () Bool)
(declare-fun x249 () Int)
(declare-fun x840 () Int)
(declare-fun x373 () Bool)
(declare-fun x205 () Int)
(declare-fun x128 () Int)
(declare-fun x143 () Int)
(declare-fun x506 () x72)
(declare-fun x894 () Int)
(declare-fun x14 () Bool)
(declare-fun x800 () Bool)
(declare-fun x687 () Bool)
(declare-fun x938 () Int)
(declare-fun x716 () Int)
(declare-fun x945 (Int Int) Int)
(declare-fun x368 () Bool)
(declare-fun x639 () Bool)
(declare-fun x238 () Int)
(declare-fun x271 () Int)
(declare-fun x753 () Bool)
(declare-fun x317 () Int)
(declare-fun x727 () Bool)
(declare-fun x655 () Bool)
(declare-fun x397 () Int)
(declare-fun x42 () Int)
(declare-fun x311 () Bool)
(declare-fun x118 () Int)
(declare-fun x215 () Int)
(declare-fun x478 () Bool)
(declare-fun x569 (Int) Int)
(declare-fun x509 () Bool)
(declare-fun x848 () Bool)
(declare-fun x969 () x72)
(declare-fun x82 () Int)
(declare-fun x686 () Bool)
(declare-fun x497 () Int)
(declare-fun x954 () Bool)
(declare-fun x96 () Bool)
(declare-fun x313 () Int)
(declare-fun x751 () Int)
(declare-fun x722 () Int)
(declare-fun x293 () Int)
(declare-fun x662 () Int)
(declare-fun x630 () Int)
(declare-fun x58 () Bool)
(declare-fun x230 () Bool)
(declare-fun x107 () Bool)
(declare-fun x864 () Int)
(declare-fun x278 () Bool)
(declare-fun x276 () Int)
(declare-fun x845 () Int)
(declare-fun x482 () Int)
(declare-fun x677 () Bool)
(declare-fun x607 () Bool)
(declare-fun x826 () Int)
(declare-fun x100 () Int)
(declare-fun x806 () Int)
(declare-fun x870 () Int)
(declare-fun x133 () Int)
(declare-fun x908 () Bool)
(declare-fun x1006 () Int)
(declare-fun x668 () Bool)
(declare-fun x720 () Bool)
(declare-fun x573 (x72) Int)
(declare-fun x89 () Bool)
(declare-fun x418 () Int)
(declare-fun x765 () Int)
(declare-fun x284 () x72)
(declare-fun x330 () Bool)
(declare-fun x889 () Bool)
(declare-fun x190 () Int)
(declare-fun x730 () Bool)
(declare-fun x449 () Bool)
(declare-fun x689 () Int)
(declare-fun x950 () Bool)
(declare-fun x409 () Int)
(declare-fun x257 (Int) Int)
(declare-fun x510 () Int)
(declare-fun x601 () Bool)
(declare-fun x967 () Int)
(declare-fun x147 () Int)
(declare-fun x318 () Int)
(declare-fun x92 () x72)
(declare-fun x235 () Int)
(declare-fun x707 () Bool)
(declare-fun x588 () Bool)
(declare-fun x307 () Bool)
(declare-fun x212 () Int)
(declare-fun x624 () Int)
(declare-fun x108 () Bool)
(declare-fun x795 () x72)
(declare-fun x979 () Int)
(declare-fun x698 () Bool)
(declare-fun x299 () Bool)
(declare-fun x676 () Bool)
(declare-fun x528 () Int)
(declare-fun x273 () Bool)
(declare-fun x665 () Int)
(declare-fun x155 () Int)
(declare-fun x420 () Bool)
(declare-fun x955 () Int)
(declare-fun x351 () Bool)
(declare-fun x25 (Int) Int)
(declare-fun x616 () Bool)
(declare-fun x343 () Bool)
(declare-fun x326 () Int)
(declare-fun x16 () Int)
(declare-fun x701 () Int)
(declare-fun x797 () Bool)
(declare-fun x17 () Bool)
(declare-fun x861 () Bool)
(declare-fun x611 () Bool)
(declare-fun x567 () Bool)
(declare-fun x194 () Bool)
(declare-fun x958 () Int)
(declare-fun x768 () Bool)
(declare-fun x221 () Bool)
(declare-fun x160 () Int)
(declare-fun x609 () Bool)
(declare-fun x41 () Bool)
(declare-fun x346 (Int) x72)
(declare-fun x260 () Int)
(declare-fun x834 () Int)
(declare-fun x204 () Bool)
(declare-fun x1003 () Int)
(declare-fun x130 () Bool)
(declare-fun x599 () Int)
(declare-fun x112 () Bool)
(declare-fun x297 () Int)
(declare-fun x237 () x72)
(declare-fun x68 () Int)
(declare-fun x484 () Bool)
(declare-fun x456 () Int)
(declare-fun x741 () Int)
(declare-fun x776 () x72)
(declare-fun x355 () Int)
(declare-fun x775 () Bool)
(declare-fun x119 () Int)
(declare-fun x830 () Bool)
(declare-fun x516 () Int)
(declare-fun x503 () Int)
(declare-fun x319 () Bool)
(declare-fun x606 () Bool)
(declare-fun x671 () Int)
(declare-fun x345 () Int)
(declare-fun x179 () Bool)
(declare-fun x419 () Bool)
(declare-fun x779 () Int)
(declare-fun x347 () Bool)
(declare-fun x28 () Int)
(declare-fun x75 () Int)
(declare-fun x956 () Bool)
(declare-fun x690 () Bool)
(declare-fun x410 () Bool)
(declare-fun x948 () Bool)
(declare-fun x951 () Int)
(declare-fun x1009 () Bool)
(declare-fun x315 () Bool)
(declare-fun x10 () Bool)
(declare-fun x1017 () Int)
(declare-fun x787 () Int)
(declare-fun x266 () Bool)
(declare-fun x976 () Int)
(declare-fun x453 () Bool)
(declare-fun x57 () Int)
(declare-fun x466 () Bool)
(declare-fun x618 () Bool)
(declare-fun x320 () Bool)
(declare-fun x968 () Bool)
(declare-fun x213 () Bool)
(declare-fun x883 () Bool)
(declare-fun x54 () Int)
(declare-fun x623 () Bool)
(declare-fun x332 () Int)
(declare-fun x946 () Bool)
(declare-fun x207 () Int)
(declare-fun x556 () Bool)
(declare-fun x915 () Bool)
(declare-fun x802 () Bool)
(declare-fun x1016 () Bool)
(declare-fun x905 () Int)
(declare-fun x233 () Int)
(declare-fun x865 () Bool)
(declare-fun x225 () Int)
(declare-fun x372 () Bool)
(declare-fun x926 () Bool)
(declare-fun x400 () Bool)
(declare-fun x884 () Bool)
(declare-fun x88 () Bool)
(declare-fun x681 () Bool)
(declare-fun x379 () Int)
(declare-fun x21 () Int)
(declare-fun x814 () Int)
(declare-fun x220 () Int)
(declare-fun x710 () Int)
(declare-fun x177 () Int)
(declare-fun x640 () Int)
(declare-fun x356 () Bool)
(declare-fun x992 () Bool)
(declare-fun x50 () Int)
(declare-fun x480 (Int Int) Int)
(declare-fun x499 () Bool)
(declare-fun x574 () Int)
(declare-fun x559 () Int)
(declare-fun x762 () Bool)
(declare-fun x593 () Bool)
(declare-fun x1028 () Int)
(declare-fun x61 () Bool)
(declare-fun x387 () Bool)
(declare-fun x383 () Bool)
(declare-fun x886 () Bool)
(declare-fun x438 () Bool)
(declare-fun x29 () Int)
(declare-fun x594 () Int)
(declare-fun x988 () Int)
(declare-fun x524 () Bool)
(declare-fun x669 () Bool)
(declare-fun x288 () Bool)
(declare-fun x854 () Bool)
(declare-fun x486 () Int)
(declare-fun x600 () Bool)
(define-fun x695 ((x72 x72) (x882 Int)) x72 (ite ((_ is x76) x72) (x76 (x391 x72) (x81 x72) (x217 x72) (x193 x72) (x649 x72) (x209 x72) (x416 x72) (+ (x631 x72) x882)) (ite ((_ is x656) x72) (x656 (x289 x72) (x521 x72) (x1013 x72) (x589 x72) (x987 x72) (x818 x72) (+ x882 (x998 x72))) (ite ((_ is x421) x72) (x421 (x592 x72) (x825 x72) (x3 x72) (x198 x72) (x74 x72) (+ (x755 x72) x882)) (ite ((_ is x502) x72) (x502 (x192 x72) (x188 x72) (x784 x72) (x608 x72) (+ (x325 x72) x882)) (ite ((_ is x541) x72) (x541 (x117 x72) (x415 x72) (x513 x72) (+ (x483 x72) x882)) (ite ((_ is x726) x72) (x726 (x1029 x72) (+ x882 (x760 x72))) (ite ((_ is x375) x72) (x375 (x337 x72) (x159 x72) (+ x882 (x672 x72))) (x994 (+ x882 (x893 x72)))))))))))
(define-fun x316 ((x684 Int)) Int (ite (and (<= 0 x684) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x684)) x684 (- x684 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x370 ((x684 Int)) Int (ite (and (>= x684 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x684)) (+ x684 115792089237316195423570985008687907853269984665640564039457584007913129639936) x684))
(define-fun x172 ((x77 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x77) (>= x77 0)))
(define-fun x742 ((x77 Int)) Bool (and (= x77 (x174 115792089237316195423570985008687907853269984665640564039457584007913129639935 x77)) (= (x174 x77 115792089237316195423570985008687907853269984665640564039457584007913129639935) x77)))
(define-fun x476 ((x77 Int)) Bool (and (= 0 (x174 0 x77)) (= 0 (x174 x77 0))))
(define-fun x428 ((x77 Int)) Bool (= (x174 x77 x77) x77))
(define-fun x546 ((x77 Int)) Bool (and (x476 x77) (x428 x77) (x742 x77)))
(define-fun x393 ((x77 Int) (x470 Int)) Bool (= (x174 x470 x77) (x174 x77 x470)))
(define-fun x248 ((x77 Int) (x470 Int)) Bool (and (=> (>= x470 0) (<= (x174 x77 x470) x470)) (>= (x174 x77 x470) 0) (=> (<= 0 x77) (<= (x174 x77 x470) x77))))
(define-fun x425 ((x77 Int) (x470 Int)) Bool (and (x248 x77 x470) (x393 x77 x470)))
(define-fun x828 ((x77 Int)) Bool (= (x174 x77 1461501637330902918203684832716283019655932542975) (mod x77 1461501637330902918203684832716283019655932542976)))
(define-fun x971 ((x77 Int)) Bool (and (x828 x77) (x425 x77 1461501637330902918203684832716283019655932542975)))
(define-fun x457 ((x77 Int)) Bool (= (+ (x174 x77 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x77 32)) (mod x77 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x856 ((x77 Int)) Bool (and (x425 x77 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x457 x77)))
(define-fun x603 ((x77 Int)) Bool (= (x174 x77 65535) (mod x77 65536)))
(define-fun x13 ((x77 Int)) Bool (and (x425 x77 65535) (x603 x77)))
(define-fun x461 ((x77 Int)) Bool (= (+ (mod x77 65536) (x174 x77 65536)) (mod x77 131072)))
(define-fun x446 ((x77 Int)) Bool (and (x425 x77 65536) (x461 x77)))
(define-fun x53 ((x77 Int)) Bool (= (+ (mod x77 65536) (x174 x77 4294901760)) (mod x77 4294967296)))
(define-fun x263 ((x77 Int)) Bool (and (x53 x77) (x425 x77 4294901760)))
(define-fun x997 ((x77 Int)) Bool (and (= (x735 115792089237316195423570985008687907853269984665640564039457584007913129639935 x77) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x735 x77 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x995 ((x77 Int)) Bool (and (= (x735 0 x77) x77) (= x77 (x735 x77 0))))
(define-fun x923 ((x77 Int)) Bool (= x77 (x735 x77 x77)))
(define-fun x211 ((x77 Int)) Bool (and (x923 x77) (x997 x77) (x995 x77)))
(define-fun x717 ((x77 Int) (x470 Int)) Bool (= (x735 x77 x470) (x735 x470 x77)))
(define-fun x876 ((x77 Int) (x470 Int)) Bool (and (=> (<= 0 x77) (<= x77 (x735 x77 x470))) (<= (x735 x77 x470) (+ x77 x470)) (=> (>= x470 0) (<= x470 (x735 x77 x470)))))
(define-fun x505 ((x77 Int) (x470 Int)) Bool (and (x876 x77 x470) (x717 x77 x470)))
(define-fun x399 ((x77 Int)) Bool (= (+ (x174 x77 131072) (mod x77 131072)) (mod x77 262144)))
(define-fun x982 ((x77 Int)) Bool (and (x399 x77) (x425 x77 131072)))
(define-fun x342 ((x77 Int)) Bool (= (mod x77 2) (x174 x77 1)))
(define-fun x33 ((x77 Int)) Bool (and (x425 x77 1) (x342 x77)))
(define-fun x490 ((x77 Int)) Bool (= (mod x77 128) (x174 x77 127)))
(define-fun x823 ((x77 Int)) Bool (and (x490 x77) (x425 x77 127)))
(define-fun x166 ((x77 Int)) Bool (= (x174 x77 4294967295) (mod x77 4294967296)))
(define-fun x184 ((x77 Int)) Bool (and (x425 x77 4294967295) (x166 x77)))
(define-fun x944 ((x77 Int)) Bool (= (x174 x77 255) (mod x77 256)))
(define-fun x693 ((x77 Int)) Bool (and (x425 x77 255) (x944 x77)))
(define-fun x302 ((x77 Int)) Bool (= (mod x77 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x174 x77 115792089210356248756420345214020892766250353992003419616917011526809519390720) (mod x77 26959946667150639794667015087019630673637144422540572481103610249216))))
(define-fun x364 ((x77 Int)) Bool (and (x425 x77 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x302 x77)))
(define-fun x218 ((x77 Int)) Bool (= (x174 x77 31) (mod x77 32)))
(define-fun x20 ((x77 Int)) Bool (and (x218 x77) (x425 x77 31)))
(define-fun x881 ((x77 Int)) Bool (= (mod x77 18446744073709551616) (x174 x77 18446744073709551615)))
(define-fun x912 ((x77 Int)) Bool (and (x425 x77 18446744073709551615) (x881 x77)))
(define-fun x341 ((x77 Int)) Bool (=> (and (<= 0 x77) (< x77 2)) (= x77 (x174 65537 x77))))
(define-fun x812 ((x77 Int)) Bool (and (x341 x77) (x425 x77 65537)))
(define-fun x666 ((x863 Int)) Int (x617 x863))
(define-fun x660 ((x863 Int)) Int (ite (= 128 x863) x140 (x25 x863)))
(define-fun x382 ((x863 Int)) Int (ite (and (<= 160 x863) (< x863 (+ x140 160))) (x617 (+ (- x863 160) x215)) (x660 x863)))
(define-fun x978 ((x863 Int)) Int (ite (= x448 x863) 0 (x382 x863)))
(define-fun x772 ((x863 Int)) Int (ite (= x863 x148) 18511804847318769127852513085034306573455405177986258919159753969546364452864 (x978 x863)))
(define-fun x494 ((x863 Int)) Int (ite (= x863 x634) x503 (x772 x863)))
(define-fun x1010 ((x863 Int)) Int (ite (= x863 x722) x7 (x494 x863)))
(define-fun x547 ((x863 Int)) Int (ite (and (< x863 (+ x148 0)) (<= x148 x863)) (x569 (+ 0 (- x863 x148))) (x1010 x863)))
(define-fun x384 ((x863 Int)) Int (ite x299 (x547 x863) (x1010 x863)))
(define-fun x633 ((x863 Int)) Int (ite (= x1024 x863) 66853817334611902194238164484889819180315942402426128563245745834960013477038 (x384 x863)))
(define-fun x598 ((x863 Int)) Int (ite (= x349 x863) (x127 x182) (x633 x863)))
(define-fun x714 ((x863 Int)) Int (ite (= x148 x863) x822 (x598 x863)))
(define-fun x47 ((x863 Int)) Int (ite (= x124 x863) 5 (x714 x863)))
(define-fun x833 ((x863 Int)) Int (ite (= x863 x597) 1536193505703097071473766605195189375248157893288704583667612676508713222144 (x47 x863)))
(define-fun x2 ((x863 Int)) Int (ite (= x863 x498) x1020 (x833 x863)))
(define-fun x426 ((x863 Int)) Int (ite (= x700 x863) x345 (x2 x863)))
(define-fun x308 ((x863 Int)) Int (ite (= x863 x358) x131 (x426 x863)))
(define-fun x398 ((x863 Int)) Int (ite (= x143 x863) x862 (x308 x863)))
(define-fun x733 ((x863 Int)) Int (ite (= x947 x863) x455 (x398 x863)))
(define-fun x187 ((x863 Int)) Int (ite x632 (x398 x863) (ite x296 (x308 x863) (ite x836 (x426 x863) (ite x681 (x2 x863) (x733 x863))))))
(define-fun x485 ((x863 Int)) Int (ite (= x863 x241) 0 (x187 x863)))
(define-fun x815 ((x863 Int)) Int (ite (= x863 x309) x51 (x485 x863)))
(define-fun x572 ((x863 Int)) Int (ite (= x863 x810) x916 (x815 x863)))
(define-fun x111 ((x863 Int)) Int (ite (= x863 x613) x814 (x572 x863)))
(define-fun x577 ((x863 Int)) Int (ite (= x240 x863) x83 (x111 x863)))
(define-fun x203 ((x863 Int)) Int (ite x808 (x111 x863) (ite x199 (x572 x863) (ite x526 (x815 x863) (ite x609 (x485 x863) (x577 x863))))))
(define-fun x152 ((x863 Int)) Int (ite (= x863 x1) 0 (x203 x863)))
(define-fun x734 ((x863 Int)) Int (ite (= x86 x863) x306 (x152 x863)))
(define-fun x786 ((x863 Int)) Int (ite (= x863 x1) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x734 x863)))
(define-fun x780 ((x863 Int)) Int (ite (= x326 x863) (x127 x182) (x786 x863)))
(define-fun x6 ((x863 Int)) Int (ite (and (>= x863 x1) (> (+ 32 x1) x863)) (x536 (+ 0 (- x863 x1))) (x780 x863)))
(define-fun x99 ((x863 Int)) Int (ite x267 (x6 x863) (x780 x863)))
(define-fun x163 ((x863 Int)) Int (ite (= x207 x863) x731 (x99 x863)))
(define-fun x360 ((x863 Int)) Int (ite (= x225 x863) x195 (x163 x863)))
(define-fun x305 ((x863 Int)) Int (ite (= x863 x909) x255 (x360 x863)))
(define-fun x224 ((x863 Int)) Int (ite (= x225 x863) x239 (x163 x863)))
(define-fun x1007 ((x863 Int)) Int (ite x114 (x163 x863) (ite x320 (ite x550 (x360 x863) (x305 x863)) (x224 x863))))
(define-fun x977 ((x863 Int)) Int (ite x743 (x99 x863) (x1007 x863)))
(define-fun x853 ((x863 Int)) Int (ite (= x196 x863) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x977 x863)))
(define-fun x638 ((x863 Int)) Int (ite (= x625 x863) (x127 x647) (x853 x863)))
(define-fun x113 ((x863 Int)) Int (ite (and (< x863 (+ x196 32)) (<= x196 x863)) (x827 (+ 0 (- x863 x196))) (x638 x863)))
(define-fun x475 ((x863 Int)) Int (ite x473 (x113 x863) (x638 x863)))
(define-fun x537 ((x863 Int)) Int (ite x718 (x475 x863) (x977 x863)))
(define-fun x943 ((x863 Int)) Int (ite (= x863 x890) x533 (x537 x863)))
(define-fun x683 ((x863 Int)) Int (ite (= x712 x863) x630 (x943 x863)))
(define-fun x170 ((x863 Int)) Int (ite (= x376 x863) x979 (x683 x863)))
(define-fun x437 ((x863 Int)) Int (ite (= x863 x712) x837 (x943 x863)))
(define-fun x566 ((x863 Int)) Int (ite x821 (x943 x863) (ite x453 (ite x340 (x683 x863) (x170 x863)) (x437 x863))))
(define-fun x442 ((x863 Int)) Int (ite x817 (x537 x863) (x566 x863)))
(define-fun x627 ((x863 Int)) Int (ite (= x244 x863) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x442 x863)))
(define-fun x56 ((x863 Int)) Int (ite (= x765 x863) (x127 x165) (x627 x863)))
(define-fun x310 ((x863 Int)) Int (ite (and (<= x244 x863) (> (+ x244 32) x863)) (x257 (+ (- x863 x244) 0)) (x56 x863)))
(define-fun x752 ((x863 Int)) Int (ite x578 (x310 x863) (x56 x863)))
(define-fun x703 ((x863 Int)) Int (ite x392 (x752 x863) (x442 x863)))
(define-fun x552 ((x863 Int)) Int (ite (= x813 x863) (x127 x92) (x703 x863)))
(define-fun x245 ((x863 Int)) Int (ite (= x447 x863) 1 (x552 x863)))
(define-fun x500 ((x863 Int)) Int (ite (= x863 x813) 0 (x245 x863)))
(define-fun x981 ((x863 Int)) Int (ite x965 (x537 x863) (x500 x863)))
(define-fun x771 ((x863 Int)) Int (ite (= x863 x258) x178 (x981 x863)))
(define-fun x949 ((x863 Int)) Int (ite (= x260 x863) x671 (x771 x863)))
(define-fun x586 ((x863 Int)) Int (ite (= x863 x689) x281 (x949 x863)))
(define-fun x857 ((x863 Int)) Int (ite (= x260 x863) x913 (x771 x863)))
(define-fun x161 ((x863 Int)) Int (ite x356 (x771 x863) (ite x930 (ite x96 (x949 x863) (x586 x863)) (x857 x863))))
(define-fun x637 ((x863 Int)) Int (ite x830 (x981 x863) (x161 x863)))
(define-fun x423 ((x863 Int)) Int (ite (= x863 x584) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x637 x863)))
(define-fun x247 ((x863 Int)) Int (ite (= x863 x710) (x127 x301) (x423 x863)))
(define-fun x925 ((x863 Int)) Int (ite (and (>= x863 x584) (< x863 (+ 32 x584))) (x168 (+ (- x863 x584) 0)) (x247 x863)))
(define-fun x69 ((x863 Int)) Int (ite x1027 (x925 x863) (x247 x863)))
(define-fun x964 ((x863 Int)) Int (ite x438 (x69 x863) (x637 x863)))
(define-fun x793 ((x863 Int)) Int (ite (= x575 x863) (x127 x92) (x964 x863)))
(define-fun x34 ((x863 Int)) Int (ite (= x675 x863) 1 (x793 x863)))
(define-fun x434 ((x863 Int)) Int (ite (= x106 x863) 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x34 x863)))
(define-fun x843 ((x863 Int)) Int (ite (= x262 x863) x492 (x434 x863)))
(define-fun x226 ((x863 Int)) Int (ite (= x863 x100) 0 (x843 x863)))
(define-fun x804 ((x863 Int)) Int (ite (= x863 x91) (x127 x92) (x226 x863)))
(define-fun x501 ((x863 Int)) Int (ite (= x955 x863) 1 (x804 x863)))
(define-fun x551 ((x863 Int)) Int (ite (= x863 x397) 160 (x501 x863)))
(define-fun x713 ((x863 Int)) Int (ite (= x863 x324) 0 (x551 x863)))
(define-fun x858 ((x863 Int)) Int (ite (= x227 x863) 0 (x713 x863)))
(define-fun x540 ((x863 Int)) Int (ite (and (> (+ 32 x106) x863) (<= x106 x863)) (x942 (+ 0 (- x863 x106))) (x858 x863)))
(define-fun x604 ((x863 x72)) Int (ite x299 (x1005 x863) (x495 x863)))
(define-fun x1008 ((x863 x72)) Int (ite (= x48 x863) x16 (x186 x863)))
(define-fun x878 ((x863 x72)) Int (ite (= x863 x48) x353 (x186 x863)))
(define-fun x847 ((x863 x72)) Int (ite x116 (x1008 x863) (x878 x863)))
(define-fun x715 ((x863 x72)) Int (ite (= x863 x969) 0 (x517 x863)))
(define-fun x153 ((x863 x72)) Int (ite x794 (x517 x863) (ite x402 (x517 x863) (x715 x863))))
(define-fun x459 ((x863 x72)) Int (ite (= x868 x863) x579 (x153 x863)))
(define-fun x18 ((x863 x72)) Int (ite x1018 (x153 x863) (x459 x863)))
(define-fun x361 ((x863 x72)) Int (ite (= x237 x863) x236 (x18 x863)))
(define-fun x1033 ((x863 x72)) Int (ite x116 (ite x582 (x18 x863) (x361 x863)) (x153 x863)))
(define-fun x36 ((x863 x72)) Int (ite (= x581 x863) x819 (x443 x863)))
(define-fun x782 ((x863 x72)) Int (ite x965 (x443 x863) (x36 x863)))
(define-fun x362 ((x863 Int)) Int (ite x668 (x540 x863) (x858 x863)))
(define-fun x295 ((x863 x72)) Int (ite x571 (x604 x863) (ite x668 (x12 x863) (x604 x863))))
(define-fun x134 ((x863 Int)) Int (ite x571 (x34 x863) (x362 x863)))
(define-fun x680 ((x863 Int)) Int (ite (= x50 x863) x512 (x134 x863)))
(define-fun x728 ((x77 Int)) Bool (=> (and (not (= 1536193505703097071473766605195189375248157893288704583667612676508713222144 x77)) (not (= x77 4294967296)) (not (= 65537 x77)) (not (= x77 1461501637330902918203684832716283019655932542975)) (not (= x77 97199519776808029778168953285215024309695167179541945341261303444449322336256)) (not (= x77 353073666)) (not (= 109562948294120585953088955926913691080166221410047079322077399086870164406272 x77)) (not (= x77 549686827)) (< 10000 x77) (not (= x77 9518847204935358166548570266051330015907116135037852959641967396525866745856)) (not (= x77 4294967295)) (not (= x77 131072)) (not (= 18446744073709551615 x77)) (not (= 66853817334611902194238164484889819180315942402426128563245745834960013477038 x77)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x77)) (not (= 4294901760 x77)) (not (= 346787896 x77)) (not (= 7776000 x77)) (not (= 1666326814 x77)) (not (= x77 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77)) (not (= x77 18511804847318769127852513085034306573455405177986258919159753969546364452864)) (not (= x77 65536)) (not (= x77 65535)) (not (= 6277101735386680763835789423207666416102355444464034512895 x77))) (not ((_ is x994) (x346 x77)))))
(assert (= x274 (and (not x639) x848)))
(assert (= (=> (= (= x988 0) x181) (and (=> (and (and (= (x316 (+ x539 x1)) x207) (= x709 (x316 (+ 31 x653))) (= (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x709) x539) (= (or (> x653 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x653 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x653)))) x851)) (not x181)) (and (=> (and (not x851) (and (= x59 (x316 (+ x298 7776000))) (= x290 (x99 x1)) (= x639 (> x59 18446744073709551615)) (= x298 (x174 18446744073709551615 x290)))) (and (=> x639 x354) (=> (and (and (= x716 (x174 65535 x849)) (= (x316 (+ 65536 x966)) x906) (= (= 0 x716) x601) (= x849 (x316 (+ 131072 x906))) (= (ite (not x601) (not (= 65537 (x174 65537 x849))) (not x601)) x400)) (not x639)) (and (=> (and (not x400) (and (= (x174 131072 x264) x751) (= x171 (x443 x408)) (= (x375 x92 (x994 1) 0) x408) (>= x171 0) (= (x694 x171 160) x264) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x171) (= x208 (= 131072 x751)))) (and (=> (and (not x208) (and (= (x994 0) x647) (= x207 x196))) x792) (=> (and (and (= (mod (- x359 (ite x420 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x723) (= (x375 x92 (x994 5) 0) x532) (= (< x731 32) x420) (= x764 (> x723 0)) (= (x174 1 x235) x359) (= (ite (< 0 x359) x834 (x174 127 x834)) x731) (= (div x235 2) x834) (= x235 (x847 x532))) x208) (and (=> (and x764 (and (= (x316 (+ x207 x29)) x936) (= x26 (= x731 0)) (= x29 (x316 (+ 32 x322))) (= x225 (x316 (+ 32 x207))) (= (x316 (+ 31 x731)) x560) (= (mod (* x146 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x322) (= x146 (div x560 32)))) (and (=> (and (= (> x731 31) x121) (not x26)) (and (=> (and x121 (and (= x418 (x316 (+ x731 x225))) (= x88 (< x909 x418)) (= x506 (x695 x558 1)) (= x909 (x316 (+ 32 x225))) (= (x1033 x558) x195) (= (x726 x532 0) x558))) (and (=> (not x88) x996) (=> x88 x753))) (=> (and (not x121) (and (= (mod (* 256 x286) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x239) (= (div x287 256) x286) (= x287 (x847 x532)))) x736))) (=> x26 x736))) (=> (not x764) x354))))) (=> x400 x354))))) (=> x851 x354))) (=> x181 x354))) x11))
(assert (x912 x816))
(assert (= x120 (or x101 x743)))
(assert (=> (<= (x1007 (x316 (+ x696 64))) 10000) (= (x994 (x1007 (x316 (+ 64 x696)))) (x346 (x1007 (x316 (+ 64 x696)))))))
(assert (= 0 (x25 (x316 (+ 96 x696)))))
(assert (= x383 (and x946 x338)))
(assert (x546 x612))
(assert (x172 x765))
(assert (x172 x625))
(assert (x172 x979))
(assert (x172 x962))
(assert (=> (>= 10000 (x384 288)) (= (x994 (x384 288)) (x346 (x384 288)))))
(assert (x172 x309))
(assert (x172 x359))
(assert (x172 x110))
(assert (= (or x973 x718) x544))
(assert (=> (>= 10000 (x384 160)) (= (x994 (x384 160)) (x346 (x384 160)))))
(assert (= (x127 (x346 (x161 (x316 (+ x4 64))))) (x161 (x316 (+ 64 x4)))))
(assert (x728 (x1007 (x316 (+ x696 32)))))
(assert (= (and x954 (not x489)) x389))
(assert (x172 x538))
(assert (=> (<= x503 10000) (= (x346 x503) (x994 x503))))
(assert (= x432 (and x213 x926)))
(assert (x172 x837))
(assert (x172 x155))
(assert (x728 (x161 (x316 (+ x4 160)))))
(assert (= x736 (=> (and (= (< 0 x43) x946) (= (x1007 x207) x43)) (and (=> (not x946) x354) (=> (and x946 (and (= x219 (x1007 x225)) (= (x694 x219 248) x313) (= (< 0 x313) x95))) (and (=> (and (not x95) (= x614 (x994 0))) x44) (=> (and (and (= (> x624 x938) x94) (= (x1007 x207) x938) (= x624 (x316 (+ 1 x313)))) x95) (and (=> x94 x354) (=> (not x94) x798)))))))))
(assert (= (and x732 (not x10)) x557))
(assert (x172 x146))
(assert (x546 x290))
(assert (x172 x702))
(assert (x172 x664))
(assert (x172 x955))
(assert (= x799 (and x350 x929)))
(assert (= 0 (x25 320)))
(assert (=> (<= x7 10000) (= (x994 x7) (x346 x7))))
(assert (x728 (x1007 (x316 (+ x696 64)))))
(assert (= x499 (=> (= (= 0 x602) x300) (and (=> (and (and (= (or (> x958 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x958) true) (> 32 x958))) x365) (= x529 (x316 (+ x958 31))) (= x238 (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x529)) (= (x316 (+ x238 x244)) x962)) (not x300)) (and (=> x365 x354) (=> (and (not x365) (and (= x253 (x316 (+ x725 7776000))) (= (< 18446744073709551615 x253) x347) (= x678 (x752 x244)) (= x725 (x174 18446744073709551615 x678)))) (and (=> x347 x354) (=> (and (not x347) (and (= x253 x562) (= x962 x813))) x629))))) (=> x300 x354)))))
(assert (=> (<= (x978 288) 10000) (= (x994 (x978 288)) (x346 (x978 288)))))
(assert (x172 x366))
(assert (x546 x621))
(assert (= 0 (x25 (x316 (+ 160 x37)))))
(assert (= (and x26 x644) x114))
(assert (= x259 (or x520 x609 x199 x526 x808)))
(assert (x856 x787))
(assert (x856 x911))
(assert (x728 (x384 160)))
(assert (x172 x1004))
(assert (x172 x462))
(assert (= (x978 192) (x127 (x346 (x978 192)))))
(assert (x172 x196))
(assert (x172 x591))
(assert (x172 x298))
(assert (= (and (not x948) x968) x960))
(assert (= (x127 (x346 (x566 (x316 (+ 160 x37))))) (x566 (x316 (+ x37 160)))))
(assert (= x439 (and x98 x835)))
(assert (= x307 (and x107 x439)))
(assert (x505 x849 x888))
(assert (= x24 (x127 (x346 x24))))
(assert (= (x25 (x316 (+ x4 128))) 0))
(assert (= (x1007 x696) (x127 (x346 (x1007 x696)))))
(assert (x172 x42))
(assert (x172 x674))
(assert (= (=> (and (= (x566 x890) x22) (= x31 (> x22 0))) (and (=> (not x31) x354) (=> (and x31 (and (= (> x377 0) x724) (= x377 (x694 x519 248)) (= (x566 x712) x519))) (and (=> (and x724 (and (= x220 (x566 x890)) (= (x316 (+ x377 1)) x135) (= x474 (< x220 x135)))) (and (=> (not x474) x63) (=> x474 x354))) (=> (and (= x770 (x994 0)) (not x724)) x136))))) x934))
(assert (=> (>= 10000 x24) (= (x346 x24) (x994 x24))))
(assert (x172 x613))
(assert (x172 x252))
(assert (= (x127 (x346 (x384 320))) (x384 320)))
(assert (x172 x227))
(assert (x172 x597))
(assert (x546 x834))
(assert (x172 x788))
(assert (= x204 (and (not x98) x835)))
(assert (x172 x584))
(assert (x172 x75))
(assert (= x60 (and x40 x126)))
(assert (= x162 (and (not x95) x383)))
(assert (= (and x367 x1012) x61))
(assert (= x954 (and (not x381) x600)))
(assert (x172 x731))
(assert (= (x161 (x316 (+ x4 160))) (x127 (x346 (x161 (x316 (+ 160 x4)))))))
(assert (x172 x413))
(assert (= x319 (and x400 x274)))
(assert (x546 x294))
(assert (= (and (not x202) x385) x754))
(assert (= (or x453 x67 x821) x606))
(assert (= (and x720 (not x803)) x609))
(assert (x172 x814))
(assert (= (or x548 x180) x835))
(assert (x728 x119))
(assert (x172 x43))
(assert (= 0 (x25 x696)))
(assert (x211 x185))
(assert (= x348 (and x866 x514)))
(assert (= (and x565 x150) x291))
(assert (= (x694 x519 248) (div x519 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x172 x670))
(assert (x172 x123))
(assert (= (and x84 x88) x567))
(assert (x728 (x1007 (x316 (+ 192 x696)))))
(assert (x172 x774))
(assert (x172 x810))
(assert (x172 x682))
(assert (x172 x492))
(assert (x172 x652))
(assert (= 0 (x25 (x316 (+ 160 x4)))))
(assert (x172 x737))
(assert (= (x25 160) 0))
(assert (x172 x722))
(assert (= (x346 346787896) (x994 346787896)))
(assert (= x411 (and (not x884) x933)))
(assert (x172 x22))
(assert (x172 x313))
(assert (= (and x636 (not x593)) x841))
(assert (x172 x671))
(assert (x172 x100))
(assert (=> (<= (x1007 (x316 (+ 96 x696))) 10000) (= (x346 (x1007 (x316 (+ 96 x696)))) (x994 (x1007 (x316 (+ x696 96)))))))
(assert (= (and x383 x95) x805))
(assert (= x449 (and x803 x720)))
(assert (x172 x293))
(assert (x33 x622))
(assert (= x531 (=> (and (= x749 (> x870 x293)) (or (and (and (= x1003 x334) (= x1002 x401)) (not x749)) (and x749 (and (= 0 x1002) (= x334 (ite x854 0 x1003)) (= (= 65536 x460) x854) (= x460 (x174 65536 x401)))))) x467)))
(assert (x856 x1006))
(assert (= (or x582 x348) x116))
(assert (x505 x185 x102))
(assert (x172 x657))
(assert (= (and (not x768) x1025) x956))
(assert (x172 x85))
(assert (x172 x297))
(assert (= (and x300 x157) x369))
(assert (x172 x91))
(assert (=> (>= 10000 x70) (= (x346 x70) (x994 x70))))
(assert (= (x127 (x346 (x384 192))) (x384 192)))
(assert (= (x127 (x346 (x566 (x316 (+ x37 192))))) (x566 (x316 (+ 192 x37)))))
(assert (x211 x849))
(assert (= x711 (and x606 (not x31))))
(assert (x172 x448))
(assert (= x130 (=> (and (= (= x268 0) x440) (or x440 (not x440))) x417)))
(assert (x172 x675))
(assert (= (x127 (x346 x662)) x662))
(assert (= (x127 (x695 x969 1)) (+ (x127 x969) 1)))
(assert (x172 x1))
(assert (= (x945 x222 160) (mod (* 1461501637330902918203684832716283019655932542976 x222) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x546 x436))
(assert (= x422 (and x583 x800)))
(assert (= (x127 (x994 65537)) 65537))
(assert (x172 x777))
(assert (= (and (not x838) x509) x571))
(assert (x172 x630))
(assert (= (x978 352) (x127 (x346 (x978 352)))))
(assert (x728 (x161 (x316 (+ 32 x4)))))
(assert (x172 x236))
(assert (= x759 (and x587 (not x887))))
(assert (= (and (not x347) x646) x392))
(assert (= (and (not x926) x213) x918))
(assert (x728 (x384 320)))
(assert (= (and x933 x884) x367))
(assert (= (x25 (x316 (+ x37 64))) 0))
(assert (x172 x234))
(assert (= (x127 (x346 (x566 (x316 (+ x37 96))))) (x566 (x316 (+ 96 x37)))))
(assert (x172 x840))
(assert (x172 x241))
(assert (= x137 (and x746 x432)))
(assert (= (and x553 (not x380)) x38))
(assert (= x484 (or x469 x692 x58 x855 x918)))
(assert (x172 x232))
(assert (= x250 (and x1009 x783)))
(assert (x172 x1002))
(assert (= 0 (x25 (x316 (+ 96 x4)))))
(assert (x172 x916))
(assert (x172 x154))
(assert (x172 x842))
(assert (= 66853817334611902194238164484889819180315942402426128563245745834960013477038 (x127 (x994 66853817334611902194238164484889819180315942402426128563245745834960013477038))))
(assert (x971 x621))
(assert (= (x127 (x346 (x566 x37))) (x566 x37)))
(assert (= x145 (and x580 x109)))
(assert (x856 x875))
(assert (x172 x849))
(assert (= x1019 (and (not x32) x877)))
(assert (x172 x427))
(assert (x172 x529))
(assert (x172 x988))
(assert (x546 4294967295))
(assert (= (and x545 x285) x1027))
(assert (= (x994 18446744073709551615) (x346 18446744073709551615)))
(assert (= x831 (and (not x94) x805)))
(assert (= x503 (x127 (x346 x503))))
(assert (= (x25 (x316 (+ 128 x696))) 0))
(assert (= x1026 (and x636 x593)))
(assert (x823 x141))
(assert (= (and x898 x429) x615))
(assert (x172 x82))
(assert (= x895 x889))
(assert (= x119 (x127 (x346 x119))))
(assert (= (and x484 (not x950)) x179))
(assert (= (x694 x1011 248) (div x1011 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (= 1666326814 (x127 (x994 1666326814))))
(assert (x728 (x161 x4)))
(assert (x728 x70))
(assert (= (and x17 x590) x985))
(assert (x172 x171))
(assert (=> (<= x119 10000) (= (x994 x119) (x346 x119))))
(assert (= (and (not x15) x79) x93))
(assert (x172 x51))
(assert (x546 4294901760))
(assert (= x39 (=> (and (= (> x892 x87) x109) (= (x316 (+ x892 1)) x87)) (and (=> x109 x354) (=> (and (and (= x462 x584) (= x301 x151)) (not x109)) x797)))))
(assert (x728 x767))
(assert (= (x994 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x346 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x299 (and x65 x35)))
(assert (x172 x83))
(assert (= (x25 x721) 0))
(assert (x812 x849))
(assert (x172 x678))
(assert (x172 x115))
(assert (x172 x975))
(assert (x172 x917))
(assert (x172 x7))
(assert (= x164 (and (not x357) x686)))
(assert (= (or x261 x571) x213))
(assert (= 0 (x25 224)))
(assert (x172 x318))
(assert (= x269 (=> (and (= (x695 x969 1) x284) (= x690 (not (> (x127 x104) (x127 x284))))) (and x690 x895))))
(assert (= (and (not x365) x677) x646))
(assert (x172 x705))
(assert (= 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x127 (x994 109562948294120585953088955926913691080166221410047079322077399086870164406272))))
(assert (= x915 (or x730 x908)))
(assert (x172 x244))
(assert (x546 x339))
(assert (= (or x292 x794) x763))
(assert (x172 x927))
(assert (x172 x575))
(assert (= (and x518 x769) x821))
(assert (x172 x709))
(assert (x172 x463))
(assert (= x588 (=> (= (= 0 x234) x950) (and (=> x950 x472) (=> (and (and (= x24 (x174 1461501637330902918203684832716283019655932542975 x641)) (= (x573 (x346 x24)) x413) (= (= x413 0) x699)) (not x950)) (and (=> x699 x354) (=> (and (not x699) (and (= (< 0 x268) x380) (or (not x380) (and (and (= (x295 (x346 x7)) x530) x628 x1021 (= (x295 (x346 x24)) x789) (= (>= (x570 (x346 x7)) x530) x628) (> 4294967296 x205) (= x1021 (= (x570 (x346 x24)) x789))) x380)))) x130)))))))
(assert (x172 x70))
(assert (x172 x135))
(assert (x728 (x566 (x316 (+ 128 x37)))))
(assert (= (and (not x88) x84) x550))
(assert (= x516 (x127 (x346 x516))))
(assert (x172 x128))
(assert (x172 x455))
(assert (=> (<= (x978 320) 10000) (= (x346 (x978 320)) (x994 (x978 320)))))
(assert (x728 x503))
(assert (x172 x30))
(assert (=> (<= x516 10000) (= (x994 x516) (x346 x516))))
(assert (x172 x376))
(assert (= (=> (and (= (> x377 x30) x10) (= (x316 (+ 1 x377)) x30)) (and (=> (and (not x10) (and (= x244 x1031) (= x770 x165))) x139) (=> x10 x354))) x136))
(assert (x172 x487))
(assert (x546 x816))
(assert (= (x994 97199519776808029778168953285215024309695167179541945341261303444449322336256) (x346 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (x172 x322))
(assert (x728 66853817334611902194238164484889819180315942402426128563245745834960013477038))
(assert (= (x127 (x994 115792089210356248756420345214020892766250353992003419616917011526809519390720)) 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (= (x25 x1001) 0))
(assert (x728 (x978 288)))
(assert (x172 x477))
(assert (x33 x378))
(assert (= x520 (and x511 x698)))
(assert (= (and x157 (not x300)) x677))
(assert (= (and x303 x223) x267))
(assert (= (and (not x707) x471) x466))
(assert (x546 31))
(assert (= (x346 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x994 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x576 (and x928 x824)))
(assert (x172 x336))
(assert (x172 x486))
(assert (x172 x265))
(assert (= x720 (or x836 x681 x216 x632 x296)))
(assert (= (or x61 x96) x930))
(assert (x172 x353))
(assert (= (=> (= x108 (= 0 x128)) (and (=> x108 x354) (=> (not x108) x761))) x321))
(assert (x172 x599))
(assert (= (x994 353073666) (x346 353073666)))
(assert (x172 x932))
(assert (x728 (x1007 (x316 (+ x696 96)))))
(assert (x172 x663))
(assert (x728 x7))
(assert (x172 x1032))
(assert (= (x25 192) 0))
(assert (=> (<= (x978 352) 10000) (= (x994 (x978 352)) (x346 (x978 352)))))
(assert (x172 x959))
(assert (x172 x1014))
(assert (= (x127 (x695 x980 x534)) (+ (x127 x980) x534)))
(assert (= (and x605 x549) x491))
(assert (x172 x240))
(assert (=> (>= 10000 (x566 (x316 (+ x37 128)))) (= (x994 (x566 (x316 (+ x37 128)))) (x346 (x566 (x316 (+ x37 128)))))))
(assert (x172 x242))
(assert (x546 x966))
(assert (= (x127 (x994 65536)) 65536))
(assert (x172 x651))
(assert (= 131072 (x127 (x994 131072))))
(assert (= (and (not x221) x867) x1018))
(assert (x172 x436))
(assert (=> (<= (x161 (x316 (+ x4 192))) 10000) (= (x346 (x161 (x316 (+ x4 192)))) (x994 (x161 (x316 (+ x4 192)))))))
(assert (= x246 (and x544 (not x412))))
(assert (= x704 (and x524 x745)))
(assert (= (x1007 (x316 (+ 128 x696))) (x127 (x346 (x1007 (x316 (+ x696 128)))))))
(assert (=> (<= (x978 160) 10000) (= (x994 (x978 160)) (x346 (x978 160)))))
(assert (=> (>= 10000 (x161 (x316 (+ 96 x4)))) (= (x346 (x161 (x316 (+ 96 x4)))) (x994 (x161 (x316 (+ 96 x4)))))))
(assert (x172 x738))
(assert (= (x127 (x346 (x566 (x316 (+ x37 32))))) (x566 (x316 (+ x37 32)))))
(assert (x172 x97))
(assert (x172 x283))
(assert (= x336 (x127 (x346 x336))))
(assert (x172 x1031))
(assert (= x921 (or x759 (and x950 x484))))
(assert (x172 x326))
(assert (= (x25 x643) 0))
(assert (x172 x748))
(assert (x693 x21))
(assert (=> (>= 10000 (x978 224)) (= (x994 (x978 224)) (x346 (x978 224)))))
(assert (x33 x235))
(assert (= (and x839 (not x149)) x285))
(assert (x172 x173))
(assert (x546 1461501637330902918203684832716283019655932542975))
(assert (= (and (not x26) x644) x829))
(assert (= (x694 x171 192) (div x171 6277101735386680763835789423207666416102355444464034512896)))
(assert (= (x127 (x994 7776000)) 7776000))
(assert (= (and x707 x471) x986))
(assert (= (x127 (x695 x363 1)) (+ 1 (x127 x363))))
(assert (x728 (x978 224)))
(assert (=> (<= (x566 (x316 (+ 160 x37))) 10000) (= (x346 (x566 (x316 (+ 160 x37)))) (x994 (x566 (x316 (+ 160 x37)))))))
(assert (= 4294967296 (x127 (x994 4294967296))))
(assert (= (and x112 (not x762)) x692))
(assert (= (x127 (x994 97199519776808029778168953285215024309695167179541945341261303444449322336256)) 97199519776808029778168953285215024309695167179541945341261303444449322336256))
(assert (x172 x281))
(assert (x172 x723))
(assert (x172 x594))
(assert (x172 x779))
(assert (= (=> (and (= (= 1 (ite x809 1 0)) x781) (= x809 (< 31 x911))) (and (=> (and x781 (and (= x868 (x726 x48 0)) (= x175 (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x911)) (= (> x175 0) x221))) (and (=> (and (not x221) (and (= x252 32) (= x868 x237))) x667) (=> x221 x197))) (=> (and (and (= (x316 (+ x185 x102)) x510) (= (mod (* x911 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x102) (= x670 (mod (* x911 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (<= x185 1) x610) (= x185 (x174 x332 x901)) (= x901 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x694 115792089237316195423570985008687907853269984665640564039457584007913129639935 x670))) (= x860 (x316 (+ x102 x185))) (= x939 (x735 x185 x102)) (= x332 (x734 x721)) (= x721 (x316 (+ 32 x86))) (= (ite (<= x185 1) x510 (ite x610 x860 x939)) x353)) (not x781)) x256))) x889))
(assert (= x169 (or x756 x438)))
(assert (x172 x131))
(assert (= (and (not x474) x623) x273))
(assert (= x1009 (and x518 (not x769))))
(assert (x172 x243))
(assert (= x504 (and x606 x31)))
(assert (x172 x339))
(assert (= 0 (x25 (x316 (+ x696 32)))))
(assert (x546 x741))
(assert (x546 131072))
(assert (= (x127 (x346 66853817334611902194238164484889819180315942402426128563245745834960013477038)) 66853817334611902194238164484889819180315942402426128563245745834960013477038))
(assert (=> (<= (x1007 x696) 10000) (= (x346 (x1007 x696)) (x994 (x1007 x696)))))
(assert (= (and x79 x15) x668))
(assert (= (x25 (x316 (+ x37 96))) 0))
(assert (= x879 (or x921 x687)))
(assert (x172 x967))
(assert (x172 x602))
(assert (x172 x516))
(assert (= (=> (and (= (x734 x86) x911) (= x975 (x186 x48)) (= x306 (x370 (- x46 32))) (= x46 (x370 (- x1 x86))) (= x927 (ite (> x5 0) x115 (x174 127 x115))) (= (< 0 x73) x333) (= (mod (- x5 (ite x907 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x73) (= x907 (> 32 x927)) (= (x174 1 x975) x5) (= (x375 x92 (x994 5) 0) x48) (= (div x975 2) x115) (= x1 (x316 (+ x241 x23)))) (and (=> (and x333 (= (< 31 x927) x126)) (and (=> (and x126 (and (= (div x674 32) x125) (= (x316 (+ 31 x927)) x674) (= (x726 x48 0) x980) (= (x316 (+ x911 31)) x68) (= x8 (< (x127 x969) (x127 x104))) (= (div x68 32) x534) (= x104 (x695 x980 x125)) (= (x695 x980 x534) x648) (= x969 (ite (< x911 32) x980 x648)))) (and (=> (not x8) x895) (=> x8 x269))) (=> (not x126) x889))) (=> (not x333) x354))) x937))
(assert (x172 x850))
(assert (x172 x103))
(assert (x172 x167))
(assert (= (and (not x496) x374) x351))
(assert (x856 x155))
(assert (= (and x449 x90) x343))
(assert (x172 x641))
(assert (x172 x947))
(assert (x172 x785))
(assert (=> (<= (x1007 (x316 (+ x696 128))) 10000) (= (x346 (x1007 (x316 (+ x696 128)))) (x994 (x1007 (x316 (+ 128 x696)))))))
(assert (x172 x564))
(assert (x172 x741))
(assert (x172 x712))
(assert (= (x994 18511804847318769127852513085034306573455405177986258919159753969546364452864) (x346 18511804847318769127852513085034306573455405177986258919159753969546364452864)))
(assert (x728 (x384 352)))
(assert (= (mod (* 6277101735386680763835789423207666416102355444464034512896 x562) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x945 x562 192)))
(assert (x728 (x384 288)))
(assert (= 0 (x25 x897)))
(assert (= (and x8 x60) x194))
(assert (x172 x324))
(assert (= x934 x279))
(assert (x728 (x978 160)))
(assert (x546 x234))
(assert (=> (<= x662 10000) (= (x994 x662) (x346 x662))))
(assert (x823 x612))
(assert (= x429 (or x403 x299)))
(assert (= x92 (x346 (x127 x92))))
(assert (x546 x709))
(assert (= (x994 1536193505703097071473766605195189375248157893288704583667612676508713222144) (x346 1536193505703097071473766605195189375248157893288704583667612676508713222144)))
(assert (x172 x750))
(assert (= (x25 (x316 (+ 128 x37))) 0))
(assert (x172 x447))
(assert (x546 x378))
(assert (x546 x626))
(assert (x172 x50))
(assert (= (=> (and (= (ite (< x59 x293) x293 x59) x719) (= (= x840 0) x98) (= (x174 1461501637330902918203684832716283019655932542975 x334) x840) (= (x174 4294901760 x1002) x888) (= x846 (ite x974 x849 (ite (>= 65535 x849) (x316 (+ x849 x888)) (x735 x849 x888)))) (= x974 (< x293 x574))) (and (=> (and x98 (= (= 0 x989) x107)) (and (=> x107 x354) (=> (and (and (= (x370 (- x989 x7)) x390) (= (> x390 0) x1015)) (not x107)) (and (=> (and (and (= x251 (x573 (x346 x989))) (= x976 (x316 (+ x249 x212))) (= x249 (x316 (+ (mod (x945 x846 160) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x989))) (= x838 (> x251 0)) (= (x945 x719 192) x212) (= x1000 (>= 6277101735386680763835789423207666416102355444464034512895 x249)) (= x645 (x316 (+ x249 x212))) (= (x316 (+ x575 32)) x675) (= (x735 x249 x212) x705) (= x103 (ite (>= 6277101735386680763835789423207666416102355444464034512895 x249) x645 (ite x1000 x976 x705))) (= x106 (x316 (+ x575 32)))) x1015) (and (=> (and (= x106 x50) (not x838)) x41) (=> (and (and (or (not x15) (and (and (= (x604 (x346 x7)) x738) (= (= (x12 (x346 x989)) x80) x206) (= (x604 (x346 x989)) x80) x206 (= x940 (<= x738 (x12 (x346 x7)))) (> 4294967296 x486) x940) x15)) (and (= x955 (x316 (+ 32 x91))) (= x227 (x316 (+ x324 32))) (= (x316 (+ x955 32)) x397) (= x91 (x316 (+ x100 32))) (= (x316 (+ x262 32)) x100) (= x324 (x316 (+ 160 x262))) (= (x316 (+ x106 4)) x262) (= (< 0 x791) x15))) x838) x231))) (=> (not x1015) x354))))) (=> (not x98) x354))) x467))
(assert (= (x994 4294967295) (x346 4294967295)))
(assert (x172 x1006))
(assert (= (and x799 (not x329)) x933))
(assert (x20 x911))
(assert (= (and x867 x221) x372))
(assert (= (x161 (x316 (+ 96 x4))) (x127 (x346 (x161 (x316 (+ 96 x4)))))))
(assert (= (or (and x790 (not x270)) x431 x986 (and (not x352) x873) x778 x491 x369 (and x52 x430) x204 (and (not x928) x824) (and (not x565) x150) (and x676 x280) (and x972 x970) (and x600 x381) (and x954 x489) (and x623 x474) (and x802 x373) x711 x407 x404 x210 (and (not x935) x389) (and x800 (not x583)) x904 x1026 x956 (and x851 x478) x145 x747 x304 x410 x319 x1016 (and x351 x200) x335 (and x357 x686) x278 (and x396 x14) (and x992 x841) x307 (and (not x266) x422) (and x94 x805) (and (not x445) x983) (and x658 x466) x960 x214 x344 (and x677 x365) x45 (and x179 x699) (and x727 x801) (and x576 x406) x595 x993 x272 (and (not x859) x444) (and x481 x679) x275) x687))
(assert (x172 x860))
(assert (x172 x820))
(assert (x546 x487))
(assert (= x272 (and x291 x132)))
(assert (x172 x635))
(assert (x172 x914))
(assert (= x797 (=> (= (= (x994 0) x301) x149) (and (=> (and x149 (and (= x293 (x694 x1003 192)) (= x575 x584))) x531) (=> (and (not x149) (and (or (and x545 (and (< x807 4294967296) (= 1 x317))) (and (not x545) (= x233 x317))) (and (= x710 (x316 (+ x584 4))) (= x545 (< 0 x233))))) x619)))))
(assert (= (and x374 x496) x45))
(assert (= (x346 109562948294120585953088955926913691080166221410047079322077399086870164406272) (x994 109562948294120585953088955926913691080166221410047079322077399086870164406272)))
(assert (= x605 (and (not x992) x841)))
(assert (= (=> (and (= x83 (x111 x643)) (= x240 (x316 (+ x241 96))) (= x507 (not (> x23 128))) (= x643 (x316 (+ 96 x597)))) (and x507 x937)) x158))
(assert (= (x25 (x316 (+ x4 32))) 0))
(assert (x172 x888))
(assert (x172 x287))
(assert (x546 x1002))
(assert (x172 x696))
(assert (x728 x989))
(assert (x172 x106))
(assert (x172 x725))
(assert (x172 x141))
(assert (x172 x1028))
(assert (x546 x599))
(assert (x172 x277))
(assert (x172 x562))
(assert (= 0 (x25 (x316 (+ x4 192)))))
(assert (=> (<= x767 10000) (= (x346 x767) (x994 x767))))
(assert (= (=> (= x328 true) x515) x354))
(assert (= 0 (x25 x260)))
(assert (= (x127 (x994 346787896)) 346787896))
(assert (= 0 (x25 (x316 (+ 160 x696)))))
(assert (= x607 (and x879 x328)))
(assert (x728 (x161 (x316 (+ 64 x4)))))
(assert (= (and x838 x509) x79))
(assert (x211 x249))
(assert (x172 x452))
(assert (= (and (not x676) x280) x824))
(assert (=> (>= 10000 (x384 352)) (= (x346 (x384 352)) (x994 (x384 352)))))
(assert (x546 x901))
(assert (= (=> (and (or (and x412 (and (= (ite x493 0 x171) x487) (= x493 (= x176 65536)) (= (x174 65536 x264) x176))) (and (not x412) (= x487 x171))) (= x412 (< x190 x870))) x62) x450))
(assert (= (and x329 x799) x356))
(assert (x546 x622))
(assert (x172 x282))
(assert (x172 x327))
(assert (x728 (x384 224)))
(assert (= x14 (and x122 x435)))
(assert (x172 x1001))
(assert (= (=> (= (= 0 x242) x593) (and (=> (and (not x593) (and (= x1014 (x316 (+ x538 x196))) (= x538 (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x875)) (= (x316 (+ x651 31)) x875) (= x992 (or (> x651 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x651) (= (<= x651 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))))) (and (=> (and (and (= (x174 18446744073709551615 x816) x959) (= x458 (x316 (+ x959 7776000))) (= x549 (< 18446744073709551615 x458)) (= (x475 x196) x816)) (not x992)) (and (=> (and (and (= x1014 x890) (= x458 x190)) (not x549)) x450) (=> x549 x354))) (=> x992 x354))) (=> x593 x354))) x424))
(assert (x728 (x978 352)))
(assert (= (and x544 x412) x886))
(assert (= (x346 6277101735386680763835789423207666416102355444464034512895) (x994 6277101735386680763835789423207666416102355444464034512895)))
(assert (x172 x286))
(assert (= x969 (x346 (x127 x969))))
(assert (= x62 (=> (and (= x154 (x174 1461501637330902918203684832716283019655932542975 x487)) (= x32 (= 0 x154))) (and (=> (and (= x890 x258) x32) x556) (=> (and (and (= (x694 x42 160) x294) (= (x443 x1030) x42) (= x1017 (x174 131072 x294)) (>= x42 0) (= x1030 (x375 x92 (x994 1) 0)) (<= x42 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x1017 131072) x66)) (not x32)) (and (=> (and (and (= (x847 x776) x622) (= (ite (< 0 x147) x141 (x174 127 x141)) x533) (= x776 (x375 x92 (x994 5) 0)) (= (div x622 2) x141) (= (< x533 32) x555) (= (mod (- x147 (ite x555 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x785) (= (> x785 0) x479) (= x147 (x174 1 x622))) x66) (and (=> (and (and (= (= x533 0) x769) (= (mod (* 32 x664) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x657) (= (x316 (+ x657 32)) x952) (= (div x864 32) x664) (= (x316 (+ x890 x952)) x1031) (= (x316 (+ 32 x890)) x712) (= x864 (x316 (+ x533 31)))) x479) (and (=> (and (not x769) (= (> x533 31) x783)) (and (=> (and (not x783) (and (= x999 (div x456 256)) (= (x847 x776) x456) (= (mod (* 256 x999) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x837))) x934) (=> (and x783 (and (= x376 (x316 (+ x712 32))) (= (x316 (+ x712 x533)) x594) (= x795 (x695 x363 1)) (= x363 (x726 x776 0)) (= x129 (> x594 x376)) (= x630 (x1033 x363)))) (and (=> (not x129) x279) (=> x129 x861))))) (=> x769 x934))) (=> (not x479) x354))) (=> (and (and (= x165 (x994 0)) (= x244 x890)) (not x66)) x139)))))))
(assert (= (and (not x783) x1009) x67))
(assert (x172 x574))
(assert (x546 x21))
(assert (= x708 (and x829 (not x121))))
(assert (= x275 (and x758 x108)))
(assert (x546 65535))
(assert (= 0 (x25 x463)))
(assert (= (and (not x35) x65) x403))
(assert (= x877 (or x886 x246)))
(assert (=> (>= 10000 (x1007 (x316 (+ 32 x696)))) (= (x346 (x1007 (x316 (+ x696 32)))) (x994 (x1007 (x316 (+ 32 x696)))))))
(assert (= x1016 (and x347 x646)))
(assert (= x283 (x127 (x346 x283))))
(assert (x172 x643))
(assert (= (x994 549686827) (x346 549686827)))
(assert (x172 x533))
(assert (= (x127 (x346 (x384 288))) (x384 288)))
(assert (x172 x264))
(assert (= (x994 4294901760) (x346 4294901760)))
(assert (x982 x264))
(assert (= 18446744073709551615 (x127 (x994 18446744073709551615))))
(assert (x172 x522))
(assert (x172 x689))
(assert (x172 x892))
(assert (x172 x563))
(assert (x172 x143))
(assert (= (and x903 x941) x473))
(assert (x172 x902))
(assert (= x311 (or x915 x965)))
(assert (= x509 (and x1015 x618)))
(assert (= x315 (and x142 x441)))
(assert (= (or x754 x578) x157))
(assert (= x855 (and x137 (not x953))))
(assert (= x972 (and x444 x859)))
(assert (x172 x255))
(assert (x172 x864))
(assert (= (x127 (x994 4294901760)) 4294901760))
(assert (x172 x845))
(assert (x546 x235))
(assert (= x199 (and x343 (not x543))))
(assert (x546 x334))
(assert (= (and x266 x422) x896))
(assert (x172 x901))
(assert (= x554 (and (not x223) x303)))
(assert (x172 x119))
(assert (= 0 (x25 x173)))
(assert (x446 x264))
(assert (x823 x834))
(assert (= x139 (=> (= x441 (= x165 (x994 0))) (and (=> (and (and (= x562 (x694 x42 192)) (= x813 x244)) x441) x629) (=> (and (and (and (= (x316 (+ x244 4)) x765) (= (> x535 0) x202)) (or (and x202 (and (= 1 x602) (< x958 4294967296))) (and (= x602 x535) (not x202)))) (not x441)) x499)))))
(assert (x172 x290))
(assert (=> (>= 10000 x620) (= (x346 x620) (x994 x620))))
(assert (= x595 (and x697 x181)))
(assert (= (or x869 x273) x732))
(assert (=> (<= (x384 320) 10000) (= (x346 (x384 320)) (x994 (x384 320)))))
(assert (= (=> (and (<= 0 x1003) (= (= x702 131072) x488) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1003) (= x1003 (x782 x19)) (= x702 (x174 131072 x401)) (= (x375 x92 (x994 1) 0) x19) (= x401 (x694 x1003 160))) (and (=> (and (not x488) (and (= x301 (x994 0)) (= x258 x584))) x797) (=> (and x488 (and (= x844 (> 32 x178)) (= x612 (div x378 2)) (= (x375 x92 (x994 5) 0) x871) (= (mod (- x652 (ite x844 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x271) (= (x174 1 x378) x652) (= (< 0 x271) x929) (= (ite (< 0 x652) x612 (x174 127 x612)) x178) (= x378 (x847 x871)))) (and (=> (not x929) x354) (=> (and (and (= (x316 (+ x258 32)) x260) (= (mod (* 32 x796) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x327) (= x462 (x316 (+ x258 x452))) (= x788 (x316 (+ 31 x178))) (= (= x178 0) x329) (= x796 (div x788 32)) (= x452 (x316 (+ 32 x327)))) x929) (and (=> (and (not x329) (= (< 31 x178) x884)) (and (=> (and (and (= x1012 (> x167 x689)) (= (x316 (+ x260 x178)) x167) (= x689 (x316 (+ 32 x260))) (= x405 (x726 x871 0)) (= (x695 x405 1) x9) (= (x1033 x405) x671)) x884) (and (=> (not x1012) x891) (=> x1012 x880))) (=> (and (and (= (mod (* 256 x635) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x913) (= x902 (x847 x871)) (= (div x902 256) x635)) (not x884)) x561))) (=> x329 x561))))))) x556))
(assert (=> (>= 10000 (x384 256)) (= (x994 (x384 256)) (x346 (x384 256)))))
(assert (=> (>= 10000 (x1007 (x316 (+ 160 x696)))) (= (x346 (x1007 (x316 (+ 160 x696)))) (x994 (x1007 (x316 (+ x696 160)))))))
(assert (x172 x102))
(assert (x172 x1011))
(assert (= (=> (and (= (< 0 x366) x926) (= 128 x512) (= (x680 x86) x366)) (and (=> (not x926) x588) (=> (and x926 (= x746 (< 32 x366))) (and (=> (not x746) x588) (=> (and x746 (= x953 (< 64 x366))) (and (=> (and (= (> x366 96) x762) x953) (and (=> x762 x1023) (=> (not x762) x588))) (=> (not x953) x588))))))) x41))
(assert (= (x25 (x316 (+ 64 x696))) 0))
(assert (= (and x616 (not x764)) x344))
(assert (x446 x401))
(assert (=> (<= (x566 (x316 (+ x37 96))) 10000) (= (x346 (x566 (x316 (+ x37 96)))) (x994 (x566 (x316 (+ x37 96)))))))
(assert (x172 x787))
(assert (x172 x355))
(assert (= true x444))
(assert (= (x25 (x316 (+ 32 x37))) 0))
(assert (x982 x294))
(assert (x172 x189))
(assert (x172 x645))
(assert (x364 x599))
(assert (= (and (not x108) x758) x471))
(assert (x172 x621))
(assert (= x903 (and (not x229) x120)))
(assert (= (x127 (x346 (x161 (x316 (+ x4 32))))) (x161 (x316 (+ x4 32)))))
(assert (x728 (x384 192)))
(assert (=> (>= 10000 x283) (= (x346 x283) (x994 x283))))
(assert (= (x127 (x994 65535)) 65535))
(assert (x546 65537))
(assert (x172 x409))
(assert (x172 x528))
(assert (=> (>= 10000 (x566 (x316 (+ 192 x37)))) (= (x994 (x566 (x316 (+ x37 192)))) (x346 (x566 (x316 (+ 192 x37)))))))
(assert (x172 x207))
(assert (= (and x873 x352) x800))
(assert (= (and x669 x323) x410))
(assert (= (and (not x673) x394) x836))
(assert (x172 x262))
(assert (= (and x877 x32) x965))
(assert (and (= 5708990770823839524233143877797980545530986496 (x27 2 152)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x27 2 253)) (= 9007199254740992 (x27 2 53)) (= 4096 (x27 2 12)) (= (x27 2 91) 2475880078570760549798248448) (= 65536 (x27 2 16)) (= (x27 2 174) 23945242826029513411849172299223580994042798784118784) (= (x27 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x27 2 159) 730750818665451459101842416358141509827966271488) (= (x27 2 99) 633825300114114700748351602688) (= 17592186044416 (x27 2 44)) (= (x27 2 33) 8589934592) (= (x27 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 2251799813685248 (x27 2 51)) (= (x27 2 162) 5846006549323611672814739330865132078623730171904) (= 93536104789177786765035829293842113257979682750464 (x27 2 166)) (= 1267650600228229401496703205376 (x27 2 100)) (= 10633823966279326983230456482242756608 (x27 2 123)) (= (x27 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x27 2 143) 11150372599265311570767859136324180752990208) (= 79228162514264337593543950336 (x27 2 96)) (= (x27 2 6) 64) (= 618970019642690137449562112 (x27 2 89)) (= (x27 2 137) 174224571863520493293247799005065324265472) (= (x27 2 138) 348449143727040986586495598010130648530944) (= (x27 2 116) 83076749736557242056487941267521536) (= (x27 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 75557863725914323419136 (x27 2 76)) (= 43556142965880123323311949751266331066368 (x27 2 135)) (= (x27 2 47) 140737488355328) (= (x27 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x27 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x27 2 158) 365375409332725729550921208179070754913983135744) (= (x27 2 8) 256) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x27 2 221)) (= 332306998946228968225951765070086144 (x27 2 118)) (= 19342813113834066795298816 (x27 2 84)) (= (x27 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x27 2 82) 4835703278458516698824704) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x27 2 248)) (= 196159429230833773869868419475239575503198607639501078528 (x27 2 187)) (= 137438953472 (x27 2 37)) (= 10384593717069655257060992658440192 (x27 2 113)) (= (x27 2 21) 2097152) (= 95780971304118053647396689196894323976171195136475136 (x27 2 176)) (= (x27 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 11972621413014756705924586149611790497021399392059392 (x27 2 173)) (= 2854495385411919762116571938898990272765493248 (x27 2 151)) (= (x27 2 98) 316912650057057350374175801344) (= 52656145834278593348959013841835216159447547700274555627155488768 (x27 2 215)) (= (x27 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x27 2 25) 33554432) (= 72057594037927936 (x27 2 56)) (= 1298074214633706907132624082305024 (x27 2 110)) (= 70368744177664 (x27 2 46)) (= 512 (x27 2 9)) (= 131072 (x27 2 17)) (= 1048576 (x27 2 20)) (= (x27 2 58) 288230376151711744) (= 2535301200456458802993406410752 (x27 2 101)) (= 12855504354071922204335696738729300820177623950262342682411008 (x27 2 203)) (= 16384 (x27 2 14)) (= (x27 2 15) 32768) (= 20769187434139310514121985316880384 (x27 2 114)) (= (x27 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x27 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 154742504910672534362390528 (x27 2 87)) (= 383123885216472214589586756787577295904684780545900544 (x27 2 178)) (= 10889035741470030830827987437816582766592 (x27 2 133)) (= (x27 2 42) 4398046511104) (= (x27 2 186) 98079714615416886934934209737619787751599303819750539264) (= 1427247692705959881058285969449495136382746624 (x27 2 150)) (= (x27 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x27 2 95) 39614081257132168796771975168) (= (x27 2 4) 16) (= 158456325028528675187087900672 (x27 2 97)) (= 649037107316853453566312041152512 (x27 2 109)) (= (x27 2 23) 8388608) (= 680564733841876926926749214863536422912 (x27 2 129)) (= (x27 2 111) 2596148429267413814265248164610048) (= 24519928653854221733733552434404946937899825954937634816 (x27 2 184)) (= (x27 2 49) 562949953421312) (= 49039857307708443467467104868809893875799651909875269632 (x27 2 185)) (= (x27 2 52) 4503599627370496) (= (x27 2 105) 40564819207303340847894502572032) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x27 2 240)) (= 8796093022208 (x27 2 43)) (= 1073741824 (x27 2 30)) (= (x27 2 182) 6129982163463555433433388108601236734474956488734408704) (= 85070591730234615865843651857942052864 (x27 2 126)) (= (x27 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x27 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x27 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x27 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x27 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x27 2 72) 4722366482869645213696) (= 170141183460469231731687303715884105728 (x27 2 127)) (= 1237940039285380274899124224 (x27 2 90)) (= (x27 2 41) 2199023255552) (= (x27 2 156) 91343852333181432387730302044767688728495783936) (= 268435456 (x27 2 28)) (= 4611686018427387904 (x27 2 62)) (= 1152921504606846976 (x27 2 60)) (= (x27 2 29) 536870912) (= (x27 2 1) 2) (= 5316911983139663491615228241121378304 (x27 2 122)) (= 36893488147419103232 (x27 2 65)) (= 5444517870735015415413993718908291383296 (x27 2 132)) (= (x27 2 66) 73786976294838206464) (= (x27 2 63) 9223372036854775808) (= (x27 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x27 2 154) 22835963083295358096932575511191922182123945984) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x27 2 243)) (= (x27 2 59) 576460752303423488) (= 2361183241434822606848 (x27 2 71)) (= 187072209578355573530071658587684226515959365500928 (x27 2 167)) (= (x27 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x27 2 68) 295147905179352825856) (= (x27 2 177) 191561942608236107294793378393788647952342390272950272) (= (x27 2 183) 12259964326927110866866776217202473468949912977468817408) (= 41538374868278621028243970633760768 (x27 2 115)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x27 2 214)) (= 4294967296 (x27 2 32)) (= 25108406941546723055343157692830665664409421777856138051584 (x27 2 194)) (= 713623846352979940529142984724747568191373312 (x27 2 149)) (= (x27 2 153) 11417981541647679048466287755595961091061972992) (= 696898287454081973172991196020261297061888 (x27 2 139)) (= (x27 2 70) 1180591620717411303424) (= 34359738368 (x27 2 35)) (= 68719476736 (x27 2 36)) (= (x27 2 119) 664613997892457936451903530140172288) (= 11692013098647223345629478661730264157247460343808 (x27 2 163)) (= 5986310706507378352962293074805895248510699696029696 (x27 2 172)) (= (x27 2 93) 9903520314283042199192993792) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x27 2 255)) (= 21267647932558653966460912964485513216 (x27 2 124)) (= (x27 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x27 2 165) 46768052394588893382517914646921056628989841375232) (= (x27 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x27 2 252)) (= (x27 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x27 2 10) 1024) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x27 2 239)) (= 2658455991569831745807614120560689152 (x27 2 121)) (= (x27 2 74) 18889465931478580854784) (= 1 (x27 2 0)) (= 340282366920938463463374607431768211456 (x27 2 128)) (= (x27 2 81) 2417851639229258349412352) (= (x27 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 1329227995784915872903807060280344576 (x27 2 120)) (= (x27 2 134) 21778071482940061661655974875633165533184) (= 524288 (x27 2 19)) (= 32 (x27 2 5)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x27 2 230)) (= (x27 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 281474976710656 (x27 2 48)) (= 1208925819614629174706176 (x27 2 80)) (= (x27 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x27 2 102) 5070602400912917605986812821504) (= (x27 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 3064991081731777716716694054300618367237478244367204352 (x27 2 181)) (= 166153499473114484112975882535043072 (x27 2 117)) (= 18446744073709551616 (x27 2 64)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x27 2 225)) (= (x27 2 26) 67108864) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x27 2 226)) (= (x27 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 9444732965739290427392 (x27 2 73)) (= (x27 2 148) 356811923176489970264571492362373784095686656) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x27 2 222)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x27 2 247)) (= 5192296858534827628530496329220096 (x27 2 112)) (= 20282409603651670423947251286016 (x27 2 104)) (= (x27 2 31) 2147483648) (= (x27 2 157) 182687704666362864775460604089535377456991567872) (= (x27 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x27 2 160) 1461501637330902918203684832716283019655932542976) (= 6277101735386680763835789423207666416102355444464034512896 (x27 2 192)) (= 162259276829213363391578010288128 (x27 2 107)) (= (x27 2 75) 37778931862957161709568) (= 421249166674228746791672110734681729275580381602196445017243910144 (x27 2 218)) (= 89202980794122492566142873090593446023921664 (x27 2 146)) (= 590295810358705651712 (x27 2 69)) (= (x27 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x27 2 250)) (= 144115188075855872 (x27 2 57)) (= 8192 (x27 2 13)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x27 2 213)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x27 2 254)) (= (x27 2 38) 274877906944) (= 324518553658426726783156020576256 (x27 2 108)) (= (x27 2 136) 87112285931760246646623899502532662132736) (= 2923003274661805836407369665432566039311865085952 (x27 2 161)) (= (x27 2 55) 36028797018963968) (= 151115727451828646838272 (x27 2 77)) (= (x27 2 164) 23384026197294446691258957323460528314494920687616) (= 178405961588244985132285746181186892047843328 (x27 2 147)) (= (x27 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x27 2 79) 604462909807314587353088) (= 147573952589676412928 (x27 2 67)) (= 17179869184 (x27 2 34)) (= (x27 2 27) 134217728) (= (x27 2 45) 35184372088832) (= (x27 2 11) 2048) (= (x27 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x27 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 2787593149816327892691964784081045188247552 (x27 2 141)) (= (x27 2 168) 374144419156711147060143317175368453031918731001856) (= 47890485652059026823698344598447161988085597568237568 (x27 2 175)) (= 302231454903657293676544 (x27 2 78)) (= 1361129467683753853853498429727072845824 (x27 2 130)) (= (x27 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 4194304 (x27 2 22)) (= 766247770432944429179173513575154591809369561091801088 (x27 2 179)) (= (x27 2 144) 22300745198530623141535718272648361505980416) (= 42535295865117307932921825928971026432 (x27 2 125)) (= (x27 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x27 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 262144 (x27 2 18)) (= (x27 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 2993155353253689176481146537402947624255349848014848 (x27 2 171)) (= 8 (x27 2 3)) (= (x27 2 140) 1393796574908163946345982392040522594123776) (= 4951760157141521099596496896 (x27 2 92)) (= 18014398509481984 (x27 2 54)) (= 19807040628566084398385987584 (x27 2 94)) (= (x27 2 39) 549755813888) (= (x27 2 88) 309485009821345068724781056) (= 4 (x27 2 2)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x27 2 216)) (= 1496577676626844588240573268701473812127674924007424 (x27 2 170)) (= (x27 2 155) 45671926166590716193865151022383844364247891968) (= (x27 2 169) 748288838313422294120286634350736906063837462003712) (= (x27 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x27 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 1125899906842624 (x27 2 50)) (= (x27 2 61) 2305843009213693952) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x27 2 236)) (= 128 (x27 2 7)) (= (x27 2 85) 38685626227668133590597632) (= (x27 2 24) 16777216) (= 10141204801825835211973625643008 (x27 2 103)) (= 81129638414606681695789005144064 (x27 2 106)) (= 77371252455336267181195264 (x27 2 86)) (= 5575186299632655785383929568162090376495104 (x27 2 142)) (= 102844034832575377634685573909834406561420991602098741459288064 (x27 2 206)) (= 9671406556917033397649408 (x27 2 83)) (= 1099511627776 (x27 2 40)) (= (x27 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 44601490397061246283071436545296723011960832 (x27 2 145)) (= 392318858461667547739736838950479151006397215279002157056 (x27 2 188)) (= 2722258935367507707706996859454145691648 (x27 2 131)) (= (x27 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 200867255532373784442745261542645325315275374222849104412672 (x27 2 197)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x27 2 245)) (= 803469022129495137770981046170581301261101496891396417650688 (x27 2 199))))
(assert (= (x25 352) 0))
(assert (= (and x138 (not x208)) x743))
(assert (x172 x976))
(assert (x172 x397))
(assert (= (x994 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x346 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (= x767 (x127 (x346 x767))))
(assert (= x49 (and (not x328) x879)))
(assert (= x394 (and x228 x984)))
(assert (= (x994 66853817334611902194238164484889819180315942402426128563245745834960013477038) (x346 66853817334611902194238164484889819180315942402426128563245745834960013477038)))
(assert (x172 x482))
(assert (x172 x190))
(assert (x172 x160))
(assert (x172 x822))
(assert (= (and (not x545) x285) x685))
(assert (x425 x842 x436))
(assert (x912 x678))
(assert (x211 x212))
(assert (= (x127 (x994 4294967295)) 4294967295))
(assert (x546 x678))
(assert (x172 x219))
(assert (= x808 (and (not x511) x698)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x127 (x994 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= x44 (=> (and (= x265 (x316 (+ 1 x313))) (= (> x313 x265) x585)) (and (=> x585 x354) (=> (and (and (= x647 x614) (= x196 x936)) (not x585)) x792)))))
(assert (x172 x875))
(assert (x172 x80))
(assert (= x156 (and (not x781) x763)))
(assert (= x873 (and (not x481) x679)))
(assert (= (x945 x846 160) (mod (* x846 1461501637330902918203684832716283019655932542976) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x619 (=> (= (= 0 x317) x496) (and (=> x496 x354) (=> (and (and (= x200 (or (and (= (<= x807 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x807 32)) (> x807 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x110 (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x741)) (= x276 (x316 (+ x584 x110))) (= (x316 (+ 31 x807)) x741)) (not x496)) (and (=> (and (and (= (x316 (+ x931 7776000)) x1022) (= (x174 18446744073709551615 x626) x931) (= (x69 x584) x626) (= x323 (< 18446744073709551615 x1022))) (not x200)) (and (=> (and (not x323) (and (= x1022 x293) (= x276 x575))) x531) (=> x323 x354))) (=> x200 x354)))))))
(assert (= (=> (and (= x395 (not (> x175 32))) (= x579 (x734 x1001)) (= (x316 (+ 32 x86)) x1001) (= x961 (x695 x868 1))) (and (=> (and (= 64 x252) (= x961 x237)) x667) x395)) x197))
(assert (= (x994 4294967296) (x346 4294967296)))
(assert (x172 x791))
(assert (= x984 (and (not x658) x466)))
(assert (= (x161 (x316 (+ x4 192))) (x127 (x346 (x161 (x316 (+ x4 192)))))))
(assert (x172 x952))
(assert (x172 x5))
(assert (= x548 (and x749 x169)))
(assert (x728 (x1007 (x316 (+ x696 160)))))
(assert (= (and (not x181) x697) x478))
(assert (x172 x894))
(assert (= (x127 (x346 (x384 224))) (x384 224)))
(assert (= (x127 (x994 353073666)) 353073666))
(assert (= x515 (=> (or (not x328) x328) x740)))
(assert (x172 x212))
(assert (= (or x1027 x685) x374))
(assert (= (=> (and (= (<= x313 224) x757) (= (x316 (+ 1 x225)) x696)) (and (=> (= x614 (ite (>= 32 x313) (x726 (x346 (x1007 x696)) 0) (ite (>= 64 x313) (x375 (x346 (x1007 x696)) (x346 (x1007 (x316 (+ x696 32)))) 0) (ite (<= x313 96) (x541 (x346 (x1007 x696)) (x346 (x1007 (x316 (+ 32 x696)))) (x346 (x1007 (x316 (+ x696 64)))) 0) (ite (<= x313 128) (x502 (x346 (x1007 x696)) (x346 (x1007 (x316 (+ 32 x696)))) (x346 (x1007 (x316 (+ 64 x696)))) (x346 (x1007 (x316 (+ x696 96)))) 0) (ite (>= 160 x313) (x421 (x346 (x1007 x696)) (x346 (x1007 (x316 (+ x696 32)))) (x346 (x1007 (x316 (+ x696 64)))) (x346 (x1007 (x316 (+ 96 x696)))) (x346 (x1007 (x316 (+ 128 x696)))) 0) (ite (<= x313 192) (x656 (x346 (x1007 x696)) (x346 (x1007 (x316 (+ x696 32)))) (x346 (x1007 (x316 (+ 64 x696)))) (x346 (x1007 (x316 (+ 96 x696)))) (x346 (x1007 (x316 (+ 128 x696)))) (x346 (x1007 (x316 (+ x696 160)))) 0) (ite (>= 224 x313) (x76 (x346 (x1007 x696)) (x346 (x1007 (x316 (+ x696 32)))) (x346 (x1007 (x316 (+ x696 64)))) (x346 (x1007 (x316 (+ x696 96)))) (x346 (x1007 (x316 (+ 128 x696)))) (x346 (x1007 (x316 (+ 160 x696)))) (x346 (x1007 (x316 (+ x696 192)))) 0) (x346 x662))))))))) x44) x757)) x798))
(assert (= (x945 x663 248) (mod (* 452312848583266388373324160190187140051835877600158453279131187530910662656 x663) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (=> (and (= x288 (not (< x1032 x167))) (= x281 (x1033 x9)) (= (x316 (+ x689 32)) x1032)) (and x288 x891)) x880))
(assert (x172 x766))
(assert (= (and x576 (not x406)) x373))
(assert (x546 x911))
(assert (x172 x433))
(assert (= (=> (and (<= 0 x232) (not (= x119 x70)) (= false x661) (<= 0 x564) (>= 1461501637330902918203684832716283019655932542975 x119) (not (= x7 x70)) (= x82 x905) (= x914 (x573 (x346 x7))) (> x70 0) (<= x748 1461501637330902918203684832716283019655932542975) (>= x277 0) (= false x885) (= x503 x682) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x414)) (< 131 x414)) (= x497 x492) (= (> (x573 (x346 x7)) 0) x368) (= (x495 (x346 x119)) x277) (= x905 x482) (not (= x119 x7)) (= false x330) (<= 0 x123) (> x914 0) (= x189 353073666) (>= 1461501637330902918203684832716283019655932542975 x564) (<= x82 1461501637330902918203684832716283019655932542975) (= x528 (x495 (x346 x70))) (<= 0 x748) (>= 1461501637330902918203684832716283019655932542975 x123) (= x957 (> (x573 (x346 x70)) 0)) (<= x7 1461501637330902918203684832716283019655932542975) (<= 0 x82) x957 (> x7 0) (= x388 x766) x201 x368 (= x870 x574) (= false x527) (<= 0 x282) (<= 0 x297) (= x1028 x409) (>= x314 0) (>= 1461501637330902918203684832716283019655932542975 x282) (> x119 0) (= 4 x659) (= x859 (= x832 0)) (>= 1461501637330902918203684832716283019655932542975 x232) (<= x497 1461501637330902918203684832716283019655932542975) (>= x528 0) (= (x495 (x346 x7)) x297) (>= 1461501637330902918203684832716283019655932542975 x314) (= x688 x232) (= (> (x573 (x346 x119)) 0) x201) (<= 0 x497) (= x28 x191) (<= x70 1461501637330902918203684832716283019655932542975) (= x748 x492)) (and (=> (and (and (not (< x105 346787896)) (< x105 549686827) (= x105 353073666) (> 1666326814 x105) (not (= 346787896 x105)) (= (or (and (> 128 x477) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x477))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x477)) x970) (= (x370 (- x414 4)) x477) (not (< x414 4))) x859) (and (=> (and (and (= x270 (= x133 x409)) (= (x174 1461501637330902918203684832716283019655932542975 x409) x133)) (not x970)) (and (=> (not x270) x354) (=> (and (and (= x654 (x174 1461501637330902918203684832716283019655932542975 x388)) (= x445 (= x654 x388))) x270) (and (=> (not x445) x354) (=> (and (= (> x28 18446744073709551615) x676) x445) (and (=> (and (not x676) (and (= x64 (x316 (+ 31 x932))) (= (or (and (< x64 x414) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x64) (<= x414 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x64) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x414))) x928) (= x932 (x316 (+ 4 x191))))) (and (=> (not x928) x354) (=> (and (and (= (> x967 18446744073709551615) x406) (= (x617 x932) x967)) x928) (and (=> (and (and (= (> x777 x414) x802) (= (x316 (+ x97 x967)) x777) (= (x316 (+ x932 32)) x97)) (not x406)) (and (=> x802 x354) (=> (and (not x802) (and (= x435 (= x464 x492)) (= (x174 1461501637330902918203684832716283019655932542975 x621) x464))) (and (=> (not x435) x354) (=> (and (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x967)) (< x967 128)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x967)) x396) x435) (and (=> (and (and (= (< 18446744073709551615 x85) x430) (= x85 (x617 x640)) (= x640 (x316 (+ 32 x932)))) (not x396)) (and (=> x430 x354) (=> (and (not x430) (and (= x312 (x316 (+ 31 x737))) (= (x316 (+ x85 x640)) x737) (= x565 (or (and (< x312 x777) (= (<= x777 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x312) (<= x777 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))) (and (=> (and (and (= (x617 x737) x140) (= x132 (< 18446744073709551615 x140)) (= (x316 (+ x737 32)) x215)) x565) (and (=> (and (and (= (x316 (+ 31 x140)) x787) (= x148 (x316 (+ x427 128))) (= (x316 (+ x826 31)) x1006) (= x230 (or x331 x899)) (= (< 18446744073709551615 x148) x331) (= x899 (> 128 x148)) (= (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1006) x427) (= (x316 (+ 32 x522)) x826) (= (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x787) x522) (= (= (ite x230 1 0) 0) x768)) (not x132)) (and (=> (not x768) x354) (=> (and (and (= x481 (< x777 x894)) (= x894 (x316 (+ x140 x215)))) x768) (and (=> x481 x354) (=> (and (not x481) (and (= (x316 (+ x640 32)) x774) (= (x174 1461501637330902918203684832716283019655932542975 x989) x591) (= x448 (x316 (+ x140 160))) (= x352 (= x591 x989)) (= (x617 x774) x989))) (and (=> (and (and (= x845 (x174 65535 x966)) (= x559 (x316 (+ 32 x774))) (= x966 (x617 x559)) (= (= x966 x845) x583)) x352) (and (=> (and x583 (and (= (x617 x468) x234) (= (x174 1461501637330902918203684832716283019655932542975 x234) x563) (= (= x563 x234) x266) (= (x316 (+ 32 x559)) x468))) (and (=> (not x266) x354) (=> x266 x729))) (=> (not x583) x354))) (=> (not x352) x354))))))) (=> x132 x354))) (=> (not x565) x354))))) (=> x396 x354))))))) (=> x406 x354))))) (=> x676 x354))))))) (=> x970 x354))) (=> (not x859) x354))) x387))
(assert (x172 x1024))
(assert (x546 x787))
(assert (= x747 (and x896 (not x55))))
(assert (x172 x751))
(assert (x505 x249 x212))
(assert (x172 x497))
(assert (= x618 (and (not x107) x439)))
(assert (= 0 (x25 256)))
(assert (x211 x102))
(assert (x546 65536))
(assert (= x524 (or x93 x668)))
(assert (= x848 (and x478 (not x851))))
(assert (x172 x140))
(assert (x172 x23))
(assert (x172 x519))
(assert (x546 255))
(assert (= x729 (=> (and (= (<= x57 224) x508) (= x57 (x978 128))) (and (=> (= x55 (= (ite (>= 32 x57) (x726 (x346 (x978 160)) 0) (ite (<= x57 64) (x375 (x346 (x978 160)) (x346 (x978 192)) 0) (ite (<= x57 96) (x541 (x346 (x978 160)) (x346 (x978 192)) (x346 (x978 224)) 0) (ite (>= 128 x57) (x502 (x346 (x978 160)) (x346 (x978 192)) (x346 (x978 224)) (x346 (x978 256)) 0) (ite (>= 160 x57) (x421 (x346 (x978 160)) (x346 (x978 192)) (x346 (x978 224)) (x346 (x978 256)) (x346 (x978 288)) 0) (ite (<= x57 192) (x656 (x346 (x978 160)) (x346 (x978 192)) (x346 (x978 224)) (x346 (x978 256)) (x346 (x978 288)) (x346 (x978 320)) 0) (ite (<= x57 224) (x76 (x346 (x978 160)) (x346 (x978 192)) (x346 (x978 224)) (x346 (x978 256)) (x346 (x978 288)) (x346 (x978 320)) (x346 (x978 352)) 0) (x346 x767)))))))) (x346 x503))) (and (=> (not x55) x354) (=> (and x55 (and (= x634 (x316 (+ 4 x148))) (= (x174 1461501637330902918203684832716283019655932542975 x621) x283) (= x722 (x316 (+ x634 32))) (= x806 (x573 (x346 x283))) (= (= 0 x806) x801))) (and (=> x801 x354) (=> (and (not x801) (and (= x35 (> x128 0)) (or (not x35) (and x35 (and (= (= (x1005 (x346 x283)) x355) x650) x650 (= (x495 (x346 x7)) x177) x811 (= x355 (x495 (x346 x283))) (= x811 (<= x177 (x1005 (x346 x7)))) (> 4294967296 x433)))))) x691))))) x508))))
(assert (= x371 (=> (and (= x222 (x174 4294967295 x339)) (= x819 (mod (+ (x945 x222 160) (x945 x562 192)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x581 (x375 x92 (x994 1) 0)) (= x258 x813) (= x447 (x316 (+ 32 x813)))) x556)))
(assert (x172 x249))
(assert (= (x694 x42 192) (div x42 6277101735386680763835789423207666416102355444464034512896)))
(assert (x172 x939))
(assert (x172 x539))
(assert (= x469 (and (not x746) x432)))
(assert (= 9518847204935358166548570266051330015907116135037852959641967396525866745856 (x127 (x994 9518847204935358166548570266051330015907116135037852959641967396525866745856))))
(assert (=> (>= 10000 (x161 (x316 (+ x4 64)))) (= (x346 (x161 (x316 (+ x4 64)))) (x994 (x161 (x316 (+ 64 x4)))))))
(assert (= (and x543 x343) x698))
(assert (x172 x897))
(assert (x172 x271))
(assert (x172 x460))
(assert (x172 x872))
(assert (= x775 (and x903 (not x941))))
(assert (= (x694 x42 160) (div x42 1461501637330902918203684832716283019655932542976)))
(assert (x856 x709))
(assert (= (or x267 x554) x697))
(assert (x172 x377))
(assert (x546 x975))
(assert (= (and x605 (not x549)) x718))
(assert (x728 (x566 (x316 (+ x37 32)))))
(assert (=> (>= 10000 (x566 (x316 (+ x37 64)))) (= (x994 (x566 (x316 (+ x37 64)))) (x346 (x566 (x316 (+ 64 x37)))))))
(assert (= (x127 (x346 (x1007 (x316 (+ 32 x696))))) (x1007 (x316 (+ x696 32)))))
(assert (= (x127 (x346 (x566 (x316 (+ x37 64))))) (x566 (x316 (+ 64 x37)))))
(assert (= (x346 (x127 x182)) x182))
(assert (x172 x653))
(assert (x172 x73))
(assert (x172 x59))
(assert (= (x978 224) (x127 (x346 (x978 224)))))
(assert (= (x346 65536) (x994 65536)))
(assert (= (x994 131072) (x346 131072)))
(assert (x546 x115))
(assert (x172 x911))
(assert (x172 x807))
(assert (x546 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (x127 (x994 1536193505703097071473766605195189375248157893288704583667612676508713222144)) 1536193505703097071473766605195189375248157893288704583667612676508713222144))
(assert (x172 x966))
(assert (= x454 (and x250 x129)))
(assert (= (and x179 (not x699)) x553))
(assert (x172 x118))
(assert (x546 1))
(assert (= (and x525 x440) x883))
(assert (x172 x276))
(assert (x172 x834))
(assert (= (or x162 x831) x910))
(assert (= (and (not x929) x350) x404))
(assert (= (and (not x430) x52) x150))
(assert (x546 x529))
(assert (x728 x283))
(assert (= (and x887 x587) x278))
(assert (= (or x775 x473) x636))
(assert (x172 x624))
(assert (x211 x888))
(assert (= x525 (or x990 x38)))
(assert (x728 (x566 x37)))
(assert (x546 x409))
(assert (x172 x789))
(assert (=> (>= 10000 (x161 (x316 (+ x4 32)))) (= (x994 (x161 (x316 (+ 32 x4)))) (x346 (x161 (x316 (+ 32 x4)))))))
(assert (= (and x732 x10) x778))
(assert (=> (<= (x566 x37) 10000) (= (x346 (x566 x37)) (x994 (x566 x37)))))
(assert (x172 x147))
(assert (= x70 (x127 (x346 x70))))
(assert (x184 x339))
(assert (= (x127 (x695 x868 1)) (+ 1 (x127 x868))))
(assert (x172 x4))
(assert (= (=> (and (= (> x870 x562) x78) (or (and (= 0 x339) x78) (and (not x78) (= x339 x294)))) x371) x629))
(assert (= (=> (and (= x328 false) (= 9518847204935358166548570266051330015907116135037852959641967396525866745856 x243)) x515) x472))
(assert (x172 x767))
(assert (= x453 (or x454 x340)))
(assert (x172 x177))
(assert (= x138 (and x274 (not x400))))
(assert (= (and (not x585) x910) x101))
(assert (= (x694 115792089237316195423570985008687907853269984665640564039457584007913129639935 x670) (ite (< x670 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x27 2 x670)) 0)))
(assert (x172 x57))
(assert (= x438 (and (not x323) x669)))
(assert (x172 x124))
(assert (x172 x512))
(assert (= (and (not x17) x590) x296))
(assert (x263 x1002))
(assert (x546 x155))
(assert (= (x945 x719 192) (mod (* 6277101735386680763835789423207666416102355444464034512896 x719) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x172 x498))
(assert (x172 x913))
(assert (= x340 (and x250 (not x129))))
(assert (= x216 (and x985 x254)))
(assert (x172 x378))
(assert (= (or x356 x411 x930) x968))
(assert (=> (<= (x161 x4) 10000) (= (x346 (x161 x4)) (x994 (x161 x4)))))
(assert (= (x346 7776000) (x994 7776000)))
(assert (x728 x620))
(assert (x172 x640))
(assert (x172 x535))
(assert (x172 x846))
(assert (x728 x24))
(assert (= (x346 1666326814) (x994 1666326814)))
(assert (x172 x1017))
(assert (x172 x306))
(assert (= x681 (and x984 (not x228))))
(assert (x172 x813))
(assert (= x620 (x127 (x346 x620))))
(assert (=> (>= 10000 x336) (= (x346 x336) (x994 x336))))
(assert (=> (>= 10000 (x384 224)) (= (x994 (x384 224)) (x346 (x384 224)))))
(assert (x172 x414))
(assert (x172 x622))
(assert (= (and x744 x963) x686))
(assert (x172 x225))
(assert (x172 x133))
(assert (= (x25 (x316 (+ 192 x696))) 0))
(assert (= (x994 65535) (x346 65535)))
(assert (x546 x1006))
(assert (x172 x37))
(assert (x172 x612))
(assert (x172 x700))
(assert (= (x694 x1003 160) (div x1003 1461501637330902918203684832716283019655932542976)))
(assert (x971 x388))
(assert (x172 x178))
(assert (= x214 (and (not x1015) x618)))
(assert (= 0 (x25 x712)))
(assert (x172 x345))
(assert (= x736 x996))
(assert (x546 18446744073709551615))
(assert (x172 x349))
(assert (= x900 (or x49 x607)))
(assert (= (and x311 (not x488)) x830))
(assert (x172 x654))
(assert (x172 x28))
(assert (x172 x1003))
(assert (= (and (not x396) x14) x52))
(assert (x172 x909))
(assert (= (x25 288) 0))
(assert (x546 x989))
(assert (= (x25 x4) 0))
(assert (= x1025 (and (not x132) x291)))
(assert (= x210 (and x639 x848)))
(assert (x982 x401))
(assert (x172 x819))
(assert (= (=> (and (or (and x223 (and (= 1 x988) (< x653 4294967296))) (and (not x223) (= x988 x750))) (and (= (x316 (+ 4 x1)) x326) (= x223 (< 0 x750)))) x11) x256))
(assert (= x989 (x127 (x346 x989))))
(assert (x172 x534))
(assert (= (x127 (x346 (x384 160))) (x384 160)))
(assert (= (=> (and (= (>= 224 x701) x865) (= x701 (x384 128))) (and (=> (and (= x124 (x316 (+ 32 x349))) (= (ite (>= 32 x701) (x726 (x346 (x384 160)) 0) (ite (<= x701 64) (x375 (x346 (x384 160)) (x346 (x384 192)) 0) (ite (>= 96 x701) (x541 (x346 (x384 160)) (x346 (x384 192)) (x346 (x384 224)) 0) (ite (<= x701 128) (x502 (x346 (x384 160)) (x346 (x384 192)) (x346 (x384 224)) (x346 (x384 256)) 0) (ite (<= x701 160) (x421 (x346 (x384 160)) (x346 (x384 192)) (x346 (x384 224)) (x346 (x384 256)) (x346 (x384 288)) 0) (ite (>= 192 x701) (x656 (x346 (x384 160)) (x346 (x384 192)) (x346 (x384 224)) (x346 (x384 256)) (x346 (x384 288)) (x346 (x384 320)) 0) (ite (>= 224 x701) (x76 (x346 (x384 160)) (x346 (x384 192)) (x346 (x384 224)) (x346 (x384 256)) (x346 (x384 288)) (x346 (x384 320)) (x346 (x384 352)) 0) (x346 x336)))))))) x182) (= x822 (x370 (- x160 32))) (= (x316 (+ 32 x124)) x597) (= (x316 (+ 64 x124)) x86) (= x349 (x316 (+ x1024 32))) (= (x316 (+ x148 32)) x1024) (= (x375 (x346 66853817334611902194238164484889819180315942402426128563245745834960013477038) x182 0) x92) (= x160 (x370 (- x124 x148))) (= x707 (> 1 x379)) (= (x833 128) x379)) (and (=> x707 x354) (=> (and (not x707) (and (= (< 255 x820) x658) (= (x833 128) x820))) (and (=> (and (and (= (x316 (+ 32 x86)) x498) (= x228 (< 0 x54)) (= (x316 (+ x498 1)) x318) (= (x945 x663 248) x1020) (= x663 (x174 255 x21)) (= x21 (x833 128)) (= x54 (x2 128))) (not x658)) (and (=> (not x228) x89) (=> (and x228 (and (= (> x54 32) x673) (= x345 (x2 160)) (= x700 x318))) (and (=> (not x673) x89) (=> (and (and (= x17 (< 64 x54)) (= (x316 (+ 32 x318)) x358) (= (x426 192) x131)) x673) (and (=> (not x17) x89) (=> (and x17 (and (= (x316 (+ 64 x318)) x143) (= (> x54 96) x254) (= x862 (x308 224)))) (and (=> x254 x419) (=> (not x254) x89))))))))) (=> x658 x354))))) x865)) x761))
(assert (= (or x194 x402) x292))
(assert (x172 x503))
(assert (x728 (x384 256)))
(assert (= x7 (x127 (x346 x7))))
(assert (x172 x54))
(assert (= 0 (x25 (x316 (+ 64 x4)))))
(assert (x172 x701))
(assert (= x518 (and x655 x479)))
(assert (x172 x924))
(assert (= (x127 (x994 6277101735386680763835789423207666416102355444464034512895)) 6277101735386680763835789423207666416102355444464034512895))
(assert (= (div x1003 6277101735386680763835789423207666416102355444464034512896) (x694 x1003 192)))
(assert (x172 x665))
(assert (= x756 (and x149 x839)))
(assert (= (x127 (x346 (x978 320))) (x978 320)))
(assert (= (or x830 x739) x839))
(assert (= (x978 160) (x127 (x346 (x978 160)))))
(assert (= x758 (or (and x429 (not x898)) x615)))
(assert (= (and (not x946) x338) x335))
(assert (x856 x529))
(assert (= (x346 9518847204935358166548570266051330015907116135037852959641967396525866745856) (x994 9518847204935358166548570266051330015907116135037852959641967396525866745856)))
(assert (= x58 (and x762 x112)))
(assert (x728 (x566 (x316 (+ 192 x37)))))
(assert (= (x127 (x346 (x161 x4))) (x161 x4)))
(assert (x172 x260))
(assert (=> (>= 10000 (x161 (x316 (+ 128 x4)))) (= (x994 (x161 (x316 (+ x4 128)))) (x346 (x161 (x316 (+ 128 x4)))))))
(assert (= (and x910 x585) x431))
(assert (x172 x816))
(assert (= (or x704 (and x524 (not x745))) x600))
(assert (= (x384 352) (x127 (x346 (x384 352)))))
(assert (x546 x264))
(assert (x971 x641))
(assert (= x753 (=> (and (= (x1033 x506) x255) (= (not (< x917 x418)) x642) (= x917 (x316 (+ 32 x909)))) (and x642 x996))))
(assert (x172 x721))
(assert (x172 x931))
(assert (= (div x219 452312848583266388373324160190187140051835877600158453279131187530910662656) (x694 x219 248)))
(assert (x172 x464))
(assert (x172 x148))
(assert (x728 (x161 (x316 (+ x4 128)))))
(assert (= x385 (and (not x441) x142)))
(assert (x172 x24))
(assert (= (x127 (x994 549686827)) 549686827))
(assert (= (x346 (x127 x104)) x104))
(assert (x172 x105))
(assert (x172 x620))
(assert (= (and (not x109) x580) x739))
(assert (= (and x311 x488) x350))
(assert (= (x127 (x346 (x978 288))) (x978 288)))
(assert (x971 x409))
(assert (x172 x999))
(assert (x172 x125))
(assert (x172 x659))
(assert (=> (>= 10000 (x978 192)) (= (x994 (x978 192)) (x346 (x978 192)))))
(assert (x172 x456))
(assert (x172 x175))
(assert (= (and x380 x553) x990))
(assert (x172 x86))
(assert (= (or x550 x567) x320))
(assert (=> (>= 10000 (x566 (x316 (+ 32 x37)))) (= (x994 (x566 (x316 (+ x37 32)))) (x346 (x566 (x316 (+ x37 32)))))))
(assert (=> (>= 10000 (x1007 (x316 (+ 192 x696)))) (= (x994 (x1007 (x316 (+ 192 x696)))) (x346 (x1007 (x316 (+ x696 192)))))))
(assert (= x63 (=> (and (= x611 (<= x377 224)) (= x37 (x316 (+ 1 x712)))) (and (=> (= (ite (>= 32 x377) (x726 (x346 (x566 x37)) 0) (ite (<= x377 64) (x375 (x346 (x566 x37)) (x346 (x566 (x316 (+ x37 32)))) 0) (ite (>= 96 x377) (x541 (x346 (x566 x37)) (x346 (x566 (x316 (+ x37 32)))) (x346 (x566 (x316 (+ 64 x37)))) 0) (ite (>= 128 x377) (x502 (x346 (x566 x37)) (x346 (x566 (x316 (+ 32 x37)))) (x346 (x566 (x316 (+ 64 x37)))) (x346 (x566 (x316 (+ 96 x37)))) 0) (ite (<= x377 160) (x421 (x346 (x566 x37)) (x346 (x566 (x316 (+ x37 32)))) (x346 (x566 (x316 (+ 64 x37)))) (x346 (x566 (x316 (+ x37 96)))) (x346 (x566 (x316 (+ 128 x37)))) 0) (ite (<= x377 192) (x656 (x346 (x566 x37)) (x346 (x566 (x316 (+ 32 x37)))) (x346 (x566 (x316 (+ x37 64)))) (x346 (x566 (x316 (+ 96 x37)))) (x346 (x566 (x316 (+ x37 128)))) (x346 (x566 (x316 (+ x37 160)))) 0) (ite (>= 224 x377) (x76 (x346 (x566 x37)) (x346 (x566 (x316 (+ 32 x37)))) (x346 (x566 (x316 (+ x37 64)))) (x346 (x566 (x316 (+ x37 96)))) (x346 (x566 (x316 (+ x37 128)))) (x346 (x566 (x316 (+ x37 160)))) (x346 (x566 (x316 (+ 192 x37)))) 0) (x346 x620)))))))) x770) x136) x611))))
(assert (= (=> (= x381 (= x791 0)) (and (=> x381 x354) (=> (and (not x381) (and (= x489 (or (and (= (<= x486 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x486)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x486))) (= x523 (x174 115792089237316195423570985008687907853269984665640564039457584007913129639904 x155)) (= x1004 (x316 (+ x106 x523))) (= (x316 (+ x486 31)) x155))) (and (=> (and (not x489) (and (= (x174 115792089210356248756420345214020892766250353992003419616917011526809519390720 x599) x568) (= x935 (= x599 x568)) (= (x362 x106) x599))) (and (=> (not x935) x354) (=> (and x935 (and (= x773 (x174 115792089210356248756420345214020892766250353992003419616917011526809519390720 x599)) (= (= x773 109562948294120585953088955926913691080166221410047079322077399086870164406272) x874))) (and (=> (and (= x1004 x50) x874) x41) (=> (not x874) x354))))) (=> x489 x354))))) x386))
(assert (x172 x312))
(assert (= (and x763 x781) x867))
(assert (x172 x634))
(assert (x172 x806))
(assert true)
(assert (x172 x238))
(assert (x728 x336))
(assert (x172 x222))
(assert (x172 x523))
(assert (x172 x314))
(assert (= x993 (and x259 (not x333))))
(assert (= x623 (and x504 x724)))
(assert (= (x694 115792089237316195423570985008687907853269984665640564039457584007913129639935 x872) (ite (< x872 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x27 2 x872)) 0)))
(assert (x172 x559))
(assert (= (=> (and (= (x1033 x795) x979) (= x451 (not (> x594 x665))) (= x665 (x316 (+ x376 32)))) (and x451 x279)) x861))
(assert (= (div x171 1461501637330902918203684832716283019655932542976) (x694 x171 160)))
(assert (x172 x390))
(assert (= x89 (=> (and (= (< 0 x23) x803) (= (x316 (+ x54 x318)) x241) (= x23 (x485 x124))) (and (=> (and (and (= (> x23 32) x90) (= x51 (x485 x118)) (= x597 x118) (= x241 x309)) x803) (and (=> (not x90) x937) (=> (and (and (= x810 (x316 (+ 32 x241))) (= (x815 x463) x916) (= (< 64 x23) x543) (= (x316 (+ 32 x597)) x463)) x90) (and (=> (not x543) x937) (=> (and (and (= (x316 (+ 64 x597)) x173) (= x814 (x572 x173)) (= (> x23 96) x511) (= x613 (x316 (+ 64 x241)))) x543) (and (=> x511 x158) (=> (not x511) x937))))))) (=> (not x803) x937)))))
(assert (= (and (not x200) x351) x669))
(assert (x172 x68))
(assert (x728 (x978 256)))
(assert (= x465 (=> (and (= (x316 (+ x920 1)) x16) (= (mod (* x911 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x920)) x256)))
(assert (x172 x144))
(assert (= x908 (and x991 x78)))
(assert (x172 x251))
(assert (x13 x966))
(assert (x172 x920))
(assert (x172 x87))
(assert (= (x127 (x994 18511804847318769127852513085034306573455405177986258919159753969546364452864)) 18511804847318769127852513085034306573455405177986258919159753969546364452864))
(assert (x172 x195))
(assert (= (and (not x963) x744) x542))
(assert (= (and x137 x953) x112))
(assert (= x730 (and (not x78) x991)))
(assert (= x402 (and (not x8) x60)))
(assert (= (x127 (x346 (x566 (x316 (+ 128 x37))))) (x566 (x316 (+ x37 128)))))
(assert (= (or (and (not x440) x525) x883) x587))
(assert (x172 x253))
(assert (x172 x936))
(assert (= (=> (and (= (x398 256) x455) (= (x316 (+ 96 x318)) x947) (= x919 (not (< 128 x54)))) (and x919 x89)) x419))
(assert (x172 x64))
(assert (= (=> (and (= x898 (= 0 x128)) (or (not x898) x898)) x321) x691))
(assert (x172 x233))
(assert (x546 x388))
(assert (x172 x317))
(assert (= x561 (=> (and (= (> x779 0) x948) (= (x161 x258) x779)) (and (=> (not x948) x354) (=> (and (and (= x1011 (x161 x260)) (= x892 (x694 x1011 248)) (= x963 (> x892 0))) x948) (and (=> (and (and (= (> x144 x850) x357) (= x144 (x316 (+ 1 x892))) (= x850 (x161 x258))) x963) (and (=> (not x357) x922) (=> x357 x354))) (=> (and (not x963) (= x151 (x994 0))) x39)))))))
(assert (= (x346 (x127 x301)) x301))
(assert (x172 x662))
(assert (= (and x71 x874) x261))
(assert (x172 x826))
(assert (= (=> (= (= 0 x268) x887) (and (=> x887 x354) (=> (not x887) x472))) x417))
(assert (x172 x239))
(assert (x33 x975))
(assert (= (and x983 x445) x280))
(assert (x728 (x978 192)))
(assert (x172 x560))
(assert (= x590 (and x394 x673)))
(assert (x728 x662))
(assert (x172 x268))
(assert (x172 x185))
(assert (x728 x516))
(assert (= x582 (and x514 (not x866))))
(assert (=> (>= 10000 (x978 256)) (= (x994 (x978 256)) (x346 (x978 256)))))
(assert (= (x127 (x695 x405 1)) (+ 1 (x127 x405))))
(assert (= (x127 (x695 x558 1)) (+ 1 (x127 x558))))
(assert (x546 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x172 x205))
(assert (= x84 (and x121 x829)))
(assert (= x667 (=> (and (or (not x866) (and (and (= (x174 x842 x436) x236) (= (mod (* x924 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x872) (= (x316 (+ x252 x86)) x897) (= x924 (x174 31 x911)) (= x436 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x694 115792089237316195423570985008687907853269984665640564039457584007913129639935 x872))) (= (x734 x897) x842)) x866)) (= (> x911 x175) x866)) x465)))
(assert (x546 x842))
(assert (= (and x655 (not x479)) x407))
(assert (x172 x938))
(assert (= x740 x328))
(assert (= 0 (x25 x118)))
(assert (= (x1007 (x316 (+ 64 x696))) (x127 (x346 (x1007 (x316 (+ 64 x696)))))))
(assert (x172 x568))
(assert (= (x127 (x695 x980 x125)) (+ (x127 x980) x125)))
(assert (x728 (x566 (x316 (+ 160 x37)))))
(assert (x971 x487))
(assert (x172 x468))
(assert (x172 x258))
(assert (= x65 (and x727 (not x801))))
(assert (= (and (not x874) x71) x304))
(assert (x172 x688))
(assert (= (and (not x802) x373) x122))
(assert (x546 x875))
(assert (x172 x401))
(assert (x172 x21))
(assert (= (x25 x225) 0))
(assert (x172 x294))
(assert (x425 x332 x901))
(assert (= (x127 (x346 (x1007 (x316 (+ x696 96))))) (x1007 (x316 (+ x696 96)))))
(assert (x172 x220))
(assert (x823 x115))
(assert (= (and x616 x764) x644))
(assert (= x744 (and x968 x948)))
(assert (x546 x641))
(assert (= (x127 (x994 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x655 (and x1019 x66)))
(assert (= (and (not x90) x449) x526))
(assert (x172 x870))
(assert (x172 x191))
(assert (x172 x458))
(assert (x546 x141))
(assert (= (x994 1461501637330902918203684832716283019655932542975) (x346 1461501637330902918203684832716283019655932542975)))
(assert (x172 x176))
(assert (x172 x716))
(assert (x172 x379))
(assert (= x96 (and x367 (not x1012))))
(assert (= (x346 (x127 x647)) x647))
(assert (x728 (x566 (x316 (+ 96 x37)))))
(assert (x728 (x161 (x316 (+ 96 x4)))))
(assert (=> (<= (x384 192) 10000) (= (x994 (x384 192)) (x346 (x384 192)))))
(assert (x172 x418))
(assert (x971 x234))
(assert (x172 x626))
(assert (x172 x530))
(assert (x172 x951))
(assert (x912 x290))
(assert (not x387))
(assert (= x71 (and x935 x389)))
(assert (=> (>= 10000 (x161 (x316 (+ 160 x4)))) (= (x346 (x161 (x316 (+ x4 160)))) (x994 (x161 (x316 (+ x4 160)))))))
(assert (x172 x905))
(assert (x728 (x1007 x696)))
(assert (x546 x332))
(assert (= x142 (or x557 x817)))
(assert (x546 x401))
(assert (x971 x334))
(assert (= (or x156 x116) x303))
(assert (x172 x989))
(assert (x971 x989))
(assert (= (and x985 (not x254)) x632))
(assert (x172 x388))
(assert (x172 x906))
(assert (x172 x719))
(assert (= (x346 (x127 x284)) x284))
(assert (x912 x626))
(assert (= x580 (or x542 x164)))
(assert (= x561 x891))
(assert (x856 x741))
(assert (x13 x849))
(assert (x728 (x161 (x316 (+ 192 x4)))))
(assert (= (x127 (x346 (x978 256))) (x978 256)))
(assert (= (x1007 (x316 (+ x696 192))) (x127 (x346 (x1007 (x316 (+ x696 192)))))))
(assert (x172 x773))
(assert (x728 (x566 (x316 (+ 64 x37)))))
(assert (= (x1007 (x316 (+ 160 x696))) (x127 (x346 (x1007 (x316 (+ 160 x696)))))))
(assert (x172 x862))
(assert (= (=> (= (= x647 (x994 0)) x229) (and (=> (and (and (and (= x625 (x316 (+ x196 4))) (= x941 (< 0 x951))) (or (and (and (< x651 4294967296) (= 1 x242)) x941) (and (not x941) (= x242 x951)))) (not x229)) x424) (=> (and (and (= (x694 x171 192) x190) (= x196 x890)) x229) x450))) x792))
(assert (= (or x320 x708 x114) x338))
(assert (= x869 (and x504 (not x724))))
(assert (= (x161 (x316 (+ x4 128))) (x127 (x346 (x161 (x316 (+ x4 128)))))))
(assert (x728 (x1007 (x316 (+ 128 x696)))))
(assert (x172 x1022))
(assert (x172 x832))
(assert (= x40 (and x259 x333)))
(assert (x728 (x978 320)))
(assert (= x1023 (=> (= x183 (not (< 128 x366))) (and x183 x588))))
(assert (= (and x202 x385) x578))
(assert (= x727 (and x55 x896)))
(assert (x546 x849))
(assert (x172 x332))
(assert (= (x127 (x346 (x384 256))) (x384 256)))
(assert (= x904 (and (not x435) x122)))
(assert (x172 x890))
(assert (= x616 (and x138 x208)))
(assert (= (or x315 x392) x991))
(assert (= x679 (and x1025 x768)))
(assert (x172 x235))
(assert (= (and x120 x229) x973))
(assert (x172 x796))
(assert (= x231 (=> (and (or x745 (not x745)) (= (= x791 0) x745)) x386)))
(assert (= x790 (and (not x970) x972)))
(assert (= x794 (and x40 (not x126))))
(assert (x172 x1020))
(assert (x172 x29))
(assert (= (x25 x37) 0))
(assert (x172 x358))
(assert (= (x25 (x316 (+ x37 192))) 0))
(assert (x172 x958))
(assert (x172 x46))
(assert (= x922 (=> (and (= x596 (<= x892 224)) (= (x316 (+ 1 x260)) x4)) (and (=> (= (ite (>= 32 x892) (x726 (x346 (x161 x4)) 0) (ite (>= 64 x892) (x375 (x346 (x161 x4)) (x346 (x161 (x316 (+ 32 x4)))) 0) (ite (<= x892 96) (x541 (x346 (x161 x4)) (x346 (x161 (x316 (+ 32 x4)))) (x346 (x161 (x316 (+ 64 x4)))) 0) (ite (>= 128 x892) (x502 (x346 (x161 x4)) (x346 (x161 (x316 (+ 32 x4)))) (x346 (x161 (x316 (+ x4 64)))) (x346 (x161 (x316 (+ x4 96)))) 0) (ite (>= 160 x892) (x421 (x346 (x161 x4)) (x346 (x161 (x316 (+ x4 32)))) (x346 (x161 (x316 (+ 64 x4)))) (x346 (x161 (x316 (+ 96 x4)))) (x346 (x161 (x316 (+ x4 128)))) 0) (ite (>= 192 x892) (x656 (x346 (x161 x4)) (x346 (x161 (x316 (+ x4 32)))) (x346 (x161 (x316 (+ x4 64)))) (x346 (x161 (x316 (+ x4 96)))) (x346 (x161 (x316 (+ 128 x4)))) (x346 (x161 (x316 (+ 160 x4)))) 0) (ite (<= x892 224) (x76 (x346 (x161 x4)) (x346 (x161 (x316 (+ 32 x4)))) (x346 (x161 (x316 (+ x4 64)))) (x346 (x161 (x316 (+ x4 96)))) (x346 (x161 (x316 (+ 128 x4)))) (x346 (x161 (x316 (+ x4 160)))) (x346 (x161 (x316 (+ x4 192)))) 0) (x346 x516)))))))) x151) x39) x596))))
(assert (=> (<= x989 10000) (= (x346 x989) (x994 x989))))
(assert (x172 x510))
(assert (x546 127))
(assert (= (or x372 x1018) x514))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x127 (x994 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x172 x710))
(assert (= (and (not x66) x1019) x817))
(assert (x172 x215))
(assert (x172 x579))
(assert (= (x346 (x127 x165)) x165))
(assert (= (and x270 x790) x983))
(assert (= x180 (and x169 (not x749))))
(assert (= (x346 65537) (x994 65537)))
(assert (x172 x334))
(assert (x172 x16))
(check-sat)
(exit)