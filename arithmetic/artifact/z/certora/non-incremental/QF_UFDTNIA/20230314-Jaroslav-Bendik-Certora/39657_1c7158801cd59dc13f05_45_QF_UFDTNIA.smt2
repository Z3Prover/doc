(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x662 0)) (((x154 (x578 x662) (x960 Int)) (x1004 (x323 Int)) (x449 (x448 x662) (x406 x662) (x1001 Int)))))
(declare-fun x918 () Int)
(declare-fun x831 () Bool)
(declare-fun x796 () Bool)
(declare-fun x983 () Bool)
(declare-fun x736 () Int)
(declare-fun x821 () Int)
(declare-fun x181 () Bool)
(declare-fun x839 () Int)
(declare-fun x410 () Bool)
(declare-fun x367 () Int)
(declare-fun x324 () Int)
(declare-fun x529 () Int)
(declare-fun x843 () Bool)
(declare-fun x635 () Bool)
(declare-fun x17 () Bool)
(declare-fun x320 () Bool)
(declare-fun x793 () Bool)
(declare-fun x442 () Int)
(declare-fun x475 () Bool)
(declare-fun x948 () Bool)
(declare-fun x460 () Int)
(declare-fun x26 () Bool)
(declare-fun x145 () Bool)
(declare-fun x615 () Bool)
(declare-fun x83 () Bool)
(declare-fun x414 () Bool)
(declare-fun x63 () Bool)
(declare-fun x167 () Bool)
(declare-fun x549 () Int)
(declare-fun x566 () Bool)
(declare-fun x648 () Bool)
(declare-fun x982 () Bool)
(declare-fun x956 () Bool)
(declare-fun x227 () Bool)
(declare-fun x866 () Int)
(declare-fun x476 () Bool)
(declare-fun x644 () Bool)
(declare-fun x86 () Bool)
(declare-fun x738 () Bool)
(declare-fun x380 () Bool)
(declare-fun x944 () Int)
(declare-fun x435 () Int)
(declare-fun x837 () Bool)
(declare-fun x465 () Bool)
(declare-fun x613 () Bool)
(declare-fun x23 () Bool)
(declare-fun x288 () Bool)
(declare-fun x760 () Int)
(declare-fun x53 () Int)
(declare-fun x819 () Bool)
(declare-fun x1006 () Int)
(declare-fun x508 () Int)
(declare-fun x1018 (Int) Int)
(declare-fun x740 () Bool)
(declare-fun x496 () Bool)
(declare-fun x374 () Int)
(declare-fun x407 () Int)
(declare-fun x390 () Bool)
(declare-fun x183 () Int)
(declare-fun x992 () Int)
(declare-fun x42 () Bool)
(declare-fun x915 () Bool)
(declare-fun x44 () Int)
(declare-fun x327 () Bool)
(declare-fun x136 () Bool)
(declare-fun x190 () Bool)
(declare-fun x382 () Bool)
(declare-fun x502 () Int)
(declare-fun x977 () Int)
(declare-fun x27 () Bool)
(declare-fun x532 () Bool)
(declare-fun x984 () Bool)
(declare-fun x949 () Bool)
(declare-fun x958 () Int)
(declare-fun x363 () Bool)
(declare-fun x751 () Bool)
(declare-fun x338 () Bool)
(declare-fun x712 () Int)
(declare-fun x474 () Int)
(declare-fun x750 () Int)
(declare-fun x428 () Int)
(declare-fun x472 () Int)
(declare-fun x951 () Bool)
(declare-fun x967 () Bool)
(declare-fun x602 () Bool)
(declare-fun x371 () Int)
(declare-fun x194 () Bool)
(declare-fun x331 () Int)
(declare-fun x604 () Int)
(declare-fun x693 () Int)
(declare-fun x485 () Int)
(declare-fun x462 () Int)
(declare-fun x833 () Bool)
(declare-fun x106 () Int)
(declare-fun x282 () Bool)
(declare-fun x710 () Bool)
(declare-fun x46 () Bool)
(declare-fun x999 () Int)
(declare-fun x201 () Int)
(declare-fun x220 () Bool)
(declare-fun x507 () Int)
(declare-fun x916 () Int)
(declare-fun x609 () Int)
(declare-fun x224 () Int)
(declare-fun x499 () Int)
(declare-fun x1005 () Int)
(declare-fun x82 () Int)
(declare-fun x528 (Int) Int)
(declare-fun x661 () Bool)
(declare-fun x512 () Bool)
(declare-fun x141 () Int)
(declare-fun x766 () Int)
(declare-fun x253 () Int)
(declare-fun x834 () Bool)
(declare-fun x995 () Bool)
(declare-fun x292 () Int)
(declare-fun x111 () Int)
(declare-fun x818 () Bool)
(declare-fun x297 () Int)
(declare-fun x675 () Int)
(declare-fun x1007 () Int)
(declare-fun x412 () Int)
(declare-fun x636 () Bool)
(declare-fun x264 () Bool)
(declare-fun x873 () Bool)
(declare-fun x588 () Int)
(declare-fun x782 () Int)
(declare-fun x304 () Int)
(declare-fun x332 () Int)
(declare-fun x650 () Bool)
(declare-fun x506 () Bool)
(declare-fun x778 () Int)
(declare-fun x185 () Int)
(declare-fun x674 () Int)
(declare-fun x558 () Bool)
(declare-fun x739 () Int)
(declare-fun x646 () Int)
(declare-fun x192 () Int)
(declare-fun x690 () Int)
(declare-fun x87 () Int)
(declare-fun x375 () Int)
(declare-fun x668 () Int)
(declare-fun x114 () Int)
(declare-fun x571 () Bool)
(declare-fun x211 () Bool)
(declare-fun x153 () Int)
(declare-fun x391 () Int)
(declare-fun x903 () Int)
(declare-fun x408 () Int)
(declare-fun x557 () Bool)
(declare-fun x5 () Int)
(declare-fun x344 () Bool)
(declare-fun x235 () Bool)
(declare-fun x348 () Bool)
(declare-fun x287 () Int)
(declare-fun x149 () Int)
(declare-fun x737 () Bool)
(declare-fun x355 () Bool)
(declare-fun x262 () Bool)
(declare-fun x871 () Int)
(declare-fun x205 () Bool)
(declare-fun x894 () Bool)
(declare-fun x874 () Int)
(declare-fun x307 () Bool)
(declare-fun x743 () Int)
(declare-fun x214 () Int)
(declare-fun x799 () Int)
(declare-fun x864 () Int)
(declare-fun x639 () Int)
(declare-fun x276 () Int)
(declare-fun x195 () Bool)
(declare-fun x453 () Int)
(declare-fun x1003 () Int)
(declare-fun x19 () Bool)
(declare-fun x587 () Int)
(declare-fun x75 () Bool)
(declare-fun x396 () Bool)
(declare-fun x928 () Int)
(declare-fun x617 () Int)
(declare-fun x56 () Bool)
(declare-fun x678 () Int)
(declare-fun x318 () Int)
(declare-fun x294 () Int)
(declare-fun x895 () Int)
(declare-fun x510 () Bool)
(declare-fun x660 () Int)
(declare-fun x165 () Bool)
(declare-fun x333 () Bool)
(declare-fun x484 () Bool)
(declare-fun x687 () Bool)
(declare-fun x817 () Bool)
(declare-fun x961 () Bool)
(declare-fun x457 () Int)
(declare-fun x711 () Bool)
(declare-fun x605 () Int)
(declare-fun x726 (x662) Int)
(declare-fun x417 () Int)
(declare-fun x638 () Bool)
(declare-fun x776 () Int)
(declare-fun x631 (Int) Int)
(declare-fun x947 () Bool)
(declare-fun x541 () Int)
(declare-fun x78 () Int)
(declare-fun x923 () Bool)
(declare-fun x925 () Int)
(declare-fun x212 () Bool)
(declare-fun x135 () Int)
(declare-fun x444 () Bool)
(declare-fun x622 () Bool)
(declare-fun x164 () Int)
(declare-fun x73 () Bool)
(declare-fun x937 () Int)
(declare-fun x842 () Int)
(declare-fun x870 () Int)
(declare-fun x806 () Int)
(declare-fun x861 () Int)
(declare-fun x836 () Int)
(declare-fun x15 () Int)
(declare-fun x358 () Bool)
(declare-fun x718 () Int)
(declare-fun x1017 () Bool)
(declare-fun x316 () Int)
(declare-fun x418 () Int)
(declare-fun x58 () Bool)
(declare-fun x439 () Int)
(declare-fun x161 () Bool)
(declare-fun x8 () Int)
(declare-fun x542 () Int)
(declare-fun x715 () Bool)
(declare-fun x624 () Int)
(declare-fun x848 () Bool)
(declare-fun x501 () Bool)
(declare-fun x243 () Int)
(declare-fun x600 () Bool)
(declare-fun x372 () Bool)
(declare-fun x1010 () Int)
(declare-fun x858 () Int)
(declare-fun x735 (Int) Int)
(declare-fun x242 () Int)
(declare-fun x608 () Bool)
(declare-fun x456 () Bool)
(declare-fun x780 () Int)
(declare-fun x564 () Bool)
(declare-fun x777 () Int)
(declare-fun x1030 () Bool)
(declare-fun x830 (Int) Int)
(declare-fun x934 () Int)
(declare-fun x692 () Bool)
(declare-fun x386 () Int)
(declare-fun x880 () Bool)
(declare-fun x671 () Bool)
(declare-fun x392 () Int)
(declare-fun x413 () Int)
(declare-fun x69 () Bool)
(declare-fun x963 () Bool)
(declare-fun x234 () Int)
(declare-fun x641 () Bool)
(declare-fun x175 () Int)
(declare-fun x94 () Bool)
(declare-fun x717 () Int)
(declare-fun x847 () Int)
(declare-fun x905 () Int)
(declare-fun x753 () Bool)
(declare-fun x241 () Bool)
(declare-fun x112 () Int)
(declare-fun x545 () Bool)
(declare-fun x599 () Bool)
(declare-fun x329 () Bool)
(declare-fun x569 (Int Int) Int)
(declare-fun x278 () Int)
(declare-fun x217 () Bool)
(declare-fun x415 () Int)
(declare-fun x911 () Int)
(declare-fun x280 () Bool)
(declare-fun x38 () Bool)
(declare-fun x370 () Bool)
(declare-fun x256 () Bool)
(declare-fun x404 () Int)
(declare-fun x129 () Int)
(declare-fun x425 () Int)
(declare-fun x284 () Bool)
(declare-fun x852 () Int)
(declare-fun x9 () Bool)
(declare-fun x664 () Int)
(declare-fun x656 () Bool)
(declare-fun x142 () Int)
(declare-fun x884 () Int)
(declare-fun x626 () Int)
(declare-fun x252 () Bool)
(declare-fun x917 () Int)
(declare-fun x699 () Bool)
(declare-fun x667 () Int)
(declare-fun x359 () Bool)
(declare-fun x773 () Bool)
(declare-fun x429 () Int)
(declare-fun x50 () Int)
(declare-fun x445 () Bool)
(declare-fun x579 () Int)
(declare-fun x704 () Bool)
(declare-fun x319 () Bool)
(declare-fun x987 () Bool)
(declare-fun x481 () Int)
(declare-fun x85 () Int)
(declare-fun x887 () Int)
(declare-fun x7 () Bool)
(declare-fun x985 (x662) Int)
(declare-fun x521 () Int)
(declare-fun x517 () Bool)
(declare-fun x552 () Int)
(declare-fun x77 () Int)
(declare-fun x684 () Bool)
(declare-fun x137 () Bool)
(declare-fun x519 () Bool)
(declare-fun x659 () Int)
(declare-fun x654 () Int)
(declare-fun x1021 () Int)
(declare-fun x500 () Int)
(declare-fun x603 () Bool)
(declare-fun x313 () Int)
(declare-fun x902 () Int)
(declare-fun x277 () Int)
(declare-fun x395 () Int)
(declare-fun x576 () Int)
(declare-fun x525 () Bool)
(declare-fun x893 () Int)
(declare-fun x218 () Bool)
(declare-fun x573 () Bool)
(declare-fun x310 () Bool)
(declare-fun x172 () Bool)
(declare-fun x309 () Bool)
(declare-fun x305 () Int)
(declare-fun x261 () Bool)
(declare-fun x346 () Int)
(declare-fun x846 () Bool)
(declare-fun x589 () Bool)
(declare-fun x745 () Int)
(declare-fun x607 () Bool)
(declare-fun x469 () Int)
(declare-fun x759 (x662) Int)
(declare-fun x548 () Int)
(declare-fun x441 () Bool)
(declare-fun x702 () Bool)
(declare-fun x437 () Int)
(declare-fun x263 () Int)
(declare-fun x627 () Bool)
(declare-fun x771 () Int)
(declare-fun x994 () Bool)
(declare-fun x785 () Int)
(declare-fun x586 () Bool)
(declare-fun x647 () Int)
(declare-fun x251 () Int)
(declare-fun x616 () Bool)
(declare-fun x162 () Bool)
(declare-fun x150 () Int)
(declare-fun x245 () Int)
(declare-fun x98 () Int)
(declare-fun x366 () Int)
(declare-fun x222 () Int)
(declare-fun x1011 () Bool)
(declare-fun x270 () Int)
(declare-fun x879 () Int)
(declare-fun x21 () Int)
(declare-fun x835 () Bool)
(declare-fun x898 () Int)
(declare-fun x618 () Bool)
(declare-fun x400 () Bool)
(declare-fun x628 () Int)
(declare-fun x328 () Bool)
(declare-fun x801 () Int)
(declare-fun x186 () Bool)
(declare-fun x503 () Int)
(declare-fun x325 () Bool)
(declare-fun x689 () Int)
(declare-fun x176 () Bool)
(declare-fun x810 () Bool)
(declare-fun x67 () Int)
(declare-fun x1022 () Int)
(declare-fun x832 () Int)
(declare-fun x747 () Bool)
(declare-fun x935 () Int)
(declare-fun x640 () Int)
(declare-fun x62 () Int)
(declare-fun x978 () Int)
(declare-fun x709 () Int)
(declare-fun x494 () Bool)
(declare-fun x784 () Bool)
(declare-fun x789 () Int)
(declare-fun x401 () Int)
(declare-fun x91 () Bool)
(declare-fun x523 () Bool)
(declare-fun x34 () Int)
(declare-fun x405 () Bool)
(declare-fun x681 () Int)
(declare-fun x849 () Int)
(declare-fun x426 () Int)
(declare-fun x585 () Bool)
(declare-fun x467 () Bool)
(declare-fun x157 () Bool)
(declare-fun x239 () Bool)
(declare-fun x293 () Int)
(declare-fun x155 () Int)
(declare-fun x707 () Bool)
(declare-fun x867 () Int)
(declare-fun x534 () Bool)
(declare-fun x255 () Bool)
(declare-fun x35 () Int)
(declare-fun x725 () Bool)
(declare-fun x630 (Int) Int)
(declare-fun x148 () Int)
(declare-fun x885 () Bool)
(declare-fun x591 () Int)
(declare-fun x856 () Int)
(declare-fun x398 () Bool)
(declare-fun x29 () Bool)
(declare-fun x931 () Int)
(declare-fun x74 () Bool)
(declare-fun x754 () Bool)
(declare-fun x509 () Bool)
(declare-fun x353 () Int)
(declare-fun x544 () Int)
(declare-fun x658 () Int)
(declare-fun x703 () Int)
(declare-fun x868 () Bool)
(declare-fun x809 () Bool)
(declare-fun x802 () Bool)
(declare-fun x409 () Bool)
(declare-fun x131 () Bool)
(declare-fun x524 () Bool)
(declare-fun x364 () Bool)
(declare-fun x728 () Bool)
(declare-fun x504 () Int)
(declare-fun x596 () Bool)
(declare-fun x394 () Int)
(declare-fun x590 () Bool)
(declare-fun x171 () Bool)
(declare-fun x783 () Bool)
(declare-fun x706 () Int)
(declare-fun x490 () Bool)
(declare-fun x335 () Int)
(declare-fun x666 () Bool)
(declare-fun x800 () Bool)
(declare-fun x184 () Int)
(declare-fun x708 () Int)
(declare-fun x37 () Bool)
(declare-fun x559 () Int)
(declare-fun x651 () Int)
(declare-fun x562 () Int)
(declare-fun x731 () Int)
(declare-fun x913 () Int)
(declare-fun x296 () Int)
(declare-fun x537 () Bool)
(declare-fun x990 () Int)
(declare-fun x825 () Bool)
(declare-fun x199 () Int)
(declare-fun x265 () Bool)
(declare-fun x168 () Int)
(declare-fun x102 () Bool)
(declare-fun x411 () Int)
(declare-fun x452 () Bool)
(declare-fun x423 () Bool)
(declare-fun x816 () Bool)
(declare-fun x377 () Int)
(declare-fun x952 () Int)
(declare-fun x889 () Bool)
(declare-fun x1026 () Int)
(declare-fun x581 () Int)
(declare-fun x295 () Bool)
(declare-fun x81 (x662) Int)
(declare-fun x910 () Bool)
(declare-fun x788 () Bool)
(declare-fun x694 () Int)
(declare-fun x138 () Bool)
(declare-fun x742 () Bool)
(declare-fun x51 () Bool)
(declare-fun x402 () Int)
(declare-fun x378 () Bool)
(declare-fun x820 () Int)
(declare-fun x493 () Int)
(declare-fun x611 (Int) Int)
(declare-fun x1009 () Int)
(declare-fun x118 () Bool)
(declare-fun x345 () Int)
(declare-fun x957 () Int)
(declare-fun x582 () Int)
(declare-fun x229 () Bool)
(declare-fun x1000 () Bool)
(declare-fun x236 () Int)
(declare-fun x1016 () Bool)
(declare-fun x974 () Bool)
(declare-fun x22 () Bool)
(declare-fun x612 () Bool)
(declare-fun x206 () Bool)
(declare-fun x857 () Int)
(declare-fun x65 () Int)
(declare-fun x317 () Int)
(declare-fun x110 () Bool)
(declare-fun x511 () Bool)
(declare-fun x463 () Int)
(declare-fun x535 () Int)
(declare-fun x231 () Int)
(declare-fun x341 () Bool)
(declare-fun x72 () Int)
(declare-fun x637 () Bool)
(declare-fun x530 () Int)
(declare-fun x100 () Int)
(declare-fun x822 () Int)
(declare-fun x620 () Int)
(declare-fun x979 () Bool)
(declare-fun x855 () Bool)
(declare-fun x513 () Int)
(declare-fun x634 () Int)
(declare-fun x39 () Bool)
(declare-fun x685 () Bool)
(declare-fun x583 (Int) Int)
(declare-fun x339 () Int)
(declare-fun x103 () Int)
(declare-fun x330 () Bool)
(declare-fun x383 () Int)
(declare-fun x158 () Int)
(declare-fun x379 (Int) Int)
(declare-fun x368 () Int)
(declare-fun x226 () Bool)
(declare-fun x187 () Int)
(declare-fun x52 () Bool)
(declare-fun x89 () Bool)
(declare-fun x285 () Int)
(declare-fun x18 () Int)
(declare-fun x373 () Bool)
(declare-fun x470 () Bool)
(declare-fun x621 (Int) Int)
(declare-fun x250 () Bool)
(declare-fun x595 () Bool)
(declare-fun x12 () Bool)
(declare-fun x177 () Bool)
(declare-fun x230 () Bool)
(declare-fun x104 () Int)
(declare-fun x308 () Int)
(declare-fun x47 () Bool)
(declare-fun x696 () Bool)
(declare-fun x828 () Bool)
(declare-fun x786 () Int)
(declare-fun x95 () Bool)
(declare-fun x514 () Int)
(declare-fun x787 () Int)
(declare-fun x955 (Int Int) Int)
(declare-fun x80 () Int)
(declare-fun x440 () Bool)
(declare-fun x538 () Bool)
(declare-fun x522 () Bool)
(declare-fun x804 () Int)
(declare-fun x882 () Int)
(declare-fun x1020 () Int)
(declare-fun x54 () Int)
(declare-fun x701 () Bool)
(declare-fun x933 () Int)
(declare-fun x434 () Int)
(declare-fun x969 () Bool)
(declare-fun x676 () Int)
(declare-fun x427 () Bool)
(declare-fun x306 () Bool)
(declare-fun x850 () Bool)
(declare-fun x741 () Int)
(declare-fun x446 () Int)
(declare-fun x826 () Int)
(declare-fun x43 () Int)
(declare-fun x84 () Bool)
(declare-fun x993 (Int) x662)
(declare-fun x140 () Int)
(declare-fun x393 () Int)
(declare-fun x483 () Bool)
(declare-fun x200 () Int)
(declare-fun x970 () Int)
(declare-fun x909 () Int)
(declare-fun x1028 () Bool)
(declare-fun x515 () Bool)
(declare-fun x572 () Bool)
(declare-fun x540 () Int)
(declare-fun x96 () Int)
(declare-fun x431 () Int)
(declare-fun x208 () Bool)
(declare-fun x193 () Bool)
(declare-fun x1029 () Int)
(declare-fun x451 () Bool)
(declare-fun x387 () Bool)
(declare-fun x606 () Int)
(declare-fun x424 () Bool)
(declare-fun x430 (x662) Int)
(declare-fun x105 () Bool)
(declare-fun x213 () Bool)
(declare-fun x779 () Int)
(declare-fun x166 () Int)
(declare-fun x48 () Int)
(declare-fun x860 () Bool)
(declare-fun x748 () Int)
(declare-fun x143 () Int)
(declare-fun x173 () Bool)
(declare-fun x468 () Bool)
(declare-fun x770 () Bool)
(declare-fun x303 () Int)
(declare-fun x290 () Int)
(declare-fun x179 () Bool)
(declare-fun x610 () Int)
(declare-fun x247 () Bool)
(declare-fun x130 () Bool)
(declare-fun x823 () Bool)
(declare-fun x966 (x662) Int)
(declare-fun x258 () Int)
(declare-fun x716 () Bool)
(declare-fun x466 () Bool)
(declare-fun x471 () Int)
(declare-fun x907 () Int)
(declare-fun x92 () Int)
(declare-fun x389 () Bool)
(declare-fun x575 () Int)
(declare-fun x269 () Int)
(declare-fun x886 () Bool)
(declare-fun x774 () Int)
(declare-fun x942 () Int)
(declare-fun x719 () Bool)
(declare-fun x178 () Bool)
(declare-fun x714 () Int)
(declare-fun x792 () Int)
(declare-fun x66 () Bool)
(declare-fun x682 () Bool)
(declare-fun x268 () Bool)
(declare-fun x59 () Int)
(declare-fun x553 () Bool)
(declare-fun x998 () Int)
(declare-fun x4 () Int)
(declare-fun x291 () Bool)
(declare-fun x147 () Bool)
(declare-fun x551 () Bool)
(declare-fun x988 () Bool)
(declare-fun x281 () Bool)
(declare-fun x340 () Bool)
(declare-fun x286 () Bool)
(declare-fun x814 () Int)
(declare-fun x385 () Bool)
(declare-fun x932 () Int)
(declare-fun x121 () Int)
(declare-fun x342 () Int)
(declare-fun x127 () Int)
(declare-fun x598 () Bool)
(declare-fun x156 () Int)
(declare-fun x455 () Bool)
(declare-fun x695 () Bool)
(declare-fun x207 () Int)
(declare-fun x259 () Int)
(declare-fun x720 () Int)
(declare-fun x139 () Bool)
(declare-fun x232 () Bool)
(declare-fun x713 (x662) Int)
(declare-fun x57 () Int)
(declare-fun x203 () Bool)
(declare-fun x869 () Bool)
(declare-fun x567 () Bool)
(declare-fun x767 () Int)
(declare-fun x271 () Bool)
(declare-fun x756 () Bool)
(declare-fun x919 () Bool)
(declare-fun x249 () Int)
(declare-fun x518 () Bool)
(declare-fun x352 () Bool)
(declare-fun x90 () Bool)
(declare-fun x563 () Int)
(declare-fun x274 () Int)
(declare-fun x943 () Int)
(declare-fun x729 () Int)
(declare-fun x875 () Bool)
(declare-fun x495 () Bool)
(declare-fun x686 () Int)
(declare-fun x924 () Int)
(declare-fun x764 () Bool)
(declare-fun x1025 () Bool)
(declare-fun x433 () Bool)
(declare-fun x283 () Int)
(declare-fun x936 () Int)
(declare-fun x133 () Bool)
(declare-fun x458 () Bool)
(declare-fun x204 () Bool)
(declare-fun x216 () Int)
(declare-fun x962 () Bool)
(declare-fun x888 () Int)
(declare-fun x347 () Int)
(declare-fun x33 () Bool)
(declare-fun x914 () Int)
(declare-fun x625 (Int) Int)
(declare-fun x93 () Int)
(declare-fun x991 (Int) Int)
(declare-fun x795 () Bool)
(declare-fun x492 () Bool)
(declare-fun x343 () Int)
(declare-fun x321 () Bool)
(declare-fun x899 () Int)
(declare-fun x419 () Bool)
(declare-fun x623 () Int)
(declare-fun x488 () Int)
(declare-fun x568 () Int)
(declare-fun x180 () Int)
(declare-fun x68 () Int)
(declare-fun x99 () Int)
(declare-fun x31 () Int)
(declare-fun x763 () Bool)
(declare-fun x815 () Int)
(declare-fun x101 () Bool)
(declare-fun x892 () Int)
(declare-fun x312 () Int)
(declare-fun x844 () Int)
(declare-fun x746 () Int)
(declare-fun x592 () Bool)
(declare-fun x197 () Bool)
(declare-fun x755 () Int)
(declare-fun x797 () Int)
(declare-fun x555 () Int)
(declare-fun x381 () Bool)
(declare-fun x159 () Int)
(declare-fun x841 () Bool)
(declare-fun x1032 () Int)
(declare-fun x116 () Int)
(declare-fun x808 () Bool)
(declare-fun x299 () Bool)
(declare-fun x107 () Bool)
(declare-fun x24 () Bool)
(declare-fun x845 () Int)
(declare-fun x539 () Bool)
(declare-fun x930 () Bool)
(declare-fun x11 () Bool)
(declare-fun x421 () Int)
(declare-fun x853 () Bool)
(declare-fun x219 () Bool)
(declare-fun x479 () Bool)
(declare-fun x55 () Bool)
(declare-fun x824 () Bool)
(declare-fun x643 () Int)
(declare-fun x1015 () Bool)
(declare-fun x584 () Int)
(declare-fun x1013 () Int)
(declare-fun x813 () Bool)
(declare-fun x447 () Bool)
(declare-fun x240 (Int) Int)
(declare-fun x221 () Bool)
(declare-fun x146 () Bool)
(declare-fun x732 () Bool)
(declare-fun x115 () Int)
(declare-fun x223 () Int)
(declare-fun x473 () Int)
(declare-fun x357 () Int)
(declare-fun x547 () Bool)
(declare-fun x491 () Bool)
(declare-fun x724 () Bool)
(declare-fun x260 () Int)
(declare-fun x516 () Int)
(declare-fun x794 () Bool)
(declare-fun x71 () Int)
(declare-fun x461 () Bool)
(declare-fun x597 () Bool)
(declare-fun x904 () Int)
(declare-fun x202 () Bool)
(declare-fun x975 () Bool)
(declare-fun x758 () Int)
(declare-fun x722 () Bool)
(declare-fun x665 () Int)
(declare-fun x189 () Int)
(declare-fun x921 () Bool)
(declare-fun x546 () Bool)
(declare-fun x108 () Bool)
(declare-fun x482 () Int)
(declare-fun x279 () Int)
(declare-fun x151 () Int)
(declare-fun x840 () Bool)
(declare-fun x248 () Bool)
(declare-fun x361 () Int)
(declare-fun x113 () Int)
(declare-fun x890 () Int)
(declare-fun x876 () Bool)
(declare-fun x526 () Int)
(declare-fun x1002 () Bool)
(declare-fun x593 () Int)
(declare-fun x862 () Int)
(declare-fun x705 () Int)
(declare-fun x350 () Int)
(declare-fun x901 () Int)
(declare-fun x2 () Bool)
(declare-fun x798 (Int Int) Int)
(declare-fun x727 () Bool)
(declare-fun x642 () Int)
(declare-fun x152 () Int)
(declare-fun x422 () Bool)
(declare-fun x1014 () Int)
(declare-fun x723 () Int)
(declare-fun x761 () Int)
(declare-fun x298 () Int)
(declare-fun x436 () Int)
(declare-fun x244 () Bool)
(declare-fun x698 () Int)
(declare-fun x420 () Int)
(declare-fun x3 () Bool)
(declare-fun x49 () Bool)
(declare-fun x432 () Bool)
(declare-fun x673 () Bool)
(declare-fun x672 () Int)
(declare-fun x768 () Int)
(declare-fun x554 () Bool)
(declare-fun x132 () Bool)
(declare-fun x669 () Int)
(declare-fun x938 () Int)
(declare-fun x765 () Int)
(declare-fun x28 () Bool)
(declare-fun x326 () Int)
(declare-fun x730 () Int)
(declare-fun x45 () Int)
(declare-fun x556 () Bool)
(declare-fun x922 () Bool)
(declare-fun x812 () Bool)
(declare-fun x40 () Bool)
(declare-fun x989 () Bool)
(declare-fun x775 () Int)
(declare-fun x169 () Int)
(declare-fun x498 () Int)
(declare-fun x986 () Int)
(declare-fun x225 () Int)
(declare-fun x489 () Bool)
(declare-fun x480 () Bool)
(declare-fun x851 () Bool)
(declare-fun x601 () Bool)
(declare-fun x971 () Bool)
(declare-fun x266 () Int)
(declare-fun x487 () Bool)
(declare-fun x744 () Bool)
(declare-fun x679 () Int)
(declare-fun x238 () Int)
(declare-fun x976 () Int)
(declare-fun x289 () Int)
(declare-fun x629 () Int)
(declare-fun x811 () Bool)
(declare-fun x464 () Int)
(declare-fun x64 () Bool)
(declare-fun x174 () Bool)
(declare-fun x403 () Bool)
(declare-fun x997 () Bool)
(declare-fun x533 () Bool)
(declare-fun x397 () Bool)
(declare-fun x198 () Int)
(declare-fun x677 () Int)
(declare-fun x859 () Bool)
(declare-fun x302 () Int)
(declare-fun x97 () Bool)
(declare-fun x246 () Bool)
(declare-fun x6 () Bool)
(declare-fun x120 () Bool)
(declare-fun x210 () Int)
(declare-fun x273 () Bool)
(declare-fun x803 () Bool)
(declare-fun x322 () Bool)
(declare-fun x543 () Int)
(declare-fun x691 () Int)
(declare-fun x973 () Int)
(declare-fun x76 () Int)
(declare-fun x32 () Int)
(declare-fun x697 () Int)
(declare-fun x1024 () Int)
(declare-fun x301 () Int)
(declare-fun x632 () Int)
(declare-fun x663 () Int)
(declare-fun x109 () Int)
(declare-fun x655 () Int)
(declare-fun x649 () Int)
(declare-fun x772 () Int)
(declare-fun x968 (x662) Int)
(define-fun x863 ((x662 x662) (x337 Int)) x662 (ite ((_ is x449) x662) (x449 (x448 x662) (x406 x662) (+ x337 (x1001 x662))) (ite ((_ is x154) x662) (x154 (x578 x662) (+ x337 (x960 x662))) (x1004 (+ (x323 x662) x337)))))
(define-fun x215 ((x560 Int)) Int (ite (and (>= x560 0) (< x560 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x560 (- x560 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x36 ((x560 Int)) Int (ite (and (< x560 0) (>= x560 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x560) x560))
(define-fun x883 ((x454 Int)) Bool (and (<= 0 x454) (< x454 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x996 ((x454 Int)) Bool (and (= (x569 x454 115792089237316195423570985008687907853269984665640564039457584007913129639935) x454) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639935 x454) x454)))
(define-fun x950 ((x454 Int)) Bool (and (= (x569 x454 0) 0) (= (x569 0 x454) 0)))
(define-fun x769 ((x454 Int)) Bool (= x454 (x569 x454 x454)))
(define-fun x459 ((x454 Int)) Bool (and (x769 x454) (x996 x454) (x950 x454)))
(define-fun x953 ((x454 Int) (x384 Int)) Bool (= (x569 x454 x384) (x569 x384 x454)))
(define-fun x365 ((x454 Int) (x384 Int)) Bool (and (=> (>= x384 0) (<= (x569 x454 x384) x384)) (<= 0 (x569 x454 x384)) (=> (>= x454 0) (>= x454 (x569 x454 x384)))))
(define-fun x315 ((x454 Int) (x384 Int)) Bool (and (x365 x454 x384) (x953 x454 x384)))
(define-fun x981 ((x454 Int)) Bool (= (+ (x569 x454 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x454 32)) (mod x454 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x314 ((x454 Int)) Bool (and (x981 x454) (x315 x454 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x926 ((x454 Int)) Bool (= (x569 x454 1461501637330902918203684832716283019655932542975) (mod x454 1461501637330902918203684832716283019655932542976)))
(define-fun x10 ((x454 Int)) Bool (and (x315 x454 1461501637330902918203684832716283019655932542975) (x926 x454)))
(define-fun x25 ((x762 Int)) Int (ite (> x269 x762) (x240 x762) 0))
(define-fun x965 ((x762 Int)) Int (x631 x762))
(define-fun x805 ((x762 x662)) Int (ite (= (x993 x1024) x762) x485 (x966 x762)))
(define-fun x60 ((x762 x662)) Int (ite (= x762 (x993 x925)) x766 (x805 x762)))
(define-fun x376 ((x762 Int)) Int (ite (= x762 128) x917 (x830 x762)))
(define-fun x854 ((x762 Int)) Int (ite (and (<= 160 x762) (> (+ x917 160) x762)) (x631 (+ (- x762 160) x681)) (x376 x762)))
(define-fun x267 ((x762 Int)) Int (ite (= x762 x530) 0 (x854 x762)))
(define-fun x872 ((x762 Int)) Int (ite (= x762 x882) x867 (x267 x762)))
(define-fun x941 ((x762 Int)) Int (ite (and (>= x762 x460) (< x762 (+ x867 x460))) (x631 (+ (- x762 x460) x377)) (x872 x762)))
(define-fun x980 ((x762 Int)) Int (ite (= x141 x762) 0 (x941 x762)))
(define-fun x580 ((x762 Int)) Int (ite (= x617 x762) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x980 x762)))
(define-fun x13 ((x762 Int)) Int (ite (= x895 x762) 160 (x580 x762)))
(define-fun x196 ((x762 Int)) Int (ite (= x762 x222) x366 (x13 x762)))
(define-fun x14 ((x762 Int)) Int (ite (= x938 x762) x624 (x196 x762)))
(define-fun x807 ((x762 Int)) Int (ite (= x762 x776) x31 (x14 x762)))
(define-fun x443 ((x762 Int)) Int (ite (= x143 x762) x797 (x807 x762)))
(define-fun x877 ((x762 Int)) Int (ite (= x762 x98) x263 (x443 x762)))
(define-fun x362 ((x762 Int)) Int (ite x740 (x443 x762) (ite x522 (x807 x762) (ite x55 (x14 x762) (ite x220 (x196 x762) (x877 x762))))))
(define-fun x369 ((x762 Int)) Int (ite (= x201 x762) 0 (x362 x762)))
(define-fun x1019 ((x762 Int)) Int (ite x494 (x362 x762) (x369 x762)))
(define-fun x939 ((x762 Int)) Int (ite (= x973 x762) x879 (x1019 x762)))
(define-fun x1008 ((x762 Int)) Int (ite (= x762 x142) x1009 (x939 x762)))
(define-fun x16 ((x762 Int)) Int (ite (= x741 x762) x471 (x1008 x762)))
(define-fun x1012 ((x762 Int)) Int (ite (= x581 x762) x942 (x16 x762)))
(define-fun x117 ((x762 Int)) Int (ite (= x762 x936) x296 (x1012 x762)))
(define-fun x182 ((x762 Int)) Int (ite (= x317 x762) x383 (x117 x762)))
(define-fun x478 ((x762 Int)) Int (ite x850 (x117 x762) (ite x859 (x1012 x762) (ite x817 (x16 x762) (ite x613 (x1008 x762) (x182 x762))))))
(define-fun x652 ((x762 Int)) Int (ite (= x762 x720) 0 (x478 x762)))
(define-fun x356 ((x762 Int)) Int (ite x181 (x478 x762) (x652 x762)))
(define-fun x790 ((x762 Int)) Int (ite (= x762 x234) x605 (x356 x762)))
(define-fun x527 ((x762 Int)) Int (ite (= x729 x762) x168 (x790 x762)))
(define-fun x721 ((x762 Int)) Int (ite (= x928 x762) x970 (x527 x762)))
(define-fun x134 ((x762 Int)) Int (ite (= x762 x575) x474 (x721 x762)))
(define-fun x170 ((x762 Int)) Int (ite (= x762 x676) x931 (x134 x762)))
(define-fun x683 ((x762 Int)) Int (ite (= x371 x762) x562 (x170 x762)))
(define-fun x653 ((x762 Int)) Int (ite (= x762 x760) x540 (x683 x762)))
(define-fun x752 ((x762 Int)) Int (ite x178 (x683 x762) (ite x846 (x170 x762) (ite x295 (x134 x762) (ite x219 (x721 x762) (x653 x762))))))
(define-fun x781 ((x762 Int)) Int (ite (= x762 x901) x582 (x752 x762)))
(define-fun x657 ((x762 Int)) Int (ite (= x762 x694) x874 (x781 x762)))
(define-fun x160 ((x762 Int)) Int (ite (= x628 x762) x990 (x657 x762)))
(define-fun x191 ((x762 Int)) Int (ite (= x541 x762) x801 (x160 x762)))
(define-fun x881 ((x762 Int)) Int (ite (and (>= x762 x844) (> (+ x844 x801) x762)) (x631 (+ (- x762 x844) x847)) (x191 x762)))
(define-fun x163 ((x762 Int)) Int (ite (= x762 x185) 0 (x881 x762)))
(define-fun x416 ((x762 Int)) Int (ite x452 (x657 x762) (x163 x762)))
(define-fun x908 ((x762 Int)) Int (ite (= x617 x762) x905 (x416 x762)))
(define-fun x561 ((x762 Int)) Int (ite x922 (x416 x762) (ite x532 (x908 x762) (x416 x762))))
(define-fun x906 ((x762 Int)) Int (ite (= x739 x762) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x561 x762)))
(define-fun x61 ((x762 Int)) Int (ite (and (> (+ 32 x739) x762) (>= x762 x739)) (x735 (+ (- x762 x739) 0)) (x906 x762)))
(define-fun x128 ((x762 Int)) Int (ite (and (< x762 (+ 196 (x36 (- x313 196)))) (<= 196 x762)) (x416 (+ (- x762 196) (x215 (+ 196 x617)))) (x25 x762)))
(define-fun x354 ((x762 Int)) Int (ite (= x762 128) x632 (x528 x762)))
(define-fun x633 ((x762 Int)) Int (ite (and (>= x762 160) (< x762 (+ 160 x632))) (x128 (+ (- x762 160) 196)) (x354 x762)))
(define-fun x336 ((x762 Int)) Int (ite (= x892 x762) 0 (x633 x762)))
(define-fun x1027 ((x762 Int)) Int (ite (= x151 x762) x832 (x336 x762)))
(define-fun x570 ((x762 Int)) Int (ite (and (> (+ x649 x832) x762) (>= x762 x649)) (x128 (+ x304 (- x762 x649))) (x1027 x762)))
(define-fun x865 ((x762 Int)) Int (ite (= x679 x762) 0 (x570 x762)))
(define-fun x1023 ((x762 Int)) Int (ite (= x368 x762) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x865 x762)))
(define-fun x505 ((x762 Int)) Int (ite (= x368 x762) x507 (x1023 x762)))
(define-fun x497 ((x762 x662)) Int (ite (= (x993 x925) x762) x166 (x60 x762)))
(define-fun x88 ((x762 x662)) Int (ite (= x762 (x993 x587)) x59 (x497 x762)))
(define-fun x477 ((x762 Int)) Int (ite (and (>= x762 x290) (> (+ x290 0) x762)) (x630 (+ 0 (- x762 x290))) (x505 x762)))
(define-fun x565 ((x762 Int)) Int (ite x58 (x505 x762) (ite x265 (x477 x762) (x505 x762))))
(define-fun x486 ((x762 Int)) Int (ite x58 (x379 x762) (x630 x762)))
(define-fun x891 ((x762 Int)) Int (ite (= x290 x762) x183 (x565 x762)))
(define-fun x531 ((x762 Int)) Int (ite (and (>= x762 x958) (< x762 (+ x183 x958))) (x486 (+ 0 (- x762 x958))) (x891 x762)))
(define-fun x900 ((x762 x662)) Int (ite x265 (x81 x762) (x88 x762)))
(define-fun x125 ((x762 x662)) Int (ite (= (x993 x587) x762) x765 (x900 x762)))
(define-fun x122 ((x762 x662)) Int (ite (= (x993 x925) x762) x516 (x125 x762)))
(define-fun x945 ((x762 x662)) Int (ite x894 (x60 x762) (ite x58 (x60 x762) (ite x118 (x900 x762) (x122 x762)))))
(define-fun x619 ((x762 Int)) Int (ite x894 (x865 x762) (ite x517 (x565 x762) (x531 x762))))
(define-fun x577 ((x762 x662)) Int (ite (= (x993 x925) x762) x782 (x945 x762)))
(define-fun x574 ((x762 x662)) Int (ite (= (x993 x814) x762) x913 (x577 x762)))
(define-fun x349 ((x762 x662)) Int (ite (= x762 (x993 x814)) x446 (x574 x762)))
(define-fun x228 ((x762 x662)) Int (ite (= x762 (x993 x925)) x992 (x349 x762)))
(define-fun x733 ((x762 Int)) Int (ite (= x690 x762) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x619 x762)))
(define-fun x388 ((x762 Int)) Int (ite (= x48 x762) 192 (x733 x762)))
(define-fun x233 ((x762 Int)) Int (ite (= x762 x111) x361 (x388 x762)))
(define-fun x20 ((x762 Int)) Int (ite (= x762 x888) x709 (x233 x762)))
(define-fun x360 ((x762 Int)) Int (ite (= x762 x787) x34 (x20 x762)))
(define-fun x536 ((x762 Int)) Int (ite (= x762 x148) x591 (x360 x762)))
(define-fun x351 ((x762 x662)) Int (ite x716 (x713 x762) (x228 x762)))
(define-fun x896 ((x762 x662)) Int (ite x235 (x351 x762) (ite x95 (x726 x762) (x351 x762))))
(define-fun x272 ((x762 Int)) Int (ite (= x762 x772) x924 (x536 x762)))
(define-fun x30 ((x762 Int)) Int (ite x519 (x536 x762) (ite x91 (x360 x762) (ite x889 (x20 x762) (ite x930 (x233 x762) (x272 x762))))))
(define-fun x972 ((x762 Int)) Int (ite (= x762 x916) 0 (x30 x762)))
(define-fun x275 ((x762 Int)) Int (ite x962 (x30 x762) (x972 x762)))
(define-fun x237 ((x762 Int)) Int (ite (= x345 x762) x549 (x275 x762)))
(define-fun x311 ((x762 Int)) Int (ite (= x822 x762) x434 (x237 x762)))
(define-fun x946 ((x762 Int)) Int (ite (= x762 x521) x114 (x311 x762)))
(define-fun x257 ((x762 Int)) Int (ite (= x762 x689) x898 (x946 x762)))
(define-fun x959 ((x762 Int)) Int (ite (= x762 x332) x730 (x257 x762)))
(define-fun x438 ((x762 Int)) Int (ite (= x845 x762) x866 (x959 x762)))
(define-fun x550 ((x762 Int)) Int (ite x52 (x959 x762) (ite x1025 (x257 x762) (ite x355 (x946 x762) (ite x327 (x311 x762) (x438 x762))))))
(define-fun x450 ((x762 Int)) Int (ite (= x750 x762) 0 (x550 x762)))
(define-fun x399 ((x762 Int)) Int (ite x403 (x550 x762) (x450 x762)))
(define-fun x912 ((x762 Int)) Int (ite (= x762 x943) x786 (x399 x762)))
(define-fun x209 ((x762 Int)) Int (ite (= x762 x386) x604 (x912 x762)))
(define-fun x827 ((x762 Int)) Int (ite (= x640 x762) x703 (x209 x762)))
(define-fun x70 ((x762 Int)) Int (ite (= x1013 x762) x115 (x827 x762)))
(define-fun x124 ((x762 Int)) Int (ite (and (<= x690 x762) (> (+ x690 0) x762)) (x625 (+ 0 (- x762 x690))) (x70 x762)))
(define-fun x254 ((x762 Int)) Int (ite x716 (x124 x762) (x70 x762)))
(define-fun x954 ((x762 Int)) Int (ite (= x762 x952) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x254 x762)))
(define-fun x920 ((x762 Int)) Int (ite (= x748 x762) x285 (x954 x762)))
(define-fun x897 ((x762 Int)) Int (ite (= x663 x762) x192 (x920 x762)))
(define-fun x1031 ((x762 Int)) Int (ite (= x762 x665) x270 (x897 x762)))
(define-fun x757 ((x762 Int)) Int (ite (= x762 x155) x350 (x1031 x762)))
(define-fun x188 ((x762 Int)) Int (ite x338 (x1031 x762) (ite x773 (x897 x762) (ite x715 (x920 x762) (ite x808 (x954 x762) (x757 x762))))))
(define-fun x940 ((x762 Int)) Int (ite (= x762 x899) 0 (x188 x762)))
(define-fun x688 ((x762 Int)) Int (ite x602 (x188 x762) (x940 x762)))
(define-fun x680 ((x762 Int)) Int (ite (= x690 x762) x453 (x688 x762)))
(define-fun x126 ((x762 Int)) Int (ite (= x762 x45) x634 (x680 x762)))
(define-fun x838 ((x762 Int)) Int (ite (= x544 x762) x343 (x126 x762)))
(define-fun x964 ((x762 Int)) Int (ite (= x762 x903) x508 (x838 x762)))
(define-fun x520 ((x762 Int)) Int (ite (= x513 x762) x214 (x964 x762)))
(define-fun x594 ((x762 Int)) Int (ite (= x762 x303) x425 (x520 x762)))
(define-fun x791 ((x762 Int)) Int (ite (= x762 x43) x559 (x594 x762)))
(define-fun x41 ((x762 Int)) Int (ite x299 (x594 x762) (ite x250 (x520 x762) (ite x589 (x964 x762) (ite x800 (x838 x762) (x791 x762))))))
(define-fun x734 ((x762 Int)) Int (ite (= x762 x426) 0 (x41 x762)))
(define-fun x144 ((x762 Int)) Int (ite x479 (x41 x762) (x734 x762)))
(define-fun x300 ((x762 Int)) Int (ite (= x762 x253) x667 (x144 x762)))
(define-fun x929 ((x762 Int)) Int (ite x73 (x61 x762) (x906 x762)))
(define-fun x700 ((x762 Int)) Int (ite (= x762 x391) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x929 x762)))
(define-fun x614 ((x762 Int)) Int (ite (and (>= x762 x391) (< x762 (+ x391 32))) (x583 (+ (- x762 x391) 0)) (x700 x762)))
(define-fun x119 ((x762 Int)) Int (ite x136 (x614 x762) (x700 x762)))
(define-fun x79 ((x762 Int)) Int (ite (= x353 x762) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x119 x762)))
(define-fun x670 ((x762 Int)) Int (ite (and (<= x353 x762) (> (+ 32 x353) x762)) (x1018 (+ 0 (- x762 x353))) (x79 x762)))
(define-fun x829 ((x762 Int)) Int (ite x173 (x670 x762) (x79 x762)))
(define-fun x123 ((x762 Int)) Int (ite (= x762 x276) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x829 x762)))
(define-fun x878 ((x762 Int)) Int (ite (and (<= x276 x762) (< x762 (+ x276 32))) (x621 (+ (- x762 x276) 0)) (x123 x762)))
(define-fun x1 ((x762 Int)) Int (ite x165 (x878 x762) (x123 x762)))
(define-fun x927 ((x762 Int)) Int (ite (= x762 x799) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x1 x762)))
(define-fun x749 ((x762 Int)) Int (ite (and (< x762 (+ x799 32)) (>= x762 x799)) (x991 (+ 0 (- x762 x799))) (x927 x762)))
(define-fun x645 ((x762 Int)) Int (ite x599 (x749 x762) (x927 x762)))
(define-fun x334 ((x454 Int)) Bool (=> (and (not (= x454 1845979623)) (not (= x454 54065695799311150304516525983669583430195215316752708547810291668471328538624)) (not (= 4294967296 x454)) (not (= x454 79228162514264337593543950335)) (not (= x454 22445611572322667099362401052093617030957452505749565894135597532943828910080)) (not (= 2249206060 x454)) (< 10000 x454) (not (= x454 1461501637330902918203684832716283019655932542976)) (not (= x454 33582922474372145882413589741236248003507108108518759994751911431010219196416)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x454)) (not (= x454 64069044923792539370177021244577383457373632460708312080110356237917649633280)) (not (= x454 4739670319144124481003130557741556594755290868171975227769803894069435301888)) (not (= 2220280665 x454)) (not (= x454 113209349505197351213641468582317386984598294884268236158119619414039440916480)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x454)) (not (= 2329570063 x454)) (not (= x454 62805084655870755976952745400290271510621614971557940054860603637793562820608)) (not (= x454 102499615646744134772650717477688572466918151731817230690449879178893085114368)) (not (= x454 2376452955)) (not (= 1901074598 x454)) (not (= x454 1262878978)) (not (= x454 3084411429)) (not (= 1245659826 x454)) (not (= 18446744073709551615 x454)) (not (= 1461501637330902918203684832716283019655932542975 x454)) (not (= 3572374928 x454)) (not (= x454 2005408114)) (not (= 1553423035 x454)) (not (= 3705713892 x454))) (not ((_ is x1004) (x993 x454)))))
(assert (= 0 (x528 x499)))
(assert (x314 x937))
(assert (x334 x187))
(assert (= (x528 x789) 0))
(assert (= (or x602 x423) x133))
(assert (x883 x224))
(assert (= (x830 (+ (x215 (+ x617 196)) (- (+ 196 (- x238 160)) 196))) 0))
(assert (x883 x283))
(assert (x314 x887))
(assert (x883 x898))
(assert (and (<= 10000 (x798 x925 x249)) (>= 340282366920938463463374607431768211455 (x798 x925 x249))))
(assert (= (and x997 x596) x742))
(assert (x883 x18))
(assert (= (or x613 x859 x817 x247 x850) x818))
(assert (x883 x549))
(assert (x883 x347))
(assert (x883 x8))
(assert (x459 x768))
(assert (= x262 (=> (and (= (x36 (- x694 x895)) x582) (= x747 (> x874 0)) (= x541 (x215 (+ x944 x628))) (= (x215 (+ 32 x729)) x901) (= x628 (x215 (+ x694 32))) (= x944 (mod (* 32 x874) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (=> (and (= x135 x541) (not x747)) x707) (=> x747 x496)))))
(assert (x883 x544))
(assert (x883 x660))
(assert (x883 x647))
(assert (x883 x639))
(assert (= 0 (x528 x238)))
(assert (x883 x626))
(assert (= (or (and (not x840) x27) x744) x837))
(assert (= (x830 (+ 96 (x215 (+ x617 196)))) 0))
(assert (x883 x92))
(assert (= (or (and (not x483) x983) x433) x751))
(assert (= 1845979623 (x759 (x1004 1845979623))))
(assert (x883 x493))
(assert (= x876 (=> (and (= (x215 (+ 32 x640)) x1013) (= (x968 (x993 x904)) x457) (= (x215 (+ 32 x943)) x386) (= x943 (x215 (+ x345 32))) (= (x215 (+ x386 32)) x640) (= (= 0 x457) x467)) (and (=> (and (not x467) (and (or (and x432 (and (= x934 (x228 (x993 x925))) x204 (= (x228 (x993 x904)) x864) (= x204 (= x864 (x713 (x993 x904)))) (= (>= (x713 (x993 x925)) x934) x389) x389 (> 4294967296 x893))) (not x432)) (= (< 0 x932) x432))) x466) (=> (and (and (= x76 x199) (= 0 x488)) x467) x382)))))
(assert (= x84 (and (not x648) x24)))
(assert (= (and x756 (not x487)) x280))
(assert (= x329 (or x378 x494)))
(assert (x883 x34))
(assert (x314 x502))
(assert (x883 x575))
(assert (= x566 (and x885 x424)))
(assert (x883 x676))
(assert (= 0 (x830 (+ (- (+ (- x552 x649) x304) 196) (x215 (+ x617 196))))))
(assert (= (and x756 x487) x227))
(assert (= x753 (=> (and (or (and (and (= x498 1) (< x184 4294967296)) x444) (and (= x305 x498) (not x444))) (and (<= x1020 1461501637330902918203684832716283019655932542975) (not (or (> x976 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x976 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x976)))) (= x242 (x215 (+ x976 31))) (not (= 0 x67)) (= x444 (> x305 0)) (= (x929 x739) x1020) (= (x215 (+ x739 x418)) x391) (= x418 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x242)))) x868)))
(assert (x883 x658))
(assert (x883 x391))
(assert (= (x759 (x993 x429)) x429))
(assert (x883 x892))
(assert (x883 x99))
(assert (x883 x407))
(assert (= (and (not x230) x637) x951))
(assert (= (and x595 x286) x656))
(assert (x883 x111))
(assert (x883 x150))
(assert (x883 x775))
(assert (x883 x223))
(assert (= x476 (=> (= (> x243 0) x949) (and (=> (and (and (= x488 0) (= x76 x199)) (not x949)) x382) (=> (and (= x690 x200) x949) x512)))))
(assert (x883 x904))
(assert (=> (>= 10000 x814) (= (x1004 x814) (x993 x814))))
(assert (x883 x729))
(assert (= (=> (= (= x78 0) x795) (and (=> (and (and (= 1 x159) (= x82 x76) (= x54 32) (= (x569 1461501637330902918203684832716283019655932542975 x814) x905)) (not x795)) x515) (=> (and x795 (and (= x76 x199) (= x488 0))) x382))) x138))
(assert (= (x379 (- x789 x958)) 0))
(assert (x883 x1026))
(assert (x883 x200))
(assert (x883 x471))
(assert (x883 x151))
(assert (= (x379 (- 256 x958)) 0))
(assert (x883 x243))
(assert (x334 x814))
(assert (x883 x718))
(assert (= (or x195 x94) x203))
(assert (x883 x604))
(assert (x883 x498))
(assert (=> (<= x678 10000) (= (x993 x678) (x1004 x678))))
(assert (x883 x748))
(assert (x883 x917))
(assert (x883 x970))
(assert (x883 x706))
(assert (x883 x418))
(assert (= x23 (=> (= x921 (not (> x279 1))) (and x921 x26))))
(assert (= 0 (x379 (- x224 x958))))
(assert (= (and x444 x244) x136))
(assert (x314 x768))
(assert (= x352 (=> (= x974 (not (> x342 128))) (and (=> (= x664 128) x687) x974))))
(assert (x314 x5))
(assert (= (x993 79228162514264337593543950335) (x1004 79228162514264337593543950335)))
(assert (= x248 (and x545 x910)))
(assert (= (and x6 x398) x309))
(assert (= (=> (and (or x208 (not x208)) (= (= 0 x159) x208)) x627) x515))
(assert (x883 x222))
(assert (= x737 (and x566 x886)))
(assert (= (=> (and (> x529 0) (not (= x675 1262878978)) (= x529 (x968 (x993 x925))) (= x473 x582) (= x514 x313) (= x87 x168) (not (< x514 4)) (= x375 x957) (not (= x675 1245659826)) (= (or (and (= true (<= x408 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 160 x408)) (> x408 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x699) (not (= x675 1553423035)) (<= 292 x514) (= x675 2005408114) x161 (< x675 2220280665) (= x879 x260) (= (x36 (- x514 4)) x408) (not (= x675 1845979623)) (= x313 (x36 (- x135 x617))) (= x161 (= x366 (x25 164))) (not (= x675 1901074598)) (not (> 1245659826 x675)) (= x858 54065695799311150304516525983669583430195215316752708547810291668471328538624)) (and (=> (and (= x585 (and (< 195 x514) (= true (<= x514 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (not x699)) (and (=> (and (not x585) (and (= 0 x488) (= x199 x76))) x382) (=> (and (and (= (< 18446744073709551615 x632) x241) (= x632 (x128 164))) x585) (and (=> (and (not x241) (and (= x853 (< x151 128)) (= (x215 (+ x902 32)) x714) (= x855 (> x151 18446744073709551615)) (= x774 (x215 (+ x714 31))) (= (= 0 (ite x445 1 0)) x545) (= x548 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x774)) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x646) x902) (= x151 (x215 (+ x548 128))) (= (or x855 x853) x445) (= (x215 (+ 31 x632)) x646))) (and (=> (and (and (= x199 x76) (= 0 x488)) (not x545)) x382) (=> (and x545 (and (= (< x514 x278) x869) (= (x215 (+ x632 196)) x278))) (and (=> (and (not x869) (and (= (x215 (+ 160 x632)) x892) (= x995 (< 18446744073709551615 x879)))) (and (=> (and (and (= x1006 (x215 (+ 31 x347))) (= (x215 (+ 4 x260)) x347) (= x232 (or (and (<= x514 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x1006 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x514) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1006)) (> x514 x1006))))) (not x995)) (and (=> (and x232 (and (= (x215 (+ x347 32)) x304) (= x590 (> x832 18446744073709551615)) (= (x128 x347) x832))) (and (=> (and (not x590) (and (= x826 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x935)) (= x255 (> x151 x368)) (= (or x447 x255) x810) (= (> x368 18446744073709551615) x447) (= x167 (= 0 (ite x810 1 0))) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x420) x493) (= x420 (x215 (+ x708 31))) (= (x215 (+ x826 32)) x708) (= (x215 (+ x493 x151)) x368) (= (x215 (+ x832 31)) x935))) (and (=> (and (and (= x199 x76) (= 0 x488)) (not x167)) x382) (=> (and x167 (and (= x97 (< x514 x697)) (= x697 (x215 (+ x304 x832))) (= x649 (x215 (+ 32 x151))))) (and (=> (and (and (= (< 18446744073709551615 x168) x139) (= (x215 (+ x649 x832)) x679)) (not x97)) (and (=> (and (and (= x164 (x215 (+ x87 4))) (= x465 (or (and (= (<= x514 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x535 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x535 x514)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x514) (> x535 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x215 (+ 31 x164)) x535)) (not x139)) (and (=> (and (not x465) (and (= 0 x488) (= x76 x199))) x382) (=> (and (and (= (x128 x164) x279) (= x381 (< 18446744073709551615 x279))) x465) (and (=> (and (and (= x487 (< x514 x357)) (= (x215 (+ x668 x189)) x357) (= (x215 (+ 32 x164)) x668) (= (mod (* x279 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x189)) (not x381)) (and (=> (and x487 (and (= 0 x488) (= x76 x199))) x382) (=> (and (= x358 (< 18446744073709551615 x582)) (not x487)) (and (=> (and (not x358) (and (= x273 (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x514)) (and (= (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x514)) (< x35 x514)))) (= x35 (x215 (+ x1032 31))) (= x1032 (x215 (+ x473 4))))) (and (=> (and (not x273) (and (= x199 x76) (= x488 0))) x382) (=> (and x273 (and (= x146 (> x96 18446744073709551615)) (= x96 (x128 x1032)))) (and (=> (and (and (= (mod (* 32 x96) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x526) (= x316 (x215 (+ x1032 32))) (= (< x514 x651) x120) (= (x215 (+ x316 x526)) x651)) (not x146)) (and (=> (and x120 (and (= 0 x488) (= x199 x76))) x382) (=> (and (and (< x18 256) (<= 0 x18) (<= x18 255) (= x828 (= 0 x18))) (not x120)) (and (=> (and (not x828) (and (= x488 0) (= x76 x199))) x382) (=> (and x828 (and (<= x76 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x409 (> x76 0)) (<= 0 x76))) (and (=> (and (not x409) (= x690 x368)) x512) (=> (and (and (= x967 (= x76 0)) (>= x76 0) (<= x76 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x409) (and (=> (and x967 (and (= x302 2376452955) (not (= x302 2329570063)) (not (< x402 4)) (= 4 x693) (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 x482) (not (= x302 2249206060)) (= x290 (x215 (+ x368 32))) (< x302 3084411429) (not (= 2220280665 x302)) (< x507 1461501637330902918203684832716283019655932542976) (> x112 0) (= x402 x693) (<= x507 1461501637330902918203684832716283019655932542975) (= (x505 x368) x500) (>= x507 0) (not (< x302 2220280665)) (= (x569 1461501637330902918203684832716283019655932542975 x500) x292) (= 4 x402) (= x1011 (= x292 x500)) (= x112 (x968 (x993 x925))))) (and (=> (and (and (= x149 (x60 (x993 x925))) (= x587 (x569 1461501637330902918203684832716283019655932542975 x500)) (= x108 (and (< (+ x620 x464) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x149))) (= x620 0) (= (x60 (x993 x587)) x464)) x1011) (and (=> (and (and (= 0 x183) (= 0 x243)) (not x108)) x1017) (=> (and x108 (and (and (= x59 x909) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x909 x620)) (= (> x849 0) x468) (= (x497 (x993 x587)) x909) (= x911 (x60 (x993 x925))) (= x911 x166)) (or (not x468) (and (and (< x152 4294967296) (= (= (x81 (x993 x587)) x472) x710) (= x978 (x88 (x993 x925))) x710 x38 (= (<= x978 (x81 (x993 x925))) x38) (= (x88 (x993 x587)) x472)) x468)))) x427))) (=> (and (and (= x76 x199) (= x488 0)) (not x1011)) x382))) (=> (and (not x967) (and (= x488 0) (= x76 x199))) x382))))))))) (=> (and x146 (and (= x488 0) (= x76 x199))) x382))))) (=> (and x358 (and (= x199 x76) (= 0 x488))) x382))))) (=> (and x381 (and (= x76 x199) (= 0 x488))) x382))))) (=> (and (and (= x199 x76) (= x488 0)) x139) x382))) (=> (and x97 (and (= 0 x488) (= x199 x76))) x382))))) (=> (and x590 (and (= x488 0) (= x199 x76))) x382))) (=> (and (and (= x488 0) (= x76 x199)) (not x232)) x382))) (=> (and x995 (and (= x488 0) (= x199 x76))) x382))) (=> (and (and (= x76 x199) (= 0 x488)) x869) x382))))) (=> (and x241 (and (= x199 x76) (= x488 0))) x382))))) (=> (and (and (= x82 x76) (= 0 x159) (= x54 x71)) x699) x515))) x707))
(assert (x883 x712))
(assert (= 0 (x830 (+ (- (+ x304 (- x789 x649)) 196) (x215 (+ x617 196))))))
(assert (x883 x884))
(assert (x883 x862))
(assert (x334 x678))
(assert (x314 x156))
(assert (= (and x273 x51) x3))
(assert (= x802 (and x556 x673)))
(assert (x883 x978))
(assert (x883 x606))
(assert (x883 x180))
(assert (x314 x774))
(assert (x883 x513))
(assert (x314 x420))
(assert (x883 x135))
(assert (= (x830 (+ (x215 (+ x617 196)) (- (+ 196 (- x287 160)) 196))) 0))
(assert (x883 x335))
(assert (x883 x303))
(assert (x883 x439))
(assert (x883 x59))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x759 (x1004 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= x226 (and x3 x146)))
(assert (x883 x890))
(assert (x883 x799))
(assert (= (=> (and (= (= 0 x183) x615) (or (and (not x615) (and (= x44 x200) (= (x215 (+ 32 x290)) x958) (= x777 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x502)) (= (x215 (+ x290 x777)) x44) (= x502 (x215 (+ x183 63))))) (and x615 (= x290 x200)))) x476) x1017))
(assert (x883 x924))
(assert (x883 x504))
(assert (x883 x184))
(assert (x883 x207))
(assert (x883 x326))
(assert (= (x1004 54065695799311150304516525983669583430195215316752708547810291668471328538624) (x993 54065695799311150304516525983669583430195215316752708547810291668471328538624)))
(assert (x883 x674))
(assert (x883 x158))
(assert (x883 x324))
(assert (x883 x481))
(assert (x883 x507))
(assert (x883 x874))
(assert (= (x759 (x1004 2220280665)) 2220280665))
(assert (= (x830 (+ (x215 (+ 196 x617)) (- (+ (- x392 x649) x304) 196))) 0))
(assert (x883 x861))
(assert (x883 x185))
(assert (= (and x110 x480) x348))
(assert (x883 x503))
(assert (x883 x758))
(assert (= x603 (and x518 (not x432))))
(assert (x883 x345))
(assert (x883 x106))
(assert (x883 x183))
(assert (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x759 (x1004 4739670319144124481003130557741556594755290868171975227769803894069435301888))))
(assert (= (x830 (+ (x215 (+ x617 196)) (- (+ (- x499 x649) x304) 196))) 0))
(assert (x883 x935))
(assert (x883 x1006))
(assert (x883 x276))
(assert (= 0 (x830 x890)))
(assert (=> (>= 10000 x429) (= (x993 x429) (x1004 x429))))
(assert (= (and x358 x280) x524))
(assert (x883 x548))
(assert (x883 x568))
(assert (= 0 (x830 (+ (- x289 196) (x215 (+ x617 196))))))
(assert (x883 x401))
(assert (= x419 (and x307 (not x586))))
(assert (= x587 (x759 (x993 x587))))
(assert (= x711 (and x440 x97)))
(assert (x883 x516))
(assert (x314 x935))
(assert (= x701 (and x221 x828)))
(assert (= (x1004 3705713892) (x993 3705713892)))
(assert (= x480 (or x539 x919 x558 x987 x84)))
(assert (= x181 (and (not x982) x818)))
(assert (= x784 (=> (and (= (not (< 128 x1014)) x397) (= x350 (x1031 x421)) (= x155 (x215 (+ 96 x415))) (= x421 (x215 (+ 96 x649)))) (and (=> (= x308 128) x994) x397))))
(assert (x883 x836))
(assert (= (and x86 x212) x69))
(assert (x883 x54))
(assert (= (and x310 x208) x511))
(assert (x883 x210))
(assert (x883 x1020))
(assert (x883 x375))
(assert (= 0 (x830 (+ (x215 (+ 196 x617)) (- x293 196)))))
(assert (x883 x888))
(assert (x883 x508))
(assert (= (x528 160) 0))
(assert (x883 x820))
(assert (x883 x368))
(assert (= (and x102 (not x467)) x518))
(assert (x883 x48))
(assert (x883 x654))
(assert (x883 x1009))
(assert (x883 x301))
(assert (x883 x899))
(assert (x883 x474))
(assert (= (and x211 x133) x29))
(assert (x883 x973))
(assert (= (x1004 1461501637330902918203684832716283019655932542976) (x993 1461501637330902918203684832716283019655932542976)))
(assert (x10 x814))
(assert (x459 x774))
(assert (= (=> (and (and (= x862 x82) (= false x455) (= x1015 false)) (and (not (= x986 0)) (not (or (and (< x568 32) (= (<= x568 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x568))) (= x57 x258) (<= x806 1461501637330902918203684832716283019655932542975) (= (x645 x799) x806))) x572) x571))
(assert (= 0 (x528 x421)))
(assert (x883 x463))
(assert (= x458 (and x722 x754)))
(assert (x883 x85))
(assert (x883 x651))
(assert (= x800 (and x133 (not x211))))
(assert (x883 x164))
(assert (= (and x837 (not x89)) x644))
(assert (= x475 (and x553 x74)))
(assert (= 1461501637330902918203684832716283019655932542976 (x759 (x1004 1461501637330902918203684832716283019655932542976))))
(assert (= (and x843 x475) x239))
(assert (x883 x779))
(assert (= x197 (or x441 x165)))
(assert (x314 x242))
(assert (= x281 (and x590 x328)))
(assert (= (=> (and (= x840 (= x932 0)) (or x840 (not x840))) x22) x466))
(assert (= (and x33 x333) x596))
(assert (= (and (not x284) x1030) x282))
(assert (x883 x285))
(assert (x459 x187))
(assert (= x963 (and x2 x506)))
(assert (= (or x716 x603) x27))
(assert (= 0 (x830 256)))
(assert (x883 x259))
(assert (x883 x634))
(assert (x883 x1021))
(assert (= x702 (and (not x194) x396)))
(assert (x883 x870))
(assert (x883 x159))
(assert (x883 x71))
(assert (x883 x371))
(assert (x883 x462))
(assert (= 0 (x830 x775)))
(assert (= (and x309 x400) x42))
(assert (x883 x866))
(assert (x883 x907))
(assert (= (and (not x108) x794) x58))
(assert (x883 x552))
(assert (= (x1004 4739670319144124481003130557741556594755290868171975227769803894069435301888) (x993 4739670319144124481003130557741556594755290868171975227769803894069435301888)))
(assert (= x956 (and (not x66) x197)))
(assert (x883 x905))
(assert (= (x759 (x993 x1024)) x1024))
(assert (x883 x1010))
(assert (x883 x723))
(assert (x883 x887))
(assert (x883 x141))
(assert (x883 x43))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x759 (x1004 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x883 x822))
(assert (x883 x121))
(assert (= x90 (=> (and (= (x215 (+ 96 x654)) x845) (= x812 (not (> x434 128))) (= (x959 x392) x866) (= x392 (x215 (+ 96 x649)))) (and (=> (= x283 128) x9) x812))))
(assert (x883 x624))
(assert (= (and (not x465) x598) x491))
(assert (x883 x192))
(assert (= (x759 (x993 x678)) x678))
(assert (= 0 (x528 x287)))
(assert (= (and x833 x213) x74))
(assert (x459 x669))
(assert (x883 x45))
(assert (x883 x669))
(assert (x883 x367))
(assert (= x904 (x759 (x993 x904))))
(assert (x883 x464))
(assert (x883 x629))
(assert (x459 x80))
(assert (x883 x80))
(assert (x883 x82))
(assert (x883 x774))
(assert (x883 x366))
(assert (x883 x694))
(assert (x883 x297))
(assert (= x1000 (or x256 x517)))
(assert (= x22 (=> (= (= x932 0) x89) (and (=> (and (and (= x1014 (x954 x151)) (= x39 (< 0 x1014)) (= x415 (x215 (+ x175 3))) (= (x215 (+ x690 32)) x175) (= (x215 (+ 32 x690)) x952)) (not x89)) (and (=> (and x39 (and (= (x954 x552) x285) (= (< 32 x1014) x618) (= x649 x552) (= x748 x415))) (and (=> (and (and (= (> x1014 64) x803) (= (x215 (+ 32 x649)) x287) (= (x215 (+ 32 x415)) x663) (= x192 (x920 x287))) x618) (and (=> (and x803 (and (= (< 96 x1014) x754) (= x270 (x897 x238)) (= x238 (x215 (+ x649 64))) (= x665 (x215 (+ 64 x415))))) (and (=> x754 x784) (=> (and (not x754) (= 96 x308)) x994))) (=> (and (not x803) (= 64 x308)) x994))) (=> (and (= 32 x308) (not x618)) x994))) (=> (and (= x308 0) (not x39)) x994))) (=> (and (and (= 0 x488) (= x199 x76)) x89) x382)))))
(assert (x883 x87))
(assert (= (and x419 x763) x131))
(assert (x883 x730))
(assert (= x244 (or x363 x73)))
(assert (x883 x689))
(assert (= (x379 (- 160 x958)) 0))
(assert (= 0 (x830 x62)))
(assert (= 1262878978 (x759 (x1004 1262878978))))
(assert (x883 x755))
(assert (x459 x935))
(assert (= (=> (and (or (and x567 (= x426 (x215 (+ x792 x343)))) (not x567)) (= (> x140 x343) x567)) x831) x989))
(assert (x883 x287))
(assert (= 0 (x830 224)))
(assert (= x824 (and x396 x194)))
(assert (x883 x198))
(assert (x883 x296))
(assert (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x759 (x1004 54065695799311150304516525983669583430195215316752708547810291668471328538624))))
(assert (x883 x149))
(assert (x883 x772))
(assert (x883 x76))
(assert (= x330 (and x751 (not x636))))
(assert (= x33 (and x608 x422)))
(assert (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x759 (x1004 33582922474372145882413589741236248003507108108518759994751911431010219196416))))
(assert (x883 x425))
(assert (= x178 (and (not x886) x566)))
(assert (= (=> (= (< 0 x861) x291) (and (=> x291 x23) (=> (and (not x291) (and (= 0 x488) (= x199 x76))) x382))) x666))
(assert (x883 x21))
(assert (x883 x238))
(assert (= (or x452 x796) x489))
(assert (x883 x153))
(assert (= 0 (x830 (+ (x215 (+ x617 196)) (- (+ 196 (- x552 160)) 196)))))
(assert (x883 x731))
(assert (x883 x767))
(assert (= x522 (and (not x997) x596)))
(assert (x883 x931))
(assert (x883 x821))
(assert (= (and x869 x248) x171))
(assert (= (and x102 x467) x509))
(assert (= x319 (and x835 x291)))
(assert (x883 x187))
(assert (x883 x542))
(assert (x883 x943))
(assert (= x325 (and x742 x719)))
(assert (= (or x740 x522 x325 x220 x55) x947))
(assert (= x37 (=> (and (= (x215 (+ x792 96)) x43) (= x306 (not (> x343 128))) (= (x594 256) x559)) (and (=> (= 128 x140) x989) x306))))
(assert (x883 x720))
(assert (x883 x743))
(assert (x459 x4))
(assert (= (and x244 (not x444)) x264))
(assert (x883 x417))
(assert (x883 x976))
(assert (= (x1004 2249206060) (x993 2249206060)))
(assert (x883 x760))
(assert (x883 x739))
(assert (x883 x620))
(assert (= (x759 (x1004 4294967296)) 4294967296))
(assert (not x564))
(assert (= (=> (and (= (x36 (- x393 x45)) x667) (= x393 (x215 (+ x324 x792))) (= (x215 (+ 31 x343)) x937) (= x253 (x215 (+ x45 32))) (= (x300 x690) x342) (= x324 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x937)) (= x648 (> x342 0))) (and (=> (and (not x648) (= x664 0)) x687) (=> (and (= (< 32 x342) x682) x648) (and (=> (and (not x682) (= x664 32)) x687) (=> (and (= x692 (> x342 64)) x682) (and (=> (and (= x616 (< 96 x342)) x692) (and (=> (and (not x616) (= x664 96)) x687) (=> x616 x352))) (=> (and (not x692) (= x664 64)) x687))))))) x831))
(assert (= (or x235 x319) x673))
(assert (= x47 (or x178 x737 x846 x219 x295)))
(assert (x459 x887))
(assert (= 0 (x528 192)))
(assert (= x363 (and (not x979) x344)))
(assert (= (x993 2005408114) (x1004 2005408114)))
(assert (x883 x911))
(assert (x883 x500))
(assert (= x2 (or x239 x1025 x355 x52 x327)))
(assert (x314 x80))
(assert (= x715 (and x320 (not x618))))
(assert (x883 x35))
(assert (x883 x785))
(assert (=> (<= x187 10000) (= (x1004 x187) (x993 x187))))
(assert (x883 x623))
(assert (x883 x801))
(assert (= x602 (and (not x793) x538)))
(assert (= (=> (and (or (not x622) (and (= (x215 (+ x643 x366)) x201) x622)) (= (< x366 x743) x622)) x372) x172))
(assert (x883 x934))
(assert (x883 x1024))
(assert (x459 x542))
(assert (x883 x434))
(assert (= (and x910 (not x545)) x470))
(assert (= x212 (and x29 x12)))
(assert (x883 x581))
(assert (x883 x332))
(assert (x883 x114))
(assert (= x724 (and x501 x795)))
(assert (x314 x442))
(assert (= x186 (and (not x995) x685)))
(assert (= x250 (and (not x86) x212)))
(assert (= (and x685 x995) x819))
(assert (x883 x199))
(assert (= (and x1000 x949) x554))
(assert (x883 x665))
(assert (= x783 (=> (and (= (= 0 x129) x636) (or x636 (not x636))) x666)))
(assert (= 1901074598 (x759 (x1004 1901074598))))
(assert (= (and (not x19) x42) x387))
(assert (= x598 (and (not x139) x738)))
(assert (= (x830 (+ 32 (x215 (+ x617 196)))) 0))
(assert (x883 x100))
(assert (x883 x944))
(assert (= 0 (x830 (+ (- (+ x304 (- 160 x649)) 196) (x215 (+ x617 196))))))
(assert (x883 x1005))
(assert (= 0 (x379 (- x392 x958))))
(assert (x883 x316))
(assert (x883 x225))
(assert (x883 x113))
(assert (x883 x44))
(assert (x459 x502))
(assert (x883 x312))
(assert (=> (<= x1024 10000) (= (x1004 x1024) (x993 x1024))))
(assert (x883 x317))
(assert (= 0 (x830 (+ (x215 (+ x617 196)) (- x1032 196)))))
(assert (x883 x649))
(assert (x883 x50))
(assert (x883 x109))
(assert (= (x830 192) 0))
(assert (= x494 (and (not x622) x947)))
(assert (= (and x592 x510) x213))
(assert (= x641 (and (not x1011) x704)))
(assert (x459 x242))
(assert (= (x1004 62805084655870755976952745400290271510621614971557940054860603637793562820608) (x993 62805084655870755976952745400290271510621614971557940054860603637793562820608)))
(assert (x883 x842))
(assert (x883 x274))
(assert (x883 x562))
(assert (x883 x777))
(assert (= x722 (and x130 x803)))
(assert (= 0 (x528 x392)))
(assert (= (or x773 x338 x458 x715 x808) x538))
(assert (x883 x292))
(assert (x883 x990))
(assert (x883 x768))
(assert (x883 x305))
(assert (= x64 (or x299 x800 x589 x75 x250)))
(assert (x334 x429))
(assert (= (and (not x273) x51) x176))
(assert (x883 x413))
(assert (x883 x115))
(assert (= (and x322 (not x692)) x987))
(assert (x883 x642))
(assert (= (and x230 x637) x95))
(assert (x883 x677))
(assert (x883 x998))
(assert (= (x759 (x1004 2376452955)) 2376452955))
(assert (= (x1004 2220280665) (x993 2220280665)))
(assert (= x328 (and x186 x232)))
(assert (x883 x675))
(assert (x314 x542))
(assert (x883 x214))
(assert (x883 x143))
(assert (x883 x679))
(assert (x459 x442))
(assert (= x83 (=> (and (and (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236)) (< x236 32)) (> x236 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= x92 1461501637330902918203684832716283019655932542975) (= x731 (x215 (+ x236 31))) (= (x215 (+ x758 x353)) x276) (= x92 (x829 x353)) (= x851 (> x780 0)) (not (= 0 x99)) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x731) x758)) (or (and (not x851) (= x780 x686)) (and (and (= x686 1) (> 4294967296 x394)) x851))) x661)))
(assert (x883 x659))
(assert (x883 x605))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x398 (or x348 x811)))
(assert (x883 x67))
(assert (x883 x251))
(assert (x334 x587))
(assert (= x364 (or x58 x405 x118)))
(assert (x883 x353))
(assert (x883 x216))
(assert (= (x379 (- 224 x958)) 0))
(assert (= (and (not x616) x359) x558))
(assert (= (and x947 x622) x378))
(assert (x883 x686))
(assert (= 0 (x379 (- x238 x958))))
(assert (x883 x1032))
(assert (= (=> (and (or x483 (not x483)) (= (= 0 x861) x483)) x783) x841))
(assert (x883 x392))
(assert (= x770 (and x586 x307)))
(assert (x883 x169))
(assert (x883 x845))
(assert (x459 x420))
(assert (= (x1004 18446744073709551615) (x993 18446744073709551615)))
(assert (= (x1004 22445611572322667099362401052093617030957452505749565894135597532943828910080) (x993 22445611572322667099362401052093617030957452505749565894135597532943828910080)))
(assert (= x9 (=> (and (or (not x506) (and (= x750 (x215 (+ x434 x654))) x506)) (= x506 (< x434 x283))) x876)))
(assert (x883 x270))
(assert (= 0 (x528 224)))
(assert (= (or x825 x479) x24))
(assert (x883 x266))
(assert (x883 x698))
(assert (= x696 (and x221 (not x828))))
(assert (= x704 (and x546 x967)))
(assert (x883 x714))
(assert (x883 x393))
(assert (x883 x420))
(assert (= x173 (and x490 x451)))
(assert (= (and x742 (not x719)) x740))
(assert (= x28 (and x834 x948)))
(assert (= x994 (=> (and (or (not x793) (and x793 (= x899 (x215 (+ x415 x1014))))) (= x793 (< x1014 x308))) x573)))
(assert (= x246 (=> (and (= (not (> x361 128)) x17) (= x924 (x536 256)) (= (x215 (+ x277 96)) x772)) (and (=> (= x998 128) x385) x17))))
(assert (x883 x849))
(assert (x459 x771))
(assert (x883 x895))
(assert (x883 x826))
(assert (= 0 (x611 (x798 x925 x249))))
(assert (x883 x709))
(assert (= (x759 (x1004 22445611572322667099362401052093617030957452505749565894135597532943828910080)) 22445611572322667099362401052093617030957452505749565894135597532943828910080))
(assert (x883 x342))
(assert (= (x759 (x1004 102499615646744134772650717477688572466918151731817230690449879178893085114368)) 102499615646744134772650717477688572466918151731817230690449879178893085114368))
(assert (x883 x383))
(assert (x883 x703))
(assert (x459 x5))
(assert (= (and x794 x108) x145))
(assert (= x517 (and x364 x615)))
(assert (x883 x871))
(assert (x883 x96))
(assert (= (x759 (x1004 79228162514264337593543950335)) 79228162514264337593543950335))
(assert (x883 x541))
(assert (x883 x350))
(assert (x883 x77))
(assert (= (x1004 3084411429) (x993 3084411429)))
(assert (x883 x412))
(assert (x883 x343))
(assert (= 1461501637330902918203684832716283019655932542975 (x759 (x1004 1461501637330902918203684832716283019655932542975))))
(assert (x883 x938))
(assert (x883 x277))
(assert (= (and x29 (not x12)) x589))
(assert (= (and (not x120) x612) x221))
(assert (= (or x656 x218) x671))
(assert (x883 x914))
(assert (= (x528 256) 0))
(assert (x883 x780))
(assert (= (=> (and (= x775 (x215 (+ x460 96))) (= (x215 (+ x312 96)) x317) (= x383 (x117 x775)) (= (not (> x1009 128)) x107)) (and x107 (=> (= x21 128) x132))) x601))
(assert (= (and x483 x983) x433))
(assert (x883 x472))
(assert (= x49 (and x835 (not x291))))
(assert (x883 x127))
(assert (= x295 (and (not x288) x28)))
(assert (x883 x499))
(assert (=> (<= x925 10000) (= (x1004 x925) (x993 x925))))
(assert (x883 x856))
(assert (= (and (not x409) x701) x894))
(assert (= (and x24 x648) x390))
(assert (= x794 (and x1011 x704)))
(assert (= (x993 1553423035) (x1004 1553423035)))
(assert (= x962 (and (not x684) x495)))
(assert (= (or x136 x264) x451))
(assert (= (or x403 x963) x102))
(assert (= (x759 (x1004 113209349505197351213641468582317386984598294884268236158119619414039440916480)) 113209349505197351213641468582317386984598294884268236158119619414039440916480))
(assert (= (and (not x468) x145) x252))
(assert (x883 x792))
(assert (x883 x112))
(assert (= (=> (and (= x973 (x215 (+ 32 x895))) (= (x215 (+ 32 x142)) x312) (= (x215 (+ x366 31)) x887) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x887) x339) (= x142 (x215 (+ x339 x643))) (= (x36 (- x142 x895)) x879) (= (x939 x882) x1009) (= (> x1009 0) x456)) (and (=> (and x456 (and (= (< 32 x1009) x732) (= (x1008 x62) x471) (= x741 x312) (= x62 x460))) (and (=> (and x732 (and (= x581 (x215 (+ x312 32))) (= (x16 x890) x942) (= x890 (x215 (+ 32 x460))) (= x525 (> x1009 64)))) (and (=> (and (not x525) (= 64 x21)) x132) (=> (and x525 (and (= x380 (< 96 x1009)) (= x936 (x215 (+ 64 x312))) (= (x215 (+ x460 64)) x1021) (= (x1012 x1021) x296))) (and (=> (and (= 96 x21) (not x380)) x132) (=> x380 x601))))) (=> (and (= x21 32) (not x732)) x132))) (=> (and (not x456) (= 0 x21)) x132))) x372))
(assert (x883 x610))
(assert (x883 x31))
(assert (= (=> (and (or (and x66 (and (= 1 x986) (> 4294967296 x568))) (and (= x986 x463) (not x66))) (and (= x799 (x215 (+ x999 x276))) (= (x215 (+ 31 x394)) x442) (= x677 (x1 x276)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x394) (and (= true (<= x394 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x394)))) (= x999 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x442)) (<= x677 1461501637330902918203684832716283019655932542975) (not (= x686 0)) (= (< 0 x463) x66))) x571) x661))
(assert (= 0 (x830 (+ (- (+ (- 224 x649) x304) 196) (x215 (+ x617 196))))))
(assert (x883 x421))
(assert (= (and x969 x557) x94))
(assert (= (x1004 102499615646744134772650717477688572466918151731817230690449879178893085114368) (x993 102499615646744134772650717477688572466918151731817230690449879178893085114368)))
(assert (= x919 (and x359 x616)))
(assert (x883 x304))
(assert (x883 x395))
(assert (= x814 (x759 (x993 x814))))
(assert (x334 x1024))
(assert (= x320 (and x39 x644)))
(assert (x883 x999))
(assert (x883 x786))
(assert (= x147 (and x268 x988)))
(assert (= x834 (or x181 x523)))
(assert (x459 1461501637330902918203684832716283019655932542975))
(assert (x883 x404))
(assert (x883 x787))
(assert (x883 x555))
(assert (x883 x93))
(assert (x883 x957))
(assert (x883 x269))
(assert (x459 x646))
(assert (x883 x245))
(assert (x459 x814))
(assert (x883 x453))
(assert (= (and (not x146) x3) x612))
(assert (= (x1004 2376452955) (x993 2376452955)))
(assert (= (and x982 x818) x523))
(assert (= (x993 1262878978) (x1004 1262878978)))
(assert (= (and x738 x139) x547))
(assert (= x46 (and (not x949) x1000)))
(assert (x883 x72))
(assert (x883 x1022))
(assert (= x202 (and x261 (not x167))))
(assert (x314 x731))
(assert (= (and x725 x585) x177))
(assert (= (or x173 x190) x137))
(assert (x883 x436))
(assert (x883 x103))
(assert (x314 x68))
(assert (x883 x1014))
(assert (= (and x988 (not x268)) x519))
(assert (x883 x839))
(assert (= x627 (=> (and (or (and (and (< x976 4294967296) (= x67 1)) x979) (and (not x979) (= x67 x411))) (and (= (> x411 0) x979) (= (x215 (+ x54 31)) x156) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x156) x93) (= x258 (x561 x617)) (not (= x159 0)) (<= x258 1461501637330902918203684832716283019655932542975) (= x739 (x215 (+ x93 x617))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x54) (and (= true (<= x54 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x54)))))) x753)))
(assert (x883 x357))
(assert (x883 x857))
(assert (x883 x437))
(assert (= (and (not x803) x130) x773))
(assert (= (and x638 (not x410)) x889))
(assert (= (or x962 x340) x510))
(assert (x883 x426))
(assert (x883 x530))
(assert (x883 x298))
(assert (= x817 (and (not x732) x63)))
(assert (= (and x186 (not x232)) x635))
(assert (x883 x667))
(assert (x883 x918))
(assert (= (and x280 (not x358)) x51))
(assert (= x496 (=> (and (= x579 (x36 (- x469 31))) (= x609 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x5)) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x404) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x579)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x404) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x579)) (< x404 x579))) (= x844 (x215 (+ x541 32))) (not (< 18446744073709551615 x801)) (= x537 (not (> x874 1))) (= x469 (x36 (- x269 x933))) (not (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x847) (> x103 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x847 x103) (= (<= x103 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x847))))) (= x109 (x215 (+ x933 x404))) (= x801 (x631 x109)) (= (x36 (- x269 x801)) x103) (= (x215 (+ x801 31)) x5) (= (x215 (+ 32 x109)) x847) (= (x215 (+ x844 x801)) x185) (= (x215 (+ x844 x609)) x180) (= x404 (x631 x933)) (= x990 x944)) (and (=> (= x135 x180) x707) x537))))
(assert (= (x759 (x1004 3705713892)) 3705713892))
(assert (= (or x491 x880 x727 x492 x470 x724 x46 x641 x101 x227 x509 x49 x597 x819 x711 x848 x696 x226 x157 x281 x702 x176 x202 x524 x1016 x171 x131 x802 x635 x387 x229 x600 x547 x770) x922))
(assert (x883 x1029))
(assert (= (and x410 x638) x56))
(assert (x883 x293))
(assert (= x859 (and x341 (not x525))))
(assert (= (x379 (- x552 x958)) 0))
(assert (= x101 (and x89 x837)))
(assert (x883 x473))
(assert (x883 x253))
(assert (x883 x882))
(assert (= (x759 (x1004 2329570063)) 2329570063))
(assert (x883 x129))
(assert (= x7 (and x699 x489)))
(assert (= (x993 1245659826) (x1004 1245659826)))
(assert (= (and x546 (not x967)) x848))
(assert (= (x379 (- x151 x958)) 0))
(assert (= x256 (and x364 (not x615))))
(assert (x883 x290))
(assert (= 0 (x830 (+ (- (+ (- x224 160) 196) 196) (x215 (+ 196 x617))))))
(assert (x459 x731))
(assert (x883 x617))
(assert (= (=> (and (= x592 (> x434 0)) (= x822 (x215 (+ x277 x225))) (= x434 (x237 x151)) (= (x36 (- x822 x48)) x549) (= (x215 (+ 31 x361)) x669) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x669) x225) (= (x215 (+ 32 x822)) x654) (= x345 (x215 (+ x48 32)))) (and (=> (and x592 (and (= x649 x789) (= x654 x521) (= x114 (x311 x789)) (= x833 (> x434 32)))) (and (=> (and (= 32 x283) (not x833)) x9) (=> (and x833 (and (= (< 64 x434) x553) (= x689 (x215 (+ 32 x654))) (= x898 (x946 x224)) (= (x215 (+ x649 32)) x224))) (and (=> (and (and (= x499 (x215 (+ 64 x649))) (= x843 (> x434 96)) (= (x257 x499) x730) (= (x215 (+ 64 x654)) x332)) x553) (and (=> x843 x90) (=> (and (not x843) (= x283 96)) x9))) (=> (and (not x553) (= 64 x283)) x9))))) (=> (and (= 0 x283) (not x592)) x9))) x873))
(assert (x883 x62))
(assert (= x132 (=> (and (= x982 (< x1009 x21)) (or (not x982) (and (= (x215 (+ x1009 x312)) x720) x982))) x823)))
(assert (x883 x708))
(assert (= 0 (x830 (+ 64 (x215 (+ x617 196))))))
(assert (= x307 (and x373 x824)))
(assert (x883 x4))
(assert (= (or (and (not x208) x310) x511) x344))
(assert (x883 x116))
(assert (x883 x260))
(assert (= (x830 (x215 (+ 196 x617))) 0))
(assert (x883 x1007))
(assert (= x744 (and x27 x840)))
(assert (= (=> (and (or (not x1002) x1002) (= x1002 (= 0 x78))) x138) x607))
(assert (= x403 (and (not x506) x2)))
(assert (= 0 (x830 (+ (- (+ (- x224 x649) x304) 196) (x215 (+ 196 x617))))))
(assert (= (and (not x6) x398) x235))
(assert (= x809 (and x341 x525)))
(assert (= x424 (and x288 x28)))
(assert (= (and (not x860) x69) x299))
(assert (= x925 (x759 (x993 x925))))
(assert (= x52 (and x475 (not x843))))
(assert (x883 x502))
(assert (x883 x814))
(assert (x883 x457))
(assert (= (=> (and (and (<= 0 x428) (< 0 x925) (>= x659 0) (>= 1461501637330902918203684832716283019655932542975 x698) (= 5 x804) (<= x914 1461501637330902918203684832716283019655932542975) (>= 255 x746) (>= x153 0) (<= 0 x870) (>= x706 0) (>= x507 0) (>= 1461501637330902918203684832716283019655932542975 x507) (<= x706 255) (>= 1461501637330902918203684832716283019655932542975 x786) (>= x786 0) (>= x259 0) (<= x678 1461501637330902918203684832716283019655932542975) (= (x968 (x993 x925)) x820) (<= x115 1461501637330902918203684832716283019655932542975) (= false x975) (<= 0 x113) (<= x436 1461501637330902918203684832716283019655932542975) (<= 0 x852) (>= x604 0) (= 3705713892 x210) (>= x767 0) (<= x674 255) (= x915 true) (<= x259 1461501637330902918203684832716283019655932542975) (<= x925 1461501637330902918203684832716283019655932542975) (>= x698 0) (>= x412 0) (<= 0 x18) (>= 79228162514264337593543950335 x412) (<= 0 x407) (>= x435 0) x875 (<= 0 x76) (= (< 0 (x968 (x993 x678))) x875) (= x836 x435) (>= 1461501637330902918203684832716283019655932542975 x153) (= x839 x1024) (<= 0 x674) (<= x767 1461501637330902918203684832716283019655932542975) (not (= x210 3572374928)) (= (< 0 (x968 (x993 x925))) x105) (>= x839 0) (>= x691 0) (>= x746 0) (not (= 3084411429 x210)) x105 (<= x169 1461501637330902918203684832716283019655932542975) (>= x761 0) (<= x703 1461501637330902918203684832716283019655932542975) (= x623 x76) (= x728 false) (<= x604 1461501637330902918203684832716283019655932542975) (<= x374 1461501637330902918203684832716283019655932542975) (= x691 (x966 (x993 x925))) (= 1262878978 x50) (<= 0 x115) (>= x914 0) (<= x435 1461501637330902918203684832716283019655932542975) (<= x113 255) (<= x1005 1461501637330902918203684832716283019655932542975) (>= x703 0) (<= 0 x374) (<= x852 1461501637330902918203684832716283019655932542975) (<= x428 1461501637330902918203684832716283019655932542975) (<= x76 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x407 1461501637330902918203684832716283019655932542975) (<= 0 x53) (>= 255 x659) (= x414 false) (> x678 0) (<= x839 1461501637330902918203684832716283019655932542975) (<= x712 255) (<= 0 x712) (not (< x210 3084411429)) (>= 1461501637330902918203684832716283019655932542975 x53) (>= 255 x761) (>= x169 0) (<= x18 255) (not (< x210 2220280665)) (= (x966 (x993 x678)) x870) (>= x1005 0) (> x820 0) (<= 0 x436) (not (= x925 x678))) (and (= x623 x401) (or x205 x271) (= (x966 (x993 x1024)) x856) (< x1024 1461501637330902918203684832716283019655932542976) (= (= 0 x1024) x271) (= x286 (< x856 x1026)) (= x205 (> x1024 0)))) (and (=> (and (and (= (x215 (+ x815 32)) x85) (<= 0 x346) (= x462 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x4)) (= x655 x1024) (= x584 x1024) (= (x215 (+ 32 x882)) x460) (= (ite x162 1 0) x216) (<= x346 1461501637330902918203684832716283019655932542975) (= x605 x785) (= (x215 (+ x917 x681)) x718) (not (> 4 x269)) (= x629 (x968 (x993 x925))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x642 x1022)) (= x417 x563) (= x366 (x13 128)) (= (x215 (+ x1022 x1026)) x766) (= (x215 (+ 31 x588)) x4) (or (and (<= x269 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x395 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x395) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269)) (> x269 x395))) (= 1262878978 x626) (= x318 x504) (not (< x626 1245659826)) (= (x215 (+ x462 128)) x882) (= x534 (> x617 18446744073709551615)) (= (x215 (+ x779 31)) x413) (<= x77 1461501637330902918203684832716283019655932542975) (= (x215 (+ x15 4)) x1003) (= (x215 (+ 32 x779)) x639) (= x768 (x215 (+ 31 x85))) (>= x584 0) (= x297 (x215 (+ x639 x231))) (= (x215 (+ x917 160)) x530) (= x815 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x68)) (= x72 (x966 (x993 x1024))) (= (< x882 128) x179) (= x331 (x215 (+ 4 x116))) (> 2220280665 x626) (= x127 (x215 (+ x647 31))) (or (and (<= x269 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x907 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x269 x907) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x907) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269)))) (= x681 (x215 (+ x331 32))) (not (> x297 x269)) (not (< x269 x610)) (not (> x437 18446744073709551615)) (not (> x431 18446744073709551615)) (= x375 x605) (= x874 (x631 x1003)) (= x431 x116) (= (x215 (+ x331 31)) x395) (or (and (> x127 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x269 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x269 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x127 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x127 x269))) (= x222 (x215 (+ 160 x895))) (not (< 18446744073709551615 x867)) (= x223 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x771)) (= x437 x15) (= x485 (- x72 x1026)) (= (or x461 x179) x162) (= x346 x563) (not (= 1245659826 x626)) (= x907 (x215 (+ 31 x1003))) (= x857 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x768)) (>= 1461501637330902918203684832716283019655932542975 x584) (= x1022 (x805 (x993 x925))) (= (x215 (+ x933 x266)) x481) (= (x215 (+ x223 32)) x588) (= x551 (or x193 x534)) (not (> x917 18446744073709551615)) (= x610 (x215 (+ x867 x377))) (= x150 (ite x551 1 0)) (not (> x481 x269)) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269)) (< 163 x269)) (or (and (<= x269 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x413)) (and (< x413 x269) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269) (<= x413 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x779 (x215 (+ x606 4))) (= x617 (x215 (+ x857 x882))) (= (< 18446744073709551615 x882) x461) (= (x215 (+ 32 x1003)) x933) (= x867 (x631 x647)) (= (x215 (+ 31 x867)) x68) (= x647 (x215 (+ 4 x318))) (= x643 (x215 (+ x222 32))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x367) (and (= true (<= x367 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x367 160)))) (not (> x874 18446744073709551615)) (= (> x366 0) x422) (= x193 (> x882 x617)) (not (< x269 x718)) (= (x36 (- x269 4)) x367) (= 0 x216) (>= x77 0) (not (< 18446744073709551615 x504)) (= x150 0) (= x606 x8) (= x141 (x215 (+ x460 x867))) (= (x631 x779) x970) (= (x215 (+ x647 32)) x377) (not (> x970 18446744073709551615)) (= (x215 (+ x917 31)) x771) (= x231 (mod (* 32 x970) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> x629 0) (= x266 (mod (* 32 x874) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x642 x1026) (= (x215 (+ 4 x617)) x895) (= (x631 x331) x917) (not (> x8 18446744073709551615))) (not x286)) (and (=> (and (= x743 0) (not x422)) x172) (=> (and x422 (and (= x643 x938) (= x333 (< 32 x366)) (= (x196 160) x624))) (and (=> (and (and (= (x215 (+ 32 x643)) x776) (= x31 (x14 192)) (= x997 (< 64 x366))) x333) (and (=> (and (= x743 64) (not x997)) x172) (=> (and x997 (and (= (< 96 x366) x719) (= x143 (x215 (+ x643 64))) (= (x807 224) x797))) (and (=> (and (= 96 x743) (not x719)) x172) (=> x719 x764))))) (=> (and (not x333) (= 32 x743)) x172))))) (=> (and x286 (and (= x862 x76) (= true x455) (= false x1015))) x572))) x564))
(assert (= x73 (and x344 x979)))
(assert (= (x528 x552) 0))
(assert (= (=> (and (= x159 x488) (= x71 x54) (= x199 x82)) x515) x382))
(assert (= (x830 (+ (x215 (+ x617 196)) (- x347 196))) 0))
(assert (= x725 (and x489 (not x699))))
(assert (x883 x844))
(assert (= x229 (and x923 x381)))
(assert (= x187 (x759 (x993 x187))))
(assert (x883 x664))
(assert (x883 x249))
(assert (x883 x750))
(assert (= x1028 (or x265 x252)))
(assert (x883 x279))
(assert (= (or x922 x532 x7) x310))
(assert (x883 x201))
(assert (x883 x655))
(assert (= (and (not x585) x725) x1016))
(assert (x883 x579))
(assert (= x727 (and x284 x1030)))
(assert (= (x830 (+ (x215 (+ 196 x617)) (- (+ (- x499 160) 196) 196))) 0))
(assert (= (x993 1901074598) (x1004 1901074598)))
(assert (x883 x53))
(assert (x883 x832))
(assert (= (and x47 (not x747)) x452))
(assert (x883 x693))
(assert (= (x830 (+ (x215 (+ 196 x617)) (- (+ 196 (- x421 160)) 196))) 0))
(assert (= (x759 (x1004 18446744073709551615)) 18446744073709551615))
(assert (= x501 (or (and (not x1002) x203) x11)))
(assert (x314 x646))
(assert (x883 x928))
(assert (= (and x722 (not x754)) x338))
(assert (= (x1004 3572374928) (x993 3572374928)))
(assert (= x165 (and x137 x851)))
(assert (x883 x57))
(assert (x883 x746))
(assert (x883 x242))
(assert (= x396 (and x19 x42)))
(assert (= x533 (or x894 x554)))
(assert (x883 x535))
(assert (= (x830 (+ (x215 (+ 196 x617)) (- (+ 196 (- x392 160)) 196))) 0))
(assert (= 0 (x830 (+ (x215 (+ x617 196)) (- (+ x304 (- 256 x649)) 196)))))
(assert (= (and x197 x66) x599))
(assert (x883 x231))
(assert (x883 x587))
(assert (= x796 (and x747 x47)))
(assert (x883 x68))
(assert (x883 x789))
(assert (= 0 (x830 (+ (- (+ 196 (- x789 160)) 196) (x215 (+ 196 x617))))))
(assert (x883 x576))
(assert (= (x1004 2329570063) (x993 2329570063)))
(assert (x883 x156))
(assert (= x385 (=> (and (or (not x684) (and (= x916 (x215 (+ x277 x361))) x684)) (= (> x998 x361) x684)) x873)))
(assert (x883 x588))
(assert (x883 x992))
(assert (x883 x361))
(assert (x883 x609))
(assert (x883 x313))
(assert (x883 x346))
(assert (= 0 (x830 (+ (x215 (+ 196 x617)) (- (+ (- x238 x649) x304) 196)))))
(assert (x883 x867))
(assert (x459 x500))
(assert (= x55 (and x33 (not x333))))
(assert (= (and x751 x636) x984))
(assert (x883 x1003))
(assert (x883 x893))
(assert (x883 x864))
(assert (= x11 (and x1002 x203)))
(assert (= x190 (and (not x490) x451)))
(assert (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x759 (x1004 62805084655870755976952745400290271510621614971557940054860603637793562820608))))
(assert (x883 x937))
(assert (x883 x155))
(assert (x883 x526))
(assert (x10 x187))
(assert (= x157 (and (not x400) x309)))
(assert (x883 x148))
(assert (x883 x469))
(assert (= x988 (and x56 x650)))
(assert (= (x1004 33582922474372145882413589741236248003507108108518759994751911431010219196416) (x993 33582922474372145882413589741236248003507108108518759994751911431010219196416)))
(assert (= x572 (=> (and (and (= x977 x1010) (= x174 (= x1010 x543)) (= x543 x401)) (and (>= x862 0) (<= x862 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not x455) (not (= x576 3084411429)) (= x576 3705713892) (not x1015) (not (> 3084411429 x576)) (not (< x576 2220280665)) (not (= 3572374928 x576)) (< 0 x503) (= x503 (x968 (x993 x925))) (= x977 x862))) x174)))
(assert (= x600 (and x533 (not x961))))
(assert (= (or x330 x984) x835))
(assert (x883 x152))
(assert (x883 x628))
(assert (x883 x302))
(assert (= x539 (and (not x682) x390)))
(assert (= (x830 160) 0))
(assert (x883 x415))
(assert (x883 x408))
(assert (x883 x563))
(assert (= (=> (and (= x961 (= 0 x18)) (< x18 256) (<= 0 x18) (<= x18 255)) (and (=> (and (and (= x778 (x569 1461501637330902918203684832716283019655932542975 x814)) (<= x436 1461501637330902918203684832716283019655932542975) (= x736 0) (= x717 x782) (= x814 x884) (= (x945 (x993 x925)) x717) x321 (= x913 (x577 (x993 x814))) (= (= 0 x778) x284) (= x992 (x349 (x993 x925))) (= (x574 (x993 x814)) x745) (< (+ x992 x736) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x436) (= x745 x446) (= x814 (x798 x925 x249)) (= x821 x723) (< x436 1461501637330902918203684832716283019655932542976) (< x913 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (= x884 x723) x321) (= x249 (x430 (x993 x925)))) x961) (and (=> (and x284 (and (= x76 x199) (= x488 0))) x382) (=> (and (and (>= x703 0) (= (> x361 0) x370) (= (x215 (+ 32 x111)) x277) (= x361 (x388 128)) (< x786 1461501637330902918203684832716283019655932542976) (< x115 1461501637330902918203684832716283019655932542976) (= x111 (x215 (+ 192 x48))) (<= x703 1461501637330902918203684832716283019655932542975) (<= 0 x786) (= (x569 1461501637330902918203684832716283019655932542975 x814) x904) (= x48 (x215 (+ x690 4))) (< x604 1461501637330902918203684832716283019655932542976) (<= x604 1461501637330902918203684832716283019655932542975) (>= x604 0) (>= 1461501637330902918203684832716283019655932542975 x786) (> 1461501637330902918203684832716283019655932542976 x703) (<= 0 x115) (<= x115 1461501637330902918203684832716283019655932542975)) (not x284)) (and (=> (and (not x370) (= x998 0)) x385) (=> (and x370 (and (= x277 x888) (= (> x361 32) x410) (= (x233 160) x709))) (and (=> (and (not x410) (= x998 32)) x385) (=> (and x410 (and (= x34 (x20 192)) (= x650 (> x361 64)) (= (x215 (+ x277 32)) x787))) (and (=> (and (= x998 64) (not x650)) x385) (=> (and x650 (and (= (> x361 96) x268) (= (x360 224) x591) (= x148 (x215 (+ 64 x277))))) (and (=> (and (= x998 96) (not x268)) x385) (=> x268 x246))))))))))) (=> (and (not x961) (and (= x199 x76) (= 0 x488))) x382))) x512))
(assert (x883 x771))
(assert (= x637 (and (not x763) x419)))
(assert (x883 x903))
(assert (x883 x488))
(assert (x883 x411))
(assert (x883 x745))
(assert (= (x993 4294967296) (x1004 4294967296)))
(assert (x883 x32))
(assert (= 0 (x830 (+ (x215 (+ 196 x617)) (- (+ x304 (- 128 x649)) 196)))))
(assert (x883 x901))
(assert (= x327 (and x510 (not x592))))
(assert (x334 x925))
(assert (x883 x932))
(assert (= (x830 (+ (x215 (+ 196 x617)) (- (+ (- x287 x649) x304) 196))) 0))
(assert (= (and x533 x961) x1030))
(assert (= x910 (and x177 (not x241))))
(assert (= 0 (x830 (+ (- x164 196) (x215 (+ x617 196))))))
(assert (x883 x668))
(assert (= (and x248 (not x869)) x685))
(assert (= x825 (and x64 x567)))
(assert (x883 x663))
(assert (= x118 (and (not x788) x1028)))
(assert (= x823 (=> (and (= (x215 (+ 32 x928)) x575) (= (x215 (+ x312 x593)) x928) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x80) x593) (= (x215 (+ 32 x234)) x729) (= x948 (< 0 x970)) (= (x215 (+ 31 x1009)) x80) (= x168 (x36 (- x928 x895))) (= (x215 (+ 32 x973)) x234)) (and (=> (and (not x948) (= x575 x694)) x262) (=> (and x948 (and (= (x215 (+ x639 32)) x294) (= x676 (x215 (+ 32 x575))) (<= x474 1461501637330902918203684832716283019655932542975) (= x288 (> x970 1)) (= (x631 x639) x474))) (and (=> (and (and (= x931 (x631 x294)) (= (> x970 2) x885) (= (x215 (+ 32 x676)) x371) (<= x931 1461501637330902918203684832716283019655932542975) (= x439 (x215 (+ 32 x294)))) x288) (and (=> (and x885 (and (= x760 (x215 (+ x371 32))) (= x658 (x215 (+ 32 x439))) (= x562 (x631 x439)) (= (< 3 x970) x886) (<= x562 1461501637330902918203684832716283019655932542975))) (and (=> x886 x971) (=> (and (not x886) (= x694 x760)) x262))) (=> (and (not x885) (= x371 x694)) x262))) (=> (and (= x694 x676) (not x288)) x262)))))))
(assert (= 0 (x379 (- x499 x958))))
(assert (x883 x386))
(assert (x883 x879))
(assert (= (x830 (+ (x215 (+ 196 x617)) (- (+ (- x421 x649) x304) 196))) 0))
(assert (x883 x263))
(assert (= (and x241 x177) x492))
(assert (= x26 (=> (and (= x1007 (x968 (x993 x429))) (= (= 0 x1007) x556) (= x429 (x569 1461501637330902918203684832716283019655932542975 x814))) (and (=> (and (and (= x488 0) (= x76 x199)) x556) x382) (=> (and (not x556) (and (= (> x78 0) x969) (or (not x969) (and (and x695 (= x40 (= (x985 (x993 x429)) x251)) (= x100 (x896 (x993 x925))) (> 4294967296 x32) (= (x896 (x993 x429)) x251) (= (<= x100 (x985 (x993 x925))) x695) x40) x969)))) x607)))))
(assert (x883 x766))
(assert (x883 x640))
(assert (x883 x916))
(assert (x883 x977))
(assert (x459 x937))
(assert (= (x993 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x1004 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x883 x717))
(assert (= x341 (and x732 x63)))
(assert (= x130 (and x320 x618)))
(assert (x883 x942))
(assert (= x440 (and x167 x261)))
(assert (x883 x776))
(assert (x883 x958))
(assert (= 0 (x830 (+ (- (+ x304 (- x151 x649)) 196) (x215 (+ 196 x617))))))
(assert (= x608 (and (not x286) x595)))
(assert (x883 x584))
(assert (x883 x65))
(assert (x883 x15))
(assert (= 0 (x379 (- x421 x958))))
(assert (x883 x429))
(assert (= (and x137 (not x851)) x441))
(assert (x883 x435))
(assert (= x261 (and x328 (not x590))))
(assert (x883 x294))
(assert (x883 x593))
(assert (= (x830 x1021) 0))
(assert (= x764 (=> (and (= (x215 (+ 96 x643)) x98) (= (not (< 128 x366)) x484) (= x263 (x443 256))) (and x484 (=> (= 128 x743) x172)))))
(assert (= (and x329 (not x456)) x613))
(assert (x883 x234))
(assert (= (and x673 (not x556)) x557))
(assert (x883 x374))
(assert (x883 x909))
(assert (x883 x681))
(assert (= (and x608 (not x422)) x220))
(assert (x883 x318))
(assert (x883 x5))
(assert (x883 x482))
(assert (x883 x806))
(assert (x883 x632))
(assert (= x738 (and x440 (not x97))))
(assert (= (and x213 (not x833)) x355))
(assert (x459 x156))
(assert (x883 x986))
(assert (x883 x394))
(assert (=> (>= 10000 x587) (= (x1004 x587) (x993 x587))))
(assert (= (and x120 x612) x597))
(assert (x883 x936))
(assert (x883 x521))
(assert (x883 x175))
(assert (= (and x834 (not x948)) x219))
(assert (= (=> (and (= (> x664 x342) x110) (or x110 (not x110))) x816) x687))
(assert (x883 x540))
(assert (= (and x64 (not x567)) x479))
(assert (= (and x809 x380) x247))
(assert (x883 x847))
(assert (= 2249206060 (x759 (x1004 2249206060))))
(assert (= 0 (x528 x224)))
(assert (= (x759 (x1004 1245659826)) 1245659826))
(assert (= x427 (=> (and (= x788 (= x849 0)) (or (and (and (= x849 x243) (= x152 x183)) (not x788)) (and (and (= x705 (x900 (x993 x587))) (= x849 x243) (= x326 (x125 (x993 x925))) (= x152 x183) (< (+ x158 x326) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x326 x516) (= x765 x705) (= x158 0)) x788))) x1017)))
(assert (= (x993 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1004 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x314 x4))
(assert (= x595 true))
(assert (= x983 (or x951 x95)))
(assert (= (x759 (x1004 3084411429)) 3084411429))
(assert (x314 x669))
(assert (x883 x736))
(assert (= x63 (and x329 x456)))
(assert (x883 x104))
(assert (x883 x804))
(assert (= (x1004 1845979623) (x993 1845979623)))
(assert (x883 x690))
(assert (x459 x68))
(assert (= (and x282 (not x370)) x930))
(assert (x314 x771))
(assert (= 0 (x379 (- 192 x958))))
(assert (x883 x952))
(assert (= (x830 (+ (- (+ (- 192 x649) x304) 196) (x215 (+ 196 x617)))) 0))
(assert (x883 x331))
(assert (x883 x442))
(assert (x883 x761))
(assert (x883 x1013))
(assert (x883 x278))
(assert (= (x759 (x1004 3572374928)) 3572374928))
(assert (x883 x514))
(assert (= (and x824 (not x373)) x880))
(assert (= x91 (and x56 (not x650))))
(assert (x883 x705))
(assert (= (x379 (- 128 x958)) 0))
(assert (x883 x236))
(assert (x883 x643))
(assert (x883 x142))
(assert (x883 x778))
(assert (x883 x591))
(assert (= x1025 (and x74 (not x553))))
(assert (x883 x78))
(assert (x883 x852))
(assert (x883 x289))
(assert (x883 x559))
(assert (x883 x431))
(assert (= (or x956 x599) x218))
(assert (= (x993 64069044923792539370177021244577383457373632460708312080110356237917649633280) (x1004 64069044923792539370177021244577383457373632460708312080110356237917649633280)))
(assert (x883 x646))
(assert (x883 x308))
(assert (x883 x428))
(assert (x883 x797))
(assert (x883 x339))
(assert (= 0 (x830 (+ (- x871 196) (x215 (+ 196 x617))))))
(assert (= x811 (and x480 (not x110))))
(assert (x883 x933))
(assert (x883 x678))
(assert (= x340 (and x495 x684)))
(assert (= (=> (and (= (x215 (+ 32 x544)) x792) (= (x215 (+ x45 96)) x544) (= (x36 (- x918 32)) x453) (= x211 (> x343 0)) (= x918 (x36 (- x45 x690))) (= x634 96) (= (x215 (+ x415 x1014)) x45) (= (x126 128) x343)) (and (=> (and (not x211) (= 0 x140)) x989) (=> (and (and (= x903 x792) (= (< 32 x343) x12) (= x508 (x838 160))) x211) (and (=> (and (not x12) (= 32 x140)) x989) (=> (and (and (= x214 (x964 192)) (= (x215 (+ 32 x792)) x513) (= (> x343 64) x86)) x12) (and (=> (and (not x86) (= x140 64)) x989) (=> (and (and (= x425 (x520 224)) (= (> x343 96) x860) (= x303 (x215 (+ x792 64)))) x86) (and (=> (and (= x140 96) (not x860)) x989) (=> x860 x37))))))))) x573))
(assert (= (x993 113209349505197351213641468582317386984598294884268236158119619414039440916480) (x1004 113209349505197351213641468582317386984598294884268236158119619414039440916480)))
(assert (= (=> (and (and (not (or (> x184 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x184 32) (= (<= x184 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x542 (x215 (+ 31 x184))) (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904 x542) x274) (>= 1461501637330902918203684832716283019655932542975 x207) (not (= 0 x498)) (= x490 (> x198 0)) (= x353 (x215 (+ x391 x274))) (= (x119 x391) x207)) (or (and (= x198 x99) (not x490)) (and x490 (and (= 1 x99) (< x236 4294967296))))) x83) x868))
(assert (= x495 (or x519 x147 x91 x930 x889)))
(assert (= (and x692 x322) x359))
(assert (= x75 (and x69 x860)))
(assert (x883 x582))
(assert (= x846 (and x424 (not x885))))
(assert (= (and x409 x701) x546))
(assert (x883 x168))
(assert (= (and x145 x468) x265))
(assert (= x638 (and x282 x370)))
(assert (x10 x500))
(assert (x883 x189))
(assert (= x971 (=> (and (= x540 (x631 x658)) (= (not (< 4 x970)) x206) (<= x540 1461501637330902918203684832716283019655932542975) (= x121 (x215 (+ x760 32)))) (and x206 (=> (= x694 x121) x262)))))
(assert (= x923 (and x598 x465)))
(assert (x883 x529))
(assert (x883 x140))
(assert (x883 x741))
(assert (x883 x902))
(assert (x883 x460))
(assert (x883 x913))
(assert (= (x1004 1461501637330902918203684832716283019655932542975) (x993 1461501637330902918203684832716283019655932542975)))
(assert (= x816 (=> (= (> x279 0) x6) (and (=> (and x6 (= (> x279 0) x400)) (and (=> (and x400 (and (= x668 x871) (= (x128 x871) x187) (= (= x187 x301) x19) (= x301 (x569 1461501637330902918203684832716283019655932542975 x187)))) (and (=> (and (= (> x96 0) x194) x19) (and (=> (and (and (= x199 x76) (= 0 x488)) (not x194)) x382) (=> (and x194 (and (= x245 (x128 x293)) (= x293 x316) (= (or (and (<= x104 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x245 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x245) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x104)) (< x245 x104))) x373) (= x104 (x36 (- x1029 31))) (= x1029 (x36 (- x514 x316))))) (and (=> (and x373 (and (= (> x555 18446744073709551615) x586) (= x289 (x215 (+ x245 x316))) (= (x128 x289) x555))) (and (=> (and (and (= 0 x488) (= x76 x199)) x586) x382) (=> (and (not x586) (and (= x763 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x842) (<= x106 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x106 x842)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x842) (<= x106 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x106 (x215 (+ x289 32))) (= x842 (x36 (- x514 x555))))) (and (=> (and (not x763) (and (= (< 0 x861) x230) (or (and (and x217 (= (>= (x726 (x993 x925)) x65) x217) x813 (= (= (x726 (x993 x187)) x335) x813) (= x65 (x351 (x993 x925))) (< x129 4294967296) (= x335 (x351 (x993 x187)))) x230) (not x230)))) x841) (=> (and x763 (and (= x76 x199) (= 0 x488))) x382))))) (=> (and (and (= x488 0) (= x199 x76)) (not x373)) x382))))) (=> (and (and (= x488 0) (= x76 x199)) (not x19)) x382))) (=> (and (not x400) (and (= x488 0) (= x199 x76))) x382))) (=> (not x6) x26)))))
(assert (= x322 (and x390 x682)))
(assert (= (and x793 x538) x423))
(assert (x883 x402))
(assert (x883 x691))
(assert (= (and (not x39) x644) x808))
(assert (x883 x815))
(assert (x883 x672))
(assert (= (and x809 (not x380)) x850))
(assert (x334 x904))
(assert (= 1553423035 (x759 (x1004 1553423035))))
(assert (x883 x697))
(assert (x883 x98))
(assert (= (and x923 (not x381)) x756))
(assert (=> (>= 10000 x904) (= (x993 x904) (x1004 x904))))
(assert (x883 x377))
(assert (= (and x788 x1028) x405))
(assert (= x532 (and (not x795) x501)))
(assert (= (and x518 x432) x716))
(assert (x883 x925))
(assert (x883 x858))
(assert (x883 x543))
(assert (= x195 (and (not x969) x557)))
(assert (= 2005408114 (x759 (x1004 2005408114))))
(assert (= (x759 (x1004 64069044923792539370177021244577383457373632460708312080110356237917649633280)) 64069044923792539370177021244577383457373632460708312080110356237917649633280))
(assert (x883 x258))
(assert (= (x379 (- x287 x958)) 0))
(check-sat)
(exit)