(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x1426 0)) (((x664 (x543 Int)) (x1716 (x186 x1426) (x1610 x1426) (x1358 Int)) (x936 (x726 x1426) (x1638 Int)) (x672 (x1686 x1426) (x1229 x1426) (x990 x1426) (x842 x1426) (x237 Int)))))
(declare-fun x1011 () Bool)
(declare-fun x1616 () Bool)
(declare-fun x2 () Int)
(declare-fun x1421 () Bool)
(declare-fun x839 () Bool)
(declare-fun x981 () Bool)
(declare-fun x1628 () Int)
(declare-fun x1676 () Bool)
(declare-fun x609 () Int)
(declare-fun x917 () Bool)
(declare-fun x1351 () Int)
(declare-fun x129 () Int)
(declare-fun x627 () Bool)
(declare-fun x1205 () x1426)
(declare-fun x919 () Int)
(declare-fun x268 (Int) Int)
(declare-fun x523 () Bool)
(declare-fun x430 () Int)
(declare-fun x1581 () Int)
(declare-fun x1502 () Bool)
(declare-fun x853 () Int)
(declare-fun x322 () Bool)
(declare-fun x1529 () Int)
(declare-fun x940 () Int)
(declare-fun x17 () Int)
(declare-fun x342 () Int)
(declare-fun x1291 () Bool)
(declare-fun x1137 () Int)
(declare-fun x102 () Bool)
(declare-fun x915 () Int)
(declare-fun x772 () Int)
(declare-fun x291 () Int)
(declare-fun x1724 () Int)
(declare-fun x1156 () Int)
(declare-fun x1481 () Bool)
(declare-fun x894 () x1426)
(declare-fun x642 () Bool)
(declare-fun x1401 () Int)
(declare-fun x1736 () Int)
(declare-fun x1162 () Bool)
(declare-fun x458 () Bool)
(declare-fun x1726 () Bool)
(declare-fun x1729 () x1426)
(declare-fun x548 () Int)
(declare-fun x823 () Int)
(declare-fun x542 () Int)
(declare-fun x826 () Int)
(declare-fun x1275 () Bool)
(declare-fun x11 () Int)
(declare-fun x1043 () Int)
(declare-fun x326 (Int) Int)
(declare-fun x1354 () Bool)
(declare-fun x1364 () Bool)
(declare-fun x1728 () x1426)
(declare-fun x505 () Bool)
(declare-fun x1625 () Int)
(declare-fun x910 () Bool)
(declare-fun x1227 () Int)
(declare-fun x316 () x1426)
(declare-fun x678 () x1426)
(declare-fun x387 () Int)
(declare-fun x1247 () Bool)
(declare-fun x922 () Int)
(declare-fun x740 () Int)
(declare-fun x687 () Int)
(declare-fun x479 () Bool)
(declare-fun x1680 () Bool)
(declare-fun x621 () Bool)
(declare-fun x1521 () Int)
(declare-fun x235 () Int)
(declare-fun x1264 () Int)
(declare-fun x304 () Int)
(declare-fun x526 () Int)
(declare-fun x972 () Bool)
(declare-fun x1618 () Bool)
(declare-fun x1558 () Int)
(declare-fun x986 () Bool)
(declare-fun x950 () Int)
(declare-fun x742 () Int)
(declare-fun x368 (Int) Int)
(declare-fun x236 () Bool)
(declare-fun x1563 () x1426)
(declare-fun x64 () Int)
(declare-fun x707 () Int)
(declare-fun x1689 () Bool)
(declare-fun x1070 () Bool)
(declare-fun x1207 () Int)
(declare-fun x197 () x1426)
(declare-fun x128 () Bool)
(declare-fun x1849 () Int)
(declare-fun x1411 () Bool)
(declare-fun x1688 () Int)
(declare-fun x991 () Int)
(declare-fun x487 () Bool)
(declare-fun x797 () Int)
(declare-fun x786 () x1426)
(declare-fun x983 () Bool)
(declare-fun x1174 () x1426)
(declare-fun x913 () Int)
(declare-fun x1784 () Int)
(declare-fun x1480 () Int)
(declare-fun x1812 () Bool)
(declare-fun x1645 () Int)
(declare-fun x185 () Int)
(declare-fun x513 () Int)
(declare-fun x1661 () x1426)
(declare-fun x1772 () Bool)
(declare-fun x1571 () Bool)
(declare-fun x537 () Bool)
(declare-fun x843 () Bool)
(declare-fun x1281 () Int)
(declare-fun x1006 () Int)
(declare-fun x1038 () Int)
(declare-fun x1579 () Bool)
(declare-fun x927 () Int)
(declare-fun x1498 () Bool)
(declare-fun x1714 () Int)
(declare-fun x926 (Int Int) Int)
(declare-fun x230 () Bool)
(declare-fun x782 () Int)
(declare-fun x631 () Bool)
(declare-fun x240 (Int) Int)
(declare-fun x1220 () Int)
(declare-fun x301 () Int)
(declare-fun x1439 () Int)
(declare-fun x470 () Bool)
(declare-fun x1124 (Int) Int)
(declare-fun x702 () Int)
(declare-fun x1609 () Bool)
(declare-fun x933 () Bool)
(declare-fun x995 () Int)
(declare-fun x1515 () Bool)
(declare-fun x343 (Int) Int)
(declare-fun x1126 () Int)
(declare-fun x858 () Bool)
(declare-fun x339 () Int)
(declare-fun x1130 () Bool)
(declare-fun x603 () Int)
(declare-fun x1554 () Int)
(declare-fun x1188 () Int)
(declare-fun x472 () x1426)
(declare-fun x455 () Int)
(declare-fun x1000 () Int)
(declare-fun x245 () Bool)
(declare-fun x1089 () x1426)
(declare-fun x1226 () Int)
(declare-fun x345 () Bool)
(declare-fun x94 () Bool)
(declare-fun x1142 () Bool)
(declare-fun x1390 () Bool)
(declare-fun x1256 () Int)
(declare-fun x947 () Int)
(declare-fun x699 () Int)
(declare-fun x879 () Bool)
(declare-fun x1818 () Int)
(declare-fun x1053 () Bool)
(declare-fun x271 () Bool)
(declare-fun x659 () Int)
(declare-fun x872 () Int)
(declare-fun x1347 () Int)
(declare-fun x1073 () Int)
(declare-fun x138 () Int)
(declare-fun x673 () Bool)
(declare-fun x637 () x1426)
(declare-fun x1514 () Int)
(declare-fun x420 () Bool)
(declare-fun x156 () x1426)
(declare-fun x1088 () Int)
(declare-fun x459 () Int)
(declare-fun x363 () Bool)
(declare-fun x1506 () Bool)
(declare-fun x1041 () Bool)
(declare-fun x401 () Bool)
(declare-fun x508 (Int) Int)
(declare-fun x1414 () Bool)
(declare-fun x211 () Bool)
(declare-fun x1580 () Int)
(declare-fun x1623 () Int)
(declare-fun x1858 () Int)
(declare-fun x1027 () Bool)
(declare-fun x1001 () x1426)
(declare-fun x1078 () Int)
(declare-fun x1621 () x1426)
(declare-fun x1487 () Bool)
(declare-fun x290 () Int)
(declare-fun x579 () Int)
(declare-fun x1052 () Int)
(declare-fun x514 () Bool)
(declare-fun x77 () Int)
(declare-fun x482 () Int)
(declare-fun x1493 () Bool)
(declare-fun x873 () Bool)
(declare-fun x1389 () Bool)
(declare-fun x1352 () Int)
(declare-fun x1045 () x1426)
(declare-fun x993 () Int)
(declare-fun x447 () Int)
(declare-fun x1396 () Bool)
(declare-fun x1460 (Int) Int)
(declare-fun x1234 () x1426)
(declare-fun x939 () Bool)
(declare-fun x1555 () Int)
(declare-fun x1036 () Int)
(declare-fun x1296 () Int)
(declare-fun x1322 () Int)
(declare-fun x1556 () Int)
(declare-fun x124 () x1426)
(declare-fun x1508 () Bool)
(declare-fun x636 () Bool)
(declare-fun x409 () Bool)
(declare-fun x851 () Bool)
(declare-fun x534 () Bool)
(declare-fun x577 () Int)
(declare-fun x478 () Bool)
(declare-fun x784 () Int)
(declare-fun x40 () Bool)
(declare-fun x1632 () Bool)
(declare-fun x1800 () Int)
(declare-fun x1012 () x1426)
(declare-fun x1617 () Int)
(declare-fun x1530 () Int)
(declare-fun x1366 () Bool)
(declare-fun x1641 () Int)
(declare-fun x978 () Int)
(declare-fun x569 () Int)
(declare-fun x82 () Int)
(declare-fun x1488 () Bool)
(declare-fun x733 (Int) Int)
(declare-fun x1807 () Bool)
(declare-fun x1323 () Bool)
(declare-fun x1755 () Int)
(declare-fun x1545 () Int)
(declare-fun x165 () Bool)
(declare-fun x1016 () Int)
(declare-fun x741 () x1426)
(declare-fun x883 () Bool)
(declare-fun x1846 () Int)
(declare-fun x463 () Int)
(declare-fun x1268 () Int)
(declare-fun x887 () Int)
(declare-fun x758 () Int)
(declare-fun x671 () Int)
(declare-fun x12 () Int)
(declare-fun x1398 () Bool)
(declare-fun x755 () Bool)
(declare-fun x1151 () Int)
(declare-fun x50 () Int)
(declare-fun x814 () Bool)
(declare-fun x1470 () Bool)
(declare-fun x1270 () Int)
(declare-fun x1348 () Int)
(declare-fun x1851 () Int)
(declare-fun x60 () Bool)
(declare-fun x272 () Bool)
(declare-fun x47 () Int)
(declare-fun x1145 () Int)
(declare-fun x392 () Bool)
(declare-fun x1040 () Int)
(declare-fun x1277 () x1426)
(declare-fun x1479 () Int)
(declare-fun x1113 () Bool)
(declare-fun x791 () Int)
(declare-fun x597 () x1426)
(declare-fun x946 () Bool)
(declare-fun x1197 () Int)
(declare-fun x1301 () Bool)
(declare-fun x1517 () Int)
(declare-fun x1271 () Bool)
(declare-fun x133 () Bool)
(declare-fun x1692 () Bool)
(declare-fun x869 () Bool)
(declare-fun x723 () x1426)
(declare-fun x1219 () x1426)
(declare-fun x1732 () Int)
(declare-fun x533 () Bool)
(declare-fun x622 () Int)
(declare-fun x971 () Int)
(declare-fun x1318 () Int)
(declare-fun x809 () Int)
(declare-fun x848 () Bool)
(declare-fun x1375 () x1426)
(declare-fun x1278 () Bool)
(declare-fun x750 () Int)
(declare-fun x1844 () Bool)
(declare-fun x441 () Int)
(declare-fun x1546 () Bool)
(declare-fun x1325 () Int)
(declare-fun x104 () Bool)
(declare-fun x222 () Int)
(declare-fun x1861 () Bool)
(declare-fun x701 () x1426)
(declare-fun x675 () Int)
(declare-fun x1255 () Int)
(declare-fun x467 () Bool)
(declare-fun x1449 () Int)
(declare-fun x903 () Bool)
(declare-fun x1520 () Bool)
(declare-fun x546 () Bool)
(declare-fun x57 () Int)
(declare-fun x831 () Int)
(declare-fun x46 () Bool)
(declare-fun x1441 () x1426)
(declare-fun x1117 () Bool)
(declare-fun x1652 () Bool)
(declare-fun x1288 () Int)
(declare-fun x914 (Int) Int)
(declare-fun x340 () Int)
(declare-fun x1055 () Int)
(declare-fun x584 () Bool)
(declare-fun x918 () Bool)
(declare-fun x1594 () Int)
(declare-fun x575 (Int) Int)
(declare-fun x1349 () x1426)
(declare-fun x980 () Bool)
(declare-fun x985 () Int)
(declare-fun x865 () Bool)
(declare-fun x892 () Int)
(declare-fun x489 () Bool)
(declare-fun x49 () Bool)
(declare-fun x522 () Bool)
(declare-fun x42 () Bool)
(declare-fun x1474 () Bool)
(declare-fun x968 () Bool)
(declare-fun x1114 () x1426)
(declare-fun x1779 () Bool)
(declare-fun x1806 () Bool)
(declare-fun x352 () Bool)
(declare-fun x1722 (Int) Int)
(declare-fun x238 () Bool)
(declare-fun x802 (Int) Int)
(declare-fun x685 () Int)
(declare-fun x312 (Int Int) Int)
(declare-fun x1324 () Bool)
(declare-fun x306 () Int)
(declare-fun x1796 () Int)
(declare-fun x1832 () Int)
(declare-fun x189 () Bool)
(declare-fun x1524 () Bool)
(declare-fun x1056 () Int)
(declare-fun x33 () Bool)
(declare-fun x1639 () Bool)
(declare-fun x1453 () Int)
(declare-fun x177 () Int)
(declare-fun x1294 () Bool)
(declare-fun x502 () Int)
(declare-fun x761 () Int)
(declare-fun x760 () Int)
(declare-fun x1009 () Bool)
(declare-fun x119 () Int)
(declare-fun x1394 () Int)
(declare-fun x1564 () Bool)
(declare-fun x732 () Int)
(declare-fun x140 () Bool)
(declare-fun x850 (x1426) Int)
(declare-fun x1307 () Int)
(declare-fun x615 (Int) Int)
(declare-fun x1120 () Int)
(declare-fun x899 () x1426)
(declare-fun x874 () Int)
(declare-fun x599 () Int)
(declare-fun x1069 (Int Int) Int)
(declare-fun x1532 () Int)
(declare-fun x414 () Bool)
(declare-fun x1393 () Int)
(declare-fun x215 () Int)
(declare-fun x1768 () Int)
(declare-fun x123 () Int)
(declare-fun x344 () Int)
(declare-fun x1631 () Bool)
(declare-fun x202 () Int)
(declare-fun x1706 () Bool)
(declare-fun x1519 () Int)
(declare-fun x531 () Bool)
(declare-fun x194 () Int)
(declare-fun x1346 () Bool)
(declare-fun x1562 () Bool)
(declare-fun x1573 () Int)
(declare-fun x1080 () Int)
(declare-fun x1253 () Int)
(declare-fun x1536 () Bool)
(declare-fun x1703 () Int)
(declare-fun x1228 () Int)
(declare-fun x1372 () Bool)
(declare-fun x1640 () Int)
(declare-fun x53 () Bool)
(declare-fun x1843 () Bool)
(declare-fun x293 () Int)
(declare-fun x779 () Bool)
(declare-fun x34 () x1426)
(declare-fun x1257 () Bool)
(declare-fun x1762 () Int)
(declare-fun x715 () Int)
(declare-fun x1 () Int)
(declare-fun x908 (Int) Int)
(declare-fun x157 () Bool)
(declare-fun x1283 () Int)
(declare-fun x1642 () x1426)
(declare-fun x1490 () Int)
(declare-fun x1274 () Int)
(declare-fun x854 () Bool)
(declare-fun x254 () Int)
(declare-fun x407 () Bool)
(declare-fun x1108 () Int)
(declare-fun x764 () Bool)
(declare-fun x1419 () Int)
(declare-fun x920 () Bool)
(declare-fun x1526 () Int)
(declare-fun x719 () Int)
(declare-fun x1666 () Bool)
(declare-fun x1713 () Bool)
(declare-fun x838 () Int)
(declare-fun x694 () Bool)
(declare-fun x710 (x1426) Int)
(declare-fun x380 () Int)
(declare-fun x1235 () Int)
(declare-fun x364 () Bool)
(declare-fun x1022 () Bool)
(declare-fun x889 () Int)
(declare-fun x1709 () Int)
(declare-fun x474 () Bool)
(declare-fun x880 () x1426)
(declare-fun x354 () Bool)
(declare-fun x36 () Int)
(declare-fun x1760 () Int)
(declare-fun x630 () x1426)
(declare-fun x1374 () Int)
(declare-fun x1359 () Int)
(declare-fun x16 (x1426) Int)
(declare-fun x1681 () Bool)
(declare-fun x1450 () Int)
(declare-fun x1663 () Int)
(declare-fun x1057 () Int)
(declare-fun x619 () Int)
(declare-fun x500 () Int)
(declare-fun x152 () Int)
(declare-fun x1339 () Bool)
(declare-fun x617 () Bool)
(declare-fun x788 () Int)
(declare-fun x1373 () Int)
(declare-fun x566 (Int) Int)
(declare-fun x539 () Int)
(declare-fun x405 () Int)
(declare-fun x1152 () Bool)
(declare-fun x1531 () Int)
(declare-fun x335 () Int)
(declare-fun x1491 () Int)
(declare-fun x1853 () Int)
(declare-fun x1365 () Int)
(declare-fun x1510 () Int)
(declare-fun x1695 () Bool)
(declare-fun x253 () Bool)
(declare-fun x41 () Bool)
(declare-fun x456 () Bool)
(declare-fun x509 () Int)
(declare-fun x243 () Int)
(declare-fun x406 () Bool)
(declare-fun x281 () Bool)
(declare-fun x1243 () Int)
(declare-fun x127 () Bool)
(declare-fun x1263 () Bool)
(declare-fun x1802 () Bool)
(declare-fun x1583 () Int)
(declare-fun x1395 () Int)
(declare-fun x1018 () Bool)
(declare-fun x1360 () Bool)
(declare-fun x945 () Int)
(declare-fun x1330 () x1426)
(declare-fun x1808 () Int)
(declare-fun x890 () Int)
(declare-fun x1062 () Bool)
(declare-fun x795 () Int)
(declare-fun x486 () Int)
(declare-fun x1353 () Bool)
(declare-fun x381 () Int)
(declare-fun x351 () Int)
(declare-fun x1178 () Bool)
(declare-fun x303 () Int)
(declare-fun x1576 () Int)
(declare-fun x1433 () Int)
(declare-fun x1725 () x1426)
(declare-fun x1448 () Int)
(declare-fun x689 () Int)
(declare-fun x550 () Int)
(declare-fun x703 () Int)
(declare-fun x1711 () Bool)
(declare-fun x180 () Int)
(declare-fun x95 () Bool)
(declare-fun x516 (Int) Int)
(declare-fun x1061 () Int)
(declare-fun x438 () Bool)
(declare-fun x1210 () Int)
(declare-fun x1072 () Bool)
(declare-fun x296 () Int)
(declare-fun x346 () Int)
(declare-fun x1024 () Bool)
(declare-fun x896 () Int)
(declare-fun x1286 () Int)
(declare-fun x52 () Int)
(declare-fun x856 () Bool)
(declare-fun x1030 () x1426)
(declare-fun x734 () x1426)
(declare-fun x930 () Int)
(declare-fun x773 () Bool)
(declare-fun x1336 () Bool)
(declare-fun x1042 () Bool)
(declare-fun x490 () Int)
(declare-fun x1658 () Bool)
(declare-fun x923 () Int)
(declare-fun x1293 () Bool)
(declare-fun x1099 () Int)
(declare-fun x173 () Int)
(declare-fun x641 () x1426)
(declare-fun x1303 () x1426)
(declare-fun x999 () Bool)
(declare-fun x239 () Bool)
(declare-fun x1004 () Bool)
(declare-fun x1700 () Bool)
(declare-fun x816 () Bool)
(declare-fun x911 () Bool)
(declare-fun x394 () Bool)
(declare-fun x466 () Int)
(declare-fun x623 () Int)
(declare-fun x369 () Bool)
(declare-fun x1540 () Int)
(declare-fun x302 () Int)
(declare-fun x904 () Bool)
(declare-fun x669 () Int)
(declare-fun x92 () Int)
(declare-fun x483 () Bool)
(declare-fun x404 () Int)
(declare-fun x792 () Bool)
(declare-fun x457 () Bool)
(declare-fun x859 () Int)
(declare-fun x1369 () Bool)
(declare-fun x199 () Bool)
(declare-fun x166 () Bool)
(declare-fun x1186 () Int)
(declare-fun x1262 () x1426)
(declare-fun x1584 () Int)
(declare-fun x1370 () Bool)
(declare-fun x1620 () Int)
(declare-fun x1780 () Bool)
(declare-fun x969 () Bool)
(declare-fun x1382 () Int)
(declare-fun x341 () Bool)
(declare-fun x1669 () Int)
(declare-fun x233 () Bool)
(declare-fun x83 () Int)
(declare-fun x744 () Bool)
(declare-fun x295 () Int)
(declare-fun x492 () Int)
(declare-fun x1799 () Int)
(declare-fun x1081 () Int)
(declare-fun x1230 () Bool)
(declare-fun x1106 () Int)
(declare-fun x22 () Bool)
(declare-fun x1723 (x1426) Int)
(declare-fun x1146 () Int)
(declare-fun x1752 () Int)
(declare-fun x832 () Bool)
(declare-fun x1116 () Bool)
(declare-fun x1743 () Int)
(declare-fun x866 () Bool)
(declare-fun x1427 () Int)
(declare-fun x1327 (Int) Int)
(declare-fun x1329 () Int)
(declare-fun x1338 () Bool)
(declare-fun x629 () Int)
(declare-fun x1597 () Int)
(declare-fun x628 () Bool)
(declare-fun x193 () Bool)
(declare-fun x1223 () x1426)
(declare-fun x618 () Int)
(declare-fun x1705 (Int) Int)
(declare-fun x571 () Int)
(declare-fun x1176 () Int)
(declare-fun x1104 () Int)
(declare-fun x580 () Bool)
(declare-fun x1831 () Bool)
(declare-fun x1560 () Bool)
(declare-fun x209 () Bool)
(declare-fun x475 () Bool)
(declare-fun x81 () Int)
(declare-fun x218 () x1426)
(declare-fun x1034 () Int)
(declare-fun x333 (Int) Int)
(declare-fun x1552 () Bool)
(declare-fun x256 () Int)
(declare-fun x259 () Int)
(declare-fun x811 () Bool)
(declare-fun x1310 () x1426)
(declare-fun x1568 () Bool)
(declare-fun x130 (Int) Int)
(declare-fun x1079 () Int)
(declare-fun x465 () Int)
(declare-fun x586 (x1426) Int)
(declare-fun x1782 () x1426)
(declare-fun x1635 () Int)
(declare-fun x269 () Bool)
(declare-fun x1687 () Int)
(declare-fun x358 () Bool)
(declare-fun x1185 () x1426)
(declare-fun x1820 () Int)
(declare-fun x1667 () Bool)
(declare-fun x937 () Int)
(declare-fun x108 () Int)
(declare-fun x93 (Int) Int)
(declare-fun x1534 () Int)
(declare-fun x1150 () Bool)
(declare-fun x1466 () x1426)
(declare-fun x112 () Bool)
(declare-fun x1050 () Int)
(declare-fun x1472 () Int)
(declare-fun x511 () Bool)
(declare-fun x1650 () Int)
(declare-fun x450 () Bool)
(declare-fun x1123 () Int)
(declare-fun x1795 () Int)
(declare-fun x846 () Int)
(declare-fun x255 () Bool)
(declare-fun x1522 () Bool)
(declare-fun x453 () Int)
(declare-fun x249 () Bool)
(declare-fun x984 () Bool)
(declare-fun x300 () Bool)
(declare-fun x468 () Bool)
(declare-fun x413 () Bool)
(declare-fun x907 () Int)
(declare-fun x776 () Bool)
(declare-fun x1331 () Int)
(declare-fun x1048 (Int) Int)
(declare-fun x73 () Int)
(declare-fun x1134 () Bool)
(declare-fun x464 (Int) Int)
(declare-fun x1813 () Bool)
(declare-fun x402 () Bool)
(declare-fun x48 () Int)
(declare-fun x959 () Int)
(declare-fun x955 () Int)
(declare-fun x1821 (x1426) Int)
(declare-fun x1206 () Int)
(declare-fun x246 () Int)
(declare-fun x1465 () Int)
(declare-fun x393 () Bool)
(declare-fun x1720 () Bool)
(declare-fun x1305 () Int)
(declare-fun x602 () Bool)
(declare-fun x244 () Bool)
(declare-fun x1739 () Int)
(declare-fun x234 () Bool)
(declare-fun x437 () x1426)
(declare-fun x998 () Int)
(declare-fun x1297 () Int)
(declare-fun x372 () Bool)
(declare-fun x1633 () Int)
(declare-fun x863 () Bool)
(declare-fun x1815 () Bool)
(declare-fun x870 () Int)
(declare-fun x868 () Int)
(declare-fun x1136 () Int)
(declare-fun x1014 () Int)
(declare-fun x1513 () Int)
(declare-fun x648 () Bool)
(declare-fun x324 () Bool)
(declare-fun x150 () Bool)
(declare-fun x573 () Int)
(declare-fun x822 () Int)
(declare-fun x4 () Bool)
(declare-fun x1208 () Bool)
(declare-fun x252 () Int)
(declare-fun x412 () Int)
(declare-fun x1505 () Bool)
(declare-fun x1010 () Int)
(declare-fun x1775 (Int) Int)
(declare-fun x1754 () Int)
(declare-fun x1845 () Bool)
(declare-fun x1233 () Int)
(declare-fun x1019 () Bool)
(declare-fun x690 () Int)
(declare-fun x334 () Bool)
(declare-fun x260 () Int)
(declare-fun x251 () Int)
(declare-fun x1144 () Int)
(declare-fun x1690 () Int)
(declare-fun x314 () Bool)
(declare-fun x1315 () Int)
(declare-fun x1458 () Int)
(declare-fun x960 () Bool)
(declare-fun x1738 () Int)
(declare-fun x147 () Int)
(declare-fun x1525 () Int)
(declare-fun x310 () Int)
(declare-fun x692 () Bool)
(declare-fun x1547 () Int)
(declare-fun x1838 () x1426)
(declare-fun x1225 () Int)
(declare-fun x1602 () Int)
(declare-fun x948 () Bool)
(declare-fun x443 () Bool)
(declare-fun x154 () Int)
(declare-fun x476 () Int)
(declare-fun x63 () Bool)
(declare-fun x1105 () Int)
(declare-fun x229 () Int)
(declare-fun x182 () Int)
(declare-fun x739 () Int)
(declare-fun x115 (Int) Int)
(declare-fun x113 () x1426)
(declare-fun x1376 () x1426)
(declare-fun x1478 () Int)
(declare-fun x538 () Int)
(declare-fun x181 () Bool)
(declare-fun x289 () Int)
(declare-fun x540 () Bool)
(declare-fun x1646 () Int)
(declare-fun x544 () Bool)
(declare-fun x1100 () Int)
(declare-fun x670 () x1426)
(declare-fun x1759 (Int) Int)
(declare-fun x200 () Int)
(declare-fun x1190 (x1426) Int)
(declare-fun x916 () Int)
(declare-fun x207 () Int)
(declare-fun x1489 () Bool)
(declare-fun x1777 () Int)
(declare-fun x1424 () Int)
(declare-fun x1804 () Bool)
(declare-fun x415 () Int)
(declare-fun x774 () Bool)
(declare-fun x1200 () Bool)
(declare-fun x496 () Int)
(declare-fun x1149 () Int)
(declare-fun x1141 () Int)
(declare-fun x1298 () Int)
(declare-fun x67 () Int)
(declare-fun x359 () Int)
(declare-fun x61 () Bool)
(declare-fun x497 () Bool)
(declare-fun x691 () Bool)
(declare-fun x1496 () Int)
(declare-fun x375 () Int)
(declare-fun x32 () x1426)
(declare-fun x1187 () Int)
(declare-fun x444 () x1426)
(declare-fun x1211 () Int)
(declare-fun x178 () Int)
(declare-fun x1076 () Int)
(declare-fun x1634 () Int)
(declare-fun x821 () Int)
(declare-fun x819 () x1426)
(declare-fun x286 () Int)
(declare-fun x810 () Int)
(declare-fun x263 () Int)
(declare-fun x805 () Bool)
(declare-fun x1068 () Int)
(declare-fun x1856 () x1426)
(declare-fun x386 () Int)
(declare-fun x78 () Bool)
(declare-fun x28 () Int)
(declare-fun x145 () Int)
(declare-fun x565 () x1426)
(declare-fun x712 () Int)
(declare-fun x1810 () Bool)
(declare-fun x1249 () Int)
(declare-fun x749 () Bool)
(declare-fun x893 () Bool)
(declare-fun x24 () Bool)
(declare-fun x647 () Int)
(declare-fun x884 () Int)
(declare-fun x643 () Bool)
(declare-fun x941 () Bool)
(declare-fun x1412 () Int)
(declare-fun x10 () x1426)
(declare-fun x506 () Int)
(declare-fun x7 () Int)
(declare-fun x1304 () Int)
(declare-fun x1664 () Int)
(declare-fun x1744 () Bool)
(declare-fun x833 () Bool)
(declare-fun x1801 () Int)
(declare-fun x357 () Bool)
(declare-fun x1163 () Int)
(declare-fun x435 () Bool)
(declare-fun x1204 () Int)
(declare-fun x473 () Int)
(declare-fun x264 () Bool)
(declare-fun x1090 () Bool)
(declare-fun x1119 () Bool)
(declare-fun x74 () Int)
(declare-fun x1467 () Bool)
(declare-fun x89 () x1426)
(declare-fun x555 () Int)
(declare-fun x1164 () Bool)
(declare-fun x19 () Bool)
(declare-fun x80 () x1426)
(declare-fun x498 () Bool)
(declare-fun x374 () Bool)
(declare-fun x1471 () Bool)
(declare-fun x700 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x987 () Int)
(declare-fun x1619 () Int)
(declare-fun x1857 () Bool)
(declare-fun x1267 () Int)
(declare-fun x595 () Int)
(declare-fun x311 () Bool)
(declare-fun x1254 () Int)
(declare-fun x1492 () Bool)
(declare-fun x1636 () Bool)
(declare-fun x1177 () Bool)
(declare-fun x1183 () Int)
(declare-fun x849 () Bool)
(declare-fun x76 () Int)
(declare-fun x1216 () Int)
(declare-fun x1582 () Bool)
(declare-fun x1604 () Bool)
(declare-fun x1503 () Int)
(declare-fun x1153 () Bool)
(declare-fun x1483 () Int)
(declare-fun x806 () Bool)
(declare-fun x594 () Int)
(declare-fun x835 () x1426)
(declare-fun x460 () Bool)
(declare-fun x706 () Int)
(declare-fun x43 () Int)
(declare-fun x1822 () Int)
(declare-fun x1451 () x1426)
(declare-fun x1065 () Bool)
(declare-fun x1423 () Bool)
(declare-fun x585 () Int)
(declare-fun x219 () Bool)
(declare-fun x1103 () Bool)
(declare-fun x654 () Bool)
(declare-fun x117 () Bool)
(declare-fun x1003 () Int)
(declare-fun x1362 () Bool)
(declare-fun x1166 () Int)
(declare-fun x1240 () Int)
(declare-fun x1778 () Int)
(declare-fun x992 () Int)
(declare-fun x1436 () Bool)
(declare-fun x564 () Int)
(declare-fun x1367 () Int)
(declare-fun x1859 (x1426) Int)
(declare-fun x37 () Int)
(declare-fun x1761 () Bool)
(declare-fun x1598 () Int)
(declare-fun x1764 () Bool)
(declare-fun x912 () Bool)
(declare-fun x1811 () Int)
(declare-fun x160 () Int)
(declare-fun x395 () Bool)
(declare-fun x1109 () Bool)
(declare-fun x1776 () x1426)
(declare-fun x131 () Int)
(declare-fun x1218 () Int)
(declare-fun x1712 () Bool)
(declare-fun x284 () Int)
(declare-fun x1115 () Int)
(declare-fun x503 () Int)
(declare-fun x1361 () Bool)
(declare-fun x21 () Int)
(declare-fun x318 () Bool)
(declare-fun x829 () Bool)
(declare-fun x101 () Int)
(declare-fun x512 () Bool)
(declare-fun x99 () Bool)
(declare-fun x1138 () Bool)
(declare-fun x1085 () Bool)
(declare-fun x1201 () Bool)
(declare-fun x713 () Bool)
(declare-fun x440 () Int)
(declare-fun x365 () Int)
(declare-fun x1549 () Int)
(declare-fun x1537 () Bool)
(declare-fun x1787 () Int)
(declare-fun x1673 () x1426)
(declare-fun x1627 () Int)
(declare-fun x1438 () Bool)
(declare-fun x66 () Bool)
(declare-fun x780 () Bool)
(declare-fun x997 () Int)
(declare-fun x1462 (x1426) Int)
(declare-fun x616 () Int)
(declare-fun x212 () x1426)
(declare-fun x116 () Int)
(declare-fun x106 () Int)
(declare-fun x75 () Int)
(declare-fun x1740 () Int)
(declare-fun x1299 () Bool)
(declare-fun x120 () Int)
(declare-fun x158 () Bool)
(declare-fun x705 () Int)
(declare-fun x1507 () Bool)
(declare-fun x928 () Int)
(declare-fun x1203 () Bool)
(declare-fun x974 () Bool)
(declare-fun x1719 (Int) Int)
(declare-fun x1593 () Int)
(declare-fun x1276 () x1426)
(declare-fun x1445 () Bool)
(declare-fun x280 () Bool)
(declare-fun x103 () Int)
(declare-fun x1195 () Int)
(declare-fun x1570 () Int)
(declare-fun x979 () Bool)
(declare-fun x471 () Int)
(declare-fun x753 () Int)
(declare-fun x188 () Bool)
(declare-fun x169 () Int)
(declare-fun x834 () Bool)
(declare-fun x646 () Bool)
(declare-fun x1258 () Bool)
(declare-fun x332 () x1426)
(declare-fun x1266 () Int)
(declare-fun x317 () Int)
(declare-fun x1648 () Int)
(declare-fun x38 () Int)
(declare-fun x1862 () Int)
(declare-fun x1246 () Bool)
(declare-fun x55 () Int)
(declare-fun x1026 () Int)
(declare-fun x1285 () Bool)
(declare-fun x449 () Int)
(declare-fun x1674 () Bool)
(declare-fun x576 () Bool)
(declare-fun x429 () Int)
(declare-fun x1550 () Int)
(declare-fun x587 () Bool)
(declare-fun x793 () Bool)
(declare-fun x527 () Int)
(declare-fun x1603 () Bool)
(declare-fun x379 () Int)
(declare-fun x424 () Bool)
(declare-fun x528 () Int)
(declare-fun x1181 () Bool)
(declare-fun x31 (x1426) Int)
(declare-fun x958 () Bool)
(declare-fun x970 () Bool)
(declare-fun x1191 () Int)
(declare-fun x1551 () Int)
(declare-fun x1059 () Bool)
(declare-fun x396 () Bool)
(declare-fun x735 () Int)
(declare-fun x676 () Bool)
(declare-fun x323 () Int)
(declare-fun x1785 () Int)
(declare-fun x349 (Int) Int)
(declare-fun x1788 () Int)
(declare-fun x817 () x1426)
(declare-fun x1707 () x1426)
(declare-fun x1774 () Int)
(declare-fun x1326 () Int)
(declare-fun x1485 () Bool)
(declare-fun x1484 () Bool)
(declare-fun x1817 () Bool)
(declare-fun x1683 () Int)
(declare-fun x198 () Int)
(declare-fun x815 () Int)
(declare-fun x1067 () Int)
(declare-fun x504 () Int)
(declare-fun x204 () x1426)
(declare-fun x8 () Int)
(declare-fun x442 () Int)
(declare-fun x695 () x1426)
(declare-fun x1751 () Int)
(declare-fun x1823 () Int)
(declare-fun x366 (Int) Int)
(declare-fun x881 () Bool)
(declare-fun x989 () Bool)
(declare-fun x1469 () Bool)
(declare-fun x1497 () Int)
(declare-fun x308 () x1426)
(declare-fun x274 () Int)
(declare-fun x1600 () Int)
(declare-fun x1701 () Int)
(declare-fun x1486 () Bool)
(declare-fun x845 (Int) Int)
(declare-fun x1626 () Bool)
(declare-fun x397 () Int)
(declare-fun x1794 () Int)
(declare-fun x355 () x1426)
(declare-fun x1653 () Int)
(declare-fun x650 () Int)
(declare-fun x338 () Int)
(declare-fun x1574 () Int)
(declare-fun x432 (Int) Int)
(declare-fun x770 () Int)
(declare-fun x836 () Int)
(declare-fun x759 () Int)
(declare-fun x371 () Bool)
(declare-fun x1316 () Int)
(declare-fun x951 (x1426) Int)
(declare-fun x645 () Int)
(declare-fun x84 () x1426)
(declare-fun x1118 () Bool)
(declare-fun x1084 () Bool)
(declare-fun x663 () Int)
(declare-fun x1475 () Int)
(declare-fun x598 (x1426) Int)
(declare-fun x900 () Bool)
(declare-fun x422 () Int)
(declare-fun x871 () Int)
(declare-fun x1561 () Int)
(declare-fun x1408 () Int)
(declare-fun x902 () Bool)
(declare-fun x134 () Bool)
(declare-fun x411 () Int)
(declare-fun x1173 () Bool)
(declare-fun x423 () Bool)
(declare-fun x574 () Bool)
(declare-fun x1047 () Bool)
(declare-fun x1159 () Bool)
(declare-fun x639 () x1426)
(declare-fun x766 () Bool)
(declare-fun x228 () Bool)
(declare-fun x942 () Int)
(declare-fun x388 () Int)
(declare-fun x1789 () Int)
(declare-fun x1630 () Bool)
(declare-fun x1172 () Int)
(declare-fun x652 () Int)
(declare-fun x1819 () Int)
(declare-fun x1655 () Int)
(declare-fun x1501 () Bool)
(declare-fun x1566 () Bool)
(declare-fun x162 () Int)
(declare-fun x1816 () Int)
(declare-fun x967 () Int)
(declare-fun x790 () Int)
(declare-fun x1589 () x1426)
(declare-fun x174 (Int) Int)
(declare-fun x1430 () Int)
(declare-fun x1826 () Int)
(declare-fun x679 () x1426)
(declare-fun x1753 () x1426)
(declare-fun x1509 () Bool)
(declare-fun x994 () Int)
(declare-fun x1836 (x1426) Int)
(declare-fun x299 () Int)
(declare-fun x610 () Int)
(declare-fun x1287 () x1426)
(declare-fun x769 () x1426)
(declare-fun x501 () Int)
(declare-fun x1345 () Int)
(declare-fun x1771 () Bool)
(declare-fun x944 () Bool)
(declare-fun x614 () Bool)
(declare-fun x1678 () Int)
(declare-fun x1748 () Bool)
(declare-fun x1031 () Int)
(declare-fun x1830 () Bool)
(declare-fun x1091 () Int)
(declare-fun x1677 () Bool)
(declare-fun x1314 () Int)
(declare-fun x1063 () Int)
(declare-fun x276 () Int)
(declare-fun x1131 () Int)
(declare-fun x1086 () Int)
(declare-fun x265 (x1426) Int)
(declare-fun x1252 () Int)
(declare-fun x1379 () Int)
(declare-fun x1599 () Int)
(declare-fun x1731 () Bool)
(declare-fun x781 () Bool)
(declare-fun x754 () Bool)
(declare-fun x1656 () Bool)
(declare-fun x30 () x1426)
(declare-fun x777 () Int)
(declare-fun x1671 () Bool)
(declare-fun x70 () Bool)
(declare-fun x1672 () Bool)
(declare-fun x608 () Int)
(declare-fun x1295 () Bool)
(declare-fun x1350 () Bool)
(declare-fun x799 () Int)
(declare-fun x29 () Bool)
(declare-fun x298 () Bool)
(declare-fun x718 () x1426)
(declare-fun x1721 () Int)
(declare-fun x1637 () Int)
(declare-fun x1311 () Int)
(declare-fun x27 () Int)
(declare-fun x172 () Int)
(declare-fun x827 () Int)
(declare-fun x686 () x1426)
(declare-fun x1660 () x1426)
(declare-fun x1607 () Bool)
(declare-fun x583 () Int)
(declare-fun x787 () Int)
(declare-fun x1429 () Int)
(declare-fun x1670 () x1426)
(declare-fun x963 () Int)
(declare-fun x1679 () Bool)
(declare-fun x1833 () Int)
(declare-fun x1107 () Int)
(declare-fun x730 () Int)
(declare-fun x1824 () x1426)
(declare-fun x1397 () Int)
(declare-fun x1691 () Bool)
(declare-fun x403 () Int)
(declare-fun x1418 () Bool)
(declare-fun x717 () x1426)
(declare-fun x1737 () Bool)
(declare-fun x1697 () Int)
(declare-fun x1624 () x1426)
(declare-fun x966 () Int)
(declare-fun x1840 () Int)
(declare-fun x1809 () Bool)
(declare-fun x624 () Bool)
(declare-fun x1143 () Bool)
(declare-fun x596 () Bool)
(declare-fun x217 () Bool)
(declare-fun x704 () Int)
(declare-fun x208 () Int)
(declare-fun x1282 () Int)
(declare-fun x201 () Int)
(declare-fun x1231 (Int) Int)
(declare-fun x1378 () Int)
(declare-fun x1535 () Int)
(declare-fun x862 () Int)
(declare-fun x224 () Bool)
(declare-fun x348 (Int) x1426)
(declare-fun x582 () Int)
(declare-fun x1096 () Bool)
(declare-fun x356 () Bool)
(declare-fun x520 () Bool)
(declare-fun x1668 (x1426) Int)
(declare-fun x1557 () Int)
(declare-fun x653 () Int)
(declare-fun x666 (Int) Int)
(declare-fun x1368 () Int)
(declare-fun x35 () Int)
(declare-fun x1125 () Int)
(declare-fun x247 () Int)
(declare-fun x1384 () Int)
(declare-fun x1651 () Int)
(declare-fun x378 () Bool)
(declare-fun x1516 () Bool)
(declare-fun x436 () Bool)
(declare-fun x638 () Int)
(declare-fun x1097 () Int)
(declare-fun x1002 () Int)
(declare-fun x1444 () Int)
(declare-fun x1355 () x1426)
(declare-fun x141 () Int)
(declare-fun x722 () Int)
(declare-fun x519 () Int)
(declare-fun x1154 () Bool)
(declare-fun x270 () Bool)
(declare-fun x888 () Bool)
(declare-fun x837 () Int)
(declare-fun x107 () Bool)
(declare-fun x262 () Bool)
(declare-fun x261 () Bool)
(declare-fun x171 () Bool)
(declare-fun x1400 () Bool)
(declare-fun x557 () Bool)
(declare-fun x1337 () Int)
(declare-fun x1180 () Int)
(declare-fun x1121 () Int)
(declare-fun x226 () Int)
(declare-fun x1605 () Int)
(declare-fun x626 () Int)
(declare-fun x737 () Int)
(declare-fun x390 () Bool)
(declare-fun x929 () Bool)
(declare-fun x149 () Bool)
(declare-fun x277 () x1426)
(declare-fun x620 () Int)
(declare-fun x137 () Bool)
(declare-fun x421 () Bool)
(declare-fun x554 () x1426)
(declare-fun x1710 () Int)
(declare-fun x973 () Int)
(declare-fun x844 () Int)
(declare-fun x305 () Bool)
(declare-fun x439 () Int)
(declare-fun x688 () Int)
(declare-fun x1388 (Int) Int)
(declare-fun x1214 () Int)
(declare-fun x1169 () Int)
(declare-fun x545 () Bool)
(declare-fun x1212 () Int)
(declare-fun x294 () Int)
(declare-fun x1548 () Bool)
(declare-fun x110 () Int)
(declare-fun x292 () Bool)
(declare-fun x634 () Int)
(declare-fun x1461 () Bool)
(declare-fun x477 () Int)
(declare-fun x155 () Int)
(declare-fun x337 () Bool)
(declare-fun x549 () Bool)
(declare-fun x518 () Int)
(declare-fun x330 () x1426)
(declare-fun x1160 () Int)
(declare-fun x288 () Bool)
(declare-fun x1702 () Int)
(declare-fun x606 () Bool)
(declare-fun x195 () Int)
(declare-fun x1715 () Int)
(declare-fun x1269 () Bool)
(declare-fun x1135 () Int)
(declare-fun x1409 () Bool)
(declare-fun x1585 () Bool)
(declare-fun x515 () Int)
(declare-fun x175 () Int)
(declare-fun x649 () Bool)
(declare-fun x1756 () Int)
(declare-fun x956 () Bool)
(declare-fun x727 () Int)
(declare-fun x214 () Bool)
(declare-fun x1251 () Bool)
(declare-fun x361 () Int)
(declare-fun x1407 () Int)
(declare-fun x1127 () Bool)
(declare-fun x1805 () x1426)
(declare-fun x1730 () Int)
(declare-fun x640 () Int)
(declare-fun x1512 () Int)
(declare-fun x931 () Bool)
(declare-fun x1848 () Int)
(declare-fun x938 (Int) Int)
(declare-fun x1763 () Bool)
(declare-fun x828 () Int)
(declare-fun x507 () Int)
(declare-fun x681 () Int)
(declare-fun x58 () Int)
(declare-fun x1312 () Int)
(declare-fun x1590 () Bool)
(declare-fun x657 () Int)
(declare-fun x693 () x1426)
(declare-fun x1644 () x1426)
(declare-fun x1792 () Int)
(declare-fun x1292 () Bool)
(declare-fun x1629 () Bool)
(declare-fun x567 () Bool)
(declare-fun x1447 () Bool)
(declare-fun x644 () Bool)
(declare-fun x1147 () Int)
(declare-fun x161 () Int)
(declare-fun x560 () x1426)
(declare-fun x1611 () Int)
(declare-fun x1773 () Int)
(declare-fun x1790 () Bool)
(declare-fun x13 () Int)
(declare-fun x532 () Int)
(declare-fun x521 () Bool)
(declare-fun x399 () Bool)
(declare-fun x1693 () Bool)
(declare-fun x613 () Bool)
(declare-fun x1244 () Int)
(declare-fun x79 () Int)
(declare-fun x601 () x1426)
(declare-fun x1622 () Bool)
(declare-fun x85 () Bool)
(declare-fun x96 () Bool)
(declare-fun x1675 () Int)
(declare-fun x1577 () Int)
(declare-fun x1791 () Int)
(declare-fun x491 () Bool)
(declare-fun x847 () Int)
(declare-fun x241 () Int)
(declare-fun x183 () x1426)
(declare-fun x714 () Int)
(declare-fun x1313 () Int)
(declare-fun x373 () Int)
(declare-fun x485 () Int)
(declare-fun x1399 () Int)
(declare-fun x611 () Int)
(declare-fun x1855 () Int)
(declare-fun x1455 () Bool)
(declare-fun x1665 () Int)
(declare-fun x1837 () Int)
(declare-fun x15 () Int)
(declare-fun x824 () Bool)
(declare-fun x433 () x1426)
(declare-fun x1468 () Int)
(declare-fun x25 () Bool)
(declare-fun x1023 () Int)
(declare-fun x216 () Int)
(declare-fun x451 () Int)
(declare-fun x1578 () Bool)
(declare-fun x552 () Bool)
(declare-fun x1829 () Int)
(declare-fun x746 () Int)
(declare-fun x1039 () Bool)
(declare-fun x1075 () Int)
(declare-fun x1333 () Int)
(declare-fun x1431 () x1426)
(declare-fun x588 () Int)
(declare-fun x724 () Int)
(declare-fun x1500 () Int)
(declare-fun x1504 () Int)
(declare-fun x159 () Bool)
(declare-fun x825 () Int)
(declare-fun x5 () Int)
(declare-fun x419 () Bool)
(declare-fun x1232 () Int)
(declare-fun x1082 () x1426)
(declare-fun x1835 () Bool)
(declare-fun x875 () Bool)
(declare-fun x26 () Int)
(declare-fun x813 () Int)
(declare-fun x709 () Int)
(declare-fun x1198 () Bool)
(declare-fun x1158 () Bool)
(declare-fun x1077 () x1426)
(declare-fun x469 () Int)
(declare-fun x1007 () Bool)
(declare-fun x1494 () Int)
(declare-fun x962 () Int)
(declare-fun x248 () Int)
(declare-fun x1567 () x1426)
(declare-fun x976 () Int)
(declare-fun x1588 () Int)
(declare-fun x1245 () Bool)
(declare-fun x1168 () Int)
(declare-fun x665 () Bool)
(declare-fun x731 () Bool)
(declare-fun x1028 () Bool)
(declare-fun x1647 () Bool)
(declare-fun x716 () Bool)
(declare-fun x1745 () Int)
(declare-fun x1614 () Int)
(declare-fun x385 () Int)
(declare-fun x329 () Int)
(declare-fun x921 (x1426) Int)
(declare-fun x1058 () Bool)
(declare-fun x988 () x1426)
(declare-fun x876 () x1426)
(declare-fun x1148 () Int)
(declare-fun x925 () Int)
(declare-fun x1356 () Int)
(declare-fun x590 () Int)
(declare-fun x1179 () Bool)
(declare-fun x578 () Int)
(declare-fun x1083 () Int)
(declare-fun x408 () Int)
(declare-fun x121 () Int)
(declare-fun x242 () Int)
(declare-fun x1280 () Int)
(declare-fun x91 () Int)
(declare-fun x68 () Bool)
(declare-fun x320 () Int)
(declare-fun x1592 () Bool)
(declare-fun x62 () Int)
(declare-fun x1265 () Int)
(declare-fun x350 () Int)
(declare-fun x114 () Bool)
(declare-fun x1842 () Int)
(declare-fun x789 () Bool)
(declare-fun x125 () Bool)
(declare-fun x1443 () x1426)
(declare-fun x54 () Bool)
(declare-fun x1035 () Int)
(declare-fun x1320 () Int)
(declare-fun x416 () Bool)
(declare-fun x1591 () Int)
(declare-fun x1420 () Bool)
(declare-fun x223 () Int)
(declare-fun x807 () Int)
(declare-fun x398 () Bool)
(declare-fun x698 () Int)
(declare-fun x376 () Int)
(declare-fun x1797 () Int)
(declare-fun x961 () Int)
(declare-fun x812 () Int)
(declare-fun x1825 () Int)
(declare-fun x1093 () Bool)
(declare-fun x347 () Int)
(declare-fun x1860 () Int)
(declare-fun x1746 () Int)
(declare-fun x1464 () Bool)
(declare-fun x1157 (Int) Int)
(declare-fun x1708 () Int)
(declare-fun x1734 () Int)
(declare-fun x1328 () Bool)
(declare-fun x1306 () Int)
(declare-fun x1054 () Int)
(declare-fun x1110 () Bool)
(declare-fun x600 () Int)
(declare-fun x1363 () Int)
(declare-fun x745 () Int)
(declare-fun x481 () Bool)
(declare-fun x1033 (Int) Int)
(declare-fun x1236 () x1426)
(declare-fun x18 () Bool)
(declare-fun x975 () Int)
(declare-fun x1422 () Bool)
(declare-fun x1758 () Int)
(declare-fun x297 () Int)
(declare-fun x1435 () Int)
(declare-fun x510 () x1426)
(declare-fun x668 () Int)
(declare-fun x886 () Int)
(declare-fun x309 () Bool)
(declare-fun x661 () Bool)
(declare-fun x331 () Bool)
(declare-fun x684 () Bool)
(declare-fun x1477 () Bool)
(declare-fun x59 () Int)
(declare-fun x909 () Int)
(declare-fun x20 () Int)
(declare-fun x855 () Bool)
(declare-fun x1495 () Int)
(declare-fun x1456 (Int) Int)
(declare-fun x139 () Int)
(declare-fun x136 () Bool)
(declare-fun x762 () Bool)
(declare-fun x1111 () Int)
(declare-fun x1334 () Bool)
(declare-fun x325 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x370 () x1426)
(declare-fun x977 () Int)
(declare-fun x1405 () Int)
(declare-fun x151 (Int) Int)
(declare-fun x1654 () Int)
(declare-fun x957 () Bool)
(declare-fun x1798 () Int)
(declare-fun x382 () Int)
(declare-fun x530 (x1426) Int)
(declare-fun x536 () Int)
(declare-fun x592 () Int)
(declare-fun x1032 () Bool)
(declare-fun x462 () Int)
(declare-fun x163 () Bool)
(declare-fun x1781 () Int)
(declare-fun x1194 () Int)
(declare-fun x662 () Bool)
(declare-fun x1747 () Int)
(declare-fun x1357 () Bool)
(declare-fun x1432 () Int)
(declare-fun x1854 () Int)
(declare-fun x725 () Bool)
(declare-fun x1428 () Bool)
(declare-fun x1415 (x1426) Int)
(declare-fun x651 () Int)
(declare-fun x1189 () Bool)
(declare-fun x1613 () Int)
(declare-fun x3 () Bool)
(declare-fun x132 () Int)
(declare-fun x1101 (Int) Int)
(declare-fun x213 () Bool)
(declare-fun x804 () Bool)
(declare-fun x736 () Bool)
(declare-fun x389 () x1426)
(declare-fun x949 () Int)
(declare-fun x1192 () Bool)
(declare-fun x1092 () Bool)
(declare-fun x1013 () Int)
(declare-fun x1051 () Int)
(declare-fun x535 () Int)
(declare-fun x192 () Bool)
(declare-fun x674 () Int)
(declare-fun x1459 () Int)
(declare-fun x87 () Int)
(declare-fun x1850 () Bool)
(declare-fun x425 () Int)
(declare-fun x800 () Bool)
(declare-fun x1102 () Int)
(declare-fun x1544 () Bool)
(declare-fun x1446 () Int)
(declare-fun x996 () Bool)
(declare-fun x111 () Int)
(declare-fun x225 () Bool)
(declare-fun x570 () Int)
(declare-fun x1199 () Bool)
(declare-fun x168 () x1426)
(declare-fun x191 () Int)
(declare-fun x558 () Int)
(declare-fun x321 () Bool)
(declare-fun x1341 () x1426)
(declare-fun x1248 () Int)
(declare-fun x891 () Int)
(declare-fun x633 () Bool)
(declare-fun x1553 () Int)
(declare-fun x794 () Bool)
(declare-fun x1239 () Int)
(declare-fun x313 () Bool)
(declare-fun x1261 () Int)
(declare-fun x56 () Bool)
(declare-fun x445 () Int)
(declare-fun x738 () Bool)
(declare-fun x1442 () Bool)
(declare-fun x728 () Int)
(declare-fun x878 () x1426)
(declare-fun x562 () Bool)
(declare-fun x547 () Int)
(declare-fun x1793 () Bool)
(declare-fun x427 () Int)
(declare-fun x283 () Int)
(declare-fun x273 (Int) Int)
(declare-fun x417 () Bool)
(declare-fun x747 () Int)
(declare-fun x143 () Bool)
(declare-fun x841 () x1426)
(declare-fun x1044 () Int)
(declare-fun x1527 () Int)
(declare-fun x71 () Int)
(declare-fun x426 () Bool)
(declare-fun x448 () Int)
(declare-fun x768 () Bool)
(declare-fun x14 () Bool)
(declare-fun x1615 () Int)
(declare-fun x400 () Bool)
(declare-fun x589 () Bool)
(declare-fun x1847 () Int)
(declare-fun x1649 () Bool)
(declare-fun x1094 () Bool)
(declare-fun x1383 () Int)
(declare-fun x696 () Int)
(declare-fun x1385 () x1426)
(declare-fun x1392 () Bool)
(declare-fun x1196 () Bool)
(declare-fun x146 () Int)
(declare-fun x677 () Bool)
(declare-fun x23 () Int)
(declare-fun x383 () Bool)
(declare-fun x319 () Bool)
(declare-fun x1049 () Int)
(declare-fun x1221 () Int)
(declare-fun x100 () Bool)
(declare-fun x336 () Int)
(declare-fun x877 () Bool)
(declare-fun x170 (x1426) Int)
(declare-fun x1742 () Bool)
(declare-fun x1321 () Bool)
(declare-fun x1828 () Int)
(declare-fun x257 () Bool)
(declare-fun x205 () Int)
(declare-fun x1518 () Bool)
(declare-fun x454 () x1426)
(declare-fun x1122 () Bool)
(declare-fun x384 () Bool)
(declare-fun x1402 () Int)
(declare-fun x1260 () x1426)
(declare-fun x1572 () Int)
(declare-fun x1029 () Bool)
(declare-fun x1098 () Int)
(declare-fun x1543 () Bool)
(declare-fun x632 () Int)
(declare-fun x1064 () Bool)
(declare-fun x572 () Int)
(declare-fun x1511 () Int)
(declare-fun x1612 () Int)
(declare-fun x667 () Int)
(declare-fun x935 () Int)
(declare-fun x765 () Int)
(declare-fun x965 (Int) Int)
(declare-fun x1386 () Int)
(declare-fun x1717 () Bool)
(declare-fun x69 () Int)
(declare-fun x801 () x1426)
(declare-fun x126 () Int)
(declare-fun x612 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x227 () Bool)
(declare-fun x1834 () Int)
(declare-fun x751 () Int)
(declare-fun x683 () Int)
(declare-fun x830 () Bool)
(declare-fun x1416 () Int)
(declare-fun x860 () Bool)
(declare-fun x924 () Bool)
(declare-fun x1770 () Bool)
(declare-fun x952 () Int)
(declare-fun x1403 () Int)
(declare-fun x220 () Int)
(declare-fun x1182 () Bool)
(declare-fun x1241 () Int)
(declare-fun x729 () Int)
(declare-fun x250 () Bool)
(declare-fun x1733 () Bool)
(declare-fun x287 () x1426)
(declare-fun x861 () Int)
(declare-fun x1005 () Bool)
(declare-fun x1289 () Int)
(declare-fun x820 () Int)
(declare-fun x660 () Bool)
(declare-fun x748 () Int)
(declare-fun x1694 () Bool)
(declare-fun x551 () Bool)
(declare-fun x232 () Bool)
(declare-fun x109 () Int)
(declare-fun x1128 () Bool)
(declare-fun x1335 () Bool)
(declare-fun x1309 () Int)
(define-fun x488 ((x1426 x1426) (x434 Int)) x1426 (ite ((_ is x936) x1426) (x936 (x726 x1426) (+ (x1638 x1426) x434)) (ite ((_ is x672) x1426) (x672 (x1686 x1426) (x1229 x1426) (x990 x1426) (x842 x1426) (+ (x237 x1426) x434)) (ite ((_ is x1716) x1426) (x1716 (x186 x1426) (x1610 x1426) (+ x434 (x1358 x1426))) (x664 (+ (x543 x1426) x434))))))
(define-fun x1213 ((x1463 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1463) (<= 0 x1463)) x1463 (- x1463 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1332 ((x1463 Int)) Int (ite (and (> 0 x1463) (>= x1463 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1463) x1463))
(define-fun x1170 ((x258 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x258) (<= 0 x258)))
(define-fun x1406 ((x258 Int)) Bool (and (= (x926 x258 115792089237316195423570985008687907853269984665640564039457584007913129639935) x258) (= x258 (x926 115792089237316195423570985008687907853269984665640564039457584007913129639935 x258))))
(define-fun x1425 ((x258 Int)) Bool (and (= (x926 0 x258) 0) (= 0 (x926 x258 0))))
(define-fun x1391 ((x258 Int)) Bool (= x258 (x926 x258 x258)))
(define-fun x1575 ((x258 Int)) Bool (and (x1391 x258) (x1406 x258) (x1425 x258)))
(define-fun x1766 ((x258 Int) (x1749 Int)) Bool (= (x926 x1749 x258) (x926 x258 x1749)))
(define-fun x39 ((x258 Int) (x1749 Int)) Bool (and (>= (x926 x258 x1749) 0) (=> (>= x1749 0) (>= x1749 (x926 x258 x1749))) (=> (<= 0 x258) (<= (x926 x258 x1749) x258))))
(define-fun x1037 ((x258 Int) (x1749 Int)) Bool (and (x39 x258 x1749) (x1766 x258 x1749)))
(define-fun x164 ((x258 Int)) Bool (= (mod x258 1461501637330902918203684832716283019655932542976) (x926 x258 1461501637330902918203684832716283019655932542975)))
(define-fun x360 ((x258 Int)) Bool (and (x164 x258) (x1037 x258 1461501637330902918203684832716283019655932542975)))
(define-fun x484 ((x258 Int)) Bool (= (+ (x926 x258 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x258 32)) (mod x258 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x524 ((x258 Int)) Bool (and (x1037 x258 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x484 x258)))
(define-fun x1342 ((x1171 Int)) Int (ite (< x1171 x1709) (x151 x1171) 0))
(define-fun x1565 ((x1171 Int)) Int (ite (< x1171 x301) (x1722 x1171) 0))
(define-fun x1413 ((x1171 Int)) Int (ite (= 128 x1171) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x1101 x1171)))
(define-fun x1343 ((x1171 Int)) Int (ite (= 132 x1171) x1054 (x1413 x1171)))
(define-fun x1852 ((x1171 Int)) Int (ite (= 0 x1171) x306 (x1231 x1171)))
(define-fun x857 ((x1171 Int)) Int (ite (= 128 x1171) x306 (x1343 x1171)))
(define-fun x517 ((x1171 Int)) Int (ite (= 0 x1171) x535 (x1231 x1171)))
(define-fun x1452 ((x1171 Int)) Int (ite (= 128 x1171) x535 (x1343 x1171)))
(define-fun x711 ((x1171 x1426)) Int (ite (= x1171 x1621) x1318 (x598 x1171)))
(define-fun x1202 ((x1171 x1426)) Int (ite x1582 (x598 x1171) (ite x468 (x598 x1171) (ite x1731 (x598 x1171) (ite x372 (x598 x1171) (ite x660 (x598 x1171) (ite x1492 (x598 x1171) (ite x253 (x598 x1171) (ite x1630 (x598 x1171) (ite x1059 (x598 x1171) (ite x1398 (x598 x1171) (ite x567 (x598 x1171) (ite x114 (x598 x1171) (ite x984 (x711 x1171) (x598 x1171)))))))))))))))
(define-fun x1643 ((x1171 x1426)) Int (ite (= x1171 x718) x1574 (x598 x1171)))
(define-fun x1060 ((x1171 x1426)) Int (ite (= x1001 x1171) x297 (x598 x1171)))
(define-fun x563 ((x1171 x1426)) Int (ite (= x1171 x1236) x928 (x711 x1171)))
(define-fun x1095 ((x1171 x1426)) Int (ite x839 (x563 x1171) (x598 x1171)))
(define-fun x1417 ((x1171 x1426)) Int (ite x843 (x1060 x1171) (x1095 x1171)))
(define-fun x720 ((x1171 x1426)) Int (ite x1676 (x1643 x1171) (x1417 x1171)))
(define-fun x1381 ((x1171 x1426)) Int (ite x1159 (x598 x1171) (x720 x1171)))
(define-fun x122 ((x1171 x1426)) Int (ite x478 (ite x1770 (x1202 x1171) (x1381 x1171)) (x598 x1171)))
(define-fun x1434 ((x1171 Int)) Int (ite (= x1171 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x273 x1171)))
(define-fun x307 ((x1171 Int)) Int (ite (= 132 x1171) x1702 (x1434 x1171)))
(define-fun x327 ((x1171 x1426)) Int (ite (= x1171 x156) x1283 (x951 x1171)))
(define-fun x840 ((x1171 x1426)) Int (ite x1802 (x951 x1171) (ite x1609 (x951 x1171) (ite x1861 (x327 x1171) (x951 x1171)))))
(define-fun x1319 ((x1171 x1426)) Int (ite (= x1171 x1082) x1724 (x327 x1171)))
(define-fun x493 ((x1171 x1426)) Int (ite x830 (ite x1066 (x840 x1171) (x1319 x1171)) (x951 x1171)))
(define-fun x1112 ((x1171 x1426)) Int (ite (= x786 x1171) x1121 (x951 x1171)))
(define-fun x556 ((x1171 x1426)) Int (ite (= x1171 x1838) x1521 (x1112 x1171)))
(define-fun x187 ((x1171 x1426)) Int (ite x314 (x951 x1171) (ite x136 (x951 x1171) (ite x606 (x556 x1171) (ite x557 (x1112 x1171) (x951 x1171))))))
(define-fun x1129 ((x1171 x1426)) Int (ite x1830 (ite x402 (x187 x1171) (x556 x1171)) (x951 x1171)))
(define-fun x808 ((x1171 x1426)) Int (ite (= x437 x1171) x634 (x951 x1171)))
(define-fun x1087 ((x1171 x1426)) Int (ite (= x1171 x1234) x386 (x808 x1171)))
(define-fun x559 ((x1171 x1426)) Int (ite x1603 (x951 x1171) (ite x1771 (x951 x1171) (ite x816 (x1087 x1171) (ite x1522 (x808 x1171) (x951 x1171))))))
(define-fun x1371 ((x1171 x1426)) Int (ite x1667 (ite x754 (x559 x1171) (x1087 x1171)) (x951 x1171)))
(define-fun x1193 ((x1171 x1426)) Int (ite (= x1431 x1171) x1055 (x1371 x1171)))
(define-fun x328 ((x1171 x1426)) Int (ite x435 (x1371 x1171) (ite x883 (x1371 x1171) (ite x393 (x1193 x1171) (x1371 x1171)))))
(define-fun x1259 ((x1171 x1426)) Int (ite (= x1563 x1171) x1241 (x1193 x1171)))
(define-fun x763 ((x1171 x1426)) Int (ite x1438 (ite x1203 (x328 x1171) (x1259 x1171)) (x1371 x1171)))
(define-fun x1209 ((x1171 x1426)) Int (ite x1582 (x951 x1171) (ite x468 (x951 x1171) (ite x1731 (x951 x1171) (ite x372 (x951 x1171) (ite x660 (x951 x1171) (ite x1492 (x951 x1171) (ite x253 (x951 x1171) (ite x1630 (x951 x1171) (ite x1059 (x951 x1171) (ite x1398 (x951 x1171) (ite x567 (x493 x1171) (ite x114 (x1129 x1171) (ite x984 (x951 x1171) (ite x394 (x763 x1171) (ite x933 (x763 x1171) (ite x354 (x1371 x1171) (ite x1093 (x1371 x1171) (ite x322 (x1371 x1171) (ite x1360 (x951 x1171) (ite x1524 (x951 x1171) (ite x511 (x951 x1171) (ite x423 (x951 x1171) (ite x665 (x951 x1171) (ite x443 (x951 x1171) (ite x1173 (x493 x1171) (ite x22 (x493 x1171) (ite x225 (x951 x1171) (ite x684 (x951 x1171) (ite x1178 (x951 x1171) (ite x869 (x1129 x1171) (ite x1196 (x1129 x1171) (x951 x1171)))))))))))))))))))))))))))))))))
(define-fun x1541 ((x1171 x1426)) Int (ite x255 (x951 x1171) (x763 x1171)))
(define-fun x1317 ((x1171 x1426)) Int (ite x839 (x951 x1171) (x1541 x1171)))
(define-fun x494 ((x1171 x1426)) Int (ite x843 (x493 x1171) (x1317 x1171)))
(define-fun x1161 ((x1171 x1426)) Int (ite x1676 (x1129 x1171) (x494 x1171)))
(define-fun x206 ((x1171 x1426)) Int (ite x1159 (x951 x1171) (x1161 x1171)))
(define-fun x953 ((x1171 x1426)) Int (ite x478 (ite x1770 (x1209 x1171) (x206 x1171)) (x951 x1171)))
(define-fun x452 ((x1171 Int)) Int (ite (= 0 x1171) x705 (x566 x1171)))
(define-fun x541 ((x1171 Int)) Int (ite (= 128 x1171) x705 (x307 x1171)))
(define-fun x1595 ((x1171 x1426)) Int (ite (= x1171 x1670) x950 (x1723 x1171)))
(define-fun x1377 ((x1171 x1426)) Int (ite x29 (x1723 x1171) (ite x1717 (x1723 x1171) (ite x1562 (x1595 x1171) (x1723 x1171)))))
(define-fun x1290 ((x1171 x1426)) Int (ite (= x1171 x1310) x609 (x1595 x1171)))
(define-fun x1662 ((x1171 x1426)) Int (ite x830 (x1723 x1171) (ite x587 (x1377 x1171) (x1290 x1171))))
(define-fun x1300 ((x1171 x1426)) Int (ite (= x1171 x841) x1191 (x1723 x1171)))
(define-fun x867 ((x1171 x1426)) Int (ite (= x1171 x1728) x340 (x1300 x1171)))
(define-fun x906 ((x1171 x1426)) Int (ite x1022 (x1723 x1171) (ite x643 (x1723 x1171) (ite x694 (x867 x1171) (ite x140 (x1300 x1171) (x1723 x1171))))))
(define-fun x1015 ((x1171 x1426)) Int (ite x1830 (x1723 x1171) (ite x1369 (x906 x1171) (x867 x1171))))
(define-fun x1538 ((x1171 x1426)) Int (ite (= x554 x1171) x862 (x1723 x1171)))
(define-fun x167 ((x1171 x1426)) Int (ite (= x1171 x670) x515 (x1538 x1171)))
(define-fun x1814 ((x1171 x1426)) Int (ite x42 (x1723 x1171) (ite x1804 (x1723 x1171) (ite x1134 (x167 x1171) (ite x1247 (x1538 x1171) (x1723 x1171))))))
(define-fun x275 ((x1171 x1426)) Int (ite x1667 (x1723 x1171) (ite x470 (x1814 x1171) (x167 x1171))))
(define-fun x1440 ((x1171 x1426)) Int (ite (= x1782 x1171) x653 (x275 x1171)))
(define-fun x568 ((x1171 x1426)) Int (ite x1323 (x275 x1171) (ite x1520 (x275 x1171) (ite x61 (x1440 x1171) (x275 x1171)))))
(define-fun x1074 ((x1171 x1426)) Int (ite (= x1171 x433) x1107 (x1440 x1171)))
(define-fun x905 ((x1171 x1426)) Int (ite x1438 (x275 x1171) (ite x192 (x568 x1171) (x1074 x1171))))
(define-fun x607 ((x1171 x1426)) Int (ite x1582 (x1723 x1171) (ite x468 (x1723 x1171) (ite x1731 (x1723 x1171) (ite x372 (x1723 x1171) (ite x660 (x1723 x1171) (ite x1492 (x1723 x1171) (ite x253 (x1723 x1171) (ite x1630 (x1723 x1171) (ite x1059 (x1723 x1171) (ite x1398 (x1723 x1171) (ite x567 (x1662 x1171) (ite x114 (x1015 x1171) (ite x984 (x1723 x1171) (ite x394 (x905 x1171) (ite x933 (x905 x1171) (ite x354 (x275 x1171) (ite x1093 (x275 x1171) (ite x322 (x275 x1171) (ite x1360 (x1723 x1171) (ite x1524 (x1723 x1171) (ite x511 (x1723 x1171) (ite x423 (x1723 x1171) (ite x665 (x1723 x1171) (ite x443 (x1723 x1171) (ite x1173 (x1662 x1171) (ite x22 (x1662 x1171) (ite x225 (x1723 x1171) (ite x684 (x1723 x1171) (ite x1178 (x1723 x1171) (ite x869 (x1015 x1171) (ite x1196 (x1015 x1171) (x1723 x1171)))))))))))))))))))))))))))))))))
(define-fun x1528 ((x1171 x1426)) Int (ite x255 (x1723 x1171) (x905 x1171)))
(define-fun x1741 ((x1171 x1426)) Int (ite x839 (x1723 x1171) (x1528 x1171)))
(define-fun x1684 ((x1171 x1426)) Int (ite x843 (x1662 x1171) (x1741 x1171)))
(define-fun x1704 ((x1171 x1426)) Int (ite x1676 (x1015 x1171) (x1684 x1171)))
(define-fun x1682 ((x1171 x1426)) Int (ite x1159 (x1723 x1171) (x1704 x1171)))
(define-fun x9 ((x1171 x1426)) Int (ite x478 (ite x1770 (x607 x1171) (x1682 x1171)) (x1723 x1171)))
(define-fun x561 ((x1171 Int)) Int (ite (= 0 x1171) x590 (x566 x1171)))
(define-fun x1021 ((x1171 Int)) Int (ite (= x1171 128) x590 (x307 x1171)))
(define-fun x895 ((x1171 x1426)) Int (ite (= x1171 x1466) x1613 (x16 x1171)))
(define-fun x72 ((x1171 x1426)) Int (ite x1806 (x16 x1171) (x895 x1171)))
(define-fun x697 ((x1171 x1426)) Int (ite (= x1466 x1171) 0 (x72 x1171)))
(define-fun x778 ((x1171 x1426)) Int (ite x456 (x16 x1171) (ite x505 (x697 x1171) (x72 x1171))))
(define-fun x1827 ((x1171 x1426)) Int (ite (= x1589 x1171) x1274 (x265 x1171)))
(define-fun x1523 ((x1171 x1426)) Int (ite x456 (x265 x1171) (ite x1806 (x265 x1171) (x1827 x1171))))
(define-fun x1387 ((x1171 x1426)) Int (ite (= x1624 x1171) x412 (x1462 x1171)))
(define-fun x796 ((x1171 x1426)) Int (ite x456 (x1462 x1171) (ite x1806 (x1462 x1171) (x1387 x1171))))
(define-fun x97 ((x1171 Int)) Int (ite (= 196 x1171) 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x938 x1171)))
(define-fun x934 ((x1171 Int)) Int (ite (and (>= x1171 196) (> (+ 32 196) x1171)) (x965 (+ 0 (- x1171 196))) (x97 x1171)))
(define-fun x581 ((x1171 Int)) Int (ite x458 (x934 x1171) (x97 x1171)))
(define-fun x658 ((x1171 Int)) Int (ite (= x1171 196) 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x581 x1171)))
(define-fun x184 ((x1171 Int)) Int (ite (= 200 x1171) (x1821 x1260) (x658 x1171)))
(define-fun x1750 ((x1171 Int)) Int (ite (= 232 x1171) x1497 (x184 x1171)))
(define-fun x410 ((x1171 Int)) Int (ite (= 264 x1171) x727 (x1750 x1171)))
(define-fun x1757 ((x1171 Int)) Int (ite (and (<= 196 x1171) (> (+ 196 32) x1171)) (x1460 (+ 0 (- x1171 196))) (x410 x1171)))
(define-fun x86 ((x1171 Int)) Int (ite x1085 (x1757 x1171) (x410 x1171)))
(define-fun x1482 ((x1171 Int)) Int (ite (= 196 x1171) 115242692596306546229572752729822789716416415832763348928132244437937602691072 (x86 x1171)))
(define-fun x818 ((x1171 Int)) Int (ite (= 200 x1171) x647 (x1482 x1171)))
(define-fun x767 ((x1171 Int)) Int (ite (= x1171 232) x1497 (x818 x1171)))
(define-fun x721 ((x1171 Int)) Int (ite (and (< x1171 (+ 32 196)) (<= 196 x1171)) (x349 (+ 0 (- x1171 196))) (x767 x1171)))
(define-fun x1224 ((x1171 Int)) Int (ite x834 (x721 x1171) (x767 x1171)))
(define-fun x1139 ((x1171 Int)) Int (ite x395 (x938 x1171) (x1224 x1171)))
(define-fun x1404 ((x1171 Int)) Int (ite (= x1214 x1171) x1736 (x93 x1171)))
(define-fun x1608 ((x1171 Int)) Int (x368 x1171))
(define-fun x1735 ((x1171 Int)) Int (ite (= x1171 4) 128 (x1342 x1171)))
(define-fun x118 ((x1171 Int)) Int (ite (= x1171 36) x1628 (x1735 x1171)))
(define-fun x901 ((x1171 Int)) Int (ite (= 68 x1171) x422 (x118 x1171)))
(define-fun x1284 ((x1171 Int)) Int (ite (= 100 x1171) x1038 (x901 x1171)))
(define-fun x266 ((x1171 Int)) Int (ite (= 132 x1171) x1073 (x1284 x1171)))
(define-fun x353 ((x1171 Int)) Int (ite (and (<= 164 x1171) (> (+ 164 x1540) x1171)) (x1608 (+ 0 (- x1171 164))) (x266 x1171)))
(define-fun x1071 ((x1171 Int)) Int (ite (and (< x1171 (+ x173 x77)) (>= x1171 x77)) (x353 (+ x1709 (- x1171 x77))) (x115 x1171)))
(define-fun x604 ((x1171 x1426)) Int (ite (= x1171 x1441) x1274 (x850 x1171)))
(define-fun x885 ((x1171 x1426)) Int (ite x456 (x850 x1171) (ite x1806 (x850 x1171) (x604 x1171))))
(define-fun x1140 ((x1171 Int)) Int (ite x1493 (x115 x1171) (x1071 x1171)))
(define-fun x1017 ((x1171 Int)) Int (ite (= x205 x1171) x1736 (x1157 x1171)))
(define-fun x51 ((x1171 Int)) Int (ite (and (< x1171 (+ x724 x838)) (<= x724 x1171)) (x353 (+ (- x1171 x724) x1709)) (x845 x1171)))
(define-fun x1308 ((x1171 Int)) Int (ite x1245 (x845 x1171) (x51 x1171)))
(define-fun x864 ((x1171 Int)) Int (ite (= x1171 x1078) 0 (x1140 x1171)))
(define-fun x1718 ((x1171 Int)) Int (ite (= x1049 x1171) 0 (x1308 x1171)))
(define-fun x6 ((x1171 Int)) Int (ite x234 (x1308 x1171) (x1718 x1171)))
(define-fun x285 ((x1171 Int)) Int (ite x234 (x1140 x1171) (x864 x1171)))
(define-fun x1533 ((x1171 Int)) Int (ite (= x1171 x1854) x342 (x6 x1171)))
(define-fun x757 ((x1171 Int)) Int (ite (= x896 x1171) x198 (x285 x1171)))
(define-fun x785 ((x1171 Int)) Int (ite (= x447 x1171) x1123 (x6 x1171)))
(define-fun x176 ((x1171 Int)) Int (ite x1779 (x785 x1171) (ite x522 (x1533 x1171) (x6 x1171))))
(define-fun x1699 ((x1171 Int)) Int (ite x1779 (x757 x1171) (x285 x1171)))
(define-fun x367 ((x1171 Int)) Int (ite (= x302 x1171) x1123 (x1139 x1171)))
(define-fun x148 ((x1171 Int)) Int (ite x456 (x6 x1171) (ite x505 (x176 x1171) (x6 x1171))))
(define-fun x446 ((x1171 Int)) Int (ite x456 (x1139 x1171) (ite x505 (x367 x1171) (x1139 x1171))))
(define-fun x203 ((x1171 Int)) Int (ite x456 (x285 x1171) (ite x505 (x1699 x1171) (x285 x1171))))
(define-fun x1657 ((x1171 Int)) Int (ite (= x302 x1171) x108 (x802 x1171)))
(define-fun x1685 ((x1171 Int)) Int (ite (= x1171 x382) 0 (x130 x1171)))
(define-fun x1476 ((x1171 Int)) Int (ite (= x1171 x180) 0 (x1456 x1171)))
(define-fun x1765 ((x1171 Int)) Int (ite (= x380 x1171) 0 (x343 x1171)))
(define-fun x743 ((x1171 Int)) Int (ite (= x1171 x632) 0 (x464 x1171)))
(define-fun x1302 ((x1171 Int)) Int (ite (= x1405 x1171) 0 (x174 x1171)))
(define-fun x98 ((x1171 Int)) Int (ite (= x1204 x1171) x382 (x1048 x1171)))
(define-fun x1698 ((x1171 Int)) Int (ite (= x973 x1171) 0 (x1685 x1171)))
(define-fun x591 ((x1171 Int)) Int (ite (= x411 x1171) 0 (x1476 x1171)))
(define-fun x852 ((x1171 Int)) Int (ite (= x1478 x1171) 0 (x1765 x1171)))
(define-fun x775 ((x1171 Int)) Int (ite (= x925 x1171) 0 (x743 x1171)))
(define-fun x231 ((x1171 Int)) Int (ite (= x1307 x1171) 0 (x1302 x1171)))
(define-fun x593 ((x1171 Int)) Int (ite (= x1655 x1171) x973 (x98 x1171)))
(define-fun x210 ((x1171 Int)) Int (ite x1518 (x343 x1171) (ite x1338 (x852 x1171) (x1765 x1171))))
(define-fun x1238 ((x1171 Int)) Int (ite x1518 (x464 x1171) (ite x1338 (x775 x1171) (x743 x1171))))
(define-fun x1437 ((x1171 Int)) Int (ite x1518 (x130 x1171) (ite x1338 (x1698 x1171) (x1685 x1171))))
(define-fun x391 ((x1171 Int)) Int (ite x1518 (x1456 x1171) (ite x1338 (x591 x1171) (x1476 x1171))))
(define-fun x267 ((x1171 Int)) Int (ite x1518 (x174 x1171) (ite x1338 (x231 x1171) (x1302 x1171))))
(define-fun x1587 ((x1171 Int)) Int (ite x1518 (x1048 x1171) (ite x1338 (x593 x1171) (x98 x1171))))
(define-fun x529 ((x1171 Int)) Int (ite (= x847 x1171) x1511 (x1437 x1171)))
(define-fun x1165 ((x1171 Int)) Int (ite (= x223 x1171) x991 (x391 x1171)))
(define-fun x525 ((x1171 Int)) Int (ite (= x1171 x1823) x599 (x210 x1171)))
(define-fun x1175 ((x1171 Int)) Int (ite (= x291 x1171) x727 (x1238 x1171)))
(define-fun x88 ((x1171 Int)) Int (ite (= x1135 x1171) x618 (x267 x1171)))
(define-fun x982 ((x1171 Int)) Int (ite (= x1738 x1171) x847 (x1587 x1171)))
(define-fun x932 ((x1171 Int)) Int (ite x1474 (x391 x1171) (x1165 x1171)))
(define-fun x315 ((x1171 Int)) Int (ite x1474 (x210 x1171) (x525 x1171)))
(define-fun x279 ((x1171 Int)) Int (ite x1474 (x1437 x1171) (x529 x1171)))
(define-fun x65 ((x1171 Int)) Int (ite x1474 (x1587 x1171) (x982 x1171)))
(define-fun x142 ((x1171 Int)) Int (ite x1474 (x1238 x1171) (x1175 x1171)))
(define-fun x1783 ((x1171 Int)) Int (ite x1474 (x267 x1171) (x88 x1171)))
(define-fun x964 ((x1171 Int)) Int (ite (= x1171 x103) 6583703630350721090866640338677567052142505888617894577283092288194729738240 (x446 x1171)))
(define-fun x1767 ((x1171 Int)) Int (ite (= x1171 x675) 32 (x964 x1171)))
(define-fun x1539 ((x1171 Int)) Int (ite (= x62 x1171) x58 (x1767 x1171)))
(define-fun x499 ((x1171 Int)) Int (ite (= x1797 x1171) x859 (x1539 x1171)))
(define-fun x1340 ((x1171 Int)) Int (ite (= x1171 x1756) x1006 (x499 x1171)))
(define-fun x756 ((x1171 Int)) Int (ite (= x1171 x59) x715 (x1340 x1171)))
(define-fun x1606 ((x1171 Int)) Int (ite (= x1617 x1171) x1264 (x756 x1171)))
(define-fun x897 ((x1171 Int)) Int (ite (= x1171 x1056) x1043 (x1606 x1171)))
(define-fun x1559 ((x1171 Int)) Int (ite x250 (x1539 x1171) (x897 x1171)))
(define-fun x1222 ((x1171 Int)) Int (ite (and (> (+ (x1332 (- x317 68)) 68) x1171) (>= x1171 68)) (x1559 (+ (x1213 (+ 68 x103)) (- x1171 68))) (x1565 x1171)))
(define-fun x190 ((x1171 Int)) Int (ite (= 128 x1171) x1745 (x268 x1171)))
(define-fun x1659 ((x1171 Int)) Int (ite (= x1216 x1171) x1690 (x908 x1171)))
(define-fun x553 ((x1171 Int)) Int (ite (= x235 x1171) x1495 (x1033 x1171)))
(define-fun x362 ((x1171 Int)) Int (ite (= x1747 x1171) x146 (x1327 x1171)))
(define-fun x1803 ((x1171 Int)) Int (ite (= x1171 x1599) x1819 (x508 x1171)))
(define-fun x1344 ((x1171 Int)) Int (ite (= x1171 x1593) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x326 x1171)))
(define-fun x656 ((x1171 Int)) Int (ite (= x1580 x1171) x1207 (x1344 x1171)))
(define-fun x495 ((x1171 Int)) Int (ite (= x1312 x1171) x1721 (x656 x1171)))
(define-fun x153 ((x1171 Int)) Int (ite (= x1171 x1784) x836 (x495 x1171)))
(define-fun x1410 ((x1171 Int)) Int (ite (= x1171 x1593) x907 (x153 x1171)))
(define-fun x1473 ((x1171 Int)) Int (ite (= x1171 x1593) x1243 (x153 x1171)))
(define-fun x803 ((x1171 Int)) Int (ite x1667 (ite x754 (x153 x1171) (x1410 x1171)) (ite x470 (x153 x1171) (x1473 x1171))))
(define-fun x783 ((x1171 Int)) Int (ite (= x1171 x286) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x803 x1171)))
(define-fun x1380 ((x1171 Int)) Int (ite (= x1512 x1171) x1635 (x783 x1171)))
(define-fun x1242 ((x1171 Int)) Int (ite (= x303 x1171) x836 (x1380 x1171)))
(define-fun x377 ((x1171 Int)) Int (ite (= 128 x1171) x1244 (x575 x1171)))
(define-fun x1025 ((x1171 Int)) Int (ite (= 128 x1171) (ite true 1 0) (x377 x1171)))
(define-fun x135 ((x1171 Int)) Int (ite (= 0 x1171) x807 (x733 x1171)))
(define-fun x1215 ((x1171 Int)) Int (ite (= 128 x1171) x462 (x1719 x1171)))
(define-fun x1601 ((x1171 Int)) Int (ite (= 128 x1171) (ite true 1 0) (x1215 x1171)))
(define-fun x1272 ((x1171 Int)) Int (ite (= 0 x1171) x1755 (x733 x1171)))
(define-fun x461 ((x1171 Int)) Int (ite x1138 (x908 x1171) (x1659 x1171)))
(define-fun x1250 ((x1171 Int)) Int (ite x1138 (x1033 x1171) (x553 x1171)))
(define-fun x1273 ((x1171 Int)) Int (ite (= x1848 x1171) x71 (x1124 x1171)))
(define-fun x1167 ((x1171 Int)) Int (ite x1138 (x1124 x1171) (x1273 x1171)))
(define-fun x1046 ((x1171 Int)) Int (ite x1138 (x1327 x1171) (x362 x1171)))
(define-fun x898 ((x1171 Int)) Int (ite (= 160 x1171) x1216 (x516 x1171)))
(define-fun x1499 ((x1171 Int)) Int (ite x1138 (x516 x1171) (x898 x1171)))
(define-fun x1841 ((x1171 Int)) Int (ite x1138 (x508 x1171) (x1803 x1171)))
(define-fun x1133 ((x1171 Int)) Int (ite (= x1171 x1593) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x326 x1171)))
(define-fun x752 ((x1171 Int)) Int (ite (= x1171 x592) x263 (x1133 x1171)))
(define-fun x954 ((x1171 Int)) Int (ite (= x949 x1171) x1721 (x752 x1171)))
(define-fun x45 ((x1171 Int)) Int (ite (= x513 x1171) x836 (x954 x1171)))
(define-fun x196 ((x1171 Int)) Int (ite (= x1171 128) x1401 (x240 x1171)))
(define-fun x282 ((x1171 Int)) Int (ite (= x1171 128) x583 (x196 x1171)))
(define-fun x708 ((x1171 Int)) Int (ite (= 128 x1171) (ite true 1 0) (x282 x1171)))
(define-fun x1020 ((x1171 Int)) Int (ite (= x1171 0) x1252 (x366 x1171)))
(define-fun x943 ((x1171 Int)) Int (ite (= 128 x1171) x1535 (x1759 x1171)))
(define-fun x1184 ((x1171 Int)) Int (ite (= x1171 128) x976 (x943 x1171)))
(define-fun x605 ((x1171 Int)) Int (ite (= 128 x1171) (ite true 1 0) (x1184 x1171)))
(define-fun x431 ((x1171 Int)) Int (ite (= 0 x1171) x651 (x366 x1171)))
(define-fun x1542 ((x1171 Int)) Int (ite (= x1593 x1171) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x326 x1171)))
(define-fun x635 ((x1171 Int)) Int (ite (= x1760 x1171) x82 (x1542 x1171)))
(define-fun x771 ((x1171 Int)) Int (ite (= x1171 x21) x836 (x635 x1171)))
(define-fun x105 ((x1171 Int)) Int (ite (= 128 x1171) x242 (x1388 x1171)))
(define-fun x221 ((x1171 Int)) Int (ite (= 128 x1171) (ite true 1 0) (x105 x1171)))
(define-fun x278 ((x1171 Int)) Int (ite (= x1171 0) x997 (x333 x1171)))
(define-fun x90 ((x1171 Int)) Int (ite (= 128 x1171) x569 (x914 x1171)))
(define-fun x418 ((x1171 Int)) Int (ite (= 128 x1171) (ite true 1 0) (x90 x1171)))
(define-fun x1727 ((x1171 Int)) Int (ite (= 0 x1171) x1106 (x333 x1171)))
(define-fun x428 ((x1171 Int)) Int (ite (= x1171 128) x226 (x325 x1171)))
(define-fun x1596 ((x1171 Int)) Int (ite (= 128 x1171) x69 (x428 x1171)))
(define-fun x1586 ((x1171 Int)) Int (ite (= x1171 128) (ite true 1 0) (x1596 x1171)))
(define-fun x655 ((x1171 Int)) Int (ite (= 0 x1171) x526 (x1775 x1171)))
(define-fun x480 ((x1171 Int)) Int (ite (= x1171 128) x35 (x615 x1171)))
(define-fun x144 ((x1171 Int)) Int (ite (= x1171 128) x626 (x480 x1171)))
(define-fun x882 ((x1171 Int)) Int (ite (= x1171 128) (ite true 1 0) (x144 x1171)))
(define-fun x1454 ((x1171 Int)) Int (ite (= 0 x1171) x622 (x1775 x1171)))
(define-fun x1217 ((x1171 Int)) Int (ite x1066 (x333 x1171) (x278 x1171)))
(define-fun x798 ((x1171 Int)) Int (ite x587 (x333 x1171) (x1727 x1171)))
(define-fun x680 ((x1171 Int)) Int (ite x830 (x1217 x1171) (x798 x1171)))
(define-fun x1769 ((x1171 Int)) Int (ite x754 (x1775 x1171) (x655 x1171)))
(define-fun x1696 ((x1171 Int)) Int (ite x470 (x1775 x1171) (x1454 x1171)))
(define-fun x682 ((x1171 Int)) Int (ite x1667 (x1769 x1171) (x1696 x1171)))
(define-fun x44 ((x1171 Int)) Int (ite x1203 (x733 x1171) (x135 x1171)))
(define-fun x1457 ((x1171 Int)) Int (ite x192 (x733 x1171) (x1272 x1171)))
(define-fun x625 ((x1171 Int)) Int (ite x1438 (x44 x1171) (x1457 x1171)))
(define-fun x1237 ((x1171 Int)) Int (ite x1536 (x857 x1171) (ite x163 (x1343 x1171) (ite x1005 (x1452 x1171) (x1343 x1171)))))
(define-fun x1839 ((x1171 Int)) Int (x666 x1171))
(define-fun x1155 ((x1171 Int)) Int (x368 x1171))
(define-fun x1279 ((x1171 Int)) Int (x432 x1171))
(define-fun x1786 ((x1171 Int)) Int (x1608 x1171))
(define-fun x1132 ((x1171 Int)) Int (ite x1693 (x541 x1171) (ite x264 (x307 x1171) (ite x487 (x1021 x1171) (x307 x1171)))))
(define-fun x1569 ((x258 Int)) Bool (=> (and (not (= x258 4085545785)) (not (= x258 1000000000000000000)) (not (= x258 961581905)) (not (= x258 3138304935)) (not (= x258 2290148746)) (not (= 2835717307 x258)) (not (= 928407353 x258)) (not (= x258 404098525)) (not (= x258 3921506749)) (not (= x258 1896758387)) (not (= 244203140 x258)) (not (= 1520650183 x258)) (not (= 1742540299 x258)) (not (= x258 4294967296)) (not (= x258 2759752456)) (not (= x258 1001385071)) (not (= x258 157198259)) (not (= x258 6583703630350721090866640338677567052142505888617894577283092288194729738240)) (not (= 1461501637330902918203684832716283019655932542976 x258)) (not (= x258 4137353292)) (not (= x258 3019127319)) (not (= 450795052 x258)) (not (= 1242462222 x258)) (not (= 1461501637330902918203684832716283019655932542975 x258)) (not (= x258 80076034)) (not (= x258 1027062850)) (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x258)) (not (= 115242692596306546229572752729822789716416415832763348928132244437937602691072 x258)) (not (= 2863377861 x258)) (not (= 2757214935 x258)) (not (= 117300739 x258)) (not (= x258 3039079375)) (not (= x258 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x258 85603218)) (not (= x258 18446744073709551615)) (not (= 26959946667150639794667015087019630673637144422540572481103610249216 x258)) (not (= x258 2514000705)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x258)) (not (= x258 3248092328)) (not (= x258 2781097000)) (not (= x258 77196514420459877940035116867124998943289115686762304616657918434777787006976)) (not (= x258 706499883)) (not (= x258 1745213101)) (not (= x258 599290589)) (not (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 x258)) (not (= x258 2992780654)) (< 10000 x258) (not (= 1889567281 x258)) (not (= 2455663379 x258)) (not (= x258 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x258 3961236718)) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x258))) (not ((_ is x664) (x348 x258)))))
(assert (= x1134 (and x1119 x1498)))
(assert (= (x1821 (x664 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x1170 x1743))
(assert (= (and x1607 x983) x960))
(assert (x1170 x1465))
(assert (= (and x531 x1182) x984))
(assert (=> (>= 10000 x276) (= (x664 x276) (x348 x276))))
(assert (x1170 x1732))
(assert (x1170 x1641))
(assert (x1170 x1580))
(assert (x1170 x1788))
(assert (x1170 x772))
(assert (x1170 x1326))
(assert (= (x1821 (x664 961581905)) 961581905))
(assert (x1170 x714))
(assert (x1170 x1619))
(assert (x1170 x740))
(assert (= 115242692596306546229572752729822789716416415832763348928132244437937602691072 (x1821 (x664 115242692596306546229572752729822789716416415832763348928132244437937602691072))))
(assert (x1170 x1602))
(assert (x1170 x961))
(assert (x1170 x1078))
(assert (= (and (not x18) x1162) x60))
(assert (x1170 x1547))
(assert (x1170 x1530))
(assert (= x403 (x1821 (x348 x403))))
(assert (= x986 (and x574 (not x19))))
(assert (x1170 x945))
(assert (x1170 x739))
(assert (=> (>= 10000 x1475) (= (x664 x1475) (x348 x1475))))
(assert (x1569 x1614))
(assert (= (and x833 x288) x280))
(assert (x1170 x706))
(assert (x1170 x1227))
(assert (x1170 x52))
(assert (x1170 x1811))
(assert (= (and x875 x399) x395))
(assert (x1170 x1840))
(assert (= x1527 (x1821 (x348 x1527))))
(assert (x1170 x950))
(assert (x1170 x1819))
(assert (= x322 (and x811 x596)))
(assert (x1170 x699))
(assert (= x1153 (and x902 x1354)))
(assert (= x929 (and x341 x1092)))
(assert (x1170 x387))
(assert (= x133 (and x1198 (not x352))))
(assert (x1170 x1858))
(assert (x1170 x1416))
(assert (x1569 x871))
(assert (x1170 x1367))
(assert (= x426 (and (not x1208) x281)))
(assert (x1170 x501))
(assert (x360 x732))
(assert (x1575 x732))
(assert (x1170 x1634))
(assert (x1170 x787))
(assert (= (or x1070 x1489) x851))
(assert (= (x1821 (x488 x1089 8)) (+ 8 (x1821 x1089))))
(assert (x1170 x92))
(assert (= x8 (x1821 (x348 x8))))
(assert (x1170 x336))
(assert (=> (>= 10000 x1751) (= (x348 x1751) (x664 x1751))))
(assert (= x40 (or x1153 x250)))
(assert (=> (>= 10000 x1527) (= (x348 x1527) (x664 x1527))))
(assert (x1170 x735))
(assert (= x755 (=> (= x847 x1320) x1692)))
(assert (x1170 x978))
(assert (x1170 x640))
(assert (x1569 x657))
(assert (= (x1821 (x348 x861)) x861))
(assert (x1170 x13))
(assert (x1170 x1348))
(assert (= (or x1245 x1487) x614))
(assert (x1170 x1702))
(assert (x1170 x1760))
(assert (x1170 x202))
(assert (x1170 x518))
(assert (= (x1821 (x348 x74)) x74))
(assert (=> (>= 10000 x1860) (= (x348 x1860) (x664 x1860))))
(assert (x1170 x1282))
(assert (=> (<= x1363 10000) (= (x664 x1363) (x348 x1363))))
(assert (= (or x830 x1128) x157))
(assert (x1170 x868))
(assert (x1170 x11))
(assert (x1170 x1212))
(assert (= (and x219 x584) x725))
(assert (x1170 x828))
(assert (= (x1821 (x348 x657)) x657))
(assert (x1170 x705))
(assert (x1170 x745))
(assert (x1170 x1583))
(assert (x1575 x1149))
(assert (= x856 (and x779 (not x1711))))
(assert (x1170 x146))
(assert (=> (>= 10000 x1163) (= (x348 x1163) (x664 x1163))))
(assert (x1170 x807))
(assert (= 85603218 (x1821 (x664 85603218))))
(assert (x1170 x1256))
(assert (x1170 x1511))
(assert (= (and (not x1509) x1299) x95))
(assert (= (x1821 (x488 x835 1)) (+ 1 (x1821 x835))))
(assert (= (or x1649 x1059 x225 x1196 x1093 x171 x1582 x1366 x253 x1524 x933 x1731 x660 x239 x322 x372 x1630 x443 x869 x684 x149 x53 x22 x665 x984 x1360 x114 x199 x1398 x374 x1178 x1492 x1173 x394 x511 x468 x423 x354 x567) x1770))
(assert (= 0 (x938 (+ (x1213 (+ x103 68)) 64))))
(assert (= x1518 (and x217 x1748)))
(assert (x1170 x685))
(assert (= x1113 (and (not x1422) x1455)))
(assert (x1170 x890))
(assert (= (and x580 (not x150)) x1631))
(assert (x1569 x169))
(assert (x1170 x1613))
(assert (x1170 x180))
(assert (= (x1821 (x664 6583703630350721090866640338677567052142505888617894577283092288194729738240)) 6583703630350721090866640338677567052142505888617894577283092288194729738240))
(assert (x1170 x1701))
(assert (= x774 (and (not x1748) x217)))
(assert (x1170 x252))
(assert (x1170 x1100))
(assert (= x1536 (and (not x946) x918)))
(assert (= (=> (= (> x1736 0) x383) (and (=> (and (and (= x876 (x488 x277 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1233) (>= 1461501637330902918203684832716283019655932542975 x1614) (= (x1716 (x348 x1614) (x664 2) 0) x1642) (= x1466 (x1716 (x348 x871) x389 0)) (<= 0 x1614) (> x1736 0) (>= x1233 0) (= x1614 (x710 x801)) (= (x1716 (x348 x871) (x664 1) 0) x801) (< x1614 1461501637330902918203684832716283019655932542976) (= x1045 (x1716 (x348 x871) x876 0)) (= (x353 164) x871) (= (x488 x287 3) x389) (= x642 (not (= x1233 0))) (= (x1190 x1045) x1233) (= (x1716 (x348 x647) x1642 0) x287) (= (x488 x287 1) x277)) x383) (and (=> (and (and (or (and (and (>= x1226 0) (= x1226 x1274) (<= x1226 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1226 (x265 x880)) (= x880 (x488 x801 8))) x716) (and (and (= (x1213 (+ x1267 x256)) x381) (= x344 (x1859 x1219)) (= x381 x1274) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x425) (= x128 (= 0 x471)) (= x425 (x1462 x472)) (>= x344 0) (<= 0 x425) (= x1219 (x488 x10 1)) (ite x128 x128 (= x344 (div x1837 x471))) (= (div x1837 x1270) x256) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1267) (= (ite (< x1240 x547) x737 x547) x1374) (= (x488 x801 7) x472) (= (x1332 (- x1374 x425)) x471) (<= x547 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x530 x10) x547) (= x1267 (x265 x560)) (= x10 (x488 x801 5)) (>= x547 0) (= x1837 (mod (* x344 x471) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x560 (x488 x472 1)) (not (>= (+ x1267 x256) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= x1267 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x344)) (not x716))) (and (= x1270 (x31 x597)) (>= x1270 0) (= (x488 x801 3) x597) (= (= x1270 0) x716) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1270))) x642) x1764) (=> (not x642) x957))) (=> (and (not x383) (= x108 0)) x1516))) x1812))
(assert (= x904 (and x1396 x1652)))
(assert (= (+ 1 (x1821 x1114)) (x1821 (x488 x1114 1))))
(assert (x1170 x548))
(assert (x1170 x1003))
(assert (= x1693 (and (not x534) x1658)))
(assert (= (x348 85603218) (x664 85603218)))
(assert (= x824 (and x856 (not x102))))
(assert (= x814 (or x487 x318 x264 x1693)))
(assert (x1170 x1226))
(assert (x1170 x103))
(assert (x1569 x1268))
(assert (= 0 (x938 (+ 96 (x1213 (+ 68 x103))))))
(assert (= x744 (and x104 (not x944))))
(assert (x1569 x1256))
(assert (=> (<= x1614 10000) (= (x664 x1614) (x348 x1614))))
(assert (= (=> (and (= (x190 128) x573) (= x1364 (not (> x573 1)))) (and x1364 x1585)) x230))
(assert (x1170 x310))
(assert (x1170 x1862))
(assert (x1170 x751))
(assert (= (x664 1896758387) (x348 1896758387)))
(assert (x1170 x618))
(assert (x1170 x594))
(assert (= (=> (and (= x1446 x1625) (= x451 x1576)) x1189) x903))
(assert (x1170 x1312))
(assert (= (x348 2759752456) (x664 2759752456)))
(assert (x1170 x913))
(assert (x1170 x194))
(assert (x1170 x1494))
(assert (x1170 x1739))
(assert (x1170 x1834))
(assert (x1170 x1147))
(assert (x1170 x75))
(assert (= x1173 (and x424 x311)))
(assert (= 0 (x908 x1449)))
(assert (= (x1821 (x488 x1385 8)) (+ 8 (x1821 x1385))))
(assert (= (x1821 (x664 26959946667150639794667015087019630673637144422540572481103610249216)) 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= x1159 (and (not x117) x33)))
(assert (= (and (not x1339) x731) x1162))
(assert (x1575 x1166))
(assert (x1170 x977))
(assert (x1170 x303))
(assert (= (and x193 x1110) x1092))
(assert (x1170 x1316))
(assert (= (and x383 x224) x644))
(assert (= x1680 (and x912 (not x14))))
(assert (= x1860 (x1821 (x348 x1860))))
(assert (x1170 x909))
(assert (x1170 x535))
(assert (x1170 x959))
(assert (x1170 x515))
(assert (= (=> (and (or (and (not x188) (and (= x724 (x1213 (+ 32 x205))) (= x838 (mod (* x1736 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x188) (and (= (x1213 (+ x205 x1615)) x302) (= x188 (= 0 x1736)) (= (mod (* 32 x1736) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1641) (= (x1213 (+ x1641 32)) x1615))) x272) x673))
(assert (x1170 x169))
(assert (x1170 x35))
(assert (x1170 x397))
(assert (= (x1821 (x348 x1584)) x1584))
(assert (=> (>= 10000 x1194) (= (x348 x1194) (x664 x1194))))
(assert (x1170 x110))
(assert (x1170 x1598))
(assert (x1170 x38))
(assert (x1170 x179))
(assert (x1170 x653))
(assert (= (=> (and (not (= 0 x1792)) (= x1214 196) (= x527 (x1224 196)) (not (> 32 x120)) (> x527 0)) x436) x396))
(assert (= (and x1726 x910) x1053))
(assert (x1170 x1534))
(assert (x1170 x351))
(assert (x1170 x683))
(assert (= (=> (and (= x538 0) (= x289 x335)) x474) x924))
(assert (x1170 x405))
(assert (x1170 x1081))
(assert (x1170 x838))
(assert (x1569 x663))
(assert (= (or x661 x654) x917))
(assert (x1170 x1854))
(assert (= (x1821 (x664 1889567281)) 1889567281))
(assert (x1170 x571))
(assert (= (x1821 (x488 x1385 5)) (+ (x1821 x1385) 5)))
(assert (x1170 x408))
(assert (= (x845 x92) 0))
(assert (x1170 x74))
(assert (= (x348 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x664 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x1170 x1683))
(assert (= x443 (and x364 (not x1780))))
(assert (= (x1821 (x348 x162)) x162))
(assert (x360 x71))
(assert (= (x348 3138304935) (x664 3138304935)))
(assert (= x169 (x1821 (x348 x169))))
(assert (= x394 (and x1481 x621)))
(assert (x1170 x1721))
(assert (x1170 x1540))
(assert (= (+ (x1821 x819) 1) (x1821 (x488 x819 1))))
(assert (x1170 x1678))
(assert (x1170 x1556))
(assert (x1170 x119))
(assert (x1170 x1286))
(assert (x1170 x1383))
(assert (= (and x944 x104) x225))
(assert (x1170 x770))
(assert (= (x1821 (x348 x1752)) x1752))
(assert (= (and x1372 (not x1831)) x337))
(assert (x1569 x463))
(assert (x1170 x836))
(assert (x1170 x178))
(assert (= (x664 3248092328) (x348 3248092328)))
(assert (= x468 (and x24 (not x893))))
(assert (= (x1821 (x664 4085545785)) 4085545785))
(assert (= (x1821 (x664 1745213101)) 1745213101))
(assert (= (x1821 (x488 x1466 1)) (+ 1 (x1821 x1466))))
(assert (x1170 x1715))
(assert (x1170 x1746))
(assert (= (x1821 (x488 x287 1)) (+ 1 (x1821 x287))))
(assert (= x1004 (and x309 (not x1291))))
(assert (x1569 x577))
(assert (= x1796 (x1821 (x348 x1796))))
(assert (x1170 x1458))
(assert (x1170 x538))
(assert (= x374 (and x54 x63)))
(assert (x1170 x1405))
(assert (= (x664 3961236718) (x348 3961236718)))
(assert (= x478 (or (and x833 (not x288)) x280)))
(assert (x1170 x1043))
(assert (x1170 x1076))
(assert (= x506 (x1821 (x348 x506))))
(assert (x1170 x1424))
(assert (x1170 x1305))
(assert (x1569 x616))
(assert (x1170 x1823))
(assert (= x754 (or x1771 x1603 x489 x1522 x816 x725)))
(assert (= x1323 (and x1328 x467)))
(assert (= x1194 (x1821 (x348 x1194))))
(assert (x1170 x1051))
(assert (x1170 x486))
(assert (= (x1821 (x348 x1268)) x1268))
(assert (x1170 x160))
(assert (x1170 x1513))
(assert (x1170 x8))
(assert (x1569 x1675))
(assert (x1170 x386))
(assert (x1170 x1778))
(assert (= (and x1291 x309) x1712))
(assert (x1170 x702))
(assert (x1170 x784))
(assert (x1170 x1573))
(assert (= x53 (and (not x1110) x193)))
(assert (x1170 x638))
(assert (x1170 x503))
(assert (x1170 x1088))
(assert (x1170 x441))
(assert (= (and x1780 x364) x1507))
(assert (x1170 x1690))
(assert (= (x1821 (x664 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (= (x348 3039079375) (x664 3039079375)))
(assert (x1170 x859))
(assert (= (x1821 (x664 117300739)) 117300739))
(assert (= (or x1065 x417) x633))
(assert (=> (>= 10000 x347) (= (x348 x347) (x664 x347))))
(assert (x1170 x1120))
(assert (x1170 x1000))
(assert (x1170 x57))
(assert (x1170 x248))
(assert (x1170 x1555))
(assert (x1170 x550))
(assert (x1170 x813))
(assert (x1170 x569))
(assert (x1170 x791))
(assert (x1170 x58))
(assert (= x1363 (x1821 (x348 x1363))))
(assert (x1170 x1322))
(assert (x1170 x1730))
(assert (x1170 x1265))
(assert (= (and x1164 x1008) x104))
(assert (= (x664 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x348 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x1170 x1384))
(assert (= (and x1629 x1506) x1024))
(assert (x1170 x790))
(assert (x360 x1151))
(assert (x1170 x667))
(assert (x1170 x1136))
(assert (= (+ (x1821 x819) 3) (x1821 (x488 x819 3))))
(assert (x1170 x821))
(assert (= x537 (and x1671 x1742)))
(assert (= (=> (= (= 0 x1663) x1019) (and (=> (and (not x1019) (= x1481 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x123) (and (> 32 x123) (= true (<= x123 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))) (and (=> (not x1481) x498) (=> x1481 x1461))) (=> x1019 x1461))) x1257))
(assert (= x475 (=> (= x941 (= x688 0)) (and (=> x941 x1461) (=> (and (not x941) (= x424 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x967) (and (= (<= x967 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x967))))) (and (=> (and (and (= (x598 x510) x919) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x919) (>= x919 0) (= (< x919 x836) x1072) (= (x1716 (x348 x1378) x1729 0) x510) (= (x1716 (x348 x1255) (x664 0) 0) x1729) (= x1378 (x926 1461501637330902918203684832716283019655932542975 x17)) (= x1255 (x926 1461501637330902918203684832716283019655932542975 x732))) (not x424)) (and (=> (and (not x1072) (and (= x1545 (x926 1461501637330902918203684832716283019655932542975 x17)) (= (x1716 (x348 x463) (x664 0) 0) x1185) (= x463 (x926 1461501637330902918203684832716283019655932542975 x732)) (= x1001 (x1716 (x348 x1545) x1185 0)) (= x297 (x1332 (- x919 x836))))) x617) (=> x1072 x1461))) (=> x424 x1461)))))))
(assert (x1170 x1204))
(assert (= x402 (or x314 x1810 x1334 x606 x557 x136)))
(assert (x1170 x1211))
(assert (=> (<= (x312 x994 224) 10000) (= (x664 (x312 x994 224)) (x348 (x312 x994 224)))))
(assert (= x1005 (and (not x1418) x1843)))
(assert (= (and x450 x95) x1488))
(assert (x1170 x846))
(assert (= (or x395 x1537) x1361))
(assert (= (x1821 (x348 x663)) x663))
(assert (x1170 x1121))
(assert (= x46 (or (and (not x1695) x157) x1177)))
(assert (x1569 x154))
(assert (= x1400 x617))
(assert (x1575 x17))
(assert (x1170 x797))
(assert (x1575 x71))
(assert (= (x938 (+ 32 (x1213 (+ 68 x103)))) 0))
(assert (= (and x1763 (not x134)) x776))
(assert (= (x1821 (x348 x440)) x440))
(assert (x1170 x966))
(assert (= (and (not x794) x774) x1761))
(assert (= (+ (x1821 x316) 1) (x1821 (x488 x316 1))))
(assert (x1170 x350))
(assert (x1170 x507))
(assert (x1170 x1755))
(assert (x1170 x827))
(assert (x1170 x1535))
(assert (x1170 x37))
(assert (x1170 x1148))
(assert (= (and x1024 (not x970)) x372))
(assert (= (x1821 (x488 x1114 3)) (+ (x1821 x1114) 3)))
(assert (x1170 x490))
(assert (= x738 true))
(assert (x1170 x1483))
(assert (x1170 x1054))
(assert (x1170 x246))
(assert (= (x1821 (x348 x1176)) x1176))
(assert (= x192 (or x1370 x214 x1323 x1520 x61)))
(assert (= x1652 (and x401 (not x1390))))
(assert (x1170 x145))
(assert (= (and x980 x56) x1370))
(assert (= x417 (or x1546 x1032)))
(assert (= x918 (and x1470 x633)))
(assert (x1575 x1513))
(assert (= (x1821 (x348 x294)) x294))
(assert (= (and x1354 (not x902)) x250))
(assert (= 3921506749 (x1821 (x664 3921506749))))
(assert (x1170 x1512))
(assert (= (and (not x341) x1092) x239))
(assert (x1170 x572))
(assert (= (and x1275 x245) x834))
(assert (x1170 x526))
(assert (x1170 x347))
(assert (x1170 x1288))
(assert (x1170 x1785))
(assert (x1170 x696))
(assert (= (and x1604 x1053) x684))
(assert (x1170 x955))
(assert (x1170 x815))
(assert (x1170 x1446))
(assert (x1170 x365))
(assert (x1170 x1306))
(assert (x1170 x1427))
(assert (x1569 x506))
(assert (x1170 x23))
(assert (x1170 x599))
(assert (= x401 (and x70 x766)))
(assert (= (+ 3 (x1821 x1385)) (x1821 (x488 x1385 3))))
(assert (x1170 x985))
(assert (x1170 x746))
(assert (x1170 x1304))
(assert (x1170 x1311))
(assert (= 1896758387 (x1821 (x664 1896758387))))
(assert (= x1260 (x348 (x1821 x1260))))
(assert (=> (>= 10000 x577) (= (x348 x577) (x664 x577))))
(assert (x1170 x1191))
(assert (= (x1821 (x664 450795052)) 450795052))
(assert (= (and x1103 (not x1246)) x1857))
(assert (x1170 x1016))
(assert (= (and x1592 (not x1109)) x511))
(assert (= (and x96 x1152) x136))
(assert (x1170 x826))
(assert (x1170 x430))
(assert (x1170 x1145))
(assert (= (=> (and (= x179 x1063) (= x1282 x600)) x1011) x1154))
(assert (= (and x1763 x134) x1486))
(assert (= x1629 (and x209 (not x877))))
(assert (= (and x1442 (not x1813)) x1546))
(assert (=> (<= x304 10000) (= (x348 x304) (x664 x304))))
(assert (x1170 x1274))
(assert (= x63 (and x1201 x1150)))
(assert (x1170 x907))
(assert (x1170 x1736))
(assert (= (and x232 x631) x1649))
(assert (x1170 x1146))
(assert (= x580 (and (not x228) x863)))
(assert (x1170 x1243))
(assert (= x1694 (or x384 x1518)))
(assert (x1170 x579))
(assert (x1170 x577))
(assert (x1170 x1479))
(assert (x1575 1461501637330902918203684832716283019655932542975))
(assert (x1170 x1206))
(assert (= (and (not x1357) x1062) x99))
(assert (= (and x621 (not x1481)) x112))
(assert (= x214 (and x1508 x948)))
(assert (x1569 x1752))
(assert (x1170 x1655))
(assert (= x1520 (and x407 x1200)))
(assert (x1170 x1160))
(assert (x1170 x251))
(assert (= (or x522 x1779 x780) x505))
(assert (x360 x1166))
(assert (x1170 x1195))
(assert (x1170 x329))
(assert (x1575 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= 0 (x115 x1131)))
(assert (x1170 x1352))
(assert (x360 x853))
(assert (= x1861 (and x1271 x292)))
(assert (= x613 (or x255 x112)))
(assert (x1170 x831))
(assert (x1170 x283))
(assert (= x1103 (and (not x270) x996)))
(assert (x1170 x916))
(assert (x1170 x884))
(assert (= x319 (and (not x245) x1275)))
(assert (x1170 x1253))
(assert (=> (<= x1220 10000) (= (x348 x1220) (x664 x1220))))
(assert (x1170 x1010))
(assert (= x999 (=> (and (= x1663 x1633) (= x1480 x123)) x1566)))
(assert (x1170 x256))
(assert (x1170 x1393))
(assert (x1170 x1397))
(assert (x1170 x152))
(assert (x1170 x138))
(assert (= x305 (and x1680 (not x1058))))
(assert (x1170 x1855))
(assert (x1170 x1738))
(assert (x1170 x669))
(assert (= x1658 (and x917 x1809)))
(assert (= x1672 (=> (and (and (= x1774 x1510) (= true x832) (= x1645 x1504) (= false x369) (= x1637 1001385071) (<= x1605 255) (= 2992780654 x1180) (= (= x746 (mod (* 32 x1188) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x1130) x1706 (= x521 false) (and (< 163 x1709) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1709) true)) (= x79 1) (not (> x1736 18446744073709551615)) (= 1 x465) (= x482 1027062850) (= x647 x422) x523 (= 1001385071 x753) (= true x1618) (= x1100 (mod (* x1736 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x41 true) (= x981 false) (= x111 x75) (= 0 x821) (= x422 x1500) (= x1014 x161) (= 1001385071 x935) (= (= x671 1) x1706) (= (x1155 0) x138) (= (ite x636 1 0) x1014) (= 1520650183 x1115) (= x1039 false) (= (not x1324) x271) (= 1001385071 x815) (= x793 (= (mod (* 32 x1232) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1313)) x677 (>= x1013 0) (= x416 false) (= false x398) (= x50 x1067) (= x1403 x1313) (<= x1407 1461501637330902918203684832716283019655932542975) (= x1232 x1678) (= false x1471) (= (x1213 (+ x1052 32)) x1709) (= x1600 0) (= x712 x222) (= x1835 x636) (= (+ x1036 x1309) x668) (= x1014 x978) (= x746 x1849) (= x1382 (x921 (x348 x727))) (= false x713) (= 85603218 x985) (= (ite x636 1 0) x1628) (= (x1332 (- x1709 4)) x1788) (= x1540 (mod (- (x1213 (+ (mod (* 32 x1073) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x822 x1002) (= (= x1003 x558) x523) (= x1212 2455663379) (= true x911) (= x696 x1309) (= x1227 1001385071) (= x1052 (x1213 (+ x1557 32))) (<= x618 1461501637330902918203684832716283019655932542975) (= (= x220 x1395) x1744) (not (< x1709 4)) (= x927 x1829) (= 3138304935 x1298) x1744 (> 2290148746 x1333) (= x570 x629) (= x792 true) (= 1001385071 x1846) (= false x211) (= 164 x993) (= x131 x476) (>= 1461501637330902918203684832716283019655932542975 x455) (not (or (and (> 128 x1788) (= true (<= x1788 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x1788 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x1324 (= 0 x1014)) (= x1785 x350) (= x1316 1001385071) (< x1333 1520650183) (= x1362 true) (= x1651 x1002) (= x1036 (+ x1183 x1510)) (<= x647 1461501637330902918203684832716283019655932542975) (not (< x1709 x1646)) (not (= x1333 928407353)) (<= 0 x1076) (= false x612) (= x1531 x618) (= x1188 x891) (= x1333 1001385071) (= 0 x216) (>= x1605 0) (= x1399 x75) (= x1677 false) (= 1242462222 x1549) (= (x1213 (+ x959 32)) x1557) (= (= x822 x138) x363) (= x26 x441) (= x81 x1188) (= true x1815) (= x700 false) (= x213 (= x81 1)) (= false x1543) x363 (= (ite x271 1 0) x161) (= (x1213 (+ (mod (* 32 x1073) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 36)) x1137) (= x1038 x618) (= (x353 132) x1736) (= x696 x1453) (= x1210 x1148) (= x1158 x636) (= x737 x64) (= x570 x558) (= x1315 x26) (<= x1076 1461501637330902918203684832716283019655932542975) x213 (= x1073 x1232) (= x628 true) (= x1666 false) (= x1781 x1497) (= x1195 x1500) (= 0 x111) (= true x1269) (= 1001385071 x740) (= x1007 false) (= x959 (x1213 (+ x1137 32))) (= x1232 x671) (= x528 1001385071) (>= 1461501637330902918203684832716283019655932542975 x1013) (= false x552) x793 (= x1646 (x1213 (+ 164 x1100))) (= x1497 x1076) (<= 0 x1407) (= true x920) (= x290 1001385071) (= 1001385071 x215) (= x323 x647) (= x1 4085545785) (= x737 x1240) (not (> 928407353 x1333)) (< x1003 1461501637330902918203684832716283019655932542976) x1130 (<= 0 x455) (= x890 x1313) (= x399 (= x647 x1497)) (= x989 false) (= x1013 x441) (= x677 (= x927 0)) (= x1305 x1183) (= x1335 false) (= (x1279 0) x1003) (= x47 80076034) (= x1500 x1038) (> x1382 0)) (and (not (= 0 x1847)) (= (x1213 (+ x430 x585)) x995) (not (>= (+ x585 x430) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x585 (x1237 128)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x246) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x246) true) (< x246 32)))) (= x995 x1453))) (and (=> (and (not x399) (and (or (and (not x1501) (= x132 x1665)) (and x1501 (and (= 1 x132) (> 4294967296 x175)))) (and (= x1194 (x926 1461501637330902918203684832716283019655932542975 x1166)) (= (mod (* x1333 26959946667150639794667015087019630673637144422540572481103610249216) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x994) (not (= x1547 0)) (= x1547 (x921 (x348 x1194))) (= (> x1665 0) x1501) (= x1260 (x672 (x664 36) (x664 32) (x348 x74) (x348 (x312 x994 224)) 0))))) x1590) (=> (and (= x1214 128) x399) x436)))))
(assert (x1170 x651))
(assert (x1170 x21))
(assert (x1170 x564))
(assert (x1170 x689))
(assert (= x1726 (and x1201 (not x1150))))
(assert (x1170 x263))
(assert (= (and x68 x762) x1810))
(assert (x1170 x1207))
(assert (= (x1821 (x348 x1545)) x1545))
(assert (= (or x42 x866 x1247 x1134 x1486 x1804) x470))
(assert (=> (<= x1519 10000) (= (x348 x1519) (x664 x1519))))
(assert (x1170 x1797))
(assert (=> (<= x477 10000) (= (x348 x477) (x664 x477))))
(assert (= (x1124 x373) 0))
(assert (x1569 x160))
(assert (= (x664 117300739) (x348 117300739)))
(assert (x1569 x1176))
(assert (x1170 x1023))
(assert (= (x1821 (x664 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x1447 (and x1062 x1357)))
(assert (= (x348 157198259) (x664 157198259)))
(assert (= x1445 (=> (= x1379 x507) x1578)))
(assert (x1569 x8))
(assert (= (x664 3921506749) (x348 3921506749)))
(assert (= x858 (=> (and (= (x926 1461501637330902918203684832716283019655932542975 x20) x1043) (> 4 x859) (= (x1213 (+ 32 x1756)) x59) (= (x1213 (+ 32 x1640)) x1424) (= (x1213 (+ x1797 32)) x1756) (= x987 (x1213 (+ 32 x1424))) (= x859 (x279 x1640)) (= x1006 (x926 1461501637330902918203684832716283019655932542975 x1513)) (= x20 (x1783 x831)) (= (x315 x987) x715) (= (x1213 (+ x260 32)) x831) (= x702 (x1213 (+ x1056 32))) (= x1149 (x142 x260)) (= (x1213 (+ 32 x1617)) x1056) (= (x926 1461501637330902918203684832716283019655932542975 x1149) x1264) (= (x932 x1424) x1513) (= x1409 (not (< 1 x58))) (= x260 (x1213 (+ 32 x987))) (= (x65 x1322) x1640) (= x1617 (x1213 (+ 32 x59)))) (and (=> (= x791 x702) x1484) x1409))))
(assert (= (x348 1745213101) (x664 1745213101)))
(assert (= x1421 (=> (and (= (x1213 (+ 32 x205)) x1049) (> x1347 0) (= (x1404 x1214) x1347) (< 0 x194) (= (not (> x1736 1)) x860) (= x194 (x1017 x205)) (= x1078 (x1213 (+ 32 x1214)))) (and x860 x1812))))
(assert (= (and x421 (not x1464)) x127))
(assert (= (and x1571 x1042) x423))
(assert (= (and x1629 (not x1506)) x1492))
(assert (x1170 x207))
(assert (x1170 x28))
(assert (x1170 x1061))
(assert (= (x1821 (x348 x759)) x759))
(assert (x1170 x1151))
(assert (x1170 x422))
(assert (x1170 x172))
(assert (x1170 x1703))
(assert (x1170 x1675))
(assert (= (x115 x896) 0))
(assert (x1170 x500))
(assert (= (=> (and (= x1633 0) (= x1480 x459)) x999) x107))
(assert (= x866 (and x1455 x1422)))
(assert (= (x664 450795052) (x348 450795052)))
(assert (= 1000000000000000000 (x1821 (x664 1000000000000000000))))
(assert (= x768 (or x843 x1028)))
(assert (x1170 x728))
(assert (x1170 x1283))
(assert (= (x1821 (x664 2514000705)) 2514000705))
(assert (= (and (not x1292) x855) x1192))
(assert (x1170 x1049))
(assert (x1170 x1261))
(assert (= (x1821 (x664 404098525)) 404098525))
(assert (x1170 x1752))
(assert (x1170 x722))
(assert (x1170 x1665))
(assert (x1170 x1517))
(assert (x1170 x412))
(assert (= (and x483 x958) x61))
(assert (= (x1033 x1329) 0))
(assert (= (and x99 x805) x1717))
(assert (= x531 (and x1042 (not x1571))))
(assert (x1170 x1550))
(assert (x1170 x1216))
(assert (x1170 x1031))
(assert (x1170 x375))
(assert (= x1656 (=> (and (or x288 (not x288)) (= (= x23 0) x288)) x262)))
(assert (x1170 x1433))
(assert (x1170 x681))
(assert (x1170 x1333))
(assert (x1170 x997))
(assert (= (x664 2863377861) (x348 2863377861)))
(assert (= (x348 1461501637330902918203684832716283019655932542976) (x664 1461501637330902918203684832716283019655932542976)))
(assert (x1170 x1430))
(assert (x1170 x704))
(assert (x1170 x1075))
(assert (=> (<= x1255 10000) (= (x664 x1255) (x348 x1255))))
(assert (x1569 x1475))
(assert (= (x908 x536) 0))
(assert (= (and (not x1199) x1122) x1636))
(assert (= x514 (=> (and (= x967 x73) (= x52 x688)) x1179)))
(assert (= (and (not x1817) x776) x1455))
(assert (x1170 x919))
(assert (x1569 x1054))
(assert (x1170 x1745))
(assert (x1170 x570))
(assert (= (and x1505 (not x390)) x1720))
(assert (= (and x1143 x736) x435))
(assert (x1170 x1529))
(assert (= (+ (x1821 x1089) 5) (x1821 (x488 x1089 5))))
(assert (= x292 (and x983 (not x1607))))
(assert (x1170 x1137))
(assert (= x912 (or x478 x649)))
(assert (= (=> (= (< 0 x108) x551) (and (=> x551 x1353) (=> (and (not x551) (= x847 x103)) x479))) x1692))
(assert (x1170 x1356))
(assert (x1170 x1796))
(assert (= x983 (and (not x544) x125)))
(assert (x1170 x1313))
(assert (x1170 x161))
(assert (= (=> (and (and (and (= x1277 (x488 x639 1)) (= x1114 (x1716 (x348 x1796) x168 0)) (>= 1461501637330902918203684832716283019655932542975 x1796) (> 2290148746 x1367) (= x1363 (x710 x1089)) (< x1367 1520650183) (= x427 (x921 (x348 x727))) (>= 1461501637330902918203684832716283019655932542975 x1363) (= x1703 x1399) (not (= 80076034 x1367)) (>= x1086 0) (= (x1716 (x348 x154) (x664 1) 0) x1089) (= x630 (x1716 (x348 x154) x1277 0)) (= x683 x64) (= x154 x1651) (<= 0 x1363) (= (x488 x1114 1) x639) (= 0 x1703) (= x330 (x1716 (x348 x154) x30 0)) (= x168 (x1716 (x348 x1363) (x664 2) 0)) x400 (> 928407353 x1367) (>= 1461501637330902918203684832716283019655932542975 x1514) (= x30 (x488 x1114 3)) (<= x1561 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1367 706499883) (<= 0 x1653) (> 1461501637330902918203684832716283019655932542976 x1363) (= (x1190 x630) x1561) (< 0 x427) (<= x1653 1461501637330902918203684832716283019655932542975) (= x1086 x1781) (>= x1561 0) (= (= x251 x1248) x400) (= (= x1561 0) x562) (= x1710 x1315) (= x1653 x1710) (not (= x1367 85603218)) (<= 0 x1514) (>= 1461501637330902918203684832716283019655932542975 x1086) (= x1195 x1796) (not (= x1367 450795052)) (= x1248 x1433) (= x629 x251)) (and (= x1791 x1555) (not (= 4085545785 x376)) (> x735 0) (not (< x376 2290148746)) (<= x1433 1461501637330902918203684832716283019655932542975) (>= x1433 0) (= x663 x1651) (not (> 3039079375 x376)) (= x1433 x1529) (= x879 (= x659 x1555)) (= x1210 x659) (not (> 3921506749 x376)) (> 1461501637330902918203684832716283019655932542976 x1433) (not (= 3921506749 x376)) (= (x1716 (x348 x663) (x664 1) 0) x308) (not (= 3961236718 x376)) (= 4137353292 x376) x879 (= x1433 (x710 x308)) (= x735 (x921 (x348 x727))))) (and (<= 0 x1394) (= x1560 false) (= x185 x1721) (>= 1461501637330902918203684832716283019655932542975 x1791) x94 (= x1067 x1147) (<= x1721 1461501637330902918203684832716283019655932542975) (= (> (x921 (x348 x1721)) 0) x94) (= (< 0 (x921 (x348 x727))) x1116) (not (= x1435 2759752456)) (= x66 (< 0 (x921 (x348 x408)))) (>= x365 0) x3 (<= x620 255) (<= 0 x1210) (<= 0 x1195) (= (x170 (x348 x169)) x1099) (not (= x169 x408)) (>= x629 0) (= x629 x109) (= (= x1337 x109) x1029) (<= x169 1461501637330902918203684832716283019655932542975) (not (= x1721 x408)) (<= 0 x1791) (>= 1461501637330902918203684832716283019655932542975 x1210) (not (< x1435 2759752456)) (< 0 x1057) (= (x170 (x348 x408)) x690) (= x429 4) (not (= x169 x727)) (= (x170 (x348 x1721)) x1286) (not (= x1435 2781097000)) x1029 (>= 1461501637330902918203684832716283019655932542975 x408) (not (= x1721 x169)) (= (x1716 (x348 x861) (x664 1) 0) x84) (>= x1286 0) x66 (>= 1461501637330902918203684832716283019655932542975 x727) (> x727 0) (= false x1548) (<= 0 x1297) (= x1210 x1337) (< x1791 1461501637330902918203684832716283019655932542976) x974 (< 0 x408) (>= x1099 0) (= x1096 (> (x921 (x348 x169)) 0)) (= x332 (x488 x84 1)) (< 0 x169) x1116 (= x861 x1651) (= x727 x722) (= x974 (not (= x185 x27))) (not (= x1721 x727)) (= x1195 x27) (<= x1147 1461501637330902918203684832716283019655932542975) (< x1435 3039079375) (= (not (= x722 x1111)) x3) (= false x1127) (not (= x1435 2863377861)) (not (= 2992780654 x1435)) (= (x170 (x348 x727)) x1394) (<= x629 1461501637330902918203684832716283019655932542975) x1096 (= 1001385071 x961) (<= x1297 255) (>= x620 0) (= x1195 x1111) (= false x481) (not (< x1435 2290148746)) (not (= x408 x727)) (<= 0 x1147) (= x1435 3019127319) (>= 1461501637330902918203684832716283019655932542975 x365) (<= x1195 1461501637330902918203684832716283019655932542975) (= x1781 x365) (= (x586 x332) x1791) (<= 0 x690) (< 0 x1721) (= (x921 (x348 x727)) x1057) (= x1791 x486))) (and (=> (and (not x562) (and (and (= (= x379 0) x1813) (>= x379 0) (= x355 (x488 x1089 3)) (<= x379 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x379 (x31 x355))) (or (and (and (not (>= (+ x145 x765) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1332 (- x12 x1235)) x1351) (= x922 (x1213 (+ x765 x145))) (ite x1350 x1350 (= x595 (div x329 x1351))) (<= 0 x1079) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x595) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1235) (>= x1235 0) (<= 0 x595) (= x329 (mod (* x1351 x595) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1079 (x530 x316)) (= (x265 x601) x145) (= (x488 x1089 5) x316) (= (x1859 x894) x595) (= x765 (div x329 x379)) (= (x1462 x1077) x1235) (= x1144 x922) (= x601 (x488 x1077 1)) (= x12 (ite (< x683 x1079) x64 x1079)) (<= x1079 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145) (= x1350 (= 0 x1351)) (= (x488 x1089 7) x1077) (= x894 (x488 x316 1)) (<= 0 x145)) (not x1813)) (and (and (= x1016 (x265 x1174)) (= x1016 x1144) (= (x488 x1089 8) x1174) (<= x1016 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x1016 0)) x1813)))) x1258) (=> (and x562 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x892) (= x1842 x892) (= (x16 x330) x892) (<= 0 x892))) x1428))) x1420))
(assert (x1569 x1796))
(assert (= (and x941 x46) x22))
(assert (x1170 x1491))
(assert (= (and x421 x1464) x522))
(assert (= (or x986 x505) x189))
(assert (x1170 x1359))
(assert (x1170 x1307))
(assert (x1170 x455))
(assert (x1170 x724))
(assert (= x646 (and x1018 x589)))
(assert (x1170 x1006))
(assert (= (x664 1027062850) (x348 1027062850)))
(assert (x1170 x1038))
(assert (x1170 x1526))
(assert (x1170 x952))
(assert (= (+ (x1821 x1805) 1) (x1821 (x488 x1805 1))))
(assert (x1170 x1500))
(assert (= (x1821 (x348 x727)) x727))
(assert (x1170 x896))
(assert (x1170 x1792))
(assert (= x238 (or x165 (and (not x1047) x1713))))
(assert (= x460 (or x768 x1676)))
(assert (= (x1821 (x348 x1732)) x1732))
(assert (= (and x512 x1793) x489))
(assert (x1170 x131))
(assert (= x234 (and (not x269) x614)))
(assert (x1170 x1561))
(assert (x1170 x1527))
(assert (= (and x270 x996) x1093))
(assert (x1170 x1176))
(assert (x1170 x608))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1821 (x664 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x1170 x935))
(assert (=> (<= x1211 10000) (= (x664 x1211) (x348 x1211))))
(assert (x1170 x1435))
(assert (= (and (not x1008) x1164) x364))
(assert (= (and x929 (not x972)) x199))
(assert (= (and x614 x269) x900))
(assert (=> (<= x1268 10000) (= (x664 x1268) (x348 x1268))))
(assert (= x962 (x1821 (x348 x962))))
(assert (x1170 x1525))
(assert (x1170 x1407))
(assert (x1170 x927))
(assert (x1170 x1495))
(assert (x1170 x205))
(assert (x1170 x376))
(assert (=> (>= 10000 x463) (= (x664 x463) (x348 x463))))
(assert (x1170 x1640))
(assert (= (x348 2757214935) (x664 2757214935)))
(assert (x1170 x1734))
(assert (= x114 (and x1720 x1294)))
(assert (x1170 x317))
(assert (= (and x1009 (not x716)) x1489))
(assert (x1170 x295))
(assert (= x996 (and x811 (not x596))))
(assert (x1170 x536))
(assert (= (x664 2992780654) (x348 2992780654)))
(assert (x1170 x403))
(assert (x1170 x730))
(assert (= x1558 (x1821 (x348 x1558))))
(assert (= (x1821 (x488 x10 1)) (+ (x1821 x10) 1)))
(assert (x1170 x1115))
(assert (= (x1821 (x664 80076034)) 80076034))
(assert (x1170 x1394))
(assert (x1170 x1851))
(assert (x1170 x1244))
(assert (=> (>= 10000 x1105) (= (x348 x1105) (x664 x1105))))
(assert (x1170 x609))
(assert (x1170 x1577))
(assert (x1170 x1108))
(assert (= (and x188 x1118) x1245))
(assert (x1170 x126))
(assert (x1170 x1401))
(assert (= (and (not x1809) x917) x1742))
(assert (x1170 x83))
(assert (= x249 (and (not x159) x127)))
(assert (x1170 x1403))
(assert (x1170 x1593))
(assert (= (x348 6583703630350721090866640338677567052142505888617894577283092288194729738240) (x664 6583703630350721090866640338677567052142505888617894577283092288194729738240)))
(assert (x1170 x1600))
(assert (x1170 x485))
(assert (= x1438 (or x1203 x244)))
(assert (= (x1821 (x348 x310)) x310))
(assert (= x1763 (and (not x1622) x25)))
(assert (x1170 x761))
(assert (x1170 x87))
(assert (= x181 (and (not x533) x1544)))
(assert (x1170 x1254))
(assert (= x1094 (and (not x1501) x931)))
(assert (x1170 x1382))
(assert (x1170 x320))
(assert (x1170 x1125))
(assert (x1170 x539))
(assert (= (x1821 (x664 2455663379)) 2455663379))
(assert (x1569 x1378))
(assert (x1170 x509))
(assert (x1170 x477))
(assert (x1170 x973))
(assert (= (and (not x910) x1726) x1178))
(assert (=> (<= x445 10000) (= (x664 x445) (x348 x445))))
(assert (= (and x257 x1761) x1338))
(assert (x1170 x861))
(assert (x1170 x870))
(assert (x1170 x1194))
(assert (=> (<= x1675 10000) (= (x664 x1675) (x348 x1675))))
(assert (x1575 x1819))
(assert (=> (>= 10000 x1256) (= (x348 x1256) (x664 x1256))))
(assert (x1569 x477))
(assert (x1170 x1052))
(assert (x1170 x147))
(assert (= (x1821 (x488 x32 1)) (+ 1 (x1821 x32))))
(assert (=> (<= x1249 10000) (= (x348 x1249) (x664 x1249))))
(assert (x1170 x1235))
(assert (x1170 x1650))
(assert (x1170 x306))
(assert (x1170 x1098))
(assert (x1170 x583))
(assert (x1170 x991))
(assert (= 1742540299 (x1821 (x664 1742540299))))
(assert (x1170 x381))
(assert (x1170 x425))
(assert (= (x1821 (x664 2290148746)) 2290148746))
(assert (x1170 x1))
(assert (x1170 x1646))
(assert (x524 x1834))
(assert (x1170 x220))
(assert (= (and (not x1604) x1053) x1164))
(assert (x1170 x108))
(assert (x1170 x822))
(assert (x1170 x729))
(assert (x1575 x1495))
(assert (x1170 x748))
(assert (x1170 x243))
(assert (x1170 x1777))
(assert (x1569 x1249))
(assert (x1170 x657))
(assert (x1170 x1156))
(assert (= (and x1689 x357) x1064))
(assert (=> (<= x657 10000) (= (x348 x657) (x664 x657))))
(assert (x1170 x592))
(assert (= (x1821 (x664 3961236718)) 3961236718))
(assert (= (and x1712 x413) x314))
(assert (= (x1048 x1322) 0))
(assert (x1569 x445))
(assert (x1170 x1554))
(assert (x1569 x1496))
(assert (x1170 x707))
(assert (x1170 x1574))
(assert (=> (>= 10000 x408) (= (x664 x408) (x348 x408))))
(assert (= x1201 (and x1674 (not x1392))))
(assert (x1170 x323))
(assert (= x1590 (=> (and (and (= x1172 (x921 (x348 x1061))) (= (x926 1461501637330902918203684832716283019655932542975 x1758) x1061) (not (> 32 x175)) (not (= x132 0)) (= x1758 (x581 196)) (= (< 0 x1160) x1208) (not (= 0 x1172))) (or (and (= x1687 x1160) (not x1208)) (and (and (< x704 4294967296) (= 1 x1687)) x1208))) x1568)))
(assert (x1170 x1365))
(assert (= (x348 4294967296) (x664 4294967296)))
(assert (x1569 x347))
(assert (x1170 x48))
(assert (x1170 x506))
(assert (= x779 (and (not x648) x1636)))
(assert (x1575 x1701))
(assert (x1170 x1510))
(assert (x1170 x1633))
(assert (x1170 x647))
(assert (x1170 x453))
(assert (x1170 x1057))
(assert (x1170 x260))
(assert (x1569 x375))
(assert (= x1061 (x1821 (x348 x1061))))
(assert (= (and x1742 (not x1671)) x313))
(assert (= x956 (and x1689 (not x357))))
(assert (x1170 x1106))
(assert (x1170 x195))
(assert (x1170 x1503))
(assert (x1170 x1347))
(assert (x1170 x1799))
(assert (= x281 (or x458 x1094)))
(assert (x1170 x1553))
(assert (x1170 x1599))
(assert (=> (<= x1702 10000) (= (x348 x1702) (x664 x1702))))
(assert (= x1354 (or x1616 x1474)))
(assert (= (and x150 x580) x1562))
(assert (x1170 x132))
(assert (= (and x1390 x401) x253))
(assert (= (or x166 x1493) x1118))
(assert (= (x348 3019127319) (x664 3019127319)))
(assert (x1170 x712))
(assert (= (x664 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x1575 x853))
(assert (x1170 x611))
(assert (x1170 x289))
(assert (= x979 (=> (and (= x1288 (mod (* x1088 x1602) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1088) (<= 0 x1088) (= x773 (= x1088 0)) (= (x1836 x819) x1088) (ite x773 x773 (= x1602 (div x1288 x1088))) (= x1326 x782) (= x1611 (div x1288 1000000000000000000)) (= x1326 (x1213 (+ x689 x1611))) (<= x689 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1611 x689))) (<= 0 x813) (= (x778 x769) x689) (= x641 (x488 x769 1)) (= (x1332 (- x1034 x813)) x1602) (= (x885 x641) x813) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x813) (<= 0 x689)) x137)))
(assert (=> (>= 10000 x440) (= (x348 x440) (x664 x440))))
(assert (= (=> (and (and (not (>= (+ x1386 x745) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (or (and (= true (<= x295 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x295)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x295))) (= (x1132 128) x1386) (= (x1213 (+ x1386 x745)) x1000) (not (= x2 0)) (= x1000 x1620)) (and (= (+ x669 x36) x1740) (= x229 x668) (= x388 x1091) (= x177 x955) (= (+ x177 x388) x36) (= x4 (= x7 x229)) (= x699 x669) (= x1620 x699) (= x7 x1740))) x4) x1027))
(assert (x1170 x465))
(assert (x1170 x947))
(assert (x1170 x1035))
(assert (= x227 (and (not x1498) x1119)))
(assert (x1170 x27))
(assert (= x546 (and x1418 x1843)))
(assert (x1170 x1627))
(assert (= (and x800 x956) x393))
(assert (= (and x352 x1198) x467))
(assert (= (=> (and (= x1446 x335) (= 0 x451)) x903) x1790))
(assert (x1569 x1683))
(assert (= x1844 (and (not x602) x1507)))
(assert (x1170 x1105))
(assert (x1170 x1628))
(assert (x1170 x671))
(assert (x1170 x1833))
(assert (x1170 x235))
(assert (x1170 x1309))
(assert (x1170 x1289))
(assert (= (or x60 x754) x1667))
(assert (x1170 x121))
(assert (x1170 x1551))
(assert (x1170 x1846))
(assert (x1170 x293))
(assert (x1170 x429))
(assert (x1170 x1218))
(assert (=> (<= x294 10000) (= (x664 x294) (x348 x294))))
(assert (= (and x533 x1544) x25))
(assert (x1170 x1187))
(assert (= (or x1085 x426) x1275))
(assert (= (and x1072 x1626) x567))
(assert (x1170 x1756))
(assert (= (x1821 (x488 x769 1)) (+ 1 (x1821 x769))))
(assert (x1170 x496))
(assert (x1170 x415))
(assert (x1170 x975))
(assert (x1170 x77))
(assert (x1170 x727))
(assert (x1170 x445))
(assert (= (and x1103 x1246) x354))
(assert (x1170 x573))
(assert (x360 x1513))
(assert (= x1085 (and x1208 x281)))
(assert (x1170 x411))
(assert (= (x348 2781097000) (x664 2781097000)))
(assert (= (and x406 (not x749)) x1018))
(assert (= x1493 (and x356 x1361)))
(assert (x1170 x809))
(assert (= x1389 (and x1024 x970)))
(assert (= (or x1631 x587) x1128))
(assert (= (and (not x450) x95) x1122))
(assert (x1170 x1825))
(assert (x1170 x1188))
(assert (= false x334))
(assert (x1170 x588))
(assert (x1170 x242))
(assert (= (x130 x1640) 0))
(assert (x1170 x1220))
(assert (x1170 x837))
(assert (x1170 x462))
(assert (x1170 x674))
(assert (x1569 x1266))
(assert (x1170 x1620))
(assert (x1170 x1669))
(assert (x1170 x889))
(assert (x1569 x276))
(assert (= (and x1142 x881) x606))
(assert (x1170 x116))
(assert (= (+ (x1821 x801) 3) (x1821 (x488 x801 3))))
(assert (= (x1821 (x348 x1751)) x1751))
(assert (= x816 (and x1162 x18)))
(assert (=> (>= 10000 x169) (= (x664 x169) (x348 x169))))
(assert (= (x664 4137353292) (x348 4137353292)))
(assert (= (x1821 (x664 50942633119752846454219349998365661925608737367104304655302372697894809501696)) 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x1170 x1480))
(assert (x1170 x992))
(assert (= x825 (x1821 (x348 x825))))
(assert (= (and (not x642) x644) x1806))
(assert (= (and x1152 (not x96)) x438))
(assert (= x1028 (or x839 x613)))
(assert (x1170 x1270))
(assert (= 2992780654 (x1821 (x664 2992780654))))
(assert (=> (<= x1743 10000) (= (x348 x1743) (x664 x1743))))
(assert (x1170 x949))
(assert (x1170 x993))
(assert (= x137 (=> (and (and (and (= 1745213101 x453) (> 2290148746 x453) (>= 1461501637330902918203684832716283019655932542975 x1220) (< x453 1896758387) (= (x1716 (x348 x310) x1341 0) x197) (<= 0 x1581) (= x1195 x310) (= (x1836 x197) x1581) (<= x310 1461501637330902918203684832716283019655932542975) (< 0 x1169) (not (= x453 1742540299)) (not (> 1520650183 x453)) (= x1581 x799) (= (x921 (x348 x727)) x1169) (= x1664 x1091) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1581) (not (= x453 1520650183)) (= x1220 x629) (= (x1716 (x348 x1220) (x664 2) 0) x1341)) (and (or (and (and (and (= x534 (< x359 32)) (= x1732 x1702) (< 0 x1826) (= (x921 (x348 x408)) x1826) (not (> 961581905 x923)) (= 1889567281 x923) (not (= 961581905 x923)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x1444) (= x1862 36) (= x1862 36) (not (> 4 x1862)) (= (x1332 (- x1862 4)) x359)) (or (and x534 (and (= x2 0) (= x259 x295))) (and (and (= x295 32) (= 1 x2) (= (x1716 (x348 x1732) (x664 0) 0) x734) (= x578 x1732) (= x705 (x953 x734)) (>= x705 0) (= x201 x1732) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x705)) (not x534)))) x1809) (and (not x1809) (and (= (= x169 x1268) x1671) (and (and (or (and (and (= x590 (x9 x212)) (= x212 (x1716 (x348 x1675) (x664 0) 0)) (= x868 x1675) (<= x590 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x2 1) (= x608 x1675) (<= 0 x590) (= x295 32)) (not x692)) (and (and (= 0 x2) (= x295 x259)) x692)) (and (not (< x1459 4)) (= x503 (x921 (x348 x169))) (= 36 x1459) (< 0 x503) (= x1459 36) (= x692 (> 32 x200)) (= x1675 x1702) (not (> 961581905 x28)) (= 1889567281 x28) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x909) (= x200 (x1332 (- x1459 4))) (not (= 961581905 x28)))) x1671)))) (and (> x202 0) (>= 1461501637330902918203684832716283019655932542975 x1044) (<= x5 1461501637330902918203684832716283019655932542975) (= (x122 x113) x745) (= 0 x698) (= x1268 x1210) (>= 1461501637330902918203684832716283019655932542975 x293) (= x5 x1145) (= x202 (x921 (x348 x1721))) (>= x745 0) (>= x293 0) (= x799 x955) (not (= 244203140 x208)) (= 3248092328 x208) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x745) (= x1315 x1145) (= x1352 128) (>= x5 0) (= (x1716 (x348 x1702) x741 0) x113) (= x293 x1781) (not (= x1688 0)) (= (x1716 (x348 x1268) (x664 0) 0) x741) (<= 0 x1044) (>= 1461501637330902918203684832716283019655932542975 x1268) (= (x921 (x348 x1268)) x1688) (= x1399 x698) (= x1809 (= x1268 x408)) (<= x1702 1461501637330902918203684832716283019655932542975) (= x1702 x1195)))) (= x782 x1664)) x1027)))
(assert (= x660 (and x1652 (not x1396))))
(assert (x1170 x1828))
(assert (= (x1821 (x348 x1211)) x1211))
(assert (= x276 (x1821 (x348 x276))))
(assert (x1170 x1597))
(assert (x1170 x338))
(assert (x1170 x967))
(assert (x1170 x1280))
(assert (= (and x534 x1658) x264))
(assert (= (x1821 (x664 3039079375)) 3039079375))
(assert (x1170 x753))
(assert (=> (<= x871 10000) (= (x664 x871) (x348 x871))))
(assert (= (x845 x1854) 0))
(assert (=> (<= x647 10000) (= (x348 x647) (x664 x647))))
(assert (x1170 x340))
(assert (= (x938 (x1213 (+ 68 x103))) 0))
(assert (= (x1821 (x488 x801 1)) (+ 1 (x1821 x801))))
(assert (x1170 x175))
(assert (= x1032 (and x1442 x1813)))
(assert (x1170 x1296))
(assert (= (or (and (not x457) x331) x249) x780))
(assert (= x1278 (=> (and (= x52 0) (= x37 x73)) x514)))
(assert (= 2759752456 (x1821 (x664 2759752456))))
(assert (x1569 x1545))
(assert (x1569 x147))
(assert (= (x1821 (x664 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (x1569 x1211))
(assert (=> (<= x1496 10000) (= (x664 x1496) (x348 x1496))))
(assert (x1170 x1026))
(assert (=> (<= x1584 10000) (= (x348 x1584) (x664 x1584))))
(assert (x1170 x1614))
(assert (= (=> (and (= x1419 x1842) (and (and (and (not (= 244203140 x1789)) (= x430 (x598 x701)) (= x1774 x1261) (<= 0 x652) (= (x921 (x348 x1721)) x947) (= (x1716 (x348 x1751) (x664 0) 0) x1376) (>= x1654 0) (<= x430 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x942 0) (= x1315 x241) (= 128 x784) (= x1210 x1751) (not (= 0 x346)) (<= x1751 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1054) (>= x430 0) (= x701 (x1716 (x348 x1054) x1376 0)) (= 0 x141) (= x1789 3248092328) (< 0 x947) (= x1399 x141) (= x346 (x921 (x348 x1751))) (= x1781 x942) (= x241 x652) (<= x652 1461501637330902918203684832716283019655932542975) (<= x1654 1461501637330902918203684832716283019655932542975) (= x1470 (= x1751 x408)) (= x1195 x1054) (>= 1461501637330902918203684832716283019655932542975 x942)) (or (and (not x1470) (and (and (and (and (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x1768) (= x1050 (x921 (x348 x169))) (< 0 x1050) (= 1889567281 x405) (= x1519 x1054) (= 36 x1833) (= x247 (x1332 (- x1833 4))) (not (< x1833 4)) (= x1833 36) (not (< x405 961581905)) (= x1418 (< x247 32)) (not (= 961581905 x405))) (or (and x1418 (and (= x15 x246) (= x1847 0))) (and (and (= x1197 x1519) (= 32 x246) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x535) (= x611 x1519) (= x1847 1) (= (x1716 (x348 x1519) (x664 0) 0) x878) (= x535 (x1723 x878)) (>= x535 0)) (not x1418)))) x1251) (= (= x1751 x169) x1251))) (and x1470 (and (and (= (x921 (x348 x408)) x797) (not (> 4 x178)) (not (> 961581905 x129)) (= x1054 x294) (not (= x129 961581905)) (= 36 x178) (> x797 0) (= x129 1889567281) (= x946 (> 32 x1450)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x709) (= 36 x178) (= (x1332 (- x178 4)) x1450)) (or (and x946 (and (= x1847 0) (= x246 x15))) (and (and (= 1 x1847) (= x306 (x951 x1725)) (>= x306 0) (= 32 x246) (= x294 x254) (<= x306 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x532 x294) (= (x1716 (x348 x294) (x664 0) 0) x1725)) (not x946))))))) (and (>= x1669 0) (> 1896758387 x1146) (= x1669 x1261) (<= x1211 1461501637330902918203684832716283019655932542975) (< 0 x466) (> 2290148746 x1146) (= x629 x1683) (= (x1716 (x348 x1683) (x664 2) 0) x899) (= (x1836 x1205) x1669) (= x1211 x1195) (>= 1461501637330902918203684832716283019655932542975 x1683) (= x466 (x921 (x348 x727))) (= x1146 1745213101) (not (> 1520650183 x1146)) (= x1205 (x1716 (x348 x1211) x899 0)) (not (= 1742540299 x1146)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1669) (not (= 1520650183 x1146)) (= x1419 x1305)))) x1672) x1428))
(assert (= x520 (and x33 x117)))
(assert (x1170 x795))
(assert (= (x1821 (x664 3248092328)) 3248092328))
(assert (x1170 x632))
(assert (= (x1821 (x664 1520650183)) 1520650183))
(assert (x1170 x1073))
(assert (= (and x856 x102) x694))
(assert (x1170 x302))
(assert (=> (<= x310 10000) (= (x664 x310) (x348 x310))))
(assert (x1170 x342))
(assert (x1170 x1329))
(assert (x1170 x466))
(assert (= x1681 (=> (and (= x1063 x1858) (= x1282 0)) x1154)))
(assert (= x1070 (and x1009 x716)))
(assert (= (and x1004 (not x676)) x1230))
(assert (x1170 x1172))
(assert (x1170 x1104))
(assert (x1170 x1221))
(assert (= (x348 599290589) (x664 599290589)))
(assert (x1170 x1822))
(assert (= (=> (and (not (= 0 x23)) (= false x1321) (= false x662)) x939) x262))
(assert (x1170 x1448))
(assert (= x261 (=> (= 0 x1379) x1445)))
(assert (= x1200 (and x948 (not x1508))))
(assert (x1170 x1183))
(assert (= x1353 (=> (and (> x747 0) (= x1151 (x203 x1131)) (= (x1213 (+ x291 32)) x1135) (> x1532 0) (= (x1213 (+ x847 160)) x1432) (= x1738 (x1213 (+ 32 x302))) (= (x1213 (+ x1214 32)) x1131) (= x1532 (x1404 x1214)) (= x291 (x1213 (+ x1823 32))) (= (x1017 x205) x730) (> x730 0) (= (x1213 (+ x223 32)) x1823) (= (x1657 x302) x747) (= (not (> x108 1)) x1515) (= (x926 1461501637330902918203684832716283019655932542975 x1151) x991) (= x223 (x1213 (+ x847 32))) (= (x148 x92) x599) (= x92 (x1213 (+ x205 32)))) (and x1515 (=> (= x1432 x103) x479)))))
(assert (= (x1821 (x488 x801 5)) (+ 5 (x1821 x801))))
(assert (x1170 x139))
(assert (= (and x1507 x602) x665))
(assert (x1170 x542))
(assert (x360 x1758))
(assert (x1170 x1504))
(assert (= (x1821 (x348 x1220)) x1220))
(assert (x1170 x519))
(assert (x1170 x1079))
(assert (= (and x1712 (not x413)) x68))
(assert (= x436 (=> (and (and (= x1511 (ite (< 0 x978) 2 1)) (not (= x707 2)) (= x1794 (x1213 (+ x299 32))) (>= x707 0) (<= x707 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1213 (+ x1794 x1214)) x205) (= (= 0 x1736) x356) (= (mod (* x1736 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x299)) (or x356 (and (and (= (mod (* x1736 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x173) (= x77 (x1213 (+ x1214 32)))) (not x356)))) x673)))
(assert (= (and x627 x646) x1603))
(assert (x1170 x1816))
(assert (= (and x40 (not x1632)) x764))
(assert (x1170 x652))
(assert (x1170 x812))
(assert (= x311 (and x46 (not x941))))
(assert (= x617 x230))
(assert (x1170 x50))
(assert (x360 x1819))
(assert (x1569 x74))
(assert (= 0 (x174 x831)))
(assert (x1170 x208))
(assert (x1170 x976))
(assert (= (and x467 (not x1328)) x948))
(assert (= x1524 (and x1292 x855)))
(assert (= (and x738 x562) x1065))
(assert (= (and x1019 x238) x933))
(assert (= x143 (=> (and (= x123 x1483) (= x1663 x1345)) x1566)))
(assert (= x154 (x1821 (x348 x154))))
(assert (x1170 x1468))
(assert (x1170 x1818))
(assert (x1170 x1581))
(assert (x1170 x528))
(assert (x1170 x1266))
(assert (x1170 x1063))
(assert (x1170 x1625))
(assert (x1170 x339))
(assert (= (and x648 x1636) x300))
(assert (= (and x419 x100) x883))
(assert (x1170 x1808))
(assert (x1170 x1572))
(assert (= (+ (x1821 x801) 8) (x1821 (x488 x801 8))))
(assert (x1170 x439))
(assert (x1170 x687))
(assert (x1170 x335))
(assert (x1170 x853))
(assert (=> (<= x160 10000) (= (x664 x160) (x348 x160))))
(assert (x1170 x732))
(assert (= (x664 4085545785) (x348 4085545785)))
(assert (x1170 x1472))
(assert (= (x664 18446744073709551615) (x348 18446744073709551615)))
(assert (= (x908 x1120) 0))
(assert (= 0 (x464 x260)))
(assert (x1170 x222))
(assert (= 1242462222 (x1821 (x664 1242462222))))
(assert (= (or x1562 x29 x1579 x1717 x1447) x587))
(assert (x1170 x1197))
(assert (x1170 x1794))
(assert (x1170 x971))
(assert (x1170 x502))
(assert (x1170 x925))
(assert (x1170 x1131))
(assert (x1170 x1014))
(assert (= (x348 2514000705) (x664 2514000705)))
(assert (x1170 x1056))
(assert (= (=> (and (and (not (= x1687 0)) (not (> 32 x704)) (= x245 (> x772 0)) (not (= 0 x681)) (< 0 x795) (= x681 (x921 (x348 x1163))) (= (x926 1461501637330902918203684832716283019655932542975 x1166) x1163) (= x795 (x86 196))) (or (and (= x1792 x772) (not x245)) (and x245 (and (= x1792 1) (> 4294967296 x120))))) x396) x1568))
(assert (= (=> (and (= x538 x1576) (= x289 x1625)) x1189) x474))
(assert (= (x1821 (x348 x1105)) x1105))
(assert (x1170 x1126))
(assert (= x29 (and x1293 x1336)))
(assert (x1170 x1847))
(assert (x1170 x742))
(assert (x1170 x1091))
(assert (x1170 x200))
(assert (x1170 x1478))
(assert (x1569 x647))
(assert (x1170 x297))
(assert (x1170 x216))
(assert (= x1616 (and x1694 x551)))
(assert (x1569 x1194))
(assert (x1170 x1826))
(assert (x1170 x820))
(assert (= (and x789 x1857) x736))
(assert (x1170 x1459))
(assert (x1170 x185))
(assert (= (and x1845 x1084) x371))
(assert (x1170 x1591))
(assert (= (and x540 (not x1041)) x78))
(assert (= x160 (x1821 (x348 x160))))
(assert (x1170 x1419))
(assert (x1170 x304))
(assert (x1170 x1617))
(assert (x1569 x1061))
(assert (= x1299 (and x1004 x676)))
(assert (= (x664 115242692596306546229572752729822789716416415832763348928132244437937602691072) (x348 115242692596306546229572752729822789716416415832763348928132244437937602691072)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x1821 (x664 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x1170 x120))
(assert (x1170 x1325))
(assert (= (x1821 (x664 4294967296)) 4294967296))
(assert (= (or x189 x456) x217))
(assert (=> (<= x1545 10000) (= (x348 x1545) (x664 x1545))))
(assert (x1170 x1141))
(assert (= x1683 (x1821 (x348 x1683))))
(assert (= (x508 x87) 0))
(assert (x1170 x385))
(assert (= (x1821 (x664 2835717307)) 2835717307))
(assert (x1170 x1714))
(assert (= (and x1772 x49) x1771))
(assert (= x318 (and x692 x537)))
(assert (x1569 x1105))
(assert (x1170 x760))
(assert (=> (<= x154 10000) (= (x664 x154) (x348 x154))))
(assert (x1170 x47))
(assert (= (and (not x356) x1361) x166))
(assert (= (and x1674 x1392) x171))
(assert (= x830 (or x1066 x1552)))
(assert (= (+ (x1821 x472) 1) (x1821 (x488 x472 1))))
(assert (= (x908 x1218) 0))
(assert (x1575 x588))
(assert (= x1743 (x1821 (x348 x1743))))
(assert (=> (>= 10000 x616) (= (x348 x616) (x664 x616))))
(assert (=> (<= x147 10000) (= (x664 x147) (x348 x147))))
(assert (= x843 (and (not x1072) x1626)))
(assert (= (x664 961581905) (x348 961581905)))
(assert (= x731 (and (not x1793) x512)))
(assert (x1170 x1531))
(assert (= (and x19 x574) x331))
(assert (= x1779 (and x127 x159)))
(assert (= x854 (=> (and (= (x190 128) x1851) (= (< 0 x1851) x117)) (and (=> (not x117) x1585) (=> (and (and (= (< 0 x1228) x85) (= x1228 (x190 128))) x117) (and (=> (and x85 (and (= (< 0 x1397) x1485) (= (x190 128) x1397) (= (x1499 160) x1408) (= (x1046 x930) x836) (= x930 (x1213 (+ x1408 64))))) (and (=> (and x1485 (and (= x1126 (x1499 160)) (= x1110 (> x55 0)) (= x373 (x1213 (+ 128 x1126))) (= (x190 128) x55) (= x1701 (x1167 x373)))) (and (=> (and x1110 (and (= x1156 (x190 128)) (= (x1499 160) x1254) (= (x1213 (+ x1254 96)) x87) (= x17 (x1841 x87)) (= (> x1156 0) x341))) (and (=> (and x341 (and (= (> x846 0) x972) (= x1329 (x1213 (+ x442 32))) (= (x190 128) x846) (= x732 (x1250 x1329)) (= x442 (x1499 160)))) (and (=> (and (and (= (x1499 160) x1449) (= x1392 (> x1572 3)) (= (x461 x1449) x1572)) x972) (and (=> (and (= (= x1572 0) x1150) (not x1392)) (and (=> (and x1150 (and (= x263 (x926 1461501637330902918203684832716283019655932542975 x17)) (= (x1213 (+ x592 32)) x949) (= (x1332 (- x1102 x1593)) x1468) (= (x1213 (+ x592 96)) x1102) (= x1860 (x926 1461501637330902918203684832716283019655932542975 x732)) (= (x921 (x348 x1860)) x1448) (= (x1213 (+ 4 x1593)) x592) (= (= x1448 0) x54) (= (x1213 (+ 32 x949)) x513))) (and (=> x54 x1461) (=> (and (not x54) (= x1291 (= x1860 x408))) (and (=> (and (and (and x676 (and (= x1249 x1721) (not (= x1634 117300739)) (not (> 4 x1136)) (= (x1332 (- x1136 4)) x1828) (= x1517 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= 100 x1136) (= x1356 (x921 (x348 x169))) (= x836 x1535) (= x1634 599290589) (= x1468 x1136) (< 0 x1356) (= x1509 (< x1828 96)) (not (= 157198259 x1634)) (< x1634 961581905) (not (= x1634 404098525)) (= x263 x477))) (= x676 (= x169 x1860))) (not x1291)) (and (=> (and (not x1509) (and (= x477 x1068) (= x490 x1249) (= (= x477 0) x450) (= x1535 x874))) (and (=> (and (= x1199 (= 0 x1249)) (not x450)) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x790) (>= x790 0) (= x183 (x1716 (x348 x477) (x664 0) 0)) (= x361 x477) (= (< x790 x1535) x648) (= x1554 416) (= (x1723 x183) x790)) (not x1199)) (and (=> x648 x624) (=> (and (and (= x1249 x155) (= x1711 (> x449 x340)) (>= x449 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x449) (= x1191 (x1332 (- x790 x1535))) (= x80 (x1716 (x348 x1249) (x664 0) 0)) (= x449 (x1300 x80)) (= (x1213 (+ x1535 x449)) x340) (= x841 (x1716 (x348 x477) (x664 0) 0)) (= x477 x469)) (not x648)) (and (=> x1711 x624) (=> (and (and (= x1612 x477) (= (< x385 x1535) x102) (= x385 (x1415 x723)) (= x1249 x119) (<= x385 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1716 (x348 x1249) (x664 0) 0) x1728) (>= x385 0) (= (x1716 (x348 x1721) x1443 0) x723) (= (x1716 (x348 x477) (x664 1) 0) x1443) (= 414 x889)) (not x1711)) (and (=> x102 x624) (=> (and (not x102) (and (= 1 x674) (= x1597 x477) (= 32 x603) (= x582 1) (= x976 (x1332 (- x385 x1535))) (= x651 (x605 128)))) x1411))))))) (=> x1199 x624))) (=> x450 x624))) (=> x1509 x624))) (=> (and x1291 (and (< x48 961581905) (= 599290589 x48) (not (= x48 157198259)) (not (= x48 117300739)) (= (x921 (x348 x408)) x1799) (not (= x48 404098525)) (= x975 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x1206 100) (< 0 x1799) (= x836 x1401) (= (< x121 96) x413) (= x1256 x1721) (= (x1332 (- x1206 4)) x121) (= x1206 x1468) (= x263 x1496) (not (> 4 x1206)))) (and (=> x413 x1681) (=> (and (not x413) (and (= x913 x1401) (= x1496 x139) (= (= x1496 0) x762) (= x915 x1256))) (and (=> x762 x1681) (=> (and (not x762) (= x96 (= 0 x1256))) (and (=> x96 x1681) (=> (and (not x96) (and (<= 0 x542) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x542) (= (> x1401 x542) x497) (= (x1716 (x348 x1496) (x664 0) 0) x686) (= (x951 x686) x542) (= 416 x1816) (= x1496 x1108))) (and (=> (and (not x497) (and (= x786 (x1716 (x348 x1496) (x664 0) 0)) (= (x1213 (+ x1401 x837)) x1521) (>= x837 0) (= x1496 x937) (= (x1332 (- x542 x1401)) x1121) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x837) (= x1707 (x1716 (x348 x1256) (x664 0) 0)) (= (> x837 x1521) x1295) (= (x1112 x1707) x837) (= x1256 x1588))) (and (=> (and (not x1295) (and (= (x1716 (x348 x1496) (x664 1) 0) x34) (= x1496 x439) (= (x1716 (x348 x1256) (x664 0) 0) x1838) (= x152 x1256) (= x1142 (< x1619 x1401)) (>= x1619 0) (= 414 x823) (<= x1619 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1668 x454) x1619) (= x454 (x1716 (x348 x1721) x34 0)))) (and (=> (and (not x1142) (and (= x844 x1496) (= 1 x1503) (= 1 x1282) (= 32 x1063) (= (x1332 (- x1619 x1401)) x583) (= x1252 (x708 128)))) x1154) (=> x1142 x1681))) (=> x1295 x1681))) (=> x497 x1681))))))))))))) (=> (and (not x1150) (and (= (< 0 x519) x910) (= x519 (x190 128)))) (and (=> (and (and (= x1604 (< 3 x1825)) (= (x1499 160) x1218) (= (x461 x1218) x1825)) x910) (and (=> (and (not x1604) (= (= x1825 1) x1008)) (and (=> (and (and (= (< 0 x1412) x1780) (= (x190 128) x1412)) (not x1008)) (and (=> (and (and (= x1120 (x1499 160)) (= (> x1697 3) x602) (= (x461 x1120) x1697)) x1780) (and (=> x602 x1461) (=> (and (= (= x1697 2) x414) (not x602)) (and (=> (and x414 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x296) (= (x926 1461501637330902918203684832716283019655932542975 x17) x1475) (= x1856 (x1716 (x348 x1475) x444 0)) (>= x296 0) (= (x598 x1856) x296) (= (x926 1461501637330902918203684832716283019655932542975 x732) x1176) (= x1571 (< x296 x836)) (= (x1716 (x348 x1176) (x664 0) 0) x444))) (and (=> x1571 x1461) (=> (and (and (= x440 (x926 1461501637330902918203684832716283019655932542975 x17)) (= (x926 1461501637330902918203684832716283019655932542975 x732) x577) (= (< x928 x1384) x1182) (= x1384 (x711 x124)) (= x637 (x1716 (x348 x616) (x664 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1384) (= x616 (x926 1461501637330902918203684832716283019655932542975 x732)) (= (x1332 (- x296 x836)) x1318) (= x304 (x926 1461501637330902918203684832716283019655932542975 x1701)) (= (x1716 (x348 x577) (x664 0) 0) x1661) (= x928 (x1213 (+ x1384 x836))) (= x124 (x1716 (x348 x304) x637 0)) (>= x1384 0) (= x1621 (x1716 (x348 x440) x1661 0))) (not x1571)) (and (=> (and (not x1182) (and (= x276 (x926 1461501637330902918203684832716283019655932542975 x732)) (= x1266 (x926 1461501637330902918203684832716283019655932542975 x1701)) (= (x1716 (x348 x1266) x1660 0) x1236) (= (x1716 (x348 x276) (x664 0) 0) x1660))) x1400) (=> x1182 x1461))))) (=> (and (and (= (x190 128) x1591) (= (> x1591 0) x1109)) (not x414)) (and (=> (and x1109 (and (= (x1499 160) x536) (= x1292 (> x1429 3)) (= x1429 (x461 x536)))) (and (=> x1292 x1461) (=> (and (not x1292) (= x968 (= 3 x1429))) (and (=> (not x968) x498) (=> (and x968 (and (= (x1213 (+ x1580 96)) x1708) (= x1312 (x1213 (+ 32 x1580))) (= (x921 (x348 x1527)) x940) (= x1207 (x926 1461501637330902918203684832716283019655932542975 x17)) (= (x1332 (- x1708 x1593)) x1311) (= (x1213 (+ 32 x1312)) x1784) (= (= 0 x940) x749) (= x1527 (x926 1461501637330902918203684832716283019655932542975 x732)) (= x1580 (x1213 (+ x1593 4))))) (and (=> x749 x1461) (=> (and (not x749) (= x589 (= x1527 x408))) (and (=> (and (and (= (x1332 (- x1465 4)) x1746) (= x1558 x1721) (= x836 x226) (= 100 x1465) (not (= 117300739 x518)) (< 0 x1773) (not (= x518 404098525)) (= 599290589 x518) (not (= 157198259 x518)) (not (> 4 x1465)) (> 961581905 x518) (= x627 (< x1746 96)) (= x1311 x1465) (= x147 x1207) (= (x921 (x348 x408)) x1773) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x977)) x589) (and (=> (and (not x627) (and (= x1573 x1558) (= x226 x971) (= (= x147 0) x219) (= x147 x992))) (and (=> x219 x1790) (=> (and (= x1772 (= x1558 0)) (not x219)) (and (=> (and (and (= x1793 (> x226 x1031)) (= 416 x1715) (<= x1031 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x204 (x1716 (x348 x147) (x664 0) 0)) (= x1031 (x951 x204)) (= x719 x147) (<= 0 x1031)) (not x1772)) (and (=> (and (not x1793) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1348) (= x13 x1558) (= x634 (x1332 (- x1031 x226))) (= (x1716 (x348 x147) (x664 0) 0) x437) (= x952 x147) (= (x1716 (x348 x1558) (x664 0) 0) x679) (= (x1213 (+ x226 x1348)) x386) (= (< x386 x1348) x1339) (= (x808 x679) x1348) (<= 0 x1348))) (and (=> x1339 x1790) (=> (and (and (= (x1716 (x348 x1558) (x664 0) 0) x1234) (= x1012 (x1716 (x348 x1721) x817 0)) (= x1551 x147) (= 414 x810) (<= x1081 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1558 x1168) (= x817 (x1716 (x348 x147) (x664 1) 0)) (= x1081 (x1668 x1012)) (= (> x226 x1081) x18) (<= 0 x1081)) (not x1339)) (and (=> x18 x1790) (=> (and (and (= (x1332 (- x1081 x226)) x69) (= x526 (x1586 128)) (= x451 1) (= x907 (x1586 128)) (= x1550 1) (= x147 x492) (= x1446 32)) (not x18)) x903))))) (=> x1793 x1790))) (=> x1772 x1790))))) (=> x627 x1790))) (=> (and (and (= (= x169 x1527) x533) (and (and (< 0 x1314) (not (= 157198259 x1051)) (> 961581905 x1051) (= x1314 (x921 (x348 x169))) (= x1051 599290589) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x284) (= (x1332 (- x500 4)) x870) (= x1584 x1721) (= (> 96 x870) x1622) (= x1311 x500) (not (< x500 4)) (not (= 117300739 x1051)) (= x657 x1207) (= x500 100) (not (= x1051 404098525)) (= x836 x35)) x533)) (not x589)) (and (=> x1622 x924) (=> (and (not x1622) (and (= x134 (= 0 x657)) (= x1490 x35) (= x1787 x657) (= x1584 x76))) (and (=> x134 x924) (=> (and (= (= 0 x1584) x1817) (not x134)) (and (=> (and (not x1817) (and (= x1422 (< x1734 x35)) (<= 0 x1734) (= (x1716 (x348 x657) (x664 0) 0) x1776) (= x1734 (x1723 x1776)) (= x610 x657) (= x1359 416) (<= x1734 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x1422 x924) (=> (and (not x1422) (and (= x554 (x1716 (x348 x657) (x664 0) 0)) (= (x1213 (+ x35 x728)) x515) (= x1584 x572) (= x657 x1714) (= x1287 (x1716 (x348 x1584) (x664 0) 0)) (= (x1332 (- x1734 x35)) x862) (<= x728 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x728) (= (> x728 x515) x392) (= x728 (x1538 x1287)))) (and (=> (and (and (<= x884 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x670 (x1716 (x348 x1584) (x664 0) 0)) (= x106 x1584) (= x884 (x1415 x1355)) (= 414 x1623) (= x1570 x657) (<= 0 x884) (= x1498 (> x35 x884)) (= (x1716 (x348 x657) (x664 1) 0) x1262) (= (x1716 (x348 x1721) x1262 0) x1355)) (not x392)) (and (=> x1498 x924) (=> (and (and (= x657 x101) (= x1243 (x882 128)) (= 1 x538) (= x622 (x882 128)) (= x626 (x1332 (- x884 x35))) (= 32 x289) (= 1 x1221)) (not x1498)) x474))) (=> x392 x924))))) (=> x1817 x924))))))))))))))) (=> (not x1109) x1461))))))) (=> (not x1780) x1461))) (=> (and (and (= x21 (x1213 (+ x1760 32))) (= (x1213 (+ 64 x1760)) x966) (= x1760 (x1213 (+ 4 x1593))) (= (= 0 x207) x944) (= (x1332 (- x966 x1593)) x1840) (= x207 (x921 (x348 x403))) (= x82 (x926 1461501637330902918203684832716283019655932542975 x1701)) (= (x926 1461501637330902918203684832716283019655932542975 x732) x403)) x1008) (and (=> x944 x1461) (=> (and (not x944) (= x1181 (= x403 x408))) (and (=> (and x1181 (and (< 0 x650) (= x650 (x921 (x348 x408))) (= x375 x82) (= x1831 (< x1832 64)) (not (= 2757214935 x748)) (not (= x748 1889567281)) (= x242 x836) (not (> 4 x91)) (not (= x748 2514000705)) (= x748 2835717307) (not (= 961581905 x748)) (= x1840 x91) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x1458) (not (> 961581905 x748)) (= 68 x91) (= (x1332 (- x91 4)) x1832))) (and (=> (and (and (= x491 (= x1721 0)) (= x242 x191) (= x375 x998)) (not x1831)) (and (=> x491 x969) (=> (and (= x544 (= 0 x375)) (not x491)) (and (=> (and (and (>= x1281 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1281) (= (> x242 x1281) x1607) (= x1281 (x951 x1673)) (= x387 416) (= x1673 (x1716 (x348 x1721) (x664 0) 0))) (not x544)) (and (=> x1607 x969) (=> (and (not x1607) (and (= x1330 (x1716 (x348 x375) (x664 0) 0)) (= x1724 (x1213 (+ x242 x564))) (<= x564 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1716 (x348 x1721) (x664 0) 0) x156) (>= x564 0) (= x1271 (> x564 x1724)) (= (x1332 (- x1281 x242)) x1283) (= (x327 x1330) x564) (= x375 x509))) (and (=> (and (not x1271) (and (= x375 x126) (= x997 (x221 128)) (= x1082 (x1716 (x348 x375) (x664 0) 0)) (= x1265 32) (= x397 1) (= x809 1))) x321) (=> x1271 x969))))) (=> x544 x969))))) (=> x1831 x969))) (=> (and (not x1181) (and (and (and (= x1479 68) (= (x921 (x348 x169)) x826) (= x640 (x1332 (- x1479 4))) (not (= 961581905 x645)) (> x826 0) (= x1577 76450787359836037641860180984291677749980919077056822294353438043884394381312) (not (= 2757214935 x645)) (= x569 x836) (not (= x645 2514000705)) (= 2835717307 x645) (= x82 x8) (= x1336 (< x640 64)) (= x1840 x1479) (not (> 961581905 x645)) (not (< x1479 4)) (not (= 1889567281 x645))) x1041) (= x1041 (= x169 x403)))) (and (=> (and (and (= (= 0 x1721) x1357) (= x8 x820) (= x945 x569)) (not x1336)) (and (=> x1357 x1278) (=> (and (not x1357) (= (= 0 x8) x805)) (and (=> (and (not x805) (and (= x1739 (x1723 x1644)) (<= 0 x1739) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1739) (= x1644 (x1716 (x348 x1721) (x664 0) 0)) (= (> x569 x1739) x228) (= x1800 416))) (and (=> (and (and (= (x1595 x370) x172) (= (x1213 (+ x569 x172)) x609) (= x370 (x1716 (x348 x8) (x664 0) 0)) (= x150 (< x609 x172)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x172) (= (x1716 (x348 x1721) (x664 0) 0) x1670) (= x950 (x1332 (- x1739 x569))) (= x1534 x8) (>= x172 0)) (not x228)) (and (=> (and (not x150) (and (= x1106 (x418 128)) (= 1 x1035) (= 1 x52) (= (x1716 (x348 x8) (x664 0) 0) x1310) (= x8 x619) (= 32 x73))) x514) (=> x150 x1278))) (=> x228 x1278))) (=> x805 x1278))))) (=> x1336 x1278))))))))) (=> x1604 x1461))) (=> (not x910) x1461))))) (=> x1392 x1461))) (=> (not x972) x1461))) (=> (not x341) x1461))) (=> (not x1110) x1461))) (=> (not x1485) x1461))) (=> (not x85) x1461)))))))
(assert (x1170 x737))
(assert (x1170 x1034))
(assert (x1170 x892))
(assert (x1170 x719))
(assert (x1170 x1248))
(assert (= (=> (and (= x320 (x1404 x1214)) (= (not (< 1 x320)) x1414)) (and x261 x1414)) x1639))
(assert (x1170 x788))
(assert (x1170 x663))
(assert (x1170 x1645))
(assert (x1170 x886))
(assert (x1170 x1787))
(assert (x1170 x482))
(assert (= (and x70 (not x766)) x1630))
(assert (= (and x1041 x540) x1293))
(assert (= (and x1485 x1301) x193))
(assert (x1170 x1490))
(assert (x1170 x940))
(assert (x1170 x1249))
(assert (x1170 x380))
(assert (= x1802 (and x1372 x1831)))
(assert (x1170 x1754))
(assert (x1170 x1497))
(assert (x1170 x1768))
(assert (= (and x497 x438) x1334))
(assert (= (x312 x994 224) (div x994 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x1569 x1519))
(assert (= x545 (and (not x497) x438)))
(assert (= x304 (x1821 (x348 x304))))
(assert (x1170 x1083))
(assert (x1170 x1363))
(assert (x1170 x1298))
(assert (x1170 x1687))
(assert (x1170 x1252))
(assert (x1170 x1107))
(assert (x1170 x1002))
(assert (x1170 x123))
(assert (x1170 x758))
(assert (= x125 (and (not x491) x337)))
(assert (= x1592 (and (not x414) x1844)))
(assert (x1170 x1225))
(assert (= x1436 (and x1733 x1389)))
(assert (x1170 x379))
(assert (x1170 x162))
(assert (= x1579 (and x863 x228)))
(assert (x1170 x1789))
(assert (= x345 (or (and (not x1845) x1084) x371)))
(assert (x1170 x173))
(assert (= (x1821 (x348 x445)) x445))
(assert (= x1807 (or x1667 x420)))
(assert (x1170 x201))
(assert (x1170 x346))
(assert (x1170 x1584))
(assert (x1170 x274))
(assert (= (and x337 x491) x873))
(assert (x1170 x1240))
(assert (x1170 x1013))
(assert (= x931 (and x875 (not x399))))
(assert (= (+ (x1821 x287) 3) (x1821 (x488 x287 3))))
(assert (=> (<= x506 10000) (= (x664 x506) (x348 x506))))
(assert (= (x1821 (x664 1027062850)) 1027062850))
(assert (= x1360 (and x406 x749)))
(assert (x1170 x182))
(assert (x1170 x359))
(assert (= (or x192 x781) x1502))
(assert (x1569 x304))
(assert (x1170 x1820))
(assert (x1170 x616))
(assert (= (and x157 x1695) x1177))
(assert (=> (<= x1732 10000) (= (x348 x1732) (x664 x1732))))
(assert (x1170 x1751))
(assert (= x498 x1400))
(assert (x1170 x891))
(assert (x1170 x448))
(assert (x1170 x782))
(assert (= x958 (and (not x56) x980)))
(assert (x1170 x759))
(assert (= x624 (=> (and (= 0 x674) (= x1858 x603)) x1411)))
(assert (=> (<= x962 10000) (= (x348 x962) (x664 x962))))
(assert (x1170 x1708))
(assert (= x1054 (x1821 (x348 x1054))))
(assert (x1569 x861))
(assert (x1170 x12))
(assert (x1170 x513))
(assert (x1170 x688))
(assert (x1170 x1545))
(assert (x1170 x1449))
(assert (= (x348 2835717307) (x664 2835717307)))
(assert (= (=> (and (= (= x1663 0) x1047) (or x1047 (not x1047))) x1257) x1566))
(assert (x1170 x449))
(assert (= (and x929 x972) x1674))
(assert (x1170 x471))
(assert (x1170 x690))
(assert (x1170 x1710))
(assert (x1170 x1773))
(assert (= x1266 (x1821 (x348 x1266))))
(assert (x1170 x1408))
(assert (x1170 x872))
(assert (= (+ (x1821 x1089) 7) (x1821 (x488 x1089 7))))
(assert (= (+ 1 (x1821 x1077)) (x1821 (x488 x1077 1))))
(assert (x1170 x1798))
(assert (= (and x1505 x390) x869))
(assert (=> (>= 10000 x1721) (= (x348 x1721) (x664 x1721))))
(assert (x1170 x1378))
(assert (x1170 x1829))
(assert (x1170 x1612))
(assert (= x1475 (x1821 (x348 x1475))))
(assert (= x456 (and x224 (not x383))))
(assert (x1170 x1318))
(assert (= (x1821 (x664 3019127319)) 3019127319))
(assert (x1170 x962))
(assert (= (and x904 (not x1691)) x1679))
(assert (= (and x1293 (not x1336)) x1062))
(assert (x1170 x76))
(assert (= x839 (and (not x1182) x531)))
(assert (x1170 x55))
(assert (x1170 x825))
(assert (x1170 x645))
(assert (x1569 x403))
(assert (=> (<= x727 10000) (= (x664 x727) (x348 x727))))
(assert (x1170 x1724))
(assert (= (and (not x232) x631) x70))
(assert (= (and x1199 x1122) x643))
(assert (= (=> (and (or x1695 (not x1695)) (= x1695 (= 0 x688))) x475) x1179))
(assert (x1170 x1558))
(assert (= x458 (and x931 x1501)))
(assert (x1569 x1732))
(assert (x1170 x1351))
(assert (= (x348 928407353) (x664 928407353)))
(assert (= (and (not x1019) x238) x621))
(assert (= x833 (or x1770 x358)))
(assert (= x1285 (=> (= (= x1576 0) x596) (and (=> (and (not x596) (and (= x1834 (x1213 (+ 31 x1625))) (= (x926 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1834) x579) (= x286 (x1213 (+ x579 x1593))) (= x270 (or (and (> 32 x1625) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1625) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1625))))) (and (=> x270 x1461) (=> (and (not x270) (and (= (x926 1461501637330902918203684832716283019655932542975 x732) x347) (= x303 (x1213 (+ x1512 32))) (= (x926 1461501637330902918203684832716283019655932542975 x1701) x1635) (= (= 0 x1026) x1246) (= (x1213 (+ x1512 64)) x1373) (= (x921 (x348 x347)) x1026) (= (x1213 (+ 4 x286)) x1512) (= x760 (x1332 (- x1373 x286))))) (and (=> (and (not x1246) (= (= x347 x408) x789)) (and (=> (and x789 (and (= x445 x1635) (< 0 x739) (not (= 961581905 x1777)) (= x836 x1244) (not (= 2514000705 x1777)) (not (> 961581905 x1777)) (= x1777 2835717307) (= (x1332 (- x750 4)) x729) (= x760 x750) (= x739 (x921 (x348 x408))) (= 68 x750) (not (= x1777 1889567281)) (= x1306 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= (> 64 x729) x1143) (not (= x1777 2757214935)) (not (< x750 4)))) (and (=> (and (and (= x1822 x1244) (= x804 (= 0 x1721)) (= x473 x445)) (not x1143)) (and (=> (and (= x100 (= 0 x445)) (not x804)) (and (=> x100 x378) (=> (and (not x100) (and (<= x43 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x357 (> x1244 x43)) (= (x1371 x1223) x43) (= x1331 416) (= x1223 (x1716 (x348 x1721) (x664 0) 0)) (>= x43 0))) (and (=> (and (not x357) (and (>= x38 0) (= x800 (> x38 x1241)) (= x445 x83) (= (x1716 (x348 x445) (x664 0) 0) x988) (= (x1332 (- x43 x1244)) x1055) (= (x1716 (x348 x1721) (x664 0) 0) x1431) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x38) (= x38 (x1193 x988)) (= x1241 (x1213 (+ x1244 x38))))) (and (=> x800 x378) (=> (and (not x800) (and (= 1 x1345) (= x445 x1365) (= (x1025 128) x807) (= (x1716 (x348 x445) (x664 0) 0) x1563) (= x1594 1) (= 32 x1483))) x143))) (=> x357 x378))))) (=> x804 x378))) (=> x1143 x378))) (=> (and (not x789) (and (and x352 (and (= (x1332 (- x1040 4)) x872) (> x1855 0) (not (= 1889567281 x1494)) (not (= 2757214935 x1494)) (= x1328 (> 64 x872)) (= x1494 2835717307) (not (= x1494 2514000705)) (= x1855 (x921 (x348 x169))) (= x506 x1635) (= 68 x1040) (not (< x1040 4)) (= x462 x836) (= x760 x1040) (not (= x1494 961581905)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x496) (not (> 961581905 x1494)))) (= x352 (= x169 x347)))) (and (=> (and (not x1328) (and (= x462 x703) (= (= x1721 0) x1508) (= x761 x506))) (and (=> x1508 x107) (=> (and (= (= x506 0) x407) (not x1508)) (and (=> x407 x107) (=> (and (and (= (x275 x218) x11) (= x218 (x1716 (x348 x1721) (x664 0) 0)) (= x56 (> x462 x11)) (<= 0 x11) (= 416 x338) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x11)) (not x407)) (and (=> x56 x107) (=> (and (and (= x1010 (x1440 x565)) (= (x1716 (x348 x1721) (x664 0) 0) x1782) (<= x1010 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x1010) (= x1416 x506) (= (> x1010 x1107) x483) (= x1107 (x1213 (+ x1010 x462))) (= (x1332 (- x11 x462)) x653) (= x565 (x1716 (x348 x506) (x664 0) 0))) (not x56)) (and (=> (and (and (= (x1716 (x348 x506) (x664 0) 0) x433) (= 1 x1633) (= x415 x506) (= 32 x1480) (= (x1601 128) x1755) (= x1730 1)) (not x483)) x999) (=> x483 x107))))))))) (=> x1328 x107))))) (=> x1246 x1461))))) (=> x596 x1461)))))
(assert (x1170 x459))
(assert (x1170 x492))
(assert (= (x1821 (x664 4137353292)) 4137353292))
(assert (= x1263 (and x633 (not x1470))))
(assert (= x1721 (x1821 (x348 x1721))))
(assert (x1170 x1264))
(assert (= x298 (or x1369 x824)))
(assert (= (x1821 (x664 3138304935)) 3138304935))
(assert (x1170 x1268))
(assert (x1170 x64))
(assert (= (x1821 (x664 599290589)) 599290589))
(assert (x1170 x750))
(assert (=> (<= x1061 10000) (= (x664 x1061) (x348 x1061))))
(assert (= (or x470 x227) x420))
(assert (x1170 x1331))
(assert (=> (>= 10000 x1378) (= (x348 x1378) (x664 x1378))))
(assert (x1569 x310))
(assert (= x1477 (and (not x1251) x1263)))
(assert (= (and x888 x804) x691))
(assert (x1170 x1368))
(assert (=> (<= x375 10000) (= (x664 x375) (x348 x375))))
(assert (x1170 x388))
(assert (x1170 x922))
(assert (x1170 x532))
(assert (= (or x1338 x1737) x384))
(assert (= (x1821 (x348 x1702)) x1702))
(assert (x1170 x79))
(assert (x1170 x620))
(assert (= (and x794 x774) x1737))
(assert (x1569 x1363))
(assert (=> (>= 10000 x162) (= (x664 x162) (x348 x162))))
(assert (= (=> (and (or (not x1469) x1469) (= x1469 (= 0 x1576))) x1285) x1189))
(assert (x1170 x703))
(assert (= x140 (and x1711 x779)))
(assert (x1569 x825))
(assert (= (x348 1000000000000000000) (x664 1000000000000000000)))
(assert (x1170 x1267))
(assert (x1170 x923))
(assert (x1170 x715))
(assert (= (x348 70508962019145425934951811999677760319478833095128838543097651878529435959296) (x664 70508962019145425934951811999677760319478833095128838543097651878529435959296)))
(assert (x1170 x1549))
(assert (x1170 x71))
(assert (x1170 x129))
(assert (x1170 x276))
(assert (= (x348 1889567281) (x664 1889567281)))
(assert (x1170 x994))
(assert (= x1196 (and x1423 x345)))
(assert (= (and x1192 x968) x406))
(assert (x1170 x1169))
(assert (x1170 x1086))
(assert (x1170 x887))
(assert (x1170 x1314))
(assert (= x1369 (or x694 x300 x1488 x643 x140 x1022)))
(assert (x1170 x20))
(assert (x1170 x1374))
(assert (x1170 x1399))
(assert (x1170 x1570))
(assert (= x875 (or x163 x1005 x546 x1536)))
(assert (x1170 x473))
(assert (= (and x544 x125) x1609))
(assert (x1170 x155))
(assert (x1170 x595))
(assert (= 928407353 (x1821 (x664 928407353))))
(assert (= x871 (x1821 (x348 x871))))
(assert (x1569 x1743))
(assert (x1170 x1297))
(assert (x1170 x555))
(assert (x1170 x296))
(assert (x1170 x1648))
(assert (x1170 x578))
(assert (x1170 x1514))
(assert (x1170 x582))
(assert (= (x1821 (x348 x1163)) x1163))
(assert (= (and x1018 (not x589)) x1544))
(assert (= (and x1622 x25) x42))
(assert (x1170 x937))
(assert (x1170 x15))
(assert (x1170 x1842))
(assert (x360 x588))
(assert (x1170 x622))
(assert (= (x664 26959946667150639794667015087019630673637144422540572481103610249216) (x348 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (=> (>= 10000 x1683) (= (x348 x1683) (x664 x1683))))
(assert (x1170 x610))
(assert (x1170 x469))
(assert (= x1582 (and x1389 (not x1733))))
(assert (= (and x1436 (not x806)) x1731))
(assert (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x1821 (x664 70508962019145425934951811999677760319478833095128838543097651878529435959296))))
(assert (= (x348 80076034) (x664 80076034)))
(assert (x1170 x1688))
(assert (=> (<= x1558 10000) (= (x348 x1558) (x664 x1558))))
(assert (x1170 x1386))
(assert (x1170 x504))
(assert (x1170 x1611))
(assert (= (x1821 (x348 x408)) x408))
(assert (= (+ 1 (x1821 x330)) (x1821 (x488 x330 1))))
(assert (= x209 (and x1679 x1700)))
(assert (x1170 x1233))
(assert (= (x1821 (x348 x1255)) x1255))
(assert (= x347 (x1821 (x348 x347))))
(assert (= (and x956 (not x800)) x244))
(assert (x1170 x1166))
(assert (= (x1327 x930) 0))
(assert (x1170 x109))
(assert (x1569 x1527))
(assert (x1170 x1395))
(assert (= (+ (x1821 x1385) 7) (x1821 (x488 x1385 7))))
(assert (x1170 x1637))
(assert (= x1713 (or x1502 x1438)))
(assert (x1170 x254))
(assert (x1569 x1721))
(assert (x1569 x1220))
(assert (x1569 x1702))
(assert (x1170 x43))
(assert (= x957 (=> (and (= x1123 (x72 x1466)) (<= 0 x1123) (= (< 0 x1123) x19) (<= x1123 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (=> (and x19 (and (= (x1404 x1214) x886) (>= 1461501637330902918203684832716283019655932542975 x198) (= (x586 x1030) x198) (= x1030 (x488 x801 1)) (= x457 (< 0 x886)) (> 1461501637330902918203684832716283019655932542976 x198) (<= 0 x198))) (and (=> (and (and (= x770 (x1404 x1214)) (< 0 x770) (= (= x788 x198) x1464) (= x588 (x285 x896)) (= x788 (x926 1461501637330902918203684832716283019655932542975 x588)) (= x896 (x1213 (+ 32 x1214)))) x457) (and (=> (and (and (= (x926 1461501637330902918203684832716283019655932542975 x853) x274) (< 0 x501) (= x501 (x1404 x1214)) (= x159 (= x274 0)) (= x853 (x285 x896))) (not x1464)) (and (=> (not x159) x1639) (=> (and (and (= x1379 1) (= x447 (x1213 (+ x205 32))) (= (x1017 x205) x916) (< 0 x339) (> x916 0) (= x339 (x1404 x1214))) x159) x1445))) (=> (and (and (= x1820 (x1017 x205)) (= (x1213 (+ x205 32)) x1854) (= (x1213 (+ x1808 x1123)) x342) (< 0 x1820) (= x1808 (x6 x1854)) (= x1379 0)) x1464) x1445))) (=> (not x457) x261))) (=> (and (not x19) (= x507 0)) x1578)))))
(assert (= (x664 1461501637330902918203684832716283019655932542975) (x348 1461501637330902918203684832716283019655932542975)))
(assert (= (and x520 x85) x1301))
(assert (x1170 x1241))
(assert (x1170 x1615))
(assert (= x1247 (and x392 x1113)))
(assert (x1170 x1444))
(assert (= x1258 (=> (and (<= 0 x812) (= (x1836 x1114) x1097) (= x1439 (x1332 (- x1144 x812))) (= x812 (x850 x678)) (<= x195 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1097) (<= 0 x1097) (= x324 (= x1097 0)) (<= 0 x195) (= x1098 (div x539 1000000000000000000)) (<= x812 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (>= (+ x1098 x195) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1213 (+ x195 x1098)) x1530) (= x678 (x488 x330 1)) (= x195 (x16 x330)) (= x1530 x1842) (ite x324 x324 (= (div x539 x1097) x1439)) (= x539 (mod (* x1097 x1439) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1428)))
(assert (x1170 x629))
(assert (x1170 x1044))
(assert (x1170 x1180))
(assert (x1170 x1784))
(assert (=> (<= x1176 10000) (= (x348 x1176) (x664 x1176))))
(assert (= x661 (and x14 x912)))
(assert (= (and (not x257) x1761) x649))
(assert (x1170 x928))
(assert (x1170 x259))
(assert (x1170 x382))
(assert (= (x1821 (x348 x1675)) x1675))
(assert (= (and x881 (not x1142)) x409))
(assert (= x49 (and x584 (not x219))))
(assert (x1170 x284))
(assert (x1170 x476))
(assert (= (x1821 (x348 x1249)) x1249))
(assert (x1170 x810))
(assert (x1170 x294))
(assert (x1170 x69))
(assert (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x1821 (x664 77196514420459877940035116867124998943289115686762304616657918434777787006976))))
(assert (x1170 x626))
(assert (x1170 x1099))
(assert (= 18446744073709551615 (x1821 (x664 18446744073709551615))))
(assert (= x1496 (x1821 (x348 x1496))))
(assert (= (x664 404098525) (x348 404098525)))
(assert (x1170 x1067))
(assert (= (x1821 (x348 x463)) x463))
(assert (x1170 x344))
(assert (x1170 x215))
(assert (x1575 x20))
(assert (x1569 x1751))
(assert (x1170 x440))
(assert (x1170 x1450))
(assert (= x33 (or x233 x1138)))
(assert (= 244203140 (x1821 (x664 244203140))))
(assert (x1170 x1144))
(assert (x1170 x247))
(assert (= (or x1159 x460) x358))
(assert (x1170 x1232))
(assert (x1569 x1163))
(assert (x1170 x1149))
(assert (x1170 x915))
(assert (x1170 x1281))
(assert (x1170 x1654))
(assert (= (and (not x1143) x736) x888))
(assert (x1170 x1123))
(assert (x1170 x1050))
(assert (= (x1821 (x488 x84 1)) (+ (x1821 x84) 1)))
(assert (= x1474 (and x1694 (not x551))))
(assert (= (=> (= (= 0 x600) x1423) (and (=> (and (not x1423) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x179) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x179) true) (< x179 32))) x390)) (and (=> (and (and (= x1296 (x598 x1753)) (= (x926 1461501637330902918203684832716283019655932542975 x732) x160) (= (x1716 (x348 x160) (x664 0) 0) x1276) (= x1574 (x1213 (+ x836 x1296))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1296) (= (x1716 (x348 x825) x1276 0) x1753) (>= x1296 0) (= x1294 (> x1296 x1574)) (= x825 (x926 1461501637330902918203684832716283019655932542975 x1701))) (not x390)) (and (=> (and (and (= x1752 (x926 1461501637330902918203684832716283019655932542975 x732)) (= (x926 1461501637330902918203684832716283019655932542975 x1701) x1743) (= (x1716 (x348 x1743) x717 0) x718) (= (x1716 (x348 x1752) (x664 0) 0) x717)) (not x1294)) x230) (=> x1294 x1461))) (=> x390 x1461))) (=> x1423 x1461))) x865))
(assert (x1170 x1635))
(assert (x1170 x451))
(assert (x1170 x404))
(assert (= x487 (and (not x692) x537)))
(assert (= x1487 (and (not x188) x1118)))
(assert (x1170 x1653))
(assert (x1170 x963))
(assert (x1170 x1320))
(assert (x1170 x862))
(assert (= x1022 (and x1299 x1509)))
(assert (= x1009 (and x642 x644)))
(assert (x1170 x1097))
(assert (x1170 x154))
(assert (= x309 (and x63 (not x54))))
(assert (x1170 x987))
(assert (x1170 x1135))
(assert (x1569 x440))
(assert (x1170 x1040))
(assert (x1170 x623))
(assert (= (or x900 x234) x224))
(assert (x1170 x1853))
(assert (=> (<= x759 10000) (= (x348 x759) (x664 x759))))
(assert (= (+ 1 (x1821 x277)) (x1821 (x488 x277 1))))
(assert (x1170 x111))
(assert (x1170 x1111))
(assert (= 0 (x938 (+ (x1213 (+ x103 68)) 128))))
(assert (x1170 x1532))
(assert (x1170 x709))
(assert (= x1066 (or x1802 x1609 x1861 x960 x873)))
(assert (x1569 x1860))
(assert (= x147 (x1821 (x348 x147))))
(assert (=> (>= 10000 x1752) (= (x348 x1752) (x664 x1752))))
(assert (x1170 x2))
(assert (x1170 x226))
(assert (x1170 x1758))
(assert (x1170 x1774))
(assert (x1170 x1055))
(assert (x1170 x1432))
(assert (x1569 x1255))
(assert (= (and x744 (not x1181)) x540))
(assert (= (=> (and (= (x1213 (+ x1599 32)) x1848) (= x576 (not (> x1745 1)))) (and (=> (= x1593 x714) x854) x576)) x1090))
(assert (x1170 x1186))
(assert (x1170 x17))
(assert (x1170 x590))
(assert (= x1578 (=> (= x1117 (not (> x1736 1))) (and x1117 (=> (= x507 x108) x1516)))))
(assert (= (x343 x987) 0))
(assert (x1170 x291))
(assert (x1170 x447))
(assert (= x855 (and x1109 x1592)))
(assert (x1170 x67))
(assert (x1170 x1210))
(assert (x1569 x1558))
(assert (=> (>= 10000 x403) (= (x664 x403) (x348 x403))))
(assert (x1170 x1800))
(assert (= x1484 (=> (and (and (= (x921 (x348 x1105)) x1778) (= (= x1721 x1105) x1632) (not (= 0 x1778)) (= x317 (x1332 (- x791 x103)))) (and (and (= x1280 (x921 (x348 x1721))) (= x1325 (x1332 (- x1402 4))) (< 0 x1280) x849 (not (> 4 x1402)) (= (= (x1565 36) x58) x849) (= x252 244203140) (= x182 6583703630350721090866640338677567052142505888617894577283092288194729738240) (= x317 x1402) (= x232 (or (and (> 32 x1325) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1325) true)) (> x1325 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= 68 x1402)) x1632)) (and (=> (and (= x766 (and (< 67 x1402) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1402)))) (not x232)) (and (=> (not x766) x1461) (=> (and (and (= (< 18446744073709551615 x1745) x1390) (= x1745 (x1222 36))) x766) (and (=> (and (not x1390) (and (= (x1213 (+ 32 x67)) x550) (= (x1213 (+ x550 128)) x1216) (= (= 0 (ite x158 1 0)) x1396) (= (mod (* 32 x1745) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x67) (= (< x1216 128) x1647) (= x158 (or x1467 x1647)) (= (< 18446744073709551615 x1216) x1467))) (and (=> (not x1396) x1461) (=> (and (and (= x1691 (< x1402 x1801)) (= (x1213 (+ 68 x485)) x1801) (= x485 (mod (* 160 x1745) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1396) (and (=> x1691 x1461) (=> (and (= x1700 (< 0 x1745)) (not x1691)) (and (=> (and x1700 (and (= (x1332 (- x1402 68)) x1648) (= (or (and (< x1648 160) (= true (<= x1648 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x1648 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x877))) (and (=> x877 x1461) (=> (and (not x877) (and (= x829 (or x1564 x549)) (= x549 (> x1216 x714)) (= (= 0 (ite x829 1 0)) x1506) (= x714 (x1213 (+ x1216 160))) (= x1564 (> x714 18446744073709551615)))) (and (=> (and x1506 (and (= x1690 (x1222 68)) (= x970 (< x1690 4)))) (and (=> (and (and (= x1553 (x926 1461501637330902918203684832716283019655932542975 x1495)) (= x1733 (= x1495 x1553)) (= x1495 (x1222 100))) x970) (and (=> (and (and (= (x1213 (+ x235 32)) x1747) (= x235 (x1213 (+ 32 x1216))) (= x806 (= x1819 x1818)) (= (x1222 132) x146) (= (x1222 164) x1819) (= x1818 (x926 1461501637330902918203684832716283019655932542975 x1819))) x1733) (and (=> (not x806) x1461) (=> (and x806 (and (= x1583 (x926 1461501637330902918203684832716283019655932542975 x71)) (= (x1213 (+ 32 x1747)) x1599) (= x71 (x1222 196)) (= x893 (= x1583 x71)))) (and (=> x893 x1090) (=> (not x893) x1461))))) (=> (not x1733) x1461))) (=> (not x970) x1461))) (=> (not x1506) x1461))))) (=> (and (not x1700) (= x1216 x1593)) x854))))))) (=> x1390 x1461))))) (=> x232 x1461)))))
(assert (= (and x545 x1295) x557))
(assert (not x1420))
(assert (x1170 x1781))
(assert (x1170 x650))
(assert (= (or x402 x409) x1830))
(assert (= (and (not x85) x520) x1366))
(assert (= (or x848 (and (not x1469) x1807)) x811))
(assert (x1170 x1623))
(assert (= (and (not x1700) x1679) x1138))
(assert (= 2781097000 (x1821 (x664 2781097000))))
(assert (x1170 x1605))
(assert (= (x1821 (x488 x801 7)) (+ 7 (x1821 x801))))
(assert (= (and x1251 x1263) x1843))
(assert (= x1203 (or x1064 x435 x883 x691 x393)))
(assert (x1170 x1315))
(assert (x1575 x1758))
(assert (= (x664 2290148746) (x348 2290148746)))
(assert (= x1084 (or x1830 x298)))
(assert (x360 x1149))
(assert (x1170 x73))
(assert (x1170 x1747))
(assert (x1170 x634))
(assert (x1170 x177))
(assert (= 706499883 (x1821 (x664 706499883))))
(assert (= x616 (x1821 (x348 x616))))
(assert (x1170 x1412))
(assert (=> (>= 10000 x663) (= (x348 x663) (x664 x663))))
(assert (x1569 (x312 x994 224)))
(assert (=> (<= x1054 10000) (= (x348 x1054) (x664 x1054))))
(assert (x1170 x1429))
(assert (= (x348 1742540299) (x664 1742540299)))
(assert (x1170 x1849))
(assert (= (x1821 (x664 2757214935)) 2757214935))
(assert (x1170 x191))
(assert (= x375 (x1821 (x348 x375))))
(assert (x1170 x361))
(assert (x1170 x1860))
(assert (= x1372 (and x1181 x744)))
(assert (x1170 x1163))
(assert (x1170 x1848))
(assert (x1170 x286))
(assert (x1575 x1151))
(assert (x1170 x1709))
(assert (x1170 x1379))
(assert (x1170 x1697))
(assert (= x1505 (and x345 (not x1423))))
(assert (= (and x1807 x1469) x848))
(assert (x1170 x799))
(assert (= (+ (x1821 x1089) 3) (x1821 (x488 x1089 3))))
(assert (x1170 x373))
(assert (x1170 x1588))
(assert (x1569 x1584))
(assert (x1170 x223))
(assert (x1170 x1791))
(assert (= (x516 160) 0))
(assert (= x378 (=> (and (= x459 x1483) (= 0 x1345)) x143)))
(assert (x1170 x1663))
(assert (x360 x20))
(assert (= x1537 (or x834 x319)))
(assert (= 2863377861 (x1821 (x664 2863377861))))
(assert (= (and x806 x1436) x24))
(assert (= (x664 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x348 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x1170 x1068))
(assert (= x149 (and (not x1485) x1301)))
(assert (x1170 x1801))
(assert (x1170 x1576))
(assert (x1170 x847))
(assert (x1170 x290))
(assert (x1170 x777))
(assert (x1170 x995))
(assert (x1575 x1834))
(assert (=> (>= 10000 x825) (= (x664 x825) (x348 x825))))
(assert (x1170 x698))
(assert (x1170 x1402))
(assert (= (and x331 x457) x421))
(assert (= x419 (and (not x804) x888)))
(assert (x1170 x874))
(assert (x1569 x162))
(assert (= (x1821 (x348 x477)) x477))
(assert (= x647 (x1821 (x348 x647))))
(assert (= x255 (and x1192 (not x968))))
(assert (= 157198259 (x1821 (x664 157198259))))
(assert (= (and (not x1295) x545) x881))
(assert (x1170 x81))
(assert (= (=> (and (= (x1657 x302) x58) (= x1105 (x926 1461501637330902918203684832716283019655932542975 x1166)) (= x902 (< 0 x58)) (= (x1213 (+ 32 x675)) x62) (= x1797 (x1213 (+ 32 x62))) (= (x1213 (+ 4 x103)) x675) (= x1322 (x1213 (+ x302 32)))) (and (=> x902 x858) (=> (and (not x902) (= x791 x1797)) x1484))) x479))
(assert (x1170 x1837))
(assert (x1170 x1521))
(assert (x1170 x59))
(assert (= (x348 77196514420459877940035116867124998943289115686762304616657918434777787006976) (x664 77196514420459877940035116867124998943289115686762304616657918434777787006976)))
(assert (x1170 x299))
(assert (=> (<= x1266 10000) (= (x664 x1266) (x348 x1266))))
(assert (x1170 x62))
(assert (= x584 (and (not x627) x646)))
(assert (= x1378 (x1821 (x348 x1378))))
(assert (= (and x877 x209) x1059))
(assert (= x233 (and x893 x24)))
(assert (= (and x946 x918) x163))
(assert (x360 x17))
(assert (x1170 x1519))
(assert (= (=> (and (= x809 x688) (= x967 x1265)) x1179) x321))
(assert (x1170 x1080))
(assert (x360 x1495))
(assert (= x1346 (and x1058 x1680)))
(assert (x1170 x1439))
(assert (x1569 x727))
(assert (= 0 (x1456 x1424)))
(assert (x1569 x962))
(assert (x1170 x619))
(assert (x1170 x1345))
(assert (x1569 x294))
(assert (x1170 x1594))
(assert (x1170 x998))
(assert (= x1011 (=> (and (or x1845 (not x1845)) (= x1845 (= x600 0))) x865)))
(assert (= x1689 (and x419 (not x100))))
(assert (= (=> (and (= x1075 (mod (* 32 x108) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x382 (x1213 (+ x302 x1491))) (= x1748 (= x108 0)) (= x1491 (x1213 (+ 32 x1075))) (not (< 18446744073709551615 x108))) (and (=> (and x1748 (= x847 x382)) x1692) (=> (and (not x1748) (and (= x623 (x1332 (- x108 1))) (= x794 (= 1 x108)) (= (x1213 (+ 32 x302)) x1204) (= (x1213 (+ 32 x1204)) x1655) (= x632 (x1213 (+ x380 32))) (= (x1213 (+ x180 32)) x380) (= x180 (x1213 (+ x382 32))) (= x1405 (x1213 (+ 32 x632))) (= (x1213 (+ x382 160)) x973))) (and (=> (and x794 (= x1320 x973)) x755) (=> (and (and (= (= x623 1) x257) (= x1307 (x1213 (+ 32 x925))) (= (x1213 (+ 32 x973)) x411) (= x925 (x1213 (+ 32 x1478))) (= (x1213 (+ x973 160)) x1393) (= x1478 (x1213 (+ x411 32)))) (not x794)) (and (=> (and x257 (= x1393 x1320)) x755) (=> (not x257) x334))))))) x1516))
(assert (= (x348 244203140) (x664 244203140)))
(assert (= (and x1047 x1713) x165))
(assert (= (=> (= 0 x23) x1656) x1461))
(assert (= 1001385071 (x1821 (x664 1001385071))))
(assert (= x1442 (and x738 (not x562))))
(assert (= (x664 1001385071) (x348 1001385071)))
(assert (= (=> (and (not x1321) (= x594 x1598) (= (x488 x819 3) x89) (= (x1716 (x348 x162) (x664 1) 0) x1385) (> 2290148746 x1239) (= (x1716 (x348 x759) (x664 2) 0) x1451) (= (x488 x819 1) x835) (not x662) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1525) (= x1195 x962) (= x1315 x1598) (= x1525 (x1190 x1375)) (= x759 (x710 x1385)) (= x819 (x1716 (x348 x962) x1451 0)) (<= x759 1461501637330902918203684832716283019655932542975) (<= x962 1461501637330902918203684832716283019655932542975) (<= 0 x594) (= (= 0 x1525) x14) (= x57 0) (= x1650 x64) (not (= 85603218 x1239)) (= x1781 x1430) (< x1239 1520650183) (> 1461501637330902918203684832716283019655932542976 x759) (<= 0 x1430) (= x1375 (x1716 (x348 x162) x1349 0)) (not (= x1239 450795052)) (= x1399 x57) (<= 0 x787) (= x1239 706499883) (= x769 (x1716 (x348 x162) x89 0)) (= (x921 (x348 x727)) x502) (<= x1430 1461501637330902918203684832716283019655932542975) (<= 0 x1525) (not (= x1239 80076034)) (>= 1461501637330902918203684832716283019655932542975 x594) (< 0 x502) (= (x488 x835 1) x1349) (<= x787 1461501637330902918203684832716283019655932542975) (= x162 x1651) (> 928407353 x1239) (<= 0 x759)) (and (=> (and (and (and (= x1058 (= x742 0)) (<= x742 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x488 x1385 3) x1824) (<= 0 x742) (= (x31 x1824) x742)) (or (and (and (= (x1859 x1567) x1141) (= (x1213 (+ x351 x1023)) x243) (= x236 (= 0 x827)) (= (x488 x1385 5) x32) (= (div x887 x742) x1023) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x351 x1023))) (ite x236 x236 (= (div x887 x827) x1141)) (= (x488 x1805 1) x693) (>= x1304 0) (= (x796 x1805) x1304) (<= x828 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x351) (= x1805 (x488 x1385 7)) (= x1083 (ite (> x828 x1650) x64 x828)) (<= 0 x1141) (= (x1523 x693) x351) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x351) (= (x488 x32 1) x1567) (= x243 x1034) (>= x828 0) (= x887 (mod (* x1141 x827) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1304) (<= x1141 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1332 (- x1083 x1304)) x827) (= x828 (x530 x32))) (not x1058)) (and x1058 (and (= x695 (x488 x1385 8)) (<= 0 x1187) (= x1034 x1187) (= x1187 (x1523 x695)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1187))))) (not x14)) x979) (=> (and x14 (and (<= 0 x638) (<= x638 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x638 x782) (= (x778 x769) x638))) x137))) x939))
(assert (= (x664 2455663379) (x348 2455663379)))
(assert (x1170 x1651))
(assert (x1170 x1453))
(assert (= x512 (and x49 (not x1772))))
(assert (x1170 x1255))
(assert (x1170 x1475))
(assert (x1170 x106))
(assert (= x1152 (and x68 (not x762))))
(assert (x1170 x527))
(assert (x1170 x141))
(assert (x1170 x600))
(assert (x1170 x1168))
(assert (= x1522 (and x731 x1339)))
(assert (=> (<= x861 10000) (= (x348 x861) (x664 x861))))
(assert (x1170 x198))
(assert (= (=> (= (> x1736 0) x269) (and (=> x269 x1421) (=> (not x269) x1812))) x272))
(assert (x1569 x408))
(assert (x1170 x603))
(assert (x1170 x823))
(assert (= (and x1200 (not x407)) x980))
(assert (x1170 x747))
(assert (= x1676 (and (not x1294) x1720)))
(assert (= (and x1691 x904) x1398))
(assert (x1170 x241))
(assert (x1170 x844))
(assert (x1170 x301))
(assert (= x1552 (and (not x1271) x292)))
(assert (=> (>= 10000 x1796) (= (x664 x1796) (x348 x1796))))
(assert (x1170 x1557))
(assert (= (or x1806 x851) x574))
(assert (= (x664 706499883) (x348 706499883)))
(assert (x1170 x101))
(assert (= (x312 x994 224) (x1821 (x348 (x312 x994 224)))))
(assert (x1170 x1762))
(assert (= (x348 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x664 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x1170 x463))
(assert (x1170 x1496))
(assert (= (x664 1520650183) (x348 1520650183)))
(assert (x1170 x871))
(assert (x1170 x675))
(assert (x1170 x442))
(assert (= (x1821 (x348 x1519)) x1519))
(assert (= x1256 (x1821 (x348 x1256))))
(assert (= x969 (=> (and (= 0 x809) (= x37 x1265)) x321)))
(assert (x1170 x942))
(assert (x1170 x91))
(assert (x1170 x1664))
(assert (x1170 x5))
(assert (= x1042 (and x414 x1844)))
(assert (= (x664 1242462222) (x348 1242462222)))
(assert (x1170 x1337))
(assert (x1170 x1214))
(assert (= x781 (and (not x483) x958)))
(assert (x1170 x1228))
(assert (= (and (not x392) x1113) x1119))
(assert (x1170 x26))
(assert (x1170 x585))
(assert (x1170 x1239))
(assert (x1170 x558))
(assert (= (or x305 x1346) x654))
(assert (x1170 x82))
(assert (x1170 x1795))
(assert (x1170 x547))
(assert (= x1614 (x1821 (x348 x1614))))
(assert (= x1764 (=> (and (= x412 (ite (> x548 x1240) x737 x548)) (<= 0 x548) (<= 0 x1472) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1125 x777))) (ite x1850 x1850 (= x1368 (div x448 x1472))) (= (x488 x801 7) x1624) (= (x16 x1466) x777) (= (x488 x1466 1) x1441) (= (x488 x801 5) x1303) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x777) (= (x488 x801 8) x1589) (= x1472 (x1836 x287)) (= (div x448 1000000000000000000) x1125) (= (x1332 (- x1274 x336)) x1368) (<= x336 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x777 0) (<= x548 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x336 (x850 x1441)) (= (mod (* x1368 x1472) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x448) (= x1613 (x1213 (+ x777 x1125))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1472) (<= 0 x336) (= x548 (x530 x1303)) (= x1850 (= 0 x1472))) x957)))
(assert (= x1198 (and (not x789) x1857)))
(assert (x1170 x1373))
(assert (= (x1821 (x488 x639 1)) (+ 1 (x1821 x639))))
(assert (x360 x1701))
(assert (= x1804 (and x1817 x776)))
(assert (x1170 x930))
(assert (= (and x1632 x40) x631))
(assert (= x1411 (=> (and (= x600 x674) (= x603 x179)) x1011)))
(assert (x1170 x765))
(assert (= (=> (= x23 1) x1656) x1585))
(assert (x1170 x427))
(assert (= x863 (and (not x805) x99)))
(assert (x1170 x1102))
(assert (x1170 x659))
(assert (= (and (not x424) x311) x1626))
(assert (x1170 x1832))
(assert (=> (>= 10000 x74) (= (x348 x74) (x664 x74))))
(assert (=> (<= x8 10000) (= (x664 x8) (x348 x8))))
(assert (x1569 x759))
(assert (= x577 (x1821 (x348 x577))))
(check-sat)
(exit)