(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x71 0)) (((x180 (x614 x71) (x291 x71) (x264 Int)) (x412 (x292 x71) (x126 Int)) (x274 (x92 Int)))))
(declare-fun x454 () Int)
(declare-fun x102 () Bool)
(declare-fun x313 () Int)
(declare-fun x336 () x71)
(declare-fun x447 () Int)
(declare-fun x36 () Bool)
(declare-fun x65 () Bool)
(declare-fun x486 () Bool)
(declare-fun x406 () Int)
(declare-fun x575 () Int)
(declare-fun x67 () Int)
(declare-fun x79 () Int)
(declare-fun x118 () x71)
(declare-fun x565 () x71)
(declare-fun x356 (Int) x71)
(declare-fun x547 () Int)
(declare-fun x226 () Int)
(declare-fun x188 () Bool)
(declare-fun x655 () Int)
(declare-fun x359 () Int)
(declare-fun x650 () Int)
(declare-fun x470 (Int) Int)
(declare-fun x97 () Int)
(declare-fun x555 () Int)
(declare-fun x75 () Int)
(declare-fun x605 () Int)
(declare-fun x484 () Int)
(declare-fun x309 () Int)
(declare-fun x633 () Int)
(declare-fun x115 () Int)
(declare-fun x59 () Int)
(declare-fun x505 () Int)
(declare-fun x85 () Int)
(declare-fun x620 () Bool)
(declare-fun x106 () x71)
(declare-fun x628 () Bool)
(declare-fun x558 () Int)
(declare-fun x151 () Int)
(declare-fun x536 () Bool)
(declare-fun x364 () Int)
(declare-fun x374 () x71)
(declare-fun x123 () Bool)
(declare-fun x566 () Int)
(declare-fun x498 () Bool)
(declare-fun x135 () Bool)
(declare-fun x485 () Int)
(declare-fun x340 () Int)
(declare-fun x236 () Int)
(declare-fun x168 () Bool)
(declare-fun x285 () Int)
(declare-fun x206 () Int)
(declare-fun x286 () Int)
(declare-fun x44 () Int)
(declare-fun x220 () Int)
(declare-fun x646 () Int)
(declare-fun x133 () Bool)
(declare-fun x98 () Int)
(declare-fun x553 () Int)
(declare-fun x480 () Int)
(declare-fun x50 () Bool)
(declare-fun x235 () Int)
(declare-fun x557 () Bool)
(declare-fun x490 () Int)
(declare-fun x589 () Int)
(declare-fun x513 (Int) Int)
(declare-fun x141 () Int)
(declare-fun x416 () Bool)
(declare-fun x515 () Int)
(declare-fun x280 () Bool)
(declare-fun x350 () Int)
(declare-fun x6 () Int)
(declare-fun x428 () Int)
(declare-fun x163 () x71)
(declare-fun x674 () Int)
(declare-fun x252 () Int)
(declare-fun x599 (Int) Int)
(declare-fun x654 () Int)
(declare-fun x579 () Int)
(declare-fun x263 () Int)
(declare-fun x294 () Int)
(declare-fun x404 () Bool)
(declare-fun x414 () Int)
(declare-fun x190 () Int)
(declare-fun x380 () Int)
(declare-fun x182 () Int)
(declare-fun x613 () Int)
(declare-fun x170 () Int)
(declare-fun x386 () Int)
(declare-fun x244 () Int)
(declare-fun x607 () Int)
(declare-fun x373 () Bool)
(declare-fun x334 () Int)
(declare-fun x278 () Int)
(declare-fun x26 () Int)
(declare-fun x360 () Int)
(declare-fun x60 () Int)
(declare-fun x174 () Int)
(declare-fun x12 () Int)
(declare-fun x52 () Int)
(declare-fun x310 () Bool)
(declare-fun x665 () Int)
(declare-fun x160 () Bool)
(declare-fun x479 () Bool)
(declare-fun x331 () Int)
(declare-fun x635 () Bool)
(declare-fun x49 () Int)
(declare-fun x383 () Bool)
(declare-fun x256 () Bool)
(declare-fun x37 () Int)
(declare-fun x213 () Int)
(declare-fun x145 () Bool)
(declare-fun x586 () Int)
(declare-fun x492 () Bool)
(declare-fun x51 () Int)
(declare-fun x554 () Bool)
(declare-fun x622 () Int)
(declare-fun x178 () Int)
(declare-fun x78 () Bool)
(declare-fun x216 () Int)
(declare-fun x673 () Int)
(declare-fun x19 () Int)
(declare-fun x463 () Int)
(declare-fun x636 () Int)
(declare-fun x270 () Bool)
(declare-fun x444 () Int)
(declare-fun x227 () Int)
(declare-fun x540 () Bool)
(declare-fun x481 () Int)
(declare-fun x140 () Int)
(declare-fun x245 () Int)
(declare-fun x127 () Int)
(declare-fun x209 () Int)
(declare-fun x524 () Bool)
(declare-fun x308 () Int)
(declare-fun x257 () Int)
(declare-fun x482 () Bool)
(declare-fun x535 () Int)
(declare-fun x417 () Int)
(declare-fun x475 () Int)
(declare-fun x305 () Bool)
(declare-fun x295 () Bool)
(declare-fun x94 () Int)
(declare-fun x395 () Int)
(declare-fun x248 () Int)
(declare-fun x666 () Int)
(declare-fun x597 () Int)
(declare-fun x660 () Bool)
(declare-fun x231 () Int)
(declare-fun x156 (Int) Int)
(declare-fun x316 () Int)
(declare-fun x652 () Int)
(declare-fun x320 () Int)
(declare-fun x304 () Int)
(declare-fun x378 () Bool)
(declare-fun x130 () Int)
(declare-fun x609 () Int)
(declare-fun x300 () Int)
(declare-fun x510 () Int)
(declare-fun x433 () Bool)
(declare-fun x298 () Int)
(declare-fun x389 () Bool)
(declare-fun x625 (Int) Int)
(declare-fun x526 (Int) Int)
(declare-fun x593 () Int)
(declare-fun x100 () Int)
(declare-fun x531 () Int)
(declare-fun x522 () Int)
(declare-fun x368 () Int)
(declare-fun x18 () Int)
(declare-fun x222 () Bool)
(declare-fun x107 () Int)
(declare-fun x90 () Int)
(declare-fun x124 () Int)
(declare-fun x169 () Int)
(declare-fun x306 () Int)
(declare-fun x459 () Bool)
(declare-fun x212 () Int)
(declare-fun x521 () Int)
(declare-fun x648 () Bool)
(declare-fun x637 () Int)
(declare-fun x427 () Int)
(declare-fun x172 () Bool)
(declare-fun x121 () Int)
(declare-fun x202 () Int)
(declare-fun x569 () Int)
(declare-fun x341 () Int)
(declare-fun x184 () Int)
(declare-fun x476 () Bool)
(declare-fun x247 () Int)
(declare-fun x88 () Int)
(declare-fun x87 () Bool)
(declare-fun x590 () Int)
(declare-fun x583 () x71)
(declare-fun x397 () Int)
(declare-fun x358 () Int)
(declare-fun x632 () x71)
(declare-fun x251 (Int) Int)
(declare-fun x556 () Int)
(declare-fun x347 () Bool)
(declare-fun x284 () Int)
(declare-fun x382 () Int)
(declare-fun x101 () Int)
(declare-fun x230 (Int Int) Int)
(declare-fun x345 () Int)
(declare-fun x332 () Int)
(declare-fun x14 () Int)
(declare-fun x369 () Int)
(declare-fun x40 () Int)
(declare-fun x548 () Bool)
(declare-fun x276 () Bool)
(declare-fun x539 () Bool)
(declare-fun x33 () Bool)
(declare-fun x96 () Int)
(declare-fun x467 () Int)
(declare-fun x153 () Int)
(declare-fun x205 () x71)
(declare-fun x318 () Int)
(declare-fun x177 () Int)
(declare-fun x307 () Bool)
(declare-fun x290 () Int)
(declare-fun x460 () Bool)
(declare-fun x544 () Int)
(declare-fun x339 () Int)
(declare-fun x407 () Int)
(declare-fun x181 () Int)
(declare-fun x262 () Int)
(declare-fun x520 () Bool)
(declare-fun x225 () Bool)
(declare-fun x25 () Int)
(declare-fun x30 () Int)
(declare-fun x58 () Int)
(declare-fun x104 () Bool)
(declare-fun x199 () Int)
(declare-fun x116 () Int)
(declare-fun x538 () x71)
(declare-fun x214 () Int)
(declare-fun x47 () Int)
(declare-fun x518 () Int)
(declare-fun x504 () Bool)
(declare-fun x93 () Int)
(declare-fun x260 () Bool)
(declare-fun x365 () Int)
(declare-fun x570 () Int)
(declare-fun x41 () Int)
(declare-fun x142 () Bool)
(declare-fun x134 () Int)
(declare-fun x326 () Bool)
(declare-fun x68 () Int)
(declare-fun x211 () Int)
(declare-fun x108 () Int)
(declare-fun x398 () Bool)
(declare-fun x571 () Int)
(declare-fun x662 () Int)
(declare-fun x2 () Int)
(declare-fun x419 (Int) Int)
(declare-fun x277 () Bool)
(declare-fun x73 () Int)
(declare-fun x500 () Int)
(declare-fun x663 () Int)
(declare-fun x472 () Int)
(declare-fun x357 () Bool)
(declare-fun x158 () Int)
(declare-fun x234 () Int)
(declare-fun x253 () Bool)
(declare-fun x161 () Int)
(declare-fun x57 () Bool)
(declare-fun x582 (Int) Int)
(declare-fun x77 () Bool)
(declare-fun x488 () Int)
(declare-fun x7 () x71)
(declare-fun x228 () Int)
(declare-fun x502 () Bool)
(declare-fun x233 (x71) Int)
(declare-fun x411 () x71)
(declare-fun x31 () Int)
(declare-fun x15 () Int)
(declare-fun x261 () Int)
(declare-fun x394 () x71)
(declare-fun x617 () Bool)
(declare-fun x179 () Int)
(declare-fun x354 () Int)
(declare-fun x112 (Int) Int)
(declare-fun x194 () Bool)
(declare-fun x219 () Int)
(declare-fun x312 () Int)
(declare-fun x494 () Int)
(declare-fun x34 () Int)
(declare-fun x420 () Int)
(declare-fun x317 () Int)
(declare-fun x39 () Int)
(declare-fun x430 () Int)
(declare-fun x375 () Int)
(declare-fun x552 () Int)
(declare-fun x166 () Int)
(declare-fun x608 () Int)
(declare-fun x469 () Bool)
(declare-fun x523 () Int)
(declare-fun x1 () Bool)
(declare-fun x598 () Int)
(declare-fun x22 () Int)
(declare-fun x600 () Int)
(declare-fun x603 () Int)
(declare-fun x43 () Int)
(declare-fun x9 () x71)
(declare-fun x176 () Int)
(declare-fun x243 () Bool)
(declare-fun x457 () Int)
(declare-fun x137 () Int)
(declare-fun x129 () Int)
(declare-fun x237 () Int)
(declare-fun x441 () Int)
(declare-fun x54 () Bool)
(declare-fun x659 () Int)
(declare-fun x478 () Int)
(declare-fun x562 () Int)
(declare-fun x619 () Bool)
(declare-fun x584 () Bool)
(declare-fun x644 (Int) Int)
(declare-fun x443 () Int)
(declare-fun x623 () Int)
(declare-fun x314 () Int)
(declare-fun x493 () Int)
(declare-fun x242 () Int)
(declare-fun x186 () Int)
(declare-fun x70 () Int)
(declare-fun x311 () Bool)
(declare-fun x203 () Int)
(declare-fun x183 () Int)
(declare-fun x38 () Bool)
(declare-fun x8 () Int)
(declare-fun x187 () Int)
(declare-fun x239 () Int)
(declare-fun x534 () x71)
(declare-fun x507 () Int)
(declare-fun x664 (Int) Int)
(declare-fun x24 () Int)
(declare-fun x528 () Bool)
(declare-fun x327 () Int)
(declare-fun x471 () Int)
(declare-fun x672 () Bool)
(declare-fun x76 () Bool)
(declare-fun x296 () Bool)
(declare-fun x114 () Bool)
(declare-fun x275 () x71)
(declare-fun x611 () Bool)
(declare-fun x162 () Int)
(declare-fun x461 () Bool)
(declare-fun x422 () Int)
(declare-fun x509 () Bool)
(declare-fun x143 () Int)
(declare-fun x125 () Bool)
(declare-fun x32 () Bool)
(declare-fun x449 () Int)
(declare-fun x647 () Int)
(declare-fun x196 () Int)
(declare-fun x610 () Int)
(declare-fun x81 () Bool)
(declare-fun x74 () Int)
(declare-fun x594 () Int)
(declare-fun x269 () Int)
(declare-fun x627 () Int)
(declare-fun x572 () Bool)
(declare-fun x438 () Int)
(declare-fun x259 () Int)
(declare-fun x3 () Int)
(declare-fun x533 () Int)
(declare-fun x578 () Bool)
(declare-fun x532 () Int)
(declare-fun x392 () Bool)
(declare-fun x450 () Int)
(declare-fun x645 () Int)
(declare-fun x303 () Int)
(declare-fun x273 () Int)
(declare-fun x27 () Int)
(declare-fun x474 () Bool)
(declare-fun x525 () Int)
(declare-fun x669 () Int)
(declare-fun x465 () Int)
(declare-fun x641 () Bool)
(declare-fun x440 () Int)
(declare-fun x113 () Bool)
(declare-fun x148 () Bool)
(declare-fun x379 () Int)
(declare-fun x497 () Bool)
(declare-fun x154 () Bool)
(declare-fun x615 () Int)
(declare-fun x353 () Bool)
(declare-fun x16 () Int)
(declare-fun x215 () Bool)
(declare-fun x99 () Int)
(declare-fun x595 () Bool)
(declare-fun x132 () Int)
(declare-fun x64 () Bool)
(declare-fun x560 () Int)
(declare-fun x289 () Int)
(declare-fun x421 () Int)
(declare-fun x473 () Int)
(declare-fun x265 () Int)
(declare-fun x146 () Int)
(declare-fun x328 () Int)
(declare-fun x89 () Int)
(declare-fun x403 () Int)
(declare-fun x477 () Int)
(declare-fun x508 () Int)
(declare-fun x604 () Int)
(declare-fun x11 () Int)
(declare-fun x401 () Int)
(declare-fun x321 () Int)
(declare-fun x405 () Int)
(declare-fun x464 () Bool)
(declare-fun x496 () Bool)
(declare-fun x432 () Int)
(declare-fun x319 () Bool)
(declare-fun x246 () Int)
(declare-fun x197 () Int)
(declare-fun x338 () Bool)
(declare-fun x580 () Int)
(declare-fun x456 () Int)
(declare-fun x452 () Int)
(declare-fun x434 () Int)
(declare-fun x527 () Int)
(declare-fun x293 () x71)
(declare-fun x302 () Int)
(declare-fun x577 () Int)
(declare-fun x240 () Int)
(declare-fun x501 () Int)
(declare-fun x171 () x71)
(declare-fun x150 () Bool)
(declare-fun x561 () Int)
(declare-fun x372 () Int)
(declare-fun x400 () Int)
(declare-fun x446 () Bool)
(declare-fun x581 () x71)
(declare-fun x149 () Int)
(declare-fun x592 () Int)
(declare-fun x86 (x71) Int)
(declare-fun x668 () Bool)
(declare-fun x5 () Bool)
(declare-fun x189 () Int)
(declare-fun x229 () Bool)
(declare-fun x342 () Int)
(declare-fun x28 (x71) Int)
(declare-fun x408 () Bool)
(declare-fun x563 () Int)
(declare-fun x495 () x71)
(declare-fun x45 () Int)
(declare-fun x131 () Int)
(declare-fun x413 () x71)
(declare-fun x21 () Int)
(declare-fun x415 () Int)
(declare-fun x346 () Bool)
(declare-fun x396 () Int)
(declare-fun x551 () Bool)
(declare-fun x152 () Int)
(declare-fun x435 () Int)
(declare-fun x48 () Bool)
(declare-fun x192 () Int)
(declare-fun x391 () Int)
(declare-fun x442 () Int)
(declare-fun x198 () Bool)
(declare-fun x588 () Bool)
(declare-fun x139 () x71)
(declare-fun x483 (Int) Int)
(declare-fun x587 () Int)
(declare-fun x56 () Int)
(declare-fun x489 () Int)
(declare-fun x344 () Int)
(declare-fun x601 () Bool)
(declare-fun x517 (x71) Int)
(declare-fun x66 () Int)
(declare-fun x53 () Int)
(declare-fun x585 () Int)
(declare-fun x299 () Int)
(declare-fun x630 () Int)
(declare-fun x387 () Int)
(declare-fun x282 () Bool)
(declare-fun x453 () Bool)
(declare-fun x349 () Int)
(declare-fun x330 (Int) Int)
(declare-fun x530 () Bool)
(declare-fun x297 () x71)
(declare-fun x352 () Int)
(declare-fun x20 () Int)
(declare-fun x564 () Bool)
(declare-fun x618 () Bool)
(declare-fun x10 () Int)
(declare-fun x83 () Int)
(declare-fun x241 () Int)
(declare-fun x511 () Bool)
(declare-fun x63 () Int)
(declare-fun x136 () Bool)
(declare-fun x191 () Int)
(declare-fun x84 () Bool)
(declare-fun x612 () Bool)
(declare-fun x640 () Int)
(declare-fun x390 () Bool)
(declare-fun x72 () Int)
(declare-fun x204 () Int)
(declare-fun x596 () Int)
(declare-fun x602 () Bool)
(declare-fun x458 () Bool)
(declare-fun x109 () Int)
(declare-fun x61 () Int)
(declare-fun x542 () Int)
(declare-fun x103 () Int)
(declare-fun x120 () Int)
(declare-fun x223 () x71)
(declare-fun x377 (Int Int) Int)
(declare-fun x437 () Int)
(declare-fun x288 () Int)
(declare-fun x439 () Int)
(declare-fun x69 () Bool)
(declare-fun x147 () Bool)
(declare-fun x95 () Int)
(declare-fun x545 () Bool)
(declare-fun x208 () Int)
(declare-fun x62 () Int)
(declare-fun x195 () Int)
(declare-fun x366 () Bool)
(declare-fun x651 () Int)
(declare-fun x576 () Int)
(declare-fun x343 () Bool)
(declare-fun x207 () Int)
(declare-fun x491 () Int)
(declare-fun x621 () Int)
(declare-fun x499 () Bool)
(declare-fun x425 () Int)
(declare-fun x13 (Int) Int)
(declare-fun x224 () x71)
(declare-fun x519 () x71)
(declare-fun x42 () Int)
(declare-fun x283 () Int)
(declare-fun x503 () Int)
(declare-fun x550 () Int)
(declare-fun x402 () Int)
(declare-fun x466 () Int)
(declare-fun x325 () Int)
(declare-fun x631 () Int)
(declare-fun x271 () Int)
(declare-fun x670 () Int)
(declare-fun x122 () Bool)
(define-fun x201 ((x71 x71) (x355 Int)) x71 (ite ((_ is x412) x71) (x412 (x292 x71) (+ (x126 x71) x355)) (ite ((_ is x180) x71) (x180 (x614 x71) (x291 x71) (+ x355 (x264 x71))) (x274 (+ (x92 x71) x355)))))
(define-fun x445 ((x448 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x448) (>= x448 0)) x448 (- x448 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x642 ((x448 Int)) Int (ite (and (< x448 0) (>= x448 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x448 115792089237316195423570985008687907853269984665640564039457584007913129639936) x448))
(define-fun x117 ((x574 Int)) Bool (and (<= 0 x574) (< x574 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x217 ((x574 Int)) Bool (and (= (x377 115792089237316195423570985008687907853269984665640564039457584007913129639935 x574) x574) (= x574 (x377 x574 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x371 ((x574 Int)) Bool (and (= (x377 0 x574) 0) (= (x377 x574 0) 0)))
(define-fun x624 ((x574 Int)) Bool (= (x377 x574 x574) x574))
(define-fun x410 ((x574 Int)) Bool (and (x624 x574) (x217 x574) (x371 x574)))
(define-fun x451 ((x574 Int) (x429 Int)) Bool (= (x377 x429 x574) (x377 x574 x429)))
(define-fun x335 ((x574 Int) (x429 Int)) Bool (and (>= (x377 x574 x429) 0) (=> (>= x429 0) (<= (x377 x574 x429) x429)) (=> (<= 0 x574) (<= (x377 x574 x429) x574))))
(define-fun x376 ((x574 Int) (x429 Int)) Bool (and (x335 x574 x429) (x451 x574 x429)))
(define-fun x512 ((x574 Int)) Bool (= (x377 x574 1461501637330902918203684832716283019655932542975) (mod x574 1461501637330902918203684832716283019655932542976)))
(define-fun x250 ((x574 Int)) Bool (and (x512 x574) (x376 x574 1461501637330902918203684832716283019655932542975)))
(define-fun x626 ((x574 Int)) Bool (= (x377 x574 340282366920938463463374607431768211455) (mod x574 340282366920938463463374607431768211456)))
(define-fun x362 ((x574 Int)) Bool (and (x626 x574) (x376 x574 340282366920938463463374607431768211455)))
(define-fun x363 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x664 x658)))
(define-fun x46 ((x658 Int)) Int (ite (= x658 132) x283 (x363 x658)))
(define-fun x128 ((x658 Int)) Int (ite (= x658 128) x434 (x46 x658)))
(define-fun x238 ((x658 Int)) Int (ite (= x658 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x470 x658)))
(define-fun x661 ((x658 Int)) Int (ite (= 132 x658) x283 (x238 x658)))
(define-fun x23 ((x658 Int)) Int (ite (= 128 x658) x434 (x661 x658)))
(define-fun x573 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x513 x658)))
(define-fun x287 ((x658 Int)) Int (ite (= 132 x658) x283 (x573 x658)))
(define-fun x4 ((x658 Int)) Int (ite (= 128 x658) x434 (x287 x658)))
(define-fun x649 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x330 x658)))
(define-fun x324 ((x658 Int)) Int (ite (= 132 x658) x283 (x649 x658)))
(define-fun x232 ((x658 Int)) Int (ite (= 128 x658) x434 (x324 x658)))
(define-fun x155 ((x658 Int)) Int (ite (= x658 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x644 x658)))
(define-fun x514 ((x658 Int)) Int (ite (= 132 x658) x283 (x155 x658)))
(define-fun x144 ((x658 Int)) Int (ite (= 128 x658) x434 (x514 x658)))
(define-fun x105 ((x658 x71)) Int (ite (= x658 x223) x659 (x233 x658)))
(define-fun x361 ((x658 x71)) Int (ite (= x658 x163) x365 (x105 x658)))
(define-fun x322 ((x658 Int)) Int (ite (= x658 160) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x144 x658)))
(define-fun x110 ((x658 Int)) Int (ite (= x658 164) x214 (x322 x658)))
(define-fun x80 ((x658 Int)) Int (ite (= 196 x658) x192 (x110 x658)))
(define-fun x323 ((x658 Int)) Int (ite (= 228 x658) x422 (x80 x658)))
(define-fun x367 ((x658 Int)) Int (ite (= x658 160) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x323 x658)))
(define-fun x455 ((x658 Int)) Int (ite (= x658 164) x331 (x367 x658)))
(define-fun x272 ((x658 Int)) Int (ite (= 196 x658) x192 (x455 x658)))
(define-fun x175 ((x658 Int)) Int (ite (= x658 228) x120 (x272 x658)))
(define-fun x541 ((x658 Int)) Int (ite x33 (x144 x658) (ite x389 (x323 x658) (x175 x658))))
(define-fun x671 ((x658 Int)) Int (ite (= 160 x658) x53 (x541 x658)))
(define-fun x591 ((x658 Int)) Int (ite (= 160 x658) 96761774277087264896447800937287851747744109681099051503132604413955201302528 (x671 x658)))
(define-fun x638 ((x658 Int)) Int (ite (= x658 164) x283 (x591 x658)))
(define-fun x559 ((x658 Int)) Int (ite (= 196 x658) x500 (x638 x658)))
(define-fun x351 ((x658 Int)) Int (ite (= x658 228) x331 (x559 x658)))
(define-fun x381 ((x658 Int)) Int (ite (= 260 x658) x561 (x351 x658)))
(define-fun x657 ((x658 Int)) Int (ite (= x658 292) x278 (x381 x658)))
(define-fun x218 ((x658 Int)) Int (ite (= x658 324) x339 (x657 x658)))
(define-fun x254 ((x658 Int)) Int (ite (and (< x658 (+ 160 0)) (<= 160 x658)) (x251 (+ 0 (- x658 160))) (x218 x658)))
(define-fun x348 ((x658 Int)) Int (ite (= x658 160) x561 (x254 x658)))
(define-fun x138 ((x658 Int)) Int (ite (= 192 x658) x219 (x348 x658)))
(define-fun x91 ((x658 Int)) Int (ite (= x658 160) (ite true 1 0) (x138 x658)))
(define-fun x436 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x582 x658)))
(define-fun x616 ((x658 Int)) Int (ite (= x658 132) x283 (x436 x658)))
(define-fun x549 ((x658 Int)) Int (ite (= 128 x658) x434 (x616 x658)))
(define-fun x333 ((x658 x71)) Int (ite (= x658 x413) x234 (x361 x658)))
(define-fun x17 ((x658 x71)) Int (ite (= x658 x9) x303 (x333 x658)))
(define-fun x301 ((x658 Int)) Int (ite (= x658 160) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x549 x658)))
(define-fun x157 ((x658 Int)) Int (ite (= x658 164) x216 (x301 x658)))
(define-fun x119 ((x658 Int)) Int (ite (= x658 196) x192 (x157 x658)))
(define-fun x266 ((x658 Int)) Int (ite (= 228 x658) x137 (x119 x658)))
(define-fun x629 ((x658 Int)) Int (ite (= x658 160) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x266 x658)))
(define-fun x567 ((x658 Int)) Int (ite (= x658 164) x609 (x629 x658)))
(define-fun x35 ((x658 Int)) Int (ite (= 196 x658) x192 (x567 x658)))
(define-fun x279 ((x658 Int)) Int (ite (= 228 x658) x72 (x35 x658)))
(define-fun x653 ((x658 Int)) Int (ite x482 (x549 x658) (ite x77 (x266 x658) (x279 x658))))
(define-fun x185 ((x658 Int)) Int (ite (= x658 160) x652 (x653 x658)))
(define-fun x167 ((x658 Int)) Int (ite (= x658 160) 96761774277087264896447800937287851747744109681099051503132604413955201302528 (x185 x658)))
(define-fun x546 ((x658 Int)) Int (ite (= x658 164) x283 (x167 x658)))
(define-fun x315 ((x658 Int)) Int (ite (= x658 196) x375 (x546 x658)))
(define-fun x468 ((x658 Int)) Int (ite (= 228 x658) x609 (x315 x658)))
(define-fun x200 ((x658 Int)) Int (ite (= 260 x658) x501 (x468 x658)))
(define-fun x337 ((x658 Int)) Int (ite (= x658 292) x435 (x200 x658)))
(define-fun x568 ((x658 Int)) Int (ite (= x658 324) x631 (x337 x658)))
(define-fun x606 ((x658 Int)) Int (ite (and (<= 160 x658) (> (+ 160 0) x658)) (x599 (+ 0 (- x658 160))) (x568 x658)))
(define-fun x393 ((x658 Int)) Int (ite (= 160 x658) x501 (x606 x658)))
(define-fun x164 ((x658 Int)) Int (ite (= 192 x658) x473 (x393 x658)))
(define-fun x388 ((x658 Int)) Int (ite (= 160 x658) (ite true 1 0) (x164 x658)))
(define-fun x431 ((x658 Int)) Int (ite (= x658 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x483 x658)))
(define-fun x667 ((x658 Int)) Int (ite (= 132 x658) x283 (x431 x658)))
(define-fun x29 ((x658 Int)) Int (ite (= 128 x658) x434 (x667 x658)))
(define-fun x193 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x156 x658)))
(define-fun x426 ((x658 Int)) Int (ite (= x658 132) x283 (x193 x658)))
(define-fun x255 ((x658 Int)) Int (ite (= 128 x658) x434 (x426 x658)))
(define-fun x173 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x419 x658)))
(define-fun x384 ((x658 Int)) Int (ite (= x658 132) x283 (x173 x658)))
(define-fun x55 ((x658 Int)) Int (ite (= 128 x658) x434 (x384 x658)))
(define-fun x409 ((x658 x71)) Int (ite (= x658 x7) x364 (x17 x658)))
(define-fun x516 ((x658 x71)) Int (ite (= x538 x658) x289 (x409 x658)))
(define-fun x281 ((x658 Int)) Int (ite (= x658 160) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x55 x658)))
(define-fun x418 ((x658 Int)) Int (ite (= x658 164) x73 (x281 x658)))
(define-fun x656 ((x658 Int)) Int (ite (= 196 x658) x192 (x418 x658)))
(define-fun x210 ((x658 Int)) Int (ite (= x658 228) x439 (x656 x658)))
(define-fun x639 ((x658 Int)) Int (ite (= x658 160) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x210 x658)))
(define-fun x221 ((x658 Int)) Int (ite (= 164 x658) x239 (x639 x658)))
(define-fun x329 ((x658 Int)) Int (ite (= 196 x658) x192 (x221 x658)))
(define-fun x268 ((x658 Int)) Int (ite (= x658 228) x475 (x329 x658)))
(define-fun x159 ((x658 Int)) Int (ite x295 (x55 x658) (ite x602 (x210 x658) (x268 x658))))
(define-fun x82 ((x658 Int)) Int (ite (= x658 160) x480 (x159 x658)))
(define-fun x506 ((x658 Int)) Int (ite (= 160 x658) 96761774277087264896447800937287851747744109681099051503132604413955201302528 (x82 x658)))
(define-fun x249 ((x658 Int)) Int (ite (= x658 164) x283 (x506 x658)))
(define-fun x529 ((x658 Int)) Int (ite (= x658 196) x457 (x249 x658)))
(define-fun x165 ((x658 Int)) Int (ite (= x658 228) x239 (x529 x658)))
(define-fun x258 ((x658 Int)) Int (ite (= x658 260) x666 (x165 x658)))
(define-fun x487 ((x658 Int)) Int (ite (= 292 x658) x16 (x258 x658)))
(define-fun x543 ((x658 Int)) Int (ite (= x658 324) x208 (x487 x658)))
(define-fun x267 ((x658 Int)) Int (ite (and (> (+ 160 0) x658) (>= x658 160)) (x13 (+ 0 (- x658 160))) (x543 x658)))
(define-fun x462 ((x658 Int)) Int (ite (= 160 x658) x666 (x267 x658)))
(define-fun x634 ((x658 Int)) Int (ite (= x658 192) x261 (x462 x658)))
(define-fun x385 ((x658 Int)) Int (ite (= 160 x658) (ite true 1 0) (x634 x658)))
(define-fun x537 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x112 x658)))
(define-fun x111 ((x658 Int)) Int (ite (= x658 132) x283 (x537 x658)))
(define-fun x423 ((x658 Int)) Int (ite (= 128 x658) x434 (x111 x658)))
(define-fun x399 ((x658 Int)) Int (ite (= 128 x658) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x625 x658)))
(define-fun x643 ((x658 Int)) Int (ite (= 132 x658) x283 (x399 x658)))
(define-fun x424 ((x658 Int)) Int (ite (= x658 128) x434 (x643 x658)))
(define-fun x370 ((x574 Int)) Bool (=> (and (not (= x574 94699471215667416670508682402181198833950827816622411988269365108481485438976)) (not (= 1000000000000000000000000000 x574)) (not (= 340282366920938463463374607431768211456 x574)) (> x574 10000) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x574)) (not (= 500000000000000000000000000 x574)) (not (= 3018967357 x574)) (not (= 2835717307 x574)) (not (= 340282366920938463463374607431768211455 x574)) (not (= 96761774277087264896447800937287851747744109681099051503132604413955201302528 x574)) (not (= x574 1889567281)) (not (= 1461501637330902918203684832716283019655932542975 x574)) (not (= 826074471 x574)) (not (= x574 1461501637330902918203684832716283019655932542976)) (not (= x574 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 2113256763 x574)) (not (= 1865579259 x574)) (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 x574)) (not (= 2757214935 x574)) (not (= 4294967296 x574))) (not ((_ is x274) (x356 x574)))))
(assert (x117 x432))
(assert (x117 x571))
(assert (x117 x386))
(assert (x117 x401))
(assert (=> (<= x449 10000) (= (x274 x449) (x356 x449))))
(assert (x117 x283))
(assert (x117 x89))
(assert (x117 x174))
(assert (x117 x246))
(assert (x117 x331))
(assert (=> (>= 10000 x580) (= (x274 x580) (x356 x580))))
(assert (x117 x182))
(assert (= (x28 (x274 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x117 x518))
(assert (= x76 (or x554 x33)))
(assert (x117 x41))
(assert (x117 x161))
(assert (x117 x547))
(assert (x117 x623))
(assert (x117 x647))
(assert (x117 x397))
(assert (x117 x130))
(assert (= (and (not x311) x150) x551))
(assert (x117 x6))
(assert (x117 x493))
(assert (= x454 (x28 (x356 x454))))
(assert (x117 x636))
(assert (x117 x339))
(assert (x117 x579))
(assert (= x102 (=> (and (and (= x669 (x377 1461501637330902918203684832716283019655932542975 x402)) (< x300 4294967296) (= (x385 160) x100) (= (x377 1461501637330902918203684832716283019655932542975 x550) x457) (not (= x52 0)) (= (x86 (x356 x669)) x52)) (and (and (and (= x490 3) (= x320 x68) (= x280 (<= x467 x61)) (= x152 x252) (= x15 x204) (= x265 x395) (= (* 3 x505) x352) (= (and x280 x243) x296) (= (and x113 x584) x461) (= (+ x244 x265) x199) (= x177 x558) (= (+ x252 x352) x350) (= x467 x177) (= (+ x228 x558) x103) (= x113 (>= x350 x556)) (= x403 3) (= x132 (* 3 x59)) (= x61 (+ x15 x132)) (= x68 x34) (= x51 3) (= x556 x395) (= x584 (<= x544 x199)) (= x68 x59) (= x49 3) (= (* x320 3) x244) (= (>= x103 x645) x243) (= x68 x505) (= x152 x428) (= (* 3 x34) x228) (= (and x461 x296) x222) (= x645 x204) (= x544 x152)) (and (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x604) x533) (= x196 (x516 x495)) (= (x445 (+ 500000000000000000000000000 x358)) x380) (= (x424 128) x604) (= x564 (not x65)) (<= x283 1461501637330902918203684832716283019655932542975) (> x463 0) (= x587 (ite x122 1 0)) (>= x283 0) (= x507 1889567281) (= x495 (x180 (x356 x608) (x274 52) 0)) (= x182 x608) (> x587 0) (> 1461501637330902918203684832716283019655932542976 x283) (not (= 1865579259 x507)) (= x428 x630) (= (x86 (x356 x605)) x463) (= (div x380 1000000000000000000000000000) x630) (not (> 1865579259 x507)) (>= 340282366920938463463374607431768211455 x196) (not (> 826074471 x507)) (> 2113256763 x507) (= (= x604 0) x135) (= (< x533 x196) x65) (= x358 (mod (* x196 x604) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (or x564 x135) x122) (<= x608 1461501637330902918203684832716283019655932542975) (= x284 x177) (> 340282366920938463463374607431768211456 x196) (<= 0 x196))) (and (< x226 2113256763) (not (> 826074471 x226)) (= (x86 (x356 x605)) x75) (= (mod (* x149 x372) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x325) (= x215 (or x416 x611)) (= x284 x674) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x372) x622) (<= 0 x283) (< x283 1461501637330902918203684832716283019655932542976) (= 1889567281 x226) (= (= x372 0) x416) (= x674 (div x25 1000000000000000000000000000)) (<= x283 1461501637330902918203684832716283019655932542975) (>= x149 0) (= (> x149 x622) x353) (= (x180 (x356 x242) (x274 52) 0) x293) (= x25 (x445 (+ x325 500000000000000000000000000))) (= (x423 128) x372) (> x317 0) (> x75 0) (not (> 1865579259 x226)) (= (ite x215 1 0) x317) (< x149 340282366920938463463374607431768211456) (not (= 1865579259 x226)) (= x20 x242) (<= x242 1461501637330902918203684832716283019655932542975) (>= 340282366920938463463374607431768211455 x149) (= (not x353) x611) (= x149 (x516 x293))))) x222)))
(assert (x117 x288))
(assert (=> (>= 10000 x650) (= (x274 x650) (x356 x650))))
(assert (x117 x425))
(assert (= (x28 (x274 3018967357)) 3018967357))
(assert (x117 x47))
(assert (x117 x535))
(assert (x117 x400))
(assert (x117 x560))
(assert (x370 x454))
(assert (= (x274 94699471215667416670508682402181198833950827816622411988269365108481485438976) (x356 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (= x669 (x28 (x356 x669))))
(assert (x117 x285))
(assert (x370 x161))
(assert (x117 x566))
(assert (x117 x44))
(assert (= (x356 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x274 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x117 x375))
(assert (x117 x428))
(assert (x117 x650))
(assert (x117 x652))
(assert (x117 x441))
(assert (x117 x328))
(assert (x117 x478))
(assert (x117 x542))
(assert (x117 x600))
(assert (x117 x349))
(assert (x117 x202))
(assert (x117 x235))
(assert (x117 x422))
(assert (= 340282366920938463463374607431768211456 (x28 (x274 340282366920938463463374607431768211456))))
(assert (x117 x558))
(assert (=> (>= 10000 x669) (= (x356 x669) (x274 x669))))
(assert (x117 x562))
(assert (x117 x176))
(assert (=> (>= 10000 x344) (= (x356 x344) (x274 x344))))
(assert (x117 x654))
(assert (x370 x131))
(assert (= (and x311 x150) x77))
(assert (x117 x302))
(assert (x117 x531))
(assert (x117 x465))
(assert (x117 x79))
(assert (x117 x187))
(assert (x117 x368))
(assert (x117 x610))
(assert (x117 x19))
(assert (x117 x477))
(assert (x117 x438))
(assert (x117 x191))
(assert (x117 x395))
(assert (x117 x120))
(assert (x117 x387))
(assert (x117 x206))
(assert (x370 x650))
(assert (x117 x651))
(assert (= (x274 500000000000000000000000000) (x356 500000000000000000000000000)))
(assert (x370 x609))
(assert (x117 x18))
(assert (= (x28 (x274 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x117 x640))
(assert (x370 x56))
(assert (x117 x99))
(assert (x117 x569))
(assert (x117 x533))
(assert (x117 x613))
(assert (x117 x134))
(assert (x117 x127))
(assert (x117 x294))
(assert (x117 x627))
(assert (x117 x75))
(assert (=> (<= x240 10000) (= (x356 x240) (x274 x240))))
(assert (x117 x236))
(assert (x117 x62))
(assert (x117 x212))
(assert (= (or x114 x482) x366))
(assert (x117 x63))
(assert (= x30 (x28 (x356 x30))))
(assert (x117 x585))
(assert (x117 x434))
(assert (x410 x654))
(assert (x117 x70))
(assert (x117 x286))
(assert (= (and (not x660) x76) x150))
(assert (x117 x231))
(assert (=> (>= 10000 x30) (= (x274 x30) (x356 x30))))
(assert (x117 x186))
(assert (x117 x607))
(assert (x117 x552))
(assert (x117 x481))
(assert (= 1461501637330902918203684832716283019655932542975 (x28 (x274 1461501637330902918203684832716283019655932542975))))
(assert (x117 x40))
(assert (x117 x290))
(assert (x117 x303))
(assert (= 500000000000000000000000000 (x28 (x274 500000000000000000000000000))))
(assert (x117 x184))
(assert (x370 x101))
(assert (x250 x402))
(assert (x117 x402))
(assert (x117 x298))
(assert (= (x356 2757214935) (x274 2757214935)))
(assert (x117 x170))
(assert (x117 x196))
(assert (x370 x449))
(assert (= (x28 (x356 x344)) x344))
(assert (x117 x234))
(assert (x370 x580))
(assert (x117 x592))
(assert (x117 x507))
(assert (x117 x435))
(assert (x117 x316))
(assert (x117 x151))
(assert (x117 x219))
(assert (= (or x123 x295) x578))
(assert (= (x28 (x356 x640)) x640))
(assert (x117 x437))
(assert (x117 x309))
(assert (= x389 (and x628 x641)))
(assert (= x618 (=> (and (and (and (and (and x398 x502 (<= x466 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x331) (= (div x579 1000000000000000000000000000) x278) (not (< x140 2757214935)) (<= 0 x465) (= (div x6 x219) x53) (= (or x469 x486) x305) (= x359 (x445 (+ x360 500000000000000000000000000))) (= (x233 x374) x422) (= x227 (x105 x163)) (= x485 0) (<= 0 x425) (= x66 x262) (< x422 340282366920938463463374607431768211456) (= (x233 x565) x107) x87 (<= x425 1461501637330902918203684832716283019655932542975) (= x485 x627) (= x590 (div x510 1000000000000000000000000000)) (not (> x53 x422)) (= x411 (x180 (x356 x331) (x274 52) 0)) (= x212 x20) (= x2 x66) (= x120 x108) (<= 0 x262) (= x557 (not x572)) (= (x233 x336) x432) (> 340282366920938463463374607431768211456 x107) (= (< x522 x432) x50) (= (> x561 x590) x194) (= x121 (- x342 x227)) (= x237 x341) (>= x283 0) (< x283 1461501637330902918203684832716283019655932542976) (= x565 (x180 (x356 x331) (x274 52) 0)) (>= 340282366920938463463374607431768211455 x227) (<= 0 x107) (= x56 (x377 1461501637330902918203684832716283019655932542975 x66)) (>= x407 0) (= (ite x474 1 0) x349) (= (x642 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x70)) x510) (= x342 (+ x365 x31)) (> 340282366920938463463374607431768211456 x120) (= x398 (= x31 x129)) (= x374 (x180 (x356 x161) (x274 52) 0)) (= (not x50) x147) (<= x432 340282366920938463463374607431768211455) (= (x180 (x356 x580) (x274 52) 0) x336) (= x498 (> x107 x18)) x499 (not (= 2757214935 x140)) (= (x144 128) x219) (= x70 (div x219 2)) (= x579 (x445 (+ x14 500000000000000000000000000))) (not (< x140 2113256763)) (= x474 (or x147 x464)) (= x129 (- x11 x466)) (= x373 (= x219 0)) (= x328 x331) (= (and x172 x133) x499) (>= x227 0) (>= x422 0) (= x365 (+ x108 x450)) (= x14 (mod (* x219 x432) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x377 1461501637330902918203684832716283019655932542975 x66) x580) (= x146 x354) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x219) x18) (<= x407 1461501637330902918203684832716283019655932542975) (<= x422 340282366920938463463374607431768211455) (<= 0 x432) (= x536 (= x425 0)) (not (> x561 340282366920938463463374607431768211455)) (< 0 x349) (<= 0 x466) (= x223 (x180 (x356 x56) (x274 52) 0)) (= (+ x203 x659) x11) (= (not x498) x469) (= (mod (* x219 x107) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x360) (= (x233 x223) x466) (= x502 (= x174 x212)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x219) x522) (= x161 (x377 1461501637330902918203684832716283019655932542975 x66)) (= (div x359 1000000000000000000000000000) x339) (> x269 0) x540 (>= 1461501637330902918203684832716283019655932542975 x283) (= x550 x174) (= x191 (ite x635 1 0)) (= (= 0 x219) x486) (= x6 (x445 (+ x170 x607))) (= x663 (x86 (x356 x605))) (= (x642 (- x422 x53)) x452) (< 0 x663) (not (< 340282366920938463463374607431768211455 x53)) (= 1 x88) (= x572 (not x194)) (= 2835717307 x140) (>= 1461501637330902918203684832716283019655932542975 x262) (>= 340282366920938463463374607431768211455 x107) (= x8 x515) (<= x365 340282366920938463463374607431768211455) (< x140 3018967357) (= (or x373 x557) x635) (>= 340282366920938463463374607431768211455 x120) (>= x120 0) (= (= x121 x247) x87) (> 1461501637330902918203684832716283019655932542976 x425) (= x170 (mod (* 1000000000000000000000000000 x561) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= x146 x166) x172) (= x647 x561) (= x515 x407) (= x53 x450) (= (= x219 0) x464) (= x269 (ite x305 1 0)) (= (x105 x411) x120) (> 340282366920938463463374607431768211456 x432) (<= x465 1461501637330902918203684832716283019655932542975) (= x191 0) (= x540 (= x2 x237)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x53 x120)) (= (div x219 2) x607) (= x163 (x180 (x356 x331) (x274 52) 0)) (= (x377 340282366920938463463374607431768211455 x452) x659)) (and (<= 0 x40) (= x593 (x86 (x356 x605))) (= x225 (or x619 x188)) (not (= 1865579259 x245)) (< x283 1461501637330902918203684832716283019655932542976) (= x334 (div x478 1000000000000000000000000000)) (= (mod (* x318 x40) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x235) (= (not x509) x619) (= x166 x447) (= x245 1889567281) (= x97 (ite x225 1 0)) (= x354 x334) (= x318 (x232 128)) (> x593 0) (> x97 0) (not (> 1865579259 x245)) (= x478 (x445 (+ x235 500000000000000000000000000))) (> 2113256763 x245) (<= 0 x283) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x318) x484) (= (> x40 x484) x509) (<= x40 340282366920938463463374607431768211455) (<= x131 1461501637330902918203684832716283019655932542975) (= (x233 x581) x40) (= x188 (= 0 x318)) (> 340282366920938463463374607431768211456 x40) (<= x283 1461501637330902918203684832716283019655932542975) (not (> 826074471 x245)) (= (x180 (x356 x131) (x274 52) 0) x581) (= x131 x182))) (and (>= 1461501637330902918203684832716283019655932542975 x283) (>= 340282366920938463463374607431768211455 x532) (not (< x340 1865579259)) (not (< x340 826074471)) (> 1461501637330902918203684832716283019655932542976 x283) (= (div x271 1000000000000000000000000000) x213) (> 340282366920938463463374607431768211456 x532) (< 0 x309) (= (x445 (+ x98 500000000000000000000000000)) x271) (= x36 (not x38)) (= x64 (or x36 x612)) (= x213 x447) (>= x283 0) (= x38 (> x532 x21)) (= (x86 (x356 x605)) x42) (not (= x340 1865579259)) (= x532 (x233 x583)) (= x357 (= x236 x577)) (= (x4 128) x206) (= (ite x64 1 0) x309) (< 0 x42) (= x328 x3) (= x236 x181) (>= x532 0) (= x21 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x206)) (= x98 (mod (* x532 x206) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x133 (and x357 x588)) (= x583 (x180 (x356 x3) (x274 52) 0)) (= x612 (= x206 0)) (< x340 2113256763) (>= 1461501637330902918203684832716283019655932542975 x3) (= 1889567281 x340))) (and (= (x445 (+ 500000000000000000000000000 x594)) x368) (= (x233 x297) x646) (= x83 x181) (= x20 x640) (<= 0 x646) (> x400 0) (not (> 1865579259 x662)) (= x285 (ite x160 1 0)) (= x662 1889567281) (> 2113256763 x662) (not (= x662 1865579259)) (>= x283 0) (= x260 (> x646 x195)) (= (= x294 0) x198) (< x646 340282366920938463463374607431768211456) (= x160 (or x198 x668)) (< 0 x285) (= x39 x577) (= x297 (x180 (x356 x640) (x274 52) 0)) (> 1461501637330902918203684832716283019655932542976 x283) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x294) x195) (>= 1461501637330902918203684832716283019655932542975 x640) (<= x283 1461501637330902918203684832716283019655932542975) (not (> 826074471 x662)) (= x594 (mod (* x294 x646) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x23 128) x294) (= x83 (div x368 1000000000000000000000000000)) (>= 340282366920938463463374607431768211455 x646) (= x400 (x86 (x356 x605))) (= (not x260) x668))) (and (= x471 x182) (>= 1461501637330902918203684832716283019655932542975 x20) (= (not (= x43 x438)) x404) (<= x283 1461501637330902918203684832716283019655932542975) (not (= x19 1865579259)) (> 340282366920938463463374607431768211456 x379) (= x328 x396) (= x283 x670) (<= x288 255) (= 1000000000000000000000000000 x369) (= x182 x313) (= (not (= x246 x471)) x504) (<= 0 x341) (= (> x379 x60) x460) (= x20 x43) (>= x116 0) (not (> 826074471 x19)) (= x379 (x233 x632)) (< 0 x489) (= x341 x101) (= x22 (x517 (x356 x605))) (>= 1461501637330902918203684832716283019655932542975 x101) (= x632 (x180 (x356 x101) (x274 52) 0)) (= x60 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x405)) (= x145 (and x404 x504)) (= x154 (= x405 0)) (<= x283 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x283) (= x20 x187) (= x550 x37) (<= x379 340282366920938463463374607431768211455) (= x523 x39) (<= x328 1461501637330902918203684832716283019655932542975) (= (not (= x313 x290)) x343) (> x605 0) (= x290 x341) (< 0 x24) (= (and x145 x343) x282) (>= x283 0) (<= x182 1461501637330902918203684832716283019655932542975) (= (not x460) x229) (= x182 x547) (= (x517 (x356 x670)) x41) x78 (<= 0 x37) (= x328 x246) (<= x37 1461501637330902918203684832716283019655932542975) (= x397 x341) (<= 0 x182) (>= x563 0) (= x610 x518) (= (ite x459 1 0) x489) (= (not (= x503 x183)) x492) (>= x20 0) (= (div x197 1000000000000000000000000000) x523) (<= 0 x41) (= x503 x328) (<= 0 x425) (> x670 0) (= x588 (and x310 x136)) (= x136 (= x104 x148)) (= x310 (and x492 x282)) (= x586 x387) (= x438 x341) (<= x207 1461501637330902918203684832716283019655932542975) (= x78 (< 0 (x86 (x356 x605)))) (<= 0 x288) (= (= x397 x396) x104) (= x197 (x445 (+ x94 500000000000000000000000000))) (= (x128 128) x405) (<= x425 1461501637330902918203684832716283019655932542975) (<= x670 1461501637330902918203684832716283019655932542975) (= x434 x387) (<= 0 x283) (>= x22 0) (= x24 (x86 (x356 x605))) (<= 0 x328) (= (> (x86 (x356 x670)) 0) x57) (>= x207 0) (= x94 (mod (* x405 x379) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x341 1461501637330902918203684832716283019655932542975) (<= x563 1461501637330902918203684832716283019655932542975) (<= x527 255) (= (div x586 1000000000000000000000000000) x68) (>= x379 0) (= x459 (or x154 x229)) (>= 1461501637330902918203684832716283019655932542975 x116) (not (= x605 x670)) (<= x518 1461501637330902918203684832716283019655932542975) (>= x527 0) (= x116 x66) (= x592 x563) (<= 0 x518) (= 1889567281 x19) (not (< x19 1865579259)) (>= 1461501637330902918203684832716283019655932542975 x605) (> 2113256763 x19) x57 (= x148 (= x547 x187)) (= x183 x20))) (and (=> (and (not x536) (and (and (>= x192 0) (= (x86 (x356 x425)) x673) (= (= x331 x491) x628) (= (x377 1461501637330902918203684832716283019655932542975 x66) x491) (= (x377 1461501637330902918203684832716283019655932542975 x66) x214) (<= x192 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x673 0))) (or (and (not x628) (and (not (= 0 x312)) (= x312 (x86 (x356 x425))))) x628))) x528) (=> x536 x672)))))
(assert (x117 x98))
(assert (x117 x515))
(assert (= (x356 826074471) (x274 826074471)))
(assert (= x476 x102))
(assert (x370 x608))
(assert (x117 x39))
(assert (= (x28 (x274 2835717307)) 2835717307))
(assert (x117 x259))
(assert (x117 x550))
(assert (x117 x31))
(assert (x117 x631))
(assert (x117 x555))
(assert (x117 x586))
(assert (x117 x655))
(assert (x117 x306))
(assert (x117 x252))
(assert (x117 x334))
(assert (= x482 (and x76 x660)))
(assert (= (x28 (x356 x331)) x331))
(assert (x117 x226))
(assert (x117 x525))
(assert (x370 x531))
(assert (x117 x354))
(assert (= (and (not x530) x366) x84))
(assert (x117 x149))
(assert (x117 x83))
(assert (= (x28 (x356 x131)) x131))
(assert (x117 x312))
(assert (x370 x670))
(assert (x117 x544))
(assert (x117 x659))
(assert (x117 x553))
(assert (x117 x503))
(assert (x117 x466))
(assert (x117 x93))
(assert (x117 x16))
(assert (x117 x101))
(assert (x117 x257))
(assert (x117 x563))
(assert (x117 x608))
(assert (x117 x146))
(assert (x117 x369))
(assert (x370 x669))
(assert (x117 x313))
(assert (x117 x25))
(assert (x117 x284))
(assert (x117 x472))
(assert (x117 x14))
(assert (x117 x207))
(assert (x117 x456))
(assert (x370 x30))
(assert (= x242 (x28 (x356 x242))))
(assert (=> (>= 10000 x609) (= (x274 x609) (x356 x609))))
(assert (= (and x84 (not x326)) x601))
(assert (=> (>= 10000 x56) (= (x356 x56) (x274 x56))))
(assert (x117 x20))
(assert (x117 x12))
(assert (x117 x452))
(assert (= (x28 (x274 1889567281)) 1889567281))
(assert (x117 x444))
(assert (x117 x107))
(assert (x117 x340))
(assert (x117 x440))
(assert (x117 x237))
(assert (x117 x299))
(assert (x117 x214))
(assert (x117 x269))
(assert (x117 x278))
(assert (x117 x220))
(assert (x117 x344))
(assert (x370 x44))
(assert (x117 x209))
(assert (x370 x3))
(assert (= (or x551 x77) x114))
(assert (= (x28 (x274 22402283082756182618670880521465619040657731284550890770856599233457073160192)) 22402283082756182618670880521465619040657731284550890770856599233457073160192))
(assert (x410 x452))
(assert (= (x28 (x274 4294967296)) 4294967296))
(assert (= (x274 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x356 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x117 x195))
(assert (x117 x27))
(assert (x117 x166))
(assert (x117 x407))
(assert (x117 x8))
(assert (x117 x153))
(assert (= x3 (x28 (x356 x3))))
(assert (x117 x56))
(assert (x410 x621))
(assert (x117 x561))
(assert (x117 x473))
(assert (x117 x22))
(assert (x117 x140))
(assert (x117 x100))
(assert (x117 x162))
(assert (x117 x177))
(assert (x117 x380))
(assert (x117 x454))
(assert (x117 x379))
(assert (= (x28 (x356 x240)) x240))
(assert (x117 x137))
(assert (x370 x242))
(assert (x117 x74))
(assert (x117 x26))
(assert (x117 x304))
(assert (x117 x213))
(assert (x117 x596))
(assert (x117 x396))
(assert (x117 x622))
(assert (= x602 (and x326 x84)))
(assert (x117 x179))
(assert (= x641 (and x453 (not x536))))
(assert (x117 x359))
(assert (x117 x24))
(assert (x117 x247))
(assert (x117 x457))
(assert (x117 x605))
(assert (x117 x480))
(assert (= x123 (or x601 x602)))
(assert (= (x274 1865579259) (x356 1865579259)))
(assert (= (=> (and (and (not (= x93 0)) (= x93 (x86 (x356 x344))) (= (x377 1461501637330902918203684832716283019655932542975 x402) x344) (= (x388 160) x189) (> 4294967296 x316) (= (x377 1461501637330902918203684832716283019655932542975 x66) x375)) (and (and (= x392 (= 0 x525)) (= x525 (x29 128)) (= x575 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x525)) (= x89 x248) (= (x445 (+ x186 500000000000000000000000000)) x542) (= (x86 (x356 x605)) x665) (> 340282366920938463463374607431768211456 x481) (= (x180 (x356 x650) (x274 52) 0) x205) (>= 1461501637330902918203684832716283019655932542975 x650) (= (not x548) x54) (>= x283 0) (= x162 (ite x648 1 0)) (= x341 x650) (>= 1461501637330902918203684832716283019655932542975 x283) (< 0 x665) (<= 0 x481) (= x420 1889567281) (< x420 2113256763) (not (< x420 1865579259)) (= x481 (x17 x205)) (= x248 (div x542 1000000000000000000000000000)) (= (or x54 x392) x648) (= (mod (* x525 x481) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x186) (> 1461501637330902918203684832716283019655932542976 x283) (>= 340282366920938463463374607431768211455 x481) (> x162 0) (= (< x575 x481) x548) (not (= x420 1865579259)) (not (< x420 826074471))) (and (and (not (> x480 x439)) (= (x180 (x356 x240) (x274 52) 0) x7) (= x45 (mod (* 1000000000000000000000000000 x666) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x442 (- x494 x176)) (> 340282366920938463463374607431768211456 x401) (>= x414 0) (= (div x655 1000000000000000000000000000) x208) x446 (= x239 x182) (= (> x414 x430) x620) (<= x283 1461501637330902918203684832716283019655932542975) (>= x475 0) (= x401 (x17 x118)) (= (= x143 x600) x446) (= x475 (x409 x224)) (= (> x401 x304) x32) (= x655 (x445 (+ 500000000000000000000000000 x589))) (<= x401 340282366920938463463374607431768211455) (= x347 (or x390 x479)) (= (not x520) x319) (= 0 x570) (= x654 (x642 (- x439 x480))) (= x440 x395) (= x666 (x445 (+ x298 x79))) (= x477 (div x153 1000000000000000000000000000)) (= x444 0) (> 1461501637330902918203684832716283019655932542976 x283) (>= 340282366920938463463374607431768211455 x475) (> x521 0) (>= 340282366920938463463374607431768211455 x414) (= (ite x497 1 0) x444) (= (x445 (+ x456 x45)) x571) (< x414 340282366920938463463374607431768211456) (= x480 x314) (< (+ x480 x475) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x414 (x17 x519)) (= x456 (div x261 2)) (= x560 2835717307) (= (x377 1461501637330902918203684832716283019655932542975 x550) x240) (= (x377 340282366920938463463374607431768211455 x654) x364) x277 (= x289 (+ x211 x314)) (= x253 (or x81 x524)) (>= 340282366920938463463374607431768211455 x289) (> 340282366920938463463374607431768211456 x475) (= (= x261 0) x69) (< 0 x415) (= (< x477 x666) x433) (= x211 x475) (< x425 1461501637330902918203684832716283019655932542976) (= x286 (ite x347 1 0)) (= x261 (x55 128)) (= x304 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x261)) (= x530 (= 0 x425)) (= (x642 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391)) x153) (= x613 x637) (>= x401 0) (= x598 (x445 (+ 500000000000000000000000000 x597))) (= (= x417 x442) x277) (= x550 x603) (<= x74 340282366920938463463374607431768211455) (= (x377 1461501637330902918203684832716283019655932542975 x550) x27) (>= x283 0) (= x391 (div x261 2)) (= x151 x570) (= (x180 (x356 x239) (x274 52) 0) x224) (= x16 (div x598 1000000000000000000000000000)) (= x520 (not x433)) (> 340282366920938463463374607431768211456 x439) (= (x180 (x356 x27) (x274 52) 0) x118) (not (> 2757214935 x560)) (>= x74 0) (<= x603 1461501637330902918203684832716283019655932542975) (= (= 0 x261) x390) (<= x176 340282366920938463463374607431768211455) (= x589 (mod (* x414 x261) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= 0 x302) (<= 0 x176) (not (= 2757214935 x560)) (<= 0 x603) (= (x17 x106) x439) (= x479 (not x32)) (>= x306 0) (< 0 x286) (>= 1461501637330902918203684832716283019655932542975 x425) (= (+ x633 x364) x421) (not (> x480 340282366920938463463374607431768211455)) (= x302 x637) (>= 340282366920938463463374607431768211455 x439) (= x480 (div x571 x261)) (= (= x261 0) x81) (= x647 x79) (<= 0 x425) (>= 1461501637330902918203684832716283019655932542975 x239) (= (mod (* x261 x401) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x597) (= x415 (x86 (x356 x605))) (= x472 1) (= (ite x253 1 0) x521) (= (x17 x7) x74) (< x560 3018967357) (>= x439 0) (= (x409 x538) x176) (= x552 x298) (= x106 (x180 (x356 x449) (x274 52) 0)) (= (x180 (x356 x239) (x274 52) 0) x519) (= (x377 1461501637330902918203684832716283019655932542975 x550) x449) (not (< 340282366920938463463374607431768211455 x666)) (= x494 (+ x600 x289)) (= x143 (- x421 x74)) (= (or x319 x69) x497) (= x430 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x261)) (not (< x560 2113256763)) (= (not x620) x524) (<= x302 1461501637330902918203684832716283019655932542975) (<= x306 1461501637330902918203684832716283019655932542975) (= (x180 (x356 x239) (x274 52) 0) x538)) (and (= x383 (not x1)) (= x10 (x86 (x356 x605))) (= (x180 (x356 x454) (x274 52) 0) x275) (= x454 x328) (<= 0 x283) (= x440 x257) (< x283 1461501637330902918203684832716283019655932542976) (= (or x276 x383) x168) (= 1889567281 x190) (= x263 (x17 x275)) (not (= x190 1865579259)) (= x443 (x445 (+ x231 500000000000000000000000000))) (= x204 x89) (= (div x443 1000000000000000000000000000) x257) (<= 0 x263) (> 2113256763 x190) (= (< x259 x263) x1) (= (= 0 x47) x276) (not (< x190 826074471)) (= (mod (* x47 x263) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x231) (<= x454 1461501637330902918203684832716283019655932542975) (= x535 (ite x168 1 0)) (= (x255 128) x47) (<= x263 340282366920938463463374607431768211455) (not (< x190 1865579259)) (> x535 0) (> x10 0) (>= 1461501637330902918203684832716283019655932542975 x283) (< x263 340282366920938463463374607431768211456) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x47) x259))))) (and (=> x530 x102) (=> (and (and (and (= (= x386 x239) x326) (<= x192 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x386 (x377 1461501637330902918203684832716283019655932542975 x550)) (= (x86 (x356 x425)) x406) (= (x377 1461501637330902918203684832716283019655932542975 x550) x73) (not (= 0 x406)) (<= 0 x192)) (or (and (not x326) (and (not (= 0 x569)) (= (x86 (x356 x425)) x569))) x326)) (not x530)) x476))) x48))
(assert (x117 x674))
(assert (x250 x66))
(assert (= 1865579259 (x28 (x274 1865579259))))
(assert (= x554 (or x389 x142)))
(assert (x117 x109))
(assert (=> (>= 10000 x331) (= (x356 x331) (x274 x331))))
(assert (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x28 (x274 94699471215667416670508682402181198833950827816622411988269365108481485438976))))
(assert (= (x28 (x356 x650)) x650))
(assert (= (x274 4294967296) (x356 4294967296)))
(assert (x117 x181))
(assert (x117 x152))
(assert (x117 x439))
(assert (x117 x556))
(assert (x117 x94))
(assert (x370 x425))
(assert (= x608 (x28 (x356 x608))))
(assert (=> (<= x425 10000) (= (x356 x425) (x274 x425))))
(assert (x117 x141))
(assert (x117 x208))
(assert (= x425 (x28 (x356 x425))))
(assert (x117 x51))
(assert (= x672 x528))
(assert (x117 x3))
(assert (x117 x10))
(assert (x117 x183))
(assert (=> (>= 10000 x131) (= (x274 x131) (x356 x131))))
(assert (x117 x665))
(assert (x117 x95))
(assert (x117 x321))
(assert (= x609 (x28 (x356 x609))))
(assert (x410 340282366920938463463374607431768211455))
(assert (x117 x633))
(assert (x117 x248))
(assert (x117 x364))
(assert (= x453 true))
(assert (x117 x216))
(assert (x117 x372))
(assert (x117 x475))
(assert (x117 x414))
(assert (x117 x621))
(assert (x117 x491))
(assert (x117 x604))
(assert (=> (<= x27 10000) (= (x274 x27) (x356 x27))))
(assert (x117 x30))
(assert (x117 x603))
(assert (x117 x88))
(assert (x117 x415))
(assert (x117 x325))
(assert (=> (<= x161 10000) (= (x274 x161) (x356 x161))))
(assert (x117 x15))
(assert (x117 x580))
(assert (x117 x570))
(assert (= (x356 1000000000000000000000000000) (x274 1000000000000000000000000000)))
(assert (x117 x49))
(assert (= (x356 340282366920938463463374607431768211456) (x274 340282366920938463463374607431768211456)))
(assert (x117 x45))
(assert (= (x28 (x356 x580)) x580))
(assert (= (x28 (x356 x161)) x161))
(assert (x117 x500))
(assert (x117 x265))
(assert (x117 x597))
(assert (= (x356 2835717307) (x274 2835717307)))
(assert (x117 x360))
(assert (=> (>= 10000 x454) (= (x356 x454) (x274 x454))))
(assert (not x618))
(assert (= (x356 340282366920938463463374607431768211455) (x274 340282366920938463463374607431768211455)))
(assert (x117 x341))
(assert (x117 x663))
(assert (x117 x630))
(assert (x117 x484))
(assert (x117 x289))
(assert (x117 x670))
(assert (x117 x52))
(assert (= x545 x48))
(assert (= (x28 (x274 2757214935)) 2757214935))
(assert (x117 x37))
(assert (x117 x669))
(assert (x370 x344))
(assert (x370 x640))
(assert (= (x28 (x274 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x410 x66))
(assert (= x33 (and x536 x453)))
(assert (= (x356 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x274 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x117 x501))
(assert (x370 x240))
(assert (=> (<= x3 10000) (= (x356 x3) (x274 x3))))
(assert (x117 x72))
(assert (x117 x447))
(assert (x117 x532))
(assert (x117 x615))
(assert (= (x356 2113256763) (x274 2113256763)))
(assert (= 96761774277087264896447800937287851747744109681099051503132604413955201302528 (x28 (x274 96761774277087264896447800937287851747744109681099051503132604413955201302528))))
(assert (x117 x443))
(assert (x117 x190))
(assert (= x27 (x28 (x356 x27))))
(assert (= x295 (and x366 x530)))
(assert (x117 x575))
(assert (x362 x452))
(assert (x117 x593))
(assert (= (x28 (x274 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (x117 x637))
(assert (x117 x131))
(assert (x410 x402))
(assert (x117 x300))
(assert (x117 x420))
(assert (x117 x263))
(assert (x117 x227))
(assert (= x434 1000000000000000000000000000))
(assert (= x605 (x28 (x356 x605))))
(assert (x117 x271))
(assert (=> (<= x608 10000) (= (x274 x608) (x356 x608))))
(assert (x117 x405))
(assert (=> (<= x670 10000) (= (x274 x670) (x356 x670))))
(assert (x117 x590))
(assert (x117 x490))
(assert (x117 x245))
(assert (x117 x97))
(assert (x117 x21))
(assert (x117 x85))
(assert (x370 x331))
(assert (x117 x189))
(assert (x117 x53))
(assert (x117 x645))
(assert (x117 x403))
(assert (x117 x241))
(assert (x117 x308))
(assert (= x449 (x28 (x356 x449))))
(assert (x117 x666))
(assert (x117 x508))
(assert (= (x28 (x356 x44)) x44))
(assert (x117 x587))
(assert (x117 x522))
(assert (=> (>= 10000 x239) (= (x274 x239) (x356 x239))))
(assert (x117 x427))
(assert (x117 x318))
(assert (x117 x662))
(assert (x117 x90))
(assert (= (x356 1461501637330902918203684832716283019655932542975) (x274 1461501637330902918203684832716283019655932542975)))
(assert (= x672 (=> (and (and (= (x86 (x356 x44)) x95) (= x562 (x91 160)) (= (x377 1461501637330902918203684832716283019655932542975 x66) x500) (= (x377 1461501637330902918203684832716283019655932542975 x402) x44) (< x596 4294967296) (not (= x95 0))) (and (= (< x63 x501) x346) (<= 0 x425) (= x531 (x377 1461501637330902918203684832716283019655932542975 x66)) (= (= 0 x473) x496) (= x134 x627) (= x552 x501) (= x595 (not x617)) (< 0 x115) (= x615 x555) (= x631 (div x90 1000000000000000000000000000)) (>= x137 0) (= 0 x134) (>= 340282366920938463463374607431768211455 x72) (= (x333 x9) x241) (not (< x137 x652)) (= x9 (x180 (x356 x609) (x274 52) 0)) (<= 0 x651) (= (= x425 0) x660) (= x12 (x445 (+ x127 x220))) (>= 340282366920938463463374607431768211455 x303) (= (or x458 x496) x125) (= x328 x609) (= (ite x125 1 0) x26) (= (= x299 x273) x307) (= (x180 (x356 x427) (x274 52) 0) x413) (= x636 (x642 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x321))) (= x169 (+ x247 x234)) (= x345 (ite x270 1 0)) (>= 340282366920938463463374607431768211455 x137) (= x67 (+ x303 x299)) (= (x180 (x356 x30) (x274 52) 0) x171) (<= x623 340282366920938463463374607431768211455) (= x651 x66) (< x332 340282366920938463463374607431768211456) (= x652 x58) (not (= 2757214935 x178)) (not (> 2113256763 x178)) (<= 0 x332) (= x332 (x361 x139)) (>= x566 0) (> 340282366920938463463374607431768211456 x72) (= (ite x408 1 0) x115) (> 340282366920938463463374607431768211456 x85) (= x124 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x473)) (= x427 (x377 1461501637330902918203684832716283019655932542975 x66)) (= x72 x327) (not (> 2757214935 x178)) (= x539 (> x85 x124)) (= x621 (x642 (- x137 x652))) (= 1 x437) (> 1461501637330902918203684832716283019655932542976 x425) (not (> x501 340282366920938463463374607431768211455)) (= x617 (not x346)) (= x72 (x333 x534)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x652 x72)) (>= x241 0) (>= 340282366920938463463374607431768211455 x332) (= (not x539) x338) (= x96 (- x67 x241)) (= (x549 128) x473) (= 0 x345) (<= 0 x72) (= (= x473 0) x256) (= (x180 (x356 x531) (x274 52) 0) x394) (<= 0 x85) (= (> x332 x141) x378) (>= 340282366920938463463374607431768211455 x85) (= (- x169 x623) x273) (> 3018967357 x178) (>= 340282366920938463463374607431768211455 x241) (= (x377 340282366920938463463374607431768211455 x621) x234) (>= 1461501637330902918203684832716283019655932542975 x555) (= 2835717307 x178) (> 1461501637330902918203684832716283019655932542976 x283) (= (x361 x171) x85) (<= x609 1461501637330902918203684832716283019655932542975) (<= x651 1461501637330902918203684832716283019655932542975) (= x30 (x377 1461501637330902918203684832716283019655932542975 x66)) (>= 1461501637330902918203684832716283019655932542975 x425) (= (x86 (x356 x605)) x109) (<= 0 x283) (= (mod (* x473 x85) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x576) (= x137 (x361 x394)) (>= 1461501637330902918203684832716283019655932542975 x566) (>= x555 0) x5 (= x8 x615) (= (not x378) x458) (= x534 (x180 (x356 x609) (x274 52) 0)) (= x220 (mod (* 1000000000000000000000000000 x501) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x137 340282366920938463463374607431768211456) (= (div x473 2) x321) (< 0 x109) (= (div x473 2) x127) (= (x180 (x356 x609) (x274 52) 0) x139) (not (< 340282366920938463463374607431768211455 x652)) (>= 1461501637330902918203684832716283019655932542975 x283) (= x141 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x473)) (= (or x256 x338) x408) (= x623 (x361 x413)) (= x90 (x445 (+ x130 500000000000000000000000000))) (> x26 0) (= (+ x327 x58) x303) (= x270 (or x595 x511)) (= (= 0 x473) x511) (= x493 (x445 (+ x576 500000000000000000000000000))) x307 (= x130 (mod (* x473 x332) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x63 (div x636 1000000000000000000000000000)) (= (= x633 x96) x5) (= (div x12 x473) x652) (>= x623 0) (= (div x493 1000000000000000000000000000) x435))) (and (=> x660 x48) (=> (and (not x660) (and (or (and (not x311) (and (= x308 (x86 (x356 x425))) (not (= x308 0)))) x311) (and (not (= x553 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x192) (= (x377 1461501637330902918203684832716283019655932542975 x66) x216) (= x553 (x86 (x356 x425))) (= (x377 1461501637330902918203684832716283019655932542975 x66) x202) (= x311 (= x609 x202)) (<= 0 x192)))) x545)))))
(assert (x117 x2))
(assert (=> (>= 10000 x242) (= (x274 x242) (x356 x242))))
(assert (x117 x646))
(assert (x117 x485))
(assert (x117 x391))
(assert (x117 x358))
(assert (x117 x73))
(assert (x117 x158))
(assert (x117 x178))
(assert (x117 x242))
(assert (x117 x594))
(assert (x370 x239))
(assert (x117 x589))
(assert (x117 x489))
(assert (= (x274 3018967357) (x356 3018967357)))
(assert (x117 x197))
(assert (= (x28 (x274 826074471)) 826074471))
(assert (x117 x115))
(assert (x117 x510))
(assert (=> (>= 10000 x640) (= (x274 x640) (x356 x640))))
(assert (x117 x527))
(assert (=> (>= 10000 x427) (= (x356 x427) (x274 x427))))
(assert (= (x356 96761774277087264896447800937287851747744109681099051503132604413955201302528) (x274 96761774277087264896447800937287851747744109681099051503132604413955201302528)))
(assert (x117 x60))
(assert (x117 x66))
(assert (x410 1461501637330902918203684832716283019655932542975))
(assert (= x101 (x28 (x356 x101))))
(assert (= x427 (x28 (x356 x427))))
(assert (= (x356 1889567281) (x274 1889567281)))
(assert (x117 x203))
(assert (x117 x598))
(assert (= (x28 (x356 x239)) x239))
(assert (= x670 (x28 (x356 x670))))
(assert (x117 x382))
(assert (x117 x317))
(assert (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x28 (x274 115792089237316195423570985008687907853269984665640064039457584007913129639935))))
(assert (x410 x550))
(assert (x117 x192))
(assert (x117 x239))
(assert (x117 x449))
(assert (x117 x609))
(assert (x117 x406))
(assert (x117 x467))
(assert (x117 x261))
(assert (=> (>= 10000 x531) (= (x356 x531) (x274 x531))))
(assert (= x142 (and (not x628) x641)))
(assert (x117 x262))
(assert (=> (>= 10000 x605) (= (x274 x605) (x356 x605))))
(assert (x117 x521))
(assert (x117 x345))
(assert (x117 x488))
(assert (x117 x204))
(assert (x117 x240))
(assert (x117 x471))
(assert (x117 x332))
(assert (x117 x124))
(assert (=> (<= x101 10000) (= (x274 x101) (x356 x101))))
(assert (x117 x577))
(assert (= (x28 (x356 x531)) x531))
(assert (x362 x621))
(assert (= (x28 (x356 x56)) x56))
(assert (x370 x427))
(assert (= (x28 (x274 2113256763)) 2113256763))
(assert (x117 x417))
(assert (x117 x42))
(assert (x250 x550))
(assert (x362 x654))
(assert (x117 x523))
(assert (= (x274 1461501637330902918203684832716283019655932542976) (x356 1461501637330902918203684832716283019655932542976)))
(assert (x117 x576))
(assert (x117 x463))
(assert (x117 x43))
(assert (x370 x605))
(assert (x117 x430))
(assert (x117 x673))
(assert (x370 x27))
(assert (=> (>= 10000 x44) (= (x356 x44) (x274 x44))))
(assert (x117 x116))
(assert (x117 x365))
(check-sat)
(exit)