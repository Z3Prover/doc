(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x1691 0)) (((x1688 (x873 x1691) (x1504 x1691) (x677 Int)) (x1660 (x103 x1691) (x709 Int)) (x1773 (x1614 Int)))))
(declare-fun x870 () Bool)
(declare-fun x1193 () Bool)
(declare-fun x653 () Int)
(declare-fun x1758 () Bool)
(declare-fun x610 () Bool)
(declare-fun x988 () Int)
(declare-fun x1314 () Int)
(declare-fun x322 (x1691) Int)
(declare-fun x1717 () Int)
(declare-fun x721 () Int)
(declare-fun x1543 () Int)
(declare-fun x801 () Bool)
(declare-fun x1771 () Bool)
(declare-fun x62 () Int)
(declare-fun x1866 () Bool)
(declare-fun x1435 () Int)
(declare-fun x1727 () Int)
(declare-fun x152 () Bool)
(declare-fun x1540 () Int)
(declare-fun x1400 () Bool)
(declare-fun x1186 () Bool)
(declare-fun x1578 () Int)
(declare-fun x1017 () Bool)
(declare-fun x150 () Int)
(declare-fun x219 () Int)
(declare-fun x1589 () Int)
(declare-fun x692 () Bool)
(declare-fun x1412 () Bool)
(declare-fun x1806 () Bool)
(declare-fun x231 () Bool)
(declare-fun x1769 () Bool)
(declare-fun x181 () Int)
(declare-fun x370 () Int)
(declare-fun x307 () Bool)
(declare-fun x615 () Int)
(declare-fun x410 () Int)
(declare-fun x1499 () Int)
(declare-fun x1115 () Bool)
(declare-fun x1884 () Bool)
(declare-fun x348 () Int)
(declare-fun x282 () Bool)
(declare-fun x1607 () Int)
(declare-fun x704 () Bool)
(declare-fun x512 () Int)
(declare-fun x314 () Int)
(declare-fun x1679 () Int)
(declare-fun x98 () Int)
(declare-fun x777 () Int)
(declare-fun x418 () Int)
(declare-fun x216 (Int Int) Int)
(declare-fun x223 () Bool)
(declare-fun x1791 () Int)
(declare-fun x1455 () Bool)
(declare-fun x530 () Int)
(declare-fun x224 () Bool)
(declare-fun x1216 () Bool)
(declare-fun x1624 () Bool)
(declare-fun x1601 () Int)
(declare-fun x1090 () Int)
(declare-fun x1369 () Int)
(declare-fun x1399 () Bool)
(declare-fun x534 () Bool)
(declare-fun x912 () Int)
(declare-fun x1438 () Int)
(declare-fun x718 () Int)
(declare-fun x215 () Int)
(declare-fun x1224 () Int)
(declare-fun x66 () Int)
(declare-fun x1261 () Int)
(declare-fun x1034 () Bool)
(declare-fun x1187 () Int)
(declare-fun x1762 () Bool)
(declare-fun x1450 () Int)
(declare-fun x1724 () Int)
(declare-fun x87 () Int)
(declare-fun x325 (Int) Int)
(declare-fun x374 () Bool)
(declare-fun x1567 () Int)
(declare-fun x1100 () Bool)
(declare-fun x720 () Bool)
(declare-fun x1606 () Bool)
(declare-fun x441 () Bool)
(declare-fun x1628 () Int)
(declare-fun x845 () Int)
(declare-fun x1150 () Int)
(declare-fun x1005 () Bool)
(declare-fun x201 () Int)
(declare-fun x614 () Bool)
(declare-fun x295 () Int)
(declare-fun x917 () Int)
(declare-fun x1428 () Bool)
(declare-fun x1548 () Bool)
(declare-fun x1880 () Bool)
(declare-fun x1665 () Int)
(declare-fun x234 () Int)
(declare-fun x1406 () Int)
(declare-fun x79 () Bool)
(declare-fun x1853 () Bool)
(declare-fun x129 () Int)
(declare-fun x417 () Int)
(declare-fun x336 () Bool)
(declare-fun x1184 () Int)
(declare-fun x1508 () Int)
(declare-fun x1304 () Bool)
(declare-fun x1157 () Int)
(declare-fun x941 () Bool)
(declare-fun x350 () Int)
(declare-fun x1482 () Int)
(declare-fun x402 () Bool)
(declare-fun x47 () Int)
(declare-fun x1139 () Int)
(declare-fun x1702 () Bool)
(declare-fun x1733 () Bool)
(declare-fun x1325 () Bool)
(declare-fun x516 () Bool)
(declare-fun x886 () Int)
(declare-fun x189 () Int)
(declare-fun x407 () Bool)
(declare-fun x75 () x1691)
(declare-fun x419 () Bool)
(declare-fun x1467 () Bool)
(declare-fun x1793 () Bool)
(declare-fun x392 () Bool)
(declare-fun x212 () Bool)
(declare-fun x50 () Bool)
(declare-fun x1478 () Int)
(declare-fun x1890 () Int)
(declare-fun x674 () Bool)
(declare-fun x876 () Bool)
(declare-fun x301 () Int)
(declare-fun x1075 () Int)
(declare-fun x1378 () Int)
(declare-fun x1080 () Bool)
(declare-fun x946 () Int)
(declare-fun x1867 (Int) Int)
(declare-fun x124 () Int)
(declare-fun x1130 () Int)
(declare-fun x838 () Int)
(declare-fun x735 () Int)
(declare-fun x943 () Bool)
(declare-fun x1529 (x1691) Int)
(declare-fun x1722 () Bool)
(declare-fun x108 () Bool)
(declare-fun x486 () Bool)
(declare-fun x1104 () Bool)
(declare-fun x509 (Int) Int)
(declare-fun x481 () Int)
(declare-fun x591 () Bool)
(declare-fun x1760 () Int)
(declare-fun x1129 () Int)
(declare-fun x1646 () x1691)
(declare-fun x1086 () Int)
(declare-fun x1572 () Int)
(declare-fun x492 () Int)
(declare-fun x1109 () Bool)
(declare-fun x1222 () Int)
(declare-fun x1383 () Bool)
(declare-fun x687 () Bool)
(declare-fun x1307 () Bool)
(declare-fun x1134 () Int)
(declare-fun x160 () Int)
(declare-fun x59 () Bool)
(declare-fun x1585 () Bool)
(declare-fun x531 () Bool)
(declare-fun x726 () Bool)
(declare-fun x1341 () Int)
(declare-fun x1002 () Int)
(declare-fun x1657 () Int)
(declare-fun x1255 () Int)
(declare-fun x776 () Int)
(declare-fun x186 () Int)
(declare-fun x1650 () Bool)
(declare-fun x929 () Int)
(declare-fun x1616 (x1691) Int)
(declare-fun x1843 () Int)
(declare-fun x590 () Bool)
(declare-fun x964 () Int)
(declare-fun x987 () Int)
(declare-fun x1872 () Bool)
(declare-fun x1861 () Bool)
(declare-fun x253 () Bool)
(declare-fun x1087 () Int)
(declare-fun x1707 () Int)
(declare-fun x1695 () Int)
(declare-fun x526 () Bool)
(declare-fun x789 () Int)
(declare-fun x913 () Bool)
(declare-fun x1021 () Bool)
(declare-fun x373 () Int)
(declare-fun x852 () Int)
(declare-fun x1015 () Bool)
(declare-fun x1117 () Int)
(declare-fun x4 () Int)
(declare-fun x243 () Int)
(declare-fun x271 () Bool)
(declare-fun x1669 () Int)
(declare-fun x1229 () Int)
(declare-fun x454 () Int)
(declare-fun x451 (x1691) Int)
(declare-fun x1282 () Bool)
(declare-fun x40 () Bool)
(declare-fun x683 () Int)
(declare-fun x1830 () Int)
(declare-fun x1423 () Bool)
(declare-fun x1330 () Int)
(declare-fun x1700 () Bool)
(declare-fun x462 () Int)
(declare-fun x508 () Bool)
(declare-fun x1128 () Int)
(declare-fun x1809 () Int)
(declare-fun x1778 () Int)
(declare-fun x922 () Bool)
(declare-fun x254 () Int)
(declare-fun x1490 () Int)
(declare-fun x413 () Bool)
(declare-fun x429 () Int)
(declare-fun x1296 () Bool)
(declare-fun x138 () Bool)
(declare-fun x83 () Bool)
(declare-fun x663 () Bool)
(declare-fun x1298 () Bool)
(declare-fun x1528 () Bool)
(declare-fun x1201 () Int)
(declare-fun x1042 () Bool)
(declare-fun x411 () Bool)
(declare-fun x1097 () Int)
(declare-fun x932 () Int)
(declare-fun x169 () Bool)
(declare-fun x904 () Bool)
(declare-fun x1446 (x1691) Int)
(declare-fun x171 (Int) Int)
(declare-fun x645 () Bool)
(declare-fun x730 () Bool)
(declare-fun x90 () Bool)
(declare-fun x1575 () Int)
(declare-fun x78 () Bool)
(declare-fun x1634 () Int)
(declare-fun x1269 () x1691)
(declare-fun x858 () Bool)
(declare-fun x247 () Bool)
(declare-fun x405 () Bool)
(declare-fun x11 () Int)
(declare-fun x55 () Int)
(declare-fun x1245 () Bool)
(declare-fun x1227 () Bool)
(declare-fun x1875 () Bool)
(declare-fun x1049 () x1691)
(declare-fun x1719 () Int)
(declare-fun x469 () Bool)
(declare-fun x1372 () Int)
(declare-fun x910 () Int)
(declare-fun x748 () Int)
(declare-fun x553 () Int)
(declare-fun x1277 () Int)
(declare-fun x654 () Int)
(declare-fun x1594 () Int)
(declare-fun x1706 () Int)
(declare-fun x39 () Bool)
(declare-fun x702 () Int)
(declare-fun x242 (Int) Int)
(declare-fun x1122 () Bool)
(declare-fun x28 () Int)
(declare-fun x315 () Bool)
(declare-fun x176 (x1691) Int)
(declare-fun x1388 () x1691)
(declare-fun x1743 () Bool)
(declare-fun x558 () Int)
(declare-fun x446 () Int)
(declare-fun x1069 () Bool)
(declare-fun x1553 () Int)
(declare-fun x563 (x1691) Int)
(declare-fun x556 (Int) Int)
(declare-fun x809 () Bool)
(declare-fun x644 () Bool)
(declare-fun x1343 () Bool)
(declare-fun x1812 () Bool)
(declare-fun x288 () Bool)
(declare-fun x711 () Bool)
(declare-fun x1361 () Int)
(declare-fun x1766 () Int)
(declare-fun x999 () Int)
(declare-fun x1754 () Int)
(declare-fun x916 () Int)
(declare-fun x1146 () Bool)
(declare-fun x788 () Bool)
(declare-fun x1154 () Int)
(declare-fun x49 () Bool)
(declare-fun x495 () Bool)
(declare-fun x848 () Int)
(declare-fun x464 () Int)
(declare-fun x1208 () Bool)
(declare-fun x979 () Int)
(declare-fun x1600 () Int)
(declare-fun x177 () Int)
(declare-fun x12 (Int) Int)
(declare-fun x1093 () x1691)
(declare-fun x889 () Bool)
(declare-fun x58 () Int)
(declare-fun x1485 () Bool)
(declare-fun x1447 () Int)
(declare-fun x1347 () Bool)
(declare-fun x975 (x1691) Int)
(declare-fun x1108 () Int)
(declare-fun x1183 () Bool)
(declare-fun x251 (Int) Int)
(declare-fun x1756 () Int)
(declare-fun x193 () Int)
(declare-fun x387 () Int)
(declare-fun x313 () Bool)
(declare-fun x1738 () Int)
(declare-fun x627 () Bool)
(declare-fun x170 () Int)
(declare-fun x951 () Int)
(declare-fun x1047 () Int)
(declare-fun x952 () Int)
(declare-fun x1243 () Int)
(declare-fun x120 () Int)
(declare-fun x273 () Int)
(declare-fun x715 () Int)
(declare-fun x843 () Int)
(declare-fun x576 () Bool)
(declare-fun x1566 () Int)
(declare-fun x1207 () x1691)
(declare-fun x56 () Int)
(declare-fun x961 () Int)
(declare-fun x1662 () Int)
(declare-fun x208 () Bool)
(declare-fun x484 () Int)
(declare-fun x227 () Bool)
(declare-fun x559 () Int)
(declare-fun x1004 () Bool)
(declare-fun x1464 () Int)
(declare-fun x305 () Bool)
(declare-fun x1088 (Int) Int)
(declare-fun x1557 () Bool)
(declare-fun x1294 () Int)
(declare-fun x947 (x1691) Int)
(declare-fun x1242 () Int)
(declare-fun x1790 () Bool)
(declare-fun x143 () Int)
(declare-fun x324 () Int)
(declare-fun x218 () Bool)
(declare-fun x1682 () Int)
(declare-fun x659 () Int)
(declare-fun x628 () Int)
(declare-fun x399 () Int)
(declare-fun x1687 () Int)
(declare-fun x1676 () Bool)
(declare-fun x482 () Bool)
(declare-fun x604 () Int)
(declare-fun x1270 () Int)
(declare-fun x869 () Int)
(declare-fun x1092 () Int)
(declare-fun x1608 () Int)
(declare-fun x487 () Bool)
(declare-fun x1371 () Int)
(declare-fun x1173 () x1691)
(declare-fun x1509 () Int)
(declare-fun x1544 () Int)
(declare-fun x1256 () Int)
(declare-fun x101 () Bool)
(declare-fun x1303 () Int)
(declare-fun x161 () Bool)
(declare-fun x1140 () Int)
(declare-fun x320 () Int)
(declare-fun x1747 () Bool)
(declare-fun x740 () Int)
(declare-fun x1794 () Bool)
(declare-fun x344 () Bool)
(declare-fun x1524 () x1691)
(declare-fun x1562 () Int)
(declare-fun x1102 () Bool)
(declare-fun x1220 () Int)
(declare-fun x1037 () Bool)
(declare-fun x991 () Int)
(declare-fun x1841 (Int) Int)
(declare-fun x1500 (Int) Int)
(declare-fun x1798 () Int)
(declare-fun x1781 () Bool)
(declare-fun x1488 () Int)
(declare-fun x64 () Int)
(declare-fun x356 () Int)
(declare-fun x1039 () Bool)
(declare-fun x895 () Int)
(declare-fun x1654 () Bool)
(declare-fun x562 () Bool)
(declare-fun x599 () Bool)
(declare-fun x107 () x1691)
(declare-fun x819 (Int) x1691)
(declare-fun x1167 () Bool)
(declare-fun x1249 () Bool)
(declare-fun x834 () Int)
(declare-fun x339 () Int)
(declare-fun x544 () Bool)
(declare-fun x596 () Bool)
(declare-fun x1860 () Int)
(declare-fun x1043 () Bool)
(declare-fun x1076 () Int)
(declare-fun x1404 (x1691) Int)
(declare-fun x1459 () Bool)
(declare-fun x1451 () Int)
(declare-fun x159 () Int)
(declare-fun x493 () Int)
(declare-fun x1631 () Bool)
(declare-fun x520 () Int)
(declare-fun x935 () Int)
(declare-fun x194 () Int)
(declare-fun x613 () x1691)
(declare-fun x1487 () Bool)
(declare-fun x806 () Bool)
(declare-fun x141 () Bool)
(declare-fun x1730 () x1691)
(declare-fun x676 () Int)
(declare-fun x1178 () Bool)
(declare-fun x1311 () Bool)
(declare-fun x724 () Int)
(declare-fun x1810 () Int)
(declare-fun x733 () Int)
(declare-fun x1799 () Bool)
(declare-fun x1072 () Int)
(declare-fun x620 () Int)
(declare-fun x27 () Int)
(declare-fun x1020 () Bool)
(declare-fun x1131 () Int)
(declare-fun x1292 () Bool)
(declare-fun x805 () Int)
(declare-fun x130 () Bool)
(declare-fun x1506 () Int)
(declare-fun x1768 () Int)
(declare-fun x430 () Int)
(declare-fun x595 () Int)
(declare-fun x93 () Int)
(declare-fun x1775 () Bool)
(declare-fun x529 () Int)
(declare-fun x872 () Int)
(declare-fun x1786 () Int)
(declare-fun x1649 () Int)
(declare-fun x504 () Bool)
(declare-fun x854 () Bool)
(declare-fun x1469 () Int)
(declare-fun x1055 () Int)
(declare-fun x97 () Int)
(declare-fun x672 () Int)
(declare-fun x164 () Bool)
(declare-fun x1016 () Int)
(declare-fun x111 () Bool)
(declare-fun x816 () Bool)
(declare-fun x880 () Int)
(declare-fun x359 () Int)
(declare-fun x1436 () Int)
(declare-fun x390 () Int)
(declare-fun x1382 () Int)
(declare-fun x1696 () Bool)
(declare-fun x1272 () Bool)
(declare-fun x609 () Int)
(declare-fun x759 () Int)
(declare-fun x700 () Int)
(declare-fun x800 () Int)
(declare-fun x122 () Bool)
(declare-fun x879 () Bool)
(declare-fun x73 () Int)
(declare-fun x758 () Int)
(declare-fun x187 () Int)
(declare-fun x1599 () Bool)
(declare-fun x270 () Bool)
(declare-fun x1297 () Int)
(declare-fun x490 () Int)
(declare-fun x268 () Bool)
(declare-fun x853 () Int)
(declare-fun x781 () Int)
(declare-fun x287 () Int)
(declare-fun x1376 () Bool)
(declare-fun x713 () Bool)
(declare-fun x597 () Bool)
(declare-fun x1009 () Bool)
(declare-fun x1265 () Int)
(declare-fun x1822 () Bool)
(declare-fun x1390 () Int)
(declare-fun x1074 () Bool)
(declare-fun x396 () Int)
(declare-fun x1883 (x1691) Int)
(declare-fun x994 () Bool)
(declare-fun x33 () Int)
(declare-fun x1169 () Bool)
(declare-fun x974 () Int)
(declare-fun x162 () Int)
(declare-fun x349 () Int)
(declare-fun x1659 () Bool)
(declare-fun x140 () Int)
(declare-fun x749 () Int)
(declare-fun x1537 () Bool)
(declare-fun x168 () Bool)
(declare-fun x786 () Int)
(declare-fun x25 () Int)
(declare-fun x1120 (x1691) Int)
(declare-fun x1422 () Int)
(declare-fun x149 () Bool)
(declare-fun x1573 (x1691) Int)
(declare-fun x696 () Int)
(declare-fun x1322 () Int)
(declare-fun x1177 () Int)
(declare-fun x1523 () Bool)
(declare-fun x94 () Int)
(declare-fun x985 () Int)
(declare-fun x1332 () Int)
(declare-fun x17 () Int)
(declare-fun x426 (x1691) Int)
(declare-fun x74 () Bool)
(declare-fun x424 () Int)
(declare-fun x640 () Int)
(declare-fun x750 () Int)
(declare-fun x1753 () Bool)
(declare-fun x343 () Bool)
(declare-fun x930 () Bool)
(declare-fun x817 () Bool)
(declare-fun x312 () Int)
(declare-fun x648 () Int)
(declare-fun x1398 () Int)
(declare-fun x277 () Int)
(declare-fun x831 () Int)
(declare-fun x241 () Bool)
(declare-fun x116 () Bool)
(declare-fun x1334 () Int)
(declare-fun x1580 () Bool)
(declare-fun x293 () Bool)
(declare-fun x1170 () Int)
(declare-fun x1389 () Bool)
(declare-fun x369 () Bool)
(declare-fun x406 () Int)
(declare-fun x507 () Int)
(declare-fun x1831 () Int)
(declare-fun x799 () Int)
(declare-fun x221 () Bool)
(declare-fun x1761 (Int) Int)
(declare-fun x1871 () Int)
(declare-fun x1085 () Int)
(declare-fun x279 () Bool)
(declare-fun x928 () Bool)
(declare-fun x133 () Int)
(declare-fun x1024 () Int)
(declare-fun x722 () Bool)
(declare-fun x1801 () Bool)
(declare-fun x1604 (x1691) Int)
(declare-fun x262 () Int)
(declare-fun x1736 () Int)
(declare-fun x104 () Int)
(declare-fun x1483 () Int)
(declare-fun x1849 () Int)
(declare-fun x540 () Int)
(declare-fun x1218 () Int)
(declare-fun x409 () Bool)
(declare-fun x1546 () Int)
(declare-fun x1855 () Bool)
(declare-fun x891 () Bool)
(declare-fun x557 () Int)
(declare-fun x377 () Bool)
(declare-fun x1171 () Bool)
(declare-fun x1545 () Bool)
(declare-fun x1494 () Bool)
(declare-fun x622 () Int)
(declare-fun x16 () Bool)
(declare-fun x263 () Int)
(declare-fun x570 () Bool)
(declare-fun x1863 () Int)
(declare-fun x1136 () Int)
(declare-fun x182 () Int)
(declare-fun x1833 () Bool)
(declare-fun x600 () Int)
(declare-fun x185 () Int)
(declare-fun x1143 () Int)
(declare-fun x690 () Int)
(declare-fun x92 () Bool)
(declare-fun x1474 () Bool)
(declare-fun x678 () Bool)
(declare-fun x1013 () Int)
(declare-fun x1716 () Int)
(declare-fun x729 () Bool)
(declare-fun x1323 () Int)
(declare-fun x358 () Bool)
(declare-fun x1137 () Int)
(declare-fun x1094 () Bool)
(declare-fun x643 () Int)
(declare-fun x813 () Bool)
(declare-fun x250 () Bool)
(declare-fun x144 () Bool)
(declare-fun x1510 () Bool)
(declare-fun x1329 () Bool)
(declare-fun x953 () Int)
(declare-fun x127 () Int)
(declare-fun x1437 () Int)
(declare-fun x41 () Int)
(declare-fun x340 () Int)
(declare-fun x393 () Int)
(declare-fun x51 () Int)
(declare-fun x382 () Int)
(declare-fun x1236 () Bool)
(declare-fun x966 () Int)
(declare-fun x1723 () Int)
(declare-fun x739 () Bool)
(declare-fun x1030 () Int)
(declare-fun x1602 (Int) Int)
(declare-fun x1331 () Int)
(declare-fun x524 () Int)
(declare-fun x982 (x1691) Int)
(declare-fun x861 () Bool)
(declare-fun x1735 () Bool)
(declare-fun x1458 () Int)
(declare-fun x479 () Bool)
(declare-fun x1689 () Int)
(declare-fun x1384 () Bool)
(declare-fun x1352 () Bool)
(declare-fun x338 () Int)
(declare-fun x868 () Int)
(declare-fun x10 () Int)
(declare-fun x1684 () Int)
(declare-fun x284 () Bool)
(declare-fun x1152 () Int)
(declare-fun x1652 () Int)
(declare-fun x1253 () Bool)
(declare-fun x1827 () Bool)
(declare-fun x452 () Bool)
(declare-fun x23 () Int)
(declare-fun x1279 () Int)
(declare-fun x933 (x1691) Int)
(declare-fun x664 () Int)
(declare-fun x1515 () x1691)
(declare-fun x1518 () Int)
(declare-fun x1742 () Int)
(declare-fun x1808 () Bool)
(declare-fun x303 () Int)
(declare-fun x1491 () Int)
(declare-fun x666 () Int)
(declare-fun x1149 () Int)
(declare-fun x102 () Bool)
(declare-fun x1471 () Int)
(declare-fun x797 () Int)
(declare-fun x550 () Bool)
(declare-fun x1640 () Int)
(declare-fun x594 () Bool)
(declare-fun x1065 () Int)
(declare-fun x694 () Int)
(declare-fun x1107 () Int)
(declare-fun x1380 () Int)
(declare-fun x1699 () Int)
(declare-fun x1127 () Int)
(declare-fun x1393 () Int)
(declare-fun x1674 () Int)
(declare-fun x1379 () Int)
(declare-fun x184 () Int)
(declare-fun x1401 () Int)
(declare-fun x1196 () Bool)
(declare-fun x771 () Int)
(declare-fun x135 () Int)
(declare-fun x1287 () Bool)
(declare-fun x1596 () Int)
(declare-fun x1174 () Int)
(declare-fun x1887 () Int)
(declare-fun x1751 () Bool)
(declare-fun x8 () Bool)
(declare-fun x1627 () Bool)
(declare-fun x257 () Int)
(declare-fun x163 () Bool)
(declare-fun x106 () Int)
(declare-fun x1555 () Int)
(declare-fun x1777 () Int)
(declare-fun x1678 () Bool)
(declare-fun x379 () Int)
(declare-fun x1026 () Bool)
(declare-fun x136 (x1691) Int)
(declare-fun x712 () Int)
(declare-fun x867 () Int)
(declare-fun x705 () Int)
(declare-fun x3 () x1691)
(declare-fun x1259 () Bool)
(declare-fun x9 () Bool)
(declare-fun x948 () Int)
(declare-fun x1541 () Int)
(declare-fun x501 () Bool)
(declare-fun x1558 () Bool)
(declare-fun x1103 () Int)
(declare-fun x291 () Int)
(declare-fun x1463 () Bool)
(declare-fun x1251 () Int)
(declare-fun x561 () Int)
(declare-fun x472 () Int)
(declare-fun x474 () Int)
(declare-fun x1387 () Bool)
(declare-fun x226 () Int)
(declare-fun x1826 () Int)
(declare-fun x1824 () Int)
(declare-fun x1168 () Bool)
(declare-fun x1033 () Int)
(declare-fun x1638 () Int)
(declare-fun x477 () Bool)
(declare-fun x772 () Int)
(declare-fun x1586 () Bool)
(declare-fun x874 () Int)
(declare-fun x423 () Bool)
(declare-fun x209 () Int)
(declare-fun x1327 () Int)
(declare-fun x686 () Bool)
(declare-fun x785 () Int)
(declare-fun x548 () Int)
(declare-fun x1502 () Int)
(declare-fun x1892 () Bool)
(declare-fun x1832 () Int)
(declare-fun x444 () Int)
(declare-fun x1749 () Int)
(declare-fun x1266 () Int)
(declare-fun x1495 () Int)
(declare-fun x1889 (x1691) Int)
(declare-fun x204 () Bool)
(declare-fun x1391 () Bool)
(declare-fun x70 () Bool)
(declare-fun x725 () Int)
(declare-fun x655 () Bool)
(declare-fun x560 () Int)
(declare-fun x971 () Bool)
(declare-fun x1368 () Bool)
(declare-fun x1720 () x1691)
(declare-fun x1642 () Int)
(declare-fun x330 () Int)
(declare-fun x955 () Bool)
(declare-fun x1237 () Bool)
(declare-fun x45 () Int)
(declare-fun x453 () Int)
(declare-fun x918 () Int)
(declare-fun x448 () Int)
(declare-fun x986 () Int)
(declare-fun x821 () Int)
(declare-fun x1365 () Int)
(declare-fun x475 () Bool)
(declare-fun x274 () Bool)
(declare-fun x915 () Bool)
(declare-fun x1439 () Int)
(declare-fun x266 () Int)
(declare-fun x764 () Bool)
(declare-fun x434 () Int)
(declare-fun x1514 () Bool)
(declare-fun x863 () x1691)
(declare-fun x139 () Int)
(declare-fun x1366 () Int)
(declare-fun x1618 () Int)
(declare-fun x812 () Int)
(declare-fun x1141 () Bool)
(declare-fun x252 () Int)
(declare-fun x467 () Int)
(declare-fun x1667 () Int)
(declare-fun x232 (x1691) Int)
(declare-fun x760 () Bool)
(declare-fun x1552 () Bool)
(declare-fun x99 () Int)
(declare-fun x1876 (x1691) Int)
(declare-fun x360 () Bool)
(declare-fun x658 () Bool)
(declare-fun x1672 () Int)
(declare-fun x1854 () Int)
(declare-fun x142 () Bool)
(declare-fun x1358 () Int)
(declare-fun x1481 () Bool)
(declare-fun x21 () Bool)
(declare-fun x822 () Int)
(declare-fun x1539 () Bool)
(declare-fun x1626 () Int)
(declare-fun x1153 () Int)
(declare-fun x128 () Int)
(declare-fun x589 () Int)
(declare-fun x1498 () Int)
(declare-fun x810 () Int)
(declare-fun x545 () Int)
(declare-fun x1010 () Bool)
(declare-fun x787 () Int)
(declare-fun x827 () Bool)
(declare-fun x1850 () Int)
(declare-fun x866 () Int)
(declare-fun x1431 () Int)
(declare-fun x832 () Int)
(declare-fun x1511 () Bool)
(declare-fun x1194 () Bool)
(declare-fun x63 () Int)
(declare-fun x198 () Bool)
(declare-fun x1112 () Int)
(declare-fun x299 () Int)
(declare-fun x1373 () Bool)
(declare-fun x699 () Bool)
(declare-fun x698 () Bool)
(declare-fun x1046 (Int) Int)
(declare-fun x765 () Bool)
(declare-fun x1349 () Int)
(declare-fun x404 () Bool)
(declare-fun x1466 () Bool)
(declare-fun x1442 () Int)
(declare-fun x888 () Int)
(declare-fun x619 () Bool)
(declare-fun x200 () Int)
(declare-fun x1116 () Int)
(declare-fun x998 () Int)
(declare-fun x679 () Bool)
(declare-fun x285 () Int)
(declare-fun x1285 () Int)
(declare-fun x238 () Bool)
(declare-fun x541 () Bool)
(declare-fun x327 () Bool)
(declare-fun x1704 () Bool)
(declare-fun x1310 () Bool)
(declare-fun x1060 () Int)
(declare-fun x401 () Int)
(declare-fun x1142 () Int)
(declare-fun x732 () Bool)
(declare-fun x245 () Bool)
(declare-fun x1056 () Int)
(declare-fun x1118 () Int)
(declare-fun x355 () Bool)
(declare-fun x968 () Bool)
(declare-fun x1813 () Bool)
(declare-fun x488 () Int)
(declare-fun x1284 () Int)
(declare-fun x970 () Int)
(declare-fun x977 () Bool)
(declare-fun x1530 () Bool)
(declare-fun x551 () Int)
(declare-fun x1527 () Bool)
(declare-fun x625 () x1691)
(declare-fun x583 () Bool)
(declare-fun x1219 () Int)
(declare-fun x546 (Int) Int)
(declare-fun x1413 () Int)
(declare-fun x304 (Int Int) Int)
(declare-fun x978 () Int)
(declare-fun x457 () Bool)
(declare-fun x523 () Int)
(declare-fun x353 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x1765 () Int)
(declare-fun x1089 () Int)
(declare-fun x934 () Bool)
(declare-fun x298 () Int)
(declare-fun x723 () Bool)
(declare-fun x1036 () Int)
(declare-fun x18 () Bool)
(declare-fun x1411 () Bool)
(declare-fun x281 () Int)
(declare-fun x728 () Bool)
(declare-fun x1234 () Int)
(declare-fun x1711 () Bool)
(declare-fun x318 () Bool)
(declare-fun x1119 () Bool)
(declare-fun x897 () Bool)
(declare-fun x790 () x1691)
(declare-fun x1734 () Bool)
(declare-fun x1745 () Bool)
(declare-fun x1054 () Bool)
(declare-fun x289 () Int)
(declare-fun x717 () Int)
(declare-fun x1305 () Int)
(declare-fun x1587 () Int)
(declare-fun x1138 () Bool)
(declare-fun x1078 () Int)
(declare-fun x1164 () Int)
(declare-fun x567 () Bool)
(declare-fun x415 () Bool)
(declare-fun x885 () Bool)
(declare-fun x849 () Bool)
(declare-fun x1603 () Int)
(declare-fun x1656 () Int)
(declare-fun x1281 (Int) Int)
(declare-fun x261 () Bool)
(declare-fun x1101 () Int)
(declare-fun x1740 () Int)
(declare-fun x1864 () Bool)
(declare-fun x905 () Int)
(declare-fun x1770 () Int)
(declare-fun x157 () Int)
(declare-fun x962 () Int)
(declare-fun x210 () Int)
(declare-fun x833 () Bool)
(declare-fun x1839 () Int)
(declare-fun x881 () Int)
(declare-fun x967 () Int)
(declare-fun x438 () x1691)
(declare-fun x1882 () Bool)
(declare-fun x137 () Bool)
(declare-fun x926 () Bool)
(declare-fun x1705 () Int)
(declare-fun x587 () Int)
(declare-fun x857 () Bool)
(declare-fun x840 () Int)
(declare-fun x1632 () Int)
(declare-fun x450 () Int)
(declare-fun x1486 () Bool)
(declare-fun x1472 () Int)
(declare-fun x811 () Int)
(declare-fun x1250 () Int)
(declare-fun x1095 () Bool)
(declare-fun x1145 () Bool)
(declare-fun x110 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x1802 () Bool)
(declare-fun x1870 () x1691)
(declare-fun x577 () Bool)
(declare-fun x294 () Int)
(declare-fun x352 () Int)
(declare-fun x958 () Int)
(declare-fun x1189 () Int)
(declare-fun x1232 () Int)
(declare-fun x1703 () Bool)
(declare-fun x1859 () Int)
(declare-fun x1415 () Bool)
(declare-fun x779 () Int)
(declare-fun x1671 () Int)
(declare-fun x483 () Int)
(declare-fun x400 () Bool)
(declare-fun x445 () Int)
(declare-fun x847 () Int)
(declare-fun x1262 () Int)
(declare-fun x1386 () Int)
(declare-fun x997 () Bool)
(declare-fun x494 () Int)
(declare-fun x1507 () Bool)
(declare-fun x1336 () Int)
(declare-fun x617 () Bool)
(declare-fun x981 () Int)
(declare-fun x921 () Int)
(declare-fun x1820 () Int)
(declare-fun x824 () Bool)
(declare-fun x1776 (x1691) Int)
(declare-fun x1316 () Int)
(declare-fun x1057 () Int)
(declare-fun x1430 (x1691) Int)
(declare-fun x1865 () Bool)
(declare-fun x248 () Int)
(declare-fun x376 () Bool)
(declare-fun x1302 () Bool)
(declare-fun x13 () Bool)
(declare-fun x1847 () Bool)
(declare-fun x154 () Bool)
(declare-fun x761 () Int)
(declare-fun x719 (x1691) Int)
(declare-fun x662 () Int)
(declare-fun x113 () Int)
(declare-fun x656 () Bool)
(declare-fun x1147 () Bool)
(declare-fun x639 () Int)
(declare-fun x657 () Bool)
(declare-fun x807 () Bool)
(declare-fun x616 () Bool)
(declare-fun x29 () Int)
(declare-fun x684 () Bool)
(declare-fun x1636 () Int)
(declare-fun x46 () Int)
(declare-fun x744 () Int)
(declare-fun x1068 () Int)
(declare-fun x1623 () Int)
(declare-fun x233 () Int)
(declare-fun x217 () Int)
(declare-fun x153 () Int)
(declare-fun x1712 () x1691)
(declare-fun x371 () Int)
(declare-fun x1290 () Bool)
(declare-fun x1670 () Int)
(declare-fun x754 () Bool)
(declare-fun x1363 () Int)
(declare-fun x412 () Int)
(declare-fun x96 (x1691) Int)
(declare-fun x258 () Bool)
(declare-fun x1333 () Bool)
(declare-fun x1592 () Bool)
(declare-fun x300 () Int)
(declare-fun x389 () Int)
(declare-fun x1408 () Bool)
(declare-fun x1522 () Bool)
(declare-fun x1609 () Int)
(declare-fun x1293 () Int)
(declare-fun x1453 () x1691)
(declare-fun x1613 () x1691)
(declare-fun x188 () Bool)
(declare-fun x1276 () Int)
(declare-fun x1625 () Int)
(declare-fun x578 () Int)
(declare-fun x1091 () Bool)
(declare-fun x518 (Int) Int)
(declare-fun x1574 () Int)
(declare-fun x803 () Bool)
(declare-fun x956 () Int)
(declare-fun x1342 () Int)
(declare-fun x131 () Int)
(declare-fun x1661 () Bool)
(declare-fun x1226 () Bool)
(declare-fun x1782 () Int)
(declare-fun x757 () Int)
(declare-fun x175 () Int)
(declare-fun x1191 () Int)
(declare-fun x1360 () Bool)
(declare-fun x1815 (x1691) Int)
(declare-fun x564 () Int)
(declare-fun x37 () Int)
(declare-fun x1489 () Bool)
(declare-fun x1840 () Bool)
(declare-fun x491 () x1691)
(declare-fun x26 () Bool)
(declare-fun x612 () Int)
(declare-fun x1517 () Int)
(declare-fun x1172 () Int)
(declare-fun x32 () Int)
(declare-fun x1377 () Bool)
(declare-fun x973 () Bool)
(declare-fun x1364 () Bool)
(declare-fun x433 () Int)
(declare-fun x1214 () Int)
(declare-fun x256 () Int)
(declare-fun x1286 () Int)
(declare-fun x710 () Int)
(declare-fun x796 () Int)
(declare-fun x1610 () Int)
(declare-fun x240 () Int)
(declare-fun x1192 () Bool)
(declare-fun x1731 () Int)
(declare-fun x542 () Int)
(declare-fun x368 (x1691) Int)
(declare-fun x1268 () Bool)
(declare-fun x753 () Int)
(declare-fun x1028 () Int)
(declare-fun x278 () Int)
(declare-fun x1534 () Int)
(declare-fun x537 () Int)
(declare-fun x183 () Bool)
(declare-fun x911 () Int)
(declare-fun x892 () Int)
(declare-fun x1427 () Int)
(declare-fun x1339 () Int)
(declare-fun x222 () Bool)
(declare-fun x381 () Int)
(declare-fun x1181 () Int)
(declare-fun x802 () x1691)
(declare-fun x1079 () Int)
(declare-fun x1772 () Bool)
(declare-fun x173 () Bool)
(declare-fun x1271 () Int)
(declare-fun x1805 () Int)
(declare-fun x621 () Int)
(declare-fun x1666 () x1691)
(declare-fun x555 () Bool)
(declare-fun x618 () Bool)
(declare-fun x519 () Bool)
(declare-fun x167 () Int)
(declare-fun x1746 () Int)
(declare-fun x995 () Bool)
(declare-fun x237 () Int)
(declare-fun x747 () Int)
(declare-fun x919 (x1691) Int)
(declare-fun x228 () Bool)
(declare-fun x1550 () Bool)
(declare-fun x1690 () Int)
(declare-fun x1132 () x1691)
(declare-fun x784 () Int)
(declare-fun x1370 () Int)
(declare-fun x363 () Bool)
(declare-fun x1710 () Bool)
(declare-fun x1414 () Int)
(declare-fun x882 (Int) Int)
(declare-fun x455 () Int)
(declare-fun x794 () Bool)
(declare-fun x1274 () Int)
(declare-fun x793 () Bool)
(declare-fun x1825 () Bool)
(declare-fun x762 () x1691)
(declare-fun x745 () Int)
(declare-fun x1359 () Int)
(declare-fun x1148 () Int)
(declare-fun x1052 () Int)
(declare-fun x1452 () Int)
(declare-fun x646 () Bool)
(declare-fun x626 (x1691) Int)
(declare-fun x552 () Int)
(declare-fun x1651 () Bool)
(declare-fun x1597 () Bool)
(declare-fun x1300 () Bool)
(declare-fun x923 () Int)
(declare-fun x877 () Int)
(declare-fun x536 () Int)
(declare-fun x960 () Int)
(declare-fun x1868 () Bool)
(declare-fun x1301 () Bool)
(declare-fun x1199 () Int)
(declare-fun x422 () Bool)
(declare-fun x902 () Bool)
(declare-fun x825 () Bool)
(declare-fun x1633 () Bool)
(declare-fun x333 () Bool)
(declare-fun x635 () Bool)
(declare-fun x1641 () Bool)
(declare-fun x1257 () Int)
(declare-fun x511 () Int)
(declare-fun x1713 () Bool)
(declare-fun x738 () Bool)
(declare-fun x1783 () Bool)
(declare-fun x166 () Int)
(declare-fun x1787 () Int)
(declare-fun x1022 () Int)
(declare-fun x1374 () Int)
(declare-fun x1058 () Int)
(declare-fun x489 () Int)
(declare-fun x673 () Int)
(declare-fun x362 () Int)
(declare-fun x795 () Bool)
(declare-fun x1829 () Int)
(declare-fun x249 () Int)
(declare-fun x661 () Int)
(declare-fun x380 () Int)
(declare-fun x631 () Bool)
(declare-fun x1664 () Int)
(declare-fun x820 () Int)
(declare-fun x1881 () Int)
(declare-fun x1752 () Bool)
(declare-fun x1521 () Bool)
(declare-fun x593 (Int) Int)
(declare-fun x308 () Bool)
(declare-fun x782 () Int)
(declare-fun x1321 () Bool)
(declare-fun x992 () Bool)
(declare-fun x1185 () Int)
(declare-fun x425 () Int)
(declare-fun x1045 () Int)
(declare-fun x398 () Int)
(declare-fun x174 () Bool)
(declare-fun x180 () Bool)
(declare-fun x667 () Int)
(declare-fun x1496 () Int)
(declare-fun x629 () Int)
(declare-fun x1403 () Int)
(declare-fun x965 () Bool)
(declare-fun x1008 () Int)
(declare-fun x1677 () Bool)
(declare-fun x236 () Int)
(declare-fun x1206 () Bool)
(declare-fun x1612 () Int)
(declare-fun x1246 () Int)
(declare-fun x1779 () Bool)
(declare-fun x571 () Int)
(declare-fun x1503 () Bool)
(declare-fun x1877 () Int)
(declare-fun x1800 () Int)
(declare-fun x1795 () Int)
(declare-fun x280 () x1691)
(declare-fun x1818 () Int)
(declare-fun x1420 () Int)
(declare-fun x1886 () Bool)
(declare-fun x1163 () Int)
(declare-fun x920 () Int)
(declare-fun x914 () Bool)
(declare-fun x1419 () Int)
(declare-fun x1111 () Int)
(declare-fun x1834 () Int)
(declare-fun x440 () Bool)
(declare-fun x1622 () Int)
(declare-fun x1240 () Int)
(declare-fun x538 () Int)
(declare-fun x691 () Bool)
(declare-fun x1213 () Bool)
(declare-fun x957 (x1691) Int)
(declare-fun x1289 () Int)
(declare-fun x637 () Int)
(declare-fun x1538 () Int)
(declare-fun x1335 () Int)
(declare-fun x449 () Int)
(declare-fun x345 () Bool)
(declare-fun x57 (x1691) Int)
(declare-fun x842 () Bool)
(declare-fun x447 () Bool)
(declare-fun x366 () Bool)
(declare-fun x1200 () Bool)
(declare-fun x671 () Bool)
(declare-fun x1476 () Int)
(declare-fun x515 () Int)
(declare-fun x1077 () Int)
(declare-fun x521 () Int)
(declare-fun x580 () Int)
(declare-fun x1051 () Int)
(declare-fun x1621 () Int)
(declare-fun x743 () x1691)
(declare-fun x1244 () Bool)
(declare-fun x850 () Bool)
(declare-fun x1288 () Int)
(declare-fun x767 () Int)
(declare-fun x1448 () Int)
(declare-fun x383 () Int)
(declare-fun x1617 () Bool)
(declare-fun x458 () Int)
(declare-fun x1306 () Bool)
(declare-fun x497 () Int)
(declare-fun x1280 () Int)
(declare-fun x85 () Int)
(declare-fun x19 () Int)
(declare-fun x456 () Int)
(declare-fun x1480 () Int)
(declare-fun x468 () Bool)
(declare-fun x1759 () Bool)
(declare-fun x513 () Int)
(declare-fun x1395 () Int)
(declare-fun x1479 () Int)
(declare-fun x329 () Int)
(declare-fun x1535 () Int)
(declare-fun x1082 () Int)
(declare-fun x1750 () Bool)
(declare-fun x1248 () Bool)
(declare-fun x830 (Int) Int)
(declare-fun x1576 () Int)
(declare-fun x1828 () Int)
(declare-fun x1763 () Int)
(declare-fun x638 () Int)
(declare-fun x773 () Int)
(declare-fun x1888 () Int)
(declare-fun x1338 () Int)
(declare-fun x503 () Int)
(declare-fun x1197 () Bool)
(declare-fun x1264 () Int)
(declare-fun x1547 () Bool)
(declare-fun x1031 () Int)
(declare-fun x1106 () Int)
(declare-fun x292 () Int)
(declare-fun x837 () Bool)
(declare-fun x731 () Bool)
(declare-fun x1755 () Bool)
(declare-fun x1725 () Int)
(declare-fun x1233 () Int)
(declare-fun x1737 () Int)
(declare-fun x197 () Bool)
(declare-fun x707 () Bool)
(declare-fun x328 () Int)
(declare-fun x1180 () Int)
(declare-fun x1644 () Int)
(declare-fun x1858 () Bool)
(declare-fun x581 () Int)
(declare-fun x1001 () Bool)
(declare-fun x1681 () Int)
(declare-fun x1456 () Int)
(declare-fun x1648 () Int)
(declare-fun x1560 () Int)
(declare-fun x473 () Int)
(declare-fun x665 () Int)
(declare-fun x938 () Int)
(declare-fun x123 () Bool)
(declare-fun x1317 () Int)
(declare-fun x535 (Int Int) Int)
(declare-fun x1176 () Bool)
(declare-fun x554 () Bool)
(declare-fun x1114 () Bool)
(declare-fun x378 (x1691) Int)
(declare-fun x20 () Int)
(declare-fun x1012 () Int)
(declare-fun x1228 () Int)
(declare-fun x1554 (Int Int) Int)
(declare-fun x156 () Int)
(declare-fun x117 () Int)
(declare-fun x428 () Int)
(declare-fun x466 () Bool)
(declare-fun x346 () Bool)
(declare-fun x31 () Int)
(declare-fun x890 () Bool)
(declare-fun x1804 () Int)
(declare-fun x1350 () Int)
(declare-fun x778 () Int)
(declare-fun x669 () Bool)
(declare-fun x1728 () Bool)
(declare-fun x1155 () x1691)
(declare-fun x1647 () Bool)
(declare-fun x332 () Int)
(declare-fun x1551 () Int)
(declare-fun x1209 () Bool)
(declare-fun x1564 () Int)
(declare-fun x439 () Int)
(declare-fun x1362 () Int)
(declare-fun x1025 () Bool)
(declare-fun x1658 () Int)
(declare-fun x1645 () Int)
(declare-fun x1714 () Bool)
(declare-fun x395 () Bool)
(declare-fun x1579 () Int)
(declare-fun x737 () Int)
(declare-fun x15 () Int)
(declare-fun x751 () Bool)
(declare-fun x1851 () Int)
(declare-fun x1593 () Bool)
(declare-fun x1081 () Int)
(declare-fun x220 () Int)
(declare-fun x652 () Bool)
(declare-fun x1668 () Int)
(declare-fun x896 () Bool)
(declare-fun x1709 () Int)
(declare-fun x1739 () Bool)
(declare-fun x442 () Bool)
(declare-fun x91 () Bool)
(declare-fun x388 () Bool)
(declare-fun x607 () Int)
(declare-fun x839 () Bool)
(declare-fun x1113 () Int)
(declare-fun x1796 (x1691) Int)
(declare-fun x1629 () Bool)
(declare-fun x808 () Int)
(declare-fun x1396 () Int)
(declare-fun x316 () Int)
(declare-fun x1497 () Bool)
(declare-fun x798 () Int)
(declare-fun x1084 () Int)
(declare-fun x1549 () Int)
(declare-fun x859 () Bool)
(declare-fun x192 () Bool)
(declare-fun x1123 () Bool)
(declare-fun x1291 () Bool)
(declare-fun x1643 () Bool)
(declare-fun x689 () Int)
(declare-fun x1215 () x1691)
(declare-fun x634 () Int)
(declare-fun x229 () Int)
(declare-fun x420 () Bool)
(declare-fun x347 () Int)
(declare-fun x649 () Bool)
(declare-fun x341 () Bool)
(declare-fun x1493 () Bool)
(declare-fun x505 () Int)
(declare-fun x1032 () Int)
(declare-fun x403 (Int) Int)
(declare-fun x317 () Bool)
(declare-fun x894 () Int)
(declare-fun x736 () Int)
(declare-fun x527 () Int)
(declare-fun x927 () Int)
(declare-fun x1465 () Int)
(declare-fun x1683 () Bool)
(declare-fun x835 () Int)
(declare-fun x95 () Int)
(declare-fun x823 () Bool)
(declare-fun x1346 (Int Int) Int)
(declare-fun x1653 () Int)
(declare-fun x1803 () Bool)
(declare-fun x61 () Bool)
(declare-fun x1565 () Bool)
(declare-fun x1484 () Int)
(declare-fun x460 () Bool)
(declare-fun x579 () Bool)
(declare-fun x1133 () Int)
(declare-fun x1577 () Bool)
(declare-fun x1212 () Int)
(declare-fun x213 () Int)
(declare-fun x463 () Bool)
(declare-fun x214 () Int)
(declare-fun x1655 (x1691) Int)
(declare-fun x855 () Int)
(declare-fun x701 () Bool)
(declare-fun x1315 () Bool)
(declare-fun x54 () Bool)
(declare-fun x539 () Int)
(declare-fun x1433 () Bool)
(declare-fun x432 () Int)
(declare-fun x306 () Bool)
(declare-fun x641 () Int)
(declare-fun x1204 () Bool)
(declare-fun x1630 () Bool)
(declare-fun x525 () Int)
(declare-fun x1195 () Bool)
(declare-fun x105 () Int)
(declare-fun x1235 () Int)
(declare-fun x1807 () Bool)
(declare-fun x1426 () Bool)
(declare-fun x1190 () Bool)
(declare-fun x1726 () Bool)
(declare-fun x1221 () x1691)
(declare-fun x1198 () Bool)
(declare-fun x408 () Int)
(declare-fun x1202 () Bool)
(declare-fun x660 () Int)
(declare-fun x1273 () Int)
(declare-fun x1434 () Bool)
(declare-fun x1559 () Int)
(declare-fun x471 () Int)
(declare-fun x755 () Int)
(declare-fun x1570 () Int)
(declare-fun x1295 () Int)
(declare-fun x688 (Int) Int)
(declare-fun x1637 () Int)
(declare-fun x1588 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x1050 () Bool)
(declare-fun x708 () Int)
(declare-fun x1729 () Int)
(declare-fun x321 () Bool)
(declare-fun x367 () Bool)
(declare-fun x783 () Bool)
(declare-fun x14 () Int)
(declare-fun x1348 () Int)
(declare-fun x586 () Bool)
(declare-fun x1320 () Int)
(declare-fun x972 () Int)
(declare-fun x517 () Int)
(declare-fun x44 () Bool)
(declare-fun x1862 () Int)
(declare-fun x296 () Int)
(declare-fun x1571 () Bool)
(declare-fun x283 () Int)
(declare-fun x151 () Int)
(declare-fun x865 () Bool)
(declare-fun x1241 () Bool)
(declare-fun x693 () Int)
(declare-fun x984 () Bool)
(declare-fun x1635 () Int)
(declare-fun x1821 () Int)
(declare-fun x1019 () x1691)
(declare-fun x878 () Int)
(declare-fun x1792 () Bool)
(declare-fun x354 () Bool)
(declare-fun x734 () Int)
(declare-fun x132 () Bool)
(declare-fun x675 () Bool)
(declare-fun x1885 () Bool)
(declare-fun x804 () Int)
(declare-fun x883 () Int)
(declare-fun x1475 () Int)
(declare-fun x572 () Bool)
(declare-fun x942 () Int)
(declare-fun x1405 () Int)
(declare-fun x1788 () Int)
(declare-fun x1432 () Bool)
(declare-fun x714 () Bool)
(declare-fun x1568 () Int)
(declare-fun x1823 () Bool)
(declare-fun x1210 () Int)
(declare-fun x342 () Int)
(declare-fun x190 () Int)
(declare-fun x1000 () Int)
(declare-fun x1741 () Bool)
(declare-fun x310 () Bool)
(declare-fun x1073 () Int)
(declare-fun x1096 () Int)
(declare-fun x443 () Bool)
(declare-fun x1692 () Bool)
(declare-fun x1205 () Bool)
(declare-fun x1337 () Bool)
(declare-fun x60 () Int)
(declare-fun x465 () Bool)
(declare-fun x1532 (x1691) Int)
(declare-fun x1533 () x1691)
(declare-fun x884 () Bool)
(declare-fun x1797 () Bool)
(declare-fun x602 () Bool)
(declare-fun x1837 () Int)
(declare-fun x1006 () Int)
(declare-fun x924 () Bool)
(declare-fun x931 () Bool)
(declare-fun x1275 () Int)
(declare-fun x940 () Int)
(declare-fun x1526 (Int) Int)
(declare-fun x1473 () Bool)
(declare-fun x290 () Int)
(declare-fun x841 () Int)
(declare-fun x1126 () Int)
(declare-fun x1048 () Int)
(declare-fun x364 () Int)
(declare-fun x533 () Bool)
(declare-fun x875 () Bool)
(declare-fun x575 () Int)
(declare-fun x145 () Int)
(declare-fun x427 () Int)
(declare-fun x1492 () Int)
(declare-fun x624 () Int)
(declare-fun x1160 () Bool)
(declare-fun x1067 () Int)
(declare-fun x1105 () Int)
(declare-fun x1326 () Int)
(declare-fun x769 () Int)
(declare-fun x1512 () Bool)
(declare-fun x1238 () Bool)
(declare-fun x82 () Int)
(declare-fun x944 () Int)
(declare-fun x394 () Int)
(declare-fun x1110 () Int)
(declare-fun x255 (x1691) Int)
(declare-fun x1838 () Int)
(declare-fun x1166 () Int)
(declare-fun x34 () Int)
(declare-fun x844 () Bool)
(declare-fun x1003 () Int)
(declare-fun x1470 () Int)
(declare-fun x815 () Bool)
(declare-fun x566 () Bool)
(declare-fun x727 () Bool)
(declare-fun x431 () Int)
(declare-fun x1165 (Int) Int)
(declare-fun x1410 () Bool)
(declare-fun x1319 () Int)
(declare-fun x1461 () Int)
(declare-fun x1011 () Bool)
(declare-fun x588 () Int)
(declare-fun x272 () Int)
(declare-fun x668 () Bool)
(declare-fun x351 () Int)
(declare-fun x1774 () Int)
(declare-fun x1590 () Int)
(declare-fun x989 () x1691)
(declare-fun x791 () Bool)
(declare-fun x246 () Int)
(declare-fun x68 () Int)
(declare-fun x386 () Bool)
(declare-fun x1891 () Bool)
(declare-fun x334 () Bool)
(declare-fun x365 () Bool)
(declare-fun x178 () Bool)
(declare-fun x206 () Bool)
(declare-fun x1351 () Bool)
(declare-fun x1462 () Int)
(declare-fun x119 () Int)
(declare-fun x1014 () Bool)
(declare-fun x969 () Bool)
(declare-fun x69 () Bool)
(declare-fun x437 () Bool)
(declare-fun x1424 () Int)
(declare-fun x568 () Int)
(declare-fun x605 () Bool)
(declare-fun x1857 () Bool)
(declare-fun x993 () Int)
(declare-fun x642 (x1691) Int)
(declare-fun x286 () Bool)
(declare-fun x480 () Int)
(declare-fun x582 () Int)
(declare-fun x77 () Int)
(declare-fun x65 () Bool)
(declare-fun x1421 () Bool)
(declare-fun x1449 () Int)
(declare-fun x1501 () Int)
(declare-fun x302 () Int)
(declare-fun x309 () Int)
(declare-fun x1353 () Bool)
(declare-fun x976 () Bool)
(declare-fun x1230 () Int)
(declare-fun x632 () Bool)
(declare-fun x1124 () Int)
(declare-fun x766 () Bool)
(declare-fun x1217 () Bool)
(declare-fun x24 () Int)
(declare-fun x205 () Int)
(declare-fun x670 () Bool)
(declare-fun x80 () Bool)
(declare-fun x1694 (Int Int) Int)
(declare-fun x1583 () Bool)
(declare-fun x72 () Bool)
(declare-fun x485 () Int)
(declare-fun x906 () Int)
(declare-fun x1182 () Int)
(declare-fun x1477 () Int)
(declare-fun x42 () Bool)
(declare-fun x1536 () Int)
(declare-fun x900 () Bool)
(declare-fun x1520 () Bool)
(declare-fun x963 (x1691) Int)
(declare-fun x1035 () Int)
(declare-fun x1354 () Int)
(declare-fun x115 () Int)
(declare-fun x1083 (Int) Int)
(declare-fun x775 () Bool)
(declare-fun x695 () Int)
(declare-fun x1247 () Bool)
(declare-fun x1732 () Int)
(declare-fun x1561 () Int)
(declare-fun x742 () Int)
(declare-fun x573 () Bool)
(declare-fun x436 () Bool)
(declare-fun x846 () Bool)
(declare-fun x828 () Bool)
(declare-fun x165 () Bool)
(declare-fun x1757 () Bool)
(declare-fun x598 () Int)
(declare-fun x211 () Bool)
(declare-fun x1258 () Int)
(declare-fun x375 () Bool)
(declare-fun x1701 (x1691) Int)
(declare-fun x1188 () Bool)
(declare-fun x267 () Int)
(declare-fun x1418 () Int)
(declare-fun x1693 () Int)
(declare-fun x357 () Bool)
(declare-fun x1367 () Int)
(declare-fun x191 () Int)
(declare-fun x148 () Int)
(declare-fun x1099 () Int)
(declare-fun x478 () Int)
(declare-fun x1513 (x1691) Int)
(declare-fun x1519 () Int)
(declare-fun x155 () Bool)
(declare-fun x1460 () Bool)
(declare-fun x623 () Int)
(declare-fun x323 () Bool)
(declare-fun x2 () Bool)
(declare-fun x780 () Int)
(declare-fun x1441 () Int)
(declare-fun x1059 () Int)
(declare-fun x1848 () Int)
(declare-fun x925 () Int)
(declare-fun x651 () Int)
(declare-fun x768 () Int)
(declare-fun x716 () Int)
(declare-fun x1789 () Int)
(declare-fun x1542 () Int)
(declare-fun x1278 () Int)
(declare-fun x244 () Int)
(declare-fun x264 () Int)
(declare-fun x763 () x1691)
(declare-fun x1156 () Bool)
(declare-fun x1158 () Int)
(declare-fun x1041 () Int)
(declare-fun x470 () Int)
(declare-fun x1842 () Int)
(declare-fun x899 () Int)
(declare-fun x1175 () Int)
(declare-fun x1454 () Bool)
(declare-fun x682 () Int)
(declare-fun x818 (Int) Int)
(declare-fun x416 () Int)
(declare-fun x1053 () Bool)
(declare-fun x949 () Bool)
(declare-fun x1 () Int)
(declare-fun x52 () Bool)
(declare-fun x1784 () Int)
(declare-fun x650 () Bool)
(declare-fun x1318 () Int)
(declare-fun x53 () Bool)
(declare-fun x391 () Int)
(declare-fun x633 () Int)
(declare-fun x1835 () Int)
(declare-fun x1844 () Int)
(declare-fun x158 () Int)
(declare-fun x936 () Int)
(declare-fun x275 () Int)
(declare-fun x1878 () Bool)
(declare-fun x1121 () Int)
(declare-fun x100 () Bool)
(declare-fun x385 () Bool)
(declare-fun x1159 () Bool)
(declare-fun x134 () Int)
(declare-fun x630 () Int)
(declare-fun x1619 () Bool)
(declare-fun x172 () Int)
(declare-fun x1869 () Int)
(declare-fun x1179 (Int) Int)
(declare-fun x814 () Bool)
(declare-fun x1639 () Int)
(declare-fun x1525 () Bool)
(declare-fun x1416 () Int)
(declare-fun x6 (Int) Int)
(declare-fun x1598 () Int)
(declare-fun x1394 () Int)
(declare-fun x1340 () Bool)
(declare-fun x887 () Bool)
(declare-fun x939 () Int)
(declare-fun x297 () Bool)
(declare-fun x1874 () Int)
(declare-fun x549 () Int)
(declare-fun x1044 () Int)
(declare-fun x611 () Bool)
(declare-fun x1715 () Int)
(declare-fun x1445 () Bool)
(declare-fun x326 () Bool)
(declare-fun x601 () Int)
(declare-fun x1135 () Int)
(declare-fun x414 () Int)
(declare-fun x543 () Int)
(declare-fun x1811 () Bool)
(declare-fun x319 () Bool)
(declare-fun x1151 () Int)
(declare-fun x1429 () Int)
(declare-fun x592 () Bool)
(declare-fun x67 () Int)
(declare-fun x435 () Int)
(declare-fun x1211 () Int)
(define-fun x1744 ((x1691 x1691) (x584 Int)) x1691 (ite ((_ is x1660) x1691) (x1660 (x103 x1691) (+ (x709 x1691) x584)) (ite ((_ is x1688) x1691) (x1688 (x873 x1691) (x1504 x1691) (+ x584 (x677 x1691))) (x1773 (+ (x1614 x1691) x584)))))
(define-fun x1591 ((x109 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x109) (>= x109 0)) x109 (- x109 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x774 ((x109 Int)) Int (ite (and (< x109 0) (>= x109 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x109 115792089237316195423570985008687907853269984665640564039457584007913129639936) x109))
(define-fun x522 ((x1356 Int)) Bool (and (<= 0 x1356) (< x1356 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x476 ((x1356 Int)) Bool (and (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1356) x1356) (= x1356 (x304 x1356 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x1836 ((x1356 Int)) Bool (and (= (x304 0 x1356) 0) (= (x304 x1356 0) 0)))
(define-fun x1299 ((x1356 Int)) Bool (= (x304 x1356 x1356) x1356))
(define-fun x1071 ((x1356 Int)) Bool (and (x1299 x1356) (x476 x1356) (x1836 x1356)))
(define-fun x1425 ((x1356 Int) (x1846 Int)) Bool (= (x304 x1846 x1356) (x304 x1356 x1846)))
(define-fun x1444 ((x1356 Int) (x1846 Int)) Bool (and (>= (x304 x1356 x1846) 0) (=> (>= x1846 0) (<= (x304 x1356 x1846) x1846)) (=> (<= 0 x1356) (<= (x304 x1356 x1846) x1356))))
(define-fun x1615 ((x1356 Int) (x1846 Int)) Bool (and (x1444 x1356 x1846) (x1425 x1356 x1846)))
(define-fun x1357 ((x1356 Int)) Bool (= (mod x1356 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x304 x1356 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x1356 32))))
(define-fun x1505 ((x1356 Int)) Bool (and (x1357 x1356) (x1615 x1356 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x1556 ((x1356 Int)) Bool (and (= (x1694 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1356) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1694 x1356 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x909 ((x1356 Int)) Bool (and (= (x1694 0 x1356) x1356) (= (x1694 x1356 0) x1356)))
(define-fun x84 ((x1356 Int)) Bool (= x1356 (x1694 x1356 x1356)))
(define-fun x496 ((x1356 Int)) Bool (and (x909 x1356) (x84 x1356) (x1556 x1356)))
(define-fun x1144 ((x1356 Int) (x1846 Int)) Bool (= (x1694 x1846 x1356) (x1694 x1356 x1846)))
(define-fun x1344 ((x1356 Int) (x1846 Int)) Bool (and (=> (>= x1356 0) (>= (x1694 x1356 x1846) x1356)) (=> (>= x1846 0) (>= (x1694 x1356 x1846) x1846)) (<= (x1694 x1356 x1846) (+ x1846 x1356))))
(define-fun x1673 ((x1356 Int) (x1846 Int)) Bool (and (x1144 x1356 x1846) (x1344 x1356 x1846)))
(define-fun x856 ((x1356 Int)) Bool (= (+ (mod x1356 281474976710656) (x304 x1356 71776119061217280)) (mod x1356 72057594037927936)))
(define-fun x114 ((x1356 Int)) Bool (and (x1615 x1356 71776119061217280) (x856 x1356)))
(define-fun x1018 ((x1356 Int)) Bool (= (+ (mod x1356 95780971304118053647396689196894323976171195136475136) (x304 x1356 6582018229189043197315758676582005330734049138558148258257960960)) (mod x1356 6582018229284824168619876730229402019930943462534319453394436096)))
(define-fun x1584 ((x1356 Int)) Bool (and (x1615 x1356 6582018229189043197315758676582005330734049138558148258257960960) (x1018 x1356)))
(define-fun x421 ((x1356 Int)) Bool (=> (and (<= 0 x1356) (> 2 x1356)) (= 0 (x304 77194726158210796949047323339125271902179989777093709359638389338608753093290 x1356))))
(define-fun x199 ((x1356 Int)) Bool (and (x1615 x1356 77194726158210796949047323339125271902179989777093709359638389338608753093290) (x421 x1356)))
(define-fun x461 ((x1356 Int)) Bool (= (+ (x304 x1356 7237005577325680195743901738874374364099144639582604309003564681041176166400) (mod x1356 6582018229284824168619876730229402019930943462534319453394436096)) (mod x1356 7237005577332262213973186563042994240829374041602535252466099000494570602496)))
(define-fun x276 ((x1356 Int)) Bool (and (x1615 x1356 7237005577325680195743901738874374364099144639582604309003564681041176166400) (x461 x1356)))
(define-fun x1040 ((x1356 Int)) Bool (= (mod x1356 144115188075855872) (+ (x304 x1356 72057594037927936) (mod x1356 72057594037927936))))
(define-fun x937 ((x1356 Int)) Bool (and (x1040 x1356) (x1615 x1356 72057594037927936)))
(define-fun x574 ((x1356 Int)) Bool (= (+ (x304 x1356 144115188075855872) (mod x1356 144115188075855872)) (mod x1356 288230376151711744)))
(define-fun x996 ((x1356 Int)) Bool (and (x1615 x1356 144115188075855872) (x574 x1356)))
(define-fun x499 ((x1356 Int)) Bool (= (mod x1356 576460752303423488) (+ (mod x1356 288230376151711744) (x304 x1356 288230376151711744))))
(define-fun x829 ((x1356 Int)) Bool (and (x1615 x1356 288230376151711744) (x499 x1356)))
(define-fun x1029 ((x1356 Int)) Bool (= (mod x1356 1152921504606846976) (+ (mod x1356 576460752303423488) (x304 x1356 576460752303423488))))
(define-fun x851 ((x1356 Int)) Bool (and (x1029 x1356) (x1615 x1356 576460752303423488)))
(define-fun x361 ((x1356 Int)) Bool (= (+ (x304 x1356 1152921504606846976) (mod x1356 1152921504606846976)) (mod x1356 2305843009213693952)))
(define-fun x547 ((x1356 Int)) Bool (and (x361 x1356) (x1615 x1356 1152921504606846976)))
(define-fun x1873 ((x1356 Int)) Bool (= (mod x1356 83076749736557242056487941267521536) (+ (mod x1356 1208925819614629174706176) (x304 x1356 83076749735348316236873312092815360))))
(define-fun x121 ((x1356 Int)) Bool (and (x1615 x1356 83076749735348316236873312092815360) (x1873 x1356)))
(define-fun x706 ((x1356 Int)) Bool (= (+ (mod x1356 2305843009213693952) (x304 x1356 2305843009213693952)) (mod x1356 4611686018427387904)))
(define-fun x741 ((x1356 Int)) Bool (and (x706 x1356) (x1615 x1356 2305843009213693952)))
(define-fun x1225 ((x1356 Int)) Bool (= (mod x1356 95780971304118053647396689196894323976171195136475136) (+ (mod x1356 374144419156711147060143317175368453031918731001856) (x304 x1356 95406826884961342500336545879718955523139276405473280))))
(define-fun x1267 ((x1356 Int)) Bool (and (x1615 x1356 95406826884961342500336545879718955523139276405473280) (x1225 x1356)))
(define-fun x681 ((x1356 Int)) Bool (= (mod x1356 4) (x304 x1356 3)))
(define-fun x260 ((x1356 Int)) Bool (and (x681 x1356) (x1615 x1356 3)))
(define-fun x1685 ((x1356 Int)) Bool (= (x304 x1356 65535) (mod x1356 65536)))
(define-fun x203 ((x1356 Int)) Bool (and (x1615 x1356 65535) (x1685 x1356)))
(define-fun x1531 ((x1356 Int)) Bool (= (mod x1356 4294967296) (+ (x304 x1356 4294901760) (mod x1356 65536))))
(define-fun x1007 ((x1356 Int)) Bool (and (x1531 x1356) (x1615 x1356 4294901760)))
(define-fun x459 ((x1356 Int)) Bool (= (+ (mod x1356 4294967296) (x304 x1356 281470681743360)) (mod x1356 281474976710656)))
(define-fun x89 ((x1356 Int)) Bool (and (x1615 x1356 281470681743360) (x459 x1356)))
(define-fun x1767 ((x1356 Int)) Bool (= (mod x1356 1208925819614629174706176) (+ (mod x1356 18446744073709551616) (x304 x1356 1208907372870555465154560))))
(define-fun x36 ((x1356 Int)) Bool (and (x1767 x1356) (x1615 x1356 1208907372870555465154560)))
(define-fun x871 ((x1356 Int)) Bool (=> (and (>= x1356 0) (< x1356 2)) (= (x304 38597363079105398474523661669562635951089994888546854679819194669304376546645 x1356) x1356)))
(define-fun x603 ((x1356 Int)) Bool (and (x871 x1356) (x1615 x1356 38597363079105398474523661669562635951089994888546854679819194669304376546645)))
(define-fun x1162 ((x1356 Int)) Bool (= (+ (x304 x1356 4611686018427387904) (mod x1356 4611686018427387904)) (mod x1356 9223372036854775808)))
(define-fun x1697 ((x1356 Int)) Bool (and (x1615 x1356 4611686018427387904) (x1162 x1356)))
(define-fun x1748 ((x1356 Int)) Bool (= (mod x1356 2) (x304 x1356 1)))
(define-fun x608 ((x1356 Int)) Bool (and (x1748 x1356) (x1615 x1356 1)))
(define-fun x126 ((x1356 Int)) Bool (= (x304 x1356 340282366920938463463374607431768211455) (mod x1356 340282366920938463463374607431768211456)))
(define-fun x585 ((x1356 Int)) Bool (and (x126 x1356) (x1615 x1356 340282366920938463463374607431768211455)))
(define-fun x1061 ((x1356 Int)) Bool (= (mod x1356 1461501637330902918203684832716283019655932542976) (x304 x1356 1461501637330902918203684832716283019655932542975)))
(define-fun x1816 ((x1356 Int)) Bool (and (x1615 x1356 1461501637330902918203684832716283019655932542975) (x1061 x1356)))
(define-fun x265 ((x1356 Int)) Bool (= (x304 x1356 1099511627775) (mod x1356 1099511627776)))
(define-fun x647 ((x1356 Int)) Bool (and (x1615 x1356 1099511627775) (x265 x1356)))
(define-fun x836 ((x1563 Int)) Int (ite (= 320 x1563) (ite true 1 0) (x12 x1563)))
(define-fun x1718 ((x1563 Int)) Int (ite (= x1563 512) 114274503271123192386478379219969658730955725740335141578591849194369543307264 (x593 x1563)))
(define-fun x1852 ((x1563 Int)) Int (ite (and (< x1563 (+ 32 512)) (>= x1563 512)) (x1602 (+ (- x1563 512) 0)) (x1718 x1563)))
(define-fun x1785 ((x1563 Int)) Int (ite (= x1563 1888) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x882 x1563)))
(define-fun x1345 ((x1563 Int)) Int (ite (and (> (+ 1888 32) x1563) (>= x1563 1888)) (x518 (+ (- x1563 1888) 0)) (x1785 x1563)))
(define-fun x826 ((x1563 Int)) Int (ite x788 (x1345 x1563) (x1785 x1563)))
(define-fun x195 ((x1563 Int)) Int (ite (= x1563 x1135) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x826 x1563)))
(define-fun x770 ((x1563 Int)) Int (ite (and (>= x1563 x1135) (< x1563 (+ 128 x1135))) (x1281 (+ 0 (- x1563 x1135))) (x195 x1563)))
(define-fun x959 ((x1563 Int)) Int (ite x1713 (x770 x1563) (x195 x1563)))
(define-fun x196 ((x1563 Int)) Int (ite (= x1563 x1327) 33319522905755844115648579779824568340177860977484772657772637282456240652288 (x959 x1563)))
(define-fun x1252 ((x1563 Int)) Int (ite (and (< x1563 (+ x1327 32)) (<= x1327 x1563)) (x1088 (+ 0 (- x1563 x1327))) (x196 x1563)))
(define-fun x498 ((x1563 Int)) Int (ite x1340 (x1252 x1563) (x196 x1563)))
(define-fun x893 ((x1563 Int)) Int (ite x83 (x498 x1563) (x959 x1563)))
(define-fun x1313 ((x1563 Int)) Int (ite (= x273 x1563) 81122015567734080146792821972179436176149904945806215094928935927862165241856 (x893 x1563)))
(define-fun x1443 ((x1563 Int)) Int (ite (= x1563 x1564) x1561 (x1313 x1563)))
(define-fun x331 ((x1563 Int)) Int (ite (and (> (+ x273 32) x1563) (<= x273 x1563)) (x1179 (+ (- x1563 x273) 0)) (x1443 x1563)))
(define-fun x1409 ((x1563 Int)) Int (ite x1138 (x331 x1563) (x1443 x1563)))
(define-fun x1516 ((x1563 Int)) Int (ite x165 (x893 x1563) (ite x783 (x1409 x1563) (x893 x1563))))
(define-fun x239 ((x1563 Int)) Int (ite (= x1563 x432) 81122015567734080146792821972179436176149904945806215094928935927862165241856 (x1516 x1563)))
(define-fun x1819 ((x1563 Int)) Int (ite (= x525 x1563) x1149 (x239 x1563)))
(define-fun x30 ((x1563 Int)) Int (ite (and (< x1563 (+ x432 32)) (>= x1563 x432)) (x242 (+ (- x1563 x432) 0)) (x1819 x1563)))
(define-fun x384 ((x1563 Int)) Int (ite x1797 (x30 x1563) (x1819 x1563)))
(define-fun x230 ((x1563 Int)) Int (ite x1523 (x384 x1563) (x1516 x1563)))
(define-fun x81 ((x1563 Int)) Int (ite (= x1563 x742) 13403848742886913342097769455703835141295138244810201074363856310843329216512 (x230 x1563)))
(define-fun x397 ((x1563 Int)) Int (ite (= x1563 x736) x561 (x81 x1563)))
(define-fun x1582 ((x1563 Int)) Int (ite (and (< x1563 (+ 32 x742)) (>= x1563 x742)) (x171 (+ (- x1563 x742) 0)) (x397 x1563)))
(define-fun x1611 ((x1563 Int)) Int (ite x100 (x1582 x1563) (x397 x1563)))
(define-fun x1203 ((x1563 Int)) Int (ite x1512 (x230 x1563) (x1611 x1563)))
(define-fun x1375 ((x1563 Int)) Int (ite (= x1563 x1431) 13403848742886913342097769455703835141295138244810201074363856310843329216512 (x1203 x1563)))
(define-fun x945 ((x1563 Int)) Int (ite (= x1849 x1563) x561 (x1375 x1563)))
(define-fun x88 ((x1563 Int)) Int (ite (and (<= x1431 x1563) (> (+ 32 x1431) x1563)) (x818 (+ (- x1563 x1431) 0)) (x945 x1563)))
(define-fun x1675 ((x1563 Int)) Int (ite x110 (x88 x1563) (x945 x1563)))
(define-fun x1581 ((x1563 Int)) Int (ite (= x696 x1563) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x1675 x1563)))
(define-fun x1023 ((x1563 Int)) Int (ite (= x283 x1563) x561 (x1581 x1563)))
(define-fun x506 ((x1563 Int)) Int (ite (and (> (+ 32 x696) x1563) (>= x1563 x696)) (x1165 (+ (- x1563 x696) 0)) (x1023 x1563)))
(define-fun x792 ((x1563 Int)) Int (ite x1692 (x506 x1563) (x1023 x1563)))
(define-fun x1620 ((x1563 Int)) Int (ite x1364 (x1203 x1563) (x792 x1563)))
(define-fun x1879 ((x1563 Int)) Int (ite x1186 (x1620 x1563) (x1516 x1563)))
(define-fun x76 ((x1563 Int)) Int (ite x1755 (ite x261 (x1516 x1563) (x1879 x1563)) (x893 x1563)))
(define-fun x1856 ((x1563 Int)) Int (ite (= x1563 x1201) 81122015567734080146792821972179436176149904945806215094928935927862165241856 (x76 x1563)))
(define-fun x983 ((x1563 Int)) Int (ite (= x1563 x812) x1737 (x1856 x1563)))
(define-fun x118 ((x1563 Int)) Int (ite (and (< x1563 (+ 32 x1201)) (>= x1563 x1201)) (x403 (+ (- x1563 x1201) 0)) (x983 x1563)))
(define-fun x1698 ((x1563 Int)) Int (ite x1325 (x118 x1563) (x983 x1563)))
(define-fun x565 ((x1563 Int)) Int (ite (= x1544 x1563) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x1698 x1563)))
(define-fun x1457 ((x1563 Int)) Int (ite (= x1563 x1286) x561 (x565 x1563)))
(define-fun x864 ((x1563 Int)) Int (ite (and (>= x1563 x1544) (< x1563 (+ x1544 32))) (x1867 (+ 0 (- x1563 x1544))) (x1457 x1563)))
(define-fun x1814 ((x1563 Int)) Int (ite x1307 (x864 x1563) (x1457 x1563)))
(define-fun x235 ((x1563 Int)) Int (ite x222 (x1814 x1563) (x1698 x1563)))
(define-fun x1239 ((x1563 Int)) Int (ite (= x1403 x1563) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x235 x1563)))
(define-fun x1254 ((x1563 Int)) Int (ite (= x1563 x1472) x1316 (x1239 x1563)))
(define-fun x752 ((x1563 Int)) Int (ite (and (>= x1563 x1403) (< x1563 (+ x1403 32))) (x688 (+ 0 (- x1563 x1403))) (x1254 x1563)))
(define-fun x1223 ((x1563 Int)) Int (ite x218 (x752 x1563) (x1254 x1563)))
(define-fun x179 ((x1563 Int)) Int (ite x1445 (x1698 x1563) (x1223 x1563)))
(define-fun x703 ((x1563 Int)) Int (ite (= x804 x1563) 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x179 x1563)))
(define-fun x269 ((x1563 Int)) Int (ite (= x820 x1563) x56 (x703 x1563)))
(define-fun x207 ((x1563 Int)) Int (ite (= x97 x1563) x561 (x269 x1563)))
(define-fun x569 ((x1563 Int)) Int (ite (= x1562 x1563) x1496 (x207 x1563)))
(define-fun x71 ((x1563 Int)) Int (ite (= x1106 x1563) x600 (x569 x1563)))
(define-fun x907 ((x1563 Int)) Int (ite (and (>= x1563 x804) (> (+ 96 x804) x1563)) (x1841 (+ 0 (- x1563 x804))) (x71 x1563)))
(define-fun x1161 ((x1563 Int)) Int (ite x307 (x907 x1563) (x71 x1563)))
(define-fun x532 ((x1563 Int)) Int (ite (= x804 x1563) 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x179 x1563)))
(define-fun x86 ((x1563 Int)) Int (ite (= x1563 x877) x56 (x532 x1563)))
(define-fun x1764 ((x1563 Int)) Int (ite (= x1563 x1057) x561 (x86 x1563)))
(define-fun x680 ((x1563 Int)) Int (ite (= x1563 x472) x1496 (x1764 x1563)))
(define-fun x1309 ((x1563 Int)) Int (ite (= x1563 x1427) x1566 (x680 x1563)))
(define-fun x1231 ((x1563 Int)) Int (ite (and (>= x1563 x804) (> (+ 64 x804) x1563)) (x1083 (+ (- x1563 x804) 0)) (x1309 x1563)))
(define-fun x1308 ((x1563 Int)) Int (ite x321 (x1231 x1563) (x1309 x1563)))
(define-fun x22 ((x1563 x1691)) Int (ite x1193 (ite x321 (x1876 x1563) (x975 x1563)) (ite x307 (x1532 x1563) (x975 x1563))))
(define-fun x990 ((x1563 x1691)) Int (ite x1193 (ite x321 (x1883 x1563) (x1404 x1563)) (ite x307 (x368 x1563) (x1404 x1563))))
(define-fun x697 ((x1563 x1691)) Int (ite x1193 (ite x321 (x1616 x1563) (x1513 x1563)) (ite x307 (x1796 x1563) (x1513 x1563))))
(define-fun x908 ((x1563 x1691)) Int (ite x1193 (ite x321 (x982 x1563) (x957 x1563)) (ite x307 (x1573 x1563) (x957 x1563))))
(define-fun x901 ((x1563 Int)) Int (ite x1193 (x1308 x1563) (x1161 x1563)))
(define-fun x756 ((x1563 x1691)) Int (ite x1193 (ite x321 (x563 x1563) (x1815 x1563)) (ite x307 (x378 x1563) (x1815 x1563))))
(define-fun x337 ((x1563 x1691)) Int (ite x1193 (ite x321 (x426 x1563) (x1120 x1563)) (ite x307 (x255 x1563) (x1120 x1563))))
(define-fun x1062 ((x1563 x1691)) Int (ite x1193 (ite x321 (x232 x1563) (x1529 x1563)) (ite x307 (x933 x1563) (x1529 x1563))))
(define-fun x125 ((x1563 Int)) Int (ite (= x1121 x1563) x316 (x901 x1563)))
(define-fun x1263 ((x1563 Int)) Int (ite x1306 (x901 x1563) (x125 x1563)))
(define-fun x1402 ((x1563 x1691)) Int (ite (= x1563 x1221) x744 (x990 x1563)))
(define-fun x225 ((x1563 x1691)) Int (ite x1102 (x1402 x1563) (ite x1641 (x963 x1563) (x1402 x1563))))
(define-fun x259 ((x1563 x1691)) Int (ite (= x1221 x1563) x1142 (x451 x1563)))
(define-fun x1680 ((x1563 x1691)) Int (ite x699 (ite x138 (x451 x1563) (x259 x1563)) (x451 x1563)))
(define-fun x500 ((x1563 x1691)) Int (ite (= x491 x1563) x640 (x1889 x1563)))
(define-fun x980 ((x1563 x1691)) Int (ite x699 (x500 x1563) (x1889 x1563)))
(define-fun x372 ((x1563 x1691)) Int (ite (= x1049 x1563) x1461 (x1430 x1563)))
(define-fun x860 ((x1563 x1691)) Int (ite x699 (ite x1539 (x1430 x1563) (x372 x1563)) (x1430 x1563)))
(define-fun x1027 ((x1563 Int)) Int (ite (= x1563 x1439) (ite x1758 1 0) (x830 x1563)))
(define-fun x1417 ((x1563 Int)) Int (ite (= x1184 x1563) (ite false 1 0) (x546 x1563)))
(define-fun x1686 ((x1563 Int)) Int (ite (= x693 x1563) (ite false 1 0) (x38 x1563)))
(define-fun x1070 ((x1563 Int)) Int (ite (= x1030 x1563) (ite false 1 0) (x1526 x1563)))
(define-fun x950 ((x1563 Int)) Int (ite (= x184 x1563) (ite false 1 0) (x1500 x1563)))
(define-fun x146 ((x1563 Int)) Int (ite (= x153 x1563) (ite false 1 0) (x1761 x1563)))
(define-fun x514 ((x1563 Int)) Int (ite (= x1297 x1563) (ite false 1 0) (x509 x1563)))
(define-fun x636 ((x1563 Int)) Int (ite (= x1030 x1563) (ite x132 1 0) (x1070 x1563)))
(define-fun x1407 ((x1563 Int)) Int (ite (= x153 x1563) (ite x1734 1 0) (x146 x1563)))
(define-fun x1780 ((x1563 Int)) Int (ite (= x184 x1563) (ite x1241 1 0) (x950 x1563)))
(define-fun x1324 ((x1563 Int)) Int (ite (= x1563 x693) (ite x1244 1 0) (x1686 x1563)))
(define-fun x510 ((x1563 Int)) Int (ite (= x1563 x1184) (ite x1460 1 0) (x1417 x1563)))
(define-fun x112 ((x1563 Int)) Int (ite (= x1396 x1563) (ite false 1 0) (x6 x1563)))
(define-fun x1312 ((x1563 Int)) Int (ite (= x1563 x1116) (ite false 1 0) (x251 x1563)))
(define-fun x1397 ((x1563 Int)) Int (ite (= x1601 x1563) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x1263 x1563)))
(define-fun x1708 ((x1563 Int)) Int (ite (= x872 x1563) x780 (x1397 x1563)))
(define-fun x1468 ((x1563 Int)) Int (ite (= x1076 x1563) 0 (x1708 x1563)))
(define-fun x606 ((x1563 Int)) Int (ite (= x843 x1563) x20 (x1468 x1563)))
(define-fun x1721 ((x1563 Int)) Int (ite (= x1482 x1563) x1087 (x606 x1563)))
(define-fun x1038 ((x1563 Int)) Int (ite (= x1563 x1829) x725 (x1721 x1563)))
(define-fun x1595 ((x1563 Int)) Int (ite (= x489 x1563) x1210 (x1038 x1563)))
(define-fun x1440 ((x1563 Int)) Int (ite (= x1563 x1462) x1378 (x1595 x1563)))
(define-fun x502 ((x1563 Int)) Int (ite (= x1684 x1563) x1656 (x1440 x1563)))
(define-fun x335 ((x1563 Int)) Int (ite (= x1563 x918) x1316 (x502 x1563)))
(define-fun x1381 ((x1563 Int)) Int (ite (and (>= x1563 x1601) (> (+ 96 x1601) x1563)) (x43 (+ (- x1563 x1601) 0)) (x335 x1563)))
(define-fun x746 ((x1563 Int)) Int (ite (= x1297 x1563) (ite x1168 1 0) (x514 x1563)))
(define-fun x1605 ((x1563 Int)) Int (ite (= x1396 x1563) (ite true 1 0) (x112 x1563)))
(define-fun x954 ((x1563 Int)) Int (ite x1803 (x1605 x1563) (x112 x1563)))
(define-fun x1845 ((x1563 Int)) Int (ite x1512 (x112 x1563) (x954 x1563)))
(define-fun x1328 ((x1563 Int)) Int (ite x261 (x112 x1563) (ite x1186 (x1845 x1563) (x112 x1563))))
(define-fun x862 ((x1563 Int)) Int (ite (= x1563 x1116) (ite x711 1 0) (x1312 x1563)))
(define-fun x311 ((x1563 Int)) Int (ite x707 (x1852 x1563) (x1718 x1563)))
(define-fun x147 ((x1563 Int)) Int (ite (= x1563 x1107) 42843482417537907389418853573278789540571096229670894296011906432179225231360 (x311 x1563)))
(define-fun x1283 ((x1563 Int)) Int (ite (and (< x1563 (+ 32 x1107)) (>= x1563 x1107)) (x556 (+ 0 (- x1563 x1107))) (x147 x1563)))
(define-fun x5 ((x1563 Int)) Int (ite x1119 (x1283 x1563) (x147 x1563)))
(define-fun x1098 ((x1563 Int)) Int (ite (= x1563 x1670) 13746870577832431119502918424790824578952894330873076301242487731141270831104 (x5 x1563)))
(define-fun x1125 ((x1563 Int)) Int (ite (= x1303 x1563) 52 (x1098 x1563)))
(define-fun x35 ((x1563 Int)) Int (ite (= x1563 x1506) 54 (x1125 x1563)))
(define-fun x48 ((x1563 Int)) Int (ite (= x1563 x1056) 55 (x35 x1563)))
(define-fun x685 ((x1563 Int)) Int (ite (= x1563 x387) (x719 x989) (x48 x1563)))
(define-fun x1385 ((x1563 Int)) Int (ite (= x1563 x733) x1656 (x685 x1563)))
(define-fun x1817 ((x1563 Int)) Int (ite (= x1563 x878) x1128 (x1385 x1563)))
(define-fun x1569 ((x1563 Int)) Int (ite (= x1563 x213) x561 (x1817 x1563)))
(define-fun x903 ((x1563 Int)) Int (ite (= x894 x1563) x1644 (x1569 x1563)))
(define-fun x1064 ((x1563 Int)) Int (ite (= x1563 x58) x339 (x903 x1563)))
(define-fun x1063 ((x1563 Int)) Int (ite (= x1563 x821) x1756 (x1064 x1563)))
(define-fun x1392 ((x1563 Int)) Int (ite (= x1563 x748) (ite x53 1 0) (x1063 x1563)))
(define-fun x898 ((x1563 Int)) Int (ite (= x1563 x511) x961 (x1392 x1563)))
(define-fun x202 ((x1563 Int)) Int (ite (= x1848 x1563) x1746 (x898 x1563)))
(define-fun x7 ((x1563 Int)) Int (ite (= x737 x1563) x929 (x202 x1563)))
(define-fun x1355 ((x1563 Int)) Int (ite (= x505 x1563) x1067 (x7 x1563)))
(define-fun x1663 ((x1563 Int)) Int (ite (= x1555 x1563) x1295 (x1355 x1563)))
(define-fun x528 ((x1563 Int)) Int (ite x1337 (x1381 x1563) (x335 x1563)))
(define-fun x1260 ((x1356 Int)) Bool (=> (and (not (= 31536000 x1356)) (not (= x1356 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x1356 509899769)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1356)) (not (= x1356 114274503271123192386478379219969658730955725740335141578591849194369543307264)) (not (= x1356 2054196882)) (not (= x1356 65535)) (not (= 4611686018427387904 x1356)) (not (= x1356 144115188075855872)) (not (= 274184521717934524641157099916833587349 x1356)) (not (= 3166102818 x1356)) (not (= x1356 1208907372870555465154560)) (not (= 2752887981 x1356)) (not (= 1461501637330902918203684832716283019655932542975 x1356)) (not (= 38597363079105398474523661669562635951089994888546854679819194669304376546645 x1356)) (< 10000 x1356) (not (= 81122015567734080146792821972179436176149904945806215094928935927862165241856 x1356)) (not (= x1356 2630982038)) (not (= x1356 3512598611)) (not (= 18446744073709551615 x1356)) (not (= 13403848742886913342097769455703835141295138244810201074363856310843329216512 x1356)) (not (= x1356 115792089237316195423570985008687907853269984665640564039457584007913129634935)) (not (= 6582018229189043197315758676582005330734049138558148258257960960 x1356)) (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 x1356)) (not (= 1099511627775 x1356)) (not (= x1356 80397878463760440755375692149700041695399247739548614023716483005714108776448)) (not (= x1356 81391198934588725741764901232338779421906459474344603328544298677233738842112)) (not (= 288230376151711744 x1356)) (not (= 2495252898 x1356)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1356)) (not (= 576460752303423488 x1356)) (not (= x1356 1099511627776)) (not (= x1356 95406826884961342500336545879718955523139276405473280)) (not (= 1152921504606846976 x1356)) (not (= x1356 74874610042509929465218460033027201126834042060343647393369405262880053395456)) (not (= 500000000000000000000000000 x1356)) (not (= x1356 50942633119752846454219349998365661925608737367104304655302372697894809501696)) (not (= x1356 18446744073709551616)) (not (= x1356 281470681743360)) (not (= 994519296000000 x1356)) (not (= x1356 4294901760)) (not (= x1356 83076749735348316236873312092815360)) (not (= 13746870577832431119502918424790824578952894330873076301242487731141270831104 x1356)) (not (= 2305843009213693952 x1356)) (not (= 340282366920938463463374607431768211455 x1356)) (not (= 71776119061217280 x1356)) (not (= x1356 4294967296)) (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 x1356)) (not (= 42843482417537907389418853573278789540571096229670894296011906432179225231360 x1356)) (not (= x1356 77194726158210796949047323339125271902179989777093709359638389338608753093290)) (not (= x1356 1000000000000000000000000000)) (not (= 72057594037927936 x1356)) (not (= 33319522905755844115648579779824568340177860977484772657772637282456240652288 x1356)) (not (= x1356 1000000000000000000)) (not (= 1461501637330902918203684832716283019655932542976 x1356)) (not (= 340282366920938463463374607431768211456 x1356)) (not (= x1356 65536))) (not ((_ is x1773) (x819 x1356)))))
(assert (x1071 x140))
(assert (= (x1773 4294901760) (x819 4294901760)))
(assert (x522 x234))
(assert (x203 x939))
(assert (= (and x1352 (not x1530)) x163))
(assert (x522 x1405))
(assert (x522 x1118))
(assert (= (and x79 x415) x165))
(assert (x522 x718))
(assert (= (x719 (x1773 1099511627775)) 1099511627775))
(assert (= (and x646 (not x1074)) x1146))
(assert (= (=> (and (<= x838 65535) (>= 65535 x1559) (= x1414 x912) (< x1559 65536) (<= 0 x838) (= x1560 x1559) (<= 0 x1559) (= x1559 (x1446 x763)) (= x838 x1117) (= x838 (x626 x763)) (> 65536 x838) (= x435 x143)) x1205) x1847))
(assert (x522 x254))
(assert (x522 x351))
(assert (x522 x1275))
(assert (x522 x1610))
(assert (x522 x1760))
(assert (x522 x1362))
(assert (= (and x1353 (not x123)) x1004))
(assert (= x943 (=> (and (or (and (= x985 x545) (not x1247)) (and (and (= x985 1) (< x1596 4294967296)) x1247)) (and (<= x1323 1461501637330902918203684832716283019655932542975) (= x736 (x1591 (+ x742 4))) (= (> x545 0) x1247) (> 1461501637330902918203684832716283019655932542976 x1323) (= x1323 (x322 x1524)) (>= x1323 0) (= (x1744 x1215 1) x1524))) x913)))
(assert (x522 x252))
(assert (= x992 (and x437 (not x795))))
(assert (= (and x1825 x1743) x1421))
(assert (x522 x156))
(assert (x522 x1149))
(assert (x522 x1044))
(assert (= x1617 (or x994 x1095)))
(assert (= (x719 (x1773 80397878463760440755375692149700041695399247739548614023716483005714108776448)) 80397878463760440755375692149700041695399247739548614023716483005714108776448))
(assert (x522 x266))
(assert (x522 x1693))
(assert (x522 x408))
(assert (= (x1773 1099511627776) (x819 1099511627776)))
(assert (x522 x480))
(assert (= x644 (=> (= x804 x1805) x1510)))
(assert (= (x819 33319522905755844115648579779824568340177860977484772657772637282456240652288) (x1773 33319522905755844115648579779824568340177860977484772657772637282456240652288)))
(assert (x522 x517))
(assert (= x1426 (or x327 x1512)))
(assert (x1260 x1012))
(assert (= (x819 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x1773 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x522 x724))
(assert (x522 x1469))
(assert (x522 x427))
(assert (x522 x1608))
(assert (x522 x1560))
(assert (= (and x1747 x1421) x1156))
(assert (x522 x1103))
(assert (x522 x927))
(assert (x522 x1243))
(assert (= x1550 (=> (and (= x689 (x304 38597363079105398474523661669562635951089994888546854679819194669304376546645 x453)) (= (not (= x689 0)) x934)) (and (=> (and (and (= x1410 (ite (not x1017) (= (x304 x133 (x774 (- x133 1))) 0) (not x1017))) (= x1017 (= x133 0)) (= x133 (x304 38597363079105398474523661669562635951089994888546854679819194669304376546645 x453))) x934) (and (=> (and (not x1410) (= x923 x580)) x1147) (=> (and x1410 (and (= x716 38597363079105398474523661669562635951089994888546854679819194669304376546645) (= x767 (x304 x512 x11)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x139) x11) (= x1253 (= 0 x708)) (= x512 (x304 38597363079105398474523661669562635951089994888546854679819194669304376546645 x453)) (= x708 (x1554 x767 2)) (= (x774 (- x512 1)) x139))) (and (=> (and (= 0 x520) x1253) x729) (=> (not x1253) x441))))) (=> (and (= x804 x580) (not x934)) x1510)))))
(assert (x522 x640))
(assert (x522 x725))
(assert (x522 x1414))
(assert (x522 x1564))
(assert (x1071 x1787))
(assert (= (x719 (x1773 18446744073709551616)) 18446744073709551616))
(assert (x1071 1))
(assert (= (+ (x719 x1049) 1) (x719 (x1744 x1049 1))))
(assert (x522 x1649))
(assert (x522 x1518))
(assert (x522 x664))
(assert (= x1192 (=> (and (= x832 (x304 1 x1181)) (= x1565 (not (< 1 x796))) (= (= x832 0) x1485) (= (x1554 x1181 1) x796)) (and (=> (and (= x1157 (ite x1485 1 10)) (= x653 100)) x870) x1565))))
(assert (x522 x1271))
(assert (= (or x54 (and x1627 x824) (and x533 x318)) x699))
(assert (x522 x855))
(assert (x522 x1127))
(assert (x522 x186))
(assert (x522 x283))
(assert (x522 x1326))
(assert (= (x719 (x1773 74874610042509929465218460033027201126834042060343647393369405262880053395456)) 74874610042509929465218460033027201126834042060343647393369405262880053395456))
(assert (= (or (and x168 (not x573)) x632) x914))
(assert (x522 x991))
(assert (x522 x1286))
(assert (x522 x841))
(assert (x522 x296))
(assert (x522 x299))
(assert (=> (>= 10000 x62) (= (x819 x62) (x1773 x62))))
(assert (x522 x182))
(assert (x1071 x718))
(assert (= x227 (=> (and (and (not (or (and (< x948 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x948) true)) (> x948 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= x1067 255) (= x1207 (x1688 (x819 x759) (x1773 56) 0)) (= (x304 1461501637330902918203684832716283019655932542975 x561) x759) (= (x947 x1207) x1067) (>= 1461501637330902918203684832716283019655932542975 x929) (< x1067 256) (not (= 0 x1024)) (= x929 (x311 512)) (= (> x1228 0) x1196) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x683) x148) (= (x1591 (+ x948 31)) x683) (= (x1591 (+ 512 x148)) x1107) (>= x1067 0)) (or (and (= x867 x1228) (not x1196)) (and (and (= 1 x867) (< x1768 4294967296)) x1196))) x1011)))
(assert (= (div x1480 4) (x1554 x1480 2)))
(assert (= x1794 (and x1884 x1454)))
(assert (x522 x810))
(assert (x522 x471))
(assert (x522 x999))
(assert (x522 x786))
(assert (x522 x1338))
(assert (= (x719 (x1773 71776119061217280)) 71776119061217280))
(assert (= x321 (and x508 x1822)))
(assert (= x1100 (and x452 x212)))
(assert (x522 x1472))
(assert (= x1755 (or x409 x1794)))
(assert (x1071 x1645))
(assert (= (x1554 x1181 1) (div x1181 2)))
(assert (= x1340 (and x794 x323)))
(assert (x522 x800))
(assert (x522 x878))
(assert (x522 x868))
(assert (x522 x1603))
(assert (= (x719 (x1773 3166102818)) 3166102818))
(assert (x522 x396))
(assert (x522 x1458))
(assert (x522 x892))
(assert (= 0 (x882 x967)))
(assert (= (+ (x719 x1666) 2) (x719 (x1744 x1666 2))))
(assert (= (=> (and (= (= 0 x1674) x803) (= x536 x1674) (= (x1591 (+ x1626 x1327)) x958) (= (not x803) x1115) (not x355) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x425) x1626) (= x1249 (= 0 x1150)) (= x976 (< 0 x1674)) (= x1674 (x498 x1327)) (= x425 (x1591 (+ 31 x845))) (= x536 (ite x1115 1 0)) (= x182 (x1591 (+ x958 64))) (not x1249) (= x355 (or (> x845 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x845) true) (> 32 x845))))) (and (=> (not x976) x1183) (=> (and x976 (= x182 x389)) x1376))) x360))
(assert (x522 x1848))
(assert (= x1654 (and x1630 x1812)))
(assert (x522 x749))
(assert (x522 x302))
(assert (x522 x798))
(assert (x1071 1208907372870555465154560))
(assert (= (x719 (x1773 340282366920938463463374607431768211456)) 340282366920938463463374607431768211456))
(assert (x522 x524))
(assert (x522 x248))
(assert (x522 x1450))
(assert (x522 x10))
(assert (x522 x1492))
(assert (x522 x46))
(assert (= (x882 x917) 0))
(assert (x522 x1777))
(assert (x522 x1116))
(assert (x522 x832))
(assert (= x407 (and (not x1528) x971)))
(assert (= (and x1410 x1053) x516))
(assert (x1071 38597363079105398474523661669562635951089994888546854679819194669304376546645))
(assert (= x817 (and (not x1583) x669)))
(assert (x522 x1137))
(assert (= (x719 (x1773 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x1615 x1787 x140))
(assert (= (and x1806 (not x876)) x154))
(assert (x522 x721))
(assert (x522 x213))
(assert (= (=> (and (= x1272 (= x1140 0)) (or (not x1272) x1272)) x1759) x1321))
(assert (= (and (not x1793) x501) x1728))
(assert (= 0 (x882 x1096)))
(assert (= (and (not x375) x720) x971))
(assert (x851 x1058))
(assert (x522 x942))
(assert (x522 x538))
(assert (x522 x34))
(assert (x522 x944))
(assert (x522 x1488))
(assert (x522 x1416))
(assert (= (div x1318 1208925819614629174706176) (x1554 x1318 80)))
(assert (= x1102 (and x375 x720)))
(assert (x1260 x561))
(assert (x522 x666))
(assert (x1071 x34))
(assert (= (and x1878 x270) x40))
(assert (= x218 (and x726 x1676)))
(assert (x522 x1331))
(assert (x522 x1067))
(assert (x522 x979))
(assert (x522 x1024))
(assert (x522 x1031))
(assert (= (x719 (x1773 3512598611)) 3512598611))
(assert (x522 x1330))
(assert (= x1880 (and x1459 x941)))
(assert (x1071 71776119061217280))
(assert (x522 x51))
(assert (x1071 x1090))
(assert (= (div x1575 281474976710656) (x1554 x1575 48)))
(assert (= (x819 1152921504606846976) (x1773 1152921504606846976)))
(assert (x1071 x604))
(assert (= (x819 340282366920938463463374607431768211456) (x1773 340282366920938463463374607431768211456)))
(assert (x1071 x1222))
(assert (= (and (not x809) x1473) x1822))
(assert (x522 x747))
(assert (x522 x581))
(assert (= x466 (and (not x1247) x534)))
(assert (x522 x1030))
(assert (= (x1773 18446744073709551615) (x819 18446744073709551615)))
(assert (x522 x399))
(assert (x522 x364))
(assert (= x144 (and x206 x238)))
(assert (x522 x1012))
(assert (x522 x964))
(assert (x522 x1535))
(assert (= x130 (and x516 (not x1253))))
(assert (x996 x1058))
(assert (x522 x389))
(assert (= 2305843009213693952 (x719 (x1773 2305843009213693952))))
(assert (x522 x145))
(assert (x1071 x106))
(assert (x603 x453))
(assert (x522 x1447))
(assert (= (x719 (x1744 x3 3)) (+ 3 (x719 x3))))
(assert (x522 x637))
(assert (= (x1773 115792089237316195423570985008687907853269984665640564039457584007913129634935) (x819 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x522 x1679))
(assert (x522 x710))
(assert (= (x719 (x1773 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x522 x553))
(assert (x1260 x1478))
(assert (x522 x140))
(assert (x522 x1786))
(assert (x608 x162))
(assert (= x39 (=> (and (<= x1191 1099511627775) (= x106 (x1591 (+ 31 x517))) (= (or (> x517 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x517) true) (> 128 x517))) x402) (= (x1889 x491) x1191) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x106) x478) (= x357 (= 0 x1588)) (= x348 (x1591 (+ x393 32))) (= (= x1191 x852) x1400) (not x357) (= (x1591 (+ x1135 x478)) x1127) (>= x1191 0) (= x702 (x959 x348)) (= (x959 x967) x1139) (= x1294 (x959 x1135)) (= (x959 x393) x552) (= x393 (x1591 (+ 32 x1135))) (= (x1591 (+ 32 x348)) x967) (= x852 (x304 1099511627775 x643)) (< x1191 1099511627776) (>= 1099511627775 x1139) (not x402)) (and (=> (and (not x1400) (and (= (= x1406 0) x570) (or (and (= x64 x1442) x570) (and (and (> x705 0) (= (ite x413 1 0) x705) (= x180 (> x987 x747)) (= (> x938 x1517) x1200) (= x1839 (* x1406 x1350)) (= (mod (* x987 x64) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1288) (= x1777 (div x1839 31536000)) (not x1463) (= x1494 (= 0 x64)) (= (x304 340282366920938463463374607431768211455 x598) x1461) (= 1000000000000000000000000000 x1723) (< (* x1350 x1406) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div x1271 1000000000000000000000000000) x598) (= x747 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x64)) (= x1271 (x1591 (+ x1288 500000000000000000000000000))) (= (+ x371 x1723) x987) (= (x774 (- x643 x938)) x1350) (= x1463 (< 340282366920938463463374607431768211455 x598)) (= x371 x1777) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ 1000000000000000000000000000 x1777)) (= x1442 x598) (= (or x1606 x1494) x413) (not x1200) (= (not x180) x1606)) (not x570))))) x9) (=> (and (and (= x666 x1127) (= x673 x1566)) x1400) x392)))))
(assert (x522 x1719))
(assert (= (and x1586 x313) x1790))
(assert (= (x819 1099511627775) (x1773 1099511627775)))
(assert (x522 x1327))
(assert (= (x719 (x1773 7237005577325680195743901738874374364099144639582604309003564681041176166400)) 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (x522 x615))
(assert (x522 x1143))
(assert (= (=> (and (= x1727 x143) (= x1727 (x1591 (+ x292 x273))) (= x267 (x1591 (+ x630 31))) (not x108) (= x108 (= 0 x936)) (not x241) (= (or (and (= true (<= x630 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x630 32)) (> x630 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x241) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x267) x292) (= x1637 x1414) (= x1637 (x1409 x273))) x1847) x1291))
(assert (x522 x1424))
(assert (x522 x1832))
(assert (=> (>= 10000 x740) (= (x1773 x740) (x819 x740))))
(assert (x522 x45))
(assert (= (and x726 (not x1676)) x1823))
(assert (x522 x967))
(assert (= (x719 (x1773 38597363079105398474523661669562635951089994888546854679819194669304376546645)) 38597363079105398474523661669562635951089994888546854679819194669304376546645))
(assert (= (and (not x204) x1497) x1512))
(assert (x522 x256))
(assert (x522 x1635))
(assert (x522 x1568))
(assert (and (= 10000000000000000000000000000000 (x1346 10 31)) (= (x1346 10 32) 100000000000000000000000000000000) (= 1000000000000000000000000000000000000000000 (x1346 10 42)) (= 100000000000000000000000000000000000000000000000000000000000000000000000000 (x1346 10 74)) (= (x1346 10 50) 100000000000000000000000000000000000000000000000000) (= 10000 (x1346 10 4)) (= (x1346 10 68) 100000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 10) 10000000000) (= 10 (x1346 10 1)) (= 1000000000000000000000000000000000000000000000000000000000000000000000000 (x1346 10 72)) (= 1000000000 (x1346 10 9)) (= (x1346 10 20) 100000000000000000000) (= (x1346 10 69) 1000000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 13) 10000000000000) (= (x1346 10 3) 1000) (= 1000000000000000000000000000000000000000000000000000000000000 (x1346 10 60)) (= 100000 (x1346 10 5)) (= 10000000000000000000 (x1346 10 19)) (= 100000000000000000000000000000000000 (x1346 10 35)) (= 100000000000 (x1346 10 11)) (= 1000000000000000000000000000000000000000000000 (x1346 10 45)) (= 1000000000000000000000000000000000000000 (x1346 10 39)) (= (x1346 10 47) 100000000000000000000000000000000000000000000000) (= (x1346 10 15) 1000000000000000) (= 1 (x1346 10 0)) (= (x1346 10 77) 100000000000000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 59) 100000000000000000000000000000000000000000000000000000000000) (= (x1346 10 73) 10000000000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 70) 10000000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 61) 10000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 38) 100000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000 (x1346 10 58)) (= 1000000000000000000000000 (x1346 10 24)) (= 1000000000000 (x1346 10 12)) (= (x1346 10 51) 1000000000000000000000000000000000000000000000000000) (= (x1346 10 55) 10000000000000000000000000000000000000000000000000000000) (= (x1346 10 66) 1000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000 (x1346 10 25)) (= 100000000000000000000000000000000000000000000000000000000 (x1346 10 56)) (= (x1346 10 54) 1000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000 (x1346 10 26)) (= (x1346 10 7) 10000000) (= 100000000000000000000000000000000000000000000000000000000000000000 (x1346 10 65)) (= 10000000000000000000000000000000000000000000 (x1346 10 43)) (= (x1346 10 28) 10000000000000000000000000000) (= (x1346 10 34) 10000000000000000000000000000000000) (= (x1346 10 57) 1000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000 (x1346 10 62)) (= 100000000000000000000000 (x1346 10 23)) (= (x1346 10 29) 100000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000 (x1346 10 53)) (= 100000000 (x1346 10 8)) (= 10000000000000000000000000000000000000000000000000000000000000000000 (x1346 10 67)) (= 100000000000000000000000000000000000000000 (x1346 10 41)) (= 1000000000000000000000000000000000 (x1346 10 33)) (= (x1346 10 71) 100000000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 64) 10000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 2) 100) (= (x1346 10 75) 1000000000000000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 21) 1000000000000000000000) (= (x1346 10 46) 10000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000 (x1346 10 36)) (= 10000000000000000000000000000000000000000 (x1346 10 40)) (= 10000000000000000000000 (x1346 10 22)) (= (x1346 10 17) 100000000000000000) (= 10000000000000000000000000000000000000000000000000 (x1346 10 49)) (= (x1346 10 44) 100000000000000000000000000000000000000000000) (= (x1346 10 30) 1000000000000000000000000000000) (= (x1346 10 27) 1000000000000000000000000000) (= 1000000000000000000 (x1346 10 18)) (= (x1346 10 48) 1000000000000000000000000000000000000000000000000) (= (x1346 10 63) 1000000000000000000000000000000000000000000000000000000000000000) (= (x1346 10 52) 10000000000000000000000000000000000000000000000000000) (= (x1346 10 14) 100000000000000) (= 10000000000000000 (x1346 10 16)) (= 10000000000000000000000000000000000000 (x1346 10 37)) (= (x1346 10 6) 1000000) (= (x1346 10 76) 10000000000000000000000000000000000000000000000000000000000000000000000000000)))
(assert (x522 x393))
(assert (= (x719 (x1773 2630982038)) 2630982038))
(assert (x522 x799))
(assert (x522 x753))
(assert (= x100 (and x534 x1247)))
(assert (= (or x1557 x1100) x270))
(assert (= (x719 (x819 x1464)) x1464))
(assert (x522 x431))
(assert (x522 x424))
(assert (x522 x821))
(assert (x522 x1261))
(assert (= (or x1803 x671) x327))
(assert (x522 x1051))
(assert (x522 x737))
(assert (=> (<= x1033 10000) (= (x819 x1033) (x1773 x1033))))
(assert (= x221 (or x844 x1864)))
(assert (x1260 x473))
(assert (= (or x1481 x1186 x965) x1781))
(assert (= x531 (and x144 x1753)))
(assert (x1007 x939))
(assert (x522 x740))
(assert (x522 x1212))
(assert (x522 x1085))
(assert (= (x1773 281470681743360) (x819 281470681743360)))
(assert (x522 x1438))
(assert (x1071 x267))
(assert (x522 x1022))
(assert (x522 x236))
(assert (x1260 274184521717934524641157099916833587349))
(assert (= (or x221 x1014) x1351))
(assert (x89 x939))
(assert (= (=> (and (or (and (and (= x356 x742) (= x1633 x204)) (not x1633)) (and (and (= x266 (x1591 (+ x356 64))) (= x266 x742) (= 0 x150) (= x204 x1167) (= (x304 1 x1362) x622) (= (not (= 0 x622)) x1167) (= x1362 (x1554 x453 1))) x1633)) (= x1633 (not (= x1152 0)))) x1629) x674))
(assert (= 2495252898 (x719 (x1773 2495252898))))
(assert (x522 x1482))
(assert (= (and x1617 x1503) x282))
(assert (x522 x742))
(assert (= x1743 (and (not x313) x1586)))
(assert (x1071 x1058))
(assert (x522 x1543))
(assert (x522 x987))
(assert (x522 x1189))
(assert (x522 x243))
(assert (x522 x56))
(assert (x522 x1380))
(assert (x522 x214))
(assert (x522 x1232))
(assert (x1260 x1464))
(assert (x522 x1378))
(assert (x522 x381))
(assert (x522 x1561))
(assert (= x526 (and x1208 x731)))
(assert (= x645 (or x1307 x813)))
(assert (= x1677 (and (not x652) x1069)))
(assert (= (or x1514 x562 x1858) x1387))
(assert (x522 x771))
(assert (x522 x1246))
(assert (= (or x1433 x1539) x590))
(assert (x522 x1180))
(assert (= (and (not x922) x363) x228))
(assert (x522 x948))
(assert (= (x1773 81391198934588725741764901232338779421906459474344603328544298677233738842112) (x819 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (x1071 x643))
(assert (= x1316 (x719 (x819 x1316))))
(assert (= x850 (and x646 x1074)))
(assert (= (x719 (x1744 x1173 1)) (+ (x719 x1173) 1)))
(assert (x522 x910))
(assert (x522 x1322))
(assert (x522 x1842))
(assert (x522 x1358))
(assert (x522 x1427))
(assert (x522 x1483))
(assert (x1505 x1320))
(assert (x522 x1869))
(assert (= x1276 (x719 (x819 x1276))))
(assert (= x1193 (or x137 (and (not x1751) x1580))))
(assert (x522 x1829))
(assert (x1505 x106))
(assert (= 72057594037927936 (x719 (x1773 72057594037927936))))
(assert (x522 x1562))
(assert (= 83076749735348316236873312092815360 (x719 (x1773 83076749735348316236873312092815360))))
(assert (x1260 x287))
(assert (= x915 (or x1866 x111)))
(assert (x522 x1105))
(assert (x1260 x1732))
(assert (= (and x713 (not x698)) x305))
(assert (= (and x271 x825) x1803))
(assert (x522 x246))
(assert (x1071 1099511627775))
(assert (x522 x1420))
(assert (= (div x767 4) (x1554 x767 2)))
(assert (x522 x1566))
(assert (x522 x1820))
(assert (x522 x454))
(assert (x522 x4))
(assert (x522 x1805))
(assert (x522 x28))
(assert (x522 x1131))
(assert (x522 x894))
(assert (= x567 (=> (and (and (not x102) (= x102 (> x1133 2)) (= (= 1 x886) x1745)) (or x1745 (and (and (> 340282366920938463463374607431768211456 x1789) (>= x1789 0) (= x1789 (x225 x1221)) (>= 340282366920938463463374607431768211455 x1789)) (not x1745)))) x579)))
(assert (x1071 576460752303423488))
(assert (= (and x1813 x1426) x363))
(assert (x1071 x939))
(assert (x522 x455))
(assert (x522 x97))
(assert (x522 x935))
(assert (x522 x690))
(assert (= (or x268 x223) x1696))
(assert (x1260 x578))
(assert (x522 x1060))
(assert (x522 x1133))
(assert (x522 x1153))
(assert (x1260 x1316))
(assert (x522 x552))
(assert (x522 x485))
(assert (x522 x1230))
(assert (x522 x773))
(assert (x522 x702))
(assert (= x231 (= x1289 0)))
(assert (x522 x624))
(assert (x522 x329))
(assert (x522 x394))
(assert (= (+ 2 (x719 x75)) (x719 (x1744 x75 2))))
(assert (x522 x952))
(assert (x522 x1152))
(assert (x522 x1148))
(assert (= (x719 (x1773 1000000000000000000)) 1000000000000000000))
(assert (x522 x1824))
(assert (x522 x330))
(assert (= (x819 274184521717934524641157099916833587349) (x1773 274184521717934524641157099916833587349)))
(assert (x1071 83076749735348316236873312092815360))
(assert (x522 x133))
(assert (= x1840 (=> (and (and (= (> x1842 0) x1676) (= x1472 (x1591 (+ 4 x1403)))) (or (and x1676 (and (= x974 1) (< x1881 4294967296))) (and (not x1676) (= x974 x1842)))) x1015)))
(assert (x522 x264))
(assert (x522 x852))
(assert (x522 x808))
(assert (x522 x85))
(assert (x522 x564))
(assert (x522 x1121))
(assert (x522 x1172))
(assert (x522 x1871))
(assert (x522 x150))
(assert (x522 x166))
(assert (x522 x782))
(assert (x522 x1279))
(assert (x522 x755))
(assert (= (=> (and (= (x1591 (+ x1544 64)) x659) (= x659 x1403)) x1840) x854))
(assert (x522 x1294))
(assert (x522 x1774))
(assert (x522 x1320))
(assert (= 0 (x882 x158)))
(assert (x522 x561))
(assert (= (=> (and (= x173 (not x1885)) (= (x746 x1297) x68) (= x1168 x173) (= (= x883 0) x1885) (= (= x68 0) x652)) (and (=> (and (not x652) (and (= x1399 (= x1656 x246)) (= (x1591 (+ x558 64)) x1331))) (and (=> (and (= x1331 x1805) x1399) x644) (=> (not x1399) x1183))) (=> (and (and (= x116 (not (= 0 x290))) (= x553 (x1591 (+ 64 x558))) (= 1856 x1809) (= (x304 4611686018427387904 x1058) x290)) x652) (and (=> (and (= x553 x1805) (not x116)) x644) (=> x116 x1183))))) x161))
(assert (x1260 x759))
(assert (x1071 x1180))
(assert (x522 x82))
(assert (x114 x1058))
(assert (= (and x670 x78) x1714))
(assert (x522 x301))
(assert (= (=> (and (= (x1161 x272) x1370) (= x158 (x1591 (+ x804 32))) (= (x1591 (+ 31 x880)) x1222) (= x1031 x1087) (= x1300 (or (and (> 96 x880) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x880) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x880))) (= x10 (x1591 (+ x804 x1394))) (= x1851 x750) (= x31 x10) (not x1343) (= x1851 (x1161 x804)) (= x1394 (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1222)) (= x177 x664) (= x1343 (= 0 x1140)) (= x1370 x1210) (= x732 (= x1851 0)) (= x1031 (x1161 x158)) (= x1593 (not x732)) (= x272 (x1591 (+ 32 x158))) (= (ite x1593 1 0) x750) (= x571 x1851) (not x1300)) x1050) x1759))
(assert (x522 x1136))
(assert (= x730 (and x1248 x142)))
(assert (x522 x1342))
(assert (= (and x1739 (not x934)) x891))
(assert (=> (>= 10000 x473) (= (x1773 x473) (x819 x473))))
(assert (x522 x750))
(assert (x522 x1625))
(assert (x522 x446))
(assert (x522 x275))
(assert (= x274 (and x1042 x1204)))
(assert (x522 x29))
(assert (= (or x1102 x914) x926))
(assert (x522 x1184))
(assert (x522 x1709))
(assert (x522 x523))
(assert (= x437 (or x1722 x730)))
(assert (x522 x537))
(assert (x522 x290))
(assert (x522 x895))
(assert (= (and x577 x1351) x1692))
(assert (x1071 x1682))
(assert (= x1884 (or x250 x992)))
(assert (= (and x858 x1146) x1138))
(assert (x522 x1057))
(assert (= (x819 1000000000000000000000000000) (x1773 1000000000000000000000000000)))
(assert (x1071 4294901760))
(assert (= x870 (=> (and (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x653) x869) (= x1319 x1608) (not x122) (= x1319 (mod (* x1157 x653) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x122 (> x1157 x869))) x80)))
(assert (x522 x1496))
(assert (x1071 281470681743360))
(assert (= x1891 (and x487 x1714)))
(assert (x522 x1379))
(assert (x522 x1501))
(assert (= x686 (and x1530 x1352)))
(assert (x522 x120))
(assert (x522 x694))
(assert (x522 x1151))
(assert (x522 x543))
(assert (x522 x1295))
(assert (x522 x932))
(assert (x522 x194))
(assert (x522 x187))
(assert (x522 x295))
(assert (x522 x294))
(assert (x522 x1462))
(assert (= (and x839 x26) x1352))
(assert (x522 x1465))
(assert (= (=> (and (not x1245) (= (x1591 (+ 32 x373)) x1439) (= (x1591 (+ x1246 32)) x771) (= x1284 (x1591 (+ 32 x940))) (= (x1591 (+ x4 32)) x1332) (= (x1591 (+ x1332 32)) x340) (= (x1591 (+ x1342 64)) x370) (= x1246 (x1591 (+ x1284 32))) (= (x1591 (+ x226 448)) x1877) (= x105 (x1591 (+ 32 x226))) (= x373 (x1591 (+ 32 x66))) (= x453 (x957 x1388)) (= x4 (x1591 (+ x105 32))) (= x1245 (< 2 x1133)) (= x66 (x1591 (+ x771 32))) (= (x1591 (+ x340 32)) x940) (= x902 (= x1496 0)) (<= x453 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (not (= x964 0)) x1758) (= x1342 (x1591 (+ x1877 32))) (<= 0 x453)) (and (=> (and (and (= x1808 x132) (= x1311 x1241) (= x1662 (x304 144115188075855872 x1058)) (= x324 (x1591 (+ x353 32))) (= x1888 (x1591 (+ x309 32))) (= (not x984) x1597) (= (x1591 (+ x1030 32)) x184) (= x544 (not (= 0 x1729))) (= (x304 288230376151711744 x1058) x1422) (= x1460 x596) (= x1145 x1244) (= (x1591 (+ x296 64)) x46) (= (not x358) x1311) (= x1184 (x1591 (+ 32 x1164))) (= (x1591 (+ x324 32)) x1477) (= x172 (x1591 (+ 32 x1477))) (= (x1591 (+ 640 x370)) x296) (= x1808 (not x1833)) (= x778 (x304 1152921504606846976 x1058)) (= x353 (x1591 (+ 32 x582))) (= x672 (x304 72057594037927936 x1058)) (= x1297 (x1591 (+ 32 x153))) (= x1412 (not x544)) (= x1706 (x1591 (+ 32 x172))) (= (not (= 0 x672)) x286) (= x358 (not x178)) (= (< 0 x99) x1383) (= x1734 x766) (= x201 1856) (= (not x286) x650) (= x596 (not x650)) (= (x1591 (+ 32 x1449)) x1164) (= (not x188) x1833) (= (x1591 (+ 32 x184)) x153) (= (x510 x1184) x99) (= x1449 (x1591 (+ x1658 32))) (= x309 (x1591 (+ x1068 32))) (= x1658 (x1591 (+ 32 x1185))) (= (not x1412) x766) (= (not x1597) x1145) (= x1030 (x1591 (+ x693 32))) (= x984 (not (= 0 x1662))) (= (x1591 (+ 32 x370)) x582) (= (x1591 (+ x1706 32)) x1068) (= x1185 (x1591 (+ x1888 32))) (= x1729 (x304 576460752303423488 x1058)) (= x188 (not (= 0 x778))) (= x178 (not (= x1422 0))) (= (x1591 (+ 32 x1184)) x693)) (not x902)) (and (=> (and (and (= (x636 x1030) x93) (= x1669 (x1591 (+ 64 x46))) (= (= x93 0) x670)) x1383) (and (=> (and (and (= (= 0 x835) x487) (= x1078 (x1591 (+ x1669 64))) (= x835 (x1324 x693))) x670) (and (=> (and (and (= (x1780 x184) x23) (= x1525 (> x23 0)) (= (x1591 (+ x1078 64)) x1327)) x487) (and (=> (and (= x1527 (= x1295 0)) x1525) (and (=> (and (and (= x529 (x1591 (+ 64 x1327))) (= x529 x389)) x1527) x1376) (=> (and (and (= x323 (> x277 0)) (or (and (= x277 x1150) (not x323)) (and x323 (and (= 1 x1150) (> 4294967296 x845))))) (not x1527)) x360))) (=> (not x1525) x1183))) (=> (not x487) x1183))) (=> (not x670) x1183))) (=> (not x1383) x1183))) (=> x902 x1183))) x1861))
(assert (= x1066 (and x1400 x420)))
(assert (x522 x1341))
(assert (x522 x621))
(assert (x522 x1372))
(assert (= (and x197 x807) x223))
(assert (= x138 (and x590 x678)))
(assert (x522 x172))
(assert (x522 x229))
(assert (= (x719 (x1773 994519296000000)) 994519296000000))
(assert (x1505 x275))
(assert (= x1080 (=> (and (= (x1591 (+ x85 64)) x1380) (= (= 0 x1110) x1872)) (and (=> (and (not x1872) (and (= (= 0 x667) x155) (= x1465 (x1591 (+ x1380 64))))) (and (=> (and (and (= (x1591 (+ 64 x1465)) x1201) (= x793 (< 1000000000000000000 x497))) (not x155)) (and (=> (not x793) x1183) (=> (and x793 (and (and (= x1737 (ite (= 0 x1052) x1538 x1052)) (= (x1591 (+ 4 x1201)) x812) (= x1583 (< 0 x1166))) (or (and (= x1166 x264) (not x1583)) (and x1583 (and (> 4294967296 x1022) (= 1 x264)))))) x631))) (=> x155 x1183))) (=> x1872 x1183)))))
(assert (x522 x1572))
(assert (x522 x1818))
(assert (x522 x539))
(assert (= x137 (and x1751 x1580)))
(assert (x522 x1135))
(assert (x522 x37))
(assert (x522 x1117))
(assert (x522 x1834))
(assert (= x211 (and x809 x1473)))
(assert (x522 x1451))
(assert (x1071 x162))
(assert (= (and x247 x1527) x1857))
(assert (x496 x1491))
(assert (= 4294901760 (x719 (x1773 4294901760))))
(assert (= (x719 (x1773 81122015567734080146792821972179436176149904945806215094928935927862165241856)) 81122015567734080146792821972179436176149904945806215094928935927862165241856))
(assert (= (x719 (x1773 114274503271123192386478379219969658730955725740335141578591849194369543307264)) 114274503271123192386478379219969658730955725740335141578591849194369543307264))
(assert (=> (>= 10000 x1012) (= (x1773 x1012) (x819 x1012))))
(assert (= (x1773 144115188075855872) (x819 144115188075855872)))
(assert (x522 x978))
(assert (= x1866 (or x679 x40)))
(assert (x522 x1264))
(assert (x522 x418))
(assert (= x1539 (and x570 x1467)))
(assert (x522 x1068))
(assert (x522 x1082))
(assert (x522 x1570))
(assert (= (x819 83076749735348316236873312092815360) (x1773 83076749735348316236873312092815360)))
(assert (x522 x715))
(assert (= (x819 6582018229189043197315758676582005330734049138558148258257960960) (x1773 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x522 x1334))
(assert (x522 x362))
(assert (x522 x1540))
(assert (x522 x300))
(assert (x522 x1386))
(assert (x1071 4611686018427387904))
(assert (x522 x589))
(assert (x522 x1830))
(assert (x522 x281))
(assert (= (x819 7237005577325680195743901738874374364099144639582604309003564681041176166400) (x1773 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (= (and x1745 x926) x897))
(assert (= (or x699 x1066) x164))
(assert (= (or x1713 x1026) x420))
(assert (= (x1773 2054196882) (x819 2054196882)))
(assert (x585 x1682))
(assert (=> (>= 10000 x1316) (= (x819 x1316) (x1773 x1316))))
(assert (= (and x795 x437) x250))
(assert (= (x1554 x1788 32) (div x1788 4294967296)))
(assert (x522 x916))
(assert (= (x719 (x1773 500000000000000000000000000)) 500000000000000000000000000))
(assert (= (and (not x1503) x1617) x79))
(assert (x522 x473))
(assert (= (x1773 31536000) (x819 31536000)))
(assert (x1260 x1149))
(assert (x522 x1371))
(assert (x522 x662))
(assert (x522 x1737))
(assert (x522 x938))
(assert (x1615 x359 x868))
(assert (x522 x598))
(assert (= x1043 (=> (and (or (and (= x1275 x485) (not x577)) (and x577 (and (= x1275 1) (> 4294967296 x1232)))) (and (> 1461501637330902918203684832716283019655932542976 x1625) (>= x1625 0) (= (> x485 0) x577) (= (x1744 x1666 5) x863) (= (x1591 (+ x696 4)) x283) (= x1625 (x136 x863)) (<= x1625 1461501637330902918203684832716283019655932542975))) x1882)))
(assert (x1071 x637))
(assert (= x224 (or x823 x1523)))
(assert (x522 x776))
(assert (x522 x1491))
(assert (x522 x1567))
(assert (= (x535 x789 1) (mod (* x789 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x1071 77194726158210796949047323339125271902179989777093709359638389338608753093290))
(assert (= x1659 (and x1069 x652)))
(assert (= (or x1855 x1880) x174))
(assert (=> (>= 10000 x561) (= (x1773 x561) (x819 x561))))
(assert (x522 x287))
(assert (x522 x748))
(assert (= (x1773 288230376151711744) (x819 288230376151711744)))
(assert (x522 x1305))
(assert (x522 x240))
(assert (= x1631 (and (not x577) x1351)))
(assert (= (div x34 2) (x1554 x34 1)))
(assert (= x591 (or x169 x1193)))
(assert (x522 x1689))
(assert (x522 x1210))
(assert (x522 x1142))
(assert (= x655 (or (and x8 x686) x163)))
(assert (x522 x1682))
(assert (= x110 (and x922 x363)))
(assert (x522 x309))
(assert (x522 x507))
(assert (=> (<= x1149 10000) (= (x819 x1149) (x1773 x1149))))
(assert (= (and x1884 (not x1454)) x409))
(assert (x522 x181))
(assert (= (x1773 95406826884961342500336545879718955523139276405473280) (x819 95406826884961342500336545879718955523139276405473280)))
(assert (x522 x1139))
(assert (x522 x425))
(assert (x522 x622))
(assert (= (x719 (x819 x1732)) x1732))
(assert (x608 x1362))
(assert (= (+ 1 (x719 x1215)) (x719 (x1744 x1215 1))))
(assert (x522 x548))
(assert (x522 x1303))
(assert (x1673 x810 x841))
(assert (x522 x520))
(assert (= (x1773 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x819 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x522 x1574))
(assert (= x632 (and x573 x168)))
(assert (= (x819 2630982038) (x1773 2630982038)))
(assert (= (+ 6 (x719 x1666)) (x719 (x1744 x1666 6))))
(assert (x522 x789))
(assert (x522 x874))
(assert (x522 x906))
(assert (x522 x1461))
(assert (x522 x604))
(assert (= (and x590 (not x678)) x807))
(assert (x522 x456))
(assert (x608 x1181))
(assert (x522 x1361))
(assert (x522 x23))
(assert (x522 x1707))
(assert (x1071 x524))
(assert (x522 x1274))
(assert (x522 x929))
(assert (x1071 340282366920938463463374607431768211455))
(assert (= x823 (and x1801 x326)))
(assert (x522 x1575))
(assert (= (and x1196 x376) x1119))
(assert (= (x819 13746870577832431119502918424790824578952894330873076301242487731141270831104) (x1773 13746870577832431119502918424790824578952894330873076301242487731141270831104)))
(assert (x522 x1849))
(assert (= x18 (=> (and (= x85 x724) (= x497 x193) (= x220 x667) (= x19 x1110) (= x209 x342) (= x1437 x906) (= x32 x1716) (= (x1328 x1396) x1437)) x1080)))
(assert (x522 x1369))
(assert (= x1542 (x719 (x819 x1542))))
(assert (x522 x1690))
(assert (=> (>= 10000 x785) (= (x1773 x785) (x819 x785))))
(assert (x522 x542))
(assert (x522 x1648))
(assert (x522 x759))
(assert (x1615 x512 x11))
(assert (x1071 x329))
(assert (= (=> (and (= (= 0 x1378) x824) (= (x1591 (+ 192 x1127)) x29)) (and (=> (and (and (or (and (not x731) (and (= x986 (mod (* x784 x1621) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1079 x798)) (> x1502 0) (< (* x1742 x986) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x721 (div x320 2)) (= x620 (* x1742 x986)) (= x1219 x1079) (= (or x1408 x627) x1123) (< (+ x581 x721) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x624 x1740)) (= x317 (< x285 x1035)) (= x256 (x1591 (+ 500000000000000000000000000 x1594))) (= (= 0 x702) x1408) (< (* x784 x1621) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x2 (< x249 x702)) (= x784 (x774 (- x1621 1))) (= x1850 x1143) (= x1045 1000000000000000000000000000) (< (+ 1000000000000000000000000000 x527) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1456 (x1591 (+ 500000000000000000000000000 x559))) (= x1509 (* x624 x1740)) (= (div x1214 31536000) x624) (= x1742 (ite (> x1621 2) (x774 (- x1621 2)) 0)) (= x1639 x581) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1143 x1035)) (= x527 (div x1367 31536000)) (= (ite x1389 1 0) x1502) (= x721 x717) (= x831 x798) (= x249 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x702)) (= (ite (> x784 x530) 1 0) x868) (= (or x1775 x423) x1389) (= (* x702 x1621) x1367) (= (= x1621 0) x192) (= (+ x1219 x831) x127) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1621) x530) (< 0 x1220) (= x1850 (* x1621 x784)) (= x581 (+ x1045 x1359)) (= x1274 (div x256 1000000000000000000000000000)) (= (div x1456 1000000000000000000000000000) x1214) (= (= 0 x702) x423) (= (div x1274 994519296000000) x1035) (= x607 0) (= (* x1035 x1143) x320) (= (ite (not x192) 1 0) x359) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x702) x285) (= x1775 (not x317)) (= (mod (* x702 x702) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1594) (= (div x1509 6) x1079) (= x798 (+ x717 x1639)) (= x1359 x527) (= x1574 x127) (= x559 (mod (* x702 x1035) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x627 (not x2)) (= (ite x1123 1 0) x1220) (= x620 x1740) (= x607 (x304 x359 x868)) (< (* x1621 x702) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and x731 (= 1000000000000000000000000000 x1574))) (and (= x1643 (or x1511 x1558)) (= (x1591 (+ 500000000000000000000000000 x962)) x433) (< 0 x167) (= (div x776 1000000000000000000000000000) x1820) (= x801 (= 0 x1623)) (= x1438 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x673)) (= (< x938 x1139) x887) (= x1470 (ite x1643 1 0)) (= x94 (div x433 1000000000000000000000000000)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1623) x1603) (= x1865 (< x1603 x177)) (= x1558 (= x673 0)) (= (not x1865) x1624) (= (not x284) x1511) (< 0 x1470) (= x1621 (x774 (- x938 x1139))) (= x731 (= 0 x1621)) (not x887) (= (ite x1807 1 0) x167) (= x776 (x1591 (+ 500000000000000000000000000 x289))) (= (mod (* x177 x673) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x962) (= (or x801 x1624) x1807) (= (> x177 x1438) x284) (= (mod (* x177 x1623) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x289))) (not x824)) x469) (=> x824 x1176))) x468))
(assert (x1505 x718))
(assert (x522 x1656))
(assert (x522 x1107))
(assert (= (and (not x902) x915) x889))
(assert (= (x719 (x819 x651)) x651))
(assert (x522 x184))
(assert (= (or x1268 x1790) x367))
(assert (x522 x339))
(assert (x522 x449))
(assert (x522 x24))
(assert (and (= (x1346 2 59) 576460752303423488) (= 1180591620717411303424 (x1346 2 70)) (= 47890485652059026823698344598447161988085597568237568 (x1346 2 175)) (= 9444732965739290427392 (x1346 2 73)) (= 5575186299632655785383929568162090376495104 (x1346 2 142)) (= 256 (x1346 2 8)) (= (x1346 2 122) 5316911983139663491615228241121378304) (= (x1346 2 58) 288230376151711744) (= 536870912 (x1346 2 29)) (= (x1346 2 80) 1208925819614629174706176) (= 1048576 (x1346 2 20)) (= (x1346 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x1346 2 143) 11150372599265311570767859136324180752990208) (= (x1346 2 91) 2475880078570760549798248448) (= (x1346 2 61) 2305843009213693952) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x1346 2 242)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x1346 2 236)) (= (x1346 2 128) 340282366920938463463374607431768211456) (= (x1346 2 107) 162259276829213363391578010288128) (= (x1346 2 52) 4503599627370496) (= (x1346 2 96) 79228162514264337593543950336) (= 13164036458569648337239753460458804039861886925068638906788872192 (x1346 2 213)) (= 2 (x1346 2 1)) (= 633825300114114700748351602688 (x1346 2 99)) (= (x1346 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 3064991081731777716716694054300618367237478244367204352 (x1346 2 181)) (= 95780971304118053647396689196894323976171195136475136 (x1346 2 176)) (= (x1346 2 76) 75557863725914323419136) (= (x1346 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x1346 2 183) 12259964326927110866866776217202473468949912977468817408) (= 4398046511104 (x1346 2 42)) (= (x1346 2 53) 9007199254740992) (= (x1346 2 25) 33554432) (= (x1346 2 141) 2787593149816327892691964784081045188247552) (= (x1346 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x1346 2 234)) (= 1 (x1346 2 0)) (= 178405961588244985132285746181186892047843328 (x1346 2 147)) (= (x1346 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x1346 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 730750818665451459101842416358141509827966271488 (x1346 2 159)) (= (x1346 2 139) 696898287454081973172991196020261297061888) (= (x1346 2 5) 32) (= 365375409332725729550921208179070754913983135744 (x1346 2 158)) (= 38685626227668133590597632 (x1346 2 85)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x1346 2 223)) (= (x1346 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x1346 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x1346 2 39) 549755813888) (= 281474976710656 (x1346 2 48)) (= 822752278660603021077484591278675252491367932816789931674304512 (x1346 2 209)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x1346 2 221)) (= 4722366482869645213696 (x1346 2 72)) (= (x1346 2 30) 1073741824) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x1346 2 247)) (= 9671406556917033397649408 (x1346 2 83)) (= (x1346 2 36) 68719476736) (= 34359738368 (x1346 2 35)) (= (x1346 2 26) 67108864) (= (x1346 2 15) 32768) (= (x1346 2 24) 16777216) (= 784637716923335095479473677900958302012794430558004314112 (x1346 2 189)) (= (x1346 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x1346 2 47) 140737488355328) (= (x1346 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x1346 2 19) 524288) (= (x1346 2 54) 18014398509481984) (= 604462909807314587353088 (x1346 2 79)) (= (x1346 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 24519928653854221733733552434404946937899825954937634816 (x1346 2 184)) (= (x1346 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x1346 2 81) 2417851639229258349412352) (= (x1346 2 62) 4611686018427387904) (= (x1346 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 4 (x1346 2 2)) (= (x1346 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x1346 2 119) 664613997892457936451903530140172288) (= 2147483648 (x1346 2 31)) (= (x1346 2 160) 1461501637330902918203684832716283019655932542976) (= (x1346 2 171) 2993155353253689176481146537402947624255349848014848) (= 1427247692705959881058285969449495136382746624 (x1346 2 150)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x1346 2 244)) (= (x1346 2 66) 73786976294838206464) (= (x1346 2 50) 1125899906842624) (= (x1346 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 6427752177035961102167848369364650410088811975131171341205504 (x1346 2 202)) (= 649037107316853453566312041152512 (x1346 2 109)) (= 41538374868278621028243970633760768 (x1346 2 115)) (= (x1346 2 169) 748288838313422294120286634350736906063837462003712) (= 766247770432944429179173513575154591809369561091801088 (x1346 2 179)) (= (x1346 2 110) 1298074214633706907132624082305024) (= 37778931862957161709568 (x1346 2 75)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x1346 2 249)) (= (x1346 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 196159429230833773869868419475239575503198607639501078528 (x1346 2 187)) (= 411376139330301510538742295639337626245683966408394965837152256 (x1346 2 208)) (= 2923003274661805836407369665432566039311865085952 (x1346 2 161)) (= (x1346 2 151) 2854495385411919762116571938898990272765493248) (= (x1346 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 12554203470773361527671578846415332832204710888928069025792 (x1346 2 193)) (= 11417981541647679048466287755595961091061972992 (x1346 2 153)) (= 174224571863520493293247799005065324265472 (x1346 2 137)) (= (x1346 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 2048 (x1346 2 11)) (= 374144419156711147060143317175368453031918731001856 (x1346 2 168)) (= 91343852333181432387730302044767688728495783936 (x1346 2 156)) (= (x1346 2 82) 4835703278458516698824704) (= 10633823966279326983230456482242756608 (x1346 2 123)) (= 49039857307708443467467104868809893875799651909875269632 (x1346 2 185)) (= (x1346 2 16) 65536) (= (x1346 2 135) 43556142965880123323311949751266331066368) (= (x1346 2 133) 10889035741470030830827987437816582766592) (= 19342813113834066795298816 (x1346 2 84)) (= (x1346 2 23) 8388608) (= 144115188075855872 (x1346 2 57)) (= 18889465931478580854784 (x1346 2 74)) (= 154742504910672534362390528 (x1346 2 87)) (= 35184372088832 (x1346 2 45)) (= (x1346 2 166) 93536104789177786765035829293842113257979682750464) (= 83076749736557242056487941267521536 (x1346 2 116)) (= (x1346 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 295147905179352825856 (x1346 2 68)) (= 1099511627776 (x1346 2 40)) (= (x1346 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 170141183460469231731687303715884105728 (x1346 2 127)) (= 81129638414606681695789005144064 (x1346 2 106)) (= 77371252455336267181195264 (x1346 2 86)) (= (x1346 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x1346 2 138) 348449143727040986586495598010130648530944) (= (x1346 2 172) 5986310706507378352962293074805895248510699696029696) (= 10384593717069655257060992658440192 (x1346 2 113)) (= 680564733841876926926749214863536422912 (x1346 2 129)) (= (x1346 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x1346 2 136) 87112285931760246646623899502532662132736) (= (x1346 2 18) 262144) (= (x1346 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 421249166674228746791672110734681729275580381602196445017243910144 (x1346 2 218)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x1346 2 243)) (= 618970019642690137449562112 (x1346 2 89)) (= 2199023255552 (x1346 2 41)) (= (x1346 2 43) 8796093022208) (= (x1346 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x1346 2 162) 5846006549323611672814739330865132078623730171904) (= (x1346 2 7) 128) (= 20769187434139310514121985316880384 (x1346 2 114)) (= 1393796574908163946345982392040522594123776 (x1346 2 140)) (= 151115727451828646838272 (x1346 2 77)) (= 10141204801825835211973625643008 (x1346 2 103)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x1346 2 251)) (= 324518553658426726783156020576256 (x1346 2 108)) (= 89202980794122492566142873090593446023921664 (x1346 2 146)) (= 25108406941546723055343157692830665664409421777856138051584 (x1346 2 194)) (= (x1346 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x1346 2 17) 131072) (= (x1346 2 177) 191561942608236107294793378393788647952342390272950272) (= (x1346 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 22835963083295358096932575511191922182123945984 (x1346 2 154)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x1346 2 239)) (= (x1346 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x1346 2 9) 512) (= (x1346 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 2535301200456458802993406410752 (x1346 2 101)) (= (x1346 2 21) 2097152) (= 274877906944 (x1346 2 38)) (= (x1346 2 28) 268435456) (= (x1346 2 93) 9903520314283042199192993792) (= (x1346 2 105) 40564819207303340847894502572032) (= (x1346 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x1346 2 44) 17592186044416) (= (x1346 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 36028797018963968 (x1346 2 55)) (= (x1346 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x1346 2 131) 2722258935367507707706996859454145691648) (= (x1346 2 98) 316912650057057350374175801344) (= (x1346 2 33) 8589934592) (= (x1346 2 118) 332306998946228968225951765070086144) (= (x1346 2 149) 713623846352979940529142984724747568191373312) (= 20282409603651670423947251286016 (x1346 2 104)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x1346 2 232)) (= (x1346 2 111) 2596148429267413814265248164610048) (= 1329227995784915872903807060280344576 (x1346 2 120)) (= 21778071482940061661655974875633165533184 (x1346 2 134)) (= (x1346 2 12) 4096) (= (x1346 2 60) 1152921504606846976) (= (x1346 2 92) 4951760157141521099596496896) (= (x1346 2 125) 42535295865117307932921825928971026432) (= 166153499473114484112975882535043072 (x1346 2 117)) (= (x1346 2 32) 4294967296) (= (x1346 2 173) 11972621413014756705924586149611790497021399392059392) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x1346 2 225)) (= (x1346 2 164) 23384026197294446691258957323460528314494920687616) (= 5192296858534827628530496329220096 (x1346 2 112)) (= (x1346 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x1346 2 241)) (= 182687704666362864775460604089535377456991567872 (x1346 2 157)) (= (x1346 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 16384 (x1346 2 14)) (= (x1346 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x1346 2 22) 4194304) (= 1361129467683753853853498429727072845824 (x1346 2 130)) (= (x1346 2 90) 1237940039285380274899124224) (= (x1346 2 34) 17179869184) (= (x1346 2 67) 147573952589676412928) (= 22300745198530623141535718272648361505980416 (x1346 2 144)) (= 2251799813685248 (x1346 2 51)) (= 19807040628566084398385987584 (x1346 2 94)) (= (x1346 2 56) 72057594037927936) (= 1024 (x1346 2 10)) (= 23945242826029513411849172299223580994042798784118784 (x1346 2 174)) (= 18446744073709551616 (x1346 2 64)) (= (x1346 2 102) 5070602400912917605986812821504) (= (x1346 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x1346 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x1346 2 100) 1267650600228229401496703205376) (= 64 (x1346 2 6)) (= (x1346 2 97) 158456325028528675187087900672) (= 302231454903657293676544 (x1346 2 78)) (= (x1346 2 37) 137438953472) (= (x1346 2 178) 383123885216472214589586756787577295904684780545900544) (= (x1346 2 49) 562949953421312) (= (x1346 2 132) 5444517870735015415413993718908291383296) (= (x1346 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x1346 2 170) 1496577676626844588240573268701473812127674924007424) (= 52656145834278593348959013841835216159447547700274555627155488768 (x1346 2 215)) (= (x1346 2 63) 9223372036854775808) (= 16 (x1346 2 4)) (= 44601490397061246283071436545296723011960832 (x1346 2 145)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x1346 2 253)) (= 205688069665150755269371147819668813122841983204197482918576128 (x1346 2 207)) (= (x1346 2 188) 392318858461667547739736838950479151006397215279002157056) (= 8 (x1346 2 3)) (= (x1346 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x1346 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x1346 2 13) 8192) (= 2658455991569831745807614120560689152 (x1346 2 121)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x1346 2 210)) (= (x1346 2 148) 356811923176489970264571492362373784095686656) (= 11692013098647223345629478661730264157247460343808 (x1346 2 163)) (= 46768052394588893382517914646921056628989841375232 (x1346 2 165)) (= (x1346 2 27) 134217728) (= (x1346 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x1346 2 152) 5708990770823839524233143877797980545530986496) (= (x1346 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x1346 2 126) 85070591730234615865843651857942052864) (= 21267647932558653966460912964485513216 (x1346 2 124)) (= 2361183241434822606848 (x1346 2 71)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x1346 2 252)) (= (x1346 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x1346 2 155) 45671926166590716193865151022383844364247891968) (= 36893488147419103232 (x1346 2 65)) (= (x1346 2 95) 39614081257132168796771975168) (= 51422017416287688817342786954917203280710495801049370729644032 (x1346 2 205)) (= (x1346 2 69) 590295810358705651712) (= 187072209578355573530071658587684226515959365500928 (x1346 2 167)) (= 70368744177664 (x1346 2 46)) (= 309485009821345068724781056 (x1346 2 88))))
(assert (x522 x736))
(assert (x522 x328))
(assert (x522 x1670))
(assert (x522 x1640))
(assert (x522 x1036))
(assert (x1071 x1540))
(assert (= x1208 (and x1627 (not x824))))
(assert (=> (<= x237 10000) (= (x819 x237) (x1773 x237))))
(assert (x522 x226))
(assert (= x1433 (and (not x570) x1467)))
(assert (x522 x1477))
(assert (=> (<= x1656 10000) (= (x819 x1656) (x1773 x1656))))
(assert (x522 x812))
(assert (x522 x1055))
(assert (= (x1773 71776119061217280) (x819 71776119061217280)))
(assert (= x1630 (and x395 x460)))
(assert (x522 x1674))
(assert (= x726 (or x655 x222)))
(assert (= (and x1434 x1875) x754))
(assert (x522 x1174))
(assert (= (x719 (x819 x302)) x302))
(assert (x1071 3))
(assert (= x1012 (x719 (x819 x1012))))
(assert (x522 x68))
(assert (= (and (not x731) x1208) x1054))
(assert (x522 x11))
(assert (x522 x105))
(assert (x522 x961))
(assert (x522 x1288))
(assert (x522 x1323))
(assert (= (=> (and (= x1566 x1623) (= x640 (x304 1099511627775 x643)) (= x666 x29)) x392) x1176))
(assert (= (=> (and (not x833) (= x662 x1224) (= x833 (< x428 x1610)) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1424) x428) (= (mod (* x1424 x1610) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x662)) x1282) x310))
(assert (x522 x1265))
(assert (x522 x193))
(assert (x522 x1273))
(assert (x522 x162))
(assert (= (x1773 340282366920938463463374607431768211455) (x819 340282366920938463463374607431768211455)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x719 (x1773 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x522 x1003))
(assert (x522 x1382))
(assert (x1260 x1890))
(assert (x522 x1788))
(assert (= (x1554 x453 1) (div x453 2)))
(assert (= (x719 (x1773 281470681743360)) 281470681743360))
(assert (x522 x689))
(assert (= (and x728 x969) x1514))
(assert (x522 x951))
(assert (x522 x1609))
(assert (= (=> (and (= 1 x1289) (> 3 x1133)) x231) x579))
(assert (x522 x20))
(assert (x522 x785))
(assert (x276 x1672))
(assert (x522 x1588))
(assert (= (=> (and (= x1395 x1508) (= x1118 x588) (= x1398 x1130) (= x892 x1705) (= x769 x494)) x1599) x1292))
(assert (x522 x1740))
(assert (x522 x1478))
(assert (x522 x414))
(assert (x522 x1056))
(assert (x1505 x1280))
(assert (= 1000000000000000000000000000 (x719 (x1773 1000000000000000000000000000))))
(assert (= (and (=> (and (and (= 0 x1130) (= x769 0) (= x742 x899) (= x1395 0)) (not x204)) x1160) (=> (and x204 (and (and (<= x446 1099511627775) (>= x446 0) (= x1498 x561) (= x1215 (x1744 x1666 3)) (> 1099511627776 x446) (= x446 (x980 x1215)) (= x876 (= x446 x643))) (or (and (and (< x1441 340282366920938463463374607431768211456) (<= x1441 340282366920938463463374607431768211455) (= (x860 x802) x1441) (= x1441 x1628) (= x802 (x1744 x1666 1)) (<= 0 x1441)) x876) (and (not x876) (and (not x555) (= x233 x1628) (= (+ x1429 x1681) x1609) (= x1229 (x1591 (+ x1447 500000000000000000000000000))) (= x1429 x25) (= x1085 (x860 x1269)) (= (or x656 x419) x61) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1006 x145)) (>= 340282366920938463463374607431768211455 x1085) (= x145 (x774 (- x643 x446))) (>= x1085 0) (= 1000000000000000000000000000 x1681) (= (* x145 x1006) x119) (= x233 (div x1229 1000000000000000000000000000)) (= x555 (< x1517 x446)) (= (ite x61 1 0) x1874) (= x920 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1085)) (>= 340282366920938463463374607431768211455 x1006) (= x1447 (mod (* x1609 x1085) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x419 (= x1085 0)) (= x656 (not x1298)) (= (> x1609 x920) x1298) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x25 1000000000000000000000000000)) (< x1006 340282366920938463463374607431768211456) (= x1006 (x1604 x1269)) (> x1874 0) (>= x1006 0) (< x1085 340282366920938463463374607431768211456) (= (div x119 31536000) x25) (= (x1744 x1666 1) x1269)))))) x943)) x1629))
(assert (x522 x667))
(assert (= x1811 (=> (and (= x578 0) (= x1589 0) (= 0 x964) (= x60 x226) (= x1158 x740)) x1861)))
(assert (= (x719 (x1744 x1093 9)) (+ 9 (x719 x1093))))
(assert (x522 x1559))
(assert (x522 x1211))
(assert (x522 x958))
(assert (x1260 x651))
(assert (x522 x1662))
(assert (x547 x1058))
(assert (= x679 (and x164 (not x900))))
(assert (= (div x779 65536) (x1554 x779 16)))
(assert (x1260 x302))
(assert (x522 x607))
(assert (x522 x582))
(assert (x522 x1699))
(assert (x522 x1182))
(assert (x522 x962))
(assert (= (or x1548 x879) x1497))
(assert (= 18446744073709551615 (x719 (x1773 18446744073709551615))))
(assert (= (x719 (x819 x234)) x234))
(assert (x522 x1638))
(assert (x522 x1538))
(assert (x585 x1154))
(assert (= x318 (or x1054 x526)))
(assert (x1071 x1280))
(assert (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (x719 (x1773 77194726158210796949047323339125271902179989777093709359638389338608753093290))))
(assert (= 65536 (x719 (x1773 65536))))
(assert (= (x719 (x1773 1208907372870555465154560)) 1208907372870555465154560))
(assert (= (x719 (x1773 81391198934588725741764901232338779421906459474344603328544298677233738842112)) 81391198934588725741764901232338779421906459474344603328544298677233738842112))
(assert (= (x719 (x819 x1478)) x1478))
(assert (x522 x391))
(assert (= (x1773 3166102818) (x819 3166102818)))
(assert (x522 x1598))
(assert (x522 x525))
(assert (= x1545 (=> (= (= x1890 0) x846) (and (=> (and (and (= x1568 x1059) (= x1052 0)) x846) x968) (=> (and (not x846) (and (= (x1591 (+ 64 x1059)) x229) (= x295 (x1554 x1469 168)) (= x1577 (= x295 x1890)) (= 1856 x1484) (= (x304 95406826884961342500336545879718955523139276405473280 x1058) x1469))) (and (=> (not x1577) x1183) (=> (and x1577 (and (>= x1172 0) (= x1172 (x57 x1870)) (>= 1461501637330902918203684832716283019655932542975 x1172) (= x229 x1568) (= x1052 x1172) (= (x1688 (x819 x1890) (x1773 55) 0) x1870) (< x1172 1461501637330902918203684832716283019655932542976))) x968)))))))
(assert (x1260 x234))
(assert (x1071 x561))
(assert (x522 x1456))
(assert (x1071 x1635))
(assert (x522 x1154))
(assert (= x723 (and x211 (not x616))))
(assert (= (=> (and (= x1543 (x304 1 x1634)) (= 0 x715) (= x1813 (not (= x1543 0))) (= (x1591 (+ x899 64)) x1431) (= x1634 x453)) (and (=> (and (and (or (and (and (= x1854 1) (< x281 4294967296)) x922) (and (= x1199 x1854) (not x922))) (and (= x1361 (x642 x1155)) (= x922 (< 0 x1199)) (>= 1461501637330902918203684832716283019655932542975 x1361) (< x1361 1461501637330902918203684832716283019655932542976) (>= x1361 0) (= (x1591 (+ 4 x1431)) x1849) (= x1155 (x1744 x1666 6)) (= x350 x561))) x1813) x279) (=> (and (and (= x588 x1431) (= 0 x1705)) (not x1813)) x1292))) x1160))
(assert (= (and x174 (not x1227)) x861))
(assert (x522 x946))
(assert (x522 x1470))
(assert (x1071 1461501637330902918203684832716283019655932542975))
(assert (x1071 x512))
(assert (x522 x62))
(assert (x522 x338))
(assert (x522 x1665))
(assert (x1260 x448))
(assert (x522 x1754))
(assert (= (x719 (x1744 x438 1)) (+ (x719 x438) 1)))
(assert (= (x1773 80397878463760440755375692149700041695399247739548614023716483005714108776448) (x819 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x522 x1578))
(assert (x522 x1471))
(assert (= 0 (x882 x272)))
(assert (x522 x342))
(assert (x522 x1881))
(assert (= x849 (and (not x1827) x1287)))
(assert (x1071 144115188075855872))
(assert (x741 x1058))
(assert (x522 x1058))
(assert (= (x719 (x819 x237)) x237))
(assert (x522 x559))
(assert (x522 x267))
(assert (= (x1773 38597363079105398474523661669562635951089994888546854679819194669304376546645) (x819 38597363079105398474523661669562635951089994888546854679819194669304376546645)))
(assert (x522 x1476))
(assert (= x965 (and (not x1042) x1204)))
(assert (x585 x24))
(assert (= (or x334 x1493 x1156) x691))
(assert (= x442 (and x519 x684)))
(assert (x522 x277))
(assert (= (or x783 x850) x576))
(assert (x522 x1158))
(assert (x522 x835))
(assert (x522 x820))
(assert (= x54 (and x318 (not x533))))
(assert (x522 x1280))
(assert (= (and x1659 (not x116)) x183))
(assert (x522 x651))
(assert (x522 x1596))
(assert (= (x719 (x1773 274184521717934524641157099916833587349)) 274184521717934524641157099916833587349))
(assert (= (x1773 1208907372870555465154560) (x819 1208907372870555465154560)))
(assert (= x713 (or x130 x504)))
(assert (= x9 (=> (= x678 (= 0 x177)) (and (=> (and (and (or (and (and (= x595 (ite x554 1 0)) (= x1534 (x1591 (+ 500000000000000000000000000 x1382))) (= (div x564 31536000) x189) (= (+ x1784 x551) x1242) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x490 x805)) (= (x304 x1479 x637) x1336) (= x1648 (div x1314 2)) (= (mod (* x1416 x1416) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x676) (= x490 (div x808 994519296000000)) (= x1314 (* x805 x490)) (= x1041 (ite (> x1826 2) (x774 (- x1826 2)) 0)) (= x946 x551) (= (mod (* x490 x1416) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1382) (= x1784 x1519) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1108 1000000000000000000000000000)) (= x1101 x117) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1416 x1826)) (= x1363 (* x189 x117)) (= x1237 (not x1360)) (= x1002 (x1591 (+ x676 500000000000000000000000000))) (= x637 (ite (< x773 x157) 1 0)) (= x439 1000000000000000000000000000) (= x454 (+ x33 x439)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1416) x134) (= (div x1863 31536000) x1108) (= (> x1416 x1) x1360) (= x808 (div x1002 1000000000000000000000000000)) (= x1519 (+ x1436 x63)) (= x1187 (ite x1213 1 0)) (< (+ x946 x1519) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x739 (= x1416 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x157 x1826)) (= x773 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1826)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1416) x1) (= (or x1868 x1237) x1213) (= x554 (or x52 x739)) (= (div x1534 1000000000000000000000000000) x564) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1041 x1082)) (= x1242 x1233) (< (+ x454 x1648) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (* x1826 x1416) x1863) (= x1195 (< x134 x490)) (= x454 x63) (= (x774 (- x1826 1)) x157) (= x1336 0) (= x1436 x1648) (= (ite (not x657) 1 0) x1479) (= (* x157 x1826) x772) (= (div x1363 6) x946) (< 0 x595) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x117 x189)) (= x33 x1108) (= x1868 (= x1416 0)) (= (not x1195) x52) (= (mod (* x157 x1826) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1082) (= (= x1826 0) x657) (= x772 x805) (= (* x1041 x1082) x1101) (< 0 x1187)) (not x197)) (and x197 (= 1000000000000000000000000000 x1233))) (and (= (= x1826 0) x197) (not x1592) (= x1592 (> x938 x1517)) (= x1826 (x774 (- x643 x938))))) (not x678)) x649) (=> (and x678 (= x1623 x673)) x468)))))
(assert (x522 x1170))
(assert (x522 x1396))
(assert (x1071 6582018229189043197315758676582005330734049138558148258257960960))
(assert (x522 x148))
(assert (= x760 (or x218 x1823)))
(assert (x522 x1289))
(assert (x522 x200))
(assert (x522 x1890))
(assert (= (+ 3 (x719 x1666)) (x719 (x1744 x1666 3))))
(assert (x1615 x1051 (x774 (- x1051 1))))
(assert (x522 x1374))
(assert (= (and x669 x1583) x1325))
(assert (x522 x160))
(assert (x522 x1185))
(assert (= (x1773 576460752303423488) (x819 576460752303423488)))
(assert (x522 x797))
(assert (= x279 (=> (and (= (= 0 x1452) x1827) (= x1665 (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x329)) (= x1452 (x1675 x1431)) (= (x1591 (+ 31 x281)) x329) (= (= 0 x1854) x1329) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x281) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x281)) (> 32 x281))) x663) (not x663) (not x1329) (= (x1591 (+ x1431 x1665)) x696)) (and (=> (and x1827 (= x1452 x82)) x1043) (=> (and (and (= x1700 (= x187 x643)) (> 1099511627776 x187) (<= x187 1099511627775) (<= 0 x187) (= x187 (x980 x1730)) (= (x1744 x1666 3) x1730)) (not x1827)) (and (=> (and (not x1700) (and (and (> 340282366920938463463374607431768211456 x299) (= (x774 (- x643 x187)) x1358) (<= x349 340282366920938463463374607431768211455) (>= 340282366920938463463374607431768211455 x299) (<= 0 x299) (= (x1404 x613) x299) (= (x1744 x1666 2) x613) (< x349 340282366920938463463374607431768211456) (= (= x1358 0) x443) (>= x349 0) (= (x1680 x613) x349) (= (< x1517 x187) x1735) (not x1735)) (or (and x443 (= 1000000000000000000000000000 x661)) (and (not x443) (and (< (+ 1000000000000000000000000000 x1838) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1618 (* x1358 x299)) (< (* x299 x1358) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (ite (not x1194) 1 0) x1151) (= x1020 (= 0 x299)) (= (* x1791 x1358) x665) (= (ite x1428 1 0) x186) (> x186 0) (= (not x1171) x583) (= x1724 x874) (< (* x1835 x244) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1435 (* x1230 x700)) (= (or x583 x1020) x727) (= 0 x455) (= x1428 (or x806 x1704)) (= x471 x47) (= (mod (* x299 x299) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x480) (= x390 x782) (= x661 x540) (= x1028 x1000) (= (ite x727 1 0) x383) (= x1579 x1838) (= x1835 x665) (= x700 (div x1261 31536000)) (= x1570 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x299)) (= (ite (< x629 x1791) 1 0) x1635) (= x1725 (x1591 (+ x480 500000000000000000000000000))) (> x383 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x252 x507)) (< (* x1358 x1791) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x1591 (+ 500000000000000000000000000 x300)) x1277) (< (+ x782 x1028) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div x1277 1000000000000000000000000000) x1261) (= x1791 (x774 (- x1358 1))) (= x1230 x781) (= (= 0 x1358) x1194) (= x806 (not x997)) (= x1838 (div x1618 31536000)) (= (div x1435 6) x1028) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x874 x471)) (= (+ x1579 x458) x874) (= x471 (div x609 2)) (= x1709 (div x1725 1000000000000000000000000000)) (= x244 (div x1709 994519296000000)) (= 1000000000000000000000000000 x458) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1358) x629) (= x455 (x304 x1151 x1635)) (= x1704 (= 0 x299)) (= (mod (* x299 x244) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x300) (= x252 (ite (> x1358 2) (x774 (- x1358 2)) 0)) (= (< x51 x244) x1171) (< (* x700 x1230) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x390 x1000) x540) (= (* x507 x252) x781) (= (+ x1724 x47) x782) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x299) x51) (= (* x244 x1835) x609) (= x507 (mod (* x1791 x1358) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (< x1570 x299) x997)))))) x1091) (=> (and (and (= (x1744 x1666 2) x1613) (>= 340282366920938463463374607431768211455 x330) (< x330 340282366920938463463374607431768211456) (= (x1680 x1613) x330) (<= 0 x330) (= x330 x1760)) x1700) x16)))))))
(assert (x522 x1222))
(assert (x522 x1652))
(assert (x522 x872))
(assert (= x1268 (and (not x1216) x691)))
(assert (x522 x474))
(assert (x522 x31))
(assert (= x913 (=> (and (and (< (* x481 x1715) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x385 (not x1236)) (= x1190 (or x385 x72)) (> x1451 0) (= x538 (mod (* x396 x1628) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1591 (+ x159 x742)) x382) (= x159 (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1250)) (= (not x1661) x1122) (> x1264 0) (= (= 0 x1628) x72) (= x1236 (> x396 x418)) (= x1296 (ite (not x245) (= x1013 x1890) (not x245))) (not x377) (< x1471 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (* x481 x1715) x151) (= x1122 x711) (= (x1611 x742) x396) (= (div x1843 1000000000000000000000000000) x481) (= x1264 (ite x1190 1 0)) (= x271 (= x1642 0)) (= x377 (or (> x1596 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x1596 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x1596)))) (= x493 0) (not x1037) (= x1348 (+ x493 x628)) (= (= 0 x985) x1037) (= (not x1296) x1661) (= x418 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1628)) (= (x1591 (+ x1596 31)) x1250) (= (x1591 (+ 500000000000000000000000000 x538)) x1843) (= (div x151 x1451) x1471) (= (= 0 x257) x245) (= x628 x1471)) (or (and x271 (= 0 x1317)) (and (and (= x1129 0) (< (* x1667 x1471) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1831 x27) (< x27 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1317 x1587) (= x1668 x27) (= (* x1667 x1471) x1668) (= x328 (x862 x1116)) (= x1587 (+ x1129 x1831)) (= (ite (< 0 x328) x1560 x1642) x1667)) (not x271)))) x486)))
(assert (x522 x340))
(assert (x522 x1390))
(assert (= (=> (and (= x1379 (x1554 x1575 48)) (= (= x278 0) x1537) (= (x1346 10 x1379) x1476) (= (x304 71776119061217280 x1058) x1575) (= x1318 (x304 83076749735348316236873312092815360 x1058)) (= x503 1856) (= (x1554 x1318 80) x278) (= x217 1856)) (and (=> (and (and (= x648 x1763) (= (< x633 x177) x1710) (= x904 (< x416 x960)) (= x1065 (x1591 (+ x1060 64))) (= (mod (* x1566 x177) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x379) (< (+ x648 x552) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x714 (not x1710)) (= x1860 x1401) (< (+ x1401 x351) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x351 x1717) (= (or x1005 x714) x1333) (= x416 (mod (* x278 x1476) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (+ x1717 x1860) x960) (= x160 (x1591 (+ x379 500000000000000000000000000))) (= x552 x557) (= (ite x1333 1 0) x615) (= x1005 (= 0 x1566)) (= x633 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1566)) (= x648 (div x160 1000000000000000000000000000)) (< 0 x615) (= (+ x557 x1763) x351)) (not x1537)) (and (=> x904 x1183) (=> (and (= x1636 x1065) (not x904)) x374))) (=> (and x1537 (= x1060 x1636)) x374))) x1779))
(assert (= (=> (and (not x814) (= (x1814 x1544) x1778) (= x275 (x1591 (+ 31 x1285))) (= x400 (or (and (= true (<= x1285 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x1285 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1285))) (= (= 0 x523) x814) (= (> x1496 x1778) x842) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x275) x1695) (= x1736 (x1591 (+ x214 64))) (= (x1591 (+ x1695 x1544)) x214) (not x400)) (and (=> (not x842) x1183) (=> (and (= x1403 x1736) x842) x1840))) x1301))
(assert (x522 x1403))
(assert (= x828 (or x183 x1290)))
(assert (x522 x191))
(assert (= (x719 (x819 x1149)) x1149))
(assert (= (x719 (x1744 x625 1)) (+ (x719 x625) 1)))
(assert (= 95406826884961342500336545879718955523139276405473280 (x719 (x1773 95406826884961342500336545879718955523139276405473280))))
(assert (x522 x488))
(assert (= x839 (and x701 x1619)))
(assert (= (x719 (x819 x785)) x785))
(assert (x522 x1270))
(assert (x522 x209))
(assert (= (x719 (x1773 576460752303423488)) 576460752303423488))
(assert (= (x819 2495252898) (x1773 2495252898)))
(assert (= x610 (and (not x846) x367)))
(assert (x522 x1729))
(assert (x522 x1732))
(assert (x522 x1110))
(assert (x522 x1277))
(assert (x522 x115))
(assert (x585 x1090))
(assert (x647 x643))
(assert (x522 x1013))
(assert (= x436 (and x926 (not x1745))))
(assert (= (and x645 x842) x222))
(assert (x522 x481))
(assert (x522 x1657))
(assert (x522 x1257))
(assert (x522 x911))
(assert (= (and x1577 x610) x994))
(assert (x522 x1157))
(assert (x522 x1449))
(assert (x522 x1874))
(assert (x522 x470))
(assert (x522 x1096))
(assert (x522 x515))
(assert (= x83 (and x976 x1466)))
(assert (x522 x448))
(assert (x522 x1150))
(assert (= (x1773 65535) (x819 65535)))
(assert (x1505 x683))
(assert (x522 x1401))
(assert (x522 x918))
(assert (x522 x1731))
(assert (= (and x849 (not x1700)) x1522))
(assert (x522 x170))
(assert (x522 x1536))
(assert (x522 x1517))
(assert (= (or x1750 x1138) x783))
(assert (= (=> (and (= x495 (not (> x1334 1))) (= (x304 1 x34) x641) (= (= x641 0) x1384) (= x1334 (x1554 x34 1))) (and (=> (and (= (ite x1384 1 10) x1610) (= 100 x1424)) x310) x495)) x995))
(assert (x522 x769))
(assert (x1071 x425))
(assert (x1071 1152921504606846976))
(assert (x522 x1035))
(assert (= (=> (and (<= 0 x1546) (= (x1688 (x819 x520) (x1773 54) 0) x1515) (> 1461501637330902918203684832716283019655932542976 x785) (= (x1688 (x819 x785) (x1773 52) 0) x1453) (= (not (= 0 x240)) x698) (= x240 (x304 4611686018427387904 x1546)) (<= x1546 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1657 (x1591 (+ 32 x580))) (>= 1461501637330902918203684832716283019655932542975 x785) (>= x785 0) (= x1546 (x1655 x1453)) (= x785 (x1701 x1515))) (and (=> (and x698 (and (= x883 1) (= x246 x785) (= x558 x1657))) x161) (=> (and (not x698) (= x923 x1657)) x1147))) x729))
(assert (x522 x1600))
(assert (= (or x1387 x1306) x941))
(assert (= (x719 (x1773 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x522 x359))
(assert (x1071 x1634))
(assert (x522 x734))
(assert (x522 x512))
(assert (= 13746870577832431119502918424790824578952894330873076301242487731141270831104 (x719 (x1773 13746870577832431119502918424790824578952894330873076301242487731141270831104))))
(assert (x937 x1058))
(assert (x522 x67))
(assert (x1260 x62))
(assert (x522 x1365))
(assert (x522 x312))
(assert (x522 x905))
(assert (= (=> (and (= (x1027 x1439) x394) (= x313 (= 0 x394))) (and (=> (and x313 (= x1636 x1059)) x1545) (=> (and (and (= (not (= x445 0)) x1825) (= x445 (x304 2305843009213693952 x1058)) (= (x1591 (+ x1636 64)) x1131) (= x429 1856)) (not x313)) (and (=> (and (and (not x1109) (= x1109 (> 2 x1379)) (= (x774 (- x1379 2)) x34) (= (= 2 x1379) x1747)) x1825) (and (=> (and (and (= (= 0 (x1694 x1553 x474)) x395) (= (ite (> 32 x34) 1 0) x474) (= x1553 (ite (< x34 78) 1 0))) (not x1747)) (and (=> (and (not x395) (= x1224 (x1346 10 x34))) x1282) (=> (and (= (> x34 1) x1812) x395) (and (=> x1812 x995) (=> (and (and (= x1424 10) (= x1610 1)) (not x1812)) x310))))) (=> (and x1747 (= x1224 1)) x1282))) (=> (not x1825) x1183))))) x374))
(assert (x522 x661))
(assert (x522 x1111))
(assert (= (and (not x155) x635) x1259))
(assert (x522 x1621))
(assert (x522 x1475))
(assert (x1816 x561))
(assert (x522 x398))
(assert (x1071 x868))
(assert (x522 x1317))
(assert (x1260 x237))
(assert (x522 x641))
(assert (= (=> (and (= (not x465) x258) (= x1567 (ite x1188 1 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1760) x175) (= x1887 (mod (* x1452 x1760) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x925 x82) (= x925 (div x1782 1000000000000000000000000000)) (= x344 (= 0 x1760)) (= x465 (> x1452 x175)) (= (x1591 (+ 500000000000000000000000000 x1887)) x1782) (< 0 x1567) (= (or x258 x344) x1188)) x1043) x16))
(assert (x522 x131))
(assert (x522 x700))
(assert (x522 x712))
(assert (x522 x974))
(assert (x522 x805))
(assert (x522 x693))
(assert (x522 x1671))
(assert (x522 x291))
(assert (x522 x1006))
(assert (x36 x939))
(assert (= (or x751 x788) x890))
(assert (= x392 (=> (and (>= x604 0) (= (ite (not x306) (= 0 (x304 x1051 (x774 (- x1051 1)))) (not x306)) x900) (= x391 (x1591 (+ x666 32))) (= (x304 77194726158210796949047323339125271902179989777093709359638389338608753093290 x604) x1051) (= (= x1051 0) x306) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x604) (= x604 (x957 x1388))) (and (=> (and (and (= x191 (x1554 x1480 2)) (= x1699 (x774 (- x1787 1))) (= (= 0 x191) x212) (= (x304 x1787 x140) x1480) (= x1638 77194726158210796949047323339125271902179989777093709359638389338608753093290) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1699) x140) (= (x304 77194726158210796949047323339125271902179989777093709359638389338608753093290 x604) x1787)) x900) (and (=> (not x212) x90) (=> (and (= 0 x881) x212) x1783))) (=> (and (not x900) (and (= x1158 52) (= x60 x391))) x1811)))))
(assert (= x671 (and x825 (not x271))))
(assert (= (and x1875 (not x1434)) x519))
(assert (x522 x406))
(assert (= (x819 509899769) (x1773 509899769)))
(assert (x522 x379))
(assert (=> (>= 10000 x302) (= (x819 x302) (x1773 x302))))
(assert (x522 x804))
(assert (x1071 x787))
(assert (x522 x768))
(assert (= (x1773 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x819 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x522 x1258))
(assert (x522 x1052))
(assert (x1260 x1542))
(assert (= x198 (and x686 (not x8))))
(assert (x522 x601))
(assert (= (x719 (x1744 x107 1)) (+ 1 (x719 x107))))
(assert (x522 x1736))
(assert (= x759 (x719 (x819 x759))))
(assert (x522 x558))
(assert (= 33319522905755844115648579779824568340177860977484772657772637282456240652288 (x719 (x1773 33319522905755844115648579779824568340177860977484772657772637282456240652288))))
(assert (x522 x1349))
(assert (= (or x1552 x59) x1864))
(assert (= x1415 (=> (and (or x1751 (not x1751)) (= x1751 (= 0 x1821))) x617)))
(assert (= x707 (and x440 x1368)))
(assert (x522 x1854))
(assert (x522 x444))
(assert (x522 x324))
(assert (x522 x124))
(assert (x522 x638))
(assert (= (=> (and (or (and x1459 (= 0 x780)) (and (not x1459) (and (> 340282366920938463463374607431768211456 x1671) (= x1671 x780) (= x1671 (x22 x1533)) (>= 340282366920938463463374607431768211455 x1671) (>= x1671 0) (= (x1744 x107 1) x1533)))) (and (= x704 (or x208 x1520)) (= (not x1726) x208) (= x1601 (x1591 (+ x194 288))) (= (mod (* x1566 x664) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x262) (= x1726 (> x664 x910)) (= (x304 6582018229189043197315758676582005330734049138558148258257960960 x1058) x1273) (= (div x1687 1000000000000000000000000000) x725) (<= x1177 1461501637330902918203684832716283019655932542975) (< 0 x248) (= x194 (x1591 (+ x1121 128))) (= x1687 (x1591 (+ 500000000000000000000000000 x262))) (= x1520 (= 0 x1566)) (= x910 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1566)) (= x248 (ite x704 1 0)) (= x1459 (= 0 x113)) (= (x1744 x75 1) x107) (= (x337 x107) x1177) (>= x1177 0) (= x113 (x1554 x1273 176)) (= x757 1856) (> 1461501637330902918203684832716283019655932542976 x1177) (= (ite (> x1810 0) x1496 0) x20))) x1702) x675))
(assert (x522 x676))
(assert (= 42843482417537907389418853573278789540571096229670894296011906432179225231360 (x719 (x1773 42843482417537907389418853573278789540571096229670894296011906432179225231360))))
(assert (x522 x1276))
(assert (= (x1554 x708 2) (div x708 4)))
(assert (x522 x1667))
(assert (= x1248 (or x261 x1781)))
(assert (x522 x113))
(assert (x522 x917))
(assert (= (=> (and (= x1551 x769) (= x1395 x1348) (= x1130 x1317) (= x953 0) (= x1126 x1136) (= x1136 x1495) (= x401 (x862 x1116)) (= x1871 (ite (< 0 x401) x1117 x1152)) (= x899 x382) (= (+ x953 x1126) x1551) (= (* x1471 x1871) x1495) (< x1136 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1471 x1871))) x1160) x486))
(assert (x522 x623))
(assert (= x376 (or x152 x707)))
(assert (= (and x1146 (not x858)) x1750))
(assert (x522 x1464))
(assert (x522 x233))
(assert (= x1287 (or x110 x228)))
(assert (x522 x55))
(assert (=> (<= x287 10000) (= (x819 x287) (x1773 x287))))
(assert (x522 x940))
(assert (x1615 x133 (x774 (- x133 1))))
(assert (x1505 x1180))
(assert (= (or x1445 x422) x1739))
(assert (x522 x1235))
(assert (x522 x648))
(assert (x522 x445))
(assert (x522 x1480))
(assert (x522 x733))
(assert (x522 x177))
(assert (x522 x1394))
(assert (x522 x1285))
(assert (x522 x1645))
(assert (x1071 x1112))
(assert (=> (<= x1464 10000) (= (x819 x1464) (x1773 x1464))))
(assert (x522 x1163))
(assert (= x469 (=> (and (or (and (not x533) (and (= (x304 340282366920938463463374607431768211455 x1682) x364) (>= 340282366920938463463374607431768211455 x1682) (not x21) (= (> x855 340282366920938463463374607431768211455) x21) (= x1786 (div x1731 1000000000000000000000000000)) (= (= x1442 0) x977) (= (x96 x762) x537) (= (x774 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x236)) x1731) (= x791 (not x92)) (= (not x70) x92) (= x1170 0) (<= 0 x537) (= x753 x1016) (< x537 340282366920938463463374607431768211456) (= x70 (< x1786 x1393)) (>= 340282366920938463463374607431768211455 x537) (= x537 x972) (= (or x791 x977) x1202) (= x1170 (ite x1202 1 0)) (= x855 (div x998 x1442)) (= (mod (* 1000000000000000000000000000 x1393) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x450) (= x762 (x1744 x75 2)) (= (x1591 (+ x932 x450)) x998) (= (div x1442 2) x236) (= x1682 (+ x972 x1016)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x753 x537)) (= x753 (x304 340282366920938463463374607431768211455 x855)) (= (div x1442 2) x932))) x533) (and (not x1238) (= x365 (= 0 x1378)) (= x1585 (not x1373)) (= (div x1153 1000000000000000000000000000) x95) (= x1175 x1820) (= x1153 (x1591 (+ x1749 500000000000000000000000000))) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x1574) x1754) (= (< x484 x94) x1238) (> x398 0) (= (= x1393 0) x533) (= (ite x931 1 0) x398) (= x692 (= 0 x1574)) (= x1749 (mod (* x1574 x1294) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x638 (x1591 (+ 5000 x568))) (= x1770 (ite x388 1 0)) (> x1770 0) (= x931 (or x1489 x365)) (= x1488 (x774 (- x542 x95))) (= x41 x552) (not x1650) (= (> x1488 x1255) x366) (= x1489 (not x366)) (= (div x638 10000) x1393) (= (+ x1175 x41) x484) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x1378) x1255) (= x1650 (< x542 x95)) (= (> x1294 x1754) x1373) (= x388 (or x692 x1585)) (< (+ x1820 x552) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x568 (mod (* x1378 x1488) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x774 (- x484 x94)) x542))) x1176)))
(assert (x522 x600))
(assert (x585 x524))
(assert (x522 x1081))
(assert (x522 x1140))
(assert (= x989 (x819 (x719 x989))))
(assert (x1673 x1341 x1491))
(assert (x522 x1191))
(assert (= (x1773 1461501637330902918203684832716283019655932542975) (x819 1461501637330902918203684832716283019655932542975)))
(assert (= x169 (or (and x1474 (not x1272)) x91)))
(assert (= (x819 500000000000000000000000000) (x1773 500000000000000000000000000)))
(assert (x522 x15))
(assert (x522 x1084))
(assert (x522 x866))
(assert (x1260 x740))
(assert (x522 x467))
(assert (= (x1773 4294967296) (x819 4294967296)))
(assert (x522 x575))
(assert (= 4611686018427387904 (x719 (x1773 4611686018427387904))))
(assert (x522 x716))
(assert (= x561 (x719 (x819 x561))))
(assert (= x1290 (and x1677 x1399)))
(assert (x522 x1851))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (x719 (x1773 115792089237316195423570985008687907853269984665640564039457584007913129634935))))
(assert (=> (>= 10000 x1890) (= (x1773 x1890) (x819 x1890))))
(assert (x1505 x1250))
(assert (x522 x1725))
(assert (= (x719 (x1773 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x522 x278))
(assert (x522 x1393))
(assert (= x441 (=> (= x1762 (= 0 (x1554 x708 2))) (and (=> (= 1 x520) x729) x1762))))
(assert (x522 x1214))
(assert (x522 x1705))
(assert (= (and x1822 (not x508)) x65))
(assert (= x794 (and x247 (not x1527))))
(assert (x203 x1058))
(assert (= (and (not x765) x760) x422))
(assert (=> (>= 10000 x1276) (= (x1773 x1276) (x819 x1276))))
(assert (= 509899769 (x719 (x1773 509899769))))
(assert (x522 x1634))
(assert (= (and x501 x1793) x1797))
(assert (x585 x1112))
(assert (x522 x1843))
(assert (x522 x1086))
(assert (= x1702 (=> (and (or (and (and (= 1 x1774) (< x513 4294967296)) x1227) (and (= x1774 x1707) (not x1227))) (and (= x1482 (x1591 (+ 32 x843))) (= (x1591 (+ 32 x1076)) x843) (= (x1591 (+ 32 x1829)) x489) (= (x1591 (+ x1462 32)) x1684) (= x1076 (x1591 (+ x872 32))) (= (x1591 (+ x1482 32)) x1829) (= x1227 (> x1707 0)) (= (x1591 (+ x1684 32)) x918) (= x1462 (x1591 (+ x489 32))) (= x872 (x1591 (+ 4 x1601))))) x1178)))
(assert (= x101 (=> (= (= 0 x964) x308) (and (=> x308 x675) (=> (and (not x308) (and (= (< x848 2) x1678) (= x848 (x1554 x1859 48)) (= x969 (= x848 2)) (not x1678) (= (x304 71776119061217280 x1058) x1859) (= 1856 x999) (= (x774 (- x848 2)) x1181))) (and (=> (and (= x1608 1) x969) x80) (=> (and (not x969) (and (= (ite (> 78 x1181) 1 0) x1341) (= x1491 (ite (< x1181 32) 1 0)) (= x238 (= 0 (x1694 x1341 x1491))))) (and (=> (and (not x238) (= x1608 (x1346 10 x1181))) x80) (=> (and x238 (= (< 1 x1181) x1753)) (and (=> (and (not x1753) (and (= 10 x653) (= 1 x1157))) x870) (=> x1753 x1192)))))))))))
(assert (=> (>= 10000 x234) (= (x1773 x234) (x819 x234))))
(assert (= (or x65 x321) x1580))
(assert (x522 x1318))
(assert (= x1445 (and (not x457) x1197)))
(assert (= (=> (and (= x315 (= 0 x431)) (= x623 x31) (= (x1591 (+ 32 x804)) x483) (not x1310) (= (x1591 (+ x156 31)) x1320) (= x431 (x1308 x804)) (= (or (and (= (<= x156 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 64 x156)) (> x156 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x815) (= x1366 (ite x386 1 0)) (= x1087 x552) (= (x1591 (+ x135 x804)) x623) (= x664 x1689) (not x815) (= x431 x1366) (= x431 x571) (= (not x315) x386) (= x702 x1210) (= x1689 (x1308 x483)) (= x135 (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1320)) (= (= 0 x1821) x1310)) x1050) x617))
(assert (= (x819 1000000000000000000) (x1773 1000000000000000000)))
(assert (x522 x350))
(assert (x522 x257))
(assert (= (and (not x323) x794) x1315))
(assert (= x1627 (or x1696 x138)))
(assert (= x1306 (and x308 x1711)))
(assert (x522 x432))
(assert (x522 x1234))
(assert (x522 x117))
(assert (= x501 (or x1004 (and x1801 (not x326)))))
(assert (x522 x936))
(assert (x522 x1555))
(assert (x522 x314))
(assert (x522 x189))
(assert (= (or x305 x924) x1302))
(assert (= (and x452 (not x212)) x1557))
(assert (x522 x175))
(assert (= (and x440 (not x1368)) x152))
(assert (x522 x219))
(assert (x522 x1134))
(assert (x522 x1716))
(assert (= x1353 (and (not x1423) x274)))
(assert (= (=> (and (= x1503 (= x453 0)) (= (x1591 (+ 160 x1568)) x548)) (and (=> (and (not x1503) (and (= (x1591 (+ x434 32)) x1690) (= x332 (x1591 (+ x190 32))) (= (x1591 (+ x515 32)) x362) (= (x1591 (+ x1235 32)) x1396) (= (x1591 (+ 32 x410)) x190) (= x1390 (x1591 (+ 32 x332))) (= (x1591 (+ x1243 32)) x128) (= (x1591 (+ x1396 32)) x1116) (= x515 (x1591 (+ x1690 32))) (= x1235 (x1591 (+ 32 x128))) (= x1032 (x1591 (+ 32 x1541))) (= x1243 (x1591 (+ 32 x362))) (= x410 (x1591 (+ 32 x847))) (= x847 (x1591 (+ x690 32))) (= x273 (x1591 (+ x548 608))) (= (x1591 (+ x1032 32)) x430) (= (x1591 (+ x1390 32)) x434) (= x690 (x1591 (+ x430 32))) (= (x1591 (+ x548 32)) x1541) (= x415 (= x1890 0)))) (and (=> (and (not x415) (and (= (x1688 (x819 x1890) (x1773 55) 0) x763) (<= x1561 1461501637330902918203684832716283019655932542975) (= (= x1561 0) x1074) (= x1561 (x57 x763)) (<= 0 x1561) (< x1561 1461501637330902918203684832716283019655932542976))) (and (=> (and (and (or (and (and (= x936 1) (> 4294967296 x630)) x858) (and (= x936 x1047) (not x858))) (and (= x858 (< 0 x1047)) (= (x1591 (+ x273 4)) x1564))) (not x1074)) x1291) (=> (and (and (= x273 x143) (= 0 x1414)) x1074) x1847))) (=> (and (and (= 0 x912) (= 0 x1117) (= x273 x435) (= x1560 0)) x415) x1205))) (=> (and (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x497) (= 0 x342) (= 0 x1110) (= x906 0) (= 0 x32) (= 0 x667) (= x548 x85)) x1503) x1080))) x968))
(assert (= (x719 (x819 x1371)) x1371))
(assert (x585 x166))
(assert (= (or (and x1677 (not x1399)) (and x645 (not x842)) (and x78 (not x670)) (and x155 x635) (and (not x976) x1466) (and (not x1525) x1891) (and x765 x760) (and (not x684) x519) (and x904 x599) (and x1104 (not x49)) (and (not x1577) x610) (and (not x26) x839) (and x1216 x691) (and x1659 x116) (and x889 (not x1383)) (and x1259 (not x793)) (and (not x487) x1714) (and x915 x902) (and x1872 x738) (and x1743 (not x1825)) (and (not x1619) x701) (and x69 x865)) x253))
(assert (x522 x1228))
(assert (x522 x1787))
(assert (= x1014 (and x1287 x1827)))
(assert (x522 x262))
(assert (x522 x993))
(assert (x522 x1544))
(assert (= (=> (and (= (x304 340282366920938463463374607431768211455 x524) x744) (= x1112 (x528 x917)) (not x475) (= (= x905 0) x375) (= x1347 (< 340282366920938463463374607431768211455 x166)) (= (= x1774 0) x1771) (= (or (> x513 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x513 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 96 x513))) x1039) (= x477 (< 340282366920938463463374607431768211455 x524)) (= x166 (x528 x1601)) (= (x1591 (+ x1601 32)) x917) (not x477) (not x1039) (not x1347) (= x524 (x528 x1096)) (= (x1591 (+ x917 32)) x1096) (= x475 (< 340282366920938463463374607431768211455 x1112)) (not x1771) (= (x304 340282366920938463463374607431768211455 x166) x1262) (= (x304 340282366920938463463374607431768211455 x1112) x1518)) (and (=> x375 x567) (=> (and (and (or (and x1528 (and (> 4294967296 x749) (= (<= x1766 (x1776 (x819 x302))) x618) x541 (= x1766 (x697 (x819 x302))) x618 (= x541 (= (x1776 (x819 x1316)) x1048)) (= x1048 (x697 (x819 x1316))))) (not x1528)) (and (not x463) (= (> x181 0) x1528) (= (= 0 x1649) x463) (= x1649 (x919 (x819 x1316))))) (not x375)) x816))) x1178))
(assert (x608 x1634))
(assert (x522 x966))
(assert (= x973 (=> (and (= (x1591 (+ x1240 31)) x1280) (not x42) (= x417 x1715) (= x1097 x356) (= x611 (= x406 0)) (= (or (and (> 32 x1240) (= true (<= x1240 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x1240 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x42) (= x1097 (x1591 (+ x1338 x432))) (= (x384 x432) x417) (not x611) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1280) x1338)) x674)))
(assert (= (x1773 2305843009213693952) (x819 2305843009213693952)))
(assert (x522 x435))
(assert (x522 x1108))
(assert (= (=> (and (or (and (and (> x19 0) (= x1305 x220) (= (div x55 x19) x1305)) (not x142)) (and x142 (= 0 x220))) (= (= x19 0) x142)) x857) x1892))
(assert (x522 x796))
(assert (x522 x1181))
(assert (x522 x758))
(assert (x522 x249))
(assert (x1071 x855))
(assert (= x1205 (=> (= x482 (> x1490 0)) (and (=> (and (and (= x98 0) (= x209 0) (= 0 x19) (= x724 x435) (= 0 x55)) (not x482)) x1892) (=> (and x482 (and (= x916 (x1591 (+ x435 64))) (= x467 (x304 3 x1645)) (= 0 x14) (= x453 x1645) (= (not (= x467 0)) x1042))) (and (=> (and x1042 (and (> 1461501637330902918203684832716283019655932542976 x1149) (= x1149 (x1701 x790)) (>= 1461501637330902918203684832716283019655932542975 x1149) (= (= x1149 0) x1423) (= x790 (x1688 (x1773 0) (x1773 54) 0)) (>= x1149 0))) (and (=> (and (and (= x185 (x1554 x1765 48)) (= x1642 (x304 65535 x939)) (= x1828 (x1554 x1450 64)) (= (x1688 (x819 x1149) (x1773 52) 0) x1666) (= (x1554 x779 16) x1152) (= x1077 (x304 95406826884961342500336545879718955523139276405473280 x939)) (= (x304 71776119061217280 x939) x1765) (= x1086 (x1554 x1788 32)) (= (x1655 x1666) x939) (= x432 (x1591 (+ 32 x916))) (= x123 (not (= x912 0))) (= x1788 (x304 281470681743360 x939)) (= x1450 (x304 1208907372870555465154560 x939)) (<= x939 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x1346 10 x185) x1451) (= (x304 4294901760 x939) x779) (<= 0 x939) (= (x1554 x1077 168) x1013)) (not x1423)) (and (=> (and (= (= x1890 x1013) x326) x123) (and (=> (not x326) x594) (=> (and x326 (and (= x432 x356) (= x1715 x912))) x674))) (=> (not x123) x594))) (=> (and (and (= x1118 x916) (= x494 0) (= 0 x892) (= 0 x1398) (= 0 x1508)) x1423) x1599))) (=> (and (and (= x916 x1118) (= x1398 0) (= x1508 0) (= 0 x892) (= 0 x494)) (not x1042)) x1599)))))))
(assert (= x825 (or x100 x466)))
(assert (x522 x757))
(assert (= (and x1259 x793) x669))
(assert (x522 x410))
(assert (= (x719 (x819 x448)) x448))
(assert (x522 x483))
(assert (= x319 (and x376 (not x1196))))
(assert (x522 x877))
(assert (=> (<= x1478 10000) (= (x1773 x1478) (x819 x1478))))
(assert (x522 x1065))
(assert (= (x819 77194726158210796949047323339125271902179989777093709359638389338608753093290) (x1773 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x522 x998))
(assert (x1505 x1222))
(assert (= (x535 x895 1) (mod (* x895 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x1071 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (= x646 (and (not x415) x79)))
(assert (x522 x1742))
(assert (= (x719 (x1773 4294967296)) 4294967296))
(assert (x522 x1297))
(assert (x1071 x1672))
(assert (x522 x490))
(assert (x522 x1255))
(assert (x522 x1278))
(assert (x522 x838))
(assert (x1071 x1362))
(assert (= x1376 (=> (and (= (= x886 2) x1434) (= (< 2 x1133) x1411) (not x1411)) (and (=> (and (and (= x1189 x1060) (= x1189 (x1591 (+ x389 64)))) x1434) x1779) (=> (and (not x1434) (and (not x619) (= x619 (< 2 x1133)) (= (= x886 1) x684) (= (x1591 (+ 64 x389)) x28))) (and (=> (not x684) x1183) (=> (and x684 (= x1060 x28)) x1779)))))))
(assert (= x1656 (x719 (x819 x1656))))
(assert (x522 x1601))
(assert (x1071 x470))
(assert (x522 x779))
(assert (x522 x630))
(assert (x522 x843))
(assert (= x658 (and x144 (not x1753))))
(assert (x522 x1439))
(assert (x522 x571))
(assert (= (x719 (x819 274184521717934524641157099916833587349)) 274184521717934524641157099916833587349))
(assert (= x1169 (and x49 x1104)))
(assert (x522 x695))
(assert (x522 x883))
(assert (= (+ (x719 x1221) 1) (x719 (x1744 x1221 1))))
(assert (x522 x153))
(assert (x522 x1862))
(assert (x522 x1366))
(assert (= (x719 (x1773 288230376151711744)) 288230376151711744))
(assert (x522 x472))
(assert (x522 x1128))
(assert (x522 x1284))
(assert (x522 x869))
(assert (x608 x34))
(assert (= x1510 (=> (and (not x1752) (= (> x1133 2) x1752) (= (= 1 x886) x809)) (and (=> (and (not x809) (and (or (and (and (< x156 4294967296) x827 (= (x1513 (x819 x651)) x966) (= (= x966 (x1616 (x819 x651))) x597) (= x1738 (x1513 (x819 x302))) (= x827 (>= (x1616 (x819 x302)) x1738)) x597) x508) (not x508)) (and (= x1057 (x1591 (+ x877 32))) (= x877 (x1591 (+ 4 x804))) (= (x1591 (+ 32 x1057)) x472) (= x1427 (x1591 (+ x472 32))) (= x508 (< 0 x1821))))) x1415) (=> (and (and (or (not x616) (and (and (> 4294967296 x880) x1886 (= (x1513 (x819 x234)) x352) (= (= (x1796 (x819 x234)) x352) x1886) (= x978 (x1513 (x819 x302))) x1009 (= (>= (x1796 (x819 x302)) x978) x1009)) x616)) (and (= x616 (< 0 x1140)) (= (x1591 (+ x1562 32)) x1106) (= (x176 x491) x600) (> 340282366920938463463374607431768211456 x600) (>= x600 0) (= (x1591 (+ 4 x804)) x820) (= x97 (x1591 (+ 32 x820))) (>= 340282366920938463463374607431768211455 x600) (= x1562 (x1591 (+ 32 x97))))) x809) x1321)))))
(assert (x1260 x785))
(assert (x522 x1336))
(assert (x522 x1))
(assert (= (and x1525 x1891) x247))
(assert (x522 x1484))
(assert (x522 x416))
(assert (= (or x723 x307) x1474))
(assert (x522 x784))
(assert (x522 x1442))
(assert (x1260 x1371))
(assert (= (x719 (x1773 2054196882)) 2054196882))
(assert (= x1466 (or x1340 x1315)))
(assert (= (and (not x1813) x1426) x1364))
(assert (x522 x428))
(assert (x522 x1766))
(assert (x522 x1437))
(assert (x522 x244))
(assert (x121 x1058))
(assert (x522 x32))
(assert (x522 x1877))
(assert (= x1026 (and x890 (not x354))))
(assert (= x1783 (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1672) (<= x1732 1461501637330902918203684832716283019655932542975) (<= 0 x1672) (>= x1732 0) (= (x304 7237005577325680195743901738874374364099144639582604309003564681041176166400 x1672) x1535) (= x280 (x1688 (x819 x1732) (x1773 52) 0)) (= (x1688 (x819 x881) (x1773 54) 0) x1712) (= (= x1251 0) x1878) (< x1732 1461501637330902918203684832716283019655932542976) (= (x1591 (+ 32 x391)) x381) (= x1251 (x1554 x1535 212)) (= (x1701 x1712) x1732) (= x1672 (x1655 x280))) (and (=> (and (not x1878) (and (= x1589 x1251) (= 1 x964) (= x578 x1732) (= x226 x381) (= 52 x740))) x1861) (=> (and (and (= x1158 52) (= x60 x381)) x1878) x1811)))))
(assert (x1071 x1250))
(assert (x522 x1350))
(assert (x522 x1738))
(assert (x522 x1097))
(assert (= (and x164 x900) x452))
(assert (x1267 x1058))
(assert (= x578 (x719 (x819 x578))))
(assert (x522 x867))
(assert (= (x719 (x1744 x1221 2)) (+ (x719 x1221) 2)))
(assert (x522 x1187))
(assert (= (=> (and (or (and x1368 (and (> 4294967296 x948) (= 1 x1024))) (and (= x956 x1024) (not x1368))) (and (not (= x302 x1371)) (= (> (x919 (x819 x1464)) 0) x1507) (not (= x62 x1542)) (>= 1461501637330902918203684832716283019655932542975 x1349) (> x287 0) (= (x1513 (x819 x62)) x1265) (>= 18446744073709551615 x961) (not (= x1478 x448)) (not (= x1542 x302)) (= false x875) (> 18446744073709551616 x961) (not (= 2630982038 x1103)) (= x73 x1756) (not (= x237 x1012)) (>= x840 0) (not (= x448 x287)) x1304 (< 0 x302) (= (x1513 (x819 x448)) x1693) (not (= x287 x302)) (not (= x1542 x1276)) (= false x1010) (not (= x237 x62)) (= (> x956 0) x1368) (<= x17 1461501637330902918203684832716283019655932542975) (not (= x448 x1276)) (= x755 (x1513 (x819 x473))) (= x1640 x1256) (>= x961 0) (< 0 x1371) (= x424 2752887981) (= 2752887981 x1103) x1001 (= 0 x970) (> x1478 0) (not (= x473 x1033)) (<= x1419 1099511627775) (not (= x237 x448)) (= (> (x919 (x819 x1276)) 0) x1432) (not (= x237 x1464)) (>= 1461501637330902918203684832716283019655932542975 x1372) (= (< 0 (x919 (x819 x1542))) x141) (>= 340282366920938463463374607431768211455 x735) (<= x302 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1033) (>= x786 0) (<= x1276 1461501637330902918203684832716283019655932542975) (> x448 0) (and (< 163 x1163) (= true (<= x1163 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x970 x944) (<= x37 1461501637330902918203684832716283019655932542975) (not (= x1012 x1542)) (not (= x237 x1478)) (>= x414 0) (not (= x1478 x62)) (not (= x302 x237)) (not (= x1478 x1276)) (= x1304 (< 0 (x919 (x819 x1012)))) (>= 1461501637330902918203684832716283019655932542975 x1458) (< 0 x1033) (>= 340282366920938463463374607431768211455 x1386) (not (= x1371 x1478)) (not (or (and (> 160 x1483) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1483))) (> x1483 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x1542 x448)) (not (= x302 x473)) (= x1612 x1644) (<= x1756 65535) (not (= x448 x1464)) (not (= x473 x1371)) (not (= x1542 x1371)) (= x1073 x1656) (= x643 x1517) (not (= x62 x1033)) (not (= x1033 x1542)) (not (= x287 x1276)) (<= x1339 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x1371) x859 (not (= x473 x62)) (= false x668) (not (= x237 x1542)) (not (= x1033 x302)) (not (= x1033 x1276)) x1853 (not (= x1371 x1033)) (not (= x237 x287)) (>= x1339 0) (= x339 x979) (<= 0 x1419) (= x399 x1640) (>= 1461501637330902918203684832716283019655932542975 x448) (>= x338 0) (> x1542 0) (<= 0 x1746) (not (= x448 x302)) x1757 (= x1128 x712) (<= x1464 1461501637330902918203684832716283019655932542975) (not (= x473 x287)) (not (= x1276 x473)) (= x1174 (x1513 (x819 x287))) (<= 0 x37) (<= x1322 1461501637330902918203684832716283019655932542975) (not (= x1276 x1012)) (>= 1461501637330902918203684832716283019655932542975 x338) (<= 0 x1265) (not (= x62 x1371)) (= x1258 (x1513 (x819 x1371))) (not (= x1371 x237)) (>= 1461501637330902918203684832716283019655932542975 x237) (= (< 0 (x919 (x819 x1033))) x1799) (>= x560 0) (= (x1513 (x819 x1464)) x1804) (= (x1513 (x819 x1478)) x1279) (= (x1688 (x819 x561) (x1773 53) 0) x989) (<= x1478 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1081) (= (< 0 (x919 (x819 x237))) x1001) (<= 0 x1800) (= (> (x919 (x819 x302)) 0) x1547) (= (x1513 (x819 x302)) x1800) (<= x1012 1461501637330902918203684832716283019655932542975) x141 (<= 0 x17) (= x768 x1081) (= x1644 x991) (< 0 x237) (not (= x1012 x62)) (not (= x1012 x1033)) (<= 0 x993) (not (= x302 x1276)) (not (= x237 x1276)) (> x473 0) (<= x1746 65535) (< 0 x1464) (<= x1844 255) (<= 0 x1322) (not (= x1103 2495252898)) (>= x1072 0) (<= x1072 255) (> 65536 x1746) (= x1644 x1084) (not (= x1478 x1464)) (<= 0 x755) (= x1683 (< 0 (x919 (x819 x448)))) (not (= x448 x62)) (<= 0 x294) (< 0 x745) (< 0 x1012) (= x1647 (< 0 (x919 (x819 x1478)))) (<= x287 1461501637330902918203684832716283019655932542975) (not (= x287 x1542)) (not (= x1542 x473)) (not (= x1371 x1464)) (not (= x237 x473)) (not (= x1103 2054196882)) (= x1756 x927) (= x339 x1832) (= (< 0 (x919 (x819 x287))) x1757) (<= x758 1461501637330902918203684832716283019655932542975) (not (= x473 x1012)) (not (= x302 x1012)) (not (= x62 x1276)) (>= 1461501637330902918203684832716283019655932542975 x1542) (>= x1349 0) (not (= x287 x1478)) (= x1853 (> (x919 (x819 x62)) 0)) (not (= x473 x1478)) (>= x399 0) x1507 (= x885 false) (not (= x62 x287)) (>= x735 0) (= x1003 5) (<= x961 18446744073709551615) (<= 0 x710) (not (= x1033 x1478)) (= x124 (x1513 (x819 x1542))) (>= x1844 0) (<= 0 x1174) (= x1377 (> (x919 (x819 x1371)) 0)) (<= x993 255) (not (= x1478 x1012)) (<= 0 x1372) (= x561 x87) (<= x399 1461501637330902918203684832716283019655932542975) (= x1354 x561) (not (= x1012 x287)) (= x1837 x339) (<= x62 1461501637330902918203684832716283019655932542975) (> 3166102818 x1103) (not (= x448 x1033)) (<= 0 x961) (<= x786 1461501637330902918203684832716283019655932542975) (<= 0 x124) (= x449 x561) (not (= x448 x1012)) (>= x1055 0) (not (> 4 x1163)) (not (= x1371 x1276)) (not (< 2 x339)) (<= 0 x1458) (<= 0 x1218) (= x1055 (x1513 (x819 x1033))) (not (= x1464 x473)) (<= 0 x1693) (not (= x1371 x448)) (not (= x62 x1464)) (<= 0 x45) x1683 (= x1656 x1538) (<= 0 x1549) (<= x45 255) (not (= x1464 x1012)) (not (= x287 x1033)) (<= x294 255) (not (= x448 x473)) (= (x1513 (x819 x1012)) x840) (not (= x1464 x1276)) (not (= x1371 x287)) (<= 0 x1258) (<= x1656 1461501637330902918203684832716283019655932542975) (>= x1804 0) (<= 0 x1279) x1799 (<= x560 255) (<= 0 x1386) x1647 (>= 1461501637330902918203684832716283019655932542975 x561) x1432 (= x1128 x1322) (not (= x1033 x1464)) (>= 65535 x1746) (not (> 2054196882 x1103)) (not (= x1542 x1478)) (<= 0 x712) (< 0 x1276) (= x1483 (x774 (- x1163 4))) (<= 0 x758) (<= x473 1461501637330902918203684832716283019655932542975) (not (= x1033 x237)) (not (= x1464 x1542)) x1377 (= x745 (x919 (x819 x1371))) (not (= x302 x1478)) (<= 0 x1746) (not (= x1464 x287)) (>= 1461501637330902918203684832716283019655932542975 x712) (>= 1461501637330902918203684832716283019655932542975 x1218) (not (= x62 x302)) (not (= x1371 x1012)) (>= 255 x710) (= (x1513 (x819 x1276)) x1549) (= x414 (x1513 (x819 x237))) (not (= x1464 x302)) (<= 0 x1081) x1547 (< 0 x62) (= x859 (< 0 (x919 (x819 x473)))) (< x1103 3512598611))) x227) x50))
(assert (x1071 x683))
(assert (= (x819 65536) (x1773 65536)))
(assert (x522 x66))
(assert (x522 x1079))
(assert (x522 x1695))
(assert (x1071 288230376151711744))
(assert (x522 x1644))
(assert (x522 x847))
(assert (x522 x853))
(assert (=> (>= 10000 x520) (= (x819 x520) (x1773 x520))))
(assert (= (x719 (x1773 13403848742886913342097769455703835141295138244810201074363856310843329216512)) 13403848742886913342097769455703835141295138244810201074363856310843329216512))
(assert (x522 x568))
(assert (x522 x705))
(assert (x522 x134))
(assert (x522 x1810))
(assert (x522 x450))
(assert (= x343 (or x165 x576)))
(assert (= x1015 (=> (and (= x1114 (= 0 x799)) (= (x1591 (+ x464 x1403)) x492) (= x1418 (x1591 (+ x492 64))) (> x952 0) (= (x1591 (+ x1881 31)) x787) (not x1034) (= (mod (* x129 x589) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1293) (not x930) (= x634 (x1591 (+ x1293 5000))) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x787) x464) (= (or x1114 x1733) x586) (= x129 (x1223 x1403)) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x589) x408) (= (div x634 10000) x1211) (= (< x408 x129) x479) (= x1034 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1881) (and (= true (<= x1881 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x1881 32)))) (= (= x974 0) x930) (= (< x1211 x1496) x765) (= (ite x586 1 0) x952) (= (not x479) x1733)) (and (=> x765 x1183) (=> (and (= x1418 x580) (not x765)) x1550)))))
(assert (= (and x1025 x1206) x788))
(assert (= x1025 (or x1119 x319)))
(assert (= x1641 (and x971 x1528)))
(assert (x522 x1201))
(assert (x522 x1746))
(assert (x1615 x1479 x637))
(assert (x1071 x24))
(assert (x522 x1199))
(assert (= (x819 54940573406046109056602222415596668683460243721328594580962599660119180443648) (x1773 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x522 x98))
(assert (= (=> (and (or (and (= x1716 0) x795) (and (and (= (div x98 x19) x1824) (= x1716 x1824) (< 0 x19)) (not x795))) (= x795 (= 0 x19))) x74) x857))
(assert (x522 x1075))
(assert (x522 x497))
(assert (= x1552 (and x443 x1522)))
(assert (x522 x349))
(assert (x522 x1490))
(assert (x522 x1033))
(assert (x522 x1099))
(assert (x522 x545))
(assert (x522 x1002))
(assert (x522 x1240))
(assert (= (and x1739 x934) x1053))
(assert (= (div x1469 374144419156711147060143317175368453031918731001856) (x1554 x1469 168)))
(assert (= (x819 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x1773 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x881 10000) (= (x1773 x881) (x819 x881))))
(assert (x1505 x425))
(assert (x522 x1612))
(assert (x585 x598))
(assert (x1071 x1051))
(assert (x1071 x359))
(assert (= x1473 (or x828 x891)))
(assert (x522 x139))
(assert (= (x719 (x819 x740)) x740))
(assert (x522 x660))
(assert (x522 x58))
(assert (x522 x1636))
(assert (x522 x1590))
(assert (x522 x1837))
(assert (= x924 (and x1053 (not x1410))))
(assert (= x287 (x719 (x819 x287))))
(assert (x496 x841))
(assert (x522 x289))
(assert (x1267 x939))
(assert (x522 x1622))
(assert (= (=> (and (or (and (not x1206) (= x797 x694)) (and (and (> 4294967296 x1834) (= x694 1)) x1206)) (and (<= x64 340282366920938463463374607431768211455) (= (x304 1208907372870555465154560 x1058) x612) (< x1837 3) (= (x642 x75) x651) (= x1490 x427) (= x243 x314) (= x1756 x539) (= (x1744 x1221 1) x491) (<= 0 x651) (<= x1295 1461501637330902918203684832716283019655932542975) (<= 0 x1416) (= x488 x929) (< x1416 340282366920938463463374607431768211456) (= x878 (x1591 (+ 32 x733))) (= x1496 x991) (= x1416 (x1404 x1221)) (= x1810 x905) (>= x1316 0) (not (= x867 0)) (< x1316 1461501637330902918203684832716283019655932542976) (<= 0 x64) (>= 255 x1890) (= x1848 (x1591 (+ x511 32))) (= 52 x911) (<= x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x938) (= (x1591 (+ 32 x737)) x505) (= 1184 x1798) (<= x651 1461501637330902918203684832716283019655932542975) (= (x1591 (+ x1475 x1107)) x1670) (= x1506 (x1591 (+ x1303 32))) (= x1499 x1295) (>= 1461501637330902918203684832716283019655932542975 x234) (= x13 (or (and (> 512 x822) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x822) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x822))) (= x75 (x1744 x625 1)) (<= x938 1099511627775) (= (= x1371 0) x405) (= x1133 x886) (= (ite x1159 1 0) x1257) (= (x451 x1221) x673) (not (< x314 4)) (= x1180 (x1591 (+ x1768 31))) (= (x919 (x819 274184521717934524641157099916833587349)) x1652) (= x737 (x1591 (+ x1848 32))) (> 340282366920938463463374607431768211456 x1406) (< 0 x205) (= (x1430 x1049) x64) (= x1295 (x5 x1107)) (= x1475 (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1180)) (= x1590 509899769) (> 1461501637330902918203684832716283019655932542976 x234) (not x13) (= x314 516) (not (or (> x1768 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x1768 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1768))))) (= x625 (x1744 x438 1)) (= 54 x1335) (> 340282366920938463463374607431768211456 x673) (= x822 (x774 (- x314 4))) (not (= x1652 0)) (= x345 (or (> x1212 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1212) true) (> 384 x1212)))) (>= 1461501637330902918203684832716283019655932542975 x1316) (= (< 0 x797) x1206) (= x1036 x1656) (= x1388 x1720) (= (ite x53 1 0) x1044) (>= x1058 0) (= x53 (not (= 0 x77))) (= x1212 (x774 (- x314 132))) (= x799 x589) (= x1656 x1369) (= x561 x575) (= x938 (x1889 x491)) (>= 340282366920938463463374607431768211455 x673) (= x905 x1044) (= x1316 (x322 x438)) (= x254 128) (= (x774 (- x1326 x1670)) x243) (> 1461501637330902918203684832716283019655932542976 x651) (= x1182 x561) (= x1555 (x1591 (+ 32 x505))) (= x205 (x919 (x819 x1371))) (<= x1406 340282366920938463463374607431768211455) (= x1173 (x1688 (x819 x1656) (x1773 52) 0)) (>= x234 0) (= x821 (x1591 (+ 32 x58))) (= x1496 x1401) (= x1656 x543) (= x56 x1322) (= x1058 (x1655 x1173)) (> 340282366920938463463374607431768211456 x64) (= x886 x1837) (= 13746870577832431119502918424790824578952894330873076301242487731141270831104 x67) (= (x836 320) x77) (= x1056 (x1591 (+ x1506 32))) (= (x1591 (+ x1670 4)) x1303) (= x387 (x1591 (+ 32 x1056))) (= x905 x1257) (not x345) (= x589 x961) (<= x1416 340282366920938463463374607431768211455) (= x1221 (x1744 x1049 1)) (= x1388 x989) (>= x673 0) (not x405) (= x1756 x935) (= (x1604 x1049) x1406) (= x1049 (x1744 x1173 1)) (= (x136 x625) x234) (= (= 0 x905) x1487) (= x257 x1890) (= x1159 (not x1487)) (= x733 (x1591 (+ 32 x387))) (= x438 (x1744 x1221 2)) (= x748 (x1591 (+ 32 x821))) (= 55 x1137) (>= x1406 0) (< x938 1099511627776) (= x1490 x1746) (> 3 x886) (= (x1591 (+ x1303 512)) x1326) (= x511 (x1591 (+ x748 32))) (= (x1591 (+ 32 x894)) x58) (= x213 (x1591 (+ 32 x878))) (= x894 (x1591 (+ 32 x213))) (= x1890 x1067) (= (x1554 x612 64) x1378) (= x462 1856))) x1455) x1011))
(assert (x522 x778))
(assert (= x722 (or x442 x754)))
(assert (x522 x1418))
(assert (x522 x128))
(assert (= (and (not x1537) x722) x599))
(assert (x522 x612))
(assert (x522 x1800))
(assert (x1071 2305843009213693952))
(assert (x522 x1256))
(assert (=> (>= 10000 x448) (= (x819 x448) (x1773 x448))))
(assert (x522 x745))
(assert (x522 x478))
(assert (x522 x503))
(assert (x522 x1804))
(assert (=> (>= 10000 x759) (= (x819 x759) (x1773 x759))))
(assert (x1615 x1151 x1635))
(assert (x522 x521))
(assert (x522 x1441))
(assert (x522 x25))
(assert (= (x819 4611686018427387904) (x1773 4611686018427387904)))
(assert (= (or x436 x897) x341))
(assert (x522 x462))
(assert (x522 x735))
(assert (x522 x1113))
(assert (= x1186 (or x1364 x1772)))
(assert (x522 x106))
(assert (= (=> (and (not x566) (= (= x181 0) x566)) x567) x1769))
(assert (= x1091 (=> (and (= x412 (div x1869 1000000000000000000000000000)) (> x621 0) (= (not x1571) x346) (= (x1591 (+ x1405 500000000000000000000000000)) x1869) (= (or x346 x1391) x1486) (= x412 x1760) (= x1391 (= x349 0)) (= (mod (* x661 x349) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1405) (= (ite x1486 1 0) x621) (= x1653 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x349)) (= x1571 (< x1653 x661))) x16)))
(assert (x1071 x598))
(assert (x522 x1224))
(assert (x522 x1077))
(assert (= (and x1700 x849) x844))
(assert (= (=> (and (or (and (not x1793) (= x406 x1578)) (and x1793 (and (= 1 x406) (< x1240 4294967296)))) (and (= x1793 (> x1578 0)) (= x525 (x1591 (+ 4 x432))))) x973) x594))
(assert (= (div x1077 374144419156711147060143317175368453031918731001856) (x1554 x1077 168)))
(assert (x522 x780))
(assert (x522 x881))
(assert (x1071 x1181))
(assert (= (x819 74874610042509929465218460033027201126834042060343647393369405262880053395456) (x1773 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (x522 x382))
(assert (x522 x73))
(assert (x522 x353))
(assert (x522 x1448))
(assert (= (or x1692 x1631) x1772))
(assert (x522 x383))
(assert (= x1307 (and x198 x297)))
(assert (x1071 x166))
(assert (x522 x285))
(assert (x522 x1765))
(assert (= (x1554 x1535 212) (div x1535 6582018229284824168619876730229402019930943462534319453394436096)))
(assert (x522 x744))
(assert (= x1209 (and x876 x1806)))
(assert (x1505 x267))
(assert (x522 x19))
(assert (x522 x387))
(assert (x522 x1332))
(assert (x522 x1653))
(assert (x522 x560))
(assert (x522 x643))
(assert (x522 x1087))
(assert (x522 x840))
(assert (x522 x1262))
(assert (x1071 x453))
(assert (x522 x696))
(assert (x522 x899))
(assert (x522 x316))
(assert (x199 x604))
(assert (x522 x104))
(assert (x522 x1607))
(assert (= x80 (=> (and (= x1622 (div x1496 x1608)) (not x44) (= x1413 x1134) (= x1134 (x1062 x1646)) (= x1622 x834) (= (x1744 x1019 9) x1646) (= (+ x1413 x834) x1154) (> 340282366920938463463374607431768211456 x1134) (<= x1154 340282366920938463463374607431768211455) (= (x304 340282366920938463463374607431768211455 x1154) x660) (<= 0 x1134) (= x44 (> x1622 340282366920938463463374607431768211455)) (= (x1688 (x819 x578) (x1773 52) 0) x1019) (= (x304 340282366920938463463374607431768211455 x1154) x316) (> x1608 0) (>= 340282366920938463463374607431768211455 x1134) (< (+ x1622 x1134) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x675)))
(assert (= (or x861 x1337) x720))
(assert (= (=> (and (< (+ x601 x82) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not x288) (= x734 x588) (< x1719 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x888 0) (= x215 x82) (> x1451 0) (= x1795 x1705) (= x1795 (+ x888 x761)) (= (div x549 x1451) x1719) (= x988 x601) (= x1862 (+ x215 x988)) (= x601 (x792 x696)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x1715 x1862)) (= x761 x1719) (= x1802 (= 0 x1275)) (not x1802) (= (x1591 (+ x1420 x696)) x734) (= x1540 (x1591 (+ 31 x1232))) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1540) x1420) (= x549 (* x1715 x1862)) (= x288 (or (and (= true (<= x1232 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x1232 32)) (> x1232 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x1292) x1882))
(assert (x522 x970))
(assert (x522 x94))
(assert (x522 x1809))
(assert (= (div x1450 18446744073709551616) (x1554 x1450 64)))
(assert (= x460 (and (not x1747) x1421)))
(assert (x522 x1059))
(assert (x522 x880))
(assert (x522 x272))
(assert (x522 x920))
(assert (= (or x1325 x817) x865))
(assert (x522 x527))
(assert (x522 x27))
(assert (=> (<= x651 10000) (= (x1773 x651) (x819 x651))))
(assert (x522 x1658))
(assert (= (div x1273 95780971304118053647396689196894323976171195136475136) (x1554 x1273 176)))
(assert (= 31536000 (x719 (x1773 31536000))))
(assert (= x1722 (and (not x142) x1248)))
(assert (x522 x1637))
(assert (= 0 (x882 x483)))
(assert (x522 x185))
(assert (x1260 x520))
(assert (x522 x157))
(assert (x522 x401))
(assert (= (or x1728 x1797) x1523))
(assert (x496 x474))
(assert (= (x1773 13403848742886913342097769455703835141295138244810201074363856310843329216512) (x819 13403848742886913342097769455703835141295138244810201074363856310843329216512)))
(assert (x522 x1749))
(assert (= (x1773 2752887981) (x819 2752887981)))
(assert (=> (>= 10000 x1542) (= (x1773 x1542) (x819 x1542))))
(assert (x522 x580))
(assert (x522 x1672))
(assert (= (and (not x443) x1522) x59))
(assert (x522 x886))
(assert (= (or x253 x341) x293))
(assert (x522 x1072))
(assert (= x334 (and x460 (not x395))))
(assert (x1260 x1276))
(assert (= x879 (and (not x1633) x224)))
(assert (x522 x1250))
(assert (x522 x578))
(assert (x522 x158))
(assert (= x1890 (x719 (x819 x1890))))
(assert (x522 x380))
(assert (x522 x1164))
(assert (= (x535 1 (x535 x895 1)) (mod (ite (> 256 (x535 x895 1)) (x1346 2 (x535 x895 1)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x829 x1058))
(assert (= (x1773 42843482417537907389418853573278789540571096229670894296011906432179225231360) (x819 42843482417537907389418853573278789540571096229670894296011906432179225231360)))
(assert (=> (>= 10000 x1371) (= (x1773 x1371) (x819 x1371))))
(assert (= (x1554 x1859 48) (div x1859 281474976710656)))
(assert (x522 x64))
(assert (x522 x848))
(assert (x522 x1789))
(assert (= x635 (and x738 (not x1872))))
(assert (x1071 x1320))
(assert (x522 x1706))
(assert (x522 x629))
(assert (x522 x237))
(assert (x522 x595))
(assert (x522 x1251))
(assert (x522 x536))
(assert (x1697 x1058))
(assert (x522 x981))
(assert (x522 x1798))
(assert (= (=> (and (= x1623 x1090) (= (mod (* x1233 x673) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1365) (= (= 0 x673) x949) (> x1278 0) (not x1198) (= (x304 340282366920938463463374607431768211455 x1090) x1142) (= x1090 (div x1830 1000000000000000000000000000)) (= x333 (< x800 x1233)) (= (or x949 x369) x837) (= (> x1090 340282366920938463463374607431768211455) x1198) (= x1830 (x1591 (+ 500000000000000000000000000 x1365))) (= x1278 (ite x837 1 0)) (= x800 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x673)) (= (not x333) x369)) x468) x649))
(assert (x522 x923))
(assert (= x701 (and x457 x1197)))
(assert (= (x1773 18446744073709551616) (x819 18446744073709551616)))
(assert (x522 x673))
(assert (x522 x492))
(assert (x522 x1092))
(assert (= (and x343 (not x482)) x261))
(assert (= x90 (=> (= (= 0 (x1554 x191 2)) x602) (and x602 (=> (= 1 x881) x1783)))))
(assert (x522 x1549))
(assert (= x1204 (and x343 x482)))
(assert (x522 x1859))
(assert (= (x719 (x1773 65535)) 65535))
(assert (= x1875 (or x1857 x83)))
(assert (x522 x1589))
(assert (x1071 x133))
(assert (x522 x429))
(assert (x522 x210))
(assert (x1260 x1656))
(assert (x522 x653))
(assert (x522 x1838))
(assert (x522 x1542))
(assert (x522 x505))
(assert (= (and x274 x1423) x1481))
(assert (x522 x659))
(assert (x522 x1782))
(assert (x522 x430))
(assert (x522 x263))
(assert (= (x882 x393) 0))
(assert (= (x819 81122015567734080146792821972179436176149904945806215094928935927862165241856) (x1773 81122015567734080146792821972179436176149904945806215094928935927862165241856)))
(assert (x522 x1498))
(assert (x522 x1541))
(assert (x522 x1684))
(assert (x522 x77))
(assert (= (or x687 x928) x1586))
(assert (= (x719 (x819 x520)) x520))
(assert (x522 x1041))
(assert (x522 x494))
(assert (not x50))
(assert (x522 x1452))
(assert (x522 x129))
(assert (x522 x708))
(assert (x522 x298))
(assert (x522 x370))
(assert (x522 x1106))
(assert (x522 x1626))
(assert (x522 x17))
(assert (x522 x1319))
(assert (= (and (not x1878) x270) x111))
(assert (= (x819 1461501637330902918203684832716283019655932542976) (x1773 1461501637330902918203684832716283019655932542976)))
(assert (x522 x1076))
(assert (x522 x1422))
(assert (x522 x1233))
(assert (x522 x1177))
(assert (x1071 72057594037927936))
(assert (x522 x433))
(assert (x522 x135))
(assert (x1505 x470))
(assert (x522 x1218))
(assert (= 1099511627776 (x719 (x1773 1099511627776))))
(assert (x522 x682))
(assert (= (+ 9 (x719 x1019)) (x719 (x1744 x1019 9))))
(assert (= x440 true))
(assert (x522 x412))
(assert (= (x719 (x819 x473)) x473))
(assert (= x1858 (or x658 x531)))
(assert (x1505 x787))
(assert (= (or x1169 x1651) x1711))
(assert (= (x719 (x1744 x1666 5)) (+ 5 (x719 x1666))))
(assert (x522 x352))
(assert (x522 x1354))
(assert (x522 x484))
(assert (x522 x1479))
(assert (= (and x1537 x722) x928))
(assert (= (and x1711 (not x308)) x728))
(assert (= (x1773 3512598611) (x819 3512598611)))
(assert (x496 x810))
(assert (x522 x159))
(assert (= (x719 (x819 x62)) x62))
(assert (x522 x1130))
(assert (= (x719 (x1773 2752887981)) 2752887981))
(assert (x522 x985))
(assert (x522 x217))
(assert (= x1806 (and x204 x1497)))
(assert (= (x1554 x612 64) (div x612 18446744073709551616)))
(assert (x522 x1553))
(assert (x522 x1047))
(assert (x522 x1395))
(assert (= (div x191 4) (x1554 x191 2)))
(assert (x522 x95))
(assert (x522 x530))
(assert (x522 x14))
(assert (= (x719 (x1773 54940573406046109056602222415596668683460243721328594580962599660119180443648)) 54940573406046109056602222415596668683460243721328594580962599660119180443648))
(assert (x522 x634))
(assert (x522 x1499))
(assert (x522 x1642))
(assert (x522 x1124))
(assert (x1260 x881))
(assert (x522 x767))
(assert (x522 x332))
(assert (x1697 x1546))
(assert (x522 x1826))
(assert (x1071 (x774 (- x133 1))))
(assert (x522 x1032))
(assert (x522 x845))
(assert (x522 x292))
(assert (x522 x1519))
(assert (x522 x672))
(assert (= (and x1025 (not x1206)) x751))
(assert (x522 x1335))
(assert (x522 x1770))
(assert (x522 x489))
(assert (x522 x143))
(assert (=> (>= 10000 x1732) (= (x819 x1732) (x1773 x1732))))
(assert (x522 x986))
(assert (x522 x1166))
(assert (= x1050 (=> (= x955 (= 0 x571)) (and (=> (and (= x31 x1121) x955) x101) (=> (and (and (< x895 65536) (>= x895 0) (= (x756 x491) x895) (<= x895 65535) (= x219 1) (= x1536 (x1591 (+ 64 x31))) (= (> 128 x895) x49)) (not x955)) (and (=> (not x49) x1183) (=> (and (and (= (x535 1 (x535 x895 1)) x841) (= x810 (x908 x1388)) (= (x1694 x810 x841) x1099) (= x1536 x1121) (<= 0 x810) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x810)) x49) x101)))))))
(assert (= x813 (and x198 (not x297))))
(assert (x522 x1293))
(assert (x522 x683))
(assert (x522 x167))
(assert (x1673 x1553 x474))
(assert (x36 x1058))
(assert (x522 x822))
(assert (= 6582018229189043197315758676582005330734049138558148258257960960 (x719 (x1773 6582018229189043197315758676582005330734049138558148258257960960))))
(assert (= (x819 114274503271123192386478379219969658730955725740335141578591849194369543307264) (x1773 114274503271123192386478379219969658730955725740335141578591849194369543307264)))
(assert (x522 x1534))
(assert (x522 x93))
(assert (= (=> (= (not (> x427 1)) x764) (and (=> (and (= x98 x494) (= x19 x1508) (= x892 x209) (= x1398 x55) (= x1118 x724)) x1892) x764)) x1599))
(assert (= (and x1474 x1272) x91))
(assert (x522 x1089))
(assert (x522 x1828))
(assert (x522 x1073))
(assert (x1505 x1540))
(assert (x522 x1028))
(assert (x522 x434))
(assert (= (and (not x1812) x1630) x149))
(assert (x522 x347))
(assert (= x1493 (or x149 x1654)))
(assert (x522 x1419))
(assert (x522 x1112))
(assert (= (x882 x348) 0))
(assert (= x1337 (and x1227 x174)))
(assert (x522 x356))
(assert (x1260 x1033))
(assert (x522 x1791))
(assert (x522 x1220))
(assert (x522 x925))
(assert (= x78 (and x1383 x889)))
(assert (x522 x1339))
(assert (x1071 x11))
(assert (x522 x1506))
(assert (x522 x1316))
(assert (x522 x588))
(assert (= x738 (or x282 x1755)))
(assert (x260 x1645))
(assert (= (and (not x197) x807) x268))
(assert (x1071 (x774 (- x1051 1))))
(assert (= (and x846 x367) x1095))
(assert (x1584 x1058))
(assert (= x206 (and (not x969) x728)))
(assert (x522 x1370))
(assert (x1071 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x522 x956))
(assert (= (+ 1 (x719 x1666)) (x719 (x1744 x1666 1))))
(assert (= (x1773 72057594037927936) (x819 72057594037927936)))
(assert (= x504 (and x1253 x516)))
(assert (x522 x60))
(assert (x1505 x329))
(assert (= x1282 (=> (and (= (> x444 340282366920938463463374607431768211455) x605) (< (+ x444 x301) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x587 x303) x24) (= x303 x444) (> x1224 0) (= (x1688 (x819 x578) (x819 x740) 0) x1093) (= x301 (x1529 x743)) (= (> x1105 x1589) x1216) (= x444 (div x1496 x1224)) (= (x304 340282366920938463463374607431768211455 x24) x1105) (= x380 (x1591 (+ x1131 64))) (<= x301 340282366920938463463374607431768211455) (not x605) (= x301 x587) (= (x1744 x1093 9) x743) (>= x301 0) (>= 340282366920938463463374607431768211455 x24) (< x301 340282366920938463463374607431768211456)) (and (=> x1216 x1183) (=> (and (= x1059 x380) (not x1216)) x1545)))))
(assert (= (x719 (x1773 1152921504606846976)) 1152921504606846976))
(assert (= (x719 (x819 x881)) x881))
(assert (x1071 x1546))
(assert (x522 x1008))
(assert (= 144115188075855872 (x719 (x1773 144115188075855872))))
(assert (= (=> (= 0 x1289) x231) x1183))
(assert (x522 x787))
(assert (= (and x941 (not x1459)) x1855))
(assert (= (=> (and (or x573 (not x573)) (= (= 0 x181) x573)) x1769) x816))
(assert (x522 x1888))
(assert (x522 x912))
(assert (x522 x1090))
(assert (= (=> (and (= 0 x883) (= 0 x246) (= x558 x923)) x161) x1147))
(assert (= (ite (> 256 x1598) (div x453 (x1346 2 x1598)) 0) (x1554 x453 x1598)))
(assert (x522 x1669))
(assert (x522 x348))
(assert (x522 x464))
(assert (x522 x417))
(assert (x522 x1078))
(assert (x1071 x1479))
(assert (x522 x1715))
(assert (x522 x205))
(assert (x522 x1406))
(assert (x522 x453))
(assert (= (x719 (x819 x1033)) x1033))
(assert (x522 x1664))
(assert (x522 x1727))
(assert (= x1467 (and (not x1400) x420)))
(assert (x522 x1821))
(assert (x1071 65535))
(assert (x522 x1778))
(assert (x522 x1623))
(assert (x522 x1508))
(assert (x114 x939))
(assert (x522 x939))
(assert (x522 x1431))
(assert (x585 x855))
(assert (x522 x1844))
(assert true)
(assert (x522 x1628))
(assert (= x687 (and (not x904) x599)))
(assert (= (or x1641 x407) x168))
(assert (x496 x1553))
(assert (= x1651 (and x591 x955)))
(assert (= (and x211 x616) x307))
(assert (= (and x354 x890) x1713))
(assert (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x719 (x1773 50942633119752846454219349998365661925608737367104304655302372697894809501696))))
(assert (= (x719 (x1744 x75 1)) (+ (x719 x75) 1)))
(assert (x522 x1594))
(assert (x522 x511))
(assert (x522 x1835))
(assert (x1071 x1151))
(assert (x522 x190))
(assert (x522 x273))
(assert (x522 x1887))
(assert (x1071 x1154))
(assert (x522 x1576))
(assert (x1071 x275))
(assert (x522 x201))
(assert (= x631 (=> (and (= x521 (div x200 10000)) (= x1111 (ite x572 1 0)) (not x896) (= x1234 (x1591 (+ x210 x1113))) (not x775) (= x896 (= x264 0)) (= x1089 (x1698 x1201)) (= x342 x1632) (= x447 (not x1521)) (= x1703 (= x667 0)) (= (+ x654 x1632) x1270) (= (< x521 x1270) x1521) (< (+ x342 x312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x774 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1092)) x200) (= x1572 (x1591 (+ x1201 x866))) (= x1141 (not x447)) (= (x1591 (+ x1572 64)) x120) (= 0 x1111) (= (mod (* 10000 x1270) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1113) (< 0 x1476) (= (x1591 (+ x1022 31)) x470) (= (* x1089 x1401) x811) (= x312 x654) (< (* x1089 x1401) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1679 (div x1234 x667)) (= x572 (or x1703 x1141)) (= (div x667 2) x1092) (= x210 (div x667 2)) (= (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x470) x866) (= x312 (div x811 x1476)) (= x69 (< x1110 x1679)) (= x775 (or (and (> 32 x1022) (= true (<= x1022 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x1022 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (and (=> x69 x1183) (=> (and (not x69) (and (= (= x886 1) x457) (not x550) (= x550 (< 2 x1133)))) (and (=> (and (= x120 x580) (not x457)) x1550) (=> (and (and (= x1619 (> x853 0)) (= x853 (x1407 x153)) (= x1600 (x1591 (+ x120 64)))) x457) (and (=> (not x1619) x1183) (=> (and (and (= (x1815 x1132) x789) (>= x789 0) (>= 65535 x789) (= x3 (x1688 (x819 x1656) (x1773 52) 0)) (= (x1591 (+ 64 x1600)) x1544) (= x1124 x1656) (= (x1744 x3 3) x1132) (= (< x789 128) x26) (< x789 65536)) x1619) (and (=> (and x26 (and (= (x304 1 x162) x298) (= (x1554 x453 x1598) x162) (= x1530 (not (= x298 0))) (= (x1591 (+ 1 (mod (x535 x789 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1598))) (and (=> (and (and (= (= x104 0) x8) (= (x304 65535 x1058) x104) (= x981 1856)) x1530) (and (=> x8 x854) (=> (and (and (or (and (not x297) (= x1148 x523)) (and (and (< x1285 4294967296) (= x523 1)) x297)) (and (= x1286 (x1591 (+ x1544 4))) (= (< 0 x1148) x297))) (not x8)) x1301))) (=> (not x1530) x854))) (=> (not x26) x1183)))))))))))
(assert (= (and x224 x1633) x1548))
(assert (= (x1554 x1765 48) (div x1765 281474976710656)))
(assert (= (and (not x238) x206) x562))
(assert (x522 x633))
(assert (x522 x220))
(assert (x522 x99))
(assert (= (or x1209 x154) x534))
(assert (x522 x529))
(assert (x496 x1341))
(assert (x522 x1768))
(assert (x522 x1687))
(assert (= (and x1353 x123) x1801))
(assert (x522 x1502))
(assert (=> (>= 10000 x578) (= (x1773 x578) (x819 x578))))
(assert (x522 x87))
(assert (= 1461501637330902918203684832716283019655932542976 (x719 (x1773 1461501637330902918203684832716283019655932542976))))
(assert (x522 x1266))
(assert (= x1455 (=> (and (or (and (and (> 4294967296 x517) (= 1 x1588)) x354) (and (= x1588 x456) (not x354))) (and (= x1664 (x304 115792089237316195423570985008687907853269984665640564039457584007913129639904 x718)) (= (< 0 x456) x354) (= (x1591 (+ 31 x1834)) x718) (not x614) (not x1792) (= (= x694 0) x1792) (= x177 (x826 1888)) (= x614 (or (> x1834 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1834)) (> 32 x1834)))) (= x1135 (x1591 (+ 1888 x1664))))) x39)))
(assert (x522 x1048))
(assert (= (x819 994519296000000) (x1773 994519296000000)))
(assert (= x1104 (and (not x955) x591)))
(assert (x522 x513))
(assert (x522 x777))
(assert (= (and x713 x698) x1021))
(assert (x522 x639))
(assert (x522 x1756))
(assert (x522 x1229))
(assert (x522 x373))
(assert (x522 x1546))
(assert (= x74 (=> (and (= x1454 (= 0 x209)) (or (and (and (= (div x209 2) x682) (> x1818 0) (= (div x291 10000) x921) (= x1501 (x1591 (+ x170 x1448))) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x1716) x1266) (= x951 0) (= (not x1226) x1094) (= (> x921 x1008) x592) (= x1741 (= 0 x1716)) (= x1818 (ite x884 1 0)) (= x347 x193) (= (or x411 x1217) x336) (= (not x404) x1217) (= x291 (x1591 (+ 5000 x15))) (= x1008 (div x1607 1000000000000000000)) (= x1607 (x774 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x682))) (= x404 (not x592)) (= x170 (div x209 2)) (= (= x209 0) x411) (= x347 (div x1501 x209)) (= (> x19 x1266) x1226) (= x951 (ite x336 1 0)) (= (or x1094 x1741) x884) (= x15 (mod (* x19 x1716) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* 1000000000000000000 x921) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1448)) (not x1454)) (and x1454 (= x193 115792089237316195423570985008687907853269984665640564039457584007913129639935)))) x18)))
(assert (x522 x921))
(assert (= x1069 (or x1302 x1021)))
(assert (x1071 95406826884961342500336545879718955523139276405473280))
(assert (= x1197 (and x865 (not x69))))
(assert (x522 x1398))
(check-sat)
(exit)