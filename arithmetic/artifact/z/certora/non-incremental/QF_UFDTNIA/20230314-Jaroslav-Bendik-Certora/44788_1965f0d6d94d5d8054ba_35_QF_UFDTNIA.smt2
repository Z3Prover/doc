(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x181 0)) (((x72 (x132 x181) (x512 x181) (x53 Int)) (x292 (x633 Int)) (x300 (x718 x181) (x524 Int)))))
(declare-fun x625 () Bool)
(declare-fun x568 () Int)
(declare-fun x17 () Int)
(declare-fun x28 () Int)
(declare-fun x187 () Int)
(declare-fun x99 () Bool)
(declare-fun x539 () Int)
(declare-fun x171 () x181)
(declare-fun x671 () x181)
(declare-fun x259 () Bool)
(declare-fun x649 () Int)
(declare-fun x580 () x181)
(declare-fun x230 () Int)
(declare-fun x612 () Bool)
(declare-fun x237 () Int)
(declare-fun x536 (x181) Int)
(declare-fun x226 () Int)
(declare-fun x388 (Int) x181)
(declare-fun x283 () Bool)
(declare-fun x521 () Int)
(declare-fun x456 () Int)
(declare-fun x38 () Int)
(declare-fun x468 () x181)
(declare-fun x619 () Int)
(declare-fun x670 () Int)
(declare-fun x433 () Int)
(declare-fun x616 () Int)
(declare-fun x455 () Bool)
(declare-fun x368 () Int)
(declare-fun x609 () Int)
(declare-fun x333 () Bool)
(declare-fun x664 () Bool)
(declare-fun x698 () Int)
(declare-fun x231 () Int)
(declare-fun x123 () Int)
(declare-fun x349 () Int)
(declare-fun x348 () Int)
(declare-fun x128 () Int)
(declare-fun x530 () Int)
(declare-fun x590 () Int)
(declare-fun x488 () Int)
(declare-fun x126 () Int)
(declare-fun x164 () Bool)
(declare-fun x528 () Int)
(declare-fun x225 () x181)
(declare-fun x107 () Bool)
(declare-fun x566 (Int) Int)
(declare-fun x213 () Int)
(declare-fun x423 () Int)
(declare-fun x398 () Int)
(declare-fun x584 () Int)
(declare-fun x297 () Int)
(declare-fun x224 () x181)
(declare-fun x114 () Int)
(declare-fun x461 (Int) Int)
(declare-fun x466 () Int)
(declare-fun x40 () Int)
(declare-fun x380 () Int)
(declare-fun x238 () Int)
(declare-fun x691 () Int)
(declare-fun x355 () Int)
(declare-fun x113 () Int)
(declare-fun x25 () Int)
(declare-fun x69 (x181) Int)
(declare-fun x510 (x181) Int)
(declare-fun x546 () Int)
(declare-fun x534 () Int)
(declare-fun x45 () Int)
(declare-fun x637 () Bool)
(declare-fun x254 () Int)
(declare-fun x499 () Int)
(declare-fun x194 () Int)
(declare-fun x747 () Int)
(declare-fun x734 () Bool)
(declare-fun x543 () Int)
(declare-fun x147 () Bool)
(declare-fun x193 () x181)
(declare-fun x491 (Int Int) Int)
(declare-fun x739 () x181)
(declare-fun x693 () Bool)
(declare-fun x310 () Int)
(declare-fun x286 () Int)
(declare-fun x189 () x181)
(declare-fun x492 () x181)
(declare-fun x573 () Int)
(declare-fun x595 () x181)
(declare-fun x304 () Int)
(declare-fun x630 () Bool)
(declare-fun x284 () Int)
(declare-fun x44 () Int)
(declare-fun x551 () Int)
(declare-fun x415 () Int)
(declare-fun x335 () Int)
(declare-fun x655 () Int)
(declare-fun x447 () Int)
(declare-fun x330 () Int)
(declare-fun x360 () Int)
(declare-fun x462 () Int)
(declare-fun x550 () Int)
(declare-fun x35 () Int)
(declare-fun x80 () Int)
(declare-fun x277 () x181)
(declare-fun x511 () Int)
(declare-fun x23 () Int)
(declare-fun x151 () Int)
(declare-fun x652 () x181)
(declare-fun x158 () Int)
(declare-fun x27 () Int)
(declare-fun x564 () Int)
(declare-fun x370 () Bool)
(declare-fun x377 () Int)
(declare-fun x578 () Bool)
(declare-fun x372 () Int)
(declare-fun x502 () Int)
(declare-fun x662 () Int)
(declare-fun x7 () Int)
(declare-fun x296 () x181)
(declare-fun x601 () x181)
(declare-fun x200 () Int)
(declare-fun x221 () Int)
(declare-fun x405 () Int)
(declare-fun x16 () Int)
(declare-fun x720 () Bool)
(declare-fun x33 () Bool)
(declare-fun x334 () Bool)
(declare-fun x61 (x181) Int)
(declare-fun x438 () x181)
(declare-fun x554 () Bool)
(declare-fun x421 () Int)
(declare-fun x694 () Int)
(declare-fun x54 () x181)
(declare-fun x758 () Int)
(declare-fun x676 () Bool)
(declare-fun x757 () Int)
(declare-fun x586 () Int)
(declare-fun x294 () Int)
(declare-fun x459 () Int)
(declare-fun x482 () x181)
(declare-fun x235 () Int)
(declare-fun x589 () x181)
(declare-fun x496 () Int)
(declare-fun x731 () Int)
(declare-fun x480 () Int)
(declare-fun x478 () Int)
(declare-fun x608 () x181)
(declare-fun x36 () Int)
(declare-fun x686 () Bool)
(declare-fun x149 () Int)
(declare-fun x547 () Int)
(declare-fun x507 () Int)
(declare-fun x29 () Int)
(declare-fun x495 () Int)
(declare-fun x383 () Int)
(declare-fun x47 () Int)
(declare-fun x62 (x181) Int)
(declare-fun x745 () Int)
(declare-fun x690 () Int)
(declare-fun x309 () Int)
(declare-fun x223 () Int)
(declare-fun x95 () Int)
(declare-fun x516 () Int)
(declare-fun x761 () Int)
(declare-fun x242 () x181)
(declare-fun x540 () Int)
(declare-fun x553 () Int)
(declare-fun x281 () Int)
(declare-fun x75 () Int)
(declare-fun x467 () Int)
(declare-fun x70 (x181) Int)
(declare-fun x641 () Bool)
(declare-fun x261 () Int)
(declare-fun x229 () Int)
(declare-fun x643 () Int)
(declare-fun x190 () Int)
(declare-fun x486 () x181)
(declare-fun x9 (Int) Int)
(declare-fun x217 () Int)
(declare-fun x265 () Bool)
(declare-fun x668 () Int)
(declare-fun x202 () x181)
(declare-fun x408 () Int)
(declare-fun x311 () Int)
(declare-fun x688 () x181)
(declare-fun x326 () x181)
(declare-fun x207 () Int)
(declare-fun x210 () Bool)
(declare-fun x563 () Int)
(declare-fun x451 () Int)
(declare-fun x245 () Int)
(declare-fun x68 () x181)
(declare-fun x382 () Int)
(declare-fun x198 () Int)
(declare-fun x279 () Int)
(declare-fun x273 () Bool)
(declare-fun x569 () x181)
(declare-fun x43 () Int)
(declare-fun x417 () Int)
(declare-fun x489 () Int)
(declare-fun x640 () Int)
(declare-fun x682 () Int)
(declare-fun x131 () Int)
(declare-fun x705 () Int)
(declare-fun x727 () Int)
(declare-fun x452 () Int)
(declare-fun x340 () Bool)
(declare-fun x469 () Int)
(declare-fun x610 () Int)
(declare-fun x111 () Int)
(declare-fun x236 () Int)
(declare-fun x129 () Int)
(declare-fun x605 () Int)
(declare-fun x557 () Int)
(declare-fun x249 () Bool)
(declare-fun x592 () Int)
(declare-fun x384 () x181)
(declare-fun x440 () Int)
(declare-fun x600 () Int)
(declare-fun x585 () Int)
(declare-fun x397 () Int)
(declare-fun x13 () Int)
(declare-fun x411 () Int)
(declare-fun x31 () x181)
(declare-fun x135 () Bool)
(declare-fun x560 () Int)
(declare-fun x188 () Int)
(declare-fun x729 () Int)
(declare-fun x471 () Int)
(declare-fun x406 () Bool)
(declare-fun x59 () x181)
(declare-fun x162 () Int)
(declare-fun x733 () Int)
(declare-fun x14 () x181)
(declare-fun x203 () Bool)
(declare-fun x343 () Bool)
(declare-fun x167 () Int)
(declare-fun x77 () Int)
(declare-fun x545 () Int)
(declare-fun x607 () Int)
(declare-fun x105 () Int)
(declare-fun x591 () Int)
(declare-fun x374 () Int)
(declare-fun x713 () Int)
(declare-fun x275 () x181)
(declare-fun x722 () Int)
(declare-fun x596 () Int)
(declare-fun x165 (Int) Int)
(declare-fun x257 () Int)
(declare-fun x449 () Bool)
(declare-fun x153 () x181)
(declare-fun x531 () Int)
(declare-fun x721 () x181)
(declare-fun x504 () Int)
(declare-fun x362 () Int)
(declare-fun x558 () Int)
(declare-fun x109 () x181)
(declare-fun x232 () Int)
(declare-fun x481 () Int)
(declare-fun x378 () Int)
(declare-fun x665 (x181) Int)
(declare-fun x179 () Int)
(declare-fun x490 () Int)
(declare-fun x709 () Bool)
(declare-fun x621 () Bool)
(declare-fun x2 () Int)
(declare-fun x430 () Int)
(declare-fun x30 () Int)
(declare-fun x102 () Int)
(declare-fun x15 () Bool)
(declare-fun x632 () Int)
(declare-fun x241 () Int)
(declare-fun x555 () Int)
(declare-fun x21 () Int)
(declare-fun x614 () Int)
(declare-fun x582 () x181)
(declare-fun x707 () Int)
(declare-fun x594 () Int)
(declare-fun x518 () Int)
(declare-fun x436 () x181)
(declare-fun x63 () Int)
(declare-fun x134 () Int)
(declare-fun x316 () Int)
(declare-fun x211 () Int)
(declare-fun x684 () Int)
(declare-fun x266 () Int)
(declare-fun x174 () Int)
(declare-fun x476 () Bool)
(declare-fun x87 () Int)
(declare-fun x391 () Bool)
(declare-fun x191 (x181) Int)
(declare-fun x444 () Int)
(declare-fun x716 () Int)
(declare-fun x588 () Int)
(declare-fun x457 () Int)
(declare-fun x276 () Int)
(declare-fun x227 () x181)
(declare-fun x432 () Int)
(declare-fun x749 () Int)
(declare-fun x251 () Int)
(declare-fun x117 () Int)
(declare-fun x365 () x181)
(declare-fun x293 () Bool)
(declare-fun x100 () Int)
(declare-fun x666 () Int)
(declare-fun x255 () x181)
(declare-fun x93 () Int)
(declare-fun x206 () x181)
(declare-fun x628 () Int)
(declare-fun x689 () Int)
(declare-fun x133 () Bool)
(declare-fun x110 () Int)
(declare-fun x646 () Bool)
(declare-fun x402 () Int)
(declare-fun x108 () Int)
(declare-fun x10 () Int)
(declare-fun x268 () Int)
(declare-fun x269 () Int)
(declare-fun x712 () Bool)
(declare-fun x442 () Int)
(declare-fun x328 () Int)
(declare-fun x437 () x181)
(declare-fun x627 () Int)
(declare-fun x170 () Int)
(declare-fun x250 () Int)
(declare-fun x651 () Int)
(declare-fun x274 () Int)
(declare-fun x711 () Bool)
(declare-fun x501 () Int)
(declare-fun x414 () Int)
(declare-fun x653 () Int)
(declare-fun x703 () Bool)
(declare-fun x125 () Int)
(declare-fun x618 () x181)
(declare-fun x515 () x181)
(declare-fun x477 (x181) Int)
(declare-fun x180 () Int)
(declare-fun x344 () Int)
(declare-fun x623 () Int)
(declare-fun x475 () Int)
(declare-fun x4 () Int)
(declare-fun x239 () Bool)
(declare-fun x287 () Int)
(declare-fun x96 () Int)
(declare-fun x24 () Int)
(declare-fun x256 () Int)
(declare-fun x218 () Int)
(declare-fun x494 () Int)
(declare-fun x185 () x181)
(declare-fun x157 () Bool)
(declare-fun x331 () Int)
(declare-fun x121 () Int)
(declare-fun x508 () Int)
(declare-fun x602 () Int)
(declare-fun x647 () Int)
(declare-fun x148 () Bool)
(declare-fun x687 () Int)
(declare-fun x441 () Int)
(declare-fun x674 () Int)
(declare-fun x272 () x181)
(declare-fun x315 (x181) Int)
(declare-fun x404 () x181)
(declare-fun x298 () Int)
(declare-fun x672 () Int)
(declare-fun x401 () Int)
(declare-fun x704 () Int)
(declare-fun x658 () Int)
(declare-fun x648 () Int)
(declare-fun x443 () Int)
(declare-fun x347 () Int)
(declare-fun x579 () Bool)
(declare-fun x295 () Int)
(declare-fun x324 () x181)
(declare-fun x201 () x181)
(declare-fun x282 () Int)
(declare-fun x353 () Int)
(declare-fun x556 () Bool)
(declare-fun x305 () x181)
(declare-fun x176 () Int)
(declare-fun x572 () Int)
(declare-fun x656 () Int)
(declare-fun x581 () Int)
(declare-fun x631 () Int)
(declare-fun x559 () Int)
(declare-fun x439 (Int) Int)
(declare-fun x706 () x181)
(declare-fun x638 () Int)
(declare-fun x5 () Int)
(declare-fun x583 () Int)
(declare-fun x184 () Int)
(declare-fun x669 () Int)
(declare-fun x752 (Int) Int)
(declare-fun x678 () x181)
(declare-fun x725 () Int)
(declare-fun x322 () Int)
(declare-fun x701 () Int)
(declare-fun x64 () Int)
(declare-fun x685 () Int)
(declare-fun x472 () Int)
(declare-fun x367 () Int)
(declare-fun x339 () Int)
(declare-fun x593 () Int)
(declare-fun x744 () Bool)
(declare-fun x431 () Int)
(declare-fun x6 () Int)
(declare-fun x541 () Int)
(declare-fun x660 () Int)
(declare-fun x233 () x181)
(declare-fun x160 () x181)
(declare-fun x306 () Int)
(declare-fun x659 () Int)
(declare-fun x220 () Int)
(declare-fun x692 () Int)
(declare-fun x760 () Int)
(declare-fun x613 () Int)
(declare-fun x301 () Int)
(declare-fun x611 () Int)
(declare-fun x755 () Bool)
(declare-fun x505 () x181)
(declare-fun x412 () x181)
(declare-fun x182 () Int)
(declare-fun x696 () Int)
(declare-fun x52 () Int)
(declare-fun x597 () Int)
(declare-fun x341 () Int)
(declare-fun x1 () Int)
(declare-fun x498 () Int)
(declare-fun x352 () Int)
(declare-fun x317 () Int)
(declare-fun x635 () Int)
(declare-fun x101 () Bool)
(declare-fun x264 () Int)
(declare-fun x626 () Int)
(declare-fun x522 () Int)
(declare-fun x142 () Int)
(declare-fun x248 () Bool)
(declare-fun x83 () Int)
(declare-fun x243 () Int)
(declare-fun x312 () Int)
(declare-fun x673 () Int)
(declare-fun x82 () Int)
(declare-fun x138 () Bool)
(declare-fun x37 () Int)
(declare-fun x396 () Bool)
(declare-fun x332 () x181)
(declare-fun x247 () Int)
(declare-fun x702 () Int)
(declare-fun x699 () Int)
(declare-fun x375 () Bool)
(declare-fun x422 (x181) Int)
(declare-fun x357 () Int)
(declare-fun x403 () Bool)
(declare-fun x56 () Int)
(declare-fun x743 () Int)
(declare-fun x738 () Int)
(declare-fun x726 () Int)
(declare-fun x446 () Int)
(declare-fun x561 () Bool)
(declare-fun x92 () Int)
(declare-fun x199 () Int)
(declare-fun x577 () x181)
(declare-fun x308 () Int)
(declare-fun x715 () Bool)
(declare-fun x385 () Int)
(declare-fun x728 () Int)
(declare-fun x94 () Int)
(declare-fun x525 () Int)
(declare-fun x434 () Int)
(declare-fun x73 () Int)
(declare-fun x263 () Int)
(declare-fun x571 () Bool)
(declare-fun x278 () Int)
(declare-fun x291 () Int)
(declare-fun x350 () Bool)
(declare-fun x81 () Int)
(declare-fun x42 () Int)
(declare-fun x519 () Int)
(declare-fun x644 () x181)
(declare-fun x104 () Int)
(declare-fun x574 () Int)
(declare-fun x112 (x181) Int)
(declare-fun x395 () Int)
(declare-fun x159 () Int)
(declare-fun x136 () Int)
(declare-fun x565 () Bool)
(declare-fun x137 () Int)
(declare-fun x195 (Int) Int)
(declare-fun x3 () Int)
(declare-fun x708 () Int)
(declare-fun x172 () Int)
(declare-fun x680 () Int)
(declare-fun x116 () Int)
(declare-fun x465 () Int)
(declare-fun x458 () x181)
(declare-fun x327 () Int)
(declare-fun x359 () x181)
(declare-fun x714 () x181)
(declare-fun x454 () x181)
(declare-fun x320 () Bool)
(declare-fun x122 () Int)
(declare-fun x622 () Bool)
(declare-fun x379 () Bool)
(declare-fun x196 () Int)
(declare-fun x288 () Int)
(declare-fun x697 () Int)
(declare-fun x18 () Int)
(declare-fun x663 () Int)
(declare-fun x140 (Int) Int)
(declare-fun x740 () x181)
(declare-fun x394 () Int)
(declare-fun x115 () Int)
(declare-fun x124 () Int)
(declare-fun x178 () Int)
(declare-fun x51 () Int)
(declare-fun x48 () Int)
(declare-fun x323 () x181)
(declare-fun x473 () Int)
(declare-fun x629 () x181)
(declare-fun x32 () Int)
(declare-fun x85 () Int)
(declare-fun x329 () Bool)
(declare-fun x751 () x181)
(declare-fun x88 (Int Int) Int)
(declare-fun x46 () x181)
(declare-fun x448 () Int)
(declare-fun x435 () Int)
(declare-fun x407 () Int)
(declare-fun x587 () Int)
(declare-fun x57 () Int)
(declare-fun x216 () Bool)
(declare-fun x41 () Int)
(declare-fun x79 () Int)
(declare-fun x538 () Int)
(declare-fun x523 () Bool)
(declare-fun x661 () Bool)
(declare-fun x710 () Int)
(declare-fun x141 () Int)
(declare-fun x208 () Int)
(declare-fun x154 () Int)
(declare-fun x186 () x181)
(declare-fun x120 () Int)
(declare-fun x342 () Int)
(declare-fun x485 () x181)
(declare-fun x737 () Bool)
(declare-fun x11 () Int)
(declare-fun x529 () Int)
(declare-fun x143 () Bool)
(declare-fun x753 () Int)
(declare-fun x544 () Int)
(declare-fun x252 () Int)
(declare-fun x356 () Int)
(declare-fun x724 () Int)
(declare-fun x677 () Int)
(declare-fun x192 () x181)
(declare-fun x526 () x181)
(declare-fun x22 () x181)
(declare-fun x58 () Int)
(declare-fun x260 () Int)
(declare-fun x71 () Int)
(declare-fun x463 () Bool)
(declare-fun x234 () Bool)
(declare-fun x645 () Int)
(declare-fun x307 () Int)
(declare-fun x732 () Int)
(declare-fun x506 () Int)
(declare-fun x270 () Bool)
(declare-fun x730 () Bool)
(declare-fun x392 () Int)
(declare-fun x639 () Int)
(declare-fun x390 () x181)
(declare-fun x624 () Int)
(declare-fun x527 () Int)
(declare-fun x49 () Int)
(declare-fun x65 () Int)
(declare-fun x576 () Int)
(declare-fun x26 () Int)
(declare-fun x748 () Int)
(declare-fun x399 () Bool)
(declare-fun x487 () x181)
(declare-fun x483 () Int)
(declare-fun x78 () Int)
(declare-fun x97 () Int)
(declare-fun x321 () Int)
(declare-fun x418 () Int)
(declare-fun x759 () x181)
(declare-fun x161 () Int)
(declare-fun x598 () Bool)
(declare-fun x603 () Int)
(declare-fun x313 () Int)
(declare-fun x285 () x181)
(declare-fun x173 () Int)
(declare-fun x303 () Int)
(declare-fun x361 () Int)
(declare-fun x345 () Int)
(declare-fun x84 () Int)
(declare-fun x427 () Bool)
(declare-fun x570 () Int)
(declare-fun x169 (Int) Int)
(declare-fun x552 () Int)
(declare-fun x470 () Int)
(declare-fun x756 () Bool)
(declare-fun x130 () Int)
(declare-fun x657 () Int)
(declare-fun x8 () Int)
(declare-fun x620 () Int)
(declare-fun x204 () Int)
(declare-fun x366 () Int)
(declare-fun x675 () Int)
(declare-fun x683 () Int)
(declare-fun x177 () Int)
(declare-fun x209 () Int)
(declare-fun x575 () Int)
(declare-fun x410 () Int)
(declare-fun x679 () Int)
(declare-fun x146 () Int)
(declare-fun x354 () Int)
(declare-fun x337 () Int)
(declare-fun x735 () Int)
(declare-fun x650 () Int)
(declare-fun x424 () Int)
(declare-fun x376 () Int)
(declare-fun x409 () Int)
(declare-fun x429 () Int)
(declare-fun x363 () Int)
(declare-fun x222 () Int)
(declare-fun x642 () Int)
(declare-fun x302 () Int)
(declare-fun x606 () Int)
(declare-fun x197 (x181) Int)
(declare-fun x400 (x181) Int)
(declare-fun x369 () Int)
(declare-fun x214 () Int)
(declare-fun x419 () Int)
(declare-fun x750 () Bool)
(declare-fun x150 () Int)
(declare-fun x364 () Int)
(declare-fun x754 () Int)
(declare-fun x389 () Int)
(declare-fun x474 () Int)
(declare-fun x542 () Int)
(declare-fun x460 () Bool)
(declare-fun x168 () Int)
(declare-fun x290 () Int)
(declare-fun x654 () Int)
(declare-fun x50 () x181)
(declare-fun x89 () Int)
(declare-fun x145 () Int)
(declare-fun x205 () Int)
(declare-fun x464 () Int)
(declare-fun x509 () Int)
(declare-fun x74 () Bool)
(declare-fun x567 () Bool)
(declare-fun x562 () Bool)
(declare-fun x39 () Bool)
(declare-fun x413 () Int)
(declare-fun x152 () Int)
(declare-fun x667 () Int)
(declare-fun x55 (Int) Int)
(declare-fun x520 () Bool)
(declare-fun x514 () Int)
(declare-fun x262 () Int)
(declare-fun x166 () Bool)
(declare-fun x617 () Int)
(declare-fun x381 () Int)
(declare-fun x119 () Int)
(declare-fun x246 () Int)
(declare-fun x280 (x181) Int)
(declare-fun x393 () Int)
(declare-fun x253 () Int)
(declare-fun x453 () Int)
(declare-fun x175 () Int)
(declare-fun x318 () Int)
(declare-fun x12 () x181)
(declare-fun x325 () Int)
(declare-fun x271 () Int)
(declare-fun x336 () Int)
(declare-fun x358 () Int)
(declare-fun x373 (Int) Int)
(declare-fun x634 () Int)
(declare-fun x484 () Int)
(declare-fun x34 () Int)
(declare-fun x212 () Int)
(declare-fun x240 () Int)
(declare-fun x549 () Int)
(declare-fun x66 () Int)
(declare-fun x228 () Int)
(declare-fun x215 (Int Int) Int)
(declare-fun x615 () Int)
(declare-fun x695 () Int)
(declare-fun x719 () Int)
(declare-fun x700 () Bool)
(declare-fun x450 () Int)
(declare-fun x60 () Int)
(declare-fun x479 () x181)
(declare-fun x371 () Int)
(define-fun x244 ((x181 x181) (x127 Int)) x181 (ite ((_ is x300) x181) (x300 (x718 x181) (+ (x524 x181) x127)) (ite ((_ is x72) x181) (x72 (x132 x181) (x512 x181) (+ (x53 x181) x127)) (x292 (+ x127 (x633 x181))))))
(define-fun x681 ((x267 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x267) (>= x267 0)) x267 (- x267 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x741 ((x267 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x267) (> 0 x267)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x267) x267))
(define-fun x183 ((x103 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x103) (>= x103 0)))
(define-fun x416 ((x103 Int)) Bool (and (= (x491 115792089237316195423570985008687907853269984665640564039457584007913129639935 x103) x103) (= x103 (x491 x103 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x535 ((x103 Int)) Bool (and (= (x491 0 x103) 0) (= 0 (x491 x103 0))))
(define-fun x98 ((x103 Int)) Bool (= (x491 x103 x103) x103))
(define-fun x386 ((x103 Int)) Bool (and (x98 x103) (x416 x103) (x535 x103)))
(define-fun x314 ((x103 Int) (x106 Int)) Bool (= (x491 x106 x103) (x491 x103 x106)))
(define-fun x19 ((x103 Int) (x106 Int)) Bool (and (>= (x491 x103 x106) 0) (=> (>= x106 0) (>= x106 (x491 x103 x106))) (=> (<= 0 x103) (>= x103 (x491 x103 x106)))))
(define-fun x155 ((x103 Int) (x106 Int)) Bool (and (x314 x103 x106) (x19 x103 x106)))
(define-fun x736 ((x103 Int)) Bool (and (= (x88 115792089237316195423570985008687907853269984665640564039457584007913129639935 x103) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x88 x103 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x289 ((x103 Int)) Bool (and (= x103 (x88 x103 0)) (= x103 (x88 0 x103))))
(define-fun x338 ((x103 Int)) Bool (= x103 (x88 x103 x103)))
(define-fun x20 ((x103 Int)) Bool (and (x338 x103) (x736 x103) (x289 x103)))
(define-fun x717 ((x103 Int) (x106 Int)) Bool (= (x88 x106 x103) (x88 x103 x106)))
(define-fun x351 ((x103 Int) (x106 Int)) Bool (and (=> (>= x103 0) (<= x103 (x88 x103 x106))) (=> (>= x106 0) (<= x106 (x88 x103 x106))) (<= (x88 x103 x106) (+ x103 x106))))
(define-fun x346 ((x103 Int) (x106 Int)) Bool (and (x351 x103 x106) (x717 x103 x106)))
(define-fun x500 ((x532 Int)) Int (ite (= 128 x532) x480 (x169 x532)))
(define-fun x76 ((x532 Int)) Int (ite (= x532 160) x130 (x500 x532)))
(define-fun x513 ((x532 Int)) Int (ite (= 192 x532) x545 (x76 x532)))
(define-fun x537 ((x532 Int)) Int (ite (= 224 x532) x760 (x513 x532)))
(define-fun x219 ((x532 Int)) Int (ite (= 256 x532) x669 (x537 x532)))
(define-fun x604 ((x532 Int)) Int (ite (= 128 x532) x232 (x195 x532)))
(define-fun x425 ((x532 Int)) Int (ite (= x532 160) x662 (x604 x532)))
(define-fun x387 ((x532 Int)) Int (ite (= 192 x532) x543 (x425 x532)))
(define-fun x258 ((x532 Int)) Int (ite (= x532 224) x392 (x387 x532)))
(define-fun x497 ((x532 Int)) Int (ite (= 256 x532) x92 (x258 x532)))
(define-fun x503 ((x532 Int)) Int (ite (= 128 x532) x111 (x461 x532)))
(define-fun x599 ((x532 Int)) Int (ite (= x532 160) x587 (x503 x532)))
(define-fun x636 ((x532 Int)) Int (ite (= 128 x532) x3 (x439 x532)))
(define-fun x746 ((x532 Int)) Int (ite (= 160 x532) x593 (x636 x532)))
(define-fun x548 ((x532 x181)) Int (ite (= x582 x532) x306 (x197 x532)))
(define-fun x742 ((x532 x181)) Int (ite (= x739 x532) x24 (x477 x532)))
(define-fun x426 ((x532 x181)) Int (ite (= x390 x532) x331 (x69 x532)))
(define-fun x144 ((x532 x181)) Int (ite (= x532 x589) x8 (x280 x532)))
(define-fun x163 ((x532 x181)) Int (ite (= x225 x532) x78 (x510 x532)))
(define-fun x86 ((x532 Int)) Int (ite (= x532 x114) x499 (x752 x532)))
(define-fun x493 ((x532 Int)) Int (ite (= 128 x532) x743 (x165 x532)))
(define-fun x91 ((x532 Int)) Int (ite (= x532 160) x64 (x493 x532)))
(define-fun x517 ((x532 Int)) Int (ite (= x532 192) x713 (x91 x532)))
(define-fun x67 ((x532 Int)) Int (ite (= x532 224) x352 (x517 x532)))
(define-fun x723 ((x532 Int)) Int (ite (= 256 x532) x613 (x67 x532)))
(define-fun x90 ((x532 Int)) Int (ite (= 128 x532) x507 (x373 x532)))
(define-fun x428 ((x532 Int)) Int (ite (= 160 x532) x344 (x90 x532)))
(define-fun x118 ((x532 Int)) Int (ite (= 192 x532) x158 (x428 x532)))
(define-fun x319 ((x532 Int)) Int (ite (= 224 x532) x339 (x118 x532)))
(define-fun x533 ((x532 Int)) Int (ite (= x532 256) x638 (x319 x532)))
(define-fun x156 ((x532 Int)) Int (ite (= 128 x532) x724 (x566 x532)))
(define-fun x445 ((x532 Int)) Int (ite (= x532 160) x269 (x156 x532)))
(define-fun x420 ((x532 Int)) Int (ite (= x532 128) x660 (x9 x532)))
(define-fun x139 ((x532 Int)) Int (ite (= x532 160) x312 (x420 x532)))
(define-fun x299 ((x103 Int)) Bool (=> (and (not (= x103 1710941022)) (not (= x103 1161348331)) (not (= x103 606387804)) (not (= 2265735533 x103)) (not (= x103 2991206654)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x103)) (not (= 2507842956 x103)) (not (= 2094874590 x103)) (not (= x103 699302164)) (not (= 1814410054 x103)) (not (= 231365057 x103)) (not (= x103 3647180086)) (not (= 4032373034 x103)) (not (= 436938878 x103)) (not (= 2746363844 x103)) (not (= 1980270339 x103)) (not (= 1763987465 x103)) (not (= x103 3995103268)) (not (= x103 3058907103)) (not (= x103 3133049407)) (not (= x103 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (not (= 558109909 x103)) (not (= 1461501637330902918203684832716283019655932542975 x103)) (> x103 10000) (not (= 761373525 x103)) (not (= x103 3207937467)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x103))) (not ((_ is x292) (x388 x103)))))
(assert (x183 x360))
(assert (x183 x423))
(assert (x183 x499))
(assert (= 2746363844 (x70 (x292 2746363844))))
(assert (x183 x667))
(assert (= (x388 699302164) (x292 699302164)))
(assert (x183 x602))
(assert (= (x70 (x244 x185 1)) (+ 1 (x70 x185))))
(assert (x183 x119))
(assert (= (x292 2991206654) (x388 2991206654)))
(assert (x183 x576))
(assert (x183 x733))
(assert (x183 x698))
(assert (x183 x368))
(assert (x183 x527))
(assert (= x16 (x70 (x388 x16))))
(assert (= 3133049407 (x70 (x292 3133049407))))
(assert (x183 x298))
(assert (= (x292 761373525) (x388 761373525)))
(assert (x183 x743))
(assert (x386 x137))
(assert (x183 x642))
(assert (x183 x600))
(assert (x183 x398))
(assert (x183 x330))
(assert (= (+ 1 (x70 x644)) (x70 (x244 x644 1))))
(assert (x183 x710))
(assert (x155 x590 x307))
(assert (x183 x389))
(assert (=> (<= x89 10000) (= (x388 x89) (x292 x89))))
(assert (x183 x443))
(assert (x155 x77 x57))
(assert (x299 x150))
(assert (x183 x306))
(assert (x183 x235))
(assert (=> (>= 10000 x100) (= (x388 x100) (x292 x100))))
(assert (x183 x383))
(assert (x183 x541))
(assert (x183 x572))
(assert (= (x388 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x292 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x70 (x292 699302164)) 699302164))
(assert (x183 x761))
(assert (x183 x83))
(assert (x183 x108))
(assert (x183 x84))
(assert (x183 x1))
(assert (x183 x104))
(assert (x183 x525))
(assert (x183 x75))
(assert (x386 x57))
(assert (x183 x150))
(assert (x183 x27))
(assert (= (x70 (x292 3647180086)) 3647180086))
(assert (x183 x246))
(assert (x183 x366))
(assert (x183 x707))
(assert (x183 x465))
(assert (x183 x484))
(assert (x183 x713))
(assert (x299 x279))
(assert (x183 x450))
(assert (x183 x654))
(assert (x183 x4))
(assert (x183 x402))
(assert (x183 x662))
(assert (x183 x584))
(assert (x386 x574))
(assert (x183 x348))
(assert (x183 x82))
(assert (x183 x453))
(assert (= (x70 (x244 x31 1)) (+ 1 (x70 x31))))
(assert (x183 x374))
(assert (x183 x381))
(assert (not x99))
(assert (x183 x563))
(assert (x183 x444))
(assert (x183 x380))
(assert (x183 x570))
(assert (=> (<= x238 10000) (= (x388 x238) (x292 x238))))
(assert (= (x292 1814410054) (x388 1814410054)))
(assert (x183 x675))
(assert (x183 x301))
(assert (x386 x683))
(assert (x183 x619))
(assert (x386 x349))
(assert (x183 x354))
(assert (x299 x120))
(assert (x183 x266))
(assert (= 436938878 (x70 (x292 436938878))))
(assert (x155 x511 x754))
(assert (x183 x294))
(assert (x183 x573))
(assert (x183 x214))
(assert (= (+ 1 (x70 x740)) (x70 (x244 x740 1))))
(assert (x183 x735))
(assert (x183 x261))
(assert (x183 x620))
(assert (x183 x47))
(assert (x183 x199))
(assert (= (+ 1 (x70 x296)) (x70 (x244 x296 1))))
(assert (=> (>= 10000 x692) (= (x292 x692) (x388 x692))))
(assert (= 3995103268 (x70 (x292 3995103268))))
(assert (x183 x441))
(assert (=> (>= 10000 x120) (= (x292 x120) (x388 x120))))
(assert (x183 x43))
(assert (x183 x38))
(assert (x299 x684))
(assert (= x147 true))
(assert (x20 x38))
(assert (x299 x472))
(assert (= (x388 1461501637330902918203684832716283019655932542975) (x292 1461501637330902918203684832716283019655932542975)))
(assert (x299 x159))
(assert (x183 x757))
(assert (x183 x574))
(assert (= (x70 (x292 1710941022)) 1710941022))
(assert (x183 x522))
(assert (=> (>= 10000 x367) (= (x388 x367) (x292 x367))))
(assert (= 2094874590 (x70 (x292 2094874590))))
(assert (x183 x531))
(assert (x299 x89))
(assert (x183 x2))
(assert (x183 x704))
(assert (x183 x708))
(assert (x20 x145))
(assert (x183 x397))
(assert (x183 x581))
(assert (x183 x754))
(assert (x183 x311))
(assert (x183 x528))
(assert (x183 x226))
(assert (x183 x349))
(assert (x299 x173))
(assert (x299 x194))
(assert (x183 x610))
(assert (x183 x264))
(assert (x183 x369))
(assert (= x684 (x70 (x388 x684))))
(assert (x299 x415))
(assert (x183 x663))
(assert (x183 x361))
(assert (x183 x545))
(assert (x183 x48))
(assert (x183 x613))
(assert (x183 x590))
(assert (=> (>= 10000 x17) (= (x292 x17) (x388 x17))))
(assert (= (x292 436938878) (x388 436938878)))
(assert (= (x388 3207937467) (x292 3207937467)))
(assert (x183 x639))
(assert (= (x292 558109909) (x388 558109909)))
(assert (x183 x672))
(assert (x183 x95))
(assert (x183 x23))
(assert (=> (<= x97 10000) (= (x292 x97) (x388 x97))))
(assert (x183 x615))
(assert (x183 x7))
(assert (=> (<= x261 10000) (= (x292 x261) (x388 x261))))
(assert (x183 x546))
(assert (x299 x80))
(assert (x183 x87))
(assert (x183 x352))
(assert (x299 x502))
(assert (x299 x261))
(assert (= x632 (x70 (x388 x632))))
(assert (x299 x559))
(assert (=> (<= x150 10000) (= (x388 x150) (x292 x150))))
(assert (x183 x29))
(assert (x183 x124))
(assert (x183 x539))
(assert (x299 x442))
(assert (x183 x42))
(assert (x183 x253))
(assert (x183 x263))
(assert (=> (<= x514 10000) (= (x388 x514) (x292 x514))))
(assert (= (x388 3647180086) (x292 3647180086)))
(assert (x183 x645))
(assert (=> (>= 10000 x173) (= (x388 x173) (x292 x173))))
(assert (= (+ 1 (x70 x275)) (x70 (x244 x275 1))))
(assert (x386 x220))
(assert (x183 x344))
(assert (x183 x262))
(assert (x183 x694))
(assert (= (x292 57896044618658097711785492504343953926634992332820282019728792003956564819967) (x388 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x183 x172))
(assert (= (x70 (x388 x256)) x256))
(assert (x183 x230))
(assert (= (x70 (x244 x526 1)) (+ 1 (x70 x526))))
(assert (x183 x137))
(assert (x299 x100))
(assert (x183 x355))
(assert (x183 x657))
(assert (x299 x702))
(assert (x183 x231))
(assert (x183 x182))
(assert (x183 x120))
(assert (= (+ (x70 x721) 1) (x70 (x244 x721 1))))
(assert (x183 x692))
(assert (x183 x173))
(assert (x183 x310))
(assert (= x120 (x70 (x388 x120))))
(assert (x183 x597))
(assert (x183 x287))
(assert (x183 x585))
(assert (= (x70 (x388 x173)) x173))
(assert (x183 x105))
(assert (x183 x697))
(assert (x183 x606))
(assert (x183 x488))
(assert (x183 x649))
(assert (x183 x58))
(assert (=> (<= x559 10000) (= (x292 x559) (x388 x559))))
(assert (x183 x407))
(assert (x183 x238))
(assert (x183 x583))
(assert (x155 x574 x85))
(assert (x20 x393))
(assert (= (+ (x70 x751) 1) (x70 (x244 x751 1))))
(assert (= (x70 (x388 x448)) x448))
(assert (x183 x13))
(assert (x183 x64))
(assert (x183 x151))
(assert (= x514 (x70 (x388 x514))))
(assert (= (x388 231365057) (x292 231365057)))
(assert (x183 x200))
(assert (= (x70 (x244 x192 1)) (+ (x70 x192) 1)))
(assert (x183 x113))
(assert (x183 x60))
(assert (= (x70 (x388 x261)) x261))
(assert (x183 x623))
(assert (x183 x385))
(assert (x183 x394))
(assert (= x279 (x70 (x388 x279))))
(assert (x183 x134))
(assert (= 2265735533 (x70 (x292 2265735533))))
(assert (x183 x431))
(assert (= (x70 (x292 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x183 x291))
(assert (x183 x471))
(assert (x386 x534))
(assert (x183 x430))
(assert (x386 x297))
(assert (= x99 (=> (and (and (= x564 3207937467) (= x411 x456) (<= 0 x469) (<= x176 1461501637330902918203684832716283019655932542975) (>= x251 0) (= x677 x651) x343 (<= 0 x278) (= x167 x494) x293 (= (not (= x30 x519)) x734) (<= x651 1461501637330902918203684832716283019655932542975) (= x441 x30) (>= x418 0) (= (not (= x184 x281)) x166) (>= 1461501637330902918203684832716283019655932542975 x469) (<= 0 x167) (= x501 x519) (>= x263 0) (>= x176 0) (= x441 x303) (>= x697 0) (not (> 2094874590 x564)) (>= 1461501637330902918203684832716283019655932542975 x194) (<= x167 115792089237316195423570985008687907853269984665640564039457584007913129639935) x622 (>= 1461501637330902918203684832716283019655932542975 x697) (<= 0 x182) x164 (< 0 x194) (>= x651 0) (= (not (= x7 x677)) x700) (= (not (= x146 x262)) x343) (>= 1461501637330902918203684832716283019655932542975 x472) (= x119 x516) (= x281 x441) (= (x72 (x388 x472) (x292 0) 0) x202) (= x664 (not (= x36 x121))) (>= x414 0) (<= x418 1461501637330902918203684832716283019655932542975) (= x697 x7) (= x262 x182) (>= 1461501637330902918203684832716283019655932542975 x263) (>= 1461501637330902918203684832716283019655932542975 x414) (= x504 (x62 (x388 x194))) (<= x119 1461501637330902918203684832716283019655932542975) (= x251 (x665 (x388 x194))) (= x36 x414) (< 0 x504) (<= 0 x119) (= (> (x62 (x388 x194)) 0) x350) (= x541 x184) (not (> 3207937467 x564)) (= (not (= x456 x303)) x622) x350 (= x263 x472) (<= x182 1461501637330902918203684832716283019655932542975) (= x469 x121) (= x190 x418) (= x176 x146) (<= x278 1461501637330902918203684832716283019655932542975) (= x167 (x112 x202)) (= (or x166 x700) x293) (> 3995103268 x564) (= (or x664 x734) x164)) (and (and (and (>= x669 0) (= x207 (x219 160)) (= x505 (x72 (x388 x573) (x292 2) 0)) (= (x244 x505 1) x751) (= (x219 224) x260) (= (x219 256) x642) (= (= x130 x602) x101) x101 (= (= x480 x581) x750) (< x298 3995103268) (<= x545 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x61 x487) x669) (= x441 x573) (= 3647180086 x298) (= x237 (x219 128)) (<= 0 x760) (> x726 0) (= x130 (x191 x751)) (>= x130 0) (>= x545 0) (not (= x298 3207937467)) (= (x244 x68 1) x384) (<= x480 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x602 (x140 x573)) (= (x510 x505) x480) (= (x219 192) x128) (= x581 (x752 x573)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x669) (not (< x298 3207937467)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x130) (<= x760 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x422 x384) x760) (= x627 x65) (= x545 (x400 x68)) (= (x62 (x388 x194)) x726) (not (< x298 2094874590)) (>= x480 0) x750 (= x68 (x244 x751 1)) (= x487 (x244 x384 1))) (and (and (and (= (x599 160) x27) (>= x587 0) (= (x62 (x388 x194)) x321) (not (= 558109909 x110)) (= x37 x617) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x111) (>= x111 0) (= (x69 x485) x111) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x587) (= (x72 (x388 x335) (x292 3) 0) x454) (not (= 436938878 x110)) (> 699302164 x110) (= (x280 x224) x587) (= x434 x115) (= x441 x335) (< x110 2094874590) (= (x244 x485 1) x224) (= x559 x469) (= x371 x221) (>= 1461501637330902918203684832716283019655932542975 x559) (= x110 606387804) (not (= x110 231365057)) (> x321 0) (= x199 x172) (> 1161348331 x110) (= x470 x208) (= (x599 128) x317) (= x485 (x72 (x388 x559) x454 0))) (and (and (and (= x129 (x62 (x388 x194))) (= (x197 x326) x450) (< x152 699302164) (= x697 x150) (< x152 2094874590) (>= 1461501637330902918203684832716283019655932542975 x150) (= x325 x457) (= x122 x620) (not (= 231365057 x152)) (= x441 x89) (>= x450 0) (= x450 x597) (= (x72 (x388 x89) (x292 4) 0) x272) (= x152 558109909) (<= x450 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x152 1161348331) (= x326 (x72 (x388 x150) x272 0)) (not (= 436938878 x152)) (> x129 0)) (and (and (= x597 x348) (<= x538 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x538) (= x44 x541) (= x538 x509) (= x282 558109909) (< x282 699302164) (= x538 (x197 x54)) (= x201 (x72 (x388 x44) (x292 4) 0)) (< x282 2094874590) (= x49 (x62 (x388 x194))) (not (= x282 436938878)) (not (= x282 231365057)) (= x415 x651) (<= x415 1461501637330902918203684832716283019655932542975) (< x282 1161348331) (> x49 0) (= x54 (x72 (x388 x415) x201 0))) (and (and (and (and (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x705) (> 2094874590 x337) (= x337 761373525) (= x705 x73) (not (= 699302164 x337)) (> 1161348331 x337) (not (> 699302164 x337)) (>= x705 0) (= (x62 (x388 x194)) x187) (> x187 0) (= x200 x369)) (and (and (and (and (< 0 x614) (not (< x453 1710941022)) (= (ite (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) (<= x188 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x188) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35)) (< x35 x188))) 1 0) x137) (> x204 0) (= x405 (x88 x87 x393)) (= x557 0) (<= 0 x528) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x28) (= x715 (and (< 0 x722) (= true (<= x722 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (>= 1461501637330902918203684832716283019655932542975 x17) (= x582 (x72 (x388 x17) x193 0)) (= (mod (* x40 x563) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x722) (= (x422 x160) x310) (= x14 (x244 x46 2)) (ite x249 x249 (not (< x666 x78))) (not (= 0 x563)) (= x268 (x315 x601)) (>= 1461501637330902918203684832716283019655932542975 x108) (= (x491 x290 x297) x349) (= x554 (= 0 x8)) (<= 0 x211) (>= x402 0) (= x336 x196) (= x288 x467) (= x95 (x681 (+ x10 x722))) (< 0 x385) (= x214 x238) (= x758 (x491 x511 x754)) (= (ite x703 1 0) x443) (= x143 (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336) true) (< 0 x336))) (= x273 (= x190 x117)) (not (> 2094874590 x34)) (= (ite (not x737) 1 0) x145) (= x557 (x491 x574 x85)) (ite x33 x33 (not (< x10 x704))) (>= x484 0) (= x17 x560) (= (x72 (x388 x108) (x292 1) 0) x206) (<= x211 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite (not x379) 1 0) x393) (= x33 (not x283)) (= x658 x45) (= (ite (not x476) 1 0) x645) (= (x72 (x388 x17) (x292 1) 0) x652) (= (not x630) x730) (= x496 x663) (ite x463 x463 (not (< x331 x28))) (= x249 (not x571)) (>= x310 0) (not (= x453 1710941022)) (= x8 (x681 (+ x40 x211))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x563 x8)) (= (not x715) x693) (= x117 x2) (= x394 (x88 x145 x758)) (= x625 (not x329)) (= x460 (= 1 x402)) (= x678 (x72 (x388 x80) (x292 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x355) (= x248 (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35)) (< 0 x35))) (= x71 (* x563 x8)) (< (* x522 x331) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x697 x572) (= x484 (x61 x12)) (= 0 x42) (= x34 3207937467) (= x614 (x88 x530 x38)) (not (> 1161348331 x453)) (= x263 x80) (= x291 x696) (= (x88 x226 x716) x423) (= x294 x78) (>= 1461501637330902918203684832716283019655932542975 x117) (= x589 (x244 x390 1)) (ite x625 x625 (not (> x306 x125))) (= (div 57896044618658097711785492504343953926634992332820282019728792003956564819967 x40) x546) (= x24 (x681 (+ x355 x722))) (>= x10 0) (= (ite (not x556) 1 0) x511) (= x709 (= x563 x431)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x313) (= x175 (ite (and (> x563 0) (= (<= x563 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) 1 0)) (= (ite (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563)) (< x563 0))) 1 0) x271) (= x655 (ite (not x676) 1 0)) (= x522 (x400 x14)) (= x699 (* x331 x522)) (= (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) true) (> x35 0)) x661) (ite x523 x523 (not (> x125 x306))) (= (ite (= x563 0) 0 (ite (= (< x563 57896044618658097711785492504343953926634992332820282019728792003956564819968) false) (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x563) x563 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x741 (- x563 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x563) x563 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x741 (- x563 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x188) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x484) (= (or (> x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 0 x35) (= (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x333) (= x641 (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336) true) (> x336 0))) (= x82 x71) (= x193 (x72 (x388 x238) (x292 4) 0)) (= x699 x675) (= x402 (x315 x365)) (= x683 (ite (and (> x35 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35))) 1 0)) (>= x417 0) (<= 0 x496) (= (x244 x436 1) x227) (= (x112 x678) x631) (= (> x542 x310) x556) (= x618 (x72 (x388 x238) (x292 2) 0)) (= x87 (x491 x368 x645)) (= (x681 (+ x40 x666)) x78) (= x630 (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722)) (> x722 0))) (= (= x108 x190) x403) (= (or (> x336 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x336 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336) true))) x476) (= x368 (ite (not x248) 1 0)) (= (ite x273 1 0) x257) (= x563 (x191 x227)) (ite x427 x427 (not (< x78 x666))) (= x552 (x491 x349 x137)) (= (ite (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563) true) (< 0 x563)) 1 0) x290) (= (x72 (x388 x108) x759 0) x390) (= x161 (ite x449 1 0)) (= x672 (ite (or x567 x554) 1 0)) (= x108 x469) (= (x88 x241 x659) x204) (= x663 x687) (= (x72 (x388 x108) x714 0) x109) (> x672 0) (= x238 x114) (= x576 x190) (= x431 (x140 x238)) (= (ite (not x133) 1 0) x220) (= x531 x631) (>= 1461501637330902918203684832716283019655932542975 x576) (not (< x34 3207937467)) (= x567 (not (< x82 x484))) (= (= x60 1) x561) (<= 0 x563) (= x329 (and (= (<= x336 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x336 0))) (= x42 (x491 x429 x534)) (= x189 (x72 (x388 x117) (x292 1) 0)) (= (ite (or (> x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35)) (< x35 0))) 1 0) x57) (= x75 x104) (<= x666 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x332 (x72 (x388 x238) (x292 2) 0)) (= x252 x417) (= (not x661) x427) (= (x72 (x388 x117) (x292 5) 0) x671) (not (= x453 1763987465)) (> x624 0) (>= 1461501637330902918203684832716283019655932542975 x528) (= (x72 (x388 x238) (x292 2) 0) x22) (= x259 (not x234)) (= x601 (x72 (x388 x190) x189 0)) (= x659 (ite (or x273 x449) 1 0)) (= x75 x196) (>= x125 0) (> x394 0) (= x297 (ite (or (> x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) true) (< x35 0))) 1 0)) (= (x72 (x388 x238) (x292 4) 0) x359) (< (* x563 x78) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x12 (x244 x22 4)) (= x226 (ite (not x143) 1 0)) (= 1 x478) (= x148 (not x39)) (>= x355 0) (= x649 (ite x567 1 0)) (= (ite (or (and (< x563 x342) (= (<= x563 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x342 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x342) (> x563 57896044618658097711785492504343953926634992332820282019728792003956564819967))) 1 0) x85) (ite x148 x148 (not (< x355 x24))) (= (+ x753 x240) x551) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35)) (< x35 0))) x571) (ite x730 x730 (not (< x24 x355))) (= x534 (ite (or (and (= (<= x563 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x316 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x316 x563)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x316) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563))) 1 0)) (= x241 (ite (not x333) 1 0)) (= x60 (x315 x595)) (> x405 0) (= (ite (or x561 x403) 1 0) x38) (<= 0 x522) (= x157 (not x755)) (= (ite (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35)) (< 0 x35)) 1 0) x727) (= x590 (x491 x175 x683)) (= (x510 x225) x417) (= (not x641) x463) (= (x477 x671) x355) (ite x259 x259 (not (> x331 x28))) (= (> x704 x313) x396) (<= 0 x631) (= x754 (ite (not x396) 1 0)) (= x17 x572) (= (ite (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563) true) (< x563 0)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563)) 1 0) x77) (<= x402 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1814410054 x453)) (<= 0 x28) (= x331 (x681 (+ x28 x75))) (= x731 x238) (= (x140 x731) x274) (ite x406 x406 (not (< x8 x211))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x268) (= x182 x2) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x60) (<= x80 1461501637330902918203684832716283019655932542975) (= x107 (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) true) (< 0 x35))) (= x46 (x72 (x388 x238) (x292 2) 0)) (= (ite x554 1 0) x474) (= (* x78 x563) x447) (= (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) true) (< 0 x35)) x737) (<= 0 x478) (= x716 (ite (or x460 x703) 1 0)) (= (x741 (- x125 x196)) x306) (= x133 (and (= true (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 0 x35))) (= x160 (x244 x332 3)) (= (x72 (x388 x238) (x292 2) 0) x436) (= x124 (ite x460 1 0)) (= x211 (x280 x492)) (= x225 (x72 (x388 x238) (x292 2) 0)) (= (x244 x109 1) x492) (= x235 x117) (= x441 x238) (= (x72 (x388 x190) x652 0) x365) x709 (= (not x107) x406) (> 2094874590 x453) (= (x510 x618) x666) (>= x576 0) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722) (and (> 0 x722) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722) true))) x39) (= x714 (x72 (x388 x238) (x292 3) 0)) (= (x491 x590 x307) x550) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x631) (= (ite (= 0 x35) 0 (ite (= (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x35) false) (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x35) x35 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x741 (- x35 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x35 57896044618658097711785492504343953926634992332820282019728792003956564819968) x35 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x741 (- x35 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x316) (<= x478 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x28 (x69 x109)) (<= x10 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x82 x675) x379) (= x759 (x72 (x388 x238) (x292 3) 0)) (= x40 x291) (= x739 (x72 (x388 x117) (x292 5) 0)) (= x229 (ite x403 1 0)) (= (ite (= x35 0) 0 (ite (= true (< x35 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (div 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x35) x35 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x741 (- x35 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (< x35 57896044618658097711785492504343953926634992332820282019728792003956564819968) x35 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x741 (- x35 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x342) (= (* x274 x252) x56) (= x447 x542) (= (- x551 x56) x695) (= (or (and (> 0 x722) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x722)) x283) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x522) (= (or (and (> 0 x336) (= true (<= x336 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336)) x676) (<= x496 1461501637330902918203684832716283019655932542975) (ite x157 x157 (not (> x8 x211))) (= x530 (x491 x220 x655)) (= (= x17 x190) x703) (<= x563 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x35 x40) (= x1 (x140 x214)) (= x385 (x62 (x388 x194))) (= x479 (x72 (x388 x17) x359 0)) (= (or (> x336 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x336) true) (< x336 0))) x744) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x310) x579 (= 0 x552) (= x234 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196) (and (< x196 0) (= true (<= x196 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x624 (x62 (x388 x194))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x125) (= (x72 (x388 x190) x206 0) x595) (>= x313 0) (= (x752 x238) x264) (>= x60 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x417) (= x574 (x491 x77 x57)) (= x579 (= x695 x467)) (= (not x744) x523) (>= x666 0) (= x25 x444) (= x753 x446) (= x619 (ite x561 1 0)) (ite x693 x693 (not (> x10 x704))) (= x449 (= x268 1)) (<= 0 x268) (= 0 x658) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x563)) (< x563 0)) (> x563 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x520 (= x264 x666)) (= x78 x499) (= (ite (> x563 x546) 1 0) x307) (= x550 0) x520 (> 3995103268 x34) (= (x491 x271 x727) x429) (= x453 1980270339) (< 0 x423) (= x704 (x681 (+ x10 x722))) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) (and (> 0 x35) (= (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x755) (= x240 (* x1 x294)) (= (x197 x479) x125)) (and (and (and (and (and (>= x724 0) (< x481 2094874590) (= x692 x441) (= x421 x647) (not (= 558109909 x481)) (= (x445 128) x462) (= x16 x469) (>= x269 0) (= (x426 x285) x724) (= x481 606387804) (= x285 (x72 (x388 x16) x437 0)) (= (x62 (x388 x194)) x648) (= x527 x606) (= x471 x635) (= x246 x302) (not (= x481 231365057)) (= x269 (x144 x580)) (> x648 0) (= x341 x626) (> 1161348331 x481) (= (x72 (x388 x692) (x292 3) 0) x437) (<= x16 1461501637330902918203684832716283019655932542975) (<= x724 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x580 (x244 x285 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x269) (= (x445 160) x134) (not (= 436938878 x481)) (< x481 699302164)) (and (and (and (and (= x690 558109909) (> 2094874590 x690) (= x256 x541) (< x690 699302164) (= (x62 (x388 x194)) x362) (not (= 436938878 x690)) (<= 0 x668) (= (x72 (x388 x279) x324 0) x569) (= x651 x279) (= x668 (x548 x569)) (not (= 231365057 x690)) (= (x72 (x388 x256) (x292 4) 0) x324) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x668) (= x657 x668) (>= 1461501637330902918203684832716283019655932542975 x279) (> 1161348331 x690) (< 0 x362) (= x584 x570)) (and (and (not (> 1161348331 x623)) (>= 1461501637330902918203684832716283019655932542975 x100) (= x657 x674) (< x623 2094874590) (= x670 (x742 x171)) (not (< x623 1710941022)) (<= x670 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x398 (x62 (x388 x194))) (not (= 1763987465 x623)) (= x397 x670) (not (= x623 1710941022)) (= (x72 (x388 x100) (x292 5) 0) x171) (>= x670 0) (= x623 1814410054) (= x100 x182) (< 0 x398)) (and (and (and (= x748 x95) (= x228 x345) (> 1161348331 x473) (= x498 (x62 (x388 x194))) (> 699302164 x473) (= x473 231365057) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x95) (< 0 x498) (>= x95 0) (> 2094874590 x473)) (and (and (and (= x708 x705) (>= x705 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x705) (> 2094874590 x154) (= x594 (x62 (x388 x194))) (< 0 x594) (= 761373525 x154) (not (= x154 699302164)) (= x276 x223) (not (> 699302164 x154)) (> 1161348331 x154)) (and (and (= 3133049407 x318) (not (> 2094874590 x318)) (<= x313 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x318 2746363844)) (not (= 2746363844 x318)) (> x123 0) (< x318 3207937467) (<= 0 x313) (= x105 x313) (= x353 x708) (not (= 3058907103 x318)) (= x123 (x62 (x388 x194))) (not (= 2991206654 x318))) (and (and (< x694 3207937467) (= 2507842956 x694) (>= x478 0) (not (= x694 2094874590)) (< x694 2746363844) (not (> 2094874590 x694)) (not (= 2265735533 x694)) (<= x478 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x558 x478) (> x728 0) (= x728 (x62 (x388 x194))) (= x105 x151)) (and (= x735 x407) (= x6 x231) (= x216 (= x6 x407)) (= x596 x558))))) (and (= (x72 (x388 x358) (x292 6) 0) x305) (= x650 (x536 x305)) (not (= x4 3995103268)) (= 4032373034 x4) (not (< x4 2094874590)) (= x168 x748) (not (< x4 3207937467)) (= (x62 (x388 x194)) x719) (= x358 x263) (< 0 x719) (<= x650 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x650) (<= x358 1461501637330902918203684832716283019655932542975) (not (< x4 3995103268)) (= x223 x650)))) (and (not (= 1763987465 x102)) (>= x495 0) (not (< x102 1161348331)) (= 1814410054 x102) (= x367 x176) (> 2094874590 x102) (<= x367 1461501637330902918203684832716283019655932542975) (not (= x102 1710941022)) (= x228 x495) (= x397 x376) (= x245 (x62 (x388 x194))) (<= x495 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x742 x412) x495) (= (x72 (x388 x367) (x292 5) 0) x412) (> x245 0) (not (> 1710941022 x102)))))) (and (> 1161348331 x488) (<= x247 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 2094874590 x488) (= x361 x547) (= x468 (x72 (x388 x253) (x292 4) 0)) (= x322 x410) (= (x548 x277) x247) (not (= 436938878 x488)) (= x253 x441) (> 699302164 x488) (= x488 558109909) (<= 0 x247) (= x247 x584) (>= 1461501637330902918203684832716283019655932542975 x159) (= (x72 (x388 x159) x468 0) x277) (> x142 0) (= x697 x159) (not (= 231365057 x488)) (= x142 (x62 (x388 x194))))) (and (= x501 x295) (= x667 606387804) (<= 0 x312) (= (x72 (x388 x442) x233 0) x482) (= (x426 x482) x660) (= (x144 x255) x312) (= (x72 (x388 x295) (x292 3) 0) x233) (= x586 x462) (not (= 231365057 x667)) (> x653 0) (= x465 x134) (not (= x667 558109909)) (> 699302164 x667) (>= 1461501637330902918203684832716283019655932542975 x442) (= x442 x414) (<= 0 x660) (= x255 (x244 x482 1)) (= (x62 (x388 x194)) x653) (< x667 1161348331) (not (= x667 436938878)) (> 2094874590 x667) (= x547 (x139 128)) (<= x660 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x312 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x410 (x139 160))))) (and (>= x158 0) (= x301 3647180086) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x158) (< 0 x18) (not (< x301 3207937467)) (= x626 (x533 128)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x344) x74 (= (x533 256) x421) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x638) x375 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x507) (= x344 (x191 x629)) (>= x339 0) (= x600 (x86 x684)) (= x684 x411) (= (= x344 x525) x74) (= x507 (x163 x526)) (<= x339 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x61 x186) x638) (>= x507 0) (<= 0 x344) (= x217 x58) (= x526 (x72 (x388 x684) (x292 2) 0)) (= x629 (x244 x526 1)) (= (x400 x644) x158) (not (> 2094874590 x301)) (= x635 (x533 192)) (= x250 x452) (= (x62 (x388 x194)) x18) (= x354 x549) (= (x422 x31) x339) (= x761 x539) (= (x140 x684) x525) (<= 0 x638) (< x301 3995103268) (= (x244 x31 1) x186) (= x246 (x533 224)) (not (= 3207937467 x301)) (= (x244 x644 1) x31) (= x375 (= x600 x507)) (= (x244 x629 1) x644) (= (x533 160) x527) (= x96 x198))) (and (= x96 (x723 128)) (= (x191 x721) x64) (= x419 3647180086) (>= x743 0) (= x721 (x244 x296 1)) (<= 0 x713) (= x613 (x61 x458)) (<= x64 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x372) (<= x613 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x400 x740) x713) (>= x613 0) (= x21 x374) (= x66 (x140 x702)) (>= x352 0) (= x637 (= x66 x64)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) (= x296 (x72 (x388 x702) (x292 2) 0)) x637 (= x441 x702) (= (x244 x740 1) x192) (not (> 3207937467 x419)) (> 3995103268 x419) (= x250 (x723 160)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x713) (not (< x419 2094874590)) (= x352 (x422 x192)) (= x549 (x723 256)) (<= 0 x64) (= x11 (x86 x702)) x711 (= x58 (x723 192)) (= x743 (x163 x296)) (= (x244 x192 1) x458) (= (x723 224) x539) (not (= x419 3207937467)) (= x711 (= x11 x743)) (= (x62 (x388 x194)) x372) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x743) (= x740 (x244 x721 1)))) (and (= (x315 x242) x360) (< x383 2094874590) (> 1710941022 x383) (= x278 x514) (= x242 (x72 (x388 x514) x59 0)) (= x383 1161348331) (>= 1461501637330902918203684832716283019655932542975 x502) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x360) (> x508 0) (= (x62 (x388 x194)) x508) (<= x514 1461501637330902918203684832716283019655932542975) (= x59 (x72 (x388 x502) (x292 1) 0)) (= x21 x360) (>= x360 0) (= x531 x231) (not (> 1161348331 x383)) (= x502 x263)))) (and (not (= x757 2094874590)) (= x710 (x62 (x388 x194))) (= x478 x25) (= x615 x679) (< x757 3207937467) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x478) (not (= x757 2265735533)) (= x757 2507842956) (not (> 2094874590 x757)) (<= 0 x478) (< 0 x710) (< x757 2746363844))) (and (= x73 x364) (> x733 0) (not (> 2094874590 x131)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x313) (>= x313 0) (not (= 2746363844 x131)) (= 3133049407 x131) (not (< x131 2746363844)) (= x615 x313) (not (= x131 3058907103)) (< x131 3207937467) (= (x62 (x388 x194)) x733) (not (= x131 2991206654))))) (and (= (x62 (x388 x194)) x680) (not (< x490 2094874590)) (<= 0 x654) (not (> 3207937467 x490)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x654) (not (= 3995103268 x490)) (= x654 (x536 x608)) (= x654 x369) (= x490 4032373034) (= x263 x120) (< 0 x680) (= (x72 (x388 x120) (x292 6) 0) x608) (>= 1461501637330902918203684832716283019655932542975 x120) (not (< x490 3995103268)) (= x178 x640))) (and (> x732 0) (< x521 699302164) (= x521 231365057) (<= x10 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x347 x43) (< x521 1161348331) (= (x62 (x388 x194)) x732) (> 2094874590 x521) (= x178 x10) (>= x10 0))) (and (= x363 (x62 (x388 x194))) (<= 0 x311) (= x585 x176) (> 2094874590 x432) (= x347 x311) (< 0 x363) (not (> 1710941022 x432)) (= x311 (x477 x153)) (not (< x432 1161348331)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) (= 1814410054 x432) (= x153 (x72 (x388 x585) (x292 5) 0)) (<= x585 1461501637330902918203684832716283019655932542975) (= x745 x435) (not (= x432 1763987465)) (not (= 1710941022 x432)))) (and (not (> 1710941022 x409)) (= x509 x63) (= (x72 (x388 x632) (x292 5) 0) x323) (= x409 1814410054) (<= 0 x213) (> x29 0) (< x409 2094874590) (= x182 x632) (= x213 (x477 x323)) (not (= 1710941022 x409)) (<= x632 1461501637330902918203684832716283019655932542975) (<= x213 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1763987465 x409)) (= x213 x435) (not (< x409 1161348331)) (= (x62 (x388 x194)) x29))))) (and (= x656 x414) (<= x593 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x706 (x72 (x388 x656) x50 0)) (< x328 699302164) (<= x3 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x3) (< x328 2094874590) (= (x62 (x388 x194)) x41) (= 606387804 x328) (not (= x328 558109909)) (= x317 x725) (= (x746 160) x122) (= x50 (x72 (x388 x448) (x292 3) 0)) (= x325 (x746 128)) (<= x656 1461501637330902918203684832716283019655932542975) (= x448 x501) (= x515 (x244 x706 1)) (> 1161348331 x328) (= x3 (x69 x706)) (= x593 (x280 x515)) (= x27 x254) (< 0 x41) (not (= x328 231365057)) (>= x593 0) (not (= x328 436938878))))) (and (<= 0 x543) (= x83 3647180086) (= x543 (x400 x404)) (>= x232 0) (= x411 x97) (= x93 (x752 x97)) (= (x244 x688 1) x404) (<= 0 x392) (> 3995103268 x83) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x662) (= (x497 256) x470) (= (x497 128) x371) (= x611 (x140 x97)) (not (< x83 2094874590)) x612 x340 (= x340 (= x662 x611)) (<= x543 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x162) (= x275 (x244 x404 1)) (not (= x83 3207937467)) (= x662 (x191 x688)) (= (x497 192) x199) (not (< x83 3207937467)) (= x688 (x244 x185 1)) (= x180 x642) (= (x244 x275 1) x486) (= (x72 (x388 x97) (x292 2) 0) x185) (<= x392 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x260 x729) (<= x92 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x662) (= x94 x237) (<= x232 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x612 (= x232 x93)) (= x483 x207) (= x115 (x497 160)) (= x128 x610) (>= x92 0) (= (x422 x275) x392) (= (x510 x185) x232) (= (x62 (x388 x194)) x162) (= (x61 x486) x92) (= (x497 224) x37)))) (and (= x494 x735) (>= 1461501637330902918203684832716283019655932542975 x173) (= x173 x278) (= x627 x555) (< 0 x149) (= (x62 (x388 x194)) x149) (not (> 1161348331 x23)) (<= 0 x555) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x555) (= (x72 (x388 x173) x438 0) x577) (<= x261 1461501637330902918203684832716283019655932542975) (> 1710941022 x23) (< x23 2094874590) (= x23 1161348331) (= x261 x263) (= x555 (x315 x577)) (= x438 (x72 (x388 x261) (x292 1) 0))))) (and (=> (and (= x430 x65) (= x455 (= x707 x430)) (= x374 x707)) (and (=> (and (= x212 x540) (= x212 x198) (= x738 x94) (= (+ x609 x377) x327) (= x466 x696) (= (ite (<= x466 57896044618658097711785492504343953926634992332820282019728792003956564819967) x466 (- x466 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x377) (= x598 (= x540 x327)) (= x609 x738)) (and x598 (=> (and (= (= x287 x51) x391) (= x452 x51) (= x483 x287)) (and x391 (=> (and (= x26 x610) (= x689 x217) (= x562 (= x26 x689))) (and (=> (and (= x729 x286) (= x141 x761) (= x135 (= x141 x286))) (and (=> (and (= (= x304 x218) x138) (= x218 x180) (= x354 x304)) (and x138 (=> (and (= x518 x221) (= x341 x380) (= x686 (= x380 x518))) (and (=> (and (= (= x381 x52) x265) (= x381 x606) (= x434 x52)) (and (=> (and (= x172 x222) (= x113 x471) (= (= x222 x113) x320)) (and (=> (and (= (= x433 x749) x565) (= x617 x433) (= x749 x302)) (and (=> (and (= x628 x647) (= x356 x208) (= x578 (= x356 x628))) (and x578 (=> (and (= x725 x605) (= (= x603 x575) x720) (= x308 x575) (= x266 x104) (= x592 x605) (= x529 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x266) x266 (- x266 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (+ x592 x529) x603) (= x586 x308)) (and x720 (=> (and (= (ite (<= x116 57896044618658097711785492504343953926634992332820282019728792003956564819967) x116 (- x116 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x591) (= x451 (+ x544 x591)) (= x5 x254) (= (= x451 x588) x370) (= x696 x116) (= x5 x544) (= x553 x465) (= x588 x553)) (and (=> (and (= (= x13 x48) x621) (= x48 x457) (= x13 x361)) (and x621 (=> (and (= x464 x322) (= x236 x620) (= (= x236 x464) x646)) (and x646 (=> (and (= x691 x673) (= x309 x104) (= x366 x506) (= x348 x691) (= x489 (- x673 x378)) (= (= x506 x489) x203) (= x366 x570) (= x378 (ite (<= x309 57896044618658097711785492504343953926634992332820282019728792003956564819967) x309 (- x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and x203 (=> (and (= (= x616 x330) x210) (= x63 x616) (= x674 x330)) (and x210 (=> (and (= x376 x408) (= x440 (+ x32 x205)) (= x696 x459) (= x334 (= x284 x440)) (= (* x126 x395) x205) (= x79 x483) (= x395 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x459) x459 (- x459 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x230 x32) (= x745 x230) (= x126 x79) (= x408 x284)) (and x334 (=> (and (= x607 x43) (= x345 x357) (= (= x357 x607) x399)) (and (=> (and (= x276 x424) (= x698 x200) (= x756 (= x698 x424))) (and x756 (=> (and (= (+ x701 x401) x170) (= x696 x682) (= x174 x568) (= x401 x84) (= (= x170 x177) x15) (= x177 x583) (= x568 x483) (= x701 (* x747 x174)) (= (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x682) x682 (- x682 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x747) (= x583 x168) (= x640 x84)) (and (=> (and (= x270 (= x81 x634)) (= x353 x81) (= x364 x634)) (and (=> (and (= x47 x151) (= x712 (= x136 x47)) (= x136 x679)) (and x712 (=> (and (= x596 x389) (= x243 x444) (= (= x389 x243) x239)) x239))) x270)) x15)))) x399)))))))))))) x370)))))) x565)) x320)) x265)) x686)))) x135)) x562)))))) x455)) x216))))
(assert (x183 x111))
(assert (x183 x684))
(assert (x183 x560))
(assert (x183 x658))
(assert (x183 x467))
(assert (x346 x530 x38))
(assert (x386 x590))
(assert (x386 x727))
(assert (= (x70 (x388 x656)) x656))
(assert (x183 x128))
(assert (x183 x415))
(assert (x183 x421))
(assert (x183 x110))
(assert (x299 x17))
(assert (x183 x145))
(assert (x183 x281))
(assert (x183 x511))
(assert (x183 x640))
(assert (=> (>= 10000 x502) (= (x292 x502) (x388 x502))))
(assert (x183 x79))
(assert (x183 x635))
(assert (x20 x87))
(assert (x183 x34))
(assert (x183 x41))
(assert (= (x70 (x244 x390 1)) (+ (x70 x390) 1)))
(assert (= (x70 (x388 x194)) x194))
(assert (x299 x97))
(assert (x183 x304))
(assert (x183 x321))
(assert (= (x70 (x244 x706 1)) (+ 1 (x70 x706))))
(assert (x299 x585))
(assert (= x502 (x70 (x388 x502))))
(assert (x183 x405))
(assert (x183 x650))
(assert (x183 x122))
(assert (x183 x628))
(assert (x183 x178))
(assert (x183 x100))
(assert (x183 x472))
(assert (x183 x726))
(assert (x155 x368 x645))
(assert (x183 x207))
(assert (x183 x325))
(assert (x183 x719))
(assert (= (x292 1980270339) (x388 1980270339)))
(assert (x183 x212))
(assert (x183 x683))
(assert (x183 x271))
(assert (x183 x6))
(assert (x183 x593))
(assert (x183 x433))
(assert (x183 x729))
(assert (x386 x429))
(assert (x183 x456))
(assert (x183 x180))
(assert (x183 x222))
(assert (= (x70 (x244 x404 1)) (+ 1 (x70 x404))))
(assert (x183 x341))
(assert (x183 x188))
(assert (x183 x371))
(assert (x183 x237))
(assert (x183 x131))
(assert (x183 x268))
(assert (x183 x136))
(assert (x183 x363))
(assert (x183 x247))
(assert (x183 x121))
(assert (x183 x448))
(assert (x183 x335))
(assert (x20 x226))
(assert (x183 x44))
(assert (x183 x409))
(assert (x183 x393))
(assert (x183 x638))
(assert (x183 x501))
(assert (= (x70 (x388 x253)) x253))
(assert (= (x70 (x292 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x183 x490))
(assert (x183 x594))
(assert (x183 x187))
(assert (x183 x748))
(assert (=> (>= 10000 x253) (= (x388 x253) (x292 x253))))
(assert (= (x388 4032373034) (x292 4032373034)))
(assert (x183 x96))
(assert (x183 x196))
(assert (x183 x611))
(assert (x183 x26))
(assert (x183 x534))
(assert (= (+ (x70 x109) 1) (x70 (x244 x109 1))))
(assert (x183 x519))
(assert (=> (<= x472 10000) (= (x388 x472) (x292 x472))))
(assert (x183 x73))
(assert (x183 x605))
(assert (x183 x345))
(assert (x183 x209))
(assert (x183 x716))
(assert (x183 x92))
(assert (x183 x687))
(assert (x183 x411))
(assert (=> (>= 10000 x279) (= (x292 x279) (x388 x279))))
(assert (= (x388 2746363844) (x292 2746363844)))
(assert (x183 x702))
(assert (x183 x347))
(assert (= (x388 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x292 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x183 x632))
(assert (x183 x670))
(assert (x183 x353))
(assert (x183 x502))
(assert (x155 x429 x534))
(assert (x183 x478))
(assert (x20 x758))
(assert (x183 x413))
(assert (x183 x5))
(assert (x183 x553))
(assert (= x100 (x70 (x388 x100))))
(assert (x183 x617))
(assert (x183 x221))
(assert (x183 x198))
(assert (x183 x40))
(assert (x183 x481))
(assert (= (x70 (x388 x692)) x692))
(assert (=> (>= 10000 x295) (= (x292 x295) (x388 x295))))
(assert (x183 x705))
(assert (x183 x141))
(assert (x183 x382))
(assert (x183 x102))
(assert (x299 x253))
(assert (x183 x679))
(assert (x183 x496))
(assert (x299 x16))
(assert (x386 x511))
(assert (x183 x518))
(assert (x183 x114))
(assert (x183 x125))
(assert (x183 x232))
(assert (x386 x271))
(assert (= x44 (x70 (x388 x44))))
(assert (x183 x677))
(assert (x346 x241 x659))
(assert (x183 x459))
(assert (x386 x754))
(assert (x183 x146))
(assert (x183 x279))
(assert (x183 x607))
(assert (x183 x276))
(assert (x299 x573))
(assert (x183 x218))
(assert (x183 x656))
(assert (x183 x257))
(assert (x183 x45))
(assert (= 1763987465 (x70 (x292 1763987465))))
(assert (= x442 (x70 (x388 x442))))
(assert (x183 x149))
(assert (x183 x498))
(assert (x183 x337))
(assert (x183 x475))
(assert (x183 x8))
(assert (x155 x271 x727))
(assert (x183 x408))
(assert (x183 x254))
(assert (x183 x93))
(assert (x183 x204))
(assert (x183 x424))
(assert (= (x70 (x292 1980270339)) 1980270339))
(assert (x346 x226 x716))
(assert (x183 x85))
(assert (x183 x691))
(assert (x386 x77))
(assert (x183 x564))
(assert (=> (<= x415 10000) (= (x292 x415) (x388 x415))))
(assert (= (x70 (x388 x150)) x150))
(assert (x183 x302))
(assert (x183 x179))
(assert (x386 x368))
(assert (x183 x175))
(assert (= 761373525 (x70 (x292 761373525))))
(assert (= x472 (x70 (x388 x472))))
(assert (x183 x738))
(assert (x183 x648))
(assert (= 2991206654 (x70 (x292 2991206654))))
(assert (x183 x627))
(assert (x183 x653))
(assert (x183 x753))
(assert (= (+ (x70 x332) 3) (x70 (x244 x332 3))))
(assert (= (x70 (x292 1814410054)) 1814410054))
(assert (x183 x184))
(assert (x183 x190))
(assert (x183 x217))
(assert (x183 x358))
(assert (x183 x339))
(assert (x183 x690))
(assert (x183 x49))
(assert (x183 x161))
(assert (x183 x728))
(assert (x20 x659))
(assert (x183 x168))
(assert (x183 x97))
(assert (x183 x312))
(assert (x346 x145 x758))
(assert (= (x388 1710941022) (x292 1710941022)))
(assert (x183 x514))
(assert (x299 x656))
(assert (x183 x442))
(assert (x299 x358))
(assert (=> (<= x44 10000) (= (x292 x44) (x388 x44))))
(assert (= (x292 2094874590) (x388 2094874590)))
(assert (x183 x480))
(assert (x183 x483))
(assert (x183 x115))
(assert (x20 x530))
(assert (x183 x731))
(assert (x183 x243))
(assert (x183 x28))
(assert (= (x388 3058907103) (x292 3058907103)))
(assert (x183 x643))
(assert (= (x70 (x292 57896044618658097711785492504343953926634992332820282019728792003956564819968)) 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x183 x469))
(assert (x183 x322))
(assert (x183 x372))
(assert (x183 x154))
(assert (x183 x722))
(assert (x183 x725))
(assert (x155 x290 x297))
(assert (x183 x464))
(assert (x183 x129))
(assert (= (x70 (x244 x629 1)) (+ (x70 x629) 1)))
(assert (x183 x130))
(assert (x183 x362))
(assert (x183 x252))
(assert (x183 x52))
(assert (x183 x78))
(assert (x183 x414))
(assert (x183 x507))
(assert (= (+ (x70 x482) 1) (x70 (x244 x482 1))))
(assert (x183 x288))
(assert (= (x70 (x292 3058907103)) 3058907103))
(assert (=> (>= 10000 x117) (= (x292 x117) (x388 x117))))
(assert (x299 x238))
(assert (x183 x651))
(assert (x183 x521))
(assert (x183 x159))
(assert (x183 x417))
(assert (x299 x514))
(assert (x183 x142))
(assert (= (x292 2265735533) (x388 2265735533)))
(assert (= (x70 (x244 x68 1)) (+ 1 (x70 x68))))
(assert (x299 x632))
(assert (x183 x552))
(assert (x183 x568))
(assert (x183 x17))
(assert (= (x70 (x244 x505 1)) (+ 1 (x70 x505))))
(assert (= x702 (x70 (x388 x702))))
(assert (x183 x760))
(assert (x183 x587))
(assert (x183 x10))
(assert (x183 x309))
(assert (x299 x335))
(assert (x299 x108))
(assert (= (x70 (x388 x335)) x335))
(assert (= 2507842956 (x70 (x292 2507842956))))
(assert (x183 x626))
(assert (x183 x364))
(assert (x183 x419))
(assert (x183 x356))
(assert (x183 x558))
(assert (x183 x685))
(assert (x183 x251))
(assert (x183 x176))
(assert (x183 x555))
(assert (=> (>= 10000 x573) (= (x388 x573) (x292 x573))))
(assert (x183 x256))
(assert (x183 x208))
(assert (= 606387804 (x70 (x292 606387804))))
(assert (x183 x669))
(assert (x183 x745))
(assert (x183 x80))
(assert (=> (>= 10000 x656) (= (x388 x656) (x292 x656))))
(assert (x183 x542))
(assert (x183 x682))
(assert (x183 x317))
(assert (x183 x328))
(assert (x299 x44))
(assert (x183 x286))
(assert (x20 x716))
(assert (x183 x749))
(assert (x183 x278))
(assert (x183 x94))
(assert (x183 x655))
(assert (=> (>= 10000 x335) (= (x388 x335) (x292 x335))))
(assert (= (x70 (x292 558109909)) 558109909))
(assert (x183 x307))
(assert (x346 x87 x393))
(assert (x386 x307))
(assert (x183 x18))
(assert (x183 x495))
(assert (=> (<= x684 10000) (= (x292 x684) (x388 x684))))
(assert (= (x70 (x388 x17)) x17))
(assert (x183 x538))
(assert (= (x70 (x244 x485 1)) (+ (x70 x485) 1)))
(assert (x183 x16))
(assert (x183 x11))
(assert (= 231365057 (x70 (x292 231365057))))
(assert (=> (>= 10000 x159) (= (x292 x159) (x388 x159))))
(assert (x183 x250))
(assert (x183 x474))
(assert (=> (>= 10000 x80) (= (x292 x80) (x388 x80))))
(assert (x183 x376))
(assert (x183 x331))
(assert (x183 x470))
(assert (x183 x410))
(assert (x183 x282))
(assert (x183 x435))
(assert (=> (>= 10000 x256) (= (x388 x256) (x292 x256))))
(assert (= (x70 (x244 x22 4)) (+ 4 (x70 x22))))
(assert (= x159 (x70 (x388 x159))))
(assert (x183 x668))
(assert (x183 x660))
(assert (x183 x586))
(assert (x183 x367))
(assert (x183 x631))
(assert (x183 x666))
(assert (x155 x220 x655))
(assert (x386 x175))
(assert (x183 x494))
(assert (=> (<= x585 10000) (= (x292 x585) (x388 x585))))
(assert (= (x70 (x388 x190)) x190))
(assert (x183 x559))
(assert (= 3207937467 (x70 (x292 3207937467))))
(assert (x183 x290))
(assert (= x367 (x70 (x388 x367))))
(assert (= 4032373034 (x70 (x292 4032373034))))
(assert (x183 x167))
(assert (x183 x77))
(assert (x183 x21))
(assert (x183 x229))
(assert (= x108 (x70 (x388 x108))))
(assert (x183 x504))
(assert (= (+ (x70 x688) 1) (x70 (x244 x688 1))))
(assert (x183 x634))
(assert (x183 x260))
(assert (x299 x367))
(assert (= 1161348331 (x70 (x292 1161348331))))
(assert (x183 x30))
(assert (= x238 (x70 (x388 x238))))
(assert (= x573 (x70 (x388 x573))))
(assert (=> (<= x194 10000) (= (x388 x194) (x292 x194))))
(assert (x183 x547))
(assert (x299 x448))
(assert (=> (<= x190 10000) (= (x292 x190) (x388 x190))))
(assert (= (x388 1161348331) (x292 1161348331)))
(assert (x183 x473))
(assert (= (x70 (x244 x436 1)) (+ (x70 x436) 1)))
(assert (x183 x25))
(assert (x183 x213))
(assert (= (x70 (x388 x415)) x415))
(assert (x183 x342))
(assert (x386 x645))
(assert (x183 x508))
(assert (x183 x557))
(assert (x183 x392))
(assert (=> (>= 10000 x632) (= (x292 x632) (x388 x632))))
(assert (= (x70 (x244 x384 1)) (+ 1 (x70 x384))))
(assert (x299 x256))
(assert (x183 x596))
(assert (x183 x680))
(assert (=> (>= 10000 x442) (= (x388 x442) (x292 x442))))
(assert (x183 x732))
(assert (x183 x194))
(assert (x183 x158))
(assert (x386 x290))
(assert (x183 x303))
(assert (x183 x274))
(assert (= (x388 2507842956) (x292 2507842956)))
(assert (x183 x236))
(assert (x183 x37))
(assert (= (x70 (x388 x295)) x295))
(assert (x183 x3))
(assert (= (x388 606387804) (x292 606387804)))
(assert (x183 x336))
(assert (x20 x241))
(assert (x183 x24))
(assert (x183 x696))
(assert (x386 x85))
(assert (x183 x81))
(assert (x183 x462))
(assert (x183 x63))
(assert (x183 x674))
(assert (x183 x36))
(assert (x183 x89))
(assert (x155 x349 x137))
(assert (x183 x269))
(assert (x183 x530))
(assert (x183 x35))
(assert (x299 x692))
(assert (x183 x57))
(assert (= (+ (x70 x46) 2) (x70 (x244 x46 2))))
(assert (x183 x724))
(assert (x183 x51))
(assert (x183 x452))
(assert (x183 x223))
(assert (x183 x758))
(assert (x183 x466))
(assert (= x585 (x70 (x388 x585))))
(assert (x183 x316))
(assert (x183 x429))
(assert (x183 x66))
(assert (= x559 (x70 (x388 x559))))
(assert (x183 x116))
(assert (x183 x65))
(assert (x183 x727))
(assert (x183 x550))
(assert (x183 x220))
(assert (x183 x509))
(assert (x183 x123))
(assert (x183 x659))
(assert (x183 x162))
(assert (x183 x117))
(assert (=> (>= 10000 x702) (= (x292 x702) (x388 x702))))
(assert (x183 x313))
(assert (x299 x117))
(assert (= (x70 (x292 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x70 (x388 x117)) x117))
(assert (x183 x152))
(assert (x386 x655))
(assert (= (x70 (x388 x80)) x80))
(assert (= (x388 3133049407) (x292 3133049407)))
(assert (x183 x457))
(assert (x183 x549))
(assert (x183 x543))
(assert (x183 x297))
(assert (x183 x241))
(assert (x183 x357))
(assert (= (x70 (x388 x358)) x358))
(assert (x183 x624))
(assert (=> (>= 10000 x108) (= (x388 x108) (x292 x108))))
(assert (x183 x616))
(assert (x183 x432))
(assert (x183 x245))
(assert (x183 x689))
(assert (= (x388 3995103268) (x292 3995103268)))
(assert (= (x70 (x388 x97)) x97))
(assert (= (x292 1763987465) (x388 1763987465)))
(assert (=> (<= x16 10000) (= (x292 x16) (x388 x16))))
(assert (x299 x190))
(assert (x183 x446))
(assert (x155 x175 x683))
(assert (x183 x295))
(assert (x183 x434))
(assert (x183 x647))
(assert (x183 x211))
(assert (x183 x228))
(assert (=> (>= 10000 x358) (= (x292 x358) (x388 x358))))
(assert (= x89 (x70 (x388 x89))))
(assert (x183 x318))
(assert (x299 x295))
(assert (x183 x516))
(assert (x183 x418))
(assert (x183 x614))
(assert (=> (>= 10000 x448) (= (x292 x448) (x388 x448))))
(assert (= (x70 (x244 x285 1)) (+ (x70 x285) 1)))
(assert (x183 x308))
(check-sat)
(exit)