(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x96 0)) (((x134 (x218 x96) (x270 x96) (x317 Int)) (x114 (x306 Int)) (x24 (x175 x96) (x292 Int)))))
(declare-fun x199 () Bool)
(declare-fun x184 () x96)
(declare-fun x76 () Int)
(declare-fun x133 () Bool)
(declare-fun x185 () Int)
(declare-fun x63 () Int)
(declare-fun x143 () Int)
(declare-fun x176 (Int Int) Int)
(declare-fun x123 () Bool)
(declare-fun x284 () Int)
(declare-fun x219 () Int)
(declare-fun x124 () Int)
(declare-fun x314 () Int)
(declare-fun x7 () Bool)
(declare-fun x145 () Bool)
(declare-fun x31 () Bool)
(declare-fun x253 () Bool)
(declare-fun x249 (x96) Int)
(declare-fun x220 () Bool)
(declare-fun x146 () Int)
(declare-fun x113 () Bool)
(declare-fun x67 () Int)
(declare-fun x169 () Bool)
(declare-fun x316 () Int)
(declare-fun x183 () Bool)
(declare-fun x16 () Int)
(declare-fun x6 () Bool)
(declare-fun x138 () Int)
(declare-fun x135 () Int)
(declare-fun x137 () Bool)
(declare-fun x21 () Bool)
(declare-fun x205 () Int)
(declare-fun x303 () x96)
(declare-fun x26 () Int)
(declare-fun x107 () Int)
(declare-fun x2 () x96)
(declare-fun x61 () Int)
(declare-fun x193 () Int)
(declare-fun x212 (Int) Int)
(declare-fun x177 () Bool)
(declare-fun x127 () Int)
(declare-fun x48 () Bool)
(declare-fun x8 () Int)
(declare-fun x25 () Bool)
(declare-fun x276 () Int)
(declare-fun x268 () Int)
(declare-fun x149 () x96)
(declare-fun x272 () Bool)
(declare-fun x112 () Int)
(declare-fun x179 () Int)
(declare-fun x214 () Int)
(declare-fun x172 () Int)
(declare-fun x9 () Int)
(declare-fun x309 () Int)
(declare-fun x225 () Int)
(declare-fun x242 (Int) x96)
(declare-fun x39 () Bool)
(declare-fun x279 () Int)
(declare-fun x148 (x96) Int)
(declare-fun x65 () Bool)
(declare-fun x278 () Int)
(declare-fun x210 () Int)
(declare-fun x248 () Int)
(declare-fun x194 () Bool)
(declare-fun x89 () Int)
(declare-fun x40 () Int)
(declare-fun x28 () Bool)
(declare-fun x295 () Bool)
(declare-fun x286 () Int)
(declare-fun x180 () x96)
(declare-fun x102 () Int)
(declare-fun x267 () Bool)
(declare-fun x320 () x96)
(declare-fun x144 () Int)
(declare-fun x81 () Int)
(declare-fun x208 () Int)
(declare-fun x117 () Bool)
(declare-fun x164 () Int)
(declare-fun x103 (Int) Int)
(declare-fun x224 () Int)
(declare-fun x69 () Int)
(declare-fun x165 () Int)
(declare-fun x252 () Bool)
(declare-fun x171 () Bool)
(declare-fun x313 (Int) Int)
(declare-fun x221 () Int)
(declare-fun x287 () Int)
(declare-fun x178 () Int)
(declare-fun x14 () Bool)
(declare-fun x58 () Int)
(declare-fun x312 () Bool)
(declare-fun x111 () Int)
(declare-fun x239 () Int)
(declare-fun x322 () Int)
(declare-fun x86 () Int)
(declare-fun x227 () Int)
(declare-fun x203 () Bool)
(declare-fun x226 () Int)
(declare-fun x71 () Int)
(declare-fun x257 () Int)
(declare-fun x132 () Int)
(declare-fun x229 () Int)
(declare-fun x46 () Int)
(declare-fun x101 () Bool)
(declare-fun x266 () Int)
(declare-fun x321 () Bool)
(declare-fun x261 () x96)
(declare-fun x190 () Int)
(declare-fun x34 () Bool)
(declare-fun x17 () Bool)
(declare-fun x87 () Int)
(declare-fun x273 () Bool)
(declare-fun x195 () Bool)
(declare-fun x302 () Bool)
(declare-fun x187 () Bool)
(declare-fun x45 () Bool)
(declare-fun x256 () Bool)
(declare-fun x290 () Int)
(declare-fun x281 () Bool)
(declare-fun x56 () Int)
(declare-fun x315 () Int)
(declare-fun x168 () Int)
(declare-fun x162 () Int)
(declare-fun x128 () Bool)
(declare-fun x92 () Bool)
(declare-fun x136 () Int)
(declare-fun x120 () Int)
(declare-fun x207 () Int)
(declare-fun x197 () Int)
(declare-fun x52 (x96) Int)
(declare-fun x106 () Int)
(declare-fun x240 () Int)
(declare-fun x246 () Int)
(declare-fun x116 () Bool)
(declare-fun x264 () Int)
(declare-fun x23 () x96)
(declare-fun x95 () Int)
(declare-fun x296 () Int)
(declare-fun x232 (x96) Int)
(declare-fun x250 () Int)
(declare-fun x85 () Int)
(declare-fun x259 () Int)
(declare-fun x191 () Int)
(declare-fun x126 (Int Int) Int)
(declare-fun x122 () Int)
(declare-fun x247 () Bool)
(declare-fun x44 () Int)
(declare-fun x228 () x96)
(declare-fun x3 () Bool)
(declare-fun x160 () Bool)
(declare-fun x62 () Int)
(declare-fun x233 () Bool)
(declare-fun x234 () Int)
(declare-fun x301 () Int)
(declare-fun x217 () Bool)
(declare-fun x68 () Int)
(declare-fun x74 () Bool)
(declare-fun x110 () Int)
(declare-fun x297 () Int)
(declare-fun x100 () Int)
(declare-fun x156 () Int)
(declare-fun x293 () Int)
(declare-fun x12 () Int)
(declare-fun x139 (x96) Int)
(declare-fun x4 () Bool)
(declare-fun x245 (Int Int) Int)
(declare-fun x130 () Int)
(declare-fun x241 () Int)
(declare-fun x237 () Int)
(declare-fun x269 () Int)
(declare-fun x41 () Int)
(declare-fun x64 () Bool)
(declare-fun x271 () Int)
(declare-fun x131 () Int)
(declare-fun x305 () Int)
(declare-fun x255 () Int)
(declare-fun x260 () Bool)
(declare-fun x94 () Int)
(declare-fun x318 () Bool)
(declare-fun x109 () Int)
(declare-fun x198 () Bool)
(declare-fun x189 () Bool)
(declare-fun x274 () Bool)
(declare-fun x186 () Int)
(declare-fun x200 () x96)
(declare-fun x35 () Bool)
(declare-fun x204 () Int)
(declare-fun x19 () Int)
(declare-fun x236 () Int)
(declare-fun x47 () Bool)
(declare-fun x155 () x96)
(declare-fun x196 () Bool)
(declare-fun x42 () Int)
(declare-fun x54 () Int)
(declare-fun x11 () Bool)
(declare-fun x283 () Bool)
(declare-fun x5 () Int)
(declare-fun x280 () x96)
(declare-fun x215 () Int)
(declare-fun x282 () Int)
(declare-fun x51 () Bool)
(declare-fun x70 () Int)
(declare-fun x36 () Bool)
(declare-fun x161 (x96) Int)
(declare-fun x18 () Int)
(declare-fun x82 () Int)
(declare-fun x37 () x96)
(declare-fun x15 () Bool)
(declare-fun x167 () Int)
(declare-fun x1 () Bool)
(declare-fun x84 () Int)
(declare-fun x206 () Bool)
(declare-fun x125 () Bool)
(declare-fun x231 () Bool)
(declare-fun x55 () Bool)
(declare-fun x20 () Bool)
(declare-fun x170 () Int)
(declare-fun x265 () Int)
(declare-fun x22 () Int)
(declare-fun x192 () Int)
(declare-fun x216 () Int)
(declare-fun x157 () Int)
(declare-fun x153 () Bool)
(declare-fun x289 () Int)
(declare-fun x258 () Bool)
(declare-fun x79 () Int)
(declare-fun x298 () Int)
(declare-fun x291 () Int)
(declare-fun x27 () Int)
(declare-fun x251 () Int)
(declare-fun x188 () Int)
(declare-fun x129 () Int)
(declare-fun x29 () Int)
(declare-fun x38 () x96)
(declare-fun x60 () Int)
(declare-fun x152 () Bool)
(declare-fun x238 () Bool)
(declare-fun x209 () Int)
(declare-fun x53 () Int)
(declare-fun x254 () Bool)
(declare-fun x13 () Int)
(declare-fun x275 () Bool)
(declare-fun x99 () Bool)
(declare-fun x263 () Bool)
(declare-fun x30 () Bool)
(declare-fun x78 () Int)
(declare-fun x57 () Int)
(declare-fun x115 () Bool)
(declare-fun x151 () x96)
(declare-fun x230 () Int)
(declare-fun x310 () Int)
(declare-fun x154 () Bool)
(declare-fun x43 () Bool)
(declare-fun x223 () Bool)
(declare-fun x140 () Int)
(declare-fun x307 () Int)
(declare-fun x75 (x96) Int)
(declare-fun x222 () Bool)
(declare-fun x294 () Int)
(declare-fun x299 () Int)
(declare-fun x319 () Int)
(declare-fun x166 () Int)
(declare-fun x288 () Bool)
(declare-fun x50 () x96)
(declare-fun x73 () Int)
(declare-fun x211 () Int)
(declare-fun x213 () Int)
(define-fun x119 ((x96 x96) (x118 Int)) x96 (ite ((_ is x24) x96) (x24 (x175 x96) (+ (x292 x96) x118)) (ite ((_ is x134) x96) (x134 (x218 x96) (x270 x96) (+ (x317 x96) x118)) (x114 (+ x118 (x306 x96))))))
(define-fun x201 ((x235 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x235) (>= x235 0)) x235 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x308 ((x235 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x235) (> 0 x235)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x235) x235))
(define-fun x66 ((x142 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x142) (>= x142 0)))
(define-fun x88 ((x142 Int)) Bool (and (= (x245 115792089237316195423570985008687907853269984665640564039457584007913129639935 x142) x142) (= x142 (x245 x142 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x311 ((x142 Int)) Bool (and (= (x245 0 x142) 0) (= 0 (x245 x142 0))))
(define-fun x59 ((x142 Int)) Bool (= (x245 x142 x142) x142))
(define-fun x150 ((x142 Int)) Bool (and (x59 x142) (x88 x142) (x311 x142)))
(define-fun x159 ((x142 Int) (x121 Int)) Bool (= (x245 x121 x142) (x245 x142 x121)))
(define-fun x49 ((x142 Int) (x121 Int)) Bool (and (>= (x245 x142 x121) 0) (=> (>= x121 0) (>= x121 (x245 x142 x121))) (=> (<= 0 x142) (>= x142 (x245 x142 x121)))))
(define-fun x277 ((x142 Int) (x121 Int)) Bool (and (x159 x142 x121) (x49 x142 x121)))
(define-fun x80 ((x142 Int)) Bool (= (mod x142 1461501637330902918203684832716283019655932542976) (x245 x142 1461501637330902918203684832716283019655932542975)))
(define-fun x104 ((x142 Int)) Bool (and (x277 x142 1461501637330902918203684832716283019655932542975) (x80 x142)))
(define-fun x285 ((x142 Int)) Bool (and (= (x126 115792089237316195423570985008687907853269984665640564039457584007913129639935 x142) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x126 x142 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x262 ((x142 Int)) Bool (and (= (x126 0 x142) x142) (= (x126 x142 0) x142)))
(define-fun x93 ((x142 Int)) Bool (= (x126 x142 x142) x142))
(define-fun x300 ((x142 Int)) Bool (and (x285 x142) (x93 x142) (x262 x142)))
(define-fun x32 ((x142 Int) (x121 Int)) Bool (= (x126 x142 x121) (x126 x121 x142)))
(define-fun x10 ((x142 Int) (x121 Int)) Bool (and (<= (x126 x142 x121) (+ x121 x142)) (=> (>= x121 0) (<= x121 (x126 x142 x121))) (=> (<= 0 x142) (>= (x126 x142 x121) x142))))
(define-fun x158 ((x142 Int) (x121 Int)) Bool (and (x32 x142 x121) (x10 x142 x121)))
(define-fun x77 ((x91 x96)) Int (ite (= x280 x91) x89 (x161 x91)))
(define-fun x181 ((x91 x96)) Int (ite (= x184 x91) x224 (x77 x91)))
(define-fun x182 ((x91 x96)) Int (ite x145 (x161 x91) (x181 x91)))
(define-fun x304 ((x91 x96)) Int (ite (= x38 x91) x193 (x182 x91)))
(define-fun x83 ((x91 x96)) Int (ite (= x91 x228) x197 (x304 x91)))
(define-fun x244 ((x91 x96)) Int (ite x199 (x182 x91) (ite x258 (x182 x91) (x83 x91))))
(define-fun x90 ((x91 x96)) Int (x52 x91))
(define-fun x163 ((x91 x96)) Int (x148 x91))
(define-fun x108 ((x91 x96)) Int (ite (= x91 x149) x229 (x90 x91)))
(define-fun x98 ((x91 Int)) Int (ite (= x91 128) x140 (x313 x91)))
(define-fun x173 ((x91 Int)) Int (ite (= 128 x91) x71 (x98 x91)))
(define-fun x72 ((x91 Int)) Int (ite (= 160 x91) x140 (x173 x91)))
(define-fun x202 ((x91 Int)) Int (ite (= 128 x91) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x72 x91)))
(define-fun x147 ((x91 Int)) Int (ite (= x91 132) x131 (x202 x91)))
(define-fun x105 ((x91 Int)) Int (ite (= x91 164) x71 (x147 x91)))
(define-fun x243 ((x91 Int)) Int (ite (= x91 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x103 x91)))
(define-fun x33 ((x91 Int)) Int (ite (= x91 132) x271 (x243 x91)))
(define-fun x97 ((x91 Int)) Int (ite (= x91 164) x301 (x33 x91)))
(define-fun x174 ((x91 Int)) Int (ite (= x91 196) x136 (x97 x91)))
(define-fun x141 ((x142 Int)) Bool (=> (and (not (= 2514000705 x142)) (not (= x142 826074471)) (not (= 1889567281 x142)) (not (= x142 2835717307)) (not (= x142 157198259)) (not (= x142 1851080549)) (not (= 404098525 x142)) (not (= 2376452955 x142)) (not (= x142 599290589)) (not (= x142 3026235284)) (> x142 10000) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x142)) (not (= 3121116754 x142)) (not (= 330252341 x142)) (not (= x142 170435703)) (not (= 3017275065 x142)) (not (= x142 1461501637330902918203684832716283019655932542975)) (not (= 117300739 x142)) (not (= x142 3337024914)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x142)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x142)) (not (= 1289409798 x142))) (not ((_ is x114) (x242 x142)))))
(assert (x66 x216))
(assert (x66 x57))
(assert (= (x114 157198259) (x242 157198259)))
(assert (= x199 (or x28 (and x295 (not x206)) x283 (and x267 x312) (and x117 x177))))
(assert (x66 x298))
(assert (x66 x239))
(assert (x66 x188))
(assert (= x196 (and x92 x7)))
(assert (x66 x124))
(assert (x66 x209))
(assert (x66 x287))
(assert (= (x139 (x114 330252341)) 330252341))
(assert (= (or x171 x196) x288))
(assert (= (and x195 x203) x30))
(assert (x66 x156))
(assert (= 2835717307 (x139 (x114 2835717307))))
(assert (not x233))
(assert (x66 x89))
(assert (= 3121116754 (x139 (x114 3121116754))))
(assert (=> (>= 10000 x298) (= (x242 x298) (x114 x298))))
(assert (x66 x136))
(assert (x66 x111))
(assert (x158 x27 x278))
(assert (x66 x230))
(assert (x66 x42))
(assert (x66 x46))
(assert (x66 x307))
(assert (= 1289409798 (x139 (x114 1289409798))))
(assert (x150 x111))
(assert (x66 x170))
(assert (x66 x197))
(assert (= (x114 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x242 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (and x92 (not x7)) x171))
(assert (x66 x135))
(assert (= x3 (and x101 (not x6))))
(assert (x66 x172))
(assert (x66 x44))
(assert (x66 x279))
(assert (= 170435703 (x139 (x114 170435703))))
(assert (x66 x185))
(assert (x66 x316))
(assert (x66 x322))
(assert (x300 x278))
(assert (x66 x146))
(assert (x66 x68))
(assert (x150 x143))
(assert (= (x139 (x114 3026235284)) 3026235284))
(assert (x66 x82))
(assert (x66 x227))
(assert (x66 x178))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x139 (x114 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (x66 x241))
(assert (= (x242 599290589) (x114 599290589)))
(assert (x66 x122))
(assert (= (x242 3026235284) (x114 3026235284)))
(assert (x141 x301))
(assert (= (and x256 (not x273)) x267))
(assert (x66 x110))
(assert (= (or x152 x36 (and x318 x43) (and (not x116) x55) x272 (and x189 x217) (and x231 x253) (and x99 (not x153)) (and x154 x123)) x145))
(assert (x66 x284))
(assert (x66 x282))
(assert (x66 x106))
(assert (= (x139 (x242 x61)) x61))
(assert (x66 x129))
(assert (= (x139 (x114 404098525)) 404098525))
(assert (x66 x78))
(assert (x141 x110))
(assert (x66 x315))
(assert (x141 x42))
(assert (x66 x226))
(assert (x150 x95))
(assert (x277 x111 x70))
(assert (x66 x164))
(assert (x66 x179))
(assert (= (x242 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x114 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x66 x63))
(assert (x66 x138))
(assert (= x275 (or x128 (and (not x198) x64))))
(assert (x66 x268))
(assert (= (x139 (x114 1851080549)) 1851080549))
(assert (= x99 (and x189 (not x217))))
(assert (x66 x54))
(assert (x66 x269))
(assert (x66 x214))
(assert (x66 x213))
(assert (= x258 (and x47 x288)))
(assert (x66 x18))
(assert (x66 x79))
(assert (x66 x251))
(assert (= (x114 2514000705) (x242 2514000705)))
(assert (x277 x143 x215))
(assert (x66 x290))
(assert (x66 x86))
(assert (= x28 (and x273 x256)))
(assert (= (x139 (x114 3337024914)) 3337024914))
(assert (x66 x26))
(assert (= true x101))
(assert (= (x114 3017275065) (x242 3017275065)))
(assert (x66 x248))
(assert (x66 x143))
(assert (x141 x271))
(assert (= x125 (and x21 x31)))
(assert (x66 x12))
(assert (= (x114 826074471) (x242 826074471)))
(assert (x66 x229))
(assert (= (x139 (x242 x287)) x287))
(assert (x66 x13))
(assert (= 2514000705 (x139 (x114 2514000705))))
(assert (x66 x107))
(assert (= (=> (and (= x198 (= 0 x70)) (or x198 (not x198))) x137) x39))
(assert (= x271 (x139 (x242 x271))))
(assert (= x36 (and x260 x238)))
(assert (x66 x162))
(assert (x66 x95))
(assert (x277 x13 x18))
(assert (= (x139 (x114 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (or x65 x194) x92))
(assert (= (=> (and (= x301 x42) (= x226 (x308 (- x240 4))) (= x217 (or (and (< x226 96) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x226) true)) (> x226 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x136 x234) (not (= x157 0)) (not (= 117300739 x230)) (not (= x230 404098525)) (> x164 0) (= x230 599290589) (not (< x240 4)) (not (= x230 157198259)) (= x110 x255) (= (x249 (x242 x287)) x164) (> 826074471 x230) (= x12 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x112 128) (= 100 x240)) (and (=> (and (and (= true x153) (= x110 x225)) (not x217)) (and (=> (not x153) x45) (=> (and (and (= true x116) (= x167 x42)) x153) (and (=> (and x116 (and (= x320 (x134 (x242 x110) (x114 1) 0)) (= x106 (x161 x320)) (= x154 (> x136 x106)) (<= x106 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x106) (= x234 x162))) (and (=> (and (not x154) (= x35 (> x234 x106))) (and (=> (and (not x35) (and (= x127 (x308 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x234))) (= (x134 (x242 x42) (x114 1) 0) x261) (= (x77 x261) x314) (<= x314 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x89 (x308 (- x106 x234))) (= (> x314 x127) x133) (= x280 (x134 (x242 x110) (x114 1) 0)) (>= x314 0))) (and (=> x133 x45) (=> (and (and (= x224 (x201 (+ x234 x314))) (= (< x224 x314) x43)) (not x133)) (and (=> x43 x45) (=> (and (not x43) (and (= (x134 (x242 x301) x303 0) x50) (= x293 (x75 x50)) (= x184 (x134 (x242 x42) (x114 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x293) (= x231 (< x293 x234)) (>= x293 0) (= (x134 (x242 x110) (x114 2) 0) x303))) (and (=> x231 x45) (=> (and (not x231) (= (> x234 x293) x260)) (and (=> x260 x45) (=> (and (and (= x165 x166) (= (x308 (- x293 x234)) x120) (= x100 32) (= x239 x129) (= x208 1)) (not x260)) x74))))))))) (=> x35 x45))) (=> x154 x45))) (=> (not x116) x45))))) (=> x217 x45))) x223))
(assert (x66 x70))
(assert (x66 x250))
(assert (= 117300739 (x139 (x114 117300739))))
(assert (= (and x115 (not x169)) x256))
(assert (= x233 (=> (and (and (>= x94 0) (= x301 x54) (< x316 826074471) x183 (<= 0 x130) (>= 1461501637330902918203684832716283019655932542975 x287) (= x62 x166) (not (= 330252341 x316)) (>= 1461501637330902918203684832716283019655932542975 x94) (>= x166 0) (not (= 170435703 x316)) x113 (= x11 (> (x249 (x242 x287)) 0)) (<= x102 1461501637330902918203684832716283019655932542975) (= (x249 (x242 x301)) x211) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x166) (= x297 x276) (<= 0 x84) (= x291 x289) (>= 1461501637330902918203684832716283019655932542975 x301) (= (not (= x54 x297)) x4) (= x248 x271) (= x301 x82) (> 2376452955 x316) (>= x284 0) (= x113 (not (= x248 x82))) (= x316 404098525) (< 0 x287) x11 x4 (= (x232 (x242 x301)) x284) (= x183 (> (x249 (x242 x301)) 0)) (<= x276 1461501637330902918203684832716283019655932542975) (>= x291 0) (not (> 170435703 x316)) (<= x84 1461501637330902918203684832716283019655932542975) (= x94 x271) (<= 0 x102) (<= x291 1461501637330902918203684832716283019655932542975) (= (x232 (x242 x287)) x130) (<= 0 x276) (not (= x301 x287)) (< 0 x301) (< 0 x211)) (and (and (and (<= 0 x255) (>= 1461501637330902918203684832716283019655932542975 x307) (not (< x236 1289409798)) (not (< x236 826074471)) (<= 0 x166) (= x205 x73) (<= 0 x205) (= x40 x136) (< x236 2376452955) (= x132 x170) (<= x166 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x210) (>= 1461501637330902918203684832716283019655932542975 x29) (= x255 x271) (not (= 1289409798 x236)) (<= 0 x307) (>= 1461501637330902918203684832716283019655932542975 x255) (= 0 x207) (= x227 x73) (= (= x166 0) x6) (= x250 x207) (<= x205 1461501637330902918203684832716283019655932542975) (= 1851080549 x236) (= x29 x276) (= (x249 (x242 x301)) x210)) (or (and (and (= x294 (div x186 x239)) (= x186 (mod (* x136 x166) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< 0 x265) (= (x245 x305 x192) x265) (= (= x221 x166) x15) (= (ite (or x15 x247) 1 0) x192) (= x247 (= x136 0)) (<= x239 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x157 x294) (= (ite (not x252) 1 0) x305) (= x252 (= x239 0)) (>= x239 0) (= x221 (div x186 x136))) (not x6)) (and (= x157 x136) x6))) (and x281 (= x281 (not (= 0 x58))) (not (= 826074471 x124)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x56) (<= 0 x56) (= (x161 x155) x56) (= x62 x58) (= (x134 (x242 x301) (x114 1) 0) x155) (= x132 x56) (= (x249 (x242 x287)) x216) (not (> 826074471 x124)) (<= x301 1461501637330902918203684832716283019655932542975) (= 1889567281 x124) (= x178 0) (< 0 x216)))) x223)))
(assert (x66 x210))
(assert (x277 x305 x192))
(assert (x150 x63))
(assert (x66 x310))
(assert (x66 x294))
(assert (= (or x199 x187 x258) x64))
(assert (x66 x265))
(assert (= x238 (and x253 (not x231))))
(assert (= (and x153 x99) x55))
(assert (x66 x29))
(assert (x141 x287))
(assert (= (x139 (x114 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (x66 x132))
(assert (= 2376452955 (x139 (x114 2376452955))))
(assert (x66 x61))
(assert (= (x114 2835717307) (x242 2835717307)))
(assert (x66 x53))
(assert (= 1461501637330902918203684832716283019655932542975 (x139 (x114 1461501637330902918203684832716283019655932542975))))
(assert (x66 x289))
(assert (x66 x166))
(assert (x66 x76))
(assert (x66 x58))
(assert (x66 x81))
(assert (= (and (not x43) x318) x253))
(assert (= (and (not x312) x267) x187))
(assert (= (and x288 (not x47)) x295))
(assert (x66 x112))
(assert (= (x242 1461501637330902918203684832716283019655932542975) (x114 1461501637330902918203684832716283019655932542975)))
(assert (x150 x322))
(assert (x66 x102))
(assert (x300 x27))
(assert (x66 x208))
(assert (x66 x9))
(assert (x66 x168))
(assert (x66 x237))
(assert (x66 x84))
(assert (x66 x297))
(assert (x66 x40))
(assert (x66 x62))
(assert (x66 x319))
(assert (= x48 (and (not x260) x238)))
(assert (x277 x68 x208))
(assert (x104 x29))
(assert (= (x242 1889567281) (x114 1889567281)))
(assert (x150 x68))
(assert (= (and x64 x198) x128))
(assert (x150 x192))
(assert (= (x242 1289409798) (x114 1289409798)))
(assert (x66 x221))
(assert (x66 x167))
(assert (x66 x186))
(assert (x66 x127))
(assert (x66 x109))
(assert (x150 1461501637330902918203684832716283019655932542975))
(assert (= (x242 3121116754) (x114 3121116754)))
(assert (= (x242 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x114 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x66 x60))
(assert (=> (<= x61 10000) (= (x242 x61) (x114 x61))))
(assert (= (=> (and (or (not x195) x195) (= x195 (= 0 x208))) x254) x74))
(assert (x66 x236))
(assert (x66 x8))
(assert (x66 x255))
(assert (x66 x211))
(assert (x66 x259))
(assert (= x269 (x139 (x242 x269))))
(assert (x150 x215))
(assert (x66 x246))
(assert (x66 x165))
(assert (x66 x193))
(assert (= x152 (and x34 x35)))
(assert (x66 x301))
(assert (x66 x85))
(assert (x66 x94))
(assert (x66 x293))
(assert (x66 x157))
(assert (x66 x296))
(assert (x66 x219))
(assert (=> (<= x301 10000) (= (x114 x301) (x242 x301))))
(assert (x66 x140))
(assert (= (or x3 x222) x189))
(assert (= (and x34 (not x35)) x220))
(assert (x141 x298))
(assert (x66 x73))
(assert (= (and (not x177) x117) x115))
(assert (x66 x131))
(assert (x141 x9))
(assert (x66 x204))
(assert (x66 x225))
(assert (=> (>= 10000 x271) (= (x242 x271) (x114 x271))))
(assert (x66 x130))
(assert (= (x139 (x114 1889567281)) 1889567281))
(assert (= (and x133 x220) x272))
(assert (=> (<= x9 10000) (= (x114 x9) (x242 x9))))
(assert (x277 x322 x95))
(assert (x66 x41))
(assert (x150 x70))
(assert (= x34 (and (not x154) x123)))
(assert (x66 x271))
(assert (= (x114 330252341) (x242 330252341)))
(assert (= x318 (and (not x133) x220)))
(assert (x66 x286))
(assert (= x51 x1))
(assert (x150 x208))
(assert (= (x139 (x114 599290589)) 599290589))
(assert (= x254 (=> (and (and (= x264 x282) (> x190 0) (= x188 x264) (<= x290 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x90 x149) x290) (= (x245 x143 x215) x27) (>= x129 0) (= x257 x19) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x165) (= x278 (ite (= x100 0) 1 0)) (= (+ x129 x136) x264) (= (+ x157 x165) x257) (= (x134 (x242 x9) (x114 3) 0) x149) (= x241 x257) (= (ite (> x100 31) 1 0) x215) (= x157 x87) (= (ite (= 1 x185) 1 0) x143) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x129) (< (+ x165 x157) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x290) (= (x245 x68 x208) x190) (>= x165 0) (= x68 (x126 x27 x278)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x129 x136)) (= (x201 (+ x290 x157)) x229) (= (x245 1461501637330902918203684832716283019655932542975 x29) x9)) (and (< x144 3337024914) (>= 1461501637330902918203684832716283019655932542975 x131) (= x26 x63) (= 0 x46) (> x57 0) (<= 0 x86) (>= x213 0) (= x315 x63) (= x86 x271) (not (< x144 3017275065)) (= x109 x227) (= x160 (= x271 x63)) (= 3121116754 x144) (<= x63 1461501637330902918203684832716283019655932542975) (= x102 x26) (= x140 x146) (<= x213 1461501637330902918203684832716283019655932542975) (not (= 3026235284 x144)) (not (> 2376452955 x144)) (= x57 (x249 (x242 x301))) (= x46 x250) (= x146 x87) (= x131 x276) (<= x86 1461501637330902918203684832716283019655932542975) (<= x76 1461501637330902918203684832716283019655932542975) (= x109 x213) (>= x76 0) (not (= 3017275065 x144)))) (and (=> (and (and (or x31 (and (and (= (x308 (- x41 x140)) x79) (not (< x41 x140)) (= (x245 1461501637330902918203684832716283019655932542975 x63) x78)) (not x31))) (and (= (x163 x180) x41) (<= x41 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x41) x31) (= x61 (x245 1461501637330902918203684832716283019655932542975 x63)) (= x23 (x134 (x242 x61) (x114 4) 0)) (= (x134 (x242 x271) x23 0) x180) (>= x41 0))) (not x160)) x1) (=> x160 x51)))))
(assert (= (x139 (x114 157198259)) 157198259))
(assert (= x45 (=> (and (= x208 0) (= x100 x16) (= x239 x129) (= x166 x165)) x74)))
(assert (= (and x115 x169) x283))
(assert (= x222 (and x6 x101)))
(assert (= (or x48 x145) x203))
(assert (x66 x87))
(assert (x150 x13))
(assert (= (=> (and (= x81 (x308 (- x282 x71))) (= (x134 (x242 x269) (x114 3) 0) x2) (= x5 68) (= x269 (x245 1461501637330902918203684832716283019655932542975 x63)) (= x309 (x108 x2)) (= x22 (x308 (- x309 x140))) (= x47 (or (and (= true (<= x310 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x310 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x310))) (<= x19 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1889567281 x44)) (= (x249 (x242 x287)) x60) (= (x308 (- x19 x140)) x259) (not (< x5 4)) (= x298 x131) (= x71 x156) (<= 0 x309) (= x279 128) (not (> x71 x282)) (> x60 0) (<= x282 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x71 0)) (<= x309 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x44 2835717307) (= x266 76450787359836037641860180984291677749980919077056822294353438043884394381312) (not (= x44 826074471)) (<= 0 x19) (= (x308 (- x5 4)) x310) (not (= 2514000705 x44)) (not (> 826074471 x44)) (>= x282 0) (not (< x309 x140))) (and (=> (and (and (= x206 (= x131 x298)) (= x296 x298)) (not x47)) (and (=> (and x206 (and (= (> x71 x219) x177) (= (x134 (x242 x301) (x114 1) 0) x200) (>= x219 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x219) (= x219 (x182 x200)) (= x53 x156))) (and (=> (and (not x177) (= x169 (< x219 x156))) (and (=> (and (and (= (x308 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x156)) x246) (<= x204 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x204 (x304 x151)) (= (x134 (x242 x301) (x114 1) 0) x38) (= x273 (< x246 x204)) (= (x134 (x242 x298) (x114 1) 0) x151) (<= 0 x204) (= x193 (x308 (- x219 x156)))) (not x169)) (and (=> (and (and (= x312 (> x204 x197)) (= x197 (x201 (+ x156 x204)))) (not x273)) (and (=> x312 x25) (=> (and (not x312) (and (= 1 x70) (= (x134 (x242 x298) (x114 1) 0) x228) (= x237 32))) x39))) (=> x273 x25))) (=> x169 x25))) (=> x177 x25))) (=> (not x206) x25))) (=> (and x47 (and (= x237 x135) (= 0 x70))) x39))) x321))
(assert (x66 x67))
(assert (x150 x305))
(assert (x66 x19))
(assert (= (x242 2376452955) (x114 2376452955)))
(assert (=> (>= 10000 x287) (= (x242 x287) (x114 x287))))
(assert (x66 x71))
(assert (x66 x207))
(assert (=> (>= 10000 x42) (= (x114 x42) (x242 x42))))
(assert (x66 x5))
(assert (= (x114 1851080549) (x242 1851080549)))
(assert (x66 x234))
(assert (x158 x214 x251))
(assert (x66 x22))
(assert (= (x114 404098525) (x242 404098525)))
(assert (= x25 (=> (and (= x237 x135) (= x70 0)) x39)))
(assert (= x42 (x139 (x242 x42))))
(assert (= x14 (and x21 (not x31))))
(assert (x66 x16))
(assert (=> (>= 10000 x269) (= (x242 x269) (x114 x269))))
(assert (= 826074471 (x139 (x114 826074471))))
(assert (x150 x29))
(assert (x141 x61))
(assert (= x65 (and x160 x302)))
(assert (x300 x214))
(assert (x66 x205))
(assert (x66 x240))
(assert (= x302 (or x30 (and x203 (not x195)))))
(assert (x66 x299))
(assert (= (=> (and (and (= x95 (ite (< 31 x237) 1 0)) (< 0 x299) (= x67 x71) (= (ite (= 0 x237) 1 0) x251) (= x299 (x245 x111 x70)) (= (x245 x322 x95) x214) (= (ite (= 1 x269) 1 0) x322) (= x111 (x126 x214 x251))) (and (and (<= x172 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x319 x67) (<= 0 x172) (< 0 x107) (<= x301 1461501637330902918203684832716283019655932542975) (= (x134 (x242 x301) (x114 1) 0) x37) (= x172 x8) (= (x249 (x242 x287)) x107) (not (= x69 826074471)) (= 1889567281 x69) (= (x244 x37) x172) (not (> 826074471 x69))) (and (= x274 (>= x122 x268)) (= x170 x268) (= x122 x179) (= x8 x179)))) x274) x137))
(assert (x66 x305))
(assert (= 3017275065 (x139 (x114 3017275065))))
(assert (= x117 (and x295 x206)))
(assert (= (x114 3337024914) (x242 3337024914)))
(assert (= x123 (and x116 x55)))
(assert (x66 x69))
(assert (x66 x215))
(assert (x66 x100))
(assert (=> (<= x110 10000) (= (x114 x110) (x242 x110))))
(assert (x141 x269))
(assert (x66 x27))
(assert (x66 x144))
(assert (= x298 (x139 (x242 x298))))
(assert (x66 x224))
(assert (x66 x120))
(assert (x300 x251))
(assert (x66 x191))
(assert (x150 x18))
(assert (= x51 (=> (and (or (and (not x7) (and (= x209 (x245 x13 x18)) (= (ite (or x20 x263) 1 0) x18) (> x209 0) (>= x282 0) (= x71 x85) (= x20 (= x138 x282)) (= x263 (= 0 x140)) (<= x282 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (div x168 x19) x85) (= (ite (not x17) 1 0) x13) (= (mod (* x282 x140) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x168) (= (div x168 x140) x138) (= x17 (= 0 x19)))) (and (= x71 x140) x7)) (and (<= x19 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x19 0) (= x7 (= 0 x19)))) x321)))
(assert (x66 x309))
(assert (x104 x63))
(assert (x66 x192))
(assert (x66 x278))
(assert (= (x242 170435703) (x114 170435703)))
(assert (x66 x291))
(assert (x66 x314))
(assert (x66 x266))
(assert (= x110 (x139 (x242 x110))))
(assert (= (x139 (x242 x301)) x301))
(assert (= x21 (and (not x160) x302)))
(assert (x66 x56))
(assert (x66 x276))
(assert (x66 x190))
(assert (= (x114 117300739) (x242 117300739)))
(assert (= x9 (x139 (x242 x9))))
(assert (= x194 (or x125 x14)))
(check-sat)
(exit)