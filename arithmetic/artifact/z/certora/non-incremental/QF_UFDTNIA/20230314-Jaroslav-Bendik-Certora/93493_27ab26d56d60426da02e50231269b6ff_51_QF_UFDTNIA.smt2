(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x104 0)) (((x581 (x663 x104) (x292 x104) (x200 x104) (x101 x104) (x741 x104) (x648 x104) (x53 x104) (x79 Int)) (x814 (x99 x104) (x563 x104) (x248 x104) (x397 Int)) (x324 (x398 x104) (x736 x104) (x525 x104) (x459 x104) (x553 Int)) (x291 (x217 x104) (x754 Int)) (x206 (x189 Int)) (x743 (x364 x104) (x70 x104) (x193 x104) (x515 x104) (x733 x104) (x534 x104) (x5 Int)) (x813 (x131 x104) (x555 x104) (x472 Int)) (x406 (x612 x104) (x818 x104) (x666 x104) (x290 x104) (x145 x104) (x281 Int)))))
(declare-fun x69 () Bool)
(declare-fun x411 () Int)
(declare-fun x82 () Bool)
(declare-fun x812 () Bool)
(declare-fun x387 () Int)
(declare-fun x122 () Bool)
(declare-fun x780 () Int)
(declare-fun x840 () Bool)
(declare-fun x673 () Int)
(declare-fun x227 () Int)
(declare-fun x448 () Bool)
(declare-fun x587 () Int)
(declare-fun x211 () Bool)
(declare-fun x215 () Int)
(declare-fun x385 () Bool)
(declare-fun x185 () Int)
(declare-fun x207 () Bool)
(declare-fun x186 () Int)
(declare-fun x392 () Bool)
(declare-fun x687 () Int)
(declare-fun x17 (x104) Int)
(declare-fun x139 () Int)
(declare-fun x20 () Bool)
(declare-fun x365 () Int)
(declare-fun x50 () Bool)
(declare-fun x469 () Bool)
(declare-fun x257 () Bool)
(declare-fun x817 () Bool)
(declare-fun x837 () Bool)
(declare-fun x628 () Int)
(declare-fun x11 () Int)
(declare-fun x33 () x104)
(declare-fun x246 () Int)
(declare-fun x202 () Int)
(declare-fun x796 () Int)
(declare-fun x210 () Int)
(declare-fun x425 () Bool)
(declare-fun x616 () Int)
(declare-fun x49 () Bool)
(declare-fun x89 () Int)
(declare-fun x133 () Bool)
(declare-fun x807 () Bool)
(declare-fun x213 () Bool)
(declare-fun x48 () Int)
(declare-fun x209 () Bool)
(declare-fun x180 () Int)
(declare-fun x61 () Int)
(declare-fun x690 (Int) x104)
(declare-fun x631 () Int)
(declare-fun x557 () Bool)
(declare-fun x295 () Int)
(declare-fun x307 () Int)
(declare-fun x760 () Bool)
(declare-fun x130 () Bool)
(declare-fun x389 () Int)
(declare-fun x430 () Int)
(declare-fun x443 () Bool)
(declare-fun x262 () Bool)
(declare-fun x758 () Int)
(declare-fun x132 () Bool)
(declare-fun x702 () Int)
(declare-fun x113 () Bool)
(declare-fun x334 () Bool)
(declare-fun x460 () Bool)
(declare-fun x439 () Bool)
(declare-fun x537 () Int)
(declare-fun x197 () Bool)
(declare-fun x810 () Bool)
(declare-fun x455 () Bool)
(declare-fun x264 () Int)
(declare-fun x653 () Int)
(declare-fun x768 () Int)
(declare-fun x492 () Int)
(declare-fun x676 () Int)
(declare-fun x794 () Bool)
(declare-fun x802 () Bool)
(declare-fun x565 () Int)
(declare-fun x177 () Bool)
(declare-fun x282 () Bool)
(declare-fun x804 () Bool)
(declare-fun x247 () Int)
(declare-fun x691 () x104)
(declare-fun x288 () Int)
(declare-fun x493 () Bool)
(declare-fun x445 () Int)
(declare-fun x198 () Bool)
(declare-fun x772 () Int)
(declare-fun x447 () Bool)
(declare-fun x102 () Bool)
(declare-fun x381 () Bool)
(declare-fun x426 () Int)
(declare-fun x308 () Bool)
(declare-fun x759 () Int)
(declare-fun x551 () Int)
(declare-fun x22 () Bool)
(declare-fun x704 () Bool)
(declare-fun x356 () Int)
(declare-fun x64 () Int)
(declare-fun x417 () Int)
(declare-fun x558 () Int)
(declare-fun x97 () Int)
(declare-fun x808 () Int)
(declare-fun x270 (Int) Int)
(declare-fun x629 () Bool)
(declare-fun x228 () Int)
(declare-fun x62 () Int)
(declare-fun x204 () Int)
(declare-fun x554 () Int)
(declare-fun x304 () Int)
(declare-fun x488 () Int)
(declare-fun x788 () Int)
(declare-fun x251 () Bool)
(declare-fun x562 () Int)
(declare-fun x442 () Bool)
(declare-fun x338 () Int)
(declare-fun x763 () Int)
(declare-fun x188 () Bool)
(declare-fun x38 () Int)
(declare-fun x552 () Int)
(declare-fun x836 () Int)
(declare-fun x309 () Int)
(declare-fun x722 () Int)
(declare-fun x824 () Int)
(declare-fun x3 () Int)
(declare-fun x592 () Int)
(declare-fun x111 () Int)
(declare-fun x499 () Bool)
(declare-fun x327 () Int)
(declare-fun x522 () Bool)
(declare-fun x330 () Int)
(declare-fun x357 () Int)
(declare-fun x732 (Int) Int)
(declare-fun x677 () Int)
(declare-fun x456 () Int)
(declare-fun x382 () Int)
(declare-fun x725 () Bool)
(declare-fun x530 () Bool)
(declare-fun x108 () Int)
(declare-fun x260 () Bool)
(declare-fun x313 () Int)
(declare-fun x252 () Int)
(declare-fun x265 () Int)
(declare-fun x366 () Bool)
(declare-fun x13 () Int)
(declare-fun x682 (x104) Int)
(declare-fun x159 () Bool)
(declare-fun x805 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x405 () Int)
(declare-fun x778 () Int)
(declare-fun x415 () Int)
(declare-fun x656 () Bool)
(declare-fun x358 () Int)
(declare-fun x659 () Int)
(declare-fun x613 () Int)
(declare-fun x93 () Int)
(declare-fun x582 () Bool)
(declare-fun x593 () Bool)
(declare-fun x594 () Int)
(declare-fun x428 () Bool)
(declare-fun x14 () Int)
(declare-fun x576 () x104)
(declare-fun x181 () Int)
(declare-fun x708 () Int)
(declare-fun x294 (Int) Int)
(declare-fun x589 () Bool)
(declare-fun x10 () Int)
(declare-fun x172 () Bool)
(declare-fun x518 () Bool)
(declare-fun x809 () Int)
(declare-fun x434 () Int)
(declare-fun x98 () Bool)
(declare-fun x224 () Bool)
(declare-fun x78 () Bool)
(declare-fun x421 () Bool)
(declare-fun x811 () Bool)
(declare-fun x410 () Int)
(declare-fun x345 () Int)
(declare-fun x560 () Bool)
(declare-fun x495 () Int)
(declare-fun x194 () Bool)
(declare-fun x27 () Int)
(declare-fun x182 () Int)
(declare-fun x58 () Bool)
(declare-fun x664 () Int)
(declare-fun x670 () Int)
(declare-fun x121 () Bool)
(declare-fun x600 () Int)
(declare-fun x91 () Bool)
(declare-fun x142 () Bool)
(declare-fun x468 () Bool)
(declare-fun x25 (Int Int) Int)
(declare-fun x633 () Int)
(declare-fun x344 () Int)
(declare-fun x401 () Bool)
(declare-fun x645 () Bool)
(declare-fun x504 () Int)
(declare-fun x322 () Bool)
(declare-fun x355 () Bool)
(declare-fun x646 () Int)
(declare-fun x622 () Int)
(declare-fun x171 () Bool)
(declare-fun x452 () Int)
(declare-fun x679 () Int)
(declare-fun x737 () Bool)
(declare-fun x164 () Int)
(declare-fun x34 () Int)
(declare-fun x764 () Int)
(declare-fun x835 () Int)
(declare-fun x497 () Int)
(declare-fun x57 () Bool)
(declare-fun x787 () Bool)
(declare-fun x464 () Bool)
(declare-fun x238 () Bool)
(declare-fun x508 () Int)
(declare-fun x351 () Bool)
(declare-fun x105 () Int)
(declare-fun x705 () Int)
(declare-fun x300 () Bool)
(declare-fun x640 () Int)
(declare-fun x749 () Int)
(declare-fun x416 () Bool)
(declare-fun x106 () Int)
(declare-fun x9 () Int)
(declare-fun x545 () Int)
(declare-fun x566 () Bool)
(declare-fun x490 () Int)
(declare-fun x56 () Int)
(declare-fun x549 () Int)
(declare-fun x599 () Bool)
(declare-fun x337 () Bool)
(declare-fun x81 () Bool)
(declare-fun x342 () Bool)
(declare-fun x73 () Int)
(declare-fun x408 () Bool)
(declare-fun x667 () Int)
(declare-fun x176 () Bool)
(declare-fun x90 () Bool)
(declare-fun x87 () Int)
(declare-fun x165 () Bool)
(declare-fun x23 () Int)
(declare-fun x230 () Int)
(declare-fun x284 () Bool)
(declare-fun x158 () Bool)
(declare-fun x60 () Bool)
(declare-fun x463 () Bool)
(declare-fun x440 () Int)
(declare-fun x454 () Int)
(declare-fun x688 () Bool)
(declare-fun x346 () Int)
(declare-fun x80 () Int)
(declare-fun x585 () Int)
(declare-fun x394 () Int)
(declare-fun x734 () Int)
(declare-fun x489 (Int) Int)
(declare-fun x66 () Int)
(declare-fun x623 () Bool)
(declare-fun x514 () Bool)
(declare-fun x502 () Int)
(declare-fun x274 (x104) Int)
(declare-fun x458 () Int)
(declare-fun x438 () Int)
(declare-fun x235 () Bool)
(declare-fun x776 () Int)
(declare-fun x626 () Int)
(declare-fun x750 () Bool)
(declare-fun x795 () Int)
(declare-fun x403 () Bool)
(declare-fun x539 () Int)
(declare-fun x597 () Bool)
(declare-fun x561 () Bool)
(declare-fun x128 () Bool)
(declare-fun x154 () Int)
(declare-fun x675 () Bool)
(declare-fun x115 () Int)
(declare-fun x755 () Bool)
(declare-fun x402 (Int Int) Int)
(declare-fun x333 () Int)
(declare-fun x298 () Int)
(declare-fun x362 () Bool)
(declare-fun x703 () Int)
(declare-fun x791 () Int)
(declare-fun x151 () Int)
(declare-fun x100 () Int)
(declare-fun x579 () Int)
(declare-fun x451 () Bool)
(declare-fun x199 () Int)
(declare-fun x742 () Bool)
(declare-fun x697 () Int)
(declare-fun x127 () Int)
(declare-fun x684 () Int)
(declare-fun x630 () Bool)
(declare-fun x289 () Bool)
(declare-fun x256 () Int)
(declare-fun x547 () Bool)
(declare-fun x51 () Bool)
(declare-fun x610 () Int)
(declare-fun x390 () Int)
(declare-fun x367 () Int)
(declare-fun x641 () Bool)
(declare-fun x409 () Bool)
(declare-fun x336 () Int)
(declare-fun x841 () Bool)
(declare-fun x175 () Bool)
(declare-fun x529 () Bool)
(declare-fun x727 () Int)
(declare-fun x680 () Int)
(declare-fun x4 () x104)
(declare-fun x7 () Int)
(declare-fun x752 () Int)
(declare-fun x153 () Int)
(declare-fun x635 () Bool)
(declare-fun x222 () Int)
(declare-fun x470 () Int)
(declare-fun x546 () Bool)
(declare-fun x160 () Int)
(declare-fun x231 () Bool)
(declare-fun x639 () Bool)
(declare-fun x124 () Bool)
(declare-fun x232 () Bool)
(declare-fun x296 () Int)
(declare-fun x783 () Int)
(declare-fun x803 () Int)
(declare-fun x449 () Bool)
(declare-fun x797 () Bool)
(declare-fun x771 () Bool)
(declare-fun x693 () Int)
(declare-fun x533 () Bool)
(declare-fun x140 () Int)
(declare-fun x564 () Bool)
(declare-fun x311 (Int) Int)
(declare-fun x261 () Bool)
(declare-fun x245 () Int)
(declare-fun x269 () Bool)
(declare-fun x520 () Bool)
(declare-fun x674 () Bool)
(declare-fun x651 () Bool)
(declare-fun x769 () Bool)
(declare-fun x339 () Bool)
(declare-fun x8 () Int)
(declare-fun x669 () Bool)
(declare-fun x473 () Bool)
(declare-fun x568 () Bool)
(declare-fun x694 () Int)
(declare-fun x538 () Bool)
(declare-fun x480 () Int)
(declare-fun x828 () Bool)
(declare-fun x789 () Bool)
(declare-fun x718 () Bool)
(declare-fun x498 () Int)
(declare-fun x661 () Int)
(declare-fun x627 () Int)
(declare-fun x800 () Int)
(declare-fun x285 () Int)
(declare-fun x332 () Bool)
(declare-fun x422 () Int)
(declare-fun x825 () Int)
(declare-fun x450 () Bool)
(declare-fun x103 () Int)
(declare-fun x19 () Bool)
(declare-fun x689 () Int)
(declare-fun x353 () Int)
(declare-fun x486 () Int)
(declare-fun x109 () Int)
(declare-fun x412 () Bool)
(declare-fun x216 () Int)
(declare-fun x169 () Int)
(declare-fun x632 () Bool)
(declare-fun x254 () Bool)
(declare-fun x400 () Int)
(declare-fun x156 () Bool)
(declare-fun x462 () Int)
(declare-fun x556 () Bool)
(declare-fun x377 () Int)
(declare-fun x453 () Int)
(declare-fun x112 () Int)
(declare-fun x541 () Bool)
(declare-fun x571 () Int)
(declare-fun x86 () Int)
(declare-fun x223 () Bool)
(declare-fun x167 () Bool)
(declare-fun x816 () Bool)
(declare-fun x751 () Bool)
(declare-fun x212 () Int)
(declare-fun x611 () Int)
(declare-fun x510 () Int)
(declare-fun x119 () Bool)
(declare-fun x542 () Int)
(declare-fun x413 () Bool)
(declare-fun x781 () Int)
(declare-fun x615 () Int)
(declare-fun x569 () Int)
(declare-fun x491 () Int)
(declare-fun x278 () Bool)
(declare-fun x577 () Int)
(declare-fun x819 () Bool)
(declare-fun x572 () Int)
(declare-fun x478 () Bool)
(declare-fun x299 () Int)
(declare-fun x359 () Int)
(declare-fun x606 () Bool)
(declare-fun x347 () Bool)
(declare-fun x655 () Int)
(declare-fun x125 () Int)
(declare-fun x272 () Int)
(declare-fun x391 () Bool)
(declare-fun x162 () Bool)
(declare-fun x386 () Bool)
(declare-fun x129 () Bool)
(declare-fun x544 () Bool)
(declare-fun x314 () Int)
(declare-fun x672 () Bool)
(declare-fun x625 () Bool)
(declare-fun x513 () Int)
(declare-fun x784 () Int)
(declare-fun x574 () Int)
(declare-fun x745 () Int)
(declare-fun x724 () Int)
(declare-fun x720 () Int)
(declare-fun x287 () Int)
(declare-fun x696 () Bool)
(declare-fun x636 () Int)
(declare-fun x476 () Int)
(declare-fun x637 () Int)
(declare-fun x187 () Int)
(declare-fun x500 () Bool)
(declare-fun x68 () Int)
(declare-fun x806 () Int)
(declare-fun x757 () Bool)
(declare-fun x830 () Int)
(declare-fun x477 () Bool)
(declare-fun x375 () Int)
(declare-fun x276 () Bool)
(declare-fun x126 () Int)
(declare-fun x692 () Bool)
(declare-fun x601 () Bool)
(declare-fun x503 () Bool)
(declare-fun x26 () Int)
(declare-fun x505 () Bool)
(declare-fun x85 () Bool)
(declare-fun x24 () Bool)
(declare-fun x328 () Int)
(declare-fun x591 () Int)
(declare-fun x67 () Int)
(declare-fun x46 () Int)
(declare-fun x536 () Int)
(declare-fun x369 () Int)
(declare-fun x114 () Int)
(declare-fun x433 () Bool)
(declare-fun x474 () Int)
(declare-fun x658 () Int)
(declare-fun x466 () Int)
(declare-fun x395 () Int)
(declare-fun x774 () Bool)
(declare-fun x516 () Int)
(declare-fun x716 () x104)
(declare-fun x341 () Int)
(declare-fun x475 () Int)
(declare-fun x174 () Int)
(declare-fun x827 (x104) Int)
(declare-fun x201 () Int)
(declare-fun x378 () Bool)
(declare-fun x744 () Bool)
(declare-fun x815 () Bool)
(declare-fun x361 () Int)
(declare-fun x36 () Bool)
(declare-fun x793 () Int)
(declare-fun x286 () Int)
(declare-fun x208 () Bool)
(declare-fun x647 () Int)
(declare-fun x583 () Bool)
(declare-fun x65 () Bool)
(declare-fun x671 () Bool)
(declare-fun x432 () Bool)
(declare-fun x279 () Bool)
(declare-fun x268 () Int)
(declare-fun x120 () Bool)
(declare-fun x678 () Bool)
(declare-fun x1 () Int)
(declare-fun x316 () Bool)
(declare-fun x170 () Int)
(declare-fun x487 () Bool)
(declare-fun x660 () Bool)
(declare-fun x735 () Int)
(declare-fun x220 () Int)
(declare-fun x229 () Int)
(declare-fun x303 () Int)
(declare-fun x634 () Int)
(declare-fun x834 () Bool)
(declare-fun x259 () Int)
(declare-fun x71 () Int)
(declare-fun x250 () Int)
(declare-fun x37 () Int)
(declare-fun x306 () Bool)
(declare-fun x144 () Int)
(declare-fun x219 () Bool)
(declare-fun x567 () Int)
(declare-fun x258 () Int)
(declare-fun x621 () Bool)
(declare-fun x657 () Int)
(declare-fun x668 () Bool)
(declare-fun x709 () Bool)
(declare-fun x266 () Bool)
(declare-fun x40 () Bool)
(declare-fun x16 () Int)
(declare-fun x384 () Int)
(declare-fun x424 () Bool)
(declare-fun x360 () Bool)
(declare-fun x511 () Int)
(declare-fun x721 () Int)
(declare-fun x88 () Bool)
(declare-fun x437 () Bool)
(declare-fun x429 () Bool)
(declare-fun x559 () Bool)
(declare-fun x236 () Int)
(declare-fun x717 () Bool)
(declare-fun x540 () Bool)
(declare-fun x761 () Bool)
(declare-fun x427 () Int)
(declare-fun x141 () Int)
(declare-fun x42 () Int)
(declare-fun x407 () Int)
(declare-fun x134 () Bool)
(declare-fun x59 () Int)
(declare-fun x414 () Bool)
(declare-fun x506 () Int)
(declare-fun x738 () Int)
(declare-fun x685 () Bool)
(declare-fun x21 () Int)
(declare-fun x833 () Bool)
(declare-fun x310 () Int)
(declare-fun x297 () Bool)
(declare-fun x205 () Bool)
(declare-fun x570 () Int)
(declare-fun x388 () Int)
(declare-fun x275 () Int)
(declare-fun x595 () Int)
(declare-fun x41 () Int)
(declare-fun x237 () Bool)
(declare-fun x707 () Int)
(declare-fun x241 () Int)
(declare-fun x580 () Bool)
(declare-fun x643 () Int)
(declare-fun x280 () Bool)
(declare-fun x467 () Int)
(declare-fun x243 () Int)
(declare-fun x418 () Bool)
(declare-fun x619 () Bool)
(declare-fun x396 () Bool)
(declare-fun x343 () Int)
(declare-fun x770 () Bool)
(declare-fun x255 () Int)
(declare-fun x423 () Bool)
(declare-fun x617 () Int)
(declare-fun x607 (Int) Int)
(declare-fun x283 () Int)
(declare-fun x588 () Bool)
(declare-fun x107 () Int)
(declare-fun x507 () Int)
(declare-fun x624 () Int)
(declare-fun x319 (Int Int) Int)
(declare-fun x436 () Bool)
(declare-fun x715 () Int)
(declare-fun x573 () Bool)
(declare-fun x531 () Int)
(declare-fun x838 () Int)
(declare-fun x519 () Bool)
(declare-fun x777 () Int)
(declare-fun x638 () Bool)
(declare-fun x116 () Bool)
(declare-fun x790 () Int)
(declare-fun x96 () x104)
(declare-fun x302 () Bool)
(declare-fun x331 () Bool)
(declare-fun x665 (Int) Int)
(declare-fun x74 () Bool)
(declare-fun x821 () Int)
(declare-fun x267 () Bool)
(declare-fun x710 () Int)
(declare-fun x832 () Int)
(declare-fun x644 () Bool)
(declare-fun x47 () Int)
(declare-fun x823 () Int)
(declare-fun x419 () Int)
(declare-fun x179 () Int)
(declare-fun x18 () Int)
(declare-fun x312 () Bool)
(declare-fun x318 () Int)
(declare-fun x603 () Bool)
(declare-fun x76 () Int)
(declare-fun x263 () Int)
(declare-fun x149 () Bool)
(declare-fun x649 () Int)
(declare-fun x253 () Int)
(declare-fun x29 () Int)
(declare-fun x6 (Int Int) Int)
(declare-fun x226 () Bool)
(declare-fun x441 () Int)
(declare-fun x123 () Int)
(declare-fun x662 () Bool)
(declare-fun x782 () Int)
(declare-fun x183 () Int)
(declare-fun x152 () Int)
(declare-fun x349 () Bool)
(declare-fun x695 () Int)
(declare-fun x191 (Int) Int)
(declare-fun x301 () Int)
(declare-fun x550 () Bool)
(declare-fun x321 () Int)
(declare-fun x820 () Bool)
(declare-fun x325 () Bool)
(declare-fun x831 () Bool)
(declare-fun x650 () Int)
(declare-fun x277 () Int)
(declare-fun x548 () Int)
(declare-fun x399 () Bool)
(declare-fun x28 () Bool)
(declare-fun x756 () Int)
(declare-fun x214 () Bool)
(declare-fun x604 () Int)
(declare-fun x602 () Int)
(declare-fun x249 () Int)
(declare-fun x166 () Int)
(declare-fun x517 () Bool)
(declare-fun x72 () Int)
(declare-fun x348 () Int)
(declare-fun x699 () Bool)
(declare-fun x512 () Int)
(declare-fun x822 () Int)
(declare-fun x446 () Bool)
(declare-fun x786 () Bool)
(declare-fun x350 () Int)
(declare-fun x52 () Bool)
(declare-fun x157 () Int)
(declare-fun x370 () Int)
(declare-fun x15 () Int)
(declare-fun x681 () Int)
(declare-fun x785 () Bool)
(declare-fun x293 () Int)
(declare-fun x698 () Int)
(declare-fun x484 () Int)
(declare-fun x374 () Int)
(declare-fun x509 () Int)
(declare-fun x608 () Int)
(declare-fun x155 () Bool)
(declare-fun x35 () Bool)
(declare-fun x729 () Int)
(declare-fun x371 () Int)
(declare-fun x501 () Bool)
(declare-fun x30 () Int)
(declare-fun x798 () Int)
(declare-fun x700 () Bool)
(declare-fun x801 () Bool)
(declare-fun x521 () Int)
(declare-fun x494 () Bool)
(declare-fun x575 () Int)
(declare-fun x240 () Int)
(declare-fun x481 () Int)
(declare-fun x352 () Int)
(declare-fun x766 () Int)
(declare-fun x535 () Int)
(define-fun x746 ((x104 x104) (x146 Int)) x104 (ite ((_ is x581) x104) (x581 (x663 x104) (x292 x104) (x200 x104) (x101 x104) (x741 x104) (x648 x104) (x53 x104) (+ x146 (x79 x104))) (ite ((_ is x743) x104) (x743 (x364 x104) (x70 x104) (x193 x104) (x515 x104) (x733 x104) (x534 x104) (+ (x5 x104) x146)) (ite ((_ is x406) x104) (x406 (x612 x104) (x818 x104) (x666 x104) (x290 x104) (x145 x104) (+ (x281 x104) x146)) (ite ((_ is x324) x104) (x324 (x398 x104) (x736 x104) (x525 x104) (x459 x104) (+ (x553 x104) x146)) (ite ((_ is x814) x104) (x814 (x99 x104) (x563 x104) (x248 x104) (+ x146 (x397 x104))) (ite ((_ is x813) x104) (x813 (x131 x104) (x555 x104) (+ (x472 x104) x146)) (ite ((_ is x291) x104) (x291 (x217 x104) (+ x146 (x754 x104))) (x206 (+ (x189 x104) x146))))))))))
(define-fun x584 ((x31 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x31) (<= 0 x31)) x31 (- x31 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x731 ((x31 Int)) Int (ite (and (< x31 0) (>= x31 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x31) x31))
(define-fun x225 ((x683 Int)) Bool (and (>= x683 0) (< x683 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x713 ((x683 Int)) Bool (and (= (x319 x683 115792089237316195423570985008687907853269984665640564039457584007913129639935) x683) (= (x319 115792089237316195423570985008687907853269984665640564039457584007913129639935 x683) x683)))
(define-fun x609 ((x683 Int)) Bool (and (= 0 (x319 0 x683)) (= 0 (x319 x683 0))))
(define-fun x150 ((x683 Int)) Bool (= x683 (x319 x683 x683)))
(define-fun x701 ((x683 Int)) Bool (and (x609 x683) (x713 x683) (x150 x683)))
(define-fun x271 ((x683 Int) (x218 Int)) Bool (= (x319 x683 x218) (x319 x218 x683)))
(define-fun x528 ((x683 Int) (x218 Int)) Bool (and (=> (<= 0 x683) (<= (x319 x683 x218) x683)) (=> (>= x218 0) (>= x218 (x319 x683 x218))) (>= (x319 x683 x218) 0)))
(define-fun x839 ((x683 Int) (x218 Int)) Bool (and (x271 x683 x218) (x528 x683 x218)))
(define-fun x110 ((x683 Int)) Bool (= (mod x683 1461501637330902918203684832716283019655932542976) (x319 x683 1461501637330902918203684832716283019655932542975)))
(define-fun x2 ((x683 Int)) Bool (and (x110 x683) (x839 x683 1461501637330902918203684832716283019655932542975)))
(define-fun x94 ((x683 Int)) Bool (= (x319 x683 255) (mod x683 256)))
(define-fun x740 ((x683 Int)) Bool (and (x839 x683 255) (x94 x683)))
(define-fun x471 ((x683 Int)) Bool (= (mod x683 4294967296) (x319 x683 4294967295)))
(define-fun x326 ((x683 Int)) Bool (and (x839 x683 4294967295) (x471 x683)))
(define-fun x192 ((x683 Int)) Bool (= (mod x683 79228162514264337593543950336) (x319 x683 79228162514264337593543950335)))
(define-fun x773 ((x683 Int)) Bool (and (x839 x683 79228162514264337593543950335) (x192 x683)))
(define-fun x137 ((x683 Int)) Bool (= (mod x683 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x683 32) (x319 x683 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x826 ((x683 Int)) Bool (and (x839 x683 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x137 x683)))
(define-fun x393 ((x683 Int)) Bool (= (x319 x683 281474976710655) (mod x683 281474976710656)))
(define-fun x444 ((x683 Int)) Bool (and (x839 x683 281474976710655) (x393 x683)))
(define-fun x723 ((x524 Int)) Int (x489 x524))
(define-fun x457 ((x524 Int)) Int (ite (and (>= x524 x107) (> (+ x107 x112) x524)) (x489 (+ x126 (- x524 x107))) (x294 x524)))
(define-fun x372 ((x524 Int)) Int (ite (= x524 x729) 0 (x457 x524)))
(define-fun x75 ((x524 Int)) Int (ite (= x107 x524) 0 (x372 x524)))
(define-fun x714 ((x524 Int)) Int (ite (= x417 x524) 0 (x75 x524)))
(define-fun x63 ((x524 Int)) Int (ite (= x524 x107) x68 (x714 x524)))
(define-fun x420 ((x524 Int)) Int (ite (= x524 x417) x327 (x63 x524)))
(define-fun x138 ((x524 Int)) Int (ite (= x524 x516) 84260195902586255382601658512858328503538471556003836500752771342367880904704 (x420 x524)))
(define-fun x652 ((x524 Int)) Int (ite (= x164 x524) x3 (x138 x524)))
(define-fun x143 ((x524 Int)) Int (ite (= x285 x524) x693 (x652 x524)))
(define-fun x368 ((x524 Int)) Int (ite (= x524 x210) x727 (x143 x524)))
(define-fun x730 ((x524 Int)) Int (ite (= x524 x283) x539 (x368 x524)))
(define-fun x479 ((x524 Int)) Int (ite (= x524 x388) x153 (x730 x524)))
(define-fun x184 ((x524 Int)) Int (ite (= x524 x488) x252 (x479 x524)))
(define-fun x379 ((x524 Int)) Int (ite (= x524 x330) x97 (x184 x524)))
(define-fun x273 ((x524 Int)) Int (ite (= x151 x524) x62 (x379 x524)))
(define-fun x320 ((x524 Int)) Int (ite (= x524 x441) x821 (x273 x524)))
(define-fun x173 ((x524 Int)) Int (ite (= x524 x264) x427 (x320 x524)))
(define-fun x118 ((x524 Int)) Int (ite (= x524 x16) x722 (x173 x524)))
(define-fun x195 ((x524 Int)) Int (ite (and (> (+ 32 x516) x524) (<= x516 x524)) (x270 (+ (- x524 x516) 0)) (x118 x524)))
(define-fun x376 ((x524 Int)) Int (ite x421 (x195 x524) (x118 x524)))
(define-fun x586 ((x524 Int)) Int (ite (= x524 x287) x615 (x376 x524)))
(define-fun x527 ((x524 Int)) Int (ite (and (>= x524 x680) (> (+ x558 x680) x524)) (x489 (+ x310 (- x524 x680))) (x586 x524)))
(define-fun x354 ((x524 Int)) Int (ite (= x387 x524) 0 (x527 x524)))
(define-fun x244 ((x524 Int)) Int (ite (= x622 x524) x154 (x354 x524)))
(define-fun x726 ((x524 Int)) Int (ite (= x524 x694) x452 (x244 x524)))
(define-fun x54 ((x524 Int)) Int (ite (= x524 x228) x778 (x726 x524)))
(define-fun x779 ((x524 Int)) Int (ite (= x524 x318) x72 (x54 x524)))
(define-fun x578 ((x524 Int)) Int (ite (= x679 x524) x793 (x779 x524)))
(define-fun x234 ((x524 Int)) Int (ite x503 (x779 x524) (ite x517 (x54 x524) (ite x789 (x726 x524) (ite x468 (x244 x524) (x578 x524))))))
(define-fun x203 ((x524 Int)) Int (ite (= x708 x524) x204 (x234 x524)))
(define-fun x190 ((x524 Int)) Int (ite (= x524 x788) x369 (x203 x524)))
(define-fun x748 ((x524 Int)) Int (ite (= x735 x524) x201 (x190 x524)))
(define-fun x654 ((x524 Int)) Int (ite (= x524 x707) 19211759364411014404085342898986916011845161991165440702586961613165858652160 (x748 x524)))
(define-fun x92 ((x524 Int)) Int (ite (= x125 x524) 32 (x654 x524)))
(define-fun x435 ((x524 Int)) Int (ite (= x524 x610) x112 (x92 x524)))
(define-fun x719 ((x524 Int)) Int (ite (and (>= x524 x127) (< x524 (+ x127 x112))) (x489 (+ (- x524 x127) x126)) (x435 x524)))
(define-fun x590 ((x524 Int)) Int (ite (= x745 x524) 0 (x719 x524)))
(define-fun x614 ((x524 Int)) Int (ite (and (> (+ 160 x707) x524) (<= x707 x524)) (x732 (+ (- x524 x707) 0)) (x590 x524)))
(define-fun x335 ((x524 Int)) Int (ite x224 (x614 x524) (x590 x524)))
(define-fun x323 ((x524 Int)) Int (ite (= x438 x524) x677 (x335 x524)))
(define-fun x12 ((x524 Int)) Int (ite (= x524 x42) x230 (x323 x524)))
(define-fun x775 ((x524 Int)) Int (ite (= x341 x524) x438 (x12 x524)))
(define-fun x242 ((x524 Int)) Int (ite (= x782 x524) x809 (x775 x524)))
(define-fun x147 ((x524 Int)) Int (ite (= x502 x524) x64 (x242 x524)))
(define-fun x84 ((x524 Int)) Int (ite (= x577 x524) x185 (x147 x524)))
(define-fun x706 ((x524 Int)) Int (ite (= x524 x352) 6449634268930127669875982587348191347588899670384742761526659814853911248896 (x84 x524)))
(define-fun x233 ((x524 Int)) Int (ite (= x174 x524) x611 (x706 x524)))
(define-fun x465 ((x524 Int)) Int (ite (and (< x524 (+ x352 32)) (>= x524 x352)) (x665 (+ 0 (- x524 x352))) (x233 x524)))
(define-fun x83 ((x524 Int)) Int (ite x540 (x465 x524) (x233 x524)))
(define-fun x329 ((x524 Int)) Int (ite (= x608 x524) x508 (x83 x524)))
(define-fun x543 ((x524 Int)) Int (ite (= x255 x524) x594 (x329 x524)))
(define-fun x135 ((x524 Int)) Int (ite (= x524 x182) x575 (x543 x524)))
(define-fun x762 ((x524 Int)) Int (ite (= x56 x524) x806 (x135 x524)))
(define-fun x373 ((x524 Int)) Int (ite (= x524 x808) x374 (x762 x524)))
(define-fun x739 ((x524 Int)) Int (ite (= x524 x535) x705 (x373 x524)))
(define-fun x305 ((x524 Int)) Int (ite (= x643 x524) (x682 x691) (x739 x524)))
(define-fun x728 ((x524 Int)) Int (ite (= x524 x430) x710 (x305 x524)))
(define-fun x95 ((x524 Int)) Int (ite (= x524 x321) (x682 x691) (x373 x524)))
(define-fun x767 ((x524 Int)) Int (ite (= x524 x27) x705 (x95 x524)))
(define-fun x523 ((x524 Int)) Int (ite (= x524 x430) x647 (x767 x524)))
(define-fun x620 ((x524 Int)) Int (ite x760 (x728 x524) (x523 x524)))
(define-fun x32 ((x524 Int)) Int (ite x505 (x373 x524) (x620 x524)))
(define-fun x44 ((x524 Int)) Int (ite (= x524 x141) 11559732032986387107991004021392285783925812861821192530917403151452391805634 (x32 x524)))
(define-fun x221 ((x524 Int)) Int (ite (= x524 x703) 10857046999023057135944570762232829481370756359578518086990519993285655852781 (x44 x524)))
(define-fun x747 ((x524 Int)) Int (ite (= x613 x524) x141 (x221 x524)))
(define-fun x117 ((x524 Int)) Int (ite (= x689 x524) 17805874995975841540914202342111839520379459829704422454583296818431106115052 (x747 x524)))
(define-fun x598 ((x524 Int)) Int (ite (= x524 x344) 13392588948715843804641432497768002650278120570034223513918757245338268106653 (x117 x524)))
(define-fun x686 ((x524 Int)) Int (ite (= x111 x524) x689 (x598 x524)))
(define-fun x765 ((x524 Int)) Int (ite (= x524 x698) x509 (x686 x524)))
(define-fun x526 ((x524 Int)) Int (ite (= x524 x453) x107 (x765 x524)))
(define-fun x178 ((x524 Int)) Int (ite (= x21 x524) 128 (x526 x524)))
(define-fun x829 ((x524 Int)) Int (ite (= x524 x481) x613 (x178 x524)))
(define-fun x753 ((x524 Int)) Int (ite (and (<= x824 x524) (> (+ x824 384) x524)) (x489 (+ (- x524 x824) x587)) (x829 x524)))
(define-fun x383 ((x524 Int)) Int (ite (= x524 x537) x89 (x753 x524)))
(define-fun x605 ((x524 Int)) Int (ite (= x524 x377) x241 (x383 x524)))
(define-fun x45 ((x524 Int)) Int (ite (= x507 x524) x114 (x605 x524)))
(define-fun x711 ((x524 Int)) Int (ite (= x38 x524) x46 (x45 x524)))
(define-fun x161 ((x524 Int)) Int (ite (= x103 x524) x18 (x711 x524)))
(define-fun x77 ((x524 Int)) Int (ite (= x524 x752) x670 (x161 x524)))
(define-fun x315 ((x524 Int)) Int (ite (= x764 x524) x783 (x77 x524)))
(define-fun x404 ((x524 Int)) Int (ite (= x454 x524) x661 (x315 x524)))
(define-fun x799 ((x524 Int)) Int (ite (= x440 x524) x763 (x404 x524)))
(define-fun x483 ((x524 Int)) Int (ite (= x524 x486) x800 (x799 x524)))
(define-fun x532 ((x524 Int)) Int (ite (= x524 x595) x66 (x483 x524)))
(define-fun x618 ((x524 Int)) Int (ite (= x524 x299) x676 (x532 x524)))
(define-fun x642 ((x524 Int)) Int (ite (and (<= x41 x524) (> (+ x41 32) x524)) (x489 (+ (- x524 x41) x587)) (x618 x524)))
(define-fun x485 ((x524 Int)) Int (ite (and (<= x41 x524) (> (+ 32 x41) x524)) (x311 (+ (- x524 x41) 0)) (x642 x524)))
(define-fun x168 ((x524 Int)) Int (ite (= 192 x524) x34 (x191 x524)))
(define-fun x596 ((x524 Int)) Int (ite (= x524 256) x222 (x43 x524)))
(define-fun x39 ((x524 Int)) Int (ite x211 (x485 x524) (x642 x524)))
(define-fun x431 ((x524 Int)) Int (ite (= x10 x524) x8 (x39 x524)))
(define-fun x55 ((x524 Int)) Int (ite (= x346 x524) x303 (x431 x524)))
(define-fun x712 ((x524 Int)) Int (ite (= x524 x777) x1 (x55 x524)))
(define-fun x239 ((x524 Int)) Int (ite (= x524 x720) x249 (x712 x524)))
(define-fun x792 ((x524 Int)) Int (ite (= x524 x497) x407 (x239 x524)))
(define-fun x363 ((x524 Int)) Int (ite (= x345 x524) x491 (x792 x524)))
(define-fun x482 ((x524 Int)) Int (ite (= x524 x286) x832 (x363 x524)))
(define-fun x148 ((x524 Int)) Int (ite (= x301 x524) x554 (x482 x524)))
(define-fun x317 ((x524 Int)) Int (ite (= x734 x524) x13 (x148 x524)))
(define-fun x461 ((x524 Int)) Int (ite (= x524 x657) x796 (x317 x524)))
(define-fun x380 ((x524 Int)) Int (ite (= x67 x524) x268 (x461 x524)))
(define-fun x340 ((x524 Int)) Int (ite (= x721 x524) x419 (x380 x524)))
(define-fun x136 ((x524 Int)) Int (ite (= x572 x524) x631 (x340 x524)))
(define-fun x163 ((x524 Int)) Int (ite (= x524 x247) 1 (x136 x524)))
(define-fun x196 ((x524 x104)) Int (ite (= x524 x96) x144 (x274 x524)))
(define-fun x496 ((x683 Int)) Bool (=> (and (not (= x683 19211759364411014404085342898986916011845161991165440702586961613165858652160)) (not (= 6449634268930127669875982587348191347588899670384742761526659814853911248896 x683)) (not (= 10857046999023057135944570762232829481370756359578518086990519993285655852781 x683)) (not (= 1461501637330902918203684832716283019655932542975 x683)) (not (= 15734828340100255228388097270354557497891140761267446712098462632690385532271 x683)) (not (= 4294967296 x683)) (not (= x683 84260195902586255382601658512858328503538471556003836500752771342367880904704)) (not (= 281474976710655 x683)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x683)) (not (= 1461501637330902918203684832716283019655932542976 x683)) (not (= x683 403919343)) (< 10000 x683) (not (= x683 268435456)) (not (= 4294967295 x683)) (not (= x683 18446744073709551615)) (not (= x683 11559732032986387107991004021392285783925812861821192530917403151452391805634)) (not (= x683 2262799685)) (not (= 79228162514264337593543950335 x683)) (not (= 13392588948715843804641432497768002650278120570034223513918757245338268106653 x683)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x683)) (not (= 17805874995975841540914202342111839520379459829704422454583296818431106115052 x683)) (not (= x683 500000))) (not ((_ is x206) (x690 x683)))))
(assert (= x133 (or x468 x503 x517 x28 x789)))
(assert (x326 x1))
(assert (x225 x182))
(assert (= (and x820 (not x237)) x828))
(assert (x225 x3))
(assert (x496 (x372 (x584 (+ x107 192)))))
(assert (x326 x407))
(assert (x225 x199))
(assert (x225 x361))
(assert (= 500000 (x682 (x206 500000))))
(assert (= x540 (and x237 x820)))
(assert (=> (>= 10000 (x523 (x584 (+ 64 x170)))) (= (x690 (x523 (x584 (+ x170 64)))) (x206 (x523 (x584 (+ 64 x170)))))))
(assert (x225 x310))
(assert (= (x682 (x690 x343)) x343))
(assert (= (x682 (x690 (x373 (x584 (+ 32 x571))))) (x373 (x584 (+ 32 x571)))))
(assert (x225 x729))
(assert (= x428 (or x412 x269)))
(assert (x496 x759))
(assert (x225 x417))
(assert (= x378 true))
(assert (x225 x299))
(assert (x225 x727))
(assert (= (x682 (x690 (x372 (x584 (+ x107 128))))) (x372 (x584 (+ x107 128)))))
(assert (x225 x577))
(assert (=> (<= (x340 (x584 (+ 128 x390))) 10000) (= (x690 (x340 (x584 (+ x390 128)))) (x206 (x340 (x584 (+ x390 128)))))))
(assert (x496 (x728 (x584 (+ x405 160)))))
(assert (= (and x213 x19) x644))
(assert (x225 x467))
(assert (= x266 (=> (and (and (and (= x430 (x584 (+ 64 x182))) (= x374 (x731 (- x307 32))) (= x571 (x584 (+ x808 32))) (= x410 (x373 x808)) (= x57 (<= x410 224)) (= (x731 (- x430 x808)) x307)) (and (= x182 (x584 (+ 64 x608))) (= x806 (x135 x370)) (= (x584 (+ 32 x570)) x370) (= (x543 x570) x575) (= (x584 (+ 32 x182)) x56))) (and (= (x83 160) x570) (= (x329 x658) x594) (= (x83 x562) x508) (= x608 (x584 (+ 32 x808))) (= (x83 128) x562) (= (x731 (- 268435456 x139)) x336) (= x658 (x584 (+ 32 x562))) (= (x584 (+ x608 32)) x255))) (and (=> (and (= x649 (x373 320)) (= (ite (<= x410 32) (x291 (x690 (x373 x571)) 0) (ite (>= 64 x410) (x813 (x690 (x373 x571)) (x690 (x373 (x584 (+ 32 x571)))) 0) (ite (>= 96 x410) (x814 (x690 (x373 x571)) (x690 (x373 (x584 (+ x571 32)))) (x690 (x373 (x584 (+ x571 64)))) 0) (ite (<= x410 128) (x324 (x690 (x373 x571)) (x690 (x373 (x584 (+ 32 x571)))) (x690 (x373 (x584 (+ 64 x571)))) (x690 (x373 (x584 (+ 96 x571)))) 0) (ite (>= 160 x410) (x406 (x690 (x373 x571)) (x690 (x373 (x584 (+ 32 x571)))) (x690 (x373 (x584 (+ 64 x571)))) (x690 (x373 (x584 (+ x571 96)))) (x690 (x373 (x584 (+ x571 128)))) 0) (ite (<= x410 192) (x743 (x690 (x373 x571)) (x690 (x373 (x584 (+ 32 x571)))) (x690 (x373 (x584 (+ 64 x571)))) (x690 (x373 (x584 (+ 96 x571)))) (x690 (x373 (x584 (+ 128 x571)))) (x690 (x373 (x584 (+ x571 160)))) 0) (ite (<= x410 224) (x581 (x690 (x373 x571)) (x690 (x373 (x584 (+ x571 32)))) (x690 (x373 (x584 (+ 64 x571)))) (x690 (x373 (x584 (+ 96 x571)))) (x690 (x373 (x584 (+ 128 x571)))) (x690 (x373 (x584 (+ x571 160)))) (x690 (x373 (x584 (+ x571 192)))) 0) (x690 x650)))))))) x691) (= x567 15734828340100255228388097270354557497891140761267446712098462632690385532271) (= x401 (= (mod x649 32) 0))) (and (=> (not x401) x74) (=> (and x401 (and (= x183 (x373 320)) (= (> x253 0) x550) (= (div x183 32) x253))) (and (=> (and (= x635 (> x253 255)) x550) (and (=> (and (and (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x569) x662) (= (x6 1 x253) x569)) (not x635)) (and (=> x662 x74) (=> (and (not x662) (= x569 x47)) x362))) (=> x635 x74))) (=> (and (not x550) (= x47 1)) x362))))) x57))))
(assert (= (x340 (x584 (+ 192 x390))) (x682 (x690 (x340 (x584 (+ 192 x390)))))))
(assert (x225 x285))
(assert (x225 x352))
(assert (x225 x86))
(assert (x225 x602))
(assert (= x556 (and x589 x672)))
(assert (= (and x550 x761) x802))
(assert (x225 x327))
(assert (x225 x375))
(assert (= (x748 (x584 (+ 64 x243))) (x682 (x690 (x748 (x584 (+ 64 x243)))))))
(assert (= (or x760 x718) x403))
(assert (x496 (x340 (x584 (+ 96 x390)))))
(assert (= (and (not x414) x306) x98))
(assert (x225 x633))
(assert (=> (>= 10000 (x372 (x584 (+ 32 x107)))) (= (x206 (x372 (x584 (+ 32 x107)))) (x690 (x372 (x584 (+ 32 x107)))))))
(assert (= (and x833 x133) x700))
(assert (= x325 (and x35 x696)))
(assert (=> (>= 10000 x422) (= (x690 x422) (x206 x422))))
(assert (=> (<= (x748 x243) 10000) (= (x206 (x748 x243)) (x690 (x748 x243)))))
(assert (x225 x781))
(assert (x225 x13))
(assert (= x786 (and x639 (not x692))))
(assert (= x418 (and x561 x559)))
(assert (x496 (x748 (x584 (+ x243 192)))))
(assert (= (x206 11559732032986387107991004021392285783925812861821192530917403151452391805634) (x690 11559732032986387107991004021392285783925812861821192530917403151452391805634)))
(assert (= x815 (and x447 x219)))
(assert (= (and x547 x209) x224))
(assert (= (and (not x235) x463) x632))
(assert (x701 x97))
(assert (= (and x251 x529) x478))
(assert (x701 x491))
(assert (x496 (x728 (x584 (+ 64 x405)))))
(assert (x225 x153))
(assert (x225 x288))
(assert (x225 x679))
(assert (= (x690 1461501637330902918203684832716283019655932542975) (x206 1461501637330902918203684832716283019655932542975)))
(assert (= x366 (and x774 x360)))
(assert (and (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x25 2 243)) (= 95780971304118053647396689196894323976171195136475136 (x25 2 176)) (= (x25 2 139) 696898287454081973172991196020261297061888) (= 39614081257132168796771975168 (x25 2 95)) (= (x25 2 128) 340282366920938463463374607431768211456) (= 2305843009213693952 (x25 2 61)) (= (x25 2 173) 11972621413014756705924586149611790497021399392059392) (= (x25 2 22) 4194304) (= (x25 2 21) 2097152) (= 8388608 (x25 2 23)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x25 2 236)) (= (x25 2 133) 10889035741470030830827987437816582766592) (= (x25 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 618970019642690137449562112 (x25 2 89)) (= (x25 2 59) 576460752303423488) (= 633825300114114700748351602688 (x25 2 99)) (= 2048 (x25 2 11)) (= 1267650600228229401496703205376 (x25 2 100)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x25 2 246)) (= (x25 2 94) 19807040628566084398385987584) (= (x25 2 167) 187072209578355573530071658587684226515959365500928) (= (x25 2 77) 151115727451828646838272) (= (x25 2 92) 4951760157141521099596496896) (= 664613997892457936451903530140172288 (x25 2 119)) (= (x25 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 2535301200456458802993406410752 (x25 2 101)) (= 316912650057057350374175801344 (x25 2 98)) (= (x25 2 114) 20769187434139310514121985316880384) (= (x25 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 70368744177664 (x25 2 46)) (= (x25 2 72) 4722366482869645213696) (= 41538374868278621028243970633760768 (x25 2 115)) (= (x25 2 185) 49039857307708443467467104868809893875799651909875269632) (= 302231454903657293676544 (x25 2 78)) (= (x25 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 16777216 (x25 2 24)) (= 17179869184 (x25 2 34)) (= 2475880078570760549798248448 (x25 2 91)) (= 64 (x25 2 6)) (= (x25 2 188) 392318858461667547739736838950479151006397215279002157056) (= 8192 (x25 2 13)) (= (x25 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 131072 (x25 2 17)) (= 1427247692705959881058285969449495136382746624 (x25 2 150)) (= (x25 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 5708990770823839524233143877797980545530986496 (x25 2 152)) (= 822752278660603021077484591278675252491367932816789931674304512 (x25 2 209)) (= (x25 2 135) 43556142965880123323311949751266331066368) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x25 2 245)) (= (x25 2 138) 348449143727040986586495598010130648530944) (= (x25 2 93) 9903520314283042199192993792) (= 10633823966279326983230456482242756608 (x25 2 123)) (= (x25 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 18889465931478580854784 (x25 2 74)) (= (x25 2 50) 1125899906842624) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x25 2 220)) (= (x25 2 177) 191561942608236107294793378393788647952342390272950272) (= (x25 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x25 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x25 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x25 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 2658455991569831745807614120560689152 (x25 2 121)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x25 2 217)) (= 401734511064747568885490523085290650630550748445698208825344 (x25 2 198)) (= (x25 2 71) 2361183241434822606848) (= 6427752177035961102167848369364650410088811975131171341205504 (x25 2 202)) (= (x25 2 160) 1461501637330902918203684832716283019655932542976) (= 5846006549323611672814739330865132078623730171904 (x25 2 162)) (= (x25 2 83) 9671406556917033397649408) (= (x25 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x25 2 116) 83076749736557242056487941267521536) (= 79228162514264337593543950336 (x25 2 96)) (= (x25 2 28) 268435456) (= 6129982163463555433433388108601236734474956488734408704 (x25 2 182)) (= (x25 2 5) 32) (= 22300745198530623141535718272648361505980416 (x25 2 144)) (= 12259964326927110866866776217202473468949912977468817408 (x25 2 183)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x25 2 248)) (= (x25 2 45) 35184372088832) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x25 2 249)) (= 19342813113834066795298816 (x25 2 84)) (= 44601490397061246283071436545296723011960832 (x25 2 145)) (= (x25 2 109) 649037107316853453566312041152512) (= 4294967296 (x25 2 32)) (= 9223372036854775808 (x25 2 63)) (= 2 (x25 2 1)) (= (x25 2 117) 166153499473114484112975882535043072) (= (x25 2 184) 24519928653854221733733552434404946937899825954937634816) (= 3064991081731777716716694054300618367237478244367204352 (x25 2 181)) (= 22835963083295358096932575511191922182123945984 (x25 2 154)) (= 182687704666362864775460604089535377456991567872 (x25 2 157)) (= (x25 2 178) 383123885216472214589586756787577295904684780545900544) (= (x25 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x25 2 111) 2596148429267413814265248164610048) (= 67108864 (x25 2 26)) (= 1048576 (x25 2 20)) (= (x25 2 16) 65536) (= (x25 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x25 2 86) 77371252455336267181195264) (= (x25 2 131) 2722258935367507707706996859454145691648) (= 2854495385411919762116571938898990272765493248 (x25 2 151)) (= 536870912 (x25 2 29)) (= (x25 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 75557863725914323419136 (x25 2 76)) (= (x25 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x25 2 140) 1393796574908163946345982392040522594123776) (= 4611686018427387904 (x25 2 62)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x25 2 216)) (= (x25 2 67) 147573952589676412928) (= 72057594037927936 (x25 2 56)) (= 1532495540865888858358347027150309183618739122183602176 (x25 2 180)) (= (x25 2 3) 8) (= 748288838313422294120286634350736906063837462003712 (x25 2 169)) (= 309485009821345068724781056 (x25 2 88)) (= 604462909807314587353088 (x25 2 79)) (= (x25 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x25 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x25 2 113) 10384593717069655257060992658440192) (= 98079714615416886934934209737619787751599303819750539264 (x25 2 186)) (= (x25 2 15) 32768) (= 2199023255552 (x25 2 41)) (= (x25 2 110) 1298074214633706907132624082305024) (= 421249166674228746791672110734681729275580381602196445017243910144 (x25 2 218)) (= (x25 2 69) 590295810358705651712) (= 4 (x25 2 2)) (= 295147905179352825856 (x25 2 68)) (= (x25 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x25 2 253)) (= 45671926166590716193865151022383844364247891968 (x25 2 155)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x25 2 254)) (= 730750818665451459101842416358141509827966271488 (x25 2 159)) (= (x25 2 44) 17592186044416) (= 324518553658426726783156020576256 (x25 2 108)) (= 100433627766186892221372630771322662657637687111424552206336 (x25 2 196)) (= 1496577676626844588240573268701473812127674924007424 (x25 2 170)) (= (x25 2 39) 549755813888) (= 16384 (x25 2 14)) (= (x25 2 156) 91343852333181432387730302044767688728495783936) (= 1208925819614629174706176 (x25 2 80)) (= (x25 2 51) 2251799813685248) (= 9444732965739290427392 (x25 2 73)) (= 158456325028528675187087900672 (x25 2 97)) (= 1569275433846670190958947355801916604025588861116008628224 (x25 2 190)) (= 68719476736 (x25 2 36)) (= (x25 2 47) 140737488355328) (= (x25 2 172) 5986310706507378352962293074805895248510699696029696) (= 81129638414606681695789005144064 (x25 2 106)) (= 18014398509481984 (x25 2 54)) (= 87112285931760246646623899502532662132736 (x25 2 136)) (= (x25 2 142) 5575186299632655785383929568162090376495104) (= (x25 2 143) 11150372599265311570767859136324180752990208) (= (x25 2 75) 37778931862957161709568) (= (x25 2 126) 85070591730234615865843651857942052864) (= 1180591620717411303424 (x25 2 70)) (= 562949953421312 (x25 2 49)) (= 2993155353253689176481146537402947624255349848014848 (x25 2 171)) (= (x25 2 107) 162259276829213363391578010288128) (= (x25 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x25 2 153) 11417981541647679048466287755595961091061972992) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x25 2 230)) (= 281474976710656 (x25 2 48)) (= (x25 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x25 2 0) 1) (= 374144419156711147060143317175368453031918731001856 (x25 2 168)) (= 11692013098647223345629478661730264157247460343808 (x25 2 163)) (= (x25 2 25) 33554432) (= 144115188075855872 (x25 2 57)) (= (x25 2 137) 174224571863520493293247799005065324265472) (= 4096 (x25 2 12)) (= (x25 2 104) 20282409603651670423947251286016) (= 3138550867693340381917894711603833208051177722232017256448 (x25 2 191)) (= 18446744073709551616 (x25 2 64)) (= (x25 2 30) 1073741824) (= (x25 2 166) 93536104789177786765035829293842113257979682750464) (= (x25 2 85) 38685626227668133590597632) (= 178405961588244985132285746181186892047843328 (x25 2 147)) (= 2923003274661805836407369665432566039311865085952 (x25 2 161)) (= 154742504910672534362390528 (x25 2 87)) (= 200867255532373784442745261542645325315275374222849104412672 (x25 2 197)) (= 356811923176489970264571492362373784095686656 (x25 2 148)) (= 52656145834278593348959013841835216159447547700274555627155488768 (x25 2 215)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x25 2 251)) (= 128 (x25 2 7)) (= (x25 2 129) 680564733841876926926749214863536422912) (= (x25 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 5444517870735015415413993718908291383296 (x25 2 132)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x25 2 250)) (= (x25 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= 47890485652059026823698344598447161988085597568237568 (x25 2 175)) (= (x25 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x25 2 43) 8796093022208) (= (x25 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 13164036458569648337239753460458804039861886925068638906788872192 (x25 2 213)) (= 16 (x25 2 4)) (= (x25 2 103) 10141204801825835211973625643008) (= 256 (x25 2 8)) (= (x25 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x25 2 225)) (= (x25 2 141) 2787593149816327892691964784081045188247552) (= 89202980794122492566142873090593446023921664 (x25 2 146)) (= 34359738368 (x25 2 35)) (= (x25 2 122) 5316911983139663491615228241121378304) (= 23945242826029513411849172299223580994042798784118784 (x25 2 174)) (= (x25 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x25 2 229)) (= 8589934592 (x25 2 33)) (= (x25 2 31) 2147483648) (= 803469022129495137770981046170581301261101496891396417650688 (x25 2 199)) (= (x25 2 165) 46768052394588893382517914646921056628989841375232) (= (x25 2 189) 784637716923335095479473677900958302012794430558004314112) (= 5192296858534827628530496329220096 (x25 2 112)) (= 2417851639229258349412352 (x25 2 81)) (= 21267647932558653966460912964485513216 (x25 2 124)) (= (x25 2 65) 36893488147419103232) (= 5070602400912917605986812821504 (x25 2 102)) (= 50216813883093446110686315385661331328818843555712276103168 (x25 2 195)) (= (x25 2 125) 42535295865117307932921825928971026432) (= 134217728 (x25 2 27)) (= (x25 2 187) 196159429230833773869868419475239575503198607639501078528) (= 6582018229284824168619876730229402019930943462534319453394436096 (x25 2 212)) (= 512 (x25 2 9)) (= (x25 2 37) 137438953472) (= 1024 (x25 2 10)) (= 1237940039285380274899124224 (x25 2 90)) (= (x25 2 42) 4398046511104) (= (x25 2 52) 4503599627370496) (= 9007199254740992 (x25 2 53)) (= 1152921504606846976 (x25 2 60)) (= (x25 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x25 2 18) 262144) (= (x25 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 73786976294838206464 (x25 2 66)) (= (x25 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 26328072917139296674479506920917608079723773850137277813577744384 (x25 2 214)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x25 2 211)) (= (x25 2 127) 170141183460469231731687303715884105728) (= (x25 2 120) 1329227995784915872903807060280344576) (= 36028797018963968 (x25 2 55)) (= (x25 2 105) 40564819207303340847894502572032) (= (x25 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 21778071482940061661655974875633165533184 (x25 2 134)) (= 713623846352979940529142984724747568191373312 (x25 2 149)) (= (x25 2 19) 524288) (= (x25 2 58) 288230376151711744) (= 842498333348457493583344221469363458551160763204392890034487820288 (x25 2 219)) (= (x25 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x25 2 179) 766247770432944429179173513575154591809369561091801088) (= (x25 2 40) 1099511627776) (= 1645504557321206042154969182557350504982735865633579863348609024 (x25 2 210)) (= (x25 2 158) 365375409332725729550921208179070754913983135744) (= 1361129467683753853853498429727072845824 (x25 2 130)) (= (x25 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x25 2 82) 4835703278458516698824704) (= 23384026197294446691258957323460528314494920687616 (x25 2 164)) (= (x25 2 118) 332306998946228968225951765070086144) (= (x25 2 38) 274877906944)))
(assert (x225 x336))
(assert (x496 (x372 (x584 (+ 32 x107)))))
(assert (= x223 (and (not x833) x133)))
(assert (x225 x1))
(assert (x701 255))
(assert (x225 x643))
(assert (= (or x641 x564) x119))
(assert (= (and x120 x399) x423))
(assert (= (x206 1461501637330902918203684832716283019655932542976) (x690 1461501637330902918203684832716283019655932542976)))
(assert (=> (>= 10000 (x523 (x584 (+ 96 x170)))) (= (x206 (x523 (x584 (+ 96 x170)))) (x690 (x523 (x584 (+ 96 x170)))))))
(assert (x701 x407))
(assert (x225 x758))
(assert (x225 x777))
(assert (= (and (not x725) x817) x468))
(assert (= (x748 (x584 (+ x243 96))) (x682 (x690 (x748 (x584 (+ 96 x243)))))))
(assert (=> (<= (x373 (x584 (+ x571 160))) 10000) (= (x690 (x373 (x584 (+ 160 x571)))) (x206 (x373 (x584 (+ 160 x571)))))))
(assert (x225 x836))
(assert (= (x682 (x206 13392588948715843804641432497768002650278120570034223513918757245338268106653)) 13392588948715843804641432497768002650278120570034223513918757245338268106653))
(assert (x225 x752))
(assert (x225 x626))
(assert (x225 x87))
(assert (x496 (x748 (x584 (+ x243 64)))))
(assert (x225 x838))
(assert (x225 x734))
(assert (x225 x93))
(assert (=> (>= 10000 (x373 (x584 (+ x571 192)))) (= (x206 (x373 (x584 (+ 192 x571)))) (x690 (x373 (x584 (+ x571 192)))))))
(assert (x225 x664))
(assert (= (and x342 (not x149)) x52))
(assert (x496 x343))
(assert (x701 79228162514264337593543950335))
(assert (= x688 (=> (and (= x647 (x731 (- x545 32))) (= (>= 224 x348) x142) (= x9 (x584 (+ 32 x27))) (= x170 (x584 (+ 32 x430))) (= x348 (x523 x430)) (= x321 (x584 (+ 32 x430))) (= x545 (x731 (- x9 x430))) (= x27 (x584 (+ x321 32)))) (and (=> (and (= x9 x220) (= x576 (ite (>= 32 x348) (x291 (x690 (x523 x170)) 0) (ite (<= x348 64) (x813 (x690 (x523 x170)) (x690 (x523 (x584 (+ 32 x170)))) 0) (ite (<= x348 96) (x814 (x690 (x523 x170)) (x690 (x523 (x584 (+ x170 32)))) (x690 (x523 (x584 (+ x170 64)))) 0) (ite (<= x348 128) (x324 (x690 (x523 x170)) (x690 (x523 (x584 (+ 32 x170)))) (x690 (x523 (x584 (+ 64 x170)))) (x690 (x523 (x584 (+ 96 x170)))) 0) (ite (<= x348 160) (x406 (x690 (x523 x170)) (x690 (x523 (x584 (+ 32 x170)))) (x690 (x523 (x584 (+ 64 x170)))) (x690 (x523 (x584 (+ 96 x170)))) (x690 (x523 (x584 (+ x170 128)))) 0) (ite (>= 192 x348) (x743 (x690 (x523 x170)) (x690 (x523 (x584 (+ x170 32)))) (x690 (x523 (x584 (+ x170 64)))) (x690 (x523 (x584 (+ x170 96)))) (x690 (x523 (x584 (+ x170 128)))) (x690 (x523 (x584 (+ 160 x170)))) 0) (ite (>= 224 x348) (x581 (x690 (x523 x170)) (x690 (x523 (x584 (+ x170 32)))) (x690 (x523 (x584 (+ x170 64)))) (x690 (x523 (x584 (+ 96 x170)))) (x690 (x523 (x584 (+ 128 x170)))) (x690 (x523 (x584 (+ 160 x170)))) (x690 (x523 (x584 (+ x170 192)))) 0) (x690 x803)))))))))) x599) x142))))
(assert (x225 x798))
(assert true)
(assert (x225 x247))
(assert (x701 x64))
(assert (= (and x744 x787) x22))
(assert (= (x682 (x690 (x728 x405))) (x728 x405)))
(assert (x225 x796))
(assert (= (x206 4294967296) (x690 4294967296)))
(assert (x225 x766))
(assert (x225 x615))
(assert (x225 x702))
(assert (x225 x46))
(assert (= (x682 (x206 281474976710655)) 281474976710655))
(assert (= (and x770 (not x332)) x625))
(assert (x701 x185))
(assert (x225 x160))
(assert (= (and x98 (not x675)) x279))
(assert (x496 15734828340100255228388097270354557497891140761267446712098462632690385532271))
(assert (x225 x481))
(assert (x225 x687))
(assert (x496 (x728 x405)))
(assert (= (x690 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x206 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x225 x220))
(assert (x225 x125))
(assert (= x804 (and x669 x208)))
(assert (x839 x681 x548))
(assert (x225 x422))
(assert (x225 x698))
(assert (= (=> (and (= x776 (x584 (+ x680 x591))) (= x776 x506) (= x707 (x584 (+ 32 x788))) (= x708 x490) (= (<= x617 224) x49) (= (x584 (+ 32 x735)) x243) (= x591 (mod (* 32 x634) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x109 (x731 (- x707 x735))) (= x634 x59) (= (mod (* 32 x634) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x825) (= x788 (x584 (+ x708 32))) (= x617 (x748 x735)) (= (x584 (+ x825 x694)) x490) (= (x731 (- x109 32)) x201)) (and (=> (and (= x33 (ite (<= x617 32) (x291 (x690 (x748 x243)) 0) (ite (>= 64 x617) (x813 (x690 (x748 x243)) (x690 (x748 (x584 (+ x243 32)))) 0) (ite (>= 96 x617) (x814 (x690 (x748 x243)) (x690 (x748 (x584 (+ x243 32)))) (x690 (x748 (x584 (+ x243 64)))) 0) (ite (<= x617 128) (x324 (x690 (x748 x243)) (x690 (x748 (x584 (+ x243 32)))) (x690 (x748 (x584 (+ x243 64)))) (x690 (x748 (x584 (+ 96 x243)))) 0) (ite (>= 160 x617) (x406 (x690 (x748 x243)) (x690 (x748 (x584 (+ x243 32)))) (x690 (x748 (x584 (+ 64 x243)))) (x690 (x748 (x584 (+ x243 96)))) (x690 (x748 (x584 (+ x243 128)))) 0) (ite (>= 192 x617) (x743 (x690 (x748 x243)) (x690 (x748 (x584 (+ x243 32)))) (x690 (x748 (x584 (+ 64 x243)))) (x690 (x748 (x584 (+ 96 x243)))) (x690 (x748 (x584 (+ 128 x243)))) (x690 (x748 (x584 (+ x243 160)))) 0) (ite (>= 224 x617) (x581 (x690 (x748 x243)) (x690 (x748 (x584 (+ x243 32)))) (x690 (x748 (x584 (+ 64 x243)))) (x690 (x748 (x584 (+ x243 96)))) (x690 (x748 (x584 (+ 128 x243)))) (x690 (x748 (x584 (+ x243 160)))) (x690 (x748 (x584 (+ x243 192)))) 0) (x690 x542))))))))) (= (x489 420) x343) (= (= x33 (x690 x343)) x833)) (and (=> (and x833 (and (= (= 28 x484) x409) (= x592 (x748 320)) (= (div x592 32) x484))) (and (=> (and (and (and (= x610 (x584 (+ 32 x125))) (= (< 0 x199) x547) (= x127 (x584 (+ 32 x610))) (= x745 (x584 (+ x112 x127))) (= x125 (x584 (+ 4 x707)))) (or (and (= x199 x108) (not x547)) (and (and (= x108 1) (< x277 4294967296)) x547))) x409) x408) (=> (not x409) x74))) (=> (not x833) x74))) x49)) x386))
(assert (x496 (x373 (x584 (+ 64 x571)))))
(assert (x225 x313))
(assert (x225 x536))
(assert (= (and x635 x802) x460))
(assert (= (and x278 x656) x477))
(assert (= x530 (and (not x401) x601)))
(assert (= (x690 268435456) (x206 268435456)))
(assert (x701 x681))
(assert (x225 x253))
(assert (x225 x462))
(assert (x225 x245))
(assert (=> (>= 10000 x375) (= (x206 x375) (x690 x375))))
(assert (=> (<= (x372 (x584 (+ x107 192))) 10000) (= (x690 (x372 (x584 (+ 192 x107)))) (x206 (x372 (x584 (+ x107 192)))))))
(assert (x225 x684))
(assert (x496 x375))
(assert (x225 x126))
(assert (x225 x256))
(assert (x225 x47))
(assert (= (and x785 x325) x672))
(assert (x225 x10))
(assert (x496 (x340 (x584 (+ x390 32)))))
(assert (x225 x34))
(assert (= (x728 (x584 (+ x405 32))) (x682 (x690 (x728 (x584 (+ 32 x405)))))))
(assert (= (x206 10857046999023057135944570762232829481370756359578518086990519993285655852781) (x690 10857046999023057135944570762232829481370756359578518086990519993285655852781)))
(assert (x225 x835))
(assert (x326 x97))
(assert (= x803 (x682 (x690 x803))))
(assert (x225 x592))
(assert (= x408 (=> (= (= 0 x108) x559) (and (=> (and (not x559) (and (= x341 (x584 (+ x653 x707))) (= x653 (x319 115792089237316195423570985008687907853269984665640564039457584007913129639904 x357)) (= (or (> x277 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x277) true) (< x277 160))) x837) (= (x584 (+ 31 x277)) x357))) (and (=> (and (not x837) (= x332 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x277) (and (> 160 x277) (= true (<= x277 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))) (and (=> (and (not x332) (and (= (= 0 (ite x757 1 0)) x322) (= (x584 (+ x341 128)) x438) (= (> x438 18446744073709551615) x704) (= (or x704 x172) x757) (= (< x438 x341) x172))) (and (=> (and x322 (= x414 (or (and (> 64 x277) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x277) true)) (> x277 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (and (=> x414 x74) (=> (and (and (= (> x438 x352) x603) (= (or x20 x603) x261) (= (x584 (+ x438 64)) x352) (= (= (ite x261 1 0) 0) x675) (= (< 18446744073709551615 x352) x20)) (not x414)) (and (=> (not x675) x74) (=> (and (and (= (x335 x707) x677) (= true x90)) x675) (and (=> (and x90 (and (= x230 (x323 x640)) (= true x771) (= (x584 (+ x707 32)) x640))) (and (=> (not x771) x74) (=> (and (and (= (= x809 x784) x751) (= x42 (x584 (+ x438 32))) (= x809 (x775 x73)) (= x784 (x319 281474976710655 x809)) (= (x584 (+ x640 32)) x73)) x771) (and (=> (and x751 (and (= x395 (x584 (+ 32 x73))) (= (x242 x395) x64) (= (= x64 x353) x81) (= (x584 (+ x341 32)) x782) (= x353 (x319 4294967295 x64)))) (and (=> (and (and (= (x319 4294967295 x185) x15) (= x185 (x147 x259)) (= x259 (x584 (+ 32 x395))) (= (x584 (+ 32 x782)) x502) (= x519 (= x15 x185))) x81) (and (=> (not x519) x74) (=> (and x519 (and (and (= (x584 (+ 32 x502)) x577) (= x237 (< 0 x240)) (= (x584 (+ x352 4)) x174) (= x611 (x319 4294967295 x361)) (= x361 (x84 x502))) (or (and (= x702 x240) (not x237)) (and (and (> 4294967296 x166) (= x702 1)) x237)))) x794))) (=> (not x81) x74))) (=> (not x751) x74))))) (=> (not x90) x74))))))) (=> (not x322) x74))) (=> x332 x74))) (=> x837 x74))) (=> x559 x74)))))
(assert (= (x206 4294967295) (x690 4294967295)))
(assert (x225 x370))
(assert (x496 (x523 x170)))
(assert (x225 x504))
(assert (x225 x410))
(assert (x2 x646))
(assert (= (and (not x593) x428) x651))
(assert (= (and (not x606) x815) x449))
(assert (= (and x134 x556) x278))
(assert (x225 x37))
(assert (= (and (not x568) x334) x522))
(assert (= (x690 6449634268930127669875982587348191347588899670384742761526659814853911248896) (x206 6449634268930127669875982587348191347588899670384742761526659814853911248896)))
(assert (x225 x318))
(assert (x225 x356))
(assert (= (or x505 x403) x744))
(assert (x496 x422))
(assert (= x400 (x682 (x690 x400))))
(assert (= x674 (and (not x355) x116)))
(assert (x225 x405))
(assert (x225 x419))
(assert (x225 x154))
(assert (x225 x411))
(assert (x225 x694))
(assert (x225 x616))
(assert (= x623 (and x60 x487)))
(assert (= (x682 (x690 (x728 (x584 (+ 128 x405))))) (x728 (x584 (+ x405 128)))))
(assert (=> (<= (x373 (x584 (+ 32 x571))) 10000) (= (x206 (x373 (x584 (+ x571 32)))) (x690 (x373 (x584 (+ 32 x571)))))))
(assert (x496 x650))
(assert (x225 x29))
(assert (x225 x367))
(assert (=> (<= (x728 (x584 (+ 160 x405))) 10000) (= (x690 (x728 (x584 (+ x405 160)))) (x206 (x728 (x584 (+ x405 160)))))))
(assert (x225 x531))
(assert (x225 x562))
(assert (x225 x512))
(assert (x496 (x372 (x584 (+ 96 x107)))))
(assert (x225 x236))
(assert (x225 x388))
(assert (x225 x825))
(assert (x225 x772))
(assert (x326 x258))
(assert (=> (<= (x748 (x584 (+ x243 192))) 10000) (= (x206 (x748 (x584 (+ x243 192)))) (x690 (x748 (x584 (+ x243 192)))))))
(assert (= x564 (or (and x306 x414) (and x226 (not x742)) (and (not x750) x786) (and x88 (not x50)) (and x450 x85) (and x425 x423) (and x493 x366) x460 x449 x582 (and x717 (not x124)) (and x447 (not x219)) x769 (and x213 (not x19)) (and x36 (not x128)) (and x692 x639) (and x473 x801) (and x82 (not x254)) (and (not x130) x378) (and x235 x463) (and (not x439) x737) x478 x223 (and (not x619) x644) x651 (and x699 x623) x418 (and (not x771) x391) (and (not x316) x158) (and x349 x331) x630 (and (not x589) x672) (and x156 (not x448)) (and (not x205) x477) (and x696 (not x35)) (and (not x588) x451) (and x638 x52) (and x381 x455) x533 (and x339 (not x176)) (and x770 x332) (and x188 (not x40)) (and (not x399) x120) x24 x289 (and x804 (not x194)) (and x837 x834) x660 (and x278 (not x656)) (and x469 x797) (and x709 (not x90)) (and x280 (not x816)) x257 (and x840 (not x276)) (and x522 x413) (and x308 (not x396)) x282 (and x300 (not x81)) (and x443 x78) x159 (and x621 (not x519)) (and x208 (not x669)) x65 (and (not x751) x231) (and (not x487) x60) x674 (and x685 x69) x279 x238 (and x541 x171) x165 (and x342 x149) x530 (and x325 (not x785)) (and x494 (not x198)) (and (not x134) x556))))
(assert (x225 x240))
(assert (= (x682 (x690 (x372 (x584 (+ x107 64))))) (x372 (x584 (+ 64 x107)))))
(assert (x225 x321))
(assert (x225 x809))
(assert (x225 x212))
(assert (x496 (x373 (x584 (+ x571 96)))))
(assert (x225 x350))
(assert (= (and x113 (not x437)) x503))
(assert (x225 x174))
(assert (= x463 (and x439 x737)))
(assert (x225 x387))
(assert (= (x206 79228162514264337593543950335) (x690 79228162514264337593543950335)))
(assert (x225 x545))
(assert (= (x682 (x690 (x523 (x584 (+ x170 128))))) (x523 (x584 (+ 128 x170)))))
(assert (x225 x703))
(assert (x225 x333))
(assert (= x289 (and x774 (not x360))))
(assert (=> (>= 10000 x650) (= (x690 x650) (x206 x650))))
(assert (x225 x108))
(assert (= 17805874995975841540914202342111839520379459829704422454583296818431106115052 (x682 (x206 17805874995975841540914202342111839520379459829704422454583296818431106115052))))
(assert (= (and x816 x280) x226))
(assert (x326 x64))
(assert (x496 (x523 (x584 (+ 64 x170)))))
(assert (= (and x124 x717) x188))
(assert (x225 x114))
(assert (x225 x348))
(assert (= x769 (and x544 x312)))
(assert (x225 x474))
(assert (x225 x735))
(assert (x225 x763))
(assert (= (x682 (x690 (x748 (x584 (+ x243 192))))) (x748 (x584 (+ 192 x243)))))
(assert (x225 x286))
(assert (x225 x552))
(assert (x225 x715))
(assert (x225 x476))
(assert (x225 x539))
(assert (x225 x185))
(assert (= (x206 17805874995975841540914202342111839520379459829704422454583296818431106115052) (x690 17805874995975841540914202342111839520379459829704422454583296818431106115052)))
(assert (= (x682 (x690 (x748 (x584 (+ x243 128))))) (x748 (x584 (+ x243 128)))))
(assert (x701 x361))
(assert (x496 (x373 (x584 (+ 160 x571)))))
(assert (x225 x647))
(assert (= (x682 (x206 10857046999023057135944570762232829481370756359578518086990519993285655852781)) 10857046999023057135944570762232829481370756359578518086990519993285655852781))
(assert (x496 (x748 (x584 (+ x243 160)))))
(assert (= (and x588 x451) x494))
(assert (x225 x384))
(assert (x496 (x523 (x584 (+ x170 192)))))
(assert (x496 (x372 x107)))
(assert (x225 x107))
(assert (= (x206 403919343) (x690 403919343)))
(assert (x225 x389))
(assert (x225 x650))
(assert (= (x682 (x690 (x340 (x584 (+ x390 160))))) (x340 (x584 (+ x390 160)))))
(assert (= (x682 (x690 (x728 (x584 (+ 64 x405))))) (x728 (x584 (+ 64 x405)))))
(assert (x225 x157))
(assert (x225 x16))
(assert (x225 x345))
(assert (= (x340 (x584 (+ x390 32))) (x682 (x690 (x340 (x584 (+ 32 x390)))))))
(assert (= x155 (=> (and (= (ite (= x157 0) x157 (ite x337 1 0)) x724) (= (not (= 0 x456)) x337) (= (x39 x41) x456) (= (= x724 0) x583)) (and (=> (and x583 (and (= x572 (x584 (+ x721 384))) (= true x254) (= x8 (x489 196)))) (and (=> (and (and (= (x489 228) x303) (= (= x303 x371) x35) (= (x584 (+ 32 x721)) x10) (= x371 (x319 4294967295 x303))) x254) (and (=> (not x35) x74) (=> (and (and (= x785 (= x667 x1)) (= (x489 260) x1) (= (x584 (+ x10 32)) x346) (= x667 (x319 4294967295 x1))) x35) (and (=> (not x785) x74) (=> (and (and (= (x319 4294967295 x249) x160) (= (= x249 x160) x589) (= (x584 (+ x346 32)) x777) (= x249 (x489 292))) x785) (and (=> (and (and (= x134 (= x407 x358)) (= x358 (x319 4294967295 x407)) (= (x584 (+ 32 x777)) x720) (= x407 (x489 324))) x589) (and (=> (and (and (= (x584 (+ 32 x720)) x497) (= x265 (x319 79228162514264337593543950335 x491)) (= x656 (= x491 x265)) (= x491 (x489 356))) x134) (and (=> (not x656) x74) (=> (and x656 (and (= (x584 (+ x497 32)) x345) (= x205 (= x832 x26)) (= x832 (x489 388)) (= (x319 1461501637330902918203684832716283019655932542975 x832) x26))) (and (=> (and x205 (and (= (x489 420) x554) (= x286 (x584 (+ 32 x345))) (= x50 true))) (and (=> (and x50 (and (= (x319 255 x13) x263) (= x301 (x584 (+ x286 32))) (= x13 (x489 452)) (= x176 (= x263 x13)))) (and (=> (not x176) x74) (=> (and (and (= x588 true) (= x796 (x489 484)) (= (x584 (+ x301 32)) x734)) x176) (and (=> (and (and (= x198 (= x521 x268)) (= x521 (x319 4294967295 x268)) (= x268 (x489 516)) (= x657 (x584 (+ 32 x734)))) x588) (and (=> x198 x432) (=> (not x198) x74))) (=> (not x588) x74))))) (=> (not x50) x74))) (=> (not x205) x74))))) (=> (not x134) x74))) (=> (not x589) x74))))))) (=> (not x254) x74))) (=> (not x583) x74)))))
(assert (x225 x230))
(assert (= (x690 13392588948715843804641432497768002650278120570034223513918757245338268106653) (x206 13392588948715843804641432497768002650278120570034223513918757245338268106653)))
(assert (x225 x548))
(assert (x225 x780))
(assert (=> (<= (x523 (x584 (+ x170 128))) 10000) (= (x690 (x523 (x584 (+ x170 128)))) (x206 (x523 (x584 (+ x170 128)))))))
(assert (x225 x604))
(assert (= x755 (and x448 x156)))
(assert (x225 x624))
(assert (= (and x91 x297) x421))
(assert (x225 x215))
(assert (x740 x13))
(assert (x225 x341))
(assert (=> (>= 10000 (x340 (x584 (+ x390 192)))) (= (x690 (x340 (x584 (+ x390 192)))) (x206 (x340 (x584 (+ 192 x390)))))))
(assert (x225 x21))
(assert (x225 x805))
(assert (x225 x516))
(assert (x225 x295))
(assert (= (x682 (x690 (x372 x107))) (x372 x107)))
(assert (x225 x667))
(assert (= x65 (and x755 (not x678))))
(assert (x701 x821))
(assert (= x280 (and x644 x619)))
(assert (x225 x66))
(assert (= (x682 (x690 (x372 (x584 (+ 192 x107))))) (x372 (x584 (+ x107 192)))))
(assert (x225 x653))
(assert (x225 x293))
(assert (= x120 (and (not x801) x473)))
(assert (= (and x300 x81) x621))
(assert (= (and x409 x700) x209))
(assert (= (=> (and (and (= x333 (x584 (+ 32 x698))) (= (x315 x551) x661) (= x106 500000) (= x510 (x532 x513)) (= x507 (x584 (+ 32 x377))) (= (x404 x626) x367) (= x76 (x532 x426)) (= (x584 (+ x21 32)) x426) (= x46 (x45 x394)) (= (x584 (+ 32 x628)) x684) (= (x584 (+ 32 x698)) x453) (= (x161 x180) x670) (= (x799 x434) x800) (= (x77 x772) x783) (= x440 (x584 (+ 32 x454))) (= (x483 x7) x791) (= (x584 (+ 32 x486)) x595) (= x637 (x161 x684)) (= x114 (x605 x29)) (= (x584 (+ 32 x103)) x752) (= x481 (x584 (+ 32 x21))) (= (x483 x791) x66) (= (x404 x426) x626) (= x504 (x45 x659)) (= x585 (x711 x795)) (= (x584 (+ 32 x537)) x377) (= (x404 x367) x763) (= (x584 (+ x595 32)) x299) (= (x584 (+ 32 x764)) x454) (= (x686 x341) x509) (= x537 x824) (= (x584 (+ 32 x689)) x344) (= (x584 (+ x613 64)) x141) (= x103 (x584 (+ 32 x38))) (= x93 (x584 (+ 32 x510))) (= (x584 (+ x141 64)) x689) (= x21 (x584 (+ 64 x698))) (= x115 (x753 x462)) (= x111 (x584 (+ 32 x613))) (= (x584 (+ 32 x141)) x703) (= (x605 x659) x275) (= x38 (x584 (+ 32 x507))) (= x772 (x77 x333)) (= (x584 (+ 192 x824)) x764) (= (x383 x616) x241) (= (x532 x93) x676) (= x616 (x584 (+ x552 32))) (= x18 (x711 x585)) (= (x584 (+ x637 32)) x180) (= x462 x698) (= (x605 x275) x29) (= x551 (x584 (+ x309 32))) (= (x584 (+ x440 32)) x486) (= (x383 x462) x552) (= x41 (x584 (+ 384 x824))) (= x140 (x799 x426)) (= x659 x21) (= (x483 x426) x822) (= (x584 (+ 32 x822)) x7) (= x513 (x584 (+ x76 32))) (= (x161 x659) x628) (= (x584 (+ x21 64)) x824) (= (x315 x333) x309) (= (x799 x140) x836) (= (x584 (+ 32 x602)) x795) (= x89 (x753 x115)) (= x698 (x584 (+ 64 x689))) (= x602 (x711 x659)) (= (x584 (+ 32 x836)) x434) (= (x45 x504) x756) (= (x584 (+ x756 32)) x394)) (and (or (and (= x157 x474) (not x162)) (and x162 (and (< x536 4294967296) (= 1 x157)))) (and (= (x584 (+ x41 32)) x721) (= x162 (< 0 x474))))) x155) x514))
(assert (x225 x558))
(assert (x225 x537))
(assert (= x599 (=> (and (= x415 (x620 320)) (= (> 64 x415) x645)) (and x645 (=> (and (= x576 x716) (= x613 x220)) x351)))))
(assert (x225 x374))
(assert (x225 x15))
(assert (x225 x784))
(assert (x225 x822))
(assert (=> (>= 10000 (x728 (x584 (+ 64 x405)))) (= (x690 (x728 (x584 (+ x405 64)))) (x206 (x728 (x584 (+ x405 64)))))))
(assert (x225 x365))
(assert (= (x728 (x584 (+ x405 192))) (x682 (x690 (x728 (x584 (+ x405 192)))))))
(assert (x225 x100))
(assert (= (x523 x170) (x682 (x690 (x523 x170)))))
(assert (x225 x73))
(assert (x225 x680))
(assert (x225 x823))
(assert (= (x682 (x690 x650)) x650))
(assert (= 1461501637330902918203684832716283019655932542975 (x682 (x206 1461501637330902918203684832716283019655932542975))))
(assert (= 79228162514264337593543950335 (x682 (x206 79228162514264337593543950335))))
(assert (= (and x158 x316) x297))
(assert (x225 x498))
(assert (x225 x778))
(assert (= (x682 (x690 (x372 (x584 (+ x107 32))))) (x372 (x584 (+ x107 32)))))
(assert (x225 x89))
(assert (x496 (x728 (x584 (+ 128 x405)))))
(assert (x225 x579))
(assert (x225 x441))
(assert (= (and x583 x122) x82))
(assert (x225 x470))
(assert (= x770 (and x834 (not x837))))
(assert (x225 x506))
(assert (= false x819))
(assert (x496 (x523 (x584 (+ 128 x170)))))
(assert (x225 x574))
(assert (x225 x259))
(assert (x225 x41))
(assert (= (x690 281474976710655) (x206 281474976710655)))
(assert (x225 x42))
(assert (x826 x384))
(assert (x225 x585))
(assert (x225 x551))
(assert (x496 (x340 (x584 (+ 64 x390)))))
(assert (=> (>= 10000 (x340 x390)) (= (x690 (x340 x390)) (x206 (x340 x390)))))
(assert (x701 x357))
(assert (= (and x561 (not x559)) x834))
(assert (x326 x62))
(assert (x225 x724))
(assert (x225 x475))
(assert (x496 (x748 (x584 (+ x243 96)))))
(assert (= (and (not x787) x744) x159))
(assert (= (x682 (x690 (x523 (x584 (+ 96 x170))))) (x523 (x584 (+ 96 x170)))))
(assert (=> (<= (x523 (x584 (+ x170 160))) 10000) (= (x690 (x523 (x584 (+ 160 x170)))) (x206 (x523 (x584 (+ x170 160)))))))
(assert (x225 x303))
(assert (x225 x657))
(assert (x225 x343))
(assert (= (and x207 x284) x238))
(assert (x225 x661))
(assert (x225 x179))
(assert (= (x682 (x206 19211759364411014404085342898986916011845161991165440702586961613165858652160)) 19211759364411014404085342898986916011845161991165440702586961613165858652160))
(assert (x225 x307))
(assert (= (x682 (x206 6449634268930127669875982587348191347588899670384742761526659814853911248896)) 6449634268930127669875982587348191347588899670384742761526659814853911248896))
(assert (x225 x287))
(assert (x225 x14))
(assert (x225 x400))
(assert (=> (<= (x340 (x584 (+ 64 x390))) 10000) (= (x206 (x340 (x584 (+ 64 x390)))) (x690 (x340 (x584 (+ 64 x390)))))))
(assert (x225 x440))
(assert (x225 x756))
(assert (x225 x830))
(assert (= (and x771 x391) x231))
(assert (= 268435456 (x682 (x206 268435456))))
(assert (x496 (x340 (x584 (+ 128 x390)))))
(assert (= x36 (and x840 x276)))
(assert (= (x690 18446744073709551615) (x206 18446744073709551615)))
(assert (=> (>= 10000 (x340 (x584 (+ 32 x390)))) (= (x206 (x340 (x584 (+ x390 32)))) (x690 (x340 (x584 (+ x390 32)))))))
(assert (x225 x689))
(assert (x225 x250))
(assert (= x171 (and x366 (not x493))))
(assert (x225 x453))
(assert (x225 x97))
(assert (x225 x26))
(assert (x225 x338))
(assert (=> (<= (x748 (x584 (+ 160 x243))) 10000) (= (x690 (x748 (x584 (+ x243 160)))) (x206 (x748 (x584 (+ 160 x243)))))))
(assert (x225 x611))
(assert (x225 x594))
(assert (x326 x361))
(assert (=> (>= 10000 (x373 x571)) (= (x690 (x373 x571)) (x206 (x373 x571)))))
(assert (x225 x575))
(assert (= x51 (and (not x416) x119)))
(assert (x225 x509))
(assert (= (and x209 (not x547)) x433))
(assert (x225 x166))
(assert (= (and x573 (not x214)) x641))
(assert (=> (>= 10000 (x372 (x584 (+ x107 160)))) (= (x690 (x372 (x584 (+ 160 x107)))) (x206 (x372 (x584 (+ x107 160)))))))
(assert (x225 x832))
(assert (=> (<= (x728 (x584 (+ x405 32))) 10000) (= (x690 (x728 (x584 (+ 32 x405)))) (x206 (x728 (x584 (+ x405 32)))))))
(assert (x444 x809))
(assert (x225 x705))
(assert (= 15734828340100255228388097270354557497891140761267446712098462632690385532271 (x682 (x690 15734828340100255228388097270354557497891140761267446712098462632690385532271))))
(assert (x225 x587))
(assert (= (x340 x390) (x682 (x690 (x340 x390)))))
(assert (= (x682 (x206 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x308 (and x188 x40)))
(assert (x225 x649))
(assert (x701 x153))
(assert (x225 x454))
(assert (= (x682 (x690 (x728 (x584 (+ 96 x405))))) (x728 (x584 (+ 96 x405)))))
(assert (x225 x301))
(assert (x225 x127))
(assert (x225 x382))
(assert (x225 x591))
(assert (x225 x565))
(assert (x496 (x373 x571)))
(assert (x225 x486))
(assert (x225 x141))
(assert (= (x682 (x690 x780)) x780))
(assert (= (and x761 (not x550)) x412))
(assert (= (x682 (x690 (x728 (x584 (+ x405 160))))) (x728 (x584 (+ x405 160)))))
(assert (= x342 (and x804 x194)))
(assert (x496 (x340 (x584 (+ x390 160)))))
(assert (x225 x510))
(assert (x225 x264))
(assert (x225 x636))
(assert (x225 x9))
(assert (x326 x185))
(assert (x225 x169))
(assert (x225 x600))
(assert (x225 x567))
(assert (x496 (x523 (x584 (+ 160 x170)))))
(assert (= (and x85 (not x450)) x381))
(assert (x773 x491))
(assert (= (and x119 x416) x597))
(assert (x225 x140))
(assert (x225 x246))
(assert (x225 x243))
(assert (= x24 (and (not x167) x546)))
(assert (x225 x109))
(assert (x225 x535))
(assert (x701 x249))
(assert (= x28 (and x437 x113)))
(assert (= (and x632 (not x132)) x630))
(assert (x225 x187))
(assert (x225 x346))
(assert (x225 x377))
(assert (x225 x572))
(assert (=> (<= (x372 (x584 (+ x107 128))) 10000) (= (x690 (x372 (x584 (+ x107 128)))) (x206 (x372 (x584 (+ x107 128)))))))
(assert (= x69 (and x349 (not x331))))
(assert (x225 x707))
(assert (x701 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (x682 (x690 (x372 (x584 (+ 96 x107))))) (x372 (x584 (+ x107 96)))))
(assert (x225 x201))
(assert (= (=> (and (= x633 x112) (= x729 (x584 (+ x112 x107))) (= x177 (>= 224 x633))) (and (=> (and (= x759 (x489 196)) (= x167 (= (ite (<= x633 32) (x291 (x690 (x372 x107)) 0) (ite (>= 64 x633) (x813 (x690 (x372 x107)) (x690 (x372 (x584 (+ 32 x107)))) 0) (ite (>= 96 x633) (x814 (x690 (x372 x107)) (x690 (x372 (x584 (+ x107 32)))) (x690 (x372 (x584 (+ 64 x107)))) 0) (ite (<= x633 128) (x324 (x690 (x372 x107)) (x690 (x372 (x584 (+ x107 32)))) (x690 (x372 (x584 (+ 64 x107)))) (x690 (x372 (x584 (+ x107 96)))) 0) (ite (>= 160 x633) (x406 (x690 (x372 x107)) (x690 (x372 (x584 (+ x107 32)))) (x690 (x372 (x584 (+ 64 x107)))) (x690 (x372 (x584 (+ 96 x107)))) (x690 (x372 (x584 (+ 128 x107)))) 0) (ite (<= x633 192) (x743 (x690 (x372 x107)) (x690 (x372 (x584 (+ 32 x107)))) (x690 (x372 (x584 (+ 64 x107)))) (x690 (x372 (x584 (+ 96 x107)))) (x690 (x372 (x584 (+ x107 128)))) (x690 (x372 (x584 (+ 160 x107)))) 0) (ite (>= 224 x633) (x581 (x690 (x372 x107)) (x690 (x372 (x584 (+ 32 x107)))) (x690 (x372 (x584 (+ 64 x107)))) (x690 (x372 (x584 (+ x107 96)))) (x690 (x372 (x584 (+ 128 x107)))) (x690 (x372 (x584 (+ x107 160)))) (x690 (x372 (x584 (+ 192 x107)))) 0) (x690 x400)))))))) (x690 x759)))) (and (=> (not x167) x74) (=> (and (and (= x495 (x584 (+ 116 x126))) (= x227 (x584 (+ 32 x495))) (= (x584 (+ x107 32)) x417) (= (x489 x495) x68) (= x314 (x319 255 x3)) (= (= x314 x3) x19) (= x3 (x489 452)) (= (x584 (+ x107 64)) x516) (= x327 (x489 x227))) x167) (and (=> (not x19) x74) (=> (and (and (= (x489 516) x727) (= (x489 484) x693) (= x619 (= x727 x87)) (= x87 (x319 4294967295 x727))) x19) (and (=> (not x619) x74) (=> (and x619 (and (= x816 true) (= x539 (x489 196)) (= x285 (x584 (+ 32 x164))) (= (x584 (+ 4 x516)) x164) (= (x584 (+ 32 x285)) x210))) (and (=> (not x816) x74) (=> (and x816 (and (= x695 (x319 4294967295 x153)) (= (x489 228) x153) (= (x584 (+ x210 32)) x283) (= x742 (= x153 x695)))) (and (=> (not x742) x74) (=> (and x742 (and (= (x319 4294967295 x252) x549) (= (x584 (+ 32 x283)) x388) (= (x489 260) x252) (= (= x549 x252) x124))) (and (=> (and (and (= x97 (x489 292)) (= x467 (x319 4294967295 x97)) (= x40 (= x97 x467)) (= x488 (x584 (+ 32 x388)))) x124) (and (=> (and (and (= x396 (= x512 x62)) (= (x489 324) x62) (= x330 (x584 (+ 32 x488))) (= x512 (x319 4294967295 x62))) x40) (and (=> (and (and (= x565 (x319 79228162514264337593543950335 x821)) (= x276 (= x565 x821)) (= (x489 356) x821) (= (x584 (+ 32 x330)) x151)) x396) (and (=> (and x276 (and (= (x584 (+ x151 32)) x441) (= (= x427 x458) x128) (= (x489 388) x427) (= x458 (x319 1461501637330902918203684832716283019655932542975 x427)))) (and (=> (and x128 (and (= x316 true) (= (x489 420) x722) (= (x584 (+ x441 32)) x264))) (and (=> (not x316) x74) (=> (and (and (or (and (= x365 x790) (not x91)) (and x91 (and (= 1 x365) (> 4294967296 x216)))) (and (= (> x790 0) x91) (= x16 (x584 (+ 32 x264))))) x316) x385))) (=> (not x128) x74))) (=> (not x276) x74))) (=> (not x396) x74))) (=> (not x40) x74))) (=> (not x124) x74))))))))))))) x177)) x811))
(assert (= x812 (and x297 (not x91))))
(assert (x496 x780))
(assert (= (x523 (x584 (+ 32 x170))) (x682 (x690 (x523 (x584 (+ 32 x170)))))))
(assert (= x717 (and x226 x742)))
(assert (x225 x369))
(assert (x701 x13))
(assert (x225 x511))
(assert (= (and (not x58) x267) x789))
(assert (x496 (x523 (x584 (+ 96 x170)))))
(assert (x326 x268))
(assert (x225 x7))
(assert (x225 x344))
(assert (=> (>= 10000 x411) (= (x206 x411) (x690 x411))))
(assert (= (and x378 x130) x797))
(assert (x701 x809))
(assert (x225 x764))
(assert (x225 x48))
(assert (= x251 (and x750 x786)))
(assert (x225 x658))
(assert (= (and x231 x751) x300))
(assert (x225 x627))
(assert (= (or x224 x433) x561))
(assert (= x116 (and (not x699) x623)))
(assert (x225 x434))
(assert (= (and (not x78) x443) x156))
(assert (=> (<= (x748 (x584 (+ x243 64))) 10000) (= (x690 (x748 (x584 (+ 64 x243)))) (x206 (x748 (x584 (+ 64 x243)))))))
(assert (x225 x788))
(assert (= x582 (and x625 (not x322))))
(assert (x496 (x372 (x584 (+ 64 x107)))))
(assert (x225 x272))
(assert (x225 x268))
(assert (=> (<= (x340 (x584 (+ 96 x390))) 10000) (= (x690 (x340 (x584 (+ 96 x390)))) (x206 (x340 (x584 (+ x390 96)))))))
(assert (= (x682 (x690 (x748 (x584 (+ 160 x243))))) (x748 (x584 (+ x243 160)))))
(assert (x225 x634))
(assert (= (and x401 x601) x761))
(assert (x225 x542))
(assert (= (and (not x446) x518) x517))
(assert (x225 x782))
(assert (x225 x115))
(assert (x225 x554))
(assert (x225 x790))
(assert (x225 x631))
(assert (= (and x129 x175) x505))
(assert (= x347 (and x22 (not x162))))
(assert (x225 x806))
(assert (x225 x484))
(assert (x326 x727))
(assert (= (=> (= x787 (= x716 (x690 15734828340100255228388097270354557497891140761267446712098462632690385532271))) (and (=> x787 x514) (=> (not x787) x74))) x351))
(assert (x701 x384))
(assert (= (x206 19211759364411014404085342898986916011845161991165440702586961613165858652160) (x690 19211759364411014404085342898986916011845161991165440702586961613165858652160)))
(assert (x225 x204))
(assert (= (=> (= x544 (= x365 0)) (and (=> x544 x74) (=> (and (not x544) (and (= x78 (or (and (= true (<= x216 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x216 32)) (> x216 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x319 115792089237316195423570985008687907853269984665640564039457584007913129639904 x384) x236) (= x287 (x584 (+ x516 x236))) (= x384 (x584 (+ x216 31))))) (and (=> x78 x74) (=> (and (and (= (x376 x516) x272) (= (= x272 (ite x580 1 0)) x448) (= x580 (not x499)) (= x499 (= x272 0))) (not x78)) (and (=> (not x448) x74) (=> (and (= (> x272 0) x678) x448) (and (=> (and (and (= x258 (x489 260)) (= x470 (x319 4294967295 x258)) (= x669 (= x470 x258))) x678) (and (=> (and (and (= x298 (x489 x202)) (= (x731 (- x655 31)) x359) (= x194 (or (and (= (<= x298 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x359)) (< x298 x359)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x298) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x359))))) x669) (and (=> (and x194 (and (= x687 (x584 (+ x298 x202))) (= (< 18446744073709551615 x615) x149) (= x615 (x489 x687)))) (and (=> (and (and (= (x584 (+ 32 x687)) x310) (= x636 (mod (* 32 x615) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (or (and (> x310 x511) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x511) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x310))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x310) (> x511 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x638) (= (x731 (- x587 x636)) x511)) (not x149)) (and (=> (and (and (= x558 (mod (* 32 x615) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x735 (x584 (+ x80 x287))) (= (x6 x258 224) x154) (= x256 (x584 (+ x181 32))) (= x694 (x584 (+ 4 x622))) (= x634 (x244 x287)) (= (x584 (+ x14 32)) x80) (= (x489 x256) x369) (= (x584 (+ 32 x735)) x622) (= x680 (x584 (+ 32 x287))) (= (x489 x181) x204) (= x14 (mod (* x615 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x584 (+ x202 32)) x181) (= x387 (x584 (+ x558 x680))) (= (> x634 0) x725)) (not x638)) (and (=> (and (and (= (x584 (+ 32 x680)) x245) (= x452 (x244 x680)) (= x228 (x584 (+ x694 32))) (= x58 (< 1 x634))) x725) (and (=> (and (not x58) (and (= x228 x708) (= x245 x506) (= 1 x59))) x386) (=> (and x58 (and (= x446 (< 2 x634)) (= (x726 x245) x778) (= x318 (x584 (+ x228 32))) (= x768 (x584 (+ 32 x245))))) (and (=> (and (and (= x59 2) (= x506 x768) (= x708 x318)) (not x446)) x386) (=> (and (and (= x437 (< 3 x634)) (= (x54 x768) x72) (= x579 (x584 (+ x768 32))) (= (x584 (+ x318 32)) x679)) x446) (and (=> x437 x520) (=> (and (and (= 3 x59) (= x679 x708) (= x579 x506)) (not x437)) x386))))))) (=> (and (not x725) (and (= x680 x506) (= x694 x708) (= x59 0))) x386))) (=> x638 x74))) (=> x149 x74))) (=> (not x194) x74))) (=> (not x669) x74))) (=> (not x678) x74))))))))) x385))
(assert (x225 x673))
(assert (x225 x659))
(assert (x826 x295))
(assert (x225 x497))
(assert (= x473 (and x797 (not x469))))
(assert (x701 x727))
(assert (x326 x153))
(assert (x225 x438))
(assert (= (x682 (x206 15734828340100255228388097270354557497891140761267446712098462632690385532271)) 15734828340100255228388097270354557497891140761267446712098462632690385532271))
(assert (=> (<= (x372 (x584 (+ x107 96))) 10000) (= (x206 (x372 (x584 (+ x107 96)))) (x690 (x372 (x584 (+ 96 x107)))))))
(assert (x496 x803))
(assert (x225 x513))
(assert (= (x373 (x584 (+ x571 64))) (x682 (x690 (x373 (x584 (+ x571 64)))))))
(assert (= x718 (and x810 x442)))
(assert (x225 x56))
(assert (= (and (not x544) x312) x443))
(assert (=> (<= (x372 (x584 (+ x107 64))) 10000) (= (x206 (x372 (x584 (+ 64 x107)))) (x690 (x372 (x584 (+ 64 x107)))))))
(assert (x225 x296))
(assert (x225 x791))
(assert (x225 x359))
(assert (x225 x228))
(assert (x225 x502))
(assert (x225 x646))
(assert (x225 x202))
(assert (x225 x181))
(assert (= (=> (= x568 (= 0 x702)) (and (=> (and (and (= x808 (x584 (+ x352 x123))) (= (x584 (+ x166 31)) x295) (= (or (> x166 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x166) (= (<= x166 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x413) (= x123 (x319 115792089237316195423570985008687907853269984665640564039457584007913129639904 x295))) (not x568)) (and (=> (and (not x413) (and (= (x83 x352) x627) (= true x219))) (and (=> (and x219 (and (= (ite (not x557) 1 0) x681) (= x100 (x319 x681 x548)) (= (x319 281474976710655 x664) x48) (= (x83 x782) x664) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x48) x293) (= x557 (= x48 0)) (= (ite (< x293 x627) 1 0) x548) (= x606 (= 0 x100)))) (and (=> (and (and (= x207 (< 268435456 x139)) (= x139 (mod (* x48 x627) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x606) (and (=> x207 x74) (=> (not x207) x266))) (=> (not x606) x74))) (=> (not x219) x74))) (=> x413 x74))) (=> x568 x74))) x794))
(assert (x701 x3))
(assert (x225 x722))
(assert (x496 (x728 (x584 (+ x405 32)))))
(assert (x225 x61))
(assert (=> (<= (x373 (x584 (+ x571 128))) 10000) (= (x206 (x373 (x584 (+ x571 128)))) (x690 (x373 (x584 (+ x571 128)))))))
(assert (x225 x328))
(assert (x225 x637))
(assert (x496 (x340 x390)))
(assert (x496 x411))
(assert (= 18446744073709551615 (x682 (x206 18446744073709551615))))
(assert (x225 x640))
(assert (x225 x309))
(assert (= (x682 (x690 (x373 (x584 (+ x571 192))))) (x373 (x584 (+ 192 x571)))))
(assert (x225 x229))
(assert (= x260 (=> (or (not x416) x416) x538)))
(assert (x225 x210))
(assert (= (x682 (x690 x738)) x738))
(assert (= x269 (and (not x662) x566)))
(assert (= (x690 500000) (x206 500000)))
(assert (=> (>= 10000 (x372 x107)) (= (x690 (x372 x107)) (x206 (x372 x107)))))
(assert (x225 x407))
(assert (x326 x249))
(assert (x225 x395))
(assert (= x267 (and x817 x725)))
(assert (= (=> (= x593 (< x336 x47)) (and (=> (and x593 (and (= (x373 320) x830) (= x129 (> 32 x830)))) (and (=> (and (not x129) (and (= (x373 352) x705) (= x810 (= (mod x336 2) 0)))) (and (=> (not x810) x436) (=> x810 x688))) (=> (and (and (= x716 x691) (= x430 x613)) x129) x351))) (=> (not x593) x74))) x362))
(assert (x225 x80))
(assert (= (=> (and (= x419 (x731 (- x11 32))) (= (x584 (+ x721 32)) x390) (= x169 (x340 x721)) (= x67 (x584 (+ x657 32))) (= 384 x11) (= (>= 224 x169) x500)) (and (=> (and (= x96 (x813 x4 (x206 1) 0)) (= x144 (x319 1461501637330902918203684832716283019655932542975 x646)) (< x229 1461501637330902918203684832716283019655932542976) (= (ite (<= x169 32) (x291 (x690 (x340 x390)) 0) (ite (<= x169 64) (x813 (x690 (x340 x390)) (x690 (x340 (x584 (+ 32 x390)))) 0) (ite (>= 96 x169) (x814 (x690 (x340 x390)) (x690 (x340 (x584 (+ 32 x390)))) (x690 (x340 (x584 (+ x390 64)))) 0) (ite (>= 128 x169) (x324 (x690 (x340 x390)) (x690 (x340 (x584 (+ x390 32)))) (x690 (x340 (x584 (+ 64 x390)))) (x690 (x340 (x584 (+ 96 x390)))) 0) (ite (<= x169 160) (x406 (x690 (x340 x390)) (x690 (x340 (x584 (+ 32 x390)))) (x690 (x340 (x584 (+ x390 64)))) (x690 (x340 (x584 (+ 96 x390)))) (x690 (x340 (x584 (+ 128 x390)))) 0) (ite (<= x169 192) (x743 (x690 (x340 x390)) (x690 (x340 (x584 (+ 32 x390)))) (x690 (x340 (x584 (+ x390 64)))) (x690 (x340 (x584 (+ x390 96)))) (x690 (x340 (x584 (+ 128 x390)))) (x690 (x340 (x584 (+ 160 x390)))) 0) (ite (<= x169 224) (x581 (x690 (x340 x390)) (x690 (x340 (x584 (+ x390 32)))) (x690 (x340 (x584 (+ 64 x390)))) (x690 (x340 (x584 (+ x390 96)))) (x690 (x340 (x584 (+ 128 x390)))) (x690 (x340 (x584 (+ x390 160)))) (x690 (x340 (x584 (+ 192 x390)))) 0) (x690 x780)))))))) x4) (<= x229 1461501637330902918203684832716283019655932542975) (= (> x356 1) x214) (= (x163 x247) x356) (= (x196 x96) x229) (= x646 (x163 x572)) (= (x584 (+ 32 x572)) x247) (>= x229 0)) (and (=> x214 x74) (=> (and (not x214) (= false x416)) x260))) x500)) x432))
(assert (x225 x720))
(assert (x225 x64))
(assert (=> (>= 10000 (x748 (x584 (+ x243 96)))) (= (x690 (x748 (x584 (+ x243 96)))) (x206 (x748 (x584 (+ 96 x243)))))))
(assert (= (or x828 x540) x334))
(assert (x225 x103))
(assert (x225 x676))
(assert (x225 x222))
(assert (x225 x681))
(assert (= 11559732032986387107991004021392285783925812861821192530917403151452391805634 (x682 (x206 11559732032986387107991004021392285783925812861821192530917403151452391805634))))
(assert (=> (>= 10000 x542) (= (x690 x542) (x206 x542))))
(assert (x496 x400))
(assert (= (x690 84260195902586255382601658512858328503538471556003836500752771342367880904704) (x206 84260195902586255382601658512858328503538471556003836500752771342367880904704)))
(assert (= (=> (= true x416) x260) x74))
(assert (= (mod (* 26959946667150639794667015087019630673637144422540572481103610249216 x258) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x6 x258 224)))
(assert (x773 x821))
(assert (x225 x738))
(assert (x225 x793))
(assert (= x520 (=> (and (= (x584 (+ x579 32)) x492) (= x793 (x779 x579)) (= (x584 (+ 32 x679)) x781) (= x501 (not (< 4 x634)))) (and x501 (=> (and (= 4 x59) (= x708 x781) (= x506 x492)) x386)))))
(assert (= (and x396 x308) x840))
(assert (= (and x254 x82) x696))
(assert (x701 1461501637330902918203684832716283019655932542975))
(assert (= (x682 (x690 (x373 (x584 (+ 128 x571))))) (x373 (x584 (+ 128 x571)))))
(assert (x225 x186))
(assert (= (x682 (x206 2262799685)) 2262799685))
(assert (x225 x800))
(assert (x225 x721))
(assert (x225 x507))
(assert (x225 x255))
(assert (x701 x427))
(assert (= (x682 (x690 (x340 (x584 (+ 96 x390))))) (x340 (x584 (+ x390 96)))))
(assert (=> (>= 10000 (x373 (x584 (+ x571 64)))) (= (x206 (x373 (x584 (+ 64 x571)))) (x690 (x373 (x584 (+ x571 64)))))))
(assert (x444 x664))
(assert (x496 (x728 (x584 (+ 192 x405)))))
(assert (=> (>= 10000 x759) (= (x690 x759) (x206 x759))))
(assert (x496 (x523 (x584 (+ x170 32)))))
(assert (=> (<= (x523 x170) 10000) (= (x206 (x523 x170)) (x690 (x523 x170)))))
(assert (= (x682 (x690 x375)) x375))
(assert (= (and (not x685) x69) x737))
(assert (x701 x295))
(assert (= (x523 (x584 (+ x170 64))) (x682 (x690 (x523 (x584 (+ 64 x170)))))))
(assert (x225 x458))
(assert (x225 x390))
(assert (x225 x452))
(assert (x826 x357))
(assert (= (x682 (x690 (x373 x571))) (x373 x571)))
(assert (= x660 (and x334 x568)))
(assert (=> (>= 10000 x780) (= (x690 x780) (x206 x780))))
(assert (x225 x216))
(assert (= (x682 (x690 (x373 (x584 (+ x571 160))))) (x373 (x584 (+ 160 x571)))))
(assert (x225 x358))
(assert (= (and x176 x339) x451))
(assert (x225 x258))
(assert (x701 x646))
(assert (x225 x492))
(assert (x225 x59))
(assert (x225 x745))
(assert (x225 x67))
(assert (x225 x508))
(assert (= (and x709 x90) x391))
(assert (x225 x111))
(assert (= (x682 (x690 (x523 (x584 (+ x170 160))))) (x523 (x584 (+ 160 x170)))))
(assert (x225 x521))
(assert (= (x372 (x584 (+ 160 x107))) (x682 (x690 (x372 (x584 (+ 160 x107)))))))
(assert (x225 x708))
(assert (= 84260195902586255382601658512858328503538471556003836500752771342367880904704 (x682 (x206 84260195902586255382601658512858328503538471556003836500752771342367880904704))))
(assert (=> (<= (x523 (x584 (+ 192 x170))) 10000) (= (x206 (x523 (x584 (+ 192 x170)))) (x690 (x523 (x584 (+ 192 x170)))))))
(assert (x225 x11))
(assert (x225 x112))
(assert (x225 x249))
(assert (x225 x677))
(assert (x225 x241))
(assert (x225 x622))
(assert (x225 x571))
(assert (= (x682 (x690 x542)) x542))
(assert (= (x682 (x206 4294967296)) 4294967296))
(assert (= x302 (or x51 x597)))
(assert (=> (>= 10000 x343) (= (x206 x343) (x690 x343))))
(assert (x225 x252))
(assert (= x566 (and x802 (not x635))))
(assert (= (x690 (x682 x691)) x691))
(assert (= false x671))
(assert (x225 x170))
(assert (x701 x548))
(assert (= (and (not x529) x251) x774))
(assert (x225 x183))
(assert (= (and x116 x355) x639))
(assert (x225 x72))
(assert (= x820 (and x519 x621)))
(assert (= x165 (and x214 x573)))
(assert (= x85 (and x171 (not x541))))
(assert (= x88 (and x477 x205)))
(assert (= (and x267 x58) x518))
(assert (x225 x277))
(assert (x225 x106))
(assert (x225 x613))
(assert (x225 x152))
(assert (x225 x275))
(assert (= (mod (ite (> 256 x253) (x25 2 x253) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x6 1 x253)))
(assert (= x533 (and x662 x566)))
(assert (=> (>= 10000 x803) (= (x690 x803) (x206 x803))))
(assert (x225 x314))
(assert (x225 x263))
(assert (x225 x105))
(assert (x496 x542))
(assert (x225 x808))
(assert (= x411 (x682 (x690 x411))))
(assert (x701 x1))
(assert (x225 x71))
(assert (x225 x265))
(assert (=> (>= 10000 (x728 (x584 (+ x405 128)))) (= (x206 (x728 (x584 (+ x405 128)))) (x690 (x728 (x584 (+ x405 128)))))))
(assert (x225 x697))
(assert (x496 (x748 x243)))
(assert (x225 x821))
(assert (x496 (x372 (x584 (+ x107 128)))))
(assert (x225 x693))
(assert (x225 x824))
(assert (= (=> (and (<= x422 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x574) (= x328 (x17 (x690 x375))) (= 403919343 x758) (>= 255 x673) (not (= x738 x422)) (<= x375 1461501637330902918203684832716283019655932542975) (= x841 (> (x827 (x690 x375)) 0)) (= 5 x531) (= x232 false) (>= x187 0) (= (= 0 x61) x130) (>= 1461501637330902918203684832716283019655932542975 x37) (<= x187 255) (= x262 false) (<= 0 x673) (= x350 x798) (= false x560) (= (x17 (x690 x422)) x304) (= x668 (< 0 (x827 (x690 x422)))) (<= 0 x250) (= (x827 (x690 x375)) x476) (= x250 (x17 (x690 x738))) (<= 0 x313) (>= 1461501637330902918203684832716283019655932542975 x382) (> x738 0) (>= x37 0) x424 x668 (>= 1461501637330902918203684832716283019655932542975 x313) (and (< 579 x587) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x587))) (= (= x105 0) x424) (<= x738 1461501637330902918203684832716283019655932542975) (not (= x422 x375)) x121 (<= 0 x304) (not (= x375 x738)) (<= 0 x382) (> x375 0) (<= 0 x823) (= 0 x445) (= x350 x37) (< 0 x422) (= x749 x313) (<= x823 1461501637330902918203684832716283019655932542975) (= x574 x631) (<= 0 x328) (<= 0 x574) (= x121 (< 0 (x827 (x690 x738)))) (= x105 x61) x841 (> x476 0) (= x464 false) (= x631 x382)) (and (=> (not x130) x74) (=> (and (and (= x469 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x475) (and (= (<= x475 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x475 576)))) (not (< x587 4)) (= 403919343 x389) (< x389 2262799685) (= x475 (x731 (- x587 4)))) x130) (and (=> x469 x74) (=> (and (and (= x697 (x489 4)) (= x801 (> x697 18446744073709551615))) (not x469)) (and (=> x801 x74) (=> (and (not x801) (and (= (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x587) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x30)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x587) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x30)) (> x587 x30))) x399) (= x466 (x584 (+ 4 x697))) (= (x584 (+ x466 31)) x30))) (and (=> (and x399 (and (= (x489 x466) x112) (= x425 (> x112 18446744073709551615)))) (and (=> (and (and (= (< x587 x766) x331) (= (x584 (+ x126 x112)) x766) (= x126 (x584 (+ 32 x466)))) (not x425)) (and (=> x331 x74) (=> (and (and (= x685 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x296) true) (< x296 128)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x296))) (= x296 (x731 (- x587 36)))) (not x331)) (and (=> x685 x74) (=> (and (not x685) (and (= (and (= (<= x587 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 67 x587)) x439) (= 128 x498))) (and (=> (not x439) x74) (=> (and (= x235 (< x587 100)) x439) (and (=> (and (and (= x34 (x489 36)) (= x132 true)) (not x235)) (and (=> x132 x671) (=> (not x132) x74))) (=> x235 x74))))))))) (=> x425 x74))) (=> (not x399) x74))))))))) x392))
(assert (x701 x664))
(assert (x225 x490))
(assert (= (and x22 x162) x211))
(assert (x326 x252))
(assert (x225 x491))
(assert (x225 x357))
(assert (x496 (x748 (x584 (+ 128 x243)))))
(assert (x225 x670))
(assert (x496 (x373 (x584 (+ x571 32)))))
(assert (x225 x27))
(assert (= x538 (=> (and (= x429 x416) (= x629 (not x429))) x629)))
(assert (= (and (not x409) x700) x257))
(assert (x225 x610))
(assert (x225 x353))
(assert (x225 x570))
(assert (x701 x62))
(assert (x225 x283))
(assert (= (x682 (x206 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x225 x549))
(assert (= (and x625 x322) x306))
(assert (= x113 (and x446 x518)))
(assert (= (and x36 x128) x158))
(assert (x225 x608))
(assert (x225 x123))
(assert (x225 x768))
(assert (x225 x394))
(assert (= (x206 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x690 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x690 2262799685) (x206 2262799685)))
(assert (x225 x695))
(assert (x496 (x373 (x584 (+ x571 192)))))
(assert (x326 x303))
(assert (x225 x466))
(assert (= (x682 (x206 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (= x282 (and x122 (not x583))))
(assert (= (and x522 (not x413)) x447))
(assert (x225 x569))
(assert (x225 x759))
(assert (x225 x710))
(assert (x225 x749))
(assert (x225 x495))
(assert (x225 x76))
(assert (x2 x832))
(assert (= (x682 (x690 (x748 x243))) (x748 x243)))
(assert (x225 x430))
(assert (x496 (x372 (x584 (+ 160 x107)))))
(assert (= x759 (x682 (x690 x759))))
(assert (=> (>= 10000 x400) (= (x206 x400) (x690 x400))))
(assert (=> (>= 10000 x738) (= (x206 x738) (x690 x738))))
(assert (x225 x426))
(assert (x740 x3))
(assert (= (and x423 (not x425)) x349))
(assert (=> (>= 10000 (x523 (x584 (+ x170 32)))) (= (x206 (x523 (x584 (+ x170 32)))) (x690 (x523 (x584 (+ x170 32)))))))
(assert (x225 x371))
(assert (x496 (x340 (x584 (+ 192 x390)))))
(assert (x701 x832))
(assert (x225 x415))
(assert (x225 x427))
(assert (x225 x480))
(assert (=> (<= (x728 (x584 (+ 192 x405))) 10000) (= (x690 (x728 (x584 (+ 192 x405)))) (x206 (x728 (x584 (+ x405 192)))))))
(assert (= x60 (and x632 x132)))
(assert (x701 281474976710655))
(assert (x225 x180))
(assert (not x392))
(assert (x701 x268))
(assert (= (x206 15734828340100255228388097270354557497891140761267446712098462632690385532271) (x690 15734828340100255228388097270354557497891140761267446712098462632690385532271)))
(assert (= x760 (and (not x810) x442)))
(assert (= x436 (=> (and (= x535 (x584 (+ x430 32))) (= (x731 (- x288 x430)) x152) (= (x728 x430) x604) (= x710 (x731 (- x152 32))) (= x405 (x584 (+ 32 x430))) (= x831 (<= x604 224)) (= x288 (x584 (+ 32 x643))) (= x643 (x584 (+ 32 x535)))) (and x831 (=> (and (= (ite (<= x604 32) (x291 (x690 (x728 x405)) 0) (ite (<= x604 64) (x813 (x690 (x728 x405)) (x690 (x728 (x584 (+ x405 32)))) 0) (ite (<= x604 96) (x814 (x690 (x728 x405)) (x690 (x728 (x584 (+ x405 32)))) (x690 (x728 (x584 (+ x405 64)))) 0) (ite (>= 128 x604) (x324 (x690 (x728 x405)) (x690 (x728 (x584 (+ x405 32)))) (x690 (x728 (x584 (+ x405 64)))) (x690 (x728 (x584 (+ x405 96)))) 0) (ite (>= 160 x604) (x406 (x690 (x728 x405)) (x690 (x728 (x584 (+ x405 32)))) (x690 (x728 (x584 (+ 64 x405)))) (x690 (x728 (x584 (+ 96 x405)))) (x690 (x728 (x584 (+ 128 x405)))) 0) (ite (>= 192 x604) (x743 (x690 (x728 x405)) (x690 (x728 (x584 (+ x405 32)))) (x690 (x728 (x584 (+ x405 64)))) (x690 (x728 (x584 (+ x405 96)))) (x690 (x728 (x584 (+ x405 128)))) (x690 (x728 (x584 (+ 160 x405)))) 0) (ite (>= 224 x604) (x581 (x690 (x728 x405)) (x690 (x728 (x584 (+ 32 x405)))) (x690 (x728 (x584 (+ x405 64)))) (x690 (x728 (x584 (+ 96 x405)))) (x690 (x728 (x584 (+ 128 x405)))) (x690 (x728 (x584 (+ 160 x405)))) (x690 (x728 (x584 (+ 192 x405)))) 0) (x690 x411)))))))) x576) (= x288 x220)) x599)))))
(assert (x225 x8))
(assert (x225 x68))
(assert (x225 x595))
(assert (x225 x617))
(assert (x496 (x373 (x584 (+ x571 128)))))
(assert (x225 x298))
(assert (x225 x304))
(assert (x225 x330))
(assert (= (x682 (x690 (x748 (x584 (+ 32 x243))))) (x748 (x584 (+ 32 x243)))))
(assert (x496 (x748 (x584 (+ 32 x243)))))
(assert (= (and x98 x675) x709))
(assert (x2 x427))
(assert (x225 x139))
(assert (x225 x62))
(assert (x225 x227))
(assert (= (and (not x207) x284) x601))
(assert (= (x340 (x584 (+ x390 128))) (x682 (x690 (x340 (x584 (+ x390 128)))))))
(assert (x701 x303))
(assert (=> (<= (x373 (x584 (+ x571 96))) 10000) (= (x690 (x373 (x584 (+ x571 96)))) (x206 (x373 (x584 (+ 96 x571)))))))
(assert (x496 (x728 (x584 (+ x405 96)))))
(assert (x225 x655))
(assert (x225 x783))
(assert (x701 x258))
(assert (=> (<= (x340 (x584 (+ x390 160))) 10000) (= (x206 (x340 (x584 (+ x390 160)))) (x690 (x340 (x584 (+ 160 x390)))))))
(assert (x701 x252))
(assert (= (x682 (x690 (x373 (x584 (+ x571 96))))) (x373 (x584 (+ x571 96)))))
(assert (= (x523 (x584 (+ 192 x170))) (x682 (x690 (x523 (x584 (+ 192 x170)))))))
(assert (= (x682 (x690 x422)) x422))
(assert (x225 x795))
(assert (= (and x167 x546) x213))
(assert (=> (<= (x748 (x584 (+ x243 128))) 10000) (= (x206 (x748 (x584 (+ 128 x243)))) (x690 (x748 (x584 (+ x243 128)))))))
(assert (= (and (not x455) x381) x546))
(assert (= (x682 (x206 403919343)) 403919343))
(assert (x225 x151))
(assert (x496 x738))
(assert (x225 x456))
(assert (x225 x164))
(assert (= x817 (and (not x638) x52)))
(assert (= (and x198 x494) x573))
(assert (x225 x18))
(assert (=> (>= 10000 (x748 (x584 (+ 32 x243)))) (= (x690 (x748 (x584 (+ x243 32)))) (x206 (x748 (x584 (+ x243 32)))))))
(assert (x225 x488))
(assert (x225 x38))
(assert (x701 4294967295))
(assert (= (or x347 x211) x122))
(assert (x225 x445))
(assert (x225 x30))
(assert (x225 x628))
(assert (=> (>= 10000 (x728 x405)) (= (x206 (x728 x405)) (x690 (x728 x405)))))
(assert (x225 x776))
(assert (= x442 (and x175 (not x129))))
(assert (= x208 (and x755 x678)))
(assert (= 4294967295 (x682 (x206 4294967295))))
(assert (= (and x88 x50) x339))
(assert (x225 x144))
(assert (=> (>= 10000 (x728 (x584 (+ 96 x405)))) (= (x206 (x728 (x584 (+ x405 96)))) (x690 (x728 (x584 (+ x405 96)))))))
(assert (= (x682 (x690 (x340 (x584 (+ x390 64))))) (x340 (x584 (+ 64 x390)))))
(assert (x225 x803))
(assert (= (and x428 x593) x175))
(assert (= x284 (and x606 x815)))
(assert (x225 x23))
(assert (= x312 (or x421 x812)))
(check-sat)
(exit)