(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x531 0)) (((x70 (x308 Int)) (x284 (x221 x531) (x224 Int)) (x51 (x353 x531) (x797 x531) (x260 Int)))))
(declare-fun x639 () Int)
(declare-fun x613 () Bool)
(declare-fun x299 () Bool)
(declare-fun x83 () Bool)
(declare-fun x487 () Bool)
(declare-fun x817 () Int)
(declare-fun x806 () Bool)
(declare-fun x822 () Int)
(declare-fun x695 () Int)
(declare-fun x251 () x531)
(declare-fun x390 () Int)
(declare-fun x100 () Int)
(declare-fun x774 () Bool)
(declare-fun x558 () Bool)
(declare-fun x57 () Bool)
(declare-fun x200 () Int)
(declare-fun x520 () Int)
(declare-fun x782 () Bool)
(declare-fun x843 () Bool)
(declare-fun x408 () Int)
(declare-fun x778 () Int)
(declare-fun x204 () Int)
(declare-fun x362 () Int)
(declare-fun x826 () Int)
(declare-fun x116 () Bool)
(declare-fun x591 () Bool)
(declare-fun x636 () Int)
(declare-fun x811 () Int)
(declare-fun x237 () Int)
(declare-fun x538 () Bool)
(declare-fun x759 () x531)
(declare-fun x728 () Int)
(declare-fun x580 () Bool)
(declare-fun x846 () Bool)
(declare-fun x863 () Bool)
(declare-fun x734 () Bool)
(declare-fun x113 () Int)
(declare-fun x752 () Bool)
(declare-fun x198 () Int)
(declare-fun x641 () x531)
(declare-fun x428 () Int)
(declare-fun x514 () Int)
(declare-fun x166 () Int)
(declare-fun x593 () Int)
(declare-fun x340 () Int)
(declare-fun x461 () Int)
(declare-fun x708 (Int) x531)
(declare-fun x436 () Bool)
(declare-fun x534 () Bool)
(declare-fun x446 () Bool)
(declare-fun x562 () Bool)
(declare-fun x370 () Bool)
(declare-fun x337 () Bool)
(declare-fun x594 () Int)
(declare-fun x172 (Int Int) Int)
(declare-fun x153 () x531)
(declare-fun x827 () Bool)
(declare-fun x388 () x531)
(declare-fun x535 () Int)
(declare-fun x73 () Int)
(declare-fun x421 (Int) Int)
(declare-fun x576 () Int)
(declare-fun x43 () Int)
(declare-fun x53 () Bool)
(declare-fun x39 () x531)
(declare-fun x554 () x531)
(declare-fun x324 () Bool)
(declare-fun x240 () Bool)
(declare-fun x47 (x531) Int)
(declare-fun x631 () Int)
(declare-fun x510 () Int)
(declare-fun x488 () Bool)
(declare-fun x157 () Int)
(declare-fun x147 () Bool)
(declare-fun x503 () Bool)
(declare-fun x93 (x531) Int)
(declare-fun x659 () Bool)
(declare-fun x555 () Int)
(declare-fun x356 () Int)
(declare-fun x109 () Int)
(declare-fun x618 () Int)
(declare-fun x272 () Int)
(declare-fun x592 () Bool)
(declare-fun x527 () Int)
(declare-fun x873 () Bool)
(declare-fun x262 () Int)
(declare-fun x533 () Int)
(declare-fun x742 () Int)
(declare-fun x349 () Bool)
(declare-fun x814 () Bool)
(declare-fun x604 () Int)
(declare-fun x246 (x531) Int)
(declare-fun x468 () Int)
(declare-fun x398 () Bool)
(declare-fun x523 () Bool)
(declare-fun x98 () Int)
(declare-fun x332 () Int)
(declare-fun x770 () Int)
(declare-fun x831 () Bool)
(declare-fun x609 () Int)
(declare-fun x585 () Int)
(declare-fun x180 () Int)
(declare-fun x756 () Int)
(declare-fun x574 () Int)
(declare-fun x103 () Int)
(declare-fun x675 () Bool)
(declare-fun x753 () Int)
(declare-fun x19 () Int)
(declare-fun x341 () Int)
(declare-fun x878 () Bool)
(declare-fun x515 () Bool)
(declare-fun x205 () Bool)
(declare-fun x265 () Bool)
(declare-fun x456 () Int)
(declare-fun x497 () Bool)
(declare-fun x74 () Int)
(declare-fun x58 () Int)
(declare-fun x588 () Bool)
(declare-fun x672 () Bool)
(declare-fun x780 (x531) Int)
(declare-fun x637 () Int)
(declare-fun x791 () Int)
(declare-fun x788 () Bool)
(declare-fun x212 () Int)
(declare-fun x717 () x531)
(declare-fun x123 () Int)
(declare-fun x493 () Bool)
(declare-fun x282 () Int)
(declare-fun x526 () Int)
(declare-fun x427 () Int)
(declare-fun x79 () Bool)
(declare-fun x112 (Int) Int)
(declare-fun x505 () Bool)
(declare-fun x552 () Bool)
(declare-fun x225 () Int)
(declare-fun x824 () Int)
(declare-fun x821 () Int)
(declare-fun x129 () Int)
(declare-fun x393 () Int)
(declare-fun x504 () Int)
(declare-fun x29 () Bool)
(declare-fun x882 () Bool)
(declare-fun x437 () Int)
(declare-fun x640 () Bool)
(declare-fun x186 () Int)
(declare-fun x707 () Int)
(declare-fun x767 () Bool)
(declare-fun x429 () Int)
(declare-fun x648 () x531)
(declare-fun x329 () Int)
(declare-fun x67 () Bool)
(declare-fun x258 () Bool)
(declare-fun x338 () Int)
(declare-fun x801 () Bool)
(declare-fun x22 () Bool)
(declare-fun x366 () Int)
(declare-fun x573 () Bool)
(declare-fun x572 () Bool)
(declare-fun x479 () Bool)
(declare-fun x304 () Int)
(declare-fun x457 () Bool)
(declare-fun x387 () Int)
(declare-fun x252 () Int)
(declare-fun x743 () x531)
(declare-fun x69 () Int)
(declare-fun x222 () Bool)
(declare-fun x575 () Int)
(declare-fun x851 () Int)
(declare-fun x12 () Bool)
(declare-fun x483 () Int)
(declare-fun x359 () Int)
(declare-fun x210 () Bool)
(declare-fun x617 () Int)
(declare-fun x347 () Int)
(declare-fun x692 () Bool)
(declare-fun x394 () Bool)
(declare-fun x48 () Int)
(declare-fun x424 () Int)
(declare-fun x537 () Int)
(declare-fun x561 () Int)
(declare-fun x726 () Int)
(declare-fun x150 () Bool)
(declare-fun x45 () Bool)
(declare-fun x681 () Int)
(declare-fun x146 () Bool)
(declare-fun x815 () Bool)
(declare-fun x463 () Bool)
(declare-fun x235 () Int)
(declare-fun x842 () Int)
(declare-fun x361 () Bool)
(declare-fun x740 () Bool)
(declare-fun x793 () Int)
(declare-fun x122 () Bool)
(declare-fun x749 () x531)
(declare-fun x676 () Int)
(declare-fun x309 () Int)
(declare-fun x499 () Bool)
(declare-fun x306 () Int)
(declare-fun x841 () Int)
(declare-fun x623 () Int)
(declare-fun x697 () Bool)
(declare-fun x603 () Int)
(declare-fun x181 () Int)
(declare-fun x454 () Bool)
(declare-fun x747 () Bool)
(declare-fun x360 () Int)
(declare-fun x152 () Int)
(declare-fun x238 () Bool)
(declare-fun x448 () Bool)
(declare-fun x373 () Int)
(declare-fun x333 () Bool)
(declare-fun x867 () Int)
(declare-fun x723 () Int)
(declare-fun x259 () Int)
(declare-fun x230 () Int)
(declare-fun x549 () Bool)
(declare-fun x346 () Int)
(declare-fun x757 () Int)
(declare-fun x599 () Int)
(declare-fun x135 () Int)
(declare-fun x694 () Int)
(declare-fun x125 () Int)
(declare-fun x174 () Int)
(declare-fun x566 () Int)
(declare-fun x273 () Bool)
(declare-fun x587 () x531)
(declare-fun x658 () Int)
(declare-fun x522 () Bool)
(declare-fun x567 () Bool)
(declare-fun x219 () Bool)
(declare-fun x267 () Bool)
(declare-fun x197 () x531)
(declare-fun x223 () Bool)
(declare-fun x656 () Bool)
(declare-fun x776 () Int)
(declare-fun x278 () Int)
(declare-fun x17 () Bool)
(declare-fun x126 (x531) Int)
(declare-fun x569 () Bool)
(declare-fun x330 () Int)
(declare-fun x731 () Bool)
(declare-fun x281 () Int)
(declare-fun x375 () Int)
(declare-fun x81 () Bool)
(declare-fun x663 () Int)
(declare-fun x564 () Int)
(declare-fun x124 () Int)
(declare-fun x270 () Int)
(declare-fun x705 () Int)
(declare-fun x352 () Int)
(declare-fun x870 () Bool)
(declare-fun x121 () Int)
(declare-fun x397 () Bool)
(declare-fun x327 () Int)
(declare-fun x727 () x531)
(declare-fun x632 () x531)
(declare-fun x86 () Int)
(declare-fun x409 () Bool)
(declare-fun x620 () Int)
(declare-fun x720 () Int)
(declare-fun x96 () Bool)
(declare-fun x363 () Int)
(declare-fun x91 () Int)
(declare-fun x589 () Bool)
(declare-fun x434 () x531)
(declare-fun x291 () Int)
(declare-fun x7 () Int)
(declare-fun x704 () Int)
(declare-fun x16 () x531)
(declare-fun x414 () Bool)
(declare-fun x92 () Bool)
(declare-fun x254 () Int)
(declare-fun x820 () Int)
(declare-fun x628 () Int)
(declare-fun x622 () Int)
(declare-fun x856 () Int)
(declare-fun x403 () Bool)
(declare-fun x261 () x531)
(declare-fun x645 () Bool)
(declare-fun x292 () Bool)
(declare-fun x472 () Int)
(declare-fun x551 () Bool)
(declare-fun x733 () Int)
(declare-fun x275 () Bool)
(declare-fun x90 () Int)
(declare-fun x813 () Int)
(declare-fun x40 () Int)
(declare-fun x789 () Int)
(declare-fun x389 () Bool)
(declare-fun x644 () Int)
(declare-fun x729 () Bool)
(declare-fun x199 () Bool)
(declare-fun x703 () Int)
(declare-fun x62 () Int)
(declare-fun x145 () Bool)
(declare-fun x540 () Int)
(declare-fun x768 () Int)
(declare-fun x396 () Bool)
(declare-fun x300 (Int) Int)
(declare-fun x140 () Bool)
(declare-fun x652 () Bool)
(declare-fun x234 () Int)
(declare-fun x557 () Int)
(declare-fun x108 () Bool)
(declare-fun x638 () Int)
(declare-fun x853 () Int)
(declare-fun x314 () Int)
(declare-fun x110 () Bool)
(declare-fun x473 () Int)
(declare-fun x682 () Bool)
(declare-fun x451 () Bool)
(declare-fun x670 () Int)
(declare-fun x242 () Bool)
(declare-fun x75 () Int)
(declare-fun x250 () Bool)
(declare-fun x754 () Bool)
(declare-fun x364 () Int)
(declare-fun x546 () Bool)
(declare-fun x848 () Int)
(declare-fun x507 () Int)
(declare-fun x470 () Bool)
(declare-fun x785 () Bool)
(declare-fun x715 () Int)
(declare-fun x635 () Int)
(declare-fun x371 () Int)
(declare-fun x313 () Int)
(declare-fun x509 () x531)
(declare-fun x56 () Bool)
(declare-fun x579 () Int)
(declare-fun x850 () Bool)
(declare-fun x524 () Int)
(declare-fun x247 () Bool)
(declare-fun x368 () Int)
(declare-fun x196 () Bool)
(declare-fun x718 (Int) Int)
(declare-fun x342 () Int)
(declare-fun x736 () Bool)
(declare-fun x127 () Int)
(declare-fun x13 () Bool)
(declare-fun x263 () x531)
(declare-fun x550 () Bool)
(declare-fun x519 () Bool)
(declare-fun x305 () Bool)
(declare-fun x485 () Bool)
(declare-fun x476 () x531)
(declare-fun x621 () Int)
(declare-fun x700 () Int)
(declare-fun x229 () Int)
(declare-fun x565 () Int)
(declare-fun x25 () Int)
(declare-fun x280 () x531)
(declare-fun x433 () Int)
(declare-fun x602 () Bool)
(declare-fun x491 () Int)
(declare-fun x650 () Int)
(declare-fun x738 () Int)
(declare-fun x293 () Bool)
(declare-fun x97 () Bool)
(declare-fun x136 () Int)
(declare-fun x876 () Int)
(declare-fun x410 () Bool)
(declare-fun x459 () Int)
(declare-fun x320 () Int)
(declare-fun x317 () Bool)
(declare-fun x217 () Int)
(declare-fun x154 (x531) Int)
(declare-fun x130 () Int)
(declare-fun x677 () Bool)
(declare-fun x104 () Bool)
(declare-fun x800 () Int)
(declare-fun x584 () Bool)
(declare-fun x149 () x531)
(declare-fun x380 () Bool)
(declare-fun x779 () Int)
(declare-fun x269 () x531)
(declare-fun x271 () Bool)
(declare-fun x627 () Bool)
(declare-fun x325 () Bool)
(declare-fun x868 () Int)
(declare-fun x769 () Bool)
(declare-fun x253 () x531)
(declare-fun x452 () Bool)
(declare-fun x2 () Bool)
(declare-fun x762 () Bool)
(declare-fun x120 () Int)
(declare-fun x345 () Int)
(declare-fun x115 () Int)
(declare-fun x187 () Bool)
(declare-fun x244 () Int)
(declare-fun x151 () Bool)
(declare-fun x148 () Bool)
(declare-fun x539 () Int)
(declare-fun x484 () Int)
(declare-fun x869 () Int)
(declare-fun x601 () Bool)
(declare-fun x837 () Int)
(declare-fun x764 () Bool)
(declare-fun x334 () Int)
(declare-fun x792 () Bool)
(declare-fun x581 () Int)
(declare-fun x24 () Int)
(declare-fun x176 () Int)
(declare-fun x228 () Bool)
(declare-fun x532 () Int)
(declare-fun x316 () Bool)
(declare-fun x111 () Bool)
(declare-fun x865 () Int)
(declare-fun x529 () Bool)
(declare-fun x496 () Int)
(declare-fun x10 () Bool)
(declare-fun x9 () Bool)
(declare-fun x724 () Bool)
(declare-fun x739 () Bool)
(declare-fun x194 () x531)
(declare-fun x303 () Int)
(declare-fun x502 () Bool)
(declare-fun x709 () Bool)
(declare-fun x854 () Int)
(declare-fun x521 () Bool)
(declare-fun x99 () Bool)
(declare-fun x571 () Bool)
(declare-fun x559 () Bool)
(declare-fun x214 () x531)
(declare-fun x586 () Int)
(declare-fun x786 () Int)
(declare-fun x279 () Int)
(declare-fun x85 () Int)
(declare-fun x185 () Int)
(declare-fun x68 () Bool)
(declare-fun x417 () Int)
(declare-fun x190 () Int)
(declare-fun x699 () Int)
(declare-fun x33 () Int)
(declare-fun x6 () Int)
(declare-fun x450 () Bool)
(declare-fun x311 () Bool)
(declare-fun x84 () x531)
(declare-fun x683 () Bool)
(declare-fun x633 () Int)
(declare-fun x377 () Int)
(declare-fun x553 () Int)
(declare-fun x192 () Bool)
(declare-fun x399 () Int)
(declare-fun x804 () Bool)
(declare-fun x518 () Bool)
(declare-fun x94 () Bool)
(declare-fun x378 () Bool)
(declare-fun x466 () Int)
(declare-fun x758 () Bool)
(declare-fun x556 () Bool)
(declare-fun x307 () x531)
(declare-fun x357 () Int)
(declare-fun x462 () Bool)
(declare-fun x218 () Bool)
(declare-fun x382 () Bool)
(declare-fun x687 () Int)
(declare-fun x372 () Bool)
(declare-fun x760 () Int)
(declare-fun x132 () Int)
(declare-fun x671 () Bool)
(declare-fun x818 () Int)
(declare-fun x168 () Bool)
(declare-fun x171 () Int)
(declare-fun x49 () Int)
(declare-fun x232 () Int)
(declare-fun x612 () x531)
(declare-fun x541 () Bool)
(declare-fun x249 () Int)
(declare-fun x236 () Int)
(declare-fun x139 () Bool)
(declare-fun x77 () Int)
(declare-fun x430 () Int)
(declare-fun x336 () Bool)
(declare-fun x862 () Int)
(declare-fun x516 () Bool)
(declare-fun x474 () Bool)
(declare-fun x285 () Bool)
(declare-fun x162 (x531) Int)
(declare-fun x44 () Int)
(declare-fun x464 () Int)
(declare-fun x102 () Int)
(declare-fun x105 () Bool)
(declare-fun x799 () Int)
(declare-fun x226 () Int)
(declare-fun x643 () Bool)
(declare-fun x836 () Int)
(declare-fun x860 () Int)
(declare-fun x36 () Int)
(declare-fun x442 () Bool)
(declare-fun x568 () Int)
(declare-fun x391 () Bool)
(declare-fun x87 () Int)
(declare-fun x160 () Int)
(declare-fun x449 () Bool)
(declare-fun x810 () Bool)
(declare-fun x23 () Int)
(declare-fun x15 () Int)
(declare-fun x322 () Int)
(declare-fun x735 () x531)
(declare-fun x444 () Int)
(declare-fun x829 () Bool)
(declare-fun x746 () Bool)
(declare-fun x750 () Bool)
(declare-fun x189 () Bool)
(declare-fun x512 () Int)
(declare-fun x691 () Bool)
(declare-fun x471 () Int)
(declare-fun x78 () Bool)
(declare-fun x642 () Bool)
(declare-fun x26 () Bool)
(declare-fun x133 () Bool)
(declare-fun x107 () Bool)
(declare-fun x872 () Bool)
(declare-fun x583 () Bool)
(declare-fun x651 () Bool)
(declare-fun x679 () Bool)
(declare-fun x318 () Bool)
(declare-fun x819 () Int)
(declare-fun x751 () Int)
(declare-fun x678 () Int)
(declare-fun x680 () Int)
(declare-fun x358 () Bool)
(declare-fun x31 () Int)
(declare-fun x478 () Int)
(declare-fun x443 () Bool)
(declare-fun x605 () Bool)
(declare-fun x719 () Int)
(declare-fun x144 () Bool)
(declare-fun x331 () Int)
(declare-fun x845 () Bool)
(declare-fun x290 () Bool)
(declare-fun x492 () Bool)
(declare-fun x701 () Int)
(declare-fun x117 () Bool)
(declare-fun x686 () Int)
(declare-fun x134 (Int) Int)
(declare-fun x321 () Bool)
(declare-fun x158 () x531)
(declare-fun x745 () Bool)
(declare-fun x41 () Int)
(declare-fun x796 () Int)
(declare-fun x412 () Int)
(declare-fun x191 () Int)
(declare-fun x177 () Int)
(declare-fun x369 () Int)
(declare-fun x667 () Bool)
(declare-fun x289 () Bool)
(declare-fun x689 () Int)
(declare-fun x765 () Int)
(declare-fun x445 () Bool)
(declare-fun x781 () x531)
(declare-fun x458 () Int)
(declare-fun x453 () Bool)
(declare-fun x447 () Bool)
(declare-fun x596 () Int)
(declare-fun x138 () Bool)
(declare-fun x809 () Bool)
(declare-fun x119 () Int)
(declare-fun x777 () Bool)
(declare-fun x835 () Bool)
(declare-fun x348 () Bool)
(declare-fun x696 () Bool)
(declare-fun x716 () Bool)
(declare-fun x385 () Int)
(declare-fun x722 () Int)
(declare-fun x374 () Int)
(declare-fun x732 () Int)
(declare-fun x159 () Int)
(declare-fun x795 () Bool)
(declare-fun x807 () Int)
(declare-fun x88 () Int)
(declare-fun x877 () Int)
(declare-fun x664 () Bool)
(declare-fun x647 () Bool)
(declare-fun x207 () x531)
(declare-fun x274 () Int)
(declare-fun x883 () Int)
(declare-fun x71 () Bool)
(declare-fun x175 () Int)
(declare-fun x323 () Int)
(declare-fun x37 () Int)
(declare-fun x646 () Bool)
(declare-fun x72 () Int)
(declare-fun x35 () x531)
(declare-fun x498 () Int)
(declare-fun x525 () Bool)
(declare-fun x4 () Int)
(declare-fun x803 () Int)
(declare-fun x582 () Int)
(declare-fun x66 () Int)
(declare-fun x766 () Int)
(declare-fun x844 () x531)
(declare-fun x578 () Int)
(declare-fun x128 () Int)
(declare-fun x42 () x531)
(declare-fun x233 () Bool)
(declare-fun x441 () Bool)
(declare-fun x828 () Int)
(declare-fun x312 () Bool)
(declare-fun x481 () Int)
(declare-fun x255 () Bool)
(declare-fun x173 () Bool)
(declare-fun x634 () Int)
(declare-fun x164 (Int) Int)
(declare-fun x477 () Bool)
(declare-fun x714 () Bool)
(declare-fun x286 () Bool)
(declare-fun x816 () Int)
(declare-fun x619 () Bool)
(declare-fun x432 () Int)
(declare-fun x18 () Int)
(declare-fun x256 () Bool)
(declare-fun x469 () Bool)
(declare-fun x184 () Int)
(declare-fun x195 () Bool)
(declare-fun x376 () Bool)
(declare-fun x161 () Int)
(declare-fun x182 () Bool)
(declare-fun x629 () Int)
(declare-fun x401 () Int)
(declare-fun x467 () Bool)
(declare-fun x548 () Bool)
(declare-fun x227 () Int)
(declare-fun x847 () Int)
(declare-fun x530 () Int)
(declare-fun x131 () Int)
(declare-fun x590 () Bool)
(declare-fun x542 () Int)
(declare-fun x666 () Int)
(declare-fun x215 () Int)
(declare-fun x400 (Int) Int)
(declare-fun x859 () Int)
(declare-fun x513 () Int)
(declare-fun x416 () Int)
(declare-fun x798 () Int)
(declare-fun x653 () Int)
(declare-fun x423 () Bool)
(declare-fun x425 () Bool)
(declare-fun x662 () Int)
(declare-fun x201 () Int)
(declare-fun x287 () Int)
(declare-fun x812 () Int)
(declare-fun x517 () Bool)
(declare-fun x783 () Int)
(declare-fun x748 () Bool)
(declare-fun x545 () Bool)
(declare-fun x50 () Int)
(declare-fun x245 () Int)
(declare-fun x725 () Bool)
(declare-fun x772 () Bool)
(declare-fun x879 () Bool)
(declare-fun x838 () Int)
(declare-fun x241 () Int)
(declare-fun x439 () Int)
(declare-fun x508 () Int)
(declare-fun x610 () Int)
(declare-fun x438 () Int)
(declare-fun x156 () Int)
(declare-fun x257 () Int)
(declare-fun x206 () Int)
(declare-fun x494 () Int)
(declare-fun x547 () Int)
(declare-fun x407 () Int)
(declare-fun x276 () Int)
(declare-fun x674 () Int)
(declare-fun x615 () Bool)
(declare-fun x741 () Int)
(declare-fun x243 () Bool)
(declare-fun x11 () Int)
(declare-fun x350 () Int)
(declare-fun x379 () Int)
(declare-fun x840 () Int)
(declare-fun x730 () Bool)
(declare-fun x422 () Int)
(declare-fun x440 () Bool)
(declare-fun x657 () x531)
(declare-fun x871 () Int)
(declare-fun x202 () Int)
(declare-fun x188 () Int)
(declare-fun x669 () Bool)
(declare-fun x455 () Bool)
(declare-fun x874 () Bool)
(declare-fun x864 () Int)
(declare-fun x624 () Int)
(declare-fun x264 () Int)
(declare-fun x506 () Int)
(declare-fun x28 () Bool)
(declare-fun x614 () Int)
(declare-fun x165 () x531)
(declare-fun x761 () Bool)
(declare-fun x802 () Int)
(declare-fun x106 () Int)
(declare-fun x406 () Int)
(declare-fun x744 () Int)
(declare-fun x209 () Int)
(declare-fun x402 () Int)
(declare-fun x607 () Bool)
(declare-fun x706 () Int)
(declare-fun x114 () Int)
(declare-fun x32 () Int)
(declare-fun x1 () Int)
(declare-fun x297 () Bool)
(declare-fun x858 () Int)
(declare-fun x178 () Int)
(declare-fun x598 () Bool)
(declare-fun x511 () Bool)
(declare-fun x823 () Int)
(declare-fun x95 () Int)
(declare-fun x61 () Bool)
(declare-fun x46 () Int)
(declare-fun x711 () Bool)
(declare-fun x381 (x531) Int)
(declare-fun x343 () Int)
(declare-fun x326 () Bool)
(declare-fun x239 () Bool)
(declare-fun x825 () Int)
(declare-fun x170 () Bool)
(declare-fun x881 () Bool)
(declare-fun x543 () Int)
(declare-fun x296 () Int)
(declare-fun x419 () Bool)
(declare-fun x415 () Int)
(declare-fun x344 () Bool)
(declare-fun x208 () Bool)
(declare-fun x763 () Int)
(declare-fun x383 () Bool)
(declare-fun x490 () Bool)
(declare-fun x155 () Int)
(declare-fun x231 () Int)
(declare-fun x295 () Bool)
(declare-fun x501 () Bool)
(declare-fun x30 () x531)
(declare-fun x405 () Bool)
(declare-fun x339 () Int)
(declare-fun x301 () Bool)
(declare-fun x137 () Bool)
(declare-fun x328 () Bool)
(declare-fun x8 () Bool)
(declare-fun x283 () Bool)
(declare-fun x34 () Int)
(declare-fun x710 () Bool)
(declare-fun x773 () Bool)
(declare-fun x5 () Int)
(declare-fun x384 () Int)
(declare-fun x857 () Int)
(declare-fun x849 () Bool)
(declare-fun x884 () Bool)
(declare-fun x167 () Bool)
(declare-fun x277 () x531)
(declare-fun x875 () Int)
(declare-fun x630 () Int)
(declare-fun x101 () Int)
(declare-fun x489 () Int)
(declare-fun x213 () Int)
(declare-fun x38 () Bool)
(declare-fun x790 () Int)
(declare-fun x880 () x531)
(declare-fun x713 () Int)
(declare-fun x771 () Bool)
(declare-fun x142 () Bool)
(declare-fun x830 () Int)
(declare-fun x64 () Bool)
(declare-fun x668 () Int)
(declare-fun x367 () Int)
(declare-fun x302 () Int)
(declare-fun x465 () Bool)
(declare-fun x21 () Bool)
(declare-fun x597 () Int)
(declare-fun x834 () Int)
(declare-fun x577 () Bool)
(declare-fun x595 () x531)
(declare-fun x418 () Int)
(declare-fun x426 () Bool)
(declare-fun x528 () Bool)
(declare-fun x211 () Int)
(declare-fun x661 () Int)
(declare-fun x775 () Int)
(declare-fun x55 (x531) Int)
(declare-fun x266 () Bool)
(declare-fun x413 () Bool)
(declare-fun x721 () Bool)
(declare-fun x354 () Int)
(declare-fun x486 () Bool)
(declare-fun x193 () Int)
(declare-fun x563 () Int)
(declare-fun x288 () Int)
(declare-fun x386 () Bool)
(declare-fun x480 () Int)
(declare-fun x351 () Bool)
(declare-fun x3 () Bool)
(declare-fun x544 () Int)
(declare-fun x808 () Int)
(declare-fun x626 () Int)
(declare-fun x784 () Int)
(declare-fun x80 () Int)
(declare-fun x294 () Int)
(declare-fun x76 () Int)
(declare-fun x805 () Bool)
(declare-fun x89 () Bool)
(declare-fun x794 () Int)
(declare-fun x885 () Int)
(declare-fun x475 () Bool)
(declare-fun x435 () Bool)
(declare-fun x355 () Int)
(declare-fun x654 () Int)
(declare-fun x404 () Bool)
(define-fun x14 ((x531 x531) (x861 Int)) x531 (ite ((_ is x284) x531) (x284 (x221 x531) (+ (x224 x531) x861)) (ite ((_ is x51) x531) (x51 (x353 x531) (x797 x531) (+ (x260 x531) x861)) (x70 (+ x861 (x308 x531))))))
(define-fun x63 ((x54 Int)) Int (ite (and (< x54 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x54)) x54 (- x54 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x616 ((x54 Int)) Int (ite (and (>= x54 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x54 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x54) x54))
(define-fun x298 ((x248 Int)) Bool (and (< x248 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x248 0)))
(define-fun x335 ((x248 Int)) Bool (and (= (x172 115792089237316195423570985008687907853269984665640564039457584007913129639935 x248) x248) (= (x172 x248 115792089237316195423570985008687907853269984665640564039457584007913129639935) x248)))
(define-fun x395 ((x248 Int)) Bool (and (= 0 (x172 x248 0)) (= (x172 0 x248) 0)))
(define-fun x833 ((x248 Int)) Bool (= (x172 x248 x248) x248))
(define-fun x365 ((x248 Int)) Bool (and (x395 x248) (x833 x248) (x335 x248)))
(define-fun x319 ((x248 Int) (x460 Int)) Bool (= (x172 x248 x460) (x172 x460 x248)))
(define-fun x684 ((x248 Int) (x460 Int)) Bool (and (>= (x172 x248 x460) 0) (=> (<= 0 x460) (<= (x172 x248 x460) x460)) (=> (>= x248 0) (<= (x172 x248 x460) x248))))
(define-fun x606 ((x248 Int) (x460 Int)) Bool (and (x319 x248 x460) (x684 x248 x460)))
(define-fun x560 ((x248 Int)) Bool (= (+ (mod x248 32) (x172 x248 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x248 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x392 ((x248 Int)) Bool (and (x560 x248) (x606 x248 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x60 ((x248 Int)) Bool (= (mod x248 1461501637330902918203684832716283019655932542976) (x172 x248 1461501637330902918203684832716283019655932542975)))
(define-fun x220 ((x248 Int)) Bool (and (x606 x248 1461501637330902918203684832716283019655932542975) (x60 x248)))
(define-fun x500 ((x690 Int)) Int (x400 x690))
(define-fun x183 ((x690 Int)) Int (ite (= 128 x690) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x421 x690)))
(define-fun x712 ((x690 Int)) Int (ite (= 132 x690) x478 (x183 x690)))
(define-fun x268 ((x690 Int)) Int (ite (= x690 0) x368 (x134 x690)))
(define-fun x655 ((x690 Int)) Int (ite (= x690 128) x368 (x712 x690)))
(define-fun x315 ((x690 Int)) Int (ite (= x690 0) x854 (x134 x690)))
(define-fun x82 ((x690 Int)) Int (ite (= 128 x690) x854 (x712 x690)))
(define-fun x431 ((x690 Int)) Int (ite (= 0 x690) x359 (x134 x690)))
(define-fun x839 ((x690 Int)) Int (ite (= 128 x690) x359 (x712 x690)))
(define-fun x141 ((x690 Int)) Int (ite x479 (ite x750 (x712 x690) (x655 x690)) (ite x552 (ite x38 (x712 x690) (x82 x690)) (ite x255 (x712 x690) (x839 x690)))))
(define-fun x570 ((x690 Int)) Int (ite (= x229 x690) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x141 x690)))
(define-fun x65 ((x690 Int)) Int (ite (= x508 x690) x478 (x570 x690)))
(define-fun x482 ((x690 Int)) Int (ite (= x229 x690) x629 (x65 x690)))
(define-fun x143 ((x690 Int)) Int (ite (= x690 x229) x41 (x65 x690)))
(define-fun x832 ((x690 Int)) Int (ite (= x229 x690) x637 (x65 x690)))
(define-fun x611 ((x690 Int)) Int (ite x721 (ite x111 (x65 x690) (x482 x690)) (ite x806 (ite x89 (x65 x690) (x143 x690)) (ite x652 (x65 x690) (x832 x690)))))
(define-fun x310 ((x690 Int)) Int (ite (= x100 x690) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x611 x690)))
(define-fun x693 ((x690 Int)) Int (ite (= x830 x690) x478 (x310 x690)))
(define-fun x688 ((x690 Int)) Int (ite (= x252 x690) x304 (x693 x690)))
(define-fun x52 ((x690 Int)) Int (ite (= x532 x690) x553 (x688 x690)))
(define-fun x665 ((x690 Int)) Int (ite (= x690 x100) 1 (x52 x690)))
(define-fun x866 ((x690 Int)) Int (ite (= x100 x690) 1 (x52 x690)))
(define-fun x685 ((x690 Int)) Int (ite (= x100 x690) 1 (x52 x690)))
(define-fun x787 ((x690 Int)) Int (ite x376 (ite x870 (x52 x690) (x665 x690)) (ite x372 (ite x238 (x52 x690) (x866 x690)) (ite x68 (x52 x690) (x685 x690)))))
(define-fun x755 ((x690 Int)) Int (ite (= x690 x100) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x611 x690)))
(define-fun x625 ((x690 Int)) Int (ite (= x690 x346) x478 (x755 x690)))
(define-fun x702 ((x690 Int)) Int (ite (= x594 x690) x834 (x625 x690)))
(define-fun x852 ((x690 Int)) Int (ite (= x690 x72) x176 (x702 x690)))
(define-fun x20 ((x690 Int)) Int (ite (= x100 x690) 1 (x852 x690)))
(define-fun x163 ((x690 Int)) Int (ite (= x100 x690) 1 (x852 x690)))
(define-fun x216 ((x690 Int)) Int (ite (= x100 x690) 1 (x852 x690)))
(define-fun x411 ((x690 Int)) Int (ite x551 (ite x78 (x852 x690) (x20 x690)) (ite x378 (ite x843 (x852 x690) (x163 x690)) (ite x505 (x852 x690) (x216 x690)))))
(define-fun x495 ((x690 Int)) Int (ite (= x690 0) x629 (x300 x690)))
(define-fun x536 ((x690 Int)) Int (ite (= 0 x690) x41 (x300 x690)))
(define-fun x169 ((x690 Int)) Int (ite (= x690 0) x637 (x300 x690)))
(define-fun x698 ((x690 x531)) Int (ite (= x690 x735) x373 (x381 x690)))
(define-fun x737 ((x690 x531)) Int (ite (= x844 x690) x387 (x47 x690)))
(define-fun x179 ((x690 Int)) Int (ite (= 0 x690) 1 (x718 x690)))
(define-fun x649 ((x690 x531)) Int (ite (= x690 x251) x249 (x55 x690)))
(define-fun x600 ((x690 Int)) Int (ite (= x690 0) 1 (x718 x690)))
(define-fun x608 ((x690 x531)) Int (ite (= x690 x509) x427 (x47 x690)))
(define-fun x420 ((x690 Int)) Int (ite (= x690 0) 1 (x164 x690)))
(define-fun x59 ((x690 x531)) Int (ite (= x165 x690) x281 (x55 x690)))
(define-fun x203 ((x690 Int)) Int (ite (= 0 x690) 1 (x164 x690)))
(define-fun x673 ((x690 x531)) Int (ite (= x554 x690) x95 (x698 x690)))
(define-fun x855 ((x690 Int)) Int (ite (= x690 0) 1 (x718 x690)))
(define-fun x660 ((x690 x531)) Int (ite (= x690 x388) x23 (x698 x690)))
(define-fun x118 ((x690 Int)) Int (ite (= 0 x690) 1 (x164 x690)))
(define-fun x27 ((x248 Int)) Bool (=> (and (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x248)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x248)) (not (= 3524403367 x248)) (not (= x248 599290589)) (not (= x248 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x248 2835717307)) (not (= x248 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 2430363622 x248)) (not (= 1989257563 x248)) (not (= 1889567281 x248)) (not (= x248 404098525)) (not (= 117300739 x248)) (not (= 2757214935 x248)) (not (= x248 826074471)) (not (= 1461501637330902918203684832716283019655932542975 x248)) (not (= 1952775229 x248)) (not (= 1461501637330902918203684832716283019655932542976 x248)) (not (= x248 2569101039)) (not (= 234755713 x248)) (< 10000 x248) (not (= 157198259 x248))) (not ((_ is x70) (x708 x248)))))
(assert (x298 x322))
(assert (x298 x25))
(assert (x298 x155))
(assert (= (x154 (x708 x633)) x633))
(assert (x298 x681))
(assert (= (x708 2757214935) (x70 2757214935)))
(assert (x298 x231))
(assert (x298 x847))
(assert (x298 x604))
(assert (= x874 (and x714 x642)))
(assert (= (x154 (x708 x478)) x478))
(assert (= (and x736 (not x450)) x414))
(assert (= (x154 (x70 2757214935)) 2757214935))
(assert (= x314 (x154 (x708 x314))))
(assert (= (and (not x446) x205) x358))
(assert (= (and x28 x391) x396))
(assert (= x456 (x154 (x708 x456))))
(assert (x298 x753))
(assert (= (x708 2430363622) (x70 2430363622)))
(assert (x298 x836))
(assert (x298 x200))
(assert (x298 x812))
(assert (= (x708 1989257563) (x70 1989257563)))
(assert (=> (>= 10000 x121) (= (x708 x121) (x70 x121))))
(assert (x298 x802))
(assert (x298 x862))
(assert (x298 x757))
(assert (= (x70 2569101039) (x708 2569101039)))
(assert (= x171 (x154 (x708 x171))))
(assert (x298 x175))
(assert (= x105 (=> (and (= x309 x803) (= x399 x119)) x878)))
(assert (= (and x97 x57) x318))
(assert (= x550 (and (not x667) x289)))
(assert (x298 x274))
(assert (= x148 (and (not x133) x567)))
(assert (x298 x707))
(assert (= (=> (and (= x309 x864) (= x775 x119)) x878) x425))
(assert (x365 x790))
(assert (=> (>= 10000 x819) (= (x70 x819) (x708 x819))))
(assert (= (and (not x656) x846) x451))
(assert (x298 x610))
(assert (x298 x36))
(assert (= x305 (or x333 x317)))
(assert (x298 x535))
(assert (x298 x658))
(assert (x298 x553))
(assert (=> (>= 10000 x858) (= (x708 x858) (x70 x858))))
(assert (= x474 (=> (and (= x332 (ite x326 1 0)) (= x418 x332) (= x435 (= x418 0)) (= x741 x618) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x653)) (< x653 32)) (> x653 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x418 0) (= x362 x553) (= (x787 x100) x418) (not (= 0 x439)) (not (> x553 x390)) (= x841 (x616 (- x390 x553))) (= x816 x841) (= x326 (not x435))) x404)))
(assert (x298 x857))
(assert (= (and x273 x305) x627))
(assert (= (x154 (x708 x113)) x113))
(assert (x298 x424))
(assert (x298 x18))
(assert (x298 x201))
(assert (x298 x687))
(assert (= x750 (or (and (not x592) x664) (and x546 x3))))
(assert (x298 x338))
(assert (= x449 (=> (and (= x803 0) (= x738 x399)) x105)))
(assert (= (and x168 x312) x591))
(assert (= true x746))
(assert (x365 x668))
(assert (x298 x323))
(assert (x298 x178))
(assert (x298 x354))
(assert (x298 x95))
(assert (= x562 (=> (and (= x37 x58) (= x540 x375)) x462)))
(assert (= x846 (and x486 (not x590))))
(assert (= (and x145 x349) x99))
(assert (= x28 (and (not x645) x290)))
(assert (= x328 (and x572 x541)))
(assert (x298 x557))
(assert (x298 x820))
(assert (x298 x484))
(assert (x298 x537))
(assert (x298 x73))
(assert (= (x154 (x708 x357)) x357))
(assert (= (x70 234755713) (x708 234755713)))
(assert (x298 x176))
(assert (= (and x57 (not x97)) x81))
(assert (x298 x41))
(assert (=> (>= 10000 x565) (= (x70 x565) (x708 x565))))
(assert (x27 x819))
(assert (= x61 (or x806 x383 x721)))
(assert (x27 x557))
(assert (x27 x171))
(assert (x298 x622))
(assert (=> (<= x557 10000) (= (x70 x557) (x708 x557))))
(assert (x298 x756))
(assert (x298 x629))
(assert (= (and x219 x646) x477))
(assert (= x843 (or (and x83 x99) (and x671 x672) (and x243 (not x297)) (and x324 x801) x138 (and x679 x647) x502 (and (not x382) x487) x640)))
(assert (x298 x186))
(assert (x298 x98))
(assert (= (and x764 (not x453)) x692))
(assert (x298 x585))
(assert (= x325 (and x410 (not x788))))
(assert (x298 x826))
(assert (= x228 (=> (and (= x579 x798) (= 0 x585)) x469)))
(assert (x298 x101))
(assert (x298 x422))
(assert (x27 x581))
(assert (x298 x770))
(assert (x298 x193))
(assert (x298 x635))
(assert (x298 x180))
(assert (x298 x232))
(assert (= (x70 1461501637330902918203684832716283019655932542975) (x708 1461501637330902918203684832716283019655932542975)))
(assert (= x736 (and x475 (not x448))))
(assert (x298 x212))
(assert (= (and x656 x846) x588))
(assert (x298 x343))
(assert (x298 x384))
(assert (= (x708 599290589) (x70 599290589)))
(assert (x298 x72))
(assert (x298 x357))
(assert (x298 x670))
(assert (= (x708 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x70 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (= (and x361 x724) x107))
(assert (x298 x209))
(assert (x298 x883))
(assert (x298 x241))
(assert (x298 x327))
(assert (x298 x566))
(assert (x298 x751))
(assert (= 1989257563 (x154 (x70 1989257563))))
(assert (x27 x599))
(assert (x298 x132))
(assert (= x503 (and x746 (not x528))))
(assert (x298 x226))
(assert (= x289 (and (not x94) x454)))
(assert (x298 x628))
(assert (x298 x90))
(assert (= 2430363622 (x154 (x70 2430363622))))
(assert (x298 x259))
(assert (x298 x375))
(assert (x298 x480))
(assert (x298 x46))
(assert (x298 x539))
(assert (= x303 (x154 (x708 x303))))
(assert (x298 x633))
(assert (=> (>= 10000 x581) (= (x70 x581) (x708 x581))))
(assert (x298 x564))
(assert (= (and x450 x736) x397))
(assert (= (and x872 x409) x286))
(assert (x298 x720))
(assert (x298 x498))
(assert (x298 x74))
(assert (x298 x86))
(assert (x298 x579))
(assert (= (and (not x348) x414) x57))
(assert (x298 x864))
(assert (x27 x270))
(assert (x298 x1))
(assert (x298 x578))
(assert (x27 x848))
(assert (x298 x360))
(assert (= (and x67 x325) x208))
(assert (= x748 (and x550 (not x233))))
(assert (= x605 (and x151 (not x556))))
(assert (x298 x281))
(assert (x298 x114))
(assert (x298 x249))
(assert (x298 x432))
(assert (= (or (and (not x247) x53) (and x515 x426)) x255))
(assert (x298 x728))
(assert (= x607 (and (not x301) x709)))
(assert (x298 x276))
(assert (x298 x854))
(assert (x298 x461))
(assert (= (and x151 x556) x426))
(assert (x298 x245))
(assert (x298 x5))
(assert (x298 x135))
(assert (x298 x830))
(assert (= (or x258 x750) x479))
(assert (x298 x637))
(assert (x298 x115))
(assert (x298 x662))
(assert (= x440 (and x754 (not x45))))
(assert (= x558 (and x195 x762)))
(assert (x298 x387))
(assert (not x782))
(assert (x298 x504))
(assert (= (x708 157198259) (x70 157198259)))
(assert (= x819 (x154 (x708 x819))))
(assert (= x168 (and x321 (not x873))))
(assert (x298 x130))
(assert (= x223 (and x767 (not x845))))
(assert (= (x154 (x708 x599)) x599))
(assert (x298 x586))
(assert (= x664 (and x3 (not x546))))
(assert (= x615 (and (not x761) x518)))
(assert (x298 x816))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x154 (x70 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x298 x313))
(assert (= x863 (=> (and (= x50 x46) (= x862 x385)) x218)))
(assert (= (or x238 x265) x372))
(assert (x298 x464))
(assert (x298 x582))
(assert (x298 x700))
(assert (x298 x668))
(assert (= x502 (and x697 x525)))
(assert (x298 x85))
(assert (= (and x440 x490) x22))
(assert (x298 x279))
(assert (x298 x159))
(assert (x298 x594))
(assert (= x764 (and x189 (not x442))))
(assert (x298 x190))
(assert (x298 x369))
(assert (x298 x352))
(assert (x298 x43))
(assert (x298 x340))
(assert (= (x154 (x708 x565)) x565))
(assert (x298 x524))
(assert (x298 x429))
(assert (= x752 (and x192 x380)))
(assert (= x569 (=> (and (= x110 (= x439 0)) (or x110 (not x110))) x474)))
(assert (= (and x61 (not x240)) x829))
(assert (x298 x856))
(assert (x298 x270))
(assert (x365 x757))
(assert (x298 x650))
(assert (x298 x715))
(assert (= x443 (and x804 (not x499))))
(assert (x298 x264))
(assert (= x413 (and x386 x337)))
(assert (= (and (not x572) x541) x457))
(assert (x298 x694))
(assert (x298 x161))
(assert (x298 x778))
(assert (x298 x666))
(assert (x298 x786))
(assert (x298 x206))
(assert (x298 x526))
(assert (= x409 (and (not x881) x96)))
(assert (= x583 (or x187 x493)))
(assert (= (=> (and (= x862 0) (= x46 x132)) x863) x485))
(assert (x27 x113))
(assert (x298 x371))
(assert (= (and x146 x792) x447))
(assert (x298 x544))
(assert (x298 x230))
(assert (= x299 (=> (and (= x828 0) (= x209 x579)) x196)))
(assert (=> (>= 10000 x633) (= (x708 x633) (x70 x633))))
(assert (= x201 (x154 (x708 x201))))
(assert (x298 x799))
(assert (= (x70 117300739) (x708 117300739)))
(assert (x298 x416))
(assert (x298 x614))
(assert (x298 x468))
(assert (x298 x157))
(assert (= x242 (=> (and (= x753 x58) (= x540 x166)) x462)))
(assert (x298 x630))
(assert (= x747 (=> (and (= x50 x578) (= x385 x193)) x218)))
(assert (x298 x885))
(assert (x298 x634))
(assert (x298 x66))
(assert (x298 x471))
(assert (x298 x329))
(assert (x298 x841))
(assert (x298 x320))
(assert (= x767 (and x147 (not x771))))
(assert (x298 x342))
(assert (= (and x99 (not x83)) x487))
(assert (x298 x790))
(assert (= (=> (and (= 0 x753) (= x166 x723)) x242) x267))
(assert (= x710 (=> (and (= x579 x120) (= x650 0)) x545)))
(assert (= x505 (or x627 x266 (and x222 (not x835)) x538 x436 x21 (and (not x492) x441) x396 x199 x140 (and x739 x523) x64)))
(assert (= x571 (=> (and (= x864 0) (= x775 x738)) x425)))
(assert (x298 x191))
(assert (x298 x439))
(assert (x298 x871))
(assert (x298 x87))
(assert (x298 x473))
(assert (x298 x7))
(assert (= (and x829 x519) x804))
(assert (x298 x296))
(assert (x298 x514))
(assert (= (and (not x525) x697) x672))
(assert (x298 x800))
(assert (= (or (and (not x110) x534) x795) x493))
(assert (x298 x32))
(assert (= (or (and x814 (not x769)) x328 x405 x827 x682 x318 (and x150 x549) (and (not x805) x116) x619 x295 x397 x173) x68))
(assert (=> (<= x227 10000) (= (x708 x227) (x70 x227))))
(assert (= (and (not x170) x692) x518))
(assert (x298 x796))
(assert (x298 x596))
(assert (x298 x547))
(assert (=> (>= 10000 x848) (= (x70 x848) (x708 x848))))
(assert (= (and x240 x61) x452))
(assert (x298 x77))
(assert (= (=> (and (= 0 x101) (= x132 x636)) x601) x731))
(assert (= (x154 (x70 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (x298 x346))
(assert (x298 x181))
(assert (= (x154 (x70 3524403367)) 3524403367))
(assert (x392 x757))
(assert (= (or x286 x38) x552))
(assert (x298 x136))
(assert (= (x70 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x708 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x298 x227))
(assert (x298 x763))
(assert (= (and (not x312) x168) x470))
(assert (= x410 (and x452 x465)))
(assert (= x227 (x154 (x708 x227))))
(assert (x27 x633))
(assert (x298 x356))
(assert (x27 x227))
(assert (x298 x663))
(assert (= (and (not x519) x829) x145))
(assert (= x138 (and x745 x336)))
(assert (= (=> (and (= 0 x37) (= x723 x375)) x562) x12))
(assert (x298 x478))
(assert (= (x154 (x708 x857)) x857))
(assert (x298 x294))
(assert (x298 x695))
(assert (= x436 (and x764 x453)))
(assert (x298 x459))
(assert (x27 x858))
(assert (x27 x756))
(assert (x298 x156))
(assert (=> (>= 10000 x113) (= (x70 x113) (x708 x113))))
(assert (= x345 (x154 (x708 x345))))
(assert (x298 x332))
(assert (= (or x8 x479 x552) x716))
(assert (x298 x69))
(assert (x298 x174))
(assert (= (and x53 x247) x577))
(assert (= x173 (and x580 x223)))
(assert (=> (<= x478 10000) (= (x70 x478) (x708 x478))))
(assert (x298 x875))
(assert (x298 x701))
(assert (x298 x303))
(assert (x298 x565))
(assert (x298 x620))
(assert (x298 x472))
(assert (x298 x765))
(assert (= (and x845 x767) x405))
(assert (x298 x561))
(assert (x298 x213))
(assert (x298 x819))
(assert (=> (<= x756 10000) (= (x708 x756) (x70 x756))))
(assert (x298 x123))
(assert (= x602 (=> (and (= x630 x723) (= 0 x535)) x879)))
(assert (=> (>= 10000 x345) (= (x70 x345) (x708 x345))))
(assert (= (and x729 x148) x195))
(assert (= x878 (=> (and (= x327 (x63 (+ 32 x508))) (= x508 (x63 (+ 4 x229))) (= (x63 (+ x416 128)) x229) (<= x848 1461501637330902918203684832716283019655932542975) (not (= x309 0)) (<= 0 x848) (= x757 (x63 (+ 31 x119))) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119)) (< x119 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119))) (> 1461501637330902918203684832716283019655932542976 x848) (= (x172 115792089237316195423570985008687907853269984665640564039457584007913129639904 x757) x416) (not (= 0 x231)) (= (x141 128) x741) (= x522 (= x113 x848)) (= x768 (x616 (- x327 x229))) (= x231 (x126 (x708 x848)))) (and (=> (and x522 (and (= x707 (x126 (x708 x113))) (not (> 826074471 x34)) (= x401 x768) (= x408 (x616 (- x401 4))) (= x478 x581) (= x401 36) (= x56 (or (and (> 32 x408) (= (<= x408 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x408))) (not (< x401 4)) (> x707 0) (= x91 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= 1889567281 x34) (not (= 826074471 x34)))) (and (=> x56 x403) (=> (and (and (= x581 x156) (= x394 (= x581 x478))) (not x56)) (and (=> (not x394) x403) (=> (and (and (= (x47 x727) x629) (= (x51 (x708 x581) (x70 1) 0) x727) (= x578 32) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x629) (<= 0 x629) (= x193 1)) x394) x747))))) (=> (and (not x522) (= x590 (= x848 x314))) (and (=> (and (and (and x656 (and (= x177 1889567281) (= x576 x768) (> x178 0) (= (or (> x582 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x582) true) (< x582 32))) x108) (not (< x576 4)) (= x178 (x126 (x708 x478))) (not (> 1889567281 x177)) (= x340 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x576 36) (= (x616 (- x576 4)) x582) (< x177 2569101039) (= x478 x204))) (= (= x848 x478) x656)) (not x590)) (and (=> (and (not x108) (and (= (= x478 x204) x144) (= x471 x204))) (and (=> (and x144 (and (= x42 (x51 (x708 x204) (x70 0) 0)) (= (x381 x42) x637) (<= x637 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x101 1) (>= x637 0) (= 32 x636))) x601) (=> (not x144) x731))) (=> x108 x731))) (=> (and (and (not (> 4 x840)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x784) (= x728 1889567281) (= x478 x857) (= x705 (x616 (- x840 4))) (= x188 (x126 (x708 x314))) (< 0 x188) (= x840 x768) (= (or (and (= (<= x705 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x705)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x705)) x17) (not (< x728 826074471)) (= 36 x840) (not (= x728 826074471))) x590) (and (=> (and (and (= x857 x799) (= (= x478 x857) x714)) (not x17)) (and (=> (not x714) x485) (=> (and (and (= x717 (x51 (x708 x857) (x70 1) 0)) (= (x55 x717) x41) (<= 0 x41) (= x46 32) (= 1 x862) (<= x41 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x714) x863))) (=> x17 x485)))))))))
(assert (x298 x304))
(assert (x298 x278))
(assert (x298 x160))
(assert (x298 x568))
(assert (x298 x678))
(assert (x298 x428))
(assert (= x239 (=> (= x273 (= 0 x858)) (and (=> x273 x267) (=> (and (= x442 (= 0 x456)) (not x273)) (and (=> x442 x267) (=> (and (not x442) (and (<= x472 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x698 x16) x472) (<= 0 x472) (= x453 (> x694 x472)) (= (x51 (x708 x858) (x70 0) 0) x16))) (and (=> (and (= (> x694 x472) x170) (not x453)) (and (=> (and (and (<= 0 x202) (= (x660 x595) x202) (= x468 (x698 x388)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x202) (<= 0 x468) (= (x51 (x708 x858) (x70 0) 0) x388) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x468) (= x715 (x616 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x694))) (= x761 (> x202 x715)) (= x23 (x616 (- x472 x694))) (= (x51 (x708 x456) (x70 0) 0) x595)) (not x170)) (and (=> x761 x267) (=> (and (and (= 32 x166) (>= x808 0) (= (x63 (+ x694 x202)) x883) (<= x808 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x624) (= (x660 x595) x808) (= 1 x753)) (not x761)) x242))) (=> x170 x267))) (=> x453 x267)))))))))
(assert (= x147 (and (not x104) x559)))
(assert (x298 x686))
(assert (= x756 (x154 (x708 x756))))
(assert (x298 x661))
(assert (x298 x624))
(assert (x298 x623))
(assert (x298 x676))
(assert (x298 x760))
(assert (= (and x222 x835) x709))
(assert (=> (>= 10000 x857) (= (x708 x857) (x70 x857))))
(assert (= (and x290 x645) x140))
(assert (x298 x367))
(assert (x298 x166))
(assert (= x321 (and x558 (not x573))))
(assert (= (or x316 x372 x376) x534))
(assert (x298 x741))
(assert (= (x154 (x708 x858)) x858))
(assert (= (x154 (x70 599290589)) 599290589))
(assert (x298 x532))
(assert (x298 x120))
(assert (x298 x766))
(assert (x298 x793))
(assert (x220 x668))
(assert (x298 x444))
(assert (x298 x726))
(assert (x298 x34))
(assert (x298 x618))
(assert (x298 x603))
(assert (= (or x505 x615) x882))
(assert (x298 x418))
(assert (x298 x91))
(assert (x365 x700))
(assert (x298 x533))
(assert (= x199 (and x250 x351)))
(assert (=> (>= 10000 x456) (= (x70 x456) (x708 x456))))
(assert (= (and x716 x522) x517))
(assert (x298 x185))
(assert (x298 x198))
(assert (=> (<= x599 10000) (= (x708 x599) (x70 x599))))
(assert (x298 x62))
(assert (= x730 (and (not x56) x517)))
(assert (= x640 (and x275 x419)))
(assert (= (and x709 x301) x333))
(assert (x298 x188))
(assert (x298 x171))
(assert (= x659 (and x139 (not x344))))
(assert (= x584 (=> (and (= x514 x119) (= x136 x309)) x878)))
(assert (x27 x345))
(assert (x298 x483))
(assert (= x469 (=> (and (= x439 x585) (= x653 x798)) x569)))
(assert (x298 x6))
(assert (= x142 (and x590 x486)))
(assert (= (or x675 x652) x383))
(assert (x298 x235))
(assert (x298 x858))
(assert (= x266 (and x189 x442)))
(assert (x298 x599))
(assert (x298 x364))
(assert (x298 x257))
(assert (x298 x703))
(assert (x298 x723))
(assert (x298 x713))
(assert (x298 x840))
(assert (x298 x152))
(assert (x298 x204))
(assert (= 157198259 (x154 (x70 157198259))))
(assert (x298 x597))
(assert (= (x154 (x708 x204)) x204))
(assert (= x2 (and x398 (not x445))))
(assert (x298 x689))
(assert (x298 x458))
(assert (= (or (and x108 x588) (and x884 (not x144))) x652))
(assert (= (and x443 x501) x646))
(assert (= (or (and x17 x142) (and (not x714) x642)) x89))
(assert (x298 x722))
(assert (= (x70 826074471) (x708 826074471)))
(assert (= x677 (and x275 (not x419))))
(assert (x392 x790))
(assert (x298 x768))
(assert (x298 x860))
(assert (= (and x559 x104) x295))
(assert (= (and (not x683) x358) x497))
(assert (= x376 (or x748 x870)))
(assert (x298 x103))
(assert (x298 x215))
(assert (x298 x824))
(assert (= x337 (and x440 (not x490))))
(assert (x298 x385))
(assert (x298 x262))
(assert (x298 x621))
(assert (x220 x700))
(assert (x298 x401))
(assert (= (or x81 x521) x559))
(assert (= (and (not x773) x497) x192))
(assert (= x849 (and x805 x116)))
(assert (= x151 (and x503 (not x271))))
(assert (x298 x334))
(assert (= x601 (=> (and (= x385 x101) (= x50 x636)) x218)))
(assert (= x567 (and x293 x79)))
(assert (x298 x821))
(assert (= (x154 (x70 1889567281)) 1889567281))
(assert (= (or x577 x255) x8))
(assert (= x581 (x154 (x708 x581))))
(assert (x298 x399))
(assert (x298 x330))
(assert (x298 x374))
(assert (= (and (not x549) x150) x814))
(assert (x298 x350))
(assert (= (and x336 (not x745)) x697))
(assert (x298 x309))
(assert (= x285 (and x470 (not x117))))
(assert (= 234755713 (x154 (x70 234755713))))
(assert (x298 x202))
(assert (x298 x851))
(assert (x298 x783))
(assert (= (x154 (x70 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x298 x779))
(assert (= x815 (and (not x380) x192)))
(assert (x298 x868))
(assert (x298 x113))
(assert (x27 x456))
(assert (=> (<= x270 10000) (= (x70 x270) (x708 x270))))
(assert (= (x154 (x70 2569101039)) 2569101039))
(assert (x298 x184))
(assert (x298 x129))
(assert (x298 x408))
(assert (x298 x575))
(assert (x298 x287))
(assert (= (x70 1952775229) (x708 1952775229)))
(assert (x298 x50))
(assert (=> (<= x800 10000) (= (x70 x800) (x708 x800))))
(assert (x298 x825))
(assert (x298 x345))
(assert (x298 x808))
(assert (x298 x818))
(assert (x298 x811))
(assert (= (and x348 x414) x827))
(assert (x298 x393))
(assert (= (and (not x92) x285) x146))
(assert (= x486 (and (not x522) x716)))
(assert (x298 x794))
(assert (= x711 (and x809 x613)))
(assert (= x116 (and x814 x769)))
(assert (x298 x867))
(assert (x298 x390))
(assert (x298 x842))
(assert (x298 x513))
(assert (x298 x15))
(assert (= x38 (or (and (not x872) x409) (and x96 x881))))
(assert (x298 x177))
(assert (= x361 (or x551 x882 x378)))
(assert (= 1461501637330902918203684832716283019655932542975 (x154 (x70 1461501637330902918203684832716283019655932542975))))
(assert (= x454 (and (not x386) x337)))
(assert (x298 x211))
(assert (=> (<= x204 10000) (= (x708 x204) (x70 x204))))
(assert (x298 x119))
(assert (= (and x208 x283) x754))
(assert (x298 x798))
(assert (x298 x859))
(assert (x298 x244))
(assert (= (x708 3524403367) (x70 3524403367)))
(assert (x298 x347))
(assert (x298 x789))
(assert (= (and x664 x592) x258))
(assert (x298 x49))
(assert (x298 x75))
(assert (= x275 (and (not x679) x647)))
(assert (= 2835717307 (x154 (x70 2835717307))))
(assert (= (and x730 x394) x734))
(assert (x298 x437))
(assert (x298 x124))
(assert (x298 x807))
(assert (= (and x297 x243) x324))
(assert (x298 x456))
(assert (x27 x121))
(assert (x298 x680))
(assert (= (and x144 x884) x675))
(assert (= (and x233 x550) x785))
(assert (= x739 (and x139 x344)))
(assert (x298 x80))
(assert (= (or (and x361 (not x724)) x107) x187))
(assert (x298 x775))
(assert (= (x70 1461501637330902918203684832716283019655932542976) (x708 1461501637330902918203684832716283019655932542976)))
(assert (x298 x653))
(assert (x298 x368))
(assert (x298 x88))
(assert (= (or (and x289 x667) (and x754 x45) (and (not x283) x208) x22 (and x325 (not x67)) (and x454 x94) (and x788 x410) x785 x413) x870))
(assert (x298 x593))
(assert (= (and x271 x503) x96))
(assert (= (and x849 x10) x521))
(assert (x298 x272))
(assert (x298 x306))
(assert (x298 x379))
(assert (= x475 (and x849 (not x10))))
(assert (x298 x359))
(assert (x298 x481))
(assert (x298 x366))
(assert (= x725 (and x205 x446)))
(assert (= x53 (and x426 (not x515))))
(assert (x298 x828))
(assert (= x150 (and x445 x398)))
(assert (x298 x229))
(assert (x298 x733))
(assert (= (=> (= (= 0 x345) x104) (and (=> (and (= (= x557 0) x771) (not x104)) (and (=> x771 x710) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x491) (= x207 (x51 (x708 x345) (x70 0) 0)) (= (x698 x207) x491) (= (> x566 x491) x845) (>= x491 0)) (not x771)) (and (=> x845 x710) (=> (and (= (< x491 x566) x580) (not x845)) (and (=> x580 x710) (=> (and (and (= (x51 (x708 x345) (x70 0) 0) x554) (= x695 (x616 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x566))) (= (x673 x158) x129) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x609) (= x158 (x51 (x708 x557) (x70 0) 0)) (= x95 (x616 (- x491 x566))) (<= 0 x609) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x129) (= (x698 x554) x609) (= x572 (< x695 x129)) (<= 0 x129)) (not x580)) (and (=> x572 x710) (=> (and (and (= (x673 x158) x272) (= x650 1) (= (x63 (+ x566 x129)) x338) (<= 0 x272) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x272) (= 32 x120) (= x825 1)) (not x572)) x545))))))))) (=> x104 x710))) x772))
(assert (= x541 (and (not x580) x223)))
(assert (x298 x791))
(assert (x298 x803))
(assert (x298 x563))
(assert (= (x70 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x708 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x298 x225))
(assert (x298 x609))
(assert (= x111 (or (and x56 x517) (and x730 (not x394)))))
(assert (x298 x282))
(assert (x298 x252))
(assert (=> (<= x171 10000) (= (x70 x171) (x708 x171))))
(assert (x298 x817))
(assert (x298 x639))
(assert (= (or x677 x843) x378))
(assert (= (=> (and (= x630 x540) (= x535 x58)) x462) x879))
(assert (x298 x496))
(assert (x298 x44))
(assert (= x250 (and (not x391) x28)))
(assert (= x205 (and x809 (not x613))))
(assert (x298 x506))
(assert (x298 x100))
(assert (= (and (not x349) x145) x139))
(assert (= x79 (and x452 (not x465))))
(assert (= x317 (and x250 (not x351))))
(assert (= (=> (and (<= x294 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (or (and (< x50 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x50) true)) (> x50 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (> x644 x766)) (= x635 (x381 x735)) (= x100 (x63 (+ x661 x229))) (not (< x766 x644)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x686 x644)) (< 0 x294) (> 1461501637330902918203684832716283019655932542976 x800) (= x513 (x616 (- x294 x44))) (>= x294 0) (= (* x686 x644) x674) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x294) (= (x616 (- x294 x44)) x663) (<= x766 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x478 0)) (= x597 (div x510 x294)) (>= x766 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x635) (= x661 (x172 115792089237316195423570985008687907853269984665640564039457584007913129639904 x790)) (>= x800 0) (= x510 (* x853 x644)) (>= 1461501637330902918203684832716283019655932542975 x800) (not (< x294 x644)) (= (x172 1461501637330902918203684832716283019655932542975 x668) x530) (= (div x674 x294) x533) (>= x635 0) (= (x616 (- x766 x44)) x373) (= (x611 x229) x390) (= x735 (x51 (x708 x478) (x70 0) 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x853 x644)) (<= 0 x294) (not (= 0 x385)) (= (= x530 x800) x240) (= x790 (x63 (+ 31 x50))) (= x277 (x51 (x708 x478) (x70 0) 0)) (= x766 (x381 x277))) (and (=> (and (and (>= x800 0) (= (div x331 x719) x620) (= (= x113 x800) x519) (not (> x533 x686)) (<= x848 1461501637330902918203684832716283019655932542975) (= x783 (x616 (- x853 x597))) (= (x616 (- x212 x100)) x628) (= x33 x88) (= x719 (+ x33 x877)) (= x732 x848) (= x597 x412) (> 1461501637330902918203684832716283019655932542976 x800) (< x848 1461501637330902918203684832716283019655932542976) (= x331 (* x783 x533)) (<= x800 1461501637330902918203684832716283019655932542975) (= x72 (x63 (+ x594 32))) (= x346 (x63 (+ x100 4))) (> x719 0) (= x834 (x172 1461501637330902918203684832716283019655932542975 x700)) (= x88 (x616 (- x686 x533))) (= x176 (+ x48 x412)) (= x48 x620) (not (= x374 0)) (= x533 x877) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x88 x533)) (not (> x597 x853)) (= (x63 (+ 32 x346)) x594) (= (x126 (x708 x800)) x374) (<= 0 x848) (< (* x783 x533) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x63 (+ 96 x346)) x212) (= (x172 1461501637330902918203684832716283019655932542975 x668) x732) (< (+ x620 x597) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not x240)) (and (=> (and (= (= x800 x314) x349) (not x519)) (and (=> (and (and (not (> 4 x791)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x614) (and (> 96 x614) (= (<= x614 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x83) (not (= x466 404098525)) (= 599290589 x466) (= x791 x628) (= x478 x201) (< 0 x90) (= x7 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= 117300739 x466)) (= x614 (x616 (- x791 4))) (= x791 100) (> 826074471 x466) (= x565 x834) (not (= 157198259 x466)) (= (x126 (x708 x314)) x90) (= x176 x537)) x349) (and (=> x83 x602) (=> (and (not x83) (and (= x201 x631) (= (= x478 x201) x382))) (and (=> (and x382 (and (= x565 x837) (= (= x834 x565) x297))) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x87) (<= 0 x87) (= (x51 (x708 x201) (x70 1) 0) x612) (= x801 (< x87 x176)) (= x87 (x55 x612)) (= x537 x461)) x297) (and (=> (and (not x801) (= x745 (> x537 x87))) (and (=> x745 x602) (=> (and (not x745) (and (= (x51 (x708 x201) (x70 1) 0) x165) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x174) (= x641 (x51 (x708 x565) (x70 1) 0)) (= x262 (x616 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x537))) (<= 0 x174) (= (x616 (- x87 x537)) x281) (= (> x174 x262) x525) (= x174 (x59 x641)))) (and (=> x525 x602) (=> (and (and (= x671 (< x125 x174)) (= x125 (x63 (+ x174 x537)))) (not x525)) (and (=> x671 x602) (=> (and (not x671) (and (= x743 (x51 (x708 x201) (x70 2) 0)) (= x330 (x93 x307)) (= (x51 (x708 x478) x743 0) x307) (<= x330 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x537 x330) x679) (<= 0 x330))) (and (=> x679 x602) (=> (and (not x679) (= (> x537 x330) x419)) (and (=> (and (and (= (x616 (- x330 x537)) x366) (= 1 x535) (= x630 32)) (not x419)) x879) (=> x419 x602))))))))))) (=> x801 x602))) (=> (not x297) x602))) (=> (not x382) x602))))) (=> (and (not x349) (and (= x344 (= x800 x478)) (and (and (< x6 1889567281) (> 826074471 x6) (= x40 x628) (> x191 0) (not (= 157198259 x6)) (not (< x40 4)) (= x694 x176) (= x478 x858) (= x40 100) (= x206 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= 234755713 x6)) (= 599290589 x6) (= x834 x456) (not (= x6 404098525)) (= x352 (x616 (- x40 4))) (= (x126 (x708 x478)) x191) (= x523 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x352) (and (> 96 x352) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x352)))))) x344))) (and (=> x523 x267) (=> (and (not x523) (and (= x49 x858) (= x492 (= x858 x478)))) (and (=> (not x492) x267) (=> (and (and (= x456 x722) (= x835 (= x834 x456))) x492) (and (=> (not x835) x267) (=> (and (and (= x694 x824) (<= x483 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x30 (x51 (x708 x858) (x70 1) 0)) (= x483 (x246 x39)) (>= x483 0) (= (x51 (x708 x478) x30 0) x39) (= x301 (= x483 115792089237316195423570985008687907853269984665640564039457584007913129639935))) x835) (and (=> x301 x239) (=> (and (= x643 (< x483 x694)) (not x301)) (and (=> x643 x267) (=> (and (not x643) (= (> x694 x483) x645)) (and (=> x645 x267) (=> (and (not x645) (and (= x680 (x616 (- x483 x694))) (= x391 (= 0 x858)))) (and (=> (and (= x351 (= x478 0)) (not x391)) (and (=> x351 x267) (=> (not x351) x239))) (=> x391 x267))))))))))))))))) (=> (and (and (= x152 x176) (not (< x817 4)) (= x524 599290589) (= x478 x756) (< x524 826074471) (= (or (and (> 96 x367) (= true (<= x367 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x367 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x499) (not (= 157198259 x524)) (= (x616 (- x817 4)) x367) (= x817 x628) (not (= x524 117300739)) (= x313 (x126 (x708 x113))) (not (= 404098525 x524)) (= x303 x834) (< 0 x313) (= x817 100) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x794)) x519) (and (=> x499 x12) (=> (and (and (= x756 x720) (= (= x478 x756) x501)) (not x499)) (and (=> (not x501) x12) (=> (and (and (= x230 x303) (= x219 (= x303 x834))) x501) (and (=> (not x219) x12) (=> (and (and (= (< x701 x176) x389) (= x152 x459) (= (x47 x749) x701) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x701) (= (x51 (x708 x756) (x70 1) 0) x749) (<= 0 x701)) x219) (and (=> (and (not x389) (= x613 (< x701 x152))) (and (=> x613 x12) (=> (and (and (= (< x458 x393) x446) (= (x608 x880) x393) (= x458 (x616 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x152))) (= x427 (x616 (- x701 x152))) (<= 0 x393) (= (x51 (x708 x756) (x70 1) 0) x509) (= (x51 (x708 x303) (x70 1) 0) x880) (<= x393 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not x613)) (and (=> (and (not x446) (and (= x683 (> x393 x322)) (= x322 (x63 (+ x152 x393))))) (and (=> (and (not x683) (and (<= x542 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x542) (= (x51 (x708 x478) x587 0) x280) (= x542 (x780 x280)) (= (x51 (x708 x756) (x70 2) 0) x587) (= (> x152 x542) x773))) (and (=> x773 x12) (=> (and (not x773) (= x380 (> x152 x542))) (and (=> x380 x12) (=> (and (not x380) (and (= x823 (x616 (- x542 x152))) (= 32 x375) (= 1 x37))) x562))))) (=> x683 x12))) (=> x446 x12))))) (=> x389 x12))))))))))) (=> (and (and (= (x172 1461501637330902918203684832716283019655932542975 x700) x304) (= (= x113 x848) x465) (> x867 0) (>= 1461501637330902918203684832716283019655932542975 x848) (= x217 x597) (= x527 x533) (= (+ x217 x417) x867) (= x186 x489) (not (> x597 x853)) (= (x63 (+ x830 96)) x789) (= (x616 (- x789 x100)) x363) (= x778 x417) (not (< x686 x533)) (= x433 (* x259 x597)) (= x778 (x616 (- x853 x597))) (= x186 (div x433 x867)) (= (x63 (+ 4 x100)) x830) (= x621 (x126 (x708 x848))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x597 x259)) (not (= 0 x621)) (= x252 (x63 (+ 32 x830))) (= (+ x489 x527) x553) (= x259 (x616 (- x686 x533))) (<= 0 x848) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x533 x186)) (< (+ x597 x778) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x63 (+ 32 x252)) x532) (> 1461501637330902918203684832716283019655932542976 x848)) x240) (and (=> (and (and (= x354 x553) (> 826074471 x818) (not (= 157198259 x818)) (= 100 x856) (= 599290589 x818) (not (< x856 4)) (> x586 0) (= x856 x363) (= (x616 (- x856 4)) x428) (= x304 x227) (= (x126 (x708 x113)) x586) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x213) (not (= x818 117300739)) (= x270 x478) (not (= 404098525 x818)) (= x788 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x428) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x428) true) (< x428 96))))) x465) (and (=> (and (and (= (= x270 x478) x67) (= x282 x270)) (not x788)) (and (=> (and (and (= (= x227 x304) x283) (= x227 x564)) x67) (and (=> (not x283) x299) (=> (and x283 (and (= x4 x354) (>= x237 0) (<= x237 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x553 x237) x45) (= (x51 (x708 x270) (x70 1) 0) x261) (= (x47 x261) x237))) (and (=> x45 x299) (=> (and (not x45) (= x490 (< x237 x354))) (and (=> x490 x299) (=> (and (and (= (x51 (x708 x227) (x70 1) 0) x632) (= (x616 (- x237 x354)) x387) (<= 0 x339) (<= x339 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x51 (x708 x270) (x70 1) 0) x844) (= (x737 x632) x339) (= x770 (x616 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x354))) (= x386 (< x770 x339))) (not x490)) (and (=> (and (not x386) (and (= (x63 (+ x354 x339)) x539) (= (> x339 x539) x94))) (and (=> x94 x299) (=> (and (and (= (x51 (x708 x270) (x70 2) 0) x648) (= (x51 (x708 x478) x648 0) x657) (<= x512 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x354 x512) x667) (>= x512 0) (= x512 (x780 x657))) (not x94)) (and (=> x667 x299) (=> (and (= (< x512 x354) x233) (not x667)) (and (=> x233 x299) (=> (and (and (= x209 32) (= (x616 (- x512 x354)) x504) (= 1 x828)) (not x233)) x196))))))) (=> x386 x299))))))))) (=> (not x67) x299))) (=> x788 x299))) (=> (and (= (= x848 x314) x293) (not x465)) (and (=> (and (not x293) (and (= x445 (= x848 x478)) (and (and (= x407 (x126 (x708 x478))) (= x363 x198) (not (= 234755713 x480)) (= x304 x557) (= x566 x553) (> x407 0) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x438) (and (> 96 x438) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x438)))) x549) (= (x616 (- x198 4)) x438) (not (= x480 404098525)) (not (< x198 4)) (= x198 100) (< x480 826074471) (< x480 1889567281) (= x161 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x345 x478) (= 599290589 x480) (not (= x480 157198259))) x445))) (and (=> (and (not x549) (and (= (= x345 x478) x769) (= x345 x638))) (and (=> (not x769) x710) (=> (and (and (= (= x304 x557) x805) (= x557 x437)) x769) (and (=> (and x805 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x287) (= x263 (x51 (x708 x478) x434 0)) (= x566 x432) (= x434 (x51 (x708 x345) (x70 1) 0)) (= x287 (x246 x263)) (<= 0 x287) (= x10 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x287)))) (and (=> (and (not x10) (= (< x287 x566) x448)) (and (=> (and (= (> x566 x287) x450) (not x448)) (and (=> (and (and (= x826 (x616 (- x287 x566))) (= (= 0 x345) x348)) (not x450)) (and (=> (and (not x348) (= x97 (= x478 0))) (and (=> (not x97) x772) (=> x97 x710))) (=> x348 x710))) (=> x450 x710))) (=> x448 x710))) (=> x10 x772))) (=> (not x805) x710))))) (=> x549 x710))) (=> (and (and (= x633 x304) (= x568 x553) (= (x616 (- x1 4)) x369) (not (= x865 157198259)) (not (> 4 x1)) (= x133 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x369) (and (> 96 x369) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x369))))) (not (= 117300739 x865)) (< 0 x5) (= x678 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x478 x599) (< x865 826074471) (= 100 x1) (not (= 404098525 x865)) (= x1 x363) (= x865 599290589) (= x5 (x126 (x708 x314)))) x293) (and (=> (and (and (= (= x599 x478) x729) (= x599 x356)) (not x133)) (and (=> (and x729 (and (= x633 x670) (= x762 (= x304 x633)))) (and (=> (not x762) x228) (=> (and x762 (and (= x25 x568) (= x573 (< x836 x553)) (= x836 (x55 x476)) (= (x51 (x708 x599) (x70 1) 0) x476) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x836) (>= x836 0))) (and (=> x573 x228) (=> (and (not x573) (= (< x836 x568) x873)) (and (=> (and (and (<= 0 x159) (= (x51 (x708 x633) (x70 1) 0) x253) (= (x616 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x568)) x15) (= (x51 (x708 x599) (x70 1) 0) x251) (= (x616 (- x836 x568)) x249) (= (> x159 x15) x312) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x159) (= x159 (x649 x253))) (not x873)) (and (=> x312 x228) (=> (and (not x312) (and (= x200 (x63 (+ x159 x568))) (= x117 (< x200 x159)))) (and (=> x117 x228) (=> (and (not x117) (and (= (x51 (x708 x599) (x70 2) 0) x781) (<= x288 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x568 x288) x92) (= x194 (x51 (x708 x478) x781 0)) (= x288 (x93 x194)) (>= x288 0))) (and (=> x92 x228) (=> (and (not x92) (= x792 (< x288 x568))) (and (=> x792 x228) (=> (and (not x792) (and (= 1 x585) (= x43 (x616 (- x288 x568))) (= 32 x798))) x469))))))))) (=> x873 x228))))))) (=> (not x729) x228))) (=> x133 x228))))))))) x218))
(assert (x298 x491))
(assert (= (and x79 (not x293)) x398))
(assert (x298 x834))
(assert (= 826074471 (x154 (x70 826074471))))
(assert (x298 x876))
(assert (= (x70 1889567281) (x708 1889567281)))
(assert (x298 x131))
(assert (x298 x427))
(assert (=> (>= 10000 x201) (= (x708 x201) (x70 x201))))
(assert (x298 x732))
(assert (x298 x530))
(assert (= x545 (=> (and (= x650 x439) (= x653 x120)) x569)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x154 (x70 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x298 x76))
(assert (x298 x869))
(assert (x298 x784))
(assert (x298 x706))
(assert (= (and (not x273) x305) x189))
(assert (x365 1461501637330902918203684832716283019655932542975))
(assert (x298 x507))
(assert (= (and x146 (not x792)) x265))
(assert (= 117300739 (x154 (x70 117300739))))
(assert (x298 x555))
(assert (= (and x147 x771) x682))
(assert (= x238 (or x831 x447 (and x285 x92) (and x117 x470) (and x558 x573) (and x148 (not x729)) (and x133 x567) x591 (and x195 (not x762)))))
(assert (x298 x576))
(assert (x298 x415))
(assert (= x809 (and (not x389) x477)))
(assert (x298 x314))
(assert (x298 x508))
(assert (=> (<= x314 10000) (= (x708 x314) (x70 x314))))
(assert (= (or x111 x734) x721))
(assert (x298 x636))
(assert (= x884 (and (not x108) x588)))
(assert (x298 x822))
(assert (= x222 (and x492 x441)))
(assert (= (x70 404098525) (x708 404098525)))
(assert (= (and x607 (not x643)) x290))
(assert (x298 x106))
(assert (x298 x699))
(assert (x298 x121))
(assert (x298 x24))
(assert (= (=> (and (> x793 0) (= x821 x793) (= x167 (= x793 0)) (= x816 x390) (= x26 (not x167)) (= x109 x618) (= x793 (x411 x100)) (= x176 x362) (= x821 (ite x26 1 0)) (not (> x176 x741)) (not (= x58 0)) (= x109 (x616 (- x741 x176))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x540) (and (< x540 32) (= (<= x540 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))))) x404) x850))
(assert (= x64 (and x761 x518)))
(assert (x298 x407))
(assert (x27 x201))
(assert (x298 x543))
(assert (x298 x406))
(assert (= x782 (=> (and (and (<= 0 x848) (= x634 (x126 (x708 x478))) (>= x820 0) (not (= x314 x478)) (< 0 x634) (not (= x113 x478)) (<= 0 x329) (= false x182) (< 0 x113) (= x232 3) (= (x162 (x708 x314)) x820) (= x329 (x162 (x708 x478))) (= x681 x276) (= false x669) (= (< 0 (x126 (x708 x314))) x548) (>= 1461501637330902918203684832716283019655932542975 x478) (<= x848 1461501637330902918203684832716283019655932542975) (= x342 x875) (>= x853 0) (= 1989257563 x703) (= x516 false) (= x498 x853) (= x210 false) (= x311 (> (x126 (x708 x113)) 0)) (not (> 1889567281 x555)) x9 (<= 0 x276) (> x478 0) x548 (<= x800 1461501637330902918203684832716283019655932542975) (<= x314 1461501637330902918203684832716283019655932542975) (<= x875 1461501637330902918203684832716283019655932542975) (> x314 0) (not (= x314 x113)) (>= x875 0) (= x9 (> (x126 (x708 x478)) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x853) (not (> 2569101039 x555)) x311 (<= x113 1461501637330902918203684832716283019655932542975) (<= 0 x429) (>= x800 0) (= x555 2569101039) (= x429 (x162 (x708 x113))) (>= 1461501637330902918203684832716283019655932542975 x276)) (and (and (= x291 1889567281) (<= x257 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x257 0) (< 0 x765) (= x430 x257) (= (x51 (x708 x478) (x70 1) 0) x759) (= (x55 x759) x257) (= x498 x751) (<= x478 1461501637330902918203684832716283019655932542975) (not (< x291 826074471)) (= x765 (x126 (x708 x314))) (not (= x291 826074471))) (and (and (and (= x422 x235) (= x617 x341) (<= x617 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x86 826074471)) (<= 0 x617) (= x35 (x51 (x708 x478) (x70 1) 0)) (= (x47 x35) x617) (> x869 0) (>= 1461501637330902918203684832716283019655932542975 x478) (= (x126 (x708 x113)) x869) (= x86 1889567281) (not (> 826074471 x86))) (and (and (= x181 (x126 (x708 x478))) (= x343 x662) (= x563 x75) x598 (= x320 x464) (< x494 826074471) (> x181 0) (not (= x494 234755713)) (<= 0 x294) (= x494 404098525) (= x180 x713) (= (<= x422 x744) x455) (= x225 x350) (= x654 x342) (= x779 0) (= (and x122 x455) x598) (= x871 x796) (not (= x494 157198259)) (= x294 x760) (<= x294 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x115 x24) (> 1889567281 x494) (= x681 x687) (= x341 x744) (= 1000 x62)) (and (and (and (not (< x402 1889567281)) x488 (= x786 (x126 (x708 x478))) (= x691 (= x384 1000)) (> x786 0) (= (x381 x197) x842) (= 1889567281 x402) (<= x842 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x402 2569101039) (= (or x691 x71) x488) (= x241 0) (= (x51 (x70 0) (x70 0) 0) x197) (= 1000 x733) (>= x842 0) (= x842 x473) (= x236 x384)) (and (and (< x157 2569101039) (= x124 x473) (<= 0 x74) (= x699 x74) (>= 1461501637330902918203684832716283019655932542975 x819) (= (x381 x149) x74) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x74) (= x157 1889567281) (not (> 1889567281 x157)) (= (x51 (x708 x819) (x70 0) 0) x149) (> x626 0) (= x819 x654) (= x626 (x126 (x708 x478)))) (and (and (and (and (and (= 404098525 x371) (> x123 0) (= x444 x294) x758 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x294) (= (= x302 x131) x758) (= (x126 (x708 x478)) x123) (not (= 234755713 x371)) (>= x294 0) (= x689 x302) (< x371 826074471) (not (= 157198259 x371)) (< x371 1889567281)) (and (and (and (not (= x364 234755713)) (> 826074471 x364) (< 0 x885) (not (= x364 157198259)) (<= 0 x294) (= 0 x813) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x294) (= 404098525 x364) (= x885 (x126 (x708 x478))) (= x294 x561) (= (= x73 0) x370) (= x696 (= x13 x370)) (> 1889567281 x364) (= x73 x838)) (and (and (= x740 (= x763 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x686) (>= x686 0) (= x211 0) (= x763 x561) (= x686 x543) (> x807 0) (> 2569101039 x66) (= x66 2430363622) (not (< x66 1889567281)) (= (x126 (x708 x478)) x807) (not (= x66 1889567281)) (not (= x66 1952775229)) (not (= x66 1989257563))) (and (= x700 x860) (= x810 (= x29 x740)) (>= x853 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x686) (<= x128 1461501637330902918203684832716283019655932542975) (<= 0 x76) (= x700 x610) (> x264 0) (> 1461501637330902918203684832716283019655932542976 x800) (not (= 1889567281 x484)) (= x355 1) (= x406 x543) (= x668 x812) (>= 1461501637330902918203684832716283019655932542975 x76) (= x484 1989257563) (not (> 4 x868)) (>= x355 0) (= 0 x36) (< x484 2569101039) (not (= 0 x69)) (>= 1461501637330902918203684832716283019655932542975 x800) (and (> x868 99) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x868) true)) (= (= x800 x113) x528) (= (x616 (- x868 4)) x575) (<= 0 x800) (>= x686 0) (not (or (> x575 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x575 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 96 x575)))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x355) (= x128 x342) (= x296 x44) (= (= 0 x406) x29) (= x563 x851) (<= x185 1461501637330902918203684832716283019655932542975) (= x511 (and x810 x696)) (not (< x484 1889567281)) (= x350 x506) (>= 1461501637330902918203684832716283019655932542975 x668) (= (x126 (x708 x800)) x69) (>= x128 0) (= x226 x668) (= x264 (x126 (x708 x478))) (= x185 x506) (>= 1461501637330902918203684832716283019655932542975 x700) (not (= x484 1952775229)) (= 128 x234) (= x644 x44) (>= x185 0) (<= x853 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x851) x511))) (and (> x706 0) (= x853 x838) (not (> 2569101039 x622)) (= (x126 (x708 x478)) x706) (= x547 x444) (<= 0 x853) (= x622 2569101039) (= x742 0) (= x13 (= 0 x547)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x853) (not (> 1889567281 x622))))) (and (= x848 x689) (not (= 2757214935 x496)) (not (> 1889567281 x496)) (= x131 x113) (< x848 1461501637330902918203684832716283019655932542976) (= 3524403367 x496) (= x80 (x126 (x708 x478))) (not (= x496 2569101039)) x292 (<= x848 1461501637330902918203684832716283019655932542975) (not (= 2835717307 x496)) (< 0 x80) (>= x848 0) (= (= x135 x424) x292) (= x424 x334) (not (> 2569101039 x496)))) (and (> 826074471 x377) (> x254 0) (= x800 x334) (= x135 x314) x651 (>= x800 0) (= 234755713 x377) (not (= x377 157198259)) (= x323 x11) (<= x800 1461501637330902918203684832716283019655932542975) (= x651 (<= x574 x11)) (> 1889567281 x377) (< x800 1461501637330902918203684832716283019655932542976) (= x254 (x126 (x708 x478))))) (and (= (x126 (x708 x478)) x859) (<= x294 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 404098525 x274) (= x103 x699) (not (= 234755713 x274)) (not (= x274 157198259)) (< x274 1889567281) (> 826074471 x274) (<= 0 x294) (= (+ x124 x103) x574) (= x323 x294) (< 0 x859))))) (and (= (x381 x84) x114) (>= x114 0) (< x184 2569101039) (= x32 x760) (= 0 x155) (= 0 x18) (= (= 0 x32) x71) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x114) (= (x51 (x70 0) (x70 0) 0) x84) (< 0 x726) (not (< x184 1889567281)) (= x236 x114) (= 1889567281 x184) (= x726 (x126 (x708 x478))))))) (and (= x175 (x126 (x708 x478))) (not (= x811 1989257563)) (= 2430363622 x811) (= x122 (>= x31 x751)) (<= 0 x686) (not (= 1952775229 x811)) (< x811 2569101039) (= x235 x686) (not (= 1889567281 x811)) (> x175 0) (not (< x811 1889567281)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x686) (= x31 x430))))) (and (=> (and (and (= x130 36) (= x106 1889567281) (not (> 4 x130)) (= (x126 (x708 x113)) x526) (= x847 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= (x616 (- x130 4)) x822) (not (= x106 826074471)) (not (< x106 826074471)) (= x478 x121) (> x526 0) (= x130 36) (= (or (and (< x822 32) (= true (<= x822 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x822 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x546)) x528) (and (=> (and (and (= x121 x77) (= x592 (= x121 x478))) (not x546)) (and (=> (and x592 (and (= x368 (x47 x214)) (= (x51 (x708 x121) (x70 1) 0) x214) (<= x368 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x399 32) (= x803 1) (<= 0 x368))) x105) (=> (not x592) x449))) (=> x546 x449))) (=> (and (not x528) (= (= x314 x800) x271)) (and (=> (and (not x271) (and (and x556 (and (= (x616 (- x245 4)) x658) (= x171 x478) (= x515 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x658) (and (< x658 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x658) true)))) (< 0 x279) (= x245 36) (< x347 2569101039) (= 36 x245) (= (x126 (x708 x478)) x279) (= x481 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x347 1889567281) (not (< x347 1889567281)) (not (< x245 4)))) (= (= x800 x478) x556))) (and (=> x515 x463) (=> (and (not x515) (and (= x171 x306) (= x247 (= x171 x478)))) (and (=> (not x247) x463) (=> (and (and (= 1 x136) (= x269 (x51 (x708 x171) (x70 0) 0)) (<= 0 x359) (<= x359 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 32 x514) (= x359 (x381 x269))) x247) x584))))) (=> (and x271 (and (= x478 x357) (= x520 (x616 (- x604 4))) (= x623 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x604 36) (not (< x802 826074471)) (not (> 4 x604)) (= x604 36) (= 1889567281 x802) (= (x126 (x708 x314)) x603) (< 0 x603) (= x881 (or (and (< x520 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x520) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x520))) (not (= 826074471 x802)))) (and (=> (and (not x881) (and (= x357 x244) (= x872 (= x357 x478)))) (and (=> (not x872) x571) (=> (and (and (= x864 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x854) (>= x854 0) (= x775 32) (= (x55 x153) x854) (= x153 (x51 (x708 x357) (x70 1) 0))) x872) x425))) (=> x881 x571)))))))))
(assert (x298 x823))
(assert (x298 x644))
(assert (x298 x617))
(assert (x298 x377))
(assert (x298 x776))
(assert (= (x154 (x708 x557)) x557))
(assert (x298 x102))
(assert (= x795 (and x534 x110)))
(assert (= (and x643 x607) x21))
(assert (= (x708 2835717307) (x70 2835717307)))
(assert (=> (<= x357 10000) (= (x708 x357) (x70 x357))))
(assert (x298 x40))
(assert (= 1952775229 (x154 (x70 1952775229))))
(assert (x298 x125))
(assert (x298 x291))
(assert (= x78 (or (and x773 x497) x725 (and x683 x358) (and (not x219) x646) (and x443 (not x501)) x752 (and x477 x389) x711 (and x804 x499))))
(assert (x298 x23))
(assert (x298 x744))
(assert (x298 x362))
(assert (x298 x494))
(assert (= (or x874 x89) x806))
(assert (x298 x813))
(assert (x298 x430))
(assert (x27 x478))
(assert (= x3 (and x746 x528)))
(assert (x298 x31))
(assert (= (and x170 x692) x538))
(assert (x298 x37))
(assert (= (=> (and (= x439 x828) (= x653 x209)) x569) x196))
(assert (= (and (not x17) x142) x642))
(assert (x298 x865))
(assert (= x243 (and x487 x382)))
(assert (x298 x128))
(assert (x298 x466))
(assert (x27 x357))
(assert (= x336 (and x324 (not x801))))
(assert (x298 x339))
(assert (=> (<= x303 10000) (= (x70 x303) (x708 x303))))
(assert (= (x154 (x708 x270)) x270))
(assert (x27 x565))
(assert (= x647 (and (not x671) x672)))
(assert (= (and x873 x321) x831))
(assert (= x848 (x154 (x708 x848))))
(assert (x298 x853))
(assert (x298 x341))
(assert (x298 x19))
(assert (x298 x654))
(assert (x298 x254))
(assert (x298 x520))
(assert (x298 x302))
(assert (= x316 (or x68 x457)))
(assert (= x441 (and (not x523) x739)))
(assert (x298 x540))
(assert (= 404098525 (x154 (x70 404098525))))
(assert (x27 x303))
(assert (x298 x234))
(assert (x298 x542))
(assert (= (and x475 x448) x619))
(assert (= (x708 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x70 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x298 x4))
(assert (x298 x581))
(assert (x298 x363))
(assert (x298 x742))
(assert (x298 x438))
(assert (x298 x704))
(assert (x298 x355))
(assert (= x121 (x154 (x708 x121))))
(assert (x298 x738))
(assert (x298 x705))
(assert (= (x154 (x708 x800)) x800))
(assert (x298 x719))
(assert (= x463 (=> (and (= x738 x514) (= 0 x136)) x584)))
(assert (x365 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x298 x837))
(assert (x298 x288))
(assert (x27 x800))
(assert (x298 x236))
(assert (x298 x838))
(assert (= x403 (=> (and (= x132 x578) (= 0 x193)) x747)))
(assert (x298 x848))
(assert (x298 x237))
(assert (x298 x58))
(assert (x298 x631))
(assert (x298 x626))
(assert (x298 x512))
(assert (x27 x857))
(assert (x298 x638))
(assert (x298 x402))
(assert (x27 x204))
(assert (= x404 (=> (and (and (and (and (and (<= 0 x513) (not (= x160 157198259)) (= x278 x513) (= 0 x704) (> 1889567281 x160) (= x137 (= x676 0)) (not (= x160 234755713)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x513) (= x639 (x126 (x708 x478))) (= x676 x360) (= (= x137 x256) x529) (< x160 826074471) (> x639 0) (= 404098525 x160)) (and (and (not (< x507 1889567281)) (> 2569101039 x507) (< 0 x544) (not (= 1989257563 x507)) (not (= x507 1889567281)) (= 0 x102) (= (= x415 0) x467) (= 2430363622 x507) (not (= x507 1952775229)) (<= 0 x816) (= x415 x278) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x816) (= x816 x666) (= (x126 (x708 x478)) x544)) (and (= x774 (and x777 x529)) (= x777 (= x467 x589)) (= 0 x85) (= x589 (= 0 x379)) (= x666 x379)))) (and (= x596 x19) (= x360 x618) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x618) (> x593 0) (not (> 2569101039 x876)) (= (x126 (x708 x478)) x593) (<= 0 x618) (= 0 x776) (not (< x876 1889567281)) (= (= 0 x19) x256) (= 2569101039 x876))) (and (> 1889567281 x127) (= x513 x596) (not (= x127 157198259)) (< 0 x98) (= x98 (x126 (x708 x478))) (<= 0 x513) (not (= x127 234755713)) (> 826074471 x127) (= x127 404098525) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x513))) (and (= x362 x215) (not x423) (= x423 (> x618 115792089237316195423570985008687907853269984665640564039457584007913129639935)))) x774)))
(assert (x298 x127))
(assert (= (x154 (x70 50942633119752846454219349998365661925608737367104304655302372697894809501696)) 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (= x551 (or x815 x78)))
(assert (x298 x109))
(assert (x27 x314))
(assert (x298 x373))
(assert (= (=> (and (= x724 (= x58 0)) (or (not x724) x724)) x850) x462))
(check-sat)
(exit)