(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x885 0)) (((x533 (x236 x885) (x855 x885) (x521 x885) (x823 x885) (x625 x885) (x592 x885) (x111 Int)) (x254 (x258 x885) (x210 x885) (x142 x885) (x402 Int)) (x213 (x712 x885) (x286 x885) (x503 x885) (x561 x885) (x429 x885) (x718 Int)) (x251 (x82 x885) (x348 x885) (x176 x885) (x646 x885) (x68 Int)) (x11 (x117 x885) (x697 x885) (x92 x885) (x627 x885) (x274 x885) (x590 x885) (x771 x885) (x902 Int)) (x923 (x255 x885) (x95 Int)) (x886 (x856 x885) (x950 x885) (x674 Int)) (x734 (x594 Int)))))
(declare-fun x752 () Int)
(declare-fun x231 () Int)
(declare-fun x530 () x885)
(declare-fun x74 (Int) Int)
(declare-fun x898 () Int)
(declare-fun x162 () Int)
(declare-fun x589 () Int)
(declare-fun x211 () Int)
(declare-fun x265 () Int)
(declare-fun x750 () Bool)
(declare-fun x123 () Bool)
(declare-fun x39 () Bool)
(declare-fun x716 () Int)
(declare-fun x412 () Int)
(declare-fun x6 () Int)
(declare-fun x727 () Int)
(declare-fun x799 () Int)
(declare-fun x577 () x885)
(declare-fun x148 () Int)
(declare-fun x704 () x885)
(declare-fun x310 () x885)
(declare-fun x607 () Int)
(declare-fun x938 () Int)
(declare-fun x66 () Int)
(declare-fun x912 () Int)
(declare-fun x860 () Bool)
(declare-fun x84 () Int)
(declare-fun x759 () Int)
(declare-fun x35 () Int)
(declare-fun x706 (Int) Int)
(declare-fun x112 () Int)
(declare-fun x616 () Bool)
(declare-fun x531 () Int)
(declare-fun x208 () Bool)
(declare-fun x250 () Int)
(declare-fun x180 () Int)
(declare-fun x939 () Int)
(declare-fun x664 () Int)
(declare-fun x585 () Int)
(declare-fun x216 () Int)
(declare-fun x130 () Bool)
(declare-fun x703 () x885)
(declare-fun x845 () Int)
(declare-fun x945 () Bool)
(declare-fun x673 () Int)
(declare-fun x929 () Int)
(declare-fun x634 () Int)
(declare-fun x631 (Int) Int)
(declare-fun x88 () Int)
(declare-fun x152 () Bool)
(declare-fun x239 () Bool)
(declare-fun x101 () Int)
(declare-fun x385 () Bool)
(declare-fun x517 () Bool)
(declare-fun x248 () Int)
(declare-fun x12 () Int)
(declare-fun x283 () Int)
(declare-fun x900 () Int)
(declare-fun x609 () Int)
(declare-fun x214 () Int)
(declare-fun x907 () Bool)
(declare-fun x789 () Int)
(declare-fun x476 () Int)
(declare-fun x942 () Int)
(declare-fun x595 () Int)
(declare-fun x299 () Int)
(declare-fun x269 () Int)
(declare-fun x237 (x885) Int)
(declare-fun x935 () Int)
(declare-fun x67 () Int)
(declare-fun x293 (Int) Int)
(declare-fun x672 () Int)
(declare-fun x487 () Bool)
(declare-fun x353 () Int)
(declare-fun x500 () Int)
(declare-fun x390 () Int)
(declare-fun x604 () Int)
(declare-fun x788 () x885)
(declare-fun x745 () Int)
(declare-fun x761 () Int)
(declare-fun x491 () Int)
(declare-fun x174 () Int)
(declare-fun x454 () Bool)
(declare-fun x273 () Int)
(declare-fun x506 () Int)
(declare-fun x161 () Bool)
(declare-fun x893 (Int) Int)
(declare-fun x563 () Int)
(declare-fun x715 () Int)
(declare-fun x37 () Bool)
(declare-fun x190 () Int)
(declare-fun x758 () Int)
(declare-fun x284 () Int)
(declare-fun x822 () Int)
(declare-fun x307 () Int)
(declare-fun x754 () Int)
(declare-fun x772 () Bool)
(declare-fun x358 () Int)
(declare-fun x850 () Int)
(declare-fun x125 () Int)
(declare-fun x369 () Int)
(declare-fun x90 () Int)
(declare-fun x872 () Int)
(declare-fun x690 () Int)
(declare-fun x928 () Int)
(declare-fun x135 () Bool)
(declare-fun x695 () Int)
(declare-fun x417 () Bool)
(declare-fun x452 () Int)
(declare-fun x119 () Int)
(declare-fun x17 () Int)
(declare-fun x831 () Bool)
(declare-fun x643 () Int)
(declare-fun x564 () Bool)
(declare-fun x259 () Int)
(declare-fun x443 () Int)
(declare-fun x480 () Int)
(declare-fun x365 () Int)
(declare-fun x31 () Int)
(declare-fun x432 (Int) Int)
(declare-fun x139 () Int)
(declare-fun x488 () Int)
(declare-fun x941 () Int)
(declare-fun x116 () Bool)
(declare-fun x883 () Int)
(declare-fun x418 () Int)
(declare-fun x698 () Bool)
(declare-fun x309 () Bool)
(declare-fun x587 (Int) Int)
(declare-fun x699 () Int)
(declare-fun x516 () x885)
(declare-fun x444 () Int)
(declare-fun x505 () Int)
(declare-fun x134 () Int)
(declare-fun x362 () Int)
(declare-fun x620 () Int)
(declare-fun x688 () Int)
(declare-fun x197 () Int)
(declare-fun x497 () Int)
(declare-fun x832 () Int)
(declare-fun x755 () x885)
(declare-fun x782 () Int)
(declare-fun x61 () Int)
(declare-fun x105 () Int)
(declare-fun x10 () Int)
(declare-fun x861 () Int)
(declare-fun x79 () Int)
(declare-fun x42 () Int)
(declare-fun x158 () Int)
(declare-fun x459 () Int)
(declare-fun x739 () Int)
(declare-fun x172 () Int)
(declare-fun x536 () Int)
(declare-fun x439 () Int)
(declare-fun x57 (Int Int) Int)
(declare-fun x899 () Int)
(declare-fun x97 () Bool)
(declare-fun x133 () Int)
(declare-fun x243 () Int)
(declare-fun x884 (Int) Int)
(declare-fun x843 () Int)
(declare-fun x499 () Int)
(declare-fun x188 () Int)
(declare-fun x874 () Int)
(declare-fun x532 () Int)
(declare-fun x416 () Int)
(declare-fun x241 () Int)
(declare-fun x551 () Int)
(declare-fun x801 () Int)
(declare-fun x632 () Int)
(declare-fun x192 () Int)
(declare-fun x811 () Int)
(declare-fun x195 () Int)
(declare-fun x54 () Int)
(declare-fun x576 () Int)
(declare-fun x919 () Int)
(declare-fun x458 () Bool)
(declare-fun x229 () Int)
(declare-fun x735 () Bool)
(declare-fun x279 () Int)
(declare-fun x435 () Int)
(declare-fun x830 () Int)
(declare-fun x260 (Int) Int)
(declare-fun x653 () Bool)
(declare-fun x570 () Int)
(declare-fun x937 () Bool)
(declare-fun x219 () Int)
(declare-fun x235 () Int)
(declare-fun x252 () Int)
(declare-fun x290 () Bool)
(declare-fun x287 () Int)
(declare-fun x55 () Int)
(declare-fun x702 () Int)
(declare-fun x372 () Int)
(declare-fun x48 () Bool)
(declare-fun x598 () Int)
(declare-fun x110 () Int)
(declare-fun x467 () Int)
(declare-fun x52 () Int)
(declare-fun x513 () Int)
(declare-fun x559 () Int)
(declare-fun x645 () Int)
(declare-fun x787 () Int)
(declare-fun x600 () Bool)
(declare-fun x486 () Int)
(declare-fun x311 () Int)
(declare-fun x930 () Int)
(declare-fun x692 () Int)
(declare-fun x880 () Bool)
(declare-fun x705 () Int)
(declare-fun x185 () Int)
(declare-fun x621 () Int)
(declare-fun x810 () Int)
(declare-fun x359 () Int)
(declare-fun x714 () Int)
(declare-fun x440 () Int)
(declare-fun x376 () Bool)
(declare-fun x29 () Int)
(declare-fun x73 () Int)
(declare-fun x682 () Int)
(declare-fun x541 () Int)
(declare-fun x381 () Int)
(declare-fun x53 () Int)
(declare-fun x367 () Int)
(declare-fun x87 () Int)
(declare-fun x639 () Int)
(declare-fun x388 () Int)
(declare-fun x26 () Int)
(declare-fun x781 () Bool)
(declare-fun x794 () Int)
(declare-fun x864 () Int)
(declare-fun x302 () Int)
(declare-fun x683 () Int)
(declare-fun x871 (Int) Int)
(declare-fun x449 () Bool)
(declare-fun x691 () Bool)
(declare-fun x741 () Int)
(declare-fun x557 () Int)
(declare-fun x565 () Int)
(declare-fun x867 () Bool)
(declare-fun x769 () Int)
(declare-fun x615 () Bool)
(declare-fun x711 () Int)
(declare-fun x779 () Int)
(declare-fun x808 () Int)
(declare-fun x165 () Bool)
(declare-fun x30 () Bool)
(declare-fun x548 () Bool)
(declare-fun x121 () Bool)
(declare-fun x623 () Int)
(declare-fun x320 () Int)
(declare-fun x762 () Int)
(declare-fun x920 () Bool)
(declare-fun x15 () Bool)
(declare-fun x611 () Int)
(declare-fun x75 () Int)
(declare-fun x200 () Int)
(declare-fun x453 () Bool)
(declare-fun x539 () Int)
(declare-fun x777 () Int)
(declare-fun x154 () Int)
(declare-fun x222 () Int)
(declare-fun x834 () Int)
(declare-fun x713 () Int)
(declare-fun x795 () Int)
(declare-fun x319 () Int)
(declare-fun x473 () Int)
(declare-fun x812 () Int)
(declare-fun x89 () Int)
(declare-fun x312 () Int)
(declare-fun x215 () Int)
(declare-fun x261 () Int)
(declare-fun x474 () Int)
(declare-fun x509 () Int)
(declare-fun x847 () Bool)
(declare-fun x230 () Int)
(declare-fun x677 () Int)
(declare-fun x619 () Int)
(declare-fun x277 () Int)
(declare-fun x173 () Int)
(declare-fun x652 () Bool)
(declare-fun x184 () Int)
(declare-fun x129 () Bool)
(declare-fun x63 () Int)
(declare-fun x894 () Int)
(declare-fun x484 () Int)
(declare-fun x743 () Int)
(declare-fun x464 (Int) Int)
(declare-fun x278 () Int)
(declare-fun x28 () Int)
(declare-fun x724 () Int)
(declare-fun x477 () Int)
(declare-fun x866 () Int)
(declare-fun x463 (Int) Int)
(declare-fun x837 () Int)
(declare-fun x873 () Int)
(declare-fun x13 () Int)
(declare-fun x363 () Int)
(declare-fun x605 () Bool)
(declare-fun x331 () Int)
(declare-fun x406 () Int)
(declare-fun x349 () Int)
(declare-fun x46 () Bool)
(declare-fun x62 () Bool)
(declare-fun x641 () Int)
(declare-fun x25 () Bool)
(declare-fun x478 () x885)
(declare-fun x153 () Int)
(declare-fun x389 () Bool)
(declare-fun x744 () Int)
(declare-fun x34 () Int)
(declare-fun x431 () Int)
(declare-fun x514 () Int)
(declare-fun x22 () Int)
(declare-fun x839 () Int)
(declare-fun x863 () Int)
(declare-fun x93 () Bool)
(declare-fun x295 () Bool)
(declare-fun x377 () Bool)
(declare-fun x441 () Int)
(declare-fun x805 () Int)
(declare-fun x657 () Bool)
(declare-fun x828 () Int)
(declare-fun x425 () Int)
(declare-fun x819 (Int) Int)
(declare-fun x308 () Bool)
(declare-fun x98 () Int)
(declare-fun x857 () Int)
(declare-fun x166 () Int)
(declare-fun x80 () Int)
(declare-fun x383 () Bool)
(declare-fun x543 () Int)
(declare-fun x337 () Int)
(declare-fun x81 () Bool)
(declare-fun x126 () x885)
(declare-fun x314 () Int)
(declare-fun x155 (x885) Int)
(declare-fun x70 () Int)
(declare-fun x827 () Int)
(declare-fun x671 () Bool)
(declare-fun x658 () Bool)
(declare-fun x145 (Int Int) Int)
(declare-fun x137 () Int)
(declare-fun x157 () Int)
(declare-fun x315 () Int)
(declare-fun x649 () Bool)
(declare-fun x301 () x885)
(declare-fun x360 () Int)
(declare-fun x132 () Bool)
(declare-fun x355 () Int)
(declare-fun x218 () Int)
(declare-fun x660 () Int)
(declare-fun x333 () Int)
(declare-fun x175 () Int)
(declare-fun x421 () Bool)
(declare-fun x400 () Bool)
(declare-fun x495 () Bool)
(declare-fun x198 () Int)
(declare-fun x201 () x885)
(declare-fun x523 () Int)
(declare-fun x574 () Int)
(declare-fun x106 () Int)
(declare-fun x584 () Int)
(declare-fun x340 () Bool)
(declare-fun x914 () Int)
(declare-fun x614 () Int)
(declare-fun x225 () Int)
(declare-fun x606 () Bool)
(declare-fun x65 () Bool)
(declare-fun x756 () Int)
(declare-fun x522 () Int)
(declare-fun x588 () Bool)
(declare-fun x948 () x885)
(declare-fun x862 () Int)
(declare-fun x247 () Int)
(declare-fun x124 () Int)
(declare-fun x224 () Bool)
(declare-fun x415 () x885)
(declare-fun x78 () Int)
(declare-fun x380 () x885)
(declare-fun x445 () Bool)
(declare-fun x749 () Int)
(declare-fun x804 () Int)
(declare-fun x234 () Int)
(declare-fun x118 () Int)
(declare-fun x527 () Int)
(declare-fun x60 () Int)
(declare-fun x21 () Int)
(declare-fun x268 () Int)
(declare-fun x395 () Int)
(declare-fun x292 () Int)
(declare-fun x640 () Int)
(declare-fun x223 () Bool)
(declare-fun x209 () Int)
(declare-fun x729 () Int)
(declare-fun x669 () Int)
(declare-fun x207 () Int)
(declare-fun x394 () Bool)
(declare-fun x270 () x885)
(declare-fun x915 () Int)
(declare-fun x323 () Int)
(declare-fun x568 () Int)
(declare-fun x99 () Int)
(declare-fun x890 () Int)
(declare-fun x271 () Int)
(declare-fun x4 () Int)
(declare-fun x51 () Int)
(declare-fun x378 () Bool)
(declare-fun x648 () Int)
(declare-fun x742 () Int)
(declare-fun x233 () Bool)
(declare-fun x766 () Int)
(declare-fun x858 () Bool)
(declare-fun x159 () Int)
(declare-fun x470 () Int)
(declare-fun x868 () x885)
(declare-fun x147 () Int)
(declare-fun x618 () Bool)
(declare-fun x436 () Int)
(declare-fun x663 () Int)
(declare-fun x240 () Int)
(declare-fun x264 () Int)
(declare-fun x780 () Bool)
(declare-fun x386 () Int)
(declare-fun x100 () Int)
(declare-fun x547 () Bool)
(declare-fun x19 () Int)
(declare-fun x23 () Int)
(declare-fun x217 () Int)
(declare-fun x524 () Int)
(declare-fun x519 () Int)
(declare-fun x707 () Bool)
(declare-fun x910 () Int)
(declare-fun x901 () Int)
(declare-fun x404 () Int)
(declare-fun x730 () Int)
(declare-fun x498 (x885) Int)
(declare-fun x469 () Bool)
(declare-fun x7 () x885)
(declare-fun x578 () Int)
(declare-fun x289 () Int)
(declare-fun x489 () Int)
(declare-fun x924 () x885)
(declare-fun x797 () Int)
(declare-fun x622 () Int)
(declare-fun x786 () x885)
(declare-fun x760 () Int)
(declare-fun x626 () Bool)
(declare-fun x122 () Int)
(declare-fun x612 () Bool)
(declare-fun x422 () x885)
(declare-fun x908 () Int)
(declare-fun x877 () Bool)
(declare-fun x77 () Int)
(declare-fun x936 () Int)
(declare-fun x143 () Bool)
(declare-fun x242 () Int)
(declare-fun x686 () Int)
(declare-fun x128 () Int)
(declare-fun x746 () Bool)
(declare-fun x538 () Int)
(declare-fun x102 (Int) Int)
(declare-fun x644 () Bool)
(declare-fun x438 () Bool)
(declare-fun x608 () Int)
(declare-fun x108 () Int)
(declare-fun x313 () Bool)
(declare-fun x637 (Int) Int)
(declare-fun x32 () Int)
(declare-fun x291 () Int)
(declare-fun x465 () Int)
(declare-fun x566 () Int)
(declare-fun x43 () Int)
(declare-fun x437 () Int)
(declare-fun x409 () Int)
(declare-fun x571 () Int)
(declare-fun x722 () Int)
(declare-fun x8 () Int)
(declare-fun x397 () Int)
(declare-fun x304 () Int)
(declare-fun x71 () Int)
(declare-fun x341 () Bool)
(declare-fun x751 () Int)
(declare-fun x414 () Int)
(declare-fun x765 () Int)
(declare-fun x479 () Int)
(declare-fun x783 () Int)
(declare-fun x447 () Int)
(declare-fun x442 () Int)
(declare-fun x325 () Int)
(declare-fun x294 () Int)
(declare-fun x888 () Int)
(declare-fun x540 () Int)
(declare-fun x238 () Int)
(declare-fun x748 () Int)
(declare-fun x824 () Bool)
(declare-fun x911 () Int)
(declare-fun x306 () Bool)
(declare-fun x544 () Int)
(declare-fun x947 () Int)
(declare-fun x228 () Int)
(declare-fun x167 () Int)
(declare-fun x330 () Int)
(declare-fun x212 () Int)
(declare-fun x303 () Int)
(declare-fun x876 (Int) Int)
(declare-fun x276 () Int)
(declare-fun x371 (Int) Int)
(declare-fun x599 () Int)
(declare-fun x520 () Int)
(declare-fun x602 () Int)
(declare-fun x826 () Int)
(declare-fun x802 () Int)
(declare-fun x859 () Int)
(declare-fun x468 () Int)
(declare-fun x280 () Int)
(declare-fun x249 () Int)
(declare-fun x69 () Int)
(declare-fun x146 () Int)
(declare-fun x654 () Int)
(declare-fun x178 () Int)
(declare-fun x897 () Int)
(declare-fun x806 () Int)
(declare-fun x647 () x885)
(declare-fun x485 () Int)
(declare-fun x494 () Int)
(declare-fun x696 () Int)
(declare-fun x189 () Int)
(declare-fun x430 () Int)
(declare-fun x549 () Int)
(declare-fun x24 () Int)
(declare-fun x562 () x885)
(declare-fun x398 () Bool)
(declare-fun x305 () Int)
(declare-fun x932 () Int)
(declare-fun x492 () Bool)
(declare-fun x36 () Int)
(declare-fun x328 () Int)
(declare-fun x879 () Bool)
(declare-fun x918 () Int)
(declare-fun x838 () Int)
(declare-fun x256 (Int Int) Int)
(declare-fun x493 () Bool)
(declare-fun x821 () Int)
(declare-fun x169 () Int)
(declare-fun x64 () Int)
(declare-fun x396 () Int)
(declare-fun x41 () Int)
(declare-fun x926 () Int)
(declare-fun x776 () Int)
(declare-fun x593 () Bool)
(declare-fun x177 () Int)
(declare-fun x922 () Bool)
(declare-fun x550 () Int)
(declare-fun x114 () Int)
(declare-fun x346 () Bool)
(declare-fun x336 () Int)
(declare-fun x768 () Bool)
(declare-fun x790 () Bool)
(declare-fun x366 () Bool)
(declare-fun x335 () Int)
(declare-fun x586 () Int)
(declare-fun x628 () Int)
(declare-fun x462 () Int)
(declare-fun x825 () Bool)
(declare-fun x630 (Int) Int)
(declare-fun x917 () Int)
(declare-fun x665 () Bool)
(declare-fun x3 () Bool)
(declare-fun x272 () Bool)
(declare-fun x322 () Int)
(declare-fun x726 () Int)
(declare-fun x721 () Int)
(declare-fun x47 () Int)
(declare-fun x728 () Int)
(declare-fun x483 () Int)
(declare-fun x575 () Bool)
(declare-fun x345 () Int)
(declare-fun x569 () Int)
(declare-fun x693 () Int)
(declare-fun x344 () Bool)
(declare-fun x694 () Int)
(declare-fun x560 () Int)
(declare-fun x205 () Int)
(declare-fun x2 () Int)
(declare-fun x206 () Int)
(declare-fun x113 () Int)
(declare-fun x535 () Int)
(declare-fun x676 () Int)
(declare-fun x288 () Int)
(declare-fun x461 () Int)
(declare-fun x854 () Int)
(declare-fun x813 () Int)
(declare-fun x434 () Int)
(declare-fun x791 () x885)
(declare-fun x326 () Int)
(declare-fun x829 () Int)
(declare-fun x666 () Int)
(declare-fun x204 () Int)
(declare-fun x183 () Int)
(declare-fun x338 () Bool)
(declare-fun x931 () Int)
(declare-fun x186 () Int)
(declare-fun x332 () Int)
(declare-fun x316 () Int)
(declare-fun x747 () Int)
(declare-fun x613 () x885)
(declare-fun x298 () Int)
(declare-fun x227 () Int)
(declare-fun x433 () Int)
(declare-fun x798 () Int)
(declare-fun x778 (x885) Int)
(declare-fun x710 () Int)
(declare-fun x796 () Int)
(declare-fun x246 () Int)
(declare-fun x733 () Int)
(declare-fun x450 () Int)
(declare-fun x38 () Int)
(declare-fun x502 (Int) Int)
(declare-fun x83 () Bool)
(declare-fun x508 () Int)
(declare-fun x807 () Int)
(declare-fun x525 () Int)
(declare-fun x140 () Int)
(declare-fun x253 () Int)
(declare-fun x700 (Int) x885)
(declare-fun x391 () Int)
(declare-fun x356 () Int)
(declare-fun x701 () Int)
(declare-fun x943 () Int)
(declare-fun x518 () Int)
(declare-fun x916 () Int)
(declare-fun x817 () Int)
(declare-fun x45 () x885)
(declare-fun x72 () Bool)
(declare-fun x553 () Bool)
(declare-fun x18 () Bool)
(declare-fun x263 () Int)
(declare-fun x76 () Int)
(declare-fun x667 () Int)
(declare-fun x14 () Int)
(declare-fun x5 () Bool)
(declare-fun x725 () Int)
(declare-fun x572 () Int)
(declare-fun x221 () Int)
(declare-fun x347 () Int)
(declare-fun x352 () Int)
(declare-fun x245 () Int)
(declare-fun x815 (Int) Int)
(declare-fun x675 () Bool)
(declare-fun x940 () Int)
(declare-fun x891 () Int)
(declare-fun x191 () Int)
(declare-fun x820 () Int)
(declare-fun x680 () Int)
(declare-fun x803 () Int)
(declare-fun x580 () Bool)
(declare-fun x927 () Int)
(declare-fun x851 () Int)
(declare-fun x892 () Int)
(declare-fun x814 () Int)
(declare-fun x913 () x885)
(declare-fun x401 () Int)
(declare-fun x515 () Bool)
(declare-fun x410 () Int)
(declare-fun x881 () Int)
(declare-fun x423 () Int)
(declare-fun x357 () Int)
(declare-fun x297 () Int)
(declare-fun x170 () Int)
(declare-fun x651 () Int)
(declare-fun x354 () Int)
(declare-fun x33 () Int)
(declare-fun x738 () Int)
(declare-fun x104 () Int)
(declare-fun x387 () Int)
(declare-fun x203 () Int)
(declare-fun x537 () x885)
(declare-fun x656 () Bool)
(declare-fun x512 () Int)
(declare-fun x555 () Int)
(declare-fun x511 () Int)
(declare-fun x670 () Bool)
(declare-fun x556 () Int)
(declare-fun x597 () Int)
(declare-fun x281 () Int)
(declare-fun x596 () Int)
(declare-fun x870 () Int)
(declare-fun x583 () Int)
(declare-fun x767 () Bool)
(declare-fun x199 () Int)
(declare-fun x220 () Int)
(declare-fun x262 () Int)
(declare-fun x558 () Int)
(declare-fun x373 () Int)
(declare-fun x405 () Bool)
(declare-fun x482 () Int)
(declare-fun x448 (Int) Int)
(declare-fun x875 () Int)
(declare-fun x275 () Bool)
(declare-fun x731 () Int)
(declare-fun x844 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x889 () Bool)
(declare-fun x800 () Int)
(declare-fun x753 () Int)
(declare-fun x836 () Bool)
(declare-fun x833 () Int)
(declare-fun x529 () Int)
(declare-fun x546 () Int)
(declare-fun x103 () Int)
(declare-fun x655 () Int)
(declare-fun x679 () Int)
(declare-fun x848 () Bool)
(declare-fun x603 () Int)
(declare-fun x528 () Int)
(declare-fun x257 () Int)
(declare-fun x151 () Int)
(declare-fun x770 () Int)
(declare-fun x58 () Int)
(declare-fun x374 () Int)
(declare-fun x144 () Int)
(declare-fun x196 () Int)
(declare-fun x361 () Int)
(declare-fun x757 () Int)
(declare-fun x194 () Int)
(declare-fun x1 () Int)
(declare-fun x763 () Bool)
(declare-fun x407 () Int)
(declare-fun x650 () Int)
(declare-fun x56 (Int) Int)
(declare-fun x267 () Int)
(declare-fun x633 () x885)
(declare-fun x949 () Int)
(declare-fun x40 () x885)
(declare-fun x115 () Bool)
(declare-fun x835 () x885)
(declare-fun x379 () Int)
(declare-fun x504 () Int)
(declare-fun x662 () Bool)
(declare-fun x419 () Int)
(declare-fun x629 () Int)
(declare-fun x49 () Int)
(declare-fun x471 () Int)
(declare-fun x20 () Int)
(declare-fun x426 () Int)
(declare-fun x392 () Int)
(declare-fun x925 () Bool)
(declare-fun x764 () Int)
(declare-fun x507 () Bool)
(declare-fun x689 () Int)
(declare-fun x840 () Int)
(declare-fun x792 () Int)
(declare-fun x723 () Bool)
(declare-fun x451 () x885)
(declare-fun x120 () x885)
(declare-fun x168 () Int)
(declare-fun x384 () Int)
(declare-fun x456 () Bool)
(declare-fun x94 () Int)
(declare-fun x351 () Int)
(declare-fun x285 () Int)
(declare-fun x946 () Int)
(declare-fun x171 () Bool)
(declare-fun x708 () Int)
(declare-fun x339 () Int)
(declare-fun x784 () Int)
(declare-fun x849 () Int)
(declare-fun x472 (Int) Int)
(declare-fun x869 () Bool)
(declare-fun x427 () Int)
(declare-fun x334 () Bool)
(declare-fun x617 () Bool)
(declare-fun x904 () Int)
(declare-fun x424 () Int)
(declare-fun x841 () Int)
(declare-fun x490 () Bool)
(declare-fun x732 () Int)
(declare-fun x318 () Int)
(declare-fun x737 () Bool)
(declare-fun x635 () Int)
(declare-fun x317 () Int)
(declare-fun x659 () Int)
(declare-fun x59 () Bool)
(declare-fun x50 () Int)
(declare-fun x321 () Bool)
(declare-fun x579 () x885)
(declare-fun x895 () Int)
(declare-fun x774 () Int)
(declare-fun x350 () Int)
(declare-fun x181 () Int)
(declare-fun x681 () x885)
(declare-fun x9 () Int)
(declare-fun x642 () Int)
(declare-fun x27 () Int)
(declare-fun x846 () Int)
(declare-fun x944 () x885)
(declare-fun x852 () Int)
(declare-fun x411 (Int) Int)
(declare-fun x542 () Int)
(declare-fun x266 () Int)
(declare-fun x678 () Int)
(declare-fun x709 () Int)
(declare-fun x906 () Int)
(declare-fun x636 () Int)
(declare-fun x534 () Bool)
(declare-fun x136 () Int)
(declare-fun x773 () Bool)
(declare-fun x324 () Int)
(declare-fun x244 () Int)
(declare-fun x149 () Int)
(define-fun x818 ((x885 x885) (x475 Int)) x885 (ite ((_ is x11) x885) (x11 (x117 x885) (x697 x885) (x92 x885) (x627 x885) (x274 x885) (x590 x885) (x771 x885) (+ x475 (x902 x885))) (ite ((_ is x533) x885) (x533 (x236 x885) (x855 x885) (x521 x885) (x823 x885) (x625 x885) (x592 x885) (+ x475 (x111 x885))) (ite ((_ is x213) x885) (x213 (x712 x885) (x286 x885) (x503 x885) (x561 x885) (x429 x885) (+ (x718 x885) x475)) (ite ((_ is x251) x885) (x251 (x82 x885) (x348 x885) (x176 x885) (x646 x885) (+ x475 (x68 x885))) (ite ((_ is x254) x885) (x254 (x258 x885) (x210 x885) (x142 x885) (+ x475 (x402 x885))) (ite ((_ is x923) x885) (x923 (x255 x885) (+ (x95 x885) x475)) (ite ((_ is x886) x885) (x886 (x856 x885) (x950 x885) (+ (x674 x885) x475)) (x734 (+ (x594 x885) x475))))))))))
(define-fun x446 ((x96 Int)) Int (ite (and (<= 0 x96) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96)) x96 (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x466 ((x96 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x96) (< x96 0)) (+ x96 115792089237316195423570985008687907853269984665640564039457584007913129639936) x96))
(define-fun x16 ((x428 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x428) (<= 0 x428)))
(define-fun x300 ((x428 Int)) Bool (and (= (x256 x428 115792089237316195423570985008687907853269984665640564039457584007913129639935) x428) (= (x256 115792089237316195423570985008687907853269984665640564039457584007913129639935 x428) x428)))
(define-fun x545 ((x428 Int)) Bool (and (= (x256 x428 0) 0) (= 0 (x256 0 x428))))
(define-fun x668 ((x428 Int)) Bool (= (x256 x428 x428) x428))
(define-fun x816 ((x428 Int)) Bool (and (x300 x428) (x545 x428) (x668 x428)))
(define-fun x343 ((x428 Int) (x460 Int)) Bool (= (x256 x428 x460) (x256 x460 x428)))
(define-fun x150 ((x428 Int) (x460 Int)) Bool (and (=> (>= x460 0) (<= (x256 x428 x460) x460)) (=> (>= x428 0) (>= x428 (x256 x428 x460))) (<= 0 (x256 x428 x460))))
(define-fun x187 ((x428 Int) (x460 Int)) Bool (and (x150 x428 x460) (x343 x428 x460)))
(define-fun x878 ((x428 Int)) Bool (= (x256 x428 4294967295) (mod x428 4294967296)))
(define-fun x793 ((x428 Int)) Bool (and (x187 x428 4294967295) (x878 x428)))
(define-fun x163 ((x428 Int)) Bool (= (x256 x428 340282366920938463463374607431768211455) (mod x428 340282366920938463463374607431768211456)))
(define-fun x91 ((x428 Int)) Bool (and (x163 x428) (x187 x428 340282366920938463463374607431768211455)))
(define-fun x853 ((x428 Int)) Bool (= (mod x428 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x428 32) (x256 x428 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x909 ((x428 Int)) Bool (and (x853 x428) (x187 x428 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x156 ((x428 Int)) Bool (= (mod x428 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x256 x428 115792089237316195423570985008687907852929702298719625575994209400481361428480) (mod x428 340282366920938463463374607431768211456))))
(define-fun x375 ((x428 Int)) Bool (and (x156 x428) (x187 x428 115792089237316195423570985008687907852929702298719625575994209400481361428480)))
(define-fun x684 ((x428 Int)) Bool (= (mod x428 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x256 x428 115792089237316195423570985008687907853269984665640564039457584007908834672640) (mod x428 4294967296))))
(define-fun x661 ((x428 Int)) Bool (and (x684 x428) (x187 x428 115792089237316195423570985008687907853269984665640564039457584007908834672640)))
(define-fun x624 ((x428 Int)) Bool (= (ite (< (x256 x428 340282366920938463463374607431768211455) 170141183460469231731687303715884105728) (x256 x428 340282366920938463463374607431768211455) (+ (x256 x428 340282366920938463463374607431768211455) 115792089237316195423570985008687907852929702298719625575994209400481361428480)) (x464 x428)))
(define-fun x44 ((x428 Int)) Bool (= (mod x428 256) (x256 x428 255)))
(define-fun x399 ((x428 Int)) Bool (and (x44 x428) (x187 x428 255)))
(define-fun x202 ((x428 Int)) Bool (= (mod x428 1461501637330902918203684832716283019655932542976) (x256 x428 1461501637330902918203684832716283019655932542975)))
(define-fun x329 ((x428 Int)) Bool (and (x202 x428) (x187 x428 1461501637330902918203684832716283019655932542975)))
(define-fun x809 ((x138 Int)) Int (ite (= x138 128) x349 (x587 x138)))
(define-fun x865 ((x138 Int)) Int (ite (= 160 x138) x511 (x809 x138)))
(define-fun x327 ((x138 Int)) Int (ite (= 192 x138) x810 (x865 x138)))
(define-fun x164 ((x138 Int)) Int (ite (= 224 x138) x125 (x327 x138)))
(define-fun x736 ((x138 Int)) Int (ite (= x138 256) x462 (x164 x138)))
(define-fun x127 ((x138 Int)) Int (ite (= 128 x138) x804 (x56 x138)))
(define-fun x296 ((x138 Int)) Int (ite (= x138 160) x166 (x411 x138)))
(define-fun x141 ((x138 Int)) Int (ite (= x138 192) x194 (x637 x138)))
(define-fun x687 ((x138 Int)) Int (ite (= 224 x138) x693 (x293 x138)))
(define-fun x552 ((x138 Int)) Int (ite (= 256 x138) x716 (x815 x138)))
(define-fun x775 ((x138 Int)) Int (ite (= x138 288) x485 (x893 x138)))
(define-fun x785 ((x138 Int)) Int (ite (= x138 512) x67 (x102 x138)))
(define-fun x903 ((x138 Int)) Int (ite (= x138 544) x436 (x785 x138)))
(define-fun x719 ((x138 Int)) Int (ite (= x138 576) x147 (x903 x138)))
(define-fun x554 ((x138 Int)) Int (ite (= x138 608) x730 (x719 x138)))
(define-fun x567 ((x138 Int)) Int (ite (= 640 x138) x677 (x554 x138)))
(define-fun x526 ((x138 Int)) Int (ite (= x138 672) x175 (x567 x138)))
(define-fun x408 ((x138 Int)) Int (x502 x138))
(define-fun x109 ((x138 Int)) Int (ite (= x138 128) x322 (x371 x138)))
(define-fun x131 ((x138 Int)) Int (ite (= x138 x447) x544 (x871 x138)))
(define-fun x581 ((x138 Int)) Int (ite (= x138 x912) x118 (x260 x138)))
(define-fun x107 ((x138 Int)) Int (ite (= x138 160) x489 (x448 x138)))
(define-fun x370 ((x138 Int)) Int (ite x389 (x448 x138) (x107 x138)))
(define-fun x905 ((x138 Int)) Int (ite (= x629 x138) x912 (x74 x138)))
(define-fun x717 ((x138 Int)) Int (ite x389 (x74 x138) (x905 x138)))
(define-fun x368 ((x138 Int)) Int (ite x389 (x260 x138) (x581 x138)))
(define-fun x887 ((x138 Int)) Int (ite (= x797 x138) x73 (x472 x138)))
(define-fun x403 ((x138 Int)) Int (ite x389 (x472 x138) (ite x606 (x472 x138) (x887 x138))))
(define-fun x393 ((x138 Int)) Int (ite (= x138 x938) x833 (x706 x138)))
(define-fun x573 ((x138 Int)) Int (ite x389 (x706 x138) (ite x606 (x706 x138) (x393 x138))))
(define-fun x934 ((x138 Int)) Int (ite (= x138 x66) x186 (x630 x138)))
(define-fun x685 ((x138 Int)) Int (ite (= x101 x138) x523 (x934 x138)))
(define-fun x85 ((x138 Int)) Int (ite (= x311 x138) x186 (x685 x138)))
(define-fun x457 ((x138 Int)) Int (ite x662 (x685 x138) (x85 x138)))
(define-fun x413 ((x138 Int)) Int (ite (= x138 x170) x186 (x457 x138)))
(define-fun x481 ((x138 Int)) Int (ite (= x520 x138) x866 (x413 x138)))
(define-fun x610 ((x138 x885)) Int (ite (= x138 x924) x822 (x778 x138)))
(define-fun x455 ((x138 x885)) Int (ite (= x138 x835) x834 (x610 x138)))
(define-fun x882 ((x138 x885)) Int (ite (= x835 x138) x892 (x455 x138)))
(define-fun x193 ((x138 x885)) Int (ite (= x7 x138) x683 (x882 x138)))
(define-fun x740 ((x138 x885)) Int (ite (= x7 x138) x441 (x193 x138)))
(define-fun x501 ((x138 x885)) Int (ite x233 (x610 x138) (x740 x138)))
(define-fun x226 ((x138 x885)) Int (ite (= x948 x138) x488 (x501 x138)))
(define-fun x496 ((x138 x885)) Int (ite x334 (x778 x138) (ite x662 (x501 x138) (x226 x138))))
(define-fun x342 ((x138 Int)) Int (ite (= 128 x138) x283 (x844 x138)))
(define-fun x382 ((x138 Int)) Int (ite (= x138 160) x764 (x342 x138)))
(define-fun x933 ((x138 Int)) Int (ite (= x138 192) x140 (x382 x138)))
(define-fun x182 ((x138 Int)) Int (ite (= x138 224) x686 (x933 x138)))
(define-fun x282 ((x138 Int)) Int (ite (= 256 x138) x330 (x182 x138)))
(define-fun x842 ((x138 Int)) Int (ite (= x138 x873) 32 (x884 x138)))
(define-fun x232 ((x138 Int)) Int (ite (= x138 x673) x843 (x842 x138)))
(define-fun x420 ((x138 Int)) Int (ite (= x114 x138) x484 (x232 x138)))
(define-fun x582 ((x138 Int)) Int (ite (= x138 x895) x434 (x819 x138)))
(define-fun x638 ((x138 Int)) Int (ite x389 (x819 x138) (ite x606 (x819 x138) (x582 x138))))
(define-fun x86 ((x138 Int)) Int (ite (= x608 x138) x875 (x420 x138)))
(define-fun x160 ((x138 Int)) Int (ite x836 (x232 x138) (x86 x138)))
(define-fun x510 ((x138 Int)) Int (ite (= x138 x444) x946 (x876 x138)))
(define-fun x601 ((x138 Int)) Int (ite (= x265 x138) x640 (x463 x138)))
(define-fun x921 ((x138 Int)) Int (ite x389 (x463 x138) (x601 x138)))
(define-fun x364 ((x138 Int)) Int (ite (= x347 x138) x715 (x631 x138)))
(define-fun x720 ((x138 Int)) Int (ite x389 (x631 x138) (x364 x138)))
(define-fun x591 ((x138 Int)) Int (ite x389 (x871 x138) (x131 x138)))
(define-fun x896 ((x428 Int)) Bool (=> (and (not (= 2113632 x428)) (not (= 4294967294 x428)) (not (= 3547226261 x428)) (not (= x428 340282366920938463463374607431768211456)) (not (= 1960939212 x428)) (not (= x428 115792089237316195423570985008687907853269984665640564039457584007908834672640)) (not (= x428 2652930389)) (not (= x428 3250587425)) (not (= x428 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 1461501637330902918203684832716283019655932542975 x428)) (not (= 18446744073709551616 x428)) (not (= x428 4294967296)) (not (= x428 18446744073709551615)) (not (= x428 4294967295)) (not (= 115792089237316195423570985008687907852929702298719625575994209400481361428480 x428)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x428)) (not (= x428 3704226421)) (not (= x428 4060098646)) (not (= x428 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 340282366920938463463374607431768211455 x428)) (not (= 1000000000000000000 x428)) (not (= x428 3655340144)) (not (= 1960641893 x428)) (not (= 2220280665 x428)) (not (= x428 79228162514264337593543950336)) (< 10000 x428) (not (= 1749768213 x428)) (not (= x428 3110348530))) (not ((_ is x734) (x700 x428)))))
(assert (x16 x103))
(assert (x16 x396))
(assert (x16 x24))
(assert (x16 x367))
(assert (= x508 (x155 (x700 x508))))
(assert (x16 x787))
(assert (x16 x17))
(assert (x16 x828))
(assert (= x39 (=> (and (= (x446 (+ x714 32)) x622) (= (x921 x714) x666) (= (x533 (x734 128) (x700 2113632) (x700 x910) x647 (x700 x461) (x700 x10) 0) x40) (= (not (> x636 1)) x649) (= (x256 4294967295 x298) x10) (= (x109 128) x636) (= (x720 x622) x298) (= x714 (x446 (+ x292 32))) (= x353 (x446 (+ 160 x257))) (= x461 (x256 4294967295 x666))) (and (=> (and (= x353 x491) (= x40 x126)) x605) x649))))
(assert (= 1749768213 (x155 (x734 1749768213))))
(assert (x91 x664))
(assert (= (x734 1960939212) (x700 1960939212)))
(assert (= x161 (and x400 x626)))
(assert (x16 x147))
(assert (x793 x103))
(assert (= x548 (and x132 x454)))
(assert (= (x734 3655340144) (x700 3655340144)))
(assert (x16 x583))
(assert (= x154 (x155 (x700 x154))))
(assert (x16 x904))
(assert (=> (<= x89 10000) (= (x734 x89) (x700 x89))))
(assert (x816 x479))
(assert (x16 x216))
(assert (x793 x760))
(assert (x16 x843))
(assert (x16 x833))
(assert (= x487 (and x490 (not x59))))
(assert (= (x700 18446744073709551616) (x734 18446744073709551616)))
(assert (x16 x79))
(assert (x16 x349))
(assert (x16 x173))
(assert (=> (<= x910 10000) (= (x734 x910) (x700 x910))))
(assert (x896 x89))
(assert (x16 x323))
(assert (x16 x60))
(assert (x16 x808))
(assert (x16 x789))
(assert (x896 x461))
(assert (x16 x572))
(assert (x16 x443))
(assert (x16 x205))
(assert (x816 1461501637330902918203684832716283019655932542975))
(assert (= 115792089237316195423570985008687907852929702298719625575994209400481361428480 (x155 (x734 115792089237316195423570985008687907852929702298719625575994209400481361428480))))
(assert (x816 x22))
(assert (x16 x571))
(assert (x816 x291))
(assert (= (x155 (x700 x654)) x654))
(assert (= x338 (=> (and (= (ite (> x680 0) (< (x256 4294967295 x450) (x256 4294967295 x603)) (> x680 0)) x394) (= (x446 (+ 32 x560)) x708) (= (x921 x708) x603)) (and (=> (and (and (= x299 (x370 x363)) (= x69 (x368 x583)) (= (x717 x225) x583) (= (= 0 x69) x30) (= x839 (mod (* x177 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x446 (+ x299 32)) x225) (= x467 (x446 (+ x839 32))) (= (x446 (+ x467 128)) x363) (= (x109 128) x559) (> x559 x177) (not (= x680 0)) (= x177 (x466 (- x680 1)))) x394) (and (=> x30 x62) (=> (and (and (= (x368 x536) x360) (= x536 (x717 x225)) (= (> x360 0) x615)) (not x30)) (and (=> (and (not x615) (= x777 0)) x781) (=> (and x615 (and (and (= x214 x360) (< x212 x852) (not (> 0 x916)) (= x273 (mod (* 32 x212) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x573 x384) x248) (= x384 x701) (= x482 (x446 (+ x751 x536))) (= (x466 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x360)) x916) (= x701 (x403 x482)) (= x852 (x368 x536)) (= (x446 (+ x273 32)) x751) (= (> x930 x248) x59) (= x212 (div x214 2))) (or (and (not x59) (and (= x752 0) (= x246 x212))) (and (and (= (x446 (+ x212 1)) x480) (= x752 x480) (= x360 x246)) x59)))) x937))))) (=> (and (not x394) (and (= x186 x303) (= x291 x655))) x115)))))
(assert (x16 x159))
(assert (=> (<= (x160 (x446 (+ 64 x911))) 10000) (= (x734 (x160 (x446 (+ x911 64)))) (x700 (x160 (x446 (+ 64 x911)))))))
(assert (x16 x98))
(assert (= (x884 (x446 (+ x911 192))) 0))
(assert (= x130 (and (not x132) x454)))
(assert (x16 x710))
(assert (x16 x609))
(assert (x16 x392))
(assert (x16 x584))
(assert (x16 x214))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007908834672640 (x155 (x734 115792089237316195423570985008687907853269984665640564039457584007908834672640))))
(assert (x16 x470))
(assert (x16 x696))
(assert (x16 x134))
(assert (= (x734 4294967295) (x700 4294967295)))
(assert (= (x155 (x700 x619)) x619))
(assert (x16 x76))
(assert (x16 x765))
(assert (x16 x473))
(assert (x16 x536))
(assert (x16 x430))
(assert (x16 x167))
(assert (x16 x194))
(assert (= (x706 x731) 0))
(assert (= 0 (x631 x197)))
(assert (x909 x63))
(assert (not x346))
(assert (= (x155 (x700 (x160 (x446 (+ 64 x911))))) (x160 (x446 (+ 64 x911)))))
(assert (x16 x607))
(assert (x816 x756))
(assert (x16 x279))
(assert (x16 x435))
(assert (= x3 (or x836 x780)))
(assert (=> (>= 10000 x34) (= (x734 x34) (x700 x34))))
(assert (x16 x576))
(assert (x624 x483))
(assert (x16 x759))
(assert (= (x155 (x734 18446744073709551616)) 18446744073709551616))
(assert (x16 x77))
(assert (x16 x379))
(assert (x16 x168))
(assert (x816 x589))
(assert (x16 x544))
(assert (x16 x725))
(assert (x661 x479))
(assert (x16 x702))
(assert (x16 x281))
(assert (x16 x888))
(assert (x896 x317))
(assert (x816 x425))
(assert (x16 x935))
(assert (= (or x306 x3) x376))
(assert (x16 x614))
(assert (x816 x891))
(assert (x16 x461))
(assert (x16 x302))
(assert (x16 x803))
(assert (x16 x863))
(assert (x16 x506))
(assert (x816 255))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x155 (x734 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x16 x585))
(assert (x16 x870))
(assert (x16 x242))
(assert (= (x448 x363) 0))
(assert (x16 x311))
(assert (x16 x84))
(assert (x16 x221))
(assert (= x34 (x155 (x700 x34))))
(assert (x16 x654))
(assert (x16 x916))
(assert (x896 x34))
(assert (x816 x267))
(assert (x16 x166))
(assert (x816 340282366920938463463374607431768211455))
(assert (x16 x471))
(assert (= (x155 (x700 x168)) x168))
(assert (= 0 (x706 x660)))
(assert (x816 x450))
(assert (= x657 (=> (and (= x727 x257) (= x537 x647)) x39)))
(assert (x16 x427))
(assert (x91 x766))
(assert (= (+ (x155 x913) 1) (x155 (x818 x913 1))))
(assert (= (x155 (x734 3655340144)) 3655340144))
(assert (= (div x862 4294967296) (x145 x862 32)))
(assert (x16 x113))
(assert (= x453 (and x59 x490)))
(assert (x16 x873))
(assert (= (x700 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x734 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x16 x912))
(assert (x16 x373))
(assert (x793 x269))
(assert (x91 x6))
(assert (= (x819 x359) 0))
(assert (x16 x683))
(assert (= (x155 (x818 x451 1)) (+ 1 (x155 x451))))
(assert (x16 x231))
(assert (x16 x695))
(assert (= (x700 2652930389) (x734 2652930389)))
(assert (x816 x607))
(assert (x16 x106))
(assert (x16 x262))
(assert (x16 x595))
(assert (x16 x324))
(assert (x16 x12))
(assert (x16 x805))
(assert (x16 x540))
(assert (x16 x783))
(assert (x16 x857))
(assert (x16 x352))
(assert (x16 x897))
(assert (= (and (not x626) x400) x616))
(assert (x16 x355))
(assert (x16 x761))
(assert (x16 x175))
(assert (x16 x337))
(assert (x793 x291))
(assert (= (and x309 x383) x308))
(assert (x624 x664))
(assert (x16 x751))
(assert (x16 x94))
(assert (x16 x705))
(assert (x16 x43))
(assert (x793 x497))
(assert (x816 x103))
(assert (x16 x727))
(assert (x16 x928))
(assert (x16 x943))
(assert (x896 x17))
(assert (x16 x678))
(assert (x16 x4))
(assert (x16 x307))
(assert (x16 x830))
(assert (x16 x241))
(assert (= x5 (and (not x831) x239)))
(assert (x16 x688))
(assert (= x317 (x155 (x700 x317))))
(assert (x896 x538))
(assert (x16 x186))
(assert (x16 x666))
(assert (= (x155 (x700 x276)) x276))
(assert (x16 x240))
(assert (= x77 (x155 (x700 x77))))
(assert (= (=> (and (= x678 x864) (= x539 (mod (* x843 64) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x798 x843) (= (>= 224 x705) x652) (= x911 (x446 (+ 32 x444))) (= x602 x742) (= x732 (mod (* x843 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x466 (- x602 x444)) x769) (= x742 (x446 (+ x539 x801))) (= x678 (x446 (+ x732 x641))) (= x946 (x466 (- x769 32))) (= (x510 x444) x705)) (and x652 (=> (and (= x727 x602) (= (ite (<= x705 32) (x923 (x700 (x160 x911)) 0) (ite (>= 64 x705) (x886 (x700 (x160 x911)) (x700 (x160 (x446 (+ x911 32)))) 0) (ite (>= 96 x705) (x254 (x700 (x160 x911)) (x700 (x160 (x446 (+ 32 x911)))) (x700 (x160 (x446 (+ 64 x911)))) 0) (ite (>= 128 x705) (x251 (x700 (x160 x911)) (x700 (x160 (x446 (+ 32 x911)))) (x700 (x160 (x446 (+ 64 x911)))) (x700 (x160 (x446 (+ 96 x911)))) 0) (ite (<= x705 160) (x213 (x700 (x160 x911)) (x700 (x160 (x446 (+ 32 x911)))) (x700 (x160 (x446 (+ 64 x911)))) (x700 (x160 (x446 (+ x911 96)))) (x700 (x160 (x446 (+ x911 128)))) 0) (ite (<= x705 192) (x533 (x700 (x160 x911)) (x700 (x160 (x446 (+ x911 32)))) (x700 (x160 (x446 (+ 64 x911)))) (x700 (x160 (x446 (+ 96 x911)))) (x700 (x160 (x446 (+ 128 x911)))) (x700 (x160 (x446 (+ 160 x911)))) 0) (ite (>= 224 x705) (x11 (x700 (x160 x911)) (x700 (x160 (x446 (+ x911 32)))) (x700 (x160 (x446 (+ x911 64)))) (x700 (x160 (x446 (+ 96 x911)))) (x700 (x160 (x446 (+ 128 x911)))) (x700 (x160 (x446 (+ 160 x911)))) (x700 (x160 (x446 (+ x911 192)))) 0) (x700 x154)))))))) x537)) x657))) x143))
(assert (= x735 (or x469 x334)))
(assert (x16 x508))
(assert (x16 x745))
(assert (x16 x199))
(assert (x16 x519))
(assert (x16 x861))
(assert (x16 x369))
(assert (= (x155 (x700 x358)) x358))
(assert (x624 x148))
(assert (= (x160 (x446 (+ x911 160))) (x155 (x700 (x160 (x446 (+ 160 x911)))))))
(assert (= (and (not x30) x458) x880))
(assert (x816 x614))
(assert (x16 x439))
(assert (= x658 (or x588 x612)))
(assert (x16 x347))
(assert (x16 x444))
(assert (x16 x266))
(assert (x16 x840))
(assert (= (x884 (x446 (+ 128 x911))) 0))
(assert (x16 x304))
(assert (= (x734 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x700 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x16 x538))
(assert (x16 x372))
(assert (x16 x424))
(assert (x816 x576))
(assert (= x405 (and x295 (not x767))))
(assert (x16 x136))
(assert (x793 x607))
(assert (x816 x556))
(assert (x16 x753))
(assert (x16 x144))
(assert (x16 x363))
(assert (x16 x99))
(assert (x16 x209))
(assert (x896 (x160 (x446 (+ x911 96)))))
(assert (x16 x799))
(assert (x16 x777))
(assert (x16 x476))
(assert (= (x884 (x446 (+ 160 x911))) 0))
(assert (x16 x172))
(assert (x16 x911))
(assert (x16 x365))
(assert (x16 x139))
(assert (= x89 (x155 (x700 x89))))
(assert (x16 x557))
(assert (= 0 (x74 x560)))
(assert (= 0 (x884 (x446 (+ x911 32)))))
(assert (x16 x80))
(assert (=> (<= (x160 x911) 10000) (= (x700 (x160 x911)) (x734 (x160 x911)))))
(assert (= (x700 340282366920938463463374607431768211455) (x734 340282366920938463463374607431768211455)))
(assert (x16 x910))
(assert (= x454 (or x616 x860)))
(assert (x16 x333))
(assert (x16 x742))
(assert (= (div x181 18446744073709551616) (x145 x181 64)))
(assert (x16 x551))
(assert (x16 x252))
(assert (= x836 (and (not x366) x5)))
(assert (x16 x219))
(assert (= x152 (and (not x553) x658)))
(assert (x16 x866))
(assert (= (x155 (x734 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x624 x361))
(assert (x816 x915))
(assert (x16 x462))
(assert (= x780 (and x5 x366)))
(assert (=> (<= x196 10000) (= (x700 x196) (x734 x196))))
(assert (x16 x602))
(assert (x16 x351))
(assert (x16 x151))
(assert (x16 x325))
(assert (x793 x756))
(assert (= (x884 (x446 (+ 64 x911))) 0))
(assert (x16 x227))
(assert (x16 x686))
(assert (x16 x528))
(assert (x793 x787))
(assert (x16 x784))
(assert (= (x155 (x700 x776)) x776))
(assert (x16 x669))
(assert (x16 x845))
(assert (= 3704226421 (x155 (x734 3704226421))))
(assert (x16 x267))
(assert (= (and x83 (not x746)) x922))
(assert (x896 (x160 (x446 (+ x911 160)))))
(assert (x91 x112))
(assert (x16 x89))
(assert (x816 x412))
(assert (= (and x417 x593) x233))
(assert (= (=> (and (= x492 (not (> x414 x849))) (= (or x121 x495) x515) (= x863 (x446 (+ x73 64))) (= (x446 (+ x513 32)) x849) (= (x502 x513) x434) (= x495 (> x863 18446744073709551615)) (= x938 x73) (= x121 (> x73 x863)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x134) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x134) true) (< x134 64)))) (= (x502 x572) x833) (= x557 (ite x515 1 0)) (= x572 x153) (= x557 0) (= x513 (x446 (+ x153 32))) (= (x466 (- x192 x153)) x134) (= (x446 (+ 32 x73)) x895)) (and (=> (= x863 x50) x858) x492)) x129))
(assert (= (x472 x641) 0))
(assert (x896 x619))
(assert (= x224 (and x30 x458)))
(assert (x16 x452))
(assert (x16 x713))
(assert (x16 x797))
(assert (x793 x22))
(assert (x16 x388))
(assert (x16 x556))
(assert (= x847 (or x233 x378)))
(assert (= (x819 x365) 0))
(assert (x16 x206))
(assert (= (x463 x529) 0))
(assert (x16 x729))
(assert (x16 x29))
(assert (x16 x821))
(assert (x16 x906))
(assert (x909 x271))
(assert (x16 x764))
(assert (x16 x192))
(assert (x16 x747))
(assert (x16 x509))
(assert (= 0 (x260 x220)))
(assert (= 4294967295 (x155 (x734 4294967295))))
(assert (x16 x100))
(assert (x16 x524))
(assert (x16 x664))
(assert (x816 x298))
(assert (x16 x162))
(assert (x816 x748))
(assert (= (=> (and (and (<= x276 1461501637330902918203684832716283019655932542975) (>= 4294967295 x904) (= 3250587425 x532) (= x262 x598) (= (div x351 18446744073709551616) x412) (= x349 (x778 x415)) (= x26 x89) (<= 0 x724) (not (= 3110348530 x532)) (<= 0 x812) (<= 0 x688) (= x810 (x256 4294967295 x787)) (= x691 (> (x237 (x700 x744)) 0)) (<= x744 1461501637330902918203684832716283019655932542975) (= x264 (div x696 79228162514264337593543950336)) (<= x711 340282366920938463463374607431768211455) (>= x262 0) (= x535 x372) (= x319 (x498 (x700 x276))) (= (x498 (x700 x744)) x78) (= x351 (x778 x530)) (not (> 3110348530 x532)) (= x120 (x886 (x700 x89) (x700 x168) 0)) (= x738 x231) (= x530 (x818 x415 1)) (= x100 (x736 160)) (<= x724 1461501637330902918203684832716283019655932542975) (= x867 false) (<= 0 x38) (= (x736 256) x837) (>= x190 0) (= (x736 192) x1) (<= 0 x319) (= false x135) (<= 0 x738) (>= x178 0) (= (x498 (x700 x524)) x890) (= x512 x38) (= x168 x419) (<= x178 1461501637330902918203684832716283019655932542975) (not (= x524 x276)) (= x618 false) x377 (< 0 x276) (= x87 0) (= (< 0 (x237 (x700 x276))) x889) (= x391 x34) (>= 1461501637330902918203684832716283019655932542975 x524) (= x634 x688) (not (= x744 x276)) (>= x58 0) (>= x158 0) (= x49 x70) (= (< 0 (x237 (x700 x524))) x377) (>= 1461501637330902918203684832716283019655932542975 x38) (= false x290) (>= 1461501637330902918203684832716283019655932542975 x58) (not (= x524 x744)) (not (< x532 2652930389)) (= x31 3704226421) (<= x688 1461501637330902918203684832716283019655932542975) (= x189 5) (= (x736 224) x379) (>= x890 0) (= (x818 x201 2) x415) (= x535 x158) (= x462 (x256 4294967295 x412)) (= (x256 340282366920938463463374607431768211455 x264) x125) (>= x904 0) (> x744 0) (> 3547226261 x532) (<= x70 1461501637330902918203684832716283019655932542975) (<= 0 x711) (>= 1461501637330902918203684832716283019655932542975 x262) (= x696 (x778 x530)) (not (< x532 1749768213)) (= (x886 (x700 x34) x120 0) x201) (= x787 (div x694 4294967296)) (= x128 (x237 (x700 x524))) x691 (<= x738 1461501637330902918203684832716283019655932542975) (<= x812 1461501637330902918203684832716283019655932542975) (< 0 x128) (= x146 x812) (= x178 x512) (>= x78 0) (= x80 (x736 128)) x889 (= x694 (x778 x530)) (= x511 (x778 x788)) (<= x190 4294967295) (>= x70 0) (= x635 x87) (= x201 x788) (>= 1461501637330902918203684832716283019655932542975 x158) (> x524 0)) (and (and (= x749 x857) x534 (>= x811 0) (not (> 3547226261 x476)) (<= x811 1461501637330902918203684832716283019655932542975) (= x728 (x466 (- x192 4))) x698 (<= x238 1461501637330902918203684832716283019655932542975) (= x15 (< x489 128)) (= x743 x830) (= x850 128) (= (not (= x252 x42)) x344) (= x407 x741) (not (< x476 2652930389)) (not (> 4 x192)) (and (= (<= x192 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x192 163)) (= x857 x396) (= (x446 (+ 4 x941)) x754) (= x745 x452) (not (= x476 3655340144)) (= x568 x619) (>= x749 0) (= (x446 (+ x216 128)) x489) (= x695 x900) (= (> x795 x528) x653) (= x410 x642) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x919) (<= x192 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x192 x919) (= (<= x919 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x192)))) (= x279 (mod (* 32 x322) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x18 (= x253 x221) (<= x749 1461501637330902918203684832716283019655932542975) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x728) (and (= true (<= x728 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x728 160)))) x97 x272 (< 0 x151) (= x373 x930) (= x261 (ite x507 1 0)) (= x565 x221) (= (= x452 x565) x698) (= x288 x122) (= x534 (= x900 x174)) (not (> 1749768213 x476)) (= (not (= x4 x24)) x750) (= x391 x325) (= x528 (x446 (+ 32 x754))) (not (> x941 18446744073709551615)) (= x459 x179) (= x427 x906) (not (> x795 x192)) (<= x549 1461501637330902918203684832716283019655932542975) (not (= 3547226261 x476)) (= x93 (= x578 x209)) (= x355 x105) (= x899 (mod (* 32 x322) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x18 (= x782 x407)) (= x806 x930) x344 (= x745 x241) x848 (= x272 (= x906 x362)) (> 4060098646 x476) (= x848 (not (= x325 x253))) (= x391 x24) (= x151 (x237 (x700 x524))) (= x322 (x502 x754)) (= x910 x137) (= (x446 (+ 32 x279)) x796) (= x362 x830) (= x643 x240) x750 x93 (= x174 x522) (= x391 x252) (= x216 (x256 115792089237316195423570985008687907853269984665640564039457584007913129639904 x271)) (= 0 x261) (= (or x600 x15) x507) (= x97 (= x355 x288)) (= x722 x782) (= x476 3704226421) (= x634 x238) (= x549 x387) (= x762 x910) (= x427 x4) (<= 0 x238) (= x795 (x446 (+ x528 x899))) (= x597 x549) (= x280 x522) (not (> x322 18446744073709551615)) (= x105 x932) (= x574 x619) (= x600 (< 18446744073709551615 x489)) (= x410 x209) (= x271 (x446 (+ 31 x796))) (= x179 0) (= x473 x578) (= x569 x722) (= x42 x122) (= (x446 (+ 31 x754)) x919)) (and (<= x367 1461501637330902918203684832716283019655932542975) (< 0 x623) (= (x552 256) x677) (< x669 2652930389) (>= 1461501637330902918203684832716283019655932542975 x52) (= (x127 128) x67) (not (or (and (> 64 x943) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x943) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x943))) (>= x758 0) (= x175 (x775 288)) (= x634 x758) (= 192 x931) (= (x296 160) x436) (= x642 (x526 608)) (= x396 x440) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x596) true) (< x596 192)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x596))) (and (= (<= x192 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 195 x192)) (= x280 (x526 544)) (= 256 x437) (= x100 x659) (= x669 1960939212) (= x241 (x526 640)) (not (> 4 x192)) (= x623 (x237 (x700 x524))) (= (x466 (- x192 132)) x943) (= x743 (x526 576)) (= x569 (x526 672)) (= 128 x845) (<= 0 x367) (<= 0 x52) (= x840 x80) (not (= 1960641893 x669)) (not (or (> x28 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x28 64) (= (<= x28 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= 192 x27) (= 128 x162) (= x395 0) (= x440 x52) (not (< x669 1749768213)) (= x395 x459) (= x730 (x687 224)) (= (x466 (- x192 4)) x596) (not (< x669 1960641893)) (= x147 (x141 192)) (> 2220280665 x669) (= x28 (x466 (- x192 68))) (>= 1461501637330902918203684832716283019655932542975 x758) (= x932 (x526 512)) (= x9 256)))) (and (=> (and (= x489 x444) (not x653)) x644) (=> (and x653 (and (= (x446 (+ 31 x315)) x699) (= x63 (x446 (+ 31 x542))) (= (> x912 x73) x321) (= x318 (x256 115792089237316195423570985008687907853269984665640564039457584007913129639904 x63)) (= x414 (x446 (+ x792 x153))) (= x234 (x466 (- x192 x159))) (= x73 (x446 (+ x912 x318))) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234) (and (> 128 x234) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234) true)))) (= x489 x447) (not (> x118 18446744073709551615)) (= (x446 (+ x29 32)) x566) (= (x446 (+ x528 x505)) x29) (= x877 (< 18446744073709551615 x912)) (= x421 (< 18446744073709551615 x73)) (= (x502 x29) x544) (= (or x869 x877) x223) (not (< 18446744073709551615 x505)) (or (and (< x699 x192) (= (<= x699 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x192))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x699) (<= x192 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x442 0) (= x159 (x446 (+ x505 x528))) (= (or x421 x321) x46) (= (< x912 x489) x869) (= x542 (x446 (+ 32 x119))) (= x505 (x502 x528)) (= (ite x46 1 0) x287) (= x442 (ite x223 1 0)) (not (< 18446744073709551615 x808)) (= (x502 x566) x808) (= x309 (> x414 x153)) (not (> x414 x192)) (= x153 (x446 (+ x315 32))) (= x912 (x446 (+ 128 x489))) (= (x502 x315) x118) (= (mod (* x118 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x119) (= 0 x287) (= x315 (x446 (+ x29 x808))) (= (x446 (+ 32 x912)) x797) (= x792 (mod (* x118 64) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and (=> x309 x129) (=> (and (not x309) (= x50 x73)) x858))))) x346))
(assert (x16 x676))
(assert (x816 x584))
(assert (x16 x699))
(assert (x91 x381))
(assert (x16 x849))
(assert (x16 x895))
(assert (x16 x23))
(assert (= (=> (and (= x170 x491) (= x491 x541) (= (x446 (+ x491 32)) x418) (= (x256 4294967295 x291) x866) (= x520 (x446 (+ 32 x491))) (= (= x19 64) x116) (= (ite (= x541 0) x426 (ite (= 32 x541) (x155 x944) (ite (= x541 64) x491 (x481 x541)))) x604) (= (ite (= 0 x418) x426 (ite (= 32 x418) (x155 x944) (ite (= x418 64) x491 (x481 x418)))) x814) (= x19 64)) (and (=> (and (= x879 false) (= false x398)) x671) x116)) x575))
(assert (x16 x820))
(assert (x16 x331))
(assert (x793 x298))
(assert (x16 x586))
(assert (= x907 (=> (and (= (x256 340282366920938463463374607431768211455 x692) x550) (= x409 x98) (= (+ x838 x314) x409) (= x838 x303) (= x314 x550) (>= 340282366920938463463374607431768211455 x98) (< (+ x303 x550) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x62)))
(assert (x816 x761))
(assert (x91 x789))
(assert (= 4060098646 (x155 (x734 4060098646))))
(assert (x16 x940))
(assert (x16 x632))
(assert (x16 x55))
(assert (x16 x500))
(assert (x16 x839))
(assert (x16 x568))
(assert (= 0 (x472 x305)))
(assert (x16 x527))
(assert (=> (<= x744 10000) (= (x734 x744) (x700 x744))))
(assert (x16 x437))
(assert (x16 x874))
(assert (x16 x391))
(assert (x16 x273))
(assert (= (=> (and (= (x886 (x700 x619) x704 0) x45) (= (> x525 0) x767) (= x358 x419) (= x45 x703) (= (x778 x703) x654) (= x704 (x886 (x700 x247) (x700 x358) 0)) (= (x109 128) x525) (= (x778 (x700 x302)) x891) (= x302 x430) (= x247 (x256 1461501637330902918203684832716283019655932542975 x549)) (= (x256 255 x891) x433) (= x433 0)) (and (=> (and (and (= (x370 160) x639) (= x508 (x591 x519)) (= (x717 x292) x870) (= (x446 (+ x639 32)) x292) (= (x109 128) x397) (< 0 x397) (= (x368 x870) x439) (= x639 x519) (= (= x439 0) x723)) x767) (and (=> (and x723 (and (= x647 (x700 x508)) (= x444 x257))) x39) (=> (and (and (= x508 0) (= x328 (x717 x292)) (= x831 (= x12 0)) (= x12 (x368 x328))) (not x723)) (and (=> (and x831 (and (= x537 (x734 0)) (= x444 x727))) x657) (=> (and (not x831) (and (= (x446 (+ 32 x328)) x641) (= x673 (x446 (+ x444 64))) (= (x446 (+ 32 x673)) x801) (= (> x843 0) x366) (= (x368 x328) x843) (= x873 (x446 (+ 32 x444))))) (and (=> x366 x945) (=> (and (and (= x798 0) (= x602 x801) (= x864 x641)) (not x366)) x143))))))) (=> (and (and (= x491 x444) (= x126 (x700 x910))) (not x767)) x605))) x644))
(assert (x16 x345))
(assert (x16 x650))
(assert (x816 x702))
(assert (x793 x350))
(assert (x16 x289))
(assert (x16 x744))
(assert (x16 x491))
(assert (x16 x318))
(assert (= 0 (x463 x714)))
(assert (x16 x811))
(assert (x16 x721))
(assert (x16 x667))
(assert (x816 x350))
(assert (= (x145 x307 64) (div x307 18446744073709551616)))
(assert (= 0 (x260 x870)))
(assert (x816 x549))
(assert (x896 (x160 (x446 (+ x911 128)))))
(assert (= (or x308 x606) x37))
(assert true)
(assert (x896 x247))
(assert (x16 x774))
(assert (x91 x404))
(assert (x16 x326))
(assert (= x825 (=> (and (or (and x493 (and (= (x501 x948) x345) (= x948 x868) (= x451 (x886 (x700 x930) (x700 x776) 0)) (< (+ x184 x186) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x818 x451 1) x301) (= (x501 x948) x35) (<= x729 340282366920938463463374607431768211455) (= x874 x729) (= x944 x301) (= x139 x776) (= x247 x426) (= x207 x184) (= x868 (x886 (x700 x247) x301 0)) (= x729 (+ x901 x207)) (= x13 (x256 115792089237316195423570985008687907852929702298719625575994209400481361428480 x345)) (= x488 (x446 (+ x874 x13))) (= (x256 340282366920938463463374607431768211455 x35) x184) (= x491 x311) (= x901 x186))) (and (not x493) (and (= x426 x331) (= x944 x562)))) (and (= x493 (< 0 x186)) (= x101 (x446 (+ x491 32))) (= (x256 4294967295 x291) x523) (= x491 x66))) x575)))
(assert (= (and x548 x81) x72))
(assert (x16 x247))
(assert (x16 x53))
(assert (x16 x280))
(assert (= 1000000000000000000 (x155 (x734 1000000000000000000))))
(assert (= (x260 x536) 0))
(assert (x16 x188))
(assert (x16 x589))
(assert (x399 x891))
(assert (x624 x112))
(assert (x16 x41))
(assert (x816 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x816 x227))
(assert (x624 x404))
(assert (x16 x608))
(assert (x16 x511))
(assert (x16 x769))
(assert (x16 x211))
(assert (x816 x551))
(assert (x816 x404))
(assert (x91 x802))
(assert (= (x472 x2) 0))
(assert (=> (<= x654 10000) (= (x700 x654) (x734 x654))))
(assert (x16 x410))
(assert (= (x155 (x700 x538)) x538))
(assert (x816 4294967295))
(assert (x16 x299))
(assert (x16 x489))
(assert (x16 x894))
(assert (x16 x663))
(assert (x16 x229))
(assert (x16 x317))
(assert (x16 x812))
(assert (x16 x13))
(assert (x816 x204))
(assert (x816 x271))
(assert (x793 x667))
(assert (x816 x666))
(assert (x16 x862))
(assert (x16 x330))
(assert (=> (>= 10000 x302) (= (x734 x302) (x700 x302))))
(assert (= (x700 2113632) (x734 2113632)))
(assert (x793 x227))
(assert (x16 x539))
(assert (x16 x259))
(assert (x16 x133))
(assert (= (and x548 (not x81)) x449))
(assert (= (x871 x519) 0))
(assert (=> (>= 10000 x276) (= (x700 x276) (x734 x276))))
(assert (x16 x841))
(assert (x793 x614))
(assert (= (or x405 x665) x340))
(assert (x16 x6))
(assert (x16 x640))
(assert (=> (<= x508 10000) (= (x700 x508) (x734 x508))))
(assert (x16 x804))
(assert (x16 x525))
(assert (x16 x927))
(assert (= (x155 (x734 2652930389)) 2652930389))
(assert (= (x700 1000000000000000000) (x734 1000000000000000000)))
(assert (x896 x336))
(assert (x16 x32))
(assert (x16 x776))
(assert (x793 x761))
(assert (x16 x628))
(assert (x16 x441))
(assert (= (x155 (x700 x10)) x10))
(assert (x16 x178))
(assert (= (x155 (x700 x336)) x336))
(assert (x16 x875))
(assert (=> (>= 10000 x10) (= (x734 x10) (x700 x10))))
(assert (x16 x447))
(assert (x16 x558))
(assert (x16 x374))
(assert (x896 (x160 (x446 (+ x911 32)))))
(assert (x16 x535))
(assert (= 0 (x260 x947)))
(assert (x16 x423))
(assert (= (x155 (x700 x744)) x744))
(assert (x16 x798))
(assert (= 0 (x631 x622)))
(assert (x16 x660))
(assert (= 0 (x472 x620)))
(assert (= (x463 x76) 0))
(assert (x16 x339))
(assert (x16 x555))
(assert (x896 x77))
(assert (= (x734 4294967296) (x700 4294967296)))
(assert (x16 x416))
(assert (x16 x217))
(assert (x16 x946))
(assert (x896 x744))
(assert (x16 x315))
(assert (= (x700 3110348530) (x734 3110348530)))
(assert (= (or x152 x922 x790) x670))
(assert (x16 x621))
(assert (x16 x499))
(assert (x16 x319))
(assert (x16 x185))
(assert (= (x155 (x700 (x160 (x446 (+ x911 96))))) (x160 (x446 (+ 96 x911)))))
(assert (= x588 (and x880 (not x615))))
(assert (x16 x238))
(assert (=> (<= x358 10000) (= (x734 x358) (x700 x358))))
(assert (= (x700 3547226261) (x734 3547226261)))
(assert (x793 x872))
(assert (= (x700 1960641893) (x734 1960641893)))
(assert (x16 x939))
(assert (= (and x925 x341) x675))
(assert (= (x155 (x700 (x160 (x446 (+ x911 32))))) (x160 (x446 (+ 32 x911)))))
(assert (= (and (not x171) x340) x656))
(assert (x16 x754))
(assert (x16 x450))
(assert (x16 x648))
(assert (=> (>= 10000 x461) (= (x734 x461) (x700 x461))))
(assert (x16 x276))
(assert (x16 x149))
(assert (x816 115792089237316195423570985008687907853269984665640564039457584007908834672640))
(assert (= (x155 (x734 79228162514264337593543950336)) 79228162514264337593543950336))
(assert (x16 x596))
(assert (x91 x324))
(assert (x16 x19))
(assert (x793 x267))
(assert (= (x155 (x734 3547226261)) 3547226261))
(assert (= (=> (= (not (> x246 x752)) x564) (and x564 (=> (= x752 x777) x781))) x937))
(assert (= (x472 x482) 0))
(assert (= (x700 2220280665) (x734 2220280665)))
(assert (x793 x666))
(assert (= 2113632 (x155 (x700 2113632))))
(assert (x16 x356))
(assert (x16 x27))
(assert (= (and x383 (not x309)) x606))
(assert (x16 x67))
(assert (x896 (x160 (x446 (+ x911 192)))))
(assert (= (=> (and (= x908 (x256 4294967295 x240)) (= (mod x32 x357) x474) (< 0 x357) (= x942 (x256 4294967295 x474)) (not (> x942 x908)) (= x419 x336) (= (ite (< 0 x829) (< (x256 4294967295 x450) (x256 4294967295 x240)) (< 0 x829)) x171) (= x633 (x818 x913 1)) (= (ite (< x215 x779) x914 x215) x450) (= (x886 (x700 x619) x633 0) x516) (= (x778 x516) x204) (= x357 (x256 4294967295 x760)) (= (x256 4294967295 x204) x215) (= x829 (x109 128)) (= x126 (x700 x654)) (= x913 (x886 (x700 x930) x755 0)) (= x914 (x466 (- x908 x942))) (= x779 (x256 4294967295 x914)) (= (x886 (x700 x247) (x700 x336) 0) x755) (= x32 (x256 4294967295 x240))) (and (=> (and (not x171) (and (= x186 0) (= x450 x291))) x115) (=> (and x171 (and (> x71 x680) (= (mod (* 32 x680) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x90) (= (x466 (- x829 1)) x680) (= x560 (x446 (+ x406 32))) (= x304 (x446 (+ x90 32))) (= (x370 x632) x406) (= (x717 x560) x947) (not (= 0 x829)) (= (= x235 0) x341) (= x632 (x446 (+ x304 128))) (= x235 (x368 x947)) (= (x109 128) x71))) (and (=> (and (not x341) (and (= (< 0 x689) x626) (= (x717 x560) x220) (= x689 (x368 x220)))) (and (=> (and (= 0 x747) (not x626)) x48) (=> (and x626 (and (and (= x219 (x446 (+ 32 x320))) (= (x403 x2) x846) (= (x573 x660) x113) (= x242 (div x218 2)) (= x218 x689) (not (< x826 0)) (= x826 (x466 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x689))) (= (x368 x220) x936) (= x320 (mod (* x242 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x242 x936) (= x2 (x446 (+ x219 x220))) (= (> x930 x113) x737) (= x846 x660)) (or (and (not x737) (and (= x443 0) (= x242 x326))) (and x737 (and (= x898 x443) (= x326 x689) (= (x446 (+ x242 1)) x898)))))) x707))) (=> (and x341 (and (= x303 0) (= x655 x450))) x338))))) x605))
(assert (x375 x345))
(assert (x16 x312))
(assert (= 0 (x448 x632)))
(assert (x16 x50))
(assert (x816 115792089237316195423570985008687907852929702298719625575994209400481361428480))
(assert (= (x145 x611 32) (div x611 4294967296)))
(assert (x16 x673))
(assert (x91 x648))
(assert (x16 x854))
(assert (x16 x235))
(assert (= (x734 4060098646) (x700 4060098646)))
(assert (x16 x218))
(assert (x16 x384))
(assert (= 2113632 (x155 (x734 2113632))))
(assert (x16 x514))
(assert (x16 x629))
(assert (x16 x715))
(assert (= (x463 x708) 0))
(assert (x16 x941))
(assert (= (or x445 x675) x772))
(assert (x16 x899))
(assert (x16 x350))
(assert (x16 x850))
(assert (x816 x667))
(assert (x16 x140))
(assert (=> (<= (x160 (x446 (+ 128 x911))) 10000) (= (x700 (x160 (x446 (+ 128 x911)))) (x734 (x160 (x446 (+ x911 128)))))))
(assert (= (and x394 x772) x458))
(assert (x16 x817))
(assert (x793 x412))
(assert (x896 x776))
(assert (x16 x404))
(assert (x16 x603))
(assert (x16 x892))
(assert (= x461 (x155 (x700 x461))))
(assert (= (and x847 x493) x313))
(assert (= (x155 (x734 3110348530)) 3110348530))
(assert (x16 x265))
(assert (x16 x124))
(assert (x16 x641))
(assert (= x275 (and x737 x161)))
(assert (x16 x932))
(assert (x16 x2))
(assert (x16 x546))
(assert (= (x155 (x818 x478 1)) (+ (x155 x478) 1)))
(assert (x16 x465))
(assert (x16 x620))
(assert (x16 x883))
(assert (x816 x872))
(assert (x16 x566))
(assert (x793 x474))
(assert (x16 x578))
(assert (=> (>= 10000 (x160 (x446 (+ 160 x911)))) (= (x734 (x160 (x446 (+ x911 160)))) (x700 (x160 (x446 (+ 160 x911)))))))
(assert (x16 x397))
(assert (x16 x549))
(assert (=> (<= x154 10000) (= (x700 x154) (x734 x154))))
(assert (x91 x692))
(assert (x16 x766))
(assert (x816 x802))
(assert (x16 x336))
(assert (x16 x743))
(assert (x16 x716))
(assert (x16 x249))
(assert (x16 x792))
(assert (x16 x779))
(assert (x16 x104))
(assert (x16 x71))
(assert (x16 x78))
(assert (x16 x522))
(assert (x16 x357))
(assert (= (x160 (x446 (+ x911 128))) (x155 (x700 (x160 (x446 (+ x911 128)))))))
(assert (= (x155 (x734 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x16 x810))
(assert (x16 x749))
(assert (x816 x264))
(assert (x16 x891))
(assert (x16 x47))
(assert (x16 x597))
(assert (x16 x794))
(assert (x16 x864))
(assert (x16 x708))
(assert (x16 x137))
(assert (= x445 (or x72 x449 x130)))
(assert (= (and x340 x171) x925))
(assert (x16 x732))
(assert (x16 x531))
(assert (x16 x915))
(assert (x16 x278))
(assert (= (x155 (x700 (x160 (x446 (+ x911 192))))) (x160 (x446 (+ x911 192)))))
(assert (= (x155 (x700 (x160 x911))) (x160 x911)))
(assert (x816 x787))
(assert (= (=> (and (= (x256 4294967295 x603) x244) (= (x638 x888) x227) (= (x256 4294967295 x584) x423) (= x621 (x256 4294967295 x589)) (= (x466 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x278)) x352) (= (x446 (+ x709 x99)) x195) (= x851 (div x374 1000000000000000000)) (not (< x352 0)) (= (x256 4294967295 x450) x230) (= x229 (mod (* (mod x805 x725) x33) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x607 (x145 x611 32)) (= (x368 x536) x36) (= (x466 (- x894 x369)) x173) (= x332 (div x401 1000000000000000000)) (= (= x509 x108) x456) (= (x446 (+ x621 x94)) x509) (= (x638 x888) x181) (= (ite (> x230 x883) x450 x589) x584) (= (x256 4294967295 x760) x725) (= (x638 x888) x611) (= (ite (= x881 0) x64 x607) x589) (= x888 (x446 (+ 32 x470))) (= (div x805 x725) x894) (= (ite (> x43 x244) (x256 4294967295 x603) x43) x277) (= x99 (div x229 1000000000000000000)) (= (mod (* x725 x33) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x374) (= x278 x710) (= x497 (ite (< x277 x423) (x256 4294967295 x584) x277)) (= x883 (x256 4294967295 x589)) (= x465 (x256 4294967295 x584)) (= (x466 (- x195 x332)) x278) (= (div x465 x725) x369) (= (not (< x820 x36)) x773) (= (ite (ite x456 x456 (> x509 (x256 4294967295 x103))) (x256 4294967295 x103) x509) x43) (= (x256 4294967295 x589) x108) (= x401 (mod (* x33 (mod x465 x725)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x446 (+ x777 1)) x820) (= (x256 4294967295 x227) x94) (= (x256 4294967295 x607) x881) (= x805 (x256 4294967295 x497)) (= (x145 x181 64) x33) (= x709 (mod (* x173 x851) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (=> (= x710 x692) x907) x773)) x385))
(assert (x16 x881))
(assert (x16 x419))
(assert (x16 x125))
(assert (x816 x789))
(assert (= x580 (and x295 x767)))
(assert (x16 x484))
(assert (= 0 (x74 x292)))
(assert (x91 x35))
(assert (x896 x654))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x155 (x734 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (=> (>= 10000 x77) (= (x700 x77) (x734 x77))))
(assert (x16 x195))
(assert (x16 x261))
(assert (x16 x418))
(assert (x16 x560))
(assert (x16 x929))
(assert (=> (<= x336 10000) (= (x700 x336) (x734 x336))))
(assert (= x930 (x155 (x700 x930))))
(assert (x16 x263))
(assert (x16 x431))
(assert (x16 x739))
(assert (= 0 (x884 (x446 (+ 96 x911)))))
(assert (x16 x757))
(assert (x16 x852))
(assert (x793 x240))
(assert (x16 x362))
(assert (x16 x655))
(assert (= x17 (x155 (x700 x17))))
(assert (= 0 (x260 x328)))
(assert (x896 x302))
(assert (x793 x425))
(assert (x16 x264))
(assert (x16 x619))
(assert (x16 x689))
(assert (x16 x234))
(assert (x16 x518))
(assert (x16 x69))
(assert (x16 x14))
(assert (x16 x118))
(assert (x16 x752))
(assert (x16 x480))
(assert (= (or x376 x824) x665))
(assert (x16 x846))
(assert (x16 x919))
(assert (x16 x169))
(assert (x16 x250))
(assert (=> (<= x168 10000) (= (x734 x168) (x700 x168))))
(assert (= (x155 (x818 x380 1)) (+ (x155 x380) 1)))
(assert (x16 x181))
(assert (x16 x292))
(assert (x16 x604))
(assert (x16 x8))
(assert (x16 x90))
(assert (x16 x701))
(assert (x16 x942))
(assert (x896 x930))
(assert (x16 x770))
(assert (x16 x110))
(assert (= (and x417 (not x593)) x378))
(assert (= (=> (and (= (x446 (+ 32 x136)) x940) (= x265 (x446 (+ 32 x629))) (= (not (> x795 x217)) x165) (= x217 (x446 (+ x528 32))) (= x629 (x446 (+ 32 x489))) (<= x640 4294967295) (= (x446 (+ x265 32)) x347) (= x136 (x446 (+ 32 x566))) (= x715 (x502 x940)) (= x640 (x502 x136)) (<= x715 4294967295)) (and (=> (= x444 x50) x644) x165)) x858))
(assert (x816 x766))
(assert (x16 x303))
(assert (x16 x679))
(assert (x816 x692))
(assert (x896 x276))
(assert (= (x734 1461501637330902918203684832716283019655932542975) (x700 1461501637330902918203684832716283019655932542975)))
(assert (x16 x760))
(assert (= x707 (=> (= x763 (not (< x443 x326))) (and x763 (=> (= x747 x443) x48)))))
(assert (x816 x760))
(assert (x896 2113632))
(assert (= x383 (and x653 x547)))
(assert (x816 x269))
(assert (=> (>= 10000 x17) (= (x700 x17) (x734 x17))))
(assert (x16 x813))
(assert (x16 x938))
(assert (= (x155 (x818 x380 4)) (+ (x155 x380) 4)))
(assert (x16 x154))
(assert (x896 x10))
(assert (x16 x890))
(assert (=> (>= 10000 (x160 (x446 (+ 32 x911)))) (= (x734 (x160 (x446 (+ x911 32)))) (x700 (x160 (x446 (+ 32 x911)))))))
(assert (x16 x33))
(assert (x16 x574))
(assert (x16 x851))
(assert (x16 x316))
(assert (x16 x287))
(assert (x16 x479))
(assert (x16 x436))
(assert (x816 x914))
(assert (x16 x105))
(assert (x16 x190))
(assert (x16 x532))
(assert (= 0 (x706 x384)))
(assert (x793 x450))
(assert (x16 x529))
(assert (x16 x283))
(assert (x16 x623))
(assert (= 1960641893 (x155 (x734 1960641893))))
(assert (x16 x936))
(assert (x16 x565))
(assert (x16 x335))
(assert (x16 x714))
(assert (x16 x782))
(assert (x793 x914))
(assert (x16 x898))
(assert (= (x734 115792089237316195423570985008687907852929702298719625575994209400481361428480) (x700 115792089237316195423570985008687907852929702298719625575994209400481361428480)))
(assert (=> (<= x538 10000) (= (x700 x538) (x734 x538))))
(assert (x16 x257))
(assert (x16 x504))
(assert (x793 x584))
(assert (x816 x240))
(assert (x16 x724))
(assert (x16 x88))
(assert (x16 x947))
(assert (= (=> (and (= x927 (x256 4294967295 x240)) (= x655 (ite x65 x643 x450)) (= x284 (x256 340282366920938463463374607431768211455 x802)) (= x303 x88) (not (< x504 0)) (= x628 (x256 4294967295 x450)) (= (x466 (- 340282366920938463463374607431768211455 x284)) x504) (= x284 x88) (= (< x628 x927) x65)) x338) x517))
(assert (= (x155 (x700 x196)) x196))
(assert (= (x630 x541) 0))
(assert (= (and (not x653) x547) x389))
(assert (x16 x320))
(assert (x16 x918))
(assert (= x910 (x155 (x700 x910))))
(assert (x16 x709))
(assert (x16 x651))
(assert (= x490 (and x615 x880)))
(assert (x375 x748))
(assert (x91 x551))
(assert (= x295 (or x389 x37)))
(assert (x16 x361))
(assert (= (x819 x888) 0))
(assert (x896 x154))
(assert (x16 x570))
(assert (x16 x433))
(assert (= 18446744073709551615 (x155 (x734 18446744073709551615))))
(assert (x16 x731))
(assert (x793 x603))
(assert (x16 x692))
(assert (x16 x244))
(assert (x16 x180))
(assert (x816 x6))
(assert (x375 x556))
(assert (x16 x726))
(assert (x16 x332))
(assert (= 0 (x631 x133)))
(assert (= x83 (and x658 x553)))
(assert (x16 x758))
(assert (x16 x277))
(assert (x16 x26))
(assert (= x417 (or x656 x208)))
(assert (= 340282366920938463463374607431768211456 (x155 (x734 340282366920938463463374607431768211456))))
(assert (= (=> (and (= (x921 x76) x199) (= (x368 x220) x663) (= (x446 (+ 32 x560)) x76) (= (> x663 x747) x132) (= x197 (x446 (+ 32 x76))) (= (x720 x197) x267)) (and (=> (and (= 0 x802) (not x132)) x517) (=> (and x132 (and (= (mod (* 32 x747) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x929) (= x651 x386) (= (= x928 x930) x81) (= (x446 (+ x220 x713)) x620) (> x682 x747) (= x682 (x368 x220)) (= (x403 x620) x386) (= x713 (x446 (+ 32 x929))) (= (x573 x651) x928))) (and (=> x81 x768) (=> (and (= x802 0) (not x81)) x517))))) x48))
(assert (x16 x762))
(assert (x16 x488))
(assert (x896 (x160 (x446 (+ 64 x911)))))
(assert (x16 x31))
(assert (x16 x179))
(assert (x16 x807))
(assert (= (x155 (x734 57896044618658097711785492504343953926634992332820282019728792003956564819968)) 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x16 x550))
(assert (x816 x148))
(assert (x16 x228))
(assert (x16 x622))
(assert (=> (<= x776 10000) (= (x700 x776) (x734 x776))))
(assert (= (+ (x155 x201) 2) (x155 (x818 x201 2))))
(assert (x16 x474))
(assert (x16 x569))
(assert (x16 x711))
(assert (x16 x9))
(assert (x16 x829))
(assert (x16 x268))
(assert (x16 x801))
(assert (= (x700 115792089237316195423570985008687907853269984665640564039457584007908834672640) (x734 115792089237316195423570985008687907853269984665640564039457584007908834672640)))
(assert (x16 x659))
(assert (x91 x264))
(assert (x16 x482))
(assert (= x790 (and x746 x83)))
(assert (x16 x108))
(assert (=> (>= 10000 x930) (= (x734 x930) (x700 x930))))
(assert (x16 x730))
(assert (x16 x38))
(assert (= (and x239 x831) x306))
(assert (x91 x483))
(assert (= (x74 x225) 0))
(assert (x16 x395))
(assert (x16 x440))
(assert (x16 x170))
(assert (x16 x872))
(assert (x16 x269))
(assert (x16 x513))
(assert (= (or x453 x487) x612))
(assert (x16 x174))
(assert (x16 x288))
(assert (=> (>= 10000 x524) (= (x700 x524) (x734 x524))))
(assert (x16 x459))
(assert (x16 x635))
(assert (x16 x682))
(assert (x16 x183))
(assert (x16 x248))
(assert (= x400 (and x925 (not x341))))
(assert (x16 x407))
(assert (= (=> (and (= (mod (* x765 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x289) (= x765 (x466 (- x424 x124))) (= x359 (x446 (+ x386 32))) (= (x446 (+ x747 1)) x206) (= x185 (x256 4294967295 x350)) (= x761 (ite (= 0 x172) x199 x872)) (= x350 (ite (> x759 x281) x450 x761)) (= x172 (x256 4294967295 x872)) (= x41 (x466 (- x558 x60))) (= (x256 4294967295 x350) x817) (= x949 (x145 x307 64)) (= (x256 4294967295 x269) x672) (= x531 (x256 4294967295 x761)) (= x425 (x638 x359)) (= (x256 4294967295 x760) x205) (= (ite (ite x920 x920 (< (x256 4294967295 x267) x803)) (x256 4294967295 x267) x803) x599) (= x759 (x256 4294967295 x450)) (not (> 0 x54)) (= x827 (ite (> x599 x268) (x256 4294967295 x240) x599)) (= (x446 (+ x312 x289)) x558) (= x124 (div x817 x205)) (= x690 (x256 4294967295 x425)) (= x920 (= x803 x531)) (= (not (< x206 x79)) x617) (= x586 x41) (= x939 (x256 4294967295 x761)) (= (x466 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x41)) x54) (= (ite (> x185 x827) (x256 4294967295 x350) x827) x269) (= (x145 x862 32) x872) (= x424 (div x672 x205)) (= x281 (x256 4294967295 x761)) (= (x368 x220) x79) (= x803 (x446 (+ x690 x939))) (= (div x609 1000000000000000000) x312) (= (x256 4294967295 x240) x268) (= (mod (* x949 (mod x817 x205)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x477) (= (x638 x359) x862) (= x307 (x638 x359)) (= (div x53 1000000000000000000) x259) (= (mod (* (mod x672 x205) x949) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x609) (= (div x477 1000000000000000000) x60) (= (mod (* x205 x949) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x53)) (and x617 (=> (= x586 x802) x517))) x768))
(assert (x16 x212))
(assert (x816 x180))
(assert (x16 x690))
(assert (= (x700 79228162514264337593543950336) (x734 79228162514264337593543950336)))
(assert (x816 x63))
(assert (= (x155 (x734 3250587425)) 3250587425))
(assert (x16 x66))
(assert (x16 x387))
(assert (x16 x253))
(assert (x16 x298))
(assert (x896 (x160 x911)))
(assert (x16 x694))
(assert (x816 x381))
(assert (x16 x442))
(assert (= (x734 18446744073709551615) (x700 18446744073709551615)))
(assert (x16 x636))
(assert (=> (<= x317 10000) (= (x734 x317) (x700 x317))))
(assert (x16 x738))
(assert (x16 x434))
(assert (x16 x642))
(assert (x16 x800))
(assert (x16 x122))
(assert (x16 x908))
(assert (x16 x52))
(assert (x16 x672))
(assert (x16 x837))
(assert (x16 x28))
(assert (x16 x305))
(assert (= 0 (x706 x651)))
(assert (x896 x168))
(assert (= (and (not x723) x580) x239))
(assert (x16 x949))
(assert (= x945 (=> (and (= x438 (not (< 1 x843))) (= (x573 x335) x484) (= x245 (x446 (+ 32 x608))) (= (x403 x641) x61) (= (x446 (+ x801 32)) x608) (= x61 x335) (= x875 (x638 x365)) (= x114 x801) (= (x446 (+ x61 32)) x365) (= x243 (x446 (+ 32 x641)))) (and x438 (=> (and (= x245 x602) (= 1 x798) (= x864 x243)) x143)))))
(assert (x16 x834))
(assert (x16 x796))
(assert (x16 x128))
(assert (x16 x119))
(assert (= 0 (x630 x418)))
(assert (x16 x541))
(assert (x896 x508))
(assert (= (x734 340282366920938463463374607431768211456) (x700 340282366920938463463374607431768211456)))
(assert (= (x155 (x700 x247)) x247))
(assert (x16 x285))
(assert (x16 x477))
(assert (x16 x728))
(assert (= (x700 4294967294) (x734 4294967294)))
(assert (x16 x468))
(assert (x16 x58))
(assert (=> (>= 10000 (x160 (x446 (+ x911 192)))) (= (x700 (x160 (x446 (+ 192 x911)))) (x734 (x160 (x446 (+ x911 192)))))))
(assert (x16 x297))
(assert (x793 x915))
(assert (x816 x664))
(assert (x16 x386))
(assert (x16 x64))
(assert (x16 x401))
(assert (x816 x483))
(assert (x16 x859))
(assert (x16 x802))
(assert (x16 x497))
(assert (x16 x645))
(assert (= (x448 160) 0))
(assert (x16 x826))
(assert (x16 x733))
(assert (x16 x381))
(assert (x16 x148))
(assert (x16 x61))
(assert (x16 x360))
(assert (x16 x512))
(assert (x16 x243))
(assert (x91 x180))
(assert (x16 x563))
(assert (x16 x832))
(assert (x16 x75))
(assert (x16 x22))
(assert (=> (>= 10000 x247) (= (x700 x247) (x734 x247))))
(assert (x16 x63))
(assert (x16 x73))
(assert (x16 x677))
(assert (x16 x795))
(assert (x16 x599))
(assert (x16 x806))
(assert (x16 x245))
(assert (x16 x543))
(assert (x16 x756))
(assert (x16 x197))
(assert (x16 x486))
(assert (x329 x549))
(assert (x16 x35))
(assert (x816 x648))
(assert (x16 x294))
(assert (= (x155 (x818 x415 1)) (+ 1 (x155 x415))))
(assert (x16 x153))
(assert (x16 x184))
(assert (x896 x196))
(assert (= (+ 2 (x155 x577)) (x155 (x818 x577 2))))
(assert (= false x62))
(assert (x16 x390))
(assert (x16 x20))
(assert (x16 x412))
(assert (x16 x284))
(assert (x16 x203))
(assert (x16 x230))
(assert (x16 x21))
(assert (= x469 (or x313 x662)))
(assert (x16 x34))
(assert (= (and x580 x723) x824))
(assert (x16 x406))
(assert (x816 x324))
(assert (x16 x189))
(assert (x16 x198))
(assert (x16 x36))
(assert (x816 x603))
(assert (x16 x87))
(assert (= (x155 (x734 1960939212)) 1960939212))
(assert (x16 x827))
(assert (x16 x158))
(assert (x16 x114))
(assert (x16 x70))
(assert (= x935 (x155 (x700 x935))))
(assert (= x944 (x700 (x155 x944))))
(assert (x16 x643))
(assert (x16 x196))
(assert (x16 x639))
(assert (= (x155 (x734 4294967294)) 4294967294))
(assert (x16 x822))
(assert (x896 x524))
(assert (x16 x917))
(assert (x16 x359))
(assert (x16 x494))
(assert (= (x700 3250587425) (x734 3250587425)))
(assert (x16 x51))
(assert (x16 x931))
(assert (= 2220280665 (x155 (x734 2220280665))))
(assert (x624 x648))
(assert (=> (>= 10000 x619) (= (x734 x619) (x700 x619))))
(assert (= 0 (x884 x911)))
(assert (= x547 true))
(assert (x91 x576))
(assert (= (=> (and (or (and (and (= x786 x562) (= x331 x619)) x593) (and (and (= x935 x331) (= (x446 (+ x828 x500)) x892) (= (x193 x7) x6) (= x721 (mod (* x841 x211) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x148 (x610 x835)) (= (x256 340282366920938463463374607431768211455 x6) x595) (= (x256 340282366920938463463374607431768211455 x551) x500) (= (ite (= 0 x200) 0 (ite (= (< x200 57896044618658097711785492504343953926634992332820282019728792003956564819968) true) (div (ite (< x200 57896044618658097711785492504343953926634992332820282019728792003956564819968) x200 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x200 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x200) x200 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x200 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x250) (= x316 (x193 x7)) (= (x256 4294967295 x702) x538) (= (div x110 x285) x356) (= x613 x562) (= (mod (* x841 (mod x650 x203)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x200) (= x431 (x256 340282366920938463463374607431768211455 x324)) (= x285 (x256 4294967295 x760)) (= (x256 4294967295 x760) x571) (= (mod (* 340282366920938463463374607431768211456 x20) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x800) (= x791 (x886 (x700 x935) x613 0)) (= x748 (x610 x835)) (= x791 x7) (= (x256 4294967295 x760) x211) (not (= x841 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (= (x446 (+ x356 1)) x667) (= (x455 x835) x551) (< 0 x499) (= x835 x310) (= x664 (x446 (+ (mod (x464 x112) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x514))) (= x435 (x256 340282366920938463463374607431768211455 x789)) (= x381 (x446 (+ x807 (mod (x464 x148) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x446 (+ x8 x390)) x683) (= x21 (x256 340282366920938463463374607431768211455 x766)) (= x543 (x256 115792089237316195423570985008687907852929702298719625575994209400481361428480 x748)) (= (x256 4294967295 x760) x203) (= (x256 4294967295 x614) x650) (= (mod (* x676 x106) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x167) (> x285 0) (= (x446 (+ x800 x595)) x441) (= (x256 340282366920938463463374607431768211455 x180) x20) (= x266 (mod (- (ite (= 0 x167) 0 (ite (= true (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x167)) (div (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x167) x167 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x167 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x167) x167 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x167 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x514) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x650 x571) x144) (= (div x316 340282366920938463463374607431768211456) x112) (= x702 (x446 (+ 1 x144))) (= (x256 4294967295 x667) x935) (= (x256 4294967295 x760) x106) (= x431 x8) (= (div x55 340282366920938463463374607431768211456) x648) (= x499 (x256 4294967295 x760)) (= x180 (x464 x664)) (= x918 x21) (> x203 0) (= x483 (x446 (+ (mod (x464 x404) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x266))) (= (x464 x483) x324) (= (x818 x380 4) x613) (= (x464 x381) x766) (= (x446 (+ (mod (x464 x648) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x250)) x361) (= x556 (x882 x7)) (> x571 0) (= (mod (* x435 340282366920938463463374607431768211456) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x828) (= (mod (- (ite (= x721 0) 0 (ite (= (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x721) true) (div (ite (< x721 57896044618658097711785492504343953926634992332820282019728792003956564819968) x721 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x721 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x721) x721 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x721 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x250) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x807) (= (x882 x7) x404) (= (x256 115792089237316195423570985008687907852929702298719625575994209400481361428480 x556) x390) (= (x446 (+ x543 x918)) x834) (= (x886 (x700 x538) x613 0) x310) (= (mod (* (mod x110 x499) x676) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x739) (= x55 (x455 x835)) (= (ite (= 0 x739) 0 (ite (= (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x739) true) (div (ite (< x739 57896044618658097711785492504343953926634992332820282019728792003956564819968) x739 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x739 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div (ite (< x739 57896044618658097711785492504343953926634992332820282019728792003956564819968) x739 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x466 (- x739 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x514) (= x789 (x464 x361))) (not x593))) (and (= x841 (x466 (- 0 x676))) (not (> x337 4294967294)) (= (x446 (+ 1 x337)) x110) (= x924 (x886 (x700 x619) x786 0)) (= (x466 (- x926 x84)) x614) (= x22 (mod x774 x198)) (= x479 (x778 x924)) (= (x256 4294967295 x614) x337) (= (x886 (x700 x247) (x700 x77) 0) x270) (= x419 x77) (not (> x84 x926)) (= (x446 (+ x753 x518)) x822) (= x157 (* x186 1000000000000000000)) (= (x818 x380 1) x786) (= x380 (x886 (x700 x930) x270 0)) (= (x256 4294967295 x22) x84) (= (x256 4294967295 x291) x813) (= x926 (x256 4294967295 x240)) (= (= 0 x486) x593) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000000000000 x186)) (= x676 x157) (= x198 (x256 4294967295 x760)) (< 0 x198) (= (x466 (- x294 x110)) x486) (= x813 x753) (= (x256 115792089237316195423570985008687907853269984665640564039457584007908834672640 x479) x518) (= x294 (x256 4294967295 x614)) (= x774 (x256 4294967295 x240)))) x825) x115))
(assert (x16 x49))
(assert (x16 x222))
(assert (x16 x485))
(assert (x16 x748))
(assert (x16 x101))
(assert (= (or x275 x25) x860))
(assert (x16 x414))
(assert (x896 x910))
(assert (= 0 (x260 x583)))
(assert (x16 x505))
(assert (x624 x381))
(assert (x16 x112))
(assert (x16 x914))
(assert (x16 x204))
(assert (= 0 (x706 x335)))
(assert (x16 x200))
(assert (x16 x215))
(assert (x896 x358))
(assert (x16 x1))
(assert (x16 x54))
(assert (= (=> (and (= (x720 x133) x103) (= x228 (x368 x536)) (= (< x777 x228) x553) (= (x446 (+ 32 x225)) x529) (= (x446 (+ x529 32)) x133) (= x64 (x921 x529))) (and (=> (and (= x692 0) (not x553)) x907) (=> (and x553 (and (= (= x930 x339) x746) (= (x446 (+ x149 x536)) x305) (= (x403 x305) x470) (< x777 x832) (= (x446 (+ 32 x757)) x149) (= x832 (x368 x536)) (= (x573 x731) x339) (= x757 (mod (* 32 x777) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x731 x470))) (and (=> (and (= 0 x692) (not x746)) x907) (=> x746 x385))))) x781))
(assert (x16 x426))
(assert (x793 x702))
(assert (x16 x246))
(assert (x16 x225))
(assert (= 4294967296 (x155 (x734 4294967296))))
(assert (x91 x361))
(assert (x16 x680))
(assert (= (x700 3704226421) (x734 3704226421)))
(assert (x16 x483))
(assert (x816 x345))
(assert (x16 x177))
(assert (x816 x35))
(assert (x16 x191))
(assert (x896 x935))
(assert (x16 x930))
(assert (x16 x611))
(assert (x16 x354))
(assert (x16 x598))
(assert (x16 x520))
(assert (x16 x693))
(assert (x16 x523))
(assert (= (and (not x737) x161) x25))
(assert (x16 x814))
(assert (= x671 (=> (and (and (<= 0 x323) (>= x679 0) (>= 4294967295 x354) (= x681 x577) (>= x75 0) (= x140 (x256 4294967295 x756)) (= x563 x527) (< 0 x859) (= x570 (x282 224)) (<= x733 1461501637330902918203684832716283019655932542975) (= (div x799 18446744073709551616) x915) (= x14 (x282 192)) (= (x282 160) x23) (>= x354 0) (= x478 (x818 x577 2)) (= x861 3250587425) (= x764 (x496 x681)) (= x391 x17) (= (x496 x478) x283) (<= 0 x897) (< x861 3547226261) (>= 1461501637330902918203684832716283019655932542975 x323) (= x506 0) (= (x256 4294967295 x915) x330) (>= x733 0) (not x879) (= x579 (x818 x478 1)) (= (x496 x579) x388) (<= x897 340282366920938463463374607431768211455) (not (< x861 3110348530)) (= x563 x733) (not x398) (<= x679 1461501637330902918203684832716283019655932542975) (= x585 (x496 x579)) (= x419 x317) (= (x256 340282366920938463463374607431768211455 x576) x686) (= x577 (x886 (x700 x17) x422 0)) (= x506 x222) (= (x282 256) x783) (>= 4294967295 x75) (= x799 (x496 x579)) (not (= 3110348530 x861)) (= x26 x196) (not (> 2652930389 x861)) (= (x886 (x700 x196) (x700 x317) 0) x422) (= x231 x679) (not (< x861 1749768213)) (= (x282 128) x471) (= (x237 (x700 x524)) x859) (= (div x585 4294967296) x756) (= (div x388 79228162514264337593543950336) x576)) (and (= (= x47 x794) x123) (= x471 x821) (= x794 x570) (= x47 x379) (= x23 x468))) x123)))
(assert (x816 x474))
(assert (=> (>= 10000 (x160 (x446 (+ 96 x911)))) (= (x700 (x160 (x446 (+ 96 x911)))) (x734 (x160 (x446 (+ x911 96)))))))
(assert (x16 x722))
(assert (= x208 (and (not x394) x772)))
(assert (= (or x670 x224) x334))
(assert (=> (<= x935 10000) (= (x700 x935) (x734 x935))))
(assert (x16 x322))
(assert (x16 x353))
(assert (= (x700 1749768213) (x734 1749768213)))
(assert (x793 x589))
(assert (x16 x146))
(assert (= x662 (and x847 (not x493))))
(assert (= (x155 (x700 x524)) x524))
(assert (x16 x425))
(assert (x816 x112))
(assert (x793 x204))
(assert (x816 x361))
(assert (x16 x741))
(assert (x16 x358))
(assert (x16 x291))
(assert (x16 x328))
(assert (x16 x634))
(assert (x16 x926))
(assert (x16 x559))
(assert (x16 x271))
(assert (x16 x42))
(assert (x16 x10))
(assert (x16 x542))
(assert (x91 x148))
(assert (= (x734 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x700 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x16 x467))
(assert (x16 x220))
(assert (x816 x497))
(assert (= x302 (x155 (x700 x302))))
(assert (x16 x900))
(check-sat)
(exit)