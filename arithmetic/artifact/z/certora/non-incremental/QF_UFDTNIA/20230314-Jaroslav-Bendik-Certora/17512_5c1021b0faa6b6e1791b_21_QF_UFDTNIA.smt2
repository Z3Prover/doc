(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x767 0)) (((x128 (x697 x767) (x243 x767) (x454 Int)) (x139 (x760 Int)) (x82 (x61 x767) (x764 Int)))))
(declare-fun x643 () Int)
(declare-fun x548 () Int)
(declare-fun x20 () Int)
(declare-fun x516 () Int)
(declare-fun x482 () Int)
(declare-fun x564 () Bool)
(declare-fun x377 () Bool)
(declare-fun x604 () Bool)
(declare-fun x619 () Int)
(declare-fun x635 () x767)
(declare-fun x6 () Int)
(declare-fun x233 () Int)
(declare-fun x626 () Bool)
(declare-fun x396 () Int)
(declare-fun x541 () Bool)
(declare-fun x110 () Int)
(declare-fun x343 () Int)
(declare-fun x303 () Int)
(declare-fun x486 () Int)
(declare-fun x143 () Bool)
(declare-fun x256 () Int)
(declare-fun x72 () Int)
(declare-fun x195 () Int)
(declare-fun x315 () Int)
(declare-fun x145 () Int)
(declare-fun x263 () Int)
(declare-fun x535 () x767)
(declare-fun x436 () Bool)
(declare-fun x40 () Int)
(declare-fun x109 () Bool)
(declare-fun x569 () Int)
(declare-fun x422 () Bool)
(declare-fun x48 () Bool)
(declare-fun x185 () Bool)
(declare-fun x362 () Int)
(declare-fun x189 () Bool)
(declare-fun x646 () Bool)
(declare-fun x413 () Int)
(declare-fun x204 () Int)
(declare-fun x607 () Int)
(declare-fun x663 () Bool)
(declare-fun x585 () Bool)
(declare-fun x310 () Int)
(declare-fun x742 () Int)
(declare-fun x141 () Bool)
(declare-fun x467 () Int)
(declare-fun x197 () Int)
(declare-fun x655 () Bool)
(declare-fun x122 () Int)
(declare-fun x175 () Int)
(declare-fun x461 () Bool)
(declare-fun x80 () Bool)
(declare-fun x589 () Int)
(declare-fun x505 () Bool)
(declare-fun x359 () Bool)
(declare-fun x722 () Bool)
(declare-fun x248 () Int)
(declare-fun x479 () x767)
(declare-fun x49 () Int)
(declare-fun x346 () Int)
(declare-fun x348 (Int) Int)
(declare-fun x412 () Bool)
(declare-fun x387 () Bool)
(declare-fun x116 () Int)
(declare-fun x164 () Int)
(declare-fun x560 () Bool)
(declare-fun x464 () Int)
(declare-fun x689 (x767) Int)
(declare-fun x112 () Bool)
(declare-fun x283 () Int)
(declare-fun x753 () Int)
(declare-fun x91 () Int)
(declare-fun x748 () Int)
(declare-fun x8 () Int)
(declare-fun x638 () Int)
(declare-fun x257 () Int)
(declare-fun x224 () Bool)
(declare-fun x640 () Int)
(declare-fun x613 () Bool)
(declare-fun x594 () Int)
(declare-fun x100 () Int)
(declare-fun x721 () Bool)
(declare-fun x421 () Int)
(declare-fun x611 () Bool)
(declare-fun x690 () Int)
(declare-fun x317 () Bool)
(declare-fun x129 () Bool)
(declare-fun x468 () Int)
(declare-fun x350 () Int)
(declare-fun x76 () Int)
(declare-fun x684 () Int)
(declare-fun x194 () Bool)
(declare-fun x769 () Int)
(declare-fun x69 () Bool)
(declare-fun x221 () Bool)
(declare-fun x86 () Bool)
(declare-fun x615 () Int)
(declare-fun x530 () Int)
(declare-fun x701 () Bool)
(declare-fun x269 () Int)
(declare-fun x435 () Bool)
(declare-fun x264 () Int)
(declare-fun x566 () Bool)
(declare-fun x347 () x767)
(declare-fun x328 () Int)
(declare-fun x28 () Bool)
(declare-fun x254 () Bool)
(declare-fun x308 () Int)
(declare-fun x239 () Int)
(declare-fun x7 () Bool)
(declare-fun x520 () Int)
(declare-fun x723 () Int)
(declare-fun x198 () Int)
(declare-fun x536 () Int)
(declare-fun x756 () Bool)
(declare-fun x183 () x767)
(declare-fun x406 () Int)
(declare-fun x298 () Bool)
(declare-fun x404 () Int)
(declare-fun x502 () Int)
(declare-fun x681 () Int)
(declare-fun x312 () Int)
(declare-fun x299 () Int)
(declare-fun x763 () Bool)
(declare-fun x52 () Bool)
(declare-fun x698 () Int)
(declare-fun x432 () Int)
(declare-fun x74 () x767)
(declare-fun x18 () Int)
(declare-fun x345 () Int)
(declare-fun x460 () Bool)
(declare-fun x227 () Int)
(declare-fun x692 () Int)
(declare-fun x625 () Bool)
(declare-fun x384 () Bool)
(declare-fun x704 () Int)
(declare-fun x391 () Int)
(declare-fun x450 () Bool)
(declare-fun x55 () Int)
(declare-fun x331 () Int)
(declare-fun x277 () Int)
(declare-fun x316 () Bool)
(declare-fun x507 () Int)
(declare-fun x280 () Int)
(declare-fun x543 () Int)
(declare-fun x144 () Int)
(declare-fun x50 () Int)
(declare-fun x117 () Int)
(declare-fun x102 () Int)
(declare-fun x474 () Int)
(declare-fun x212 () Bool)
(declare-fun x403 () Int)
(declare-fun x576 () Bool)
(declare-fun x147 () Bool)
(declare-fun x491 () Bool)
(declare-fun x154 () Bool)
(declare-fun x215 () Int)
(declare-fun x554 () x767)
(declare-fun x32 () Bool)
(declare-fun x259 () Bool)
(declare-fun x612 () Bool)
(declare-fun x373 () Bool)
(declare-fun x179 () Bool)
(declare-fun x33 () Int)
(declare-fun x617 () Int)
(declare-fun x420 () Int)
(declare-fun x671 () Bool)
(declare-fun x768 () Int)
(declare-fun x707 () Int)
(declare-fun x192 () Int)
(declare-fun x83 () x767)
(declare-fun x441 () Int)
(declare-fun x480 () Int)
(declare-fun x586 () Bool)
(declare-fun x60 () Int)
(declare-fun x524 () Int)
(declare-fun x81 () Bool)
(declare-fun x228 () Int)
(declare-fun x381 () Int)
(declare-fun x178 () Int)
(declare-fun x46 () Int)
(declare-fun x666 () Bool)
(declare-fun x715 () Int)
(declare-fun x302 () Int)
(declare-fun x695 () Int)
(declare-fun x62 () Bool)
(declare-fun x540 () Int)
(declare-fun x95 () Bool)
(declare-fun x683 () x767)
(declare-fun x685 () Bool)
(declare-fun x199 () Int)
(declare-fun x661 () Int)
(declare-fun x118 () Bool)
(declare-fun x65 () Bool)
(declare-fun x580 () x767)
(declare-fun x190 () Int)
(declare-fun x369 () Int)
(declare-fun x383 () Bool)
(declare-fun x745 () Int)
(declare-fun x340 () Bool)
(declare-fun x559 () Int)
(declare-fun x171 () Int)
(declare-fun x73 () Bool)
(declare-fun x324 () Bool)
(declare-fun x249 () Bool)
(declare-fun x261 () Int)
(declare-fun x77 () Int)
(declare-fun x633 () Bool)
(declare-fun x439 () Int)
(declare-fun x616 () Int)
(declare-fun x751 () x767)
(declare-fun x636 () Bool)
(declare-fun x63 () Bool)
(declare-fun x107 () Int)
(declare-fun x2 () Bool)
(declare-fun x375 () Int)
(declare-fun x237 () Int)
(declare-fun x153 () Int)
(declare-fun x519 () Int)
(declare-fun x550 () Bool)
(declare-fun x365 () Int)
(declare-fun x174 () Bool)
(declare-fun x149 () x767)
(declare-fun x68 () Bool)
(declare-fun x9 () Int)
(declare-fun x501 () Int)
(declare-fun x64 () Int)
(declare-fun x349 () Int)
(declare-fun x371 () Bool)
(declare-fun x108 () Bool)
(declare-fun x448 () Int)
(declare-fun x266 (Int Int) Int)
(declare-fun x736 () Bool)
(declare-fun x13 (Int) x767)
(declare-fun x382 () Int)
(declare-fun x226 () Int)
(declare-fun x691 () Bool)
(declare-fun x410 () Bool)
(declare-fun x709 () Bool)
(declare-fun x205 () Bool)
(declare-fun x330 () Bool)
(declare-fun x278 () Int)
(declare-fun x708 (Int) Int)
(declare-fun x17 () Int)
(declare-fun x511 () Bool)
(declare-fun x219 () Int)
(declare-fun x111 () Bool)
(declare-fun x66 () Bool)
(declare-fun x649 () Bool)
(declare-fun x380 () Int)
(declare-fun x659 () Int)
(declare-fun x417 () Bool)
(declare-fun x668 () Int)
(declare-fun x632 () Bool)
(declare-fun x337 () Bool)
(declare-fun x664 () Int)
(declare-fun x354 () Int)
(declare-fun x740 () Int)
(declare-fun x202 () Bool)
(declare-fun x732 () Bool)
(declare-fun x651 () Int)
(declare-fun x24 () Bool)
(declare-fun x376 () Int)
(declare-fun x521 () Int)
(declare-fun x326 () x767)
(declare-fun x374 () Bool)
(declare-fun x737 () Bool)
(declare-fun x512 () Int)
(declare-fun x31 () Int)
(declare-fun x705 () Bool)
(declare-fun x729 () Int)
(declare-fun x25 () Int)
(declare-fun x37 () Int)
(declare-fun x509 () Bool)
(declare-fun x36 () Bool)
(declare-fun x673 () Int)
(declare-fun x539 () Int)
(declare-fun x720 () Bool)
(declare-fun x518 () Bool)
(declare-fun x291 () Bool)
(declare-fun x484 () Int)
(declare-fun x161 () Int)
(declare-fun x623 () Int)
(declare-fun x506 (Int) Int)
(declare-fun x570 () Int)
(declare-fun x292 () Int)
(declare-fun x583 () Bool)
(declare-fun x231 () Int)
(declare-fun x360 () Bool)
(declare-fun x650 () Int)
(declare-fun x344 () Int)
(declare-fun x592 () Int)
(declare-fun x290 () Int)
(declare-fun x534 () Int)
(declare-fun x446 () Int)
(declare-fun x629 () Int)
(declare-fun x547 () Bool)
(declare-fun x267 () Bool)
(declare-fun x714 () Bool)
(declare-fun x162 () Int)
(declare-fun x473 () Bool)
(declare-fun x523 () Int)
(declare-fun x647 () Bool)
(declare-fun x45 () Int)
(declare-fun x458 () Int)
(declare-fun x363 () Int)
(declare-fun x549 () Int)
(declare-fun x121 () Int)
(declare-fun x304 () Bool)
(declare-fun x641 () Int)
(declare-fun x678 () Bool)
(declare-fun x177 () Int)
(declare-fun x477 () Int)
(declare-fun x597 () Int)
(declare-fun x356 () Int)
(declare-fun x5 () x767)
(declare-fun x125 () Int)
(declare-fun x670 () Int)
(declare-fun x758 () Bool)
(declare-fun x437 () Int)
(declare-fun x660 () Int)
(declare-fun x136 () Int)
(declare-fun x378 () Int)
(declare-fun x595 () Int)
(declare-fun x677 () Int)
(declare-fun x214 () Int)
(declare-fun x313 () Bool)
(declare-fun x739 () Int)
(declare-fun x29 () Bool)
(declare-fun x532 () Int)
(declare-fun x657 () Int)
(declare-fun x601 () Int)
(declare-fun x662 () Int)
(declare-fun x603 () Int)
(declare-fun x573 () Bool)
(declare-fun x744 () Int)
(declare-fun x229 () Int)
(declare-fun x746 () Int)
(declare-fun x654 () Int)
(declare-fun x333 () Int)
(declare-fun x251 () Bool)
(declare-fun x223 () Int)
(declare-fun x572 () Int)
(declare-fun x537 () Int)
(declare-fun x700 () Int)
(declare-fun x645 () Bool)
(declare-fun x218 () Int)
(declare-fun x508 () Int)
(declare-fun x598 (x767) Int)
(declare-fun x517 () Bool)
(declare-fun x329 () Bool)
(declare-fun x453 () Int)
(declare-fun x319 () Bool)
(declare-fun x88 () Bool)
(declare-fun x27 () Int)
(declare-fun x680 () Int)
(declare-fun x10 () Int)
(declare-fun x582 () Int)
(declare-fun x93 () Int)
(declare-fun x730 (x767) Int)
(declare-fun x272 () Int)
(declare-fun x334 () Int)
(declare-fun x142 () Int)
(declare-fun x429 () Bool)
(declare-fun x366 () Int)
(declare-fun x284 () Bool)
(declare-fun x634 () Int)
(declare-fun x244 () x767)
(declare-fun x355 () Int)
(declare-fun x588 () Int)
(declare-fun x499 () Int)
(declare-fun x591 () Int)
(declare-fun x127 () Int)
(declare-fun x132 () Bool)
(declare-fun x180 () Int)
(declare-fun x687 () Int)
(declare-fun x225 () Bool)
(declare-fun x188 () Int)
(declare-fun x15 () Bool)
(declare-fun x465 () Int)
(declare-fun x99 () Int)
(declare-fun x639 () Int)
(declare-fun x579 () Int)
(declare-fun x11 () Bool)
(declare-fun x555 () Int)
(declare-fun x449 () Int)
(declare-fun x51 () Bool)
(declare-fun x338 () Bool)
(declare-fun x472 () Bool)
(declare-fun x241 () Int)
(declare-fun x727 () Int)
(declare-fun x104 () Int)
(declare-fun x156 () Bool)
(declare-fun x320 () Int)
(declare-fun x471 () Int)
(declare-fun x667 () Int)
(declare-fun x353 () Int)
(declare-fun x182 () Int)
(declare-fun x401 () Int)
(declare-fun x253 () Int)
(declare-fun x92 () Int)
(declare-fun x294 () Int)
(declare-fun x309 () Int)
(declare-fun x493 () Bool)
(declare-fun x694 () Bool)
(declare-fun x14 () Bool)
(declare-fun x399 () Bool)
(declare-fun x124 () Int)
(declare-fun x12 () Int)
(declare-fun x544 () Int)
(declare-fun x618 () Bool)
(declare-fun x166 () Int)
(declare-fun x258 () Int)
(declare-fun x581 () Int)
(declare-fun x711 () Int)
(declare-fun x211 () Bool)
(declare-fun x631 () Int)
(declare-fun x115 () Bool)
(declare-fun x341 () Int)
(declare-fun x210 () x767)
(declare-fun x146 () x767)
(declare-fun x234 (Int) Int)
(declare-fun x416 () Int)
(declare-fun x558 () Int)
(declare-fun x498 () Int)
(declare-fun x130 () Bool)
(declare-fun x494 () x767)
(declare-fun x220 () Bool)
(declare-fun x184 () Bool)
(declare-fun x138 () Int)
(declare-fun x761 () Int)
(declare-fun x400 () Int)
(declare-fun x16 () Int)
(declare-fun x590 () Int)
(declare-fun x389 () Int)
(declare-fun x445 () Bool)
(declare-fun x674 () Bool)
(declare-fun x370 () Bool)
(declare-fun x276 () Int)
(declare-fun x386 () Int)
(declare-fun x500 () Bool)
(declare-fun x325 () Bool)
(declare-fun x327 () Bool)
(declare-fun x719 () Int)
(declare-fun x265 () Int)
(declare-fun x418 () Bool)
(declare-fun x105 (Int) Int)
(declare-fun x567 () Int)
(declare-fun x430 () Int)
(declare-fun x487 () Int)
(declare-fun x587 () Int)
(declare-fun x563 () Int)
(declare-fun x78 () Int)
(declare-fun x546 () Int)
(declare-fun x89 (Int) Int)
(declare-fun x208 () Bool)
(declare-fun x415 () Bool)
(declare-fun x289 () Bool)
(declare-fun x235 () Int)
(declare-fun x232 () Int)
(declare-fun x425 () Int)
(declare-fun x23 () Bool)
(declare-fun x551 () Int)
(declare-fun x552 () Bool)
(declare-fun x39 () Bool)
(declare-fun x285 () Int)
(declare-fun x424 () Int)
(declare-fun x43 () Bool)
(declare-fun x167 () Int)
(declare-fun x268 () Int)
(declare-fun x749 () Int)
(declare-fun x578 () Bool)
(declare-fun x388 () Bool)
(declare-fun x596 () Int)
(declare-fun x342 () x767)
(declare-fun x743 () Bool)
(declare-fun x452 () Int)
(declare-fun x665 () Int)
(declare-fun x56 () x767)
(declare-fun x270 () Bool)
(declare-fun x335 () Int)
(declare-fun x54 () Int)
(declare-fun x70 () Int)
(declare-fun x653 () Int)
(declare-fun x47 () Int)
(declare-fun x287 () Int)
(declare-fun x469 () Int)
(declare-fun x311 () x767)
(declare-fun x30 () Int)
(declare-fun x713 () Bool)
(declare-fun x710 () Int)
(declare-fun x402 () Int)
(declare-fun x696 () Bool)
(declare-fun x515 () Int)
(declare-fun x321 () Int)
(declare-fun x528 () Int)
(declare-fun x513 () Int)
(declare-fun x706 (Int) Int)
(declare-fun x456 () Int)
(declare-fun x126 () Int)
(declare-fun x42 () Int)
(declare-fun x726 () x767)
(declare-fun x372 () Bool)
(declare-fun x75 () Int)
(declare-fun x84 () Int)
(declare-fun x301 () Bool)
(declare-fun x279 () Int)
(declare-fun x352 () x767)
(declare-fun x58 () Int)
(declare-fun x19 () Bool)
(declare-fun x26 () Int)
(declare-fun x411 () Int)
(declare-fun x151 () Bool)
(declare-fun x637 () Bool)
(declare-fun x527 () Int)
(declare-fun x750 () Int)
(declare-fun x608 () Int)
(declare-fun x34 () Int)
(declare-fun x716 () Int)
(declare-fun x545 () Int)
(declare-fun x160 () Int)
(declare-fun x731 () Bool)
(declare-fun x490 (x767) Int)
(declare-fun x606 () Int)
(declare-fun x542 () Int)
(declare-fun x459 () Bool)
(declare-fun x624 (Int Int) Int)
(declare-fun x296 () Int)
(declare-fun x426 () Int)
(declare-fun x682 () Bool)
(declare-fun x434 () Bool)
(declare-fun x392 () Int)
(declare-fun x568 (Int) Int)
(declare-fun x236 () Int)
(declare-fun x497 () Int)
(declare-fun x762 () Int)
(declare-fun x556 () x767)
(declare-fun x196 () Int)
(declare-fun x466 () Int)
(declare-fun x642 () Int)
(declare-fun x113 () Bool)
(declare-fun x423 () Bool)
(declare-fun x577 () Int)
(declare-fun x644 () Int)
(declare-fun x157 () Bool)
(declare-fun x428 () Int)
(declare-fun x245 () Int)
(declare-fun x754 () Int)
(declare-fun x433 () Int)
(declare-fun x414 () Int)
(declare-fun x163 () Int)
(declare-fun x150 () Bool)
(declare-fun x181 () Bool)
(declare-fun x525 () Int)
(declare-fun x575 () Int)
(declare-fun x1 () Bool)
(declare-fun x741 () Int)
(declare-fun x38 () Int)
(declare-fun x443 () Bool)
(declare-fun x538 () Int)
(declare-fun x187 () Int)
(declare-fun x250 () Bool)
(declare-fun x260 () Bool)
(declare-fun x503 () Bool)
(declare-fun x114 () Bool)
(declare-fun x137 () Bool)
(declare-fun x658 () x767)
(declare-fun x476 () Bool)
(declare-fun x3 () Int)
(declare-fun x135 () Int)
(declare-fun x281 () Int)
(declare-fun x21 () Int)
(declare-fun x672 () Bool)
(declare-fun x757 () Bool)
(declare-fun x206 () Int)
(declare-fun x457 () Bool)
(declare-fun x427 () Bool)
(declare-fun x41 () Int)
(declare-fun x275 () Int)
(declare-fun x282 () Int)
(declare-fun x679 () Int)
(declare-fun x584 () Int)
(declare-fun x71 () Int)
(declare-fun x686 () Int)
(declare-fun x351 () Bool)
(declare-fun x213 () Int)
(declare-fun x193 () Bool)
(declare-fun x475 () x767)
(declare-fun x209 () Int)
(declare-fun x724 () Int)
(declare-fun x390 () Int)
(declare-fun x67 () x767)
(declare-fun x106 () Int)
(declare-fun x470 (x767) Int)
(declare-fun x158 () Int)
(declare-fun x522 () Int)
(declare-fun x444 () Int)
(declare-fun x481 () Int)
(declare-fun x4 () Int)
(declare-fun x478 () Int)
(declare-fun x201 () Int)
(declare-fun x222 () Int)
(declare-fun x610 () Bool)
(declare-fun x57 () Int)
(declare-fun x207 () Int)
(declare-fun x318 () x767)
(declare-fun x599 () Int)
(declare-fun x431 () Int)
(declare-fun x557 () Bool)
(declare-fun x159 () Int)
(declare-fun x307 () Int)
(declare-fun x305 (Int) Int)
(declare-fun x496 () Int)
(declare-fun x172 () Int)
(declare-fun x364 () Int)
(declare-fun x155 () Int)
(declare-fun x703 () Int)
(declare-fun x35 () Int)
(declare-fun x96 () Bool)
(declare-fun x169 () Int)
(declare-fun x676 () Bool)
(declare-fun x492 () Int)
(declare-fun x462 () x767)
(declare-fun x246 () Int)
(declare-fun x379 () Bool)
(declare-fun x733 () Int)
(declare-fun x59 () Int)
(declare-fun x485 () Int)
(declare-fun x447 () Int)
(declare-fun x357 () Bool)
(declare-fun x242 () Int)
(declare-fun x103 () Bool)
(declare-fun x293 () Int)
(declare-fun x186 () Bool)
(declare-fun x22 (x767) Int)
(declare-fun x133 () Int)
(declare-fun x240 () Int)
(declare-fun x358 () x767)
(declare-fun x295 () Int)
(declare-fun x600 () Int)
(declare-fun x614 () x767)
(declare-fun x323 () Int)
(declare-fun x306 () Int)
(define-fun x561 ((x767 x767) (x367 Int)) x767 (ite ((_ is x82) x767) (x82 (x61 x767) (+ (x764 x767) x367)) (ite ((_ is x128) x767) (x128 (x697 x767) (x243 x767) (+ (x454 x767) x367)) (x139 (+ x367 (x760 x767))))))
(define-fun x361 ((x262 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x262) (>= x262 0)) x262 (- x262 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x622 ((x262 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x262) (> 0 x262)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x262) x262))
(define-fun x553 ((x87 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x87) (>= x87 0)))
(define-fun x140 ((x87 Int)) Bool (and (= (x266 115792089237316195423570985008687907853269984665640564039457584007913129639935 x87) x87) (= x87 (x266 x87 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x483 ((x87 Int)) Bool (and (= (x266 0 x87) 0) (= 0 (x266 x87 0))))
(define-fun x230 ((x87 Int)) Bool (= (x266 x87 x87) x87))
(define-fun x593 ((x87 Int)) Bool (and (x230 x87) (x140 x87) (x483 x87)))
(define-fun x656 ((x87 Int) (x408 Int)) Bool (= (x266 x408 x87) (x266 x87 x408)))
(define-fun x565 ((x87 Int) (x408 Int)) Bool (and (>= (x266 x87 x408) 0) (=> (>= x408 0) (>= x408 (x266 x87 x408))) (=> (<= 0 x87) (>= x87 (x266 x87 x408)))))
(define-fun x489 ((x87 Int) (x408 Int)) Bool (and (x656 x87 x408) (x565 x87 x408)))
(define-fun x571 ((x87 Int)) Bool (= (mod x87 1461501637330902918203684832716283019655932542976) (x266 x87 1461501637330902918203684832716283019655932542975)))
(define-fun x725 ((x87 Int)) Bool (and (x489 x87 1461501637330902918203684832716283019655932542975) (x571 x87)))
(define-fun x94 ((x87 Int)) Bool (= (mod x87 340282366920938463463374607431768211456) (x266 x87 340282366920938463463374607431768211455)))
(define-fun x702 ((x87 Int)) Bool (and (x489 x87 340282366920938463463374607431768211455) (x94 x87)))
(define-fun x442 ((x488 Int)) Int (ite (= x488 128) 2 (x348 x488)))
(define-fun x514 ((x488 Int)) Int (ite (= 160 x488) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x442 x488)))
(define-fun x238 ((x488 Int)) Int (ite (= 192 x488) 2 (x514 x488)))
(define-fun x699 ((x488 Int)) Int (ite (= x488 224) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x238 x488)))
(define-fun x217 ((x488 Int)) Int (ite (= 256 x488) 2 (x699 x488)))
(define-fun x463 ((x488 Int)) Int (ite (= 288 x488) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x217 x488)))
(define-fun x526 ((x488 x767)) Int (ite (= x146 x488) 1000000000000000000000000000 (x730 x488)))
(define-fun x495 ((x488 x767)) Int (ite (= x488 x494) x432 (x598 x488)))
(define-fun x728 ((x488 Int)) Int (ite (= 320 x488) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x463 x488)))
(define-fun x297 ((x488 Int)) Int (ite (= x488 324) x740 (x728 x488)))
(define-fun x440 ((x488 Int)) Int (ite (= 356 x488) x26 (x297 x488)))
(define-fun x300 ((x488 Int)) Int (ite (= 388 x488) x354 (x440 x488)))
(define-fun x368 ((x488 Int)) Int (ite (= 128 x488) 2 (x568 x488)))
(define-fun x148 ((x488 Int)) Int (ite (= 160 x488) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x368 x488)))
(define-fun x385 ((x488 Int)) Int (ite (= x488 192) 2 (x148 x488)))
(define-fun x170 ((x488 Int)) Int (ite (= 224 x488) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x385 x488)))
(define-fun x322 ((x488 Int)) Int (ite (= x488 256) 2 (x170 x488)))
(define-fun x255 ((x488 Int)) Int (ite (= 288 x488) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x322 x488)))
(define-fun x747 ((x488 x767)) Int (ite (= x210 x488) x456 (x598 x488)))
(define-fun x98 ((x488 Int)) Int (ite (= x488 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x255 x488)))
(define-fun x735 ((x488 Int)) Int (ite (= 324 x488) x487 (x98 x488)))
(define-fun x271 ((x488 Int)) Int (ite (= 356 x488) x26 (x735 x488)))
(define-fun x533 ((x488 Int)) Int (ite (= 388 x488) x584 (x271 x488)))
(define-fun x314 ((x488 x767)) Int (x526 x488))
(define-fun x395 ((x488 x767)) Int (ite (= x488 x683) x581 (x470 x488)))
(define-fun x90 ((x488 x767)) Int (ite (= x488 x318) x34 (x395 x488)))
(define-fun x693 ((x488 x767)) Int (ite x564 (x470 x488) (ite x80 (x470 x488) (x90 x488))))
(define-fun x510 ((x488 x767)) Int (x495 x488))
(define-fun x273 ((x488 Int)) Int (ite (= x488 128) 2 (x708 x488)))
(define-fun x101 ((x488 Int)) Int (ite (= 160 x488) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x273 x488)))
(define-fun x119 ((x488 Int)) Int (ite (= 192 x488) 2 (x101 x488)))
(define-fun x628 ((x488 Int)) Int (ite (= 224 x488) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x119 x488)))
(define-fun x621 ((x488 Int)) Int (ite (= 256 x488) 2 (x628 x488)))
(define-fun x718 ((x488 Int)) Int (ite (= x488 288) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x621 x488)))
(define-fun x630 ((x488 x767)) Int (ite (= x462 x488) x375 (x510 x488)))
(define-fun x652 ((x488 Int)) Int (ite (= x488 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x718 x488)))
(define-fun x574 ((x488 Int)) Int (ite (= 324 x488) x231 (x652 x488)))
(define-fun x216 ((x488 Int)) Int (ite (= x488 356) x478 (x574 x488)))
(define-fun x53 ((x488 Int)) Int (ite (= 388 x488) x406 (x216 x488)))
(define-fun x203 ((x488 x767)) Int (ite (= x83 x488) x715 (x693 x488)))
(define-fun x286 ((x488 x767)) Int (ite (= x488 x5) x242 (x203 x488)))
(define-fun x79 ((x488 x767)) Int (ite x221 (x693 x488) (ite x671 (x693 x488) (x286 x488))))
(define-fun x44 ((x488 x767)) Int (x630 x488))
(define-fun x455 ((x488 Int)) Int (ite (= 128 x488) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x105 x488)))
(define-fun x152 ((x488 Int)) Int (ite (= 132 x488) x204 (x455 x488)))
(define-fun x274 ((x488 Int)) Int (ite (= x488 128) x187 (x152 x488)))
(define-fun x134 ((x488 x767)) Int (ite (= x488 x56) x362 (x470 x488)))
(define-fun x252 ((x488 x767)) Int (ite (= x488 x479) x72 (x134 x488)))
(define-fun x123 ((x488 x767)) Int (ite x154 (x470 x488) (ite x24 (x470 x488) (ite x151 (x470 x488) (x252 x488)))))
(define-fun x97 ((x488 x767)) Int (x747 x488))
(define-fun x529 ((x488 Int)) Int (ite (= x488 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x234 x488)))
(define-fun x648 ((x488 Int)) Int (ite (= 132 x488) x16 (x529 x488)))
(define-fun x738 ((x488 Int)) Int (ite (= 128 x488) x124 (x648 x488)))
(define-fun x393 ((x488 Int)) Int (ite x672 (x463 x488) (x300 x488)))
(define-fun x766 ((x488 Int)) Int (ite (= x488 320) x577 (x393 x488)))
(define-fun x173 ((x488 Int)) Int (ite (= x488 320) x577 (x766 x488)))
(define-fun x200 ((x488 Int)) Int (ite (= 352 x488) x544 (x173 x488)))
(define-fun x717 ((x488 Int)) Int (ite (= 384 x488) 1000000000000000000000000000 (x200 x488)))
(define-fun x627 ((x488 Int)) Int (ite (= 320 x488) x177 (x393 x488)))
(define-fun x168 ((x488 Int)) Int (ite (= x488 320) x177 (x627 x488)))
(define-fun x332 ((x488 Int)) Int (ite (= x488 352) x544 (x168 x488)))
(define-fun x504 ((x488 Int)) Int (ite (= 384 x488) 1000000000000000000000000000 (x332 x488)))
(define-fun x675 ((x488 Int)) Int (ite x384 (x717 x488) (x504 x488)))
(define-fun x419 ((x488 Int)) Int (ite (= x488 320) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x675 x488)))
(define-fun x120 ((x488 Int)) Int (ite (= x488 324) x46 (x419 x488)))
(define-fun x409 ((x488 Int)) Int (ite (= 356 x488) x239 (x120 x488)))
(define-fun x759 ((x488 Int)) Int (ite (= 0 x488) 1 (x305 x488)))
(define-fun x407 ((x488 Int)) Int (ite x137 (x718 x488) (x53 x488)))
(define-fun x451 ((x488 Int)) Int (ite (= 320 x488) x376 (x407 x488)))
(define-fun x712 ((x488 Int)) Int (ite (= x488 320) x376 (x451 x488)))
(define-fun x669 ((x488 Int)) Int (ite (= x488 352) x522 (x712 x488)))
(define-fun x131 ((x488 Int)) Int (ite (= 384 x488) 1000000000000000000000000000 (x669 x488)))
(define-fun x336 ((x488 Int)) Int (ite (= x488 320) x138 (x407 x488)))
(define-fun x688 ((x488 Int)) Int (ite (= x488 320) x138 (x336 x488)))
(define-fun x609 ((x488 Int)) Int (ite (= 352 x488) x522 (x688 x488)))
(define-fun x405 ((x488 Int)) Int (ite (= 384 x488) 1000000000000000000000000000 (x609 x488)))
(define-fun x191 ((x488 Int)) Int (ite x604 (x131 x488) (x405 x488)))
(define-fun x398 ((x488 Int)) Int (ite (= 320 x488) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x191 x488)))
(define-fun x339 ((x488 Int)) Int (ite (= 324 x488) x425 (x398 x488)))
(define-fun x620 ((x488 Int)) Int (ite (= x488 356) x441 (x339 x488)))
(define-fun x752 ((x488 Int)) Int (ite (= 0 x488) 1 (x506 x488)))
(define-fun x397 ((x488 Int)) Int (ite x115 (x255 x488) (x533 x488)))
(define-fun x394 ((x488 Int)) Int (ite (= 320 x488) x167 (x397 x488)))
(define-fun x165 ((x488 Int)) Int (ite (= 320 x488) x167 (x394 x488)))
(define-fun x765 ((x488 Int)) Int (ite (= 352 x488) x439 (x165 x488)))
(define-fun x531 ((x488 Int)) Int (ite (= 384 x488) 1000000000000000000000000000 (x765 x488)))
(define-fun x438 ((x488 Int)) Int (ite (= 320 x488) x42 (x397 x488)))
(define-fun x288 ((x488 Int)) Int (ite (= 320 x488) x42 (x438 x488)))
(define-fun x247 ((x488 Int)) Int (ite (= x488 352) x439 (x288 x488)))
(define-fun x176 ((x488 Int)) Int (ite (= x488 384) 1000000000000000000000000000 (x247 x488)))
(define-fun x562 ((x488 Int)) Int (ite x427 (x531 x488) (x176 x488)))
(define-fun x734 ((x488 Int)) Int (ite (= 320 x488) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x562 x488)))
(define-fun x602 ((x488 Int)) Int (ite (= 324 x488) x695 (x734 x488)))
(define-fun x755 ((x488 Int)) Int (ite (= x488 356) x742 (x602 x488)))
(define-fun x605 ((x488 Int)) Int (ite (= 0 x488) 1 (x89 x488)))
(define-fun x85 ((x87 Int)) Bool (=> (and (not (= 599290589 x87)) (not (= x87 1000000000000000000000000000)) (not (= x87 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= x87 404098525)) (not (= 2113256763 x87)) (not (= 157198259 x87)) (> x87 10000) (not (= 340282366920938463463374607431768211455 x87)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x87)) (not (= 115792089237316195423570985008687907853269984665640 x87)) (not (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 x87)) (not (= 1889567281 x87)) (not (= x87 22402283082756182618670880521465619040657731284550890770856599233457073160192)) (not (= x87 340282366920938463463374607431768211456)) (not (= 500000000000000000000000000 x87)) (not (= x87 2835717307)) (not (= x87 826074471)) (not (= x87 1461501637330902918203684832716283019655932542976)) (not (= x87 22707518476531795403804539479547988765414823042645454849778882899012749361152)) (not (= x87 497176382)) (not (= x87 22711052170661352172463706074549474602446478010439206087695126111415334600704)) (not (= x87 1461501637330902918203684832716283019655932542975)) (not (= 3607235850 x87)) (not (= x87 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x87 3018967357))) (not ((_ is x139) (x13 x87)))))
(assert (x553 x401))
(assert (x553 x285))
(assert (x553 x400))
(assert (x553 x378))
(assert (x553 x232))
(assert (= (and x88 (not x359)) x338))
(assert (x553 x502))
(assert (= (x689 (x139 3607235850)) 3607235850))
(assert (x553 x659))
(assert (x553 x299))
(assert (= x458 1000000000000000000000000000))
(assert (= (and (not x113) x185) x578))
(assert (x553 x275))
(assert (x553 x343))
(assert (= (x689 (x139 826074471)) 826074471))
(assert (= (and x732 x636) x709))
(assert (= (and x713 x372) x701))
(assert (= x509 (=> (and (and (= x298 (= x17 0)) (< 0 x414)) (or (and (and (= (not x86) x270) (= x86 (= 0 x257)) (= (ite x270 1 0) x278) (= x17 32)) (not x298)) (and (and (= x716 (x490 (x13 x596))) (< 0 x716) (= 1 x278)) x298))) x143)))
(assert (= x11 (and x340 x338)))
(assert (x553 x122))
(assert (= (x689 (x13 x530)) x530))
(assert (= x560 (and x649 x267)))
(assert (x553 x171))
(assert (= (and (not x722) x473) x52))
(assert (= (x139 340282366920938463463374607431768211456) (x13 340282366920938463463374607431768211456)))
(assert (= (x689 (x13 x642)) x642))
(assert (x553 x71))
(assert (x553 x391))
(assert (= (x689 (x139 2113256763)) 2113256763))
(assert (x553 x116))
(assert (= (=> (= x284 (= x695 x549)) (and (=> (and (and (= x166 x124) (= x596 x16) (= x623 x201)) x284) x685) (=> (and (not x284) (and (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x287)) (> 64 x287)) (> x287 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x150) (= x433 x695) (= 2835717307 x601) (<= 0 x596) (>= 1461501637330902918203684832716283019655932542975 x596) (= (x490 (x13 x182)) x608) (not (= x601 157198259)) (= 320 x282) (= x742 x35) (not (= x601 1889567281)) (not (= x601 404098525)) (not (= x601 599290589)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x20) (= 68 x321) (> x608 0) (not (< x321 4)) (> 1461501637330902918203684832716283019655932542976 x596) (= (x622 (- x321 4)) x287))) (and (=> (and (and (= x570 x690) (= x127 (x622 (- x26 x240))) (= x166 x226) (= x346 0) (= x386 x596) (= x127 x687)) x150) x517) (=> (and (not x150) (= x633 true)) (and (=> (and x633 (and (= x279 (x470 x67)) (= (> x742 x279) x722) (>= x279 0) (= x35 x686) (= (x128 (x13 x549) (x139 1) 0) x67) (<= x279 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x722 x66) (=> (and (not x722) (= (< x279 x35) x186)) (and (=> x186 x66) (=> (and (and (= (x128 (x13 x549) (x139 1) 0) x56) (<= 0 x592) (= x114 (< x467 x592)) (= x592 (x134 x580)) (= x467 (x622 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35))) (= (x128 (x13 x695) (x139 1) 0) x580) (= (x622 (- x279 x35)) x362) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x592)) (not x186)) (and (=> x114 x66) (=> (and (and (= x72 (x361 (+ x592 x35))) (= x626 (< x72 x592))) (not x114)) (and (=> (and (and (= 1 x346) (= x226 x166) (= x570 32) (= (x128 (x13 x695) (x139 1) 0) x479) (= x386 x596) (= x201 x687)) (not x626)) x517) (=> x626 x66))))))))) (=> (not x633) x66))))))) x130))
(assert (x553 x207))
(assert (= x212 (or x676 x663)))
(assert (x553 x569))
(assert (= (=> (and (and (and (and (<= 0 x55) (not (= x197 157198259)) (> x548 0) (>= 1461501637330902918203684832716283019655932542975 x229) (= x197 1889567281) (>= 1461501637330902918203684832716283019655932542975 x55) (<= x549 1461501637330902918203684832716283019655932542975) (= x548 (x490 (x13 x182))) (= x527 x180) (= (x128 (x13 x549) (x139 1) 0) x556) (= x700 x746) (= x390 x248) (not (= 404098525 x197)) (= x155 x769) (>= x400 0) (= 0 x155) (<= x248 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x197 599290589)) (<= x400 1461501637330902918203684832716283019655932542975) (= x248 (x79 x556)) (>= x248 0) (>= x229 0) (= x229 x180) (= x75 x400)) (and (and (>= x660 0) (< x402 826074471) (>= 1461501637330902918203684832716283019655932542975 x334) (= x512 x169) (= 0 x741) (>= 1461501637330902918203684832716283019655932542975 x579) (>= x334 0) (<= x660 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x169) (= x434 (= x660 0)) (= x741 x769) (= x446 (x490 (x13 x549))) (= x527 x512) (<= x169 1461501637330902918203684832716283019655932542975) (= 404098525 x402) (= x749 x390) (> 2113256763 x402) (>= x579 0) (> x446 0) (= x579 x75) (not (< x402 404098525))) (or (and (not x434) (and (= x497 (mod (* x520 x660) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x361 (+ x497 500000000000000000000000000)) x227) (= x135 (ite x156 1 0)) (= (= x520 0) x417) (> 1461501637330902918203684832716283019655932542976 x204) (= (not x691) x43) (= x421 x41) (= (div x227 1000000000000000000000000000) x41) (= x341 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x520)) (= x520 (x274 128)) (= (< x341 x660) x691) (>= x204 0) (= (or x43 x417) x156) (>= 1461501637330902918203684832716283019655932542975 x204) (> x135 0))) (and x434 (= x421 0))))) (and (>= 1461501637330902918203684832716283019655932542975 x569) (not (= 404098525 x364)) (= x75 x40) (= x545 x643) (= x643 x527) (= x142 x665) (>= 1461501637330902918203684832716283019655932542975 x40) (>= x569 0) (< 0 x639) (= x307 x769) (= x700 x631) (not (= 599290589 x364)) (= x244 (x128 (x13 x642) (x139 1) 0)) (= x364 1889567281) (>= x631 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x631) (<= 0 x545) (= x639 (x490 (x13 x182))) (= (x79 x244) x631) (not (= 157198259 x364)) (<= x545 1461501637330902918203684832716283019655932542975) (= 0 x307) (<= 0 x40) (= x523 x642) (<= x642 1461501637330902918203684832716283019655932542975))) (and (<= x677 1461501637330902918203684832716283019655932542975) (= x285 x768) (> 340282366920938463463374607431768211456 x464) (<= 0 x369) (= x769 x477) (= 0 x477) (>= 1461501637330902918203684832716283019655932542975 x369) (<= x768 1461501637330902918203684832716283019655932542975) (> 826074471 x469) (<= x464 340282366920938463463374607431768211455) (= 497176382 x469) (= x464 x665) (= (x128 (x13 x677) (x139 52) 0) x342) (= x285 x527) (not (= x469 404098525)) (>= 1461501637330902918203684832716283019655932542975 x437) (= x437 x75) (< x469 2113256763) (<= 0 x464) (>= x768 0) (> x711 0) (= x464 (x44 x342)) (= (x490 (x13 x549)) x711) (not (> 404098525 x469)) (<= 0 x437) (= x677 x258))) x461) x423))
(assert (x553 x283))
(assert (x553 x100))
(assert (x553 x530))
(assert (x553 x769))
(assert (=> (>= 10000 x695) (= (x13 x695) (x139 x695))))
(assert (x553 x608))
(assert (x553 x548))
(assert (= (and x193 (not x357)) x399))
(assert (x593 x532))
(assert (x553 x76))
(assert (= (=> (and (= (= 0 x414) x632) (or (not x632) x632)) x509) x112))
(assert (x553 x651))
(assert (x593 1461501637330902918203684832716283019655932542975))
(assert (x553 x376))
(assert (x553 x309))
(assert (x725 x532))
(assert (x553 x136))
(assert (x553 x523))
(assert (= (=> (and (= x226 x166) (= x596 x386) (= x468 x687) (= (x622 (- x26 x240)) x468) (= 0 x346) (= x690 x570)) x517) x66))
(assert (x553 x594))
(assert (= (and x511 (not x370)) x329))
(assert (x553 x563))
(assert (x553 x195))
(assert (= (=> (and (and (and (= (x123 x347) x264) (= 1889567281 x235) (>= 1461501637330902918203684832716283019655932542975 x277) (= x75 x125) (= 0 x312) (= x133 x264) (>= 1461501637330902918203684832716283019655932542975 x589) (= x539 x523) (<= 0 x277) (= x381 x277) (>= x589 0) (not (= 599290589 x235)) (<= 0 x125) (< 0 x762) (= x347 (x128 (x13 x539) (x139 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x264) (not (= x235 404098525)) (= x448 x309) (>= 1461501637330902918203684832716283019655932542975 x539) (= (x490 (x13 x182)) x762) (>= 1461501637330902918203684832716283019655932542975 x125) (= x381 x527) (= x312 x769) (>= x264 0) (not (= 157198259 x235))) (and (and (not (= x30 157198259)) (not (= 599290589 x30)) (<= 0 x323) (= x192 x10) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x192) (not (= 404098525 x30)) (> x196 0) (= x769 x684) (= x466 x527) (>= x91 0) (>= 1461501637330902918203684832716283019655932542975 x91) (= 1889567281 x30) (<= x549 1461501637330902918203684832716283019655932542975) (= (x128 (x13 x549) (x139 1) 0) x183) (<= x543 1461501637330902918203684832716283019655932542975) (= x323 x466) (<= 0 x543) (>= 1461501637330902918203684832716283019655932542975 x323) (>= x192 0) (= x75 x543) (= (x490 (x13 x182)) x196) (= x192 (x123 x183)) (= x71 x133) (= x684 0)) (and (and (= x498 x75) (= x636 (= 0 x623)) (<= x595 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x37) (<= x623 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x389 404098525)) (= x659 0) (< x389 826074471) (= x8 x37) (= x8 x527) (>= x623 0) (> x673 0) (= x389 404098525) (= x233 x10) (= x659 x769) (<= 0 x498) (>= x595 0) (= x673 (x490 (x13 x549))) (>= 1461501637330902918203684832716283019655932542975 x498) (>= x37 0) (> 2113256763 x389)) (or (and x636 (= 0 x299)) (and (and (< 0 x228) (= x572 (div x640 1000000000000000000000000000)) (= (x361 (+ 500000000000000000000000000 x107)) x640) (= (not x301) x377) (= (mod (* x670 x623) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x107) (<= 0 x16) (= x194 (= x670 0)) (< x16 1461501637330902918203684832716283019655932542976) (= x637 (or x194 x377)) (= x670 (x738 128)) (>= 1461501637330902918203684832716283019655932542975 x16) (= (ite x637 1 0) x228) (= x299 x572) (= x301 (< x692 x623)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x670) x692)) (not x636)))))) (and (< x333 2113256763) (<= 0 x331) (<= 0 x449) (= x594 (x97 x614)) (= x190 x471) (= x527 x190) (< x333 826074471) (>= 1461501637330902918203684832716283019655932542975 x449) (= x594 x448) (= (x490 (x13 x549)) x223) (= x769 x508) (= x530 x258) (<= x530 1461501637330902918203684832716283019655932542975) (= x75 x449) (not (> 404098525 x333)) (> 340282366920938463463374607431768211456 x594) (>= 1461501637330902918203684832716283019655932542975 x331) (>= 1461501637330902918203684832716283019655932542975 x471) (= 0 x508) (<= 0 x471) (= (x128 (x13 x530) (x139 52) 0) x614) (not (= x333 404098525)) (>= x594 0) (> x223 0) (= x333 497176382) (<= x594 340282366920938463463374607431768211455))) x208) x685))
(assert (= (=> (and (or (and (and (not (< x544 x239)) (= x177 (x622 (- x544 x239)))) x435) (and (and (= (x622 (- x239 x544)) x577) (not (< x239 x544))) (not x435))) (= (> x544 x239) x435)) x250) x337))
(assert (= (or (and x48 x457) (and x399 (not x7)) x220 x701 (and x611 x583) (and x193 x357)) x80))
(assert (x553 x218))
(assert (x553 x665))
(assert (x553 x231))
(assert (x553 x551))
(assert (= (and x633 x14) x473))
(assert (x553 x331))
(assert (x553 x167))
(assert (= (or x427 x249) x373))
(assert (x553 x308))
(assert (=> (>= 10000 x231) (= (x13 x231) (x139 x231))))
(assert (x553 x121))
(assert (x553 x660))
(assert (x553 x686))
(assert (x553 x677))
(assert (= (or x604 x174) x737))
(assert (x553 x444))
(assert (x553 x507))
(assert (=> (>= 10000 x549) (= (x139 x549) (x13 x549))))
(assert (x553 x354))
(assert (= x115 (and x212 x586)))
(assert (=> (<= x539 10000) (= (x13 x539) (x139 x539))))
(assert (x553 x256))
(assert (=> (<= x428 10000) (= (x139 x428) (x13 x428))))
(assert (= (or x115 x383) x39))
(assert (= (and x114 x387) x731))
(assert (x553 x18))
(assert (x553 x227))
(assert (x553 x480))
(assert (=> (<= x642 10000) (= (x13 x642) (x139 x642))))
(assert (x553 x323))
(assert (x553 x703))
(assert (x553 x264))
(assert (x553 x629))
(assert (= x743 (=> (and (= x27 x335) (= x166 x590) (= x496 x606) (= x414 0) (= x27 (x622 (- x26 x724))) (= x428 x707) (= x596 x117) (= x17 x345)) x112)))
(assert (x553 x3))
(assert (x553 x527))
(assert (x553 x466))
(assert (x553 x349))
(assert (x553 x159))
(assert (x553 x729))
(assert (x553 x478))
(assert (= x88 (and x737 (not x28))))
(assert (x553 x534))
(assert (x553 x38))
(assert (x553 x644))
(assert (= (x139 22711052170661352172463706074549474602446478010439206087695126111415334600704) (x13 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x553 x456))
(assert (x553 x536))
(assert (x553 x106))
(assert (x553 x27))
(assert (x553 x117))
(assert (= (x13 2113256763) (x139 2113256763)))
(assert (x553 x711))
(assert (x85 x551))
(assert (x553 x464))
(assert (= (x689 (x139 497176382)) 497176382))
(assert (x553 x724))
(assert (x85 x487))
(assert (= (x689 (x13 x231)) x231))
(assert (x553 x235))
(assert (x553 x582))
(assert (x85 x257))
(assert (x553 x558))
(assert (x85 x549))
(assert (x553 x177))
(assert (= x721 (or x503 (and (not x682) x69))))
(assert (x553 x430))
(assert (x553 x320))
(assert (x553 x158))
(assert (x553 x269))
(assert (x553 x690))
(assert (x553 x42))
(assert (x553 x364))
(assert (x553 x41))
(assert (= x316 (and x578 x422)))
(assert (x553 x577))
(assert (x553 x390))
(assert (= (x689 (x139 3018967357)) 3018967357))
(assert (=> (<= x664 10000) (= (x13 x664) (x139 x664))))
(assert (x553 x474))
(assert (= (x13 115792089237316195423570985008687907853269984665640) (x139 115792089237316195423570985008687907853269984665640)))
(assert (= (or x557 x384) x147))
(assert (x553 x46))
(assert (x553 x226))
(assert (x553 x253))
(assert (= x51 (or x29 x709)))
(assert (x702 x507))
(assert (x553 x591))
(assert (x553 x715))
(assert (=> (<= x677 10000) (= (x139 x677) (x13 x677))))
(assert (x553 x498))
(assert (x553 x508))
(assert (x553 x768))
(assert (= (x689 (x139 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (x553 x172))
(assert (x553 x381))
(assert (x593 x507))
(assert (= (and x289 x313) x174))
(assert (x553 x386))
(assert (x593 x57))
(assert (x553 x213))
(assert (x553 x162))
(assert (= (x689 (x139 2835717307)) 2835717307))
(assert (x553 x575))
(assert (x553 x126))
(assert (x553 x366))
(assert (x553 x449))
(assert (= x517 (=> (and (= (= x346 0) x682) (or (not x682) x682)) x585)))
(assert (x553 x522))
(assert (= 1000000000000000000000000000 x166))
(assert (x553 x178))
(assert (x553 x668))
(assert (x553 x107))
(assert (x553 x240))
(assert (x553 x78))
(assert (x725 x75))
(assert (x553 x707))
(assert (x553 x681))
(assert (= (x689 (x13 x695)) x695))
(assert (x553 x477))
(assert (= (x139 22707518476531795403804539479547988765414823042645454849778882899012749361152) (x13 22707518476531795403804539479547988765414823042645454849778882899012749361152)))
(assert (x553 x142))
(assert (x553 x257))
(assert (x553 x290))
(assert (x553 x590))
(assert (x553 x192))
(assert (x553 x606))
(assert (x553 x294))
(assert (x553 x75))
(assert (x553 x321))
(assert (= (and x52 x186) x15))
(assert (= (x689 (x13 x551)) x551))
(assert (= (x689 (x13 x428)) x428))
(assert (x553 x164))
(assert (x553 x396))
(assert (= (x13 1889567281) (x139 1889567281)))
(assert (= x625 (=> (= x28 (= x549 x425)) (and (=> (and x28 (and (= x204 x551) (= x660 x76) (= x187 x126))) x423) (=> (and (not x28) (and (>= x551 0) (not (= 1889567281 x537)) (>= 1461501637330902918203684832716283019655932542975 x551) (= x425 x356) (= x359 (or (and (> 64 x328) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x328))) (> x328 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x58 320) (not (= 157198259 x537)) (= (x622 (- x136 4)) x328) (not (> 4 x136)) (= x441 x480) (= x136 68) (= x70 (x490 (x13 x182))) (= 2835717307 x537) (> 1461501637330902918203684832716283019655932542976 x551) (not (= 599290589 x537)) (> x70 0) (not (= 404098525 x537)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x668))) (and (=> (and (not x359) (= true x340)) (and (=> (and x340 (and (= (x128 (x13 x549) (x139 1) 0) x658) (= (x693 x658) x382) (= (< x382 x441) x410) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x382) (= x292 x480) (<= 0 x382))) (and (=> x410 x720) (=> (and (not x410) (= x113 (< x382 x480))) (and (=> (and (and (= (< x729 x681) x422) (= (x622 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x480)) x729) (>= x681 0) (<= x681 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x715 (x622 (- x382 x480))) (= (x128 (x13 x425) (x139 1) 0) x535) (= (x128 (x13 x549) (x139 1) 0) x83) (= (x203 x535) x681)) (not x113)) (and (=> (and (not x422) (and (= (> x681 x242) x736) (= (x361 (+ x480 x681)) x242))) (and (=> (and (and (= x396 32) (= (x128 (x13 x425) (x139 1) 0) x5) (= 1 x353) (= x76 x294) (= x246 x551) (= x391 x126)) (not x736)) x763) (=> x736 x720))) (=> x422 x720))) (=> x113 x720))))) (=> (not x340) x720))) (=> x359 x720)))))))
(assert (x553 x127))
(assert (x553 x742))
(assert (x553 x91))
(assert (= (x139 157198259) (x13 157198259)))
(assert (x553 x104))
(assert (= (x13 3018967357) (x139 3018967357)))
(assert (= x193 (and (not x36) x147)))
(assert (x553 x102))
(assert (x553 x680))
(assert (x553 x545))
(assert (x553 x45))
(assert (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x689 (x139 94699471215667416670508682402181198833950827816622411988269365108481485438976))))
(assert (= (and x511 x370) x137))
(assert (x553 x302))
(assert (x553 x572))
(assert (x553 x35))
(assert (= (or x154 x714) x732))
(assert (= (x139 2835717307) (x13 2835717307)))
(assert (x553 x692))
(assert (= (x689 (x139 500000000000000000000000000)) 500000000000000000000000000))
(assert (x553 x312))
(assert (x553 x99))
(assert (x553 x335))
(assert (= x96 (=> (and (= x124 x226) (= x687 x623) (= x386 x16) (> x501 0)) x685)))
(assert (=> (>= 10000 x530) (= (x13 x530) (x139 x530))))
(assert (x553 x549))
(assert (x553 x727))
(assert (x553 x365))
(assert (= x412 (or x179 x647)))
(assert (x553 x30))
(assert (= (and (not x298) x259) x179))
(assert (= (=> (and (or (not x181) x181) (= x181 (= x353 0))) x184) x763))
(assert (x553 x542))
(assert (x553 x411))
(assert (x553 x246))
(assert (= x184 (=> (and (or (and (and (< 0 x222) (= x33 1) (= (x490 (x13 x551)) x222)) x649) (and (not x649) (and (= (not x157) x118) (= x396 32) (= (= x231 0) x157) (= x33 (ite x118 1 0))))) (and (= (= 0 x396) x649) (> x353 0))) x109)))
(assert (x85 x182))
(assert (x553 x263))
(assert (x553 x421))
(assert (= (or x671 x436) x445))
(assert (= x491 (and (not x649) x267)))
(assert (x553 x279))
(assert (x553 x110))
(assert (= (x13 3607235850) (x139 3607235850)))
(assert (= 1461501637330902918203684832716283019655932542976 (x689 (x139 1461501637330902918203684832716283019655932542976))))
(assert (x553 x341))
(assert (x553 x619))
(assert (x553 x196))
(assert (x553 x54))
(assert (= x267 (or (and (not x181) x445) x324)))
(assert (= true x260))
(assert (x553 x698))
(assert (= (x689 (x139 157198259)) 157198259))
(assert (x553 x433))
(assert (x553 x190))
(assert (= (and x612 (not x626)) x254))
(assert (x553 x25))
(assert (x553 x77))
(assert (= x604 (and x289 (not x313))))
(assert (= 1000000000000000000000000000 x391))
(assert (x553 x57))
(assert (x553 x17))
(assert (x553 x328))
(assert (= x259 (or x610 (and x73 (not x632)))))
(assert (x553 x375))
(assert (x553 x673))
(assert (x553 x163))
(assert (= 1889567281 (x689 (x139 1889567281))))
(assert (x553 x670))
(assert (x553 x382))
(assert (x553 x16))
(assert (= x124 1000000000000000000000000000))
(assert (x553 x607))
(assert (= (x139 340282366920938463463374607431768211455) (x13 340282366920938463463374607431768211455)))
(assert (x553 x745))
(assert (x553 x631))
(assert (= (and x28 x737) x221))
(assert (x553 x276))
(assert (= (x139 1461501637330902918203684832716283019655932542976) (x13 1461501637330902918203684832716283019655932542976)))
(assert (= x249 (and x374 x39)))
(assert (= (x689 (x139 404098525)) 404098525))
(assert (x553 x60))
(assert (x553 x237))
(assert (x553 x437))
(assert (x553 x538))
(assert (= x539 (x689 (x13 x539))))
(assert (= x461 (=> (and (and (and (= x153 (mod (* 1000000000000000000000000000 x742) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (= 0 x240)) (= x502 x528) (<= x753 1461501637330902918203684832716283019655932542975) (= x213 (x598 x554)) (< 0 x452) (= (> x213 x207) x646) (= x92 (div x100 1000000000000000000000000000)) (= (= x447 x178) x613) (>= 1461501637330902918203684832716283019655932542975 x54) (= x751 (x128 (x13 x487) (x139 52) 0)) (not (< x392 3607235850)) (= (x598 x210) x93) (= (x622 (- x584 x240)) x57) (>= 1461501637330902918203684832716283019655932542975 x428) (= x60 (x361 (+ 500000000000000000000000000 x269))) (= (x361 (+ x524 500000000000000000000000000)) x100) (not (> x240 x26)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x214) x207) (>= x54 0) (= 0 x84) (= x201 (x622 (- x26 x240))) (= (x598 x751) x584) (= (x128 (x13 x487) (x139 52) 0) x352) (not (< 340282366920938463463374607431768211455 x240)) (= x523 x695) (= x172 (div x60 1000000000000000000000000000)) (<= x214 340282366920938463463374607431768211455) (= x95 (not x646)) (= x521 x275) (< x213 340282366920938463463374607431768211456) (<= x584 340282366920938463463374607431768211455) (> 1461501637330902918203684832716283019655932542976 x428) (>= 1461501637330902918203684832716283019655932542975 x487) (= (+ x456 x603) x209) (= x753 x158) (= (ite x330 1 0) x355) (= x487 x258) (= (x266 340282366920938463463374607431768211455 x57) x456) (= 0 x241) (= x9 x661) (< x214 340282366920938463463374607431768211456) (= x502 (x266 1461501637330902918203684832716283019655932542975 x75)) (= x727 x175) (>= x584 0) (= (not x19) x418) (= x524 (mod (* x214 x213) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x240 x584)) (= 3607235850 x392) (= (not x225) x189) (>= 1461501637330902918203684832716283019655932542975 x695) (= (x730 x352) x214) (= x54 x75) (= x534 x102) (= x748 1000000000000000000000000000) (= x452 (x490 (x13 x549))) (= x162 (x622 (- x26 x240))) (= x241 (ite x674 1 0)) (= x9 (x266 1461501637330902918203684832716283019655932542975 x75)) (= x474 1000000000000000000000000000) (= x210 (x128 (x13 x487) (x139 52) 0)) (<= 0 x428) (= (div x591 1000000000000000000000000000) x240) (= (not x418) x1) (> x542 0) x613 (= (- x209 x93) x447) (<= 0 x753) (= (> x213 115792089237316195423570985008687907853269984665640) x225) (= (= x214 0) x541) (<= x215 1461501637330902918203684832716283019655932542975) (>= x214 0) (<= 0 x213) (= x189 x330) (= x415 (or x95 x541)) (= x269 (mod (* x213 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (< x392 2113256763)) (<= 0 x215) (<= x93 340282366920938463463374607431768211455) (= x586 (= 0 x428)) (= x527 x158) (= x84 x769) (= x742 (x361 (+ x102 x521))) (not (< x172 x92)) (not (> 3018967357 x392)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x26) (>= 340282366920938463463374607431768211455 x213) (= x1 x674) (= x528 (x266 1461501637330902918203684832716283019655932542975 x486)) (= x591 (x361 (+ 500000000000000000000000000 x153))) (> 340282366920938463463374607431768211456 x584) (= (x128 (x13 x487) (x139 52) 0) x554) (= x439 (x622 (- x172 x92))) (= x661 (x266 1461501637330902918203684832716283019655932542975 x486)) (>= x93 0) (<= 0 x26) (= x25 x513) (= (< 115792089237316195423570985008687907853269984665640 x742) x19) (< 0 x355) (= x542 (ite x415 1 0))) (or (and (not x586) (and (not (= x761 0)) (= x761 (x490 (x13 x428))))) x586)) (= x175 x421)) x32)))
(assert (= x585 (=> (and (and (< 0 x346) (= (= x570 0) x576)) (or (and (not x576) (and (= (= x487 0) x655) (= 32 x570) (= x573 (not x655)) (= x501 (ite x573 1 0)))) (and x576 (and (> x638 0) (= x638 (x490 (x13 x596))) (= x501 1))))) x96)))
(assert (x553 x169))
(assert (x593 340282366920938463463374607431768211455))
(assert (= x151 (and x304 x150)))
(assert (x553 x414))
(assert (x553 x268))
(assert (= (x139 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x13 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x553 x428))
(assert (x553 x754))
(assert (x553 x695))
(assert (x553 x555))
(assert (x553 x587))
(assert (x553 x380))
(assert (x553 x402))
(assert (x553 x278))
(assert (= x610 (and x73 x632)))
(assert (x725 x486))
(assert (= (x13 500000000000000000000000000) (x139 500000000000000000000000000)))
(assert (x553 x471))
(assert (x553 x497))
(assert (x553 x84))
(assert (x553 x458))
(assert (= (and x387 (not x114)) x612))
(assert (x553 x12))
(assert (x85 x664))
(assert (x553 x280))
(assert (= (x139 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x13 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (= x304 (and (not x284) x373)))
(assert (x553 x187))
(assert (=> (<= x257 10000) (= (x13 x257) (x139 x257))))
(assert (x553 x684))
(assert (= (x13 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x139 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x553 x537))
(assert (x553 x199))
(assert (= (and x39 (not x374)) x427))
(assert (x85 x308))
(assert (= x457 (and x372 (not x713))))
(assert (x85 x677))
(assert (x553 x482))
(assert (=> (<= x308 10000) (= (x139 x308) (x13 x308))))
(assert (= x758 (and (not x422) x578)))
(assert (x553 x6))
(assert (= (x689 (x13 x308)) x308))
(assert (= x505 (and x185 x113)))
(assert (x553 x589))
(assert (x553 x496))
(assert (x553 x439))
(assert (x553 x750))
(assert (= x226 1000000000000000000000000000))
(assert (x553 x166))
(assert (x553 x125))
(assert (x85 x695))
(assert (x553 x520))
(assert (= (x139 826074471) (x13 826074471)))
(assert (= (or x564 x412) x511))
(assert (x553 x596))
(assert (x553 x638))
(assert (x553 x481))
(assert (= x257 (x689 (x13 x257))))
(assert (x553 x467))
(assert (= (=> (and (or (and x374 (and (not (< x439 x742)) (= (x622 (- x439 x742)) x42))) (and (and (not (> x439 x742)) (= x167 (x622 (- x742 x439)))) (not x374))) (= (> x439 x742) x374)) x130) x32))
(assert (x553 x406))
(assert (x553 x282))
(assert (x553 x33))
(assert (x553 x643))
(assert (= (and x732 (not x636)) x29))
(assert (= (and x260 (not x81)) x429))
(assert (x553 x161))
(assert (x553 x72))
(assert (x553 x661))
(assert (x553 x667))
(assert (x553 x733))
(assert (x553 x133))
(assert (x553 x229))
(assert (x553 x219))
(assert (x553 x236))
(assert (x553 x310))
(assert (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x689 (x139 22402283082756182618670880521465619040657731284550890770856599233457073160192))))
(assert (x553 x214))
(assert (x553 x315))
(assert (x553 x639))
(assert (x553 x512))
(assert (x553 x59))
(assert (= x647 (and x298 x259)))
(assert (x553 x34))
(assert (x85 x642))
(assert (x553 x446))
(assert (x553 x416))
(assert (x553 x261))
(assert (= (=> (and (= x296 (x622 (- x478 x121))) (= 0 x353) (= x246 x551) (= x296 x294) (= x391 x126) (= x396 x555)) x763) x720))
(assert (x553 x37))
(assert (x553 x241))
(assert (x553 x31))
(assert (x553 x93))
(assert (x553 x599))
(assert (x553 x303))
(assert (x553 x528))
(assert (x553 x287))
(assert (x553 x525))
(assert (= (x689 (x139 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (= x425 (x689 (x13 x425))))
(assert (x553 x741))
(assert (x553 x700))
(assert (x553 x441))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x689 (x139 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x553 x425))
(assert (= (x139 1000000000000000000000000000) (x13 1000000000000000000000000000)))
(assert (x85 x425))
(assert (x553 x543))
(assert (x553 x277))
(assert (x553 x296))
(assert (x553 x248))
(assert (= (x13 94699471215667416670508682402181198833950827816622411988269365108481485438976) (x139 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (= x557 (and x351 x435)))
(assert (= (x13 1461501637330902918203684832716283019655932542975) (x139 1461501637330902918203684832716283019655932542975)))
(assert (= x596 (x689 (x13 x596))))
(assert (x553 x581))
(assert (x553 x145))
(assert (x553 x448))
(assert (= x185 (and (not x410) x11)))
(assert (x553 x654))
(assert (x553 x465))
(assert (x553 x426))
(assert (= x129 (=> (and (and (= (x622 (- x478 x121)) x76) (= (x622 (- x406 x121)) x507) (= (+ x375 x256) x424) (= x754 x261) (<= 0 x453) (= x696 (= x650 x237)) (not (< x406 x121)) (= 0 x171) (= x253 (div x219 1000000000000000000000000000)) (= (not x2) x63) (= (x622 (- x253 x653)) x522) (<= 0 x77) (not (< x416 2113256763)) (= (x266 1461501637330902918203684832716283019655932542975 x75) x236) (= x441 x275) (> 340282366920938463463374607431768211456 x406) (= (- x424 x453) x650) (>= x478 0) (= x425 x523) (<= x478 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< 340282366920938463463374607431768211455 x121)) (= x769 x171) (= x236 x413) (= x413 (x266 1461501637330902918203684832716283019655932542975 x486)) (= x25 x704) (= (not x460) x705) (<= 0 x59) (= x694 x756) (>= x406 0) (>= 340282366920938463463374607431768211455 x453) (= (x128 (x13 x231) (x139 52) 0) x726) (>= x754 0) (= x258 x231) (= (x622 (- x478 x121)) x144) (= (x510 x462) x453) (>= 340282366920938463463374607431768211455 x59) (= x653 (div x263 1000000000000000000000000000)) (< x664 1461501637330902918203684832716283019655932542976) (= x481 1000000000000000000000000000) (= x538 (x361 (+ x198 500000000000000000000000000))) (= (> x59 x723) x2) (= x108 (< 115792089237316195423570985008687907853269984665640 x59)) (= x635 (x128 (x13 x231) (x139 52) 0)) x696 (>= 1461501637330902918203684832716283019655932542975 x231) (= (x128 (x13 x231) (x139 52) 0) x462) (= x370 (= x664 0)) (= x261 x527) (= (x266 1461501637330902918203684832716283019655932542975 x486) x719) (= x460 (not x666)) (= x375 (x266 340282366920938463463374607431768211455 x507)) (= (x510 x726) x406) (= (mod (* 1000000000000000000000000000 x59) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x283) (<= x406 340282366920938463463374607431768211455) (= (x361 (+ 500000000000000000000000000 x680)) x263) (= x719 x492) (<= x754 1461501637330902918203684832716283019655932542975) (= (= 0 x195) x319) (= (x361 (+ 500000000000000000000000000 x283)) x219) (not (> x653 x253)) (= x515 (ite x694 1 0)) (>= x78 0) (= 0 x12) (= x416 3607235850) (<= x78 1461501637330902918203684832716283019655932542975) (<= x195 340282366920938463463374607431768211455) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x195) x723) (= (x128 (x13 x231) (x139 52) 0) x358) (<= x664 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x77) (= x121 (div x538 1000000000000000000000000000)) (= x492 (x266 1461501637330902918203684832716283019655932542975 x75)) (< 0 x607) (> x99 0) (< x59 340282366920938463463374607431768211456) (<= x425 1461501637330902918203684832716283019655932542975) (= (ite x371 1 0) x99) (> 340282366920938463463374607431768211456 x195) (= x680 (mod (* x195 x59) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x121 x478)) (= x75 x78) (= x617 1000000000000000000000000000) (> x515 0) (= (or x63 x319) x371) (>= x664 0) (= (x490 (x13 x549)) x607) (= x566 x705) (>= x195 0) (= (ite x566 1 0) x12) (= x756 (not x108)) (not (= x121 0)) (= (x314 x635) x195) (not (> 3607235850 x416)) (not (> 3018967357 x416)) (= x666 (> x441 115792089237316195423570985008687907853269984665640)) (= x198 (mod (* x441 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x510 x358) x59)) (or (and (and (= x536 (x490 (x13 x664))) (not (= 0 x536))) (not x370)) x370)) x317)))
(assert (= (x139 404098525) (x13 404098525)))
(assert (= x663 (and x325 x434)))
(assert (x553 x544))
(assert (x553 x521))
(assert (x553 x258))
(assert (x553 x369))
(assert (= (x13 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x139 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x553 x355))
(assert (x593 x257))
(assert (x553 x413))
(assert (= x436 (and x758 (not x736))))
(assert (x553 x744))
(assert (x553 x524))
(assert (x85 x539))
(assert (x553 x513))
(assert (= x289 (or x329 x137)))
(assert (= (or x224 x80) x73))
(assert (x553 x353))
(assert (x553 x198))
(assert (x553 x740))
(assert (= (x13 497176382) (x139 497176382)))
(assert (= x324 (and x181 x445)))
(assert (x553 x26))
(assert (= x372 (and (not x518) x251)))
(assert (= (=> (and (= x256 x496) (= x664 x707) (= x335 x478) (= x126 x590) (> x278 0) (= x117 x551)) x129) x143))
(assert (x553 x640))
(assert (x593 x75))
(assert (= (and x351 (not x435)) x384))
(assert (= (x689 (x13 x664)) x664))
(assert (x553 x601))
(assert (x553 x641))
(assert (=> (>= 10000 x487) (= (x139 x487) (x13 x487))))
(assert (x553 x539))
(assert (x553 x749))
(assert (x553 x623))
(assert (x553 x10))
(assert (= (and x373 x284) x154))
(assert (x553 x307))
(assert (x553 x588))
(assert (x553 x223))
(assert (= x547 (and (not x576) x721)))
(assert (x553 x716))
(assert (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x689 (x139 22711052170661352172463706074549474602446478010439206087695126111415334600704))))
(assert (x553 x432))
(assert (x553 x204))
(assert (x553 x293))
(assert (x553 x334))
(assert (x553 x704))
(assert (x553 x9))
(assert (= (x689 (x13 x549)) x549))
(assert (x553 x21))
(assert (x553 x519))
(assert (x553 x559))
(assert (x553 x344))
(assert (= x590 1000000000000000000000000000))
(assert (=> (>= 10000 x596) (= (x13 x596) (x139 x596))))
(assert (x553 x595))
(assert (x553 x356))
(assert (x553 x532))
(assert (x553 x350))
(assert (= x503 (and x69 x682)))
(assert (= (and (not x586) x212) x383))
(assert (x553 x197))
(assert (x553 x592))
(assert (= x69 (or x151 x24 x254)))
(assert (x702 x57))
(assert (x553 x492))
(assert (= x677 (x689 (x13 x677))))
(assert (= (x689 (x139 340282366920938463463374607431768211456)) 340282366920938463463374607431768211456))
(assert (x553 x653))
(assert (x553 x453))
(assert (x85 x530))
(assert (= (=> (and (and (>= x354 0) (not (< x430 3018967357)) (= x426 (x490 (x13 x549))) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x199) x619) (not (< x26 x724)) (>= x733 0) (not (> 2113256763 x430)) (= (= x199 0) x443) (= (x266 1461501637330902918203684832716283019655932542975 x486) x644) (= (div x378 1000000000000000000000000000) x306) (= (x598 x494) x411) (= 1000000000000000000000000000 x3) (= x388 x141) (= x81 (= 0 x428)) (<= x258 1461501637330902918203684832716283019655932542975) (not (= 0 x724)) (<= x4 1461501637330902918203684832716283019655932542975) (= x379 (> x667 115792089237316195423570985008687907853269984665640)) (>= 255 x49) (<= 0 x411) (>= 1461501637330902918203684832716283019655932542975 x549) (>= x258 0) (= (x128 (x13 x257) (x139 52) 0) x74) (= x550 (= x567 x606)) (>= x428 0) (= (ite x65 1 0) x343) (>= x47 0) (= x25 x378) (<= 0 x596) (= (mod (* x667 x199) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x745) (= x769 x31) (>= 340282366920938463463374607431768211455 x411) (= x459 (< 115792089237316195423570985008687907853269984665640 x239)) (= x104 (ite x211 1 0)) (not (> x582 x18)) (>= 1461501637330902918203684832716283019655932542975 x428) (= x45 x6) (= x523 x532) (> 340282366920938463463374607431768211456 x354) (= (x622 (- x354 x724)) x159) (= x320 x527) (= x350 x258) (= (> (x490 (x13 x182)) 0) x205) (>= 255 x145) (< 0 x549) (<= 0 x558) (= x311 (x128 (x13 x257) (x139 52) 0)) (<= x354 340282366920938463463374607431768211455) (= (x622 (- x26 x724)) x365) x205 (= 3607235850 x430) (= (x598 x326) x354) (= (- x420 x411) x567) (= (x598 x74) x667) (= x534 x239) (= x257 x258) (<= x587 1461501637330902918203684832716283019655932542975) (< x667 340282366920938463463374607431768211456) (= x320 x164) (= (x361 (+ x280 500000000000000000000000000)) x401) (= x724 (div x401 1000000000000000000000000000)) (= (x266 1461501637330902918203684832716283019655932542975 x75) x50) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x26) (= x141 (not x500)) (= (x266 340282366920938463463374607431768211455 x159) x432) (>= x523 0) x111 (not (< x354 x724)) (<= 0 x164) (= (x266 1461501637330902918203684832716283019655932542975 x75) x293) (= x47 x75) (= x493 (not x379)) (= x519 (x22 (x13 x549))) (>= x667 0) x678 (= x31 0) (<= 0 x49) (>= 1461501637330902918203684832716283019655932542975 x257) (> 1461501637330902918203684832716283019655932542976 x428) (< 0 x182) (< x199 340282366920938463463374607431768211456) (= x146 (x128 (x13 x257) (x139 52) 0)) x550 (<= 0 x587) (= (x128 (x13 x257) (x139 52) 0) x326) (>= 1461501637330902918203684832716283019655932542975 x428) (= x111 (not (= x350 x106))) (= 1000000000000000000000000000 x679) (<= x667 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x47) (= x651 x25) (>= 1461501637330902918203684832716283019655932542975 x182) (<= 0 x428) (= x182 x596) (= (< 0 (x490 (x13 x549))) x678) (>= x145 0) (= x549 x106) (<= 0 x4) (>= 340282366920938463463374607431768211455 x199) (= x25 x166) (not (> 3607235850 x430)) (= x280 (mod (* x239 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= 0 x519) (= x544 (x622 (- x18 x582))) (>= 1461501637330902918203684832716283019655932542975 x532) (= (div x744 1000000000000000000000000000) x18) (< 0 x426) (= (x361 (+ 500000000000000000000000000 x122)) x744) (= x733 x75) (= x199 (x730 x311)) (not (> x724 340282366920938463463374607431768211455)) (= (x128 (x13 x257) (x139 52) 0) x494) (= x500 (not x459)) (>= 1461501637330902918203684832716283019655932542975 x6) (<= x523 1461501637330902918203684832716283019655932542975) (= x122 (mod (* x667 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 1461501637330902918203684832716283019655932542975 x596) (> x343 0) (= (x622 (- x26 x724)) x380) (= (> x667 x619) x327) (<= 0 x26) (= x38 (x266 1461501637330902918203684832716283019655932542975 x486)) (= x65 x493) (= x68 (not x327)) (= x211 (or x443 x68)) (= 1000000000000000000000000000 x290) (= x482 (ite x388 1 0)) (= 0 x482) (>= x199 0) (not (= x549 x182)) (< 0 x104) (<= x733 1461501637330902918203684832716283019655932542975) (= (x22 (x13 x182)) x558) (= (div x750 1000000000000000000000000000) x582) (>= 1461501637330902918203684832716283019655932542975 x164) (= x644 x293) (= x38 x50) (= x420 (+ x432 x603)) (= (x361 (+ x745 500000000000000000000000000)) x750) (<= 0 x6)) (or (and (and (= x740 (x266 1461501637330902918203684832716283019655932542975 x257)) (not (= x302 0)) (= (x490 (x13 x428)) x302)) (not x81)) x81)) x337) x450))
(assert (x553 x719))
(assert (= 1000000000000000000000000000 x126))
(assert (x702 x159))
(assert (=> (>= 10000 x551) (= (x13 x551) (x139 x551))))
(assert (x553 x362))
(assert (=> (<= x425 10000) (= (x139 x425) (x13 x425))))
(assert (x553 x242))
(assert (x553 x281))
(assert (= (and x399 x7) x583))
(assert (x553 x155))
(assert (= x251 (and x583 (not x611))))
(assert (x553 x617))
(assert (= (and x147 x36) x564))
(assert (x553 x124))
(assert (x553 x138))
(assert (x553 x175))
(assert (x553 x272))
(assert (x553 x182))
(assert (x553 x469))
(assert (x553 x570))
(assert (= (=> (and (= (> x522 x441) x313) (or (and (not x313) (and (= x376 (x622 (- x441 x522))) (not (< x441 x522)))) (and x313 (and (= (x622 (- x522 x441)) x138) (not (> x441 x522)))))) x625) x317))
(assert (x85 x231))
(assert (x593 x159))
(assert (= (and x260 x81) x672))
(assert (x553 x201))
(assert (x553 x49))
(assert (x553 x679))
(assert (x553 x762))
(assert (x553 x468))
(assert (x553 x687))
(assert (x553 x40))
(assert (x553 x47))
(assert (x553 x363))
(assert (x553 x333))
(assert (= (x689 (x13 x487)) x487))
(assert (x553 x753))
(assert (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x689 (x139 115792089237316195423570985008687907853269984665640064039457584007913129639935))))
(assert (x553 x265))
(assert (x553 x153))
(assert (x553 x501))
(assert (= (and (not x48) x457) x224))
(assert (x725 x257))
(assert (= x325 (or x221 x645)))
(assert (x553 x634))
(assert (x553 x135))
(assert (x553 x58))
(assert (x593 x486))
(assert (x553 x92))
(assert (x553 x452))
(assert (= (or x547 x472) x714))
(assert (x553 x761))
(assert (= (x139 599290589) (x13 599290589)))
(assert (x553 x603))
(assert (= (=> (and (= x187 x391) (> x33 0) (= x204 x246) (= x660 x294)) x423) x109))
(assert (x553 x4))
(assert (x553 x515))
(assert (=> (>= 10000 x182) (= (x139 x182) (x13 x182))))
(assert (x553 x487))
(assert (x553 x540))
(assert (x553 x748))
(assert (not x450))
(assert (x553 x64))
(assert (x553 x345))
(assert (= (x689 (x139 22707518476531795403804539479547988765414823042645454849778882899012749361152)) 22707518476531795403804539479547988765414823042645454849778882899012749361152))
(assert (x553 x239))
(assert (= x24 (or (and x626 x612) (and x14 (not x633)) (and x722 x473) x15 x731)))
(assert (= 1000000000000000000000000000 x187))
(assert (x553 x746))
(assert (x553 x392))
(assert (x553 x20))
(assert (= x250 (=> (and (= x36 (= x366 x549)) (= x366 (x266 1461501637330902918203684832716283019655932542975 x532))) (and (=> (and (and (= x64 2835717307) (> 1461501637330902918203684832716283019655932542976 x596) (not (= 404098525 x64)) (= 68 x21) (= 320 x641) (= x698 (x490 (x13 x182))) (= (x266 1461501637330902918203684832716283019655932542975 x532) x46) (not (> 4 x21)) (not (= 599290589 x64)) (not (= x64 1889567281)) (= x499 (x622 (- x21 4))) (<= x596 1461501637330902918203684832716283019655932542975) (< 0 x698) (= x239 x218) (= x281 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= (or (and (< x499 64) (= true (<= x499 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x499)) x357) (not (= 157198259 x64)) (= x46 x308) (<= 0 x596)) (not x36)) (and (=> x357 x743) (=> (and (not x357) (and (= x232 x308) (= x7 true))) (and (=> (not x7) x743) (=> (and (and (<= 0 x265) (= (x470 x149) x265) (= x149 (x128 (x13 x549) (x139 1) 0)) (= x540 x218) (= x611 (> x239 x265)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x265)) x7) (and (=> x611 x743) (=> (and (= (< x265 x218) x518) (not x611)) (and (=> x518 x743) (=> (and (not x518) (and (= x349 (x395 x475)) (= (x622 (- x265 x218)) x581) (= x475 (x128 (x13 x308) (x139 1) 0)) (= x575 (x622 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x218))) (<= x349 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x575 x349) x713) (= (x128 (x13 x549) (x139 1) 0) x683) (>= x349 0))) (and (=> x713 x743) (=> (and (and (= (x361 (+ x218 x349)) x34) (= (< x34 x349) x48)) (not x713)) (and (=> x48 x743) (=> (and (and (= x117 x596) (= x318 (x128 (x13 x308) (x139 1) 0)) (= 1 x414) (= 32 x17) (= x428 x707) (= x166 x590) (= x606 x496) (= x335 x380)) (not x48)) x112))))))))))))) (=> (and (and (= x664 x428) (= x551 x596) (= x256 x606) (= x380 x478) (= x126 x166)) x36) x129)))))
(assert (x553 x144))
(assert (x553 x228))
(assert (x553 x642))
(assert (= (x689 (x13 x182)) x182))
(assert (= x208 (=> (and (= x299 x588) (and (= x306 x206) (= x306 x739) (= x306 x403) (= x597 (+ x110 x600)) (= (+ x404 x654) x295) (= 3 x563) (= x559 x142) (= (* 3 x206) x245) (= (* x739 3) x404) (= (+ x272 x431) x516) (= x746 x465) (= 3 x268) (= x600 (* 3 x403)) (= x315 x309) (= x662 x306) (= (>= x516 x315) x132) (= x310 3) (= x272 x142) (= (and x291 x62) x757) (= x615 (+ x485 x710)) (= x703 3) (= (and x23 x552) x291) (= x749 x634) (= x202 (<= x465 x597)) (= x62 (and x618 x476)) (= x276 x233) (= x233 x161) (= x476 (and x360 x202)) (= (+ x303 x484) x546) (= x110 x71) (= x160 x306) (= x360 (>= x546 x116)) (= x654 x309) (= x484 (* 3 x160)) (= x485 x749) (= x23 (<= x276 x615)) (= 3 x344) (= (>= x295 x559) x103) (= x431 (* x662 3)) (= x306 x616) (= (and x103 x132) x618) (= 3 x599) (= x303 x746) (= x588 x525) (= x188 (+ x245 x161)) (= x71 x116) (= x552 (<= x634 x188)) (= (* 3 x616) x710))) x757)))
(assert (x85 x428))
(assert (x553 x180))
(assert (x553 x8))
(assert (= (x689 (x139 599290589)) 599290589))
(assert (= x676 (and x325 (not x434))))
(assert (x553 x723))
(assert (= 340282366920938463463374607431768211455 (x689 (x139 340282366920938463463374607431768211455))))
(assert (x553 x579))
(assert (x553 x584))
(assert (x553 x657))
(assert (x553 x70))
(assert (x553 x292))
(assert (= (or x491 x560) x645))
(assert (x553 x486))
(assert (x553 x346))
(assert (= (and x52 (not x186)) x387))
(assert (= (or (and x359 x88) (and x758 x736) x505 x316 (and x410 x11) (and (not x340) x338)) x671))
(assert (= (and x251 x518) x220))
(assert (= (x689 (x139 115792089237316195423570985008687907853269984665640)) 115792089237316195423570985008687907853269984665640))
(assert (x85 x596))
(assert (x553 x389))
(assert (x553 x485))
(assert (x553 x499))
(assert (= (or x429 x672) x351))
(assert (x553 x222))
(assert (x553 x55))
(assert (= x472 (and x576 x721)))
(assert (= (x689 (x139 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x553 x215))
(assert (x553 x50))
(assert (x553 x664))
(assert (= x14 (and x304 (not x150))))
(assert (x553 x233))
(check-sat)
(exit)