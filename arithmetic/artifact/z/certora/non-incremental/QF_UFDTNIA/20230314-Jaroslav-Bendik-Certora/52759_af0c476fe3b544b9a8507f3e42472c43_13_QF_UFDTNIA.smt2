(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x168 0)) (((x250 (x186 x168) (x152 x168) (x411 Int)) (x149 (x260 Int)) (x12 (x255 x168) (x141 Int)))))
(declare-fun x439 (x168) Int)
(declare-fun x51 () Int)
(declare-fun x412 () Bool)
(declare-fun x294 (x168) Int)
(declare-fun x264 (x168) Int)
(declare-fun x103 () x168)
(declare-fun x254 () Int)
(declare-fun x276 () Int)
(declare-fun x30 () Int)
(declare-fun x340 () x168)
(declare-fun x286 () Int)
(declare-fun x36 () Bool)
(declare-fun x320 () Int)
(declare-fun x467 () Int)
(declare-fun x450 () Int)
(declare-fun x2 () Bool)
(declare-fun x78 () Bool)
(declare-fun x342 () Int)
(declare-fun x319 () x168)
(declare-fun x56 () x168)
(declare-fun x271 () Bool)
(declare-fun x391 () Int)
(declare-fun x241 () x168)
(declare-fun x305 () Int)
(declare-fun x417 () Bool)
(declare-fun x150 () Int)
(declare-fun x154 () Int)
(declare-fun x160 () x168)
(declare-fun x174 (x168) Int)
(declare-fun x314 () Int)
(declare-fun x349 () Int)
(declare-fun x447 () Int)
(declare-fun x398 () x168)
(declare-fun x333 () Bool)
(declare-fun x166 () Bool)
(declare-fun x346 () Bool)
(declare-fun x301 () Int)
(declare-fun x156 () Bool)
(declare-fun x207 () Bool)
(declare-fun x221 () Bool)
(declare-fun x123 () Int)
(declare-fun x292 () Int)
(declare-fun x270 () Int)
(declare-fun x378 () x168)
(declare-fun x339 () Bool)
(declare-fun x180 () Int)
(declare-fun x89 () Int)
(declare-fun x91 () Int)
(declare-fun x442 () x168)
(declare-fun x54 () Int)
(declare-fun x131 () Int)
(declare-fun x85 () x168)
(declare-fun x74 () Int)
(declare-fun x143 () x168)
(declare-fun x273 () x168)
(declare-fun x290 () Bool)
(declare-fun x364 () Int)
(declare-fun x372 (Int) Int)
(declare-fun x164 () x168)
(declare-fun x470 () Int)
(declare-fun x222 () Bool)
(declare-fun x237 () Int)
(declare-fun x399 () Int)
(declare-fun x413 () Int)
(declare-fun x382 () Int)
(declare-fun x1 () Bool)
(declare-fun x127 () Int)
(declare-fun x192 () x168)
(declare-fun x244 (Int) Int)
(declare-fun x224 () Int)
(declare-fun x373 () Bool)
(declare-fun x132 () Int)
(declare-fun x239 (Int) x168)
(declare-fun x109 () Bool)
(declare-fun x73 () Int)
(declare-fun x98 () Int)
(declare-fun x223 () Int)
(declare-fun x238 () Int)
(declare-fun x206 () x168)
(declare-fun x418 () Int)
(declare-fun x171 () Bool)
(declare-fun x248 () Int)
(declare-fun x208 (x168) Int)
(declare-fun x13 () x168)
(declare-fun x9 (x168) Int)
(declare-fun x215 () Bool)
(declare-fun x118 () Int)
(declare-fun x227 () Int)
(declare-fun x198 () Int)
(declare-fun x200 () Bool)
(declare-fun x59 () Int)
(declare-fun x6 () Bool)
(declare-fun x268 () Int)
(declare-fun x353 () Bool)
(declare-fun x53 () Bool)
(declare-fun x296 () Int)
(declare-fun x308 () Bool)
(declare-fun x37 () x168)
(declare-fun x4 () Bool)
(declare-fun x144 () Int)
(declare-fun x283 () Int)
(declare-fun x249 () x168)
(declare-fun x406 () x168)
(declare-fun x32 () Int)
(declare-fun x199 () Int)
(declare-fun x441 () Int)
(declare-fun x102 () Bool)
(declare-fun x332 () Int)
(declare-fun x115 () Int)
(declare-fun x317 () Int)
(declare-fun x214 () Bool)
(declare-fun x106 () Int)
(declare-fun x151 () x168)
(declare-fun x359 () Bool)
(declare-fun x324 () Int)
(declare-fun x355 () Bool)
(declare-fun x196 () Bool)
(declare-fun x105 () x168)
(declare-fun x8 () Int)
(declare-fun x133 () Bool)
(declare-fun x111 () x168)
(declare-fun x232 () Int)
(declare-fun x287 () x168)
(declare-fun x44 () x168)
(declare-fun x311 () Int)
(declare-fun x395 () x168)
(declare-fun x374 () Int)
(declare-fun x298 () Int)
(declare-fun x81 () Int)
(declare-fun x41 () x168)
(declare-fun x90 () Int)
(declare-fun x281 (x168) Int)
(declare-fun x165 () Int)
(declare-fun x229 () Int)
(declare-fun x63 () Int)
(declare-fun x158 () Int)
(declare-fun x379 () Int)
(declare-fun x462 () Int)
(declare-fun x376 () Int)
(declare-fun x10 () Int)
(declare-fun x187 () Int)
(declare-fun x460 () Int)
(declare-fun x24 () x168)
(declare-fun x252 () Bool)
(declare-fun x438 () x168)
(declare-fun x291 () Bool)
(declare-fun x416 () Int)
(declare-fun x83 () Int)
(declare-fun x34 () Int)
(declare-fun x242 () Int)
(declare-fun x278 () Int)
(declare-fun x184 (x168) Int)
(declare-fun x321 () x168)
(declare-fun x361 () Bool)
(declare-fun x60 () x168)
(declare-fun x429 () Bool)
(declare-fun x464 () Bool)
(declare-fun x189 () x168)
(declare-fun x7 () Int)
(declare-fun x383 () Int)
(declare-fun x176 () Bool)
(declare-fun x18 () Int)
(declare-fun x289 () Int)
(declare-fun x99 () Int)
(declare-fun x445 () Bool)
(declare-fun x358 () Int)
(declare-fun x427 () Int)
(declare-fun x312 (x168) Int)
(declare-fun x96 () x168)
(declare-fun x233 () Int)
(declare-fun x367 () Bool)
(declare-fun x389 () Int)
(declare-fun x193 () Int)
(declare-fun x14 () Bool)
(declare-fun x188 () Bool)
(declare-fun x345 () Int)
(declare-fun x405 () Bool)
(declare-fun x138 () x168)
(declare-fun x327 () Bool)
(declare-fun x335 () x168)
(declare-fun x82 () Int)
(declare-fun x274 (x168) Int)
(declare-fun x22 () Int)
(declare-fun x21 () x168)
(declare-fun x218 () x168)
(declare-fun x402 () Bool)
(declare-fun x173 () x168)
(declare-fun x49 () Int)
(declare-fun x93 () Int)
(declare-fun x371 () Bool)
(declare-fun x195 (x168) Int)
(declare-fun x414 () Bool)
(declare-fun x39 () Bool)
(declare-fun x235 () Bool)
(declare-fun x113 () x168)
(declare-fun x236 () Int)
(declare-fun x407 () x168)
(declare-fun x347 () Int)
(declare-fun x211 () Bool)
(declare-fun x230 () Bool)
(declare-fun x341 () Int)
(declare-fun x17 () Bool)
(declare-fun x167 () Int)
(declare-fun x253 () Bool)
(declare-fun x130 () x168)
(declare-fun x201 () Int)
(declare-fun x304 (x168) Int)
(declare-fun x48 (Int) Int)
(declare-fun x408 () Int)
(declare-fun x87 () Int)
(declare-fun x179 () Bool)
(declare-fun x204 () Int)
(declare-fun x444 () x168)
(declare-fun x431 () Int)
(declare-fun x420 () Int)
(declare-fun x145 () Int)
(declare-fun x67 () Bool)
(declare-fun x385 () Int)
(declare-fun x216 () x168)
(declare-fun x446 () x168)
(declare-fun x243 () x168)
(declare-fun x157 () Bool)
(declare-fun x26 () Bool)
(declare-fun x357 () Int)
(declare-fun x351 () Int)
(declare-fun x329 () Int)
(declare-fun x449 () x168)
(declare-fun x331 () Bool)
(declare-fun x169 () Int)
(declare-fun x137 () Int)
(declare-fun x400 () Int)
(declare-fun x140 () x168)
(declare-fun x116 () x168)
(declare-fun x310 () Bool)
(declare-fun x178 () Bool)
(declare-fun x293 () x168)
(declare-fun x419 () Int)
(declare-fun x27 () Int)
(declare-fun x120 () Int)
(declare-fun x148 () Int)
(declare-fun x108 () Bool)
(declare-fun x433 () Int)
(declare-fun x19 () Bool)
(declare-fun x43 () Int)
(declare-fun x62 () Int)
(declare-fun x370 () Int)
(declare-fun x125 () Int)
(declare-fun x159 () Bool)
(declare-fun x377 () Bool)
(declare-fun x436 () Int)
(declare-fun x225 () Bool)
(declare-fun x307 () Bool)
(declare-fun x147 () Int)
(declare-fun x404 () Bool)
(declare-fun x328 () Int)
(declare-fun x473 (x168) Int)
(declare-fun x182 () Int)
(declare-fun x381 () Int)
(declare-fun x275 () Int)
(declare-fun x348 () Int)
(declare-fun x375 () Int)
(declare-fun x302 () Int)
(declare-fun x231 () Int)
(declare-fun x142 () Int)
(declare-fun x423 () Bool)
(declare-fun x185 () Int)
(declare-fun x226 () Int)
(declare-fun x453 (x168) Int)
(declare-fun x100 () Int)
(declare-fun x325 () Bool)
(declare-fun x422 () Bool)
(declare-fun x190 () Bool)
(declare-fun x122 () Int)
(declare-fun x410 (Int Int) Int)
(declare-fun x392 () Int)
(declare-fun x228 (x168) Int)
(declare-fun x306 () x168)
(declare-fun x380 (x168) Int)
(declare-fun x448 () Int)
(declare-fun x114 () Int)
(declare-fun x68 () Int)
(declare-fun x277 () Int)
(declare-fun x318 () Bool)
(declare-fun x465 () Bool)
(declare-fun x38 () Int)
(declare-fun x28 () Int)
(declare-fun x394 () Int)
(declare-fun x401 () Int)
(declare-fun x457 () Bool)
(declare-fun x110 () Int)
(declare-fun x234 () Int)
(declare-fun x313 () Int)
(declare-fun x112 () Bool)
(declare-fun x119 () x168)
(declare-fun x15 () Int)
(declare-fun x440 () Bool)
(declare-fun x295 () Bool)
(declare-fun x69 () x168)
(declare-fun x386 () x168)
(declare-fun x384 (x168) Int)
(declare-fun x469 () Bool)
(declare-fun x66 () x168)
(declare-fun x360 () Int)
(declare-fun x428 () x168)
(declare-fun x213 () Int)
(declare-fun x55 () Int)
(declare-fun x338 () Int)
(declare-fun x425 () Int)
(declare-fun x368 () Bool)
(declare-fun x344 () x168)
(declare-fun x336 () x168)
(declare-fun x170 () Bool)
(declare-fun x129 () Int)
(declare-fun x97 () Int)
(declare-fun x322 () x168)
(declare-fun x139 () Bool)
(declare-fun x134 () Bool)
(declare-fun x259 () Int)
(declare-fun x343 () x168)
(declare-fun x181 () Bool)
(declare-fun x124 () Int)
(declare-fun x202 (Int) Int)
(declare-fun x303 () Int)
(declare-fun x288 () Int)
(declare-fun x424 () Bool)
(declare-fun x415 () x168)
(declare-fun x451 () Int)
(declare-fun x435 () Int)
(declare-fun x33 () x168)
(declare-fun x153 () Bool)
(declare-fun x86 () Int)
(declare-fun x203 () Bool)
(declare-fun x35 () x168)
(declare-fun x258 () x168)
(declare-fun x430 () Int)
(declare-fun x76 () Int)
(declare-fun x77 () Bool)
(declare-fun x71 () Int)
(declare-fun x209 () Int)
(declare-fun x80 () Int)
(declare-fun x3 () Bool)
(declare-fun x334 () x168)
(declare-fun x362 () x168)
(declare-fun x240 () Int)
(declare-fun x210 (Int Int) Int)
(declare-fun x285 () Int)
(declare-fun x194 () Int)
(declare-fun x175 () x168)
(declare-fun x316 () x168)
(declare-fun x455 () Int)
(declare-fun x183 () x168)
(declare-fun x421 () Int)
(declare-fun x247 () Int)
(declare-fun x95 () Int)
(declare-fun x126 () Int)
(declare-fun x267 () Bool)
(declare-fun x5 () Bool)
(declare-fun x220 () x168)
(declare-fun x337 () Int)
(declare-fun x390 () Int)
(declare-fun x219 () Int)
(declare-fun x29 () Bool)
(declare-fun x128 () Bool)
(declare-fun x205 () Int)
(declare-fun x47 () Int)
(declare-fun x309 () x168)
(declare-fun x46 () Int)
(declare-fun x434 () Int)
(declare-fun x426 () Bool)
(declare-fun x20 (x168) Int)
(declare-fun x65 () Int)
(declare-fun x388 () Int)
(declare-fun x297 () Int)
(declare-fun x454 () Int)
(declare-fun x31 () Int)
(declare-fun x70 () Int)
(declare-fun x57 () Int)
(declare-fun x40 () Int)
(declare-fun x280 () Bool)
(declare-fun x94 () Int)
(declare-fun x366 () Int)
(declare-fun x121 () Int)
(declare-fun x191 () Int)
(declare-fun x23 () Bool)
(declare-fun x269 () Bool)
(declare-fun x11 () Int)
(declare-fun x396 (x168) Int)
(declare-fun x162 () Int)
(declare-fun x299 () Bool)
(declare-fun x323 () Int)
(declare-fun x409 () x168)
(declare-fun x282 () x168)
(declare-fun x393 () Int)
(declare-fun x257 () Bool)
(declare-fun x432 () Int)
(declare-fun x279 () Int)
(declare-fun x104 () Bool)
(declare-fun x161 () x168)
(declare-fun x369 () Int)
(declare-fun x107 () x168)
(declare-fun x315 () x168)
(declare-fun x471 () Int)
(declare-fun x463 () Int)
(declare-fun x16 () x168)
(declare-fun x350 () Int)
(declare-fun x263 () Int)
(declare-fun x251 () Bool)
(declare-fun x245 () Bool)
(declare-fun x437 () x168)
(declare-fun x197 () Int)
(declare-fun x246 () x168)
(declare-fun x443 () Int)
(declare-fun x72 () Int)
(declare-fun x459 () Int)
(declare-fun x117 () x168)
(declare-fun x163 () Int)
(declare-fun x363 () Int)
(declare-fun x155 (Int) Int)
(declare-fun x92 () x168)
(declare-fun x284 () Bool)
(declare-fun x330 () Int)
(declare-fun x101 () Int)
(declare-fun x135 () Int)
(declare-fun x50 () Int)
(declare-fun x75 () Bool)
(declare-fun x365 () Int)
(declare-fun x458 () Int)
(declare-fun x256 (Int) Int)
(declare-fun x58 () Int)
(define-fun x456 ((x168 x168) (x25 Int)) x168 (ite ((_ is x12) x168) (x12 (x255 x168) (+ (x141 x168) x25)) (ite ((_ is x250) x168) (x250 (x186 x168) (x152 x168) (+ (x411 x168) x25)) (x149 (+ x25 (x260 x168))))))
(define-fun x387 ((x472 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x472) (>= x472 0)) x472 (- x472 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x326 ((x472 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x472) (> 0 x472)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x472) x472))
(define-fun x265 ((x212 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x212) (>= x212 0)))
(define-fun x88 ((x212 Int)) Bool (and (= (x410 115792089237316195423570985008687907853269984665640564039457584007913129639935 x212) x212) (= x212 (x410 x212 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x461 ((x212 Int)) Bool (and (= (x410 0 x212) 0) (= 0 (x410 x212 0))))
(define-fun x300 ((x212 Int)) Bool (= (x410 x212 x212) x212))
(define-fun x403 ((x212 Int)) Bool (and (x300 x212) (x88 x212) (x461 x212)))
(define-fun x352 ((x212 Int) (x79 Int)) Bool (= (x410 x79 x212) (x410 x212 x79)))
(define-fun x42 ((x212 Int) (x79 Int)) Bool (and (>= (x410 x212 x79) 0) (=> (>= x79 0) (>= x79 (x410 x212 x79))) (=> (<= 0 x212) (>= x212 (x410 x212 x79)))))
(define-fun x397 ((x212 Int) (x79 Int)) Bool (and (x352 x212 x79) (x42 x212 x79)))
(define-fun x356 ((x212 Int)) Bool (= (mod x212 1461501637330902918203684832716283019655932542976) (x410 x212 1461501637330902918203684832716283019655932542975)))
(define-fun x45 ((x212 Int)) Bool (and (x397 x212 1461501637330902918203684832716283019655932542975) (x356 x212)))
(define-fun x468 ((x212 Int)) Bool (= (mod x212 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x212 32) (x410 x212 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x84 ((x212 Int)) Bool (and (x397 x212 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x468 x212)))
(define-fun x262 ((x261 Int)) Int (ite (= x261 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x155 x261)))
(define-fun x52 ((x261 Int)) Int (ite (= x261 132) x59 (x262 x261)))
(define-fun x452 ((x261 Int)) Int (ite (= 164 x261) x101 (x52 x261)))
(define-fun x172 ((x261 Int)) Int (ite (= x261 196) x247 (x452 x261)))
(define-fun x177 ((x261 x168)) Int (ite (= x261 x249) x370 (x380 x261)))
(define-fun x61 ((x261 Int)) Int (ite (= x261 0) 1 (x372 x261)))
(define-fun x146 ((x261 x168)) Int (ite (= x261 x138) x121 (x9 x261)))
(define-fun x217 ((x261 Int)) Int (ite (= 0 x261) 1 (x372 x261)))
(define-fun x266 ((x261 Int)) Int (ite (= x261 x451) 1 (x48 x261)))
(define-fun x64 ((x261 Int)) Int (ite (= x261 x73) 0 (x256 x261)))
(define-fun x272 ((x261 Int)) Int (ite (= x261 x303) x73 (x244 x261)))
(define-fun x354 ((x261 Int)) Int (ite (= x261 x231) 0 (x64 x261)))
(define-fun x136 ((x261 Int)) Int (ite (= x122 x261) x231 (x272 x261)))
(define-fun x466 ((x212 Int)) Bool (=> (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x212)) (not (= x212 4294967296)) (not (= 3839634084 x212)) (< 10000 x212) (not (= 157198259 x212)) (not (= 1086394137 x212)) (not (= x212 1000000000000000000)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x212)) (not (= 4133948374 x212)) (not (= x212 3265688288)) (not (= 3384965404 x212)) (not (= 3505202862 x212)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x212)) (not (= 1461501637330902918203684832716283019655932542976 x212)) (not (= x212 3569331386)) (not (= x212 117300739)) (not (= x212 599290589)) (not (= x212 3569979932)) (not (= 4152920812 x212)) (not (= 2172364862 x212)) (not (= x212 4099215060)) (not (= x212 3564505029)) (not (= 1461501637330902918203684832716283019655932542975 x212)) (not (= 404098525 x212))) (not ((_ is x149) (x239 x212)))))
(assert (x265 x98))
(assert (x265 x431))
(assert (x265 x86))
(assert (x466 x70))
(assert (x265 x121))
(assert (x466 x18))
(assert (= x34 (x228 (x239 x34))))
(assert (x265 x101))
(assert (x265 x268))
(assert (x265 x234))
(assert (x466 x381))
(assert (x403 x213))
(assert (= (and (not x17) x371) x373))
(assert (=> (<= x132 10000) (= (x149 x132) (x239 x132))))
(assert (= x6 true))
(assert (= (x239 4099215060) (x149 4099215060)))
(assert (x265 x71))
(assert (x265 x435))
(assert (x265 x433))
(assert (x265 x70))
(assert (=> (>= 10000 x49) (= (x149 x49) (x239 x49))))
(assert (= (and (not x325) x215) x196))
(assert (x265 x323))
(assert (= (x228 (x239 x132)) x132))
(assert (x265 x463))
(assert (x265 x408))
(assert (= x207 (=> (and (and (and (= x242 x393) (= (<= x393 x169) x235)) (and (< 0 x93) (= x273 (x250 (x239 x110) x41 0)) (= x41 (x250 (x239 x400) (x149 9) 0)) (= (x264 (x239 x101)) x93) (not (< x427 2172364862)) (= x400 x394) (<= x38 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x242 x38) (= x83 x110) (= x169 x120) (>= x38 0) (>= 1461501637330902918203684832716283019655932542975 x400) (= (x174 x273) x38) (not (> 3569331386 x427)) (not (> 4099215060 x427)) (<= x110 1461501637330902918203684832716283019655932542975) (not (= x427 4099215060)) (= 4152920812 x427) (not (= x427 4133948374)))) (and (>= x432 0) (<= x125 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x410 1461501637330902918203684832716283019655932542975 x40) x421) (>= x125 0) (= x125 (x281 x336)) (= (x410 1461501637330902918203684832716283019655932542975 x213) x86) (<= x430 1461501637330902918203684832716283019655932542975) (= x125 x120) (= x394 x430) (= (x264 (x239 x101)) x313) (= (x410 1461501637330902918203684832716283019655932542975 x40) x441) (= (x250 (x239 x441) (x149 2) 0) x44) (= x460 3839634084) (not (= x460 3569979932)) (not (= 3569331386 x460)) (<= x432 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x460 4099215060) (= x276 (x410 1461501637330902918203684832716283019655932542975 x213)) (= (x387 (+ x432 x328)) x435) (= x432 (x184 x428)) (= x366 (x410 1461501637330902918203684832716283019655932542975 x213)) (= (x410 1461501637330902918203684832716283019655932542975 x40) x236) (= x409 (x250 (x239 x59) x44 0)) (= (x250 (x239 x430) (x149 8) 0) x336) (= (x250 (x239 x86) x409 0) x428) (not (>= (+ x22 x432) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> 3569331386 x460)) (< 0 x313) (not (< x460 2172364862)))) x235)))
(assert (=> (>= 10000 x40) (= (x239 x40) (x149 x40))))
(assert (x45 x40))
(assert (x265 x83))
(assert (= x404 (=> (and (= x224 x194) (= x51 0)) x134)))
(assert (x265 x455))
(assert (x466 x391))
(assert (= (x239 3265688288) (x149 3265688288)))
(assert (= x238 (x228 (x239 x238))))
(assert (x265 x320))
(assert (= (and x353 x271) x469))
(assert (x466 x148))
(assert (= (x239 404098525) (x149 404098525)))
(assert (x265 x351))
(assert (x265 x148))
(assert (not x104))
(assert (x265 x443))
(assert (= 3839634084 (x228 (x149 3839634084))))
(assert (x265 x458))
(assert (x265 x10))
(assert (x265 x167))
(assert (x265 x427))
(assert (=> (>= 10000 x76) (= (x239 x76) (x149 x76))))
(assert (x265 x123))
(assert (x265 x365))
(assert (= (x228 (x239 x163)) x163))
(assert (= (x228 (x239 x233)) x233))
(assert (= x215 (and x331 x355)))
(assert (x466 x332))
(assert (x265 x270))
(assert (x265 x297))
(assert (x265 x303))
(assert (= x147 (x228 (x239 x147))))
(assert (x403 x8))
(assert (= (and (not x203) x291) x339))
(assert (= (or (and x225 x310) (and x2 (not x179)) (and x371 x17) (and x29 (not x171)) (and x5 x176) (and x373 x417) (and x423 x67)) x424))
(assert (x265 x454))
(assert (x265 x400))
(assert (x265 x388))
(assert (x265 x145))
(assert (= (x149 3839634084) (x239 3839634084)))
(assert (x265 x364))
(assert (=> (<= x165 10000) (= (x149 x165) (x239 x165))))
(assert (x265 x392))
(assert (= (x228 (x239 x59)) x59))
(assert (x466 x351))
(assert (= (and x196 (not x280)) x102))
(assert (x45 x193))
(assert (= (x228 (x239 x400)) x400))
(assert (= (x228 (x239 x145)) x145))
(assert (x265 x209))
(assert (=> (>= 10000 x441) (= (x149 x441) (x239 x441))))
(assert (x265 x32))
(assert (x265 x434))
(assert (=> (>= 10000 x360) (= (x239 x360) (x149 x360))))
(assert (x265 x132))
(assert (x265 x94))
(assert (x265 x204))
(assert (= (=> (and (= x72 x224) (= x51 x82)) x308) x134))
(assert (= (or (and x422 x153) (and x215 x325) (and x267 x19) (and (not x377) x426) (and x359 x102) (and x280 x196) (and (not x331) x355)) x361))
(assert (= (x228 (x149 1086394137)) 1086394137))
(assert (= (x228 (x149 3564505029)) 3564505029))
(assert (=> (<= x434 10000) (= (x149 x434) (x239 x434))))
(assert (x265 x43))
(assert (x265 x450))
(assert (x265 x289))
(assert (x265 x441))
(assert (=> (>= 10000 x142) (= (x239 x142) (x149 x142))))
(assert (x265 x471))
(assert (x466 x237))
(assert (= (x228 (x149 599290589)) 599290589))
(assert (x265 x238))
(assert (x265 x72))
(assert (x466 x40))
(assert (= 3384965404 (x228 (x149 3384965404))))
(assert (=> (<= x145 10000) (= (x149 x145) (x239 x145))))
(assert (x265 x219))
(assert (x265 x115))
(assert (x265 x7))
(assert (= x269 (and x339 x405)))
(assert (x265 x226))
(assert (= (=> (and (= 0 x95) (= x182 x194)) x190) x77))
(assert (x265 x80))
(assert (x265 x8))
(assert (= 4133948374 (x228 (x149 4133948374))))
(assert (= (x228 (x239 x254)) x254))
(assert (x265 x201))
(assert (=> (<= x233 10000) (= (x149 x233) (x239 x233))))
(assert (= (or x284 x424) x333))
(assert (= (or (and x6 (not x402)) x23) x139))
(assert (= (x239 1086394137) (x149 1086394137)))
(assert (= (x149 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x239 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x265 x154))
(assert (x265 x28))
(assert (x265 x122))
(assert (x265 x46))
(assert (x265 x51))
(assert (= 1461501637330902918203684832716283019655932542976 (x228 (x149 1461501637330902918203684832716283019655932542976))))
(assert (x265 x363))
(assert (= (+ 1 (x228 x395)) (x228 (x456 x395 1))))
(assert (x265 x73))
(assert (x265 x129))
(assert (x265 x223))
(assert (x466 x441))
(assert (= (and x14 x53) x291))
(assert (x265 x169))
(assert (x265 x311))
(assert (=> (>= 10000 x391) (= (x149 x391) (x239 x391))))
(assert (x265 x213))
(assert (= (and x267 (not x19)) x26))
(assert (= x355 (and x426 x377)))
(assert (=> (>= 10000 x383) (= (x149 x383) (x239 x383))))
(assert (= (x228 (x239 x101)) x101))
(assert (= x414 (or x361 x26)))
(assert (x265 x163))
(assert (x265 x147))
(assert (=> (<= x101 10000) (= (x239 x101) (x149 x101))))
(assert (x265 x470))
(assert (= x157 (and x327 (not x299))))
(assert (x265 x158))
(assert (= (x149 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x239 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x265 x390))
(assert (x265 x227))
(assert (= (or x269 x367) x252))
(assert (x265 x302))
(assert (x265 x135))
(assert (x466 x165))
(assert (= (x228 (x239 x18)) x18))
(assert (x466 x147))
(assert (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x228 (x149 16156842317565293874272834530371880720966471053262404558597773956279093428224))))
(assert (= (x228 (x149 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x391 (x228 (x239 x391))))
(assert (x265 x383))
(assert (x265 x370))
(assert (x45 x8))
(assert (= (x228 (x239 x106)) x106))
(assert (x265 x467))
(assert (= x245 (and x291 x203)))
(assert (x265 x288))
(assert (x466 x350))
(assert (= (x228 (x239 x278)) x278))
(assert (= x257 (or x157 x440)))
(assert (x466 x76))
(assert (x265 x82))
(assert (= (or (and x14 (not x53)) x368) x23))
(assert (x265 x385))
(assert (x265 x276))
(assert (= (and x299 x327) x440))
(assert (x265 x199))
(assert (= (+ 4 (x228 x335)) (x228 (x456 x335 4))))
(assert (x466 x106))
(assert (= x253 (=> (and (= x349 (x410 1461501637330902918203684832716283019655932542975 x213)) (= x348 (x264 (x239 x349))) (= (= x145 x349) x214) (= 128 x301) (not (= 0 x348))) (and (=> (and x214 (and (= x408 100) (< x329 1086394137) (not (< x408 4)) (= x8 x27) (= (x326 (- x408 4)) x227) (= x254 x101) (not (= x329 117300739)) (= x187 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= 157198259 x329)) (= 599290589 x329) (= (x264 (x239 x145)) x209) (= x176 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x227) true) (> 96 x227)) (> x227 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x43 x167) (not (= 404098525 x329)) (< 0 x209) (= 100 x408))) (and (=> x176 x77) (=> (and (and (= (= x28 x27) x171) (= x28 (x410 1461501637330902918203684832716283019655932542975 x27))) (not x176)) (and (=> (not x171) x77) (=> (and (and (= x254 x57) (= x179 (= x254 x101))) x171) (and (=> (and x179 (and (= (x380 x241) x71) (= x21 (x250 (x239 x254) (x149 1) 0)) (= x17 (< x31 x129)) (= (x380 x21) x123) (<= 0 x31) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x31) (<= x71 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x129 (x387 (+ x123 x71))) (>= x71 0) (= (x250 (x239 x132) (x149 1) 0) x241) (= (x410 1461501637330902918203684832716283019655932542975 x8) x132) (<= x123 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x123) (= x431 x43))) (and (=> (and (not x17) (and (= (< x338 x43) x417) (= (x380 x113) x338) (<= 0 x338) (= (x250 (x239 x49) (x149 1) 0) x113) (<= x338 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x49 (x410 1461501637330902918203684832716283019655932542975 x8)))) (and (=> x417 x77) (=> (and (not x417) (and (= x370 (x326 (- x338 x43))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x286) (= (x387 (+ x43 x286)) x296) (>= x286 0) (= (x177 x33) x286) (= x33 (x250 (x239 x254) (x149 1) 0)) (= x249 (x250 (x239 x278) (x149 1) 0)) (= (x410 1461501637330902918203684832716283019655932542975 x8) x278) (= (> x286 x296) x423))) (and (=> (and (and (= x30 (x195 x13)) (= x225 (< x30 x43)) (<= x30 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x13 (x250 (x239 x101) x130 0)) (<= 0 x30) (= (x410 1461501637330902918203684832716283019655932542975 x8) x106) (= x130 (x250 (x239 x106) (x149 2) 0))) (not x423)) (and (=> x225 x77) (=> (and (and (= 32 x182) (= x97 (x326 (- x30 x43))) (= x311 (x410 1461501637330902918203684832716283019655932542975 x8)) (= x95 1)) (not x225)) x190))) (=> x423 x77))))) (=> x17 x77))) (=> (not x179) x77))))))) (=> (and (not x214) (and (and (and (not (= x63 157198259)) (= x153 (or (> x302 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x302 96) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x302) true)))) (> x375 0) (= x27 x137) (not (= x63 117300739)) (not (= x63 404098525)) (= 100 x337) (not (> 4 x337)) (< x63 1086394137) (= (x326 (- x337 4)) x302) (= x63 599290589) (= x167 x259) (= x55 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x375 (x264 (x239 x448))) (= x101 x76) (= x337 100)) x159) (= (= x349 x448) x159))) (and (=> (and (and (= (= x369 x27) x377) (= x369 (x410 1461501637330902918203684832716283019655932542975 x27))) (not x153)) (and (=> (and x377 (and (= x275 x76) (= x331 (= x101 x76)))) (and (=> (and x331 (and (>= x388 0) (= (< x263 x382) x325) (= x91 (x9 x220)) (<= x263 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x9 x340) x388) (= (x250 (x239 x76) (x149 1) 0) x340) (= x259 x58) (<= x91 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x387 (+ x388 x91)) x382) (<= 0 x91) (<= 0 x263) (= (x250 (x239 x70) (x149 1) 0) x220) (= (x410 1461501637330902918203684832716283019655932542975 x137) x70) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x388))) (and (=> (and (and (= x280 (> x259 x433)) (= (x9 x309) x433) (= (x410 1461501637330902918203684832716283019655932542975 x137) x237) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x433) (>= x433 0) (= x309 (x250 (x239 x237) (x149 1) 0))) (not x325)) (and (=> x280 x404) (=> (and (and (= x359 (> x298 x314)) (= x386 (x250 (x239 x76) (x149 1) 0)) (= x121 (x326 (- x433 x259))) (<= 0 x298) (= x298 (x146 x386)) (= x314 (x387 (+ x298 x259))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x298) (= (x250 (x239 x148) (x149 1) 0) x138) (= (x410 1461501637330902918203684832716283019655932542975 x137) x148)) (not x280)) (and (=> (and (and (= x19 (> x259 x374)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x374) (= (x250 (x239 x391) (x149 2) 0) x117) (<= 0 x374) (= (x250 (x239 x101) x117 0) x378) (= x374 (x396 x378)) (= (x410 1461501637330902918203684832716283019655932542975 x137) x391)) (not x359)) (and (=> x19 x404) (=> (and (not x19) (and (= x54 (x410 1461501637330902918203684832716283019655932542975 x137)) (= (x326 (- x374 x259)) x204) (= 1 x51) (= x224 32))) x134))) (=> x359 x404))))) (=> x325 x404))) (=> (not x331) x404))) (=> (not x377) x404))) (=> x153 x404)))))))
(assert (=> (<= x238 10000) (= (x239 x238) (x149 x238))))
(assert (= (x149 4133948374) (x239 4133948374)))
(assert (= (x149 3505202862) (x239 3505202862)))
(assert (=> (<= x80 10000) (= (x149 x80) (x239 x80))))
(assert (=> (>= 10000 x110) (= (x149 x110) (x239 x110))))
(assert (=> (>= 10000 x185) (= (x239 x185) (x149 x185))))
(assert (= (x228 (x149 3505202862)) 3505202862))
(assert (= (x228 (x239 x350)) x350))
(assert (= (x228 (x149 3265688288)) 3265688288))
(assert (x265 x236))
(assert (= (and (not x214) x139) x108))
(assert (x265 x413))
(assert (x466 x80))
(assert (= (x239 117300739) (x149 117300739)))
(assert (=> (<= x59 10000) (= (x149 x59) (x239 x59))))
(assert (= (x228 (x239 x392)) x392))
(assert (x265 x114))
(assert (= (x228 (x456 x175 2)) (+ (x228 x175) 2)))
(assert (= 4152920812 (x228 (x149 4152920812))))
(assert (= x367 (and (not x405) x339)))
(assert (x265 x338))
(assert (= 4099215060 (x228 (x149 4099215060))))
(assert (x265 x90))
(assert (= (x149 4294967296) (x239 4294967296)))
(assert (x265 x197))
(assert (x265 x247))
(assert (x265 x237))
(assert (x265 x436))
(assert (x265 x34))
(assert (x466 x305))
(assert (x265 x194))
(assert (x265 x451))
(assert (x265 x242))
(assert (x265 x421))
(assert (x265 x89))
(assert (x265 x240))
(assert (x265 x57))
(assert (= (=> (and (or (not x78) x78) (= (= x82 0) x78)) x222) x308))
(assert (= x248 (x228 (x239 x248))))
(assert (x466 x34))
(assert (x84 x458))
(assert (x265 x185))
(assert (= x39 (or (and x251 (not x78)) x109)))
(assert (x265 x341))
(assert (x265 x462))
(assert (x265 x419))
(assert (x265 x65))
(assert (= (x149 599290589) (x239 599290589)))
(assert (x403 x193))
(assert (x265 x18))
(assert (=> (>= 10000 x400) (= (x239 x400) (x149 x400))))
(assert (= (x239 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x149 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (x228 (x239 x110)) x110))
(assert (x265 x120))
(assert (= x1 (and x75 x429)))
(assert (=> (>= 10000 x147) (= (x239 x147) (x149 x147))))
(assert (x265 x182))
(assert (=> (<= x350 10000) (= (x239 x350) (x149 x350))))
(assert (x265 x332))
(assert (= (x149 1000000000000000000) (x239 1000000000000000000)))
(assert (= (=> (and (or (and (and (= (x410 1461501637330902918203684832716283019655932542975 x40) x385) (<= 0 x114) (= (x250 (x239 x467) x107 0) x60) (= x233 (x410 1461501637330902918203684832716283019655932542975 x40)) (= x376 (x410 1461501637330902918203684832716283019655932542975 x213)) (= (x250 (x239 x59) x189 0) x107) (not (= 0 x114)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x114) (= x270 (div x247 x114)) (= (x184 x60) x114) (= x467 (x410 1461501637330902918203684832716283019655932542975 x213)) (= (x250 (x239 x233) (x149 2) 0) x189)) (not x299)) (and (and (<= x199 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x389 x167))) (>= x62 0) (= (x250 (x239 x350) (x149 2) 0) x111) (= x47 (div x323 x135)) (= (x456 x293 2) x218) (= (x326 (- x62 x328)) x364) (= (x250 (x239 x238) x103 0) x344) (= (x250 (x239 x59) x92 0) x116) (ite x133 x133 (= (div x420 x364) x199)) (= (x456 x206 1) x322) (= (x250 (x239 x127) x282 0) x206) (= (x250 (x239 x59) x406 0) x282) (= (x410 1461501637330902918203684832716283019655932542975 x213) x238) (= (x410 1461501637330902918203684832716283019655932542975 x40) x350) (= x142 (x410 1461501637330902918203684832716283019655932542975 x40)) (= (x250 (x239 x59) x111 0) x103) (= (x410 1461501637330902918203684832716283019655932542975 x213) x127) (= (x20 x322) x62) (= (mod (* x364 x199) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x420) (not (< x62 x22)) (= x124 (x410 1461501637330902918203684832716283019655932542975 x213)) (= (x410 1461501637330902918203684832716283019655932542975 x40) x434) (= x443 (x410 1461501637330902918203684832716283019655932542975 x40)) (= (x184 x344) x135) (= (= 0 x364) x133) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x135) (= x147 (x410 1461501637330902918203684832716283019655932542975 x213)) (<= 0 x199) (= x293 (x250 (x239 x147) x116 0)) (= x323 (x387 (+ x247 x389))) (>= x135 0) (not (= 0 x135)) (= x199 (x304 x218)) (= x92 (x250 (x239 x142) (x149 2) 0)) (= x406 (x250 (x239 x434) (x149 2) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (= x389 (div x420 1000000000000000000))) x299)) (and (= (x20 x415) x279) (= (x250 (x239 x34) x56 0) x321) (= (< x328 x279) x299) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x279) (= (x410 1461501637330902918203684832716283019655932542975 x213) x34) (= x415 (x456 x321 1)) (= x68 (x410 1461501637330902918203684832716283019655932542975 x40)) (= x56 (x250 (x239 x59) x151 0)) (= (x250 (x239 x68) (x149 2) 0) x151) (not (= 0 x345)) (>= x279 0))) x207) x346))
(assert (x466 x49))
(assert (x265 x382))
(assert (x265 x59))
(assert (x466 x145))
(assert (= x190 (=> (and (= x182 x72) (= x82 x95)) x308)))
(assert (x265 x328))
(assert (x403 x137))
(assert (x45 x137))
(assert (x466 x99))
(assert (x403 x458))
(assert (x265 x447))
(assert (=> (>= 10000 x248) (= (x149 x248) (x239 x248))))
(assert (x265 x99))
(assert (= x327 (or (and (not x75) x429) x1)))
(assert (= x251 (or x414 x333)))
(assert (x265 x63))
(assert (x265 x286))
(assert (= x351 (x228 (x239 x351))))
(assert (= (x239 2172364862) (x149 2172364862)))
(assert (x265 x15))
(assert (x265 x142))
(assert (= (=> (and (and (= x353 (< 0 x345)) (not (= 0 x223)) (= x223 (x264 (x239 x165)))) (or (not x353) (and (and (= x230 (= x463 (x473 (x239 x165)))) x188 (= x188 (<= x289 (x473 (x239 x101)))) (< x226 4294967296) (= (x439 (x239 x165)) x463) (= x289 (x439 (x239 x101))) x230) x353))) x128) x221))
(assert (x466 x15))
(assert (x265 x459))
(assert (x265 x118))
(assert (= (x228 (x239 x40)) x40))
(assert (= x5 (and x214 x139)))
(assert (=> (>= 10000 x454) (= (x239 x454) (x149 x454))))
(assert (x265 x381))
(assert (x265 x150))
(assert (x265 x305))
(assert (= 3569331386 (x228 (x149 3569331386))))
(assert (x265 x193))
(assert (x265 x350))
(assert (x466 x454))
(assert (= x434 (x228 (x239 x434))))
(assert (= (x228 (x149 404098525)) 404098525))
(assert (= x14 (and x402 x6)))
(assert (=> (<= x347 10000) (= (x239 x347) (x149 x347))))
(assert (= (x228 (x239 x15)) x15))
(assert (x265 x292))
(assert (= (x228 (x149 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x265 x401))
(assert (= (=> (and (= x395 (x250 (x239 x305) x35 0)) (= x183 (x250 (x239 x305) x343 0)) (= (x250 (x239 x324) (x149 4) 0) x343) (= (x410 1461501637330902918203684832716283019655932542975 x40) x324) (= (x410 1461501637330902918203684832716283019655932542975 x40) x100) (= (not (> x234 1)) x290) (= x35 (x250 (x239 x347) x437 0)) (= (x456 x395 1) x119) (= (ite (< x22 x126) x328 x126) x283) (<= x126 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x410 1461501637330902918203684832716283019655932542975 x40) x32) (= (x384 x183) x234) (= (x250 (x239 x163) (x149 2) 0) x437) (= (x20 x119) x126) (= (x410 1461501637330902918203684832716283019655932542975 x40) x163) (>= x126 0)) (and x290 x211)) x465))
(assert (= (x228 (x239 x454)) x454))
(assert (x466 x86))
(assert (x265 x418))
(assert (x466 x163))
(assert (x265 x55))
(assert (x265 x278))
(assert (x466 x59))
(assert (x265 x124))
(assert (= (x228 (x239 x185)) x185))
(assert (= (x228 (x239 x68)) x68))
(assert (x403 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x237 (x228 (x239 x237))))
(assert (= (x239 1461501637330902918203684832716283019655932542975) (x149 1461501637330902918203684832716283019655932542975)))
(assert (= (and x179 x2) x371))
(assert (=> (<= x18 10000) (= (x149 x18) (x239 x18))))
(assert (=> (<= x127 10000) (= (x239 x127) (x149 x127))))
(assert (x265 x277))
(assert (=> (>= 10000 x392) (= (x149 x392) (x239 x392))))
(assert (= (and x422 (not x153)) x426))
(assert (x265 x430))
(assert (x265 x165))
(assert (= (x228 (x239 x332)) x332))
(assert (= (x228 (x239 x76)) x76))
(assert (x265 x360))
(assert (= 2172364862 (x228 (x149 2172364862))))
(assert (=> (>= 10000 x305) (= (x149 x305) (x239 x305))))
(assert (x265 x330))
(assert (x466 x248))
(assert (=> (>= 10000 x254) (= (x239 x254) (x149 x254))))
(assert (= x222 (=> (and (= (x387 (+ 160 x73)) x231) (not (or (and (= (<= x72 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x72)) (> x72 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x303 (x387 (+ x451 32))) (= (x387 (+ 31 x72)) x458) (= (x410 115792089237316195423570985008687907853269984665640564039457584007913129639904 x458) x180) (= x73 (x387 (+ x451 64))) (= (x266 x451) x65) (= x122 (x387 (+ x451 32))) (= x451 (x387 (+ x180 128))) (not (= x82 0)) (= (x410 1461501637330902918203684832716283019655932542975 x193) x165) (= x307 (< 0 x65))) (and (=> x307 x36) (=> (not x307) x221)))))
(assert (x265 x416))
(assert (= (x149 157198259) (x239 157198259)))
(assert (= x80 (x228 (x239 x80))))
(assert (x265 x375))
(assert (x265 x425))
(assert (x466 x383))
(assert (= x99 (x228 (x239 x99))))
(assert (= x211 (=> (= (not (> x197 1)) x464) (and x253 x464))))
(assert (x466 x434))
(assert (x265 x248))
(assert (x466 x110))
(assert (=> (>= 10000 x106) (= (x149 x106) (x239 x106))))
(assert (x466 x278))
(assert (x265 x11))
(assert (= x70 (x228 (x239 x70))))
(assert (x265 x379))
(assert (= (x228 (x456 x66 3)) (+ 3 (x228 x66))))
(assert (x466 x127))
(assert (= x86 (x228 (x239 x86))))
(assert (= x36 (=> (and (= x445 (not (< 1 x65))) (= x154 (x354 x471)) (= (x136 x122) x471) (> 4 x154)) (and x221 x445))))
(assert (= x284 (and x310 (not x225))))
(assert (= x3 (and x271 (not x353))))
(assert (x265 x224))
(assert (x265 x162))
(assert (x265 x231))
(assert (= (x228 (x149 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (=> (>= 10000 x86) (= (x239 x86) (x149 x86))))
(assert (x265 x342))
(assert (= (and x108 (not x159)) x181))
(assert (x265 x263))
(assert (x265 x279))
(assert (x265 x50))
(assert (=> (<= x15 10000) (= (x149 x15) (x239 x15))))
(assert (x265 x301))
(assert (x265 x285))
(assert (x265 x374))
(assert (x466 x101))
(assert (x265 x313))
(assert (= (x228 (x239 x349)) x349))
(assert (x265 x40))
(assert (= (x228 (x239 x381)) x381))
(assert (x265 x198))
(assert (=> (>= 10000 x163) (= (x149 x163) (x239 x163))))
(assert (x265 x131))
(assert (= (x149 3569979932) (x239 3569979932)))
(assert (= 3569979932 (x228 (x149 3569979932))))
(assert (x265 x254))
(assert (= (x228 (x239 x148)) x148))
(assert (x265 x448))
(assert (x466 x392))
(assert (= (x149 4152920812) (x239 4152920812)))
(assert (x265 x93))
(assert (x265 x314))
(assert (x45 x27))
(assert (x403 x27))
(assert (x466 x347))
(assert (x265 x76))
(assert (=> (<= x332 10000) (= (x149 x332) (x239 x332))))
(assert (x265 x275))
(assert (= (x149 3384965404) (x239 3384965404)))
(assert (x265 x180))
(assert (=> (>= 10000 x34) (= (x149 x34) (x239 x34))))
(assert (x466 x400))
(assert (= x347 (x228 (x239 x347))))
(assert (=> (<= x324 10000) (= (x149 x324) (x239 x324))))
(assert (= 4294967296 (x228 (x149 4294967296))))
(assert (x265 x345))
(assert (= (x228 (x239 x441)) x441))
(assert (x265 x31))
(assert (x466 x185))
(assert (x265 x233))
(assert (= (and (not x417) x373) x67))
(assert (=> (>= 10000 x430) (= (x239 x430) (x149 x430))))
(assert (x466 x430))
(assert (x265 x100))
(assert (= x305 (x228 (x239 x305))))
(assert (x403 1461501637330902918203684832716283019655932542975))
(assert (x265 x432))
(assert (x265 x357))
(assert (x265 x144))
(assert (=> (<= x68 10000) (= (x149 x68) (x239 x68))))
(assert (x265 x205))
(assert (= (x228 (x239 x467)) x467))
(assert (x265 x460))
(assert (x265 x62))
(assert (x466 x68))
(assert (x265 x91))
(assert (x265 x95))
(assert (x265 x110))
(assert (= (x149 3564505029) (x239 3564505029)))
(assert (= (x228 (x456 x192 1)) (+ 1 (x228 x192))))
(assert (x403 x40))
(assert (x466 x233))
(assert (=> (<= x148 10000) (= (x149 x148) (x239 x148))))
(assert (= (x239 1461501637330902918203684832716283019655932542976) (x149 1461501637330902918203684832716283019655932542976)))
(assert (= (x228 (x149 1000000000000000000)) 1000000000000000000))
(assert (x466 x324))
(assert (x265 x126))
(assert (x265 x329))
(assert (x265 x68))
(assert (= (+ 1 (x228 x321)) (x228 (x456 x321 1))))
(assert (x265 x22))
(assert (x265 x127))
(assert (= (or x3 x469) x429))
(assert (= (x239 3569331386) (x149 3569331386)))
(assert (= (and x159 x108) x422))
(assert (= (x228 (x456 x442 4)) (+ (x228 x442) 4)))
(assert (x265 x97))
(assert (x466 x448))
(assert (= (and x29 x171) x2))
(assert (x265 x348))
(assert (x466 x238))
(assert (= x127 (x228 (x239 x127))))
(assert (x265 x232))
(assert (= x49 (x228 (x239 x49))))
(assert (= (x228 (x239 x430)) x430))
(assert (x265 x358))
(assert (= x310 (and (not x423) x67)))
(assert (x45 x213))
(assert (x265 x349))
(assert (=> (<= x237 10000) (= (x239 x237) (x149 x237))))
(assert (x265 x399))
(assert (= (x228 (x149 117300739)) 117300739))
(assert (x265 x317))
(assert (x265 x389))
(assert (=> (<= x278 10000) (= (x149 x278) (x239 x278))))
(assert (x265 x229))
(assert (=> (>= 10000 x70) (= (x239 x70) (x149 x70))))
(assert (= (x228 (x456 x206 1)) (+ (x228 x206) 1)))
(assert (x265 x324))
(assert (= x109 (and x251 x78)))
(assert (=> (>= 10000 x99) (= (x239 x99) (x149 x99))))
(assert (x265 x27))
(assert (x466 x467))
(assert (= (x228 (x149 157198259)) 157198259))
(assert (x265 x420))
(assert (x265 x47))
(assert (x265 x106))
(assert (x265 x393))
(assert (= x267 (and x102 (not x359))))
(assert (x265 x347))
(assert (x265 x337))
(assert (= (x228 (x456 x293 2)) (+ (x228 x293) 2)))
(assert (= x271 (or (and x39 (not x307)) x156)))
(assert (x265 x87))
(assert (x466 x254))
(assert (x265 x298))
(assert (= x368 (or x245 x252)))
(assert (x466 x132))
(assert (x265 x49))
(assert (x466 x349))
(assert (x265 x30))
(assert (= x156 (and x39 x307)))
(assert (=> (>= 10000 x381) (= (x149 x381) (x239 x381))))
(assert (x466 x360))
(assert (x265 x54))
(assert (x265 x187))
(assert (=> (>= 10000 x467) (= (x239 x467) (x149 x467))))
(assert (= (x228 (x239 x360)) x360))
(assert (= (=> (and (and (and (= 0 x89) (= x89 x94) x412 (> 3569331386 x144) (= x449 (x250 (x239 x40) (x149 3) 0)) (not (< x425 4)) (and (= (<= x425 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 99 x425)) (>= 1461501637330902918203684832716283019655932542975 x292) (>= x98 0) (>= 1461501637330902918203684832716283019655932542975 x40) (not (= 3505202862 x144)) (= x198 0) (= x247 x399) (>= x27 0) (= (<= x277 x191) x412) (= (> x197 0) x402) (= x317 x50) (not (< x144 3265688288)) (not (= 3384965404 x144)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x150) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x150) true) (> 96 x150)))) (= x365 x277) (not (= 3265688288 x144)) (>= 1461501637330902918203684832716283019655932542975 x213) (>= 1461501637330902918203684832716283019655932542975 x98) (= (x264 (x239 x101)) x87) (= x320 x40) (= x144 3564505029) (>= 1461501637330902918203684832716283019655932542975 x27) (>= x292 0) (= x59 x27) (= x205 x40) (= x292 x317) (= (x326 (- x425 4)) x150) (< 0 x87) (= x219 x213) (= x247 x167) (not (> 2172364862 x144)) (= (x294 x449) x197) (= x328 x22)) (and (<= x15 1461501637330902918203684832716283019655932542975) (= (x264 (x239 x101)) x470) (= x90 x365) (= (x250 (x239 x15) x315 0) x258) (< 0 x470) (not (= x7 4133948374)) (= 4152920812 x7) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x90) (<= 0 x90) (not (> 2172364862 x7)) (not (< x7 3569331386)) (= x115 x191) (= (x250 (x239 x80) (x149 9) 0) x315) (not (< x7 4099215060)) (>= 1461501637330902918203684832716283019655932542975 x80) (= x394 x80) (not (= 4099215060 x7)) (= x15 x83) (= x90 (x174 x258)))) (and (= (x439 (x239 x145)) x46) x200 (<= x240 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 3569331386 x229)) (<= 0 x240) (<= x81 1461501637330902918203684832716283019655932542975) (<= x99 1461501637330902918203684832716283019655932542975) (= x240 (x281 x105)) (= false x112) (= (> (x264 (x239 x101)) 0) x4) (not (= x229 3569979932)) (< 0 x101) (>= x413 0) (= x240 x115) (>= 1461501637330902918203684832716283019655932542975 x101) (not (= x448 x101)) (> x448 0) (<= x436 1461501637330902918203684832716283019655932542975) (= x81 x379) (= (x250 (x239 x99) (x149 8) 0) x105) (<= 0 x436) (>= x394 0) (>= 255 x459) (not (= x448 x145)) (not (< x229 3569331386)) x4 (= (x439 (x239 x448)) x413) (not (= x101 x145)) (= x170 false) (>= x341 0) (= x297 3) (>= 1461501637330902918203684832716283019655932542975 x83) (<= x341 1461501637330902918203684832716283019655932542975) (= x166 (< 0 (x264 (x239 x448)))) (< x229 4099215060) (= x201 3564505029) (<= x394 1461501637330902918203684832716283019655932542975) (> x363 0) (= x318 false) (<= 0 x455) (not (> 2172364862 x229)) (= x394 x99) (<= 0 x81) (= x455 (x439 (x239 x101))) (= (< 0 (x264 (x239 x145))) x200) (= x229 3839634084) (>= x46 0) (= x295 false) (= x436 x59) (<= x448 1461501637330902918203684832716283019655932542975) x166 (>= 1461501637330902918203684832716283019655932542975 x145) (>= x459 0) (= (x264 (x239 x101)) x363) (> x145 0) (>= x83 0))) (and (=> (not x402) x253) (=> (and (and (> 1461501637330902918203684832716283019655932542976 x305) (>= 1461501637330902918203684832716283019655932542975 x305) (= 0 x358) (= x407 (x250 (x239 x305) x398 0)) (> x418 0) (= (x294 x362) x418) (= x351 (x410 1461501637330902918203684832716283019655932542975 x40)) (= x446 (x12 x362 0)) (= (x312 x319) x305) (= (x250 (x239 x360) (x149 4) 0) x398) (>= x305 0) (= x319 x446) (= (> x232 0) x53) (= x360 (x410 1461501637330902918203684832716283019655932542975 x40)) (= (x250 (x239 x351) (x149 3) 0) x362) (= x232 (x384 x407))) x402) (and (=> (and (and (<= x347 1461501637330902918203684832716283019655932542975) (= (x384 x216) x447) (= (x250 (x239 x185) (x149 8) 0) x16) (= x216 (x250 (x239 x305) x243 0)) (<= 0 x357) (= (x410 1461501637330902918203684832716283019655932542975 x40) x454) (= (x12 x216 0) x246) (>= x347 0) (> x447 0) (= (x274 x316) x347) (= x246 x316) (= (= 0 x357) x203) (= x243 (x250 (x239 x454) (x149 4) 0)) (= (x281 x16) x357) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x357) (< x347 1461501637330902918203684832716283019655932542976) (= (x410 1461501637330902918203684832716283019655932542975 x40) x185)) x53) (and (=> (and (and (or (and (not x405) (and (< (* x118 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x401 x462) (= (div x74 x342) x401) (= (mod (* 1000000000000000000 x118) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x74))) (and x405 (= 0 x462))) (and (= (= x118 0) x405) (= x118 (mod (* x268 x131) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (ite (> x390 x22) x328 x390) x330) (= x160 (x456 x192 1)) (= (x250 (x239 x347) x161 0) x143) (= x192 (x250 (x239 x305) x143 0)) (<= 0 x390) (= x390 (x20 x160)) (= x175 (x250 (x239 x305) x287 0)) (<= 0 x10) (not (> x10 x330)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x268) (= x10 (x208 x85)) (= (x456 x175 2) x164) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x390) (= (x410 1461501637330902918203684832716283019655932542975 x40) x381) (= x392 (x410 1461501637330902918203684832716283019655932542975 x40)) (= (x250 (x239 x305) x37 0) x66) (<= x10 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x457 (= 0 x131)) (= x69 (x250 (x239 x392) (x149 2) 0)) (ite x457 x457 (= x268 (div x118 x131))) (= x37 (x250 (x239 x347) x444 0)) (= x287 (x250 (x239 x347) x69 0)) (= (x250 (x239 x332) (x149 2) 0) x161) (= (x304 x164) x268) (not (= x342 0)) (<= 0 x268) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x342) (= (x456 x66 3) x85) (= (x410 1461501637330902918203684832716283019655932542975 x40) x332) (= (x250 (x239 x248) (x149 8) 0) x306) (= (x410 1461501637330902918203684832716283019655932542975 x40) x248) (= x444 (x250 (x239 x381) (x149 2) 0)) (= (x326 (- x330 x10)) x131) (= x342 (x281 x306)) (>= x342 0))) (not x203)) x178) (=> (and x203 (and (>= x288 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x288) (= x288 (x453 x438)) (= (x250 (x239 x305) x96 0) x335) (= (x250 (x239 x347) x24 0) x96) (= (x456 x335 4) x438) (= x24 (x250 (x239 x18) (x149 2) 0)) (= x419 x288) (= x18 (x410 1461501637330902918203684832716283019655932542975 x40)))) x465))) (=> (not x53) x211))))) x104))
(assert (x265 x369))
(assert (x265 x376))
(assert (= (=> (and (= x75 (= x345 0)) (or (not x75) x75)) x346) x128))
(assert (x265 x58))
(assert (x265 x38))
(assert (x265 x137))
(assert (= 0 (x256 x471)))
(assert (x265 x81))
(assert (x265 x259))
(assert (x265 x394))
(assert (= (and (not x176) x5) x29))
(assert (=> (<= x351 10000) (= (x239 x351) (x149 x351))))
(assert (x265 x191))
(assert (=> (<= x448 10000) (= (x149 x448) (x239 x448))))
(assert (= (x228 (x239 x165)) x165))
(assert (x466 x142))
(assert (=> (>= 10000 x349) (= (x239 x349) (x149 x349))))
(assert (= x448 (x228 (x239 x448))))
(assert (x265 x283))
(assert (x265 x125))
(assert (x265 x391))
(assert (x265 x74))
(assert (= x142 (x228 (x239 x142))))
(assert (x265 x296))
(assert (x265 x366))
(assert (= x324 (x228 (x239 x324))))
(assert (= (x228 (x239 x383)) x383))
(assert (= x178 (=> (and (= x383 (x410 1461501637330902918203684832716283019655932542975 x40)) (= x140 (x250 (x239 x383) (x149 2) 0)) (= (x250 (x239 x305) x334 0) x442) (<= 0 x285) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x285 x462))) (<= x285 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x285 (x453 x173)) (= (x387 (+ x462 x285)) x158) (= x173 (x456 x442 4)) (= x158 x419) (= x334 (x250 (x239 x347) x140 0))) x465)))
(check-sat)
(exit)