(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x219 0)) (((x58 (x250 x219) (x302 Int)) (x368 (x376 Int)) (x210 (x205 x219) (x110 x219) (x365 Int)))))
(declare-fun x15 () Bool)
(declare-fun x11 () Bool)
(declare-fun x171 () Int)
(declare-fun x202 () Bool)
(declare-fun x191 () Bool)
(declare-fun x177 (Int) x219)
(declare-fun x301 () Int)
(declare-fun x345 () Int)
(declare-fun x127 () Bool)
(declare-fun x349 () Bool)
(declare-fun x266 () Bool)
(declare-fun x190 () Bool)
(declare-fun x242 () Bool)
(declare-fun x59 () Bool)
(declare-fun x347 () Bool)
(declare-fun x329 () Int)
(declare-fun x160 () Int)
(declare-fun x96 () Bool)
(declare-fun x120 () Int)
(declare-fun x20 () Int)
(declare-fun x268 () Int)
(declare-fun x159 () Bool)
(declare-fun x337 () Bool)
(declare-fun x283 () Int)
(declare-fun x389 () Int)
(declare-fun x174 () Int)
(declare-fun x285 () Bool)
(declare-fun x252 () Int)
(declare-fun x106 () Int)
(declare-fun x108 () Bool)
(declare-fun x173 () Bool)
(declare-fun x360 () Bool)
(declare-fun x235 () Bool)
(declare-fun x222 () Int)
(declare-fun x316 (x219) Int)
(declare-fun x42 () Bool)
(declare-fun x215 () Int)
(declare-fun x395 () Bool)
(declare-fun x24 () Int)
(declare-fun x139 () Int)
(declare-fun x161 () Bool)
(declare-fun x107 () Bool)
(declare-fun x280 () Bool)
(declare-fun x178 () Int)
(declare-fun x124 () Int)
(declare-fun x77 () Int)
(declare-fun x87 () Int)
(declare-fun x359 () Bool)
(declare-fun x118 () Bool)
(declare-fun x141 () Int)
(declare-fun x267 () Int)
(declare-fun x180 () Int)
(declare-fun x339 () Bool)
(declare-fun x352 () Int)
(declare-fun x387 () Bool)
(declare-fun x46 () Bool)
(declare-fun x9 () Bool)
(declare-fun x74 () Int)
(declare-fun x381 () Int)
(declare-fun x76 () Bool)
(declare-fun x162 () Bool)
(declare-fun x19 () Int)
(declare-fun x13 () Int)
(declare-fun x354 () Bool)
(declare-fun x53 () Bool)
(declare-fun x91 () Int)
(declare-fun x186 () Bool)
(declare-fun x125 () Int)
(declare-fun x126 () Bool)
(declare-fun x151 () Int)
(declare-fun x41 () Int)
(declare-fun x231 () Int)
(declare-fun x353 () Bool)
(declare-fun x189 () Bool)
(declare-fun x293 () Bool)
(declare-fun x214 () Int)
(declare-fun x112 () Int)
(declare-fun x135 () Bool)
(declare-fun x384 () Bool)
(declare-fun x203 () Int)
(declare-fun x93 () Int)
(declare-fun x392 () Int)
(declare-fun x181 () Int)
(declare-fun x232 () Int)
(declare-fun x346 () Int)
(declare-fun x54 () Bool)
(declare-fun x17 () Int)
(declare-fun x264 () Int)
(declare-fun x328 () Int)
(declare-fun x254 () Int)
(declare-fun x136 () Int)
(declare-fun x164 () Int)
(declare-fun x148 () Int)
(declare-fun x32 () Bool)
(declare-fun x303 () Bool)
(declare-fun x331 () Int)
(declare-fun x167 () Bool)
(declare-fun x340 () Bool)
(declare-fun x196 () Int)
(declare-fun x36 () Bool)
(declare-fun x243 () Bool)
(declare-fun x343 () Int)
(declare-fun x6 () Bool)
(declare-fun x121 () Int)
(declare-fun x394 () Int)
(declare-fun x362 () Int)
(declare-fun x386 () Int)
(declare-fun x138 () Int)
(declare-fun x310 () Bool)
(declare-fun x2 () Bool)
(declare-fun x311 () Bool)
(declare-fun x67 () Int)
(declare-fun x385 () Int)
(declare-fun x193 () Int)
(declare-fun x313 () Int)
(declare-fun x105 () Bool)
(declare-fun x165 () Int)
(declare-fun x218 () Bool)
(declare-fun x143 () Int)
(declare-fun x335 () Int)
(declare-fun x34 () Bool)
(declare-fun x336 () Bool)
(declare-fun x169 (x219) Int)
(declare-fun x363 () Int)
(declare-fun x309 () Bool)
(declare-fun x396 () Bool)
(declare-fun x294 () Int)
(declare-fun x137 () Bool)
(declare-fun x348 () Bool)
(declare-fun x184 () Int)
(declare-fun x80 () Int)
(declare-fun x7 () Int)
(declare-fun x333 () Int)
(declare-fun x245 () Bool)
(declare-fun x66 () Bool)
(declare-fun x321 () Bool)
(declare-fun x128 () Int)
(declare-fun x374 () Int)
(declare-fun x119 () Bool)
(declare-fun x262 () Bool)
(declare-fun x247 () Bool)
(declare-fun x237 () Bool)
(declare-fun x221 () Int)
(declare-fun x4 () Int)
(declare-fun x382 () Bool)
(declare-fun x338 () Bool)
(declare-fun x296 () Bool)
(declare-fun x370 () Int)
(declare-fun x147 () Int)
(declare-fun x208 () Bool)
(declare-fun x176 () Int)
(declare-fun x142 () Int)
(declare-fun x272 () Bool)
(declare-fun x122 () Bool)
(declare-fun x224 () Int)
(declare-fun x227 () Bool)
(declare-fun x14 () Bool)
(declare-fun x251 () Int)
(declare-fun x195 () Bool)
(declare-fun x149 () Int)
(declare-fun x144 () Bool)
(declare-fun x239 () Int)
(declare-fun x306 () Bool)
(declare-fun x88 () Bool)
(declare-fun x204 () Int)
(declare-fun x330 () Bool)
(declare-fun x269 () Bool)
(declare-fun x39 () Int)
(declare-fun x281 () Int)
(declare-fun x111 () Bool)
(declare-fun x332 () Bool)
(declare-fun x258 () Bool)
(declare-fun x256 () Bool)
(declare-fun x307 () Int)
(declare-fun x146 () Int)
(declare-fun x60 () Bool)
(declare-fun x50 () Bool)
(declare-fun x279 () Bool)
(declare-fun x116 (Int) Int)
(declare-fun x375 () Bool)
(declare-fun x78 () Int)
(declare-fun x308 () Bool)
(declare-fun x209 () Bool)
(declare-fun x201 () Int)
(declare-fun x207 () Int)
(declare-fun x319 () Int)
(declare-fun x290 () Bool)
(declare-fun x47 () Int)
(declare-fun x367 () Bool)
(declare-fun x168 () Int)
(declare-fun x37 () Bool)
(declare-fun x68 () Int)
(declare-fun x246 () Bool)
(declare-fun x383 () Int)
(declare-fun x249 () Bool)
(declare-fun x29 () Bool)
(declare-fun x265 () Int)
(declare-fun x371 () Int)
(declare-fun x379 () Bool)
(declare-fun x312 () Int)
(declare-fun x244 () Bool)
(declare-fun x274 () Int)
(declare-fun x364 () Int)
(declare-fun x62 () Bool)
(declare-fun x89 () Int)
(declare-fun x103 () Int)
(declare-fun x230 () Bool)
(declare-fun x84 () Int)
(declare-fun x81 () Bool)
(declare-fun x85 () Int)
(declare-fun x51 () Int)
(declare-fun x79 () Bool)
(declare-fun x130 () Bool)
(declare-fun x48 () Bool)
(declare-fun x297 () Bool)
(declare-fun x282 () Bool)
(declare-fun x317 () Bool)
(declare-fun x200 () Int)
(declare-fun x166 () Int)
(declare-fun x179 () Int)
(declare-fun x43 () Int)
(declare-fun x253 () Int)
(declare-fun x277 () Int)
(declare-fun x5 () Int)
(declare-fun x263 () Bool)
(declare-fun x315 () Int)
(declare-fun x322 () Bool)
(declare-fun x216 () Int)
(declare-fun x344 () Int)
(declare-fun x45 () Int)
(declare-fun x289 () Int)
(declare-fun x326 () Bool)
(declare-fun x356 () Int)
(declare-fun x23 () Int)
(declare-fun x27 () Int)
(declare-fun x12 () Int)
(declare-fun x131 () Bool)
(declare-fun x8 () Int)
(declare-fun x182 () Int)
(declare-fun x69 () Bool)
(declare-fun x255 () Bool)
(declare-fun x61 () Int)
(declare-fun x152 () Int)
(declare-fun x101 () Int)
(declare-fun x52 () Int)
(declare-fun x113 () Int)
(declare-fun x18 () Bool)
(declare-fun x240 () Int)
(declare-fun x292 () Int)
(declare-fun x197 () Int)
(declare-fun x133 () Int)
(declare-fun x393 () Int)
(declare-fun x104 () Bool)
(declare-fun x3 () Int)
(declare-fun x40 () Bool)
(declare-fun x236 () Int)
(declare-fun x185 () Int)
(declare-fun x150 () Int)
(declare-fun x341 () Bool)
(declare-fun x391 () Bool)
(declare-fun x134 () Bool)
(declare-fun x63 () Bool)
(declare-fun x98 () Int)
(declare-fun x380 () Int)
(declare-fun x238 () Bool)
(declare-fun x175 () Int)
(declare-fun x72 () Int)
(declare-fun x129 () Int)
(declare-fun x57 () Int)
(declare-fun x99 () Int)
(declare-fun x298 () Int)
(declare-fun x49 () Int)
(declare-fun x226 () Bool)
(declare-fun x299 () Int)
(declare-fun x357 () Int)
(declare-fun x288 () Bool)
(declare-fun x286 () Bool)
(declare-fun x100 () Bool)
(declare-fun x334 () Bool)
(declare-fun x229 () Int)
(declare-fun x16 () Bool)
(declare-fun x270 () Int)
(declare-fun x217 () Int)
(declare-fun x163 () Int)
(declare-fun x248 () Bool)
(declare-fun x275 (x219) Int)
(declare-fun x223 () Int)
(declare-fun x323 () Bool)
(declare-fun x55 () Int)
(declare-fun x225 () Bool)
(declare-fun x1 () Bool)
(declare-fun x259 () Bool)
(declare-fun x327 () Bool)
(declare-fun x361 () Int)
(declare-fun x372 () Bool)
(declare-fun x373 () Bool)
(declare-fun x257 () Bool)
(declare-fun x172 () Bool)
(declare-fun x92 () Bool)
(declare-fun x260 () Bool)
(declare-fun x366 () Int)
(declare-fun x358 () Bool)
(declare-fun x82 () Int)
(declare-fun x390 () Bool)
(declare-fun x56 () Bool)
(declare-fun x304 () Int)
(declare-fun x170 () Int)
(declare-fun x212 () Bool)
(declare-fun x75 () Bool)
(declare-fun x44 () Bool)
(declare-fun x278 () Bool)
(declare-fun x378 () Bool)
(declare-fun x188 () Int)
(declare-fun x194 () Int)
(declare-fun x117 () Int)
(declare-fun x21 () Bool)
(declare-fun x199 () Int)
(declare-fun x83 () Bool)
(declare-fun x95 () Bool)
(declare-fun x115 () Int)
(declare-fun x145 () Bool)
(declare-fun x369 () Bool)
(declare-fun x31 () Int)
(declare-fun x234 () Bool)
(declare-fun x320 () Int)
(declare-fun x206 () Bool)
(declare-fun x86 () Int)
(declare-fun x28 () Int)
(declare-fun x156 () Int)
(declare-fun x377 () Int)
(declare-fun x183 () Int)
(declare-fun x73 () Bool)
(declare-fun x273 () Int)
(declare-fun x123 () Bool)
(declare-fun x109 () Int)
(declare-fun x38 () Int)
(declare-fun x314 () Int)
(declare-fun x114 () Bool)
(declare-fun x388 () Bool)
(declare-fun x211 () Int)
(declare-fun x65 () Bool)
(declare-fun x350 () Bool)
(declare-fun x351 () Int)
(declare-fun x192 (Int Int) Int)
(declare-fun x94 () Int)
(declare-fun x220 () Bool)
(declare-fun x140 () Bool)
(declare-fun x241 () Int)
(declare-fun x261 () Bool)
(declare-fun x155 () Int)
(declare-fun x305 () Int)
(declare-fun x276 () Bool)
(declare-fun x157 () Int)
(declare-fun x132 () Int)
(declare-fun x64 () Int)
(declare-fun x154 () Int)
(declare-fun x22 () Int)
(declare-fun x342 () Int)
(declare-fun x70 () Bool)
(declare-fun x325 () Int)
(declare-fun x97 () Bool)
(declare-fun x284 () Int)
(declare-fun x295 () Bool)
(declare-fun x33 () Int)
(declare-fun x26 () Int)
(declare-fun x271 () Int)
(declare-fun x287 () Int)
(declare-fun x71 () Int)
(declare-fun x324 () Bool)
(declare-fun x35 () Int)
(declare-fun x198 () Bool)
(declare-fun x300 () Int)
(declare-fun x10 () Int)
(declare-fun x318 () Bool)
(declare-fun x90 () Bool)
(declare-fun x25 () Int)
(declare-fun x291 () Bool)
(declare-fun x355 () Bool)
(define-fun x187 ((x219 x219) (x233 Int)) x219 (ite ((_ is x210) x219) (x210 (x205 x219) (x110 x219) (+ (x365 x219) x233)) (ite ((_ is x58) x219) (x58 (x250 x219) (+ (x302 x219) x233)) (x368 (+ x233 (x376 x219))))))
(define-fun x228 ((x153 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x153) (>= x153 0)) x153 (- x153 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x158 ((x153 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x153) (> 0 x153)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x153) x153))
(define-fun x30 ((x213 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x213) (>= x213 0)))
(define-fun x102 ((x213 Int)) Bool (=> (and (not (= x213 2685885107)) (not (= 1245370514 x213)) (not (= x213 149895259)) (not (= 1461501637330902918203684832716283019655932542975 x213)) (> x213 10000) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x213))) (not ((_ is x368) (x177 x213)))))
(assert (= (x368 1461501637330902918203684832716283019655932542975) (x177 1461501637330902918203684832716283019655932542975)))
(assert (x30 x315))
(assert (x30 x240))
(assert (x30 x146))
(assert (x30 x109))
(assert (= (=> (and (and (= x65 x373) (= x39 x314) (= x314 (div x236 10))) (and (= false x66) (= 10 x155) x318 (= x93 x236) (= x14 x318))) x390) x107))
(assert (= x127 (and (not x126) x295)))
(assert (x30 x319))
(assert (x30 x200))
(assert (= (and x34 x111) x40))
(assert (x30 x143))
(assert (=> (>= 10000 x377) (= (x368 x377) (x177 x377))))
(assert (x30 x370))
(assert (x30 x222))
(assert (x30 x19))
(assert (x30 x165))
(assert (x30 x8))
(assert (x30 x20))
(assert (= (and (not x212) x326) x59))
(assert (x30 x133))
(assert (x30 x182))
(assert (= x256 (=> (and (= x324 (< 0 (x169 (x177 x377)))) (= (x169 (x177 x377)) x394) (= (= x94 0) x248) (= (not (= x91 0)) x266) (= (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x305) x79) (= x271 x89) (>= 1461501637330902918203684832716283019655932542975 x377) (= (or x248 x261) x347) (= x171 x381) (= x207 0) (= x124 x270) (= x166 x171) (= x185 x146) (= x381 x20) (not (= 149895259 x345)) (= x211 400) (= x10 x93) x324 (= x178 0) (= x342 x179) (>= x115 0) (= x10 x374) (= (and x105 x360) x373) (= x79 x105) (= x319 x329) (= x154 x381) (= x185 x89) (= x333 0) (= x251 x91) (> x394 0) (= (* x87 x374) x305) (= x28 x251) (= x360 x266) (= x93 x185) (= (>= x270 1) x195) (= x345 2685885107) (= x115 (x316 (x177 x377))) (not (= x345 1245370514)) (= x87 x20) (= x124 x28) (= x319 x171) x195 (= x261 (= 0 x154)) (= x28 x342) (= x231 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x377 0) (= x331 1) (= x94 x93)) (and (=> (and (not x347) (and (= x381 x200) x242 (= x230 x347) (= x242 (not x230)) (= x220 (= x216 x200)) (= x251 x216))) (and (=> (and (not x220) (and x60 (= x34 (= x163 x147)) (= x60 (not x330)) (= x93 x163) (= x330 x220) (= x147 x251))) (and (=> (and x34 (and (= x37 x34) x37 (= x204 x381) (= x373 x65) (= x204 x39))) x390) (=> (and (and (= x251 x128) (= x381 x268) (= (not x272) x375) (= x361 (* x128 2)) (= x272 x34) x375 (= x76 (= x268 x361)) (= 2 x274)) (not x34)) (and (=> (and (and (= 2 x164) (= x251 x312) (= (* x312 2) x325) (= x396 (not x306)) (= x197 x93) x396 (= x90 (= x325 x197)) (= x306 x76)) (not x76)) (and (=> (and x90 (and (= x381 x300) (= (mod (* x300 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x328) (= x90 x114) (= x39 x328) (= 2 x52) (= x373 x65) x114)) x390) (=> (and (and x348 (= (= x55 x267) x341) (= x267 x251) (= x55 (* x47 2)) (= x90 x278) (= x381 x47) (= (not x278) x348) (= x241 2)) (not x90)) (and (=> x341 x379) (=> (and (not x341) (and (= (= x13 x239) x135) x81 (= x198 x341) (= x125 x93) (= (* x125 2) x239) (= x251 x13) (= x313 2) (= (not x198) x81))) (and (=> (and (and (= x50 (= x214 x168)) (= (not x309) x355) (= x309 x135) (= x381 x168) (= x251 x362) x355 (= x386 3) (= x214 (* x362 3))) (not x135)) (and (=> (and (and (= x251 x215) (= x202 (= x343 x356)) (= (not x95) x293) (= x343 x93) (= (* x215 3) x356) x293 (= x117 3) (= x95 x50)) (not x50)) (and (=> (and (and (= 3 x351) (= x203 x251) (= x246 x202) (= (* x193 3) x41) (= x54 (= x203 x41)) (= x104 (not x246)) x104 (= x381 x193)) (not x202)) (and (=> x54 x70) (=> (and (and x144 (= x48 (= x352 x357)) (= x54 x226) (= x144 (not x226)) (= x352 (* 3 x183)) (= x364 3) (= x183 x93) (= x251 x357)) (not x54)) (and (=> (and (and (= x251 x287) x340 (= (* 10 x287) x383) (= (not x257) x340) (= x156 10) (= x35 x381) (= x48 x257) (= (= x383 x35) x191)) (not x48)) (and (=> (and (not x191) (and (= x191 x282) x69 (= 10 x141) (= x64 x93) (= (= x113 x64) x382) (= x113 (* 10 x74)) (= x251 x74) (= x69 (not x282)))) (and (=> (and x382 (and (= x31 x381) (= x382 x145) x145 (= x26 x39) (= 10 x152) (= x65 x373) (= (mod (* 10 x31) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x26))) x390) (=> (and (and (= (not x92) x244) (= x366 x251) (= x14 (= x148 x366)) (= x148 (* x150 10)) (= x149 10) x244 (= x92 x382) (= x150 x381)) (not x382)) (and (=> x14 x107) (=> (and (and (= x224 x93) (= x298 x251) (= x14 x44) (= x289 (* x224 10)) (= x190 (not x44)) (= x212 (= x298 x289)) (= x151 10) x190) (not x14)) (and (=> x212 x63) (=> (and (not x212) (and (= x255 x212) (= (not x255) x209) (= x251 x284) x209 (= x381 x281) (= x253 (* x284 500)) (= 500 x320) (= (= x253 x281) x189))) (and (=> (and (not x189) (and (= x339 (= x17 x103)) (= (not x235) x161) (= x93 x17) (= 500 x222) x161 (= x189 x235) (= x103 (* 500 x132)) (= x251 x132))) (and (=> (and x339 (and (= (mod (* 500 x129) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x194) (= x339 x96) (= x65 x373) (= x39 x194) x96 (= x381 x129) (= x61 500))) x390) (=> (and (and (= x251 x5) (= (* 500 x201) x67) (= 500 x370) (= x262 (not x173)) (= x32 (= x67 x5)) x262 (= x381 x201) (= x339 x173)) (not x339)) (and (=> (and (not x32) (and (= x251 x72) (= x252 500) (= x315 x93) (= (* x315 500) x82) (= x247 (not x378)) (= x378 x32) (= (= x72 x82) x369) x247)) (and (=> x369 x384) (=> (and (and (= x175 400) x291 (= x381 x223) (= x311 x369) (= x251 x101) (= x130 (= x80 x223)) (= x80 (* 400 x101)) (= x291 (not x311))) (not x369)) (and (=> (and (and (= x288 (= x22 x99)) (= (* x98 400) x22) (= x130 x395) (= x251 x98) (= (not x395) x258) (= x43 400) (= x93 x99) x258) (not x130)) (and (=> (and (and (= x265 400) x53 (= x65 x373) (= x142 x39) (= x381 x106) (= (mod (* x106 400) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x142) (= x288 x53)) x288) x390) (=> (and (and (= (not x391) x388) (= x234 (= x12 x170)) (= x381 x38) (= x251 x12) (= 400 x221) (= x391 x288) (= (* x38 400) x170) x388) (not x288)) (and (=> (and (not x234) (and (= (* x85 400) x385) (= x308 (not x134)) (= x93 x85) (= x134 x234) x308 (= x126 (= x174 x385)) (= x240 400) (= x174 x251))) (and (=> x126 x336) (=> (and (and (= (not x119) x21) (= x159 x65) x21 (= x27 0) (= x39 x27) (= x119 x126) (= false x159)) (not x126)) x390))) (=> x234 x286))))) (=> (and x130 (and (= x373 x65) (= 400 x68) (= x39 x33) (= x33 (mod (* 400 x346) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x93 x346) x310 (= x310 x130))) x390))))) (=> x32 x15))))) (=> (and x189 (and (= x189 x206) (= (mod (* x393 500) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x24) (= x65 x373) (= x93 x393) (= 500 x181) (= x39 x24) x206)) x390))))))))) (=> (and x191 (and (= x39 x160) (= x65 x373) (= x93 x254) (= x157 10) (= x160 (mod (* 10 x254) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x62 x191) x62)) x390))) (=> x48 x131))))) (=> (and x202 (and (= (mod (* x299 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x25) x16 (= x65 x373) (= x39 x25) (= x16 x202) (= x381 x299) (= 3 x294))) x390))) (=> (and (and x350 (= x93 x139) (= x65 x373) (= x120 x39) (= (mod (* x139 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x120) (= x283 3) (= x350 x50)) x50) x390))) (=> x135 x290))))))) (=> (and (and x137 (= x232 (mod (* 2 x112) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x39 x232) (= x373 x65) (= x23 2) (= x112 x93) (= x76 x137)) x76) x390))))) (=> (and x220 (and (= x65 x373) (= x220 x237) (= x39 x307) x237 (= x307 x93))) x390))) (=> (and x347 (and x280 (= x65 x373) (= x39 x335) (= x347 x280) (= 0 x335))) x390)))))
(assert (x30 x204))
(assert (x30 x12))
(assert (x30 x301))
(assert (x30 x7))
(assert (x30 x142))
(assert (x30 x224))
(assert (x30 x125))
(assert (x30 x94))
(assert (x30 x52))
(assert (x30 x231))
(assert (x30 x185))
(assert (= x140 (and x11 (not x90))))
(assert (= x358 (and x327 (not x135))))
(assert (= x73 (and x339 x337)))
(assert (x30 x292))
(assert (= x18 (and x167 (not x130))))
(assert (x30 x270))
(assert (x30 x49))
(assert (x30 x121))
(assert (= (and x76 x269) x118))
(assert (x30 x203))
(assert (= (and x56 x54) x227))
(assert (= x63 (=> (and (and (= x57 (div x19 10)) (= x65 x373) (= x57 x39)) (and (= x273 10) (= x212 x279) (= x19 x381) (= x42 false) x279)) x390)))
(assert (x30 x132))
(assert (= (and x2 x234) x83))
(assert (x30 x25))
(assert (x30 x389))
(assert (x30 x39))
(assert (x30 x120))
(assert (= x372 (and x48 x218)))
(assert (= (x275 (x368 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= 1245370514 (x275 (x368 1245370514))))
(assert (x30 x236))
(assert (x30 x78))
(assert (= x336 (=> (and (and (= (div x292 400) x121) (= x39 x121) (= x373 x65)) (and (= x292 x381) (= false x36) (= x317 x126) x317 (= 400 x176))) x390)))
(assert (x30 x344))
(assert (= (=> (and (and (= x93 x77) (= x322 x234) x322 (= x143 400) (= x162 false)) (and (= x39 x392) (= x373 x65) (= x392 (div x77 400)))) x390) x286))
(assert (= (x177 2685885107) (x368 2685885107)))
(assert (= (x368 1245370514) (x177 1245370514)))
(assert (x30 x351))
(assert (= x56 (and x349 (not x202))))
(assert (x30 x93))
(assert (x30 x61))
(assert (= (x275 (x368 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x387 (and x130 x167)))
(assert (x30 x150))
(assert (x30 x194))
(assert (x30 x47))
(assert (= (and x29 (not x382)) x321))
(assert (x30 x197))
(assert (= x75 (and x337 (not x339))))
(assert (x30 x124))
(assert (x102 x377))
(assert (= x218 (and (not x54) x56)))
(assert (= (and x18 x288) x97))
(assert (x30 x31))
(assert (x30 x26))
(assert (x30 x72))
(assert (= x260 (and x172 x191)))
(assert (x30 x155))
(assert (x30 x393))
(assert (x30 x283))
(assert (x30 x366))
(assert (x30 x154))
(assert (x30 x141))
(assert (x30 x99))
(assert (x30 x157))
(assert (x30 x4))
(assert (x30 x85))
(assert (= (and x59 (not x189)) x337))
(assert (x30 x115))
(assert (= (x368 149895259) (x177 149895259)))
(assert (= (and (not x341) x140) x327))
(assert (x30 x211))
(assert (x30 x91))
(assert (x30 x307))
(assert (= (and x90 x11) x9))
(assert (= (and x382 x29) x249))
(assert (= (and x326 x212) x1))
(assert (= (and x269 (not x76)) x11))
(assert (= x123 (and x245 x369)))
(assert (x30 x320))
(assert (x30 x68))
(assert (x30 x152))
(assert (x30 x362))
(assert (x30 x147))
(assert (x30 x346))
(assert (x30 x277))
(assert (= x353 (and x347 x263)))
(assert (x30 x335))
(assert (x30 x181))
(assert (x30 x298))
(assert (x30 x274))
(assert (x30 x381))
(assert (x30 x394))
(assert (x30 x35))
(assert (x30 x217))
(assert (x30 x128))
(assert (x30 x380))
(assert (x30 x38))
(assert (= x245 (and x75 (not x32))))
(assert (= x390 (=> (and (and x65 (= x39 x363) (= x180 x363) (= x363 x109)) (and (= x371 (mod (* x277 x389) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (- x133 1) x51) (= x88 (<= x380 x51)) (= x344 x138) (= 1 x4) (= x277 x166) (= x229 x124) (= x344 x109) (= x133 x124) (= x188 x380) (= x188 (x158 (- x371 x86))) (= x389 x146) (= x86 (mod (* x138 x229) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x88)))
(assert (x30 x112))
(assert (x30 x207))
(assert (x30 x252))
(assert (x30 x371))
(assert (x30 x176))
(assert (= x259 (or x1 x260 x353 x249 x108 x334 x285 x9 x6 x372 x46 x225 x40 x227 x123 x83 x73 x118 x387 x97 x359 x127 x332 x297)))
(assert (x30 x357))
(assert (x30 x199))
(assert (x30 x188))
(assert (x30 x57))
(assert (= (and x59 x189) x332))
(assert (= (x275 (x177 x377)) x377))
(assert (x30 x156))
(assert (= (and x358 (not x50)) x349))
(assert (x30 x136))
(assert (x30 x329))
(assert (x30 x343))
(assert (x30 x139))
(assert (x30 x223))
(assert (x30 x251))
(assert (x30 x273))
(assert (x30 x294))
(assert (x30 x168))
(assert (x30 x229))
(assert (x30 x171))
(assert (x30 x193))
(assert (x30 x151))
(assert (x30 x17))
(assert (x30 x232))
(assert (= (and (not x369) x245) x167))
(assert (x30 x304))
(assert (x30 x180))
(assert (= (=> (and (and (= x373 x65) (= (div x45 3) x301) (= x39 x301)) (and x122 (= x93 x45) (= false x243) (= x122 x54) (= x184 3))) x390) x70))
(assert (x30 x101))
(assert (x30 x363))
(assert (x30 x216))
(assert (x30 x221))
(assert (= (=> (and (and (= x165 x381) (= x186 x369) x186 (= x238 false) (= 500 x199)) (and (= x264 x39) (= x264 (div x165 500)) (= x373 x65))) x390) x384))
(assert (x30 x328))
(assert (x30 x89))
(assert (x30 x314))
(assert (x30 x74))
(assert (x30 x342))
(assert (x30 x183))
(assert (= x131 (=> (and (and (= (div x49 3) x84) (= x84 x39) (= x65 x373)) (and (= x296 x48) (= false x354) (= x49 x381) x296 (= x304 3))) x390)))
(assert (= x263 true))
(assert (x30 x33))
(assert (x30 x271))
(assert (x30 x364))
(assert (x30 x117))
(assert (x30 x254))
(assert (= 2685885107 (x275 (x368 2685885107))))
(assert (x30 x77))
(assert (= (and x358 x50) x285))
(assert (x30 x43))
(assert (x30 x160))
(assert (x30 x5))
(assert (= (and (not x347) x263) x303))
(assert (x30 x129))
(assert (x30 x163))
(assert (x30 x138))
(assert (x30 x313))
(assert (x30 x27))
(assert (x30 x179))
(assert (x30 x345))
(assert (x30 x149))
(assert (x30 x3))
(assert (= (and (not x288) x18) x2))
(assert (x30 x201))
(assert (= x379 (=> (and (and (= x373 x65) (= x217 (div x196 2)) (= x217 x39)) (and (= x196 x93) (= x100 false) (= x341 x276) (= x8 2) x276)) x390)))
(assert (= (and (not x48) x218) x172))
(assert (= (and x220 x303) x334))
(assert (x30 x24))
(assert (= x108 (and x32 x75)))
(assert (x30 x300))
(assert (x30 x284))
(assert (x30 x98))
(assert (x30 x265))
(assert (= 149895259 (x275 (x368 149895259))))
(assert (x30 x392))
(assert (x30 x299))
(assert (= (and (not x191) x172) x29))
(assert (x30 x196))
(assert (= x111 (and (not x220) x303)))
(assert (x30 x64))
(assert (x30 x13))
(assert (x30 x84))
(assert (x30 x10))
(assert (x30 x287))
(assert (x30 x106))
(assert (= (x177 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x368 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x30 x386))
(assert (x30 x71))
(assert (x30 x312))
(assert (x30 x86))
(assert (not x256))
(assert (x30 x374))
(assert (x30 x175))
(assert (= x6 (and x295 x126)))
(assert (x30 x45))
(assert (= x225 (and x202 x349)))
(assert (x30 x28))
(assert (= x297 (and x341 x140)))
(assert (= (=> (and (and x338 (= x78 500) (= x93 x182) (= x208 false) (= x32 x338)) (and (= x39 x136) (= x136 (div x182 500)) (= x65 x373))) x390) x15))
(assert (= (and x321 x14) x359))
(assert (x30 x178))
(assert (= (=> (and (and (= x367 x135) (= x323 false) (= x381 x3) (= x71 2) x367) (and (= x7 x39) (= (div x3 2) x7) (= x65 x373))) x390) x290))
(assert (x30 x281))
(assert (= x46 (and x135 x327)))
(assert (x30 x264))
(assert (= (and x2 (not x234)) x295))
(assert (x30 x23))
(assert (x30 x331))
(assert (x30 x267))
(assert (x30 x377))
(assert (x30 x241))
(assert (x30 x333))
(assert (= x326 (and (not x14) x321)))
(assert (x30 x164))
(assert (x30 x166))
(assert (x30 x215))
(assert (x30 x174))
(assert (x30 x184))
(assert (x30 x268))
(assert (= (and (not x34) x111) x269))
(assert (x30 x87))
(check-sat)
(exit)