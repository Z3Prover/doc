(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x306 0)) (((x104 (x91 Int)) (x242 (x84 x306) (x217 Int)) (x108 (x63 x306) (x190 x306) (x205 Int)))))
(declare-fun x71 () Int)
(declare-fun x186 () Int)
(declare-fun x110 () Bool)
(declare-fun x320 () Int)
(declare-fun x97 () Bool)
(declare-fun x304 () Bool)
(declare-fun x83 () Int)
(declare-fun x102 () Int)
(declare-fun x275 () Int)
(declare-fun x76 () Int)
(declare-fun x122 () Bool)
(declare-fun x200 () Int)
(declare-fun x137 () Int)
(declare-fun x24 () Int)
(declare-fun x20 () Int)
(declare-fun x176 () Int)
(declare-fun x307 () Int)
(declare-fun x173 () Int)
(declare-fun x152 () Int)
(declare-fun x133 () Int)
(declare-fun x138 () Bool)
(declare-fun x313 () Int)
(declare-fun x115 () Int)
(declare-fun x296 () Bool)
(declare-fun x51 () Bool)
(declare-fun x279 () Int)
(declare-fun x142 () Int)
(declare-fun x168 () Int)
(declare-fun x69 () Int)
(declare-fun x39 () Int)
(declare-fun x212 () Bool)
(declare-fun x277 () Int)
(declare-fun x88 () x306)
(declare-fun x149 () Int)
(declare-fun x5 () Bool)
(declare-fun x164 () Bool)
(declare-fun x58 () Int)
(declare-fun x8 () Int)
(declare-fun x310 () Bool)
(declare-fun x259 () Int)
(declare-fun x61 () Int)
(declare-fun x3 () Int)
(declare-fun x244 () Bool)
(declare-fun x107 () Int)
(declare-fun x216 () Int)
(declare-fun x150 () Int)
(declare-fun x284 () Bool)
(declare-fun x116 () Int)
(declare-fun x303 () Bool)
(declare-fun x15 () Int)
(declare-fun x53 (x306) Int)
(declare-fun x100 () Int)
(declare-fun x232 () Int)
(declare-fun x285 () Bool)
(declare-fun x17 () Int)
(declare-fun x235 () Int)
(declare-fun x252 () Bool)
(declare-fun x241 () Int)
(declare-fun x213 () Bool)
(declare-fun x183 () Int)
(declare-fun x194 (x306) Int)
(declare-fun x276 (x306) Int)
(declare-fun x45 () Int)
(declare-fun x12 () Int)
(declare-fun x175 () Int)
(declare-fun x127 () Int)
(declare-fun x159 () Int)
(declare-fun x270 () Bool)
(declare-fun x321 () Bool)
(declare-fun x79 () Int)
(declare-fun x208 () Bool)
(declare-fun x47 () Int)
(declare-fun x139 () Bool)
(declare-fun x43 () Int)
(declare-fun x50 () Int)
(declare-fun x56 () Int)
(declare-fun x255 (x306) Int)
(declare-fun x121 () Int)
(declare-fun x220 () Int)
(declare-fun x316 () Int)
(declare-fun x89 () Bool)
(declare-fun x22 () Int)
(declare-fun x291 () Int)
(declare-fun x239 (x306) Int)
(declare-fun x98 () Int)
(declare-fun x87 () Int)
(declare-fun x317 () Bool)
(declare-fun x49 () Int)
(declare-fun x201 () Bool)
(declare-fun x278 (x306) Int)
(declare-fun x80 () Int)
(declare-fun x193 () Int)
(declare-fun x299 () Int)
(declare-fun x106 () Int)
(declare-fun x68 () Bool)
(declare-fun x18 () Bool)
(declare-fun x308 () Bool)
(declare-fun x177 () Int)
(declare-fun x250 () Int)
(declare-fun x300 () Int)
(declare-fun x4 () Int)
(declare-fun x55 () Bool)
(declare-fun x311 () Int)
(declare-fun x158 () Int)
(declare-fun x153 () Int)
(declare-fun x267 () Int)
(declare-fun x48 () Int)
(declare-fun x113 () Int)
(declare-fun x42 () Bool)
(declare-fun x124 () Int)
(declare-fun x206 () Bool)
(declare-fun x114 () Int)
(declare-fun x119 () Bool)
(declare-fun x309 () Bool)
(declare-fun x265 () Bool)
(declare-fun x184 () Int)
(declare-fun x301 () x306)
(declare-fun x223 () Int)
(declare-fun x289 () Int)
(declare-fun x82 () Int)
(declare-fun x282 () Int)
(declare-fun x7 () Bool)
(declare-fun x230 () Int)
(declare-fun x165 (Int Int) Int)
(declare-fun x117 () Int)
(declare-fun x2 () Int)
(declare-fun x233 () Bool)
(declare-fun x123 () Int)
(declare-fun x70 () Bool)
(declare-fun x34 () Bool)
(declare-fun x251 () Int)
(declare-fun x131 () Int)
(declare-fun x187 () Int)
(declare-fun x14 () Int)
(declare-fun x305 () Int)
(declare-fun x315 () Int)
(declare-fun x105 () Int)
(declare-fun x272 () x306)
(declare-fun x249 () Int)
(declare-fun x27 () Int)
(declare-fun x182 () Int)
(declare-fun x245 () Int)
(declare-fun x287 () Int)
(declare-fun x293 () Int)
(declare-fun x145 () Bool)
(declare-fun x32 () Int)
(declare-fun x189 () Int)
(declare-fun x234 () Bool)
(declare-fun x62 () Int)
(declare-fun x281 () Int)
(declare-fun x191 () Int)
(declare-fun x231 () x306)
(declare-fun x185 () Bool)
(declare-fun x86 () Int)
(declare-fun x166 () Int)
(declare-fun x288 () Bool)
(declare-fun x36 () Int)
(declare-fun x199 () Bool)
(declare-fun x21 () Int)
(declare-fun x207 () Int)
(declare-fun x75 () Int)
(declare-fun x163 () Bool)
(declare-fun x162 () Int)
(declare-fun x33 () x306)
(declare-fun x37 () Int)
(declare-fun x263 () Int)
(declare-fun x266 () x306)
(declare-fun x52 () Int)
(declare-fun x211 () Int)
(declare-fun x31 () Int)
(declare-fun x180 () Bool)
(declare-fun x236 () Bool)
(declare-fun x224 (Int) Int)
(declare-fun x312 () Bool)
(declare-fun x111 () Int)
(declare-fun x314 () Bool)
(declare-fun x181 () Int)
(declare-fun x178 () Int)
(declare-fun x269 () Bool)
(declare-fun x40 () Int)
(declare-fun x35 () Int)
(declare-fun x253 () Int)
(declare-fun x322 () Int)
(declare-fun x264 () Bool)
(declare-fun x318 () Bool)
(declare-fun x215 () Int)
(declare-fun x93 () Int)
(declare-fun x192 () Int)
(declare-fun x319 () Int)
(declare-fun x271 () Int)
(declare-fun x26 () Bool)
(declare-fun x294 () Int)
(declare-fun x54 () Int)
(declare-fun x13 () Int)
(declare-fun x136 () Int)
(declare-fun x65 () Int)
(declare-fun x160 () Int)
(declare-fun x120 () Bool)
(declare-fun x204 () Int)
(declare-fun x202 () Int)
(declare-fun x147 () Bool)
(declare-fun x280 () Int)
(declare-fun x10 () Int)
(declare-fun x286 () Int)
(declare-fun x179 () Int)
(declare-fun x219 () Int)
(declare-fun x151 () Int)
(declare-fun x78 (x306) Int)
(declare-fun x92 () Int)
(declare-fun x72 () Bool)
(declare-fun x44 () Int)
(declare-fun x148 () Bool)
(declare-fun x85 () Int)
(declare-fun x95 () Int)
(declare-fun x262 () Bool)
(declare-fun x38 () Int)
(declare-fun x292 () Int)
(declare-fun x118 () Int)
(declare-fun x46 () Bool)
(declare-fun x29 () Int)
(declare-fun x73 () Bool)
(declare-fun x260 (Int) x306)
(declare-fun x96 () Bool)
(declare-fun x154 () Int)
(declare-fun x203 () Int)
(declare-fun x247 () Int)
(declare-fun x101 () Int)
(declare-fun x141 () Int)
(declare-fun x11 () Int)
(declare-fun x238 () Int)
(declare-fun x23 (Int Int) Int)
(declare-fun x143 () Int)
(declare-fun x90 () Int)
(declare-fun x298 (Int) Int)
(declare-fun x268 () Bool)
(declare-fun x221 () Int)
(declare-fun x130 () Int)
(declare-fun x30 () Bool)
(declare-fun x302 () Int)
(declare-fun x144 () Bool)
(declare-fun x74 () Int)
(declare-fun x237 () Int)
(declare-fun x19 () x306)
(declare-fun x125 () Int)
(declare-fun x41 () Int)
(declare-fun x57 () Bool)
(declare-fun x256 () Int)
(declare-fun x243 () Bool)
(declare-fun x240 () Int)
(declare-fun x188 (Int) Int)
(declare-fun x99 () Int)
(declare-fun x167 () Bool)
(declare-fun x172 () Bool)
(declare-fun x9 () Int)
(declare-fun x25 () Int)
(declare-fun x209 () Bool)
(declare-fun x257 () Int)
(declare-fun x60 () Bool)
(declare-fun x171 () Bool)
(declare-fun x196 () Bool)
(declare-fun x254 () Int)
(declare-fun x227 () Int)
(declare-fun x174 () Int)
(declare-fun x146 () Bool)
(declare-fun x283 () Int)
(declare-fun x103 () Int)
(declare-fun x1 () Int)
(declare-fun x297 () Int)
(declare-fun x229 () Int)
(declare-fun x126 () Bool)
(declare-fun x94 () Int)
(declare-fun x261 () Int)
(declare-fun x28 () Int)
(define-fun x77 ((x306 x306) (x59 Int)) x306 (ite ((_ is x242) x306) (x242 (x84 x306) (+ (x217 x306) x59)) (ite ((_ is x108) x306) (x108 (x63 x306) (x190 x306) (+ (x205 x306) x59)) (x104 (+ x59 (x91 x306))))))
(define-fun x198 ((x273 Int)) Int (ite (and (< x273 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x273)) x273 (- x273 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x274 ((x273 Int)) Int (ite (and (>= x273 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x273 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x273) x273))
(define-fun x248 ((x132 Int)) Bool (and (< x132 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x132 0)))
(define-fun x112 ((x132 Int)) Bool (and (= (x165 115792089237316195423570985008687907853269984665640564039457584007913129639935 x132) x132) (= (x165 x132 115792089237316195423570985008687907853269984665640564039457584007913129639935) x132)))
(define-fun x210 ((x132 Int)) Bool (and (= 0 (x165 x132 0)) (= (x165 0 x132) 0)))
(define-fun x290 ((x132 Int)) Bool (= (x165 x132 x132) x132))
(define-fun x295 ((x132 Int)) Bool (and (x210 x132) (x290 x132) (x112 x132)))
(define-fun x67 ((x132 Int) (x135 Int)) Bool (= (x165 x132 x135) (x165 x135 x132)))
(define-fun x226 ((x132 Int) (x135 Int)) Bool (and (>= (x165 x132 x135) 0) (=> (<= 0 x135) (<= (x165 x132 x135) x135)) (=> (>= x132 0) (<= (x165 x132 x135) x132))))
(define-fun x170 ((x132 Int) (x135 Int)) Bool (and (x67 x132 x135) (x226 x132 x135)))
(define-fun x129 ((x132 Int)) Bool (= (mod x132 1461501637330902918203684832716283019655932542976) (x165 x132 1461501637330902918203684832716283019655932542975)))
(define-fun x258 ((x132 Int)) Bool (and (x129 x132) (x170 x132 1461501637330902918203684832716283019655932542975)))
(define-fun x16 ((x132 Int)) Bool (= (mod x132 1099511627776) (x165 x132 1099511627775)))
(define-fun x222 ((x132 Int)) Bool (and (x16 x132) (x170 x132 1099511627775)))
(define-fun x140 ((x156 Int)) Int (ite (= 384 x156) x71 (x224 x156)))
(define-fun x134 ((x156 Int)) Int (ite x34 (x224 x156) (x140 x156)))
(define-fun x155 ((x156 Int)) Int (ite (= 384 x156) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x134 x156)))
(define-fun x218 ((x156 Int)) Int (ite (= x156 388) x158 (x155 x156)))
(define-fun x81 ((x156 Int)) Int (ite (= x156 420) x40 (x218 x156)))
(define-fun x64 ((x156 Int)) Int (ite (= x156 452) x168 (x81 x156)))
(define-fun x157 ((x156 Int)) Int (ite (and (> (+ 0 384) x156) (>= x156 384)) (x188 (+ (- x156 384) 0)) (x64 x156)))
(define-fun x225 ((x156 Int)) Int (ite x147 (x134 x156) (ite x318 (x157 x156) (x64 x156))))
(define-fun x6 ((x156 Int)) Int (ite (= 384 x156) x13 (x225 x156)))
(define-fun x169 ((x156 Int)) Int (ite (= 384 x156) x13 (x6 x156)))
(define-fun x197 ((x156 Int)) Int (ite (= 416 x156) x300 (x169 x156)))
(define-fun x246 ((x156 Int)) Int (ite (= 448 x156) x38 (x197 x156)))
(define-fun x228 ((x156 Int)) Int (ite (= 480 x156) x200 (x246 x156)))
(define-fun x195 ((x156 Int)) Int (ite (= x156 512) x69 (x228 x156)))
(define-fun x109 ((x156 Int)) Int (ite (= 544 x156) x204 (x195 x156)))
(define-fun x66 ((x156 Int)) Int (ite (= x156 384) (ite x146 1 0) (x109 x156)))
(define-fun x161 ((x156 Int)) Int (ite (= 416 x156) x204 (x66 x156)))
(define-fun x128 ((x156 Int)) Int (ite (= 448 x156) x69 (x161 x156)))
(define-fun x214 ((x132 Int)) Bool (=> (and (not (= x132 2646777772)) (not (= x132 1461501637330902918203684832716283019655932542976)) (not (= x132 1976722451)) (not (= 117300739 x132)) (not (= 4294967296 x132)) (not (= 2976520670 x132)) (> x132 10000) (not (= x132 2432105714)) (not (= 157198259 x132)) (not (= x132 3226110480)) (not (= 340282366920938463463374607431768211455 x132)) (not (= 340282366920938463463374607431768211456 x132)) (not (= x132 599290589)) (not (= x132 115792089237316195423570985008687907853269984665640064039457584007913129639935)) (not (= x132 1966461510)) (not (= x132 1000000000)) (not (= 1865579259 x132)) (not (= 1099511627775 x132)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x132)) (not (= 500000000000000000000000000 x132)) (not (= 189977944 x132)) (not (= 3018967357 x132)) (not (= 1000000000000000000000000000 x132)) (not (= 1889567281 x132)) (not (= x132 2835717307)) (not (= 1809280292 x132)) (not (= x132 22402283082756182618670880521465619040657731284550890770856599233457073160192)) (not (= x132 404098525)) (not (= 1461501637330902918203684832716283019655932542975 x132))) (not ((_ is x104) (x260 x132)))))
(assert (x248 x92))
(assert (x248 x151))
(assert (x248 x203))
(assert (=> (>= 10000 x82) (= (x104 x82) (x260 x82))))
(assert (=> (<= x28 10000) (= (x104 x28) (x260 x28))))
(assert (x248 x152))
(assert (x248 x43))
(assert (= 1099511627775 (x239 (x104 1099511627775))))
(assert (= (x239 (x104 404098525)) 404098525))
(assert (x248 x24))
(assert (= (x260 500000000000000000000000000) (x104 500000000000000000000000000)))
(assert (x248 x127))
(assert (= (x104 340282366920938463463374607431768211455) (x260 340282366920938463463374607431768211455)))
(assert (x248 x98))
(assert (= x28 (x239 (x260 x28))))
(assert (= (x239 (x104 2976520670)) 2976520670))
(assert (x248 x230))
(assert (= (and x96 x209) x264))
(assert (x248 x263))
(assert (x248 x216))
(assert (x248 x133))
(assert (=> (>= 10000 x27) (= (x260 x27) (x104 x27))))
(assert (x248 x202))
(assert (x214 x28))
(assert (x248 x186))
(assert (x248 x191))
(assert (x248 x20))
(assert (x248 x117))
(assert (x248 x48))
(assert (= 4294967296 (x239 (x104 4294967296))))
(assert (x214 x54))
(assert (x248 x95))
(assert (x248 x40))
(assert (x248 x193))
(assert (x258 x223))
(assert (x248 x293))
(assert (x248 x280))
(assert (x248 x36))
(assert (x248 x250))
(assert (x248 x319))
(assert (= (x260 1809280292) (x104 1809280292)))
(assert (= 157198259 (x239 (x104 157198259))))
(assert (x248 x223))
(assert (x248 x14))
(assert (= (x239 (x104 1976722451)) 1976722451))
(assert (= (x239 (x260 x178)) x178))
(assert (x248 x235))
(assert (x248 x58))
(assert (= x252 (=> (and (< (* x40 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x47 x38)) (= x19 (x108 (x260 x27) (x104 56) 0)) (= (x165 1461501637330902918203684832716283019655932542975 x223) x15) (> 1461501637330902918203684832716283019655932542976 x12) (= x271 (div x154 1000000000000000000000000000)) (= (x198 (+ x183 500000000000000000000000000)) x4) (= (< x271 x62) x212) x60 (= x102 (- x313 x43)) (<= 0 x94) (= x220 (+ x275 x316)) (= x133 (ite x120 1 0)) (= x235 x116) (= x2 (div x3 2)) (= x315 (x165 1099511627775 x113)) (= x141 x293) (= x52 (ite x110 1 0)) (not (< 340282366920938463463374607431768211455 x13)) (= x321 (< x50 x186)) (< (+ x40 x47) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (< (* x220 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (not x321) x126) (= x231 (x108 (x260 x28) (x104 56) 0)) (= x177 (x198 (+ x80 x2))) (= (mod (* 1000000000 x227) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x186) (<= x40 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x40 0) (> x133 0) (= (mod (* x62 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x267) (= x240 (x165 1461501637330902918203684832716283019655932542975 x223)) (= x141 x204) (= x171 (or x268 x208)) (= (< x189 x203) x233) (= (+ x299 x79) x151) (= x99 x47) (= x200 (div x152 x187)) (= x297 (x198 (+ 500000000000000000000000000 x179))) (= (x198 (+ 500000000000000000000000000 x25)) x76) (= (= x203 0) x234) (>= 1461501637330902918203684832716283019655932542975 x12) (= x266 (x108 (x260 x240) (x104 56) 0)) (= x48 (mod (* 1000000000 x300) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (not x309) x317) (= (mod (* 1000000000 x40) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x137) (< (* 1000000000 x300) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1 x229) (= x187 (mod (* 1000000000 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x269 (or x57 x317)) (= x150 0) (= x151 x87) (= (not x68) x139) (<= x94 340282366920938463463374607431768211455) (= x216 (x165 1461501637330902918203684832716283019655932542975 x223)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x282 x173)) (>= x118 0) (= x309 (not x30)) (> 340282366920938463463374607431768211456 x94) (>= x305 0) (= x208 (not x51)) (= x152 (x198 (+ x267 x65))) (= x21 x291) (= (div x311 1000000000000000000000000000) x124) (= x168 (x194 x231)) (= x167 (or x72 x5)) (= x50 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x289)) (= x219 (div x3 2)) (= x189 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x186)) (<= x151 340282366920938463463374607431768211455) (= x168 x79) (= x313 (+ x229 x87)) (= (ite x167 1 0) x302) (= x3 (mod (* x204 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= x187 0) x72) (= (mod (* x94 x137) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x117) (= x173 (div x297 1000000000000000000000000000)) (= x299 x13) (= (+ x100 x247) x62) (< 0 x181) (= (= x3 0) x57) (= (x53 x266) x118) (= (or x126 x234) x120) (= x235 (div x4 1000000000000000000000000000)) (= x181 (ite x138 1 0)) (= x310 (>= x1 x168)) (= x288 (= 0 x48)) (= (div x177 x3) x69) (= (mod (* 1000000000000000000000000000 x29) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x80) (= (not x212) x196) (= x183 (mod (* x289 x186) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x150 (ite x269 1 0)) (= (or x243 x199) x110) (= x141 (+ x40 x47)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x47 1000000000)) (<= 0 x94) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x235 x153)) (= x154 (x274 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x251))) (= x43 x305) (= x130 (x198 (+ 500000000000000000000000000 x117))) (= x60 (= x102 x21)) (= (+ x116 x142) x29) (< x118 340282366920938463463374607431768211456) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x48) x307) (= (= 0 x12) x270) (>= 340282366920938463463374607431768211455 x168) (= x166 (div x177 x3)) (< 0 x52) (= x153 x142) (= (or x288 x139) x138) (< x94 340282366920938463463374607431768211456) (= x13 (+ x99 x125)) (>= 340282366920938463463374607431768211455 x94) (= (> x29 x124) x30) (= x283 (ite x171 1 0)) (= (x194 x19) x305) (= (= 0 x186) x199) (= x92 (x165 1099511627775 x113)) (= x173 x247) (<= x118 340282366920938463463374607431768211455) (= (x165 1461501637330902918203684832716283019655932542975 x223) x28) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000 x204)) (> 340282366920938463463374607431768211456 x168) (< 0 x283) (= (mod (* x48 x118) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x25) (>= 340282366920938463463374607431768211455 x305) (= x125 x38) (= x5 (not x196)) (= x68 (> x118 x307)) (<= 0 x12) (= 0 x302) (not (> x69 340282366920938463463374607431768211455)) (= (div x187 2) x65) (= x100 x282) x310 (= (> x94 x230) x51) (= x282 (div x76 1000000000000000000000000000)) (= x153 (div x130 1000000000000000000000000000)) (not (< 340282366920938463463374607431768211455 x200)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x47 x300)) (= (mod (* x289 x186) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x179) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x13 x168)) (>= x168 0) (= x316 x47) (= x251 (div x187 2)) (= (not x233) x243) (= (= 0 x137) x268) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x137) x230) (= x311 (x274 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x219))) (= (x165 1461501637330902918203684832716283019655932542975 x223) x27) (= x300 x275)) (and (=> x270 x213) (=> (and (not x270) (and (or (and (and (= (<= x103 (x255 (x260 x54))) x119) (= (x78 (x260 x54)) x103) x119 (= (= x280 (x255 (x260 x12))) x172) x172 (= (x78 (x260 x12)) x280) (> 4294967296 x245)) x285) (not x285)) (and (= x285 (> x83 0)) (= x90 (x278 (x260 x12))) (not (= 0 x90)) (= (x165 1461501637330902918203684832716283019655932542975 x223) x158) (> 1461501637330902918203684832716283019655932542976 x12) (>= 1461501637330902918203684832716283019655932542975 x12) (<= 0 x12)))) x97)))))
(assert (= (x260 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x104 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x248 x322))
(assert (x248 x39))
(assert (x248 x271))
(assert (x248 x221))
(assert (x248 x87))
(assert (x248 x4))
(assert (x248 x200))
(assert (x248 x118))
(assert (x248 x101))
(assert (= (x104 1000000000000000000000000000) (x260 1000000000000000000000000000)))
(assert (x248 x45))
(assert (x248 x90))
(assert (= (x104 1461501637330902918203684832716283019655932542976) (x260 1461501637330902918203684832716283019655932542976)))
(assert (x248 x291))
(assert (= true x55))
(assert (x248 x13))
(assert (x248 x137))
(assert (x248 x176))
(assert (x248 x121))
(assert (x214 x322))
(assert (x248 x106))
(assert (= (x104 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x260 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x214 x82))
(assert (= (x104 4294967296) (x260 4294967296)))
(assert (= (x239 (x260 x12)) x12))
(assert (x248 x187))
(assert (x248 x238))
(assert (x248 x305))
(assert (x248 x131))
(assert (x295 x286))
(assert (x248 x35))
(assert (x248 x259))
(assert (x248 x11))
(assert (x248 x130))
(assert (x248 x178))
(assert (x248 x162))
(assert (x248 x38))
(assert (= (x239 (x104 599290589)) 599290589))
(assert (x248 x103))
(assert (x248 x94))
(assert (x248 x149))
(assert (x248 x253))
(assert (x248 x294))
(assert (x295 x113))
(assert (x248 x279))
(assert (x248 x286))
(assert (x248 x27))
(assert (= (x104 340282366920938463463374607431768211456) (x260 340282366920938463463374607431768211456)))
(assert (x248 x12))
(assert (not x304))
(assert (x248 x107))
(assert (= (=> (and (or (and (and (> 340282366920938463463374607431768211456 x263) (= x300 x263) (= x287 x320) (= (<= x263 x1) x201) (= x143 x38) (= (x274 (- x263 x287)) x143) (not (< x263 x287)) (= x82 (x165 1461501637330902918203684832716283019655932542975 x223)) (= (x108 (x260 x82) (x104 56) 0) x33) (= (x194 x33) x263) x201 (>= 340282366920938463463374607431768211455 x263) (<= 0 x263)) (not x96)) (and (and (= 0 x38) (= 0 x300) (= x320 0)) x96)) (and (= (<= x287 x1) x262) (= (= 0 x287) x96) (>= 340282366920938463463374607431768211455 x287) (= (x165 1461501637330902918203684832716283019655932542975 x223) x178) (= x301 (x108 (x260 x178) (x104 56) 0)) x262 (< x287 340282366920938463463374607431768211456) (= x287 (x194 x301)) (<= 0 x287))) x252) x73))
(assert (x248 x86))
(assert (= 2835717307 (x239 (x104 2835717307))))
(assert (x248 x192))
(assert (= (x104 3018967357) (x260 3018967357)))
(assert (= (=> (not (= 0 x83)) x213) x163))
(assert (=> (>= 10000 x250) (= (x104 x250) (x260 x250))))
(assert (x248 x177))
(assert (x248 x283))
(assert (x248 x3))
(assert (x248 x153))
(assert (x248 x52))
(assert (x248 x181))
(assert (x248 x237))
(assert (= 3226110480 (x239 (x104 3226110480))))
(assert (=> (>= 10000 x240) (= (x260 x240) (x104 x240))))
(assert (= (x260 1865579259) (x104 1865579259)))
(assert (x248 x182))
(assert (x248 x219))
(assert (x248 x320))
(assert (x248 x93))
(assert (x248 x311))
(assert (= (x104 1976722451) (x260 1976722451)))
(assert (= (or (and (not x144) x122) x314) x148))
(assert (= (and x285 x70) x318))
(assert (x248 x154))
(assert (x248 x74))
(assert (= (=> (and (and (= x149 x40) (<= 0 x94) (<= x101 1461501637330902918203684832716283019655932542975) (<= 0 x281) (>= 1461501637330902918203684832716283019655932542975 x175) (>= x20 0) (<= x192 255) (= x232 x131) (>= 340282366920938463463374607431768211455 x94) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x40) (= x279 x115) (<= x131 1461501637330902918203684832716283019655932542975) (= (< 0 (x278 (x260 x54))) x296) (= x101 x115) (<= 0 x175) (>= 255 x74) (not (= 157198259 x191)) (<= 0 x94) (= (x278 (x260 x54)) x93) (>= 1461501637330902918203684832716283019655932542975 x176) (<= 0 x12) (<= x123 1461501637330902918203684832716283019655932542975) (< x191 599290589) (> 2432105714 x191) (>= x101 0) (= x232 x261) (not (= 189977944 x191)) (= x164 false) (<= 0 x176) (= x292 0) (= x191 404098525) (= x259 x292) (not (= 117300739 x191)) (= x256 4) (<= 0 x74) (<= 0 x279) (>= x192 0) (<= 0 x123) (> x54 0) (= x206 false) (= x185 false) (<= x12 1461501637330902918203684832716283019655932542975) x296 (<= 0 x131) (>= 340282366920938463463374607431768211455 x94) (= x176 x202) (= x20 (x78 (x260 x54))) (>= 1461501637330902918203684832716283019655932542975 x54) (> x93 0) (<= x281 1099511627775) (<= x279 1461501637330902918203684832716283019655932542975) (>= x40 0) (< x94 340282366920938463463374607431768211456) (= x303 false) (= 3018967357 x41) (< x191 1809280292)) (and (or (and (not x7) (and (= x35 (x276 x272)) (= x88 (x108 (x260 x250) (x104 54) 0)) (<= 0 x175) (<= x175 1461501637330902918203684832716283019655932542975) (= x319 (x165 1461501637330902918203684832716283019655932542975 x223)) (= x250 (x165 1461501637330902918203684832716283019655932542975 x223)) (< x175 1461501637330902918203684832716283019655932542976) (= x85 (x165 1461501637330902918203684832716283019655932542975 x221)) (= x71 (x274 (- x35 x227))) (= (x165 1461501637330902918203684832716283019655932542975 x221) x322) (>= x35 0) (not (> x47 x35)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35) (= x272 (x108 (x260 x322) x88 0)))) x7) (and (= x294 x227) (not (= 2835717307 x207)) (not (> 4 x111)) (<= x223 1461501637330902918203684832716283019655932542975) (= x221 x17) (= x238 x223) (= x289 x36) (= x115 x32) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x9)) (< x9 128)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x9))) (= (x165 1461501637330902918203684832716283019655932542975 x286) x39) (not (< x207 2432105714)) (not (> 2835717307 x207)) (>= 1461501637330902918203684832716283019655932542975 x221) (= x149 x257) (= x9 (x274 (- x111 4))) (< 0 x8) (>= 1461501637330902918203684832716283019655932542975 x32) (= x24 x249) (not (= 2976520670 x207)) (= x7 (= x223 x221)) (= x136 x39) (= x207 3018967357) (<= 0 x121) (= x203 x289) (<= x121 1461501637330902918203684832716283019655932542975) (< x207 3226110480) (= x44 x223) (and (> x111 131) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x111))) (>= 1461501637330902918203684832716283019655932542975 x24) (<= 0 x32) (= x249 x261) (= (x165 1461501637330902918203684832716283019655932542975 x115) x136) (= x221 x49) (= x227 x47) (= x8 (x278 (x260 x54))) (= x106 x259) (= x106 0) (<= 0 x24)))) x73) x304))
(assert (x248 x281))
(assert (x248 x123))
(assert (x248 x62))
(assert (x248 x37))
(assert (=> (>= 10000 x12) (= (x260 x12) (x104 x12))))
(assert (= x284 (or x264 x244)))
(assert (x248 x174))
(assert (= x209 (or x34 x42)))
(assert (x248 x166))
(assert (x248 x282))
(assert (= x314 (and x144 x122)))
(assert (= x265 (or x148 x147)))
(assert (x248 x111))
(assert (x248 x179))
(assert (x248 x289))
(assert (= (x239 (x104 22402283082756182618670880521465619040657731284550890770856599233457073160192)) 22402283082756182618670880521465619040657731284550890770856599233457073160192))
(assert (= (x239 (x104 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x248 x267))
(assert (x214 x12))
(assert (x248 x82))
(assert (x248 x76))
(assert (= (x239 (x104 117300739)) 117300739))
(assert (x248 x240))
(assert (x248 x173))
(assert (= (x239 (x104 340282366920938463463374607431768211456)) 340282366920938463463374607431768211456))
(assert (x248 x150))
(assert (x248 x61))
(assert (x248 x44))
(assert (x248 x32))
(assert (x248 x184))
(assert (x295 x221))
(assert (x248 x277))
(assert (=> (<= x178 10000) (= (x260 x178) (x104 x178))))
(assert (x248 x227))
(assert (x248 x1))
(assert (= 1865579259 (x239 (x104 1865579259))))
(assert (x248 x31))
(assert (= x70 (and x284 (not x270))))
(assert (= (x104 2646777772) (x260 2646777772)))
(assert (x248 x143))
(assert (x248 x83))
(assert (x248 x69))
(assert (x248 x175))
(assert (= (x260 1099511627775) (x104 1099511627775)))
(assert (x248 x2))
(assert (x248 x307))
(assert (x248 x256))
(assert (= 1461501637330902918203684832716283019655932542975 (x239 (x104 1461501637330902918203684832716283019655932542975))))
(assert (x248 x215))
(assert (= x244 (and x209 (not x96))))
(assert (x248 x113))
(assert (= x42 (and (not x7) x55)))
(assert (x258 x221))
(assert (x248 x71))
(assert (= (x239 (x104 2432105714)) 2432105714))
(assert (= (or x18 x318) x122))
(assert (= (x239 (x104 1966461510)) 1966461510))
(assert (x248 x21))
(assert (x248 x80))
(assert (= 500000000000000000000000000 (x239 (x104 500000000000000000000000000))))
(assert (x248 x287))
(assert (x214 x240))
(assert (x248 x115))
(assert (= x27 (x239 (x260 x27))))
(assert (x248 x257))
(assert (= (x260 404098525) (x104 404098525)))
(assert (x248 x9))
(assert (x248 x75))
(assert (x248 x56))
(assert (x248 x300))
(assert (= (x260 1000000000) (x104 1000000000)))
(assert (x248 x29))
(assert (= (x239 (x104 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (= 1461501637330902918203684832716283019655932542976 (x239 (x104 1461501637330902918203684832716283019655932542976))))
(assert (= (x239 (x260 x250)) x250))
(assert (= x54 (x239 (x260 x54))))
(assert (= (x239 (x104 3018967357)) 3018967357))
(assert (= (x104 1889567281) (x260 1889567281)))
(assert (x258 x286))
(assert (= 1000000000000000000000000000 (x239 (x104 1000000000000000000000000000))))
(assert (x248 x254))
(assert (x248 x10))
(assert (= (x104 2976520670) (x260 2976520670)))
(assert (= (x104 1966461510) (x260 1966461510)))
(assert (x248 x50))
(assert (x248 x245))
(assert (x248 x160))
(assert (x248 x297))
(assert (x248 x25))
(assert (x248 x251))
(assert (x248 x49))
(assert (x248 x159))
(assert (x248 x241))
(assert (x248 x204))
(assert (= (x260 1461501637330902918203684832716283019655932542975) (x104 1461501637330902918203684832716283019655932542975)))
(assert (= (x104 599290589) (x260 599290589)))
(assert (x248 x229))
(assert (x214 x27))
(assert (x248 x17))
(assert (x248 x15))
(assert (x248 x22))
(assert (= (x104 117300739) (x260 117300739)))
(assert (x248 x47))
(assert (= (x260 3226110480) (x104 3226110480)))
(assert (x295 x223))
(assert (x248 x41))
(assert (= 1000000000 (x239 (x104 1000000000))))
(assert (x248 x302))
(assert (x248 x211))
(assert (x295 x115))
(assert (x248 x315))
(assert (x248 x292))
(assert (= 1809280292 (x239 (x104 1809280292))))
(assert (= (and x270 x284) x147))
(assert (x295 1099511627775))
(assert (x248 x105))
(assert (= (x239 (x104 189977944)) 189977944))
(assert (x248 x249))
(assert (x248 x54))
(assert (= (=> (and (or x144 (not x144)) (= x144 (= x83 0))) x163) x97))
(assert (x248 x189))
(assert (= x34 (and x55 x7)))
(assert (= (x239 (x260 x322)) x322))
(assert (= 2646777772 (x239 (x104 2646777772))))
(assert (= (x260 2432105714) (x104 2432105714)))
(assert (x248 x232))
(assert (x248 x261))
(assert (x248 x124))
(assert (= (x239 (x104 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x248 x65))
(assert (= (and (not x285) x70) x18))
(assert (=> (>= 10000 x54) (= (x260 x54) (x104 x54))))
(assert (=> (<= x322 10000) (= (x104 x322) (x260 x322))))
(assert (= x82 (x239 (x260 x82))))
(assert (x248 x85))
(assert (x248 x158))
(assert (= (x239 (x260 x240)) x240))
(assert (x248 x114))
(assert (x248 x220))
(assert (x248 x136))
(assert (x248 x207))
(assert (= (x260 189977944) (x104 189977944)))
(assert (x214 x250))
(assert (x295 1461501637330902918203684832716283019655932542975))
(assert (x248 x8))
(assert (x222 x113))
(assert (x258 x115))
(assert (= (x260 2835717307) (x104 2835717307)))
(assert (x248 x183))
(assert (= (x104 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x260 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x260 157198259) (x104 157198259)))
(assert (x248 x28))
(assert (x214 x178))
(assert (= (x239 (x104 1889567281)) 1889567281))
(assert (x248 x168))
(assert (= x213 (=> (and (and (= x58 (x128 448)) (= x211 (x128 416)) (= x236 x146) (= x236 (= 0 x300)) (= x237 (x128 384))) (and (and (= x259 x184) (>= x293 0) (>= 1461501637330902918203684832716283019655932542975 x56) (> 1809280292 x61) (< x61 599290589) (= x98 x254) (= x193 (x278 (x260 x54))) (< x166 340282366920938463463374607431768211456) (>= 1461501637330902918203684832716283019655932542975 x98) (>= x56 0) (<= 0 x69) (<= 0 x98) (not (= 117300739 x61)) (< x61 2432105714) (<= 0 x22) (= x261 x254) (> x193 0) (= x61 404098525) (<= x22 1461501637330902918203684832716283019655932542975) (not (= x61 157198259)) (not (= 189977944 x61)) (= x293 x14) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x293) (<= x69 340282366920938463463374607431768211455) (= x115 x22) (= x184 0)) (and (and (= (= x10 x107) x46) (= x159 x107) (= x308 (or x145 (not x89))) (= x145 x46) (= x312 false) (= 3018967357 x277) (= 3018967357 x95) (= x174 3018967357) (= true x26) (= x215 2646777772) (= true x180)) (and (= x115 x10) (> 1976722451 x241) (= x261 x253) (>= x31 0) (not (= 1865579259 x241)) (>= 1461501637330902918203684832716283019655932542975 x86) (< x241 2432105714) (= x14 x37) (= x89 (not (= x105 x182))) (= x114 x159) (> x160 0) (not (= x241 1889567281)) (= x257 x105) (= x182 x37) (= 0 x45) (= x160 (x278 (x260 x54))) (not (< x241 1809280292)) (= (x165 1461501637330902918203684832716283019655932542975 x286) x114) (>= x86 0) (<= x162 1461501637330902918203684832716283019655932542975) (= x259 x45) (= 1966461510 x241) (>= x162 0) (= x31 x115) (not (= x241 1809280292)) (>= 1461501637330902918203684832716283019655932542975 x31) (= x86 x253))))) x308)))
(check-sat)
(exit)