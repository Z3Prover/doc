(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x97 0)) (((x12 (x77 x97) (x109 Int)) (x68 (x76 x97) (x124 x97) (x122 Int)) (x22 (x88 Int)))))
(declare-fun x93 () Int)
(declare-fun x89 () Int)
(declare-fun x50 (Int) x97)
(declare-fun x95 () Int)
(declare-fun x47 () Int)
(declare-fun x133 () Int)
(declare-fun x129 () Int)
(declare-fun x94 (x97) Int)
(declare-fun x16 () Int)
(declare-fun x14 () Int)
(declare-fun x134 () Int)
(declare-fun x71 () Int)
(declare-fun x44 () Int)
(declare-fun x24 () Int)
(declare-fun x135 () Int)
(declare-fun x43 () Int)
(declare-fun x8 () Bool)
(declare-fun x118 () Bool)
(declare-fun x121 () Int)
(declare-fun x79 () Int)
(declare-fun x72 (Int Int) Int)
(declare-fun x48 () Int)
(declare-fun x66 () Int)
(declare-fun x13 () Int)
(declare-fun x125 () Bool)
(declare-fun x61 () Int)
(declare-fun x65 () Bool)
(declare-fun x18 () Int)
(declare-fun x26 () Bool)
(declare-fun x54 () Int)
(declare-fun x31 () Int)
(declare-fun x84 () Int)
(declare-fun x127 () Int)
(declare-fun x70 () Int)
(declare-fun x81 () Int)
(declare-fun x105 () Int)
(declare-fun x57 () Int)
(declare-fun x56 () Int)
(declare-fun x36 () Int)
(declare-fun x116 () Int)
(declare-fun x23 () Int)
(declare-fun x130 () Int)
(declare-fun x29 () Int)
(declare-fun x53 () Int)
(declare-fun x119 () Int)
(declare-fun x98 () Int)
(declare-fun x15 () Int)
(declare-fun x62 () Int)
(declare-fun x32 () Int)
(declare-fun x42 () Int)
(declare-fun x3 () Int)
(declare-fun x104 () Int)
(declare-fun x128 () Bool)
(declare-fun x126 () Int)
(declare-fun x101 (Int Int) Int)
(declare-fun x106 () Int)
(declare-fun x27 () Int)
(declare-fun x25 (Int Int) Int)
(declare-fun x123 () Int)
(declare-fun x90 () Int)
(declare-fun x20 () Int)
(declare-fun x99 () Int)
(declare-fun x59 () Int)
(declare-fun x74 () Int)
(declare-fun x38 () Int)
(declare-fun x11 () Bool)
(declare-fun x120 () Int)
(declare-fun x46 () Int)
(declare-fun x41 (x97) Int)
(declare-fun x80 () Int)
(declare-fun x37 () Int)
(declare-fun x96 () Int)
(declare-fun x49 (Int) Int)
(declare-fun x17 () Int)
(declare-fun x39 () Int)
(declare-fun x85 () Int)
(declare-fun x115 (x97) Int)
(declare-fun x6 () Int)
(declare-fun x83 () Int)
(declare-fun x73 () Int)
(declare-fun x114 (Int Int) Int)
(declare-fun x21 () Int)
(declare-fun x111 () Int)
(declare-fun x40 () Int)
(declare-fun x110 (Int) Int)
(declare-fun x35 () Int)
(declare-fun x9 () Int)
(declare-fun x45 () Int)
(declare-fun x87 () Int)
(declare-fun x10 () Int)
(declare-fun x86 () Bool)
(declare-fun x1 () Bool)
(declare-fun x113 () Int)
(declare-fun x64 () Int)
(declare-fun x75 () Int)
(define-fun x69 ((x97 x97) (x103 Int)) x97 (ite ((_ is x68) x97) (x68 (x76 x97) (x124 x97) (+ (x122 x97) x103)) (ite ((_ is x12) x97) (x12 (x77 x97) (+ x103 (x109 x97))) (x22 (+ (x88 x97) x103)))))
(define-fun x67 ((x52 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x52) (>= x52 0)) x52 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x34 ((x52 Int)) Int (ite (and (< x52 0) (>= x52 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) x52))
(define-fun x2 ((x92 Int)) Bool (and (<= 0 x92) (< x92 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x108 ((x92 Int)) Bool (and (= (x72 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92) x92) (= x92 (x72 x92 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x19 ((x92 Int)) Bool (and (= (x72 0 x92) 0) (= (x72 x92 0) 0)))
(define-fun x28 ((x92 Int)) Bool (= (x72 x92 x92) x92))
(define-fun x58 ((x92 Int)) Bool (and (x28 x92) (x108 x92) (x19 x92)))
(define-fun x51 ((x92 Int) (x100 Int)) Bool (= (x72 x100 x92) (x72 x92 x100)))
(define-fun x78 ((x92 Int) (x100 Int)) Bool (and (>= (x72 x92 x100) 0) (=> (>= x100 0) (<= (x72 x92 x100) x100)) (=> (<= 0 x92) (<= (x72 x92 x100) x92))))
(define-fun x102 ((x92 Int) (x100 Int)) Bool (and (x78 x92 x100) (x51 x92 x100)))
(define-fun x132 ((x92 Int)) Bool (and (= (x114 x92 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92)) (= (x114 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92))))
(define-fun x5 ((x92 Int)) Bool (and (= (x114 x92 0) x92) (= x92 (x114 0 x92))))
(define-fun x7 ((x92 Int)) Bool (= (x114 x92 x92) 0))
(define-fun x107 ((x92 Int)) Bool (and (x132 x92) (x7 x92) (x5 x92)))
(define-fun x55 ((x92 Int) (x100 Int)) Bool (= (x114 x92 x100) (x114 x100 x92)))
(define-fun x91 ((x92 Int) (x100 Int)) Bool (and (<= (x114 x92 x100) (+ x100 x92)) (>= (x114 x92 x100) 0)))
(define-fun x60 ((x92 Int) (x100 Int)) Bool (and (x91 x92 x100) (x55 x92 x100)))
(define-fun x82 ((x92 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x25 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x25 x92 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x33 ((x92 Int)) Bool (and (= x92 (x25 x92 0)) (= x92 (x25 0 x92))))
(define-fun x112 ((x92 Int)) Bool (= x92 (x25 x92 x92)))
(define-fun x63 ((x92 Int)) Bool (and (x33 x92) (x82 x92) (x112 x92)))
(define-fun x4 ((x92 Int) (x100 Int)) Bool (= (x25 x92 x100) (x25 x100 x92)))
(define-fun x117 ((x92 Int) (x100 Int)) Bool (and (=> (>= x92 0) (<= x92 (x25 x92 x100))) (=> (>= x100 0) (<= x100 (x25 x92 x100))) (>= (+ x92 x100) (x25 x92 x100))))
(define-fun x131 ((x92 Int) (x100 Int)) Bool (and (x4 x92 x100) (x117 x92 x100)))
(define-fun x30 ((x92 Int)) Bool (=> (and (not (= x92 1415856751)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92)) (not (= 1461501637330902918203684832716283019655932542975 x92)) (> x92 10000)) (not ((_ is x22) (x50 x92)))))
(assert (x2 x39))
(assert (= (or x125 x118) x128))
(assert (x2 x53))
(assert (x2 x129))
(assert (x2 x75))
(assert (x2 x10))
(assert (x2 x79))
(assert (x2 x127))
(assert (= x71 (x115 (x50 x71))))
(assert (x2 x90))
(assert (x2 x71))
(assert (x2 x104))
(assert (= (=> (and (and (= x10 x129) (= x87 x85) (= x35 x48) (= x44 x6) (= x43 x39) (= x11 (= x61 x23)) (= x16 (div x85 x6)) (= x61 x17) (= x134 x99) (= x53 x44) (= x35 x126) (= x43 x40) (= x98 x53) (= x99 x40) (= x31 x45) (= x105 x98) (= x45 x48) (= x10 x24) (= x23 x129) (= x87 (* x134 x31)) (= x46 x17) (= x16 x46)) (= x95 x24)) x11) x1))
(assert (x2 x95))
(assert (x2 x98))
(assert (= (x22 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x63 x14))
(assert (x2 x15))
(assert (x2 x48))
(assert (not x86))
(assert (=> (>= 10000 x71) (= (x22 x71) (x50 x71))))
(assert (x2 x40))
(assert (x2 x20))
(assert (x2 x54))
(assert (x60 x120 2))
(assert (x2 x14))
(assert (x2 x56))
(assert (x2 x62))
(assert (x2 x123))
(assert (= x65 true))
(assert (x2 x119))
(assert (x2 x35))
(assert (x2 x21))
(assert (x2 x113))
(assert (x2 x73))
(assert (= 1461501637330902918203684832716283019655932542975 (x115 (x22 1461501637330902918203684832716283019655932542975))))
(assert (x2 x9))
(assert (x2 x47))
(assert (x2 x57))
(assert (x2 x3))
(assert (x2 x36))
(assert (x2 x32))
(assert (x2 x84))
(assert (x2 x27))
(assert (x63 x62))
(assert (x2 x38))
(assert (= (x115 (x22 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x2 x80))
(assert (x2 x59))
(assert (x2 x42))
(assert (x2 x133))
(assert (x2 x93))
(assert (= x118 (and x65 (not x8))))
(assert (= (x50 1461501637330902918203684832716283019655932542975) (x22 1461501637330902918203684832716283019655932542975)))
(assert (x2 x43))
(assert (x2 x135))
(assert (= (=> (and (and (= x39 x84) (= x84 x133) (= x13 x130) (= x26 (> (x94 (x50 x71)) 0)) (= x75 (x94 (x50 x71))) (> x75 0) (= x93 (x41 (x50 x71))) (= x47 x135) (= x104 (mod (* x135 x84) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= 0 x93) (= x105 x18) x26 (= (mod (* x84 x135) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x113) (= x18 x130) (= x133 x73) (= (mod (- x9 (ite (< x113 x104) 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x81) (<= x71 1461501637330902918203684832716283019655932542975) (> x71 0) (= x9 (x34 (- x113 x104))) (= x135 x126) (= x47 x37) (= x8 (= 0 x81)) (= x106 1415856751)) (or (and (and (= x70 (x34 (- 0 x121))) (= x121 (x72 x18 x36)) (= x59 (mod (* (x25 x62 x14) x3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x70 x121) x64) (= (mod (* x57 x123) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x42) (= x36 (x67 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x130) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x120 (mod (* 3 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x20 (x34 (- 2 x119))) (> x130 x81) (= (x114 2 x120) x111) (= x56 (x67 (+ 1 x64))) (= x119 (mod (* x66 x111) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x38 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x79) (= (div x18 x121) x66) (= (div x21 x121) x62) (= x57 (mod (* x127 x54) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x59 x95) (= (x34 (- 2 x79)) x116) (= x123 (x34 (- 2 x29))) (= (mod (* x66 x127) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x27) (= x29 (mod (* x57 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x90 x42) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x38) (= x96 (mod (* x116 x38) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x3 (mod (* x96 x74) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x21 (x34 (- x104 x89))) (= x127 (mod (* x20 x111) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x84 x135) x18) x89) (= (x34 (- 2 x83)) x74) (= (mod (- x81 (ite (< x104 x89) 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x32) (= x54 (x34 (- 2 x27))) (= x80 (mod (* x42 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x32 x56) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x14) (= x90 (x34 (- 2 x80))) (= (mod (* x96 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x83)) (not x8)) (and x8 (and (= x15 (div x104 x18)) (= x95 x15) (> x130 0))))) x1) x86))
(assert (x2 x105))
(assert (= (and x8 x65) x125))
(assert (x2 x70))
(assert (x2 x64))
(assert (x2 x116))
(assert (x107 2))
(assert (x131 x62 x14))
(assert (x2 x130))
(assert (x2 x96))
(assert (x2 x106))
(assert (x107 x120))
(assert (x102 x18 x36))
(assert (x2 x24))
(assert (x2 x121))
(assert (x58 x36))
(assert (x2 x37))
(assert (x2 x13))
(assert (x2 x74))
(assert (= (x50 1415856751) (x22 1415856751)))
(assert (x2 x83))
(assert (x2 x111))
(assert (x2 x81))
(assert (x2 x89))
(assert (x2 x18))
(assert (x58 x18))
(assert (x2 x120))
(assert (x2 x29))
(assert (x2 x126))
(assert (= (x115 (x22 1415856751)) 1415856751))
(assert (x2 x66))
(assert (x30 x71))
(check-sat)
(exit)