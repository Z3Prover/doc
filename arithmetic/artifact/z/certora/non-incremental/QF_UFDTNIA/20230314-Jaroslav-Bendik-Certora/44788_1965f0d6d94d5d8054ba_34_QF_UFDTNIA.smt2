(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x225 0)) (((x41 (x106 x225) (x238 x225) (x14 Int)) (x182 (x90 x225) (x188 Int)) (x298 (x36 Int)))))
(declare-fun x226 () Int)
(declare-fun x276 () Int)
(declare-fun x4 () Int)
(declare-fun x269 (x225) Int)
(declare-fun x122 () Int)
(declare-fun x151 () Int)
(declare-fun x271 () Int)
(declare-fun x1 () Int)
(declare-fun x46 () Int)
(declare-fun x54 () Int)
(declare-fun x197 () Int)
(declare-fun x133 () x225)
(declare-fun x65 () Int)
(declare-fun x137 () Bool)
(declare-fun x272 () Int)
(declare-fun x297 () Int)
(declare-fun x42 () Int)
(declare-fun x260 () x225)
(declare-fun x92 () Int)
(declare-fun x263 () x225)
(declare-fun x84 (Int) Int)
(declare-fun x52 () Int)
(declare-fun x15 () Int)
(declare-fun x266 () Int)
(declare-fun x96 () x225)
(declare-fun x208 (Int Int) Int)
(declare-fun x146 () Int)
(declare-fun x18 () Bool)
(declare-fun x234 () Int)
(declare-fun x217 () Int)
(declare-fun x179 () Int)
(declare-fun x19 () x225)
(declare-fun x184 () Int)
(declare-fun x241 () Int)
(declare-fun x275 () Int)
(declare-fun x99 () Int)
(declare-fun x165 () Int)
(declare-fun x95 () Int)
(declare-fun x221 () Int)
(declare-fun x279 () Bool)
(declare-fun x205 () Bool)
(declare-fun x222 () Bool)
(declare-fun x49 () x225)
(declare-fun x194 () x225)
(declare-fun x140 () Bool)
(declare-fun x27 () Int)
(declare-fun x147 () Int)
(declare-fun x206 () x225)
(declare-fun x215 () Int)
(declare-fun x254 () Int)
(declare-fun x207 () Int)
(declare-fun x185 () x225)
(declare-fun x30 () Bool)
(declare-fun x153 () Int)
(declare-fun x80 () Bool)
(declare-fun x251 () Bool)
(declare-fun x264 () Int)
(declare-fun x131 () Int)
(declare-fun x220 () Int)
(declare-fun x159 () Int)
(declare-fun x6 () Int)
(declare-fun x152 () Bool)
(declare-fun x167 () x225)
(declare-fun x161 () Bool)
(declare-fun x259 () Int)
(declare-fun x232 () Int)
(declare-fun x177 () Int)
(declare-fun x175 () Bool)
(declare-fun x282 () Int)
(declare-fun x135 () Int)
(declare-fun x187 () Int)
(declare-fun x39 () Bool)
(declare-fun x143 () Int)
(declare-fun x283 (x225) Int)
(declare-fun x2 () Bool)
(declare-fun x126 () Int)
(declare-fun x158 () Bool)
(declare-fun x290 () Int)
(declare-fun x305 () Int)
(declare-fun x119 () Bool)
(declare-fun x73 () x225)
(declare-fun x178 () Int)
(declare-fun x9 () Int)
(declare-fun x97 () Bool)
(declare-fun x257 () Bool)
(declare-fun x237 () Int)
(declare-fun x196 () Int)
(declare-fun x168 () Int)
(declare-fun x280 (x225) Int)
(declare-fun x183 () Int)
(declare-fun x169 () Int)
(declare-fun x211 () Int)
(declare-fun x261 () Int)
(declare-fun x262 () Int)
(declare-fun x202 () Bool)
(declare-fun x123 () Int)
(declare-fun x132 () Int)
(declare-fun x160 () Bool)
(declare-fun x189 () Int)
(declare-fun x236 () Int)
(declare-fun x88 () Int)
(declare-fun x100 () Int)
(declare-fun x113 () Bool)
(declare-fun x307 () Int)
(declare-fun x203 (x225) Int)
(declare-fun x172 () Int)
(declare-fun x55 () Bool)
(declare-fun x58 () Bool)
(declare-fun x300 () Int)
(declare-fun x127 () Int)
(declare-fun x89 () x225)
(declare-fun x244 () Int)
(declare-fun x252 () Int)
(declare-fun x295 () x225)
(declare-fun x17 (Int Int) Int)
(declare-fun x210 () Int)
(declare-fun x243 () Bool)
(declare-fun x130 () Int)
(declare-fun x64 () Bool)
(declare-fun x242 () Int)
(declare-fun x86 () Bool)
(declare-fun x87 (x225) Int)
(declare-fun x136 () Int)
(declare-fun x81 () Int)
(declare-fun x246 () x225)
(declare-fun x204 () Bool)
(declare-fun x16 () Int)
(declare-fun x125 () Int)
(declare-fun x10 () Bool)
(declare-fun x292 () Int)
(declare-fun x294 () Int)
(declare-fun x31 () Int)
(declare-fun x191 () x225)
(declare-fun x218 () Int)
(declare-fun x296 () x225)
(declare-fun x112 () Int)
(declare-fun x284 () Bool)
(declare-fun x115 () Int)
(declare-fun x94 () Bool)
(declare-fun x219 () Int)
(declare-fun x13 () Int)
(declare-fun x166 (x225) Int)
(declare-fun x199 () Int)
(declare-fun x304 () Int)
(declare-fun x302 () Int)
(declare-fun x170 () Int)
(declare-fun x289 () Bool)
(declare-fun x193 () Int)
(declare-fun x224 () Int)
(declare-fun x267 () Int)
(declare-fun x144 () Bool)
(declare-fun x250 () Int)
(declare-fun x91 () Int)
(declare-fun x145 () Bool)
(declare-fun x150 () Bool)
(declare-fun x53 () Int)
(declare-fun x216 () Bool)
(declare-fun x3 () Int)
(declare-fun x163 () Int)
(declare-fun x114 () Bool)
(declare-fun x240 () Bool)
(declare-fun x85 () Int)
(declare-fun x162 () Bool)
(declare-fun x61 () Int)
(declare-fun x249 () Bool)
(declare-fun x157 () Int)
(declare-fun x180 () Int)
(declare-fun x148 () Int)
(declare-fun x200 () Int)
(declare-fun x108 () Int)
(declare-fun x29 () Bool)
(declare-fun x7 () Int)
(declare-fun x142 () Int)
(declare-fun x33 () Int)
(declare-fun x247 () Int)
(declare-fun x110 () Int)
(declare-fun x229 () Int)
(declare-fun x26 () Int)
(declare-fun x70 () Int)
(declare-fun x213 () Int)
(declare-fun x201 () Int)
(declare-fun x59 () Int)
(declare-fun x293 () Int)
(declare-fun x303 () Bool)
(declare-fun x288 () Bool)
(declare-fun x255 (x225) Int)
(declare-fun x5 () Int)
(declare-fun x35 () Bool)
(declare-fun x171 () Int)
(declare-fun x278 () Int)
(declare-fun x21 () Int)
(declare-fun x190 () Int)
(declare-fun x44 () Bool)
(declare-fun x68 (Int) Int)
(declare-fun x231 () Int)
(declare-fun x116 () Int)
(declare-fun x274 () Int)
(declare-fun x24 (Int) x225)
(declare-fun x155 () Int)
(declare-fun x138 () Int)
(declare-fun x128 () Int)
(declare-fun x176 () Int)
(declare-fun x154 (x225) Int)
(declare-fun x299 (Int) Int)
(declare-fun x227 () x225)
(declare-fun x38 () Int)
(declare-fun x75 () Int)
(declare-fun x181 () Int)
(declare-fun x37 () Int)
(declare-fun x192 () Int)
(declare-fun x43 () Int)
(declare-fun x268 () x225)
(declare-fun x67 () Int)
(declare-fun x286 () x225)
(declare-fun x78 () Int)
(declare-fun x156 () Int)
(declare-fun x301 () Int)
(declare-fun x223 () x225)
(declare-fun x212 () Int)
(declare-fun x174 () Int)
(declare-fun x235 () Int)
(declare-fun x25 () Int)
(declare-fun x93 () Int)
(declare-fun x256 () Int)
(declare-fun x258 () Bool)
(declare-fun x47 () Int)
(declare-fun x50 () Int)
(declare-fun x291 () Int)
(declare-fun x76 () Int)
(declare-fun x273 () Int)
(declare-fun x71 () Int)
(declare-fun x109 () Int)
(declare-fun x98 () Bool)
(declare-fun x62 () Int)
(declare-fun x8 () x225)
(declare-fun x74 () Int)
(declare-fun x105 () Int)
(declare-fun x28 () Int)
(declare-fun x66 () Int)
(declare-fun x82 () Bool)
(declare-fun x51 () Int)
(declare-fun x104 () x225)
(declare-fun x45 () Bool)
(declare-fun x12 (x225) Int)
(declare-fun x214 () Int)
(declare-fun x239 () Int)
(declare-fun x277 () Int)
(declare-fun x103 () Bool)
(declare-fun x134 () Int)
(declare-fun x287 (x225) Int)
(declare-fun x198 (x225) Int)
(declare-fun x79 () Int)
(declare-fun x164 () Int)
(declare-fun x118 () Int)
(declare-fun x233 (x225) Int)
(declare-fun x209 () Int)
(declare-fun x101 () Bool)
(declare-fun x57 () Int)
(declare-fun x63 () Int)
(declare-fun x139 () Bool)
(declare-fun x83 () Int)
(declare-fun x11 () Bool)
(declare-fun x149 () Int)
(declare-fun x69 () Int)
(declare-fun x60 () Bool)
(declare-fun x32 () Int)
(declare-fun x77 (Int Int) Int)
(declare-fun x141 (x225) Int)
(declare-fun x195 () Int)
(declare-fun x306 () Int)
(declare-fun x186 () Bool)
(declare-fun x102 () Int)
(define-fun x121 ((x225 x225) (x285 Int)) x225 (ite ((_ is x182) x225) (x182 (x90 x225) (+ (x188 x225) x285)) (ite ((_ is x41) x225) (x41 (x106 x225) (x238 x225) (+ x285 (x14 x225))) (x298 (+ (x36 x225) x285)))))
(define-fun x111 ((x40 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x40) (>= x40 0)) x40 (- x40 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x124 ((x40 Int)) Int (ite (and (< x40 0) (>= x40 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x40 115792089237316195423570985008687907853269984665640564039457584007913129639936) x40))
(define-fun x72 ((x56 Int)) Bool (and (<= 0 x56) (< x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x23 ((x56 Int)) Bool (and (= (x208 115792089237316195423570985008687907853269984665640564039457584007913129639935 x56) x56) (= x56 (x208 x56 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x265 ((x56 Int)) Bool (and (= (x208 0 x56) 0) (= (x208 x56 0) 0)))
(define-fun x120 ((x56 Int)) Bool (= (x208 x56 x56) x56))
(define-fun x129 ((x56 Int)) Bool (and (x120 x56) (x23 x56) (x265 x56)))
(define-fun x22 ((x56 Int) (x245 Int)) Bool (= (x208 x245 x56) (x208 x56 x245)))
(define-fun x117 ((x56 Int) (x245 Int)) Bool (and (>= (x208 x56 x245) 0) (=> (>= x245 0) (<= (x208 x56 x245) x245)) (=> (<= 0 x56) (<= (x208 x56 x245) x56))))
(define-fun x270 ((x56 Int) (x245 Int)) Bool (and (x117 x56 x245) (x22 x56 x245)))
(define-fun x248 ((x56 Int)) Bool (and (= (x77 115792089237316195423570985008687907853269984665640564039457584007913129639935 x56) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x77 x56 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x228 ((x56 Int)) Bool (and (= (x77 0 x56) x56) (= (x77 x56 0) x56)))
(define-fun x48 ((x56 Int)) Bool (= (x77 x56 x56) x56))
(define-fun x281 ((x56 Int)) Bool (and (x248 x56) (x228 x56) (x48 x56)))
(define-fun x107 ((x56 Int) (x245 Int)) Bool (= (x77 x245 x56) (x77 x56 x245)))
(define-fun x230 ((x56 Int) (x245 Int)) Bool (and (=> (>= x245 0) (>= (x77 x56 x245) x245)) (<= (x77 x56 x245) (+ x245 x56)) (=> (<= 0 x56) (>= (x77 x56 x245) x56))))
(define-fun x253 ((x56 Int) (x245 Int)) Bool (and (x230 x56 x245) (x107 x56 x245)))
(define-fun x173 ((x56 Int)) Bool (= (mod x56 1461501637330902918203684832716283019655932542976) (x208 x56 1461501637330902918203684832716283019655932542975)))
(define-fun x34 ((x56 Int)) Bool (and (x270 x56 1461501637330902918203684832716283019655932542975) (x173 x56)))
(define-fun x20 ((x56 Int)) Bool (=> (and (not (= 2094874590 x56)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x56)) (not (= 699302164 x56)) (not (= 1710941022 x56)) (not (= 1161348331 x56)) (not (= x56 231365057)) (> x56 10000) (not (= x56 1763987465)) (not (= x56 1980270339)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x56)) (not (= x56 761373525)) (not (= x56 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (not (= x56 1814410054)) (not (= 1461501637330902918203684832716283019655932542975 x56))) (not ((_ is x298) (x24 x56)))))
(assert (x34 x212))
(assert (x129 x164))
(assert (x72 x51))
(assert (x72 x52))
(assert (x72 x209))
(assert (x72 x307))
(assert (x253 x16 x138))
(assert (x72 x135))
(assert (x72 x122))
(assert (x72 x259))
(assert (x72 x27))
(assert (x270 x189 x247))
(assert (x34 x290))
(assert (x129 x210))
(assert (x72 x146))
(assert (x72 x21))
(assert (x72 x165))
(assert (x281 x95))
(assert (x72 x32))
(assert (x72 x207))
(assert (x72 x199))
(assert (x129 x221))
(assert (x72 x132))
(assert (x129 x143))
(assert (x72 x174))
(assert (x72 x28))
(assert (x72 x53))
(assert (x129 x277))
(assert (x72 x180))
(assert (x72 x85))
(assert (x72 x43))
(assert (x72 x256))
(assert (x72 x264))
(assert (x72 x277))
(assert (x72 x91))
(assert (x72 x267))
(assert (x72 x130))
(assert (x72 x218))
(assert (x72 x184))
(assert (x72 x276))
(assert (= (x233 (x298 699302164)) 699302164))
(assert (x72 x271))
(assert (x72 x244))
(assert (x72 x306))
(assert (x129 x224))
(assert (x72 x83))
(assert (x72 x6))
(assert (x72 x70))
(assert (x20 x151))
(assert (= (x24 699302164) (x298 699302164)))
(assert (x72 x138))
(assert (x72 x305))
(assert (x72 x99))
(assert (x72 x59))
(assert (x281 x65))
(assert (x72 x131))
(assert (x270 x63 x88))
(assert (x72 x92))
(assert (x72 x156))
(assert (x72 x74))
(assert (x72 x226))
(assert (=> (>= 10000 x252) (= (x24 x252) (x298 x252))))
(assert (= x214 (x233 (x24 x214))))
(assert (x72 x176))
(assert (x129 x212))
(assert (x20 x118))
(assert (= (x298 1763987465) (x24 1763987465)))
(assert (x72 x112))
(assert (x72 x5))
(assert (x72 x69))
(assert (= (x24 231365057) (x298 231365057)))
(assert (x72 x181))
(assert (x72 x57))
(assert (= (x298 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x24 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x72 x47))
(assert (x72 x63))
(assert (x72 x108))
(assert (x72 x197))
(assert (x129 x13))
(assert (x129 x136))
(assert (x72 x149))
(assert (x270 x224 x221))
(assert (x72 x13))
(assert (x72 x242))
(assert (x72 x126))
(assert (x270 x174 x164))
(assert (x72 x37))
(assert (= x135 (x233 (x24 x135))))
(assert (x72 x274))
(assert (= (+ 1 (x233 x295)) (x233 (x121 x295 1))))
(assert (x72 x25))
(assert (x72 x1))
(assert (x20 x135))
(assert (x72 x61))
(assert (x72 x164))
(assert (x72 x155))
(assert (x20 x293))
(assert (x253 x168 x85))
(assert (x20 x37))
(assert (x72 x136))
(assert (x72 x210))
(assert (x72 x151))
(assert (= (x233 (x121 x19 2)) (+ (x233 x19) 2)))
(assert (x129 x305))
(assert (= 1980270339 (x233 (x298 1980270339))))
(assert (x72 x127))
(assert (x20 x212))
(assert (= (=> (and (and (and (and (= x273 x146) (< 0 x100) (= (or (and (< x234 0) (= true (<= x234 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234)) x240) (< 0 x33) x222 (= x237 x277) (<= 0 x105) (= (x208 x264 x142) x63) (= x35 (and (= true (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 0 x199))) (= (div 57896044618658097711785492504343953926634992332820282019728792003956564819967 x232) x272) (not (= x261 1710941022)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x91) x279 (= x25 x38) (= (and (> x234 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234))) x80) (<= x190 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x78 0) (= (x208 1461501637330902918203684832716283019655932542975 x212) x214) (= (and (< 0 x234) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234) true)) x161) (< (* x196 x256) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x178 (- x9 x177)) (= x37 x306) (= x259 0) (= x235 (x208 1461501637330902918203684832716283019655932542975 x277)) (>= x190 0) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x116) (and (> 0 x116) (= true (<= x116 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x119) (= 231365057 x207) (= x174 (ite (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196)) (< x196 0)) (> x196 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 1 0)) (= x190 x5) (= x104 (x121 x206 1)) (= x164 (ite (or (> x199 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199)) (> 0 x199))) 1 0)) (= x157 (x68 x131)) (= x282 x79) (= x158 (= x122 x46)) (= x221 (ite (> x196 x272) 1 0)) (= (x41 (x24 x214) (x298 1) 0) x268) (= x222 (= x62 x178)) (>= x250 0) (ite x145 x145 (not (> x31 x256))) (< 0 x215) (= x300 (x154 x296)) (not (= 1763987465 x261)) (<= 0 x66) (= x258 (= x91 1)) (= x70 x290) (= (ite (or (and (> x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x42 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x42 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196)) (> x42 x196))) 1 0) x183) (= (ite x186 1 0) x61) (= x210 (ite (not x39) 1 0)) (= x187 (x208 x170 x54)) (= (x111 (+ x31 x232)) x256) (>= x297 0) (= (= x79 x220) x113) (= x26 x276) (ite x162 x162 (not (< x99 x209))) (= x67 x47) (= x13 (ite (and (< 0 x196) (= (<= x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) 1 0)) (= x137 (not x140)) (= x301 x226) (= x181 x37) (= x122 (x208 1461501637330902918203684832716283019655932542975 x290)) (= x52 (ite (not x175) 1 0)) (>= x147 0) (= x44 (> x146 x74)) (= x145 (not x30)) (= x282 (x269 x223)) (= x223 (x41 (x24 x37) (x298 2) 0)) (= x98 (or (and (= true (<= x234 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x234)) (> x234 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x275 x241) (= x232 x199) (= (x121 x133 4) x89) (= (x121 x19 2) x227) (= x211 (x208 1461501637330902918203684832716283019655932542975 x290)) (= (and (> x199 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) true)) x202) (= x37 x3) (= (+ x92 x195) x9) (<= x147 1461501637330902918203684832716283019655932542975) (ite x101 x101 (not (< x67 x282))) (= x288 (= x46 x51)) (= x175 (> x241 x21)) (= (x41 (x24 x212) x8 0) x206) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x66) (= x66 (x198 x89)) (= x46 x250) (= 1980270339 x261) (>= x155 0) (= x263 (x41 (x24 x252) (x298 1) 0)) (= x196 x123) (ite x160 x160 (not (> x201 x130))) (= (x68 x181) x43) (= (x203 x96) x105) (= (ite (or (and (= (<= x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x171)) (< x196 x171)) (and (> x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x171 57896044618658097711785492504343953926634992332820282019728792003956564819967))) 1 0) x54) (= x290 x274) (= (x208 1461501637330902918203684832716283019655932542975 x212) x51) (= x277 x93) (= x59 (ite x257 1 0)) (<= x212 1461501637330902918203684832716283019655932542975) (= x114 (or (and (> 0 x125) (= true (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x125 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (= 1 x81) x86) (= x99 (x280 x206)) (>= x31 0) (= (ite (or x186 x258) 1 0) x85) (= x190 (x269 x194)) (= (x111 (+ x232 x282)) x67) (>= x300 0) (> 2094874590 x207) (= (ite (not x18) 1 0) x4) (= (x77 x168 x85) x169) (= x73 (x41 (x24 x37) (x298 2) 0)) (= x92 x301) (= x45 (not (< x241 x66))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x300) (= x278 x37) (= (> x201 x291) x152) (<= x196 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x296 (x41 (x24 x293) (x298 5) 0)) (<= x290 1461501637330902918203684832716283019655932542975) (= (ite x150 1 0) x304) (= (x77 x16 x138) x100) (= x144 (not x29)) (= x232 x219) (= x153 x37) (>= x291 0) (= (ite (not x152) 1 0) x28) (= x125 (mod (* x196 x232) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x77 x4 x95) x102) (= x231 x116) (= (ite (not x44) 1 0) x163) (= x53 (x208 x224 x221)) (= x185 (x41 (x24 x46) x49 0)) (= (x111 (+ x125 x300)) x236) (= x292 (x208 x189 x247)) (= x95 (x208 x163 x28)) (> 699302164 x207) (= (x12 x104) x31) (= (x41 (x24 x37) (x298 2) 0) x295) (<= x282 115792089237316195423570985008687907853269984665640564039457584007913129639935) (ite x97 x97 (not (< x282 x67))) (= (x124 (- x105 x116)) x179) (= x33 (x287 (x24 x118))) (= (x41 (x24 x46) x263 0) x167) (= x37 x69) (= (x141 x260) x196) (= x126 (x208 x63 x88)) (= (= 0 x256) x257) (= (x87 x167) x242) (ite x2 x2 (not (< x236 x300))) (>= x81 0) (= x81 (x87 x246)) (= (= x159 x7) x60) (<= x155 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x297 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x208 1461501637330902918203684832716283019655932542975 x277) x32) (ite x137 x137 (not (< x31 x256))) (= (not x80) x303) (<= x74 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x255 x227) x239) (<= 0 x130) (= (or (and (= true (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x199)) (> x199 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x140) (ite x216 x216 (not (> x105 x179))) (not (< x148 4)) (= (x208 x108 x136) x305) (= (x77 x292 x65) x78) (= x244 x297) (= (not x55) x97) (= (x208 1461501637330902918203684832716283019655932542975 x212) x83) x113 (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234) true) (< x234 0))) x39) (= x42 (ite (= 0 x199) 0 (ite (= false (< x199 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x199) x199 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x124 (- x199 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x199 57896044618658097711785492504343953926634992332820282019728792003956564819968) x199 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x124 (- x199 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x111 (+ x130 x125)) x201) (= x172 (ite (and (> x199 0) (= true (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967))) 1 0)) (= x101 (not x35)) (= x162 (not x119)) (= 0 x126) (= (ite (= 0 x196) 0 (ite (= false (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x196)) (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x196) x196 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x124 (- x196 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x196 57896044618658097711785492504343953926634992332820282019728792003956564819968) x196 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x124 (- x196 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x127) (ite x144 x144 (not (< x201 x130))) (= (x111 (+ x125 x130)) x297) (<= 0 x267) (= x29 (and (= true (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 0 x125))) (= x160 (not x114)) (>= 1461501637330902918203684832716283019655932542975 x277) (= (ite (and (= (<= x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x196 0)) 1 0) x264) (= x168 (ite (not x205) 1 0)) (= x136 (ite (and (> x199 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) true)) 1 0)) (= x62 x271) (ite x303 x303 (not (> x99 x209))) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) true) (> 0 x199)) (> x199 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x55) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81) (= x224 (x208 x13 x172)) (= x218 (ite x158 1 0)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x148) true) (< 195 x148)) (= x16 (ite (not x139) 1 0)) (< 0 x1) (= (x208 1461501637330902918203684832716283019655932542975 x277) x151) (= x96 (x41 (x24 x135) x286 0)) (<= 0 x282) (= (x208 1461501637330902918203684832716283019655932542975 x290) x293) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149) true) (< x149 192)) (> x149 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x138 (ite (or x150 x158) 1 0)) (= x276 0) (= (x283 x191) x74) (= (x41 (x24 x37) (x298 4) 0) x286) (> x169 0) (= (x208 1461501637330902918203684832716283019655932542975 x277) x135) (>= x99 0) (ite x64 x64 (not (> x236 x300))) (= (not x161) x82) (= x176 x67) (= (ite (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) (and (< x199 0) (= true (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) 1 0) x142) (= (x41 (x24 x37) (x298 2) 0) x133) (<= x242 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x239 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x208 x174 x164) x170) (= x115 x21) (> x102 0) (= x194 (x41 (x24 x37) (x298 2) 0)) (= (* x239 x209) x115) x60 (< (* x239 x209) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x273 (* x196 x67)) (= (* x196 x256) x275) (= x25 x147) (= (ite (not x202) 1 0) x189) (= x116 x234) (= (x68 x69) x294) (= x91 (x87 x185)) (<= 0 x74) (= x262 x212) (<= x291 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite x86 1 0) x128) (not (= x261 1814410054)) (= x49 (x41 (x24 x151) (x298 1) 0)) (= x220 (x299 x278)) (= x65 (ite (or x86 x288) 1 0)) (= x8 (x41 (x24 x37) (x298 3) 0)) (= (x208 x143 x210) x254) (= (x124 (- x148 4)) x149) (= x134 x212) (< (* x196 x67) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x215 (x287 (x24 x118))) (= x187 0) (= x108 (ite (or (> x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196)) (< x196 0))) 1 0)) (= (+ x110 x226) x159) (not (< x261 1710941022)) (= (ite x288 1 0) x109) (<= x105 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x195 (* x294 x176)) (= (and (< 0 x199) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) true)) x58) (= (= x242 1) x150) (= (not x240) x216) (> 1161348331 x207) (not (or (> x196 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x196 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x196))))) (= x212 x132) (= (and (< 0 x125) (= true (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x289) (= 1 x155) (= (ite (= x199 0) 0 (ite (= true (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x199)) (div 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x199) x199 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x124 (- x199 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (mod (- (div 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (< x199 57896044618658097711785492504343953926634992332820282019728792003956564819968) x199 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x124 (- x199 1))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x171) (= x247 (ite (not x98) 1 0)) (= x88 (ite (or (and (> x127 x199) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x127) (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (<= x127 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199))) 1 0)) (= (x77 x254 x52) x165) (>= 1461501637330902918203684832716283019655932542975 x267) (= x64 (not x204)) (<= 0 x91) (< 0 x165) (= x246 (x41 (x24 x46) x268 0)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125) (and (> 0 x125) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125)))) x204) (not (= 0 x196)) (= (* x43 x5) x177) (>= x196 0) (<= 0 x242) (= (and (< 0 x199) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199))) x18) (<= x31 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x205 (and (< 0 x234) (= (<= x234 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x199) true) (> 0 x199))) x139) (ite x82 x82 (not (> x179 x105))) (= x302 (ite x258 1 0)) (= (= x235 x46) x186) (= (x208 1461501637330902918203684832716283019655932542975 x290) x252) (= x131 x3) (<= 0 x239) (= (x208 x305 x183) x259) (< x261 2094874590) (= x71 (ite x45 1 0)) (= (= x157 x123) x279) (= x260 (x121 x295 1)) (= x53 0) (<= x99 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x41 (x24 x37) (x298 2) 0) x19) (= x209 (x111 (+ x99 x231))) (>= 1461501637330902918203684832716283019655932542975 x250) (= x1 (ite (or x257 x45) 1 0)) (= (not x289) x2) (= (ite (not x58) 1 0) x143) (<= x130 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x261 1161348331)) (= x50 x110) (= (and (= (<= x199 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 0 x199)) x30) (= (x121 x73 3) x191)) (and (and (= (x287 (x24 x118)) x213) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x193) (not (< x180 699302164)) (> x213 0) (= x180 761373525) (= x193 x229) (not (= x180 699302164)) (= x244 x200) (> 2094874590 x180) (<= 0 x193) (< x180 1161348331)) (and (= x271 x6) (= x184 x229) (= x15 (+ x184 x6)) (= (= x15 x200) x249)))) (and (= 761373525 x27) (not (= x27 699302164)) (< x27 1161348331) (<= 0 x193) (< x27 2094874590) (<= x193 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x75) (= x193 x50) (= (x287 (x24 x118)) x75) (not (> 699302164 x27)) (= x7 x307))) (and (<= x118 1461501637330902918203684832716283019655932542975) (= x46 x192) (= x156 6) (= false x251) (<= x197 1461501637330902918203684832716283019655932542975) (>= x130 0) (>= 1461501637330902918203684832716283019655932542975 x192) (= x57 1980270339) (= x112 231365057) (= x130 x307) (= (> (x287 (x24 x118)) 0) x94) (= x217 x197) (< 0 x76) (> 699302164 x112) (> x118 0) (< x112 2094874590) (= x76 (x287 (x24 x118))) (< x112 1161348331) (= x103 false) (= false x284) x94 (<= 0 x197) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x130) (= (x166 (x24 x118)) x266) (>= x266 0) (= x11 false) (<= 0 x192))) x249) x243))
(assert (x72 x217))
(assert (x72 x232))
(assert (x72 x219))
(assert (x270 x163 x28))
(assert (x72 x172))
(assert (= 1763987465 (x233 (x298 1763987465))))
(assert (x72 x231))
(assert (= (x233 (x24 x118)) x118))
(assert (x72 x54))
(assert (x72 x212))
(assert (= true x10))
(assert (x129 1461501637330902918203684832716283019655932542975))
(assert (x72 x190))
(assert (x72 x179))
(assert (=> (>= 10000 x135) (= (x298 x135) (x24 x135))))
(assert (x72 x300))
(assert (x72 x116))
(assert (= 1814410054 (x233 (x298 1814410054))))
(assert (= (x24 1710941022) (x298 1710941022)))
(assert (x72 x102))
(assert (x72 x236))
(assert (= 1161348331 (x233 (x298 1161348331))))
(assert (x72 x16))
(assert (x72 x250))
(assert (x72 x31))
(assert (x129 x63))
(assert (x72 x214))
(assert (x129 x142))
(assert (x72 x237))
(assert (x72 x293))
(assert (x72 x46))
(assert (x129 x189))
(assert (x72 x109))
(assert (x72 x224))
(assert (x72 x247))
(assert (x270 x264 x142))
(assert (= (x233 (x121 x206 1)) (+ (x233 x206) 1)))
(assert (x72 x294))
(assert (x20 x46))
(assert (x72 x297))
(assert (= (x233 (x298 761373525)) 761373525))
(assert (x72 x105))
(assert (x270 x305 x183))
(assert (x72 x100))
(assert (x72 x262))
(assert (x129 x172))
(assert (= 1461501637330902918203684832716283019655932542975 (x233 (x298 1461501637330902918203684832716283019655932542975))))
(assert (x72 x304))
(assert (x72 x189))
(assert (x72 x118))
(assert (x72 x78))
(assert (x129 x88))
(assert (x72 x215))
(assert (x281 x292))
(assert (= (x298 761373525) (x24 761373525)))
(assert (x72 x272))
(assert (x72 x201))
(assert (= (x24 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x298 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (= (x233 (x24 x293)) x293))
(assert (x72 x292))
(assert (x72 x33))
(assert (x72 x301))
(assert (x72 x168))
(assert (x270 x170 x54))
(assert (x253 x4 x95))
(assert (= (x24 1461501637330902918203684832716283019655932542975) (x298 1461501637330902918203684832716283019655932542975)))
(assert (x72 x125))
(assert (x72 x93))
(assert (x72 x235))
(assert (=> (>= 10000 x214) (= (x24 x214) (x298 x214))))
(assert (x72 x128))
(assert (x72 x234))
(assert (x72 x95))
(assert (=> (<= x212 10000) (= (x298 x212) (x24 x212))))
(assert (x281 x254))
(assert (=> (<= x118 10000) (= (x298 x118) (x24 x118))))
(assert (x129 x108))
(assert (x72 x187))
(assert (= (x298 1161348331) (x24 1161348331)))
(assert (x20 x214))
(assert (x129 x28))
(assert (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x233 (x298 57896044618658097711785492504343953926634992332820282019728792003956564819968))))
(assert (x281 x52))
(assert (x72 x163))
(assert (= x151 (x233 (x24 x151))))
(assert (x270 x13 x172))
(assert (x72 x71))
(assert (x72 x62))
(assert (x72 x254))
(assert (x72 x81))
(assert (x34 x277))
(assert (x72 x67))
(assert (x72 x3))
(assert (x72 x278))
(assert (=> (<= x46 10000) (= (x298 x46) (x24 x46))))
(assert (x281 x85))
(assert (= (+ 4 (x233 x133)) (x233 (x121 x133 4))))
(assert (x129 x264))
(assert (x72 x229))
(assert (x72 x196))
(assert (= (x233 (x298 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x72 x38))
(assert (x72 x157))
(assert (x129 x54))
(assert (x72 x4))
(assert (=> (<= x151 10000) (= (x24 x151) (x298 x151))))
(assert (x72 x193))
(assert (x72 x153))
(assert (x72 x147))
(assert (x72 x261))
(assert (x72 x123))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x233 (x298 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x72 x213))
(assert (x129 x183))
(assert (= 2094874590 (x233 (x298 2094874590))))
(assert (x281 x138))
(assert (= (x233 (x24 x252)) x252))
(assert (x72 x76))
(assert (x72 x211))
(assert (x72 x170))
(assert (x281 x168))
(assert (not x243))
(assert (x72 x171))
(assert (x72 x134))
(assert (x72 x290))
(assert (x72 x241))
(assert (x72 x142))
(assert (x129 x290))
(assert (x281 x4))
(assert (x72 x26))
(assert (x72 x302))
(assert (x281 x16))
(assert (= x46 (x233 (x24 x46))))
(assert (= (x298 1980270339) (x24 1980270339)))
(assert (x253 x254 x52))
(assert (x72 x88))
(assert (x72 x221))
(assert (x72 x266))
(assert (x72 x148))
(assert (x72 x169))
(assert (x253 x292 x65))
(assert (x129 x163))
(assert (= x212 (x233 (x24 x212))))
(assert (= (x298 2094874590) (x24 2094874590)))
(assert (x72 x183))
(assert (= (+ (x233 x73) 3) (x233 (x121 x73 3))))
(assert (x72 x282))
(assert (= (x24 1814410054) (x298 1814410054)))
(assert (x72 x79))
(assert (x72 x143))
(assert (x72 x42))
(assert (x72 x239))
(assert (=> (>= 10000 x37) (= (x24 x37) (x298 x37))))
(assert (x72 x65))
(assert (x72 x110))
(assert (= 231365057 (x233 (x298 231365057))))
(assert (x72 x66))
(assert (x72 x252))
(assert (x129 x174))
(assert (x72 x192))
(assert (x72 x75))
(assert (=> (<= x293 10000) (= (x24 x293) (x298 x293))))
(assert (x270 x108 x136))
(assert (x20 x252))
(assert (x72 x291))
(assert (= 1710941022 (x233 (x298 1710941022))))
(assert (x72 x220))
(assert (= (x298 57896044618658097711785492504343953926634992332820282019728792003956564819967) (x24 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= (x233 (x24 x37)) x37))
(assert (x129 x247))
(assert (x72 x50))
(assert (x129 x170))
(assert (x270 x143 x210))
(check-sat)
(exit)