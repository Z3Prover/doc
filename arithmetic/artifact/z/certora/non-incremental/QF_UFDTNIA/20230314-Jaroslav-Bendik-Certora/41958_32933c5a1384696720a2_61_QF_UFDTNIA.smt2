(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x90 0)) (((x353 (x168 Int)) (x574 (x52 x90) (x303 x90) (x116 Int)) (x24 (x142 x90) (x415 Int)))))
(declare-fun x291 () Bool)
(declare-fun x350 () Int)
(declare-fun x339 () Bool)
(declare-fun x331 () Bool)
(declare-fun x419 () Bool)
(declare-fun x314 () Bool)
(declare-fun x12 () Bool)
(declare-fun x471 () Int)
(declare-fun x295 () Int)
(declare-fun x327 () Bool)
(declare-fun x292 () Int)
(declare-fun x503 () Int)
(declare-fun x227 () Int)
(declare-fun x391 () Int)
(declare-fun x92 () Bool)
(declare-fun x379 () Int)
(declare-fun x333 () Bool)
(declare-fun x434 () Int)
(declare-fun x519 () Int)
(declare-fun x177 () Bool)
(declare-fun x70 () Bool)
(declare-fun x401 () Bool)
(declare-fun x205 () Int)
(declare-fun x80 () Bool)
(declare-fun x11 () Bool)
(declare-fun x14 () Int)
(declare-fun x275 () Bool)
(declare-fun x311 () Int)
(declare-fun x164 () Int)
(declare-fun x313 () Bool)
(declare-fun x42 () Bool)
(declare-fun x562 () Bool)
(declare-fun x266 () Bool)
(declare-fun x355 () Int)
(declare-fun x452 () Int)
(declare-fun x237 () Bool)
(declare-fun x134 () Bool)
(declare-fun x509 () Int)
(declare-fun x79 () Bool)
(declare-fun x529 () Bool)
(declare-fun x425 () Bool)
(declare-fun x535 () Bool)
(declare-fun x586 () Bool)
(declare-fun x9 () Int)
(declare-fun x424 () Int)
(declare-fun x317 () Int)
(declare-fun x211 () Int)
(declare-fun x146 () Int)
(declare-fun x60 () Bool)
(declare-fun x162 () Bool)
(declare-fun x501 () Bool)
(declare-fun x272 () Int)
(declare-fun x308 () Int)
(declare-fun x64 () Bool)
(declare-fun x260 () Bool)
(declare-fun x263 () Bool)
(declare-fun x230 () Bool)
(declare-fun x202 () Int)
(declare-fun x359 () Int)
(declare-fun x369 () Bool)
(declare-fun x154 () Bool)
(declare-fun x50 () Bool)
(declare-fun x165 () Bool)
(declare-fun x225 () Bool)
(declare-fun x381 () Bool)
(declare-fun x549 () Bool)
(declare-fun x564 () Bool)
(declare-fun x258 () Bool)
(declare-fun x554 () Int)
(declare-fun x418 () Bool)
(declare-fun x546 () Bool)
(declare-fun x196 () Int)
(declare-fun x191 () Bool)
(declare-fun x451 () Bool)
(declare-fun x271 () Int)
(declare-fun x394 () Bool)
(declare-fun x362 () Bool)
(declare-fun x482 () Bool)
(declare-fun x417 () Bool)
(declare-fun x132 () Int)
(declare-fun x324 () Bool)
(declare-fun x323 () Bool)
(declare-fun x435 () Int)
(declare-fun x19 () Int)
(declare-fun x46 () Bool)
(declare-fun x426 () Int)
(declare-fun x114 () Bool)
(declare-fun x443 () Bool)
(declare-fun x286 () Bool)
(declare-fun x99 () Int)
(declare-fun x584 () Int)
(declare-fun x178 () Int)
(declare-fun x289 () Bool)
(declare-fun x93 () Int)
(declare-fun x368 () Int)
(declare-fun x351 () Int)
(declare-fun x402 () Int)
(declare-fun x484 () Bool)
(declare-fun x463 () Bool)
(declare-fun x127 () Int)
(declare-fun x298 () Bool)
(declare-fun x466 () Int)
(declare-fun x170 () Int)
(declare-fun x89 () Bool)
(declare-fun x210 () Bool)
(declare-fun x430 () Bool)
(declare-fun x62 () Bool)
(declare-fun x370 () Bool)
(declare-fun x245 () Int)
(declare-fun x218 () Bool)
(declare-fun x39 () Int)
(declare-fun x483 () Bool)
(declare-fun x20 () Bool)
(declare-fun x220 () Bool)
(declare-fun x251 () Int)
(declare-fun x10 () Int)
(declare-fun x358 () Bool)
(declare-fun x524 () Bool)
(declare-fun x572 () Bool)
(declare-fun x500 () Bool)
(declare-fun x85 () Bool)
(declare-fun x468 (x90) Int)
(declare-fun x49 () Bool)
(declare-fun x354 () Bool)
(declare-fun x107 () Int)
(declare-fun x26 () Int)
(declare-fun x84 () Bool)
(declare-fun x431 () Int)
(declare-fun x122 () Int)
(declare-fun x569 () Bool)
(declare-fun x492 () Int)
(declare-fun x450 () Bool)
(declare-fun x67 () Int)
(declare-fun x58 () Bool)
(declare-fun x27 () Int)
(declare-fun x112 () Bool)
(declare-fun x334 () Bool)
(declare-fun x38 () Bool)
(declare-fun x507 () Bool)
(declare-fun x25 () Int)
(declare-fun x213 () Bool)
(declare-fun x456 () Bool)
(declare-fun x548 () Bool)
(declare-fun x86 () Int)
(declare-fun x320 () Bool)
(declare-fun x179 (x90) Int)
(declare-fun x207 () Bool)
(declare-fun x297 () Bool)
(declare-fun x315 () Bool)
(declare-fun x578 () Bool)
(declare-fun x124 () Bool)
(declare-fun x347 () Bool)
(declare-fun x304 () Bool)
(declare-fun x528 () Int)
(declare-fun x407 () Int)
(declare-fun x7 () Bool)
(declare-fun x204 () Bool)
(declare-fun x531 () Int)
(declare-fun x552 () Bool)
(declare-fun x256 () Bool)
(declare-fun x234 () Int)
(declare-fun x526 () Bool)
(declare-fun x373 () Bool)
(declare-fun x1 () Bool)
(declare-fun x403 () Bool)
(declare-fun x216 () Int)
(declare-fun x180 () Int)
(declare-fun x68 () Bool)
(declare-fun x268 () Bool)
(declare-fun x300 () Int)
(declare-fun x561 () Bool)
(declare-fun x455 () Bool)
(declare-fun x282 () Bool)
(declare-fun x279 () Bool)
(declare-fun x193 () Int)
(declare-fun x414 () Int)
(declare-fun x506 () Bool)
(declare-fun x288 () Int)
(declare-fun x594 () Bool)
(declare-fun x413 () Bool)
(declare-fun x95 () Int)
(declare-fun x158 () Bool)
(declare-fun x513 () Int)
(declare-fun x3 () Bool)
(declare-fun x61 () Int)
(declare-fun x439 () Int)
(declare-fun x543 (x90) Int)
(declare-fun x4 () Bool)
(declare-fun x363 () Bool)
(declare-fun x523 () Bool)
(declare-fun x203 () Bool)
(declare-fun x567 () Int)
(declare-fun x344 () Bool)
(declare-fun x32 (Int) x90)
(declare-fun x257 () Bool)
(declare-fun x228 () Int)
(declare-fun x171 () Bool)
(declare-fun x30 () Int)
(declare-fun x115 () Bool)
(declare-fun x502 () Bool)
(declare-fun x183 () Bool)
(declare-fun x488 () Bool)
(declare-fun x557 () Bool)
(declare-fun x340 () Int)
(declare-fun x137 () Bool)
(declare-fun x476 () Int)
(declare-fun x473 () Int)
(declare-fun x459 () Bool)
(declare-fun x438 () Bool)
(declare-fun x556 () Bool)
(declare-fun x587 () Int)
(declare-fun x393 () Bool)
(declare-fun x316 () Bool)
(declare-fun x520 () Int)
(declare-fun x108 () Bool)
(declare-fun x301 () Int)
(declare-fun x233 () Int)
(declare-fun x486 () Bool)
(declare-fun x585 () Bool)
(declare-fun x372 () Int)
(declare-fun x73 () Int)
(declare-fun x147 () Int)
(declare-fun x35 () Bool)
(declare-fun x185 () Int)
(declare-fun x522 () Bool)
(declare-fun x299 () Int)
(declare-fun x580 () Bool)
(declare-fun x206 () Bool)
(declare-fun x491 () Int)
(declare-fun x367 () Bool)
(declare-fun x494 () Bool)
(declare-fun x541 () Int)
(declare-fun x467 () Bool)
(declare-fun x125 () Int)
(declare-fun x326 () Int)
(declare-fun x432 () Bool)
(declare-fun x53 () Bool)
(declare-fun x310 () Bool)
(declare-fun x544 () Int)
(declare-fun x253 () Int)
(declare-fun x341 () Int)
(declare-fun x312 () Bool)
(declare-fun x399 () Bool)
(declare-fun x591 () Int)
(declare-fun x377 () Bool)
(declare-fun x521 () Bool)
(declare-fun x542 () Int)
(declare-fun x480 () Bool)
(declare-fun x537 () Bool)
(declare-fun x104 () Bool)
(declare-fun x534 () Bool)
(declare-fun x120 () Bool)
(declare-fun x469 () Int)
(declare-fun x568 () Bool)
(declare-fun x221 () Int)
(declare-fun x176 () Bool)
(declare-fun x6 () Bool)
(declare-fun x505 () Bool)
(declare-fun x390 () Int)
(declare-fun x105 () Bool)
(declare-fun x235 () Bool)
(declare-fun x518 () Bool)
(declare-fun x82 () Int)
(declare-fun x97 () Bool)
(declare-fun x577 () Bool)
(declare-fun x436 () Bool)
(declare-fun x296 () Bool)
(declare-fun x87 () Int)
(declare-fun x5 () Int)
(declare-fun x54 () Bool)
(declare-fun x525 () Bool)
(declare-fun x309 () Bool)
(declare-fun x173 () Bool)
(declare-fun x102 () Bool)
(declare-fun x293 () Bool)
(declare-fun x349 () Bool)
(declare-fun x447 () Bool)
(declare-fun x175 () Bool)
(declare-fun x71 () Int)
(declare-fun x128 () Bool)
(declare-fun x37 () Bool)
(declare-fun x200 () Bool)
(declare-fun x512 () Bool)
(declare-fun x411 () Bool)
(declare-fun x545 () Bool)
(declare-fun x589 () Bool)
(declare-fun x139 () Bool)
(declare-fun x174 () Int)
(declare-fun x143 () Bool)
(declare-fun x40 () Bool)
(declare-fun x536 () Bool)
(declare-fun x48 () Bool)
(declare-fun x371 () Bool)
(declare-fun x280 () Bool)
(declare-fun x384 () Bool)
(declare-fun x247 () Bool)
(declare-fun x267 () Bool)
(declare-fun x110 () Bool)
(declare-fun x352 () Bool)
(declare-fun x109 () Bool)
(declare-fun x319 () Bool)
(declare-fun x493 () Bool)
(declare-fun x442 () Bool)
(declare-fun x485 () Int)
(declare-fun x458 () Bool)
(declare-fun x510 () Bool)
(declare-fun x281 () Bool)
(declare-fun x516 () Bool)
(declare-fun x498 () Int)
(declare-fun x533 () Int)
(declare-fun x461 () Int)
(declare-fun x156 () Int)
(declare-fun x57 () Bool)
(declare-fun x21 () Bool)
(declare-fun x573 () Int)
(declare-fun x16 () Bool)
(declare-fun x55 () Int)
(declare-fun x56 () Bool)
(declare-fun x302 () Bool)
(declare-fun x81 () Int)
(declare-fun x445 () Int)
(declare-fun x386 () Bool)
(declare-fun x33 () Bool)
(declare-fun x47 () Bool)
(declare-fun x34 () Bool)
(declare-fun x551 () Int)
(declare-fun x194 () Int)
(declare-fun x182 () Int)
(declare-fun x255 () Int)
(declare-fun x131 () Bool)
(declare-fun x448 () Int)
(declare-fun x343 () Bool)
(declare-fun x553 () Int)
(declare-fun x181 () Bool)
(declare-fun x155 () Bool)
(declare-fun x294 () Int)
(declare-fun x496 () Bool)
(declare-fun x269 () Int)
(declare-fun x276 () Int)
(declare-fun x437 () Bool)
(declare-fun x328 () Bool)
(declare-fun x330 () Bool)
(declare-fun x277 () Int)
(declare-fun x248 () Bool)
(declare-fun x527 () Int)
(declare-fun x138 () Int)
(declare-fun x478 () Bool)
(declare-fun x129 () Bool)
(declare-fun x462 () Bool)
(declare-fun x153 () Bool)
(declare-fun x470 () Bool)
(declare-fun x161 () Int)
(declare-fun x583 () Bool)
(declare-fun x345 () Bool)
(declare-fun x252 () Int)
(declare-fun x192 () Bool)
(declare-fun x579 () Bool)
(declare-fun x576 () Int)
(declare-fun x395 () Bool)
(declare-fun x392 () Bool)
(declare-fun x440 () Bool)
(declare-fun x190 () Int)
(declare-fun x100 () Int)
(declare-fun x148 () Bool)
(declare-fun x530 () Int)
(declare-fun x332 () Int)
(declare-fun x209 () Bool)
(declare-fun x118 () Bool)
(declare-fun x453 () Int)
(declare-fun x41 () Int)
(declare-fun x420 () Bool)
(declare-fun x94 () Bool)
(declare-fun x152 () Int)
(declare-fun x240 () Int)
(declare-fun x241 () Bool)
(declare-fun x231 () Int)
(declare-fun x305 () Bool)
(declare-fun x365 () Int)
(declare-fun x17 () Bool)
(declare-fun x464 () Int)
(declare-fun x416 () Int)
(declare-fun x91 () Bool)
(declare-fun x472 () Bool)
(declare-fun x593 () Int)
(declare-fun x101 () Int)
(declare-fun x565 () Bool)
(declare-fun x103 () Bool)
(declare-fun x130 () Bool)
(declare-fun x217 () Int)
(declare-fun x63 () Int)
(declare-fun x15 () Int)
(declare-fun x385 () Bool)
(declare-fun x538 () Bool)
(declare-fun x23 () Int)
(declare-fun x346 () Int)
(declare-fun x262 () Bool)
(declare-fun x83 () Int)
(declare-fun x515 () Bool)
(declare-fun x511 () Bool)
(declare-fun x290 () Bool)
(declare-fun x444 () Int)
(declare-fun x29 () Bool)
(declare-fun x145 () Bool)
(declare-fun x74 () Bool)
(declare-fun x65 () Bool)
(declare-fun x387 () Bool)
(declare-fun x429 () Bool)
(declare-fun x366 () Bool)
(declare-fun x184 () Bool)
(declare-fun x254 () Bool)
(declare-fun x570 () Bool)
(declare-fun x400 () Int)
(declare-fun x490 () Bool)
(declare-fun x224 () Bool)
(declare-fun x135 () Bool)
(declare-fun x150 () Bool)
(declare-fun x186 () Bool)
(declare-fun x188 () Bool)
(declare-fun x278 () Bool)
(declare-fun x364 () Bool)
(declare-fun x157 () Bool)
(declare-fun x479 () Bool)
(declare-fun x555 () Bool)
(declare-fun x481 () Bool)
(declare-fun x560 () Bool)
(declare-fun x106 () Int)
(declare-fun x133 () Bool)
(declare-fun x187 () Int)
(declare-fun x575 () Bool)
(declare-fun x212 () Int)
(declare-fun x44 () Bool)
(declare-fun x261 () Bool)
(declare-fun x405 () Bool)
(declare-fun x214 () Int)
(declare-fun x22 () Int)
(declare-fun x18 () Bool)
(declare-fun x126 () Bool)
(declare-fun x284 () Bool)
(declare-fun x113 () Bool)
(declare-fun x489 () Bool)
(declare-fun x285 () Bool)
(declare-fun x226 () Bool)
(declare-fun x410 () Bool)
(declare-fun x406 () Bool)
(declare-fun x322 () Int)
(declare-fun x144 () Bool)
(declare-fun x259 () Int)
(declare-fun x88 () Bool)
(declare-fun x540 () Bool)
(declare-fun x189 () Bool)
(declare-fun x160 () Bool)
(declare-fun x396 () Int)
(declare-fun x422 () Int)
(declare-fun x563 () Int)
(declare-fun x243 () Bool)
(declare-fun x336 () Bool)
(declare-fun x514 () Int)
(declare-fun x306 () Bool)
(declare-fun x195 () Bool)
(declare-fun x397 () Bool)
(declare-fun x236 () Bool)
(declare-fun x215 () Bool)
(declare-fun x408 () Bool)
(declare-fun x460 () Int)
(declare-fun x329 () Bool)
(declare-fun x441 () Int)
(declare-fun x321 () Bool)
(declare-fun x446 () Bool)
(declare-fun x28 () Bool)
(declare-fun x590 () Bool)
(declare-fun x423 () Int)
(declare-fun x495 () Int)
(declare-fun x388 () Int)
(declare-fun x31 () Int)
(declare-fun x404 () Int)
(declare-fun x250 () Bool)
(declare-fun x335 () Bool)
(declare-fun x508 () Bool)
(declare-fun x51 () Bool)
(declare-fun x433 () Bool)
(declare-fun x123 () Bool)
(declare-fun x222 () Int)
(declare-fun x78 () Bool)
(declare-fun x421 () Bool)
(declare-fun x199 () Bool)
(declare-fun x592 () Int)
(declare-fun x98 () Int)
(declare-fun x208 () Bool)
(declare-fun x571 () Bool)
(declare-fun x117 () Int)
(declare-fun x169 () Bool)
(declare-fun x287 () Int)
(declare-fun x532 () Int)
(declare-fun x457 () Bool)
(declare-fun x244 () Int)
(declare-fun x449 () Bool)
(declare-fun x159 () Int)
(declare-fun x380 () Bool)
(declare-fun x198 () Int)
(declare-fun x559 () Bool)
(declare-fun x76 () Bool)
(declare-fun x427 () Bool)
(declare-fun x167 () Bool)
(declare-fun x582 () Bool)
(declare-fun x389 () Int)
(declare-fun x264 () Int)
(declare-fun x119 (Int) Int)
(declare-fun x325 () Bool)
(declare-fun x8 () Int)
(declare-fun x232 () Bool)
(declare-fun x566 () Bool)
(declare-fun x140 () Int)
(declare-fun x428 () Bool)
(declare-fun x201 () Int)
(declare-fun x249 () Bool)
(declare-fun x547 () Int)
(declare-fun x172 () Bool)
(declare-fun x13 () Int)
(declare-fun x558 () Bool)
(declare-fun x151 () Bool)
(declare-fun x383 () Int)
(declare-fun x2 () Bool)
(declare-fun x398 () Bool)
(declare-fun x273 () Bool)
(declare-fun x337 () Bool)
(declare-fun x356 () Int)
(declare-fun x361 () Bool)
(declare-fun x382 (Int Int) Int)
(declare-fun x197 () Int)
(declare-fun x474 () Bool)
(declare-fun x239 () Int)
(declare-fun x66 () Int)
(declare-fun x338 () Int)
(declare-fun x111 () Bool)
(declare-fun x342 () Int)
(declare-fun x75 () Int)
(declare-fun x141 () Bool)
(declare-fun x475 () Bool)
(declare-fun x149 () Int)
(declare-fun x588 () Bool)
(declare-fun x357 () Bool)
(declare-fun x307 () Bool)
(declare-fun x318 () Bool)
(declare-fun x69 () Int)
(declare-fun x166 () Int)
(declare-fun x242 () Int)
(declare-fun x412 () Bool)
(declare-fun x487 () Bool)
(declare-fun x581 () Bool)
(declare-fun x219 () Bool)
(declare-fun x499 () Bool)
(declare-fun x265 () Int)
(declare-fun x465 () Int)
(declare-fun x477 () Bool)
(declare-fun x223 () Bool)
(declare-fun x238 () Int)
(declare-fun x136 () Bool)
(declare-fun x375 () Int)
(declare-fun x163 () Bool)
(declare-fun x376 () Bool)
(declare-fun x374 () Bool)
(declare-fun x36 () Bool)
(declare-fun x121 () Bool)
(declare-fun x504 () Bool)
(declare-fun x229 () Bool)
(declare-fun x72 () Bool)
(declare-fun x539 () Int)
(declare-fun x497 () Bool)
(declare-fun x409 () Bool)
(declare-fun x360 () Int)
(declare-fun x274 () Int)
(declare-fun x43 () Bool)
(declare-fun x283 () Int)
(declare-fun x246 () Bool)
(declare-fun x454 () Bool)
(declare-fun x77 () Bool)
(define-fun x517 ((x90 x90) (x550 Int)) x90 (ite ((_ is x574) x90) (x574 (x52 x90) (x303 x90) (+ x550 (x116 x90))) (ite ((_ is x24) x90) (x24 (x142 x90) (+ (x415 x90) x550)) (x353 (+ x550 (x168 x90))))))
(define-fun x45 ((x59 Int)) Int (ite (and (< x59 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x59)) x59 (- x59 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x96 ((x59 Int)) Int (ite (and (>= x59 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x59 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x59) x59))
(define-fun x378 ((x348 Int)) Bool (and (< x348 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x348 0)))
(define-fun x270 ((x348 Int)) Bool (=> (and (not (= x348 1461501637330902918203684832716283019655932542975)) (not (= x348 2685885107)) (< 10000 x348) (not (= 1245370514 x348)) (not (= x348 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 149895259 x348))) (not ((_ is x353) (x32 x348)))))
(assert (x378 x587))
(assert (x378 x222))
(assert (= (x32 2685885107) (x353 2685885107)))
(assert (x378 x73))
(assert (x378 x201))
(assert (= (x32 1245370514) (x353 1245370514)))
(assert (x378 x414))
(assert (x378 x86))
(assert (x378 x125))
(assert (= (x353 1461501637330902918203684832716283019655932542975) (x32 1461501637330902918203684832716283019655932542975)))
(assert (= (and x44 x50) x449))
(assert (= (and x367 x192) x85))
(assert (x378 x41))
(assert (= (and x489 x364) x195))
(assert (= x410 (=> (and (and (= x139 x405) (= x277 x539) (= x539 (div x152 10))) (and x171 (= 10 x476) (= x175 false))) x529)))
(assert (x378 x205))
(assert (x378 x194))
(assert (= x450 (and x588 x447)))
(assert (= x430 (and x369 (not x427))))
(assert (x378 x460))
(assert (= x560 (and x343 x188)))
(assert (x378 x426))
(assert (= x297 (and (not x489) x364)))
(assert (= x304 (and x381 x323)))
(assert (x378 x271))
(assert (= x321 (and x401 x472)))
(assert (x378 x152))
(assert (x378 x453))
(assert (= (and x267 x433) x2))
(assert (= x463 (=> (and (and (= x461 x485) (= x199 x501) (= x461 (div x554 3))) (and (= false x312) x160 (= 3 x212))) x380)))
(assert (= (=> (and (and (= x333 false) (= 2 x251) x188) (and (= x238 x222) (= x222 (div x356 2)) (= x226 x189))) x552) x570))
(assert (= (and x583 x309) x480))
(assert (= (and (not x525) x305) x373))
(assert (x378 x531))
(assert (= x432 (and x112 x589)))
(assert (x378 x95))
(assert (= (and x384 (not x436)) x79))
(assert (= (and x77 (not x268)) x589))
(assert (x378 x252))
(assert (= (and (not x84) x37) x472))
(assert (= true x121))
(assert (x378 x196))
(assert (x378 x147))
(assert (= x315 (=> (and (and (= x359 2) x494 (= x504 false)) (and (= x139 x405) (= x277 x342) (= x342 (div x152 2)))) x529)))
(assert (= x462 (and x297 (not x330))))
(assert (= (and x137 (not x454)) x585))
(assert (x378 x431))
(assert (= x486 (and x237 (not x56))))
(assert (x378 x253))
(assert (= x380 (=> (and (and (= x587 x197) (= x390 2685885107) (not (= 1245370514 x390)) (= x149 (* x368 x356)) (= (not (= x276 0)) x218) (= x164 x368) (= (= x356 0) x310) (not (= 149895259 x390)) (= (x468 (x32 x372)) x404) (= x445 x356) (= x276 x107) (= (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x149) x68) (= x94 (= 0 x368)) (< 0 x404) (= x436 (or x94 x310)) (= x189 (and x68 x218))) (and x199 (= x197 x485))) (and (=> (and x436 (and (= x117 x238) (= x117 0) (= x226 x189) x436)) x552) (=> (and (and x564 (= x419 (= x276 x368)) (= x564 (not x436))) (not x436)) (and (=> (and (and (= (not x419) x483) (= x515 (= x356 x276)) x483) (not x419)) (and (=> (and (not x515) (and (= x19 (* x276 2)) x173 (= x316 (= x19 x368)) (= (not x515) x173))) (and (=> (and (not x316) (and x118 (= (= x326 x356) x518) (= x118 (not x316)) (= (* x276 2) x326))) (and (=> (and (and (= x189 x226) (= x340 (mod (* x368 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x238 x340) x518) x518) x552) (=> (and (and (= x532 (* x368 2)) x296 (= (not x518) x296) (= x188 (= x276 x532))) (not x518)) (and (=> x188 x570) (=> (and (and (= (not x188) x549) (= x8 (* x356 2)) x549 (= (= x8 x276) x50)) (not x188)) (and (=> (and (and x134 (= x471 (* x276 3)) (= (not x50) x134) (= (= x368 x471) x583)) (not x50)) (and (=> (and (not x583) (and (= (not x583) x412) (= (= x322 x356) x345) (= x322 (* 3 x276)) x412)) (and (=> (and (not x345) (and (= x479 (not x345)) (= x464 (* x368 3)) x479 (= (= x464 x276) x399))) (and (=> x399 x403) (=> (and (not x399) (and (= x243 (= x276 x551)) (= (not x399) x150) (= x551 (* x356 3)) x150)) (and (=> x243 x153) (=> (and (and (= x200 (= x81 x368)) x467 (= (* x276 10) x81) (= x467 (not x243))) (not x243)) (and (=> (and (not x200) (and x3 (= (* 10 x276) x519) (= (= x356 x519) x256) (= (not x200) x3))) (and (=> (and (not x256) (and (= (* x368 10) x106) x443 (= x56 (= x276 x106)) (= (not x256) x443))) (and (=> (and (and x280 (= (= x276 x308) x88) (= (* 10 x356) x308) (= x280 (not x56))) (not x56)) (and (=> (and (and (= x566 (not x88)) x566 (= (= x368 x87) x133) (= x87 (* 500 x276))) (not x88)) (and (=> (and (and x133 (= x226 x189) (= x138 x238) (= x138 (mod (* 500 x356) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x133) x552) (=> (and (and x12 (= x279 (= x356 x156)) (= x156 (* x276 500)) (= x12 (not x133))) (not x133)) (and (=> (and (not x279) (and (= (* 500 x368) x31) (= (= x31 x276) x97) x572 (= (not x279) x572))) (and (=> x97 x568) (=> (and (and (= (not x97) x545) x545 (= (* 500 x356) x466) (= x489 (= x466 x276))) (not x97)) (and (=> x489 x249) (=> (and (not x489) (and (= (not x489) x556) x556 (= (* 400 x276) x25) (= x330 (= x368 x25)))) (and (=> (and (and (= (mod (* 400 x356) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x292) x330 (= x226 x189) (= x238 x292)) x330) x552) (=> (and (not x330) (and (= (* 400 x276) x301) x29 (= x29 (not x330)) (= x266 (= x301 x356)))) (and (=> (and (and (= x189 x226) x266 (= (mod (* x368 400) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x83) (= x83 x238)) x266) x552) (=> (and (and (= (= x198 x276) x246) (= (* x368 400) x198) (= x457 (not x266)) x457) (not x266)) (and (=> (and (and (= x120 (not x246)) (= x261 (= x276 x400)) x120 (= (* 400 x356) x400)) (not x246)) (and (=> (and (not x261) (and x366 (= x238 x294) (= x294 0) (= x366 (not x261)) (= false x335) (= x226 x335))) x552) (=> x261 x115))) (=> x246 x65))))))))))) (=> (and (and (= x300 x238) (= (mod (* 500 x368) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x300) x279 (= x189 x226)) x279) x552))))) (=> x88 x413))) (=> x56 x516))) (=> (and (and (= x238 x448) x256 (= (mod (* x368 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x448) (= x226 x189)) x256) x552))) (=> (and (and (= x189 x226) (= x396 (mod (* x356 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x200 (= x238 x396)) x200) x552))))))) (=> (and x345 (and x345 (= x226 x189) (= (mod (* x368 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x422) (= x238 x422))) x552))) (=> (and (and x583 (= x226 x189) (= x238 x252) (= (mod (* x356 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x252)) x583) x552))) (=> x50 x220))))))) (=> (and x316 (and (= x495 (mod (* x356 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x226 x189) x316 (= x238 x495))) x552))) (=> (and (and x515 (= x368 x238) (= x189 x226)) x515) x552))) (=> (and x419 (and (= x189 x226) (= x356 x238) x419)) x552)))))))
(assert (x378 x117))
(assert (x378 x69))
(assert (= x477 (and (not x4) x236)))
(assert (= (and x307 x540) x579))
(assert (= (=> (and (and (= x178 (div x368 3)) (= x226 x189) (= x238 x178)) (and (= x145 false) (= 3 x287) x243)) x552) x153))
(assert (= x561 (and x374 x349)))
(assert (= x293 (=> (and (and (= 2 x407) x427 (= false x206)) (and (= (div x14 2) x439) (= x199 x501) (= x485 x439))) x380)))
(assert (= (and (not x50) x44) x309))
(assert (= (or x557 x224 x561 x321 x70 x478 x80 x284 x6 x395 x85 x429 x92 x247 x2 x522 x524 x484 x425 x418 x482 x537 x555 x575) x177))
(assert (= (and x263 x246) x398))
(assert (= (and x399 x250) x569))
(assert (= (and x54 (not x494)) x137))
(assert (= x557 (and x4 x236)))
(assert (x378 x127))
(assert (= x183 (and x282 (not x515))))
(assert (= x429 (and x171 x477)))
(assert (= x305 (and x135 (not x191))))
(assert (= x186 (and x318 (not x243))))
(assert (= (and (not x256) x181) x237))
(assert (x378 x185))
(assert (= (and x487 x141) x327))
(assert (= (and x590 (not x345)) x250))
(assert (= (x179 (x353 1245370514)) 1245370514))
(assert (= x474 (and x78 x394)))
(assert (x378 x132))
(assert (x378 x161))
(assert (= (and x314 x177) x511))
(assert (x378 x476))
(assert (= x490 (=> (and (and (= x199 x501) (= x592 x485) (= x592 (div x14 10))) (and x323 (= x205 10) (= x361 false))) x380)))
(assert (= (and (not x419) x79) x282))
(assert (= (and x376 (not x133)) x363))
(assert (= (and x285 (not x36)) x320))
(assert (= (and x419 x79) x505))
(assert (x378 x55))
(assert (x378 x544))
(assert (= (=> (and (and (= x26 10) x4 (= x154 false)) (and (= (div x295 10) x170) (= x170 x277) (= x139 x405))) x529) x38))
(assert (= (and (not x420) x33) x20))
(assert (x378 x170))
(assert (= (and (not x157) x143) x247))
(assert (= 1461501637330902918203684832716283019655932542975 (x179 (x353 1461501637330902918203684832716283019655932542975))))
(assert (x378 x563))
(assert (= (and (not x246) x263) x506))
(assert (x378 x448))
(assert (x378 x146))
(assert (= (and x535 x518) x162))
(assert (= (and x540 (not x307)) x394))
(assert (x378 x174))
(assert (= x224 (and x580 x362)))
(assert (x378 x178))
(assert (= x64 (and x394 (not x78))))
(assert (x378 x23))
(assert (= (=> (and (and (= false x488) (= x201 400) x157) (and (= (div x152 400) x533) (= x405 x139) (= x277 x533))) x529) x548))
(assert (= x11 (and x345 x590)))
(assert (x378 x214))
(assert (x378 x30))
(assert (= (and x562 x373) x80))
(assert (= x135 (and x477 (not x171))))
(assert (= (and (not x112) x589) x406))
(assert (= (and x54 x494) x537))
(assert (= (and (not x319) x337) x456))
(assert (= x286 (and x320 (not x534))))
(assert (= (=> (and (and (= 10 x416) (= x438 false) x88) (and (= x238 x190) (= x226 x189) (= x190 (div x368 10)))) x552) x413))
(assert (= (x179 (x32 x372)) x372))
(assert (= x18 (=> (and (and (= x405 x139) (= x473 (div x152 3)) (= x277 x473)) (and x349 (= x155 false) (= x216 3))) x529)))
(assert (= x92 (and x43 x158)))
(assert (= x249 (=> (and (and (= x238 x341) (= x189 x226) (= (div x368 500) x341)) (and (= 500 x69) x489 (= x411 false))) x552)))
(assert (x378 x469))
(assert (x378 x404))
(assert (= x538 (=> (and (and (= (div x554 500) x23) (= x485 x23) (= x199 x501)) (and (= x530 500) (= x58 false) x268)) x380)))
(assert (= (and x158 (not x43)) x374))
(assert (= (and x273 x331) x546))
(assert (= (and x506 (not x261)) x105))
(assert (x378 x372))
(assert (x378 x283))
(assert (x378 x396))
(assert (x378 x533))
(assert (= (and (not x279) x363) x493))
(assert (x378 x259))
(assert (= x57 (and x192 (not x367))))
(assert (= (and x200 x186) x577))
(assert (= x403 (=> (and (and (= (div x356 3) x174) (= x189 x226) (= x174 x238)) (and (= x576 3) (= x442 false) x399)) x552)))
(assert (= x590 (and x309 (not x583))))
(assert (= x158 (and x585 (not x91))))
(assert (x378 x234))
(assert (x378 x567))
(assert (x378 x547))
(assert (x378 x71))
(assert (= (and x278 x34) x393))
(assert (= (and x121 x35) x522))
(assert (= (and x408 x20) x207))
(assert (= x377 (=> (and (and (= x86 2) (= false x51) x370) (and (= x501 x199) (= x253 x485) (= (div x554 2) x253))) x380)))
(assert (= x475 (and x344 x64)))
(assert (= (and x497 x386) x571))
(assert (= x385 (=> (and (and (= x63 x485) (= x199 x501) (= (div x554 400) x63)) (and (= 400 x41) x497 (= x409 false))) x380)))
(assert (x378 x98))
(assert (x378 x541))
(assert (= (and (not x349) x374) x37))
(assert (x378 x356))
(assert (x378 x439))
(assert (= (and x343 (not x188)) x44))
(assert (= (and (not x200) x186) x181))
(assert (= x529 (=> (and (and (= x277 x55) x405) (and (not (= x193 149895259)) (= (= 0 x14) x123) (= (x468 (x32 x372)) x146) (= x554 x164) (= x501 (and x392 x102)) (= x234 x107) (= x14 x22) (= 2685885107 x193) (= (* x554 x14) x240) (= (not (= 0 x234)) x102) (> x146 0) (not (= 1245370514 x193)) (= x55 x491) (= x507 (= x554 0)) (= x314 (or x123 x507)) (= (<= x240 115792089237316195423570985008687907853269984665640564039457584007913129639935) x392))) (and (=> (and (and (= x272 0) (= x485 x272) x314 (= x501 x199)) x314) x380) (=> (and (not x314) (and (= x260 (not x314)) (= x420 (= x234 x554)) x260)) (and (=> (and (and x210 (= (not x420) x210) (= x408 (= x234 x14))) (not x420)) (and (=> (and (not x408) (and x458 (= (= x554 x317) x319) (= x458 (not x408)) (= (* 2 x234) x317))) (and (=> (and (and (= (= x520 x14) x223) x428 (= (not x319) x428) (= (* x234 2) x520)) (not x319)) (and (=> (and (and (= (= x27 x234) x427) x53 (= x53 (not x223)) (= x27 (* x554 2))) (not x223)) (and (=> (and (not x427) (and (= x228 (* 2 x14)) x397 (= x370 (= x234 x228)) (= (not x427) x397))) (and (=> (and (not x370) (and (= x36 (= x13 x554)) x131 (= (not x370) x131) (= x13 (* x234 3)))) (and (=> (and (not x36) (and (= x100 (* x234 3)) x111 (= x111 (not x36)) (= x534 (= x100 x14)))) (and (=> (and x534 (and (= x501 x199) (= x15 (mod (* 3 x554) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x15 x485) x534)) x380) (=> (and (and (= (not x534) x136) (= x325 (= x234 x424)) x136 (= (* x554 3) x424)) (not x534)) (and (=> x325 x148) (=> (and (not x325) (and (= x217 (* x14 3)) x128 (= (= x217 x234) x160) (= x128 (not x325)))) (and (=> x160 x463) (=> (and (not x160) (and (= x140 (* x234 10)) (= (= x140 x554) x331) (= (not x160) x508) x508)) (and (=> (and (not x331) (and (= x447 (= x14 x182)) (= x182 (* 10 x234)) (= x437 (not x331)) x437)) (and (=> (and x447 (and (= x485 x593) x447 (= x501 x199) (= x593 (mod (* 10 x554) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x380) (=> (and (and (= x129 (not x447)) (= x323 (= x234 x242)) x129 (= (* x554 10) x242)) (not x447)) (and (=> x323 x490) (=> (and (and (= x336 (not x323)) (= x307 (= x234 x274)) (= x274 (* 10 x14)) x336) (not x323)) (and (=> x307 x235) (=> (and (not x307) (and x1 (= x1 (not x307)) (= (= x554 x379) x78) (= x379 (* x234 500)))) (and (=> (and x78 (and x78 (= x485 x375) (= x501 x199) (= (mod (* x14 500) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x375))) x380) (=> (and (and (= (* x234 500) x9) (= (= x9 x14) x344) x290 (= x290 (not x78))) (not x78)) (and (=> (and (not x344) (and (= x255 (* x554 500)) (= x594 (not x344)) (= x141 (= x255 x234)) x594)) (and (=> x141 x48) (=> (and (not x141) (and (= x452 (* x14 500)) x21 (= x21 (not x141)) (= (= x452 x234) x268))) (and (=> (and (not x268) (and (= (not x268) x46) x46 (= (* x234 400) x122) (= (= x122 x554) x112))) (and (=> (and x112 (and (= x485 x414) x112 (= x414 (mod (* 400 x14) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x501 x199))) x380) (=> (and (not x112) (and (= x499 (not x112)) x499 (= (= x239 x14) x586) (= (* 400 x234) x239))) (and (=> (and (not x586) (and (= (= x234 x221) x34) (= x417 (not x586)) x417 (= x221 (* 400 x554)))) (and (=> x34 x500) (=> (and (and (= (* x14 400) x338) (= x497 (= x234 x338)) (= (not x34) x230) x230) (not x34)) (and (=> x497 x385) (=> (and (and (= (not x497) x176) x176 (= x199 x89) (= 0 x351) (= x485 x351) (= x89 false)) (not x497)) x380))))) (=> (and (and (= x485 x10) (= x10 (mod (* x554 400) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x501 x199) x586) x586) x380))))) (=> x268 x538))))) (=> (and x344 (and (= x199 x501) x344 (= x61 (mod (* x554 500) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x61 x485))) x380))))))))))) (=> (and (and (= x166 (mod (* 10 x14) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x199 x501) (= x166 x485) x331) x331) x380))))))))) (=> (and (and (= x434 x485) (= x501 x199) (= x434 (mod (* 3 x14) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x36) x36) x380))) (=> x370 x377))) (=> x427 x293))) (=> (and x223 (and x223 (= x501 x199) (= x101 (mod (* x554 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x485 x101))) x380))) (=> (and x319 (and (= x485 x383) x319 (= x199 x501) (= (mod (* 2 x14) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x383))) x380))) (=> (and x408 (and (= x199 x501) (= x485 x554) x408)) x380))) (=> (and x420 (and (= x14 x485) x420 (= x199 x501))) x380)))))))
(assert (= (and x306 (not x289)) x209))
(assert (= (and (not x114) x57) x358))
(assert (x270 x372))
(assert (= (and x585 x91) x555))
(assert (= x103 (and x183 x316)))
(assert (= (=> (and (and (= x238 x271) x226) (and (= x453 x587) (= x271 x531) (= x491 x269) (= (+ x453 x269) x492) (= x60 (= x492 x567)) (= x567 x531))) x60) x552))
(assert (x378 x63))
(assert (x378 x101))
(assert (x378 x360))
(assert (= (and x456 x223) x354))
(assert (x378 x295))
(assert (= x500 (=> (and (and (= x501 x199) (= (div x14 400) x71) (= x485 x71)) (and (= x558 false) (= 400 x444) x34)) x380)))
(assert (= x395 (and x254 x62)))
(assert (= (and x137 x454) x425))
(assert (x378 x592))
(assert (= x324 (and x133 x376)))
(assert (= (and (not x562) x373) x192))
(assert (x378 x288))
(assert (x378 x584))
(assert (= (=> (and (and (= x501 x199) (= x514 (div x554 10)) (= x485 x514)) (and (= x258 false) (= x95 10) x307)) x380) x235))
(assert (x378 x341))
(assert (= (x32 149895259) (x353 149895259)))
(assert (x378 x164))
(assert (x378 x197))
(assert (= x433 (and (not x62) x254)))
(assert (= x343 (and x535 (not x518))))
(assert (x378 x445))
(assert (x378 x22))
(assert (x378 x61))
(assert (x378 x269))
(assert (= x578 (and x286 x325)))
(assert (= x215 (and x486 x88)))
(assert (= (=> (and (and (= x139 x405) (= x460 (div x152 500)) (= x277 x460)) (and (= x147 500) (= x510 false) x367)) x529) x109))
(assert (= x386 (and (not x34) x278)))
(assert (x378 x383))
(assert (x378 x202))
(assert (x378 x359))
(assert (x378 x238))
(assert (x378 x14))
(assert (x378 x542))
(assert (= (=> (and (and x267 (= false x47) (= 2 x75)) (and (= x277 x527) (= (div x295 2) x527) (= x139 x405))) x529) x459))
(assert (x378 x388))
(assert (x378 x292))
(assert (= x371 (and x369 x427)))
(assert (= (and x160 x481) x451))
(assert (= x126 (and x337 x319)))
(assert (= (or x262 x421 x565 x387 x569 x11 x536 x215 x496 x398 x559 x257 x162 x440 x449 x40 x560 x195 x577 x324 x480 x505 x103 x105) x104))
(assert (= x362 (and x358 (not x329))))
(assert (= x163 (and x209 (not x470))))
(assert (x378 x216))
(assert (= (and x320 x534) x291))
(assert (x378 x276))
(assert (= x284 (and x37 x84)))
(assert (= (and x470 x209) x6))
(assert (x378 x294))
(assert (x378 x407))
(assert (x378 x513))
(assert (x378 x351))
(assert (x378 x26))
(assert (x378 x402))
(assert (= (x179 (x353 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x565 (and x282 x515)))
(assert (x378 x527))
(assert (= (=> (and (and (= 10 x547) x56 (= x446 false)) (and (= x196 (div x356 10)) (= x238 x196) (= x189 x226))) x552) x516))
(assert (= x236 (and (not x401) x472)))
(assert (x378 x138))
(assert (= x110 (=> (and (and (= 400 x350) (= false x124) x580) (and (= x139 x405) (= x277 x426) (= x426 (div x295 400)))) x529)))
(assert (= 2685885107 (x179 (x353 2685885107))))
(assert (x378 x509))
(assert (= x478 (and x191 x135)))
(assert (x378 x390))
(assert (not x7))
(assert (= x347 (and x285 x36)))
(assert (x378 x159))
(assert (x378 x435))
(assert (= x535 (and x183 (not x316))))
(assert (x378 x342))
(assert (x378 x576))
(assert (= x148 (=> (and (and (= false x352) (= x346 3) x325) (and (= (div x14 3) x573) (= x199 x501) (= x573 x485))) x380)))
(assert (x378 x368))
(assert (x378 x391))
(assert (= x484 (and x305 x525)))
(assert (x378 x264))
(assert (= (and x268 x77) x502))
(assert (= x421 (and x462 x266)))
(assert (= x273 (and x481 (not x160))))
(assert (= (and x243 x318) x257))
(assert (x378 x346))
(assert (x378 x434))
(assert (x378 x10))
(assert (= (and x363 x279) x387))
(assert (= x172 (=> (and (and (= (div x295 500) x584) (= x277 x584) (= x139 x405)) (and (= x194 500) (= false x248) x562)) x529)))
(assert (= x48 (=> (and (and (= false x339) x141 (= 500 x214)) (and (= x485 x435) (= x501 x199) (= x435 (div x14 500)))) x380)))
(assert (= x523 (and x406 x586)))
(assert (= (and x493 x97) x536))
(assert (= x440 (and x297 x330)))
(assert (= x225 (=> (and (and (= x405 x139) (= x259 x277) (= x259 (div x295 3))) (and x43 (= x512 false) (= 3 x288))) x529)))
(assert (= x7 (=> (and x167 (= x180 x22) (= x164 x152) (= (> (x468 (x32 x372)) 0) x74) (= (x543 (x32 x372)) x431) (= (x45 (+ x161 x39)) x445) (= x127 x265) (= (and x76 x144) x139) (>= x431 0) (= 2685885107 x469) (not (= x469 1245370514)) (= x265 x283) (= x144 (not (= x391 0))) x74 (not (= 149895259 x469)) (= x161 x22) (> x99 0) (= x39 x283) (= x283 x295) (= (= 0 x295) x357) (= x76 (<= x311 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x391 x107) (= x180 x509) (< 0 x372) (= (<= x441 115792089237316195423570985008687907853269984665640564039457584007913129639935) x167) (= x35 (or x357 x113)) (= (x468 (x32 x372)) x99) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x299) (<= x372 1461501637330902918203684832716283019655932542975) (= x441 (+ x127 x509)) (= (= x152 0) x113) (= x311 (* x295 x152))) (and (=> (and (and x241 (= (= x391 x152) x289) (= x241 (not x35))) (not x35)) (and (=> (and (and (= x295 x277) (= x405 x139) x289) x289) x529) (=> (and (not x289) (and (= (not x289) x313) x313 (= x470 (= x391 x295)))) (and (=> (and x470 (and (= x277 x152) (= x139 x405) x470)) x529) (=> (and (and (= x423 (* x391 2)) x213 (= (not x470) x213) (= (= x152 x423) x208)) (not x470)) (and (=> (and (and (= x465 (* 2 x391)) (= x62 (= x295 x465)) (= (not x208) x204) x204) (not x208)) (and (=> (and (and (= (not x62) x28) (= x267 (= x391 x227)) x28 (= x227 (* 2 x152))) (not x62)) (and (=> (and (not x267) (and (= x66 (* 2 x295)) x130 (= x130 (not x267)) (= x494 (= x66 x391)))) (and (=> (and (not x494) (and x302 (= (= x82 x152) x454) (= (* 3 x391) x82) (= x302 (not x494)))) (and (=> (and (and (= (* x391 3) x355) x298 (= x298 (not x454)) (= (= x295 x355) x91)) (not x454)) (and (=> (and (not x91) (and (= x332 (* 3 x152)) x232 (= (not x91) x232) (= (= x332 x391) x43))) (and (=> x43 x225) (=> (and (not x43) (and x165 (= x231 (* 3 x295)) (= (= x231 x391) x349) (= (not x43) x165))) (and (=> x349 x18) (=> (and (and (= (= x152 x245) x84) (= x42 (not x349)) (= x245 (* x391 10)) x42) (not x349)) (and (=> (and x84 (and (= x405 x139) x84 (= (mod (* 10 x295) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x591) (= x277 x591))) x529) (=> (and (and (= (= x67 x295) x401) (= x67 (* x391 10)) x275 (= (not x84) x275)) (not x84)) (and (=> (and (and (= (* 10 x152) x233) (= (= x233 x391) x4) x108 (= (not x401) x108)) (not x401)) (and (=> x4 x38) (=> (and (and (= x16 (not x4)) (= (* x295 10) x5) (= x171 (= x391 x5)) x16) (not x4)) (and (=> x171 x410) (=> (and (and (= x17 (not x171)) x17 (= x365 (* 500 x391)) (= x191 (= x152 x365))) (not x171)) (and (=> (and (not x191) (and (= (* x391 500) x211) x219 (= (= x295 x211) x525) (= x219 (not x191)))) (and (=> (and (not x525) (and (= (* 500 x152) x498) (= x582 (not x525)) (= x562 (= x391 x498)) x582)) (and (=> (and (not x562) (and (= x184 (not x562)) x184 (= x553 (* 500 x295)) (= (= x391 x553) x367))) (and (=> (and (and (= (not x367) x328) x328 (= (* x391 400) x503) (= (= x503 x152) x114)) (not x367)) (and (=> (and x114 (and (= x405 x139) (= x98 x277) x114 (= x98 (mod (* 400 x295) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x529) (=> (and (and (= x93 (* 400 x391)) (= x329 (= x295 x93)) (= x521 (not x114)) x521) (not x114)) (and (=> (and (and (= x334 (not x329)) x334 (= x580 (= x389 x391)) (= x389 (* x152 400))) (not x329)) (and (=> x580 x110) (=> (and (and (= (= x391 x528) x157) x169 (= (not x580) x169) (= x528 (* 400 x295))) (not x580)) (and (=> (and (and (= 0 x202) x281 (= false x526) (= x281 (not x157)) (= x526 x405) (= x277 x202)) (not x157)) x529) (=> x157 x548))))) (=> (and (and (= x277 x513) x329 (= x139 x405) (= x513 (mod (* 400 x152) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x329) x529))))) (=> x367 x109))) (=> x562 x172))) (=> (and (and (= x139 x405) (= x185 (mod (* x152 500) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x277 x185) x525) x525) x529))) (=> (and (and (= x277 x244) x191 (= x244 (mod (* 500 x295) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x405 x139)) x191) x529))))))) (=> (and x401 (and (= x402 x277) x401 (= x139 x405) (= x402 (mod (* x152 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x529))))))))) (=> (and x91 (and x91 (= (mod (* x152 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x542) (= x139 x405) (= x542 x277))) x529))) (=> (and x454 (and x454 (= x405 x139) (= x388 (mod (* x295 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x277 x388))) x529))) (=> x494 x315))) (=> x267 x459))) (=> (and (and (= x405 x139) x62 (= x264 x277) (= (mod (* x152 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x264)) x62) x529))) (=> (and x208 (and (= x277 x159) (= x405 x139) (= (mod (* x295 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x159) x208)) x529))))))) (=> (and (and (= 0 x30) (= x139 x405) (= x30 x277) x35) x35) x529)))))
(assert (x378 x15))
(assert (x378 x375))
(assert (= x575 (and x157 x143)))
(assert (x378 x593))
(assert (= x54 (and x433 (not x267))))
(assert (x378 x251))
(assert (= x568 (=> (and (and (= x238 x360) (= x189 x226) (= x360 (div x356 500))) (and (= x229 false) (= x544 500) x97)) x552)))
(assert (= x376 (and x486 (not x88))))
(assert (= (=> (and (and (= x238 x125) (= x226 x189) (= x125 (div x368 400))) (and x261 (= 400 x541) (= false x581))) x552) x115))
(assert (= x220 (=> (and (and (= x238 x73) (= x189 x226) (= x73 (div x368 2))) (and x50 (= 2 x187) (= x203 false))) x552)))
(assert (= (or x371 x327 x571 x126 x354 x207 x455 x475 x546 x347 x523 x49 x451 x474 x151 x432 x578 x450 x579 x502 x304 x511 x393 x291) x384))
(assert (x378 x107))
(assert (x378 x300))
(assert (x378 x180))
(assert (x378 x75))
(assert (x378 x299))
(assert (x378 x485))
(assert (= x33 (and x177 (not x314))))
(assert (= (and x181 x256) x262))
(assert (x378 x554))
(assert (= (x353 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x32 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x378 x573))
(assert (=> (<= x372 10000) (= (x353 x372) (x32 x372))))
(assert (x378 x39))
(assert (x378 x166))
(assert (x378 x530))
(assert (= (and x56 x237) x40))
(assert (x378 x495))
(assert (x378 x340))
(assert (= (and x506 x261) x559))
(assert (x378 x461))
(assert (= x143 (and x362 (not x580))))
(assert (= (and (not x399) x250) x318))
(assert (= x588 (and x273 (not x331))))
(assert (= x65 (=> (and (and x246 (= false x72) (= x563 400)) (and (= x132 (div x356 400)) (= x189 x226) (= x238 x132))) x552)))
(assert (x378 x444))
(assert (x378 x416))
(assert (x378 x539))
(assert (= x455 (and x370 x430)))
(assert (x378 x473))
(assert (x378 x491))
(assert (x378 x277))
(assert (= (and (not x35) x121) x306))
(assert (= (and x329 x358) x70))
(assert (x378 x422))
(assert (= x278 (and (not x586) x406)))
(assert (= (and (not x323) x381) x540))
(assert (= (x179 (x353 149895259)) 149895259))
(assert (x378 x350))
(assert (x378 x212))
(assert (x378 x514))
(assert (= (and x493 (not x97)) x364))
(assert (= (and x286 (not x325)) x481))
(assert (= x285 (and x430 (not x370))))
(assert (= (and (not x447) x588) x381))
(assert (= x418 (and x208 x163)))
(assert (= (and x64 (not x344)) x487))
(assert (x378 x99))
(assert (= (and x487 (not x141)) x77))
(assert (x378 x83))
(assert (= (and (not x497) x386) x151))
(assert (= (and (not x266) x462) x263))
(assert (= x369 (and (not x223) x456)))
(assert (x378 x591))
(assert (x378 x272))
(assert (= (and x436 x384) x496))
(assert (x378 x187))
(assert (= x254 (and (not x208) x163)))
(assert (= (and x20 (not x408)) x337))
(assert (x378 x244))
(assert (x378 x287))
(assert (= x49 (and x33 x420)))
(assert (x378 x265))
(assert (= x524 (and x57 x114)))
(assert (= x482 (and x289 x306)))
(assert (x378 x193))
(assert (x378 x190))
(check-sat)
(exit)