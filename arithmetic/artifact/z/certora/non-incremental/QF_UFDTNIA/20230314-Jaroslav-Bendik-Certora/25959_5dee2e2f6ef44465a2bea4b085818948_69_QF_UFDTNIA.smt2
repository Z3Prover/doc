(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x15 0)) (((x76 (x503 x15) (x564 x15) (x353 Int)) (x680 (x606 Int)) (x662 (x499 x15) (x200 Int)))))
(declare-fun x3 () Int)
(declare-fun x605 (x15) Int)
(declare-fun x647 () Bool)
(declare-fun x318 () Bool)
(declare-fun x633 () Int)
(declare-fun x696 () Int)
(declare-fun x590 () Int)
(declare-fun x458 () Int)
(declare-fun x241 () Int)
(declare-fun x67 () x15)
(declare-fun x607 () Int)
(declare-fun x87 () Int)
(declare-fun x1 () Int)
(declare-fun x139 () Int)
(declare-fun x233 () Int)
(declare-fun x567 () Bool)
(declare-fun x336 () Int)
(declare-fun x389 () Int)
(declare-fun x585 (x15) Int)
(declare-fun x663 () x15)
(declare-fun x184 () Int)
(declare-fun x450 () Bool)
(declare-fun x555 () Int)
(declare-fun x488 () Int)
(declare-fun x721 () Bool)
(declare-fun x694 () Bool)
(declare-fun x137 () Bool)
(declare-fun x461 () Int)
(declare-fun x476 () Bool)
(declare-fun x518 () Int)
(declare-fun x324 () Int)
(declare-fun x462 () Int)
(declare-fun x554 () Int)
(declare-fun x37 () Int)
(declare-fun x310 () Int)
(declare-fun x99 () Int)
(declare-fun x112 () Int)
(declare-fun x440 () Int)
(declare-fun x138 (x15) Int)
(declare-fun x347 () Int)
(declare-fun x501 () Int)
(declare-fun x293 () Int)
(declare-fun x46 () Bool)
(declare-fun x222 (Int) Int)
(declare-fun x429 () Int)
(declare-fun x49 () Int)
(declare-fun x649 () Int)
(declare-fun x367 () Int)
(declare-fun x443 () Int)
(declare-fun x51 () Int)
(declare-fun x79 () Bool)
(declare-fun x537 () Int)
(declare-fun x179 () Int)
(declare-fun x618 () Bool)
(declare-fun x319 () Int)
(declare-fun x362 () Bool)
(declare-fun x654 () Int)
(declare-fun x299 () Int)
(declare-fun x456 () Int)
(declare-fun x199 () Bool)
(declare-fun x26 () Int)
(declare-fun x338 () Bool)
(declare-fun x133 () Int)
(declare-fun x682 () Int)
(declare-fun x103 () Int)
(declare-fun x327 () Int)
(declare-fun x271 () Bool)
(declare-fun x460 () Bool)
(declare-fun x292 () Bool)
(declare-fun x707 () Bool)
(declare-fun x615 () Bool)
(declare-fun x394 () Bool)
(declare-fun x437 () Bool)
(declare-fun x698 () Int)
(declare-fun x59 () Int)
(declare-fun x341 () Int)
(declare-fun x73 () Bool)
(declare-fun x97 () Int)
(declare-fun x415 () Int)
(declare-fun x33 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x21 () Int)
(declare-fun x113 () Bool)
(declare-fun x182 () Int)
(declare-fun x616 () Int)
(declare-fun x120 () Int)
(declare-fun x44 () Int)
(declare-fun x392 () Int)
(declare-fun x321 () Bool)
(declare-fun x656 () Int)
(declare-fun x250 () Int)
(declare-fun x371 () Int)
(declare-fun x65 () Int)
(declare-fun x710 () Int)
(declare-fun x72 () Int)
(declare-fun x28 () Int)
(declare-fun x334 () Bool)
(declare-fun x114 () Int)
(declare-fun x511 () Int)
(declare-fun x391 () Int)
(declare-fun x313 () Int)
(declare-fun x217 () Int)
(declare-fun x302 (Int) x15)
(declare-fun x592 () Bool)
(declare-fun x390 () Bool)
(declare-fun x464 () Int)
(declare-fun x733 () Bool)
(declare-fun x686 () Int)
(declare-fun x630 () Bool)
(declare-fun x107 () Int)
(declare-fun x621 () Int)
(declare-fun x70 () Int)
(declare-fun x738 () Bool)
(declare-fun x75 () Bool)
(declare-fun x180 () Int)
(declare-fun x146 () Int)
(declare-fun x300 () Int)
(declare-fun x151 (x15) Int)
(declare-fun x685 () Int)
(declare-fun x706 () Int)
(declare-fun x186 () Bool)
(declare-fun x427 () Int)
(declare-fun x234 () Bool)
(declare-fun x16 () Int)
(declare-fun x708 () Int)
(declare-fun x68 () Int)
(declare-fun x60 () Int)
(declare-fun x22 () Bool)
(declare-fun x544 () Bool)
(declare-fun x9 () Int)
(declare-fun x533 () Int)
(declare-fun x713 () Bool)
(declare-fun x561 () Bool)
(declare-fun x745 () Int)
(declare-fun x348 () Bool)
(declare-fun x701 () Int)
(declare-fun x568 () Int)
(declare-fun x374 () Bool)
(declare-fun x743 () Int)
(declare-fun x542 () Bool)
(declare-fun x203 () Bool)
(declare-fun x212 () Bool)
(declare-fun x275 () Int)
(declare-fun x628 () Bool)
(declare-fun x432 () Int)
(declare-fun x448 () Bool)
(declare-fun x315 () Int)
(declare-fun x144 (Int) Int)
(declare-fun x670 () Bool)
(declare-fun x417 () Int)
(declare-fun x62 () Bool)
(declare-fun x172 () Bool)
(declare-fun x287 () Int)
(declare-fun x115 () Int)
(declare-fun x387 () Bool)
(declare-fun x323 () Int)
(declare-fun x381 () Int)
(declare-fun x20 (x15) Int)
(declare-fun x124 () Bool)
(declare-fun x746 () Bool)
(declare-fun x546 () Bool)
(declare-fun x728 () Int)
(declare-fun x413 () Int)
(declare-fun x510 () Int)
(declare-fun x57 () Int)
(declare-fun x168 () Bool)
(declare-fun x470 () Bool)
(declare-fun x711 () Bool)
(declare-fun x135 (x15) Int)
(declare-fun x256 () Bool)
(declare-fun x636 () Int)
(declare-fun x401 () Int)
(declare-fun x406 () Int)
(declare-fun x225 () Bool)
(declare-fun x435 () Bool)
(declare-fun x61 () Int)
(declare-fun x82 () Int)
(declare-fun x192 () Int)
(declare-fun x232 () Int)
(declare-fun x7 () Int)
(declare-fun x38 () Bool)
(declare-fun x411 () Int)
(declare-fun x36 () Int)
(declare-fun x164 () Int)
(declare-fun x655 (Int) Int)
(declare-fun x575 () Int)
(declare-fun x465 () Bool)
(declare-fun x176 () Bool)
(declare-fun x549 () Int)
(declare-fun x77 () Int)
(declare-fun x634 () Int)
(declare-fun x563 () Int)
(declare-fun x229 () Int)
(declare-fun x314 () Bool)
(declare-fun x85 () Int)
(declare-fun x157 () Int)
(declare-fun x667 () Int)
(declare-fun x693 () Int)
(declare-fun x384 () Int)
(declare-fun x101 () Int)
(declare-fun x410 (Int) Int)
(declare-fun x732 () Int)
(declare-fun x625 () Int)
(declare-fun x96 () Int)
(declare-fun x641 () x15)
(declare-fun x428 () Int)
(declare-fun x734 () Int)
(declare-fun x398 () Bool)
(declare-fun x173 () Int)
(declare-fun x39 () Int)
(declare-fun x291 () Bool)
(declare-fun x399 () Bool)
(declare-fun x699 () Int)
(declare-fun x267 () Int)
(declare-fun x260 () Bool)
(declare-fun x316 (x15) Int)
(declare-fun x660 () Bool)
(declare-fun x11 () Int)
(declare-fun x160 () x15)
(declare-fun x80 () Bool)
(declare-fun x622 () Bool)
(declare-fun x430 () Bool)
(declare-fun x88 () Int)
(declare-fun x281 () Bool)
(declare-fun x304 () Int)
(declare-fun x529 () Int)
(declare-fun x235 () Int)
(declare-fun x420 () Int)
(declare-fun x525 () Int)
(declare-fun x185 () Bool)
(declare-fun x131 () Int)
(declare-fun x596 () Bool)
(declare-fun x548 (Int) Int)
(declare-fun x493 () Int)
(declare-fun x419 () Int)
(declare-fun x438 () Bool)
(declare-fun x729 () Bool)
(declare-fun x194 () Bool)
(declare-fun x364 () Int)
(declare-fun x586 () Int)
(declare-fun x543 () Int)
(declare-fun x492 () Int)
(declare-fun x547 () Bool)
(declare-fun x386 () Bool)
(declare-fun x116 () Int)
(declare-fun x377 (x15) Int)
(declare-fun x668 () Int)
(declare-fun x657 () Bool)
(declare-fun x54 () Int)
(declare-fun x508 () Bool)
(declare-fun x484 () Int)
(declare-fun x10 () Bool)
(declare-fun x253 () Int)
(declare-fun x248 () Int)
(declare-fun x574 () Int)
(declare-fun x123 () Int)
(declare-fun x576 () Int)
(declare-fun x356 () Bool)
(declare-fun x409 () Int)
(declare-fun x517 () Bool)
(declare-fun x41 () Int)
(declare-fun x162 () Bool)
(declare-fun x368 (x15) Int)
(declare-fun x497 () Bool)
(declare-fun x288 () Bool)
(declare-fun x504 () Int)
(declare-fun x284 () Bool)
(declare-fun x423 () Int)
(declare-fun x111 () Int)
(declare-fun x345 () Int)
(declare-fun x148 () x15)
(declare-fun x263 () Bool)
(declare-fun x177 () Int)
(declare-fun x691 () Bool)
(declare-fun x126 () Int)
(declare-fun x380 () x15)
(declare-fun x643 () Int)
(declare-fun x205 () Int)
(declare-fun x264 () Int)
(declare-fun x363 () Int)
(declare-fun x25 () Int)
(declare-fun x600 () Bool)
(declare-fun x66 () Bool)
(declare-fun x388 () Int)
(declare-fun x569 () Int)
(declare-fun x350 (Int) Int)
(declare-fun x93 () Int)
(declare-fun x422 () Int)
(declare-fun x359 (x15) Int)
(declare-fun x237 () Int)
(declare-fun x242 () Int)
(declare-fun x102 () Bool)
(declare-fun x516 () Bool)
(declare-fun x485 () Bool)
(declare-fun x457 () Int)
(declare-fun x466 () Int)
(declare-fun x509 () Int)
(declare-fun x231 () Int)
(declare-fun x238 () Bool)
(declare-fun x545 () Int)
(declare-fun x629 (Int) Int)
(declare-fun x449 () Int)
(declare-fun x472 () Bool)
(declare-fun x748 () Int)
(declare-fun x400 () Int)
(declare-fun x252 () Int)
(declare-fun x197 () Bool)
(declare-fun x683 (x15) Int)
(declare-fun x739 () Int)
(declare-fun x86 () Bool)
(declare-fun x188 () Int)
(declare-fun x473 () Bool)
(declare-fun x174 () Int)
(declare-fun x365 () Int)
(declare-fun x246 () Int)
(declare-fun x239 () Bool)
(declare-fun x282 (x15) Int)
(declare-fun x737 () Bool)
(declare-fun x522 () Int)
(declare-fun x535 () Bool)
(declare-fun x617 (x15) Int)
(declare-fun x140 () Int)
(declare-fun x523 () Bool)
(declare-fun x483 () Int)
(declare-fun x169 () Bool)
(declare-fun x565 () Bool)
(declare-fun x45 () Int)
(declare-fun x311 () Int)
(declare-fun x106 (x15) Int)
(declare-fun x627 () Bool)
(declare-fun x224 () Int)
(declare-fun x599 (x15) Int)
(declare-fun x526 () Int)
(declare-fun x679 () Int)
(declare-fun x750 () Int)
(declare-fun x566 (Int) Int)
(declare-fun x27 () Int)
(declare-fun x500 () Bool)
(declare-fun x669 () Bool)
(declare-fun x154 () Bool)
(declare-fun x366 () Bool)
(declare-fun x434 (x15) Int)
(declare-fun x602 () Bool)
(declare-fun x603 () Bool)
(declare-fun x145 () Int)
(declare-fun x593 () Int)
(declare-fun x127 () Int)
(declare-fun x152 () Int)
(declare-fun x198 () Int)
(declare-fun x244 () Int)
(declare-fun x63 (x15) Int)
(declare-fun x48 () Int)
(declare-fun x573 () Bool)
(declare-fun x216 () Bool)
(declare-fun x681 () Bool)
(declare-fun x358 () Bool)
(declare-fun x91 () Int)
(declare-fun x601 () Bool)
(declare-fun x531 () Int)
(declare-fun x609 () Bool)
(declare-fun x243 () Bool)
(declare-fun x218 () Bool)
(declare-fun x379 () Int)
(declare-fun x614 () Int)
(declare-fun x441 () Int)
(declare-fun x506 () Int)
(declare-fun x642 () Int)
(declare-fun x295 () Bool)
(declare-fun x541 () Int)
(declare-fun x620 () Bool)
(declare-fun x551 () Bool)
(declare-fun x613 () Int)
(declare-fun x109 () Int)
(declare-fun x270 () Int)
(declare-fun x598 () Int)
(declare-fun x309 () Bool)
(declare-fun x726 (Int) Int)
(declare-fun x505 () x15)
(declare-fun x635 () Int)
(declare-fun x571 () Bool)
(declare-fun x393 () Int)
(declare-fun x286 () Bool)
(declare-fun x6 () Bool)
(declare-fun x658 () Int)
(declare-fun x89 () Bool)
(declare-fun x478 () Bool)
(declare-fun x330 () Bool)
(declare-fun x158 (Int Int) Int)
(declare-fun x207 () Bool)
(declare-fun x226 () Int)
(declare-fun x690 () Int)
(declare-fun x43 () Int)
(declare-fun x498 () Int)
(declare-fun x480 () Int)
(declare-fun x84 () Int)
(declare-fun x90 () Int)
(declare-fun x521 () Int)
(declare-fun x308 () Int)
(declare-fun x519 () Int)
(declare-fun x132 () Int)
(declare-fun x329 () x15)
(declare-fun x431 () Int)
(declare-fun x676 () Int)
(declare-fun x301 () Bool)
(declare-fun x56 () Int)
(declare-fun x403 (x15) Int)
(declare-fun x675 () Int)
(declare-fun x487 () Int)
(declare-fun x104 () Bool)
(declare-fun x735 () Int)
(declare-fun x515 () Int)
(declare-fun x213 () Int)
(declare-fun x452 () Int)
(declare-fun x52 () Int)
(declare-fun x477 () Bool)
(declare-fun x228 () Int)
(declare-fun x19 () Bool)
(declare-fun x442 () Bool)
(declare-fun x273 () Bool)
(declare-fun x558 () Int)
(declare-fun x722 () Int)
(declare-fun x342 () Int)
(declare-fun x50 () Bool)
(declare-fun x265 () Bool)
(declare-fun x24 () Int)
(declare-fun x290 () Bool)
(declare-fun x296 () Bool)
(declare-fun x595 () Int)
(declare-fun x538 () Int)
(declare-fun x671 () Int)
(declare-fun x714 () Int)
(declare-fun x167 () Int)
(declare-fun x35 () Bool)
(declare-fun x289 () Int)
(declare-fun x619 () Bool)
(declare-fun x512 () Bool)
(declare-fun x383 () Int)
(declare-fun x520 () Int)
(declare-fun x220 () Bool)
(declare-fun x81 () Int)
(declare-fun x684 () Bool)
(declare-fun x249 () Bool)
(declare-fun x55 () Bool)
(declare-fun x742 () Int)
(declare-fun x351 () Int)
(declare-fun x325 () Bool)
(declare-fun x474 () Int)
(declare-fun x266 () Bool)
(declare-fun x644 () Bool)
(declare-fun x98 () Int)
(declare-fun x201 () Int)
(declare-fun x147 () Int)
(declare-fun x716 () Int)
(declare-fun x274 () Int)
(declare-fun x357 () Int)
(declare-fun x17 () Int)
(declare-fun x258 () Int)
(declare-fun x702 () Bool)
(declare-fun x279 () Bool)
(declare-fun x223 () Int)
(declare-fun x74 () Bool)
(declare-fun x171 () Bool)
(declare-fun x677 () Int)
(declare-fun x12 () Int)
(declare-fun x744 () Int)
(declare-fun x193 () Bool)
(declare-fun x486 () Int)
(declare-fun x553 () Int)
(declare-fun x396 () Bool)
(declare-fun x189 () Int)
(declare-fun x425 () Bool)
(declare-fun x303 () Bool)
(declare-fun x577 () Bool)
(declare-fun x297 () Int)
(declare-fun x195 () Bool)
(declare-fun x709 () Int)
(declare-fun x639 () Int)
(declare-fun x703 () Int)
(declare-fun x445 () Int)
(declare-fun x532 () Int)
(declare-fun x332 () Bool)
(declare-fun x105 () Int)
(declare-fun x416 (Int Int) Int)
(declare-fun x360 () Int)
(declare-fun x740 () Int)
(declare-fun x715 () Int)
(declare-fun x692 () Int)
(declare-fun x13 () Int)
(declare-fun x95 () Int)
(declare-fun x719 () Bool)
(declare-fun x638 () Int)
(declare-fun x143 (x15) Int)
(declare-fun x404 () Int)
(declare-fun x156 () Int)
(declare-fun x557 () Int)
(declare-fun x219 () Bool)
(declare-fun x591 () Int)
(declare-fun x276 () Bool)
(declare-fun x373 () x15)
(declare-fun x495 () Int)
(declare-fun x155 () Bool)
(declare-fun x331 () Int)
(declare-fun x597 () Int)
(declare-fun x646 () Bool)
(declare-fun x372 () Bool)
(declare-fun x71 () Int)
(declare-fun x468 () Int)
(declare-fun x5 () Int)
(declare-fun x475 () Int)
(declare-fun x397 () Bool)
(declare-fun x724 () Bool)
(declare-fun x612 () Int)
(declare-fun x83 () Int)
(declare-fun x491 () Int)
(declare-fun x736 () Int)
(declare-fun x562 () Int)
(declare-fun x283 () Bool)
(declare-fun x29 () Bool)
(declare-fun x100 () Int)
(declare-fun x556 () Int)
(declare-fun x277 () Int)
(declare-fun x414 () Int)
(declare-fun x121 () Int)
(declare-fun x611 () Int)
(declare-fun x153 () Int)
(declare-fun x352 () Bool)
(declare-fun x570 () Int)
(declare-fun x727 () Bool)
(declare-fun x128 () Int)
(declare-fun x482 () Int)
(declare-fun x378 () Int)
(declare-fun x588 () Bool)
(declare-fun x375 () Int)
(declare-fun x572 () Int)
(declare-fun x326 () Int)
(declare-fun x221 () Int)
(declare-fun x206 () Bool)
(declare-fun x306 () Int)
(declare-fun x355 () Bool)
(declare-fun x254 () Bool)
(declare-fun x136 () Int)
(declare-fun x42 () Int)
(declare-fun x210 () Int)
(declare-fun x479 () Bool)
(declare-fun x58 () x15)
(declare-fun x307 () Int)
(declare-fun x408 () Int)
(declare-fun x604 () Int)
(declare-fun x695 () Bool)
(declare-fun x463 () Int)
(declare-fun x651 () Bool)
(declare-fun x272 () Int)
(declare-fun x337 () Bool)
(declare-fun x610 () Bool)
(declare-fun x661 () Int)
(declare-fun x583 () Int)
(declare-fun x594 () Bool)
(declare-fun x455 () Int)
(declare-fun x214 () Int)
(declare-fun x47 () Int)
(declare-fun x285 () Int)
(declare-fun x631 () Int)
(declare-fun x163 () Int)
(declare-fun x666 () Int)
(declare-fun x527 () Int)
(declare-fun x436 () Int)
(declare-fun x125 () Bool)
(declare-fun x18 () Int)
(declare-fun x730 () Int)
(declare-fun x412 () Int)
(declare-fun x453 () Int)
(declare-fun x530 (Int) Int)
(declare-fun x149 () Int)
(declare-fun x741 () Int)
(declare-fun x251 () Bool)
(declare-fun x405 () Bool)
(declare-fun x689 () Int)
(declare-fun x376 () Bool)
(declare-fun x584 () Int)
(declare-fun x150 () Int)
(declare-fun x705 () Int)
(declare-fun x395 () Int)
(declare-fun x559 () Int)
(declare-fun x2 () Int)
(declare-fun x240 () Int)
(declare-fun x361 () Int)
(declare-fun x424 (Int) Int)
(declare-fun x407 () Bool)
(declare-fun x589 () Int)
(declare-fun x626 () Bool)
(declare-fun x471 () Int)
(declare-fun x4 (Int Int) Int)
(declare-fun x659 () Bool)
(declare-fun x370 () Int)
(declare-fun x624 () Int)
(declare-fun x687 () Bool)
(declare-fun x8 () Bool)
(declare-fun x236 () Int)
(declare-fun x700 () Bool)
(declare-fun x159 () Bool)
(declare-fun x587 () x15)
(declare-fun x110 () Bool)
(declare-fun x578 () Bool)
(declare-fun x418 () Int)
(declare-fun x433 () Int)
(declare-fun x723 () Int)
(declare-fun x579 () Int)
(declare-fun x514 (x15) Int)
(declare-fun x257 () x15)
(declare-fun x451 () Int)
(declare-fun x175 () Int)
(declare-fun x187 (x15) Int)
(declare-fun x333 () Bool)
(declare-fun x446 () Bool)
(declare-fun x426 () Bool)
(declare-fun x720 () Bool)
(declare-fun x459 () Int)
(declare-fun x202 () Bool)
(declare-fun x118 () Bool)
(declare-fun x227 (x15) Int)
(declare-fun x255 () Bool)
(declare-fun x209 () Int)
(declare-fun x652 () Int)
(declare-fun x637 () Int)
(declare-fun x494 () Int)
(declare-fun x117 () Bool)
(declare-fun x673 () Bool)
(declare-fun x161 () Int)
(declare-fun x183 () Int)
(declare-fun x134 () Int)
(declare-fun x490 () Int)
(declare-fun x278 () Int)
(declare-fun x481 () Bool)
(declare-fun x552 () Int)
(declare-fun x259 () Bool)
(declare-fun x502 () Int)
(declare-fun x467 () Int)
(declare-fun x678 (x15) Int)
(declare-fun x444 () Bool)
(declare-fun x697 () Int)
(declare-fun x166 () Bool)
(declare-fun x247 () Bool)
(declare-fun x623 () Int)
(define-fun x269 ((x15 x15) (x354 Int)) x15 (ite ((_ is x662) x15) (x662 (x499 x15) (+ x354 (x200 x15))) (ite ((_ is x76) x15) (x76 (x503 x15) (x564 x15) (+ x354 (x353 x15))) (x680 (+ (x606 x15) x354)))))
(define-fun x230 ((x524 Int)) Int (ite (and (>= x524 0) (< x524 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x524 (- x524 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x23 ((x524 Int)) Int (ite (and (< x524 0) (>= x524 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x524) x524))
(define-fun x346 ((x280 Int)) Bool (and (<= 0 x280) (< x280 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x513 ((x280 Int)) Bool (and (= (x158 x280 115792089237316195423570985008687907853269984665640564039457584007913129639935) x280) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280) x280)))
(define-fun x369 ((x280 Int)) Bool (and (= (x158 x280 0) 0) (= (x158 0 x280) 0)))
(define-fun x665 ((x280 Int)) Bool (= x280 (x158 x280 x280)))
(define-fun x108 ((x280 Int)) Bool (and (x665 x280) (x513 x280) (x369 x280)))
(define-fun x262 ((x280 Int) (x178 Int)) Bool (= (x158 x280 x178) (x158 x178 x280)))
(define-fun x539 ((x280 Int) (x178 Int)) Bool (and (=> (>= x178 0) (<= (x158 x280 x178) x178)) (<= 0 (x158 x280 x178)) (=> (>= x280 0) (>= x280 (x158 x280 x178)))))
(define-fun x64 ((x280 Int) (x178 Int)) Bool (and (x539 x280 x178) (x262 x280 x178)))
(define-fun x305 ((x280 Int)) Bool (= (+ (x158 x280 1208907372870555465154560) (mod x280 18446744073709551616)) (mod x280 1208925819614629174706176)))
(define-fun x141 ((x280 Int)) Bool (and (x305 x280) (x64 x280 1208907372870555465154560)))
(define-fun x402 ((x280 Int)) Bool (= (+ (x158 x280 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x280 32)) (mod x280 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x211 ((x280 Int)) Bool (and (x402 x280) (x64 x280 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x717 ((x280 Int)) Bool (= (mod x280 6582018229284824168619876730229402019930943462534319453394436096) (+ (x158 x280 6582018229189043197315758676582005330734049138558148258257960960) (mod x280 95780971304118053647396689196894323976171195136475136))))
(define-fun x650 ((x280 Int)) Bool (and (x717 x280) (x64 x280 6582018229189043197315758676582005330734049138558148258257960960)))
(define-fun x632 ((x280 Int)) Bool (= (mod x280 144115188075855872) (+ (x158 x280 72057594037927936) (mod x280 72057594037927936))))
(define-fun x489 ((x280 Int)) Bool (and (x632 x280) (x64 x280 72057594037927936)))
(define-fun x191 ((x280 Int)) Bool (= (+ (x158 x280 144115188075855872) (mod x280 144115188075855872)) (mod x280 288230376151711744)))
(define-fun x298 ((x280 Int)) Bool (and (x191 x280) (x64 x280 144115188075855872)))
(define-fun x725 ((x280 Int)) Bool (= (mod x280 576460752303423488) (+ (x158 x280 288230376151711744) (mod x280 288230376151711744))))
(define-fun x747 ((x280 Int)) Bool (and (x725 x280) (x64 x280 288230376151711744)))
(define-fun x560 ((x280 Int)) Bool (= (+ (x158 x280 576460752303423488) (mod x280 576460752303423488)) (mod x280 1152921504606846976)))
(define-fun x170 ((x280 Int)) Bool (and (x64 x280 576460752303423488) (x560 x280)))
(define-fun x196 ((x280 Int)) Bool (= (mod x280 2305843009213693952) (+ (mod x280 1152921504606846976) (x158 x280 1152921504606846976))))
(define-fun x312 ((x280 Int)) Bool (and (x196 x280) (x64 x280 1152921504606846976)))
(define-fun x78 ((x280 Int)) Bool (= (x158 x280 340282366920938463463374607431768211455) (mod x280 340282366920938463463374607431768211456)))
(define-fun x582 ((x280 Int)) Bool (and (x64 x280 340282366920938463463374607431768211455) (x78 x280)))
(define-fun x294 ((x280 Int)) Bool (= (mod x280 1099511627776) (x158 x280 1099511627775)))
(define-fun x129 ((x280 Int)) Bool (and (x294 x280) (x64 x280 1099511627775)))
(define-fun x349 ((x208 Int)) Int (ite (= x208 128) 47697743078316515612600118454610093677384569027399280592730813262423046225920 (x350 x208)))
(define-fun x749 ((x208 Int)) Int (ite (= 132 x208) (x20 x641) (x349 x208)))
(define-fun x640 ((x208 Int)) Int (ite (= x208 164) x614 (x749 x208)))
(define-fun x322 ((x208 Int)) Int (ite (= 196 x208) x739 (x640 x208)))
(define-fun x540 ((x208 Int)) Int (ite (= x208 1504) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x144 x208)))
(define-fun x335 ((x208 Int)) Int (ite (and (>= x208 1504) (< x208 (+ 32 1504))) (x424 (+ (- x208 1504) 0)) (x540 x208)))
(define-fun x215 ((x208 x15)) Int (ite x309 (x316 x208) (x143 x208)))
(define-fun x122 ((x208 Int)) Int (ite x155 (x335 x208) (x540 x208)))
(define-fun x119 ((x208 Int)) Int (ite (= x631 x208) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x122 x208)))
(define-fun x439 ((x208 Int)) Int (ite (and (< x208 (+ x631 128)) (<= x631 x208)) (x222 (+ 0 (- x208 x631))) (x119 x208)))
(define-fun x580 ((x208 Int)) Int (ite x430 (x439 x208) (x119 x208)))
(define-fun x447 ((x208 Int)) Int (ite (= x97 x208) 10894474682274239493831243662817379401261526446360622092269559273883068006400 (x580 x208)))
(define-fun x344 ((x208 Int)) Int (ite (and (> (+ 32 x97) x208) (<= x97 x208)) (x548 (+ (- x208 x97) 0)) (x447 x208)))
(define-fun x648 ((x208 Int)) Int (ite x203 (x344 x208) (x447 x208)))
(define-fun x261 ((x208 Int)) Int (ite (= x208 x679) 10894474682274239493831243662817379401261526446360622092269559273883068006400 (x648 x208)))
(define-fun x339 ((x208 Int)) Int (ite (and (>= x208 x679) (> (+ x679 32) x208)) (x33 (+ 0 (- x208 x679))) (x261 x208)))
(define-fun x92 ((x208 Int)) Int (ite x80 (x339 x208) (x261 x208)))
(define-fun x31 ((x208 Int)) Int (ite (= x208 x45) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x92 x208)))
(define-fun x40 ((x208 Int)) Int (ite (= x208 x233) x409 (x31 x208)))
(define-fun x268 ((x208 Int)) Int (ite (= x208 x126) 0 (x40 x208)))
(define-fun x245 ((x208 Int)) Int (ite (= x510 x208) 0 (x268 x208)))
(define-fun x712 ((x208 Int)) Int (ite (= x467 x208) 0 (x245 x208)))
(define-fun x528 ((x208 Int)) Int (ite (= x308 x208) x643 (x712 x208)))
(define-fun x536 ((x208 Int)) Int (ite (= x208 x509) 0 (x528 x208)))
(define-fun x165 ((x208 Int)) Int (ite (= x236 x208) x427 (x536 x208)))
(define-fun x674 ((x208 Int)) Int (ite (= x208 x436) x614 (x165 x208)))
(define-fun x320 ((x208 Int)) Int (ite (= x208 x466) x82 (x674 x208)))
(define-fun x130 ((x208 Int)) Int (ite (and (> (+ 96 x45) x208) (>= x208 x45)) (x566 (+ 0 (- x208 x45))) (x320 x208)))
(define-fun x534 ((x208 Int)) Int (ite x372 (x130 x208) (x320 x208)))
(define-fun x608 ((x208 Int)) Int (ite (= x136 x208) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x534 x208)))
(define-fun x664 ((x208 Int)) Int (ite (= x208 x570) x739 (x608 x208)))
(define-fun x421 ((x208 Int)) Int (ite (and (>= x208 x136) (> (+ x136 32) x208)) (x410 (+ (- x208 x136) 0)) (x664 x208)))
(define-fun x653 ((x208 Int)) Int (ite x707 (x421 x208) (x664 x208)))
(define-fun x731 ((x208 Int)) Int (ite (= x208 x152) 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x653 x208)))
(define-fun x53 ((x208 Int)) Int (ite (= x208 x461) x739 (x731 x208)))
(define-fun x181 ((x208 Int)) Int (ite (= x689 x208) x54 (x53 x208)))
(define-fun x645 ((x208 Int)) Int (ite (and (<= x152 x208) (> (+ x152 64) x208)) (x655 (+ (- x208 x152) 0)) (x181 x208)))
(define-fun x581 ((x208 Int)) Int (ite x309 (x645 x208) (x181 x208)))
(define-fun x94 ((x208 Int)) Int (ite (= x611 x208) 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x581 x208)))
(define-fun x34 ((x208 Int)) Int (ite (= x319 x208) x739 (x94 x208)))
(define-fun x382 ((x208 Int)) Int (ite (= x449 x208) x739 (x34 x208)))
(define-fun x204 ((x208 Int)) Int (ite (= x226 x208) x54 (x382 x208)))
(define-fun x317 ((x208 Int)) Int (ite (= x244 x208) x716 (x204 x208)))
(define-fun x550 ((x208 Int)) Int (ite (and (> (+ x611 96) x208) (>= x208 x611)) (x530 (+ (- x208 x611) 0)) (x317 x208)))
(define-fun x190 ((x208 x15)) Int (ite x309 (x683 x208) (x678 x208)))
(define-fun x672 ((x208 Int)) Int (ite x89 (x550 x208) (x317 x208)))
(define-fun x469 ((x208 x15)) Int (ite x89 (x227 x208) (ite x309 (x403 x208) (x599 x208))))
(define-fun x454 ((x208 x15)) Int (ite x89 (x135 x208) (ite x309 (x359 x208) (x151 x208))))
(define-fun x142 ((x208 Int)) Int (ite (= x208 x590) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x672 x208)))
(define-fun x328 ((x208 Int)) Int (ite (= x708 x208) x209 (x142 x208)))
(define-fun x340 ((x208 Int)) Int (ite (= x621 x208) 0 (x328 x208)))
(define-fun x496 ((x208 Int)) Int (ite (= x208 x404) 0 (x340 x208)))
(define-fun x507 ((x208 Int)) Int (ite (= x208 x25) x258 (x496 x208)))
(define-fun x704 ((x208 Int)) Int (ite (= x285 x208) x323 (x507 x208)))
(define-fun x32 ((x208 Int)) Int (ite (= x562 x208) x441 (x704 x208)))
(define-fun x14 ((x208 Int)) Int (ite (= x223 x208) x427 (x32 x208)))
(define-fun x688 ((x208 Int)) Int (ite (= x208 x556) x614 (x14 x208)))
(define-fun x343 ((x208 Int)) Int (ite (= x96 x208) x82 (x688 x208)))
(define-fun x385 ((x208 Int)) Int (ite (and (> (+ x590 96) x208) (<= x590 x208)) (x726 (+ (- x208 x590) 0)) (x343 x208)))
(define-fun x69 ((x208 Int)) Int (ite x450 (x385 x208) (x343 x208)))
(define-fun x718 ((x280 Int)) Bool (=> (and (not (= x280 3214050684)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x280)) (not (= 1152921504606846976 x280)) (not (= x280 1000000000000000000000000000)) (not (= x280 1461501637330902918203684832716283019655932542976)) (not (= 12865787693035132824841220556520878650363331629515618226606398223101458848 x280)) (not (= x280 288230376151711744)) (not (= x280 1769207620)) (not (= 2054196882 x280)) (not (= 1089035750 x280)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280)) (not (= 144115188075855872 x280)) (not (= 3166102818 x280)) (not (= 3512598611 x280)) (not (= 509899769 x280)) (not (= x280 274184521717934524641157099916833587349)) (not (= x280 340282366920938463463374607431768211455)) (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 x280)) (not (= x280 3302387176)) (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 x280)) (not (= x280 47697743078316515612600118454610093677384569027399280592730813262423046225920)) (not (= 1099511627775 x280)) (not (= 994519296000000 x280)) (> x280 10000) (not (= x280 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x280 1461501637330902918203684832716283019655932542975)) (not (= x280 65535)) (not (= 340282366920938463463374607431768211456 x280)) (not (= x280 18446744073709551615)) (not (= 72057594037927936 x280)) (not (= 4294967296 x280)) (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x280)) (not (= x280 3293254135)) (not (= x280 500000000000000000000000000)) (not (= 1099511627776 x280)) (not (= x280 54940573406046109056602222415596668683460243721328594580962599660119180443648)) (not (= x280 115792089237316195423570985008687907853269984665640564039457584007913129634935)) (not (= x280 576460752303423488)) (not (= x280 31536000)) (not (= 3440452482 x280)) (not (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 x280)) (not (= 1208907372870555465154560 x280)) (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 x280)) (not (= 6582018229189043197315758676582005330734049138558148258257960960 x280)) (not (= 10894474682274239493831243662817379401261526446360622092269559273883068006400 x280))) (not ((_ is x680) (x302 x280)))))
(assert (= (and x426 x508) x309))
(assert (= (x302 1000000000000000000000000000) (x680 1000000000000000000000000000)))
(assert (= 1089035750 (x20 (x680 1089035750))))
(assert (= (x680 80397878463760440755375692149700041695399247739548614023716483005714108776448) (x302 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x346 x36))
(assert (x346 x177))
(assert (= x169 (and x627 x500)))
(assert (= x153 (x20 (x302 x153))))
(assert (= x670 (or x80 x337)))
(assert (= (and (not x74) x517) x615))
(assert (x346 x51))
(assert (x346 x636))
(assert (x346 x98))
(assert (= (and x193 (not x660)) x225))
(assert (x211 x459))
(assert (x346 x432))
(assert (x346 x404))
(assert (= x118 (and (not x446) x470)))
(assert (x346 x593))
(assert (x108 x198))
(assert (= x651 (and x470 x446)))
(assert (x346 x699))
(assert (= (x20 (x680 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (= (and x75 (not x239)) x481))
(assert (x346 x415))
(assert (x346 x244))
(assert (x346 x735))
(assert (= (x302 1208907372870555465154560) (x680 1208907372870555465154560)))
(assert (= x19 (or x348 x450)))
(assert (x346 x99))
(assert (x108 x440))
(assert (x346 x389))
(assert (= 3440452482 (x20 (x680 3440452482))))
(assert (x346 x96))
(assert (= x89 (and x610 x669)))
(assert (= (or x309 x50) x263))
(assert (x346 x431))
(assert (= (and x497 x673) x80))
(assert (x346 x331))
(assert (= (or x437 x225) x547))
(assert (= (x20 (x680 274184521717934524641157099916833587349)) 274184521717934524641157099916833587349))
(assert (x346 x654))
(assert (= (x302 12865787693035132824841220556520878650363331629515618226606398223101458848) (x680 12865787693035132824841220556520878650363331629515618226606398223101458848)))
(assert (x346 x607))
(assert (x346 x371))
(assert (x346 x689))
(assert (x346 x696))
(assert (x346 x703))
(assert (x346 x449))
(assert (x489 x177))
(assert (= x46 (=> (and (= x511 (x158 1099511627775 x393)) (<= x311 1099511627775) (= x737 (or (and (= (<= x541 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x541 128)) (> x541 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x580 x272) x311) (>= x658 0) (= (x230 (+ x631 32)) x201) (= (x230 (+ x381 32)) x272) (= x658 (x63 x505)) (not x325) (= (x580 x201) x270) (= (x230 (+ 31 x541)) x741) (= (x230 (+ x631 x431)) x671) (= (x580 x381) x26) (not x737) (= x370 (x580 x631)) (= x325 (= 0 x703)) (= x381 (x230 (+ x201 32))) (< x658 1099511627776) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x741) x431) (= (= x511 x658) x171) (<= x658 1099511627775)) (and (=> (and (and (or (and (not x446) (and (not x719) (= x493 (x158 340282366920938463463374607431768211455 x491)) (= x491 x412) (= (ite x243 1 0) x2) (= x326 x101) (= (or x603 x571) x243) (= x101 (div x458 31536000)) (= (div x575 1000000000000000000000000000) x491) (= x603 (not x234)) (= (x230 (+ x429 500000000000000000000000000)) x575) (= (mod (* x635 x701) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x429) (= x462 (x23 (- x393 x61))) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x635) x574) (< 0 x2) (= (+ x13 x326) x701) (not x330) (= 1000000000000000000000000000 x13) (= x458 (* x462 x568)) (= (> x491 340282366920938463463374607431768211455) x719) (= (> x61 x406) x330) (< (* x462 x568) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x101 1000000000000000000000000000)) (= (= 0 x635) x571) (= x234 (> x701 x574)))) (and x446 (= x412 x635))) (= (= 0 x568) x446)) (not x171)) x473) (=> (and (and (= x47 x28) (= x671 x654)) x171) x332)))))
(assert (x108 x515))
(assert (x346 x556))
(assert (x718 274184521717934524641157099916833587349))
(assert (x346 x392))
(assert (x346 x48))
(assert (= (div x518 18446744073709551616) (x4 x518 64)))
(assert (x346 x705))
(assert (x346 x210))
(assert (= (=> (and (and (= x210 x417) (= (x230 (+ x510 32)) x467) (= x643 (+ x277 x417)) (= (x151 x329) x409) (<= x409 340282366920938463463374607431768211455) (= x277 x391) (= (x230 (+ x363 31)) x696) (= x549 (x599 x148)) (= x308 (x230 (+ 32 x467))) (= x466 (x230 (+ 32 x436))) (= (x230 (+ 288 x543)) x45) (= (x230 (+ 32 x509)) x236) (< x409 340282366920938463463374607431768211456) (= (x230 (+ x233 32)) x126) (not x290) (= (x230 (+ x45 4)) x233) (>= x549 0) (= x436 (x230 (+ x236 32))) (<= 0 x409) (= (x230 (+ 32 x126)) x510) (= (x269 x148 1) x329) (< x549 1461501637330902918203684832716283019655932542976) (= (< 0 x278) x601) (< (+ x210 x391) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x148 (x269 x67 1)) (= (x92 x679) x210) (= x509 (x230 (+ 32 x308))) (not x721) (= x543 (x230 (+ x679 x379))) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x696) x379) (<= x549 1461501637330902918203684832716283019655932542975) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x363) true) (> 32 x363)) (> x363 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x290) (= x721 (= 0 x636))) (or (and (= x93 x278) (not x601)) (and x601 (and (= x93 1) (< x667 4294967296))))) x425) x255))
(assert (x346 x250))
(assert true)
(assert (= (=> (and (= x132 (x69 x590)) (= (x230 (+ x525 32)) x730) (= x251 (< 340282366920938463463374607431768211455 x443)) (= x569 (x158 340282366920938463463374607431768211455 x235)) (= x512 (< 340282366920938463463374607431768211455 x235)) (= (= 0 x300) x657) (= (or (and (> 96 x428) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x428) true)) (> x428 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x79) (= 1 x175) (= (x69 x730) x443) (not x396) (not x657) (= (x158 340282366920938463463374607431768211455 x443) x315) (not x512) (= (x69 x525) x235) (not x79) (= x525 (x230 (+ x590 32))) (= (< 340282366920938463463374607431768211455 x132) x396) (not x251) (= x538 (x158 340282366920938463463374607431768211455 x132))) x202) x695))
(assert (x346 x584))
(assert (x346 x246))
(assert (x346 x553))
(assert (x346 x285))
(assert (x346 x224))
(assert (x346 x381))
(assert (x346 x57))
(assert (= (and (not x673) x497) x337))
(assert (= (x20 (x680 3214050684)) 3214050684))
(assert (x346 x49))
(assert (x346 x393))
(assert (= (=> (and (and (= (x230 (+ x223 32)) x556) (= (x230 (+ 32 x285)) x562) (= (x230 (+ x590 4)) x708) (= (x230 (+ x404 32)) x25) (= x285 (x230 (+ x25 32))) (= (> x639 0) x207) (= (x230 (+ 32 x556)) x96) (= (x230 (+ 32 x562)) x223) (= x404 (x230 (+ 32 x621))) (= (x230 (+ x708 32)) x621)) (or (and x207 (and (> 4294967296 x428) (= 1 x300))) (and (not x207) (= x639 x300)))) x695) x301))
(assert (=> (<= x17 10000) (= (x680 x17) (x302 x17))))
(assert (x346 x9))
(assert (x346 x595))
(assert (x346 x552))
(assert (x582 x132))
(assert (x346 x563))
(assert (= (x680 31536000) (x302 31536000)))
(assert (= true x551))
(assert (x346 x461))
(assert (x346 x72))
(assert (x346 x586))
(assert (x108 x132))
(assert (x346 x175))
(assert (= x110 (and (not x438) x444)))
(assert (x346 x188))
(assert (x346 x420))
(assert (x718 x134))
(assert (x346 x714))
(assert (x346 x736))
(assert (= 0 (x144 x525)))
(assert (x346 x157))
(assert (x211 x395))
(assert (x346 x357))
(assert (x346 x311))
(assert (= x508 (or x707 x561)))
(assert (x346 x308))
(assert (x346 x575))
(assert (x346 x12))
(assert (=> (<= x114 10000) (= (x302 x114) (x680 x114))))
(assert (not x684))
(assert (= (=> (and (= x563 (x158 1152921504606846976 x177)) (= (not (= 0 x487)) x628) (= (x158 72057594037927936 x177) x487) (= (x158 144115188075855872 x177) x12) (= (not (= x146 0)) x292) (= x146 (x158 288230376151711744 x177)) (= (x158 576460752303423488 x177) x492) (= x397 (not (= 0 x563))) (= x27 (x230 (+ 64 x654))) (= x479 (not (= 0 x12))) (= x471 1472) (= (not (= 0 x492)) x358)) (and (=> (and x628 (= (x230 (+ 64 x27)) x97)) (and (=> (and (and (or (and (not x702) (= x133 x341)) (and x702 (and (= 1 x133) (< x418 4294967296)))) (= (> x341 0) x702)) (not x397)) x647) (=> x397 x720))) (=> (not x628) x720))) x332))
(assert (x346 x487))
(assert (=> (>= 10000 x384) (= (x680 x384) (x302 x384))))
(assert (x346 x107))
(assert (x346 x706))
(assert (= (x302 500000000000000000000000000) (x680 500000000000000000000000000)))
(assert (x346 x90))
(assert (x211 x522))
(assert (= (=> (and (= x11 (x230 (+ x676 500000000000000000000000000))) (= x217 (x158 340282366920938463463374607431768211455 x52)) (not x218) (< 0 x693) (= (mod (* x24 x28) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x676) (= x390 (< x313 x24)) (= x748 x52) (= x546 (not x390)) (= x693 (ite x398 1 0)) (= (or x197 x546) x398) (= x197 (= x28 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x28) x313) (= (> x52 340282366920938463463374607431768211455) x218) (= (div x11 1000000000000000000000000000) x52)) x727) x387))
(assert (= x331 (x20 (x302 x331))))
(assert (x346 x406))
(assert (x346 x591))
(assert (= (x302 3293254135) (x680 3293254135)))
(assert (x718 x30))
(assert (= (x680 3440452482) (x302 3440452482)))
(assert (= (x20 (x680 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x346 x549))
(assert (= 340282366920938463463374607431768211456 (x20 (x680 340282366920938463463374607431768211456))))
(assert (x346 x182))
(assert (x346 x621))
(assert (x346 x111))
(assert (x346 x84))
(assert (x346 x658))
(assert (= x254 (and x535 x171)))
(assert (= x259 (=> (and (and (= (x230 (+ x184 500000000000000000000000000)) x56) (= (x230 (+ x306 32)) x103) (= (x158 6582018229189043197315758676582005330734049138558148258257960960 x177) x383) (= x258 (x672 x306)) (= (mod (* x495 x47) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x184) (= (x230 (+ 288 x455)) x590) (= (div x56 1000000000000000000000000000) x323) (not x273) (= x441 (x672 x103)) (= x286 (= x750 0)) (= x265 (not x334)) (= 1472 x123) (= (x230 (+ 32 x611)) x306) (<= 0 x16) (= x579 (x4 x383 176)) (= (or x600 x265) x219) (= x459 (x230 (+ 31 x87))) (= x600 (= x47 0)) (= x16 (x469 x148)) (= x455 (x230 (+ 128 x287))) (= x660 (= 0 x579)) (= (x230 (+ x576 x611)) x287) (> 1461501637330902918203684832716283019655932542976 x16) (<= x16 1461501637330902918203684832716283019655932542975) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x459) x576) (> x666 0) (not x286) (= x273 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x87) (and (= (<= x87 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x87 96)))) (= (> x495 x714) x334) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x47) x714) (= x666 (ite x219 1 0))) (or (and (and (> 340282366920938463463374607431768211456 x90) (= x90 (x454 x329)) (>= 340282366920938463463374607431768211455 x90) (= x90 x209) (>= x90 0)) (not x660)) (and x660 (= x209 0)))) x301)))
(assert (= (x20 (x680 47697743078316515612600118454610093677384569027399280592730813262423046225920)) 47697743078316515612600118454610093677384569027399280592730813262423046225920))
(assert (= (+ 1 (x20 x373)) (x20 (x269 x373 1))))
(assert (= x134 (x20 (x302 x134))))
(assert (x346 x486))
(assert (x346 x232))
(assert (x346 x52))
(assert (= x622 (or x154 x372)))
(assert (x346 x2))
(assert (x346 x452))
(assert (= (x20 (x680 288230376151711744)) 288230376151711744))
(assert (x346 x347))
(assert (= x561 (and (not x10) x199)))
(assert (x346 x379))
(assert (x170 x177))
(assert (x346 x413))
(assert (x346 x97))
(assert (= (and x601 x670) x372))
(assert (x346 x289))
(assert (= (x20 (x302 x384)) x384))
(assert (x346 x493))
(assert (x346 x161))
(assert (x346 x61))
(assert (= x478 (or x681 x254)))
(assert (x346 x511))
(assert (= x647 (=> (and (or (and x673 (and (= x636 1) (> 4294967296 x363))) (and (= x636 x527) (not x673))) (and (= (x230 (+ 31 x418)) x72) (not x283) (= x687 (= x133 0)) (= (x648 x97) x391) (= x283 (or (and (> 32 x418) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x418))) (> x418 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (> x527 0) x673) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x72) x401) (= (x230 (+ x401 x97)) x679) (not x687))) x255)))
(assert (x346 x634))
(assert (= 3166102818 (x20 (x680 3166102818))))
(assert (= (and x551 (not x66)) x659))
(assert (= (or x733 x203) x497))
(assert (x346 x164))
(assert (x582 x491))
(assert (x346 x748))
(assert (x211 x696))
(assert (x346 x475))
(assert (= (or x430 x615) x535))
(assert (x747 x177))
(assert (= (x144 x306) 0))
(assert (x108 x72))
(assert (x346 x723))
(assert (= x669 (or x626 (and x263 (not x284)))))
(assert (x346 x520))
(assert (x346 x152))
(assert (x346 x401))
(assert (x346 x60))
(assert (= (x20 (x269 x148 1)) (+ (x20 x148) 1)))
(assert (x346 x167))
(assert (x346 x741))
(assert (x346 x554))
(assert (x346 x299))
(assert (x346 x127))
(assert (x346 x233))
(assert (x582 x235))
(assert (= (x20 (x680 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (= x630 (=> (and (or x29 (not x29)) (= (= 0 x750) x29)) x259)))
(assert (x346 x679))
(assert (x346 x241))
(assert (= (x680 74874610042509929465218460033027201126834042060343647393369405262880053395456) (x302 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (= (or x155 x659) x517))
(assert (= x450 (and x207 x547)))
(assert (x346 x42))
(assert (x346 x597))
(assert (x346 x115))
(assert (= (x680 2054196882) (x302 2054196882)))
(assert (x346 x223))
(assert (= 12865787693035132824841220556520878650363331629515618226606398223101458848 (x20 (x680 12865787693035132824841220556520878650363331629515618226606398223101458848))))
(assert (x718 x182))
(assert (= (+ 1 (x20 x663)) (x20 (x269 x663 1))))
(assert (= (x680 3214050684) (x302 3214050684)))
(assert (x108 144115188075855872))
(assert (= (x20 (x680 2054196882)) 2054196882))
(assert (x346 x133))
(assert (x346 x17))
(assert (x346 x744))
(assert (= (x20 (x269 x67 1)) (+ (x20 x67) 1)))
(assert (= (and x263 x284) x626))
(assert (x346 x87))
(assert (x346 x205))
(assert (x718 x299))
(assert (x108 x393))
(assert (x346 x643))
(assert (x298 x177))
(assert (x346 x37))
(assert (= (and x162 x702) x203))
(assert (x346 x614))
(assert (x312 x177))
(assert (x346 x400))
(assert (= (x20 (x680 74874610042509929465218460033027201126834042060343647393369405262880053395456)) 74874610042509929465218460033027201126834042060343647393369405262880053395456))
(assert (= (and (not x171) x535) x470))
(assert (x346 x209))
(assert (= 576460752303423488 (x20 (x680 576460752303423488))))
(assert (x346 x637))
(assert (x346 x529))
(assert (x346 x56))
(assert (=> (>= 10000 x614) (= (x680 x614) (x302 x614))))
(assert (x346 x41))
(assert (x718 x331))
(assert (=> (>= 10000 x299) (= (x302 x299) (x680 x299))))
(assert (x346 x526))
(assert (= (+ (x20 x67) 2) (x20 (x269 x67 2))))
(assert (x346 x88))
(assert (x346 x24))
(assert (x129 x393))
(assert (x346 x231))
(assert (x108 x52))
(assert (= (or x6 x481) x249))
(assert (x346 x44))
(assert (=> (>= 10000 x134) (= (x302 x134) (x680 x134))))
(assert (x346 x611))
(assert (x346 x123))
(assert (= x216 (and x478 x628)))
(assert (x346 x443))
(assert (x346 x557))
(assert (x346 x623))
(assert (x346 x315))
(assert (= x399 (=> (and (and (= x610 (> x750 0)) (= (= x420 0) x124) (= x226 (x230 (+ 32 x449))) (<= x716 340282366920938463463374607431768211455) (<= 0 x716) (= x716 (x215 x505)) (= x542 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x656) true) (> 64 x656)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x656))) (< x716 340282366920938463463374607431768211456) (not x542) (= (x230 (+ x152 x710)) x611) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x675) x710) (not x124) (= (x230 (+ x656 31)) x675) (= (x230 (+ 32 x319)) x449) (= x319 (x230 (+ 4 x611))) (= (x230 (+ x226 32)) x244)) (or (not x610) (and (and (= x9 (x190 (x302 x331))) (= x356 (= x105 (x605 (x302 x30)))) (< x87 4294967296) (= x644 (>= (x605 (x302 x331)) x9)) x644 (= x105 (x190 (x302 x30))) x356) x610))) x630)))
(assert (x108 x177))
(assert (x108 1099511627775))
(assert (x346 x569))
(assert (x346 x519))
(assert (x346 x676))
(assert (x108 288230376151711744))
(assert (x346 x543))
(assert (x346 x490))
(assert (x346 x28))
(assert (= (x20 (x680 80397878463760440755375692149700041695399247739548614023716483005714108776448)) 80397878463760440755375692149700041695399247739548614023716483005714108776448))
(assert (x346 x361))
(assert (x346 x59))
(assert (x346 x384))
(assert (= (x680 1461501637330902918203684832716283019655932542975) (x302 1461501637330902918203684832716283019655932542975)))
(assert (x346 x409))
(assert (= 274184521717934524641157099916833587349 (x20 (x302 274184521717934524641157099916833587349))))
(assert (x346 x467))
(assert (= (x20 (x680 54940573406046109056602222415596668683460243721328594580962599660119180443648)) 54940573406046109056602222415596668683460243721328594580962599660119180443648))
(assert (x346 x745))
(assert (x346 x709))
(assert (x346 x671))
(assert (x346 x192))
(assert (= (x302 1152921504606846976) (x680 1152921504606846976)))
(assert (x346 x742))
(assert (x346 x229))
(assert (x346 x189))
(assert (x346 x590))
(assert (x346 x734))
(assert (x346 x267))
(assert (x346 x583))
(assert (x346 x25))
(assert (x346 x54))
(assert (x346 x656))
(assert (x346 x408))
(assert (x346 x134))
(assert (= (x302 47697743078316515612600118454610093677384569027399280592730813262423046225920) (x680 47697743078316515612600118454610093677384569027399280592730813262423046225920)))
(assert (= (x680 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x302 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x346 x363))
(assert (= (x20 (x680 1099511627776)) 1099511627776))
(assert (= (x20 (x680 115792089237316195423570985008687907853269984665640564039457584007913129634935)) 115792089237316195423570985008687907853269984665640564039457584007913129634935))
(assert (x346 x722))
(assert (x346 x132))
(assert (x346 x510))
(assert (x346 x675))
(assert (x346 x701))
(assert (x346 x131))
(assert (x346 x3))
(assert (x718 x17))
(assert (x346 x522))
(assert (x346 x43))
(assert (x346 x101))
(assert (= (x680 3166102818) (x302 3166102818)))
(assert (= (x302 994519296000000) (x680 994519296000000)))
(assert (x346 x474))
(assert (x346 x341))
(assert (=> (<= x182 10000) (= (x302 x182) (x680 x182))))
(assert (x141 x177))
(assert (x108 x741))
(assert (= x473 (=> (= (= x495 0) x627) (and (=> (and (and (and (not x318) (= x318 (> x61 x406)) (= x239 (= x532 0)) (= (x23 (- x393 x61)) x532)) (or (and (= x24 1000000000000000000000000000) x239) (and (and (= (= 0 x95) x592) (= (div x616 1000000000000000000000000000) x139) (= x166 (or x62 x738)) (= x728 x690) (= x709 (div x559 2)) (= x150 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x95)) (= x743 (div x139 994519296000000)) (= x690 (* x625 x65)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x709 x71)) (= x297 x740) (= (x230 (+ 500000000000000000000000000 x537)) x616) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x95 x532)) (= (mod (* x95 x95) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x537) (= x1 x41) (= (ite (not x295) 1 0) x289) (= x174 (mod (* x743 x95) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x230 (+ 500000000000000000000000000 x174)) x127) (= x414 (* x728 x147)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x65 x625)) (= x624 (* x95 x532)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x728 x147)) (= (x23 (- x532 1)) x638) (= x112 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x95)) (= (div x414 6) x336) (= x71 (+ x463 x1)) (= (+ x715 x297) x480) (= x501 x709) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x310 x743)) (= x625 (mod (* x532 x638) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x276 (not x724)) (= (* x310 x743) x559) (= 1000000000000000000000000000 x463) (= (or x592 x276) x238) (= x147 (div x342 31536000)) (= x327 (ite x166 1 0)) (= x198 (ite (< x475 x638) 1 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x532 x638)) (> x131 0) (= x724 (< x112 x95)) (> x327 0) (= x128 x71) (= x310 x483) (= x342 (div x127 1000000000000000000000000000)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x336 x740)) (= (* x532 x638) x483) (= x220 (< x150 x743)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ 1000000000000000000000000000 x41)) (= (ite (< 2 x532) (x23 (- x532 2)) 0) x65) (= x475 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x532)) (= (x158 x289 x198) x531) (= x480 x24) (= 0 x531) (= (not x220) x738) (= x131 (ite x238 1 0)) (= x41 (div x624 31536000)) (= x740 (+ x128 x501)) (= x336 x715) (= (= 0 x532) x295) (= x62 (= x95 0))) (not x239)))) (not x627)) x387) (=> (and (= x748 x28) x627) x727)))))
(assert (= (x680 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x302 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x346 x728))
(assert (x346 x116))
(assert (x346 x71))
(assert (x346 x391))
(assert (x346 x174))
(assert (= (x302 1099511627775) (x680 1099511627775)))
(assert (x346 x732))
(assert (= x50 (and (not x426) x508)))
(assert (x346 x440))
(assert (= (x680 6582018229189043197315758676582005330734049138558148258257960960) (x302 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x346 x693))
(assert (x346 x418))
(assert (= (and x670 (not x601)) x154))
(assert (x346 x488))
(assert (x346 x579))
(assert (= x202 (= x175 0)))
(assert (x346 x515))
(assert (= x182 (x20 (x302 x182))))
(assert (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x20 (x680 71356987572919795984103299673912204194632180251134163011139925636576289226752))))
(assert (x108 1208907372870555465154560))
(assert (= (x20 (x680 3302387176)) 3302387176))
(assert (= (or (and x485 (not x29)) x314) x193))
(assert (x346 x661))
(assert (= x405 (or x281 x19)))
(assert (= x162 (and x216 (not x397))))
(assert (x346 x649))
(assert (x346 x633))
(assert (= x500 (or x651 x118)))
(assert (x346 x504))
(assert (= x448 (or x288 x102)))
(assert (x346 x139))
(assert (= x684 (=> (and (or (and x66 (and (= 1 x698) (< x552 4294967296))) (and (= x698 x83) (not x66))) (and x206 (not (= 1089035750 x744)) (not x195) (= x352 (< 0 (x514 (x302 x36)))) (<= 0 x474) (= x406 x393) (<= x145 255) (not (< x109 4)) (not (= x445 x331)) (> x134 0) (>= 1461501637330902918203684832716283019655932542975 x633) (< 0 x445) (= (x23 (- x157 4)) x161) (not (= x595 x17)) (<= 0 x61) (>= x267 0) (<= x49 255) (<= x384 1461501637330902918203684832716283019655932542975) (not (= x742 x153)) (< 0 x742) (<= x553 340282366920938463463374607431768211455) (< 0 x331) (= x84 x739) (>= x365 0) (>= 340282366920938463463374607431768211455 x116) (> 1461501637330902918203684832716283019655932542976 x554) (<= 0 x347) (>= 18446744073709551615 x149) (= (x678 (x302 x384)) x324) (= (< 0 (x514 (x302 x114))) x271) (<= x229 1461501637330902918203684832716283019655932542975) (= (< 0 (x514 (x302 x299))) x168) (= (x678 (x302 x182)) x100) (<= 0 x100) (not (= x742 x299)) (not (= x613 x36)) (not (< x241 3166102818)) (< 0 x384) (<= x115 255) (= (x514 (x302 x445)) x723) (>= x568 0) (not (= x134 x613)) (= (< 0 (x514 (x302 x153))) x366) (= x95 (x282 x58)) (>= x545 0) (<= 0 x82) (= x476 (< 0 (x514 (x302 x445)))) (<= 0 x28) (not (= x36 x445)) (not (= x384 x36)) (not (= x299 x331)) (= (x678 (x302 x17)) x357) (<= 0 x49) (not (= x331 x613)) (not (= x17 x114)) (not (= x182 x445)) (= x109 100) (= (> (x514 (x302 x182)) 0) x609) (<= x742 1461501637330902918203684832716283019655932542975) (not (= x36 x742)) (not (= x742 x613)) (= x37 (x514 (x302 x445))) (not (= x36 x17)) (and (< 67 x157) (= (<= x157 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (= x572 (x678 (x302 x36))) (>= x572 0) (= (x138 x67) x554) (not (= x17 x331)) (= 3440452482 x21) (> x114 0) (not (= x445 x114)) (not (= x134 x299)) (= x519 x360) (not (= x331 x595)) (not (= x445 x613)) (not (= x384 x613)) (= x66 (> x83 0)) (>= 1099511627775 x502) (= x614 x597) (not (or (and (< x161 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x161))) (> x161 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= 1461501637330902918203684832716283019655932542975 x99) (= (x678 (x302 x595)) x545) (not (= x134 x17)) (not (= x595 x445)) (>= 340282366920938463463374607431768211455 x661) (>= 1461501637330902918203684832716283019655932542975 x267) (<= 0 x526) (<= x331 1461501637330902918203684832716283019655932542975) (< 0 x17) (= x637 x163) (not (= x134 x114)) (not (= x299 x36)) (not (= x299 x613)) (= x380 (x269 x58 2)) (= x82 (x585 x380)) (= (x158 1208907372870555465154560 x177) x518) (not (= x153 x17)) (>= x422 0) (not (= x331 x114)) (not (= x299 x595)) (= (x4 x518 64) x427) (> x613 0) (>= x115 0) (not (= x182 x114)) (= x614 x634) (>= 1461501637330902918203684832716283019655932542975 x163) (not (= x331 x742)) (>= 1461501637330902918203684832716283019655932542975 x526) (= x247 (> (x514 (x302 x17)) 0)) (>= 1461501637330902918203684832716283019655932542975 x30) (= x486 47697743078316515612600118454610093677384569027399280592730813262423046225920) (not (= x384 x445)) (>= 1099511627775 x61) (= (x514 (x302 274184521717934524641157099916833587349)) x98) (= x635 (x368 x160)) (not (= x182 x134)) (not (= x445 x299)) (not (= x98 0)) (<= x293 1461501637330902918203684832716283019655932542975) (>= 255 x697) (not (= x17 x445)) (= x61 (x63 x505)) (< 0 x299) (= x256 false) (<= 0 x293) (not x646) x596 (= x67 (x269 x663 1)) x168 (> 1461501637330902918203684832716283019655932542976 x30) (= x732 (x23 (- x109 4))) (= x637 x267) (= x58 (x269 x160 1)) (not (= x153 x595)) (= x614 x42) (<= 0 x502) (>= x722 0) (= x28 (x187 x58)) (>= x177 0) (not (> 2054196882 x241)) (not (= x134 x36)) (not (= x182 x17)) (>= x30 0) (= (x678 (x302 x153)) x422) (not (= x742 x595)) (>= x697 0) (not (= x384 x134)) (not (= 3214050684 x241)) (>= 340282366920938463463374607431768211455 x635) (not (= x17 x299)) (= (x678 (x302 x331)) x494) (<= 0 x554) (= x607 1472) (<= 0 x44) (<= x177 115792089237316195423570985008687907853269984665640564039457584007913129639935) x476 (not (= x613 x182)) x247 (not (= x613 x595)) (= 3440452482 x241) (<= x445 1461501637330902918203684832716283019655932542975) (not (= x182 x36)) (>= x553 0) (<= 0 x163) (>= 1461501637330902918203684832716283019655932542975 x554) (= x739 x179) x212 (not (= x153 x445)) (= x519 x415) (<= x39 255) (not (> 4 x157)) (not (= x613 x114)) (>= 1461501637330902918203684832716283019655932542975 x57) (<= x739 1461501637330902918203684832716283019655932542975) (>= x149 0) (= x30 (x617 x663)) (= x88 800) (not (= 3166102818 x241)) (>= 1461501637330902918203684832716283019655932542975 x134) (= x194 (< 0 (x514 (x302 x331)))) (= (x269 x380 1) x663) (<= 0 x357) (<= x365 1461501637330902918203684832716283019655932542975) (not (= x17 x742)) (<= 0 x231) (> x595 0) (not (= x744 509899769)) (= x614 x584) (= (< 0 (x514 (x302 x384))) x596) (= x641 x373) (>= 1461501637330902918203684832716283019655932542975 x82) (= (x678 (x302 x299)) x474) (= x641 (x76 (x302 x614) (x680 52) 0)) (not (= x182 x331)) (not (= x114 x595)) (not (= x114 x384)) (>= x57 0) (>= 1461501637330902918203684832716283019655932542975 x17) (<= x95 340282366920938463463374607431768211455) (> 3512598611 x241) (<= x568 340282366920938463463374607431768211455) (> x153 0) x573 (= (x678 (x302 x134)) x231) (<= x613 1461501637330902918203684832716283019655932542975) (not (= x134 x445)) (= x373 x587) (= (x678 (x302 x613)) x253) (< 0 x37) (>= x413 0) (>= x253 0) (= false x333) (not (= x134 x153)) (>= x633 0) (not (= x384 x153)) (not (= x331 x384)) (>= 65535 x183) (= x668 x739) (not (= x595 x182)) (not (= x114 x742)) (= x557 x347) (>= x604 0) x588 (>= 340282366920938463463374607431768211455 x28) (>= x95 0) (= x614 x706) (<= x614 1461501637330902918203684832716283019655932542975) (<= x604 255) (not (= x299 x384)) (not (= x445 x742)) x366 (not (= x595 x36)) (= x125 false) (>= x324 0) (not (= x153 x299)) x194 (> x723 0) (<= 0 x635) (= x739 x121) (not (= x742 x182)) (< 0 x182) (= x177 (x106 x373)) (= false x260) (= x649 0) (<= 0 x494) (not (= x384 x742)) (<= 0 x229) (<= 0 x586) (<= x595 1461501637330902918203684832716283019655932542975) x609 (not (= x595 x384)) x271 (= (x434 x160) x568) (>= 1461501637330902918203684832716283019655932542975 x347) (< x82 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x182) (>= 1461501637330902918203684832716283019655932542975 x722) (= x744 1769207620) (= x505 (x269 x58 1)) (= x195 (= 0 x445)) (>= 1461501637330902918203684832716283019655932542975 x360) (> 340282366920938463463374607431768211456 x28) (= x212 (< 0 (x514 (x302 x613)))) (<= x114 1461501637330902918203684832716283019655932542975) (<= x153 1461501637330902918203684832716283019655932542975) (not (= x384 x182)) (>= 1461501637330902918203684832716283019655932542975 x188) (not (= x153 x36)) (not (= 3293254135 x241)) (not (= x299 x114)) (>= x661 0) (not (= x613 x17)) (>= x145 0) (<= 0 x116) (> x36 0) (<= 0 x99) (= x160 (x269 x373 1)) (not (= x114 x153)) (not (= x384 x17)) (>= x39 0) (< x568 340282366920938463463374607431768211456) (not (= x241 3302387176)) (>= 1461501637330902918203684832716283019655932542975 x36) (= 100 x109) (= 128 x677) (> 1099511627776 x61) (not (= x613 x153)) (>= 1461501637330902918203684832716283019655932542975 x299) (not (= x299 x182)) (= (x678 (x302 x445)) x586) (<= 0 x360) (= x413 (x678 (x302 x742))) (= x735 (x678 (x302 x114))) (< x95 340282366920938463463374607431768211456) x352 (<= x44 255) (= (< 0 (x514 (x302 x134))) x206) (= (< 0 (x514 (x302 x595))) x573) (not (= x742 x134)) (not (= x153 x331)) (not (= x114 x36)) (not (= x153 x182)) (= x646 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x732)) (< x732 96)) (> x732 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= 0 x188) (>= x183 0) (= x423 x649) (= x745 x614) (= (> (x514 (x302 x742)) 0) x588) (> 340282366920938463463374607431768211456 x635) (not (= x134 x331)) (not (= x134 x595)) (= 2 x433) (<= 0 x735) (not (= x36 x331)))) x8)))
(assert (x108 x395))
(assert (x346 x375))
(assert (= x8 (=> (and (and (= x395 (x230 (+ x552 31))) (= x495 (x122 1504)) (= (or (and (> 32 x552) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x552))) (> x552 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x137) (not x266) (= (< 0 x304) x74) (= (= x698 0) x266) (not x137) (= (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x395) x555) (= x631 (x230 (+ 1504 x555)))) (or (and (= x703 x304) (not x74)) (and x74 (and (= 1 x703) (< x541 4294967296))))) x46)))
(assert (x346 x11))
(assert (x108 576460752303423488))
(assert (x346 x319))
(assert (x346 x45))
(assert (x346 x248))
(assert (x346 x217))
(assert (x108 6582018229189043197315758676582005330734049138558148258257960960))
(assert (x346 x16))
(assert (x211 x77))
(assert (x346 x226))
(assert (x346 x201))
(assert (x346 x686))
(assert (= 6582018229189043197315758676582005330734049138558148258257960960 (x20 (x680 6582018229189043197315758676582005330734049138558148258257960960))))
(assert (x108 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x346 x184))
(assert (= (x20 (x269 x58 2)) (+ (x20 x58) 2)))
(assert (= (div x383 95780971304118053647396689196894323976171195136475136) (x4 x383 176)))
(assert (x346 x521))
(assert (x346 x364))
(assert (x346 x716))
(assert (x346 x598))
(assert (x346 x502))
(assert (= (x302 576460752303423488) (x680 576460752303423488)))
(assert (x346 x140))
(assert (= x288 (and (not x303) x110)))
(assert (=> (>= 10000 x445) (= (x680 x445) (x302 x445))))
(assert (x346 x27))
(assert (x346 x77))
(assert (= 1461501637330902918203684832716283019655932542976 (x20 (x680 1461501637330902918203684832716283019655932542976))))
(assert (= x35 (=> (and (or (not x426) (and x426 (and (= x167 (x678 (x302 x30))) (> 4294967296 x656) x38 x567 (= (= (x683 (x302 x30)) x167) x567) (= x533 (x678 (x302 x331))) (= x38 (<= x533 (x683 (x302 x331))))))) (and (= (x230 (+ 32 x461)) x689) (= (x653 x136) x54) (= (< 0 x420) x426) (= (x230 (+ 31 x361)) x522) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x361)) (> 32 x361)) (> x361 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x394) (= (= x521 0) x73) (= x152 (x230 (+ x136 x432))) (not x73) (= x461 (x230 (+ 4 x152))) (not x394) (= x432 (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x522)))) x86)))
(assert (x346 x666))
(assert (x718 x384))
(assert (x108 x522))
(assert (x346 x30))
(assert (x346 x163))
(assert (x346 x453))
(assert (= (and x75 x239) x6))
(assert (x346 x631))
(assert (x346 x83))
(assert (x346 x300))
(assert (x582 x504))
(assert (x650 x177))
(assert (= 509899769 (x20 (x680 509899769))))
(assert (x718 x613))
(assert (= 0 (x144 x381)))
(assert (x582 x52))
(assert (x108 x459))
(assert (= (or x729 (and x435 x448) (and x438 x444)) x681))
(assert (= 0 (x144 x272)))
(assert (x346 x667))
(assert (=> (>= 10000 x153) (= (x680 x153) (x302 x153))))
(assert (= (x20 (x302 x595)) x595))
(assert (x718 x742))
(assert (x718 x153))
(assert (= x742 (x20 (x302 x742))))
(assert (= (x20 (x680 50942633119752846454219349998365661925608737367104304655302372697894809501696)) 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (= 1208907372870555465154560 (x20 (x680 1208907372870555465154560))))
(assert (= (x680 71356987572919795984103299673912204194632180251134163011139925636576289226752) (x302 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (= (x20 (x680 144115188075855872)) 144115188075855872))
(assert (x346 x365))
(assert (= 65535 (x20 (x680 65535))))
(assert (= (x680 3302387176) (x302 3302387176)))
(assert (= (x20 (x269 x160 1)) (+ 1 (x20 x160))))
(assert (x582 x440))
(assert (= (x20 (x302 x30)) x30))
(assert (x346 x428))
(assert (x108 x289))
(assert (= (or (and x478 (not x628)) (and x216 x397) (and x577 x622)) x281))
(assert (x346 x395))
(assert (x346 x183))
(assert (x346 x642))
(assert (x346 x313))
(assert (= x460 (=> (and (= (x158 1099511627775 x393) x345) (= x748 x47) (= x654 x232)) x332)))
(assert (= (x20 (x680 31536000)) 31536000))
(assert (x718 x36))
(assert (x346 x150))
(assert (x346 x533))
(assert (= x348 (and x547 (not x207))))
(assert (= x614 (x20 (x302 x614))))
(assert (= (=> (and (= (x230 (+ 31 x667)) x77) (= x104 (> x388 12865787693035132824841220556520878650363331629515618226606398223101458848)) (= x113 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x667) (and (> 96 x667) (= (<= x667 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (not x407) (= x583 (ite x594 1 0)) (= x364 (x230 (+ x45 x452))) (= x407 (= x93 0)) (> x583 0) (= x5 (div x274 10000)) (= x594 x296) (= (x230 (+ x364 64)) x136) (= x3 9000) (= (not x104) x296) (= x388 (x534 x45)) (= (mod (* 9000 x388) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x529) (= x577 (> x568 x5)) (= x452 (x158 115792089237316195423570985008687907853269984665640564039457584007913129639904 x77)) (= x274 (x230 (+ x529 5000))) (not x113)) (and (=> (and (and (or (and (and (> 4294967296 x361) (= x521 1)) x10) (and (= x60 x521) (not x10))) (and (= (> x60 0) x10) (= x570 (x230 (+ 4 x136))))) (not x577)) x35) (=> x577 x720))) x425))
(assert (x346 x422))
(assert (x346 x491))
(assert (x346 x531))
(assert (x346 x307))
(assert (= 3512598611 (x20 (x680 3512598611))))
(assert (x346 x147))
(assert (x718 x114))
(assert (= (x302 (x20 x641)) x641))
(assert (x346 x370))
(assert (x346 x537))
(assert (x346 x105))
(assert (= (x20 (x680 994519296000000)) 994519296000000))
(assert (x64 x289 x198))
(assert (x346 x65))
(assert (x346 x253))
(assert (x346 x274))
(assert (x346 x198))
(assert (x346 x7))
(assert (x346 x698))
(assert (x346 x457))
(assert (x346 x388))
(assert (= (and x500 (not x627)) x75))
(assert (= 500000000000000000000000000 (x20 (x680 500000000000000000000000000))))
(assert (x346 x740))
(assert (x346 x258))
(assert (= x437 (and x660 x193)))
(assert (x108 1152921504606846976))
(assert (= (x302 1769207620) (x680 1769207620)))
(assert (= x733 (and (not x702) x162)))
(assert (x346 x532))
(assert (= (and x303 x110) x102))
(assert (x346 x114))
(assert (=> (>= 10000 x742) (= (x302 x742) (x680 x742))))
(assert (x346 x541))
(assert (x346 x668))
(assert (= (x302 340282366920938463463374607431768211455) (x680 340282366920938463463374607431768211455)))
(assert (x346 x145))
(assert (= x565 (and x669 (not x610))))
(assert (x346 x576))
(assert (=> (<= x331 10000) (= (x302 x331) (x680 x331))))
(assert (x346 x323))
(assert (x346 x639))
(assert (x346 x436))
(assert (x346 x235))
(assert (x346 x652))
(assert (= (and x199 x10) x707))
(assert (x346 x494))
(assert (x346 x538))
(assert (= (=> (and (and (= x248 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x457)) (= (< x240 x453) x691) (= (> x250 x246) x523) (= x205 (mod (* x457 x370) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x602 (= 0 x457)) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x427) x252) (= (ite x544 1 0) x652) (< 0 x705) (= (+ x221 x237) x246) (= (x230 (+ x205 500000000000000000000000000)) x18) (= (x23 (- x240 x453)) x464) (not x523) (= x453 (div x18 1000000000000000000000000000)) (= x705 (ite x746 1 0)) (= x275 (mod (* x464 x427) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (not x713) x22) (= x376 (not x321)) (= x435 (= 0 x400)) (not x691) (< 0 x652) (= x237 x43) (= (or x602 x22) x544) (= x371 (x230 (+ 5000 x275))) (= (x23 (- x246 x250)) x240) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x43 x270)) (= x713 (> x370 x248)) (= x321 (> x464 x252)) (= x516 (= 0 x427)) (= x746 (or x516 x376)) (= x221 x270) (= (div x371 10000) x400)) (or x435 (and (and (= (not x620) x279) (= x591 x70) (<= 0 x85) (= (or x279 x355) x362) (= x591 (x158 340282366920938463463374607431768211455 x504)) (= x620 (not x477)) (< (+ x85 x591) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 340282366920938463463374607431768211455 x85) (not x338) (= (x377 x257) x85) (= x85 x264) (= (x269 x67 2) x257) (= x408 (div x412 2)) (< x85 340282366920938463463374607431768211456) (= (x230 (+ x48 x490)) x192) (= x355 (= x412 0)) (= (mod (* 1000000000000000000000000000 x400) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x490) (= x378 (x158 340282366920938463463374607431768211455 x440)) (<= x440 340282366920938463463374607431768211455) (= x440 (+ x264 x70)) (= (ite x362 1 0) x389) (= 0 x389) (= x164 (x23 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x408))) (= (div x192 x412) x504) (= x48 (div x412 2)) (= (< x682 x400) x477) (= (div x164 1000000000000000000000000000) x682) (= x338 (< 340282366920938463463374607431768211455 x504))) (not x435)))) x460) x442))
(assert (x346 x482))
(assert (x346 x81))
(assert (= (x302 72057594037927936) (x680 72057594037927936)))
(assert (x346 x574))
(assert (= (x20 (x269 x380 1)) (+ 1 (x20 x380))))
(assert (x346 x242))
(assert (= (x680 288230376151711744) (x302 288230376151711744)))
(assert (x346 x419))
(assert (x346 x677))
(assert (x346 x85))
(assert (x346 x310))
(assert (x346 x625))
(assert (x346 x93))
(assert (x346 x146))
(assert (x346 x433))
(assert (x346 x345))
(assert (x346 x126))
(assert (x346 x275))
(assert (= (x20 (x680 1152921504606846976)) 1152921504606846976))
(assert (= (x20 (x269 x58 1)) (+ (x20 x58) 1)))
(assert (x346 x287))
(assert (= x445 (x20 (x302 x445))))
(assert (= (or x169 x249) x444))
(assert (x346 x518))
(assert (=> (>= 10000 x595) (= (x680 x595) (x302 x595))))
(assert (x346 x562))
(assert (x346 x429))
(assert (= (x680 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x302 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x346 x604))
(assert (x346 x153))
(assert (x346 x327))
(assert (x346 x21))
(assert (x346 x451))
(assert (x346 x156))
(assert (= (x680 144115188075855872) (x302 144115188075855872)))
(assert (x346 x91))
(assert (= 10894474682274239493831243662817379401261526446360622092269559273883068006400 (x20 (x680 10894474682274239493831243662817379401261526446360622092269559273883068006400))))
(assert (x346 x278))
(assert (= x299 (x20 (x302 x299))))
(assert (= x430 (and x517 x74)))
(assert (x718 x614))
(assert (x346 x18))
(assert (x108 x696))
(assert (x346 x26))
(assert (x346 x39))
(assert (= (x680 1089035750) (x302 1089035750)))
(assert (x346 x708))
(assert (x346 x180))
(assert (x346 x272))
(assert (x346 x95))
(assert (x346 x568))
(assert (= (x20 (x302 x36)) x36))
(assert (= (or x89 x565) x485))
(assert (x346 x336))
(assert (= x720 (=> (= 0 x175) x202)))
(assert (= x314 (and x485 x29)))
(assert (x346 x555))
(assert (= (x20 (x680 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x302 509899769) (x680 509899769)))
(assert (x718 x445))
(assert (x108 x675))
(assert (x346 x441))
(assert (= (x680 115792089237316195423570985008687907853269984665640564039457584007913129634935) (x302 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x346 x710))
(assert (x346 x293))
(assert (=> (>= 10000 x613) (= (x302 x613) (x680 x613))))
(assert (x108 x491))
(assert (x346 x464))
(assert (x346 x360))
(assert (x346 x527))
(assert (x346 x743))
(assert (= (x20 (x680 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (= 0 (x144 x201)))
(assert (x346 x383))
(assert (= (x20 (x680 81391198934588725741764901232338779421906459474344603328544298677233738842112)) 81391198934588725741764901232338779421906459474344603328544298677233738842112))
(assert (= x155 (and x551 x66)))
(assert (x346 x739))
(assert (x346 x572))
(assert (x346 x82))
(assert (= (x302 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x680 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (= 18446744073709551615 (x20 (x680 18446744073709551615))))
(assert (x346 x252))
(assert (x346 x5))
(assert (x346 x492))
(assert (x346 x616))
(assert (x346 x750))
(assert (= (x20 (x302 x17)) x17))
(assert (x346 x213))
(assert (x346 x545))
(assert (= (x20 (x302 x613)) x613))
(assert (x346 x378))
(assert (x346 x236))
(assert (= (x144 x103) 0))
(assert (x108 72057594037927936))
(assert (= (x680 81391198934588725741764901232338779421906459474344603328544298677233738842112) (x302 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (x108 x504))
(assert (x346 x697))
(assert (x346 x509))
(assert (x346 x173))
(assert (= (=> (and (= (= 0 x427) x438) (= x232 (x230 (+ 192 x671)))) (and (=> x438 x460) (=> (and (and (and (= x117 (or x186 x472)) (= x578 (> x495 x228)) (= x51 (x23 (- x61 x311))) (= (> x495 x7) x159) (= x59 (mod (* x495 x748) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x28) x7) (= x692 (ite x117 1 0)) (= (not x159) x694) (= (mod (* x495 x28) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x375) (= x250 (div x367 1000000000000000000000000000)) (= (or x694 x465) x176) (> x692 0) (= (= 0 x51) x303) (< 0 x242) (= (not x578) x472) (= x186 (= x748 0)) (= (div x140 1000000000000000000000000000) x43) (= x228 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x748)) (= x465 (= 0 x28)) (= (ite x176 1 0) x242) (= (< x61 x311) x291) (= (x230 (+ 500000000000000000000000000 x375)) x367) (= x140 (x230 (+ x59 500000000000000000000000000))) (not x291)) (or (and (and (< (+ x224 x686) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (* x107 x213) x484) (= (+ x411 x351) x558) (= (* x26 x51) x456) (= x520 x351) (< (+ x189 x520) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (not x711) x185) (= x515 (ite (not x700) 1 0)) (< 0 x173) (= x68 x734) (= (x23 (- x51 1)) x699) (= x213 (mod (* x51 x699) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x120 x224) (= x734 (div x456 31536000)) (= (= x26 0) x55) (= (or x619 x185) x374) (= (ite (> x699 x307) 1 0) x392) (= x686 x214) (= x180 x589) (= x593 (div x91 31536000)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x26) x598) (= (div x482 994519296000000) x506) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x26) x81) (< (+ 1000000000000000000000000000 x734) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x51) x307) (= x623 x484) (= (> x506 x81) x172) (= x386 (or x55 x618)) (= (* x699 x51) x589) (= x419 (x230 (+ x642 500000000000000000000000000))) (= x111 (ite x374 1 0)) (= x107 (ite (< 2 x51) (x23 (- x51 2)) 0)) (< (* x180 x506) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (div x612 1000000000000000000000000000) x91) (= x189 x411) (= x736 (mod (* x506 x26) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (+ x68 x468) x224) (= (+ x120 x214) x520) (> x111 0) (= x173 (ite x386 1 0)) (= (div x685 6) x189) (= (mod (* x26 x26) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x642) (= (< x598 x26) x711) (< (* x51 x26) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x498 (* x180 x506)) (= (x158 x515 x392) x488) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x213 x107)) (= x612 (x230 (+ 500000000000000000000000000 x736))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x593 x623)) (= x558 x457) (= x468 1000000000000000000000000000) (= (div x419 1000000000000000000000000000) x482) (= x686 (div x498 2)) (= (= 0 x51) x700) (= (* x623 x593) x685) (= x618 (not x172)) (< (* x51 x699) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x488 0) (= x619 (= x26 0))) (not x303)) (and x303 (= 1000000000000000000000000000 x457)))) (not x438)) x442))) x727))
(assert (x346 x506))
(assert (x64 x515 x392))
(assert (=> (>= 10000 x30) (= (x302 x30) (x680 x30))))
(assert (= (x680 1099511627776) (x302 1099511627776)))
(assert (= (x20 (x680 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (=> (<= x36 10000) (= (x680 x36) (x302 x36))))
(assert (x346 x228))
(assert (x346 x570))
(assert (= (x302 4294967296) (x680 4294967296)))
(assert (x108 x392))
(assert (x346 x109))
(assert (x108 x235))
(assert (x346 x692))
(assert (x346 x179))
(assert (x346 x423))
(assert (x346 x149))
(assert (x346 x324))
(assert (= (x680 18446744073709551615) (x302 18446744073709551615)))
(assert (x346 x367))
(assert (x346 x638))
(assert (x346 x427))
(assert (x346 x342))
(assert (= 1769207620 (x20 (x680 1769207620))))
(assert (x346 x121))
(assert (x346 x466))
(assert (x346 x495))
(assert (x346 x103))
(assert (= (x680 1461501637330902918203684832716283019655932542976) (x302 1461501637330902918203684832716283019655932542976)))
(assert (= 72057594037927936 (x20 (x680 72057594037927936))))
(assert (x211 x741))
(assert (x346 x682))
(assert (x346 x462))
(assert (x346 x304))
(assert (x346 x612))
(assert (x108 x77))
(assert (= (x302 340282366920938463463374607431768211456) (x680 340282366920938463463374607431768211456)))
(assert (x346 x730))
(assert (x582 x443))
(assert (= 3293254135 (x20 (x680 3293254135))))
(assert (= x114 (x20 (x302 x114))))
(assert (x346 x47))
(assert (x211 x675))
(assert (x346 x471))
(assert (x346 x459))
(assert (= (x302 10894474682274239493831243662817379401261526446360622092269559273883068006400) (x680 10894474682274239493831243662817379401261526446360622092269559273883068006400)))
(assert (= 1099511627775 (x20 (x680 1099511627775))))
(assert (x346 x100))
(assert (= (x302 65535) (x680 65535)))
(assert (x346 x455))
(assert (x346 x136))
(assert (x108 x443))
(assert (x346 x412))
(assert (= (=> (and (or (not x284) x284) (= x284 (= 0 x420))) x399) x86))
(assert (= x729 (and (not x435) x448)))
(assert (= (x302 274184521717934524641157099916833587349) (x680 274184521717934524641157099916833587349)))
(assert (= (x144 x730) 0))
(assert (x718 x595))
(assert (= (x302 54940573406046109056602222415596668683460243721328594580962599660119180443648) (x680 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x346 x525))
(assert (x346 x270))
(assert (x211 x72))
(assert (x346 x240))
(assert (= (x680 3512598611) (x302 3512598611)))
(assert (x346 x112))
(assert (= (and x622 (not x577)) x199))
(assert (x346 x635))
(assert (x346 x306))
(assert (x346 x613))
(assert (= 4294967296 (x20 (x680 4294967296))))
(assert (x108 340282366920938463463374607431768211455))
(assert (x346 x445))
(check-sat)
(exit)