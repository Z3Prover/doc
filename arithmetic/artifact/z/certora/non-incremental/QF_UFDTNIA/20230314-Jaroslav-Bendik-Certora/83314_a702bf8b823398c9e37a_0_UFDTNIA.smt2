(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x18 0)) (((x43 (x140 Int)) (x111 (x141 x18) (x6 x18) (x301 x18) (x249 x18) (x238 Int)) (x178 (x272 x18) (x348 x18) (x261 Int)) (x399 (x370 x18) (x394 Int)))))
(declare-fun x275 () Int)
(declare-fun x373 () Int)
(declare-fun x197 () Int)
(declare-fun x89 () Int)
(declare-fun x3 () Bool)
(declare-fun x419 () Int)
(declare-fun x258 () Bool)
(declare-fun x212 () Int)
(declare-fun x402 () Bool)
(declare-fun x240 () Int)
(declare-fun x153 () Int)
(declare-fun x26 () Int)
(declare-fun x432 () Int)
(declare-fun x400 () Int)
(declare-fun x341 () Int)
(declare-fun x131 () Int)
(declare-fun x235 (x18) Int)
(declare-fun x65 () Int)
(declare-fun x21 () Bool)
(declare-fun x150 () Int)
(declare-fun x172 (x18) Int)
(declare-fun x381 () Int)
(declare-fun x421 () Bool)
(declare-fun x136 () x18)
(declare-fun x259 () Int)
(declare-fun x286 () Int)
(declare-fun x351 () Bool)
(declare-fun x1 () Int)
(declare-fun x357 () Int)
(declare-fun x403 () Int)
(declare-fun x339 () Int)
(declare-fun x48 () Int)
(declare-fun x117 () Bool)
(declare-fun x285 () Int)
(declare-fun x358 () Int)
(declare-fun x144 () Int)
(declare-fun x327 () Int)
(declare-fun x68 () Int)
(declare-fun x230 (Int) Int)
(declare-fun x130 () Bool)
(declare-fun x226 () Int)
(declare-fun x227 () Int)
(declare-fun x72 () Int)
(declare-fun x429 () x18)
(declare-fun x276 () Int)
(declare-fun x251 () Int)
(declare-fun x24 () Int)
(declare-fun x417 () Int)
(declare-fun x97 () Bool)
(declare-fun x293 () Int)
(declare-fun x439 () Int)
(declare-fun x335 () Int)
(declare-fun x76 () Int)
(declare-fun x143 () Int)
(declare-fun x225 () Int)
(declare-fun x228 () Int)
(declare-fun x192 () Bool)
(declare-fun x236 () Int)
(declare-fun x2 () Int)
(declare-fun x384 () Int)
(declare-fun x309 () Bool)
(declare-fun x362 () Int)
(declare-fun x344 () Int)
(declare-fun x114 () Int)
(declare-fun x28 () Int)
(declare-fun x182 () Int)
(declare-fun x378 () Int)
(declare-fun x368 () Bool)
(declare-fun x95 () Bool)
(declare-fun x345 () Int)
(declare-fun x194 () Bool)
(declare-fun x396 () Bool)
(declare-fun x184 () x18)
(declare-fun x134 () Int)
(declare-fun x203 (Int) Int)
(declare-fun x288 () Int)
(declare-fun x355 () Bool)
(declare-fun x123 () Int)
(declare-fun x164 () Bool)
(declare-fun x380 () Bool)
(declare-fun x31 () Int)
(declare-fun x361 () Bool)
(declare-fun x401 () Int)
(declare-fun x54 () Bool)
(declare-fun x176 () Int)
(declare-fun x246 () Int)
(declare-fun x220 () Bool)
(declare-fun x77 () Int)
(declare-fun x322 (Int Int) Int)
(declare-fun x98 () Int)
(declare-fun x340 () Bool)
(declare-fun x414 () Bool)
(declare-fun x269 () Int)
(declare-fun x363 () Bool)
(declare-fun x170 () Int)
(declare-fun x59 () Int)
(declare-fun x359 () Bool)
(declare-fun x155 () Int)
(declare-fun x360 () Bool)
(declare-fun x305 () Bool)
(declare-fun x175 () Int)
(declare-fun x325 () Int)
(declare-fun x4 () Int)
(declare-fun x282 () Int)
(declare-fun x39 () Bool)
(declare-fun x326 () Int)
(declare-fun x119 () Int)
(declare-fun x73 () Int)
(declare-fun x204 () Int)
(declare-fun x42 () Int)
(declare-fun x101 () Int)
(declare-fun x22 () Int)
(declare-fun x215 () Int)
(declare-fun x289 () Int)
(declare-fun x262 () Bool)
(declare-fun x14 () Bool)
(declare-fun x201 () Bool)
(declare-fun x168 () Bool)
(declare-fun x166 (Int Int) Int)
(declare-fun x109 () Int)
(declare-fun x376 () Int)
(declare-fun x174 () Bool)
(declare-fun x436 () Int)
(declare-fun x247 () Int)
(declare-fun x218 () Int)
(declare-fun x431 () Int)
(declare-fun x350 () Int)
(declare-fun x379 () Int)
(declare-fun x406 () Int)
(declare-fun x151 () Int)
(declare-fun x300 () Int)
(declare-fun x312 () Int)
(declare-fun x196 () Bool)
(declare-fun x61 () Int)
(declare-fun x173 () Int)
(declare-fun x52 () Int)
(declare-fun x205 () Int)
(declare-fun x367 () Int)
(declare-fun x146 () Int)
(declare-fun x208 () Bool)
(declare-fun x135 () Int)
(declare-fun x412 () Bool)
(declare-fun x330 () Int)
(declare-fun x19 () Bool)
(declare-fun x195 () Bool)
(declare-fun x423 () Int)
(declare-fun x409 () Int)
(declare-fun x375 () Int)
(declare-fun x177 () Bool)
(declare-fun x405 () Int)
(declare-fun x343 () Int)
(declare-fun x318 () Int)
(declare-fun x328 () Int)
(declare-fun x263 () Int)
(declare-fun x244 () Int)
(declare-fun x107 () Int)
(declare-fun x71 () Int)
(declare-fun x265 () Int)
(declare-fun x64 () Int)
(declare-fun x248 () Int)
(declare-fun x179 () x18)
(declare-fun x49 () Int)
(declare-fun x23 () Bool)
(declare-fun x389 () Int)
(declare-fun x435 () Int)
(declare-fun x410 () Int)
(declare-fun x385 () Int)
(declare-fun x116 () Bool)
(declare-fun x169 () Int)
(declare-fun x279 () Int)
(declare-fun x147 () Int)
(declare-fun x84 () Bool)
(declare-fun x387 () Int)
(declare-fun x47 () Bool)
(declare-fun x260 () Int)
(declare-fun x425 () Bool)
(declare-fun x237 () Bool)
(declare-fun x94 () Int)
(declare-fun x185 () Bool)
(declare-fun x316 () Int)
(declare-fun x206 () Int)
(declare-fun x280 () Bool)
(declare-fun x32 () Int)
(declare-fun x287 () Bool)
(declare-fun x113 () Int)
(declare-fun x158 () Int)
(declare-fun x198 () Bool)
(declare-fun x85 () Bool)
(declare-fun x74 () Int)
(declare-fun x324 () Int)
(declare-fun x256 () Int)
(declare-fun x353 () Int)
(declare-fun x112 () Int)
(declare-fun x391 () Int)
(declare-fun x56 (x18) Int)
(declare-fun x428 () Bool)
(declare-fun x34 () Int)
(declare-fun x81 () Int)
(declare-fun x53 () Bool)
(declare-fun x337 () Int)
(declare-fun x331 () Int)
(declare-fun x234 () Int)
(declare-fun x239 () Int)
(declare-fun x254 () Int)
(declare-fun x219 () Bool)
(declare-fun x75 () Int)
(declare-fun x79 () Int)
(declare-fun x90 () Int)
(declare-fun x232 () Int)
(declare-fun x129 () Bool)
(declare-fun x69 () Int)
(declare-fun x51 () Int)
(declare-fun x291 () Int)
(declare-fun x159 () Int)
(declare-fun x346 () Int)
(declare-fun x12 () Int)
(declare-fun x349 () Int)
(declare-fun x427 () Int)
(declare-fun x271 () Bool)
(declare-fun x266 () Int)
(declare-fun x186 () Bool)
(declare-fun x267 () Bool)
(declare-fun x243 () Int)
(declare-fun x213 (Int Int) Int)
(declare-fun x304 () Int)
(declare-fun x329 () Int)
(declare-fun x20 () Bool)
(declare-fun x404 () Int)
(declare-fun x422 () Int)
(declare-fun x103 () Int)
(declare-fun x302 () Bool)
(declare-fun x46 () Int)
(declare-fun x27 () Int)
(declare-fun x138 () Int)
(declare-fun x283 () Int)
(declare-fun x63 () Bool)
(declare-fun x87 () Int)
(declare-fun x41 () Int)
(declare-fun x106 () Int)
(declare-fun x115 () Int)
(declare-fun x66 () Int)
(declare-fun x290 () Int)
(declare-fun x311 () Int)
(declare-fun x91 () Int)
(declare-fun x190 () Bool)
(declare-fun x125 () Int)
(declare-fun x209 () Int)
(declare-fun x253 () Int)
(declare-fun x80 () Bool)
(declare-fun x11 (Int) Int)
(declare-fun x438 () Int)
(declare-fun x257 () Int)
(declare-fun x99 () Bool)
(declare-fun x110 () Int)
(declare-fun x299 () Int)
(declare-fun x320 () Int)
(declare-fun x25 () Int)
(declare-fun x187 () Int)
(declare-fun x395 () Int)
(declare-fun x67 () Int)
(declare-fun x145 () Int)
(declare-fun x211 () Int)
(declare-fun x210 () Int)
(declare-fun x88 () Bool)
(declare-fun x127 () Int)
(declare-fun x139 () Int)
(declare-fun x160 () Int)
(declare-fun x165 () Bool)
(declare-fun x315 () Int)
(declare-fun x126 () Int)
(declare-fun x13 () Int)
(declare-fun x336 () Bool)
(declare-fun x62 () Int)
(declare-fun x303 () Int)
(declare-fun x397 () Int)
(declare-fun x314 () Int)
(declare-fun x308 () Int)
(declare-fun x5 () Int)
(declare-fun x221 () Int)
(declare-fun x277 () Bool)
(declare-fun x374 () Int)
(declare-fun x156 () Bool)
(declare-fun x296 () Bool)
(declare-fun x60 () Bool)
(declare-fun x161 () Int)
(declare-fun x29 () Int)
(declare-fun x292 () Int)
(declare-fun x408 () Int)
(declare-fun x33 () Bool)
(declare-fun x354 () Int)
(declare-fun x334 () Int)
(declare-fun x96 () Int)
(declare-fun x242 () Bool)
(declare-fun x306 () Int)
(declare-fun x35 () Int)
(declare-fun x342 () Int)
(declare-fun x104 () Int)
(declare-fun x214 () x18)
(declare-fun x411 () Bool)
(declare-fun x171 () Int)
(declare-fun x434 () Bool)
(declare-fun x278 () Int)
(declare-fun x137 () Int)
(declare-fun x424 () Int)
(declare-fun x9 () Bool)
(declare-fun x55 () Int)
(declare-fun x356 () Int)
(declare-fun x426 () Int)
(declare-fun x50 () Int)
(declare-fun x222 () Int)
(declare-fun x162 () Bool)
(declare-fun x16 () Int)
(declare-fun x82 () Int)
(declare-fun x270 () Bool)
(declare-fun x38 () Int)
(declare-fun x338 () Int)
(declare-fun x319 () Int)
(declare-fun x102 () Bool)
(declare-fun x10 () Int)
(declare-fun x181 () Int)
(declare-fun x307 () Bool)
(declare-fun x224 () Int)
(declare-fun x154 () Int)
(declare-fun x264 () Int)
(declare-fun x207 () Int)
(declare-fun x180 () Int)
(declare-fun x365 () Int)
(declare-fun x118 () Bool)
(declare-fun x121 () Bool)
(declare-fun x157 () Int)
(declare-fun x40 () Int)
(declare-fun x430 () Bool)
(declare-fun x216 () Bool)
(declare-fun x250 () Int)
(declare-fun x366 () Bool)
(declare-fun x78 () Int)
(declare-fun x386 () Int)
(declare-fun x382 () Int)
(declare-fun x231 () Int)
(declare-fun x294 () Bool)
(declare-fun x152 () Int)
(declare-fun x57 () Int)
(declare-fun x377 () Int)
(declare-fun x183 () Int)
(declare-fun x415 () Bool)
(declare-fun x149 () Bool)
(declare-fun x364 () Int)
(declare-fun x105 () Int)
(declare-fun x142 () Int)
(declare-fun x407 () Int)
(declare-fun x420 () Bool)
(declare-fun x128 () Int)
(declare-fun x70 () Int)
(declare-fun x58 () Int)
(declare-fun x255 () Int)
(declare-fun x122 (Int) x18)
(declare-fun x369 () Int)
(declare-fun x268 () Int)
(declare-fun x281 (x18) Int)
(declare-fun x199 () Bool)
(declare-fun x333 () x18)
(declare-fun x274 () Int)
(declare-fun x148 () Int)
(declare-fun x188 () Bool)
(declare-fun x233 () Int)
(declare-fun x392 () Bool)
(declare-fun x163 () Int)
(declare-fun x15 () Int)
(declare-fun x433 () Bool)
(declare-fun x252 () Bool)
(declare-fun x45 () Int)
(declare-fun x36 (Int) Int)
(declare-fun x44 () Int)
(declare-fun x217 () Int)
(declare-fun x383 () Int)
(declare-fun x413 () Bool)
(declare-fun x133 () Bool)
(declare-fun x390 () Int)
(declare-fun x93 () Int)
(declare-fun x418 () Int)
(declare-fun x92 () Int)
(declare-fun x37 () Int)
(declare-fun x223 () Int)
(declare-fun x189 () Int)
(declare-fun x371 () Int)
(declare-fun x200 () Bool)
(declare-fun x241 () Int)
(declare-fun x273 () Bool)
(declare-fun x437 () Int)
(define-fun x323 ((x18 x18) (x124 Int)) x18 (ite ((_ is x178) x18) (x178 (x272 x18) (x348 x18) (+ (x261 x18) x124)) (ite ((_ is x399) x18) (x399 (x370 x18) (+ x124 (x394 x18))) (ite ((_ is x111) x18) (x111 (x141 x18) (x6 x18) (x301 x18) (x249 x18) (+ x124 (x238 x18))) (x43 (+ (x140 x18) x124))))))
(define-fun x284 ((x7 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x7) (<= 0 x7)) x7 (- x7 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x193 ((x7 Int)) Int (ite (and (> 0 x7) (>= x7 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x7) x7))
(define-fun x398 ((x332 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x332) (<= 0 x332)))
(define-fun x86 ((x332 Int)) Bool (and (= (x166 x332 115792089237316195423570985008687907853269984665640564039457584007913129639935) x332) (= x332 (x166 115792089237316195423570985008687907853269984665640564039457584007913129639935 x332))))
(define-fun x416 ((x332 Int)) Bool (and (= (x166 0 x332) 0) (= 0 (x166 x332 0))))
(define-fun x352 ((x332 Int)) Bool (= x332 (x166 x332 x332)))
(define-fun x310 ((x332 Int)) Bool (and (x352 x332) (x86 x332) (x416 x332)))
(define-fun x317 ((x332 Int) (x297 Int)) Bool (= (x166 x297 x332) (x166 x332 x297)))
(define-fun x167 ((x332 Int) (x297 Int)) Bool (and (>= (x166 x332 x297) 0) (=> (>= x297 0) (>= x297 (x166 x332 x297))) (=> (<= 0 x332) (<= (x166 x332 x297) x332))))
(define-fun x388 ((x332 Int) (x297 Int)) Bool (and (x167 x332 x297) (x317 x332 x297)))
(define-fun x100 ((x332 Int)) Bool (= (mod x332 1461501637330902918203684832716283019655932542976) (x166 x332 1461501637330902918203684832716283019655932542975)))
(define-fun x347 ((x332 Int)) Bool (and (x100 x332) (x388 x332 1461501637330902918203684832716283019655932542975)))
(define-fun x295 ((x229 x18)) Int (ite (= (x43 13) x229) x169 (x172 x229)))
(define-fun x132 ((x229 x18)) Int (ite (= x229 (x43 14)) x45 (x295 x229)))
(define-fun x191 ((x229 x18)) Int (ite (= (x43 15) x229) x303 (x132 x229)))
(define-fun x321 ((x229 x18)) Int (ite (= (x43 16) x229) x378 (x191 x229)))
(define-fun x202 ((x229 Int)) Int (ite (= 128 x229) x158 (x36 x229)))
(define-fun x30 ((x229 Int)) Int (ite (= 160 x229) (ite x433 1 0) (x202 x229)))
(define-fun x313 ((x229 Int)) Int (ite (= 128 x229) x358 (x230 x229)))
(define-fun x372 ((x229 Int)) Int (ite (= 160 x229) (ite x117 1 0) (x313 x229)))
(define-fun x245 ((x229 Int)) Int (ite (= x25 x229) 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x203 x229)))
(define-fun x8 ((x229 Int)) Int (ite (= x25 x229) 0 (x245 x229)))
(define-fun x393 ((x229 Int)) Int (ite (= x229 x135) 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x8 x229)))
(define-fun x108 ((x229 Int)) Int (ite (= x318 x229) (x235 x136) (x393 x229)))
(define-fun x298 ((x229 Int)) Int (ite (= x62 x229) x266 (x108 x229)))
(define-fun x120 ((x229 Int)) Int (ite (= x229 x250) x290 (x298 x229)))
(define-fun x83 ((x229 Int)) Int (ite (= x229 x135) (ite true 1 0) (x120 x229)))
(define-fun x17 ((x332 Int)) Bool (=> (and (not (= 3871629458 x332)) (not (= 3249860859 x332)) (not (= 3506505391 x332)) (not (= x332 1871194811)) (not (= x332 500647658)) (not (= 26959946667150639794667015087019630673637144422540572481103610249216 x332)) (not (= 2863377861 x332)) (not (= x332 2039265891)) (not (= x332 3567393941)) (not (= 954831406 x332)) (not (= 3812870723 x332)) (not (= 1439069736 x332)) (not (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 x332)) (not (= x332 1862597803)) (not (= 4105672269 x332)) (not (= x332 110688705405039355050572217931781119515373813223972846963051619115990310191104)) (not (= x332 1984976886)) (not (= 21304723245256853039595661774342629002073543191790936201937503064778531143680 x332)) (not (= 826074471 x332)) (not (= 1531409238 x332)) (not (= x332 1062488491900878629424266116482631147622884293147)) (not (= 1840041978 x332)) (not (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 x332)) (not (= 686821956 x332)) (> x332 10000) (not (= 2127478272 x332)) (not (= x332 790236105)) (not (= 3943638230 x332)) (not (= 519173431 x332)) (not (= x332 599290589)) (not (= 3008386744 x332)) (not (= x332 910484757)) (not (= x332 25742203781880459408941457317362166305709681742799472914177068605934923677696)) (not (= x332 70508962019145425934951811999677760319478833095128838543097651878529435959296)) (not (= x332 3996650231)) (not (= x332 1461501637330902918203684832716283019655932542975)) (not (= x332 100000)) (not (= x332 2966737888)) (not (= x332 86400)) (not (= 36576266130383907740409294828766280552204369950469466485900666250106563985408 x332)) (not (= 2580288415 x332)) (not (= x332 822145385)) (not (= x332 3002540418)) (not (= 770885568 x332)) (not (= 3366849169 x332)) (not (= 15314092380000 x332)) (not (= 922701707 x332)) (not (= 743225245 x332)) (not (= 3890975986 x332)) (not (= 1738207182 x332)) (not (= x332 1356689113)) (not (= 3224796394 x332)) (not (= 2876725745 x332)) (not (= x332 3051865383)) (not (= x332 2064814097)) (not (= x332 503383097)) (not (= x332 596258137)) (not (= x332 1816029635))) (not ((_ is x43) (x122 x332)))))
(assert (x398 x432))
(assert (x398 x48))
(assert (= 922701707 (x235 (x43 922701707))))
(assert (x398 x334))
(assert (= 3008386744 (x235 (x43 3008386744))))
(assert (x398 x51))
(assert (= (or x208 x267) x188))
(assert (= (x43 3002540418) (x122 3002540418)))
(assert (x398 x308))
(assert (x398 x71))
(assert (= (or x130 x412 x258) x402))
(assert (= (x235 (x43 3506505391)) 3506505391))
(assert (x398 x113))
(assert (= (x122 3506505391) (x43 3506505391)))
(assert (x398 x89))
(assert (x398 x109))
(assert (x398 x437))
(assert (x398 x312))
(assert (= (or x262 x271) x156))
(assert (= 500647658 (x235 (x43 500647658))))
(assert (x398 x404))
(assert (x17 x104))
(assert (x398 x403))
(assert (= (x122 2580288415) (x43 2580288415)))
(assert (= (and x294 x302) x208))
(assert (x398 x4))
(assert (x398 x228))
(assert (= (x235 (x43 822145385)) 822145385))
(assert (= (x43 922701707) (x122 922701707)))
(assert (= (x43 36576266130383907740409294828766280552204369950469466485900666250106563985408) (x122 36576266130383907740409294828766280552204369950469466485900666250106563985408)))
(assert (= 790236105 (x235 (x43 790236105))))
(assert (= x190 (=> (and (>= x65 0) (not (< x373 2863377861)) (not (> 3008386744 x373)) (= (x56 (x122 x290)) x324) (= x98 x353) (= x82 (x321 (x43 13))) (>= x255 0) (>= 1461501637330902918203684832716283019655932542975 x65) (not (< x373 2127478272)) (= 3051865383 x373) (<= 0 x221) (= x225 x371) (> x324 0) (>= 1461501637330902918203684832716283019655932542975 x353) (<= x171 1461501637330902918203684832716283019655932542975) (> 3224796394 x373) (= (x321 (x43 15)) x113) (= x308 x385) (= x78 (x321 (x43 14))) (= (x321 (x43 16)) x432) (not (= 3008386744 x373)) (>= 1461501637330902918203684832716283019655932542975 x221) (= x385 x65) (= x390 x221) (= x336 (< x227 x107)) (= x227 (+ x341 15314092380000)) (= x303 x341) (>= 1461501637330902918203684832716283019655932542975 x255) (not (< 2 x382)) (= 15314092380000 x70) (not (< x373 2580288415)) x336 (= (> x432 x395) x194) (= x107 x395) (<= 0 x353) (<= 0 x171) (= x98 x171) (= x371 0)) (and (=> (and (not x194) (and (= 0 x212) (= x358 x78))) x39) (=> (and (and (or (and (and (= x329 x134) (> x81 0) (= (div x115 x81) x55) (= x408 (x193 (- x82 x78))) (= x329 (x193 (- x82 x55))) (= x81 (x193 (- x432 x113))) (= x161 (x193 (- x395 x113))) (= x115 (mod (* x161 x408) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x129)) (and x129 (and (= (mod (* x439 x151) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x254) (= x407 (div x254 x240)) (= x134 x61) (= x151 (x193 (- x395 x113))) (> x240 0) (= (x193 (- x432 x113)) x240) (= x61 (x284 (+ x407 x82))) (= (x193 (- x78 x82)) x439)))) (= x129 (> x78 x82))) x194) x174)))))
(assert (x398 x64))
(assert (x398 x180))
(assert (= 743225245 (x235 (x43 743225245))))
(assert (x398 x379))
(assert (x398 x143))
(assert (x398 x371))
(assert (x398 x74))
(assert (x398 x291))
(assert (x398 x170))
(assert (x398 x158))
(assert (x398 x276))
(assert (x398 x78))
(assert (x398 x35))
(assert (= (x43 2064814097) (x122 2064814097)))
(assert (x398 x2))
(assert (x398 x92))
(assert (x398 x391))
(assert (x398 x115))
(assert (x398 x350))
(assert (x398 x55))
(assert (x398 x311))
(assert (x398 x378))
(assert (x398 x155))
(assert (x398 x257))
(assert (x398 x38))
(assert (x398 x175))
(assert (x17 1356689113))
(assert (x398 x283))
(assert (x398 x327))
(assert (= (x122 1862597803) (x43 1862597803)))
(assert (= x3 (and x23 x168)))
(assert (= (x235 (x43 1984976886)) 1984976886))
(assert (x398 x154))
(assert (=> (<= x89 10000) (= (x43 x89) (x122 x89))))
(assert (x398 x375))
(assert (= 3366849169 (x235 (x43 3366849169))))
(assert (x398 x365))
(assert (x398 x105))
(assert (x398 x138))
(assert (x398 x328))
(assert (= (x235 (x43 770885568)) 770885568))
(assert (= (or x33 x3) x359))
(assert (= 3567393941 (x235 (x43 3567393941))))
(assert (= (x122 1984976886) (x43 1984976886)))
(assert (= x149 (and x428 (not x63))))
(assert (x398 x26))
(assert (= x258 (and (not x199) x149)))
(assert (= (x122 1840041978) (x43 1840041978)))
(assert (= true x84))
(assert (x398 x22))
(assert (= (and x359 (not x194)) x363))
(assert (x398 x46))
(assert (x17 x290))
(assert (x398 x401))
(assert (= (x43 26959946667150639794667015087019630673637144422540572481103610249216) (x122 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x398 x400))
(assert (x398 x436))
(assert (= x39 (=> (and (and (= (not (= 0 x326)) x14) (= x14 x414) (= x185 x414) (= x97 (not x185))) (and (= (not (= 0 x212)) x117) (= x330 (x372 128)) (= (x372 160) x326))) x97)))
(assert (x398 x29))
(assert (x17 x26))
(assert (= (x43 1738207182) (x122 1738207182)))
(assert (x398 x42))
(assert (= (x43 770885568) (x122 770885568)))
(assert (x398 x345))
(assert (x398 x224))
(assert (x398 x66))
(assert (= 2863377861 (x235 (x43 2863377861))))
(assert (x398 x144))
(assert (x398 x324))
(assert (x398 x142))
(assert (x398 x1))
(assert (x398 x346))
(assert (x398 x427))
(assert (x398 x390))
(assert (= x340 (or x273 x363)))
(assert (x398 x251))
(assert (x398 x253))
(assert (= x130 (and x199 x149)))
(assert (= 0 (x203 x369)))
(assert (not x99))
(assert (= 36576266130383907740409294828766280552204369950469466485900666250106563985408 (x235 (x43 36576266130383907740409294828766280552204369950469466485900666250106563985408))))
(assert (x398 x419))
(assert (= (and x396 x425) x237))
(assert (x398 x62))
(assert (x398 x232))
(assert (=> (>= 10000 (x322 x247 224)) (= (x122 (x322 x247 224)) (x43 (x322 x247 224)))))
(assert (x398 x354))
(assert (= (x43 3943638230) (x122 3943638230)))
(assert (x398 x112))
(assert (x398 x145))
(assert (x398 x210))
(assert (= (x322 x247 224) (div x247 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x398 x405))
(assert (x398 x65))
(assert (x398 x383))
(assert (x17 954831406))
(assert (x17 x89))
(assert (x398 x377))
(assert (x398 x87))
(assert (x398 x367))
(assert (x398 x15))
(assert (x398 x364))
(assert (x398 x247))
(assert (= (x122 1461501637330902918203684832716283019655932542975) (x43 1461501637330902918203684832716283019655932542975)))
(assert (x398 x114))
(assert (= (x235 (x122 x325)) x325))
(assert (= (or x287 x162) x273))
(assert (= (x122 25742203781880459408941457317362166305709681742799472914177068605934923677696) (x43 25742203781880459408941457317362166305709681742799472914177068605934923677696)))
(assert (x398 x161))
(assert (x398 x292))
(assert (= (x122 106320276355336348263208190817157392285036095892762275362566149969828045127680) (x43 106320276355336348263208190817157392285036095892762275362566149969828045127680)))
(assert (= (x43 3996650231) (x122 3996650231)))
(assert (x398 x358))
(assert (= x102 (or x237 x20 x402)))
(assert (= (x43 503383097) (x122 503383097)))
(assert (x17 x109))
(assert (x398 x67))
(assert (x398 x318))
(assert (x398 x183))
(assert (x398 x373))
(assert (x398 x110))
(assert (= (x122 (x235 x136)) x136))
(assert true)
(assert (x398 x424))
(assert (x398 x32))
(assert (x398 x254))
(assert (= (and x413 x307) x262))
(assert (= 599290589 (x235 (x43 599290589))))
(assert (= (x203 x27) 0))
(assert (x398 x410))
(assert (x398 x329))
(assert (x398 x176))
(assert (x398 x153))
(assert (x398 x382))
(assert (x398 x233))
(assert (x398 x423))
(assert (x398 x146))
(assert (= 954831406 (x235 (x43 954831406))))
(assert (x398 x28))
(assert (= 15314092380000 (x235 (x43 15314092380000))))
(assert (x398 x134))
(assert (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x235 (x43 77196514420459877940035116867124998943289115686762304616657918434777787006976))))
(assert (= (x235 (x43 70508962019145425934951811999677760319478833095128838543097651878529435959296)) 70508962019145425934951811999677760319478833095128838543097651878529435959296))
(assert (x398 x205))
(assert (= (and x411 x242) x20))
(assert (x398 x265))
(assert (x398 x286))
(assert (x17 x325))
(assert (x398 x255))
(assert (=> (>= 10000 x109) (= (x122 x109) (x43 x109))))
(assert (x398 x385))
(assert (x398 x31))
(assert (= x148 (x235 (x122 x148))))
(assert (x398 x335))
(assert (x398 x82))
(assert (= (x235 (x122 x89)) x89))
(assert (= (x235 (x43 2039265891)) 2039265891))
(assert (x398 x163))
(assert (x398 x319))
(assert (= (x43 596258137) (x122 596258137)))
(assert (= (and x355 (not x129)) x162))
(assert (= (x43 2966737888) (x122 2966737888)))
(assert (= 2966737888 (x235 (x43 2966737888))))
(assert (x398 x223))
(assert (= (and x366 x368) x201))
(assert (= (x43 954831406) (x122 954831406)))
(assert (x398 x150))
(assert (x398 x160))
(assert (x398 x34))
(assert (x398 x384))
(assert (x398 x353))
(assert (x398 x263))
(assert (x398 x293))
(assert (= (x235 (x43 2064814097)) 2064814097))
(assert (x398 x10))
(assert (x398 x40))
(assert (= 1439069736 (x235 (x43 1439069736))))
(assert (= (x235 (x43 3224796394)) 3224796394))
(assert (x398 x316))
(assert (x398 x151))
(assert (= (x122 3567393941) (x43 3567393941)))
(assert (= (x122 21304723245256853039595661774342629002073543191790936201937503064778531143680) (x43 21304723245256853039595661774342629002073543191790936201937503064778531143680)))
(assert (= (x43 3224796394) (x122 3224796394)))
(assert (x398 x211))
(assert (x398 x426))
(assert (= (and x116 x84) x80))
(assert (=> (>= 10000 x290) (= (x43 x290) (x122 x290))))
(assert (x398 x231))
(assert (x398 x422))
(assert (x398 x5))
(assert (x398 x152))
(assert (x398 x314))
(assert (x398 x326))
(assert (= (x43 826074471) (x122 826074471)))
(assert (x398 x119))
(assert (x398 x356))
(assert (x398 x169))
(assert (x398 x217))
(assert (= (x122 3249860859) (x43 3249860859)))
(assert (x398 x239))
(assert (= x109 (x235 (x122 x109))))
(assert (= x168 (or x361 x156)))
(assert (x398 x101))
(assert (x398 x127))
(assert (= (x43 2039265891) (x122 2039265891)))
(assert (x398 x221))
(assert (= (x43 1531409238) (x122 1531409238)))
(assert (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 (x235 (x43 106320276355336348263208190817157392285036095892762275362566149969828045127680))))
(assert (x398 x187))
(assert (x398 x204))
(assert (= (x235 (x43 1862597803)) 1862597803))
(assert (x398 x337))
(assert (x398 x260))
(assert (x398 x343))
(assert (x398 x72))
(assert (= (x43 2127478272) (x122 2127478272)))
(assert (= (x43 2876725745) (x122 2876725745)))
(assert (x398 x91))
(assert (= (x43 70508962019145425934951811999677760319478833095128838543097651878529435959296) (x122 70508962019145425934951811999677760319478833095128838543097651878529435959296)))
(assert (x398 x37))
(assert (x347 x48))
(assert (x398 x269))
(assert (= 1062488491900878629424266116482631147622884293147 (x235 (x43 1062488491900878629424266116482631147622884293147))))
(assert (x398 x58))
(assert (x398 x438))
(assert (= x287 (and x129 x355)))
(assert (x398 x189))
(assert (= 503383097 (x235 (x43 503383097))))
(assert (x398 x76))
(assert (x398 x73))
(assert (x398 x325))
(assert (= (and (not x420) x188) x361))
(assert (= (x235 (x43 686821956)) 686821956))
(assert (= 954831406 (x235 (x122 954831406))))
(assert (x398 x248))
(assert (x398 x12))
(assert (= (x235 (x43 910484757)) 910484757))
(assert (x17 3943638230))
(assert (= (x43 4105672269) (x122 4105672269)))
(assert (x398 x148))
(assert (= x165 (=> (and (= x146 1) (= x383 x158)) x118)))
(assert (= x307 (and x420 x188)))
(assert (= (=> (and (not (> x251 5000)) (not (< x231 86400)) (= (x172 (x43 13)) x105) (> x426 0) (= (x193 (- x378 x303)) x231) (not (< x282 x210)) (= x331 (x172 (x43 15))) (= x386 (x172 (x43 16))) (= (> x386 x303) x420) (= x375 (x172 (x43 14))) (not (> 1 x251))) (and (=> (and x420 (and (= x413 (> x375 x105)) (or (and (and (= (x193 (- x105 x375)) x137) (= x278 x401) (= x110 (x193 (- x303 x331))) (= (div x4 x75) x404) (= x4 (mod (* x110 x137) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> x75 0) (= (x193 (- x386 x331)) x75) (= x401 (x193 (- x105 x404)))) (not x413)) (and x413 (and (= (div x22 x66) x367) (= x343 x278) (= x66 (x193 (- x386 x331))) (= x79 (x193 (- x303 x331))) (> x66 0) (= x51 (x193 (- x375 x105))) (= (mod (* x79 x51) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x22) (= x343 (x284 (+ x105 x367)))))))) x351) (=> (and (not x420) (and (= x375 x169) (= x5 0))) x280))) x133))
(assert (x398 x406))
(assert (x398 x395))
(assert (= (x43 3051865383) (x122 3051865383)))
(assert (x398 x246))
(assert (x398 x13))
(assert (= (x43 110688705405039355050572217931781119515373813223972846963051619115990310191104) (x122 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (= (x122 1871194811) (x43 1871194811)))
(assert (= (and x415 x80) x192))
(assert (x398 x70))
(assert (x398 x197))
(assert (x398 x250))
(assert (= (=> (and (= x234 x189) (= x96 x93)) x54) x60))
(assert (x398 x259))
(assert (x398 x376))
(assert (= (=> (and (and (< 0 x290) (>= 1461501637330902918203684832716283019655932542975 x89) (<= x290 1461501637330902918203684832716283019655932542975) (< x12 3567393941) (not (= x290 x89)) (>= x58 0) (not (= x89 x148)) (>= x387 0) (< 0 x89) (= 3249860859 x12) x380 (>= x72 0) x296 (= x176 (x281 (x122 x89))) (= x387 (x281 (x122 x325))) (> x325 0) (not (= x325 x89)) (< 0 x148) (> x104 0) (not (= x104 x89)) (= (< 0 (x56 (x122 x104))) x360) (>= x176 0) (not (= x325 x104)) (not (= x325 x290)) (<= x104 1461501637330902918203684832716283019655932542975) (> 3366849169 x12) (= x88 (< 0 (x56 (x122 x148)))) (not (= 3224796394 x12)) x360 (= (< 0 (x56 (x122 x290))) x53) (not (< x12 2127478272)) (= x72 (x281 (x122 x104))) (<= x148 1461501637330902918203684832716283019655932542975) (not (< x12 3224796394)) (= x339 86400) (> x376 0) x88 (not (= x290 x104)) (<= 0 x2) (= (x281 (x122 x290)) x58) (= (< 0 (x56 (x122 x89))) x380) x53 (>= 1461501637330902918203684832716283019655932542975 x325) (not (= x290 x148)) (= (x56 (x122 x290)) x376) (= x2 (x281 (x122 x148))) (= x296 (< 0 (x56 (x122 x325)))) (> 3812870723 x12) (not (= x325 x148)) (not (= x104 x148))) (and (and (= 1531409238 x357) (not (= 3224796394 x103)) (= 3249860859 x103) (= (x56 (x122 x290)) x276) (> 3366849169 x103) (= x217 86400) (not (< x103 3224796394)) (= x50 86400) (not (< x103 2127478272)) (< x103 3812870723) (< 0 x276) (< x103 3567393941)) (and (and (and (and (and (and (not (> 500647658 x263)) (= 686821956 x263) (< x263 2127478272) (= x127 (x56 (x122 x290))) (> 743225245 x263) (not (> 596258137 x263)) (> x127 0) (not (= x263 599290589)) (= x417 1) (= x40 1) (not (= x263 596258137)) (> 954831406 x263) (= x215 1)) (and (and (and (and (= 0 x424) (not (< x197 1984976886)) (not (< x197 1871194811)) (not (> 1439069736 x197)) (not (= x197 2039265891)) (< x197 2127478272) (= 64 x391) (= x421 true) (not (= x197 1984976886)) (= x335 0) (= 2064814097 x197) (not (> 954831406 x197)) (= (x56 (x122 x290)) x147) (< 0 x147)) (and (and (= x155 3506505391) (= x114 64) (not (> 3224796394 x155)) (= x121 true) (not (> 2127478272 x155)) (= (x56 (x122 x290)) x205) (> 3567393941 x155) (= x259 128) (> 3812870723 x155) (not (< x155 3366849169)) (> x205 0) (not (= x155 3366849169)) (= 64 x226)) (and (and (and (and (and (= x356 x218) (< 0 x406) (<= x69 1461501637330902918203684832716283019655932542975) (<= 0 x233) (= 3051865383 x409) (= x67 (x172 (x43 16))) (not (> 2580288415 x409)) (= x316 (x172 (x43 15))) (= x264 0) (not (> 2127478272 x409)) (= x218 x233) (not (> 2863377861 x409)) (not (= 3008386744 x409)) (<= 0 x204) (= x406 (x56 (x122 x290))) (not (< x409 3008386744)) (<= 0 x69) (<= x233 1461501637330902918203684832716283019655932542975) (= x266 x204) (>= 1461501637330902918203684832716283019655932542975 x204) (= 100000 x77) (= (x172 (x43 13)) x315) (= (x172 (x43 14)) x260) (= 5000 x71) (= x264 x288) (< x409 3224796394) (= x116 (< x303 x67))) (and (not (= 500647658 x274)) (>= x328 0) (< x274 596258137) (= true x277) (>= 1461501637330902918203684832716283019655932542975 x328) (= (x56 (x122 x290)) x187) (= 5000 x327) (not (= 503383097 x274)) (> 954831406 x274) (= 519173431 x274) (>= 1461501637330902918203684832716283019655932542975 x182) (= x312 5000) (< x274 2127478272) (= x266 x182) (< x274 743225245) (<= 0 x182) (= x119 64) (= 64 x334) (= x299 x328) (> x187 0) (not (< x274 500647658)))) (and (not (> 954831406 x49)) (= x49 1871194811) (not (< x49 1871194811)) (< x49 2127478272) (= x173 64) (= x289 64) (not (< x49 1439069736)) (> 1984976886 x49) (= 64 x180) (< 0 x365) (= (x56 (x122 x290)) x365) (= x200 true))) (and (= x246 64) (= x241 192) (= 192 x314) (= x309 true) (not (< x275 3890975986)) (< x275 3996650231) (not (< x275 3224796394)) (= x275 3890975986) (not (< x275 2127478272)) (= x232 (x56 (x122 x290))) (not (< x275 3812870723)) (< 0 x232))) (and (= 128 x222) (not (< x74 954831406)) (not (> 1439069736 x74)) (= x112 (x56 (x122 x290))) (= 192 x76) (< x74 2127478272) (= true x186) (= x268 128) (not (= 1816029635 x74)) (not (> 1738207182 x74)) (not (= x74 1840041978)) (< 0 x112) (not (= 1738207182 x74)) (= x74 1862597803) (> 1871194811 x74))))) (and (not (= x419 2966737888)) (not (> 2127478272 x419)) (= 3002540418 x419) (not (= 2876725745 x419)) (not (> 2580288415 x419)) (not (> 2863377861 x419)) (not (= x419 2863377861)) (> 3008386744 x419) (= x338 0) (< 0 x291) (< x419 3224796394) (= 100000 x345) (= (x56 (x122 x290)) x291) (= 5000 x403))) (and (= x35 0) (= x349 5000) (= (x56 (x122 x290)) x320) (< x157 743225245) (> x320 0) (< x157 954831406) (= 5000 x436) (not (> 500647658 x157)) (not (= 503383097 x157)) (> 596258137 x157) (= 519173431 x157) (not (= 500647658 x157)) (> 2127478272 x157) (= x397 1)))) (and (not (< x209 500647658)) (= x123 1) (< 0 x243) (> 954831406 x209) (= (x56 (x122 x290)) x243) (= x209 686821956) (= 1 x126) (< x209 743225245) (not (> 596258137 x209)) (= x292 5000) (not (= x209 599290589)) (< x209 2127478272) (not (= 596258137 x209)))) (and (< x228 743225245) (= 5000 x29) (= x253 5000) (= 519173431 x228) (= (x56 (x122 x290)) x170) (< x228 2127478272) (not (= x228 503383097)) (< x228 596258137) (= x305 true) (not (< x228 500647658)) (> x170 0) (= 1000 x153) (not (= x228 500647658)) (> 954831406 x228) (= 1000 x10))) (and (= true x392) (= x44 2) (< x293 2127478272) (= 1000 x438) (not (> 1738207182 x293)) (= x183 (x56 (x122 x290))) (not (< x293 1439069736)) (= x285 2) (< 0 x183) (= x293 1816029635) (not (= x293 1738207182)) (> 1871194811 x293) (not (< x293 954831406)))) (and (= (x56 (x122 x290)) x344) (not (= 822145385 x138)) (not (< x138 822145385)) (= 86400 x248) (not (> 743225245 x138)) (> x344 0) (> 954831406 x138) (not (< x138 500647658)) (not (= 910484757 x138)) (> 2127478272 x138) (not (= x138 826074471)) (= 2 x154) (= 0 x92) (= x138 922701707))))) (and (=> (and (and (= x158 x260) (= 0 x146)) (not x116)) x118) (=> (and x116 (and (= x415 (< x315 x260)) (or (and (and (= x68 (x193 (- x67 x316))) (= x383 x311) (< 0 x68) (= (x193 (- x315 x260)) x304) (= x52 (div x342 x68)) (= x311 (x193 (- x315 x52))) (= (x193 (- x303 x316)) x181) (= (mod (* x304 x181) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x342)) (not x415)) (and (and (= (div x346 x73) x16) (= (mod (* x64 x211) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x346) (< 0 x73) (= x244 (x284 (+ x16 x315))) (= x211 (x193 (- x260 x315))) (= x244 x383) (= x73 (x193 (- x67 x316))) (= x64 (x193 (- x303 x316)))) x415)))) x165))) x99))
(assert (= 790236105 (x235 (x122 790236105))))
(assert (= (x235 (x43 110688705405039355050572217931781119515373813223972846963051619115990310191104)) 110688705405039355050572217931781119515373813223972846963051619115990310191104))
(assert (= 1871194811 (x235 (x43 1871194811))))
(assert (= (x235 (x43 3943638230)) 3943638230))
(assert (= (x235 (x122 (x322 x247 224))) (x322 x247 224)))
(assert (= (x122 1816029635) (x43 1816029635)))
(assert (x398 x131))
(assert (=> (<= x104 10000) (= (x122 x104) (x43 x104))))
(assert (x398 x418))
(assert (x398 x330))
(assert (x398 x236))
(assert (= x351 (=> (and (= x278 x169) (= x5 1)) x280)))
(assert (x398 x290))
(assert (x398 x104))
(assert (= (x235 (x43 596258137)) 596258137))
(assert (x398 x417))
(assert (= (and x302 (not x294)) x267))
(assert (= (=> (and (and (< (* x251 1000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x139 1000) (= (mod (* x381 1000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x45) (= x23 (< x169 x45)) (= 0 x5)) (or (and (not x23) (and (= (mod (* x231 x45) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x41) (= x31 (ite (= x144 0) 0 (x284 (+ (mod (div (x193 (- x144 1)) x41) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)))) (not (= 0 x41)) (= x382 x31) (= x144 (mod (* x169 86400) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< (* x231 x45) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 86400 x91) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x169 86400)))) (and (and (= x279 (mod (* x45 86400) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x410 x382) (not (= x423 0)) (= (mod (* x231 x169) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x423) (ite x47 x47 (= (div x423 x169) x231)) (= (div x42 x423) x354) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x45 86400)) (= (= 0 x169) x47) (= x410 (x284 (+ x354 1))) (= x42 (x193 (- x279 1))) (= 86400 x13)) x23))) x190) x280))
(assert (x398 x49))
(assert (x398 x50))
(assert (x398 x357))
(assert (= (=> (and (= (= 0 x125) x294) (or (and (and (= x318 x319) (< 0 x389) (= (x284 (+ x25 32)) x135) (not (> 2863377861 x24)) (= x159 4) (= x25 x369) (= (x56 (x122 x325)) x306) (= x62 (x284 (+ x318 32))) (not (= x306 0)) (= x109 (x8 x369)) (= x160 x159) (= x21 (not x198)) (= x319 (x284 (+ x135 4))) (= (= 0 x374) x198) (= x337 (x56 (x122 x109))) (= x389 (x56 (x122 x325))) (= x131 (ite x21 1 0)) (= 4 x160) (< x24 3871629458) (= x131 x374) (= x24 2863377861) (= x135 x27) (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 x34) (= x250 (x284 (+ x62 32))) (= (x83 x27) x374) (not (< x160 4)) (<= x109 1461501637330902918203684832716283019655932542975) (= x374 x426) (not (= x337 0))) x294) (and (and (= x362 (x166 1461501637330902918203684832716283019655932542975 x48)) (= (ite x434 1 0) x426) (= x434 (= x362 x28))) (not x294)))) x133) x219))
(assert (= (x122 743225245) (x43 743225245)))
(assert (x398 x209))
(assert (x398 x288))
(assert (x398 x225))
(assert (x398 x274))
(assert (= (x43 822145385) (x122 822145385)))
(assert (x398 x159))
(assert (x17 (x322 x247 224)))
(assert (= (x235 (x43 1531409238)) 1531409238))
(assert (= x252 (or x102 x201)))
(assert (x17 790236105))
(assert (= (and x430 x177) x366))
(assert (x398 x241))
(assert (= (x235 (x43 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x9 (or x195 x192)))
(assert (x398 x397))
(assert (x398 x338))
(assert (x398 x431))
(assert (= (x235 (x43 2876725745)) 2876725745))
(assert (x398 x106))
(assert (= (and x411 (not x242)) x396))
(assert (x398 x304))
(assert (x398 x45))
(assert (= (x235 (x43 1840041978)) 1840041978))
(assert (= x104 (x235 (x122 x104))))
(assert (x398 x342))
(assert (x398 x90))
(assert (= 1356689113 (x235 (x43 1356689113))))
(assert (= (and x359 x194) x355))
(assert (= (x43 2863377861) (x122 2863377861)))
(assert (x398 x374))
(assert (x398 x52))
(assert (= (x235 (x43 4105672269)) 4105672269))
(assert (x398 x171))
(assert (x398 x44))
(assert (= (x235 (x43 3051865383)) 3051865383))
(assert (x398 x215))
(assert (x398 x16))
(assert (= x302 (or x252 x19)))
(assert (x398 x182))
(assert (x398 x126))
(assert (x398 x349))
(assert (x398 x57))
(assert (= (x235 (x122 3943638230)) 3943638230))
(assert (x398 x222))
(assert (= (x235 (x43 1816029635)) 1816029635))
(assert (x310 1461501637330902918203684832716283019655932542975))
(assert (x398 x135))
(assert (x398 x279))
(assert (x398 x275))
(assert (= x195 (and (not x415) x80)))
(assert (x398 x244))
(assert (x398 x344))
(assert (x398 x79))
(assert (x398 x128))
(assert (=> (>= 10000 x148) (= (x122 x148) (x43 x148))))
(assert (x398 x300))
(assert (x398 x93))
(assert (= (and x430 (not x177)) x19))
(assert (x398 x243))
(assert (x398 x98))
(assert (= 826074471 (x235 (x43 826074471))))
(assert (x398 x212))
(assert (= (x235 (x43 25742203781880459408941457317362166305709681742799472914177068605934923677696)) 25742203781880459408941457317362166305709681742799472914177068605934923677696))
(assert (x398 x123))
(assert (= (x122 1439069736) (x43 1439069736)))
(assert (x398 x77))
(assert (= (x43 77196514420459877940035116867124998943289115686762304616657918434777787006976) (x122 77196514420459877940035116867124998943289115686762304616657918434777787006976)))
(assert (x398 x207))
(assert (= (and x366 (not x368)) x411))
(assert (= (x235 (x122 x26)) x26))
(assert (x398 x299))
(assert (x398 x389))
(assert (= (x122 3871629458) (x43 3871629458)))
(assert (x398 x362))
(assert (= 3890975986 (x235 (x43 3890975986))))
(assert (= x271 (and (not x413) x307)))
(assert (= (x235 (x43 3871629458)) 3871629458))
(assert (x398 x331))
(assert (= x164 (=> (and (= x25 x427) (= x125 x265)) x219)))
(assert (x398 x234))
(assert (= x33 (and (not x23) x168)))
(assert (x398 x69))
(assert (x398 x181))
(assert (x398 x282))
(assert (x398 x139))
(assert (x398 x289))
(assert (x310 x48))
(assert (x398 x285))
(assert (= (x43 910484757) (x122 910484757)))
(assert (x398 x24))
(assert (x398 x94))
(assert (x398 x125))
(assert (x398 x256))
(assert (= (x235 (x43 1738207182)) 1738207182))
(assert (= (x122 1356689113) (x43 1356689113)))
(assert (=> (>= 10000 x26) (= (x43 x26) (x122 x26))))
(assert (x398 x81))
(assert (= (x43 3008386744) (x122 3008386744)))
(assert (x398 x320))
(assert (x398 x278))
(assert (x398 x173))
(assert (x398 x435))
(assert (= (x235 (x43 519173431)) 519173431))
(assert (x398 x59))
(assert (= (x235 (x43 26959946667150639794667015087019630673637144422540572481103610249216)) 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= (x122 1062488491900878629424266116482631147622884293147) (x43 1062488491900878629424266116482631147622884293147)))
(assert (= (x43 686821956) (x122 686821956)))
(assert (x398 x387))
(assert (x398 x240))
(assert (= (x43 86400) (x122 86400)))
(assert (x398 x303))
(assert (x398 x409))
(assert (x398 x408))
(assert (= 100000 (x235 (x43 100000))))
(assert (x17 4105672269))
(assert (= (x43 3812870723) (x122 3812870723)))
(assert (x398 x306))
(assert (= (x235 (x122 x290)) x290))
(assert (= x430 (or x9 x216)))
(assert (x398 x369))
(assert (= x118 (=> (and (and (= (x30 160) x145) (= (x30 128) x400) (= (not (= 0 x146)) x433)) (and (and (= x422 x400) (> 2127478272 x90) (= x422 x94) (> x283 0) (= 5000 x437) (= x270 x196) (= 5000 x143) (< x90 596258137) (= x283 (x56 (x122 x290))) (not (= x90 503383097)) (= x90 519173431) (< x90 743225245) (not (= 500647658 x90)) (< x90 954831406) (not (< x90 500647658)) x220 (= x85 (not (= 0 x145))) (= x85 x196) (= (not x270) x220)) (and (= 5000 x152) (not (= x59 770885568)) (not (> 743225245 x59)) (< x59 822145385) (= x256 x381) (= x384 x356) (> x239 0) (<= x377 1461501637330902918203684832716283019655932542975) (not (> 500647658 x59)) (<= 0 x28) (= x303 x210) (not (= x59 743225245)) (>= x377 0) (= x177 (not (= 1062488491900878629424266116482631147622884293147 x350))) (= x95 (> 5000 x94)) (= x59 790236105) (= x379 x378) (= (x56 (x122 x290)) x239) (<= 0 x142) (= x379 x101) (= x142 x384) (< x59 2127478272) (= x266 x28) x95 (= x378 x282) (= x381 x251) (>= 1461501637330902918203684832716283019655932542975 x142) (<= x28 1461501637330902918203684832716283019655932542975) (= 0 x300) (= x300 x288) (< x59 954831406) (= x256 x150) (= x136 (x111 (x43 36) (x43 32) (x122 x26) (x122 (x322 x247 224)) 0)) (= x350 (x166 1461501637330902918203684832716283019655932542975 x48)) (= x247 (mod (* 26959946667150639794667015087019630673637144422540572481103610249216 x59) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (and (=> (and (and (= x206 110688705405039355050572217931781119515373813223972846963051619115990310191104) (= x184 (x111 (x43 36) (x43 32) (x122 x26) (x122 4105672269) 0)) (= x368 (= x184 x136))) x177) (and (=> (and (and (= x242 (= x136 x214)) (= (x111 (x43 36) (x43 32) (x122 x26) (x122 790236105) 0) x214) (= x364 21304723245256853039595661774342629002073543191790936201937503064778531143680)) (not x368)) (and (=> (and (not x242) (and (= x128 106320276355336348263208190817157392285036095892762275362566149969828045127680) (= x425 (= x136 x179)) (= x179 (x111 (x43 36) (x43 32) (x122 x26) (x122 3943638230) 0)))) (and (=> (and (and (or (and (and (and (= x429 (x111 (x43 36) (x43 32) (x122 x26) (x122 1356689113) 0)) (= x175 36576266130383907740409294828766280552204369950469466485900666250106563985408) (= x199 (= x136 x429))) (or (and x199 (and (= x96 (ite x199 1 0)) (= x189 536))) (and (not x199) (and (= 0 x96) (= 0 x163) (= x189 536))))) (not x63)) (and x63 (and (= 468 x189) (= x96 (ite x63 1 0))))) (and (= x224 25742203781880459408941457317362166305709681742799472914177068605934923677696) (= (= x136 x333) x63) (= (x111 (x43 36) (x43 32) (x122 x26) (x122 954831406) 0) x333))) (not x425)) x60) (=> (and x425 (and (= x93 (ite x425 1 0)) (= 400 x234))) x54))) (=> (and x242 (and (= x93 (ite x242 1 0)) (= 332 x234))) x54))) (=> (and (and (= x265 (ite x368 1 0)) (= x427 264)) x368) x164))) (=> (and (not x177) (and (= x25 196) (= x125 (ite x177 1 0)))) x219)))))
(assert (= 21304723245256853039595661774342629002073543191790936201937503064778531143680 (x235 (x43 21304723245256853039595661774342629002073543191790936201937503064778531143680))))
(assert (x398 x264))
(assert (=> (<= x325 10000) (= (x122 x325) (x43 x325))))
(assert (x398 x407))
(assert (= (x235 (x43 3249860859)) 3249860859))
(assert (x398 x266))
(assert (x398 x381))
(assert (x17 x148))
(assert (= (and x396 (not x425)) x428))
(assert (= (x43 500647658) (x122 500647658)))
(assert (x398 x75))
(assert (x398 x218))
(assert (x398 x439))
(assert (x398 x157))
(assert (= (x122 3366849169) (x43 3366849169)))
(assert (= 3002540418 (x235 (x43 3002540418))))
(assert (= (x43 3890975986) (x122 3890975986)))
(assert (= (x235 (x43 3812870723)) 3812870723))
(assert (x398 x147))
(assert (x398 x206))
(assert (x398 x68))
(assert (= (x43 790236105) (x122 790236105)))
(assert (= 1356689113 (x235 (x122 1356689113))))
(assert (= (x235 (x122 4105672269)) 4105672269))
(assert (= 86400 (x235 (x43 86400))))
(assert (= (and x84 (not x116)) x216))
(assert (= 2127478272 (x235 (x43 2127478272))))
(assert (= x412 (and x428 x63)))
(assert (x398 x386))
(assert (= (x122 599290589) (x43 599290589)))
(assert (= x54 (=> (and (= x427 x234) (= x93 x265)) x164)))
(assert (= (x235 (x43 2580288415)) 2580288415))
(assert (x398 x315))
(assert (x398 x103))
(assert (x398 x339))
(assert (x398 x226))
(assert (x398 x268))
(assert (= (x235 (x43 3996650231)) 3996650231))
(assert (= (x43 519173431) (x122 519173431)))
(assert (x398 x61))
(assert (= (x43 15314092380000) (x122 15314092380000)))
(assert (= x174 (=> (and (= x134 x358) (= 1 x212)) x39)))
(assert (x398 x137))
(assert (x398 x96))
(assert (x398 x25))
(assert (x398 x41))
(assert (x398 x27))
(assert (= (x43 100000) (x122 100000)))
(check-sat)
(exit)