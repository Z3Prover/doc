(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x114 () Int)
(declare-fun x77 () Int)
(declare-fun x178 (Int) Int)
(declare-fun x89 () Bool)
(declare-fun x4 () Int)
(declare-fun x164 () Int)
(declare-fun x160 (Int) Int)
(declare-fun x173 () Bool)
(declare-fun x150 (Int Int) Int)
(declare-fun x11 () Int)
(declare-fun x154 () Int)
(declare-fun x33 () Bool)
(declare-fun x103 () Int)
(declare-fun x104 () Int)
(declare-fun x53 () Bool)
(declare-fun x153 () Int)
(declare-fun x40 (Int) Int)
(declare-fun x186 () Int)
(declare-fun x147 () Bool)
(declare-fun x26 () Int)
(declare-fun x194 (Int) Int)
(declare-fun x172 () Int)
(declare-fun x199 () Bool)
(declare-fun x120 (Int) Int)
(declare-fun x136 () Bool)
(declare-fun x123 () Bool)
(declare-fun x64 () Int)
(declare-fun x184 () Int)
(declare-fun x180 () Int)
(declare-fun x155 () Int)
(declare-fun x127 () Int)
(declare-fun x168 () Int)
(declare-fun x177 () Bool)
(declare-fun x47 () Bool)
(declare-fun x212 () Bool)
(declare-fun x201 () Int)
(declare-fun x94 () Bool)
(declare-fun x73 () Bool)
(declare-fun x46 () Int)
(declare-fun x69 () Bool)
(declare-fun x83 (Int) Int)
(declare-fun x20 () Int)
(declare-fun x174 () Bool)
(declare-fun x126 () Int)
(declare-fun x52 () Int)
(declare-fun x51 () Bool)
(declare-fun x128 () Int)
(declare-fun x34 () Int)
(declare-fun x175 () Int)
(declare-fun x85 () Int)
(declare-fun x99 (Int) Int)
(declare-fun x84 () Bool)
(declare-fun x144 () Int)
(declare-fun x142 () Int)
(declare-fun x81 () Int)
(declare-fun x91 () Int)
(declare-fun x54 () Int)
(declare-fun x112 (Int) Int)
(declare-fun x179 () Bool)
(declare-fun x122 () Int)
(declare-fun x119 () Bool)
(declare-fun x132 () Bool)
(declare-fun x202 () Bool)
(declare-fun x28 () Int)
(declare-fun x50 () Int)
(declare-fun x162 () Int)
(declare-fun x10 () Int)
(declare-fun x72 () Int)
(declare-fun x188 () Bool)
(declare-fun x22 (Int Int) Int)
(declare-fun x71 () Int)
(declare-fun x12 () Int)
(declare-fun x109 () Int)
(declare-fun x60 () Bool)
(declare-fun x58 () Int)
(declare-fun x24 () Int)
(declare-fun x151 () Bool)
(declare-fun x117 () Int)
(declare-fun x3 () Int)
(declare-fun x95 () Int)
(declare-fun x171 () Bool)
(declare-fun x23 () Bool)
(declare-fun x200 () Int)
(declare-fun x181 () Int)
(declare-fun x197 () Int)
(declare-fun x193 () Int)
(declare-fun x166 (Int Int) Int)
(declare-fun x17 () Bool)
(declare-fun x66 (Int) Int)
(declare-fun x97 () Int)
(declare-fun x63 () Bool)
(declare-fun x183 () Int)
(declare-fun x36 () Int)
(declare-fun x143 () Bool)
(declare-fun x198 () Int)
(declare-fun x134 () Bool)
(declare-fun x74 () Int)
(declare-fun x116 () Bool)
(declare-fun x13 () Int)
(declare-fun x15 () Int)
(declare-fun x93 () Int)
(declare-fun x30 () Int)
(declare-fun x59 () Bool)
(declare-fun x170 () Int)
(declare-fun x9 (Int) Int)
(declare-fun x205 () Bool)
(declare-fun x169 () Int)
(declare-fun x110 () Bool)
(declare-fun x210 () Bool)
(declare-fun x124 () Bool)
(declare-fun x38 () Int)
(declare-fun x92 () Int)
(declare-fun x21 () Int)
(declare-fun x32 () Int)
(declare-fun x25 () Int)
(declare-fun x48 () Int)
(declare-fun x67 () Bool)
(declare-fun x5 () Bool)
(declare-fun x1 () Int)
(declare-fun x149 () Bool)
(declare-fun x76 () Int)
(declare-fun x118 () Bool)
(declare-fun x148 () Int)
(declare-fun x206 () Bool)
(declare-fun x61 () Bool)
(declare-fun x45 () Int)
(declare-fun x196 () Int)
(declare-fun x68 () Int)
(declare-fun x78 () Int)
(declare-fun x133 () Bool)
(declare-fun x98 () Bool)
(declare-fun x87 (Int) Int)
(declare-fun x75 (Int Int Int Int Int) Int)
(declare-fun x18 () Bool)
(declare-fun x56 () Bool)
(declare-fun x7 () Int)
(declare-fun x102 () Int)
(declare-fun x141 () Int)
(declare-fun x208 (Int Int Int) Int)
(declare-fun x115 () Int)
(declare-fun x157 () Int)
(declare-fun x41 () Bool)
(declare-fun x70 () Int)
(declare-fun x49 (Int Int Int Int Int Int) Int)
(declare-fun x80 () Int)
(declare-fun x130 () Bool)
(declare-fun x152 () Int)
(declare-fun x19 () Int)
(declare-fun x185 () Int)
(declare-fun x211 () Int)
(declare-fun x55 (Int Int Int Int Int Int Int) Int)
(declare-fun x39 () Int)
(declare-fun x2 () Int)
(declare-fun x163 () Bool)
(declare-fun x96 () Bool)
(declare-fun x159 () Int)
(declare-fun x203 () Int)
(declare-fun x189 () Bool)
(declare-fun x145 () Int)
(declare-fun x137 () Int)
(declare-fun x195 () Bool)
(declare-fun x62 () Int)
(declare-fun x167 (Int Int Int Int) Int)
(declare-fun x190 () Int)
(declare-fun x161 () Bool)
(declare-fun x192 () Bool)
(declare-fun x176 () Int)
(declare-fun x43 () Int)
(declare-fun x27 (Int Int) Int)
(define-fun x6 ((x209 Int)) Int (ite (and (<= 0 x209) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x209)) x209 (- x209 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x31 ((x209 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x209) (< x209 0)) (+ x209 115792089237316195423570985008687907853269984665640564039457584007913129639936) x209))
(define-fun x8 ((x105 Int)) Bool (and (< x105 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x105)))
(define-fun x140 ((x105 Int)) Bool (and (<= 0 x105) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105)))
(define-fun x113 ((x105 Int)) Bool (and (= x105 (x166 115792089237316195423570985008687907853269984665640564039457584007913129639935 x105)) (= (x166 x105 115792089237316195423570985008687907853269984665640564039457584007913129639935) x105)))
(define-fun x138 ((x105 Int)) Bool (and (= 0 (x166 x105 0)) (= (x166 0 x105) 0)))
(define-fun x131 ((x105 Int)) Bool (= (x166 x105 x105) x105))
(define-fun x125 ((x105 Int)) Bool (and (x138 x105) (x113 x105) (x131 x105)))
(define-fun x35 ((x105 Int) (x139 Int)) Bool (= (x166 x105 x139) (x166 x139 x105)))
(define-fun x135 ((x105 Int) (x139 Int)) Bool (and (=> (<= 0 x105) (<= (x166 x105 x139) x105)) (=> (>= x139 0) (>= x139 (x166 x105 x139))) (>= (x166 x105 x139) 0)))
(define-fun x65 ((x105 Int) (x139 Int)) Bool (and (x135 x105 x139) (x35 x105 x139)))
(define-fun x82 ((x105 Int)) Bool (= (+ (x166 x105 131072) (mod x105 131072)) (mod x105 262144)))
(define-fun x156 ((x105 Int)) Bool (and (x82 x105) (x65 x105 131072)))
(define-fun x106 ((x105 Int)) Bool (= (mod x105 2) (x166 x105 1)))
(define-fun x111 ((x105 Int)) Bool (and (x106 x105) (x65 x105 1)))
(define-fun x90 ((x105 Int)) Bool (= (mod x105 128) (x166 x105 127)))
(define-fun x121 ((x105 Int)) Bool (and (x90 x105) (x65 x105 127)))
(define-fun x207 ((x105 Int)) Bool (= (+ (x166 x105 65536) (mod x105 65536)) (mod x105 131072)))
(define-fun x37 ((x105 Int)) Bool (and (x65 x105 65536) (x207 x105)))
(define-fun x101 ((x105 Int)) Bool (= (x166 x105 1461501637330902918203684832716283019655932542975) (mod x105 1461501637330902918203684832716283019655932542976)))
(define-fun x29 ((x105 Int)) Bool (and (x101 x105) (x65 x105 1461501637330902918203684832716283019655932542975)))
(define-fun x108 ((x105 Int)) Bool (= (x166 x105 4294967295) (mod x105 4294967296)))
(define-fun x182 ((x105 Int)) Bool (and (x108 x105) (x65 x105 4294967295)))
(define-fun x191 ((x105 Int)) Bool (= (mod x105 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x166 x105 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x105 32))))
(define-fun x213 ((x105 Int)) Bool (and (x191 x105) (x65 x105 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x14 ((x105 Int)) Bool (= (mod x105 18446744073709551616) (x166 x105 18446744073709551615)))
(define-fun x204 ((x105 Int)) Bool (and (x14 x105) (x65 x105 18446744073709551615)))
(define-fun x146 ((x86 Int)) Int (ite (= x86 128) x157 (x194 x86)))
(define-fun x79 ((x86 Int)) Int (ite (= 160 x86) x95 (x9 x86)))
(define-fun x187 ((x86 Int)) Int (ite (= 160 x86) x153 (x9 x86)))
(define-fun x165 ((x86 Int)) Int (ite (= x4 x86) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x178 x86)))
(define-fun x129 ((x86 Int)) Int (ite (= x86 x92) x197 (x165 x86)))
(define-fun x57 ((x86 Int)) Int (ite (and (> (+ x4 32) x86) (>= x86 x4)) (x40 (+ (- x86 x4) 0)) (x129 x86)))
(define-fun x88 ((x86 Int)) Int (ite x59 (x57 x86) (x129 x86)))
(define-fun x44 ((x86 Int)) Int (ite x69 (x88 x86) (x178 x86)))
(define-fun x158 ((x86 Int)) Int (ite (= x86 x128) x52 (x44 x86)))
(define-fun x100 ((x86 Int)) Int (ite (= x7 x86) x117 (x158 x86)))
(define-fun x42 ((x86 Int)) Int (ite (= x127 x86) x169 (x100 x86)))
(define-fun x107 ((x86 Int)) Int (ite (= x86 192) x39 (x79 x86)))
(define-fun x16 ((x86 Int)) Int (ite x134 (x9 x86) (ite x116 (ite x161 (x79 x86) (x107 x86)) (x187 x86))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 346787896)))
(assert (not (= (x150 x115 5) (x150 x115 1))))
(assert (not (= 4294967295 (+ x76 1))))
(assert (not (= (x150 x115 1) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (not (= 346787896 (x150 (x16 161) (x16 193)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (+ 1 x76))))
(assert (not (= (x150 x115 1) 16635278)))
(assert (not (= (x150 x115 5) 0)))
(assert (=> (= (x160 (x16 161)) (x160 x170)) (= x170 (x16 161))))
(assert (x140 x109))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 131072)))
(assert (=> (<= (x16 257) 10000) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x16 257)))))
(assert (not (= (x150 x115 1) (+ x76 1))))
(assert (= x177 (and x61 (not x17))))
(assert (=> (<= (x16 257) 10000) (not (= (x160 (x16 161)) (x16 257)))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x150 x115 1))))
(assert (=> (>= 10000 (x16 321)) (not (= (x16 321) (x150 (x16 161) (x16 193))))))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 4294967296)))
(assert (=> (>= 10000 (x16 257)) (not (= (x16 257) (x150 x115 1)))))
(assert (not (= 0 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (x140 x203))
(assert (x8 x54))
(assert (not (= (x150 x115 5) (x160 x170))))
(assert (not (= 4294967296 (x160 (x16 161)))))
(assert (x140 x198))
(assert (not (= (+ x76 1) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x150 x115 1))))
(assert (not (= 65536 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (=> (>= 10000 x54) (not (= (x160 x170) x54))))
(assert (not (= 65536 (x150 x115 5))))
(assert (not (= (x160 x170) 16635278)))
(assert (= (x9 161) 0))
(assert (not (= 131072 (x150 (x16 161) (x16 193)))))
(assert (=> (>= 10000 x168) (not (= x168 (x150 (x16 161) (x16 193))))))
(assert (x140 x11))
(assert (x140 x153))
(assert (=> (>= 10000 x152) (not (= x152 (x160 (x16 161))))))
(assert (= x116 (or x161 x212)))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 4294967295)))
(assert (=> (>= 10000 (x16 289)) (not (= (x16 289) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353))))))
(assert (x140 x145))
(assert (=> (>= 10000 (x16 353)) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x16 353)))))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= (x16 353) 10000) (not (= (x16 353) (x150 x115 1)))))
(assert (not (= 4294967296 (x150 x115 5))))
(assert (x140 x103))
(assert (not (= (x150 (x16 161) (x16 193)) 4294967296)))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x150 (x16 161) (x16 193)))))
(assert (not (= 16635278 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (= (=> (and (= x12 x115) (= x3 x38) (= 0 x62) (= x62 x93) (< 0 x71) (= x196 x144) (>= x58 0) (>= x81 0) (= (x31 (- x104 4)) x200) (>= 1461501637330902918203684832716283019655932542975 x168) x110 (not (< x104 4)) x47 (= x13 (x83 x168)) (= x50 1) (< x70 549686827) (= true x56) (= x71 (x112 x168)) (<= x38 1461501637330902918203684832716283019655932542975) (not (= x168 x152)) (>= 1461501637330902918203684832716283019655932542975 x172) (= false x73) (<= 0 x122) (<= 0 x38) (<= 0 x137) (> x54 0) (>= 1461501637330902918203684832716283019655932542975 x152) (<= 0 x13) (<= 0 x74) (= x3 x172) (= x162 x115) (not (or (and (< x200 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x200) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x200))) (>= 1461501637330902918203684832716283019655932542975 x126) (= false x136) x23 (<= x81 1461501637330902918203684832716283019655932542975) (not (= 16635278 x70)) (= (x150 x115 1) x97) (and (= (<= x104 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 35 x104)) (= x64 (x166 131072 x36)) (= (< 0 (x112 x152)) x23) (= 24706623 x70) (> x168 0) (<= x211 1461501637330902918203684832716283019655932542975) (> x152 0) (>= x196 0) (= x30 x85) (<= x137 1461501637330902918203684832716283019655932542975) (= x115 x11) (= x141 24706623) (>= 1461501637330902918203684832716283019655932542975 x122) (= x30 x122) (= x47 (< 0 (x112 x54))) (= (x120 x97) x74) (<= 0 x24) (not (= x54 x152)) (<= x196 1461501637330902918203684832716283019655932542975) (= x36 (x22 x74 160)) (= (> (x112 x168) 0) x110) (= x67 (= x64 131072)) (<= 0 x172) (<= x74 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 1666326814 x70) (> 346787896 x70) (= x58 (x83 x54)) (>= x211 0) (not (= x168 x54)) (= x24 (x83 x152)) (= false x5) (<= x54 1461501637330902918203684832716283019655932542975) (<= 0 x126)) (and (=> (and x67 (and (= x157 (ite (> x145 0) x142 (x166 127 x142))) (= (x6 (+ 31 x157)) x25) (= (x166 1 x103) x145) (= x173 (< x157 32)) (> x198 0) (= x185 (div x25 32)) (= (x6 (+ x43 128)) x183) (= x43 (x6 (+ x176 32))) (= x170 (x150 x115 5)) (= x176 (mod (* x185 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= x157 0) x53) (= x142 (div x103 2)) (= (x87 x170) x103) (= x198 (mod (- x145 (ite x173 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and (=> (and x53 (= x115 x20)) x210) (=> (and (= x171 (< 31 x157)) (not x53)) (and (=> (and (and (= x115 x20) (= (mod (* 256 x10) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x153) (= x28 (x87 x170)) (= x10 (div x28 256))) (not x171)) x210) (=> (and (and (= x1 (x6 (+ x157 160))) (= (< 192 x1) x132) (= x159 (+ x76 1)) (= (x99 x76) x95) (= x76 (x160 x170))) x171) (and (=> x132 x151) (=> (not x132) x188))))))) (=> (and (not x67) (and (= x115 x34) (= x197 0) (= 128 x4) (= 1 x203))) x18))) x206))
(assert (=> (<= x54 10000) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) x54))))
(assert (x140 x137))
(assert (=> (<= (x16 161) 10000) (not (= (x150 x115 1) (x16 161)))))
(assert (not (= 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x150 (x16 161) (x16 193)))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 1666326814)))
(assert (not (= (x150 x115 1) 1666326814)))
(assert (not (= (x150 x115 5) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 7776000 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (=> (>= 10000 x152) (not (= (x208 (x16 161) (x16 193) (x16 225)) x152))))
(assert (not (= (+ 1 x76) 1461501637330902918203684832716283019655932542975)))
(assert (=> (<= x168 10000) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) x168))))
(assert (x140 x142))
(assert (=> (>= 10000 (x16 161)) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x16 161)))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x54 10000) (not (= x54 (x208 (x16 161) (x16 193) (x16 225))))))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) 346787896)))
(assert (=> (>= 10000 x115) (not (= x115 (x160 (x16 161))))))
(assert (x140 x172))
(assert (not (= 1666326814 (x160 x170))))
(assert (= 0 (x9 257)))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 0)))
(assert (not (= 65536 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (=> (>= 10000 (x16 193)) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x16 193)))))
(assert (= x205 (and x171 x119)))
(assert (=> (>= 10000 (x16 353)) (not (= (x150 x115 5) (x16 353)))))
(assert (x140 x62))
(assert (=> (>= 10000 x175) (not (= (x160 (x16 161)) x175))))
(assert (x140 x127))
(assert (not (= (x160 x170) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (=> (>= 10000 (x16 161)) (not (= (x16 161) (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (= (x9 225) 0))
(assert (not (= 65536 (x150 x115 1))))
(assert (= x18 (=> (= (= x197 0) x96) (and (=> (and (and (= x4 x128) (= x169 (x22 x74 192))) x96) x33) (=> (and (not x96) (and (or (and (not x202) (= x186 x48)) (and (and (= x48 1) (> 4294967296 x102)) x202)) (and (= (x6 (+ x4 4)) x92) (= x202 (> x186 0))))) x174)))))
(assert (not (= 24706623 (x150 x115 5))))
(assert (x8 x152))
(assert (=> (>= 10000 (x16 289)) (not (= (x16 289) (x150 x115 1)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 549686827)))
(assert (not (= (x150 (x16 161) (x16 193)) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (=> (>= 10000 (x16 225)) (not (= (x16 225) (x160 (x16 161))))))
(assert (not (= 131072 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (not (= 18446744073709551615 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (not (= (x160 x170) (x150 x115 1))))
(assert (=> (<= (x16 257) 10000) (not (= (+ x76 1) (x16 257)))))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x160 x170))))
(assert (x125 x36))
(assert (x140 x68))
(assert (x140 x128))
(assert (not (= 5 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x160 x170) 1)))
(assert (=> (<= x54 10000) (not (= x54 (x150 x115 5)))))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x160 (x16 161)))))
(assert (not (= 4294967295 (x160 (x16 161)))))
(assert (=> (= (x150 (x16 161) (x16 193)) (x150 x115 1)) (and (= (x16 161) x115) (= 1 (x16 193)))))
(assert (not (= 4294967295 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (=> (>= 10000 x175) (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) x175))))
(assert (not (= (x150 x115 1) (x160 (x16 161)))))
(assert (not (= (x150 x115 1) 5)))
(assert (=> (>= 10000 (x16 225)) (not (= (x208 (x16 161) (x16 193) (x16 225)) (x16 225)))))
(assert (not (= 24706623 (x208 (x16 161) (x16 193) (x16 225)))))
(assert (x140 x39))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 18446744073709551615)))
(assert (= (x178 x45) 0))
(assert (not (= 7776000 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (=> (>= 10000 (x16 353)) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x16 353)))))
(assert (not (= (x160 x170) (+ x76 1))))
(assert (=> (>= 10000 (x16 193)) (not (= (x16 193) (+ x76 1)))))
(assert (not (= (+ 1 x76) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (x140 x64))
(assert (=> (<= x152 10000) (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) x152))))
(assert (not (= (x160 x170) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (x140 x181))
(assert (not (= (x150 x115 5) 5)))
(assert (=> (<= (x16 193) 10000) (not (= (x150 x115 5) (x16 193)))))
(assert (x125 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (not (= (x160 (x16 161)) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (not (= (x160 (x16 161)) 1461501637330902918203684832716283019655932542975)))
(assert (x140 x77))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (= (or x177 x89) x179))
(assert (x140 x104))
(assert (not (= (x150 (x16 161) (x16 193)) (+ x76 1))))
(assert (=> (>= 10000 (x16 353)) (not (= (x16 353) (x160 (x16 161))))))
(assert (= (=> (and (= x77 (x6 (+ 7776000 x155))) (= (x6 (+ x32 x4)) x91) (not (< 18446744073709551615 x77)) (= (x88 x4) x2) (= x154 (x6 (+ x102 31))) (= x169 x77) (= x128 x91) (not (= 0 x48)) (not (or (> x102 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x102) (= (<= x102 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= (x166 18446744073709551615 x2) x155) (= (x166 115792089237316195423570985008687907853269984665640564039457584007913129639904 x154) x32)) x33) x174))
(assert (not (= (x150 x115 1) 549686827)))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x125 18446744073709551615))
(assert (not (= (x160 x170) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x37 x36))
(assert (x140 x155))
(assert (=> (>= 10000 (x16 321)) (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x16 321)))))
(assert (=> (>= 10000 x54) (not (= x54 (x150 x115 1)))))
(assert (not (= (x150 x115 5) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (not (= 1 (x150 (x16 161) (x16 193)))))
(assert (not (= (+ x76 1) 346787896)))
(assert (=> (<= x115 10000) (not (= (x150 (x16 161) (x16 193)) x115))))
(assert (not (= (x150 x115 5) 16635278)))
(assert (= (and (not x67) x143) x147))
(assert (not (= 1 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (= x149 (not (and (= (x6 (+ x128 32)) x164) (= (ite (= x45 0) x34 (ite (= x45 32) x203 (ite (= x45 64) x128 (x42 x45)))) x181) (= x45 x128) (= x78 (x6 (+ x128 64))) (= x117 (x166 4294967295 x15)) (= x114 (ite (= x164 0) x34 (ite (= 32 x164) x203 (ite (= x164 64) x128 (x42 x164))))) (= (x6 (+ x7 32)) x127) (= x7 (x6 (+ 32 x128))) (= x193 (ite (= 0 x78) x34 (ite (= 32 x78) x203 (ite (= x78 64) x128 (x42 x78))))) (= (= 96 x72) x130) (= x72 96) (= (x166 1461501637330902918203684832716283019655932542975 x201) x52)))))
(assert (not (= 1 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (= (=> (and (= (> x184 x169) x17) (or (and (and (= x15 0) (= x201 (ite x41 0 x74)) (= (x166 65536 x36) x180) (= x41 (= x180 65536))) x17) (and (and (= x15 x36) (= x201 x74)) (not x17)))) x149) x33))
(assert (x140 x164))
(assert (x140 x72))
(assert (not (= (x160 (x16 161)) 5)))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x150 x115 5))))
(assert (=> (>= 10000 (x16 289)) (not (= (x16 289) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289))))))
(assert (= x98 (or x60 x192)))
(assert (x140 x32))
(assert (=> (>= 10000 (x16 193)) (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x16 193)))))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 1666326814)))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x160 x170) 4294967295)))
(assert (not (= (x150 x115 1) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (not (= 24706623 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (not (= 16635278 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (x8 x168))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) 16635278)))
(assert (not (= 7776000 (x208 (x16 161) (x16 193) (x16 225)))))
(assert (=> (<= (x16 353) 10000) (not (= (x16 353) (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (not (= 5 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (x140 x81))
(assert (=> (<= (x16 161) 10000) (not (= (x16 161) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321))))))
(assert (not (= 4294967296 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (= (div x74 6277101735386680763835789423207666416102355444464034512896) (x22 x74 192)))
(assert (not (= (x150 (x16 161) (x16 193)) 0)))
(assert (x140 x201))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x160 (x16 161)))))
(assert (x111 x103))
(assert (not (= 4294967296 (+ 1 x76))))
(assert (=> (>= 10000 x152) (not (= x152 (x150 x115 5)))))
(assert (= (x22 x21 248) (div x21 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (=> (<= x115 10000) (not (= x115 (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (=> (>= 10000 (x16 321)) (not (= (x16 321) (+ 1 x76)))))
(assert (=> (>= 10000 (x16 257)) (not (= (x16 257) (x208 (x16 161) (x16 193) (x16 225))))))
(assert (not (= (x150 x115 5) 131072)))
(assert (x140 x70))
(assert (=> (>= 10000 (x16 321)) (not (= (x16 321) (x160 (x16 161))))))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x150 (x16 161) (x16 193)))))
(assert (x8 x76))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 24706623)))
(assert (x140 x114))
(assert (not (= (+ x76 1) 5)))
(assert (=> (>= 10000 x168) (not (= x168 (x150 x115 5)))))
(assert (not (= (+ 1 x76) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 4294967295 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x160 x170) 1461501637330902918203684832716283019655932542975)))
(assert (x125 x103))
(assert (=> (<= x115 10000) (not (= (x160 x170) x115))))
(assert (not x206))
(assert (=> (>= 10000 (x16 321)) (not (= (x150 x115 5) (x16 321)))))
(assert (=> (<= x168 10000) (not (= (x160 (x16 161)) x168))))
(assert (= (=> (and (= x189 (>= 224 x109)) (= x46 (x146 128)) (= x148 (x6 (+ 1 x109))) (not (< x46 x148))) (and x189 (=> (= x26 (ite (>= 32 x109) (x160 (x16 161)) (ite (<= x109 64) (x150 (x16 161) (x16 193)) (ite (<= x109 96) (x208 (x16 161) (x16 193) (x16 225)) (ite (>= 128 x109) (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (ite (<= x109 160) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (ite (<= x109 192) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (ite (<= x109 224) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) x175)))))))) x118))) x84))
(assert (=> (>= 10000 (x16 193)) (not (= (x160 (x16 161)) (x16 193)))))
(assert (=> (>= 10000 x115) (not (= (x150 x115 1) x115))))
(assert (not (= (x160 x170) 346787896)))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x150 x115 1))))
(assert (not (= (x150 x115 5) (x160 (x16 161)))))
(assert (not (= (+ 1 x76) (x150 x115 5))))
(assert (= 0 (x178 x78)))
(assert (x125 1))
(assert (x140 x196))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x150 x115 1))))
(assert (not (= 549686827 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 131072)))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 1)))
(assert (not (= (x160 (x16 161)) 549686827)))
(assert (= x212 (and x132 x205)))
(assert (not (= (+ x76 1) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) 7776000)))
(assert (not (= 1666326814 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (x140 x43))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (=> (<= (x16 225) 10000) (not (= (+ 1 x76) (x16 225)))))
(assert (=> (>= 10000 x168) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) x168))))
(assert (=> (>= 10000 x54) (not (= x54 (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (=> (<= (x16 321) 10000) (not (= (x16 321) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321))))))
(assert (not (= (x160 (x16 161)) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (=> (>= 10000 x115) (not (= (+ 1 x76) x115))))
(assert (=> (>= 10000 x168) (not (= x168 (+ 1 x76)))))
(assert (x140 x169))
(assert (x140 x46))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (x140 x95))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x140 x200))
(assert (=> (<= (x16 161) 10000) (not (= (x16 161) (+ x76 1)))))
(assert (not (= (x160 x170) 7776000)))
(assert (x140 x122))
(assert (= (and (not x132) x205) x161))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) 4294967295)))
(assert (x140 x185))
(assert (x125 1461501637330902918203684832716283019655932542975))
(assert (x204 x2))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (x140 x117))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 1)))
(assert (not (= 1666326814 (x150 x115 5))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (=> (>= 10000 x54) (not (= x54 (+ 1 x76)))))
(assert (not (= (x150 x115 1) 346787896)))
(assert (x140 x28))
(assert (x140 x176))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 18446744073709551615)))
(assert (not (= 4294967295 (x150 x115 5))))
(assert (not (= 24706623 (+ x76 1))))
(assert (x125 x201))
(assert (=> (<= (x16 193) 10000) (not (= (x150 x115 1) (x16 193)))))
(assert (= x134 (and x163 x53)))
(assert (not (= (x150 x115 5) 549686827)))
(assert (not (= 1 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (=> (<= x152 10000) (not (= x152 (x150 x115 1)))))
(assert (x140 x91))
(assert (=> (<= x168 10000) (not (= x168 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353))))))
(assert (x140 x19))
(assert (x140 x74))
(assert (not (= (x150 x115 1) 0)))
(assert (not (= 549686827 (x208 (x16 161) (x16 193) (x16 225)))))
(assert (= (and x119 (not x171)) x124))
(assert (x140 x175))
(assert (=> (<= (x16 225) 10000) (not (= (x16 225) (x150 x115 5)))))
(assert (=> (<= x152 10000) (not (= x152 (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (= x118 (=> (and (= x4 x183) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x109 1))) (= x26 x197) (= x20 x34) (= x203 5)) x18)))
(assert (not (= 1666326814 (x160 (x16 161)))))
(assert (= x199 (and x94 (not x96))))
(assert (not (= 1666326814 (x150 (x16 161) (x16 193)))))
(assert (=> (<= (x16 289) 10000) (not (= (x150 x115 5) (x16 289)))))
(assert (not (= 24706623 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (= x89 (and x61 x17)))
(assert (not (= 1 (+ x76 1))))
(assert (x140 x193))
(assert (x125 x2))
(assert (=> (>= 10000 (x16 289)) (not (= (x16 289) (x150 (x16 161) (x16 193))))))
(assert (not (= 18446744073709551615 (x150 x115 5))))
(assert (not (= (x160 x170) (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (x140 x54))
(assert (= (and x202 x199) x59))
(assert (=> (<= (x16 353) 10000) (not (= (x16 353) (x160 x170)))))
(assert (x140 x71))
(assert (not (= (x150 x115 5) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x140 x58))
(assert (=> (<= x115 10000) (not (= x115 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289))))))
(assert (not (= (x160 (x16 161)) 346787896)))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (x140 x211))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) 4294967296)))
(assert (=> (<= (x16 289) 10000) (not (= (x16 289) (x208 (x16 161) (x16 193) (x16 225))))))
(assert (x140 x115))
(assert (not (= 24706623 (x150 (x16 161) (x16 193)))))
(assert (x140 x80))
(assert (=> (>= 10000 (x16 257)) (not (= (x16 257) (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (=> (= (x150 x115 5) (x150 (x16 161) (x16 193))) (and (= (x16 193) 5) (= x115 (x16 161)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x150 x115 1))))
(assert (not (= 0 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (=> (>= 10000 (x16 257)) (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x16 257)))))
(assert (= x69 (or x59 x133)))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x160 (x16 161)))))
(assert (=> (<= (x16 161) 10000) (not (= (x16 161) (x208 (x16 161) (x16 193) (x16 225))))))
(assert (x140 x180))
(assert (not (= (x160 x170) 4294967296)))
(assert (=> (<= x175 10000) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) x175))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x160 (x16 161)))))
(assert (= (and x195 x123) x192))
(assert (=> (>= 10000 x115) (not (= x115 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321))))))
(assert (=> (<= (x16 225) 10000) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x16 225)))))
(assert (not (= (x150 x115 1) 7776000)))
(assert (x140 x10))
(assert (=> (<= (x16 161) 10000) (not (= (x16 161) (x150 (x16 161) (x16 193))))))
(assert (x140 x141))
(assert (=> (>= 10000 (x16 257)) (not (= (x160 x170) (x16 257)))))
(assert (=> (>= 10000 (x16 161)) (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x16 161)))))
(assert (not (= (x150 x115 1) 24706623)))
(assert (not (= 0 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= 131072 (x160 x170))))
(assert (not (= 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x160 x170))))
(assert (=> (<= (x16 225) 10000) (not (= (x16 225) (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (not (= 549686827 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (x140 x190))
(assert (not (= (x150 x115 1) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (=> (>= 10000 x115) (not (= x115 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353))))))
(assert (x140 x126))
(assert (=> (<= x175 10000) (not (= (x150 x115 5) x175))))
(assert (x140 x13))
(assert (= (x178 x164) 0))
(assert (x182 x15))
(assert (=> (<= (x16 225) 10000) (not (= (x150 (x16 161) (x16 193)) (x16 225)))))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x150 x115 5))))
(assert (x140 x78))
(assert (x140 x24))
(assert (not (= (+ 1 x76) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (=> (<= x152 10000) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) x152))))
(assert (x140 x48))
(assert (=> (<= x152 10000) (not (= x152 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289))))))
(assert (not (= 549686827 (x150 (x16 161) (x16 193)))))
(assert (=> (<= (x16 321) 10000) (not (= (x150 x115 1) (x16 321)))))
(assert (=> (>= 10000 (x16 257)) (not (= (x16 257) (x150 x115 5)))))
(assert (not (= 4294967295 (x150 (x16 161) (x16 193)))))
(assert (x8 x175))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ x76 1))))
(assert (= (and x195 (not x123)) x60))
(assert (x140 x38))
(assert (= x188 (=> (= x20 x170) x210)))
(assert (x156 x36))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (= (x9 353) 0))
(assert (x140 x144))
(assert (=> (>= 10000 x175) (not (= x175 (x150 x115 1)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 0)))
(assert (not (= 16635278 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (x140 x168))
(assert (=> (<= (x16 321) 10000) (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x16 321)))))
(assert (x140 x184))
(assert (not (= (+ x76 1) 549686827)))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 4294967296)))
(assert (= (div x74 1461501637330902918203684832716283019655932542976) (x22 x74 160)))
(assert (x140 x25))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) 346787896)))
(assert (= x210 (=> (and (> x68 0) (= (x16 160) x21) (= x109 (x22 x21 248)) (= (> x109 0) x123) (= x68 (x146 128))) (and (=> (and (= x26 0) (not x123)) x118) (=> x123 x84)))))
(assert (x140 x2))
(assert (not (= (+ 1 x76) 18446744073709551615)))
(assert (not (= 7776000 (x150 x115 5))))
(assert (not (= 131072 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (=> (<= (x16 161) 10000) (not (= (x150 x115 5) (x16 161)))))
(assert (x121 x142))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (x140 x21))
(assert (x140 x12))
(assert (not (= (+ 1 x76) 65536)))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 (x16 225)) (not (= (x16 225) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289))))))
(assert (=> (<= (x16 257) 10000) (not (= (x150 (x16 161) (x16 193)) (x16 257)))))
(assert (not (= 5 (x150 (x16 161) (x16 193)))))
(assert (=> (<= (x16 161) 10000) (not (= (x16 161) (x160 x170)))))
(assert (not (= 18446744073709551615 (x160 (x16 161)))))
(assert (not (= 5 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (not (= 0 (x160 x170))))
(assert (=> (>= 10000 (x16 289)) (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x16 289)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x150 (x16 161) (x16 193)))))
(assert (not (= 16635278 (x160 (x16 161)))))
(assert (not (= 1666326814 (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (x140 x3))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= 16635278 (+ x76 1))))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) 65536)))
(assert (x140 x30))
(assert (not (= (x150 (x16 161) (x16 193)) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x140 x45))
(assert (not (= (x150 x115 1) 18446744073709551615)))
(assert (not (= 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 4294967296)))
(assert (=> (>= 10000 x168) (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) x168))))
(assert (x140 x52))
(assert (not (= (x160 (x16 161)) 1)))
(assert (x8 x170))
(assert (not (= 346787896 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (not (= 346787896 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (=> (<= (x16 353) 10000) (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x16 353)))))
(assert (=> (>= 10000 x115) (not (= x115 (x208 (x16 161) (x16 193) (x16 225))))))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) 18446744073709551615)))
(assert (x125 127))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) (x150 (x16 161) (x16 193)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (= (x9 321) 0))
(assert (= (or x124 x116 x134) x195))
(assert (x140 x102))
(assert (=> (>= 10000 (x16 321)) (not (= (x160 x170) (x16 321)))))
(assert (x140 x183))
(assert (not (= 549686827 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (=> (>= 10000 (x16 193)) (not (= (x16 193) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353))))))
(assert (x125 131072))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x150 (x16 161) (x16 193)))))
(assert (= true x143))
(assert (x125 x154))
(assert (x140 x148))
(assert (not (= 346787896 (x150 x115 5))))
(assert (x140 x50))
(assert (not (= 5 (x208 (x16 161) (x16 193) (x16 225)))))
(assert (=> (<= (x16 161) 10000) (not (= (x16 161) (x160 (x16 161))))))
(assert (= (x9 289) 0))
(assert (=> (>= 10000 (x16 225)) (not (= (x160 x170) (x16 225)))))
(assert (=> (<= x54 10000) (not (= (x150 (x16 161) (x16 193)) x54))))
(assert (not (= 1 (x150 x115 5))))
(assert (x125 4294967295))
(assert (=> (<= x175 10000) (not (= x175 (x167 (x16 161) (x16 193) (x16 225) (x16 257))))))
(assert (x140 x154))
(assert (not (= (x150 x115 1) 131072)))
(assert (= (or x147 x98) x94))
(assert (=> (<= x175 10000) (not (= x175 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289))))))
(assert (= x133 (and x199 (not x202))))
(assert (=> (>= 10000 x168) (not (= x168 (x150 x115 1)))))
(assert (x140 x162))
(assert (=> (>= 10000 x168) (not (= (x160 x170) x168))))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (=> (<= (x16 353) 10000) (not (= (+ 1 x76) (x16 353)))))
(assert (not (= (x160 x170) 24706623)))
(assert (x140 x93))
(assert (not (= 7776000 (x160 (x16 161)))))
(assert (not (= 1 (x150 x115 1))))
(assert (not (= 7776000 (+ x76 1))))
(assert (=> (<= (x16 353) 10000) (not (= (x208 (x16 161) (x16 193) (x16 225)) (x16 353)))))
(assert (=> (>= 10000 x175) (not (= x175 (+ x76 1)))))
(assert (=> (>= 10000 (x16 193)) (not (= (x208 (x16 161) (x16 193) (x16 225)) (x16 193)))))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 16635278)))
(assert (= x163 (and x67 x143)))
(assert (=> (>= 10000 x152) (not (= (x150 (x16 161) (x16 193)) x152))))
(assert (not (= (x150 (x16 161) (x16 193)) (x160 x170))))
(assert (x140 x85))
(assert (= (x9 160) 0))
(assert (= (=> (and (= (not (< 224 x1)) x63) (= (x99 x159) x39)) (and x188 x63)) x151))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (and x163 (not x53)) x119))
(assert (not (= 1666326814 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (=> (<= x54 10000) (not (= x54 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321))))))
(assert (not (= (x160 (x16 161)) 65536)))
(assert (=> (<= x152 10000) (not (= (x160 x170) x152))))
(assert (not (= (x160 (x16 161)) 24706623)))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x160 x170))))
(assert (not (= 0 (+ 1 x76))))
(assert (=> (<= x54 10000) (not (= (x160 (x16 161)) x54))))
(assert (not (= 131072 (x160 (x16 161)))))
(assert (not (= 4294967295 (x150 x115 1))))
(assert (not (= 7776000 (x150 (x16 161) (x16 193)))))
(assert (=> (>= 10000 (x16 353)) (not (= (x16 353) (x150 (x16 161) (x16 193))))))
(assert (=> (<= (x16 289) 10000) (not (= (x16 289) (+ 1 x76)))))
(assert (not (= 7776000 (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (not (= 549686827 (x160 x170))))
(assert (not (= (x150 (x16 161) (x16 193)) (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)))))
(assert (=> (<= (x16 289) 10000) (not (= (x16 289) (x160 x170)))))
(assert (=> (>= 10000 (x16 193)) (not (= (x16 193) (x150 (x16 161) (x16 193))))))
(assert (=> (>= 10000 x175) (not (= (x208 (x16 161) (x16 193) (x16 225)) x175))))
(assert (not (= 24706623 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x150 x115 1) 1461501637330902918203684832716283019655932542975)))
(assert (x125 x15))
(assert (not (= (x208 (x16 161) (x16 193) (x16 225)) 18446744073709551615)))
(assert (not (= (x150 x115 5) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)))))
(assert (not (= (x150 x115 5) (x167 (x16 161) (x16 193) (x16 225) (x16 257)))))
(assert (x140 x157))
(assert (not (= 4294967295 (x208 (x16 161) (x16 193) (x16 225)))))
(assert (= 0 (x9 193)))
(assert (not (= 65536 (x208 (x16 161) (x16 193) (x16 225)))))
(assert (not (= 65536 (x150 (x16 161) (x16 193)))))
(assert (x213 x154))
(assert (not (= (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353)) (x160 x170))))
(assert (not (= 4294967296 (x150 x115 1))))
(assert (x29 x201))
(assert (not (= (x160 (x16 161)) (+ x76 1))))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) (x150 x115 5))))
(assert (x140 x15))
(assert (not (= (x150 x115 5) (x208 (x16 161) (x16 193) (x16 225)))))
(assert (=> (>= 10000 x175) (not (= x175 (x160 x170)))))
(assert (not (= (x150 (x16 161) (x16 193)) 18446744073709551615)))
(assert (=> (<= (x16 289) 10000) (not (= (x167 (x16 161) (x16 193) (x16 225) (x16 257)) (x16 289)))))
(assert (x140 x1))
(assert (=> (>= 10000 x54) (not (= x54 (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353))))))
(assert (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) 5)))
(assert (=> (<= (x16 193) 10000) (not (= (x160 x170) (x16 193)))))
(assert (x140 x7))
(assert (x125 65536))
(assert (not (= (x160 x170) 18446744073709551615)))
(assert (=> (>= 10000 (x16 289)) (not (= (x16 289) (x160 (x16 161))))))
(assert (x140 x4))
(assert (x140 x36))
(assert (=> (<= x115 10000) (not (= (x150 x115 5) x115))))
(assert (not (= (x160 (x16 161)) 0)))
(assert (not (= (x160 x170) 5)))
(assert (x125 x142))
(assert (= (or x69 x51) x61))
(assert (=> (>= 10000 (x16 225)) (not (= (x16 225) (x55 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321) (x16 353))))))
(assert (not (= 65536 (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)))))
(assert (not (= 16635278 (x150 (x16 161) (x16 193)))))
(assert (=> (<= (x16 225) 10000) (not (= (x16 225) (x150 x115 1)))))
(assert (x140 x152))
(assert (=> (>= 10000 (x16 193)) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x16 193)))))
(assert (=> (>= 10000 x175) (not (= (x150 (x16 161) (x16 193)) x175))))
(assert (x140 x92))
(assert (not (= (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321)) 131072)))
(assert (not (= (+ 1 x76) 131072)))
(assert (=> (>= 10000 (x16 321)) (not (= (x75 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289)) (x16 321)))))
(assert (not (= (+ x76 1) 1666326814)))
(assert (=> (>= 10000 (x16 321)) (not (= (x208 (x16 161) (x16 193) (x16 225)) (x16 321)))))
(assert (not (= (x160 x170) 65536)))
(assert (not (= (x160 (x16 161)) (x150 (x16 161) (x16 193)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x160 (x16 161)))))
(assert (x8 x115))
(assert (=> (<= (x16 257) 10000) (not (= (x16 257) (x49 (x16 161) (x16 193) (x16 225) (x16 257) (x16 289) (x16 321))))))
(assert (not (= (+ x76 1) 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (not (= (x160 (x16 161)) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x140 x186))
(assert (=> (<= x168 10000) (not (= (x208 (x16 161) (x16 193) (x16 225)) x168))))
(assert (=> (<= x152 10000) (not (= x152 (+ x76 1)))))
(assert (= (and x96 x94) x51))
(check-sat)
(exit)