(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x21 () Int)
(declare-fun x194 () Int)
(declare-fun x119 () Int)
(declare-fun x140 () Int)
(declare-fun x38 () Int)
(declare-fun x136 () Int)
(declare-fun x104 () Int)
(declare-fun x73 () Bool)
(declare-fun x46 () Int)
(declare-fun x142 () Bool)
(declare-fun x145 () Int)
(declare-fun x184 () Int)
(declare-fun x113 () Int)
(declare-fun x81 (Int) Int)
(declare-fun x217 () Int)
(declare-fun x143 () Int)
(declare-fun x98 () Int)
(declare-fun x195 () Int)
(declare-fun x214 () Int)
(declare-fun x59 () Int)
(declare-fun x166 () Int)
(declare-fun x231 () Int)
(declare-fun x61 () Bool)
(declare-fun x35 () Int)
(declare-fun x248 () Int)
(declare-fun x152 () Bool)
(declare-fun x121 () Bool)
(declare-fun x245 () Int)
(declare-fun x215 () Int)
(declare-fun x204 () Int)
(declare-fun x252 () Int)
(declare-fun x239 () Int)
(declare-fun x12 () Int)
(declare-fun x177 () Int)
(declare-fun x103 () Int)
(declare-fun x234 () Int)
(declare-fun x235 () Int)
(declare-fun x251 () Int)
(declare-fun x71 () Int)
(declare-fun x250 (Int) Int)
(declare-fun x135 () Int)
(declare-fun x203 () Int)
(declare-fun x117 () Bool)
(declare-fun x91 () Int)
(declare-fun x181 () Int)
(declare-fun x128 () Int)
(declare-fun x28 () Int)
(declare-fun x169 () Int)
(declare-fun x220 (Int) Int)
(declare-fun x25 () Int)
(declare-fun x191 () Int)
(declare-fun x78 () Int)
(declare-fun x210 () Int)
(declare-fun x238 () Int)
(declare-fun x147 () Int)
(declare-fun x211 () Int)
(declare-fun x224 () Int)
(declare-fun x108 () Int)
(declare-fun x240 () Int)
(declare-fun x87 () Bool)
(declare-fun x70 () Int)
(declare-fun x206 () Int)
(declare-fun x19 () Int)
(declare-fun x10 () Int)
(declare-fun x164 () Int)
(declare-fun x85 () Int)
(declare-fun x243 () Int)
(declare-fun x120 () Int)
(declare-fun x74 () Int)
(declare-fun x76 () Int)
(declare-fun x84 () Int)
(declare-fun x247 (Int) Int)
(declare-fun x50 () Int)
(declare-fun x237 () Int)
(declare-fun x154 () Int)
(declare-fun x40 () Int)
(declare-fun x208 () Int)
(declare-fun x9 () Int)
(declare-fun x118 () Int)
(declare-fun x144 () Int)
(declare-fun x82 () Int)
(declare-fun x34 () Bool)
(declare-fun x187 () Int)
(declare-fun x52 () Int)
(declare-fun x17 () Int)
(declare-fun x77 () Bool)
(declare-fun x182 () Int)
(declare-fun x209 () Bool)
(declare-fun x116 () Int)
(declare-fun x173 () Int)
(declare-fun x54 () Int)
(declare-fun x222 () Int)
(declare-fun x1 () Int)
(declare-fun x36 () Bool)
(declare-fun x223 () Bool)
(declare-fun x180 () Int)
(declare-fun x96 (Int) Int)
(declare-fun x127 () Int)
(declare-fun x107 () Int)
(declare-fun x242 () Int)
(declare-fun x111 (Int) Int)
(declare-fun x212 () Bool)
(declare-fun x179 (Int) Int)
(declare-fun x93 () Int)
(declare-fun x125 () Int)
(declare-fun x88 () Int)
(declare-fun x32 (Int Int) Int)
(declare-fun x56 () Int)
(declare-fun x165 () Int)
(declare-fun x133 () Int)
(declare-fun x146 () Int)
(declare-fun x18 (Int Int) Int)
(declare-fun x126 (Int) Int)
(declare-fun x198 () Int)
(declare-fun x193 () Int)
(declare-fun x188 () Int)
(declare-fun x213 () Int)
(declare-fun x43 () Int)
(declare-fun x4 () Int)
(declare-fun x60 () Int)
(declare-fun x45 () Int)
(declare-fun x99 () Int)
(declare-fun x69 (Int) Int)
(declare-fun x29 () Int)
(declare-fun x102 () Int)
(declare-fun x162 () Int)
(declare-fun x163 () Int)
(declare-fun x226 () Int)
(declare-fun x106 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x15 () Int)
(declare-fun x246 () Int)
(declare-fun x202 () Int)
(declare-fun x168 () Int)
(declare-fun x115 () Bool)
(declare-fun x175 () Int)
(declare-fun x227 () Int)
(declare-fun x42 () Int)
(declare-fun x105 () Int)
(declare-fun x167 () Int)
(declare-fun x139 () Int)
(declare-fun x219 () Int)
(declare-fun x200 () Int)
(declare-fun x151 () Bool)
(declare-fun x49 () Int)
(declare-fun x178 () Int)
(declare-fun x241 () Int)
(declare-fun x97 () Int)
(declare-fun x39 () Int)
(declare-fun x11 () Int)
(declare-fun x205 () Int)
(declare-fun x160 () Int)
(declare-fun x110 (Int) Int)
(declare-fun x158 () Int)
(declare-fun x172 () Int)
(declare-fun x55 () Bool)
(declare-fun x95 () Bool)
(declare-fun x68 () Int)
(declare-fun x124 () Int)
(declare-fun x44 () Int)
(declare-fun x13 () Int)
(declare-fun x134 () Int)
(declare-fun x86 () Int)
(declare-fun x221 () Int)
(declare-fun x216 () Int)
(declare-fun x186 () Int)
(declare-fun x90 () Int)
(declare-fun x16 () Int)
(declare-fun x244 () Int)
(declare-fun x249 () Int)
(declare-fun x156 () Int)
(declare-fun x75 () Int)
(declare-fun x2 () Int)
(declare-fun x148 () Int)
(declare-fun x170 () Int)
(declare-fun x233 (Int) Int)
(declare-fun x101 () Int)
(declare-fun x33 () Int)
(declare-fun x26 () Bool)
(declare-fun x122 () Int)
(declare-fun x228 () Int)
(declare-fun x47 () Int)
(declare-fun x24 () Int)
(declare-fun x129 () Int)
(declare-fun x100 () Int)
(declare-fun x23 () Int)
(declare-fun x72 () Int)
(declare-fun x137 () Int)
(declare-fun x207 () Int)
(declare-fun x6 () Int)
(declare-fun x155 () Int)
(declare-fun x138 () Int)
(declare-fun x7 () Int)
(declare-fun x80 () Int)
(declare-fun x192 () Int)
(declare-fun x123 () Int)
(declare-fun x22 () Bool)
(declare-fun x196 () Int)
(declare-fun x65 () Int)
(declare-fun x3 () Int)
(declare-fun x64 (Int) Int)
(declare-fun x20 () Int)
(declare-fun x161 () Int)
(declare-fun x183 () Int)
(define-fun x58 ((x114 Int)) Int (ite (and (<= 0 x114) (< x114 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x114 (- x114 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x79 ((x114 Int)) Int (ite (and (> 0 x114) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x114)) (+ x114 115792089237316195423570985008687907853269984665640564039457584007913129639936) x114))
(define-fun x159 ((x94 Int)) Bool (and (>= x94 0) (< x94 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x89 ((x94 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x94) (>= x94 0)))
(define-fun x232 ((x94 Int)) Bool (and (= (x18 x94 115792089237316195423570985008687907853269984665640564039457584007913129639935) x94) (= x94 (x18 115792089237316195423570985008687907853269984665640564039457584007913129639935 x94))))
(define-fun x149 ((x94 Int)) Bool (and (= (x18 0 x94) 0) (= 0 (x18 x94 0))))
(define-fun x66 ((x94 Int)) Bool (= (x18 x94 x94) x94))
(define-fun x201 ((x94 Int)) Bool (and (x149 x94) (x232 x94) (x66 x94)))
(define-fun x157 ((x94 Int) (x67 Int)) Bool (= (x18 x67 x94) (x18 x94 x67)))
(define-fun x83 ((x94 Int) (x67 Int)) Bool (and (=> (>= x67 0) (<= (x18 x94 x67) x67)) (=> (<= 0 x94) (>= x94 (x18 x94 x67))) (<= 0 (x18 x94 x67))))
(define-fun x31 ((x94 Int) (x67 Int)) Bool (and (x157 x94 x67) (x83 x94 x67)))
(define-fun x174 ((x94 Int)) Bool (= (x18 x94 4294967295) (mod x94 4294967296)))
(define-fun x153 ((x94 Int)) Bool (and (x31 x94 4294967295) (x174 x94)))
(define-fun x236 ((x94 Int)) Bool (= (x18 x94 340282366920938463463374607431768211455) (mod x94 340282366920938463463374607431768211456)))
(define-fun x63 ((x94 Int)) Bool (and (x31 x94 340282366920938463463374607431768211455) (x236 x94)))
(define-fun x57 ((x94 Int)) Bool (= (x18 x94 1461501637330902918203684832716283019655932542975) (mod x94 1461501637330902918203684832716283019655932542976)))
(define-fun x48 ((x94 Int)) Bool (and (x31 x94 1461501637330902918203684832716283019655932542975) (x57 x94)))
(define-fun x132 ((x94 Int)) Bool (= (x18 x94 255) (mod x94 256)))
(define-fun x109 ((x94 Int)) Bool (and (x132 x94) (x31 x94 255)))
(define-fun x27 ((x94 Int)) Bool (= (mod x94 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x94 256) (x18 x94 115792089237316195423570985008687907853269984665640564039457584007913129639680))))
(define-fun x53 ((x94 Int)) Bool (and (x31 x94 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x27 x94)))
(define-fun x225 ((x37 Int)) Int (ite (= x37 128) x170 (x247 x37)))
(define-fun x171 ((x37 Int)) Int (ite (= x37 160) x24 (x225 x37)))
(define-fun x199 ((x37 Int)) Int (ite (= 192 x37) x15 (x171 x37)))
(define-fun x131 ((x37 Int)) Int (ite (= x37 224) x30 (x199 x37)))
(define-fun x176 ((x37 Int)) Int (ite (= x37 256) x146 (x131 x37)))
(define-fun x8 ((x37 Int)) Int (ite (= x37 128) x242 (x179 x37)))
(define-fun x197 ((x37 Int)) Int (ite (= 160 x37) x6 (x69 x37)))
(define-fun x14 ((x37 Int)) Int (ite (= x37 192) x98 (x110 x37)))
(define-fun x190 ((x37 Int)) Int (ite (= 224 x37) x118 (x96 x37)))
(define-fun x92 ((x37 Int)) Int (ite (= x37 256) x13 (x64 x37)))
(define-fun x230 ((x37 Int)) Int (ite (= x37 288) x28 (x106 x37)))
(define-fun x229 ((x37 Int)) Int (ite (= x37 512) x252 (x250 x37)))
(define-fun x5 ((x37 Int)) Int (ite (= 544 x37) x187 (x229 x37)))
(define-fun x51 ((x37 Int)) Int (ite (= 576 x37) x239 (x5 x37)))
(define-fun x112 ((x37 Int)) Int (ite (= x37 608) x148 (x51 x37)))
(define-fun x130 ((x37 Int)) Int (ite (= x37 640) x204 (x112 x37)))
(define-fun x150 ((x37 Int)) Int (ite (= x37 672) x165 (x130 x37)))
(define-fun x62 ((x37 Int)) Int (ite (= x128 x37) x135 (x81 x37)))
(define-fun x41 ((x37 Int)) Int (ite (= x37 128) x226 (x233 x37)))
(define-fun x218 ((x37 Int)) Int (ite (= 160 x37) x65 (x41 x37)))
(define-fun x141 ((x37 Int)) Int (ite (= x37 192) x160 (x218 x37)))
(define-fun x189 ((x37 Int)) Int (ite (= 224 x37) x145 (x141 x37)))
(define-fun x185 ((x37 Int)) Int (ite (= x37 256) x107 (x189 x37)))
(assert (x89 x194))
(assert (x89 x99))
(assert (x89 x29))
(assert (x89 x129))
(assert (not (= 2652930389 (+ 3 x219))))
(assert (x89 x163))
(assert (x89 x172))
(assert (not (= 911855590 (x32 x221 x143))))
(assert (not (= 4294967295 (x32 x162 x119))))
(assert (not (= 4294967296 (+ x19 2))))
(assert (x89 x155))
(assert (x89 x187))
(assert (x89 x15))
(assert (not (= 2220280665 (x32 x162 x119))))
(assert (not (= 340282366920938463463374607431768211455 (x32 x139 x143))))
(assert (not (= (x32 x221 x143) 2220280665)))
(assert (x89 x231))
(assert (=> (>= 10000 x139) (not (= (x32 x221 x143) x139))))
(assert (not (= (x32 x162 x119) 1061922874)))
(assert (x89 x242))
(assert (not (= (+ x219 2) 941780010)))
(assert (not (= (+ 2 x19) 340282366920938463463374607431768211455)))
(assert (x89 x238))
(assert (=> (>= 10000 x128) (not (= (x32 x139 x143) x128))))
(assert (x89 x45))
(assert (= true x152))
(assert (not (= 3547226261 (+ 2 x19))))
(assert (x89 x124))
(assert (x89 x136))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (+ 2 x19))))
(assert (not (= 2652930389 (+ x19 2))))
(assert (not (= (+ 2 x219) 2652930389)))
(assert (not (= (x32 x139 x143) 1960641893)))
(assert (=> (>= 10000 x162) (not (= x162 (x32 x221 x143)))))
(assert (x89 x85))
(assert (not (= (+ x19 2) 3250587425)))
(assert (not (= (+ x219 2) 3250587425)))
(assert (not (= 947726895 (+ 2 x219))))
(assert (not (= 1749768213 (x32 x221 x143))))
(assert (not (= 947726895 (x32 x221 x143))))
(assert (x89 x2))
(assert (not (= (x32 x139 x143) 2652930389)))
(assert (x89 x166))
(assert (not (= (+ 2 x219) 3547226261)))
(assert (x89 x244))
(assert (x89 x68))
(assert (x89 x46))
(assert (x201 255))
(assert (not (= 2220280665 (+ 2 x19))))
(assert (x89 x140))
(assert (x159 x19))
(assert (x89 x243))
(assert (=> (<= x49 10000) (not (= (+ 3 x219) x49))))
(assert (x89 x17))
(assert (=> (= (x32 x221 x143) (x32 x162 x119)) (and (= x119 x143) (= x221 x162))))
(assert (x89 x116))
(assert (not (= (+ 3 x19) 4294967295)))
(assert (=> (<= x128 10000) (not (= x128 (x32 x162 x119)))))
(assert (=> (>= 10000 x128) (not (= (+ x219 3) x128))))
(assert (x63 x167))
(assert (=> (>= 10000 x49) (not (= (+ 2 x19) x49))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (+ 2 x19))))
(assert (not (= (x32 x221 x143) (+ x19 2))))
(assert (x89 x156))
(assert (not (= (x32 x221 x143) 1084754510)))
(assert (x89 x206))
(assert (x89 x33))
(assert (x201 x203))
(assert (not (= 4294967296 (x32 x221 x143))))
(assert (x89 x91))
(assert (x89 x127))
(assert (not (= (+ 3 x219) 947726895)))
(assert (=> (<= x192 10000) (not (= x192 (+ x19 3)))))
(assert (=> (>= 10000 x192) (not (= (x32 x162 x119) x192))))
(assert (x89 x175))
(assert (not (= (+ 2 x19) 1960641893)))
(assert (x89 x11))
(assert (not (= 3110348530 (x32 x162 x119))))
(assert (=> (<= x139 10000) (not (= x139 (+ 2 x219)))))
(assert (not (= (+ x219 3) (x32 x85 x207))))
(assert (x89 x108))
(assert (not (= 1960641893 (+ 2 x219))))
(assert (not (= (+ 3 x219) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (x89 x182))
(assert (not (= 3110348530 (x32 x85 x207))))
(assert (=> (<= x246 10000) (not (= x246 (+ x219 2)))))
(assert (x89 x169))
(assert (=> (>= 10000 x128) (not (= x128 (+ x19 2)))))
(assert (=> (<= x128 10000) (not (= (+ x219 2) x128))))
(assert (x89 x103))
(assert (=> (<= x143 10000) (not (= (+ 2 x219) x143))))
(assert (not (= 1084754510 (x32 x85 x207))))
(assert (not (= (x32 x221 x143) 3547226261)))
(assert (x89 x210))
(assert (x89 x78))
(assert (=> (<= x162 10000) (not (= x162 (+ 3 x219)))))
(assert (x201 x241))
(assert (=> (>= 10000 x128) (not (= (x32 x221 x143) x128))))
(assert (not (= (x32 x221 x143) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (not (= 1084754510 (x32 x162 x119))))
(assert (=> (<= x192 10000) (not (= (+ x19 2) x192))))
(assert (not (= (x32 x139 x143) 1061922874)))
(assert (not (= (+ x219 3) (+ 2 x219))))
(assert (x89 x134))
(assert (x89 x208))
(assert (x89 x93))
(assert (=> (= (+ x19 3) (+ 3 x219)) (and (= x207 x119) (= x162 x85))))
(assert (=> (>= 10000 x221) (not (= x221 (+ 3 x19)))))
(assert (=> (= (x32 x85 x207) (x32 x162 x119)) (and (= x162 x85) (= x207 x119))))
(assert (not (= (+ 3 x19) (+ x19 2))))
(assert (x201 x188))
(assert (not (= (+ x219 3) 3250587425)))
(assert (x159 x219))
(assert (not (= (x32 x85 x207) 79228162514264337593543950336)))
(assert (not (= (x32 x162 x119) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 911855590 (+ 3 x219))))
(assert (not (= 941780010 (+ 3 x19))))
(assert (not (= 18446744073709551616 (+ x219 3))))
(assert (=> (>= 10000 x162) (not (= x162 (+ 3 x19)))))
(assert (x201 x123))
(assert (not (= (x32 x221 x143) (+ 3 x219))))
(assert (not (= (x32 x139 x143) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (not (= (+ 2 x19) (x32 x85 x207))))
(assert (x89 x128))
(assert (not (= (x32 x139 x143) 4294967296)))
(assert (x201 1461501637330902918203684832716283019655932542975))
(assert (not (= 3110348530 (+ x219 2))))
(assert (x159 x49))
(assert (not (= 2220280665 (+ 2 x219))))
(assert (not (= (x32 x139 x143) 1084754510)))
(assert (x89 x180))
(assert (x89 x86))
(assert (not (= (+ 3 x19) 911855590)))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (+ 2 x219))))
(assert (not (= (+ x219 3) 340282366920938463463374607431768211455)))
(assert (=> (>= 10000 x221) (not (= (+ x19 2) x221))))
(assert (not (= (+ 2 x19) 947726895)))
(assert (x89 x104))
(assert (x89 x42))
(assert (x89 x241))
(assert (x89 x211))
(assert (not (= 4294967295 (x32 x221 x143))))
(assert (=> (>= 10000 x246) (not (= x246 (x32 x221 x143)))))
(assert (x89 x246))
(assert (x201 x167))
(assert (not (= (+ 2 x19) 941780010)))
(assert (x201 4294967295))
(assert (not (= 941780010 (x32 x221 x143))))
(assert (x89 x216))
(assert (x89 x122))
(assert (=> (>= 10000 x139) (not (= (x32 x139 x143) x139))))
(assert (x89 x245))
(assert (x89 x1))
(assert (x89 x188))
(assert (not (= (x32 x85 x207) 4294967295)))
(assert (x89 x186))
(assert (x89 x24))
(assert (not (= 3547226261 (+ 3 x19))))
(assert (not (= (x32 x85 x207) 1960641893)))
(assert (x89 x133))
(assert (x89 x226))
(assert (x89 x84))
(assert (=> (>= 10000 x49) (not (= (+ 2 x219) x49))))
(assert (not (= (x32 x85 x207) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (not (= 3110348530 (+ 3 x19))))
(assert (not (= (+ 3 x19) 2220280665)))
(assert (not (= 662108492 (x32 x139 x143))))
(assert (not (= (+ 2 x19) 1960939212)))
(assert (not (= 1061922874 (+ 3 x219))))
(assert (not (= (x32 x85 x207) 340282366920938463463374607431768211455)))
(assert (x89 x105))
(assert (x89 x74))
(assert (not (= (x32 x85 x207) 3250587425)))
(assert (x159 x119))
(assert (x89 x47))
(assert (x48 x123))
(assert (not (= 1960939212 (+ 3 x219))))
(assert (not (= (+ x219 3) 1749768213)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 3 x19))))
(assert (x159 x128))
(assert (not (= (x32 x85 x207) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x221) (not (= x221 (+ x219 2)))))
(assert (=> (<= x143 10000) (not (= x143 (x32 x85 x207)))))
(assert (not (= 79228162514264337593543950336 (+ 3 x19))))
(assert (x89 x80))
(assert (x89 x71))
(assert (not (= (+ 3 x219) 662108492)))
(assert (=> (>= 10000 x246) (not (= (+ 2 x19) x246))))
(assert (x153 x203))
(assert (=> (>= 10000 x221) (not (= (x32 x162 x119) x221))))
(assert (=> (>= 10000 x221) (not (= (+ 3 x219) x221))))
(assert (=> (<= x162 10000) (not (= (+ 2 x19) x162))))
(assert (=> (<= x85 10000) (not (= (+ 2 x19) x85))))
(assert (x89 x222))
(assert (not (= 3250587425 (x32 x221 x143))))
(assert (not (= (x32 x85 x207) 662108492)))
(assert (not (= 2652930389 (x32 x221 x143))))
(assert (not (= (+ 2 x19) 4294967295)))
(assert (x89 x221))
(assert (x89 x168))
(assert (not (= 1749768213 (x32 x139 x143))))
(assert (not (= 941780010 (+ x219 3))))
(assert (not (= 79228162514264337593543950336 (x32 x221 x143))))
(assert (=> (<= x246 10000) (not (= (x32 x85 x207) x246))))
(assert (x201 x1))
(assert (not (= (+ 2 x19) 1061922874)))
(assert (not (= (x32 x162 x119) 911855590)))
(assert (x89 x181))
(assert (=> (<= x85 10000) (not (= (+ x19 3) x85))))
(assert (not (= (+ 3 x219) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (not (= (+ x19 3) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (x89 x214))
(assert (x89 x183))
(assert (=> (>= 10000 x143) (not (= x143 (x32 x139 x143)))))
(assert (not (= 1960939212 (x32 x139 x143))))
(assert (not (= (x32 x162 x119) 1960641893)))
(assert (x89 x145))
(assert (not (= (+ x19 3) (+ 2 x219))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x32 x139 x143))))
(assert (not (= 911855590 (+ 2 x19))))
(assert (not (= (x32 x162 x119) 2652930389)))
(assert (x89 x252))
(assert (x89 x20))
(assert (=> (<= x128 10000) (not (= x128 (+ 3 x19)))))
(assert (not (= (x32 x162 x119) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (not (= (+ 2 x19) 79228162514264337593543950336)))
(assert (x201 x193))
(assert (=> (>= 10000 x143) (not (= x143 (+ 2 x19)))))
(assert (x89 x248))
(assert (not (= (+ x19 2) 662108492)))
(assert (not (= 941780010 (x32 x85 x207))))
(assert (x89 x224))
(assert (x89 x3))
(assert (not (= 340282366920938463463374607431768211455 (+ x219 2))))
(assert (not (= 911855590 (x32 x85 x207))))
(assert (=> (<= x139 10000) (not (= x139 (+ x219 3)))))
(assert (not (= (x32 x162 x119) 340282366920938463463374607431768211455)))
(assert (=> (<= x49 10000) (not (= (x32 x221 x143) x49))))
(assert (x89 x50))
(assert (not (= 18446744073709551616 (x32 x221 x143))))
(assert (not (= (+ 3 x19) 662108492)))
(assert (x89 x239))
(assert (not (= (+ 3 x19) 18446744073709551616)))
(assert (x109 x241))
(assert (=> (>= 10000 x143) (not (= x143 (x32 x221 x143)))))
(assert (x89 x120))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 3 x219))))
(assert (not (= 662108492 (x32 x162 x119))))
(assert (not (= (+ 2 x219) 18446744073709551616)))
(assert (not (= (x32 x85 x207) (+ x219 2))))
(assert (not (= (+ x19 3) 1960641893)))
(assert (not (= 2220280665 (x32 x85 x207))))
(assert (not (= 2652930389 (x32 x85 x207))))
(assert (=> (= (x32 x139 x143) (x32 x85 x207)) (and (= x207 x143) (= x139 x85))))
(assert (x89 x35))
(assert (=> (<= x162 10000) (not (= x162 (x32 x162 x119)))))
(assert (not (= 1960939212 (+ x219 2))))
(assert (not (= 662108492 (x32 x221 x143))))
(assert (x89 x203))
(assert (x89 x75))
(assert (not (= (x32 x139 x143) 3250587425)))
(assert (not (= 1960939212 (x32 x162 x119))))
(assert (not (= 911855590 (x32 x139 x143))))
(assert (=> (<= x49 10000) (not (= (x32 x139 x143) x49))))
(assert (x89 x191))
(assert (x89 x97))
(assert (not (= 340282366920938463463374607431768211455 (+ x19 3))))
(assert (not (= 911855590 (+ x219 2))))
(assert (x89 x237))
(assert (x201 x12))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ x219 2))))
(assert (not (= 1960939212 (x32 x221 x143))))
(assert (= (=> (and (and (not (> 3110348530 x75)) (= x121 false) (= (x81 x39) x122) (= x163 (x176 192)) (not (= 3110348530 x75)) (= (x126 x246) x168) x95 (not (= x246 x192)) (>= 1461501637330902918203684832716283019655932542975 x158) (= (x81 x39) x178) (= (div x169 18446744073709551616) x203) (>= 1461501637330902918203684832716283019655932542975 x246) (= x169 (x81 x39)) (not (< x75 2652930389)) (>= x227 0) (= 3250587425 x75) (>= 1461501637330902918203684832716283019655932542975 x7) (= (x176 256) x47) (not (= x49 x192)) (>= 1461501637330902918203684832716283019655932542975 x183) (<= x210 1461501637330902918203684832716283019655932542975) (not (> 1749768213 x75)) (< 0 x99) (= (x176 160) x52) (>= x158 0) (<= x133 1461501637330902918203684832716283019655932542975) (>= x182 0) (>= x158 0) (= x24 (x81 x219)) (<= x192 1461501637330902918203684832716283019655932542975) (= false x212) (= x183 x164) (>= x168 0) (>= 1461501637330902918203684832716283019655932542975 x240) (= x249 (x126 x192)) (>= x186 0) (>= x133 0) (<= x186 1461501637330902918203684832716283019655932542975) (<= x196 1461501637330902918203684832716283019655932542975) (= (x126 x49) x182) (= (+ 2 x219) x40) (= x68 1061922874) (= (+ x40 1) x39) (= false x61) (<= 0 x80) (> x192 0) (= x30 (x18 340282366920938463463374607431768211455 x188)) (= x208 0) (<= 0 x240) (>= x7 0) (>= x23 0) (= (div x178 4294967296) x193) (= (x18 4294967295 x193) x15) (= (> (x111 x49) 0) x95) (>= x249 0) (= (x176 128) x124) (>= 4294967295 x155) (= x36 (> (x111 x246) 0)) (<= x158 1461501637330902918203684832716283019655932542975) (= (x111 x49) x99) (= x85 x70) (= x214 0) (= (div x122 79228162514264337593543950336) x188) (>= 1461501637330902918203684832716283019655932542975 x80) (not (= x246 x49)) (= (x81 x40) x170) (= (> (x111 x192) 0) x115) (< 0 x49) (>= 340282366920938463463374607431768211455 x227) x36 (= (x32 x85 x207) x219) (<= 0 x183) (> x246 0) (= x146 (x18 4294967295 x203)) x115 (<= x23 4294967295) (>= x210 0) (> 3547226261 x75) (>= x196 0) (= (x176 224) x127) (= x221 x147) (= x223 false) (= x207 (x32 x221 x143)) (<= x49 1461501637330902918203684832716283019655932542975) (<= 0 x155)) (and (and (< 0 x86) (>= x177 0) (= 0 x88) (= x46 (x79 (- x60 68))) (>= 1461501637330902918203684832716283019655932542975 x80) (<= 0 x80) (not (> 4 x60)) (= x74 (x150 544)) (not (< x71 1960641893)) (= (x111 x49) x86) (= (x197 160) x187) (= x72 (x150 672)) (= x93 x52) (and (= true (<= x60 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x60 195)) (>= 1461501637330902918203684832716283019655932542975 x177) (>= x231 0) (= 128 x103) (= x101 192) (not (= 1960641893 x71)) (= x113 (x79 (- x60 132))) (= x181 128) (= (x92 256) x204) (> 2220280665 x71) (not (or (and (= true (<= x46 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x46 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x46))) (= 1960939212 x71) (= x124 x3) (= x76 256) (= x237 (x150 640)) (= x165 (x230 288)) (= x148 (x190 224)) (= x156 (x150 576)) (= (x150 608) x245) (= (x14 192) x239) (<= x231 1461501637330902918203684832716283019655932542975) (= (x150 512) x161) (= x97 (x79 (- x60 4))) (= x216 x177) (not (or (and (= true (<= x113 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x113 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x113))) (< x71 2652930389) (= 256 x251) (not (or (> x97 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x97 192) (= (<= x97 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= 192 x194) (= (x8 128) x252) (not (< x71 1749768213))) (and (and (= (x185 160) x102) (<= 0 x215) (= x74 x42) (= (+ 1 x25) x200) (= x55 (= x172 x206)) (= x9 x82) (= x72 x33) (= x195 x16) (= x88 0) (= x104 x161) (= x222 x82) (not (= 941780010 x191)) x209 (> x21 0) (= (x81 x128) x54) (= (+ 2 x19) x25) (= x167 (div x224 79228162514264337593543950336)) (= (div x235 18446744073709551616) x12) (= x26 (not (= x10 x211))) (= x248 x42) x55 (= x1 (div x125 4294967296)) (= x154 x205) (= (= x154 x16) x22) x87 (<= 0 x198) (>= 1461501637330902918203684832716283019655932542975 x198) (> 1084754510 x191) (not (< x56 3110348530)) (> x17 0) (= x198 x216) (= x191 1061922874) (>= 1461501637330902918203684832716283019655932542975 x180) (= x17 (x111 x49)) (= x116 x70) (= x211 x70) (= (x62 x19) x65) x22 (>= x180 0) (<= x144 340282366920938463463374607431768211455) (= (x111 x49) x166) (= x226 (x62 x25)) (= x2 x237) (= x134 x33) (= x238 (x185 192)) (= x108 0) (= x241 (x81 x128)) (= x243 x136) (= (x32 x162 x119) x19) (= x34 (not (= x184 x136))) (= x38 x35) (= x44 x175) (= x21 (x18 255 x241)) (= x142 (= x9 x140)) (not (< x56 1749768213)) (= (x62 x200) x125) (= (x185 128) x43) (= x11 x80) (= x156 x205) (<= x80 1461501637330902918203684832716283019655932542975) (<= x59 4294967295) (= (not (= x116 x222)) x87) (not (< x56 2652930389)) (<= x215 4294967295) (= x120 x91) (<= x210 1461501637330902918203684832716283019655932542975) (not (< x60 4)) (= x20 x245) (= x162 x70) x77 (= x209 (= x45 x175)) (>= x59 0) (= x206 x104) (<= 0 x210) (= (x185 256) x4) (<= 0 x217) (= (x185 224) x213) (= x243 x172) (= x56 3250587425) x34 (<= 0 x138) x142 (= x123 (x81 81955473079516046949633743016697847541294818689821282749996681496272635257091)) (> 1749768213 x191) (= x235 (x62 x200)) (>= x80 0) (= x2 x140) (>= 1461501637330902918203684832716283019655932542975 x217) (= x151 (= x38 x134)) (= x77 (= x120 x248)) (> x166 0) (= x84 x217) (not (< x191 662108492)) (= (x62 x200) x224) (and (< 3 x60) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x60))) (= (x18 115792089237316195423570985008687907853269984665640564039457584007913129639680 x54) x135) (= x107 (x18 4294967295 x12)) x26 (<= x138 1461501637330902918203684832716283019655932542975) (= x119 (x32 x139 x143)) (not (< x191 911855590)) (not (= x191 911855590)) (= x45 x20) (= (x18 1461501637330902918203684832716283019655932542975 x123) x11) (= x184 x70) (< x56 3547226261) (= x195 x10) x151 (<= 0 x144) (not (= x56 3110348530)) (= (x18 4294967295 x1) x160) (= (x18 340282366920938463463374607431768211455 x167) x145) (= x139 x147) (not (= 947726895 x191))) (and (= x50 x127) (= (= x50 x173) x117) (= x105 x43) (= x244 x102) (= x213 x173))))) x117) x73))
(assert (x89 x164))
(assert (x159 x192))
(assert (=> (<= x85 10000) (not (= (x32 x162 x119) x85))))
(assert (=> (>= 10000 x85) (not (= (x32 x139 x143) x85))))
(assert (x89 x161))
(assert (x89 x10))
(assert (not (= (+ x19 2) (+ x219 3))))
(assert (x89 x249))
(assert (not (= 340282366920938463463374607431768211455 (x32 x221 x143))))
(assert (x89 x198))
(assert (x89 x235))
(assert (not (= (x32 x85 x207) 1061922874)))
(assert (not (= 947726895 (x32 x162 x119))))
(assert (x89 x107))
(assert (x89 x118))
(assert (x89 x16))
(assert (x89 x113))
(assert (=> (<= x85 10000) (not (= (x32 x85 x207) x85))))
(assert (x89 x123))
(assert (not (= 2220280665 (+ x219 3))))
(assert (x89 x228))
(assert (=> (>= 10000 x49) (not (= (+ 3 x19) x49))))
(assert (x89 x100))
(assert (x89 x165))
(assert (x89 x196))
(assert (not (= (+ 3 x19) (x32 x162 x119))))
(assert (x159 x221))
(assert (x89 x227))
(assert (x89 x54))
(assert (not (= (+ 2 x19) 1749768213)))
(assert (=> (>= 10000 x139) (not (= x139 (x32 x162 x119)))))
(assert (x89 x30))
(assert (not (= (x32 x162 x119) (+ 3 x219))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x32 x85 x207))))
(assert (x89 x147))
(assert (x89 x21))
(assert (not x73))
(assert (x89 x160))
(assert (x89 x193))
(assert (=> (<= x192 10000) (not (= (x32 x85 x207) x192))))
(assert (x89 x43))
(assert (x89 x52))
(assert (not (= 4294967296 (x32 x85 x207))))
(assert (x89 x28))
(assert (not (= (+ 2 x219) 662108492)))
(assert (not (= (x32 x85 x207) 947726895)))
(assert (=> (= (+ 2 x219) (+ 2 x19)) (and (= x119 x207) (= x162 x85))))
(assert (=> (= (x32 x162 x119) (x32 x139 x143)) (and (= x139 x162) (= x119 x143))))
(assert (x89 x195))
(assert (x89 x138))
(assert (=> (>= 10000 x162) (not (= (+ x219 2) x162))))
(assert (not (= 1960939212 (+ 3 x19))))
(assert (x89 x215))
(assert (=> (= (x32 x139 x143) (x32 x221 x143)) (= x139 x221)))
(assert (not (= (+ x19 3) 947726895)))
(assert (x89 x7))
(assert (=> (>= 10000 x49) (not (= x49 (x32 x162 x119)))))
(assert (x89 x23))
(assert (=> (<= x85 10000) (not (= x85 (+ 3 x219)))))
(assert (x89 x204))
(assert (x89 x137))
(assert (not (= (x32 x221 x143) 1061922874)))
(assert (not (= (+ x19 3) 3250587425)))
(assert (x201 340282366920938463463374607431768211455))
(assert (=> (>= 10000 x139) (not (= x139 (+ 2 x19)))))
(assert (x63 x188))
(assert (x89 x143))
(assert (x89 x82))
(assert (not (= 3110348530 (x32 x221 x143))))
(assert (x89 x76))
(assert (x159 x85))
(assert (not (= 1749768213 (+ 2 x219))))
(assert (x53 x54))
(assert (not (= (+ x219 2) (x32 x221 x143))))
(assert (not (= (+ x219 3) 3547226261)))
(assert (not (= 1084754510 (+ x219 3))))
(assert (=> (>= 10000 x85) (not (= x85 (x32 x221 x143)))))
(assert (x201 x54))
(assert (not (= 18446744073709551616 (+ 2 x19))))
(assert (not (= (x32 x139 x143) 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (not (= (+ 3 x219) (x32 x139 x143))))
(assert (x89 x101))
(assert (x89 x13))
(assert (not (= (x32 x162 x119) (+ 2 x19))))
(assert (x89 x44))
(assert (=> (<= x143 10000) (not (= (+ x219 3) x143))))
(assert (x89 x144))
(assert (not (= (+ 3 x19) (x32 x221 x143))))
(assert (not (= 3110348530 (+ 3 x219))))
(assert (x89 x167))
(assert (=> (<= x192 10000) (not (= x192 (x32 x139 x143)))))
(assert (x89 x234))
(assert (x89 x38))
(assert (not (= (+ 2 x219) 1061922874)))
(assert (=> (<= x246 10000) (not (= x246 (x32 x139 x143)))))
(assert (x89 x205))
(assert (x89 x177))
(assert (not (= (+ 2 x19) 3110348530)))
(assert (=> (>= 10000 x128) (not (= x128 (x32 x85 x207)))))
(assert (not (= 941780010 (x32 x139 x143))))
(assert (x89 x59))
(assert (not (= (+ 3 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x89 x56))
(assert (not (= 1061922874 (+ x19 3))))
(assert (x89 x98))
(assert (not (= (x32 x162 x119) 3250587425)))
(assert (x89 x60))
(assert (not (= (x32 x162 x119) (+ x219 2))))
(assert (x89 x49))
(assert (=> (<= x162 10000) (not (= x162 (x32 x139 x143)))))
(assert (=> (>= 10000 x221) (not (= (x32 x139 x143) x221))))
(assert (not (= (x32 x162 x119) 79228162514264337593543950336)))
(assert (not (= 1960641893 (+ x219 3))))
(assert (=> (>= 10000 x192) (not (= (x32 x221 x143) x192))))
(assert (not (= (x32 x221 x143) 1461501637330902918203684832716283019655932542975)))
(assert (x89 x90))
(assert (x89 x72))
(assert (x159 x246))
(assert (=> (>= 10000 x246) (not (= (+ x19 3) x246))))
(assert (x89 x12))
(assert (not (= (x32 x139 x143) (+ x19 3))))
(assert (x89 x173))
(assert (x89 x148))
(assert (not (= (x32 x85 x207) 3547226261)))
(assert (x89 x158))
(assert (x159 x162))
(assert (not (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x32 x162 x119))))
(assert (=> (>= 10000 x192) (not (= x192 (+ 2 x219)))))
(assert (not (= (+ 2 x219) (x32 x139 x143))))
(assert (x89 x251))
(assert (x89 x70))
(assert (not (= (+ x19 3) 1749768213)))
(assert (not (= 1084754510 (+ 2 x219))))
(assert (x89 x162))
(assert (not (= (+ 2 x219) 4294967295)))
(assert (x159 x143))
(assert (not (= (x32 x139 x143) (+ x19 2))))
(assert (x89 x65))
(assert (x153 x12))
(assert (x89 x135))
(assert (=> (<= x85 10000) (not (= x85 (+ 2 x219)))))
(assert (=> (<= x192 10000) (not (= x192 (+ x219 3)))))
(assert (not (= (+ 2 x19) 1461501637330902918203684832716283019655932542975)))
(assert (x89 x178))
(assert (x89 x146))
(assert (not (= 1084754510 (+ x19 3))))
(assert (=> (>= 10000 x143) (not (= x143 (+ x19 3)))))
(assert (not (= (+ 3 x19) (x32 x85 x207))))
(assert (x89 x202))
(assert (not (= (+ 2 x19) 1084754510)))
(assert (not (= (x32 x221 x143) 1960641893)))
(assert (x89 x217))
(assert (not (= 941780010 (x32 x162 x119))))
(assert (not (= 4294967295 (+ 3 x219))))
(assert (not (= 79228162514264337593543950336 (+ x219 2))))
(assert (=> (>= 10000 x162) (not (= (x32 x85 x207) x162))))
(assert (not (= (x32 x85 x207) 18446744073709551616)))
(assert (x89 x192))
(assert (x89 x6))
(assert (=> (>= 10000 x143) (not (= (x32 x162 x119) x143))))
(assert (not (= 4294967296 (+ 3 x219))))
(assert (x89 x9))
(assert (=> (>= 10000 x221) (not (= x221 (x32 x221 x143)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x32 x221 x143))))
(assert (x89 x184))
(assert (x89 x88))
(assert (x89 x125))
(assert (x89 x139))
(assert (not (= (x32 x162 x119) 18446744073709551616)))
(assert (not (= (x32 x139 x143) 3110348530)))
(assert (not (= (x32 x162 x119) 1749768213)))
(assert (not (= (x32 x139 x143) 18446744073709551616)))
(assert (not (= (+ 2 x219) 4294967296)))
(assert (=> (>= 10000 x139) (not (= (x32 x85 x207) x139))))
(assert (=> (>= 10000 x49) (not (= (x32 x85 x207) x49))))
(assert (=> (>= 10000 x139) (not (= x139 (+ x19 3)))))
(assert (not (= 4294967296 (+ x19 3))))
(assert (not (= 947726895 (x32 x139 x143))))
(assert (x89 x213))
(assert (x153 x1))
(assert (not (= (x32 x85 x207) 1960939212)))
(assert (x89 x170))
(assert (x89 x154))
(assert (=> (= (x32 x221 x143) (x32 x85 x207)) (and (= x85 x221) (= x207 x143))))
(assert (x201 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (=> (>= 10000 x246) (not (= (x32 x162 x119) x246))))
(assert (not (= 4294967295 (x32 x139 x143))))
(assert (not (= 2652930389 (+ x19 3))))
(assert (not (= (x32 x85 x207) 1749768213)))
(assert (not (= (x32 x139 x143) 2220280665)))
(assert (x89 x102))
(assert (=> (>= 10000 x221) (not (= x221 (x32 x85 x207)))))
(assert (x153 x193))
(assert (not (= 79228162514264337593543950336 (x32 x139 x143))))
(assert (=> (<= x246 10000) (not (= (+ x219 3) x246))))
(assert (x89 x240))
(assert (x89 x4))
(assert (not (= 4294967296 (x32 x162 x119))))
(assert (not (= 79228162514264337593543950336 (+ x219 3))))
(assert (not (= (+ 2 x219) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x159 x139))
(assert (not (= (x32 x162 x119) 3547226261)))
(assert (not (= 3547226261 (x32 x139 x143))))
(assert (x159 x207))
(check-sat)
(exit)