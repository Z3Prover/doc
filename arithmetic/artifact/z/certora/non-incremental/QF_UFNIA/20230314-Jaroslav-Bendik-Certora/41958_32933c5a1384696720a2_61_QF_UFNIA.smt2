(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x493 () Int)
(declare-fun x491 () Int)
(declare-fun x129 () Bool)
(declare-fun x354 () Bool)
(declare-fun x480 () Int)
(declare-fun x337 () Bool)
(declare-fun x143 () Bool)
(declare-fun x136 () Int)
(declare-fun x578 () Bool)
(declare-fun x558 () Bool)
(declare-fun x530 () Int)
(declare-fun x206 () Int)
(declare-fun x385 () Bool)
(declare-fun x204 () Bool)
(declare-fun x64 () Int)
(declare-fun x438 () Bool)
(declare-fun x451 () Bool)
(declare-fun x50 () Int)
(declare-fun x230 () Bool)
(declare-fun x497 () Int)
(declare-fun x418 () Bool)
(declare-fun x116 () Bool)
(declare-fun x519 () Bool)
(declare-fun x37 () Int)
(declare-fun x295 () Bool)
(declare-fun x249 () Bool)
(declare-fun x411 () Bool)
(declare-fun x16 () Int)
(declare-fun x127 () Bool)
(declare-fun x141 () Bool)
(declare-fun x532 () Int)
(declare-fun x394 () Bool)
(declare-fun x111 () Bool)
(declare-fun x243 () Bool)
(declare-fun x316 () Bool)
(declare-fun x121 () Bool)
(declare-fun x541 () Bool)
(declare-fun x110 () Int)
(declare-fun x361 () Int)
(declare-fun x564 () Bool)
(declare-fun x403 () Bool)
(declare-fun x96 () Int)
(declare-fun x553 () Int)
(declare-fun x285 () Bool)
(declare-fun x448 () Bool)
(declare-fun x38 () Bool)
(declare-fun x119 () Bool)
(declare-fun x265 () Bool)
(declare-fun x313 () Int)
(declare-fun x317 () Int)
(declare-fun x463 () Int)
(declare-fun x63 () Bool)
(declare-fun x91 () Int)
(declare-fun x55 () Bool)
(declare-fun x364 () Bool)
(declare-fun x517 () Int)
(declare-fun x139 () Bool)
(declare-fun x222 () Bool)
(declare-fun x476 () Bool)
(declare-fun x14 () Bool)
(declare-fun x479 () Int)
(declare-fun x465 () Bool)
(declare-fun x208 () Bool)
(declare-fun x271 () Bool)
(declare-fun x99 () Bool)
(declare-fun x502 () Bool)
(declare-fun x146 () Bool)
(declare-fun x456 () Bool)
(declare-fun x579 () Int)
(declare-fun x286 () Bool)
(declare-fun x404 () Bool)
(declare-fun x433 () Bool)
(declare-fun x395 () Bool)
(declare-fun x154 () Bool)
(declare-fun x495 () Bool)
(declare-fun x178 () Bool)
(declare-fun x379 () Bool)
(declare-fun x335 () Int)
(declare-fun x60 () Bool)
(declare-fun x325 () Bool)
(declare-fun x397 () Int)
(declare-fun x450 () Int)
(declare-fun x501 () Int)
(declare-fun x227 () Bool)
(declare-fun x545 () Bool)
(declare-fun x179 () Int)
(declare-fun x345 () Bool)
(declare-fun x445 () Bool)
(declare-fun x402 () Int)
(declare-fun x423 () Bool)
(declare-fun x489 () Int)
(declare-fun x85 () Bool)
(declare-fun x253 () Bool)
(declare-fun x452 () Int)
(declare-fun x174 () Bool)
(declare-fun x320 () Int)
(declare-fun x228 () Int)
(declare-fun x44 () Bool)
(declare-fun x301 () Int)
(declare-fun x512 () Bool)
(declare-fun x73 () Bool)
(declare-fun x375 () Int)
(declare-fun x23 () Bool)
(declare-fun x426 () Int)
(declare-fun x229 () Bool)
(declare-fun x284 () Bool)
(declare-fun x242 () Bool)
(declare-fun x149 () Bool)
(declare-fun x353 () Bool)
(declare-fun x358 () Bool)
(declare-fun x193 () Bool)
(declare-fun x471 () Int)
(declare-fun x287 () Int)
(declare-fun x270 () Bool)
(declare-fun x509 () Bool)
(declare-fun x164 () Bool)
(declare-fun x372 () Bool)
(declare-fun x72 () Int)
(declare-fun x523 () Bool)
(declare-fun x112 () Bool)
(declare-fun x446 () Bool)
(declare-fun x510 () Int)
(declare-fun x360 () Bool)
(declare-fun x392 () Int)
(declare-fun x419 () Bool)
(declare-fun x381 () Bool)
(declare-fun x482 () Bool)
(declare-fun x219 () Bool)
(declare-fun x26 () Bool)
(declare-fun x416 () Bool)
(declare-fun x194 () Bool)
(declare-fun x561 () Bool)
(declare-fun x10 () Int)
(declare-fun x366 () Bool)
(declare-fun x542 () Bool)
(declare-fun x171 () Bool)
(declare-fun x352 () Bool)
(declare-fun x386 () Bool)
(declare-fun x282 () Bool)
(declare-fun x315 () Int)
(declare-fun x224 () Bool)
(declare-fun x43 () Bool)
(declare-fun x323 () Bool)
(declare-fun x205 () Bool)
(declare-fun x175 () Bool)
(declare-fun x27 () Bool)
(declare-fun x526 () Bool)
(declare-fun x551 () Int)
(declare-fun x113 () Bool)
(declare-fun x131 () Int)
(declare-fun x40 () Int)
(declare-fun x133 () Bool)
(declare-fun x250 () Int)
(declare-fun x504 () Bool)
(declare-fun x93 () Int)
(declare-fun x351 () Int)
(declare-fun x475 () Int)
(declare-fun x306 () Bool)
(declare-fun x124 () Bool)
(declare-fun x415 () Bool)
(declare-fun x25 () Int)
(declare-fun x453 () Bool)
(declare-fun x369 () Int)
(declare-fun x48 () Bool)
(declare-fun x367 () Bool)
(declare-fun x427 () Bool)
(declare-fun x221 () Bool)
(declare-fun x255 () Int)
(declare-fun x506 () Bool)
(declare-fun x388 () Int)
(declare-fun x273 () Bool)
(declare-fun x417 () Bool)
(declare-fun x80 () Bool)
(declare-fun x49 () Int)
(declare-fun x34 () Int)
(declare-fun x393 () Bool)
(declare-fun x344 () Bool)
(declare-fun x234 () Int)
(declare-fun x223 () Bool)
(declare-fun x140 () Bool)
(declare-fun x62 () Bool)
(declare-fun x268 () Bool)
(declare-fun x412 () Bool)
(declare-fun x477 () Bool)
(declare-fun x275 () Bool)
(declare-fun x500 () Bool)
(declare-fun x145 () Bool)
(declare-fun x186 () Bool)
(declare-fun x342 () Bool)
(declare-fun x106 () Int)
(declare-fun x209 () Bool)
(declare-fun x45 () Bool)
(declare-fun x439 () Bool)
(declare-fun x373 () Bool)
(declare-fun x449 () Bool)
(declare-fun x430 () Int)
(declare-fun x51 () Bool)
(declare-fun x508 () Int)
(declare-fun x330 () Bool)
(declare-fun x155 () Bool)
(declare-fun x225 () Int)
(declare-fun x231 () Int)
(declare-fun x56 () Bool)
(declare-fun x580 () Bool)
(declare-fun x114 () Int)
(declare-fun x74 () Int)
(declare-fun x236 () Int)
(declare-fun x468 () Bool)
(declare-fun x424 () Int)
(declare-fun x3 () Int)
(declare-fun x302 () Bool)
(declare-fun x11 () Bool)
(declare-fun x28 () Bool)
(declare-fun x90 () Bool)
(declare-fun x455 () Bool)
(declare-fun x322 () Bool)
(declare-fun x457 () Bool)
(declare-fun x444 () Bool)
(declare-fun x522 () Bool)
(declare-fun x496 () Bool)
(declare-fun x478 () Bool)
(declare-fun x556 () Bool)
(declare-fun x420 () Bool)
(declare-fun x267 () Int)
(declare-fun x431 (Int) Int)
(declare-fun x61 () Int)
(declare-fun x29 () Bool)
(declare-fun x2 () Int)
(declare-fun x483 () Bool)
(declare-fun x20 () Bool)
(declare-fun x220 () Int)
(declare-fun x368 () Int)
(declare-fun x274 () Bool)
(declare-fun x339 () Int)
(declare-fun x82 () Bool)
(declare-fun x69 () Bool)
(declare-fun x515 () Bool)
(declare-fun x319 () Int)
(declare-fun x559 () Bool)
(declare-fun x413 () Int)
(declare-fun x359 () Bool)
(declare-fun x213 () Int)
(declare-fun x165 () Bool)
(declare-fun x142 () Bool)
(declare-fun x36 () Bool)
(declare-fun x207 () Bool)
(declare-fun x47 () Bool)
(declare-fun x182 () Int)
(declare-fun x66 () Int)
(declare-fun x492 () Int)
(declare-fun x376 () Int)
(declare-fun x150 () Bool)
(declare-fun x291 () Bool)
(declare-fun x183 () Bool)
(declare-fun x329 () Bool)
(declare-fun x441 () Int)
(declare-fun x346 () Bool)
(declare-fun x18 () Bool)
(declare-fun x466 () Bool)
(declare-fun x168 () Bool)
(declare-fun x261 () Bool)
(declare-fun x46 () Bool)
(declare-fun x565 () Bool)
(declare-fun x216 () Bool)
(declare-fun x382 () Int)
(declare-fun x281 () Int)
(declare-fun x298 () Bool)
(declare-fun x163 () Bool)
(declare-fun x406 () Bool)
(declare-fun x454 () Int)
(declare-fun x494 () Bool)
(declare-fun x576 () Int)
(declare-fun x470 () Bool)
(declare-fun x324 () Int)
(declare-fun x181 () Int)
(declare-fun x277 () Int)
(declare-fun x560 () Bool)
(declare-fun x264 () Bool)
(declare-fun x544 () Bool)
(declare-fun x362 () Int)
(declare-fun x554 () Bool)
(declare-fun x88 () Bool)
(declare-fun x19 () Bool)
(declare-fun x272 () Bool)
(declare-fun x58 () Int)
(declare-fun x499 () Bool)
(declare-fun x552 () Bool)
(declare-fun x572 () Bool)
(declare-fun x126 () Bool)
(declare-fun x190 (Int Int) Int)
(declare-fun x331 () Int)
(declare-fun x79 () Bool)
(declare-fun x574 () Bool)
(declare-fun x311 () Bool)
(declare-fun x24 () Bool)
(declare-fun x276 () Int)
(declare-fun x218 () Bool)
(declare-fun x436 () Int)
(declare-fun x54 () Int)
(declare-fun x170 () Int)
(declare-fun x153 () Int)
(declare-fun x233 () Int)
(declare-fun x338 () Bool)
(declare-fun x280 () Int)
(declare-fun x172 () Int)
(declare-fun x132 () Bool)
(declare-fun x343 () Bool)
(declare-fun x304 () Int)
(declare-fun x535 () Bool)
(declare-fun x157 () Bool)
(declare-fun x410 () Int)
(declare-fun x531 () Int)
(declare-fun x350 () Bool)
(declare-fun x409 () Int)
(declare-fun x443 () Int)
(declare-fun x7 () Bool)
(declare-fun x13 () Bool)
(declare-fun x549 () Int)
(declare-fun x484 () Bool)
(declare-fun x232 () Bool)
(declare-fun x349 () Bool)
(declare-fun x269 () Int)
(declare-fun x520 () Bool)
(declare-fun x399 () Bool)
(declare-fun x266 () Int)
(declare-fun x108 () Bool)
(declare-fun x247 () Bool)
(declare-fun x380 () Bool)
(declare-fun x434 () Bool)
(declare-fun x191 () Int)
(declare-fun x59 () Bool)
(declare-fun x107 () Int)
(declare-fun x488 () Bool)
(declare-fun x158 () Bool)
(declare-fun x462 (Int) Int)
(declare-fun x555 () Int)
(declare-fun x70 () Int)
(declare-fun x105 () Int)
(declare-fun x327 () Bool)
(declare-fun x511 () Bool)
(declare-fun x539 () Int)
(declare-fun x437 () Int)
(declare-fun x122 () Int)
(declare-fun x318 () Int)
(declare-fun x525 () Int)
(declare-fun x348 () Bool)
(declare-fun x305 () Int)
(declare-fun x300 () Bool)
(declare-fun x1 () Bool)
(declare-fun x472 () Int)
(declare-fun x135 () Bool)
(declare-fun x568 (Int) Int)
(declare-fun x83 () Bool)
(declare-fun x464 () Int)
(declare-fun x176 () Bool)
(declare-fun x293 () Bool)
(declare-fun x15 () Int)
(declare-fun x251 () Bool)
(declare-fun x371 () Int)
(declare-fun x76 () Bool)
(declare-fun x22 () Bool)
(declare-fun x407 () Bool)
(declare-fun x398 () Bool)
(declare-fun x534 () Int)
(declare-fun x71 () Int)
(declare-fun x237 () Bool)
(declare-fun x173 () Bool)
(declare-fun x118 () Int)
(declare-fun x459 () Bool)
(declare-fun x259 () Bool)
(declare-fun x4 () Bool)
(declare-fun x294 () Int)
(declare-fun x130 () Bool)
(declare-fun x159 () Bool)
(declare-fun x571 () Bool)
(declare-fun x138 () Int)
(declare-fun x533 () Bool)
(declare-fun x94 () Int)
(declare-fun x57 () Int)
(declare-fun x309 () Bool)
(declare-fun x128 () Bool)
(declare-fun x12 () Int)
(declare-fun x383 () Bool)
(declare-fun x310 () Bool)
(declare-fun x278 () Bool)
(declare-fun x151 () Bool)
(declare-fun x39 () Bool)
(declare-fun x109 () Bool)
(declare-fun x68 () Bool)
(declare-fun x333 () Int)
(declare-fun x263 () Bool)
(declare-fun x100 () Bool)
(declare-fun x308 () Bool)
(declare-fun x575 () Bool)
(declare-fun x474 () Bool)
(declare-fun x396 () Bool)
(declare-fun x210 () Int)
(declare-fun x518 () Int)
(declare-fun x137 () Int)
(declare-fun x188 () Bool)
(declare-fun x196 () Int)
(declare-fun x31 () Bool)
(declare-fun x546 () Bool)
(declare-fun x573 () Int)
(declare-fun x296 () Int)
(declare-fun x458 () Int)
(declare-fun x461 () Bool)
(declare-fun x521 () Bool)
(declare-fun x92 () Bool)
(declare-fun x440 () Bool)
(declare-fun x252 () Bool)
(declare-fun x35 () Bool)
(declare-fun x180 () Int)
(declare-fun x177 () Int)
(declare-fun x192 () Bool)
(declare-fun x374 () Bool)
(declare-fun x97 () Int)
(declare-fun x162 () Bool)
(declare-fun x123 () Bool)
(declare-fun x102 () Bool)
(declare-fun x89 () Bool)
(declare-fun x211 () Bool)
(declare-fun x84 () Bool)
(declare-fun x184 () Bool)
(declare-fun x125 () Bool)
(declare-fun x8 () Bool)
(declare-fun x550 () Bool)
(declare-fun x334 () Bool)
(declare-fun x563 () Bool)
(declare-fun x391 () Bool)
(declare-fun x201 () Bool)
(declare-fun x527 () Int)
(declare-fun x198 () Bool)
(declare-fun x262 () Bool)
(declare-fun x67 () Bool)
(declare-fun x147 () Bool)
(declare-fun x260 () Int)
(declare-fun x199 () Int)
(declare-fun x486 () Bool)
(declare-fun x103 () Bool)
(declare-fun x401 () Bool)
(declare-fun x6 () Int)
(declare-fun x528 () Bool)
(declare-fun x98 () Int)
(declare-fun x215 () Bool)
(declare-fun x540 () Bool)
(declare-fun x187 () Int)
(declare-fun x513 () Bool)
(declare-fun x239 () Bool)
(declare-fun x244 () Bool)
(declare-fun x203 () Bool)
(declare-fun x487 () Int)
(declare-fun x378 () Int)
(declare-fun x569 () Bool)
(declare-fun x283 () Bool)
(declare-fun x547 () Bool)
(declare-fun x341 () Int)
(declare-fun x538 () Bool)
(declare-fun x77 () Bool)
(declare-fun x577 () Int)
(declare-fun x503 () Int)
(declare-fun x529 () Bool)
(declare-fun x422 () Bool)
(declare-fun x246 () Int)
(declare-fun x200 () Int)
(declare-fun x328 () Int)
(declare-fun x212 () Int)
(declare-fun x166 () Int)
(declare-fun x241 () Int)
(declare-fun x414 () Int)
(declare-fun x152 () Bool)
(declare-fun x248 () Int)
(declare-fun x543 () Int)
(declare-fun x548 () Bool)
(declare-fun x363 () Bool)
(declare-fun x292 () Bool)
(declare-fun x321 () Int)
(declare-fun x21 () Int)
(declare-fun x167 () Int)
(declare-fun x87 () Int)
(declare-fun x336 () Bool)
(declare-fun x421 () Int)
(declare-fun x390 () Bool)
(declare-fun x104 () Bool)
(declare-fun x365 () Bool)
(declare-fun x469 () Int)
(declare-fun x312 () Bool)
(declare-fun x226 () Int)
(declare-fun x514 () Bool)
(declare-fun x485 () Int)
(declare-fun x17 () Bool)
(declare-fun x160 () Bool)
(declare-fun x33 () Bool)
(declare-fun x117 () Bool)
(declare-fun x567 () Bool)
(declare-fun x516 () Bool)
(declare-fun x377 () Bool)
(declare-fun x148 () Int)
(declare-fun x347 () Bool)
(declare-fun x197 () Int)
(declare-fun x467 () Bool)
(declare-fun x120 () Bool)
(declare-fun x498 () Int)
(declare-fun x144 () Bool)
(declare-fun x435 () Int)
(declare-fun x303 () Bool)
(declare-fun x384 () Int)
(declare-fun x240 () Int)
(declare-fun x169 () Int)
(declare-fun x257 () Bool)
(declare-fun x78 () Bool)
(declare-fun x356 () Int)
(declare-fun x326 () Int)
(declare-fun x86 () Bool)
(declare-fun x214 () Bool)
(declare-fun x370 () Int)
(declare-fun x156 () Bool)
(declare-fun x432 () Bool)
(declare-fun x570 () Int)
(declare-fun x387 () Bool)
(declare-fun x425 () Bool)
(declare-fun x507 () Bool)
(declare-fun x258 () Bool)
(declare-fun x217 () Int)
(declare-fun x429 () Int)
(declare-fun x299 () Int)
(declare-fun x288 () Int)
(declare-fun x566 () Int)
(declare-fun x473 () Bool)
(declare-fun x562 () Bool)
(declare-fun x161 () Int)
(declare-fun x442 () Bool)
(declare-fun x189 () Bool)
(declare-fun x52 () Bool)
(declare-fun x235 () Bool)
(declare-fun x481 () Int)
(declare-fun x9 () Bool)
(declare-fun x332 () Int)
(declare-fun x536 () Bool)
(declare-fun x505 () Bool)
(declare-fun x557 () Bool)
(declare-fun x428 () Int)
(declare-fun x297 () Int)
(declare-fun x32 () Int)
(declare-fun x307 () Bool)
(declare-fun x238 () Int)
(declare-fun x41 () Bool)
(declare-fun x202 () Int)
(declare-fun x101 () Bool)
(declare-fun x195 () Bool)
(declare-fun x254 () Int)
(declare-fun x81 () Bool)
(declare-fun x289 () Bool)
(declare-fun x314 () Bool)
(declare-fun x134 () Bool)
(declare-fun x95 () Int)
(declare-fun x42 () Bool)
(declare-fun x279 () Bool)
(declare-fun x460 () Int)
(declare-fun x490 () Int)
(declare-fun x355 () Int)
(declare-fun x30 () Bool)
(declare-fun x245 () Bool)
(declare-fun x537 () Bool)
(declare-fun x357 () Bool)
(declare-fun x405 () Bool)
(declare-fun x5 () Int)
(declare-fun x115 () Int)
(declare-fun x389 () Bool)
(declare-fun x185 () Bool)
(declare-fun x400 () Int)
(declare-fun x75 () Bool)
(declare-fun x447 () Int)
(declare-fun x340 () Bool)
(define-fun x65 ((x408 Int)) Int (ite (and (<= 0 x408) (< x408 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x408 (- x408 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x53 ((x408 Int)) Int (ite (and (>= x408 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x408 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x408) x408))
(define-fun x524 ((x290 Int)) Bool (and (>= x290 0) (< x290 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x256 ((x290 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x290) (>= x290 0)))
(assert (= x322 (and x60 x165)))
(assert (x256 x475))
(assert (x256 x299))
(assert (= (and (not x548) x237) x330))
(assert (= x165 (and (not x513) x291)))
(assert (= x552 (and x511 x214)))
(assert (x256 x3))
(assert (= (and x253 x373) x467))
(assert (= x515 (and (not x440) x63)))
(assert (= x314 (and x192 x142)))
(assert (x256 x177))
(assert (x256 x114))
(assert (= (=> (and (and (= x57 x378) (= x352 x302) (= x57 (div x280 3))) (and (= false x343) x22 (= 3 x321))) x90) x563))
(assert (x256 x118))
(assert (= (=> (and (and (= 10 x212) x274 (= false x31)) (and (= x393 x574) (= x246 x114) (= (div x37 10) x246))) x175) x176))
(assert (not x151))
(assert (x256 x131))
(assert (x256 x231))
(assert (x256 x375))
(assert (x256 x539))
(assert (= (and x123 x557) x483))
(assert (x256 x304))
(assert (= (and (not x285) x126) x425))
(assert (= (and (not x433) x367) x537))
(assert (= x33 (and (not x142) x192)))
(assert (x256 x276))
(assert (x256 x72))
(assert (= (=> (and (and x75 (= x108 false) (= 10 x25)) (and (= x566 x331) (= x116 x249) (= (div x341 10) x331))) x119) x218))
(assert (= (and x403 x415) x162))
(assert (x256 x21))
(assert (x256 x328))
(assert (= (and (not x403) x415) x141))
(assert (= (and x405 x323) x82))
(assert (= (and x275 (not x377)) x39))
(assert (= x52 (and x446 (not x262))))
(assert (= x367 (and x8 (not x121))))
(assert (= x567 (and x523 (not x546))))
(assert (= (and x330 x28) x44))
(assert (x256 x238))
(assert (x256 x525))
(assert (= x484 (=> (and (and (= false x468) x311 (= 400 x93)) (and (= x463 (div x3 400)) (= x393 x574) (= x463 x114))) x175)))
(assert (= x571 (and x419 x536)))
(assert (x256 x10))
(assert (= (and (not x60) x165) x572))
(assert (x256 x543))
(assert (x256 x241))
(assert (x256 x370))
(assert (= (=> (and (and (= 10 x305) x419 (= false x346)) (and (= x302 x352) (= x531 x378) (= x531 (div x361 10)))) x90) x140))
(assert (x256 x429))
(assert (= x373 (or x130 x162 x145 x569 x143 x565 x575 x434 x223 x507 x327 x394 x385 x195 x486 x139 x322 x76 x183 x152 x69 x444 x529 x391)))
(assert (x256 x471))
(assert (x256 x437))
(assert (= x146 (=> (and (and (= x304 x114) (= x574 x393) (= x304 (div x37 3))) (and (= 3 x388) x411 (= false x102))) x175)))
(assert (= (and x399 x515) x76))
(assert (x256 x50))
(assert (= x523 (and (not x201) x337)))
(assert (x256 x443))
(assert (= x265 (=> (and (and x262 (= x5 400) (= false x540)) (and (= x574 x393) (= x281 (div x37 400)) (= x281 x114))) x175)))
(assert (x256 x430))
(assert (x256 x447))
(assert (= (and x411 x43) x569))
(assert (= (=> (and (and x149 (= 3 x553) (= x500 false)) (and (= x16 x566) (= x16 (div x341 3)) (= x249 x116))) x119) x257))
(assert (= (=> (and (and (= x302 x352) (= x217 (div x361 400)) (= x378 x217)) (and (= x543 400) (= x459 false) x26)) x90) x209))
(assert (x256 x170))
(assert (= (and x113 (not x232)) x387))
(assert (x256 x187))
(assert (x256 x305))
(assert (= (and x135 x309) x204))
(assert (x256 x436))
(assert (x256 x315))
(assert (= x83 (and x141 (not x47))))
(assert (= (and x147 x308) x507))
(assert (x256 x277))
(assert (x256 x501))
(assert (= x516 (and x18 x521)))
(assert (= x175 (=> (and (and (= x253 (or x342 x80)) (not (= x34 149895259)) (= (and x528 x150) x352) (= (= 0 x361) x342) (not (= 1245370514 x34)) (= x287 (* x280 x361)) (= 2685885107 x34) (= x362 x280) (= (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x287) x150) (= x260 (x431 x530)) (= x447 x489) (= x361 x532) (= (not (= 0 x447)) x528) (= x115 x213) (< 0 x260) (= (= 0 x280) x80)) (and x393 (= x114 x213))) (and (=> (and (and (= x378 x238) (= x352 x302) (= 0 x238) x253) x253) x90) (=> (and (not x253) (and (= (= x361 x447) x120) (= (not x253) x158) x158)) (and (=> (and (and (= x23 (not x120)) (= x334 (= x447 x280)) x23) (not x120)) (and (=> (and (not x334) (and (= x481 (* 2 x447)) x203 (= x203 (not x334)) (= (= x361 x481) x201))) (and (=> (and x201 (and (= (mod (* x280 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x49) (= x49 x378) (= x352 x302) x201)) x90) (=> (and (and x252 (= (not x201) x252) (= (= x91 x280) x546) (= x91 (* 2 x447))) (not x201)) (and (=> (and (not x546) (and (= x144 (not x546)) (= x48 (= x447 x138)) (= x138 (* 2 x361)) x144)) (and (=> x48 x310) (=> (and (and (= x544 (= x517 x447)) (= x379 (not x48)) (= x517 (* 2 x280)) x379) (not x48)) (and (=> x544 x35) (=> (and (not x544) (and x9 (= (* x447 3) x288) (= (= x361 x288) x357) (= (not x544) x9))) (and (=> (and x357 (and (= x302 x352) (= x400 (mod (* x280 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x400 x378) x357)) x90) (=> (and (and (= x128 (not x357)) (= (* 3 x447) x220) (= x466 (= x220 x280)) x128) (not x357)) (and (=> (and (and (= x122 (mod (* 3 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x352 x302) x466 (= x122 x378)) x466) x90) (=> (and (and (= x22 (= x15 x447)) (= x15 (* 3 x361)) (= (not x466) x580) x580) (not x466)) (and (=> x22 x563) (=> (and (and (= x228 (* x280 3)) x173 (= (not x22) x173) (= (= x447 x228) x73)) (not x22)) (and (=> x73 x59) (=> (and (not x73) (and (= (* x447 10) x454) (= (= x361 x454) x307) x347 (= (not x73) x347))) (and (=> (and (not x307) (and x298 (= x298 (not x307)) (= (= x355 x280) x557) (= (* x447 10) x355))) (and (=> (and (not x557) (and (= x318 (* 10 x361)) (= (not x557) x283) x283 (= (= x447 x318) x417))) (and (=> (and (and (= x547 (not x417)) x547 (= (* x280 10) x96) (= (= x96 x447) x419)) (not x417)) (and (=> x419 x140) (=> (and (and (= x473 (not x419)) (= (* 500 x447) x397) (= x18 (= x397 x361)) x473) (not x419)) (and (=> (and (not x18) (and x242 (= (= x153 x280) x312) (= x153 (* x447 500)) (= (not x18) x242))) (and (=> (and (and (= x323 (= x297 x447)) (= x364 (not x312)) (= (* x361 500) x297) x364) (not x312)) (and (=> (and (not x323) (and x168 (= (not x323) x168) (= (= x447 x226) x420) (= (* 500 x280) x226))) (and (=> (and (and (= (* x447 400) x98) x286 (= (not x420) x286) (= (= x98 x361) x535)) (not x420)) (and (=> (and (and (= (= x280 x333) x548) (= (not x535) x7) (= (* 400 x447) x333) x7) (not x535)) (and (=> (and (and (= x302 x352) (= x508 x378) (= (mod (* 400 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x508) x548) x548) x90) (=> (and (and (= x28 (= x413 x447)) x439 (= x439 (not x548)) (= x413 (* x361 400))) (not x548)) (and (=> (and (not x28) (and x259 (= x26 (= x402 x447)) (= (not x28) x259) (= x402 (* x280 400)))) (and (=> (and (not x26) (and (= x42 false) x282 (= 0 x428) (= (not x26) x282) (= x378 x428) (= x302 x42))) x90) (=> x26 x209))) (=> x28 x451))))) (=> (and (and (= x352 x302) (= (mod (* x280 400) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x266) x535 (= x378 x266)) x535) x90))) (=> x420 x245))) (=> x323 x453))) (=> (and x312 (and (= (mod (* 500 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x480) (= x378 x480) x312 (= x352 x302))) x90))) (=> (and (and (= x352 x302) (= x255 x378) (= x255 (mod (* 500 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x18) x18) x90))))) (=> x417 x423))) (=> (and x557 (and (= x352 x302) (= x267 x378) x557 (= (mod (* x361 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x267))) x90))) (=> (and x307 (and x307 (= (mod (* x280 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x485) (= x485 x378) (= x352 x302))) x90))))))))))))))) (=> (and (and (= x302 x352) (= x378 x74) x546 (= (mod (* 2 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x74)) x546) x90))))) (=> (and x334 (and (= x361 x378) (= x352 x302) x334)) x90))) (=> (and (and (= x302 x352) x120 (= x378 x280)) x120) x90)))))))
(assert (= (=> (and (and (= x365 false) (= 10 x70) x513) (and (= x131 (div x3 10)) (= x393 x574) (= x131 x114))) x175) x188))
(assert (x256 x281))
(assert (x256 x566))
(assert (= (and x560 x466) x216))
(assert (= (=> (and (and x295 (= x316 false) (= 500 x443)) (and (= x248 x114) (= x574 x393) (= x248 (div x37 500)))) x175) x264))
(assert (= (and x134 x211) x345))
(assert (= (=> (and (and x48 (= x487 2) (= false x550)) (and (= x352 x302) (= x10 x378) (= x10 (div x280 2)))) x90) x310))
(assert (= (and x412 (not x174)) x340))
(assert (= (and x572 x504) x139))
(assert (= (and x338 x545) x350))
(assert (= (and (not x323) x405) x178))
(assert (= x453 (=> (and (and (= x197 500) x323 (= x11 false)) (and (= x352 x302) (= x167 (div x280 500)) (= x167 x378))) x90)))
(assert (x256 x167))
(assert (x256 x32))
(assert (= (and (not x544) x390) x92))
(assert (= (and x512 x274) x565))
(assert (x256 x426))
(assert (= x394 (and x29 x499)))
(assert (= (and x446 x262) x575))
(assert (= (and (not x26) x353) x79))
(assert (x256 x518))
(assert (= x338 (and x13 (not x445))))
(assert (x256 x248))
(assert (x256 x341))
(assert (= x192 (and (not x263) x407)))
(assert (= (and x476 x533) x404))
(assert (= x327 (and x273 x132)))
(assert (= x303 (and x67 x30)))
(assert (x256 x197))
(assert (= (=> (and (and (= x369 x378) (= (div x280 400) x369) (= x352 x302)) (and (= false x156) x28 (= x458 400))) x90) x451))
(assert (= (and x189 x537) x1))
(assert (x256 x479))
(assert (x256 x362))
(assert (x256 x294))
(assert (= (and x440 x63) x486))
(assert (= (and x567 x48) x381))
(assert (x256 x250))
(assert (x256 x71))
(assert (= (and (not x239) x77) x533))
(assert (= x308 (and (not x399) x515)))
(assert (= (=> (and (and (not (= 1245370514 x233)) (= x116 (and x474 x477)) (= x477 (<= x414 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= 2685885107 x233) (= (x431 x530) x294) (= x489 x335) (= (* x341 x539) x414) (= x424 x555) (= (or x506 x359) x445) (not (= x233 149895259)) (= x539 x532) (> x294 0) (= x359 (= x341 0)) (= x506 (= x539 0)) (= x341 x460) (= x474 (not (= x335 0)))) (and (= x378 x424) x302)) (and (=> (and (and (= x339 0) (= x116 x249) x445 (= x339 x566)) x445) x119) (=> (and (and (= x545 (= x539 x335)) (= x205 (not x445)) x205) (not x445)) (and (=> (and (and x545 (= x249 x116) (= x566 x341)) x545) x119) (=> (and (and (= x271 (= x341 x335)) x306 (= (not x545) x306)) (not x545)) (and (=> (and (and x271 (= x539 x566) (= x116 x249)) x271) x119) (=> (and (and (= (* x335 2) x319) (= x134 (= x539 x319)) x24 (= (not x271) x24)) (not x271)) (and (=> (and (not x134) (and (= (= x320 x341) x263) (= (not x134) x300) x300 (= (* 2 x335) x320))) (and (=> (and (not x263) (and (= x100 (not x263)) (= (* x539 2) x202) x100 (= x142 (= x202 x335)))) (and (=> x142 x383) (=> (and (not x142) (and (= (= x335 x172) x208) (= x279 (not x142)) (= x172 (* x341 2)) x279)) (and (=> (and (and (= x372 (not x208)) x372 (= (* x335 3) x452) (= x465 (= x539 x452))) (not x208)) (and (=> (and x465 (and (= x116 x249) x465 (= x566 x469) (= (mod (* x341 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x469))) x119) (=> (and (not x465) (and (= x135 (= x61 x341)) (= x61 (* x335 3)) (= x84 (not x465)) x84)) (and (=> (and (not x135) (and (= x124 (not x135)) (= x149 (= x335 x490)) (= (* 3 x539) x490) x124)) (and (=> (and (not x149) (and (= (not x149) x133) x133 (= (= x335 x551) x239) (= (* x341 3) x551))) (and (=> x239 x284) (=> (and (not x239) (and (= x476 (= x539 x435)) (= x435 (* x335 10)) x163 (= (not x239) x163))) (and (=> (and (not x476) (and (= (* 10 x335) x225) (= x562 (not x476)) x562 (= x377 (= x341 x225)))) (and (=> (and (not x377) (and (= x101 (not x377)) (= (* x539 10) x240) (= x75 (= x335 x240)) x101)) (and (=> (and (and (= (* 10 x341) x166) x224 (= x67 (= x335 x166)) (= (not x75) x224)) (not x75)) (and (=> x67 x541) (=> (and (and (= x2 (* 500 x335)) (= x51 (not x67)) (= (= x2 x539) x232) x51) (not x67)) (and (=> (and (and (= x566 x180) (= (mod (* 500 x341) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x180) (= x116 x249) x232) x232) x119) (=> (and (not x232) (and x554 (= (not x232) x554) (= x492 (* x335 500)) (= x494 (= x341 x492)))) (and (=> (and (and x41 (= x66 (* 500 x539)) (= (not x494) x41) (= x121 (= x66 x335))) (not x494)) (and (=> x121 x478) (=> (and (and (= (* x341 500) x410) (= x433 (= x335 x410)) (= (not x121) x129) x129) (not x121)) (and (=> x433 x56) (=> (and (and (= (* x335 400) x351) x344 (= (= x351 x539) x189) (= (not x433) x344)) (not x433)) (and (=> (and x189 (and (= x566 x370) (= x249 x116) x189 (= x370 (mod (* 400 x341) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x119) (=> (and (not x189) (and x455 (= x20 (= x341 x497)) (= x497 (* x335 400)) (= (not x189) x455))) (and (=> (and (and (= x488 (not x20)) x488 (= (* 400 x539) x317) (= (= x317 x335) x214)) (not x20)) (and (=> (and (not x214) (and (= (= x199 x335) x354) (= (* 400 x341) x199) (= x104 (not x214)) x104)) (and (=> x354 x348) (=> (and (not x354) (and (= x449 false) (= x261 (not x354)) (= x449 x249) (= x21 0) (= x566 x21) x261)) x119))) (=> x214 x46))) (=> (and (and (= x118 (mod (* x539 400) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x20 (= x566 x118) (= x116 x249)) x20) x119))))))))) (=> (and x494 (and (= x116 x249) x494 (= (mod (* 500 x539) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x579) (= x579 x566))) x119))))))) (=> x75 x218))) (=> (and (and (= x566 x430) (= x430 (mod (* x539 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x377 (= x249 x116)) x377) x119))) (=> (and x476 (and x476 (= x182 (mod (* x341 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x249 x116) (= x182 x566))) x119))))) (=> x149 x257))) (=> (and (and (= x116 x249) (= (mod (* x539 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x429) x135 (= x566 x429)) x135) x119))))) (=> x208 x112))))) (=> (and x263 (and (= x250 x566) x263 (= x116 x249) (= (mod (* 2 x539) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x250))) x119))) (=> (and (and (= x136 x566) (= x116 x249) (= (mod (* 2 x341) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x136) x134) x134) x119))))))))) x90))
(assert (= (and x17 (not x334)) x337))
(assert (= x81 (and x420 x178)))
(assert (= (and x92 x357) x360))
(assert (x256 x388))
(assert (= x353 (and x330 (not x28))))
(assert (x256 x34))
(assert (= (and x353 x26) x247))
(assert (= (=> (and (and x208 (= x241 2) (= false x109)) (and (= x249 x116) (= x299 x566) (= (div x539 2) x299))) x119) x112))
(assert (= (and x221 x271) x62))
(assert (x256 x421))
(assert (x256 x212))
(assert (x256 x105))
(assert (x256 x369))
(assert (= x520 (and x22 x526)))
(assert (= (and (not x67) x30) x113))
(assert (= (and x496 (not x354)) x482))
(assert (= x251 (and x390 x544)))
(assert (x256 x321))
(assert (x256 x93))
(assert (x256 x49))
(assert (= (=> (and (and (= x236 3) x73 (= false x215)) (and (= x378 x549) (= x352 x302) (= x549 (div x361 3)))) x90) x59))
(assert (x256 x424))
(assert (= x389 (and x334 x17)))
(assert (= (and x523 x546) x55))
(assert (x256 x191))
(assert (= (=> (and (= x54 x501) (= x254 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x376 0) (= x276 x362) (<= 0 x518) (= x518 (x462 x530)) (= x97 (+ x40 x503)) (= x99 (= x3 0)) (= x243 (not (= x570 0))) (= x532 x3) (= x441 (* x37 x3)) (= (x65 (+ x276 x501)) x460) x502 (= 2685885107 x437) (< 0 x530) (= x503 x384) (not (= 149895259 x437)) (= x72 x54) (= x489 x570) (= x37 x54) (<= x530 1461501637330902918203684832716283019655932542975) x219 (= x442 (= x37 0)) (not (= 1245370514 x437)) (= x376 (x431 x530)) (= x384 x362) (= x38 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x441)) (= x219 (< 0 (x431 x530))) (= (<= x97 115792089237316195423570985008687907853269984665640564039457584007913129639935) x502) (= x40 x72) (= x574 (and x243 x38)) (= x538 (or x442 x99))) (and (=> (and (and (= 0 x409) x538 (= x409 x114) (= x393 x574)) x538) x175) (=> (and (not x538) (and (= x366 (not x538)) x366 (= (= x3 x570) x132))) (and (=> (and (not x132) (and (= (not x132) x127) (= x403 (= x37 x570)) x127)) (and (=> (and x403 (and (= x114 x3) (= x393 x574) x403)) x175) (=> (and (and x406 (= x47 (= x3 x210)) (= (* 2 x570) x210) (= (not x403) x406)) (not x403)) (and (=> (and x47 (and x47 (= x393 x574) (= (mod (* x37 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x328) (= x114 x328))) x175) (=> (and (and (= x416 (= x37 x148)) (= (* 2 x570) x148) (= (not x47) x396) x396) (not x47)) (and (=> (and (and (= x272 (not x416)) x272 (= x440 (= x570 x324)) (= (* x3 2) x324)) (not x416)) (and (=> (and (and (= (* x37 2) x392) x14 (= x399 (= x392 x570)) (= (not x440) x14)) (not x440)) (and (=> x399 x542) (=> (and (not x399) (and x89 (= (= x493 x3) x147) (= (not x399) x89) (= x493 (* x570 3)))) (and (=> (and (not x147) (and (= x29 (= x58 x37)) x154 (= x154 (not x147)) (= x58 (* x570 3)))) (and (=> (and x29 (and (= x393 x574) x29 (= x181 (mod (* 3 x3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x114 x181))) x175) (=> (and (not x29) (and (= x464 (* x3 3)) x244 (= x244 (not x29)) (= x411 (= x464 x570)))) (and (=> (and (and x184 (= (not x411) x184) (= x534 (* x37 3)) (= x380 (= x570 x534))) (not x411)) (and (=> x380 x111) (=> (and (not x380) (and (= x285 (= x3 x296)) x398 (= (* x570 10) x296) (= (not x380) x398))) (and (=> (and (and x374 (= (* 10 x570) x332) (= x374 (not x285)) (= (= x37 x332) x27)) (not x285)) (and (=> (and (not x27) (and x292 (= (= x570 x573) x274) (= x573 (* x3 10)) (= (not x27) x292))) (and (=> (and (not x274) (and x86 (= (not x274) x86) (= (= x570 x95) x513) (= (* 10 x37) x95))) (and (=> (and (not x513) (and (= x577 (* x570 500)) x278 (= x60 (= x3 x577)) (= (not x513) x278))) (and (=> (and x60 (and (= x114 x315) (= x315 (mod (* 500 x37) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x60 (= x393 x574))) x175) (=> (and (not x60) (and (= x185 (not x60)) (= (* 500 x570) x107) (= x504 (= x107 x37)) x185)) (and (=> (and (not x504) (and x564 (= (= x570 x576) x295) (= (* x3 500) x576) (= x564 (not x504)))) (and (=> (and (not x295) (and (= x174 (= x570 x313)) (= (not x295) x470) (= (* x37 500) x313) x470)) (and (=> (and (and x336 (= (not x174) x336) (= x505 (= x3 x269)) (= (* 400 x570) x269)) (not x174)) (and (=> (and (and x198 (= x198 (not x505)) (= (= x37 x382) x325) (= x382 (* 400 x570))) (not x505)) (and (=> (and (not x325) (and (= x262 (= x570 x498)) x125 (= x498 (* x3 400)) (= x125 (not x325)))) (and (=> (and (not x262) (and (= x427 (not x262)) x427 (= x311 (= x137 x570)) (= x137 (* 400 x37)))) (and (=> (and (and (= (not x311) x289) (= x393 x495) (= x495 false) x289 (= 0 x234) (= x234 x114)) (not x311)) x175) (=> x311 x484))) (=> x262 x265))) (=> (and (and (= x94 (mod (* x3 400) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x325 (= x94 x114) (= x393 x574)) x325) x175))) (=> (and x505 (and (= x200 x114) (= x393 x574) (= x200 (mod (* 400 x37) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x505)) x175))) (=> x174 x522))) (=> x295 x264))) (=> (and (and (= x574 x393) x504 (= (mod (* 500 x3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x491) (= x491 x114)) x504) x175))))) (=> x513 x188))) (=> x274 x176))) (=> (and x27 (and (= x32 x114) (= x574 x393) x27 (= (mod (* 10 x3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x32))) x175))) (=> (and x285 (and (= x114 x426) x285 (= (mod (* x37 10) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x426) (= x393 x574))) x175))))) (=> x411 x146))))) (=> (and x147 (and x147 (= (mod (* x37 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x170) (= x393 x574) (= x114 x170))) x175))))) (=> x440 x432))) (=> (and x416 (and (= x574 x393) x416 (= x50 (mod (* 2 x3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x50 x114))) x175))))))) (=> (and (and x132 (= x37 x114) (= x393 x574)) x132) x175))))) x151))
(assert (x256 x16))
(assert (x256 x181))
(assert (x256 x6))
(assert (= (and x92 (not x357)) x560))
(assert (x256 x549))
(assert (= x407 (and (not x134) x211)))
(assert (x256 x110))
(assert (x256 x570))
(assert (= (and (not x214) x511) x496))
(assert (= (and x354 x496) x222))
(assert (= (and x358 x538) x385))
(assert (x256 x87))
(assert (= (and (not x73) x171) x117))
(assert (= x43 (and x499 (not x29))))
(assert (x256 x472))
(assert (= x561 (and x8 x121)))
(assert (x256 x40))
(assert (x256 x254))
(assert (= x521 (and x536 (not x419))))
(assert (= (and x380 x461) x152))
(assert (= x69 (and x141 x47)))
(assert (x256 x487))
(assert (x256 x74))
(assert (= (and (not x307) x117) x123))
(assert (x256 x301))
(assert (= (and (not x22) x526) x171))
(assert (= x143 (and x412 x174)))
(assert (= (and x560 (not x466)) x526))
(assert (x256 x182))
(assert (= (and x461 (not x380)) x126))
(assert (x256 x555))
(assert (x256 x368))
(assert (x256 x5))
(assert (= x13 (or x483 x578 x4 x467 x82 x216 x389 x381 x78 x360 x516 x81 x55 x401 x329 x44 x36 x571 x247 x520 x79 x251 x68 x395)))
(assert (x256 x491))
(assert (x256 x531))
(assert (x256 x326))
(assert (= x195 (and x27 x425)))
(assert (x256 x266))
(assert (= (and x433 x367) x45))
(assert (= (and x159 (not x120)) x17))
(assert (x256 x503))
(assert (= x77 (and (not x149) x558)))
(assert (= (and x407 x263) x258))
(assert (x256 x409))
(assert (= x183 (and x505 x340)))
(assert (x524 x530))
(assert (= (and x417 x155) x78))
(assert (x256 x122))
(assert (x256 x54))
(assert (x256 x255))
(assert (= (and (not x545) x338) x221))
(assert (= x446 (and (not x325) x556)))
(assert (= x63 (and (not x416) x83)))
(assert (= (and (not x465) x349) x309))
(assert (x256 x508))
(assert (= x68 (and x201 x337)))
(assert (x256 x489))
(assert (= x512 (and x425 (not x27))))
(assert (x256 x115))
(assert (x256 x234))
(assert (= x418 (and x349 x465)))
(assert (= (and x567 (not x48)) x390))
(assert (x256 x136))
(assert (x256 x236))
(assert (= (or x303 x186 x222 x88 x418 x314 x1 x45 x164 x552 x457 x422 x509 x204 x456 x345 x561 x404 x258 x482 x229 x293 x62 x350) x157))
(assert (= (and (not x504) x572) x386))
(assert (= (and x117 x307) x329))
(assert (x256 x527))
(assert (x256 x510))
(assert (= x186 (and x19 x20)))
(assert (= (and x311 x52) x130))
(assert (x256 x460))
(assert (= x88 (and x494 x387)))
(assert (x256 x400))
(assert (= x8 (and (not x494) x387)))
(assert (= (=> (and (and (= x356 400) x354 (= false x438)) (and (= x179 (div x539 400)) (= x179 x566) (= x116 x249))) x119) x348))
(assert (= (and x13 x445) x457))
(assert (= x211 (and x221 (not x271))))
(assert (x256 x384))
(assert (= (=> (and (and (= x352 x302) (= (div x361 2) x421) (= x378 x421)) (and x544 (= 2 x301) (= false x268))) x90) x35))
(assert (x256 x94))
(assert (x256 x200))
(assert (x256 x280))
(assert (x256 x378))
(assert (= (and x386 (not x295)) x412))
(assert (= x145 (and x52 (not x311))))
(assert (= (and x155 (not x417)) x536))
(assert (= x391 (and x295 x386)))
(assert (= (=> (and (and (= x566 x64) (= x64 (div x341 500)) (= x249 x116)) (and x121 (= x227 false) (= 500 x375))) x119) x478))
(assert (= (=> (and (and (= x393 x574) (= x231 (div x3 2)) (= x114 x231)) (and (= false x103) (= 2 x527) x399)) x175) x542))
(assert (= (and (not x135) x309) x558))
(assert (= x30 (and x39 (not x75))))
(assert (x256 x579))
(assert (x256 x233))
(assert (= (and (not x208) x33) x349))
(assert (= x155 (and x123 (not x557))))
(assert (x256 x371))
(assert (= (=> (and (and (= x566 x510) (= x116 x249) (= (div x539 10) x510)) (and x67 (= x475 10) (= x207 false))) x119) x541))
(assert (x256 x196))
(assert (= (and x33 x208) x164))
(assert (x256 x169))
(assert (= (and x75 x39) x422))
(assert (= x556 (and x340 (not x505))))
(assert (x256 x463))
(assert (= (and x416 x83) x529))
(assert (= (and x113 x232) x293))
(assert (x256 x57))
(assert (= (=> (and (and (= x566 x479) x249) (and (= x71 x161) (= (= x161 x206) x235) (= x326 x555) (= x71 x479) (= (+ x326 x472) x206) (= x472 x115))) x235) x119))
(assert (x256 x450))
(assert (x256 x356))
(assert (= (=> (and (and x174 (= x471 500) (= x519 false)) (and (= x114 x525) (= x525 (div x3 500)) (= x393 x574))) x175) x522))
(assert (= (=> (and (and (= 3 x368) x239 (= false x193)) (and (= x196 (div x539 3)) (= x196 x566) (= x249 x116))) x119) x284))
(assert (x256 x180))
(assert (x256 x480))
(assert (= (and x312 x85) x4))
(assert (= x423 (=> (and (and (= false x270) x417 (= x371 10)) (and (= x105 (div x280 10)) (= x352 x302) (= x105 x378))) x90)))
(assert (= x237 (and (not x535) x559)))
(assert (= (and (not x476) x533) x275))
(assert (= (=> (and (and (= x363 false) x380 (= 3 x12)) (and (= x393 x574) (= (div x3 3) x110) (= x110 x114))) x175) x111))
(assert (= x456 (and x377 x275)))
(assert (x256 x12))
(assert (x256 x179))
(assert (x256 x70))
(assert (= x401 (and x171 x73)))
(assert (= x432 (=> (and (and (= false x514) (= 2 x191) x440) (and (= x393 x574) (= x187 x114) (= (div x37 2) x187))) x175)))
(assert (= (and x285 x126) x223))
(assert (x256 x532))
(assert (= x509 (and x149 x558)))
(assert (= x444 (and x556 x325)))
(assert (x256 x553))
(assert (= x499 (and (not x147) x308)))
(assert (x256 x106))
(assert (x256 x260))
(assert (x256 x469))
(assert (= x383 (=> (and (and (= x249 x116) (= x277 x566) (= (div x341 2) x277)) (and (= x160 false) x142 (= x169 2))) x119)))
(assert (= (and (not x411) x43) x461))
(assert (= x19 (and x537 (not x189))))
(assert (x256 x64))
(assert (= x36 (and x559 x535)))
(assert (= x358 true))
(assert (= x85 (and x521 (not x18))))
(assert (= x159 (and (not x253) x373)))
(assert (= (and x273 (not x132)) x415))
(assert (x256 x217))
(assert (= x511 (and x19 (not x20))))
(assert (= (and (not x274) x512) x291))
(assert (x256 x335))
(assert (= (and x77 x239) x229))
(assert (x256 x161))
(assert (= (=> (and (and (= x230 false) (= 500 x87) x420) (and (= x352 x302) (= x436 x378) (= x436 (div x361 500)))) x90) x245))
(assert (x256 x530))
(assert (x256 x267))
(assert (x256 x361))
(assert (x256 x458))
(assert (x256 x25))
(assert (= (and x291 x513) x434))
(assert (x256 x428))
(assert (= (and (not x538) x358) x273))
(assert (x256 x485))
(assert (x256 x37))
(assert (= x578 (and x237 x548)))
(assert (x256 x339))
(assert (= x405 (and x85 (not x312))))
(assert (= x56 (=> (and (and (= x106 (div x539 500)) (= x566 x106) (= x249 x116)) (and (= 500 x450) x433 (= x448 false))) x119)))
(assert (x256 x213))
(assert (= x395 (and x120 x159)))
(assert (= (and x178 (not x420)) x559))
(assert (x256 x331))
(assert (x256 x376))
(assert (= (=> (and (and (= x6 (div x341 400)) (= x6 x566) (= x116 x249)) (and x214 (= x194 false) (= 400 x177))) x119) x46))
(assert (x256 x246))
(check-sat)
(exit)