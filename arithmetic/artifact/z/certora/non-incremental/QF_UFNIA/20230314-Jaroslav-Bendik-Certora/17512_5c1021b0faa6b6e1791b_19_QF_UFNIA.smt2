(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x108 () Int)
(declare-fun x251 () Int)
(declare-fun x125 () Int)
(declare-fun x323 () Int)
(declare-fun x388 () Int)
(declare-fun x311 () Int)
(declare-fun x43 () Bool)
(declare-fun x316 () Int)
(declare-fun x257 () Bool)
(declare-fun x404 () Int)
(declare-fun x53 () Int)
(declare-fun x361 () Int)
(declare-fun x229 () Bool)
(declare-fun x139 () Int)
(declare-fun x48 () Int)
(declare-fun x105 () Int)
(declare-fun x101 () Int)
(declare-fun x397 (Int) Int)
(declare-fun x158 () Int)
(declare-fun x394 () Bool)
(declare-fun x353 () Int)
(declare-fun x216 () Int)
(declare-fun x359 () Int)
(declare-fun x349 () Bool)
(declare-fun x425 () Int)
(declare-fun x196 () Int)
(declare-fun x17 () Int)
(declare-fun x337 () Int)
(declare-fun x50 () Int)
(declare-fun x247 () Int)
(declare-fun x95 () Bool)
(declare-fun x409 () Int)
(declare-fun x276 () Int)
(declare-fun x307 () Bool)
(declare-fun x155 () Int)
(declare-fun x358 () Int)
(declare-fun x405 () Bool)
(declare-fun x294 () Int)
(declare-fun x343 () Int)
(declare-fun x67 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x403 () Int)
(declare-fun x220 () Int)
(declare-fun x42 () Int)
(declare-fun x141 () Bool)
(declare-fun x424 () Int)
(declare-fun x418 () Bool)
(declare-fun x390 () Bool)
(declare-fun x147 (Int) Int)
(declare-fun x8 () Int)
(declare-fun x9 () Int)
(declare-fun x58 () Int)
(declare-fun x187 () Bool)
(declare-fun x104 () Int)
(declare-fun x51 () Int)
(declare-fun x231 () Int)
(declare-fun x278 () Int)
(declare-fun x345 () Int)
(declare-fun x170 () Int)
(declare-fun x365 () Int)
(declare-fun x20 () Int)
(declare-fun x392 () Bool)
(declare-fun x265 () Bool)
(declare-fun x124 () Bool)
(declare-fun x366 () Bool)
(declare-fun x378 () Bool)
(declare-fun x44 () Int)
(declare-fun x341 () Bool)
(declare-fun x18 () Int)
(declare-fun x129 () Int)
(declare-fun x285 () Int)
(declare-fun x396 () Int)
(declare-fun x287 () Int)
(declare-fun x164 () Int)
(declare-fun x371 () Int)
(declare-fun x297 () Int)
(declare-fun x115 () Bool)
(declare-fun x315 () Int)
(declare-fun x89 () Bool)
(declare-fun x131 () Int)
(declare-fun x150 () Int)
(declare-fun x304 () Bool)
(declare-fun x377 () Int)
(declare-fun x218 () Int)
(declare-fun x178 () Int)
(declare-fun x292 () Int)
(declare-fun x238 () Int)
(declare-fun x360 () Int)
(declare-fun x121 () Bool)
(declare-fun x255 (Int) Int)
(declare-fun x249 () Int)
(declare-fun x99 () Int)
(declare-fun x293 () Int)
(declare-fun x199 () Int)
(declare-fun x176 () Int)
(declare-fun x3 () Int)
(declare-fun x213 () Bool)
(declare-fun x190 () Int)
(declare-fun x180 () Bool)
(declare-fun x116 () Int)
(declare-fun x201 () Int)
(declare-fun x70 () Int)
(declare-fun x380 () Int)
(declare-fun x107 () Int)
(declare-fun x338 () Int)
(declare-fun x71 () Int)
(declare-fun x274 () Int)
(declare-fun x328 () Bool)
(declare-fun x182 () Bool)
(declare-fun x153 () Int)
(declare-fun x407 () Bool)
(declare-fun x39 () Int)
(declare-fun x119 () Int)
(declare-fun x209 () Int)
(declare-fun x281 () Bool)
(declare-fun x181 () Int)
(declare-fun x408 () Int)
(declare-fun x372 () Int)
(declare-fun x253 () Bool)
(declare-fun x12 () Int)
(declare-fun x310 () Int)
(declare-fun x322 () Int)
(declare-fun x19 () Int)
(declare-fun x117 () Bool)
(declare-fun x27 () Int)
(declare-fun x21 () Int)
(declare-fun x324 () Int)
(declare-fun x134 () Int)
(declare-fun x106 () Int)
(declare-fun x118 () Int)
(declare-fun x194 () Int)
(declare-fun x90 () Int)
(declare-fun x290 () Int)
(declare-fun x140 () Int)
(declare-fun x232 () Int)
(declare-fun x156 () Int)
(declare-fun x197 () Bool)
(declare-fun x146 () Int)
(declare-fun x319 () Bool)
(declare-fun x280 () Int)
(declare-fun x367 () Bool)
(declare-fun x346 () Int)
(declare-fun x65 () Int)
(declare-fun x254 () Bool)
(declare-fun x183 () Int)
(declare-fun x262 () Int)
(declare-fun x239 () Bool)
(declare-fun x373 () Bool)
(declare-fun x83 () Int)
(declare-fun x160 () Int)
(declare-fun x2 () Int)
(declare-fun x165 () Int)
(declare-fun x173 () Int)
(declare-fun x137 () Bool)
(declare-fun x329 () Int)
(declare-fun x219 () Bool)
(declare-fun x28 () Bool)
(declare-fun x356 () Int)
(declare-fun x325 () Int)
(declare-fun x225 () Bool)
(declare-fun x416 () Bool)
(declare-fun x163 () Int)
(declare-fun x72 () Int)
(declare-fun x98 () Int)
(declare-fun x267 () Int)
(declare-fun x230 () Int)
(declare-fun x13 () Int)
(declare-fun x184 () Int)
(declare-fun x172 () Bool)
(declare-fun x191 () Int)
(declare-fun x261 () Int)
(declare-fun x351 () Int)
(declare-fun x330 () Int)
(declare-fun x81 () Bool)
(declare-fun x217 (Int) Int)
(declare-fun x252 () Int)
(declare-fun x59 () Int)
(declare-fun x47 () Bool)
(declare-fun x22 () Int)
(declare-fun x29 () Int)
(declare-fun x57 () Int)
(declare-fun x78 () Bool)
(declare-fun x227 () Int)
(declare-fun x300 () Bool)
(declare-fun x135 () Int)
(declare-fun x406 () Int)
(declare-fun x244 () Bool)
(declare-fun x100 () Int)
(declare-fun x270 () Bool)
(declare-fun x421 () Bool)
(declare-fun x327 () Int)
(declare-fun x228 () Int)
(declare-fun x211 () Int)
(declare-fun x62 () Int)
(declare-fun x33 () Int)
(declare-fun x88 () Int)
(declare-fun x282 () Int)
(declare-fun x186 () Int)
(declare-fun x279 () Int)
(declare-fun x245 () Bool)
(declare-fun x308 (Int Int) Int)
(declare-fun x234 () Int)
(declare-fun x111 () Int)
(declare-fun x97 (Int) Int)
(declare-fun x268 () Int)
(declare-fun x355 () Int)
(declare-fun x354 () Int)
(declare-fun x277 () Int)
(declare-fun x152 () Int)
(declare-fun x5 () Int)
(declare-fun x384 () Bool)
(declare-fun x102 () Bool)
(declare-fun x127 () Bool)
(declare-fun x400 () Int)
(declare-fun x266 () Int)
(declare-fun x419 () Bool)
(declare-fun x348 () Int)
(declare-fun x286 () Int)
(declare-fun x110 () Bool)
(declare-fun x312 () Int)
(declare-fun x272 () Int)
(declare-fun x288 () Int)
(declare-fun x162 () Int)
(declare-fun x410 () Int)
(declare-fun x303 (Int) Int)
(declare-fun x185 () Int)
(declare-fun x273 () Int)
(declare-fun x305 () Int)
(declare-fun x103 () Int)
(declare-fun x301 () Int)
(declare-fun x364 () Bool)
(declare-fun x32 () Int)
(declare-fun x120 () Int)
(declare-fun x233 (Int Int) Int)
(declare-fun x374 () Int)
(declare-fun x25 () Int)
(declare-fun x10 () Int)
(declare-fun x350 () Int)
(declare-fun x73 () Bool)
(declare-fun x93 () Int)
(declare-fun x382 () Bool)
(declare-fun x391 () Int)
(declare-fun x208 () Bool)
(declare-fun x395 () Int)
(declare-fun x49 () Bool)
(declare-fun x149 () Int)
(declare-fun x385 () Int)
(declare-fun x318 (Int) Int)
(declare-fun x223 () Int)
(declare-fun x38 () Int)
(declare-fun x398 () Int)
(declare-fun x344 () Int)
(declare-fun x61 () Int)
(declare-fun x275 () Int)
(declare-fun x375 () Bool)
(declare-fun x175 () Int)
(declare-fun x144 () Int)
(declare-fun x248 () Int)
(declare-fun x41 () Int)
(declare-fun x235 () Bool)
(declare-fun x130 () Int)
(declare-fun x138 () Int)
(declare-fun x240 () Bool)
(declare-fun x313 () Int)
(declare-fun x148 () Bool)
(declare-fun x283 () Int)
(declare-fun x157 () Int)
(declare-fun x203 () Int)
(declare-fun x133 (Int) Int)
(declare-fun x171 () Int)
(declare-fun x342 () Int)
(declare-fun x37 () Int)
(declare-fun x269 () Int)
(declare-fun x302 () Int)
(declare-fun x264 () Int)
(declare-fun x241 () Int)
(declare-fun x332 () Int)
(declare-fun x64 () Int)
(declare-fun x52 () Int)
(declare-fun x340 (Int Int) Int)
(declare-fun x31 () Int)
(declare-fun x423 () Int)
(declare-fun x69 () Int)
(declare-fun x40 () Int)
(declare-fun x188 () Int)
(declare-fun x112 (Int) Int)
(declare-fun x63 () Int)
(declare-fun x389 () Int)
(declare-fun x195 () Int)
(declare-fun x415 () Bool)
(declare-fun x299 () Bool)
(declare-fun x296 () Bool)
(declare-fun x167 () Bool)
(declare-fun x91 () Int)
(declare-fun x169 () Bool)
(declare-fun x291 () Int)
(declare-fun x142 () Int)
(declare-fun x126 () Int)
(declare-fun x198 () Int)
(declare-fun x46 () Bool)
(declare-fun x34 () Int)
(declare-fun x309 () Int)
(declare-fun x179 () Int)
(declare-fun x236 () Int)
(declare-fun x45 () Int)
(declare-fun x11 () Int)
(declare-fun x26 () Int)
(declare-fun x420 () Int)
(declare-fun x75 () Bool)
(declare-fun x339 () Int)
(declare-fun x393 () Int)
(declare-fun x85 () Bool)
(declare-fun x295 (Int) Int)
(declare-fun x128 () Int)
(declare-fun x368 () Int)
(declare-fun x402 () Int)
(declare-fun x136 () Int)
(declare-fun x222 () Int)
(declare-fun x202 () Int)
(declare-fun x383 () Int)
(declare-fun x336 () Int)
(declare-fun x123 () Bool)
(declare-fun x154 () Int)
(declare-fun x207 () Bool)
(declare-fun x193 () Bool)
(declare-fun x260 () Int)
(declare-fun x317 () Int)
(declare-fun x204 () Bool)
(declare-fun x412 () Int)
(declare-fun x426 () Bool)
(declare-fun x68 () Int)
(declare-fun x87 () Int)
(declare-fun x263 () Int)
(declare-fun x226 () Int)
(declare-fun x413 () Int)
(declare-fun x256 () Int)
(declare-fun x215 (Int) Int)
(declare-fun x363 () Int)
(declare-fun x246 () Int)
(declare-fun x24 () Int)
(declare-fun x7 () Int)
(declare-fun x331 () Int)
(declare-fun x212 () Int)
(declare-fun x4 () Int)
(declare-fun x376 () Int)
(declare-fun x224 () Bool)
(declare-fun x174 () Int)
(declare-fun x132 () Int)
(declare-fun x145 () Int)
(declare-fun x94 () Bool)
(declare-fun x289 () Int)
(declare-fun x23 () Int)
(declare-fun x189 () Int)
(declare-fun x399 () Bool)
(declare-fun x214 () Int)
(declare-fun x177 () Bool)
(declare-fun x259 () Bool)
(declare-fun x243 () Bool)
(declare-fun x92 () Int)
(declare-fun x159 () Int)
(declare-fun x369 () Int)
(declare-fun x333 () Int)
(define-fun x284 ((x387 Int)) Int (ite (and (>= x387 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x387)) x387 (- x387 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x161 ((x387 Int)) Int (ite (and (> 0 x387) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x387)) (+ x387 115792089237316195423570985008687907853269984665640564039457584007913129639936) x387))
(define-fun x54 ((x151 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x151) (>= x151 0)))
(define-fun x321 ((x151 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x151) (<= 0 x151)))
(define-fun x36 ((x151 Int)) Bool (and (= (x340 x151 115792089237316195423570985008687907853269984665640564039457584007913129639935) x151) (= (x340 115792089237316195423570985008687907853269984665640564039457584007913129639935 x151) x151)))
(define-fun x55 ((x151 Int)) Bool (and (= 0 (x340 x151 0)) (= (x340 0 x151) 0)))
(define-fun x206 ((x151 Int)) Bool (= x151 (x340 x151 x151)))
(define-fun x379 ((x151 Int)) Bool (and (x36 x151) (x206 x151) (x55 x151)))
(define-fun x76 ((x151 Int) (x86 Int)) Bool (= (x340 x86 x151) (x340 x151 x86)))
(define-fun x298 ((x151 Int) (x86 Int)) Bool (and (>= (x340 x151 x86) 0) (=> (<= 0 x86) (>= x86 (x340 x151 x86))) (=> (>= x151 0) (<= (x340 x151 x86) x151))))
(define-fun x114 ((x151 Int) (x86 Int)) Bool (and (x298 x151 x86) (x76 x151 x86)))
(define-fun x237 ((x151 Int)) Bool (= (x340 x151 1461501637330902918203684832716283019655932542975) (mod x151 1461501637330902918203684832716283019655932542976)))
(define-fun x56 ((x151 Int)) Bool (and (x114 x151 1461501637330902918203684832716283019655932542975) (x237 x151)))
(define-fun x200 ((x414 Int)) Int (ite (= 128 x414) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x295 x414)))
(define-fun x326 ((x414 Int)) Int (ite (= 132 x414) x267 (x200 x414)))
(define-fun x205 ((x414 Int)) Int (ite (= 128 x414) x11 (x326 x414)))
(define-fun x250 ((x414 Int)) Int (ite (= x414 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x255 x414)))
(define-fun x320 ((x414 Int)) Int (ite (= x414 132) x267 (x250 x414)))
(define-fun x84 ((x414 Int)) Int (ite (= 128 x414) x11 (x320 x414)))
(define-fun x109 ((x414 Int)) Int (ite (= x99 x414) 1000000000000000000000000000 (x303 x414)))
(define-fun x79 ((x414 Int)) Int (ite (= x191 x414) x130 (x318 x414)))
(define-fun x143 ((x414 Int)) Int (ite (= 320 x414) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x217 x414)))
(define-fun x306 ((x414 Int)) Int (ite (= x414 324) x37 (x143 x414)))
(define-fun x113 ((x414 Int)) Int (ite (= 356 x414) x396 (x306 x414)))
(define-fun x1 ((x414 Int)) Int (ite (= x414 388) x132 (x113 x414)))
(define-fun x66 ((x414 Int)) Int (ite x426 (x217 x414) (x1 x414)))
(define-fun x168 ((x414 Int)) Int (ite (= 320 x414) x164 (x66 x414)))
(define-fun x314 ((x414 Int)) Int (ite (= x414 320) x164 (x168 x414)))
(define-fun x242 ((x414 Int)) Int (ite (= x414 352) x413 (x314 x414)))
(define-fun x80 ((x414 Int)) Int (ite (= 384 x414) 1000000000000000000000000000 (x242 x414)))
(define-fun x362 ((x414 Int)) Int (ite (= x414 320) (ite x235 1 0) (x80 x414)))
(define-fun x370 ((x414 Int)) Int (ite (= x156 x414) 1000000000000000000000000000 (x109 x414)))
(define-fun x96 ((x414 Int)) Int (ite (= x424 x414) x196 (x79 x414)))
(define-fun x347 ((x414 Int)) Int (ite (= x414 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x397 x414)))
(define-fun x74 ((x414 Int)) Int (ite (= 324 x414) x63 (x347 x414)))
(define-fun x15 ((x414 Int)) Int (ite (= 356 x414) x62 (x74 x414)))
(define-fun x334 ((x414 Int)) Int (ite (= x414 388) x61 (x15 x414)))
(define-fun x335 ((x414 Int)) Int (ite x46 (x397 x414) (x334 x414)))
(define-fun x411 ((x414 Int)) Int (ite (= 320 x414) x268 (x335 x414)))
(define-fun x14 ((x414 Int)) Int (ite (= x414 320) x268 (x411 x414)))
(define-fun x16 ((x414 Int)) Int (ite (= x414 352) x170 (x14 x414)))
(define-fun x381 ((x414 Int)) Int (ite (= 384 x414) 1000000000000000000000000000 (x16 x414)))
(define-fun x6 ((x414 Int)) Int (ite (= 320 x414) (ite x304 1 0) (x381 x414)))
(define-fun x221 ((x414 Int)) Int (ite (= x414 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x97 x414)))
(define-fun x166 ((x414 Int)) Int (ite (= x414 132) x267 (x221 x414)))
(define-fun x60 ((x414 Int)) Int (ite (= x414 128) x11 (x166 x414)))
(define-fun x122 ((x414 Int)) Int (ite (= x309 x414) x279 (x96 x414)))
(define-fun x271 ((x414 Int)) Int (ite (= x414 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x147 x414)))
(define-fun x422 ((x414 Int)) Int (ite (= x414 324) x31 (x271 x414)))
(define-fun x401 ((x414 Int)) Int (ite (= 356 x414) x12 (x422 x414)))
(define-fun x192 ((x414 Int)) Int (ite (= 388 x414) x165 (x401 x414)))
(define-fun x386 ((x414 Int)) Int (ite x229 (x147 x414) (x192 x414)))
(define-fun x210 ((x414 Int)) Int (ite (= 320 x414) x247 (x386 x414)))
(define-fun x258 ((x414 Int)) Int (ite (= 320 x414) x247 (x210 x414)))
(define-fun x82 ((x414 Int)) Int (ite (= x414 352) x289 (x258 x414)))
(define-fun x417 ((x414 Int)) Int (ite (= 384 x414) 1000000000000000000000000000 (x82 x414)))
(define-fun x77 ((x414 Int)) Int (ite (= 320 x414) (ite x123 1 0) (x417 x414)))
(define-fun x352 ((x414 Int)) Int (ite (= 128 x414) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x215 x414)))
(define-fun x357 ((x414 Int)) Int (ite (= 132 x414) x267 (x352 x414)))
(define-fun x35 ((x414 Int)) Int (ite (= x414 128) x11 (x357 x414)))
(assert (x321 x383))
(assert (not (= (x308 x329 52) 52)))
(assert (not (= (x308 x63 52) 340282366920938463463374607431768211456)))
(assert (x321 x302))
(assert (x321 x12))
(assert (x321 x293))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x308 x329 52))))
(assert (x56 x297))
(assert (=> (<= x218 10000) (not (= x218 (x308 x31 52)))))
(assert (x321 x107))
(assert (not (= (x308 x3 52) 1000000000000000000000000000)))
(assert (x321 x251))
(assert (x321 x175))
(assert (x321 x68))
(assert (x321 x142))
(assert (not (= (x308 x37 52) 1000000000000000000000000000)))
(assert (not (= (x308 x171 52) 115792089237316195423570985008687907853269984665640)))
(assert (not (= (x308 x3 52) 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (x321 x322))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x308 x31 52))))
(assert (=> (<= x336 10000) (not (= x336 (x308 x329 52)))))
(assert (x321 x285))
(assert (x321 x360))
(assert (x321 x361))
(assert (x321 x355))
(assert (not (= 3607235850 (x308 x336 52))))
(assert (x321 x380))
(assert (x321 x162))
(assert (=> (>= 10000 x3) (not (= (x308 x336 52) x3))))
(assert (x54 x218))
(assert (not (= (x308 x336 52) 1865579259)))
(assert (=> (<= x31 10000) (not (= (x308 x3 52) x31))))
(assert (x321 x263))
(assert (x321 x403))
(assert (x321 x325))
(assert (=> (<= x63 10000) (not (= x63 (x308 x336 52)))))
(assert (x321 x389))
(assert (x321 x396))
(assert (= x43 (and (not x169) x328)))
(assert (=> (<= x37 10000) (not (= x37 (x308 x3 52)))))
(assert (x321 x150))
(assert (not (= (x308 x3 52) 2113256763)))
(assert (x321 x154))
(assert (=> (<= x171 10000) (not (= x171 (x308 x31 52)))))
(assert (=> (= (x308 x37 52) (x308 x171 52)) (= x171 x37)))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x308 x336 52))))
(assert (x321 x92))
(assert (=> (<= x190 10000) (not (= (x308 x37 52) x190))))
(assert (x321 x48))
(assert (x321 x31))
(assert (x321 x372))
(assert (x321 x330))
(assert (x321 x10))
(assert (x321 x356))
(assert (x321 x413))
(assert (x321 x51))
(assert (x321 x176))
(assert (=> (= (x308 x37 52) (x308 x329 52)) (= x37 x329)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x308 x329 52))))
(assert (x321 x164))
(assert (x321 x201))
(assert (not (= (x308 x3 52) 115792089237316195423570985008687907853269984665640)))
(assert (x321 x171))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x308 x3 52))))
(assert (x321 x268))
(assert (=> (>= 10000 x31) (not (= (x308 x37 52) x31))))
(assert (not (= (x308 x336 52) 1461501637330902918203684832716283019655932542975)))
(assert (x321 x22))
(assert (x321 x398))
(assert (x321 x266))
(assert (x321 x232))
(assert (= x253 (or x46 x207)))
(assert (not (= 1865579259 (x308 x37 52))))
(assert (x321 x103))
(assert (=> (<= x3 10000) (not (= (x308 x63 52) x3))))
(assert (x321 x63))
(assert (=> (<= x65 10000) (not (= (x308 x329 52) x65))))
(assert (x321 x118))
(assert (x321 x69))
(assert (x321 x149))
(assert (not (= 500000000000000000000000000 (x308 x3 52))))
(assert (x54 x190))
(assert (not (= (x308 x336 52) 340282366920938463463374607431768211455)))
(assert (x321 x301))
(assert (x321 x104))
(assert (x321 x272))
(assert (=> (= (x308 x336 52) (x308 x3 52)) (= x336 x3)))
(assert (x321 x395))
(assert (= x229 (and x421 x253)))
(assert (= (and (not x421) x253) x240))
(assert (x321 x202))
(assert (x321 x199))
(assert (x321 x223))
(assert (=> (= (x308 x37 52) (x308 x336 52)) (= x37 x336)))
(assert (x321 x93))
(assert (x321 x236))
(assert (not (= 3607235850 (x308 x63 52))))
(assert (x321 x374))
(assert (x321 x278))
(assert (not (= 52 (x308 x31 52))))
(assert (=> (= (x308 x63 52) (x308 x37 52)) (= x37 x63)))
(assert (not (= 340282366920938463463374607431768211455 (x308 x63 52))))
(assert (=> (>= 10000 x31) (not (= (x308 x31 52) x31))))
(assert (x321 x331))
(assert (not (= (x308 x329 52) 3607235850)))
(assert (not (= (x308 x37 52) 115792089237316195423570985008687907853269984665640)))
(assert (x321 x305))
(assert (not (= 500000000000000000000000000 (x308 x31 52))))
(assert (x321 x410))
(assert (x321 x190))
(assert (x321 x20))
(assert (x321 x189))
(assert (x321 x44))
(assert (x321 x129))
(assert (=> (>= 10000 x336) (not (= (x308 x3 52) x336))))
(assert (x321 x173))
(assert (=> (>= 10000 x171) (not (= (x308 x336 52) x171))))
(assert (x321 x358))
(assert (=> (>= 10000 x218) (not (= (x308 x329 52) x218))))
(assert (= x73 (=> (and (and (= (x77 320) x227) (= x95 (= x322 0)) (= x294 x101) (= x289 x408) (= (+ x408 x101) x247) (< (+ x294 x289) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x123 x95)) (and (and (= x179 (ite x115 1 0)) (= x3 x266) (= x21 (mod (* x372 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 2113256763 x70) (= (x35 128) x361) (= (= 0 x361) x407) (= (x284 (+ 500000000000000000000000000 x21)) x38) (>= x372 0) (= (div x38 1000000000000000000000000000) x331) (= 1889567281 x70) (= (x67 x190) x330) (= x331 x184) (= x261 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x361)) (> 1461501637330902918203684832716283019655932542976 x267) (>= 340282366920938463463374607431768211455 x372) (not (= 1865579259 x70)) (not (> 1865579259 x70)) (< 0 x330) (= (x122 x159) x372) (< x372 340282366920938463463374607431768211456) (not (> 826074471 x70)) (<= x3 1461501637330902918203684832716283019655932542975) (= x204 (> x372 x261)) (>= 1461501637330902918203684832716283019655932542975 x267) (= x115 (or x117 x407)) (<= 0 x267) (= x159 (x308 x3 52)) (< 0 x179) (= (not x204) x117)) (and (= x259 (>= x144 x391)) (= (* x18 3) x50) (= 3 x360) (= x358 x391) (= (* 3 x287) x116) (= 3 x9) (= x124 (and x148 x259)) (= x337 x22) (= x184 x337) (= x18 x402) (= x291 x337) (= x276 (+ x116 x272)) (= x272 x358) (= x402 x287) (= (+ x22 x50) x144) (= x148 (>= x276 x291))))) x124)))
(assert (x321 x5))
(assert (not (= 1865579259 (x308 x329 52))))
(assert (not (= (x308 x171 52) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x321 x230))
(assert (= (and x169 x328) x426))
(assert (=> (>= 10000 x336) (not (= x336 (x308 x171 52)))))
(assert (x321 x234))
(assert (=> (<= x190 10000) (not (= (x308 x3 52) x190))))
(assert (x321 x9))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x308 x3 52))))
(assert (not (= (x308 x63 52) 1889567281)))
(assert (=> (= (x308 x329 52) (x308 x171 52)) (= x329 x171)))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x308 x63 52))))
(assert (x321 x203))
(assert (=> (<= x63 10000) (not (= (x308 x171 52) x63))))
(assert (=> (<= x65 10000) (not (= (x308 x171 52) x65))))
(assert (x321 x264))
(assert (= x11 1000000000000000000000000000))
(assert (x321 x25))
(assert (not (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x308 x329 52))))
(assert (not (= 52 (x308 x336 52))))
(assert (x321 x71))
(assert (not (= (x308 x63 52) 3018967357)))
(assert (x321 x409))
(assert (x54 x37))
(assert (not (= 3607235850 (x308 x37 52))))
(assert (=> (>= 10000 x218) (not (= (x308 x63 52) x218))))
(assert (x321 x288))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x308 x31 52))))
(assert (not (= (x308 x37 52) 1461501637330902918203684832716283019655932542975)))
(assert (x321 x283))
(assert (=> (<= x37 10000) (not (= x37 (x308 x171 52)))))
(assert (x321 x337))
(assert (=> (<= x31 10000) (not (= (x308 x63 52) x31))))
(assert (x321 x209))
(assert (x321 x294))
(assert (x321 x346))
(assert (x54 x329))
(assert (not (= (x308 x171 52) 3018967357)))
(assert (x321 x354))
(assert (x321 x218))
(assert (not (= (x308 x329 52) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 115792089237316195423570985008687907853269984665640 (x308 x336 52))))
(assert (x321 x393))
(assert (not (= (x308 x31 52) 340282366920938463463374607431768211455)))
(assert (x321 x4))
(assert (=> (= (x308 x171 52) (x308 x63 52)) (= x171 x63)))
(assert (=> (= (x308 x3 52) (x308 x63 52)) (= x3 x63)))
(assert (x321 x3))
(assert (x321 x345))
(assert (x321 x105))
(assert (=> (>= 10000 x171) (not (= (x308 x37 52) x171))))
(assert (=> (>= 10000 x65) (not (= (x308 x3 52) x65))))
(assert (x321 x227))
(assert (x321 x125))
(assert (x321 x53))
(assert (x321 x131))
(assert (not (= 1000000000000000000000000000 (x308 x336 52))))
(assert (x321 x252))
(assert (not (= (x308 x329 52) 1889567281)))
(assert (x321 x72))
(assert (x379 x297))
(assert (x321 x385))
(assert (x321 x65))
(assert (x321 x211))
(assert (not (= (x308 x31 52) 2113256763)))
(assert (x321 x214))
(assert (=> (>= 10000 x218) (not (= (x308 x336 52) x218))))
(assert (not (= 826074471 (x308 x336 52))))
(assert (x321 x269))
(assert (not (= 115792089237316195423570985008687907853269984665640 (x308 x329 52))))
(assert (=> (= (x308 x37 52) (x308 x31 52)) (= x37 x31)))
(assert (not (= (x308 x329 52) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x321 x157))
(assert (=> (= (x308 x3 52) (x308 x329 52)) (= x3 x329)))
(assert (not (= (x308 x3 52) 3018967357)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x308 x3 52))))
(assert (x321 x350))
(assert (not (= 1889567281 (x308 x3 52))))
(assert (=> (<= x3 10000) (not (= x3 (x308 x3 52)))))
(assert (not (= (x308 x329 52) 340282366920938463463374607431768211456)))
(assert (not (= (x308 x171 52) 500000000000000000000000000)))
(assert (x321 x228))
(assert (x321 x23))
(assert (x321 x145))
(assert (not (= (x308 x37 52) 52)))
(assert (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x308 x31 52))))
(assert (=> (= (x308 x329 52) (x308 x336 52)) (= x336 x329)))
(assert (x321 x61))
(assert (x321 x222))
(assert (x321 x246))
(assert (x321 x332))
(assert (not (= (x308 x63 52) 1865579259)))
(assert (x321 x135))
(assert (=> (= (x308 x31 52) (x308 x336 52)) (= x31 x336)))
(assert (x321 x311))
(assert (x321 x174))
(assert (x321 x140))
(assert (not (= 826074471 (x308 x63 52))))
(assert (=> (<= x336 10000) (not (= (x308 x31 52) x336))))
(assert (= (or x229 x240) x384))
(assert (not (= (x308 x63 52) 115792089237316195423570985008687907853269984665640)))
(assert (x321 x329))
(assert (x321 x42))
(assert (x321 x420))
(assert (=> (>= 10000 x190) (not (= x190 (x308 x31 52)))))
(assert (= (=> (and (and (and (or (and (and (not (= 0 x135)) (= x135 (x67 x65))) (not x169)) x169) (and (<= x92 340282366920938463463374607431768211455) (= x199 x44) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x396 x231)) (= x382 (or x172 x85)) (= x120 x297) (not (> x231 340282366920938463463374607431768211455)) (= x311 x420) (= (x340 1461501637330902918203684832716283019655932542975 x297) x199) (not (< x251 3018967357)) (= x251 3018967357) (= 0 x131) (< (+ x231 x132) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x131 x150) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x396) (= x390 (< x241 x92)) (= (not x89) x349) (= x111 (ite x193 1 0)) (= x132 x108) (= x413 (x161 (- x211 x202))) (< 0 x71) (= (x308 x37 52) x91) (= x37 x100) (= x140 x29) (= (= x342 x232) x224) (= x252 x346) (= x155 (mod (* x8 x92) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x223 1461501637330902918203684832716283019655932542975) (= x89 (< 115792089237316195423570985008687907853269984665640 x420)) (= x239 x167) (= x223 x313) (= x71 (ite x382 1 0)) x418 (= 0 x249) (>= 340282366920938463463374607431768211455 x8) (> 3607235850 x251) (= x62 x29) (<= x132 340282366920938463463374607431768211455) x224 (= x88 x266) (= x231 x275) (= x344 (mod (* x92 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> 2113256763 x251)) (>= 1461501637330902918203684832716283019655932542975 x65) (= x346 (x340 1461501637330902918203684832716283019655932542975 x176)) (= x343 (+ x130 x69)) (= x363 x393) (= (div x282 1000000000000000000000000000) x231) (< 0 x111) (> 340282366920938463463374607431768211456 x92) (= x342 (- x343 x23)) (>= x120 0) (>= 1461501637330902918203684832716283019655932542975 x129) (= x87 1000000000000000000000000000) (= x132 (x318 x91)) (= x393 x277) (= (x340 1461501637330902918203684832716283019655932542975 x297) x252) (= (= 0 x8) x85) (<= x363 1461501637330902918203684832716283019655932542975) (= x316 x100) (= x201 (x284 (+ 500000000000000000000000000 x344))) (= (x284 (+ 500000000000000000000000000 x248)) x282) (= x243 (= x119 x93)) (= x230 x93) (= (x318 x191) x23) (not (= 0 x231)) (>= x8 0) (>= 1461501637330902918203684832716283019655932542975 x120) (= (x308 x37 52) x99) (<= 0 x396) (= x92 (x318 x198)) (<= 0 x92) (= (mod (* x420 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x248) (= x178 (x308 x37 52)) (>= 340282366920938463463374607431768211455 x130) (< x132 340282366920938463463374607431768211456) (not (< x211 x202)) (= (div x201 1000000000000000000000000000) x211) (= (+ x108 x275) x130) (= x8 (x303 x178)) (>= x23 0) (= x19 x228) (<= x23 340282366920938463463374607431768211455) (= (not x390) x172) (= (< 115792089237316195423570985008687907853269984665640 x92) x219) (= x241 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x8)) (= x193 x296) (<= 0 x363) (= (x67 x190) x260) (< x8 340282366920938463463374607431768211456) (= x285 (x284 (+ x155 500000000000000000000000000))) (= (x340 1461501637330902918203684832716283019655932542975 x176) x44) (= (ite x167 1 0) x249) (>= x65 0) (= x202 (div x285 1000000000000000000000000000)) (= (and x243 x182) x418) (>= x129 0) (= x198 (x308 x37 52)) (>= 1461501637330902918203684832716283019655932542975 x37) (< 0 x260) (= x191 (x308 x37 52)) (= x29 (+ x231 x396)) (<= 0 x132) (< x65 1461501637330902918203684832716283019655932542976) (= (not x349) x239) (= x169 (= x65 0)) (= x203 1000000000000000000000000000) (= (not x219) x296) (= (not (= x88 x316)) x182))) (and (= (x318 x98) x332) (>= 1461501637330902918203684832716283019655932542975 x336) (= 1889567281 x57) (= x126 (x67 x190)) (< x332 340282366920938463463374607431768211456) (not (= 1865579259 x57)) (<= x267 1461501637330902918203684832716283019655932542975) (<= x332 340282366920938463463374607431768211455) (= x230 x389) (= (x284 (+ x103 500000000000000000000000000)) x25) (>= x332 0) (>= x267 0) (= (> x332 x125) x265) (= (div x25 1000000000000000000000000000) x389) (= (x84 128) x189) (= x336 x266) (= (not x265) x245) (< 0 x126) (> x40 0) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x189) x125) (= x225 (= x189 0)) (not (> 826074471 x57)) (= (x308 x336 52) x98) (> 2113256763 x57) (= x380 x119) (= (mod (* x189 x332) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x103) (not (> 1865579259 x57)) (= x40 (ite x270 1 0)) (= x270 (or x245 x225)) (< x267 1461501637330902918203684832716283019655932542976))) (and (not (= x324 1865579259)) (not (> 1865579259 x324)) (= x17 (x308 x171 52)) (<= 0 x273) (= x187 (or x177 x300)) (>= 1461501637330902918203684832716283019655932542975 x266) (>= x266 0) (>= x105 0) (>= x398 0) (< 0 x190) (>= 255 x368) (= x395 (x318 x17)) (= x383 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x325)) (> x283 0) (= x278 x228) (= (> (x67 x218) 0) x254) (> x218 0) (<= 0 x216) (>= 1461501637330902918203684832716283019655932542975 x100) (<= x395 340282366920938463463374607431768211455) (= x297 x264) (= x385 (x284 (+ 500000000000000000000000000 x174))) (= (div x278 1000000000000000000000000000) x402) (= x100 x171) (<= 0 x368) (= x380 x403) (> x246 0) (< x324 2113256763) (>= 255 x398) (>= 1461501637330902918203684832716283019655932542975 x267) (= x174 (mod (* x325 x395) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x288 x273) (= x216 (x112 x190)) (>= 1461501637330902918203684832716283019655932542975 x267) (<= 0 x356) (<= x218 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x264) x254 (= x11 x228) (>= 1461501637330902918203684832716283019655932542975 x171) (>= x267 0) (= x94 (> (x67 x190) 0)) x94 (= (not x78) x177) (= x300 (= 0 x325)) (<= x273 1461501637330902918203684832716283019655932542975) (= x325 (x205 128)) (= (x67 x190) x246) (<= 0 x313) (= (> x395 x383) x78) (< x267 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x313) (<= x356 1461501637330902918203684832716283019655932542975) (= 1000000000000000000000000000 x2) (= 1889567281 x324) (<= 0 x65) (<= x65 1461501637330902918203684832716283019655932542975) (>= x264 0) (not (< x324 826074471)) (>= x267 0) (= (div x385 1000000000000000000000000000) x403) (> 340282366920938463463374607431768211456 x395) (= (ite x187 1 0) x283) (= x105 (x112 x218)) (not (= x218 x190)) (= x267 x218) (>= x395 0) (<= x190 1461501637330902918203684832716283019655932542975) (>= x100 0))) x141) x364))
(assert (=> (<= x65 10000) (not (= (x308 x336 52) x65))))
(assert (x321 x57))
(assert (x321 x88))
(assert (not (= (x308 x37 52) 500000000000000000000000000)))
(assert (not (= (x308 x31 52) 1865579259)))
(assert (x54 x336))
(assert (=> (>= 10000 x190) (not (= x190 (x308 x63 52)))))
(assert (x321 x188))
(assert (x54 x31))
(assert (x321 x138))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x308 x31 52))))
(assert (not (= (x308 x37 52) 826074471)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x308 x3 52))))
(assert (=> (<= x171 10000) (not (= (x308 x329 52) x171))))
(assert (x321 x310))
(assert (x321 x289))
(assert (not (= (x308 x336 52) 340282366920938463463374607431768211456)))
(assert (x321 x179))
(assert (not (= 1000000000000000000000000000 (x308 x329 52))))
(assert (not (= (x308 x37 52) 1461501637330902918203684832716283019655932542976)))
(assert (x321 x267))
(assert (x54 x171))
(assert (x321 x248))
(assert (x321 x136))
(assert (x321 x7))
(assert (= x207 (and x419 (not x213))))
(assert (x321 x153))
(assert (not (= (x308 x31 52) 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (=> (<= x218 10000) (not (= x218 (x308 x3 52)))))
(assert (not (= (x308 x63 52) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x321 x58))
(assert (x321 x247))
(assert (not (= (x308 x171 52) 340282366920938463463374607431768211456)))
(assert (x54 x65))
(assert (x321 x38))
(assert (x321 x262))
(assert (x321 x404))
(assert (not (= 3018967357 (x308 x329 52))))
(assert (x321 x315))
(assert (x321 x21))
(assert (not (= 340282366920938463463374607431768211455 (x308 x3 52))))
(assert (=> (>= 10000 x37) (not (= x37 (x308 x37 52)))))
(assert (x321 x146))
(assert (x321 x8))
(assert (x321 x194))
(assert (=> (= (x308 x31 52) (x308 x3 52)) (= x31 x3)))
(assert (x321 x120))
(assert (not (= 1889567281 (x308 x37 52))))
(assert (not (= (x308 x3 52) 3607235850)))
(assert (=> (>= 10000 x329) (not (= x329 (x308 x37 52)))))
(assert (x321 x183))
(assert (x321 x39))
(assert (=> (>= 10000 x31) (not (= (x308 x171 52) x31))))
(assert (not (= (x308 x336 52) 1889567281)))
(assert (=> (<= x3 10000) (not (= (x308 x171 52) x3))))
(assert (x321 x316))
(assert (x321 x256))
(assert (=> (<= x65 10000) (not (= (x308 x63 52) x65))))
(assert (x321 x32))
(assert (x321 x128))
(assert (not (= (x308 x171 52) 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (x321 x348))
(assert (not x364))
(assert (=> (<= x336 10000) (not (= x336 (x308 x63 52)))))
(assert (x321 x273))
(assert (x321 x52))
(assert (not (= 826074471 (x308 x171 52))))
(assert (not (= 2113256763 (x308 x329 52))))
(assert (=> (= (x308 x171 52) (x308 x336 52)) (= x171 x336)))
(assert (not (= (x308 x63 52) 52)))
(assert (x321 x45))
(assert (x321 x291))
(assert (not (= 340282366920938463463374607431768211455 (x308 x171 52))))
(assert (x321 x282))
(assert (x321 x391))
(assert (not (= (x308 x63 52) 500000000000000000000000000)))
(assert (x321 x368))
(assert (not (= (x308 x3 52) 826074471)))
(assert (x321 x170))
(assert (x321 x261))
(assert (not (= 2113256763 (x308 x171 52))))
(assert (x321 x351))
(assert (x321 x376))
(assert (x321 x70))
(assert (=> (<= x329 10000) (not (= x329 (x308 x171 52)))))
(assert (x321 x216))
(assert (x321 x371))
(assert (x321 x64))
(assert (not (= (x308 x171 52) 3607235850)))
(assert (x321 x37))
(assert (x321 x34))
(assert (=> (<= x37 10000) (not (= (x308 x329 52) x37))))
(assert (x321 x184))
(assert (=> (<= x329 10000) (not (= x329 (x308 x63 52)))))
(assert (x321 x160))
(assert (x321 x130))
(assert (not (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x308 x63 52))))
(assert (x321 x152))
(assert (=> (>= 10000 x3) (not (= (x308 x31 52) x3))))
(assert (x321 x24))
(assert (x321 x292))
(assert (= x328 true))
(assert (=> (>= 10000 x329) (not (= (x308 x329 52) x329))))
(assert (x321 x317))
(assert (x321 x279))
(assert (not (= 52 (x308 x171 52))))
(assert (=> (= (x308 x336 52) (x308 x63 52)) (= x63 x336)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x308 x171 52))))
(assert (x321 x260))
(assert (x321 x13))
(assert (=> (>= 10000 x336) (not (= x336 (x308 x336 52)))))
(assert (=> (<= x63 10000) (not (= x63 (x308 x37 52)))))
(assert (x379 x176))
(assert (=> (<= x37 10000) (not (= (x308 x336 52) x37))))
(assert (x321 x40))
(assert (not (= 340282366920938463463374607431768211456 (x308 x31 52))))
(assert (not (= 340282366920938463463374607431768211455 (x308 x37 52))))
(assert (x321 x165))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x308 x171 52))))
(assert (not (= 1889567281 (x308 x171 52))))
(assert (x321 x2))
(assert (not (= 500000000000000000000000000 (x308 x329 52))))
(assert (x321 x241))
(assert (=> (>= 10000 x171) (not (= x171 (x308 x171 52)))))
(assert (=> (<= x190 10000) (not (= (x308 x171 52) x190))))
(assert (x321 x119))
(assert (not (= (x308 x336 52) 500000000000000000000000000)))
(assert (not (= 115792089237316195423570985008687907853269984665640 (x308 x31 52))))
(assert (= (or x43 x426) x419))
(assert (x321 x158))
(assert (x321 x336))
(assert (=> (= (x308 x171 52) (x308 x31 52)) (= x31 x171)))
(assert (=> (>= 10000 x31) (not (= (x308 x336 52) x31))))
(assert (not (= (x308 x3 52) 52)))
(assert (x321 x27))
(assert (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x308 x63 52))))
(assert (=> (>= 10000 x63) (not (= (x308 x31 52) x63))))
(assert (= x141 (=> (and (and (and (= (ite x378 1 0) x236) (= x7 x228) (>= 1461501637330902918203684832716283019655932542975 x5) (>= 340282366920938463463374607431768211455 x262) (= (div x410 1000000000000000000000000000) x45) (= x32 0) (= x110 (> x4 115792089237316195423570985008687907853269984665640)) (= (x79 x195) x61) (= (> x160 115792089237316195423570985008687907853269984665640) x47) (<= 0 x234) (= x423 x12) (= (x67 x190) x104) (= 3018967357 x355) (= x374 x173) (= x423 x53) (= x374 x277) (>= 1461501637330902918203684832716283019655932542975 x312) (= x102 (not x415)) (= x157 x154) (not (= x45 0)) (>= 1461501637330902918203684832716283019655932542975 x149) (= x236 0) (= (x340 1461501637330902918203684832716283019655932542975 x297) x10) (= x121 x405) (= x100 x63) (= x234 (x79 x424)) (not (< x146 x153)) (= x405 (not x110)) (> 340282366920938463463374607431768211456 x262) (not (< x355 3018967357)) (< (+ x45 x62) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x299 (not x47)) (>= x61 0) (= (ite x341 1 0) x338) (= x154 (x340 1461501637330902918203684832716283019655932542975 x176)) (not (< x355 2113256763)) (= x213 (= x65 0)) (= (x161 (- x146 x153)) x170) (<= 0 x65) (< 0 x338) (= (x340 1461501637330902918203684832716283019655932542975 x176) x263) (= x373 (= x20 x59)) (= (- x238 x234) x59) (= (x109 x327) x262) (= x238 (+ x232 x196)) (< x61 340282366920938463463374607431768211456) (= x327 (x308 x63 52)) (<= x65 1461501637330902918203684832716283019655932542975) (= x196 (+ x280 x412)) (= (x284 (+ 500000000000000000000000000 x376)) x188) (= x392 (not x299)) (= (div x406 1000000000000000000000000000) x146) (> x118 0) (<= x196 340282366920938463463374607431768211455) (= x160 x138) (> x104 0) (< (+ x45 x61) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x373 (>= x173 0) (= (mod (* 1000000000000000000000000000 x4) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x365) (< x355 3607235850) (= x10 x263) (= (< x145 x4) x415) (<= x61 340282366920938463463374607431768211455) (= x150 x32) (>= 340282366920938463463374607431768211455 x4) (>= 340282366920938463463374607431768211455 x234) (= (x79 x212) x4) (<= x63 1461501637330902918203684832716283019655932542975) (= (x284 (+ x409 500000000000000000000000000)) x410) (= x412 x45) (= (mod (* x4 x262) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x376) (= (x308 x63 52) x195) (= (x308 x63 52) x424) (>= x62 0) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x262) x145) (= x313 x149) (<= 0 x5) (= x297 x312) (>= 1461501637330902918203684832716283019655932542975 x173) (= (x284 (+ 500000000000000000000000000 x365)) x406) (= 1000000000000000000000000000 x286) (= x392 x378) (= x212 (x308 x63 52)) (= 1000000000000000000000000000 x68) (< x4 340282366920938463463374607431768211456) (>= x262 0) (= (x340 1461501637330902918203684832716283019655932542975 x297) x157) (= x375 (= 0 x262)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (>= x4 0) (not (< 340282366920938463463374607431768211455 x45)) (<= 0 x312) (= x118 (ite x121 1 0)) (= x341 (or x375 x102)) (= x409 (mod (* 1000000000000000000000000000 x160) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x280 x61) (> 1461501637330902918203684832716283019655932542976 x65) (= (+ x45 x62) x423) (= x153 (div x188 1000000000000000000000000000)) (= (x308 x63 52) x156)) (or x213 (and (and (= x292 (x67 x65)) (not (= x292 0))) (not x213)))) (and (= (+ x83 x274) x164) (= x137 (= 0 x92)) (= x274 x413) (= x420 x83) (< (+ x413 x420) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x186 (x362 320)) (= x235 x137))) x319)))
(assert (=> (= (x308 x3 52) (x308 x37 52)) (= x37 x3)))
(assert (=> (<= x37 10000) (not (= (x308 x31 52) x37))))
(assert (x321 x365))
(assert (x321 x231))
(assert (x321 x163))
(assert (not (= 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x308 x336 52))))
(assert (=> (<= x31 10000) (not (= x31 (x308 x329 52)))))
(assert (=> (<= x329 10000) (not (= (x308 x31 52) x329))))
(assert (= (=> (and (and (= x366 x304) (= x366 (= 0 x4)) (< (+ x170 x160) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x160 x26) (= x34 (x6 320)) (= x268 (+ x26 x90)) (= x90 x170)) (and (and (and (= (x308 x31 52) x353) (= x58 x313) (<= 0 x24) (< x165 340282366920938463463374607431768211456) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x12) (= x150 x48) (= x48 0) (>= 340282366920938463463374607431768211455 x322) (= (x284 (+ 500000000000000000000000000 x209)) x158) (= x197 (or x244 x127)) (= x72 x39) (<= x165 340282366920938463463374607431768211455) (= (not x416) x244) (= x293 (mod (* x322 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x394 (= x81 (< 115792089237316195423570985008687907853269984665640 x322)) (<= x310 1461501637330902918203684832716283019655932542975) (<= x24 1461501637330902918203684832716283019655932542975) (= (x96 x353) x165) (= (x340 1461501637330902918203684832716283019655932542975 x297) x39) (= x107 (ite x281 1 0)) (>= x65 0) (>= x322 0) (= (< 115792089237316195423570985008687907853269984665640 x294) x208) (= (ite x367 1 0) x64) (>= 1461501637330902918203684832716283019655932542975 x315) (= x185 (x284 (+ x377 500000000000000000000000000))) (= x75 (not x81)) (< x301 3607235850) (= (x370 x139) x290) (< 0 x64) (> 340282366920938463463374607431768211456 x322) (= (x308 x31 52) x309) (= (+ x339 x359) x269) (< x290 340282366920938463463374607431768211456) (>= x290 0) (<= x31 1461501637330902918203684832716283019655932542975) (>= x315 0) (> x128 0) (= x311 x256) (not (> x162 x351)) (= 0 x107) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x290) x194) (= x139 (x308 x31 52)) (<= x290 340282366920938463463374607431768211455) (= x350 1000000000000000000000000000) (= x181 x138) (> 1461501637330902918203684832716283019655932542976 x65) (= x162 (div x185 1000000000000000000000000000)) (not (= 0 x317)) (= (= 0 x65) x421) (= (x340 1461501637330902918203684832716283019655932542975 x297) x371) (< (+ x12 x317) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x12) (= x277 x302) (= x301 3018967357) (= x305 (x96 x309)) (= x222 1000000000000000000000000000) (= x279 (+ x226 x33)) (not (> 3018967357 x301)) (= (ite x197 1 0) x128) (= (= 0 x290) x127) (= x28 (not x208)) (<= 0 x310) (= (mod (* x290 x322) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x377) (= x302 x24) (= (x340 1461501637330902918203684832716283019655932542975 x176) x136) (= (x96 x388) x322) (= (not x28) x49) (= x369 (+ x20 x279)) (= x165 x226) (= (= x106 x42) x394) (= x281 x49) (<= 0 x305) (= x294 (x284 (+ x181 x256))) (= x404 (x67 x190)) (not (< x301 2113256763)) (= x416 (> x322 x194)) (= x317 x339) (= x228 x323) (= x310 x297) (<= x305 340282366920938463463374607431768211455) (= x289 (x161 (- x351 x162))) (<= x65 1461501637330902918203684832716283019655932542975) (= x33 x317) (<= x58 1461501637330902918203684832716283019655932542975) (= (div x175 1000000000000000000000000000) x351) (= x72 (x340 1461501637330902918203684832716283019655932542975 x176)) (not (< 340282366920938463463374607431768211455 x317)) (= x75 x367) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x317 x165)) (= x358 x152) (= x266 x31) (= (x284 (+ 500000000000000000000000000 x293)) x175) (= x12 x359) (= x317 (div x158 1000000000000000000000000000)) (= x136 x371) (> x404 0) (>= x165 0) (= x209 (mod (* x294 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 340282366920938463463374607431768211455 x279) (= (- x369 x305) x106) (= x388 (x308 x31 52))) (or (and (not x421) (and (not (= x354 0)) (= x354 (x67 x65)))) x421)) (and (= (div x220 1000000000000000000000000000) x51) (= x400 1889567281) (> x41 0) (< x13 340282366920938463463374607431768211456) (>= x13 0) (not (< x400 826074471)) (= (x67 x190) x41) (= (mod (* x13 x345) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x425) (not (> 1865579259 x400)) (>= x267 0) (> 1461501637330902918203684832716283019655932542976 x267) (= x220 (x284 (+ 500000000000000000000000000 x425))) (>= 340282366920938463463374607431768211455 x13) (= x345 (x60 128)) (= x27 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x345)) (> x52 0) (= x13 (x96 x30)) (= (= x345 0) x257) (= x51 x152) (= (or x399 x257) x180) (>= 1461501637330902918203684832716283019655932542975 x329) (> 2113256763 x400) (= (ite x180 1 0) x52) (= x307 (< x27 x13)) (= x100 x329) (not (= x400 1865579259)) (= (x308 x329 52) x30) (= x399 (not x307)) (>= 1461501637330902918203684832716283019655932542975 x267)))) x73) x319))
(assert (x54 x3))
(assert (=> (>= 10000 x63) (not (= (x308 x329 52) x63))))
(assert (x321 x134))
(assert (= x46 (and x213 x419)))
(assert (=> (<= x65 10000) (not (= x65 (x308 x31 52)))))
(assert (not (= (x308 x31 52) 3607235850)))
(assert (not (= (x308 x31 52) 1889567281)))
(assert (x321 x19))
(assert (x321 x126))
(assert (not (= (x308 x171 52) 1461501637330902918203684832716283019655932542976)))
(assert (=> (= (x308 x31 52) (x308 x329 52)) (= x329 x31)))
(assert (=> (>= 10000 x190) (not (= x190 (x308 x336 52)))))
(assert (not (= 3018967357 (x308 x31 52))))
(assert (x321 x220))
(assert (x321 x400))
(assert (x321 x377))
(assert (=> (= (x308 x63 52) (x308 x31 52)) (= x31 x63)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x308 x63 52))))
(assert (not (= (x308 x171 52) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x308 x3 52) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (=> (>= 10000 x171) (not (= (x308 x3 52) x171))))
(assert (x321 x111))
(assert (=> (<= x336 10000) (not (= (x308 x37 52) x336))))
(assert (x54 x63))
(assert (x321 x312))
(assert (not (= (x308 x37 52) 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (x321 x313))
(assert (=> (>= 10000 x218) (not (= x218 (x308 x37 52)))))
(assert (=> (<= x3 10000) (not (= (x308 x329 52) x3))))
(assert (x379 1461501637330902918203684832716283019655932542975))
(assert (x321 x406))
(assert (not (= (x308 x329 52) 340282366920938463463374607431768211455)))
(assert (x321 x344))
(assert (=> (>= 10000 x190) (not (= (x308 x329 52) x190))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x308 x31 52))))
(assert (=> (<= x63 10000) (not (= x63 (x308 x3 52)))))
(assert (x56 x176))
(assert (x321 x155))
(assert (x321 x196))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x308 x63 52))))
(assert (not (= (x308 x329 52) 1461501637330902918203684832716283019655932542976)))
(assert (not (= 340282366920938463463374607431768211456 (x308 x3 52))))
(assert (x321 x185))
(assert (not (= 2113256763 (x308 x63 52))))
(assert (not (= (x308 x31 52) 826074471)))
(assert (x321 x338))
(assert (not (= (x308 x329 52) 826074471)))
(assert (=> (>= 10000 x171) (not (= x171 (x308 x63 52)))))
(assert (not (= (x308 x37 52) 340282366920938463463374607431768211456)))
(assert (not (= (x308 x336 52) 2113256763)))
(assert (x321 x87))
(assert (not (= (x308 x37 52) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (=> (>= 10000 x329) (not (= (x308 x336 52) x329))))
(assert (not (= 1000000000000000000000000000 (x308 x171 52))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x308 x37 52))))
(assert (not (= (x308 x336 52) 3018967357)))
(assert (x321 x286))
(assert (not (= (x308 x336 52) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (=> (= (x308 x3 52) (x308 x171 52)) (= x3 x171)))
(assert (not (= (x308 x336 52) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x321 x333))
(assert (=> (<= x65 10000) (not (= (x308 x37 52) x65))))
(assert (x321 x297))
(assert (x321 x290))
(assert (x321 x132))
(assert (=> (= (x308 x63 52) (x308 x329 52)) (= x329 x63)))
(assert (not (= 1000000000000000000000000000 (x308 x63 52))))
(assert (not (= 3018967357 (x308 x37 52))))
(assert (=> (>= 10000 x3) (not (= x3 (x308 x37 52)))))
(assert (not (= (x308 x171 52) 1865579259)))
(assert (x321 x323))
(assert (x321 x41))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x308 x336 52))))
(assert (x321 x181))
(assert (x321 x277))
(assert (=> (>= 10000 x329) (not (= (x308 x3 52) x329))))
(assert (x321 x425))
(assert (=> (<= x63 10000) (not (= x63 (x308 x63 52)))))
(assert (x321 x100))
(assert (x321 x324))
(assert (=> (<= x218 10000) (not (= x218 (x308 x171 52)))))
(assert (not (= (x308 x37 52) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x321 x11))
(assert (x321 x186))
(assert (not (= 1865579259 (x308 x3 52))))
(assert (=> (<= x37 10000) (not (= (x308 x63 52) x37))))
(assert (x321 x62))
(assert (not (= 2113256763 (x308 x37 52))))
(assert (not (= (x308 x31 52) 1000000000000000000000000000)))
(assert (x321 x363))
(assert (x321 x249))
(check-sat)
(exit)