(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x216 () Int)
(declare-fun x715 () Int)
(declare-fun x1115 () Int)
(declare-fun x740 () Bool)
(declare-fun x316 () Bool)
(declare-fun x41 () Bool)
(declare-fun x710 () Int)
(declare-fun x292 () Bool)
(declare-fun x807 () Int)
(declare-fun x544 () Int)
(declare-fun x721 () Int)
(declare-fun x123 () Bool)
(declare-fun x238 () Bool)
(declare-fun x416 () Bool)
(declare-fun x434 () Bool)
(declare-fun x772 () Bool)
(declare-fun x101 () Int)
(declare-fun x636 () Bool)
(declare-fun x776 () Bool)
(declare-fun x425 () Bool)
(declare-fun x437 () Bool)
(declare-fun x143 () Int)
(declare-fun x528 () Bool)
(declare-fun x727 () Bool)
(declare-fun x747 () Int)
(declare-fun x720 () Bool)
(declare-fun x486 () Int)
(declare-fun x252 () Int)
(declare-fun x234 () Int)
(declare-fun x404 () Bool)
(declare-fun x1017 () Int)
(declare-fun x1 () Int)
(declare-fun x222 () Int)
(declare-fun x171 () Bool)
(declare-fun x787 () Bool)
(declare-fun x65 () Bool)
(declare-fun x763 () Int)
(declare-fun x467 () Int)
(declare-fun x916 () Bool)
(declare-fun x363 () Int)
(declare-fun x18 () Int)
(declare-fun x862 () Bool)
(declare-fun x791 () Int)
(declare-fun x388 () Bool)
(declare-fun x329 () Bool)
(declare-fun x1106 () Int)
(declare-fun x378 () Int)
(declare-fun x505 () Int)
(declare-fun x287 () Int)
(declare-fun x500 () Bool)
(declare-fun x1040 () Bool)
(declare-fun x1027 () Bool)
(declare-fun x614 () Int)
(declare-fun x297 () Int)
(declare-fun x622 () Int)
(declare-fun x690 () Int)
(declare-fun x228 () Bool)
(declare-fun x487 () Int)
(declare-fun x1019 () Bool)
(declare-fun x809 () Int)
(declare-fun x958 () Int)
(declare-fun x558 () Bool)
(declare-fun x762 () Bool)
(declare-fun x849 () Bool)
(declare-fun x830 () Bool)
(declare-fun x270 () Int)
(declare-fun x971 () Int)
(declare-fun x438 () Int)
(declare-fun x351 () Bool)
(declare-fun x786 () Int)
(declare-fun x275 () Int)
(declare-fun x671 () Bool)
(declare-fun x393 () Int)
(declare-fun x1058 () Bool)
(declare-fun x691 () Bool)
(declare-fun x670 () Int)
(declare-fun x233 () Bool)
(declare-fun x259 () Int)
(declare-fun x320 () Int)
(declare-fun x884 () Bool)
(declare-fun x391 () Bool)
(declare-fun x828 () Int)
(declare-fun x822 () Bool)
(declare-fun x491 () Int)
(declare-fun x793 () Bool)
(declare-fun x931 () Int)
(declare-fun x411 () Bool)
(declare-fun x1117 () Bool)
(declare-fun x279 () Bool)
(declare-fun x33 () Bool)
(declare-fun x639 () Int)
(declare-fun x577 () Int)
(declare-fun x340 () Int)
(declare-fun x1101 () Int)
(declare-fun x692 () Bool)
(declare-fun x773 () Bool)
(declare-fun x574 () Int)
(declare-fun x207 () Int)
(declare-fun x709 () Int)
(declare-fun x84 () Int)
(declare-fun x616 () Int)
(declare-fun x339 () Bool)
(declare-fun x359 () Int)
(declare-fun x779 () Bool)
(declare-fun x132 () Int)
(declare-fun x87 () Bool)
(declare-fun x138 () Int)
(declare-fun x288 () Int)
(declare-fun x823 () Bool)
(declare-fun x977 () Bool)
(declare-fun x376 () Bool)
(declare-fun x104 () Int)
(declare-fun x1038 () Int)
(declare-fun x959 () Int)
(declare-fun x774 () Bool)
(declare-fun x336 () Bool)
(declare-fun x1092 () Int)
(declare-fun x15 () Int)
(declare-fun x269 () Bool)
(declare-fun x152 () Int)
(declare-fun x1082 () Int)
(declare-fun x993 () Bool)
(declare-fun x661 () Int)
(declare-fun x642 () Bool)
(declare-fun x966 () Bool)
(declare-fun x1088 () Bool)
(declare-fun x797 () Int)
(declare-fun x538 () Int)
(declare-fun x939 () Bool)
(declare-fun x820 () Int)
(declare-fun x726 () Int)
(declare-fun x3 () Int)
(declare-fun x942 () Bool)
(declare-fun x839 () Bool)
(declare-fun x898 () Bool)
(declare-fun x163 () Int)
(declare-fun x46 () Bool)
(declare-fun x1073 () Bool)
(declare-fun x1041 () Int)
(declare-fun x716 () Int)
(declare-fun x8 () Int)
(declare-fun x1037 () Bool)
(declare-fun x547 () Bool)
(declare-fun x874 () Bool)
(declare-fun x790 () Bool)
(declare-fun x689 () Bool)
(declare-fun x684 () Int)
(declare-fun x25 () Bool)
(declare-fun x920 () Int)
(declare-fun x283 () Int)
(declare-fun x860 () Bool)
(declare-fun x718 () Bool)
(declare-fun x35 () Int)
(declare-fun x380 () Int)
(declare-fun x480 () Bool)
(declare-fun x821 () Int)
(declare-fun x659 () Bool)
(declare-fun x42 () Bool)
(declare-fun x422 () Bool)
(declare-fun x965 () Int)
(declare-fun x685 () Int)
(declare-fun x264 () Int)
(declare-fun x880 () Int)
(declare-fun x167 () Bool)
(declare-fun x403 () Bool)
(declare-fun x30 () Int)
(declare-fun x290 () Int)
(declare-fun x1085 () Bool)
(declare-fun x236 () Int)
(declare-fun x784 () Int)
(declare-fun x1022 () Int)
(declare-fun x436 () Int)
(declare-fun x865 () Int)
(declare-fun x1046 () Bool)
(declare-fun x229 () Bool)
(declare-fun x635 () Bool)
(declare-fun x461 () Bool)
(declare-fun x112 () Int)
(declare-fun x321 () Bool)
(declare-fun x224 () Bool)
(declare-fun x568 () Bool)
(declare-fun x453 () Bool)
(declare-fun x431 (Int) Int)
(declare-fun x912 () Int)
(declare-fun x466 () Int)
(declare-fun x298 () Int)
(declare-fun x477 () Int)
(declare-fun x64 () Int)
(declare-fun x861 () Bool)
(declare-fun x868 () Int)
(declare-fun x449 () Bool)
(declare-fun x1034 () Int)
(declare-fun x144 () Int)
(declare-fun x844 () Bool)
(declare-fun x668 () Bool)
(declare-fun x1012 () Int)
(declare-fun x694 () Bool)
(declare-fun x124 () Bool)
(declare-fun x49 () Int)
(declare-fun x582 () Bool)
(declare-fun x1096 () Bool)
(declare-fun x739 () Bool)
(declare-fun x753 () Int)
(declare-fun x955 () Int)
(declare-fun x83 () Bool)
(declare-fun x9 () Bool)
(declare-fun x805 () Bool)
(declare-fun x232 () Int)
(declare-fun x463 () Bool)
(declare-fun x281 () Bool)
(declare-fun x1070 () Int)
(declare-fun x392 () Int)
(declare-fun x1097 () Int)
(declare-fun x788 () Int)
(declare-fun x311 () Bool)
(declare-fun x469 () Int)
(declare-fun x373 () Bool)
(declare-fun x847 () Int)
(declare-fun x601 () Bool)
(declare-fun x178 () Int)
(declare-fun x1099 () Int)
(declare-fun x428 () Bool)
(declare-fun x757 () Int)
(declare-fun x567 () Bool)
(declare-fun x284 () Bool)
(declare-fun x719 () Int)
(declare-fun x77 () Bool)
(declare-fun x196 () Bool)
(declare-fun x162 () Int)
(declare-fun x235 () Int)
(declare-fun x1067 () Int)
(declare-fun x10 () Bool)
(declare-fun x119 () Bool)
(declare-fun x192 () Int)
(declare-fun x1048 () Int)
(declare-fun x365 () Int)
(declare-fun x122 () Bool)
(declare-fun x630 () Int)
(declare-fun x295 () Int)
(declare-fun x433 () Bool)
(declare-fun x134 () Int)
(declare-fun x749 () Bool)
(declare-fun x813 () Bool)
(declare-fun x963 () Int)
(declare-fun x337 () Bool)
(declare-fun x414 (Int) Int)
(declare-fun x1074 () Int)
(declare-fun x1105 () Int)
(declare-fun x172 () Bool)
(declare-fun x714 () Bool)
(declare-fun x907 () Int)
(declare-fun x78 () Int)
(declare-fun x924 (Int) Int)
(declare-fun x900 () Int)
(declare-fun x674 () Int)
(declare-fun x458 () Bool)
(declare-fun x1111 () Bool)
(declare-fun x1006 () Bool)
(declare-fun x360 () Bool)
(declare-fun x612 () Int)
(declare-fun x153 () Bool)
(declare-fun x586 () Bool)
(declare-fun x633 () Int)
(declare-fun x271 () Int)
(declare-fun x185 () Bool)
(declare-fun x771 () Int)
(declare-fun x118 () Int)
(declare-fun x1039 () Bool)
(declare-fun x377 () Int)
(declare-fun x615 () Int)
(declare-fun x268 () Bool)
(declare-fun x746 () Int)
(declare-fun x55 () Int)
(declare-fun x440 () Int)
(declare-fun x1002 () Bool)
(declare-fun x91 () Int)
(declare-fun x975 () Int)
(declare-fun x189 () Int)
(declare-fun x677 () Int)
(declare-fun x187 () Int)
(declare-fun x609 () Int)
(declare-fun x841 () Bool)
(declare-fun x71 () Bool)
(declare-fun x366 () Bool)
(declare-fun x485 () Bool)
(declare-fun x840 () Bool)
(declare-fun x854 () Int)
(declare-fun x250 () Bool)
(declare-fun x299 () Bool)
(declare-fun x253 () Bool)
(declare-fun x81 () Int)
(declare-fun x536 () Int)
(declare-fun x451 () Int)
(declare-fun x29 () Bool)
(declare-fun x588 () Bool)
(declare-fun x456 () Bool)
(declare-fun x348 () Int)
(declare-fun x730 () Int)
(declare-fun x580 () Bool)
(declare-fun x14 () Int)
(declare-fun x127 () Int)
(declare-fun x183 () Bool)
(declare-fun x1122 () Bool)
(declare-fun x631 () Int)
(declare-fun x473 () Int)
(declare-fun x824 () Bool)
(declare-fun x1025 () Bool)
(declare-fun x32 () Bool)
(declare-fun x906 () Int)
(declare-fun x702 () Bool)
(declare-fun x445 () Bool)
(declare-fun x584 () Int)
(declare-fun x1016 () Int)
(declare-fun x531 () Int)
(declare-fun x88 () Bool)
(declare-fun x150 () Int)
(declare-fun x476 () Int)
(declare-fun x1044 () Int)
(declare-fun x708 () Bool)
(declare-fun x441 () Bool)
(declare-fun x731 () Int)
(declare-fun x191 () Int)
(declare-fun x693 () Int)
(declare-fun x618 () Int)
(declare-fun x782 () Int)
(declare-fun x1114 () Int)
(declare-fun x1116 () Int)
(declare-fun x732 () Bool)
(declare-fun x444 () Bool)
(declare-fun x344 () Bool)
(declare-fun x97 () Int)
(declare-fun x964 () Int)
(declare-fun x1065 () Bool)
(declare-fun x194 () Bool)
(declare-fun x683 () Int)
(declare-fun x40 (Int) Int)
(declare-fun x28 () Int)
(declare-fun x647 () Bool)
(declare-fun x888 () Int)
(declare-fun x535 () Bool)
(declare-fun x379 () Bool)
(declare-fun x818 () Int)
(declare-fun x748 () Bool)
(declare-fun x524 () Int)
(declare-fun x539 () Int)
(declare-fun x107 () Bool)
(declare-fun x521 () Int)
(declare-fun x307 () Int)
(declare-fun x502 () Int)
(declare-fun x108 () Bool)
(declare-fun x855 () Int)
(declare-fun x765 () Bool)
(declare-fun x242 () Int)
(declare-fun x488 () Bool)
(declare-fun x405 (Int) Int)
(declare-fun x306 (Int) Int)
(declare-fun x1064 () Bool)
(declare-fun x960 () Int)
(declare-fun x515 () Bool)
(declare-fun x93 () Bool)
(declare-fun x257 () Int)
(declare-fun x976 () Bool)
(declare-fun x511 () Bool)
(declare-fun x679 () Int)
(declare-fun x62 () Int)
(declare-fun x1084 () Int)
(declare-fun x258 () Int)
(declare-fun x951 () Int)
(declare-fun x1095 () Bool)
(declare-fun x120 () Int)
(declare-fun x195 () Int)
(declare-fun x338 () Bool)
(declare-fun x640 () Int)
(declare-fun x141 () Int)
(declare-fun x175 () Bool)
(declare-fun x780 () Int)
(declare-fun x199 () Bool)
(declare-fun x1110 () Int)
(declare-fun x1068 () Int)
(declare-fun x364 () Int)
(declare-fun x723 () Int)
(declare-fun x139 () Bool)
(declare-fun x483 () Int)
(declare-fun x346 () Int)
(declare-fun x795 () Int)
(declare-fun x845 () Int)
(declare-fun x669 () Int)
(declare-fun x464 () Bool)
(declare-fun x38 () Int)
(declare-fun x550 () Int)
(declare-fun x482 () Int)
(declare-fun x212 () Int)
(declare-fun x653 () Int)
(declare-fun x1055 () Int)
(declare-fun x611 () Bool)
(declare-fun x278 () Bool)
(declare-fun x293 () Int)
(declare-fun x470 () Int)
(declare-fun x358 () Bool)
(declare-fun x825 () Bool)
(declare-fun x1004 () Bool)
(declare-fun x811 () Int)
(declare-fun x245 () Bool)
(declare-fun x921 () Int)
(declare-fun x213 () Int)
(declare-fun x309 () Bool)
(declare-fun x928 () Bool)
(declare-fun x355 () Bool)
(declare-fun x227 () Bool)
(declare-fun x891 () Bool)
(declare-fun x328 () Int)
(declare-fun x729 () Bool)
(declare-fun x918 () Bool)
(declare-fun x872 () Int)
(declare-fun x769 () Int)
(declare-fun x1036 () Bool)
(declare-fun x408 () Bool)
(declare-fun x556 () Int)
(declare-fun x353 () Int)
(declare-fun x905 () Int)
(declare-fun x598 () Int)
(declare-fun x537 () Int)
(declare-fun x518 () Int)
(declare-fun x156 () Int)
(declare-fun x342 () Bool)
(declare-fun x800 () Int)
(declare-fun x352 () Int)
(declare-fun x806 () Int)
(declare-fun x540 () Bool)
(declare-fun x649 () Bool)
(declare-fun x595 () Int)
(declare-fun x145 () Bool)
(declare-fun x579 () Bool)
(declare-fun x652 () Int)
(declare-fun x617 (Int) Int)
(declare-fun x594 () Bool)
(declare-fun x1057 () Bool)
(declare-fun x286 () Int)
(declare-fun x301 () Int)
(declare-fun x205 () Int)
(declare-fun x1083 () Int)
(declare-fun x883 () Int)
(declare-fun x583 () Bool)
(declare-fun x169 () Bool)
(declare-fun x251 (Int Int) Int)
(declare-fun x217 () Bool)
(declare-fun x848 () Bool)
(declare-fun x304 () Int)
(declare-fun x711 () Bool)
(declare-fun x666 () Int)
(declare-fun x759 () Int)
(declare-fun x89 () Int)
(declare-fun x885 () Int)
(declare-fun x516 () Int)
(declare-fun x651 () Int)
(declare-fun x603 () Int)
(declare-fun x972 (Int Int) Int)
(declare-fun x673 (Int) Int)
(declare-fun x857 () Bool)
(declare-fun x911 () Int)
(declare-fun x85 () Int)
(declare-fun x1001 () Bool)
(declare-fun x418 () Int)
(declare-fun x736 () Bool)
(declare-fun x265 () Int)
(declare-fun x409 () Int)
(declare-fun x179 () Int)
(declare-fun x887 () Bool)
(declare-fun x846 () Bool)
(declare-fun x109 (Int) Int)
(declare-fun x375 () Int)
(declare-fun x974 () Bool)
(declare-fun x1033 () Int)
(declare-fun x389 () Bool)
(declare-fun x331 (Int) Int)
(declare-fun x680 () Bool)
(declare-fun x168 () Int)
(declare-fun x154 () Int)
(declare-fun x1102 () Int)
(declare-fun x92 () Bool)
(declare-fun x507 () Bool)
(declare-fun x221 () Bool)
(declare-fun x936 (Int) Int)
(declare-fun x146 () Int)
(declare-fun x1035 () Bool)
(declare-fun x549 () Int)
(declare-fun x459 () Int)
(declare-fun x1093 () Int)
(declare-fun x177 () Bool)
(declare-fun x619 () Int)
(declare-fun x949 () Int)
(declare-fun x125 () Bool)
(declare-fun x277 () Int)
(declare-fun x570 () Bool)
(declare-fun x737 () Int)
(declare-fun x2 () Bool)
(declare-fun x312 () Bool)
(declare-fun x206 () Int)
(declare-fun x886 () Bool)
(declare-fun x429 () Bool)
(declare-fun x1089 (Int) Int)
(declare-fun x131 () Bool)
(declare-fun x504 () Bool)
(declare-fun x61 () Bool)
(declare-fun x95 () Bool)
(declare-fun x850 () Bool)
(declare-fun x956 () Bool)
(declare-fun x274 () Bool)
(declare-fun x876 () Int)
(declare-fun x203 () Int)
(declare-fun x400 () Int)
(declare-fun x387 () Int)
(declare-fun x817 () Bool)
(declare-fun x492 () Bool)
(declare-fun x621 () Bool)
(declare-fun x17 () Bool)
(declare-fun x713 () Int)
(declare-fun x204 () Int)
(declare-fun x591 () Bool)
(declare-fun x249 () Int)
(declare-fun x209 () Int)
(declare-fun x957 () Bool)
(declare-fun x699 () Bool)
(declare-fun x474 () Int)
(declare-fun x742 () Bool)
(declare-fun x551 () Bool)
(declare-fun x794 () Int)
(declare-fun x142 () Bool)
(declare-fun x465 () Bool)
(declare-fun x837 () Int)
(declare-fun x23 () Bool)
(declare-fun x244 () Bool)
(declare-fun x280 () Int)
(declare-fun x832 () Bool)
(declare-fun x415 () Int)
(declare-fun x1119 () Int)
(declare-fun x26 () Int)
(declare-fun x13 () Int)
(declare-fun x426 () Bool)
(declare-fun x941 () Int)
(declare-fun x986 () Bool)
(declare-fun x625 () Bool)
(declare-fun x804 () Int)
(declare-fun x52 () Bool)
(declare-fun x31 () Int)
(declare-fun x994 () Int)
(declare-fun x44 () Int)
(declare-fun x158 () Int)
(declare-fun x620 () Bool)
(declare-fun x368 () Int)
(declare-fun x831 () Int)
(declare-fun x263 () Int)
(declare-fun x602 () Bool)
(declare-fun x386 () Int)
(declare-fun x381 () Int)
(declare-fun x572 () Bool)
(declare-fun x310 () Int)
(declare-fun x427 () Int)
(declare-fun x600 () Int)
(declare-fun x67 () Bool)
(declare-fun x421 () Bool)
(declare-fun x686 () Int)
(declare-fun x722 () Bool)
(declare-fun x382 () Int)
(declare-fun x523 () Bool)
(declare-fun x893 () Int)
(declare-fun x22 () Bool)
(declare-fun x243 () Int)
(declare-fun x1113 () Bool)
(declare-fun x979 () Int)
(declare-fun x276 () Int)
(declare-fun x1000 () Bool)
(declare-fun x978 () Int)
(declare-fun x768 () Bool)
(declare-fun x758 () Bool)
(declare-fun x695 () Bool)
(declare-fun x1020 () Int)
(declare-fun x395 () Bool)
(declare-fun x410 () Int)
(declare-fun x1053 () Bool)
(declare-fun x1049 () Bool)
(declare-fun x509 () Bool)
(declare-fun x641 () Int)
(declare-fun x383 (Int Int) Int)
(declare-fun x11 () Bool)
(declare-fun x934 () Int)
(declare-fun x752 () Bool)
(declare-fun x658 () Bool)
(declare-fun x36 () Int)
(declare-fun x412 () Int)
(declare-fun x406 () Bool)
(declare-fun x111 () Bool)
(declare-fun x1050 () Bool)
(declare-fun x997 () Int)
(declare-fun x341 () Bool)
(declare-fun x261 () Int)
(declare-fun x1079 () Int)
(declare-fun x585 () Bool)
(declare-fun x452 () Int)
(declare-fun x867 () Int)
(declare-fun x7 () Bool)
(declare-fun x990 () Bool)
(declare-fun x34 () Int)
(declare-fun x240 () Int)
(declare-fun x675 () Int)
(declare-fun x851 () Int)
(declare-fun x728 () Bool)
(declare-fun x937 () Bool)
(declare-fun x1098 () Bool)
(declare-fun x778 () Int)
(declare-fun x1059 () Bool)
(declare-fun x954 () Int)
(declare-fun x273 () Bool)
(declare-fun x137 () Bool)
(declare-fun x543 () Int)
(declare-fun x345 () Int)
(declare-fun x128 () Bool)
(declare-fun x1126 () Bool)
(declare-fun x770 () Int)
(declare-fun x149 () Int)
(declare-fun x1090 () Int)
(declare-fun x555 () Int)
(declare-fun x136 () Int)
(declare-fun x489 () Bool)
(declare-fun x396 () Bool)
(declare-fun x981 () Int)
(declare-fun x1018 (Int) Int)
(declare-fun x783 () Bool)
(declare-fun x554 () Bool)
(declare-fun x734 () Bool)
(declare-fun x1030 () Bool)
(declare-fun x751 () Int)
(declare-fun x827 () Int)
(declare-fun x672 () Bool)
(declare-fun x54 () Int)
(declare-fun x1123 () Bool)
(declare-fun x644 () Int)
(declare-fun x1076 () Bool)
(declare-fun x750 () Bool)
(declare-fun x303 (Int) Int)
(declare-fun x70 () Bool)
(declare-fun x953 () Int)
(declare-fun x903 () Bool)
(declare-fun x495 () Int)
(declare-fun x856 () Int)
(declare-fun x945 () Bool)
(declare-fun x899 () Bool)
(declare-fun x590 () Int)
(declare-fun x987 () Int)
(declare-fun x989 () Int)
(declare-fun x372 () Int)
(declare-fun x998 () Int)
(declare-fun x895 () Bool)
(declare-fun x247 () Int)
(declare-fun x1086 () Bool)
(declare-fun x318 () Int)
(declare-fun x843 () Int)
(declare-fun x106 () Bool)
(declare-fun x777 () Bool)
(declare-fun x1109 () Bool)
(declare-fun x184 () Int)
(declare-fun x1118 () Int)
(declare-fun x541 () Bool)
(declare-fun x559 () Int)
(declare-fun x735 () Int)
(declare-fun x497 () Int)
(declare-fun x490 () Bool)
(declare-fun x246 () Bool)
(declare-fun x435 () Int)
(declare-fun x472 () Bool)
(declare-fun x255 () Int)
(declare-fun x1066 () Bool)
(declare-fun x494 () Bool)
(declare-fun x1062 () Int)
(declare-fun x864 () Int)
(declare-fun x1100 () Bool)
(declare-fun x82 () Int)
(declare-fun x781 () Int)
(declare-fun x879 () Bool)
(declare-fun x542 () Bool)
(declare-fun x534 () Int)
(declare-fun x557 () Bool)
(declare-fun x877 () Int)
(declare-fun x115 () Bool)
(declare-fun x610 () Bool)
(declare-fun x343 () Bool)
(declare-fun x94 () Int)
(declare-fun x20 () Int)
(declare-fun x915 (Int) Int)
(declare-fun x922 () Int)
(declare-fun x60 () Int)
(declare-fun x160 () Bool)
(declare-fun x462 () Int)
(declare-fun x121 () Bool)
(declare-fun x1011 () Int)
(declare-fun x211 () Bool)
(declare-fun x455 () Bool)
(declare-fun x130 (Int) Int)
(declare-fun x565 () Bool)
(declare-fun x597 () Int)
(declare-fun x571 () Int)
(declare-fun x581 () Int)
(declare-fun x894 () Int)
(declare-fun x390 () Bool)
(declare-fun x589 () Bool)
(declare-fun x999 () Bool)
(declare-fun x952 () Bool)
(declare-fun x1026 () Int)
(declare-fun x1043 () Bool)
(declare-fun x193 () Int)
(declare-fun x1052 () Bool)
(declare-fun x743 () Bool)
(declare-fun x627 () Bool)
(declare-fun x637 () Bool)
(declare-fun x943 () Bool)
(declare-fun x744 () Int)
(declare-fun x1042 () Bool)
(declare-fun x384 () Bool)
(declare-fun x664 () Int)
(declare-fun x1029 () Int)
(declare-fun x650 () Int)
(declare-fun x838 () Int)
(declare-fun x114 () Int)
(declare-fun x361 () Int)
(declare-fun x596 () Int)
(declare-fun x741 () Int)
(declare-fun x24 () Int)
(declare-fun x968 () Bool)
(declare-fun x501 () Int)
(declare-fun x214 () Int)
(declare-fun x385 () Bool)
(declare-fun x481 () Bool)
(declare-fun x982 () Int)
(declare-fun x902 () Int)
(declare-fun x399 () Int)
(declare-fun x878 () Int)
(declare-fun x707 () Int)
(declare-fun x940 () Int)
(declare-fun x1107 () Bool)
(declare-fun x569 () Int)
(declare-fun x479 () Int)
(declare-fun x294 () Bool)
(declare-fun x962 () Int)
(declare-fun x738 () Bool)
(declare-fun x113 () Int)
(declare-fun x151 () Int)
(declare-fun x300 () Int)
(declare-fun x985 () Int)
(declare-fun x599 () Int)
(declare-fun x325 () Bool)
(declare-fun x262 () Int)
(declare-fun x1031 () Int)
(declare-fun x73 () Int)
(declare-fun x725 () Int)
(declare-fun x170 () Bool)
(declare-fun x789 () Bool)
(declare-fun x413 () Int)
(declare-fun x663 () Bool)
(declare-fun x323 () Bool)
(declare-fun x155 () Bool)
(declare-fun x1032 () Bool)
(declare-fun x161 () Int)
(declare-fun x186 () Int)
(declare-fun x881 () Int)
(declare-fun x613 () Bool)
(declare-fun x724 () Bool)
(declare-fun x1081 () Int)
(declare-fun x503 () Int)
(declare-fun x188 () Int)
(declare-fun x513 () Int)
(declare-fun x423 (Int) Int)
(declare-fun x938 () Bool)
(declare-fun x836 () Bool)
(declare-fun x606 () Bool)
(declare-fun x484 () Int)
(declare-fun x498 () Int)
(declare-fun x140 () Int)
(declare-fun x129 () Bool)
(declare-fun x698 () Int)
(declare-fun x99 () Bool)
(declare-fun x420 () Int)
(declare-fun x1125 () Bool)
(declare-fun x517 () Bool)
(declare-fun x314 () Int)
(declare-fun x712 () Int)
(declare-fun x432 () Int)
(declare-fun x842 () Int)
(declare-fun x873 () Int)
(declare-fun x808 () Bool)
(declare-fun x932 () Int)
(declare-fun x814 () Int)
(declare-fun x68 () Bool)
(declare-fun x897 () Bool)
(declare-fun x696 () Int)
(declare-fun x1124 () Bool)
(declare-fun x419 () Bool)
(declare-fun x575 () Bool)
(declare-fun x917 () Bool)
(declare-fun x530 () Int)
(declare-fun x1103 () Bool)
(declare-fun x468 () Int)
(declare-fun x443 () Bool)
(declare-fun x701 () Int)
(declare-fun x833 () Bool)
(declare-fun x1045 () Int)
(declare-fun x239 () Bool)
(declare-fun x1010 () Bool)
(declare-fun x745 () Bool)
(declare-fun x667 () Bool)
(declare-fun x110 () Int)
(declare-fun x27 () Bool)
(declare-fun x197 () Bool)
(declare-fun x607 () Bool)
(declare-fun x988 () Int)
(declare-fun x66 () Int)
(declare-fun x1120 () Int)
(declare-fun x45 () Int)
(declare-fun x646 () Bool)
(declare-fun x578 () Bool)
(declare-fun x608 () Int)
(declare-fun x478 () Bool)
(declare-fun x980 () Bool)
(declare-fun x86 () Int)
(declare-fun x623 () Int)
(declare-fun x1108 () Bool)
(declare-fun x826 () Int)
(declare-fun x665 () Bool)
(declare-fun x634 () Int)
(declare-fun x703 () Bool)
(declare-fun x996 () Int)
(declare-fun x327 () Int)
(declare-fun x526 () Bool)
(declare-fun x930 () Int)
(declare-fun x53 () Bool)
(declare-fun x1060 () Int)
(declare-fun x1061 () Int)
(declare-fun x1087 () Int)
(declare-fun x80 () Bool)
(declare-fun x289 () Int)
(declare-fun x1015 () Int)
(declare-fun x1024 () Int)
(declare-fun x51 () Int)
(declare-fun x655 () Bool)
(declare-fun x430 () Bool)
(declare-fun x164 () Bool)
(declare-fun x237 () Bool)
(declare-fun x402 () Int)
(declare-fun x892 () Bool)
(declare-fun x210 () Int)
(declare-fun x520 () Bool)
(declare-fun x935 (Int) Int)
(declare-fun x706 (Int) Int)
(declare-fun x604 () Int)
(declare-fun x648 () Int)
(declare-fun x1078 () Bool)
(declare-fun x605 () Int)
(declare-fun x761 () Bool)
(declare-fun x946 () Bool)
(declare-fun x785 () Bool)
(declare-fun x126 () Bool)
(declare-fun x4 () Int)
(declare-fun x220 () Int)
(declare-fun x1005 () Int)
(declare-fun x37 () Int)
(declare-fun x548 () Int)
(declare-fun x923 () Int)
(declare-fun x676 () Bool)
(declare-fun x57 () Bool)
(declare-fun x519 () Int)
(declare-fun x447 () Int)
(declare-fun x266 () Int)
(declare-fun x201 () Int)
(declare-fun x944 () Int)
(declare-fun x632 () Bool)
(declare-fun x901 () Int)
(declare-fun x202 () Int)
(declare-fun x180 () Bool)
(declare-fun x991 () Bool)
(declare-fun x760 () Bool)
(declare-fun x816 () Int)
(declare-fun x564 () Int)
(declare-fun x626 () Int)
(declare-fun x933 () Bool)
(declare-fun x200 () Bool)
(declare-fun x733 () Int)
(declare-fun x863 () Bool)
(declare-fun x754 () Bool)
(declare-fun x1094 () Int)
(declare-fun x260 () Int)
(declare-fun x448 () Bool)
(declare-fun x76 () Bool)
(declare-fun x56 () Int)
(declare-fun x796 () Bool)
(declare-fun x889 () Int)
(declare-fun x573 () Bool)
(declare-fun x587 () Int)
(declare-fun x506 () Bool)
(declare-fun x102 () Bool)
(declare-fun x767 () Int)
(declare-fun x69 (Int) Int)
(declare-fun x47 () Int)
(declare-fun x532 () Bool)
(declare-fun x354 () Int)
(declare-fun x700 () Bool)
(declare-fun x407 () Int)
(declare-fun x645 () Int)
(declare-fun x208 () Bool)
(declare-fun x374 () Int)
(declare-fun x815 () Bool)
(declare-fun x19 () Int)
(declare-fun x984 () Bool)
(declare-fun x593 () Int)
(declare-fun x563 () Int)
(declare-fun x285 () Int)
(declare-fun x74 () Int)
(declare-fun x159 () Bool)
(declare-fun x417 () Bool)
(declare-fun x166 () Bool)
(declare-fun x165 () Int)
(declare-fun x446 () Bool)
(declare-fun x1028 () Bool)
(declare-fun x79 () Int)
(declare-fun x58 () Bool)
(declare-fun x350 () Int)
(declare-fun x96 () Bool)
(declare-fun x799 () Int)
(declare-fun x871 () Int)
(declare-fun x638 () Int)
(declare-fun x308 () Int)
(declare-fun x223 () Bool)
(declare-fun x853 () Bool)
(declare-fun x656 () Bool)
(declare-fun x230 () Bool)
(declare-fun x59 () Bool)
(declare-fun x63 () Bool)
(declare-fun x1003 () Int)
(declare-fun x324 () Int)
(declare-fun x654 () Int)
(declare-fun x629 () Int)
(declare-fun x333 () Bool)
(declare-fun x369 () Int)
(declare-fun x527 () Int)
(declare-fun x1069 () Int)
(declare-fun x98 () Int)
(declare-fun x349 () Int)
(declare-fun x522 () Int)
(declare-fun x1063 () Int)
(declare-fun x529 () Int)
(declare-fun x992 () Bool)
(declare-fun x576 () Bool)
(declare-fun x241 () Bool)
(declare-fun x116 () Int)
(declare-fun x926 () Bool)
(declare-fun x546 () Int)
(declare-fun x454 () Bool)
(declare-fun x927 () Int)
(declare-fun x970 () Int)
(declare-fun x890 () Int)
(declare-fun x48 () Int)
(declare-fun x704 () Int)
(declare-fun x397 () Int)
(declare-fun x909 () Bool)
(declare-fun x43 () Bool)
(declare-fun x362 () Int)
(declare-fun x628 () Bool)
(declare-fun x330 () Int)
(declare-fun x682 () Bool)
(declare-fun x157 () Int)
(declare-fun x914 () Bool)
(declare-fun x181 () Bool)
(declare-fun x510 () Int)
(declare-fun x801 () Int)
(declare-fun x356 () Bool)
(declare-fun x176 () Int)
(declare-fun x394 () Int)
(declare-fun x870 () Int)
(define-fun x904 ((x90 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x90) (>= x90 0)) x90 (- x90 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x16 ((x90 Int)) Int (ite (and (> 0 x90) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x90)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x90) x90))
(define-fun x1056 ((x592 Int)) Bool (and (< x592 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x592)))
(define-fun x983 ((x592 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x592) (>= x592 0)))
(define-fun x315 ((x592 Int)) Bool (and (= (x972 x592 115792089237316195423570985008687907853269984665640564039457584007913129639935) x592) (= x592 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639935 x592))))
(define-fun x313 ((x592 Int)) Bool (and (= 0 (x972 x592 0)) (= 0 (x972 0 x592))))
(define-fun x560 ((x592 Int)) Bool (= x592 (x972 x592 x592)))
(define-fun x248 ((x592 Int)) Bool (and (x560 x592) (x313 x592) (x315 x592)))
(define-fun x810 ((x592 Int) (x1080 Int)) Bool (= (x972 x1080 x592) (x972 x592 x1080)))
(define-fun x450 ((x592 Int) (x1080 Int)) Bool (and (=> (<= 0 x1080) (<= (x972 x592 x1080) x1080)) (=> (>= x592 0) (>= x592 (x972 x592 x1080))) (>= (x972 x592 x1080) 0)))
(define-fun x471 ((x592 Int) (x1080 Int)) Bool (and (x810 x592 x1080) (x450 x592 x1080)))
(define-fun x398 ((x592 Int)) Bool (= (mod x592 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x592 32) (x972 x592 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x869 ((x592 Int)) Bool (and (x471 x592 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x398 x592)))
(define-fun x882 ((x592 Int)) Bool (= (mod x592 1461501637330902918203684832716283019655932542976) (x972 x592 1461501637330902918203684832716283019655932542975)))
(define-fun x496 ((x592 Int)) Bool (and (x471 x592 1461501637330902918203684832716283019655932542975) (x882 x592)))
(define-fun x553 ((x562 Int)) Int (ite (> x386 x562) (x936 x562) 0))
(define-fun x1007 ((x562 Int)) Int (x69 x562))
(define-fun x1121 ((x562 Int)) Int (ite (= x120 x562) x744 (x414 x562)))
(define-fun x660 ((x562 Int)) Int (ite (= x562 x619) x614 (x1121 x562)))
(define-fun x219 ((x562 Int)) Int (ite (= x562 128) x235 (x423 x562)))
(define-fun x858 ((x562 Int)) Int (ite (and (>= x562 160) (> (+ x235 160) x562)) (x69 (+ x1 (- x562 160))) (x219 x562)))
(define-fun x370 ((x562 Int)) Int (ite (= x562 x497) 0 (x858 x562)))
(define-fun x50 ((x562 Int)) Int (ite (= x1069 x562) x1034 (x370 x562)))
(define-fun x272 ((x562 Int)) Int (ite (and (< x562 (+ x1034 x275)) (>= x562 x275)) (x69 (+ (- x562 x275) x252)) (x50 x562)))
(define-fun x514 ((x562 Int)) Int (ite (= x266 x562) 0 (x272 x562)))
(define-fun x148 ((x562 Int)) Int (ite (= x216 x562) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x514 x562)))
(define-fun x72 ((x562 Int)) Int (ite (= x562 x98) 160 (x148 x562)))
(define-fun x424 ((x562 Int)) Int (ite (= x932 x562) x372 (x72 x562)))
(define-fun x755 ((x562 Int)) Int (ite (= x683 x562) x934 (x424 x562)))
(define-fun x21 ((x562 Int)) Int (ite (= x562 x590) x482 (x755 x562)))
(define-fun x1013 ((x562 Int)) Int (ite (= x562 x559) x1003 (x21 x562)))
(define-fun x919 ((x562 Int)) Int (ite (= x842 x562) x62 (x1013 x562)))
(define-fun x133 ((x562 Int)) Int (ite x443 (x1013 x562) (ite x129 (x21 x562) (ite x558 (x755 x562) (ite x419 (x424 x562) (x919 x562))))))
(define-fun x6 ((x562 Int)) Int (ite (= x871 x562) 0 (x133 x562)))
(define-fun x75 ((x562 Int)) Int (ite x671 (x133 x562) (x6 x562)))
(define-fun x226 ((x562 Int)) Int (ite (= x562 x352) x363 (x75 x562)))
(define-fun x371 ((x562 Int)) Int (ite (= x186 x562) x178 (x226 x562)))
(define-fun x533 ((x562 Int)) Int (ite (= x788 x562) x84 (x371 x562)))
(define-fun x812 ((x562 Int)) Int (ite (= x377 x562) x524 (x533 x562)))
(define-fun x100 ((x562 Int)) Int (ite (= x1092 x562) x116 (x812 x562)))
(define-fun x499 ((x562 Int)) Int (ite (= x562 x295) x843 (x100 x562)))
(define-fun x688 ((x562 Int)) Int (ite x606 (x100 x562) (ite x520 (x812 x562) (ite x416 (x533 x562) (ite x227 (x371 x562) (x499 x562))))))
(define-fun x802 ((x562 Int)) Int (ite (= x562 x964) 0 (x688 x562)))
(define-fun x357 ((x562 Int)) Int (ite x984 (x688 x562) (x802 x562)))
(define-fun x678 ((x562 Int)) Int (ite (= x562 x531) x652 (x357 x562)))
(define-fun x332 ((x562 Int)) Int (ite (= x562 x473) x399 (x678 x562)))
(define-fun x39 ((x562 Int)) Int (ite (= x951 x562) x15 (x332 x562)))
(define-fun x512 ((x562 Int)) Int (ite (= x811 x562) x965 (x39 x562)))
(define-fun x1112 ((x562 Int)) Int (ite (= x894 x562) x101 (x512 x562)))
(define-fun x401 ((x562 Int)) Int (ite (= x1115 x562) x757 (x1112 x562)))
(define-fun x798 ((x562 Int)) Int (ite (= x562 x1074) x60 (x401 x562)))
(define-fun x218 ((x562 Int)) Int (ite x164 (x401 x562) (ite x773 (x1112 x562) (ite x1025 (x512 x562) (ite x166 (x39 x562) (x798 x562))))))
(define-fun x875 ((x562 Int)) Int (ite (= x562 x381) x318 (x218 x562)))
(define-fun x681 ((x562 Int)) Int (ite (= x562 x193) x402 (x875 x562)))
(define-fun x296 ((x562 Int)) Int (ite (= x710 x562) x261 (x681 x562)))
(define-fun x775 ((x562 Int)) Int (ite (= x562 x4) x191 (x296 x562)))
(define-fun x1021 ((x562 Int)) Int (ite (and (<= x605 x562) (> (+ x605 x191) x562)) (x69 (+ x97 (- x562 x605))) (x775 x562)))
(define-fun x319 ((x562 Int)) Int (ite (= x562 x985) 0 (x1021 x562)))
(define-fun x967 ((x562 Int)) Int (ite x695 (x681 x562) (x319 x562)))
(define-fun x135 ((x562 Int)) Int (ite (= x562 x216) x205 (x967 x562)))
(define-fun x103 ((x562 Int)) Int (ite x583 (x967 x562) (ite x532 (x135 x562) (x967 x562))))
(define-fun x1051 ((x562 Int)) Int (ite (= x354 x562) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x103 x562)))
(define-fun x896 ((x562 Int)) Int (ite (and (> (+ x354 32) x562) (<= x354 x562)) (x1018 (+ (- x562 x354) 0)) (x1051 x562)))
(define-fun x545 ((x562 Int)) Int (ite (and (< x562 (+ 196 (x16 (- x447 196)))) (>= x562 196)) (x967 (+ (x904 (+ 196 x216)) (- x562 196))) (x553 x562)))
(define-fun x969 ((x562 Int)) Int (ite (= 128 x562) x236 (x1089 x562)))
(define-fun x367 ((x562 Int)) Int (ite (and (> (+ x236 160) x562) (>= x562 160)) (x545 (+ 196 (- x562 160))) (x969 x562)))
(define-fun x460 ((x562 Int)) Int (ite (= x288 x562) 0 (x367 x562)))
(define-fun x624 ((x562 Int)) Int (ite (= x1114 x562) x210 (x460 x562)))
(define-fun x643 ((x562 Int)) Int (ite (and (< x562 (+ x1110 x210)) (<= x1110 x562)) (x545 (+ (- x562 x1110) x491)) (x624 x562)))
(define-fun x852 ((x562 Int)) Int (ite (= x587 x562) 0 (x643 x562)))
(define-fun x1077 ((x562 Int)) Int (ite (= x562 x427) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x852 x562)))
(define-fun x908 ((x562 Int)) Int (ite (= x562 x427) x348 (x1077 x562)))
(define-fun x995 ((x562 Int)) Int (ite (= x619 x562) x715 (x660 x562)))
(define-fun x913 ((x562 Int)) Int (ite (= x562 x881) x522 (x995 x562)))
(define-fun x1008 ((x562 Int)) Int (ite (and (>= x562 x856) (< x562 (+ x856 0))) (x915 (+ 0 (- x562 x856))) (x908 x562)))
(define-fun x764 ((x562 Int)) Int (ite x734 (x908 x562) (ite x946 (x1008 x562) (x908 x562))))
(define-fun x335 ((x562 Int)) Int (ite x734 (x617 x562) (x915 x562)))
(define-fun x929 ((x562 Int)) Int (ite (= x856 x562) x287 (x764 x562)))
(define-fun x948 ((x562 Int)) Int (ite (and (> (+ x387 x287) x562) (>= x562 x387)) (x335 (+ (- x562 x387) 0)) (x929 x562)))
(define-fun x508 ((x562 Int)) Int (ite x946 (x130 x562) (x913 x562)))
(define-fun x925 ((x562 Int)) Int (ite (= x562 x881) x28 (x508 x562)))
(define-fun x442 ((x562 Int)) Int (ite (= x619 x562) x538 (x925 x562)))
(define-fun x173 ((x562 Int)) Int (ite x500 (x660 x562) (ite x734 (x660 x562) (ite x92 (x508 x562) (x442 x562)))))
(define-fun x105 ((x562 Int)) Int (ite x500 (x852 x562) (ite x805 (x764 x562) (x948 x562))))
(define-fun x302 ((x562 Int)) Int (ite (= x619 x562) x598 (x173 x562)))
(define-fun x1009 ((x562 Int)) Int (ite (= x562 x79) x1120 (x302 x562)))
(define-fun x1071 ((x562 Int)) Int (ite (= x562 x79) x548 (x1009 x562)))
(define-fun x215 ((x562 Int)) Int (ite (= x619 x562) x1082 (x1071 x562)))
(define-fun x910 ((x562 Int)) Int (ite (= x30 x562) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x105 x562)))
(define-fun x12 ((x562 Int)) Int (ite (= x562 x300) 192 (x910 x562)))
(define-fun x766 ((x562 Int)) Int (ite (= x911 x562) x1061 (x12 x562)))
(define-fun x705 ((x562 Int)) Int (ite (= x970 x562) x653 (x766 x562)))
(define-fun x493 ((x562 Int)) Int (ite (= x629 x562) x74 (x705 x562)))
(define-fun x254 ((x562 Int)) Int (ite (= x562 x202) x690 (x493 x562)))
(define-fun x792 ((x562 Int)) Int (ite x565 (x303 x562) (x215 x562)))
(define-fun x347 ((x562 Int)) Int (ite x434 (x792 x562) (ite x441 (x306 x562) (x792 x562))))
(define-fun x439 ((x562 Int)) Int (ite (= x562 x648) x495 (x254 x562)))
(define-fun x267 ((x562 Int)) Int (ite x903 (x254 x562) (ite x1004 (x493 x562) (ite x279 (x705 x562) (ite x465 (x766 x562) (x439 x562))))))
(define-fun x326 ((x562 Int)) Int (ite (= x562 x78) 0 (x267 x562)))
(define-fun x859 ((x562 Int)) Int (ite x879 (x267 x562) (x326 x562)))
(define-fun x190 ((x562 Int)) Int (ite (= x201 x562) x634 (x859 x562)))
(define-fun x1104 ((x562 Int)) Int (ite (= x1044 x562) x900 (x190 x562)))
(define-fun x1075 ((x562 Int)) Int (ite (= x562 x359) x709 (x1104 x562)))
(define-fun x1091 ((x562 Int)) Int (ite (= x562 x189) x138 (x1075 x562)))
(define-fun x322 ((x562 Int)) Int (ite (= x674 x562) x827 (x1091 x562)))
(define-fun x819 ((x562 Int)) Int (ite (= x562 x212) x814 (x322 x562)))
(define-fun x561 ((x562 Int)) Int (ite x27 (x322 x562) (ite x160 (x1091 x562) (ite x1028 (x1075 x562) (ite x839 (x1104 x562) (x819 x562))))))
(define-fun x687 ((x562 Int)) Int (ite (= x989 x562) 0 (x561 x562)))
(define-fun x1054 ((x562 Int)) Int (ite x316 (x561 x562) (x687 x562)))
(define-fun x457 ((x562 Int)) Int (ite (= x1038 x562) x1012 (x1054 x562)))
(define-fun x1127 ((x562 Int)) Int (ite (= x519 x562) x529 (x457 x562)))
(define-fun x1047 ((x562 Int)) Int (ite (= x562 x818) x550 (x1127 x562)))
(define-fun x117 ((x562 Int)) Int (ite (= x684 x562) x599 (x1047 x562)))
(define-fun x1023 ((x562 Int)) Int (ite (and (<= x30 x562) (> (+ x30 0) x562)) (x40 (+ (- x562 x30) 0)) (x117 x562)))
(define-fun x256 ((x562 Int)) Int (ite x565 (x1023 x562) (x117 x562)))
(define-fun x305 ((x562 Int)) Int (ite (= x562 x66) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x256 x562)))
(define-fun x5 ((x562 Int)) Int (ite (= x310 x562) x1084 (x305 x562)))
(define-fun x225 ((x562 Int)) Int (ite (= x31 x562) x536 (x5 x562)))
(define-fun x973 ((x562 Int)) Int (ite (= x677 x562) x44 (x225 x562)))
(define-fun x566 ((x562 Int)) Int (ite (= x769 x562) x47 (x973 x562)))
(define-fun x756 ((x562 Int)) Int (ite x551 (x973 x562) (ite x422 (x225 x562) (ite x488 (x5 x562) (ite x325 (x305 x562) (x566 x562))))))
(define-fun x950 ((x562 Int)) Int (ite (= x263 x562) 0 (x756 x562)))
(define-fun x182 ((x562 Int)) Int (ite x957 (x756 x562) (x950 x562)))
(define-fun x866 ((x562 Int)) Int (ite (= x30 x562) x780 (x182 x562)))
(define-fun x317 ((x562 Int)) Int (ite (= x220 x562) x259 (x866 x562)))
(define-fun x657 ((x562 Int)) Int (ite (= x562 x640) x285 (x317 x562)))
(define-fun x834 ((x562 Int)) Int (ite (= x654 x562) x543 (x657 x562)))
(define-fun x525 ((x562 Int)) Int (ite (= x18 x562) x537 (x834 x562)))
(define-fun x174 ((x562 Int)) Int (ite (= x203 x562) x979 (x525 x562)))
(define-fun x291 ((x562 Int)) Int (ite (= x114 x562) x645 (x174 x562)))
(define-fun x282 ((x562 Int)) Int (ite x620 (x174 x562) (ite x42 (x525 x562) (ite x376 (x834 x562) (ite x579 (x657 x562) (x291 x562))))))
(define-fun x334 ((x562 Int)) Int (ite (= x838 x562) 0 (x282 x562)))
(define-fun x147 ((x562 Int)) Int (ite x336 (x282 x562) (x334 x562)))
(define-fun x829 ((x562 Int)) Int (ite (= x562 x701) x392 (x147 x562)))
(define-fun x947 ((x562 Int)) Int (ite x102 (x896 x562) (x1051 x562)))
(define-fun x552 ((x562 Int)) Int (ite (= x562 x418) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x947 x562)))
(define-fun x475 ((x562 Int)) Int (ite (and (< x562 (+ x418 32)) (>= x562 x418)) (x706 (+ 0 (- x562 x418))) (x552 x562)))
(define-fun x1014 ((x562 Int)) Int (ite x453 (x475 x562) (x552 x562)))
(define-fun x697 ((x562 Int)) Int (ite (= x562 x276) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x1014 x562)))
(define-fun x961 ((x562 Int)) Int (ite (and (>= x562 x276) (> (+ 32 x276) x562)) (x405 (+ (- x562 x276) 0)) (x697 x562)))
(define-fun x1072 ((x562 Int)) Int (ite x822 (x961 x562) (x697 x562)))
(define-fun x198 ((x562 Int)) Int (ite (= x854 x562) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x1072 x562)))
(define-fun x231 ((x562 Int)) Int (ite (and (< x562 (+ 32 x854)) (>= x562 x854)) (x331 (+ 0 (- x562 x854))) (x198 x562)))
(define-fun x803 ((x562 Int)) Int (ite x1019 (x231 x562) (x198 x562)))
(define-fun x717 ((x562 Int)) Int (ite (= x784 x562) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x803 x562)))
(define-fun x835 ((x562 Int)) Int (ite (and (> (+ x784 32) x562) (>= x562 x784)) (x673 (+ (- x562 x784) 0)) (x717 x562)))
(define-fun x662 ((x562 Int)) Int (ite x197 (x835 x562) (x717 x562)))
(assert (x983 x470))
(assert (x983 x902))
(assert (x983 x118))
(assert (x983 x202))
(assert (= x999 (and x899 x1032)))
(assert (x983 x753))
(assert (= x515 (and (not x850) x891)))
(assert (x983 x165))
(assert (x983 x912))
(assert (= x461 (and x67 (not x570))))
(assert (x983 x704))
(assert (x983 x927))
(assert (x983 x530))
(assert (= (and (not x175) x228) x1028))
(assert (= (=> (= x159 (not (< 128 x563))) (and (=> (= x906 128) x417) x159)) x93))
(assert (x983 x324))
(assert (x983 x870))
(assert (= x268 (and x121 x458)))
(assert (= (and (not x425) x356) x389))
(assert (x983 x885))
(assert (= x229 (and (not x126) x956)))
(assert (= x724 (and x309 x578)))
(assert (x248 x723))
(assert (= (and (not x1117) x1100) x879))
(assert (x983 x522))
(assert (x983 x555))
(assert (= (and x582 x1040) x1109))
(assert (x983 x569))
(assert (x983 x989))
(assert (x983 x393))
(assert (x983 x626))
(assert (= 0 (x423 (+ (x904 (+ x216 196)) (- (+ (- x314 x1110) x491) 196)))))
(assert (x248 x286))
(assert (x983 x685))
(assert (x983 x854))
(assert (= (or x11 x316) x1076))
(assert (= (and x403 (not x714)) x338))
(assert (x983 x880))
(assert (x983 x1026))
(assert (x983 x415))
(assert (= (=> (and (< x767 256) (= (= 0 x767) x323) (<= 0 x767) (>= 255 x767)) (and (=> (and x323 (and (= x918 (= x204 x751)) (= (x383 x619 x413) x79) (= x1120 (x302 x79)) (= x595 0) (= x1087 (x972 1461501637330902918203684832716283019655932542975 x79)) (= x598 x140) (= x1082 (x1071 x619)) (= x751 x920) x918 (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1120) (= x140 (x173 x619)) (>= x474 0) (<= x474 1461501637330902918203684832716283019655932542975) (= x79 x204) (< (+ x1082 x595) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x413 (x924 x619)) (= x570 (= 0 x1087)) (< x474 1461501637330902918203684832716283019655932542976) (= (x1009 x79) x890) (= x548 x890))) (and (=> (and x570 (and (= x971 x529) (= x912 x1012) (= x378 x599) (= x550 x518) (= x476 0))) x594) (=> (and (not x570) (and (>= x529 0) (= x300 (x904 (+ x30 4))) (= x911 (x904 (+ x300 192))) (<= x550 1461501637330902918203684832716283019655932542975) (<= 0 x550) (>= 1461501637330902918203684832716283019655932542975 x599) (<= x1012 1461501637330902918203684832716283019655932542975) (= x1068 (x904 (+ 32 x911))) (<= 0 x1012) (= x137 (> x1061 0)) (> 1461501637330902918203684832716283019655932542976 x529) (< x550 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x529) (<= 0 x599) (= x1061 (x12 128)) (> 1461501637330902918203684832716283019655932542976 x1012) (= (x972 1461501637330902918203684832716283019655932542975 x79) x781) (< x599 1461501637330902918203684832716283019655932542976))) (and (=> (and (and (= x355 (< 32 x1061)) (= x970 x1068) (= (x766 160) x653)) x137) (and (=> (and (= x873 32) (not x355)) x1073) (=> (and x355 (and (= (x904 (+ x1068 32)) x629) (= (x705 192) x74) (= x1035 (> x1061 64)))) (and (=> (and (not x1035) (= x873 64)) x1073) (=> (and (and (= (< 96 x1061) x779) (= x690 (x493 224)) (= x202 (x904 (+ 64 x1068)))) x1035) (and (=> x779 x916) (=> (and (= x873 96) (not x779)) x1073))))))) (=> (and (= x873 0) (not x137)) x1073))))) (=> (and (and (= x550 x518) (= x912 x1012) (= x599 x378) (= x971 x529) (= 0 x476)) (not x323)) x594))) x573))
(assert (= (or x1098 x472) x736))
(assert (= x244 (and x454 x312)))
(assert (x983 x206))
(assert (= 0 (x1089 256)))
(assert (x248 x623))
(assert (x983 x985))
(assert (= x884 (and x568 x329)))
(assert (x983 x188))
(assert (= (and x711 x448) x1042))
(assert (x983 x953))
(assert (= x682 (and x580 x739)))
(assert (x983 x413))
(assert (= x601 (=> (and (or (and (= x883 x362) (not x70)) (and x70 (and (< x374 4294967296) (= x362 1)))) (and (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x837) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x837)) (< x837 32)))) (>= 1461501637330902918203684832716283019655932542975 x1031) (= x556 (x904 (+ x837 31))) (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x556) x696) (= (x1014 x418) x1031) (= (x904 (+ x696 x418)) x276) (not (= x156 0)) (= (> x883 0) x70))) x680)))
(assert (= 0 (x617 (- x577 x387))))
(assert (= (and x76 (not x323)) x727))
(assert (x983 x104))
(assert (x983 x978))
(assert (x983 x539))
(assert (x983 x491))
(assert (x983 x638))
(assert (= (x423 (+ (x904 (+ 196 x216)) (- (+ x491 (- x1114 x1110)) 196))) 0))
(assert (= (x423 (+ (x904 (+ 196 x216)) (- (+ (- x420 160) 196) 196))) 0))
(assert (x248 x110))
(assert (x983 x788))
(assert (x983 x921))
(assert (x983 x577))
(assert (x983 x690))
(assert (x983 x1094))
(assert (= x1032 (and (not x636) x1027)))
(assert (x983 x24))
(assert (x983 x609))
(assert (x983 x979))
(assert (x983 x1092))
(assert (= (=> (and (or (and (= x845 x856) x933) (and (not x933) (and (= (x904 (+ 32 x856)) x387) (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x242) x581) (= (x904 (+ x581 x856)) x544) (= x544 x845) (= x242 (x904 (+ 63 x287)))))) (= (= 0 x287) x933)) x668) x895))
(assert (x983 x258))
(assert (x983 x375))
(assert (x983 x163))
(assert (x869 x470))
(assert (x1056 x781))
(assert (= x124 (and x153 x621)))
(assert (x983 x873))
(assert (= x1066 (and x850 x891)))
(assert (= (x423 (+ (- x304 196) (x904 (+ 196 x216)))) 0))
(assert (= (=> (and (= (x904 (+ x1068 96)) x648) (= (not (> x1061 128)) x1064) (= (x254 256) x495)) (and x1064 (=> (= 128 x873) x1073))) x916))
(assert (x983 x242))
(assert (x983 x14))
(assert (x983 x534))
(assert (x983 x757))
(assert (x983 x747))
(assert (x983 x648))
(assert (x983 x996))
(assert (x983 x1041))
(assert (= x909 (=> (and (= x769 (x904 (+ x1017 96))) (= x1059 (not (< 128 x308))) (= x420 (x904 (+ x1110 96))) (= x47 (x973 x420))) (and (=> (= 128 x297) x52) x1059))))
(assert (= x279 (and x7 (not x355))))
(assert (x983 x235))
(assert (= x718 (or x879 x823)))
(assert (= x29 (=> (and (= x184 54065695799311150304516525983669583430195215316752708547810291668471328538624) (not (< x1016 4)) (not (= x864 1262878978)) (= x467 x363) (= x1016 x447) (= x535 (or (> x289 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x289 160) (= true (<= x289 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (not (= 1901074598 x864)) (not (= 1845979623 x864)) (> 2220280665 x864) (<= 292 x1016) (= x679 (x431 x619)) (not (= 1553423035 x864)) (= (= (x553 164) x372) x33) (= x447 (x16 (- x346 x216))) (not (> 1245659826 x864)) (< 0 x679) (= (x16 (- x1016 4)) x289) x33 (not (= x864 1245659826)) (= x152 x399) (= x318 x574) (= 2005408114 x864) (= x350 x880)) (and (=> (and x535 (and (= x51 x770) (= x821 x529) (= x599 x143) (= x1012 x826) (= 0 x549) (= x550 x794))) x1103) (=> (and (not x535) (= x425 (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1016) true) (< 195 x1016)))) (and (=> (and (and (= x236 (x545 164)) (= (> x236 18446744073709551615) x980)) x425) (and (=> (and (and (= (< 18446744073709551615 x1114) x789) (= x716 (x904 (+ x698 32))) (= x507 (or x789 x180)) (= x698 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x470)) (= (x904 (+ x1079 128)) x1114) (= x808 (= (ite x507 1 0) 0)) (= (x904 (+ x236 31)) x470) (= x1079 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x623)) (= (< x1114 128) x180) (= x623 (x904 (+ x716 31)))) (not x980)) (and (=> (and (and (= (> x546 x1016) x59) (= (x904 (+ 196 x236)) x546)) x808) (and (=> (and x59 (and (= x378 x599) (= x518 x550) (= x1012 x912) (= x529 x971) (= x476 0))) x594) (=> (and (not x59) (and (= x288 (x904 (+ 160 x236))) (= (< 18446744073709551615 x363) x582))) (and (=> (and (and (= x958 (x904 (+ 4 x467))) (= x631 (x904 (+ 31 x958))) (= (or (and (< x631 x1016) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x631) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1016))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1016) (> x631 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x237)) (not x582)) (and (=> (and (and (= x378 x599) (= x529 x971) (= x550 x518) (= x912 x1012) (= 0 x476)) (not x237)) x594) (=> (and (and (= x210 (x545 x958)) (= (> x210 18446744073709551615) x373) (= x491 (x904 (+ x958 32)))) x237) (and (=> (and (not x373) (and (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x707) x375) (= (x904 (+ x146 31)) x286) (= (> x427 18446744073709551615) x480) (= x487 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x286)) (= (> x1114 x427) x749) (= (x904 (+ x1114 x487)) x427) (= x241 (or x749 x480)) (= x742 (= (ite x241 1 0) 0)) (= x707 (x904 (+ x210 31))) (= (x904 (+ 32 x375)) x146))) (and (=> (and (not x742) (and (= x550 x518) (= x476 0) (= x378 x599) (= x971 x529) (= x912 x1012))) x594) (=> (and x742 (and (= x575 (> x222 x1016)) (= x222 (x904 (+ x210 x491))) (= x1110 (x904 (+ x1114 32))))) (and (=> (and (and (= x587 (x904 (+ x1110 x210))) (= (< 18446744073709551615 x399) x824)) (not x575)) (and (=> (and (and (= x192 (x904 (+ 4 x152))) (= x616 (x904 (+ 31 x192))) (= (or (and (< x616 x1016) (= (<= x1016 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x616))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1016) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x616))) x492)) (not x824)) (and (=> (and (and (= x971 x529) (= x912 x1012) (= x550 x518) (= x599 x378) (= 0 x476)) (not x492)) x594) (=> (and (and (= x438 (x545 x192)) (= x636 (< 18446744073709551615 x438))) x492) (and (=> (and x636 (and (= x476 0) (= x550 x518) (= x529 x971) (= x599 x378) (= x1012 x912))) x594) (=> (and (not x636) (and (= (< x1016 x412) x899) (= (x904 (+ x1097 x870)) x412) (= x1097 (x904 (+ x192 32))) (= x870 (mod (* x438 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and (=> (and (= x887 (> x318 18446744073709551615)) (not x899)) (and (=> (and (and (= x912 x1012) (= x971 x529) (= x599 x378) (= x550 x518) (= x476 0)) x887) x594) (=> (and (and (= x589 (or (and (> x466 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1016 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x1016 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x466 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x1016 x466)))) (= (x904 (+ x889 31)) x466) (= x889 (x904 (+ 4 x574)))) (not x887)) (and (=> (and (and (= x258 (x545 x889)) (= x796 (< 18446744073709551615 x258))) x589) (and (=> (and (not x796) (and (= (x904 (+ 32 x889)) x603) (= (< x1016 x876) x309) (= x280 (mod (* 32 x258) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x904 (+ x603 x280)) x876))) (and (=> (and (not x309) (and (< x767 256) (<= 0 x767) (= (= 0 x767) x311) (<= x767 255))) (and (=> (and (not x311) (and (= x971 x529) (= 0 x476) (= x599 x378) (= x1012 x912) (= x518 x550))) x594) (=> (and (and (= (> x940 0) x817) (<= x940 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x940 0)) x311) (and (=> (and (= x30 x427) (not x817)) x573) (=> (and (and (>= x940 0) (= x430 (= 0 x940)) (<= x940 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x817) (and (=> (and (not x430) (and (= x550 x518) (= x912 x1012) (= x971 x529) (= x378 x599) (= 0 x476))) x594) (=> (and (and (<= 0 x348) (= (x431 x619) x759) (= x996 (x972 1461501637330902918203684832716283019655932542975 x247)) (= x283 x498) (< 0 x759) (>= 1461501637330902918203684832716283019655932542975 x348) (= (x904 (+ x427 32)) x856) (not (< x283 4)) (= x382 64069044923792539370177021244577383457373632460708312080110356237917649633280) (> 1461501637330902918203684832716283019655932542976 x348) (not (= 2220280665 x872)) (= (= x996 x247) x99) (= (x908 x427) x247) (not (= 2329570063 x872)) (not (> 2220280665 x872)) (not (= x872 2249206060)) (= 2376452955 x872) (> 3084411429 x872) (= x283 4) (= 4 x498)) x430) (and (=> (and (and (= x1012 x912) (= x550 x518) (= x476 0) (= x599 x378) (= x529 x971)) (not x99)) x594) (=> (and x99 (and (= x89 (x660 x881)) (= x881 (x972 1461501637330902918203684832716283019655932542975 x247)) (= x738 (and (< (+ x89 x81) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x608 0))) (= (x660 x619) x608) (= x81 0))) (and (=> (and (and (= x64 0) (= 0 x287)) (not x738)) x895) (=> (and x738 (and (or (not x183) (and x183 (and (> 4294967296 x801) x504 (= x517 (= x1101 (x130 x881))) (= x618 (x913 x619)) x517 (= (x913 x881) x1101) (= x504 (>= (x130 x619) x618))))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x81 x330)) (= x522 x330) (= x905 (x660 x619)) (= x905 x715) (= (> x369 0) x183) (= x330 (x995 x881))))) x1113))))))))))) (=> (and x309 (and (= 0 x476) (= x518 x550) (= x971 x529) (= x1012 x912) (= x378 x599))) x594))) (=> (and x796 (and (= x529 x971) (= 0 x476) (= x912 x1012) (= x599 x378) (= x518 x550))) x594))) (=> (and (not x589) (and (= x529 x971) (= 0 x476) (= x378 x599) (= x912 x1012) (= x550 x518))) x594))))) (=> (and (and (= x476 0) (= x518 x550) (= x971 x529) (= x599 x378) (= x912 x1012)) x899) x594))))))) (=> (and (and (= x550 x518) (= x599 x378) (= x476 0) (= x1012 x912) (= x971 x529)) x824) x594))) (=> (and x575 (and (= x971 x529) (= x1012 x912) (= x550 x518) (= x378 x599) (= 0 x476))) x594))))) (=> (and (and (= 0 x476) (= x378 x599) (= x1012 x912) (= x518 x550) (= x529 x971)) x373) x594))))) (=> (and (and (= x550 x518) (= x971 x529) (= x378 x599) (= x1012 x912) (= 0 x476)) x582) x594))))) (=> (and (not x808) (and (= x529 x971) (= x1012 x912) (= x518 x550) (= 0 x476) (= x378 x599))) x594))) (=> (and (and (= x378 x599) (= x1012 x912) (= x550 x518) (= x476 0) (= x529 x971)) x980) x594))) (=> (and (not x425) (and (= x912 x1012) (= x378 x599) (= 0 x476) (= x529 x971) (= x550 x518))) x594)))))))
(assert (x983 x675))
(assert (x983 x483))
(assert (x983 x112))
(assert (x248 1461501637330902918203684832716283019655932542975))
(assert (x983 x653))
(assert (x983 x257))
(assert (x983 x266))
(assert (x983 x13))
(assert (= x269 (=> (and (or (and (and (= 1 x963) (> 4294967296 x324)) x760) (and (not x760) (= x132 x963))) (and (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x733) x1029) (<= x435 1461501637330902918203684832716283019655932542975) (= (< 0 x132) x760) (not (= x719 0)) (not (or (and (= true (<= x255 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x255)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x255))) (= x784 (x904 (+ x1029 x854))) (= x435 (x803 x854)) (= (x904 (+ x255 31)) x733))) x1078)))
(assert (= x406 (and x1035 x421)))
(assert (= (x423 (+ (x904 (+ 196 x216)) (- (+ (- x1094 160) 196) 196))) 0))
(assert (x983 x304))
(assert (= x274 (or x92 x734 x32)))
(assert (= (and (not x309) x578) x238))
(assert (= x694 (and x613 (not x589))))
(assert (x983 x871))
(assert (x983 x290))
(assert (= x785 (=> (and (= x842 (x904 (+ 96 x452))) (= (x1013 256) x62) (= (not (> x372 128)) x25)) (and (=> (= x484 128) x445) x25))))
(assert (= (or x667 x453) x344))
(assert (x983 x510))
(assert (= (and x841 x478) x230))
(assert (= 0 (x423 (+ (x904 (+ 196 x216)) (- (+ x491 (- 224 x1110)) 196)))))
(assert (x983 x154))
(assert (x983 x178))
(assert (x869 x847))
(assert (x983 x670))
(assert (x983 x911))
(assert (x983 x374))
(assert (x983 x1099))
(assert (x983 x516))
(assert (x983 x1079))
(assert (x248 x79))
(assert (x983 x827))
(assert (= (or x96 x671) x1085))
(assert (x983 x503))
(assert (x983 x780))
(assert (x983 x295))
(assert (x983 x386))
(assert (= x532 (and (not x333) x437)))
(assert (x869 x954))
(assert (x983 x645))
(assert (x983 x286))
(assert (x983 x781))
(assert (= (and (not x59) x194) x1040))
(assert (x983 x809))
(assert (x983 x359))
(assert (= (x423 (x904 (+ x216 196))) 0))
(assert (= (and x992 x223) x278))
(assert (= (and (not x239) x655) x642))
(assert (x983 x615))
(assert (= (and x928 x738) x986))
(assert (x983 x600))
(assert (x983 x778))
(assert (x983 x546))
(assert (x983 x716))
(assert (= (and x1085 (not x446)) x227))
(assert (= x1086 (and x993 x853)))
(assert (= (and (not x887) x646) x613))
(assert (= 0 (x423 (+ (- (+ x491 (- x277 x1110)) 196) (x904 (+ x216 196))))))
(assert (x983 x669))
(assert (x983 x474))
(assert (x983 x1082))
(assert (= 0 (x1089 x577)))
(assert (x983 x505))
(assert (x983 x531))
(assert (= 0 (x423 x361)))
(assert (x983 x686))
(assert (x983 x91))
(assert (x983 x851))
(assert (= x250 (and x655 x239)))
(assert (= (and x722 x790) x699))
(assert (x248 x901))
(assert (= x32 (and x611 x342)))
(assert (x983 x1083))
(assert (= (x617 (- x997 x387)) 0))
(assert (= (or x339 x984) x68))
(assert (x983 x799))
(assert (x983 x1110))
(assert (= (and (not x22) x703) x169))
(assert (= 0 (x423 x795)))
(assert (x983 x51))
(assert (x983 x801))
(assert (= (and x762 x1057) x745))
(assert (= 0 (x423 (+ (- (+ (- x577 160) 196) 196) (x904 (+ x216 196))))))
(assert (= (and (not x458) x121) x620))
(assert (x983 x158))
(assert (x983 x353))
(assert (= (=> (and (= x1002 (not (> x178 128))) (= (x100 x927) x843) (= (x904 (+ 96 x209)) x295) (= (x904 (+ 96 x275)) x927)) (and (=> (= 128 x243) x142) x1002)) x542))
(assert (x983 x965))
(assert (= (and x840 (not x221)) x376))
(assert (x983 x192))
(assert (= (x423 (+ (x904 (+ x216 196)) (- (+ 196 (- x997 160)) 196))) 0))
(assert (x983 x571))
(assert (x983 x361))
(assert (x983 x677))
(assert (x983 x209))
(assert (= x943 (=> (and (= (< x285 x3) x404) (or (not x404) (and (= (x904 (+ x285 x921)) x838) x404))) x95)))
(assert (= x108 (and x1042 x506)))
(assert (x983 x261))
(assert (= (and x229 (not x602)) x892))
(assert (= x92 (and x611 (not x342))))
(assert (= (or x434 x523) x107))
(assert (x983 x288))
(assert (= (and x863 (not x1058)) x551))
(assert (x248 x207))
(assert (= (x423 (+ (x904 (+ x216 196)) (- x809 196))) 0))
(assert (x983 x1003))
(assert (= x384 (and x311 x238)))
(assert (= 0 (x1089 x420)))
(assert (= x119 (and (not x183) x986)))
(assert (= 0 (x423 (+ (- (+ (- x1094 x1110) x491) 196) (x904 (+ 196 x216))))))
(assert (x983 x616))
(assert (x983 x605))
(assert (x983 x631))
(assert (x983 x60))
(assert (= (and x1123 x793) x96))
(assert (x496 x79))
(assert (x983 x890))
(assert (x983 x285))
(assert (= x783 (and x817 x384)))
(assert (= (or x279 x465 x1004 x903 x58) x1100))
(assert (= x565 (and x528 x87)))
(assert (x983 x314))
(assert (= x914 (and x9 x939)))
(assert (x983 x513))
(assert (x983 x794))
(assert (= x253 (=> (and (= x4 (x904 (+ x353 x710))) (= (x904 (+ x193 32)) x710) (= x360 (> x402 0)) (= (mod (* 32 x402) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x353) (= x381 (x904 (+ 32 x473))) (= x318 (x16 (- x193 x98)))) (and (=> (and (= x346 x4) (not x360)) x29) (=> x360 x540)))))
(assert (= (or x957 x699) x625))
(assert (= x341 (and x567 x108)))
(assert (x983 x498))
(assert (x983 x151))
(assert (x983 x855))
(assert (x248 x242))
(assert (= (and x625 (not x656)) x579))
(assert (= (x617 (- 160 x387)) 0))
(assert (= (and x299 (not x689)) x422))
(assert (x983 x20))
(assert (x983 x436))
(assert (x983 x407))
(assert (x983 x120))
(assert (x983 x1012))
(assert (x248 x1070))
(assert (x983 x15))
(assert (= (and x991 x692) x121))
(assert (x983 x731))
(assert (x983 x364))
(assert (= (and x833 x172) x700))
(assert (x983 x856))
(assert (x983 x1))
(assert (x983 x559))
(assert (x983 x923))
(assert (x983 x1034))
(assert (x248 x1055))
(assert (x983 x346))
(assert (x248 x730))
(assert (x983 x537))
(assert (= (and x321 (not x337)) x984))
(assert (= 0 (x1089 x997)))
(assert (x983 x420))
(assert (= x758 (and x956 x126)))
(assert (x983 x94))
(assert (x983 x1061))
(assert (x983 x651))
(assert (x983 x1011))
(assert (x983 x603))
(assert (x248 x707))
(assert (x983 x652))
(assert (x983 x684))
(assert (x983 x544))
(assert (= 0 (x1089 160)))
(assert (= (and x145 x740) x1043))
(assert (= x611 (or x119 x946)))
(assert (= (and (not x575) x128) x1030))
(assert (= x83 (or (and x740 (not x145)) x1043)))
(assert (x983 x1118))
(assert (x983 x66))
(assert (x983 x392))
(assert (x983 x264))
(assert (x983 x664))
(assert (x983 x816))
(assert (x983 x89))
(assert (x983 x146))
(assert (x983 x277))
(assert (= x194 (and x808 x832)))
(assert (x983 x837))
(assert (x983 x872))
(assert (= (and x708 x492) x1027))
(assert (x983 x784))
(assert (x983 x210))
(assert (x983 x543))
(assert (x983 x666))
(assert (x983 x394))
(assert (x983 x220))
(assert (x983 x770))
(assert (= x1098 (and x65 x526)))
(assert (= (and (not x172) x833) x956))
(assert (x983 x186))
(assert (x983 x38))
(assert (x983 x484))
(assert (x983 x1062))
(assert (= (x935 (x383 x619 x413)) 0))
(assert (x983 x934))
(assert (x983 x276))
(assert (x983 x998))
(assert (= (and (not x9) x939) x443))
(assert (x983 x327))
(assert (x983 x654))
(assert (x496 x247))
(assert (x983 x987))
(assert (= (and (not x511) x341) x57))
(assert (= x594 (=> (and (= x143 x378) (= x826 x912) (= x794 x518) (= x770 x51) (= x821 x971) (= x476 x549)) x1103)))
(assert (x983 x888))
(assert (= (and x238 (not x311)) x990))
(assert (x983 x138))
(assert (x983 x134))
(assert (x983 x191))
(assert (x248 x505))
(assert (x983 x807))
(assert (= x857 (and x333 x437)))
(assert (= 0 (x423 x301)))
(assert (x983 x994))
(assert (x983 x243))
(assert (x983 x307))
(assert (= (and x1086 (not x628)) x606))
(assert (= x583 (or x1006 x999 x861 x57 x700 x233 x123 x938 x169 x246 x727 x945 x857 x391 x758 x976 x554 x10 x694 x937 x389 x926 x860 x990 x481 x724 x1109 x1111 x1039 x230 x167 x1096 x77 x665)))
(assert (x983 x298))
(assert (x983 x48))
(assert (x983 x521))
(assert (= (and (not x528) x87) x509))
(assert (x983 x1084))
(assert (x983 x733))
(assert (= x87 (and (not x1053) x1076)))
(assert (= x832 (and x224 (not x980))))
(assert (= (and x933 x274) x805))
(assert (x983 x168))
(assert (= x860 (and x708 (not x492))))
(assert (x983 x64))
(assert (= (and (not x526) x65) x472))
(assert (= x129 (and (not x1126) x80)))
(assert (= (or x336 x155) x655))
(assert (= (x617 (- x1094 x387)) 0))
(assert (x983 x280))
(assert (x983 x368))
(assert (x983 x1093))
(assert (x983 x410))
(assert (x983 x85))
(assert (= (and x463 x796) x391))
(assert (= (=> (and (or (and (and (= x1119 0) (= x1011 (x925 x619)) (= x64 x369) (= x270 x28) (= x270 (x508 x881)) (< (+ x1011 x1119) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x801 x287) (= x538 x1011)) x342) (and (and (= x64 x369) (= x801 x287)) (not x342))) (= x342 (= 0 x369))) x895) x1113))
(assert (= (=> (and (= (> x243 x178) x337) (or (and (= x964 (x904 (+ x209 x178))) x337) (not x337))) x433) x142))
(assert (x983 x723))
(assert (= x680 (=> (and (or (and x489 (and (= 1 x719) (> 4294967296 x255))) (and (= x307 x719) (not x489))) (and (= x206 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x730)) (not (or (and (= true (<= x374 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x374 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374))) (>= 1461501637330902918203684832716283019655932542975 x651) (= x854 (x904 (+ x276 x206))) (not (= x362 0)) (= x651 (x1072 x276)) (= (> x307 0) x489) (= (x904 (+ x374 31)) x730))) x269)))
(assert (= x822 (and x344 x70)))
(assert (x983 x1097))
(assert (x983 x1044))
(assert (x983 x189))
(assert (x983 x629))
(assert (= (=> (= x22 (< 0 x64)) (and (=> (and (and (= x518 x550) (= x599 x378) (= 0 x476) (= x529 x971) (= x1012 x912)) (not x22)) x594) (=> (and (= x845 x30) x22) x573))) x668))
(assert (= (and x76 x323) x67))
(assert (x248 x556))
(assert (x983 x3))
(assert (x983 x1038))
(assert (= (and x884 x125) x80))
(assert (x983 x975))
(assert (x983 x381))
(assert (x983 x712))
(assert (= x43 (and x430 x783)))
(assert (x983 x737))
(assert (x983 x132))
(assert (= x7 (and x461 x137)))
(assert (= x772 (=> (= (= 0 x686) x333) (and (=> (and (and (= x826 x1012) (= 1 x549) (= x205 (x972 1461501637330902918203684832716283019655932542975 x79)) (= 32 x770) (= x794 x550) (= x143 x599) (= x821 x529)) (not x333)) x1103) (=> (and (and (= x550 x518) (= 0 x476) (= x529 x971) (= x599 x378) (= x1012 x912)) x333) x594)))))
(assert (x983 x195))
(assert (x983 x372))
(assert (x983 x31))
(assert (x983 x726))
(assert (x983 x618))
(assert (= (=> (and (or x659 (not x659)) (= x659 (= 0 x55))) x444) x898))
(assert (x983 x633))
(assert (x983 x893))
(assert (x983 x1045))
(assert (x983 x970))
(assert (x248 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (and (not x449) x390) x844))
(assert (x869 x556))
(assert (= x490 true))
(assert (x983 x962))
(assert (= (=> (and (and (<= x851 1461501637330902918203684832716283019655932542975) (not (or (> x324 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x324 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x324)))) (= x771 x265) (not (= 0 x963)) (= (x662 x784) x851)) (and (= x821 x806) (= x794 x234) (= x436 x143) (= false x411) (= x922 x826) (= x586 false))) x245) x1078))
(assert (= x942 (or x1019 x627)))
(assert (= x849 (and x175 x228)))
(assert (x983 x941))
(assert (x983 x308))
(assert (x983 x399))
(assert (= (or x914 x419 x129 x443 x558) x793))
(assert (x983 x447))
(assert (x983 x149))
(assert (= 0 (x617 (- x420 x387))))
(assert (= x1073 (=> (and (or (not x1117) (and x1117 (= (x904 (+ x1068 x1061)) x78))) (= x1117 (< x1061 x873))) x429)))
(assert (x983 x252))
(assert (x983 x587))
(assert (= (and (not x489) x455) x627))
(assert (x983 x868))
(assert (= 0 (x423 (+ (x904 (+ x216 196)) (- (+ x491 (- x997 x1110)) 196)))))
(assert (x983 x900))
(assert (= x734 (and (not x738) x928)))
(assert (x983 x595))
(assert (x983 x800))
(assert (x983 x564))
(assert (x248 x733))
(assert (= x926 (and x67 x570)))
(assert (= x1019 (and x489 x455)))
(assert (x248 x855))
(assert (x983 x597))
(assert (= (x1089 x930) 0))
(assert (x983 x4))
(assert (= x42 (and (not x692) x991)))
(assert (x983 x222))
(assert (= (x423 (+ (- (+ (- x930 160) 196) 196) (x904 (+ x216 196)))) 0))
(assert (x983 x867))
(assert (= (and x181 (not x658)) x164))
(assert (x983 x345))
(assert (x983 x795))
(assert (= (and x17 (not x1046)) x416))
(assert (x983 x905))
(assert (x983 x495))
(assert (x983 x301))
(assert (x983 x763))
(assert (x983 x782))
(assert (x983 x350))
(assert (= (x423 224) 0))
(assert (x869 x1099))
(assert (x983 x1116))
(assert (= x863 (and x689 x299)))
(assert (= x429 (=> (and (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x207) x1048) (= x737 (x904 (+ x1044 32))) (= x900 (x190 x1114)) (= (x904 (+ 31 x1061)) x207) (= (x904 (+ x1048 x1068)) x1044) (= x752 (> x900 0)) (= (x16 (- x1044 x300)) x634) (= x201 (x904 (+ 32 x300)))) (and (=> (and (= 0 x1105) (not x752)) x385) (=> (and x752 (and (= (x1104 x277) x709) (= x1110 x277) (= x737 x359) (= (< 32 x900) x175))) (and (=> (and (and (= x131 (< 64 x900)) (= (x1075 x1094) x138) (= (x904 (+ 32 x737)) x189) (= x1094 (x904 (+ x1110 32)))) x175) (and (=> (and (= 64 x1105) (not x131)) x385) (=> (and (and (= (x1091 x930) x827) (= (x904 (+ x737 64)) x674) (= (< 96 x900) x1057) (= (x904 (+ x1110 64)) x930)) x131) (and (=> x1057 x672) (=> (and (= 96 x1105) (not x1057)) x385))))) (=> (and (= x1105 32) (not x175)) x385)))))))
(assert (x983 x878))
(assert (x983 x271))
(assert (= 0 (x1089 224)))
(assert (= (and (not x99) x43) x10))
(assert (= (and x628 x1086) x1001))
(assert (= x228 (and x718 x752)))
(assert (x983 x988))
(assert (x983 x804))
(assert (x983 x141))
(assert (= (and (not x787) x2) x316))
(assert (= (=> (and (= x312 (= x686 0)) (or x312 (not x312))) x772) x765))
(assert (x983 x644))
(assert (= (and x511 x341) x833))
(assert (= (and x993 (not x853)) x520))
(assert (x983 x260))
(assert (x983 x247))
(assert (= x488 (and x682 (not x170))))
(assert (x983 x297))
(assert (= 0 (x423 (+ (- x192 196) (x904 (+ x216 196))))))
(assert (x983 x127))
(assert (= x578 (and x463 (not x796))))
(assert (= (or x892 x441) x836))
(assert (x983 x451))
(assert (= x861 (and (not x430) x783)))
(assert (x248 x470))
(assert (x1056 x622))
(assert (= 0 (x423 (+ 64 (x904 (+ x216 196))))))
(assert (x983 x293))
(assert (x983 x162))
(assert (x983 x741))
(assert (x983 x1087))
(assert (x983 x735))
(assert (x983 x204))
(assert (= x708 (and x1030 (not x824))))
(assert (= x1036 (and (not x582) x1040)))
(assert (= x441 (and x229 x602)))
(assert (x983 x930))
(assert (= (=> (and (= x790 (> x297 x308)) (or (and (= (x904 (+ x1017 x308)) x263) x790) (not x790))) x1088) x52))
(assert (x983 x84))
(assert (= x568 (and x490 (not x1065))))
(assert (x983 x143))
(assert (= (x423 (+ (- x958 196) (x904 (+ 196 x216)))) 0))
(assert (x983 x349))
(assert (= (and x1100 x1117) x823))
(assert (x983 x74))
(assert (x983 x205))
(assert (x983 x701))
(assert (x983 x982))
(assert (x983 x622))
(assert (= x862 (and (not x760) x942)))
(assert (x983 x811))
(assert (= (x617 (- x314 x387)) 0))
(assert (x983 x270))
(assert (= (=> (and (and (= x265 (x103 x216)) (= (> x232 0) x351) (= x1055 (x904 (+ x770 31))) (= x477 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1055)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x770) (and (> 32 x770) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x770))))) (= (x904 (+ x216 x477)) x354) (not (= x549 0)) (>= 1461501637330902918203684832716283019655932542975 x265)) (or (and x351 (and (= 1 x941) (> 4294967296 x1026))) (and (not x351) (= x232 x941)))) x366) x1050))
(assert (x983 x114))
(assert (= (and (not x360) x115) x695))
(assert (x983 x193))
(assert (= x233 (and x575 x128)))
(assert (= (and x1032 (not x899)) x646))
(assert (x983 x378))
(assert (x983 x894))
(assert (= (x423 (+ (- (+ x491 (- 160 x1110)) 196) (x904 (+ 196 x216)))) 0))
(assert (x983 x62))
(assert (x983 x826))
(assert (x983 x1068))
(assert (x983 x661))
(assert (x983 x959))
(assert (x983 x240))
(assert (x983 x418))
(assert (x983 x369))
(assert (x983 x469))
(assert (x983 x920))
(assert (= (and x691 x736) x523))
(assert (= (and (not x817) x384) x500))
(assert (x983 x236))
(assert (x983 x1074))
(assert (x983 x473))
(assert (x983 x901))
(assert (= (x1089 x314) 0))
(assert (= x966 (and x658 x181)))
(assert (x983 x883))
(assert (x983 x949))
(assert (= x722 (or x551 x422 x325 x754 x488)))
(assert (= (x423 (+ (x904 (+ 196 x216)) (- (+ (- x930 x1110) x491) 196))) 0))
(assert (x869 x901))
(assert (= x245 (=> (and (and (not (= 75068239 x260)) (< x922 1461501637330902918203684832716283019655932542976) (not x411) (= 832554005 x260) (not (= x260 818759841)) (< x260 2220280665) (= (x431 x619) x630) (> x630 0) (>= x922 0) (= x922 x397) (>= 1461501637330902918203684832716283019655932542975 x922) (< x260 1245659826) (not x586)) (and (and (<= 0 x806) (<= x806 1461501637330902918203684832716283019655932542975) (> x987 0) (= x150 1245659826) (= x897 (= 0 x641)) (not (> 1245659826 x150)) (= x213 0) (> 2220280665 x150) (= x806 x975) (= x641 x397) (= x987 (x431 x619)) (< x806 1461501637330902918203684832716283019655932542976)) (and (and (not (= 3705713892 x345)) (<= x234 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x234) (<= 0 x234) (> x400 0) (not (> 3084411429 x345)) (not (< x345 2220280665)) (= x400 (x431 x619)) (= (and x635 x897) x728) (= x868 x975) (= 0 x877) (= x635 (= x868 0)) (= x998 x234) (not (= 3572374928 x345)) (not (= 4076725131 x345)) (= 4199168155 x345) (not (= x345 3084411429))) (and (and (= x161 (x431 x619)) (<= x436 1461501637330902918203684832716283019655932542975) (>= x436 0) (= x998 x144) (= x407 x436) (< x436 1461501637330902918203684832716283019655932542976) (not (= 2220280665 x94)) (not (> 2220280665 x94)) (not (= x94 2249206060)) (= x94 2329570063) (= x800 0) (> x161 0) (> 3084411429 x94) (= (= x144 0) x379) (= x343 (and x728 x379))) (and (and (= (= x410 0) x1095) (not (= x91 75068239)) (< x922 1461501637330902918203684832716283019655932542976) (= x981 x922) (= x407 x410) (not (= 818759841 x91)) (< x91 2220280665) (<= x922 1461501637330902918203684832716283019655932542975) (= x91 832554005) (< 0 x393) (= (and x1095 x343) x1010) (= (x431 x619) x393) (< x91 1245659826) (= x807 0) (>= x922 0)) (and (and (and (not (< x1116 2220280665)) (not (= x1116 4076725131)) (not (= 3084411429 x1116)) (>= x234 0) (= x111 (and x53 x292)) (= (x431 x619) x1062) (= (not (= 0 x149)) x292) (= 0 x112) (not (= x1116 3705713892)) (= x149 x502) (= x234 x1033) (not (< x1116 3084411429)) (>= 1461501637330902918203684832716283019655932542975 x234) (= x1116 4199168155) (not (= 3572374928 x1116)) (> 1461501637330902918203684832716283019655932542976 x234) (> x1062 0)) (and (and (= (not (= x85 0)) x588) (= x85 x1041) (= (and x588 x464) x874) (= (or x1010 x874) x106) (= 0 x539)) (and (not (= x612 2220280665)) (= 0 x26) (= (and x111 x917) x464) (not (= 2249206060 x612)) (< x436 1461501637330902918203684832716283019655932542976) (= (not (= x923 0)) x917) (= x669 (x431 x619)) (= 2329570063 x612) (not (> 2220280665 x612)) (< 0 x669) (= x923 x1033) (<= x436 1461501637330902918203684832716283019655932542975) (>= x436 0) (= x1041 x436) (> 3084411429 x612)))) (and (= x195 1245659826) (= x502 x806) (>= x806 0) (= 0 x136) (= x53 (not (= 0 x878))) (< 0 x597) (< x806 1461501637330902918203684832716283019655932542976) (= x597 (x431 x619)) (= x981 x878) (not (> 1245659826 x195)) (<= x806 1461501637330902918203684832716283019655932542975) (< x195 2220280665)))))))) x106)))
(assert (= 0 (x423 (+ 32 (x904 (+ x216 196))))))
(assert (x983 x400))
(assert (x869 x730))
(assert (x983 x328))
(assert (= 0 (x617 (- x930 x387))))
(assert (= (=> (and (= x1123 (> x484 x372)) (or (and (= x871 (x904 (+ x372 x452))) x1123) (not x1123))) x968) x445))
(assert (= x481 (and (not x237) x1036)))
(assert (x983 x249))
(assert (x983 x698))
(assert (x983 x26))
(assert (x983 x140))
(assert (= (=> (and (= x298 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x249)) (= (x904 (+ x298 x452)) x186) (= (x904 (+ x372 31)) x249) (= (x904 (+ x98 32)) x352) (= (x226 x1069) x178) (= x446 (< 0 x178)) (= (x16 (- x186 x98)) x363) (= (x904 (+ x186 32)) x209)) (and (=> (and x446 (and (= x301 x275) (= x788 x209) (= x84 (x371 x301)) (= (> x178 32) x1046))) (and (=> (and (and (= (x904 (+ x209 32)) x377) (= x361 (x904 (+ 32 x275))) (= x524 (x533 x361)) (= (< 64 x178) x853)) x1046) (and (=> (and (not x853) (= 64 x243)) x142) (=> (and x853 (and (= (> x178 96) x628) (= (x812 x795) x116) (= x795 (x904 (+ 64 x275))) (= x1092 (x904 (+ 64 x209))))) (and (=> x628 x542) (=> (and (= x243 96) (not x628)) x142))))) (=> (and (= x243 32) (not x1046)) x142))) (=> (and (not x446) (= 0 x243)) x142))) x968))
(assert (= (x423 (+ (- (+ (- 192 x1110) x491) 196) (x904 (+ x216 196)))) 0))
(assert (= x419 (and (not x329) x568)))
(assert (x1056 x619))
(assert (x983 x940))
(assert (x983 x19))
(assert (x983 x1029))
(assert (x983 x730))
(assert (= (and (not x351) x83) x273))
(assert (x983 x845))
(assert (x983 x179))
(assert (x983 x438))
(assert (= x637 (or x813 x281)))
(assert (= (and x636 x1027) x1111))
(assert (= x95 (=> (and (= (x829 x30) x563) (= x701 (x904 (+ 32 x220))) (= x239 (> x563 0)) (= x847 (x904 (+ 31 x285))) (= x609 (x904 (+ x921 x516))) (= x516 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x847)) (= x392 (x16 (- x609 x220)))) (and (=> (and (= x777 (< 32 x563)) x239) (and (=> (and x777 (= x449 (> x563 64))) (and (=> (and (= (< 96 x563) x714) x449) (and (=> x714 x93) (=> (and (not x714) (= 96 x906)) x417))) (=> (and (= 64 x906) (not x449)) x417))) (=> (and (= x906 32) (not x777)) x417))) (=> (and (not x239) (= 0 x906)) x417)))))
(assert (= x748 (or x1066 x515)))
(assert (x983 x932))
(assert (x983 x767))
(assert (x983 x931))
(assert (= (and x406 (not x779)) x903))
(assert (x869 x249))
(assert (x983 x152))
(assert (x983 x161))
(assert (x983 x599))
(assert (= (x1089 x1094) 0))
(assert (x983 x97))
(assert (= x223 (and x217 x68)))
(assert (x983 x1033))
(assert (x983 x207))
(assert (x983 x156))
(assert (x983 x1031))
(assert (x248 x847))
(assert (x983 x529))
(assert (= (and x840 x221) x991))
(assert (x983 x452))
(assert (x983 x144))
(assert (x983 x751))
(assert (= x558 (and (not x125) x884)))
(assert (x983 x352))
(assert (= x554 (and x373 x1125)))
(assert (x983 x581))
(assert (x983 x176))
(assert (x983 x409))
(assert (x983 x709))
(assert (x983 x86))
(assert (= (=> (= (< 0 x959) x691) (and (=> x691 x46) (=> (and (and (= x476 0) (= x971 x529) (= x599 x378) (= x1012 x912) (= x550 x518)) (not x691)) x594))) x1124))
(assert (x983 x213))
(assert (= 0 (x1089 x82)))
(assert (= (=> (and (and (> 1245659826 x735) (<= 0 x34) (< x1012 1461501637330902918203684832716283019655932542976) (<= 0 x644) (<= 0 x584) (<= x459 1461501637330902918203684832716283019655932542975) (= x349 x120) (<= 0 x1118) (>= x1015 0) (= x632 false) (= x735 832554005) (>= 1461501637330902918203684832716283019655932542975 x1118) (= x1015 x36) (>= x474 0) (<= x831 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x619) (>= x349 0) (<= x693 1461501637330902918203684832716283019655932542975) (<= 0 x462) (<= 0 x1106) x848 (>= x529 0) (= x73 5) (<= x584 255) (> x619 0) (<= x767 255) (= (< 0 (x431 x365)) x848) (>= x599 0) (>= x348 0) (>= x271 0) (>= 1461501637330902918203684832716283019655932542975 x1012) (>= 255 x1106) (< 0 x365) (<= 0 x459) (>= 1461501637330902918203684832716283019655932542975 x596) (>= 1461501637330902918203684832716283019655932542975 x462) (>= x550 0) (<= x349 1461501637330902918203684832716283019655932542975) (<= x1024 1461501637330902918203684832716283019655932542975) (= x394 (x414 x619)) (<= 0 x596) (>= 1461501637330902918203684832716283019655932542975 x1015) (> 2220280665 x735) (>= x56 0) (<= x34 79228162514264337593543950335) (>= 1461501637330902918203684832716283019655932542975 x271) (>= x767 0) (<= 0 x168) (<= 0 x340) (= x974 (> (x431 x619) 0)) (>= 1461501637330902918203684832716283019655932542975 x1012) x974 (< 0 x1020) (>= 1461501637330902918203684832716283019655932542975 x529) (<= x675 1461501637330902918203684832716283019655932542975) (<= 0 x1012) (<= x867 1461501637330902918203684832716283019655932542975) (>= x151 0) (<= 0 x1024) (<= 0 x693) (>= 1461501637330902918203684832716283019655932542975 x599) (<= 0 x521) (>= x831 0) (>= x675 0) (= x1012 x14) (<= x348 1461501637330902918203684832716283019655932542975) (= (x431 x619) x1020) (<= x157 1461501637330902918203684832716283019655932542975) (= false x952) (not (= x735 818759841)) (<= x168 255) (<= x474 1461501637330902918203684832716283019655932542975) (<= x550 1461501637330902918203684832716283019655932542975) (<= 0 x479) (= (x414 x365) x340) (>= 1461501637330902918203684832716283019655932542975 x365) (not (= x365 x619)) (= x177 false) (>= x867 0) (<= x644 255) (<= x479 255) (<= x56 1461501637330902918203684832716283019655932542975) (>= x1012 0) (= x440 1262878978) (<= x151 255) (>= x394 0) (= x88 true) (>= x157 0) (<= x521 255) (not (= x735 75068239))) (and (and (and (and (and (and (not (< x118 1245659826)) (= x534 x529) (< 0 x953) (= x118 1245659826) (> 2220280665 x118) (= x432 0) (<= x529 1461501637330902918203684832716283019655932542975) (= x1045 x746) (= x953 (x431 x619)) (= (not (= x746 0)) x388) (> 1461501637330902918203684832716283019655932542976 x529) (<= 0 x529)) (and (and (= x1052 (not (= 0 x176))) (> x600 0) (not (= 3705713892 x158)) (>= x550 0) (not (> 2220280665 x158)) (= x290 x550) (= x534 x176) (< x550 1461501637330902918203684832716283019655932542976) (not (= x158 4076725131)) (<= x550 1461501637330902918203684832716283019655932542975) (not (= x158 3572374928)) (not (= x158 3084411429)) (= x158 4199168155) (= 0 x725) (= (x431 x619) x600) (= (and x1052 x388) x395) (not (< x158 3084411429))) (and (and (not (= x797 2249206060)) (< x599 1461501637330902918203684832716283019655932542976) (not (< x797 2220280665)) (> x885 0) (= x127 0) (= x885 (x431 x619)) (= x290 x8) (= 2329570063 x797) (not (= x797 2220280665)) (= x1122 (and x750 x395)) (= x750 (not (= x8 0))) (<= 0 x599) (= x907 x599) (>= 1461501637330902918203684832716283019655932542975 x599) (> 3084411429 x797)) (and (= 0 x704) (= x426 (not (= x257 0))) (= x257 x907) (= x200 (> x120 0)) (= x1065 (> x571 x486)) x171 (< x120 1461501637330902918203684832716283019655932542976) (= x171 (or x139 x196)) (= (= 0 x120) x1108) (or x200 x1108) (= x139 (and x1122 x426)) (= (x414 x120) x486))))) (and (not (= 75068239 x1102)) (<= 0 x1012) (= 832554005 x1102) (= (= x293 0) x557) (= x415 (x431 x619)) (= x1045 x1012) (= (and x729 x557) x196) (= x503 0) (>= 1461501637330902918203684832716283019655932542975 x1012) (> 2220280665 x1102) (> x415 0) (> 1461501637330902918203684832716283019655932542976 x1012) (not (= x1102 818759841)) (= x293 x721) (< x1102 1245659826))) (and (= 0 x726) (< 0 x187) (= x187 (x431 x619)) (= x670 x163) (<= x599 1461501637330902918203684832716283019655932542975) (= x729 (and x396 x815)) (= x555 2329570063) (not (= 2220280665 x555)) (not (< x555 2220280665)) (= (= x163 0) x396) (> 1461501637330902918203684832716283019655932542976 x599) (> 3084411429 x555) (<= 0 x599) (= x721 x599) (not (= 2249206060 x555)))) (and (not (= 4076725131 x666)) (not (< x666 3084411429)) (= x791 (x431 x619)) (not (= 3084411429 x666)) (= x71 (= 0 x1093)) (= x666 4199168155) (not (> 2220280665 x666)) (>= 1461501637330902918203684832716283019655932542975 x550) (> x791 0) (= x670 x550) (= x815 (and x71 x610)) (= x1093 x54) (= 0 x1067) (> 1461501637330902918203684832716283019655932542976 x550) (<= 0 x550) (not (= x666 3572374928)) (not (= 3705713892 x666)))) (and (> x368 0) (> 1461501637330902918203684832716283019655932542976 x529) (= x610 (= x451 0)) (= x893 0) (> 2220280665 x19) (>= 1461501637330902918203684832716283019655932542975 x529) (= x451 x14) (>= x529 0) (= x54 x529) (not (< x19 1245659826)) (= 1245659826 x19) (= x368 (x431 x619))))) (and (=> (and (and (= x954 (x904 (+ 31 x35))) (<= x86 1461501637330902918203684832716283019655932542975) (= x1005 (ite x607 1 0)) (= (x904 (+ x786 4)) x962) (= x652 x880) (not (< x386 x685)) (= x15 (x69 x962)) (= x497 (x904 (+ x235 160))) (and (< 163 x386) (= true (<= x386 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (> x216 18446744073709551615) x211) (not (< x386 4)) (<= 0 x86) (not (> x235 18446744073709551615)) (= 0 x713) (= x1005 0) (not (> x49 x386)) (= (x904 (+ 32 x888)) x1) (= (x904 (+ x1069 x134)) x216) (not (< 18446744073709551615 x828)) (= (or x122 x676) x1107) (= (x69 x1022) x402) (not (> x763 x386)) (= (or x211 x776) x607) (= (> x372 0) x329) (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x505) x527) (>= x955 0) (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x855) x1081) (not (= x20 1245659826)) (= x98 (x904 (+ 4 x216))) (= (x414 x120) x141) (= (x1121 x619) x380) (= x763 (x904 (+ x252 x1034))) (not (< 18446744073709551615 x661)) (not (> x188 18446744073709551615)) (not (< x386 x820)) (= x320 (x904 (+ x1022 32))) (= x469 x569) (= (x904 (+ x931 4)) x1022) (= (- x141 x571) x744) (= (x72 128) x372) (= x776 (< x216 x1069)) (= x786 x828) (= (> x1069 18446744073709551615) x122) (= x753 x120) (not (< 18446744073709551615 x402)) (= x932 (x904 (+ 160 x98))) (= x731 x652) (= x1034 (x69 x48)) (= (x904 (+ 31 x962)) x978) (< 0 x639) (not (> x15 18446744073709551615)) (>= x753 0) (= (x431 x619) x639) (not (< x20 1245659826)) (= (x904 (+ x994 x650)) x685) (= (x904 (+ x1034 x275)) x266) (= x275 (x904 (+ x1069 32))) (= (x904 (+ x932 32)) x452) (or (and (> x386 x902) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x902) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x386))) (and (<= x386 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x902 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x904 (+ 32 x1081)) x35) (= x816 x188) (= x37 x571) (= x855 (x904 (+ 31 x1034))) (= (x904 (+ x988 4)) x888) (or (and (= (<= x564 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x386 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x386 x564)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x386) (> x564 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x661 x931) (= x134 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x954)) (= (x904 (+ 32 x48)) x252) (not (< 18446744073709551615 x328)) (= x49 (x904 (+ x235 x1))) (= (x904 (+ 32 x527)) x1060) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x386) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1063)) (and (< x1063 x386) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x386) (<= x1063 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (ite x1107 1 0) x713) (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x901) x1090) (= x650 (mod (* x15 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x386) (> x978 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x386 x978) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x386) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x978)))) (= x235 (x69 x888)) (>= 1461501637330902918203684832716283019655932542975 x753) (>= 1461501637330902918203684832716283019655932542975 x955) (= x569 x86) (= x988 x328) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x364)) (> 160 x364)) (> x364 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x364 (x16 (- x386 4))) (= (mod (* x402 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x741) (= x820 (x904 (+ x320 x741))) (= (x904 (+ x1022 31)) x564) (= x120 x409) (> 2220280665 x20) (= (x904 (+ x816 4)) x48) (= x505 (x904 (+ 31 x235))) (= (x904 (+ 31 x1060)) x901) (= x20 1262878978) (not (< 18446744073709551615 x1034)) (= x676 (> 128 x1069)) (= (x904 (+ 128 x1090)) x1069) (= (x904 (+ 31 x888)) x1063) (= (x904 (+ x962 32)) x994) (= x902 (x904 (+ x48 31))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x380 x37)) (= (x904 (+ x380 x571)) x614)) (not x1065)) (and (=> (and x329 (and (= x934 (x424 160)) (= x125 (> x372 32)) (= x683 x452))) (and (=> (and (not x125) (= 32 x484)) x445) (=> (and x125 (and (= x482 (x755 192)) (= (< 64 x372) x1126) (= (x904 (+ x452 32)) x590))) (and (=> (and (= 64 x484) (not x1126)) x445) (=> (and (and (= x559 (x904 (+ 64 x452))) (= (x21 224) x1003) (= x9 (< 96 x372))) x1126) (and (=> (and (not x9) (= 96 x484)) x445) (=> x9 x785))))))) (=> (and (not x329) (= x484 0)) x445))) (=> (and x1065 (and (= x436 x599) (= x922 x1012) (= true x411) (= false x586) (= x234 x550) (= x529 x806))) x245))) x428))
(assert (x983 x907))
(assert (x983 x1022))
(assert (x983 x482))
(assert (= (and x703 x22) x732))
(assert (= (and x1058 x863) x754))
(assert (x983 x641))
(assert (x983 x623))
(assert (x248 x1099))
(assert (= x153 (and (not x1049) x107)))
(assert (x983 x44))
(assert (x983 x479))
(assert (x1056 x881))
(assert (x983 x759))
(assert (= x841 (or (and (not x659) x63) x720)))
(assert (x983 x79))
(assert (= x453 (and x1000 x774)))
(assert (x983 x348))
(assert (= (and x1042 (not x506)) x1006))
(assert (x983 x486))
(assert (x983 x997))
(assert (x869 x733))
(assert (x983 x283))
(assert (x983 x201))
(assert (x983 x363))
(assert (= x1039 (and (not x742) x485)))
(assert (x983 x459))
(assert (= x649 (and x153 (not x621))))
(assert (= x2 (or x1028 x839 x27 x745 x160)))
(assert (= (x423 x927) 0))
(assert (x983 x831))
(assert (x983 x467))
(assert (x983 x214))
(assert (= x408 (and x360 x115)))
(assert (= (and x1076 x1053) x77))
(assert (= x540 (=> (and (not (< 18446744073709551615 x191)) (= (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1070) x530) (= x13 (x904 (+ x593 x320))) (= (x16 (- x240 31)) x664) (= x353 x261) (= x1070 (x904 (+ 31 x191))) (= x593 (x69 x320)) (= x605 (x904 (+ 32 x4))) (= x985 (x904 (+ x191 x605))) (not (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x97) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x633)) (and (= (<= x97 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x633)) (< x633 x97)))) (or (and (> x664 x593) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x664) (<= x593 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x593) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x664))) (= (x69 x13) x191) (= x97 (x904 (+ x13 32))) (= (x16 (- x386 x320)) x240) (= x633 (x16 (- x386 x191))) (= x179 (x904 (+ x605 x530))) (= x199 (not (< 1 x402)))) (and x199 (=> (= x346 x179) x29)))))
(assert (x983 x1063))
(assert (x983 x881))
(assert (= (and x461 (not x137)) x465))
(assert (x983 x608))
(assert (x983 x362))
(assert (x869 x1055))
(assert (= (or x732 x500) x76))
(assert (= (and x237 x1036) x1125))
(assert (x983 x769))
(assert (= x891 (or x830 x642 x844 x338 x886)))
(assert (x983 x98))
(assert (x983 x262))
(assert (x983 x519))
(assert (x983 x35))
(assert (= (x423 (+ (x904 (+ x216 196)) (- (+ 196 (- x277 160)) 196))) 0))
(assert (x983 x877))
(assert (= x939 (and x80 x1126)))
(assert (x983 x150))
(assert (x983 x955))
(assert (= x167 (and x1049 x107)))
(assert (= x739 (and x841 (not x478))))
(assert (= 0 (x617 (- x277 x387))))
(assert (x983 x55))
(assert (= (and x986 x183) x946))
(assert (x983 x136))
(assert (x983 x640))
(assert (= x541 (=> (and (= (= x959 0) x702) (or (not x702) x702)) x585)))
(assert (x248 x247))
(assert (= (x423 (+ (- (+ x491 (- x577 x1110)) 196) (x904 (+ 196 x216)))) 0))
(assert (= x46 (=> (= x456 (not (< 1 x438))) (and x456 x825))))
(assert (= (and x647 x748) x711))
(assert (x983 x536))
(assert (x983 x964))
(assert (= x463 (and x589 x613)))
(assert (x1056 x79))
(assert (x983 x82))
(assert (= x102 (and x351 x83)))
(assert (= x325 (and (not x580) x739)))
(assert (= x672 (=> (and (= (not (< 128 x900)) x23) (= (x904 (+ 96 x1110)) x577) (= (x322 x577) x814) (= x212 (x904 (+ 96 x737)))) (and x23 (=> (= 128 x1105) x385)))))
(assert (and (<= (x383 x619 x413) 340282366920938463463374607431768211455) (<= 10000 (x383 x619 x413))))
(assert (x248 x954))
(assert (= (=> (= x478 (= 0 x55)) (and (=> (and (and (= x982 (x904 (+ x30 32))) (= (x305 x1114) x308) (= x580 (< 0 x308)) (= x1017 (x904 (+ x982 3))) (= (x904 (+ 32 x30)) x66)) (not x478)) (and (=> (and (not x580) (= x297 0)) x52) (=> (and x580 (and (= (< 32 x308) x170) (= x1084 (x305 x314)) (= x1017 x310) (= x314 x1110))) (and (=> (and (= x297 32) (not x170)) x52) (=> (and x170 (and (= (> x308 64) x689) (= x82 (x904 (+ x1110 32))) (= x31 (x904 (+ x1017 32))) (= x536 (x5 x82)))) (and (=> (and x689 (and (= x1058 (< 96 x308)) (= (x225 x997) x44) (= (x904 (+ 64 x1110)) x997) (= (x904 (+ x1017 64)) x677))) (and (=> (and (not x1058) (= x297 96)) x52) (=> x1058 x909))) (=> (and (= x297 64) (not x689)) x52))))))) (=> (and (and (= x550 x518) (= x912 x1012) (= x599 x378) (= x476 0) (= x529 x971)) x478) x594))) x444))
(assert (x983 x34))
(assert (x1056 x365))
(assert (x983 x1106))
(assert (x983 x36))
(assert (x983 x550))
(assert (x983 x487))
(assert (x983 x1016))
(assert (x983 x828))
(assert (x983 x1090))
(assert (= (and x108 (not x567)) x976))
(assert (= (x423 (+ (x904 (+ x216 196)) (- x889 196))) 0))
(assert (x983 x593))
(assert (x983 x876))
(assert (x983 x476))
(assert (x983 x634))
(assert (x983 x538))
(assert (x983 x818))
(assert (= x181 (and x278 x1037)))
(assert (x983 x289))
(assert (= (x617 (- x82 x387)) 0))
(assert (x869 x505))
(assert (x983 x265))
(assert (= 0 (x1089 192)))
(assert (x983 x402))
(assert (= (and x446 x1085) x17))
(assert (x983 x721))
(assert (x983 x259))
(assert (x983 x263))
(assert (x983 x8))
(assert (x983 x1067))
(assert (x983 x157))
(assert (= (and x836 x702) x977))
(assert (x983 x18))
(assert (= (and x787 x2) x11))
(assert (x983 x1070))
(assert (x1056 x723))
(assert (x983 x30))
(assert (= 0 (x423 (+ (x904 (+ 196 x216)) (- (+ x491 (- x420 x1110)) 196)))))
(assert (x983 x786))
(assert (= (and x824 x1030) x246))
(assert (x983 x954))
(assert (x983 x838))
(assert (x983 x287))
(assert (= x703 (or x805 x358)))
(assert (x983 x710))
(assert (= x671 (and x793 (not x1123))))
(assert (x983 x518))
(assert (= (x617 (- 224 x387)) 0))
(assert (= x281 (or x862 x197)))
(assert (x248 x249))
(assert (x983 x1101))
(assert (x983 x1081))
(assert (x983 x45))
(assert (= x224 (and x425 x356)))
(assert (x983 x113))
(assert (x983 x1048))
(assert (= (and x748 (not x647)) x434))
(assert (x983 x232))
(assert (x983 x466))
(assert (x983 x906))
(assert (= x830 (and (not x777) x250)))
(assert (= (=> (and (= x684 (x904 (+ 32 x818))) (= (x904 (+ x201 32)) x1038) (= (x904 (+ x519 32)) x818) (= x519 (x904 (+ 32 x1038))) (= (= 0 x154) x1053) (= x154 (x431 x781))) (and (=> (and (and (= x528 (< 0 x55)) (or (not x528) (and (and (= (<= x638 (x303 x619)) x41) x41 (> 4294967296 x327) x284 (= (x215 x781) x45) (= (x215 x619) x638) (= x284 (= (x303 x781) x45))) x528))) (not x1053)) x898) (=> (and (and (= x912 x1012) (= x378 x599) (= x550 x518) (= x476 0) (= x529 x971)) x1053) x594))) x576))
(assert (x983 x440))
(assert (= (x617 (- 256 x387)) 0))
(assert (= 0 (x423 256)))
(assert (x983 x889))
(assert (= (or x208 x822) x455))
(assert (x983 x1114))
(assert (= (and x625 x656) x840))
(assert (x983 x1060))
(assert (x983 x674))
(assert (x983 x524))
(assert (x983 x821))
(assert (= x1025 (and (not x992) x223)))
(assert (x983 x477))
(assert (x983 x110))
(assert (= (x1089 x277) 0))
(assert (x983 x549))
(assert (x983 x184))
(assert (x983 x101))
(assert (= x299 (and x170 x682)))
(assert (= x358 (and (not x933) x274)))
(assert (x983 x275))
(assert (= (and x779 x406) x58))
(assert (x983 x234))
(assert (x983 x864))
(assert (= x366 (=> (and (and (= x747 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x110)) (= (< 0 x712) x1000) (= (x904 (+ x354 x747)) x418) (not (= x941 0)) (not (or (> x1026 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x1026 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x1026)))) (= (x904 (+ x1026 31)) x110) (>= 1461501637330902918203684832716283019655932542975 x778) (= x778 (x947 x354))) (or (and (not x1000) (= x156 x712)) (and x1000 (and (< x837 4294967296) (= 1 x156))))) x601)))
(assert (= x155 (and x846 x404)))
(assert (= x454 (or x124 x649)))
(assert (x983 x320))
(assert (= x63 (or x509 x565)))
(assert (x983 x501))
(assert (= 0 (x423 (+ (x904 (+ 196 x216)) (- (+ (- 128 x1110) x491) 196)))))
(assert (x983 x693))
(assert (= x663 (=> (and (= x114 (x904 (+ x921 96))) (= x61 (not (> x285 128))) (= (x174 256) x645)) (and (=> (= x3 128) x943) x61))))
(assert (= 0 (x423 (+ (- (+ x491 (- 256 x1110)) 196) (x904 (+ x216 196))))))
(assert (x983 x865))
(assert (= (or x408 x695) x743))
(assert (not x428))
(assert (= (and x742 x485) x128))
(assert (x983 x614))
(assert (= (and x131 x849) x762))
(assert (x983 x78))
(assert (= 0 (x617 (- x1114 x387))))
(assert (x983 x650))
(assert (= x437 (or x244 (and x454 (not x312)))))
(assert (= (or x294 x532 x583) x740))
(assert (x983 x1105))
(assert (= x27 (and x762 (not x1057))))
(assert (x983 x527))
(assert (= x356 (and x743 (not x535))))
(assert (x983 x713))
(assert (= (and x43 x99) x928))
(assert (= x339 (and x337 x321)))
(assert (= 0 (x617 (- 192 x387))))
(assert (x983 x590))
(assert (= x768 (=> (and (= (not (> x15 4)) x494) (<= x60 1461501637330902918203684832716283019655932542975) (= x60 (x69 x468)) (= (x904 (+ 32 x1074)) x501)) (and x494 (=> (= x501 x193) x253)))))
(assert (x983 x771))
(assert (x983 x806))
(assert (x983 x1015))
(assert (= (and x1046 x17) x993))
(assert (= 0 (x423 (+ (- x782 196) (x904 (+ 196 x216))))))
(assert (x983 x37))
(assert (x983 x820))
(assert (x983 x300))
(assert (x983 x310))
(assert (x983 x604))
(assert (x983 x596))
(assert (x869 x707))
(assert (x983 x340))
(assert (x983 x679))
(assert (x983 x255))
(assert (x983 x502))
(assert (x983 x468))
(assert (x983 x981))
(assert (x869 x207))
(assert (= (and x7 x355) x421))
(assert (x983 x612))
(assert (x983 x574))
(assert (= (=> (and (= (x317 128) x285) (= x640 (x904 (+ 96 x220))) (= (x904 (+ x308 x1017)) x220) (= (x904 (+ 32 x640)) x921) (= (x16 (- x220 x30)) x214) (= x656 (> x285 0)) (= 96 x259) (= (x16 (- x214 32)) x780)) (and (=> (and x656 (and (= (x657 160) x543) (= (< 32 x285) x221) (= x654 x921))) (and (=> (and (not x221) (= x3 32)) x943) (=> (and x221 (and (= x18 (x904 (+ 32 x921))) (= (x834 192) x537) (= x692 (< 64 x285)))) (and (=> (and (not x692) (= x3 64)) x943) (=> (and x692 (and (= x203 (x904 (+ x921 64))) (= (x525 224) x979) (= x458 (< 96 x285)))) (and (=> (and (not x458) (= x3 96)) x943) (=> x458 x663))))))) (=> (and (= x3 0) (not x656)) x943))) x1088))
(assert (= x321 (or x416 x606 x227 x1001 x520)))
(assert (x983 x1069))
(assert (= x585 (=> (and (or (not x526) x526) (= (= x1083 0) x526)) x1124)))
(assert (x983 x1119))
(assert (x983 x944))
(assert (= x208 (and (not x70) x344)))
(assert (x983 x318))
(assert (= (and (not x1037) x278) x773))
(assert (x983 x1020))
(assert (x983 x1120))
(assert (= x938 (and x980 x224)))
(assert (x983 x971))
(assert (= (and (not x691) x736) x123))
(assert (x983 x725))
(assert (x983 x1115))
(assert (= (and x535 x743) x294))
(assert (x983 x922))
(assert (x983 x719))
(assert (x869 x110))
(assert (= (or x102 x273) x774))
(assert (x983 x1055))
(assert (x869 x623))
(assert (x983 x960))
(assert (x983 x380))
(assert (x869 x1070))
(assert (= (x423 (+ (x904 (+ x216 196)) (- (+ x491 (- x82 x1110)) 196))) 0))
(assert (= (and x194 x59) x945))
(assert (x983 x116))
(assert (= x403 (and x449 x390)))
(assert (x983 x56))
(assert (x496 x723))
(assert (x869 x242))
(assert (= 0 (x423 (+ (- (+ (- x314 160) 196) 196) (x904 (+ 196 x216))))))
(assert (= x65 (or (and (not x702) x836) x977)))
(assert (x983 x1017))
(assert (= 0 (x423 160)))
(assert (= (and x659 x63) x720))
(assert (x983 x212))
(assert (x983 x683))
(assert (x983 x951))
(assert (= x336 (and x846 (not x404))))
(assert (x983 x377))
(assert (x983 x696))
(assert (= x417 (=> (and (= x850 (< x563 x906)) (or (not x850) x850)) x547)))
(assert (= (x423 (+ 96 (x904 (+ 196 x216)))) 0))
(assert (x983 x354))
(assert (= 0 (x617 (- 128 x387))))
(assert (x983 x639))
(assert (= x839 (and (not x752) x718)))
(assert (x983 x81))
(assert (= (x423 192) 0))
(assert (x983 x497))
(assert (= x433 (=> (and (= x531 (x904 (+ x352 32))) (= (x16 (- x951 x98)) x399) (= x811 (x904 (+ 32 x951))) (= x113 (x972 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1099)) (= x1099 (x904 (+ 31 x178))) (= x217 (> x15 0)) (= x473 (x904 (+ x531 32))) (= x951 (x904 (+ x209 x113)))) (and (=> (and (not x217) (= x193 x811)) x253) (=> (and x217 (and (= (x69 x994) x965) (<= x965 1461501637330902918203684832716283019655932542975) (= (x904 (+ 32 x994)) x262) (= (< 1 x15) x992) (= (x904 (+ x811 32)) x894))) (and (=> (and x992 (and (= (x69 x262) x101) (>= 1461501637330902918203684832716283019655932542975 x101) (= (x904 (+ 32 x262)) x799) (= (> x15 2) x1037) (= (x904 (+ 32 x894)) x1115))) (and (=> (and (not x1037) (= x1115 x193)) x253) (=> (and x1037 (and (= x468 (x904 (+ 32 x799))) (<= x757 1461501637330902918203684832716283019655932542975) (= (< 3 x15) x658) (= (x904 (+ 32 x1115)) x1074) (= x757 (x69 x799)))) (and (=> (and (= x1074 x193) (not x658)) x253) (=> x658 x768))))) (=> (and (not x992) (= x894 x193)) x253)))))))
(assert (= (and x849 (not x131)) x160))
(assert (= (and (not x373) x1125) x485))
(assert (= x825 (=> (and (= (x431 x622) x960) (= x1049 (= x960 0)) (= (x972 1461501637330902918203684832716283019655932542975 x79) x622)) (and (=> (and (not x1049) (and (= (< 0 x686) x621) (or (and (and (= (= x513 (x109 x622)) x572) (= x185 (>= (x109 x619) x510)) (= x513 (x347 x622)) (= (x347 x619) x510) (> 4294967296 x949) x185 x572) x621) (not x621)))) x765) (=> (and (and (= x378 x599) (= x912 x1012) (= x518 x550) (= x476 0) (= x529 x971)) x1049) x594)))))
(assert (x983 x435))
(assert (x983 x387))
(assert (x983 x814))
(assert (= (=> (= (> x438 0) x647) (and (=> (and (= (> x438 0) x448) x647) (and (=> (and (and (= x506 (= x723 x104)) (= x1097 x809) (= (x545 x809) x723) (= x104 (x972 1461501637330902918203684832716283019655932542975 x723))) x448) (and (=> (and x506 (= (< 0 x258) x567)) (and (=> (and (and (= (x16 (- x1016 x603)) x165) (= x511 (or (and (< x804 x626) (= (<= x626 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x804))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x626) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x804)))) (= x804 (x545 x304)) (= (x16 (- x165 31)) x626) (= x304 x603)) x567) (and (=> (and (and (= x518 x550) (= x529 x971) (= x378 x599) (= x476 0) (= x1012 x912)) (not x511)) x594) (=> (and (and (= (x904 (+ x603 x804)) x782) (= x172 (> x604 18446744073709551615)) (= x604 (x545 x782))) x511) (and (=> (and x172 (and (= x378 x599) (= x550 x518) (= x971 x529) (= 0 x476) (= x912 x1012))) x594) (=> (and (not x172) (and (= (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x483) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x162)) (and (= (<= x162 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x483)) (> x162 x483))) x126) (= x162 (x904 (+ x782 32))) (= x483 (x16 (- x1016 x604))))) (and (=> (and (and (= x550 x518) (= x529 x971) (= x912 x1012) (= 0 x476) (= x378 x599)) x126) x594) (=> (and (not x126) (and (or (not x602) (and (and (= x591 (= (x306 x723) x944)) x591 (= (x792 x723) x944) x761 (< x1083 4294967296) (= x761 (<= x865 (x306 x619))) (= x865 (x792 x619))) x602)) (= x602 (> x959 0)))) x541))))))) (=> (and (not x567) (and (= 0 x476) (= x550 x518) (= x971 x529) (= x599 x378) (= x912 x1012))) x594))) (=> (and (not x506) (and (= 0 x476) (= x378 x599) (= x529 x971) (= x518 x550) (= x912 x1012))) x594))) (=> (and (not x448) (and (= x476 0) (= x599 x378) (= x912 x1012) (= x550 x518) (= x971 x529))) x594))) (=> (not x647) x825))) x547))
(assert (x869 x286))
(assert (x983 x963))
(assert (x1056 x120))
(assert (= x665 (and x711 (not x448))))
(assert (= x846 (or x579 x376 x620 x268 x42)))
(assert (= x166 (and (not x217) x68)))
(assert (x983 x427))
(assert (x869 x855))
(assert (= x1096 (and x887 x646)))
(assert (= (or x166 x1025 x966 x773 x164) x115))
(assert (= x937 (and (not x808) x832)))
(assert (x983 x1005))
(assert (x983 x47))
(assert (= (=> (and (= x787 (< x900 x1105)) (or (and x787 (= (x904 (+ x900 x737)) x989)) (not x787))) x576) x385))
(assert (x983 x432))
(assert (x983 x843))
(assert (= (=> (and (= (= 0 x549) x145) (or x145 (not x145))) x1050) x1103))
(assert (x983 x330))
(assert (= x957 (and x722 (not x790))))
(assert (x983 x187))
(assert (x983 x397))
(assert (x983 x556))
(assert (x983 x707))
(assert (x983 x365))
(assert (= (and x490 x1065) x813))
(assert (x983 x563))
(assert (x983 x791))
(assert (= (and (not x1035) x421) x1004))
(assert (x983 x746))
(assert (x983 x797))
(assert (x983 x462))
(assert (x983 x842))
(assert (x983 x847))
(assert (x983 x49))
(assert (x983 x412))
(assert (x983 x54))
(assert (x983 x1102))
(assert (= (and x777 x250) x390))
(assert (x983 x1024))
(assert (x983 x216))
(assert (= (and x774 (not x1000)) x667))
(assert (= x886 (and x403 x714)))
(assert (x983 x203))
(assert (x983 x73))
(assert (x983 x630))
(assert (x983 x584))
(assert (= (x423 (+ (- (+ 196 (- x82 160)) 196) (x904 (+ x216 196)))) 0))
(assert (= (and x942 x760) x197))
(assert (x983 x382))
(assert (x983 x619))
(assert (x983 x958))
(check-sat)
(exit)