(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x202 () Bool)
(declare-fun x222 () Int)
(declare-fun x339 () Bool)
(declare-fun x26 () Int)
(declare-fun x236 () Int)
(declare-fun x88 () Int)
(declare-fun x214 () Bool)
(declare-fun x248 () Int)
(declare-fun x337 () Bool)
(declare-fun x124 () Int)
(declare-fun x86 () Int)
(declare-fun x229 () Int)
(declare-fun x147 () Int)
(declare-fun x181 () Int)
(declare-fun x145 () Int)
(declare-fun x289 () Int)
(declare-fun x298 () Bool)
(declare-fun x100 () Bool)
(declare-fun x265 () Int)
(declare-fun x321 () Bool)
(declare-fun x304 () Int)
(declare-fun x92 () Int)
(declare-fun x291 () Int)
(declare-fun x3 () Int)
(declare-fun x360 () Int)
(declare-fun x136 () Int)
(declare-fun x9 () Bool)
(declare-fun x273 () Int)
(declare-fun x379 () Int)
(declare-fun x287 () Bool)
(declare-fun x23 () Bool)
(declare-fun x355 () Int)
(declare-fun x108 () Bool)
(declare-fun x283 () Int)
(declare-fun x224 () Bool)
(declare-fun x84 () Bool)
(declare-fun x342 () Int)
(declare-fun x144 () Bool)
(declare-fun x140 () Int)
(declare-fun x204 () Int)
(declare-fun x30 () Bool)
(declare-fun x153 () Int)
(declare-fun x406 () Int)
(declare-fun x369 () Int)
(declare-fun x196 () Int)
(declare-fun x278 () Int)
(declare-fun x323 () Int)
(declare-fun x178 () Int)
(declare-fun x208 () Int)
(declare-fun x175 () Int)
(declare-fun x361 () Int)
(declare-fun x300 () Bool)
(declare-fun x372 () Int)
(declare-fun x102 (Int) Int)
(declare-fun x132 () Bool)
(declare-fun x5 () Int)
(declare-fun x413 () Int)
(declare-fun x162 () Int)
(declare-fun x250 () Int)
(declare-fun x292 () Bool)
(declare-fun x197 () Bool)
(declare-fun x233 () Bool)
(declare-fun x80 () Int)
(declare-fun x277 () Bool)
(declare-fun x330 () Int)
(declare-fun x293 () Bool)
(declare-fun x130 () Bool)
(declare-fun x46 () Bool)
(declare-fun x143 () Int)
(declare-fun x365 () Int)
(declare-fun x62 () Bool)
(declare-fun x213 () Int)
(declare-fun x333 () Int)
(declare-fun x55 () Int)
(declare-fun x234 () Bool)
(declare-fun x176 () Int)
(declare-fun x251 () Bool)
(declare-fun x377 () Int)
(declare-fun x418 () Int)
(declare-fun x173 () Int)
(declare-fun x120 () Bool)
(declare-fun x68 () Int)
(declare-fun x380 () Int)
(declare-fun x331 () Bool)
(declare-fun x420 () Int)
(declare-fun x335 () Int)
(declare-fun x381 () Int)
(declare-fun x306 (Int) Int)
(declare-fun x367 () Int)
(declare-fun x279 () Int)
(declare-fun x171 () Bool)
(declare-fun x370 () Int)
(declare-fun x111 () Int)
(declare-fun x164 () Int)
(declare-fun x139 () Int)
(declare-fun x36 () Int)
(declare-fun x53 () Bool)
(declare-fun x72 () Bool)
(declare-fun x303 (Int) Int)
(declare-fun x15 () Int)
(declare-fun x152 () Int)
(declare-fun x241 () Int)
(declare-fun x388 () Int)
(declare-fun x285 () Int)
(declare-fun x25 () Int)
(declare-fun x117 () Bool)
(declare-fun x158 () Int)
(declare-fun x255 () Int)
(declare-fun x165 () Int)
(declare-fun x258 () Int)
(declare-fun x188 () Int)
(declare-fun x161 (Int Int) Int)
(declare-fun x28 () Int)
(declare-fun x296 () Bool)
(declare-fun x44 () Int)
(declare-fun x51 () Int)
(declare-fun x113 () Int)
(declare-fun x362 () Int)
(declare-fun x166 () Int)
(declare-fun x416 () Int)
(declare-fun x382 () Int)
(declare-fun x308 () Int)
(declare-fun x27 () Int)
(declare-fun x353 () Int)
(declare-fun x243 () Bool)
(declare-fun x315 () Bool)
(declare-fun x39 () Int)
(declare-fun x206 () Bool)
(declare-fun x352 () Bool)
(declare-fun x85 () Bool)
(declare-fun x22 () Bool)
(declare-fun x54 () Bool)
(declare-fun x87 () Int)
(declare-fun x40 () Int)
(declare-fun x256 () Bool)
(declare-fun x67 () Int)
(declare-fun x220 () Int)
(declare-fun x159 () Int)
(declare-fun x192 (Int Int) Int)
(declare-fun x386 () Bool)
(declare-fun x301 () Int)
(declare-fun x288 () Int)
(declare-fun x105 () Int)
(declare-fun x78 () Int)
(declare-fun x61 () Int)
(declare-fun x59 () Int)
(declare-fun x42 () Bool)
(declare-fun x307 () Int)
(declare-fun x225 () Int)
(declare-fun x82 () Int)
(declare-fun x417 () Int)
(declare-fun x115 () Int)
(declare-fun x63 () Int)
(declare-fun x122 () Int)
(declare-fun x198 () Bool)
(declare-fun x35 () Int)
(declare-fun x411 () Bool)
(declare-fun x131 () Int)
(declare-fun x275 () Int)
(declare-fun x201 () Int)
(declare-fun x266 () Int)
(declare-fun x187 () Int)
(declare-fun x347 () Int)
(declare-fun x374 () Int)
(declare-fun x13 () Int)
(declare-fun x334 () Int)
(declare-fun x11 () Int)
(declare-fun x155 () Int)
(declare-fun x65 () Int)
(declare-fun x21 () Int)
(declare-fun x119 () Int)
(declare-fun x184 () Int)
(declare-fun x226 () Bool)
(declare-fun x180 () Int)
(declare-fun x149 () Int)
(declare-fun x170 () Int)
(declare-fun x407 () Bool)
(declare-fun x404 () Int)
(declare-fun x154 () Bool)
(declare-fun x93 () Int)
(declare-fun x393 () Bool)
(declare-fun x109 () Int)
(declare-fun x1 () Int)
(declare-fun x232 () Int)
(declare-fun x272 () Int)
(declare-fun x137 () Int)
(declare-fun x69 () Int)
(declare-fun x194 () Int)
(declare-fun x338 () Bool)
(declare-fun x223 () Int)
(declare-fun x419 () Int)
(declare-fun x125 () Int)
(declare-fun x89 () Bool)
(declare-fun x409 () Int)
(declare-fun x186 () Bool)
(declare-fun x410 () Int)
(declare-fun x167 () Int)
(declare-fun x185 () Bool)
(declare-fun x402 () Int)
(declare-fun x310 () Int)
(declare-fun x239 () Int)
(declare-fun x168 () Int)
(declare-fun x253 () Bool)
(declare-fun x163 () Int)
(declare-fun x210 () Int)
(declare-fun x106 () Int)
(declare-fun x83 () Int)
(declare-fun x340 () Int)
(declare-fun x66 () Bool)
(declare-fun x326 () Int)
(declare-fun x415 () Bool)
(declare-fun x12 () Int)
(declare-fun x215 () Int)
(declare-fun x19 (Int) Int)
(declare-fun x14 (Int) Int)
(declare-fun x349 () Int)
(declare-fun x412 () Int)
(declare-fun x317 () Int)
(declare-fun x405 () Bool)
(declare-fun x135 () Int)
(declare-fun x356 () Bool)
(declare-fun x327 () Int)
(declare-fun x325 () Int)
(declare-fun x259 () Int)
(declare-fun x336 () Int)
(declare-fun x47 () Int)
(declare-fun x269 () Int)
(declare-fun x104 () Int)
(declare-fun x114 () Int)
(declare-fun x52 () Int)
(declare-fun x371 () Int)
(declare-fun x211 () Int)
(declare-fun x398 () Bool)
(declare-fun x33 () Bool)
(declare-fun x146 () Int)
(declare-fun x60 () Int)
(declare-fun x41 () Int)
(declare-fun x254 () Bool)
(declare-fun x341 () Int)
(declare-fun x150 () Int)
(declare-fun x358 () Int)
(declare-fun x309 () Int)
(declare-fun x391 () Bool)
(declare-fun x302 () Int)
(declare-fun x31 () Int)
(declare-fun x318 () Bool)
(declare-fun x95 () Int)
(declare-fun x190 () Int)
(declare-fun x177 () Bool)
(declare-fun x183 () Bool)
(declare-fun x385 () Int)
(declare-fun x50 () Int)
(declare-fun x354 () Int)
(declare-fun x401 () Int)
(declare-fun x357 () Bool)
(declare-fun x91 (Int Int) Int)
(declare-fun x311 () Int)
(declare-fun x322 () Int)
(declare-fun x103 () Int)
(declare-fun x230 () Int)
(declare-fun x128 () Int)
(declare-fun x212 () Int)
(declare-fun x160 () Int)
(declare-fun x7 () Int)
(declare-fun x101 () Bool)
(declare-fun x110 () Int)
(declare-fun x249 () Int)
(declare-fun x142 () Bool)
(declare-fun x267 () Int)
(declare-fun x264 () Int)
(declare-fun x199 (Int Int Int Int) Int)
(declare-fun x244 () Int)
(declare-fun x218 () Int)
(declare-fun x118 () Int)
(declare-fun x329 () Int)
(declare-fun x297 () Int)
(declare-fun x359 () Int)
(declare-fun x207 () Int)
(declare-fun x375 () Int)
(declare-fun x98 () Int)
(declare-fun x363 () Int)
(declare-fun x235 () Int)
(declare-fun x238 () Int)
(declare-fun x392 () Int)
(declare-fun x157 () Int)
(declare-fun x328 () Int)
(declare-fun x24 () Int)
(declare-fun x237 () Int)
(declare-fun x75 () Int)
(declare-fun x37 () Int)
(declare-fun x49 () Int)
(declare-fun x366 () Int)
(declare-fun x262 () Int)
(declare-fun x216 () Int)
(declare-fun x174 () Int)
(declare-fun x389 () Bool)
(declare-fun x281 () Int)
(declare-fun x400 () Int)
(declare-fun x6 () Int)
(declare-fun x343 () Int)
(declare-fun x77 () Bool)
(declare-fun x312 () Int)
(declare-fun x299 () Int)
(declare-fun x263 () Int)
(declare-fun x378 () Int)
(declare-fun x384 () Int)
(declare-fun x70 () Int)
(declare-fun x364 () Bool)
(declare-fun x408 () Int)
(declare-fun x129 () Int)
(declare-fun x148 () Int)
(declare-fun x261 () Int)
(declare-fun x368 () Int)
(declare-fun x414 () Int)
(declare-fun x16 () Int)
(declare-fun x18 () Int)
(declare-fun x4 (Int) Int)
(declare-fun x242 () Int)
(declare-fun x276 () Int)
(declare-fun x121 () Bool)
(declare-fun x373 (Int) Int)
(declare-fun x345 () Bool)
(declare-fun x290 () Bool)
(declare-fun x126 () Bool)
(declare-fun x227 () Int)
(declare-fun x45 () Int)
(declare-fun x138 () Int)
(declare-fun x127 () Int)
(declare-fun x271 () Int)
(declare-fun x74 () Int)
(declare-fun x390 () Int)
(declare-fun x394 () Int)
(declare-fun x397 () Int)
(declare-fun x203 () Int)
(declare-fun x156 () Int)
(declare-fun x57 () Int)
(declare-fun x58 () Int)
(declare-fun x20 () Int)
(declare-fun x383 () Bool)
(declare-fun x274 () Bool)
(declare-fun x90 () Int)
(declare-fun x314 () Int)
(declare-fun x116 () Bool)
(declare-fun x350 () Int)
(declare-fun x247 () Int)
(declare-fun x282 () Int)
(declare-fun x205 () Bool)
(declare-fun x179 () Int)
(declare-fun x81 () Bool)
(declare-fun x34 () Bool)
(declare-fun x71 () Int)
(declare-fun x200 () Bool)
(declare-fun x76 () Bool)
(declare-fun x189 () Int)
(declare-fun x280 () Bool)
(declare-fun x193 () Int)
(declare-fun x97 () Int)
(declare-fun x332 () Int)
(declare-fun x32 () Bool)
(declare-fun x270 () Bool)
(declare-fun x403 () Int)
(declare-fun x240 () Int)
(declare-fun x346 () Int)
(declare-fun x209 () Int)
(declare-fun x17 () Bool)
(declare-fun x252 () Int)
(declare-fun x2 () Bool)
(declare-fun x286 () Int)
(declare-fun x395 () Int)
(declare-fun x48 () Int)
(declare-fun x348 () Bool)
(declare-fun x294 () Bool)
(declare-fun x284 () Int)
(declare-fun x221 () Int)
(declare-fun x319 () Bool)
(declare-fun x141 () Bool)
(declare-fun x324 () Bool)
(declare-fun x217 () Int)
(declare-fun x305 () Int)
(declare-fun x38 () Int)
(declare-fun x320 () Int)
(declare-fun x56 () Bool)
(declare-fun x295 () Int)
(declare-fun x246 () Int)
(declare-fun x134 () Bool)
(declare-fun x79 () Bool)
(declare-fun x257 () Int)
(declare-fun x64 () Int)
(define-fun x399 ((x29 Int)) Int (ite (and (>= x29 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x29)) x29 (- x29 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x123 ((x29 Int)) Int (ite (and (> 0 x29) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x29)) (+ x29 115792089237316195423570985008687907853269984665640564039457584007913129639936) x29))
(define-fun x195 ((x245 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x245) (>= x245 0)))
(define-fun x396 ((x245 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x245) (<= 0 x245)))
(define-fun x376 ((x245 Int)) Bool (and (= (x192 x245 115792089237316195423570985008687907853269984665640564039457584007913129639935) x245) (= (x192 115792089237316195423570985008687907853269984665640564039457584007913129639935 x245) x245)))
(define-fun x313 ((x245 Int)) Bool (and (= 0 (x192 x245 0)) (= (x192 0 x245) 0)))
(define-fun x96 ((x245 Int)) Bool (= x245 (x192 x245 x245)))
(define-fun x219 ((x245 Int)) Bool (and (x376 x245) (x96 x245) (x313 x245)))
(define-fun x169 ((x245 Int) (x8 Int)) Bool (= (x192 x8 x245) (x192 x245 x8)))
(define-fun x316 ((x245 Int) (x8 Int)) Bool (and (>= (x192 x245 x8) 0) (=> (<= 0 x8) (>= x8 (x192 x245 x8))) (=> (>= x245 0) (<= (x192 x245 x8) x245))))
(define-fun x99 ((x245 Int) (x8 Int)) Bool (and (x316 x245 x8) (x169 x245 x8)))
(define-fun x351 ((x245 Int)) Bool (= (x192 x245 1461501637330902918203684832716283019655932542975) (mod x245 1461501637330902918203684832716283019655932542976)))
(define-fun x231 ((x245 Int)) Bool (and (x99 x245 1461501637330902918203684832716283019655932542975) (x351 x245)))
(define-fun x133 ((x107 Int)) Int (ite (= 13 x107) x114 (x19 x107)))
(define-fun x151 ((x107 Int)) Int (ite (= 14 x107) x392 (x133 x107)))
(define-fun x182 ((x107 Int)) Int (ite (= 15 x107) x146 (x151 x107)))
(define-fun x172 ((x107 Int)) Int (ite (= x107 16) x24 (x182 x107)))
(define-fun x73 ((x107 Int)) Int (ite (= x107 128) x203 (x14 x107)))
(define-fun x191 ((x107 Int)) Int (ite (= 160 x107) (ite x132 1 0) (x73 x107)))
(define-fun x112 ((x107 Int)) Int (ite (= x107 128) x125 (x4 x107)))
(define-fun x260 ((x107 Int)) Int (ite (= x107 160) (ite x298 1 0) (x112 x107)))
(define-fun x344 ((x107 Int)) Int (ite (= x282 x107) 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x373 x107)))
(define-fun x43 ((x107 Int)) Int (ite (= x107 x282) 0 (x344 x107)))
(define-fun x268 ((x107 Int)) Int (ite (= x107 x196) 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x43 x107)))
(define-fun x94 ((x107 Int)) Int (ite (= x365 x107) x21 (x268 x107)))
(define-fun x387 ((x107 Int)) Int (ite (= x107 x28) x310 (x94 x107)))
(define-fun x228 ((x107 Int)) Int (ite (= x11 x107) x246 (x387 x107)))
(define-fun x10 ((x107 Int)) Int (ite (= x107 x196) (ite true 1 0) (x228 x107)))
(assert (=> (<= x366 10000) (not (= x366 (x199 36 32 x71 (x91 x124 224))))))
(assert (not (= (x199 36 32 x71 1356689113) 3506505391)))
(assert (not (= 503383097 (x199 36 32 x71 1356689113))))
(assert (x396 x302))
(assert (x195 x371))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 1531409238)))
(assert (not (= (x199 36 32 x71 954831406) 743225245)))
(assert (=> (>= 10000 x95) (not (= x95 (x199 36 32 x71 954831406)))))
(assert (x396 x180))
(assert (x396 x285))
(assert (= (or x126 x171) x357))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 686821956)))
(assert (x396 x370))
(assert (not (= (x199 36 32 x71 1356689113) 2876725745)))
(assert (not (= (x199 36 32 x71 790236105) 3051865383)))
(assert (not (= (x199 36 32 x71 4105672269) 3224796394)))
(assert (= (=> (and (and (and (< 0 x173) (= x173 (x303 x246)) (not (< x278 3224796394)) (< x278 3812870723) (= x380 86400) (= x278 3249860859) (= 1531409238 x90) (not (= x278 3224796394)) (> 3366849169 x278) (= x209 86400) (< x278 3567393941) (not (< x278 2127478272))) (and (and (< x247 2127478272) (= 0 x404) (not (= x247 910484757)) (not (= 822145385 x247)) (not (< x247 743225245)) (= x1 (x303 x246)) (< 0 x1) (= 2 x361) (= x382 86400) (= x247 922701707) (< x247 954831406) (not (> 500647658 x247)) (not (< x247 822145385)) (not (= x247 826074471))) (and (and (and (= 519173431 x276) (= (x303 x246) x349) (< 0 x349) (not (= 503383097 x276)) (= x255 5000) (< x276 743225245) (= 1000 x275) (not (= 500647658 x276)) (< x276 2127478272) (< x276 596258137) (= x189 1000) (= 5000 x204) (not (< x276 500647658)) (= true x324) (> 954831406 x276)) (and (and (and (not (= 599290589 x302)) (< 0 x362) (= 1 x57) (> 743225245 x302) (= 686821956 x302) (= 1 x176) (not (> 596258137 x302)) (> 2127478272 x302) (not (> 500647658 x302)) (> 954831406 x302) (= (x303 x246) x362) (= x258 1) (not (= x302 596258137))) (and (and (and (and (not (= x301 1984976886)) (not (> 1984976886 x301)) (= x301 2064814097) (not (> 954831406 x301)) (< x301 2127478272) (= 0 x341) (> x236 0) (= x88 64) (not (= x301 2039265891)) (not (< x301 1871194811)) (= 0 x157) (not (< x301 1439069736)) (= x236 (x303 x246)) (= x226 true)) (and (and (= 64 x409) (< 0 x156) (not (< x372 2127478272)) (= x372 3506505391) (= (x303 x246) x156) (= 128 x235) (not (< x372 3366849169)) (< x372 3567393941) (not (> 3224796394 x372)) (not (= x372 3366849169)) (= x374 64) (< x372 3812870723) (= x79 true)) (and (and (and (and (and (= x152 x347) (= 5000 x115) (<= x370 1461501637330902918203684832716283019655932542975) (= x16 64) (>= x370 0) (= x269 (x303 x246)) (< 0 x269) (= true x32) (= 519173431 x150) (< x150 954831406) (not (= 500647658 x150)) (>= x152 0) (not (< x150 500647658)) (> 596258137 x150) (not (= 503383097 x150)) (= x136 64) (> 2127478272 x150) (= x370 x310) (> 743225245 x150) (= 5000 x406) (>= 1461501637330902918203684832716283019655932542975 x152)) (and (<= x3 1461501637330902918203684832716283019655932542975) (= x358 x368) (not (> 3008386744 x129)) (= x353 (x19 15)) (= (< x146 x238) x154) (= (x19 13) x45) (>= x82 0) (= x38 x119) (= 100000 x70) (= 0 x368) (= x129 3051865383) (>= 1461501637330902918203684832716283019655932542975 x38) (not (= 3008386744 x129)) (>= 1461501637330902918203684832716283019655932542975 x82) (> x390 0) (= (x303 x246) x390) (not (> 2580288415 x129)) (not (< x129 2863377861)) (<= 0 x38) (= (x19 14) x15) (not (> 2127478272 x129)) (= 5000 x417) (< x129 3224796394) (<= 0 x3) (= x238 (x19 16)) (= x119 x271) (= x82 x310))) (and (not (< x127 1871194811)) (not (> 1439069736 x127)) (not (> 954831406 x127)) (= 64 x325) (= x127 1871194811) (> 2127478272 x127) (< x127 1984976886) (= x103 64) (= x177 true) (< 0 x184) (= x184 (x303 x246)) (= 64 x401))) (and (not (> 3224796394 x87)) (not (> 3812870723 x87)) (= x330 64) (= x379 192) (= true x186) (= x266 192) (not (< x87 3890975986)) (= (x303 x246) x208) (< x87 3996650231) (not (> 2127478272 x87)) (= x87 3890975986) (> x208 0))) (and (< x111 1871194811) (= x230 128) (= 1862597803 x111) (not (= x111 1816029635)) (= x202 true) (= 128 x187) (not (< x111 1738207182)) (not (= x111 1738207182)) (= x242 (x303 x246)) (= x49 192) (< x111 2127478272) (not (= x111 1840041978)) (not (< x111 954831406)) (< 0 x242) (not (< x111 1439069736)))))) (and (< x211 3224796394) (< 0 x44) (not (> 2127478272 x211)) (< x211 3008386744) (= 0 x138) (not (< x211 2863377861)) (not (= 2863377861 x211)) (= x279 5000) (= 100000 x343) (not (= x211 2966737888)) (= 3002540418 x211) (not (= 2876725745 x211)) (not (> 2580288415 x211)) (= (x303 x246) x44))) (and (= 1 x47) (= x41 5000) (< x174 954831406) (= 0 x5) (< x174 596258137) (< x174 2127478272) (not (= 503383097 x174)) (= x12 (x303 x246)) (= 5000 x311) (= x174 519173431) (> x12 0) (< x174 743225245) (not (= x174 500647658)) (not (> 500647658 x174))))) (and (= 1 x65) (= x26 686821956) (< x26 743225245) (not (< x26 500647658)) (< x26 2127478272) (< x26 954831406) (= x131 5000) (not (> 596258137 x26)) (not (= 596258137 x26)) (= 1 x225) (> x175 0) (= x175 (x303 x246)) (not (= 599290589 x26))))) (and (< 0 x249) (< x52 2127478272) (= x249 (x303 x246)) (not (< x52 954831406)) (not (= 1738207182 x52)) (= 2 x309) (not (< x52 1439069736)) (= x206 true) (< x52 1871194811) (= 1816029635 x52) (= x140 1000) (not (< x52 1738207182)) (= x104 2))))) (and (= x253 (< 0 (x303 x246))) (> x149 0) (>= x360 0) (not (= x366 x95)) (> x95 0) (>= x265 0) x407 (<= x366 1461501637330902918203684832716283019655932542975) (not (= x246 x164)) (>= 1461501637330902918203684832716283019655932542975 x164) (>= x336 0) (>= x78 0) (= x223 86400) x386 (not (= x149 x164)) x253 (<= 0 x285) (not (= x366 x246)) (= (x102 x149) x78) (not (= x149 x366)) (> x164 0) (not (= 3224796394 x248)) (= (x102 x366) x336) (= x360 (x102 x246)) (< 0 x366) (not (= x246 x149)) (= x22 (< 0 (x303 x95))) x415 (= (> (x303 x164) 0) x415) (not (> 3224796394 x248)) (not (< x248 2127478272)) (<= x246 1461501637330902918203684832716283019655932542975) (> 3567393941 x248) (< x248 3812870723) (= x386 (< 0 (x303 x366))) (not (= x95 x246)) (<= x149 1461501637330902918203684832716283019655932542975) x22 (not (= x95 x149)) (> 3366849169 x248) (> x35 0) (= (x102 x164) x285) (>= 1461501637330902918203684832716283019655932542975 x95) (= x407 (> (x303 x149) 0)) (= x265 (x102 x95)) (> x246 0) (= x35 (x303 x246)) (not (= x164 x366)) (not (= x95 x164)) (= 3249860859 x248))) (and (=> (and (and (or (and (and (= (mod (* x363 x408) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x289) (< 0 x159) (= x363 (x123 (- x15 x45))) (= (x399 (+ x317 x45)) x281) (= (div x289 x159) x317) (= x408 (x123 (- x146 x353))) (= x159 (x123 (- x238 x353))) (= x281 x67)) x234) (and (not x234) (and (< 0 x110) (= (div x148 x110) x420) (= (x123 (- x45 x15)) x241) (= (x123 (- x238 x353)) x110) (= (mod (* x412 x241) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x148) (= x67 x222) (= (x123 (- x45 x420)) x222) (= (x123 (- x146 x353)) x412)))) (= (< x45 x15) x234)) x154) x321) (=> (and (not x154) (and (= x203 x15) (= x194 0))) x339))) x134))
(assert (= (=> (and (= x13 x83) (= x239 x282)) x23) x348))
(assert (not (= 1439069736 (x199 36 32 x71 4105672269))))
(assert (x396 x343))
(assert (x396 x38))
(assert (=> (<= x164 10000) (not (= (x199 36 32 x71 954831406) x164))))
(assert (not (= (x199 36 32 x71 1356689113) 686821956)))
(assert (x396 x266))
(assert (x396 x367))
(assert (not (= (x199 36 32 x71 954831406) 519173431)))
(assert (x396 x301))
(assert (not (= (x199 36 32 x71 954831406) 2863377861)))
(assert (not (= 15 (x199 36 32 x71 1356689113))))
(assert (x396 x3))
(assert (not (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 790236105) 954831406)))
(assert (not (= 25742203781880459408941457317362166305709681742799472914177068605934923677696 (x199 36 32 x71 790236105))))
(assert (x396 x347))
(assert (not (= (x199 36 32 x71 3943638230) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x199 36 32 x71 3943638230) 790236105)))
(assert (= (and x352 x34) x141))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 743225245)))
(assert (x396 x55))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 503383097)))
(assert (x396 x51))
(assert (x396 x327))
(assert (not (= (x199 36 32 x71 790236105) 743225245)))
(assert (not (= 822145385 (x199 36 32 x71 3943638230))))
(assert (x396 x371))
(assert (not (= (x199 36 32 x71 4105672269) 922701707)))
(assert (not (= (x199 36 32 x71 1356689113) 2064814097)))
(assert (=> (>= 10000 x95) (not (= (x199 36 32 x71 4105672269) x95))))
(assert (not (= 100000 (x199 36 32 x71 3943638230))))
(assert (x396 x349))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x199 36 32 x71 1356689113))))
(assert (x396 x265))
(assert (=> (<= x366 10000) (not (= x366 (x199 36 32 x71 790236105)))))
(assert (x396 x278))
(assert (not (= 1738207182 (x199 36 32 x71 3943638230))))
(assert (x396 x155))
(assert (x396 x419))
(assert (x396 x37))
(assert (not (= (x199 36 32 x71 3943638230) 3567393941)))
(assert (=> (<= x71 10000) (not (= x71 (x199 36 32 x71 790236105)))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 1816029635)))
(assert (x396 x412))
(assert (not (= (x199 36 32 x71 3943638230) 13)))
(assert (x396 x329))
(assert (x396 x248))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 86400)))
(assert (not (= 1738207182 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x361))
(assert (not (= (x199 36 32 x71 1356689113) 3996650231)))
(assert (not (= (x199 36 32 x71 790236105) 100000)))
(assert (x396 x264))
(assert (not (= (x199 36 32 x71 4105672269) 70508962019145425934951811999677760319478833095128838543097651878529435959296)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 4105672269) 16)))
(assert (not (= (x199 36 32 x71 4105672269) 2039265891)))
(assert (not (= 1871194811 (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 4105672269) 77196514420459877940035116867124998943289115686762304616657918434777787006976)))
(assert (=> (>= 10000 x164) (not (= (x199 36 32 x71 1356689113) x164))))
(assert (=> (<= x366 10000) (not (= x366 (x199 36 32 x71 3943638230)))))
(assert (x396 x284))
(assert (not (= 790236105 (x199 36 32 x71 954831406))))
(assert (not (= 2966737888 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= (x199 36 32 x71 1356689113) 3366849169)))
(assert (x396 x410))
(assert (not (= (x199 36 32 x71 4105672269) (x199 36 32 x71 954831406))))
(assert (x396 x45))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 13)))
(assert (x396 x366))
(assert (not (= (x199 36 32 x71 790236105) 14)))
(assert (= (x91 x124 224) (div x124 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 519173431)))
(assert (not (= 4105672269 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 954831406)))
(assert (x396 x138))
(assert (not (= 596258137 (x199 36 32 x71 (x91 x124 224)))))
(assert (= x23 (=> (and (= (= 0 x13) x130) (or (and (not x130) (and (= (= x55 x329) x200) (= (ite x200 1 0) x419) (= (x192 1461501637330902918203684832716283019655932542975 x229) x329))) (and (and (= x11 (x399 (+ 32 x28))) (= (x303 x371) x272) (< 0 x221) (= x122 2863377861) (= (x399 (+ x365 32)) x28) (= x413 (x399 (+ x196 4))) (= x221 (x303 x366)) (= 4 x359) (not (< x359 4)) (= (x399 (+ x282 32)) x196) (= x365 x413) (= x250 4) (= x378 x419) (= x205 (not x54)) (= x250 x359) (not (> 2863377861 x122)) (= x170 (x303 x366)) (= x371 (x43 x137)) (= x333 x378) (not (= x170 0)) (= x196 x210) (>= 1461501637330902918203684832716283019655932542975 x371) (= x105 77196514420459877940035116867124998943289115686762304616657918434777787006976) (= x54 (= 0 x378)) (= (x10 x210) x378) (= x282 x137) (> 3871629458 x122) (= (ite x205 1 0) x333) (not (= x272 0))) x130))) x294)))
(assert (not (= (x199 36 32 x71 1356689113) 106320276355336348263208190817157392285036095892762275362566149969828045127680)))
(assert (x396 x67))
(assert (not (= 2966737888 (x199 36 32 x71 790236105))))
(assert (x396 x207))
(assert (not (= 15314092380000 (x199 36 32 x71 790236105))))
(assert (not (= 3366849169 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 1356689113) 3051865383)))
(assert (not (= 3506505391 (x199 36 32 x71 954831406))))
(assert (not (= 519173431 (x199 36 32 x71 790236105))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249216 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 1871194811 (x199 36 32 x71 3943638230))))
(assert (not (= 3366849169 (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 4105672269) 2064814097)))
(assert (not (= 4105672269 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= (x199 36 32 x71 790236105) 790236105)))
(assert (not (= 15314092380000 (x199 36 32 x71 (x91 x124 224)))))
(assert (=> (>= 10000 x366) (not (= x366 (x199 36 32 x71 4105672269)))))
(assert (x396 x147))
(assert (not (= (x199 36 32 x71 1356689113) 3002540418)))
(assert (x396 x201))
(assert (x195 x149))
(assert (x396 x252))
(assert (not (= 2039265891 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x244))
(assert (not (= 2580288415 (x199 36 32 x71 1356689113))))
(assert (= (and x101 (not x270)) x34))
(assert (x396 x372))
(assert (not (= 21304723245256853039595661774342629002073543191790936201937503064778531143680 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 3366849169 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x163))
(assert (not (= (x199 36 32 x71 1356689113) 2863377861)))
(assert (= x84 (=> (and (= x284 x304) (= x375 x267)) x315)))
(assert (x396 x418))
(assert (not (= 770885568 (x199 36 32 x71 790236105))))
(assert (x396 x223))
(assert (not (= 1531409238 (x199 36 32 x71 1356689113))))
(assert (x396 x237))
(assert (x396 x239))
(assert (x396 x6))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= (x199 36 32 x71 954831406) 3224796394)))
(assert (= x108 (or x331 x121)))
(assert (not (= (x199 36 32 x71 954831406) 86400)))
(assert (=> (>= 10000 x371) (not (= x371 (x199 36 32 x71 (x91 x124 224))))))
(assert (=> (<= x149 10000) (not (= x149 (x199 36 32 x71 1356689113)))))
(assert (x396 x97))
(assert (not (= (x199 36 32 x71 4105672269) 1871194811)))
(assert (not (= 3890975986 (x199 36 32 x71 954831406))))
(assert (=> (<= x149 10000) (not (= (x199 36 32 x71 790236105) x149))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 36576266130383907740409294828766280552204369950469466485900666250106563985408)))
(assert (not (= 15314092380000 (x199 36 32 x71 954831406))))
(assert (x396 x221))
(assert (x396 x137))
(assert (=> (<= x71 10000) (not (= x71 (x199 36 32 x71 4105672269)))))
(assert (not (= (x199 36 32 x71 3943638230) 106320276355336348263208190817157392285036095892762275362566149969828045127680)))
(assert (x396 x140))
(assert (=> (>= 10000 x371) (not (= x371 (x199 36 32 x71 1356689113)))))
(assert (x219 1461501637330902918203684832716283019655932542975))
(assert (not (= 503383097 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3008386744)))
(assert (x396 x162))
(assert (not (= (x199 36 32 x71 954831406) (x199 36 32 x71 1356689113))))
(assert (x396 x328))
(assert (not (= 16 (x199 36 32 x71 3943638230))))
(assert (x396 x394))
(assert (not (= (x199 36 32 x71 790236105) 503383097)))
(assert (not (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 (x199 36 32 x71 790236105))))
(assert (x396 x400))
(assert (not (= (x199 36 32 x71 954831406) 2039265891)))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3812870723)))
(assert (not (= 1531409238 (x199 36 32 x71 4105672269))))
(assert (x195 x246))
(assert (x396 x401))
(assert (x396 x136))
(assert (not (= (x199 36 32 x71 790236105) 3249860859)))
(assert (x396 x74))
(assert (not (= 2127478272 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x41))
(assert (not (= 36576266130383907740409294828766280552204369950469466485900666250106563985408 (x199 36 32 x71 1356689113))))
(assert (=> (>= 10000 x164) (not (= (x199 36 32 x71 4105672269) x164))))
(assert (= (x373 x210) 0))
(assert (x396 x181))
(assert (not (= 599290589 (x199 36 32 x71 954831406))))
(assert (not x134))
(assert (not (= 36 (x199 36 32 x71 790236105))))
(assert (not (= 1984976886 (x199 36 32 x71 1356689113))))
(assert (not (= 32 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 3871629458 (x199 36 32 x71 954831406))))
(assert (not (= 599290589 (x199 36 32 x71 3943638230))))
(assert (x396 x403))
(assert (x396 x178))
(assert (not (= 3051865383 (x199 36 32 x71 954831406))))
(assert (x396 x317))
(assert (not (= (x199 36 32 x71 1356689113) 3567393941)))
(assert (= (and (not x352) x34) x72))
(assert (not (= (x199 36 32 x71 3943638230) 3996650231)))
(assert (not (= (x199 36 32 x71 1356689113) 21304723245256853039595661774342629002073543191790936201937503064778531143680)))
(assert (x396 x378))
(assert (not (= (x199 36 32 x71 4105672269) 500647658)))
(assert (not (= 36 (x199 36 32 x71 1356689113))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 500647658)))
(assert (not (= 3008386744 (x199 36 32 x71 3943638230))))
(assert (x396 x232))
(assert (x195 x124))
(assert (x396 x241))
(assert (= x2 (and (not x405) x198)))
(assert (not (= 15 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= (x199 36 32 x71 4105672269) 2580288415)))
(assert (not (= (x199 36 32 x71 4105672269) 1738207182)))
(assert (x396 x360))
(assert (x396 x170))
(assert (not (= (x199 36 32 x71 954831406) 21304723245256853039595661774342629002073543191790936201937503064778531143680)))
(assert (not (= (x199 36 32 x71 4105672269) 596258137)))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 2580288415)))
(assert (x396 x335))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 16)))
(assert (=> (>= 10000 x71) (not (= (x199 36 32 x71 1356689113) x71))))
(assert (=> (>= 10000 x246) (not (= x246 (x199 36 32 x71 4105672269)))))
(assert (x396 x26))
(assert (x396 x190))
(assert (x396 x158))
(assert (not (= (x199 36 32 x71 4105672269) 1356689113)))
(assert (=> (>= 10000 x246) (not (= (x199 36 32 x71 954831406) x246))))
(assert (not (= (x199 36 32 x71 4105672269) 32)))
(assert (not (= 15 (x199 36 32 x71 954831406))))
(assert (x396 x271))
(assert (=> (>= 10000 x149) (not (= x149 (x199 36 32 x71 3943638230)))))
(assert (x396 x39))
(assert (=> (<= x164 10000) (not (= (x199 36 32 x71 790236105) x164))))
(assert (not (= (x199 36 32 x71 3943638230) 3249860859)))
(assert (not (= 36 (x199 36 32 x71 954831406))))
(assert (= x101 (and (not x274) x337)))
(assert (x396 x87))
(assert (not (= (x199 36 32 x71 954831406) 14)))
(assert (not (= 3871629458 (x199 36 32 x71 1356689113))))
(assert (x396 x68))
(assert (not (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 1356689113) 519173431)))
(assert (not (= 2127478272 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 790236105) 4105672269)))
(assert (x396 x217))
(assert (not (= (x199 36 32 x71 3943638230) 3943638230)))
(assert (not (= 1871194811 (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 790236105) 3871629458)))
(assert (not (= 599290589 (x199 36 32 x71 4105672269))))
(assert (x396 x330))
(assert (x396 x70))
(assert (=> (<= x95 10000) (not (= (x199 36 32 x71 3943638230) x95))))
(assert (not (= (x199 36 32 x71 4105672269) 36)))
(assert (not (= 16 (x199 36 32 x71 954831406))))
(assert (x396 x105))
(assert (x396 x286))
(assert (=> (>= 10000 x95) (not (= (x199 36 32 x71 790236105) x95))))
(assert (not (= (x199 36 32 x71 4105672269) 3008386744)))
(assert (not (= (x199 36 32 x71 3943638230) 686821956)))
(assert (x396 x175))
(assert (not (= 21304723245256853039595661774342629002073543191790936201937503064778531143680 (x199 36 32 x71 4105672269))))
(assert (x396 x124))
(assert (not (= (x199 36 32 x71 954831406) 70508962019145425934951811999677760319478833095128838543097651878529435959296)))
(assert (x396 x75))
(assert (x396 x276))
(assert (x396 x157))
(assert (x396 x283))
(assert (not (= (x199 36 32 x71 3943638230) 910484757)))
(assert (= x280 (and x89 (not x9))))
(assert (not (= (x199 36 32 x71 1356689113) 77196514420459877940035116867124998943289115686762304616657918434777787006976)))
(assert (x396 x7))
(assert (not (= 3506505391 (x199 36 32 x71 790236105))))
(assert (not (= 15314092380000 (x199 36 32 x71 4105672269))))
(assert (x396 x259))
(assert (x396 x173))
(assert (x396 x104))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 770885568)))
(assert (not (= (x199 36 32 x71 4105672269) 86400)))
(assert (x396 x297))
(assert (x396 x150))
(assert (x396 x114))
(assert (= (and x183 x345) x142))
(assert (not (= (x199 36 32 x71 954831406) 1840041978)))
(assert (not (= 1816029635 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 954831406) 1738207182)))
(assert (not (= 16 (x199 36 32 x71 1356689113))))
(assert (not (= (x199 36 32 x71 4105672269) 519173431)))
(assert (not (= 2039265891 (x199 36 32 x71 790236105))))
(assert (x396 x359))
(assert (not (= (x199 36 32 x71 3943638230) 36)))
(assert (not (= 1984976886 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 4105672269) 1840041978)))
(assert (not (= (x199 36 32 x71 790236105) 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (not (= (x199 36 32 x71 4105672269) 36576266130383907740409294828766280552204369950469466485900666250106563985408)))
(assert (= (and (not x345) x183) x337))
(assert (not (= (x199 36 32 x71 3943638230) 1356689113)))
(assert (x396 x404))
(assert (x396 x377))
(assert (x396 x299))
(assert (=> (>= 10000 (x91 x124 224)) (not (= (x91 x124 224) (x199 36 32 x71 1356689113)))))
(assert (not (= (x199 36 32 x71 4105672269) 14)))
(assert (not (= (x199 36 32 x71 790236105) 86400)))
(assert (not (= (x199 36 32 x71 4105672269) 3812870723)))
(assert (not (= (x199 36 32 x71 3943638230) 15314092380000)))
(assert (not (= 1531409238 (x199 36 32 x71 790236105))))
(assert (x396 x395))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 2876725745)))
(assert (x396 x326))
(assert (x396 x262))
(assert (=> (>= 10000 x164) (not (= (x199 36 32 x71 (x91 x124 224)) x164))))
(assert (=> (= (x199 36 32 x71 1356689113) (x199 36 32 x71 (x91 x124 224))) (= (x91 x124 224) 1356689113)))
(assert (x396 x80))
(assert (not (= 32 (x199 36 32 x71 3943638230))))
(assert (x396 x261))
(assert (=> (>= 10000 x371) (not (= x371 (x199 36 32 x71 954831406)))))
(assert (= x30 (=> (and (and (= x37 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x20 1000)) (= x405 (> x392 x114)) (= x392 (mod (* 1000 x295) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x312 1000)) (or (and (and (not (= x190 0)) (= x190 (mod (* x392 x328) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x328 x392)) (= 86400 x64) (= x334 (mod (* 86400 x114) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x114 86400)) (= x153 (ite (= 0 x334) 0 (x399 (+ 1 (mod (div (x123 (- x334 1)) x190) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (= x286 x153)) (not x405)) (and (and (= x163 x286) (= (div x227 x326) x74) (ite x46 x46 (= (div x326 x114) x328)) (= (mod (* x328 x114) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x326) (not (= x326 0)) (= x135 (mod (* x392 86400) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x163 (x399 (+ x74 1))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 86400 x392)) (= x227 (x123 (- x135 1))) (= 86400 x240) (= x46 (= x114 0))) x405))) x338)))
(assert (not (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x199 36 32 x71 790236105))))
(assert (x396 x122))
(assert (=> (>= 10000 x246) (not (= x246 (x199 36 32 x71 3943638230)))))
(assert (not (= 3002540418 (x199 36 32 x71 954831406))))
(assert (x396 x333))
(assert (= (=> (and (and (= (not (= x194 0)) x132) (= (x191 128) x36) (= (x191 160) x418)) (and (and (not (= 503383097 x25)) (= x17 x62) x76 (= x384 x257) (= 5000 x403) (= 5000 x180) (= x25 519173431) (< 0 x167) (< x25 743225245) (= x62 x319) (not (= 500647658 x25)) (> 954831406 x25) (= (not x319) x76) (< x25 2127478272) (= x257 x36) (> 596258137 x25) (= x167 (x303 x246)) (= x17 (not (= 0 x418))) (not (> 500647658 x25))) (and (= x323 x24) (= x178 790236105) (= x158 5000) (= (not (= x308 1062488491900878629424266116482631147622884293147)) x53) (>= x291 0) (= x291 x305) (= x86 x24) (= x20 x295) (= x310 x55) (= x124 (mod (* 26959946667150639794667015087019630673637144422540572481103610249216 x178) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 822145385 x178) (>= 1461501637330902918203684832716283019655932542975 x216) (= x335 x39) (not (< x178 500647658)) (> x75 0) (= (x192 1461501637330902918203684832716283019655932542975 x229) x308) (< x178 2127478272) (= x295 x39) (= x21 (x199 36 32 x71 (x91 x124 224))) (= x271 x305) (= x146 x98) (= x323 x68) (not (> 743225245 x178)) (<= x291 1461501637330902918203684832716283019655932542975) (= x80 0) (= (x303 x246) x75) (not (= 770885568 x178)) (<= 0 x216) (= x80 x358) (not (= x178 743225245)) (<= 0 x55) (< x178 954831406) (<= x55 1461501637330902918203684832716283019655932542975) (= (> 5000 x384) x42) x42))) (and (=> (and x53 (and (= x345 (= x21 x213)) (= x395 110688705405039355050572217931781119515373813223972846963051619115990310191104) (= x213 (x199 36 32 x71 4105672269)))) (and (=> (and (and (= 264 x239) (= (ite x345 1 0) x83)) x345) x348) (=> (and (not x345) (and (= (= x21 x143) x274) (= 21304723245256853039595661774342629002073543191790936201937503064778531143680 x262) (= (x199 36 32 x71 790236105) x143))) (and (=> (and (and (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 x92) (= (x199 36 32 x71 3943638230) x58) (= x270 (= x58 x21))) (not x274)) (and (=> (and (and (or (and (and (and (= (x199 36 32 x71 1356689113) x63) (= (= x63 x21) x293) (= x207 36576266130383907740409294828766280552204369950469466485900666250106563985408)) (or (and (and (= x304 536) (= 0 x267) (= x220 0)) (not x293)) (and x293 (and (= (ite x293 1 0) x267) (= 536 x304))))) (not x352)) (and (and (= x267 (ite x352 1 0)) (= x304 468)) x352)) (and (= (= x21 x369) x352) (= x377 25742203781880459408941457317362166305709681742799472914177068605934923677696) (= (x199 36 32 x71 954831406) x369))) (not x270)) x84) (=> (and x270 (and (= x375 (ite x270 1 0)) (= 400 x284))) x315))) (=> (and x274 (and (= 332 x284) (= x375 (ite x274 1 0)))) x315))))) (=> (and (and (= x13 (ite x53 1 0)) (= x282 196)) (not x53)) x23))) x339))
(assert (x396 x131))
(assert (not (= 3890975986 (x199 36 32 x71 4105672269))))
(assert (= (and x292 x214) x89))
(assert (x396 x25))
(assert (=> (<= x95 10000) (not (= (x199 36 32 x71 (x91 x124 224)) x95))))
(assert (x396 x92))
(assert (not (= (x199 36 32 x71 3943638230) 743225245)))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3890975986)))
(assert (x396 x289))
(assert (x396 x211))
(assert (x396 x413))
(assert (=> (<= x246 10000) (not (= x246 (x199 36 32 x71 1356689113)))))
(assert (=> (>= 10000 x71) (not (= (x199 36 32 x71 (x91 x124 224)) x71))))
(assert (not (= (x199 36 32 x71 790236105) 1356689113)))
(assert (x396 x279))
(assert (not (= (x199 36 32 x71 3943638230) 1862597803)))
(assert (= (or x280 x393) x318))
(assert (not (= (x199 36 32 x71 790236105) 1862597803)))
(assert (x396 x282))
(assert (x396 x65))
(assert (not (= (x199 36 32 x71 4105672269) 770885568)))
(assert (not (= 3871629458 (x199 36 32 x71 3943638230))))
(assert (= (or x197 x2) x389))
(assert (not (= (x199 36 32 x71 1356689113) 599290589)))
(assert (x396 x354))
(assert (not (= (x199 36 32 x71 790236105) 16)))
(assert (not (= 106320276355336348263208190817157392285036095892762275362566149969828045127680 (x199 36 32 x71 954831406))))
(assert (x396 x57))
(assert (not (= 1840041978 (x199 36 32 x71 3943638230))))
(assert (not (= 2127478272 (x199 36 32 x71 1356689113))))
(assert (x396 x179))
(assert (not (= 822145385 (x199 36 32 x71 790236105))))
(assert (x396 x363))
(assert (not (= 1439069736 (x199 36 32 x71 790236105))))
(assert (=> (<= x149 10000) (not (= x149 (x199 36 32 x71 (x91 x124 224))))))
(assert (x396 x210))
(assert (x396 x196))
(assert (=> (>= 10000 x371) (not (= (x199 36 32 x71 4105672269) x371))))
(assert (x396 x385))
(assert (not (= 4105672269 (x199 36 32 x71 1356689113))))
(assert (not (= 25742203781880459408941457317362166305709681742799472914177068605934923677696 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x90))
(assert (not (= (x199 36 32 x71 1356689113) 2039265891)))
(assert (x396 x379))
(assert (not (= (x199 36 32 x71 954831406) 910484757)))
(assert (not (= 86400 (x199 36 32 x71 1356689113))))
(assert (= x294 (=> (and (= (x19 16) x244) (= (x19 14) x332) (= (> x244 x146) x292) (not (> x20 5000)) (= (x123 (- x24 x146)) x328) (not (< x328 86400)) (= x6 (x19 15)) (< 0 x419) (not (> x98 x86)) (not (> 1 x20)) (= (x19 13) x139)) (and (=> (and (and (= x332 x114) (= 0 x37)) (not x292)) x30) (=> (and (and (or (and x9 (and (= (x123 (- x146 x6)) x106) (= (x399 (+ x139 x385)) x218) (= (div x264 x166) x385) (< 0 x166) (= (x123 (- x332 x139)) x145) (= (x123 (- x244 x6)) x166) (= x264 (mod (* x145 x106) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x218 x162))) (and (and (= x168 (mod (* x259 x201) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< 0 x322) (= (div x168 x322) x7) (= (x123 (- x146 x6)) x201) (= (x123 (- x139 x332)) x259) (= x160 x162) (= (x123 (- x244 x6)) x322) (= x160 (x123 (- x139 x7)))) (not x9))) (= x9 (> x332 x139))) x292) x251)))))
(assert (x396 x11))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 106320276355336348263208190817157392285036095892762275362566149969828045127680)))
(assert (not (= (x199 36 32 x71 954831406) 100000)))
(assert (x396 x258))
(assert (not (= (x199 36 32 x71 4105672269) 503383097)))
(assert (x396 x384))
(assert (x396 x281))
(assert (not (= 500647658 (x199 36 32 x71 3943638230))))
(assert (x396 x20))
(assert (not (= 2876725745 (x199 36 32 x71 790236105))))
(assert (x396 x16))
(assert (not (= (x199 36 32 x71 790236105) 686821956)))
(assert (not (= 1984976886 (x199 36 32 x71 3943638230))))
(assert (x396 x230))
(assert (not (= (x199 36 32 x71 4105672269) 3506505391)))
(assert (x195 x71))
(assert (x396 x310))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 826074471)))
(assert (not (= (x199 36 32 x71 954831406) 32)))
(assert (not (= 14 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 3008386744 (x199 36 32 x71 954831406))))
(assert (x396 x156))
(assert (=> (= (x199 36 32 x71 (x91 x124 224)) (x199 36 32 x71 954831406)) (= (x91 x124 224) 954831406)))
(assert (x396 x160))
(assert (not (= (x199 36 32 x71 954831406) 1816029635)))
(assert (not (= 14 (x199 36 32 x71 1356689113))))
(assert (x396 x60))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x199 36 32 x71 954831406))))
(assert (x195 x164))
(assert (x396 x109))
(assert (x396 x209))
(assert (not (= 86400 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 1356689113) 3224796394)))
(assert (x396 x358))
(assert (not (= 1862597803 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249216 (x199 36 32 x71 4105672269))))
(assert (not (= 3996650231 (x199 36 32 x71 4105672269))))
(assert (= x287 (and (not x130) x357)))
(assert (= (and x9 x89) x393))
(assert (= x214 (or x116 x287)))
(assert (x396 x148))
(assert (x396 x167))
(assert (=> (>= 10000 x164) (not (= x164 (x199 36 32 x71 3943638230)))))
(assert (not (= 826074471 (x199 36 32 x71 954831406))))
(assert (x396 x189))
(assert (x396 x49))
(assert (not (= 743225245 (x199 36 32 x71 1356689113))))
(assert (not (= 1984976886 (x199 36 32 x71 790236105))))
(assert (x396 x307))
(assert (not (= (x199 36 32 x71 954831406) 13)))
(assert (x396 x238))
(assert (=> (<= x371 10000) (not (= x371 (x199 36 32 x71 790236105)))))
(assert (=> (<= (x91 x124 224) 10000) (not (= (x91 x124 224) (x199 36 32 x71 4105672269)))))
(assert (not (= (x199 36 32 x71 790236105) 2863377861)))
(assert (x396 x273))
(assert (not (= (x199 36 32 x71 954831406) 25742203781880459408941457317362166305709681742799472914177068605934923677696)))
(assert (not (= (x199 36 32 x71 1356689113) 822145385)))
(assert (not (= 3224796394 (x199 36 32 x71 3943638230))))
(assert (x396 x82))
(assert (not (= 1062488491900878629424266116482631147622884293147 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x225))
(assert (not (= (x199 36 32 x71 954831406) 1531409238)))
(assert (not (= (x199 36 32 x71 790236105) 1840041978)))
(assert (x396 x227))
(assert (not (= (x199 36 32 x71 1356689113) (x199 36 32 x71 4105672269))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249216 (x199 36 32 x71 3943638230))))
(assert (not (= 1356689113 (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3943638230)))
(assert (not (= (x199 36 32 x71 3943638230) 770885568)))
(assert (x396 x115))
(assert (x396 x139))
(assert (x396 x420))
(assert (not (= (x199 36 32 x71 1356689113) 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (not (= 3224796394 (x199 36 32 x71 (x91 x124 224)))))
(assert (=> (<= x149 10000) (not (= (x199 36 32 x71 954831406) x149))))
(assert (not (= 2863377861 (x199 36 32 x71 4105672269))))
(assert (x396 x111))
(assert (x396 x216))
(assert (x396 x12))
(assert (x396 x119))
(assert (not (= 3002540418 (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 790236105) 826074471)))
(assert (not (= 770885568 (x199 36 32 x71 1356689113))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 70508962019145425934951811999677760319478833095128838543097651878529435959296)))
(assert (not (= (x199 36 32 x71 954831406) 2064814097)))
(assert (x396 x402))
(assert (not (= (x199 36 32 x71 954831406) 3567393941)))
(assert (= x243 (and (not x292) x214)))
(assert (x396 x323))
(assert (x396 x392))
(assert (= x356 (and x72 x293)))
(assert (x396 x222))
(assert (= x256 (=> (and (and (= (x260 160) x367) (= (x260 128) x327) (= x298 (not (= 0 x237)))) (and (= x233 x411) (= x296 x411) (= (not x233) x56) (= (not (= 0 x367)) x296))) x56)))
(assert (not (= 500647658 (x199 36 32 x71 1356689113))))
(assert (= (or x277 x66) x81))
(assert (x396 x93))
(assert (= (x373 x137) 0))
(assert (x396 x61))
(assert (x396 x153))
(assert (=> (<= (x91 x124 224) 10000) (not (= (x91 x124 224) (x199 36 32 x71 (x91 x124 224))))))
(assert (x396 x83))
(assert (x396 x129))
(assert (=> (<= (x91 x124 224) 10000) (not (= (x199 36 32 x71 790236105) (x91 x124 224)))))
(assert (not (= 596258137 (x199 36 32 x71 954831406))))
(assert (=> (<= (x91 x124 224) 10000) (not (= (x91 x124 224) (x199 36 32 x71 3943638230)))))
(assert (x396 x272))
(assert (not (= 2863377861 (x199 36 32 x71 3943638230))))
(assert (not (= 3890975986 (x199 36 32 x71 790236105))))
(assert (x396 x88))
(assert (not (= 1862597803 (x199 36 32 x71 954831406))))
(assert (not (= 822145385 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= (x199 36 32 x71 3943638230) 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (not (= 3890975986 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 1356689113) 3008386744)))
(assert (x396 x322))
(assert (not (= (x199 36 32 x71 954831406) 2876725745)))
(assert (not (= (x199 36 32 x71 1356689113) 25742203781880459408941457317362166305709681742799472914177068605934923677696)))
(assert (= x85 (or x300 x383 x224)))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 922701707)))
(assert (not (= (x199 36 32 x71 1356689113) 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (not (= (x199 36 32 x71 4105672269) 1461501637330902918203684832716283019655932542975)))
(assert (x396 x86))
(assert (x396 x311))
(assert (x396 x229))
(assert (not (= 2064814097 (x199 36 32 x71 3943638230))))
(assert (x396 x255))
(assert (x396 x308))
(assert (x396 x64))
(assert (=> (<= x366 10000) (not (= (x199 36 32 x71 954831406) x366))))
(assert (= x251 (=> (and (= 1 x37) (= x162 x114)) x30)))
(assert (= x171 (and x144 (not x53))))
(assert (x396 x125))
(assert (x396 x113))
(assert (x396 x336))
(assert (not (= (x199 36 32 x71 954831406) 3812870723)))
(assert (= (and x398 x154) x100))
(assert (x219 x229))
(assert (not (= (x199 36 32 x71 1356689113) 1816029635)))
(assert (=> (>= 10000 x366) (not (= x366 (x199 36 32 x71 1356689113)))))
(assert (not (= (x199 36 32 x71 4105672269) 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (= x126 (or x142 x85)))
(assert (not (= 1439069736 (x199 36 32 x71 1356689113))))
(assert (not (= 3249860859 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 910484757)))
(assert (x396 x118))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 1984976886)))
(assert (not (= (x199 36 32 x71 3943638230) 2127478272)))
(assert (not (= (x199 36 32 x71 1356689113) 790236105)))
(assert (not (= (x199 36 32 x71 954831406) 503383097)))
(assert (not (= 3567393941 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x242))
(assert (not (= (x199 36 32 x71 790236105) 1738207182)))
(assert (x396 x365))
(assert (not (= (x199 36 32 x71 3943638230) 3051865383)))
(assert (not (= (x199 36 32 x71 3943638230) 1439069736)))
(assert (= (or x108 x185) x144))
(assert (=> (= (x199 36 32 x71 (x91 x124 224)) (x199 36 32 x71 3943638230)) (= 3943638230 (x91 x124 224))))
(assert (x396 x314))
(assert (not (= (x199 36 32 x71 954831406) 1984976886)))
(assert (not (= (x199 36 32 x71 4105672269) 15)))
(assert (not (= 32 (x199 36 32 x71 790236105))))
(assert (not (= 770885568 (x199 36 32 x71 954831406))))
(assert (not (= 110688705405039355050572217931781119515373813223972846963051619115990310191104 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= (x199 36 32 x71 954831406) 1439069736)))
(assert (not (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x199 36 32 x71 1356689113))))
(assert (not (= 3249860859 (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 1356689113) 910484757)))
(assert (not (= 922701707 (x199 36 32 x71 790236105))))
(assert (x396 x78))
(assert (not (= 922701707 (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3996650231)))
(assert (not (= 2127478272 (x199 36 32 x71 790236105))))
(assert (x396 x152))
(assert (not (= (x199 36 32 x71 954831406) 110688705405039355050572217931781119515373813223972846963051619115990310191104)))
(assert (not (= (x199 36 32 x71 1356689113) 3812870723)))
(assert (x396 x149))
(assert (not (= 599290589 (x199 36 32 x71 (x91 x124 224)))))
(assert (= (and x100 (not x234)) x121))
(assert (x396 x98))
(assert (not (= (x199 36 32 x71 4105672269) 826074471)))
(assert (not (= 2064814097 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x332))
(assert (not (= 790236105 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 3943638230) 36576266130383907740409294828766280552204369950469466485900666250106563985408)))
(assert (not (= (x199 36 32 x71 1356689113) 2966737888)))
(assert (x396 x269))
(assert (not (= 954831406 (x199 36 32 x71 3943638230))))
(assert (x396 x342))
(assert (x396 x340))
(assert (not (= 1840041978 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x334))
(assert (x396 x390))
(assert (x396 x267))
(assert (not (= (x199 36 32 x71 3943638230) (x199 36 32 x71 1356689113))))
(assert (not (= (x199 36 32 x71 3943638230) 1531409238)))
(assert (not (= 3506505391 (x199 36 32 x71 (x91 x124 224)))))
(assert (=> (>= 10000 x246) (not (= (x199 36 32 x71 790236105) x246))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 100000)))
(assert (not (= (x199 36 32 x71 3943638230) 2039265891)))
(assert (not (= 2966737888 (x199 36 32 x71 3943638230))))
(assert (x396 x208))
(assert (not (= (x199 36 32 x71 790236105) 3567393941)))
(assert (not (= 1062488491900878629424266116482631147622884293147 (x199 36 32 x71 4105672269))))
(assert (x396 x397))
(assert (not (= (x199 36 32 x71 4105672269) 910484757)))
(assert (x396 x168))
(assert (x396 x50))
(assert (not (= 3567393941 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 790236105) 13)))
(assert (x396 x27))
(assert (x396 x40))
(assert (x396 x24))
(assert (x195 x366))
(assert (x396 x288))
(assert (= (and x120 x290) x277))
(assert (x396 x355))
(assert (x396 x374))
(assert (x396 x35))
(assert (not (= (x199 36 32 x71 954831406) 954831406)))
(assert (x231 x229))
(assert (not (= 2966737888 (x199 36 32 x71 954831406))))
(assert (x396 x263))
(assert (not (= 2863377861 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 500647658 (x199 36 32 x71 954831406))))
(assert (x396 x320))
(assert (not (= 15 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 790236105) 599290589)))
(assert (x396 x362))
(assert (=> (= (x199 36 32 x71 790236105) (x199 36 32 x71 (x91 x124 224))) (= 790236105 (x91 x124 224))))
(assert (not (= (x199 36 32 x71 954831406) 3996650231)))
(assert (not (= (x199 36 32 x71 1356689113) 1862597803)))
(assert (x396 x215))
(assert (not (= (x199 36 32 x71 4105672269) 3051865383)))
(assert (not (= 3506505391 (x199 36 32 x71 3943638230))))
(assert (=> (<= x71 10000) (not (= (x199 36 32 x71 954831406) x71))))
(assert (x396 x218))
(assert (not (= (x199 36 32 x71 1356689113) 13)))
(assert (not (= (x199 36 32 x71 790236105) 3224796394)))
(assert (not (= (x199 36 32 x71 790236105) 3812870723)))
(assert (x396 x127))
(assert (x396 x166))
(assert (not (= 3943638230 (x199 36 32 x71 954831406))))
(assert (x396 x106))
(assert (not (= (x199 36 32 x71 954831406) 822145385)))
(assert (x396 x417))
(assert (not (= (x199 36 32 x71 4105672269) 954831406)))
(assert (not (= (x199 36 32 x71 3943638230) 21304723245256853039595661774342629002073543191790936201937503064778531143680)))
(assert (= (and x101 x270) x383))
(assert (not (= 826074471 (x199 36 32 x71 3943638230))))
(assert (=> (>= 10000 x95) (not (= (x199 36 32 x71 1356689113) x95))))
(assert (x396 x309))
(assert (x396 x375))
(assert (not (= (x199 36 32 x71 4105672269) 3871629458)))
(assert (= (=> (and (= 1 x237) (= x40 x125)) x256) x77))
(assert (=> (= (x199 36 32 x71 (x91 x124 224)) (x199 36 32 x71 4105672269)) (= (x91 x124 224) 4105672269)))
(assert (x396 x174))
(assert (= (and (not x293) x72) x254))
(assert (x396 x47))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3051865383)))
(assert (=> (>= 10000 x371) (not (= (x199 36 32 x71 3943638230) x371))))
(assert (not (= (x199 36 32 x71 790236105) (x199 36 32 x71 3943638230))))
(assert (= x66 (and x290 (not x120))))
(assert (x396 x247))
(assert (x396 x13))
(assert (=> (>= 10000 x149) (not (= x149 (x199 36 32 x71 4105672269)))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3002540418)))
(assert (= x321 (=> (and (= x194 1) (= x67 x203)) x339)))
(assert (not (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x199 36 32 x71 (x91 x124 224)))))
(assert (not (= 36576266130383907740409294828766280552204369950469466485900666250106563985408 (x199 36 32 x71 954831406))))
(assert (not (= 1862597803 (x199 36 32 x71 4105672269))))
(assert (not (= (x199 36 32 x71 790236105) 500647658)))
(assert (x396 x250))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249216 (x199 36 32 x71 790236105))))
(assert (not (= 3249860859 (x199 36 32 x71 1356689113))))
(assert (=> (<= (x91 x124 224) 10000) (not (= (x199 36 32 x71 954831406) (x91 x124 224)))))
(assert (not (= 2580288415 (x199 36 32 x71 954831406))))
(assert (= (and x405 x198) x197))
(assert (not (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x199 36 32 x71 3943638230))))
(assert (x396 x188))
(assert (x396 x187))
(assert (x396 x44))
(assert (not (= (x199 36 32 x71 1356689113) 826074471)))
(assert (x396 x257))
(assert (x396 x406))
(assert (x396 x28))
(assert (not (= (x199 36 32 x71 3943638230) 1062488491900878629424266116482631147622884293147)))
(assert (x396 x212))
(assert (not (= (x199 36 32 x71 790236105) 3008386744)))
(assert (x396 x36))
(assert (x396 x240))
(assert (not (= 596258137 (x199 36 32 x71 790236105))))
(assert (= (and (not x154) x398) x185))
(assert (not (= (x199 36 32 x71 4105672269) 3002540418)))
(assert (not (= (x199 36 32 x71 1356689113) 596258137)))
(assert (not (= (x199 36 32 x71 790236105) 21304723245256853039595661774342629002073543191790936201937503064778531143680)))
(assert (not (= (x199 36 32 x71 790236105) (x199 36 32 x71 1356689113))))
(assert (x396 x15))
(assert (x396 x103))
(assert (not (= (x199 36 32 x71 4105672269) 686821956)))
(assert (not (= (x199 36 32 x71 790236105) 1816029635)))
(assert (not (= (x199 36 32 x71 3943638230) 2580288415)))
(assert (x396 x5))
(assert (not (= 1356689113 (x199 36 32 x71 1356689113))))
(assert (x396 x31))
(assert (x396 x52))
(assert (not (= 2966737888 (x199 36 32 x71 4105672269))))
(assert (x396 x18))
(assert (x396 x346))
(assert (not (= 922701707 (x199 36 32 x71 1356689113))))
(assert (x396 x159))
(assert (= x183 (and x144 x53)))
(assert (x396 x220))
(assert (x396 x110))
(assert (x396 x194))
(assert (not (= (x199 36 32 x71 790236105) (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 1356689113) 1738207182)))
(assert (= x290 (and x33 x389)))
(assert (not (= 954831406 (x199 36 32 x71 1356689113))))
(assert (x396 x416))
(assert (not (= (x199 36 32 x71 790236105) 910484757)))
(assert (=> (>= 10000 x71) (not (= x71 (x199 36 32 x71 3943638230)))))
(assert (= x300 (or x141 x254 x356)))
(assert (not (= 32 (x199 36 32 x71 1356689113))))
(assert (not (= 25742203781880459408941457317362166305709681742799472914177068605934923677696 (x199 36 32 x71 3943638230))))
(assert (x396 x165))
(assert (x396 x203))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3249860859)))
(assert (not (= (x199 36 32 x71 790236105) 36576266130383907740409294828766280552204369950469466485900666250106563985408)))
(assert (not (= 100000 (x199 36 32 x71 1356689113))))
(assert (not (= (x199 36 32 x71 790236105) 15)))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249216 (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 4105672269) (x199 36 32 x71 3943638230))))
(assert (not (= 1840041978 (x199 36 32 x71 1356689113))))
(assert (not (= 3366849169 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 3943638230) 14)))
(assert (not (= (x199 36 32 x71 4105672269) 3943638230)))
(assert (x396 x408))
(assert (not (= 1062488491900878629424266116482631147622884293147 (x199 36 32 x71 954831406))))
(assert (not (= (x199 36 32 x71 4105672269) (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 954831406) 3366849169)))
(assert (not (= (x199 36 32 x71 4105672269) 4105672269)))
(assert (not (= (x199 36 32 x71 4105672269) 100000)))
(assert (not (= (x199 36 32 x71 3943638230) (x199 36 32 x71 954831406))))
(assert (x396 x353))
(assert (x396 x249))
(assert (x396 x341))
(assert (not (= (x199 36 32 x71 3943638230) 2876725745)))
(assert (x396 x275))
(assert (not (= 3996650231 (x199 36 32 x71 790236105))))
(assert (x396 x236))
(assert (not (= (x199 36 32 x71 3943638230) 922701707)))
(assert (x396 x176))
(assert (x396 x246))
(assert (not (= 596258137 (x199 36 32 x71 3943638230))))
(assert (x396 x95))
(assert (x396 x164))
(assert (= x331 (and x100 x234)))
(assert (x396 x305))
(assert (x396 x368))
(assert (x396 x388))
(assert (not (= 1871194811 (x199 36 32 x71 (x91 x124 224)))))
(assert (= (=> (and (= x83 x375) (= x284 x239)) x348) x315))
(assert (x396 x184))
(assert (not (= 2064814097 (x199 36 32 x71 790236105))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 1356689113)))
(assert (not (= 1871194811 (x199 36 32 x71 1356689113))))
(assert (x396 x291))
(assert (not (= (x199 36 32 x71 790236105) 1062488491900878629424266116482631147622884293147)))
(assert (x396 x204))
(assert (not (= 3002540418 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 790236105) 2580288415)))
(assert (x396 x135))
(assert (x396 x409))
(assert (x396 x350))
(assert (not (= 2876725745 (x199 36 32 x71 4105672269))))
(assert (not (= 519173431 (x199 36 32 x71 3943638230))))
(assert (not (= 3812870723 (x199 36 32 x71 3943638230))))
(assert (= (or x391 x81) x117))
(assert (x396 x1))
(assert (not (= 25742203781880459408941457317362166305709681742799472914177068605934923677696 (x199 36 32 x71 4105672269))))
(assert (not (= 1062488491900878629424266116482631147622884293147 (x199 36 32 x71 1356689113))))
(assert (= x198 (or x318 x243)))
(assert (= (and x274 x337) x224))
(assert (not (= (x199 36 32 x71 4105672269) 743225245)))
(assert (=> (>= 10000 x246) (not (= x246 (x199 36 32 x71 (x91 x124 224))))))
(assert (= x338 (=> (and (>= 1461501637330902918203684832716283019655932542975 x165) (= (x172 16) x346) (= x165 x128) (= x69 (+ 15314092380000 x381)) (= x283 (x303 x246)) (>= x188 0) (= (x172 13) x400) (not (> 2863377861 x416)) (not (= x416 3008386744)) (>= 1461501637330902918203684832716283019655932542975 x31) (= (x172 15) x155) x364 (= x59 x50) (<= 0 x252) (not (< 2 x286)) (= x320 x215) (= (x172 14) x61) (>= 1461501637330902918203684832716283019655932542975 x410) (<= x188 1461501637330902918203684832716283019655932542975) (= x146 x381) (not (< x416 3008386744)) (= x48 x51) (= (< x51 x346) x33) (not (> 2580288415 x416)) (= x416 3051865383) (<= 0 x31) (= (< x69 x48) x364) (not (> 2127478272 x416)) (= x188 x50) (= x410 x128) (<= x252 1461501637330902918203684832716283019655932542975) (<= 0 x165) (= x31 x232) (= x147 15314092380000) (= x320 0) (> 3224796394 x416) (<= 0 x410) (< 0 x283)) (and (=> (and (not x33) (and (= x125 x61) (= x237 0))) x256) (=> (and (and (= (> x61 x400) x120) (or (and (and (= (x123 (- x346 x155)) x27) (= x402 (x123 (- x51 x155))) (= (x123 (- x400 x61)) x314) (> x27 0) (= (mod (* x402 x314) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x217) (= (x123 (- x400 x388)) x60) (= x60 x40) (= x388 (div x217 x27))) (not x120)) (and (and (= x212 (x399 (+ x263 x400))) (= x355 (mod (* x307 x181) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< 0 x397) (= x212 x40) (= (x123 (- x61 x400)) x181) (= x263 (div x355 x397)) (= (x123 (- x346 x155)) x397) (= x307 (x123 (- x51 x155)))) x120))) x33) x77)))))
(assert (not (= (x199 36 32 x71 3943638230) 1816029635)))
(assert (x396 x325))
(assert (not (= 77196514420459877940035116867124998943289115686762304616657918434777787006976 (x199 36 32 x71 954831406))))
(assert (not (= 3943638230 (x199 36 32 x71 790236105))))
(assert (= x398 true))
(assert (= (and x130 x357) x116))
(assert (not (= 70508962019145425934951811999677760319478833095128838543097651878529435959296 (x199 36 32 x71 3943638230))))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 3871629458)))
(assert (x396 x312))
(assert (not (= 822145385 (x199 36 32 x71 4105672269))))
(assert (x396 x59))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 36)))
(assert (x396 x193))
(assert (x396 x235))
(assert (= x391 (and x389 (not x33))))
(assert (x396 x146))
(assert (x396 x145))
(assert (x396 x304))
(assert (x396 x380))
(assert (not (= (x199 36 32 x71 (x91 x124 224)) 1439069736)))
(assert (not (= 2127478272 (x199 36 32 x71 954831406))))
(assert (x195 x95))
(assert (x396 x382))
(assert (not (= (x199 36 32 x71 954831406) 686821956)))
(assert (not (= 15314092380000 (x199 36 32 x71 1356689113))))
(assert (not (= 3890975986 (x199 36 32 x71 1356689113))))
(assert (not (= (x199 36 32 x71 1356689113) 3943638230)))
(assert (not (= 790236105 (x199 36 32 x71 (x91 x124 224)))))
(assert (x396 x71))
(assert (x396 x128))
(assert (not (= (x199 36 32 x71 4105672269) 13)))
(assert (x396 x295))
(assert (not (= (x199 36 32 x71 954831406) 4105672269)))
(assert (x396 x414))
(check-sat)
(exit)