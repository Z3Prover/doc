(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x677 () Bool)
(declare-fun x318 () Int)
(declare-fun x730 () Int)
(declare-fun x229 () Bool)
(declare-fun x158 () Bool)
(declare-fun x153 () Int)
(declare-fun x202 () Bool)
(declare-fun x701 () Int)
(declare-fun x488 () Int)
(declare-fun x164 () Bool)
(declare-fun x546 () Int)
(declare-fun x391 () Bool)
(declare-fun x46 () Int)
(declare-fun x563 (Int) Int)
(declare-fun x632 () Bool)
(declare-fun x990 () Bool)
(declare-fun x508 () Int)
(declare-fun x36 () Bool)
(declare-fun x831 () Int)
(declare-fun x43 () Bool)
(declare-fun x78 () Int)
(declare-fun x810 () Int)
(declare-fun x195 () Int)
(declare-fun x297 () Bool)
(declare-fun x969 () Bool)
(declare-fun x209 () Bool)
(declare-fun x928 () Int)
(declare-fun x557 () Bool)
(declare-fun x706 () Bool)
(declare-fun x755 () Bool)
(declare-fun x578 () Int)
(declare-fun x682 () Bool)
(declare-fun x524 () Bool)
(declare-fun x588 () Int)
(declare-fun x481 () Bool)
(declare-fun x109 () Bool)
(declare-fun x571 () Int)
(declare-fun x882 () Int)
(declare-fun x192 () Bool)
(declare-fun x180 () Int)
(declare-fun x932 () Int)
(declare-fun x953 () Int)
(declare-fun x615 () Int)
(declare-fun x346 () Bool)
(declare-fun x633 () Int)
(declare-fun x213 () Bool)
(declare-fun x64 () Bool)
(declare-fun x186 () Int)
(declare-fun x977 () Int)
(declare-fun x408 () Int)
(declare-fun x870 () Int)
(declare-fun x983 () Int)
(declare-fun x244 () Int)
(declare-fun x168 () Int)
(declare-fun x984 () Bool)
(declare-fun x640 () Int)
(declare-fun x364 () Bool)
(declare-fun x4 () Int)
(declare-fun x654 () Bool)
(declare-fun x343 () Int)
(declare-fun x848 () Bool)
(declare-fun x782 () Int)
(declare-fun x855 () Bool)
(declare-fun x850 () Int)
(declare-fun x844 () Int)
(declare-fun x892 () Bool)
(declare-fun x639 () Int)
(declare-fun x89 () Bool)
(declare-fun x1015 () Bool)
(declare-fun x788 () Int)
(declare-fun x407 () Int)
(declare-fun x204 () Int)
(declare-fun x1007 () Bool)
(declare-fun x514 () Bool)
(declare-fun x187 () Int)
(declare-fun x760 () Int)
(declare-fun x780 () Bool)
(declare-fun x189 () Int)
(declare-fun x338 () Bool)
(declare-fun x824 () Bool)
(declare-fun x427 () Int)
(declare-fun x963 () Int)
(declare-fun x739 () Bool)
(declare-fun x966 () Bool)
(declare-fun x965 (Int) Int)
(declare-fun x556 () Bool)
(declare-fun x786 () Int)
(declare-fun x621 () Int)
(declare-fun x751 () Bool)
(declare-fun x884 () Bool)
(declare-fun x19 () Bool)
(declare-fun x520 () Int)
(declare-fun x523 () Bool)
(declare-fun x263 () Int)
(declare-fun x350 () Int)
(declare-fun x744 () Bool)
(declare-fun x16 () Bool)
(declare-fun x890 () Bool)
(declare-fun x527 () Int)
(declare-fun x221 () Int)
(declare-fun x1013 () Int)
(declare-fun x125 () Int)
(declare-fun x519 () Int)
(declare-fun x59 () Bool)
(declare-fun x512 () Bool)
(declare-fun x295 () Bool)
(declare-fun x96 () Bool)
(declare-fun x303 () Bool)
(declare-fun x552 () Int)
(declare-fun x549 () Int)
(declare-fun x167 () Int)
(declare-fun x210 () Int)
(declare-fun x56 () Int)
(declare-fun x81 () Bool)
(declare-fun x218 () Bool)
(declare-fun x948 () Int)
(declare-fun x893 () Bool)
(declare-fun x539 () Bool)
(declare-fun x233 () Bool)
(declare-fun x314 () Int)
(declare-fun x881 () Bool)
(declare-fun x65 () Int)
(declare-fun x267 () Bool)
(declare-fun x864 () Int)
(declare-fun x251 () Bool)
(declare-fun x940 () Int)
(declare-fun x51 () Bool)
(declare-fun x551 () Int)
(declare-fun x759 () Bool)
(declare-fun x999 () Int)
(declare-fun x447 () Int)
(declare-fun x646 () Int)
(declare-fun x14 () Int)
(declare-fun x697 () Int)
(declare-fun x325 () Int)
(declare-fun x503 () Int)
(declare-fun x58 () Bool)
(declare-fun x573 () Int)
(declare-fun x265 () Int)
(declare-fun x731 () Int)
(declare-fun x414 () Bool)
(declare-fun x398 () Int)
(declare-fun x805 () Bool)
(declare-fun x537 () Int)
(declare-fun x847 () Int)
(declare-fun x110 () Bool)
(declare-fun x887 () Bool)
(declare-fun x451 () Bool)
(declare-fun x197 () Int)
(declare-fun x228 () Int)
(declare-fun x289 () Int)
(declare-fun x918 () Bool)
(declare-fun x740 () Bool)
(declare-fun x896 () Bool)
(declare-fun x694 () Bool)
(declare-fun x357 () Int)
(declare-fun x486 () Bool)
(declare-fun x412 (Int) Int)
(declare-fun x638 () Bool)
(declare-fun x979 () Bool)
(declare-fun x449 () Int)
(declare-fun x155 () Int)
(declare-fun x897 () Int)
(declare-fun x423 () Int)
(declare-fun x264 () Int)
(declare-fun x479 () Bool)
(declare-fun x134 () Int)
(declare-fun x401 () Bool)
(declare-fun x767 () Bool)
(declare-fun x104 () Int)
(declare-fun x127 () Int)
(declare-fun x696 () Int)
(declare-fun x705 () Bool)
(declare-fun x1010 () Int)
(declare-fun x866 () Int)
(declare-fun x105 () Int)
(declare-fun x608 () Int)
(declare-fun x562 () Bool)
(declare-fun x413 () Bool)
(declare-fun x931 () Bool)
(declare-fun x1 () Int)
(declare-fun x281 () Bool)
(declare-fun x498 () Int)
(declare-fun x294 () Int)
(declare-fun x574 () Bool)
(declare-fun x794 () Bool)
(declare-fun x811 () Bool)
(declare-fun x69 () Int)
(declare-fun x288 () Int)
(declare-fun x856 () Bool)
(declare-fun x237 () Bool)
(declare-fun x829 () Bool)
(declare-fun x937 () Int)
(declare-fun x605 () Int)
(declare-fun x868 () Bool)
(declare-fun x9 () Int)
(declare-fun x842 () Int)
(declare-fun x704 () Bool)
(declare-fun x980 () Int)
(declare-fun x715 () Bool)
(declare-fun x756 (Int) Int)
(declare-fun x63 () Bool)
(declare-fun x462 () Bool)
(declare-fun x293 () Bool)
(declare-fun x548 () Bool)
(declare-fun x854 () Int)
(declare-fun x111 () Int)
(declare-fun x698 () Int)
(declare-fun x762 () Int)
(declare-fun x501 () Bool)
(declare-fun x279 () Int)
(declare-fun x587 () Bool)
(declare-fun x115 () Bool)
(declare-fun x941 () Bool)
(declare-fun x478 () Int)
(declare-fun x536 () Int)
(declare-fun x714 () Int)
(declare-fun x676 () Bool)
(declare-fun x433 () Bool)
(declare-fun x313 () Int)
(declare-fun x18 () Int)
(declare-fun x397 () Int)
(declare-fun x569 () Int)
(declare-fun x816 () Int)
(declare-fun x982 () Int)
(declare-fun x5 () Bool)
(declare-fun x50 () Bool)
(declare-fun x840 () Bool)
(declare-fun x454 () Int)
(declare-fun x393 () Bool)
(declare-fun x994 () Bool)
(declare-fun x332 () Bool)
(declare-fun x475 () Int)
(declare-fun x327 () Bool)
(declare-fun x178 () Bool)
(declare-fun x400 () Bool)
(declare-fun x404 () Bool)
(declare-fun x222 () Int)
(declare-fun x445 (Int Int) Int)
(declare-fun x580 () Int)
(declare-fun x878 () Bool)
(declare-fun x490 () Bool)
(declare-fun x420 () Bool)
(declare-fun x181 () Bool)
(declare-fun x174 () Bool)
(declare-fun x1008 () Int)
(declare-fun x783 () Int)
(declare-fun x678 () Int)
(declare-fun x85 (Int) Int)
(declare-fun x494 () Int)
(declare-fun x215 () Int)
(declare-fun x190 () Int)
(declare-fun x7 () Bool)
(declare-fun x283 () Bool)
(declare-fun x875 () Int)
(declare-fun x450 () Int)
(declare-fun x820 () Bool)
(declare-fun x872 () Int)
(declare-fun x136 () Int)
(declare-fun x73 () Bool)
(declare-fun x773 () Bool)
(declare-fun x768 () Int)
(declare-fun x1002 () Int)
(declare-fun x1004 () Bool)
(declare-fun x900 () Int)
(declare-fun x950 () Int)
(declare-fun x635 () Int)
(declare-fun x299 () Bool)
(declare-fun x873 () Bool)
(declare-fun x359 () Bool)
(declare-fun x57 () Bool)
(declare-fun x955 () Int)
(declare-fun x100 () Int)
(declare-fun x2 () Bool)
(declare-fun x926 () Bool)
(declare-fun x594 () Int)
(declare-fun x681 (Int) Int)
(declare-fun x628 () Bool)
(declare-fun x951 () Bool)
(declare-fun x933 () Bool)
(declare-fun x37 () Int)
(declare-fun x198 () Int)
(declare-fun x1009 () Bool)
(declare-fun x126 () Int)
(declare-fun x575 () Int)
(declare-fun x323 () Int)
(declare-fun x86 () Bool)
(declare-fun x467 () Bool)
(declare-fun x902 () Int)
(declare-fun x216 () Int)
(declare-fun x934 () Int)
(declare-fun x910 () Int)
(declare-fun x722 () Bool)
(declare-fun x131 () Int)
(declare-fun x590 () Bool)
(declare-fun x566 () Bool)
(declare-fun x206 (Int) Int)
(declare-fun x938 () Bool)
(declare-fun x140 () Bool)
(declare-fun x384 (Int) Int)
(declare-fun x679 () Bool)
(declare-fun x324 () Int)
(declare-fun x227 () Bool)
(declare-fun x395 () Bool)
(declare-fun x769 () Int)
(declare-fun x567 () Int)
(declare-fun x944 () Bool)
(declare-fun x322 () Bool)
(declare-fun x853 () Bool)
(declare-fun x886 () Bool)
(declare-fun x602 () Int)
(declare-fun x559 () Bool)
(declare-fun x598 () Int)
(declare-fun x430 () Int)
(declare-fun x499 () Int)
(declare-fun x613 () Bool)
(declare-fun x339 () Bool)
(declare-fun x241 () Int)
(declare-fun x826 () Bool)
(declare-fun x333 () Bool)
(declare-fun x778 () Bool)
(declare-fun x435 () Bool)
(declare-fun x753 () Bool)
(declare-fun x947 () Int)
(declare-fun x852 () Int)
(declare-fun x817 () Bool)
(declare-fun x33 () Int)
(declare-fun x326 () Int)
(declare-fun x452 () Int)
(declare-fun x956 () Int)
(declare-fun x949 () Int)
(declare-fun x871 () Int)
(declare-fun x630 () Int)
(declare-fun x845 () Bool)
(declare-fun x379 () Bool)
(declare-fun x252 () Bool)
(declare-fun x194 () Int)
(declare-fun x232 () Bool)
(declare-fun x470 () Bool)
(declare-fun x1005 () Int)
(declare-fun x372 () Int)
(declare-fun x795 () Int)
(declare-fun x555 () Bool)
(declare-fun x962 () Bool)
(declare-fun x272 () Bool)
(declare-fun x880 () Int)
(declare-fun x183 () Int)
(declare-fun x396 () Int)
(declare-fun x3 (Int) Int)
(declare-fun x592 () Bool)
(declare-fun x735 () Int)
(declare-fun x468 () Int)
(declare-fun x214 () Bool)
(declare-fun x858 () Bool)
(declare-fun x61 () Int)
(declare-fun x200 () Int)
(declare-fun x143 () Bool)
(declare-fun x726 () Int)
(declare-fun x161 () Bool)
(declare-fun x708 () Bool)
(declare-fun x644 () Bool)
(declare-fun x725 () Bool)
(declare-fun x610 () Int)
(declare-fun x223 () Bool)
(declare-fun x484 () Int)
(declare-fun x394 () Int)
(declare-fun x392 () Int)
(declare-fun x686 () Int)
(declare-fun x182 () Bool)
(declare-fun x135 () Int)
(declare-fun x802 () Bool)
(declare-fun x335 () Bool)
(declare-fun x604 () Int)
(declare-fun x54 () Int)
(declare-fun x830 () Bool)
(declare-fun x506 () Bool)
(declare-fun x521 () Bool)
(declare-fun x943 () Int)
(declare-fun x471 () Int)
(declare-fun x1001 () Bool)
(declare-fun x576 () Int)
(declare-fun x601 () Bool)
(declare-fun x94 () Int)
(declare-fun x48 () Bool)
(declare-fun x642 () Bool)
(declare-fun x330 () Int)
(declare-fun x27 () Bool)
(declare-fun x1014 () Int)
(declare-fun x419 () Bool)
(declare-fun x952 () Bool)
(declare-fun x542 () Bool)
(declare-fun x777 () Bool)
(declare-fun x781 () Int)
(declare-fun x839 () Int)
(declare-fun x383 () Bool)
(declare-fun x331 () Bool)
(declare-fun x415 () Bool)
(declare-fun x70 () Bool)
(declare-fun x581 () Bool)
(declare-fun x713 () Int)
(declare-fun x30 () Bool)
(declare-fun x792 () Int)
(declare-fun x371 () Bool)
(declare-fun x418 () Int)
(declare-fun x225 () Bool)
(declare-fun x793 () Int)
(declare-fun x240 () Bool)
(declare-fun x410 () Int)
(declare-fun x707 () Bool)
(declare-fun x79 () Bool)
(declare-fun x253 () Int)
(declare-fun x595 () Bool)
(declare-fun x341 () Int)
(declare-fun x382 () Bool)
(declare-fun x463 () Bool)
(declare-fun x417 () Bool)
(declare-fun x859 () Bool)
(declare-fun x20 () Int)
(declare-fun x147 () Bool)
(declare-fun x609 () Bool)
(declare-fun x898 () Bool)
(declare-fun x625 () Bool)
(declare-fun x457 () Int)
(declare-fun x148 () Bool)
(declare-fun x836 () Bool)
(declare-fun x480 (Int) Int)
(declare-fun x750 () Bool)
(declare-fun x389 () Bool)
(declare-fun x261 () Bool)
(declare-fun x184 () Int)
(declare-fun x538 () Bool)
(declare-fun x967 () Bool)
(declare-fun x321 () Int)
(declare-fun x502 () Bool)
(declare-fun x925 () Int)
(declare-fun x895 () Bool)
(declare-fun x361 () Int)
(declare-fun x709 () Bool)
(declare-fun x370 (Int) Int)
(declare-fun x748 () Int)
(declare-fun x45 () Int)
(declare-fun x380 () Bool)
(declare-fun x582 () Int)
(declare-fun x365 () Bool)
(declare-fun x82 () Bool)
(declare-fun x525 () Bool)
(declare-fun x992 () Int)
(declare-fun x220 () Bool)
(declare-fun x591 (Int) Int)
(declare-fun x377 () Bool)
(declare-fun x946 () Int)
(declare-fun x879 () Int)
(declare-fun x774 (Int) Int)
(declare-fun x807 () Int)
(declare-fun x614 () Int)
(declare-fun x22 () Int)
(declare-fun x862 () Int)
(declare-fun x867 () Int)
(declare-fun x500 () Bool)
(declare-fun x914 () Int)
(declare-fun x284 () Int)
(declare-fun x165 () Bool)
(declare-fun x256 () Bool)
(declare-fun x911 () Int)
(declare-fun x239 () Int)
(declare-fun x196 () Int)
(declare-fun x92 () Bool)
(declare-fun x260 () Bool)
(declare-fun x342 () Int)
(declare-fun x634 () Int)
(declare-fun x175 () Int)
(declare-fun x129 () Int)
(declare-fun x137 () Bool)
(declare-fun x736 () Int)
(declare-fun x157 (Int) Int)
(declare-fun x312 () Int)
(declare-fun x119 () Int)
(declare-fun x801 () Int)
(declare-fun x570 () Int)
(declare-fun x616 () Bool)
(declare-fun x381 () Int)
(declare-fun x426 () Bool)
(declare-fun x600 () Bool)
(declare-fun x596 () Int)
(declare-fun x568 () Int)
(declare-fun x665 () Bool)
(declare-fun x367 () Int)
(declare-fun x128 () Bool)
(declare-fun x87 () Bool)
(declare-fun x493 () Bool)
(declare-fun x72 () Int)
(declare-fun x808 () Int)
(declare-fun x319 () Int)
(declare-fun x102 () Int)
(declare-fun x743 () Int)
(declare-fun x599 () Bool)
(declare-fun x688 () Int)
(declare-fun x305 () Bool)
(declare-fun x444 () Int)
(declare-fun x550 () Int)
(declare-fun x916 () Bool)
(declare-fun x304 () Int)
(declare-fun x849 () Bool)
(declare-fun x17 () Bool)
(declare-fun x560 () Int)
(declare-fun x399 () Bool)
(declare-fun x170 () Int)
(declare-fun x818 () Bool)
(declare-fun x373 () Int)
(declare-fun x422 () Bool)
(declare-fun x674 () Int)
(declare-fun x806 () Int)
(declare-fun x543 () Bool)
(declare-fun x439 () Bool)
(declare-fun x799 () Bool)
(declare-fun x861 () Bool)
(declare-fun x666 () Int)
(declare-fun x841 () Int)
(declare-fun x103 () Int)
(declare-fun x612 () Bool)
(declare-fun x456 () Int)
(declare-fun x302 () Int)
(declare-fun x363 () Int)
(declare-fun x6 () Int)
(declare-fun x909 () Bool)
(declare-fun x177 () Int)
(declare-fun x711 () Bool)
(declare-fun x611 () Int)
(declare-fun x558 () Int)
(declare-fun x832 () Int)
(declare-fun x775 () Int)
(declare-fun x620 () Int)
(declare-fun x978 () Bool)
(declare-fun x798 () Int)
(declare-fun x465 () Int)
(declare-fun x431 () Bool)
(declare-fun x257 () Bool)
(declare-fun x29 () Bool)
(declare-fun x651 () Int)
(declare-fun x101 () Int)
(declare-fun x974 () Bool)
(declare-fun x998 () Int)
(declare-fun x483 () Int)
(declare-fun x226 () Int)
(declare-fun x477 () Bool)
(declare-fun x162 () Bool)
(declare-fun x825 () Bool)
(declare-fun x390 () Int)
(declare-fun x217 () Bool)
(declare-fun x913 () Bool)
(declare-fun x352 () Int)
(declare-fun x723 () Int)
(declare-fun x649 () Int)
(declare-fun x443 () Int)
(declare-fun x927 () Int)
(declare-fun x21 () Bool)
(declare-fun x453 () Int)
(declare-fun x834 () Int)
(declare-fun x683 () Int)
(declare-fun x219 () Int)
(declare-fun x348 () Bool)
(declare-fun x301 () Bool)
(declare-fun x899 () Bool)
(declare-fun x689 () Int)
(declare-fun x737 () Int)
(declare-fun x156 () Bool)
(declare-fun x286 () Bool)
(declare-fun x374 () Int)
(declare-fun x287 () Int)
(declare-fun x904 () Int)
(declare-fun x758 () Bool)
(declare-fun x995 () Bool)
(declare-fun x772 () Int)
(declare-fun x515 () Bool)
(declare-fun x923 () Bool)
(declare-fun x476 () Int)
(declare-fun x987 () Bool)
(declare-fun x797 () Int)
(declare-fun x796 () Bool)
(declare-fun x637 () Bool)
(declare-fun x497 () Bool)
(declare-fun x675 () Bool)
(declare-fun x659 () Int)
(declare-fun x784 () Bool)
(declare-fun x804 () Bool)
(declare-fun x191 () Int)
(declare-fun x693 () Bool)
(declare-fun x49 () Int)
(declare-fun x62 () Int)
(declare-fun x41 () Bool)
(declare-fun x24 () Bool)
(declare-fun x173 () Bool)
(declare-fun x903 () Int)
(declare-fun x920 () Bool)
(declare-fun x308 () Bool)
(declare-fun x23 () Bool)
(declare-fun x572 () Bool)
(declare-fun x290 () Int)
(declare-fun x874 () Bool)
(declare-fun x860 () Int)
(declare-fun x877 () Bool)
(declare-fun x409 () Bool)
(declare-fun x800 () Bool)
(declare-fun x815 () Int)
(declare-fun x973 () Bool)
(declare-fun x211 () Int)
(declare-fun x107 () Bool)
(declare-fun x664 () Bool)
(declare-fun x766 () Bool)
(declare-fun x827 () Bool)
(declare-fun x717 () Int)
(declare-fun x436 () Int)
(declare-fun x912 () Bool)
(declare-fun x42 () Int)
(declare-fun x747 () Int)
(declare-fun x727 () Bool)
(declare-fun x765 () Int)
(declare-fun x268 () Int)
(declare-fun x259 () Bool)
(declare-fun x968 () Int)
(declare-fun x32 () Bool)
(declare-fun x921 () Bool)
(declare-fun x375 () Bool)
(declare-fun x437 () Bool)
(declare-fun x258 () Int)
(declare-fun x309 () Int)
(declare-fun x249 () Bool)
(declare-fun x141 () Int)
(declare-fun x66 () Int)
(declare-fun x273 () Int)
(declare-fun x742 () Bool)
(declare-fun x464 () Int)
(declare-fun x236 () Bool)
(declare-fun x526 () Int)
(declare-fun x329 () Bool)
(declare-fun x35 () Bool)
(declare-fun x254 () Int)
(declare-fun x403 () Bool)
(declare-fun x789 () Int)
(declare-fun x972 () Bool)
(declare-fun x292 () Bool)
(declare-fun x461 () Int)
(declare-fun x517 () Bool)
(declare-fun x648 () Int)
(declare-fun x716 () Bool)
(declare-fun x358 () Int)
(declare-fun x922 () Bool)
(declare-fun x491 () Bool)
(declare-fun x863 () Bool)
(declare-fun x960 () Int)
(declare-fun x579 () Bool)
(declare-fun x945 (Int Int) Int)
(declare-fun x351 () Int)
(declare-fun x353 (Int) Int)
(declare-fun x939 () Int)
(declare-fun x851 () Int)
(declare-fun x787 () Bool)
(declare-fun x930 () Int)
(declare-fun x695 () Bool)
(declare-fun x541 () Int)
(declare-fun x429 () Int)
(declare-fun x276 () Int)
(declare-fun x540 () Bool)
(declare-fun x246 () Int)
(declare-fun x159 () Bool)
(declare-fun x619 () Int)
(declare-fun x626 (Int) Int)
(declare-fun x828 () Bool)
(declare-fun x754 () Bool)
(declare-fun x837 () Int)
(declare-fun x91 () Int)
(declare-fun x274 () Int)
(declare-fun x961 () Int)
(declare-fun x376 () Bool)
(declare-fun x531 () Int)
(declare-fun x929 () Int)
(declare-fun x310 () Int)
(declare-fun x822 () Int)
(declare-fun x60 () Int)
(declare-fun x957 () Int)
(declare-fun x564 () Bool)
(declare-fun x733 () Int)
(declare-fun x354 () Int)
(declare-fun x687 () Int)
(declare-fun x97 () Int)
(declare-fun x432 () Bool)
(declare-fun x77 () Int)
(declare-fun x193 () Int)
(declare-fun x95 () Int)
(declare-fun x680 () Bool)
(declare-fun x718 () Int)
(declare-fun x915 () Int)
(declare-fun x997 () Int)
(declare-fun x122 () Bool)
(declare-fun x250 () Int)
(declare-fun x442 () Bool)
(declare-fun x300 () Bool)
(declare-fun x593 () Int)
(declare-fun x171 () Bool)
(declare-fun x12 () Bool)
(declare-fun x169 () Bool)
(declare-fun x876 () Bool)
(declare-fun x1017 () Bool)
(declare-fun x553 () Bool)
(declare-fun x532 () Bool)
(declare-fun x106 () Bool)
(declare-fun x298 () Bool)
(declare-fun x39 () Int)
(declare-fun x108 () Int)
(declare-fun x446 () Bool)
(declare-fun x505 () Int)
(declare-fun x513 () Int)
(declare-fun x607 () Bool)
(declare-fun x277 () Bool)
(declare-fun x238 () Int)
(declare-fun x935 () Int)
(declare-fun x460 () Int)
(declare-fun x662 () Int)
(declare-fun x823 () Bool)
(declare-fun x280 () Int)
(declare-fun x311 () Bool)
(declare-fun x589 () Bool)
(declare-fun x360 () Bool)
(declare-fun x629 () Int)
(declare-fun x1012 () Int)
(declare-fun x670 () Int)
(declare-fun x133 () Int)
(declare-fun x93 () Int)
(declare-fun x986 () Int)
(declare-fun x975 () Bool)
(declare-fun x185 () Bool)
(declare-fun x315 () Bool)
(declare-fun x67 () Bool)
(declare-fun x47 () Int)
(declare-fun x618 () Int)
(declare-fun x98 () Bool)
(declare-fun x38 () Int)
(declare-fun x337 () Bool)
(declare-fun x545 (Int) Int)
(declare-fun x989 () Bool)
(declare-fun x667 () Bool)
(declare-fun x958 () Int)
(declare-fun x657 () Int)
(declare-fun x487 () Bool)
(declare-fun x212 () Int)
(declare-fun x355 () Bool)
(declare-fun x52 () Bool)
(declare-fun x112 () Int)
(declare-fun x15 () Bool)
(declare-fun x296 () Bool)
(declare-fun x440 () Int)
(declare-fun x307 () Int)
(declare-fun x144 () Bool)
(declare-fun x31 () Int)
(declare-fun x320 (Int) Int)
(declare-fun x843 () Int)
(declare-fun x636 () Int)
(declare-fun x906 () Bool)
(declare-fun x224 () Int)
(declare-fun x316 () Bool)
(declare-fun x255 () Int)
(declare-fun x583 () Bool)
(declare-fun x345 () Int)
(declare-fun x535 () Int)
(declare-fun x71 () Bool)
(declare-fun x691 () Int)
(declare-fun x661 () Bool)
(declare-fun x672 () Int)
(declare-fun x606 () Bool)
(declare-fun x814 () Bool)
(declare-fun x684 () Bool)
(declare-fun x160 () Int)
(declare-fun x424 () Bool)
(declare-fun x1003 () Int)
(declare-fun x88 () Int)
(declare-fun x710 () Bool)
(declare-fun x729 () Int)
(declare-fun x656 () Bool)
(declare-fun x770 () Int)
(declare-fun x482 () Int)
(declare-fun x163 (Int) Int)
(declare-fun x738 () Bool)
(declare-fun x496 () Int)
(declare-fun x118 (Int Int) Int)
(declare-fun x584 () Int)
(declare-fun x1000 () Int)
(declare-fun x655 () Int)
(declare-fun x692 () Bool)
(declare-fun x534 () Int)
(declare-fun x113 () Int)
(declare-fun x123 () Int)
(declare-fun x865 () Bool)
(declare-fun x146 () Int)
(declare-fun x84 () Bool)
(declare-fun x746 () Bool)
(declare-fun x544 () Bool)
(declare-fun x406 () Bool)
(declare-fun x857 () Int)
(declare-fun x699 () Bool)
(declare-fun x150 () Int)
(declare-fun x529 () Int)
(declare-fun x988 () Int)
(declare-fun x712 () Int)
(declare-fun x964 (Int) Int)
(declare-fun x120 () Bool)
(declare-fun x388 () Bool)
(declare-fun x585 () Int)
(declare-fun x262 () Bool)
(declare-fun x528 () Bool)
(declare-fun x671 () Bool)
(declare-fun x138 () Int)
(declare-fun x25 () Int)
(declare-fun x362 () Int)
(declare-fun x993 () Bool)
(declare-fun x11 () Bool)
(declare-fun x142 () Int)
(declare-fun x510 () Int)
(declare-fun x703 () Bool)
(declare-fun x485 () Bool)
(declare-fun x791 () Int)
(declare-fun x344 () Bool)
(declare-fun x378 () Bool)
(declare-fun x776 () Int)
(declare-fun x917 () Bool)
(declare-fun x340 () Int)
(declare-fun x114 () Bool)
(declare-fun x270 () Int)
(declare-fun x702 () Int)
(declare-fun x888 () Int)
(declare-fun x473 () Bool)
(declare-fun x336 () Int)
(declare-fun x623 () Int)
(declare-fun x8 () Int)
(declare-fun x885 () Int)
(declare-fun x970 () Bool)
(declare-fun x334 () Int)
(declare-fun x317 () Int)
(declare-fun x1018 () Int)
(declare-fun x208 () Bool)
(declare-fun x728 () Bool)
(declare-fun x660 () Bool)
(declare-fun x405 () Bool)
(declare-fun x347 () Int)
(declare-fun x905 () Int)
(declare-fun x652 () Bool)
(declare-fun x421 () Int)
(declare-fun x428 () Bool)
(declare-fun x785 () Int)
(declare-fun x894 () Int)
(declare-fun x152 () Bool)
(declare-fun x803 () Bool)
(declare-fun x366 () Bool)
(declare-fun x387 () Bool)
(declare-fun x474 () Int)
(declare-fun x653 () Int)
(declare-fun x247 () Bool)
(declare-fun x425 () Bool)
(declare-fun x919 () Int)
(declare-fun x603 () Bool)
(declare-fun x901 () Int)
(declare-fun x757 () Int)
(declare-fun x647 () Bool)
(declare-fun x732 () Int)
(declare-fun x954 () Bool)
(declare-fun x734 () Int)
(declare-fun x627 () Int)
(declare-fun x74 () Bool)
(define-fun x522 ((x511 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x511) (<= 0 x511)) x511 (- x511 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x812 ((x511 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x511) (> 0 x511)) (+ x511 115792089237316195423570985008687907853269984665640564039457584007913129639936) x511))
(define-fun x724 ((x179 Int)) Bool (and (< x179 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x179)))
(define-fun x75 ((x179 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x179) (>= x179 0)))
(define-fun x813 ((x179 Int)) Bool (and (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639935 x179) x179) (= (x445 x179 115792089237316195423570985008687907853269984665640564039457584007913129639935) x179)))
(define-fun x349 ((x179 Int)) Bool (and (= (x445 0 x179) 0) (= (x445 x179 0) 0)))
(define-fun x597 ((x179 Int)) Bool (= (x445 x179 x179) x179))
(define-fun x764 ((x179 Int)) Bool (and (x349 x179) (x813 x179) (x597 x179)))
(define-fun x53 ((x179 Int) (x139 Int)) Bool (= (x445 x179 x139) (x445 x139 x179)))
(define-fun x145 ((x179 Int) (x139 Int)) Bool (and (>= (x445 x179 x139) 0) (=> (<= 0 x139) (<= (x445 x179 x139) x139)) (=> (>= x179 0) (<= (x445 x179 x139) x179))))
(define-fun x124 ((x179 Int) (x139 Int)) Bool (and (x145 x179 x139) (x53 x179 x139)))
(define-fun x10 ((x179 Int)) Bool (= (mod x179 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x179 32) (x445 x179 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x386 ((x179 Int)) Bool (and (x10 x179) (x124 x179 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x83 ((x179 Int)) Bool (= (mod x179 1461501637330902918203684832716283019655932542976) (x445 x179 1461501637330902918203684832716283019655932542975)))
(define-fun x188 ((x179 Int)) Bool (and (x83 x179) (x124 x179 1461501637330902918203684832716283019655932542975)))
(define-fun x533 ((x819 Int)) Int (ite (< x819 x630) (x163 x819) 0))
(define-fun x741 ((x819 Int)) Int (x353 x819))
(define-fun x492 ((x819 Int)) Int (ite (= x819 x904) x478 (x3 x819)))
(define-fun x720 ((x819 Int)) Int (ite (= x112 x819) x239 (x492 x819)))
(define-fun x306 ((x819 Int)) Int (ite (= x819 128) x541 (x320 x819)))
(define-fun x154 ((x819 Int)) Int (ite (and (> (+ x541 160) x819) (>= x819 160)) (x353 (+ x304 (- x819 160))) (x306 x819)))
(define-fun x976 ((x819 Int)) Int (ite (= x894 x819) 0 (x154 x819)))
(define-fun x269 ((x819 Int)) Int (ite (= x819 x575) x733 (x976 x819)))
(define-fun x1011 ((x819 Int)) Int (ite (and (> (+ x733 x343) x819) (>= x819 x343)) (x353 (+ (- x819 x343) x957)) (x269 x819)))
(define-fun x641 ((x819 Int)) Int (ite (= x672 x819) 0 (x1011 x819)))
(define-fun x34 ((x819 Int)) Int (ite (= x819 x729) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x641 x819)))
(define-fun x721 ((x819 Int)) Int (ite (= x819 x536) 160 (x34 x819)))
(define-fun x369 ((x819 Int)) Int (ite (= x819 x662) x56 (x721 x819)))
(define-fun x459 ((x819 Int)) Int (ite (= x819 x688) x636 (x369 x819)))
(define-fun x116 ((x819 Int)) Int (ite (= x819 x18) x880 (x459 x819)))
(define-fun x650 ((x819 Int)) Int (ite (= x1018 x819) x484 (x116 x819)))
(define-fun x248 ((x819 Int)) Int (ite (= x196 x819) x255 (x650 x819)))
(define-fun x275 ((x819 Int)) Int (ite x954 (x650 x819) (ite x952 (x116 x819) (ite x517 (x459 x819) (ite x364 (x369 x819) (x248 x819))))))
(define-fun x266 ((x819 Int)) Int (ite (= x822 x819) 0 (x275 x819)))
(define-fun x942 ((x819 Int)) Int (ite x333 (x275 x819) (x266 x819)))
(define-fun x631 ((x819 Int)) Int (ite (= x914 x819) x60 (x942 x819)))
(define-fun x90 ((x819 Int)) Int (ite (= x819 x294) x934 (x631 x819)))
(define-fun x971 ((x819 Int)) Int (ite (= x819 x610) x723 (x90 x819)))
(define-fun x507 ((x819 Int)) Int (ite (= x819 x986) x452 (x971 x819)))
(define-fun x441 ((x819 Int)) Int (ite (= x819 x367) x508 (x507 x819)))
(define-fun x245 ((x819 Int)) Int (ite (= x496 x819) x396 (x441 x819)))
(define-fun x668 ((x819 Int)) Int (ite x995 (x441 x819) (ite x346 (x507 x819) (ite x528 (x971 x819) (ite x209 (x90 x819) (x245 x819))))))
(define-fun x205 ((x819 Int)) Int (ite (= x22 x819) 0 (x668 x819)))
(define-fun x68 ((x819 Int)) Int (ite x192 (x668 x819) (x205 x819)))
(define-fun x416 ((x819 Int)) Int (ite (= x819 x580) x310 (x68 x819)))
(define-fun x673 ((x819 Int)) Int (ite (= x864 x819) x45 (x416 x819)))
(define-fun x385 ((x819 Int)) Int (ite (= x819 x657) x198 (x673 x819)))
(define-fun x936 ((x819 Int)) Int (ite (= x135 x819) x241 (x385 x819)))
(define-fun x891 ((x819 Int)) Int (ite (= x819 x717) x475 (x936 x819)))
(define-fun x243 ((x819 Int)) Int (ite (= x175 x819) x170 (x891 x819)))
(define-fun x869 ((x819 Int)) Int (ite (= x670 x819) x527 (x243 x819)))
(define-fun x690 ((x819 Int)) Int (ite x360 (x243 x819) (ite x19 (x891 x819) (ite x559 (x936 x819) (ite x233 (x385 x819) (x869 x819))))))
(define-fun x763 ((x819 Int)) Int (ite (= x193 x819) x735 (x690 x819)))
(define-fun x663 ((x819 Int)) Int (ite (= x747 x819) x69 (x763 x819)))
(define-fun x44 ((x819 Int)) Int (ite (= x947 x819) x119 (x663 x819)))
(define-fun x40 ((x819 Int)) Int (ite (= x436 x819) x103 (x44 x819)))
(define-fun x356 ((x819 Int)) Int (ite (and (<= x919 x819) (> (+ x919 x103) x819)) (x353 (+ (- x819 x919) x184)) (x40 x819)))
(define-fun x835 ((x819 Int)) Int (ite (= x819 x263) 0 (x356 x819)))
(define-fun x130 ((x819 Int)) Int (ite x435 (x663 x819) (x835 x819)))
(define-fun x669 ((x819 Int)) Int (ite (= x819 x729) x150 (x130 x819)))
(define-fun x271 ((x819 Int)) Int (ite x711 (x130 x819) (ite x766 (x669 x819) (x130 x819))))
(define-fun x176 ((x819 Int)) Int (ite (= x200 x819) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x271 x819)))
(define-fun x495 ((x819 Int)) Int (ite (and (< x819 (+ 32 x200)) (<= x200 x819)) (x206 (+ (- x819 x200) 0)) (x176 x819)))
(define-fun x234 ((x819 Int)) Int (ite (and (>= x819 196) (> (+ (x812 (- x42 196)) 196) x819)) (x130 (+ (- x819 196) (x522 (+ 196 x729)))) (x533 x819)))
(define-fun x80 ((x819 Int)) Int (ite (= x819 128) x980 (x384 x819)))
(define-fun x328 ((x819 Int)) Int (ite (and (> (+ 160 x980) x819) (>= x819 160)) (x234 (+ 196 (- x819 160))) (x80 x819)))
(define-fun x469 ((x819 Int)) Int (ite (= x819 x187) 0 (x328 x819)))
(define-fun x924 ((x819 Int)) Int (ite (= x816 x819) x871 (x469 x819)))
(define-fun x285 ((x819 Int)) Int (ite (and (> (+ x841 x871) x819) (<= x841 x819)) (x234 (+ x72 (- x819 x841))) (x924 x819)))
(define-fun x489 ((x819 Int)) Int (ite (= x819 x429) 0 (x285 x819)))
(define-fun x554 ((x819 Int)) Int (ite (= x1 x819) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x489 x819)))
(define-fun x76 ((x819 Int)) Int (ite (= x1 x819) x698 (x554 x819)))
(define-fun x700 ((x819 Int)) Int (ite (= x819 x112) x573 (x720 x819)))
(define-fun x231 ((x819 Int)) Int (ite (= x551 x819) x797 (x700 x819)))
(define-fun x1016 ((x819 Int)) Int (ite (and (< x819 (+ 0 x968)) (<= x968 x819)) (x774 (+ (- x819 x968) 0)) (x76 x819)))
(define-fun x991 ((x819 Int)) Int (ite x595 (x76 x819) (ite x710 (x1016 x819) (x76 x819))))
(define-fun x996 ((x819 Int)) Int (ite x595 (x563 x819) (x774 x819)))
(define-fun x981 ((x819 Int)) Int (ite (= x819 x968) x930 (x991 x819)))
(define-fun x166 ((x819 Int)) Int (ite (and (<= x857 x819) (< x819 (+ x857 x930))) (x996 (+ (- x819 x857) 0)) (x981 x819)))
(define-fun x402 ((x819 Int)) Int (ite x710 (x370 x819) (x231 x819)))
(define-fun x242 ((x819 Int)) Int (ite (= x819 x551) x897 (x402 x819)))
(define-fun x199 ((x819 Int)) Int (ite (= x819 x112) x888 (x242 x819)))
(define-fun x685 ((x819 Int)) Int (ite x542 (x720 x819) (ite x595 (x720 x819) (ite x758 (x402 x819) (x199 x819)))))
(define-fun x761 ((x819 Int)) Int (ite x542 (x489 x819) (ite x51 (x991 x819) (x166 x819))))
(define-fun x838 ((x819 Int)) Int (ite (= x819 x112) x155 (x685 x819)))
(define-fun x565 ((x819 Int)) Int (ite (= x999 x819) x273 (x838 x819)))
(define-fun x617 ((x819 Int)) Int (ite (= x999 x819) x138 (x565 x819)))
(define-fun x889 ((x819 Int)) Int (ite (= x819 x112) x560 (x617 x819)))
(define-fun x833 ((x819 Int)) Int (ite (= x440 x819) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x761 x819)))
(define-fun x771 ((x819 Int)) Int (ite (= x905 x819) 192 (x833 x819)))
(define-fun x151 ((x819 Int)) Int (ite (= x615 x819) x482 (x771 x819)))
(define-fun x518 ((x819 Int)) Int (ite (= x819 x789) x534 (x151 x819)))
(define-fun x121 ((x819 Int)) Int (ite (= x819 x770) x290 (x518 x819)))
(define-fun x448 ((x819 Int)) Int (ite (= x552 x819) x498 (x121 x819)))
(define-fun x117 ((x819 Int)) Int (ite x16 (x964 x819) (x889 x819)))
(define-fun x624 ((x819 Int)) Int (ite x824 (x117 x819) (ite x165 (x480 x819) (x117 x819))))
(define-fun x622 ((x819 Int)) Int (ite (= x195 x819) x558 (x448 x819)))
(define-fun x907 ((x819 Int)) Int (ite x539 (x448 x819) (ite x817 (x121 x819) (ite x612 (x518 x819) (ite x52 (x151 x819) (x622 x819))))))
(define-fun x26 ((x819 Int)) Int (ite (= x819 x141) 0 (x907 x819)))
(define-fun x278 ((x819 Int)) Int (ite x515 (x907 x819) (x26 x819)))
(define-fun x207 ((x819 Int)) Int (ite (= x819 x312) x810 (x278 x819)))
(define-fun x752 ((x819 Int)) Int (ite (= x819 x334) x851 (x207 x819)))
(define-fun x172 ((x819 Int)) Int (ite (= x819 x468) x1000 (x752 x819)))
(define-fun x846 ((x819 Int)) Int (ite (= x608 x819) x354 (x172 x819)))
(define-fun x291 ((x819 Int)) Int (ite (= x819 x454) x153 (x846 x819)))
(define-fun x1006 ((x819 Int)) Int (ite (= x819 x88) x958 (x291 x819)))
(define-fun x749 ((x819 Int)) Int (ite x830 (x291 x819) (ite x893 (x846 x819) (ite x303 (x172 x819) (ite x877 (x752 x819) (x1006 x819))))))
(define-fun x434 ((x819 Int)) Int (ite (= x819 x593) 0 (x749 x819)))
(define-fun x719 ((x819 Int)) Int (ite x413 (x749 x819) (x434 x819)))
(define-fun x577 ((x819 Int)) Int (ite (= x323 x819) x567 (x719 x819)))
(define-fun x472 ((x819 Int)) Int (ite (= x819 x407) x488 (x577 x819)))
(define-fun x561 ((x819 Int)) Int (ite (= x819 x882) x674 (x472 x819)))
(define-fun x282 ((x819 Int)) Int (ite (= x819 x620) x325 (x561 x819)))
(define-fun x809 ((x819 Int)) Int (ite (and (< x819 (+ 0 x440)) (<= x440 x819)) (x626 (+ 0 (- x819 x440))) (x282 x819)))
(define-fun x790 ((x819 Int)) Int (ite x16 (x809 x819) (x282 x819)))
(define-fun x586 ((x819 Int)) Int (ite (= x819 x860) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x790 x819)))
(define-fun x530 ((x819 Int)) Int (ite (= x819 x988) x807 (x586 x819)))
(define-fun x509 ((x819 Int)) Int (ite (= x519 x819) x127 (x530 x819)))
(define-fun x132 ((x819 Int)) Int (ite (= x819 x142) x903 (x509 x819)))
(define-fun x201 ((x819 Int)) Int (ite (= x819 x168) x843 (x132 x819)))
(define-fun x455 ((x819 Int)) Int (ite x240 (x132 x819) (ite x173 (x509 x819) (ite x261 (x530 x819) (ite x926 (x586 x819) (x201 x819))))))
(define-fun x883 ((x819 Int)) Int (ite (= x819 x781) 0 (x455 x819)))
(define-fun x203 ((x819 Int)) Int (ite x583 (x455 x819) (x883 x819)))
(define-fun x658 ((x819 Int)) Int (ite (= x440 x819) x743 (x203 x819)))
(define-fun x55 ((x819 Int)) Int (ite (= x819 x937) x224 (x658 x819)))
(define-fun x28 ((x819 Int)) Int (ite (= x646 x819) x885 (x55 x819)))
(define-fun x99 ((x819 Int)) Int (ite (= x31 x819) x629 (x28 x819)))
(define-fun x235 ((x819 Int)) Int (ite (= x189 x819) x464 (x99 x819)))
(define-fun x13 ((x819 Int)) Int (ite (= x819 x66) x731 (x235 x819)))
(define-fun x645 ((x819 Int)) Int (ite (= x190 x819) x91 (x13 x819)))
(define-fun x643 ((x819 Int)) Int (ite x705 (x13 x819) (ite x512 (x235 x819) (ite x227 (x99 x819) (ite x739 (x28 x819) (x645 x819))))))
(define-fun x466 ((x819 Int)) Int (ite (= x819 x254) 0 (x643 x819)))
(define-fun x149 ((x819 Int)) Int (ite x322 (x643 x819) (x466 x819)))
(define-fun x438 ((x819 Int)) Int (ite (= x932 x819) x737 (x149 x819)))
(define-fun x985 ((x819 Int)) Int (ite x746 (x495 x819) (x176 x819)))
(define-fun x458 ((x819 Int)) Int (ite (= x183 x819) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x985 x819)))
(define-fun x821 ((x819 Int)) Int (ite (and (< x819 (+ x183 32)) (<= x183 x819)) (x591 (+ (- x819 x183) 0)) (x458 x819)))
(define-fun x908 ((x819 Int)) Int (ite x794 (x821 x819) (x458 x819)))
(define-fun x368 ((x819 Int)) Int (ite (= x819 x831) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x908 x819)))
(define-fun x547 ((x819 Int)) Int (ite (and (<= x831 x819) (> (+ x831 32) x819)) (x412 (+ (- x819 x831) 0)) (x368 x819)))
(define-fun x411 ((x819 Int)) Int (ite x433 (x547 x819) (x368 x819)))
(define-fun x745 ((x819 Int)) Int (ite (= x819 x795) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x411 x819)))
(define-fun x230 ((x819 Int)) Int (ite (and (> (+ x795 32) x819) (<= x795 x819)) (x681 (+ (- x819 x795) 0)) (x745 x819)))
(define-fun x779 ((x819 Int)) Int (ite x944 (x230 x819) (x745 x819)))
(define-fun x959 ((x819 Int)) Int (ite (= x819 x444) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x779 x819)))
(define-fun x504 ((x819 Int)) Int (ite (and (< x819 (+ x444 32)) (>= x819 x444)) (x756 (+ 0 (- x819 x444))) (x959 x819)))
(define-fun x516 ((x819 Int)) Int (ite x589 (x504 x819) (x959 x819)))
(assert (= (and (not x538) x706) x364))
(assert (= (and x344 x81) x944))
(assert (x75 x290))
(assert (x75 x160))
(assert (= (x320 192) 0))
(assert (x75 x940))
(assert (= (or x192 x979) x29))
(assert (= (x320 (+ 64 (x522 (+ x729 196)))) 0))
(assert (x386 x453))
(assert (= (=> (and (= (= x324 0) x315) (or x315 (not x315))) x572) x202))
(assert (x75 x678))
(assert (x75 x362))
(assert (x75 x792))
(assert (= (and x886 (not x174)) x486))
(assert (x75 x135))
(assert (= 0 (x320 256)))
(assert (x75 x314))
(assert (x75 x730))
(assert (= (and (not x24) x490) x679))
(assert (= x742 (and x29 x158)))
(assert (= x975 (and x722 x491)))
(assert (x75 x253))
(assert (= (and (not x74) x292) x19))
(assert (= (or (and (not x773) x406) x36) x490))
(assert (x764 x461))
(assert (x75 x734))
(assert (= (and (not x109) x391) x50))
(assert (= (x384 224) 0))
(assert (x75 x440))
(assert (x75 x66))
(assert (= (x320 (+ (x522 (+ 196 x729)) (- (+ (- x760 160) 196) 196))) 0))
(assert (= x707 (and x849 x371)))
(assert (x75 x264))
(assert (x75 x1013))
(assert (x764 x520))
(assert (= x110 (and x467 (not x874))))
(assert (x75 x1002))
(assert (= (and x802 x63) x259))
(assert (x75 x605))
(assert (x75 x210))
(assert (x75 x254))
(assert (= x420 (and x89 x917)))
(assert (x75 x636))
(assert (x75 x222))
(assert (x75 x184))
(assert (= (or x778 x699) x171))
(assert (x75 x822))
(assert (= (and x171 (not x79)) x824))
(assert (= (and (not x525) x906) x299))
(assert (x764 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x75 x871))
(assert (x75 x134))
(assert (= (and (not x616) x415) x1009))
(assert (x75 x1003))
(assert (= x48 (and x120 x506)))
(assert (x75 x610))
(assert (= (and x759 x727) x899))
(assert (x75 x732))
(assert (= x758 (and x106 (not x169))))
(assert (x75 x902))
(assert (= x542 (and x941 (not x305))))
(assert (x75 x482))
(assert (= (=> (and (= x396 (x441 x772)) (= x772 (x522 (+ x343 96))) (= x496 (x522 (+ 96 x1012))) (= (not (< 128 x934)) x865)) (and (=> (= 128 x526) x481) x865)) x316))
(assert (x75 x698))
(assert (= (and x267 (not x962)) x595))
(assert (= (or x217 x165) x32))
(assert (x75 x31))
(assert (x75 x8))
(assert (x75 x18))
(assert (= x699 (and x625 x898)))
(assert (= (=> (and (= (x522 (+ x905 32)) x312) (= x851 (x207 x816)) (= (x522 (+ x334 32)) x748) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x123) x691) (= x810 (x812 (- x334 x905))) (= x727 (< 0 x851)) (= x334 (x522 (+ x691 x596))) (= x123 (x522 (+ x482 31)))) (and (=> (and (and (= (> x851 32) x675) (= x1000 (x752 x760)) (= x841 x760) (= x748 x468)) x727) (and (=> (and x675 (and (= x608 (x522 (+ 32 x748))) (= x653 (x522 (+ x841 32))) (= x354 (x172 x653)) (= x722 (< 64 x851)))) (and (=> (and x722 (and (= (> x851 96) x283) (= x929 (x522 (+ 64 x841))) (= (x846 x929) x153) (= (x522 (+ 64 x748)) x454))) (and (=> (and (not x283) (= x280 96)) x744) (=> x283 x667))) (=> (and (not x722) (= 64 x280)) x744))) (=> (and (not x675) (= 32 x280)) x744))) (=> (and (not x727) (= 0 x280)) x744))) x601))
(assert (= 0 (x384 x929)))
(assert (x75 x569))
(assert (x75 x737))
(assert (x75 x571))
(assert (x764 x397))
(assert (= 0 (x320 (+ (x522 (+ 196 x729)) (- x253 196)))))
(assert (= x868 (or x926 x173 x261 x240 x592)))
(assert (x75 x930))
(assert (x75 x447))
(assert (x75 x879))
(assert (x75 x536))
(assert (= (or x794 x487) x656))
(assert (= x485 (=> (and (= (= x734 0) x376) (or (not x376) x376)) x916)))
(assert (x75 x1008))
(assert (x75 x949))
(assert (x75 x801))
(assert (= x984 (and x81 (not x344))))
(assert (= x1015 (and x803 (not x716))))
(assert (x75 x731))
(assert (x75 x768))
(assert (x75 x578))
(assert (= x393 (=> (and (= x194 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x318)) (= (x522 (+ x580 32)) x864) (= x45 (x812 (- x657 x536))) (= x318 (x522 (+ x934 31))) (= x657 (x522 (+ x194 x1012))) (= (< 0 x198) x158) (= x580 (x522 (+ x914 32))) (= (x522 (+ x657 32)) x135)) (and (=> (and x158 (and (<= x241 1461501637330902918203684832716283019655932542975) (= x717 (x522 (+ x135 32))) (= x241 (x353 x992)) (= (> x198 1) x359) (= (x522 (+ x992 32)) x782))) (and (=> (and (not x359) (= x717 x747)) x703) (=> (and x359 (and (= (x522 (+ x782 32)) x210) (= (x522 (+ 32 x717)) x175) (= x74 (> x198 2)) (= x475 (x353 x782)) (<= x475 1461501637330902918203684832716283019655932542975))) (and (=> (and (and (= (x522 (+ 32 x210)) x783) (>= 1461501637330902918203684832716283019655932542975 x170) (= (x522 (+ 32 x175)) x670) (= (< 3 x198) x27) (= (x353 x210) x170)) x74) (and (=> x27 x23) (=> (and (= x747 x670) (not x27)) x703))) (=> (and (= x747 x175) (not x74)) x703))))) (=> (and (= x747 x135) (not x158)) x703)))))
(assert (= (x320 (+ (- x421 196) (x522 (+ x729 196)))) 0))
(assert (x75 x373))
(assert (x75 x791))
(assert (x75 x307))
(assert (x75 x112))
(assert (= (and x566 (not x389)) x227))
(assert (x75 x977))
(assert (x724 x394))
(assert (= (and (not x665) x493) x754))
(assert (= x661 (=> (= x286 (< 0 x474)) (and (=> x286 x257) (=> (and (not x286) (and (= x33 0) (= x264 x101))) x293)))))
(assert (x75 x702))
(assert (x75 x47))
(assert (x75 x582))
(assert (= x426 (=> (and (= x168 (x522 (+ 96 x621))) (= (x522 (+ x841 96)) x998) (= (not (> x270 128)) x969) (= (x132 x998) x843)) (and (=> (= x352 128) x787) x969))))
(assert (x75 x60))
(assert (x75 x126))
(assert (= x446 (and (not x861) x161)))
(assert (x75 x691))
(assert (x75 x392))
(assert (= (and x329 (not x404)) x755))
(assert (x75 x718))
(assert (= (and x82 x579) x232))
(assert (x75 x747))
(assert (x75 x131))
(assert (= x987 (or x884 x277)))
(assert (x75 x980))
(assert (= (and x161 x861) x348))
(assert (= (and x338 x544) x339))
(assert (= x566 (and x922 x676)))
(assert (x75 x456))
(assert (= (and x725 x375) x51))
(assert (= x414 (or (and x715 (not x376)) x92)))
(assert (x75 x136))
(assert (x75 x49))
(assert (= (and x86 (not x532)) x828))
(assert (= x952 (and x707 (not x419))))
(assert (= (=> (and (or (and (= x968 x928) x375) (and (and (= x105 x928) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x397) x276) (= (x522 (+ 32 x968)) x857) (= (x522 (+ x968 x276)) x105) (= (x522 (+ 63 x930)) x397)) (not x375))) (= (= 0 x930) x375)) x473) x753))
(assert (x75 x689))
(assert (= 0 (x320 (+ (x522 (+ 196 x729)) (- (+ (- x998 x841) x72) 196)))))
(assert (= (and (not x625) x898) x778))
(assert (x75 x268))
(assert (= (x320 x307) 0))
(assert (= (or x515 x562) x759))
(assert (x764 x768))
(assert (= (and (not x693) x236) x926))
(assert (= x82 (and x800 x378)))
(assert (x75 x265))
(assert (x75 x175))
(assert (x75 x697))
(assert (x75 x468))
(assert (x75 x450))
(assert (x75 x100))
(assert (x764 x666))
(assert (= x267 (and x890 x680)))
(assert (= x256 (or x881 x225)))
(assert (x75 x866))
(assert (x75 x258))
(assert (x764 x288))
(assert (= x600 (=> (and (= x57 (= x718 0)) (= (x85 x274) x718) (= x274 (x445 1461501637330902918203684832716283019655932542975 x999))) (and (=> (and (and (= (> x324 0) x1017) (or (not x1017) (and x1017 (and (= (x624 x274) x832) x804 (= (= x832 (x965 x274)) x804) (> 4294967296 x837) (= x750 (>= (x965 x112) x61)) x750 (= (x624 x112) x61))))) (not x57)) x202) (=> (and (and (= x264 x101) (= x33 0)) x57) x293)))))
(assert (= x886 (and x12 (not x694))))
(assert (x75 x1005))
(assert (= x827 (and x895 x73)))
(assert (= 0 (x563 (- x760 x857))))
(assert (x75 x549))
(assert (= (and x603 (not x978)) x192))
(assert (= (and x147 x98) x225))
(assert (x75 x847))
(assert (= (and x87 x728) x107))
(assert (= (x320 (+ (x522 (+ x729 196)) (- (+ (- x760 x841) x72) 196))) 0))
(assert (x75 x717))
(assert (x386 x666))
(assert (= (=> (and (or (and (and (= 1 x627) (> 4294967296 x585)) x811) (and (not x811) (= x649 x627))) (and (not (= x570 0)) (not (or (> x340 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x340) true) (> 32 x340)))) (= (x522 (+ x200 x659)) x183) (>= 1461501637330902918203684832716283019655932542975 x180) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x520) x659) (= (x985 x200) x180) (= (x522 (+ 31 x340)) x520) (= (> x649 0) x811))) x395) x298))
(assert (x75 x997))
(assert (x75 x38))
(assert (= (and x43 x114) x391))
(assert (x75 x630))
(assert (x75 x928))
(assert (x75 x273))
(assert (x75 x953))
(assert (x75 x129))
(assert (= x479 (and x300 x152)))
(assert (x764 x453))
(assert (= (and x380 (not x704)) x923))
(assert (x764 x648))
(assert (= 0 (x384 192)))
(assert (x75 x674))
(assert (x75 x982))
(assert (= (and x500 x656) x433))
(assert (x75 x551))
(assert (= x415 (and x543 x613)))
(assert (x75 x943))
(assert (= (=> (= x532 (> x443 0)) (and (=> (and (and (= x33 0) (= x264 x101)) (not x532)) x293) (=> (and (= x928 x440) x532) x599))) x473))
(assert (= 0 (x320 x772)))
(assert (x75 x550))
(assert (x75 x69))
(assert (x75 x687))
(assert (x75 x25))
(assert (= x515 (and (not x272) x548)))
(assert (x75 x244))
(assert (x75 x593))
(assert (x75 x193))
(assert (x75 x444))
(assert (x75 x885))
(assert (x75 x615))
(assert (x386 x520))
(assert (x75 x816))
(assert (= (=> (and (= x919 (x522 (+ x436 32))) (= x246 (x522 (+ x961 x852))) (= (x353 x246) x103) (= x696 (x812 (- x630 x852))) (= (x812 (- x696 31)) x713) (= (x522 (+ x103 31)) x461) (or (and (< x961 x713) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x713) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x961))) (and (> x961 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x713))) (= x263 (x522 (+ x919 x103))) (= (x522 (+ x246 32)) x184) (not (or (and (< x358 x184) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x358) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x184))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x358) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x184)))) (= (x812 (- x630 x103)) x358) (= x637 (not (< 1 x69))) (= x119 x736) (= x372 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x461)) (not (< 18446744073709551615 x103)) (= (x522 (+ x919 x372)) x842) (= x961 (x353 x852))) (and x637 (=> (= x226 x842) x1007))) x425))
(assert (= (and x899 (not x675)) x303))
(assert (x75 x141))
(assert (= x70 (and x348 x876)))
(assert (= 0 (x384 256)))
(assert (= (and (not x182) x868) x583))
(assert (x75 x611))
(assert (and (>= (x945 x112 x326) 10000) (>= 340282366920938463463374607431768211455 (x945 x112 x326))))
(assert (x75 x313))
(assert (= (x320 (+ (- (+ (- x47 160) 196) 196) (x522 (+ 196 x729)))) 0))
(assert (x764 x955))
(assert (x75 x142))
(assert (= x1001 (and x229 x479)))
(assert (= x493 (and x305 x941)))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- (+ x72 (- x929 x841)) 196)))))
(assert (x75 x757))
(assert (= (x384 x47) 0))
(assert (= (and (not x579) x82) x705))
(assert (= x173 (and (not x751) x951)))
(assert (x75 x363))
(assert (x75 x798))
(assert (= (and x79 x171) x574))
(assert (x75 x342))
(assert (x75 x736))
(assert (= (and x415 x616) x84))
(assert (x724 x274))
(assert (= (=> (and (not (> 4 x362)) (not (< x9 1245659826)) (= x735 x686) (> x160 0) (not (= x9 1262878978)) (not (= x9 1245659826)) (= (= x56 (x533 164)) x784) (= (x85 x112) x160) (= x42 x362) x784 (= x60 x793) (= 2005408114 x9) (<= 292 x362) (= x808 (x812 (- x362 4))) (= x550 54065695799311150304516525983669583430195215316752708547810291668471328538624) (not (= x9 1553423035)) (not (= x9 1845979623)) (not (= x9 1901074598)) (> 2220280665 x9) (= (or (> x808 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 160 x808) (= true (<= x808 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x73) (= x45 x8) (= (x812 (- x226 x729)) x42) (= x363 x798)) (and (=> (and (= (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x362)) (> x362 195)) x544) (not x73)) (and (=> (and x544 (and (= x980 (x234 164)) (= x820 (> x980 18446744073709551615)))) (and (=> (and (and (= (= (ite x825 1 0) 0) x704) (= (x522 (+ x618 31)) x666) (= (x522 (+ x911 32)) x618) (= (> 128 x816) x377) (= (> x816 18446744073709551615) x501) (= (or x501 x377) x825) (= x268 (x522 (+ x980 31))) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x666) x129) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x268) x911) (= (x522 (+ x129 128)) x816)) (not x820)) (and (=> (and x704 (and (= x222 (x522 (+ 196 x980))) (= (< x362 x222) x994))) (and (=> (and (and (= x101 x264) (= 0 x33)) x994) x293) (=> (and (not x994) (and (= (> x60 18446744073709551615) x694) (= (x522 (+ x980 160)) x187))) (and (=> (and (and (= x33 0) (= x101 x264)) x694) x293) (=> (and (not x694) (and (= (x522 (+ 31 x421)) x702) (= (x522 (+ x793 4)) x421) (= x174 (or (and (<= x362 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x702 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x702 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x362)) (< x702 x362)))))) (and (=> (and (not x174) (and (= x264 x101) (= x33 0))) x293) (=> (and x174 (and (= (x522 (+ 32 x421)) x72) (= x871 (x234 x421)) (= x297 (< 18446744073709551615 x871)))) (and (=> (and (and (= (x522 (+ x77 31)) x350) (= x21 (or x128 x122)) (= x191 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x453)) (= (> x816 x1) x122) (= x128 (< 18446744073709551615 x1)) (= x453 (x522 (+ x871 31))) (= (x522 (+ x302 x816)) x1) (= x874 (= 0 (ite x21 1 0))) (= x302 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x350)) (= (x522 (+ x191 32)) x77)) (not x297)) (and (=> (and x874 (and (= (x522 (+ x816 32)) x841) (= x834 (x522 (+ x871 x72))) (= x628 (> x834 x362)))) (and (=> (and x628 (and (= x101 x264) (= 0 x33))) x293) (=> (and (not x628) (and (= x115 (> x45 18446744073709551615)) (= x429 (x522 (+ x871 x841))))) (and (=> (and (and (= x101 x264) (= 0 x33)) x115) x293) (=> (and (and (= x867 (x522 (+ 31 x847))) (= (x522 (+ 4 x8)) x847) (= x114 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x362) (<= x867 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x362 x867)) (and (> x867 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x362))))) (not x115)) (and (=> (and x114 (and (= (x234 x847) x769) (= x109 (> x769 18446744073709551615)))) (and (=> (and (not x109) (and (= x388 (> x582 x362)) (= x633 (x522 (+ x847 32))) (= x1003 (mod (* 32 x769) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x522 (+ x1003 x633)) x582))) (and (=> (and (and (= 0 x33) (= x264 x101)) x388) x293) (=> (and (not x388) (= x140 (< 18446744073709551615 x735))) (and (=> (and (and (= 0 x33) (= x264 x101)) x140) x293) (=> (and (and (= (x522 (+ x686 4)) x253) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x862) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x362)) (< x862 x362)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x362) (> x862 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x728) (= x862 (x522 (+ x253 31)))) (not x140)) (and (=> (and (and (= x529 (x234 x253)) (= x855 (< 18446744073709551615 x529))) x728) (and (=> (and x855 (and (= x101 x264) (= x33 0))) x293) (=> (and (not x855) (and (= (x522 (+ x238 x602)) x791) (= (x522 (+ x253 32)) x602) (= (> x791 x362) x382) (= x238 (mod (* x529 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and (=> (and x382 (and (= x33 0) (= x264 x101))) x293) (=> (and (not x382) (and (< x997 256) (<= 0 x997) (= x218 (= x997 0)) (<= x997 255))) (and (=> (and (not x218) (and (= 0 x33) (= x264 x101))) x293) (=> (and x218 (and (>= x101 0) (= (> x101 0) x305) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x101))) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x101) (>= x101 0) (= (= 0 x101) x665)) x305) (and (=> (and (not x665) (and (= x101 x264) (= x33 0))) x293) (=> (and (and (= x423 4) (not (< x471 2220280665)) (= (x445 1461501637330902918203684832716283019655932542975 x4) x258) (= (= x258 x4) x890) (not (= x471 2249206060)) (= x390 (x85 x112)) (>= 1461501637330902918203684832716283019655932542975 x698) (not (< x1008 4)) (<= 0 x698) (= x423 x1008) (= x854 64069044923792539370177021244577383457373632460708312080110356237917649633280) (not (= 2329570063 x471)) (> 3084411429 x471) (= x4 (x76 x1)) (= (x522 (+ x1 32)) x968) (not (= 2220280665 x471)) (= 2376452955 x471) (= x1008 4) (> 1461501637330902918203684832716283019655932542976 x698) (< 0 x390)) x665) (and (=> (and x890 (and (= 0 x392) (= x962 (and (<= 0 x788) (< (+ x392 x284) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x284 (x720 x551)) (= x551 (x445 1461501637330902918203684832716283019655932542975 x4)) (= (x720 x112) x788))) (and (=> (and (not x962) (and (= x443 0) (= x930 0))) x753) (=> (and (and (or (and (and x208 (= (<= x197 (x370 x112)) x437) (= x347 (x231 x551)) (> 4294967296 x211) (= x197 (x231 x112)) x437 (= (= (x370 x551) x347) x208)) x404) (not x404)) (and (= (< 0 x879) x404) (= x483 (x700 x551)) (< (+ x483 x392) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x573 x345) (= x483 x797) (= (x720 x112) x345))) x962) x989))) (=> (and (not x890) (and (= x264 x101) (= 0 x33))) x293))))) (=> (and (not x305) (= x440 x1)) x599))))))))) (=> (and (and (= 0 x33) (= x264 x101)) (not x728)) x293))))))) (=> (and x109 (and (= 0 x33) (= x264 x101))) x293))) (=> (and (and (= x101 x264) (= 0 x33)) (not x114)) x293))))))) (=> (and (not x874) (and (= x33 0) (= x101 x264))) x293))) (=> (and x297 (and (= x101 x264) (= x33 0))) x293))))))))) (=> (and (not x704) (and (= x33 0) (= x101 x264))) x293))) (=> (and (and (= x101 x264) (= 0 x33)) x820) x293))) (=> (and (and (= x264 x101) (= 0 x33)) (not x544)) x293))) (=> (and (and (= x1013 x655) (= 0 x381) (= x101 x357)) x73) x159))) x1007))
(assert (= (or x824 x432) x400))
(assert (= (=> (and (or (not x978) (and (= (x522 (+ x934 x1012)) x22) x978)) (= (> x526 x934) x978)) x393) x481))
(assert (= x296 (=> (and (= x294 (x522 (+ x870 x801))) (= (x812 (- x294 x536)) x60) (= x934 (x631 x575)) (= x1012 (x522 (+ 32 x294))) (= x801 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x955)) (= (x522 (+ x56 31)) x955) (= (x522 (+ 32 x536)) x914) (= (< 0 x934) x587)) (and (=> (and x587 (and (= x1012 x610) (= x343 x839) (= x723 (x90 x839)) (= (> x934 32) x355))) (and (=> (and (not x355) (= x526 32)) x481) (=> (and x355 (and (= (x971 x307) x452) (= x307 (x522 (+ x343 32))) (= (x522 (+ x1012 32)) x986) (= (> x934 64) x644))) (and (=> (and (and (= (x507 x136) x508) (= x136 (x522 (+ 64 x343))) (= x917 (> x934 96)) (= (x522 (+ x1012 64)) x367)) x644) (and (=> (and (= x526 96) (not x917)) x481) (=> x917 x316))) (=> (and (= x526 64) (not x644)) x481))))) (=> (and (= 0 x526) (not x587)) x481)))))
(assert (x764 x999))
(assert (x75 x786))
(assert (= x463 (and x366 x428)))
(assert (x75 x651))
(assert (= x676 (or x223 x583)))
(assert (= x931 (and x796 x514)))
(assert (x75 x653))
(assert (x75 x957))
(assert (x386 x216))
(assert (x75 x133))
(assert (= x680 (and x665 x493)))
(assert (= (and (not x896) x556) x829))
(assert (= x521 (=> (= (not (> x757 128)) x564) (and (=> (= x46 128) x403) x564))))
(assert (x75 x526))
(assert (x75 x712))
(assert (= x67 (and x96 x140)))
(assert (= x36 (and x406 x773)))
(assert (= (=> (and (= (x522 (+ x940 96)) x190) (= (x13 256) x91) (= x311 (not (> x885 128)))) (and x311 (=> (= 128 x39) x399))) x281))
(assert (= (and x315 x987) x709))
(assert (= (and (not x917) x89) x995))
(assert (= x710 (and x329 x404)))
(assert (= (=> (and (or (not x625) x625) (= x625 (> x46 x757))) x162) x403))
(assert (x75 x854))
(assert (= x161 (and x262 x780)))
(assert (x75 x427))
(assert (x75 x397))
(assert (x75 x640))
(assert (x75 x520))
(assert (x75 x508))
(assert (x75 x629))
(assert (x75 x950))
(assert (x75 x639))
(assert (= x506 (or x413 x295)))
(assert (= x664 (and x365 x27)))
(assert (x75 x474))
(assert (= (or x817 x612 x52 x164 x539) x548))
(assert (x75 x623))
(assert (x75 x743))
(assert (x75 x670))
(assert (= x893 (and x491 (not x722))))
(assert (x75 x529))
(assert (= 0 (x563 (- 192 x857))))
(assert (x75 x782))
(assert (= x15 (and x388 x50)))
(assert (x386 x104))
(assert (x75 x914))
(assert (x75 x103))
(assert (= x329 (and x962 x267)))
(assert (x75 x421))
(assert (= x803 (and (not x120) x506)))
(assert (x75 x852))
(assert (x75 x429))
(assert (= x292 (and x359 x742)))
(assert (x764 x350))
(assert (= x599 (=> (and (< x997 256) (>= 255 x997) (= (= 0 x997) x525) (>= x997 0)) (and (=> (and (and (= x342 x546) (= (x945 x112 x326) x999) (= x910 x138) (= (x445 1461501637330902918203684832716283019655932542975 x999) x373) (= x134 x155) (<= 0 x450) (= (x685 x112) x134) (= x946 0) (= x510 x999) (>= 1461501637330902918203684832716283019655932542975 x450) (= x273 (x838 x999)) (= (x565 x999) x910) (= (x617 x112) x560) (= x326 (x545 x112)) (= x652 (= x342 x510)) (< x450 1461501637330902918203684832716283019655932542976) (= x428 (= 0 x373)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x273) x652 (< (+ x946 x560) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x525) (and (=> (and x428 (and (= 0 x33) (= x101 x264))) x293) (=> (and (and (> 1461501637330902918203684832716283019655932542976 x567) (>= x488 0) (= x482 (x771 128)) (= (x522 (+ 192 x905)) x615) (< x325 1461501637330902918203684832716283019655932542976) (<= x488 1461501637330902918203684832716283019655932542975) (= (x445 1461501637330902918203684832716283019655932542975 x999) x394) (<= x567 1461501637330902918203684832716283019655932542975) (= x905 (x522 (+ x440 4))) (> 1461501637330902918203684832716283019655932542976 x488) (= (> x482 0) x152) (>= x325 0) (< x674 1461501637330902918203684832716283019655932542976) (= x596 (x522 (+ 32 x615))) (>= x567 0) (<= 0 x674) (<= x674 1461501637330902918203684832716283019655932542975) (<= x325 1461501637330902918203684832716283019655932542975)) (not x428)) (and (=> (and (and (= x596 x789) (= x534 (x151 160)) (= (< 32 x482) x229)) x152) (and (=> (and x229 (and (= (< 64 x482) x682) (= x290 (x518 192)) (= (x522 (+ 32 x596)) x770))) (and (=> (and (= 64 x948) (not x682)) x654) (=> (and (and (= x41 (> x482 96)) (= x498 (x121 224)) (= x552 (x522 (+ x596 64)))) x682) (and (=> (and (not x41) (= x948 96)) x654) (=> x41 x933))))) (=> (and (= 32 x948) (not x229)) x654))) (=> (and (not x152) (= 0 x948)) x654))))) (=> (and (and (= x33 0) (= x264 x101)) (not x525)) x293)))))
(assert (x75 x488))
(assert (= (x384 x605) 0))
(assert (= x873 (and x355 x878)))
(assert (x75 x345))
(assert (x724 x904))
(assert (= (x320 (+ (x522 (+ x729 196)) (- (+ (- x929 160) 196) 196))) 0))
(assert (x75 x255))
(assert (= (x320 (+ (- (+ x72 (- x605 x841)) 196) (x522 (+ 196 x729)))) 0))
(assert (= (or x758 x148 x595) x725))
(assert (= x517 (and x371 (not x849))))
(assert (x75 x614))
(assert (x75 x95))
(assert (x75 x1010))
(assert (x75 x646))
(assert (x75 x558))
(assert (x75 x875))
(assert (= (and x41 x972) x164))
(assert (x75 x527))
(assert (x75 x423))
(assert (x75 x541))
(assert (= (x563 (- x605 x857)) 0))
(assert (= (and (not x158) x29) x233))
(assert (= (=> (and (= x773 (= 0 x381)) (or x773 (not x773))) x553) x159))
(assert (x75 x850))
(assert (x75 x6))
(assert (x75 x197))
(assert (x75 x627))
(assert (x75 x263))
(assert (= 0 (x384 x653)))
(assert (x75 x186))
(assert (x75 x834))
(assert (x75 x101))
(assert (= (=> (and (or (and (and (> 4294967296 x875) (= 1 x65)) x993) (and (= x215 x65) (not x993))) (and (= x216 (x522 (+ x614 31))) (= (x522 (+ x795 x167)) x444) (= x167 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x216)) (>= 1461501637330902918203684832716283019655932542975 x982) (not (= x361 0)) (= (x779 x795) x982) (= (> x215 0) x993) (not (or (> x614 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x614 32) (= true (<= x614 57896044618658097711785492504343953926634992332820282019728792003956564819967))))))) x920) x181))
(assert (= (and x64 x115) x967))
(assert (x75 x408))
(assert (x764 x104))
(assert (x75 x97))
(assert (x75 x246))
(assert (x75 x806))
(assert (= x814 (or x944 x984)))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- x6 196)))))
(assert (x75 x317))
(assert (x75 x872))
(assert (x75 x94))
(assert (= x337 (and x107 x855)))
(assert (x75 x781))
(assert (x75 x187))
(assert (= x431 (=> (and (or (and x344 (and (= x361 1) (< x614 4294967296))) (and (= x361 x219) (not x344))) (and (= x62 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x288)) (= x795 (x522 (+ x831 x62))) (>= 1461501637330902918203684832716283019655932542975 x786) (= x344 (> x219 0)) (= (x522 (+ x125 31)) x288) (= (x411 x831) x786) (not (or (> x125 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x125) (= (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (not (= x279 0)))) x181)))
(assert (= (and x707 x419) x58))
(assert (x386 x318))
(assert (x75 x494))
(assert (= x805 (=> (and (= x249 (not (> x56 128))) (= (x522 (+ 96 x870)) x196) (= (x650 256) x255)) (and x249 (=> (= 128 x960) x422)))))
(assert (x75 x986))
(assert (= x220 (and x951 x751)))
(assert (x75 x279))
(assert (= (and x642 x71) x590))
(assert (x75 x992))
(assert (x75 x39))
(assert (x75 x807))
(assert (= x818 (and x892 x848)))
(assert (x75 x598))
(assert (= (and (not x544) x338) x451))
(assert (x75 x177))
(assert (= x973 (and (not x382) x327)))
(assert (x75 x4))
(assert (x75 x123))
(assert (= (and x994 x442) x853))
(assert (= 0 (x320 (+ 96 (x522 (+ x729 196))))))
(assert (x75 x219))
(assert (= (=> (and (= x885 (x55 128)) (= x224 96) (= x937 (x522 (+ x270 x621))) (= x646 (x522 (+ x937 96))) (= (x522 (+ 32 x646)) x940) (= (x812 (- x937 x440)) x131) (= x743 (x812 (- x131 32))) (= x922 (< 0 x885))) (and (=> (and (= 0 x39) (not x922)) x399) (=> (and (and (= x389 (< 32 x885)) (= (x28 160) x629) (= x940 x31)) x922) (and (=> (and x389 (and (= (x522 (+ 32 x940)) x189) (= x800 (< 64 x885)) (= x464 (x99 192)))) (and (=> (and (and (= x579 (> x885 96)) (= x731 (x235 224)) (= x66 (x522 (+ x940 64)))) x800) (and (=> (and (not x579) (= 96 x39)) x399) (=> x579 x281))) (=> (and (= 64 x39) (not x800)) x399))) (=> (and (not x389) (= x39 32)) x399))))) x823))
(assert (x75 x341))
(assert (x75 x882))
(assert (x75 x947))
(assert (x75 x519))
(assert (= x667 (=> (and (= (x522 (+ x748 96)) x88) (= x958 (x291 x605)) (= (x522 (+ x841 96)) x605) (= x301 (not (> x851 128)))) (and (=> (= x280 128) x744) x301))))
(assert (x75 x183))
(assert (x75 x168))
(assert (x75 x78))
(assert (= x858 (=> (and (= x642 (= 0 x588)) (or (not x642) x642)) x661)))
(assert (= x89 (and x873 x644)))
(assert (x75 x352))
(assert (= x422 (=> (and (= (< x56 x960) x514) (or (not x514) (and (= (x522 (+ x870 x56)) x822) x514))) x296)))
(assert (= (and x7 x143) x295))
(assert (x75 x484))
(assert (x75 x983))
(assert (x75 x662))
(assert (x386 x268))
(assert (x75 x546))
(assert (x75 x284))
(assert (= x746 (and x490 x24)))
(assert (x75 x567))
(assert (x75 x367))
(assert (x75 x576))
(assert (x75 x911))
(assert (x75 x461))
(assert (x75 x988))
(assert (= x64 (and x856 (not x628))))
(assert (x75 x483))
(assert (= x308 (and x424 x332)))
(assert (x386 x950))
(assert (x75 x648))
(assert (x75 x216))
(assert (= x487 (and (not x811) x990)))
(assert (x386 x762))
(assert (x75 x602))
(assert (= (and (not x73) x895) x338))
(assert (= (and x628 x856) x17))
(assert (x75 x170))
(assert (= (and (not x500) x656) x913))
(assert (= x277 (and x1017 x214)))
(assert (x75 x9))
(assert (x75 x111))
(assert (x75 x999))
(assert (x75 x104))
(assert (x75 x762))
(assert (x75 x211))
(assert (x386 x648))
(assert (x75 x832))
(assert (x75 x374))
(assert (x764 x1005))
(assert (x75 x935))
(assert (x75 x45))
(assert (= (or x638 x542) x906))
(assert (= (x563 (- x568 x857)) 0))
(assert (x75 x287))
(assert (x75 x418))
(assert (= x711 (or x859 x853 x606 x70 x923 x540 x828 x446 x451 x48 x470 x777 x237 x335 x829 x17 x67 x2 x754 x337 x331 x417 x966 x967 x1004 x486 x15 x299 x463 x110 x708 x581 x974 x5)))
(assert (x75 x357))
(assert (= (x320 (+ (x522 (+ 196 x729)) (- (+ x72 (- 192 x841)) 196))) 0))
(assert (x75 x620))
(assert (x75 x870))
(assert (x75 x688))
(assert (= x327 (and (not x855) x107)))
(assert (= x572 (=> (= x156 (= x324 0)) (and (=> (and x156 (and (= x101 x264) (= x33 0))) x293) (=> (and (and (= x381 1) (= x1013 32) (= x150 (x445 1461501637330902918203684832716283019655932542975 x999)) (= x101 x357)) (not x156)) x159)))))
(assert (x75 x127))
(assert (= (and x58 x671) x144))
(assert (x75 x1018))
(assert (x75 x789))
(assert (x75 x113))
(assert (x75 x596))
(assert (x75 x215))
(assert (x75 x319))
(assert (x75 x910))
(assert (x75 x783))
(assert (x75 x505))
(assert (x75 x62))
(assert (= (x384 x998) 0))
(assert (= (=> (and (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x648) x683) (= x757 (x438 x440)) (= x648 (x522 (+ x885 31))) (= x932 (x522 (+ x937 32))) (= (> x757 0) x424) (= (x522 (+ x683 x940)) x410) (= (x812 (- x410 x937)) x737)) (and (=> (and x424 (= x524 (> x757 32))) (and (=> (and (not x524) (= 32 x46)) x403) (=> (and (= x543 (> x757 64)) x524) (and (=> (and (= 64 x46) (not x543)) x403) (=> (and (= x616 (> x757 96)) x543) (and (=> (and (not x616) (= 96 x46)) x403) (=> x616 x521))))))) (=> (and (not x424) (= 0 x46)) x403))) x607))
(assert (= 0 (x384 x568)))
(assert (= x360 (and x365 (not x27))))
(assert (x75 x212))
(assert (= x143 (or x830 x303 x836 x877 x893)))
(assert (= 0 (x384 x678)))
(assert (x75 x772))
(assert (x75 x900))
(assert (x75 x37))
(assert (x75 x496))
(assert (x75 x880))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- x847 196)))))
(assert (= (and x109 x391) x470))
(assert (= 0 (x320 (+ (- (+ x72 (- x678 x841)) 196) (x522 (+ x729 196))))))
(assert (= 0 (x320 (+ (- (+ (- x816 x841) x72) 196) (x522 (+ 196 x729))))))
(assert (x75 x33))
(assert (x75 x289))
(assert (= (x320 (+ (- (+ (- x568 x841) x72) 196) (x522 (+ x729 196)))) 0))
(assert (x75 x228))
(assert (= (and x886 x174) x918))
(assert (= (=> (and (and (not (= 0 x65)) (= x569 x449) (<= x594 1461501637330902918203684832716283019655932542975) (= x594 (x516 x444)) (not (or (> x875 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x875))))) (and (= x726 x357) (= false x767) (= x477 false))) x863) x920))
(assert (x75 x958))
(assert (= (or x679 x746) x990))
(assert (x75 x963))
(assert (x75 x998))
(assert (x75 x394))
(assert (x75 x350))
(assert (x75 x552))
(assert (x75 x894))
(assert (= x223 (and x868 x182)))
(assert (x75 x888))
(assert (= x677 (and (not x660) x695)))
(assert (= 0 (x157 (x945 x112 x326))))
(assert (= (x563 (- 160 x857)) 0))
(assert (x188 x1005))
(assert (x75 x499))
(assert (= (and x236 x693) x938))
(assert (= (and x814 x993) x589))
(assert (= (and (not x800) x378) x512))
(assert (= x5 (and x43 (not x114))))
(assert (= (x320 (+ (- (+ x72 (- 160 x841)) 196) (x522 (+ 196 x729)))) 0))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- x953 196)))))
(assert (x75 x323))
(assert (x75 x594))
(assert (= x148 (and x106 x169)))
(assert (= (and x297 x918) x417))
(assert (x75 x919))
(assert (x75 x449))
(assert (x75 x867))
(assert (x75 x125))
(assert (= x236 (and (not x845) x414)))
(assert (= (x384 x760) 0))
(assert (x75 x56))
(assert (= x240 (and x220 (not x557))))
(assert (= x895 (or x435 x259)))
(assert (x75 x453))
(assert (x724 x634))
(assert (x764 x950))
(assert (x75 x1014))
(assert (x75 x196))
(assert (x75 x351))
(assert (= x371 (and x706 x538)))
(assert (= x638 (and x532 x86)))
(assert (x75 x274))
(assert (= x331 (and x694 x12)))
(assert (= (x563 (- 256 x857)) 0))
(assert (x75 x452))
(assert (x75 x904))
(assert (x75 x925))
(assert (= x706 (and x147 (not x98))))
(assert (x75 x358))
(assert (x764 x939))
(assert (= (and x348 (not x876)) x695))
(assert (= x559 (and x742 (not x359))))
(assert (x75 x968))
(assert (x75 x398))
(assert (= 0 (x563 (- x47 x857))))
(assert (x75 x686))
(assert (x764 x314))
(assert (= (and x71 (not x642)) x799))
(assert (x75 x857))
(assert (= (x320 (+ (- (+ x72 (- 224 x841)) 196) (x522 (+ x729 196)))) 0))
(assert (= (and x548 x272) x562))
(assert (= 0 (x320 (+ (x522 (+ 196 x729)) 32))))
(assert (= (or x954 x144 x952 x364 x517) x796))
(assert (x75 x318))
(assert (x75 x584))
(assert (= x92 (and x376 x715)))
(assert (x75 x956))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- (+ (- x998 160) 196) 196)))))
(assert (= (=> (and (= x409 (not (> x482 128))) (= x195 (x522 (+ 96 x596))) (= x558 (x448 256))) (and x409 (=> (= 128 x948) x654))) x933))
(assert (= (and x878 (not x355)) x528))
(assert (x75 x770))
(assert (x75 x343))
(assert (= (or x710 x755) x106))
(assert (x75 x760))
(assert (x75 x795))
(assert (x75 x326))
(assert (= x491 (and x675 x899)))
(assert (= (x563 (- x653 x857)) 0))
(assert (= (and (not x671) x58) x954))
(assert (x75 x105))
(assert (x75 x238))
(assert (x75 x336))
(assert (= x884 (and x214 (not x1017))))
(assert (x386 x768))
(assert (x386 x123))
(assert (= (=> (and (or (and x500 (and (= x279 1) (> 4294967296 x125))) (and (= x279 x330) (not x500))) (and (= (x522 (+ x956 x183)) x831) (= x500 (> x330 0)) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x950) x956) (<= x900 1461501637330902918203684832716283019655932542975) (not (= 0 x627)) (= (x908 x183) x900) (= (x522 (+ 31 x585)) x950) (not (or (and (= true (<= x585 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x585)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x585))))) x431) x395))
(assert (x75 x905))
(assert (x75 x604))
(assert (x75 x729))
(assert (x724 x112))
(assert (= x989 (=> (and (= (= 0 x879) x169) (or (and (not x169) (and (= x443 x879) (= x211 x930))) (and x169 (and (= 0 x309) (= x211 x930) (= (x402 x551) x204) (= x879 x443) (< (+ x309 x915) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x915 x888) (= x897 x204) (= (x242 x112) x915))))) x753)))
(assert (= (and x603 x978) x979))
(assert (x75 x294))
(assert (= (or x84 x1009 x247 x647 x213) x898))
(assert (= x209 (and x523 (not x587))))
(assert (= x366 (and x906 x525)))
(assert (x386 x939))
(assert (x75 x726))
(assert (x75 x180))
(assert (x75 x659))
(assert (= 0 (x563 (- x929 x857))))
(assert (x75 x683))
(assert (x75 x61))
(assert (= x293 (=> (and (= x33 x381) (= x357 x264) (= x655 x1013)) x159)))
(assert (x75 x22))
(assert (x75 x513))
(assert (x75 x537))
(assert (= x848 (or x705 x739 x227 x232 x512)))
(assert (= x974 (and (not x890) x680)))
(assert (x75 x324))
(assert (x75 x657))
(assert (x75 x221))
(assert (x75 x939))
(assert (x75 x354))
(assert (= (x320 (+ (- (+ (- x678 160) 196) 196) (x522 (+ x729 196)))) 0))
(assert (x75 x510))
(assert (x75 x347))
(assert (x75 x860))
(assert (x75 x195))
(assert (= 0 (x563 (- 224 x857))))
(assert (x724 x551))
(assert (x75 x309))
(assert (= (and x523 x587) x878))
(assert (= x435 (and (not x63) x802)))
(assert (x386 x397))
(assert (x724 x999))
(assert (= x378 (and x566 x389)))
(assert (x75 x901))
(assert (x75 x310))
(assert (= (=> (and (= x527 (x353 x783)) (= x497 (not (> x198 4))) (= x623 (x522 (+ x670 32))) (>= 1461501637330902918203684832716283019655932542975 x527)) (and x497 (=> (= x623 x747) x703))) x23))
(assert (x188 x4))
(assert (x75 x748))
(assert (x75 x635))
(assert (= 0 (x563 (- x816 x857))))
(assert (x75 x862))
(assert (= (=> (= (not (< 1 x769)) x30) (and x600 x30)) x257))
(assert (= (x320 (+ (x522 (+ x729 196)) (- (+ (- 128 x841) x72) 196))) 0))
(assert (x75 x534))
(assert (= x165 (and x684 x677)))
(assert (x75 x20))
(assert (x764 x123))
(assert (= (=> (and (and (= x111 x97) (= x430 x317) (= x401 (= x430 x97))) (and (not (< x949 3084411429)) (<= 0 x726) (> x49 0) (not x477) (= 3705713892 x949) (not (> 2220280665 x949)) (= x317 x726) (<= x726 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x949 3084411429)) (not (= x949 3572374928)) (= x49 (x85 x112)) (not x767))) x401) x863))
(assert (x764 x216))
(assert (x764 x4))
(assert (x75 x655))
(assert (x75 x837))
(assert (= x335 (and x382 x327)))
(assert (= (and x676 (not x922)) x739))
(assert (x75 x91))
(assert (= (or x322 x818) x332))
(assert (x75 x226))
(assert (x75 x815))
(assert (x75 x77))
(assert (x75 x588))
(assert (x75 x831))
(assert (= (or (and x987 (not x315)) x709) x738))
(assert (x75 x460))
(assert (= x592 (and x220 x557)))
(assert (= (and x716 x803) x16))
(assert (x386 x350))
(assert (x75 x204))
(assert (x75 x842))
(assert (x75 x701))
(assert (x75 x381))
(assert (= x2 (and x156 x738)))
(assert (x75 x955))
(assert (= (or x740 (and (not x252) x32)) x71))
(assert (x75 x808))
(assert (x75 x410))
(assert (x75 x390))
(assert (x75 x844))
(assert (x75 x476))
(assert (x764 x762))
(assert (x75 x851))
(assert (x75 x723))
(assert (= (and (not x57) x400) x214))
(assert (x75 x946))
(assert (x188 x999))
(assert (x75 x93))
(assert (not x439))
(assert (= x96 (and x50 (not x388))))
(assert (x724 x1005))
(assert (= (or x590 x799) x387))
(assert (x75 x443))
(assert (x75 x465))
(assert (x75 x839))
(assert (x75 x585))
(assert (= (and (not x644) x873) x346))
(assert (x75 x321))
(assert (= 0 (x320 224)))
(assert (= (and (not x684) x677) x217))
(assert (x75 x239))
(assert (= (and x64 (not x115)) x43))
(assert (x75 x960))
(assert (= x553 (=> (and (or (and (= x570 x37) (not x24)) (and x24 (and (< x340 4294967296) (= 1 x570)))) (and (<= x449 1461501637330902918203684832716283019655932542975) (= x200 (x522 (+ x927 x729))) (not (= 0 x381)) (not (or (> x1013 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x1013) (= (<= x1013 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x939) x927) (= (x522 (+ 31 x1013)) x939) (= x24 (> x37 0)) (= x449 (x271 x729)))) x298)))
(assert (= x836 (and x283 x975)))
(assert (x75 x372))
(assert (= 0 (x563 (- x998 x857))))
(assert (= (and x973 x218) x941))
(assert (x75 x1))
(assert (= x647 (and x308 (not x524))))
(assert (x75 x961))
(assert (x386 x314))
(assert (= x540 (and (not x728) x87)))
(assert (x75 x312))
(assert (x75 x575))
(assert (= x439 (=> (and (and (or x185 x970) (= (= x904 0) x970) (= x1014 x111) (= x98 (> x611 x289)) (= (x3 x904) x289) (> 1461501637330902918203684832716283019655932542976 x904) (= x185 (> x904 0))) (and (>= 1461501637330902918203684832716283019655932542975 x513) (= x901 (x3 x112)) (< 0 x634) (>= x567 0) (>= 1461501637330902918203684832716283019655932542975 x567) (= x25 5) (> x689 0) (not (= 3084411429 x102)) (>= x730 0) (>= 1461501637330902918203684832716283019655932542975 x476) (= x59 (> (x85 x112) 0)) (<= x983 255) (<= 0 x925) (= false x178) (<= x212 255) (<= x101 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x408) (<= x460 255) (>= x1002 0) (>= x935 0) (<= 0 x513) (<= 0 x698) (not (= x102 3572374928)) (>= 1461501637330902918203684832716283019655932542975 x112) (>= x447 0) (= x14 1262878978) (<= 0 x408) (>= 255 x935) (not (> 2220280665 x102)) (>= 1461501637330902918203684832716283019655932542975 x776) (>= 1461501637330902918203684832716283019655932542975 x634) (<= 0 x806) (not (< x102 3084411429)) (>= 1461501637330902918203684832716283019655932542975 x450) (>= x765 0) (= x38 x499) (>= 1461501637330902918203684832716283019655932542975 x576) (<= 0 x54) (<= x732 1461501637330902918203684832716283019655932542975) x826 (>= x336 0) (<= 0 x450) (>= 1461501637330902918203684832716283019655932542975 x674) (<= x447 255) (>= 255 x505) (<= 0 x212) (>= x325 0) (>= x374 0) (not (= x112 x634)) (<= x698 1461501637330902918203684832716283019655932542975) (= x35 false) (>= x186 0) (>= x776 0) (>= 1461501637330902918203684832716283019655932542975 x336) (<= 0 x505) x59 (<= x997 255) (<= x325 1461501637330902918203684832716283019655932542975) (= x405 false) (<= 0 x640) (>= x460 0) (= 3705713892 x102) (<= x730 1461501637330902918203684832716283019655932542975) (<= 0 x732) (= x826 (> (x85 x634) 0)) (>= 1461501637330902918203684832716283019655932542975 x1002) (<= 0 x38) (<= x806 1461501637330902918203684832716283019655932542975) (<= 0 x576) (>= x997 0) (<= x374 1461501637330902918203684832716283019655932542975) (= x1014 x101) (>= x983 0) (>= x674 0) (= x921 true) (<= x925 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x54) (>= x101 0) (= x689 (x85 x112)) (<= x488 1461501637330902918203684832716283019655932542975) (= (x3 x634) x640) (>= 79228162514264337593543950335 x186) (<= 0 x488) (< 0 x112) (= x904 x54) (>= x476 0) (<= x38 1461501637330902918203684832716283019655932542975) (>= x901 0) (<= x765 255))) (and (=> (and (not x98) (and (not (< x630 x95)) (= (x522 (+ 31 x850)) x768) (= x535 (x522 (+ x541 x304))) (= (x812 (- x630 4)) x113) (= (> x729 18446744073709551615) x912) (= (x522 (+ 31 x785)) x639) (= x418 x313) (= x427 0) (not (< 18446744073709551615 x733)) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x630) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x872)) (and (= (<= x872 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x630 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x630 x872))) (= x104 (x522 (+ 31 x733))) (= x462 (< 18446744073709551615 x575)) (= x503 (x522 (+ 4 x902))) (= (x522 (+ x697 x611)) x239) (= (ite x137 1 0) x427) (= x894 (x522 (+ 160 x541))) (= x137 (or x912 x887)) (= x198 (x353 x785)) (= x872 (x522 (+ x503 31))) (= x850 (x522 (+ x250 32))) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x630) (> x639 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x630 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x639 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x639 x630))) (= x398 (x3 x904)) (= (x522 (+ 32 x662)) x870) (= (x353 x457) x69) (= (x522 (+ x456 31)) x762) (= x904 x844) (= x536 (x522 (+ x729 4))) (= x304 (x522 (+ x221 32))) (= (> 128 x575) x609) (= x343 (x522 (+ 32 x575))) (= (x522 (+ x963 4)) x785) (> x351 0) (>= x228 0) (not (> x93 18446744073709551615)) (= (x522 (+ 128 x537)) x575) (= x604 (x522 (+ x701 x992))) (not (> x792 18446744073709551615)) (= 1262878978 x177) (= x578 (x522 (+ x852 x287))) (= x287 (mod (* 32 x69) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x522 (+ x221 31)) x584) (= (x353 x503) x733) (not (> x69 18446744073709551615)) (= x632 (or x609 x462)) (and (= (<= x630 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x630 163)) (not (> 1245659826 x177)) (not (< x630 4)) (= x701 (mod (* 32 x198) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x351 (x85 x112)) (= x635 x611) (not (> x541 18446744073709551615)) (or (and (> x630 x100) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x100) (<= x630 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x100 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x630))) (= x478 (- x398 x611)) (= x265 x902) (not (= x177 1245659826)) (not (< x630 x604)) (= x672 (x522 (+ x733 x343))) (= (x522 (+ 31 x457)) x100) (= x250 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x104)) (not (> x198 18446744073709551615)) (>= 1461501637330902918203684832716283019655932542975 x228) (not (< 18446744073709551615 x265)) (not (> x418 18446744073709551615)) (= (x721 128) x56) (<= 0 x651) (not (> x535 x630)) (= (x353 x221) x541) (= x712 0) (= (x522 (+ x321 4)) x457) (= x319 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x314)) (= x712 (ite x632 1 0)) (= x93 x963) (= x78 x549) (= x310 x133) (= x314 (x522 (+ x541 31))) (= (x522 (+ x957 x733)) x95) (= (> x575 x729) x887) (<= x687 1461501637330902918203684832716283019655932542975) (= x221 (x522 (+ 4 x313))) (>= x687 0) (< x177 2220280665) (not (< x630 x578)) (= (x522 (+ 32 x319)) x456) (= (x522 (+ 32 x503)) x957) (= x992 (x522 (+ x785 32))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x635 x697)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x113) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x113)) (< x113 160)))) (= x651 x904) (= x977 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x768)) (= x852 (x522 (+ x457 32))) (= x78 x687) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x762) x537) (= x662 (x522 (+ x536 160))) (= x729 (x522 (+ x977 x575))) (= x310 x363) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x630) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x584)) (and (< x584 x630) (= (<= x630 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x584)))) (= x792 x321) (= x538 (> x56 0)) (<= x651 1461501637330902918203684832716283019655932542975) (= x697 (x492 x112)))) (and (=> (and (not x538) (= x960 0)) x422) (=> (and x538 (and (= x688 x870) (= x636 (x369 160)) (= (> x56 32) x849))) (and (=> (and (not x849) (= x960 32)) x422) (=> (and x849 (and (= x880 (x459 192)) (= (x522 (+ 32 x870)) x18) (= (> x56 64) x419))) (and (=> (and (= 64 x960) (not x419)) x422) (=> (and (and (= x1018 (x522 (+ x870 64))) (= (x116 224) x484) (= (< 96 x56) x671)) x419) (and (=> x671 x805) (=> (and (= 96 x960) (not x671)) x422))))))))) (=> (and x98 (and (= true x767) (= x101 x726) (= x477 false))) x863)))))
(assert (= x333 (and x796 (not x514))))
(assert (x75 x735))
(assert (= x787 (=> (and (or (and (= (x522 (+ x270 x621)) x781) x182) (not x182)) (= (< x270 x352) x182)) x823)))
(assert (x75 x224))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- (+ (- x653 160) 196) 196)))))
(assert (x75 x276))
(assert (= (and (not x7) x143) x413))
(assert (= (and (not x682) x1001) x817))
(assert (x75 x280))
(assert (= x365 (and x74 x292)))
(assert (x75 x560))
(assert (= x830 (and (not x283) x975)))
(assert (x75 x788))
(assert (x75 x198))
(assert (x75 x475))
(assert (= x523 (or x333 x931)))
(assert (x75 x65))
(assert (= (=> (and (= x7 (< x851 x280)) (or (not x7) (and x7 (= (x522 (+ x748 x851)) x593)))) x555) x744))
(assert (x75 x407))
(assert (x75 x713))
(assert (x75 x457))
(assert (= (or x433 x913) x81))
(assert (x75 x108))
(assert (x75 x191))
(assert (x764 1461501637330902918203684832716283019655932542975))
(assert (= x1004 (and (not x218) x973)))
(assert (= x11 (and x725 (not x375))))
(assert (x764 x268))
(assert (= x740 (and x32 x252)))
(assert (x75 x619))
(assert (x75 x146))
(assert (x75 x568))
(assert (x75 x42))
(assert (x75 x864))
(assert (x75 x54))
(assert (x75 x325))
(assert (x75 x535))
(assert (x75 x776))
(assert (= (=> (and (= (= 0 x146) x120) (= (x522 (+ 32 x882)) x620) (= x407 (x522 (+ x323 32))) (= x146 (x85 x394)) (= x323 (x522 (+ 32 x312))) (= (x522 (+ 32 x407)) x882)) (and (=> (and x120 (and (= x101 x264) (= x33 0))) x293) (=> (and (and (or (not x716) (and x716 (and (= (= (x964 x394) x108) x692) x692 x379 (< x531 4294967296) (= x379 (<= x943 (x964 x112))) (= x108 (x889 x394)) (= (x889 x112) x943)))) (= x716 (> x734 0))) (not x120)) x485))) x555))
(assert (x75 x932))
(assert (= 0 (x320 (+ (- (+ x72 (- x653 x841)) 196) (x522 (+ x729 196))))))
(assert (x75 x1000))
(assert (x75 x102))
(assert (x75 x608))
(assert (x75 x733))
(assert (x75 x304))
(assert (x75 x633))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- (+ (- x568 160) 196) 196)))))
(assert (x75 x436))
(assert (x75 x464))
(assert (x75 x334))
(assert (x75 x241))
(assert (= x147 true))
(assert (x75 x190))
(assert (x75 x396))
(assert (x75 x927))
(assert (x75 x915))
(assert (= (x563 (- 128 x857)) 0))
(assert (= (and (not x297) x918) x467))
(assert (= x162 (=> (= x79 (> x769 0)) (and (=> (and x79 (= x909 (> x769 0))) (and (=> (and (and (= 0 x33) (= x264 x101)) (not x909)) x293) (=> (and (and (= x94 (x445 1461501637330902918203684832716283019655932542975 x1005)) (= (= x94 x1005) x896) (= (x234 x6) x1005) (= x6 x633)) x909) (and (=> (and (not x896) (and (= 0 x33) (= x101 x264))) x293) (=> (and (= x780 (< 0 x529)) x896) (and (=> (and x780 (and (= x861 (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x815) (<= x20 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x20 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x815 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x20 x815)))) (= (x234 x953) x815) (= (x812 (- x362 x602)) x714) (= x20 (x812 (- x714 31))) (= x953 x602))) (and (=> (and x861 (and (= (x522 (+ x602 x815)) x571) (= x876 (< 18446744073709551615 x1010)) (= x1010 (x234 x571)))) (and (=> (and (and (= x101 x264) (= x33 0)) x876) x293) (=> (and (not x876) (and (= x660 (or (and (> x598 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x341)) (and (> x341 x598) (= (<= x341 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x598))))) (= x341 (x522 (+ 32 x571))) (= x598 (x812 (- x362 x1010))))) (and (=> (and (and (= 0 x33) (= x101 x264)) x660) x293) (=> (and (not x660) (and (or (not x684) (and x684 (and (= x840 (<= x775 (x480 x112))) x840 x383 (= x775 (x117 x112)) (> 4294967296 x588) (= x383 (= x126 (x480 x1005))) (= x126 (x117 x1005))))) (= (< 0 x474) x684))) x502))))) (=> (and (not x861) (and (= x33 0) (= x101 x264))) x293))) (=> (and (and (= 0 x33) (= x101 x264)) (not x780)) x293))))))) (=> (not x79) x600)))))
(assert (= x856 (and x874 x467)))
(assert (x386 x288))
(assert (= x603 (or x995 x209 x528 x420 x346)))
(assert (= (and x990 x811) x794))
(assert (x75 x270))
(assert (x75 x119))
(assert (x75 x330))
(assert (= (x320 160) 0))
(assert (x75 x302))
(assert (= (x320 x136) 0))
(assert (= x380 (and x339 (not x820))))
(assert (x75 x666))
(assert (= x237 (and x695 x660)))
(assert (= x86 (or x51 x11)))
(assert (x75 x150))
(assert (= (=> (= (= x734 0) x845) (and (=> (and (and (= x693 (< 0 x270)) (= x866 (x522 (+ 32 x440))) (= x860 (x522 (+ x440 32))) (= x270 (x586 x816)) (= (x522 (+ 3 x866)) x621)) (not x845)) (and (=> (and (not x693) (= x352 0)) x787) (=> (and x693 (and (= (x586 x678) x807) (= (< 32 x270) x260) (= x621 x988) (= x678 x841))) (and (=> (and x260 (and (= x127 (x530 x47)) (= x47 (x522 (+ x841 32))) (= (x522 (+ x621 32)) x519) (= (< 64 x270) x751))) (and (=> (and (= x352 64) (not x751)) x787) (=> (and (and (= x903 (x509 x568)) (= (x522 (+ x621 64)) x142) (= (x522 (+ 64 x841)) x568) (= x557 (< 96 x270))) x751) (and (=> (and (not x557) (= x352 96)) x787) (=> x557 x426))))) (=> (and (not x260) (= x352 32)) x787))))) (=> (and x845 (and (= 0 x33) (= x264 x101))) x293))) x916))
(assert (= (and (not x286) x387) x777))
(assert (= x539 (and (not x41) x972)))
(assert (= (or x827 x766 x711) x406))
(assert (x75 x843))
(assert (x75 x785))
(assert (= (and x57 x400) x581))
(assert (x75 x189))
(assert (x75 x793))
(assert (x75 x903))
(assert (x75 x1012))
(assert (x75 x714))
(assert (= x802 (or x559 x360 x233 x664 x19)))
(assert (= (=> (and (= x63 (> x69 0)) (= (x522 (+ x747 32)) x947) (= (x522 (+ x947 x736)) x436) (= x735 (x812 (- x747 x536))) (= x193 (x522 (+ x864 32))) (= x736 (mod (* 32 x69) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (=> (and (= x436 x226) (not x63)) x1007) (=> x63 x425))) x703))
(assert (= x654 (=> (and (= (> x948 x482) x272) (or (and (= x141 (x522 (+ x596 x482))) x272) (not x272))) x601)))
(assert (x75 x153))
(assert (= (and x442 (not x994)) x12))
(assert (= x213 (and x613 (not x543))))
(assert (= (=> (and (or (not x252) x252) (= (= 0 x474) x252)) x858) x502))
(assert (= (x384 160) 0))
(assert (x75 x454))
(assert (= x612 (and (not x229) x479)))
(assert (= (and (not x727) x759) x877))
(assert (x75 x937))
(assert (x75 x200))
(assert (= (x320 (+ (- x571 196) (x522 (+ x729 196)))) 0))
(assert (x75 x797))
(assert (x75 x696))
(assert (x764 x318))
(assert (= (and x845 x414) x859))
(assert (x75 x621))
(assert (= (x320 (+ (x522 (+ 196 x729)) (- (+ (- x605 160) 196) 196))) 0))
(assert (= (x320 x839) 0))
(assert (x75 x430))
(assert (x75 x14))
(assert (x75 x929))
(assert (x75 x775))
(assert (x386 x955))
(assert (= (and x260 x938) x951))
(assert (x75 x250))
(assert (= (and (not x993) x814) x251))
(assert (= (and x682 x1001) x972))
(assert (= x432 (and x387 x286)))
(assert (= (x320 (x522 (+ x729 196))) 0))
(assert (x386 x461))
(assert (x75 x649))
(assert (= (and (not x428) x366) x300))
(assert (= (and x938 (not x260)) x261))
(assert (= (x563 (- x678 x857)) 0))
(assert (= x708 (and (not x780) x262)))
(assert (x75 x194))
(assert (= x442 (and x704 x380)))
(assert (x75 x769))
(assert (x75 x570))
(assert (x75 x288))
(assert (x75 x498))
(assert (x75 x765))
(assert (x75 x361))
(assert (x75 x810))
(assert (= x966 (and x339 x820)))
(assert (= (=> (and (or (not x892) (and x892 (= (x522 (+ x940 x885)) x254))) (= (> x39 x885) x892)) x607) x399))
(assert (= x613 (and x524 x308)))
(assert (= x322 (and (not x892) x848)))
(assert (x75 x634))
(assert (x75 x471))
(assert (x75 x841))
(assert (x75 x88))
(assert (x75 x580))
(assert (= x766 (and x738 (not x156))))
(assert (x75 x167))
(assert (x75 x531))
(assert (x75 x948))
(assert (= (and x896 x556) x262))
(assert (x75 x934))
(assert (x75 x340))
(assert (x75 x618))
(assert (= (x320 (+ (- (+ (- 256 x841) x72) 196) (x522 (+ 196 x729)))) 0))
(assert (= (and (not x140) x96) x87))
(assert (x75 x46))
(assert (= (and x300 (not x152)) x52))
(assert (= x556 (and x909 x574)))
(assert (x75 x503))
(assert (= x715 (or x1015 x16)))
(assert (= 0 (x320 (+ (x522 (+ x729 196)) (- (+ x72 (- x47 x841)) 196)))))
(assert (= (or x251 x589) x881))
(assert (= (and (not x909) x574) x606))
(assert (x75 x72))
(assert (= (and (not x424) x332) x247))
(assert (x75 x672))
(check-sat)
(exit)