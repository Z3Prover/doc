(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x689 () Bool)
(declare-fun x568 () Bool)
(declare-fun x578 () Bool)
(declare-fun x166 () Int)
(declare-fun x638 () Int)
(declare-fun x93 () Int)
(declare-fun x712 () Int)
(declare-fun x100 () Bool)
(declare-fun x142 () Bool)
(declare-fun x191 () Bool)
(declare-fun x364 () Int)
(declare-fun x473 (Int) Int)
(declare-fun x17 () Bool)
(declare-fun x392 () Int)
(declare-fun x105 () Int)
(declare-fun x492 () Int)
(declare-fun x612 () Int)
(declare-fun x856 () Int)
(declare-fun x451 () Int)
(declare-fun x778 (Int) Int)
(declare-fun x412 () Int)
(declare-fun x25 () Bool)
(declare-fun x198 () Bool)
(declare-fun x744 () Int)
(declare-fun x799 () Bool)
(declare-fun x443 () Int)
(declare-fun x363 () Bool)
(declare-fun x692 () Int)
(declare-fun x302 () Bool)
(declare-fun x813 () Bool)
(declare-fun x498 () Int)
(declare-fun x345 () Int)
(declare-fun x701 () Bool)
(declare-fun x830 () Bool)
(declare-fun x821 () Int)
(declare-fun x247 () Bool)
(declare-fun x254 () Int)
(declare-fun x743 () Int)
(declare-fun x52 () Bool)
(declare-fun x753 () Int)
(declare-fun x309 () Int)
(declare-fun x450 () Int)
(declare-fun x72 () Bool)
(declare-fun x411 () Int)
(declare-fun x7 () Int)
(declare-fun x858 () Bool)
(declare-fun x153 () Int)
(declare-fun x788 () Bool)
(declare-fun x560 () Int)
(declare-fun x694 () Bool)
(declare-fun x270 () Int)
(declare-fun x464 () Int)
(declare-fun x854 () Bool)
(declare-fun x79 () Int)
(declare-fun x622 () Int)
(declare-fun x559 () Int)
(declare-fun x874 () Bool)
(declare-fun x131 () Bool)
(declare-fun x861 () Bool)
(declare-fun x705 () Int)
(declare-fun x64 () Bool)
(declare-fun x256 (Int) Int)
(declare-fun x71 () Int)
(declare-fun x467 () Bool)
(declare-fun x241 () Int)
(declare-fun x512 (Int) Int)
(declare-fun x616 () Int)
(declare-fun x431 () Int)
(declare-fun x224 () Int)
(declare-fun x341 () Bool)
(declare-fun x327 () Int)
(declare-fun x21 () Bool)
(declare-fun x301 () Int)
(declare-fun x791 () Int)
(declare-fun x337 () Bool)
(declare-fun x608 () Bool)
(declare-fun x432 () Int)
(declare-fun x401 () Int)
(declare-fun x332 () Bool)
(declare-fun x697 () Int)
(declare-fun x786 () Bool)
(declare-fun x376 () Int)
(declare-fun x497 () Bool)
(declare-fun x805 () Int)
(declare-fun x394 () Int)
(declare-fun x580 () Bool)
(declare-fun x29 () Int)
(declare-fun x855 () Int)
(declare-fun x218 () Bool)
(declare-fun x535 () Int)
(declare-fun x185 () Int)
(declare-fun x334 () Int)
(declare-fun x605 () Bool)
(declare-fun x293 () Int)
(declare-fun x625 () Int)
(declare-fun x592 () Int)
(declare-fun x447 () Bool)
(declare-fun x255 () Bool)
(declare-fun x200 () Int)
(declare-fun x115 () Bool)
(declare-fun x867 () Int)
(declare-fun x532 () Int)
(declare-fun x486 () Bool)
(declare-fun x248 () Bool)
(declare-fun x161 () Int)
(declare-fun x536 () Bool)
(declare-fun x290 () Int)
(declare-fun x603 () Int)
(declare-fun x189 () Bool)
(declare-fun x756 () Int)
(declare-fun x181 () Int)
(declare-fun x649 () Bool)
(declare-fun x30 () Bool)
(declare-fun x633 () Int)
(declare-fun x491 () Int)
(declare-fun x14 () Bool)
(declare-fun x518 () Int)
(declare-fun x338 () Int)
(declare-fun x180 () Int)
(declare-fun x220 () Int)
(declare-fun x618 () Int)
(declare-fun x632 () Bool)
(declare-fun x558 () Int)
(declare-fun x88 () Int)
(declare-fun x365 () Int)
(declare-fun x783 () Int)
(declare-fun x123 () Int)
(declare-fun x607 () Int)
(declare-fun x172 () Int)
(declare-fun x408 () Int)
(declare-fun x277 () Int)
(declare-fun x168 (Int) Int)
(declare-fun x201 () Bool)
(declare-fun x784 () Bool)
(declare-fun x727 () Int)
(declare-fun x528 () Bool)
(declare-fun x284 () Bool)
(declare-fun x111 () Bool)
(declare-fun x835 () Bool)
(declare-fun x767 () Bool)
(declare-fun x157 () Int)
(declare-fun x439 () Bool)
(declare-fun x510 () Int)
(declare-fun x389 () Int)
(declare-fun x13 () Int)
(declare-fun x238 () Int)
(declare-fun x197 () Int)
(declare-fun x794 () Int)
(declare-fun x310 (Int) Int)
(declare-fun x377 (Int) Int)
(declare-fun x500 () Int)
(declare-fun x38 () Bool)
(declare-fun x175 () Bool)
(declare-fun x274 () Int)
(declare-fun x124 () Int)
(declare-fun x58 () Int)
(declare-fun x676 () Int)
(declare-fun x836 () Bool)
(declare-fun x584 () Int)
(declare-fun x736 () Int)
(declare-fun x742 () Int)
(declare-fun x196 () Bool)
(declare-fun x663 () Int)
(declare-fun x857 () Int)
(declare-fun x233 () Int)
(declare-fun x642 () Int)
(declare-fun x182 () Int)
(declare-fun x644 () Int)
(declare-fun x132 () Int)
(declare-fun x56 () Int)
(declare-fun x839 () Bool)
(declare-fun x683 () Bool)
(declare-fun x468 (Int) Int)
(declare-fun x61 () Int)
(declare-fun x169 () Int)
(declare-fun x171 () Bool)
(declare-fun x457 () Int)
(declare-fun x718 () Bool)
(declare-fun x470 () Int)
(declare-fun x152 () Int)
(declare-fun x298 () Bool)
(declare-fun x657 () Int)
(declare-fun x545 () Int)
(declare-fun x252 () Int)
(declare-fun x423 () Int)
(declare-fun x90 () Bool)
(declare-fun x677 () Int)
(declare-fun x2 () Bool)
(declare-fun x780 () Bool)
(declare-fun x682 () Bool)
(declare-fun x801 () Int)
(declare-fun x18 () Int)
(declare-fun x347 () Bool)
(declare-fun x517 () Bool)
(declare-fun x589 () Int)
(declare-fun x628 () Bool)
(declare-fun x333 () Int)
(declare-fun x544 () Int)
(declare-fun x555 () Int)
(declare-fun x276 () Int)
(declare-fun x348 () Int)
(declare-fun x480 () Bool)
(declare-fun x10 () Int)
(declare-fun x145 () Int)
(declare-fun x561 () Bool)
(declare-fun x318 () Int)
(declare-fun x757 () Bool)
(declare-fun x320 () Int)
(declare-fun x54 () Int)
(declare-fun x772 () Int)
(declare-fun x239 () Bool)
(declare-fun x737 () Bool)
(declare-fun x698 () Int)
(declare-fun x370 () Int)
(declare-fun x331 () Bool)
(declare-fun x533 (Int) Int)
(declare-fun x77 () Bool)
(declare-fun x711 () Bool)
(declare-fun x795 () Bool)
(declare-fun x575 () Bool)
(declare-fun x796 () Bool)
(declare-fun x353 () Bool)
(declare-fun x610 () Int)
(declare-fun x46 () Bool)
(declare-fun x806 () Int)
(declare-fun x846 () Bool)
(declare-fun x709 () Int)
(declare-fun x340 () Int)
(declare-fun x226 () Int)
(declare-fun x868 () Int)
(declare-fun x590 () Bool)
(declare-fun x817 () Bool)
(declare-fun x357 () Bool)
(declare-fun x222 () Int)
(declare-fun x688 () Bool)
(declare-fun x139 () Int)
(declare-fun x745 () Bool)
(declare-fun x542 () Int)
(declare-fun x321 () Bool)
(declare-fun x31 () Bool)
(declare-fun x488 () Bool)
(declare-fun x637 () Int)
(declare-fun x553 () Int)
(declare-fun x623 () Bool)
(declare-fun x406 () Int)
(declare-fun x223 (Int Int) Int)
(declare-fun x660 () Int)
(declare-fun x864 () Int)
(declare-fun x601 () Int)
(declare-fun x246 () Bool)
(declare-fun x814 () Int)
(declare-fun x215 () Bool)
(declare-fun x530 (Int Int) Int)
(declare-fun x86 () Bool)
(declare-fun x438 () Bool)
(declare-fun x286 () Int)
(declare-fun x681 () Int)
(declare-fun x436 (Int) Int)
(declare-fun x133 () Int)
(declare-fun x163 () Int)
(declare-fun x481 () Int)
(declare-fun x219 () Bool)
(declare-fun x45 () Bool)
(declare-fun x809 () Bool)
(declare-fun x138 () Bool)
(declare-fun x673 () Int)
(declare-fun x202 () Int)
(declare-fun x140 () Bool)
(declare-fun x702 () Int)
(declare-fun x303 () Int)
(declare-fun x773 () Int)
(declare-fun x137 () Int)
(declare-fun x665 () Int)
(declare-fun x738 () Bool)
(declare-fun x282 () Int)
(declare-fun x210 () Int)
(declare-fun x483 () Bool)
(declare-fun x264 () Int)
(declare-fun x534 () Bool)
(declare-fun x136 () Int)
(declare-fun x495 () Int)
(declare-fun x873 () Int)
(declare-fun x800 () Bool)
(declare-fun x776 () Bool)
(declare-fun x643 () Bool)
(declare-fun x595 () Int)
(declare-fun x777 () Int)
(declare-fun x306 () Int)
(declare-fun x797 () Bool)
(declare-fun x602 () Int)
(declare-fun x609 () Bool)
(declare-fun x489 () Int)
(declare-fun x524 () Int)
(declare-fun x125 () Int)
(declare-fun x720 (Int) Int)
(declare-fun x159 () Int)
(declare-fun x713 () Int)
(declare-fun x78 () Int)
(declare-fun x764 () Bool)
(declare-fun x5 () Bool)
(declare-fun x624 () Bool)
(declare-fun x206 () Bool)
(declare-fun x128 () Bool)
(declare-fun x469 () Int)
(declare-fun x28 () Bool)
(declare-fun x798 () Int)
(declare-fun x8 () Int)
(declare-fun x521 () Bool)
(declare-fun x766 () Int)
(declare-fun x427 () Int)
(declare-fun x672 (Int) Int)
(declare-fun x227 () Int)
(declare-fun x740 () Int)
(declare-fun x749 () Int)
(declare-fun x819 () Int)
(declare-fun x96 () Int)
(declare-fun x454 () Bool)
(declare-fun x249 () Int)
(declare-fun x113 () Int)
(declare-fun x41 () Bool)
(declare-fun x234 () Int)
(declare-fun x825 () Bool)
(declare-fun x768 () Bool)
(declare-fun x505 () Int)
(declare-fun x731 () Bool)
(declare-fun x60 () Int)
(declare-fun x787 () Int)
(declare-fun x827 () Int)
(declare-fun x205 () Int)
(declare-fun x396 () Int)
(declare-fun x287 () Bool)
(declare-fun x294 () Bool)
(declare-fun x627 (Int) Int)
(declare-fun x587 () Int)
(declare-fun x119 () Bool)
(declare-fun x739 () Int)
(declare-fun x11 () Int)
(declare-fun x569 (Int) Int)
(declare-fun x209 () Int)
(declare-fun x831 () Int)
(declare-fun x755 () Bool)
(declare-fun x199 () Bool)
(declare-fun x810 () Int)
(declare-fun x92 () Int)
(declare-fun x437 () Int)
(declare-fun x16 () Int)
(declare-fun x733 () Int)
(declare-fun x221 () Int)
(declare-fun x416 () Int)
(declare-fun x183 () Int)
(declare-fun x465 () Bool)
(declare-fun x613 () Int)
(declare-fun x597 () Bool)
(declare-fun x257 () Int)
(declare-fun x527 () Bool)
(declare-fun x866 () Bool)
(declare-fun x75 () Int)
(declare-fun x816 () Int)
(declare-fun x184 () Int)
(declare-fun x366 () Bool)
(declare-fun x342 () Int)
(declare-fun x574 () Int)
(declare-fun x160 () Int)
(declare-fun x82 () Int)
(declare-fun x717 () Int)
(declare-fun x350 () Int)
(declare-fun x842 () Int)
(declare-fun x853 () Int)
(declare-fun x714 () Int)
(declare-fun x504 () Bool)
(declare-fun x728 () Int)
(declare-fun x730 () Int)
(declare-fun x195 () Int)
(declare-fun x275 () Int)
(declare-fun x230 () Int)
(declare-fun x232 () Bool)
(declare-fun x668 () Int)
(declare-fun x859 () Int)
(declare-fun x146 () Int)
(declare-fun x639 () Int)
(declare-fun x675 () Int)
(declare-fun x19 () Int)
(declare-fun x564 () Bool)
(declare-fun x630 () Bool)
(declare-fun x173 () Bool)
(declare-fun x775 (Int) Int)
(declare-fun x170 () Int)
(declare-fun x421 () Bool)
(declare-fun x225 () Int)
(declare-fun x704 (Int) Int)
(declare-fun x165 () Int)
(declare-fun x379 (Int) Int)
(declare-fun x719 () Int)
(declare-fun x305 () Bool)
(declare-fun x229 () Int)
(declare-fun x849 () Int)
(declare-fun x297 () Int)
(declare-fun x696 () Int)
(declare-fun x67 () Int)
(declare-fun x49 () Int)
(declare-fun x606 () Int)
(declare-fun x129 () Bool)
(declare-fun x781 () Bool)
(declare-fun x679 () Int)
(declare-fun x358 () Int)
(declare-fun x400 () Int)
(declare-fun x311 () Int)
(declare-fun x460 (Int) Int)
(declare-fun x591 () Int)
(declare-fun x242 () Bool)
(declare-fun x585 () Int)
(declare-fun x117 () Int)
(declare-fun x748 () Bool)
(declare-fun x852 () Bool)
(declare-fun x114 () Int)
(declare-fun x147 () Int)
(declare-fun x213 () Int)
(declare-fun x850 () Int)
(declare-fun x456 (Int Int) Int)
(declare-fun x474 () Bool)
(declare-fun x211 () Int)
(declare-fun x263 () Bool)
(declare-fun x236 () Bool)
(declare-fun x508 () Int)
(declare-fun x251 () Int)
(declare-fun x716 () Int)
(declare-fun x130 () Int)
(declare-fun x526 () Bool)
(declare-fun x811 () Bool)
(declare-fun x566 () Int)
(declare-fun x540 () Int)
(declare-fun x424 () Int)
(declare-fun x107 () Int)
(declare-fun x354 () Int)
(declare-fun x761 () Int)
(declare-fun x371 () Int)
(declare-fun x97 () Int)
(declare-fun x758 () Int)
(declare-fun x685 (Int) Int)
(declare-fun x747 () Int)
(declare-fun x62 () Bool)
(declare-fun x174 () Int)
(declare-fun x295 () Bool)
(declare-fun x3 () Bool)
(declare-fun x47 () Int)
(declare-fun x33 (Int) Int)
(declare-fun x448 () Bool)
(declare-fun x265 () Int)
(declare-fun x237 () Int)
(declare-fun x380 () Int)
(declare-fun x231 () Int)
(declare-fun x48 () Bool)
(declare-fun x531 () Bool)
(declare-fun x782 () Int)
(declare-fun x20 () Int)
(declare-fun x863 () Int)
(declare-fun x793 () Bool)
(declare-fun x485 () Int)
(declare-fun x871 () Bool)
(declare-fun x824 () Int)
(declare-fun x417 () Int)
(declare-fun x367 () Int)
(declare-fun x94 () Bool)
(declare-fun x120 () Int)
(declare-fun x85 () Int)
(declare-fun x664 () Int)
(declare-fun x194 () Bool)
(declare-fun x326 () Int)
(declare-fun x554 () Bool)
(declare-fun x804 () Int)
(declare-fun x707 () Int)
(declare-fun x593 () Bool)
(declare-fun x669 () Int)
(declare-fun x422 () Int)
(declare-fun x319 () Bool)
(declare-fun x35 () Int)
(declare-fun x122 () Bool)
(declare-fun x511 () Int)
(declare-fun x419 () Int)
(declare-fun x329 () Int)
(declare-fun x178 () Int)
(declare-fun x346 () Int)
(declare-fun x383 () Bool)
(declare-fun x355 () Int)
(declare-fun x167 () Bool)
(declare-fun x655 () Int)
(declare-fun x763 () Int)
(declare-fun x384 () Int)
(declare-fun x752 () Int)
(declare-fun x661 () Int)
(declare-fun x552 () Bool)
(declare-fun x581 () Int)
(declare-fun x112 () Int)
(declare-fun x24 () Int)
(declare-fun x458 () Bool)
(declare-fun x59 () Bool)
(declare-fun x818 () Bool)
(declare-fun x89 () Bool)
(declare-fun x550 () Bool)
(declare-fun x847 () Int)
(declare-fun x148 () Int)
(declare-fun x751 () Bool)
(declare-fun x803 () Bool)
(declare-fun x335 () Int)
(declare-fun x466 (Int Int) Int)
(declare-fun x51 () Int)
(declare-fun x158 () Int)
(declare-fun x9 () Int)
(declare-fun x266 () Int)
(declare-fun x375 () Bool)
(declare-fun x862 () Int)
(declare-fun x22 () Int)
(declare-fun x268 () Bool)
(declare-fun x848 () Int)
(declare-fun x463 () Bool)
(declare-fun x80 () Int)
(declare-fun x351 () Int)
(declare-fun x260 () Bool)
(declare-fun x506 () Int)
(declare-fun x404 () Bool)
(declare-fun x588 () Bool)
(declare-fun x567 () Bool)
(declare-fun x851 (Int) Int)
(declare-fun x546 () Bool)
(declare-fun x250 () Bool)
(declare-fun x750 () Int)
(declare-fun x860 () Int)
(declare-fun x235 () Bool)
(declare-fun x708 () Int)
(declare-fun x710 () Int)
(declare-fun x104 () Bool)
(declare-fun x15 () Bool)
(declare-fun x245 () Int)
(declare-fun x754 () Int)
(declare-fun x414 () Int)
(declare-fun x259 () Int)
(declare-fun x192 () Int)
(declare-fun x494 () Bool)
(declare-fun x484 () Bool)
(declare-fun x84 () Bool)
(declare-fun x620 () Int)
(declare-fun x735 () Int)
(declare-fun x57 () Int)
(declare-fun x395 () Int)
(declare-fun x283 () Bool)
(declare-fun x621 () Int)
(declare-fun x91 () Bool)
(declare-fun x405 () Bool)
(declare-fun x55 () Int)
(declare-fun x108 (Int) Int)
(declare-fun x596 () Bool)
(declare-fun x426 () Int)
(declare-fun x715 () Int)
(declare-fun x27 () Int)
(declare-fun x503 () Bool)
(declare-fun x551 () Int)
(declare-fun x691 () Bool)
(declare-fun x723 () Int)
(declare-fun x151 () Bool)
(declare-fun x690 () Bool)
(declare-fun x356 () Bool)
(declare-fun x399 () Bool)
(declare-fun x582 () Int)
(declare-fun x430 () Int)
(declare-fun x604 () Int)
(declare-fun x640 () Int)
(declare-fun x472 () Int)
(declare-fun x648 () Bool)
(declare-fun x402 () Int)
(declare-fun x212 () Int)
(declare-fun x292 () Bool)
(declare-fun x296 () Int)
(declare-fun x548 () Int)
(declare-fun x403 () Int)
(declare-fun x143 () Int)
(declare-fun x343 () Bool)
(declare-fun x68 (Int) Int)
(declare-fun x734 () Bool)
(declare-fun x349 () Int)
(declare-fun x330 () Bool)
(declare-fun x361 () Int)
(declare-fun x32 () Bool)
(declare-fun x387 () Bool)
(declare-fun x724 (Int) Int)
(declare-fun x372 () Int)
(declare-fun x502 () Int)
(declare-fun x762 () Bool)
(declare-fun x273 () Int)
(declare-fun x109 (Int Int) Int)
(declare-fun x659 () Bool)
(declare-fun x244 () Int)
(declare-fun x368 () Int)
(declare-fun x312 () Int)
(declare-fun x790 () Bool)
(declare-fun x156 () Int)
(declare-fun x670 () Bool)
(declare-fun x253 () Int)
(declare-fun x66 () Int)
(declare-fun x271 () Int)
(declare-fun x674 () Int)
(declare-fun x308 () Int)
(declare-fun x537 () Int)
(declare-fun x127 () Bool)
(declare-fun x398 () Int)
(declare-fun x433 () Int)
(declare-fun x99 () Bool)
(declare-fun x190 () Int)
(declare-fun x547 () Int)
(declare-fun x771 () Bool)
(declare-fun x87 () Bool)
(declare-fun x207 (Int) Int)
(declare-fun x792 () Int)
(declare-fun x102 () Int)
(declare-fun x520 () Int)
(declare-fun x722 () Int)
(declare-fun x228 () Int)
(declare-fun x732 () Int)
(declare-fun x397 () Bool)
(declare-fun x154 () Int)
(declare-fun x324 () Bool)
(declare-fun x684 () Int)
(declare-fun x667 () Bool)
(declare-fun x475 () Int)
(declare-fun x487 () Bool)
(declare-fun x837 () Int)
(declare-fun x650 () Int)
(declare-fun x598 () Bool)
(declare-fun x193 () Int)
(declare-fun x299 () Bool)
(declare-fun x444 () Int)
(declare-fun x556 () Int)
(declare-fun x269 () Int)
(declare-fun x779 () Int)
(declare-fun x573 () Int)
(declare-fun x725 () Bool)
(declare-fun x838 () Int)
(declare-fun x1 () Int)
(declare-fun x499 () Int)
(declare-fun x70 () Int)
(declare-fun x631 () Int)
(declare-fun x541 () Int)
(declare-fun x359 () Int)
(declare-fun x26 () Bool)
(declare-fun x826 () Bool)
(declare-fun x101 () Int)
(declare-fun x44 () Int)
(declare-fun x647 (Int) Int)
(declare-fun x687 () Bool)
(declare-fun x374 () Bool)
(declare-fun x434 () Bool)
(declare-fun x765 () Int)
(declare-fun x721 (Int) Int)
(declare-fun x583 () Int)
(declare-fun x812 () Int)
(declare-fun x73 () Int)
(declare-fun x289 () Int)
(declare-fun x425 () Bool)
(declare-fun x69 () Int)
(declare-fun x203 (Int) Int)
(declare-fun x599 () Bool)
(declare-fun x385 () Bool)
(declare-fun x63 () Bool)
(declare-fun x741 (Int Int) Int)
(declare-fun x76 () Bool)
(declare-fun x507 () Int)
(declare-fun x529 () Bool)
(declare-fun x281 () Int)
(declare-fun x336 () Int)
(declare-fun x823 () Int)
(declare-fun x832 () Int)
(declare-fun x214 () Bool)
(declare-fun x656 () Bool)
(declare-fun x428 () Int)
(declare-fun x446 (Int) Int)
(declare-fun x323 () Int)
(declare-fun x452 () Int)
(declare-fun x513 () Int)
(declare-fun x522 () Int)
(declare-fun x872 () Int)
(declare-fun x759 () Bool)
(declare-fun x150 () Bool)
(declare-fun x328 () Int)
(declare-fun x815 () Int)
(declare-fun x415 () Bool)
(declare-fun x325 () Int)
(declare-fun x706 () Int)
(declare-fun x314 (Int) Int)
(declare-fun x572 () Int)
(declare-fun x280 () Bool)
(declare-fun x562 () Int)
(declare-fun x525 () Int)
(declare-fun x429 () Int)
(declare-fun x216 () Bool)
(declare-fun x619 () Bool)
(declare-fun x600 () Bool)
(declare-fun x746 () Int)
(declare-fun x272 () Bool)
(declare-fun x381 () Int)
(declare-fun x570 () Bool)
(declare-fun x678 (Int) Int)
(declare-fun x844 (Int) Int)
(declare-fun x279 () Int)
(declare-fun x118 () Bool)
(declare-fun x378 () Bool)
(declare-fun x586 () Int)
(declare-fun x453 () Int)
(declare-fun x188 () Int)
(declare-fun x339 () Int)
(declare-fun x785 () Int)
(declare-fun x829 (Int) Int)
(declare-fun x313 () Int)
(declare-fun x134 () Int)
(declare-fun x594 (Int) Int)
(declare-fun x653 () Int)
(declare-fun x703 () Bool)
(declare-fun x81 () Bool)
(declare-fun x177 () Int)
(declare-fun x496 () Bool)
(declare-fun x479 () Bool)
(declare-fun x807 (Int) Int)
(declare-fun x576 () Bool)
(declare-fun x409 () Int)
(declare-fun x258 () Int)
(declare-fun x828 () Int)
(declare-fun x187 () Int)
(declare-fun x42 () Bool)
(declare-fun x410 () Bool)
(declare-fun x23 (Int Int) Int)
(declare-fun x83 () Bool)
(declare-fun x565 () Int)
(declare-fun x50 () Bool)
(declare-fun x278 () Int)
(declare-fun x843 () Bool)
(declare-fun x291 () Int)
(declare-fun x662 (Int) Int)
(declare-fun x322 () Bool)
(declare-fun x208 () Bool)
(declare-fun x645 () Bool)
(declare-fun x726 () Bool)
(declare-fun x217 () Int)
(declare-fun x808 () Int)
(declare-fun x641 (Int) Int)
(declare-fun x65 () Bool)
(declare-fun x615 () Int)
(declare-fun x12 () Int)
(declare-fun x700 () Bool)
(declare-fun x680 () Int)
(declare-fun x869 () Int)
(declare-fun x164 () Int)
(declare-fun x579 () Int)
(declare-fun x820 () Bool)
(declare-fun x391 () Int)
(declare-fun x865 () Bool)
(define-fun x695 ((x538 Int)) Int (ite (and (>= x538 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x538)) x538 (- x538 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x344 ((x538 Int)) Int (ite (and (> 0 x538) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x538)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x538) x538))
(define-fun x135 ((x262 Int)) Bool (and (< x262 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x262 0)))
(define-fun x654 ((x262 Int)) Bool (and (<= 0 x262) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x262)))
(define-fun x36 ((x262 Int)) Bool (and (= (x466 x262 115792089237316195423570985008687907853269984665640564039457584007913129639935) x262) (= (x466 115792089237316195423570985008687907853269984665640564039457584007913129639935 x262) x262)))
(define-fun x6 ((x262 Int)) Bool (and (= (x466 0 x262) 0) (= (x466 x262 0) 0)))
(define-fun x493 ((x262 Int)) Bool (= x262 (x466 x262 x262)))
(define-fun x459 ((x262 Int)) Bool (and (x493 x262) (x6 x262) (x36 x262)))
(define-fun x671 ((x262 Int) (x557 Int)) Bool (= (x466 x557 x262) (x466 x262 x557)))
(define-fun x441 ((x262 Int) (x557 Int)) Bool (and (=> (>= x557 0) (<= (x466 x262 x557) x557)) (=> (<= 0 x262) (<= (x466 x262 x557) x262)) (>= (x466 x262 x557) 0)))
(define-fun x360 ((x262 Int) (x557 Int)) Bool (and (x671 x262 x557) (x441 x262 x557)))
(define-fun x162 ((x262 Int)) Bool (= (mod x262 1208925819614629174706176) (+ (x466 x262 1208907372870555465154560) (mod x262 18446744073709551616))))
(define-fun x476 ((x262 Int)) Bool (and (x360 x262 1208907372870555465154560) (x162 x262)))
(define-fun x543 ((x262 Int)) Bool (= (mod x262 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x466 x262 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x262 32))))
(define-fun x501 ((x262 Int)) Bool (and (x543 x262) (x360 x262 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x478 ((x262 Int)) Bool (=> (and (>= x262 0) (< x262 2)) (= 0 (x466 77194726158210796949047323339125271902179989777093709359638389338608753093290 x262))))
(define-fun x388 ((x262 Int)) Bool (and (x478 x262) (x360 x262 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(define-fun x179 ((x262 Int)) Bool (and (= (x23 115792089237316195423570985008687907853269984665640564039457584007913129639935 x262) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x23 x262 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x393 ((x262 Int)) Bool (and (= x262 (x23 0 x262)) (= (x23 x262 0) x262)))
(define-fun x95 ((x262 Int)) Bool (= (x23 x262 x262) x262))
(define-fun x307 ((x262 Int)) Bool (and (x393 x262) (x95 x262) (x179 x262)))
(define-fun x315 ((x262 Int) (x557 Int)) Bool (= (x23 x557 x262) (x23 x262 x557)))
(define-fun x514 ((x262 Int) (x557 Int)) Bool (and (=> (<= 0 x557) (>= (x23 x262 x557) x557)) (=> (>= x262 0) (<= x262 (x23 x262 x557))) (>= (+ x557 x262) (x23 x262 x557))))
(define-fun x840 ((x262 Int) (x557 Int)) Bool (and (x514 x262 x557) (x315 x262 x557)))
(define-fun x611 ((x262 Int)) Bool (= (+ (x466 x262 72057594037927936) (mod x262 72057594037927936)) (mod x262 144115188075855872)))
(define-fun x98 ((x262 Int)) Bool (and (x611 x262) (x360 x262 72057594037927936)))
(define-fun x577 ((x262 Int)) Bool (= (+ (mod x262 144115188075855872) (x466 x262 144115188075855872)) (mod x262 288230376151711744)))
(define-fun x822 ((x262 Int)) Bool (and (x577 x262) (x360 x262 144115188075855872)))
(define-fun x110 ((x262 Int)) Bool (= (mod x262 576460752303423488) (+ (x466 x262 288230376151711744) (mod x262 288230376151711744))))
(define-fun x300 ((x262 Int)) Bool (and (x110 x262) (x360 x262 288230376151711744)))
(define-fun x516 ((x262 Int)) Bool (= (mod x262 1152921504606846976) (+ (mod x262 576460752303423488) (x466 x262 576460752303423488))))
(define-fun x373 ((x262 Int)) Bool (and (x516 x262) (x360 x262 576460752303423488)))
(define-fun x362 ((x262 Int)) Bool (= (mod x262 2305843009213693952) (+ (x466 x262 1152921504606846976) (mod x262 1152921504606846976))))
(define-fun x462 ((x262 Int)) Bool (and (x362 x262) (x360 x262 1152921504606846976)))
(define-fun x413 ((x262 Int)) Bool (= (+ (x466 x262 5708990770740762774496586635741492604263464960) (mod x262 83076749736557242056487941267521536)) (mod x262 5708990770823839524233143877797980545530986496)))
(define-fun x442 ((x262 Int)) Bool (and (x360 x262 5708990770740762774496586635741492604263464960) (x413 x262)))
(define-fun x461 ((x262 Int)) Bool (= (+ (mod x262 281474976710656) (x466 x262 71776119061217280)) (mod x262 72057594037927936)))
(define-fun x845 ((x262 Int)) Bool (and (x461 x262) (x360 x262 71776119061217280)))
(define-fun x116 ((x262 Int)) Bool (= (mod x262 6582018229284824168619876730229402019930943462534319453394436096) (+ (x466 x262 6582018229189043197315758676582005330734049138558148258257960960) (mod x262 95780971304118053647396689196894323976171195136475136))))
(define-fun x523 ((x262 Int)) Bool (and (x116 x262) (x360 x262 6582018229189043197315758676582005330734049138558148258257960960)))
(define-fun x304 ((x262 Int)) Bool (= (+ (mod x262 6582018229284824168619876730229402019930943462534319453394436096) (x466 x262 7237005577325680195743901738874374364099144639582604309003564681041176166400)) (mod x262 7237005577332262213973186563042994240829374041602535252466099000494570602496)))
(define-fun x243 ((x262 Int)) Bool (and (x304 x262) (x360 x262 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(define-fun x317 ((x262 Int)) Bool (= (x466 x262 340282366920938463463374607431768211455) (mod x262 340282366920938463463374607431768211456)))
(define-fun x770 ((x262 Int)) Bool (and (x317 x262) (x360 x262 340282366920938463463374607431768211455)))
(define-fun x509 ((x262 Int)) Bool (= (x466 x262 1) (mod x262 2)))
(define-fun x651 ((x262 Int)) Bool (and (x509 x262) (x360 x262 1)))
(define-fun x769 ((x262 Int)) Bool (= (mod x262 1099511627776) (x466 x262 1099511627775)))
(define-fun x693 ((x262 Int)) Bool (and (x769 x262) (x360 x262 1099511627775)))
(define-fun x471 ((x686 Int)) Int (ite (= x686 256) 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x314 x686)))
(define-fun x617 ((x686 Int)) Int (ite (= 260 x686) 52 (x471 x686)))
(define-fun x261 ((x686 Int)) Int (ite (= x686 292) 54 (x617 x686)))
(define-fun x519 ((x686 Int)) Int (ite (= 324 x686) x430 (x261 x686)))
(define-fun x440 ((x686 Int)) Int (ite (= 356 x686) x668 (x519 x686)))
(define-fun x74 ((x686 Int)) Int (ite (= x686 388) x348 (x440 x686)))
(define-fun x369 ((x686 Int)) Int (ite (= x686 420) x772 (x74 x686)))
(define-fun x636 ((x686 Int)) Int (ite (= x686 452) x697 (x369 x686)))
(define-fun x482 ((x686 Int)) Int (ite (= x686 1632) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x533 x686)))
(define-fun x382 ((x686 Int)) Int (ite (and (>= x686 1632) (< x686 (+ 32 1632))) (x256 (+ 0 (- x686 1632))) (x482 x686)))
(define-fun x53 ((x686 Int)) Int (ite x648 (x382 x686) (x482 x686)))
(define-fun x204 ((x686 Int)) Int (ite (= x450 x686) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x53 x686)))
(define-fun x789 ((x686 Int)) Int (ite (and (<= x450 x686) (< x686 (+ 128 x450))) (x844 (+ 0 (- x686 x450))) (x204 x686)))
(define-fun x43 ((x686 Int)) Int (ite x465 (x789 x686) (x204 x686)))
(define-fun x37 ((x686 Int)) Int (ite (= x686 x423) 2 (x43 x686)))
(define-fun x646 ((x686 Int)) Int (ite (= x414 x686) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x37 x686)))
(define-fun x841 ((x686 Int)) Int (ite (= x686 x631) 2 (x646 x686)))
(define-fun x34 ((x686 Int)) Int (ite (= x828 x686) 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x841 x686)))
(define-fun x490 ((x686 Int)) Int (ite (= x686 x492) 2 (x34 x686)))
(define-fun x149 ((x686 Int)) Int (ite (= x686 x832) 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x490 x686)))
(define-fun x40 ((x686 Int)) Int (ite (= x856 x686) 2 (x149 x686)))
(define-fun x386 ((x686 Int)) Int (ite (= x582 x686) 22714585864790908941122872669550960439478132978232957325611369323817919840256 (x40 x686)))
(define-fun x635 ((x686 Int)) Int (ite (= x686 x592) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x386 x686)))
(define-fun x121 ((x686 Int)) Int (ite (and (< x686 (+ x592 32)) (<= x592 x686)) (x446 (+ (- x686 x592) 0)) (x635 x686)))
(define-fun x802 ((x686 Int)) Int (ite x593 (x121 x686) (x635 x686)))
(define-fun x435 ((x686 Int)) Int (ite (= x409 x686) 2 (x802 x686)))
(define-fun x834 ((x686 Int)) Int (ite (= x169 x686) 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x435 x686)))
(define-fun x666 ((x686 Int)) Int (ite (= x592 x686) 2 (x386 x686)))
(define-fun x141 ((x686 Int)) Int (ite (= x88 x686) 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x666 x686)))
(define-fun x186 ((x686 Int)) Int (ite x796 (x834 x686) (x141 x686)))
(define-fun x563 ((x686 Int)) Int (ite (= x686 x209) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x186 x686)))
(define-fun x571 ((x686 Int)) Int (ite (= x677 x686) x544 (x563 x686)))
(define-fun x515 ((x686 Int)) Int (ite (= x225 x686) x727 (x571 x686)))
(define-fun x316 ((x686 Int)) Int (ite (= x686 x336) 0 (x515 x686)))
(define-fun x176 ((x686 Int)) Int (ite (= x686 x491) x808 (x316 x686)))
(define-fun x870 ((x686 Int)) Int (ite (= x686 x696) x75 (x176 x686)))
(define-fun x658 ((x686 Int)) Int (ite (= x359 x686) x318 (x870 x686)))
(define-fun x626 ((x686 Int)) Int (ite (= x1 x686) x211 (x658 x686)))
(define-fun x267 ((x686 Int)) Int (ite (= x686 x743) x668 (x626 x686)))
(define-fun x634 ((x686 Int)) Int (ite (= x756 x686) x400 (x267 x686)))
(define-fun x477 ((x686 Int)) Int (ite (and (< x686 (+ 96 x209)) (<= x209 x686)) (x203 (+ 0 (- x686 x209))) (x634 x686)))
(define-fun x352 ((x686 Int)) Int (ite x575 (x477 x686) (x634 x686)))
(define-fun x240 ((x686 Int)) Int (ite (= x686 x368) x507 (x352 x686)))
(define-fun x549 ((x686 Int)) Int (ite (= x686 x166) x70 (x240 x686)))
(define-fun x699 ((x686 Int)) Int (ite (= x342 x686) x55 (x549 x686)))
(define-fun x126 ((x686 Int)) Int (ite (= x125 x686) x428 (x699 x686)))
(define-fun x285 ((x686 Int)) Int (ite (= x686 x97) x684 (x126 x686)))
(define-fun x407 ((x686 Int)) Int (ite (= x368 x686) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x285 x686)))
(define-fun x418 ((x686 Int)) Int (ite (= x686 x637) x753 (x407 x686)))
(define-fun x445 ((x686 Int)) Int (ite (= x686 x217) x400 (x418 x686)))
(define-fun x288 ((x686 Int)) Int (ite (= x686 x584) x727 (x445 x686)))
(define-fun x39 ((x686 Int)) Int (ite (and (> (+ 0 0) x686) (<= 0 x686)) (x685 (+ (- x686 0) 0)) (x288 x686)))
(define-fun x760 ((x686 Int)) Int (ite x486 (x39 x686) (x288 x686)))
(define-fun x629 ((x686 Int)) Int (ite (and (<= 0 x686) (< x686 (+ x271 0))) (x685 (+ (- x686 0) 0)) (x760 x686)))
(define-fun x4 ((x686 Int)) Int (ite x797 (x760 x686) (x629 x686)))
(define-fun x774 ((x686 Int)) Int (ite (= x686 x368) 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x4 x686)))
(define-fun x833 ((x686 Int)) Int (ite (= x686 x412) x753 (x774 x686)))
(define-fun x729 ((x686 Int)) Int (ite (= x113 x686) x772 (x833 x686)))
(define-fun x390 ((x686 Int)) Int (ite (= x686 x221) x727 (x729 x686)))
(define-fun x155 ((x686 Int)) Int (ite (= x686 x583) x428 (x390 x686)))
(define-fun x455 ((x686 Int)) Int (ite (and (> (+ 32 x368) x686) (<= x368 x686)) (x377 (+ (- x686 x368) 0)) (x155 x686)))
(define-fun x106 ((x686 Int)) Int (ite x703 (x455 x686) (x155 x686)))
(define-fun x103 ((x686 Int)) Int (ite x703 (x778 x686) (ite x486 (x720 x686) (x108 x686))))
(define-fun x449 ((x686 Int)) Int (ite x703 (x647 x686) (ite x486 (x721 x686) (x33 x686))))
(define-fun x144 ((x686 Int)) Int (ite (= x401 x686) x664 (x468 x686)))
(define-fun x614 ((x686 Int)) Int (ite x528 (ite x235 (x468 x686) (ite x846 (x468 x686) (x144 x686))) (x468 x686)))
(define-fun x652 ((x686 Int)) Int (ite x486 (x436 x686) (x473 x686)))
(define-fun x539 ((x686 Int)) Int (ite x703 (x594 x686) (ite x486 (x678 x686) (x68 x686))))
(define-fun x420 ((x686 Int)) Int (ite x703 (x207 x686) (ite x486 (x704 x686) (x829 x686))))
(assert (not (= 1099511627775 (+ x661 3))))
(assert (x654 x518))
(assert (=> (<= x238 10000) (not (= (+ 3 x661) x238))))
(assert (x770 x798))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (+ 7 x661))))
(assert (not (= 946116605 (x109 x772 53))))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (+ x661 4))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x109 x130 52))))
(assert (not (= 1000000000000000000000000000 (+ 4 x661))))
(assert (x654 x416))
(assert (not (= 420737377 (+ x661 5))))
(assert (x307 x367))
(assert (= (=> (and (or (and x122 (and (< x542 4294967296) (= 1 x120))) (and (= x120 x510) (not x122))) (and (> 340282366920938463463374607431768211456 x713) (not (= x453 x692)) (= x10 1635491895) (not x484) (not (= x692 x274)) (= x625 x668) (= x562 (x473 x238)) (not x32) (<= 0 x437) (not (= x8 x274)) (>= 1461501637330902918203684832716283019655932542975 x275) (= x293 (x473 x524)) (= x24 x697) (> x274 0) (>= 255 x744) (not (= x602 x524)) (not (= x602 x47)) x399 (<= 0 x424) (not (= x8 x146)) (= (+ x680 1) x158) (= (< 0 (x379 x351)) x363) (>= 340282366920938463463374607431768211455 x297) (= false x826) (= (x641 x389) x297) (= x185 (x473 x692)) x645 (not (= x8 x44)) (= 228 x391) (not (= x606 x524)) (not (= x351 x812)) (= x222 1600) (not (= x274 x812)) (not (= x692 x47)) (<= x613 1461501637330902918203684832716283019655932542975) (= 0 x153) (>= x747 0) (= (x627 x680) x713) (not (= x47 x146)) (= x727 x266) (= x816 (x344 (- x391 4))) (= (x473 x47) x555) x272 (<= x251 18446744073709551615) (= x153 x372) (<= 0 x744) (>= x340 0) (> 1461501637330902918203684832716283019655932542976 x92) (= x727 x837) (<= 0 x134) (>= x258 0) x194 (>= x555 0) (not (= x692 x44)) (<= 0 x92) (= x410 (> (x379 x812) 0)) (<= 0 x297) (= (< 0 (x379 x602)) x645) (= x45 false) (not (= x812 x453)) (= x327 1635491895) (<= 0 x339) (= x653 x212) (>= 1461501637330902918203684832716283019655932542975 x44) (<= 0 x562) (>= x185 0) (not (= x238 x524)) (>= 255 x60) (<= x333 340282366920938463463374607431768211455) (= x197 x733) (<= 0 x333) (not (= x812 x146)) (>= x499 0) (> 1099511627776 x650) (= x329 (x473 x351)) (not (= x274 x453)) (= x277 x772) (>= 1461501637330902918203684832716283019655932542975 x586) (not (= x238 x692)) (not (= x453 x8)) (not (= x238 x812)) (not (= x146 x692)) (not (= x146 x524)) (>= x432 0) (<= 0 x161) (>= 1461501637330902918203684832716283019655932542975 x419) (not (= x47 x524)) (<= 0 x849) (>= 1461501637330902918203684832716283019655932542975 x602) x242 (<= x161 1461501637330902918203684832716283019655932542975) (not (= x606 x47)) (not (= x351 x524)) (= (x829 x661) x56) (not (= x606 x812)) (not (= x47 x351)) (>= 1099511627775 x650) (= (x473 x812) x522) (<= x663 255) (= x697 x452) (>= x56 0) (= x763 (+ x680 2)) (= 4 x328) (= x680 (+ 1 x389)) (= 928 x13) (not (= x453 x44)) (<= x274 1461501637330902918203684832716283019655932542975) (< 0 x44) (= (> (x379 x238) 0) x194) (>= x735 0) (>= 1461501637330902918203684832716283019655932542975 x772) (<= x281 1461501637330902918203684832716283019655932542975) (<= 0 x286) (not (= x44 x238)) (and (> x257 131) (= true (<= x257 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= 1461501637330902918203684832716283019655932542975 x351) (>= 1099511627775 x237) (<= x513 1461501637330902918203684832716283019655932542975) (= x157 x177) (= false x81) (not (= x602 x812)) x463 (= x403 x697) (>= 1461501637330902918203684832716283019655932542975 x136) (= x668 x427) (> x8 0) (= x668 x785) (>= 340282366920938463463374607431768211455 x708) (<= x395 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x735) (not (= x602 x238)) (= x32 (= x602 0)) (> x524 0) (not (= x47 x44)) (<= 0 x525) (<= x8 1461501637330902918203684832716283019655932542975) (= (x473 x274) x80) (<= x47 1461501637330902918203684832716283019655932542975) (<= x747 255) (= x192 x772) (not (< x10 946116605)) (< 0 x819) (not (= x692 x606)) (> x453 0) (> x606 0) (<= x499 1461501637330902918203684832716283019655932542975) (= (x379 x602) x819) (= 256 x722) (not (= x351 x8)) (not (= x8 x524)) (<= 0 x586) (= (x473 x602) x340) (not (= x71 409856580)) (= x134 (x473 x44)) (not (= x8 x238)) x564 (not (= x787 0)) (<= x238 1461501637330902918203684832716283019655932542975) (> x812 0) (= x211 (x223 x736 64)) (< x297 340282366920938463463374607431768211456) (not (= x602 x8)) (not (= x44 x524)) (<= 0 x329) (= (x466 1208907372870555465154560 x56) x736) (not (= x274 x602)) (>= x27 0) (not (= x606 x238)) (not (= x812 x44)) (<= x424 340282366920938463463374607431768211455) (< x424 340282366920938463463374607431768211456) (= x849 (x473 x606)) (<= x56 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 0 (x379 x47)) x272) (not (= x238 x453)) (not x803) (>= 255 x437) (<= x400 1461501637330902918203684832716283019655932542975) (< 0 x714) (not (= x524 x812)) (not (= x8 x47)) x609 (= (+ x763 1) x698) (= x400 (x672 x763)) (= 228 x391) (>= 1461501637330902918203684832716283019655932542975 x453) (= x650 (x724 x158)) (not (= x606 x274)) (>= x275 0) (<= x525 340282366920938463463374607431768211455) (> 2054196882 x10) (not (or (> x303 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x303 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x303))))) (<= x713 340282366920938463463374607431768211455) (not (< x257 4)) x100 (not (= x812 x692)) (not (= x602 x44)) (not (= x146 x44)) (<= x697 65535) x363 (>= x713 0) (>= 1461501637330902918203684832716283019655932542975 x765) (= x715 x697) (not (= x524 x692)) (= (x512 x680) x424) (>= x650 0) (< x333 340282366920938463463374607431768211456) (not (= x146 x274)) (= x772 x640) (= x564 (> (x379 x274) 0)) (<= 0 x147) (= x430 x673) (<= 0 x765) (<= 0 x522) (= 420737377 x71) (= (x379 x602) x714) (not (= x146 x606)) (= x9 52) (<= 0 x400) (= (x473 x146) x863) (= x609 (> (x379 x8) 0)) (= x92 (x168 x749)) x42 (= x422 x57) (not (= x8 x606)) x410 (<= 0 x293) (not (= x602 x692)) (> 1461501637330902918203684832716283019655932542976 x513) (= x586 x753) (= x430 (x109 x772 53)) (>= 340282366920938463463374607431768211455 x258) (not (= x602 x351)) (not (= x453 x524)) (< 0 x692) (> x351 0) (not (= x146 x602)) (<= x147 255) (<= 0 x419) (= false x87) (not (= x8 x812)) (<= 0 x136) (>= x708 0) (not (= x602 x606)) (not (= x606 x351)) (= x799 (> (x379 x453) 0)) (= x333 (x662 x389)) (= x787 (x379 274184521717934524641157099916833587358)) (not (= x453 x146)) (not (= x274 x524)) (> x47 0) (= x772 x323) (< x400 1461501637330902918203684832716283019655932542976) (<= 0 x212) (= x242 (> (x379 x44) 0)) (<= x286 65535) (not (= x146 x351)) (= (> (x379 x524) 0) x100) (= (< 0 (x379 x606)) x42) (= (x310 x698) x513) (= x143 11343057244796852251080018516132066157134835194109900141777915041485456146432) (= x803 (or (and (= true (<= x816 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 224 x816)) (> x816 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x673 x573) (>= x663 0) (= x499 x177) (<= 0 x80) (not (= x274 x44)) (<= x524 1461501637330902918203684832716283019655932542975) (= x399 (> (x379 x692) 0)) (= x463 (< 0 (x379 x146))) (= x136 x753) (not (> 1635491895 x10)) (>= 1461501637330902918203684832716283019655932542975 x212) (= x389 (+ x661 1)) (>= 255 x432) (<= 0 x392) (= (+ x698 1) x749) (= x227 x668) (not (= x146 x238)) (>= 1461501637330902918203684832716283019655932542975 x606) (>= 1461501637330902918203684832716283019655932542975 x692) (= x122 (< 0 x510)) (not (< x391 4)) (<= 0 x863) (= x772 x172) (>= 1461501637330902918203684832716283019655932542975 x812) (>= x251 0) (not (= x351 x453)) (<= 0 x513) (= x348 x57) (not (= x44 x606)) (not (= x453 x602)) (<= 0 x395) (<= x339 1461501637330902918203684832716283019655932542975) (<= 0 x281) (= x661 (x109 x668 52)) (= (x473 x8) x27) x799 (= x837 x57) (>= x60 0) (not (= x238 x47)) (<= x92 1461501637330902918203684832716283019655932542975) (not (= x692 x351)) (= x18 x668) (= (or (and (= true (<= x12 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 128 x12)) (> x12 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x484) (not (= x8 x692)) (not (= x453 x47)) (not (= x44 x351)) (= x392 (x473 x453)) (not (= x274 x238)) (= x668 x556) (> x602 0) (not (= x274 x47)) (< 0 x146) (>= x237 0) (>= 1461501637330902918203684832716283019655932542975 x146) (<= x668 1461501637330902918203684832716283019655932542975) (not (= x274 x351)) (>= x613 0) (not (= x351 x238)) (not (= x812 x47)) (> x238 0) (= x54 54) (= (x344 (- x391 100)) x12) (= (x344 (- x257 4)) x303) (not (= x606 x453)))) x600) x21))
(assert (not (= 1152921504606846976 (x109 x130 52))))
(assert (x654 x205))
(assert (x654 x348))
(assert (not (= (+ x661 3) 994519296000000)))
(assert (=> (>= 10000 x130) (not (= x130 (+ 7 x661)))))
(assert (not (= (+ 3 x661) 31536000)))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (+ x661 5))))
(assert (= (or x236 x201) x793))
(assert (= (and (not x866) x630) x598))
(assert (not (= (+ 7 x661) 65536)))
(assert (x654 x249))
(assert (x654 x233))
(assert (not (= (x109 x170 54) (x109 x772 53))))
(assert (=> (>= 10000 x130) (not (= x130 (+ x661 5)))))
(assert (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x109 x170 54))))
(assert (=> (>= 10000 x602) (not (= x602 (+ 6 x661)))))
(assert (=> (>= 10000 x602) (not (= x602 (x109 x130 52)))))
(assert (x654 x733))
(assert (not (= (+ x661 6) 340282366920938463463374607431768211455)))
(assert (not (= 53 (x109 x170 54))))
(assert (not (= 71776119061217280 (x109 x772 53))))
(assert (not (= (x109 x170 54) 500000000000000000000000000)))
(assert (x654 x296))
(assert (x135 x453))
(assert (not (= (x109 x170 54) (+ x661 2))))
(assert (x654 x863))
(assert (x654 x57))
(assert (not (= (+ x661 7) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x654 x279))
(assert (not (= (+ 3 x661) 72057594037927936)))
(assert (x654 x137))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ 6 x661))))
(assert (not (= (x109 x668 52) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (not (= (+ 1 x661) (x109 x772 53))))
(assert (x654 x457))
(assert (not (= (+ x661 6) 288230376151711744)))
(assert (= x353 (and (not x83) x580)))
(assert (not (= (+ 8 x661) (+ x661 5))))
(assert (not (= (+ 8 x661) 1208907372870555465154560)))
(assert (=> (<= x602 10000) (not (= (+ 2 x661) x602))))
(assert (not (= (+ x661 4) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ 8 x661) 65536)))
(assert (not (= (+ 5 x661) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (>= 10000 x524) (not (= x524 (x109 x170 54)))))
(assert (not (= (x109 x130 52) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (=> (>= 10000 x130) (not (= (+ 4 x661) x130))))
(assert (not (= 576460752303423488 (+ 2 x661))))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ 2 x661))))
(assert (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (+ x661 1))))
(assert (not (= (x109 x170 54) 420737377)))
(assert (x654 x710))
(assert (=> (>= 10000 x772) (not (= x772 (+ x661 1)))))
(assert (not (= 1000000000000000000000000000 (x109 x772 53))))
(assert (x654 x392))
(assert (x654 x819))
(assert (=> (<= x170 10000) (not (= (+ 3 x661) x170))))
(assert (x654 x657))
(assert (x654 x464))
(assert (not (= (+ 4 x661) 420737377)))
(assert (= (=> (and (= x690 (= 0 x823)) (or (not x690) x690)) x687) x151))
(assert (not (= (+ x661 4) (+ x661 3))))
(assert (x654 x290))
(assert (= x568 (or x353 x632)))
(assert (not (= (+ 5 x661) 946116605)))
(assert (x654 x489))
(assert (x654 x350))
(assert (not (= (+ 5 x661) 2054196882)))
(assert (x654 x752))
(assert (x459 x105))
(assert (x501 x620))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x109 x772 53))))
(assert (=> (<= x524 10000) (not (= (+ 6 x661) x524))))
(assert (x654 x396))
(assert (=> (<= x47 10000) (not (= (+ x661 5) x47))))
(assert (x654 x112))
(assert (not (= 4294967296 (+ 8 x661))))
(assert (not (= (+ 7 x661) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ x661 2))))
(assert (x654 x717))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ x661 1))))
(assert (not (= (+ x661 3) 71776119061217280)))
(assert (not (= (+ 6 x661) 65536)))
(assert (x459 x850))
(assert (x654 x217))
(assert (x654 x520))
(assert (x654 x507))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x109 x668 52))))
(assert (not (= (+ 4 x661) 52)))
(assert (not (= 409856580 (x109 x772 53))))
(assert (x135 x524))
(assert (= (x223 x655 116) (div x655 83076749736557242056487941267521536)))
(assert (=> (<= x453 10000) (not (= x453 (+ x661 2)))))
(assert (x654 x339))
(assert (= (and x568 x448) x575))
(assert (not (= 71776119061217280 (+ x661 8))))
(assert (not (= 54 (+ x661 3))))
(assert (not (= (x109 x772 53) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= (+ x661 6) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x360 x505 x85))
(assert (not (= (+ 3 x661) 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (x654 x241))
(assert (not (= 4294967296 (x109 x772 53))))
(assert (x845 x56))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x109 x668 52))))
(assert (= (x223 x270 176) (div x270 95780971304118053647396689196894323976171195136475136)))
(assert (not (= (x109 x772 53) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x654 x542))
(assert (not (= (x109 x668 52) 4294967296)))
(assert (not (= (+ x661 6) (+ x661 7))))
(assert (not (= (+ 7 x661) 1099511627775)))
(assert (not (= (+ x661 8) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= (x109 x130 52) (+ x661 3))))
(assert (x654 x306))
(assert (x654 x193))
(assert (not (= (+ x661 1) 1152921504606846976)))
(assert (not (= (+ x661 2) (x109 x772 53))))
(assert (x822 x56))
(assert (not (= (+ x661 5) 54)))
(assert (= x86 (and (not x474) x434)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ x661 1))))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ 7 x661))))
(assert (x654 x572))
(assert (=> (>= 10000 x692) (not (= (+ x661 1) x692))))
(assert (x654 x271))
(assert (not (= (x109 x170 54) 54)))
(assert (not (= 18446744073709551615 (+ x661 4))))
(assert (x654 x190))
(assert (x654 x408))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ x661 7))))
(assert (=> (>= 10000 x8) (not (= x8 (x109 x772 53)))))
(assert (not (= (+ x661 6) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (x109 x772 53))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (x109 x130 52))))
(assert (x654 x66))
(assert (x654 x417))
(assert (x654 x618))
(assert (=> (<= x170 10000) (not (= x170 (+ x661 8)))))
(assert (=> (<= x692 10000) (not (= x692 (+ 3 x661)))))
(assert (= x703 (and x52 x576)))
(assert (not (= 994519296000000 (+ 5 x661))))
(assert (x654 x679))
(assert (x654 x188))
(assert (x459 x55))
(assert (=> (>= 10000 x400) (not (= (+ x661 1) x400))))
(assert (x654 x113))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (x109 x170 54))))
(assert (=> (<= x238 10000) (not (= x238 (x109 x668 52)))))
(assert (x501 x7))
(assert (not (= (+ x661 4) 53)))
(assert (x654 x346))
(assert (x459 x380))
(assert (=> (>= 10000 x44) (not (= x44 (+ x661 8)))))
(assert (x654 x707))
(assert (x654 x862))
(assert (=> (<= x668 10000) (not (= x668 (x109 x668 52)))))
(assert (x459 x733))
(assert (=> (<= x772 10000) (not (= (+ 3 x661) x772))))
(assert (not (= (+ x661 1) 2054196882)))
(assert (x654 x395))
(assert (not (= (+ x661 2) 420737377)))
(assert (=> (>= 10000 x130) (not (= (x109 x130 52) x130))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ 2 x661))))
(assert (x654 x403))
(assert (x654 x61))
(assert (x654 x79))
(assert (x654 x556))
(assert (=> (<= x812 10000) (not (= (x109 x668 52) x812))))
(assert (x654 x54))
(assert (=> (<= x146 10000) (not (= x146 (+ x661 3)))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x661 3))))
(assert (not (= 288230376151711744 (+ x661 1))))
(assert (=> (>= 10000 x47) (not (= (x109 x668 52) x47))))
(assert (not (= 340282366920938463463374607431768211455 (+ 2 x661))))
(assert (x654 x544))
(assert (= 0 (x533 x29)))
(assert (not (= 946116605 (+ 2 x661))))
(assert (not (= 946116605 (+ x661 7))))
(assert (x135 x170))
(assert (not (= (x109 x170 54) (+ x661 4))))
(assert (not (= (x109 x130 52) (x109 x170 54))))
(assert (=> (<= x453 10000) (not (= (+ 6 x661) x453))))
(assert (x654 x303))
(assert (=> (<= x453 10000) (not (= (+ 1 x661) x453))))
(assert (=> (<= x812 10000) (not (= x812 (+ 6 x661)))))
(assert (x654 x97))
(assert (x654 x736))
(assert (=> (>= 10000 x170) (not (= (+ 1 x661) x170))))
(assert (= x797 (and x347 x701)))
(assert (= (and x689 x776) x250))
(assert (x654 x370))
(assert (not (= 54 (+ 8 x661))))
(assert (=> (<= x812 10000) (not (= x812 (x109 x170 54)))))
(assert (not (= (+ 3 x661) 1461501637330902918203684832716283019655932542975)))
(assert (x654 x510))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x109 x130 52))))
(assert (x654 x541))
(assert (not (= (+ 7 x661) 5708990770740762774496586635741492604263464960)))
(assert (x654 x318))
(assert (not (= 500000000000000000000000000 (x109 x130 52))))
(assert (not (= (x109 x130 52) 1099511627775)))
(assert (= (and x385 x86) x628))
(assert (not (= (+ x661 8) (x109 x170 54))))
(assert (not (= 274184521717934524641157099916833587358 (x109 x772 53))))
(assert (=> (>= 10000 x8) (not (= x8 (+ 4 x661)))))
(assert (=> (<= x170 10000) (not (= (x109 x130 52) x170))))
(assert (= x201 (and x597 (not x488))))
(assert (not (= 1000000000000000000000000000 (+ x661 2))))
(assert (x135 x351))
(assert (not (= (x109 x668 52) 18446744073709551615)))
(assert (not (= 994519296000000 (x109 x130 52))))
(assert (= (x456 x511 1) (mod (* 2 x511) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x109 x170 54))))
(assert (= (and x28 (not x378)) x284))
(assert (not (= 1208907372870555465154560 (+ x661 3))))
(assert (x654 x297))
(assert (=> (<= x606 10000) (not (= (+ x661 2) x606))))
(assert (not (= 409856580 (+ x661 1))))
(assert (not (= 946116605 (x109 x170 54))))
(assert (x654 x502))
(assert (=> (<= x668 10000) (not (= (+ x661 7) x668))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x661 3))))
(assert (=> (<= x692 10000) (not (= x692 (+ x661 6)))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ x661 1))))
(assert (x654 x354))
(assert (x654 x791))
(assert (x654 x380))
(assert (= x659 x725))
(assert (x459 x56))
(assert (x654 x276))
(assert (not (= 420737377 (x109 x772 53))))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ 4 x661))))
(assert (x654 x579))
(assert (x654 x427))
(assert (x654 x35))
(assert (x654 x847))
(assert (x654 x49))
(assert (x654 x221))
(assert (= x858 (and x215 x341)))
(assert (not (= (x109 x170 54) (+ 1 x661))))
(assert (x654 x73))
(assert (x459 6582018229189043197315758676582005330734049138558148258257960960))
(assert (not (= (x109 x170 54) 1461501637330902918203684832716283019655932542976)))
(assert (x654 x565))
(assert (not (= 31536000 (x109 x772 53))))
(assert (x135 x238))
(assert (not (= (+ x661 5) 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 7 x661))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ 7 x661))))
(assert (=> (>= 10000 x8) (not (= (+ 1 x661) x8))))
(assert (=> (<= x238 10000) (not (= (+ 1 x661) x238))))
(assert (not (= (+ 5 x661) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (=> (<= x606 10000) (not (= x606 (x109 x170 54)))))
(assert (x654 x832))
(assert (not (= (+ 6 x661) 54)))
(assert (not (= (+ 2 x661) (+ 6 x661))))
(assert (x654 x814))
(assert (= x694 (=> (and (= x91 (< x675 x278)) (< (+ x754 x266) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x688 (not x91)) (= x184 (x802 x592)) (= (+ x633 x783) x278) (= x224 (ite x330 1 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x428) x675) (= (x695 (+ x592 x282)) x409) (< (+ x572 x184) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not x861) (= x282 (x466 115792089237316195423570985008687907853269984665640564039457584007913129639904 x402)) (not x820) (= x633 x184) (= (= x428 0) x299) (= x705 (+ x853 x11)) (= x861 (= 0 x618)) (= (x695 (+ 64 x409)) x868) (= x142 (> x705 x220)) (= x11 x266) (= x169 (x695 (+ x409 32))) (= x853 x754) (= x350 (x695 (+ 500000000000000000000000000 x334))) (= x402 (x695 (+ 31 x163))) (= x754 (div x350 1000000000000000000000000000)) (= (mod (* x428 x278) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x334) (> x224 0) (= (or x688 x299) x330) (= x783 x572) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163) true) (> 32 x163))) x820)) (and (=> x142 x65) (=> (and (= x601 x868) (not x142)) x623)))))
(assert (x654 x692))
(assert (x654 x336))
(assert (x135 x130))
(assert (= (=> (and (or (and (and (= x618 1) (< x163 4294967296)) x425) (and (not x425) (= x502 x618))) (and (<= 0 x572) (= x220 (* x245 x58)) (= (x614 x51) x572) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x58 x245)) (= (+ x749 2) x51) (= x425 (< 0 x502)) (>= 340282366920938463463374607431768211455 x572) (< x572 340282366920938463463374607431768211456))) x694) x17))
(assert (not (= (+ x661 3) 4294967296)))
(assert (=> (<= x524 10000) (not (= (+ x661 4) x524))))
(assert (not (= (+ x661 5) (+ 4 x661))))
(assert (not (= (x109 x170 54) 994519296000000)))
(assert (not (= 144115188075855872 (+ x661 6))))
(assert (not (= 4294967296 (+ x661 2))))
(assert (x459 x535))
(assert (not (= (x109 x668 52) 340282366920938463463374607431768211456)))
(assert (x654 x562))
(assert (not (= (+ 4 x661) 65535)))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (x109 x668 52))))
(assert (not (= (x109 x170 54) 1152921504606846976)))
(assert (x654 x613))
(assert (not (= (+ x661 5) 1208907372870555465154560)))
(assert (not (= 340282366920938463463374607431768211455 (x109 x130 52))))
(assert (=> (>= 10000 x692) (not (= (x109 x130 52) x692))))
(assert (x654 x644))
(assert (x654 x152))
(assert (=> (>= 10000 x772) (not (= x772 (+ 2 x661)))))
(assert (=> (>= 10000 x602) (not (= x602 (x109 x772 53)))))
(assert (x476 x56))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x661 1))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x109 x130 52))))
(assert (= (=> (and (= x94 (= 0 x804)) (= (= 0 x823) x115) (= x821 (x466 115792089237316195423570985008687907853269984665640564039457584007913129639904 x824)) (= x804 (x106 x368)) (= x737 (or (and (< x518 32) (= (<= x518 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x518 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x676 (x695 (+ x368 x821))) (= (x695 (+ 31 x518)) x824) (not x737) (not x115)) (and (=> (and (and (= (x103 x673) x309) (<= x309 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x466 77194726158210796949047323339125271902179989777093709359638389338608753093290 x309) x231) (= (not (= 0 x231)) x488) (>= x309 0) (= (x695 (+ x676 32)) x338) (= 1600 x228)) (not x94)) (and (=> (and (not x488) (= x67 1)) x480) (=> (and x488 (and (= x89 (ite (not x216) (= 0 (x466 x827 (x344 (- x827 1)))) (not x216))) (= (x695 (+ x338 32)) x165) (= (x466 77194726158210796949047323339125271902179989777093709359638389338608753093290 x380) x827) (= (x103 x673) x380) (<= x380 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= 0 x827) x216) (<= 0 x380))) (and (=> (and x89 (and (= (x466 x709 x384) x639) (= x862 77194726158210796949047323339125271902179989777093709359638389338608753093290) (= x429 (x344 (- x709 1))) (= (x466 77194726158210796949047323339125271902179989777093709359638389338608753093290 x380) x709) (= x332 (= x426 0)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x429) x384) (= (x223 x639 2) x426))) (and (=> (not x332) x331) (=> (and (= x170 0) x332) x283))) (=> (not x89) x496))))) (=> x94 x659))) x687))
(assert (= x534 (or x529 x528)))
(assert (=> (>= 10000 x772) (not (= x772 (+ x661 7)))))
(assert (not (= 274184521717934524641157099916833587358 (+ 2 x661))))
(assert (not (= (+ x661 8) 2054196882)))
(assert (= (or x781 x208) x682))
(assert (not (= 5708990770740762774496586635741492604263464960 (+ 4 x661))))
(assert (=> (<= x772 10000) (not (= (+ x661 4) x772))))
(assert (not (= (+ 2 x661) 65536)))
(assert (not (= (+ 4 x661) 1208907372870555465154560)))
(assert (not (= 54 (x109 x772 53))))
(assert (not (= (+ 7 x661) (x109 x130 52))))
(assert (x654 x744))
(assert (not (= (x109 x130 52) 5708990770740762774496586635741492604263464960)))
(assert (not (= 340282366920938463463374607431768211455 (x109 x772 53))))
(assert (not (= (+ 4 x661) 71776119061217280)))
(assert (=> (>= 10000 x47) (not (= x47 (x109 x170 54)))))
(assert (=> (>= 10000 x606) (not (= x606 (+ x661 5)))))
(assert (= x127 (=> (and (or x378 (and (and (not x830) (= x171 (not x813)) (>= 340282366920938463463374607431768211455 x740) (> 340282366920938463463374607431768211456 x740) (= (x344 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x291)) x396) (= x740 (x468 x401)) (= x291 (div x148 2)) (= x416 (x466 340282366920938463463374607431768211455 x798)) (= x740 x495) (= (ite x268 1 0) x710) (= x312 (x695 (+ x234 x604))) (= x710 0) (= (or x119 x322) x268) (= (x466 340282366920938463463374607431768211455 x230) x664) (= (+ x495 x180) x230) (= x234 (mod (* 1000000000000000000000000000 x195) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x180 x416) (= x830 (> x798 340282366920938463463374607431768211455)) (>= 340282366920938463463374607431768211455 x230) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x416 x740)) (= x798 (div x312 x148)) (= (+ x749 2) x401) (>= x740 0) (= x322 (not x171)) (= x604 (div x148 2)) (= (> x195 x290) x813) (= x119 (= 0 x148)) (= x290 (div x396 1000000000000000000000000000))) (not x378))) (and (= x195 (div x838 10000)) (< 0 x159) (= (or x31 x809) x871) (= (or x38 x383) x246) (< 0 x728) (< (+ x808 x612) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x771 (< x364 x732)) (= x612 x326) (= x383 (not x356)) (= (= 0 x349) x809) (= x345 x808) (= (mod (* x211 x178) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x253) (= (< x313 x506) x852) (= x364 (x344 (- x551 x805))) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x211) x16) (= x31 (not x852)) (= (x695 (+ 500000000000000000000000000 x444)) x558) (not x608) (= (mod (* x349 x506) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x444) (= x178 (x344 (- x364 x732))) (= x38 (= x211 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x349) x313) (= x378 (= 0 x195)) (= x728 (ite x246 1 0)) (= (x695 (+ x253 5000)) x838) (not x771) (= x732 (div x558 1000000000000000000000000000)) (= (+ x326 x345) x551) (= (ite x871 1 0) x159) (= (> x178 x16) x356) (= (< x551 x805) x608))) x41)))
(assert (=> (>= 10000 x606) (not (= x606 (+ 7 x661)))))
(assert (=> (>= 10000 x400) (not (= (+ x661 3) x400))))
(assert (=> (>= 10000 x453) (not (= x453 (+ 5 x661)))))
(assert (not (= (x109 x772 53) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= (+ x661 1) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (+ 6 x661))))
(assert (x654 x540))
(assert (x459 x85))
(assert (x770 x133))
(assert (x654 x469))
(assert (x654 x525))
(assert (=> (<= x146 10000) (not (= x146 (+ 4 x661)))))
(assert (not (= 53 (x109 x772 53))))
(assert (not (= (+ x661 6) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (>= 10000 x692) (not (= x692 (+ x661 8)))))
(assert (not (= (x109 x668 52) 274184521717934524641157099916833587358)))
(assert (x654 x631))
(assert (=> (>= 10000 x602) (not (= (+ x661 8) x602))))
(assert (not (= 52 (+ x661 2))))
(assert (x135 x661))
(assert (x654 x708))
(assert (x654 x27))
(assert (x654 x584))
(assert (not (= (+ 6 x661) 1208907372870555465154560)))
(assert (x654 x602))
(assert (not (= (+ x661 8) 1461501637330902918203684832716283019655932542975)))
(assert (x654 x327))
(assert (x654 x758))
(assert (not (= (+ x661 6) 409856580)))
(assert (not (= 53 (+ x661 2))))
(assert (not (= (+ x661 6) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (not (= 54 (x109 x130 52))))
(assert (x654 x156))
(assert (x654 x422))
(assert (=> (>= 10000 x606) (not (= (+ 3 x661) x606))))
(assert (not (= 420737377 (+ 1 x661))))
(assert (x654 x229))
(assert (x654 x498))
(assert (x654 x145))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ x661 5))))
(assert (=> (<= x170 10000) (not (= x170 (+ x661 5)))))
(assert (=> (<= x130 10000) (not (= x130 (x109 x668 52)))))
(assert (= x576 (or x797 x818)))
(assert (x654 x709))
(assert (not (= (x109 x772 53) 288230376151711744)))
(assert (not (= 500000000000000000000000000 (+ x661 1))))
(assert (= (or x836 x598) x434))
(assert (x243 x193))
(assert (not (= (+ x661 2) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x654 x804))
(assert (x654 x859))
(assert (x654 x55))
(assert (=> (<= x668 10000) (not (= x668 (+ x661 6)))))
(assert (not (= (+ x661 2) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= (x109 x772 53) 18446744073709551615)))
(assert (not (= 65536 (x109 x668 52))))
(assert (not (= 274184521717934524641157099916833587358 (+ x661 8))))
(assert (x654 x400))
(assert (not (= (+ 4 x661) 31536000)))
(assert (x654 x245))
(assert (not (= (+ 4 x661) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= (+ x661 7) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (+ x661 3))))
(assert (x654 x522))
(assert (not (= (+ 5 x661) 1635491895)))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x109 x170 54))))
(assert (x654 x625))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ 6 x661))))
(assert (=> (>= 10000 x274) (not (= (+ x661 3) x274))))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x109 x772 53))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ 1 x661))))
(assert (=> (= (x109 x130 52) (x109 x668 52)) (= x130 x668)))
(assert (not (= (x109 x130 52) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (>= 10000 x146) (not (= (x109 x772 53) x146))))
(assert (= x788 (and x561 (not x588))))
(assert (x654 x181))
(assert (not (= (+ 1 x661) (+ 2 x661))))
(assert (= (and x196 x387) x781))
(assert (x654 x655))
(assert (not (= (x109 x668 52) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= 31536000 (+ x661 2))))
(assert (not (= 53 (+ x661 8))))
(assert (not (= (+ 5 x661) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (x654 x277))
(assert (x442 x56))
(assert (= (and (not x94) x854) x597))
(assert (= (and x198 x817) x738))
(assert (x654 x505))
(assert (not (= (+ 5 x661) 5708990770740762774496586635741492604263464960)))
(assert (= x28 (or x858 x745)))
(assert (= (or x250 x218) x531))
(assert (x654 x202))
(assert (not (= (x109 x772 53) 65536)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ 4 x661))))
(assert (not (= (+ x661 4) 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (=> (<= x668 10000) (not (= x668 (+ x661 1)))))
(assert (= (and x718 x690) x596))
(assert (x654 x187))
(assert (not (= (x109 x668 52) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x654 x132))
(assert (not (= (x109 x668 52) (x109 x170 54))))
(assert (not (= 1099511627776 (x109 x170 54))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x109 x130 52))))
(assert (x654 x850))
(assert (not (= (x109 x170 54) (+ 5 x661))))
(assert (= (and x580 x83) x632))
(assert (= (and x854 x94) x578))
(assert (x654 x443))
(assert (=> (<= x524 10000) (not (= (x109 x668 52) x524))))
(assert (x459 x798))
(assert (x654 x581))
(assert (=> (<= x668 10000) (not (= (x109 x772 53) x668))))
(assert (x98 x56))
(assert (not (= (x109 x668 52) (+ 5 x661))))
(assert (not (= (x109 x170 54) 1099511627775)))
(assert (x654 x612))
(assert (x654 x412))
(assert (not (= 994519296000000 (+ x661 2))))
(assert (not (= 340282366920938463463374607431768211456 (+ x661 3))))
(assert (=> (>= 10000 x274) (not (= (x109 x668 52) x274))))
(assert (not (= (x109 x170 54) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x654 x184))
(assert (not (= (x109 x130 52) 52)))
(assert (not (= (+ 3 x661) 500000000000000000000000000)))
(assert (x654 x747))
(assert (not (= 72057594037927936 (+ 7 x661))))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ x661 7))))
(assert (x654 x391))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ x661 5))))
(assert (=> (>= 10000 x524) (not (= (+ x661 1) x524))))
(assert (x459 288230376151711744))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ x661 1))))
(assert (=> (>= 10000 x400) (not (= (+ x661 6) x400))))
(assert (x654 x134))
(assert (x654 x821))
(assert (x654 x67))
(assert (not (= (x109 x772 53) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= 5708990770740762774496586635741492604263464960 (+ 3 x661))))
(assert (not (= (+ x661 6) 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x109 x772 53))))
(assert (x654 x732))
(assert (=> (>= 10000 x146) (not (= x146 (x109 x130 52)))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ 3 x661))))
(assert (not (= 1000000000000000000000000000 (+ x661 7))))
(assert (=> (>= 10000 x812) (not (= x812 (+ 2 x661)))))
(assert (not (= 994519296000000 (+ x661 1))))
(assert (not (= 31536000 (+ 8 x661))))
(assert (=> (>= 10000 x351) (not (= (x109 x668 52) x351))))
(assert (not (= (x109 x130 52) 22714585864790908941122872669550960439478132978232957325611369323817919840256)))
(assert (not (= (x109 x668 52) 420737377)))
(assert (= (or x593 x324) x795))
(assert (= (div x426 4) (x223 x426 2)))
(assert (not (= (x109 x772 53) 72057594037927936)))
(assert (=> (<= x692 10000) (not (= (x109 x772 53) x692))))
(assert (not (= (+ x661 4) (x109 x772 53))))
(assert (x654 x756))
(assert (not (= (+ x661 1) 1208907372870555465154560)))
(assert (not (= (+ x661 6) 4294967296)))
(assert (= x189 (and (not x89) x667)))
(assert (not (= 1099511627776 (+ x661 6))))
(assert (x360 x105 x850))
(assert (not (= (x109 x668 52) 53)))
(assert (=> (>= 10000 x524) (not (= (x109 x772 53) x524))))
(assert (x654 x674))
(assert (= x659 (=> (= 1 x254) x375)))
(assert (x654 x453))
(assert (not (= (x109 x130 52) (+ x661 1))))
(assert (=> (<= x238 10000) (not (= (x109 x772 53) x238))))
(assert (not (= (+ x661 5) 576460752303423488)))
(assert (x135 x606))
(assert (x654 x273))
(assert (=> (>= 10000 x602) (not (= x602 (+ x661 5)))))
(assert (= (or (and x129 (not x175)) (and x196 (not x387)) (and x142 x795) (and x191 x438) (and x755 x643) (and x534 x550)) x734))
(assert (not (= (+ x661 1) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= (+ 4 x661) 1152921504606846976)))
(assert (=> (>= 10000 x47) (not (= (x109 x772 53) x47))))
(assert (x459 144115188075855872))
(assert (= (=> (= x279 x67) x480) x656))
(assert (= x331 (=> (= (= (x223 x426 2) 0) x25) (and x25 (=> (= x170 1) x283)))))
(assert (not (= (+ 7 x661) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (not (= (+ 7 x661) 1152921504606846976)))
(assert (not (= 1152921504606846976 (+ x661 2))))
(assert (not (= (+ x661 1) 1000000000000000000000000000)))
(assert (x654 x722))
(assert (x654 x582))
(assert (=> (>= 10000 x812) (not (= x812 (+ 4 x661)))))
(assert (not (= 54 (+ x661 1))))
(assert (not (= 53 (+ x661 5))))
(assert (not (= (+ x661 2) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (not (= (+ 4 x661) (+ x661 1))))
(assert (=> (>= 10000 x130) (not (= (+ x661 1) x130))))
(assert (not (= (+ x661 5) 1099511627776)))
(assert (x654 x485))
(assert (x654 x714))
(assert (x654 x342))
(assert (x654 x586))
(assert (not (= (+ x661 8) 144115188075855872)))
(assert (= x375 (= x254 0)))
(assert (x459 x70))
(assert (=> (<= x812 10000) (not (= x812 (x109 x772 53)))))
(assert (not (= (x109 x130 52) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (=> (<= x400 10000) (not (= x400 (x109 x130 52)))))
(assert (not (= (x109 x130 52) (+ x661 6))))
(assert (not (= (+ x661 4) 500000000000000000000000000)))
(assert (x654 x660))
(assert (x654 x545))
(assert (not (= 1152921504606846976 (x109 x772 53))))
(assert (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x109 x668 52))))
(assert (not (= 409856580 (+ 7 x661))))
(assert (=> (<= x606 10000) (not (= x606 (+ 6 x661)))))
(assert (not (= (+ x661 6) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= 994519296000000 (+ x661 6))))
(assert (not (= (+ 6 x661) (+ x661 1))))
(assert (not (= (+ x661 8) (+ 7 x661))))
(assert (not (= (x109 x668 52) 5708990770740762774496586635741492604263464960)))
(assert (x654 x224))
(assert (not (= (+ x661 1) (x109 x668 52))))
(assert (not (= 274184521717934524641157099916833587358 (+ x661 7))))
(assert (x459 72057594037927936))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ x661 1))))
(assert (not (= (+ x661 3) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (=> (<= x170 10000) (not (= x170 (+ 2 x661)))))
(assert (= x701 (or x150 (and x59 (not x76)))))
(assert (not (= 144115188075855872 (x109 x772 53))))
(assert (x654 x114))
(assert (not (= (x109 x130 52) 144115188075855872)))
(assert (not (= (+ 2 x661) 22714585864790908941122872669550960439478132978232957325611369323817919840256)))
(assert (x654 x16))
(assert (x654 x102))
(assert (x654 x182))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ x661 3))))
(assert (x654 x555))
(assert (not (= (x109 x668 52) 52)))
(assert (not (= (+ 3 x661) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x654 x740))
(assert (=> (<= x692 10000) (not (= (+ 4 x661) x692))))
(assert (=> (<= x772 10000) (not (= (+ 6 x661) x772))))
(assert (x654 x491))
(assert (not (= (+ 1 x661) 65535)))
(assert (= (or x628 x570) x415))
(assert (not (= (x109 x130 52) 1099511627776)))
(assert (x654 x735))
(assert (x654 x551))
(assert (x654 x475))
(assert (not (= 18446744073709551615 (+ 3 x661))))
(assert (x654 x727))
(assert (not (= (x109 x170 54) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (=> (>= 10000 x274) (not (= x274 (x109 x170 54)))))
(assert (=> (<= x130 10000) (not (= (+ x661 8) x130))))
(assert (not (= (x109 x668 52) 22714585864790908941122872669550960439478132978232957325611369323817919840256)))
(assert (not (= 1635491895 (+ x661 2))))
(assert (x654 x428))
(assert (=> (<= x400 10000) (not (= x400 (+ 7 x661)))))
(assert (=> (>= 10000 x44) (not (= (+ x661 2) x44))))
(assert (x654 x183))
(assert (x654 x197))
(assert (x654 x293))
(assert (not (= (+ x661 8) 288230376151711744)))
(assert (=> (<= x351 10000) (not (= (+ x661 2) x351))))
(assert (not (= (+ 3 x661) (x109 x668 52))))
(assert (x654 x12))
(assert (x654 x595))
(assert (not (= 53 (+ x661 1))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x661 5))))
(assert (x654 x178))
(assert (not (= (x109 x668 52) 1099511627776)))
(assert (x654 x130))
(assert (not (= (+ 7 x661) 144115188075855872)))
(assert (not (= 288230376151711744 (x109 x170 54))))
(assert (= (x223 x579 1) (div x579 2)))
(assert (not (= (+ x661 8) (x109 x130 52))))
(assert (x654 x855))
(assert (not (= (x109 x668 52) 946116605)))
(assert (not (= (+ 4 x661) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (not (= (+ x661 7) 1461501637330902918203684832716283019655932542976)))
(assert (x654 x237))
(assert (=> (<= x692 10000) (not (= x692 (+ 5 x661)))))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ x661 3))))
(assert (=> (<= x772 10000) (not (= x772 (x109 x668 52)))))
(assert (not (= 994519296000000 (+ 4 x661))))
(assert (= (=> (and (= (mod (* x276 x394) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x810) (= x810 x58) (= x167 (< x361 x276)) (not x167) (= x361 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x394))) x17) x790))
(assert (not (= 53 (x109 x130 52))))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (+ x661 3))))
(assert (not (= (x109 x130 52) 409856580)))
(assert (not (= 1000000000000000000000000000 (+ x661 6))))
(assert (= x438 (and x175 x129)))
(assert (not (= (x109 x668 52) 1000000000000000000000000000)))
(assert (not (= (+ x661 3) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= (+ 3 x661) 52)))
(assert (x654 x312))
(assert (= x283 (=> (and (<= x130 1461501637330902918203684832716283019655932542975) (<= x193 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x193 0) (= (x539 x269) x130) (= x269 (x109 x170 54)) (= x198 (= 0 x205)) (>= x130 0) (> 1461501637330902918203684832716283019655932542976 x130) (= x193 (x420 x860)) (= (x223 x182 212) x205) (= (x466 7237005577325680195743901738874374364099144639582604309003564681041176166400 x193) x182) (= (x109 x130 52) x860)) (and (=> x198 x496) (=> (and (and (= x205 x112) (= x139 x130) (= 1 x96)) (not x198)) x517)))))
(assert (=> (>= 10000 x238) (not (= (+ x661 6) x238))))
(assert (not (= (+ x661 5) 1099511627775)))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ 5 x661))))
(assert (not (= (x109 x130 52) (+ 4 x661))))
(assert (not (= (+ 7 x661) 31536000)))
(assert (=> (>= 10000 x606) (not (= x606 (+ 8 x661)))))
(assert (not (= 340282366920938463463374607431768211455 (+ 5 x661))))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (+ 8 x661))))
(assert (not (= (+ 1 x661) 1635491895)))
(assert (= (and x597 x488) x667))
(assert (not (= (+ x661 6) (x109 x170 54))))
(assert (x654 x265))
(assert (=> (<= x8 10000) (not (= (+ 6 x661) x8))))
(assert (not (= (x109 x668 52) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (= (=> (= (= x69 0) x474) (and (=> (and x474 (= x424 x591)) x467) (=> (and (not x474) (and (or (and (= x489 1000000000000000000000000000) x385) (and (and (= x187 x560) (= x443 (div x742 31536000)) (= x408 (div x132 994519296000000)) (= x750 x264) (= x35 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x706)) (< (+ x160 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x181 (x695 (+ x354 500000000000000000000000000))) (< 0 x766) (= x213 x346) (= x619 (< x508 x713)) (= (x695 (+ x470 500000000000000000000000000)) x145) (< 0 x622) (= x537 (* x264 x443)) (= (x466 x105 x850) x707) (= x742 (div x181 1000000000000000000000000000)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x187 x408)) (= (ite x72 1 0) x766) (= (ite (not x287) 1 0) x105) (= (ite (< 2 x706) (x344 (- x706 2)) 0) x249) (= 1000000000000000000000000000 x431) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x713) x183) (= x296 x553) (= x470 (mod (* x713 x713) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x767 (= x713 0)) (= (* x187 x408) x311) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x264 x443)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x706 x152)) (= x20 (* x706 x713)) (= x354 (mod (* x408 x713) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< (* x713 x706) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x707 0) (= (x344 (- x706 1)) x152) (= (div x311 2) x346) (= x78 x621) (= (+ x213 x553) x78) (= x160 (div x20 31536000)) (= x118 (not x619)) (= x585 x160) (= (ite (< x35 x152) 1 0) x850) (= x287 (= 0 x706)) (= (+ x585 x431) x296) (= x154 (mod (* x706 x152) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x560 (* x152 x706)) (= x508 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x713)) (= x454 (not x726)) (= (or x404 x118) x206) (< (+ x777 x78) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x93 x777) (< (* x249 x154) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (or x454 x767) x72) (< (+ x346 x296) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x777 (div x537 6)) (= x622 (ite x206 1 0)) (= x404 (= 0 x713)) (= x107 x489) (= x132 (div x145 1000000000000000000000000000)) (= (+ x621 x93) x107) (= x750 (* x154 x249)) (= x726 (< x183 x408))) (not x385))) (and (= x706 (x344 (- x733 x650))) (= (> x650 x197) x173) (= (= 0 x706) x385) (not x173)))) x649))) x260))
(assert (not (= (+ x661 5) 52)))
(assert (x654 x792))
(assert (=> (>= 10000 x524) (not (= x524 (x109 x130 52)))))
(assert (x654 x313))
(assert (=> (<= x8 10000) (not (= (+ 8 x661) x8))))
(assert (x373 x56))
(assert (not (= (x109 x130 52) 31536000)))
(assert (not (= 5708990770740762774496586635741492604263464960 (+ 2 x661))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x109 x772 53))))
(assert (x654 x334))
(assert (x307 x472))
(assert (not (= (+ 8 x661) 1635491895)))
(assert (not (= (+ 2 x661) (+ x661 5))))
(assert (=> (>= 10000 x47) (not (= x47 (+ x661 6)))))
(assert (not (= 576460752303423488 (x109 x668 52))))
(assert (x459 x7))
(assert (x459 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (x654 x124))
(assert (not (= (+ 3 x661) 576460752303423488)))
(assert (x135 x772))
(assert (x135 x668))
(assert (not (= (x109 x170 54) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x654 x381))
(assert (x459 340282366920938463463374607431768211455))
(assert (x459 1099511627775))
(assert (=> (>= 10000 x44) (not (= (+ 6 x661) x44))))
(assert (not (= (+ 2 x661) (x109 x668 52))))
(assert (not (= (x109 x772 53) (x109 x668 52))))
(assert (not (= 1099511627775 (+ x661 6))))
(assert (= (div x301 6582018229284824168619876730229402019930943462534319453394436096) (x223 x301 212)))
(assert (not (= (+ 2 x661) 1099511627776)))
(assert (=> (<= x606 10000) (not (= (x109 x130 52) x606))))
(assert (=> (>= 10000 x692) (not (= x692 (+ 7 x661)))))
(assert (= x263 (and x711 (not x332))))
(assert (not (= (x109 x170 54) 340282366920938463463374607431768211456)))
(assert (=> (<= x170 10000) (not (= x170 (+ 7 x661)))))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ x661 4))))
(assert (x654 x80))
(assert (=> (<= x44 10000) (not (= x44 (+ 3 x661)))))
(assert (not (= (x109 x170 54) 409856580)))
(assert (=> (<= x44 10000) (not (= x44 (+ x661 4)))))
(assert (not (= (+ x661 1) 1099511627775)))
(assert (x654 x429))
(assert (x459 5708990770740762774496586635741492604263464960))
(assert (not (= (+ 4 x661) 409856580)))
(assert (not (= (+ x661 2) 340282366920938463463374607431768211456)))
(assert (x654 x684))
(assert (not (= (+ 7 x661) 1099511627776)))
(assert (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x109 x772 53))))
(assert (x654 x535))
(assert (not (= (+ 7 x661) 576460752303423488)))
(assert (x459 1208907372870555465154560))
(assert (not (= (x109 x772 53) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 6 x661))))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (+ x661 4))))
(assert (= (and x76 x59) x150))
(assert (x654 x29))
(assert (not (= (+ x661 8) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (= x874 (or x780 x575)))
(assert (=> (>= 10000 x772) (not (= (+ 5 x661) x772))))
(assert (x654 x228))
(assert (x654 x676))
(assert (x459 x507))
(assert (x770 x230))
(assert (=> (>= 10000 x274) (not (= x274 (+ 2 x661)))))
(assert (x654 x177))
(assert (not (= (x109 x170 54) (+ 7 x661))))
(assert (x654 x402))
(assert (=> (<= x772 10000) (not (= (+ x661 8) x772))))
(assert (not (= (+ x661 2) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= (x109 x772 53) 1635491895)))
(assert (x654 x437))
(assert (x654 x559))
(assert (not (= 72057594037927936 (x109 x170 54))))
(assert (=> (<= x400 10000) (not (= (+ x661 8) x400))))
(assert (not (= (x109 x170 54) 274184521717934524641157099916833587358)))
(assert (= (and x434 x474) x439))
(assert (x770 x55))
(assert (not (= 946116605 (+ 4 x661))))
(assert (x654 x828))
(assert (= x65 (=> (= 0 x254) x375)))
(assert (not (= 65536 (+ x661 3))))
(assert (not (= (+ x661 5) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (x654 x309))
(assert (=> (>= 10000 x453) (not (= (x109 x130 52) x453))))
(assert (not (= (+ x661 8) (+ 2 x661))))
(assert (not (= (+ 3 x661) 1099511627776)))
(assert (x654 x143))
(assert (x459 x827))
(assert (not (= (+ x661 8) (+ x661 3))))
(assert (x654 x211))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ 1 x661))))
(assert (not (= (+ 8 x661) 340282366920938463463374607431768211455)))
(assert (x654 x133))
(assert (= (div x791 281474976710656) (x223 x791 48)))
(assert (x654 x174))
(assert (not (= 4294967296 (+ x661 1))))
(assert (not (= (+ x661 7) 4294967296)))
(assert (=> (>= 10000 x44) (not (= x44 (+ x661 7)))))
(assert (x654 x798))
(assert (=> (>= 10000 x238) (not (= x238 (x109 x170 54)))))
(assert (x459 576460752303423488))
(assert (x654 x253))
(assert (=> (>= 10000 x130) (not (= (+ x661 6) x130))))
(assert (not (= (+ 8 x661) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (+ 2 x661) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= (x109 x668 52) 54)))
(assert (x654 x192))
(assert (not (= 409856580 (+ 2 x661))))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ 5 x661))))
(assert (not (= 1099511627776 (+ x661 4))))
(assert (=> (<= x453 10000) (not (= x453 (+ 7 x661)))))
(assert (x654 x210))
(assert (not (= (x109 x772 53) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x109 x170 54) 31536000)))
(assert (x654 x816))
(assert (=> (<= x453 10000) (not (= (+ 8 x661) x453))))
(assert (=> (<= x351 10000) (not (= (+ x661 3) x351))))
(assert (= (and (not x52) x576) x26))
(assert (not (= 71776119061217280 (+ 6 x661))))
(assert (x654 x472))
(assert (x654 x22))
(assert (x654 x419))
(assert (not (= (+ x661 5) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (x654 x358))
(assert (x654 x610))
(assert (x654 x873))
(assert (not (= (x109 x130 52) (x109 x772 53))))
(assert (x654 x452))
(assert (=> (>= 10000 x130) (not (= (+ x661 3) x130))))
(assert (not (= 65535 (x109 x668 52))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (x109 x130 52))))
(assert (not (= (x109 x668 52) (+ x661 6))))
(assert (x654 x606))
(assert (=> (<= x453 10000) (not (= (x109 x772 53) x453))))
(assert (x459 x402))
(assert (x654 x696))
(assert (= x447 (=> (and (= x550 (= x727 0)) (= (x695 (+ x423 64)) x631) (= x414 (x695 (+ x423 32)))) (and (=> (and (not x550) (and (= (x695 (+ 64 x631)) x492) (= (not (= 0 x559)) x458) (= x548 (x466 144115188075855872 x56)) (= 1600 x746) (= x191 (not (= x806 0))) (= (x466 576460752303423488 x56) x559) (= (x695 (+ x631 32)) x828) (= x755 (not (= 0 x548))) (= x376 (x466 288230376151711744 x56)) (= (x466 72057594037927936 x56) x469) (= x175 (not (= 0 x469))) (= x248 (not (= 0 x376))) (= (x466 1152921504606846976 x56) x806))) (and (=> (not x175) x65) (=> (and (and (= (x695 (+ x492 64)) x856) (= x832 (x695 (+ x492 32)))) x175) (and (=> x191 x65) (=> (and (not x191) (and (= (x695 (+ 64 x856)) x592) (= x582 (x695 (+ x856 32))))) (and (=> (and (and (= (x466 5708990770740762774496586635741492604263464960 x56) x655) (= (= x245 0) x494) (= x245 (x223 x655 116)) (= x485 1600)) (not x755)) (and (=> (and (not x494) (and (= x554 (> x579 0)) (= 1600 x679) (= x579 (x223 x791 48)) (= (x466 71776119061217280 x56) x791))) (and (=> (and (= x58 1) (not x554)) x17) (=> (and (and (= x472 (ite (< x579 32) 1 0)) (= (ite (> 78 x579) 1 0) x367) (= x302 (= 0 (x23 x367 x472)))) x554) (and (=> (and (not x302) (= x58 (x530 10 x579))) x17) (=> (and x302 (= (< 1 x579) x689)) (and (=> (and (and (= x394 10) (= x276 1)) (not x689)) x790) (=> x689 x131))))))) (=> (and x494 (and (= (x695 (+ 32 x592)) x88) (= (x695 (+ x592 64)) x164) (= x601 x164))) x623))) (=> x755 x65))))))) (=> x550 x65)))))
(assert (=> (<= x524 10000) (not (= (+ 2 x661) x524))))
(assert (x654 x71))
(assert (= (and (not x198) x817) x50))
(assert (=> (<= x170 10000) (not (= (x109 x668 52) x170))))
(assert (x654 x244))
(assert (x654 x591))
(assert (x654 x359))
(assert (not (= 1635491895 (x109 x170 54))))
(assert (not (= 409856580 (+ x661 3))))
(assert (=> (>= 10000 x812) (not (= x812 (+ 3 x661)))))
(assert (x654 x743))
(assert (x654 x340))
(assert (not (= (+ x661 2) 72057594037927936)))
(assert (not (= (+ x661 3) (+ x661 1))))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ x661 8))))
(assert (=> (<= x170 10000) (not (= (+ 4 x661) x170))))
(assert (not (= (x109 x668 52) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert true)
(assert (not (= (+ 5 x661) (+ x661 1))))
(assert (x654 x806))
(assert (x654 x640))
(assert (not (= (+ x661 4) (x109 x668 52))))
(assert (x459 x133))
(assert (not (= (+ 8 x661) 576460752303423488)))
(assert (x770 x507))
(assert (= (div x639 4) (x223 x639 2)))
(assert (=> (<= x146 10000) (not (= x146 (+ x661 2)))))
(assert (not (= (+ 7 x661) (+ 2 x661))))
(assert (not (= 72057594037927936 (+ x661 6))))
(assert (x654 x371))
(assert (= (or x682 x578) x14))
(assert (not (= (+ 8 x661) 1099511627776)))
(assert (x654 x583))
(assert (=> (>= 10000 x130) (not (= (+ x661 2) x130))))
(assert (=> (<= x146 10000) (not (= x146 (+ x661 5)))))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x109 x130 52))))
(assert (not (= (+ 2 x661) (+ 4 x661))))
(assert (not (= 340282366920938463463374607431768211456 (+ 7 x661))))
(assert (x654 x506))
(assert (not (= (x109 x130 52) 946116605)))
(assert (= x759 (or x415 x439)))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ x661 3))))
(assert (not (= (+ 4 x661) 340282366920938463463374607431768211455)))
(assert (not (= (x109 x130 52) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (= x593 (and x425 x605)))
(assert (x654 x857))
(assert (x654 x607))
(assert (not (= (+ 3 x661) (+ 5 x661))))
(assert (x654 x547))
(assert (x654 x713))
(assert (not (= 52 (+ 1 x661))))
(assert (not (= (x109 x772 53) 1208907372870555465154560)))
(assert (x654 x787))
(assert (x459 x665))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ x661 8))))
(assert (x654 x195))
(assert (=> (<= x44 10000) (not (= (+ 1 x661) x44))))
(assert (=> (>= 10000 x47) (not (= x47 (+ x661 4)))))
(assert (x654 x147))
(assert (=> (<= x274 10000) (not (= x274 (+ 5 x661)))))
(assert (not (= (+ 5 x661) 71776119061217280)))
(assert (not (= 72057594037927936 (+ x661 1))))
(assert (=> (>= 10000 x668) (not (= (x109 x170 54) x668))))
(assert (not (= (+ 2 x661) 65535)))
(assert (not (= (x109 x772 53) 994519296000000)))
(assert (not (= (+ x661 5) 1152921504606846976)))
(assert (not (= 1099511627776 (x109 x772 53))))
(assert (not (= (+ 3 x661) 53)))
(assert (x501 x535))
(assert (not (= (x109 x772 53) (+ 6 x661))))
(assert (x654 x444))
(assert (not (= (x109 x170 54) (+ x661 3))))
(assert (x654 x225))
(assert (= (or x531 x199 x670) x605))
(assert (=> (<= x47 10000) (not (= x47 (+ x661 7)))))
(assert (x654 x432))
(assert (= (div x182 6582018229284824168619876730229402019930943462534319453394436096) (x223 x182 212)))
(assert (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (+ x661 6))))
(assert (= x503 (and x643 (not x755))))
(assert (=> (<= x44 10000) (not (= (x109 x170 54) x44))))
(assert (not (= (+ 5 x661) (+ 7 x661))))
(assert (= (x223 x736 64) (div x736 18446744073709551616)))
(assert (x300 x56))
(assert (=> (<= x524 10000) (not (= (+ 5 x661) x524))))
(assert (not (= 65536 (x109 x130 52))))
(assert (x654 x56))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ 4 x661))))
(assert (not (= (+ x661 3) 340282366920938463463374607431768211455)))
(assert (= (or x784 x796) x580))
(assert (not (= (+ x661 2) 71776119061217280)))
(assert (not (= (x109 x772 53) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (x135 x400))
(assert (not (= 144115188075855872 (x109 x668 52))))
(assert (not (= 946116605 (+ x661 6))))
(assert (= x623 (=> (and (or (and (= x544 0) x83) (and (and (<= 0 x433) (> 340282366920938463463374607431768211456 x433) (>= 340282366920938463463374607431768211455 x433) (= x433 (x851 x681)) (= x681 (+ 1 x325)) (= x433 x544)) (not x83))) (and (> 1461501637330902918203684832716283019655932542976 x306) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x684) x500) (= x546 (= x684 0)) (= (div x66 1000000000000000000000000000) x75) (= (mod (* x69 x684) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x547) (< 0 x815) (= x321 (not x590)) (= (or x546 x321) x90) (= x83 (= 0 x252)) (= x252 (x223 x270 176)) (= x66 (x695 (+ x547 500000000000000000000000000))) (= (x466 6582018229189043197315758676582005330734049138558148258257960960 x56) x270) (<= x306 1461501637330902918203684832716283019655932542975) (<= 0 x306) (= (+ x749 1) x325) (= (x695 (+ 288 x190)) x209) (= x815 (ite x90 1 0)) (= x716 1600) (= x190 (x695 (+ x601 128))) (= x306 (x460 x325)) (= x590 (< x500 x69)))) x111)))
(assert (x654 x200))
(assert (x654 x615))
(assert (x654 x251))
(assert (not (= (+ x661 8) 1099511627775)))
(assert (not (= (x109 x668 52) 31536000)))
(assert (not (= (+ x661 4) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x654 x697))
(assert (=> (<= x238 10000) (not (= x238 (+ x661 7)))))
(assert (x654 x856))
(assert (not (= (+ x661 8) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (x654 x864))
(assert (not (= (+ x661 6) 274184521717934524641157099916833587358)))
(assert (not (= (x109 x772 53) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (not (= (+ x661 3) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (=> (>= 10000 x47) (not (= (+ x661 2) x47))))
(assert (not (= (x109 x130 52) 576460752303423488)))
(assert (x654 x257))
(assert (= x374 (and x874 (not x483))))
(assert (not (= 409856580 (+ 5 x661))))
(assert (not (= (+ x661 7) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x109 x170 54))))
(assert (=> (>= 10000 x8) (not (= x8 (x109 x130 52)))))
(assert (= (and (not x494) x503) x479))
(assert (= (and (not x689) x776) x218))
(assert (not (= 71776119061217280 (x109 x668 52))))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ x661 7))))
(assert (=> (>= 10000 x351) (not (= (+ x661 1) x351))))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x109 x170 54))))
(assert (x654 x406))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x109 x772 53))))
(assert (=> (>= 10000 x238) (not (= x238 (+ 8 x661)))))
(assert (x654 x320))
(assert (=> (<= x668 10000) (not (= x668 (+ 4 x661)))))
(assert (x654 x766))
(assert (not (= (+ 1 x661) 946116605)))
(assert (not (= (+ 1 x661) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 340282366920938463463374607431768211455 (+ 7 x661))))
(assert (x135 x146))
(assert (x654 x810))
(assert (=> (<= x238 10000) (not (= x238 (+ 4 x661)))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ x661 2))))
(assert (not (= (x109 x668 52) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= 2054196882 (x109 x170 54))))
(assert (x654 x426))
(assert (= x648 (and x487 x122)))
(assert (not (= (+ 6 x661) 340282366920938463463374607431768211456)))
(assert (x135 x812))
(assert (not (= (+ 2 x661) 18446744073709551615)))
(assert (x654 x153))
(assert (not (= 65535 (x109 x772 53))))
(assert (not (= (x109 x170 54) 576460752303423488)))
(assert (not (= 65535 (x109 x170 54))))
(assert (= (and x630 x866) x836))
(assert (not (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x109 x668 52))))
(assert (not (= (+ x661 5) 1000000000000000000000000000)))
(assert (not (= (+ 6 x661) 1461501637330902918203684832716283019655932542975)))
(assert (x654 x349))
(assert (x135 x602))
(assert (not (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 (x109 x130 52))))
(assert (x654 x777))
(assert (x654 x742))
(assert (not (= (+ x661 1) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (not (= (+ 3 x661) 288230376151711744)))
(assert (x654 x620))
(assert (x243 x56))
(assert (x654 x772))
(assert (not (= 274184521717934524641157099916833587358 (+ x661 3))))
(assert (not (= 52 (+ x661 7))))
(assert (x654 x44))
(assert (x654 x92))
(assert (=> (<= x812 10000) (not (= x812 (+ 7 x661)))))
(assert (x654 x157))
(assert (x654 x424))
(assert (=> (<= x130 10000) (not (= x130 (x109 x772 53)))))
(assert (=> (>= 10000 x47) (not (= (+ x661 3) x47))))
(assert (=> (>= 10000 x170) (not (= (+ 6 x661) x170))))
(assert (= x567 (=> (and (= (= x814 0) x76) (or x76 (not x76))) x48)))
(assert (x654 x364))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ 8 x661))))
(assert (not (= (x109 x170 54) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x654 x212))
(assert (=> (>= 10000 x606) (not (= (x109 x668 52) x606))))
(assert (= x762 (=> (and (or (and (and (= (= x200 (x436 x668)) x786) (= x794 (x473 x524)) (= (<= x794 (x436 x524)) x700) x786 x700 (= x200 (x473 x668)) (> 4294967296 x271)) x483) (not x483)) (and (= (x466 340282366920938463463374607431768211455 x70) x642) (= (> x55 340282366920938463463374607431768211455) x397) (= (x695 (+ x166 32)) x342) (not x63) (= (x695 (+ x457 x209)) x368) (not x239) (= (x695 (+ 32 x342)) x125) (= (> x814 0) x483) (= x451 (x466 340282366920938463463374607431768211455 x55)) (= x584 (x695 (+ 32 x217))) (not x357) (= (x695 (+ 32 x125)) x97) (= x536 (= x801 0)) (= (x695 (+ 32 x368)) x166) (= (x695 (+ x29 32)) x541) (= (x352 x29) x70) (= (x695 (+ x368 4)) x637) (= x63 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x210) (and (= true (<= x210 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x210 96)))) (= x620 (x695 (+ 31 x210))) (= x859 x668) (= (x352 x541) x55) (= (x466 115792089237316195423570985008687907853269984665640564039457584007913129639904 x620) x457) (= (x695 (+ x637 32)) x217) (= x79 (x466 340282366920938463463374607431768211455 x507)) (= x239 (< 340282366920938463463374607431768211455 x70)) (not x397) (= x507 (x352 x209)) (= x29 (x695 (+ x209 32))) (= x357 (< 340282366920938463463374607431768211455 x507)) (not x536))) x567)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 2 x661))))
(assert (=> (>= 10000 x602) (not (= (x109 x170 54) x602))))
(assert (x693 x733))
(assert (=> (>= 10000 x400) (not (= x400 (+ 5 x661)))))
(assert (x654 x450))
(assert (=> (<= x524 10000) (not (= x524 (+ 7 x661)))))
(assert (not (= (x109 x130 52) 288230376151711744)))
(assert (not (= (+ 6 x661) (+ x661 5))))
(assert (x459 (x344 (- x827 1))))
(assert (x654 x831))
(assert (x654 x411))
(assert (not (= (x109 x668 52) 2054196882)))
(assert (x654 x511))
(assert (= x131 (=> (and (= x214 (not (> x595 1))) (= x156 (x466 1 x579)) (= (x223 x579 1) x595) (= x128 (= 0 x156))) (and x214 (=> (and (= (ite x128 1 10) x276) (= x394 100)) x790)))))
(assert (not (= 946116605 (+ 3 x661))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ x661 5))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (x109 x170 54))))
(assert (=> (<= x668 10000) (not (= x668 (+ 5 x661)))))
(assert (=> (>= 10000 x351) (not (= x351 (+ x661 6)))))
(assert (x135 x274))
(assert (not (= (+ 4 x661) 54)))
(assert (not (= (+ 1 x661) 65536)))
(assert (not (= (+ 6 x661) 2054196882)))
(assert (= x236 (or x526 x280)))
(assert (not (= 274184521717934524641157099916833587358 (x109 x130 52))))
(assert (=> (<= x8 10000) (not (= (+ x661 7) x8))))
(assert (not (= (+ x661 7) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x654 x492))
(assert (x770 x70))
(assert (=> (<= x812 10000) (not (= (+ 1 x661) x812))))
(assert (=> (<= x8 10000) (not (= x8 (x109 x170 54)))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x109 x170 54))))
(assert (x459 1))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ x661 3))))
(assert (= 0 (x533 x581)))
(assert (x654 x308))
(assert (not (= 1099511627775 (x109 x668 52))))
(assert (not (= (+ 8 x661) 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (=> (>= 10000 x668) (not (= (+ x661 8) x668))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ x661 4))))
(assert (not (= 2054196882 (+ 3 x661))))
(assert (x654 x234))
(assert (=> (>= 10000 x130) (not (= (x109 x170 54) x130))))
(assert (=> (>= 10000 x8) (not (= x8 (x109 x668 52)))))
(assert (not (= (+ x661 2) (+ 3 x661))))
(assert (=> (>= 10000 x692) (not (= (x109 x170 54) x692))))
(assert (not (= 340282366920938463463374607431768211456 (+ x661 1))))
(assert (not (= (+ 1 x661) 5708990770740762774496586635741492604263464960)))
(assert (x654 x139))
(assert (=> (>= 10000 x351) (not (= (x109 x772 53) x351))))
(assert (= (=> (and (= x423 x660) (= x540 (x466 1099511627775 x733)) (= x148 x428) (= x591 x684)) x447) x41))
(assert (not (= (+ 5 x661) 288230376151711744)))
(assert (=> (>= 10000 x274) (not (= (x109 x772 53) x274))))
(assert (= x561 (or x247 x648)))
(assert (=> (<= x602 10000) (not (= x602 (+ 3 x661)))))
(assert (not (= (+ x661 1) 576460752303423488)))
(assert (x654 x601))
(assert (x654 x409))
(assert (x654 x753))
(assert (=> (<= x400 10000) (not (= (x109 x668 52) x400))))
(assert (= (=> (and (or (and x588 (and (< x229 4294967296) (= 1 x202))) (and (= x61 x202) (not x588))) (and (= x2 (= 0 x120)) (= x475 (x466 115792089237316195423570985008687907853269984665640564039457584007913129639904 x7)) (= (x695 (+ x542 31)) x7) (= (> x61 0) x588) (= x305 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x542) (and (> 32 x542) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x542) true)))) (not x305) (not x2) (= (x53 1632) x69) (= (x695 (+ 1632 x475)) x450))) x62) x600))
(assert (x654 x18))
(assert (x654 x270))
(assert (not (= 1000000000000000000000000000 (x109 x170 54))))
(assert (not (= 340282366920938463463374607431768211455 (x109 x170 54))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ x661 6))))
(assert (not (= (x109 x668 52) 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (x388 x309))
(assert (=> (<= x44 10000) (not (= (+ x661 5) x44))))
(assert (not (= (+ x661 2) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x360 x709 x384))
(assert (x654 x587))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ 6 x661))))
(assert (x654 x812))
(assert (not (= 52 (+ x661 6))))
(assert (not (= (+ 8 x661) 65535)))
(assert (x654 x252))
(assert (not (= (x109 x668 52) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= (+ 3 x661) 1000000000000000000000000000)))
(assert (not (= (+ 8 x661) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x654 x785))
(assert (x654 x677))
(assert (= 0 (x533 x541)))
(assert (=> (>= 10000 x351) (not (= (+ 4 x661) x351))))
(assert (not (= (+ 7 x661) 420737377)))
(assert (x654 x88))
(assert (not (= (+ 1 x661) (+ x661 7))))
(assert (=> (<= x606 10000) (not (= x606 (x109 x772 53)))))
(assert (not (= 4294967296 (+ x661 4))))
(assert (x654 x165))
(assert (x654 x355))
(assert (= x683 (or x825 x50)))
(assert (not (= (x109 x130 52) 1000000000000000000000000000)))
(assert (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x109 x130 52))))
(assert (x654 x706))
(assert (= x818 (and x701 (not x347))))
(assert (= 0 (x533 x565)))
(assert (not (= (+ 6 x661) 1152921504606846976)))
(assert (=> (<= x8 10000) (not (= (+ x661 2) x8))))
(assert (=> (>= 10000 x812) (not (= (+ 5 x661) x812))))
(assert (=> (<= x772 10000) (not (= x772 (x109 x772 53)))))
(assert (not (= (+ 6 x661) (+ 8 x661))))
(assert (not (= (+ x661 7) 2054196882)))
(assert (=> (<= x812 10000) (not (= x812 (x109 x130 52)))))
(assert (not (= (+ x661 1) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (not (= (+ x661 6) 18446744073709551615)))
(assert (x462 x56))
(assert (not (= 500000000000000000000000000 (+ 8 x661))))
(assert (x654 x848))
(assert (x135 x47))
(assert (=> (<= x602 10000) (not (= (+ x661 1) x602))))
(assert (x654 x773))
(assert (x654 x589))
(assert (not (= (x109 x170 54) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x654 x500))
(assert (x654 x376))
(assert (x654 x603))
(assert (x135 x44))
(assert (x654 x120))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ x661 1))))
(assert (=> (<= x668 10000) (not (= x668 (+ x661 2)))))
(assert (= x839 (=> (and (and (= x412 (x695 (+ x368 4))) (= x113 (x695 (+ 32 x412))) (= x221 (x695 (+ 32 x113))) (= (< 0 x823) x52) (> x607 0) (= x583 (x695 (+ x221 32)))) (or (and x52 (and (< x518 4294967296) (= (>= (x807 x524) x124) x800) (= (x652 x524) x124) (= (= (x807 x400) x241) x521) (= (x652 x400) x241) x521 x800)) (not x52))) x151)))
(assert (x654 x499))
(assert (x654 x259))
(assert (x654 x160))
(assert (not (= 994519296000000 (+ x661 8))))
(assert (not (= (x109 x772 53) 576460752303423488)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x109 x170 54))))
(assert (not (= (+ 2 x661) 144115188075855872)))
(assert (=> (>= 10000 x400) (not (= (x109 x772 53) x400))))
(assert (not (= 144115188075855872 (+ x661 3))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x109 x130 52))))
(assert (not (= (+ x661 5) 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (x654 x58))
(assert (= (or x788 x465) x552))
(assert (not (= (+ x661 7) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x770 x665))
(assert (not (= (+ 4 x661) (+ x661 7))))
(assert (x654 x163))
(assert (x360 x827 (x344 (- x827 1))))
(assert (=> (<= x274 10000) (not (= (+ x661 4) x274))))
(assert (not (= (+ 8 x661) 340282366920938463463374607431768211456)))
(assert (x654 x423))
(assert (x307 x674))
(assert (=> (>= 10000 x146) (not (= x146 (+ x661 7)))))
(assert (not (= 72057594037927936 (+ 8 x661))))
(assert (not (= (+ x661 3) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (not (= (+ 3 x661) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x654 x60))
(assert (= (and (not x554) x479) x670))
(assert (not (= 31536000 (+ 5 x661))))
(assert (= x825 (or x189 x738)))
(assert (not (= 5708990770740762774496586635741492604263464960 (+ x661 8))))
(assert (= (and (not x385) x86) x570))
(assert (=> (<= x8 10000) (not (= x8 (+ 5 x661)))))
(assert (not (= 1208907372870555465154560 (+ 2 x661))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x109 x772 53))))
(assert (not (= (+ x661 3) 65535)))
(assert (=> (>= 10000 x238) (not (= (x109 x130 52) x238))))
(assert (not (= 576460752303423488 (+ x661 6))))
(assert (x654 x805))
(assert (x654 x868))
(assert (not (= (x109 x668 52) 1152921504606846976)))
(assert (x459 x620))
(assert (x654 x164))
(assert (not (= (x109 x130 52) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x654 x838))
(assert (not (= 65536 (+ 5 x661))))
(assert (not (= 420737377 (+ x661 6))))
(assert (x840 x244 x674))
(assert (x135 x8))
(assert (x654 x668))
(assert (x654 x335))
(assert (=> (<= x47 10000) (not (= (+ x661 1) x47))))
(assert (x459 x709))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ x661 4))))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ x661 6))))
(assert (not (= (+ x661 7) 1635491895)))
(assert (=> (>= 10000 x8) (not (= x8 (+ x661 3)))))
(assert (x654 x433))
(assert (not (= 1152921504606846976 (+ x661 8))))
(assert (not (= (+ x661 2) 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (=> (>= 10000 x274) (not (= (+ x661 6) x274))))
(assert (x654 x222))
(assert (x654 x282))
(assert (not (= 2054196882 (+ 2 x661))))
(assert (x388 x380))
(assert (not (= (+ x661 6) (+ x661 4))))
(assert (=> (>= 10000 x524) (not (= x524 (+ 3 x661)))))
(assert (not (= 340282366920938463463374607431768211456 (+ 5 x661))))
(assert (x654 x642))
(assert (= (or x486 x374) x59))
(assert (x654 x524))
(assert (x654 x47))
(assert (= (and x140 x302) x776))
(assert (=> (>= 10000 x274) (not (= x274 (x109 x130 52)))))
(assert (not (= (+ x661 6) 5708990770740762774496586635741492604263464960)))
(assert (not (= (+ x661 5) 144115188075855872)))
(assert (not (= (x109 x130 52) 71776119061217280)))
(assert (not (= (+ 8 x661) (+ x661 4))))
(assert (not (= (+ 1 x661) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (not (= (x109 x130 52) 420737377)))
(assert (not (= (x109 x772 53) 52)))
(assert (=> (>= 10000 x274) (not (= (+ 8 x661) x274))))
(assert (not (= (+ 7 x661) (x109 x668 52))))
(assert (= (mod (ite (> 256 x723) (x530 2 x723) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x456 1 x723)))
(assert (not (= (+ 7 x661) 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (+ 2 x661))))
(assert (not (= (x109 x772 53) (+ x661 5))))
(assert (=> (<= x692 10000) (not (= x692 (x109 x668 52)))))
(assert (=> (>= 10000 x772) (not (= (x109 x130 52) x772))))
(assert (x654 x719))
(assert (not (= (+ x661 7) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 1635491895 (x109 x668 52))))
(assert (not (= 1099511627775 (+ x661 4))))
(assert (=> (>= 10000 x602) (not (= x602 (+ x661 4)))))
(assert (x654 x637))
(assert (x654 x508))
(assert (= (and x874 x483) x486))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x661 8))))
(assert (= x140 (and x554 x479)))
(assert (not (= 1635491895 (x109 x130 52))))
(assert (x654 x146))
(assert (not (= (x109 x170 54) 5708990770740762774496586635741492604263464960)))
(assert (x654 x70))
(assert (x654 x548))
(assert (not (= 1208907372870555465154560 (x109 x170 54))))
(assert (= (and x215 (not x341)) x745))
(assert (x654 x638))
(assert (x840 x367 x472))
(assert (x654 x78))
(assert (not (= (+ 7 x661) (x109 x772 53))))
(assert (not (= (+ 7 x661) 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (not (= (+ x661 1) 31536000)))
(assert (=> (<= x238 10000) (not (= (+ 5 x661) x238))))
(assert (= (=> (and (or (and (and (= 1 x607) (> x657 0) (= x657 (x379 x668))) x347) (and (not x347) (and (= x138 (= x18 0)) (= 32 x271) (= (not x138) x624) (= (ite x624 1 0) x607)))) (and (= (= 0 x271) x347) (< 0 x814))) x839) x48))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ x661 8))))
(assert (x654 x653))
(assert (x654 x258))
(assert (not (= (+ 3 x661) 1635491895)))
(assert (not (= 1099511627776 (+ 1 x661))))
(assert (x654 x7))
(assert (not (= (+ x661 7) 1208907372870555465154560)))
(assert (not (= (x109 x772 53) (+ 3 x661))))
(assert (not (= (+ x661 6) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (= x817 (or x15 x263)))
(assert (x654 x715))
(assert (x654 x8))
(assert (x654 x323))
(assert (not (= (+ x661 6) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (not (= (+ x661 7) 71776119061217280)))
(assert (= x62 (=> (and (= (= x855 x273) x599) (<= x102 1099511627775) (= (x695 (+ x565 32)) x581) (= x73 (x695 (+ x566 x450))) (= x535 (x695 (+ 31 x229))) (= (x695 (+ x450 32)) x565) (= x292 (= x202 0)) (= (x724 x158) x855) (= (x43 x581) x318) (= (x43 x233) x102) (= x506 (x43 x450)) (>= 1099511627775 x855) (= (or (and (< x229 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x229))) (> x229 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x77) (= (x43 x565) x808) (<= 0 x855) (= x566 (x466 115792089237316195423570985008687907853269984665640564039457584007913129639904 x535)) (= (x695 (+ x581 32)) x233) (< x855 1099511627776) (not x77) (= (x466 1099511627775 x733) x273) (not x292)) (and (=> (and (and (= x866 (= 0 x333)) (or (and x866 (= x297 x148)) (and (and (= (< x197 x650) x421) (= x104 (> x587 x717)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x22 1000000000000000000000000000)) (= x365 (ite x219 1 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x297) x717) (= x219 (or x764 x748)) (= x355 (x466 340282366920938463463374607431768211455 x665)) (= 1000000000000000000000000000 x782) (not x3) (= (not x104) x764) (= x665 x148) (= (> x665 340282366920938463463374607431768211455) x3) (= x22 x867) (= (x695 (+ 500000000000000000000000000 x114)) x532) (= x587 (+ x782 x867)) (= x22 (div x117 31536000)) (= x117 (* x265 x333)) (= (x344 (- x733 x650)) x265) (> x365 0) (= (mod (* x297 x587) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x114) (= x665 (div x532 1000000000000000000000000000)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x333 x265)) (not x421) (= x748 (= x297 0))) (not x866)))) (not x599)) x260) (=> (and x599 (and (= x684 x424) (= x297 x428) (= x73 x423))) x447)))))
(assert (not (= (x109 x772 53) 1099511627775)))
(assert (not (= (+ x661 8) 22714585864790908941122872669550960439478132978232957325611369323817919840256)))
(assert (not (= (+ x661 1) 144115188075855872)))
(assert (not (= (+ 2 x661) 81391198934588725741764901232338779421906459474344603328544298677233738842112)))
(assert (not (= 1208907372870555465154560 (x109 x130 52))))
(assert (x654 x291))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ 5 x661))))
(assert (x654 x368))
(assert (=> (<= x146 10000) (not (= x146 (x109 x170 54)))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ 4 x661))))
(assert (= x324 (and x605 (not x425))))
(assert (not (= 18446744073709551615 (+ x661 1))))
(assert (not (= 340282366920938463463374607431768211455 (x109 x668 52))))
(assert (= (x533 x233) 0))
(assert (x654 x824))
(assert (x459 x579))
(assert (= (or (and x718 (not x690)) x596) x854))
(assert (x654 x730))
(assert (not (= (x109 x130 52) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (x654 x365))
(assert (not (= (+ x661 5) 274184521717934524641157099916833587358)))
(assert (not (= 18446744073709551615 (x109 x170 54))))
(assert (= x111 (=> (and (and (= x1 (x695 (+ x359 32))) (= x696 (x695 (+ x491 32))) (= (x695 (+ 32 x1)) x743) (= (> x857 0) x448) (= (x695 (+ 32 x225)) x336) (= (x695 (+ x743 32)) x756) (= (x695 (+ 32 x696)) x359) (= (x695 (+ 4 x209)) x677) (= (x695 (+ 32 x677)) x225) (= (x695 (+ 32 x336)) x491)) (or (and (not x448) (= x801 x857)) (and x448 (and (= x801 1) (< x210 4294967296))))) x762)))
(assert (=> (<= x146 10000) (not (= (x109 x668 52) x146))))
(assert (= (and (not x448) x568) x780))
(assert (not (= (+ 5 x661) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (not (= (x109 x668 52) 409856580)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x109 x170 54))))
(assert (x654 x665))
(assert (not (= (+ 4 x661) 144115188075855872)))
(assert (not (= (+ x661 6) (+ 3 x661))))
(assert (= x784 (and x494 x503)))
(assert (x654 x275))
(assert (not (= (+ 3 x661) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (not (= 4294967296 (x109 x170 54))))
(assert (not (= (+ 8 x661) (x109 x668 52))))
(assert (= x247 (and (not x122) x487)))
(assert (= (and x99 x683) x280))
(assert (x654 x351))
(assert (=> (<= x44 10000) (not (= x44 (x109 x772 53)))))
(assert (not (= (+ 5 x661) 500000000000000000000000000)))
(assert (x654 x227))
(assert (x654 x274))
(assert (x654 x664))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x109 x668 52))))
(assert (= (and x793 (not x757)) x196))
(assert (not x21))
(assert (=> (>= 10000 x400) (not (= (x109 x170 54) x400))))
(assert (not (= 274184521717934524641157099916833587358 (+ x661 4))))
(assert (=> (<= x812 10000) (not (= x812 (+ 8 x661)))))
(assert (=> (>= 10000 x453) (not (= x453 (x109 x170 54)))))
(assert (x459 x505))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x661 4))))
(assert (and (= 1024 (x530 2 10)) (= (x530 2 85) 38685626227668133590597632) (= 91343852333181432387730302044767688728495783936 (x530 2 156)) (= 47890485652059026823698344598447161988085597568237568 (x530 2 175)) (= (x530 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 21267647932558653966460912964485513216 (x530 2 124)) (= 134217728 (x530 2 27)) (= (x530 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x530 2 103) 10141204801825835211973625643008) (= (x530 2 1) 2) (= (x530 2 25) 33554432) (= 25711008708143844408671393477458601640355247900524685364822016 (x530 2 204)) (= (x530 2 111) 2596148429267413814265248164610048) (= 5316911983139663491615228241121378304 (x530 2 122)) (= 618970019642690137449562112 (x530 2 89)) (= 191561942608236107294793378393788647952342390272950272 (x530 2 177)) (= 2787593149816327892691964784081045188247552 (x530 2 141)) (= 1267650600228229401496703205376 (x530 2 100)) (= (x530 2 20) 1048576) (= 210624583337114373395836055367340864637790190801098222508621955072 (x530 2 217)) (= (x530 2 101) 2535301200456458802993406410752) (= 4722366482869645213696 (x530 2 72)) (= (x530 2 51) 2251799813685248) (= (x530 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 281474976710656 (x530 2 48)) (= 51422017416287688817342786954917203280710495801049370729644032 (x530 2 205)) (= (x530 2 8) 256) (= (x530 2 22) 4194304) (= 6129982163463555433433388108601236734474956488734408704 (x530 2 182)) (= (x530 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 1532495540865888858358347027150309183618739122183602176 (x530 2 180)) (= (x530 2 168) 374144419156711147060143317175368453031918731001856) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x530 2 231)) (= (x530 2 47) 140737488355328) (= (x530 2 19) 524288) (= (x530 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= 562949953421312 (x530 2 49)) (= 576460752303423488 (x530 2 59)) (= (x530 2 95) 39614081257132168796771975168) (= (x530 2 116) 83076749736557242056487941267521536) (= (x530 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 67108864 (x530 2 26)) (= (x530 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x530 2 229)) (= 131072 (x530 2 17)) (= (x530 2 115) 41538374868278621028243970633760768) (= (x530 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 1329227995784915872903807060280344576 (x530 2 120)) (= (x530 2 23) 8388608) (= 2923003274661805836407369665432566039311865085952 (x530 2 161)) (= 822752278660603021077484591278675252491367932816789931674304512 (x530 2 209)) (= (x530 2 56) 72057594037927936) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x530 2 230)) (= (x530 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x530 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 1125899906842624 (x530 2 50)) (= (x530 2 158) 365375409332725729550921208179070754913983135744) (= (x530 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 4294967296 (x530 2 32)) (= (x530 2 150) 1427247692705959881058285969449495136382746624) (= (x530 2 61) 2305843009213693952) (= 2199023255552 (x530 2 41)) (= 23945242826029513411849172299223580994042798784118784 (x530 2 174)) (= (x530 2 76) 75557863725914323419136) (= 16384 (x530 2 14)) (= 9444732965739290427392 (x530 2 73)) (= (x530 2 70) 1180591620717411303424) (= 35184372088832 (x530 2 45)) (= 49039857307708443467467104868809893875799651909875269632 (x530 2 185)) (= (x530 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x530 2 69) 590295810358705651712) (= (x530 2 13) 8192) (= (x530 2 169) 748288838313422294120286634350736906063837462003712) (= (x530 2 134) 21778071482940061661655974875633165533184) (= (x530 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 332306998946228968225951765070086144 (x530 2 118)) (= (x530 2 65) 36893488147419103232) (= (x530 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x530 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 309485009821345068724781056 (x530 2 88)) (= 302231454903657293676544 (x530 2 78)) (= (x530 2 144) 22300745198530623141535718272648361505980416) (= (x530 2 125) 42535295865117307932921825928971026432) (= 2854495385411919762116571938898990272765493248 (x530 2 151)) (= (x530 2 129) 680564733841876926926749214863536422912) (= (x530 2 114) 20769187434139310514121985316880384) (= (x530 2 172) 5986310706507378352962293074805895248510699696029696) (= (x530 2 108) 324518553658426726783156020576256) (= 23384026197294446691258957323460528314494920687616 (x530 2 164)) (= (x530 2 81) 2417851639229258349412352) (= 95780971304118053647396689196894323976171195136475136 (x530 2 176)) (= (x530 2 67) 147573952589676412928) (= 2048 (x530 2 11)) (= (x530 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x530 2 57) 144115188075855872) (= 6427752177035961102167848369364650410088811975131171341205504 (x530 2 202)) (= (x530 2 64) 18446744073709551616) (= 1099511627776 (x530 2 40)) (= 536870912 (x530 2 29)) (= (x530 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 1496577676626844588240573268701473812127674924007424 (x530 2 170)) (= (x530 2 62) 4611686018427387904) (= (x530 2 140) 1393796574908163946345982392040522594123776) (= (x530 2 107) 162259276829213363391578010288128) (= (x530 2 104) 20282409603651670423947251286016) (= 11972621413014756705924586149611790497021399392059392 (x530 2 173)) (= (x530 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x530 2 179) 766247770432944429179173513575154591809369561091801088) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x530 2 244)) (= 18889465931478580854784 (x530 2 74)) (= 40564819207303340847894502572032 (x530 2 105)) (= (x530 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 274877906944 (x530 2 38)) (= (x530 2 60) 1152921504606846976) (= 196159429230833773869868419475239575503198607639501078528 (x530 2 187)) (= 2658455991569831745807614120560689152 (x530 2 121)) (= 4096 (x530 2 12)) (= 174224571863520493293247799005065324265472 (x530 2 137)) (= 5192296858534827628530496329220096 (x530 2 112)) (= (x530 2 31) 2147483648) (= (x530 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x530 2 36) 68719476736) (= 696898287454081973172991196020261297061888 (x530 2 139)) (= (x530 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x530 2 239)) (= 9903520314283042199192993792 (x530 2 93)) (= (x530 2 33) 8589934592) (= 178405961588244985132285746181186892047843328 (x530 2 147)) (= (x530 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x530 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 6277101735386680763835789423207666416102355444464034512896 (x530 2 192)) (= 803469022129495137770981046170581301261101496891396417650688 (x530 2 199)) (= (x530 2 126) 85070591730234615865843651857942052864) (= (x530 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x530 2 58) 288230376151711744) (= 81129638414606681695789005144064 (x530 2 106)) (= 604462909807314587353088 (x530 2 79)) (= 89202980794122492566142873090593446023921664 (x530 2 146)) (= (x530 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 65536 (x530 2 16)) (= 10633823966279326983230456482242756608 (x530 2 123)) (= 5444517870735015415413993718908291383296 (x530 2 132)) (= (x530 2 2) 4) (= (x530 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x530 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 17592186044416 (x530 2 44)) (= 3138550867693340381917894711603833208051177722232017256448 (x530 2 191)) (= 633825300114114700748351602688 (x530 2 99)) (= 2993155353253689176481146537402947624255349848014848 (x530 2 171)) (= 4835703278458516698824704 (x530 2 82)) (= (x530 2 34) 17179869184) (= (x530 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x530 2 5) 32) (= (x530 2 54) 18014398509481984) (= (x530 2 109) 649037107316853453566312041152512) (= (x530 2 77) 151115727451828646838272) (= 9671406556917033397649408 (x530 2 83)) (= (x530 2 66) 73786976294838206464) (= (x530 2 110) 1298074214633706907132624082305024) (= 421249166674228746791672110734681729275580381602196445017243910144 (x530 2 218)) (= 1237940039285380274899124224 (x530 2 90)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x530 2 211)) (= (x530 2 80) 1208925819614629174706176) (= (x530 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x530 2 240)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x530 2 247)) (= (x530 2 152) 5708990770823839524233143877797980545530986496) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x530 2 227)) (= (x530 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x530 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x530 2 63) 9223372036854775808) (= (x530 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x530 2 4) 16) (= (x530 2 184) 24519928653854221733733552434404946937899825954937634816) (= 784637716923335095479473677900958302012794430558004314112 (x530 2 189)) (= 187072209578355573530071658587684226515959365500928 (x530 2 167)) (= (x530 2 153) 11417981541647679048466287755595961091061972992) (= (x530 2 53) 9007199254740992) (= 664613997892457936451903530140172288 (x530 2 119)) (= (x530 2 145) 44601490397061246283071436545296723011960832) (= 3064991081731777716716694054300618367237478244367204352 (x530 2 181)) (= (x530 2 98) 316912650057057350374175801344) (= (x530 2 97) 158456325028528675187087900672) (= (x530 2 46) 70368744177664) (= (x530 2 68) 295147905179352825856) (= (x530 2 75) 37778931862957161709568) (= (x530 2 28) 268435456) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x530 2 245)) (= 340282366920938463463374607431768211456 (x530 2 128)) (= (x530 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 43556142965880123323311949751266331066368 (x530 2 135)) (= 32768 (x530 2 15)) (= (x530 2 55) 36028797018963968) (= (x530 2 133) 10889035741470030830827987437816582766592) (= 2475880078570760549798248448 (x530 2 91)) (= (x530 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 128 (x530 2 7)) (= (x530 2 165) 46768052394588893382517914646921056628989841375232) (= (x530 2 52) 4503599627370496) (= (x530 2 154) 22835963083295358096932575511191922182123945984) (= (x530 2 92) 4951760157141521099596496896) (= (x530 2 130) 1361129467683753853853498429727072845824) (= 2722258935367507707706996859454145691648 (x530 2 131)) (= 93536104789177786765035829293842113257979682750464 (x530 2 166)) (= (x530 2 43) 8796093022208) (= 1461501637330902918203684832716283019655932542976 (x530 2 160)) (= 16777216 (x530 2 24)) (= 11692013098647223345629478661730264157247460343808 (x530 2 163)) (= (x530 2 94) 19807040628566084398385987584) (= (x530 2 142) 5575186299632655785383929568162090376495104) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x530 2 232)) (= 1073741824 (x530 2 30)) (= (x530 2 84) 19342813113834066795298816) (= 8 (x530 2 3)) (= 64 (x530 2 6)) (= 4398046511104 (x530 2 42)) (= 137438953472 (x530 2 37)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x530 2 242)) (= (x530 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 348449143727040986586495598010130648530944 (x530 2 138)) (= 549755813888 (x530 2 39)) (= 5070602400912917605986812821504 (x530 2 102)) (= (x530 2 0) 1) (= (x530 2 18) 262144) (= 182687704666362864775460604089535377456991567872 (x530 2 157)) (= (x530 2 113) 10384593717069655257060992658440192) (= (x530 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 11150372599265311570767859136324180752990208 (x530 2 143)) (= (x530 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x530 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 512 (x530 2 9)) (= (x530 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 1606938044258990275541962092341162602522202993782792835301376 (x530 2 200)) (= (x530 2 159) 730750818665451459101842416358141509827966271488) (= 356811923176489970264571492362373784095686656 (x530 2 148)) (= 383123885216472214589586756787577295904684780545900544 (x530 2 178)) (= (x530 2 86) 77371252455336267181195264) (= 87112285931760246646623899502532662132736 (x530 2 136)) (= (x530 2 21) 2097152) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x530 2 235)) (= (x530 2 96) 79228162514264337593543950336) (= (x530 2 162) 5846006549323611672814739330865132078623730171904) (= (x530 2 117) 166153499473114484112975882535043072) (= 50216813883093446110686315385661331328818843555712276103168 (x530 2 195)) (= 170141183460469231731687303715884105728 (x530 2 127)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x530 2 213)) (= (x530 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 154742504910672534362390528 (x530 2 87)) (= 12259964326927110866866776217202473468949912977468817408 (x530 2 183)) (= (x530 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 34359738368 (x530 2 35)) (= 2361183241434822606848 (x530 2 71)) (= 45671926166590716193865151022383844364247891968 (x530 2 155)) (= 392318858461667547739736838950479151006397215279002157056 (x530 2 188)) (= 713623846352979940529142984724747568191373312 (x530 2 149)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x530 2 253))))
(assert (x654 x754))
(assert (not (= (x109 x170 54) 65536)))
(assert (x501 x402))
(assert (x654 x96))
(assert (= x129 (and x534 (not x550))))
(assert (=> (<= x400 10000) (not (= (+ x661 4) x400))))
(assert (not (= (+ 1 x661) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (x654 x328))
(assert (x654 x19))
(assert (x654 x329))
(assert (= (and x89 x667) x711))
(assert (=> (<= x602 10000) (not (= x602 (x109 x668 52)))))
(assert (x654 x794))
(assert (not (= 54 (+ 7 x661))))
(assert (not (= (x109 x772 53) 340282366920938463463374607431768211456)))
(assert (=> (<= x602 10000) (not (= (+ 7 x661) x602))))
(assert (x654 x301))
(assert (not (= (+ 4 x661) 72057594037927936)))
(assert (not (= (+ 1 x661) (+ 8 x661))))
(assert (not (= (+ 6 x661) 1635491895)))
(assert (not (= 1208907372870555465154560 (x109 x668 52))))
(assert (x654 x125))
(assert (x654 x622))
(assert (x654 x69))
(assert (x654 x372))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ 8 x661))))
(assert (x654 x361))
(assert (not (= (+ x661 8) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x459 1152921504606846976))
(assert (= x235 (and x28 x378)))
(assert (not (= 65535 (+ x661 7))))
(assert (not (= (x109 x130 52) 2054196882)))
(assert (= x15 (and x332 x711)))
(assert (x501 x824))
(assert (not (= (+ x661 4) 11343057244796852251080018516132066157134835194109900141777915041485456146432)))
(assert (x654 x161))
(assert (not (= 1000000000000000000000000000 (+ 8 x661))))
(assert (= x199 (and (not x302) x140)))
(assert (x654 x384))
(assert (not (= (+ x661 6) 31536000)))
(assert (= x465 (and x588 x561)))
(assert (not (= (x109 x772 53) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (=> (>= 10000 x606) (not (= (+ 4 x661) x606))))
(assert (=> (<= x668 10000) (not (= x668 (+ 3 x661)))))
(assert (=> (<= x170 10000) (not (= x170 (x109 x170 54)))))
(assert (x654 x333))
(assert (not (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 (+ 4 x661))))
(assert (not (= 420737377 (+ 3 x661))))
(assert (=> (>= 10000 x453) (not (= (x109 x668 52) x453))))
(assert (x654 x266))
(assert (not (= (+ 8 x661) 946116605)))
(assert (not (= (x109 x130 52) 340282366920938463463374607431768211456)))
(assert (not (= 500000000000000000000000000 (x109 x668 52))))
(assert (=> (>= 10000 x44) (not (= (x109 x668 52) x44))))
(assert (not (= 500000000000000000000000000 (+ x661 6))))
(assert (not (= 288230376151711744 (x109 x668 52))))
(assert (not (= (x109 x668 52) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= (+ 4 x661) 65536)))
(assert (x654 x827))
(assert (x654 x765))
(assert (not (= (+ x661 4) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (not (= 81391198934588725741764901232338779421906459474344603328544298677233738842112 (+ 3 x661))))
(assert (not (= 65535 (+ 6 x661))))
(assert (not (= (+ x661 8) 18446744073709551615)))
(assert (x654 x230))
(assert (= x215 (and x759 (not x835))))
(assert (not (= (x109 x170 54) 1461501637330902918203684832716283019655932542975)))
(assert (=> (<= x274 10000) (not (= x274 (+ 7 x661)))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ x661 4))))
(assert (=> (<= x772 10000) (not (= (x109 x170 54) x772))))
(assert (not (= (+ x661 2) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x654 x1))
(assert (not (= (+ x661 8) (x109 x772 53))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ 8 x661))))
(assert (not (= (+ 5 x661) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= (x109 x130 52) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x654 x286))
(assert (= x480 (=> (= (= x67 0) x757) (and (=> (and (not x757) (and (= x335 1) (< x511 65536) (= x511 (x449 x158)) (>= 65535 x511) (= (< x511 128) x387) (<= 0 x511))) (and (=> (not x387) x65) (=> (and (and (<= x244 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x23 x244 x674) x773) (= (x103 x673) x244) (>= x244 0) (= (x456 1 x723) x674) (= x723 (x695 (+ (mod (x456 x511 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)))) x387) x725))) (=> x757 x725)))))
(assert (not (= 144115188075855872 (x109 x170 54))))
(assert (x654 x815))
(assert (x654 x837))
(assert (=> (<= x524 10000) (not (= (+ x661 8) x524))))
(assert (x459 x309))
(assert (=> (<= x146 10000) (not (= (+ x661 8) x146))))
(assert (x654 x746))
(assert (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (+ 1 x661))))
(assert (not (= (+ x661 1) 71776119061217280)))
(assert (not (= (+ 3 x661) 1152921504606846976)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x661 4))))
(assert (= x528 (or x846 x235 x284)))
(assert (= x208 (and x793 x757)))
(assert (= true x487))
(assert (not (= (x109 x130 52) 65535)))
(assert (=> (>= 10000 x351) (not (= (+ 5 x661) x351))))
(assert (x654 x675))
(assert (= (and x683 (not x99)) x526))
(assert (=> (>= 10000 x351) (not (= x351 (+ x661 7)))))
(assert (not (= (+ x661 5) 1461501637330902918203684832716283019655932542975)))
(assert (x654 x231))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ x661 7))))
(assert (not (= (+ x661 5) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x654 x209))
(assert (not (= (x109 x668 52) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (x651 x579))
(assert (x654 x278))
(assert (=> (>= 10000 x274) (not (= (+ x661 1) x274))))
(assert (not (= 18446744073709551615 (+ 7 x661))))
(assert (= x30 (or x14 x734)))
(assert (x654 x166))
(assert (not (= (+ 4 x661) 1635491895)))
(assert (=> (>= 10000 x146) (not (= x146 (+ 6 x661)))))
(assert (x654 x702))
(assert (x654 x566))
(assert (x654 x481))
(assert (not (= (x109 x170 54) 71776119061217280)))
(assert (not (= (+ 6 x661) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x654 x394))
(assert (x654 x808))
(assert (= x643 (and x438 (not x191))))
(assert (x654 x123))
(assert (not (= 52 (+ x661 8))))
(assert (not (= 53 (+ 6 x661))))
(assert (x459 x384))
(assert (not (= (x109 x772 53) 2054196882)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x109 x772 53))))
(assert (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x109 x772 53))))
(assert (x654 x728))
(assert (not (= 274184521717934524641157099916833587358 (+ x661 1))))
(assert (=> (<= x453 10000) (not (= (+ 3 x661) x453))))
(assert (not (= (x109 x130 52) 18446744073709551615)))
(assert (x459 x230))
(assert (x459 71776119061217280))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x661 5))))
(assert (x654 x470))
(assert (x654 x264))
(assert (not (= 340282366920938463463374607431768211456 (+ 4 x661))))
(assert (not (= (+ 4 x661) 288230376151711744)))
(assert (not (= 288230376151711744 (+ x661 7))))
(assert (x654 x24))
(assert (=> (<= x47 10000) (not (= x47 (+ x661 8)))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ 2 x661))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ 2 x661))))
(assert (=> (>= 10000 x692) (not (= x692 (+ 2 x661)))))
(assert (x654 x338))
(assert (not (= (x109 x668 52) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= (x109 x170 54) 52)))
(assert (x654 x639))
(assert (not (= (+ x661 2) 288230376151711744)))
(assert (= (=> (and (= (< 340282366920938463463374607431768211455 x133) x84) (= x358 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x424)) (= x133 (div x371 1000000000000000000000000000)) (= (= x424 0) x46) (= (mod (* x424 x489) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x411) (= (or x843 x46) x64) (= x591 x133) (= (x466 340282366920938463463374607431768211455 x133) x123) (= (x695 (+ 500000000000000000000000000 x411)) x371) (= (> x489 x358) x5) (= (ite x64 1 0) x864) (= (not x5) x843) (not x84) (< 0 x864)) x467) x649))
(assert (x654 x170))
(assert (=> (>= 10000 x238) (not (= x238 (+ x661 2)))))
(assert (=> (>= 10000 x47) (not (= (x109 x130 52) x47))))
(assert (=> (<= x668 10000) (not (= (x109 x130 52) x668))))
(assert (= (and (not x599) x552) x630))
(assert (not (= (+ x661 5) 72057594037927936)))
(assert (not (= (+ 2 x661) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x654 x172))
(assert (=> (>= 10000 x351) (not (= (x109 x170 54) x351))))
(assert (x654 x592))
(assert (not (= (+ x661 8) 24059156481087259415935762067616321430022848223755303352741911643001603489792)))
(assert (x459 x193))
(assert (x459 x824))
(assert (x654 x136))
(assert (x654 x10))
(assert (not (= 500000000000000000000000000 (+ x661 2))))
(assert (x307 x244))
(assert (not (= (+ x661 8) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (and (= (x530 10 74) 100000000000000000000000000000000000000000000000000000000000000000000000000) (= (x530 10 54) 1000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000 (x530 10 67)) (= 10000000000000000000000000000000 (x530 10 31)) (= 1000000000000000000000000000000000000000 (x530 10 39)) (= (x530 10 45) 1000000000000000000000000000000000000000000000) (= 1000000000000000000000 (x530 10 21)) (= (x530 10 63) 1000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000 (x530 10 62)) (= (x530 10 27) 1000000000000000000000000000) (= (x530 10 10) 10000000000) (= (x530 10 48) 1000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000000000 (x530 10 73)) (= (x530 10 18) 1000000000000000000) (= (x530 10 59) 100000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000 (x530 10 40)) (= 100000000000000000000 (x530 10 20)) (= (x530 10 76) 10000000000000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000 (x530 10 60)) (= (x530 10 9) 1000000000) (= (x530 10 5) 100000) (= (x530 10 56) 100000000000000000000000000000000000000000000000000000000) (= (x530 10 52) 10000000000000000000000000000000000000000000000000000) (= (x530 10 15) 1000000000000000) (= 10000000 (x530 10 7)) (= 100000000000000 (x530 10 14)) (= (x530 10 37) 10000000000000000000000000000000000000) (= (x530 10 32) 100000000000000000000000000000000) (= (x530 10 36) 1000000000000000000000000000000000000) (= 1 (x530 10 0)) (= (x530 10 68) 100000000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000 (x530 10 44)) (= 10000000000000000000000000000000000000000000000 (x530 10 46)) (= (x530 10 23) 100000000000000000000000) (= 10 (x530 10 1)) (= 10000000000000000000 (x530 10 19)) (= (x530 10 11) 100000000000) (= (x530 10 69) 1000000000000000000000000000000000000000000000000000000000000000000000) (= (x530 10 43) 10000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000 (x530 10 42)) (= (x530 10 28) 10000000000000000000000000000) (= 100000000000000000000000000000000000 (x530 10 35)) (= (x530 10 72) 1000000000000000000000000000000000000000000000000000000000000000000000000) (= (x530 10 17) 100000000000000000) (= 100000000000000000000000000000000000000000000000000000 (x530 10 53)) (= (x530 10 13) 10000000000000) (= (x530 10 3) 1000) (= 100000000000000000000000000000000000000000000000 (x530 10 47)) (= 100000000 (x530 10 8)) (= 1000000000000 (x530 10 12)) (= 10000 (x530 10 4)) (= 10000000000000000000000000000000000000000000000000000000000000000000000 (x530 10 70)) (= 1000000 (x530 10 6)) (= 100000000000000000000000000000000000000000000000000000000000000000000000000000 (x530 10 77)) (= (x530 10 55) 10000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000 (x530 10 22)) (= 10000000000000000000000000000000000000000000000000000000000 (x530 10 58)) (= (x530 10 38) 100000000000000000000000000000000000000) (= (x530 10 25) 10000000000000000000000000) (= (x530 10 61) 10000000000000000000000000000000000000000000000000000000000000) (= (x530 10 51) 1000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000 (x530 10 57)) (= 100000000000000000000000000000 (x530 10 29)) (= (x530 10 16) 10000000000000000) (= (x530 10 75) 1000000000000000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000000000 (x530 10 26)) (= 10000000000000000000000000000000000000000000000000 (x530 10 49)) (= (x530 10 24) 1000000000000000000000000) (= (x530 10 71) 100000000000000000000000000000000000000000000000000000000000000000000000) (= (x530 10 41) 100000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000000 (x530 10 65)) (= 10000000000000000000000000000000000 (x530 10 34)) (= 1000000000000000000000000000000000 (x530 10 33)) (= (x530 10 2) 100) (= 10000000000000000000000000000000000000000000000000000000000000000 (x530 10 64)) (= (x530 10 66) 1000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000 (x530 10 30)) (= (x530 10 50) 100000000000000000000000000000000000000000000000000)))
(assert (x654 x254))
(assert (x654 x849))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x109 x170 54))))
(assert (x654 x105))
(assert (not (= 65535 (+ 5 x661))))
(assert (not (= 11343057244796852251080018516132066157134835194109900141777915041485456146432 (x109 x170 54))))
(assert (x654 x761))
(assert (x654 x558))
(assert (not (= 500000000000000000000000000 (+ 7 x661))))
(assert (=> (>= 10000 x351) (not (= x351 (+ x661 8)))))
(assert (=> (>= 10000 x146) (not (= (+ x661 1) x146))))
(assert (= (=> (and (= x112 0) (= x96 0) (= 0 x139)) x517) x496))
(assert (not (= (x109 x130 52) 4294967296)))
(assert (=> (>= 10000 x400) (not (= (+ x661 2) x400))))
(assert (not (= 72057594037927936 (x109 x130 52))))
(assert (=> (>= 10000 x606) (not (= x606 (+ 1 x661)))))
(assert (x135 x692))
(assert (not (= (+ 1 x661) 340282366920938463463374607431768211455)))
(assert (not (= 2054196882 (+ x661 4))))
(assert (x654 x801))
(assert (x654 x604))
(assert (not (= (+ x661 3) (+ x661 7))))
(assert (not (= 5708990770740762774496586635741492604263464960 (x109 x772 53))))
(assert (x654 x823))
(assert (not (= (+ 6 x661) 22714585864790908941122872669550960439478132978232957325611369323817919840256)))
(assert (x654 x148))
(assert (= x517 (=> (and (= x99 (= x96 0)) (or (and (not x99) (= (ite x99 1 0) x279)) (and (and (= x731 (= x603 0)) (= x603 (x223 x301 212)) (= (x466 7237005577325680195743901738874374364099144639582604309003564681041176166400 x56) x301) (= (ite x731 1 0) x279)) x99))) x656)))
(assert (not (= 994519296000000 (x109 x668 52))))
(assert (not (= (x109 x130 52) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 72057594037927936 (x109 x668 52))))
(assert (=> (>= 10000 x44) (not (= (x109 x130 52) x44))))
(assert (x654 x169))
(assert (x654 x663))
(assert (not (= 1099511627775 (+ x661 2))))
(assert (=> (>= 10000 x351) (not (= (x109 x130 52) x351))))
(assert (= (and x759 x835) x846))
(assert (= (or x26 x703) x718))
(assert (not (= (+ 1 x661) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (=> (>= 10000 x170) (not (= x170 (x109 x772 53)))))
(assert (not (= (+ x661 4) 576460752303423488)))
(assert (x654 x367))
(assert (= (and x795 (not x142)) x796))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 2 x661))))
(assert (x654 x281))
(assert (x654 x159))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x661 8))))
(assert (= (=> (and (= (x695 (+ x73 192)) x660) (= (= x211 0) x835)) (and (=> (and (not x835) (and (and (= (or x232 x366) x811) (= (= x591 0) x865) (< 0 x498) (= x19 (mod (* x69 x591) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x545 (ite x527 1 0)) (= x308 (mod (* x424 x69) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x366 (= 0 x424)) (= x341 (= 0 x779)) (= (not x343) x232) (= x498 (ite x811 1 0)) (= (x344 (- x650 x102)) x779) (< 0 x545) (= x381 (x695 (+ x308 500000000000000000000000000))) (= x417 (x695 (+ 500000000000000000000000000 x19))) (= (div x381 1000000000000000000000000000) x805) (= x497 (< x464 x69)) (= (< x650 x102) x294) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x591) x464) (not x294) (= x527 (or x865 x768)) (= x343 (> x69 x848)) (= x768 (not x497)) (= (div x417 1000000000000000000000000000) x612) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x424) x848)) (or (and (= x349 1000000000000000000000000000) x341) (and (and (= (< x792 x370) x298) (= (or x691 x337) x504) (= x82 x349) (= (= 0 x318) x295) (= x761 (+ x669 x398)) (= x481 (x344 (- x779 1))) (= x101 x758) (= (* x49 x847) x101) (= x370 (div x289 994519296000000)) (= x320 x398) (= x831 (x695 (+ 500000000000000000000000000 x638))) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x318) x792) (= x761 x226) (= x320 (div x842 2)) (= x520 (div x615 1000000000000000000000000000)) (= x730 x669) (= (* x644 x758) x869) (= x337 (= x318 0)) (> x752 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x730 x320)) (= x739 1000000000000000000000000000) (= (x695 (+ x589 500000000000000000000000000)) x615) (= (not x298) x691) (= x644 (div x520 31536000)) (= (x466 x505 x85) x406) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x847 x49)) (= x319 (= x779 0)) (= x702 (div x712 31536000)) (= x406 0) (= x589 (mod (* x370 x318) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (or x255 x295) x751) (= x616 (* x779 x481)) (= x137 (div x869 6)) (= x610 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x779)) (= x872 x137) (= x174 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x318)) (< (+ 1000000000000000000000000000 x702) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x85 (ite (> x481 x610) 1 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x318 x779)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x370 x719)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x481 x779)) (= x574 x702) (= (+ x574 x739) x730) (= x259 (ite x504 1 0)) (= x616 x719) (= x255 (not x405)) (= x712 (* x318 x779)) (< (* x644 x758) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x405 (> x318 x174)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x137 x761)) (= (div x831 1000000000000000000000000000) x289) (= (+ x226 x872) x82) (= x847 (mod (* x779 x481) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x842 (* x370 x719)) (= (ite x751 1 0) x752) (> x259 0) (= (ite (not x319) 1 0) x505) (= (ite (> x779 2) (x344 (- x779 2)) 0) x49) (= (mod (* x318 x318) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x638)) (not x341))))) x127) (=> x835 x41))) x467))
(assert (not (= 500000000000000000000000000 (x109 x772 53))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (x109 x668 52))))
(assert (x654 x414))
(assert (not (= (+ x661 7) 53)))
(assert (x654 x723))
(assert (= (and x599 x552) x529))
(assert (not (= (+ x661 2) 54)))
(assert (not (= (+ x661 7) 994519296000000)))
(assert (not (= 22714585864790908941122872669550960439478132978232957325611369323817919840256 (+ 1 x661))))
(assert (not (= (x109 x130 52) (+ 2 x661))))
(assert (x523 x56))
(assert (x654 x451))
(assert (not (= 24059156481087259415935762067616321430022848223755303352741911643001603489792 (x109 x130 52))))
(assert (not (= (x109 x668 52) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (x109 x170 54))))
(assert (=> (>= 10000 x453) (not (= x453 (+ 4 x661)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ x661 3))))
(assert (x654 x75))
(assert (not (= (+ x661 7) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x654 x154))
(assert (not (= (+ 5 x661) (x109 x130 52))))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (x109 x772 53))))
(assert (x654 x185))
(assert (x654 x85))
(assert (x459 77194726158210796949047323339125271902179989777093709359638389338608753093290))
(assert (x654 x238))
(assert (not (= 420737377 (+ 8 x661))))
(assert (not (= 409856580 (+ 8 x661))))
(assert (x654 x650))
(assert (x654 x716))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x661 6))))
(assert (not (= 18446744073709551615 (+ x661 5))))
(assert (x654 x532))
(assert (not (= (+ x661 5) 4294967296)))
(assert (x654 x9))
(assert (x654 x779))
(assert (x654 x289))
(assert (x654 x513))
(assert (x654 x13))
(check-sat)
(exit)