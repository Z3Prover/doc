(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x62 () Bool)
(declare-fun x162 () Bool)
(declare-fun x53 () Bool)
(declare-fun x89 () Int)
(declare-fun x289 () Int)
(declare-fun x170 () Int)
(declare-fun x239 () Bool)
(declare-fun x181 () Int)
(declare-fun x305 () Int)
(declare-fun x157 () Int)
(declare-fun x202 () Bool)
(declare-fun x291 () Int)
(declare-fun x142 () Int)
(declare-fun x215 () Bool)
(declare-fun x96 () Int)
(declare-fun x277 () Bool)
(declare-fun x178 () Bool)
(declare-fun x84 () Int)
(declare-fun x83 () Int)
(declare-fun x150 () Int)
(declare-fun x59 (Int) Int)
(declare-fun x32 () Int)
(declare-fun x125 () Int)
(declare-fun x36 () Int)
(declare-fun x146 () Bool)
(declare-fun x138 () Bool)
(declare-fun x207 () Int)
(declare-fun x77 () Bool)
(declare-fun x24 () Int)
(declare-fun x81 () Bool)
(declare-fun x117 () Int)
(declare-fun x57 () Int)
(declare-fun x166 () Int)
(declare-fun x250 () Bool)
(declare-fun x14 () Int)
(declare-fun x47 () Bool)
(declare-fun x70 (Int) Int)
(declare-fun x252 () Int)
(declare-fun x116 () Int)
(declare-fun x180 () Int)
(declare-fun x205 () Int)
(declare-fun x230 () Int)
(declare-fun x269 () Int)
(declare-fun x61 () Int)
(declare-fun x91 () Int)
(declare-fun x235 () Int)
(declare-fun x16 () Int)
(declare-fun x240 () Bool)
(declare-fun x204 () Int)
(declare-fun x286 () Bool)
(declare-fun x179 () Bool)
(declare-fun x1 () Int)
(declare-fun x200 () Bool)
(declare-fun x21 () Int)
(declare-fun x185 () Int)
(declare-fun x58 () Bool)
(declare-fun x224 () Bool)
(declare-fun x74 () Int)
(declare-fun x67 () Bool)
(declare-fun x287 () Bool)
(declare-fun x88 () Int)
(declare-fun x288 () Int)
(declare-fun x273 () Bool)
(declare-fun x51 () Bool)
(declare-fun x265 () Bool)
(declare-fun x280 () Bool)
(declare-fun x304 () Int)
(declare-fun x119 () Int)
(declare-fun x212 () Bool)
(declare-fun x194 () Int)
(declare-fun x218 () Int)
(declare-fun x56 () Int)
(declare-fun x76 () Int)
(declare-fun x275 () Int)
(declare-fun x115 () Int)
(declare-fun x296 (Int) Int)
(declare-fun x303 (Int) Int)
(declare-fun x95 () Int)
(declare-fun x66 () Bool)
(declare-fun x54 () Int)
(declare-fun x197 () Bool)
(declare-fun x210 () Bool)
(declare-fun x121 () Int)
(declare-fun x183 () Int)
(declare-fun x198 (Int) Int)
(declare-fun x144 () Int)
(declare-fun x153 () Int)
(declare-fun x256 () Int)
(declare-fun x241 () Int)
(declare-fun x196 () Int)
(declare-fun x282 () Bool)
(declare-fun x120 () Int)
(declare-fun x104 (Int Int) Int)
(declare-fun x29 () Int)
(declare-fun x143 () Int)
(declare-fun x159 () Int)
(declare-fun x229 () Bool)
(declare-fun x206 () Int)
(declare-fun x155 () Int)
(declare-fun x167 () Int)
(declare-fun x244 () Bool)
(declare-fun x283 () Int)
(declare-fun x270 () Int)
(declare-fun x48 () Int)
(declare-fun x279 () Int)
(declare-fun x213 () Int)
(declare-fun x189 () Int)
(declare-fun x65 () Bool)
(declare-fun x187 () Int)
(declare-fun x172 () Int)
(declare-fun x255 () Int)
(declare-fun x169 () Int)
(declare-fun x3 () Int)
(declare-fun x285 () Int)
(declare-fun x161 () Int)
(declare-fun x52 () Int)
(declare-fun x132 () Bool)
(declare-fun x112 () Int)
(declare-fun x99 () Bool)
(declare-fun x98 () Int)
(declare-fun x7 () Int)
(declare-fun x237 () Bool)
(declare-fun x113 () Bool)
(declare-fun x105 () Int)
(declare-fun x193 () Bool)
(declare-fun x267 () Bool)
(declare-fun x165 () Int)
(declare-fun x97 () Int)
(declare-fun x12 () Int)
(declare-fun x192 () Bool)
(declare-fun x86 () Int)
(declare-fun x284 () Int)
(declare-fun x238 () Int)
(declare-fun x4 () Int)
(declare-fun x261 (Int Int) Int)
(declare-fun x245 () Int)
(declare-fun x164 () Int)
(declare-fun x106 () Bool)
(declare-fun x34 () Int)
(declare-fun x39 (Int) Int)
(declare-fun x163 () Int)
(declare-fun x243 () Bool)
(declare-fun x28 () Int)
(declare-fun x219 () Int)
(declare-fun x102 () Bool)
(declare-fun x227 () Int)
(declare-fun x92 () Int)
(declare-fun x80 () Int)
(declare-fun x26 () Int)
(declare-fun x147 () Int)
(declare-fun x27 () Int)
(declare-fun x254 () Bool)
(declare-fun x217 () Bool)
(declare-fun x302 () Int)
(declare-fun x71 () Bool)
(declare-fun x216 () Int)
(declare-fun x214 () Bool)
(declare-fun x123 () Bool)
(declare-fun x2 () Bool)
(declare-fun x31 () Bool)
(declare-fun x82 () Int)
(declare-fun x156 () Bool)
(declare-fun x49 () Bool)
(declare-fun x188 () Int)
(declare-fun x247 (Int Int) Int)
(declare-fun x30 () Int)
(declare-fun x140 () Int)
(declare-fun x272 () Int)
(declare-fun x11 () Bool)
(declare-fun x151 () Bool)
(declare-fun x174 () Int)
(declare-fun x17 () Bool)
(declare-fun x126 () Bool)
(declare-fun x298 () Int)
(declare-fun x259 () Int)
(declare-fun x45 () Int)
(declare-fun x79 () Int)
(declare-fun x171 () Int)
(declare-fun x111 () Bool)
(declare-fun x182 () Bool)
(declare-fun x46 () Int)
(declare-fun x101 () Int)
(declare-fun x148 () Bool)
(declare-fun x63 () Bool)
(declare-fun x222 () Int)
(declare-fun x301 () Int)
(declare-fun x137 () Bool)
(declare-fun x8 () Int)
(declare-fun x73 (Int) Int)
(declare-fun x128 () Bool)
(declare-fun x294 () Int)
(declare-fun x263 () Int)
(declare-fun x290 () Int)
(declare-fun x160 () Bool)
(declare-fun x266 () Int)
(declare-fun x226 () Bool)
(declare-fun x23 (Int) Int)
(declare-fun x295 () Bool)
(declare-fun x110 () Int)
(declare-fun x64 () Bool)
(declare-fun x220 () Bool)
(declare-fun x228 () Bool)
(declare-fun x40 () Bool)
(declare-fun x258 () Bool)
(declare-fun x72 (Int Int) Int)
(declare-fun x50 () Int)
(declare-fun x22 () Int)
(declare-fun x154 () Bool)
(declare-fun x175 () Int)
(declare-fun x203 () Int)
(declare-fun x292 () Bool)
(declare-fun x10 () Int)
(declare-fun x19 () Int)
(declare-fun x208 () Int)
(declare-fun x293 () Bool)
(declare-fun x18 () Bool)
(declare-fun x262 () Bool)
(declare-fun x42 () Int)
(declare-fun x55 () Int)
(declare-fun x253 () Int)
(declare-fun x257 () Int)
(declare-fun x43 () Int)
(declare-fun x100 () Int)
(declare-fun x41 () Int)
(declare-fun x13 () Int)
(declare-fun x90 () Bool)
(declare-fun x114 () Int)
(declare-fun x85 () Bool)
(declare-fun x135 () Bool)
(declare-fun x20 () Int)
(declare-fun x268 () Int)
(declare-fun x242 () Bool)
(declare-fun x109 (Int) Int)
(declare-fun x232 () Int)
(declare-fun x236 () Int)
(declare-fun x60 () Int)
(declare-fun x68 () Int)
(declare-fun x158 () Int)
(declare-fun x249 () Int)
(declare-fun x191 () Int)
(declare-fun x248 () Bool)
(declare-fun x33 () Bool)
(declare-fun x145 () Bool)
(declare-fun x15 () Bool)
(declare-fun x127 () Bool)
(declare-fun x186 () Bool)
(declare-fun x233 () Bool)
(declare-fun x78 () Int)
(declare-fun x118 () Int)
(declare-fun x124 () Int)
(declare-fun x246 () Int)
(declare-fun x168 () Int)
(declare-fun x278 () Bool)
(declare-fun x75 () Int)
(declare-fun x201 () Int)
(declare-fun x195 () Int)
(declare-fun x152 () Int)
(declare-fun x176 () Int)
(declare-fun x94 () Bool)
(declare-fun x199 () Int)
(declare-fun x134 () Int)
(declare-fun x173 () Int)
(declare-fun x190 () Int)
(declare-fun x122 () Bool)
(define-fun x136 ((x276 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x276) (<= 0 x276)) x276 (- x276 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x6 ((x276 Int)) Int (ite (and (>= x276 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x276)) (+ x276 115792089237316195423570985008687907853269984665640564039457584007913129639936) x276))
(define-fun x231 ((x234 Int)) Bool (and (>= x234 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x234)))
(define-fun x149 ((x234 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x234) (>= x234 0)))
(define-fun x264 ((x234 Int)) Bool (and (= (x247 115792089237316195423570985008687907853269984665640564039457584007913129639935 x234) x234) (= (x247 x234 115792089237316195423570985008687907853269984665640564039457584007913129639935) x234)))
(define-fun x281 ((x234 Int)) Bool (and (= 0 (x247 x234 0)) (= 0 (x247 0 x234))))
(define-fun x209 ((x234 Int)) Bool (= x234 (x247 x234 x234)))
(define-fun x37 ((x234 Int)) Bool (and (x281 x234) (x264 x234) (x209 x234)))
(define-fun x93 ((x234 Int) (x225 Int)) Bool (= (x247 x225 x234) (x247 x234 x225)))
(define-fun x177 ((x234 Int) (x225 Int)) Bool (and (=> (>= x225 0) (<= (x247 x234 x225) x225)) (=> (<= 0 x234) (>= x234 (x247 x234 x225))) (<= 0 (x247 x234 x225))))
(define-fun x38 ((x234 Int) (x225 Int)) Bool (and (x93 x234 x225) (x177 x234 x225)))
(define-fun x44 ((x234 Int)) Bool (= (x247 x234 1461501637330902918203684832716283019655932542975) (mod x234 1461501637330902918203684832716283019655932542976)))
(define-fun x251 ((x234 Int)) Bool (and (x38 x234 1461501637330902918203684832716283019655932542975) (x44 x234)))
(define-fun x184 ((x234 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x261 115792089237316195423570985008687907853269984665640564039457584007913129639935 x234)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x261 x234 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x223 ((x234 Int)) Bool (and (= x234 (x261 x234 0)) (= (x261 0 x234) x234)))
(define-fun x69 ((x234 Int)) Bool (= (x261 x234 x234) x234))
(define-fun x139 ((x234 Int)) Bool (and (x69 x234) (x223 x234) (x184 x234)))
(define-fun x107 ((x234 Int) (x225 Int)) Bool (= (x261 x225 x234) (x261 x234 x225)))
(define-fun x131 ((x234 Int) (x225 Int)) Bool (and (=> (<= 0 x234) (<= x234 (x261 x234 x225))) (=> (<= 0 x225) (<= x225 (x261 x234 x225))) (<= (x261 x234 x225) (+ x234 x225))))
(define-fun x108 ((x234 Int) (x225 Int)) Bool (and (x107 x234 x225) (x131 x234 x225)))
(define-fun x103 ((x299 Int)) Int (x23 x299))
(define-fun x141 ((x299 Int)) Int (ite (= x168 x299) x36 (x59 x299)))
(define-fun x133 ((x299 Int)) Int (ite (= x27 x299) x180 (x141 x299)))
(define-fun x9 ((x299 Int)) Int (ite x62 (x59 x299) (x133 x299)))
(define-fun x129 ((x299 Int)) Int (x70 x299))
(define-fun x130 ((x299 Int)) Int (ite (= x78 x299) x213 (x129 x299)))
(define-fun x260 ((x299 Int)) Int (ite (= x299 128) x249 (x303 x299)))
(define-fun x87 ((x299 Int)) Int (ite (= 128 x299) x55 (x260 x299)))
(define-fun x221 ((x299 Int)) Int (ite (= x299 160) x249 (x87 x299)))
(define-fun x5 ((x299 Int)) Int (ite (= 128 x299) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x221 x299)))
(define-fun x35 ((x299 Int)) Int (ite (= x299 132) x116 (x5 x299)))
(define-fun x211 ((x299 Int)) Int (ite (= 164 x299) x55 (x35 x299)))
(define-fun x274 ((x299 Int)) Int (ite (= x299 x166) x188 (x9 x299)))
(define-fun x300 ((x299 Int)) Int (ite (= x299 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x109 x299)))
(define-fun x297 ((x299 Int)) Int (ite (= x299 132) x7 (x300 x299)))
(define-fun x25 ((x299 Int)) Int (ite (= x299 164) x181 (x297 x299)))
(define-fun x271 ((x299 Int)) Int (ite (= 196 x299) x301 (x25 x299)))
(assert (= (and x248 (not x226)) x17))
(assert (not (= (x104 x60 3) 3017275065)))
(assert (not (= 2376452955 (x104 x79 1))))
(assert (x149 x284))
(assert (not (= (x104 x30 4) 2514000705)))
(assert (not (= (x104 x60 3) 117300739)))
(assert (not (= (x104 x91 2) 1889567281)))
(assert (x149 x150))
(assert (not (= (x104 x60 3) (x104 x172 1))))
(assert (=> (>= 10000 x60) (not (= x60 (x104 x181 x230)))))
(assert (not (= (x104 x302 3) 2835717307)))
(assert (=> (= (x104 x7 x45) (x104 x79 1)) (and (= x45 1) (= x79 x7))))
(assert (not (= 157198259 (x104 x172 1))))
(assert (x149 x28))
(assert (x38 x305 x189))
(assert (x231 x181))
(assert (=> (>= 10000 x7) (not (= (x104 x79 1) x7))))
(assert (=> (>= 10000 x181) (not (= (x104 x79 1) x181))))
(assert (not (= (x104 x91 2) 3121116754)))
(assert (not (= (x104 x60 3) 3337024914)))
(assert (x149 x161))
(assert (not (= 3121116754 (x104 x181 1))))
(assert (not (= (x104 x30 4) 2835717307)))
(assert (x139 x80))
(assert (not (= (x104 x30 4) 1)))
(assert (not (= (x104 x91 1) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (x104 x181 x230) 2)))
(assert (=> (>= 10000 x79) (not (= x79 (x104 x79 1)))))
(assert (x231 x302))
(assert (not (= 3 (x104 x30 4))))
(assert (x149 x144))
(assert (= x277 (=> (and (or (and x102 (= x55 x249)) (and (and (= x305 (ite (not x200) 1 0)) (> x114 0) (= x63 (= 0 x249)) (= x200 (= 0 x96)) (= (ite (or x63 x113) 1 0) x189) (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (mod (* x134 x249) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x291) (= x76 (div x291 x96)) (= x76 x55) (= x114 (x247 x305 x189)) (<= 0 x134) (= (= x175 x134) x113) (= (div x291 x249) x175)) (not x102))) (and (= x102 (= x96 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x96) (>= x96 0))) x278)))
(assert (not (= (x104 x30 4) 3337024914)))
(assert (not (= (x104 x302 3) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x37 x195))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x104 x181 1))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x104 x60 3))))
(assert (not (= 3017275065 (x104 x91 2))))
(assert (not (= (x104 x7 x45) 1289409798)))
(assert (x149 x256))
(assert (=> (>= 10000 x7) (not (= (x104 x181 1) x7))))
(assert (x149 x36))
(assert (not (= (x104 x172 1) 117300739)))
(assert (x37 x219))
(assert (x38 x241 x83))
(assert (not (= (x104 x181 1) 2376452955)))
(assert (= (or (and x33 (not x145)) x243) x248))
(assert (not (= (x104 x91 2) 1851080549)))
(assert (not (= (x104 x181 x230) 2376452955)))
(assert (not (= 1 (x104 x91 1))))
(assert (x149 x75))
(assert (=> (= (x104 x302 3) (x104 x181 x230)) (and (= 3 x230) (= x181 x302))))
(assert (x149 x105))
(assert (x149 x206))
(assert (not (= 3 (x104 x7 x45))))
(assert (=> (<= x302 10000) (not (= x302 (x104 x91 2)))))
(assert (= x66 (and x138 x49)))
(assert (not (= (x104 x172 1) 3)))
(assert (=> (<= x60 10000) (not (= (x104 x302 3) x60))))
(assert (=> (= (x104 x181 x230) (x104 x7 x45)) (and (= x230 x45) (= x181 x7))))
(assert (not (= (x104 x91 1) 1289409798)))
(assert (not (= (x104 x60 3) 2)))
(assert (x149 x86))
(assert (= (and x178 x220) x212))
(assert (=> (>= 10000 x172) (not (= x172 (x104 x30 4)))))
(assert (x149 x96))
(assert (x231 x230))
(assert (not (= 3337024914 (x104 x79 1))))
(assert (not (= 4 (x104 x7 x45))))
(assert (= (and x186 (not x102)) x132))
(assert (x149 x279))
(assert (not (= (x104 x30 4) 826074471)))
(assert (not (= (x104 x91 1) 1851080549)))
(assert (x149 x7))
(assert (= (and x229 x287) x2))
(assert (not (= 599290589 (x104 x79 1))))
(assert (=> (<= x91 10000) (not (= (x104 x172 1) x91))))
(assert (x37 x50))
(assert (not (= (x104 x181 x230) 3)))
(assert (= x250 (and x160 x65)))
(assert (not (= (x104 x60 3) 2835717307)))
(assert (x149 x170))
(assert (=> (<= x302 10000) (not (= x302 (x104 x181 x230)))))
(assert (x149 x288))
(assert (x149 x26))
(assert (not (= 170435703 (x104 x30 4))))
(assert (= x135 (and x85 (not x179))))
(assert (=> (<= x79 10000) (not (= (x104 x172 1) x79))))
(assert (not (= 117300739 (x104 x181 1))))
(assert (x149 x125))
(assert (not (= (x104 x91 1) 2)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 x302 3))))
(assert (=> (<= x30 10000) (not (= (x104 x30 4) x30))))
(assert (not (= (x104 x181 x230) 117300739)))
(assert (not (= (x104 x79 1) 3)))
(assert (x149 x61))
(assert (=> (>= 10000 x91) (not (= (x104 x91 2) x91))))
(assert (=> (>= 10000 x30) (not (= (x104 x79 1) x30))))
(assert (=> (= (x104 x7 x45) (x104 x60 3)) (and (= x7 x60) (= x45 3))))
(assert (=> (>= 10000 x30) (not (= (x104 x302 3) x30))))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x104 x91 1))))
(assert (x37 x153))
(assert (x37 x16))
(assert (=> (= (x104 x60 3) (x104 x181 x230)) (and (= x230 3) (= x181 x60))))
(assert (x149 x172))
(assert (=> (>= 10000 x79) (not (= (x104 x91 2) x79))))
(assert (x149 x116))
(assert (=> (<= x30 10000) (not (= x30 (x104 x181 1)))))
(assert (not (= (x104 x91 1) 157198259)))
(assert (not (= 404098525 (x104 x181 1))))
(assert (x149 x79))
(assert (x149 x3))
(assert (not (= (x104 x30 4) 2376452955)))
(assert (x149 x100))
(assert (x149 x298))
(assert (= (and x11 (not x151)) x40))
(assert (not (= (x104 x30 4) 3017275065)))
(assert (=> (>= 10000 x172) (not (= (x104 x302 3) x172))))
(assert (not (= (x104 x181 1) 3)))
(assert (not (= (x104 x181 x230) 3121116754)))
(assert (x149 x159))
(assert (x149 x112))
(assert (not (= (x104 x30 4) 1851080549)))
(assert (x149 x268))
(assert (x139 x298))
(assert (=> (>= 10000 x91) (not (= (x104 x91 1) x91))))
(assert (x149 x84))
(assert (x139 x270))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 x7 x45))))
(assert (=> (>= 10000 x302) (not (= (x104 x181 1) x302))))
(assert (not (= (x104 x91 2) 4)))
(assert (not (= (x104 x60 3) 3121116754)))
(assert (not (= 599290589 (x104 x181 x230))))
(assert (=> (= (x104 x181 1) (x104 x172 1)) (= x181 x172)))
(assert (not (= 2514000705 (x104 x91 1))))
(assert (not (= (x104 x60 3) 1851080549)))
(assert (not (= (x104 x91 2) (x104 x302 3))))
(assert (=> (>= 10000 x91) (not (= (x104 x79 1) x91))))
(assert (x149 x29))
(assert (not (= (x104 x91 1) 599290589)))
(assert (not (= 330252341 (x104 x30 4))))
(assert (not (= (x104 x91 2) (x104 x172 1))))
(assert (x231 x79))
(assert (=> (<= x302 10000) (not (= (x104 x302 3) x302))))
(assert (=> (= (x104 x91 2) (x104 x7 x45)) (and (= 2 x45) (= x7 x91))))
(assert (= x178 (or x244 x282 x122)))
(assert (x38 x16 x219))
(assert (x149 x259))
(assert (not (= (x104 x91 1) (x104 x302 3))))
(assert (not (= (x104 x302 3) 1851080549)))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x104 x181 x230))))
(assert (= x244 (or x280 x2 x99 x148 x292)))
(assert (x149 x270))
(assert (=> (>= 10000 x181) (not (= x181 (x104 x302 3)))))
(assert (x149 x283))
(assert (x149 x41))
(assert (=> (>= 10000 x255) (not (= (x104 x7 x45) x255))))
(assert (=> (<= x30 10000) (not (= (x104 x7 x45) x30))))
(assert (x149 x236))
(assert (= (and x31 x53) x18))
(assert (not (= (x104 x7 x45) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x149 x290))
(assert (not (= (x104 x7 x45) 330252341)))
(assert (not (= 3017275065 (x104 x302 3))))
(assert (x149 x275))
(assert (not (= (x104 x172 1) 404098525)))
(assert (x149 x174))
(assert (=> (= (x104 x91 1) (x104 x181 x230)) (and (= x91 x181) (= 1 x230))))
(assert (x149 x22))
(assert (not (= (x104 x91 2) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x104 x91 2) 2835717307)))
(assert (not (= (x104 x7 x45) 2835717307)))
(assert (not (= (x104 x91 2) (x104 x91 1))))
(assert (x37 x82))
(assert (x149 x55))
(assert (x149 x80))
(assert (=> (>= 10000 x181) (not (= x181 (x104 x7 x45)))))
(assert (not (= 170435703 (x104 x91 2))))
(assert (not (= (x104 x181 x230) 157198259)))
(assert (= x278 (=> (and (= x28 (x6 (- x134 x55))) (= (or (and (< x268 64) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x268) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x268)) x94) (= x172 x116) (not (< x176 826074471)) (= (x6 (- x140 x249)) x171) (not (= x176 826074471)) (= x55 x238) (<= 0 x134) (= x288 68) (= (x104 x60 3) x252) (= 2835717307 x176) (= x20 128) (not (> x249 x140)) (= x245 76450787359836037641860180984291677749980919077056822294353438043884394381312) (not (> x55 x134)) (not (= 0 x55)) (not (> 4 x288)) (>= x140 0) (<= 0 x96) (= x60 (x247 1461501637330902918203684832716283019655932542975 x82)) (= (x130 x252) x140) (> x89 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x96) (= x89 (x73 x255)) (not (= x176 1889567281)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x134) (not (= x176 2514000705)) (= x294 (x6 (- x96 x249))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (= x268 (x6 (- x288 4)))) (and (=> (and (and (= x153 0) (= x24 x227)) x94) x265) (=> (and (and (= x81 (= x116 x172)) (= x172 x26)) (not x94)) (and (=> (and x81 (and (= (x104 x181 1) x196) (= x162 (< x203 x55)) (= (x9 x196) x203) (= x238 x48) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x203) (<= 0 x203))) (and (=> (and (= x144 0) x162) x273) (=> (and (= x287 (< x203 x238)) (not x162)) (and (=> (and (and (= x188 (x6 (- x203 x238))) (= x125 (x6 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x238))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x304) (= (x274 x57) x304) (= x57 (x104 x172 1)) (>= x304 0) (= x123 (> x304 x125)) (= (x104 x181 1) x166)) (not x287)) (and (=> (and x123 (= x144 0)) x273) (=> (and (not x123) (and (= (> x304 x161) x126) (= x161 (x136 (+ x304 x238))))) (and (=> (and (= x144 0) x126) x273) (=> (and (and (= x153 1) (= 32 x227)) (not x126)) x265))))) (=> (and (= x144 0) x287) x273))))) (=> (and (not x81) (= x144 0)) x273)))))))
(assert (not (= 1289409798 (x104 x181 1))))
(assert (=> (= (x104 x181 x230) (x104 x79 1)) (and (= 1 x230) (= x79 x181))))
(assert (x108 x270 x80))
(assert (x231 x60))
(assert (x149 x165))
(assert (= x186 (or x217 x239)))
(assert (x149 x201))
(assert (not (= 599290589 (x104 x7 x45))))
(assert (= x277 x64))
(assert (=> (<= x172 10000) (not (= (x104 x172 1) x172))))
(assert (x149 x190))
(assert (x149 x34))
(assert (not (= (x104 x30 4) 1289409798)))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x104 x60 3))))
(assert (x149 x180))
(assert (not (= (x104 x91 1) 2835717307)))
(assert (not (= 1889567281 (x104 x172 1))))
(assert (not (= (x104 x91 1) 1889567281)))
(assert (not (= (x104 x79 1) 2514000705)))
(assert (x149 x241))
(assert (not (= (x104 x60 3) (x104 x91 1))))
(assert (not (= (x104 x60 3) (x104 x91 2))))
(assert (not (= (x104 x302 3) 3026235284)))
(assert (x149 x97))
(assert (not (= 3121116754 (x104 x172 1))))
(assert (not (= (x104 x302 3) 4)))
(assert (not (= (x104 x91 2) 3026235284)))
(assert (not (= (x104 x30 4) (x104 x181 1))))
(assert (not (= 2 (x104 x302 3))))
(assert (=> (>= 10000 x7) (not (= x7 (x104 x172 1)))))
(assert (not (= (x104 x91 1) 2376452955)))
(assert (not (= (x104 x91 2) 3337024914)))
(assert (not (= 3017275065 (x104 x181 1))))
(assert (x149 x266))
(assert (x149 x54))
(assert (not (= 117300739 (x104 x30 4))))
(assert (not (= (x104 x79 1) 826074471)))
(assert (not (= (x104 x60 3) (x104 x79 1))))
(assert (= (=> (and (= x145 (= x219 0)) (or (not x145) x145)) x224) x267))
(assert (not (= (x104 x60 3) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 826074471 (x104 x7 x45))))
(assert (not (= 3026235284 (x104 x30 4))))
(assert (=> (>= 10000 x60) (not (= x60 (x104 x91 2)))))
(assert (not (= 2514000705 (x104 x181 x230))))
(assert (not (= (x104 x181 1) (x104 x91 2))))
(assert (not (= (x104 x91 2) (x104 x30 4))))
(assert (= x128 (and x215 x242)))
(assert (not (= 170435703 (x104 x79 1))))
(assert (x149 x16))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x104 x30 4))))
(assert (not (= (x104 x172 1) 2514000705)))
(assert (x149 x60))
(assert (not (= (x104 x79 1) 3121116754)))
(assert (not (= 4 (x104 x79 1))))
(assert (=> (<= x255 10000) (not (= (x104 x91 2) x255))))
(assert (not (= 1289409798 (x104 x172 1))))
(assert (not (= (x104 x7 x45) 3017275065)))
(assert (not (= (x104 x181 x230) 330252341)))
(assert (not (= 1889567281 (x104 x302 3))))
(assert (not (= (x104 x79 1) 2)))
(assert (x149 x4))
(assert (not (= 117300739 (x104 x7 x45))))
(assert (= (or x193 x128) x11))
(assert (=> (<= x30 10000) (not (= (x104 x91 2) x30))))
(assert (x149 x289))
(assert (=> (>= 10000 x172) (not (= (x104 x91 1) x172))))
(assert (=> (<= x302 10000) (not (= x302 (x104 x79 1)))))
(assert (=> (<= x91 10000) (not (= x91 (x104 x302 3)))))
(assert (=> (= (x104 x302 3) (x104 x7 x45)) (and (= x7 x302) (= 3 x45))))
(assert (not (= 170435703 (x104 x181 1))))
(assert (not (= (x104 x30 4) 4)))
(assert (not (= (x104 x60 3) 3026235284)))
(assert (=> (>= 10000 x79) (not (= x79 (x104 x181 1)))))
(assert (= (and x51 x17) x71))
(assert (= x243 (and x145 x33)))
(assert (= (and (not x51) x17) x156))
(assert (x149 x153))
(assert (x149 x24))
(assert (not (= (x104 x172 1) 826074471)))
(assert (x149 x246))
(assert (=> (<= x172 10000) (not (= (x104 x91 2) x172))))
(assert (x149 x169))
(assert (= (and x186 x102) x127))
(assert (not (= 1289409798 (x104 x91 2))))
(assert (=> (<= x302 10000) (not (= x302 (x104 x30 4)))))
(assert (=> (<= x60 10000) (not (= x60 (x104 x172 1)))))
(assert (not (= (x104 x181 1) 2514000705)))
(assert (= (=> (and (or (not x220) x220) (= x220 (= 0 x153))) x154) x265))
(assert (x149 x176))
(assert (x149 x301))
(assert (=> (>= 10000 x79) (not (= (x104 x30 4) x79))))
(assert (=> (<= x91 10000) (not (= x91 (x104 x181 1)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x104 x79 1))))
(assert (not (= (x104 x181 x230) 404098525)))
(assert (not (= (x104 x181 1) 1)))
(assert (x251 x216))
(assert (not (= (x104 x91 1) 4)))
(assert (= (and (not x123) x286) x106))
(assert (x149 x147))
(assert (not (= (x104 x181 x230) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x149 x207))
(assert (=> (>= 10000 x91) (not (= (x104 x60 3) x91))))
(assert (not (= 404098525 (x104 x30 4))))
(assert (not (= 404098525 (x104 x79 1))))
(assert (x149 x140))
(assert (=> (<= x302 10000) (not (= (x104 x7 x45) x302))))
(assert (not (= 2514000705 (x104 x7 x45))))
(assert (x37 x189))
(assert (x149 x89))
(assert (not (= (x104 x172 1) (x104 x302 3))))
(assert (not (= (x104 x79 1) 1289409798)))
(assert (x149 x76))
(assert (=> (<= x30 10000) (not (= (x104 x181 x230) x30))))
(assert (not (= (x104 x7 x45) 3121116754)))
(assert (not (= 826074471 (x104 x181 1))))
(assert (not (= (x104 x91 2) 157198259)))
(assert (not (= (x104 x172 1) 3017275065)))
(assert (not (= 3 (x104 x91 1))))
(assert (not (= (x104 x91 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (= (x104 x7 x45) (x104 x181 1)) (and (= x181 x7) (= 1 x45))))
(assert (not (= 3337024914 (x104 x181 1))))
(assert (not (= (x104 x181 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 2 (x104 x172 1))))
(assert (x149 x43))
(assert (=> (>= 10000 x79) (not (= x79 (x104 x91 1)))))
(assert (=> (= (x104 x91 1) (x104 x181 1)) (= x181 x91)))
(assert (x149 x216))
(assert (=> (>= 10000 x79) (not (= (x104 x181 x230) x79))))
(assert (not (= 4 (x104 x60 3))))
(assert (x149 x199))
(assert (not (= 2835717307 (x104 x172 1))))
(assert (x139 x142))
(assert (x149 x272))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x104 x172 1))))
(assert (x38 x42 x257))
(assert (not (= (x104 x181 1) (x104 x302 3))))
(assert (not (= (x104 x79 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x104 x181 1) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x104 x79 1) 1889567281)))
(assert (x149 x205))
(assert (=> (= (x104 x30 4) (x104 x7 x45)) (and (= x30 x7) (= x45 4))))
(assert (x149 x218))
(assert (x149 x21))
(assert (not (= (x104 x79 1) 1851080549)))
(assert (=> (>= 10000 x302) (not (= x302 (x104 x91 1)))))
(assert (not (= (x104 x172 1) (x104 x30 4))))
(assert (=> (<= x7 10000) (not (= x7 (x104 x60 3)))))
(assert (not (= (x104 x30 4) 2)))
(assert (not (= 1889567281 (x104 x30 4))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x104 x172 1))))
(assert (=> (= (x104 x172 1) (x104 x181 x230)) (and (= 1 x230) (= x172 x181))))
(assert (=> (>= 10000 x60) (not (= (x104 x60 3) x60))))
(assert (= x47 (and x53 (not x31))))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x104 x30 4))))
(assert (not (= (x104 x79 1) 117300739)))
(assert (= (or x132 x127) x182))
(assert (x149 x91))
(assert (not (= (x104 x302 3) 117300739)))
(assert (not (= (x104 x172 1) 3026235284)))
(assert (not (= 599290589 (x104 x60 3))))
(assert (=> (<= x60 10000) (not (= (x104 x7 x45) x60))))
(assert (x149 x304))
(assert (not (= (x104 x302 3) 599290589)))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x104 x181 1))))
(assert (not (= 157198259 (x104 x181 1))))
(assert (=> (>= 10000 x172) (not (= (x104 x181 x230) x172))))
(assert (x149 x82))
(assert (not (= (x104 x91 1) 170435703)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 x30 4))))
(assert (not (= (x104 x30 4) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x149 x219))
(assert (not (= 157198259 (x104 x79 1))))
(assert (not (= (x104 x79 1) 330252341)))
(assert (x108 x142 x298))
(assert (not (= (x104 x79 1) 3017275065)))
(assert (=> (<= x79 10000) (not (= (x104 x7 x45) x79))))
(assert (x231 x255))
(assert (=> (<= x60 10000) (not (= x60 (x104 x79 1)))))
(assert (not (= 3026235284 (x104 x7 x45))))
(assert (=> (<= x255 10000) (not (= (x104 x79 1) x255))))
(assert (not (= 599290589 (x104 x91 2))))
(assert (not (= (x104 x91 2) 404098525)))
(assert (x149 x291))
(assert (not (= 3337024914 (x104 x302 3))))
(assert (x231 x45))
(assert (=> (<= x79 10000) (not (= (x104 x302 3) x79))))
(assert (not (= (x104 x181 x230) 1289409798)))
(assert (x149 x95))
(assert (x149 x163))
(assert (not (= (x104 x181 1) 2)))
(assert (not (= (x104 x172 1) 1)))
(assert (not (= 2 (x104 x7 x45))))
(assert (x149 x185))
(assert (=> (<= x79 10000) (not (= x79 (x104 x60 3)))))
(assert (=> (>= 10000 x302) (not (= x302 (x104 x60 3)))))
(assert (not x192))
(assert (not (= 117300739 (x104 x91 1))))
(assert (= x292 (and x293 x162)))
(assert (x149 x213))
(assert (= (and x229 (not x287)) x286))
(assert (not (= (x104 x7 x45) 170435703)))
(assert (x149 x152))
(assert (x149 x30))
(assert (x149 x117))
(assert (x149 x52))
(assert (x37 x83))
(assert (not (= (x104 x60 3) (x104 x181 1))))
(assert (=> (<= x30 10000) (not (= x30 (x104 x172 1)))))
(assert (=> (<= x172 10000) (not (= x172 (x104 x181 1)))))
(assert (not (= 1851080549 (x104 x172 1))))
(assert (=> (>= 10000 x172) (not (= x172 (x104 x7 x45)))))
(assert (=> (<= x91 10000) (not (= (x104 x181 x230) x91))))
(assert (x231 x30))
(assert (= (and x123 x286) x99))
(assert (=> (= (x104 x7 x45) (x104 x172 1)) (and (= x7 x172) (= x45 1))))
(assert (= x254 (and (not x67) x250)))
(assert (not (= (x104 x7 x45) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (x104 x181 x230) 2835717307)))
(assert (not (= 1 (x104 x60 3))))
(assert (= (and x254 x214) x228))
(assert (x149 x188))
(assert (=> (>= 10000 x30) (not (= x30 (x104 x60 3)))))
(assert (= x122 (and x182 x94)))
(assert (=> (= (x104 x79 1) (x104 x181 1)) (= x79 x181)))
(assert (x37 x216))
(assert (=> (<= x30 10000) (not (= (x104 x91 1) x30))))
(assert (not (= (x104 x172 1) 599290589)))
(assert (not (= (x104 x91 1) 404098525)))
(assert (not (= 330252341 (x104 x302 3))))
(assert (not (= (x104 x172 1) 2376452955)))
(assert (not (= 330252341 (x104 x91 1))))
(assert (=> (>= 10000 x60) (not (= (x104 x30 4) x60))))
(assert (=> (>= 10000 x255) (not (= x255 (x104 x181 x230)))))
(assert (not (= 2376452955 (x104 x60 3))))
(assert (not (= 3026235284 (x104 x91 1))))
(assert (= (=> (and (= x97 x164) (= 0 x219) (= x13 x205) (= x232 x235)) x267) x262))
(assert (x37 x19))
(assert (=> (<= x181 10000) (not (= x181 (x104 x181 1)))))
(assert (= (and x248 x226) x239))
(assert (=> (= (x104 x60 3) (x104 x302 3)) (= x302 x60)))
(assert (not (= 404098525 (x104 x302 3))))
(assert (not (= (x104 x91 1) 3121116754)))
(assert (not (= 1889567281 (x104 x181 1))))
(assert (x149 x142))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x104 x91 2))))
(assert (=> (>= 10000 x91) (not (= x91 (x104 x30 4)))))
(assert (x149 x157))
(assert (x231 x172))
(assert (x149 x121))
(assert (x149 x56))
(assert (= x192 (=> (and (and (and (>= 1461501637330902918203684832716283019655932542975 x22) (< 0 x84) (= 0 x124) (= x43 x259) (>= x22 0) (<= 0 x235) (not (< x120 826074471)) (not (= 1289409798 x120)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x235) (= x58 (not (= x56 0))) (= x150 x259) (> 2376452955 x120) x58 (= x120 1851080549) (= x289 x216) (= x29 x56) (>= 1461501637330902918203684832716283019655932542975 x216) (= x41 x7) (= (= 0 x235) x242) (= (x73 x181) x84) (= x100 x124) (not (> 1289409798 x120)) (= x88 0) (<= 0 x43) (= x301 x207) (>= 1461501637330902918203684832716283019655932542975 x41) (<= x43 1461501637330902918203684832716283019655932542975) (<= 0 x41)) (or (and (not x242) (and (= (= 0 x301) x15) (< 0 x12) (= (= x13 0) x77) (= (mod (* x235 x301) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x143) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x13) (>= x13 0) (= (ite (not x77) 1 0) x19) (= (x247 x19 x50) x12) (= x54 (div x143 x301)) (= x157 x159) (= x159 (div x143 x13)) (= x210 (= x54 x235)) (= (ite (or x210 x15) 1 0) x50))) (and (= x157 x301) x242))) (and (> x86 0) (>= x235 0) (>= 1461501637330902918203684832716283019655932542975 x284) (> 826074471 x269) (<= 0 x117) (>= 1461501637330902918203684832716283019655932542975 x289) (<= 0 x32) (= x202 (>= x147 1000)) (<= 0 x46) (>= 1461501637330902918203684832716283019655932542975 x255) x137 (= x295 (< 0 (x73 x181))) x295 (= x207 x147) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x235) (not (= x269 170435703)) (<= x181 1461501637330902918203684832716283019655932542975) (= x181 x101) x202 (= (x296 x255) x117) (<= 0 x14) (<= x110 1461501637330902918203684832716283019655932542975) (= x1 1000) (>= x289 0) (<= x14 1461501637330902918203684832716283019655932542975) (= x7 x110) (> x181 0) (= (not (= x3 x101)) x258) (= x32 x275) (>= 1461501637330902918203684832716283019655932542975 x32) (not (= x255 x181)) (not (< x269 170435703)) (not (= x269 330252341)) (<= 0 x110) (= 404098525 x269) x258 (= (x73 x181) x86) (= x235 x29) (= x3 x7) (= x137 (< 0 (x73 x255))) (< 0 x255) (= (x296 x181) x46) (< x269 2376452955) (<= 0 x284))) x146)))
(assert (not (= 330252341 (x104 x91 2))))
(assert (x149 x305))
(assert (= (and (not x138) x49) x85))
(assert (x149 x19))
(assert (= x148 (and x111 (not x81))))
(assert (x149 x20))
(assert (not (= (x104 x172 1) 3337024914)))
(assert (x149 x50))
(assert (=> (<= x181 10000) (not (= (x104 x172 1) x181))))
(assert (=> (<= x255 10000) (not (= (x104 x30 4) x255))))
(assert (x149 x183))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 x172 1))))
(assert (=> (<= x181 10000) (not (= x181 (x104 x60 3)))))
(assert (not (= (x104 x91 2) 117300739)))
(assert (not (= (x104 x181 x230) 170435703)))
(assert (not (= (x104 x7 x45) 404098525)))
(assert (not (= (x104 x91 1) 3017275065)))
(assert (x149 x114))
(assert (=> (<= x60 10000) (not (= x60 (x104 x91 1)))))
(assert (x149 x173))
(assert (=> (= (x104 x79 1) (x104 x91 1)) (= x91 x79)))
(assert (not (= (x104 x30 4) 599290589)))
(assert (not (= (x104 x79 1) 3026235284)))
(assert (not (= (x104 x79 1) 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (not (= (x104 x79 1) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (x104 x172 1) 330252341)))
(assert (= x33 (or x62 x47)))
(assert (x149 x110))
(assert (not (= (x104 x60 3) 826074471)))
(assert (not (= (x104 x181 x230) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x149 x88))
(assert (=> (<= x181 10000) (not (= x181 (x104 x91 2)))))
(assert (not (= 826074471 (x104 x91 2))))
(assert (= x62 (or (and x40 (not x197)) x18 (and x160 (not x65)) (and x179 x85) x228 (and x67 x250) x66 (and x11 x151) (and x135 x237))))
(assert (= x273 (=> (and (= x144 x153) (= x24 x227)) x265)))
(assert (not (= (x104 x30 4) (x104 x91 1))))
(assert (x149 x302))
(assert (not (= 1851080549 (x104 x181 x230))))
(assert (not (= (x104 x91 1) 826074471)))
(assert (x149 x285))
(assert (x37 x42))
(assert (x37 1461501637330902918203684832716283019655932542975))
(assert (x231 x7))
(assert (x149 x42))
(assert (=> (>= 10000 x7) (not (= x7 (x104 x91 1)))))
(assert (x149 x83))
(assert (not (= 330252341 (x104 x181 1))))
(assert (=> (>= 10000 x172) (not (= x172 (x104 x60 3)))))
(assert (x149 x46))
(assert (=> (<= x172 10000) (not (= (x104 x79 1) x172))))
(assert (x149 x175))
(assert (=> (>= 10000 x302) (not (= x302 (x104 x172 1)))))
(assert (=> (= (x104 x91 2) (x104 x181 x230)) (and (= 2 x230) (= x91 x181))))
(assert (=> (<= x255 10000) (not (= x255 (x104 x91 1)))))
(assert (=> (= (x104 x91 1) (x104 x172 1)) (= x91 x172)))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x104 x91 2))))
(assert (x149 x143))
(assert (= (=> (and (< x283 826074471) (= (x6 (- x183 4)) x68) (= x52 x301) (= x183 100) (> x92 0) (= x246 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= 0 x157)) (= x119 128) (not (< x183 4)) (not (= x283 404098525)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x68) (and (> 96 x68) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x68)))) x151) (= x283 599290589) (not (= x283 157198259)) (not (= 117300739 x283)) (= x91 x41) (= (x73 x255) x92) (= x181 x79)) (and (=> (and (and (= x91 x253) (= x197 true)) (not x151)) (and (=> (and x197 (and (= x65 true) (= x266 x79))) (and (=> (not x65) x262) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x170) (= x67 (> x301 x170)) (= x167 (x104 x91 1)) (= (x59 x167) x170) (= x98 x52) (>= x170 0)) x65) (and (=> x67 x262) (=> (and (= x214 (> x52 x170)) (not x67)) (and (=> (and (and (= (x141 x118) x199) (= x118 (x104 x79 1)) (= x168 (x104 x91 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x199) (= x10 (x6 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x52))) (= x138 (< x10 x199)) (= (x6 (- x170 x52)) x36) (>= x199 0)) (not x214)) (and (=> (and (not x138) (and (= (x136 (+ x52 x199)) x180) (= x179 (> x199 x180)))) (and (=> (and (and (= x237 (> x52 x201)) (= x201 (x198 x191)) (<= x201 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x230 (x104 x91 2)) (= x27 (x104 x79 1)) (<= 0 x201) (= x191 (x104 x181 x230))) (not x179)) (and (=> x237 x262) (=> (and (= (> x52 x201) x31) (not x237)) (and (=> x31 x262) (=> (and (and (= (x6 (- x201 x52)) x206) (= x219 1) (= x164 32) (= x235 x232) (= x205 x13)) (not x31)) x267))))) (=> x179 x262))) (=> x138 x262))) (=> x214 x262))))))) (=> (not x197) x262))) (=> x151 x262))) x146))
(assert (x149 x203))
(assert (x231 x91))
(assert (not (= 170435703 (x104 x60 3))))
(assert (not (= (x104 x302 3) 1289409798)))
(assert (not (= (x104 x30 4) (x104 x60 3))))
(assert (not (= (x104 x7 x45) 1851080549)))
(assert (not (= (x104 x91 2) 1)))
(assert (x149 x1))
(assert (not (= (x104 x7 x45) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x104 x30 4) (x104 x302 3))))
(assert (= (and x215 (not x242)) x193))
(assert (x149 x32))
(assert (= x224 (=> (and (and (= (ite (> x164 31) 1 0) x83) (= x213 (x136 (+ x157 x163))) (= x96 x74) (= (x261 x142 x298) x16) (< (+ x157 x232) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x232) (< 0 x95) (>= x163 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x163) (= x302 (x247 1461501637330902918203684832716283019655932542975 x216)) (>= x232 0) (= x134 x158) (= (x247 x241 x83) x142) (= x157 x185) (< (+ x301 x205) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x205 0) (<= x205 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x158 (+ x205 x301)) (= (+ x232 x157) x74) (= x241 (ite (= x121 1) 1 0)) (= x163 (x129 x78)) (= x298 (ite (= x164 0) 1 0)) (= x74 x279) (= x95 (x247 x16 x219)) (= x158 x155) (= (x104 x302 3) x78)) (and (<= x116 1461501637330902918203684832716283019655932542975) (= x263 x284) (<= 0 x190) (not (> 2376452955 x285)) (= 0 x152) (not (< x285 3017275065)) (= x185 x21) (> 3337024914 x285) (<= x190 1461501637330902918203684832716283019655932542975) (= (x73 x181) x61) (<= 0 x236) (= x289 x116) (= (= x82 x7) x226) (>= x290 0) (= x21 x249) (= x82 x112) (<= x236 1461501637330902918203684832716283019655932542975) (> x61 0) (>= 1461501637330902918203684832716283019655932542975 x290) (>= 1461501637330902918203684832716283019655932542975 x82) (not (= x285 3017275065)) (= x82 x263) (= 3121116754 x285) (= x150 x4) (= x100 x152) (= x7 x236) (= x190 x4) (not (= x285 3026235284)))) (and (=> (and (not x226) (and (and (= x30 (x247 1461501637330902918203684832716283019655932542975 x82)) (>= x187 0) (<= x187 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x222 (x104 x7 x45)) (= x51 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x187)) (= (x104 x30 4) x45) (= (x103 x222) x187)) (or (and (not x51) (and (= x208 (x247 1461501637330902918203684832716283019655932542975 x82)) (not (< x187 x249)) (= (x6 (- x187 x249)) x173))) x51))) x64) (=> x226 x277)))))
(assert (not (= (x104 x181 x230) 1889567281)))
(assert (x251 x82))
(assert (=> (>= 10000 x7) (not (= x7 (x104 x7 x45)))))
(assert (=> (= (x104 x181 1) (x104 x181 x230)) (= 1 x230)))
(assert (not (= (x104 x181 1) 3026235284)))
(assert (x38 x19 x50))
(assert (not (= (x104 x91 1) 1461501637330902918203684832716283019655932542975)))
(assert (x149 x10))
(assert (= (and x254 (not x214)) x49))
(assert (not (= 1 (x104 x181 x230))))
(assert (=> (>= 10000 x255) (not (= x255 (x104 x302 3)))))
(assert (x149 x124))
(assert (not (= (x104 x60 3) 3)))
(assert (not (= 1 (x104 x7 x45))))
(assert (x149 x134))
(assert (x149 x119))
(assert (not (= (x104 x60 3) 157198259)))
(assert (x149 x13))
(assert (not (= 170435703 (x104 x302 3))))
(assert (not (= (x104 x302 3) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= 1889567281 (x104 x60 3))))
(assert (=> (<= x181 10000) (not (= (x104 x30 4) x181))))
(assert (x149 x48))
(assert (x149 x253))
(assert (x149 x92))
(assert (x149 x8))
(assert (x149 x164))
(assert (not (= (x104 x181 x230) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 1889567281 (x104 x7 x45))))
(assert (x149 x227))
(assert (x149 x195))
(assert (not (= (x104 x30 4) 3121116754)))
(assert (x149 x98))
(assert (not (= (x104 x181 1) 2835717307)))
(assert (= x154 (=> (and (and (= x257 (ite (> x227 31) 1 0)) (= (x247 x42 x257) x270) (= x42 (ite (= x60 1) 1 0)) (= x55 x165) (= x195 (x261 x270 x80)) (= x80 (ite (= x227 0) 1 0)) (< 0 x75) (= x75 (x247 x195 x153))) (and (= x256 2) (= (* 2 x34) x115) (= x34 x169) (= x169 x165) (= x218 x207) (= (>= x115 x218) x90))) (and (=> (and (= x207 x204) (= x8 x169) (= x105 2) (= (<= x8 x194) x240) (= x194 (* 2 x204))) x240) x90))))
(assert (=> (= (x104 x7 x45) (x104 x91 1)) (and (= x45 1) (= x7 x91))))
(assert (x37 x257))
(assert (=> (<= x181 10000) (not (= (x104 x181 x230) x181))))
(assert (x149 x171))
(assert (x149 x238))
(assert (= x53 (and x135 (not x237))))
(assert (x149 x187))
(assert (= x111 (and x182 (not x94))))
(assert (x149 x245))
(assert (x149 x68))
(assert (x149 x249))
(assert (= (and (not x126) x106) x282))
(assert (not (= (x104 x172 1) 4)))
(assert (=> (<= x60 10000) (not (= (x104 x181 1) x60))))
(assert (not (= 4 (x104 x181 1))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x104 x60 3))))
(assert (x149 x257))
(assert (x149 x101))
(assert (not (= (x104 x79 1) 2835717307)))
(assert (not (= 3026235284 (x104 x181 x230))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x104 x91 2))))
(assert (=> (<= x7 10000) (not (= x7 (x104 x30 4)))))
(assert (x149 x208))
(assert (x149 x181))
(assert (x149 x294))
(assert (=> (>= 10000 x181) (not (= x181 (x104 x91 1)))))
(assert (x149 x120))
(assert (=> (>= 10000 x255) (not (= x255 (x104 x181 1)))))
(assert (not (= (x104 x302 3) (x104 x79 1))))
(assert (not (= (x104 x7 x45) 3337024914)))
(assert (x149 x12))
(assert (= x229 (and (not x162) x293)))
(assert (x149 x235))
(assert (not (= (x104 x91 1) 3337024914)))
(assert (not (= 3337024914 (x104 x181 x230))))
(assert (=> (>= 10000 x7) (not (= x7 (x104 x302 3)))))
(assert (= x233 (or x212 (and x178 (not x220)))))
(assert (= x280 (and x106 x126)))
(assert (x37 x241))
(assert (x149 x263))
(assert (not (= (x104 x91 2) (x104 x79 1))))
(assert (= x160 (and x197 x40)))
(assert (x149 x204))
(assert (not (= (x104 x79 1) (x104 x30 4))))
(assert (not (= 2376452955 (x104 x302 3))))
(assert (x149 x232))
(assert (not (= 3 (x104 x91 2))))
(assert (not (= 2514000705 (x104 x60 3))))
(assert (not (= 1 (x104 x302 3))))
(assert (not (= 1851080549 (x104 x181 1))))
(assert (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x104 x172 1))))
(assert (x149 x14))
(assert (x38 x195 x153))
(assert (not (= 3017275065 (x104 x181 x230))))
(assert (not (= 826074471 (x104 x181 x230))))
(assert (x37 x305))
(assert (not (= 826074471 (x104 x302 3))))
(assert (=> (>= 10000 x7) (not (= (x104 x181 x230) x7))))
(assert (=> (<= x7 10000) (not (= (x104 x91 2) x7))))
(assert (not (= (x104 x181 x230) 4)))
(assert (not (= 157198259 (x104 x7 x45))))
(assert (not (= 3 (x104 x302 3))))
(assert (not (= (x104 x91 2) 2376452955)))
(assert (=> (>= 10000 x255) (not (= x255 (x104 x60 3)))))
(assert (not (= 157198259 (x104 x30 4))))
(assert (not (= (x104 x60 3) 404098525)))
(assert (=> (= (x104 x30 4) (x104 x181 x230)) (and (= x230 4) (= x30 x181))))
(assert (= (or x156 x71) x217))
(assert (not (= (x104 x302 3) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 3121116754 (x104 x302 3))))
(assert (not (= (x104 x60 3) 330252341)))
(assert (= x293 (and x81 x111)))
(assert (x149 x189))
(assert (not (= (x104 x79 1) 1)))
(assert (x149 x255))
(assert (= x215 true))
(assert (not (= (x104 x91 2) 2)))
(assert (=> (<= x255 10000) (not (= x255 (x104 x172 1)))))
(assert (x149 x269))
(assert (not (= 599290589 (x104 x181 1))))
(assert (not (= 2514000705 (x104 x91 2))))
(assert (=> (= (x104 x172 1) (x104 x79 1)) (= x172 x79)))
(assert (x149 x155))
(assert (not (= 1289409798 (x104 x60 3))))
(assert (not (= 2514000705 (x104 x302 3))))
(assert (not (= 157198259 (x104 x302 3))))
(assert (not (= 2376452955 (x104 x7 x45))))
(assert (=> (<= x91 10000) (not (= x91 (x104 x7 x45)))))
(assert (not (= (x104 x172 1) 170435703)))
(check-sat)
(exit)