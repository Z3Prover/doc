(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x82 () Int)
(declare-fun x244 () Int)
(declare-fun x61 () Int)
(declare-fun x209 () Bool)
(declare-fun x101 () Int)
(declare-fun x198 () Bool)
(declare-fun x195 () Int)
(declare-fun x140 () Int)
(declare-fun x109 () Int)
(declare-fun x155 () Int)
(declare-fun x160 () Int)
(declare-fun x202 () Bool)
(declare-fun x139 () Int)
(declare-fun x269 () Int)
(declare-fun x68 () Int)
(declare-fun x35 () Bool)
(declare-fun x289 () Bool)
(declare-fun x211 () Int)
(declare-fun x79 () Int)
(declare-fun x142 () Int)
(declare-fun x42 () Bool)
(declare-fun x60 () Int)
(declare-fun x185 () Int)
(declare-fun x10 () Bool)
(declare-fun x272 () Bool)
(declare-fun x226 () Int)
(declare-fun x270 () Int)
(declare-fun x58 () Int)
(declare-fun x263 () Int)
(declare-fun x300 (Int Int) Int)
(declare-fun x200 () Int)
(declare-fun x17 () Int)
(declare-fun x180 () Int)
(declare-fun x246 () Int)
(declare-fun x115 () Int)
(declare-fun x47 () Int)
(declare-fun x119 () Bool)
(declare-fun x59 () Int)
(declare-fun x91 () Bool)
(declare-fun x78 () Int)
(declare-fun x39 () Int)
(declare-fun x80 () Int)
(declare-fun x234 () Int)
(declare-fun x296 () Int)
(declare-fun x266 () Int)
(declare-fun x134 () Int)
(declare-fun x223 () Int)
(declare-fun x158 () Int)
(declare-fun x103 () Int)
(declare-fun x267 () Int)
(declare-fun x74 () Int)
(declare-fun x69 () Int)
(declare-fun x215 () Int)
(declare-fun x233 () Int)
(declare-fun x194 () Int)
(declare-fun x113 () Int)
(declare-fun x177 () Int)
(declare-fun x144 () Int)
(declare-fun x132 () Int)
(declare-fun x216 () Int)
(declare-fun x268 () Bool)
(declare-fun x1 () Bool)
(declare-fun x237 () Bool)
(declare-fun x111 () Bool)
(declare-fun x21 () Int)
(declare-fun x65 () Int)
(declare-fun x73 () Int)
(declare-fun x3 () Int)
(declare-fun x150 (Int) Int)
(declare-fun x87 () Int)
(declare-fun x241 () Bool)
(declare-fun x168 () Int)
(declare-fun x9 () Int)
(declare-fun x236 () Bool)
(declare-fun x67 () Int)
(declare-fun x157 () Int)
(declare-fun x108 () Int)
(declare-fun x8 () Int)
(declare-fun x228 () Bool)
(declare-fun x199 () Int)
(declare-fun x229 () Bool)
(declare-fun x250 () Bool)
(declare-fun x75 () Int)
(declare-fun x186 () Int)
(declare-fun x89 (Int) Int)
(declare-fun x172 () Bool)
(declare-fun x149 () Int)
(declare-fun x49 (Int Int) Int)
(declare-fun x159 () Int)
(declare-fun x245 () Int)
(declare-fun x279 () Int)
(declare-fun x122 () Int)
(declare-fun x161 () Int)
(declare-fun x25 () Int)
(declare-fun x77 () Bool)
(declare-fun x125 () Int)
(declare-fun x165 () Int)
(declare-fun x95 () Bool)
(declare-fun x70 () Int)
(declare-fun x264 () Bool)
(declare-fun x295 () Int)
(declare-fun x22 () Int)
(declare-fun x304 () Int)
(declare-fun x292 () Int)
(declare-fun x232 () Bool)
(declare-fun x303 () Bool)
(declare-fun x218 () Int)
(declare-fun x258 () Int)
(declare-fun x84 () Int)
(declare-fun x106 () Int)
(declare-fun x156 () Bool)
(declare-fun x48 () Int)
(declare-fun x18 () Int)
(declare-fun x52 () Int)
(declare-fun x212 () Int)
(declare-fun x253 () Int)
(declare-fun x4 () Int)
(declare-fun x219 () Int)
(declare-fun x274 () Int)
(declare-fun x217 () Int)
(declare-fun x76 () Int)
(declare-fun x98 () Int)
(declare-fun x114 () Int)
(declare-fun x126 () Int)
(declare-fun x240 () Int)
(declare-fun x19 () Int)
(declare-fun x51 () Int)
(declare-fun x2 () Int)
(declare-fun x54 () Int)
(declare-fun x104 () Int)
(declare-fun x308 (Int) Int)
(declare-fun x247 () Int)
(declare-fun x167 () Int)
(declare-fun x275 () Int)
(declare-fun x33 () Int)
(declare-fun x121 () Int)
(declare-fun x183 () Bool)
(declare-fun x285 () Bool)
(declare-fun x299 () Bool)
(declare-fun x27 (Int) Int)
(declare-fun x309 () Int)
(declare-fun x141 () Bool)
(declare-fun x291 () Int)
(declare-fun x255 () Int)
(declare-fun x276 () Bool)
(declare-fun x259 () Bool)
(declare-fun x107 () Int)
(declare-fun x222 () Bool)
(declare-fun x181 () Int)
(declare-fun x112 () Int)
(declare-fun x43 () Int)
(declare-fun x249 () Bool)
(declare-fun x151 () Bool)
(declare-fun x45 () Int)
(declare-fun x143 () Bool)
(declare-fun x220 () Bool)
(declare-fun x99 () Int)
(declare-fun x230 () Int)
(declare-fun x28 () Int)
(declare-fun x201 () Int)
(declare-fun x231 () Int)
(declare-fun x182 () Bool)
(declare-fun x16 () Bool)
(declare-fun x94 () Int)
(declare-fun x251 (Int) Int)
(declare-fun x24 () Int)
(declare-fun x163 () Int)
(declare-fun x262 () Bool)
(declare-fun x38 () Int)
(declare-fun x288 () Int)
(declare-fun x256 () Int)
(declare-fun x118 () Bool)
(declare-fun x120 () Int)
(declare-fun x30 () Bool)
(declare-fun x207 () Int)
(declare-fun x133 () Bool)
(declare-fun x46 () Int)
(declare-fun x100 () Int)
(declare-fun x166 () Int)
(declare-fun x44 (Int) Int)
(declare-fun x71 () Bool)
(declare-fun x239 () Int)
(declare-fun x145 () Int)
(declare-fun x224 () Int)
(declare-fun x243 () Bool)
(declare-fun x40 () Bool)
(declare-fun x238 () Int)
(declare-fun x97 () Int)
(declare-fun x90 () Int)
(declare-fun x12 () Int)
(declare-fun x273 () Bool)
(declare-fun x116 () Int)
(declare-fun x265 () Int)
(declare-fun x32 () Int)
(declare-fun x92 () Int)
(declare-fun x85 () Int)
(declare-fun x196 () Int)
(declare-fun x175 () Int)
(declare-fun x154 () Int)
(declare-fun x179 () Bool)
(declare-fun x34 () Int)
(declare-fun x153 () Int)
(declare-fun x213 () Int)
(declare-fun x206 () Int)
(declare-fun x63 () Int)
(declare-fun x178 () Int)
(declare-fun x248 () Bool)
(declare-fun x214 () Int)
(declare-fun x169 (Int Int) Int)
(declare-fun x88 () Int)
(declare-fun x171 () Bool)
(declare-fun x298 () Bool)
(declare-fun x210 () Int)
(declare-fun x136 () Bool)
(declare-fun x305 () Int)
(declare-fun x225 () Int)
(declare-fun x26 () Bool)
(declare-fun x187 () Int)
(declare-fun x205 () Bool)
(declare-fun x55 () Int)
(declare-fun x83 () Int)
(declare-fun x20 () Int)
(declare-fun x23 () Int)
(declare-fun x281 () Bool)
(declare-fun x188 () Int)
(declare-fun x164 () Bool)
(declare-fun x15 () Int)
(declare-fun x306 () Int)
(declare-fun x242 () Int)
(declare-fun x56 () Int)
(declare-fun x7 () Int)
(declare-fun x127 () Int)
(declare-fun x192 (Int) Int)
(declare-fun x36 () Int)
(declare-fun x62 () Int)
(declare-fun x204 (Int) Int)
(declare-fun x203 () Int)
(declare-fun x147 () Bool)
(declare-fun x14 () Int)
(declare-fun x286 () Int)
(declare-fun x271 () Int)
(declare-fun x130 () Int)
(declare-fun x176 () Int)
(declare-fun x37 () Int)
(declare-fun x81 () Int)
(declare-fun x184 () Bool)
(declare-fun x123 () Int)
(declare-fun x162 () Int)
(declare-fun x135 () Bool)
(declare-fun x72 () Bool)
(declare-fun x146 () Bool)
(declare-fun x128 () Int)
(declare-fun x307 () Bool)
(declare-fun x170 () Bool)
(declare-fun x208 () Bool)
(declare-fun x64 () Bool)
(declare-fun x290 () Int)
(declare-fun x110 () Bool)
(declare-fun x302 () Int)
(declare-fun x254 () Bool)
(declare-fun x41 () Int)
(declare-fun x190 (Int) Int)
(declare-fun x148 () Bool)
(declare-fun x280 () Int)
(declare-fun x129 () Bool)
(declare-fun x5 () Int)
(declare-fun x287 () Int)
(declare-fun x294 () Int)
(declare-fun x297 () Bool)
(declare-fun x137 () Int)
(declare-fun x193 () Bool)
(declare-fun x86 () Bool)
(define-fun x6 ((x96 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96) (>= x96 0)) x96 (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x138 ((x96 Int)) Int (ite (and (> 0 x96) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x96)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96) x96))
(define-fun x173 ((x50 Int)) Bool (and (< x50 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x50)))
(define-fun x66 ((x50 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x50) (>= x50 0)))
(define-fun x13 ((x50 Int)) Bool (and (= (x300 x50 115792089237316195423570985008687907853269984665640564039457584007913129639935) x50) (= x50 (x300 115792089237316195423570985008687907853269984665640564039457584007913129639935 x50))))
(define-fun x124 ((x50 Int)) Bool (and (= 0 (x300 x50 0)) (= 0 (x300 0 x50))))
(define-fun x301 ((x50 Int)) Bool (= x50 (x300 x50 x50)))
(define-fun x235 ((x50 Int)) Bool (and (x301 x50) (x124 x50) (x13 x50)))
(define-fun x102 ((x50 Int) (x284 Int)) Bool (= (x300 x284 x50) (x300 x50 x284)))
(define-fun x282 ((x50 Int) (x284 Int)) Bool (and (=> (<= 0 x284) (<= (x300 x50 x284) x284)) (=> (>= x50 0) (>= x50 (x300 x50 x284))) (>= (x300 x50 x284) 0)))
(define-fun x260 ((x50 Int) (x284 Int)) Bool (and (x102 x50 x284) (x282 x50 x284)))
(define-fun x257 ((x50 Int)) Bool (= (mod x50 1461501637330902918203684832716283019655932542976) (x300 x50 1461501637330902918203684832716283019655932542975)))
(define-fun x252 ((x50 Int)) Bool (and (x260 x50 1461501637330902918203684832716283019655932542975) (x257 x50)))
(define-fun x93 ((x50 Int)) Bool (= (mod x50 1099511627776) (x300 x50 1099511627775)))
(define-fun x11 ((x50 Int)) Bool (and (x260 x50 1099511627775) (x93 x50)))
(define-fun x53 ((x278 Int)) Int (ite (= 384 x278) x108 (x150 x278)))
(define-fun x29 ((x278 Int)) Int (ite x172 (x150 x278) (x53 x278)))
(define-fun x152 ((x278 Int)) Int (ite (= 384 x278) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x29 x278)))
(define-fun x221 ((x278 Int)) Int (ite (= x278 388) x70 (x152 x278)))
(define-fun x197 ((x278 Int)) Int (ite (= x278 420) x62 (x221 x278)))
(define-fun x227 ((x278 Int)) Int (ite (= 452 x278) x76 (x197 x278)))
(define-fun x261 ((x278 Int)) Int (ite (and (<= 384 x278) (< x278 (+ 0 384))) (x190 (+ (- x278 384) 0)) (x227 x278)))
(define-fun x189 ((x278 Int)) Int (ite x133 (x29 x278) (ite x237 (x261 x278) (x227 x278))))
(define-fun x57 ((x278 Int)) Int (ite (= 384 x278) x269 (x189 x278)))
(define-fun x293 ((x278 Int)) Int (ite (= x278 384) x269 (x57 x278)))
(define-fun x277 ((x278 Int)) Int (ite (= 416 x278) x47 (x293 x278)))
(define-fun x117 ((x278 Int)) Int (ite (= x278 448) x139 (x277 x278)))
(define-fun x131 ((x278 Int)) Int (ite (= x278 480) x288 (x117 x278)))
(define-fun x105 ((x278 Int)) Int (ite (= 512 x278) x224 (x131 x278)))
(define-fun x174 ((x278 Int)) Int (ite (= x278 544) x304 (x105 x278)))
(define-fun x283 ((x278 Int)) Int (ite (= x278 384) (ite x249 1 0) (x174 x278)))
(define-fun x191 ((x278 Int)) Int (ite (= x278 416) x304 (x283 x278)))
(define-fun x31 ((x278 Int)) Int (ite (= 448 x278) x224 (x191 x278)))
(assert (not (= (x49 x238 56) 1000000000000000000000000000)))
(assert (x66 x3))
(assert (x235 1461501637330902918203684832716283019655932542975))
(assert (x235 x63))
(assert (x66 x230))
(assert (=> (<= x206 10000) (not (= (x49 x162 56) x206))))
(assert (x66 x68))
(assert (x66 x186))
(assert (x66 x14))
(assert (not (= (x49 x25 54) 3226110480)))
(assert (not (= (x49 x145 56) 1099511627775)))
(assert (not (= 54 (x49 x162 56))))
(assert (x173 x238))
(assert (not (= 599290589 (x49 x162 56))))
(assert (=> (<= x20 10000) (not (= x20 (x49 x194 x153)))))
(assert (=> (<= x238 10000) (not (= x238 (x49 x132 56)))))
(assert (not (= (x49 x162 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (not (= 500000000000000000000000000 (x49 x132 56))))
(assert (x66 x103))
(assert (not (= (x49 x132 56) 404098525)))
(assert (x66 x127))
(assert (x66 x100))
(assert (not (= (x49 x145 56) 157198259)))
(assert (not (= (x49 x132 56) 1099511627775)))
(assert (x252 x116))
(assert (x66 x271))
(assert (x66 x8))
(assert (x66 x256))
(assert (= x228 (or (and x42 (not x86)) x276)))
(assert (x66 x140))
(assert (not (= (x49 x162 56) 404098525)))
(assert (=> (= (x49 x238 56) (x49 x194 x153)) (and (= x194 x238) (= x153 56))))
(assert (x235 x223))
(assert (=> (>= 10000 x206) (not (= (x49 x246 56) x206))))
(assert (not (= (x49 x145 56) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x66 x196))
(assert (not (= 2646777772 (x49 x25 54))))
(assert (not (= (x49 x194 x153) 2976520670)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x49 x246 56))))
(assert (x66 x187))
(assert (x66 x225))
(assert (x66 x121))
(assert (not (= 2646777772 (x49 x238 56))))
(assert (x66 x217))
(assert (not (= (x49 x132 56) 1966461510)))
(assert (not (= 500000000000000000000000000 (x49 x162 56))))
(assert (=> (= (x49 x246 56) (x49 x132 56)) (= x132 x246)))
(assert (x66 x15))
(assert (not (= (x49 x25 54) 2835717307)))
(assert (not (= (x49 x194 x153) 1809280292)))
(assert (x235 x116))
(assert (x66 x38))
(assert (not (= 1976722451 (x49 x25 54))))
(assert (x173 x25))
(assert (x66 x94))
(assert (x66 x23))
(assert (x66 x97))
(assert (not (= (x49 x194 x153) 56)))
(assert (=> (<= x132 10000) (not (= (x49 x145 56) x132))))
(assert (x66 x58))
(assert (x66 x48))
(assert (x66 x295))
(assert (not (= 500000000000000000000000000 (x49 x145 56))))
(assert (=> (<= x145 10000) (not (= (x49 x162 56) x145))))
(assert (x66 x255))
(assert (x66 x200))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x49 x25 54))))
(assert (=> (<= x20 10000) (not (= x20 (x49 x162 56)))))
(assert (x66 x270))
(assert (not (= 117300739 (x49 x246 56))))
(assert (not (= (x49 x162 56) 157198259)))
(assert (=> (<= x194 10000) (not (= x194 (x49 x194 x153)))))
(assert (=> (<= x20 10000) (not (= (x49 x145 56) x20))))
(assert (not (= (x49 x246 56) 340282366920938463463374607431768211455)))
(assert (not (= (x49 x25 54) 1809280292)))
(assert (not (= (x49 x238 56) 3226110480)))
(assert (not (= (x49 x194 x153) 54)))
(assert (not (= 56 (x49 x238 56))))
(assert (= true x183))
(assert (not (= (x49 x246 56) 1809280292)))
(assert (not (= (x49 x238 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (=> (<= x246 10000) (not (= x246 (x49 x25 54)))))
(assert (=> (>= 10000 x132) (not (= x132 (x49 x25 54)))))
(assert (x66 x36))
(assert (x66 x178))
(assert (x66 x194))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x49 x132 56))))
(assert (=> (= (x49 x194 x153) (x49 x132 56)) (and (= x153 56) (= x132 x194))))
(assert (x66 x294))
(assert (not (= (x49 x246 56) 1099511627775)))
(assert (x66 x154))
(assert (x66 x41))
(assert (not (= (x49 x162 56) 1461501637330902918203684832716283019655932542975)))
(assert (x66 x167))
(assert (x66 x56))
(assert (=> (<= x145 10000) (not (= x145 (x49 x238 56)))))
(assert (= (=> (and (or (and x241 (and (= 0 x139) (= x47 0) (= x3 0))) (and (not x241) (and (= (x138 (- x142 x4)) x263) (= x3 x4) (= (x27 x212) x142) x91 (= x47 x142) (= x132 (x300 1461501637330902918203684832716283019655932542975 x274)) (= x212 (x49 x132 56)) (= x139 x263) (< x142 340282366920938463463374607431768211456) (>= x142 0) (not (> x4 x142)) (>= 340282366920938463463374607431768211455 x142) (= (<= x142 x226) x91)))) (and (= x307 (>= x226 x4)) (= (x49 x238 56) x33) (= x241 (= 0 x4)) (>= x4 0) (> 340282366920938463463374607431768211456 x4) (= x4 (x27 x33)) (>= 340282366920938463463374607431768211455 x4) x307 (= x238 (x300 1461501637330902918203684832716283019655932542975 x274)))) x289) x236))
(assert (=> (>= 10000 x132) (not (= x132 (x49 x238 56)))))
(assert (x66 x245))
(assert (not (= 1889567281 (x49 x246 56))))
(assert (x66 x46))
(assert (not (= 340282366920938463463374607431768211456 (x49 x162 56))))
(assert (x66 x195))
(assert (= (and x86 x42) x276))
(assert (not (= (x49 x132 56) 54)))
(assert (not (= (x49 x194 x153) 1099511627775)))
(assert (x66 x304))
(assert (x66 x296))
(assert (not (= 599290589 (x49 x238 56))))
(assert (= (or x237 x136) x42))
(assert (x66 x18))
(assert (=> (>= 10000 x25) (not (= x25 (x49 x162 56)))))
(assert (not (= 2976520670 (x49 x145 56))))
(assert (not (= (x49 x25 54) 54)))
(assert (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x49 x194 x153))))
(assert (x66 x134))
(assert (x252 x274))
(assert (not (= (x49 x25 54) (x49 x145 56))))
(assert (not (= (x49 x132 56) 1865579259)))
(assert (not (= 2646777772 (x49 x145 56))))
(assert (x66 x69))
(assert (not (= (x49 x194 x153) 2646777772)))
(assert (x66 x20))
(assert (not (= (x49 x132 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (=> (>= 10000 x20) (not (= (x49 x25 54) x20))))
(assert (x252 x223))
(assert (not (= 3018967357 (x49 x25 54))))
(assert (not (= 2835717307 (x49 x194 x153))))
(assert (not (= (x49 x194 x153) 500000000000000000000000000)))
(assert (not (= 189977944 (x49 x145 56))))
(assert (not (= 4294967296 (x49 x246 56))))
(assert (not (= 1865579259 (x49 x246 56))))
(assert (=> (<= x25 10000) (not (= (x49 x194 x153) x25))))
(assert (x66 x175))
(assert (= (and x118 x183) x172))
(assert (not (= (x49 x162 56) 3018967357)))
(assert (not (= 2976520670 (x49 x132 56))))
(assert (not (= (x49 x238 56) 1000000000)))
(assert (x66 x279))
(assert (x66 x144))
(assert (=> (>= 10000 x145) (not (= (x49 x246 56) x145))))
(assert (not (= (x49 x132 56) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x49 x238 56) 1099511627775)))
(assert (x66 x267))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x49 x238 56))))
(assert (not (= 4294967296 (x49 x145 56))))
(assert (not (= 500000000000000000000000000 (x49 x25 54))))
(assert (x66 x19))
(assert (x66 x76))
(assert (x173 x20))
(assert (=> (<= x246 10000) (not (= (x49 x162 56) x246))))
(assert (x66 x25))
(assert (=> (<= x246 10000) (not (= (x49 x246 56) x246))))
(assert (x66 x162))
(assert (x66 x60))
(assert (not (= (x49 x25 54) 404098525)))
(assert (not (= 3018967357 (x49 x246 56))))
(assert (not (= (x49 x132 56) 599290589)))
(assert (x66 x80))
(assert (x173 x145))
(assert (x66 x188))
(assert (x66 x149))
(assert (x66 x309))
(assert (x66 x81))
(assert (x66 x7))
(assert (not (= (x49 x194 x153) 1000000000)))
(assert (x173 x206))
(assert (=> (>= 10000 x132) (not (= x132 (x49 x162 56)))))
(assert (not (= 2976520670 (x49 x246 56))))
(assert (x235 x186))
(assert (not (= 1099511627775 (x49 x162 56))))
(assert (not (= 117300739 (x49 x238 56))))
(assert (not (= (x49 x132 56) 1889567281)))
(assert (=> (= (x49 x145 56) (x49 x194 x153)) (and (= x153 56) (= x194 x145))))
(assert (=> (<= x194 10000) (not (= x194 (x49 x25 54)))))
(assert (not (= (x49 x194 x153) 157198259)))
(assert (not (= (x49 x238 56) 404098525)))
(assert (x66 x155))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x49 x238 56))))
(assert (x66 x39))
(assert (=> (<= x246 10000) (not (= x246 (x49 x132 56)))))
(assert (not (= 599290589 (x49 x145 56))))
(assert (x66 x210))
(assert (x66 x280))
(assert (x66 x101))
(assert (x66 x265))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x49 x194 x153))))
(assert (not (= 1966461510 (x49 x145 56))))
(assert (x66 x306))
(assert (=> (<= x132 10000) (not (= (x49 x246 56) x132))))
(assert (x66 x128))
(assert (= (and x148 x241) x119))
(assert (x66 x109))
(assert (=> (>= 10000 x25) (not (= x25 (x49 x132 56)))))
(assert (=> (<= x162 10000) (not (= x162 (x49 x238 56)))))
(assert (not (= (x49 x162 56) 2646777772)))
(assert (x66 x85))
(assert (not (= 189977944 (x49 x194 x153))))
(assert (=> (>= 10000 x145) (not (= x145 (x49 x25 54)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x49 x162 56))))
(assert (x66 x160))
(assert (x66 x122))
(assert (not (= (x49 x145 56) 1889567281)))
(assert (not (= (x49 x238 56) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (=> (>= 10000 x206) (not (= (x49 x132 56) x206))))
(assert (x66 x99))
(assert (= (=> (and (= (x300 1461501637330902918203684832716283019655932542975 x274) x246) (= x81 (mod (* 1000000000 x304) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x85 0) (<= 0 x76) (= x161 (div x219 1000000000000000000000000000)) (= x201 (mod (* 1000000000 x17) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x85 (ite x243 1 0)) (= (+ x75 x275) x69) (<= x69 340282366920938463463374607431768211455) (= (x300 1099511627775 x186) x88) (< (+ x115 x62) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x62 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x64 (not x281)) (= x158 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x201)) (= (mod (* x287 x201) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x55) (= (= 0 x81) x35) (= x242 x163) (= x126 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x216)) (= x275 x76) (not (< 340282366920938463463374607431768211455 x288)) (<= x20 1461501637330902918203684832716283019655932542975) (= (x6 (+ x294 500000000000000000000000000)) x19) (= x40 (not x10)) (= x266 (x6 (+ x188 x181))) (= x121 (div x19 1000000000000000000000000000)) (= x98 x180) (= x5 (x44 x87)) (= (x27 x165) x180) (= x121 x43) (<= 0 x5) (= x72 (= x20 0)) (= x28 (ite x164 1 0)) (= x54 (div x175 1000000000000000000000000000)) (= (> x207 x240) x198) (= (= x216 0) x205) (= x113 (ite x259 1 0)) (= x79 (+ x115 x62)) (= x273 (= 0 x45)) (= (x300 1099511627775 x186) x234) (= (div x286 1000000000000000000000000000) x213) (= x22 (mod (* x216 x178) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< (* x144 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x178 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000 x47)) (<= x5 340282366920938463463374607431768211455) (= x216 (mod (* 1000000000 x62) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x299 (or x64 x111)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x242 x161)) (= x12 x54) (= 0 x34) (= (div x9 x81) x224) (= x269 (+ x78 x218)) (>= x180 0) (= x164 (or x205 x272)) (= (mod (* x144 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x106) (= (x6 (+ 500000000000000000000000000 x22)) x247) (= x181 (mod (* x15 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x30 (= x106 0)) (= x294 (mod (* x5 x45) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* 1000000000000000000000000000 x207) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x306) (= (x27 x83) x76) (= x87 (x49 x162 56)) (= x220 (not x254)) (< 0 x154) (= x156 (not x198)) (>= x62 0) (= (< x213 x15) x248) (= x200 (div x81 2)) (< 0 x97) (= x36 x79) (= (div x106 2) x188) (= x207 (+ x67 x163)) (< 0 x28) (= x110 (= 0 x201)) (= x254 (not x248)) (= (> x201 x210) x281) (not (< 340282366920938463463374607431768211455 x269)) (= x286 (x138 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x39))) (>= x20 0) (= (x49 x145 56) x83) (= x39 (div x106 2)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x45) x295) (= x115 x125) (< x20 1461501637330902918203684832716283019655932542976) (= x115 x78) (= x269 x75) (= (div x177 1000000000000000000000000000) x240) (= (x300 1461501637330902918203684832716283019655932542975 x274) x230) (= x208 (< x126 x178)) (= x69 x123) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000 x62)) (= x15 (+ x12 x43)) (< x76 340282366920938463463374607431768211456) (= (x300 1461501637330902918203684832716283019655932542975 x274) x145) (not (> x224 340282366920938463463374607431768211455)) (= x154 (ite x299 1 0)) (< (* 1000000000 x304) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x165 (x49 x246 56)) (= x144 (+ x125 x73)) x262 (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x115 1000000000)) (= x97 (ite x182 1 0)) (= (< x295 x5) x10) (>= 340282366920938463463374607431768211455 x180) (= (mod (* 1000000000 x47) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x45) (>= 340282366920938463463374607431768211455 x76) (>= 340282366920938463463374607431768211455 x178) (= (> x65 x158) x179) (= (= 0 x65) x111) (> 340282366920938463463374607431768211456 x178) (< (+ x121 x54) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (not x179) x229) (= (- x92 x98) x114) (= (div x81 2) x82) (= (not x156) x151) (= x162 (x300 1461501637330902918203684832716283019655932542975 x274)) (= x73 x47) (= (div x247 1000000000000000000000000000) x242) (<= x178 340282366920938463463374607431768211455) (= x210 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x287)) (= (div x266 x106) x288) (= (or x110 x229) x182) (= x48 x134) (= (x138 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x82)) x177) (= (>= x226 x76) x262) (= x259 (or x40 x273)) (> x113 0) (= x46 x226) (= (x300 1461501637330902918203684832716283019655932542975 x274) x7) (= (x6 (+ x306 x200)) x9) (= x139 x218) (= (mod (* x201 x287) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x23) (= (x6 (+ x23 500000000000000000000000000)) x175) (= x232 (= x114 x48)) (< (+ x115 x47) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x243 (or x30 x220)) x232 (= (+ x46 x123) x92) (= (or x151 x35) x147) (= x304 x79) (< x178 340282366920938463463374607431768211456) (<= 0 x178) (= x219 (x6 (+ 500000000000000000000000000 x55))) (= x84 (div x9 x81)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x115 x139)) (= (not x208) x272) (< (+ x269 x76) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x67 x161) (= (ite x147 1 0) x34) (> 340282366920938463463374607431768211456 x5)) (and (=> x72 x202) (=> (and (not x72) (and (or (and (and (= (x251 x206) x58) (= x16 (= (x308 x20) x59)) (= x59 (x251 x20)) x170 x16 (< x214 4294967296) (= (>= (x308 x206) x58) x170)) x250) (not x250)) (and (= (x300 1461501637330902918203684832716283019655932542975 x274) x70) (<= x20 1461501637330902918203684832716283019655932542975) (>= x20 0) (< x20 1461501637330902918203684832716283019655932542976) (not (= x38 0)) (= x250 (< 0 x215)) (= x38 (x204 x20))))) x264))) x289))
(assert (not (= 3226110480 (x49 x246 56))))
(assert (x66 x224))
(assert (not (= (x49 x162 56) 2976520670)))
(assert (not (= (x49 x132 56) 117300739)))
(assert (not (= 340282366920938463463374607431768211456 (x49 x194 x153))))
(assert (=> (= (x49 x145 56) (x49 x246 56)) (= x246 x145)))
(assert (= (and (not x250) x184) x136))
(assert (x66 x61))
(assert (=> (>= 10000 x238) (not (= x238 (x49 x246 56)))))
(assert (=> (>= 10000 x20) (not (= x20 (x49 x246 56)))))
(assert (not (= (x49 x25 54) 1000000000)))
(assert (x66 x159))
(assert (x173 x132))
(assert (x66 x120))
(assert (=> (= (x49 x246 56) (x49 x162 56)) (= x246 x162)))
(assert (x66 x2))
(assert (not (= (x49 x132 56) 157198259)))
(assert (not (= (x49 x194 x153) 1461501637330902918203684832716283019655932542975)))
(assert (x66 x54))
(assert (not (= (x49 x246 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (not (= (x49 x194 x153) 2432105714)))
(assert (not (= 599290589 (x49 x25 54))))
(assert (not (= 404098525 (x49 x246 56))))
(assert (not (= (x49 x162 56) 1976722451)))
(assert (not (= 117300739 (x49 x25 54))))
(assert (not (= 3226110480 (x49 x145 56))))
(assert (x66 x22))
(assert (x66 x216))
(assert (not (= 1889567281 (x49 x162 56))))
(assert (x66 x98))
(assert (not (= 2432105714 (x49 x145 56))))
(assert (x66 x166))
(assert (x66 x263))
(assert (not (= 2432105714 (x49 x246 56))))
(assert (not (= (x49 x162 56) 340282366920938463463374607431768211455)))
(assert (not (= 3018967357 (x49 x194 x153))))
(assert (not (= (x49 x238 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x66 x116))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x49 x194 x153))))
(assert (x235 1099511627775))
(assert (x173 x162))
(assert (x66 x51))
(assert (not (= 1809280292 (x49 x162 56))))
(assert (not (= (x49 x246 56) 1000000000)))
(assert (x66 x84))
(assert (x66 x47))
(assert (= (and (not x118) x183) x26))
(assert (x66 x32))
(assert (not x268))
(assert (not (= (x49 x132 56) 340282366920938463463374607431768211456)))
(assert (not (= (x49 x25 54) (x49 x238 56))))
(assert (x66 x266))
(assert (=> (>= 10000 x162) (not (= x162 (x49 x145 56)))))
(assert (x66 x5))
(assert (x66 x74))
(assert (not (= (x49 x246 56) 2646777772)))
(assert (not (= 1966461510 (x49 x246 56))))
(assert (x66 x157))
(assert (=> (<= x25 10000) (not (= x25 (x49 x145 56)))))
(assert (x66 x201))
(assert (=> (>= 10000 x206) (not (= x206 (x49 x25 54)))))
(assert (x66 x168))
(assert (=> (>= 10000 x132) (not (= (x49 x194 x153) x132))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x49 x194 x153))))
(assert (x66 x215))
(assert (x66 x139))
(assert (not (= (x49 x145 56) 340282366920938463463374607431768211456)))
(assert (not (= (x49 x25 54) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (not (= (x49 x145 56) 404098525)))
(assert (=> (<= x194 10000) (not (= (x49 x132 56) x194))))
(assert (x66 x24))
(assert (not (= (x49 x238 56) 340282366920938463463374607431768211456)))
(assert (x66 x176))
(assert (not (= 599290589 (x49 x246 56))))
(assert (= x268 (=> (and (and (or (and (not x118) (and (= x128 (x192 x21)) (= x108 (x138 (- x128 x17))) (= x21 (x49 x194 x153)) (= (x300 1461501637330902918203684832716283019655932542975 x63) x194) (not (< x128 x115)) (>= x267 0) (> 1461501637330902918203684832716283019655932542976 x267) (= x61 (x300 1461501637330902918203684832716283019655932542975 x274)) (= x25 (x300 1461501637330902918203684832716283019655932542975 x274)) (>= 1461501637330902918203684832716283019655932542975 x267) (<= 0 x128) (= x279 (x300 1461501637330902918203684832716283019655932542975 x63)) (<= x128 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x49 x25 54) x153))) x118) (and (> 3226110480 x107) (>= 1461501637330902918203684832716283019655932542975 x63) (<= 0 x149) (= (x138 (- x103 4)) x265) (not (= 2835717307 x107)) (= x217 x274) (= x115 x17) (and (> x103 131) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x103))) (= x309 x196) (>= 1461501637330902918203684832716283019655932542975 x296) (= x287 x157) (= x167 x187) (not (= 2976520670 x107)) (= x68 x223) (not (> 2835717307 x107)) (= x287 x65) (= x256 x149) (= 3018967357 x107) (= x274 x185) (> x239 0) (<= 0 x296) (= x239 (x204 x206)) (= 0 x187) (= x63 x199) (= (x300 1461501637330902918203684832716283019655932542975 x116) x196) (not (> 2432105714 x107)) (= x80 x233) (>= 1461501637330902918203684832716283019655932542975 x68) (not (< x103 4)) (= x255 x17) (<= 0 x68) (not (or (and (< x265 128) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x265) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x265))) (<= x149 1461501637330902918203684832716283019655932542975) (<= x274 1461501637330902918203684832716283019655932542975) (= x63 x56) (= x309 (x300 1461501637330902918203684832716283019655932542975 x223)) (= x120 x256) (= (= x63 x274) x118))) (and (>= 1461501637330902918203684832716283019655932542975 x291) (= false x135) (> x206 0) (<= 0 x178) (< x178 340282366920938463463374607431768211456) (<= 0 x20) (not (= x166 189977944)) (>= 340282366920938463463374607431768211455 x178) (not (= x166 117300739)) (> x14 0) (<= 0 x203) (= x305 x120) (= false x77) (<= x62 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x51 x223) (<= 0 x130) (= (< 0 (x204 x206)) x71) (>= x225 0) (= x305 x203) (>= 1461501637330902918203684832716283019655932542975 x203) (>= x178 0) (<= x51 1461501637330902918203684832716283019655932542975) (= (x251 x206) x258) (<= x60 255) (= false x1) (<= 0 x291) (>= x140 0) (<= x20 1461501637330902918203684832716283019655932542975) (= x292 0) (< x166 1809280292) (>= 1099511627775 x168) (= 3018967357 x99) (<= x225 1461501637330902918203684832716283019655932542975) (= x223 x291) (<= 0 x60) (= (x204 x206) x14) (<= x178 340282366920938463463374607431768211455) x71 (= false x222) (<= x130 1461501637330902918203684832716283019655932542975) (>= 255 x140) (<= 0 x51) (<= x267 1461501637330902918203684832716283019655932542975) (= x167 x292) (<= x206 1461501637330902918203684832716283019655932542975) (<= 0 x267) (>= x168 0) (= x233 x62) (> 2432105714 x166) (= x166 404098525) (>= x62 0) (not (= 157198259 x166)) (<= 0 x258) (= x225 x245) (< x166 599290589) (= x271 4))) x236)))
(assert (not (= 1809280292 (x49 x238 56))))
(assert (not (= (x49 x194 x153) 599290589)))
(assert (not (= 1966461510 (x49 x194 x153))))
(assert (not (= 117300739 (x49 x145 56))))
(assert (x66 x63))
(assert (= x202 (=> (and (and (and (> 1809280292 x122) (> x41 0) (>= 1461501637330902918203684832716283019655932542975 x2) (>= x90 0) (= (x204 x206) x41) (<= 0 x36) (= x167 x24) (= x176 x94) (<= x36 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x90) (> 340282366920938463463374607431768211456 x84) (= x36 x101) (= x90 x223) (not (= x122 189977944)) (<= 0 x224) (<= x224 340282366920938463463374607431768211455) (<= x94 1461501637330902918203684832716283019655932542975) (<= 0 x94) (not (= x122 157198259)) (<= 0 x2) (= x122 404098525) (< x122 599290589) (= x176 x120) (not (= 117300739 x122)) (> 2432105714 x122) (= 0 x24)) (and (and (= x285 (= x244 x18)) (= x303 (or (not x146) x298)) (= x280 x244) (= true x297) (= x298 x285) (= x129 true) (= x290 3018967357) (= x32 3018967357) (= 3018967357 x100) (= 2646777772 x195) (= false x95)) (and (>= 1461501637330902918203684832716283019655932542975 x253) (>= 1461501637330902918203684832716283019655932542975 x159) (= x160 x280) (= x52 x74) (>= 1461501637330902918203684832716283019655932542975 x302) (= x223 x18) (> 1976722451 x137) (not (= 1889567281 x137)) (= x302 x211) (= x112 (x204 x206)) (= x146 (not (= x37 x52))) (not (> 1809280292 x137)) (= (x300 1461501637330902918203684832716283019655932542975 x116) x160) (not (= 1865579259 x137)) (> 2432105714 x137) (= x80 x37) (>= x302 0) (<= 0 x159) (not (= x137 1809280292)) (> x112 0) (<= 0 x253) (= x74 x101) (= x211 x120) (= 1966461510 x137) (= x167 x270) (= x270 0) (= x159 x223)))) (and (= x209 x249) (= x209 (= x47 0)) (= (x31 384) x8) (= x231 (x31 416)) (= (x31 448) x104))) x303)))
(assert (x66 x123))
(assert (x66 x88))
(assert (x66 x126))
(assert (x66 x219))
(assert (not (= 404098525 (x49 x194 x153))))
(assert (x66 x137))
(assert (=> (= (x49 x238 56) (x49 x162 56)) (= x238 x162)))
(assert (x66 x288))
(assert (not (= (x49 x132 56) 56)))
(assert (x66 x65))
(assert (not (= (x49 x246 56) (x49 x25 54))))
(assert (= (and x143 x72) x133))
(assert (=> (<= x238 10000) (not (= x238 (x49 x194 x153)))))
(assert (x66 x290))
(assert (=> (>= 10000 x246) (not (= x246 (x49 x238 56)))))
(assert (x66 x233))
(assert (= (=> (not (= x215 0)) x202) x193))
(assert (=> (<= x246 10000) (not (= (x49 x194 x153) x246))))
(assert (x66 x180))
(assert (not (= 3018967357 (x49 x145 56))))
(assert (not (= (x49 x246 56) 54)))
(assert (=> (>= 10000 x194) (not (= x194 (x49 x145 56)))))
(assert (not (= 117300739 (x49 x162 56))))
(assert (not (= 340282366920938463463374607431768211456 (x49 x25 54))))
(assert (not (= 1000000000000000000000000000 (x49 x194 x153))))
(assert (x66 x185))
(assert (not (= (x49 x238 56) 1976722451)))
(assert (not (= 1000000000000000000000000000 (x49 x132 56))))
(assert (not (= (x49 x194 x153) 117300739)))
(assert (x66 x113))
(assert (= (or x119 x141) x143))
(assert (x66 x34))
(assert (=> (= (x49 x162 56) (x49 x132 56)) (= x132 x162)))
(assert (not (= (x49 x194 x153) 4294967296)))
(assert (not (= (x49 x132 56) (x49 x25 54))))
(assert (not (= (x49 x25 54) 1461501637330902918203684832716283019655932542976)))
(assert (x66 x106))
(assert (x66 x240))
(assert (x66 x292))
(assert (=> (>= 10000 x206) (not (= x206 (x49 x145 56)))))
(assert (=> (= (x49 x238 56) (x49 x132 56)) (= x238 x132)))
(assert (x66 x247))
(assert (=> (= (x49 x194 x153) (x49 x246 56)) (and (= 56 x153) (= x246 x194))))
(assert (not (= (x49 x162 56) 2835717307)))
(assert (not (= (x49 x246 56) 56)))
(assert (=> (>= 10000 x206) (not (= (x49 x238 56) x206))))
(assert (not (= (x49 x145 56) 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (not (= (x49 x25 54) 2432105714)))
(assert (not (= (x49 x246 56) 1461501637330902918203684832716283019655932542976)))
(assert (not (= 1809280292 (x49 x132 56))))
(assert (=> (>= 10000 x145) (not (= x145 (x49 x132 56)))))
(assert (x66 x107))
(assert (not (= (x49 x162 56) 56)))
(assert (=> (= (x49 x25 54) (x49 x194 x153)) (and (= x153 54) (= x194 x25))))
(assert (not (= (x49 x25 54) (x49 x162 56))))
(assert (not (= (x49 x25 54) 1865579259)))
(assert (not (= 1865579259 (x49 x194 x153))))
(assert (not (= (x49 x25 54) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x49 x162 56) 3226110480)))
(assert (not (= (x49 x246 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (or x26 x172) x148))
(assert (=> (<= x238 10000) (not (= x238 (x49 x25 54)))))
(assert (x66 x161))
(assert (x66 x253))
(assert (=> (<= x194 10000) (not (= (x49 x238 56) x194))))
(assert (=> (<= x238 10000) (not (= (x49 x162 56) x238))))
(assert (= (or x133 x228) x171))
(assert (=> (= (x49 x145 56) (x49 x162 56)) (= x162 x145)))
(assert (not (= (x49 x238 56) 157198259)))
(assert (x66 x269))
(assert (x66 x206))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x49 x162 56))))
(assert (not (= (x49 x145 56) 2835717307)))
(assert (not (= 1976722451 (x49 x246 56))))
(assert (=> (<= x132 10000) (not (= x132 (x49 x132 56)))))
(assert (not (= 2835717307 (x49 x246 56))))
(assert (x66 x211))
(assert (not (= (x49 x162 56) 1966461510)))
(assert (=> (>= 10000 x25) (not (= x25 (x49 x246 56)))))
(assert (not (= 2432105714 (x49 x162 56))))
(assert (not (= (x49 x238 56) 3018967357)))
(assert (x66 x177))
(assert (x66 x45))
(assert (not (= (x49 x194 x153) 340282366920938463463374607431768211455)))
(assert (not (= 1976722451 (x49 x145 56))))
(assert (=> (>= 10000 x145) (not (= x145 (x49 x194 x153)))))
(assert (=> (<= x25 10000) (not (= (x49 x238 56) x25))))
(assert (not (= (x49 x132 56) 2432105714)))
(assert (not (= (x49 x132 56) 189977944)))
(assert (not (= (x49 x238 56) 2976520670)))
(assert (x66 x130))
(assert (x11 x186))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x49 x162 56))))
(assert (x173 x153))
(assert (x66 x244))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x49 x132 56))))
(assert (=> (<= x194 10000) (not (= x194 (x49 x246 56)))))
(assert (x66 x90))
(assert (not (= (x49 x162 56) 189977944)))
(assert (=> (<= x145 10000) (not (= x145 (x49 x145 56)))))
(assert (not (= 1976722451 (x49 x132 56))))
(assert (x66 x231))
(assert (not (= (x49 x25 54) 2976520670)))
(assert (x66 x199))
(assert (x66 x9))
(assert (not (= (x49 x25 54) 189977944)))
(assert (=> (>= 10000 x20) (not (= x20 (x49 x132 56)))))
(assert (not (= 1099511627775 (x49 x25 54))))
(assert (not (= 1000000000 (x49 x162 56))))
(assert (x66 x70))
(assert (not (= (x49 x238 56) 340282366920938463463374607431768211455)))
(assert (=> (<= x238 10000) (not (= (x49 x238 56) x238))))
(assert (not (= 1889567281 (x49 x238 56))))
(assert (x66 x158))
(assert (not (= 4294967296 (x49 x25 54))))
(assert (x66 x104))
(assert (not (= (x49 x194 x153) 1889567281)))
(assert (=> (<= x162 10000) (not (= x162 (x49 x162 56)))))
(assert (=> (>= 10000 x238) (not (= x238 (x49 x145 56)))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x49 x132 56))))
(assert (=> (<= x162 10000) (not (= x162 (x49 x25 54)))))
(assert (not (= (x49 x145 56) 1461501637330902918203684832716283019655932542975)))
(assert (x66 x108))
(assert (x66 x214))
(assert (not (= 2835717307 (x49 x238 56))))
(assert (x66 x305))
(assert (not (= (x49 x246 56) 189977944)))
(assert (x66 x291))
(assert (not (= (x49 x162 56) 4294967296)))
(assert (not (= 3018967357 (x49 x132 56))))
(assert (x66 x242))
(assert (x66 x203))
(assert (not (= 2646777772 (x49 x132 56))))
(assert (x66 x258))
(assert (not (= (x49 x25 54) 1889567281)))
(assert (= x237 (and x184 x250)))
(assert (not (= (x49 x145 56) 1865579259)))
(assert (=> (= (x49 x145 56) (x49 x132 56)) (= x132 x145)))
(assert (not (= (x49 x238 56) 189977944)))
(assert (not (= 54 (x49 x145 56))))
(assert (not (= 340282366920938463463374607431768211455 (x49 x145 56))))
(assert (x66 x28))
(assert (not (= (x49 x246 56) 500000000000000000000000000)))
(assert (x235 x274))
(assert (not (= (x49 x145 56) 1000000000)))
(assert (x66 x207))
(assert (x66 x302))
(assert (x173 x194))
(assert (not (= 1000000000 (x49 x132 56))))
(assert (x66 x286))
(assert (not (= (x49 x246 56) 340282366920938463463374607431768211456)))
(assert (=> (= (x49 x194 x153) (x49 x162 56)) (and (= x194 x162) (= 56 x153))))
(assert (x173 x246))
(assert (x66 x234))
(assert (not (= 157198259 (x49 x246 56))))
(assert (not (= 1809280292 (x49 x145 56))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x49 x145 56))))
(assert (=> (<= x162 10000) (not (= x162 (x49 x132 56)))))
(assert (=> (>= 10000 x162) (not (= (x49 x246 56) x162))))
(assert (not (= 56 (x49 x145 56))))
(assert (x66 x82))
(assert (x66 x213))
(assert (not (= (x49 x25 54) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (= x141 (and x148 (not x241))))
(assert (x66 x145))
(assert (not (= 1966461510 (x49 x238 56))))
(assert (not (= (x49 x132 56) 3226110480)))
(assert (=> (= (x49 x238 56) (x49 x246 56)) (= x238 x246)))
(assert (not (= (x49 x25 54) 1000000000000000000000000000)))
(assert (x66 x246))
(assert (=> (>= 10000 x20) (not (= (x49 x238 56) x20))))
(assert (not (= 1966461510 (x49 x25 54))))
(assert (x66 x226))
(assert (x66 x115))
(assert (not (= 1865579259 (x49 x238 56))))
(assert (x66 x239))
(assert (not (= (x49 x132 56) 4294967296)))
(assert (not (= 1000000000000000000000000000 (x49 x145 56))))
(assert (x66 x142))
(assert (= (and (not x72) x143) x184))
(assert (=> (>= 10000 x246) (not (= x246 (x49 x145 56)))))
(assert (x66 x287))
(assert (=> (>= 10000 x206) (not (= (x49 x194 x153) x206))))
(assert (x66 x62))
(assert (=> (= (x49 x238 56) (x49 x145 56)) (= x238 x145)))
(assert (not (= 1000000000000000000000000000 (x49 x246 56))))
(assert (not (= 3226110480 (x49 x194 x153))))
(assert (not (= 56 (x49 x25 54))))
(assert (x66 x112))
(assert (not (= (x49 x145 56) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x66 x52))
(assert (x66 x59))
(assert (not (= (x49 x194 x153) 1976722451)))
(assert (not (= (x49 x132 56) 2835717307)))
(assert (x66 x181))
(assert (not (= (x49 x246 56) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x252 x63))
(assert (x66 x55))
(assert (x66 x17))
(assert (x66 x274))
(assert (not (= 157198259 (x49 x25 54))))
(assert (=> (<= x162 10000) (not (= (x49 x194 x153) x162))))
(assert (not (= 500000000000000000000000000 (x49 x238 56))))
(assert (not (= 1865579259 (x49 x162 56))))
(assert (not (= (x49 x238 56) 2432105714)))
(assert (=> (>= 10000 x194) (not (= x194 (x49 x162 56)))))
(assert (not (= (x49 x25 54) 340282366920938463463374607431768211455)))
(assert (not (= (x49 x238 56) 4294967296)))
(assert (x66 x37))
(assert (not (= 1000000000000000000000000000 (x49 x162 56))))
(assert (x66 x238))
(assert (x66 x132))
(assert (x66 x4))
(assert (not (= (x49 x132 56) 340282366920938463463374607431768211455)))
(assert (not (= (x49 x238 56) 54)))
(assert (= (=> (and (or (not x86) x86) (= (= x215 0) x86)) x193) x264))
(assert (=> (>= 10000 x25) (not (= x25 (x49 x25 54)))))
(assert (x66 x223))
(check-sat)
(exit)