(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x1072 () Bool)
(declare-fun x523 () Int)
(declare-fun x716 () Int)
(declare-fun x936 () Bool)
(declare-fun x533 () Bool)
(declare-fun x372 () Bool)
(declare-fun x891 () Int)
(declare-fun x1004 () Int)
(declare-fun x833 () Int)
(declare-fun x46 () Int)
(declare-fun x240 () Bool)
(declare-fun x283 () Int)
(declare-fun x294 (Int) Int)
(declare-fun x743 () Int)
(declare-fun x659 () Bool)
(declare-fun x920 () Bool)
(declare-fun x806 () Int)
(declare-fun x634 () Bool)
(declare-fun x646 () Bool)
(declare-fun x535 () Int)
(declare-fun x28 () Int)
(declare-fun x785 () Int)
(declare-fun x595 () Int)
(declare-fun x893 () Int)
(declare-fun x366 () Bool)
(declare-fun x336 () Int)
(declare-fun x605 () Int)
(declare-fun x478 () Int)
(declare-fun x958 () Bool)
(declare-fun x684 () Int)
(declare-fun x111 () Int)
(declare-fun x377 () Int)
(declare-fun x398 () Int)
(declare-fun x255 () Int)
(declare-fun x926 (Int) Int)
(declare-fun x871 () Int)
(declare-fun x866 () Bool)
(declare-fun x59 () Bool)
(declare-fun x736 () Int)
(declare-fun x48 () Bool)
(declare-fun x137 () Bool)
(declare-fun x679 () Bool)
(declare-fun x194 (Int) Int)
(declare-fun x518 () Bool)
(declare-fun x751 () Int)
(declare-fun x79 () Int)
(declare-fun x1044 () Int)
(declare-fun x711 () Int)
(declare-fun x403 () Int)
(declare-fun x113 () Int)
(declare-fun x713 () Int)
(declare-fun x1025 () Int)
(declare-fun x287 () Bool)
(declare-fun x564 () Bool)
(declare-fun x221 () Bool)
(declare-fun x613 () Int)
(declare-fun x798 () Int)
(declare-fun x244 (Int) Int)
(declare-fun x1077 (Int) Int)
(declare-fun x379 () Int)
(declare-fun x295 () Bool)
(declare-fun x822 () Bool)
(declare-fun x466 () Int)
(declare-fun x988 () Bool)
(declare-fun x702 () Bool)
(declare-fun x365 () Int)
(declare-fun x359 () Int)
(declare-fun x1084 () Int)
(declare-fun x724 () Bool)
(declare-fun x725 () Bool)
(declare-fun x439 () Int)
(declare-fun x554 () Int)
(declare-fun x475 () Int)
(declare-fun x511 () Bool)
(declare-fun x805 () Int)
(declare-fun x16 () Int)
(declare-fun x788 () Int)
(declare-fun x548 (Int) Int)
(declare-fun x474 () Int)
(declare-fun x444 () Int)
(declare-fun x247 () Bool)
(declare-fun x957 () Bool)
(declare-fun x147 () Bool)
(declare-fun x560 () Int)
(declare-fun x915 () Int)
(declare-fun x62 (Int) Int)
(declare-fun x641 () Int)
(declare-fun x767 () Int)
(declare-fun x574 () Int)
(declare-fun x921 () Int)
(declare-fun x39 () Int)
(declare-fun x352 () Bool)
(declare-fun x498 () Int)
(declare-fun x1051 () Int)
(declare-fun x527 () Int)
(declare-fun x1053 () Int)
(declare-fun x426 () Int)
(declare-fun x1029 () Int)
(declare-fun x764 () Int)
(declare-fun x529 (Int) Int)
(declare-fun x612 () Int)
(declare-fun x460 () Bool)
(declare-fun x26 () Int)
(declare-fun x1006 () Int)
(declare-fun x990 () Int)
(declare-fun x763 () Int)
(declare-fun x991 () Int)
(declare-fun x1012 () Int)
(declare-fun x938 () Bool)
(declare-fun x644 () Int)
(declare-fun x434 () Bool)
(declare-fun x552 () Int)
(declare-fun x78 () Bool)
(declare-fun x513 () Int)
(declare-fun x285 () Int)
(declare-fun x544 () Int)
(declare-fun x456 () Int)
(declare-fun x205 () Int)
(declare-fun x445 () Int)
(declare-fun x452 () Int)
(declare-fun x114 () Bool)
(declare-fun x984 () Int)
(declare-fun x609 () Int)
(declare-fun x643 () Bool)
(declare-fun x750 () Bool)
(declare-fun x469 () Int)
(declare-fun x758 () Bool)
(declare-fun x263 () Int)
(declare-fun x81 () Int)
(declare-fun x784 () Int)
(declare-fun x486 () Int)
(declare-fun x118 (Int) Int)
(declare-fun x203 () Int)
(declare-fun x392 () Int)
(declare-fun x455 () Int)
(declare-fun x601 () Int)
(declare-fun x1078 () Int)
(declare-fun x396 () Int)
(declare-fun x685 () Int)
(declare-fun x830 () Int)
(declare-fun x845 () Int)
(declare-fun x594 () Int)
(declare-fun x477 () Bool)
(declare-fun x146 () Int)
(declare-fun x703 () Int)
(declare-fun x322 () Bool)
(declare-fun x344 () Int)
(declare-fun x201 () Bool)
(declare-fun x856 (Int Int) Int)
(declare-fun x846 (Int Int) Int)
(declare-fun x624 () Int)
(declare-fun x276 () Int)
(declare-fun x52 () Int)
(declare-fun x9 (Int) Int)
(declare-fun x869 () Bool)
(declare-fun x98 () Bool)
(declare-fun x414 () Bool)
(declare-fun x275 () Bool)
(declare-fun x303 () Int)
(declare-fun x872 () Int)
(declare-fun x902 () Bool)
(declare-fun x155 () Bool)
(declare-fun x63 () Bool)
(declare-fun x1010 () Int)
(declare-fun x172 () Bool)
(declare-fun x773 () Bool)
(declare-fun x32 () Bool)
(declare-fun x722 () Int)
(declare-fun x183 () Bool)
(declare-fun x110 () Bool)
(declare-fun x279 () Int)
(declare-fun x1075 () Int)
(declare-fun x903 () Bool)
(declare-fun x922 () Int)
(declare-fun x648 () Int)
(declare-fun x10 () Bool)
(declare-fun x1046 () Int)
(declare-fun x927 () Bool)
(declare-fun x128 (Int) Int)
(declare-fun x1064 () Int)
(declare-fun x898 () Int)
(declare-fun x579 () Int)
(declare-fun x742 () Int)
(declare-fun x215 (Int) Int)
(declare-fun x1073 () Bool)
(declare-fun x419 () Int)
(declare-fun x892 () Int)
(declare-fun x173 () Bool)
(declare-fun x870 () Int)
(declare-fun x116 () Int)
(declare-fun x130 () Bool)
(declare-fun x517 () Int)
(declare-fun x441 () Int)
(declare-fun x697 () Bool)
(declare-fun x625 () Bool)
(declare-fun x484 () Bool)
(declare-fun x123 () Int)
(declare-fun x20 () Int)
(declare-fun x756 () Int)
(declare-fun x154 () Int)
(declare-fun x825 () Int)
(declare-fun x843 () Int)
(declare-fun x575 () Int)
(declare-fun x821 () Bool)
(declare-fun x293 () Bool)
(declare-fun x793 () Bool)
(declare-fun x919 () Bool)
(declare-fun x440 () Int)
(declare-fun x1013 () Int)
(declare-fun x519 () Bool)
(declare-fun x618 () Bool)
(declare-fun x22 () Bool)
(declare-fun x34 () Int)
(declare-fun x857 () Int)
(declare-fun x993 () Int)
(declare-fun x1074 () Int)
(declare-fun x175 () Int)
(declare-fun x550 () Int)
(declare-fun x989 () Bool)
(declare-fun x405 () Int)
(declare-fun x1035 () Int)
(declare-fun x649 () Int)
(declare-fun x476 () Int)
(declare-fun x727 () Int)
(declare-fun x673 () Bool)
(declare-fun x829 () Int)
(declare-fun x302 (Int) Int)
(declare-fun x273 () Int)
(declare-fun x339 () Int)
(declare-fun x256 () Bool)
(declare-fun x254 () Bool)
(declare-fun x600 () Bool)
(declare-fun x666 () Int)
(declare-fun x1068 () Int)
(declare-fun x1031 () Bool)
(declare-fun x941 () Int)
(declare-fun x682 () Bool)
(declare-fun x997 () Int)
(declare-fun x494 () Int)
(declare-fun x189 () Bool)
(declare-fun x457 () Bool)
(declare-fun x599 (Int) Int)
(declare-fun x755 () Int)
(declare-fun x553 () Int)
(declare-fun x947 () Bool)
(declare-fun x573 () Int)
(declare-fun x813 () Int)
(declare-fun x671 (Int) Int)
(declare-fun x782 () Bool)
(declare-fun x465 () Bool)
(declare-fun x672 () Int)
(declare-fun x800 () Int)
(declare-fun x43 () Bool)
(declare-fun x268 () Int)
(declare-fun x462 () Bool)
(declare-fun x543 () Int)
(declare-fun x1003 () Int)
(declare-fun x669 () Bool)
(declare-fun x971 () Int)
(declare-fun x678 () Int)
(declare-fun x658 () Bool)
(declare-fun x677 () Bool)
(declare-fun x720 () Bool)
(declare-fun x525 () Int)
(declare-fun x847 () Bool)
(declare-fun x45 () Bool)
(declare-fun x540 () Int)
(declare-fun x952 () Int)
(declare-fun x427 () Bool)
(declare-fun x597 () Int)
(declare-fun x17 () Int)
(declare-fun x929 () Int)
(declare-fun x545 () Bool)
(declare-fun x838 () Int)
(declare-fun x450 () Int)
(declare-fun x421 () Int)
(declare-fun x241 () Bool)
(declare-fun x633 () Int)
(declare-fun x801 () Bool)
(declare-fun x885 () Int)
(declare-fun x1086 () Int)
(declare-fun x347 () Bool)
(declare-fun x772 () Bool)
(declare-fun x593 () Int)
(declare-fun x516 () Bool)
(declare-fun x1040 () Int)
(declare-fun x951 () Int)
(declare-fun x174 () Int)
(declare-fun x1008 () Bool)
(declare-fun x200 () Int)
(declare-fun x946 () Int)
(declare-fun x66 () Int)
(declare-fun x57 () Bool)
(declare-fun x422 () Int)
(declare-fun x1076 () Int)
(declare-fun x300 () Int)
(declare-fun x75 (Int Int) Int)
(declare-fun x549 () Bool)
(declare-fun x326 () Int)
(declare-fun x524 () Int)
(declare-fun x92 (Int) Int)
(declare-fun x900 () Int)
(declare-fun x818 () Bool)
(declare-fun x125 () Int)
(declare-fun x238 () Int)
(declare-fun x562 () Bool)
(declare-fun x887 () Bool)
(declare-fun x36 () Bool)
(declare-fun x245 () Int)
(declare-fun x640 () Int)
(declare-fun x380 (Int) Int)
(declare-fun x520 () Bool)
(declare-fun x996 () Int)
(declare-fun x433 () Int)
(declare-fun x386 () Int)
(declare-fun x318 () Int)
(declare-fun x728 () Bool)
(declare-fun x480 () Bool)
(declare-fun x387 () Bool)
(declare-fun x185 () Int)
(declare-fun x496 () Int)
(declare-fun x645 () Int)
(declare-fun x316 () Bool)
(declare-fun x536 () Bool)
(declare-fun x44 () Int)
(declare-fun x729 () Int)
(declare-fun x514 () Int)
(declare-fun x1021 () Bool)
(declare-fun x632 () Bool)
(declare-fun x425 () Int)
(declare-fun x349 () Bool)
(declare-fun x19 () Bool)
(declare-fun x27 () Bool)
(declare-fun x76 () Int)
(declare-fun x41 () Int)
(declare-fun x653 () Bool)
(declare-fun x369 () Int)
(declare-fun x428 () Int)
(declare-fun x1037 () Bool)
(declare-fun x381 () Bool)
(declare-fun x373 () Bool)
(declare-fun x749 (Int) Int)
(declare-fun x370 () Int)
(declare-fun x299 () Int)
(declare-fun x935 () Int)
(declare-fun x468 () Int)
(declare-fun x733 () Int)
(declare-fun x1048 () Int)
(declare-fun x166 () Bool)
(declare-fun x862 () Bool)
(declare-fun x674 () Bool)
(declare-fun x622 () Int)
(declare-fun x54 () Int)
(declare-fun x754 () Bool)
(declare-fun x506 () Int)
(declare-fun x345 () Int)
(declare-fun x314 () Bool)
(declare-fun x930 () Int)
(declare-fun x109 () Int)
(declare-fun x321 () Int)
(declare-fun x341 () Bool)
(declare-fun x692 (Int) Int)
(declare-fun x143 () Int)
(declare-fun x31 () Int)
(declare-fun x1080 () Bool)
(declare-fun x718 () Int)
(declare-fun x586 () Int)
(declare-fun x738 (Int) Int)
(declare-fun x747 () Int)
(declare-fun x983 () Bool)
(declare-fun x224 () Int)
(declare-fun x211 () Int)
(declare-fun x199 () Int)
(declare-fun x278 () Bool)
(declare-fun x745 () Bool)
(declare-fun x973 () Int)
(declare-fun x491 () Bool)
(declare-fun x467 () Int)
(declare-fun x77 () Int)
(declare-fun x1058 () Int)
(declare-fun x408 () Int)
(declare-fun x122 () Int)
(declare-fun x662 () Int)
(declare-fun x1034 () Bool)
(declare-fun x304 () Int)
(declare-fun x121 () Int)
(declare-fun x177 () Int)
(declare-fun x1061 (Int) Int)
(declare-fun x705 () Int)
(declare-fun x628 () Bool)
(declare-fun x878 () Bool)
(declare-fun x60 () Int)
(declare-fun x558 () Int)
(declare-fun x688 () Bool)
(declare-fun x219 () Bool)
(declare-fun x571 () Int)
(declare-fun x551 () Bool)
(declare-fun x808 () Int)
(declare-fun x237 () Int)
(declare-fun x389 () Bool)
(declare-fun x719 () Int)
(declare-fun x861 () Bool)
(declare-fun x320 () Int)
(declare-fun x686 () Bool)
(declare-fun x424 () Int)
(declare-fun x217 () Bool)
(declare-fun x602 () Int)
(declare-fun x191 () Int)
(declare-fun x578 () Bool)
(declare-fun x80 () Int)
(declare-fun x124 () Bool)
(declare-fun x851 () Int)
(declare-fun x364 () Int)
(declare-fun x271 () Int)
(declare-fun x309 () Bool)
(declare-fun x962 () Bool)
(declare-fun x950 () Bool)
(declare-fun x987 () Bool)
(declare-fun x42 () Int)
(declare-fun x726 () Int)
(declare-fun x69 () Int)
(declare-fun x953 () Int)
(declare-fun x324 () Bool)
(declare-fun x654 () Bool)
(declare-fun x483 () Int)
(declare-fun x223 () Bool)
(declare-fun x100 () Bool)
(declare-fun x810 () Bool)
(declare-fun x1001 () Bool)
(declare-fun x699 () Bool)
(declare-fun x502 () Bool)
(declare-fun x563 () Int)
(declare-fun x701 (Int Int) Int)
(declare-fun x753 () Int)
(declare-fun x190 () Int)
(declare-fun x608 () Bool)
(declare-fun x667 (Int) Int)
(declare-fun x647 () Int)
(declare-fun x999 () Bool)
(declare-fun x65 () Int)
(declare-fun x129 () Int)
(declare-fun x531 () Int)
(declare-fun x291 () Bool)
(declare-fun x70 () Bool)
(declare-fun x748 () Int)
(declare-fun x1066 () Int)
(declare-fun x24 (Int) Int)
(declare-fun x195 () Bool)
(declare-fun x311 () Int)
(declare-fun x839 () Bool)
(declare-fun x1005 () Bool)
(declare-fun x282 () Int)
(declare-fun x636 () Int)
(declare-fun x383 () Int)
(declare-fun x611 () Bool)
(declare-fun x820 () Int)
(declare-fun x1017 () Int)
(declare-fun x83 () Bool)
(declare-fun x626 () Int)
(declare-fun x675 () Bool)
(declare-fun x1049 (Int) Int)
(declare-fun x115 () Bool)
(declare-fun x1000 () Int)
(declare-fun x250 () Int)
(declare-fun x1083 () Bool)
(declare-fun x38 (Int) Int)
(declare-fun x693 () Int)
(declare-fun x814 (Int) Int)
(declare-fun x661 () Bool)
(declare-fun x985 () Int)
(declare-fun x391 () Bool)
(declare-fun x448 () Bool)
(declare-fun x257 () Bool)
(declare-fun x354 () Int)
(declare-fun x1033 () Int)
(declare-fun x430 () Int)
(declare-fun x340 () Bool)
(declare-fun x970 () Bool)
(declare-fun x274 () Int)
(declare-fun x1007 () Int)
(declare-fun x131 () Int)
(declare-fun x246 () Int)
(declare-fun x789 () Int)
(declare-fun x642 () Int)
(declare-fun x723 () Int)
(declare-fun x631 () Bool)
(declare-fun x591 () Bool)
(declare-fun x588 () Int)
(declare-fun x40 () Bool)
(declare-fun x967 () Bool)
(declare-fun x791 () Bool)
(declare-fun x690 () Int)
(declare-fun x261 () Int)
(declare-fun x438 () Int)
(declare-fun x507 () Int)
(declare-fun x25 () Int)
(declare-fun x418 () Bool)
(declare-fun x1047 () Bool)
(declare-fun x2 () Bool)
(declare-fun x775 () Int)
(declare-fun x163 () Bool)
(declare-fun x774 (Int) Int)
(declare-fun x888 () Bool)
(declare-fun x752 () Bool)
(declare-fun x411 () Int)
(declare-fun x769 () Int)
(declare-fun x23 () Bool)
(declare-fun x5 (Int) Int)
(declare-fun x1060 () Bool)
(declare-fun x812 () Int)
(declare-fun x301 () Int)
(declare-fun x120 () Int)
(declare-fun x932 () Bool)
(declare-fun x979 () Int)
(declare-fun x1057 () Bool)
(declare-fun x149 () Int)
(declare-fun x587 () Int)
(declare-fun x779 () Int)
(declare-fun x1026 () Int)
(declare-fun x712 () Int)
(declare-fun x783 () Bool)
(declare-fun x225 () Int)
(declare-fun x969 () Int)
(declare-fun x226 () Bool)
(declare-fun x472 () Int)
(declare-fun x361 () Int)
(declare-fun x670 () Bool)
(declare-fun x33 () Bool)
(declare-fun x616 () Int)
(declare-fun x209 () Int)
(declare-fun x1070 () Bool)
(declare-fun x741 () Int)
(declare-fun x1042 () Bool)
(declare-fun x55 () Bool)
(declare-fun x572 () Bool)
(declare-fun x777 () Bool)
(declare-fun x1022 () Bool)
(declare-fun x620 () Bool)
(declare-fun x259 (Int) Int)
(declare-fun x86 () Bool)
(declare-fun x409 () Int)
(declare-fun x968 () Int)
(declare-fun x82 () Int)
(declare-fun x880 () Int)
(declare-fun x746 () Bool)
(declare-fun x925 () Bool)
(declare-fun x333 () Int)
(declare-fun x948 () Int)
(declare-fun x374 () Bool)
(declare-fun x3 () Int)
(declare-fun x11 (Int) Int)
(declare-fun x606 () Int)
(declare-fun x378 () Bool)
(declare-fun x353 () Int)
(declare-fun x778 () Int)
(declare-fun x14 () Int)
(declare-fun x138 () Int)
(declare-fun x828 () Bool)
(declare-fun x435 () Int)
(declare-fun x330 () Bool)
(declare-fun x868 () Int)
(declare-fun x182 () Bool)
(declare-fun x1081 () Bool)
(declare-fun x348 () Int)
(declare-fun x911 () Bool)
(declare-fun x683 () Bool)
(declare-fun x629 (Int) Int)
(declare-fun x233 () Int)
(declare-fun x64 () Bool)
(declare-fun x534 () Int)
(declare-fun x454 () Int)
(declare-fun x848 () Int)
(declare-fun x139 () Int)
(declare-fun x882 () Bool)
(declare-fun x809 () Int)
(declare-fun x252 () Bool)
(declare-fun x521 () Int)
(declare-fun x908 () Int)
(declare-fun x412 () Int)
(declare-fun x561 () Int)
(declare-fun x787 () Bool)
(declare-fun x621 () Int)
(declare-fun x127 () Bool)
(declare-fun x918 () Int)
(declare-fun x117 () Bool)
(declare-fun x249 () Bool)
(declare-fun x854 () Bool)
(declare-fun x218 () Int)
(declare-fun x197 () Bool)
(declare-fun x853 () Int)
(declare-fun x526 () Bool)
(declare-fun x604 () Bool)
(declare-fun x850 () Int)
(declare-fun x470 () Int)
(declare-fun x819 () Bool)
(declare-fun x368 () Int)
(declare-fun x1030 () Int)
(declare-fun x351 (Int) Int)
(declare-fun x909 () Bool)
(declare-fun x978 () Bool)
(declare-fun x1054 () Bool)
(declare-fun x1052 (Int) Int)
(declare-fun x1056 () Int)
(declare-fun x216 () Int)
(declare-fun x202 () Bool)
(declare-fun x1043 () Bool)
(declare-fun x497 () Bool)
(declare-fun x165 () Int)
(declare-fun x94 () Bool)
(declare-fun x630 () Int)
(declare-fun x859 () Bool)
(declare-fun x437 () Int)
(declare-fun x923 () Int)
(declare-fun x949 () Int)
(declare-fun x402 () Int)
(declare-fun x18 () Int)
(declare-fun x265 () Bool)
(declare-fun x436 () Bool)
(declare-fun x401 () Int)
(declare-fun x277 () Int)
(declare-fun x823 () Bool)
(declare-fun x1065 (Int) Int)
(declare-fun x945 () Int)
(declare-fun x251 () Int)
(declare-fun x740 () Int)
(declare-fun x213 () Int)
(declare-fun x581 () Int)
(declare-fun x1071 () Bool)
(declare-fun x204 () Int)
(declare-fun x708 () Int)
(declare-fun x492 () Bool)
(declare-fun x884 () Int)
(declare-fun x650 () Int)
(declare-fun x29 () Bool)
(declare-fun x144 () Bool)
(declare-fun x567 () Bool)
(declare-fun x152 () Bool)
(declare-fun x897 () Int)
(declare-fun x89 () Int)
(declare-fun x292 () Bool)
(declare-fun x737 () Bool)
(declare-fun x332 () Int)
(declare-fun x342 () Int)
(declare-fun x158 () Int)
(declare-fun x415 () Bool)
(declare-fun x735 () Bool)
(declare-fun x358 () Int)
(declare-fun x160 () Bool)
(declare-fun x928 (Int) Int)
(declare-fun x582 () Bool)
(declare-fun x323 () Bool)
(declare-fun x881 () Bool)
(declare-fun x589 () Int)
(declare-fun x141 () Int)
(declare-fun x687 () Int)
(declare-fun x313 () Int)
(declare-fun x1062 () Int)
(declare-fun x13 () Bool)
(declare-fun x15 () Bool)
(declare-fun x406 () Int)
(declare-fun x803 () Bool)
(declare-fun x700 () Int)
(declare-fun x481 () Int)
(declare-fun x863 () Int)
(declare-fun x512 () Int)
(declare-fun x71 () Bool)
(declare-fun x356 () Bool)
(declare-fun x931 () Int)
(declare-fun x1016 () Int)
(declare-fun x335 () Int)
(declare-fun x910 () Bool)
(declare-fun x584 () Int)
(declare-fun x509 () Bool)
(declare-fun x907 (Int) Int)
(declare-fun x905 (Int) Int)
(declare-fun x858 () Bool)
(declare-fun x228 () Int)
(declare-fun x262 () Int)
(declare-fun x796 () Bool)
(declare-fun x977 () Bool)
(declare-fun x385 (Int) Int)
(declare-fun x889 () Int)
(declare-fun x307 () Bool)
(declare-fun x297 () Int)
(declare-fun x886 () Int)
(declare-fun x603 () Bool)
(declare-fun x103 () Bool)
(declare-fun x894 () Int)
(declare-fun x1009 () Int)
(declare-fun x312 () Int)
(declare-fun x638 () Int)
(declare-fun x635 (Int) Int)
(declare-fun x855 () Int)
(declare-fun x206 () Bool)
(declare-fun x939 () Bool)
(declare-fun x974 (Int) Int)
(declare-fun x656 () Int)
(declare-fun x337 () Bool)
(declare-fun x655 () Bool)
(declare-fun x1082 () Int)
(declare-fun x730 () Int)
(declare-fun x490 () Bool)
(declare-fun x980 () Bool)
(declare-fun x74 () Int)
(declare-fun x1015 () Bool)
(declare-fun x961 () Int)
(declare-fun x849 () Int)
(declare-fun x140 () Bool)
(declare-fun x449 () Int)
(declare-fun x253 () Bool)
(declare-fun x388 () Int)
(declare-fun x940 () Int)
(declare-fun x192 (Int) Int)
(declare-fun x181 () Int)
(declare-fun x841 () Bool)
(declare-fun x222 () Int)
(declare-fun x126 () Bool)
(declare-fun x837 () Int)
(declare-fun x956 () Bool)
(declare-fun x157 () Bool)
(declare-fun x186 (Int) Int)
(declare-fun x207 () Bool)
(declare-fun x585 () Int)
(declare-fun x8 () Int)
(declare-fun x627 () Int)
(declare-fun x762 () Int)
(declare-fun x37 () Int)
(declare-fun x760 () Bool)
(declare-fun x376 () Int)
(declare-fun x721 () Bool)
(declare-fun x1079 () Int)
(declare-fun x651 () Bool)
(declare-fun x914 () Int)
(declare-fun x229 (Int Int) Int)
(declare-fun x132 () Bool)
(declare-fun x290 () Int)
(declare-fun x178 () Int)
(declare-fun x169 () Int)
(declare-fun x1055 () Bool)
(declare-fun x231 () Int)
(declare-fun x210 () Bool)
(declare-fun x99 () Bool)
(declare-fun x501 () Bool)
(declare-fun x61 () Int)
(declare-fun x328 () Int)
(declare-fun x998 () Int)
(declare-fun x499 () Int)
(declare-fun x331 () Bool)
(declare-fun x446 () Int)
(declare-fun x714 () Bool)
(declare-fun x986 () Int)
(declare-fun x1038 () Bool)
(declare-fun x107 () Bool)
(declare-fun x680 () Int)
(declare-fun x393 () Int)
(declare-fun x394 () Bool)
(declare-fun x577 () Bool)
(declare-fun x817 () Int)
(declare-fun x852 (Int) Int)
(declare-fun x482 () Int)
(declare-fun x400 () Bool)
(declare-fun x272 () Bool)
(declare-fun x179 () Bool)
(declare-fun x942 () Bool)
(declare-fun x583 () Int)
(declare-fun x804 () Int)
(declare-fun x85 () Int)
(declare-fun x384 () Bool)
(declare-fun x794 () Int)
(declare-fun x698 () Bool)
(declare-fun x865 (Int) Int)
(declare-fun x780 () Int)
(declare-fun x198 () Int)
(declare-fun x994 (Int) Int)
(declare-fun x162 () Bool)
(declare-fun x912 () Bool)
(declare-fun x565 () Int)
(declare-fun x981 () Bool)
(declare-fun x296 () Int)
(declare-fun x232 () Int)
(declare-fun x795 () Bool)
(declare-fun x896 () Int)
(declare-fun x840 () Int)
(declare-fun x569 () Int)
(declare-fun x248 () Int)
(declare-fun x310 () Int)
(declare-fun x357 () Int)
(declare-fun x568 () Int)
(declare-fun x875 () Bool)
(declare-fun x954 () Bool)
(declare-fun x234 (Int) Int)
(declare-fun x360 () Int)
(declare-fun x916 () Int)
(declare-fun x72 () Bool)
(declare-fun x924 () Int)
(declare-fun x420 () Int)
(declare-fun x508 () Bool)
(declare-fun x227 () Int)
(declare-fun x786 () Int)
(declare-fun x156 () Bool)
(declare-fun x168 () Bool)
(declare-fun x664 () Bool)
(declare-fun x73 () Int)
(declare-fun x355 () Bool)
(declare-fun x288 () Int)
(declare-fun x150 () Int)
(declare-fun x6 () Int)
(declare-fun x657 () Int)
(declare-fun x306 () Bool)
(declare-fun x596 () Int)
(declare-fun x811 () Bool)
(declare-fun x431 () Bool)
(declare-fun x901 () Int)
(declare-fun x319 () Int)
(declare-fun x97 (Int) Int)
(declare-fun x964 () Int)
(declare-fun x180 () Int)
(declare-fun x765 () Bool)
(declare-fun x895 () Int)
(declare-fun x776 () Bool)
(declare-fun x1002 (Int) Int)
(declare-fun x874 (Int) Int)
(declare-fun x715 () Bool)
(declare-fun x459 () Bool)
(declare-fun x732 () Int)
(declare-fun x933 () Bool)
(declare-fun x877 () Int)
(declare-fun x338 (Int) Int)
(declare-fun x744 () Int)
(declare-fun x395 () Int)
(declare-fun x542 () Int)
(declare-fun x975 () Bool)
(declare-fun x413 () Int)
(declare-fun x102 () Int)
(declare-fun x944 () Bool)
(declare-fun x479 () Int)
(declare-fun x547 () Int)
(declare-fun x258 () Int)
(declare-fun x410 () Int)
(declare-fun x676 () Bool)
(declare-fun x84 () Bool)
(declare-fun x188 () Int)
(declare-fun x966 () Int)
(declare-fun x286 () Bool)
(declare-fun x906 () Int)
(declare-fun x108 () Bool)
(declare-fun x289 () Bool)
(declare-fun x280 () Bool)
(declare-fun x614 () Bool)
(declare-fun x827 () Int)
(declare-fun x239 () Bool)
(declare-fun x832 () Int)
(declare-fun x112 () Bool)
(declare-fun x1059 () Bool)
(declare-fun x770 () Bool)
(declare-fun x867 () Int)
(declare-fun x1045 (Int) Int)
(declare-fun x761 () Int)
(declare-fun x399 () Bool)
(declare-fun x515 () Bool)
(declare-fun x668 () Int)
(declare-fun x739 () Int)
(declare-fun x346 () Int)
(declare-fun x96 () Int)
(declare-fun x317 () Bool)
(declare-fun x815 () Int)
(declare-fun x1032 (Int) Int)
(declare-fun x844 () Int)
(declare-fun x607 () Int)
(declare-fun x58 (Int) Int)
(declare-fun x799 () Bool)
(declare-fun x1067 () Int)
(declare-fun x695 () Int)
(declare-fun x937 () Bool)
(declare-fun x90 () Int)
(declare-fun x709 () Int)
(declare-fun x995 () Int)
(declare-fun x759 () Int)
(declare-fun x151 () Int)
(declare-fun x447 () Int)
(declare-fun x1020 () Int)
(declare-fun x691 () Int)
(declare-fun x1085 () Int)
(declare-fun x955 () Int)
(declare-fun x49 () Int)
(declare-fun x707 () Bool)
(declare-fun x559 () Bool)
(declare-fun x694 () Int)
(declare-fun x298 () Bool)
(declare-fun x93 () Int)
(declare-fun x757 () Bool)
(declare-fun x623 () Int)
(declare-fun x142 () Int)
(declare-fun x269 () Bool)
(declare-fun x566 () Bool)
(declare-fun x489 () Bool)
(declare-fun x660 () Bool)
(declare-fun x187 (Int Int) Int)
(declare-fun x528 () Bool)
(declare-fun x532 () Int)
(declare-fun x665 () Int)
(declare-fun x831 () Int)
(declare-fun x407 () Bool)
(declare-fun x615 () Bool)
(declare-fun x576 () Int)
(declare-fun x802 () Bool)
(declare-fun x451 () Int)
(declare-fun x807 (Int Int) Int)
(declare-fun x546 () Int)
(declare-fun x119 () Bool)
(declare-fun x1018 () Bool)
(declare-fun x308 () Bool)
(declare-fun x592 () Int)
(declare-fun x270 () Bool)
(declare-fun x504 () Int)
(declare-fun x836 () Int)
(declare-fun x343 () Int)
(declare-fun x556 () Int)
(declare-fun x7 () Int)
(declare-fun x681 () Bool)
(declare-fun x443 () Int)
(define-fun x153 ((x617 Int)) Int (ite (and (<= 0 x617) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x617)) x617 (- x617 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x473 ((x617 Int)) Int (ite (and (>= x617 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x617 0)) (+ x617 115792089237316195423570985008687907853269984665640564039457584007913129639936) x617))
(define-fun x327 ((x965 Int)) Bool (and (<= 0 x965) (< x965 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x161 ((x965 Int)) Bool (and (>= x965 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x965)))
(define-fun x1028 ((x965 Int)) Bool (and (= (x807 115792089237316195423570985008687907853269984665640564039457584007913129639935 x965) x965) (= x965 (x807 x965 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x159 ((x965 Int)) Bool (and (= (x807 0 x965) 0) (= 0 (x807 x965 0))))
(define-fun x771 ((x965 Int)) Bool (= (x807 x965 x965) x965))
(define-fun x105 ((x965 Int)) Bool (and (x159 x965) (x1028 x965) (x771 x965)))
(define-fun x101 ((x965 Int) (x879 Int)) Bool (= (x807 x965 x879) (x807 x879 x965)))
(define-fun x555 ((x965 Int) (x879 Int)) Bool (and (=> (<= 0 x965) (<= (x807 x965 x879) x965)) (<= 0 (x807 x965 x879)) (=> (>= x879 0) (<= (x807 x965 x879) x879))))
(define-fun x212 ((x965 Int) (x879 Int)) Bool (and (x101 x965 x879) (x555 x965 x879)))
(define-fun x471 ((x965 Int)) Bool (= (mod x965 1208925819614629174706176) (+ (mod x965 18446744073709551616) (x807 x965 1208907372870555465154560))))
(define-fun x95 ((x965 Int)) Bool (and (x471 x965) (x212 x965 1208907372870555465154560)))
(define-fun x835 ((x965 Int)) Bool (= (+ (x807 x965 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x965 32)) (mod x965 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x404 ((x965 Int)) Bool (and (x835 x965) (x212 x965 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x51 ((x965 Int)) Bool (= (mod x965 6582018229284824168619876730229402019930943462534319453394436096) (+ (x807 x965 6582018229189043197315758676582005330734049138558148258257960960) (mod x965 95780971304118053647396689196894323976171195136475136))))
(define-fun x652 ((x965 Int)) Bool (and (x51 x965) (x212 x965 6582018229189043197315758676582005330734049138558148258257960960)))
(define-fun x91 ((x965 Int)) Bool (=> (and (<= 0 x965) (< x965 2)) (= 0 (x807 77194726158210796949047323339125271902179989777093709359638389338608753093290 x965))))
(define-fun x976 ((x965 Int)) Bool (and (x212 x965 77194726158210796949047323339125271902179989777093709359638389338608753093290) (x91 x965)))
(define-fun x539 ((x965 Int)) Bool (= (+ (x807 x965 7237005577325680195743901738874374364099144639582604309003564681041176166400) (mod x965 6582018229284824168619876730229402019930943462534319453394436096)) (mod x965 7237005577332262213973186563042994240829374041602535252466099000494570602496)))
(define-fun x890 ((x965 Int)) Bool (and (x212 x965 7237005577325680195743901738874374364099144639582604309003564681041176166400) (x539 x965)))
(define-fun x500 ((x965 Int)) Bool (= (mod x965 72057594037927936) (+ (mod x965 281474976710656) (x807 x965 71776119061217280))))
(define-fun x390 ((x965 Int)) Bool (and (x212 x965 71776119061217280) (x500 x965)))
(define-fun x362 ((x965 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x187 x965 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x187 115792089237316195423570985008687907853269984665640564039457584007913129639935 x965) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x106 ((x965 Int)) Bool (and (= x965 (x187 x965 0)) (= x965 (x187 0 x965))))
(define-fun x56 ((x965 Int)) Bool (= (x187 x965 x965) x965))
(define-fun x493 ((x965 Int)) Bool (and (x362 x965) (x56 x965) (x106 x965)))
(define-fun x876 ((x965 Int) (x879 Int)) Bool (= (x187 x965 x879) (x187 x879 x965)))
(define-fun x1024 ((x965 Int) (x879 Int)) Bool (and (=> (<= 0 x965) (<= x965 (x187 x965 x879))) (=> (<= 0 x879) (<= x879 (x187 x965 x879))) (>= (+ x879 x965) (x187 x965 x879))))
(define-fun x503 ((x965 Int) (x879 Int)) Bool (and (x876 x965 x879) (x1024 x965 x879)))
(define-fun x35 ((x965 Int)) Bool (= (+ (mod x965 72057594037927936) (x807 x965 72057594037927936)) (mod x965 144115188075855872)))
(define-fun x432 ((x965 Int)) Bool (and (x35 x965) (x212 x965 72057594037927936)))
(define-fun x943 ((x965 Int)) Bool (= (+ (x807 x965 144115188075855872) (mod x965 144115188075855872)) (mod x965 288230376151711744)))
(define-fun x663 ((x965 Int)) Bool (and (x212 x965 144115188075855872) (x943 x965)))
(define-fun x522 ((x965 Int)) Bool (= (+ (mod x965 288230376151711744) (x807 x965 288230376151711744)) (mod x965 576460752303423488)))
(define-fun x88 ((x965 Int)) Bool (and (x212 x965 288230376151711744) (x522 x965)))
(define-fun x423 ((x965 Int)) Bool (= (mod x965 1152921504606846976) (+ (mod x965 576460752303423488) (x807 x965 576460752303423488))))
(define-fun x487 ((x965 Int)) Bool (and (x212 x965 576460752303423488) (x423 x965)))
(define-fun x371 ((x965 Int)) Bool (= (+ (x807 x965 1152921504606846976) (mod x965 1152921504606846976)) (mod x965 2305843009213693952)))
(define-fun x972 ((x965 Int)) Bool (and (x212 x965 1152921504606846976) (x371 x965)))
(define-fun x510 ((x965 Int)) Bool (= (mod x965 340282366920938463463374607431768211456) (x807 x965 340282366920938463463374607431768211455)))
(define-fun x367 ((x965 Int)) Bool (and (x212 x965 340282366920938463463374607431768211455) (x510 x965)))
(define-fun x264 ((x965 Int)) Bool (= (x807 x965 1) (mod x965 2)))
(define-fun x281 ((x965 Int)) Bool (and (x264 x965) (x212 x965 1)))
(define-fun x1069 ((x965 Int)) Bool (= (x807 x965 1099511627775) (mod x965 1099511627776)))
(define-fun x193 ((x965 Int)) Bool (and (x212 x965 1099511627775) (x1069 x965)))
(define-fun x145 ((x537 Int)) Int (ite (= x537 256) (ite false 1 0) (x852 x537)))
(define-fun x135 ((x537 Int)) Int (ite (= 288 x537) 29360345738620397371765038775553738755387432804059789257388031015462633472000 (x186 x537)))
(define-fun x873 ((x537 Int)) Int (ite (= 292 x537) 52 (x135 x537)))
(define-fun x982 ((x537 Int)) Int (ite (= x537 324) 54 (x873 x537)))
(define-fun x963 ((x537 Int)) Int (ite (= x537 356) x16 (x982 x537)))
(define-fun x1019 ((x537 Int)) Int (ite (= x537 388) x28 (x963 x537)))
(define-fun x53 ((x537 Int)) Int (ite (= x537 420) x34 (x1019 x537)))
(define-fun x164 ((x537 Int)) Int (ite (= x537 452) x857 (x53 x537)))
(define-fun x1014 ((x537 Int)) Int (ite (= 484 x537) x730 (x164 x537)))
(define-fun x768 ((x537 Int)) Int (ite (= x537 516) (ite x189 1 0) (x1014 x537)))
(define-fun x171 ((x537 Int)) Int (ite (= 1664 x537) 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x1077 x537)))
(define-fun x382 ((x537 Int)) Int (ite (and (<= 1664 x537) (< x537 (+ 1664 32))) (x1052 (+ 0 (- x537 1664))) (x171 x537)))
(define-fun x4 ((x537 Int)) Int (ite (= x537 288) x177 (x768 x537)))
(define-fun x30 ((x537 Int)) Int (ite x958 (x4 x537) (x768 x537)))
(define-fun x717 ((x537 Int)) Int (ite x252 (x382 x537) (x171 x537)))
(define-fun x992 ((x537 Int)) Int (ite (= x998 x537) 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x717 x537)))
(define-fun x1050 ((x537 Int)) Int (ite (and (>= x537 x998) (< x537 (+ x998 128))) (x38 (+ (- x537 x998) 0)) (x992 x537)))
(define-fun x375 ((x537 Int)) Int (ite x927 (x1050 x537) (x992 x537)))
(define-fun x363 ((x537 Int)) Int (ite (= x537 x151) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x375 x537)))
(define-fun x530 ((x537 Int)) Int (ite (= x640 x537) x730 (x363 x537)))
(define-fun x305 ((x537 Int)) Int (ite (and (> (+ x151 32) x537) (<= x151 x537)) (x599 (+ 0 (- x537 x151))) (x530 x537)))
(define-fun x1 ((x537 Int)) Int (ite x64 (x305 x537) (x530 x537)))
(define-fun x797 ((x537 Int)) Int (ite (= x537 x408) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x1 x537)))
(define-fun x68 ((x537 Int)) Int (ite (= x537 x592) x730 (x797 x537)))
(define-fun x148 ((x537 Int)) Int (ite (and (>= x537 x408) (< x537 (+ 32 x408))) (x738 (+ (- x537 x408) 0)) (x68 x537)))
(define-fun x934 ((x537 Int)) Int (ite x970 (x148 x537) (x68 x537)))
(define-fun x710 ((x537 Int)) Int (ite (= x537 x1084) 2 (x934 x537)))
(define-fun x416 ((x537 Int)) Int (ite (= x537 x255) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x710 x537)))
(define-fun x689 ((x537 Int)) Int (ite (= x729 x537) 2 (x416 x537)))
(define-fun x329 ((x537 Int)) Int (ite (= x542 x537) 23605076785439214643232854609925391371455184862258269280504658849269400207360 (x689 x537)))
(define-fun x260 ((x537 Int)) Int (ite (= x729 x537) 2 (x416 x537)))
(define-fun x790 ((x537 Int)) Int (ite (= x537 x1040) 23605076785439214643232854609925391371455184862258269280504658849269400207360 (x260 x537)))
(define-fun x505 ((x537 Int)) Int (ite x673 (x329 x537) (x790 x537)))
(define-fun x21 ((x537 Int)) Int (ite (= x336 x537) 2 (x505 x537)))
(define-fun x706 ((x537 Int)) Int (ite (= x537 x780) 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x21 x537)))
(define-fun x236 ((x537 Int)) Int (ite (= x537 x921) 2 (x706 x537)))
(define-fun x883 ((x537 Int)) Int (ite (= x576 x537) 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x236 x537)))
(define-fun x47 ((x537 Int)) Int (ite (= x451 x537) 2 (x883 x537)))
(define-fun x284 ((x537 Int)) Int (ite (= x1053 x537) 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x47 x537)))
(define-fun x315 ((x537 Int)) Int (ite (= x451 x537) 2 (x883 x537)))
(define-fun x834 ((x537 Int)) Int (ite (= x537 x743) 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x315 x537)))
(define-fun x230 ((x537 Int)) Int (ite x681 (x284 x537) (x834 x537)))
(define-fun x1023 ((x537 Int)) Int (ite (= x1068 x537) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x230 x537)))
(define-fun x267 ((x537 Int)) Int (ite (= x537 x794) x1013 (x1023 x537)))
(define-fun x824 ((x537 Int)) Int (ite (and (< x537 (+ 32 x1068)) (<= x1068 x537)) (x814 (+ (- x537 x1068) 0)) (x267 x537)))
(define-fun x538 ((x537 Int)) Int (ite x36 (x824 x537) (x267 x537)))
(define-fun x704 ((x537 Int)) Int (ite x735 (x230 x537) (x538 x537)))
(define-fun x816 ((x537 Int)) Int (ite (= x358 x537) 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x704 x537)))
(define-fun x610 ((x537 Int)) Int (ite (= x968 x537) x730 (x816 x537)))
(define-fun x67 ((x537 Int)) Int (ite (= x543 x537) x365 (x610 x537)))
(define-fun x696 ((x537 Int)) Int (ite (and (> (+ 64 x358) x537) (<= x358 x537)) (x5 (+ 0 (- x537 x358))) (x67 x537)))
(define-fun x619 ((x537 Int)) Int (ite (= x358 x537) 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x704 x537)))
(define-fun x1036 ((x537 Int)) Int (ite (= x388 x537) x730 (x619 x537)))
(define-fun x1011 ((x537 Int)) Int (ite (= x537 x624) x365 (x1036 x537)))
(define-fun x495 ((x537 Int)) Int (ite (= x885 x537) x438 (x1011 x537)))
(define-fun x960 ((x537 Int)) Int (ite (and (>= x537 x358) (< x537 (+ 32 x358))) (x385 (+ 0 (- x537 x358))) (x495 x537)))
(define-fun x557 ((x537 Int)) Int (ite x634 (x696 x537) (x67 x537)))
(define-fun x266 ((x537 Int)) Int (ite x676 (x960 x537) (x495 x537)))
(define-fun x184 ((x537 Int)) Int (ite x210 (ite x676 (x194 x537) (x749 x537)) (ite x634 (x774 x537) (x749 x537))))
(define-fun x429 ((x537 Int)) Int (ite x210 (ite x676 (x928 x537) (x629 x537)) (ite x634 (x529 x537) (x629 x537))))
(define-fun x325 ((x537 Int)) Int (ite x210 (ite x676 (x58 x537) (x874 x537)) (ite x634 (x667 x537) (x874 x537))))
(define-fun x464 ((x537 Int)) Int (ite x210 (ite x676 (x994 x537) (x215 x537)) (ite x634 (x97 x537) (x215 x537))))
(define-fun x860 ((x537 Int)) Int (ite x210 (ite x676 (x234 x537) (x192 x537)) (ite x634 (x635 x537) (x192 x537))))
(define-fun x826 ((x537 Int)) Int (ite x210 (ite x676 (x1002 x537) (x11 x537)) (ite x634 (x905 x537) (x11 x537))))
(define-fun x458 ((x537 Int)) Int (ite x210 (ite x676 (x671 x537) (x24 x537)) (ite x634 (x338 x537) (x24 x537))))
(define-fun x214 ((x537 Int)) Int (ite x210 (ite x676 (x907 x537) (x1032 x537)) (ite x634 (x926 x537) (x1032 x537))))
(define-fun x442 ((x537 Int)) Int (ite x210 (x266 x537) (x557 x537)))
(define-fun x176 ((x537 Int)) Int (ite (= x833 x537) x612 (x184 x537)))
(define-fun x864 ((x537 Int)) Int (ite x841 (x184 x537) (x176 x537)))
(define-fun x134 ((x537 Int)) Int (ite (= x537 x581) 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x442 x537)))
(define-fun x637 ((x537 Int)) Int (ite (= x537 x672) x237 (x134 x537)))
(define-fun x87 ((x537 Int)) Int (ite (= x537 x141) x593 (x637 x537)))
(define-fun x136 ((x537 Int)) Int (ite (= x523 x537) 0 (x87 x537)))
(define-fun x570 ((x537 Int)) Int (ite (= x446 x537) x569 (x136 x537)))
(define-fun x243 ((x537 Int)) Int (ite (= x537 x908) x952 (x570 x537)))
(define-fun x208 ((x537 Int)) Int (ite (= x537 x1003) x547 (x243 x537)))
(define-fun x350 ((x537 Int)) Int (ite (= x524 x537) x966 (x208 x537)))
(define-fun x453 ((x537 Int)) Int (ite (= x537 x527) x28 (x350 x537)))
(define-fun x461 ((x537 Int)) Int (ite (= x537 x409) x684 (x453 x537)))
(define-fun x170 ((x537 Int)) Int (ite (and (<= x581 x537) (> (+ x581 96) x537)) (x118 (+ 0 (- x537 x581))) (x461 x537)))
(define-fun x463 ((x537 Int)) Int (ite x217 (x170 x537) (x461 x537)))
(define-fun x12 ((x537 Int)) Int (ite (= x20 x537) x169 (x463 x537)))
(define-fun x485 ((x537 Int)) Int (ite (= x955 x537) x402 (x12 x537)))
(define-fun x913 ((x537 Int)) Int (ite (= x66 x537) x445 (x485 x537)))
(define-fun x899 ((x537 Int)) Int (ite (= x479 x537) x556 (x913 x537)))
(define-fun x50 ((x537 Int)) Int (ite (= x537 x395) x438 (x899 x537)))
(define-fun x904 ((x537 Int)) Int (ite (= x537 x20) 2 (x50 x537)))
(define-fun x220 ((x537 Int)) Int (ite (= x537 x685) 24969082719448127345671160280498924465674002430646247116174538836667302674432 (x904 x537)))
(define-fun x133 ((x537 Int)) Int (ite x841 (x50 x537) (x220 x537)))
(define-fun x959 ((x537 Int)) Int (ite (= x359 x537) x870 (x133 x537)))
(define-fun x792 ((x537 Int)) Int (ite (= x537 x359) 0 (x133 x537)))
(define-fun x488 ((x537 Int)) Int (ite x98 (x133 x537) (ite x962 (x959 x537) (x792 x537))))
(define-fun x235 ((x537 Int)) Int (ite (= x359 x537) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x488 x537)))
(define-fun x397 ((x537 Int)) Int (ite (= x678 x537) x1013 (x235 x537)))
(define-fun x242 ((x537 Int)) Int (ite (= x733 x537) x684 (x397 x537)))
(define-fun x842 ((x537 Int)) Int (ite (= x719 x537) x365 (x242 x537)))
(define-fun x1039 ((x537 Int)) Int (ite (and (< x537 (+ 0 0)) (>= x537 0)) (x62 (+ (- x537 0) 0)) (x842 x537)))
(define-fun x598 ((x537 Int)) Int (ite x566 (x1039 x537) (x842 x537)))
(define-fun x766 ((x537 Int)) Int (ite (and (< x537 (+ x154 0)) (<= 0 x537)) (x62 (+ 0 (- x537 0))) (x598 x537)))
(define-fun x734 ((x537 Int)) Int (ite x43 (x598 x537) (x766 x537)))
(define-fun x917 ((x537 Int)) Int (ite (= x359 x537) 61906025702411949798612179514519095217898697161212278170789384498383220113408 (x734 x537)))
(define-fun x541 ((x537 Int)) Int (ite (= x342 x537) x1013 (x917 x537)))
(define-fun x639 ((x537 Int)) Int (ite (= x537 x405) x365 (x541 x537)))
(define-fun x1027 ((x537 Int)) Int (ite (and (> (+ x359 0) x537) (>= x537 x359)) (x380 (+ (- x537 x359) 0)) (x639 x537)))
(define-fun x1063 ((x537 Int)) Int (ite (= x359 x537) 97250886131833805217759495634388081419703557252615901133360390455399389593600 (x488 x537)))
(define-fun x731 ((x537 Int)) Int (ite (= x537 x613) x1013 (x1063 x537)))
(define-fun x1041 ((x537 Int)) Int (ite (= x537 x1012) x684 (x731 x537)))
(define-fun x590 ((x537 Int)) Int (ite (= x537 x1030) x365 (x1041 x537)))
(define-fun x104 ((x537 Int)) Int (ite (= x537 x931) x556 (x590 x537)))
(define-fun x334 ((x537 Int)) Int (ite (and (>= x537 x359) (< x537 (+ 0 x359))) (x259 (+ (- x537 x359) 0)) (x104 x537)))
(define-fun x781 ((x537 Int)) Int (ite x1031 (ite x307 (x1027 x537) (x639 x537)) (ite x394 (x334 x537) (x104 x537))))
(define-fun x580 ((x537 Int)) Int (ite (= x359 x537) x365 (x781 x537)))
(define-fun x196 ((x537 Int)) Int (ite (= x537 x188) (ite x549 1 0) (x580 x537)))
(define-fun x417 ((x537 Int)) Int (ite (= x537 x359) x365 (x196 x537)))
(define-fun x167 ((x537 Int)) Int (ite x566 (x294 x537) (x464 x537)))
(assert (not (= 1463475841 (+ 2 x969))))
(assert (x404 x392))
(assert (=> (>= 10000 x441) (not (= (+ x969 5) x441))))
(assert (x161 x961))
(assert (x161 x430))
(assert (not (= 509899769 (+ x969 5))))
(assert (not (= (+ x969 8) (x701 x28 52))))
(assert (x161 x584))
(assert (not (= (+ 7 x969) 1099511627776)))
(assert (not (= 72057594037927936 (+ x969 1))))
(assert (not (= (+ 1 x969) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (x701 x990 52) 54)))
(assert (=> (>= 10000 x452) (not (= x452 (+ x339 9)))))
(assert (= x673 (and x480 x10)))
(assert (x161 x360))
(assert (x105 x313))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ 6 x969))))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ x339 9))))
(assert (=> (<= x730 10000) (not (= x730 (+ x339 9)))))
(assert (=> (>= 10000 x467) (not (= x467 (+ 2 x969)))))
(assert (not (= (x701 x28 52) (+ 2 x969))))
(assert (=> (<= x836 10000) (not (= x836 (+ x969 6)))))
(assert (= x939 (and x988 x551)))
(assert (=> (<= x466 10000) (not (= x466 (+ 9 x339)))))
(assert (not (= (+ 3 x969) 1383405463)))
(assert (not (= (x701 x730 53) (x701 x546 54))))
(assert (=> (<= x684 10000) (not (= x684 (x701 x546 54)))))
(assert (= (div x923 281474976710656) (x75 x923 48)))
(assert (x105 144115188075855872))
(assert (=> (>= 10000 x868) (not (= (x701 x990 52) x868))))
(assert (=> (<= x28 10000) (not (= (+ x969 8) x28))))
(assert (not (= (+ x969 4) (x701 x990 52))))
(assert (=> (>= 10000 x871) (not (= (+ x969 2) x871))))
(assert (not (= 54 (+ 2 x969))))
(assert (x161 x647))
(assert (=> (<= x452 10000) (not (= x452 (x701 x990 52)))))
(assert (=> (>= 10000 x990) (not (= x990 (+ x969 7)))))
(assert (=> (<= x310 10000) (not (= x310 (+ 4 x969)))))
(assert (x161 x283))
(assert (not (= 1099511627775 (+ 3 x969))))
(assert (x161 x609))
(assert (not (= 1099511627776 (+ x969 1))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ x969 7))))
(assert (=> (<= x357 10000) (not (= x357 (x701 x452 x467)))))
(assert (x161 x695))
(assert (not (= (+ x969 3) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x161 x800))
(assert (=> (>= 10000 x546) (not (= (+ 4 x969) x546))))
(assert (x161 x336))
(assert (x161 x482))
(assert (x161 x871))
(assert (= x23 (=> (and (or (not x1071) x1071) (= (= x662 0) x1071)) x322)))
(assert (not (= (x701 x546 54) 1099511627775)))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ x969 7))))
(assert (not (= (+ x339 9) 1000000000000000000000000000)))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ x969 7))))
(assert (not (= 994519296000000 (x701 x546 54))))
(assert (x105 x49))
(assert (=> (<= x812 10000) (not (= x812 (+ 9 x339)))))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ 2 x969))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (x701 x546 54))))
(assert (not (= (+ x969 8) 72057594037927936)))
(assert (=> (>= 10000 x812) (not (= (+ 8 x969) x812))))
(assert (not (= (+ 9 x339) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (= x578 (=> (and (= x149 x1029) (= x31 (x153 (+ 31 x125))) (= x547 x178) (= x198 x231) (= x621 (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x31)) (= (= 0 x817) x127) (not x127) (= x198 (x266 x358)) (not x518) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125) (and (> 32 x125) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125)))) x518) (= (x153 (+ x358 x621)) x149) (= x761 x569)) x59)))
(assert (x161 x6))
(assert (not (= (+ x969 1) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (x701 x990 52))))
(assert (x105 x402))
(assert (=> (<= x730 10000) (not (= x730 (+ 8 x969)))))
(assert (=> (>= 10000 x301) (not (= x301 (+ x969 6)))))
(assert (= (and x615 x745) x22))
(assert (= x958 (or x887 x1031)))
(assert (not (= (+ 3 x969) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x161 x345))
(assert (= (and x477 x70) x307))
(assert (not (= (x701 x452 x467) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ x969 2) 509899769)))
(assert (x161 x420))
(assert (=> (<= x42 10000) (not (= x42 (+ 9 x339)))))
(assert (x161 x638))
(assert (x161 x125))
(assert (=> (>= 10000 x812) (not (= (x701 x452 x467) x812))))
(assert (x161 x1012))
(assert (x161 x52))
(assert (= (or x854 (and x247 (not x309))) x651))
(assert (not (= 1099511627775 (+ x969 8))))
(assert (x161 x158))
(assert (not (= 52 (+ x969 6))))
(assert (=> (>= 10000 x806) (not (= (+ 9 x339) x806))))
(assert (= x36 (and x157 x925)))
(assert (x105 71776119061217280))
(assert (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (+ 5 x969))))
(assert (x161 x224))
(assert (=> (<= x546 10000) (not (= x546 (+ x969 7)))))
(assert (not (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x701 x730 53))))
(assert (=> (<= x452 10000) (not (= x452 (+ 2 x969)))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ x969 8))))
(assert (not (= (+ 4 x969) 340282366920938463463374607431768211456)))
(assert (not (= 340282366920938463463374607431768211455 (+ 2 x969))))
(assert (=> (<= x868 10000) (not (= x868 (+ 5 x969)))))
(assert (x161 x726))
(assert (not (= (+ 3 x969) (+ 5 x969))))
(assert (x161 x20))
(assert (not (= 2054196882 (x701 x990 52))))
(assert (not (= (x701 x990 52) 52)))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x701 x546 54))))
(assert (x161 x143))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x701 x730 53))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (x701 x730 53))))
(assert (x161 x14))
(assert (x161 x18))
(assert (not (= (x701 x990 52) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x701 x28 52) 1099511627776)))
(assert (not (= (+ 1 x969) 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (not (= (+ 7 x969) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (not (= 1099511627776 (x701 x452 x467))))
(assert (x161 x805))
(assert (not (= (+ x969 7) 1635491895)))
(assert (not (= (+ 2 x969) 1461501637330902918203684832716283019655932542976)))
(assert (x327 x871))
(assert (=> (<= x441 10000) (not (= (x701 x990 52) x441))))
(assert (= x291 (=> (and (or (not x415) x415) (= x415 (= 0 x586))) x757)))
(assert (not (= (x701 x546 54) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (=> (>= 10000 x647) (not (= x647 (+ 4 x969)))))
(assert (not (= (x701 x990 52) 1099511627776)))
(assert (=> (>= 10000 x868) (not (= x868 (+ x969 2)))))
(assert (not (= (+ 6 x969) 1000000000000000000000000000)))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x701 x990 52))))
(assert (not (= (+ 9 x339) 54)))
(assert (=> (<= x868 10000) (not (= (+ 8 x969) x868))))
(assert (x487 x601))
(assert (not (= (x701 x546 54) 144115188075855872)))
(assert (= x459 (=> (and (= 0 x238) (= x452 0) (= x227 0) (= x250 x948) (= x467 x499) (= x359 x218)) x257)))
(assert (not (= (x701 x546 54) 23168665560438953713825780127241890498045796339729991397848622117550123122688)))
(assert (x161 x729))
(assert (not (= (+ 1 x969) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (not (= 1463475841 (x701 x28 52))))
(assert (x161 x588))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 6 x969))))
(assert (not (= 1099511627776 (+ 2 x969))))
(assert (x161 x743))
(assert (x161 x441))
(assert (= (=> (and (= x3 x547) (= (x153 (+ x953 x358)) x609) (= (x153 (+ x358 32)) x279) (= (= 0 x89) x78) (= x3 (x557 x279)) (not x13) (= x609 x1029) (= (x557 x358) x650) (= x13 (or (> x8 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x8 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x8 64)))) (= x953 (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1000)) (= x569 x650) (= (x153 (+ x8 31)) x1000) (= x231 x764) (not x78)) x59) x1021))
(assert (x161 x583))
(assert (not (= (+ 7 x969) 1463475841)))
(assert (x161 x1046))
(assert (=> (<= x806 10000) (not (= x806 (x701 x452 x467)))))
(assert (= (and x491 x608) x643))
(assert (=> (<= x684 10000) (not (= (x701 x28 52) x684))))
(assert (=> (>= 10000 x730) (not (= (+ x969 5) x730))))
(assert (x161 x233))
(assert (= (x1077 x279) 0))
(assert (x161 x946))
(assert (=> (>= 10000 x333) (not (= (x701 x452 x467) x333))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x969 1))))
(assert (not (= (x701 x452 x467) (+ x969 5))))
(assert (= x502 (=> (and (and (< 0 x403) (= (< x360 x606) x533) (= x660 (> x360 340282366920938463463374607431768211455)) (not x660) (= x360 (div x365 x403))) (or (and (and (= x175 (x807 340282366920938463463374607431768211455 x853)) (= (x473 (- x606 x360)) x853) (= x452 x900) (= x818 (< x606 x360)) (= x870 (x807 340282366920938463463374607431768211455 x853)) (not x818)) x533) (and (= x900 x452) (not x533)))) x944)))
(assert (=> (>= 10000 x452) (not (= (+ 6 x969) x452))))
(assert (=> (>= 10000 x836) (not (= x836 (+ 9 x339)))))
(assert (not (= 994519296000000 (+ x969 3))))
(assert (not (= 1089035750 (+ x969 7))))
(assert (x161 x753))
(assert (x161 x93))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ x969 2))))
(assert (not (= (+ 9 x339) 1635491895)))
(assert (x327 x452))
(assert (=> (<= x441 10000) (not (= x441 (x701 x730 53)))))
(assert (not (= (+ x969 8) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x701 x28 52) 29360345738620397371765038775553738755387432804059789257388031015462633472000)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ x969 2))))
(assert (x161 x1084))
(assert (x161 x662))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 5 x969))))
(assert (x161 x964))
(assert (=> (<= x546 10000) (not (= x546 (x701 x546 54)))))
(assert (x161 x993))
(assert (=> (>= 10000 x836) (not (= (+ x969 4) x836))))
(assert (not (= 288230376151711744 (+ 8 x969))))
(assert (not (= 576460752303423488 (x701 x730 53))))
(assert (=> (<= x28 10000) (not (= x28 (+ 6 x969)))))
(assert (x161 x426))
(assert (not (= (+ x969 1) 4294967296)))
(assert (x327 x836))
(assert (=> (<= x333 10000) (not (= x333 (x701 x546 54)))))
(assert (not (= 72057594037927936 (+ 2 x969))))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (x701 x28 52))))
(assert (not (= 1099511627775 (+ 2 x969))))
(assert (not (= (+ x969 5) 1000000000000000000000000000)))
(assert (not (= (+ 6 x969) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (x161 x1075))
(assert (not (= 18446744073709551615 (x701 x990 52))))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x701 x452 x467))))
(assert (= x306 (=> (and (= (x864 x833) x478) (= x273 (x807 77194726158210796949047323339125271902179989777093709359638389338608753093290 x478)) (= (x153 (+ x648 32)) x216) (<= x478 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x478 0) (= (ite (not x94) (= 0 (x807 x273 (x473 (- x273 1)))) (not x94)) x110) (= x94 (= 0 x273))) (and (=> (and x110 (and (= (x75 x39 2) x708) (= (= x708 0) x988) (= x39 (x807 x139 x657)) (= x563 77194726158210796949047323339125271902179989777093709359638389338608753093290) (= (x807 77194726158210796949047323339125271902179989777093709359638389338608753093290 x478) x139) (= x751 (x473 (- x139 1))) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x751) x657))) (and (=> (and (= x546 0) x988) x903) (=> (not x988) x160))) (=> (and (and (= x216 x218) (= x499 52) (= x28 x250)) (not x110)) x459)))))
(assert (not (= 1463475841 (+ 9 x339))))
(assert (not (= 1000000000000000000000000000 (+ 2 x969))))
(assert (not (= (+ x969 3) 29360345738620397371765038775553738755387432804059789257388031015462633472000)))
(assert (x161 x542))
(assert (not (= 509899769 (+ 4 x969))))
(assert (not (= (+ 3 x969) 52)))
(assert (not (= 1118877564 (+ x969 6))))
(assert (= x909 (and (not x925) x157)))
(assert (x161 x884))
(assert (= (=> (and (and (not x572) (= x342 (x153 (+ x359 4))) (= (x1065 x684) x895) (< 0 x851) (= x572 (= 0 x895)) (= (< 0 x586) x70) (= x405 (x153 (+ x342 32)))) (or (not x70) (and (and x697 (= x605 (x167 x54)) (= x973 (x167 x684)) (> 4294967296 x759) (= x980 (<= x605 (x548 x54))) x980 (= (= (x548 x684) x973) x697)) x70))) x291) x19))
(assert (not (= 1099511627775 (x701 x452 x467))))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (+ 6 x969))))
(assert (not (= 2054196882 (+ 2 x969))))
(assert (not (= (x701 x452 x467) 1635491895)))
(assert (not (= 52 (+ 8 x969))))
(assert (not (= (+ x969 7) 1152921504606846976)))
(assert (not (= (+ 2 x969) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (not (= (+ x969 5) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x105 x76))
(assert (not (= (+ 8 x969) (x701 x990 52))))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (+ x969 4))))
(assert (not (= (+ 3 x969) 18446744073709551615)))
(assert (x161 x784))
(assert (=> (<= x647 10000) (not (= x647 (+ 6 x969)))))
(assert (x161 x815))
(assert (x161 x575))
(assert (not (= (+ 6 x969) 23168665560438953713825780127241890498045796339729991397848622117550123122688)))
(assert (not (= (+ 6 x969) 500000000000000000000000000)))
(assert (not (= (+ 1 x969) 71776119061217280)))
(assert (x161 x524))
(assert (=> (>= 10000 x812) (not (= x812 (x701 x730 53)))))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (+ x969 5))))
(assert (not (= (+ x969 8) 1089035750)))
(assert (not (= 144115188075855872 (+ x969 8))))
(assert (= (and x618 x770) x71))
(assert (x161 x479))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x701 x452 x467))))
(assert (not (= 71776119061217280 (x701 x452 x467))))
(assert (x161 x918))
(assert (not (= (+ x969 8) 1118877564)))
(assert (x161 x693))
(assert (x161 x61))
(assert (x161 x778))
(assert (not (= (+ 1 x969) 54)))
(assert (x161 x602))
(assert (=> (>= 10000 x357) (not (= (+ 2 x969) x357))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ 6 x969))))
(assert (not (= (+ x969 8) 65536)))
(assert (x88 x601))
(assert (not (= 1208907372870555465154560 (x701 x452 x467))))
(assert (=> (>= 10000 x42) (not (= (x701 x990 52) x42))))
(assert (not (= 500000000000000000000000000 (+ 9 x339))))
(assert (not (= 576460752303423488 (+ x339 9))))
(assert (=> (>= 10000 x868) (not (= x868 (x701 x452 x467)))))
(assert (x161 x531))
(assert (=> (>= 10000 x452) (not (= (x701 x546 54) x452))))
(assert (= (x75 x1010 176) (div x1010 95780971304118053647396689196894323976171195136475136)))
(assert (=> (<= x466 10000) (not (= x466 (x701 x730 53)))))
(assert (=> (>= 10000 x805) (not (= x805 (+ x969 1)))))
(assert (x161 x258))
(assert (not (= (+ 3 x969) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= 340282366920938463463374607431768211456 (x701 x730 53))))
(assert (and (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x846 2 238)) (= (x846 2 92) 4951760157141521099596496896) (= 6427752177035961102167848369364650410088811975131171341205504 (x846 2 202)) (= 1125899906842624 (x846 2 50)) (= (x846 2 159) 730750818665451459101842416358141509827966271488) (= (x846 2 57) 144115188075855872) (= (x846 2 143) 11150372599265311570767859136324180752990208) (= 2 (x846 2 1)) (= 664613997892457936451903530140172288 (x846 2 119)) (= (x846 2 110) 1298074214633706907132624082305024) (= (x846 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 2361183241434822606848 (x846 2 71)) (= (x846 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 25711008708143844408671393477458601640355247900524685364822016 (x846 2 204)) (= (x846 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x846 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x846 2 14) 16384) (= (x846 2 136) 87112285931760246646623899502532662132736) (= (x846 2 0) 1) (= (x846 2 162) 5846006549323611672814739330865132078623730171904) (= 374144419156711147060143317175368453031918731001856 (x846 2 168)) (= (x846 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x846 2 85) 38685626227668133590597632) (= (x846 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x846 2 73) 9444732965739290427392) (= (x846 2 115) 41538374868278621028243970633760768) (= (x846 2 64) 18446744073709551616) (= (x846 2 160) 1461501637330902918203684832716283019655932542976) (= 5316911983139663491615228241121378304 (x846 2 122)) (= (x846 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x846 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 5444517870735015415413993718908291383296 (x846 2 132)) (= 4096 (x846 2 12)) (= (x846 2 177) 191561942608236107294793378393788647952342390272950272) (= (x846 2 52) 4503599627370496) (= (x846 2 127) 170141183460469231731687303715884105728) (= 2251799813685248 (x846 2 51)) (= 262144 (x846 2 18)) (= 85070591730234615865843651857942052864 (x846 2 126)) (= 22300745198530623141535718272648361505980416 (x846 2 144)) (= (x846 2 101) 2535301200456458802993406410752) (= (x846 2 109) 649037107316853453566312041152512) (= 65536 (x846 2 16)) (= 68719476736 (x846 2 36)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x846 2 213)) (= (x846 2 151) 2854495385411919762116571938898990272765493248) (= (x846 2 77) 151115727451828646838272) (= (x846 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 713623846352979940529142984724747568191373312 (x846 2 149)) (= (x846 2 59) 576460752303423488) (= (x846 2 63) 9223372036854775808) (= 3064991081731777716716694054300618367237478244367204352 (x846 2 181)) (= (x846 2 13) 8192) (= 23945242826029513411849172299223580994042798784118784 (x846 2 174)) (= 17592186044416 (x846 2 44)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x846 2 230)) (= (x846 2 22) 4194304) (= (x846 2 157) 182687704666362864775460604089535377456991567872) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x846 2 222)) (= (x846 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x846 2 6) 64) (= 1024 (x846 2 10)) (= 102844034832575377634685573909834406561420991602098741459288064 (x846 2 206)) (= (x846 2 7) 128) (= (x846 2 2) 4) (= (x846 2 87) 154742504910672534362390528) (= 1329227995784915872903807060280344576 (x846 2 120)) (= (x846 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 784637716923335095479473677900958302012794430558004314112 (x846 2 189)) (= (x846 2 175) 47890485652059026823698344598447161988085597568237568) (= 36893488147419103232 (x846 2 65)) (= (x846 2 4) 16) (= 140737488355328 (x846 2 47)) (= (x846 2 138) 348449143727040986586495598010130648530944) (= (x846 2 84) 19342813113834066795298816) (= (x846 2 20) 1048576) (= 4611686018427387904 (x846 2 62)) (= (x846 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x846 2 29) 536870912) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x846 2 232)) (= 1361129467683753853853498429727072845824 (x846 2 130)) (= (x846 2 185) 49039857307708443467467104868809893875799651909875269632) (= 158456325028528675187087900672 (x846 2 97)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x846 2 246)) (= (x846 2 176) 95780971304118053647396689196894323976171195136475136) (= (x846 2 104) 20282409603651670423947251286016) (= 5986310706507378352962293074805895248510699696029696 (x846 2 172)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x846 2 237)) (= 1496577676626844588240573268701473812127674924007424 (x846 2 170)) (= 83076749736557242056487941267521536 (x846 2 116)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x846 2 211)) (= (x846 2 45) 35184372088832) (= (x846 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 383123885216472214589586756787577295904684780545900544 (x846 2 178)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x846 2 252)) (= 2305843009213693952 (x846 2 61)) (= (x846 2 141) 2787593149816327892691964784081045188247552) (= (x846 2 128) 340282366920938463463374607431768211456) (= (x846 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x846 2 74) 18889465931478580854784) (= (x846 2 66) 73786976294838206464) (= 81129638414606681695789005144064 (x846 2 106)) (= (x846 2 142) 5575186299632655785383929568162090376495104) (= (x846 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x846 2 169) 748288838313422294120286634350736906063837462003712) (= (x846 2 117) 166153499473114484112975882535043072) (= (x846 2 99) 633825300114114700748351602688) (= (x846 2 80) 1208925819614629174706176) (= (x846 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 4294967296 (x846 2 32)) (= 309485009821345068724781056 (x846 2 88)) (= (x846 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x846 2 133) 10889035741470030830827987437816582766592) (= (x846 2 68) 295147905179352825856) (= 77371252455336267181195264 (x846 2 86)) (= (x846 2 137) 174224571863520493293247799005065324265472) (= 3138550867693340381917894711603833208051177722232017256448 (x846 2 191)) (= (x846 2 40) 1099511627776) (= (x846 2 153) 11417981541647679048466287755595961091061972992) (= 21267647932558653966460912964485513216 (x846 2 124)) (= 1073741824 (x846 2 30)) (= (x846 2 49) 562949953421312) (= (x846 2 76) 75557863725914323419136) (= 356811923176489970264571492362373784095686656 (x846 2 148)) (= (x846 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x846 2 235)) (= (x846 2 8) 256) (= 131072 (x846 2 17)) (= 40564819207303340847894502572032 (x846 2 105)) (= (x846 2 121) 2658455991569831745807614120560689152) (= (x846 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x846 2 152) 5708990770823839524233143877797980545530986496) (= 200867255532373784442745261542645325315275374222849104412672 (x846 2 197)) (= 17179869184 (x846 2 34)) (= (x846 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x846 2 179) 766247770432944429179173513575154591809369561091801088) (= 4398046511104 (x846 2 42)) (= 2722258935367507707706996859454145691648 (x846 2 131)) (= 37778931862957161709568 (x846 2 75)) (= (x846 2 19) 524288) (= (x846 2 183) 12259964326927110866866776217202473468949912977468817408) (= 549755813888 (x846 2 39)) (= 1267650600228229401496703205376 (x846 2 100)) (= (x846 2 158) 365375409332725729550921208179070754913983135744) (= 268435456 (x846 2 28)) (= (x846 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x846 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x846 2 182) 6129982163463555433433388108601236734474956488734408704) (= 680564733841876926926749214863536422912 (x846 2 129)) (= (x846 2 108) 324518553658426726783156020576256) (= 8796093022208 (x846 2 43)) (= (x846 2 103) 10141204801825835211973625643008) (= 39614081257132168796771975168 (x846 2 95)) (= 34359738368 (x846 2 35)) (= (x846 2 79) 604462909807314587353088) (= 302231454903657293676544 (x846 2 78)) (= (x846 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x846 2 245)) (= 316912650057057350374175801344 (x846 2 98)) (= 1152921504606846976 (x846 2 60)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x846 2 244)) (= (x846 2 23) 8388608) (= 72057594037927936 (x846 2 56)) (= (x846 2 11) 2048) (= (x846 2 113) 10384593717069655257060992658440192) (= 196159429230833773869868419475239575503198607639501078528 (x846 2 187)) (= (x846 2 46) 70368744177664) (= (x846 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 1180591620717411303424 (x846 2 70)) (= 2199023255552 (x846 2 41)) (= 19807040628566084398385987584 (x846 2 94)) (= (x846 2 135) 43556142965880123323311949751266331066368) (= 822752278660603021077484591278675252491367932816789931674304512 (x846 2 209)) (= 618970019642690137449562112 (x846 2 89)) (= (x846 2 67) 147573952589676412928) (= (x846 2 26) 67108864) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x846 2 243)) (= (x846 2 37) 137438953472) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x846 2 223)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x846 2 254)) (= (x846 2 15) 32768) (= (x846 2 134) 21778071482940061661655974875633165533184) (= 45671926166590716193865151022383844364247891968 (x846 2 155)) (= 46768052394588893382517914646921056628989841375232 (x846 2 165)) (= (x846 2 72) 4722366482869645213696) (= 8589934592 (x846 2 33)) (= (x846 2 147) 178405961588244985132285746181186892047843328) (= (x846 2 146) 89202980794122492566142873090593446023921664) (= (x846 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x846 2 21) 2097152) (= (x846 2 9) 512) (= (x846 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x846 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x846 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x846 2 54) 18014398509481984) (= 11692013098647223345629478661730264157247460343808 (x846 2 163)) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x846 2 220)) (= (x846 2 107) 162259276829213363391578010288128) (= (x846 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x846 2 140) 1393796574908163946345982392040522594123776) (= 134217728 (x846 2 27)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x846 2 239)) (= 36028797018963968 (x846 2 55)) (= 4835703278458516698824704 (x846 2 82)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x846 2 231)) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x846 2 240)) (= (x846 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x846 2 156) 91343852333181432387730302044767688728495783936) (= 274877906944 (x846 2 38)) (= (x846 2 139) 696898287454081973172991196020261297061888) (= 11972621413014756705924586149611790497021399392059392 (x846 2 173)) (= (x846 2 166) 93536104789177786765035829293842113257979682750464) (= 44601490397061246283071436545296723011960832 (x846 2 145)) (= (x846 2 81) 2417851639229258349412352) (= (x846 2 125) 42535295865117307932921825928971026432) (= (x846 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x846 2 58) 288230376151711744) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x846 2 242)) (= (x846 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 26328072917139296674479506920917608079723773850137277813577744384 (x846 2 214)) (= 2475880078570760549798248448 (x846 2 91)) (= 803469022129495137770981046170581301261101496891396417650688 (x846 2 199)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x846 2 229)) (= (x846 2 150) 1427247692705959881058285969449495136382746624) (= 33554432 (x846 2 25)) (= 9671406556917033397649408 (x846 2 83)) (= (x846 2 24) 16777216) (= 20769187434139310514121985316880384 (x846 2 114)) (= 2596148429267413814265248164610048 (x846 2 111)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x846 2 228)) (= (x846 2 112) 5192296858534827628530496329220096) (= (x846 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x846 2 164) 23384026197294446691258957323460528314494920687616) (= (x846 2 96) 79228162514264337593543950336) (= (x846 2 154) 22835963083295358096932575511191922182123945984) (= 9903520314283042199192993792 (x846 2 93)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x846 2 226)) (= (x846 2 5) 32) (= 12554203470773361527671578846415332832204710888928069025792 (x846 2 193)) (= (x846 2 161) 2923003274661805836407369665432566039311865085952) (= 9007199254740992 (x846 2 53)) (= 281474976710656 (x846 2 48)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x846 2 218)) (= (x846 2 171) 2993155353253689176481146537402947624255349848014848) (= 10633823966279326983230456482242756608 (x846 2 123)) (= 2147483648 (x846 2 31)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x846 2 212)) (= (x846 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 205688069665150755269371147819668813122841983204197482918576128 (x846 2 207)) (= (x846 2 102) 5070602400912917605986812821504) (= (x846 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 1237940039285380274899124224 (x846 2 90)) (= 590295810358705651712 (x846 2 69)) (= 187072209578355573530071658587684226515959365500928 (x846 2 167)) (= (x846 2 3) 8) (= 332306998946228968225951765070086144 (x846 2 118))))
(assert (x161 x740))
(assert (x161 x680))
(assert (not (= (+ 1 x969) 576460752303423488)))
(assert (=> (<= x684 10000) (not (= (x701 x730 53) x684))))
(assert (x161 x985))
(assert (x161 x326))
(assert (not (= (x701 x546 54) 52)))
(assert (x161 x113))
(assert (x161 x767))
(assert (x161 x1026))
(assert (not (= (+ 3 x969) (x701 x452 x467))))
(assert (x161 x789))
(assert (x161 x467))
(assert (not (= (+ 6 x969) 65536)))
(assert (not (= 288230376151711744 (x701 x28 52))))
(assert (x161 x69))
(assert (not (= 994519296000000 (x701 x990 52))))
(assert (x161 x354))
(assert (not (= (x701 x730 53) 1152921504606846976)))
(assert (not (= (x701 x730 53) 1635491895)))
(assert (not (= (x701 x990 52) 144115188075855872)))
(assert (=> (>= 10000 x467) (not (= (+ 9 x339) x467))))
(assert (x161 x213))
(assert (= x520 (or x927 x910)))
(assert (not (= (+ x339 9) 71776119061217280)))
(assert (not (= 4294967296 (x701 x990 52))))
(assert (=> (>= 10000 x452) (not (= x452 (x701 x28 52)))))
(assert (not (= (x701 x452 x467) 1383405463)))
(assert (x161 x1062))
(assert (not (= (+ 7 x969) 340282366920938463463374607431768211455)))
(assert (= x1054 (or (and x828 x201) x356 (and x721 x287))))
(assert (x161 x469))
(assert (not (= 1142400387 (x701 x452 x467))))
(assert (not (= (+ 8 x969) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (not (= 65536 (x701 x452 x467))))
(assert (=> (<= x301 10000) (not (= (x701 x452 x467) x301))))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x701 x452 x467))))
(assert (=> (<= x28 10000) (not (= (+ x969 1) x28))))
(assert (x161 x26))
(assert (=> (>= 10000 x28) (not (= (x701 x28 52) x28))))
(assert (x161 x199))
(assert (=> (>= 10000 x871) (not (= (x701 x730 53) x871))))
(assert (not (= (x701 x730 53) 65536)))
(assert (=> (<= x42 10000) (not (= (+ 1 x969) x42))))
(assert (x161 x376))
(assert (x327 x467))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x701 x990 52))))
(assert (=> (<= x452 10000) (not (= (x701 x452 x467) x452))))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (x701 x452 x467))))
(assert (=> (>= 10000 x357) (not (= x357 (x701 x28 52)))))
(assert (= x29 (and x745 (not x615))))
(assert (= x847 (and x298 x1059)))
(assert (x161 x780))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (x701 x452 x467))))
(assert (not (= 18446744073709551615 (+ 4 x969))))
(assert (not (= 1142400387 (x701 x546 54))))
(assert (= (div x708 4) (x75 x708 2)))
(assert (x161 x848))
(assert (=> (>= 10000 x730) (not (= x730 (x701 x452 x467)))))
(assert (=> (>= 10000 x441) (not (= x441 (+ x339 9)))))
(assert (not (= (x701 x730 53) (+ x969 1))))
(assert (x161 x388))
(assert (x367 x169))
(assert (=> (>= 10000 x805) (not (= (+ x969 2) x805))))
(assert (x161 x263))
(assert (not (= (+ 6 x969) 71776119061217280)))
(assert (not (= (+ x969 1) 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (x161 x379))
(assert (x161 x440))
(assert (not (= (x701 x990 52) (+ x969 7))))
(assert (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 (+ 4 x969))))
(assert (x161 x353))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x701 x546 54))))
(assert (not (= (+ 2 x969) (+ 6 x969))))
(assert (not (= 1142400387 (+ x339 9))))
(assert (=> (<= x647 10000) (not (= x647 (x701 x990 52)))))
(assert (=> (<= x546 10000) (not (= x546 (+ 6 x969)))))
(assert (not (= (+ x339 9) 72057594037927936)))
(assert (x161 x435))
(assert (x161 x238))
(assert (x161 x154))
(assert (not (= (x701 x452 x467) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x161 x346))
(assert (x161 x332))
(assert (not (= (x701 x28 52) 144115188075855872)))
(assert (= x173 (=> (and (= x116 (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x49)) (= (x153 (+ x1068 x116)) x311) (= x49 (x153 (+ 31 x379))) (not x659) (= x1074 (x538 x1068)) (not x280) (= x280 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x379) (and (< x379 32) (= true (<= x379 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= (= 0 x558) x659) (= x358 x311) (= x1074 x850)) x254)))
(assert (not (= (x701 x28 52) 1089035750)))
(assert (=> (<= x28 10000) (not (= (x701 x730 53) x28))))
(assert (=> (>= 10000 x466) (not (= x466 (+ 4 x969)))))
(assert (not (= 946116605 (+ 1 x969))))
(assert (not (= (+ 5 x969) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (not (= (+ x339 9) (+ x969 7))))
(assert (not (= (+ 9 x339) (+ 2 x969))))
(assert (not (= (x701 x730 53) 288230376151711744)))
(assert (not (= (+ x339 9) 994519296000000)))
(assert (=> (>= 10000 x357) (not (= x357 (+ 1 x969)))))
(assert (not (= (x701 x546 54) 53)))
(assert (x161 x358))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x701 x452 x467))))
(assert (=> (>= 10000 x836) (not (= x836 (+ x969 8)))))
(assert (x161 x261))
(assert (x161 x1013))
(assert (x161 x727))
(assert (not (= (+ 6 x969) 1635491895)))
(assert (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 (x701 x28 52))))
(assert (not (= (+ 5 x969) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x42 10000) (not (= x42 (+ x969 7)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ x969 5))))
(assert (not (= 4294967296 (x701 x730 53))))
(assert (not (= (+ x969 4) 31536000)))
(assert (not (= (+ x969 1) (+ x339 9))))
(assert (not (= (+ 3 x969) 1142400387)))
(assert (= (and x309 x247) x854))
(assert (x404 x31))
(assert (x161 x481))
(assert (not (= (x701 x28 52) 1208907372870555465154560)))
(assert (=> (<= x452 10000) (not (= x452 (+ 3 x969)))))
(assert (=> (>= 10000 x805) (not (= (x701 x28 52) x805))))
(assert (x161 x990))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (+ 6 x969))))
(assert (not (= 576460752303423488 (x701 x546 54))))
(assert (=> (<= x301 10000) (not (= (+ 3 x969) x301))))
(assert (x390 x601))
(assert (= (or x791 (and (not x1071) x1080)) x117))
(assert (x161 x558))
(assert (x161 x563))
(assert (not (= (x701 x28 52) 52)))
(assert (x105 x736))
(assert (x161 x973))
(assert (x161 x713))
(assert (=> (<= x836 10000) (not (= x836 (+ 2 x969)))))
(assert (=> (>= 10000 x466) (not (= x466 (x701 x452 x467)))))
(assert (=> (>= 10000 x990) (not (= x990 (+ x339 9)))))
(assert (not (= (+ x969 5) 500000000000000000000000000)))
(assert (= x322 (=> (and (and (< 0 x662) (= (= 0 x154) x108)) (or (and (not x108) (and (= (= x727 0) x670) (= x182 (not x670)) (= (ite x182 1 0) x851) (= x154 32))) (and (and (= x713 (x1065 x28)) (= x851 1) (> x713 0)) x108))) x19)))
(assert (x161 x535))
(assert (not (= (+ x969 4) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ 8 x969))))
(assert (not (= (x701 x990 52) 509899769)))
(assert (not (= (+ 6 x969) 144115188075855872)))
(assert (=> (>= 10000 x647) (not (= (+ x339 9) x647))))
(assert (x161 x185))
(assert (x161 x204))
(assert (x105 x443))
(assert (= x910 (and x882 (not x226))))
(assert (=> (>= 10000 x868) (not (= (x701 x730 53) x868))))
(assert (not (= 1000000000000000000000000000 (+ 1 x969))))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (x701 x28 52))))
(assert (not (= 994519296000000 (+ x969 2))))
(assert (x161 x687))
(assert (=> (<= x54 10000) (not (= x54 (x701 x28 52)))))
(assert (=> (<= x333 10000) (not (= x333 (x701 x730 53)))))
(assert (x161 x554))
(assert (x161 x250))
(assert (= 0 (x1077 x798)))
(assert (x161 x540))
(assert (not (= (+ 1 x969) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= 1152921504606846976 (x701 x546 54))))
(assert (not (= 53 (+ 1 x969))))
(assert (= (and x981 x811) x933))
(assert (not (= (x701 x546 54) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ 3 x969) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ 9 x339) 31536000)))
(assert (x161 x494))
(assert (= x611 (and x608 (not x491))))
(assert (not (= (+ 4 x969) 53)))
(assert (=> (<= x647 10000) (not (= x647 (+ 2 x969)))))
(assert (x161 x468))
(assert (x161 x532))
(assert (not (= (+ 4 x969) 288230376151711744)))
(assert (= (=> (and (>= x421 0) (= x211 (x75 x6 212)) (= (x325 x288) x421) (<= 0 x990) (<= x421 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x807 7237005577325680195743901738874374364099144639582604309003564681041176166400 x421) x6) (= x990 (x429 x668)) (= (= x211 0) x427) (= (x701 x546 54) x668) (<= x990 1461501637330902918203684832716283019655932542975) (= (x153 (+ x216 32)) x935) (= x288 (x701 x990 52)) (> 1461501637330902918203684832716283019655932542976 x990)) (and (=> (and (not x427) (and (= x211 x227) (= x990 x948) (= 1 x238) (= 52 x467) (= x990 x452) (= x359 x935))) x257) (=> (and (and (= x935 x218) (= 52 x499) (= x990 x250)) x427) x459))) x903))
(assert (not (= (x701 x730 53) 1118877564)))
(assert (not (= (x701 x452 x467) (+ x969 4))))
(assert (x161 x850))
(assert (x161 x141))
(assert (=> (>= 10000 x871) (not (= (+ x969 5) x871))))
(assert (=> (<= x28 10000) (not (= (+ 4 x969) x28))))
(assert (x161 x998))
(assert (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x701 x28 52))))
(assert (not (= (x701 x452 x467) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (=> (= (x701 x28 52) (x701 x990 52)) (= x28 x990)))
(assert (x161 x893))
(assert (x161 x624))
(assert (=> (>= 10000 x990) (not (= (+ x969 2) x990))))
(assert (x161 x941))
(assert (x161 x277))
(assert (not (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x701 x452 x467))))
(assert (not (= (x701 x28 52) 1099511627775)))
(assert (=> (>= 10000 x452) (not (= x452 (+ x969 4)))))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x701 x730 53))))
(assert (x161 x483))
(assert (x161 x808))
(assert (not (= 1208907372870555465154560 (+ 3 x969))))
(assert (x161 x621))
(assert (not (= (+ x969 6) (+ 1 x969))))
(assert (x161 x410))
(assert (x161 x906))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ 4 x969))))
(assert (=> (<= x836 10000) (not (= (x701 x546 54) x836))))
(assert (not (= (x701 x546 54) 1463475841)))
(assert (not (= 1142400387 (+ x969 6))))
(assert (=> (<= x301 10000) (not (= (+ x969 4) x301))))
(assert (=> (<= x730 10000) (not (= (+ 2 x969) x730))))
(assert (not (= (+ 7 x969) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (not (= 71776119061217280 (+ x969 4))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x701 x730 53))))
(assert (x161 x762))
(assert (=> (>= 10000 x466) (not (= (x701 x28 52) x466))))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (+ x969 1))))
(assert (=> (>= 10000 x301) (not (= x301 (+ x969 7)))))
(assert (x161 x922))
(assert (x161 x138))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x701 x28 52))))
(assert (not (= 576460752303423488 (+ 3 x969))))
(assert (= x356 (and (not x721) x287)))
(assert (x105 (x473 (- x273 1))))
(assert (= x878 (and x352 x520)))
(assert (= x776 (and x698 x1057)))
(assert (=> (<= x805 10000) (not (= (x701 x990 52) x805))))
(assert (not (= 52 (x701 x730 53))))
(assert (not (= (+ 7 x969) 1000000000000000000000000000)))
(assert (x161 x666))
(assert (not (= 2054196882 (x701 x730 53))))
(assert (not (= (+ x969 5) 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (not (= (+ x969 3) 31536000)))
(assert (not (= 1142400387 (+ 4 x969))))
(assert (not (= (x701 x452 x467) (+ 8 x969))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ x969 6))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ 7 x969))))
(assert (not (= 576460752303423488 (+ 7 x969))))
(assert (not (= (+ 9 x339) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x161 x90))
(assert (=> (>= 10000 x466) (not (= x466 (+ 1 x969)))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (x701 x28 52))))
(assert (not (= (+ 3 x969) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (not (= (+ 4 x969) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= (+ x339 9) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (= x1031 (or (and x912 (not x415)) x737)))
(assert (not (= (+ x969 5) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (not (= (+ x969 5) 340282366920938463463374607431768211455)))
(assert (not (= 576460752303423488 (+ 5 x969))))
(assert (not (= (+ x969 5) (+ x969 1))))
(assert (not (= 1383405463 (+ 8 x969))))
(assert (not (= (x701 x28 52) (+ x969 1))))
(assert (x161 x642))
(assert (not (= (+ 3 x969) 4294967296)))
(assert (=> (<= x333 10000) (not (= (x701 x990 52) x333))))
(assert (x161 x685))
(assert (= (or x699 x324) x100))
(assert (=> (<= x310 10000) (not (= x310 (x701 x546 54)))))
(assert (not (= 65536 (+ x969 5))))
(assert (x161 x1006))
(assert (= x2 (or x40 x962)))
(assert (= (=> (and (= x191 (ite (= x426 1) x475 x470)) (= (= 0 x80) x460) (= (> x426 2) x1005) (not x1005) (= (= 0 (ite x460 x80 (ite (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x848) 1 0))) x163)) (and (=> (and x163 (and (= x850 x276) (= x1068 x358))) x254) (=> (and (and (and (= (< 0 x1058) x925) (= x794 (x153 (+ x1068 4)))) (or (and (= x558 x1058) (not x925)) (and (and (= 1 x558) (> 4294967296 x379)) x925))) (not x163)) x173))) x772))
(assert (x161 x82))
(assert (not (= 576460752303423488 (+ x969 6))))
(assert (x161 x486))
(assert (not (= (+ 5 x969) 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (not (= (x701 x28 52) 994519296000000)))
(assert (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x701 x28 52))))
(assert (x161 x759))
(assert (not (= 1635491895 (+ 2 x969))))
(assert (not (= (+ 3 x969) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= 1000000000000000000000000000 (+ x969 8))))
(assert (=> (>= 10000 x301) (not (= (x701 x990 52) x301))))
(assert (=> (>= 10000 x310) (not (= (x701 x730 53) x310))))
(assert (not (= (x701 x990 52) 500000000000000000000000000)))
(assert (not (= (x701 x546 54) 4294967296)))
(assert (x161 x739))
(assert (=> (>= 10000 x441) (not (= (x701 x452 x467) x441))))
(assert (not (= 71776119061217280 (+ x969 7))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 9 x339))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ 1 x969))))
(assert (x161 x361))
(assert (not (= (+ x969 3) 65535)))
(assert (not (= (+ 9 x339) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= 65536 (+ 1 x969))))
(assert (=> (<= x684 10000) (not (= (x701 x452 x467) x684))))
(assert (not (= 1635491895 (+ 5 x969))))
(assert (x161 x763))
(assert (= x155 (and (not x436) x147)))
(assert (not (= (x701 x452 x467) 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (x161 x203))
(assert (not (= (+ 7 x969) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (=> (<= x647 10000) (not (= x647 (x701 x546 54)))))
(assert (not (= 1089035750 (+ 1 x969))))
(assert (not (= (+ 6 x969) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ x339 9) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (x161 x649))
(assert (x161 x914))
(assert (x161 x205))
(assert (= x114 (and (not x752) x48)))
(assert (x161 x7))
(assert (= x249 (and x331 x847)))
(assert (x161 x843))
(assert (not (= 52 (+ 9 x339))))
(assert (=> (<= x871 10000) (not (= (x701 x990 52) x871))))
(assert (x161 x838))
(assert (= x147 (or x735 x202)))
(assert (not (= (+ x969 7) 54)))
(assert (not (= (x701 x28 52) 1118877564)))
(assert (x327 x301))
(assert (=> (<= x357 10000) (not (= x357 (+ 6 x969)))))
(assert (=> (>= 10000 x990) (not (= x990 (x701 x452 x467)))))
(assert (=> (>= 10000 x28) (not (= x28 (x701 x452 x467)))))
(assert (not (= (x701 x730 53) 18446744073709551615)))
(assert (not (= (x701 x990 52) 1208907372870555465154560)))
(assert (not (= (+ x969 5) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x161 x209))
(assert (not (= (+ 9 x339) 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (not (= (+ x339 9) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x161 x28))
(assert (not (= (+ x969 8) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (not (= 1099511627776 (+ 6 x969))))
(assert (=> (>= 10000 x836) (not (= x836 (+ 1 x969)))))
(assert (x161 x547))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ x969 7))))
(assert (= x608 (or x210 x651)))
(assert (x212 x656 x565))
(assert (not (= 1383405463 (x701 x546 54))))
(assert (not (= (x701 x28 52) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (<= x357 10000) (not (= (x701 x546 54) x357))))
(assert (not (= (x701 x452 x467) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (not (= (+ 5 x969) (+ 4 x969))))
(assert (=> (<= x301 10000) (not (= (+ x969 5) x301))))
(assert (not (= (+ 1 x969) (+ x969 7))))
(assert (x161 x712))
(assert (=> (<= x467 10000) (not (= x467 (x701 x990 52)))))
(assert (=> (>= 10000 x806) (not (= (+ x969 6) x806))))
(assert (x161 x178))
(assert (not (= 500000000000000000000000000 (+ 1 x969))))
(assert (not (= (+ x339 9) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x161 x111))
(assert (=> (<= x310 10000) (not (= (+ x969 2) x310))))
(assert (x161 x328))
(assert (x161 x1003))
(assert (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (+ x339 9))))
(assert (=> (= (x701 x546 54) (x701 x452 x467)) (and (= x467 54) (= x546 x452))))
(assert (x161 x383))
(assert (x161 x845))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x339 9))))
(assert (= (or x707 x1042) x888))
(assert (= (or x366 x939) x519))
(assert (not (= 1152921504606846976 (+ 2 x969))))
(assert (x161 x262))
(assert (=> (>= 10000 x730) (not (= (+ x969 3) x730))))
(assert (x161 x831))
(assert (not (= (+ x969 3) 946116605)))
(assert (not (= (+ 9 x339) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (not (= 18446744073709551615 (+ 1 x969))))
(assert (x105 x626))
(assert (not (= (x701 x546 54) (x701 x28 52))))
(assert (x161 x626))
(assert (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 (x701 x452 x467))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ 2 x969))))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (+ 7 x969))))
(assert (not (= (x701 x28 52) 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (not (= (x701 x730 53) 1208907372870555465154560)))
(assert (not (= (x701 x546 54) (+ x969 2))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ 1 x969))))
(assert (not (= (+ 7 x969) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (+ x969 6))))
(assert (= (=> (and (or (and (not x226) (= x986 x584)) (and (and (= 1 x584) (> 4294967296 x732)) x226)) (and (= x977 (or (> x318 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x318 32) (= true (<= x318 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (= x764 (x717 1664)) (= x226 (< 0 x986)) (not x977) (= (x153 (+ x304 1664)) x998) (not x63) (= x392 (x153 (+ 31 x318))) (= (= x961 0) x63) (= x304 (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x392)))) x754) x967))
(assert (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (+ 4 x969))))
(assert (x161 x895))
(assert (x161 x419))
(assert (not (= 18446744073709551615 (+ 9 x339))))
(assert (x161 x180))
(assert (x161 x74))
(assert (not (= 509899769 (x701 x452 x467))))
(assert (x105 x1064))
(assert (=> (<= x54 10000) (not (= x54 (x701 x452 x467)))))
(assert (=> (>= 10000 x466) (not (= x466 (+ x969 2)))))
(assert (x161 x832))
(assert (x161 x282))
(assert (not (= (x701 x28 52) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (not (= (+ 8 x969) 4294967296)))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (+ 8 x969))))
(assert (x161 x1033))
(assert (not (= (+ 7 x969) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= 1000000000000000000000000000 (x701 x990 52))))
(assert (= x202 (or x909 x36)))
(assert (not (= (x701 x546 54) 1118877564)))
(assert (x161 x428))
(assert (x161 x279))
(assert (x161 x798))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ x969 1))))
(assert (not (= (+ 4 x969) 2054196882)))
(assert (=> (<= x684 10000) (not (= x684 (+ x969 4)))))
(assert (x161 x645))
(assert (x972 x601))
(assert (x161 x369))
(assert (not (= 340282366920938463463374607431768211456 (+ x969 7))))
(assert (x161 x844))
(assert (= x252 (and x508 x664)))
(assert (not (= 994519296000000 (+ x969 1))))
(assert (not (= (x701 x452 x467) 1463475841)))
(assert (x161 x357))
(assert (=> (<= x806 10000) (not (= (x701 x28 52) x806))))
(assert (not (= (+ x969 1) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (=> (<= x647 10000) (not (= x647 (x701 x452 x467)))))
(assert (= (=> (and (= (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x494) x180) (not x902) (= (x153 (+ x408 x180)) x1084) (= (= 0 x680) x221) (= (x153 (+ x146 31)) x494) (= x255 (x153 (+ x1084 32))) (= x902 (or (and (< x146 32) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x146) true)) (> x146 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not x221) (= (x153 (+ x1084 64)) x729) (= (= x276 0) x130) (= (x934 x408) x470) (= x730 x213)) (and (=> x130 x55) (=> (and (= x810 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x276)) (not x130)) (and (=> (and x810 (and (= x542 (x153 (+ x729 32))) (= (x153 (+ 64 x729)) x1076) (= (= x730 x1013) x10))) (and (=> (not x10) x55) (=> (and (= x1076 x336) x10) x591))) (=> (and (not x810) (and (= (x153 (+ 64 x729)) x1006) (= x1040 (x153 (+ 32 x729))) (= x1006 x336))) x591))))) x137))
(assert (x367 x853))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (+ x969 3))))
(assert (x161 x855))
(assert (not (= (x701 x546 54) 500000000000000000000000000)))
(assert (not (= 500000000000000000000000000 (x701 x452 x467))))
(assert (not (= (x701 x990 52) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x327 x333))
(assert (=> (>= 10000 x806) (not (= x806 (+ 8 x969)))))
(assert (not (= (+ x969 8) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= (+ x969 2) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= (+ x969 2) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x161 x149))
(assert (x161 x593))
(assert (x161 x995))
(assert (= (x75 x444 1) (div x444 2)))
(assert (not (= (+ 2 x969) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (>= 10000 x730) (not (= (+ x969 4) x730))))
(assert (not (= (x701 x546 54) 2054196882)))
(assert (= (or x197 x307) x912))
(assert (not (= (+ 4 x969) 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (not (= (x701 x546 54) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x161 x898))
(assert (not (= (+ 1 x969) 1118877564)))
(assert (not (= (x701 x730 53) 65535)))
(assert (=> (>= 10000 x310) (not (= (+ 5 x969) x310))))
(assert (x161 x952))
(assert (x161 x512))
(assert (x327 x812))
(assert (not (= (x701 x452 x467) 4294967296)))
(assert (=> (>= 10000 x836) (not (= (+ x969 7) x836))))
(assert (=> (>= 10000 x301) (not (= (+ 2 x969) x301))))
(assert (not (= 1463475841 (x701 x990 52))))
(assert (not (= (x701 x546 54) 18446744073709551615)))
(assert (not (= (+ 7 x969) 65535)))
(assert (not (= (x701 x28 52) 946116605)))
(assert (= x295 (and x888 x32)))
(assert (not (= (+ x339 9) 1383405463)))
(assert (not (= 1461501637330902918203684832716283019655932542976 (x701 x452 x467))))
(assert (x161 x719))
(assert (x367 x445))
(assert (not (= (+ x339 9) 340282366920938463463374607431768211456)))
(assert (x161 x370))
(assert (not (= (+ 5 x969) 994519296000000)))
(assert (=> (>= 10000 x310) (not (= (+ x339 9) x310))))
(assert (not (= (x701 x28 52) 1152921504606846976)))
(assert (not (= (x701 x452 x467) 340282366920938463463374607431768211456)))
(assert (=> (>= 10000 x812) (not (= (+ 6 x969) x812))))
(assert (x161 x237))
(assert (not (= (+ 2 x969) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (x701 x28 52))))
(assert (not (= (x701 x452 x467) 1118877564)))
(assert (x105 x444))
(assert (not (= (+ x969 3) 1463475841)))
(assert (=> (>= 10000 x812) (not (= (+ 5 x969) x812))))
(assert (=> (<= x466 10000) (not (= (x701 x546 54) x466))))
(assert (not (= (x701 x990 52) 65536)))
(assert (x105 288230376151711744))
(assert (= (or x1034 x673) x604))
(assert (=> (>= 10000 x684) (not (= (x701 x990 52) x684))))
(assert (x95 x601))
(assert (=> (>= 10000 x806) (not (= (+ 5 x969) x806))))
(assert (x105 x456))
(assert (not (= (x701 x990 52) (+ x969 6))))
(assert (=> (<= x647 10000) (not (= (+ x969 8) x647))))
(assert (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 (+ x969 8))))
(assert (= x881 (and (not x352) x520)))
(assert (x161 x915))
(assert (x161 x285))
(assert (=> (<= x466 10000) (not (= x466 (+ x969 8)))))
(assert (=> (>= 10000 x868) (not (= (x701 x546 54) x868))))
(assert (x161 x786))
(assert (not (= (+ x969 7) (x701 x546 54))))
(assert (not (= 52 (x701 x452 x467))))
(assert (not (= (+ 8 x969) 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (not (= (+ x969 2) (+ x969 8))))
(assert (x161 x271))
(assert (=> (>= 10000 x54) (not (= x54 (+ 3 x969)))))
(assert (x105 x445))
(assert (=> (>= 10000 x871) (not (= x871 (+ 6 x969)))))
(assert (=> (>= 10000 x467) (not (= x467 (+ x969 4)))))
(assert (=> (= (x701 x990 52) (x701 x452 x467)) (and (= x467 52) (= x990 x452))))
(assert (not (= (+ 7 x969) 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (x161 x857))
(assert (x161 x553))
(assert (not (= 946116605 (+ x969 8))))
(assert (not (= (+ 6 x969) 340282366920938463463374607431768211455)))
(assert (x161 x1066))
(assert (=> (<= x310 10000) (not (= x310 (x701 x452 x467)))))
(assert (not (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x701 x28 52))))
(assert (not (= (x701 x28 52) 509899769)))
(assert (not (= 65535 (x701 x990 52))))
(assert (not (= (+ 5 x969) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (not (= 72057594037927936 (+ 7 x969))))
(assert (not (= (x701 x990 52) 72057594037927936)))
(assert (= (=> (and (not x152) (= x152 (= 0 x584)) (= (x153 (+ x65 32)) x1033) (= (x375 x65) x178) (>= 1099511627775 x296) (not x545) (= (x153 (+ x998 x844)) x872) (= (x375 x896) x761) (= (= x131 x14) x352) (> 1099511627776 x131) (= (or (and (< x732 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x732))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x732)) x545) (= (x1045 x1086) x131) (= (x153 (+ x998 32)) x896) (= x296 (x375 x1033)) (= x1064 (x153 (+ 31 x732))) (= (x153 (+ x896 32)) x65) (= (x807 1099511627775 x736) x14) (= (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1064) x844) (<= x131 1099511627775) (= x915 (x375 x998)) (<= 0 x131)) (and (=> (and (and (= x195 (= 0 x898)) (or (and (not x195) (and (= (div x46 31536000) x1066) (= (> x430 340282366920938463463374607431768211455) x956) (= 1000000000000000000000000000 x455) (= (mod (* x930 x1007) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x687) (= x536 (> x1007 x96)) (= (= x930 0) x107) (= x897 (ite x219 1 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x930) x96) (= (x807 340282366920938463463374607431768211455 x430) x113) (= x46 (* x845 x898)) (= x975 (not x536)) (= x845 (x473 (- x736 x843))) (not x956) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1066 1000000000000000000000000000)) (< (* x898 x845) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x455 x723) x1007) (= x723 x1066) (= x414 (< x1025 x843)) (> x897 0) (not x414) (= (or x975 x107) x219) (= x430 (div x575 1000000000000000000000000000)) (= x430 x199) (= x575 (x153 (+ x687 500000000000000000000000000))))) (and (= x199 x930) x195))) (not x352)) x919) (=> (and x352 (and (= x930 x556) (= x151 x872) (= x438 x666))) x714))) x754))
(assert (x161 x445))
(assert (not x372))
(assert (x161 x552))
(assert (=> (>= 10000 x836) (not (= x836 (x701 x990 52)))))
(assert (x161 x181))
(assert (not (= 2054196882 (+ x969 7))))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 9 x339))))
(assert (=> (<= x871 10000) (not (= (+ 8 x969) x871))))
(assert (=> (<= x990 10000) (not (= (+ 3 x969) x990))))
(assert (x161 x1030))
(assert (= (and x265 (not x130)) x861))
(assert (not (= (+ 5 x969) (x701 x546 54))))
(assert (not (= (+ x969 3) (+ 1 x969))))
(assert (not (= (+ x969 3) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x161 x657))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ x969 4))))
(assert (x161 x405))
(assert (not (= 340282366920938463463374607431768211456 (x701 x990 52))))
(assert (not (= 18446744073709551615 (+ x969 5))))
(assert (not (= (x701 x452 x467) 65535)))
(assert (not (= 1099511627775 (+ x339 9))))
(assert (not (= (x701 x28 52) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= (x701 x990 52) 71776119061217280)))
(assert (not (= 1635491895 (x701 x546 54))))
(assert (=> (>= 10000 x990) (not (= x990 (x701 x546 54)))))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ 5 x969))))
(assert (x161 x1067))
(assert (= (and x48 x752) x970))
(assert (x161 x472))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (+ x969 6))))
(assert (not (= (x701 x730 53) 31536000)))
(assert (= (or x634 x112) x247))
(assert (x161 x466))
(assert (x161 x443))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x701 x990 52))))
(assert (= (and x147 x436) x911))
(assert (not (= 340282366920938463463374607431768211455 (x701 x990 52))))
(assert (not (= 2054196882 (x701 x452 x467))))
(assert (not (= (+ x969 1) (x701 x546 54))))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ x969 6))))
(assert (not (= 500000000000000000000000000 (+ 3 x969))))
(assert (not (= (+ 4 x969) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x161 x54))
(assert (x161 x498))
(assert (not (= (+ x969 1) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (not (= (+ 4 x969) (x701 x730 53))))
(assert (= (or x29 x179 x166) x489))
(assert (not (= (+ x969 8) 54)))
(assert (x161 x665))
(assert (x105 1))
(assert (x161 x478))
(assert (not (= (+ x969 1) 340282366920938463463374607431768211455)))
(assert (x161 x968))
(assert (= (=> (and (or (not x1057) x1057) (= x1057 (= x817 0))) x578) x646))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ x969 8))))
(assert (x161 x80))
(assert (not (= (+ 9 x339) 288230376151711744)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x701 x730 53))))
(assert (= (=> (and (= (x417 x359) x177) (= x549 (not (= 0 x80))) (= (x153 (+ 32 x359)) x188) (= 1 x258) (= x37 32)) x603) x431))
(assert (x105 x1000))
(assert (x161 x527))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x701 x546 54))))
(assert (x161 x733))
(assert (x212 x139 x657))
(assert (not (= (x701 x730 53) 500000000000000000000000000)))
(assert (x212 x914 x76))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x701 x730 53))))
(assert (x161 x870))
(assert (x161 x342))
(assert (not (= (+ x969 4) 1461501637330902918203684832716283019655932542975)))
(assert (x161 x650))
(assert (x161 x1082))
(assert (= x64 (and x381 x272)))
(assert (not (= 52 (+ x969 1))))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ 7 x969))))
(assert (not (= (x701 x452 x467) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x327 x28))
(assert (not (= (+ x969 3) (+ x969 4))))
(assert (x161 x96))
(assert (not (= (+ x969 1) 509899769)))
(assert (not (= (+ 9 x339) (+ 4 x969))))
(assert (not (= (+ x339 9) 1152921504606846976)))
(assert (x161 x872))
(assert (x327 x806))
(assert (x161 x450))
(assert (not (= (x701 x546 54) (+ 9 x339))))
(assert (not (= (x701 x546 54) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (+ x969 3))))
(assert (not (= 18446744073709551615 (+ x969 7))))
(assert (x161 x544))
(assert (not (= (x701 x452 x467) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (not (= (+ 1 x969) 1383405463)))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ x969 3))))
(assert (x161 x809))
(assert (x161 x433))
(assert (x161 x413))
(assert (x105 1099511627775))
(assert (not (= (+ 5 x969) 31536000)))
(assert (not (= 288230376151711744 (x701 x452 x467))))
(assert (not (= (x701 x546 54) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (=> (<= x441 10000) (not (= x441 (x701 x546 54)))))
(assert (x105 x273))
(assert (x161 x979))
(assert (not (= 288230376151711744 (+ x969 3))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (x701 x546 54))))
(assert (not (= (+ x969 5) 1461501637330902918203684832716283019655932542976)))
(assert (not (= (+ 1 x969) 340282366920938463463374607431768211456)))
(assert (x161 x304))
(assert (not (= (+ 6 x969) 1208907372870555465154560)))
(assert (not (= (x701 x730 53) 509899769)))
(assert (not (= (+ 6 x969) 54)))
(assert (=> (>= 10000 x805) (not (= x805 (x701 x452 x467)))))
(assert (not (= 72057594037927936 (+ x969 5))))
(assert (not (= (x701 x546 54) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (+ 6 x969) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (+ 2 x969))))
(assert (not (= 1089035750 (x701 x730 53))))
(assert (x161 x585))
(assert (x493 x779))
(assert (not (= 340282366920938463463374607431768211456 (+ 2 x969))))
(assert (not (= (+ x969 8) (+ 6 x969))))
(assert (x503 x712 x779))
(assert (not (= (x701 x990 52) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ x969 5))))
(assert (x105 x601))
(assert (x327 x969))
(assert (=> (>= 10000 x871) (not (= x871 (+ x969 1)))))
(assert (not (= (+ x969 3) 1000000000000000000000000000)))
(assert (x161 x901))
(assert (x161 x439))
(assert (x161 x691))
(assert (x161 x916))
(assert (x161 x711))
(assert (not (= (x701 x546 54) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x161 x321))
(assert (x161 x732))
(assert (not (= (+ x969 1) 1099511627775)))
(assert (= (=> (and (= (+ x297 x997) x550) (= (x153 (+ 32 x66)) x479) (= (x153 (+ x837 x581)) x20) (= (x153 (+ 32 x955)) x66) (= (x153 (+ 32 x479)) x395) (not x528) (not x760) (= x775 (x473 (- x550 x365))) (= (x807 340282366920938463463374607431768211455 x445) x85) (= x626 (x153 (+ 31 x507))) (= x475 x297) (not x600) (= x955 (x153 (+ x20 32))) (= (x153 (+ x798 32)) x690) (= (x463 x581) x169) (= x600 (< 340282366920938463463374607431768211455 x402)) (not x497) (not x223) (= (> x445 340282366920938463463374607431768211455) x760) (= x936 (< 340282366920938463463374607431768211455 x169)) (= (or (> x507 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x507 96) (= true (<= x507 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x223) (= (> x365 x550) x497) (not x936) (= (= x205 0) x528) (< (+ x475 x470) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x997 x470) (= (= 0 x775) x298) (= (x463 x798) x402) (= x837 (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x626)) (= x69 (x807 340282366920938463463374607431768211455 x169)) (= (x807 340282366920938463463374607431768211455 x402) x386) (= (x153 (+ x581 32)) x798) (= x445 (x463 x690))) (and (=> (and (not x298) (= x20 x648)) x306) (=> (and (and (= x138 (x826 x1086)) (>= 65535 x138) (= x718 (x153 (+ x20 64))) (= x685 (x153 (+ 32 x20))) (= (< x138 128) x331) (< x138 65536) (>= x138 0) (= x665 0)) x298) (and (=> (and (and (= x76 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x856 1 x892))) (<= 0 x914) (= x612 (x807 x914 x76)) (<= x914 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x648 x718) (= x914 (x184 x833)) (= x892 (x856 x138 1))) x331) x306) (=> (not x331) x55))))) x278))
(assert (not (= (x701 x730 53) (+ 8 x969))))
(assert (x161 x785))
(assert (not (= (x701 x546 54) 71776119061217280)))
(assert (not (= (x701 x990 52) 1635491895)))
(assert (x161 x966))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x701 x28 52))))
(assert (=> (<= x441 10000) (not (= (+ x969 7) x441))))
(assert (= x770 (or x394 x15)))
(assert (not (= 1152921504606846976 (+ 8 x969))))
(assert (x161 x231))
(assert (x161 x311))
(assert (not (= (x701 x730 53) 144115188075855872)))
(assert (not (= (x701 x990 52) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x281 x444))
(assert (=> (>= 10000 x42) (not (= (x701 x730 53) x42))))
(assert (= x372 (=> (and (or (and x664 (and (< x318 4294967296) (= x961 1))) (and (= x961 x277) (not x664))) (and (>= 1461501637330902918203684832716283019655932542975 x535) (= x664 (< 0 x277)) (and (= true (<= x585 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 131 x585)) (= x700 x946) (>= x1009 0) (= x950 (> (x1065 x357) 0)) (= x16 x833) (= (> (x1065 x54) 0) x720) (> x805 0) (> x357 0) (= x688 (> (x1065 x805) 0)) (<= x647 1461501637330902918203684832716283019655932542975) (= (x473 (- x602 100)) x1082) (< x595 340282366920938463463374607431768211456) (not (= x310 x357)) (not (= x466 x333)) (not (< x785 946116605)) (= x601 (x874 x969)) (not (= x333 x812)) (< x441 1461501637330902918203684832716283019655932542976) (not (= x806 x836)) (<= x486 1461501637330902918203684832716283019655932542975) (>= 255 x449) (<= x601 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x357 x812)) (= x111 (x807 1208907372870555465154560 x601)) x400 (= x534 (x215 x806)) (not (= x54 x466)) (= x736 x1025) (<= 0 x684) (not (= x54 x333)) (not (= x54 x647)) (<= 0 x534) (<= 0 x831) (not (= x310 x812)) (>= x158 0) (= (ite x679 1 0) x855) (>= 1461501637330902918203684832716283019655932542975 x466) (not (= x647 x357)) (= x638 x730) (not (= x836 x868)) (= x726 x426) (not (= x466 x357)) (not (= x310 x647)) (= (x215 x466) x504) (not (= x310 x805)) (>= x122 0) (= x225 (+ x228 2)) (not (= x42 x805)) (<= x784 1461501637330902918203684832716283019655932542975) (= x785 1463475841) (> x836 0) (> x466 0) (not (= x357 x54)) (<= 0 x102) (<= 0 x985) (not (= x812 x871)) (>= 340282366920938463463374607431768211455 x630) (not (= x868 x42)) (> 1461501637330902918203684832716283019655932542976 x301) (not (= x466 x806)) (= 260 x602) (= 0 x886) (not (= x54 x42)) (= x189 (not (= 0 x832))) (not (= x310 x868)) (>= x666 0) (<= x863 1461501637330902918203684832716283019655932542975) (= (x701 x28 52) x969) (not (= x889 509899769)) (< 0 x433) (<= x1048 255) (= x301 (x1061 x788)) (<= 0 x200) (<= x898 340282366920938463463374607431768211455) (>= 255 x398) (<= x122 1099511627775) (> x812 0) (> 340282366920938463463374607431768211456 x898) (not (= x805 x812)) (>= x601 0) (not (= x310 x871)) (= x755 x7) (= x574 (x473 (- x585 4))) (= (x1049 x228) x666) (not (= x806 x42)) (>= x232 0) (not (= x871 x806)) (not (> 4 x602)) (not (= x806 x54)) (= x583 288) (>= x504 0) (>= 1461501637330902918203684832716283019655932542975 x868) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x574) (and (< x574 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x574))))) (not (= x466 x805)) x124 (= 260 x602) (not (= x54 x805)) (< 0 x806) (<= x310 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1020) (>= x1020 0) (not (= x357 x42)) (= x762 x649) (< x684 1461501637330902918203684832716283019655932542976) (= x755 x857) (not (= x333 x806)) (>= x398 0) (>= 1461501637330902918203684832716283019655932542975 x596) (> 3 x726) x720 (not (= x310 x806)) (not (= x333 x310)) (= x875 false) (not (= x310 x42)) (not (< 2 x755)) (<= x42 1461501637330902918203684832716283019655932542975) (= x595 (x974 x228)) (= x74 x1013) (not (= x836 x310)) (not (= x868 x812)) (= x730 x233) (not (= x647 x836)) (>= 18446744073709551615 x303) (<= x769 65535) x653 (<= 0 x863) (= (+ 1 x969) x109) (not (= x806 x647)) (not (= x42 x333)) (= x833 x424) (>= 1461501637330902918203684832716283019655932542975 x730) (>= 255 x102) x950 (< x666 340282366920938463463374607431768211456) (<= x985 1461501637330902918203684832716283019655932542975) (>= x579 0) (< x843 1099511627776) (<= 0 x449) (>= x328 0) (= (x215 x812) x831) (not (= x466 x42)) (= x319 29360345738620397371765038775553738755387432804059789257388031015462633472000) (not (= x647 x871)) (not x140) (not (= x806 x812)) (not (= x466 x647)) (= x728 (< 0 (x1065 x812))) (<= 0 x596) (= x1062 x28) (> 1635491895 x785) (= (x692 x109) x898) (= (x145 256) x832) (<= 0 x261) (>= x820 0) (not (= x647 x333)) (= x937 (> (x1065 x647) 0)) (= x726 x7) (<= x74 1461501637330902918203684832716283019655932542975) (= (x1065 x805) x894) (>= 1461501637330902918203684832716283019655932542975 x805) (= x700 x185) (= x158 (x215 x357)) (= x653 (< 0 (x1065 x466))) (= x328 (x215 x868)) (= x625 (< 0 (x1065 x310))) (not (= 1142400387 x785)) (= (+ x228 1) x1086) (not (= x466 x871)) (>= 255 x820) (<= x979 255) (>= x739 0) (>= 1461501637330902918203684832716283019655932542975 x301) (= x985 x320) (= x276 x946) (= x867 x755) (not (= x805 x871)) x562 (<= x739 1461501637330902918203684832716283019655932542975) (not (< x585 4)) (not (= x647 x812)) (< 0 x871) (not (= x357 x805)) (= x730 x393) (>= 1099511627775 x843) (>= x535 0) (= (x215 x310) x143) (= x140 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1082) (and (< x1082 160) (= true (<= x1082 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (<= x684 1461501637330902918203684832716283019655932542975) x399 (<= 0 x979) (<= x595 340282366920938463463374607431768211455) (>= 1461501637330902918203684832716283019655932542975 x806) (not (= x871 x357)) (not x207) (not (= 1383405463 x785)) x625 (= x129 (x215 x54)) (not (= x836 x357)) (not (= x310 x54)) (= 52 x642) (not (= x333 x871)) (>= x129 0) (= (x1045 x1086) x843) (= x679 (not x631)) (not (= x812 x54)) (= x80 x649) (= (> (x1065 x871) 0) x124) (>= x26 0) (= x889 1089035750) (not (= x466 x868)) (>= 340282366920938463463374607431768211455 x930) (not (= x42 x812)) (= 1632 x800) (= x28 x880) (not (= x868 x647)) x688 (not (= x836 x54)) (> x310 0) (= x886 x553) (not (= x836 x42)) (= (or (> x641 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x641 256) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x641)))) x750) (= (+ 1 x788) x474) (not (= x805 x333)) (not (= x871 x836)) (not (= x806 x357)) (>= x804 0) (not (= x871 x868)) (= x866 false) (<= x357 1461501637330902918203684832716283019655932542975) (= x641 (x473 (- x602 4))) (= x1085 4) x937 (> x333 0) (<= x666 340282366920938463463374607431768211455) (= x649 x855) (not (= x871 x54)) (not (= x805 x836)) (>= x753 0) (<= 0 x143) (>= 1461501637330902918203684832716283019655932542975 x200) (>= x813 0) (= 1463475841 x884) (= x410 x730) (> 3 x755) (<= 0 x353) (<= x261 340282366920938463463374607431768211455) (not (= x333 x868)) (<= x836 1461501637330902918203684832716283019655932542975) (not (= x868 x357)) (>= x843 0) (<= x428 1461501637330902918203684832716283019655932542975) (= x441 (x92 x474)) (= 54 x174) (>= x630 0) (= (> (x1065 x868) 0) x400) (= x825 x709) (not x750) (= x684 (x865 x225)) (not (= x333 x357)) (<= 0 x769) (<= x333 1461501637330902918203684832716283019655932542975) (not (= x466 x310)) (= x28 x544) (= (x701 x730 53) x16) (<= x1009 1461501637330902918203684832716283019655932542975) x728 (<= 0 x301) (= (x215 x333) x26) (< 0 x42) (not (= 1118877564 x785)) (= x788 (+ 1 x225)) (not (= x868 x806)) (> x54 0) (= x966 (x75 x111 64)) (= x232 (x215 x647)) (not (= x868 x805)) (= false x465) (< 0 x868) (= x1078 x28) (>= x303 0) (<= 0 x290) (> 340282366920938463463374607431768211456 x930) (>= x486 0) (not (= x647 x42)) (= x28 x41) (= (= 0 x805) x207) (= x744 960) (not (= x466 x812)) (= x228 (+ 1 x109)) (not (= x647 x805)) (not (= x868 x54)) (= x34 x700) (> 2054196882 x785) (<= x812 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x54) (= x353 (x215 x836)) (= x804 (x215 x42)) (<= 0 x597) (>= x1048 0) x492 (= x579 (x215 x871)) (= (x215 x805) x813) (<= x28 1461501637330902918203684832716283019655932542975) (<= 0 x441) (<= x290 1461501637330902918203684832716283019655932542975) (= (> (x1065 x333) 0) x492) (= x535 x709) (not (= x466 x836)) (= x930 (x128 x109)) (not (= x871 x42)) (not (= 946116605 x785)) (= x1013 x290) (not (= x836 x333)) (not (= x812 x836)) (>= 255 x753) (= (> (x1065 x42) 0) x399) (= x276 x848) (<= x871 1461501637330902918203684832716283019655932542975) (>= x784 0) (= x321 x730) (= x715 (< 0 (x1065 x806))) (not (= x805 x806)) (>= x74 0) (= (ite x189 1 0) x762) (>= x595 0) (= x631 (= x649 0)) (<= 0 x930) (>= 1461501637330902918203684832716283019655932542975 x441) (>= x428 0) (> x894 0) x715 (>= 340282366920938463463374607431768211455 x597) (= x562 (< 0 (x1065 x836))) (= false x746) (> x647 0) (<= 0 x898) (= x433 (x1065 x805)))) x967)))
(assert (not (= 340282366920938463463374607431768211455 (+ x969 3))))
(assert (x161 x377))
(assert (not (= 1099511627776 (x701 x546 54))))
(assert (not (= (+ x969 2) 65535)))
(assert (x161 x319))
(assert (x161 x867))
(assert (x161 x120))
(assert (x161 x900))
(assert (not (= (+ 3 x969) 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (not (= 1635491895 (+ 1 x969))))
(assert (not (= (x701 x28 52) 1383405463)))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (x701 x452 x467))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ 6 x969))))
(assert (=> (>= 10000 x868) (not (= (+ 6 x969) x868))))
(assert (x161 x1053))
(assert (not (= (x701 x730 53) 71776119061217280)))
(assert (not (= 509899769 (+ x969 8))))
(assert (=> (<= x730 10000) (not (= (x701 x546 54) x730))))
(assert (not (= (+ 4 x969) 4294967296)))
(assert (= (and x195 x881) x707))
(assert (x161 x986))
(assert (= x822 (=> (and (or (and x811 (and (= (> x426 2) x347) (= x308 (= 2 x426)) (not x347))) (and (= x308 x811) (not x811))) (= (not (= 0 x470)) x811)) x355)))
(assert (x161 x116))
(assert (not (= 1152921504606846976 (+ x969 5))))
(assert (x161 x744))
(assert (not (= 31536000 (x701 x28 52))))
(assert (not (= 144115188075855872 (+ x969 7))))
(assert (= x157 (and (not x163) x783)))
(assert (not (= (+ x969 6) 53)))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (x701 x730 53))))
(assert (not (= (+ 2 x969) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (or x249 x841) x1001))
(assert (x161 x813))
(assert (not (= (x701 x452 x467) (+ x969 7))))
(assert (=> (<= x684 10000) (not (= (+ 2 x969) x684))))
(assert (= (=> (and (= x1026 (x807 72057594037927936 x601)) (= x256 (not (= 0 x531))) (= (not (= x512 0)) x1081) (= 1632 x25) (= (not (= 0 x1026)) x677) (= x512 (x807 1152921504606846976 x601)) (= (x807 144115188075855872 x601) x877) (= (not (= 0 x554)) x1008) (= x921 (x153 (+ 64 x336))) (= (x153 (+ x336 32)) x780) (= (x807 288230376151711744 x601) x554) (= (x807 576460752303423488 x601) x531) (= x758 (not (= x877 0)))) (and (=> (and x677 (and (= x576 (x153 (+ x921 32))) (= (x153 (+ 64 x921)) x451))) (and (=> x1081 x55) (=> (and (not x1081) (= (not (= x475 0)) x448)) (and (=> (and x448 (and (= x957 (> x426 2)) (= x683 (= x726 1)) (not x957))) (and (=> (not x683) x822) (=> (and (and (= (x153 (+ x451 64)) x809) (= (x153 (+ x451 32)) x743) (= x809 x1068)) x683) x772))) (=> (not x448) x822))))) (=> (not x677) x55))) x591))
(assert (=> (>= 10000 x452) (not (= (+ x969 7) x452))))
(assert (x161 x41))
(assert (= x119 (=> (and (= (not (< 1 x918)) x316) (= (x807 1 x444) x1035) (= x292 (= 0 x1035)) (= x918 (x75 x444 1))) (and (=> (and (= (ite x292 1 10) x203) (= 100 x483)) x526) x316))))
(assert (= (or x933 x407) x84))
(assert (not (= 288230376151711744 (+ x969 7))))
(assert (=> (<= x647 10000) (not (= (x701 x28 52) x647))))
(assert (not (= (x701 x28 52) 1461501637330902918203684832716283019655932542976)))
(assert (not (= (+ x969 8) 71776119061217280)))
(assert (not (= (+ x339 9) (x701 x452 x467))))
(assert (x161 x245))
(assert (= x821 (and x819 (not x126))))
(assert (not (= 340282366920938463463374607431768211455 (x701 x730 53))))
(assert (not (= (x701 x28 52) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (=> (>= 10000 x466) (not (= x466 (+ 5 x969)))))
(assert (=> (>= 10000 x42) (not (= x42 (x701 x452 x467)))))
(assert (not (= (x701 x990 52) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (=> (>= 10000 x441) (not (= x441 (+ x969 6)))))
(assert (not (= (+ 7 x969) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x441 10000) (not (= (+ 3 x969) x441))))
(assert (=> (<= x28 10000) (not (= (+ 3 x969) x28))))
(assert (= true x508))
(assert (not (= (x701 x546 54) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (x161 x616))
(assert (= (or x168 x958) x765))
(assert (=> (<= x812 10000) (not (= x812 (+ 2 x969)))))
(assert (not (= (+ x969 5) (+ 9 x339))))
(assert (x161 x216))
(assert (not (= (x701 x990 52) 1461501637330902918203684832716283019655932542976)))
(assert (not (= (+ 3 x969) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= 65536 (x701 x546 54))))
(assert (not (= (+ x969 4) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (<= x54 10000) (not (= (+ 7 x969) x54))))
(assert (=> (<= x441 10000) (not (= (+ x969 2) x441))))
(assert (not (= (x701 x730 53) (x701 x990 52))))
(assert (x161 x853))
(assert (not (= (x701 x546 54) 1000000000000000000000000000)))
(assert (=> (>= 10000 x310) (not (= x310 (+ 8 x969)))))
(assert (x161 x409))
(assert (not (= (x701 x546 54) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (= (=> (= (= 0 x764) x32) (and (=> (and (not x32) (and (and (= (x473 (- x736 x843)) x951) (not x86) (= (< x1025 x843) x86) (= x490 (= 0 x951))) (or (and x490 (= x587 1000000000000000000000000000)) (and (and (< (+ x740 x93) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x532 (mod (* x767 x951) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x716 1000000000000000000000000000) (= x656 (ite (not x582) 1 0)) (= (+ x422 x190) x929) (= (x473 (- x951 1)) x767) (= (* x996 x532) x406) (< (+ x924 x450) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (= x595 0) x869) (= x506 x312) (= x251 (mod (* x595 x595) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x271 (ite x632 1 0)) (= x740 (+ x742 x716)) (= x335 (x153 (+ x711 500000000000000000000000000))) (< 0 x693) (> x271 0) (= x93 (div x984 2)) (= x587 x929) (= (div x263 31536000) x964) (= (ite (< 2 x951) (x473 (- x951 2)) 0) x996) (= x263 (div x335 1000000000000000000000000000)) (= (* x951 x595) x561) (= (= 0 x951) x582) (= (x153 (+ 500000000000000000000000000 x251)) x1004) (= x45 (= 0 x595)) (= x406 x283) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x951) x413) (= x450 x190) (= x742 x376) (= x633 (x807 x656 x565)) (= x938 (not x773)) (= (> x595 x383) x773) (= x450 (+ x401 x447)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x767 x951)) (= x633 0) (= x799 (not x725)) (= x778 (div x906 994519296000000)) (< (+ x376 1000000000000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x924 (div x644 6)) (= (mod (* x595 x778) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x711) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x595 x951)) (= x906 (div x1004 1000000000000000000000000000)) (= (ite (< x413 x767) 1 0) x565) (= x93 x401) (= (or x869 x938) x115) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x595) x383) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x532 x996)) (= x693 (ite x115 1 0)) (< (* x964 x283) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x725 (> x778 x830)) (= x644 (* x964 x283)) (= x740 x447) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x595) x830) (= x632 (or x799 x45)) (= x984 (* x778 x312)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x778 x312)) (= x506 (* x951 x767)) (= x422 x924) (= x376 (div x561 31536000))) (not x490))))) x559) (=> (and x32 (= x666 x748)) x27))) x919))
(assert (not (= (+ x969 1) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (=> (>= 10000 x868) (not (= (+ x969 1) x868))))
(assert (not (= (x701 x546 54) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (not (= (+ x969 6) 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (not (= 53 (+ 2 x969))))
(assert (not (= (+ x969 4) 340282366920938463463374607431768211455)))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x701 x990 52))))
(assert (not (= 1099511627776 (+ x969 8))))
(assert (not (= 53 (+ x339 9))))
(assert (not (= (+ 3 x969) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (x161 x421))
(assert (= x839 (=> (and (or x618 (not x618)) (= (= x636 0) x618)) x686)))
(assert (x404 x626))
(assert (x161 x931))
(assert (not (= 500000000000000000000000000 (+ x969 7))))
(assert (= x366 (and (not x988) x551)))
(assert (=> (<= x42 10000) (not (= (x701 x28 52) x42))))
(assert (=> (<= x333 10000) (not (= x333 (+ x969 3)))))
(assert (x327 x546))
(assert (not (= (+ x339 9) 946116605)))
(assert (= (and x72 x374) x669))
(assert (not (= (+ x969 6) (+ 3 x969))))
(assert (=> (<= x467 10000) (not (= (+ x969 1) x467))))
(assert (=> (>= 10000 x42) (not (= (+ 6 x969) x42))))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ 8 x969))))
(assert (not (= (x701 x546 54) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (=> (>= 10000 x310) (not (= (+ 6 x969) x310))))
(assert (x161 x1044))
(assert (not (= 509899769 (+ x969 7))))
(assert (x105 x139))
(assert (=> (<= x28 10000) (not (= x28 (+ 5 x969)))))
(assert (not (= 65536 (+ 4 x969))))
(assert (=> (<= x333 10000) (not (= x333 (x701 x28 52)))))
(assert (x161 x65))
(assert (= (and (not x201) x828) x72))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ 1 x969))))
(assert (not (= (+ 9 x339) (+ 6 x969))))
(assert (not (= (x701 x28 52) (+ x969 7))))
(assert (not (= (+ x969 3) (x701 x730 53))))
(assert (= (=> (and (or (and (and (< x507 4294967296) (= x205 1)) x126) (and (not x126) (= x205 x82))) (and (= x446 (x153 (+ 32 x523))) (= x1003 (x153 (+ 32 x908))) (= x527 (x153 (+ x524 32))) (= (x153 (+ x141 32)) x523) (= x672 (x153 (+ x581 4))) (= (x153 (+ 32 x672)) x141) (= (x153 (+ 32 x527)) x409) (= x908 (x153 (+ 32 x446))) (= x524 (x153 (+ 32 x1003))) (= (> x82 0) x126))) x278) x1055))
(assert (x161 x348))
(assert (not (= (+ 5 x969) (+ x969 8))))
(assert (x161 x889))
(assert (=> (>= 10000 x54) (not (= (+ 9 x339) x54))))
(assert (=> (>= 10000 x54) (not (= (+ 4 x969) x54))))
(assert (x212 x694 x313))
(assert (not (= (+ x969 1) 29360345738620397371765038775553738755387432804059789257388031015462633472000)))
(assert (not (= (+ x969 5) 65535)))
(assert (x161 x475))
(assert (x161 x131))
(assert (not (= 994519296000000 (+ x969 7))))
(assert (not (= (x701 x452 x467) 946116605)))
(assert (x161 x44))
(assert (x161 x396))
(assert (not (= 31536000 (+ x969 1))))
(assert (not (= (x701 x452 x467) 994519296000000)))
(assert (not (= 1142400387 (+ 7 x969))))
(assert (= x381 (or x878 x1054)))
(assert (not (= (x701 x452 x467) (+ x969 6))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ x969 6))))
(assert (x161 x751))
(assert (=> (<= x806 10000) (not (= x806 (+ x969 7)))))
(assert (x161 x425))
(assert (=> (>= 10000 x54) (not (= x54 (x701 x990 52)))))
(assert (= (div x111 18446744073709551616) (x75 x111 64)))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (+ 1 x969))))
(assert (=> (>= 10000 x836) (not (= (x701 x730 53) x836))))
(assert (x105 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x161 x1085))
(assert (x161 x571))
(assert (not (= (+ 8 x969) 1635491895)))
(assert (x161 x365))
(assert (not (= (+ x969 3) (+ x339 9))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (+ 5 x969))))
(assert (= x166 (and x978 x682)))
(assert (x161 x8))
(assert (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 (+ 9 x339))))
(assert (x161 x301))
(assert (x161 x709))
(assert (not (= 1000000000000000000000000000 (x701 x28 52))))
(assert (=> (<= x54 10000) (not (= (+ 1 x969) x54))))
(assert (not (= (+ x339 9) 2054196882)))
(assert (x161 x953))
(assert (= (and x783 x163) x735))
(assert (not (= (+ x969 6) (+ 5 x969))))
(assert (=> (<= x54 10000) (not (= (+ 8 x969) x54))))
(assert (not (= 288230376151711744 (x701 x990 52))))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (x701 x28 52))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ x969 1))))
(assert (=> (>= 10000 x990) (not (= (+ x969 5) x990))))
(assert (x161 x1040))
(assert (=> (>= 10000 x730) (not (= x730 (x701 x28 52)))))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ x969 4))))
(assert (not (= (x701 x990 52) (+ 2 x969))))
(assert (x161 x513))
(assert (not (= (x701 x546 54) 1208907372870555465154560)))
(assert (not (= (+ x969 8) 1463475841)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x701 x452 x467))))
(assert (not (= (x701 x28 52) 340282366920938463463374607431768211455)))
(assert (not (= 54 (x701 x546 54))))
(assert (x161 x150))
(assert (=> (>= 10000 x730) (not (= x730 (x701 x730 53)))))
(assert (not (= 65535 (x701 x546 54))))
(assert (not (= (+ 9 x339) (+ 8 x969))))
(assert (not (= (+ 4 x969) 72057594037927936)))
(assert (not (= (+ x969 8) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (>= 10000 x684) (not (= x684 (+ 8 x969)))))
(assert (x161 x66))
(assert (= 0 (x1077 x896)))
(assert (x105 x430))
(assert (not (= (x701 x452 x467) 31536000)))
(assert (not (= (+ x969 3) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (+ 5 x969) 53)))
(assert (x161 x79))
(assert (not (= (x701 x28 52) 65535)))
(assert (not (= (+ x969 6) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (= (or x217 x821) x1059))
(assert (not (= (x701 x730 53) (x701 x28 52))))
(assert (not (= (x701 x452 x467) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= (+ x969 6) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= (x701 x990 52) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= 1383405463 (+ x969 5))))
(assert (x161 x444))
(assert (not (= (+ 2 x969) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x105 72057594037927936))
(assert (x161 x830))
(assert (x161 x102))
(assert (not (= (x701 x730 53) (+ x969 6))))
(assert (= x1018 (and x1072 (not x490))))
(assert (x161 x31))
(assert (not (= (+ x969 7) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (not (= (+ x969 7) 52)))
(assert (not (= 53 (+ 3 x969))))
(assert (x161 x581))
(assert (= x1047 (=> (and (or x721 (and (and (= (x807 340282366920938463463374607431768211455 x1051) x916) (= x1070 (not x1083)) (= (x807 340282366920938463463374607431768211455 x443) x476) (<= x181 340282366920938463463374607431768211455) (= x285 (x153 (+ x439 x838))) (<= 0 x181) (= x439 (div x199 2)) (= x916 x142) (= (div x199 2) x514) (= x838 (mod (* 1000000000000000000000000000 x786) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x443 340282366920938463463374607431768211455) (= x346 (div x993 1000000000000000000000000000)) (= x525 x181) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x916 x181)) (= (+ x142 x525) x443) (= x1051 (div x285 x199)) (= (not x1070) x796) (= (< x346 x786) x1083) (= x364 (ite x1073 1 0)) (not x349) (= (x473 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x514)) x993) (= x349 (< 340282366920938463463374607431768211455 x1051)) (= x1079 (+ 2 x474)) (= (= x199 0) x614) (= 0 x364) (> 340282366920938463463374607431768211456 x181) (= (or x614 x796) x1073) (= x181 (x302 x1079))) (not x721))) (and (= (ite x999 1 0) x361) (= (mod (* x966 x274) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x282) (= x658 (= x966 0)) (= (< x326 x695) x793) (< 0 x361) (= x999 (or x484 x57)) (> x425 0) (< (+ x761 x472) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (mod (* x915 x348) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x616) (not x793) (= x786 (div x645 10000)) (= x922 (div 115792089237316195423570985008687907853269984665640564039457584007913129634935 x966)) (= x77 (x473 (- x326 x695))) (= x326 (+ x222 x123)) (= x418 (> x915 x377)) (= x222 x472) (= (not x418) x57) (= (< x922 x274) x183) (= x123 x761) (= x377 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x348)) (not x675) (= (x153 (+ x616 500000000000000000000000000)) x840) (= x721 (= 0 x786)) (= (x473 (- x77 x44)) x274) (= x44 (div x840 1000000000000000000000000000)) (= (ite x674 1 0) x425) (= x484 (= x348 0)) (= x645 (x153 (+ 5000 x282))) (= x674 (or x253 x658)) (= x675 (< x77 x44)) (= (not x183) x253))) x293)))
(assert (x161 x894))
(assert (x161 x200))
(assert (=> (>= 10000 x805) (not (= x805 (+ x969 3)))))
(assert (not (= (+ 3 x969) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (x161 x630))
(assert (not (= (+ x969 8) (+ x969 7))))
(assert (x161 x597))
(assert (=> (<= x546 10000) (not (= x546 (+ x969 8)))))
(assert (not (= (x701 x730 53) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (x161 x736))
(assert (not (= (+ x969 4) (+ 7 x969))))
(assert (= (or x98 x2) x457))
(assert (x161 x806))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (+ 8 x969))))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ 6 x969))))
(assert (not (= 18446744073709551615 (x701 x28 52))))
(assert (not (= (+ 2 x969) 23168665560438953713825780127241890498045796339729991397848622117550123122688)))
(assert (= (=> (= x900 x727) x655) x944))
(assert (not (= (+ x969 2) 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (not (= (+ 3 x969) 65536)))
(assert (= x567 (and (not x1081) x156)))
(assert (not (= (+ x969 4) (x701 x28 52))))
(assert (not (= (+ 5 x969) 71776119061217280)))
(assert (x367 x443))
(assert (not (= (+ x969 3) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (not (= (+ 6 x969) 4294967296)))
(assert (x161 x129))
(assert (=> (>= 10000 x684) (not (= (+ 7 x969) x684))))
(assert (x161 x313))
(assert (= x394 (and x317 x1037)))
(assert (not (= (+ x339 9) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x701 x730 53))))
(assert (x327 x357))
(assert (x161 x255))
(assert (x161 x863))
(assert (= (or x114 x970) x265))
(assert (not (= 946116605 (+ 5 x969))))
(assert (x161 x320))
(assert (x161 x930))
(assert (= (and x155 x434) x676))
(assert (x161 x1056))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ x969 4))))
(assert (not (= (+ x969 3) (x701 x990 52))))
(assert (x105 x169))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (x701 x546 54))))
(assert (x161 x885))
(assert (=> (>= 10000 x812) (not (= (+ 3 x969) x812))))
(assert (=> (>= 10000 x441) (not (= (+ x969 8) x441))))
(assert (not (= (+ x339 9) 23168665560438953713825780127241890498045796339729991397848622117550123122688)))
(assert (=> (<= x466 10000) (not (= (+ x969 7) x466))))
(assert (x161 x76))
(assert (x161 x764))
(assert (x161 x276))
(assert (x432 x601))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ x969 1))))
(assert (x367 x402))
(assert (=> (<= x812 10000) (not (= (+ 4 x969) x812))))
(assert (not (= (x701 x730 53) 22716352711855687325452455967051703357993960462129832944569490930019212460032)))
(assert (x161 x290))
(assert (not (= 54 (+ 3 x969))))
(assert (not (= (+ 2 x969) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (not (= 65535 (+ 4 x969))))
(assert (=> (<= x647 10000) (not (= (+ 1 x969) x647))))
(assert (not (= (+ x969 8) 340282366920938463463374607431768211455)))
(assert (x161 x296))
(assert (x161 x251))
(assert (not (= (+ x969 5) 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (=> (>= 10000 x301) (not (= (+ x339 9) x301))))
(assert (=> (>= 10000 x868) (not (= x868 (+ 3 x969)))))
(assert (not (= 340282366920938463463374607431768211456 (+ x969 5))))
(assert (not (= (+ 6 x969) 1089035750)))
(assert (=> (>= 10000 x28) (not (= x28 (x701 x990 52)))))
(assert (not (= (x701 x730 53) 29360345738620397371765038775553738755387432804059789257388031015462633472000)))
(assert (x161 x81))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (+ x969 2))))
(assert (not (= (x701 x28 52) 54)))
(assert (not (= 18446744073709551615 (+ x969 8))))
(assert (x161 x684))
(assert (= (mod (* 2 x138) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x856 x138 1)))
(assert (not (= 2054196882 (+ x969 3))))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (+ x969 6))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ x969 4))))
(assert (not (= (x701 x452 x467) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (= x27 (=> (and (= x995 (x153 (+ x872 192))) (= x201 (= x966 0))) (and (=> (and (not x201) (and (or (and (= x348 1000000000000000000000000000) x374) (and (not x374) (and (= x60 (ite x1015 1 0)) (= (div x165 1000000000000000000000000000) x150) (< 0 x81) (= x300 x940) (= x691 (mod (* x469 x370) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x808 (div x246 31536000)) (= x79 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x469)) (= (> x971 x17) x920) (= x622 x552) (= (+ x568 x300) x552) (= (div x150 31536000) x18) (= x246 (* x178 x469)) (= x73 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x178)) (< (* x513 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x17 (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x178)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x808 1000000000000000000000000000)) (= (or x654 x275) x1015) (= (ite (< 2 x469) (x473 (- x469 2)) 0) x893) (= x513 x703) (= x815 x747) (= x437 x607) (= (div x540 994519296000000) x971) (= (* x513 x18) x891) (= x623 (x807 x694 x313)) (= (mod (* x971 x178) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x705) (< (+ x940 x756) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x370 (x473 (- x469 1))) (= x348 x589) (< 0 x60) (= x756 x568) (= (= 0 x469) x858) (< (* x893 x691) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x627 1000000000000000000000000000) (= (= 0 x178) x654) (= (ite (not x858) 1 0) x694) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x178 x469)) (= x275 (not x389)) (= (ite (< x79 x370) 1 0) x313) (= x389 (< x73 x178)) (= (* x370 x469) x607) (= (ite x777 1 0) x81) (= (div x891 6) x815) (= (not x920) x702) (= (div x741 2) x756) (= (+ x248 x627) x940) (= (mod (* x178 x178) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x332) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x552 x815)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x370 x469)) (= 0 x623) (= x540 (div x498 1000000000000000000000000000)) (= x165 (x153 (+ x705 500000000000000000000000000))) (= x808 x248) (= x703 (* x691 x893)) (= (or x702 x947) x777) (= x589 (+ x747 x622)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x971 x437)) (= x947 (= x178 0)) (= x498 (x153 (+ 500000000000000000000000000 x332))) (= x741 (* x971 x437))))) (and (= (= x748 0) x162) (= x469 (x473 (- x843 x296))) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x666) x1056) (= (not x323) x801) (= x1075 (ite x337 1 0)) (< 0 x299) (= (x153 (+ 500000000000000000000000000 x412)) x52) (= x571 (mod (* x666 x764) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (not x942) x384) (= (div x52 1000000000000000000000000000) x472) (= x942 (> x764 x1056)) (= x391 (or x801 x162)) (= (div x411 1000000000000000000000000000) x695) (< 0 x1075) (= (x153 (+ x571 500000000000000000000000000)) x411) (= x314 (= 0 x666)) (= (> x296 x843) x103) (= (= 0 x469) x374) (= (or x384 x314) x337) (= x299 (ite x391 1 0)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x748) x789) (= (mod (* x748 x764) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x412) (= x323 (< x789 x764)) (not x103)))) x1047) (=> x201 x293)))))
(assert (= (and (not x374) x72) x859))
(assert (x161 x574))
(assert (not (= (x701 x452 x467) 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (x161 x877))
(assert (= x1042 (and (not x195) x881)))
(assert (not (= (x701 x990 52) 1118877564)))
(assert (x161 x613))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ x969 1))))
(assert (not (= (x701 x730 53) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (= x1043 (=> (and (or (not x309) x309) (= (= x89 0) x309)) x1021)))
(assert (= x819 (or x611 x643)))
(assert (=> (<= x452 10000) (not (= x452 (+ x969 1)))))
(assert (not (= (x701 x730 53) 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (not (= (x701 x28 52) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 576460752303423488 (x701 x452 x467))))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (+ x969 5))))
(assert (=> (<= x990 10000) (not (= x990 (+ 1 x969)))))
(assert (x161 x633))
(assert (not (= (+ 8 x969) 31536000)))
(assert (= (=> (and (or (and (and (< x245 4294967296) (= 1 x941)) x272) (and (= x941 x454) (not x272))) (and (= x730 x345) (= x272 (< 0 x454)) (= x640 (x153 (+ x151 4))))) x862) x714))
(assert (=> (<= x836 10000) (not (= (x701 x28 52) x836))))
(assert (not (= (+ 3 x969) 1089035750)))
(assert (not (= 71776119061217280 (+ 3 x969))))
(assert (not (= (+ 8 x969) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x161 x273))
(assert (not (= 74874610042509929465218460033027201126834042060343647393369405262880053395456 (x701 x452 x467))))
(assert (x161 x700))
(assert (x161 x690))
(assert (not (= (x701 x452 x467) 53)))
(assert (x161 x333))
(assert (=> (>= 10000 x806) (not (= x806 (+ 1 x969)))))
(assert (= x954 (and x932 x457)))
(assert (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (+ 3 x969))))
(assert (= x791 (and x1080 x1071)))
(assert (not (= (+ 9 x339) (x701 x28 52))))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x701 x28 52))))
(assert (=> (>= 10000 x836) (not (= (+ x969 3) x836))))
(assert (not (= 54 (+ x969 5))))
(assert (=> (<= x647 10000) (not (= x647 (x701 x730 53)))))
(assert (x105 x396))
(assert (=> (>= 10000 x333) (not (= x333 (+ 1 x969)))))
(assert (not (= 1208907372870555465154560 (+ 4 x969))))
(assert (not (= (x701 x730 53) (+ 7 x969))))
(assert (not (= (x701 x452 x467) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (x161 x408))
(assert (= x287 (or x859 x669)))
(assert (not (= 65535 (+ x969 6))))
(assert (x161 x151))
(assert (x161 x595))
(assert (x161 x576))
(assert (=> (<= x54 10000) (not (= (x701 x730 53) x54))))
(assert (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (+ 6 x969))))
(assert (=> (>= 10000 x546) (not (= x546 (+ x969 3)))))
(assert (not (= (x701 x452 x467) 1000000000000000000000000000)))
(assert (x161 x718))
(assert (x161 x227))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (+ 4 x969))))
(assert (not (= (+ 4 x969) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x161 x343))
(assert (x161 x543))
(assert (x161 x451))
(assert (not (= (+ 1 x969) 1208907372870555465154560)))
(assert (not (= 1208907372870555465154560 (+ x969 5))))
(assert (not (= 4294967296 (+ x969 5))))
(assert (not (= 2054196882 (+ 8 x969))))
(assert (not (= (+ x969 4) 946116605)))
(assert (=> (>= 10000 x805) (not (= (x701 x730 53) x805))))
(assert (x105 x421))
(assert (x161 x139))
(assert (x327 x466))
(assert (not (= 54 (x701 x730 53))))
(assert (= (x856 1 x892) (mod (ite (< x892 256) (x846 2 x892) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (+ x969 3))))
(assert (x161 x177))
(assert (x161 x840))
(assert (not (= (+ 2 x969) 576460752303423488)))
(assert (not (= (+ 8 x969) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x161 x175))
(assert (=> (>= 10000 x452) (not (= (+ x969 8) x452))))
(assert (x161 x318))
(assert (= x112 (and x911 (not x983))))
(assert (=> (<= x42 10000) (not (= (+ x969 2) x42))))
(assert (x327 x441))
(assert (x161 x232))
(assert (=> (= (x701 x730 53) (x701 x452 x467)) (and (= x452 x730) (= x467 53))))
(assert (x105 x914))
(assert (= (and x1001 (not x110)) x324))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ x969 8))))
(assert (not (= 1089035750 (x701 x990 52))))
(assert (=> (>= 10000 x836) (not (= x836 (+ 5 x969)))))
(assert (not (= 144115188075855872 (+ x969 3))))
(assert (x161 x596))
(assert (not (= 4294967296 (+ 9 x339))))
(assert (not (= (+ 3 x969) (+ 8 x969))))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 5 x969))))
(assert (x161 x499))
(assert (=> (<= x546 10000) (not (= x546 (+ 1 x969)))))
(assert (= (and x533 x489) x962))
(assert (=> (<= x441 10000) (not (= x441 (+ x969 1)))))
(assert (=> (>= 10000 x301) (not (= (x701 x28 52) x301))))
(assert (= x293 (=> (and (= x199 x556) (= x748 x438) (= (x807 1099511627775 x736) x369) (= x995 x151)) x714)))
(assert (not (= (+ x969 6) 509899769)))
(assert (not (= (x701 x730 53) 72057594037927936)))
(assert (x161 x656))
(assert (not (= 72057594037927936 (x701 x546 54))))
(assert (not (= (+ x969 7) 65536)))
(assert (= (or x661 x782) x179))
(assert (=> (>= 10000 x357) (not (= (+ 5 x969) x357))))
(assert (=> (<= x357 10000) (not (= x357 (+ x969 4)))))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ x969 4))))
(assert (x161 x1010))
(assert (not (= 576460752303423488 (x701 x990 52))))
(assert (not (= (+ 4 x969) 22712819017726130556793289372050217520962305494336081706653247717616627220480)))
(assert (x161 x37))
(assert (x161 x521))
(assert (x404 x49))
(assert (not (= (+ 5 x969) 288230376151711744)))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (+ 9 x339))))
(assert (=> (<= x452 10000) (not (= (+ 5 x969) x452))))
(assert (not (= (+ 3 x969) 1152921504606846976)))
(assert (= (=> (and (= x1060 (= 0 x586)) (not x1060)) x431) x757))
(assert (x161 x504))
(assert (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x701 x730 53))))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ 7 x969))))
(assert (=> (>= 10000 x28) (not (= x28 (+ 7 x969)))))
(assert (x161 x470))
(assert (x161 x3))
(assert (x161 x188))
(assert (x327 x805))
(assert (=> (>= 10000 x871) (not (= (+ 4 x969) x871))))
(assert (=> (<= x684 10000) (not (= (+ x969 1) x684))))
(assert (=> (<= x871 10000) (not (= x871 (+ 3 x969)))))
(assert (= (and x1072 x490) x802))
(assert (=> (<= x466 10000) (not (= x466 (+ x969 3)))))
(assert (not (= (x701 x730 53) (+ x339 9))))
(assert (not (= 994519296000000 (+ x969 4))))
(assert (not (= (x701 x546 54) 288230376151711744)))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (x701 x730 53))))
(assert (not (= (+ x969 4) 1152921504606846976)))
(assert (not (= (+ 6 x969) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x161 x996))
(assert (not (= 946116605 (+ x969 6))))
(assert (not (= (+ 9 x339) 1099511627776)))
(assert (not (= 7237005577325680195743901738874374364099144639582604309003564681041176166400 (+ x339 9))))
(assert (=> (<= x357 10000) (not (= (x701 x730 53) x357))))
(assert (not (= (x701 x546 54) 509899769)))
(assert (x161 x523))
(assert (=> (= (x701 x452 x467) (x701 x28 52)) (and (= x452 x28) (= x467 52))))
(assert (not (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (+ x969 8))))
(assert (not (= (+ 3 x969) (x701 x28 52))))
(assert (not (= (+ 1 x969) 144115188075855872)))
(assert (x161 x827))
(assert (= (and x519 (not x427)) x99))
(assert (x327 x42))
(assert (=> (>= 10000 x805) (not (= x805 (x701 x546 54)))))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (x701 x990 52))))
(assert (x161 x211))
(assert (x161 x344))
(assert (not (= (x701 x730 53) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= (+ x969 5) (+ x969 7))))
(assert (not (= (x701 x546 54) (+ x969 3))))
(assert (x161 x924))
(assert (x161 x606))
(assert (x105 576460752303423488))
(assert (not (= (+ x969 2) 18446744073709551615)))
(assert (not (= (x701 x28 52) 500000000000000000000000000)))
(assert (=> (>= 10000 x467) (not (= x467 (+ 3 x969)))))
(assert (x404 x494))
(assert (x161 x438))
(assert (x161 x85))
(assert (x161 x779))
(assert (not (= (+ x969 2) 31536000)))
(assert (= x330 (or x1018 x802)))
(assert (x161 x1076))
(assert (not (= (+ x339 9) 65535)))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x701 x28 52))))
(assert (not (= 72057594037927936 (+ 6 x969))))
(assert (= (and x519 x427) x699))
(assert (x327 x868))
(assert (x161 x146))
(assert (x161 x748))
(assert (not (= 1383405463 (x701 x990 52))))
(assert (not (= (x701 x546 54) 340282366920938463463374607431768211455)))
(assert (x367 x396))
(assert (not (= 1099511627775 (+ 6 x969))))
(assert (= x551 (and x110 x1001)))
(assert (= (and x457 (not x932)) x317))
(assert (x161 x587))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x701 x28 52))))
(assert (x161 x829))
(assert (not (= (+ 7 x969) 4294967296)))
(assert (not (= (+ 5 x969) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (not (= (+ 2 x969) 71776119061217280)))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ x969 8))))
(assert (=> (>= 10000 x28) (not (= x28 (x701 x546 54)))))
(assert (not (= (+ x969 5) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (= (and x981 (not x811)) x407))
(assert (=> (>= 10000 x310) (not (= (x701 x28 52) x310))))
(assert (x161 x1016))
(assert (= x981 (or x206 (and x132 (not x683)))))
(assert (x161 x449))
(assert (x327 x684))
(assert (=> (<= x836 10000) (not (= (x701 x452 x467) x836))))
(assert (not (= (x701 x990 52) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x161 x769))
(assert (not (= (x701 x452 x467) 1152921504606846976)))
(assert (x193 x736))
(assert (x161 x1078))
(assert (not (= 31536000 (+ x969 6))))
(assert (=> (>= 10000 x546) (not (= (+ 5 x969) x546))))
(assert (x161 x1017))
(assert (=> (<= x546 10000) (not (= (x701 x452 x467) x546))))
(assert (x161 x812))
(assert (x161 x446))
(assert (not (= 1383405463 (+ x969 7))))
(assert (x161 x303))
(assert (=> (>= 10000 x333) (not (= (+ x339 9) x333))))
(assert (not (= 53 (+ 8 x969))))
(assert (not (= (+ 3 x969) 1099511627776)))
(assert (x161 x755))
(assert (x161 x991))
(assert (=> (>= 10000 x42) (not (= (+ x969 4) x42))))
(assert (=> (>= 10000 x54) (not (= x54 (+ x969 5)))))
(assert (not (= 52 (+ 4 x969))))
(assert (not (= (+ x969 5) (x701 x730 53))))
(assert (not (= (x701 x28 52) 2054196882)))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (+ x969 7))))
(assert (not (= (+ x969 7) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (not (= 946116605 (x701 x546 54))))
(assert (x161 x1000))
(assert (not (= (+ x969 1) (x701 x990 52))))
(assert (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (x701 x546 54))))
(assert (=> (<= x546 10000) (not (= x546 (x701 x730 53)))))
(assert (=> (<= x806 10000) (not (= (+ 3 x969) x806))))
(assert (x161 x1025))
(assert (not (= (x701 x990 52) 1152921504606846976)))
(assert (x161 x364))
(assert (not (= 1000000000000000000000000000 (x701 x730 53))))
(assert (not (= (+ x969 8) 994519296000000)))
(assert (= (=> (and (not x564) (= (= x636 0) x564)) x431) x686))
(assert (not (= (+ 6 x969) (+ x969 7))))
(assert (=> (<= x466 10000) (not (= x466 (+ 6 x969)))))
(assert (=> (<= x990 10000) (not (= (x701 x28 52) x990))))
(assert (not (= 53 (x701 x28 52))))
(assert (=> (<= x467 10000) (not (= (+ x969 6) x467))))
(assert (= (and x888 (not x32)) x1072))
(assert (not (= 2054196882 (+ x969 1))))
(assert (=> (<= x684 10000) (not (= (+ 6 x969) x684))))
(assert (=> (>= 10000 x28) (not (= x28 (+ x339 9)))))
(assert (= (and (not x434) x155) x509))
(assert (not (= (x701 x28 52) 71776119061217280)))
(assert (not (= 1383405463 (+ 4 x969))))
(assert (not (= (+ x969 7) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (=> (<= x730 10000) (not (= x730 (+ 1 x969)))))
(assert (=> (>= 10000 x812) (not (= x812 (x701 x28 52)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (+ 2 x969))))
(assert (not (= (+ 7 x969) 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x161 x169))
(assert (x161 x165))
(assert (=> (<= x812 10000) (not (= x812 (+ x969 1)))))
(assert (x161 x560))
(assert (not (= 6582018229189043197315758676582005330734049138558148258257960960 (+ x969 6))))
(assert (=> (<= x871 10000) (not (= x871 (x701 x546 54)))))
(assert (not (= 65536 (x701 x28 52))))
(assert (=> (<= x333 10000) (not (= x333 (+ x969 5)))))
(assert (= (=> (and (= (ite (> x191 x850) x850 x191) x365) (= (= x726 1) x436) (not x987) (= (> x426 2) x987)) (and (=> (and (and (or (not x983) (and x983 (and (= x378 (= x482 (x97 x301))) x511 (> 4294967296 x8) (= (<= x368 (x97 x54)) x511) (= x482 (x215 x301)) x378 (= x368 (x215 x54))))) (and (= (x153 (+ x358 4)) x968) (= x983 (< 0 x89)) (= x543 (x153 (+ 32 x968))))) x436) x1043) (=> (and (and (or (not x434) (and x434 (and x340 (< x125 4294967296) x1038 (= x763 (x215 x54)) (= (x215 x441) x419) (= (= (x994 x441) x419) x340) (= x1038 (<= x763 (x994 x54)))))) (and (= (< 0 x817) x434) (= (x153 (+ x358 4)) x388) (= x624 (x153 (+ x388 32))) (= x885 (x153 (+ 32 x624))))) (not x436)) x646))) x254))
(assert (x105 x31))
(assert (x161 x648))
(assert (not (= 1142400387 (+ x969 8))))
(assert (not (= 4294967296 (x701 x28 52))))
(assert (not (= 1635491895 (x701 x28 52))))
(assert (not (= 31536000 (+ x969 7))))
(assert (x105 6582018229189043197315758676582005330734049138558148258257960960))
(assert (not (= 80397878463760440755375692149700041695399247739548614023716483005714108776448 (x701 x990 52))))
(assert (= x887 (or x71 (and (not x618) x770))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ 4 x969))))
(assert (not (= (+ x969 8) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (=> (>= 10000 x301) (not (= (x701 x546 54) x301))))
(assert (not (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (x701 x990 52))))
(assert (x161 x601))
(assert (=> (<= x730 10000) (not (= x730 (x701 x990 52)))))
(assert (x161 x579))
(assert (x161 x514))
(assert (not (= (x701 x730 53) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= (+ 2 x969) (x701 x452 x467))))
(assert (not (= (+ 4 x969) 1089035750)))
(assert (= (and (not x70) x477) x197))
(assert (not (= (+ x969 1) 1463475841)))
(assert (=> (<= x467 10000) (not (= x467 (x701 x452 x467)))))
(assert (not (= (+ 6 x969) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (not (= (+ 1 x969) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert true)
(assert (=> (<= x467 10000) (not (= (+ 8 x969) x467))))
(assert (not (= (+ x339 9) 80397878463760440755375692149700041695399247739548614023716483005714108776448)))
(assert (x161 x392))
(assert (x367 x430))
(assert (x161 x694))
(assert (x327 x310))
(assert (not (= (+ 2 x969) 1383405463)))
(assert (not (= (x701 x990 52) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (x161 x77))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ 5 x969))))
(assert (not (= 576460752303423488 (+ 8 x969))))
(assert (= x48 (or x241 x64)))
(assert (x105 340282366920938463463374607431768211455))
(assert (x161 x1007))
(assert (x976 x478))
(assert (=> (<= x310 10000) (not (= (+ x969 7) x310))))
(assert (x161 x820))
(assert (not (= 1118877564 (+ x969 3))))
(assert (not (= (+ x969 5) 1463475841)))
(assert (not (= (x701 x546 54) 97250886131833805217759495634388081419703557252615901133360390455399389593600)))
(assert (not (= (+ 7 x969) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x701 x452 x467))))
(assert (x161 x39))
(assert (=> (>= 10000 x54) (not (= (x701 x546 54) x54))))
(assert (not (= (+ x969 6) 1463475841)))
(assert (x161 x935))
(assert (x161 x565))
(assert (= x737 (and x912 x415)))
(assert (x105 x494))
(assert (not (= 110890046519461262771209238963172350779326551179552054297210380410598264406016 (+ 4 x969))))
(assert (=> (<= x647 10000) (not (= x647 (+ 7 x969)))))
(assert (not (= (+ 7 x969) 1461501637330902918203684832716283019655932542975)))
(assert (= (and x1059 (not x298)) x841))
(assert (x161 x42))
(assert (= (and x489 (not x533)) x40))
(assert (=> (<= x357 10000) (not (= (+ x969 8) x357))))
(assert (x161 x672))
(assert (x105 x657))
(assert (not (= (+ x339 9) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x701 x730 53))))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (+ 9 x339))))
(assert (not (= (+ x969 3) 1635491895)))
(assert (x161 x191))
(assert (=> (>= 10000 x333) (not (= x333 (+ x969 8)))))
(assert (not (= (+ 7 x969) 946116605)))
(assert (=> (>= 10000 x546) (not (= (+ 9 x339) x546))))
(assert (= (and x567 x448) x132))
(assert (=> (<= x357 10000) (not (= x357 (+ x339 9)))))
(assert (not (= (x701 x546 54) (x701 x990 52))))
(assert (=> (<= x301 10000) (not (= x301 (+ x969 8)))))
(assert (not (= (+ x339 9) 340282366920938463463374607431768211455)))
(assert (=> (<= x868 10000) (not (= x868 (+ x969 7)))))
(assert (x161 x569))
(assert (= (and x240 x83) x98))
(assert (x327 x647))
(assert (x105 7237005577325680195743901738874374364099144639582604309003564681041176166400))
(assert (= x828 (or x295 x330)))
(assert (x161 x1068))
(assert (= (not (and (= x440 x262) (not (or (and (< x37 32) (= (<= x37 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x37 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x258 0)) (= (x30 288) x262))) x603))
(assert (=> (<= x467 10000) (not (= (+ 7 x969) x467))))
(assert (not (= (+ x969 6) (x701 x28 52))))
(assert (x161 x880))
(assert (= (and x989 x954) x566))
(assert (x161 x886))
(assert (x161 x386))
(assert (not (= (+ x969 3) 7237005577325680195743901738874374364099144639582604309003564681041176166400)))
(assert (not (= (+ x969 5) (x701 x28 52))))
(assert (not (= (+ 8 x969) 500000000000000000000000000)))
(assert (x493 x712))
(assert (x161 x836))
(assert (=> (<= x333 10000) (not (= (+ x969 2) x333))))
(assert (x161 x476))
(assert (not (= (+ 1 x969) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x652 x601))
(assert (x161 x837))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ x339 9))))
(assert (=> (>= 10000 x805) (not (= x805 (+ x969 6)))))
(assert (x161 x359))
(assert (not (= 288230376151711744 (+ 2 x969))))
(assert (=> (>= 10000 x647) (not (= (+ 5 x969) x647))))
(assert (not (= (x701 x546 54) 31536000)))
(assert (not (= (+ x969 7) 53)))
(assert (not (= 24969082719448127345671160280498924465674002430646247116174538836667302674432 (x701 x546 54))))
(assert (not (= (+ x969 3) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (not (= (+ 9 x339) 74874610042509929465218460033027201126834042060343647393369405262880053395456)))
(assert (=> (<= x301 10000) (not (= x301 (+ x969 1)))))
(assert (x161 x851))
(assert (not (= (+ 2 x969) 1118877564)))
(assert (=> (>= 10000 x301) (not (= x301 (x701 x730 53)))))
(assert (x161 x73))
(assert (x161 x122))
(assert (not (= (+ 2 x969) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (not (= (+ 5 x969) 52)))
(assert (x105 x565))
(assert (=> (>= 10000 x310) (not (= (+ x969 3) x310))))
(assert (not (= 144115188075855872 (+ x969 5))))
(assert (not (= 1152921504606846976 (+ 1 x969))))
(assert (x161 x496))
(assert (x161 x517))
(assert (=> (>= 10000 x871) (not (= (+ x339 9) x871))))
(assert (not (= 288230376151711744 (+ 1 x969))))
(assert (=> (<= x310 10000) (not (= x310 (+ 1 x969)))))
(assert (x161 x1051))
(assert (not (= 54 (+ x969 4))))
(assert (x161 x1048))
(assert (not (= (+ x969 4) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (and x677 x604) x156))
(assert (not (= (+ x969 5) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (not (= (+ x969 5) 1099511627776)))
(assert (x161 x534))
(assert (not (= 340282366920938463463374607431768211456 (+ x969 6))))
(assert (x161 x825))
(assert (not (= (+ 4 x969) (+ x969 1))))
(assert (=> (<= x805 10000) (not (= (+ 4 x969) x805))))
(assert (x161 x17))
(assert (not (= 31536000 (x701 x990 52))))
(assert (x663 x601))
(assert (not (= 1208907372870555465154560 (+ 7 x969))))
(assert (not (= (+ x969 5) 6582018229189043197315758676582005330734049138558148258257960960)))
(assert (=> (<= x54 10000) (not (= x54 (+ x969 2)))))
(assert (=> (>= 10000 x310) (not (= (x701 x990 52) x310))))
(assert (= (=> (and (and (= (x153 (+ 500000000000000000000000000 x61)) x588) (= x952 (div x588 1000000000000000000000000000)) (= x1022 (= 0 x438)) (= x560 (x75 x1010 176)) (= 1632 x354) (= (< x849 x231) x462) (= x209 (x214 x945)) (<= 0 x209) (= x1010 (x807 6582018229189043197315758676582005330734049138558148258257960960 x601)) (< x209 1461501637330902918203684832716283019655932542976) (= x33 (or x341 x1022)) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x438) x849) (= x61 (mod (* x438 x231) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x945 (+ x474 1)) (> x517 0) (= (= 0 x560) x491) (= x581 (x153 (+ x435 288))) (= (x153 (+ x1029 128)) x435) (= (ite (< 0 x80) 0 x365) x593) (= (not x462) x341) (>= 1461501637330902918203684832716283019655932542975 x209) (= x517 (ite x33 1 0))) (or (and x491 (= 0 x237)) (and (not x491) (and (= x237 x1017) (>= x1017 0) (<= x1017 340282366920938463463374607431768211455) (= (x860 x268) x1017) (> 340282366920938463463374607431768211456 x1017) (= x268 (+ x945 1)))))) x1055) x59))
(assert (not (= 288230376151711744 (+ 6 x969))))
(assert (not (= (+ x969 2) 65536)))
(assert (not (= (+ 8 x969) 1461501637330902918203684832716283019655932542976)))
(assert (= 0 (x1077 x65)))
(assert (not (= 1099511627775 (x701 x730 53))))
(assert (x161 x299))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (+ x969 7))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ 3 x969))))
(assert (=> (>= 10000 x333) (not (= (+ 6 x969) x333))))
(assert (x161 x940))
(assert (x161 x335))
(assert (=> (<= x333 10000) (not (= x333 (+ x969 4)))))
(assert (x161 x1009))
(assert (not (= (x701 x990 52) 946116605)))
(assert (not (= (+ 8 x969) (+ 4 x969))))
(assert (x161 x641))
(assert (not (= (x701 x546 54) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (=> (>= 10000 x812) (not (= (+ x969 7) x812))))
(assert (x161 x612))
(assert (= (and x381 (not x272)) x241))
(assert (= x628 (and x954 (not x989))))
(assert (x161 x586))
(assert (=> (<= x730 10000) (not (= x730 (+ 7 x969)))))
(assert (not (= 500000000000000000000000000 (+ x969 4))))
(assert (=> (>= 10000 x441) (not (= x441 (+ 4 x969)))))
(assert (x161 x892))
(assert (not (= 1118877564 (+ 7 x969))))
(assert (x161 x849))
(assert (=> (<= x546 10000) (not (= x546 (x701 x990 52)))))
(assert (not (= 1463475841 (x701 x730 53))))
(assert (not (= (x701 x452 x467) 144115188075855872)))
(assert (= x257 (=> (= (= 0 x238) x240) (and (=> (and (and (= x172 (< x344 2)) (= (= 2 x344) x978) (= x722 1632) (>= x606 0) (= x606 (x458 x121)) (= (x701 x452 x467) x339) (= (+ x339 9) x121) (>= 340282366920938463463374607431768211455 x606) (< x606 340282366920938463463374607431768211456) (= x923 (x807 71776119061217280 x601)) (= (x75 x923 48) x344) (not x172) (= (x473 (- x344 2)) x444)) (not x240)) (and (=> (and (= 1 x403) x978) x502) (=> (and (not x978) (and (= x712 (ite (> 78 x444) 1 0)) (= (= (x187 x712 x779) 0) x615) (= (ite (> 32 x444) 1 0) x779))) (and (=> (and (= (x846 10 x444) x403) (not x615)) x502) (=> (and x615 (= (> x444 1) x803)) (and (=> x803 x119) (=> (and (not x803) (and (= x203 1) (= x483 10))) x526))))))) (=> (and x240 (= x727 x948)) x655)))))
(assert (not (= 1089035750 (x701 x452 x467))))
(assert (not (= (+ 8 x969) (x701 x546 54))))
(assert (=> (>= 10000 x467) (not (= x467 (+ 5 x969)))))
(assert (not (= (+ x969 2) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 1099511627775 (x701 x990 52))))
(assert (not (= 1118877564 (+ 4 x969))))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ 2 x969))))
(assert (x161 x756))
(assert (not (= (+ x969 4) 144115188075855872)))
(assert (x161 x1004))
(assert (x404 x456))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (+ 3 x969))))
(assert (not (= (+ x969 7) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (+ 8 x969))))
(assert (= (=> (and (= x37 x343) (= x258 0)) x603) x55))
(assert (= x1034 (and (not x810) x861)))
(assert (not (= (+ 1 x969) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (x161 x89))
(assert (not (= (x701 x546 54) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (x701 x730 53))))
(assert (x105 1208907372870555465154560))
(assert (= x559 (=> (and (= x748 x396) (= x289 (> x587 x481)) (= (ite x724 1 0) x468) (> x468 0) (= (div 115792089237316195423570985008687907853269984665640064039457584007913129639935 x666) x481) (= x724 (or x577 x373)) (= (= x666 0) x577) (= x204 (mod (* x666 x587) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x396 340282366920938463463374607431768211455) x516) (= (not x289) x373) (= x396 (div x1067 1000000000000000000000000000)) (= (x153 (+ x204 500000000000000000000000000)) x1067) (not x516) (= x594 (x807 340282366920938463463374607431768211455 x396))) x27)))
(assert (x161 x955))
(assert (x161 x456))
(assert (not (= 1463475841 (+ 4 x969))))
(assert (not (= (+ 6 x969) (+ 4 x969))))
(assert (x161 x403))
(assert (=> (>= 10000 x812) (not (= (x701 x990 52) x812))))
(assert (not (= (+ 7 x969) 110890046519461262771209238963172350779326551179552054297210380410598264406016)))
(assert (x404 x1000))
(assert (not (= 1208907372870555465154560 (+ x969 8))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x701 x990 52))))
(assert (=> (>= 10000 x28) (not (= (+ 2 x969) x28))))
(assert (not (= (x701 x990 52) (+ x339 9))))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (x701 x28 52))))
(assert (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (+ 4 x969))))
(assert (x161 x592))
(assert (= (x1077 x690) 0))
(assert (not (= 1142400387 (x701 x28 52))))
(assert (not (= 4294967296 (+ x969 2))))
(assert (not (= (x701 x990 52) 77194726158210796949047323339125271902179989777093709359638389338608753093290)))
(assert (=> (<= x42 10000) (not (= x42 (+ x969 8)))))
(assert (=> (>= 10000 x467) (not (= x467 (x701 x28 52)))))
(assert (not (= (+ 2 x969) (+ 1 x969))))
(assert (not (= 53 (x701 x730 53))))
(assert (not (= (x701 x28 52) 54940573406046109056602222415596668683460243721328594580962599660119180443648)))
(assert (not (= 1142400387 (+ 5 x969))))
(assert (=> (<= x868 10000) (not (= (x701 x28 52) x868))))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (+ 4 x969))))
(assert (x890 x421))
(assert (not (= (+ x339 9) 144115188075855872)))
(assert (x161 x556))
(assert (not (= (+ x969 5) (x701 x990 52))))
(assert (=> (>= 10000 x871) (not (= (x701 x452 x467) x871))))
(assert (not (= (+ 2 x969) (+ x969 7))))
(assert (not (= (+ x969 5) 2054196882)))
(assert (x161 x412))
(assert (=> (<= x990 10000) (not (= x990 (+ 6 x969)))))
(assert (x327 x990))
(assert (=> (<= x806 10000) (not (= x806 (+ x969 2)))))
(assert (=> (>= 10000 x805) (not (= (+ 7 x969) x805))))
(assert (x161 x452))
(assert (x161 x310))
(assert (x161 x1064))
(assert (x105 77194726158210796949047323339125271902179989777093709359638389338608753093290))
(assert (x161 x550))
(assert (not (= (x701 x730 53) 1142400387)))
(assert (x161 x1074))
(assert (= (and x861 x810) x480))
(assert (not (= (+ x969 1) (x701 x452 x467))))
(assert (= (or x239 x252) x882))
(assert (not (= 71356987572919795984103299673912204194632180251134163011139925636576289226752 (+ 8 x969))))
(assert (not (= (+ 2 x969) 61906025702411949798612179514519095217898697161212278170789384498383220113408)))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (x701 x28 52))))
(assert (not (= 1099511627775 (+ 5 x969))))
(assert (not (= (+ 2 x969) 1089035750)))
(assert (x161 x705))
(assert (not (= 946116605 (+ 2 x969))))
(assert (not (= (x701 x990 52) 24969082719448127345671160280498924465674002430646247116174538836667302674432)))
(assert (x161 x454))
(assert (x161 x507))
(assert (x327 x339))
(assert (not (= 1383405463 (+ x969 6))))
(assert (not (= 77194726158210796949047323339125271902179989777093709359638389338608753093290 (+ 4 x969))))
(assert (=> (>= 10000 x806) (not (= x806 (+ x969 4)))))
(assert (x161 x393))
(assert (not (= (+ 3 x969) 72057594037927936)))
(assert (not (= (+ 4 x969) 1099511627775)))
(assert (= (and x911 x983) x634))
(assert (not (= (+ 2 x969) 144115188075855872)))
(assert (= x795 (and x117 (not x108))))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (x701 x730 53))))
(assert (=> (<= x42 10000) (not (= x42 (+ x969 3)))))
(assert (=> (>= 10000 x546) (not (= x546 (x701 x28 52)))))
(assert (not (= 22716352711855687325452455967051703357993960462129832944569490930019212460032 (+ x969 2))))
(assert (=> (>= 10000 x990) (not (= (x701 x990 52) x990))))
(assert (= x1080 (or x566 x628)))
(assert (= (x75 x39 2) (div x39 4)))
(assert (x404 x1064))
(assert (=> (>= 10000 x812) (not (= x812 (x701 x546 54)))))
(assert (x212 x273 (x473 (- x273 1))))
(assert (=> (>= 10000 x357) (not (= x357 (+ 7 x969)))))
(assert (not (= (x701 x546 54) 1089035750)))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (+ x969 2))))
(assert (=> (<= x868 10000) (not (= (+ 9 x339) x868))))
(assert (not (= 65535 (+ x969 1))))
(assert (=> (<= x42 10000) (not (= x42 (x701 x546 54)))))
(assert (not (= 1152921504606846976 (+ 6 x969))))
(assert (not (= 52 (+ 2 x969))))
(assert (= x217 (and x126 x819)))
(assert (= x526 (=> (and (= x787 (> x203 x521)) (not x787) (= x521 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x483)) (= x403 x827) (= (mod (* x483 x203) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x827)) x502)))
(assert (x161 x708))
(assert (=> (>= 10000 x546) (not (= (+ x969 2) x546))))
(assert (= 0 (x1077 x1033)))
(assert (=> (>= 10000 x684) (not (= (+ 5 x969) x684))))
(assert (not (= (+ 5 x969) 23168665560438953713825780127241890498045796339729991397848622117550123122688)))
(assert (x161 x951))
(assert (x161 x623))
(assert (not (= (+ 9 x339) 71356987572919795984103299673912204194632180251134163011139925636576289226752)))
(assert (= (and x682 (not x978)) x745))
(assert (x161 x722))
(assert (not (= (x701 x546 54) (+ x969 6))))
(assert (not (= (x701 x452 x467) 18446744073709551615)))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x701 x990 52))))
(assert (=> (<= x647 10000) (not (= (+ 3 x969) x647))))
(assert (not (= (+ x969 4) 1099511627776)))
(assert (not (= (+ x339 9) 1118877564)))
(assert (not (= (x701 x990 52) 23605076785439214643232854609925391371455184862258269280504658849269400207360)))
(assert (x161 x923))
(assert (not (= 946116605 (x701 x730 53))))
(assert (not (= 340282366920938463463374607431768211456 (x701 x546 54))))
(assert (not (= 994519296000000 (+ 6 x969))))
(assert (=> (>= 10000 x990) (not (= x990 (+ x969 4)))))
(assert (x105 1152921504606846976))
(assert (x105 x656))
(assert (=> (<= x684 10000) (not (= (+ 9 x339) x684))))
(assert (x161 x198))
(assert (x161 x402))
(assert (=> (>= 10000 x684) (not (= (+ 3 x969) x684))))
(assert (x161 x896))
(assert (not (= 65536 (+ x339 9))))
(assert (not (= (+ x969 8) 340282366920938463463374607431768211456)))
(assert (= x15 (and x317 (not x1037))))
(assert (x161 x678))
(assert (not (= 509899769 (+ x339 9))))
(assert (= x43 (and x117 x108)))
(assert (not (= (+ 2 x969) (+ x969 4))))
(assert (x105 x1051))
(assert (x161 x948))
(assert (x161 x949))
(assert (not (= (+ 5 x969) 1089035750)))
(assert (not (= (+ x969 6) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (>= 10000 x730) (not (= (+ 6 x969) x730))))
(assert (x161 x368))
(assert (x161 x908))
(assert (= x83 (or x99 x100)))
(assert (x161 x971))
(assert (= (and x22 (not x803)) x661))
(assert (x161 x794))
(assert (not (= (+ 1 x969) (+ 8 x969))))
(assert (not (= (+ 2 x969) 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (=> (<= x357 10000) (not (= (x701 x990 52) x357))))
(assert (not (= 1208907372870555465154560 (+ 2 x969))))
(assert (not (= (x701 x546 54) (+ x969 4))))
(assert (not (= 22712819017726130556793289372050217520962305494336081706653247717616627220480 (x701 x452 x467))))
(assert (x161 x804))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129634935 (x701 x730 53))))
(assert (= (=> (and (= (x153 (+ 64 x451)) x224) (= x1053 (x153 (+ x451 32)))) (and (=> (and (= x224 x1068) x308) x772) (=> (not x308) x55))) x355))
(assert (=> (>= 10000 x868) (not (= x868 (+ x969 4)))))
(assert (x105 x392))
(assert (x327 x730))
(assert (=> (>= 10000 x805) (not (= x805 (+ x969 8)))))
(assert (x367 x1051))
(assert (=> (<= x357 10000) (not (= (+ 3 x969) x357))))
(assert (=> (<= x467 10000) (not (= x467 (x701 x546 54)))))
(assert (x161 x921))
(assert (x161 x395))
(assert (x105 x478))
(assert (not (= 1383405463 (x701 x730 53))))
(assert (x161 x573))
(assert (= x862 (=> (and (and (= (x153 (+ 4 x408)) x592) (= (> x949 0) x752) (= (x153 (+ x151 x1016)) x408) (= (x1 x151) x475) (not x269) (= x456 (x153 (+ x245 31))) (= x144 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x245) true) (< x245 32)) (> x245 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not x144) (= x1016 (x807 115792089237316195423570985008687907853269984665640564039457584007913129639904 x456)) (= (= 0 x941) x269)) (or (and (not x752) (= x949 x680)) (and x752 (and (= x680 1) (> 4294967296 x146))))) x137)))
(assert (not (= (+ 6 x969) 2054196882)))
(assert (= (or x776 (and x698 (not x1057))) x210))
(assert (not (= (+ 4 x969) 1000000000000000000000000000)))
(assert (not (= 509899769 (+ 3 x969))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (+ x969 8))))
(assert (x161 x174))
(assert (x161 x546))
(assert (not (= 1142400387 (+ x969 2))))
(assert (= (=> (= (= x649 0) x932) (and (=> (and (not x932) (and (and (= x931 (x153 (+ x1030 32))) (= x823 (= x120 0)) (= x1037 (< 0 x636)) (not x823) (= x120 (x1065 x684)) (= x1030 (x153 (+ 32 x1012))) (= (x153 (+ 32 x613)) x1012) (= (x153 (+ 4 x359)) x613)) (or (and x1037 (and (< x901 4294967296) (= (<= x496 (x351 x54)) x620) (= (x464 x684) x90) x620 x286 (= x496 (x464 x54)) (= x286 (= (x351 x684) x90)))) (not x1037)))) x839) (=> (and (and (or (not x989) (and (and (= (x464 x54) x420) (= x387 (= (x294 x28) x829)) (= (x464 x28) x829) x387 x515 (= (<= x420 (x294 x54)) x515) (> 4294967296 x154)) x989)) (and (= (x153 (+ x678 32)) x733) (= (< 0 x662) x989) (= (x153 (+ 4 x359)) x678) (= (x153 (+ x733 32)) x719) (= x28 x1046))) x932) x23))) x655))
(assert (=> (>= 10000 x805) (not (= (+ x969 5) x805))))
(assert (x161 x594))
(assert (not (= (+ 3 x969) 340282366920938463463374607431768211456)))
(assert (not (= 23168665560438953713825780127241890498045796339729991397848622117550123122688 (+ x969 1))))
(assert (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x701 x730 53))))
(assert (not (= 61906025702411949798612179514519095217898697161212278170789384498383220113408 (x701 x990 52))))
(assert (x105 x694))
(assert (x161 x218))
(assert (=> (<= x990 10000) (not (= (x701 x730 53) x990))))
(assert (x161 x34))
(assert (= x239 (and (not x664) x508)))
(assert (x161 x897))
(assert (=> (>= 10000 x466) (not (= x466 (x701 x990 52)))))
(assert (not (= (+ 7 x969) 1099511627775)))
(assert (x161 x868))
(assert (not (= (+ x969 4) 1635491895)))
(assert (=> (<= x42 10000) (not (= x42 (+ x969 5)))))
(assert (x161 x1029))
(assert (not (= 1142400387 (+ 1 x969))))
(assert (x327 x54))
(assert (not (= 54 (x701 x452 x467))))
(assert (not (= 29360345738620397371765038775553738755387432804059789257388031015462633472000 (x701 x546 54))))
(assert (not (= 53 (x701 x990 52))))
(assert (=> (<= x871 10000) (not (= (x701 x28 52) x871))))
(assert (=> (>= 10000 x54) (not (= x54 (+ 6 x969)))))
(assert (not (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x701 x730 53))))
(assert (not (= (x701 x546 54) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (=> (>= 10000 x805) (not (= x805 (+ x339 9)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x701 x990 52))))
(assert (x161 x761))
(assert (not (= (+ 2 x969) (+ 5 x969))))
(assert (x161 x274))
(assert (= x477 (or x795 x43)))
(assert (= x160 (=> (= (= (x75 x708 2) 0) x501) (and (=> (= 1 x546) x903) x501))))
(assert (x161 x25))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ x969 1))))
(assert (x161 x49))
(assert (x105 x853))
(assert (= x782 (and x803 x22)))
(assert (x161 x640))
(assert (=> (>= 10000 x452) (not (= (x701 x730 53) x452))))
(assert (= x168 (or (and x265 x130) (and (not x677) x604) (and x847 (not x331)) (and x480 (not x10)) (and x156 x1081) (and x84 (not x308)))))
(assert (= x682 (and x83 (not x240))))
(assert (not (= (+ 9 x339) 1089035750)))
(assert (x161 x817))
(assert (= x927 (and x226 x882)))
(assert (not (= (x701 x730 53) 1099511627776)))
(assert (not (= 340282366920938463463374607431768211456 (x701 x28 52))))
(assert (=> (>= 10000 x806) (not (= x806 (x701 x730 53)))))
(assert (=> (<= x990 10000) (not (= (+ 8 x969) x990))))
(assert (=> (>= 10000 x333) (not (= (+ 7 x969) x333))))
(assert (x161 x1058))
(assert (=> (<= x871 10000) (not (= x871 (+ 7 x969)))))
(assert (not (= 23605076785439214643232854609925391371455184862258269280504658849269400207360 (+ 3 x969))))
(assert (not (= (x701 x730 53) 994519296000000)))
(assert (x161 x1035))
(assert (x161 x312))
(assert (not (= (+ x969 8) 65535)))
(assert (=> (>= 10000 x467) (not (= (x701 x730 53) x467))))
(assert (and (= (x846 10 26) 100000000000000000000000000) (= (x846 10 60) 1000000000000000000000000000000000000000000000000000000000000) (= (x846 10 59) 100000000000000000000000000000000000000000000000000000000000) (= 10000000000000000 (x846 10 16)) (= 10000000000000000000000000000000000000 (x846 10 37)) (= (x846 10 31) 10000000000000000000000000000000) (= (x846 10 18) 1000000000000000000) (= 1000000000000000 (x846 10 15)) (= 10000000000000000000000000000000000000000000000000000 (x846 10 52)) (= 10000000 (x846 10 7)) (= 10000 (x846 10 4)) (= 100000000000000000000000000000000000000000 (x846 10 41)) (= (x846 10 47) 100000000000000000000000000000000000000000000000) (= (x846 10 35) 100000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000 (x846 10 49)) (= (x846 10 2) 100) (= 100000000000000 (x846 10 14)) (= (x846 10 27) 1000000000000000000000000000) (= (x846 10 45) 1000000000000000000000000000000000000000000000) (= 10000000000000000000000 (x846 10 22)) (= 10000000000000000000 (x846 10 19)) (= (x846 10 36) 1000000000000000000000000000000000000) (= (x846 10 40) 10000000000000000000000000000000000000000) (= 1000 (x846 10 3)) (= (x846 10 32) 100000000000000000000000000000000) (= (x846 10 73) 10000000000000000000000000000000000000000000000000000000000000000000000000) (= (x846 10 53) 100000000000000000000000000000000000000000000000000000) (= (x846 10 29) 100000000000000000000000000000) (= (x846 10 48) 1000000000000000000000000000000000000000000000000) (= 1000000000000000000000000 (x846 10 24)) (= (x846 10 71) 100000000000000000000000000000000000000000000000000000000000000000000000) (= 100000000000000000000 (x846 10 20)) (= (x846 10 23) 100000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000000 (x846 10 65)) (= 10000000000000000000000000000000000000000000 (x846 10 43)) (= 1000000000000 (x846 10 12)) (= 100000000000000000000000000000000000000000000000000000000000000 (x846 10 62)) (= 10000000000000000000000000000000000000000000000000000000 (x846 10 55)) (= (x846 10 74) 100000000000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000 (x846 10 58)) (= 100000000000000000000000000000000000000000000000000000000000000000000000000000 (x846 10 77)) (= (x846 10 33) 1000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000 (x846 10 51)) (= (x846 10 46) 10000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000000000000 (x846 10 76)) (= 10 (x846 10 1)) (= 100000000000000000000000000000000000000000000000000 (x846 10 50)) (= (x846 10 10) 10000000000) (= (x846 10 39) 1000000000000000000000000000000000000000) (= (x846 10 61) 10000000000000000000000000000000000000000000000000000000000000) (= 100000000 (x846 10 8)) (= (x846 10 25) 10000000000000000000000000) (= (x846 10 66) 1000000000000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000 (x846 10 28)) (= 10000000000000000000000000000000000000000000000000000000000000000 (x846 10 64)) (= (x846 10 63) 1000000000000000000000000000000000000000000000000000000000000000) (= (x846 10 54) 1000000000000000000000000000000000000000000000000000000) (= (x846 10 0) 1) (= 100000000000000000 (x846 10 17)) (= 1000000000000000000000000000000000000000000000000000000000000000000000000 (x846 10 72)) (= (x846 10 13) 10000000000000) (= (x846 10 67) 10000000000000000000000000000000000000000000000000000000000000000000) (= (x846 10 44) 100000000000000000000000000000000000000000000) (= (x846 10 75) 1000000000000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000 (x846 10 42)) (= 100000000000000000000000000000000000000000000000000000000 (x846 10 56)) (= (x846 10 30) 1000000000000000000000000000000) (= (x846 10 21) 1000000000000000000000) (= 10000000000000000000000000000000000 (x846 10 34)) (= 100000000000000000000000000000000000000000000000000000000000000000000 (x846 10 68)) (= 1000000000000000000000000000000000000000000000000000000000 (x846 10 57)) (= 10000000000000000000000000000000000000000000000000000000000000000000000 (x846 10 70)) (= (x846 10 9) 1000000000) (= 100000000000000000000000000000000000000 (x846 10 38)) (= 1000000 (x846 10 6)) (= 1000000000000000000000000000000000000000000000000000000000000000000000 (x846 10 69)) (= (x846 10 11) 100000000000) (= 100000 (x846 10 5))))
(assert (not (= (x701 x28 52) 72057594037927936)))
(assert (not (= 1461501637330902918203684832716283019655932542976 (+ 3 x969))))
(assert (=> (<= x806 10000) (not (= x806 (x701 x990 52)))))
(assert (not (= 97250886131833805217759495634388081419703557252615901133360390455399389593600 (x701 x990 52))))
(assert (not (= (+ 8 x969) 115792089237316195423570985008687907853269984665640564039457584007913129634935)))
(assert (x161 x605))
(assert (x161 x60))
(assert (=> (>= 10000 x806) (not (= (x701 x546 54) x806))))
(assert (not (= (x701 x452 x467) 340282366920938463463374607431768211455)))
(assert (not (= (+ x969 2) (+ 3 x969))))
(assert (not (= (+ x969 4) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x161 x636))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (+ 8 x969))))
(assert (not (= (+ x969 7) (+ x969 3))))
(assert (x161 x398))
(assert (= x681 (and x84 x308)))
(assert (not (= (x701 x990 52) 1142400387)))
(assert (not (= 72057594037927936 (x701 x452 x467))))
(assert (= (or x681 x270) x783))
(assert (x161 x1020))
(assert (not (= (+ x969 5) 1118877564)))
(assert (not (= 576460752303423488 (x701 x28 52))))
(assert (x161 x775))
(assert (not (= (+ 9 x339) 1208907372870555465154560)))
(assert (not (= 500000000000000000000000000 (+ x969 2))))
(assert (x161 x411))
(assert (not (= 576460752303423488 (+ x969 4))))
(assert (= (or x676 x509) x698))
(assert (= (and x567 (not x448)) x206))
(assert (= (x75 x6 212) (div x6 6582018229284824168619876730229402019930943462534319453394436096)))
(assert (not (= (+ x969 2) (x701 x730 53))))
(assert (= x270 (and x683 x132)))
(assert (not (= 18446744073709551615 (+ x969 6))))
(assert (=> (<= x441 10000) (not (= x441 (x701 x28 52)))))
(assert (x161 x730))
(assert (x161 x437))
(assert (not (= 54940573406046109056602222415596668683460243721328594580962599660119180443648 (x701 x730 53))))
(check-sat)
(exit)