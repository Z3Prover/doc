(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x13 () Int)
(declare-fun x9 () Int)
(declare-fun x146 () Bool)
(declare-fun x137 () Int)
(declare-fun x64 () Bool)
(declare-fun x53 (Int) Int)
(declare-fun x124 () Int)
(declare-fun x34 () Bool)
(declare-fun x102 () Int)
(declare-fun x123 () Int)
(declare-fun x91 () Bool)
(declare-fun x31 () Int)
(declare-fun x25 () Bool)
(declare-fun x136 () Bool)
(declare-fun x135 () Int)
(declare-fun x63 () Int)
(declare-fun x147 () Bool)
(declare-fun x15 () Int)
(declare-fun x97 () Int)
(declare-fun x54 () Int)
(declare-fun x21 () Bool)
(declare-fun x96 () Int)
(declare-fun x10 () Int)
(declare-fun x140 (Int Int) Int)
(declare-fun x87 () Bool)
(declare-fun x40 () Int)
(declare-fun x17 () Bool)
(declare-fun x60 (Int) Int)
(declare-fun x7 () Bool)
(declare-fun x144 () Int)
(declare-fun x67 () Bool)
(declare-fun x35 () Int)
(declare-fun x1 () Bool)
(declare-fun x129 () Int)
(declare-fun x122 () Int)
(declare-fun x42 () Int)
(declare-fun x20 () Int)
(declare-fun x119 () Bool)
(declare-fun x150 () Int)
(declare-fun x28 () Bool)
(declare-fun x92 () Int)
(declare-fun x61 () Int)
(declare-fun x84 () Int)
(declare-fun x90 () Bool)
(declare-fun x76 () Int)
(declare-fun x113 () Bool)
(declare-fun x131 () Int)
(declare-fun x62 () Int)
(declare-fun x70 () Bool)
(declare-fun x110 () Bool)
(declare-fun x77 () Bool)
(declare-fun x93 () Int)
(declare-fun x103 () Int)
(declare-fun x74 () Int)
(declare-fun x133 () Bool)
(declare-fun x152 () Int)
(declare-fun x109 () Int)
(declare-fun x86 (Int Int) Int)
(declare-fun x44 () Bool)
(declare-fun x48 () Int)
(declare-fun x117 () Int)
(declare-fun x125 () Int)
(declare-fun x100 () Bool)
(declare-fun x142 () Int)
(declare-fun x127 () Int)
(declare-fun x66 () Bool)
(declare-fun x98 () Int)
(declare-fun x45 () Int)
(declare-fun x58 () Int)
(declare-fun x29 () Int)
(declare-fun x14 () Int)
(declare-fun x5 () Int)
(declare-fun x106 () Bool)
(declare-fun x107 () Bool)
(declare-fun x85 (Int) Int)
(declare-fun x73 () Int)
(declare-fun x111 () Int)
(declare-fun x12 () Int)
(declare-fun x79 () Bool)
(declare-fun x33 () Int)
(declare-fun x18 () Bool)
(declare-fun x81 () Int)
(declare-fun x121 () Int)
(declare-fun x145 () Int)
(declare-fun x3 () Int)
(declare-fun x134 () Bool)
(declare-fun x52 () Int)
(declare-fun x95 () Int)
(declare-fun x104 () Int)
(declare-fun x37 () Int)
(declare-fun x19 (Int) Int)
(declare-fun x51 () Bool)
(declare-fun x56 () Int)
(declare-fun x39 () Int)
(declare-fun x65 () Bool)
(declare-fun x36 () Bool)
(declare-fun x138 () Bool)
(declare-fun x38 () Bool)
(declare-fun x132 () Bool)
(declare-fun x151 () Bool)
(declare-fun x69 () Bool)
(declare-fun x47 (Int) Int)
(declare-fun x24 (Int) Int)
(declare-fun x120 () Bool)
(declare-fun x139 () Bool)
(declare-fun x71 () Bool)
(declare-fun x27 () Bool)
(declare-fun x148 () Bool)
(declare-fun x88 () Int)
(declare-fun x16 () Bool)
(declare-fun x149 () Int)
(declare-fun x115 (Int) Int)
(declare-fun x22 () Int)
(declare-fun x80 () Int)
(declare-fun x68 () Bool)
(declare-fun x82 (Int) Int)
(declare-fun x75 () Int)
(declare-fun x32 () Bool)
(declare-fun x112 () Int)
(declare-fun x43 () Int)
(declare-fun x118 () Int)
(declare-fun x83 () Int)
(define-fun x154 ((x78 Int)) Int (ite (and (<= 0 x78) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x78)) x78 (- x78 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x94 ((x78 Int)) Int (ite (and (> 0 x78) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x78)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x78) x78))
(define-fun x41 ((x6 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x6) (<= 0 x6)))
(define-fun x8 ((x6 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x6) (<= 0 x6)))
(define-fun x59 ((x6 Int)) Bool (and (= (x140 x6 115792089237316195423570985008687907853269984665640564039457584007913129639935) x6) (= (x140 115792089237316195423570985008687907853269984665640564039457584007913129639935 x6) x6)))
(define-fun x114 ((x6 Int)) Bool (and (= 0 (x140 x6 0)) (= (x140 0 x6) 0)))
(define-fun x89 ((x6 Int)) Bool (= (x140 x6 x6) x6))
(define-fun x141 ((x6 Int)) Bool (and (x89 x6) (x114 x6) (x59 x6)))
(define-fun x108 ((x6 Int) (x72 Int)) Bool (= (x140 x72 x6) (x140 x6 x72)))
(define-fun x105 ((x6 Int) (x72 Int)) Bool (and (=> (<= 0 x6) (>= x6 (x140 x6 x72))) (>= (x140 x6 x72) 0) (=> (>= x72 0) (<= (x140 x6 x72) x72))))
(define-fun x143 ((x6 Int) (x72 Int)) Bool (and (x105 x6 x72) (x108 x6 x72)))
(define-fun x30 ((x6 Int)) Bool (= (mod x6 2) (x140 x6 1)))
(define-fun x11 ((x6 Int)) Bool (and (x143 x6 1) (x30 x6)))
(define-fun x4 ((x6 Int)) Bool (= (mod x6 128) (x140 x6 127)))
(define-fun x46 ((x6 Int)) Bool (and (x143 x6 127) (x4 x6)))
(define-fun x128 ((x101 Int)) Int (ite (= 128 x101) x131 (x53 x101)))
(define-fun x55 ((x101 Int)) Int (ite (= x101 160) x43 (x19 x101)))
(define-fun x57 ((x101 Int)) Int (ite (= 160 x101) x150 (x19 x101)))
(define-fun x49 ((x101 Int)) Int (ite (= 192 x101) x137 (x55 x101)))
(define-fun x130 ((x101 Int)) Int (ite x25 (x19 x101) (ite x134 (ite x136 (x55 x101) (x49 x101)) (x57 x101))))
(define-fun x26 ((x101 Int)) Int (ite (= x101 x145) 32 (x85 x101)))
(define-fun x99 ((x101 Int)) Int (ite (= x101 x124) x20 (x26 x101)))
(define-fun x2 ((x101 Int)) Int (ite (= x29 x101) x83 (x99 x101)))
(define-fun x116 ((x101 Int)) Int (ite (= x101 x33) x31 (x2 x101)))
(define-fun x153 ((x101 Int)) Int (ite (= x84 x101) x54 (x116 x101)))
(define-fun x50 ((x101 Int)) Int (ite (= x75 x101) x117 (x153 x101)))
(define-fun x23 ((x101 Int)) Int (ite x32 (x153 x101) (ite x66 (x116 x101) (ite x132 (x2 x101) (ite x34 (x99 x101) (x50 x101))))))
(define-fun x126 ((x101 Int)) Int (ite (= x135 x101) 0 (x23 x101)))
(assert (= (=> (and (= (x130 256) x117) (= x110 (not (> x20 128))) (= (x154 (+ 96 x29)) x75)) (and (=> (= x97 128) x16) x110)) x77))
(assert (x141 127))
(assert (x141 x76))
(assert (x8 x83))
(assert (not (= (+ 1 x102) 2376452955)))
(assert (not (= (x82 1) 2376452955)))
(assert (x8 x97))
(assert (x8 x12))
(assert (= (or x146 x134 x25) x17))
(assert (not (= (x82 1) 3337024914)))
(assert (x8 x112))
(assert (= (and x1 x7) x38))
(assert (= x151 (=> (and (= x137 (x115 x48)) (= x79 (not (> x109 224)))) (and x79 x68))))
(assert (x8 x52))
(assert (x8 x42))
(assert (x8 x129))
(assert (x8 x10))
(assert (x8 x131))
(assert (x8 x137))
(assert (not (= 826074471 (x82 1))))
(assert (x141 1))
(assert (not (= (x82 1) 1)))
(assert (x8 x149))
(assert (not (= 2495578189 (+ 1 x102))))
(assert (x11 x45))
(assert (x8 x39))
(assert (not (= 3017275065 (+ x102 1))))
(assert (= (x19 256) 0))
(assert (= (x19 160) 0))
(assert (x8 x96))
(assert (x141 x45))
(assert (x8 x56))
(assert (x8 x58))
(assert (x8 x76))
(assert (= (and x44 x107) x51))
(assert (x8 x103))
(assert (x8 x9))
(assert (x8 x73))
(assert (= (or x32 x51 x132 x66 x34) x106))
(assert (x8 x124))
(assert (= x132 (and (not x7) x1)))
(assert (x8 x54))
(assert (x8 x122))
(assert (= x148 (and x28 x87)))
(assert (= (and x65 x67) x25))
(assert (not (= 2514000705 (+ 1 x102))))
(assert (x8 x98))
(assert (x8 x62))
(assert (=> (>= 10000 x5) (not (= x5 (x82 1)))))
(assert (= x113 (=> (and (and (<= 0 x149) (not (= x12 117300739)) (<= 0 x74) (not (= x12 157198259)) (>= 1461501637330902918203684832716283019655932542975 x149) (= 404098525 x12) (not (= x5 x142)) (<= x149 1461501637330902918203684832716283019655932542975) (< x12 826074471) (= true x70) x71 (< 0 x14) (<= x144 1461501637330902918203684832716283019655932542975) (= 0 x98) (<= x58 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x3) (= x91 false) (<= 0 x122) (= x122 (x47 x142)) (<= 0 x56) (> x142 0) (>= x3 0) (= x3 x35) (<= 0 x92) (< 0 x5) (= x121 2514000705) (>= 1461501637330902918203684832716283019655932542975 x56) (= x74 x37) (>= 1461501637330902918203684832716283019655932542975 x5) (<= 0 x149) (>= 1461501637330902918203684832716283019655932542975 x74) (<= 0 x58) (= (x47 x5) x92) (<= x142 1461501637330902918203684832716283019655932542975) (>= x144 0) (= x27 (> (x60 x5) 0)) x27 (= x71 (< 0 (x60 x142))) (= (x60 x5) x14) (= x133 false) (= false x100) (= 0 x152)) (and (not (< x63 2376452955)) (and (> x42 3) (= (<= x42 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (= (x154 (+ x131 31)) x112) (= 0 x152) (>= x149 0) (= x39 x35) (not (= x95 x13)) (<= 0 x127) (<= 0 x40) (= x13 (ite (> 32 x131) 1 0)) (= 2514000705 x63) (= (div x112 32) x81) (= x95 (x140 1 x45)) (< x63 3337024914) (not (= 2376452955 x63)) (= x52 (x60 x142)) (= (= x131 0) x65) (>= 1461501637330902918203684832716283019655932542975 x127) (>= 1461501637330902918203684832716283019655932542975 x40) (= (div x45 2) x76) (= (x154 (+ x73 32)) x15) (< x63 3017275065) (< 0 x52) (= x73 (mod (* 32 x81) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x149 1461501637330902918203684832716283019655932542975) (not (> 4 x42)) (= (ite (> x95 0) x76 (x140 127 x76)) x131) (= x37 x127) (not (= x63 2495578189)) (= (x154 (+ 128 x15)) x145))) (and (=> (and (= x104 x125) x65) x36) (=> (and (not x65) (= (> x131 31) x21)) (and (=> (and (not x21) (and (= x150 (mod (* 256 x129) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x129 (div x45 256)) (= x104 x125))) x36) (=> (and x21 (and (= (x154 (+ 160 x131)) x109) (= (x115 x102) x43) (= x28 (> x109 192)) (= x102 (x82 1)) (= (+ 1 x102) x48))) (and (=> x28 x151) (=> (not x28) x68)))))))))
(assert (= (and x67 (not x65)) x139))
(assert (x8 x3))
(assert (= 0 (x19 224)))
(assert (= (and x17 (not x119)) x34))
(assert (= x146 (and x139 (not x21))))
(assert (x8 x92))
(assert (not (= 2514000705 (x82 1))))
(assert (not (= (x82 1) 1461501637330902918203684832716283019655932542975)))
(assert (not (= 404098525 (+ x102 1))))
(assert (x8 x142))
(assert (x8 x74))
(assert (not (= (x82 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x46 x76))
(assert (= (=> (and (or (not x138) (and (= (x154 (+ x20 x29)) x135) x138)) (= x138 (> x97 x20))) x90) x16))
(assert (x8 x95))
(assert (x8 x40))
(assert (x8 x13))
(assert (= (or x136 x148) x134))
(assert (= 0 (x19 192)))
(assert (x8 x144))
(assert (x8 x45))
(assert (x8 x61))
(assert (= x66 (and x38 (not x120))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ 1 x102))))
(assert (x8 x118))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 1 x102))))
(assert (=> (>= 10000 x5) (not (= x5 (+ 1 x102)))))
(assert (x8 x14))
(assert (= (and x17 x119) x1))
(assert (x8 x127))
(assert (x8 x22))
(assert (x8 x63))
(assert (= (and x44 (not x107)) x32))
(assert (= x68 (=> (= x104 1) x36)))
(assert (x8 x152))
(assert (= x67 true))
(assert (x8 x43))
(assert (not (= (+ x102 1) 157198259)))
(assert (x8 x111))
(assert (x8 x84))
(assert (x8 x5))
(assert (not (= (+ 1 x102) 826074471)))
(assert (not (= (x82 1) 157198259)))
(assert (x8 x93))
(assert (x8 x35))
(assert (x8 x33))
(assert (= x18 (and x138 x106)))
(assert (= x44 (and x38 x120)))
(assert (x8 x123))
(assert (x8 x81))
(assert (x8 x88))
(assert (not (= 3337024914 (+ x102 1))))
(assert (x8 x135))
(assert (= x36 (=> (and (= (x154 (+ 32 x124)) x29) (= (x128 128) x20) (= x119 (> x20 0)) (= (x154 (+ 32 x145)) x124)) (and (=> (and (not x119) (= 0 x97)) x16) (=> (and x119 (and (= x83 (x130 160)) (= (> x20 32) x7))) (and (=> (and x7 (and (= x33 (x154 (+ x29 32))) (= (< 64 x20) x120) (= (x130 192) x31))) (and (=> (and x120 (and (= (x130 224) x54) (= x107 (< 96 x20)) (= x84 (x154 (+ x29 64))))) (and (=> (and (= x97 96) (not x107)) x16) (=> x107 x77))) (=> (and (= x97 64) (not x120)) x16))) (=> (and (= 32 x97) (not x7)) x16)))))))
(assert (not (= (x82 1) 404098525)))
(assert (= x136 (and (not x28) x87)))
(assert (x8 x80))
(assert (x8 x125))
(assert (not (= (x82 1) 2495578189)))
(assert (x41 x102))
(assert (x8 x121))
(assert (not x113))
(assert (x8 x29))
(assert (x8 x20))
(assert (not (= 3017275065 (x82 1))))
(assert (x8 x37))
(assert (not (= (+ x102 1) (x82 1))))
(assert (x8 x104))
(assert (x8 x145))
(assert (not (= 117300739 (x82 1))))
(assert (not (= 1 (+ x102 1))))
(assert (x8 x117))
(assert (x8 x109))
(assert (=> (>= 10000 x142) (not (= (+ 1 x102) x142))))
(assert (= (and x139 x21) x87))
(assert (x8 x15))
(assert (x41 x5))
(assert (x8 x75))
(assert (= (or x18 x69) x147))
(assert (= (and x106 (not x138)) x69))
(assert (= x90 (=> (and (and (not (= x88 117300739)) (<= x149 1461501637330902918203684832716283019655932542975) (>= x118 0) (<= x3 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x118) (<= 0 x149) (not (= 157198259 x88)) (= (ite (= 0 x145) x104 (ite (= x145 32) x22 (ite (= 64 x145) x145 (ite x69 (x23 x145) (x126 x145))))) x10) (= x123 (x60 x5)) (> 826074471 x88) (< 0 x123) (= x118 x37) (<= 0 x103) (<= x103 1461501637330902918203684832716283019655932542975) (= x152 0) (= x61 x3) (= x88 404098525) (<= 0 x3)) (and (= x39 x62) (= x61 x80) (= x96 x80) (= x64 (= x96 x62)))) x64)))
(assert (x8 x150))
(assert (x41 x142))
(assert (=> (>= 10000 x142) (not (= x142 (x82 1)))))
(assert (not (= 117300739 (+ x102 1))))
(assert (x8 x31))
(check-sat)
(exit)