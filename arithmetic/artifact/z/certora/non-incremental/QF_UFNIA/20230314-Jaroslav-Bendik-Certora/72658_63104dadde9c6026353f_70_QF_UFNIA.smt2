(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x65 () Int)
(declare-fun x48 () Int)
(declare-fun x43 () Int)
(declare-fun x54 () Int)
(declare-fun x42 () Int)
(declare-fun x90 () Int)
(declare-fun x106 () Int)
(declare-fun x41 () Int)
(declare-fun x50 (Int) Int)
(declare-fun x99 () Int)
(declare-fun x64 () Int)
(declare-fun x108 () Int)
(declare-fun x77 () Int)
(declare-fun x116 () Int)
(declare-fun x47 () Bool)
(declare-fun x17 () Int)
(declare-fun x13 () Int)
(declare-fun x16 () Int)
(declare-fun x80 () Int)
(declare-fun x36 () Bool)
(declare-fun x40 (Int Int) Int)
(declare-fun x22 () Bool)
(declare-fun x49 () Int)
(declare-fun x44 () Int)
(declare-fun x92 () Int)
(declare-fun x73 () Int)
(declare-fun x81 () Int)
(declare-fun x61 () Int)
(declare-fun x38 () Int)
(declare-fun x112 () Int)
(declare-fun x107 () Int)
(declare-fun x18 () Int)
(declare-fun x23 () Int)
(declare-fun x74 () Bool)
(declare-fun x78 () Bool)
(declare-fun x39 () Int)
(declare-fun x32 () Int)
(declare-fun x82 () Int)
(declare-fun x34 (Int) Int)
(declare-fun x35 () Int)
(declare-fun x5 () Int)
(declare-fun x93 () Int)
(declare-fun x21 () Int)
(declare-fun x120 () Int)
(declare-fun x62 (Int) Int)
(declare-fun x63 () Bool)
(declare-fun x55 () Int)
(declare-fun x11 () Int)
(declare-fun x33 () Int)
(declare-fun x29 () Bool)
(declare-fun x6 () Int)
(declare-fun x14 () Int)
(declare-fun x75 () Int)
(declare-fun x53 () Int)
(declare-fun x1 () Int)
(declare-fun x57 () Int)
(declare-fun x51 (Int Int) Int)
(declare-fun x103 () Int)
(declare-fun x88 () Int)
(declare-fun x102 () Int)
(declare-fun x68 () Int)
(declare-fun x19 () Int)
(declare-fun x104 (Int Int) Int)
(declare-fun x110 () Int)
(declare-fun x15 () Int)
(declare-fun x113 () Int)
(declare-fun x56 () Int)
(declare-fun x7 () Int)
(declare-fun x109 () Int)
(declare-fun x24 () Int)
(declare-fun x95 () Int)
(declare-fun x30 () Int)
(declare-fun x20 (Int) Int)
(declare-fun x70 () Bool)
(declare-fun x28 () Int)
(declare-fun x79 () Int)
(declare-fun x46 () Int)
(declare-fun x87 () Int)
(declare-fun x89 () Int)
(declare-fun x67 () Int)
(declare-fun x71 () Int)
(declare-fun x94 () Int)
(declare-fun x114 () Int)
(declare-fun x59 () Int)
(declare-fun x101 () Bool)
(declare-fun x85 (Int Int) Int)
(declare-fun x27 () Int)
(declare-fun x91 () Int)
(declare-fun x86 () Int)
(declare-fun x115 () Int)
(declare-fun x76 () Int)
(declare-fun x3 () Int)
(declare-fun x98 () Int)
(define-fun x97 ((x96 Int)) Int (ite (and (<= 0 x96) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96)) x96 (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x69 ((x96 Int)) Int (ite (and (> 0 x96) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x96)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x96) x96))
(define-fun x60 ((x4 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x4) (<= 0 x4)))
(define-fun x118 ((x4 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x4) (<= 0 x4)))
(define-fun x111 ((x4 Int)) Bool (and (= (x40 x4 115792089237316195423570985008687907853269984665640564039457584007913129639935) x4) (= (x40 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) x4)))
(define-fun x45 ((x4 Int)) Bool (and (= 0 (x40 x4 0)) (= (x40 0 x4) 0)))
(define-fun x72 ((x4 Int)) Bool (= (x40 x4 x4) x4))
(define-fun x2 ((x4 Int)) Bool (and (x72 x4) (x45 x4) (x111 x4)))
(define-fun x8 ((x4 Int) (x10 Int)) Bool (= (x40 x10 x4) (x40 x4 x10)))
(define-fun x58 ((x4 Int) (x10 Int)) Bool (and (=> (<= 0 x4) (>= x4 (x40 x4 x10))) (>= (x40 x4 x10) 0) (=> (>= x10 0) (<= (x40 x4 x10) x10))))
(define-fun x12 ((x4 Int) (x10 Int)) Bool (and (x58 x4 x10) (x8 x4 x10)))
(define-fun x31 ((x4 Int)) Bool (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (x51 x4 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (x51 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4))))
(define-fun x37 ((x4 Int)) Bool (and (= (x51 0 x4) x4) (= x4 (x51 x4 0))))
(define-fun x66 ((x4 Int)) Bool (= (x51 x4 x4) 0))
(define-fun x117 ((x4 Int)) Bool (and (x37 x4) (x31 x4) (x66 x4)))
(define-fun x121 ((x4 Int) (x10 Int)) Bool (= (x51 x10 x4) (x51 x4 x10)))
(define-fun x26 ((x4 Int) (x10 Int)) Bool (and (>= (+ x4 x10) (x51 x4 x10)) (<= 0 (x51 x4 x10))))
(define-fun x105 ((x4 Int) (x10 Int)) Bool (and (x26 x4 x10) (x121 x4 x10)))
(define-fun x83 ((x4 Int)) Bool (and (= (x85 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x85 x4 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x25 ((x4 Int)) Bool (and (= x4 (x85 x4 0)) (= x4 (x85 0 x4))))
(define-fun x52 ((x4 Int)) Bool (= x4 (x85 x4 x4)))
(define-fun x84 ((x4 Int)) Bool (and (x52 x4) (x83 x4) (x25 x4)))
(define-fun x9 ((x4 Int) (x10 Int)) Bool (= (x85 x4 x10) (x85 x10 x4)))
(define-fun x100 ((x4 Int) (x10 Int)) Bool (and (=> (<= 0 x10) (>= (x85 x4 x10) x10)) (=> (>= x4 0) (<= x4 (x85 x4 x10))) (>= (+ x10 x4) (x85 x4 x10))))
(define-fun x119 ((x4 Int) (x10 Int)) Bool (and (x9 x4 x10) (x100 x4 x10)))
(assert (x118 x110))
(assert (= x78 (and x29 x22)))
(assert (x118 x80))
(assert (x118 x38))
(assert (x60 x33))
(assert (x118 x42))
(assert (x118 x89))
(assert (x118 x3))
(assert (x118 x54))
(assert (x118 x68))
(assert (x118 x7))
(assert (x118 x32))
(assert (x118 x27))
(assert (= (or x78 x36) x47))
(assert (x118 x1))
(assert (= (and (not x29) x22) x36))
(assert (x118 x81))
(assert (x118 x44))
(assert (x118 x19))
(assert (x118 x115))
(assert (x118 x17))
(assert (x118 x87))
(assert (x118 x65))
(assert (x118 x112))
(assert (x118 x35))
(assert (x84 x61))
(assert (x118 x91))
(assert (x118 x73))
(assert (x118 x56))
(assert (x118 x61))
(assert (x118 x28))
(assert (x118 x99))
(assert (x118 x55))
(assert (x118 x94))
(assert (x118 x106))
(assert (x12 x53 x80))
(assert (x118 x67))
(assert (x118 x109))
(assert (x118 x18))
(assert (x118 x79))
(assert (x118 x49))
(assert (x118 x116))
(assert (x118 x33))
(assert (not x74))
(assert (x118 x90))
(assert (x118 x86))
(assert (x118 x95))
(assert (x2 x80))
(assert (x118 x93))
(assert (= x74 (=> (and (or (and (not x29) (and (= (x97 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x120) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x80) (= (mod (* x19 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x11) (= (x69 (- 2 x94)) x116) (= x110 (x69 (- 2 x93))) (= x99 x67) (= (mod (* x7 x116) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x113) (= (x69 (- 2 x106)) x27) (= (div x53 x89) x19) (= x89 (x40 x53 x80)) (= (x69 (- 0 x89)) x30) (= (mod (* x86 x44) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x13) (= x73 (x97 (+ x1 1))) (= x115 (mod (- x39 (ite (> x6 x38) 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x3 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x17) (= x6 (mod (* x18 x109) x53)) (= x7 (mod (* x35 x27) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x67 (mod (* x17 (x85 x56 x61)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x39 x120) (= (mod (* x19 x86) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x79) (= x49 (mod (* x110 x113) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x19 x13) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x68) (= (mod (* x7 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x94) (= x35 (mod (* x13 x32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x115 x73) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x61) (= x106 (mod (* x19 x35) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x69 (- x38 x6)) x15) (= x86 (x51 2 x23)) (= (div x15 x89) x56) (= x93 (mod (* x113 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x44 (x69 (- 2 x79))) (= x1 (div x30 x89)) (= x32 (x69 (- 2 x68))) (= x3 (x69 (- 2 x11))) (= x23 (mod (* 3 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and (and (= (div x38 x53) x55) (= x99 x55) (> x120 0)) x29)) (and (= x120 x95) (= (= x39 0) x29) (= (> (x62 x33) 0) x101) (>= 1461501637330902918203684832716283019655932542975 x33) x101 (< 0 x65) (= x41 x81) (= (x69 (- x103 x38)) x90) (= x75 x42) (= (mod (- x90 (ite (> x38 x103) 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x39) (= x109 x42) (> x33 0) (= x109 x46) (= x18 x81) (= (x62 x33) x65) (= x91 (x20 x33)) (= x92 x53) (= x38 (mod (* x18 x109) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x18 x21) (= x53 x120) (= (mod (* x18 x109) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x103) (= 1415856751 x82) (<= 0 x91))) x63)))
(assert (x105 x23 2))
(assert (x118 x46))
(assert (x118 x103))
(assert (x118 x15))
(assert (x118 x76))
(assert (x118 x41))
(assert (x118 x39))
(assert (x118 x16))
(assert (x118 x23))
(assert (x118 x120))
(assert (x119 x56 x61))
(assert (x118 x113))
(assert (x118 x75))
(assert (x118 x24))
(assert (x118 x53))
(assert (x2 x53))
(assert (x118 x13))
(assert (x118 x30))
(assert (x118 x21))
(assert (x118 x6))
(assert (= x63 (=> (and (= x99 x16) (and (= x57 x43) (= x108 x54) (= x14 x46) (= x107 x59) (= x92 x28) (= x112 x64) (= x77 x102) (= x76 x71) (= x57 x54) (= x76 x14) (= x59 x102) (= x112 x87) (= x98 x48) (= x48 (* x5 x43)) (= (div x98 x114) x77) (= x24 x88) (= x88 x114) (= x70 (= x64 x107)) (= x5 x71) (= x87 x16) (= x108 x21) (= x24 x28))) x70)))
(assert (x118 x11))
(assert (= true x22))
(assert (x118 x92))
(assert (x117 x23))
(assert (x117 2))
(assert (x118 x82))
(assert (x118 x14))
(assert (x118 x108))
(assert (x84 x56))
(check-sat)
(exit)