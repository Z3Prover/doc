(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x146 () Int)
(declare-fun x91 () Int)
(declare-fun x124 () Int)
(declare-fun x150 () Bool)
(declare-fun x25 () Int)
(declare-fun x149 () Bool)
(declare-fun x30 () Int)
(declare-fun x86 () Bool)
(declare-fun x122 () Int)
(declare-fun x46 () Int)
(declare-fun x118 () Bool)
(declare-fun x135 () Int)
(declare-fun x134 () Int)
(declare-fun x90 () Int)
(declare-fun x103 () Int)
(declare-fun x95 () Bool)
(declare-fun x140 () Int)
(declare-fun x51 () Int)
(declare-fun x147 () Int)
(declare-fun x101 () Bool)
(declare-fun x100 () Int)
(declare-fun x152 () Int)
(declare-fun x57 () Bool)
(declare-fun x138 (Int) Int)
(declare-fun x10 () Int)
(declare-fun x112 () Bool)
(declare-fun x93 () Int)
(declare-fun x49 () Bool)
(declare-fun x144 () Int)
(declare-fun x109 () Bool)
(declare-fun x12 () Bool)
(declare-fun x47 (Int Int) Int)
(declare-fun x78 () Int)
(declare-fun x59 (Int Int) Int)
(declare-fun x50 (Int Int) Int)
(declare-fun x114 () Int)
(declare-fun x82 () Bool)
(declare-fun x38 () Int)
(declare-fun x139 () Bool)
(declare-fun x23 () Int)
(declare-fun x133 () Int)
(declare-fun x64 () Int)
(declare-fun x143 () Int)
(declare-fun x119 () Bool)
(declare-fun x141 () Int)
(declare-fun x71 () Int)
(declare-fun x97 () Int)
(declare-fun x24 () Int)
(declare-fun x17 () Bool)
(declare-fun x151 () Int)
(declare-fun x117 () Int)
(declare-fun x128 () Bool)
(declare-fun x18 () Int)
(declare-fun x137 () Int)
(declare-fun x123 () Int)
(declare-fun x121 () Int)
(declare-fun x7 () Bool)
(declare-fun x29 () Int)
(declare-fun x44 () Int)
(declare-fun x113 () Bool)
(declare-fun x52 () Bool)
(declare-fun x39 () Int)
(declare-fun x68 () Int)
(declare-fun x111 () Bool)
(declare-fun x45 () Int)
(declare-fun x36 () Bool)
(declare-fun x110 () Int)
(declare-fun x145 () Int)
(declare-fun x41 () Bool)
(declare-fun x130 () Int)
(declare-fun x58 () Int)
(declare-fun x28 () Bool)
(declare-fun x127 () Bool)
(declare-fun x37 () Int)
(declare-fun x40 () Bool)
(declare-fun x65 () Int)
(declare-fun x148 () Bool)
(declare-fun x43 () Int)
(declare-fun x11 () Int)
(declare-fun x33 () Bool)
(declare-fun x92 () Int)
(declare-fun x2 (Int Int) Int)
(declare-fun x16 () Bool)
(declare-fun x106 (Int) Int)
(declare-fun x22 () Int)
(declare-fun x98 () Int)
(declare-fun x89 () Bool)
(declare-fun x4 () Bool)
(declare-fun x104 () Bool)
(declare-fun x73 () Int)
(declare-fun x69 () Bool)
(declare-fun x83 () Int)
(declare-fun x60 (Int) Int)
(declare-fun x126 () Int)
(declare-fun x94 () Bool)
(declare-fun x77 () Int)
(declare-fun x142 () Bool)
(declare-fun x102 () Bool)
(declare-fun x70 () Int)
(declare-fun x55 () Bool)
(declare-fun x136 () Int)
(declare-fun x74 () Bool)
(declare-fun x61 () Int)
(declare-fun x132 () Int)
(declare-fun x5 () Int)
(declare-fun x35 () Int)
(declare-fun x53 () Bool)
(declare-fun x15 () Bool)
(declare-fun x31 () Bool)
(declare-fun x66 () Int)
(declare-fun x99 () Int)
(declare-fun x20 () Int)
(declare-fun x120 () Int)
(declare-fun x13 () Int)
(declare-fun x27 (Int) Int)
(declare-fun x48 () Int)
(declare-fun x14 () Int)
(declare-fun x1 () Int)
(declare-fun x131 () Int)
(declare-fun x21 () Bool)
(declare-fun x153 () Int)
(declare-fun x154 () Int)
(declare-fun x107 () Int)
(declare-fun x6 () Bool)
(declare-fun x85 () Bool)
(declare-fun x129 () Bool)
(define-fun x79 ((x115 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x115) (>= x115 0)) x115 (- x115 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x26 ((x115 Int)) Int (ite (and (> 0 x115) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x115)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x115) x115))
(define-fun x32 ((x54 Int)) Bool (and (< x54 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x54)))
(define-fun x42 ((x54 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x54) (>= x54 0)))
(define-fun x84 ((x54 Int)) Bool (and (= (x59 x54 115792089237316195423570985008687907853269984665640564039457584007913129639935) x54) (= x54 (x59 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54))))
(define-fun x80 ((x54 Int)) Bool (and (= 0 (x59 x54 0)) (= 0 (x59 0 x54))))
(define-fun x108 ((x54 Int)) Bool (= x54 (x59 x54 x54)))
(define-fun x72 ((x54 Int)) Bool (and (x108 x54) (x80 x54) (x84 x54)))
(define-fun x8 ((x54 Int) (x9 Int)) Bool (= (x59 x9 x54) (x59 x54 x9)))
(define-fun x56 ((x54 Int) (x9 Int)) Bool (and (=> (<= 0 x9) (<= (x59 x54 x9) x9)) (=> (>= x54 0) (>= x54 (x59 x54 x9))) (>= (x59 x54 x9) 0)))
(define-fun x3 ((x54 Int) (x9 Int)) Bool (and (x8 x54 x9) (x56 x54 x9)))
(define-fun x34 ((x54 Int)) Bool (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54) (x2 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54) (x2 x54 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x76 ((x54 Int)) Bool (and (= x54 (x2 0 x54)) (= x54 (x2 x54 0))))
(define-fun x87 ((x54 Int)) Bool (= 0 (x2 x54 x54)))
(define-fun x75 ((x54 Int)) Bool (and (x87 x54) (x34 x54) (x76 x54)))
(define-fun x88 ((x54 Int) (x9 Int)) Bool (= (x2 x54 x9) (x2 x9 x54)))
(define-fun x81 ((x54 Int) (x9 Int)) Bool (and (>= (+ x54 x9) (x2 x54 x9)) (>= (x2 x54 x9) 0)))
(define-fun x125 ((x54 Int) (x9 Int)) Bool (and (x88 x54 x9) (x81 x54 x9)))
(define-fun x116 ((x54 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 x54 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54))))
(define-fun x19 ((x54 Int)) Bool (and (= (x50 x54 0) x54) (= x54 (x50 0 x54))))
(define-fun x62 ((x54 Int)) Bool (= x54 (x50 x54 x54)))
(define-fun x96 ((x54 Int)) Bool (and (x62 x54) (x19 x54) (x116 x54)))
(define-fun x105 ((x54 Int) (x9 Int)) Bool (= (x50 x9 x54) (x50 x54 x9)))
(define-fun x63 ((x54 Int) (x9 Int)) Bool (and (=> (>= x9 0) (<= x9 (x50 x54 x9))) (>= (+ x9 x54) (x50 x54 x9)) (=> (>= x54 0) (<= x54 (x50 x54 x9)))))
(define-fun x67 ((x54 Int) (x9 Int)) Bool (and (x105 x54 x9) (x63 x54 x9)))
(assert (x3 x136 x132))
(assert (x75 2))
(assert (x42 x151))
(assert (x42 x38))
(assert (x42 x136))
(assert (= x55 (or x95 x94)))
(assert (x42 x10))
(assert (x96 x30))
(assert (x42 x78))
(assert (= x17 (=> (and (= x49 x21) (= x52 x28) (= x89 x12) (= x49 x40) (= x109 x21) (= x129 x82) (= x109 (or x12 x129)) (= (= x28 x40) x53)) x53)))
(assert (x42 x103))
(assert (x42 x143))
(assert (x42 x153))
(assert (x42 x130))
(assert (x42 x48))
(assert (= x113 (=> (and (= (x60 x61) x154) (>= 1461501637330902918203684832716283019655932542975 x61) (> x61 0) (= x10 x83) (= x51 x83) (> x154 0) (= x114 1415856751) (= (mod (* x13 x83) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x103) (= x136 x78) x7 (= x13 x151) (= (x26 (- x43 x103)) x122) (= x43 (mod (* x13 x83) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x98 (x27 x61)) (= x1 (mod (- x122 (ite (< x43 x103) 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x78 x137) (= x130 x136) (= (= 0 x1) x101) (= x51 x25) (= x77 x13) (= x7 (< 0 (x60 x61))) (= x151 x146) (>= x98 0)) (and (=> (and (= x119 (> x136 x1)) (not x101)) (and (=> (and (and (= x100 (mod (* x107 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x29 (mod (* x11 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x97 x110) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x134) (= x20 (mod (* x110 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x37 x68) (= x18 (div x136 x144)) (= (mod (- x1 (ite (< x103 x48) 1 0)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x135) (= x14 (div x5 x144)) (= (mod (* x18 x24) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x147) (= x70 (x79 (+ x14 1))) (= x93 (x26 (- 2 x147))) (= x23 (div x99 x144)) (= (mod (* x24 x93) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x140) (= x123 (x26 (- 2 x29))) (= (mod (* x45 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x110) (= x90 (x26 (- 2 x92))) (= (mod (* x13 x83) x136) x48) (= x30 (mod (* x135 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x134 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x92) (= x58 (mod (* x107 x143) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x26 (- 2 x124)) x45) (= (x79 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x136) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x132) (= x35 (mod (* x18 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x99 (x26 (- x103 x48))) (= (x26 (- 2 x100)) x143) (= x37 (mod (* (x50 x23 x30) x140) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x134 x90) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x24) (= x11 (x2 2 x35)) (= x5 (x26 (- 0 x144))) (= (mod (* x123 x11) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x107) (= x144 (x59 x136 x132)) (= (x26 (- 2 x20)) x97) (= x124 (mod (* x18 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x119) x16) (=> (not x119) x142))) (=> (and (= (< 0 x136) x69) x101) (and (=> (not x69) x142) (=> (and (and (= x68 x120) (= (div x103 x136) x120)) x69) x16)))))))
(assert (x42 x92))
(assert (x42 x90))
(assert (x42 x37))
(assert (x42 x91))
(assert (x42 x140))
(assert (x42 x123))
(assert (= (and x111 x101) x33))
(assert (= x149 (or x36 x41)))
(assert (x42 x20))
(assert (x42 x29))
(assert (x42 x124))
(assert (x42 x135))
(assert (x75 x35))
(assert (= (and x104 (not x150)) x36))
(assert (x42 x35))
(assert (x72 x136))
(assert (x42 x14))
(assert (x42 x1))
(assert (x125 x35 2))
(assert (x42 x11))
(assert (x42 x134))
(assert (= x142 (=> (= x150 true) x86)))
(assert (x42 x146))
(assert (x42 x154))
(assert (x42 x39))
(assert (x42 x70))
(assert (= x16 (=> (and (= x131 x68) (= x150 false)) x86)))
(assert (x42 x65))
(assert (= x127 (and x111 (not x101))))
(assert (= (=> (and (and (= x91 x22) (= (not x31) x6) (= x145 x10) (= x153 x145) (= x64 x117) (= x130 x64) (= (* x66 x73) x121) (= x77 x22) (= x150 x52) (= x82 (= x117 0)) (= x153 x126) (= x91 x44) (= 0 x39) (= x31 x82) (= x126 x66) (= x73 x44)) (or (and (and x4 (= false x118) (= x4 (not x85)) (= x85 x6) (= x89 x118)) (not x6)) (and (and (= x121 x71) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x38) (= x57 x89) (= x64 x65) (= x74 x6) (= x46 x141) (= x152 x133) (= x65 x46) x74 (= x152 (div x71 x141)) (= x57 (> x133 115792089237316195423570985008687907853269984665640564039457584007913129639935))) x6))) x17) x102))
(assert (x42 x93))
(assert (x96 x23))
(assert (x72 x132))
(assert (x42 x77))
(assert (= x15 (or x112 x139)))
(assert (x42 x68))
(assert (x42 x24))
(assert (x32 x61))
(assert (x42 x18))
(assert (x42 x120))
(assert (x42 x64))
(assert (not x113))
(assert (x42 x145))
(assert (x42 x25))
(assert (x42 x23))
(assert (x42 x51))
(assert (x42 x98))
(assert (= true x111))
(assert (x42 x144))
(assert (x42 x83))
(assert (x42 x45))
(assert (x42 x99))
(assert (x42 x61))
(assert (= x94 (and x119 x127)))
(assert (x42 x147))
(assert (= x128 (and x127 (not x119))))
(assert (x42 x5))
(assert (x42 x117))
(assert (x42 x114))
(assert (= (and x6 x149) x112))
(assert (x42 x131))
(assert (x42 x22))
(assert (x42 x30))
(assert (x42 x132))
(assert (= (or x55 x148) x104))
(assert (x42 x110))
(assert (x42 x13))
(assert (= (and x149 (not x6)) x139))
(assert (= x86 (=> (or x150 (not x150)) x102)))
(assert (x42 x122))
(assert (= (and x69 x33) x95))
(assert (= x41 (and x150 x104)))
(assert (x42 x107))
(assert (x42 x58))
(assert (x42 x43))
(assert (= x148 (or (and x33 (not x69)) x128)))
(assert (x42 x137))
(assert (x42 x100))
(assert (x42 x97))
(assert (x67 x23 x30))
(check-sat)
(exit)