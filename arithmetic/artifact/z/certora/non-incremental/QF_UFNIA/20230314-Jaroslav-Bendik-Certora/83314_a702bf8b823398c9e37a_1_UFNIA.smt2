(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x662 () Bool)
(declare-fun x403 () Int)
(declare-fun x817 () Int)
(declare-fun x470 () Int)
(declare-fun x578 (Int) Int)
(declare-fun x5 () Int)
(declare-fun x192 () Bool)
(declare-fun x248 () Bool)
(declare-fun x279 () Bool)
(declare-fun x10 () Int)
(declare-fun x95 () Int)
(declare-fun x552 () Int)
(declare-fun x135 () Int)
(declare-fun x813 () Int)
(declare-fun x68 () Int)
(declare-fun x645 () Int)
(declare-fun x86 () Int)
(declare-fun x449 () Int)
(declare-fun x38 () Int)
(declare-fun x376 () Int)
(declare-fun x303 () Int)
(declare-fun x750 () Int)
(declare-fun x472 () Int)
(declare-fun x509 () Int)
(declare-fun x37 () Int)
(declare-fun x853 () Bool)
(declare-fun x583 () Bool)
(declare-fun x489 () Int)
(declare-fun x629 () Int)
(declare-fun x162 () Int)
(declare-fun x24 () Int)
(declare-fun x707 () Bool)
(declare-fun x743 () Int)
(declare-fun x328 () Bool)
(declare-fun x229 () Bool)
(declare-fun x322 () Int)
(declare-fun x343 () Bool)
(declare-fun x393 () Int)
(declare-fun x787 () Int)
(declare-fun x356 () Int)
(declare-fun x211 () Int)
(declare-fun x221 () Bool)
(declare-fun x860 () Bool)
(declare-fun x797 () Bool)
(declare-fun x255 () Bool)
(declare-fun x576 () Int)
(declare-fun x795 () Int)
(declare-fun x27 () Int)
(declare-fun x759 () Int)
(declare-fun x132 () Int)
(declare-fun x367 () Bool)
(declare-fun x216 () Bool)
(declare-fun x480 () Bool)
(declare-fun x222 () Int)
(declare-fun x737 (Int) Int)
(declare-fun x815 () Int)
(declare-fun x414 () Int)
(declare-fun x490 () Bool)
(declare-fun x861 () Bool)
(declare-fun x819 () Int)
(declare-fun x548 () Int)
(declare-fun x669 () Bool)
(declare-fun x277 () Int)
(declare-fun x175 () Bool)
(declare-fun x97 () Int)
(declare-fun x812 () Bool)
(declare-fun x532 () Int)
(declare-fun x157 () Int)
(declare-fun x620 () Bool)
(declare-fun x419 () Int)
(declare-fun x574 () Bool)
(declare-fun x274 () Bool)
(declare-fun x379 () Int)
(declare-fun x570 () Int)
(declare-fun x89 () Int)
(declare-fun x774 () Int)
(declare-fun x514 () Int)
(declare-fun x433 () Int)
(declare-fun x770 () Int)
(declare-fun x579 () Bool)
(declare-fun x171 () Bool)
(declare-fun x587 () Int)
(declare-fun x398 () Int)
(declare-fun x510 () Bool)
(declare-fun x61 () Int)
(declare-fun x478 () Int)
(declare-fun x69 () Int)
(declare-fun x342 () Bool)
(declare-fun x378 () Int)
(declare-fun x115 () Int)
(declare-fun x613 () Int)
(declare-fun x260 () Int)
(declare-fun x442 () Int)
(declare-fun x560 () Int)
(declare-fun x99 () Bool)
(declare-fun x706 () Int)
(declare-fun x183 () Int)
(declare-fun x820 () Bool)
(declare-fun x845 () Int)
(declare-fun x538 () Int)
(declare-fun x778 () Int)
(declare-fun x809 () Bool)
(declare-fun x6 () Int)
(declare-fun x666 () Int)
(declare-fun x775 () Int)
(declare-fun x167 () Bool)
(declare-fun x251 () Bool)
(declare-fun x604 () Int)
(declare-fun x655 () Bool)
(declare-fun x401 () Int)
(declare-fun x420 () Int)
(declare-fun x231 () Int)
(declare-fun x339 () Int)
(declare-fun x763 () Int)
(declare-fun x540 () Int)
(declare-fun x438 () Bool)
(declare-fun x615 () Bool)
(declare-fun x439 () Int)
(declare-fun x710 () Int)
(declare-fun x412 () Int)
(declare-fun x600 () Bool)
(declare-fun x59 () Int)
(declare-fun x738 () Bool)
(declare-fun x325 () Int)
(declare-fun x756 () Int)
(declare-fun x14 () Int)
(declare-fun x275 () Bool)
(declare-fun x822 () Int)
(declare-fun x330 () Bool)
(declare-fun x606 () Int)
(declare-fun x782 () Bool)
(declare-fun x793 () Bool)
(declare-fun x498 () Bool)
(declare-fun x671 () Int)
(declare-fun x637 () Int)
(declare-fun x811 () Int)
(declare-fun x515 () Int)
(declare-fun x380 () Int)
(declare-fun x161 () Int)
(declare-fun x711 () Int)
(declare-fun x15 () Int)
(declare-fun x227 () Int)
(declare-fun x362 (Int) Int)
(declare-fun x495 () Int)
(declare-fun x565 () Int)
(declare-fun x535 () Int)
(declare-fun x677 () Int)
(declare-fun x841 () Int)
(declare-fun x806 () Int)
(declare-fun x676 () Int)
(declare-fun x374 () Int)
(declare-fun x447 () Int)
(declare-fun x243 () Int)
(declare-fun x200 () Bool)
(declare-fun x592 () Int)
(declare-fun x695 (Int Int) Int)
(declare-fun x608 () Int)
(declare-fun x317 () Bool)
(declare-fun x45 () Int)
(declare-fun x411 () Int)
(declare-fun x146 () Int)
(declare-fun x801 () Int)
(declare-fun x70 () Int)
(declare-fun x201 () Int)
(declare-fun x561 () Int)
(declare-fun x429 () Bool)
(declare-fun x346 () Int)
(declare-fun x713 () Int)
(declare-fun x363 () Int)
(declare-fun x31 () Int)
(declare-fun x642 () Int)
(declare-fun x241 () Int)
(declare-fun x752 () Int)
(declare-fun x786 () Int)
(declare-fun x536 () Int)
(declare-fun x198 () Int)
(declare-fun x196 () Int)
(declare-fun x168 () Int)
(declare-fun x521 () Int)
(declare-fun x261 () Int)
(declare-fun x139 () Int)
(declare-fun x656 () Int)
(declare-fun x74 () Int)
(declare-fun x477 () Int)
(declare-fun x327 () Int)
(declare-fun x721 () Int)
(declare-fun x630 () Int)
(declare-fun x172 () Int)
(declare-fun x142 () Bool)
(declare-fun x421 () Int)
(declare-fun x262 () Int)
(declare-fun x407 () Bool)
(declare-fun x375 () Bool)
(declare-fun x112 () Int)
(declare-fun x831 () Int)
(declare-fun x441 () Int)
(declare-fun x727 () Int)
(declare-fun x568 () Int)
(declare-fun x72 () Int)
(declare-fun x354 () Bool)
(declare-fun x155 () Int)
(declare-fun x149 () Int)
(declare-fun x408 () Int)
(declare-fun x23 () Int)
(declare-fun x866 () Int)
(declare-fun x103 () Int)
(declare-fun x740 () Int)
(declare-fun x647 () Int)
(declare-fun x850 () Int)
(declare-fun x75 () Int)
(declare-fun x253 () Int)
(declare-fun x731 () Int)
(declare-fun x81 () Int)
(declare-fun x494 () Int)
(declare-fun x836 () Bool)
(declare-fun x102 () Int)
(declare-fun x527 () Int)
(declare-fun x622 () Int)
(declare-fun x807 () Int)
(declare-fun x452 () Bool)
(declare-fun x415 () Int)
(declare-fun x522 () Int)
(declare-fun x32 () Int)
(declare-fun x754 () Int)
(declare-fun x508 () Int)
(declare-fun x2 () Int)
(declare-fun x768 () Int)
(declare-fun x493 () Bool)
(declare-fun x611 () Int)
(declare-fun x44 () Int)
(declare-fun x4 () Int)
(declare-fun x804 () Int)
(declare-fun x649 () Bool)
(declare-fun x73 () Int)
(declare-fun x616 () Int)
(declare-fun x113 () Int)
(declare-fun x423 () Int)
(declare-fun x661 (Int) Int)
(declare-fun x733 () Bool)
(declare-fun x143 () Bool)
(declare-fun x580 () Bool)
(declare-fun x326 () Int)
(declare-fun x818 () Int)
(declare-fun x469 () Int)
(declare-fun x33 () Int)
(declare-fun x688 () Int)
(declare-fun x244 () Bool)
(declare-fun x693 () Int)
(declare-fun x624 () Int)
(declare-fun x21 () Int)
(declare-fun x203 () Int)
(declare-fun x839 () Int)
(declare-fun x719 () Int)
(declare-fun x588 () Int)
(declare-fun x311 () Bool)
(declare-fun x572 () Int)
(declare-fun x212 () Int)
(declare-fun x437 () Bool)
(declare-fun x581 () Bool)
(declare-fun x644 () Int)
(declare-fun x77 () Int)
(declare-fun x757 () Int)
(declare-fun x282 () Int)
(declare-fun x668 () Int)
(declare-fun x352 () Int)
(declare-fun x288 () Bool)
(declare-fun x127 () Int)
(declare-fun x843 (Int) Int)
(declare-fun x298 () Bool)
(declare-fun x474 () Int)
(declare-fun x524 (Int) Int)
(declare-fun x823 () Bool)
(declare-fun x396 () Int)
(declare-fun x457 () Int)
(declare-fun x755 () Int)
(declare-fun x269 () Int)
(declare-fun x697 () Bool)
(declare-fun x553 () Int)
(declare-fun x174 () Int)
(declare-fun x129 () Int)
(declare-fun x790 () Bool)
(declare-fun x120 () Bool)
(declare-fun x195 () Int)
(declare-fun x49 () Bool)
(declare-fun x224 () Bool)
(declare-fun x310 () Int)
(declare-fun x851 () Int)
(declare-fun x605 () Int)
(declare-fun x50 () Bool)
(declare-fun x496 () Int)
(declare-fun x237 (Int) Int)
(declare-fun x479 () Int)
(declare-fun x673 () Int)
(declare-fun x30 () Int)
(declare-fun x220 () Bool)
(declare-fun x488 () Int)
(declare-fun x679 () Int)
(declare-fun x788 () Int)
(declare-fun x100 () Bool)
(declare-fun x705 () Int)
(declare-fun x612 () Int)
(declare-fun x290 () Int)
(declare-fun x341 () Int)
(declare-fun x543 () Int)
(declare-fun x207 (Int Int) Int)
(declare-fun x228 () Int)
(declare-fun x623 () Bool)
(declare-fun x118 () Int)
(declare-fun x67 () Int)
(declare-fun x844 () Int)
(declare-fun x459 () Int)
(declare-fun x108 () Int)
(declare-fun x166 () Int)
(declare-fun x829 () Int)
(declare-fun x597 () Int)
(declare-fun x659 () Bool)
(declare-fun x827 () Int)
(declare-fun x621 () Int)
(declare-fun x85 () Bool)
(declare-fun x335 () Bool)
(declare-fun x236 () Int)
(declare-fun x646 () Bool)
(declare-fun x485 () Bool)
(declare-fun x559 () Bool)
(declare-fun x601 () Int)
(declare-fun x664 () Int)
(declare-fun x194 () Bool)
(declare-fun x617 () Int)
(declare-fun x267 () Int)
(declare-fun x287 () Bool)
(declare-fun x126 () Int)
(declare-fun x165 () Bool)
(declare-fun x760 () Int)
(declare-fun x336 () Bool)
(declare-fun x639 () Int)
(declare-fun x124 () Bool)
(declare-fun x123 () Bool)
(declare-fun x20 (Int Int) Int)
(declare-fun x684 () Int)
(declare-fun x476 () Int)
(declare-fun x404 () Int)
(declare-fun x652 () Bool)
(declare-fun x537 () Int)
(declare-fun x323 () Bool)
(declare-fun x309 () Bool)
(declare-fun x46 () Int)
(declare-fun x602 () Int)
(declare-fun x635 () Bool)
(declare-fun x117 () Bool)
(declare-fun x271 () Int)
(declare-fun x767 () Int)
(declare-fun x516 () Int)
(declare-fun x708 () Bool)
(declare-fun x865 () Int)
(declare-fun x382 () Int)
(declare-fun x834 () Int)
(declare-fun x340 () Int)
(declare-fun x593 () Bool)
(declare-fun x748 () Int)
(declare-fun x304 () Int)
(declare-fun x501 (Int) Int)
(declare-fun x785 () Int)
(declare-fun x840 () Bool)
(declare-fun x337 () Int)
(declare-fun x273 () Int)
(declare-fun x153 () Bool)
(declare-fun x306 (Int) Int)
(declare-fun x39 () Int)
(declare-fun x302 () Int)
(declare-fun x513 () Int)
(declare-fun x395 () Int)
(declare-fun x794 () Int)
(declare-fun x188 () Int)
(declare-fun x424 () Int)
(declare-fun x607 () Int)
(declare-fun x842 () Int)
(declare-fun x11 () Int)
(declare-fun x657 () Int)
(declare-fun x497 () Int)
(declare-fun x546 () Int)
(declare-fun x784 () Int)
(declare-fun x364 () Int)
(declare-fun x110 () Int)
(declare-fun x746 () Int)
(declare-fun x137 () Int)
(declare-fun x92 () Bool)
(declare-fun x541 () Int)
(declare-fun x702 () Int)
(declare-fun x160 () Int)
(declare-fun x586 () Int)
(declare-fun x799 () Int)
(declare-fun x451 () Int)
(declare-fun x462 () Bool)
(declare-fun x357 () Int)
(declare-fun x366 () Bool)
(declare-fun x848 () Int)
(declare-fun x138 () Int)
(declare-fun x577 () Bool)
(declare-fun x627 () Bool)
(declare-fun x595 () Int)
(declare-fun x481 () Bool)
(declare-fun x372 () Int)
(declare-fun x654 () Int)
(declare-fun x704 () Int)
(declare-fun x444 () Int)
(declare-fun x791 () Int)
(declare-fun x263 () Int)
(declare-fun x368 () Int)
(declare-fun x206 () Int)
(declare-fun x76 () Bool)
(declare-fun x589 () Int)
(declare-fun x547 () Int)
(declare-fun x56 () Int)
(declare-fun x789 () Int)
(declare-fun x291 () Int)
(declare-fun x651 () Int)
(declare-fun x163 () Int)
(declare-fun x189 () Int)
(declare-fun x345 () Int)
(declare-fun x208 () Int)
(declare-fun x556 () Int)
(declare-fun x837 () Int)
(declare-fun x427 () Int)
(declare-fun x525 (Int Int) Int)
(declare-fun x779 () Int)
(declare-fun x864 () Int)
(declare-fun x197 () Int)
(declare-fun x534 () Int)
(declare-fun x239 () Int)
(declare-fun x329 () Int)
(declare-fun x776 () Int)
(declare-fun x660 () Int)
(declare-fun x114 () Int)
(declare-fun x285 () Int)
(declare-fun x258 () Int)
(declare-fun x8 () Int)
(declare-fun x394 () Int)
(declare-fun x696 () Int)
(declare-fun x523 () Int)
(declare-fun x858 () Int)
(declare-fun x803 () Int)
(declare-fun x147 () Int)
(declare-fun x701 () Int)
(declare-fun x544 () Int)
(declare-fun x377 () Bool)
(declare-fun x507 () Bool)
(declare-fun x225 () Int)
(declare-fun x65 () Int)
(declare-fun x686 () Bool)
(declare-fun x334 () Bool)
(declare-fun x471 () Int)
(declare-fun x678 () Int)
(declare-fun x724 () Int)
(declare-fun x191 () Int)
(declare-fun x292 () Int)
(declare-fun x242 () Bool)
(declare-fun x422 () Int)
(declare-fun x504 () Int)
(declare-fun x640 () Int)
(declare-fun x390 () Bool)
(declare-fun x351 () Int)
(declare-fun x307 () Bool)
(declare-fun x361 () Bool)
(declare-fun x603 () Int)
(declare-fun x773 () Int)
(declare-fun x417 () Int)
(declare-fun x219 () Int)
(declare-fun x22 () Bool)
(declare-fun x297 () Int)
(declare-fun x863 () Int)
(declare-fun x715 () Bool)
(declare-fun x792 () Int)
(declare-fun x181 () Int)
(declare-fun x430 () Int)
(declare-fun x694 () Int)
(declare-fun x296 () Int)
(declare-fun x319 () Int)
(declare-fun x256 () Int)
(declare-fun x173 () Int)
(declare-fun x714 () Int)
(declare-fun x409 () Bool)
(declare-fun x418 () Bool)
(declare-fun x389 () Int)
(declare-fun x854 () Int)
(declare-fun x42 () Int)
(declare-fun x723 () Int)
(declare-fun x284 () Int)
(declare-fun x360 (Int) Int)
(declare-fun x109 () Int)
(declare-fun x332 () Bool)
(declare-fun x29 () Int)
(declare-fun x87 () Bool)
(declare-fun x667 () Bool)
(declare-fun x164 () Int)
(declare-fun x492 () Int)
(declare-fun x465 () Int)
(declare-fun x499 () Int)
(declare-fun x214 () Bool)
(declare-fun x816 () Bool)
(declare-fun x344 () Int)
(declare-fun x726 () Int)
(declare-fun x28 () Int)
(declare-fun x134 () Int)
(declare-fun x745 () Bool)
(declare-fun x558 () Int)
(declare-fun x83 () Bool)
(declare-fun x392 () Int)
(declare-fun x446 () Int)
(declare-fun x749 () Int)
(declare-fun x590 () Bool)
(declare-fun x141 () Int)
(declare-fun x205 () Int)
(declare-fun x338 () Bool)
(declare-fun x305 () Int)
(declare-fun x709 () Bool)
(declare-fun x487 () Int)
(declare-fun x62 () Bool)
(declare-fun x551 () Int)
(declare-fun x769 () Int)
(declare-fun x13 () Bool)
(declare-fun x36 () Int)
(declare-fun x232 () Int)
(declare-fun x436 () Int)
(declare-fun x675 () Int)
(declare-fun x852 () Int)
(declare-fun x466 () Int)
(declare-fun x383 () Int)
(declare-fun x145 () Int)
(declare-fun x353 () Bool)
(declare-fun x128 () Int)
(declare-fun x529 () Bool)
(declare-fun x735 () Int)
(declare-fun x66 () Int)
(declare-fun x625 () Int)
(declare-fun x264 () Bool)
(declare-fun x246 () Int)
(declare-fun x266 () Int)
(declare-fun x550 () Int)
(declare-fun x104 () Int)
(declare-fun x575 () Bool)
(declare-fun x223 () Int)
(declare-fun x130 () Int)
(declare-fun x34 () Int)
(declare-fun x144 () Bool)
(declare-fun x177 () Int)
(declare-fun x355 () Bool)
(declare-fun x193 () Int)
(declare-fun x320 () Int)
(declare-fun x539 () Int)
(declare-fun x636 () Bool)
(declare-fun x468 () Int)
(declare-fun x148 () Int)
(declare-fun x386 () Int)
(declare-fun x88 () Int)
(declare-fun x830 () Int)
(declare-fun x116 () Int)
(declare-fun x40 () Int)
(declare-fun x665 () Int)
(declare-fun x526 () Int)
(declare-fun x753 () Bool)
(declare-fun x618 () Int)
(declare-fun x154 () Bool)
(declare-fun x628 () Int)
(declare-fun x658 () Int)
(declare-fun x653 () Int)
(declare-fun x609 () Int)
(declare-fun x681 () Int)
(declare-fun x280 () Int)
(declare-fun x176 () Int)
(declare-fun x301 () Int)
(declare-fun x400 () Int)
(declare-fun x703 () Int)
(declare-fun x766 () Int)
(declare-fun x209 () Int)
(declare-fun x185 () Int)
(declare-fun x467 () Bool)
(declare-fun x450 () Int)
(declare-fun x314 () Int)
(declare-fun x736 () Bool)
(declare-fun x47 () Int)
(declare-fun x573 (Int) Int)
(declare-fun x58 () Int)
(declare-fun x545 () Int)
(declare-fun x426 () Bool)
(declare-fun x122 () Int)
(declare-fun x531 () Int)
(declare-fun x846 () Int)
(declare-fun x315 () Int)
(declare-fun x234 () Int)
(declare-fun x286 () Int)
(declare-fun x3 () Int)
(declare-fun x641 () Int)
(declare-fun x564 () Int)
(declare-fun x178 () Int)
(declare-fun x416 () Int)
(declare-fun x458 () Int)
(declare-fun x643 () Int)
(declare-fun x517 () Int)
(declare-fun x295 () Int)
(declare-fun x443 () Int)
(declare-fun x308 () Bool)
(declare-fun x594 () Int)
(declare-fun x388 () Bool)
(declare-fun x783 () Bool)
(declare-fun x725 () Int)
(declare-fun x276 () Int)
(declare-fun x698 () Bool)
(declare-fun x133 () Bool)
(declare-fun x718 () Int)
(declare-fun x299 () Int)
(declare-fun x729 () Int)
(declare-fun x689 () Int)
(declare-fun x63 () Int)
(declare-fun x121 () Bool)
(declare-fun x238 () Bool)
(declare-fun x350 () Int)
(declare-fun x765 () Int)
(declare-fun x511 () Bool)
(declare-fun x585 () Bool)
(declare-fun x614 () Int)
(declare-fun x71 () Int)
(declare-fun x690 () Int)
(declare-fun x445 () Int)
(declare-fun x410 () Int)
(declare-fun x716 () Bool)
(declare-fun x293 () Bool)
(declare-fun x365 () Int)
(declare-fun x699 () Int)
(declare-fun x619 () Int)
(declare-fun x777 () Bool)
(declare-fun x771 () Int)
(declare-fun x257 () Bool)
(declare-fun x26 () Int)
(declare-fun x283 () Bool)
(declare-fun x369 () Int)
(declare-fun x259 () Int)
(declare-fun x432 () Int)
(declare-fun x454 () Int)
(declare-fun x215 () Int)
(declare-fun x316 () Bool)
(declare-fun x798 () Int)
(declare-fun x78 () Int)
(declare-fun x648 () Int)
(declare-fun x387 () Int)
(declare-fun x692 () Int)
(declare-fun x741 () Int)
(declare-fun x473 () Bool)
(declare-fun x742 (Int Int) Int)
(declare-fun x502 () Int)
(declare-fun x596 () Bool)
(declare-fun x17 () Int)
(declare-fun x519 () Int)
(declare-fun x96 () Bool)
(declare-fun x428 () Bool)
(declare-fun x204 () Int)
(declare-fun x384 () Int)
(declare-fun x832 () Int)
(declare-fun x847 () Int)
(declare-fun x41 () Bool)
(declare-fun x448 () Int)
(declare-fun x25 () Int)
(declare-fun x562 () Int)
(declare-fun x156 () Int)
(declare-fun x371 () Int)
(declare-fun x781 () Int)
(declare-fun x780 () Int)
(declare-fun x182 () Int)
(declare-fun x318 () Int)
(declare-fun x461 () Bool)
(declare-fun x1 () Int)
(declare-fun x503 () Int)
(declare-fun x294 () Int)
(declare-fun x720 () Int)
(declare-fun x435 () Int)
(declare-fun x835 () Bool)
(declare-fun x218 () Int)
(declare-fun x159 () Int)
(declare-fun x484 () Int)
(declare-fun x717 () Int)
(declare-fun x802 (Int) Int)
(declare-fun x674 () Bool)
(declare-fun x48 () Int)
(declare-fun x265 () Int)
(declare-fun x272 () Bool)
(declare-fun x739 () Int)
(declare-fun x270 () Int)
(declare-fun x158 (Int) Int)
(declare-fun x180 () Int)
(declare-fun x179 () Bool)
(declare-fun x268 () Bool)
(declare-fun x19 () Bool)
(declare-fun x359 () Int)
(declare-fun x857 () Int)
(declare-fun x833 () Int)
(declare-fun x391 () Int)
(declare-fun x170 () Bool)
(declare-fun x584 () Int)
(declare-fun x505 () Int)
(declare-fun x555 () Int)
(declare-fun x199 () Int)
(declare-fun x796 () Int)
(declare-fun x764 () Bool)
(declare-fun x528 () Int)
(declare-fun x12 () Int)
(declare-fun x722 () Int)
(declare-fun x106 () Int)
(declare-fun x849 () Int)
(declare-fun x333 () Int)
(declare-fun x402 () Int)
(declare-fun x281 () Int)
(declare-fun x460 () Int)
(declare-fun x217 (Int) Int)
(declare-fun x186 () Int)
(declare-fun x190 () Bool)
(declare-fun x814 () Bool)
(declare-fun x300 () Int)
(declare-fun x16 () Int)
(declare-fun x682 () Int)
(declare-fun x751 () Bool)
(declare-fun x431 () Int)
(declare-fun x348 () Bool)
(declare-fun x405 () Int)
(declare-fun x43 () Int)
(declare-fun x591 () Int)
(declare-fun x18 () Int)
(declare-fun x772 () Int)
(declare-fun x825 () Int)
(declare-fun x691 () Bool)
(declare-fun x53 () Int)
(declare-fun x634 () Int)
(declare-fun x169 () Int)
(declare-fun x862 () Int)
(declare-fun x744 () Bool)
(declare-fun x856 () Bool)
(declare-fun x700 () Int)
(declare-fun x252 () Bool)
(declare-fun x728 () Bool)
(declare-fun x247 () Int)
(declare-fun x855 () Int)
(declare-fun x633 () Int)
(declare-fun x800 () Bool)
(declare-fun x530 () Bool)
(declare-fun x557 () Int)
(declare-fun x475 () Int)
(declare-fun x747 () Int)
(declare-fun x554 () Int)
(declare-fun x826 () Int)
(declare-fun x805 () Int)
(declare-fun x150 () Bool)
(declare-fun x824 () Int)
(declare-fun x486 () Int)
(declare-fun x358 () Int)
(declare-fun x626 () Int)
(declare-fun x233 () Bool)
(declare-fun x687 () Int)
(declare-fun x230 () Int)
(declare-fun x683 () Int)
(declare-fun x464 () Int)
(declare-fun x254 () Int)
(declare-fun x808 () Int)
(declare-fun x187 () Int)
(declare-fun x399 () Int)
(declare-fun x57 () Int)
(declare-fun x93 () Int)
(declare-fun x55 () Int)
(declare-fun x598 () Int)
(declare-fun x563 () Int)
(declare-fun x456 () Int)
(declare-fun x79 () Int)
(declare-fun x226 () Bool)
(declare-fun x631 () Int)
(declare-fun x520 () Bool)
(declare-fun x571 () Bool)
(declare-fun x632 (Int) Int)
(declare-fun x140 () Int)
(declare-fun x240 () Bool)
(declare-fun x491 () Int)
(declare-fun x184 () Bool)
(declare-fun x482 () Int)
(declare-fun x734 () Int)
(declare-fun x385 () Int)
(declare-fun x54 () Int)
(declare-fun x500 () Int)
(define-fun x512 ((x672 Int)) Int (ite (and (<= 0 x672) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x672)) x672 (- x672 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x810 ((x672 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x672) (< x672 0)) (+ x672 115792089237316195423570985008687907853269984665640564039457584007913129639936) x672))
(define-fun x52 ((x732 Int)) Bool (and (< x732 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x732)))
(define-fun x202 ((x732 Int)) Bool (and (<= 0 x732) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x732)))
(define-fun x64 ((x732 Int)) Bool (and (= x732 (x525 115792089237316195423570985008687907853269984665640564039457584007913129639935 x732)) (= (x525 x732 115792089237316195423570985008687907853269984665640564039457584007913129639935) x732)))
(define-fun x381 ((x732 Int)) Bool (and (= 0 (x525 x732 0)) (= (x525 0 x732) 0)))
(define-fun x151 ((x732 Int)) Bool (= (x525 x732 x732) x732))
(define-fun x638 ((x732 Int)) Bool (and (x381 x732) (x64 x732) (x151 x732)))
(define-fun x838 ((x732 Int) (x347 Int)) Bool (= (x525 x732 x347) (x525 x347 x732)))
(define-fun x349 ((x732 Int) (x347 Int)) Bool (and (=> (<= 0 x732) (<= (x525 x732 x347) x732)) (=> (>= x347 0) (>= x347 (x525 x732 x347))) (>= (x525 x732 x347) 0)))
(define-fun x82 ((x732 Int) (x347 Int)) Bool (and (x349 x732 x347) (x838 x732 x347)))
(define-fun x313 ((x732 Int)) Bool (= (x525 x732 255) (mod x732 256)))
(define-fun x758 ((x732 Int)) Bool (and (x313 x732) (x82 x732 255)))
(define-fun x152 ((x732 Int)) Bool (= (x525 x732 57896044618658097711785492504343953926634992332820282019728792003956564819967) (mod x732 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(define-fun x406 ((x732 Int)) Bool (and (x152 x732) (x82 x732 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(define-fun x278 ((x732 Int)) Bool (= (mod x732 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x525 x732 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x732 32))))
(define-fun x250 ((x732 Int)) Bool (and (x278 x732) (x82 x732 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x730 ((x732 Int)) Bool (= (+ (x525 x732 115792089237316195423570985008687907853269984665640564039457584007913129639680) (mod x732 256)) (mod x732 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x111 ((x732 Int)) Bool (and (x82 x732 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x730 x732)))
(define-fun x80 ((x732 Int)) Bool (= (x525 x732 1) (mod x732 2)))
(define-fun x312 ((x732 Int)) Bool (and (x80 x732) (x82 x732 1)))
(define-fun x324 ((x732 Int)) Bool (= (x525 x732 79228162514264337593543950335) (mod x732 79228162514264337593543950336)))
(define-fun x210 ((x732 Int)) Bool (and (x324 x732) (x82 x732 79228162514264337593543950335)))
(define-fun x370 ((x732 Int)) Bool (= (- x732 (x525 x732 6277101735386680763835789423128438253588091106870490562560)) (x525 x732 115792089237316195417293883273301227089434195242512125785869492901042639077375)))
(define-fun x289 ((x732 Int)) Bool (and (x82 x732 115792089237316195417293883273301227089434195242512125785869492901042639077375) (x370 x732)))
(define-fun x483 ((x732 Int)) Bool (= (mod x732 6277101735386680763835789423207666416102355444464034512896) (+ (mod x732 79228162514264337593543950336) (x525 x732 6277101735386680763835789423128438253588091106870490562560))))
(define-fun x821 ((x732 Int)) Bool (and (x483 x732) (x82 x732 6277101735386680763835789423128438253588091106870490562560)))
(define-fun x650 ((x98 Int)) Int (x843 x98))
(define-fun x567 ((x98 Int)) Int (ite (= x98 128) x852 (x573 x98)))
(define-fun x90 ((x98 Int)) Int (ite (= 160 x98) (ite x268 1 0) (x567 x98)))
(define-fun x425 ((x98 Int)) Int (x843 x98))
(define-fun x533 ((x98 Int)) Int (ite (= x98 128) x700 (x237 x98)))
(define-fun x94 ((x98 Int)) Int (ite (= x98 160) (ite x662 1 0) (x533 x98)))
(define-fun x670 ((x98 Int)) Int (x843 x98))
(define-fun x107 ((x98 Int)) Int (ite (= 128 x98) x201 (x217 x98)))
(define-fun x249 ((x98 Int)) Int (ite (= 160 x98) (ite x192 1 0) (x107 x98)))
(define-fun x440 ((x98 Int)) Int (x737 x98))
(define-fun x373 ((x98 Int)) Int (ite (= x98 8) x460 (x362 x98)))
(define-fun x51 ((x98 Int)) Int (ite (= x98 128) (ite x143 1 0) (x306 x98)))
(define-fun x680 ((x98 Int)) Int (ite (= 128 x98) 112762432447299995021467288873193731040449111418389949397557428784167418593280 (x51 x98)))
(define-fun x397 ((x98 Int)) Int (ite (= 132 x98) x145 (x680 x98)))
(define-fun x119 ((x98 Int)) Int (ite (and (> (+ 128 0) x98) (<= 128 x98)) (x501 (+ 0 (- x98 128))) (x397 x98)))
(define-fun x685 ((x98 Int)) Int (ite (= x98 128) x423 (x119 x98)))
(define-fun x859 ((x98 Int)) Int (ite (and (>= x98 160) (> (+ x423 160) x98)) (x501 (+ (- x98 160) 0)) (x685 x98)))
(define-fun x828 ((x98 Int)) Int (ite (= x42 x98) x829 (x859 x98)))
(define-fun x463 ((x98 Int)) Int (ite (= x778 x98) x561 (x828 x98)))
(define-fun x663 ((x98 Int)) Int (ite (= x98 x446) x645 (x463 x98)))
(define-fun x762 ((x98 Int)) Int (ite (= x729 x98) x180 (x663 x98)))
(define-fun x610 ((x98 Int)) Int (ite (= 128 x98) x110 (x661 x98)))
(define-fun x331 ((x98 Int)) Int (ite (= x98 160) (ite x709 1 0) (x610 x98)))
(define-fun x131 ((x98 Int)) Int (x843 x98))
(define-fun x761 ((x98 Int)) Int (ite (= x98 9) x594 (x373 x98)))
(define-fun x518 ((x98 Int)) Int (ite (= x98 19) x259 (x761 x98)))
(define-fun x549 ((x98 Int)) Int (ite (= x98 20) x854 (x518 x98)))
(define-fun x566 ((x98 Int)) Int (ite (= x420 x98) x604 (x549 x98)))
(define-fun x506 ((x98 Int)) Int (ite x165 (x549 x98) (x566 x98)))
(define-fun x35 ((x98 Int)) Int (ite x429 (x373 x98) (ite x252 (x549 x98) (x506 x98))))
(define-fun x60 ((x98 Int)) Int (ite (= 128 x98) x586 (x524 x98)))
(define-fun x7 ((x98 Int)) Int (ite (= 160 x98) (ite x257 1 0) (x60 x98)))
(define-fun x213 ((x98 Int)) Int (ite (= x845 x98) x560 (x762 x98)))
(define-fun x235 ((x98 Int)) Int (ite x530 (x762 x98) (ite x309 (x663 x98) (ite x190 (x463 x98) (ite x240 (x828 x98) (x213 x98))))))
(define-fun x569 ((x98 Int)) Int (ite (= x98 x177) x135 (x235 x98)))
(define-fun x434 ((x98 Int)) Int (ite (= x98 x601) x209 (x569 x98)))
(define-fun x101 ((x98 Int)) Int (ite (= x703 x98) x329 (x434 x98)))
(define-fun x125 ((x98 Int)) Int (ite (= x98 x781) x26 (x101 x98)))
(define-fun x582 ((x98 Int)) Int (ite (= x267 x98) x671 (x125 x98)))
(define-fun x413 ((x98 Int)) Int (ite x574 (x125 x98) (ite x354 (x101 x98) (ite x575 (x434 x98) (ite x559 (x569 x98) (x582 x98))))))
(define-fun x9 ((x98 Int)) Int (ite (= x608 x98) x160 (x413 x98)))
(define-fun x453 ((x98 Int)) Int (ite (and (<= x16 x98) (< x98 (+ x16 x704))) (x737 (+ x503 (- x98 x16))) (x9 x98)))
(define-fun x245 ((x98 Int)) Int (ite x330 (x9 x98) (x453 x98)))
(define-fun x455 ((x98 Int)) Int (ite (= x734 x98) x174 (x245 x98)))
(define-fun x599 ((x98 Int)) Int (ite x812 (x245 x98) (x455 x98)))
(define-fun x712 ((x98 Int)) Int (ite (= x310 x98) 112349551054952423155953805921267728290102753186399332250345724850365349756928 (x599 x98)))
(define-fun x321 ((x98 Int)) Int (ite (= x539 x98) x77 (x712 x98)))
(define-fun x91 ((x98 Int)) Int (ite (= x98 64) 128 (x360 x98)))
(define-fun x136 ((x98 Int)) Int (ite (= x98 x787) x364 (x91 x98)))
(define-fun x542 ((x98 Int)) Int (ite (and (< x98 (+ x310 (ite (< x834 32) x834 32))) (>= x98 x310)) (x136 (+ (- x98 x310) x265)) (x321 x98)))
(define-fun x105 ((x98 Int)) Int (ite (and (< x98 (+ x834 0)) (<= 0 x98)) (x136 (+ (- x98 0) x265)) (x802 x98)))
(define-fun x84 ((x98 Int)) Int (x843 x98))
(assert (x202 x683))
(assert (x250 x584))
(assert (= (x306 x775) 0))
(assert (x202 x193))
(assert (not (= (x20 x327 x513) 19)))
(assert (= (and (not x167) x580) x165))
(assert (x638 79228162514264337593543950335))
(assert (not (= 363856219 (x20 0 17))))
(assert (x202 x756))
(assert (x202 x773))
(assert (x202 x363))
(assert (x202 x364))
(assert (not (= (x20 x259 10) 19)))
(assert (x202 x560))
(assert (not (= 17 (x20 x327 x513))))
(assert (x202 x538))
(assert (not (= (x20 x169 x443) 2863377861)))
(assert (=> (<= x326 10000) (not (= x326 (x20 x626 x339)))))
(assert (not (= 8 (x20 x327 x513))))
(assert (= (=> (and (and (= x631 (x90 160)) (= (x90 128) x718) (= (not (= 0 x302)) x268)) (and (and (and (= x296 x628) (< 0 x768) (> 2127478272 x56) (not (= x56 503383097)) (not (< x56 500647658)) (= x356 5000) (< x56 596258137) (> 743225245 x56) (= 519173431 x56) (= 5000 x70) (< x56 954831406) (= x768 (x578 x326)) (not (= 500647658 x56))) (and (and (and (= (x362 14) x813) (not (= x807 3567393941)) (not (< x807 3224796394)) (not (= 3586168516 x807)) (> 3812870723 x807) (= x618 1000) (not (> 3567393941 x807)) (= x551 5000000) (= x807 3670205928) (= x316 (>= 5000000 x628)) (not (= x807 3573918927)) (> 3714247998 x807) (< 0 x300) (= x813 x690) (not (< x807 2127478272)) (= (x578 x326) x300)) (and (and (and (not (< x276 954831406)) (= x521 (x578 x326)) (= 1 x17) (> 1871194811 x276) (< x276 2127478272) (> x521 0) (not (= 1738207182 x276)) (not (< x276 1439069736)) (not (< x276 1738207182)) (= 1000 x155) (= 1816029635 x276)) (and (= (and x316 x96) x823) (< x75 3224796394) (= x239 x68) (= x273 (x362 16)) x823 (= x537 x191) (<= 0 x479) (= x132 x12) (= x784 x38) (= 3051865383 x75) (= x754 (x362 15)) (<= x550 1461501637330902918203684832716283019655932542975) (not (= x75 3008386744)) (= (x362 13) x675) (>= x46 0) (= 1000 x297) (= x864 x269) (not (> 2580288415 x75)) (= (x578 x326) x89) (not (> 2127478272 x75)) (>= 1461501637330902918203684832716283019655932542975 x479) (= x456 x487) (= x46 x864) (= x572 0) (= x269 x714) (= x260 x227) (= x96 (>= x746 1000)) (= x23 x401) (= x495 1000) (= x572 x784) (>= 1461501637330902918203684832716283019655932542975 x46) (= x596 (> x273 x487)) (not (> 2863377861 x75)) (>= x550 0) (not (< x75 3008386744)) (= x858 x550) (< 0 x89) (= x304 (x362 14)) (= x803 x858))) (and (< 0 x186) (= (x578 x326) x186) (< x726 743225245) (= 1 x721) (= 686821956 x726) (= x8 1) (not (= 596258137 x726)) (not (> 500647658 x726)) (not (> 596258137 x726)) (> 954831406 x726) (not (= x726 599290589)) (= x746 x690) (> 2127478272 x726)))) (and (> x794 0) (not (< x771 1439069736)) (> 2127478272 x771) (= x771 1816029635) (= x318 1000) (not (> 1738207182 x771)) (= (x578 x326) x794) (= 5000 x682) (not (> 954831406 x771)) (not (= 1738207182 x771)) (> 1871194811 x771)))) (and (= x34 (x362 14)) (not (> 3224796394 x756)) (< x756 3714247998) (= x296 x34) (= (x578 x326) x693) x100 (< 0 x693) (= (or x355 (not x835)) x100) (= 0 x86) (not (= x756 3586168516)) (< x756 3812870723) (= x756 3670205928) (not (< x756 3567393941)) (= x355 (= 0 x365)) (not (= x756 3573918927)) (not (= x756 3567393941)) (not (> 2127478272 x756)) (= x113 x773) (= x462 (not (= x631 0))) (= x462 x620) (= x718 x773) (= x365 x113)))) (and (=> (and (and (or (and (not x170) (and (= x656 (x810 (- x487 x754))) (= (x810 (- x273 x754)) x29) (= x25 (x810 (- x675 x304))) (= x431 x405) (= (x810 (- x675 x454)) x405) (= x454 (div x488 x29)) (< 0 x29) (= (mod (* x656 x25) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x488))) (and (and (= x592 (x810 (- x273 x754))) (= x441 (x810 (- x304 x675))) (= (x810 (- x487 x754)) x149) (= x748 (div x624 x592)) (> x592 0) (= (mod (* x441 x149) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x624) (= x466 (x512 (+ x675 x748))) (= x466 x431)) x170)) (= x170 (> x304 x675))) x596) x733) (=> (and (and (= x304 x700) (= 0 x526)) (not x596)) x615))) x220))
(assert (x202 x671))
(assert (not (= (x20 x254 x711) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x202 x815))
(assert (x202 x410))
(assert (x202 x656))
(assert (x202 x557))
(assert (not (= (x20 x254 x711) 238709543)))
(assert (not (= (x20 0 17) 4294967296)))
(assert (not (= (x20 x327 x513) 228615836)))
(assert (not (= 3002540418 (x20 x626 x339))))
(assert (not (= (x20 x254 x711) 2966737888)))
(assert (not (= (x20 x254 x711) 14)))
(assert (not (= (x20 x169 x443) 3008386744)))
(assert (x202 x128))
(assert (not (= 826074471 (x20 x626 x339))))
(assert (not (= (x20 x259 10) 596258137)))
(assert (x202 x405))
(assert (x202 x441))
(assert (not (= (x20 x169 x443) 503383097)))
(assert (x202 x86))
(assert (x202 x14))
(assert (x202 x786))
(assert (x202 x754))
(assert (x202 x658))
(assert (=> (>= 10000 x327) (not (= x327 (x20 x259 10)))))
(assert (=> (>= 10000 x458) (not (= x458 (x20 x327 x513)))))
(assert (x202 x618))
(assert (=> (>= 10000 x327) (not (= (x20 x626 x339) x327))))
(assert (= x242 x332))
(assert (x202 x699))
(assert (not (= (x20 0 17) 26)))
(assert (not (= 1840041978 (x20 x254 x711))))
(assert (not (= 1531409238 (x20 0 17))))
(assert (not (= 228615836 (x20 0 17))))
(assert (not (= (x20 x259 10) 822145385)))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x20 0 17))))
(assert (x202 x780))
(assert (not (= (x20 x169 x443) 1840041978)))
(assert (x202 x73))
(assert (= x429 (and x200 x390)))
(assert (not (= (x20 x626 x339) 910484757)))
(assert (= (mod (* 57896044618658097711785492504343953926634992332820282019728792003956564819968 x459) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x695 x459 255)))
(assert (not (= 3008386744 (x20 x259 10))))
(assert (= x856 (or x429 x221)))
(assert (x52 x181))
(assert (not (= 910484757 (x20 x259 10))))
(assert (x202 x109))
(assert (x202 x376))
(assert (= (=> (and (and (and (and (< x818 2127478272) (not (< x818 1738207182)) (not (> 1439069736 x818)) (= 5000 x808) (= 1000 x570) (= (x578 x326) x770) (not (= 1738207182 x818)) (> 1871194811 x818) (= 1816029635 x818) (not (< x818 954831406)) (> x770 0)) (and (>= x486 0) (= x471 x613) (= 3051865383 x792) (= (x362 13) x465) (= x27 x260) (= x38 x195) (= (x362 15) x857) (= x547 (x578 x326)) (= x456 x866) (< 0 x547) (= x404 x23) (not (< x792 3008386744)) (>= 1461501637330902918203684832716283019655932542975 x471) (>= 1461501637330902918203684832716283019655932542975 x486) (= x747 x714) (= x804 (x362 14)) (> 3224796394 x792) (= 5000000 x739) (not (< x792 2863377861)) (<= 0 x432) (>= x471 0) (= x12 x544) (not (< x792 2580288415)) (= x520 (> x277 x866)) (= x764 (<= x215 5000000)) (= x195 x666) (= x303 x537) (not (< x792 2127478272)) (= x277 (x362 16)) (<= x432 1461501637330902918203684832716283019655932542975) (= x68 x651) (= x803 x613) (= x666 0) (= x410 1000) (= x788 x747) (= x486 x788) (not (= x792 3008386744)))) (and (= x357 x157) (> x476 0) (not (= 503383097 x678)) (= (not (= 0 x358)) x224) (> 954831406 x678) (not (= x678 500647658)) (> 743225245 x678) (= 5000 x660) (= 519173431 x678) (= x476 (x578 x326)) (not (> 500647658 x678)) (= x157 x215) (< x678 2127478272) (< x678 596258137) (= x54 x357) (= x71 5000) (= x224 x593))) (and (= (x94 128) x54) (= (not (= 0 x526)) x662) (= (x94 160) x358))) (and (=> (and (and (= x201 x804) (= x522 0)) (not x520)) x87) (=> (and x520 (and (or (and (and (= (div x400 x817) x616) (= x15 (x810 (- x804 x465))) (= x720 x230) (= x230 (x512 (+ x465 x616))) (= x817 (x810 (- x277 x857))) (< 0 x817) (= (mod (* x15 x497) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x400) (= (x810 (- x866 x857)) x497)) x233) (and (and (= (x810 (- x277 x857)) x369) (= (mod (* x668 x424) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x3) (= (x810 (- x866 x857)) x424) (= x421 x720) (> x369 0) (= x765 (div x3 x369)) (= (x810 (- x465 x804)) x668) (= (x810 (- x465 x765)) x421)) (not x233))) (= (> x804 x465) x233))) x49))) x615))
(assert (= x336 (and x577 x691)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x20 x626 x339))))
(assert (not (= (x20 x169 x443) 115792089237316195417293883273301227089434195242512125785869492901042639077375)))
(assert (x202 x314))
(assert (x202 x503))
(assert (= x510 (or x428 x655)))
(assert (x202 x653))
(assert (x202 x102))
(assert (x202 x258))
(assert (not (= (x20 x327 x513) 3812870723)))
(assert (not (= 307731845 (x20 x327 x513))))
(assert (x202 x292))
(assert (not (= (x20 x254 x711) 4294967296)))
(assert (= (x306 x63) 0))
(assert (not (= 14 (x20 x259 10))))
(assert (x202 x521))
(assert (x202 x448))
(assert (x202 x77))
(assert (x202 x548))
(assert (x202 x607))
(assert (= (and x745 (not x216)) x530))
(assert (not (= (x20 0 17) 20)))
(assert (x202 x333))
(assert (x202 x39))
(assert (x202 x536))
(assert (not (= 3996650231 (x20 x327 x513))))
(assert (x406 x846))
(assert (not (= (x20 x259 10) 0)))
(assert (x202 x399))
(assert (x202 x517))
(assert (= (and x674 x274) x124))
(assert (x638 115792089237316195417293883273301227089434195242512125785869492901042639077375))
(assert (x202 x729))
(assert (x202 x495))
(assert (x202 x801))
(assert (=> (>= 10000 x232) (not (= (x20 x254 x711) x232))))
(assert (=> (<= x285 10000) (not (= (x20 x327 x513) x285))))
(assert (=> (= (x20 x259 10) (x20 x626 x339)) (and (= x259 x626) (= x339 10))))
(assert (= x388 (=> (and (= (x245 x435) x174) (> x398 0) (= x491 (mod (* x199 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x734 (x512 (+ x608 32))) (= x435 (x512 (+ x619 x177))) (= x199 (ite (> x206 0) 0 1)) (= (not (> x502 1)) x238) (> x33 x199) (= (x512 (+ x491 32)) x619) (= (x245 x177) x33) (= (x455 x608) x502) (= x398 (x245 x608))) (and x238 x342))))
(assert (not (= (x20 x626 x339) 112762432447299995021467288873193731040449111418389949397557428784167418593280)))
(assert (x202 x770))
(assert (not (= 2272211003 (x20 x626 x339))))
(assert (x202 x352))
(assert (not (= 5000000 (x20 x169 x443))))
(assert (not (= (x20 0 17) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x202 x776))
(assert (not (= 2966737888 (x20 x169 x443))))
(assert (not (= (x20 x169 x443) 3506505391)))
(assert (x202 x811))
(assert (= 0 (x306 x258)))
(assert (not (= (x20 x169 x443) 1862597803)))
(assert (not (= (x20 x327 x513) 363856219)))
(assert (x202 x290))
(assert (= x577 (and x366 x335)))
(assert (not (= 274184521717934524641157099916833587280 (x20 x626 x339))))
(assert (x202 x837))
(assert (= (and x264 (not x520)) x283))
(assert (not (= 3028789119 (x20 x254 x711))))
(assert (=> (>= 10000 x169) (not (= x169 (x20 x626 x339)))))
(assert (not (= (x20 x327 x513) 100000)))
(assert (not (= (x20 x259 10) 2379291291)))
(assert (x202 x247))
(assert (x202 x412))
(assert (x202 x568))
(assert (not (= 86400 (x20 x254 x711))))
(assert (x52 x285))
(assert (= (=> (and (= x72 1) (= x586 x163)) x150) x860))
(assert (x202 x807))
(assert (x202 x862))
(assert (=> (<= x254 10000) (not (= (x20 0 17) x254))))
(assert (x202 x408))
(assert (= (or x797 x348) x120))
(assert (not (= 4294967296 (x20 x327 x513))))
(assert (not (= (x20 x259 10) 9)))
(assert (not (= (x20 x169 x443) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x20 x327 x513) 79228162514264337593543950335)))
(assert (not (= (x20 x169 x443) 2272211003)))
(assert (x202 x58))
(assert (x202 x591))
(assert (not (= 1779675522 (x20 x259 10))))
(assert (not (= 954831406 (x20 x254 x711))))
(assert (not (= 922701707 (x20 x259 10))))
(assert (not (= (x20 x259 10) 3714247998)))
(assert (not (= (x20 x626 x339) 3051865383)))
(assert (x52 x327))
(assert (not (= 686821956 (x20 x327 x513))))
(assert (x52 x326))
(assert (x202 x400))
(assert (not (= 3366849169 (x20 0 17))))
(assert (not (= (x20 x169 x443) 15)))
(assert (= x298 (and x41 x184)))
(assert (x202 x833))
(assert (x202 x687))
(assert (x202 x598))
(assert (not (= 112762432447299995021467288873193731040449111418389949397557428784167418593280 (x20 x169 x443))))
(assert (x52 x254))
(assert (not (= (x20 x626 x339) 596258137)))
(assert (x638 x562))
(assert (x202 x350))
(assert (not (= (x20 0 17) 2966737888)))
(assert (x202 x141))
(assert (x202 x829))
(assert (x202 x863))
(assert (=> (<= x259 10000) (not (= x259 (x20 x626 x339)))))
(assert (= x248 (or x123 x467)))
(assert (not (= 1871194811 (x20 x259 10))))
(assert (x202 x442))
(assert (x202 x394))
(assert (x202 x608))
(assert (not (= (x20 0 17) 361691454)))
(assert (not (= 2064814097 (x20 x626 x339))))
(assert (not (= (x20 x169 x443) 686821956)))
(assert (not (= 4294967296 (x20 x259 10))))
(assert (not (= 2458934263 (x20 x626 x339))))
(assert (= (and (not x728) x298) x309))
(assert (x202 x526))
(assert (x202 x162))
(assert (x202 x243))
(assert (= x428 (and x715 x652)))
(assert (x202 x752))
(assert (not (= (x20 x259 10) 18446744073709551615)))
(assert (x202 x44))
(assert (=> (>= 10000 x626) (not (= (x20 x169 x443) x626))))
(assert (not (= (x20 x254 x711) 2064814097)))
(assert (x202 x522))
(assert (not (= 954831406 (x20 x169 x443))))
(assert (not (= (x20 x254 x711) 1439069736)))
(assert (not (= (x20 x254 x711) 112349551054952423155953805921267728290102753186399332250345724850365349756928)))
(assert (not (= 3890975986 (x20 x254 x711))))
(assert (not (= 9 (x20 x327 x513))))
(assert (not (= 1816029635 (x20 x626 x339))))
(assert (x202 x29))
(assert (not (= (x20 x259 10) 519173431)))
(assert (not (= (x20 x169 x443) 3051865383)))
(assert (x202 x703))
(assert (not (= 2458934263 (x20 x169 x443))))
(assert (x202 x450))
(assert (x202 x505))
(assert (x202 x139))
(assert (x202 x305))
(assert (not (= (x20 0 17) 3586168516)))
(assert (x202 x422))
(assert (not (= (x20 0 17) 1984976886)))
(assert (not (= 17 (x20 x259 10))))
(assert (x202 x195))
(assert (x52 x458))
(assert (x638 255))
(assert (not (= 3573918927 (x20 x254 x711))))
(assert (=> (>= 10000 x327) (not (= (x20 0 17) x327))))
(assert (not (= 18446744073709551615 (x20 x169 x443))))
(assert (= (=> (and (= x302 1) (= x852 x717)) x220) x334))
(assert (x202 x389))
(assert (x821 x562))
(assert (= x816 (and x244 x323)))
(assert (not (= 3366849169 (x20 x626 x339))))
(assert (not (= 3506505391 (x20 x259 10))))
(assert (not (= (x20 x626 x339) 2379291291)))
(assert (not (= (x20 0 17) 5000000)))
(assert (x202 x748))
(assert (x202 x259))
(assert (=> (<= x326 10000) (not (= x326 (x20 x254 x711)))))
(assert (x202 x218))
(assert (x202 x624))
(assert (x202 x181))
(assert (x202 x731))
(assert (not (= 17 (x20 x169 x443))))
(assert (x202 x372))
(assert (not (= 79228162514264337593543950335 (x20 x626 x339))))
(assert (not (= 2966737888 (x20 x259 10))))
(assert (not (= (x20 0 17) 0)))
(assert (x202 x286))
(assert (not (= (x20 x626 x339) 954831406)))
(assert (= x575 (and (not x853) x133)))
(assert (x202 x157))
(assert (x202 x825))
(assert (= x242 (=> (and (= x386 x536) (not (< x363 2580288415)) (<= x39 1461501637330902918203684832716283019655932542975) (not (= x363 3008386744)) (= (x35 16) x606) (= x639 x456) (= x537 x786) (= x546 x12) (<= x419 1461501637330902918203684832716283019655932542975) (not (> 2863377861 x363)) (= x534 x589) (>= x39 0) (not (< x363 2127478272)) (<= 0 x414) (<= 0 x419) (= x536 x38) (= (> x606 x639) x153) (= (x35 15) x450) (not (> 3008386744 x363)) (= x419 x589) (> 3224796394 x363) (= x305 x68) (= 3051865383 x363) (= x23 x228) (= x534 x714) (= x204 (x35 13)) (= x798 x803) (= x39 x798) (>= 1461501637330902918203684832716283019655932542975 x414) (= x260 x139) (= x386 0) (< 0 x556) (= (x578 x326) x556) (= (x35 14) x337)) (and (=> (and (not x153) (and (= x642 0) (= x337 x110))) x279) (=> (and x153 (and (or (and (and (= x727 x849) (= x598 (div x607 x713)) (= x607 (mod (* x630 x138) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> x713 0) (= x713 (x810 (- x606 x450))) (= x727 (x810 (- x204 x598))) (= (x810 (- x204 x337)) x138) (= (x810 (- x639 x450)) x630)) (not x627)) (and x627 (and (= x849 x815) (= x43 (x810 (- x337 x204))) (= (mod (* x43 x622) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x10) (= x837 (x810 (- x606 x450))) (> x837 0) (= (x512 (+ x1 x204)) x815) (= (x810 (- x639 x450)) x622) (= (div x10 x837) x1)))) (= x627 (> x337 x204)))) x452)))))
(assert (not (= (x20 x327 x513) 500647658)))
(assert (not (= 86400 (x20 x169 x443))))
(assert (x202 x541))
(assert (not (= 1439069736 (x20 x259 10))))
(assert (not (= (x20 x259 10) 4167276458)))
(assert (x202 x724))
(assert (not (= (x20 0 17) 910484757)))
(assert (x202 x197))
(assert (not (= (x20 x169 x443) 3996650231)))
(assert (x202 x714))
(assert (not (= (x20 x169 x443) 274184521717934524641157099916833587280)))
(assert (x202 x282))
(assert (x202 x198))
(assert (x202 x386))
(assert (not (= (x20 x626 x339) 599290589)))
(assert (not (= 26 (x20 x254 x711))))
(assert (not (= 3586168516 (x20 x327 x513))))
(assert (not (= 3224796394 (x20 x327 x513))))
(assert (= x580 (and x836 x585)))
(assert (not (= (x20 x327 x513) 3051865383)))
(assert (x202 x534))
(assert (x202 x693))
(assert (not (= (x20 0 17) 3714247998)))
(assert (x202 x713))
(assert (=> (>= 10000 x326) (not (= x326 (x20 x169 x443)))))
(assert (not (= (x20 0 17) 3028789119)))
(assert (x202 x537))
(assert (not (= (x20 x169 x443) 13)))
(assert (= (=> (and (and (and (and (and (> x676 0) (= 1000 x644) (< x352 1871194811) (not (< x352 1738207182)) (= true x707) (= 2 x247) (= 2 x183) (not (< x352 1439069736)) (not (< x352 954831406)) (> 2127478272 x352) (not (= x352 1738207182)) (= (x578 x326) x676) (= 1816029635 x352)) (and (and (and (and (not (< x291 596258137)) (= 1 x129) (not (> 500647658 x291)) (> 743225245 x291) (= (x578 x326) x256) (> 954831406 x291) (not (= 599290589 x291)) (> x256 0) (not (= 596258137 x291)) (= 1 x218) (= x597 1) (< x291 2127478272) (= 686821956 x291)) (and (and (and (= 0 x724) (not (< x647 2127478272)) (= x474 (x578 x326)) (not (> 2580288415 x647)) (not (= x647 2876725745)) (= 5000 x47) (> 3224796394 x647) (not (= 2966737888 x647)) (= 3002540418 x647) (not (= 2863377861 x647)) (> x474 0) (not (> 2863377861 x647)) (= x134 100000) (< x647 3008386744)) (and (and (and (not (= x766 3366849169)) (not (> 2127478272 x766)) (= true x353) (> x412 0) (= x791 64) (< x766 3812870723) (= 3506505391 x766) (not (< x766 3366849169)) (= 128 x417) (not (> 3224796394 x766)) (= x500 64) (= x412 (x578 x326)) (> 3567393941 x766)) (and (and (and (not (> 3812870723 x489)) (> 3996650231 x489) (not (> 2127478272 x489)) (= x148 192) (not (< x489 3224796394)) (= 3890975986 x489) (not (< x489 3890975986)) (= true x667) (= x831 (x578 x326)) (= x253 64) (> x831 0) (= 192 x333)) (and (and (= 64 x516) (= 1871194811 x112) (> 2127478272 x112) (not (< x112 1871194811)) (not (< x112 1439069736)) (= x862 (x578 x326)) (= x141 64) (< 0 x862) (> 1984976886 x112) (= 64 x699) (not (> 954831406 x112)) (= true x736)) (and (and (= x507 (not x375)) (> 3224796394 x126) (not (> 2863377861 x126)) (= x380 255) (not (< x126 2580288415)) (= (x742 x67 255) x104) (= x126 3008386744) (= (x362 8) x67) (= (not x507) x861) (= (x578 x326) x755) (= x621 64) (< 0 x755) (= x226 true) (not (< x126 2127478272)) (= (= x104 1) x375) (= x801 64) (= (ite x861 1 0) x439) (not (< x126 3008386744))) (and (and (>= 1461501637330902918203684832716283019655932542975 x387) (>= 1461501637330902918203684832716283019655932542975 x403) (= x806 (x362 15)) (= x68 x448) (= x154 (> x95 x825)) (= x832 3051865383) (= (not (= 0 x383)) x76) (= x833 (x578 x326)) (= (x362 14) x341) (= x855 x38) (= x825 x456) (>= x403 0) (= x219 x23) (not (= 3008386744 x832)) (= x714 x187) (= x108 x803) (= x835 (not x581)) (= (x362 16) x95) (< 0 x833) (<= x827 1461501637330902918203684832716283019655932542975) (= x109 0) (= x108 x403) (>= x827 0) (not (< x832 2580288415)) (= x595 x537) (> 3224796394 x832) (= x198 x12) (not (> 3008386744 x832)) (= x855 x109) (= x260 x780) (= x785 x187) (= (x362 13) x74) (= x76 x581) (<= 0 x387) (= x785 x827) (not (< x832 2863377861)) (not (< x832 2127478272))) (and (= (x362 26) x374) x117 (= (not x311) x809) (= 361691454 x103) (not (= 307731845 x103)) (not (= 238709543 x103)) (= (ite x809 1 0) x383) (= (x525 255 x374) x57) (< 0 x146) (< x103 2127478272) (= (= 0 x57) x311) (< x103 954831406) (= (x578 x326) x146) (not (= 228615836 x103)) (= (not (= x439 0)) x117) (< x103 363856219) (< x103 500647658) (not (> 228615836 x103))))))) (and (= 1862597803 x294) (= 192 x679) (not (= 1840041978 x294)) (= 128 x88) (not (= x294 1816029635)) (not (= 1738207182 x294)) (not (< x294 1738207182)) (= x543 128) (> x558 0) (= x92 true) (< x294 2127478272) (not (< x294 1439069736)) (= (x578 x326) x558) (> 1871194811 x294) (not (> 954831406 x294))))) (and (= x115 (x578 x326)) (not (> 954831406 x749)) (= true x782) (not (< x749 1871194811)) (= x499 0) (not (< x749 1439069736)) (not (> 1984976886 x749)) (< x749 2127478272) (not (= x749 2039265891)) (< 0 x115) (not (= x749 1984976886)) (= 64 x6) (= x527 0) (= 2064814097 x749)))) (and (= (x578 x326) x554) (not (> 500647658 x741)) (not (= 500647658 x741)) (> 743225245 x741) (= x325 0) (< x741 596258137) (> 954831406 x741) (= 5000 x351) (not (= 503383097 x741)) (= 5000 x658) (= x741 519173431) (< x741 2127478272) (= x102 1) (< 0 x554)))) (and (> 2127478272 x371) (= 1 x168) (< x371 954831406) (= x371 686821956) (not (< x371 596258137)) (= (x578 x326) x457) (< x371 743225245) (not (> 500647658 x371)) (= x315 1) (not (= 596258137 x371)) (= 5000 x774) (not (= x371 599290589)) (< 0 x457))) (and (< 0 x106) (= x106 (x578 x326)) (= 1000 x223) (< x725 2127478272) (= x725 519173431) (< x725 743225245) (= true x493) (< x725 954831406) (not (= 500647658 x725)) (not (> 500647658 x725)) (= x684 5000) (not (= x725 503383097)) (= x548 5000) (> 596258137 x725) (= 1000 x118)))) (and (not (= x811 826074471)) (not (= 822145385 x811)) (= 2 x14) (= x603 (x578 x326)) (not (= x811 910484757)) (> 2127478272 x811) (= x811 922701707) (not (< x811 500647658)) (not (> 822145385 x811)) (= x692 0) (< 0 x603) (< x811 954831406) (= 86400 x528) (not (> 743225245 x811)))) (and (< x436 3812870723) (= 86400 x379) (> 3567393941 x436) (= x436 3249860859) (> 3366849169 x436) (not (> 3224796394 x436)) (= x723 86400) (< 0 x427) (not (= x436 3224796394)) (not (< x436 2127478272)) (= 1531409238 x605) (= x427 (x578 x326)))) (and x738 (> x458 0) (not (= x285 x326)) (not (= x232 x285)) (< 0 x181) (>= x130 0) (> x326 0) (= x568 x537) (not (= x181 x326)) (<= 0 x79) (= (x158 x458) x609) (= x367 (> (x578 x181) 0)) (<= x285 1461501637330902918203684832716283019655932542975) (= x442 (x158 x181)) (= x121 false) (= x611 86400) x272 (= (> (x578 x326) 0) x272) (= x234 (x158 x285)) (>= x234 0) (> 3366849169 x340) (= x706 x79) x367 (not (> 3224796394 x340)) x635 (not (< x340 2127478272)) (= x53 (x578 x326)) (> x232 0) (= 1 x687) (not (= x458 x326)) (> x53 0) (not (= x232 x181)) (not (= 3224796394 x340)) (= x32 (x158 x326)) (<= 0 x767) (= false x669) (= (> (x578 x458) 0) x738) (= x130 x30) (<= 0 x609) (= x659 false) (>= 1461501637330902918203684832716283019655932542975 x458) (= x275 false) (= 3249860859 x340) (= x803 x73) (<= x232 1461501637330902918203684832716283019655932542975) (= x648 2458934263) (<= 0 x73) (>= x568 0) (<= x568 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x130) (not (= x326 x232)) (not (= x232 x458)) x753 (= x635 (> (x578 x232) 0)) (>= 1461501637330902918203684832716283019655932542975 x326) (< x340 3567393941) (>= 1461501637330902918203684832716283019655932542975 x73) (not (= x458 x285)) (<= x79 1461501637330902918203684832716283019655932542975) (>= x442 0) (>= x32 0) (>= 1461501637330902918203684832716283019655932542975 x181) (< x340 3812870723) (not (= x458 x181)) (> x285 0) (not (= x285 x181)) (= x753 (< 0 (x578 x285))) (= (x158 x232) x767))) (and (=> (and (and (= x302 0) (= x852 x341)) (not x154)) x220) (=> (and x154 (and (or (and (and (= x538 (x810 (- x341 x74))) (= (div x164 x203) x696) (= (x512 (+ x696 x74)) x212) (< 0 x203) (= x212 x717) (= (mod (* x538 x140) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x164) (= (x810 (- x825 x806)) x140) (= (x810 (- x95 x806)) x203)) x274) (and (and (= (div x282 x763) x637) (= (mod (* x378 x430) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x282) (= x717 x795) (= x763 (x810 (- x95 x806))) (= x795 (x810 (- x74 x637))) (< 0 x763) (= x430 (x810 (- x825 x806))) (= (x810 (- x74 x341)) x378)) (not x274))) (= (> x341 x74) x274))) x334))) x144))
(assert (x202 x606))
(assert (x202 x396))
(assert (x202 x826))
(assert (x202 x588))
(assert (not (= (x20 x259 10) 686821956)))
(assert (x202 x509))
(assert (not (= (x20 x254 x711) 10)))
(assert (=> (= (x20 x254 x711) (x20 0 17)) (and (= x254 0) (= x711 17))))
(assert (not (= 922701707 (x20 x169 x443))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x20 x169 x443))))
(assert (not (= 1984976886 (x20 x254 x711))))
(assert (x202 x326))
(assert (not (= 2379291291 (x20 x254 x711))))
(assert (not (= 1862597803 (x20 x259 10))))
(assert (not (= (x20 x254 x711) 1531409238)))
(assert (x202 x130))
(assert (x202 x186))
(assert (=> (<= x458 10000) (not (= (x20 x259 10) x458))))
(assert (x202 x393))
(assert (x202 x444))
(assert (x202 x855))
(assert (not (= (x20 0 17) 307731845)))
(assert (not (= 1816029635 (x20 x259 10))))
(assert (not (= (x20 x259 10) 3812870723)))
(assert (not (= 3586168516 (x20 x254 x711))))
(assert (x202 x604))
(assert (not (= (x20 0 17) 2876725745)))
(assert (not (= 596258137 (x20 0 17))))
(assert (x638 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (not (= 3028789119 (x20 x259 10))))
(assert (not (= (x20 x259 10) 8)))
(assert (x202 x241))
(assert (not (= (x20 x327 x513) 503383097)))
(assert (= (or x485 x790) x171))
(assert (x202 x482))
(assert (x202 x454))
(assert (x202 x841))
(assert (x202 x561))
(assert (x202 x277))
(assert (not (= (x20 0 17) 1439069736)))
(assert (not (= (x20 x169 x443) 2876725745)))
(assert (not (= 361691454 (x20 x254 x711))))
(assert (x202 x48))
(assert (not (= (x20 x254 x711) 500647658)))
(assert (x202 x491))
(assert (x202 x553))
(assert (x202 x122))
(assert (=> (>= 10000 x285) (not (= x285 (x20 x169 x443)))))
(assert (x202 x630))
(assert (x202 x27))
(assert (x202 x497))
(assert (not (= (x20 0 17) 2272211003)))
(assert (not (= (x20 x626 x339) 3506505391)))
(assert (=> (<= x326 10000) (not (= x326 (x20 x327 x513)))))
(assert (=> (<= x254 10000) (not (= x254 (x20 x259 10)))))
(assert (not (= (x20 x327 x513) 2458934263)))
(assert (x210 x826))
(assert (not (= 18446744073709551615 (x20 x626 x339))))
(assert (x202 x644))
(assert (not (= 15 (x20 x259 10))))
(assert (x202 x327))
(assert (not (= 5000000 (x20 x254 x711))))
(assert (x202 x592))
(assert (x202 x469))
(assert (=> (<= x285 10000) (not (= (x20 x259 10) x285))))
(assert (x202 x178))
(assert (= (and (not x366) x335) x354))
(assert (x202 x54))
(assert (x202 x519))
(assert (not (= (x20 x254 x711) 743225245)))
(assert (x202 x504))
(assert (not (= (x20 0 17) 274184521717934524641157099916833587280)))
(assert (x202 x24))
(assert (not (= 112349551054952423155953805921267728290102753186399332250345724850365349756928 (x20 x169 x443))))
(assert (=> (>= 10000 x626) (not (= x626 (x20 x327 x513)))))
(assert (x202 x95))
(assert (x202 x478))
(assert (= x590 (and x627 x461)))
(assert (not (= 9 (x20 x169 x443))))
(assert (x202 x552))
(assert (not (= (x20 x259 10) 79228162514264337593543950335)))
(assert (x202 x757))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x20 x259 10))))
(assert (x202 x850))
(assert (x202 x681))
(assert (not (= (x20 x259 10) 361691454)))
(assert (not (= (x20 x259 10) 3573918927)))
(assert (=> (<= x259 10000) (not (= x259 (x20 x259 10)))))
(assert (x202 x743))
(assert (not (= 8 (x20 x626 x339))))
(assert (x202 x594))
(assert (not (= (x20 x626 x339) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x202 x817))
(assert (x202 x81))
(assert (not (= 15 (x20 x327 x513))))
(assert (= x797 (and x171 (not x511))))
(assert (not (= 0 (x20 x327 x513))))
(assert (= 0 (x306 x830)))
(assert (x202 x203))
(assert (= (and x793 x170) x840))
(assert (x202 x626))
(assert (not (= 8 (x20 x169 x443))))
(assert (x202 x129))
(assert (x202 x304))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x20 x169 x443))))
(assert (x202 x30))
(assert (x202 x1))
(assert (= x41 (and x50 x751)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x20 x327 x513))))
(assert (x202 x398))
(assert (x202 x294))
(assert (not (= (x20 x169 x443) 743225245)))
(assert (not (= 361691454 (x20 x626 x339))))
(assert (not (= 86400 (x20 x626 x339))))
(assert (not (= (x20 x169 x443) 826074471)))
(assert (= x777 (and (not x170) x793)))
(assert (x202 x416))
(assert (x202 x140))
(assert (not (= 2580288415 (x20 x626 x339))))
(assert (x202 x576))
(assert (not (= 361691454 (x20 x169 x443))))
(assert (not (= (x20 x254 x711) 8)))
(assert (=> (<= x327 10000) (not (= x327 (x20 x327 x513)))))
(assert (x202 x562))
(assert (x202 x232))
(assert (= x99 true))
(assert (x202 x263))
(assert (x202 x449))
(assert (not (= (x20 x259 10) 826074471)))
(assert (not (= 2379291291 (x20 0 17))))
(assert (= (and (not x596) x248) x600))
(assert (x202 x12))
(assert (not (= 3714247998 (x20 x327 x513))))
(assert (not (= (x20 x327 x513) 3028789119)))
(assert (x202 x161))
(assert (=> (<= x181 10000) (not (= (x20 x327 x513) x181))))
(assert (not (= (x20 x169 x443) 14)))
(assert (x202 x16))
(assert (not (= 1871194811 (x20 x169 x443))))
(assert (x202 x622))
(assert (not (= 3890975986 (x20 x327 x513))))
(assert (not (= 743225245 (x20 x626 x339))))
(assert (not (= 2127478272 (x20 0 17))))
(assert (x202 x563))
(assert (not (= (x20 x327 x513) 361691454)))
(assert (x202 x25))
(assert (= x85 (and (not x646) x438)))
(assert (x202 x219))
(assert (x202 x374))
(assert (not (= 1816029635 (x20 x254 x711))))
(assert (not (= (x20 x169 x443) 3002540418)))
(assert (not (= (x20 x327 x513) 743225245)))
(assert (= x308 (and (not x233) x83)))
(assert (not (= 3670205928 (x20 x626 x339))))
(assert (x202 x205))
(assert (= x335 (and x133 x853)))
(assert (= 0 (x306 x122)))
(assert (= (x306 x435) 0))
(assert (not (= 4167276458 (x20 x626 x339))))
(assert (x202 x619))
(assert (not (= (x20 x169 x443) 307731845)))
(assert (x202 x845))
(assert (x202 x10))
(assert (not (= 686821956 (x20 x254 x711))))
(assert (x202 x371))
(assert (not (= (x20 x327 x513) 1439069736)))
(assert (not (= (x20 x259 10) 112762432447299995021467288873193731040449111418389949397557428784167418593280)))
(assert (x202 x528))
(assert (not (= (x20 x169 x443) 79228162514264337593543950335)))
(assert (x202 x378))
(assert (x202 x447))
(assert (x202 x791))
(assert (not (= (x20 x626 x339) 307731845)))
(assert (x202 x187))
(assert (not (= (x20 x169 x443) 3586168516)))
(assert (x202 x779))
(assert (x202 x414))
(assert (= 0 (x306 x396)))
(assert (not (= 2966737888 (x20 x327 x513))))
(assert (not (= 238709543 (x20 x626 x339))))
(assert (x202 x451))
(assert (x202 x471))
(assert (x202 x182))
(assert (x202 x71))
(assert (= x733 (=> (and (= x431 x700) (= x526 1)) x615)))
(assert (=> (<= x232 10000) (not (= x232 (x20 x259 10)))))
(assert (not (= 826074471 (x20 x254 x711))))
(assert (not (= (x20 x254 x711) 13)))
(assert (x202 x404))
(assert (x202 x69))
(assert (not (= 1984976886 (x20 x327 x513))))
(assert (x202 x611))
(assert (x202 x177))
(assert (x202 x351))
(assert (not (= 2379291291 (x20 x327 x513))))
(assert (not (= 13 (x20 x259 10))))
(assert (x202 x40))
(assert (not (= (x20 x259 10) 228615836)))
(assert (=> (>= 10000 x254) (not (= (x20 x254 x711) x254))))
(assert (not (= 2458934263 (x20 0 17))))
(assert (x202 x717))
(assert (x202 x787))
(assert (not (= 2127478272 (x20 x626 x339))))
(assert (x202 x613))
(assert (not (= (x20 x259 10) 599290589)))
(assert (not (= 500647658 (x20 0 17))))
(assert (x202 x209))
(assert (not (= 115792089237316195417293883273301227089434195242512125785869492901042639077375 (x20 x626 x339))))
(assert (x202 x831))
(assert (x202 x310))
(assert (not (= 1738207182 (x20 x169 x443))))
(assert (not (= (x20 x327 x513) 3249860859)))
(assert (x202 x67))
(assert (x202 x722))
(assert (x202 x169))
(assert (not (= 20 (x20 x254 x711))))
(assert (x202 x72))
(assert (x202 x818))
(assert (x202 x156))
(assert (x202 x747))
(assert (not (= (x20 x626 x339) 3812870723)))
(assert (not (= (x20 0 17) 86400)))
(assert (x638 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (>= 10000 x254) (not (= (x20 x327 x513) x254))))
(assert (x202 x63))
(assert (x202 x457))
(assert (x202 x267))
(assert (not (= (x20 x259 10) 3249860859)))
(assert (x202 x849))
(assert (not (= 3366849169 (x20 x259 10))))
(assert (x202 x285))
(assert (not (= 3249860859 (x20 0 17))))
(assert (not (= 17 (x20 0 17))))
(assert (x202 x223))
(assert (=> (= (x20 x327 x513) (x20 x254 x711)) (and (= x513 x711) (= x327 x254))))
(assert (x202 x595))
(assert (not (= 86400 (x20 x259 10))))
(assert (not (= 112762432447299995021467288873193731040449111418389949397557428784167418593280 (x20 x327 x513))))
(assert (not (= (x20 x169 x443) 822145385)))
(assert (x202 x47))
(assert (not (= (x20 x254 x711) 3366849169)))
(assert (x202 x827))
(assert (=> (<= x326 10000) (not (= (x20 0 17) x326))))
(assert (not (= (x20 x254 x711) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x202 x664))
(assert (not (= (x20 x259 10) 5000000)))
(assert (x202 x554))
(assert (=> (<= x169 10000) (not (= x169 (x20 x169 x443)))))
(assert (= 0 (x306 x389)))
(assert (=> (<= x259 10000) (not (= x259 (x20 x254 x711)))))
(assert (not (= (x20 0 17) 10)))
(assert (= x655 (and (not x715) x652)))
(assert (x202 x78))
(assert (=> (>= 10000 x626) (not (= (x20 0 17) x626))))
(assert (x202 x103))
(assert (x202 x470))
(assert (= x744 (and x745 x216)))
(assert (not (= 20 (x20 x626 x339))))
(assert (x638 x374))
(assert (x202 x767))
(assert (= 0 (x306 x587)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x20 x626 x339))))
(assert (x202 x427))
(assert (x202 x839))
(assert (x638 6277101735386680763835789423128438253588091106870490562560))
(assert (= (and x167 x580) x437))
(assert (= (and x248 x596) x793))
(assert (x202 x514))
(assert (= (x306 x588) 0))
(assert (not (= (x20 x327 x513) 20)))
(assert (x202 x500))
(assert (not (= 16 (x20 x254 x711))))
(assert (= x19 (or x190 x309 x744 x240 x530)))
(assert (not (= (x20 x169 x443) 1531409238)))
(assert (x202 x284))
(assert (x202 x18))
(assert (x202 x704))
(assert (not (= (x20 x254 x711) 17)))
(assert (not (= (x20 x327 x513) 822145385)))
(assert (not (= 26 (x20 x169 x443))))
(assert (= (and x19 (not x293)) x559))
(assert (not (= (x20 0 17) 2863377861)))
(assert (not (= (x20 x254 x711) 3002540418)))
(assert (x202 x468))
(assert (x202 x320))
(assert (= x686 (and x674 (not x274))))
(assert (not (= 954831406 (x20 x327 x513))))
(assert (not (= 503383097 (x20 x259 10))))
(assert (not (= (x20 x626 x339) 3567393941)))
(assert (x202 x806))
(assert (=> (= (x20 0 17) (x20 x626 x339)) (and (= x339 17) (= 0 x626))))
(assert (= x150 (=> (and (and (= x93 (x7 160)) (= x257 (not (= 0 x72))) (= x162 (x7 128))) (and (and (= 1 x65) (= x142 (not (= 0 x93))) (= x142 x490) (= x722 1) (= x553 686821956) (= x193 (x578 x326)) (< 0 x193) (> 2127478272 x553) (not (= 599290589 x553)) (= x320 x851) (= x472 x320) (< x553 743225245) (> 954831406 x553) (not (> 596258137 x553)) (= x851 x162) (not (= x553 596258137)) (not (> 500647658 x553))) (and (and (= x229 (and x307 x529)) (= x307 (>= x472 1000)) (= x189 1000) (= 1000 x127)) (and (> 1871194811 x45) (= 1816029635 x45) (< 0 x345) (not (< x45 1439069736)) (not (< x45 954831406)) (= 1 x564) (not (> 1738207182 x45)) (> 2127478272 x45) (= x345 (x578 x326)) (not (= x45 1738207182)) (= 1000 x416))))) x229)))
(assert (not (= (x20 x259 10) 3567393941)))
(assert (x202 x301))
(assert (not (= 922701707 (x20 0 17))))
(assert (= x343 (and x288 x175)))
(assert (not (= (x20 x327 x513) 10)))
(assert (x638 x826))
(assert (x202 x265))
(assert (not (= 2417572732 (x20 x259 10))))
(assert (x202 x718))
(assert (=> (<= x232 10000) (not (= (x20 x626 x339) x232))))
(assert (not (= 519173431 (x20 x254 x711))))
(assert (x202 x544))
(assert (x202 x137))
(assert (x202 x15))
(assert (x202 x196))
(assert (not (= (x20 x327 x513) 910484757)))
(assert (x202 x775))
(assert (x202 x647))
(assert (x202 x556))
(assert (not (= (x20 x254 x711) 1862597803)))
(assert (not (= 3714247998 (x20 x169 x443))))
(assert (x202 x68))
(assert (= (or x600 x800) x264))
(assert (not (= (x20 x259 10) 743225245)))
(assert (x202 x609))
(assert (not (= (x20 x626 x339) 3028789119)))
(assert (not (= 2863377861 (x20 x626 x339))))
(assert (x202 x858))
(assert (x202 x419))
(assert (not (= 19 (x20 0 17))))
(assert (x202 x118))
(assert (x202 x464))
(assert (x202 x750))
(assert (not (= 2580288415 (x20 x327 x513))))
(assert (x202 x637))
(assert (not (= (x20 x254 x711) 100000)))
(assert (x202 x759))
(assert (x202 x706))
(assert (x202 x163))
(assert (=> (= (x20 x169 x443) (x20 x254 x711)) (and (= x169 x254) (= x443 x711))))
(assert (= x571 (=> (= x636 (not (< 1 x295))) (and x636 x332))))
(assert (x202 x269))
(assert (x202 x160))
(assert (x202 x256))
(assert (not (= (x20 x327 x513) 599290589)))
(assert (not (= (x20 x169 x443) 500647658)))
(assert (x202 x36))
(assert (not (= (x20 x259 10) (x20 0 17))))
(assert (x202 x430))
(assert (x202 x341))
(assert (=> (<= x259 10000) (not (= (x20 0 17) x259))))
(assert (not (= (x20 x259 10) 20)))
(assert (x758 x374))
(assert (x202 x848))
(assert (x202 x261))
(assert (x202 x803))
(assert (not (= (x20 x169 x443) 3812870723)))
(assert (not (= 3714247998 (x20 x626 x339))))
(assert (=> (>= 10000 x259) (not (= x259 (x20 x169 x443)))))
(assert (x202 x382))
(assert (not (= (x20 0 17) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x202 x65))
(assert (not (= (x20 0 17) 14)))
(assert (x202 x89))
(assert (x202 x302))
(assert (not (= (x20 0 17) 3051865383)))
(assert (x202 x492))
(assert (x202 x253))
(assert (not (= 2458934263 (x20 x254 x711))))
(assert (not (= 112762432447299995021467288873193731040449111418389949397557428784167418593280 (x20 0 17))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 (x20 x259 10))))
(assert (x202 x34))
(assert (not (= 307731845 (x20 x259 10))))
(assert (x202 x605))
(assert (x202 x212))
(assert (not (= (x20 0 17) 3996650231)))
(assert (not (= 2876725745 (x20 x327 x513))))
(assert (x202 x172))
(assert (not (= (x20 0 17) 4167276458)))
(assert (x202 x4))
(assert (x202 x254))
(assert (not (= 3051865383 (x20 x254 x711))))
(assert (= x377 (=> (and (= x255 (not (< 4 x829))) (= (x762 x588) x560) (>= 1461501637330902918203684832716283019655932542975 x560)) (and x649 x255))))
(assert (not (= (x20 x259 10) 1531409238)))
(assert (not (= 3586168516 (x20 x626 x339))))
(assert (x202 x358))
(assert (= x652 (and x814 x338)))
(assert (x202 x329))
(assert (x202 x11))
(assert (not (= 2064814097 (x20 x169 x443))))
(assert (x202 x127))
(assert (not (= 363856219 (x20 x254 x711))))
(assert (x202 x262))
(assert (x202 x570))
(assert (not (= 112349551054952423155953805921267728290102753186399332250345724850365349756928 (x20 x259 10))))
(assert (x202 x614))
(assert (not (= 115792089237316195417293883273301227089434195242512125785869492901042639077375 (x20 x327 x513))))
(assert (x202 x677))
(assert (x638 x584))
(assert (x202 x496))
(assert (x202 x79))
(assert (x202 x225))
(assert (=> (= (x20 0 17) (x20 x327 x513)) (and (= 0 x327) (= x513 17))))
(assert (x202 x271))
(assert (x638 x399))
(assert (x202 x629))
(assert (x202 x832))
(assert (x202 x445))
(assert (x312 x399))
(assert (not (= 1871194811 (x20 x254 x711))))
(assert (x202 x191))
(assert (x202 x188))
(assert (not (= (x20 x327 x513) 14)))
(assert (not (= (x20 x327 x513) 1738207182)))
(assert (x202 x589))
(assert (not (= (x20 x327 x513) 2039265891)))
(assert (= (or x510 x820) x585))
(assert (x202 x401))
(assert (= 0 (x306 x519)))
(assert (x202 x555))
(assert (not (= 910484757 (x20 x169 x443))))
(assert (not (= (x20 x626 x339) 3573918927)))
(assert (not (= (x20 0 17) 2039265891)))
(assert (x202 x183))
(assert (not (= (x20 x254 x711) 2863377861)))
(assert (not (= (x20 x169 x443) 238709543)))
(assert (x202 x148))
(assert (x202 x97))
(assert (= (x306 x540) 0))
(assert (x202 x357))
(assert (x202 x766))
(assert (not (= (x20 x626 x339) 3008386744)))
(assert (x202 x299))
(assert (=> (>= 10000 x254) (not (= x254 (x20 x169 x443)))))
(assert (not (= (x20 x254 x711) 2580288415)))
(assert (not (= 2863377861 (x20 x327 x513))))
(assert (x202 x104))
(assert (x202 x460))
(assert (x202 x45))
(assert (x202 x166))
(assert (not (= (x20 x254 x711) 3567393941)))
(assert (not (= 1862597803 (x20 x626 x339))))
(assert (x202 x634))
(assert (x202 x601))
(assert (x202 x690))
(assert (x202 x494))
(assert (x202 x675))
(assert (x202 x785))
(assert (not (= (x20 0 17) 519173431)))
(assert (x202 x678))
(assert (not (= 1840041978 (x20 x327 x513))))
(assert (x202 x112))
(assert (not (= 519173431 (x20 x626 x339))))
(assert (x202 x640))
(assert (x202 x864))
(assert (= (=> (and (= x293 (< 0 x135)) (not (< 18446744073709551615 x135)) (= x135 (x235 x775)) (= (> x177 x608) x697) (= (ite x287 1 0) x484) (= x775 (x512 (+ x182 160))) (not (< x178 x58)) (= (mod (* 32 x135) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x21) (= (< 18446744073709551615 x608) x583) (= x385 (x512 (+ x775 31))) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x178) (> x385 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x178) (<= x385 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x385 x178))) (= x601 (x512 (+ x177 32))) (not (< 18446744073709551615 x182)) (= (mod (* x135 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x842) (= x182 (x235 192)) (= x287 (or x583 x697)) (= (x512 (+ 32 x775)) x63) (= x608 (x512 (+ x740 x177))) (= 0 x484) (= x740 (x512 (+ 32 x21))) (= x58 (x512 (+ x842 x63)))) (and (=> (not x293) x426) (=> (and x293 (and (= x853 (< 1 x135)) (= (x512 (+ x63 32)) x389) (= x703 (x512 (+ x601 32))) (= x209 (x569 x63)))) (and (=> (and x853 (and (= x830 (x512 (+ x389 32))) (= (> x135 2) x366) (= x781 (x512 (+ x703 32))) (= x329 (x434 x389)))) (and (=> (not x366) x426) (=> (and (and (= (x512 (+ 32 x830)) x514) (= (x101 x830) x26) (= (> x135 3) x691) (= (x512 (+ x781 32)) x267)) x366) (and (=> x691 x214) (=> (not x691) x426))))) (=> (not x853) x426))))) x649))
(assert (=> (>= 10000 x259) (not (= (x20 x327 x513) x259))))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x20 x169 x443))))
(assert (x202 x228))
(assert (not (= (x20 x327 x513) 5000000)))
(assert (= (and x585 (not x836)) x252))
(assert (x202 x616))
(assert (x202 x705))
(assert (= x83 (and x520 x264)))
(assert (not (= (x20 x254 x711) 1779675522)))
(assert (not (= 3002540418 (x20 0 17))))
(assert (x202 x735))
(assert (x202 x648))
(assert (not (= (x20 0 17) 3567393941)))
(assert (= x579 (or x437 x165)))
(assert (x202 x37))
(assert (x202 x147))
(assert (x202 x185))
(assert (not (= 19 (x20 x626 x339))))
(assert (x202 x132))
(assert (= x467 (or x686 x124)))
(assert (x202 x281))
(assert (not (= (x20 x327 x513) 26)))
(assert (x202 x792))
(assert (x202 x369))
(assert (not (= (x20 x259 10) 238709543)))
(assert (not (= (x20 x626 x339) 13)))
(assert (= x574 (and x577 (not x691))))
(assert (not (= 1779675522 (x20 0 17))))
(assert (not (= (x20 x169 x443) 0)))
(assert (not (= (x20 0 17) 503383097)))
(assert (not (= 954831406 (x20 0 17))))
(assert (x202 x43))
(assert (not (= 115792089237316195417293883273301227089434195242512125785869492901042639077375 (x20 0 17))))
(assert (x111 x612))
(assert (=> (<= x458 10000) (not (= x458 (x20 x626 x339)))))
(assert (x202 x550))
(assert (not (= 0 (x20 x254 x711))))
(assert (x202 x146))
(assert (= x123 (and (not x154) x99)))
(assert (not (= 16 (x20 x626 x339))))
(assert (not (= 115792089237316195417293883273301227089434195242512125785869492901042639077375 (x20 x259 10))))
(assert (x202 x844))
(assert (not (= 922701707 (x20 x327 x513))))
(assert (x202 x230))
(assert (not (= (x20 0 17) 3670205928)))
(assert (x202 x322))
(assert (not (= (x20 x254 x711) 112762432447299995021467288873193731040449111418389949397557428784167418593280)))
(assert (x202 x384))
(assert (x202 x539))
(assert (not (= 4294967296 (x20 x626 x339))))
(assert (x202 x291))
(assert (not (= (x20 0 17) 1738207182)))
(assert (=> (>= 10000 x169) (not (= (x20 x259 10) x169))))
(assert (not (= (x20 x626 x339) 3249860859)))
(assert (not (= (x20 x259 10) 2863377861)))
(assert (not (= (x20 x327 x513) 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (not (= 1779675522 (x20 x327 x513))))
(assert (x202 x740))
(assert (not (= 238709543 (x20 x327 x513))))
(assert (x202 x720))
(assert (x202 x159))
(assert (not (= 1984976886 (x20 x169 x443))))
(assert (x202 x645))
(assert (x202 x70))
(assert (x202 x633))
(assert (x202 x813))
(assert (not (= (x20 0 17) 3812870723)))
(assert (not (= 1531409238 (x20 x327 x513))))
(assert (not (= 9 (x20 0 17))))
(assert (not (= (x20 x254 x711) 115792089237316195417293883273301227089434195242512125785869492901042639077375)))
(assert (= (x306 x508) 0))
(assert (not (= 1871194811 (x20 0 17))))
(assert (not (= (x20 x169 x443) 16)))
(assert (not (= 1779675522 (x20 x626 x339))))
(assert (= (and x50 (not x751)) x240))
(assert (x202 x846))
(assert (not (= 3224796394 (x20 0 17))))
(assert (x202 x515))
(assert (x202 x201))
(assert (x202 x6))
(assert (x202 x587))
(assert (not (= (x20 x259 10) 100000)))
(assert (x202 x749))
(assert (not (= (x20 x259 10) 3670205928)))
(assert (x202 x61))
(assert (=> (<= x458 10000) (not (= x458 (x20 x169 x443)))))
(assert (not (= 519173431 (x20 x169 x443))))
(assert (= (and (not x814) x338) x820))
(assert (not (= (x20 x259 10) 3890975986)))
(assert (not (= 3506505391 (x20 x254 x711))))
(assert (= x409 (=> (and (= x469 (x599 x608)) (= (x20 x626 x339) x443) (> x469 0) (= (x20 x259 10) x711) (= x626 (x599 x540)) (= x594 (x512 (+ 1 x55))) (= x114 (x20 x327 x513)) (= (x599 x608) x850) (= (x599 x540) x254) (= x327 (x599 x519)) (= x339 (x20 x259 10)) (> x78 0) (= x612 (x373 9)) (= x11 0) (= (x761 x411) x78) (= x411 (x20 x169 x443)) (= (x512 (+ 32 x608)) x540) (> x850 1) (= x55 (x525 115792089237316195423570985008687907853269984665640564039457584007913129639680 x612)) (= x169 (x599 x519)) (= x513 (x20 x254 x711)) (= x854 (x761 x114)) (= x519 (x512 (+ x540 32))) (= x836 (< 0 x295))) (and (=> (not x836) x332) (=> (and (and (and (= (= x36 1) x167) (= (x742 x236 6) x399) (= 6 x262) (= x36 (x525 1 x399))) (or (not x167) (and x167 (and (= x77 x59) (= x576 96) (= x702 160) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x834) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x834)) (< x834 32)))) (= (x810 (- x350 4)) x710) (= (x20 0 17) x402) (= x292 255) (= x482 160) (= x759 96) (= x420 (x20 0 17)) (= x310 x396) (= x629 (x525 115792089237316195417293883273301227089434195242512125785869492901042639077375 x562)) (= x5 x539) (= (x549 x402) x77) (= (ite (>= 79228162514264337593543950335 x172) x640 x701) x364) (= x657 x826) (> x689 0) (not (= x37 1779675522)) (= (x512 (+ x172 x31)) x640) (= (x512 (+ x172 x31)) x701) (= x59 x657) (= 112349551054952423155953805921267728290102753186399332250345724850365349756928 x769) (= 4167276458 x37) (not x407) (= (x512 (+ 32 x787)) x433) (= x509 96) (= x779 (x578 274184521717934524641157099916833587280)) (= (x695 x552 96) x31) (= (x91 64) x787) (= x562 x59) (not (< x350 4)) (= x633 x350) (= x128 0) (= x863 (x512 (+ 32 x5))) (not (= x779 0)) (= x834 (x810 (- x433 x265))) (= x604 (x542 x396)) (not (= 3028789119 x37)) (= (x512 (+ x310 4)) x5) (= x172 x629) (= x265 (x136 64)) (= (> 32 x710) x407) (= (x810 (- x863 x310)) x633) (= (x525 79228162514264337593543950335 x826) x552) (= x350 36) (= x689 (x578 x326)))))) x836) x571)))))
(assert (x202 x106))
(assert (x202 x345))
(assert (= x338 (or x812 x816)))
(assert (= 0 (x306 160)))
(assert (= x251 (=> (and (= x654 x259) (= 1 x241)) x409)))
(assert (not (= 2417572732 (x20 x327 x513))))
(assert (x202 x502))
(assert (x202 x854))
(assert (x202 x789))
(assert (x202 x689))
(assert (= x800 (or x777 x840)))
(assert (x202 x597))
(assert (=> (<= x254 10000) (not (= (x20 x626 x339) x254))))
(assert (x202 x772))
(assert (x202 x57))
(assert (not (= (x20 0 17) 3573918927)))
(assert (x202 x74))
(assert (x202 x769))
(assert (x202 x391))
(assert (x202 x204))
(assert (x202 x246))
(assert (x202 x2))
(assert (x202 x319))
(assert (not (= 15 (x20 0 17))))
(assert (not (= 1816029635 (x20 x327 x513))))
(assert (x202 x805))
(assert (not (= (x20 x254 x711) 3996650231)))
(assert (x202 x508))
(assert (x202 x760))
(assert (not (= 2039265891 (x20 x254 x711))))
(assert (x202 x535))
(assert (x52 x626))
(assert (not (= 3567393941 (x20 x327 x513))))
(assert (x202 x639))
(assert (x202 x423))
(assert (= x22 (=> (and (= x319 (x245 x608)) (= x323 (< 0 x319))) (and (=> (not x323) x342) (=> x323 x388)))))
(assert (x202 x665))
(assert (not (= (x20 x254 x711) 2127478272)))
(assert (= (x306 x514) 0))
(assert (not (= (x20 x254 x711) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x202 x280))
(assert (x202 x421))
(assert (not (= 363856219 (x20 x626 x339))))
(assert (not (= 1984976886 (x20 x626 x339))))
(assert (x202 x851))
(assert (x202 x543))
(assert (x202 x642))
(assert (x202 x479))
(assert (x202 x392))
(assert (x202 x296))
(assert (= x244 (or x330 x85)))
(assert (x52 x339))
(assert (not (= (x20 x626 x339) 1738207182)))
(assert (x202 x798))
(assert (x202 x572))
(assert (not (= 500647658 (x20 x259 10))))
(assert (not (= (x20 x254 x711) 599290589)))
(assert (= (x360 (+ (- x396 x310) x265)) 0))
(assert (x202 x654))
(assert (=> (= (x20 x259 10) (x20 x169 x443)) (and (= x259 x169) (= x443 10))))
(assert (x202 x702))
(assert (x202 x126))
(assert (not (= 3366849169 (x20 x169 x443))))
(assert (x202 x621))
(assert (=> (<= x626 10000) (not (= (x20 x259 10) x626))))
(assert (not (= 3224796394 (x20 x169 x443))))
(assert (x202 x88))
(assert (not (= (x20 x327 x513) 3506505391)))
(assert (=> (>= 10000 x169) (not (= x169 (x20 x327 x513)))))
(assert (x202 x612))
(assert (x202 x173))
(assert (not (= 9 (x20 x254 x711))))
(assert (not (= (x20 x327 x513) 3573918927)))
(assert (x202 x682))
(assert (not (= 1840041978 (x20 0 17))))
(assert (not (= 922701707 (x20 x626 x339))))
(assert (=> (>= 10000 x626) (not (= x626 (x20 x626 x339)))))
(assert (x202 x796))
(assert (=> (>= 10000 x285) (not (= x285 (x20 x254 x711)))))
(assert (x202 x673))
(assert (x202 x145))
(assert (x202 x239))
(assert (x202 x487))
(assert (x202 x465))
(assert (x202 x830))
(assert (x202 x270))
(assert (not (= 1738207182 (x20 x259 10))))
(assert (x202 x21))
(assert (=> (>= 10000 x458) (not (= (x20 0 17) x458))))
(assert (x202 x676))
(assert (= (div x67 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x742 x67 255)))
(assert (= (or x283 x328) x390))
(assert (x202 x799))
(assert (not (= 14 (x20 x626 x339))))
(assert (x202 x547))
(assert (x202 x8))
(assert (x202 x558))
(assert (not (= (x20 x254 x711) 15)))
(assert (=> (>= 10000 x181) (not (= (x20 x626 x339) x181))))
(assert (x202 x531))
(assert (x202 x164))
(assert (x202 x387))
(assert (=> (>= 10000 x181) (not (= (x20 x254 x711) x181))))
(assert (not (= 2064814097 (x20 0 17))))
(assert (x202 x26))
(assert (x202 x651))
(assert (not (= 3249860859 (x20 x254 x711))))
(assert (x202 x383))
(assert (x202 x771))
(assert (x202 x532))
(assert (x202 x824))
(assert (not (= (x20 x626 x339) 2039265891)))
(assert (x202 x795))
(assert (not (= 18446744073709551615 (x20 0 17))))
(assert (x202 x603))
(assert (=> (<= x169 10000) (not (= (x20 x254 x711) x169))))
(assert (=> (= (x20 x327 x513) (x20 x626 x339)) (and (= x327 x626) (= x513 x339))))
(assert (x202 x266))
(assert (not (= 2876725745 (x20 x254 x711))))
(assert (not (= (x20 0 17) 1816029635)))
(assert (x202 x734))
(assert (= (and x511 x171) x288))
(assert (=> (= (x20 x327 x513) (x20 x169 x443)) (and (= x169 x327) (= x513 x443))))
(assert (x202 x768))
(assert (not (= (x20 x327 x513) 3366849169)))
(assert (x202 x168))
(assert (x202 x458))
(assert (not (= 822145385 (x20 x626 x339))))
(assert (x202 x359))
(assert (=> (>= 10000 x458) (not (= x458 (x20 x254 x711)))))
(assert (x202 x379))
(assert (= (or x473 x308) x328))
(assert (x638 x612))
(assert (x202 x852))
(assert (not (= (x20 x626 x339) 9)))
(assert (= x473 (and x83 x233)))
(assert (not (= (x20 x169 x443) 1779675522)))
(assert (not (= 3996650231 (x20 x626 x339))))
(assert (x202 x415))
(assert (not (= (x20 x259 10) 2458934263)))
(assert (=> (>= 10000 x327) (not (= (x20 x254 x711) x327))))
(assert (x202 x59))
(assert (not (= 686821956 (x20 x626 x339))))
(assert (x202 x75))
(assert (x202 x477))
(assert (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x20 x259 10))))
(assert (not (= (x20 x259 10) 954831406)))
(assert (not (= 2064814097 (x20 x327 x513))))
(assert (not x144))
(assert (not (= (x20 x169 x443) 2379291291)))
(assert (not (= (x20 x254 x711) 19)))
(assert (not (= (x20 x169 x443) 228615836)))
(assert (not (= 3996650231 (x20 x259 10))))
(assert (not (= 19 (x20 x169 x443))))
(assert (= (x742 x236 6) (div x236 64)))
(assert (not (= (x20 x327 x513) 18446744073709551615)))
(assert (not (= (x20 x626 x339) 1840041978)))
(assert (not (= (x20 x169 x443) 4167276458)))
(assert (not (= (x20 0 17) 16)))
(assert (not (= 2272211003 (x20 x254 x711))))
(assert (x638 1))
(assert (x202 x55))
(assert (not (= 1816029635 (x20 x169 x443))))
(assert (x202 x586))
(assert (x638 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (= x221 (or x252 x579)))
(assert (x202 x602))
(assert (not (= (x20 x169 x443) 3573918927)))
(assert (not (= (x20 x254 x711) 503383097)))
(assert (not (= (x20 0 17) 2580288415)))
(assert (not (= (x20 x259 10) 363856219)))
(assert (not (= (x20 x259 10) 2580288415)))
(assert (not (= (x20 0 17) 3506505391)))
(assert (not (= 5000000 (x20 x626 x339))))
(assert (x202 x431))
(assert (not (= 2417572732 (x20 x254 x711))))
(assert (not (= 2417572732 (x20 0 17))))
(assert (x202 x46))
(assert (not (= 1531409238 (x20 x626 x339))))
(assert (x202 x721))
(assert (= x480 (and x288 (not x175))))
(assert (not (= (x20 x327 x513) 274184521717934524641157099916833587280)))
(assert (not (= (x20 x259 10) 2876725745)))
(assert (x202 x303))
(assert (= (and x461 (not x627)) x498))
(assert (not (= (x20 x254 x711) 910484757)))
(assert (not (= (x20 x254 x711) 79228162514264337593543950335)))
(assert (x202 x774))
(assert (x202 x108))
(assert (x202 x847))
(assert (x202 x5))
(assert (x202 x38))
(assert (=> (= (x20 x254 x711) (x20 x626 x339)) (and (= x254 x626) (= x339 x711))))
(assert (x202 x260))
(assert (not (= 307731845 (x20 x254 x711))))
(assert (not (= (x20 x259 10) 1840041978)))
(assert (not (= (x20 x169 x443) 599290589)))
(assert (not (= (x20 x254 x711) 3224796394)))
(assert (not (= 26 (x20 x259 10))))
(assert (not (= (x20 x626 x339) 500647658)))
(assert (x202 x788))
(assert (not (= 4167276458 (x20 x327 x513))))
(assert (x202 x135))
(assert (not (= 363856219 (x20 x169 x443))))
(assert (x202 x436))
(assert (=> (<= x181 10000) (not (= x181 (x20 x169 x443)))))
(assert (x202 x42))
(assert (not (= 112349551054952423155953805921267728290102753186399332250345724850365349756928 (x20 x626 x339))))
(assert (not (= 2580288415 (x20 x169 x443))))
(assert (x202 x688))
(assert (not (= 3051865383 (x20 x259 10))))
(assert (x202 x276))
(assert (= x49 (=> (and (= x720 x201) (= 1 x522)) x87)))
(assert (x202 x295))
(assert (= (x695 x552 96) (mod (* x552 79228162514264337593543950336) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (not (= (x20 x169 x443) 100000)))
(assert (x202 x489))
(assert (x202 x819))
(assert (not (= (x20 x626 x339) 3890975986)))
(assert (not (= 3249860859 (x20 x169 x443))))
(assert (not (= (x20 x169 x443) 4294967296)))
(assert (x202 x866))
(assert (not (= (x20 x327 x513) 1862597803)))
(assert (=> (>= 10000 x232) (not (= x232 (x20 x327 x513)))))
(assert (x202 x31))
(assert (x202 x865))
(assert (not (= (x20 x259 10) 2272211003)))
(assert (= x133 (and x19 x293)))
(assert (x202 x53))
(assert (= x674 (and x99 x154)))
(assert (x202 x808))
(assert (x202 x300))
(assert (x202 x273))
(assert (x202 x545))
(assert (x202 x432))
(assert (not (= 922701707 (x20 x254 x711))))
(assert (x52 x513))
(assert (x202 x318))
(assert (x202 x565))
(assert (=> (= (x20 x259 10) (x20 x254 x711)) (and (= x259 x254) (= 10 x711))))
(assert (x202 x446))
(assert (=> (<= x327 10000) (not (= (x20 x169 x443) x327))))
(assert (=> (>= 10000 x326) (not (= x326 (x20 x259 10)))))
(assert (x202 x523))
(assert (not (= 1738207182 (x20 x254 x711))))
(assert (not (= (x20 x254 x711) 3008386744)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x20 x327 x513))))
(assert (x202 x456))
(assert (x202 x643))
(assert (not (= (x20 x254 x711) 3812870723)))
(assert (x202 x755))
(assert (=> (>= 10000 x232) (not (= x232 (x20 x169 x443)))))
(assert (not (= (x20 x259 10) 2039265891)))
(assert (= x426 (=> (and (and (= (x413 x177) x617) (not (< 18446744073709551615 x160)) (= x646 (= 0 x160)) (= x531 (mod (* 32 x160) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x160 (x810 (- x617 1))) (= x523 (x512 (+ x531 32))) (= x310 (x512 (+ x608 x523)))) (or x646 (and (and (= x704 (mod (* x160 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x512 (+ x608 32)) x16)) (not x646)))) x22)))
(assert (x202 x741))
(assert (not (= (x20 x626 x339) 0)))
(assert (x202 x484))
(assert (not (= (x20 0 17) 100000)))
(assert (x202 x227))
(assert (x202 x199))
(assert (x202 x459))
(assert (not (= (x20 x254 x711) 18446744073709551615)))
(assert (x202 x474))
(assert (= x190 (and x41 (not x184))))
(assert (x202 x211))
(assert (= x790 (and (not x153) x856)))
(assert (x202 x784))
(assert (not (= 274184521717934524641157099916833587280 (x20 x259 10))))
(assert (x202 x727))
(assert (not (= (x20 0 17) 826074471)))
(assert (x202 x726))
(assert (x202 x692))
(assert (x202 x725))
(assert (x202 x857))
(assert (not (= (x20 0 17) 79228162514264337593543950335)))
(assert (not (= (x20 x626 x339) 15)))
(assert (not (= 1871194811 (x20 x327 x513))))
(assert (= x461 (and x856 x153)))
(assert (x202 x365))
(assert (x202 x33))
(assert (not (= 26 (x20 x626 x339))))
(assert (x202 x380))
(assert (x202 x28))
(assert (x202 x617))
(assert (x202 x56))
(assert (not (= 1984976886 (x20 x259 10))))
(assert (x202 x781))
(assert (x202 x222))
(assert (x202 x149))
(assert (x202 x385))
(assert (not (= 13 (x20 x327 x513))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x20 0 17))))
(assert (x202 x356))
(assert (x202 x694))
(assert (not (= 2039265891 (x20 x169 x443))))
(assert (x202 x340))
(assert (not (= 3008386744 (x20 x327 x513))))
(assert (= (or x590 x498) x485))
(assert (x202 x337))
(assert (not (= (x20 x327 x513) 112349551054952423155953805921267728290102753186399332250345724850365349756928)))
(assert (= (and x438 x646) x330))
(assert (not (= (x20 x169 x443) 20)))
(assert (= x452 (=> (and (= x642 1) (= x110 x849)) x279)))
(assert (not (= (x20 0 17) 8)))
(assert (= (=> (and (= (x373 16) x752) (= x2 (x373 13)) (= (x373 14) x492) (= (> x752 x48) x814) (= (x373 15) x81)) (and (=> (and (and (= x715 (< x2 x492)) (or (and x715 (and (= (x810 (- x752 x81)) x449) (= (x810 (- x48 x81)) x681) (< 0 x449) (= x541 (mod (* x681 x839) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x847 (x512 (+ x532 x2))) (= x654 x847) (= x532 (div x541 x449)) (= x839 (x810 (- x492 x2))))) (and (and (= (x810 (- x2 x344)) x205) (= x188 (x810 (- x48 x81))) (= x735 (mod (* x376 x188) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x824 (x810 (- x752 x81))) (< 0 x824) (= x344 (div x735 x824)) (= x205 x654) (= x376 (x810 (- x2 x492)))) (not x715)))) x814) x251) (=> (and (and (= x492 x259) (= x241 0)) (not x814)) x409))) x342))
(assert (=> (>= 10000 x181) (not (= (x20 0 17) x181))))
(assert (x202 x325))
(assert (not (= 596258137 (x20 x169 x443))))
(assert (x202 x778))
(assert (x202 x710))
(assert (not (= 16 (x20 x259 10))))
(assert (not (= 100000 (x20 x626 x339))))
(assert (x202 x657))
(assert (= x50 (and (not x200) x390)))
(assert (x202 x32))
(assert (x202 x116))
(assert (not (= (x20 x259 10) 10)))
(assert (not (= (x20 x327 x513) 3670205928)))
(assert (= (x306 192) 0))
(assert (not (= 3224796394 (x20 x259 10))))
(assert (= x348 (or x343 x480)))
(assert (not (= 1862597803 (x20 0 17))))
(assert (not (= 2127478272 (x20 x259 10))))
(assert (not (= (x20 x254 x711) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x20 x169 x443) 2417572732)))
(assert (=> (>= 10000 x169) (not (= x169 (x20 0 17)))))
(assert (x202 x701))
(assert (x638 x846))
(assert (x202 x17))
(assert (not (= (x20 x254 x711) 3670205928)))
(assert (x202 x486))
(assert (x202 x368))
(assert (not (= 86400 (x20 x327 x513))))
(assert (= (=> (and (= x783 (not (> x135 4))) (= (x125 x514) x671)) (and x783 x426)) x214))
(assert (not (= 3890975986 (x20 0 17))))
(assert (x202 x344))
(assert (not (= (x20 x254 x711) 596258137)))
(assert (not (= (x20 x327 x513) 16)))
(assert (not (= 3224796394 (x20 x626 x339))))
(assert (x202 x439))
(assert (not (= (x20 0 17) 238709543)))
(assert (x202 x660))
(assert (not (= (x20 0 17) 686821956)))
(assert (x202 x804))
(assert (not (= 10 (x20 x169 x443))))
(assert (x202 x138))
(assert (= (=> (and (and (and (not (> 500647658 x750)) (= x750 686821956) (= x137 1) (= (x578 x326) x415) (> 954831406 x750) (= x24 x865) (not (= 596258137 x750)) (= (not (= x270 0)) x708) (< x750 2127478272) (not (= x750 599290589)) (< 0 x415) (= x231 x865) (= 1 x760) (= x361 x708) (> 743225245 x750) (not (< x750 596258137)) (= x445 x24)) (and (and (< 0 x664) (= (x578 x326) x664) (= x173 1) (not (< x515 1439069736)) (not (< x515 954831406)) (= 1000 x4) (< x515 1871194811) (= 1816029635 x515) (> 2127478272 x515) (not (= 1738207182 x515)) (not (> 1738207182 x515))) (and (= x614 1000) (= x194 (< 0 x565)) (= x418 (not x698)) (= (x525 57896044618658097711785492504343953926634992332820282019728792003956564819967 x846) x281) (not (= 2417572732 x677)) (= x565 x284) (= 0 x44) (= (= 0 x565) x698) (= x62 (<= 1000 x231)) (> x290 0) (> 2580288415 x677) (= x545 (ite x418 1 0)) (>= x505 0) (= x447 x565) x623 (= x688 x368) (= (and x62 x764) x623) (= x677 2458934263) (<= x159 1461501637330902918203684832716283019655932542975) (= x391 (x362 8)) (= x565 x545) (= (ite x194 1 0) x459) (= (x695 x459 255) x422) (<= x505 1461501637330902918203684832716283019655932542975) (= x408 x368) (= x384 (x810 (- x503 4))) (= (x578 x326) x290) (not (= 2379291291 x677)) (<= 0 x159) (= x156 255) (not (> 4 x503)) (>= x688 0) (= (x512 (+ x422 x281)) x460) (= x44 x819) (= x846 x391) (= x30 x505) (not (> 2127478272 x677)) (not (> 2272211003 x677)) (not (< x677 2379291291)) (> 3224796394 x677) (= (> x565 0) x200) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x503) true) (> x503 35)) (not (or (and (< x384 32) (= (<= x384 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x384))) (>= 1461501637330902918203684832716283019655932542975 x688) (= 1000 x395) (= (not (= x447 0)) x143)))) (and (= (x249 160) x270) (= x192 (not (= x522 0))) (= (x249 128) x445))) (and (=> x200 x242) (=> (and (and (not (or (> x423 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 96 x423) (= (<= x423 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (not (> x694 x178)) (= x211 0) (= (x512 (+ x261 32)) x665) (not (= 0 x643)) (= (x512 (+ 160 x197)) x42) (= (x512 (+ 32 x587)) x122) (= x643 (x578 x232)) (= (x512 (+ x665 x42)) x177) (= (ite x317 1 0) x211) (= (mod (* x829 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x261) (= (x512 (+ x122 x844)) x694) (= (< x177 x42) x13) (> 4294967296 x423) (not (< 18446744073709551615 x789)) (= x743 (x512 (+ x587 31))) (= (mod (* x829 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x844) (= x197 (x525 115792089237316195423570985008687907853269984665640564039457584007913129639904 x584)) (= x751 (< 0 x829)) (= x789 (x859 160)) (not (< 18446744073709551615 x829)) (= x179 (< 18446744073709551615 x177)) (= x317 (or x13 x179)) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x178) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x743)) (< x743 x178)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x178) (> x743 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 0 x517)) (= (x512 (+ 160 x423)) x178) (= x587 (x512 (+ x789 160))) (= (x512 (+ x42 32)) x778) (= x584 (x512 (+ 31 x423))) (= x829 (x859 x587))) (not x200)) (and (=> (not x751) x649) (=> (and x751 (and (= x561 (x828 x122)) (= (x512 (+ 32 x778)) x446) (= x258 (x512 (+ x122 32))) (= x184 (< 1 x829)) (>= 1461501637330902918203684832716283019655932542975 x561))) (and (=> (and (and (<= x645 1461501637330902918203684832716283019655932542975) (= (> x829 2) x728) (= (x512 (+ x258 32)) x508) (= x645 (x463 x258)) (= x729 (x512 (+ x446 32)))) x184) (and (=> (and x728 (and (<= x180 1461501637330902918203684832716283019655932542975) (= x180 (x663 x508)) (= x588 (x512 (+ 32 x508))) (= x216 (< 3 x829)) (= (x512 (+ 32 x729)) x845))) (and (=> x216 x377) (=> (not x216) x649))) (=> (not x728) x649))) (=> (not x184) x649))))))) x87))
(assert (x202 x488))
(assert (x202 x23))
(assert (x202 x93))
(assert (x202 x180))
(assert (not (= (x20 x254 x711) 228615836)))
(assert (x52 x169))
(assert (x202 x641))
(assert (x202 x176))
(assert (not (= (x20 x327 x513) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x289 x562))
(assert (x202 x424))
(assert (not (= 743225245 (x20 0 17))))
(assert (x202 x206))
(assert (not (= 3670205928 (x20 x169 x443))))
(assert (not (= (x20 x626 x339) 1871194811)))
(assert (=> (<= x626 10000) (not (= (x20 x254 x711) x626))))
(assert (not (= 2127478272 (x20 x327 x513))))
(assert (x52 x259))
(assert (x202 x3))
(assert (x202 x417))
(assert (not (= (x20 x254 x711) 4167276458)))
(assert (x202 x499))
(assert (not (= 503383097 (x20 x626 x339))))
(assert (x52 x443))
(assert (x202 x315))
(assert (x202 x696))
(assert (not (= 599290589 (x20 0 17))))
(assert (not (= 17 (x20 x626 x339))))
(assert (=> (>= 10000 x285) (not (= (x20 x626 x339) x285))))
(assert (not (= 596258137 (x20 x327 x513))))
(assert (=> (>= 10000 x181) (not (= x181 (x20 x259 10)))))
(assert (not (= 2876725745 (x20 x626 x339))))
(assert (x202 x765))
(assert (x52 x232))
(assert (=> (<= x285 10000) (not (= (x20 0 17) x285))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x20 x626 x339))))
(assert (not (= 822145385 (x20 x254 x711))))
(assert (not (= 826074471 (x20 x327 x513))))
(assert (not (= 3002540418 (x20 x259 10))))
(assert (=> (= (x20 0 17) (x20 x169 x443)) (and (= 0 x169) (= x443 17))))
(assert (not (= 10 (x20 x626 x339))))
(assert (=> (= (x20 x259 10) (x20 x327 x513)) (and (= x259 x327) (= x513 10))))
(assert (x202 x625))
(assert (not (= 1439069736 (x20 x626 x339))))
(assert (= (and x728 x298) x745))
(assert (x202 x113))
(assert (not (= 13 (x20 0 17))))
(assert (x202 x834))
(assert (not (= 112349551054952423155953805921267728290102753186399332250345724850365349756928 (x20 0 17))))
(assert (not (= 3586168516 (x20 x259 10))))
(assert (=> (= (x20 x169 x443) (x20 x626 x339)) (and (= x339 x443) (= x169 x626))))
(assert (not (= (x20 x327 x513) 2272211003)))
(assert (not (= (x20 x626 x339) 2966737888)))
(assert (x202 x134))
(assert (x202 x476))
(assert (x202 x433))
(assert (not (= 2064814097 (x20 x259 10))))
(assert (x202 x666))
(assert (x202 x564))
(assert (not (= 3890975986 (x20 x169 x443))))
(assert (x202 x723))
(assert (not (= 3567393941 (x20 x169 x443))))
(assert (x52 x711))
(assert (not (= (x20 x327 x513) 519173431)))
(assert (not (= (x20 x169 x443) 3028789119)))
(assert (not (= (x20 x169 x443) 2127478272)))
(assert (x202 x584))
(assert (x202 x174))
(assert (=> (<= x232 10000) (not (= x232 (x20 0 17)))))
(assert (not (= 274184521717934524641157099916833587280 (x20 x254 x711))))
(assert (not (= (x20 0 17) 822145385)))
(assert (x202 x66))
(assert (x202 x546))
(assert (x202 x435))
(assert (not (= 3714247998 (x20 x254 x711))))
(assert (not (= (x20 x169 x443) 1439069736)))
(assert (x202 x794))
(assert (not (= 2417572732 (x20 x626 x339))))
(assert (x202 x700))
(assert (x202 x842))
(assert (x202 x527))
(assert (x202 x466))
(assert (= (=> (and (and (and (< 0 x841) (> 596258137 x116) (< x116 2127478272) (= x468 5000) (not (= 503383097 x116)) (= x634 x757) (not (= 500647658 x116)) (= x481 (not (= 0 x470))) (= 519173431 x116) (< x116 954831406) (not (> 500647658 x116)) (> 743225245 x116) (= x475 x563) (= x822 5000) (= x634 x563) (= (x578 x326) x841) (= x716 x481)) (and (and (= x591 x557) (= x456 x359) (= (< x359 x147) x511) (<= x280 1461501637330902918203684832716283019655932542975) (= x477 x23) (= x529 (<= x475 5000000)) (= x555 (x35 15)) (>= 1461501637330902918203684832716283019655932542975 x314) (= (x35 14) x653) (= x496 x208) (not (< x602 2127478272)) (>= x314 0) (= x280 x591) (= 1000 x185) (> 3224796394 x602) (= x535 0) (= x535 x301) (not (< x602 2580288415)) (= x504 x260) (= x299 x12) (= x557 x714) (not (< x602 2863377861)) (= x69 x68) (not (< x602 3008386744)) (> x166 0) (>= 1461501637330902918203684832716283019655932542975 x496) (= x602 3051865383) (= x719 5000000) (= (x35 13) x796) (<= 0 x496) (>= x280 0) (= x166 (x578 x326)) (= x803 x208) (= (x35 16) x147) (not (= 3008386744 x602)) (= x301 x38) (= x537 x243)) (and (= x346 (x578 x326)) (> x346 0) (< x18 1871194811) (not (> 1738207182 x18)) (not (= x18 1738207182)) (< x18 2127478272) (= 1000 x97) (not (> 1439069736 x18)) (not (< x18 954831406)) (= x683 5000) (= x18 1816029635)))) (and (= (x331 160) x470) (= (x331 128) x757) (= x709 (not (= x642 0))))) (and (=> (and (not x511) (and (= x72 0) (= x586 x653))) x150) (=> (and (and (= (< x796 x653) x175) (or (and (and (= x731 (div x271 x805)) (= x444 (x810 (- x653 x796))) (= x772 (x810 (- x359 x555))) (= x271 (mod (* x772 x444) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x848 x163) (= (x810 (- x147 x555)) x805) (= (x512 (+ x796 x731)) x848) (< 0 x805)) x175) (and (not x175) (and (< 0 x286) (= x286 (x810 (- x147 x555))) (= (x810 (- x796 x653)) x263) (= x163 x40) (= x40 (x810 (- x796 x705))) (= x372 (mod (* x673 x263) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x673 (x810 (- x359 x555))) (= (div x372 x286) x705))))) x511) x860))) x279))
(assert (= (or x354 x336 x575 x574 x559) x438))
(assert (x202 x822))
(assert (x202 x236))
(assert (not (= (x20 x626 x339) 228615836)))
(assert (x202 x668))
(assert (x202 x684))
(assert (x202 x234))
(assert (x202 x155))
(assert (= x812 (and (not x323) x244)))
(assert (x202 x516))
(assert (x202 x631))
(assert (x202 x540))
(assert (not (= (x20 0 17) 3008386744)))
(assert (x202 x208))
(assert (x202 x403))
(assert (x202 x110))
(assert (not (= (x20 x327 x513) 3002540418)))
(assert (x202 x763))
(assert (not (= (x20 x259 10) 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x202 x679))
(assert (x202 x346))
(assert (x202 x115))
(check-sat)
(exit)