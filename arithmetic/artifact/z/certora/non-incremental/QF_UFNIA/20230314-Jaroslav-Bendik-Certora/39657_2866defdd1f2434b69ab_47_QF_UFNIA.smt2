(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x239 () Int)
(declare-fun x32 () Int)
(declare-fun x74 () Int)
(declare-fun x248 () Int)
(declare-fun x151 () Int)
(declare-fun x172 () Int)
(declare-fun x186 () Int)
(declare-fun x20 () Bool)
(declare-fun x214 () Int)
(declare-fun x244 () Int)
(declare-fun x129 () Int)
(declare-fun x141 () Bool)
(declare-fun x131 () Bool)
(declare-fun x48 () Int)
(declare-fun x137 (Int) Int)
(declare-fun x136 (Int Int) Int)
(declare-fun x115 () Bool)
(declare-fun x169 () Bool)
(declare-fun x61 () Int)
(declare-fun x128 () Int)
(declare-fun x53 () Bool)
(declare-fun x178 () Int)
(declare-fun x196 () Int)
(declare-fun x171 () Int)
(declare-fun x161 () Int)
(declare-fun x98 () Int)
(declare-fun x114 () Int)
(declare-fun x28 () Int)
(declare-fun x160 () Int)
(declare-fun x89 () Bool)
(declare-fun x262 () Int)
(declare-fun x80 () Int)
(declare-fun x180 () Bool)
(declare-fun x133 () Int)
(declare-fun x57 () Int)
(declare-fun x22 () Int)
(declare-fun x90 () Int)
(declare-fun x155 () Bool)
(declare-fun x1 () Int)
(declare-fun x144 () Int)
(declare-fun x142 () Int)
(declare-fun x241 () Int)
(declare-fun x127 () Bool)
(declare-fun x122 () Int)
(declare-fun x64 () Int)
(declare-fun x24 () Int)
(declare-fun x211 () Int)
(declare-fun x229 () Int)
(declare-fun x117 () Bool)
(declare-fun x224 () Int)
(declare-fun x228 () Int)
(declare-fun x9 () Int)
(declare-fun x47 (Int) Int)
(declare-fun x245 () Int)
(declare-fun x221 () Int)
(declare-fun x218 () Bool)
(declare-fun x182 () Bool)
(declare-fun x230 () Bool)
(declare-fun x138 () Int)
(declare-fun x261 () Int)
(declare-fun x246 () Int)
(declare-fun x148 () Int)
(declare-fun x149 () Int)
(declare-fun x3 () Int)
(declare-fun x235 () Int)
(declare-fun x174 () Int)
(declare-fun x170 () Int)
(declare-fun x192 () Int)
(declare-fun x135 () Int)
(declare-fun x106 () Int)
(declare-fun x110 () Int)
(declare-fun x118 () Int)
(declare-fun x139 () Int)
(declare-fun x88 () Int)
(declare-fun x33 () Int)
(declare-fun x253 (Int Int) Int)
(declare-fun x49 () Int)
(declare-fun x62 () Int)
(declare-fun x65 () Int)
(declare-fun x23 () Int)
(declare-fun x30 () Bool)
(declare-fun x195 () Bool)
(declare-fun x126 () Int)
(declare-fun x232 () Int)
(declare-fun x83 () Int)
(declare-fun x202 () Int)
(declare-fun x153 () Int)
(declare-fun x132 () Bool)
(declare-fun x254 () Int)
(declare-fun x125 () Bool)
(declare-fun x36 () Int)
(declare-fun x177 () Int)
(declare-fun x81 () Int)
(declare-fun x134 () Int)
(declare-fun x105 () Bool)
(declare-fun x166 (Int Int) Int)
(declare-fun x240 () Bool)
(declare-fun x187 () Int)
(declare-fun x267 () Int)
(declare-fun x69 () Bool)
(declare-fun x18 () Int)
(declare-fun x95 () Int)
(declare-fun x100 (Int Int) Int)
(declare-fun x193 (Int) Int)
(declare-fun x242 () Int)
(declare-fun x190 () Bool)
(declare-fun x181 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x76 (Int) Int)
(declare-fun x188 () Bool)
(declare-fun x102 () Int)
(declare-fun x220 () Int)
(declare-fun x87 () Int)
(declare-fun x259 () Int)
(declare-fun x249 () Int)
(declare-fun x210 () Bool)
(declare-fun x130 () Bool)
(declare-fun x257 () Bool)
(declare-fun x34 () Int)
(declare-fun x185 () Int)
(declare-fun x226 () Int)
(declare-fun x84 () Bool)
(declare-fun x97 () Int)
(declare-fun x99 (Int Int) Int)
(declare-fun x231 () Int)
(declare-fun x237 () Int)
(declare-fun x158 () Int)
(declare-fun x79 () Int)
(declare-fun x209 () Int)
(declare-fun x216 () Int)
(declare-fun x82 () Bool)
(declare-fun x2 (Int Int) Int)
(declare-fun x77 () Int)
(declare-fun x31 () Bool)
(declare-fun x204 () Int)
(declare-fun x217 () Int)
(declare-fun x4 () Int)
(declare-fun x113 () Int)
(declare-fun x124 () Int)
(declare-fun x154 () Int)
(declare-fun x152 (Int) Int)
(declare-fun x42 () Int)
(declare-fun x112 () Int)
(declare-fun x198 () Int)
(declare-fun x266 () Bool)
(declare-fun x16 () Int)
(declare-fun x35 () Int)
(declare-fun x78 () Int)
(declare-fun x5 () Int)
(declare-fun x66 (Int) Bool)
(declare-fun x212 () Bool)
(declare-fun x234 () Bool)
(declare-fun x13 () Bool)
(declare-fun x26 () Int)
(declare-fun x167 () Bool)
(declare-fun x54 () Bool)
(declare-fun x58 () Int)
(declare-fun x225 () Int)
(declare-fun x37 () Int)
(declare-fun x205 () Bool)
(declare-fun x94 () Int)
(declare-fun x251 () Int)
(declare-fun x175 () Int)
(declare-fun x56 () Int)
(declare-fun x243 (Int) Int)
(declare-fun x55 () Int)
(declare-fun x21 () Bool)
(declare-fun x156 () Bool)
(declare-fun x162 () Int)
(declare-fun x68 () Int)
(declare-fun x67 (Int) Int)
(declare-fun x92 () Bool)
(declare-fun x173 () Int)
(declare-fun x215 (Int Int Int Int) Int)
(declare-fun x143 (Int) Int)
(declare-fun x45 () Bool)
(declare-fun x260 () Bool)
(declare-fun x238 () Int)
(declare-fun x256 () Int)
(declare-fun x75 () Bool)
(declare-fun x159 () Int)
(declare-fun x11 () Bool)
(declare-fun x71 () Bool)
(declare-fun x50 () Int)
(declare-fun x206 () Bool)
(declare-fun x233 () Int)
(declare-fun x123 () Int)
(declare-fun x163 () Bool)
(declare-fun x197 () Bool)
(declare-fun x93 (Int Int) Int)
(declare-fun x25 () Int)
(declare-fun x150 () Bool)
(declare-fun x39 () Bool)
(declare-fun x203 () Int)
(declare-fun x40 () Bool)
(declare-fun x119 () Int)
(declare-fun x60 () Int)
(declare-fun x250 () Int)
(declare-fun x168 () Int)
(declare-fun x73 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x189 () Bool)
(declare-fun x96 () Bool)
(declare-fun x263 () Bool)
(declare-fun x108 () Int)
(declare-fun x223 () Int)
(declare-fun x201 () Bool)
(declare-fun x70 () Int)
(declare-fun x176 () Int)
(declare-fun x194 () Int)
(declare-fun x265 () Int)
(declare-fun x17 () Int)
(declare-fun x27 () Int)
(declare-fun x12 () Bool)
(declare-fun x164 () Bool)
(declare-fun x109 () Bool)
(declare-fun x222 () Int)
(declare-fun x236 () Int)
(declare-fun x213 () Int)
(declare-fun x199 () Int)
(declare-fun x63 () Int)
(define-fun x44 ((x15 Int)) Int (ite (and (<= 0 x15) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x15)) x15 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x41 ((x15 Int)) Int (ite (and (> 0 x15) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x15)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x15) x15))
(define-fun x14 ((x38 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x38) (<= 0 x38)))
(define-fun x147 ((x38 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x38) (<= 0 x38)))
(define-fun x86 ((x38 Int)) Bool (and (= (x93 x38 115792089237316195423570985008687907853269984665640564039457584007913129639935) x38) (= (x93 115792089237316195423570985008687907853269984665640564039457584007913129639935 x38) x38)))
(define-fun x116 ((x38 Int)) Bool (and (= 0 (x93 x38 0)) (= (x93 0 x38) 0)))
(define-fun x104 ((x38 Int)) Bool (= (x93 x38 x38) x38))
(define-fun x140 ((x38 Int)) Bool (and (x104 x38) (x116 x38) (x86 x38)))
(define-fun x219 ((x38 Int) (x72 Int)) Bool (= (x93 x72 x38) (x93 x38 x72)))
(define-fun x208 ((x38 Int) (x72 Int)) Bool (and (=> (<= 0 x38) (>= x38 (x93 x38 x72))) (>= (x93 x38 x72) 0) (=> (>= x72 0) (<= (x93 x38 x72) x72))))
(define-fun x227 ((x38 Int) (x72 Int)) Bool (and (x208 x38 x72) (x219 x38 x72)))
(define-fun x8 ((x38 Int)) Bool (= (mod x38 256) (x93 x38 255)))
(define-fun x121 ((x38 Int)) Bool (and (x227 x38 255) (x8 x38)))
(define-fun x59 ((x38 Int)) Bool (= (mod x38 26959946667150639794667015087019630673637144422540572481103610249216) (x93 x38 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x51 ((x38 Int)) Bool (and (x227 x38 26959946667150639794667015087019630673637144422540572481103610249215) (x59 x38)))
(define-fun x146 ((x38 Int)) Bool (= (x93 x38 1461501637330902918203684832716283019655932542975) (mod x38 1461501637330902918203684832716283019655932542976)))
(define-fun x111 ((x38 Int)) Bool (and (x146 x38) (x227 x38 1461501637330902918203684832716283019655932542975)))
(define-fun x10 ((x38 Int)) Bool (and (= (x166 x38 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 115792089237316195423570985008687907853269984665640564039457584007913129639935 x38))))
(define-fun x120 ((x38 Int)) Bool (and (= (x166 0 x38) x38) (= x38 (x166 x38 0))))
(define-fun x255 ((x38 Int)) Bool (= (x166 x38 x38) x38))
(define-fun x200 ((x38 Int)) Bool (and (x10 x38) (x120 x38) (x255 x38)))
(define-fun x258 ((x38 Int) (x72 Int)) Bool (= (x166 x72 x38) (x166 x38 x72)))
(define-fun x46 ((x38 Int) (x72 Int)) Bool (and (<= (x166 x38 x72) (+ x72 x38)) (=> (>= x72 0) (>= (x166 x38 x72) x72)) (=> (>= x38 0) (<= x38 (x166 x38 x72)))))
(define-fun x268 ((x38 Int) (x72 Int)) Bool (and (x258 x38 x72) (x46 x38 x72)))
(define-fun x107 ((x191 Int)) Int (x43 x191))
(define-fun x103 ((x191 Int)) Int (ite (= x191 164) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x143 x191)))
(define-fun x91 ((x191 Int)) Int (ite (= 128 x191) 36 (x103 x191)))
(define-fun x29 ((x191 Int)) Int (ite (= x191 160) x233 (x91 x191)))
(define-fun x85 ((x191 Int)) Int (ite (= x191 232) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x29 x191)))
(define-fun x165 ((x191 Int)) Int (ite (= 196 x191) 36 (x85 x191)))
(define-fun x7 ((x191 Int)) Int (ite (= 228 x191) x172 (x165 x191)))
(define-fun x19 ((x191 Int)) Int (ite x31 (x29 x191) (x7 x191)))
(define-fun x52 ((x191 Int)) Int (ite (= x191 x56) 0 (x19 x191)))
(define-fun x252 ((x191 Int)) Int (ite (= x24 x191) x142 (x52 x191)))
(define-fun x145 ((x191 Int)) Int (ite (= x209 x191) x74 (x252 x191)))
(define-fun x207 ((x191 Int)) Int (ite x156 (x143 x191) (ite x82 (x19 x191) (x145 x191))))
(define-fun x264 ((x191 Int)) Int (ite (= x78 x191) x176 (x207 x191)))
(define-fun x247 ((x191 Int)) Int (ite (= x191 x168) x159 (x264 x191)))
(define-fun x6 ((x191 Int)) Int (ite (= x192 x191) x1 (x247 x191)))
(define-fun x157 ((x191 Int)) Int (ite (= x199 x191) x223 (x6 x191)))
(define-fun x101 ((x191 Int)) Int (ite (and (< x191 (+ x216 x126)) (<= x126 x191)) (x43 (+ (- x191 x126) x102)) (x157 x191)))
(define-fun x184 ((x191 Int)) Int (ite (= x177 x191) 0 (x101 x191)))
(define-fun x183 ((x191 Int)) Int (ite (= x191 x3) x135 (x181 x191)))
(assert (x140 x70))
(assert (=> (<= x134 10000) (not (= (x253 x133 x238) x134))))
(assert (=> (<= x178 10000) (not (= (x253 x221 x267) x178))))
(assert (= (div x36 256) (x136 x36 8)))
(assert (not (= (x253 x17 x198) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (+ 3 x245) (+ 1 x204))))
(assert (x147 x186))
(assert (=> (<= x265 10000) (not (= (x253 x248 x106) x265))))
(assert (= (or x156 x189) x53))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x256 x158))))
(assert (x147 x128))
(assert (x147 x70))
(assert (x147 x175))
(assert (x200 x138))
(assert (=> (<= x17 10000) (not (= x17 (+ 2 x204)))))
(assert (=> (= (x253 x61 x228) (x253 x133 x238)) (and (= x61 x133) (= x228 x238))))
(assert (=> (<= x61 10000) (not (= x61 (x253 x251 1)))))
(assert (x14 x94))
(assert (not (= (x253 x251 1) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (>= 10000 x256) (not (= (x253 x124 4) x256))))
(assert (x140 255))
(assert (not (= (x253 x256 x158) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (>= 10000 x122) (not (= (x253 x17 x198) x122))))
(assert (=> (<= x106 10000) (not (= (+ x204 3) x106))))
(assert (not (= (+ 3 x245) 388749022)))
(assert (=> (>= 10000 x251) (not (= x251 (x253 x221 x267)))))
(assert (not (= 388749022 (x253 x94 1))))
(assert (=> (>= 10000 x61) (not (= (x215 52 32 x176 (x136 x159 96)) x61))))
(assert (not (= (x253 x61 x228) (+ x245 3))))
(assert (=> (= (x253 x122 1) (x253 x17 x198)) (and (= x17 x122) (= x198 1))))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 2510660263)))
(assert (not (= 18446744073709551615 (x215 52 32 x176 (x136 x159 96)))))
(assert (not (= (x253 x124 4) (+ 3 x174))))
(assert (not (= (x253 x94 1) (+ x245 3))))
(assert (=> (<= x16 10000) (not (= (x215 52 32 x176 (x136 x159 96)) x16))))
(assert (x14 x113))
(assert (not (= (+ x204 2) (x253 x94 1))))
(assert (x14 x158))
(assert (x147 x265))
(assert (x14 x245))
(assert (=> (<= x124 10000) (not (= (+ 3 x174) x124))))
(assert (not (= 2510660263 (x253 x61 x228))))
(assert (not (= (+ 3 x204) 1)))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x136 x159 96) (+ 3 x174)))))
(assert (not (= 388749022 (x253 x251 1))))
(assert (=> (= (x253 x61 x228) (x253 x134 x113)) (and (= x61 x134) (= x228 x113))))
(assert (=> (<= x122 10000) (not (= x122 (x253 x248 x106)))))
(assert (not (= (+ 3 x174) 464684736)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x253 x17 x198))))
(assert (x14 x174))
(assert (not (= 464684736 (x253 x122 1))))
(assert (x147 x87))
(assert (not (= (+ x245 3) 292666793)))
(assert (=> (>= 10000 x176) (not (= (+ 1 x204) x176))))
(assert (=> (= (x253 x256 x158) (x253 x134 x113)) (and (= x134 x256) (= x158 x113))))
(assert (x147 x187))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x253 x124 4) (x136 x159 96)))))
(assert (not (= (x253 x248 x106) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (<= x124 10000) (not (= x124 (+ x204 3)))))
(assert (=> (= (x253 x248 x106) (x253 x221 x267)) (and (= x221 x248) (= x267 x106))))
(assert (=> (>= 10000 x251) (not (= (x253 x256 x158) x251))))
(assert (=> (>= 10000 x134) (not (= (x253 x17 x198) x134))))
(assert (not (= 18446744073709551615 (+ x204 1))))
(assert (x14 x251))
(assert (not (= 1 (x253 x124 4))))
(assert (not (= (+ 2 x204) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (+ x245 3) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= 1 (x253 x133 x238))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x136 x159 96) (x253 x122 1)))))
(assert (x147 x134))
(assert (= x31 (and x234 x240)))
(assert (not (= (+ x174 3) (x253 x61 x228))))
(assert (=> (>= 10000 x17) (not (= (x253 x94 1) x17))))
(assert (not (= (x253 x256 x158) 18446744073709551615)))
(assert (x147 x90))
(assert (=> (>= 10000 x178) (not (= x178 (+ 2 x204)))))
(assert (=> (<= x16 10000) (not (= (x253 x256 x158) x16))))
(assert (x147 x129))
(assert (not (= (x253 x133 x238) 4)))
(assert (=> (= (x253 x256 x158) (x253 x94 1)) (and (= x256 x94) (= x158 1))))
(assert (x140 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (= (div x176 256) (x136 x176 8)))
(assert (=> (<= x17 10000) (not (= x17 (x253 x122 1)))))
(assert (=> (<= x265 10000) (not (= (+ x204 1) x265))))
(assert (=> (<= x176 10000) (not (= x176 (+ x245 3)))))
(assert (= (x136 x79 8) (div x79 256)))
(assert (x147 x232))
(assert (=> (<= x94 10000) (not (= (x253 x134 x113) x94))))
(assert (=> (<= x94 10000) (not (= (x253 x61 x228) x94))))
(assert (=> (= (x253 x94 1) (x253 x248 x106)) (and (= 1 x106) (= x94 x248))))
(assert (x147 x153))
(assert (x147 x61))
(assert (not (= (x253 x17 x198) 388749022)))
(assert (not (= (x253 x124 4) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (not x195))
(assert (not (= (x253 x61 x228) (+ 2 x204))))
(assert (x140 x203))
(assert (not (= 388749022 (x253 x124 4))))
(assert (not (= (+ 1 x204) (x253 x251 1))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x94 1))))
(assert (=> (<= x108 10000) (not (= x108 (+ 3 x174)))))
(assert (=> (>= 10000 x108) (not (= x108 (+ 1 x204)))))
(assert (not (= 52 (x253 x221 x267))))
(assert (=> (<= x94 10000) (not (= x94 (x253 x17 x198)))))
(assert (x147 x220))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x136 x159 96) (x253 x133 x238)))))
(assert (=> (>= 10000 x221) (not (= x221 (+ x204 1)))))
(assert (=> (>= 10000 x265) (not (= x265 (+ x174 3)))))
(assert (=> (= (x253 x61 x228) (x253 x94 1)) (and (= x94 x61) (= 1 x228))))
(assert (not (= (x253 x133 x238) (+ x174 3))))
(assert (= 0 (x143 228)))
(assert (=> (>= 10000 x122) (not (= x122 (+ x204 1)))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x253 x94 1))))
(assert (x147 x22))
(assert (=> (>= 10000 x108) (not (= (x215 52 32 x176 (x136 x159 96)) x108))))
(assert (not (= 4 (+ x245 3))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x136 x159 96) (+ x245 3)))))
(assert (x147 x18))
(assert (=> (<= x134 10000) (not (= x134 (x215 52 32 x176 (x136 x159 96))))))
(assert (not (= (+ x245 3) 1461501637330902918203684832716283019655932542975)))
(assert (=> (= (x253 x134 x113) (x253 x221 x267)) (and (= x267 x113) (= x134 x221))))
(assert (not (= 32 (x253 x94 1))))
(assert (not (= (x253 x134 x113) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= (x253 x221 x267) (+ 3 x174))))
(assert (not (= (+ x174 3) 52)))
(assert (x14 x256))
(assert (=> (<= x122 10000) (not (= (+ x204 2) x122))))
(assert (not (= 18446744073709551615 (+ 3 x174))))
(assert (not (= (x253 x256 x158) (+ x245 3))))
(assert (not (= (+ x174 3) (x253 x256 x158))))
(assert (x51 x70))
(assert (= (mod (ite (< x196 256) (x2 2 x196) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x100 1 x196)))
(assert (x147 x213))
(assert (=> (>= 10000 x178) (not (= (x253 x134 x113) x178))))
(assert (not (= 4 (+ x174 3))))
(assert (=> (>= 10000 x106) (not (= x106 (x253 x251 1)))))
(assert (not (= 464684736 (+ x204 2))))
(assert (=> (<= x176 10000) (not (= x176 (x253 x124 4)))))
(assert (=> (<= x94 10000) (not (= (x253 x256 x158) x94))))
(assert (x147 x173))
(assert (=> (<= x77 10000) (not (= (+ 3 x174) x77))))
(assert (not (= (x253 x17 x198) (+ x204 2))))
(assert (=> (<= x256 10000) (not (= (+ x174 3) x256))))
(assert (not (= (+ x204 2) (+ 3 x245))))
(assert (not (= (x253 x122 1) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (<= x77 10000) (not (= x77 (x215 52 32 x176 (x136 x159 96))))))
(assert (=> (<= x106 10000) (not (= x106 (x253 x94 1)))))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) (x253 x134 x113))))
(assert (not (= (x253 x124 4) (x215 52 32 x176 (x136 x159 96)))))
(assert (= x163 (=> (and (and (= (x136 x176 8) x256) (<= 0 x161) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x148) (>= 1461501637330902918203684832716283019655932542975 x122) (= (ite x117 1 0) x217) (= (x93 255 x176) x187) (<= x161 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x118 x77) (= x148 (x183 x246)) (= (x253 x221 x267) x174) (= (x100 1 x187) x138) (= x122 x139) (= x170 464684736) (= (x100 1 x33) x110) (not (= x170 388749022)) (= x117 (not x105)) (= (x76 x16) x153) (= (x166 x161 x138) x135) (= x160 x221) (< 0 x153) (= (x253 x17 x198) x246) (= (x136 x36 8) x17) (not (= 292666793 x170)) (= (x253 x256 x158) x3) (= x36 x235) (= (x253 x122 1) x267) (= x21 x210) (= x105 (not x39)) (= x75 (= 0 x249)) (>= x148 0) (= x161 (x181 x3)) (< x170 2510660263) (= (x93 x148 x110) x249) (= (x93 255 x36) x33) (= x39 (not x75)) (= x198 (+ 3 x174))) (and (= (or (not x21) x266) x40) (= x54 (not (= 0 x217))) (= x266 x54))) x40)))
(assert (x200 x161))
(assert (=> (= (x253 x251 1) (x253 x61 x228)) (and (= 1 x228) (= x61 x251))))
(assert (=> (>= 10000 x221) (not (= x221 (x253 x94 1)))))
(assert (not (= 2510660263 (+ 3 x245))))
(assert (=> (<= x134 10000) (not (= (x253 x124 4) x134))))
(assert (not (= 464684736 (+ 3 x204))))
(assert (x51 x55))
(assert (=> (>= 10000 x133) (not (= x133 (x215 52 32 x176 (x136 x159 96))))))
(assert (not (= (x253 x133 x238) 52)))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x221 x267))))
(assert (not (= (+ 3 x245) 1)))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x133 x238))))
(assert (x147 x24))
(assert (not (= (+ x245 3) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (<= x176 10000) (not (= x176 (x253 x133 x238)))))
(assert (x147 x262))
(assert (x147 x222))
(assert (=> (= (x253 x221 x267) (x253 x256 x158)) (and (= x267 x158) (= x221 x256))))
(assert (=> (<= x17 10000) (not (= x17 (x253 x17 x198)))))
(assert (not (= (+ 2 x204) (x253 x133 x238))))
(assert (not (= (x253 x256 x158) (+ 1 x204))))
(assert (not (= (+ x174 3) (x215 52 32 x176 (x136 x159 96)))))
(assert (=> (= (x253 x133 x238) (x253 x134 x113)) (and (= x238 x113) (= x133 x134))))
(assert (=> (<= x77 10000) (not (= (x253 x17 x198) x77))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (+ 1 x204) (x136 x159 96)))))
(assert (not (= 1 (x253 x134 x113))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x256 x158))))
(assert (=> (>= 10000 x122) (not (= x122 (x253 x256 x158)))))
(assert (= (=> (and (< 0 x173) (= x192 x81)) x197) x155))
(assert (=> (= (x253 x17 x198) (x253 x133 x238)) (and (= x17 x133) (= x198 x238))))
(assert (x147 x237))
(assert (=> (>= 10000 x265) (not (= x265 (x253 x94 1)))))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x253 x17 x198) (x136 x159 96)))))
(assert (=> (>= 10000 x122) (not (= (x215 52 32 x176 (x136 x159 96)) x122))))
(assert (=> (>= 10000 x265) (not (= x265 (x253 x133 x238)))))
(assert (=> (>= 10000 x94) (not (= (x253 x122 1) x94))))
(assert (=> (<= x265 10000) (not (= (x253 x122 1) x265))))
(assert (=> (>= 10000 x133) (not (= x133 (x253 x248 x106)))))
(assert (x147 x112))
(assert (x121 x36))
(assert (not (= (x253 x221 x267) 292666793)))
(assert (x147 x133))
(assert (not (= 32 (+ x204 1))))
(assert (=> (<= x122 10000) (not (= x122 (x253 x94 1)))))
(assert (not (= 464684736 (x253 x94 1))))
(assert (=> (>= 10000 x251) (not (= x251 (+ 3 x245)))))
(assert (not (= 292666793 (x253 x17 x198))))
(assert (not (= (x253 x94 1) 292666793)))
(assert (and (= 649037107316853453566312041152512 (x2 2 109)) (= 332306998946228968225951765070086144 (x2 2 118)) (= 64 (x2 2 6)) (= 32768 (x2 2 15)) (= 5070602400912917605986812821504 (x2 2 102)) (= (x2 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x2 2 8) 256) (= 158456325028528675187087900672 (x2 2 97)) (= (x2 2 12) 4096) (= (x2 2 169) 748288838313422294120286634350736906063837462003712) (= (x2 2 84) 19342813113834066795298816) (= (x2 2 14) 16384) (= 33554432 (x2 2 25)) (= (x2 2 96) 79228162514264337593543950336) (= (x2 2 160) 1461501637330902918203684832716283019655932542976) (= (x2 2 2) 4) (= (x2 2 52) 4503599627370496) (= (x2 2 165) 46768052394588893382517914646921056628989841375232) (= (x2 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 268435456 (x2 2 28)) (= 200867255532373784442745261542645325315275374222849104412672 (x2 2 197)) (= 1298074214633706907132624082305024 (x2 2 110)) (= (x2 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x2 2 87) 154742504910672534362390528) (= (x2 2 11) 2048) (= (x2 2 90) 1237940039285380274899124224) (= (x2 2 130) 1361129467683753853853498429727072845824) (= 6277101735386680763835789423207666416102355444464034512896 (x2 2 192)) (= 348449143727040986586495598010130648530944 (x2 2 138)) (= (x2 2 38) 274877906944) (= (x2 2 94) 19807040628566084398385987584) (= (x2 2 20) 1048576) (= (x2 2 10) 1024) (= 5316911983139663491615228241121378304 (x2 2 122)) (= (x2 2 42) 4398046511104) (= (x2 2 183) 12259964326927110866866776217202473468949912977468817408) (= 524288 (x2 2 19)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x2 2 244)) (= (x2 2 92) 4951760157141521099596496896) (= (x2 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x2 2 27) 134217728) (= 196159429230833773869868419475239575503198607639501078528 (x2 2 187)) (= (x2 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x2 2 23) 8388608) (= 32 (x2 2 5)) (= 1267650600228229401496703205376 (x2 2 100)) (= (x2 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 205688069665150755269371147819668813122841983204197482918576128 (x2 2 207)) (= 40564819207303340847894502572032 (x2 2 105)) (= (x2 2 50) 1125899906842624) (= 766247770432944429179173513575154591809369561091801088 (x2 2 179)) (= (x2 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x2 2 26) 67108864) (= (x2 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 316912650057057350374175801344 (x2 2 98)) (= (x2 2 48) 281474976710656) (= (x2 2 95) 39614081257132168796771975168) (= (x2 2 46) 70368744177664) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x2 2 248)) (= (x2 2 152) 5708990770823839524233143877797980545530986496) (= (x2 2 175) 47890485652059026823698344598447161988085597568237568) (= (x2 2 153) 11417981541647679048466287755595961091061972992) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x2 2 242)) (= (x2 2 184) 24519928653854221733733552434404946937899825954937634816) (= 512 (x2 2 9)) (= (x2 2 162) 5846006549323611672814739330865132078623730171904) (= 18889465931478580854784 (x2 2 74)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x2 2 229)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x2 2 246)) (= (x2 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x2 2 136) 87112285931760246646623899502532662132736) (= 65536 (x2 2 16)) (= (x2 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 2658455991569831745807614120560689152 (x2 2 121)) (= (x2 2 155) 45671926166590716193865151022383844364247891968) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x2 2 239)) (= (x2 2 85) 38685626227668133590597632) (= (x2 2 45) 35184372088832) (= (x2 2 125) 42535295865117307932921825928971026432) (= 191561942608236107294793378393788647952342390272950272 (x2 2 177)) (= 166153499473114484112975882535043072 (x2 2 117)) (= (x2 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x2 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x2 2 72) 4722366482869645213696) (= 1152921504606846976 (x2 2 60)) (= 23384026197294446691258957323460528314494920687616 (x2 2 164)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x2 2 249)) (= (x2 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 72057594037927936 (x2 2 56)) (= (x2 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 1569275433846670190958947355801916604025588861116008628224 (x2 2 190)) (= (x2 2 43) 8796093022208) (= 9007199254740992 (x2 2 53)) (= 3138550867693340381917894711603833208051177722232017256448 (x2 2 191)) (= (x2 2 75) 37778931862957161709568) (= 16777216 (x2 2 24)) (= 23945242826029513411849172299223580994042798784118784 (x2 2 174)) (= 6129982163463555433433388108601236734474956488734408704 (x2 2 182)) (= (x2 2 30) 1073741824) (= (x2 2 112) 5192296858534827628530496329220096) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x2 2 231)) (= 2535301200456458802993406410752 (x2 2 101)) (= 44601490397061246283071436545296723011960832 (x2 2 145)) (= (x2 2 137) 174224571863520493293247799005065324265472) (= 536870912 (x2 2 29)) (= (x2 2 18) 262144) (= 383123885216472214589586756787577295904684780545900544 (x2 2 178)) (= (x2 2 106) 81129638414606681695789005144064) (= (x2 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x2 2 77) 151115727451828646838272) (= (x2 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x2 2 51) 2251799813685248) (= (x2 2 133) 10889035741470030830827987437816582766592) (= (x2 2 124) 21267647932558653966460912964485513216) (= 3213876088517980551083924184682325205044405987565585670602752 (x2 2 201)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x2 2 223)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x2 2 217)) (= (x2 2 66) 73786976294838206464) (= (x2 2 21) 2097152) (= 2417851639229258349412352 (x2 2 81)) (= (x2 2 91) 2475880078570760549798248448) (= (x2 2 35) 34359738368) (= 696898287454081973172991196020261297061888 (x2 2 139)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x2 2 212)) (= 2 (x2 2 1)) (= (x2 2 120) 1329227995784915872903807060280344576) (= (x2 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x2 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x2 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 9223372036854775808 (x2 2 63)) (= (x2 2 57) 144115188075855872) (= 11972621413014756705924586149611790497021399392059392 (x2 2 173)) (= 17592186044416 (x2 2 44)) (= 784637716923335095479473677900958302012794430558004314112 (x2 2 189)) (= 1606938044258990275541962092341162602522202993782792835301376 (x2 2 200)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x2 2 226)) (= (x2 2 39) 549755813888) (= (x2 2 37) 137438953472) (= (x2 2 83) 9671406556917033397649408) (= 77371252455336267181195264 (x2 2 86)) (= (x2 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 11150372599265311570767859136324180752990208 (x2 2 143)) (= (x2 2 172) 5986310706507378352962293074805895248510699696029696) (= 2361183241434822606848 (x2 2 71)) (= 664613997892457936451903530140172288 (x2 2 119)) (= (x2 2 135) 43556142965880123323311949751266331066368) (= 8589934592 (x2 2 33)) (= (x2 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x2 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 22300745198530623141535718272648361505980416 (x2 2 144)) (= (x2 2 123) 10633823966279326983230456482242756608) (= 22835963083295358096932575511191922182123945984 (x2 2 154)) (= 18014398509481984 (x2 2 54)) (= 9444732965739290427392 (x2 2 73)) (= (x2 2 61) 2305843009213693952) (= (x2 2 166) 93536104789177786765035829293842113257979682750464) (= 147573952589676412928 (x2 2 67)) (= (x2 2 156) 91343852333181432387730302044767688728495783936) (= 842498333348457493583344221469363458551160763204392890034487820288 (x2 2 219)) (= 374144419156711147060143317175368453031918731001856 (x2 2 168)) (= (x2 2 170) 1496577676626844588240573268701473812127674924007424) (= 36028797018963968 (x2 2 55)) (= (x2 2 3) 8) (= (x2 2 128) 340282366920938463463374607431768211456) (= (x2 2 104) 20282409603651670423947251286016) (= (x2 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x2 2 49) 562949953421312) (= (x2 2 68) 295147905179352825856) (= (x2 2 159) 730750818665451459101842416358141509827966271488) (= 8192 (x2 2 13)) (= (x2 2 114) 20769187434139310514121985316880384) (= 4294967296 (x2 2 32)) (= (x2 2 115) 41538374868278621028243970633760768) (= (x2 2 131) 2722258935367507707706996859454145691648) (= (x2 2 134) 21778071482940061661655974875633165533184) (= 309485009821345068724781056 (x2 2 88)) (= (x2 2 151) 2854495385411919762116571938898990272765493248) (= 2596148429267413814265248164610048 (x2 2 111)) (= (x2 2 22) 4194304) (= 187072209578355573530071658587684226515959365500928 (x2 2 167)) (= 633825300114114700748351602688 (x2 2 99)) (= (x2 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 10141204801825835211973625643008 (x2 2 103)) (= (x2 2 132) 5444517870735015415413993718908291383296) (= (x2 2 107) 162259276829213363391578010288128) (= 1180591620717411303424 (x2 2 70)) (= 12554203470773361527671578846415332832204710888928069025792 (x2 2 193)) (= 98079714615416886934934209737619787751599303819750539264 (x2 2 186)) (= (x2 2 113) 10384593717069655257060992658440192) (= (x2 2 176) 95780971304118053647396689196894323976171195136475136) (= 401734511064747568885490523085290650630550748445698208825344 (x2 2 198)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x2 2 224)) (= (x2 2 140) 1393796574908163946345982392040522594123776) (= (x2 2 185) 49039857307708443467467104868809893875799651909875269632) (= 68719476736 (x2 2 36)) (= (x2 2 0) 1) (= (x2 2 146) 89202980794122492566142873090593446023921664) (= (x2 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x2 2 171) 2993155353253689176481146537402947624255349848014848) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x2 2 227)) (= (x2 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x2 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 105312291668557186697918027683670432318895095400549111254310977536 (x2 2 216)) (= (x2 2 163) 11692013098647223345629478661730264157247460343808) (= (x2 2 4) 16) (= 2147483648 (x2 2 31)) (= (x2 2 40) 1099511627776) (= 2787593149816327892691964784081045188247552 (x2 2 141)) (= 1427247692705959881058285969449495136382746624 (x2 2 150)) (= (x2 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x2 2 126) 85070591730234615865843651857942052864) (= 356811923176489970264571492362373784095686656 (x2 2 148)) (= (x2 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x2 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 83076749736557242056487941267521536 (x2 2 116)) (= (x2 2 69) 590295810358705651712) (= 9903520314283042199192993792 (x2 2 93)) (= 4835703278458516698824704 (x2 2 82)) (= 170141183460469231731687303715884105728 (x2 2 127)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x2 2 255)) (= (x2 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x2 2 34) 17179869184) (= (x2 2 65) 36893488147419103232) (= 128 (x2 2 7)) (= 178405961588244985132285746181186892047843328 (x2 2 147)) (= 131072 (x2 2 17)) (= (x2 2 89) 618970019642690137449562112) (= (x2 2 157) 182687704666362864775460604089535377456991567872) (= (x2 2 142) 5575186299632655785383929568162090376495104) (= (x2 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x2 2 58) 288230376151711744) (= (x2 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x2 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x2 2 62) 4611686018427387904) (= (x2 2 59) 576460752303423488) (= 18446744073709551616 (x2 2 64)) (= (x2 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x2 2 149) 713623846352979940529142984724747568191373312) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x2 2 243)) (= 140737488355328 (x2 2 47)) (= (x2 2 158) 365375409332725729550921208179070754913983135744) (= 1208925819614629174706176 (x2 2 80)) (= 324518553658426726783156020576256 (x2 2 108)) (= 680564733841876926926749214863536422912 (x2 2 129)) (= (x2 2 79) 604462909807314587353088) (= (x2 2 76) 75557863725914323419136) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x2 2 241)) (= (x2 2 41) 2199023255552) (= 411376139330301510538742295639337626245683966408394965837152256 (x2 2 208)) (= (x2 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 2923003274661805836407369665432566039311865085952 (x2 2 161)) (= 302231454903657293676544 (x2 2 78)) (= 100433627766186892221372630771322662657637687111424552206336 (x2 2 196)) (= (x2 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x2 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 3064991081731777716716694054300618367237478244367204352 (x2 2 181))))
(assert (x147 x88))
(assert (=> (>= 10000 x94) (not (= (+ 3 x204) x94))))
(assert (=> (>= 10000 x134) (not (= x134 (+ x245 3)))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x134 x113))))
(assert (not (= 388749022 (x253 x61 x228))))
(assert (=> (<= x77 10000) (not (= x77 (+ x204 2)))))
(assert (=> (>= 10000 x176) (not (= x176 (x253 x248 x106)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x204 1))))
(assert (not (= (x253 x256 x158) 1461501637330902918203684832716283019655932542975)))
(assert (x14 x122))
(assert (not (= 292666793 (x253 x61 x228))))
(assert (not (= 292666793 (+ 3 x174))))
(assert (= (and x53 x13) x212))
(assert (=> (= (x253 x122 1) (x253 x256 x158)) (and (= x122 x256) (= 1 x158))))
(assert (=> (>= 10000 x178) (not (= (x253 x248 x106) x178))))
(assert (=> (>= 10000 x17) (not (= x17 (x253 x256 x158)))))
(assert (=> (>= 10000 x133) (not (= x133 (x253 x124 4)))))
(assert (x140 x36))
(assert (x147 x4))
(assert (x147 x171))
(assert (=> (>= 10000 x77) (not (= (x253 x133 x238) x77))))
(assert (not (= 32 (x253 x251 1))))
(assert (not (= 52 (+ x204 1))))
(assert (not (= (x253 x251 1) 292666793)))
(assert (x147 x83))
(assert (=> (= (x253 x248 x106) (x253 x17 x198)) (and (= x198 x106) (= x17 x248))))
(assert (not (= (x253 x122 1) 4)))
(assert (=> (<= x176 10000) (not (= x176 (x215 52 32 x176 (x136 x159 96))))))
(assert (= x167 (or x71 x92)))
(assert (= 0 (x143 x64)))
(assert (not (= (+ 3 x174) (x253 x17 x198))))
(assert (x147 x241))
(assert (=> (>= 10000 x256) (not (= x256 (x253 x248 x106)))))
(assert (= (=> (and (and (not (< 18446744073709551615 x223)) (<= 0 x65) (< 0 x97) (>= 255 x5) (= x62 x254) (or (and (> x42 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x32 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x32 x42) (= (<= x32 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x42 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x124 x119) (<= 0 x23) (not (< x32 x242)) (= x149 x220) (= x223 (x43 x179)) (and (= (<= x32 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x32 131)) (= x28 (x253 x124 4)) (= x134 x224) (< x87 2510660263) (= (not (= x58 0)) x201) (>= 1461501637330902918203684832716283019655932542975 x23) (not (> 4 x32)) (not (= x87 292666793)) (= x210 x201) (not (> x244 18446744073709551615)) (>= x154 0) (= (x76 x16) x97) (= (x44 (+ x179 32)) x102) (= x171 (mod (* x223 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (or (and (< x63 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x63))) (> x63 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x124 x202) (= x23 x175) (<= x65 1461501637330902918203684832716283019655932542975) (= x5 (x47 x28)) (<= 0 x5) (= x259 x154) (= x244 x231) (= x62 0) (= x242 (x44 (+ x171 x102))) (= (x41 (- x32 4)) x63) (not (= x57 2)) (= x112 x176) (= 388749022 x87) (= x179 (x44 (+ 4 x231))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x57) (>= 1461501637330902918203684832716283019655932542975 x154) (= x9 x175) (= x134 x34) (>= 1461501637330902918203684832716283019655932542975 x124) (> 256 x5) (>= x57 0) (= x11 (> x5 0)) (= x42 (x44 (+ x179 31)))) (and (<= 0 x22) (>= 1461501637330902918203684832716283019655932542975 x265) (= x206 (= 0 x60)) (= (x76 x16) x49) (<= 0 x203) (>= x98 0) (not (= 388749022 x18)) (>= x35 0) (= (x152 x265) x4) (< 0 x16) (>= x139 0) (= x222 (x100 1 x214)) (= (+ x245 3) x228) (<= x241 1461501637330902918203684832716283019655932542975) (= x45 (not x206)) (= 4 x73) (>= 1461501637330902918203684832716283019655932542975 x16) (= x185 (x253 x61 x228)) (> x108 0) (<= x35 1461501637330902918203684832716283019655932542975) (< 0 x49) (= x203 (x181 x185)) (= (x93 x203 x222) x60) (= x245 (x253 x133 x238)) (<= 0 x4) (not (= x108 x265)) (= x260 false) (= 388749022 x27) (= x194 (x152 x16)) (not (= x108 x16)) (= x89 (> (x76 x265) 0)) x20 (= false x263) x132 (<= x108 1461501637330902918203684832716283019655932542975) (= (x136 x79 8) x61) (>= 1461501637330902918203684832716283019655932542975 x139) (>= x194 0) (= 464684736 x18) (not (= 292666793 x18)) (= x133 x160) (= x214 (x93 255 x79)) (< 0 x265) (= x94 x139) (= (> (x76 x108) 0) x132) (<= x94 1461501637330902918203684832716283019655932542975) (= x150 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x203) (= (ite x218 1 0) x58) (= x218 (not x182)) (= x22 (x152 x108)) (= false x180) (= x79 x235) (< x18 2510660263) (= (> (x76 x16) 0) x20) (= (not x45) x182) x89 (not (= x16 x265)) (<= x98 1461501637330902918203684832716283019655932542975) (= x213 x35) (= x241 x259) (<= 0 x241) (= x238 (x253 x94 1)))) (and (=> (and (= x192 128) x11) x197) (=> (and (and (and (= x240 (= 0 x237)) (= (x91 160) x90) (= (x66 904250603428552709895185118199468575982109441609966099573332780532423983104) x30) (= (x44 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x37)) x233) (= x237 (ite (< 0 (ite x30 1 0)) 1 0)) (= x37 (x93 26959946667150639794667015087019630673637144422540572481103610249215 x90))) (or (and x240 (and (= 196 x24) (= x186 x237))) (and (and (= (x44 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x261)) x172) (= x55 (x165 228)) (= (= x232 0) x12) (= (x66 115792089210356248756420345214020892766250353992003419616917011526809519390720) x131) (= x164 false) (= (ite x131 1 0) x128) (= x232 (ite x164 x151 (ite (< 0 x128) 1 0))) (= (ite x12 1 0) x186) (= (x93 26959946667150639794667015087019630673637144422540572481103610249215 x55) x261) (= 1 x151) (= 264 x24)) (not x240)))) (not x11)) x141))) x195))
(assert (=> (<= x124 10000) (not (= (x253 x124 4) x124))))
(assert (=> (<= x133 10000) (not (= x133 (x253 x134 x113)))))
(assert (=> (= (x253 x17 x198) (x253 x256 x158)) (and (= x158 x198) (= x17 x256))))
(assert (=> (<= x178 10000) (not (= x178 (x253 x251 1)))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x136 x159 96) (x253 x134 x113)))))
(assert (=> (<= x265 10000) (not (= x265 (x253 x17 x198)))))
(assert (x147 x124))
(assert (x14 x204))
(assert (=> (= (x253 x133 x238) (x253 x122 1)) (and (= x122 x133) (= x238 1))))
(assert (= (mod (ite (< x187 256) (x2 2 x187) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x100 1 x187)))
(assert (=> (<= x106 10000) (not (= x106 (x253 x133 x238)))))
(assert (not (= (x253 x248 x106) (x215 52 32 x176 (x136 x159 96)))))
(assert (=> (<= x122 10000) (not (= x122 (x253 x133 x238)))))
(assert (x14 x228))
(assert (=> (<= x106 10000) (not (= x106 (x253 x221 x267)))))
(assert (x14 x108))
(assert (x121 x79))
(assert (=> (>= 10000 x106) (not (= x106 (+ x245 3)))))
(assert (not (= 32 (+ x174 3))))
(assert (not (= (x253 x17 x198) 52)))
(assert (not (= (x253 x122 1) 388749022)))
(assert (=> (>= 10000 x106) (not (= (+ x174 3) x106))))
(assert (=> (<= x108 10000) (not (= (x253 x122 1) x108))))
(assert (=> (<= x94 10000) (not (= x94 (+ 3 x174)))))
(assert (not (= (x253 x134 x113) 32)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x133 x238))))
(assert (=> (<= x133 10000) (not (= x133 (+ 1 x204)))))
(assert (x147 x36))
(assert (=> (<= x176 10000) (not (= (x253 x134 x113) x176))))
(assert (=> (<= x221 10000) (not (= x221 (x253 x251 1)))))
(assert (x14 x176))
(assert (not (= (+ 3 x245) (x253 x17 x198))))
(assert (x147 x231))
(assert (=> (= (x253 x94 1) (x253 x251 1)) (= x94 x251)))
(assert (not (= (x253 x17 x198) (+ x204 3))))
(assert (not (= (x253 x17 x198) 4)))
(assert (not (= (x253 x124 4) 18446744073709551615)))
(assert (not (= (x253 x134 x113) 52)))
(assert (not (= 464684736 (x253 x124 4))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x253 x61 x228) (x136 x159 96)))))
(assert (=> (<= x134 10000) (not (= x134 (x253 x221 x267)))))
(assert (=> (<= x77 10000) (not (= x77 (x253 x134 x113)))))
(assert (not (= 52 (+ x204 3))))
(assert (not (= 18446744073709551615 (+ x245 3))))
(assert (not (= 32 (x253 x248 x106))))
(assert (not (= 1 (+ x174 3))))
(assert (x147 x110))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x122 1))))
(assert (=> (<= x265 10000) (not (= (x253 x124 4) x265))))
(assert (not (= 4 (x253 x221 x267))))
(assert (x147 x80))
(assert (x147 x149))
(assert (=> (>= 10000 x94) (not (= (+ 3 x245) x94))))
(assert (x147 x73))
(assert (=> (<= x61 10000) (not (= x61 (x253 x61 x228)))))
(assert (=> (>= 10000 x124) (not (= x124 (x253 x17 x198)))))
(assert (=> (>= 10000 x256) (not (= x256 (x253 x251 1)))))
(assert (=> (<= x94 10000) (not (= x94 (x253 x94 1)))))
(assert (=> (<= x221 10000) (not (= (+ x174 3) x221))))
(assert (=> (= (x253 x61 x228) (x253 x122 1)) (and (= 1 x228) (= x122 x61))))
(assert (=> (= (x253 x122 1) (x253 x134 x113)) (and (= 1 x113) (= x134 x122))))
(assert (x14 x16))
(assert (x147 x35))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x253 x122 1))))
(assert (=> (>= 10000 x265) (not (= (x253 x251 1) x265))))
(assert (not (= (+ 1 x204) (x253 x94 1))))
(assert (=> (>= 10000 x106) (not (= (x253 x122 1) x106))))
(assert (=> (>= 10000 x77) (not (= (x253 x94 1) x77))))
(assert (not (= 4 (+ 3 x204))))
(assert (not (= (+ 2 x204) (x253 x248 x106))))
(assert (=> (= (x253 x134 x113) (x253 x94 1)) (and (= x134 x94) (= 1 x113))))
(assert (x147 x49))
(assert (not (= (x253 x17 x198) 18446744073709551615)))
(assert (x147 x27))
(assert (= x92 (and x109 x212)))
(assert (not (= (x253 x221 x267) 18446744073709551615)))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x124 4))))
(assert (not (= (x253 x221 x267) (+ x204 3))))
(assert (=> (>= 10000 x124) (not (= (+ 1 x204) x124))))
(assert (=> (= (x253 x17 x198) (x253 x61 x228)) (and (= x61 x17) (= x198 x228))))
(assert (x147 x177))
(assert (not (= 464684736 (x253 x61 x228))))
(assert (x147 x151))
(assert (=> (<= x133 10000) (not (= x133 (x253 x61 x228)))))
(assert (x147 x32))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 1)))
(assert (x147 x122))
(assert (=> (>= 10000 x178) (not (= (+ 3 x174) x178))))
(assert (=> (>= 10000 x108) (not (= (x253 x61 x228) x108))))
(assert (x147 x123))
(assert (x147 x229))
(assert (=> (>= 10000 x122) (not (= x122 (x253 x124 4)))))
(assert (=> (>= 10000 x178) (not (= (x253 x256 x158) x178))))
(assert (x147 x9))
(assert (not (= (x253 x248 x106) 2510660263)))
(assert (not (= (x253 x124 4) 4)))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 292666793)))
(assert (x147 x63))
(assert (not (= 1 (x253 x17 x198))))
(assert (=> (>= 10000 x124) (not (= (x253 x256 x158) x124))))
(assert (not (= 32 (x253 x122 1))))
(assert (= x115 (and (not x69) x230)))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (+ 3 x174))))
(assert (x14 x265))
(assert (not (= 4 (x253 x134 x113))))
(assert (x147 x34))
(assert (x147 x224))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x136 x159 96) (x253 x221 x267)))))
(assert (x147 x25))
(assert (=> (<= x17 10000) (not (= (x253 x133 x238) x17))))
(assert (x147 x5))
(assert (=> (<= x77 10000) (not (= (x253 x248 x106) x77))))
(assert (x147 x55))
(assert (=> (= (x253 x94 1) (x253 x133 x238)) (and (= 1 x238) (= x133 x94))))
(assert (=> (<= x122 10000) (not (= x122 (+ 3 x245)))))
(assert (x147 x94))
(assert (x147 x95))
(assert (not (= (x253 x134 x113) 2510660263)))
(assert (not (= 2510660263 (+ 2 x204))))
(assert (not (= 464684736 (x253 x17 x198))))
(assert (=> (<= x106 10000) (not (= (x253 x17 x198) x106))))
(assert (not (= (+ 3 x174) (+ 2 x204))))
(assert (not (= 388749022 (+ x174 3))))
(assert (=> (<= x124 10000) (not (= (x253 x94 1) x124))))
(assert (x140 x90))
(assert (=> (= (+ x174 3) (+ x204 3)) (and (= x267 x113) (= x221 x134))))
(assert (not (= 464684736 (+ x245 3))))
(assert (not (= (x253 x133 x238) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= 1 (+ x204 1))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 1 x204))))
(assert (x147 x126))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) (+ x204 2))))
(assert (not (= (+ x204 3) 292666793)))
(assert (not (= (x253 x17 x198) (+ x204 1))))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x253 x256 x158) (x136 x159 96)))))
(assert (not (= (+ x204 1) (+ 3 x204))))
(assert (not (= 4 (+ x204 1))))
(assert (=> (<= x256 10000) (not (= (x253 x122 1) x256))))
(assert (not (= 18446744073709551615 (x253 x134 x113))))
(assert (not (= (+ x204 1) (x253 x134 x113))))
(assert (=> (>= 10000 x61) (not (= x61 (x253 x124 4)))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x124 4))))
(assert (=> (<= x61 10000) (not (= x61 (+ 2 x204)))))
(assert (=> (<= x178 10000) (not (= x178 (x253 x133 x238)))))
(assert (not (= (+ 3 x245) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x61 x228))))
(assert (=> (>= 10000 x176) (not (= x176 (x253 x221 x267)))))
(assert (not (= (x253 x122 1) (+ 3 x174))))
(assert (=> (>= 10000 x108) (not (= (x253 x17 x198) x108))))
(assert (=> (<= x106 10000) (not (= x106 (x253 x124 4)))))
(assert (x147 x98))
(assert (x14 x134))
(assert (=> (<= x176 10000) (not (= x176 (+ 2 x204)))))
(assert (not (= (x253 x248 x106) 52)))
(assert (x147 x106))
(assert (x147 x42))
(assert (x140 x83))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (+ 3 x174))))
(assert (not (= (x253 x124 4) 292666793)))
(assert (=> (>= 10000 x251) (not (= (x253 x61 x228) x251))))
(assert (=> (>= 10000 x16) (not (= (+ x204 1) x16))))
(assert (=> (<= x108 10000) (not (= x108 (x253 x133 x238)))))
(assert (not (= (+ 3 x174) (x253 x251 1))))
(assert (=> (>= 10000 x77) (not (= x77 (x253 x124 4)))))
(assert (=> (<= x134 10000) (not (= x134 (+ x204 1)))))
(assert (not (= (x253 x133 x238) 388749022)))
(assert (x147 x196))
(assert (=> (>= 10000 x178) (not (= x178 (x253 x17 x198)))))
(assert (not (= (+ x204 2) 32)))
(assert (=> (<= x178 10000) (not (= (x215 52 32 x176 (x136 x159 96)) x178))))
(assert (not (= (x253 x17 x198) 2510660263)))
(assert (x147 x16))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x136 x159 96) (x253 x251 1)))))
(assert (not (= (x253 x94 1) 2510660263)))
(assert (=> (>= 10000 x124) (not (= x124 (x215 52 32 x176 (x136 x159 96))))))
(assert (=> (>= 10000 x221) (not (= x221 (+ 3 x245)))))
(assert (x147 x102))
(assert (x147 x192))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= (x253 x221 x267) 388749022)))
(assert (=> (>= 10000 x221) (not (= (x253 x133 x238) x221))))
(assert (x147 x148))
(assert (=> (= (x253 x122 1) (x253 x248 x106)) (and (= x106 1) (= x248 x122))))
(assert (=> (<= x134 10000) (not (= (x253 x134 x113) x134))))
(assert (=> (= (x253 x248 x106) (x253 x133 x238)) (and (= x248 x133) (= x106 x238))))
(assert (=> (<= x176 10000) (not (= (x253 x94 1) x176))))
(assert (not (= 52 (x253 x122 1))))
(assert (=> (<= x17 10000) (not (= x17 (x253 x221 x267)))))
(assert (not (= (+ 3 x174) (+ 1 x204))))
(assert (=> (<= x176 10000) (not (= (x253 x17 x198) x176))))
(assert (=> (= (x253 x256 x158) (x253 x124 4)) (and (= x158 4) (= x256 x124))))
(assert (not (= (+ x204 3) (x253 x134 x113))))
(assert (=> (>= 10000 x251) (not (= x251 (+ 3 x204)))))
(assert (=> (>= 10000 x256) (not (= (+ 3 x245) x256))))
(assert (not (= (x253 x61 x228) 32)))
(assert (=> (>= 10000 x134) (not (= x134 (x253 x94 1)))))
(assert (=> (>= 10000 x265) (not (= x265 (x253 x221 x267)))))
(assert (not (= (x253 x124 4) (x253 x251 1))))
(assert (=> (>= 10000 x133) (not (= (x253 x256 x158) x133))))
(assert (not (= (+ 3 x204) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x227 x203 x222))
(assert (=> (>= 10000 x16) (not (= x16 (x253 x122 1)))))
(assert (=> (= (x253 x134 x113) (x253 x17 x198)) (and (= x134 x17) (= x113 x198))))
(assert (=> (= (+ 3 x174) (+ x245 3)) (and (= x267 x238) (= x133 x221))))
(assert (x14 x133))
(assert (=> (= (x253 x221 x267) (x253 x61 x228)) (and (= x267 x228) (= x61 x221))))
(assert (=> (= (x253 x251 1) (x253 x221 x267)) (and (= x251 x221) (= x267 1))))
(assert (=> (>= 10000 x251) (not (= x251 (x253 x133 x238)))))
(assert (=> (>= 10000 x108) (not (= (x253 x221 x267) x108))))
(assert (=> (>= 10000 x77) (not (= x77 (x253 x122 1)))))
(assert (not (= (x253 x251 1) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= 18446744073709551615 (x253 x61 x228))))
(assert (=> (<= x16 10000) (not (= (x253 x94 1) x16))))
(assert (not (= (x253 x248 x106) 4)))
(assert (=> (>= 10000 x106) (not (= (x253 x256 x158) x106))))
(assert (not (= (x253 x134 x113) (+ x204 2))))
(assert (x147 x170))
(assert (=> (<= x251 10000) (not (= x251 (x253 x251 1)))))
(assert (x140 x110))
(assert (not (= (x253 x251 1) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x94) (not (= (+ 1 x204) x94))))
(assert (=> (>= 10000 x134) (not (= (x253 x61 x228) x134))))
(assert (=> (<= x94 10000) (not (= x94 (x253 x251 1)))))
(assert (not (= 1 (x253 x61 x228))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x253 x134 x113))))
(assert (= x188 (or x167 x130)))
(assert (=> (<= x16 10000) (not (= (x253 x134 x113) x16))))
(assert (=> (<= x133 10000) (not (= x133 (+ 2 x204)))))
(assert (=> (>= 10000 x17) (not (= (x253 x248 x106) x17))))
(assert (=> (>= 10000 x256) (not (= x256 (+ 2 x204)))))
(assert (x147 x194))
(assert (=> (<= x251 10000) (not (= (x253 x94 1) x251))))
(assert (=> (>= 10000 x251) (not (= (x253 x248 x106) x251))))
(assert (not (= (x253 x256 x158) (+ 3 x204))))
(assert (=> (>= 10000 x176) (not (= x176 (x253 x61 x228)))))
(assert (=> (<= x256 10000) (not (= x256 (x253 x17 x198)))))
(assert (=> (>= 10000 x133) (not (= (+ 3 x174) x133))))
(assert (not (= (+ 2 x204) (+ 3 x204))))
(assert (=> (<= x108 10000) (not (= (+ x204 2) x108))))
(assert (x147 x216))
(assert (x147 x233))
(assert (not (= (x253 x94 1) (x253 x124 4))))
(assert (x147 x17))
(assert (not (= (+ x204 2) (x253 x256 x158))))
(assert (not (= (+ x204 2) 52)))
(assert (=> (= (x253 x133 x238) (x253 x251 1)) (and (= x238 1) (= x251 x133))))
(assert (x147 x249))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) (x253 x17 x198))))
(assert (=> (>= 10000 x124) (not (= x124 (x253 x61 x228)))))
(assert (=> (= (x253 x94 1) (x253 x221 x267)) (and (= x267 1) (= x221 x94))))
(assert (=> (>= 10000 x178) (not (= (x253 x124 4) x178))))
(assert (not (= (+ 3 x245) (x253 x248 x106))))
(assert (=> (>= 10000 x61) (not (= x61 (+ 3 x204)))))
(assert (= x230 (or x31 x205)))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) (x253 x61 x228))))
(assert (=> (<= x221 10000) (not (= (x253 x124 4) x221))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x245 3))))
(assert (not (= (+ 3 x245) (x253 x251 1))))
(assert (not (= (x253 x251 1) (x215 52 32 x176 (x136 x159 96)))))
(assert (not (= 52 (x253 x61 x228))))
(assert (=> (>= 10000 x77) (not (= x77 (x253 x221 x267)))))
(assert (=> (<= x265 10000) (not (= x265 (+ x204 3)))))
(assert (not (= (x253 x251 1) (+ x204 2))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x61 x228))))
(assert (not (= (x253 x248 x106) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (=> (>= 10000 x108) (not (= (x253 x134 x113) x108))))
(assert (not (= (x253 x122 1) (x215 52 32 x176 (x136 x159 96)))))
(assert (not (= (x253 x256 x158) 464684736)))
(assert (not (= (x253 x248 x106) (+ 1 x204))))
(assert (not (= (x253 x122 1) 292666793)))
(assert (x147 x236))
(assert (= x156 (and x190 x11)))
(assert (not (= (x253 x133 x238) 2510660263)))
(assert (x147 x254))
(assert (not (= 388749022 (+ x204 3))))
(assert (not (= (x253 x248 x106) 18446744073709551615)))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x253 x221 x267))))
(assert (not (= (x253 x133 x238) 32)))
(assert (=> (<= x178 10000) (not (= (x253 x61 x228) x178))))
(assert (not (= (x253 x248 x106) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (=> (<= x178 10000) (not (= x178 (+ 3 x245)))))
(assert (=> (>= 10000 x61) (not (= (x253 x256 x158) x61))))
(assert (x147 x259))
(assert (not (= (x253 x122 1) 1)))
(assert (not (= (x253 x134 x113) (+ x245 3))))
(assert (=> (>= 10000 x124) (not (= (+ x245 3) x124))))
(assert (=> (<= x221 10000) (not (= x221 (x253 x122 1)))))
(assert (not (= (+ x204 2) (x253 x124 4))))
(assert (=> (<= x133 10000) (not (= x133 (x253 x122 1)))))
(assert (not (= (x253 x17 x198) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (= (x253 x251 1) (x253 x17 x198)) (and (= x198 1) (= x251 x17))))
(assert (not (= (x253 x221 x267) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (not (= (x253 x221 x267) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (=> (<= x133 10000) (not (= x133 (x253 x133 x238)))))
(assert (not (= (x253 x94 1) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x140 x79))
(assert (x147 x60))
(assert (not (= 464684736 (+ 1 x204))))
(assert (x147 x65))
(assert (x147 x1))
(assert (not (= (+ x245 3) (x253 x122 1))))
(assert (=> (<= x124 10000) (not (= (x253 x133 x238) x124))))
(assert (not (= (x253 x256 x158) 388749022)))
(assert (=> (<= x134 10000) (not (= x134 (x253 x256 x158)))))
(assert (=> (<= x134 10000) (not (= x134 (+ x204 3)))))
(assert (=> (<= x256 10000) (not (= (x253 x94 1) x256))))
(assert (not (= (x253 x94 1) 1)))
(assert (=> (>= 10000 x124) (not (= x124 (x253 x248 x106)))))
(assert (=> (= (x253 x61 x228) (x253 x124 4)) (and (= x61 x124) (= 4 x228))))
(assert (=> (>= 10000 x122) (not (= x122 (x253 x134 x113)))))
(assert (not (= (x253 x221 x267) (+ 3 x245))))
(assert (x147 x77))
(assert (x14 x61))
(assert (not (= (x253 x133 x238) 1461501637330902918203684832716283019655932542975)))
(assert (=> (= (x253 x122 1) (x253 x251 1)) (= x251 x122)))
(assert (x111 x124))
(assert (=> (>= 10000 x134) (not (= (x253 x122 1) x134))))
(assert (=> (= (x253 x248 x106) (x253 x251 1)) (and (= 1 x106) (= x248 x251))))
(assert (=> (<= x251 10000) (not (= (x253 x124 4) x251))))
(assert (x147 x179))
(assert (=> (<= x265 10000) (not (= (x215 52 32 x176 (x136 x159 96)) x265))))
(assert (=> (>= 10000 x265) (not (= (+ x245 3) x265))))
(assert (=> (<= x265 10000) (not (= (x253 x61 x228) x265))))
(assert (=> (<= x16 10000) (not (= (x253 x124 4) x16))))
(assert (x147 x250))
(assert (not (= (+ x204 2) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (not (= (x253 x251 1) 464684736)))
(assert (=> (>= 10000 x61) (not (= (+ 3 x245) x61))))
(assert (=> (>= 10000 x16) (not (= x16 (x253 x133 x238)))))
(assert (not (= 388749022 (x215 52 32 x176 (x136 x159 96)))))
(assert (=> (<= x108 10000) (not (= (x253 x256 x158) x108))))
(assert (not (= (x253 x256 x158) 32)))
(assert (=> (>= 10000 x176) (not (= x176 (x253 x251 1)))))
(assert (not (= 2510660263 (+ x174 3))))
(assert (x147 x261))
(assert (not (= (x253 x122 1) (+ x204 3))))
(assert (x147 x159))
(assert (=> (= (x253 x221 x267) (x253 x133 x238)) (and (= x221 x133) (= x238 x267))))
(assert (=> (>= 10000 x221) (not (= x221 (x253 x221 x267)))))
(assert (not (= 2510660263 (x253 x256 x158))))
(assert (x147 x168))
(assert (x147 x138))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x134 x113))))
(assert (=> (>= 10000 x108) (not (= (+ x204 3) x108))))
(assert (not (= (+ x204 1) (x215 52 32 x176 (x136 x159 96)))))
(assert (=> (<= x108 10000) (not (= (x253 x94 1) x108))))
(assert (not (= (x253 x248 x106) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (= (x253 x248 x106) (x253 x256 x158)) (and (= x256 x248) (= x158 x106))))
(assert (x140 x222))
(assert (x147 x81))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (x215 52 32 x176 (x136 x159 96)))))
(assert (=> (= (x253 x256 x158) (x253 x251 1)) (and (= x256 x251) (= 1 x158))))
(assert (= (=> (and (= x225 (x181 x226)) (= (= x250 0) x169) (< 0 x144) (>= x229 0) (= (x253 x134 x113) x204) (= (> x95 0) x13) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x48) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x225) (= (x67 x204) x144) (<= x229 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (+ 1 x114) x50) (= (x253 x178 x158) x226) (= x216 (mod (* x223 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x83 (x100 1 x196)) (= (+ x204 1) x114) (= x236 (x41 (- x199 x192))) (not (> x149 x229)) (= x1 (x41 (- x236 32))) (= x158 (+ 3 x204)) (= (x100 x259 96) x159) x169 (= (x67 x204) x77) (= x250 (x93 x225 x83)) (= x229 (x193 x50)) (= (x44 (+ x126 x216)) x177) (>= x225 0) (= x84 (< x149 x48)) (not x84) (= (x184 x199) x95) (>= x77 0) (= (x93 255 x176) x196) (= (x253 x251 1) x113) (<= 0 x144) (= (x44 (+ 32 x192)) x78) (= (x44 (+ x168 20)) x199) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x77) (>= x48 0) (= (x93 1461501637330902918203684832716283019655932542975 x124) x251) (= x248 (x215 52 32 x176 (x136 x159 96))) (<= x144 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x44 (+ 32 x78)) x168) (= x178 (x136 x176 8)) (= x48 (x243 x114)) (= x126 (x44 (+ x199 32)))) (and (=> (and (and (and (= (x184 x64) x106) (> x262 0) (= x262 (x184 x199)) (= x64 (x44 (+ x199 32))) (= x109 (> x106 x248))) (or (and x109 (and (= x211 x239) (= x239 (x253 x248 x106)))) (and (not x109) (and (= x211 x26) (= x26 (x253 x106 x248)))))) x13) x257) (=> (and (= x248 x118) (not x13)) x163))) x197))
(assert (not (= (x253 x94 1) 52)))
(assert (not (= 18446744073709551615 (+ x204 2))))
(assert (=> (>= 10000 x61) (not (= (x253 x133 x238) x61))))
(assert (=> (<= x221 10000) (not (= x221 (x253 x256 x158)))))
(assert (not (= (x253 x251 1) 1)))
(assert (x147 x162))
(assert (=> (>= 10000 x176) (not (= x176 (+ 3 x174)))))
(assert (=> (>= 10000 x17) (not (= (+ x204 3) x17))))
(assert (not (= (+ x204 3) 32)))
(assert (=> (= (x253 x256 x158) (x253 x133 x238)) (and (= x158 x238) (= x133 x256))))
(assert (not (= (+ x204 1) (x253 x122 1))))
(assert (x147 x97))
(assert (not (= (x253 x94 1) (+ 3 x204))))
(assert (not (= 292666793 (x253 x134 x113))))
(assert (= (and x234 (not x240)) x205))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x134 x113))))
(assert (= (and x212 (not x109)) x71))
(assert (=> (>= 10000 x61) (not (= x61 (x253 x122 1)))))
(assert (not (= 4 (x253 x94 1))))
(assert (=> (<= x134 10000) (not (= (+ 2 x204) x134))))
(assert (=> (<= x256 10000) (not (= (x253 x133 x238) x256))))
(assert (x147 x225))
(assert (not (= 1 (x253 x221 x267))))
(assert (not (= (x253 x248 x106) 1)))
(assert (x147 x154))
(assert (x147 x199))
(assert (not (= (+ x204 2) (x253 x122 1))))
(assert (=> (>= 10000 x124) (not (= (+ x204 2) x124))))
(assert (x121 x176))
(assert (=> (>= 10000 x221) (not (= x221 (x215 52 32 x176 (x136 x159 96))))))
(assert (x147 x256))
(assert (x14 x77))
(assert (not (= 1461501637330902918203684832716283019655932542975 (+ 3 x174))))
(assert (x140 x148))
(assert (= (=> (and (or (and x69 (and (= x173 x186) (= x81 x24))) (and (and (= x142 (x41 (- x68 32))) (= x209 (x44 (+ x24 32))) (= (x252 x209) x70) (= x129 1) (= (x41 (- x162 x24)) x68) (= x56 (x44 (+ x24 36))) (= (x44 (+ x56 32)) x162) (= false x125) (= x96 (x66 0)) (= (x44 (+ x123 904250603428552709895185118199468575982109441609966099573332780532423983104)) x74) (= (x93 26959946667150639794667015087019630673637144422540572481103610249215 x70) x123) (= (ite x125 x129 (ite (> x80 0) 1 0)) x173) (= x81 x162) (= (ite x96 1 0) x80)) (not x69))) (= (= 0 x186) x69)) x155) x141))
(assert (x147 x161))
(assert (=> (= (x253 x221 x267) (x253 x17 x198)) (and (= x267 x198) (= x221 x17))))
(assert (=> (>= 10000 x16) (not (= x16 (x253 x17 x198)))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x256 x158))))
(assert (not (= (x253 x124 4) (+ 3 x204))))
(assert (= (x143 160) 0))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ 3 x174))))
(assert (not (= (+ 3 x204) (x253 x133 x238))))
(assert (=> (<= x176 10000) (not (= x176 (x253 x122 1)))))
(assert (not (= (x253 x17 x198) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= (x253 x94 1) (+ x174 3))))
(assert (not (= (+ 2 x204) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (=> (<= x178 10000) (not (= x178 (x253 x94 1)))))
(assert (=> (<= x256 10000) (not (= x256 (+ x204 3)))))
(assert (=> (>= 10000 x16) (not (= x16 (+ x174 3)))))
(assert (=> (>= 10000 x17) (not (= (+ x245 3) x17))))
(assert (not (= 1461501637330902918203684832716283019655932542975 (x253 x61 x228))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x251 1))))
(assert (=> (>= 10000 x134) (not (= x134 (x253 x248 x106)))))
(assert (=> (>= 10000 x61) (not (= x61 (+ 3 x174)))))
(assert (x147 x64))
(assert (not (= (x253 x134 x113) 388749022)))
(assert (not (= (+ 3 x174) (x253 x248 x106))))
(assert (x147 x242))
(assert (=> (<= x176 10000) (not (= (+ 3 x204) x176))))
(assert (=> (<= x251 10000) (not (= (x253 x17 x198) x251))))
(assert (=> (= (x253 x124 4) (x253 x133 x238)) (and (= 4 x238) (= x124 x133))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x251 1))))
(assert (=> (>= 10000 x221) (not (= (x253 x61 x228) x221))))
(assert (=> (>= 10000 x124) (not (= (x253 x221 x267) x124))))
(assert (x147 x58))
(assert (=> (>= 10000 x61) (not (= (x253 x248 x106) x61))))
(assert (=> (= (x253 x94 1) (x253 x17 x198)) (and (= x94 x17) (= x198 1))))
(assert (=> (<= x106 10000) (not (= (+ x204 1) x106))))
(assert (not (= (x253 x221 x267) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (= (mod (* x259 79228162514264337593543950336) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x100 x259 96)))
(assert (not (= (+ 1 x204) 2510660263)))
(assert (not (= 52 (x253 x124 4))))
(assert (=> (<= x221 10000) (not (= x221 (+ 2 x204)))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x253 x17 x198))))
(assert (=> (<= x133 10000) (not (= (x253 x221 x267) x133))))
(assert (not (= (+ 3 x204) (x253 x251 1))))
(assert (not (= 292666793 (+ 1 x204))))
(assert (not (= (x253 x61 x228) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x140 x176))
(assert (x147 x160))
(assert (=> (>= 10000 x108) (not (= (x253 x124 4) x108))))
(assert (=> (<= x16 10000) (not (= x16 (x253 x251 1)))))
(assert (not (= 464684736 (x253 x133 x238))))
(assert (=> (>= 10000 x251) (not (= x251 (+ x204 1)))))
(assert (=> (<= x17 10000) (not (= (+ x174 3) x17))))
(assert (=> (<= x94 10000) (not (= (x253 x221 x267) x94))))
(assert (= (mod (ite (> 256 x33) (x2 2 x33) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x100 1 x33)))
(assert (=> (= (+ x204 3) (+ x245 3)) (and (= x133 x134) (= x113 x238))))
(assert (=> (<= x17 10000) (not (= (x253 x61 x228) x17))))
(assert (x147 x202))
(assert (x147 x209))
(assert (=> (<= x94 10000) (not (= (x215 52 32 x176 (x136 x159 96)) x94))))
(assert (not (= (x253 x122 1) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= 4 (x215 52 32 x176 (x136 x159 96)))))
(assert (=> (= (x253 x61 x228) (x253 x256 x158)) (and (= x228 x158) (= x256 x61))))
(assert (not (= (x253 x248 x106) 1461501637330902918203684832716283019655932542975)))
(assert (=> (<= x124 10000) (not (= (x253 x134 x113) x124))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x215 52 32 x176 (x136 x159 96)))))
(assert (x14 x248))
(assert (=> (>= 10000 x134) (not (= x134 (+ x174 3)))))
(assert (x14 x178))
(assert (not (= 2510660263 (x253 x221 x267))))
(assert (=> (>= 10000 x251) (not (= x251 (x253 x122 1)))))
(assert (not (= (x253 x124 4) 1461501637330902918203684832716283019655932542975)))
(assert (not (= (x253 x122 1) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 32)))
(assert (x147 x221))
(assert (not (= 292666793 (x253 x133 x238))))
(assert (not (= (+ x245 3) 52)))
(assert (x268 x161 x138))
(assert (=> (>= 10000 x61) (not (= x61 (x253 x17 x198)))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (+ 3 x204) (x136 x159 96)))))
(assert (=> (= (x253 x221 x267) (x253 x122 1)) (and (= x221 x122) (= 1 x267))))
(assert (not (= (+ 1 x204) (x253 x124 4))))
(assert (= x257 (=> (and (= (x184 x199) x88) (= (not (< 1 x88)) x127)) (and (=> (= x118 x211) x163) x127))))
(assert (x147 x56))
(assert (not (= (x253 x251 1) 2510660263)))
(assert (x14 x159))
(assert (not (= (x253 x122 1) 18446744073709551615)))
(assert (x227 x225 x83))
(assert (=> (>= 10000 x61) (not (= x61 (x253 x221 x267)))))
(assert (not (= (x253 x221 x267) (+ x204 1))))
(assert (x147 x62))
(assert (=> (>= 10000 x256) (not (= (x253 x134 x113) x256))))
(assert (x147 x235))
(assert (not (= (x253 x124 4) (x253 x122 1))))
(assert (x140 x124))
(assert (=> (<= x122 10000) (not (= (x253 x61 x228) x122))))
(assert (=> (>= 10000 x265) (not (= x265 (x253 x256 x158)))))
(assert (x147 x23))
(assert (not (= 2510660263 (x253 x124 4))))
(assert (not (= (x253 x94 1) 18446744073709551615)))
(assert (=> (<= x16 10000) (not (= (x253 x248 x106) x16))))
(assert (not (= (x253 x134 x113) 464684736)))
(assert (=> (= (x253 x248 x106) (x253 x134 x113)) (and (= x113 x106) (= x134 x248))))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x124) (not (= x124 (x253 x251 1)))))
(assert (not (= (+ x204 3) 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x122) (not (= x122 (x253 x221 x267)))))
(assert (= 0 (x143 x209)))
(assert (=> (>= 10000 x108) (not (= x108 (x253 x251 1)))))
(assert (=> (<= x133 10000) (not (= (+ x204 3) x133))))
(assert (not (= 4 (x253 x256 x158))))
(assert (=> (<= x178 10000) (not (= x178 (+ x204 1)))))
(assert (=> (<= x77 10000) (not (= (+ 3 x204) x77))))
(assert (not (= 1 (+ x204 2))))
(assert (=> (>= 10000 x17) (not (= (x253 x134 x113) x17))))
(assert (= (or x115 x82) x189))
(assert (=> (>= 10000 x122) (not (= x122 (x253 x122 1)))))
(assert (not (= (+ x204 3) 18446744073709551615)))
(assert (not (= (x253 x122 1) 2510660263)))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (x253 x94 1))))
(assert (not (= 2510660263 (+ 3 x204))))
(assert (=> (<= x106 10000) (not (= x106 (x253 x61 x228)))))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x136 x159 96) (x253 x248 x106)))))
(assert (= x130 (and x53 (not x13))))
(assert (x14 x198))
(assert (not (= (x253 x221 x267) 464684736)))
(assert (=> (<= x133 10000) (not (= (x253 x94 1) x133))))
(assert (x147 x33))
(assert (x14 x238))
(assert (x14 x221))
(assert (=> (<= (x136 x159 96) 10000) (not (= (x215 52 32 x176 (x136 x159 96)) (x136 x159 96)))))
(assert (= (x100 1 x214) (mod (ite (< x214 256) (x2 2 x214) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (=> (= (x253 x124 4) (x253 x221 x267)) (and (= x124 x221) (= 4 x267))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (+ x204 2))))
(assert (=> (= (x253 x94 1) (x253 x122 1)) (= x122 x94)))
(assert (=> (<= x17 10000) (not (= x17 (x253 x124 4)))))
(assert (x147 x223))
(assert (not (= 1 (x253 x256 x158))))
(assert (=> (<= x94 10000) (not (= x94 (+ 2 x204)))))
(assert (= (and x190 (not x11)) x234))
(assert (=> (>= 10000 x251) (not (= x251 (x253 x134 x113)))))
(assert (x147 x217))
(assert (x147 x244))
(assert (x147 x37))
(assert (not (= 292666793 (x253 x248 x106))))
(assert (not (= 18446744073709551615 (x253 x251 1))))
(assert (not (= (x253 x256 x158) 292666793)))
(assert (x227 x148 x110))
(assert (=> (>= 10000 x94) (not (= (x253 x124 4) x94))))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (x253 x133 x238))))
(assert (=> (<= x61 10000) (not (= (x253 x94 1) x61))))
(assert (=> (<= x77 10000) (not (= x77 (x253 x61 x228)))))
(assert (= (div x159 79228162514264337593543950336) (x136 x159 96)))
(assert (=> (<= x61 10000) (not (= (+ x204 1) x61))))
(assert (=> (>= 10000 x256) (not (= (x215 52 32 x176 (x136 x159 96)) x256))))
(assert (x147 x57))
(assert (=> (= (x253 x251 1) (x253 x134 x113)) (and (= x251 x134) (= 1 x113))))
(assert (x147 x203))
(assert (=> (<= x16 10000) (not (= x16 (+ 3 x245)))))
(assert (not (= 32 (x253 x124 4))))
(assert (not (= (+ x204 2) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (not (= (x253 x248 x106) 388749022)))
(assert (not (= (+ 1 x204) (x253 x133 x238))))
(assert (not (= (x253 x61 x228) (+ 1 x204))))
(assert (=> (<= x221 10000) (not (= (x253 x134 x113) x221))))
(assert (not (= (+ x204 2) 292666793)))
(assert (x140 1461501637330902918203684832716283019655932542975))
(assert (x147 x178))
(assert (x14 x124))
(assert (x147 x68))
(assert (x147 x176))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) (+ x245 3))))
(assert (not (= (+ 1 x204) 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (=> (= (x253 x248 x106) (x253 x61 x228)) (and (= x228 x106) (= x248 x61))))
(assert (not (= (x253 x251 1) 4)))
(assert (=> (>= 10000 x256) (not (= x256 (x253 x221 x267)))))
(assert (=> (>= 10000 x106) (not (= (+ x204 2) x106))))
(assert (=> (>= 10000 x251) (not (= x251 (x215 52 32 x176 (x136 x159 96))))))
(assert (=> (>= 10000 x16) (not (= x16 (x253 x221 x267)))))
(assert (=> (>= 10000 x122) (not (= x122 (+ x204 3)))))
(assert (=> (<= x133 10000) (not (= (x253 x251 1) x133))))
(assert (=> (<= x77 10000) (not (= (+ 1 x204) x77))))
(assert (=> (<= x17 10000) (not (= x17 (x253 x251 1)))))
(assert (not (= (x253 x133 x238) (+ x245 3))))
(assert (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (+ x204 3))))
(assert (not (= (+ x204 2) 388749022)))
(assert (=> (= (x253 x124 4) (x253 x17 x198)) (and (= x124 x17) (= 4 x198))))
(assert (not (= (x253 x248 x106) 464684736)))
(assert (=> (<= x16 10000) (not (= x16 (+ x204 3)))))
(assert (x147 x74))
(assert (x147 x108))
(assert (x140 x55))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (+ 1 x204))))
(assert (x51 x90))
(assert (=> (<= x265 10000) (not (= (+ 2 x204) x265))))
(assert (=> (<= x122 10000) (not (= x122 (+ x174 3)))))
(assert (=> (>= 10000 x108) (not (= (x253 x248 x106) x108))))
(assert (not (= (+ x245 3) 32)))
(assert (x147 x214))
(assert (x147 x251))
(assert (=> (>= 10000 x221) (not (= (+ x204 3) x221))))
(assert (=> (>= 10000 x134) (not (= (x253 x251 1) x134))))
(assert (x14 x267))
(assert (=> (<= x108 10000) (not (= x108 (+ x245 3)))))
(assert (x147 x119))
(assert (not (= (+ x204 2) (x253 x221 x267))))
(assert (x147 x78))
(assert (=> (<= x251 10000) (not (= (+ 2 x204) x251))))
(assert (=> (>= 10000 x256) (not (= (+ x204 1) x256))))
(assert (=> (>= 10000 x176) (not (= (x253 x256 x158) x176))))
(assert (=> (<= (x136 x159 96) 10000) (not (= (+ x204 2) (x136 x159 96)))))
(assert (=> (= (x253 x134 x113) (x253 x124 4)) (and (= 4 x113) (= x134 x124))))
(assert (not (= 32 (x253 x221 x267))))
(assert (=> (>= 10000 x256) (not (= x256 (x253 x61 x228)))))
(assert (not (= (+ 3 x204) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x14 x106))
(assert (=> (>= 10000 x106) (not (= (x215 52 32 x176 (x136 x159 96)) x106))))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x147 x48))
(assert (not (= 4 (x253 x61 x228))))
(assert (not (= (+ x204 1) 388749022)))
(assert (x140 x225))
(assert (x147 x135))
(assert (=> (>= 10000 x251) (not (= x251 (+ x174 3)))))
(assert (=> (>= 10000 x94) (not (= (x253 x248 x106) x94))))
(assert (=> (= (x253 x124 4) (x253 x248 x106)) (and (= x124 x248) (= x106 4))))
(assert (x147 x172))
(assert (=> (>= 10000 x17) (not (= (x215 52 32 x176 (x136 x159 96)) x17))))
(assert (=> (<= x77 10000) (not (= x77 (+ x245 3)))))
(assert (=> (>= 10000 x178) (not (= (x253 x122 1) x178))))
(assert (x147 x139))
(assert (=> (<= x106 10000) (not (= x106 (x253 x248 x106)))))
(assert (=> (<= x178 10000) (not (= (+ 3 x204) x178))))
(assert (not (= (x253 x17 x198) 32)))
(assert (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 (+ x174 3))))
(assert (not (= (x253 x134 x113) (+ x174 3))))
(assert (not (= (+ x204 1) (+ x204 2))))
(assert (= (and x69 x230) x82))
(assert (not (= (+ 3 x204) (x215 52 32 x176 (x136 x159 96)))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x94 1))))
(assert (=> (<= x265 10000) (not (= x265 (x253 x134 x113)))))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) 52)))
(assert (not (= (x253 x94 1) (x215 52 32 x176 (x136 x159 96)))))
(assert (not (= (x253 x124 4) 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (=> (<= x77 10000) (not (= (x253 x251 1) x77))))
(assert (not (= (x215 52 32 x176 (x136 x159 96)) (x253 x221 x267))))
(assert (=> (>= 10000 x106) (not (= (x253 x134 x113) x106))))
(assert (x14 x17))
(assert (not (= (x253 x133 x238) 18446744073709551615)))
(assert (=> (>= 10000 x221) (not (= x221 (x253 x248 x106)))))
(assert (=> (<= x133 10000) (not (= (+ x245 3) x133))))
(assert (x147 x144))
(assert (=> (>= 10000 x122) (not (= (x253 x251 1) x122))))
(assert (=> (>= 10000 x221) (not (= (x253 x17 x198) x221))))
(assert (not (= 4 (+ x204 2))))
(assert (x147 x79))
(assert (=> (<= x133 10000) (not (= x133 (x253 x17 x198)))))
(assert (=> (<= x16 10000) (not (= x16 (+ x204 2)))))
(assert (=> (<= x16 10000) (not (= (x253 x61 x228) x16))))
(assert (not (= 26959946667150639794667015087019630673637144422540572481103610249215 (+ x204 3))))
(assert (=> (>= 10000 x94) (not (= x94 (x253 x133 x238)))))
(assert (=> (<= x61 10000) (not (= x61 (x253 x134 x113)))))
(assert (not (= (x253 x124 4) (+ x245 3))))
(assert (=> (>= 10000 x256) (not (= x256 (x253 x256 x158)))))
(assert (not (= (+ 3 x204) (x253 x61 x228))))
(assert (=> (>= 10000 x17) (not (= x17 (+ x204 1)))))
(assert (not (= 464684736 (x215 52 32 x176 (x136 x159 96)))))
(assert (not (= (+ x204 1) 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (=> (>= 10000 x77) (not (= (x253 x256 x158) x77))))
(assert (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x253 x61 x228))))
(assert (=> (>= 10000 x124) (not (= x124 (x253 x122 1)))))
(assert (= x190 true))
(assert (not (= (+ x204 3) (x253 x248 x106))))
(assert (not (= 52 (x253 x251 1))))
(assert (not (= (x253 x256 x158) (x215 52 32 x176 (x136 x159 96)))))
(assert (x147 x142))
(assert (not (= (x253 x256 x158) 52)))
(assert (=> (>= 10000 (x136 x159 96)) (not (= (x253 x94 1) (x136 x159 96)))))
(assert (not (= (x253 x133 x238) (x215 52 32 x176 (x136 x159 96)))))
(check-sat)
(exit)