(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x713 () Int)
(declare-fun x410 () Int)
(declare-fun x549 () Int)
(declare-fun x583 () Bool)
(declare-fun x285 () Bool)
(declare-fun x668 () Int)
(declare-fun x54 () Int)
(declare-fun x849 () Bool)
(declare-fun x340 () Bool)
(declare-fun x698 () Bool)
(declare-fun x614 () Bool)
(declare-fun x326 () Int)
(declare-fun x371 () Int)
(declare-fun x454 () Int)
(declare-fun x735 () Int)
(declare-fun x432 () Int)
(declare-fun x1034 () Int)
(declare-fun x883 () Int)
(declare-fun x703 () Bool)
(declare-fun x201 () Int)
(declare-fun x447 () Bool)
(declare-fun x210 () Bool)
(declare-fun x471 () Int)
(declare-fun x253 () Bool)
(declare-fun x568 () Bool)
(declare-fun x436 () Int)
(declare-fun x708 () Int)
(declare-fun x244 () Bool)
(declare-fun x763 () Bool)
(declare-fun x4 () Bool)
(declare-fun x250 () Bool)
(declare-fun x733 (Int) Int)
(declare-fun x413 () Int)
(declare-fun x971 () Bool)
(declare-fun x515 () Bool)
(declare-fun x689 () Int)
(declare-fun x725 () Int)
(declare-fun x197 () Bool)
(declare-fun x1038 () Bool)
(declare-fun x931 () Int)
(declare-fun x227 () Bool)
(declare-fun x23 () Bool)
(declare-fun x131 () Int)
(declare-fun x757 (Int) Int)
(declare-fun x537 () Bool)
(declare-fun x578 () Int)
(declare-fun x646 () Int)
(declare-fun x1046 () Bool)
(declare-fun x130 () Bool)
(declare-fun x1041 () Int)
(declare-fun x620 () Int)
(declare-fun x482 () Bool)
(declare-fun x370 () Bool)
(declare-fun x632 () Int)
(declare-fun x155 () Bool)
(declare-fun x213 () Bool)
(declare-fun x622 () Bool)
(declare-fun x205 () Int)
(declare-fun x523 () Bool)
(declare-fun x311 () Int)
(declare-fun x760 (Int) Int)
(declare-fun x423 () Int)
(declare-fun x691 () Bool)
(declare-fun x123 () Bool)
(declare-fun x334 () Bool)
(declare-fun x112 () Int)
(declare-fun x769 () Int)
(declare-fun x582 () Bool)
(declare-fun x275 () Int)
(declare-fun x37 () Bool)
(declare-fun x499 () Int)
(declare-fun x462 () Int)
(declare-fun x458 () Int)
(declare-fun x752 () Bool)
(declare-fun x562 () Bool)
(declare-fun x885 () Int)
(declare-fun x312 () Int)
(declare-fun x191 () Int)
(declare-fun x1001 () Bool)
(declare-fun x163 () Int)
(declare-fun x722 () Int)
(declare-fun x835 () Bool)
(declare-fun x952 () Bool)
(declare-fun x596 () Int)
(declare-fun x719 () Int)
(declare-fun x748 () Int)
(declare-fun x1014 () Bool)
(declare-fun x92 () Int)
(declare-fun x924 () Int)
(declare-fun x356 () Int)
(declare-fun x522 () Int)
(declare-fun x348 () Bool)
(declare-fun x472 () Int)
(declare-fun x282 () Int)
(declare-fun x832 () Int)
(declare-fun x721 () Bool)
(declare-fun x637 () Int)
(declare-fun x18 () Bool)
(declare-fun x14 () Int)
(declare-fun x607 () Int)
(declare-fun x1022 (Int) Int)
(declare-fun x153 () Int)
(declare-fun x420 () Int)
(declare-fun x10 () Int)
(declare-fun x325 () Bool)
(declare-fun x520 () Bool)
(declare-fun x392 () Bool)
(declare-fun x53 () Bool)
(declare-fun x467 () Bool)
(declare-fun x758 () Int)
(declare-fun x498 () Bool)
(declare-fun x85 (Int) Int)
(declare-fun x7 () Bool)
(declare-fun x833 () Int)
(declare-fun x178 () Int)
(declare-fun x62 () Int)
(declare-fun x393 () Bool)
(declare-fun x945 () Int)
(declare-fun x729 () Int)
(declare-fun x204 () Int)
(declare-fun x742 () Bool)
(declare-fun x1037 () Int)
(declare-fun x714 () Int)
(declare-fun x929 () Int)
(declare-fun x88 () Int)
(declare-fun x943 () Bool)
(declare-fun x2 () Bool)
(declare-fun x936 () Bool)
(declare-fun x768 () Bool)
(declare-fun x1023 () Int)
(declare-fun x766 () Int)
(declare-fun x680 () Bool)
(declare-fun x1029 () Int)
(declare-fun x404 () Bool)
(declare-fun x398 () Bool)
(declare-fun x529 () Bool)
(declare-fun x564 () Bool)
(declare-fun x655 () Int)
(declare-fun x928 () Int)
(declare-fun x158 () Int)
(declare-fun x712 () Bool)
(declare-fun x113 () Bool)
(declare-fun x180 () Bool)
(declare-fun x789 () Int)
(declare-fun x44 () Int)
(declare-fun x190 () Bool)
(declare-fun x754 () Bool)
(declare-fun x142 () Bool)
(declare-fun x3 () Bool)
(declare-fun x697 () Int)
(declare-fun x403 () Int)
(declare-fun x132 () Bool)
(declare-fun x889 () Bool)
(declare-fun x589 () Bool)
(declare-fun x750 () Bool)
(declare-fun x442 () Bool)
(declare-fun x799 () Bool)
(declare-fun x1039 () Int)
(declare-fun x888 () Int)
(declare-fun x452 () Bool)
(declare-fun x428 () Bool)
(declare-fun x437 () Bool)
(declare-fun x473 () Bool)
(declare-fun x513 () Bool)
(declare-fun x926 () Int)
(declare-fun x468 () Int)
(declare-fun x41 () Bool)
(declare-fun x644 () Bool)
(declare-fun x321 () Int)
(declare-fun x211 () Int)
(declare-fun x810 () Bool)
(declare-fun x938 () Int)
(declare-fun x319 () Int)
(declare-fun x133 () Bool)
(declare-fun x715 () Int)
(declare-fun x297 () Bool)
(declare-fun x677 () Int)
(declare-fun x1 () Int)
(declare-fun x500 () Int)
(declare-fun x167 () Int)
(declare-fun x483 () Int)
(declare-fun x805 () Int)
(declare-fun x13 () Int)
(declare-fun x900 () Int)
(declare-fun x536 (Int) Int)
(declare-fun x1045 () Bool)
(declare-fun x230 () Bool)
(declare-fun x476 () Int)
(declare-fun x613 () Int)
(declare-fun x1020 () Int)
(declare-fun x532 () Int)
(declare-fun x963 () Bool)
(declare-fun x841 () Int)
(declare-fun x463 () Int)
(declare-fun x732 () Int)
(declare-fun x110 () Int)
(declare-fun x615 () Bool)
(declare-fun x823 () Int)
(declare-fun x803 () Bool)
(declare-fun x551 () Int)
(declare-fun x232 () Bool)
(declare-fun x756 () Bool)
(declare-fun x245 () Int)
(declare-fun x426 () Int)
(declare-fun x553 () Bool)
(declare-fun x886 () Int)
(declare-fun x187 () Int)
(declare-fun x279 () Bool)
(declare-fun x853 () Bool)
(declare-fun x880 () Bool)
(declare-fun x904 () Bool)
(declare-fun x1055 () Int)
(declare-fun x408 () Int)
(declare-fun x830 () Int)
(declare-fun x272 () Bool)
(declare-fun x179 () Bool)
(declare-fun x481 () Bool)
(declare-fun x104 () Int)
(declare-fun x751 () Int)
(declare-fun x400 () Int)
(declare-fun x906 () Int)
(declare-fun x786 () Int)
(declare-fun x539 () Bool)
(declare-fun x139 () Bool)
(declare-fun x55 () Int)
(declare-fun x67 () Int)
(declare-fun x707 () Int)
(declare-fun x1009 () Int)
(declare-fun x863 () Bool)
(declare-fun x497 () Bool)
(declare-fun x796 () Bool)
(declare-fun x375 (Int) Int)
(declare-fun x386 () Bool)
(declare-fun x974 () Bool)
(declare-fun x151 () Int)
(declare-fun x595 () Bool)
(declare-fun x728 () Bool)
(declare-fun x1002 () Bool)
(declare-fun x96 () Int)
(declare-fun x350 () Bool)
(declare-fun x608 () Int)
(declare-fun x157 () Int)
(declare-fun x126 () Int)
(declare-fun x955 () Int)
(declare-fun x90 () Bool)
(declare-fun x1011 () Bool)
(declare-fun x1058 () Int)
(declare-fun x492 () Bool)
(declare-fun x535 () Int)
(declare-fun x385 () Int)
(declare-fun x882 () Bool)
(declare-fun x17 () Int)
(declare-fun x657 () Int)
(declare-fun x446 () Int)
(declare-fun x919 () Bool)
(declare-fun x271 () Int)
(declare-fun x165 () Int)
(declare-fun x220 () Bool)
(declare-fun x531 () Bool)
(declare-fun x788 () Bool)
(declare-fun x616 () Int)
(declare-fun x148 () Int)
(declare-fun x364 () Bool)
(declare-fun x367 () Bool)
(declare-fun x415 () Bool)
(declare-fun x479 () Int)
(declare-fun x734 () Bool)
(declare-fun x1003 () Bool)
(declare-fun x594 () Bool)
(declare-fun x633 (Int) Int)
(declare-fun x793 () Bool)
(declare-fun x927 () Int)
(declare-fun x1000 () Int)
(declare-fun x181 () Bool)
(declare-fun x414 () Bool)
(declare-fun x809 () Bool)
(declare-fun x932 () Int)
(declare-fun x996 () Int)
(declare-fun x623 () Bool)
(declare-fun x1040 () Bool)
(declare-fun x910 () Int)
(declare-fun x290 () Bool)
(declare-fun x896 () Int)
(declare-fun x1050 () Int)
(declare-fun x710 () Int)
(declare-fun x602 () Int)
(declare-fun x342 () Bool)
(declare-fun x933 () Int)
(declare-fun x122 () Int)
(declare-fun x815 () Bool)
(declare-fun x785 () Int)
(declare-fun x908 () Bool)
(declare-fun x274 () Int)
(declare-fun x877 () Int)
(declare-fun x784 () Int)
(declare-fun x164 () Int)
(declare-fun x779 () Bool)
(declare-fun x678 () Bool)
(declare-fun x561 () Int)
(declare-fun x496 () Int)
(declare-fun x923 () Bool)
(declare-fun x953 () Bool)
(declare-fun x894 () Bool)
(declare-fun x618 () Int)
(declare-fun x208 () Int)
(declare-fun x31 () Int)
(declare-fun x846 () Int)
(declare-fun x202 () Bool)
(declare-fun x993 () Int)
(declare-fun x874 (Int) Int)
(declare-fun x302 () Bool)
(declare-fun x315 () Int)
(declare-fun x353 () Int)
(declare-fun x433 () Bool)
(declare-fun x209 () Int)
(declare-fun x281 () Bool)
(declare-fun x895 () Int)
(declare-fun x770 () Int)
(declare-fun x203 () Bool)
(declare-fun x545 () Int)
(declare-fun x806 (Int) Int)
(declare-fun x978 () Bool)
(declare-fun x891 () Int)
(declare-fun x972 () Int)
(declare-fun x166 () Int)
(declare-fun x11 () Int)
(declare-fun x822 () Int)
(declare-fun x593 () Bool)
(declare-fun x107 () Bool)
(declare-fun x450 () Bool)
(declare-fun x892 () Int)
(declare-fun x511 () Int)
(declare-fun x866 () Int)
(declare-fun x575 () Bool)
(declare-fun x916 () Int)
(declare-fun x406 () Int)
(declare-fun x611 () Int)
(declare-fun x189 () Int)
(declare-fun x944 () Int)
(declare-fun x339 () Bool)
(declare-fun x159 () Int)
(declare-fun x700 () Int)
(declare-fun x628 () Bool)
(declare-fun x921 () Int)
(declare-fun x787 () Int)
(declare-fun x417 () Int)
(declare-fun x292 () Int)
(declare-fun x918 () Bool)
(declare-fun x146 () Int)
(declare-fun x706 () Bool)
(declare-fun x15 () Int)
(declare-fun x470 () Bool)
(declare-fun x600 () Bool)
(declare-fun x173 () Bool)
(declare-fun x214 () Int)
(declare-fun x309 () Bool)
(declare-fun x425 () Int)
(declare-fun x973 () Int)
(declare-fun x475 () Bool)
(declare-fun x699 () Int)
(declare-fun x795 () Bool)
(declare-fun x308 () Bool)
(declare-fun x466 () Bool)
(declare-fun x861 () Int)
(declare-fun x186 () Int)
(declare-fun x46 () Int)
(declare-fun x397 () Bool)
(declare-fun x510 () Bool)
(declare-fun x509 () Bool)
(declare-fun x705 () Bool)
(declare-fun x294 () Bool)
(declare-fun x1008 () Int)
(declare-fun x837 () Bool)
(declare-fun x307 () Int)
(declare-fun x653 () Bool)
(declare-fun x521 () Bool)
(declare-fun x856 () Bool)
(declare-fun x747 () Int)
(declare-fun x261 () Bool)
(declare-fun x505 () Int)
(declare-fun x305 () Bool)
(declare-fun x670 () Bool)
(declare-fun x376 () Bool)
(declare-fun x469 () Int)
(declare-fun x1059 () Bool)
(declare-fun x847 () Int)
(declare-fun x762 () Int)
(declare-fun x969 () Bool)
(declare-fun x550 () Bool)
(declare-fun x1057 () Int)
(declare-fun x135 () Bool)
(declare-fun x946 () Bool)
(declare-fun x322 () Bool)
(declare-fun x177 () Int)
(declare-fun x941 () Int)
(declare-fun x569 () Bool)
(declare-fun x778 () Bool)
(declare-fun x702 () Int)
(declare-fun x609 () Bool)
(declare-fun x997 () Bool)
(declare-fun x749 () Int)
(declare-fun x1007 () Int)
(declare-fun x1012 () Int)
(declare-fun x20 () Bool)
(declare-fun x240 () Int)
(declare-fun x277 () Int)
(declare-fun x591 () Int)
(declare-fun x346 () Bool)
(declare-fun x70 () Int)
(declare-fun x879 () Bool)
(declare-fun x76 () Bool)
(declare-fun x1031 () Int)
(declare-fun x299 () Int)
(declare-fun x310 () Int)
(declare-fun x341 () Bool)
(declare-fun x802 () Int)
(declare-fun x897 () Bool)
(declare-fun x1042 () Int)
(declare-fun x970 () Bool)
(declare-fun x548 () Int)
(declare-fun x119 () Bool)
(declare-fun x980 () Int)
(declare-fun x592 () Int)
(declare-fun x195 () Int)
(declare-fun x268 () Int)
(declare-fun x824 () Bool)
(declare-fun x198 () Int)
(declare-fun x652 () Int)
(declare-fun x717 () Int)
(declare-fun x456 () Int)
(declare-fun x108 () Int)
(declare-fun x80 () Bool)
(declare-fun x125 () Int)
(declare-fun x401 () Bool)
(declare-fun x902 () Bool)
(declare-fun x612 () Int)
(declare-fun x958 () Bool)
(declare-fun x701 () Int)
(declare-fun x337 () Bool)
(declare-fun x871 () Bool)
(declare-fun x457 () Int)
(declare-fun x975 () Bool)
(declare-fun x445 () Int)
(declare-fun x377 () Bool)
(declare-fun x318 () Int)
(declare-fun x590 () Int)
(declare-fun x525 () Int)
(declare-fun x288 () Int)
(declare-fun x860 () Bool)
(declare-fun x1005 () Bool)
(declare-fun x524 () Int)
(declare-fun x989 () Bool)
(declare-fun x228 () Int)
(declare-fun x69 () Bool)
(declare-fun x42 () Bool)
(declare-fun x27 () Int)
(declare-fun x992 () Bool)
(declare-fun x223 () Int)
(declare-fun x121 () Bool)
(declare-fun x448 () Int)
(declare-fun x222 () Int)
(declare-fun x316 () Bool)
(declare-fun x556 () Int)
(declare-fun x26 () Bool)
(declare-fun x33 () Bool)
(declare-fun x682 () Bool)
(declare-fun x800 () Bool)
(declare-fun x790 () Int)
(declare-fun x935 () Bool)
(declare-fun x516 () Bool)
(declare-fun x117 () Int)
(declare-fun x718 () Bool)
(declare-fun x116 () Int)
(declare-fun x242 () Int)
(declare-fun x850 () Int)
(declare-fun x56 () Int)
(declare-fun x188 () Int)
(declare-fun x39 () Bool)
(declare-fun x429 () Bool)
(declare-fun x409 () Int)
(declare-fun x48 () Bool)
(declare-fun x925 () Bool)
(declare-fun x100 () Int)
(declare-fun x967 () Bool)
(declare-fun x851 () Int)
(declare-fun x349 () Int)
(declare-fun x774 () Int)
(declare-fun x175 () Int)
(declare-fun x619 () Int)
(declare-fun x630 () Int)
(declare-fun x109 () Int)
(declare-fun x430 () Int)
(declare-fun x552 () Int)
(declare-fun x872 () Bool)
(declare-fun x120 () Bool)
(declare-fun x77 () Bool)
(declare-fun x662 () Int)
(declare-fun x495 () Int)
(declare-fun x257 () Int)
(declare-fun x229 () Bool)
(declare-fun x940 () Int)
(declare-fun x324 () Bool)
(declare-fun x169 () Int)
(declare-fun x491 () Int)
(declare-fun x63 () Bool)
(declare-fun x150 () Int)
(declare-fun x688 () Bool)
(declare-fun x231 () Int)
(declare-fun x106 () Bool)
(declare-fun x196 (Int) Int)
(declare-fun x585 () Bool)
(declare-fun x1013 () Bool)
(declare-fun x842 () Int)
(declare-fun x295 (Int) Int)
(declare-fun x723 () Int)
(declare-fun x258 () Bool)
(declare-fun x57 () Int)
(declare-fun x838 (Int) Int)
(declare-fun x519 () Int)
(declare-fun x402 () Bool)
(declare-fun x207 () Int)
(declare-fun x512 () Int)
(declare-fun x669 () Int)
(declare-fun x839 () Bool)
(declare-fun x976 () Int)
(declare-fun x1024 () Bool)
(declare-fun x816 () Bool)
(declare-fun x68 () Bool)
(declare-fun x252 () Bool)
(declare-fun x533 () Int)
(declare-fun x570 () Int)
(declare-fun x772 () Int)
(declare-fun x538 () Bool)
(declare-fun x248 () Bool)
(declare-fun x968 () Bool)
(declare-fun x987 () Bool)
(declare-fun x1006 () Bool)
(declare-fun x753 () Int)
(declare-fun x814 () Int)
(declare-fun x867 () Int)
(declare-fun x47 () Int)
(declare-fun x979 () Bool)
(declare-fun x587 () Int)
(declare-fun x624 () Int)
(declare-fun x396 () Int)
(declare-fun x528 () Bool)
(declare-fun x966 () Bool)
(declare-fun x105 () Bool)
(declare-fun x942 () Int)
(declare-fun x134 () Bool)
(declare-fun x755 () Int)
(declare-fun x52 () Bool)
(declare-fun x949 () Bool)
(declare-fun x565 () Int)
(declare-fun x363 () Int)
(declare-fun x29 () Bool)
(declare-fun x1019 () Int)
(declare-fun x727 () Bool)
(declare-fun x820 () Bool)
(declare-fun x764 () Bool)
(declare-fun x182 () Int)
(declare-fun x740 () Bool)
(declare-fun x893 () Bool)
(declare-fun x138 () Int)
(declare-fun x965 () Bool)
(declare-fun x656 () Int)
(declare-fun x854 () Int)
(declare-fun x444 () Bool)
(declare-fun x792 () Int)
(declare-fun x771 () Int)
(declare-fun x194 () Int)
(declare-fun x964 () Bool)
(declare-fun x262 () Int)
(declare-fun x518 () Int)
(declare-fun x962 () Int)
(declare-fun x827 () Int)
(declare-fun x451 () Int)
(declare-fun x767 () Bool)
(declare-fun x298 () Int)
(declare-fun x1044 () Bool)
(declare-fun x530 () Int)
(declare-fun x601 () Bool)
(declare-fun x284 () Int)
(declare-fun x586 () Bool)
(declare-fun x287 () Int)
(declare-fun x937 () Bool)
(declare-fun x869 () Int)
(declare-fun x780 () Bool)
(declare-fun x440 () Int)
(declare-fun x506 () Bool)
(declare-fun x73 () Int)
(declare-fun x381 () Int)
(declare-fun x99 () Int)
(declare-fun x486 () Int)
(declare-fun x1015 () Int)
(declare-fun x912 () Int)
(declare-fun x416 () Int)
(declare-fun x673 () Int)
(declare-fun x162 () Bool)
(declare-fun x507 () Bool)
(declare-fun x663 () Bool)
(declare-fun x855 () Int)
(declare-fun x422 () Bool)
(declare-fun x934 () Bool)
(declare-fun x579 (Int) Int)
(declare-fun x304 () Bool)
(declare-fun x490 () Bool)
(declare-fun x278 () Int)
(declare-fun x38 () Int)
(declare-fun x459 () Int)
(declare-fun x1052 () Bool)
(declare-fun x711 () Int)
(declare-fun x358 () Bool)
(declare-fun x660 () Bool)
(declare-fun x378 () Int)
(declare-fun x694 () Int)
(declare-fun x1028 () Int)
(declare-fun x631 () Int)
(declare-fun x745 () Bool)
(declare-fun x730 () Int)
(declare-fun x684 () Bool)
(declare-fun x801 () Int)
(declare-fun x267 () Bool)
(declare-fun x493 () Int)
(declare-fun x818 () Bool)
(declare-fun x93 () Int)
(declare-fun x826 () Bool)
(declare-fun x301 (Int) Int)
(declare-fun x435 () Int)
(declare-fun x65 () Bool)
(declare-fun x794 () Bool)
(declare-fun x129 () Bool)
(declare-fun x868 () Int)
(declare-fun x634 () Int)
(declare-fun x1030 () Bool)
(declare-fun x907 () Bool)
(declare-fun x606 () Bool)
(declare-fun x83 () Int)
(declare-fun x899 () Bool)
(declare-fun x724 () Bool)
(declare-fun x219 () Int)
(declare-fun x224 () Int)
(declare-fun x438 () Bool)
(declare-fun x681 () Bool)
(declare-fun x329 () Int)
(declare-fun x160 () Bool)
(declare-fun x296 () Int)
(declare-fun x546 (Int Int) Int)
(declare-fun x777 () Bool)
(declare-fun x477 () Int)
(declare-fun x74 () Bool)
(declare-fun x959 () Int)
(declare-fun x217 () Int)
(declare-fun x845 () Int)
(declare-fun x875 () Int)
(declare-fun x95 () Bool)
(declare-fun x672 () Bool)
(declare-fun x283 () Bool)
(declare-fun x487 () Int)
(declare-fun x1056 () Bool)
(declare-fun x890 () Int)
(declare-fun x808 () Int)
(declare-fun x508 () Int)
(declare-fun x453 () Bool)
(declare-fun x746 () Bool)
(declare-fun x276 () Int)
(declare-fun x303 () Int)
(declare-fun x1016 () Int)
(declare-fun x91 () Int)
(declare-fun x1025 () Bool)
(declare-fun x557 () Bool)
(declare-fun x369 (Int) Int)
(declare-fun x982 () Bool)
(declare-fun x86 () Int)
(declare-fun x848 () Int)
(declare-fun x136 () Int)
(declare-fun x390 () Int)
(declare-fun x465 () Int)
(declare-fun x30 () Int)
(declare-fun x674 () Bool)
(declare-fun x621 () Bool)
(declare-fun x254 () Int)
(declare-fun x720 () Bool)
(declare-fun x811 () Int)
(declare-fun x372 () Bool)
(declare-fun x243 () Bool)
(declare-fun x218 () Bool)
(declare-fun x266 () Int)
(declare-fun x313 () Int)
(declare-fun x977 () Bool)
(declare-fun x115 () Bool)
(declare-fun x782 () Int)
(declare-fun x819 () Int)
(declare-fun x1032 () Int)
(declare-fun x280 () Int)
(declare-fun x947 () Bool)
(declare-fun x627 () Bool)
(declare-fun x45 () Bool)
(declare-fun x829 () Int)
(declare-fun x156 (Int) Int)
(declare-fun x636 () Bool)
(declare-fun x994 (Int) Int)
(declare-fun x870 () Bool)
(declare-fun x813 () Int)
(declare-fun x357 () Int)
(declare-fun x566 () Bool)
(declare-fun x716 () Bool)
(declare-fun x901 () Int)
(declare-fun x599 () Bool)
(declare-fun x584 () Int)
(declare-fun x555 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x736 () Bool)
(declare-fun x34 () Int)
(declare-fun x560 () Bool)
(declare-fun x859 () Bool)
(declare-fun x21 () Bool)
(declare-fun x460 () Bool)
(declare-fun x501 () Int)
(declare-fun x704 () Int)
(declare-fun x981 () Bool)
(declare-fun x75 () Int)
(declare-fun x101 () Bool)
(declare-fun x24 () Int)
(declare-fun x484 () Bool)
(declare-fun x362 () Int)
(declare-fun x335 () Int)
(declare-fun x255 () Bool)
(declare-fun x61 () Int)
(declare-fun x858 () Bool)
(declare-fun x541 () Int)
(declare-fun x49 () Int)
(declare-fun x149 () Bool)
(declare-fun x43 () Bool)
(declare-fun x269 () Bool)
(declare-fun x314 () Bool)
(declare-fun x797 () Int)
(declare-fun x834 () Int)
(declare-fun x192 () Int)
(declare-fun x922 () Int)
(declare-fun x988 () Bool)
(declare-fun x914 () Int)
(declare-fun x434 () Int)
(declare-fun x317 () Bool)
(declare-fun x143 () Bool)
(declare-fun x503 () Int)
(declare-fun x534 () Bool)
(declare-fun x355 () Int)
(declare-fun x1049 () Int)
(declare-fun x603 () Bool)
(declare-fun x690 () Bool)
(declare-fun x731 () Bool)
(declare-fun x625 () Int)
(declare-fun x709 () Bool)
(declare-fun x215 () Bool)
(declare-fun x488 () Int)
(declare-fun x368 () Bool)
(declare-fun x983 () Int)
(declare-fun x577 () Bool)
(declare-fun x1004 () Int)
(declare-fun x306 () Int)
(declare-fun x365 () Bool)
(declare-fun x991 () Bool)
(declare-fun x573 () Int)
(declare-fun x293 () Bool)
(declare-fun x374 () Int)
(declare-fun x1043 () Int)
(declare-fun x421 () Int)
(declare-fun x956 () Bool)
(declare-fun x960 () Bool)
(declare-fun x66 () Bool)
(declare-fun x737 () Int)
(declare-fun x60 () Bool)
(declare-fun x494 (Int) Int)
(declare-fun x665 () Bool)
(declare-fun x455 () Bool)
(declare-fun x234 () Bool)
(declare-fun x617 () Int)
(declare-fun x1018 () Bool)
(declare-fun x419 () Int)
(declare-fun x791 () Int)
(declare-fun x1010 () Bool)
(declare-fun x985 () Bool)
(declare-fun x5 () Int)
(declare-fun x547 () Bool)
(declare-fun x679 () Int)
(declare-fun x687 () Bool)
(declare-fun x12 () Int)
(declare-fun x332 () Bool)
(declare-fun x635 () Int)
(declare-fun x336 () Int)
(declare-fun x328 () Bool)
(declare-fun x812 () Int)
(declare-fun x152 () Int)
(declare-fun x168 () Bool)
(declare-fun x354 () Bool)
(declare-fun x103 (Int Int) Int)
(declare-fun x514 () Int)
(declare-fun x87 () Bool)
(declare-fun x738 () Int)
(declare-fun x930 () Bool)
(declare-fun x114 () Int)
(declare-fun x675 () Int)
(declare-fun x193 () Int)
(declare-fun x695 () Bool)
(declare-fun x51 () Bool)
(declare-fun x825 () Bool)
(declare-fun x1017 () Int)
(declare-fun x256 () Int)
(declare-fun x920 () Int)
(declare-fun x726 () Int)
(declare-fun x199 () Bool)
(declare-fun x384 () Bool)
(declare-fun x97 () Bool)
(declare-fun x658 () Bool)
(declare-fun x913 () Int)
(declare-fun x6 () Bool)
(declare-fun x542 () Int)
(declare-fun x81 () Bool)
(declare-fun x8 () Bool)
(declare-fun x330 () Bool)
(declare-fun x831 () Int)
(declare-fun x343 () Bool)
(declare-fun x449 () Bool)
(declare-fun x739 () Bool)
(declare-fun x141 () Int)
(declare-fun x147 () Bool)
(declare-fun x300 () Int)
(declare-fun x626 () Bool)
(declare-fun x939 () Int)
(declare-fun x184 () Int)
(declare-fun x98 () Bool)
(declare-fun x873 () Int)
(declare-fun x212 () Int)
(declare-fun x366 () Int)
(declare-fun x127 () Int)
(declare-fun x291 () Int)
(declare-fun x544 () Bool)
(declare-fun x35 () Bool)
(declare-fun x693 () Int)
(declare-fun x773 () Int)
(declare-fun x72 () Bool)
(declare-fun x650 () Int)
(declare-fun x649 () Int)
(declare-fun x1047 () Bool)
(declare-fun x478 () Bool)
(declare-fun x986 () Int)
(declare-fun x743 () Int)
(declare-fun x239 () Int)
(declare-fun x22 () Int)
(declare-fun x237 () Bool)
(declare-fun x111 () Int)
(declare-fun x351 () Bool)
(declare-fun x185 () Int)
(declare-fun x654 () Int)
(declare-fun x251 () Bool)
(declare-fun x412 () Bool)
(declare-fun x102 () Int)
(declare-fun x383 () Int)
(declare-fun x1051 () Int)
(declare-fun x128 () Bool)
(declare-fun x567 () Bool)
(declare-fun x480 () Bool)
(declare-fun x16 () Bool)
(declare-fun x661 () Int)
(declare-fun x389 () Int)
(declare-fun x260 () Int)
(declare-fun x443 () Bool)
(declare-fun x998 (Int Int) Int)
(declare-fun x911 () Bool)
(declare-fun x683 () Int)
(declare-fun x405 () Int)
(declare-fun x647 () Int)
(declare-fun x241 () Int)
(declare-fun x264 () Bool)
(declare-fun x571 () Bool)
(declare-fun x559 () Int)
(declare-fun x643 (Int) Int)
(declare-fun x118 () Int)
(declare-fun x427 () Bool)
(declare-fun x265 () Int)
(declare-fun x78 () Int)
(declare-fun x765 () Int)
(declare-fun x876 () Int)
(declare-fun x597 () Int)
(declare-fun x94 () Int)
(declare-fun x543 () Bool)
(declare-fun x331 () Int)
(declare-fun x431 () Bool)
(declare-fun x137 () Int)
(declare-fun x864 () Bool)
(declare-fun x857 () Int)
(declare-fun x19 () Bool)
(declare-fun x648 () Int)
(declare-fun x605 () Int)
(declare-fun x347 () Int)
(declare-fun x526 () Int)
(declare-fun x171 () Bool)
(declare-fun x775 () Bool)
(declare-fun x666 () Bool)
(declare-fun x28 () Int)
(declare-fun x540 () Bool)
(declare-fun x828 () Bool)
(declare-fun x903 () Int)
(declare-fun x59 () Int)
(declare-fun x898 () Bool)
(declare-fun x776 () Bool)
(declare-fun x961 () Int)
(define-fun x640 ((x391 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x391) (<= 0 x391)) x391 (- x391 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x783 ((x391 Int)) Int (ite (and (> 0 x391) (>= x391 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x391) x391))
(define-fun x407 ((x629 Int)) Bool (and (<= 0 x629) (< x629 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x124 ((x629 Int)) Bool (and (>= x629 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x629)))
(define-fun x990 ((x629 Int)) Bool (and (= x629 (x103 x629 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x629 (x103 115792089237316195423570985008687907853269984665640564039457584007913129639935 x629))))
(define-fun x807 ((x629 Int)) Bool (and (= 0 (x103 0 x629)) (= 0 (x103 x629 0))))
(define-fun x1048 ((x629 Int)) Bool (= (x103 x629 x629) x629))
(define-fun x399 ((x629 Int)) Bool (and (x1048 x629) (x807 x629) (x990 x629)))
(define-fun x667 ((x629 Int) (x145 Int)) Bool (= (x103 x145 x629) (x103 x629 x145)))
(define-fun x1026 ((x629 Int) (x145 Int)) Bool (and (=> (>= x629 0) (>= x629 (x103 x629 x145))) (>= (x103 x629 x145) 0) (=> (>= x145 0) (>= x145 (x103 x629 x145)))))
(define-fun x759 ((x629 Int) (x145 Int)) Bool (and (x1026 x629 x145) (x667 x629 x145)))
(define-fun x441 ((x629 Int)) Bool (= (+ (x103 x629 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x629 32)) (mod x629 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x418 ((x629 Int)) Bool (and (x441 x629) (x759 x629 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x359 ((x629 Int)) Bool (= (x103 x629 1461501637330902918203684832716283019655932542975) (mod x629 1461501637330902918203684832716283019655932542976)))
(define-fun x598 ((x629 Int)) Bool (and (x359 x629) (x759 x629 1461501637330902918203684832716283019655932542975)))
(define-fun x865 ((x89 Int)) Int (ite (< x89 x511) (x579 x89) 0))
(define-fun x984 ((x89 Int)) Int (x806 x89))
(define-fun x259 ((x89 Int)) Int (ite (= x1055 x89) x885 (x375 x89)))
(define-fun x461 ((x89 Int)) Int (ite (= x89 x291) x869 (x259 x89)))
(define-fun x502 ((x89 Int)) Int (ite (= x89 128) x224 (x838 x89)))
(define-fun x881 ((x89 Int)) Int (ite (and (<= 160 x89) (> (+ x224 160) x89)) (x806 (+ (- x89 160) x479)) (x502 x89)))
(define-fun x905 ((x89 Int)) Int (ite (= x296 x89) 0 (x881 x89)))
(define-fun x323 ((x89 Int)) Int (ite (= x1032 x89) x288 (x905 x89)))
(define-fun x843 ((x89 Int)) Int (ite (and (< x89 (+ x288 x271)) (<= x271 x89)) (x806 (+ (- x89 x271) x329)) (x323 x89)))
(define-fun x373 ((x89 Int)) Int (ite (= x89 x436) 0 (x843 x89)))
(define-fun x638 ((x89 Int)) Int (ite (= x976 x89) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x373 x89)))
(define-fun x289 ((x89 Int)) Int (ite (= x89 x228) 160 (x638 x89)))
(define-fun x40 ((x89 Int)) Int (ite (= x89 x791) x634 (x289 x89)))
(define-fun x176 ((x89 Int)) Int (ite (= x89 x420) x854 (x40 x89)))
(define-fun x221 ((x89 Int)) Int (ite (= x355 x89) x928 (x176 x89)))
(define-fun x485 ((x89 Int)) Int (ite (= x89 x732) x587 (x221 x89)))
(define-fun x1033 ((x89 Int)) Int (ite (= x83 x89) x541 (x485 x89)))
(define-fun x574 ((x89 Int)) Int (ite x989 (x485 x89) (ite x252 (x221 x89) (ite x966 (x176 x89) (ite x543 (x40 x89) (x1033 x89))))))
(define-fun x84 ((x89 Int)) Int (ite (= x195 x89) 0 (x574 x89)))
(define-fun x183 ((x89 Int)) Int (ite x402 (x574 x89) (x84 x89)))
(define-fun x588 ((x89 Int)) Int (ite (= x157 x89) x111 (x183 x89)))
(define-fun x225 ((x89 Int)) Int (ite (= x89 x619) x784 (x588 x89)))
(define-fun x1027 ((x89 Int)) Int (ite (= x89 x652) x381 (x225 x89)))
(define-fun x327 ((x89 Int)) Int (ite (= x89 x842) x812 (x1027 x89)))
(define-fun x527 ((x89 Int)) Int (ite (= x89 x185) x847 (x327 x89)))
(define-fun x380 ((x89 Int)) Int (ite (= x89 x931) x774 (x527 x89)))
(define-fun x172 ((x89 Int)) Int (ite x19 (x527 x89) (ite x29 (x327 x89) (ite x490 (x1027 x89) (ite x776 (x225 x89) (x380 x89))))))
(define-fun x504 ((x89 Int)) Int (ite (= x522 x89) 0 (x172 x89)))
(define-fun x270 ((x89 Int)) Int (ite x583 (x172 x89) (x504 x89)))
(define-fun x25 ((x89 Int)) Int (ite (= x790 x89) x1007 (x270 x89)))
(define-fun x263 ((x89 Int)) Int (ite (= x89 x590) x164 (x25 x89)))
(define-fun x563 ((x89 Int)) Int (ite (= x89 x163) x851 (x263 x89)))
(define-fun x1054 ((x89 Int)) Int (ite (= x89 x483) x927 (x563 x89)))
(define-fun x639 ((x89 Int)) Int (ite (= x89 x694) x91 (x1054 x89)))
(define-fun x878 ((x89 Int)) Int (ite (= x89 x620) x96 (x639 x89)))
(define-fun x1036 ((x89 Int)) Int (ite (= x570 x89) x551 (x878 x89)))
(define-fun x761 ((x89 Int)) Int (ite x37 (x878 x89) (ite x703 (x639 x89) (ite x168 (x1054 x89) (ite x234 (x563 x89) (x1036 x89))))))
(define-fun x664 ((x89 Int)) Int (ite (= x693 x89) x631 (x761 x89)))
(define-fun x360 ((x89 Int)) Int (ite (= x89 x425) x231 (x664 x89)))
(define-fun x474 ((x89 Int)) Int (ite (= x102 x89) x117 (x360 x89)))
(define-fun x781 ((x89 Int)) Int (ite (= x1016 x89) x57 (x474 x89)))
(define-fun x676 ((x89 Int)) Int (ite (and (< x89 (+ x34 x57)) (>= x89 x34)) (x806 (+ x266 (- x89 x34))) (x781 x89)))
(define-fun x1021 ((x89 Int)) Int (ite (= x797 x89) 0 (x676 x89)))
(define-fun x995 ((x89 Int)) Int (ite x863 (x360 x89) (x1021 x89)))
(define-fun x852 ((x89 Int)) Int (ite (= x976 x89) x573 (x995 x89)))
(define-fun x1053 ((x89 Int)) Int (ite x147 (x995 x89) (x852 x89)))
(define-fun x642 ((x89 Int)) Int (ite (= x11 x89) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x1053 x89)))
(define-fun x379 ((x89 Int)) Int (ite (and (< x89 (+ x11 32)) (<= x11 x89)) (x643 (+ 0 (- x89 x11))) (x642 x89)))
(define-fun x170 ((x89 Int)) Int (ite (and (<= 196 x89) (< x89 (+ (x783 (- x906 196)) 196))) (x995 (+ (- x89 196) (x640 (+ 196 x976)))) (x865 x89)))
(define-fun x411 ((x89 Int)) Int (ite (= 128 x89) x426 (x295 x89)))
(define-fun x273 ((x89 Int)) Int (ite (and (< x89 (+ x426 160)) (<= 160 x89)) (x170 (+ (- x89 160) 196)) (x411 x89)))
(define-fun x604 ((x89 Int)) Int (ite (= x89 x357) 0 (x273 x89)))
(define-fun x361 ((x89 Int)) Int (ite (= x89 x192) x146 (x604 x89)))
(define-fun x235 ((x89 Int)) Int (ite (and (>= x89 x469) (< x89 (+ x146 x469))) (x170 (+ (- x89 x469) x508)) (x361 x89)))
(define-fun x344 ((x89 Int)) Int (ite (= x89 x131) 0 (x235 x89)))
(define-fun x394 ((x89 Int)) Int (ite (= x608 x89) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x344 x89)))
(define-fun x338 ((x89 Int)) Int (ite (= x89 x608) x108 (x394 x89)))
(define-fun x489 ((x89 Int)) Int (ite (= x89 x291) x625 (x461 x89)))
(define-fun x82 ((x89 Int)) Int (ite (= x819 x89) x78 (x489 x89)))
(define-fun x200 ((x89 Int)) Int (ite (and (<= x284 x89) (< x89 (+ x284 0))) (x760 (+ (- x89 x284) 0)) (x338 x89)))
(define-fun x862 ((x89 Int)) Int (ite x1035 (x338 x89) (ite x721 (x200 x89) (x338 x89))))
(define-fun x286 ((x89 Int)) Int (ite x1035 (x733 x89) (x760 x89)))
(define-fun x957 ((x89 Int)) Int (ite (= x284 x89) x456 (x862 x89)))
(define-fun x320 ((x89 Int)) Int (ite (and (>= x89 x673) (< x89 (+ x673 x456))) (x286 (+ 0 (- x89 x673))) (x957 x89)))
(define-fun x610 ((x89 Int)) Int (ite x721 (x156 x89) (x82 x89)))
(define-fun x246 ((x89 Int)) Int (ite (= x89 x819) x14 (x610 x89)))
(define-fun x884 ((x89 Int)) Int (ite (= x291 x89) x310 (x246 x89)))
(define-fun x645 ((x89 Int)) Int (ite x529 (x461 x89) (ite x1035 (x461 x89) (ite x736 (x610 x89) (x884 x89)))))
(define-fun x216 ((x89 Int)) Int (ite x529 (x344 x89) (ite x272 (x862 x89) (x320 x89))))
(define-fun x844 ((x89 Int)) Int (ite (= x89 x291) x578 (x645 x89)))
(define-fun x954 ((x89 Int)) Int (ite (= x519 x89) x524 (x844 x89)))
(define-fun x696 ((x89 Int)) Int (ite (= x89 x519) x866 (x954 x89)))
(define-fun x580 ((x89 Int)) Int (ite (= x89 x291) x432 (x696 x89)))
(define-fun x641 ((x89 Int)) Int (ite (= x311 x89) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x216 x89)))
(define-fun x741 ((x89 Int)) Int (ite (= x89 x973) 192 (x641 x89)))
(define-fun x154 ((x89 Int)) Int (ite (= x403 x89) x12 (x741 x89)))
(define-fun x821 ((x89 Int)) Int (ite (= x89 x650) x153 (x154 x89)))
(define-fun x395 ((x89 Int)) Int (ite (= x617 x89) x512 (x821 x89)))
(define-fun x79 ((x89 Int)) Int (ite (= x920 x89) x212 (x395 x89)))
(define-fun x233 ((x89 Int)) Int (ite x665 (x994 x89) (x580 x89)))
(define-fun x692 ((x89 Int)) Int (ite x534 (x233 x89) (ite x562 (x757 x89) (x233 x89))))
(define-fun x659 ((x89 Int)) Int (ite (= x89 x423) x530 (x79 x89)))
(define-fun x572 ((x89 Int)) Int (ite x42 (x79 x89) (ite x777 (x395 x89) (ite x515 (x821 x89) (ite x304 (x154 x89) (x659 x89))))))
(define-fun x226 ((x89 Int)) Int (ite (= x89 x895) 0 (x572 x89)))
(define-fun x950 ((x89 Int)) Int (ite x658 (x572 x89) (x226 x89)))
(define-fun x915 ((x89 Int)) Int (ite (= x1029 x89) x700 (x950 x89)))
(define-fun x576 ((x89 Int)) Int (ite (= x419 x89) x845 (x915 x89)))
(define-fun x387 ((x89 Int)) Int (ite (= x89 x104) x597 (x576 x89)))
(define-fun x58 ((x89 Int)) Int (ite (= x89 x110) x100 (x387 x89)))
(define-fun x144 ((x89 Int)) Int (ite (= x89 x254) x1057 (x58 x89)))
(define-fun x798 ((x89 Int)) Int (ite (= x855 x89) x201 (x144 x89)))
(define-fun x917 ((x89 Int)) Int (ite x894 (x144 x89) (ite x688 (x58 x89) (ite x444 (x387 x89) (ite x358 (x576 x89) (x798 x89))))))
(define-fun x581 ((x89 Int)) Int (ite (= x635 x89) 0 (x917 x89)))
(define-fun x32 ((x89 Int)) Int (ite x599 (x917 x89) (x581 x89)))
(define-fun x439 ((x89 Int)) Int (ite (= x89 x505) x637 (x32 x89)))
(define-fun x140 ((x89 Int)) Int (ite (= x649 x89) x1041 (x439 x89)))
(define-fun x50 ((x89 Int)) Int (ite (= x89 x187) x462 (x140 x89)))
(define-fun x161 ((x89 Int)) Int (ite (= x44 x89) x647 (x50 x89)))
(define-fun x948 ((x89 Int)) Int (ite (and (<= x311 x89) (< x89 (+ x311 0))) (x633 (+ 0 (- x89 x311))) (x161 x89)))
(define-fun x817 ((x89 Int)) Int (ite x665 (x948 x89) (x161 x89)))
(define-fun x236 ((x89 Int)) Int (ite (= x89 x903) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x817 x89)))
(define-fun x836 ((x89 Int)) Int (ite (= x584 x89) x933 (x236 x89)))
(define-fun x464 ((x89 Int)) Int (ite (= x89 x533) x668 (x836 x89)))
(define-fun x517 ((x89 Int)) Int (ite (= x405 x89) x299 (x464 x89)))
(define-fun x174 ((x89 Int)) Int (ite (= x1051 x89) x1028 (x517 x89)))
(define-fun x887 ((x89 Int)) Int (ite x953 (x517 x89) (ite x601 (x464 x89) (ite x793 (x836 x89) (ite x213 (x236 x89) (x174 x89))))))
(define-fun x840 ((x89 Int)) Int (ite (= x89 x753) 0 (x887 x89)))
(define-fun x36 ((x89 Int)) Int (ite x428 (x887 x89) (x840 x89)))
(define-fun x249 ((x89 Int)) Int (ite (= x89 x311) x205 (x36 x89)))
(define-fun x558 ((x89 Int)) Int (ite (= x89 x929) x814 (x249 x89)))
(define-fun x424 ((x89 Int)) Int (ite (= x89 x186) x932 (x558 x89)))
(define-fun x247 ((x89 Int)) Int (ite (= x89 x262) x476 (x424 x89)))
(define-fun x554 ((x89 Int)) Int (ite (= x926 x89) x801 (x247 x89)))
(define-fun x333 ((x89 Int)) Int (ite (= x89 x336) x385 (x554 x89)))
(define-fun x64 ((x89 Int)) Int (ite (= x500 x89) x167 (x333 x89)))
(define-fun x951 ((x89 Int)) Int (ite x816 (x333 x89) (ite x35 (x554 x89) (ite x309 (x247 x89) (ite x965 (x424 x89) (x64 x89))))))
(define-fun x388 ((x89 Int)) Int (ite (= x89 x548) 0 (x951 x89)))
(define-fun x999 ((x89 Int)) Int (ite x826 (x951 x89) (x388 x89)))
(define-fun x651 ((x89 Int)) Int (ite (= x89 x416) x549 (x999 x89)))
(define-fun x804 ((x89 Int)) Int (ite x294 (x379 x89) (x642 x89)))
(define-fun x71 ((x89 Int)) Int (ite (= x834 x89) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x804 x89)))
(define-fun x909 ((x89 Int)) Int (ite (and (> (+ 32 x834) x89) (<= x834 x89)) (x85 (+ (- x89 x834) 0)) (x71 x89)))
(define-fun x686 ((x89 Int)) Int (ite x115 (x909 x89) (x71 x89)))
(define-fun x671 ((x89 Int)) Int (ite (= x942 x89) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x686 x89)))
(define-fun x206 ((x89 Int)) Int (ite (and (> (+ 32 x942) x89) (>= x89 x942)) (x494 (+ (- x89 x942) 0)) (x671 x89)))
(define-fun x352 ((x89 Int)) Int (ite x709 (x206 x89) (x671 x89)))
(define-fun x685 ((x89 Int)) Int (ite (= x896 x89) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x352 x89)))
(define-fun x9 ((x89 Int)) Int (ite (and (> (+ 32 x896) x89) (>= x89 x896)) (x874 (+ 0 (- x89 x896))) (x685 x89)))
(define-fun x382 ((x89 Int)) Int (ite x828 (x9 x89) (x685 x89)))
(define-fun x744 ((x89 Int)) Int (ite (= x191 x89) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x382 x89)))
(define-fun x238 ((x89 Int)) Int (ite (and (>= x89 x191) (> (+ 32 x191) x89)) (x1022 (+ (- x89 x191) 0)) (x744 x89)))
(define-fun x345 ((x89 Int)) Int (ite x119 (x238 x89) (x744 x89)))
(assert (x418 x292))
(assert (= (x838 x962) 0))
(assert (x124 x219))
(assert (= x894 (and x918 (not x197))))
(assert (x418 x222))
(assert (= (x838 (+ (- (+ 196 (- x435 160)) 196) (x640 (+ x976 196)))) 0))
(assert (= (x838 (+ (- x28 196) (x640 (+ x976 196)))) 0))
(assert (= (and x3 x752) x95))
(assert (x124 x590))
(assert (x124 x417))
(assert (x124 x378))
(assert (x124 x512))
(assert (x124 x654))
(assert (x124 x70))
(assert (= (and (not x795) x824) x937))
(assert (x124 x719))
(assert (x124 x743))
(assert (= (and x18 (not x285)) x1002))
(assert (x124 x126))
(assert (x124 x611))
(assert (x124 x1049))
(assert (x124 x262))
(assert (x124 x726))
(assert (= x721 (and x179 x431)))
(assert (= 0 (x838 224)))
(assert (x124 x922))
(assert (= (x295 x219) 0))
(assert (= (or x115 x283) x550))
(assert (x124 x945))
(assert (= 0 (x733 (- 256 x673))))
(assert (= x858 (and x498 x452)))
(assert (x124 x854))
(assert (x124 x83))
(assert (= 0 (x838 (+ (- (+ 196 (- x829 160)) 196) (x640 (+ 196 x976))))))
(assert (= (x838 (+ (- (+ 196 (- x219 160)) 196) (x640 (+ x976 196)))) 0))
(assert (x124 x12))
(assert (= x544 (or x826 x555)))
(assert (x124 x198))
(assert (= (and x3 (not x752)) x237))
(assert (= (x838 (x640 (+ x976 196))) 0))
(assert (= x897 (and x544 (not x317))))
(assert (= (and x377 (not x1025)) x658))
(assert (= x943 (and x1018 x334)))
(assert (= x455 (=> (and (or x795 (not x795)) (= (< x49 x503) x795)) x889)))
(assert (= x793 (and x509 (not x568))))
(assert (x124 x137))
(assert (= (x838 (+ (- x1031 196) (x640 (+ x976 196)))) 0))
(assert (x124 x185))
(assert (= (x838 (+ (x640 (+ 196 x976)) (- x55 196))) 0))
(assert (= (x295 224) 0))
(assert (x124 x280))
(assert (= x860 (=> (and (= (> x782 x634) x779) (or (and x779 (= x195 (x640 (+ x848 x634)))) (not x779))) x1045)))
(assert (x124 x755))
(assert (x399 x242))
(assert (= x106 (and x585 (not x43))))
(assert (x124 x933))
(assert (x124 x541))
(assert (x124 x565))
(assert (x124 x972))
(assert (x124 x488))
(assert (= (and x949 x943) x538))
(assert (x124 x432))
(assert (x124 x833))
(assert (x124 x773))
(assert (x399 x127))
(assert (x124 x355))
(assert (= x180 (=> (and (>= x409 0) (>= 255 x409) (= (= x409 0) x348) (< x409 256)) (and (=> (not x348) x466) (=> (and x348 (and (= x578 x38) (= (x369 x291) x116) (<= 0 x46) (= (= x31 x245) x919) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x524) (= x432 (x696 x291)) (< x46 1461501637330902918203684832716283019655932542976) (= x769 0) (= (x844 x519) x524) x919 (= x702 (x103 1461501637330902918203684832716283019655932542975 x519)) (= (x954 x519) x451) (= x519 x245) (>= 1461501637330902918203684832716283019655932542975 x46) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x769 x432)) (= x451 x866) (= x38 (x645 x291)) (= x519 (x998 x291 x116)) (= x31 x892) (= x155 (= 0 x702)))) (and (=> x155 x466) (=> (and (and (= (x640 (+ 32 x403)) x729) (= x12 (x741 128)) (<= 0 x1041) (<= x1041 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x462) (<= x462 1461501637330902918203684832716283019655932542975) (<= x637 1461501637330902918203684832716283019655932542975) (= x526 (x103 1461501637330902918203684832716283019655932542975 x519)) (> 1461501637330902918203684832716283019655932542976 x647) (= (x640 (+ x973 192)) x403) (<= 0 x647) (> 1461501637330902918203684832716283019655932542976 x637) (< x1041 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x647) (= (x640 (+ 4 x311)) x973) (<= 0 x637) (<= 0 x462) (= x1005 (< 0 x12))) (not x155)) (and (=> (and (not x1005) (= 0 x208)) x322) (=> (and x1005 (and (= x650 x729) (= x925 (< 32 x12)) (= (x154 160) x153))) (and (=> (and x925 (and (= (x821 192) x512) (= (> x12 64) x628) (= x617 (x640 (+ x729 32))))) (and (=> (and x628 (and (= x123 (> x12 96)) (= (x640 (+ x729 64)) x920) (= x212 (x395 224)))) (and (=> (and (not x123) (= x208 96)) x322) (=> x123 x414))) (=> (and (= 64 x208) (not x628)) x322))) (=> (and (= 32 x208) (not x925)) x322)))))))))))
(assert (= (or x828 x586) x970))
(assert (= (and x202 (not x481)) x627))
(assert (= (or x128 x294) x264))
(assert (= (and x585 x43) x681))
(assert (x407 x526))
(assert (= (and x314 x1005) x537))
(assert (= (x838 (+ (x640 (+ x976 196)) (- (+ x508 (- x996 x469)) 196))) 0))
(assert (x124 x710))
(assert (= (and x837 x129) x555))
(assert (x124 x1000))
(assert (x124 x265))
(assert (x124 x525))
(assert (= (and x1044 (not x628)) x777))
(assert (x124 x875))
(assert (x124 x109))
(assert (x124 x92))
(assert (x124 x959))
(assert (x124 x116))
(assert (= (or x663 x721) x173))
(assert (= x609 (=> (= x143 (> x518 0)) (and (=> (not x143) x466) (=> x143 x101)))))
(assert (x124 x78))
(assert (= x134 (and x334 (not x1018))))
(assert (x124 x454))
(assert (x124 x630))
(assert (x124 x159))
(assert (x124 x15))
(assert (x399 x298))
(assert (x418 x434))
(assert (= x293 (and x412 x582)))
(assert (x124 x846))
(assert (= (and x179 (not x431)) x663))
(assert (x124 x136))
(assert (x124 x287))
(assert (= 0 (x733 (- x707 x673))))
(assert (= x849 (=> (and (or x113 (not x113)) (= (= x993 0) x113)) x370)))
(assert (x124 x886))
(assert (x124 x362))
(assert (= x404 (=> (and (= x505 (x640 (+ x1029 32))) (= x649 (x640 (+ 32 x505))) (= x1039 (x196 x526)) (= (x640 (+ 32 x187)) x44) (= x615 (= x1039 0)) (= (x640 (+ x649 32)) x187)) (and (=> x615 x466) (=> (and (and (or (not x734) (and x734 (and (= (= x256 (x994 x526)) x21) (= x672 (<= x374 (x994 x291))) x21 (= (x580 x291) x374) x672 (> 4294967296 x832) (= (x580 x526) x256)))) (= x734 (> x737 0))) (not x615)) x230)))))
(assert (= (=> (and (and (not (= x808 0)) (= (x640 (+ 31 x67)) x276) (not (or (and (< x67 32) (= true (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x67 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x983 (x1053 x976)) (>= 1461501637330902918203684832716283019655932542975 x983) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x276) x561) (= (x640 (+ x976 x561)) x11) (= x871 (< 0 x417))) (or (and (not x871) (= x662 x417)) (and (and (= 1 x662) (< x723 4294967296)) x871))) x803) x670))
(assert (= x244 (and x969 x778)))
(assert (= x824 (or x977 x261 x506 x339 x897)))
(assert (x124 x650))
(assert (x124 x748))
(assert (x124 x927))
(assert (= (and x16 x615) x1046))
(assert (x124 x10))
(assert (x124 x747))
(assert (= x449 (and x740 (not x815))))
(assert (x124 x118))
(assert (= (x295 x996) 0))
(assert (x124 x11))
(assert (x407 x1000))
(assert (x124 x802))
(assert (= (=> (and (or (and (not x63) (= x607 x612)) (and (and (< x789 4294967296) (= x612 1)) x63)) (and (= x465 (x640 (+ 31 x939))) (<= x177 1461501637330902918203684832716283019655932542975) (= x896 (x640 (+ x942 x47))) (= (> x607 0) x63) (not (= 0 x188)) (= x177 (x352 x942)) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x465) x47) (not (or (> x939 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x939 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x939)))))) x372) x974))
(assert (x124 x217))
(assert (x124 x980))
(assert (x124 x499))
(assert (x124 x526))
(assert (x124 x657))
(assert (x399 x877))
(assert (= (and (not x433) x567) x510))
(assert (x124 x1))
(assert (x124 x44))
(assert (x124 x434))
(assert (x124 x436))
(assert (x124 x883))
(assert (x124 x164))
(assert (x124 x406))
(assert (x124 x689))
(assert (= x614 (=> (= (not (> x49 128)) x720) (and (=> (= x503 128) x455) x720))))
(assert (= x809 (and x285 x18)))
(assert (x124 x532))
(assert (= x583 (and (not x1013) x475)))
(assert (x124 x735))
(assert (x124 x762))
(assert (x418 x151))
(assert (x124 x668))
(assert (x124 x125))
(assert (x124 x829))
(assert (= (and x65 x324) x509))
(assert (x124 x890))
(assert (= x213 (and x65 (not x324))))
(assert (= (and x918 x197) x98))
(assert (= x142 (and x809 (not x229))))
(assert (= x372 (=> (and (or (and x393 (and (= 1 x141) (< x458 4294967296))) (and (= x141 x109) (not x393))) (and (= x393 (> x109 0)) (not (or (and (> 32 x789) (= (<= x789 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x789))) (= (x640 (+ x896 x471)) x191) (= x1058 (x382 x896)) (>= 1461501637330902918203684832716283019655932542975 x1058) (= x877 (x640 (+ x789 31))) (not (= x612 0)) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x877) x471))) x963)))
(assert (x399 x292))
(assert (x124 x694))
(assert (x418 x1009))
(assert (x124 x27))
(assert (x124 x117))
(assert (= x907 (and x1014 x691)))
(assert (= (=> (and (and (not (= x662 0)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x723) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x723) true) (> 32 x723)))) (= (x640 (+ x630 x11)) x834) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x298) x630) (= x319 (x804 x11)) (>= 1461501637330902918203684832716283019655932542975 x319) (= x215 (< 0 x477)) (= x298 (x640 (+ x723 31)))) (or (and (and (> 4294967296 x624) (= 1 x159)) x215) (and (= x159 x477) (not x215)))) x820) x803))
(assert (= (and (not x393) x970) x20))
(assert (= x531 (and x316 x341)))
(assert (= x343 (and x934 x879)))
(assert (x124 x400))
(assert (= (and (not x1030) x902) x234))
(assert (= (and x992 x63) x828))
(assert (= (and (not x660) x960) x65))
(assert (x124 x146))
(assert (= x51 (=> (= (> x910 0) x43) (and (=> (not x43) x466) (=> (and x43 (= x861 x311)) x180)))))
(assert (x124 x271))
(assert (= x447 (and (not x778) x969)))
(assert (x124 x207))
(assert (= 0 (x838 x491)))
(assert (x124 x256))
(assert (x124 x108))
(assert (x124 x549))
(assert (= (and x978 x243) x800))
(assert (= (x838 (+ 32 (x640 (+ x976 196)))) 0))
(assert (= (and (not x930) x467) x989))
(assert (= (or x272 x449) x585))
(assert (x124 x240))
(assert (x124 x390))
(assert (x124 x91))
(assert (x124 x141))
(assert (= x367 (=> (and (and (and (= x901 (x196 x291)) (= x275 x792) (> 2220280665 x751) (> 1461501637330902918203684832716283019655932542976 x792) (= x751 75068239) (> 1245659826 x751) (>= 1461501637330902918203684832716283019655932542975 x792) (= x265 x525) (< 0 x901) (<= 0 x792)) (and (= x514 x275) (= (= x525 x514) x33))) (and (= x487 (x196 x291)) (not x988) (> 1461501637330902918203684832716283019655932542976 x46) (< x499 2220280665) (>= x46 0) (<= x46 1461501637330902918203684832716283019655932542975) (= x46 x265) (< x499 1245659826) (= x499 75068239) (not x705) (< 0 x487))) (and (=> (and (and (> x408 0) (> 1461501637330902918203684832716283019655932542976 x637) (not (= 818759841 x277)) (> 2220280665 x277) (= 832554005 x277) (= x637 x1050) (= (x196 x291) x408) (>= x637 0) (<= x637 1461501637330902918203684832716283019655932542975) (not (= 75068239 x277)) (< x277 1245659826)) (and (and (= x255 (= x371 x1023)) (= x1023 x813)) (and (< 0 x331) (> 2220280665 x61) (> 1245659826 x61) (>= x891 0) (not (= 818759841 x61)) (= x1050 x371) (not (= 75068239 x61)) (= x331 (x196 x291)) (= x61 832554005) (>= 1461501637330902918203684832716283019655932542975 x891) (= x813 x891) (< x891 1461501637330902918203684832716283019655932542976)))) (and x255 (=> (and (and (> 1461501637330902918203684832716283019655932542976 x1041) (= x787 (x196 x291)) (= 1245659826 x430) (> x787 0) (> 2220280665 x430) (not (> 1245659826 x430)) (>= 1461501637330902918203684832716283019655932542975 x1041) (= x1041 x710) (<= 0 x1041)) (and (and (< x54 1461501637330902918203684832716283019655932542976) (not (> 1245659826 x118)) (= (x196 x291) x542) (>= 1461501637330902918203684832716283019655932542975 x54) (= x710 x699) (<= 0 x54) (> 2220280665 x118) (< 0 x542) (= x118 1245659826) (= x735 x54)) (and (= x214 x735) (= (= x214 x699) x190)))) (and x190 (=> (and (and (= x303 4199168155) (= x448 x462) (not (= 3705713892 x303)) (<= x462 1461501637330902918203684832716283019655932542975) (< 0 x189) (not (= 3572374928 x303)) (not (< x303 2220280665)) (>= x462 0) (= (x196 x291) x189) (not (= 4076725131 x303)) (> 1461501637330902918203684832716283019655932542976 x462) (not (< x303 3084411429)) (not (= x303 3084411429))) (and (and (= x457 x661) (= (= x749 x661) x742)) (and (not (< x823 2220280665)) (= x182 x457) (not (= 3572374928 x823)) (>= x182 0) (= x448 x749) (not (< x823 3084411429)) (< x182 1461501637330902918203684832716283019655932542976) (= 4199168155 x823) (= (x196 x291) x209) (not (= 3084411429 x823)) (not (= 4076725131 x823)) (not (= x823 3705713892)) (>= 1461501637330902918203684832716283019655932542975 x182) (> x209 0)))) (and (=> (and (and (> x822 0) (not (= x613 2249206060)) (>= 1461501637330902918203684832716283019655932542975 x647) (not (> 2220280665 x613)) (>= x647 0) (= x647 x62) (< x647 1461501637330902918203684832716283019655932542976) (= 2329570063 x613) (= (x196 x291) x822) (> 3084411429 x613) (not (= x613 2220280665))) (and (and (not (= x771 2220280665)) (> 3084411429 x771) (= x833 x689) (not (= x771 2249206060)) (<= 0 x833) (> x940 0) (= x62 x56) (> 1461501637330902918203684832716283019655932542976 x833) (not (< x771 2220280665)) (= (x196 x291) x940) (= 2329570063 x771) (<= x833 1461501637330902918203684832716283019655932542975)) (and (= x171 (= x725 x56)) (= x689 x725)))) x171) x742)))))) x33))))
(assert (x399 x434))
(assert (= x470 (and x879 (not x934))))
(assert (x124 x374))
(assert (x124 x605))
(assert (x124 x465))
(assert (= x816 (and (not x41) x706)))
(assert (x124 x150))
(assert (= (and x810 (not x401)) x442))
(assert (= x963 (=> (and (and (= x983 x1049) (= (x345 x191) x758) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x458) true) (> 32 x458)) (> x458 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= x141 0)) (>= 1461501637330902918203684832716283019655932542975 x758)) (and (= x307 x54) (= x891 x313) (= false x988) (= x347 x833) (= x705 false) (= x182 x112) (= x792 x406))) x367)))
(assert (x124 x127))
(assert (x124 x1009))
(assert (= x515 (and x537 (not x925))))
(assert (x124 x723))
(assert (= (=> (and (= (x517 x922) x1028) (= x1003 (not (< 128 x888))) (= (x640 (+ 96 x217)) x1051) (= (x640 (+ x469 96)) x922)) (and x1003 (=> (= x830 128) x964))) x569))
(assert (= (or x626 x665) x880))
(assert (x407 x291))
(assert (= 0 (x838 x306)))
(assert (= x810 (and (not x473) x666)))
(assert (x124 x1019))
(assert (x124 x157))
(assert (= (and (not x615) x16) x460))
(assert (x124 x910))
(assert (= 0 (x838 x257)))
(assert (= (x295 x707) 0))
(assert (x124 x602))
(assert (x124 x823))
(assert (x124 x545))
(assert (= x966 (and x907 (not x621))))
(assert (= (=> (and (= (< x784 x148) x1013) (or (and x1013 (= (x640 (+ x784 x318)) x522)) (not x1013))) x987) x799))
(assert (= x160 (=> (= (= x737 0) x660) (and (=> (and (not x660) (and (= (x236 x192) x888) (= (x640 (+ 32 x311)) x903) (= (> x888 0) x324) (= x217 (x640 (+ 3 x349))) (= x349 (x640 (+ x311 32))))) (and (=> (and x324 (and (= x933 (x236 x435)) (= x469 x435) (= x584 x217) (= x568 (< 32 x888)))) (and (=> (and (not x568) (= x830 32)) x964) (=> (and (and (= x668 (x836 x707)) (= (x640 (+ x217 32)) x533) (= x316 (> x888 64)) (= x707 (x640 (+ x469 32)))) x568) (and (=> (and (and (= x219 (x640 (+ 64 x469))) (= x405 (x640 (+ x217 64))) (= (< 96 x888) x290) (= x299 (x464 x219))) x316) (and (=> x290 x569) (=> (and (= x830 96) (not x290)) x964))) (=> (and (not x316) (= x830 64)) x964))))) (=> (and (= 0 x830) (not x324)) x964))) (=> x660 x466)))))
(assert (= x724 (and x346 (not x528))))
(assert (x124 x693))
(assert (x124 x425))
(assert (x124 x24))
(assert (x124 x901))
(assert (= x377 (or x777 x515 x42 x304 x77)))
(assert (x399 x151))
(assert (x124 x403))
(assert (x124 x31))
(assert (x124 x383))
(assert (x124 x584))
(assert (= x351 (and x4 x392)))
(assert (x124 x111))
(assert (= (and x628 x1044) x936))
(assert (= (x838 (+ (- x719 196) (x640 (+ 196 x976)))) 0))
(assert (x124 x812))
(assert (x124 x869))
(assert (= x68 (and (not x6) x250)))
(assert (x124 x182))
(assert (x124 x347))
(assert (x124 x891))
(assert (x124 x841))
(assert (= (x733 (- x996 x673)) 0))
(assert (= x965 (and x825 (not x135))))
(assert (= (x733 (- 192 x673)) 0))
(assert (x124 x165))
(assert (x399 x356))
(assert (x124 x749))
(assert (= (and x923 x143) x674))
(assert (x124 x102))
(assert (x399 x1020))
(assert (= x427 (and x1038 x835)))
(assert (= (and (not x1005) x314) x304))
(assert (= 0 (x838 (+ (- (+ x508 (- x1008 x469)) 196) (x640 (+ 196 x976))))))
(assert (= x7 (and x478 x227)))
(assert (x124 x573))
(assert (x124 x920))
(assert (x124 x608))
(assert (x124 x861))
(assert (x124 x1037))
(assert (= (and (not x871) x571) x128))
(assert (x124 x228))
(assert (= (or x74 x562) x498))
(assert (= (and (not x492) x332) x728))
(assert (= x2 (=> (and (= x931 (x640 (+ 96 x318))) (= x981 (not (< 128 x784))) (= (x527 x306) x774) (= (x640 (+ x271 96)) x306)) (and (=> (= x148 128) x799) x981))))
(assert (= x133 (=> (and (= x5 x631) (= x111 x166) (= (x196 x291) x591) (= x1017 (x783 (- x875 4))) (< x207 2220280665) (not (= 1245659826 x207)) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1017)) (< x1017 160)) (> x1017 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x870) (= x906 x875) (not (= x207 1262878978)) x952 (= x952 (= x634 (x865 164))) (not (< x875 4)) (not (= 1845979623 x207)) (< 0 x591) (= x353 54065695799311150304516525983669583430195215316752708547810291668471328538624) (>= x875 292) (not (= 1901074598 x207)) (= x493 x164) (not (> 1245659826 x207)) (not (= x207 1553423035)) (= (x783 (- x150 x976)) x906) (= x207 2005408114) (= x766 x27)) (and (=> (and (not x870) (= x481 (and (= true (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 195 x875)))) (and (=> (and (and (= (> x426 18446744073709551615) x412) (= x426 (x170 164))) x481) (and (=> x412 x466) (=> (and (and (= (x640 (+ 31 x545)) x955) (= (> 128 x192) x330) (= x192 (x640 (+ 128 x440))) (= (< 18446744073709551615 x192) x557) (= x350 (or x557 x330)) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x955) x440) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x434) x278) (= (x640 (+ x426 31)) x434) (= (x640 (+ x278 32)) x545) (= x492 (= (ite x350 1 0) 0))) (not x412)) (and (=> (and (and (= x934 (> x785 x875)) (= (x640 (+ 196 x426)) x785)) x492) (and (=> x934 x466) (=> (and (and (= x1010 (< 18446744073709551615 x111)) (= (x640 (+ x426 160)) x357)) (not x934)) (and (=> x1010 x466) (=> (and (not x1010) (and (= (x640 (+ x166 4)) x55) (= x1018 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x786) (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x875 x786)) (and (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x786)))) (= x786 (x640 (+ 31 x55))))) (and (=> (not x1018) x466) (=> (and (and (= (> x146 18446744073709551615) x949) (= (x640 (+ 32 x55)) x508) (= x146 (x170 x55))) x1018) (and (=> (and (and (= x872 (or x52 x120)) (= (= (ite x872 1 0) 0) x285) (= (> x608 18446744073709551615) x52) (= (> x192 x608) x120) (= (x640 (+ x556 x192)) x608) (= (x640 (+ x657 31)) x463) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1020) x396) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x463) x556) (= x657 (x640 (+ 32 x396))) (= x1020 (x640 (+ 31 x146)))) (not x949)) (and (=> (not x285) x466) (=> (and (and (= x366 (x640 (+ x146 x508))) (= (< x875 x366) x229) (= x469 (x640 (+ 32 x192)))) x285) (and (=> (and (and (= x131 (x640 (+ x469 x146))) (= (> x164 18446744073709551615) x149)) (not x229)) (and (=> (and (not x149) (and (= (x640 (+ x493 4)) x868) (= x677 (x640 (+ x868 31))) (= (or (and (= (<= x677 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x677 x875)) (and (> x677 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x768))) (and (=> (and (and (= (< 18446744073709551615 x86) x678) (= (x170 x868) x86)) x768) (and (=> x678 x466) (=> (and (not x678) (and (= x282 (x640 (+ x1004 x488))) (= x882 (< x875 x282)) (= (mod (* 32 x86) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x488) (= x1004 (x640 (+ 32 x868))))) (and (=> x882 x466) (=> (and (not x882) (= (> x631 18446744073709551615) x384)) (and (=> x384 x466) (=> (and (and (= (x640 (+ x28 31)) x223) (= (x640 (+ 4 x5)) x28) (= x687 (or (and (< x223 x875) (= (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x223))) (and (<= x875 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x223 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (not x384)) (and (=> (not x687) x466) (=> (and x687 (and (= x130 (> x765 18446744073709551615)) (= x765 (x170 x28)))) (and (=> (and (not x130) (and (= x755 (mod (* 32 x765) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x4 (> x701 x875)) (= x941 (x640 (+ 32 x28))) (= (x640 (+ x755 x941)) x701))) (and (=> (and (not x4) (and (<= x409 255) (< x409 256) (= (= 0 x409) x433) (<= 0 x409))) (and (=> (and x433 (and (<= x748 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x748) (= x227 (< 0 x748)))) (and (=> (and x227 (and (= (= 0 x748) x162) (<= 0 x748) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x748))) (and (=> (not x162) x466) (=> (and x162 (and (= (x103 1461501637330902918203684832716283019655932542975 x841) x924) (>= 1461501637330902918203684832716283019655932542975 x108) (not (< x714 2220280665)) (= 2376452955 x714) (= (x196 x291) x59) (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 x632) (not (= 2249206060 x714)) (not (= 2220280665 x714)) (= x6 (= x924 x841)) (not (= x714 2329570063)) (not (< x383 4)) (> x59 0) (> 1461501637330902918203684832716283019655932542976 x108) (= x770 x383) (= 4 x770) (< x714 3084411429) (>= x108 0) (= x284 (x640 (+ 32 x608))) (= (x338 x608) x841) (= 4 x383))) (and (=> (and x6 (and (= x762 0) (= x819 (x103 1461501637330902918203684832716283019655932542975 x841)) (= (x461 x819) x730) (= x644 (and (< (+ x762 x730) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x675 0))) (= x675 (x461 x291)))) (and (=> (and (and (or (not x431) (and (and (= x501 (x82 x819)) x975 (= (x82 x291) x389) x856 (= x975 (= (x156 x819) x501)) (= (>= (x156 x291) x389) x856) (> 4294967296 x280)) x431)) (and (= x890 x78) (= x618 (x461 x291)) (= x890 (x489 x819)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x762 x890)) (= (> x10 0) x431) (= x618 x625))) x644) x745) (=> (and (and (= 0 x456) (= 0 x910)) (not x644)) x1011))) (=> (not x6) x466))))) (=> (and (= x608 x311) (not x227)) x180))) (=> (not x433) x466))) (=> x4 x466))) (=> x130 x466))))))))))) (=> (not x768) x466))) (=> x149 x466))) (=> x229 x466))))) (=> x949 x466))))))))) (=> (not x492) x466))))) (=> (not x481) x466))) (=> x870 x466)))))
(assert (x124 x548))
(assert (= 0 (x733 (- x219 x673))))
(assert (x124 x822))
(assert (x124 x679))
(assert (= x958 (and x971 x173)))
(assert (x124 x363))
(assert (= (and x943 (not x949)) x18))
(assert (= x820 (=> (and (or (and x139 (and (> 4294967296 x939) (= 1 x188))) (and (not x139) (= x152 x188))) (and (= x139 (< 0 x152)) (= x942 (x640 (+ x13 x834))) (= (x640 (+ 31 x624)) x356) (<= x321 1461501637330902918203684832716283019655932542975) (= (x686 x834) x321) (not (or (> x624 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x624)) (> 32 x624)))) (not (= 0 x159)) (= x13 (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x356)))) x974)))
(assert (= (=> (and (= x802 (x640 (+ 32 x186))) (= x929 (x640 (+ x217 x888))) (= (x783 (- x75 32)) x205) (= 96 x814) (= (> x932 0) x135) (= (x640 (+ 96 x929)) x186) (= (x558 128) x932) (= (x783 (- x929 x311)) x75)) (and (=> (and (and (= x802 x262) (= x476 (x424 160)) (= (< 32 x932) x839)) x135) (and (=> (and (not x839) (= x468 32)) x267) (=> (and x839 (and (= (x247 192) x801) (= x577 (> x932 64)) (= (x640 (+ x802 32)) x926))) (and (=> (and (not x577) (= 64 x468)) x267) (=> (and x577 (and (= (x640 (+ x802 64)) x336) (= (< 96 x932) x41) (= x385 (x554 224)))) (and (=> x41 x53) (=> (and (= 96 x468) (not x41)) x267))))))) (=> (and (not x135) (= 0 x468)) x267))) x695))
(assert (= 0 (x838 256)))
(assert (x399 x99))
(assert (x124 x67))
(assert (= x712 (and x7 (not x162))))
(assert (= (and x81 x678) x520))
(assert (= x776 (and (not x450) x80)))
(assert (x124 x426))
(assert (x124 x646))
(assert (x124 x34))
(assert (x124 x189))
(assert (x124 x725))
(assert (= (and (not x72) x982) x428))
(assert (= x731 (and x698 x880)))
(assert (x124 x138))
(assert (x124 x1015))
(assert (x124 x205))
(assert (= (x838 (+ (x640 (+ 196 x976)) (- (+ 196 (- x707 160)) 196))) 0))
(assert (= x37 (and (not x258) x898)))
(assert (x124 x896))
(assert (x124 x282))
(assert (x124 x700))
(assert (x124 x310))
(assert (= (and x621 x907) x376))
(assert (x399 x222))
(assert (x124 x669))
(assert (x124 x508))
(assert (x124 x389))
(assert (= x908 (=> (and (not (< 18446744073709551615 x57)) (or (and (<= x743 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x211)) (and (> x743 x211) (= (<= x211 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x743)))) (= (x783 (- x945 31)) x743) (= x211 (x806 x772)) (= (x640 (+ x57 31)) x1009) (= (x640 (+ x34 x57)) x797) (= (not (< 1 x231)) x1024) (= x117 x711) (= x266 (x640 (+ x486 32))) (not (or (and (< x616 x266) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x616) (<= x266 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x616) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x266)))) (= x616 (x783 (- x511 x57))) (= x57 (x806 x486)) (= (x640 (+ x34 x831)) x596) (= (x640 (+ x211 x772)) x486) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1009) x831) (= x945 (x783 (- x511 x772))) (= (x640 (+ 32 x1016)) x34)) (and x1024 (=> (= x596 x150) x133)))))
(assert (x124 x519))
(assert (= (=> (and (= x815 (= 0 x456)) (or (and (= x861 x284) x815) (and (not x815) (and (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x363) x683) (= x673 (x640 (+ x284 32))) (= x811 x861) (= x363 (x640 (+ x456 63))) (= x811 (x640 (+ x284 x683))))))) x51) x1011))
(assert (= x902 (or x583 x540)))
(assert (x124 x961))
(assert (= (and x41 x706) x718))
(assert (= (and x577 x337) x706))
(assert (= (and x129 (not x837)) x826))
(assert (x124 x619))
(assert (x124 x607))
(assert (= (or x119 x20) x566))
(assert (= x272 (and x740 x815)))
(assert (x124 x857))
(assert (x124 x867))
(assert (= (and x264 x215) x115))
(assert (x124 x784))
(assert (x124 x587))
(assert (x124 x877))
(assert (x124 x300))
(assert (x418 x1043))
(assert (x124 x201))
(assert (x399 x1043))
(assert (x124 x188))
(assert (x124 x487))
(assert (x124 x239))
(assert (x124 x637))
(assert (= x979 (and x76 x480)))
(assert (x124 x738))
(assert (x124 x1004))
(assert (= x74 (and (not x340) x442)))
(assert (x124 x940))
(assert (= 0 (x733 (- x980 x673))))
(assert (= x332 (and x582 (not x412))))
(assert (x124 x212))
(assert (= (or x438 x658) x835))
(assert (= (=> (and (= x137 (x103 1461501637330902918203684832716283019655932542975 x519)) (= x985 (= x22 0)) (= x22 (x196 x137))) (and (=> x985 x466) (=> (and (and (or (and (and (> 4294967296 x73) x279 (= (x692 x137) x938) x484 (= (= (x536 x137) x938) x484) (= (x692 x291) x194) (= x279 (<= x194 (x536 x291)))) x778) (not x778)) (= (> x993 0) x778)) (not x985)) x849))) x523))
(assert (= x220 (and x384 x342)))
(assert (= x665 (and x460 x734)))
(assert (x124 x649))
(assert (x124 x850))
(assert (= x764 (and x780 x443)))
(assert (= x283 (and x264 (not x215))))
(assert (= (x838 (+ 96 (x640 (+ 196 x976)))) 0))
(assert (x124 x477))
(assert (x124 x500))
(assert (x124 x1051))
(assert (= (or x237 x147) x997))
(assert (= x69 (and x232 (not x687))))
(assert (= x680 (and x923 (not x143))))
(assert (= x365 (and x960 x660)))
(assert (x124 x617))
(assert (x124 x204))
(assert (x418 x276))
(assert (x124 x941))
(assert (x124 x193))
(assert (= 0 (x733 (- x922 x673))))
(assert (= (x733 (- 128 x673)) 0))
(assert (x124 x570))
(assert (x124 x435))
(assert (x124 x231))
(assert (x399 x519))
(assert (x124 x222))
(assert (x124 x774))
(assert (= (=> (and (= (x640 (+ 96 x802)) x500) (= x167 (x333 256)) (= (not (> x932 128)) x203)) (and (=> (= 128 x468) x267) x203)) x53))
(assert (= (x838 (+ (- (+ x508 (- x829 x469)) 196) (x640 (+ 196 x976)))) 0))
(assert (= (and x991 (not x946)) x168))
(assert (= 0 (x733 (- 224 x673))))
(assert (x124 x770))
(assert (x124 x169))
(assert (= (and x398 (not x603)) x935))
(assert (= 0 (x733 (- 160 x673))))
(assert (= x543 (and (not x1014) x691)))
(assert (= 0 (x733 (- x1008 x673))))
(assert (x124 x591))
(assert (= (x295 192) 0))
(assert (x124 x177))
(assert (x124 x704))
(assert (x124 x624))
(assert (x124 x766))
(assert (x124 x1017))
(assert (= x825 (or x218 x428)))
(assert (x124 x55))
(assert (= x444 (and (not x453) x427)))
(assert (x124 x914))
(assert (x124 x785))
(assert (x124 x385))
(assert (x418 x127))
(assert (x418 x298))
(assert (x124 x1007))
(assert (= (and x130 x199) x26))
(assert (x124 x813))
(assert (= x81 (and x768 x967)))
(assert (x124 x312))
(assert (x124 x714))
(assert (x124 x834))
(assert (x124 x551))
(assert (x124 x298))
(assert (x124 x423))
(assert (x418 x363))
(assert (x124 x96))
(assert (x124 x114))
(assert (= x853 (and x810 x401)))
(assert (x124 x410))
(assert (x124 x73))
(assert (x124 x57))
(assert (x124 x928))
(assert (= x1045 (=> (and (= (x640 (+ x848 x648)) x619) (= x157 (x640 (+ 32 x228))) (= x784 (x588 x1032)) (= x318 (x640 (+ 32 x619))) (= x450 (> x784 0)) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x292) x648) (= x292 (x640 (+ x634 31))) (= (x783 (- x619 x228)) x111)) (and (=> (and x450 (and (= (> x784 32) x684) (= x271 x491) (= x318 x652) (= (x225 x491) x381))) (and (=> (and x684 (and (= (x1027 x257) x812) (= x76 (> x784 64)) (= (x640 (+ 32 x318)) x842) (= (x640 (+ 32 x271)) x257))) (and (=> (and (not x76) (= x148 64)) x799) (=> (and x76 (and (= (x640 (+ x318 64)) x185) (= x847 (x327 x962)) (= x415 (> x784 96)) (= (x640 (+ x271 64)) x962))) (and (=> x415 x2) (=> (and (not x415) (= x148 96)) x799))))) (=> (and (not x684) (= 32 x148)) x799))) (=> (and (= x148 0) (not x450)) x799)))))
(assert (x124 x321))
(assert (= x513 (or x863 x800)))
(assert (x124 x93))
(assert (x124 x753))
(assert (= 0 (x838 (+ (x640 (+ x976 196)) (- x94 196)))))
(assert (x124 x278))
(assert (= (or x796 x709) x992))
(assert (x399 x276))
(assert (= x66 (and x251 x690)))
(assert (= x475 (or x29 x19 x776 x121 x490)))
(assert (= (=> (and (= x698 (= 0 x737)) (or x698 (not x698))) x160) x230))
(assert (= (and x398 x603) x893))
(assert (= x863 (and x243 (not x978))))
(assert (= 0 (x838 (+ (- (+ (- 160 x469) x508) 196) (x640 (+ 196 x976))))))
(assert (= (and (not x123) x936) x42))
(assert (x124 x1029))
(assert (x124 x903))
(assert (= (x838 192) 0))
(assert (x124 x131))
(assert (x124 x501))
(assert (= x1001 (or x674 x534)))
(assert (= x864 (and x956 x997)))
(assert (x124 x811))
(assert (= (x838 160) 0))
(assert (= x529 (and (not x227) x478)))
(assert (x407 x1055))
(assert (= (and x767 (not x739)) x703))
(assert (x124 x223))
(assert (= (and x779 x763) x437))
(assert (= x402 (and (not x779) x763)))
(assert (= x991 (and x902 x1030)))
(assert (x124 x929))
(assert (x124 x635))
(assert (x124 x430))
(assert (x124 x277))
(assert (= 0 (x295 x829)))
(assert (x124 x476))
(assert (= (and (not x1038) x835) x358))
(assert (x124 x707))
(assert (x124 x656))
(assert (= (and x979 x415) x121))
(assert (x124 x845))
(assert (x124 x938))
(assert (x124 x786))
(assert (= (and x1025 x377) x438))
(assert (x124 x782))
(assert (= x899 (or x681 x529)))
(assert (= x953 (and (not x290) x531)))
(assert (= (and x1013 x475) x540))
(assert (x124 x409))
(assert (x124 x983))
(assert (= (and x442 x340) x562))
(assert (= (or x244 x447) x364))
(assert (x124 x208))
(assert (x124 x535))
(assert (x124 x366))
(assert (x124 x503))
(assert (x124 x533))
(assert (= x599 (and (not x756) x553)))
(assert (x124 x211))
(assert (= (or x39 x234 x37 x168 x703) x243))
(assert (x124 x413))
(assert (= x105 (=> (and (= (x640 (+ x102 x711)) x1016) (= x693 (x640 (+ x590 32))) (= x711 (mod (* x231 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x102 (x640 (+ x425 32))) (= (> x231 0) x978) (= x631 (x783 (- x425 x228)))) (and (=> (and (not x978) (= x1016 x150)) x133) (=> x978 x908)))))
(assert (x124 x46))
(assert (= (x838 (+ 64 (x640 (+ x976 196)))) 0))
(assert (x124 x634))
(assert (x418 x242))
(assert (= (x838 (+ (- (+ 196 (- x922 160)) 196) (x640 (+ x976 196)))) 0))
(assert (= x740 (or x1035 x736 x958)))
(assert (x124 x791))
(assert (x124 x661))
(assert (x124 x561))
(assert (x124 x457))
(assert (x124 x86))
(assert (= x1059 (and x450 x80)))
(assert (x124 x242))
(assert (x124 x288))
(assert (x124 x371))
(assert (= x101 (=> (= (not (< 1 x86)) x297) (and x297 x523))))
(assert (x124 x662))
(assert (x124 x468))
(assert (= x571 (or x864 (and x997 (not x956)))))
(assert (x124 x597))
(assert (= (and (not x682) x968) x534))
(assert (x124 x556))
(assert (= (=> (and (<= x551 1461501637330902918203684832716283019655932542975) (= (not (> x851 4)) x1056) (= x551 (x806 x454)) (= (x640 (+ x570 32)) x679)) (and x1056 (=> (= x425 x679) x105))) x45))
(assert (x124 x315))
(assert (x124 x17))
(assert (x124 x976))
(assert (x399 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x124 x38))
(assert (x124 x702))
(assert (x124 x559))
(assert (x124 x61))
(assert (= (and (not x1010) x470) x334))
(assert (x124 x730))
(assert (= (=> (and (= x956 (= x808 0)) (or (not x956) x956)) x670) x947))
(assert (x124 x868))
(assert (x124 x306))
(assert (x124 x54))
(assert (x124 x996))
(assert (x124 x471))
(assert (x124 x1041))
(assert (x124 x518))
(assert (x124 x112))
(assert (x124 x1055))
(assert (x124 x737))
(assert (x124 x110))
(assert (x124 x191))
(assert (x124 x472))
(assert (= x601 (and (not x316) x341)))
(assert (x124 x275))
(assert (= x918 (and x794 x593)))
(assert (x124 x483))
(assert (and (>= (x998 x291 x116) 10000) (>= 340282366920938463463374607431768211455 (x998 x291 x116))))
(assert (x124 x335))
(assert (x124 x456))
(assert (= (=> (and (<= 0 x900) (>= 1461501637330902918203684832716283019655932542975 x605) (<= x1037 1461501637330902918203684832716283019655932542975) (>= x122 0) (<= x114 1461501637330902918203684832716283019655932542975) (> x291 0) (>= 1461501637330902918203684832716283019655932542975 x300) (= false x911) (<= x165 79228162514264337593543950335) (< 0 x722) (<= 0 x669) (<= x198 1461501637330902918203684832716283019655932542975) (<= x669 1461501637330902918203684832716283019655932542975) (= x539 (> x15 x1012)) (>= x46 0) (<= 0 x315) (<= x315 255) (<= 0 x592) (>= 1461501637330902918203684832716283019655932542975 x1041) (= x859 false) (= true x60) (>= x114 0) (>= x108 0) (<= 0 x647) (<= 0 x605) (<= 0 x462) (>= 1461501637330902918203684832716283019655932542975 x108) (<= 0 x204) (= x178 x914) (= x873 1262878978) x594 (<= x204 255) (<= 0 x697) (>= x178 0) (>= x883 0) (>= 1461501637330902918203684832716283019655932542975 x972) (= x594 (< 0 (x196 x722))) (<= 0 x446) (>= x198 0) (>= x972 0) (= x600 (= x1055 0)) (= x269 (< 0 (x196 x291))) (<= x592 1461501637330902918203684832716283019655932542975) (= x1055 x605) (or x600 x775) (= 5 x136) (<= x715 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x291) (= false x302) (>= 1461501637330902918203684832716283019655932542975 x390) (>= 1461501637330902918203684832716283019655932542975 x46) (>= x715 0) (<= x268 255) (= (x375 x1055) x1012) (<= x900 255) (>= x165 0) (= x775 (< 0 x1055)) (>= 1461501637330902918203684832716283019655932542975 x178) (>= x846 0) (>= x362 0) (>= 1461501637330902918203684832716283019655932542975 x722) (<= x409 255) (not (= x722 x291)) (= x850 (x375 x722)) (= x697 (x375 x291)) (<= x446 1461501637330902918203684832716283019655932542975) (>= x390 0) (<= 0 x268) (<= 0 x409) (<= x70 255) (>= 1461501637330902918203684832716283019655932542975 x883) (>= x1041 0) (<= 0 x850) (<= x362 255) (<= 0 x1037) (<= x462 1461501637330902918203684832716283019655932542975) (<= x647 1461501637330902918203684832716283019655932542975) x269 (<= x122 1461501637330902918203684832716283019655932542975) (<= x846 255) (<= 0 x300) (< x1055 1461501637330902918203684832716283019655932542976) (<= 0 x637) (>= x70 0) (<= x637 1461501637330902918203684832716283019655932542975)) (and (=> (and x539 (and (= false x988) (= x46 x792) (= x833 x647) (= x891 x637) (= x705 true) (= x54 x1041) (= x182 x462))) x367) (=> (and (and (not (< x511 x655)) (= (or x497 x564) x107) (<= 0 x773) (= (x640 (+ x886 x15)) x869) (<= 0 x93) (<= x773 1461501637330902918203684832716283019655932542975) (= x436 (x640 (+ x271 x288))) (= (> x634 0) x1014) (= (mod (* 32 x851) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x805) (not (< 18446744073709551615 x231)) (not (< 18446744073709551615 x857)) (or (and (= (<= x511 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x496 x511)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496) (<= x511 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x511 163) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x511) true)) (= x181 (> x1032 18446744073709551615)) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x413) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x511)) (and (> x511 x413) (= (<= x511 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x413 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x15 x241) (= x400 x125) (= x959 (x375 x1055)) (= x634 (x289 128)) (<= 0 x646) (= x655 (x640 (+ x472 x805))) (not (> x851 18446744073709551615)) (= x497 (< x976 x1032)) (= x851 (x806 x239)) (>= 1461501637330902918203684832716283019655932542975 x646) (< x552 2220280665) (= (x640 (+ x961 128)) x1032) (= x308 (< x1032 128)) (= (x640 (+ 31 x224)) x127) (= x378 (mod (* 32 x231) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x640 (+ 4 x1034)) x126) (= x1007 x421) (not (< x511 x559)) (not (> x535 x511)) (<= x93 1461501637330902918203684832716283019655932542975) (= x260 (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x127)) (= x976 (x640 (+ x1032 x88))) (= x521 (or x308 x181)) (= x445 x287) (= x766 x1007) (= (x806 x126) x224) (< (+ x241 x886) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (> 1245659826 x552)) (= x857 x410) (= x93 x400) (= x329 (x640 (+ x1019 32))) (= x791 (x640 (+ 160 x228))) (= (ite x107 1 0) x565) (not (= x552 1245659826)) (= x848 (x640 (+ x791 32))) (= (x640 (+ x495 4)) x239) (= x151 (x640 (+ x274 31))) (= (- x959 x15) x885) (> x240 0) (= x1055 x646) (= x184 (x783 (- x511 4))) (= (x640 (+ 31 x459)) x496) (= 1262878978 x552) (not (< 18446744073709551615 x224)) (= (x806 x1019) x288) (= x654 x1055) (= (x640 (+ x772 x378)) x708) (not (< 18446744073709551615 x738)) (= x24 0) (not (> x288 18446744073709551615)) (= (x640 (+ x1032 32)) x271) (or (and (<= x511 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x611 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x611 x511) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x611) (<= x511 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x228 (x640 (+ 4 x976))) (not (> x287 18446744073709551615)) (= x1042 (x640 (+ 31 x239))) (not (> 4 x511)) (= x738 x1034) (= (x640 (+ 31 x944)) x912) (= x88 (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x912)) (= (x640 (+ x459 32)) x772) (= x611 (x640 (+ 31 x1019))) (= x24 (ite x521 1 0)) (= (x640 (+ x126 31)) x413) (= x472 (x640 (+ x239 32))) (= (x259 x291) x886) (= x944 (x640 (+ 32 x532))) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1042) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x511)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1042) (<= x511 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x511 x1042))) (not (< 18446744073709551615 x747)) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x151) x961) (= 0 x565) (not (or (and (= true (<= x184 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 160 x184)) (> x184 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x640 (+ 31 x288)) x99) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x99) x532) (= (x806 x459) x231) (= x274 (x640 (+ x260 32))) (= (x640 (+ x410 4)) x459) (= x495 x747) (= x1019 (x640 (+ x445 4))) (not (< x511 x708)) (= x559 (x640 (+ x288 x329))) (= (x640 (+ x479 x224)) x535) (= (< 18446744073709551615 x976) x564) (= x296 (x640 (+ x224 160))) (= (x640 (+ 32 x126)) x479) (= (x196 x291) x240)) (not x539)) (and (=> (and (not x1014) (= x782 0)) x860) (=> (and x1014 (and (= x621 (> x634 32)) (= x854 (x40 160)) (= x848 x420))) (and (=> (and x621 (and (= (< 64 x634) x325) (= x355 (x640 (+ x848 32))) (= x928 (x176 192)))) (and (=> (and (not x325) (= x782 64)) x860) (=> (and x325 (and (= x930 (< 96 x634)) (= (x221 224) x587) (= (x640 (+ 64 x848)) x732))) (and (=> (and (not x930) (= 96 x782)) x860) (=> x930 x386))))) (=> (and (= x782 32) (not x621)) x860))))))) x368))
(assert (x124 x313))
(assert (x124 x148))
(assert (= 0 (x838 (+ (- (+ (- x922 x469) x508) 196) (x640 (+ x976 196))))))
(assert (= x48 (and x473 x666)))
(assert (x124 x771))
(assert (x124 x163))
(assert (not x368))
(assert (= (=> (and (or x603 (not x603)) (= x603 (= 0 x916))) x609) x482))
(assert (= x314 (and (not x155) x623)))
(assert (x124 x955))
(assert (= x1035 (and (not x644) x328)))
(assert (x124 x708))
(assert (x124 x819))
(assert (= (x295 x922) 0))
(assert (x124 x22))
(assert (x124 x913))
(assert (x407 x519))
(assert (= x466 (=> (and (= x46 x406) (= x647 x347) (= x307 x1041) (= x67 x704) (= 0 x808) (= x313 x637) (= x112 x462)) x947)))
(assert (x124 x186))
(assert (x124 x152))
(assert (x124 x851))
(assert (x124 x166))
(assert (x124 x673))
(assert (x124 x260))
(assert (= (x733 (- x829 x673)) 0))
(assert (x124 x47))
(assert (= (or x989 x252 x210 x543 x966) x763))
(assert (= x750 (and x81 (not x678))))
(assert (= (x838 (+ (x640 (+ x976 196)) (- (+ x508 (- x435 x469)) 196))) 0))
(assert (x124 x677))
(assert (= 0 (x838 (+ (x640 (+ 196 x976)) (- (+ x508 (- 192 x469)) 196)))))
(assert (x124 x307))
(assert (= 0 (x733 (- x192 x673))))
(assert (x124 x274))
(assert (= (x838 (+ (- (+ x508 (- 256 x469)) 196) (x640 (+ x976 196)))) 0))
(assert (= 0 (x838 (+ (- (+ x508 (- x707 x469)) 196) (x640 (+ 196 x976))))))
(assert (= x232 (and (not x384) x342)))
(assert (x124 x900))
(assert (= x179 (and x644 x328)))
(assert (= (and x756 x553) x653))
(assert (= (and x780 (not x443)) x261))
(assert (x124 x522))
(assert (= (and x979 (not x415)) x19))
(assert (x124 x699))
(assert (x124 x787))
(assert (x124 x104))
(assert (= x1006 (=> (and (= (< x845 x158) x756) (or (and (= (x640 (+ x193 x845)) x635) x756) (not x756))) x404)))
(assert (x399 x463))
(assert (x124 x1020))
(assert (x124 x612))
(assert (= x879 (and x332 x492)))
(assert (x124 x303))
(assert (= x754 (and x795 x824)))
(assert (x124 x195))
(assert (x124 x842))
(assert (x124 x765))
(assert (= (=> (and (= x980 (x640 (+ 96 x469))) (= x281 (not (< 128 x845))) (= x201 (x144 x980)) (= (x640 (+ x193 96)) x855)) (and x281 (=> (= x158 128) x1006))) x354))
(assert (= (and (not x76) x480) x29))
(assert (= x3 (or x575 (and (not x113) x364))))
(assert (x124 x713))
(assert (x124 x158))
(assert (x124 x493))
(assert (= 0 (x838 (+ (x640 (+ 196 x976)) (- (+ 196 (- x996 160)) 196)))))
(assert (x124 x921))
(assert (x124 x717))
(assert (= x547 (and x825 x135)))
(assert (x124 x683))
(assert (x124 x790))
(assert (x124 x505))
(assert (x124 x808))
(assert (x124 x1016))
(assert (x124 x732))
(assert (x124 x99))
(assert (x124 x167))
(assert (x124 x224))
(assert (x124 x75))
(assert (x124 x459))
(assert (= (and x72 x982) x218))
(assert (x124 x652))
(assert (= x788 (and x290 x531)))
(assert (x124 x1032))
(assert (x399 1461501637330902918203684832716283019655932542975))
(assert (x124 x299))
(assert (x124 x524))
(assert (x124 x357))
(assert (x124 x448))
(assert (x418 x356))
(assert (x124 x440))
(assert (x124 x311))
(assert (x124 x932))
(assert (= x202 (and (not x870) x513)))
(assert (x124 x122))
(assert (= (and x930 x467) x210))
(assert (x124 x49))
(assert (x124 x939))
(assert (= (and (not x606) x66) x1047))
(assert (x124 x486))
(assert (x124 x94))
(assert (= (and x6 x250) x328))
(assert (x124 x266))
(assert (= x342 (and (not x882) x750)))
(assert (= x129 (or x718 x965 x816 x309 x35)))
(assert (x124 x631))
(assert (x124 x814))
(assert (x124 x184))
(assert (x124 x827))
(assert (x124 x632))
(assert (x124 x912))
(assert (= x35 (and (not x577) x337)))
(assert (= x414 (=> (and (= (not (> x12 128)) x1052) (= (x640 (+ x729 96)) x423) (= (x79 256) x530)) (and x1052 (=> (= x208 128) x322)))))
(assert (x124 x986))
(assert (x124 x276))
(assert (= x39 (and x898 x258)))
(assert (= x582 (and x202 x481)))
(assert (x124 x479))
(assert (= x1040 (and x623 x155)))
(assert (x124 x214))
(assert (x124 x356))
(assert (x124 x647))
(assert (x124 x451))
(assert (= (and x606 x66) x346))
(assert (x598 x1000))
(assert (= (and (not x589) x904) x132))
(assert (= (and x589 x904) x666))
(assert (= (and x1059 (not x684)) x490))
(assert (= x727 (or x8 x566)))
(assert (= (and x348 x899) x623))
(assert (x124 x396))
(assert (x124 x916))
(assert (= (or x754 x937) x968))
(assert (x124 x831))
(assert (x124 x100))
(assert (x124 x1058))
(assert (= 0 (x838 (+ (x640 (+ 196 x976)) (- (+ x508 (- x980 x469)) 196)))))
(assert (x124 x618))
(assert (= (and x970 x393) x119))
(assert (= (and x936 x123) x77))
(assert (x124 x944))
(assert (= (and x547 (not x839)) x309))
(assert (= x322 (=> (and (= x1025 (> x208 x12)) (or (not x1025) (and (= x895 (x640 (+ x729 x12))) x1025))) x23)))
(assert (x124 x469))
(assert (= (or x402 x437) x80))
(assert (x124 x495))
(assert (= (and x739 x767) x898))
(assert (x124 x187))
(assert (= x622 (and x422 x764)))
(assert (x124 x56))
(assert (x124 x895))
(assert (= x593 (and x427 x453)))
(assert (x124 x792))
(assert (= x507 true))
(assert (= (and x567 x433) x478))
(assert (x124 x1057))
(assert (x124 x552))
(assert (= (and x568 x509) x341))
(assert (x124 x1042))
(assert (x124 x931))
(assert (x124 x876))
(assert (= 0 (x838 (+ (x640 (+ 196 x976)) (- (+ (- x1008 160) 196) 196)))))
(assert (x598 x841))
(assert (x124 x194))
(assert (x399 x363))
(assert (= (and (not x348) x899) x248))
(assert (x124 x993))
(assert (x124 x446))
(assert (= (and (not x539) x507) x691))
(assert (x418 x955))
(assert (= (and x199 (not x130)) x392))
(assert (x399 x1000))
(assert (x124 x463))
(assert (= x1044 (and x537 x925)))
(assert (x124 x192))
(assert (= x969 (and (not x985) x1001)))
(assert (= x253 (=> (and (or x452 (not x452)) (= (= x518 0) x452)) x482)))
(assert (= (and x871 x571) x294))
(assert (x124 x496))
(assert (x124 x847))
(assert (= x97 (and x967 (not x768))))
(assert (x124 x648))
(assert (= 0 (x838 (+ (- (+ (- 128 x469) x508) 196) (x640 (+ x976 196))))))
(assert (x399 x841))
(assert (x124 x319))
(assert (x124 x801))
(assert (x124 x284))
(assert (x124 x153))
(assert (x418 x1020))
(assert (= (and x882 x750) x746))
(assert (x124 x209))
(assert (x124 x59))
(assert (x124 x88))
(assert (x124 x419))
(assert (x407 x722))
(assert (x124 x151))
(assert (x124 x830))
(assert (x124 x973))
(assert (x124 x28))
(assert (= x87 (and x149 x142)))
(assert (x124 x1031))
(assert (x124 x268))
(assert (x598 x519))
(assert (x124 x416))
(assert (= (and x376 x325) x467))
(assert (x124 x926))
(assert (x124 x421))
(assert (x124 x511))
(assert (= (or x893 x935) x923))
(assert (x124 x729))
(assert (= 0 (x733 (- x435 x673))))
(assert (= 0 (x838 (+ (- (+ x508 (- x219 x469)) 196) (x640 (+ 196 x976))))))
(assert (x124 x613))
(assert (x124 x697))
(assert (x124 x962))
(assert (= (and x622 (not x397)) x506))
(assert (x124 x5))
(assert (x124 x924))
(assert (= (x838 (+ (x640 (+ 196 x976)) (- (+ x508 (- x192 x469)) 196))) 0))
(assert (x124 x751))
(assert (x124 x906))
(assert (x124 x769))
(assert (x124 x888))
(assert (x124 x715))
(assert (= 0 (x295 x1008)))
(assert (= 0 (x838 (+ (x640 (+ 196 x976)) (- (+ (- 224 x469) x508) 196)))))
(assert (x124 x758))
(assert (x124 x873))
(assert (= x305 (and x1010 x470)))
(assert (x124 x855))
(assert (x124 x329))
(assert (x124 x381))
(assert (= (or x599 x653) x16))
(assert (x124 x318))
(assert (x399 x1009))
(assert (x124 x655))
(assert (x407 x137))
(assert (x418 x465))
(assert (x124 x462))
(assert (x124 x592))
(assert (= x586 (and x992 (not x63))))
(assert (x124 x1039))
(assert (x124 x772))
(assert (= (=> (and (= (x640 (+ x929 32)) x416) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x222) x1) (= x222 (x640 (+ 31 x932))) (= x317 (> x49 0)) (= x549 (x783 (- x335 x929))) (= x49 (x651 x311)) (= (x640 (+ x802 x1)) x335)) (and (=> (and (= (< 32 x49) x443) x317) (and (=> (and (= x422 (< 64 x49)) x443) (and (=> (and (= 64 x503) (not x422)) x455) (=> (and x422 (= x397 (> x49 96))) (and (=> x397 x614) (=> (and (not x397) (= x503 96)) x455))))) (=> (and (not x443) (= x503 32)) x455))) (=> (and (not x317) (= x503 0)) x455))) x90))
(assert (x124 x596))
(assert (x124 x1028))
(assert (= x575 (and x364 x113)))
(assert (x124 x175))
(assert (x418 x877))
(assert (= x987 (=> (and (= (x640 (+ 32 x790)) x590) (= (x640 (+ x157 32)) x790) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x242) x876) (= x242 (x640 (+ x784 31))) (= x164 (x783 (- x163 x228))) (= (x640 (+ x318 x876)) x163) (= (< 0 x851) x1030) (= x483 (x640 (+ x163 32)))) (and (=> (and (and (= x169 (x640 (+ x472 32))) (= (x806 x472) x927) (>= 1461501637330902918203684832716283019655932542975 x927) (= x946 (< 1 x851)) (= x694 (x640 (+ x483 32)))) x1030) (and (=> (and (= x694 x425) (not x946)) x105) (=> (and x946 (and (<= x91 1461501637330902918203684832716283019655932542975) (= (x640 (+ x169 32)) x138) (= (x640 (+ 32 x694)) x620) (= x91 (x806 x169)) (= x739 (< 2 x851)))) (and (=> (and (= x425 x620) (not x739)) x105) (=> (and x739 (and (= (x806 x138) x96) (= x570 (x640 (+ x620 32))) (= (> x851 3) x258) (<= x96 1461501637330902918203684832716283019655932542975) (= x454 (x640 (+ 32 x138))))) (and (=> (and (not x258) (= x570 x425)) x105) (=> x258 x45))))))) (=> (and (= x425 x483) (not x1030)) x105)))))
(assert (= x23 (=> (and (= (x915 x192) x845) (= x193 (x640 (+ x419 32))) (= x1043 (x640 (+ x12 31))) (= x419 (x640 (+ x92 x729))) (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1043) x92) (= (x783 (- x419 x973)) x700) (= x1029 (x640 (+ x973 32))) (= (< 0 x845) x1038)) (and (=> (and x1038 (and (= x453 (< 32 x845)) (= x104 x193) (= x829 x469) (= (x576 x829) x597))) (and (=> (and (and (= x1008 (x640 (+ x469 32))) (= x794 (< 64 x845)) (= (x387 x1008) x100) (= (x640 (+ x193 32)) x110)) x453) (and (=> (and x794 (and (= (< 96 x845) x197) (= (x58 x996) x1057) (= x254 (x640 (+ x193 64))) (= x996 (x640 (+ x469 64))))) (and (=> x197 x354) (=> (and (= 96 x158) (not x197)) x1006))) (=> (and (not x794) (= x158 64)) x1006))) (=> (and (not x453) (= x158 32)) x1006))) (=> (and (not x1038) (= x158 0)) x1006)))))
(assert (= x688 (and x593 (not x794))))
(assert (x418 x463))
(assert (x399 x912))
(assert (= x709 (and x550 x139)))
(assert (= (and x376 (not x325)) x252))
(assert (x124 x1043))
(assert (x399 x465))
(assert (= (and x142 (not x149)) x967))
(assert (= x199 (and x232 x687)))
(assert (= (x838 (+ (- (+ (- x980 160) 196) 196) (x640 (+ 196 x976)))) 0))
(assert (x124 x620))
(assert (= (and x544 x317) x780))
(assert (= (=> (and (= x72 (< x888 x830)) (or (not x72) (and (= (x640 (+ x888 x217)) x753) x72))) x695) x964))
(assert (= (and x1059 x684) x480))
(assert (x124 x1008))
(assert (x124 x491))
(assert (= (and x985 x1001) x818))
(assert (x124 x722))
(assert (= (=> (= x752 (= 0 x993)) (and (=> (and (and (= x462 x112) (= 32 x67) (= (x103 1461501637330902918203684832716283019655932542975 x519) x573) (= x347 x647) (= x307 x1041) (= x637 x313) (= x808 1) (= x46 x406)) (not x752)) x947) (=> x752 x466))) x370))
(assert (= 0 (x838 (+ (- x868 196) (x640 (+ x976 196))))))
(assert (= (and x162 x7) x250))
(assert (= x745 (=> (and (= x971 (= 0 x10)) (or (and (and (= x910 x10) (= x456 x280)) (not x971)) (and (and (< (+ x602 x913) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x913 0) (= (x610 x819) x30) (= x30 x14) (= x280 x456) (= (x246 x291) x602) (= x310 x602) (= x10 x910)) x971))) x1011)))
(assert (= (x295 x435) 0))
(assert (x124 x408))
(assert (= (and (not x139) x550) x796))
(assert (x124 x62))
(assert (x124 x530))
(assert (= x339 (and x764 (not x422))))
(assert (x124 x848))
(assert (= x626 (and (not x734) x460)))
(assert (x124 x1012))
(assert (= (and x173 (not x971)) x736))
(assert (= (and x507 x539) x8))
(assert (x124 x701))
(assert (x124 x257))
(assert (x407 x819))
(assert (x124 x405))
(assert (x124 x178))
(assert (= 0 (x295 x980)))
(assert (= (and x547 x839) x337))
(assert (x124 x254))
(assert (= (and x946 x991) x767))
(assert (x124 x797))
(assert (x124 x892))
(assert (x124 x1023))
(assert (x418 x99))
(assert (= x977 (and x622 x397)))
(assert (= (or x731 (and x880 (not x698))) x960))
(assert (= x386 (=> (and (= (x640 (+ 96 x848)) x83) (= (not (> x634 128)) x560) (= (x485 256) x541)) (and (=> (= x782 128) x860) x560))))
(assert (= (x301 (x998 x291 x116)) 0))
(assert (x124 x296))
(assert (x124 x942))
(assert (= (or x48 x680 x728 x818 x26 x627 x106 x516 x365 x1002 x132 x220 x87 x343 x746 x248 x1047 x712 x134 x68 x595 x636 x305 x853 x510 x97 x95 x520 x724 x538 x1040 x1046 x69 x293 x351) x147))
(assert (= x982 (or x601 x793 x788 x213 x953)))
(assert (= (and x690 (not x251)) x636))
(assert (x124 x420))
(assert (= (or x858 (and x498 (not x452))) x398))
(assert (= x889 (=> (= x682 (< 0 x86)) (and (=> (and x682 (= (> x86 0) x251)) (and (=> (and (and (= (x103 1461501637330902918203684832716283019655932542975 x1000) x17) (= (= x1000 x17) x606) (= (x170 x1031) x1000) (= x1031 x1004)) x251) (and (=> (not x606) x466) (=> (and (= x528 (> x765 0)) x606) (and (=> (not x528) x466) (=> (and x528 (and (= x921 (x783 (- x875 x941))) (= x326 (x783 (- x921 31))) (= x589 (or (and (= (<= x326 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x312 x326)) (and (<= x326 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x312 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x941 x719) (= (x170 x719) x312))) (and (=> (not x589) x466) (=> (and x589 (and (= x473 (< 18446744073709551615 x656)) (= (x640 (+ x312 x941)) x94) (= (x170 x94) x656))) (and (=> x473 x466) (=> (and (and (= (or (and (> x827 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x726 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x827 x726) (= (<= x827 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x726)))) x401) (= x827 (x783 (- x875 x656))) (= (x640 (+ 32 x94)) x726)) (not x473)) (and (=> (and (and (= x340 (< 0 x518)) (or (not x340) (and x340 (and (= x716 (= x175 (x757 x1000))) (= x175 (x233 x1000)) (= x429 (>= (x757 x291) x717)) x429 x716 (< x916 4294967296) (= x717 (x233 x291)))))) (not x401)) x253) (=> x401 x466))))))))))) (=> (not x251) x466))) (=> (not x682) x523)))))
(assert (x418 x912))
(assert (x124 x832))
(assert (x124 x13))
(assert (x124 x349))
(assert (x124 x1034))
(assert (x399 x955))
(assert (x124 x336))
(assert (x124 x291))
(assert (= x267 (=> (and (or (not x837) (and x837 (= x548 (x640 (+ x802 x932))))) (= (< x932 x468) x837)) x90)))
(assert (x124 x616))
(assert (x124 x789))
(assert (x124 x30))
(assert (= 0 (x295 256)))
(assert (x124 x1050))
(assert (= (and x528 x346) x904))
(assert (x124 x445))
(assert (x124 x458))
(assert (= (and x392 (not x4)) x567))
(assert (= x553 (or x688 x358 x444 x98 x894)))
(assert (x124 x675))
(assert (x124 x353))
(assert (x124 x326))
(assert (x124 x542))
(assert (x124 x331))
(assert (x124 x245))
(assert (= x595 (and x229 x809)))
(assert (= (and x682 x968) x690))
(assert (x124 x241))
(assert (= (and x870 x513) x516))
(assert (x124 x292))
(assert (= 0 (x295 160)))
(assert (x124 x514))
(assert (x124 x711))
(assert (x124 x805))
(check-sat)
(exit)