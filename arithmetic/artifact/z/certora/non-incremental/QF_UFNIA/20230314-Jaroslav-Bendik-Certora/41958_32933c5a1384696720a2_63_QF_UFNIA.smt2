(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x100 () Bool)
(declare-fun x111 () Int)
(declare-fun x207 () Bool)
(declare-fun x142 () Int)
(declare-fun x364 () Bool)
(declare-fun x324 () Bool)
(declare-fun x103 () Int)
(declare-fun x363 () Int)
(declare-fun x358 () Int)
(declare-fun x144 () Bool)
(declare-fun x371 () Bool)
(declare-fun x185 () Int)
(declare-fun x267 () Int)
(declare-fun x73 (Int) Int)
(declare-fun x139 () Int)
(declare-fun x287 () Int)
(declare-fun x359 () Int)
(declare-fun x309 () Int)
(declare-fun x92 () Int)
(declare-fun x204 () Int)
(declare-fun x184 () Int)
(declare-fun x182 () Bool)
(declare-fun x136 () Bool)
(declare-fun x307 () Int)
(declare-fun x314 () Bool)
(declare-fun x51 () Int)
(declare-fun x253 () Bool)
(declare-fun x311 () Int)
(declare-fun x143 () Int)
(declare-fun x116 () Int)
(declare-fun x360 () Bool)
(declare-fun x338 () Int)
(declare-fun x17 () Int)
(declare-fun x65 () Int)
(declare-fun x230 () Bool)
(declare-fun x349 () Bool)
(declare-fun x302 (Int Int) Int)
(declare-fun x196 () Int)
(declare-fun x119 () Int)
(declare-fun x74 () Int)
(declare-fun x202 () Int)
(declare-fun x128 () Bool)
(declare-fun x2 () Int)
(declare-fun x228 () Int)
(declare-fun x47 () Int)
(declare-fun x135 () Bool)
(declare-fun x304 () Bool)
(declare-fun x372 () Int)
(declare-fun x10 () Bool)
(declare-fun x123 () Bool)
(declare-fun x190 () Int)
(declare-fun x153 () Int)
(declare-fun x177 () Bool)
(declare-fun x146 () Bool)
(declare-fun x260 () Int)
(declare-fun x298 () Int)
(declare-fun x5 () Bool)
(declare-fun x105 () Int)
(declare-fun x294 () Bool)
(declare-fun x165 () Int)
(declare-fun x203 () Bool)
(declare-fun x250 () Bool)
(declare-fun x291 () Bool)
(declare-fun x21 () Int)
(declare-fun x174 () Int)
(declare-fun x45 () Int)
(declare-fun x237 () Int)
(declare-fun x224 () Int)
(declare-fun x280 () Int)
(declare-fun x20 () Bool)
(declare-fun x48 () Int)
(declare-fun x68 () Int)
(declare-fun x327 () Int)
(declare-fun x189 () Int)
(declare-fun x3 () Int)
(declare-fun x315 () Int)
(declare-fun x64 () Int)
(declare-fun x271 () Int)
(declare-fun x66 () Int)
(declare-fun x55 () Int)
(declare-fun x97 () Bool)
(declare-fun x226 () Int)
(declare-fun x258 () Int)
(declare-fun x42 () Int)
(declare-fun x334 () Int)
(declare-fun x343 () Int)
(declare-fun x213 () Int)
(declare-fun x107 () Bool)
(declare-fun x362 () Int)
(declare-fun x331 () Int)
(declare-fun x329 () Int)
(declare-fun x96 () Bool)
(declare-fun x151 () Bool)
(declare-fun x221 () Int)
(declare-fun x336 () Bool)
(declare-fun x12 () Int)
(declare-fun x297 () Bool)
(declare-fun x333 () Int)
(declare-fun x130 () Bool)
(declare-fun x117 () Bool)
(declare-fun x31 () Bool)
(declare-fun x192 () Bool)
(declare-fun x186 () Bool)
(declare-fun x195 () Bool)
(declare-fun x84 () Int)
(declare-fun x181 () Bool)
(declare-fun x274 () Bool)
(declare-fun x249 () Int)
(declare-fun x53 () Int)
(declare-fun x256 () Bool)
(declare-fun x118 () Bool)
(declare-fun x344 () Int)
(declare-fun x300 () Bool)
(declare-fun x147 () Bool)
(declare-fun x299 () Bool)
(declare-fun x328 () Int)
(declare-fun x205 () Bool)
(declare-fun x49 () Bool)
(declare-fun x220 () Bool)
(declare-fun x129 () Bool)
(declare-fun x356 () Bool)
(declare-fun x215 () Int)
(declare-fun x46 () Bool)
(declare-fun x351 () Bool)
(declare-fun x170 () Bool)
(declare-fun x112 () Bool)
(declare-fun x29 () Int)
(declare-fun x141 () Bool)
(declare-fun x259 () Int)
(declare-fun x270 () Int)
(declare-fun x122 () Int)
(declare-fun x197 () Bool)
(declare-fun x69 () Bool)
(declare-fun x36 () Int)
(declare-fun x131 () Bool)
(declare-fun x235 () Int)
(declare-fun x377 () Int)
(declare-fun x67 () Bool)
(declare-fun x375 () Int)
(declare-fun x150 () Int)
(declare-fun x281 () Int)
(declare-fun x82 () Bool)
(declare-fun x57 () Int)
(declare-fun x109 () Int)
(declare-fun x286 () Bool)
(declare-fun x160 () Int)
(declare-fun x225 () Bool)
(declare-fun x50 () Int)
(declare-fun x80 () Bool)
(declare-fun x87 () Bool)
(declare-fun x348 () Bool)
(declare-fun x335 () Bool)
(declare-fun x263 () Int)
(declare-fun x101 () Bool)
(declare-fun x251 () Int)
(declare-fun x154 () Int)
(declare-fun x39 () Bool)
(declare-fun x125 () Int)
(declare-fun x113 () Bool)
(declare-fun x106 () Int)
(declare-fun x120 () Bool)
(declare-fun x219 () Bool)
(declare-fun x75 () Int)
(declare-fun x124 () Bool)
(declare-fun x33 () Int)
(declare-fun x27 () Int)
(declare-fun x323 () Bool)
(declare-fun x23 () Int)
(declare-fun x175 () Bool)
(declare-fun x243 () Int)
(declare-fun x158 () Bool)
(declare-fun x159 () Int)
(declare-fun x369 () Int)
(declare-fun x38 () Bool)
(declare-fun x18 () Int)
(declare-fun x252 () Int)
(declare-fun x1 (Int) Int)
(declare-fun x277 () Int)
(declare-fun x30 () Int)
(declare-fun x183 () Bool)
(declare-fun x374 () Int)
(declare-fun x110 () Bool)
(declare-fun x269 () Int)
(declare-fun x326 () Int)
(declare-fun x178 () Int)
(declare-fun x242 () Bool)
(declare-fun x44 () Bool)
(declare-fun x303 () Bool)
(declare-fun x157 () Bool)
(declare-fun x70 () Bool)
(declare-fun x81 () Int)
(declare-fun x22 () Int)
(declare-fun x35 () Int)
(declare-fun x288 () Int)
(declare-fun x62 () Int)
(declare-fun x115 () Bool)
(declare-fun x361 () Int)
(declare-fun x354 () Int)
(declare-fun x155 () Bool)
(declare-fun x292 () Bool)
(declare-fun x25 () Int)
(declare-fun x318 () Bool)
(declare-fun x156 () Bool)
(declare-fun x368 () Int)
(declare-fun x247 () Int)
(declare-fun x245 () Int)
(declare-fun x289 () Bool)
(declare-fun x89 () Bool)
(declare-fun x265 () Int)
(declare-fun x194 () Bool)
(declare-fun x164 () Bool)
(declare-fun x152 () Bool)
(declare-fun x320 () Int)
(declare-fun x149 () Int)
(declare-fun x308 () Int)
(declare-fun x114 () Int)
(declare-fun x79 () Bool)
(declare-fun x254 () Int)
(declare-fun x350 () Bool)
(declare-fun x217 () Int)
(declare-fun x40 () Int)
(declare-fun x145 () Bool)
(declare-fun x234 () Int)
(declare-fun x15 () Int)
(declare-fun x85 () Bool)
(declare-fun x169 () Bool)
(declare-fun x206 () Bool)
(declare-fun x238 () Int)
(declare-fun x176 () Bool)
(declare-fun x353 () Bool)
(declare-fun x61 () Int)
(declare-fun x41 () Bool)
(declare-fun x78 () Bool)
(declare-fun x86 () Int)
(declare-fun x216 () Int)
(declare-fun x373 () Bool)
(declare-fun x319 () Int)
(declare-fun x257 () Int)
(declare-fun x295 () Int)
(declare-fun x347 () Int)
(declare-fun x229 () Bool)
(declare-fun x91 () Bool)
(declare-fun x376 () Bool)
(declare-fun x272 () Bool)
(declare-fun x140 () Int)
(declare-fun x88 () Int)
(declare-fun x321 () Bool)
(declare-fun x43 () Bool)
(declare-fun x99 () Int)
(declare-fun x244 () Bool)
(declare-fun x232 () Bool)
(declare-fun x19 () Int)
(declare-fun x210 () Int)
(declare-fun x305 () Bool)
(declare-fun x313 () Bool)
(declare-fun x132 () Bool)
(declare-fun x261 () Int)
(declare-fun x121 () Bool)
(declare-fun x266 () Bool)
(declare-fun x77 () Bool)
(declare-fun x98 () Bool)
(declare-fun x264 () Bool)
(declare-fun x222 () Bool)
(declare-fun x365 () Bool)
(declare-fun x108 () Int)
(declare-fun x56 () Bool)
(declare-fun x71 () Int)
(declare-fun x72 () Int)
(declare-fun x76 () Int)
(declare-fun x126 () Int)
(declare-fun x312 () Int)
(declare-fun x199 () Bool)
(declare-fun x28 () Int)
(declare-fun x93 () Bool)
(declare-fun x161 () Bool)
(declare-fun x54 () Bool)
(declare-fun x332 () Bool)
(declare-fun x4 () Bool)
(declare-fun x301 () Bool)
(declare-fun x200 () Bool)
(declare-fun x9 () Int)
(declare-fun x26 () Int)
(declare-fun x357 () Int)
(declare-fun x180 () Int)
(declare-fun x239 () Bool)
(declare-fun x16 () Int)
(declare-fun x134 () Bool)
(declare-fun x59 () Int)
(declare-fun x339 () Bool)
(declare-fun x352 () Bool)
(declare-fun x32 () Int)
(declare-fun x148 () Int)
(declare-fun x355 () Bool)
(declare-fun x212 () Int)
(declare-fun x94 () Bool)
(declare-fun x337 () Bool)
(declare-fun x340 () Int)
(declare-fun x37 () Bool)
(declare-fun x273 () Int)
(declare-fun x24 () Bool)
(declare-fun x104 () Int)
(declare-fun x322 () Int)
(declare-fun x282 () Bool)
(declare-fun x268 () Bool)
(declare-fun x162 () Bool)
(declare-fun x133 () Bool)
(declare-fun x193 () Int)
(declare-fun x276 () Int)
(declare-fun x275 () Int)
(declare-fun x201 () Int)
(declare-fun x163 (Int) Int)
(declare-fun x6 () Bool)
(declare-fun x284 () Int)
(declare-fun x211 () Int)
(declare-fun x231 () Int)
(declare-fun x227 () Int)
(declare-fun x7 () Bool)
(declare-fun x173 () Bool)
(declare-fun x283 () Int)
(declare-fun x341 () Int)
(declare-fun x11 () Int)
(declare-fun x14 () Bool)
(declare-fun x34 () Int)
(declare-fun x171 () Bool)
(declare-fun x137 () Bool)
(declare-fun x63 () Int)
(declare-fun x208 () Int)
(declare-fun x370 () Int)
(declare-fun x138 () Int)
(declare-fun x241 () Bool)
(declare-fun x248 () Bool)
(declare-fun x95 () Bool)
(declare-fun x330 () Bool)
(declare-fun x166 () Bool)
(declare-fun x83 () Int)
(declare-fun x317 () Bool)
(declare-fun x102 () Bool)
(declare-fun x187 () Bool)
(declare-fun x179 () Int)
(declare-fun x255 () Int)
(declare-fun x223 () Bool)
(declare-fun x262 () Int)
(declare-fun x346 () Int)
(declare-fun x52 () Bool)
(declare-fun x366 () Bool)
(declare-fun x296 () Bool)
(declare-fun x58 () Bool)
(declare-fun x367 () Int)
(declare-fun x198 () Bool)
(declare-fun x285 () Int)
(declare-fun x345 () Int)
(declare-fun x233 () Bool)
(declare-fun x306 () Int)
(declare-fun x127 () Int)
(declare-fun x378 () Bool)
(declare-fun x293 () Bool)
(declare-fun x13 () Int)
(declare-fun x342 () Bool)
(declare-fun x172 () Int)
(declare-fun x167 () Int)
(declare-fun x310 () Bool)
(declare-fun x8 () Bool)
(declare-fun x246 () Int)
(declare-fun x90 () Int)
(declare-fun x240 () Int)
(declare-fun x218 () Bool)
(declare-fun x209 () Bool)
(declare-fun x214 () Bool)
(declare-fun x191 () Int)
(declare-fun x236 () Bool)
(declare-fun x168 () Int)
(declare-fun x290 () Bool)
(define-fun x188 ((x60 Int)) Int (ite (and (<= 0 x60) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x60)) x60 (- x60 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x278 ((x60 Int)) Int (ite (and (> 0 x60) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x60)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x60) x60))
(define-fun x279 ((x325 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x325) (<= 0 x325)))
(define-fun x316 ((x325 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x325) (<= 0 x325)))
(assert (x316 x50))
(assert (x316 x298))
(assert (x316 x111))
(assert (x316 x260))
(assert (x316 x208))
(assert (x316 x53))
(assert (x316 x92))
(assert (x316 x215))
(assert (x316 x221))
(assert (x316 x16))
(assert (x316 x368))
(assert (x316 x27))
(assert (= x376 (and x266 x314)))
(assert (x316 x34))
(assert (= x313 (and x317 x131)))
(assert (x316 x88))
(assert (x316 x178))
(assert (x316 x21))
(assert (x316 x90))
(assert (x316 x19))
(assert (x316 x22))
(assert (x316 x257))
(assert (x316 x374))
(assert (x316 x202))
(assert (= x378 (=> (and (and (= x249 (div x105 10)) (= x91 x175) (= x13 x249)) (and (= x277 10) (= x136 x223) (= x105 x344) x136 (= false x353))) x205)))
(assert (x316 x32))
(assert (= (and (not x300) x321) x266))
(assert (x316 x252))
(assert (x316 x103))
(assert (x316 x61))
(assert (not x232))
(assert (= (=> (and (< 0 x165) (= (or x209 x85) x96) (= x191 x150) (= (= x374 0) x85) (= x180 x208) (= x312 x357) (= x40 x103) (= x180 x193) (= x25 x247) (= (and x342 x130) x175) (= x281 x354) (= x180 x202) (= x215 x125) (= x341 x344) (< 0 x116) (= (< 0 (x1 x165)) x155) (= x283 x193) (= (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x238) x194) (= (x1 x165) x116) (= x41 (= x215 x74)) (= x130 x194) (= x148 x357) (= x342 x93) (= x208 x374) (= x238 (* x103 x160)) (<= 0 x221) (= x217 x148) (= x40 x344) (= x372 2685885107) (= x125 x168) (= x312 x21) (not (= 1245370514 x372)) (= x357 x344) (= x202 x55) (= (* x217 x283) x361) (= (not (= x247 0)) x93) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x322) (= x191 x185) (= (x73 x165) x221) (= 0 x240) (= x377 400) (= x160 x331) (= x209 (= x341 0)) (>= 1461501637330902918203684832716283019655932542975 x165) (= 0 x358) (= x208 x331) x155 (not (= x372 149895259)) (= (div x361 x150) x74) (= x25 x185) (= x269 0) (= x185 x354)) (and (=> (and x96 (and (= x346 0) (= x98 x96) (= x175 x91) x98 (= x13 x346))) x205) (=> (and (not x96) (and (= x235 x208) (= x25 x359) (= x225 x96) x38 (= x38 (not x225)) (= (= x235 x359) x352))) (and (=> (and (and (= x300 (= x11 x311)) (= (not x110) x199) (= x344 x11) (= x311 x25) x199 (= x110 x352)) (not x352)) (and (=> (and x300 (and (= x208 x83) (= x175 x91) (= x83 x13) x289 (= x300 x289))) x205) (=> (and (and (= (not x297) x80) x80 (= x314 (= x154 x234)) (= x23 x25) (= (* 2 x23) x154) (= x234 x208) (= x300 x297) (= x127 2)) (not x300)) (and (=> (and (and (= 2 x275) x44 (= x44 x314) (= x104 (mod (* 2 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x104 x13) (= x91 x175) (= x18 x344)) x314) x205) (=> (and (and (= x363 (* x61 2)) (= x356 x314) (= x111 2) x54 (= x25 x61) (= x344 x64) (= x186 (= x363 x64)) (= (not x356) x54)) (not x314)) (and (=> (and (and (= x208 x315) (= (mod (* 2 x315) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x12) x339 (= x122 2) (= x12 x13) (= x186 x339) (= x91 x175)) x186) x205) (=> (and (not x186) (and (= x132 x186) (= x33 x208) (= (* 2 x33) x190) (= (not x132) x371) x371 (= x264 (= x190 x368)) (= x25 x368) (= x273 2))) (and (=> x264 x365) (=> (and (not x264) (and (= x326 x25) (= x222 (not x229)) (= x264 x229) (= x182 (= x201 x326)) (= x263 2) (= (* 2 x76) x201) (= x76 x344) x222)) (and (=> (and (and x350 (= x226 (* 3 x258)) (= x208 x179) (= x182 x200) (= x25 x258) (= x350 (not x200)) (= x113 (= x179 x226)) (= x340 3)) (not x182)) (and (=> (and x113 (and (= x370 3) (= x32 x13) (= x45 x344) x7 (= x7 x113) (= x91 x175) (= (mod (* x45 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x32))) x205) (=> (and (not x113) (and (= x176 (not x253)) x176 (= x298 x344) (= x95 (= x298 x9)) (= x113 x253) (= x9 (* 3 x284)) (= x284 x25) (= 3 x114))) (and (=> (and x95 (and (= x95 x102) (= x175 x91) (= x208 x276) (= x2 (mod (* x276 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x2 x13) x102 (= 3 x172))) x205) (=> (and (not x95) (and (= 3 x126) (= x307 x208) (= x214 (= x65 x68)) (= x65 (* x307 3)) x310 (= x129 x95) (= (not x129) x310) (= x25 x68))) (and (=> (and (not x214) (and (= x291 (not x256)) (= x196 x344) (= x25 x22) (= x256 x214) x291 (= (* 3 x196) x59) (= x257 3) (= x52 (= x59 x22)))) (and (=> (and (and (= x25 x138) (= x77 (= x329 x228)) (= 10 x63) (= x146 (not x31)) (= x31 x52) (= (* x138 10) x228) x146 (= x329 x208)) (not x52)) (and (=> (and x77 (and (= x139 x344) x332 (= x86 x13) (= (mod (* 10 x139) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x86) (= x77 x332) (= x50 10) (= x91 x175))) x205) (=> (and (not x77) (and (= x77 x97) x69 (= x271 x25) (= x319 10) (= (not x97) x69) (= x66 (* x271 10)) (= (= x66 x84) x131) (= x84 x344))) (and (=> (and (not x131) (and (= (= x47 x53) x223) (= x219 (not x78)) (= x78 x131) (= (* 10 x347) x47) (= x208 x347) x219 (= 10 x30) (= x25 x53))) (and (=> (and (not x223) (and (= x227 x25) (= 10 x288) x43 (= x67 (= x227 x231)) (= x207 x223) (= (not x207) x43) (= (* x27 10) x231) (= x27 x344))) (and (=> (and (not x67) (and (= x4 x67) (= (= x140 x51) x218) x135 (= x25 x108) (= x135 (not x4)) (= 500 x254) (= (* 500 x108) x51) (= x208 x140))) (and (=> (and (and (= x142 (* x362 500)) x272 (= x362 x25) (= x159 x344) (= x218 x170) (= x213 500) (= (= x142 x159) x177) (= x272 (not x170))) (not x218)) (and (=> (and x177 (and (= x175 x91) (= x13 x153) (= (mod (* 500 x212) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x153) (= x8 x177) (= 500 x259) x8 (= x208 x212))) x205) (=> (and (and (= (* 500 x375) x246) (= x375 x208) (= x242 (not x120)) x242 (= x57 x25) (= 500 x224) (= x286 (= x57 x246)) (= x177 x120)) (not x177)) (and (=> x286 x118) (=> (and (not x286) (and (= (not x161) x115) (= (* x204 500) x119) (= x306 x25) (= x173 (= x119 x306)) (= x161 x286) (= x344 x204) x115 (= 500 x109))) (and (=> (and (not x173) (and (= x336 (= x99 x262)) (= x318 x173) (= x16 x25) (= (not x318) x6) (= x42 400) (= x208 x99) x6 (= (* 400 x16) x262))) (and (=> (and (and (= (not x152) x293) x293 (= x3 x25) (= x152 x336) (= x333 (* 400 x3)) (= x174 400) (= x20 (= x333 x167)) (= x167 x344)) (not x336)) (and (=> (and (and (= 400 x270) (= x184 x25) x39 (= x337 (= x210 x184)) (= x20 x305) (= x39 (not x305)) (= x149 x208) (= (* 400 x149) x210)) (not x20)) (and (=> (and (and (= 400 x285) x100 (= (not x192) x100) (= x25 x62) (= x192 x337) (= (* x308 400) x143) (= x344 x308) (= (= x62 x143) x296)) (not x337)) (and (=> (and (and x360 (= 0 x343) (= x360 (not x230)) (= false x162) (= x343 x13) (= x230 x296) (= x162 x91)) (not x296)) x205) (=> x296 x24))) (=> x337 x157))) (=> (and (and (= x208 x90) (= x175 x91) (= x369 x13) (= x301 x20) x301 (= x92 400) (= (mod (* 400 x90) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x369)) x20) x205))) (=> (and x336 (and x156 (= x336 x156) (= x261 x13) (= (mod (* 400 x237) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x261) (= x237 x344) (= x265 400) (= x91 x175))) x205))) (=> x173 x121))))))) (=> (and (and (= x82 x218) (= x344 x72) (= (mod (* x72 500) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x28) x82 (= x91 x175) (= x28 x13) (= x334 500)) x218) x205))) (=> x67 x290))) (=> x223 x378))) (=> (and (and x203 (= 10 x35) (= x13 x309) (= x91 x175) (= x203 x131) (= (mod (* 10 x243) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x309) (= x208 x243)) x131) x205))))) (=> x52 x195))) (=> x214 x171))))))) (=> x182 x134))))))))))) (=> (and (and x323 (= x252 x13) (= x175 x91) (= x323 x352) (= x252 x344)) x352) x205))))) x232))
(assert (x316 x280))
(assert (x316 x235))
(assert (x316 x35))
(assert (x316 x174))
(assert (x316 x354))
(assert (x316 x86))
(assert (x316 x284))
(assert (x316 x106))
(assert (x316 x267))
(assert (= x236 (and x317 (not x131))))
(assert (x316 x372))
(assert (= (and x304 (not x336)) x294))
(assert (= (and (not x314) x266) x123))
(assert (= x56 (and x46 (not x286))))
(assert (x316 x358))
(assert (x316 x245))
(assert (x316 x254))
(assert (= x137 (and x96 x14)))
(assert (= x46 (and (not x177) x274)))
(assert (= x157 (=> (and (and (= x91 x175) (= (div x280 400) x81) (= x13 x81)) (and (= false x282) (= 400 x34) (= x280 x344) x239 (= x337 x239))) x205)))
(assert (= (and (not x296) x147) x145))
(assert (x316 x26))
(assert (x316 x15))
(assert (x316 x320))
(assert (= x233 (and (not x113) x133)))
(assert (x316 x216))
(assert (x316 x340))
(assert (= x144 (and x147 x296)))
(assert (x316 x213))
(assert (x279 x165))
(assert (x316 x36))
(assert (x316 x341))
(assert (x316 x84))
(assert (= x14 true))
(assert (x316 x346))
(assert (= x24 (=> (and (and (= x345 (div x71 400)) (= x345 x13) (= x175 x91)) (and (= false x169) (= x19 400) (= x296 x49) (= x208 x71) x49)) x205)))
(assert (= x166 (and x197 x52)))
(assert (x316 x370))
(assert (x316 x251))
(assert (= x299 (and x197 (not x52))))
(assert (= x134 (=> (and (and (= x91 x175) (= (div x328 2) x88) (= x88 x13)) (and (= x182 x79) (= x292 false) x79 (= x36 2) (= x208 x328))) x205)))
(assert (x316 x33))
(assert (x316 x122))
(assert (x316 x247))
(assert (x316 x375))
(assert (x316 x140))
(assert (x316 x263))
(assert (x316 x196))
(assert (x316 x30))
(assert (x316 x308))
(assert (= x321 (and x183 (not x352))))
(assert (x316 x116))
(assert (= (=> (and (and (= x178 x13) (= x178 x26) (= x178 x29) x91) (and (= x29 x189) (= x303 (= x189 x168)) (= (= x303 x41) x351))) x351) x205))
(assert (x316 x148))
(assert (x316 x3))
(assert (x316 x165))
(assert (= x330 (and x299 x77)))
(assert (x316 x265))
(assert (x316 x285))
(assert (= x107 (and x336 x304)))
(assert (x316 x322))
(assert (x316 x224))
(assert (x316 x72))
(assert (x316 x17))
(assert (x316 x326))
(assert (x316 x283))
(assert (x316 x276))
(assert (= x373 (and x294 x20)))
(assert (= x244 (and x182 x241)))
(assert (x316 x180))
(assert (= x365 (=> (and (and x324 (= x344 x327) (= x5 false) (= x324 x264) (= 2 x106)) (and (= x175 x91) (= x15 (div x327 2)) (= x15 x13))) x205)))
(assert (= (and x113 x133) x128))
(assert (x316 x311))
(assert (= x197 (and x364 (not x214))))
(assert (x316 x359))
(assert (x316 x347))
(assert (x316 x189))
(assert (x316 x334))
(assert (= (and x233 x95) x117))
(assert (x316 x126))
(assert (= x304 (and (not x173) x56)))
(assert (= (and x214 x364) x206))
(assert (x316 x307))
(assert (x316 x11))
(assert (x316 x71))
(assert (x316 x271))
(assert (x316 x63))
(assert (x316 x288))
(assert (= (and (not x95) x233) x364))
(assert (x316 x369))
(assert (x316 x367))
(assert (= (and x286 x46) x335))
(assert (x316 x13))
(assert (x316 x2))
(assert (x316 x104))
(assert (x316 x269))
(assert (x316 x309))
(assert (x316 x259))
(assert (= (and x337 x164) x151))
(assert (x316 x45))
(assert (= x171 (=> (and (and x87 (= 3 x338) (= x214 x87) (= x37 false) (= x260 x344)) (and (= x175 x91) (= x75 x13) (= x75 (div x260 3)))) x205)))
(assert (x316 x243))
(assert (x316 x377))
(assert (x316 x29))
(assert (x316 x81))
(assert (x316 x345))
(assert (x316 x76))
(assert (x316 x327))
(assert (x316 x108))
(assert (x316 x211))
(assert (= x112 (and x300 x321)))
(assert (x316 x191))
(assert (= (and x14 (not x96)) x183))
(assert (x316 x55))
(assert (x316 x153))
(assert (x316 x139))
(assert (x316 x315))
(assert (x316 x83))
(assert (= (and x56 x173) x268))
(assert (= x121 (=> (and (and (= false x355) (= x255 500) x250 (= x173 x250) (= x287 x208)) (and (= (div x287 500) x320) (= x320 x13) (= x175 x91))) x205)))
(assert (x316 x306))
(assert (x316 x179))
(assert (= (and (not x182) x241) x133))
(assert (= (and x164 (not x337)) x147))
(assert (= x348 (and x352 x183)))
(assert (x316 x62))
(assert (= x124 (and (not x223) x236)))
(assert (x316 x275))
(assert (= x317 (and (not x77) x299)))
(assert (x316 x261))
(assert (= (and x274 x177) x187))
(assert (x316 x28))
(assert (= (and x236 x223) x181))
(assert (x316 x234))
(assert (= (=> (and (and x101 (= x216 500) (= x344 x211) (= false x70) (= x101 x286)) (and (= (div x211 500) x17) (= x175 x91) (= x17 x13))) x205) x118))
(assert (x316 x319))
(assert (x316 x167))
(assert (x316 x159))
(assert (x316 x204))
(assert (x316 x255))
(assert (x316 x172))
(assert (x316 x344))
(assert (x316 x18))
(assert (x316 x212))
(assert (x316 x150))
(assert (x316 x240))
(assert (x316 x237))
(assert (x316 x287))
(assert (= x248 (and x124 x67)))
(assert (= x274 (and (not x218) x349)))
(assert (= (and (not x20) x294) x164))
(assert (= (=> (and (and (= x245 (div x251 10)) (= x175 x91) (= x13 x245)) (and (= x208 x251) (= x220 x67) (= false x141) (= x367 10) x220)) x205) x290))
(assert (x316 x312))
(assert (x316 x114))
(assert (x316 x227))
(assert (x316 x295))
(assert (x316 x357))
(assert (x316 x42))
(assert (x316 x338))
(assert (x316 x328))
(assert (= (and (not x186) x123) x366))
(assert (x316 x343))
(assert (x316 x362))
(assert (= x89 (and x186 x123)))
(assert (x316 x105))
(assert (x316 x193))
(assert (x316 x281))
(assert (x316 x138))
(assert (x316 x184))
(assert (x316 x99))
(assert (x316 x127))
(assert (= (and x218 x349) x158))
(assert (x316 x249))
(assert (x316 x75))
(assert (x316 x125))
(assert (= (and (not x264) x366) x241))
(assert (= x10 (or x89 x117 x268 x144 x181 x335 x137 x151 x107 x187 x244 x145 x348 x158 x376 x112 x330 x313 x373 x166 x248 x206 x128 x198)))
(assert (x316 x68))
(assert (x316 x149))
(assert (= (=> (and (and (= false x94) x58 (= x58 x52) (= x208 x48) (= 3 x295)) (and (= (div x48 3) x267) (= x91 x175) (= x13 x267))) x205) x195))
(assert (x316 x168))
(assert (x316 x273))
(assert (x316 x12))
(assert (x316 x57))
(assert (x316 x23))
(assert (x316 x277))
(assert (x316 x160))
(assert (x316 x331))
(assert (x316 x185))
(assert (x316 x270))
(assert (x316 x329))
(assert (x316 x25))
(assert (x316 x48))
(assert (= x198 (and x264 x366)))
(assert (x316 x258))
(assert (x316 x109))
(assert (= (and x124 (not x67)) x349))
(assert (x316 x217))
(assert (x316 x40))
(assert (x316 x64))
(check-sat)
(exit)