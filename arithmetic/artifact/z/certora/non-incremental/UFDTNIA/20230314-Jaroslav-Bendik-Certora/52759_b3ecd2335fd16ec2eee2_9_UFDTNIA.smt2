(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x315 0)) (((x277 (x316 x315) (x564 x315) (x415 Int)) (x184 (x572 Int)) (x263 (x208 x315) (x326 Int)))))
(declare-fun x361 () Bool)
(declare-fun x27 (Int) Int)
(declare-fun x178 () Bool)
(declare-fun x253 () Bool)
(declare-fun x577 () Int)
(declare-fun x71 () Int)
(declare-fun x585 () Int)
(declare-fun x311 () Int)
(declare-fun x497 () Bool)
(declare-fun x535 () Int)
(declare-fun x47 () Bool)
(declare-fun x715 () Bool)
(declare-fun x703 () Bool)
(declare-fun x61 () Int)
(declare-fun x114 () Int)
(declare-fun x347 () Int)
(declare-fun x595 () Bool)
(declare-fun x604 () Int)
(declare-fun x317 () Int)
(declare-fun x175 () Bool)
(declare-fun x450 () Int)
(declare-fun x320 () Bool)
(declare-fun x687 () Int)
(declare-fun x48 () Int)
(declare-fun x288 () Int)
(declare-fun x18 () Int)
(declare-fun x300 () Int)
(declare-fun x44 () Bool)
(declare-fun x519 () Int)
(declare-fun x135 () Int)
(declare-fun x561 () Bool)
(declare-fun x622 (Int) x315)
(declare-fun x467 () Bool)
(declare-fun x483 () Bool)
(declare-fun x412 () Int)
(declare-fun x150 () Int)
(declare-fun x213 () Int)
(declare-fun x176 (Int Int) Int)
(declare-fun x437 () Int)
(declare-fun x563 () Int)
(declare-fun x647 () Bool)
(declare-fun x164 () Bool)
(declare-fun x629 () Bool)
(declare-fun x601 () Int)
(declare-fun x63 (x315) Int)
(declare-fun x569 () Int)
(declare-fun x348 () Int)
(declare-fun x586 () Int)
(declare-fun x133 () Bool)
(declare-fun x395 () Bool)
(declare-fun x43 () Int)
(declare-fun x461 () Int)
(declare-fun x746 () Bool)
(declare-fun x738 () Int)
(declare-fun x216 () Int)
(declare-fun x161 () Int)
(declare-fun x331 () Int)
(declare-fun x70 () Int)
(declare-fun x92 () Bool)
(declare-fun x602 () Int)
(declare-fun x502 () Int)
(declare-fun x463 () Bool)
(declare-fun x391 () Int)
(declare-fun x281 () Bool)
(declare-fun x543 () Int)
(declare-fun x663 () Int)
(declare-fun x181 () Bool)
(declare-fun x643 () Bool)
(declare-fun x637 () Bool)
(declare-fun x73 () Int)
(declare-fun x556 () x315)
(declare-fun x254 () Bool)
(declare-fun x427 () Int)
(declare-fun x615 () Int)
(declare-fun x168 () Bool)
(declare-fun x634 () Bool)
(declare-fun x501 () Bool)
(declare-fun x582 () Int)
(declare-fun x744 () Int)
(declare-fun x377 () x315)
(declare-fun x425 (x315) Int)
(declare-fun x96 () Int)
(declare-fun x682 () Int)
(declare-fun x83 () Int)
(declare-fun x731 () Int)
(declare-fun x605 () Int)
(declare-fun x116 () Int)
(declare-fun x366 () Int)
(declare-fun x442 () Int)
(declare-fun x187 () Int)
(declare-fun x584 () Int)
(declare-fun x272 () Bool)
(declare-fun x520 () Bool)
(declare-fun x466 (x315) Int)
(declare-fun x264 () Int)
(declare-fun x583 () Bool)
(declare-fun x90 () Bool)
(declare-fun x197 () Int)
(declare-fun x54 () Int)
(declare-fun x289 () Int)
(declare-fun x544 () Int)
(declare-fun x504 () Int)
(declare-fun x481 () Bool)
(declare-fun x417 () Int)
(declare-fun x566 () Bool)
(declare-fun x252 () Int)
(declare-fun x351 () Int)
(declare-fun x190 () Int)
(declare-fun x692 () Int)
(declare-fun x531 () Bool)
(declare-fun x716 () Bool)
(declare-fun x237 () Int)
(declare-fun x332 () Bool)
(declare-fun x212 () Int)
(declare-fun x333 () Int)
(declare-fun x537 () Int)
(declare-fun x468 () Bool)
(declare-fun x495 (x315) Int)
(declare-fun x541 (Int) Int)
(declare-fun x109 () Bool)
(declare-fun x91 () x315)
(declare-fun x453 () Bool)
(declare-fun x610 () Int)
(declare-fun x656 () Int)
(declare-fun x526 () x315)
(declare-fun x748 () Int)
(declare-fun x115 () Int)
(declare-fun x641 () Int)
(declare-fun x588 () Bool)
(declare-fun x147 () Int)
(declare-fun x120 () Int)
(declare-fun x323 () Int)
(declare-fun x545 () Int)
(declare-fun x550 () Bool)
(declare-fun x59 () Int)
(declare-fun x671 () Bool)
(declare-fun x527 () x315)
(declare-fun x376 () Int)
(declare-fun x32 () Int)
(declare-fun x105 () Int)
(declare-fun x17 () Int)
(declare-fun x149 () Int)
(declare-fun x129 () Int)
(declare-fun x359 () Bool)
(declare-fun x539 () Bool)
(declare-fun x72 () Int)
(declare-fun x506 () Int)
(declare-fun x624 () Int)
(declare-fun x534 () Bool)
(declare-fun x496 () Int)
(declare-fun x268 () Bool)
(declare-fun x291 () Int)
(declare-fun x67 () Int)
(declare-fun x104 (Int Int) Int)
(declare-fun x292 () Bool)
(declare-fun x587 () Bool)
(declare-fun x712 () Int)
(declare-fun x307 () Bool)
(declare-fun x100 (Int) Int)
(declare-fun x126 () Bool)
(declare-fun x80 () Bool)
(declare-fun x507 () Bool)
(declare-fun x503 () Int)
(declare-fun x53 () Int)
(declare-fun x597 () Int)
(declare-fun x334 () Bool)
(declare-fun x655 () Int)
(declare-fun x113 () Int)
(declare-fun x706 () Int)
(declare-fun x419 () Bool)
(declare-fun x56 () Bool)
(declare-fun x270 () Bool)
(declare-fun x117 () Bool)
(declare-fun x183 () Bool)
(declare-fun x328 () Int)
(declare-fun x167 () Bool)
(declare-fun x456 () Int)
(declare-fun x470 () Int)
(declare-fun x493 () Bool)
(declare-fun x679 () Int)
(declare-fun x182 () Int)
(declare-fun x356 () Int)
(declare-fun x39 () Bool)
(declare-fun x40 () Bool)
(declare-fun x188 () Int)
(declare-fun x636 () Int)
(declare-fun x400 () Int)
(declare-fun x441 () Bool)
(declare-fun x233 () Int)
(declare-fun x88 () Int)
(declare-fun x700 () Int)
(declare-fun x482 () Bool)
(declare-fun x193 () Int)
(declare-fun x406 () Int)
(declare-fun x145 () Bool)
(declare-fun x517 () Bool)
(declare-fun x255 () Int)
(declare-fun x239 () Bool)
(declare-fun x741 () Bool)
(declare-fun x570 () Int)
(declare-fun x686 (Int) Int)
(declare-fun x93 (Int) Int)
(declare-fun x714 () Int)
(declare-fun x202 () Bool)
(declare-fun x593 () x315)
(declare-fun x473 () Int)
(declare-fun x369 () Int)
(declare-fun x653 () Int)
(declare-fun x399 () Bool)
(declare-fun x723 () Bool)
(declare-fun x455 () Int)
(declare-fun x611 () Int)
(declare-fun x478 () Bool)
(declare-fun x79 () Int)
(declare-fun x103 () Int)
(declare-fun x631 () Int)
(declare-fun x280 () Bool)
(declare-fun x275 () Int)
(declare-fun x660 () Int)
(declare-fun x458 () Int)
(declare-fun x186 () Bool)
(declare-fun x386 () Int)
(declare-fun x674 () Bool)
(declare-fun x698 () Int)
(declare-fun x628 () Int)
(declare-fun x38 () Bool)
(declare-fun x667 () Int)
(declare-fun x374 () Bool)
(declare-fun x262 () x315)
(declare-fun x19 () Int)
(declare-fun x433 () Int)
(declare-fun x363 () Bool)
(declare-fun x245 () Int)
(declare-fun x248 () Bool)
(declare-fun x728 () Bool)
(declare-fun x3 () Bool)
(declare-fun x651 () Bool)
(declare-fun x574 () Int)
(declare-fun x283 (x315) Int)
(declare-fun x274 () x315)
(declare-fun x192 () Int)
(declare-fun x231 () Int)
(declare-fun x337 () Bool)
(declare-fun x462 () Int)
(declare-fun x171 () Bool)
(declare-fun x499 () Int)
(declare-fun x312 () Int)
(declare-fun x196 () x315)
(declare-fun x598 () Int)
(declare-fun x57 () Int)
(declare-fun x484 () Int)
(declare-fun x177 () Int)
(declare-fun x350 () x315)
(declare-fun x553 () Bool)
(declare-fun x132 () Int)
(declare-fun x422 () Int)
(declare-fun x516 () Int)
(declare-fun x485 () Int)
(declare-fun x635 () Int)
(declare-fun x156 () Bool)
(declare-fun x465 () Bool)
(declare-fun x306 () Int)
(declare-fun x338 () Int)
(declare-fun x678 () Int)
(declare-fun x658 () Int)
(declare-fun x705 () Int)
(declare-fun x98 () Int)
(declare-fun x221 () Bool)
(declare-fun x330 () Int)
(declare-fun x607 () Bool)
(declare-fun x454 () Bool)
(declare-fun x393 () Int)
(declare-fun x31 () x315)
(declare-fun x106 () Int)
(declare-fun x308 () Bool)
(declare-fun x298 () Bool)
(declare-fun x424 () Int)
(declare-fun x327 () Int)
(declare-fun x513 () Bool)
(declare-fun x480 (Int) Int)
(declare-fun x745 () Int)
(declare-fun x325 () x315)
(declare-fun x737 () Bool)
(declare-fun x426 () Int)
(declare-fun x538 () Int)
(declare-fun x134 () Bool)
(declare-fun x394 () Int)
(declare-fun x486 () Bool)
(declare-fun x179 () Int)
(declare-fun x695 () Int)
(declare-fun x112 (x315) Int)
(declare-fun x547 () Int)
(declare-fun x511 () Bool)
(declare-fun x410 () Int)
(declare-fun x127 () Int)
(declare-fun x447 () Int)
(declare-fun x688 () Bool)
(declare-fun x704 () Int)
(declare-fun x691 () Int)
(declare-fun x612 () Int)
(declare-fun x158 () Int)
(declare-fun x729 () Int)
(declare-fun x180 () Bool)
(declare-fun x305 () Int)
(declare-fun x552 () Int)
(declare-fun x346 () Int)
(declare-fun x389 () Int)
(declare-fun x523 (Int) Int)
(declare-fun x279 () Bool)
(declare-fun x557 () Int)
(declare-fun x335 () Bool)
(declare-fun x459 () Bool)
(declare-fun x654 () Bool)
(declare-fun x620 () Int)
(declare-fun x344 () Int)
(declare-fun x645 () Int)
(declare-fun x589 () Bool)
(declare-fun x640 () Bool)
(declare-fun x138 () Int)
(declare-fun x681 () Bool)
(declare-fun x380 () Int)
(declare-fun x318 () Bool)
(declare-fun x217 () Int)
(declare-fun x97 () Int)
(declare-fun x726 () Int)
(declare-fun x86 () Int)
(declare-fun x476 (Int Int) Int)
(declare-fun x536 () Int)
(declare-fun x719 () Int)
(declare-fun x75 (Int) Int)
(declare-fun x29 () Int)
(declare-fun x576 () Bool)
(declare-fun x525 () Int)
(declare-fun x360 () Bool)
(declare-fun x599 () x315)
(declare-fun x215 () Bool)
(declare-fun x203 () Int)
(declare-fun x623 () Int)
(declare-fun x596 () Bool)
(declare-fun x194 () Int)
(declare-fun x250 () Int)
(declare-fun x562 () Bool)
(declare-fun x336 () x315)
(declare-fun x297 () Bool)
(declare-fun x370 () Bool)
(declare-fun x373 () Int)
(declare-fun x273 () x315)
(declare-fun x362 (Int) Int)
(declare-fun x33 () Int)
(declare-fun x185 () Int)
(declare-fun x234 () Int)
(declare-fun x358 () Bool)
(declare-fun x528 () Int)
(declare-fun x434 () Int)
(declare-fun x727 () Int)
(declare-fun x227 () Int)
(declare-fun x668 (x315) Int)
(declare-fun x42 () Int)
(declare-fun x304 () Bool)
(declare-fun x195 () Bool)
(declare-fun x421 () Int)
(declare-fun x60 () Int)
(declare-fun x294 () Int)
(declare-fun x329 () Bool)
(declare-fun x402 () x315)
(declare-fun x733 () Int)
(declare-fun x1 () Int)
(declare-fun x251 () Int)
(declare-fun x303 () Int)
(declare-fun x696 () Int)
(declare-fun x257 () Int)
(declare-fun x101 () Bool)
(declare-fun x364 () Bool)
(declare-fun x152 () Int)
(declare-fun x372 () Int)
(declare-fun x141 () Bool)
(declare-fun x155 () Int)
(declare-fun x652 () Bool)
(declare-fun x568 () Int)
(declare-fun x709 () Int)
(declare-fun x379 () Int)
(declare-fun x540 () Int)
(declare-fun x107 () Int)
(declare-fun x219 () Bool)
(declare-fun x81 () Bool)
(declare-fun x734 () Int)
(declare-fun x229 () Int)
(declare-fun x491 () Int)
(declare-fun x632 () Bool)
(declare-fun x448 () Bool)
(declare-fun x500 () Int)
(declare-fun x739 () Bool)
(declare-fun x549 (x315) Int)
(declare-fun x472 () Bool)
(declare-fun x626 () Int)
(declare-fun x199 () Int)
(declare-fun x165 () Int)
(declare-fun x204 () Int)
(declare-fun x697 () Int)
(declare-fun x137 () Bool)
(declare-fun x226 () Int)
(declare-fun x642 () Int)
(declare-fun x558 () Int)
(declare-fun x555 () Int)
(declare-fun x207 () Bool)
(declare-fun x241 () Int)
(declare-fun x383 () Bool)
(declare-fun x118 () Int)
(declare-fun x148 () Int)
(declare-fun x30 () x315)
(declare-fun x469 () Bool)
(declare-fun x111 () Int)
(declare-fun x385 () Int)
(declare-fun x672 () Bool)
(declare-fun x243 (x315) Int)
(declare-fun x713 () Int)
(declare-fun x403 () Bool)
(declare-fun x590 () Int)
(declare-fun x464 () Int)
(declare-fun x205 () Int)
(declare-fun x191 () x315)
(declare-fun x146 () Int)
(declare-fun x173 () Int)
(declare-fun x22 () Bool)
(declare-fun x64 () Int)
(declare-fun x375 () Bool)
(declare-fun x16 () Int)
(declare-fun x711 () Int)
(declare-fun x8 () Int)
(declare-fun x689 () Int)
(declare-fun x52 () Int)
(declare-fun x285 () Int)
(declare-fun x162 (x315) Int)
(declare-fun x314 () Int)
(declare-fun x235 () Bool)
(declare-fun x673 (Int Int) Int)
(declare-fun x77 () Int)
(declare-fun x743 () Bool)
(declare-fun x160 () Int)
(declare-fun x730 () Int)
(declare-fun x342 () Int)
(declare-fun x94 () Int)
(declare-fun x230 () Int)
(declare-fun x99 () Int)
(declare-fun x625 () Int)
(declare-fun x51 () Int)
(declare-fun x12 () x315)
(declare-fun x26 () Int)
(declare-fun x293 () Bool)
(declare-fun x661 () Int)
(declare-fun x244 () Bool)
(declare-fun x416 () Int)
(declare-fun x5 () Bool)
(declare-fun x614 () Bool)
(declare-fun x65 () Int)
(declare-fun x423 () Bool)
(declare-fun x381 () Int)
(declare-fun x650 () Bool)
(declare-fun x287 () Bool)
(declare-fun x349 () x315)
(declare-fun x721 () Int)
(declare-fun x518 () Bool)
(declare-fun x397 () Int)
(declare-fun x702 () Int)
(declare-fun x724 () Int)
(declare-fun x267 () Bool)
(declare-fun x457 () Bool)
(declare-fun x530 () Int)
(declare-fun x720 () Int)
(declare-fun x236 () Bool)
(declare-fun x352 () Bool)
(declare-fun x299 () Int)
(declare-fun x619 () Bool)
(declare-fun x487 () Int)
(declare-fun x121 () Int)
(declare-fun x708 () Bool)
(declare-fun x644 () Int)
(declare-fun x747 () Bool)
(declare-fun x302 () Int)
(declare-fun x123 () Bool)
(declare-fun x510 () Bool)
(declare-fun x58 () Bool)
(declare-fun x85 () Int)
(declare-fun x438 () Bool)
(declare-fun x282 () Int)
(declare-fun x565 () Int)
(declare-fun x445 () Int)
(declare-fun x321 () Int)
(declare-fun x261 () Int)
(declare-fun x398 () Int)
(declare-fun x309 () Int)
(declare-fun x246 () Int)
(declare-fun x479 (Int) Int)
(declare-fun x683 () Bool)
(declare-fun x260 () Bool)
(declare-fun x24 () Int)
(declare-fun x749 () Int)
(declare-fun x451 () Int)
(declare-fun x621 () Int)
(declare-fun x151 () Bool)
(declare-fun x609 () Bool)
(declare-fun x249 () Int)
(declare-fun x201 () Int)
(declare-fun x14 () Bool)
(declare-fun x594 () Int)
(declare-fun x68 (Int Int) Int)
(declare-fun x508 () Bool)
(declare-fun x578 () Int)
(declare-fun x488 () Int)
(declare-fun x339 () Int)
(declare-fun x699 () Int)
(declare-fun x82 () Int)
(declare-fun x340 () x315)
(declare-fun x627 () Int)
(declare-fun x271 () Bool)
(declare-fun x524 () Int)
(declare-fun x710 () Int)
(declare-fun x222 (Int) Int)
(declare-fun x666 () Bool)
(declare-fun x411 () Bool)
(declare-fun x648 () Int)
(declare-fun x66 () Int)
(declare-fun x209 () Bool)
(declare-fun x646 () Int)
(declare-fun x21 () Bool)
(declare-fun x404 () Int)
(declare-fun x494 () Int)
(declare-fun x444 () Bool)
(declare-fun x142 () Bool)
(declare-fun x41 () Int)
(declare-fun x174 () Int)
(declare-fun x295 () Int)
(declare-fun x278 () Int)
(declare-fun x139 () Int)
(declare-fun x735 () Int)
(declare-fun x102 () Bool)
(declare-fun x439 () Int)
(declare-fun x405 () Int)
(declare-fun x122 () Int)
(declare-fun x575 () Int)
(declare-fun x432 () Int)
(declare-fun x159 () Int)
(declare-fun x319 () Int)
(declare-fun x240 () Int)
(declare-fun x154 () Int)
(declare-fun x353 () Int)
(declare-fun x45 () Bool)
(declare-fun x512 () Bool)
(declare-fun x169 () Int)
(declare-fun x571 () Int)
(declare-fun x382 () Int)
(declare-fun x532 () x315)
(declare-fun x4 () Int)
(declare-fun x460 () Int)
(declare-fun x224 () Int)
(declare-fun x418 () x315)
(declare-fun x140 () Int)
(declare-fun x638 () Bool)
(declare-fun x657 () Bool)
(declare-fun x591 () Bool)
(declare-fun x580 () Bool)
(declare-fun x265 () Bool)
(declare-fun x498 () Int)
(declare-fun x242 () Int)
(declare-fun x633 () Int)
(declare-fun x613 () Int)
(declare-fun x606 (Int) Int)
(declare-fun x290 () Int)
(declare-fun x125 () Int)
(declare-fun x430 () Bool)
(declare-fun x313 () Bool)
(declare-fun x509 () Int)
(declare-fun x489 () Bool)
(declare-fun x143 () Int)
(declare-fun x266 () Int)
(declare-fun x189 () Bool)
(declare-fun x269 () x315)
(declare-fun x413 () Bool)
(declare-fun x573 () Int)
(declare-fun x15 () Int)
(declare-fun x371 () Bool)
(declare-fun x11 () Bool)
(declare-fun x694 () Bool)
(declare-fun x25 () Int)
(declare-fun x592 () Int)
(declare-fun x407 () Int)
(declare-fun x616 () Int)
(declare-fun x322 () x315)
(declare-fun x78 (x315) Int)
(declare-fun x110 () Int)
(declare-fun x130 () x315)
(declare-fun x664 (Int) Int)
(declare-fun x23 () Bool)
(declare-fun x341 () Bool)
(declare-fun x343 () Int)
(declare-fun x551 () Int)
(declare-fun x37 () Int)
(declare-fun x166 () Int)
(declare-fun x163 () Int)
(declare-fun x581 () Int)
(declare-fun x345 () Bool)
(declare-fun x677 () Int)
(declare-fun x355 () Int)
(declare-fun x76 () Bool)
(declare-fun x276 () Int)
(declare-fun x492 () Int)
(declare-fun x128 () Int)
(declare-fun x396 () Int)
(declare-fun x717 () x315)
(declare-fun x401 () Int)
(declare-fun x200 () Int)
(declare-fun x62 () Int)
(declare-fun x388 () Int)
(declare-fun x357 () Bool)
(declare-fun x618 () Bool)
(declare-fun x46 () Int)
(declare-fun x477 () Int)
(declare-fun x435 () Int)
(declare-fun x368 () Int)
(declare-fun x69 () Bool)
(declare-fun x214 () Int)
(declare-fun x34 () Int)
(declare-fun x505 () Bool)
(declare-fun x542 () Int)
(declare-fun x420 () Int)
(declare-fun x384 () Bool)
(declare-fun x390 () Int)
(declare-fun x560 () Int)
(declare-fun x2 () Int)
(declare-fun x296 () Int)
(declare-fun x89 () Bool)
(declare-fun x559 () Int)
(declare-fun x324 () Bool)
(declare-fun x284 () Int)
(declare-fun x172 () Int)
(declare-fun x690 () Int)
(declare-fun x684 () Int)
(declare-fun x206 () Bool)
(declare-fun x515 () Int)
(declare-fun x55 () Bool)
(declare-fun x28 () Int)
(declare-fun x35 () Int)
(declare-fun x10 () Int)
(declare-fun x693 () Int)
(declare-fun x579 () Int)
(declare-fun x490 () Int)
(declare-fun x258 () Bool)
(declare-fun x722 () x315)
(declare-fun x630 () Int)
(define-fun x676 ((x315 x315) (x514 Int)) x315 (ite ((_ is x263) x315) (x263 (x208 x315) (+ (x326 x315) x514)) (ite ((_ is x277) x315) (x277 (x316 x315) (x564 x315) (+ (x415 x315) x514)) (x184 (+ x514 (x572 x315))))))
(define-fun x108 ((x608 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x608) (>= x608 0)) x608 (- x608 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x218 ((x608 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x608) (> 0 x608)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x608) x608))
(define-fun x452 ((x546 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x546) (>= x546 0)))
(define-fun x740 ((x546 Int)) Bool (and (= (x476 115792089237316195423570985008687907853269984665640564039457584007913129639935 x546) x546) (= x546 (x476 x546 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x449 ((x546 Int)) Bool (and (= (x476 0 x546) 0) (= 0 (x476 x546 0))))
(define-fun x153 ((x546 Int)) Bool (= (x476 x546 x546) x546))
(define-fun x49 ((x546 Int)) Bool (and (x153 x546) (x740 x546) (x449 x546)))
(define-fun x6 ((x546 Int) (x365 Int)) Bool (= (x476 x365 x546) (x476 x546 x365)))
(define-fun x474 ((x546 Int) (x365 Int)) Bool (and (>= (x476 x546 x365) 0) (=> (>= x365 0) (>= x365 (x476 x546 x365))) (=> (<= 0 x546) (>= x546 (x476 x546 x365)))))
(define-fun x247 ((x546 Int) (x365 Int)) Bool (and (x6 x546 x365) (x474 x546 x365)))
(define-fun x471 ((x546 Int)) Bool (= (mod x546 1461501637330902918203684832716283019655932542976) (x476 x546 1461501637330902918203684832716283019655932542975)))
(define-fun x429 ((x546 Int)) Bool (and (x247 x546 1461501637330902918203684832716283019655932542975) (x471 x546)))
(define-fun x675 ((x546 Int)) Bool (= (mod x546 2) (x476 x546 1)))
(define-fun x409 ((x546 Int)) Bool (and (x247 x546 1) (x675 x546)))
(define-fun x443 ((x546 Int)) Bool (= (x476 x546 31) (mod x546 32)))
(define-fun x533 ((x546 Int)) Bool (and (x443 x546) (x247 x546 31)))
(define-fun x680 ((x546 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x176 x546 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x176 115792089237316195423570985008687907853269984665640564039457584007913129639935 x546) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x119 ((x546 Int)) Bool (and (= (x176 0 x546) x546) (= x546 (x176 x546 0))))
(define-fun x84 ((x546 Int)) Bool (= (x176 x546 x546) x546))
(define-fun x665 ((x546 Int)) Bool (and (x119 x546) (x84 x546) (x680 x546)))
(define-fun x554 ((x546 Int) (x365 Int)) Bool (= (x176 x365 x546) (x176 x546 x365)))
(define-fun x211 ((x546 Int) (x365 Int)) Bool (and (=> (>= x365 0) (<= x365 (x176 x546 x365))) (=> (<= 0 x546) (<= x546 (x176 x546 x365))) (<= (x176 x546 x365) (+ x546 x365))))
(define-fun x310 ((x546 Int) (x365 Int)) Bool (and (x554 x546 x365) (x211 x546 x365)))
(define-fun x228 ((x546 Int)) Bool (= (mod x546 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x546 32) (x476 x546 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x95 ((x546 Int)) Bool (and (x247 x546 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x228 x546)))
(define-fun x20 ((x546 Int)) Bool (= (x476 x546 255) (mod x546 256)))
(define-fun x74 ((x546 Int)) Bool (and (x20 x546) (x247 x546 255)))
(define-fun x210 ((x354 Int)) Int (x479 x354))
(define-fun x548 ((x354 Int)) Int (ite (= x354 128) x373 (x75 x354)))
(define-fun x256 ((x354 Int)) Int (ite (= 160 x354) x77 (x686 x354)))
(define-fun x669 ((x354 Int)) Int (ite (= 160 x354) x623 (x686 x354)))
(define-fun x725 ((x354 Int)) Int (ite (= 192 x354) x213 (x256 x354)))
(define-fun x732 ((x354 Int)) Int (ite x272 (x686 x354) (ite x189 (ite x607 (x256 x354) (x725 x354)) (x669 x354))))
(define-fun x522 ((x354 Int)) Int (ite (= x354 x381) x405 (x732 x354)))
(define-fun x50 ((x354 Int)) Int (ite (= x354 x303) x555 (x522 x354)))
(define-fun x301 ((x354 Int)) Int (ite (= x354 x135) x214 (x50 x354)))
(define-fun x259 ((x354 Int)) Int (ite (= x251 x354) x642 (x301 x354)))
(define-fun x685 ((x354 Int)) Int (ite x512 (x301 x354) (ite x375 (x50 x354) (ite x441 (x522 x354) (ite x258 (x732 x354) (x259 x354))))))
(define-fun x440 ((x354 Int)) Int (ite (= x354 x190) x250 (x685 x354)))
(define-fun x567 ((x354 Int)) Int (ite (= x720 x354) x727 (x440 x354)))
(define-fun x87 ((x354 Int)) Int (ite (= x354 x592) x86 (x567 x354)))
(define-fun x701 ((x354 Int)) Int (ite (= x696 x354) x660 (x87 x354)))
(define-fun x521 ((x354 Int)) Int (ite (= x354 x719) x712 (x701 x354)))
(define-fun x392 ((x354 Int)) Int (ite x207 (x701 x354) (ite x505 (x87 x354) (ite x510 (x567 x354) (ite x361 (x440 x354) (x521 x354))))))
(define-fun x431 ((x354 Int)) Int (ite (= x354 x257) x573 (x392 x354)))
(define-fun x157 ((x354 Int)) Int (ite (= x354 x616) x709 (x732 x354)))
(define-fun x144 ((x354 Int)) Int (ite (= x62 x354) x85 (x157 x354)))
(define-fun x529 ((x354 Int)) Int (ite (= x113 x354) x161 (x144 x354)))
(define-fun x659 ((x354 Int)) Int (ite (= x354 x705) x726 (x529 x354)))
(define-fun x36 ((x354 Int)) Int (ite x329 (x529 x354) (ite x80 (x144 x354) (ite x637 (x157 x354) (ite x588 (x732 x354) (x659 x354))))))
(define-fun x707 ((x354 Int)) Int (ite (= x88 x354) x653 (x36 x354)))
(define-fun x649 ((x354 Int)) Int (ite (= x574 x354) x563 (x707 x354)))
(define-fun x670 ((x354 Int)) Int (ite (= x354 x234) x445 (x649 x354)))
(define-fun x718 ((x354 Int)) Int (ite (= x506 x354) x724 (x670 x354)))
(define-fun x446 ((x354 Int)) Int (ite (= x627 x354) x111 (x718 x354)))
(define-fun x378 ((x354 Int)) Int (ite x587 (x718 x354) (ite x11 (x670 x354) (ite x741 (x649 x354) (ite x133 (x707 x354) (x446 x354))))))
(define-fun x124 ((x354 Int)) Int (ite (= x174 x354) x158 (x378 x354)))
(define-fun x736 ((x354 Int)) Int (ite x562 (x431 x354) (ite x453 (x124 x354) (x732 x354))))
(define-fun x436 ((x354 Int)) Int (ite (= x354 x163) x586 (x480 x354)))
(define-fun x617 ((x354 Int)) Int (ite (= x354 x437) x601 (x436 x354)))
(define-fun x220 ((x354 Int)) Int (ite (= x382 x354) x379 (x617 x354)))
(define-fun x225 ((x354 Int)) Int (ite (= x143 x354) x302 (x220 x354)))
(define-fun x603 ((x354 Int)) Int (ite (= x354 x745) x149 (x225 x354)))
(define-fun x238 ((x354 Int)) Int (ite (= x354 x116) x385 (x603 x354)))
(define-fun x136 ((x354 Int)) Int (ite x253 (x603 x354) (x238 x354)))
(define-fun x428 ((x354 Int)) Int (ite (= x525 x354) x160 (x136 x354)))
(define-fun x131 ((x354 Int)) Int (ite (= x152 x354) x602 (x27 x354)))
(define-fun x387 ((x354 Int)) Int (ite (= x420 x354) x347 (x131 x354)))
(define-fun x742 ((x354 Int)) Int (ite (= x354 x152) x697 (x27 x354)))
(define-fun x408 ((x354 Int)) Int (ite x341 (x27 x354) (ite x235 (ite x14 (x131 x354) (x387 x354)) (x742 x354))))
(define-fun x9 ((x354 Int)) Int (ite (= x504 x354) x389 (x100 x354)))
(define-fun x286 ((x354 Int)) Int (ite (= x354 x492) 1 (x362 x354)))
(define-fun x662 ((x354 Int)) Int (ite (= x354 x484) 21711016731996786641919559689128982722488122124807605757398297001483711807488 (x664 x354)))
(define-fun x13 ((x354 Int)) Int (ite (= x354 x626) x498 (x548 x354)))
(define-fun x7 ((x354 Int)) Int (ite (= x492 x354) x464 (x548 x354)))
(define-fun x600 ((x354 Int)) Int (ite x562 (x13 x354) (ite x453 (x7 x354) (x548 x354))))
(define-fun x475 ((x354 Int)) Int (ite (= x354 x492) x500 (x362 x354)))
(define-fun x198 ((x354 Int)) Int (ite x497 (x475 x354) (x286 x354)))
(define-fun x367 ((x354 Int)) Int (ite (and (> (+ x500 x245) x354) (<= x245 x354)) (x479 (+ x700 (- x354 x245))) (x664 x354)))
(define-fun x414 ((x354 Int)) Int (ite x489 (x664 x354) (x367 x354)))
(define-fun x232 ((x354 Int)) Int (ite (= (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x354) (x176 (x476 (x414 (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 255 (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x104 (x476 x355 255) (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x414 x354)))
(define-fun x170 ((x354 Int)) Int (ite x497 (ite x413 (x414 x354) (x232 x354)) (x662 x354)))
(define-fun x223 ((x354 Int)) Int (ite x22 (x136 x354) (x428 x354)))
(define-fun x639 ((x546 Int)) Bool (=> (and (not (= 599290589 x546)) (> x546 10000) (not (= x546 1461501637330902918203684832716283019655932542975)) (not (= x546 1812160747)) (not (= x546 1332530407)) (not (= x546 2720838757)) (not (= 1117154408 x546)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x546)) (not (= x546 2514000705)) (not (= x546 2376452955)) (not (= x546 1666326814)) (not (= 2962947777 x546)) (not (= x546 1461501637330902918203684832716283019655932542976)) (not (= 1525444543 x546)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x546)) (not (= x546 18446744073709551615)) (not (= 3096268766 x546)) (not (= x546 21711016731996786641919559689128982722488122124807605757398297001483711807488))) (not ((_ is x184) (x622 x546)))))
(assert (= 0 (x75 x99)))
(assert (= (=> (and (= x703 (> 32 x342)) (= (x218 (- x199 32)) x342) (= (x108 (+ 32 x627)) x485) (= x111 (x718 256))) (and x703 (=> (and (= x342 x226) (= 288 x166) (= x485 x174)) x481))) x513))
(assert (= x341 (and x236 x76)))
(assert (x452 x52))
(assert (= x518 (and (not x463) x167)))
(assert (x639 x611))
(assert (x452 x503))
(assert (x452 x138))
(assert (x452 x705))
(assert (x452 x695))
(assert (= x167 (and x507 (not x23))))
(assert (x452 x502))
(assert (= x320 (=> (and (= x391 x116) (= (x736 x28) x385) (= x28 x434) (= x708 (not (< 32 x105)))) (and x279 x708))))
(assert (x452 x330))
(assert (x49 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 255 (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(assert (= (or x637 x508 x329 x80 x588) x411))
(assert (x452 x450))
(assert (= x502 (x283 (x622 x502))))
(assert (x452 x697))
(assert (x49 x693))
(assert (x452 x165))
(assert (x452 x610))
(assert (x452 x29))
(assert (x452 x18))
(assert (x452 x678))
(assert (x452 x726))
(assert (x452 x241))
(assert (x452 x237))
(assert (x452 x42))
(assert (x95 x748))
(assert (x452 x537))
(assert (x452 x698))
(assert (= x164 (=> (and (= (x108 (+ 32 x705)) x630) (= (x408 x499) x726) (= (> 32 x289) x89) (= x289 (x218 (- x560 32))) (= (x108 (+ 32 x499)) x435)) (and x89 (=> (and (= x179 x289) (= x88 x630) (= x435 x597)) x576)))))
(assert (x452 x339))
(assert (x49 x393))
(assert (x452 x278))
(assert (x452 x159))
(assert (= (and (not x332) x634) x126))
(assert (= (and x126 x580) x512))
(assert (x452 x569))
(assert (x452 x658))
(assert (= (x686 x369) 0))
(assert (x452 x397))
(assert (= 0 (x686 x46)))
(assert (= 2514000705 (x283 (x184 2514000705))))
(assert (x452 x328))
(assert (x452 x729))
(assert (x247 (x414 (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 255 (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(assert (x49 x355))
(assert (x247 x416 x530))
(assert (x452 x369))
(assert (= (x184 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x622 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x452 x506))
(assert (x452 x689))
(assert (x452 x65))
(assert (x452 x347))
(assert (x452 x748))
(assert (= x375 (and x332 x634)))
(assert (x452 x519))
(assert (x452 x594))
(assert (x452 x574))
(assert (= (or x357 x14) x235))
(assert (= 1461501637330902918203684832716283019655932542975 (x283 (x184 1461501637330902918203684832716283019655932542975))))
(assert (x452 x166))
(assert (x533 x105))
(assert (x452 x368))
(assert (x452 x120))
(assert (= (x686 160) 0))
(assert (x452 x690))
(assert (x452 x338))
(assert (x452 x504))
(assert (= (=> (and (<= x379 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x586 1461501637330902918203684832716283019655932542976) (<= x601 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x448 (< 0 x105)) (= x599 (x676 x532 1)) (>= x601 0) (= (x549 x532) x601) (= x382 (x108 (+ 32 x437))) (= (x425 x599) x379) (>= x379 0) (= x434 (x108 (+ x99 32))) (= x302 (x218 (- x745 x163))) (= x143 (x108 (+ 32 x382))) (= x437 (x108 (+ 32 x163))) (= x105 (x600 x99)) (= x532 (x676 x30 1)) (<= 0 x586) (<= x586 1461501637330902918203684832716283019655932542975) (= (x600 x99) x149) (= (x108 (+ x745 32)) x391) (= (x243 x30) x586) (= x745 (x108 (+ 32 x143)))) (and (=> x448 x320) (=> (not x448) x279))) x281))
(assert (= (or x44 x175) x723))
(assert (x452 x94))
(assert (= (x622 1461501637330902918203684832716283019655932542976) (x184 1461501637330902918203684832716283019655932542976)))
(assert (x452 x366))
(assert (x452 x570))
(assert (x49 x125))
(assert (x452 x455))
(assert (x452 x612))
(assert (= (x686 192) 0))
(assert (x452 x356))
(assert (x452 x719))
(assert (x49 x537))
(assert (= (=> (and (= (not (> x154 x291)) x297) (= (x108 (+ 32 x420)) x291) (= (x78 x322) x347)) (and x651 x297)) x134))
(assert (x452 x193))
(assert (= (+ (x283 x556) 1) (x283 (x676 x556 1))))
(assert (= 1812160747 (x283 (x184 1812160747))))
(assert (x452 x314))
(assert (= (and x423 x681) x743))
(assert (x452 x426))
(assert (= (and x374 (not x553)) x737))
(assert (x247 x295 x693))
(assert (x452 x10))
(assert (x452 x290))
(assert (x452 x190))
(assert (x74 x355))
(assert (x452 x331))
(assert (x665 (x104 (x476 255 x355) (mod (* 8 (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x611 (x283 (x622 x611))))
(assert (x452 x306))
(assert (= (mod (ite (> 256 (* x417 8)) (x68 2 (* x417 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x104 1 (* 8 x417))))
(assert (= (x283 (x676 x30 1)) (+ 1 (x283 x30))))
(assert (x452 x216))
(assert (x452 x645))
(assert (x452 x473))
(assert (x452 x152))
(assert (x452 x451))
(assert (= (x283 (x676 x722 1)) (+ (x283 x722) 1)))
(assert (x452 x435))
(assert (x452 x410))
(assert (x429 x177))
(assert (x409 x594))
(assert (= 0 (x27 x667)))
(assert (x452 x485))
(assert (= (and x448 x371) x156))
(assert (x49 255))
(assert (x247 x524 x388))
(assert (x452 x586))
(assert (x452 x46))
(assert (x49 x721))
(assert (= x489 (and x723 x92)))
(assert (x452 x245))
(assert (x452 x201))
(assert (x452 x477))
(assert (x452 x394))
(assert (x639 x689))
(assert (x452 x229))
(assert (= 0 (x27 x499)))
(assert (x665 x70))
(assert (x452 x28))
(assert (x452 x2))
(assert (x452 x604))
(assert (x452 x547))
(assert (= (x104 1 (* 8 x699)) (mod (ite (> 256 (* x699 8)) (x68 2 (* 8 x699)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x452 x559))
(assert (= (=> (= x262 (x184 9)) x482) x651))
(assert (x452 x355))
(assert (=> (<= x424 10000) (= (x184 x424) (x622 x424))))
(assert (x665 x516))
(assert (x452 x344))
(assert (= (+ x205 (x283 x717)) (x283 (x676 x717 x205))))
(assert (x452 x154))
(assert (x452 x456))
(assert (x452 x544))
(assert (x452 x381))
(assert (x452 x700))
(assert (x49 x94))
(assert (x452 x627))
(assert (x452 x528))
(assert (x452 x317))
(assert (x452 x88))
(assert (x452 x16))
(assert (= (x184 2962947777) (x622 2962947777)))
(assert (x49 x242))
(assert (x452 x312))
(assert (= (x622 599290589) (x184 599290589)))
(assert (= (+ (x283 x274) 1) (x283 (x676 x274 1))))
(assert (= (x104 255 (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (mod (ite (> 256 (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (x68 2 (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 255) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x178 (and x47 x168)))
(assert (= (x283 (x676 x91 1)) (+ (x283 x91) 1)))
(assert (x452 x35))
(assert (x452 x699))
(assert (= (or x441 x512 x632 x375 x258) x221))
(assert (x639 x473))
(assert (x452 x661))
(assert (x247 x648 x491))
(assert (x452 x33))
(assert (= (=> (and (and (and x746 (= (x476 1461501637330902918203684832716283019655932542975 x125) x620) (= x351 (x523 x312)) (>= x125 0) (= x115 x620) (= x746 (= x125 x351)) (= x312 (div x305 2)) (<= x125 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (not (= x394 1525444543)) (not (< x394 599290589)) (> 1812160747 x394) (= x130 (x277 (x622 x502) (x184 3) 0)) (< x240 x551) (not (< x394 1117154408)) (= (= x551 x456) x454) (<= 0 x140) (= x140 (x466 x130)) (= x205 (mod (* x240 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (= x394 1117154408)) (= x209 false) (= x227 (x495 (x622 x611))) (> x227 0) (= x193 2) (= 2 x15) (not (= 1332530407 x394)) (= x115 x631) (= x394 1666326814) (= x101 (= x140 x422)) (= x625 (x668 x377)) (not (= 0 x140)) (= x240 (x218 (- x140 1))) x454 (= (x263 (x184 2) 0) x717) (= (x676 x556 1) x377) (= x129 128) x101 (= 2 x330) (= (x676 x717 x205) x556) (= (x606 x502) x422) (= x456 x496) (= x502 x155)) (and (and (= x58 (not (= x687 x33))) (= x366 x33) (= (= x296 x4) x267) (= x299 x4) (= x631 x687) (= x346 x138) (= x346 x296) (= (or x267 (not x58)) x215)) (and (= x538 x138) (<= 0 x625) (= (= x625 x398) x307) (= x538 (x476 1461501637330902918203684832716283019655932542975 x625)) x307 (= x328 (div x240 2)) (<= x625 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x398 (x523 x328)))))) (and (>= x65 0) (= x65 (x466 x191)) (= x424 x569) (= x395 false) (= x60 (x606 x424)) (= (ite (= 0 x678) (x283 x262) (ite (= x678 32) 8 (ite (= x678 64) x163 (x223 x678)))) x187) (not (< x509 599290589)) (= x461 (x108 (+ 32 x163))) (= x266 (ite (= x571 0) (x283 x262) (ite (= 32 x571) 8 (ite (= 64 x571) x163 (x223 x571))))) (< 0 x16) (= x559 2) (= (ite (= 0 x173) (x283 x262) (ite (= x173 32) 8 (ite (= x173 64) x163 (x223 x173)))) x252) (not (= x509 1525444543)) (= x147 (mod (* 2 x305) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x65 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x16 (x495 (x622 x611))) (not (> 1117154408 x509)) (= x578 (ite (= 0 x461) (x283 x262) (ite (= x461 32) 8 (ite (= x461 64) x163 (x223 x461))))) (= x722 (x676 x325 x147)) (= x191 (x277 (x622 x424) (x184 3) 0)) (not (= x509 1117154408)) (= x579 128) (> 1812160747 x509) (= x305 (x218 (- x65 1))) (not (= x65 0)) (= (x108 (+ 96 x163)) x678) (= x590 2) (= x325 (x263 (x184 2) 0)) (not (= 1332530407 x509)) x383 (= x125 (x668 x196)) (> x551 x305) (= x163 x571) (= x196 (x676 x722 1)) (= x173 (x108 (+ 64 x163))) (= (= x551 x172) x657) x657 (= x496 x172) (= 2 x645) (= (= x60 x65) x383) (= x509 1666326814))) x215) x270))
(assert (x452 x257))
(assert (x49 x656))
(assert (= (x184 18446744073709551615) (x622 18446744073709551615)))
(assert (x452 x744))
(assert (= (=> (and (= (x108 (+ x96 32)) x744) (= (x218 (- x231 32)) x290) (= (x408 x96) x642) (= x285 (x108 (+ x251 32))) (= x715 (> 32 x290))) (and x715 (=> (and (= x290 x404) (= x369 x744) (= x285 x190)) x595))) x280))
(assert (x452 x734))
(assert (x452 x19))
(assert (= (mod (ite (> 256 (* 8 x401)) (x68 2 (* x401 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x104 1 (* 8 x401))))
(assert (x452 x745))
(assert (x452 x66))
(assert (x452 x416))
(assert (x429 x393))
(assert (x452 x291))
(assert (x452 x327))
(assert (x452 x121))
(assert (x452 x525))
(assert (x452 x524))
(assert (x452 x372))
(assert (= (x283 (x184 1332530407)) 1332530407))
(assert (x452 x702))
(assert (= (x283 (x676 x532 1)) (+ 1 (x283 x532))))
(assert (x452 x197))
(assert (x452 x551))
(assert (x452 x85))
(assert (= (mod (ite (< (* x284 8) 256) (x68 2 (* x284 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x104 1 (* 8 x284))))
(assert (= x44 (and (not x486) x467)))
(assert (x452 x445))
(assert (x452 x72))
(assert (x452 x592))
(assert (x452 x179))
(assert (x452 x447))
(assert (= x510 (and x219 x688)))
(assert (= (=> (and (or (and (and (= (x218 (- 32 x565)) x401) (= x525 (x218 (- x380 x565))) (= (mod (- (x104 1 (* 8 x401)) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x470) (= (x476 x537 x585) x160) (= (x136 x525) x585) (= x537 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x470))) (not x643)) x643) (and (= x565 (x476 31 x105)) (= (= x565 0) x643) (= x380 (x108 (+ x391 x105))))) x270) x279))
(assert (= (x664 x661) 0))
(assert (= (x622 2376452955) (x184 2376452955)))
(assert (x452 x598))
(assert (x452 x174))
(assert (x452 x515))
(assert (x452 x679))
(assert (= x265 (and x694 (not x643))))
(assert (= x501 (=> (and (= x348 (x108 (+ 32 x661))) (= (x108 (+ 32 x719)) x503) (= x712 (x170 x661)) (= (x218 (- x212 32)) x663) (= x650 (< x663 32))) (and x650 (=> (and (= x348 x46) (= x257 x503) (= x658 x663)) x444)))))
(assert (= x634 (and x45 (not x313))))
(assert (= (and x423 (not x681)) x467))
(assert (x452 x615))
(assert (x639 x734))
(assert (= 0 (x27 x217)))
(assert (x452 x132))
(assert (x452 x252))
(assert (x452 x111))
(assert (= x109 (and x583 (not x438))))
(assert (x452 x601))
(assert (x452 x163))
(assert (x452 x620))
(assert (x452 x663))
(assert (= x741 (and x102 x672)))
(assert (x452 x155))
(assert (= (and (not x3) x411) x102))
(assert (x452 x230))
(assert (x452 x494))
(assert (= x576 (=> (and (= (x108 (+ x616 x730)) x574) (= x653 (x176 x70 x294)) (= x699 (x218 (- 32 x179))) (= (mod (- (x104 1 (* 8 x699)) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x372) (= (x36 x88) x327) (= x294 (x476 x327 x372)) (= x29 (x36 x597)) (= (> 32 x738) x3) (= x70 (x476 x29 x656)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x372) x656) (= (x548 128) x738)) (and (=> (and (and (= (x218 (- x738 32)) x490) (= x672 (> 32 x490)) (= (x707 160) x563) (= x234 (x108 (+ x574 32)))) (not x3)) (and (=> (and (and (= (> 32 x276) x23) (= x276 (x218 (- x490 32))) (= x445 (x649 192)) (= x506 (x108 (+ x234 32)))) (not x672)) (and (=> (and (and (= x226 x276) (= x166 224) (= x506 x174)) x23) x481) (=> (and (not x23) (and (= x724 (x670 224)) (= x199 (x218 (- x276 32))) (= x627 (x108 (+ x506 32))) (= (> 32 x199) x463))) (and (=> (not x463) x513) (=> (and x463 (and (= 256 x166) (= x627 x174) (= x226 x199))) x481))))) (=> (and (and (= x234 x174) (= x166 192) (= x226 x490)) x672) x481))) (=> (and x3 (and (= x174 x574) (= x226 x738) (= x166 160))) x481)))))
(assert (= (or x453 x562 x534) x371))
(assert (= (x480 x173) 0))
(assert (x452 x543))
(assert (= (or x629 x413) x497))
(assert (x49 x177))
(assert (x310 (x476 (x414 (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 255 (mod (* 8 (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x104 (x476 255 x355) (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x452 x54))
(assert (x452 x597))
(assert (x452 x203))
(assert (= x403 (or x489 x589)))
(assert (x452 x611))
(assert (x452 x311))
(assert (x452 x348))
(assert (x310 x516 x690))
(assert (x452 x379))
(assert (x452 x389))
(assert (x49 x530))
(assert (= 0 (x27 x96)))
(assert (x452 x192))
(assert (= (=> (and (= (= 0 x241) x483) (= (div x689 10) x241)) (and (=> (= 1 x500) x293) x483)) x539))
(assert (= (x283 (x622 x424)) x424))
(assert (= (x622 1812160747) (x184 1812160747)))
(assert (x49 x372))
(assert (= (and x511 (not x244)) x508))
(assert (x452 x407))
(assert (x49 31))
(assert (= (x283 (x676 x12 x121)) (+ (x283 x12) x121)))
(assert (= x171 (and x468 x260)))
(assert (x452 x434))
(assert (x452 x77))
(assert (= (x686 224) 0))
(assert (x452 x710))
(assert (x665 x543))
(assert (x452 x393))
(assert (x452 x713))
(assert (x452 x129))
(assert (x452 x424))
(assert (x452 x43))
(assert (x452 x199))
(assert (= (and x507 x23) x11))
(assert (x49 x491))
(assert (x452 x660))
(assert (= x511 (and (not x520) x737)))
(assert (= (x480 x461) 0))
(assert (= x384 (and x109 (not x206))))
(assert (x452 x1))
(assert (= x292 (or x265 x22)))
(assert (x452 x714))
(assert (x452 x691))
(assert (x452 x605))
(assert (x452 x139))
(assert (= true x493))
(assert (= (and x493 x180) x272))
(assert (x452 x294))
(assert (= 0 (x27 x540)))
(assert (x452 x458))
(assert (x452 x437))
(assert (x452 x626))
(assert (x49 x594))
(assert (= (x686 x28) 0))
(assert (x452 x577))
(assert (x452 x401))
(assert (x452 x342))
(assert (x452 x376))
(assert (x452 x724))
(assert (x452 x264))
(assert (x452 x738))
(assert (x452 x188))
(assert (x452 x584))
(assert (x452 x146))
(assert (x452 x404))
(assert (= 599290589 (x283 (x184 599290589))))
(assert (x452 x158))
(assert (= (x283 (x622 x734)) x734))
(assert (x452 x641))
(assert (x49 x524))
(assert (x452 x300))
(assert (x452 x143))
(assert (x452 x73))
(assert (x452 x621))
(assert (=> (<= x734 10000) (= (x184 x734) (x622 x734))))
(assert (x452 x563))
(assert (x452 x382))
(assert (x452 x498))
(assert (x452 x682))
(assert (x452 x656))
(assert (x452 x177))
(assert (x452 x97))
(assert (x452 x8))
(assert (x452 x575))
(assert (x49 x388))
(assert (x639 x502))
(assert (= 0 (x480 x678)))
(assert (x452 x490))
(assert (= x481 (=> (and (= (x176 x516 x690) x158) (= (x476 x356 x306) x516) (= x163 x54) (= x356 (x378 x166)) (= x333 (x218 (- 32 x226))) (= x99 x492) (= x690 (x476 x648 x491)) (= (mod (- (x104 1 (* 8 x333)) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x491) (= x648 (x378 x174)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x491) x306) (= x464 (x218 (- x233 32))) (= x233 (x218 (- x54 x492))) (= x54 (x108 (+ x574 x738)))) x281)))
(assert (x452 x285))
(assert (x452 x303))
(assert (x452 x540))
(assert (x452 x250))
(assert (x452 x62))
(assert (x452 x34))
(assert (= (x622 1461501637330902918203684832716283019655932542975) (x184 1461501637330902918203684832716283019655932542975)))
(assert (x452 x103))
(assert (x452 x432))
(assert (= x561 (and x260 (not x468))))
(assert (x665 x690))
(assert (x452 x646))
(assert (= (and x206 x109) x207))
(assert (= x357 (and x178 x55)))
(assert (x452 x288))
(assert (=> (<= x689 10000) (= (x622 x689) (x184 x689))))
(assert (= (x184 2720838757) (x622 2720838757)))
(assert (= (=> (and (= x433 (div x689 10)) (= (x108 (+ x368 32)) x713) (= x459 (= x433 0)) (< x368 x714) (= (x475 x492) x714) (= x355 (x108 (+ x713 x492)))) (and x459 x345)) x469))
(assert (x452 x60))
(assert (x452 x579))
(assert (=> (>= 10000 x502) (= (x184 x502) (x622 x502))))
(assert (= (=> (and (= x213 (x63 x402)) (= (not (< 224 x552)) x183)) (and x183 x202)) x640))
(assert (= (and x102 (not x672)) x507))
(assert (x452 x535))
(assert (x452 x630))
(assert (x452 x684))
(assert (x452 x59))
(assert (= (and x195 x403) x413))
(assert (x49 x57))
(assert (x49 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x639 x424))
(assert (x49 x416))
(assert (x452 x333))
(assert (= (=> (= x340 x418) x248) x202))
(assert (x452 x249))
(assert (= (x283 (x676 x526 x682)) (+ (x283 x526) x682)))
(assert (x452 x173))
(assert (= x638 (=> (and (= x195 (= 0 x689)) (= (x218 (- x500 1)) x368)) (and (=> (not x195) x469) (=> x195 x345)))))
(assert (x452 x242))
(assert (x452 x581))
(assert (x452 x296))
(assert (x452 x82))
(assert (x452 x169))
(assert (x452 x470))
(assert (x452 x585))
(assert (x452 x53))
(assert (x452 x41))
(assert (x452 x421))
(assert (x452 x613))
(assert (= (=> (and (= (mod (- (x104 1 (* 8 x417)) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x693) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x693) x388) (= x250 (x176 x261 x543)) (= (> 32 x278) x370) (= x636 (x108 (+ x568 32))) (= (x218 (- 32 x404)) x417) (= x524 (x685 x369)) (= x261 (x476 x524 x388)) (= (x108 (+ x381 x749)) x720) (= x278 (x198 x568)) (= x295 (x685 x190)) (= (x476 x295 x693) x543)) (and (=> (and (not x370) (and (= (< x139 32) x688) (= x412 (x108 (+ x636 32))) (= (x170 x636) x727) (= (x108 (+ x720 32)) x592) (= x139 (x218 (- x278 32))))) (and (=> (and x688 (and (= x139 x658) (= x46 x412) (= x257 x592))) x444) (=> (and (and (= x696 (x108 (+ 32 x592))) (= (x170 x412) x86) (= (x108 (+ x412 32)) x353) (= x570 (x218 (- x139 32))) (= (> 32 x570) x438)) (not x688)) (and (=> (and x438 (and (= x658 x570) (= x257 x696) (= x46 x353))) x444) (=> (and (and (= x719 (x108 (+ x696 32))) (= x206 (> 32 x212)) (= x661 (x108 (+ 32 x353))) (= x212 (x218 (- x570 32))) (= x660 (x170 x353))) (not x438)) (and (=> (and (and (= x46 x661) (= x212 x658) (= x257 x719)) x206) x444) (=> (not x206) x501))))))) (=> (and (and (= x46 x636) (= x257 x720) (= x658 x278)) x370) x444))) x595))
(assert (= (and x666 x674) x534))
(assert (x452 x149))
(assert (x452 x17))
(assert (x452 x406))
(assert (= x219 (and x221 (not x370))))
(assert (not x619))
(assert (x452 x187))
(assert (= (x686 x88) 0))
(assert (x452 x655))
(assert (x452 x412))
(assert (x452 x105))
(assert (=> (>= 10000 x473) (= (x184 x473) (x622 x473))))
(assert (= x441 (and x313 x45)))
(assert (= (and x90 x716) x588))
(assert (x452 x160))
(assert (= 0 (x27 x613)))
(assert (= (x622 21711016731996786641919559689128982722488122124807605757398297001483711807488) (x184 21711016731996786641919559689128982722488122124807605757398297001483711807488)))
(assert (= x175 (and x467 x486)))
(assert (x452 x578))
(assert (x247 x356 x306))
(assert (= 0 (x686 256)))
(assert (x452 x57))
(assert (x452 x735))
(assert (= 0 (x686 x190)))
(assert (= (and x403 (not x195)) x629))
(assert (x49 x648))
(assert (= (and x141 x181) x90))
(assert (x452 x282))
(assert (x452 x122))
(assert (x247 x537 x585))
(assert (= (x184 1332530407) (x622 1332530407)))
(assert (x452 x24))
(assert (x452 x571))
(assert (= (=> (and (= x749 (x9 x504)) (= x24 (x108 (+ 32 x504))) (= (> 32 x749) x268) (= x381 (x108 (+ x626 32)))) (and (=> (and (and (= x381 x190) (= x749 x404) (= x369 x24)) x268) x595) (=> (and (and (= (x408 x24) x405) (= x313 (< x691 32)) (= x217 (x108 (+ x24 32))) (= (x108 (+ 32 x381)) x303) (= (x218 (- x749 32)) x691)) (not x268)) (and (=> (and x313 (and (= x404 x691) (= x369 x217) (= x303 x190))) x595) (=> (and (and (= (x218 (- x691 32)) x192) (= x555 (x408 x217)) (= (x108 (+ x217 32)) x540) (= x332 (> 32 x192)) (= (x108 (+ x303 32)) x135)) (not x313)) (and (=> (and x332 (and (= x135 x190) (= x192 x404) (= x369 x540))) x595) (=> (and (not x332) (and (= (x108 (+ 32 x135)) x251) (= (x218 (- x192 32)) x231) (= x214 (x408 x540)) (= (< x231 32) x580) (= x96 (x108 (+ x540 32))))) (and (=> (not x580) x280) (=> (and (and (= x404 x231) (= x369 x96) (= x251 x190)) x580) x595))))))))) x472))
(assert (x452 x305))
(assert (x452 x284))
(assert (x452 x461))
(assert (x452 x26))
(assert (x452 x396))
(assert (x452 x114))
(assert (x452 x398))
(assert (x452 x147))
(assert (= (or x156 x253) x694))
(assert (x452 x275))
(assert (= (x686 x597) 0))
(assert (= 2962947777 (x283 (x184 2962947777))))
(assert (x452 x64))
(assert (x452 x616))
(assert (x452 x231))
(assert (= (and (not x92) x723) x589))
(assert (x452 x439))
(assert (x452 x462))
(assert (x452 x706))
(assert (x452 x212))
(assert (= (+ 1 (x283 x527)) (x283 (x676 x527 1))))
(assert (x452 x172))
(assert (x452 x233))
(assert (= (and (not x448) x371) x253))
(assert (= (x622 1117154408) (x184 1117154408)))
(assert (x452 x182))
(assert (x452 x107))
(assert (x452 x251))
(assert (= x258 (and x596 x268)))
(assert (x452 x200))
(assert (x452 x380))
(assert (x452 x496))
(assert (= (and (not x666) x674) x181))
(assert (x452 x234))
(assert (= 0 (x664 x412)))
(assert (x452 x555))
(assert (x452 x150))
(assert (x452 x488))
(assert (x452 x648))
(assert (x452 x276))
(assert (x452 x51))
(assert (x452 x214))
(assert (x452 x509))
(assert (= (x184 2514000705) (x622 2514000705)))
(assert (x452 x391))
(assert (= 0 (x27 x24)))
(assert (x452 x590))
(assert (x49 x204))
(assert (x49 x585))
(assert (x452 x32))
(assert (x452 x727))
(assert (x452 x15))
(assert (x310 x331 x615))
(assert (x452 x128))
(assert (x452 x464))
(assert (x49 x295))
(assert (= 0 (x27 x282)))
(assert (= x482 (=> (and (= (= x458 0) x666) (= x458 (x9 x504))) (and (=> (and (and (= x141 (< 0 x575)) (= (x548 128) x575)) (not x666)) (and (=> (and x141 (and (= (> 32 x730) x716) (= (x108 (+ 32 x492)) x616) (= (x108 (+ 32 x504)) x613) (= x730 (x9 x504)))) (and (=> (and x716 (and (= x613 x597) (= x616 x88) (= x179 x730))) x576) (=> (and (and (= x442 (x218 (- x730 32))) (= (x108 (+ 32 x616)) x62) (= (x108 (+ x613 32)) x667) (= x553 (< x442 32)) (= (x408 x613) x709)) (not x716)) (and (=> (and (and (= x179 x442) (= x62 x88) (= x597 x667)) x553) x576) (=> (and (and (= (x218 (- x442 32)) x42) (= x113 (x108 (+ 32 x62))) (= (x108 (+ 32 x667)) x282) (= (> 32 x42) x520) (= (x408 x667) x85)) (not x553)) (and (=> (and (and (= x560 (x218 (- x42 32))) (= x244 (< x560 32)) (= x161 (x408 x282)) (= (x108 (+ 32 x282)) x499) (= x705 (x108 (+ x113 32)))) (not x520)) (and (=> (not x244) x164) (=> (and (and (= x597 x499) (= x705 x88) (= x179 x560)) x244) x576))) (=> (and x520 (and (= x597 x282) (= x88 x113) (= x179 x42))) x576))))))) (=> (and (= (= 0 x689) x681) (not x141)) (and (=> (and (and (= (x108 (+ x492 32)) x484) (= x386 x626) (= x568 x492) (= (x108 (+ x492 64)) x386)) x681) x472) (=> (and (= (= 0 x689) x486) (not x681)) (and (=> (and x486 (= x500 0)) x293) (=> (not x486) x539))))))) (=> (and x666 (and (= 128 x99) (= x163 x492))) x281)))))
(assert (x49 x29))
(assert (x452 x696))
(assert (x452 x636))
(assert (= (x686 x257) 0))
(assert (x452 x309))
(assert (x452 x240))
(assert (= (or x38 x607) x189))
(assert (= (=> (and (or (and (= (x108 (+ 32 x492)) x245) (not x92)) x92) (and (= x748 (x108 (+ x500 31))) (= x605 (x108 (+ 32 x122))) (= x92 (= x500 0)) (= x122 (x476 115792089237316195423570985008687907853269984665640564039457584007913129639904 x748)) (not (> x500 18446744073709551615)) (= x146 (x108 (+ x605 x492))))) x638) x293))
(assert (x247 x327 x372))
(assert (= (and x167 x463) x587))
(assert (x452 x185))
(assert (x452 x125))
(assert (x452 x400))
(assert (x49 (x414 (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x452 x568))
(assert (= (x283 (x184 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (and (not x580) x126) x632))
(assert (x452 x422))
(assert (x452 x530))
(assert (= x689 (x283 (x622 x689))))
(assert (= (x622 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (x622 3096268766) (x184 3096268766)))
(assert (x452 x693))
(assert (x452 x460))
(assert (= x329 (and x511 x244)))
(assert (x49 x748))
(assert (x452 x37))
(assert (= (and (not x716) x90) x374))
(assert (x452 x321))
(assert (= (x283 (x184 21711016731996786641919559689128982722488122124807605757398297001483711807488)) 21711016731996786641919559689128982722488122124807605757398297001483711807488))
(assert (= x607 (and (not x647) x171)))
(assert (= (x480 x525) 0))
(assert (x452 x106))
(assert (x49 x105))
(assert (x665 x294))
(assert (= 1525444543 (x283 (x184 1525444543))))
(assert (= (and x596 (not x268)) x45))
(assert (x452 x631))
(assert (x452 x582))
(assert (x452 x712))
(assert (x452 x692))
(assert (x452 x319))
(assert (= 0 (x686 x174)))
(assert (x452 x386))
(assert (x452 x491))
(assert (= x674 (or x235 x341 x239)))
(assert (x452 x427))
(assert (x452 x484))
(assert (x452 x266))
(assert (x452 x110))
(assert (x452 x353))
(assert (x310 x261 x543))
(assert (x452 x213))
(assert (x452 x86))
(assert (x665 x615))
(assert (x452 x545))
(assert (= (x283 (x184 2720838757)) 2720838757))
(assert (= (x664 x353) 0))
(assert (= (x480 x571) 0))
(assert (x452 x116))
(assert (= x619 (=> (and (and (and (<= 0 x177) (= x185 x216) (= x271 (= x230 x177)) x271 (= (x476 1461501637330902918203684832716283019655932542975 x177) x185) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177) (= (div x200 2) x182) (= x230 (x523 x182))) (and (and (and (<= 0 x203) (not (= x407 2514000705)) (= (not (= 0 x343)) x334) (= x51 x41) (= x66 x689) (= x432 2) (= (x476 x416 x530) x410) (= x373 (div x410 2)) (= (x162 x418) x530) (= x624 x584) x364 (= x462 x309) (and (< 35 x700) (= true (<= x700 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x169 0) (= x407 2962947777) (not (< x249 32)) (= x97 (x466 x350)) (= x300 2) (= x364 (not (= 0 x97))) (= (x495 (x622 x611)) x169) (= (x277 (x622 x689) (x184 15) 0) x30) (>= 1461501637330902918203684832716283019655932542975 x400) (= (x108 (+ 32 x427)) x633) (= x418 (x277 (x622 x689) (x184 8) 0)) (< x407 3096268766) (= x504 (x108 (+ x633 128))) (= (x606 x317) x547) (= x41 x317) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x343) (<= 0 x97) (= x350 (x277 (x622 x689) (x184 3) 0)) (= x41 x689) x430 (= 2 x59) (= (x476 1 x530) x1) (<= 0 x148) (= x400 x48) (>= x400 0) (= (= x97 x547) x430) (= x8 x43) (= x107 x689) x137 (= (= x641 x343) x137) (= (x606 x51) x641) (not (= 2376452955 x407)) (not (= 2720838757 x407)) (>= 1461501637330902918203684832716283019655932542975 x103) (= (x108 (+ 31 x373)) x35) (not (> 4 x700)) (>= x8 0) (= x689 x26) (<= x8 1461501637330902918203684832716283019655932542975) (<= x203 1461501637330902918203684832716283019655932542975) (= x593 (x277 (x622 x689) (x184 3) 0)) (= x581 x299) (<= 0 x103) (= x314 (div x35 32)) x334 (= x624 0) (= (mod (- (ite x352 256 0) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x416) (= x426 2) (= (mod (* 32 x314) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x427) (= x203 x309) (<= x97 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x407 2376452955)) (= x352 (= 0 x1)) (= (x466 x593) x343) (= x180 (= x373 0)) (= x249 (x218 (- x700 4))) (not (< x407 1812160747)) (= x148 x43) (>= 1461501637330902918203684832716283019655932542975 x148) (<= 0 x343)) (and (= x542 (div x610 2)) (= x460 x581) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x393) (= (x523 x542) x255) (= x460 (x476 1461501637330902918203684832716283019655932542975 x393)) (<= 0 x393) x69 (= x69 (= x255 x393)))) (and (not (= x376 1117154408)) (>= x275 0) (= x734 x155) (not (= x376 1525444543)) (= (= x275 x319) x465) (> 1812160747 x376) (= x287 (= x551 x98)) (= x73 2) (not (< x376 1117154408)) (= false x671) (= (x676 x12 x121) x91) (= x319 (x606 x734)) (= (mod (* x610 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x121) (not (= 0 x275)) x287 (< x610 x551) (= 128 x735) (= (x495 (x622 x611)) x344) (<= x275 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 2 x19) x465 (= 1666326814 x376) (not (= x376 1332530407)) (= x216 x366) (= x684 2) (not (< x376 599290589)) (= x393 (x668 x336)) (= (x466 x31) x275) (= x336 (x676 x91 1)) (= (x218 (- x275 1)) x610) (= x12 (x263 (x184 2) 0)) (= x98 x496) (= x31 (x277 (x622 x734) (x184 3) 0)) (< 0 x344)))) (and x186 (= x194 1) (= x655 x246) (= x531 (= x246 x165)) (= (x112 (x622 x611)) x621) (= x151 (or (not x683) x298)) (= x545 0) (= x655 x10) x39 (>= x397 0) (= (x222 x528) x165) (>= 1461501637330902918203684832716283019655932542975 x406) (= 0 x82) (= x32 x496) (= x733 x655) (= x40 (not (= 0 x114))) (= 0 x612) (= x81 (not (= x339 0))) (= (>= x128 x288) x654) x145 x5 (= x79 (x606 x535)) (= 128 x390) (= x186 (or x550 (not x308))) x363 (= x360 (< 0 x729)) x304 (> x551 x200) (= x618 (not (= x311 x132))) (= (< 0 (x495 (x622 x611))) x145) (= x337 false) (= 2 x2) (= x569 x132) (= x128 x496) (= (x218 (- x604 1)) x200) (= x711 x535) (= (or (not x566) x123) x5) (= x339 x711) (= (or (not x40) x747) x39) (= x447 0) (= x706 x655) (= (not (= x557 0)) x308) (= x517 (= 0 x439)) (= x731 (x606 x18)) (= 0 x628) (= (not (= 0 x10)) x566) (= x557 x711) (= 1666326814 x53) (= x711 x577) (= x61 0) x324 (= x591 (forall ((x64 Int)) (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x64) (<= 0 x64)) (not (and (= (x222 x64) x711) (and (> x496 x64) (<= 0 x64))))))) (= (x606 x710) x288) (= (and x728 x56) x747) (= x558 0) (= (= x551 x106) x363) x618 (= (not (= 0 x706)) x399) (= x604 (x466 x269)) x652 (= (x606 x237) x127) (< 0 x611) (= (mod (* x200 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x682) (= x298 (forall ((x25 Int)) (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x25) (<= 0 x25)) (not (and (and (>= x25 0) (< x25 x496)) (= x655 (x222 x25))))))) (= x324 (or x478 (not x614))) (= x72 1) (= x52 2) (= x702 0) x358 (not (= x53 1525444543)) (>= x604 0) (<= 0 x621) (= (forall ((x229 Int)) (=> (and (>= x229 0) (<= x229 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (forall ((x635 Int)) (=> (and (<= x635 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x635)) (or (= x635 x229) (not (and (and (= (x222 x229) x655) (and (<= 0 x229) (< x229 x496))) (and (and (>= x635 0) (< x635 x496)) (= (x222 x635) x655))))))))) x478) (= x358 (or (not x81) x654)) (= x473 x569) (= x155 x655) (= (x277 (x622 x473) (x184 3) 0) x269) (= x142 (> x79 0)) (= 0 x110) (= x177 (x668 x349)) (= x118 x655) (= (x263 (x184 2) 0) x526) (= (x222 x488) x338) (= x614 (not (= 0 x733))) (= x318 (<= x698 x32)) x739 (= x544 (x495 (x622 x611))) (not (= 1117154408 x53)) (= x609 false) (= false x254) (= x550 (forall ((x224 Int)) (=> (and (<= x224 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x224)) (forall ((x188 Int)) (=> (and (<= x188 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x188 0)) (or (= x188 x224) (not (and (and (and (> x496 x224) (<= 0 x224)) (= (x222 x224) x711)) (and (= (x222 x188) x711) (and (> x496 x188) (>= x188 0))))))))))) (= x646 x655) (= x123 (and x151 x419)) (= x496 x106) (= (= x338 x150) x117) (= (x606 x646) x729) (= x515 (x606 x118)) (= (not (= 0 x37)) x304) (= 2 x692) (= 0 x396) (= x488 (x218 (- x731 x194))) (= x349 (x676 x274 1)) (= x335 false) (>= 1461501637330902918203684832716283019655932542975 x397) (= (x606 x536) x698) (not (> 599290589 x53)) (= x728 (or (not x517) x591)) (<= 0 x406) (>= 1461501637330902918203684832716283019655932542975 x644) (= (x676 x526 x682) x274) (>= 1461501637330902918203684832716283019655932542975 x611) (> x544 0) (= x439 (x606 x577)) (= x711 x569) (= x711 x150) (not (= x604 0)) (= x120 0) (= (x606 x473) x201) (not (< x53 1117154408)) (= x114 x711) (= x655 x197) (= (= x201 x604) x652) (= x323 1) (= x711 x710) (= x21 true) (not (= x53 1332530407)) (<= x604 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x487) (= 2962947777 x455) (= x536 x655) (< x53 1812160747) (= x711 x18) (= x419 (or (not x360) x531)) (= x683 (= 0 x127)) (= x711 x37) (= x155 x311) (= (not (= x197 0)) x359) (= x528 (x218 (- x515 x72))) x399 (= x56 (or x117 (not x142))) (>= x644 0) (= (or (not x359) x318) x739) (= x237 x655))) (and (=> (and (not x180) (= x468 (< 31 x373))) (and (=> (and x468 (and (= (x263 x418 0) x273) (= (x63 x273) x77) (= x552 (x108 (+ 160 x373))) (= (> x552 192) x647) (= (x676 x273 1) x402))) (and (=> (not x647) x202) (=> x647 x640))) (=> (and (and (= x17 (x162 x418)) (= x340 (x622 x689)) (= x598 (div x17 256)) (= (mod (* 256 x598) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x623)) (not x468)) x248))) (=> (and x180 (= x340 (x622 x689))) x248)))))
(assert (x452 x61))
(assert (x452 x709))
(assert (x452 x4))
(assert (x452 x118))
(assert (= x596 (or x497 x743)))
(assert (x452 x246))
(assert (= (and (not x55) x178) x14))
(assert (x665 x261))
(assert (= (and x411 x3) x133))
(assert (= (=> (and (= x626 x146) (= x568 x492)) x472) x345))
(assert (x452 x560))
(assert (x452 x538))
(assert (x452 x573))
(assert (x452 x687))
(assert (x452 x492))
(assert (x247 x29 x656))
(assert (x452 x346))
(assert (x452 x127))
(assert (= (x104 1 (* 8 x333)) (mod (ite (> 256 (* x333 8)) (x68 2 (* x333 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x362 x568) 0))
(assert (= x444 (=> (and (= x626 x99) (= x498 (x218 (- x264 32))) (= x204 (x392 x46)) (= x695 (x108 (+ x720 x278))) (= x615 (x476 x57 x242)) (= x163 x695) (= x264 (x218 (- x695 x626))) (= (x218 (- 32 x658)) x284) (= x331 (x476 x204 x721)) (= (x392 x257) x57) (= (x176 x331 x615) x573) (= (mod (- (x104 1 (* 8 x284)) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x242) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242) x721)) x281)))
(assert (x452 x83))
(assert (x452 x442))
(assert (= (mod (ite (< (mod (* (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (x476 255 x355) (x68 2 (mod (* 8 (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x104 (x476 255 x355) (mod (* 8 (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x452 x558))
(assert (x452 x70))
(assert (x452 x711))
(assert (x452 x733))
(assert (x409 x530))
(assert (=> (>= 10000 x611) (= (x622 x611) (x184 x611))))
(assert (x452 x299))
(assert (x452 x255))
(assert (= x262 (x622 (x283 x262))))
(assert (x452 x289))
(assert (x247 x94 x594))
(assert (x452 x420))
(assert (= (or x11 x741 x133 x518 x587) x453))
(assert (x452 x499))
(assert (and (= (x68 2 39) 549755813888) (= 1496577676626844588240573268701473812127674924007424 (x68 2 170)) (= 25108406941546723055343157692830665664409421777856138051584 (x68 2 194)) (= (x68 2 11) 2048) (= (x68 2 101) 2535301200456458802993406410752) (= 822752278660603021077484591278675252491367932816789931674304512 (x68 2 209)) (= (x68 2 148) 356811923176489970264571492362373784095686656) (= (x68 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= (x68 2 82) 4835703278458516698824704) (= 562949953421312 (x68 2 49)) (= (x68 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 200867255532373784442745261542645325315275374222849104412672 (x68 2 197)) (= (x68 2 67) 147573952589676412928) (= (x68 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x68 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 3213876088517980551083924184682325205044405987565585670602752 (x68 2 201)) (= (x68 2 162) 5846006549323611672814739330865132078623730171904) (= 21267647932558653966460912964485513216 (x68 2 124)) (= 365375409332725729550921208179070754913983135744 (x68 2 158)) (= 18014398509481984 (x68 2 54)) (= 2097152 (x68 2 21)) (= (x68 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 134217728 (x68 2 27)) (= 191561942608236107294793378393788647952342390272950272 (x68 2 177)) (= 12259964326927110866866776217202473468949912977468817408 (x68 2 183)) (= 1427247692705959881058285969449495136382746624 (x68 2 150)) (= (x68 2 164) 23384026197294446691258957323460528314494920687616) (= 151115727451828646838272 (x68 2 77)) (= (x68 2 40) 1099511627776) (= (x68 2 16) 65536) (= (x68 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 3138550867693340381917894711603833208051177722232017256448 (x68 2 191)) (= 16 (x68 2 4)) (= 93536104789177786765035829293842113257979682750464 (x68 2 166)) (= 154742504910672534362390528 (x68 2 87)) (= (x68 2 163) 11692013098647223345629478661730264157247460343808) (= 2 (x68 2 1)) (= 46768052394588893382517914646921056628989841375232 (x68 2 165)) (= 102844034832575377634685573909834406561420991602098741459288064 (x68 2 206)) (= 85070591730234615865843651857942052864 (x68 2 126)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x68 2 219)) (= 383123885216472214589586756787577295904684780545900544 (x68 2 178)) (= (x68 2 161) 2923003274661805836407369665432566039311865085952) (= (x68 2 122) 5316911983139663491615228241121378304) (= (x68 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 8192 (x68 2 13)) (= (x68 2 149) 713623846352979940529142984724747568191373312) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x68 2 249)) (= 44601490397061246283071436545296723011960832 (x68 2 145)) (= (x68 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 6427752177035961102167848369364650410088811975131171341205504 (x68 2 202)) (= (x68 2 37) 137438953472) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x68 2 226)) (= 6129982163463555433433388108601236734474956488734408704 (x68 2 182)) (= (x68 2 113) 10384593717069655257060992658440192) (= (x68 2 143) 11150372599265311570767859136324180752990208) (= 98079714615416886934934209737619787751599303819750539264 (x68 2 186)) (= 2854495385411919762116571938898990272765493248 (x68 2 151)) (= 43556142965880123323311949751266331066368 (x68 2 135)) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x68 2 238)) (= (x68 2 84) 19342813113834066795298816) (= 20769187434139310514121985316880384 (x68 2 114)) (= (x68 2 61) 2305843009213693952) (= (x68 2 58) 288230376151711744) (= (x68 2 65) 36893488147419103232) (= 100433627766186892221372630771322662657637687111424552206336 (x68 2 196)) (= 324518553658426726783156020576256 (x68 2 108)) (= (x68 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x68 2 153) 11417981541647679048466287755595961091061972992) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x68 2 241)) (= (x68 2 44) 17592186044416) (= 1298074214633706907132624082305024 (x68 2 110)) (= 2787593149816327892691964784081045188247552 (x68 2 141)) (= (x68 2 91) 2475880078570760549798248448) (= (x68 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 91343852333181432387730302044767688728495783936 (x68 2 156)) (= 35184372088832 (x68 2 45)) (= (x68 2 96) 79228162514264337593543950336) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x68 2 232)) (= (x68 2 174) 23945242826029513411849172299223580994042798784118784) (= (x68 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x68 2 234)) (= (x68 2 171) 2993155353253689176481146537402947624255349848014848) (= (x68 2 134) 21778071482940061661655974875633165533184) (= 18889465931478580854784 (x68 2 74)) (= (x68 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x68 2 80) 1208925819614629174706176) (= (x68 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x68 2 118) 332306998946228968225951765070086144) (= 1073741824 (x68 2 30)) (= 8589934592 (x68 2 33)) (= 1329227995784915872903807060280344576 (x68 2 120)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x68 2 229)) (= 162259276829213363391578010288128 (x68 2 107)) (= (x68 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x68 2 50) 1125899906842624) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x68 2 222)) (= (x68 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 348449143727040986586495598010130648530944 (x68 2 138)) (= (x68 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 633825300114114700748351602688 (x68 2 99)) (= 4951760157141521099596496896 (x68 2 92)) (= 33554432 (x68 2 25)) (= 20282409603651670423947251286016 (x68 2 104)) (= 9223372036854775808 (x68 2 63)) (= (x68 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x68 2 23) 8388608) (= 16777216 (x68 2 24)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x68 2 246)) (= (x68 2 127) 170141183460469231731687303715884105728) (= (x68 2 60) 1152921504606846976) (= (x68 2 8) 256) (= 604462909807314587353088 (x68 2 79)) (= 401734511064747568885490523085290650630550748445698208825344 (x68 2 198)) (= (x68 2 159) 730750818665451459101842416358141509827966271488) (= (x68 2 55) 36028797018963968) (= 87112285931760246646623899502532662132736 (x68 2 136)) (= 576460752303423488 (x68 2 59)) (= 8796093022208 (x68 2 43)) (= (x68 2 90) 1237940039285380274899124224) (= (x68 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 4722366482869645213696 (x68 2 72)) (= 5192296858534827628530496329220096 (x68 2 112)) (= 5575186299632655785383929568162090376495104 (x68 2 142)) (= (x68 2 48) 281474976710656) (= 51422017416287688817342786954917203280710495801049370729644032 (x68 2 205)) (= (x68 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x68 2 19) 524288) (= (x68 2 70) 1180591620717411303424) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x68 2 250)) (= (x68 2 160) 1461501637330902918203684832716283019655932542976) (= 2251799813685248 (x68 2 51)) (= (x68 2 144) 22300745198530623141535718272648361505980416) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x68 2 240)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x68 2 213)) (= 18446744073709551616 (x68 2 64)) (= (x68 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 34359738368 (x68 2 35)) (= (x68 2 173) 11972621413014756705924586149611790497021399392059392) (= 274877906944 (x68 2 38)) (= (x68 2 147) 178405961588244985132285746181186892047843328) (= (x68 2 106) 81129638414606681695789005144064) (= 45671926166590716193865151022383844364247891968 (x68 2 155)) (= (x68 2 47) 140737488355328) (= (x68 2 169) 748288838313422294120286634350736906063837462003712) (= (x68 2 154) 22835963083295358096932575511191922182123945984) (= 618970019642690137449562112 (x68 2 89)) (= 803469022129495137770981046170581301261101496891396417650688 (x68 2 199)) (= (x68 2 53) 9007199254740992) (= 2658455991569831745807614120560689152 (x68 2 121)) (= 174224571863520493293247799005065324265472 (x68 2 137)) (= (x68 2 180) 1532495540865888858358347027150309183618739122183602176) (= 316912650057057350374175801344 (x68 2 98)) (= 5444517870735015415413993718908291383296 (x68 2 132)) (= (x68 2 189) 784637716923335095479473677900958302012794430558004314112) (= 664613997892457936451903530140172288 (x68 2 119)) (= (x68 2 88) 309485009821345068724781056) (= 1569275433846670190958947355801916604025588861116008628224 (x68 2 190)) (= 10889035741470030830827987437816582766592 (x68 2 133)) (= (x68 2 86) 77371252455336267181195264) (= (x68 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x68 2 131) 2722258935367507707706996859454145691648) (= (x68 2 46) 70368744177664) (= (x68 2 76) 75557863725914323419136) (= (x68 2 125) 42535295865117307932921825928971026432) (= 8 (x68 2 3)) (= (x68 2 34) 17179869184) (= (x68 2 179) 766247770432944429179173513575154591809369561091801088) (= 4 (x68 2 2)) (= (x68 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x68 2 14) 16384) (= (x68 2 42) 4398046511104) (= 295147905179352825856 (x68 2 68)) (= (x68 2 139) 696898287454081973172991196020261297061888) (= (x68 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x68 2 130) 1361129467683753853853498429727072845824) (= 262144 (x68 2 18)) (= 64 (x68 2 6)) (= (x68 2 117) 166153499473114484112975882535043072) (= 3064991081731777716716694054300618367237478244367204352 (x68 2 181)) (= 4503599627370496 (x68 2 52)) (= (x68 2 152) 5708990770823839524233143877797980545530986496) (= (x68 2 93) 9903520314283042199192993792) (= 1 (x68 2 0)) (= 41538374868278621028243970633760768 (x68 2 115)) (= (x68 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 649037107316853453566312041152512 (x68 2 109)) (= 392318858461667547739736838950479151006397215279002157056 (x68 2 188)) (= 40564819207303340847894502572032 (x68 2 105)) (= 73786976294838206464 (x68 2 66)) (= 32 (x68 2 5)) (= (x68 2 176) 95780971304118053647396689196894323976171195136475136) (= 144115188075855872 (x68 2 57)) (= (x68 2 20) 1048576) (= 2361183241434822606848 (x68 2 71)) (= (x68 2 41) 2199023255552) (= 1024 (x68 2 10)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x68 2 216)) (= 205688069665150755269371147819668813122841983204197482918576128 (x68 2 207)) (= 128 (x68 2 7)) (= (x68 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x68 2 83) 9671406556917033397649408) (= 187072209578355573530071658587684226515959365500928 (x68 2 167)) (= (x68 2 140) 1393796574908163946345982392040522594123776) (= 47890485652059026823698344598447161988085597568237568 (x68 2 175)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x68 2 223)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x68 2 221)) (= (x68 2 123) 10633823966279326983230456482242756608) (= 158456325028528675187087900672 (x68 2 97)) (= (x68 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 512 (x68 2 9)) (= 374144419156711147060143317175368453031918731001856 (x68 2 168)) (= 24519928653854221733733552434404946937899825954937634816 (x68 2 184)) (= (x68 2 146) 89202980794122492566142873090593446023921664) (= (x68 2 94) 19807040628566084398385987584) (= 52656145834278593348959013841835216159447547700274555627155488768 (x68 2 215)) (= 2596148429267413814265248164610048 (x68 2 111)) (= 83076749736557242056487941267521536 (x68 2 116)) (= (x68 2 31) 2147483648) (= 49039857307708443467467104868809893875799651909875269632 (x68 2 185)) (= (x68 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x68 2 78) 302231454903657293676544) (= 680564733841876926926749214863536422912 (x68 2 129)) (= (x68 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 10141204801825835211973625643008 (x68 2 103)) (= (x68 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x68 2 248)) (= (x68 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 268435456 (x68 2 28)) (= 5070602400912917605986812821504 (x68 2 102)) (= 72057594037927936 (x68 2 56)) (= 590295810358705651712 (x68 2 69)) (= 68719476736 (x68 2 36)) (= (x68 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 38685626227668133590597632 (x68 2 85)) (= 1267650600228229401496703205376 (x68 2 100)) (= (x68 2 128) 340282366920938463463374607431768211456) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x68 2 252)) (= (x68 2 12) 4096) (= (x68 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x68 2 251)) (= (x68 2 62) 4611686018427387904) (= 39614081257132168796771975168 (x68 2 95)) (= (x68 2 32) 4294967296) (= (x68 2 15) 32768) (= 4194304 (x68 2 22)) (= 5986310706507378352962293074805895248510699696029696 (x68 2 172)) (= (x68 2 73) 9444732965739290427392) (= (x68 2 29) 536870912) (= (x68 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x68 2 26) 67108864) (= 196159429230833773869868419475239575503198607639501078528 (x68 2 187)) (= (x68 2 75) 37778931862957161709568) (= (x68 2 81) 2417851639229258349412352) (= 182687704666362864775460604089535377456991567872 (x68 2 157)) (= (x68 2 17) 131072)))
(assert (x452 x194))
(assert (= (and x374 x553) x637))
(assert (x452 x653))
(assert (= 1117154408 (x283 (x184 1117154408))))
(assert (= (and x438 x583) x505))
(assert (x452 x385))
(assert (x49 x356))
(assert (x452 x552))
(assert (x452 x98))
(assert (x452 x536))
(assert (x452 x373))
(assert (x452 x625))
(assert (x247 x57 x242))
(assert (x452 x99))
(assert (= (=> (and (= (x108 (+ x504 32)) x152) (= (x108 (+ x83 x504)) x492) (= x477 (x476 1 x594)) (= (= 0 x477) x457) (= (div x321 32) x677) (= (x476 x94 x594) x679) (= x321 (x108 (+ 31 x389))) (= (div x679 2) x389) (= x236 (= 0 x389)) (= x450 (mod (* x677 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (- (ite x457 256 0) 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x94) (= (x108 (+ x450 32)) x83)) (and (=> (and (not x236) (= (> x389 31) x168)) (and (=> (and (and (= (x263 (x184 9) 0) x527) (= x420 (x108 (+ 32 x152))) (= (> x154 x420) x55) (= x322 (x676 x527 1)) (= (x78 x527) x602) (= (x108 (+ x389 x152)) x154)) x168) (and (=> (not x55) x651) (=> x55 x134))) (=> (and (and (= x421 (div x594 256)) (= x340 x262) (= x697 (mod (* 256 x421) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x168)) x482))) (=> (and x236 (= x340 x262)) x482))) x248))
(assert (x452 x644))
(assert (x452 x721))
(assert (x452 x390))
(assert (x452 x642))
(assert (x452 x261))
(assert (= x47 (and (not x236) x76)))
(assert (= (x184 1525444543) (x622 1525444543)))
(assert (x452 x217))
(assert (= (x664 x636) 0))
(assert (x452 x405))
(assert (= x260 (and (not x180) x493)))
(assert (x49 1))
(assert (x452 x135))
(assert (= (x283 (x184 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x452 x624))
(assert (x452 x224))
(assert (= 18446744073709551615 (x283 (x184 18446744073709551615))))
(assert (x452 x720))
(assert (x452 x628))
(assert (x429 x125))
(assert (x49 x625))
(assert (= x38 (and x171 x647)))
(assert (x429 x625))
(assert (= (or x361 x207 x384 x510 x505) x562))
(assert (= (and x219 (not x688)) x583))
(assert (x452 x113))
(assert (x665 (x476 (x414 (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x104 255 (mod (* 8 (mod (- 31 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x452 x67))
(assert (x452 x500))
(assert (x49 x327))
(assert (x452 x323))
(assert (x310 x70 x294))
(assert (x452 x749))
(assert (= 0 (x664 (mod (- x355 (mod x355 32)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x423 (and x181 (not x141))))
(assert (= 0 (x686 x166)))
(assert (x452 x295))
(assert (x452 x623))
(assert (x452 x161))
(assert (x452 x302))
(assert (= (+ 1 (x283 x273)) (x283 (x676 x273 1))))
(assert (= (and x221 x370) x361))
(assert (x452 x140))
(assert (x452 x602))
(assert (x452 x433))
(assert (x452 x25))
(assert (x452 x516))
(assert (= (or x561 x189 x272) x76))
(assert (= (x622 1666326814) (x184 1666326814)))
(assert (x452 x542))
(assert (x665 x331))
(assert (x452 x565))
(assert (x452 x730))
(assert (x452 x343))
(assert (x247 x204 x721))
(assert (x452 x633))
(assert (x452 x205))
(assert (x452 x417))
(assert (= (x283 (x184 1666326814)) 1666326814))
(assert (x452 x388))
(assert (x452 x677))
(assert (x452 x79))
(assert (x452 x115))
(assert (x452 x148))
(assert (x452 x487))
(assert (= x80 (and x737 x520)))
(assert (= x239 (and (not x168) x47)))
(assert (x452 x204))
(assert (= x473 (x283 (x622 x473))))
(assert (= x22 (and x694 x643)))
(assert (x49 x306))
(assert (= (x283 (x184 3096268766)) 3096268766))
(assert (x452 x48))
(assert (x452 x351))
(assert (= 2376452955 (x283 (x184 2376452955))))
(assert (x452 x557))
(assert (x452 x226))
(assert (x452 x227))
(assert (x452 x731))
(assert (x452 x71))
(assert (x452 x635))
(assert (= (x283 (x676 x325 x147)) (+ x147 (x283 x325))))
(assert (x452 x96))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x283 (x184 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x49 1461501637330902918203684832716283019655932542975))
(assert (x452 x704))
(assert (x452 x667))
(check-sat)
(exit)