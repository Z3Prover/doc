(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x25 0)) (((x376 (x351 Int)) (x500 (x526 x25) (x120 Int)) (x123 (x321 x25) (x330 x25) (x514 Int)))))
(declare-fun x302 () Bool)
(declare-fun x6 () Int)
(declare-fun x111 () Int)
(declare-fun x172 () Bool)
(declare-fun x549 () Int)
(declare-fun x629 () Bool)
(declare-fun x115 () Int)
(declare-fun x531 () x25)
(declare-fun x547 () Int)
(declare-fun x570 () Int)
(declare-fun x350 () Int)
(declare-fun x544 () Int)
(declare-fun x92 () Int)
(declare-fun x46 () Int)
(declare-fun x377 () Int)
(declare-fun x291 () Int)
(declare-fun x643 (x25) Int)
(declare-fun x236 () Int)
(declare-fun x533 () Bool)
(declare-fun x459 () Bool)
(declare-fun x316 () Bool)
(declare-fun x192 () Int)
(declare-fun x509 () Int)
(declare-fun x600 () Int)
(declare-fun x169 () Int)
(declare-fun x392 () Int)
(declare-fun x491 () Int)
(declare-fun x534 () Int)
(declare-fun x325 () Bool)
(declare-fun x468 () Int)
(declare-fun x337 (Int) Int)
(declare-fun x602 (Int) Int)
(declare-fun x631 () Int)
(declare-fun x233 () Int)
(declare-fun x144 () Int)
(declare-fun x569 () Bool)
(declare-fun x310 () Int)
(declare-fun x237 () x25)
(declare-fun x501 () Bool)
(declare-fun x450 () x25)
(declare-fun x527 () Int)
(declare-fun x309 () Int)
(declare-fun x672 () Bool)
(declare-fun x219 () Int)
(declare-fun x657 () Int)
(declare-fun x519 () Bool)
(declare-fun x231 () Int)
(declare-fun x642 () Int)
(declare-fun x384 () Int)
(declare-fun x82 () Bool)
(declare-fun x343 () x25)
(declare-fun x178 () Bool)
(declare-fun x180 () Int)
(declare-fun x23 () Bool)
(declare-fun x456 () Bool)
(declare-fun x586 () Int)
(declare-fun x585 () Int)
(declare-fun x593 () Int)
(declare-fun x12 () Bool)
(declare-fun x93 () Bool)
(declare-fun x502 () Int)
(declare-fun x433 (Int) Int)
(declare-fun x98 () Int)
(declare-fun x497 () Bool)
(declare-fun x572 () Int)
(declare-fun x396 () Int)
(declare-fun x243 () Int)
(declare-fun x158 () Int)
(declare-fun x458 () Int)
(declare-fun x455 () Int)
(declare-fun x315 () Bool)
(declare-fun x560 () Int)
(declare-fun x22 () Int)
(declare-fun x406 () Int)
(declare-fun x555 () Int)
(declare-fun x437 () Bool)
(declare-fun x126 () Int)
(declare-fun x601 () Int)
(declare-fun x668 () Int)
(declare-fun x386 () Bool)
(declare-fun x661 () Int)
(declare-fun x262 () Int)
(declare-fun x29 () Bool)
(declare-fun x37 () Int)
(declare-fun x94 () Bool)
(declare-fun x479 () Int)
(declare-fun x250 () Int)
(declare-fun x305 () Int)
(declare-fun x295 () Int)
(declare-fun x160 (Int) Int)
(declare-fun x229 () Int)
(declare-fun x650 () Int)
(declare-fun x551 () Int)
(declare-fun x73 () Int)
(declare-fun x228 () Int)
(declare-fun x296 () Int)
(declare-fun x590 () Int)
(declare-fun x70 () Int)
(declare-fun x179 () Int)
(declare-fun x138 () Bool)
(declare-fun x644 () x25)
(declare-fun x645 () x25)
(declare-fun x540 () Bool)
(declare-fun x345 () Int)
(declare-fun x181 () Int)
(declare-fun x357 () Int)
(declare-fun x154 () Bool)
(declare-fun x103 () Int)
(declare-fun x627 () Int)
(declare-fun x286 () Int)
(declare-fun x122 () Int)
(declare-fun x267 () Int)
(declare-fun x140 () Int)
(declare-fun x64 () Int)
(declare-fun x417 () Int)
(declare-fun x620 () Int)
(declare-fun x114 () x25)
(declare-fun x460 () Bool)
(declare-fun x34 () Bool)
(declare-fun x110 () Bool)
(declare-fun x186 () Int)
(declare-fun x297 () Int)
(declare-fun x427 () Int)
(declare-fun x303 () Int)
(declare-fun x240 () Int)
(declare-fun x383 () Int)
(declare-fun x65 () Int)
(declare-fun x128 () Bool)
(declare-fun x331 () Int)
(declare-fun x411 () Int)
(declare-fun x146 () Bool)
(declare-fun x432 () Int)
(declare-fun x336 () Bool)
(declare-fun x317 () Int)
(declare-fun x605 () Int)
(declare-fun x199 () Int)
(declare-fun x404 () Int)
(declare-fun x523 () Bool)
(declare-fun x559 () Bool)
(declare-fun x385 () Int)
(declare-fun x438 () Int)
(declare-fun x55 () Int)
(declare-fun x201 () Bool)
(declare-fun x617 () Bool)
(declare-fun x397 () Int)
(declare-fun x51 () Int)
(declare-fun x448 () Int)
(declare-fun x402 () Bool)
(declare-fun x346 () Bool)
(declare-fun x633 () Int)
(declare-fun x225 () Int)
(declare-fun x390 () Int)
(declare-fun x79 () Bool)
(declare-fun x452 () Bool)
(declare-fun x349 () Int)
(declare-fun x567 () Int)
(declare-fun x653 () Int)
(declare-fun x667 () x25)
(declare-fun x395 () Int)
(declare-fun x621 () Bool)
(declare-fun x431 () Int)
(declare-fun x425 () Int)
(declare-fun x119 () Int)
(declare-fun x522 () Int)
(declare-fun x320 () x25)
(declare-fun x443 () Int)
(declare-fun x379 () x25)
(declare-fun x484 () Int)
(declare-fun x647 () Int)
(declare-fun x446 () Int)
(declare-fun x562 () Int)
(declare-fun x197 () x25)
(declare-fun x436 () Int)
(declare-fun x543 () Int)
(declare-fun x588 () Int)
(declare-fun x84 () Int)
(declare-fun x18 () Int)
(declare-fun x311 () Int)
(declare-fun x447 () Int)
(declare-fun x616 () Int)
(declare-fun x618 () Bool)
(declare-fun x582 () Bool)
(declare-fun x466 (Int) Int)
(declare-fun x191 () Int)
(declare-fun x87 () Bool)
(declare-fun x207 () Int)
(declare-fun x189 () Int)
(declare-fun x367 () Int)
(declare-fun x76 () Int)
(declare-fun x408 () Int)
(declare-fun x275 () Int)
(declare-fun x214 () x25)
(declare-fun x100 (Int Int) Int)
(declare-fun x449 () Bool)
(declare-fun x639 () Int)
(declare-fun x399 () Int)
(declare-fun x353 () Bool)
(declare-fun x422 () Int)
(declare-fun x333 (Int Int) Int)
(declare-fun x646 () Bool)
(declare-fun x577 () Int)
(declare-fun x339 () Int)
(declare-fun x253 () Int)
(declare-fun x625 () Bool)
(declare-fun x116 () Int)
(declare-fun x660 () Int)
(declare-fun x278 (x25) Int)
(declare-fun x496 (Int Int) Int)
(declare-fun x457 () Int)
(declare-fun x365 () Int)
(declare-fun x512 () Int)
(declare-fun x419 () Int)
(declare-fun x599 () Bool)
(declare-fun x224 () Bool)
(declare-fun x430 () Int)
(declare-fun x203 () Bool)
(declare-fun x106 () Int)
(declare-fun x268 () Int)
(declare-fun x505 (x25) Int)
(declare-fun x673 () Int)
(declare-fun x175 () Int)
(declare-fun x99 () Bool)
(declare-fun x102 () Int)
(declare-fun x550 () Int)
(declare-fun x226 () Bool)
(declare-fun x575 () Int)
(declare-fun x174 () Int)
(declare-fun x513 () Bool)
(declare-fun x77 () Bool)
(declare-fun x49 () Bool)
(declare-fun x56 () Bool)
(declare-fun x553 () Int)
(declare-fun x97 () Bool)
(declare-fun x71 () Bool)
(declare-fun x571 () Bool)
(declare-fun x112 () Int)
(declare-fun x273 () Bool)
(declare-fun x161 (Int) Int)
(declare-fun x634 () Bool)
(declare-fun x348 () Int)
(declare-fun x506 () Bool)
(declare-fun x132 () Int)
(declare-fun x32 () Int)
(declare-fun x471 () Bool)
(declare-fun x202 () Int)
(declare-fun x28 () Bool)
(declare-fun x247 () Bool)
(declare-fun x54 () Int)
(declare-fun x81 () Bool)
(declare-fun x53 () Bool)
(declare-fun x314 () Int)
(declare-fun x476 () Int)
(declare-fun x241 () Int)
(declare-fun x209 () Bool)
(declare-fun x41 () Bool)
(declare-fun x69 () Int)
(declare-fun x364 () Int)
(declare-fun x137 () Int)
(declare-fun x429 () Bool)
(declare-fun x658 () Int)
(declare-fun x38 () Int)
(declare-fun x211 () Int)
(declare-fun x622 () Int)
(declare-fun x27 () Bool)
(declare-fun x222 () Int)
(declare-fun x352 () Int)
(declare-fun x369 () Int)
(declare-fun x264 () Int)
(declare-fun x362 () Int)
(declare-fun x358 () x25)
(declare-fun x274 () Int)
(declare-fun x671 () Int)
(declare-fun x338 () Int)
(declare-fun x649 () Int)
(declare-fun x230 () Int)
(declare-fun x282 () Int)
(declare-fun x609 () Int)
(declare-fun x108 () Bool)
(declare-fun x462 () Int)
(declare-fun x472 () Int)
(declare-fun x292 () Int)
(declare-fun x185 () Bool)
(declare-fun x587 () x25)
(declare-fun x220 () Bool)
(declare-fun x606 () Int)
(declare-fun x322 () Int)
(declare-fun x439 () Int)
(declare-fun x17 () Bool)
(declare-fun x86 () x25)
(declare-fun x95 () Bool)
(declare-fun x149 () Int)
(declare-fun x242 () Bool)
(declare-fun x517 () Int)
(declare-fun x200 () Bool)
(declare-fun x393 () Int)
(declare-fun x261 () Bool)
(declare-fun x656 () Int)
(declare-fun x375 () Int)
(declare-fun x298 () Int)
(declare-fun x248 () x25)
(declare-fun x412 () Bool)
(declare-fun x478 () Int)
(declare-fun x607 () Int)
(declare-fun x269 () Int)
(declare-fun x8 () Int)
(declare-fun x306 () Int)
(declare-fun x272 () Bool)
(declare-fun x592 () Bool)
(declare-fun x40 () Int)
(declare-fun x58 () Int)
(declare-fun x287 () Int)
(declare-fun x121 () Int)
(declare-fun x19 () Int)
(declare-fun x598 () x25)
(declare-fun x421 () Bool)
(declare-fun x521 () Int)
(declare-fun x465 () Int)
(declare-fun x486 () Int)
(declare-fun x374 () Int)
(declare-fun x145 () Int)
(declare-fun x288 () Bool)
(declare-fun x604 () Bool)
(declare-fun x342 () Int)
(declare-fun x182 () Int)
(declare-fun x129 () Int)
(declare-fun x490 () Int)
(declare-fun x130 () Int)
(declare-fun x636 () Int)
(declare-fun x48 () Int)
(declare-fun x104 () Bool)
(declare-fun x7 () Int)
(declare-fun x381 () Int)
(declare-fun x655 () Int)
(declare-fun x252 () Int)
(declare-fun x564 () Int)
(declare-fun x255 () Bool)
(declare-fun x638 () Int)
(declare-fun x30 () Int)
(declare-fun x2 () Int)
(declare-fun x159 () Int)
(declare-fun x36 () Int)
(declare-fun x495 () Int)
(declare-fun x530 (Int) Int)
(declare-fun x271 () Bool)
(declare-fun x301 () Int)
(declare-fun x401 () Bool)
(declare-fun x215 () Bool)
(declare-fun x329 () Bool)
(declare-fun x594 () Int)
(declare-fun x335 () Int)
(declare-fun x196 () Int)
(declare-fun x78 () Int)
(declare-fun x194 () Bool)
(declare-fun x524 () Int)
(declare-fun x227 () Int)
(declare-fun x344 () Int)
(declare-fun x245 () Bool)
(declare-fun x279 () Int)
(declare-fun x648 () Int)
(declare-fun x615 () Int)
(declare-fun x595 (Int) Int)
(declare-fun x361 () Bool)
(declare-fun x62 () Int)
(declare-fun x72 () Int)
(declare-fun x485 () Int)
(declare-fun x57 () Int)
(declare-fun x619 () Bool)
(declare-fun x470 () Bool)
(declare-fun x589 () Int)
(declare-fun x613 () Int)
(declare-fun x39 () Int)
(declare-fun x539 () Int)
(declare-fun x400 () Bool)
(declare-fun x155 () Int)
(declare-fun x545 () Int)
(declare-fun x428 () Bool)
(declare-fun x1 () Int)
(declare-fun x204 () Bool)
(declare-fun x16 () Bool)
(declare-fun x153 () Int)
(declare-fun x566 () Int)
(declare-fun x561 () Int)
(declare-fun x630 () Int)
(declare-fun x195 () Bool)
(declare-fun x166 () Int)
(declare-fun x5 () Int)
(declare-fun x516 () Int)
(declare-fun x96 () Bool)
(declare-fun x418 () Bool)
(declare-fun x188 () Int)
(declare-fun x409 () Bool)
(declare-fun x10 () Bool)
(declare-fun x611 () Int)
(declare-fun x508 () Int)
(declare-fun x162 () Int)
(declare-fun x171 () Bool)
(declare-fun x370 () Bool)
(declare-fun x290 () Bool)
(declare-fun x324 () Bool)
(declare-fun x473 () Int)
(declare-fun x3 () Int)
(declare-fun x420 () x25)
(declare-fun x323 () Int)
(declare-fun x213 () Int)
(declare-fun x597 () Bool)
(declare-fun x565 (x25) Int)
(declare-fun x340 () Bool)
(declare-fun x442 () Int)
(declare-fun x184 () Int)
(declare-fun x206 () Int)
(declare-fun x75 () Int)
(declare-fun x581 () Int)
(declare-fun x9 () Int)
(declare-fun x235 () Bool)
(declare-fun x135 () Int)
(declare-fun x44 () Int)
(declare-fun x300 () Int)
(declare-fun x281 () Int)
(declare-fun x423 () Int)
(declare-fun x359 () Int)
(declare-fun x356 () Int)
(declare-fun x518 () Int)
(declare-fun x221 () Bool)
(declare-fun x249 () Bool)
(declare-fun x11 () Bool)
(declare-fun x626 () Bool)
(declare-fun x434 () Bool)
(declare-fun x218 () Bool)
(declare-fun x347 () Int)
(declare-fun x164 () Bool)
(declare-fun x628 () Int)
(declare-fun x216 () Int)
(declare-fun x640 () Bool)
(declare-fun x232 () Int)
(declare-fun x313 () Bool)
(declare-fun x454 () Int)
(declare-fun x355 () Int)
(declare-fun x4 () Int)
(declare-fun x494 () Int)
(declare-fun x131 () Int)
(declare-fun x546 () Int)
(declare-fun x415 () Int)
(declare-fun x467 () Int)
(declare-fun x133 () Int)
(declare-fun x580 () Bool)
(declare-fun x299 () Int)
(declare-fun x68 () Int)
(declare-fun x190 () Int)
(declare-fun x663 () Bool)
(declare-fun x15 () Bool)
(declare-fun x554 () x25)
(declare-fun x328 () Bool)
(declare-fun x493 () Int)
(declare-fun x674 () Bool)
(declare-fun x59 () Bool)
(declare-fun x475 () Bool)
(declare-fun x407 () Int)
(declare-fun x20 () Bool)
(declare-fun x327 () Int)
(declare-fun x276 () Int)
(declare-fun x488 () Int)
(declare-fun x284 () Int)
(declare-fun x451 () Int)
(declare-fun x525 () Int)
(declare-fun x187 () Bool)
(declare-fun x515 () Int)
(declare-fun x474 () x25)
(declare-fun x168 () Int)
(declare-fun x109 () Int)
(declare-fun x74 () x25)
(declare-fun x372 () Int)
(declare-fun x147 () Bool)
(declare-fun x139 () Bool)
(declare-fun x134 () Int)
(declare-fun x498 () Bool)
(declare-fun x511 () Int)
(declare-fun x257 () Int)
(declare-fun x542 () Int)
(declare-fun x113 () Int)
(declare-fun x198 () Bool)
(declare-fun x461 (Int Int) Int)
(declare-fun x371 () Int)
(declare-fun x378 () Int)
(declare-fun x665 () Bool)
(declare-fun x85 (Int) x25)
(declare-fun x573 () Int)
(declare-fun x289 () Int)
(declare-fun x354 () Bool)
(declare-fun x388 () Int)
(declare-fun x212 () Int)
(declare-fun x238 () x25)
(declare-fun x293 () Int)
(declare-fun x148 () x25)
(declare-fun x136 () Bool)
(declare-fun x118 () Int)
(declare-fun x26 () Int)
(declare-fun x576 () Int)
(declare-fun x389 () Int)
(declare-fun x591 () Bool)
(declare-fun x548 () Bool)
(declare-fun x83 () Int)
(declare-fun x88 () Int)
(declare-fun x124 () Int)
(declare-fun x492 () Bool)
(declare-fun x176 (Int Int) Int)
(declare-fun x177 () Int)
(declare-fun x489 () Int)
(declare-fun x405 () Int)
(declare-fun x101 () Bool)
(declare-fun x662 () Bool)
(declare-fun x251 () Int)
(declare-fun x659 () Int)
(declare-fun x529 () Bool)
(declare-fun x510 () Int)
(declare-fun x234 () Bool)
(declare-fun x666 () Int)
(declare-fun x117 () Bool)
(declare-fun x426 (x25) Int)
(declare-fun x537 () Bool)
(declare-fun x67 () x25)
(declare-fun x208 () Int)
(declare-fun x142 () Int)
(declare-fun x413 () Bool)
(declare-fun x382 () Int)
(declare-fun x246 () Int)
(declare-fun x464 () Int)
(declare-fun x308 () Int)
(declare-fun x60 () Bool)
(declare-fun x440 () Int)
(declare-fun x483 () Int)
(declare-fun x368 () Int)
(declare-fun x61 () Bool)
(declare-fun x173 () Int)
(declare-fun x52 () x25)
(declare-fun x652 () Bool)
(declare-fun x183 () Int)
(declare-fun x304 () Int)
(declare-fun x277 () Bool)
(declare-fun x574 () Int)
(declare-fun x90 (x25) Int)
(declare-fun x469 () Int)
(declare-fun x536 () Bool)
(declare-fun x612 () Int)
(declare-fun x360 () Int)
(declare-fun x259 () Int)
(declare-fun x610 () Int)
(declare-fun x105 () Bool)
(declare-fun x285 () Bool)
(declare-fun x380 () Bool)
(declare-fun x583 () Int)
(declare-fun x143 () Int)
(declare-fun x563 () Int)
(declare-fun x641 () Bool)
(declare-fun x578 () Int)
(declare-fun x47 () x25)
(declare-fun x163 () Int)
(declare-fun x435 () Int)
(declare-fun x127 () Bool)
(declare-fun x43 () Bool)
(declare-fun x410 () Bool)
(declare-fun x151 () Int)
(declare-fun x528 () Bool)
(declare-fun x398 () x25)
(declare-fun x556 () Bool)
(declare-fun x416 () Bool)
(define-fun x584 ((x25 x25) (x63 Int)) x25 (ite ((_ is x500) x25) (x500 (x526 x25) (+ (x120 x25) x63)) (ite ((_ is x123) x25) (x123 (x321 x25) (x330 x25) (+ (x514 x25) x63)) (x376 (+ (x351 x25) x63)))))
(define-fun x391 ((x487 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x487) (<= 0 x487)) x487 (- x487 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x80 ((x487 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x487) (> 0 x487)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x487) x487))
(define-fun x258 ((x487 Int)) Int (ite (and (< x487 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x487 0)) x487 (ite (and (< x487 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x487 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x487 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x487) (< x487 0)) (+ x487 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x333 x487 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x654 ((x280 Int)) Bool (and (< x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x280)))
(define-fun x332 ((x280 Int)) Bool (and (= x280 (x176 x280 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x280 (x176 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280))))
(define-fun x14 ((x280 Int)) Bool (and (= 0 (x176 x280 0)) (= (x176 0 x280) 0)))
(define-fun x603 ((x280 Int)) Bool (= x280 (x176 x280 x280)))
(define-fun x387 ((x280 Int)) Bool (and (x14 x280) (x332 x280) (x603 x280)))
(define-fun x480 ((x280 Int) (x341 Int)) Bool (= (x176 x280 x341) (x176 x341 x280)))
(define-fun x265 ((x280 Int) (x341 Int)) Bool (and (=> (<= 0 x341) (<= (x176 x280 x341) x341)) (>= (x176 x280 x341) 0) (=> (<= 0 x280) (>= x280 (x176 x280 x341)))))
(define-fun x270 ((x280 Int) (x341 Int)) Bool (and (x480 x280 x341) (x265 x280 x341)))
(define-fun x263 ((x280 Int)) Bool (= (+ (x333 x280 32) (x176 x280 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x258 x280)))
(define-fun x477 ((x280 Int)) Bool (and (x263 x280) (x270 x280 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x632 ((x280 Int) (x341 Int)) Bool (and (>= (x333 x280 x341) 0) (< (x333 x280 x341) x341)))
(define-fun x541 ((x280 Int) (x341 Int)) Bool (=> (and (>= x280 0) (> x341 0)) (= (> x341 x280) (= x280 (x333 x280 x341)))))
(define-fun x50 ((x280 Int) (x341 Int)) Bool (=> (and (> x341 0) (and (>= x280 x341) (> (+ x341 x341) x280))) (= (- x280 x341) (x333 x280 x341))))
(define-fun x558 ((x280 Int)) Bool (= (x333 0 x280) 0))
(define-fun x256 ((x280 Int)) Bool (= 0 (x333 x280 1)))
(define-fun x445 ((x280 Int)) Bool (= 0 (x333 x280 x280)))
(define-fun x24 ((x280 Int)) Bool (and (x558 x280) (x256 x280) (x445 x280)))
(define-fun x307 ((x280 Int) (x341 Int)) Bool (= (x496 x280 x341) (x496 x341 x280)))
(define-fun x373 ((x280 Int) (x341 Int)) Bool (and (=> (and (< x280 0) (> x341 0)) (< (x496 x280 x341) 0)) (=> (and (> x341 0) (> x280 0)) (< 0 (x496 x280 x341))) (=> (and (> 0 x341) (> x280 0)) (> 0 (x496 x280 x341))) (=> (and (< x341 0) (< x280 0)) (> (x496 x280 x341) 0))))
(define-fun x596 ((x280 Int) (x341 Int)) Bool (=> (and (< 0 x341) (< 0 x280)) (= (= x341 (x100 (x258 (x496 x280 x341)) x280)) (< (x496 x280 x341) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x260 ((x280 Int) (x341 Int)) Bool (=> (and (not (= 0 x341)) (not (= 0 x280))) (and (= (x100 (x496 x280 x341) x341) x280) (= x341 (x100 (x496 x280 x341) x280)))))
(define-fun x13 ((x280 Int) (x341 Int)) Bool (=> (and (> x341 0) (< 0 x280)) (= (< (x100 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280) x341) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x496 x280 x341)))))
(define-fun x520 ((x280 Int) (x341 Int)) Bool (and (= (x258 (x496 x280 x341)) (x258 (x496 x280 (- x341 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x258 (x496 x280 x341)) (x258 (x496 (- x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) x341))) (= (x258 (x496 (- x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x341 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x258 (x496 x280 x341)))))
(define-fun x35 ((x280 Int) (x341 Int)) Bool (and (=> (and (and (<= x341 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x341)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x280) (> x280 0))) (= (<= (x496 x280 x341) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x100 57896044618658097711785492504343953926634992332820282019728792003956564819967 x341) x280))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280) (> x280 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x341 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x341 0))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x496 (- x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) x341)) (>= (x100 57896044618658097711785492504343953926634992332820282019728792003956564819968 x341) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x280)))) (=> (and (and (> x280 0) (<= x280 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x341) (> x341 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x496 x280 (- x341 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x100 57896044618658097711785492504343953926634992332820282019728792003956564819968 x280) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x341)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x341) (> x341 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x280 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x280 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x280) (x100 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x341))) (<= (x496 (- x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x341 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))
(define-fun x552 ((x280 Int) (x341 Int)) Bool (and (x13 x280 x341) (x35 x280 x341) (x373 x280 x341) (x596 x280 x341) (x260 x280 x341) (x520 x280 x341) (x307 x280 x341)))
(define-fun x623 ((x280 Int)) Bool (and (= (x496 x280 0) 0) (= (x496 0 x280) 0)))
(define-fun x326 ((x280 Int)) Bool (and (= (x496 1 x280) x280) (= (x496 x280 1) x280)))
(define-fun x424 ((x280 Int)) Bool (and (x623 x280) (x326 x280)))
(define-fun x624 ((x280 Int) (x341 Int)) Bool (=> (and (< 0 x341) (< 0 x280)) (and (<= 0 (x100 x280 x341)) (>= x280 (x100 x280 x341)))))
(define-fun x414 ((x280 Int) (x341 Int)) Bool (=> (and (and (>= x341 1) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x341)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x280) (<= 0 x280))) (and (>= (x100 x280 x341) 0) (< (x100 x280 x341) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x205 ((x280 Int) (x341 Int)) Bool (=> (and (< 1 x341) (< x341 x280)) (> x280 (x100 x280 x341))))
(define-fun x89 ((x280 Int) (x341 Int)) Bool (=> (and (> x341 0) (> x280 0)) (= (= (x100 x280 x341) 0) (> x341 x280))))
(define-fun x193 ((x280 Int) (x341 Int)) Bool (=> (and (> x280 0) (< 0 x341)) (and (> (x496 (x100 x280 x341) x341) (- x280 x341)) (<= (x496 (x100 x280 x341) x341) x280))))
(define-fun x557 ((x280 Int) (x341 Int)) Bool (and (x89 x280 x341) (x205 x280 x341) (x414 x280 x341) (x193 x280 x341) (x624 x280 x341)))
(define-fun x363 ((x280 Int)) Bool (= (x100 0 x280) 0))
(define-fun x637 ((x280 Int)) Bool (= x280 (x100 x280 1)))
(define-fun x651 ((x280 Int)) Bool (=> (not (= x280 0)) (= (x100 x280 x280) 1)))
(define-fun x635 ((x280 Int)) Bool (and (x637 x280) (x363 x280) (x651 x280)))
(define-fun x318 ((x280 Int)) Bool (= (x333 x280 1461501637330902918203684832716283019655932542976) (x176 x280 1461501637330902918203684832716283019655932542975)))
(define-fun x664 ((x280 Int)) Bool (and (x318 x280) (x270 x280 1461501637330902918203684832716283019655932542975)))
(define-fun x170 ((x31 Int)) Int (x337 x31))
(define-fun x165 ((x31 x25)) Int (ite (= x343 x31) x560 (x426 x31)))
(define-fun x394 ((x31 x25)) Int (ite (= x52 x31) x137 (x165 x31)))
(define-fun x334 ((x31 Int)) Int (ite (= x31 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x530 x31)))
(define-fun x538 ((x31 Int)) Int (ite (= x31 132) x297 (x334 x31)))
(define-fun x125 ((x31 Int)) Int (ite (= 0 x31) x473 (x595 x31)))
(define-fun x152 ((x31 Int)) Int (ite (= x31 128) x473 (x538 x31)))
(define-fun x167 ((x31 Int)) Int (ite (= 0 x31) x393 (x595 x31)))
(define-fun x319 ((x31 Int)) Int (ite (= x31 128) x393 (x538 x31)))
(define-fun x283 ((x31 Int)) Int (ite (= x31 0) x600 (x595 x31)))
(define-fun x403 ((x31 Int)) Int (ite (= x31 128) x600 (x538 x31)))
(define-fun x33 ((x31 Int)) Int (ite x617 (ite x27 (x538 x31) (x152 x31)) (ite x410 (ite x599 (x538 x31) (x319 x31)) (ite x662 (x538 x31) (x403 x31)))))
(define-fun x107 ((x31 Int)) Int (ite (= x68 x31) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x33 x31)))
(define-fun x217 ((x31 Int)) Int (ite (= x31 x175) x297 (x107 x31)))
(define-fun x535 ((x31 Int)) Int (ite (= x31 0) x649 (x602 x31)))
(define-fun x482 ((x31 Int)) Int (ite (= x31 x68) x649 (x217 x31)))
(define-fun x444 ((x31 Int)) Int (ite (= 0 x31) x561 (x602 x31)))
(define-fun x669 ((x31 Int)) Int (ite (= x68 x31) x561 (x217 x31)))
(define-fun x42 ((x31 Int)) Int (ite (= 0 x31) x181 (x602 x31)))
(define-fun x481 ((x31 Int)) Int (ite (= x68 x31) x181 (x217 x31)))
(define-fun x441 ((x31 Int)) Int (ite (= 128 x31) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x160 x31)))
(define-fun x503 ((x31 Int)) Int (ite (= x31 132) x297 (x441 x31)))
(define-fun x210 ((x31 Int)) Int (ite (= 128 x31) x585 (x503 x31)))
(define-fun x66 ((x31 Int)) Int (ite (= 128 x31) x188 (x503 x31)))
(define-fun x294 ((x31 Int)) Int (ite (= x31 128) x46 (x503 x31)))
(define-fun x504 ((x31 Int)) Int (ite x523 (ite x533 (x503 x31) (x210 x31)) (ite x556 (ite x460 (x503 x31) (x66 x31)) (ite x597 (x503 x31) (x294 x31)))))
(define-fun x244 ((x31 Int)) Int (ite (= x31 x57) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x504 x31)))
(define-fun x614 ((x31 Int)) Int (ite (= x31 x484) x297 (x244 x31)))
(define-fun x670 ((x31 Int)) Int (ite (= x31 0) x202 (x161 x31)))
(define-fun x91 ((x31 Int)) Int (ite (= x31 x57) x202 (x614 x31)))
(define-fun x463 ((x31 x25)) Int (ite (= x114 x31) x653 (x426 x31)))
(define-fun x45 ((x31 x25)) Int (ite (= x238 x31) x518 (x463 x31)))
(define-fun x223 ((x31 Int)) Int (ite (= x31 0) x144 (x161 x31)))
(define-fun x499 ((x31 Int)) Int (ite (= x31 x57) x144 (x614 x31)))
(define-fun x141 ((x31 Int)) Int (ite (= x31 0) x149 (x161 x31)))
(define-fun x579 ((x31 Int)) Int (ite (= x31 x57) x149 (x614 x31)))
(define-fun x21 ((x31 Int)) Int (ite x652 (ite x255 (x217 x31) (x482 x31)) (ite x128 (ite x536 (x217 x31) (x669 x31)) (ite x324 (x217 x31) (x481 x31)))))
(define-fun x532 ((x31 x25)) Int (ite (= x598 x31) x439 (x505 x31)))
(define-fun x266 ((x31 Int)) Int (ite (= 0 x31) x585 (x433 x31)))
(define-fun x366 ((x31 Int)) Int (ite (= 0 x31) x188 (x433 x31)))
(define-fun x150 ((x31 Int)) Int (ite (= 0 x31) x46 (x433 x31)))
(define-fun x239 ((x31 Int)) Int (ite x234 (ite x354 (x614 x31) (x91 x31)) (ite x101 (ite x195 (x614 x31) (x499 x31)) (ite x580 (x614 x31) (x579 x31)))))
(define-fun x568 ((x31 x25)) Int (ite (= x31 x197) x562 (x505 x31)))
(define-fun x157 ((x280 Int) (x341 Int) (x608 Int) (x453 Int)) Bool (=> (and (>= x341 0) (<= x341 x453) (>= x608 x280) (<= 0 x280)) (>= (x496 x608 x453) (x496 x280 x341))))
(define-fun x156 ((x280 Int) (x341 Int) (x608 Int) (x453 Int)) Bool (=> (= x280 x608) (= (x496 x280 (- x341 x453)) (- (x496 x280 x341) (x496 x608 x453)))))
(define-fun x507 ((x280 Int)) Bool (=> (and (not (= 1889567281 x280)) (not (= 234755713 x280)) (not (= 1989257563 x280)) (not (= 826074471 x280)) (not (= x280 1784838210)) (not (= 2514000705 x280)) (not (= x280 1461501637330902918203684832716283019655932542975)) (not (= 3524403367 x280)) (not (= x280 2757214935)) (not (= x280 961581905)) (not (= 2430363622 x280)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x280)) (not (= x280 50942633119752846454219349998365661925608737367104304655302372697894809501696)) (not (= x280 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x280 404098525)) (< 10000 x280) (not (= 2569101039 x280)) (not (= 157198259 x280)) (not (= 1952775229 x280)) (not (= x280 2835717307)) (not (= x280 1461501637330902918203684832716283019655932542976))) (not ((_ is x376) (x85 x280)))))
(assert (= x409 (=> (and (= x118 0) (= x305 x455)) x528)))
(assert (x654 x359))
(assert (x424 (- x417 x357)))
(assert (= (and x646 x104) x501))
(assert (x654 x106))
(assert (x552 x364 (- x417 x357)))
(assert (= (x376 1889567281) (x85 1889567281)))
(assert (and (x50 x390 32) (x632 x390 32) (=> (< 0 32) (= (+ (x333 x390 32) (* 32 (x100 x390 32))) x390)) (x541 x390 32)))
(assert (x654 x180))
(assert (x654 x349))
(assert (x507 x454))
(assert (x654 x430))
(assert (= (and x416 (not x247)) x290))
(assert (= x599 (or (and x104 (not x646)) (and x117 x28))))
(assert (x157 x357 x9 x417 x364))
(assert (x654 x306))
(assert (x552 x364 (- x417 x9)))
(assert (= x594 (x565 (x85 x594))))
(assert (x654 x286))
(assert (x654 x287))
(assert (= x528 (=> (and (= x118 x589) (= x305 x309)) x273)))
(assert (= x146 (=> (and (= x455 x389) (= x545 0)) x315)))
(assert (x654 x508))
(assert (x654 x305))
(assert (x654 x121))
(assert (x157 x458 x357 x9 x357))
(assert (x387 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (and (x50 x225 32) (x632 x225 32) (=> (< 0 32) (= (+ (x333 x225 32) (* 32 (x100 x225 32))) x225)) (x541 x225 32)))
(assert (x156 x417 x364 x199 x295))
(assert (x424 (- x9 x417)))
(assert (x654 x88))
(assert (x654 x133))
(assert (x654 x448))
(assert (= x527 (x565 (x85 x527))))
(assert (x654 x578))
(assert (= x361 (or x523 x471 x556)))
(assert (x552 x357 (- x9 x364)))
(assert (= x195 (or (and (not x663) x380) (and x226 x506))))
(assert (x507 x135))
(assert (x507 x274))
(assert (x654 x140))
(assert (= (x376 1989257563) (x85 1989257563)))
(assert (x654 x229))
(assert (x552 x295 (- x199 x364)))
(assert (x654 x406))
(assert (= (and (not x226) x506) x380))
(assert (x654 x563))
(assert (x654 x659))
(assert (x654 x18))
(assert (x654 x137))
(assert (x654 x189))
(assert (= 2569101039 (x565 (x376 2569101039))))
(assert (x654 x291))
(assert (= (or (and x136 (not x548)) (and x329 x370)) x597))
(assert (= x273 (=> (and (and (not (> x553 x301)) (= x512 x357) (= x132 x522) (>= x553 0) (not (or (> x309 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x309 32) (= true (<= x309 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x132 x121)) (not (< x364 x140)) (= x427 x121) (<= x553 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x496 x417 x364)) (>= x121 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x357) (= x442 (+ x611 x512)) (= (x80 (- x301 x553)) x458) (<= x357 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x417 x483)) (<= 0 x357) (= x53 (> x417 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x121 (x505 x197)) (= x611 x132) (< (x496 x458 x357) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x182 (x496 x417 x364)) (< (+ x132 x357) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x522 x427) x562) (not (= x583 0)) (= (x239 x57) x364) (<= 0 x357) (> x553 0) (not (= x357 0)) (<= x184 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x182 x301) (= (x123 (x85 x583) (x376 0) 0) x197) (not x53) (= x132 (x100 x111 x553)) (= x184 (x505 x197)) (>= x184 0) (= x212 x132) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121) (not (= 0 x589)) (= (x496 x458 x357) x111) (not (= 0 x132))) (and (and (not (< x331 1889567281)) (= x322 (x568 x420)) (> 2569101039 x331) (= x211 (x643 (x85 x297))) (= 1889567281 x331) (> x211 0) (<= 0 x322) (= x322 x479) (= x212 x75) (>= 1461501637330902918203684832716283019655932542975 x508) (<= x322 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x420 (x123 (x85 x508) (x376 0) 0)) (= x648 x508)) (and (= (>= x88 x207) x139) (= x479 x355) (= x88 x252) (= x355 x207)))) x139)))
(assert (= x135 (x565 (x85 x135))))
(assert (x424 (- x295 x357)))
(assert (x424 (- x9 x357)))
(assert (x552 x357 (- x458 x295)))
(assert (x654 x132))
(assert (x24 x225))
(assert (x654 x219))
(assert (= (x376 2569101039) (x85 2569101039)))
(assert (x654 x472))
(assert (= x569 (=> (and (= x296 x415) (= x517 x284)) x456)))
(assert (x654 x364))
(assert (x552 x357 (- x458 x199)))
(assert (= (and x242 x185) x49))
(assert (x507 x216))
(assert (= x297 (x565 (x85 x297))))
(assert (x654 x51))
(assert (x654 x64))
(assert (x156 x295 x199 x357 x458))
(assert (x654 x484))
(assert (=> (<= x454 10000) (= (x85 x454) (x376 x454))))
(assert (= x418 (and x43 x194)))
(assert (x654 x356))
(assert (x552 x9 (- x357 x458)))
(assert (x654 x342))
(assert (= x131 (x565 (x85 x131))))
(assert (x654 x419))
(assert (x654 x436))
(assert (= x437 (and x288 x361)))
(assert (x507 x563))
(assert (x654 x331))
(assert (= (and x178 x604) x506))
(assert (x156 x357 x458 x199 x295))
(assert (= (or x59 x533) x523))
(assert (x654 x570))
(assert (x654 x612))
(assert (x654 x633))
(assert (=> (>= 10000 x508) (= (x376 x508) (x85 x508))))
(assert (x654 x605))
(assert (= (x565 (x376 3524403367)) 3524403367))
(assert (= x425 (x565 (x85 x425))))
(assert (x424 (- x357 x364)))
(assert (= 1461501637330902918203684832716283019655932542975 (x565 (x376 1461501637330902918203684832716283019655932542975))))
(assert (x654 x293))
(assert (x654 x636))
(assert (x156 x295 x199 x364 x417))
(assert (= (x565 (x85 x563)) x563))
(assert (x654 x610))
(assert (x654 x345))
(assert (x654 x40))
(assert (x654 x232))
(assert (x424 (- x417 x9)))
(assert (x654 x339))
(assert (x654 x233))
(assert (= x340 (=> (and (= x408 x259) (= x38 x472)) x235)))
(assert (x654 x344))
(assert (x654 x502))
(assert (= (and (not x272) x82) x559))
(assert (= 234755713 (x565 (x376 234755713))))
(assert (= x104 (and (not x117) x28)))
(assert (= x235 (=> (and (and (> x553 0) (>= x357 0) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x472) (and (= (<= x472 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x472)))) (= (x100 x119 x553) x173) (= x173 x468) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x570) (= x439 (+ x468 x124)) (<= 0 x553) (= (> x295 115792089237316195423570985008687907853269984665640564039457584007913129639935) x470) (= (x80 (- x411 x553)) x9) (not (< x295 x483)) (= x119 (x496 x9 x357)) (= x253 x124) (not (> x553 x411)) (= x216 (x176 1461501637330902918203684832716283019655932542975 x628)) (= x357 x525) (<= 0 x253) (= (x123 (x85 x216) (x376 0) 0) x598) (>= x570 0) (= x647 (x176 1461501637330902918203684832716283019655932542975 x628)) (< (x496 x9 x357) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x103 x173) (= (+ x525 x103) x574) (not (= x408 0)) (<= x253 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x357 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x496 x295 x199)) (= x253 (x505 x598)) (< (+ x253 x173) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x411 x190) (= x190 (x496 x295 x199)) (<= 0 x357) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x553) (= (x21 x68) x199) (not x470) (not (= 0 x357)) (<= x357 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x505 x598) x570) (< (+ x173 x357) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x581 x173) (not (= x173 0)) (not (> x140 x199)) (not (= 0 x647))) (and (and (and (< (+ x243 x279) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x70 (x643 (x85 x563))) (>= 1461501637330902918203684832716283019655932542975 x547) (>= x243 0) (= 2835717307 x550) (<= x297 1461501637330902918203684832716283019655932542975) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x279 x243))) (= x114 (x123 (x85 x274) (x376 1) 0)) (<= x638 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x279 x367) (> x70 0) (= 1 x575) (not (> x279 x638)) (>= x257 0) (= (x123 (x85 x297) (x376 1) 0) x238) (= (x80 (- x638 x279)) x653) (>= x547 0) (= x47 (x123 (x85 x274) (x376 1) 0)) (>= x638 0) (= x638 (x426 x47)) (= x323 x166) (>= 1461501637330902918203684832716283019655932542975 x257) (not (> 826074471 x550)) (<= 0 x493) (= x543 x129) (<= x243 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1889567281 x550)) (not (> x279 x638)) (= x274 x547) (= x243 x457) (= (+ x457 x177) x518) (= x3 x252) (= 0 x543) (not (= x550 2514000705)) (= x323 x493) (>= 1461501637330902918203684832716283019655932542975 x493) (= x243 (x463 x320)) (= (x123 (x85 x297) (x376 1) 0) x320) (not (= 826074471 x550)) (= x279 x177)) (and (> x64 0) (not (> 826074471 x303)) (>= x454 0) (= x98 x440) (>= x657 0) (<= 0 x269) (= x583 x648) (<= x483 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x454 x438) x60) (<= x657 1461501637330902918203684832716283019655932542975) (= x369 (x643 (x85 x454))) (= 1784838210 x303) (= 0 x275) (>= 1461501637330902918203684832716283019655932542975 x454) (not (= x369 0)) (<= x605 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x269) (>= x483 0) (= x64 (x643 (x85 x297))) (= 128 x219) (>= x140 0) (>= 1461501637330902918203684832716283019655932542975 x502) (= x657 x2) (> 1461501637330902918203684832716283019655932542976 x454) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (= x440 x502) (= x488 x275) (<= 0 x502) (>= x605 0) (not (= 826074471 x303)) (< x303 1889567281) (= x605 1) (not (= x303 961581905)) (>= 1461501637330902918203684832716283019655932542975 x583))) (and (not (< x58 1889567281)) (= x655 x3) (>= x655 0) (= (x643 (x85 x297)) x671) (<= x655 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x581 x383) (> x671 0) (= x131 x648) (>= 1461501637330902918203684832716283019655932542975 x131) (< x58 2569101039) (= 1889567281 x58) (= x655 (x532 x587)) (= (x123 (x85 x131) (x376 0) 0) x587)))) (and (=> (and (= x272 (= x454 x563)) (not x60)) (and (=> (and x272 (and (= x186 (x80 (- x430 4))) (not (> 4 x430)) (= x6 1889567281) (not (< x6 826074471)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x631) (= x229 (x643 (x85 x563))) (= x430 36) (= x430 36) (= x413 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x186) (and (= (<= x186 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x186)))) (= x395 x297) (< 0 x229) (not (= x6 826074471)))) (and (=> (and (and (= x395 x524) (= (= x297 x395) x325)) (not x413)) (and (=> (not x325) x353) (=> (and (and (= 1 x422) (= (x45 x450) x188) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x188) (>= x188 0) (= x450 (x123 (x85 x395) (x376 1) 0)) (= 32 x542)) x325) x459))) (=> x413 x353))) (=> (and (not x272) (and (= (= x454 x297) x108) (and (and (= (or (and (< x192 32) (= true (<= x192 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x192 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x370) (= x633 (x643 (x85 x297))) (= x297 x511) (= 36 x622) (< 0 x633) (not (< x622 4)) (= (x80 (- x622 4)) x192) (> 2569101039 x396) (= x601 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x396 1889567281) (= 36 x622) (not (< x396 1889567281))) x108))) (and (=> (and (not x370) (and (= (= x297 x511) x548) (= x511 x62))) (and (=> (and x548 (and (= x549 1) (= x262 32) (>= x46 0) (= (x123 (x85 x511) (x376 0) 0) x74) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x46) (= (x505 x74) x46))) x400) (=> (not x548) x71))) (=> x370 x71))))) (=> (and x60 (and (= 36 x4) (not (< x350 826074471)) (= x297 x491) (= 1889567281 x350) (= x236 (x643 (x85 x438))) (not (> 4 x4)) (< 0 x236) (= 36 x4) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x423) (= (x80 (- x4 4)) x39) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x39)) (< x39 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x39)) x154) (not (= 826074471 x350)))) (and (=> (and (and (= x491 x381) (= (= x491 x297) x497)) (not x154)) (and (=> (not x497) x592) (=> (and x497 (and (= x485 32) (= 1 x436) (<= x585 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x585 (x278 x237)) (<= 0 x585) (= (x123 (x85 x491) (x376 1) 0) x237))) x412))) (=> x154 x592)))))))
(assert (= (or (and x220 x154) (and x20 (not x497))) x533))
(assert (x156 x295 x199 x417 x364))
(assert (x654 x92))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x565 (x376 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x654 x639))
(assert (= (and x224 x81) x416))
(assert (x654 x589))
(assert (x654 x479))
(assert (x424 (- x364 x295)))
(assert (= x94 (and x97 x402)))
(assert (x507 x527))
(assert (= (x565 (x85 x490)) x490))
(assert (x654 x555))
(assert (x654 x338))
(assert (= (and (not x60) x401) x82))
(assert (x654 x323))
(assert (x156 x9 x357 x417 x364))
(assert (= (x376 1952775229) (x85 1952775229)))
(assert (x654 x112))
(assert (= x164 (and x82 x272)))
(assert (x654 x149))
(assert (x552 x357 (- x9 x417)))
(assert (x552 x9 (- x357 x417)))
(assert (= x471 (or x138 x597)))
(assert (x552 x417 (- x364 x357)))
(assert (x552 x417 x364))
(assert (x24 1461501637330902918203684832716283019655932542976))
(assert (x507 x297))
(assert (x654 x295))
(assert (x654 x252))
(assert (= 2430363622 (x565 (x376 2430363622))))
(assert (x654 x407))
(assert (x552 x357 (- x9 x357)))
(assert (x654 x211))
(assert (x654 x207))
(assert (x654 x381))
(assert (x424 (- x458 x357)))
(assert (x424 (- x357 x417)))
(assert (x654 x301))
(assert (= x105 (=> (and (= x189 x472) (= x408 x521)) x235)))
(assert (x654 x495))
(assert (x654 x109))
(assert (x552 x364 (- x417 x295)))
(assert (x654 x600))
(assert (x654 x36))
(assert (x156 x417 x364 x9 x357))
(assert (x654 x390))
(assert (x654 x299))
(assert (x654 x488))
(assert (x507 x395))
(assert (= 1952775229 (x565 (x376 1952775229))))
(assert (= (x565 (x85 x511)) x511))
(assert (x424 (- x458 x199)))
(assert (= (x376 1461501637330902918203684832716283019655932542975) (x85 1461501637330902918203684832716283019655932542975)))
(assert (= x315 (=> (and (= x589 x545) (= x309 x389)) x273)))
(assert (x654 x616))
(assert (x424 (- x458 x295)))
(assert (=> (<= x515 10000) (= (x376 x515) (x85 x515))))
(assert (x654 x653))
(assert (x654 x9))
(assert (x507 x491))
(assert (= x618 (and x285 x221)))
(assert (x424 (- x357 x199)))
(assert (x654 x422))
(assert (x156 x199 x295 x357 x458))
(assert (x552 x458 x357))
(assert (x654 x39))
(assert (x424 (- x295 x458)))
(assert (x654 x544))
(assert (x654 x253))
(assert (= x372 (x565 (x85 x372))))
(assert (= (or (and x619 x200) (and (not x537) x147)) x324))
(assert (= (and x108 x559) x329))
(assert (x654 x553))
(assert (x156 x357 x9 x458 x357))
(assert (x654 x425))
(assert (x654 x573))
(assert (x654 x365))
(assert (x156 x357 x9 x357 x458))
(assert (x654 x362))
(assert (x654 x19))
(assert (x654 x155))
(assert (x654 x116))
(assert (x654 x583))
(assert (= (=> (and (= x142 x436) (= x431 x485)) x640) x412))
(assert (x156 x199 x295 x458 x357))
(assert (x507 x516))
(assert (x654 x284))
(assert (x552 x364 (- x417 x199)))
(assert (x654 x163))
(assert (x654 x439))
(assert (x654 x630))
(assert (x654 x30))
(assert (= x410 (or x501 x599)))
(assert (= x592 (=> (and (= 0 x436) (= x153 x485)) x412)))
(assert (x424 x364))
(assert (x507 x583))
(assert (= (and x316 x11) x540))
(assert (x654 x199))
(assert (x654 x656))
(assert (x654 x454))
(assert (= x20 (and x220 (not x154))))
(assert (= (x85 1784838210) (x376 1784838210)))
(assert (= (and (not x370) x329) x136))
(assert (= (=> (and (= 0 x299) (= x588 x489)) x17) x95))
(assert (= (=> (and (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x168) (= x590 x151) (= x26 x168) (= (x643 (x85 x297)) x317) (= (x123 (x376 0) (x376 0) 0) x667) (< x630 2569101039) (= x168 (x505 x667)) (< 0 x317) (not (> 1889567281 x630)) (= x578 0) (= x659 0) (>= x168 0) (= (= x590 0) x421) (= 1889567281 x630)) (and (and (and (> 2569101039 x73) (not (< x73 1889567281)) (> x546 0) (= x567 x349) (<= x555 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x516 x18) (= x555 (x505 x531)) (<= x516 1461501637330902918203684832716283019655932542975) (= x546 (x643 (x85 x297))) (>= x555 0) (= x348 x555) (= x73 1889567281) (= x531 (x123 (x85 x516) (x376 0) 0))) (and (and (= x159 (+ x435 x349)) (= x435 x348) (<= x357 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x643 (x85 x297)) x566) (not (= x494 157198259)) (= 404098525 x494) (not (= x494 234755713)) (< x494 826074471) (> x566 0) (> 1889567281 x494) (= x276 x357) (<= 0 x357)) (and (and (= x454 x406) (= x174 x276) (= x8 x563) (>= 1461501637330902918203684832716283019655932542975 x454) x475 (< 0 x327) (= x475 (<= x159 x174)) (= x69 234755713) (> 1461501637330902918203684832716283019655932542976 x454) (not (= x69 157198259)) (= (x643 (x85 x297)) x327) (> 1889567281 x69) (>= x454 0) (> 826074471 x69)) (and (and (> x534 0) (= x534 (x643 (x85 x297))) (= x5 x425) (not (= x661 2569101039)) (not (= x661 2757214935)) (= x406 x495) (<= x425 1461501637330902918203684832716283019655932542975) (= x267 x438) (not (= x661 2835717307)) (not (< x661 1889567281)) (not (> 2569101039 x661)) (<= 0 x425) (< x425 1461501637330902918203684832716283019655932542976) (= x661 3524403367) (= x621 (= x495 x8)) x621) (and (and (not (= x311 157198259)) (> 1889567281 x311) (= 404098525 x311) (> x293 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x357) (= (x643 (x85 x297)) x293) (= x231 x5) x336 (not (= x311 234755713)) (>= x357 0) (= x357 x292) (< x311 826074471) (= x336 (= x231 x267))) (and (and (= x388 0) (not (> 1889567281 x577)) (= x134 x292) (>= x483 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x483) (= x483 x362) (= (= 0 x134) x61) (= x577 2569101039) (> x1 0) (= x1 (x643 (x85 x297))) (not (> 2569101039 x577))) (and (and (and (and (>= x613 0) (>= 1461501637330902918203684832716283019655932542975 x628) (< x454 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x620) (= x98 x636) (<= x454 1461501637330902918203684832716283019655932542975) (>= x486 0) (>= x605 0) (<= x613 1461501637330902918203684832716283019655932542975) (= (x643 (x85 x297)) x55) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (not (= x230 961581905)) (= x648 x628) (<= x486 1461501637330902918203684832716283019655932542975) (<= 0 x483) (not (= x84 0)) (<= x605 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x230 1889567281) (= (= x454 x438) x672) (= x83 x488) (>= x140 0) (not (> 826074471 x230)) (= 0 x83) (not (= x230 826074471)) (= x605 1) (>= x620 0) (= x342 128) (<= x483 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x84 (x643 (x85 x454))) (= x613 x636) (<= 0 x454) (= x2 x620) (= 1784838210 x230) (< 0 x55)) (and (= x339 x360) (<= 0 x344) (= x346 (= x385 0)) (= x214 (x123 (x85 x274) (x376 1) 0)) (= x129 x310) (= (x123 (x85 x274) (x376 1) 0) x343) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x241) (= x137 (+ x300 x509)) (not (= x609 2514000705)) (<= 0 x241) (not (>= (+ x668 x241) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x446 x264) (= x300 x241) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x241 x668)) (= x660 (x643 (x85 x563))) x245 x201 (= x648 x338) (= x560 (x80 (- x576 x668))) (= x385 x465) (= x446 x668) (= 2835717307 x609) (not (> x668 x576)) (= x404 x274) (= 1 x143) (= x245 (and x665 x29)) (= 0 x310) (= (not (= x112 x338)) x77) (>= 1461501637330902918203684832716283019655932542975 x404) (= (x123 (x85 x297) (x376 1) 0) x52) (>= 1461501637330902918203684832716283019655932542975 x339) (not (> x668 x576)) (> x660 0) (= 0 x606) (= x668 x509) (= x166 x360) (= x201 (< x191 x264)) (<= 0 x339) (not (= x609 826074471)) (>= 1461501637330902918203684832716283019655932542975 x297) (>= x576 0) (not (> 826074471 x609)) (>= x404 0) (= x148 (x123 (x85 x297) (x376 1) 0)) (= x112 x297) x77 (= (x426 x214) x576) (= x367 x191) (>= 1461501637330902918203684832716283019655932542975 x344) (= (x165 x148) x241) (= (= x346 x215) x665) (<= x576 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x609 1889567281)))) (and (<= x140 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x48 x368) (not (= x304 1952775229)) (< 0 x228) (= x140 x465) (not (= x304 1889567281)) (= 2430363622 x304) (not (> 1889567281 x304)) (< x304 2569101039) (<= 0 x140) (= x228 (x643 (x85 x297))) (= x215 (= x48 0)) (= 0 x281) (not (= 1989257563 x304)))) (and (not (= x206 234755713)) (> x607 0) (<= 0 x357) (= 0 x289) (= x96 (= x462 0)) (= x29 (= x61 x96)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x357) (= (x643 (x85 x297)) x607) (not (= x206 157198259)) (= 404098525 x206) (< x206 826074471) (< x206 1889567281) (= x357 x368) (= x462 x362))))))))) (and (= x26 x227) (= x106 1000) (= 0 x419) (< x145 2569101039) (= (x505 x474) x345) (= x16 (= x227 1000)) (= x145 1889567281) x449 (> x32 0) (= x567 x345) (= (x643 (x85 x297)) x32) (<= x345 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x449 (or x16 x421)) (not (< x145 1889567281)) (>= x345 0) (= x474 (x123 (x376 0) (x376 0) 0))))) (and (= x209 (< 0 (x643 (x85 x297)))) (= x44 1000) (= x399 x469) (<= 0 x357) (<= 0 x233) (= x163 x213) (= (x90 (x85 x297)) x233) (= x130 x488) (not (= 157198259 x371)) x23 (<= x357 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 404098525 x371) (= x116 (x643 (x85 x297))) (<= x438 1461501637330902918203684832716283019655932542975) (<= 0 x610) (not (= x563 x438)) (< 0 x563) (= (x90 (x85 x563)) x378) (<= x610 1461501637330902918203684832716283019655932542975) (= x2 x18) x79 (< 0 x297) (= x232 x627) (= x79 (< 0 (x643 (x85 x438)))) (<= 0 x37) (not (= x297 x438)) (not (= x297 x563)) (>= x454 0) (= x122 x98) (<= x297 1461501637330902918203684832716283019655932542975) (= x658 x469) (= x298 x573) (>= x399 0) (<= x627 1461501637330902918203684832716283019655932542975) (>= x378 0) (<= x454 1461501637330902918203684832716283019655932542975) (<= 0 x627) (= x443 x158) (<= x563 1461501637330902918203684832716283019655932542975) (= x7 x673) (= x2 x610) (>= 1461501637330902918203684832716283019655932542975 x425) (= x616 0) (>= 1461501637330902918203684832716283019655932542975 x399) (= x162 x392) x209 (> x116 0) (= x23 (< 0 (x643 (x85 x563)))) (not (= 234755713 x371)) (<= 0 x246) (> x438 0) (= x357 x151) (= (x90 (x85 x438)) x246) (>= x648 0) (> 826074471 x371) (>= 1461501637330902918203684832716283019655932542975 x648) (>= x425 0) (= x37 x274) (>= 1461501637330902918203684832716283019655932542975 x37) (< x371 1889567281))) (and (=> (and (and (= 1889567281 x115) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x250) true) (> 32 x250)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x250)) x93) (= x490 x297) (= x335 36) (not (= 826074471 x115)) (= 36 x335) (> x377 0) (not (< x335 4)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x448) (= (x643 (x85 x438)) x377) (= (x80 (- x335 4)) x250) (not (< x115 826074471))) x672) (and (=> (and (not x93) (and (= x242 (= x297 x490)) (= x572 x490))) (and (=> (and (and (= 1 x299) (<= 0 x473) (= (x278 x67) x473) (= 32 x489) (= x67 (x123 (x85 x490) (x376 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x473)) x242) x17) (=> (not x242) x95))) (=> x93 x95))) (=> (and (not x672) (= (= x563 x454) x87)) (and (=> (and (not x87) (and (= x194 (= x297 x454)) (and (and (= (or (and (< x183 32) (= (<= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x183 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x582) (> x551 0) (= x551 (x643 (x85 x297))) (not (< x76 1889567281)) (= x183 (x80 (- x196 4))) (= x297 x594) (not (> 4 x196)) (< x76 2569101039) (= x180 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= 1889567281 x76) (= x196 36) (= x196 36)) x194))) (and (=> x582 x434) (=> (and (and (= x594 x384) (= (= x297 x594) x285)) (not x582)) (and (=> (not x285) x434) (=> (and x285 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x600) (= (x123 (x85 x594) (x376 0) 0) x398) (= x284 32) (= 1 x296) (<= 0 x600) (= (x505 x398) x600))) x569))))) (=> (and x87 (and (not (> 4 x356)) (= x372 x297) (= 1889567281 x179) (= (x80 (- x356 4)) x40) (= 36 x356) (= 36 x356) (= x117 (or (> x40 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x40) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x40))))) (< 0 x54) (not (= x179 826074471)) (not (< x179 826074471)) (= (x643 (x85 x563)) x54) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x51))) (and (=> (and (and (= x372 x365) (= x646 (= x372 x297))) (not x117)) (and (=> (not x646) x492) (=> (and (and (= (x123 (x85 x372) (x376 1) 0) x554) (= x393 (x394 x554)) (= 1 x251) (>= x393 0) (= x405 32) (<= x393 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x646) x313))) (=> x117 x492))))))) x41))
(assert (=> (>= 10000 x216) (= (x85 x216) (x376 x216))))
(assert (x507 x508))
(assert (x654 x491))
(assert (x654 x303))
(assert (x654 x609))
(assert (= 961581905 (x565 (x376 961581905))))
(assert (x157 x364 x417 x295 x199))
(assert (x157 x417 x364 x295 x199))
(assert (= (and x249 (not x513)) x571))
(assert (x654 x158))
(assert (x654 x469))
(assert (x654 x464))
(assert (= (or x255 x540) x652))
(assert (x424 (- x417 x199)))
(assert (x654 x438))
(assert (x654 x524))
(assert (= x28 (and x87 x519)))
(assert (x552 x9 (- x357 x364)))
(assert (x654 x202))
(assert (x654 x613))
(assert (x654 x228))
(assert (= (and x12 x428) x619))
(assert (x654 x668))
(assert (= x15 (and x437 (not x261))))
(assert (= (and x172 x15) x171))
(assert (= x460 (or (and (not x325) x10) (and x413 x164))))
(assert (x654 x304))
(assert (x654 x357))
(assert (x552 x417 (- x364 x295)))
(assert (= (x565 (x85 x274)) x274))
(assert (x654 x276))
(assert (x387 x390))
(assert (x424 x199))
(assert (and (x50 x390 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x632 x390 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x333 x390 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x100 x390 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x390)) (x541 x390 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x507 x131))
(assert (= (or (and x34 x218) (and x11 (not x316))) x255))
(assert (= (and (not x413) x164) x10))
(assert (x552 x458 (- x357 x295)))
(assert (x654 x638))
(assert (x157 x458 x357 x295 x199))
(assert (x654 x367))
(assert (=> (>= 10000 x491) (= (x85 x491) (x376 x491))))
(assert (x654 x282))
(assert (= x625 (and x513 x249)))
(assert (= (x565 (x376 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x654 x62))
(assert (x654 x566))
(assert (x654 x243))
(assert (x654 x8))
(assert (= 2514000705 (x565 (x376 2514000705))))
(assert (x654 x4))
(assert (x424 (- x364 x9)))
(assert (x654 x145))
(assert (x654 x404))
(assert (x654 x642))
(assert (x654 x275))
(assert (= x402 (and (not x328) x625)))
(assert (x156 x295 x199 x458 x357))
(assert (x157 x295 x199 x417 x364))
(assert (x654 x465))
(assert (x156 x364 x417 x9 x357))
(assert (x654 x3))
(assert (= 404098525 (x565 (x376 404098525))))
(assert (x156 x357 x9 x364 x417))
(assert (= x249 (and (not x604) x178)))
(assert (x654 x511))
(assert (x654 x83))
(assert (x654 x360))
(assert (=> (<= x274 10000) (= (x85 x274) (x376 x274))))
(assert (x654 x620))
(assert (x654 x473))
(assert (= x556 (or x460 x452)))
(assert (x157 x295 x199 x458 x357))
(assert (x507 x425))
(assert (x654 x308))
(assert (x654 x289))
(assert (x654 x384))
(assert (= (x376 157198259) (x85 157198259)))
(assert (x654 x572))
(assert (= x101 (or x195 x56)))
(assert (x156 x357 x9 x417 x364))
(assert (x654 x389))
(assert (x654 x188))
(assert (= (or (and x290 (not x203)) (and x247 x416)) x536))
(assert (x156 x9 x357 x357 x458))
(assert (= (and x136 x548) x138))
(assert (x654 x191))
(assert (x654 x408))
(assert (x157 x9 x357 x458 x357))
(assert (x654 x593))
(assert (= x224 (and (not x626) x429)))
(assert (= x187 (and x428 (not x12))))
(assert (x654 x75))
(assert (x654 x196))
(assert (= 2835717307 (x565 (x376 2835717307))))
(assert (x424 (- x357 x458)))
(assert (x156 x417 x364 x295 x199))
(assert (= (or x662 x618) x591))
(assert (x654 x493))
(assert (x654 x98))
(assert (x654 x259))
(assert (x552 x199 (- x295 x357)))
(assert (x552 x295 (- x199 x357)))
(assert (x654 x131))
(assert (and (x50 x628 1461501637330902918203684832716283019655932542976) (x632 x628 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x333 x628 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x100 x628 1461501637330902918203684832716283019655932542976))) x628)) (x541 x628 1461501637330902918203684832716283019655932542976)))
(assert (x654 x57))
(assert (x654 x671))
(assert (x654 x311))
(assert (x156 x364 x417 x357 x9))
(assert (=> (>= 10000 x583) (= (x376 x583) (x85 x583))))
(assert (x424 (- x199 x417)))
(assert (x654 x650))
(assert (x424 (- x295 x364)))
(assert (x654 x76))
(assert (x507 x594))
(assert (x654 x490))
(assert (= x204 (and x672 x110)))
(assert (x24 32))
(assert (= x354 (or (and x15 (not x172)) (and x261 x437))))
(assert (x654 x658))
(assert (x654 x144))
(assert (x424 (- x364 x357)))
(assert (x654 x510))
(assert (x156 x364 x417 x199 x295))
(assert (x654 x151))
(assert (x654 x350))
(assert (x654 x46))
(assert (x654 x483))
(assert (x654 x309))
(assert (x552 x417 (- x364 x199)))
(assert (= (=> (and (= x262 x431) (= x549 x142)) x640) x400))
(assert (x654 x371))
(assert (= (x85 3524403367) (x376 3524403367)))
(assert (x156 x458 x357 x199 x295))
(assert (x557 x111 x553))
(assert (x654 x516))
(assert (x552 x357 (- x9 x458)))
(assert (=> (<= x287 10000) (= (x376 x287) (x85 x287))))
(assert (= (x376 826074471) (x85 826074471)))
(assert (x654 x518))
(assert (x654 x622))
(assert (x654 x186))
(assert (x654 x55))
(assert (x654 x581))
(assert (x654 x135))
(assert (x424 x357))
(assert (x654 x206))
(assert (x654 x615))
(assert (x654 x183))
(assert (x424 (- x458 x9)))
(assert (= (and x559 (not x108)) x498))
(assert (x654 x297))
(assert (x654 x606))
(assert (x654 x462))
(assert (x654 x369))
(assert (x654 x281))
(assert (x424 (- x199 x357)))
(assert (x654 x352))
(assert (= (and x60 x401) x220))
(assert (x654 x392))
(assert (=> (>= 10000 x476) (= (x85 x476) (x376 x476))))
(assert (x424 (- x357 x9)))
(assert (= (and x204 (not x93)) x185))
(assert (x157 x199 x295 x417 x364))
(assert (x654 x377))
(assert (x424 (- x295 x417)))
(assert (x654 x393))
(assert (x157 x357 x9 x458 x357))
(assert (x654 x5))
(assert (= (or x641 x324) x302))
(assert (x157 x417 x364 x9 x357))
(assert (x654 x375))
(assert (x654 x576))
(assert (x654 x661))
(assert (x654 x590))
(assert (x157 x357 x458 x9 x357))
(assert (x654 x134))
(assert (x654 x585))
(assert (x654 x1))
(assert (x24 x390))
(assert (x654 x594))
(assert (x654 x660))
(assert (=> (>= 10000 x297) (= (x85 x297) (x376 x297))))
(assert (x654 x411))
(assert (=> (<= x527 10000) (= (x85 x527) (x376 x527))))
(assert (x654 x143))
(assert (x654 x230))
(assert (x654 x72))
(assert (=> (>= 10000 x131) (= (x376 x131) (x85 x131))))
(assert (x424 (- x364 x199)))
(assert (= (x85 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x376 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x552 x295 (- x199 x417)))
(assert (x654 x588))
(assert (x654 x451))
(assert (x654 x655))
(assert (x654 x564))
(assert (x156 x417 x364 x357 x9))
(assert (x654 x478))
(assert (x635 x553))
(assert (x654 x442))
(assert (= x271 (=> (and (= 0 x521) (= x374 x189)) x105)))
(assert (x552 x199 (- x295 x417)))
(assert (x654 x26))
(assert (= x508 (x565 (x85 x508))))
(assert (x654 x368))
(assert (x654 x382))
(assert (= (and x43 (not x194)) x529))
(assert (x654 x335))
(assert (= (=> (and (= x78 x455) (= 0 x593)) x634) x629))
(assert (x654 x269))
(assert (= 1889567281 (x565 (x376 1889567281))))
(assert (x654 x236))
(assert (= x640 (=> (and (>= x425 0) (>= 1461501637330902918203684832716283019655932542975 x425) (= (x504 128) x417) (not (= 0 x142)) (= (x391 (+ x102 128)) x57) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x431) (and (> 32 x431) (= (<= x431 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= x407 (x643 (x85 x425))) (= x102 (x176 115792089237316195423570985008687907853269984665640564039457584007913129639904 x390)) (= x390 (x391 (+ x431 31))) (= (x391 (+ x57 4)) x484) (= x544 (x391 (+ 32 x484))) (not (= 0 x407)) (< x425 1461501637330902918203684832716283019655932542976) (= (= x425 x438) x288) (= x352 (x80 (- x544 x57)))) (and (=> (and (not x288) (= x604 (= x563 x425))) (and (=> (and (not x604) (and (= (= x425 x297) x513) (and (and (not (< x306 1889567281)) (= x527 x297) (= 36 x240) (= x612 (x643 (x85 x297))) (= (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208)) (< x208 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x208)) x328) (= x352 x240) (not (< x240 4)) (= x208 (x80 (- x240 4))) (< x306 2569101039) (> x612 0) (= x36 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x306 1889567281)) x513))) (and (=> (and (not x328) (and (= x527 x639) (= x97 (= x527 x297)))) (and (=> (and x97 (and (= x78 32) (= x593 1) (= x149 (x505 x248)) (= (x123 (x85 x527) (x376 0) 0) x248) (<= x149 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x149))) x634) (=> (not x97) x629))) (=> x328 x629))) (=> (and x604 (and (= x282 x352) (= (x80 (- x282 4)) x155) (< 0 x65) (= 36 x282) (= (x643 (x85 x563)) x65) (not (= x286 826074471)) (= x72 50942633119752846454219349998365661925608737367104304655302372697894809501696) (not (< x282 4)) (not (< x286 826074471)) (= x286 1889567281) (= x226 (or (and (< x155 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x155))) (> x155 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x297 x287))) (and (=> (and (and (= x663 (= x287 x297)) (= x287 x314)) (not x226)) (and (=> (not x663) x146) (=> (and x663 (and (= x389 32) (= x545 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x144) (= (x123 (x85 x287) (x376 1) 0) x86) (= (x45 x86) x144) (<= 0 x144))) x315))) (=> x226 x146))))) (=> (and x288 (and (= x476 x297) (= x261 (or (> x268 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x268 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x268 32)))) (= 1889567281 x92) (not (= 826074471 x92)) (= 36 x656) (= x268 (x80 (- x656 4))) (= x656 x352) (< 0 x30) (= x113 50942633119752846454219349998365661925608737367104304655302372697894809501696) (not (< x92 826074471)) (not (< x656 4)) (= x30 (x643 (x85 x438))))) (and (=> (and (not x261) (and (= (= x476 x297) x172) (= x476 x308))) (and (=> (and x172 (and (= x118 1) (= 32 x305) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x202) (= (x123 (x85 x476) (x376 1) 0) x645) (<= 0 x202) (= (x278 x645) x202))) x528) (=> (not x172) x409))) (=> x261 x409)))))))
(assert (= x617 (or x27 x49)))
(assert (= x459 (=> (and (= x422 x142) (= x431 x542)) x640)))
(assert (x654 x216))
(assert (x654 x545))
(assert (= x198 (=> (and (= x374 x539) (= 0 x397)) x674)))
(assert (= x492 (=> (and (= x251 0) (= x588 x405)) x313)))
(assert (x156 x9 x357 x364 x417))
(assert (x552 x295 (- x199 x458)))
(assert (x157 x199 x295 x458 x357))
(assert (x552 x458 (- x357 x199)))
(assert (x156 x199 x295 x417 x364))
(assert (x24 x628))
(assert (x654 x542))
(assert (x654 x113))
(assert (x424 (- x9 x458)))
(assert (= x454 (x565 (x85 x454))))
(assert (= (=> (and (= x542 x153) (= 0 x422)) x459) x353))
(assert (x654 x567))
(assert (x654 x446))
(assert (x635 x111))
(assert (x156 x458 x357 x295 x199))
(assert (= (=> (and (= x38 x374) (= x259 0)) x340) x99))
(assert (x654 x494))
(assert (= (x85 2757214935) (x376 2757214935)))
(assert (= x674 (=> (and (= x408 x397) (= x539 x472)) x235)))
(assert (x654 x489))
(assert (x387 x628))
(assert (x552 x357 (- x458 x357)))
(assert (= x128 (or x536 x127)))
(assert (x654 x48))
(assert (= (x85 961581905) (x376 961581905)))
(assert (=> (<= x372 10000) (= (x376 x372) (x85 x372))))
(assert (= x434 (=> (and (= 0 x296) (= x588 x284)) x569)))
(assert (x654 x292))
(assert (= (x376 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x85 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x557 x119 x553))
(assert (x654 x561))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x565 (x376 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (=> (<= x516 10000) (= (x85 x516) (x376 x516))))
(assert (=> (<= x135 10000) (= (x85 x135) (x376 x135))))
(assert (x507 x476))
(assert (x424 x295))
(assert (= x386 (or x580 x94)))
(assert (x654 x251))
(assert (x654 x327))
(assert (x552 x417 (- x364 x9)))
(assert (x424 (- x199 x458)))
(assert (= x438 (x565 (x85 x438))))
(assert (x654 x647))
(assert (=> (<= x438 10000) (= (x376 x438) (x85 x438))))
(assert (= (or x302 x128 x652) x401))
(assert (x654 x227))
(assert (x664 x628))
(assert (x654 x54))
(assert (= x216 (x565 (x85 x216))))
(assert (x654 x162))
(assert (x654 x250))
(assert (x654 x122))
(assert (x654 x118))
(assert (x654 x314))
(assert (x654 x543))
(assert (x654 x657))
(assert (x156 x199 x295 x364 x417))
(assert (x552 x199 (- x295 x458)))
(assert (x654 x246))
(assert (x654 x527))
(assert (x654 x550))
(assert (x654 x607))
(assert (x654 x126))
(assert (= x662 (or (and x418 x582) (and (not x285) x221))))
(assert (= (and x519 (not x87)) x43))
(assert (x424 (- x417 x295)))
(assert (= (or x386 x101 x234) x277))
(assert (= 157198259 (x565 (x376 157198259))))
(assert (not x41))
(assert (x654 x443))
(assert (x654 x648))
(assert (x387 1461501637330902918203684832716283019655932542975))
(assert (x654 x517))
(assert (x654 x348))
(assert (x654 x399))
(assert (= x519 (and (not x672) x110)))
(assert (x654 x102))
(assert (x552 x199 (- x295 x364)))
(assert (x654 x44))
(assert (= (x565 (x376 826074471)) 826074471))
(assert (x654 x175))
(assert (x654 x241))
(assert (x552 x295 x199))
(assert (x654 x631))
(assert (= (and x203 x290) x127))
(assert (x654 x296))
(assert (x654 x486))
(assert (x654 x129))
(assert (= x641 (and x537 x147)))
(assert (x654 x231))
(assert (x654 x374))
(assert (= (x565 (x376 1784838210)) 1784838210))
(assert (x654 x440))
(assert (x552 x357 (- x458 x9)))
(assert (x387 x225))
(assert (x654 x169))
(assert (x654 x38))
(assert (x654 x58))
(assert (x654 x181))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x654 x84))
(assert (x654 x78))
(assert (= (x565 (x85 x583)) x583))
(assert (= (=> (and (= x405 x517) (= x415 x251)) x456) x313))
(assert (x654 x666))
(assert (= x516 (x565 (x85 x516))))
(assert (x156 x357 x458 x295 x199))
(assert (x654 x388))
(assert (x654 x184))
(assert (= 2757214935 (x565 (x376 2757214935))))
(assert (x654 x168))
(assert (x654 x192))
(assert (x654 x673))
(assert (= (x85 2514000705) (x376 2514000705)))
(assert (x654 x65))
(assert (x654 x476))
(assert (x507 x372))
(assert (= (=> (and (= x309 x78) (= x593 x589)) x273) x634))
(assert (x157 x364 x417 x9 x357))
(assert (x654 x179))
(assert (x157 x357 x458 x295 x199))
(assert (= (and (not x288) x361) x178))
(assert (x654 x347))
(assert (=> (<= x511 10000) (= (x376 x511) (x85 x511))))
(assert (=> (>= 10000 x642) (= (x85 x642) (x376 x642))))
(assert (x507 x490))
(assert (x424 x417))
(assert (= x56 (and x380 x663)))
(assert (= x221 (and x418 (not x582))))
(assert (x654 x240))
(assert (x654 x560))
(assert (x654 x298))
(assert (x654 x395))
(assert (= (x565 (x376 50942633119752846454219349998365661925608737367104304655302372697894809501696)) 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x654 x37))
(assert (=> (>= 10000 x490) (= (x85 x490) (x376 x490))))
(assert (x654 x142))
(assert (x635 x119))
(assert (x654 x173))
(assert (x654 x378))
(assert (= (or (and x204 x93) (and x185 (not x242))) x27))
(assert (x654 x279))
(assert (= x11 (and x34 (not x218))))
(assert (x654 x562))
(assert (x654 x423))
(assert (x654 x586))
(assert (x654 x485))
(assert (x424 (- x357 x295)))
(assert (x654 x257))
(assert (and (= 9 (x496 3 3)) (= 27 (x496 9 3)) (= 81 (x496 27 3)) (= (x496 9 9) 81)))
(assert (= (=> (and (= x489 x517) (= x299 x415)) x456) x17))
(assert (x654 x213))
(assert (x424 x458))
(assert (= x71 (=> (and (= x262 x153) (= 0 x549)) x400)))
(assert (x654 x397))
(assert (x654 x549))
(assert (= (or x591 x617 x410) x429))
(assert (x654 x322))
(assert (x654 x385))
(assert (= (x85 1461501637330902918203684832716283019655932542976) (x376 1461501637330902918203684832716283019655932542976)))
(assert (x654 x435))
(assert (x654 x415))
(assert (x477 x225))
(assert (x654 x372))
(assert (x507 x287))
(assert (= x580 (or (and (not x97) x402) (and x328 x625))))
(assert (x654 x274))
(assert (x156 x364 x417 x295 x199))
(assert (= x395 (x565 (x85 x395))))
(assert (x654 x577))
(assert (x654 x355))
(assert (x654 x264))
(assert (x654 x268))
(assert (x654 x225))
(assert (x654 x317))
(assert (x654 x6))
(assert (x654 x310))
(assert (x477 x390))
(assert (x654 x546))
(assert (x654 x405))
(assert (x654 x455))
(assert (x654 x383))
(assert (x654 x68))
(assert (x654 x458))
(assert (= (and x10 x325) x452))
(assert (=> (>= 10000 x395) (= (x85 x395) (x376 x395))))
(assert (x654 x208))
(assert (= x287 (x565 (x85 x287))))
(assert (x654 x130))
(assert (x654 x222))
(assert (= (and x497 x20) x59))
(assert (= (x376 234755713) (x85 234755713)))
(assert (x654 x521))
(assert (= (x376 2835717307) (x85 2835717307)))
(assert (= (x565 (x85 x491)) x491))
(assert (= (x376 2430363622) (x85 2430363622)))
(assert (x507 x438))
(assert (= (x85 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x376 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (=> (<= x425 10000) (= (x85 x425) (x376 x425))))
(assert (= x515 (x565 (x85 x515))))
(assert (x507 x511))
(assert (x424 (- x199 x364)))
(assert (x654 x69))
(assert (x654 x649))
(assert (x654 x396))
(assert (= (x565 (x85 x642)) x642))
(assert (x654 x32))
(assert (x654 x627))
(assert (= x34 (and x626 x429)))
(assert (= (=> (and (>= x425 0) (= x626 (= x438 x425)) (= x68 (x391 (+ x347 128))) (= x375 (x80 (- x109 x68))) (= x175 (x391 (+ 4 x68))) (= x109 (x391 (+ 32 x175))) (= (x391 (+ x517 31)) x225) (= (x176 115792089237316195423570985008687907853269984665640564039457584007913129639904 x225) x347) (= (x643 (x85 x425)) x615) (< x425 1461501637330902918203684832716283019655932542976) (not (= 0 x615)) (not (or (> x517 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x517) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x517) true)))) (not (= x415 0)) (= x295 (x33 128)) (<= x425 1461501637330902918203684832716283019655932542975)) (and (=> (and x626 (and (= 36 x126) (= x135 x297) (not (< x126 4)) (= x478 1889567281) (not (= x478 826074471)) (= x467 (x643 (x85 x438))) (not (> 826074471 x478)) (> x467 0) (= x218 (or (and (< x432 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x432))) (> x432 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x80 (- x126 4)) x432) (= x375 x126) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x666))) (and (=> (and (and (= x316 (= x297 x135)) (= x291 x135)) (not x218)) (and (=> (and (and (= 1 x259) (= x38 32) (<= x649 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x649 0) (= x649 (x278 x379)) (= (x123 (x85 x135) (x376 1) 0) x379)) x316) x340) (=> (not x316) x99))) (=> x218 x99))) (=> (and (not x626) (= (= x425 x563) x81)) (and (=> (and x81 (and (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x464) (< 0 x510) (not (> 4 x222)) (= (x80 (- x222 4)) x564) (= 1889567281 x169) (= x297 x515) (= x247 (or (> x564 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x564) true) (> 32 x564)))) (= x375 x222) (= x222 36) (not (= 826074471 x169)) (not (> 826074471 x169)) (= x510 (x643 (x85 x563))))) (and (=> x247 x198) (=> (and (and (= (= x515 x297) x203) (= x447 x515)) (not x247)) (and (=> (not x203) x198) (=> (and x203 (and (>= x561 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x561) (= x561 (x394 x644)) (= 1 x397) (= (x123 (x85 x515) (x376 1) 0) x644) (= x539 32))) x674))))) (=> (and (not x81) (and (and x12 (and (= x22 x375) (> x382 0) (= x586 (x80 (- x22 4))) (= x359 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x297 x642) (= x382 (x643 (x85 x297))) (= x22 36) (not (> 1889567281 x650)) (> 2569101039 x650) (= x650 1889567281) (= x200 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x586) (and (= true (<= x586 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x586 32)))) (not (> 4 x22)))) (= (= x297 x425) x12))) (and (=> (and (and (= x133 x642) (= (= x297 x642) x537)) (not x200)) (and (=> (and x537 (and (<= x181 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x521) (<= 0 x181) (= x358 (x123 (x85 x642) (x376 0) 0)) (= x181 (x505 x358)) (= x189 32))) x105) (=> (not x537) x271))) (=> x200 x271))))))) x456))
(assert (x654 x574))
(assert (x654 x70))
(assert (x654 x432))
(assert (x507 x515))
(assert (x654 x417))
(assert (= (and x224 (not x81)) x428))
(assert (= (x565 (x376 1989257563)) 1989257563))
(assert (x654 x2))
(assert (x552 x458 (- x357 x9)))
(assert (x552 x9 x357))
(assert (x654 x447))
(assert (x654 x267))
(assert (= x147 (and (not x200) x619)))
(assert (x654 x431))
(assert (x507 x642))
(assert (x654 x153))
(assert (= true x110))
(assert (x654 x575))
(assert (x654 x115))
(assert (x654 x22))
(assert (x654 x547))
(assert (x654 x262))
(assert (x156 x357 x458 x9 x357))
(assert (x654 x601))
(assert (x157 x9 x357 x417 x364))
(assert (x654 x467))
(assert (x654 x515))
(assert (x654 x551))
(assert (= (or x354 x171) x234))
(assert (x654 x628))
(assert (x654 x534))
(assert (x156 x357 x458 x357 x9))
(assert (x424 x9))
(assert (= (x565 (x85 x476)) x476))
(assert (x654 x7))
(assert (= (x376 404098525) (x85 404098525)))
(assert (=> (<= x594 10000) (= (x85 x594) (x376 x594))))
(assert (and (x50 x225 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x632 x225 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x333 x225 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x100 x225 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x225)) (x541 x225 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x654 x212))
(assert (x424 (- x9 x364)))
(assert (x654 x539))
(assert (x654 x73))
(assert (x654 x166))
(assert (=> (<= x563 10000) (= (x376 x563) (x85 x563))))
(assert (x156 x458 x357 x357 x9))
(check-sat)
(exit)
