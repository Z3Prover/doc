(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x354 0)) (((x582 (x253 Int)) (x526 (x55 x354) (x494 x354) (x486 Int)) (x524 (x551 x354) (x361 Int)))))
(declare-fun x538 () Bool)
(declare-fun x195 () Bool)
(declare-fun x231 () Bool)
(declare-fun x548 () Bool)
(declare-fun x112 () Int)
(declare-fun x338 () Bool)
(declare-fun x534 () Int)
(declare-fun x390 () Bool)
(declare-fun x83 () Bool)
(declare-fun x310 () Bool)
(declare-fun x409 () Bool)
(declare-fun x2 () Int)
(declare-fun x270 () Bool)
(declare-fun x320 () Bool)
(declare-fun x248 () Bool)
(declare-fun x246 () Int)
(declare-fun x466 () Int)
(declare-fun x58 () Bool)
(declare-fun x290 () Bool)
(declare-fun x497 () Bool)
(declare-fun x46 () Bool)
(declare-fun x445 () Bool)
(declare-fun x458 () Int)
(declare-fun x104 () Int)
(declare-fun x564 () Bool)
(declare-fun x132 () Bool)
(declare-fun x155 () Bool)
(declare-fun x32 () Bool)
(declare-fun x122 () Bool)
(declare-fun x378 () Bool)
(declare-fun x579 () Bool)
(declare-fun x553 () Bool)
(declare-fun x326 () Bool)
(declare-fun x12 () Bool)
(declare-fun x17 () Int)
(declare-fun x84 () Int)
(declare-fun x540 () Int)
(declare-fun x550 () Int)
(declare-fun x255 () Int)
(declare-fun x218 () Bool)
(declare-fun x557 () Bool)
(declare-fun x426 () Bool)
(declare-fun x76 () Bool)
(declare-fun x625 () Bool)
(declare-fun x446 () Int)
(declare-fun x159 () Int)
(declare-fun x22 () Bool)
(declare-fun x565 () Bool)
(declare-fun x39 () Bool)
(declare-fun x343 () Bool)
(declare-fun x252 () Int)
(declare-fun x477 () Bool)
(declare-fun x107 () Int)
(declare-fun x465 () Int)
(declare-fun x539 () Int)
(declare-fun x3 () Bool)
(declare-fun x162 () Int)
(declare-fun x37 () Int)
(declare-fun x142 () Int)
(declare-fun x184 () Bool)
(declare-fun x537 () Bool)
(declare-fun x62 () Bool)
(declare-fun x296 () Bool)
(declare-fun x451 () Int)
(declare-fun x475 () Int)
(declare-fun x414 () Bool)
(declare-fun x116 () Int)
(declare-fun x43 () Int)
(declare-fun x145 () Int)
(declare-fun x203 () Bool)
(declare-fun x85 () Bool)
(declare-fun x455 () Bool)
(declare-fun x269 () Bool)
(declare-fun x523 () Int)
(declare-fun x314 () Bool)
(declare-fun x335 () Int)
(declare-fun x257 () Int)
(declare-fun x351 () Int)
(declare-fun x214 () Bool)
(declare-fun x219 () Int)
(declare-fun x171 () Int)
(declare-fun x165 () Bool)
(declare-fun x135 () Int)
(declare-fun x333 () Bool)
(declare-fun x423 () Bool)
(declare-fun x136 () Int)
(declare-fun x127 () Int)
(declare-fun x294 () Bool)
(declare-fun x279 () Bool)
(declare-fun x274 () Bool)
(declare-fun x26 () Bool)
(declare-fun x444 () Bool)
(declare-fun x330 () Bool)
(declare-fun x186 () Int)
(declare-fun x331 () Int)
(declare-fun x311 () Int)
(declare-fun x514 () Bool)
(declare-fun x621 () Int)
(declare-fun x467 () Int)
(declare-fun x559 () Bool)
(declare-fun x432 () Bool)
(declare-fun x259 () Bool)
(declare-fun x190 () Bool)
(declare-fun x129 () Bool)
(declare-fun x442 () Bool)
(declare-fun x312 () Bool)
(declare-fun x619 () Int)
(declare-fun x106 () Bool)
(declare-fun x82 () Bool)
(declare-fun x72 () Int)
(declare-fun x487 () Bool)
(declare-fun x124 () Bool)
(declare-fun x566 () Int)
(declare-fun x496 () Int)
(declare-fun x601 () Bool)
(declare-fun x370 () Bool)
(declare-fun x52 () Bool)
(declare-fun x315 () Bool)
(declare-fun x332 () Bool)
(declare-fun x157 () Bool)
(declare-fun x286 () Int)
(declare-fun x500 () Bool)
(declare-fun x209 () Int)
(declare-fun x101 () Int)
(declare-fun x608 () Bool)
(declare-fun x277 () Bool)
(declare-fun x350 () Int)
(declare-fun x63 () Bool)
(declare-fun x624 () Bool)
(declare-fun x349 () Bool)
(declare-fun x143 () Bool)
(declare-fun x244 () Bool)
(declare-fun x470 () Bool)
(declare-fun x341 () Bool)
(declare-fun x30 () Int)
(declare-fun x139 () Int)
(declare-fun x212 () Int)
(declare-fun x13 () Bool)
(declare-fun x193 () Int)
(declare-fun x198 () Int)
(declare-fun x596 () Int)
(declare-fun x289 () Int)
(declare-fun x282 () Int)
(declare-fun x505 () Int)
(declare-fun x495 () Bool)
(declare-fun x304 () Bool)
(declare-fun x450 () Int)
(declare-fun x362 () Bool)
(declare-fun x344 () Int)
(declare-fun x606 (Int Int) Int)
(declare-fun x77 () Int)
(declare-fun x70 () Bool)
(declare-fun x400 () Int)
(declare-fun x295 () Int)
(declare-fun x220 () Bool)
(declare-fun x476 () Int)
(declare-fun x368 () Bool)
(declare-fun x169 () Bool)
(declare-fun x492 () Int)
(declare-fun x177 () Bool)
(declare-fun x609 () Int)
(declare-fun x41 () Bool)
(declare-fun x567 () Int)
(declare-fun x473 () Bool)
(declare-fun x586 () Bool)
(declare-fun x56 () Int)
(declare-fun x211 () Bool)
(declare-fun x617 () Int)
(declare-fun x509 () Int)
(declare-fun x372 () Bool)
(declare-fun x168 () Int)
(declare-fun x35 () Bool)
(declare-fun x380 () Bool)
(declare-fun x630 () Bool)
(declare-fun x185 () Int)
(declare-fun x146 () Bool)
(declare-fun x525 () Bool)
(declare-fun x263 () Bool)
(declare-fun x498 () Bool)
(declare-fun x443 () Int)
(declare-fun x434 () Bool)
(declare-fun x547 () Int)
(declare-fun x271 () Bool)
(declare-fun x541 () Bool)
(declare-fun x161 () Bool)
(declare-fun x1 () Bool)
(declare-fun x147 () Int)
(declare-fun x597 () Bool)
(declare-fun x266 () Bool)
(declare-fun x627 () Bool)
(declare-fun x33 () Bool)
(declare-fun x532 () Int)
(declare-fun x189 () Bool)
(declare-fun x398 () Bool)
(declare-fun x367 () Bool)
(declare-fun x339 () Int)
(declare-fun x399 () Int)
(declare-fun x65 () Int)
(declare-fun x121 () Int)
(declare-fun x301 () Bool)
(declare-fun x419 () Int)
(declare-fun x528 () Bool)
(declare-fun x167 () Bool)
(declare-fun x460 () Int)
(declare-fun x560 () Bool)
(declare-fun x128 () Int)
(declare-fun x71 () Bool)
(declare-fun x520 (Int Int) Int)
(declare-fun x51 () Int)
(declare-fun x247 () Bool)
(declare-fun x404 () Bool)
(declare-fun x264 () Bool)
(declare-fun x254 () Bool)
(declare-fun x81 () Bool)
(declare-fun x435 () Int)
(declare-fun x517 () Bool)
(declare-fun x69 () Int)
(declare-fun x137 () Bool)
(declare-fun x327 () Bool)
(declare-fun x90 () Int)
(declare-fun x374 () Int)
(declare-fun x599 () Bool)
(declare-fun x407 () Bool)
(declare-fun x258 () Bool)
(declare-fun x412 () Int)
(declare-fun x618 () Bool)
(declare-fun x420 () Bool)
(declare-fun x587 () Int)
(declare-fun x114 () Int)
(declare-fun x589 () Bool)
(declare-fun x573 () Int)
(declare-fun x393 () Bool)
(declare-fun x558 () Bool)
(declare-fun x417 () Bool)
(declare-fun x529 () Bool)
(declare-fun x141 () Bool)
(declare-fun x53 () Bool)
(declare-fun x376 () Bool)
(declare-fun x485 () Int)
(declare-fun x130 () Bool)
(declare-fun x208 () Bool)
(declare-fun x383 () Bool)
(declare-fun x521 () Int)
(declare-fun x546 (x354) Int)
(declare-fun x622 () Int)
(declare-fun x325 () Bool)
(declare-fun x110 () Bool)
(declare-fun x535 () Int)
(declare-fun x28 () Bool)
(declare-fun x317 () Int)
(declare-fun x499 () Int)
(declare-fun x364 () Int)
(declare-fun x226 () Bool)
(declare-fun x578 () Bool)
(declare-fun x626 () Bool)
(declare-fun x243 () Bool)
(declare-fun x425 () Bool)
(declare-fun x545 () Bool)
(declare-fun x123 () Int)
(declare-fun x293 () Int)
(declare-fun x221 () Bool)
(declare-fun x60 (x354) Int)
(declare-fun x98 () Int)
(declare-fun x316 () Bool)
(declare-fun x45 () Int)
(declare-fun x14 () Bool)
(declare-fun x249 () Bool)
(declare-fun x403 () Bool)
(declare-fun x392 () Bool)
(declare-fun x176 () Bool)
(declare-fun x278 () Bool)
(declare-fun x468 () Int)
(declare-fun x554 () Bool)
(declare-fun x92 () Bool)
(declare-fun x353 () Int)
(declare-fun x594 () Int)
(declare-fun x173 () Bool)
(declare-fun x213 () Bool)
(declare-fun x138 () Int)
(declare-fun x334 () Int)
(declare-fun x323 () Bool)
(declare-fun x34 (Int Int) Int)
(declare-fun x9 () Bool)
(declare-fun x201 () Int)
(declare-fun x593 () Int)
(declare-fun x47 () Bool)
(declare-fun x629 () Bool)
(declare-fun x64 () Int)
(declare-fun x433 () Int)
(declare-fun x358 () Bool)
(declare-fun x482 () Bool)
(declare-fun x242 () Bool)
(declare-fun x19 () Bool)
(declare-fun x489 () Bool)
(declare-fun x379 () Int)
(declare-fun x491 () Bool)
(declare-fun x439 () Int)
(declare-fun x571 () Bool)
(declare-fun x287 () Int)
(declare-fun x300 () Bool)
(declare-fun x42 () Bool)
(declare-fun x196 () Int)
(declare-fun x623 () Bool)
(declare-fun x490 () Bool)
(declare-fun x215 () Bool)
(declare-fun x480 () Bool)
(declare-fun x531 () Bool)
(declare-fun x607 () Int)
(declare-fun x21 () Bool)
(declare-fun x590 () Int)
(declare-fun x225 () Bool)
(declare-fun x328 () Bool)
(declare-fun x199 () Bool)
(declare-fun x396 () Int)
(declare-fun x298 () Bool)
(declare-fun x125 () Bool)
(declare-fun x131 () Bool)
(declare-fun x297 () Int)
(declare-fun x109 () Bool)
(declare-fun x437 () Bool)
(declare-fun x134 () Bool)
(declare-fun x504 () Bool)
(declare-fun x549 () Bool)
(declare-fun x449 () Bool)
(declare-fun x194 () Bool)
(declare-fun x429 () Bool)
(declare-fun x57 () Int)
(declare-fun x235 () Bool)
(declare-fun x472 () Bool)
(declare-fun x530 () Bool)
(declare-fun x156 () Int)
(declare-fun x276 () Bool)
(declare-fun x598 () Bool)
(declare-fun x462 () Bool)
(declare-fun x628 () Bool)
(declare-fun x170 () Bool)
(declare-fun x299 () Bool)
(declare-fun x133 () Bool)
(declare-fun x605 () Bool)
(declare-fun x229 () Bool)
(declare-fun x223 () Bool)
(declare-fun x23 () Int)
(declare-fun x206 () Int)
(declare-fun x585 () Bool)
(declare-fun x431 () Bool)
(declare-fun x207 () Int)
(declare-fun x241 () Bool)
(declare-fun x86 () Int)
(declare-fun x200 () Bool)
(declare-fun x11 () Int)
(declare-fun x454 () Bool)
(declare-fun x6 () Bool)
(declare-fun x581 () Int)
(declare-fun x99 () Bool)
(declare-fun x324 () Bool)
(declare-fun x424 (Int) Int)
(declare-fun x10 () Int)
(declare-fun x459 () Int)
(declare-fun x580 () Bool)
(declare-fun x256 () Int)
(declare-fun x352 (Int) x354)
(declare-fun x556 () Bool)
(declare-fun x483 () Bool)
(declare-fun x61 () Int)
(declare-fun x382 () Int)
(declare-fun x308 () Bool)
(declare-fun x40 () Int)
(declare-fun x153 () Bool)
(declare-fun x415 () Bool)
(declare-fun x322 () Bool)
(declare-fun x357 () Int)
(declare-fun x275 () Bool)
(declare-fun x302 () Bool)
(declare-fun x108 () Bool)
(declare-fun x67 () Int)
(declare-fun x118 () Int)
(declare-fun x237 () Bool)
(declare-fun x616 () Bool)
(declare-fun x563 () Bool)
(declare-fun x232 () Int)
(declare-fun x373 () Int)
(declare-fun x183 () Bool)
(declare-fun x592 () Bool)
(declare-fun x613 () Bool)
(declare-fun x126 () Bool)
(declare-fun x222 () Int)
(declare-fun x307 () Int)
(declare-fun x457 () Bool)
(declare-fun x397 () Bool)
(declare-fun x230 () Bool)
(declare-fun x234 () Int)
(declare-fun x572 () Bool)
(declare-fun x453 () Bool)
(declare-fun x461 () Bool)
(declare-fun x484 () Int)
(declare-fun x511 () Bool)
(declare-fun x440 () Int)
(declare-fun x73 () Bool)
(declare-fun x7 () Int)
(declare-fun x205 () Bool)
(declare-fun x272 () Int)
(declare-fun x329 () Bool)
(declare-fun x544 () Bool)
(declare-fun x38 () Int)
(declare-fun x210 () Bool)
(declare-fun x471 () Int)
(declare-fun x387 () Bool)
(declare-fun x268 () Bool)
(declare-fun x29 () Bool)
(declare-fun x583 () Bool)
(declare-fun x197 () Bool)
(declare-fun x533 () Int)
(declare-fun x273 () Bool)
(declare-fun x89 () Bool)
(declare-fun x267 () Bool)
(declare-fun x245 () Bool)
(declare-fun x216 () Int)
(declare-fun x154 () Int)
(declare-fun x191 () Int)
(declare-fun x202 () Bool)
(declare-fun x44 () Bool)
(declare-fun x366 () Bool)
(declare-fun x119 () Bool)
(declare-fun x543 () Bool)
(declare-fun x97 () Bool)
(declare-fun x502 () Bool)
(declare-fun x611 () Int)
(declare-fun x166 () Bool)
(declare-fun x24 () Bool)
(declare-fun x120 () Bool)
(declare-fun x416 () Bool)
(declare-fun x447 () Bool)
(declare-fun x515 () Int)
(declare-fun x74 () Int)
(declare-fun x355 () Bool)
(declare-fun x519 () Int)
(declare-fun x250 () Int)
(declare-fun x102 () Int)
(declare-fun x584 () Bool)
(declare-fun x306 () Bool)
(declare-fun x615 () Bool)
(declare-fun x49 () Bool)
(declare-fun x284 () Int)
(declare-fun x140 () Bool)
(declare-fun x313 () Int)
(declare-fun x68 () Int)
(declare-fun x337 () Bool)
(declare-fun x474 () Bool)
(declare-fun x158 () Bool)
(declare-fun x418 () Int)
(declare-fun x336 () Bool)
(declare-fun x113 () Bool)
(declare-fun x18 () Bool)
(declare-fun x179 () Int)
(declare-fun x552 () Bool)
(declare-fun x305 () Bool)
(declare-fun x503 () Int)
(declare-fun x595 () Bool)
(declare-fun x402 () Bool)
(declare-fun x182 () Int)
(declare-fun x149 () Int)
(declare-fun x100 () Bool)
(declare-fun x96 () Int)
(declare-fun x506 () Int)
(declare-fun x66 () Bool)
(declare-fun x428 () Bool)
(declare-fun x93 () Bool)
(declare-fun x54 () Bool)
(declare-fun x602 () Int)
(declare-fun x430 () Bool)
(declare-fun x570 () Int)
(declare-fun x181 () Bool)
(declare-fun x115 () Bool)
(declare-fun x88 () Bool)
(declare-fun x285 () Bool)
(declare-fun x604 () Bool)
(declare-fun x239 () Int)
(declare-fun x522 () Int)
(declare-fun x527 () Int)
(declare-fun x542 () Bool)
(declare-fun x36 () Bool)
(declare-fun x371 () Bool)
(declare-fun x8 () Int)
(declare-fun x348 () Bool)
(declare-fun x614 () Bool)
(declare-fun x377 () Int)
(declare-fun x501 () Bool)
(declare-fun x388 () Int)
(declare-fun x562 (x354) Int)
(declare-fun x345 () Bool)
(declare-fun x265 () Bool)
(declare-fun x575 () Bool)
(declare-fun x172 () Bool)
(declare-fun x408 (Int Int) Int)
(declare-fun x591 () Bool)
(declare-fun x144 () Bool)
(declare-fun x620 () Bool)
(declare-fun x150 () Bool)
(declare-fun x401 () Bool)
(declare-fun x369 () Bool)
(declare-fun x478 () Bool)
(declare-fun x386 () Bool)
(declare-fun x260 () Bool)
(declare-fun x363 () Bool)
(declare-fun x360 () Bool)
(declare-fun x319 () Int)
(declare-fun x31 () Bool)
(declare-fun x94 () Int)
(declare-fun x103 () Int)
(declare-fun x391 () Bool)
(declare-fun x464 () Bool)
(declare-fun x321 () Bool)
(declare-fun x456 () Int)
(declare-fun x152 () Int)
(declare-fun x577 () Int)
(declare-fun x507 () Bool)
(declare-fun x436 () Bool)
(declare-fun x441 () Bool)
(declare-fun x236 () Int)
(declare-fun x410 () Int)
(declare-fun x508 () Bool)
(declare-fun x356 () Bool)
(declare-fun x513 () Bool)
(declare-fun x163 () Int)
(declare-fun x227 () Bool)
(declare-fun x217 () Bool)
(declare-fun x574 () Bool)
(declare-fun x187 () Bool)
(declare-fun x25 () Bool)
(declare-fun x411 () Bool)
(declare-fun x612 () Int)
(declare-fun x516 () Int)
(declare-fun x148 () Bool)
(declare-fun x438 () Bool)
(declare-fun x251 () Bool)
(declare-fun x359 () Bool)
(declare-fun x95 () Int)
(declare-fun x192 () Bool)
(declare-fun x375 () Int)
(declare-fun x561 () Bool)
(declare-fun x481 () Bool)
(declare-fun x479 () Bool)
(declare-fun x228 () Bool)
(declare-fun x164 () Int)
(declare-fun x512 () Int)
(declare-fun x347 () Int)
(declare-fun x603 () Bool)
(declare-fun x389 () Bool)
(declare-fun x261 () Int)
(declare-fun x588 () Int)
(declare-fun x292 () Bool)
(declare-fun x79 () Int)
(declare-fun x469 () Bool)
(declare-fun x180 () Int)
(declare-fun x518 () Bool)
(declare-fun x318 () Bool)
(declare-fun x178 () Bool)
(declare-fun x394 () Int)
(declare-fun x16 (Int Int) Int)
(declare-fun x20 () Int)
(declare-fun x406 () Int)
(declare-fun x365 () Int)
(declare-fun x105 () Bool)
(declare-fun x569 () Bool)
(declare-fun x303 () Bool)
(declare-fun x4 () Bool)
(declare-fun x15 () Bool)
(declare-fun x536 () Bool)
(declare-fun x151 () Bool)
(declare-fun x493 () Int)
(declare-fun x224 () Int)
(declare-fun x413 () Bool)
(declare-fun x111 () Bool)
(declare-fun x422 () Bool)
(declare-fun x283 () Bool)
(declare-fun x281 () Bool)
(declare-fun x452 () Bool)
(declare-fun x463 () Int)
(declare-fun x48 () Bool)
(declare-fun x309 () Bool)
(define-fun x174 ((x354 x354) (x5 Int)) x354 (ite ((_ is x526) x354) (x526 (x55 x354) (x494 x354) (+ x5 (x486 x354))) (ite ((_ is x524) x354) (x524 (x551 x354) (+ (x361 x354) x5)) (x582 (+ (x253 x354) x5)))))
(define-fun x233 ((x342 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x342) (<= 0 x342)) x342 (- x342 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x385 ((x342 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x342) (> 0 x342)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x342) x342))
(define-fun x405 ((x342 Int)) Int (ite (and (< x342 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x342 0)) x342 (ite (and (< x342 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x342 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x342 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x342) (< x342 0)) (+ x342 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x408 x342 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x75 ((x175 Int)) Bool (and (< x175 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x175)))
(define-fun x395 ((x175 Int) (x291 Int)) Bool (= (x34 x291 x175) (x34 x175 x291)))
(define-fun x27 ((x175 Int) (x291 Int)) Bool (and (=> (and (< x291 0) (< 0 x175)) (< (x34 x175 x291) 0)) (=> (and (> 0 x291) (> 0 x175)) (> (x34 x175 x291) 0)) (=> (and (< x175 0) (> x291 0)) (> 0 (x34 x175 x291))) (=> (and (< 0 x291) (> x175 0)) (< 0 (x34 x175 x291)))))
(define-fun x78 ((x175 Int) (x291 Int)) Bool (=> (and (< 0 x175) (> x291 0)) (= (= x291 (x16 (x405 (x34 x175 x291)) x175)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x34 x175 x291)))))
(define-fun x555 ((x175 Int) (x291 Int)) Bool (=> (and (not (= x175 0)) (not (= x291 0))) (and (= (x16 (x34 x175 x291) x291) x175) (= x291 (x16 (x34 x175 x291) x175)))))
(define-fun x59 ((x175 Int) (x291 Int)) Bool (=> (and (< 0 x291) (< 0 x175)) (= (< (x16 115792089237316195423570985008687907853269984665640564039457584007913129639935 x175) x291) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x34 x175 x291)))))
(define-fun x117 ((x175 Int) (x291 Int)) Bool (and (= (x405 (x34 x175 x291)) (x405 (x34 x175 (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x405 (x34 x175 x291)) (x405 (x34 (- x175 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x405 (x34 (- x175 115792089237316195423570985008687907853269984665640564039457584007913129639936) x291)) (x405 (x34 x175 x291)))))
(define-fun x346 ((x175 Int) (x291 Int)) Bool (and (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x291) (<= x291 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (<= x175 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x175))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x291) (x16 57896044618658097711785492504343953926634992332820282019728792003956564819968 x175)) (>= (x34 x175 (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (<= x175 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x175)) (and (< 0 x291) (<= x291 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= x175 (x16 57896044618658097711785492504343953926634992332820282019728792003956564819967 x291)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x34 x175 x291)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x175) (> x175 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x291) (> x291 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x16 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x291)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x175)) (<= (x34 (- x175 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x291) (> x291 0)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x175) (> x175 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x34 (- x175 115792089237316195423570985008687907853269984665640564039457584007913129639936) x291) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x175) (x16 57896044618658097711785492504343953926634992332820282019728792003956564819968 x291))))))
(define-fun x488 ((x175 Int) (x291 Int)) Bool (and (x395 x175 x291) (x59 x175 x291) (x555 x175 x291) (x346 x175 x291) (x117 x175 x291) (x78 x175 x291) (x27 x175 x291)))
(define-fun x280 ((x175 Int)) Bool (and (= (x34 0 x175) 0) (= (x34 x175 0) 0)))
(define-fun x427 ((x175 Int)) Bool (and (= (x34 x175 1) x175) (= x175 (x34 1 x175))))
(define-fun x576 ((x175 Int)) Bool (and (x427 x175) (x280 x175)))
(define-fun x204 ((x175 Int) (x291 Int)) Bool (=> (and (> x175 0) (> x291 0)) (and (>= (x16 x175 x291) 0) (<= (x16 x175 x291) x175))))
(define-fun x91 ((x175 Int) (x291 Int)) Bool (=> (and (and (<= 1 x291) (< x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x175) (>= x175 0))) (and (< (x16 x175 x291) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x16 x175 x291) 0))))
(define-fun x448 ((x175 Int) (x291 Int)) Bool (=> (and (< x291 x175) (< 1 x291)) (> x175 (x16 x175 x291))))
(define-fun x80 ((x175 Int) (x291 Int)) Bool (=> (and (< 0 x175) (> x291 0)) (= (< x175 x291) (= 0 (x16 x175 x291)))))
(define-fun x421 ((x175 Int)) Bool (= (x16 0 x175) 0))
(define-fun x87 ((x175 Int)) Bool (= x175 (x16 x175 1)))
(define-fun x188 ((x175 Int)) Bool (=> (not (= 0 x175)) (= 1 (x16 x175 x175))))
(define-fun x240 ((x175 Int)) Bool (and (x87 x175) (x421 x175) (x188 x175)))
(define-fun x50 ((x175 Int) (x291 Int) (x160 Int) (x238 Int)) Bool (=> (and (<= 0 x291) (>= x160 x175) (>= x238 x291) (>= x175 0)) (<= (x34 x175 x291) (x34 x160 x238))))
(define-fun x288 ((x175 Int) (x291 Int) (x160 Int) (x238 Int)) Bool (=> (= x175 x160) (= (x34 x175 (- x291 x238)) (- (x34 x175 x291) (x34 x160 x238)))))
(define-fun x262 ((x175 Int)) Bool (=> (and (not (= x175 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 149895259 x175)) (not (= 2685885107 x175)) (> x175 10000) (not (= x175 1461501637330902918203684832716283019655932542975)) (not (= x175 1245370514))) (not ((_ is x582) (x352 x175)))))
(assert (= (and x71 x598) x242))
(assert (x75 x7))
(assert (x288 x590 x418 x287 x20))
(assert (x576 (- x485 x20)))
(assert (and (x117 10 x45) (x346 10 x45) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x45 10) (* x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x45)) (= (* 10 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x45) (x34 10 x45)) (x78 10 x45) (x59 10 x45) (x555 10 x45)))
(assert (x75 x121))
(assert (x75 x118))
(assert (and (x117 3 x287) (x346 3 x287) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x287 3) (* x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x287)) (= (* 3 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x287) (x34 3 x287)) (x78 3 x287) (x59 3 x287) (x555 3 x287)))
(assert (and (x117 500 x20) (x346 500 x20) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x20 500) (* x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x20)) (= (* 500 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x20) (x34 500 x20)) (x78 500 x20) (x59 500 x20) (x555 500 x20)))
(assert (and (x117 500 x56) (x346 500 x56) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x56 500) (* x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x56)) (= (* 500 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x56) (x34 500 x56)) (x78 500 x56) (x59 500 x56) (x555 500 x56)))
(assert (x576 2))
(assert (= (and (not x235) x453) x559))
(assert (and (=> (and (> 3 0) (> x418 0)) (and (< (- x418 3) (* 3 (x16 x418 3))) (>= x418 (* (x16 x418 3) 3)))) (x448 x418 3) (x80 x418 3) (x204 x418 3) (x91 x418 3)))
(assert (= (and (not x625) x278) x415))
(assert (x288 x287 x20 x590 x418))
(assert (x75 x282))
(assert (x288 x20 x287 x56 x485))
(assert (x75 x612))
(assert (x75 x164))
(assert (= (and x249 x363) x436))
(assert (x576 (- x20 x590)))
(assert (= x330 (and (not x264) x299)))
(assert (x488 x485 (- x56 x287)))
(assert (= x202 (and x623 (not x285))))
(assert (x75 x440))
(assert (x75 x196))
(assert (x488 x590 (- x418 x485)))
(assert (x75 x154))
(assert (x576 (- x287 x418)))
(assert (x75 x460))
(assert (= (and x299 x264) x507))
(assert (and (x117 10 x485) (x346 10 x485) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x485 10) (* x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x485)) (= (* 10 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x485) (x34 10 x485)) (x78 10 x485) (x59 10 x485) (x555 10 x485)))
(assert (x75 x145))
(assert (= x574 (and x1 x301)))
(assert (and (= (x34 9 3) 27) (= (x34 3 3) 9) (= (x34 27 3) 81) (= (x34 9 9) 81)))
(assert (x576 x45))
(assert (and (=> (and (> 400 0) (> x485 0)) (and (< (- x485 400) (* 400 (x16 x485 400))) (>= x485 (* (x16 x485 400) 400)))) (x448 x485 400) (x80 x485 400) (x204 x485 400) (x91 x485 400)))
(assert (x288 x287 x20 x485 x56))
(assert (x75 x379))
(assert (x75 x77))
(assert (= x249 (and (not x292) x324)))
(assert (= x473 (and x71 (not x598))))
(assert (x75 x297))
(assert (= x502 (=> (and (and x362 (= x445 false) (= 400 x282)) (and (= x209 x86) (= x416 x318) (= (x16 x485 400) x86))) x230)))
(assert (x50 x590 x418 x20 x287))
(assert (x75 x147))
(assert (= (and x500 x369) x283))
(assert (= (x546 (x582 2685885107)) 2685885107))
(assert (= x299 (and (not x414) x187)))
(assert (and (x117 2 x496) (x346 2 x496) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x496 2) (* x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x496)) (= (* 2 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x496) (x34 2 x496)) (x78 2 x496) (x59 2 x496) (x555 2 x496)))
(assert (x75 x607))
(assert (= (and x169 (not x211)) x203))
(assert (and (x117 400 x485) (x346 400 x485) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x485 400) (* x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x485)) (= (* 400 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x485) (x34 400 x485)) (x78 400 x485) (x59 400 x485) (x555 400 x485)))
(assert (= (and x131 x383) x245))
(assert (x75 x465))
(assert (x75 x56))
(assert (x576 x287))
(assert (= (and x489 (not x429)) x356))
(assert (x75 x475))
(assert (x288 x56 x485 x590 x418))
(assert (= (=> (and (and x366 (= false x398) (= 400 x68)) (and (= x343 x166) (= (x16 x418 400) x10) (= x10 x567))) x380) x585))
(assert (= (and x429 x489) x44))
(assert (= x301 (and x259 (not x9))))
(assert (and (x117 10 x56) (x346 10 x56) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x56 10) (* x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x56)) (= (* 10 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x56) (x34 10 x56)) (x78 10 x56) (x59 10 x56) (x555 10 x56)))
(assert (= x487 (and (not x39) x225)))
(assert (= x161 (and x109 (not x479))))
(assert (x75 x156))
(assert (x75 x499))
(assert (x75 x534))
(assert (= (and x133 x303) x430))
(assert (= (=> (and (and (= 500 x79) (= x220 false) x144) (and (= (x16 x590 500) x118) (= x567 x118) (= x343 x166))) x380) x302))
(assert (x75 x212))
(assert (and (=> (and (> 10 0) (> x56 0)) (and (< (- x56 10) (* 10 (x16 x56 10))) (>= x56 (* (x16 x56 10) 10)))) (x448 x56 10) (x80 x56 10) (x204 x56 10) (x91 x56 10)))
(assert (= (and x113 x425) x368))
(assert (x75 x522))
(assert (= (=> (and (and (= x577 (x16 x485 2)) (= x318 x416) (= x209 x577)) (and (= 2 x581) (= false x434) x251)) x230) x62))
(assert (x75 x112))
(assert (= (and x541 x464) x228))
(assert (x288 x590 x418 x56 x485))
(assert (= (and x599 x270) x54))
(assert (x576 (- x590 x287)))
(assert (= (and x620 x106) x549))
(assert (x75 x313))
(assert (x488 x56 (- x485 x418)))
(assert (x576 500))
(assert (and (x117 500 x485) (x346 500 x485) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x485 500) (* x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x485)) (= (* 500 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x485) (x34 500 x485)) (x78 500 x485) (x59 500 x485) (x555 500 x485)))
(assert (and (=> (and (> 2 0) (> x485 0)) (and (< (- x485 2) (* 2 (x16 x485 2))) (>= x485 (* (x16 x485 2) 2)))) (x448 x485 2) (x204 x485 2) (x91 x485 2) (= (* 2 (x16 x485 2)) (- x485 (x606 1 x485))) (x80 x485 2)))
(assert (and (x117 3 x505) (x346 3 x505) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x505 3) (* x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x505)) (= (* 3 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x505) (x34 3 x505)) (x78 3 x505) (x59 3 x505) (x555 3 x505)))
(assert (= x628 (and x120 x132)))
(assert (= (and x267 (not x265)) x464))
(assert (and (x117 400 x20) (x346 400 x20) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x20 400) (* x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x20)) (= (* 400 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x20) (x34 400 x20)) (x78 400 x20) (x59 400 x20) (x555 400 x20)))
(assert (x488 x485 (- x56 x590)))
(assert (and (x117 500 x287) (x346 500 x287) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x287 500) (* x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x287)) (= (* 500 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x287) (x34 500 x287)) (x78 500 x287) (x59 500 x287) (x555 500 x287)))
(assert (x75 x399))
(assert (= (and x126 (not x141)) x601))
(assert (x50 x418 x590 x485 x56))
(assert (= (and x278 x625) x478))
(assert (and (=> (and (> 2 0) (> x418 0)) (and (< (- x418 2) (* 2 (x16 x418 2))) (>= x418 (* (x16 x418 2) 2)))) (x448 x418 2) (x204 x418 2) (x91 x418 2) (= (* 2 (x16 x418 2)) (- x418 (x606 1 x418))) (x80 x418 2)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x546 (x582 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x75 x443))
(assert (= (and x221 x192) x170))
(assert (and (=> (and (> 400 0) (> x590 0)) (and (< (- x590 400) (* 400 (x16 x590 400))) (>= x590 (* (x16 x590 400) 400)))) (x448 x590 400) (x80 x590 400) (x204 x590 400) (x91 x590 400)))
(assert (= (and x39 x225) x603))
(assert (= (=> (and (and (= x179 (x16 x485 10)) (= x209 x179) (= x416 x318)) (and (= false x422) (= x201 10) x130)) x230) x360))
(assert (= (and (not x303) x133) x148))
(assert (and (=> (and (> 400 0) (> x20 0)) (and (< (- x20 400) (* 400 (x16 x20 400))) (>= x20 (* (x16 x20 400) 400)))) (x448 x20 400) (x80 x20 400) (x204 x20 400) (x91 x20 400)))
(assert (and (x117 400 x56) (x346 400 x56) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x56 400) (* x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x56)) (= (* 400 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x56) (x34 400 x56)) (x78 400 x56) (x59 400 x56) (x555 400 x56)))
(assert (x576 (- x590 x20)))
(assert (= x620 (and x474 (not x200))))
(assert (x288 x56 x485 x287 x20))
(assert (= x380 (=> (and (and x166 (= x567 x147)) (and (= x56 x112) (= x318 (and x279 x178)) (not (= 149895259 x335)) (= (x34 x485 x56) x566) (= x279 (not (= x45 0))) (= x45 x139) (= x178 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x566)) (= x484 x147) (= x142 x485) (= x335 2685885107) (= (= 0 x56) x165) (= x295 (x60 (x352 x570))) (= x615 (= x485 0)) (= x312 (or x615 x165)) (not (= x335 1245370514)) (> x295 0))) (and (=> (and (and (= x443 0) x312 (= x416 x318) (= x209 x443)) x312) x230) (=> (and (not x312) (and (= x454 (= x45 x56)) x321 (= (not x312) x321))) (and (=> (and x454 (and (= x485 x209) (= x318 x416) x454)) x230) (=> (and (not x454) (and (= (= x485 x45) x389) x214 (= (not x454) x214))) (and (=> (and (and (= (* 2 x45) x347) (= (= x56 x347) x479) x589 (= (not x389) x589)) (not x389)) (and (=> (and (not x479) (and x29 (= (= x163 x485) x338) (= x29 (not x479)) (= x163 (* x45 2)))) (and (=> (and (and (= (= x102 x45) x251) (= (not x338) x124) x124 (= x102 (* 2 x56))) (not x338)) (and (=> (and (not x251) (and (= x294 (= x45 x396)) (= x528 (not x251)) (= x396 (* 2 x485)) x528)) (and (=> x294 x437) (=> (and (not x294) (and (= x420 (not x294)) (= (= x51 x56) x618) x420 (= (* x45 3) x51))) (and (=> (and x618 (and (= (x405 (* x485 3)) x107) (= x209 x107) x618 (= x318 x416))) x230) (=> (and (not x618) (and x572 (= x608 (= x412 x485)) (= x572 (not x618)) (= (* 3 x45) x412))) (and (=> (and (and (= (= x23 x45) x177) (= x417 (not x608)) x417 (= x23 (* 3 x56))) (not x608)) (and (=> x177 x310) (=> (and (and (= x426 (not x177)) x426 (= (= x622 x45) x500) (= x622 (* x485 3))) (not x177)) (and (=> (and (and (= x450 (* x45 10)) (= x190 (not x500)) x190 (= x120 (= x450 x56))) (not x500)) (and (=> (and (and (= (= x485 x365) x235) (= (not x120) x575) x575 (= x365 (* x45 10))) (not x120)) (and (=> (and (and (= x435 (x405 (* x56 10))) (= x416 x318) (= x435 x209) x235) x235) x230) (=> (and (and (= x595 (not x235)) (= (* 10 x56) x224) (= (= x224 x45) x130) x595) (not x235)) (and (=> x130 x360) (=> (and (and (= (not x130) x231) x231 (= (* 10 x485) x57) (= x9 (= x57 x45))) (not x130)) (and (=> (and (and x332 (= (= x56 x532) x1) (= x332 (not x9)) (= (* x45 500) x532)) (not x9)) (and (=> (and (not x1) (and (= (not x1) x304) (= (= x373 x485) x276) (= (* x45 500) x373) x304)) (and (=> (and (and (= x2 x209) (= (x405 (* x56 500)) x2) (= x416 x318) x276) x276) x230) (=> (and (and x402 (= (not x276) x402) (= x194 (= x67 x45)) (= x67 (* x56 500))) (not x276)) (and (=> x194 x244) (=> (and (and (= x15 (not x194)) (= (= x45 x90) x461) x15 (= (* 500 x485) x90)) (not x194)) (and (=> (and (and (= x325 (not x461)) x325 (= (= x56 x463) x625) (= (* 400 x45) x463)) (not x461)) (and (=> (and (and (= x416 x318) x625 (= x209 x476) (= x476 (x405 (* 400 x485)))) x625) x230) (=> (and (and x616 (= x523 (* x45 400)) (= x616 (not x625)) (= (= x485 x523) x24)) (not x625)) (and (=> (and (and (= x416 x318) (= x209 x612) x24 (= (x405 (* 400 x56)) x612)) x24) x230) (=> (and (not x24) (and x320 (= (not x24) x320) (= x351 (* x56 400)) (= x362 (= x45 x351)))) (and (=> (and (not x362) (and (= (= x573 x45) x543) (= x573 (* x485 400)) x32 (= (not x362) x32))) (and (=> (and (not x543) (and (= false x626) x345 (= (not x543) x345) (= x209 x519) (= 0 x519) (= x416 x626))) x230) (=> x543 x470))) (=> x362 x502))))))) (=> x461 x614))))))) (=> (and x1 (and (= x318 x416) x1 (= (x405 (* 500 x485)) x459) (= x209 x459))) x230))) (=> x9 x119))))))) (=> (and x120 (and x120 (= x98 (x405 (* x485 10))) (= x209 x98) (= x318 x416))) x230))) (=> x500 x390))))) (=> (and x608 (and (= x607 x209) (= x607 (x405 (* x56 3))) x608 (= x416 x318))) x230))))))) (=> x251 x62))) (=> (and x338 (and (= x516 (x405 (* 2 x56))) (= x516 x209) x338 (= x318 x416))) x230))) (=> (and x479 (and x479 (= x256 (x405 (* x485 2))) (= x318 x416) (= x209 x256))) x230))) (=> (and x389 (and (= x318 x416) (= x209 x56) x389)) x230)))))))))
(assert (= (and x202 x591) x341))
(assert (= x181 (and x48 (not x93))))
(assert (x240 x56))
(assert (= (and x473 (not x401)) x623))
(assert (= (and x454 x281) x367))
(assert (= x571 (and x545 x543)))
(assert (x288 x418 x590 x287 x20))
(assert (and (x117 3 x485) (x346 3 x485) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x485 3) (* x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x485)) (= (* 3 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x485) (x34 3 x485)) (x78 3 x485) (x59 3 x485) (x555 3 x485)))
(assert (and (=> (and (> 10 0) (> x590 0)) (and (< (- x590 10) (* 10 (x16 x590 10))) (>= x590 (* (x16 x590 10) 10)))) (x448 x590 10) (x80 x590 10) (x204 x590 10) (x91 x590 10)))
(assert (x488 x590 (- x418 x287)))
(assert (and (=> (and (> 3 0) (> x56 0)) (and (< (- x56 3) (* 3 (x16 x56 3))) (>= x56 (* (x16 x56 3) 3)))) (x448 x56 3) (x80 x56 3) (x204 x56 3) (x91 x56 3)))
(assert (= (=> (and (and x303 (= 500 x216) (= false x564)) (and (= x166 x343) (= x506 x567) (= x506 (x16 x418 500)))) x380) x511))
(assert (and (x117 400 x418) (x346 400 x418) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x418 400) (* x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x418)) (= (* 400 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x418) (x34 400 x418)) (x78 400 x418) (x59 400 x418) (x555 400 x418)))
(assert (and (x117 400 x496) (x346 400 x496) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x496 400) (* x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x496)) (= (* 400 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x496) (x34 400 x496)) (x78 400 x496) (x59 400 x496) (x555 400 x496)))
(assert (and (=> (and (> 500 0) (> x485 0)) (and (< (- x485 500) (* 500 (x16 x485 500))) (>= x485 (* (x16 x485 500) 500)))) (x448 x485 500) (x80 x485 500) (x204 x485 500) (x91 x485 500)))
(assert (= (x546 (x582 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x75 x617))
(assert (= x83 (and x97 (not x276))))
(assert (= (and x447 x601) x12))
(assert (x288 x590 x418 x485 x56))
(assert (x288 x590 x418 x20 x287))
(assert (x75 x590))
(assert (= (and x623 x285) x501))
(assert (= x259 (and x559 (not x130))))
(assert (= (x352 149895259) (x582 149895259)))
(assert (= (and (not x254) x181) x517))
(assert (x75 x344))
(assert (x75 x84))
(assert (and (x117 2 x418) (x346 2 x418) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x418 2) (* x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x418)) (= (* 2 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x418) (x34 2 x418)) (x78 2 x418) (x59 2 x418) (x555 2 x418)))
(assert (= x140 (and x227 x629)))
(assert (and (=> (and (> 500 0) (> x418 0)) (and (< (- x418 500) (* 500 (x16 x418 500))) (>= x418 (* (x16 x418 500) 500)))) (x448 x418 500) (x80 x418 500) (x204 x418 500) (x91 x418 500)))
(assert (x488 x287 (- x20 x485)))
(assert (x75 x593))
(assert (= (x546 (x352 x570)) x570))
(assert (x75 x459))
(assert (x75 x353))
(assert (x288 x20 x287 x485 x56))
(assert (= x97 (and x301 (not x1))))
(assert (= x153 (and (not x223) x14)))
(assert (= (and (not x258) x89) x225))
(assert (= (=> (and (and (= (x16 x287 400) x103) (= x399 x103) (= x36 x4)) (and x100 (= x391 false) (= x353 400))) x146) x296))
(assert (= x125 (and x292 x324)))
(assert (and (x117 500 x418) (x346 500 x418) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x418 500) (* x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x418)) (= (* 500 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x418) (x34 500 x418)) (x78 500 x418) (x59 500 x418) (x555 500 x418)))
(assert (= x597 (and x474 x200)))
(assert (x488 x418 (- x590 x56)))
(assert (x75 x236))
(assert (x240 10))
(assert (x75 x10))
(assert (= x89 (and x221 (not x192))))
(assert (x75 x98))
(assert (x576 (- x56 x287)))
(assert (and (=> (and (> 10 0) (> x20 0)) (and (< (- x20 10) (* 10 (x16 x20 10))) (>= x20 (* (x16 x20 10) 10)))) (x448 x20 10) (x80 x20 10) (x204 x20 10) (x91 x20 10)))
(assert (= x442 (and x389 x542)))
(assert (= (and x269 x330) x481))
(assert (x75 x162))
(assert (and (x117 3 x45) (x346 3 x45) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x45 3) (* x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x45)) (= (* 3 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x45) (x34 3 x45)) (x78 3 x45) (x59 3 x45) (x555 3 x45)))
(assert (x75 x101))
(assert (x240 x20))
(assert (= x221 (or x314 x277 x501 x245 x228 x263 x242 x605 x336 x597 x549 x386 x199 x368 x341 x513 x518 x457 x54 x12 x13 x514 x47 x557)))
(assert (= (and x247 (not x560)) x71))
(assert (x50 x485 x56 x20 x287))
(assert (x50 x56 x485 x20 x287))
(assert (x75 x219))
(assert (= (and x355 x618) x28))
(assert (x75 x540))
(assert (and (=> (and (> 500 0) (> x590 0)) (and (< (- x590 500) (* 500 (x16 x590 500))) (>= x590 (* (x16 x590 500) 500)))) (x448 x590 500) (x80 x590 500) (x204 x590 500) (x91 x590 500)))
(assert (not x316))
(assert (= (and (not x583) x565) x247))
(assert (= x411 (and x99 x177)))
(assert (x75 x198))
(assert (x75 x206))
(assert (= (=> (and (and x294 (= false x155) (= 2 x17)) (and (= x318 x416) (= x40 (x16 x56 2)) (= x209 x40))) x230) x437))
(assert (x288 x418 x590 x20 x287))
(assert (x75 x64))
(assert (x75 x364))
(assert (= (and x517 x491) x604))
(assert (x75 x533))
(assert (x240 x287))
(assert (= x495 (and (not x338) x161)))
(assert (x488 x287 (- x20 x56)))
(assert (= (and x477 x144) x306))
(assert (x75 x69))
(assert (x75 x40))
(assert (x576 x418))
(assert (= x49 (and x83 x194)))
(assert (x75 x38))
(assert (and (x117 10 x505) (x346 10 x505) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x505 10) (* x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x505)) (= (* 10 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x505) (x34 10 x505)) (x78 10 x505) (x59 10 x505) (x555 10 x505)))
(assert (= x470 (=> (and (and (= x64 400) x543 (= x35 false)) (and (= x382 x209) (= x416 x318) (= (x16 x56 400) x382))) x230)))
(assert (x576 3))
(assert (= (and (not x363) x249) x444))
(assert (= x113 (and (not x387) x203)))
(assert (x75 x516))
(assert (= (and x93 x48) x237))
(assert (= x390 (=> (and (and (= 3 x596) (= false x553) x500) (and (= x416 x318) (= x313 x209) (= (x16 x56 3) x313))) x230)))
(assert (x576 (- x418 x56)))
(assert (= (and x181 x254) x431))
(assert (and (x117 2 x56) (x346 2 x56) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x56 2) (* x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x56)) (= (* 2 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x56) (x34 2 x56)) (x78 2 x56) (x59 2 x56) (x555 2 x56)))
(assert (and (=> (and (> 10 0) (> x287 0)) (and (< (- x287 10) (* 10 (x16 x287 10))) (>= x287 (* (x16 x287 10) 10)))) (x448 x287 10) (x80 x287 10) (x204 x287 10) (x91 x287 10)))
(assert (and (=> (and (> 500 0) (> x287 0)) (and (< (- x287 500) (* 500 (x16 x287 500))) (>= x287 (* (x16 x287 500) 500)))) (x448 x287 500) (x80 x287 500) (x204 x287 500) (x91 x287 500)))
(assert (and (=> (and (> 500 0) (> x56 0)) (and (< (- x56 500) (* 500 (x16 x56 500))) (>= x56 (* (x16 x56 500) 500)))) (x448 x56 500) (x80 x56 500) (x204 x56 500) (x91 x56 500)))
(assert (and (=> (and (> 2 0) (> x56 0)) (and (< (- x56 2) (* 2 (x16 x56 2))) (>= x56 (* (x16 x56 2) 2)))) (x448 x56 2) (x204 x56 2) (x91 x56 2) (= (* 2 (x16 x56 2)) (- x56 (x606 1 x56))) (x80 x56 2)))
(assert (x488 x20 (- x287 x418)))
(assert (x75 x286))
(assert (= x490 (and x270 (not x599))))
(assert (x75 x418))
(assert (x75 x293))
(assert (= x105 (and x479 x109)))
(assert (and (x117 10 x496) (x346 10 x496) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x496 10) (* x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x496)) (= (* 10 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x496) (x34 10 x496)) (x78 10 x496) (x59 10 x496) (x555 10 x496)))
(assert (= x508 (=> (and (and (= x166 x343) (= x567 x206) (= (x16 x418 2) x206)) (and x269 (= false x66) (= x377 2))) x380)))
(assert (x75 x570))
(assert (x75 x535))
(assert (x488 x56 (- x485 x590)))
(assert (= (and x548 x487) x579))
(assert (and (=> (and (> 2 0) (> x20 0)) (and (< (- x20 2) (* 2 (x16 x20 2))) (>= x20 (* (x16 x20 2) 2)))) (x448 x20 2) (x204 x20 2) (x91 x20 2) (= (* 2 (x16 x20 2)) (- x20 (x606 1 x20))) (x80 x20 2)))
(assert (= (and x328 x608) x274))
(assert (= (and x358 x312) x115))
(assert (= (and x150 x63) x514))
(assert (= x462 (and x153 x183)))
(assert (= (and x355 (not x618)) x328))
(assert (x75 x2))
(assert (= x457 (and x141 x126)))
(assert (= x109 (and (not x389) x542)))
(assert (x75 x619))
(assert (x75 x284))
(assert (x288 x56 x485 x418 x590))
(assert (x75 x492))
(assert (x75 x476))
(assert (x75 x375))
(assert (x288 x287 x20 x418 x590))
(assert (x50 x56 x485 x590 x418))
(assert (x288 x485 x56 x20 x287))
(assert (= (=> (and (and (= x36 x4) (= x399 x527) (= (x16 x287 10) x527)) (and (= 10 x156) (= false x544) x131)) x146) x497))
(assert (x488 x20 (- x287 x485)))
(assert (= (and x213 x444) x498))
(assert (x75 x179))
(assert (x240 3))
(assert (x75 x602))
(assert (= (=> (and (and (= (x16 x56 10) x375) (= x416 x318) (= x209 x375)) (and (= 10 x503) (= false x349) x9)) x230) x119))
(assert (= (and x322 x366) x33))
(assert (x75 x596))
(assert (and (x117 3 x496) (x346 3 x496) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x496 3) (* x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x496)) (= (* 3 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x496) (x34 3 x496)) (x78 3 x496) (x59 3 x496) (x555 3 x496)))
(assert (and (x117 2 x45) (x346 2 x45) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x45 2) (* x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x45)) (= (* 2 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x45) (x34 2 x45)) (x78 2 x45) (x59 2 x45) (x555 2 x45)))
(assert (x75 x468))
(assert (= x310 (=> (and (and (= x318 x416) (= (x16 x485 3) x293) (= x209 x293)) (and x177 (= 3 x344) (= x81 false))) x230)))
(assert (x75 x334))
(assert (x75 x45))
(assert (x75 x68))
(assert (x576 (- x56 x590)))
(assert (and (=> (and (> 2 0) (> x287 0)) (and (< (- x287 2) (* 2 (x16 x287 2))) (>= x287 (* (x16 x287 2) 2)))) (x448 x287 2) (x204 x287 2) (x91 x287 2) (= (* 2 (x16 x287 2)) (- x287 (x606 1 x287))) (x80 x287 2)))
(assert (= (=> (and (and (= x77 500) x194 (= x552 false)) (and (= x318 x416) (= x191 (x16 x485 500)) (= x191 x209))) x230) x244))
(assert (= (=> (and (and (= (x16 x418 10) x11) (= x567 x11) (= x166 x343)) (and (= 10 x255) (= x42 false) x93)) x380) x329))
(assert (x576 (- x485 x418)))
(assert (= (and (not x608) x328) x99))
(assert (= (=> (and (and (= x246 (x16 x20 2)) (= x246 x399) (= x36 x4)) (and x211 (= x466 2) (= x627 false))) x146) x241))
(assert (= (and x24 x415) x586))
(assert (and (=> (and (> 500 0) (> x20 0)) (and (< (- x20 500) (* 500 (x16 x20 500))) (>= x20 (* (x16 x20 500) 500)))) (x448 x20 500) (x80 x20 500) (x204 x20 500) (x91 x20 500)))
(assert (x75 x261))
(assert (and (x117 2 x287) (x346 2 x287) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x287 2) (* x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x287)) (= (* 2 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x287) (x34 2 x287)) (x78 2 x287) (x59 2 x287) (x555 2 x287)))
(assert (and (=> (and (> 3 0) (> x590 0)) (and (< (- x590 3) (* 3 (x16 x590 3))) (>= x590 (* (x16 x590 3) 3)))) (x448 x590 3) (x80 x590 3) (x204 x590 3) (x91 x590 3)))
(assert (x488 x20 x287))
(assert (x576 (- x485 x287)))
(assert (x75 x588))
(assert (x488 x418 (- x590 x287)))
(assert (= (=> (and (and (= (x16 x20 500) x164) (= x36 x4) (= x399 x164)) (and (= false x308) (= 500 x128) x106)) x146) x624))
(assert (x75 x138))
(assert (x75 x317))
(assert (x240 500))
(assert (x75 x287))
(assert (x262 x570))
(assert (and (x117 2 x485) (x346 2 x485) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x485 2) (* x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x485)) (= (* 2 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x485 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x485) (x34 2 x485)) (x78 2 x485) (x59 2 x485) (x555 2 x485)))
(assert (x576 x590))
(assert (= (and x63 (not x150)) x407))
(assert (= (=> (and (and (= (x16 x287 500) x593) (= x4 x36) (= x399 x593)) (and x141 (= 500 x123) (= x428 false))) x146) x378))
(assert (= (x546 (x582 149895259)) 149895259))
(assert (and (=> (and (> 2 0) (> x590 0)) (and (< (- x590 2) (* 2 (x16 x590 2))) (>= x590 (* (x16 x590 2) 2)))) (x448 x590 2) (x204 x590 2) (x91 x590 2) (= (* 2 (x16 x590 2)) (- x590 (x606 1 x590))) (x80 x590 2)))
(assert (x75 x257))
(assert (= x126 (and (not x106) x620)))
(assert (= (x546 (x582 1245370514)) 1245370514))
(assert (x576 400))
(assert (= x453 (and x132 (not x120))))
(assert (x576 x20))
(assert (x488 x590 x418))
(assert (x75 x193))
(assert (and (x117 3 x20) (x346 3 x20) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x20 3) (* x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x20)) (= (* 3 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x20) (x34 3 x20)) (x78 3 x20) (x59 3 x20) (x555 3 x20)))
(assert (x50 x485 x56 x590 x418))
(assert (x576 (- x485 x590)))
(assert (x576 (- x56 x20)))
(assert (= x605 (and x203 x387)))
(assert (= (and x517 (not x491)) x477))
(assert (x75 x135))
(assert (= (and x330 (not x269)) x14))
(assert (x75 x103))
(assert (x75 x20))
(assert (x50 x590 x418 x485 x56))
(assert (x240 x485))
(assert (x75 x186))
(assert (x75 x256))
(assert (= (and x247 x560) x263))
(assert (= (x352 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x582 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (and x235 x453) x441))
(assert (= x3 (=> (and (and (= x36 x4) (= (x16 x287 2) x522) (= x399 x522)) (and (= x529 false) (= x135 2) x387)) x146)))
(assert (x75 x519))
(assert (x576 (- x56 x418)))
(assert (and (x117 10 x20) (x346 10 x20) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x20 10) (* x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x20)) (= (* 10 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x20) (x34 10 x20)) (x78 10 x20) (x59 10 x20) (x555 10 x20)))
(assert (x75 x446))
(assert (and (=> (and (> 10 0) (> x418 0)) (and (< (- x418 10) (* 10 (x16 x418 10))) (>= x418 (* (x16 x418 10) 10)))) (x448 x418 10) (x80 x418 10) (x204 x418 10) (x91 x418 10)))
(assert (= (and x153 (not x183)) x489))
(assert (x75 x435))
(assert (= (and (not x366) x322) x6))
(assert (= (and x97 x276) x348))
(assert (x75 x209))
(assert (= (and x202 (not x591)) x383))
(assert (and (x117 2 x505) (x346 2 x505) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x505 2) (* x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x505)) (= (* 2 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x505) (x34 2 x505)) (x78 2 x505) (x59 2 x505) (x555 2 x505)))
(assert (x75 x86))
(assert (= (and x490 (not x290)) x217))
(assert (= (=> (and (and x591 (= x504 false) (= 10 x236)) (and (= x399 x222) (= x36 x4) (= (x16 x20 10) x222))) x146) x584))
(assert (= (and x148 (not x404)) x227))
(assert (and (x117 10 x418) (x346 10 x418) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x418 10) (* x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x418)) (= (* 10 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x418) (x34 10 x418)) (x78 10 x418) (x59 10 x418) (x555 10 x418)))
(assert (x75 x485))
(assert (x75 x116))
(assert (x488 x590 (- x418 x20)))
(assert (x488 x20 (- x287 x590)))
(assert (and (=> (and (> 10 0) (> x485 0)) (and (< (- x485 10) (* 10 (x16 x485 10))) (>= x485 (* (x16 x485 10) 10)))) (x448 x485 10) (x80 x485 10) (x204 x485 10) (x91 x485 10)))
(assert (x576 10))
(assert (x75 x201))
(assert (= x111 (and x545 (not x543))))
(assert (x75 x410))
(assert (x75 x43))
(assert (x576 x496))
(assert (x488 x418 (- x590 x20)))
(assert (x488 x56 (- x485 x20)))
(assert (x75 x139))
(assert (= (and x258 x89) x143))
(assert (x488 x485 (- x56 x20)))
(assert (= x129 (or x586 x167 x298 x115 x28 x49 x283 x105 x442 x111 x85 x441 x411 x367 x46 x574 x478 x628 x571 x348 x274 x438 x73 x413)))
(assert (x75 x171))
(assert (x75 x8))
(assert (x75 x295))
(assert (= (x352 1461501637330902918203684832716283019655932542975) (x582 1461501637330902918203684832716283019655932542975)))
(assert (and (=> (and (> 3 0) (> x485 0)) (and (< (- x485 3) (* 3 (x16 x485 3))) (>= x485 (* (x16 x485 3) 3)))) (x448 x485 3) (x80 x485 3) (x204 x485 3) (x91 x485 3)))
(assert (x576 (- x418 x20)))
(assert (x576 (- x590 x485)))
(assert (= (=> (and (and (= false x536) (= 500 x84) x461) (and (= x209 x587) (= (x16 x56 500) x587) (= x318 x416))) x230) x614))
(assert (= (and x559 x130) x438))
(assert (x75 x547))
(assert (= x132 (and (not x500) x369)))
(assert (x75 x246))
(assert (= x333 (and (not x131) x383)))
(assert (= (and x356 (not x480)) x324))
(assert (= x630 (and x495 (not x251))))
(assert (= (and x113 (not x425)) x565))
(assert (x75 x11))
(assert (and (x117 10 x287) (x346 10 x287) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x287 10) (* x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x287)) (= (* 10 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x287) (x34 10 x287)) (x78 10 x287) (x59 10 x287) (x555 10 x287)))
(assert (x75 x252))
(assert (= (and (not x461) x243) x278))
(assert (= x267 (and (not x275) x134)))
(assert (= (and x267 x265) x199))
(assert (= x273 (=> (and (and (= x440 400) (= x403 false) x452) (and (= x343 x166) (= x162 x567) (= x162 (x16 x590 400)))) x380)))
(assert (= x542 (and x281 (not x454))))
(assert (= (and x333 x210) x314))
(assert (x75 x382))
(assert (x50 x287 x20 x590 x418))
(assert (and (x117 500 x505) (x346 500 x505) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x505 500) (* x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x505)) (= (* 500 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x505) (x34 500 x505)) (x78 500 x505) (x59 500 x505) (x555 500 x505)))
(assert (x576 (- x20 x56)))
(assert (x75 x374))
(assert (= x372 (=> (and (and (= x567 x38) (= (x16 x590 10) x38) (= x166 x343)) (and x213 (= 10 x465) (= false x613))) x380)))
(assert (= (and x404 x148) x455))
(assert (x288 x485 x56 x418 x590))
(assert (x75 x505))
(assert (x576 (- x287 x590)))
(assert (x488 x590 (- x418 x56)))
(assert (and (=> (and (> 400 0) (> x56 0)) (and (< (- x56 400) (* 400 (x16 x56 400))) (>= x56 (* (x16 x56 400) 400)))) (x448 x56 400) (x80 x56 400) (x204 x56 400) (x91 x56 400)))
(assert (= x386 (and (not x100) x217)))
(assert (x75 x621))
(assert (x288 x20 x287 x590 x418))
(assert (= (and x211 x169) x557))
(assert (x75 x609))
(assert (= (=> (and (and (= x317 x399) (= (x16 x287 3) x317) (= x4 x36)) (and (= x451 3) x598 (= x423 false))) x146) x569))
(assert (x488 x287 (- x20 x418)))
(assert (= (x352 2685885107) (x582 2685885107)))
(assert (x576 (- x20 x418)))
(assert (= (=> (and (and x290 (= x311 400) (= false x70)) (and (= x36 x4) (= x307 x399) (= x307 (x16 x20 400)))) x146) x449))
(assert (= (and x473 x401) x336))
(assert (= (and (not x144) x477) x133))
(assert (and (x117 3 x418) (x346 3 x418) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x418 3) (* x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x418)) (= (* 3 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x418 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x418) (x34 3 x418)) (x78 3 x418) (x59 3 x418) (x555 3 x418)))
(assert (x576 x505))
(assert (and (x117 400 x287) (x346 400 x287) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x287 400) (* x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x287)) (= (* 400 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x287 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x287) (x34 400 x287)) (x78 400 x287) (x59 400 x287) (x555 400 x287)))
(assert (= (=> (and (and (= x339 x399) x4) (and (not (= 1245370514 x619)) (= (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x515) x189) (= (or x173 x268) x192) (= 2685885107 x619) (= (= x590 0) x268) (= x515 (x34 x590 x418)) (= x539 (x60 (x352 x570))) (= x139 x505) (not (= x619 149895259)) (= x547 x339) (= x112 x418) (= x173 (= x418 0)) (= x76 (not (= 0 x505))) (< 0 x539) (= x284 x590) (= x343 (and x76 x189)))) (and (=> (and (and (= x258 (= x505 x418)) x580 (= (not x192) x580)) (not x192)) (and (=> (and x258 (and (= x567 x590) x258 (= x343 x166))) x380) (=> (and (and (= x337 (not x258)) x337 (= (= x590 x505) x39)) (not x258)) (and (=> (and (not x39) (and (= (= x418 x114) x548) x19 (= (* x505 2) x114) (= (not x39) x19))) (and (=> (and (and x53 (= x250 (* x505 2)) (= x414 (= x590 x250)) (= x53 (not x548))) (not x548)) (and (=> (and x414 (and (= x196 x567) (= x196 (x405 (* x418 2))) (= x343 x166) x414)) x380) (=> (and (and x305 (= x305 (not x414)) (= (= x357 x505) x264) (= (* x418 2) x357)) (not x414)) (and (=> (and (and (= x30 (* x590 2)) (= x269 (= x505 x30)) (= x172 (not x264)) x172) (not x264)) (and (=> (and (not x269) (and (= x359 (not x269)) (= x223 (= x418 x550)) x359 (= x550 (* x505 3)))) (and (=> (and (not x223) (and (= (not x223) x137) (= x183 (= x149 x590)) x137 (= x149 (* 3 x505)))) (and (=> (and (and (= x95 x567) x183 (= x166 x343) (= (x405 (* x418 3)) x95)) x183) x380) (=> (and (and (= (not x183) x563) (= x429 (= x505 x458)) x563 (= x458 (* 3 x418))) (not x183)) (and (=> x429 x208) (=> (and (not x429) (and (= (= x456 x505) x480) (= (* x590 3) x456) x21 (= (not x429) x21))) (and (=> x480 x215) (=> (and (and x531 (= x388 (* 10 x505)) (= (= x388 x418) x292) (= (not x480) x531)) (not x480)) (and (=> (and (and x370 (= (not x292) x370) (= x65 (* x505 10)) (= (= x65 x590) x363)) (not x292)) (and (=> (and (and (= (x405 (* x418 10)) x121) (= x567 x121) x363 (= x343 x166)) x363) x380) (=> (and (not x363) (and (= x594 (* 10 x418)) (= x213 (= x505 x594)) x157 (= x157 (not x363)))) (and (=> (and (not x213) (and (= (= x182 x505) x93) (= x300 (not x213)) (= (* 10 x590) x182) x300)) (and (=> x93 x329) (=> (and (not x93) (and (= (not x93) x151) (= (* x505 500) x72) (= (= x418 x72) x254) x151)) (and (=> (and (and (= (* x505 500) x319) x554 (= (= x590 x319) x491) (= (not x254) x554)) (not x254)) (and (=> (and (and x315 (= x509 (* x418 500)) (= (not x491) x315) (= (= x505 x509) x144)) (not x491)) (and (=> (and (and (= x350 (* x590 500)) (= (= x350 x505) x303) x592 (= (not x144) x592)) (not x144)) (and (=> (and (not x303) (and x578 (= (not x303) x578) (= x127 (* 400 x505)) (= (= x418 x127) x404))) (and (=> (and x404 (and (= x343 x166) x404 (= (x405 (* 400 x590)) x471) (= x567 x471))) x380) (=> (and (and x397 (= x397 (not x404)) (= (* 400 x505) x331) (= x629 (= x331 x590))) (not x404)) (and (=> (and (and (= (x405 (* x418 400)) x499) (= x567 x499) (= x166 x343) x629) x629) x380) (=> (and (not x629) (and (= (* x418 400) x37) (= x122 (not x629)) x122 (= (= x505 x37) x452))) (and (=> x452 x273) (=> (and (and x556 (= (= x505 x234) x366) (= (not x452) x556) (= x234 (* x590 400))) (not x452)) (and (=> x366 x585) (=> (and (not x366) (and (= x567 x609) (= (not x366) x376) (= x166 x197) x376 (= x197 false) (= x609 0))) x380))))))))) (=> x303 x511))) (=> x144 x302))) (=> (and (and (= x567 x212) (= x212 (x405 (* x418 500))) (= x166 x343) x491) x491) x380))) (=> (and (and (= x193 (x405 (* 500 x590))) (= x567 x193) x254 (= x166 x343)) x254) x380))))) (=> x213 x372))))) (=> (and x292 (and (= x343 x166) (= (x405 (* 10 x590)) x374) x292 (= x567 x374))) x380))))))))) (=> (and x223 (and (= (x405 (* x590 3)) x154) (= x154 x567) x223 (= x166 x343))) x380))) (=> x269 x508))) (=> x264 x52))))) (=> (and (and x548 (= x364 x567) (= x166 x343) (= (x405 (* 2 x590)) x364)) x548) x380))) (=> (and (and x39 (= x567 x418) (= x343 x166)) x39) x380))))) (=> (and (and x192 (= x43 0) (= x43 x567) (= x343 x166)) x192) x380))) x146))
(assert (= (and (not x541) x464) x63))
(assert (x75 x419))
(assert (x576 (- x418 x485)))
(assert (x75 x539))
(assert (x75 x471))
(assert (x576 x56))
(assert (and (x117 500 x45) (x346 500 x45) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x45 500) (* x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x45)) (= (* 500 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x45) (x34 500 x45)) (x78 500 x45) (x59 500 x45) (x555 500 x45)))
(assert (x240 400))
(assert (x75 x104))
(assert (x75 x335))
(assert (= (and x223 x14) x184))
(assert (= (or x455 x184 x125 x6 x306 x498 x431 x579 x430 x143 x158 x170 x436 x538 x481 x603 x44 x58 x507 x604 x237 x140 x462 x33) x358))
(assert (x75 x159))
(assert (= (and (not x24) x415) x537))
(assert (and (=> (and (> 3 0) (> x287 0)) (and (< (- x287 3) (* 3 (x16 x287 3))) (>= x287 (* (x16 x287 3) 3)))) (x448 x287 3) (x80 x287 3) (x204 x287 3) (x91 x287 3)))
(assert (= (=> (and (= x186 x138) (= (x562 (x352 x570)) x468) x271 (= x18 (= 0 x287)) (= x496 x139) (not (= 149895259 x261)) (< 0 x69) (= x287 x112) (= (+ x617 x138) x400) (= (<= x400 115792089237316195423570985008687907853269984665640564039457584007913129639935) x326) (= (<= x61 115792089237316195423570985008687907853269984665640564039457584007913129639935) x483) (not (= 1245370514 x261)) (= x271 (< 0 (x60 (x352 x570)))) (= (not (= 0 x496)) x205) (= (x34 x20 x287) x61) (= x69 (x60 (x352 x570))) (= x219 x521) (= x261 2685885107) (= (and x205 x483) x36) (= x142 (x233 (+ x219 x334))) (= (or x18 x260) x275) (= x334 x284) (<= x570 1461501637330902918203684832716283019655932542975) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x588) (= x20 x521) (= x186 x521) x326 (= x379 x284) (= x617 x379) (> x570 0) (= (= 0 x20) x260) (>= x468 0)) (and (=> (and (and (= x36 x4) (= 0 x446) x275 (= x446 x399)) x275) x146) (=> (and (and (= (= x287 x496) x265) (= x110 (not x275)) x110) (not x275)) (and (=> (and (not x265) (and (= x541 (= x496 x20)) (= x469 (not x265)) x469)) (and (=> (and (not x541) (and (= x232 (* x496 2)) (= (= x232 x287) x150) (= x22 (not x541)) x22)) (and (=> (and (not x150) (and (= (= x152 x20) x392) (= (not x150) x176) x176 (= (* x496 2) x152))) (and (=> (and (and (= x36 x4) x392 (= (x405 (* 2 x287)) x534) (= x534 x399)) x392) x146) (=> (and (not x392) (and (= (not x392) x41) (= x512 (* 2 x287)) (= (= x496 x512) x211) x41)) (and (=> (and (not x211) (and (= x387 (= x496 x289)) x88 (= (* 2 x20) x289) (= (not x211) x88))) (and (=> x387 x3) (=> (and (and (= (= x287 x136) x425) (= (* 3 x496) x136) x82 (= (not x387) x82)) (not x387)) (and (=> (and (and x425 (= x399 x460) (= (x405 (* 3 x20)) x460) (= x4 x36)) x425) x146) (=> (and (not x425) (and (= x583 (= x180 x20)) (= x180 (* x496 3)) x432 (= x432 (not x425)))) (and (=> (and (and (= x4 x36) (= x475 (x405 (* 3 x287))) x583 (= x399 x475)) x583) x146) (=> (and (not x583) (and (= x185 (* 3 x287)) x266 (= x560 (= x185 x496)) (= (not x583) x266))) (and (=> (and (not x560) (and (= (* x20 3) x207) x248 (= x248 (not x560)) (= x598 (= x496 x207)))) (and (=> x598 x569) (=> (and (not x598) (and (= x482 (not x598)) x482 (= x467 (* 10 x496)) (= (= x287 x467) x401))) (and (=> (and (and (= x36 x4) x401 (= x399 x286) (= x286 (x405 (* 10 x20)))) x401) x146) (=> (and (not x401) (and (= x94 (* 10 x496)) (= (= x94 x20) x285) x371 (= x371 (not x401)))) (and (=> (and (not x285) (and (= (not x285) x409) x409 (= (* x287 10) x74) (= x591 (= x74 x496)))) (and (=> x591 x584) (=> (and (and (= x406 (* 10 x20)) x108 (= x108 (not x591)) (= x131 (= x406 x496))) (not x591)) (and (=> x131 x497) (=> (and (not x131) (and x525 (= (= x287 x433) x210) (= x525 (not x131)) (= x433 (* 500 x496)))) (and (=> (and (and (= x200 (= x96 x20)) (= x309 (not x210)) x309 (= (* x496 500) x96)) (not x210)) (and (=> (and x200 (and (= x252 x399) (= x252 (x405 (* x287 500))) (= x36 x4) x200)) x146) (=> (and (not x200) (and (= (not x200) x25) x25 (= x394 (* x287 500)) (= x106 (= x496 x394)))) (and (=> x106 x624) (=> (and (not x106) (and (= x323 (not x106)) (= x141 (= x439 x496)) (= x439 (* x20 500)) x323)) (and (=> (and (and (= x561 (not x141)) x561 (= x447 (= x611 x287)) (= x611 (* 400 x496))) (not x141)) (and (=> (and (and (= (= x20 x168) x599) (= x327 (not x447)) (= x168 (* 400 x496)) x327) (not x447)) (and (=> (and (and (= (* x287 400) x239) (= x26 (not x599)) x26 (= x290 (= x239 x496))) (not x599)) (and (=> x290 x449) (=> (and (and (= (not x290) x226) (= x493 (* x20 400)) x226 (= x100 (= x496 x493))) (not x290)) (and (=> x100 x296) (=> (and (not x100) (and (= 0 x540) (= false x31) (= x472 (not x100)) x472 (= x540 x399) (= x4 x31))) x146))))) (=> (and x599 (and x599 (= x171 (x405 (* 400 x287))) (= x36 x4) (= x171 x399))) x146))) (=> (and (and (= x399 x116) x447 (= x4 x36) (= x116 (x405 (* 400 x20)))) x447) x146))) (=> x141 x378))))))) (=> (and x210 (and (= x602 (x405 (* 500 x20))) x210 (= x36 x4) (= x399 x602))) x146))))))) (=> (and x285 (and (= x410 (x405 (* 10 x287))) x285 (= x399 x410) (= x4 x36))) x146))))))) (=> x560 x229))))))))) (=> x211 x241))))) (=> (and (and (= (x405 (* x20 2)) x533) (= x533 x399) (= x4 x36) x150) x150) x146))) (=> (and x541 (and x541 (= x287 x399) (= x4 x36))) x146))) (=> (and x265 (and x265 (= x399 x20) (= x36 x4))) x146))))) x316))
(assert (x488 x287 (- x20 x590)))
(assert (= (and x161 x338) x413))
(assert (= x243 (and (not x194) x83)))
(assert (= (=> (and (and (= x8 x567) (= x8 (x16 x418 3)) (= x166 x343)) (and x480 (= x419 3) (= false x393))) x380) x215))
(assert (x75 x17))
(assert (x75 x311))
(assert (x75 x503))
(assert (= x73 (and x259 x9)))
(assert (x75 x587))
(assert (x75 x307))
(assert (= (and x414 x187) x58))
(assert (= (and x461 x243) x298))
(assert (= (and (not x392) x407) x169))
(assert (x75 x79))
(assert (x288 x56 x485 x20 x287))
(assert (= x474 (and x333 (not x210))))
(assert (x75 x466))
(assert (and (x117 500 x496) (x346 500 x496) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x496 500) (* x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x496)) (= (* 500 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x496 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x496) (x34 500 x496)) (x78 500 x496) (x59 500 x496) (x555 500 x496)))
(assert (x50 x20 x287 x485 x56))
(assert (x75 x123))
(assert (x576 (- x287 x56)))
(assert (= (and x495 x251) x46))
(assert (x288 x485 x56 x590 x418))
(assert (x488 x418 (- x590 x485)))
(assert (= (and x356 x480) x158))
(assert (= (and x290 x490) x47))
(assert (and (x117 400 x505) (x346 400 x505) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x505 400) (* x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x505)) (= (* 400 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x505) (x34 400 x505)) (x78 400 x505) (x59 400 x505) (x555 400 x505)))
(assert (and (x117 2 x20) (x346 2 x20) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x20 2) (* x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x20)) (= (* 2 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x20) (x34 2 x20)) (x78 2 x20) (x59 2 x20) (x555 2 x20)))
(assert (x240 x418))
(assert (x75 x339))
(assert (= (and x358 (not x312)) x281))
(assert (x488 x485 (- x56 x418)))
(assert (x75 x128))
(assert (and (x117 2 x590) (x346 2 x590) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x590 2) (* x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x590)) (= (* 2 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 2 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 2 x590) (x34 2 x590)) (x78 2 x590) (x59 2 x590) (x555 2 x590)))
(assert (= x52 (=> (and (and (= x492 x567) (= x166 x343) (= (x16 x590 2) x492)) (and x264 (= 2 x101) (= false x530))) x380)))
(assert (= (=> (and (and (= x621 x484) (= x198 x7) (= x92 (= x198 x272)) (= (+ x621 x145) x272) (= x145 x547) (= x7 x159)) (and (= x209 x159) x416)) x92) x230))
(assert (x75 x95))
(assert (and (x117 500 x590) (x346 500 x590) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x590 500) (* x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x590)) (= (* 500 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 500 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 500 x590) (x34 500 x590)) (x78 500 x590) (x59 500 x590) (x555 500 x590)))
(assert (x75 x216))
(assert (x75 x577))
(assert (x488 x56 (- x485 x287)))
(assert (x288 x418 x590 x56 x485))
(assert (x75 x506))
(assert (=> (>= 10000 x570) (= (x352 x570) (x582 x570))))
(assert (and (x117 3 x56) (x346 3 x56) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x56 3) (* x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x56)) (= (* 3 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x56) (x34 3 x56)) (x78 3 x56) (x59 3 x56) (x555 3 x56)))
(assert (x75 x567))
(assert (= (and (not x362) x537) x545))
(assert (= (and x294 x630) x167))
(assert (x576 (- x590 x56)))
(assert (x488 x20 (- x287 x56)))
(assert (x75 x222))
(assert (= (and x392 x407) x513))
(assert (x75 x107))
(assert (= x13 (and x583 x565)))
(assert (x288 x485 x56 x287 x20))
(assert (x576 (- x20 x485)))
(assert (and (x117 400 x45) (x346 400 x45) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x45 400) (* x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x45)) (= (* 400 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x45 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x45) (x34 400 x45)) (x78 400 x45) (x59 400 x45) (x555 400 x45)))
(assert (= (and (not x294) x630) x355))
(assert (and (x117 400 x590) (x346 400 x590) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x590 400) (* x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x590)) (= (* 400 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 400 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 400 x590) (x34 400 x590)) (x78 400 x590) (x59 400 x590) (x555 400 x590)))
(assert (and (=> (and (> 400 0) (> x287 0)) (and (< (- x287 400) (* 400 (x16 x287 400))) (>= x287 (* (x16 x287 400) 400)))) (x448 x287 400) (x80 x287 400) (x204 x287 400) (x91 x287 400)))
(assert (= x270 (and (not x447) x601)))
(assert (x288 x418 x590 x485 x56))
(assert (x288 x287 x20 x56 x485))
(assert (x75 x527))
(assert (= x558 (and (not x629) x227)))
(assert (= (and x452 x558) x538))
(assert (x50 x287 x20 x485 x56))
(assert (x75 x581))
(assert (x75 x496))
(assert (and (=> (and (> 400 0) (> x418 0)) (and (< (- x418 400) (* 400 (x16 x418 400))) (>= x418 (* (x16 x418 400) 400)))) (x448 x418 400) (x80 x418 400) (x204 x418 400) (x91 x418 400)))
(assert (x50 x418 x590 x20 x287))
(assert (= x187 (and x487 (not x548))))
(assert (x488 x485 x56))
(assert (x75 x191))
(assert (x576 (- x418 x287)))
(assert (and (=> (and (> 3 0) (> x20 0)) (and (< (- x20 3) (* 3 (x16 x20 3))) (>= x20 (* (x16 x20 3) 3)))) (x448 x20 3) (x80 x20 3) (x204 x20 3) (x91 x20 3)))
(assert (= (x352 1245370514) (x582 1245370514)))
(assert (x288 x20 x287 x418 x590))
(assert (x576 x485))
(assert (= x208 (=> (and (and (= x257 x567) (= (x16 x590 3) x257) (= x166 x343)) (and (= false x218) (= x297 3) x429)) x380)))
(assert (x75 x484))
(assert (= (and x362 x537) x85))
(assert (= (and x558 (not x452)) x322))
(assert (x75 x377))
(assert (x240 x590))
(assert (= x134 true))
(assert (x240 2))
(assert (and (x117 10 x590) (x346 10 x590) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x590 10) (* x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x590)) (= (* 10 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 10 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 10 x590) (x34 10 x590)) (x78 10 x590) (x59 10 x590) (x555 10 x590)))
(assert (= x229 (=> (and (and (= x104 (x16 x20 3)) (= x4 x36) (= x104 x399)) (and x560 (= 3 x535) (= x195 false))) x146)))
(assert (and (x117 3 x590) (x346 3 x590) (and (= (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x590 3) (* x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x590)) (= (* 3 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x34 3 (- x590 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 3 x590) (x34 3 x590)) (x78 3 x590) (x59 3 x590) (x555 3 x590)))
(assert (x50 x20 x287 x590 x418))
(assert (x75 x451))
(assert (= (and x444 (not x213)) x48))
(assert (= (and x100 x217) x518))
(assert (= x277 (and x275 x134)))
(assert (x75 x521))
(assert (= (and x99 (not x177)) x369))
(assert (x576 (- x287 x485)))
(assert (x75 x255))
(assert (x75 x142))
(check-sat)
(exit)
