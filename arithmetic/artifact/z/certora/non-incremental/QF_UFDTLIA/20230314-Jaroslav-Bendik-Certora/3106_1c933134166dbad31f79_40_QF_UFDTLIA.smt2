(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x139 0)) (((x68 (x284 x139) (x254 x139) (x109 x139) (x13 x139) (x80 x139) (x232 x139) (x153 Int)) (x44 (x270 x139) (x183 x139) (x150 x139) (x273 x139) (x278 x139) (x64 x139) (x71 x139) (x179 Int)) (x52 (x122 x139) (x129 x139) (x143 Int)) (x28 (x69 x139) (x262 x139) (x19 x139) (x34 x139) (x276 Int)) (x103 (x233 Int)) (x138 (x99 x139) (x14 x139) (x18 x139) (x173 x139) (x140 x139) (x227 Int)) (x78 (x128 x139) (x193 x139) (x17 x139) (x154 Int)) (x240 (x238 x139) (x209 Int)))))
(declare-fun x74 () Bool)
(declare-fun x172 () Int)
(declare-fun x6 () Bool)
(declare-fun x285 () Int)
(declare-fun x50 () Int)
(declare-fun x114 () Bool)
(declare-fun x208 () Bool)
(declare-fun x39 () Bool)
(declare-fun x219 () Bool)
(declare-fun x94 () Int)
(declare-fun x263 () Int)
(declare-fun x35 () Int)
(declare-fun x266 () Int)
(declare-fun x200 () Bool)
(declare-fun x178 () Bool)
(declare-fun x104 () Int)
(declare-fun x241 () Bool)
(declare-fun x106 () Bool)
(declare-fun x275 () Int)
(declare-fun x274 () Bool)
(declare-fun x242 () Int)
(declare-fun x115 (Int) Int)
(declare-fun x164 () Bool)
(declare-fun x32 () x139)
(declare-fun x156 () Bool)
(declare-fun x91 (x139) Int)
(declare-fun x90 () Int)
(declare-fun x185 () Int)
(declare-fun x268 () Int)
(declare-fun x16 () Int)
(declare-fun x169 () Bool)
(declare-fun x22 () Bool)
(declare-fun x2 () x139)
(declare-fun x161 () Bool)
(declare-fun x117 (Int) Int)
(declare-fun x36 () Bool)
(declare-fun x199 () Int)
(declare-fun x15 () Int)
(declare-fun x25 () Bool)
(declare-fun x59 () Bool)
(declare-fun x81 () Int)
(declare-fun x144 () Bool)
(declare-fun x65 () Bool)
(declare-fun x259 () Int)
(declare-fun x84 () Int)
(declare-fun x230 () Int)
(declare-fun x60 (x139) Int)
(declare-fun x12 () Int)
(declare-fun x155 () Int)
(declare-fun x33 () Int)
(declare-fun x151 () Bool)
(declare-fun x137 () Int)
(declare-fun x257 () Int)
(declare-fun x246 () Bool)
(declare-fun x182 () Int)
(declare-fun x282 () x139)
(declare-fun x89 (x139) Int)
(declare-fun x267 () Bool)
(declare-fun x62 () Bool)
(declare-fun x220 () Int)
(declare-fun x54 () Int)
(declare-fun x197 () Bool)
(declare-fun x76 () Bool)
(declare-fun x9 () Int)
(declare-fun x41 () Bool)
(declare-fun x216 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x120 (Int Int) Int)
(declare-fun x261 () Int)
(declare-fun x176 () Bool)
(declare-fun x142 () Int)
(declare-fun x252 () Bool)
(declare-fun x97 () Bool)
(declare-fun x195 () Int)
(declare-fun x290 () Int)
(declare-fun x37 () Bool)
(declare-fun x271 () Int)
(declare-fun x180 (x139) Int)
(declare-fun x202 (Int) Int)
(declare-fun x55 () Int)
(declare-fun x24 () Bool)
(declare-fun x239 () Bool)
(declare-fun x288 () Int)
(declare-fun x8 () Bool)
(declare-fun x51 () Bool)
(declare-fun x75 () Bool)
(declare-fun x223 () Bool)
(declare-fun x177 () x139)
(declare-fun x108 () Int)
(declare-fun x287 () Int)
(declare-fun x47 (Int Int) Int)
(declare-fun x146 (Int Int) Int)
(declare-fun x21 () Int)
(declare-fun x171 () Bool)
(declare-fun x30 (x139) Int)
(declare-fun x72 () Int)
(declare-fun x224 (x139) Int)
(declare-fun x45 () Int)
(declare-fun x66 () Int)
(declare-fun x67 () Bool)
(declare-fun x201 () Bool)
(declare-fun x167 (Int Int) Int)
(declare-fun x40 () Int)
(declare-fun x119 () Bool)
(declare-fun x192 () Int)
(declare-fun x152 () Bool)
(declare-fun x126 () Bool)
(declare-fun x131 () Int)
(declare-fun x168 () Bool)
(declare-fun x250 (Int Int) Int)
(declare-fun x189 () x139)
(declare-fun x210 () Int)
(declare-fun x11 () Int)
(declare-fun x88 () Int)
(declare-fun x162 () Int)
(declare-fun x184 () Int)
(declare-fun x79 () Int)
(declare-fun x280 (Int) Int)
(declare-fun x196 () Int)
(declare-fun x147 () Int)
(declare-fun x87 () Bool)
(declare-fun x82 () Int)
(declare-fun x214 () Int)
(declare-fun x170 () Int)
(declare-fun x110 () Bool)
(declare-fun x98 () Int)
(declare-fun x217 () x139)
(declare-fun x77 () Bool)
(declare-fun x157 () Int)
(declare-fun x191 () Int)
(declare-fun x95 () Int)
(declare-fun x92 () x139)
(declare-fun x258 () Int)
(declare-fun x281 () Int)
(declare-fun x149 () Int)
(declare-fun x125 () Int)
(declare-fun x141 (Int) x139)
(declare-fun x215 () Int)
(declare-fun x234 () Int)
(declare-fun x218 () Int)
(declare-fun x249 () Int)
(declare-fun x63 () Bool)
(declare-fun x56 () Bool)
(declare-fun x145 () Int)
(declare-fun x244 () Int)
(declare-fun x256 () Int)
(declare-fun x5 () Bool)
(declare-fun x231 () Int)
(declare-fun x277 () Int)
(declare-fun x121 () Int)
(declare-fun x260 () Bool)
(declare-fun x289 () Int)
(declare-fun x228 () Bool)
(declare-fun x187 () Int)
(declare-fun x236 () x139)
(declare-fun x136 () Int)
(declare-fun x124 () Int)
(declare-fun x186 () Bool)
(declare-fun x113 () Int)
(declare-fun x107 () Int)
(declare-fun x205 () Int)
(declare-fun x73 () Int)
(declare-fun x204 () Int)
(declare-fun x3 () Int)
(declare-fun x85 (Int Int) Int)
(declare-fun x159 () Int)
(declare-fun x203 () Int)
(define-fun x188 ((x139 x139) (x86 Int)) x139 (ite ((_ is x44) x139) (x44 (x270 x139) (x183 x139) (x150 x139) (x273 x139) (x278 x139) (x64 x139) (x71 x139) (+ x86 (x179 x139))) (ite ((_ is x68) x139) (x68 (x284 x139) (x254 x139) (x109 x139) (x13 x139) (x80 x139) (x232 x139) (+ (x153 x139) x86)) (ite ((_ is x138) x139) (x138 (x99 x139) (x14 x139) (x18 x139) (x173 x139) (x140 x139) (+ (x227 x139) x86)) (ite ((_ is x28) x139) (x28 (x69 x139) (x262 x139) (x19 x139) (x34 x139) (+ (x276 x139) x86)) (ite ((_ is x78) x139) (x78 (x128 x139) (x193 x139) (x17 x139) (+ x86 (x154 x139))) (ite ((_ is x240) x139) (x240 (x238 x139) (+ (x209 x139) x86)) (ite ((_ is x52) x139) (x52 (x122 x139) (x129 x139) (+ x86 (x143 x139))) (x103 (+ x86 (x233 x139)))))))))))
(define-fun x58 ((x105 Int)) Int (ite (and (< x105 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x105 0)) x105 (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x148 ((x105 Int)) Int (ite (and (>= x105 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x105)) (+ x105 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105))
(define-fun x165 ((x105 Int)) Int (ite (and (>= x105 0) (< x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x105 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105) (< x105 231584178474632390847141970017375815706539969331281128078915168015826259279872)) (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x105) (>= x105 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x105 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x250 x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x83 ((x123 Int)) Bool (and (>= x123 0) (< x123 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x166 ((x123 Int) (x221 Int)) Bool (=> (and (> x221 0) (< 0 x123)) (and (<= 0 (x47 x123 x221)) (<= (x47 x123 x221) x123))))
(define-fun x118 ((x123 Int) (x221 Int)) Bool (=> (and (and (>= x221 1) (< x221 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (>= x123 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x123))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x47 x123 x221)) (<= 0 (x47 x123 x221)))))
(define-fun x112 ((x123 Int) (x221 Int)) Bool (=> (and (< 1 x221) (< x221 x123)) (> x123 (x47 x123 x221))))
(define-fun x48 ((x123 Int) (x221 Int)) Bool (=> (and (< 0 x221) (> x123 0)) (= (< x123 x221) (= 0 (x47 x123 x221)))))
(define-fun x133 ((x123 Int)) Bool (= (x47 0 x123) 0))
(define-fun x38 ((x123 Int)) Bool (= x123 (x47 x123 1)))
(define-fun x269 ((x123 Int)) Bool (=> (not (= 0 x123)) (= 1 (x47 x123 x123))))
(define-fun x222 ((x123 Int)) Bool (and (x133 x123) (x38 x123) (x269 x123)))
(define-fun x46 ((x123 Int)) Bool (and (= x123 (x120 115792089237316195423570985008687907853269984665640564039457584007913129639935 x123)) (= (x120 x123 115792089237316195423570985008687907853269984665640564039457584007913129639935) x123)))
(define-fun x116 ((x123 Int)) Bool (and (= (x120 0 x123) 0) (= 0 (x120 x123 0))))
(define-fun x4 ((x123 Int)) Bool (= (x120 x123 x123) x123))
(define-fun x57 ((x123 Int)) Bool (and (x46 x123) (x4 x123) (x116 x123)))
(define-fun x102 ((x123 Int) (x221 Int)) Bool (= (x120 x221 x123) (x120 x123 x221)))
(define-fun x29 ((x123 Int) (x221 Int)) Bool (and (<= 0 (x120 x123 x221)) (=> (<= 0 x221) (<= (x120 x123 x221) x221)) (=> (<= 0 x123) (<= (x120 x123 x221) x123))))
(define-fun x279 ((x123 Int) (x221 Int)) Bool (and (x102 x123 x221) (x29 x123 x221)))
(define-fun x130 ((x123 Int)) Bool (= (+ (x120 x123 131072) (x250 x123 131072)) (x250 x123 262144)))
(define-fun x42 ((x123 Int)) Bool (and (x130 x123) (x279 x123 131072)))
(define-fun x211 ((x123 Int) (x221 Int)) Bool (and (< (x250 x123 x221) x221) (<= 0 (x250 x123 x221))))
(define-fun x253 ((x123 Int) (x221 Int)) Bool (=> (and (>= x123 0) (> x221 0)) (= (= (x250 x123 x221) x123) (> x221 x123))))
(define-fun x26 ((x123 Int) (x221 Int)) Bool (=> (and (and (< x123 (+ x221 x221)) (>= x123 x221)) (> x221 0)) (= (- x123 x221) (x250 x123 x221))))
(define-fun x255 ((x123 Int)) Bool (= (x250 0 x123) 0))
(define-fun x225 ((x123 Int)) Bool (= 0 (x250 x123 1)))
(define-fun x174 ((x123 Int)) Bool (= (x250 x123 x123) 0))
(define-fun x226 ((x123 Int)) Bool (and (x174 x123) (x255 x123) (x225 x123)))
(define-fun x194 ((x123 Int)) Bool (= (x120 x123 1) (x250 x123 2)))
(define-fun x213 ((x123 Int)) Bool (and (x279 x123 1) (x194 x123)))
(define-fun x283 ((x123 Int)) Bool (= (x250 x123 128) (x120 x123 127)))
(define-fun x20 ((x123 Int)) Bool (and (x283 x123) (x279 x123 127)))
(define-fun x100 ((x123 Int) (x221 Int)) Bool (=> (and (< 0 x221) (> x123 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x146 x123 x221)) (= x221 (x47 (x165 (x146 x123 x221)) x123)))))
(define-fun x206 ((x123 Int) (x221 Int)) Bool (=> (and (not (= x221 0)) (not (= x123 0))) (and (= (x47 (x146 x123 x221) x123) x221) (= x123 (x47 (x146 x123 x221) x221)))))
(define-fun x235 ((x123 Int) (x221 Int)) Bool (=> (and (< 0 x123) (> x221 0)) (= (< (x47 115792089237316195423570985008687907853269984665640564039457584007913129639935 x123) x221) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x146 x123 x221)))))
(define-fun x10 ((x123 Int) (x221 Int)) Bool (and (= (x165 (x146 (- x123 115792089237316195423570985008687907853269984665640564039457584007913129639936) x221)) (x165 (x146 x123 x221))) (= (x165 (x146 x123 (- x221 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x165 (x146 x123 x221))) (= (x165 (x146 (- x123 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x221 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x165 (x146 x123 x221)))))
(define-fun x251 ((x123 Int) (x221 Int)) Bool (and (=> (and (and (> x123 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x123)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x221) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x221))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x221) (x47 57896044618658097711785492504343953926634992332820282019728792003956564819968 x123)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x146 x123 (- x221 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (<= x123 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x123 0)) (and (< 0 x221) (<= x221 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x146 x123 x221)) (<= x123 (x47 57896044618658097711785492504343953926634992332820282019728792003956564819967 x221)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x221) (<= x221 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x123) (> x123 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x47 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x221)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x123)) (<= (x146 (- x123 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x221 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x221 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x221)) (and (<= x123 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x123 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x146 (- x123 115792089237316195423570985008687907853269984665640564039457584007913129639936) x221) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x47 57896044618658097711785492504343953926634992332820282019728792003956564819968 x221) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x123))))))
(define-fun x158 ((x123 Int)) Bool (and (= (x146 x123 0) 0) (= 0 (x146 0 x123))))
(define-fun x27 ((x123 Int)) Bool (and (= (x146 1 x123) x123) (= x123 (x146 x123 1))))
(define-fun x237 ((x123 Int)) Bool (and (x27 x123) (x158 x123)))
(define-fun x264 ((x123 Int)) Bool (= (+ (x250 x123 65536) (x120 x123 65536)) (x250 x123 131072)))
(define-fun x243 ((x123 Int)) Bool (and (x264 x123) (x279 x123 65536)))
(define-fun x190 ((x123 Int)) Bool (= (x120 x123 1461501637330902918203684832716283019655932542975) (x250 x123 1461501637330902918203684832716283019655932542976)))
(define-fun x245 ((x123 Int)) Bool (and (x279 x123 1461501637330902918203684832716283019655932542975) (x190 x123)))
(define-fun x93 ((x123 Int)) Bool (= (x250 x123 4294967296) (x120 x123 4294967295)))
(define-fun x265 ((x123 Int)) Bool (and (x93 x123) (x279 x123 4294967295)))
(define-fun x101 ((x123 Int)) Bool (= (x165 x123) (+ (x120 x123 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x250 x123 32))))
(define-fun x272 ((x123 Int)) Bool (and (x279 x123 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x101 x123)))
(define-fun x135 ((x123 Int)) Bool (= (x250 x123 18446744073709551616) (x120 x123 18446744073709551615)))
(define-fun x7 ((x123 Int)) Bool (and (x279 x123 18446744073709551615) (x135 x123)))
(define-fun x181 ((x247 Int)) Int (ite (= x247 128) x210 (x202 x247)))
(define-fun x23 ((x247 Int)) Int (ite (= x247 160) x9 (x43 x247)))
(define-fun x1 ((x247 Int)) Int (ite (= 160 x247) x289 (x43 x247)))
(define-fun x212 ((x247 Int)) Int (ite (= x107 x247) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x115 x247)))
(define-fun x207 ((x247 Int)) Int (ite (= x247 x191) (x91 x92) (x212 x247)))
(define-fun x96 ((x247 Int)) Int (ite (and (<= x107 x247) (> (+ x107 32) x247)) (x117 (+ (- x247 x107) 0)) (x207 x247)))
(define-fun x132 ((x247 Int)) Int (ite x5 (x96 x247) (x207 x247)))
(define-fun x49 ((x247 Int)) Int (ite x274 (x132 x247) (x115 x247)))
(define-fun x31 ((x247 Int)) Int (ite (= x162 x247) x195 (x49 x247)))
(define-fun x229 ((x247 Int)) Int (ite (= x35 x247) x288 (x31 x247)))
(define-fun x111 ((x247 Int)) Int (ite (= x125 x247) x185 (x229 x247)))
(define-fun x286 ((x247 Int)) Int (ite (= 192 x247) x204 (x23 x247)))
(define-fun x248 ((x247 Int)) Int (ite x59 (x43 x247) (ite x200 (ite x223 (x23 x247) (x286 x247)) (x1 x247))))
(define-fun x163 ((x123 Int)) Bool (=> (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x123)) (not (= 97199519776808029778168953285215024309695167179541945341261303444449322336256 x123)) (not (= x123 1666326814)) (not (= x123 18446744073709551615)) (not (= x123 4294967295)) (not (= 131072 x123)) (not (= x123 7776000)) (not (= 1461501637330902918203684832716283019655932542975 x123)) (not (= 24706623 x123)) (not (= 16635278 x123)) (not (= 4294967296 x123)) (> x123 10000) (not (= 346787896 x123)) (not (= 549686827 x123)) (not (= 65536 x123)) (not (= x123 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (not ((_ is x103) (x141 x123)))))
(assert (= x281 (x91 (x141 x281))))
(assert (and (x48 x205 256) (=> (and (> x205 0) (< 0 256)) (and (> (* 256 (x47 x205 256)) (- x205 256)) (<= (* 256 (x47 x205 256)) x205))) (= (* (x47 x205 256) 256) (- x205 (x120 255 x205))) (x112 x205 256) (x166 x205 256) (x118 x205 256)))
(assert (x83 x288))
(assert (x83 x107))
(assert (=> (<= (x248 225) 10000) (= (x141 (x248 225)) (x103 (x248 225)))))
(assert (x222 x205))
(assert (x226 131072))
(assert (x57 x15))
(assert (= x37 (=> (and (= (>= 224 x12) x151) (= (x181 128) x145) (not (< x145 x81)) (= x81 (x58 (+ 1 x12)))) (and x151 (=> (= (ite (>= 32 x12) (x240 (x141 (x248 161)) 0) (ite (<= x12 64) (x52 (x141 (x248 161)) (x141 (x248 193)) 0) (ite (<= x12 96) (x78 (x141 (x248 161)) (x141 (x248 193)) (x141 (x248 225)) 0) (ite (>= 128 x12) (x28 (x141 (x248 161)) (x141 (x248 193)) (x141 (x248 225)) (x141 (x248 257)) 0) (ite (>= 160 x12) (x138 (x141 (x248 161)) (x141 (x248 193)) (x141 (x248 225)) (x141 (x248 257)) (x141 (x248 289)) 0) (ite (>= 192 x12) (x68 (x141 (x248 161)) (x141 (x248 193)) (x141 (x248 225)) (x141 (x248 257)) (x141 (x248 289)) (x141 (x248 321)) 0) (ite (<= x12 224) (x44 (x141 (x248 161)) (x141 (x248 193)) (x141 (x248 225)) (x141 (x248 257)) (x141 (x248 289)) (x141 (x248 321)) (x141 (x248 353)) 0) (x141 x281)))))))) x282) x171)))))
(assert (= (x91 (x103 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (=> (>= 10000 x187) (= (x103 x187) (x141 x187))))
(assert (x226 x172))
(assert (= (x103 16635278) (x141 16635278)))
(assert (x83 x121))
(assert (x83 x277))
(assert (= 24706623 (x91 (x103 24706623))))
(assert (= x5 (and x156 x74)))
(assert (x237 32))
(assert (x163 (x248 321)))
(assert (x83 x12))
(assert (x226 x82))
(assert (= (x103 549686827) (x141 549686827)))
(assert (= 65536 (x91 (x103 65536))))
(assert (x226 262144))
(assert (x83 x16))
(assert (x83 x84))
(assert (= x75 (and x62 x8)))
(assert (and (x253 x216 2) (x211 x216 2) (x26 x216 2) (=> (> 2 0) (= (+ (* 2 (x47 x216 2)) (x250 x216 2)) x216))))
(assert (= (x43 289) 0))
(assert (= (x43 353) 0))
(assert (=> (<= (x248 193) 10000) (= (x103 (x248 193)) (x141 (x248 193)))))
(assert (x83 x113))
(assert (= (x47 x16 452312848583266388373324160190187140051835877600158453279131187530910662656) (x167 x16 248)))
(assert (= 0 (x43 321)))
(assert (=> (>= 10000 x113) (= (x103 x113) (x141 x113))))
(assert (x83 x33))
(assert (x83 x40))
(assert (x243 x95))
(assert (and (x206 32 x230) (x10 32 x230) (= (x146 32 x230) (* x230 32)) (and (= (- (* x230 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x230)) (x146 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x230)) (= (* (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x146 32 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x146 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x100 32 x230) (x251 32 x230) (x235 32 x230)))
(assert (= (x141 18446744073709551615) (x103 18446744073709551615)))
(assert (x20 x15))
(assert (x83 x88))
(assert (x83 x137))
(assert (x83 x187))
(assert (=> (>= 10000 (x248 289)) (= (x141 (x248 289)) (x103 (x248 289)))))
(assert (x57 x82))
(assert (and (x48 x16 452312848583266388373324160190187140051835877600158453279131187530910662656) (=> (and (> x16 0) (< 0 452312848583266388373324160190187140051835877600158453279131187530910662656)) (and (> (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x47 x16 452312848583266388373324160190187140051835877600158453279131187530910662656)) (- x16 452312848583266388373324160190187140051835877600158453279131187530910662656)) (<= (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x47 x16 452312848583266388373324160190187140051835877600158453279131187530910662656)) x16))) (= (* (x47 x16 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656) (- x16 (x120 452312848583266388373324160190187140051835877600158453279131187530910662655 x16))) (x112 x16 452312848583266388373324160190187140051835877600158453279131187530910662656) (x166 x16 452312848583266388373324160190187140051835877600158453279131187530910662656) (x118 x16 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x226 2))
(assert (= (x43 193) 0))
(assert (x83 x9))
(assert (= x161 (and x87 x65)))
(assert (= (x115 x11) 0))
(assert (x57 18446744073709551615))
(assert (x42 x95))
(assert (not x260))
(assert (= (and x241 (not x126)) x77))
(assert (=> (<= (x248 257) 10000) (= (x141 (x248 257)) (x103 (x248 257)))))
(assert (x83 x184))
(assert (= (=> (= x236 x32) x208) x106))
(assert (=> (<= x199 10000) (= (x103 x199) (x141 x199))))
(assert (=> (<= x184 10000) (= (x141 x184) (x103 x184))))
(assert (x83 x220))
(assert (x83 x35))
(assert (x222 x275))
(assert (x57 4294967295))
(assert (and (= 27 (x146 9 3)) (= 81 (x146 9 9)) (= 9 (x146 3 3)) (= (x146 27 3) 81)))
(assert (x163 (x248 193)))
(assert (and (x253 x137 18446744073709551616) (x211 x137 18446744073709551616) (x26 x137 18446744073709551616) (=> (> 18446744073709551616 0) (= (+ (* 18446744073709551616 (x47 x137 18446744073709551616)) (x250 x137 18446744073709551616)) x137))))
(assert (x83 x182))
(assert (=> (<= (x248 321) 10000) (= (x141 (x248 321)) (x103 (x248 321)))))
(assert (= (x91 (x141 (x248 257))) (x248 257)))
(assert (= (x248 225) (x91 (x141 (x248 225)))))
(assert (x83 x205))
(assert (x163 (x248 225)))
(assert (= 0 (x43 257)))
(assert (x83 x55))
(assert (and (x253 x95 262144) (x211 x95 262144) (x26 x95 262144) (=> (> 262144 0) (= (+ (* 262144 (x47 x95 262144)) (x250 x95 262144)) x95))))
(assert (= (x103 97199519776808029778168953285215024309695167179541945341261303444449322336256) (x141 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (x83 x170))
(assert (x222 6277101735386680763835789423207666416102355444464034512896))
(assert (x222 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x83 x266))
(assert (x213 x216))
(assert (= (x91 (x103 7776000)) 7776000))
(assert (= 131072 (x91 (x103 131072))))
(assert (= (or x144 x5) x274))
(assert (and (x206 256 x256) (x10 256 x256) (= (x146 256 x256) (* x256 256)) (and (= (- (* x256 256) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x256)) (x146 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x256)) (= (* (- x256 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (x146 256 (- x256 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x146 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x256 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 256 (- x256 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x256 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x100 256 x256) (x251 256 x256) (x235 256 x256)))
(assert (x83 x45))
(assert (= x241 (or x41 x274)))
(assert (x83 x256))
(assert (= x39 (and x161 x36)))
(assert (x83 x147))
(assert (x83 x162))
(assert (x83 x261))
(assert (= (x91 (x141 x187)) x187))
(assert (x226 18446744073709551616))
(assert (x237 x230))
(assert (x222 256))
(assert (= (x141 65536) (x103 65536)))
(assert (x83 x287))
(assert (= (x141 (x91 x217)) x217))
(assert (x163 x113))
(assert (x83 x50))
(assert (x57 x45))
(assert (= x164 (or x200 x59 x168)))
(assert (= (x103 7776000) (x141 7776000)))
(assert (x83 x249))
(assert (x83 x155))
(assert (x83 x94))
(assert (= (x91 (x103 346787896)) 346787896))
(assert (= x87 (and (not x228) x75)))
(assert (= (x248 193) (x91 (x141 (x248 193)))))
(assert (x83 x204))
(assert (= (x115 x66) 0))
(assert (= (=> (and (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x12 1))) (= x236 x217) (= x282 x92) (= x268 5) (= x21 x107)) x152) x171))
(assert (x226 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x83 x66))
(assert (= (x103 131072) (x141 131072)))
(assert (= (x141 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x41 (and x24 x197)))
(assert (x226 x45))
(assert (x57 65536))
(assert (x57 x172))
(assert (x83 x124))
(assert (x83 x145))
(assert (x163 x184))
(assert (x83 x82))
(assert (x83 x98))
(assert (x83 x218))
(assert (= x219 (not (and (= x170 (x58 (+ x162 64))) (= x155 (ite (= 0 x66) (x91 x217) (ite (= x66 32) x268 (ite (= 64 x66) x162 (x111 x66))))) (= (x58 (+ x162 32)) x35) (= (x58 (+ x35 32)) x125) (= (ite (= 0 x11) (x91 x217) (ite (= 32 x11) x268 (ite (= x11 64) x162 (x111 x11)))) x121) (= x195 (x120 1461501637330902918203684832716283019655932542975 x45)) (= x162 x66) (= x277 96) (= x266 (ite (= x170 0) (x91 x217) (ite (= 32 x170) x268 (ite (= x170 64) x162 (x111 x170))))) (= x169 (= x277 96)) (= (x58 (+ 32 x162)) x11) (= x288 (x120 4294967295 x172))))))
(assert (= x260 (=> (and (not (= x187 x199)) (>= x79 0) (= x178 (< 0 (x30 (x141 x184)))) (= 24706623 x220) (= (x89 (x141 x187)) x149) (<= x50 1461501637330902918203684832716283019655932542975) (<= 0 x263) (= x182 x242) (<= x184 1461501637330902918203684832716283019655932542975) (= (x30 (x141 x199)) x147) x67 (= false x22) (= x231 x113) (= x189 (x52 (x141 x113) (x103 1) 0)) (not (= x184 x187)) (< 0 x147) (= x157 1) (<= 0 x285) (<= x263 1461501637330902918203684832716283019655932542975) (>= x136 0) (= x33 x124) (= x261 (x148 (- x287 4))) (= (x89 (x141 x184)) x142) (= x95 (x167 x285 160)) (= 24706623 x203) (= x124 x72) (>= x33 0) (= x113 x55) (<= 0 x149) (= x25 false) (= x67 (< 0 (x30 (x141 x187)))) (>= 1461501637330902918203684832716283019655932542975 x72) (>= x249 0) (> x184 0) (> 346787896 x203) (= x285 (x224 x189)) (= x54 x159) (= x113 x73) (> 1666326814 x203) (= true x252) (<= x104 1461501637330902918203684832716283019655932542975) (>= x104 0) (= (< 0 (x30 (x141 x199))) x186) (> 549686827 x203) (>= 1461501637330902918203684832716283019655932542975 x249) (and (= true (<= x287 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x287 35)) (<= 0 x142) (= x54 x259) (<= x136 1461501637330902918203684832716283019655932542975) (= x90 (x120 131072 x95)) (= x76 false) x186 (= x182 0) x178 (< 0 x199) (= x249 x84) (>= 1461501637330902918203684832716283019655932542975 x187) (not (= x203 16635278)) (not (= x184 x199)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x285) (= (x89 (x141 x199)) x79) (>= x259 0) (>= x50 0) (not (> 4 x287)) (>= x72 0) (<= x259 1461501637330902918203684832716283019655932542975) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x261) true) (< x261 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x261))) (>= 1461501637330902918203684832716283019655932542975 x33) (= x62 (= x90 131072)) (>= 1461501637330902918203684832716283019655932542975 x199) (> x187 0)) (and (=> (and x62 (and (= x271 (x120 1 x216)) (= x131 (x165 (- x271 (ite x267 1 0)))) (= (ite (> x271 0) x15 (x120 127 x15)) x210) (= x230 (x47 x275 32)) (= x15 (x47 x216 2)) (= (x58 (+ 128 x244)) x21) (= x275 (x58 (+ x210 31))) (= x216 (x60 x32)) (= x196 (x165 (* 32 x230))) (= x267 (> 32 x210)) (= x228 (= x210 0)) (= (x52 (x141 x113) (x103 5) 0) x32) (> x131 0) (= x244 (x58 (+ 32 x196))))) (and (=> (and (not x228) (= x65 (< 31 x210))) (and (=> (and (and (= x36 (< 192 x258)) (= x258 (x58 (+ x210 160))) (= x2 (x240 x32 0)) (= (x188 x2 1) x177) (= (x180 x2) x9)) x65) (and (=> x36 x239) (=> (not x36) x106))) (=> (and (not x65) (and (= (x165 (* 256 x256)) x289) (= (x47 x205 256) x256) (= (x141 x113) x236) (= x205 (x60 x32)))) x208))) (=> (and (= x236 (x141 x113)) x228) x208))) (=> (and (and (= 128 x107) (= x217 (x141 x113)) (= x92 (x103 0)) (= 1 x268)) (not x62)) x152)))))
(assert (= (x141 (x91 x92)) x92))
(assert (= (x91 (x103 18446744073709551615)) 18446744073709551615))
(assert (x163 x187))
(assert (x226 x95))
(assert (x83 x95))
(assert (x226 32))
(assert (= (x141 1461501637330902918203684832716283019655932542975) (x103 1461501637330902918203684832716283019655932542975)))
(assert (x83 x3))
(assert (x57 1461501637330902918203684832716283019655932542975))
(assert (x265 x172))
(assert (= (x91 (x141 (x248 321))) (x248 321)))
(assert (= (x141 4294967295) (x103 4294967295)))
(assert (= (or x6 x97) x56))
(assert (=> (<= (x248 353) 10000) (= (x103 (x248 353)) (x141 (x248 353)))))
(assert (x83 x242))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x91 (x103 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= true x8))
(assert (= (x91 (x141 (x248 353))) (x248 353)))
(assert (= (and (not x197) x24) x74))
(assert (= (and x87 (not x65)) x168))
(assert (= (x103 1666326814) (x141 1666326814)))
(assert (x163 (x248 257)))
(assert (x57 x216))
(assert (x83 x281))
(assert (and (x48 x275 32) (=> (and (> x275 0) (< 0 32)) (and (> (* 32 (x47 x275 32)) (- x275 32)) (<= (* 32 (x47 x275 32)) x275))) (= (* (x47 x275 32) 32) (- x275 (x120 31 x275))) (x112 x275 32) (x166 x275 32) (x118 x275 32)))
(assert (x83 x11))
(assert (and (x253 x95 65536) (x211 x95 65536) (x26 x95 65536) (=> (> 65536 0) (= (+ (* 65536 (x47 x95 65536)) (x250 x95 65536)) x95))))
(assert (x83 x73))
(assert (and (x253 x45 1461501637330902918203684832716283019655932542976) (x211 x45 1461501637330902918203684832716283019655932542976) (x26 x45 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x47 x45 1461501637330902918203684832716283019655932542976)) (x250 x45 1461501637330902918203684832716283019655932542976)) x45))))
(assert (= (x115 x170) 0))
(assert (x83 x285))
(assert (= (x141 346787896) (x103 346787896)))
(assert (x83 x199))
(assert (= (and (not x246) x164) x6))
(assert (x83 x125))
(assert (= (x43 161) 0))
(assert (= (x47 x285 1461501637330902918203684832716283019655932542976) (x167 x285 160)))
(assert (= x114 (or x77 x63)))
(assert (x222 32))
(assert (x57 x137))
(assert (= (x91 (x103 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x83 x257))
(assert (x57 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x83 x203))
(assert (x57 131072))
(assert (x83 x72))
(assert (x83 x192))
(assert (= (x141 4294967296) (x103 4294967296)))
(assert (x83 x191))
(assert (x83 x216))
(assert (and (x48 x285 1461501637330902918203684832716283019655932542976) (=> (and (> x285 0) (< 0 1461501637330902918203684832716283019655932542976)) (and (> (* 1461501637330902918203684832716283019655932542976 (x47 x285 1461501637330902918203684832716283019655932542976)) (- x285 1461501637330902918203684832716283019655932542976)) (<= (* 1461501637330902918203684832716283019655932542976 (x47 x285 1461501637330902918203684832716283019655932542976)) x285))) (= (* (x47 x285 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (- x285 (x120 1461501637330902918203684832716283019655932542975 x285))) (x112 x285 1461501637330902918203684832716283019655932542976) (x166 x285 1461501637330902918203684832716283019655932542976) (x118 x285 1461501637330902918203684832716283019655932542976)))
(assert (x57 x95))
(assert (x83 x149))
(assert (= (x103 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x141 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x83 x268))
(assert (x226 x15))
(assert (=> (<= (x248 161) 10000) (= (x141 (x248 161)) (x103 (x248 161)))))
(assert (x222 x216))
(assert (= (x91 (x141 x113)) x113))
(assert (x237 256))
(assert (x245 x45))
(assert (x83 x131))
(assert (x83 x104))
(assert (= (+ (x91 x2) 1) (x91 (x188 x2 1))))
(assert (and (x253 x95 131072) (x211 x95 131072) (x26 x95 131072) (=> (> 131072 0) (= (+ (* 131072 (x47 x95 131072)) (x250 x95 131072)) x95))))
(assert (x226 65536))
(assert (= x239 (=> (and (= x176 (not (< 224 x258))) (= x204 (x180 x177))) (and x106 x176))))
(assert (= (x91 (x103 4294967295)) 4294967295))
(assert (x83 x275))
(assert (= (and x161 (not x36)) x223))
(assert (= x199 (x91 (x141 x199))))
(assert (x83 x81))
(assert (x222 1461501637330902918203684832716283019655932542976))
(assert (x163 (x248 353)))
(assert (x272 x82))
(assert (x83 x234))
(assert (= (or x223 x39) x200))
(assert (x83 x230))
(assert (x83 x231))
(assert (x83 x214))
(assert (and (x253 x82 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x211 x82 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x26 x82 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x47 x82 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x250 x82 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x82))))
(assert (x83 x172))
(assert (x222 2))
(assert (and (x48 x216 2) (=> (and (> x216 0) (< 0 2)) (and (> (* 2 (x47 x216 2)) (- x216 2)) (<= (* 2 (x47 x216 2)) x216))) (= (* (x47 x216 2) 2) (- x216 (x120 1 x216))) (x112 x216 2) (x166 x216 2) (x118 x216 2)))
(assert (x83 x289))
(assert (x226 x216))
(assert (x83 x21))
(assert (x83 x159))
(assert (x83 x15))
(assert (and (x253 x15 128) (x211 x15 128) (x26 x15 128) (=> (> 128 0) (= (+ (* 128 (x47 x15 128)) (x250 x15 128)) x15))))
(assert (= (or x201 x56) x24))
(assert (x83 x90))
(assert (= (x91 (x103 549686827)) 549686827))
(assert (= (x47 x285 6277101735386680763835789423207666416102355444464034512896) (x167 x285 192)))
(assert (= (and x246 x164) x97))
(assert (x57 1))
(assert (x83 x157))
(assert (x7 x137))
(assert (= (and x8 (not x62)) x201))
(assert (= x184 (x91 (x141 x184))))
(assert (x83 x108))
(assert (x83 x215))
(assert (= (=> (and (= x126 (> x215 x185)) (or (and (and (= 0 x172) (= (x120 65536 x95) x88) (= x119 (= 65536 x88)) (= (ite x119 0 x285) x45)) x126) (and (and (= x95 x172) (= x45 x285)) (not x126)))) x219) x110))
(assert (x83 x244))
(assert (and (x48 x285 6277101735386680763835789423207666416102355444464034512896) (=> (and (> x285 0) (< 0 6277101735386680763835789423207666416102355444464034512896)) (and (> (* 6277101735386680763835789423207666416102355444464034512896 (x47 x285 6277101735386680763835789423207666416102355444464034512896)) (- x285 6277101735386680763835789423207666416102355444464034512896)) (<= (* 6277101735386680763835789423207666416102355444464034512896 (x47 x285 6277101735386680763835789423207666416102355444464034512896)) x285))) (= (* (x47 x285 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896) (- x285 (x120 6277101735386680763835789423207666416102355444464034512895 x285))) (x112 x285 6277101735386680763835789423207666416102355444464034512896) (x166 x285 6277101735386680763835789423207666416102355444464034512896) (x118 x285 6277101735386680763835789423207666416102355444464034512896)))
(assert (x226 128))
(assert (x163 x281))
(assert (x226 1461501637330902918203684832716283019655932542976))
(assert (x83 x54))
(assert (x222 x16))
(assert (x83 x79))
(assert (= (x141 24706623) (x103 24706623)))
(assert (x83 x136))
(assert (x57 127))
(assert (x83 x185))
(assert (x222 x285))
(assert (x83 x195))
(assert (= x152 (=> (= (= x92 (x103 0)) x197) (and (=> (and (not x197) (and (and (= x191 (x58 (+ x107 4))) (= (> x94 0) x156)) (or (and x156 (and (= x98 1) (< x40 4294967296))) (and (= x94 x98) (not x156))))) x51) (=> (and x197 (and (= (x167 x285 192) x185) (= x107 x162))) x110)))))
(assert (= (and x241 x126) x63))
(assert (= (x91 (x141 (x248 161))) (x248 161)))
(assert (x163 x199))
(assert (and (x253 x172 4294967296) (x211 x172 4294967296) (x26 x172 4294967296) (=> (> 4294967296 0) (= (+ (* 4294967296 (x47 x172 4294967296)) (x250 x172 4294967296)) x172))))
(assert (x163 (x248 289)))
(assert (= (x91 (x103 97199519776808029778168953285215024309695167179541945341261303444449322336256)) 97199519776808029778168953285215024309695167179541945341261303444449322336256))
(assert (= (x248 289) (x91 (x141 (x248 289)))))
(assert (x83 x263))
(assert (=> (>= 10000 x281) (= (x141 x281) (x103 x281))))
(assert (= 0 (x43 160)))
(assert (x83 x271))
(assert (x83 x258))
(assert (x226 4294967296))
(assert (= (x91 (x103 4294967296)) 4294967296))
(assert (x83 x210))
(assert (= (x91 (x103 16635278)) 16635278))
(assert (= x144 (and x74 (not x156))))
(assert (= 1666326814 (x91 (x103 1666326814))))
(assert (= (and x228 x75) x59))
(assert (and (x253 x82 32) (x211 x82 32) (x26 x82 32) (=> (> 32 0) (= (+ (* 32 (x47 x82 32)) (x250 x82 32)) x82))))
(assert (x237 x256))
(assert (= (=> (and (= x246 (< 0 x12)) (= x3 (x181 128)) (= x16 (x248 160)) (< 0 x3) (= (x167 x16 248) x12)) (and (=> x246 x37) (=> (and (= (x103 0) x282) (not x246)) x171))) x208))
(assert (x83 x290))
(assert (x83 x142))
(assert (x83 x196))
(assert (x226 x137))
(assert (x83 x259))
(assert (= x51 (=> (and (= x82 (x58 (+ 31 x40))) (= (x120 18446744073709551615 x137) x192) (= x185 x218) (= x137 (x132 x107)) (not (= 0 x98)) (not (> x218 18446744073709551615)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x40) (and (= (<= x40 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x40 32)))) (= (x58 (+ x192 7776000)) x218) (= (x58 (+ x108 x107)) x234) (= (x120 115792089237316195423570985008687907853269984665640564039457584007913129639904 x82) x108) (= x234 x162)) x110)))
(assert (= 0 (x43 225)))
(assert (x163 (x248 161)))
(check-sat)
(exit)
