(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x91 0)) (((x69 (x291 x91) (x293 x91) (x161 Int)) (x32 (x90 Int)) (x85 (x196 x91) (x78 Int)))))
(declare-fun x213 () Bool)
(declare-fun x156 () Int)
(declare-fun x349 () Int)
(declare-fun x218 () Int)
(declare-fun x174 () Int)
(declare-fun x66 () Int)
(declare-fun x50 (Int Int) Int)
(declare-fun x271 () Bool)
(declare-fun x230 () Int)
(declare-fun x263 () Bool)
(declare-fun x130 (Int) Int)
(declare-fun x113 () Bool)
(declare-fun x199 () Int)
(declare-fun x313 () Int)
(declare-fun x56 () Int)
(declare-fun x216 () Bool)
(declare-fun x264 () Bool)
(declare-fun x64 () Int)
(declare-fun x109 () Bool)
(declare-fun x191 () Int)
(declare-fun x309 () Int)
(declare-fun x20 () Int)
(declare-fun x26 () Int)
(declare-fun x193 () Int)
(declare-fun x96 () Bool)
(declare-fun x75 () Int)
(declare-fun x345 (Int Int) Int)
(declare-fun x204 () Bool)
(declare-fun x114 () Int)
(declare-fun x338 () Bool)
(declare-fun x30 () Int)
(declare-fun x319 () Int)
(declare-fun x343 () Int)
(declare-fun x299 () Bool)
(declare-fun x326 () Int)
(declare-fun x210 () Bool)
(declare-fun x54 () Bool)
(declare-fun x35 () Bool)
(declare-fun x23 () Int)
(declare-fun x125 () Int)
(declare-fun x42 () Bool)
(declare-fun x222 () Int)
(declare-fun x352 () Int)
(declare-fun x58 () Int)
(declare-fun x4 () Bool)
(declare-fun x202 () Int)
(declare-fun x61 () Bool)
(declare-fun x92 (x91) Int)
(declare-fun x57 () Bool)
(declare-fun x244 () Int)
(declare-fun x173 () Bool)
(declare-fun x80 (x91) Int)
(declare-fun x5 () Bool)
(declare-fun x269 () Bool)
(declare-fun x251 () Int)
(declare-fun x3 () Int)
(declare-fun x120 () Bool)
(declare-fun x211 () Int)
(declare-fun x132 () Int)
(declare-fun x145 () Int)
(declare-fun x305 () Bool)
(declare-fun x28 () Int)
(declare-fun x15 () Int)
(declare-fun x209 () Bool)
(declare-fun x279 () Bool)
(declare-fun x33 (Int Int) Int)
(declare-fun x181 () Bool)
(declare-fun x306 () x91)
(declare-fun x267 () Bool)
(declare-fun x62 () Int)
(declare-fun x82 () Int)
(declare-fun x335 () Bool)
(declare-fun x119 () Bool)
(declare-fun x8 () x91)
(declare-fun x37 () Int)
(declare-fun x134 () Int)
(declare-fun x296 () Bool)
(declare-fun x274 () Bool)
(declare-fun x149 () Int)
(declare-fun x359 () Int)
(declare-fun x126 () Int)
(declare-fun x224 () Int)
(declare-fun x150 (Int) x91)
(declare-fun x344 () Int)
(declare-fun x190 () Bool)
(declare-fun x167 () Int)
(declare-fun x59 () Bool)
(declare-fun x302 () Int)
(declare-fun x258 () Int)
(declare-fun x348 () x91)
(declare-fun x169 () Bool)
(declare-fun x325 () Int)
(declare-fun x138 () Bool)
(declare-fun x175 () Int)
(declare-fun x346 () Bool)
(declare-fun x88 () Bool)
(declare-fun x185 () Bool)
(declare-fun x135 () x91)
(declare-fun x83 () Bool)
(declare-fun x65 () Int)
(declare-fun x106 () Int)
(declare-fun x123 () Int)
(declare-fun x232 () Bool)
(declare-fun x13 () Bool)
(declare-fun x189 () Int)
(declare-fun x301 () Bool)
(declare-fun x118 () Int)
(declare-fun x144 () Int)
(declare-fun x29 () Bool)
(declare-fun x10 () Int)
(declare-fun x330 (Int) Int)
(declare-fun x157 () Bool)
(declare-fun x268 () Bool)
(declare-fun x188 () Int)
(declare-fun x280 () Int)
(declare-fun x98 () Int)
(declare-fun x250 () Int)
(declare-fun x283 () x91)
(declare-fun x97 () Bool)
(declare-fun x81 () Bool)
(declare-fun x233 () x91)
(declare-fun x215 () Int)
(declare-fun x160 () Bool)
(declare-fun x25 () Int)
(declare-fun x298 () Int)
(declare-fun x286 () Bool)
(declare-fun x275 () Bool)
(declare-fun x340 () x91)
(declare-fun x86 () Int)
(declare-fun x201 () Int)
(declare-fun x116 () Int)
(declare-fun x112 () Bool)
(declare-fun x168 () Int)
(declare-fun x87 () Bool)
(declare-fun x259 () Bool)
(declare-fun x276 () Int)
(declare-fun x237 (Int Int) Int)
(declare-fun x312 () Int)
(declare-fun x353 () Bool)
(declare-fun x99 () Int)
(declare-fun x358 (x91) Int)
(declare-fun x17 () Int)
(declare-fun x277 (x91) Int)
(declare-fun x74 () Int)
(declare-fun x117 () Int)
(declare-fun x207 () Bool)
(declare-fun x198 () Bool)
(declare-fun x38 () Bool)
(declare-fun x203 () Bool)
(declare-fun x104 () Bool)
(declare-fun x27 () Int)
(declare-fun x192 () Int)
(declare-fun x310 () Bool)
(declare-fun x162 () Int)
(declare-fun x292 () Int)
(declare-fun x278 () Int)
(declare-fun x206 () Bool)
(declare-fun x166 () Bool)
(declare-fun x240 () Int)
(declare-fun x153 () Int)
(declare-fun x226 () Int)
(declare-fun x321 (Int) Int)
(declare-fun x212 () Bool)
(declare-fun x256 () Int)
(declare-fun x300 () Int)
(declare-fun x89 () Int)
(declare-fun x55 () Bool)
(declare-fun x94 () x91)
(declare-fun x36 () Bool)
(declare-fun x217 () Int)
(declare-fun x163 () Bool)
(declare-fun x71 (x91) Int)
(declare-fun x195 () Int)
(declare-fun x171 () Int)
(declare-fun x187 (Int Int) Int)
(declare-fun x51 () Bool)
(declare-fun x84 () Bool)
(declare-fun x111 () Bool)
(declare-fun x101 () Int)
(declare-fun x332 () Int)
(declare-fun x93 () Bool)
(declare-fun x186 () Int)
(declare-fun x327 () x91)
(declare-fun x7 () Int)
(declare-fun x178 () Bool)
(declare-fun x260 () Int)
(declare-fun x228 () Bool)
(declare-fun x242 () Int)
(declare-fun x128 () Bool)
(declare-fun x350 () Int)
(declare-fun x127 () Bool)
(declare-fun x239 () Bool)
(declare-fun x284 () Int)
(declare-fun x164 () Int)
(declare-fun x234 () Int)
(declare-fun x282 () Bool)
(declare-fun x200 () Int)
(declare-fun x295 () Bool)
(declare-fun x133 () Int)
(declare-fun x147 () Int)
(declare-fun x108 () Int)
(declare-fun x16 (x91) Int)
(declare-fun x107 () Int)
(declare-fun x225 () Int)
(declare-fun x183 () Int)
(declare-fun x205 () Int)
(declare-fun x241 () Int)
(declare-fun x105 () Bool)
(declare-fun x129 () Int)
(declare-fun x342 () Bool)
(declare-fun x115 () Int)
(declare-fun x122 () Int)
(declare-fun x9 () Int)
(declare-fun x131 () Int)
(declare-fun x303 () Int)
(declare-fun x18 () Bool)
(declare-fun x220 () Int)
(declare-fun x19 () Int)
(declare-fun x333 () Int)
(declare-fun x255 () Int)
(declare-fun x288 () Bool)
(declare-fun x208 () Bool)
(declare-fun x152 () Int)
(declare-fun x41 () Bool)
(declare-fun x48 () Int)
(declare-fun x317 () Int)
(declare-fun x238 () Int)
(declare-fun x229 () Int)
(declare-fun x287 () Int)
(declare-fun x21 (Int Int) Int)
(declare-fun x231 () Int)
(declare-fun x102 () Int)
(declare-fun x314 () Int)
(declare-fun x43 (x91) Int)
(declare-fun x357 () x91)
(declare-fun x100 () Bool)
(declare-fun x265 () Int)
(declare-fun x124 () Int)
(declare-fun x63 () Bool)
(declare-fun x172 () Int)
(declare-fun x316 () x91)
(declare-fun x6 () Int)
(declare-fun x179 () Int)
(declare-fun x227 () Int)
(declare-fun x254 () Int)
(declare-fun x45 () Bool)
(declare-fun x70 () Int)
(declare-fun x77 () Int)
(declare-fun x355 () Int)
(declare-fun x304 () Bool)
(declare-fun x214 () Int)
(declare-fun x14 () x91)
(declare-fun x337 () Int)
(declare-fun x261 () Int)
(declare-fun x180 () Int)
(declare-fun x223 () x91)
(declare-fun x270 () Bool)
(declare-fun x40 () Int)
(declare-fun x262 () Int)
(declare-fun x336 () Int)
(declare-fun x347 () Int)
(declare-fun x272 () Bool)
(declare-fun x290 () Int)
(declare-fun x22 () Bool)
(declare-fun x141 () Int)
(declare-fun x47 () Int)
(declare-fun x177 () Int)
(declare-fun x46 () Int)
(define-fun x324 ((x91 x91) (x151 Int)) x91 (ite ((_ is x85) x91) (x85 (x196 x91) (+ x151 (x78 x91))) (ite ((_ is x69) x91) (x69 (x291 x91) (x293 x91) (+ x151 (x161 x91))) (x32 (+ x151 (x90 x91))))))
(define-fun x235 ((x182 Int)) Int (ite (and (<= 0 x182) (< x182 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x182 (- x182 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x320 ((x182 Int)) Int (ite (and (>= x182 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x182 0)) (+ x182 115792089237316195423570985008687907853269984665640564039457584007913129639936) x182))
(define-fun x68 ((x182 Int)) Int (ite (and (>= x182 0) (< x182 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x182 (ite (and (>= x182 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x182)) (- x182 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x182) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x182)) (+ x182 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x237 x182 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x221 ((x24 Int)) Bool (and (>= x24 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x24)))
(define-fun x176 ((x24 Int) (x143 Int)) Bool (= (x50 x143 x24) (x50 x24 x143)))
(define-fun x289 ((x24 Int) (x143 Int)) Bool (and (=> (and (< x24 0) (< 0 x143)) (< (x50 x24 x143) 0)) (=> (and (< x24 0) (< x143 0)) (< 0 (x50 x24 x143))) (=> (and (< 0 x24) (< x143 0)) (> 0 (x50 x24 x143))) (=> (and (< 0 x24) (> x143 0)) (< 0 (x50 x24 x143)))))
(define-fun x158 ((x24 Int) (x143 Int)) Bool (=> (and (< 0 x24) (< 0 x143)) (= (= x143 (x21 (x68 (x50 x24 x143)) x24)) (< (x50 x24 x143) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x315 ((x24 Int) (x143 Int)) Bool (=> (and (not (= 0 x24)) (not (= x143 0))) (and (= x143 (x21 (x50 x24 x143) x24)) (= x24 (x21 (x50 x24 x143) x143)))))
(define-fun x60 ((x24 Int) (x143 Int)) Bool (=> (and (> x24 0) (< 0 x143)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 x24 x143)) (< (x21 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24) x143))))
(define-fun x39 ((x24 Int) (x143 Int)) Bool (and (= (x68 (x50 (- x24 115792089237316195423570985008687907853269984665640564039457584007913129639936) x143)) (x68 (x50 x24 x143))) (= (x68 (x50 x24 (- x143 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x68 (x50 x24 x143))) (= (x68 (x50 (- x24 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x143 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x68 (x50 x24 x143)))))
(define-fun x49 ((x24 Int) (x143 Int)) Bool (and (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x143) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x143)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x24) (< 0 x24))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x143) (x21 57896044618658097711785492504343953926634992332820282019728792003956564819968 x24)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x50 x24 (- x143 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x143) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x143)) (and (> x24 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x24 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x21 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x143)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x24)) (<= (x50 (- x24 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x143 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 0 x143) (<= x143 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x24) (<= x24 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x24) (x21 57896044618658097711785492504343953926634992332820282019728792003956564819968 x143)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x50 (- x24 115792089237316195423570985008687907853269984665640564039457584007913129639936) x143)))) (=> (and (and (> x24 0) (<= x24 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x143 0) (<= x143 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x21 57896044618658097711785492504343953926634992332820282019728792003956564819967 x143) x24) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x50 x24 x143))))))
(define-fun x253 ((x24 Int) (x143 Int)) Bool (and (x39 x24 x143) (x49 x24 x143) (x158 x24 x143) (x289 x24 x143) (x60 x24 x143) (x176 x24 x143) (x315 x24 x143)))
(define-fun x351 ((x24 Int)) Bool (and (= 0 (x50 0 x24)) (= (x50 x24 0) 0)))
(define-fun x249 ((x24 Int)) Bool (and (= (x50 x24 1) x24) (= (x50 1 x24) x24)))
(define-fun x1 ((x24 Int)) Bool (and (x351 x24) (x249 x24)))
(define-fun x103 ((x24 Int) (x143 Int)) Bool (=> (and (< 0 x24) (> x143 0)) (and (>= (x21 x24 x143) 0) (>= x24 (x21 x24 x143)))))
(define-fun x341 ((x24 Int) (x143 Int)) Bool (=> (and (and (< x143 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 1 x143)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x24) (<= 0 x24))) (and (< (x21 x24 x143) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x21 x24 x143) 0))))
(define-fun x311 ((x24 Int) (x143 Int)) Bool (=> (and (> x24 x143) (> x143 1)) (> x24 (x21 x24 x143))))
(define-fun x31 ((x24 Int) (x143 Int)) Bool (=> (and (> x24 0) (< 0 x143)) (= (> x143 x24) (= 0 (x21 x24 x143)))))
(define-fun x294 ((x24 Int) (x143 Int)) Bool (=> (and (< 0 x143) (< 0 x24)) (and (< (- x24 x143) (x50 (x21 x24 x143) x143)) (<= (x50 (x21 x24 x143) x143) x24))))
(define-fun x12 ((x24 Int) (x143 Int)) Bool (and (x311 x24 x143) (x341 x24 x143) (x103 x24 x143) (x294 x24 x143) (x31 x24 x143)))
(define-fun x155 ((x24 Int)) Bool (= 0 (x21 0 x24)))
(define-fun x297 ((x24 Int)) Bool (= x24 (x21 x24 1)))
(define-fun x318 ((x24 Int)) Bool (=> (not (= 0 x24)) (= 1 (x21 x24 x24))))
(define-fun x53 ((x24 Int)) Bool (and (x318 x24) (x155 x24) (x297 x24)))
(define-fun x2 ((x24 Int)) Bool (and (= (x345 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24) x24) (= (x345 x24 115792089237316195423570985008687907853269984665640564039457584007913129639935) x24)))
(define-fun x323 ((x24 Int)) Bool (and (= (x345 x24 0) 0) (= 0 (x345 0 x24))))
(define-fun x281 ((x24 Int)) Bool (= x24 (x345 x24 x24)))
(define-fun x165 ((x24 Int)) Bool (and (x2 x24) (x281 x24) (x323 x24)))
(define-fun x11 ((x24 Int) (x143 Int)) Bool (= (x345 x143 x24) (x345 x24 x143)))
(define-fun x139 ((x24 Int) (x143 Int)) Bool (and (>= (x345 x24 x143) 0) (=> (>= x143 0) (<= (x345 x24 x143) x143)) (=> (>= x24 0) (>= x24 (x345 x24 x143)))))
(define-fun x246 ((x24 Int) (x143 Int)) Bool (and (x139 x24 x143) (x11 x24 x143)))
(define-fun x79 ((x24 Int)) Bool (= (x345 x24 1461501637330902918203684832716283019655932542975) (x237 x24 1461501637330902918203684832716283019655932542976)))
(define-fun x170 ((x24 Int)) Bool (and (x246 x24 1461501637330902918203684832716283019655932542975) (x79 x24)))
(define-fun x197 ((x24 Int) (x143 Int)) Bool (and (> x143 (x237 x24 x143)) (<= 0 (x237 x24 x143))))
(define-fun x354 ((x24 Int) (x143 Int)) Bool (=> (and (< 0 x143) (>= x24 0)) (= (= (x237 x24 x143) x24) (< x24 x143))))
(define-fun x142 ((x24 Int) (x143 Int)) Bool (=> (and (> x143 0) (and (<= x143 x24) (> (+ x143 x143) x24))) (= (x237 x24 x143) (- x24 x143))))
(define-fun x184 ((x24 Int)) Bool (= 0 (x237 0 x24)))
(define-fun x110 ((x24 Int)) Bool (= (x237 x24 1) 0))
(define-fun x334 ((x24 Int)) Bool (= 0 (x237 x24 x24)))
(define-fun x257 ((x24 Int)) Bool (and (x184 x24) (x334 x24) (x110 x24)))
(define-fun x72 ((x24 Int)) Bool (and (= (x187 x24 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x187 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x159 ((x24 Int)) Bool (and (= x24 (x187 x24 0)) (= x24 (x187 0 x24))))
(define-fun x331 ((x24 Int)) Bool (= x24 (x187 x24 x24)))
(define-fun x95 ((x24 Int)) Bool (and (x72 x24) (x331 x24) (x159 x24)))
(define-fun x285 ((x24 Int) (x143 Int)) Bool (= (x187 x24 x143) (x187 x143 x24)))
(define-fun x266 ((x24 Int) (x143 Int)) Bool (and (=> (>= x24 0) (<= x24 (x187 x24 x143))) (>= (+ x24 x143) (x187 x24 x143)) (=> (>= x143 0) (>= (x187 x24 x143) x143))))
(define-fun x322 ((x24 Int) (x143 Int)) Bool (and (x266 x24 x143) (x285 x24 x143)))
(define-fun x146 ((x308 x91)) Int (x80 x308))
(define-fun x76 ((x308 x91)) Int (ite (= x8 x308) x145 (x16 x308)))
(define-fun x67 ((x308 x91)) Int (ite (= x348 x308) x229 (x76 x308)))
(define-fun x339 ((x308 x91)) Int (ite x282 (x16 x308) (x67 x308)))
(define-fun x243 ((x308 x91)) Int (x358 x308))
(define-fun x44 ((x308 x91)) Int (ite (= x308 x340) x205 (x243 x308)))
(define-fun x273 ((x308 Int)) Int (ite (= x308 128) x337 (x321 x308)))
(define-fun x140 ((x308 Int)) Int (ite (= 128 x308) x302 (x273 x308)))
(define-fun x236 ((x308 Int)) Int (ite (= x308 160) x337 (x140 x308)))
(define-fun x148 ((x308 Int)) Int (ite (= 128 x308) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x236 x308)))
(define-fun x247 ((x308 Int)) Int (ite (= x308 132) x122 (x148 x308)))
(define-fun x194 ((x308 Int)) Int (ite (= x308 164) x302 (x247 x308)))
(define-fun x248 ((x308 x91)) Int (ite (= x308 x223) x231 (x339 x308)))
(define-fun x252 ((x308 Int)) Int (ite (= x308 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x330 x308)))
(define-fun x121 ((x308 Int)) Int (ite (= x308 132) x10 (x252 x308)))
(define-fun x137 ((x308 Int)) Int (ite (= 164 x308) x225 (x121 x308)))
(define-fun x356 ((x308 Int)) Int (ite (= 196 x308) x244 (x137 x308)))
(define-fun x34 ((x24 Int) (x143 Int) (x52 Int) (x154 Int)) Bool (=> (and (<= x143 x154) (>= x143 0) (>= x24 0) (<= x24 x52)) (>= (x50 x52 x154) (x50 x24 x143))))
(define-fun x219 ((x24 Int) (x143 Int) (x52 Int) (x154 Int)) Bool (=> (= x52 x24) (= (- (x50 x24 x143) (x50 x52 x154)) (x50 x24 (- x143 x154)))))
(define-fun x329 ((x24 Int)) Bool (=> (and (not (= x24 826074471)) (not (= x24 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= 404098525 x24)) (not (= x24 170435703)) (not (= x24 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (not (= x24 3017275065)) (not (= x24 2835717307)) (not (= 1889567281 x24)) (not (= 117300739 x24)) (not (= 157198259 x24)) (not (= x24 1851080549)) (not (= 3026235284 x24)) (not (= 1461501637330902918203684832716283019655932542975 x24)) (not (= 2376452955 x24)) (not (= x24 1289409798)) (not (= 2514000705 x24)) (< 10000 x24) (not (= x24 3121116754)) (not (= x24 330252341)) (not (= 3337024914 x24)) (not (= 599290589 x24)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24))) (not ((_ is x32) (x150 x24)))))
(assert (x253 x126 (- x244 x352)))
(assert (x221 x131))
(assert (x221 x192))
(assert (x221 x298))
(assert (x221 x183))
(assert (= (x277 (x150 x115)) x115))
(assert (= (x150 2514000705) (x32 2514000705)))
(assert (= (or x268 x296 x45 x22 x275) x109))
(assert (x53 x125))
(assert (= (and x208 (not x84)) x209))
(assert (= (x277 (x150 x10)) x10))
(assert (= (x277 (x32 3017275065)) 3017275065))
(assert (x257 x132))
(assert (= (x150 117300739) (x32 117300739)))
(assert (x221 x312))
(assert (= x63 (or x203 x127)))
(assert (x221 x193))
(assert (x221 x189))
(assert (=> (<= x144 10000) (= (x32 x144) (x150 x144))))
(assert (x221 x242))
(assert (= (x32 330252341) (x150 330252341)))
(assert (x221 x66))
(assert (x221 x172))
(assert (= (x32 3337024914) (x150 3337024914)))
(assert (x221 x116))
(assert (x221 x287))
(assert (= (x277 (x32 330252341)) 330252341))
(assert (= (x150 826074471) (x32 826074471)))
(assert (x12 x164 x337))
(assert (x221 x64))
(assert (x165 1461501637330902918203684832716283019655932542975))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x277 (x32 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (x221 x86))
(assert (x221 x195))
(assert (= (or x42 (and x342 (not x61))) x163))
(assert (x165 x251))
(assert (x221 x201))
(assert (=> (>= 10000 x118) (= (x150 x118) (x32 x118))))
(assert (x329 x10))
(assert (=> (<= x177 10000) (= (x32 x177) (x150 x177))))
(assert (x221 x133))
(assert (x53 x183))
(assert (= x54 (and x301 (not x288))))
(assert (x1 (- x352 x244)))
(assert (x221 x337))
(assert (x221 x359))
(assert (x221 x77))
(assert (= x275 (and (not x166) x299)))
(assert (x221 x205))
(assert (x253 x337 x352))
(assert (x1 x337))
(assert (x1 x352))
(assert (= x55 (and x112 x83)))
(assert (x1 x186))
(assert (x329 x225))
(assert (= x232 (and x212 x335)))
(assert (x221 x350))
(assert (x221 x224))
(assert (x221 x149))
(assert (x221 x191))
(assert (x221 x225))
(assert (x221 x6))
(assert (x221 x46))
(assert (x253 x126 (- x244 x337)))
(assert (= (and x84 x208) x268))
(assert (= (x150 2835717307) (x32 2835717307)))
(assert (x221 x141))
(assert (x221 x174))
(assert (x221 x326))
(assert (x53 x337))
(assert (x221 x234))
(assert (= (=> (and (and (= (+ x99 x244) x349) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x75 x106)) (= x340 (x69 (x150 x115) (x32 3) 0)) (= (+ x106 x75) x82) (= x241 (x243 x340)) (> x116 0) (= x254 (ite (= 0 x70) 1 0)) (= x125 x82) (= x116 (x345 x40 x189)) (= x349 x15) (= (x345 1461501637330902918203684832716283019655932542975 x132) x115) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x99) (= x242 (ite (< 31 x70) 1 0)) (= x171 (ite (= 1 x193) 1 0)) (< (+ x99 x244) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x187 x343 x254) x40) (<= 0 x241) (>= x99 0) (= x205 (x235 (+ x75 x241))) (= x192 x82) (= x276 x75) (= x343 (x345 x171 x242)) (<= 0 x106) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x241) (<= x106 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x352 x349)) (and (>= x131 0) (= x298 x234) (>= 1461501637330902918203684832716283019655932542975 x122) (= x238 x195) (not (= x172 3017275065)) (<= x131 1461501637330902918203684832716283019655932542975) (= x309 x290) (= x251 x195) (= x174 x10) (> 3337024914 x172) (<= x174 1461501637330902918203684832716283019655932542975) (= x86 x251) (not (> 2376452955 x172)) (= x265 (x43 (x150 x225))) (not (= x172 3026235284)) (>= 1461501637330902918203684832716283019655932542975 x251) (> x265 0) (>= x214 0) (= x300 x276) (= x131 x234) (= x18 (= x10 x251)) (not (> 3017275065 x172)) (= x290 0) (<= 0 x174) (= x300 x337) (<= x214 1461501637330902918203684832716283019655932542975) (= 3121116754 x172) (= x56 x122))) (and (=> x18 x138) (=> (and (not x18) (and (and (<= 0 x108) (= x36 (= x108 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (<= x108 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x37 (x345 1461501637330902918203684832716283019655932542975 x251)) (= x357 (x69 (x150 x37) (x32 4) 0)) (= x283 (x69 (x150 x10) x357 0)) (= x108 (x146 x283))) (or x36 (and (not x36) (and (= x20 (x345 1461501637330902918203684832716283019655932542975 x251)) (not (< x108 x337)) (= (x320 (- x108 x337)) x227)))))) x216))) x198))
(assert (= 3026235284 (x277 (x32 3026235284))))
(assert (x221 x9))
(assert (x1 (- x244 x352)))
(assert (x221 x251))
(assert (x221 x215))
(assert (and (x49 2 x186) (= (* x186 2) (x50 2 x186)) (x315 2 x186) (x60 2 x186) (x158 2 x186) (x39 2 x186) (and (= (- (* (- x186 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x186 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x50 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x186 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x186 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (x50 2 (- x186 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 2 x186) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x186)) (x50 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x186)))))
(assert (x219 x337 x352 x126 x244))
(assert (= (x32 170435703) (x150 170435703)))
(assert (x221 x254))
(assert (= (x32 599290589) (x150 599290589)))
(assert (x221 x171))
(assert (x221 x200))
(assert (x1 (- x126 x352)))
(assert (x221 x240))
(assert (x221 x214))
(assert (=> (<= x37 10000) (= (x150 x37) (x32 x37))))
(assert (= (and x4 (not x18)) x97))
(assert (= (x150 404098525) (x32 404098525)))
(assert (= (or x190 (and (not x212) x335) x157 (and x169 x54) (and x232 (not x41)) (and x267 x259) x59 (and x29 x160) (and x301 x288)) x282))
(assert (and (x49 2 x162) (= (* x162 2) (x50 2 x162)) (x315 2 x162) (x60 2 x162) (x158 2 x162) (x39 2 x162) (and (= (- (* (- x162 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x162 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x50 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x162 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x162 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (x50 2 (- x162 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 2 x162) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x162)) (x50 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x162)))))
(assert (= (x277 (x32 1889567281)) 1889567281))
(assert (= (and (not x111) x272) x57))
(assert (x221 x47))
(assert (x221 x115))
(assert (= (and x210 (not x113)) x228))
(assert (x53 x244))
(assert (= (and x181 x104) x203))
(assert (= x342 (or x13 x228 x109)))
(assert (x221 x65))
(assert (= (x277 (x32 3337024914)) 3337024914))
(assert (= 157198259 (x277 (x32 157198259))))
(assert (x221 x314))
(assert (x221 x107))
(assert (x221 x28))
(assert (= (x150 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x32 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (and x232 x41) x160))
(assert (x257 x251))
(assert (= x4 (or x55 (and x112 (not x83)))))
(assert (x221 x262))
(assert (= x190 (and x286 x264)))
(assert (= x65 (x277 (x150 x65))))
(assert (x221 x260))
(assert (x221 x336))
(assert (x221 x284))
(assert (= (and x299 x166) x204))
(assert (x221 x98))
(assert (= x118 (x277 (x150 x118))))
(assert (x221 x99))
(assert (x221 x333))
(assert (x246 x319 x30))
(assert (x221 x162))
(assert (x95 x284))
(assert (= (=> (and (or (not x61) x61) (= (= x202 0) x61)) x207) x338))
(assert (x221 x125))
(assert (x221 x117))
(assert (x221 x62))
(assert (x221 x241))
(assert (x34 x244 x126 x337 x352))
(assert (x221 x123))
(assert (=> (<= x10 10000) (= (x32 x10) (x150 x10))))
(assert (x221 x218))
(assert (=> (>= 10000 x225) (= (x32 x225) (x150 x225))))
(assert (= x22 (and x209 x279)))
(assert (x165 x189))
(assert (x34 x352 x337 x244 x126))
(assert (x221 x230))
(assert (x246 x262 x202))
(assert (= (and x181 (not x104)) x127))
(assert (x221 x37))
(assert (x221 x175))
(assert (x1 (- x352 x126)))
(assert (= (x150 3121116754) (x32 3121116754)))
(assert (x221 x30))
(assert (x221 x302))
(assert (= (x277 (x32 170435703)) 170435703))
(assert (=> (<= x65 10000) (= (x150 x65) (x32 x65))))
(assert (x165 x262))
(assert (x221 x145))
(assert (x53 x102))
(assert (x246 x217 x66))
(assert (= true x51))
(assert (x329 x37))
(assert (x253 x337 (- x352 x126)))
(assert (and (= (x50 3 3) 9) (= 81 (x50 9 9)) (= (x50 27 3) 81) (= 27 (x50 9 3))))
(assert (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x277 (x32 16156842317565293874272834530371880720966471053262404558597773956279093428224))))
(assert (= (x150 1851080549) (x32 1851080549)))
(assert (x253 x352 (- x337 x244)))
(assert (x221 x132))
(assert (x221 x23))
(assert (x221 x40))
(assert (x221 x17))
(assert (= 2514000705 (x277 (x32 2514000705))))
(assert (x221 x19))
(assert (x221 x164))
(assert (x221 x106))
(assert (x221 x144))
(assert (= (=> (and (= x240 (x320 (- x17 4))) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x240) (and (< x240 96) (= (<= x240 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x267) (not (= 404098525 x350)) (< 0 x347) (= x244 x260) (not (= 157198259 x350)) (not (= 117300739 x350)) (= 100 x17) (= x199 128) (= x114 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x292 x65) (not (< x17 4)) (= x118 x225) (= 599290589 x350) (not (= 0 x75)) (= (x43 (x150 x64)) x347) (< x350 826074471)) (and (=> x267 x178) (=> (and (and (= x7 x65) (= true x212)) (not x267)) (and (=> (and (and (= x117 x118) (= x41 true)) x212) (and (=> (not x41) x178) (=> (and (and (>= x303 0) (= (x16 x14) x303) (= x260 x156) (= x14 (x69 (x150 x65) (x32 1) 0)) (= x29 (> x244 x303)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x303)) x41) (and (=> x29 x178) (=> (and (= x111 (> x260 x303)) (not x29)) (and (=> (and (not x111) (and (= (x320 (- x303 x260)) x145) (= (x76 x327) x98) (= x327 (x69 (x150 x118) (x32 1) 0)) (<= 0 x98) (= (x69 (x150 x65) (x32 1) 0) x8) (= (< x124 x98) x305) (= (x320 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x260)) x124) (<= x98 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x305 x178) (=> (and (not x305) (and (= (x235 (+ x260 x98)) x229) (= (> x98 x229) x288))) (and (=> x288 x178) (=> (and (and (= (x69 (x150 x65) (x32 2) 0) x316) (>= x89 0) (= x348 (x69 (x150 x118) (x32 1) 0)) (= (> x260 x89) x169) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x89) (= (x92 x306) x89) (= x306 (x69 (x150 x225) x316 0))) (not x288)) (and (=> x169 x178) (=> (and (not x169) (= (> x260 x89) x264)) (and (=> (and (and (= x189 1) (= x183 x99) (= x106 x126) (= x70 32) (= x256 (x320 (- x89 x260)))) (not x264)) x35) (=> x264 x178))))))))) (=> x111 x178))))))) (=> (not x212) x178))))) x304))
(assert (x165 x40))
(assert (x221 x118))
(assert (x221 x227))
(assert (x221 x332))
(assert (x1 (- x244 x337)))
(assert (= (and x81 x63) x13))
(assert (= x59 (and x111 x272)))
(assert (x221 x202))
(assert (= (x32 1889567281) (x150 1889567281)))
(assert (x221 x220))
(assert (= (x150 1289409798) (x32 1289409798)))
(assert (x221 x177))
(assert (x221 x256))
(assert (x253 x337 (- x352 x244)))
(assert (= x35 (=> (and (or (not x83) x83) (= x83 (= x189 0))) x198)))
(assert (x221 x114))
(assert (= (x277 (x150 x37)) x37))
(assert (x221 x229))
(assert (x95 x47))
(assert (x221 x48))
(assert (= (x277 (x32 826074471)) 826074471))
(assert (x165 x217))
(assert (x165 x62))
(assert (x253 x244 (- x126 x337)))
(assert (= (x277 (x32 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x219 x126 x244 x337 x352))
(assert (x221 x101))
(assert (= x225 (x277 (x150 x225))))
(assert (x165 x202))
(assert (= x271 (=> (and (and (and (= x56 x132) (= (x43 (x150 x225)) x325) (= x101 x309) (= 1851080549 x107) (= x244 x280) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x126) (<= 0 x149) (= (not (= x215 0)) x119) (= (= x126 0) x38) (>= 1461501637330902918203684832716283019655932542975 x6) (= x298 x230) (not (> 1289409798 x107)) (= x230 x149) (<= 0 x292) (>= 1461501637330902918203684832716283019655932542975 x149) (= x10 x292) (= x215 x355) (> 2376452955 x107) x119 (not (> 826074471 x107)) (>= x6 0) (= 0 x101) (<= x132 1461501637330902918203684832716283019655932542975) (<= 0 x126) (not (= 1289409798 x107)) (< 0 x325) (>= 1461501637330902918203684832716283019655932542975 x292) (= x258 0)) (or (and (not x38) (and (= x105 (= 0 x244)) (= (x21 x102 x244) x191) (< 0 x48) (= (x68 (x50 x244 x126)) x102) (= (= x191 x126) x274) (<= 0 x183) (= x48 (x345 x217 x66)) (= (x21 x102 x183) x314) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (= x314 x75) (= x310 (= x183 0)) (= x66 (ite (or x105 x274) 1 0)) (= x217 (ite (not x310) 1 0)))) (and (= x244 x75) x38))) (and (> 2376452955 x226) (= x10 x74) (<= x225 1461501637330902918203684832716283019655932542975) (> x64 0) (= x355 x126) x88 x346 (<= 0 x56) (>= 1461501637330902918203684832716283019655932542975 x238) (<= x77 1461501637330902918203684832716283019655932542975) (= x226 404098525) (<= 0 x25) (= (not (= x175 x152)) x100) (= x19 x280) (< 0 x200) (not (= x226 330252341)) x100 (= x5 (> (x43 (x150 x64)) 0)) (= 1000 x278) (not (= x64 x225)) (= (> (x43 (x150 x225)) 0) x346) (< x226 826074471) (<= 0 x74) (<= 0 x238) (<= 0 x3) (<= x126 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x3 1461501637330902918203684832716283019655932542975) (>= x26 0) (= x26 (x71 (x150 x225))) x5 (<= x74 1461501637330902918203684832716283019655932542975) (= x152 x10) (<= 0 x126) (not (< x226 170435703)) (>= 1461501637330902918203684832716283019655932542975 x64) (= (>= x19 1000) x88) (not (= x226 170435703)) (>= 1461501637330902918203684832716283019655932542975 x56) (= x225 x175) (= (x71 (x150 x64)) x25) (= x133 x3) (<= 0 x77) (= x200 (x43 (x150 x225))) (> x225 0))) x304)))
(assert (x34 x126 x244 x337 x352))
(assert (x221 x238))
(assert (x221 x303))
(assert (x221 x15))
(assert (x221 x179))
(assert (= (and (not x29) x160) x272))
(assert (= 3121116754 (x277 (x32 3121116754))))
(assert (= (x150 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x32 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (= (and x113 x210) x296))
(assert (= (and (not x38) x51) x295))
(assert (x221 x278))
(assert (x221 x355))
(assert (x246 x40 x189))
(assert (x12 x102 x244))
(assert (= (x277 (x32 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x221 x255))
(assert (x219 x126 x244 x352 x337))
(assert (x219 x244 x126 x337 x352))
(assert (= x353 (and (not x36) x97)))
(assert (x221 x309))
(assert (x219 x337 x352 x244 x126))
(assert (x219 x352 x337 x244 x126))
(assert (x1 x162))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x237 x132 1461501637330902918203684832716283019655932542976) (* (x21 x132 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x132)) (x354 x132 1461501637330902918203684832716283019655932542976) (x197 x132 1461501637330902918203684832716283019655932542976) (x142 x132 1461501637330902918203684832716283019655932542976)))
(assert (x221 x58))
(assert (x221 x231))
(assert (x219 x352 x337 x126 x244))
(assert (x221 x211))
(assert (x1 x126))
(assert (= (and x38 x51) x206))
(assert (x253 x244 (- x126 x352)))
(assert (= (and x61 x342) x42))
(assert (x221 x75))
(assert (x329 x65))
(assert (= (x277 (x32 2835717307)) 2835717307))
(assert (= (or x120 x269) x181))
(assert (x221 x319))
(assert (x221 x186))
(assert (x221 x153))
(assert (x221 x27))
(assert (x246 x261 x62))
(assert (x1 (- x337 x244)))
(assert (x219 x244 x126 x352 x337))
(assert (x221 x124))
(assert (= (and x63 (not x81)) x299))
(assert (= x270 (and x36 x97)))
(assert (= x45 (and x173 x204)))
(assert (x165 x242))
(assert (= (and x57 (not x305)) x301))
(assert (x221 x352))
(assert (= x269 (or x270 x353)))
(assert (x221 x129))
(assert (x322 x284 x47))
(assert (x253 x244 x126))
(assert (x221 x152))
(assert (x221 x325))
(assert (x170 x132))
(assert (x221 x7))
(assert (=> (>= 10000 x115) (= (x150 x115) (x32 x115))))
(assert (= (x150 3026235284) (x32 3026235284)))
(assert (= (=> (and (>= x312 0) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x317) (not (= 2514000705 x224)) (= x302 x168) (<= x312 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x43 (x150 x64)) x332) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x125) (= x81 (or (and (> 64 x255) (= (<= x255 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x255))) (<= 0 x125) (= (x44 x233) x312) (not (> 4 x326)) (= 128 x23) (= (x320 (- x312 x337)) x27) (<= x352 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x177 (x345 1461501637330902918203684832716283019655932542975 x251)) (= x233 (x69 (x150 x177) (x32 3) 0)) (= (x320 (- x125 x337)) x333) (= x255 (x320 (- x326 4))) (= x122 x144) (not (= x224 826074471)) (> x332 0) (= x326 68) (<= 0 x352) (not (< x312 x337)) (not (< x224 826074471)) (not (= 0 x302)) (not (> x302 x352)) (= x224 2835717307) (= (x320 (- x352 x302)) x153) (not (= x224 1889567281))) (and (=> (and x81 (and (= x202 0) (= x336 x129))) x338) (=> (and (not x81) (and (= x144 x179) (= (= x144 x122) x166))) (and (=> (and (= x359 0) (not x166)) x239) (=> (and x166 (and (= x9 x168) (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x173 (> x302 x134)) (= x134 (x339 x94)) (= x94 (x69 (x150 x225) (x32 1) 0)) (>= x134 0))) (and (=> (and (= (> x168 x134) x84) (not x173)) (and (=> (and (= 0 x359) x84) x239) (=> (and (and (<= x218 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x218 0) (= x279 (> x218 x28)) (= x28 (x320 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x168))) (= (x69 (x150 x144) (x32 1) 0) x135) (= (x248 x135) x218) (= (x69 (x150 x225) (x32 1) 0) x223) (= (x320 (- x134 x168)) x231)) (not x84)) (and (=> (and (= 0 x359) x279) x239) (=> (and (not x279) (and (= (> x218 x313) x113) (= (x235 (+ x168 x218)) x313))) (and (=> (and (not x113) (and (= 1 x202) (= 32 x336))) x338) (=> (and x113 (= x359 0)) x239))))))) (=> (and (= x359 0) x173) x239))))))) x185))
(assert (x221 x261))
(assert (=> (<= x64 10000) (= (x32 x64) (x150 x64))))
(assert (x221 x168))
(assert (x165 x171))
(assert (x12 x164 x125))
(assert (x12 x102 x183))
(assert (x221 x343))
(assert (x221 x167))
(assert (= (x32 2376452955) (x150 2376452955)))
(assert (x1 x244))
(assert (x246 x171 x242))
(assert (x221 x258))
(assert (x221 x56))
(assert (x221 x70))
(assert (x329 x118))
(assert (x221 x199))
(assert (x221 x108))
(assert (= (=> (and (and (= 2 x123) (= x141 x280) (= x250 x220) (= x222 (* x162 2)) (= x162 x220) (= (<= x141 x222) x93)) (and (= x284 (x345 x319 x30)) (= x302 x250) (= (ite (< 31 x336) 1 0) x30) (= (ite (= x177 1) 1 0) x319) (= (ite (= 0 x336) 1 0) x47) (> x167 0) (= (x187 x284 x47) x262) (= x167 (x345 x262 x202)))) (and (=> (and (= x201 2) (= x287 x220) (= x280 x186) (= x188 (* 2 x186)) (= x263 (<= x287 x188))) x263) x93)) x207))
(assert (x221 x20))
(assert (x165 x30))
(assert (= (or x128 x282) x112))
(assert (x165 x261))
(assert (x95 x343))
(assert (x221 x89))
(assert (x329 x115))
(assert (x221 x74))
(assert (x221 x313))
(assert (= x177 (x277 (x150 x177))))
(assert (x165 x319))
(assert (x221 x134))
(assert (x253 x352 (- x337 x126)))
(assert (= x64 (x277 (x150 x64))))
(assert (x221 x180))
(assert (= (x150 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x32 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x221 x292))
(assert (x221 x102))
(assert (= (and (not x169) x54) x286))
(assert (x221 x250))
(assert (x221 x122))
(assert (x221 x276))
(assert (= (or x295 x206) x259))
(assert (= (x150 3017275065) (x32 3017275065)))
(assert (= (and (not x264) x286) x128))
(assert (x221 x3))
(assert (x221 x265))
(assert (= (x277 (x32 1851080549)) 1851080549))
(assert (= (=> (and (= x336 x129) (= x202 x359)) x338) x239))
(assert (= x216 x138))
(assert (= 404098525 (x277 (x32 404098525))))
(assert (x53 x164))
(assert (x221 x25))
(assert (x1 2))
(assert (x221 x290))
(assert (x221 x226))
(assert (= x208 (and (not x173) x204)))
(assert (= (and (not x279) x209) x210))
(assert (x221 x280))
(assert (= (x32 157198259) (x150 157198259)))
(assert (x329 x177))
(assert (x170 x251))
(assert (x221 x26))
(assert (= (and (not x267) x259) x335))
(assert (x221 x217))
(assert (= 2376452955 (x277 (x32 2376452955))))
(assert (x221 x126))
(assert (x34 x337 x352 x244 x126))
(assert (x221 x300))
(assert (x322 x343 x254))
(assert (= 117300739 (x277 (x32 117300739))))
(assert (x221 x347))
(assert (= (x277 (x32 599290589)) 599290589))
(assert (x165 x132))
(assert (x221 x10))
(assert (not x271))
(assert (x221 x317))
(assert (x1 (- x126 x337)))
(assert (= 1289409798 (x277 (x32 1289409798))))
(assert (= (x150 1461501637330902918203684832716283019655932542975) (x32 1461501637330902918203684832716283019655932542975)))
(assert (x221 x156))
(assert (x95 x254))
(assert (x329 x64))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x237 x251 1461501637330902918203684832716283019655932542976) (* (x21 x251 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x251)) (x354 x251 1461501637330902918203684832716283019655932542976) (x197 x251 1461501637330902918203684832716283019655932542976) (x142 x251 1461501637330902918203684832716283019655932542976)))
(assert (x1 (- x337 x126)))
(assert (x221 x344))
(assert (= (and x4 x18) x120))
(assert (= x178 (=> (and (= x183 x99) (= x70 x344) (= 0 x189) (= x106 x126)) x35)))
(assert (x221 x147))
(assert (= x144 (x277 (x150 x144))))
(assert (= x138 (=> (and (and (>= x125 0) (<= x125 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x104 (= x125 0))) (or (and x104 (= x302 x337)) (and (not x104) (and (= x62 (ite (or x213 x87) 1 0)) (>= x352 0) (= (x68 (x50 x337 x352)) x164) (= x211 (x345 x261 x62)) (= (= 0 x125) x96) (= (x21 x164 x125) x180) (= x180 x302) (= x213 (= x58 x352)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) (= x261 (ite (not x96) 1 0)) (> x211 0) (= x58 (x21 x164 x337)) (= (= 0 x337) x87))))) x185)))
(assert (x165 x66))
(assert (x329 x144))
(assert (= (and x305 x57) x157))
(assert (x257 1461501637330902918203684832716283019655932542976))
(assert (x221 x244))
(check-sat)
(exit)
