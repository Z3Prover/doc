(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x417 0)) (((x266 (x291 x417) (x345 x417) (x644 Int)) (x401 (x257 Int)) (x897 (x45 x417) (x399 Int)))))
(declare-fun x483 () Int)
(declare-fun x746 () Bool)
(declare-fun x110 () Bool)
(declare-fun x91 () Bool)
(declare-fun x80 () Int)
(declare-fun x543 () Bool)
(declare-fun x376 () Bool)
(declare-fun x106 () Bool)
(declare-fun x267 () Int)
(declare-fun x709 () Int)
(declare-fun x914 () Bool)
(declare-fun x348 () Int)
(declare-fun x248 () Int)
(declare-fun x199 () Bool)
(declare-fun x828 () x417)
(declare-fun x719 () Bool)
(declare-fun x859 () Int)
(declare-fun x342 () Bool)
(declare-fun x437 () Bool)
(declare-fun x643 () Int)
(declare-fun x781 () Int)
(declare-fun x361 () Int)
(declare-fun x696 (Int Int) Int)
(declare-fun x873 () Bool)
(declare-fun x553 () Int)
(declare-fun x1 () Int)
(declare-fun x73 () Int)
(declare-fun x650 () Bool)
(declare-fun x55 () x417)
(declare-fun x848 () Bool)
(declare-fun x795 () Int)
(declare-fun x296 () Int)
(declare-fun x65 () Bool)
(declare-fun x359 () x417)
(declare-fun x214 () Int)
(declare-fun x324 () Bool)
(declare-fun x599 () Int)
(declare-fun x816 () Int)
(declare-fun x757 () Int)
(declare-fun x42 () Int)
(declare-fun x779 () Int)
(declare-fun x574 () Bool)
(declare-fun x344 () Int)
(declare-fun x171 () Int)
(declare-fun x441 () Bool)
(declare-fun x253 () Int)
(declare-fun x117 () Bool)
(declare-fun x391 () Int)
(declare-fun x335 () Bool)
(declare-fun x576 () Bool)
(declare-fun x426 () Bool)
(declare-fun x868 () Int)
(declare-fun x436 () Int)
(declare-fun x353 () Bool)
(declare-fun x595 () Int)
(declare-fun x498 () Int)
(declare-fun x557 () Bool)
(declare-fun x276 () Bool)
(declare-fun x480 () x417)
(declare-fun x4 () Int)
(declare-fun x112 () Int)
(declare-fun x915 () Int)
(declare-fun x789 () Int)
(declare-fun x593 () Int)
(declare-fun x294 () Int)
(declare-fun x321 () Int)
(declare-fun x355 () Bool)
(declare-fun x453 () Int)
(declare-fun x411 () Int)
(declare-fun x154 () Bool)
(declare-fun x88 () Int)
(declare-fun x404 () Bool)
(declare-fun x881 () Int)
(declare-fun x542 () Bool)
(declare-fun x396 () Int)
(declare-fun x287 () Bool)
(declare-fun x638 () Int)
(declare-fun x428 () Int)
(declare-fun x72 () Bool)
(declare-fun x219 () Bool)
(declare-fun x293 () Int)
(declare-fun x489 () Bool)
(declare-fun x252 () Bool)
(declare-fun x535 () Bool)
(declare-fun x10 () Bool)
(declare-fun x924 () Int)
(declare-fun x752 () Int)
(declare-fun x120 () Int)
(declare-fun x522 () Int)
(declare-fun x205 () Int)
(declare-fun x663 () Int)
(declare-fun x796 () x417)
(declare-fun x904 () Bool)
(declare-fun x232 () Bool)
(declare-fun x180 () Int)
(declare-fun x121 () Int)
(declare-fun x747 () Bool)
(declare-fun x548 () Int)
(declare-fun x898 () Int)
(declare-fun x894 () Bool)
(declare-fun x243 () Int)
(declare-fun x754 (Int Int) Int)
(declare-fun x115 () Bool)
(declare-fun x807 (Int) Int)
(declare-fun x603 () Int)
(declare-fun x220 () Bool)
(declare-fun x723 () Int)
(declare-fun x475 () Bool)
(declare-fun x282 () Bool)
(declare-fun x317 () Bool)
(declare-fun x812 () Bool)
(declare-fun x707 () Bool)
(declare-fun x716 () Int)
(declare-fun x913 () Bool)
(declare-fun x598 () Int)
(declare-fun x343 () Bool)
(declare-fun x182 () Int)
(declare-fun x445 () Int)
(declare-fun x530 () Int)
(declare-fun x547 () Bool)
(declare-fun x340 () Bool)
(declare-fun x284 () Int)
(declare-fun x273 () x417)
(declare-fun x529 () Int)
(declare-fun x383 () Int)
(declare-fun x468 () Int)
(declare-fun x811 () Int)
(declare-fun x59 () x417)
(declare-fun x611 () Int)
(declare-fun x66 () Bool)
(declare-fun x860 () Int)
(declare-fun x887 (x417) Int)
(declare-fun x532 () Bool)
(declare-fun x559 (x417) Int)
(declare-fun x465 () Bool)
(declare-fun x407 () Int)
(declare-fun x624 () Bool)
(declare-fun x286 () Int)
(declare-fun x539 () Bool)
(declare-fun x402 () Int)
(declare-fun x579 () Bool)
(declare-fun x537 () Int)
(declare-fun x884 () Int)
(declare-fun x314 () Bool)
(declare-fun x477 () Int)
(declare-fun x194 () Bool)
(declare-fun x362 () Bool)
(declare-fun x666 () Int)
(declare-fun x505 () Int)
(declare-fun x23 () Int)
(declare-fun x834 () Int)
(declare-fun x165 () Bool)
(declare-fun x275 () Int)
(declare-fun x508 () Bool)
(declare-fun x697 (Int) Int)
(declare-fun x70 () Int)
(declare-fun x86 () Bool)
(declare-fun x892 () Int)
(declare-fun x722 () Bool)
(declare-fun x158 () Bool)
(declare-fun x256 (Int Int) Int)
(declare-fun x44 () Bool)
(declare-fun x397 () Int)
(declare-fun x702 () Int)
(declare-fun x434 () Int)
(declare-fun x874 () Int)
(declare-fun x90 () Int)
(declare-fun x838 () x417)
(declare-fun x600 () Int)
(declare-fun x303 () Int)
(declare-fun x456 () Int)
(declare-fun x13 () Bool)
(declare-fun x374 () Bool)
(declare-fun x662 () Int)
(declare-fun x331 () Int)
(declare-fun x338 () Bool)
(declare-fun x534 () Bool)
(declare-fun x866 () Int)
(declare-fun x244 () Bool)
(declare-fun x235 () Bool)
(declare-fun x721 () Int)
(declare-fun x370 () Int)
(declare-fun x549 () Int)
(declare-fun x486 () Bool)
(declare-fun x43 () Bool)
(declare-fun x443 () Int)
(declare-fun x813 () Bool)
(declare-fun x570 () Bool)
(declare-fun x851 () Bool)
(declare-fun x21 () Int)
(declare-fun x186 () Int)
(declare-fun x46 () Int)
(declare-fun x60 () Bool)
(declare-fun x923 () Int)
(declare-fun x670 () Int)
(declare-fun x759 () Int)
(declare-fun x464 () Bool)
(declare-fun x693 () x417)
(declare-fun x285 () Int)
(declare-fun x491 () Bool)
(declare-fun x290 () Int)
(declare-fun x429 () Int)
(declare-fun x622 () Bool)
(declare-fun x645 () Int)
(declare-fun x334 () Int)
(declare-fun x541 () Bool)
(declare-fun x269 () Bool)
(declare-fun x733 () x417)
(declare-fun x761 () Int)
(declare-fun x259 () Bool)
(declare-fun x571 () Bool)
(declare-fun x77 () Int)
(declare-fun x40 () Int)
(declare-fun x300 () Int)
(declare-fun x631 () Int)
(declare-fun x482 () Int)
(declare-fun x196 () x417)
(declare-fun x198 () Bool)
(declare-fun x419 () Int)
(declare-fun x389 () Bool)
(declare-fun x560 () Bool)
(declare-fun x507 () Int)
(declare-fun x725 () Int)
(declare-fun x458 () Int)
(declare-fun x621 () Int)
(declare-fun x753 () Bool)
(declare-fun x885 () Bool)
(declare-fun x409 (x417) Int)
(declare-fun x694 () Int)
(declare-fun x82 () Bool)
(declare-fun x177 () Int)
(declare-fun x750 () Int)
(declare-fun x319 () Bool)
(declare-fun x435 () Bool)
(declare-fun x367 () Int)
(declare-fun x526 () Int)
(declare-fun x692 () Int)
(declare-fun x787 () Int)
(declare-fun x183 () Int)
(declare-fun x786 () Int)
(declare-fun x123 () Bool)
(declare-fun x705 () Bool)
(declare-fun x254 () Bool)
(declare-fun x56 () Int)
(declare-fun x732 () Int)
(declare-fun x562 () Bool)
(declare-fun x588 () Int)
(declare-fun x255 () Int)
(declare-fun x388 () Int)
(declare-fun x809 () Int)
(declare-fun x164 () Int)
(declare-fun x657 () Int)
(declare-fun x272 () Bool)
(declare-fun x647 () Int)
(declare-fun x270 () Bool)
(declare-fun x737 () Bool)
(declare-fun x310 () Int)
(declare-fun x511 () Bool)
(declare-fun x485 () Bool)
(declare-fun x864 () Int)
(declare-fun x651 () Bool)
(declare-fun x141 () Int)
(declare-fun x845 () Bool)
(declare-fun x36 () Int)
(declare-fun x556 () Int)
(declare-fun x863 () x417)
(declare-fun x261 () Bool)
(declare-fun x720 () Int)
(declare-fun x481 () Int)
(declare-fun x245 () Bool)
(declare-fun x246 () Bool)
(declare-fun x12 (Int Int) Int)
(declare-fun x99 () Int)
(declare-fun x195 () Int)
(declare-fun x695 () Int)
(declare-fun x216 () Int)
(declare-fun x166 () Int)
(declare-fun x328 () Int)
(declare-fun x452 () Int)
(declare-fun x762 () Int)
(declare-fun x768 () Bool)
(declare-fun x461 () Int)
(declare-fun x658 () Int)
(declare-fun x97 () Bool)
(declare-fun x111 () Int)
(declare-fun x271 () x417)
(declare-fun x147 () Int)
(declare-fun x392 () Int)
(declare-fun x124 () x417)
(declare-fun x298 () Bool)
(declare-fun x134 () Int)
(declare-fun x833 () Bool)
(declare-fun x262 () Int)
(declare-fun x800 () Bool)
(declare-fun x920 () Bool)
(declare-fun x228 () Int)
(declare-fun x9 () Int)
(declare-fun x821 () Int)
(declare-fun x736 () Bool)
(declare-fun x354 () x417)
(declare-fun x896 () Int)
(declare-fun x490 () Int)
(declare-fun x531 () Int)
(declare-fun x469 () Int)
(declare-fun x472 () Bool)
(declare-fun x408 () Int)
(declare-fun x258 () Bool)
(declare-fun x673 () x417)
(declare-fun x242 () Bool)
(declare-fun x605 () Int)
(declare-fun x301 () Bool)
(declare-fun x377 () Int)
(declare-fun x130 () Bool)
(declare-fun x17 () Bool)
(declare-fun x98 () Int)
(declare-fun x41 () Bool)
(declare-fun x679 () Bool)
(declare-fun x518 () Int)
(declare-fun x33 () Int)
(declare-fun x68 () Int)
(declare-fun x385 () Bool)
(declare-fun x448 () Bool)
(declare-fun x715 () Bool)
(declare-fun x792 () Bool)
(declare-fun x524 () Int)
(declare-fun x118 () Bool)
(declare-fun x778 () Bool)
(declare-fun x430 () Int)
(declare-fun x584 () Bool)
(declare-fun x371 () Int)
(declare-fun x431 (x417) Int)
(declare-fun x102 () Int)
(declare-fun x210 () Int)
(declare-fun x578 () Bool)
(declare-fun x444 (Int Int) Int)
(declare-fun x656 () Int)
(declare-fun x836 (Int) Int)
(declare-fun x50 () Bool)
(declare-fun x184 () Int)
(declare-fun x364 () Int)
(declare-fun x700 () Int)
(declare-fun x116 () Bool)
(declare-fun x591 () Bool)
(declare-fun x889 () x417)
(declare-fun x62 () Int)
(declare-fun x633 () Int)
(declare-fun x24 () Int)
(declare-fun x174 () Int)
(declare-fun x586 () Bool)
(declare-fun x145 () Int)
(declare-fun x455 () Int)
(declare-fun x476 (Int) Int)
(declare-fun x283 () Bool)
(declare-fun x114 () Bool)
(declare-fun x917 () Bool)
(declare-fun x727 () Bool)
(declare-fun x826 () Int)
(declare-fun x375 () Bool)
(declare-fun x665 () Bool)
(declare-fun x15 () Bool)
(declare-fun x332 () Bool)
(declare-fun x349 () Int)
(declare-fun x207 () Int)
(declare-fun x387 () Bool)
(declare-fun x596 () Int)
(declare-fun x379 () Int)
(declare-fun x503 () Bool)
(declare-fun x406 () Bool)
(declare-fun x902 () Bool)
(declare-fun x758 () Int)
(declare-fun x101 () Bool)
(declare-fun x877 () Int)
(declare-fun x104 () Bool)
(declare-fun x536 () Bool)
(declare-fun x85 () Bool)
(declare-fun x190 () Int)
(declare-fun x316 () Int)
(declare-fun x614 () Int)
(declare-fun x731 () x417)
(declare-fun x427 () Bool)
(declare-fun x573 () Int)
(declare-fun x142 () Int)
(declare-fun x558 () Bool)
(declare-fun x209 () Int)
(declare-fun x384 () Bool)
(declare-fun x780 () Int)
(declare-fun x744 () Int)
(declare-fun x69 () Int)
(declare-fun x751 () Bool)
(declare-fun x832 () Bool)
(declare-fun x711 () Int)
(declare-fun x799 () Bool)
(declare-fun x879 () Int)
(declare-fun x289 () Bool)
(declare-fun x554 () Int)
(declare-fun x48 () Bool)
(declare-fun x459 () x417)
(declare-fun x432 () Int)
(declare-fun x510 () Int)
(declare-fun x467 () Bool)
(declare-fun x446 () Bool)
(declare-fun x512 () Bool)
(declare-fun x590 () Bool)
(declare-fun x395 () Int)
(declare-fun x533 () Bool)
(declare-fun x804 () Bool)
(declare-fun x714 () Bool)
(declare-fun x680 () Bool)
(declare-fun x790 () Int)
(declare-fun x856 () Int)
(declare-fun x93 () Bool)
(declare-fun x515 () Bool)
(declare-fun x825 () Bool)
(declare-fun x788 () Int)
(declare-fun x113 () Int)
(declare-fun x568 () Int)
(declare-fun x674 () Int)
(declare-fun x827 () Int)
(declare-fun x211 () Bool)
(declare-fun x315 () Bool)
(declare-fun x127 (x417) Int)
(declare-fun x756 () Bool)
(declare-fun x400 () Int)
(declare-fun x630 () Int)
(declare-fun x875 () Bool)
(declare-fun x305 () Int)
(declare-fun x641 () Int)
(declare-fun x473 () Bool)
(declare-fun x26 () Int)
(declare-fun x449 () Int)
(declare-fun x729 () Int)
(declare-fun x675 () Int)
(declare-fun x764 () Bool)
(declare-fun x681 () Int)
(declare-fun x144 () Int)
(declare-fun x14 () Bool)
(declare-fun x840 () Int)
(declare-fun x390 () Bool)
(declare-fun x131 () Int)
(declare-fun x880 () Bool)
(declare-fun x678 () Bool)
(declare-fun x64 () Bool)
(declare-fun x189 () Bool)
(declare-fun x237 () Bool)
(declare-fun x309 () Int)
(declare-fun x238 () Int)
(declare-fun x157 () Int)
(declare-fun x53 (x417) Int)
(declare-fun x655 () Bool)
(declare-fun x728 () Int)
(declare-fun x777 () Int)
(declare-fun x424 () Bool)
(declare-fun x250 () x417)
(declare-fun x425 () x417)
(declare-fun x628 () Int)
(declare-fun x745 () Int)
(declare-fun x849 () Int)
(declare-fun x420 () Int)
(declare-fun x649 () x417)
(declare-fun x415 () Int)
(declare-fun x200 () Int)
(declare-fun x139 () Int)
(declare-fun x92 () Bool)
(declare-fun x96 () x417)
(declare-fun x418 () Bool)
(declare-fun x32 () Bool)
(declare-fun x173 () Int)
(declare-fun x302 () Int)
(declare-fun x206 () Bool)
(declare-fun x280 () Int)
(declare-fun x47 () Bool)
(declare-fun x94 () Bool)
(declare-fun x497 () Bool)
(declare-fun x146 () Int)
(declare-fun x479 () Int)
(declare-fun x726 () Int)
(declare-fun x378 () Int)
(declare-fun x871 () Int)
(declare-fun x839 () Bool)
(declare-fun x484 () Bool)
(declare-fun x320 () Int)
(declare-fun x440 () Int)
(declare-fun x771 () Int)
(declare-fun x610 () Int)
(declare-fun x566 () Bool)
(declare-fun x71 () x417)
(declare-fun x691 () Int)
(declare-fun x212 () Bool)
(declare-fun x156 () Int)
(declare-fun x151 () Bool)
(declare-fun x724 () Int)
(declare-fun x312 () x417)
(declare-fun x742 () Bool)
(declare-fun x870 () Int)
(declare-fun x126 () Bool)
(declare-fun x903 () Int)
(declare-fun x107 () Int)
(declare-fun x462 () Bool)
(declare-fun x627 () Bool)
(declare-fun x222 () Bool)
(declare-fun x192 () Int)
(declare-fun x268 (Int) Int)
(declare-fun x143 () Bool)
(declare-fun x318 () Bool)
(declare-fun x281 () Int)
(declare-fun x635 () Bool)
(declare-fun x637 () Bool)
(declare-fun x785 () Int)
(declare-fun x808 () Bool)
(declare-fun x363 () Int)
(declare-fun x39 () Int)
(declare-fun x350 () Int)
(declare-fun x330 () Int)
(declare-fun x676 () Int)
(declare-fun x78 () x417)
(declare-fun x6 () Bool)
(declare-fun x527 () Int)
(declare-fun x583 () Bool)
(declare-fun x890 () x417)
(declare-fun x900 () Int)
(declare-fun x791 () Bool)
(declare-fun x854 () Bool)
(declare-fun x831 () Int)
(declare-fun x646 (x417) Int)
(declare-fun x169 () Int)
(declare-fun x597 () Bool)
(declare-fun x882 (Int) x417)
(declare-fun x893 () Bool)
(declare-fun x5 () Bool)
(declare-fun x163 () Int)
(declare-fun x133 () Bool)
(declare-fun x619 () Bool)
(declare-fun x454 () Int)
(declare-fun x339 () Int)
(declare-fun x393 () x417)
(declare-fun x463 () Bool)
(declare-fun x617 () Bool)
(declare-fun x215 () Bool)
(declare-fun x810 () x417)
(declare-fun x634 () Bool)
(declare-fun x87 () Int)
(declare-fun x769 () Bool)
(declare-fun x2 () Int)
(declare-fun x138 () Bool)
(declare-fun x122 () Int)
(declare-fun x322 () Int)
(declare-fun x818 () Int)
(declare-fun x652 () Int)
(declare-fun x805 () Bool)
(declare-fun x373 () Bool)
(declare-fun x135 () Bool)
(declare-fun x837 () Bool)
(declare-fun x639 () Bool)
(declare-fun x381 () Int)
(declare-fun x704 () Int)
(declare-fun x129 () Bool)
(declare-fun x162 () Int)
(declare-fun x683 () Bool)
(declare-fun x850 () Bool)
(declare-fun x648 () Int)
(declare-fun x234 () Int)
(declare-fun x336 () Bool)
(declare-fun x278 () Bool)
(declare-fun x794 () Bool)
(declare-fun x717 () Int)
(declare-fun x279 () Bool)
(declare-fun x589 () Int)
(declare-fun x910 () Int)
(declare-fun x308 () Int)
(declare-fun x581 () Int)
(declare-fun x819 () Int)
(declare-fun x224 () Bool)
(declare-fun x170 () Int)
(declare-fun x79 () Int)
(declare-fun x604 () Int)
(declare-fun x817 () Bool)
(declare-fun x883 () Int)
(declare-fun x372 () Int)
(declare-fun x304 () Bool)
(declare-fun x208 () Int)
(declare-fun x772 () Int)
(declare-fun x623 () Int)
(declare-fun x233 () Int)
(declare-fun x11 () Bool)
(declare-fun x470 () Int)
(declare-fun x54 () Int)
(declare-fun x538 () Int)
(declare-fun x572 () Int)
(declare-fun x19 () Int)
(declare-fun x815 () Int)
(declare-fun x492 () Int)
(declare-fun x782 () Bool)
(declare-fun x405 () Int)
(declare-fun x51 () Int)
(declare-fun x664 () Int)
(declare-fun x172 () Bool)
(declare-fun x438 () Int)
(declare-fun x686 () Int)
(declare-fun x57 () Bool)
(declare-fun x878 () Int)
(declare-fun x741 () Int)
(declare-fun x886 () Int)
(declare-fun x292 () Int)
(declare-fun x550 () Int)
(declare-fun x516 () Int)
(declare-fun x382 () Bool)
(declare-fun x625 () Bool)
(declare-fun x201 () Int)
(declare-fun x346 () x417)
(declare-fun x369 () x417)
(declare-fun x421 () Int)
(declare-fun x58 () Bool)
(declare-fun x185 () Bool)
(declare-fun x193 () x417)
(declare-fun x615 () Int)
(declare-fun x517 () Bool)
(declare-fun x748 () Int)
(declare-fun x629 () Int)
(declare-fun x412 () Int)
(declare-fun x577 () Int)
(declare-fun x155 () Int)
(declare-fun x265 () x417)
(declare-fun x450 () Bool)
(declare-fun x918 () Int)
(declare-fun x706 () Int)
(declare-fun x668 () Bool)
(declare-fun x474 () Int)
(declare-fun x360 () Int)
(declare-fun x798 () Int)
(declare-fun x109 () Bool)
(declare-fun x386 () Bool)
(declare-fun x493 (Int) Int)
(declare-fun x842 () Bool)
(declare-fun x217 () Int)
(declare-fun x844 () Int)
(declare-fun x241 () Bool)
(declare-fun x784 () Bool)
(declare-fun x857 () Int)
(declare-fun x632 () Int)
(declare-fun x853 () Bool)
(declare-fun x410 () Int)
(declare-fun x713 () Int)
(declare-fun x738 () Bool)
(declare-fun x582 () Bool)
(declare-fun x612 () Int)
(declare-fun x203 () x417)
(declare-fun x231 () Int)
(declare-fun x221 () Int)
(declare-fun x802 () Bool)
(declare-fun x564 () Bool)
(declare-fun x561 () Int)
(declare-fun x585 () Int)
(declare-fun x575 () x417)
(declare-fun x494 () Int)
(declare-fun x357 () Int)
(declare-fun x140 () Int)
(declare-fun x822 () Bool)
(declare-fun x688 () Bool)
(declare-fun x567 () Bool)
(declare-fun x899 () Int)
(declare-fun x841 () Int)
(declare-fun x521 () Int)
(declare-fun x921 () Int)
(declare-fun x30 () Int)
(declare-fun x352 () Int)
(declare-fun x734 (x417) Int)
(declare-fun x876 () Bool)
(declare-fun x299 () Bool)
(declare-fun x326 () Int)
(declare-fun x690 () Bool)
(declare-fun x225 () Int)
(declare-fun x108 () Int)
(declare-fun x528 () Int)
(declare-fun x414 () Bool)
(declare-fun x423 () Int)
(declare-fun x35 () Bool)
(declare-fun x847 () Bool)
(declare-fun x442 () Bool)
(declare-fun x555 () Bool)
(declare-fun x323 () Bool)
(declare-fun x743 () Int)
(declare-fun x513 () Bool)
(declare-fun x797 () Int)
(declare-fun x451 () Bool)
(declare-fun x912 () Bool)
(declare-fun x311 () Bool)
(declare-fun x307 () Int)
(declare-fun x793 () Int)
(declare-fun x239 () Bool)
(declare-fun x519 () Int)
(declare-fun x137 () Bool)
(declare-fun x277 () x417)
(declare-fun x128 () Int)
(declare-fun x38 () Bool)
(declare-fun x501 () Int)
(declare-fun x710 () Bool)
(declare-fun x327 () Bool)
(declare-fun x460 () Int)
(declare-fun x829 () Bool)
(declare-fun x236 () Bool)
(declare-fun x687 () Bool)
(declare-fun x587 () Bool)
(declare-fun x329 () Int)
(declare-fun x31 () x417)
(declare-fun x223 () Int)
(declare-fun x763 () Int)
(declare-fun x602 () Int)
(declare-fun x718 () Bool)
(declare-fun x869 () x417)
(declare-fun x684 () Bool)
(declare-fun x52 () Bool)
(declare-fun x801 () Int)
(declare-fun x755 () Int)
(declare-fun x776 () Int)
(declare-fun x823 () Bool)
(declare-fun x540 () Int)
(declare-fun x708 () Bool)
(declare-fun x25 () Int)
(declare-fun x351 () Bool)
(declare-fun x422 () Bool)
(declare-fun x671 () Bool)
(declare-fun x667 () Int)
(declare-fun x653 () Int)
(declare-fun x149 () Bool)
(declare-fun x83 () Bool)
(declare-fun x862 () Int)
(declare-fun x509 () Int)
(declare-fun x908 () x417)
(declare-fun x213 () Bool)
(declare-fun x594 () Int)
(declare-fun x640 () Bool)
(declare-fun x861 () Bool)
(declare-fun x701 () x417)
(declare-fun x197 () Int)
(declare-fun x160 () Bool)
(declare-fun x75 () Bool)
(declare-fun x496 () Bool)
(declare-fun x191 () Int)
(declare-fun x735 () Int)
(declare-fun x167 () Int)
(declare-fun x63 () Int)
(declare-fun x7 () Int)
(declare-fun x703 () Int)
(declare-fun x81 () Int)
(declare-fun x22 () Bool)
(declare-fun x20 () Int)
(declare-fun x119 () Bool)
(declare-fun x830 () Int)
(declare-fun x901 () Bool)
(declare-fun x74 () Int)
(declare-fun x368 () Bool)
(declare-fun x204 () Int)
(declare-fun x150 () Bool)
(declare-fun x433 () Bool)
(declare-fun x891 () Int)
(declare-fun x297 () Int)
(declare-fun x125 () Bool)
(declare-fun x202 () Int)
(declare-fun x660 () Int)
(declare-fun x3 () Bool)
(declare-fun x274 () Bool)
(declare-fun x520 () Int)
(declare-fun x626 () Int)
(declare-fun x313 () Int)
(declare-fun x685 () Int)
(declare-fun x333 () x417)
(declare-fun x249 () x417)
(declare-fun x552 () Bool)
(declare-fun x264 () Bool)
(declare-fun x466 () Bool)
(declare-fun x132 () Bool)
(declare-fun x919 (Int) Int)
(declare-fun x760 () Int)
(declare-fun x907 () Bool)
(declare-fun x152 () Int)
(declare-fun x922 () Bool)
(declare-fun x689 () Int)
(declare-fun x495 () Bool)
(declare-fun x682 () Bool)
(declare-fun x347 () Int)
(declare-fun x609 () Int)
(declare-fun x175 () Int)
(declare-fun x247 () Bool)
(declare-fun x545 () Int)
(declare-fun x398 () Int)
(declare-fun x49 () Int)
(declare-fun x502 () Bool)
(declare-fun x100 () Bool)
(declare-fun x544 () Bool)
(declare-fun x403 () Int)
(declare-fun x148 () Int)
(declare-fun x136 () Int)
(declare-fun x506 () Bool)
(declare-fun x636 (x417) Int)
(declare-fun x181 () Int)
(declare-fun x337 () Bool)
(declare-fun x852 () Bool)
(declare-fun x188 () Bool)
(declare-fun x218 () Int)
(declare-fun x240 () Int)
(declare-fun x358 () Int)
(declare-fun x478 () Int)
(declare-fun x523 () Int)
(declare-fun x642 () Int)
(declare-fun x620 () Int)
(declare-fun x306 () x417)
(declare-fun x749 () Bool)
(declare-fun x565 () Bool)
(declare-fun x457 () Int)
(declare-fun x843 () Bool)
(define-fun x698 ((x417 x417) (x263 Int)) x417 (ite ((_ is x897) x417) (x897 (x45 x417) (+ (x399 x417) x263)) (ite ((_ is x266) x417) (x266 (x291 x417) (x345 x417) (+ x263 (x644 x417))) (x401 (+ x263 (x257 x417))))))
(define-fun x613 ((x179 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x179) (<= 0 x179)) x179 (- x179 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x775 ((x179 Int)) Int (ite (and (> 0 x179) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x179)) (+ x179 115792089237316195423570985008687907853269984665640564039457584007913129639936) x179))
(define-fun x187 ((x179 Int)) Int (ite (and (<= 0 x179) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x179)) x179 (ite (and (< x179 231584178474632390847141970017375815706539969331281128078915168015826259279872) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x179)) (- x179 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (< x179 0) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x179)) (+ x179 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x696 x179 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x525 ((x607 Int)) Bool (and (>= x607 0) (< x607 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x867 ((x607 Int)) Bool (and (= (x256 115792089237316195423570985008687907853269984665640564039457584007913129639935 x607) x607) (= (x256 x607 115792089237316195423570985008687907853269984665640564039457584007913129639935) x607)))
(define-fun x872 ((x607 Int)) Bool (and (= 0 (x256 0 x607)) (= (x256 x607 0) 0)))
(define-fun x500 ((x607 Int)) Bool (= x607 (x256 x607 x607)))
(define-fun x260 ((x607 Int)) Bool (and (x872 x607) (x500 x607) (x867 x607)))
(define-fun x865 ((x607 Int) (x230 Int)) Bool (= (x256 x607 x230) (x256 x230 x607)))
(define-fun x365 ((x607 Int) (x230 Int)) Bool (and (=> (>= x607 0) (>= x607 (x256 x607 x230))) (<= 0 (x256 x607 x230)) (=> (>= x230 0) (>= x230 (x256 x607 x230)))))
(define-fun x618 ((x607 Int) (x230 Int)) Bool (and (x865 x607 x230) (x365 x607 x230)))
(define-fun x153 ((x607 Int)) Bool (= (x187 x607) (+ (x256 x607 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x696 x607 32))))
(define-fun x251 ((x607 Int)) Bool (and (x618 x607 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x153 x607)))
(define-fun x767 ((x607 Int) (x230 Int)) Bool (and (<= 0 (x696 x607 x230)) (> x230 (x696 x607 x230))))
(define-fun x661 ((x607 Int) (x230 Int)) Bool (=> (and (> x230 0) (<= 0 x607)) (= (= x607 (x696 x607 x230)) (> x230 x607))))
(define-fun x95 ((x607 Int) (x230 Int)) Bool (=> (and (< 0 x230) (and (<= x230 x607) (> (+ x230 x230) x607))) (= (- x607 x230) (x696 x607 x230))))
(define-fun x161 ((x607 Int)) Bool (= 0 (x696 0 x607)))
(define-fun x504 ((x607 Int)) Bool (= (x696 x607 1) 0))
(define-fun x447 ((x607 Int)) Bool (= (x696 x607 x607) 0))
(define-fun x288 ((x607 Int)) Bool (and (x504 x607) (x447 x607) (x161 x607)))
(define-fun x765 ((x607 Int) (x230 Int)) Bool (= (x12 x230 x607) (x12 x607 x230)))
(define-fun x105 ((x607 Int) (x230 Int)) Bool (and (=> (and (> 0 x230) (> x607 0)) (> 0 (x12 x607 x230))) (=> (and (< x607 0) (< 0 x230)) (> 0 (x12 x607 x230))) (=> (and (< x230 0) (> 0 x607)) (> (x12 x607 x230) 0)) (=> (and (< 0 x230) (< 0 x607)) (> (x12 x607 x230) 0))))
(define-fun x672 ((x607 Int) (x230 Int)) Bool (=> (and (> x230 0) (> x607 0)) (= (= (x444 (x187 (x12 x607 x230)) x607) x230) (< (x12 x607 x230) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x295 ((x607 Int) (x230 Int)) Bool (=> (and (not (= x607 0)) (not (= 0 x230))) (and (= x607 (x444 (x12 x607 x230) x230)) (= (x444 (x12 x607 x230) x607) x230))))
(define-fun x606 ((x607 Int) (x230 Int)) Bool (=> (and (> x607 0) (< 0 x230)) (= (< (x444 115792089237316195423570985008687907853269984665640564039457584007913129639935 x607) x230) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x12 x607 x230)))))
(define-fun x911 ((x607 Int) (x230 Int)) Bool (and (= (x187 (x12 (- x607 115792089237316195423570985008687907853269984665640564039457584007913129639936) x230)) (x187 (x12 x607 x230))) (= (x187 (x12 x607 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x187 (x12 x607 x230))) (= (x187 (x12 (- x607 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x187 (x12 x607 x230)))))
(define-fun x770 ((x607 Int) (x230 Int)) Bool (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x607) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x607)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x230) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x230))) (= (>= (x444 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x230)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x607)) (<= (x12 (- x607 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x230 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x230 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (<= x607 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x607 0))) (= (>= (x444 57896044618658097711785492504343953926634992332820282019728792003956564819968 x607) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x230)) (>= (x12 x607 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (< 0 x230) (<= x230 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x607 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x607 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x12 (- x607 115792089237316195423570985008687907853269984665640564039457584007913129639936) x230) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x444 57896044618658097711785492504343953926634992332820282019728792003956564819968 x230) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x607)))) (=> (and (and (< 0 x230) (<= x230 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x607) (< 0 x607))) (= (<= x607 (x444 57896044618658097711785492504343953926634992332820282019728792003956564819967 x230)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x12 x607 x230))))))
(define-fun x774 ((x607 Int) (x230 Int)) Bool (and (x770 x607 x230) (x606 x607 x230) (x911 x607 x230) (x105 x607 x230) (x295 x607 x230) (x672 x607 x230) (x765 x607 x230)))
(define-fun x699 ((x607 Int)) Bool (and (= 0 (x12 0 x607)) (= 0 (x12 x607 0))))
(define-fun x394 ((x607 Int)) Bool (and (= x607 (x12 x607 1)) (= x607 (x12 1 x607))))
(define-fun x773 ((x607 Int)) Bool (and (x699 x607) (x394 x607)))
(define-fun x37 ((x607 Int) (x230 Int)) Bool (=> (and (< 0 x230) (> x607 0)) (and (<= (x444 x607 x230) x607) (<= 0 (x444 x607 x230)))))
(define-fun x499 ((x607 Int) (x230 Int)) Bool (=> (and (and (<= 1 x230) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x230)) (and (>= x607 0) (< x607 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x444 x607 x230) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x444 x607 x230)))))
(define-fun x677 ((x607 Int) (x230 Int)) Bool (=> (and (> x607 x230) (< 1 x230)) (> x607 (x444 x607 x230))))
(define-fun x608 ((x607 Int) (x230 Int)) Bool (=> (and (> x230 0) (< 0 x607)) (= (= 0 (x444 x607 x230)) (< x607 x230))))
(define-fun x34 ((x607 Int) (x230 Int)) Bool (=> (and (> x230 0) (> x607 0)) (and (< (- x607 x230) (x12 (x444 x607 x230) x230)) (<= (x12 (x444 x607 x230) x230) x607))))
(define-fun x487 ((x607 Int) (x230 Int)) Bool (and (x608 x607 x230) (x37 x607 x230) (x499 x607 x230) (x34 x607 x230) (x677 x607 x230)))
(define-fun x730 ((x607 Int)) Bool (= (x444 0 x607) 0))
(define-fun x341 ((x607 Int)) Bool (= (x444 x607 1) x607))
(define-fun x739 ((x607 Int)) Bool (=> (not (= 0 x607)) (= (x444 x607 x607) 1)))
(define-fun x740 ((x607 Int)) Bool (and (x730 x607) (x739 x607) (x341 x607)))
(define-fun x601 ((x607 Int)) Bool (= (x256 x607 1461501637330902918203684832716283019655932542975) (x696 x607 1461501637330902918203684832716283019655932542976)))
(define-fun x580 ((x607 Int)) Bool (and (x601 x607) (x618 x607 1461501637330902918203684832716283019655932542975)))
(define-fun x226 ((x178 Int)) Int (x919 x178))
(define-fun x806 ((x178 Int)) Int (ite (= x178 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x697 x178)))
(define-fun x366 ((x178 Int)) Int (ite (= x178 132) x868 (x806 x178)))
(define-fun x89 ((x178 Int)) Int (ite (= x178 0) x461 (x493 x178)))
(define-fun x855 ((x178 Int)) Int (ite (= x178 128) x461 (x366 x178)))
(define-fun x84 ((x178 Int)) Int (ite (= x178 0) x561 (x493 x178)))
(define-fun x824 ((x178 Int)) Int (ite (= 128 x178) x561 (x366 x178)))
(define-fun x76 ((x178 Int)) Int (ite (= x178 0) x430 (x493 x178)))
(define-fun x159 ((x178 Int)) Int (ite (= 128 x178) x430 (x366 x178)))
(define-fun x380 ((x178 Int)) Int (ite x503 (ite x579 (x366 x178) (x855 x178)) (ite x368 (ite x92 (x366 x178) (x824 x178)) (ite x75 (x366 x178) (x159 x178)))))
(define-fun x712 ((x178 Int)) Int (ite (= x178 x811) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x380 x178)))
(define-fun x325 ((x178 Int)) Int (ite (= x328 x178) x868 (x712 x178)))
(define-fun x103 ((x178 Int)) Int (ite (= x178 x811) x910 (x325 x178)))
(define-fun x895 ((x178 Int)) Int (ite (= x811 x178) x660 (x325 x178)))
(define-fun x814 ((x178 Int)) Int (ite (= x178 x811) x182 (x325 x178)))
(define-fun x616 ((x178 Int)) Int (ite x304 (ite x742 (x325 x178) (x103 x178)) (ite x920 (ite x97 (x325 x178) (x895 x178)) (ite x541 (x325 x178) (x814 x178)))))
(define-fun x413 ((x178 Int)) Int (ite (= x280 x178) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x616 x178)))
(define-fun x16 ((x178 Int)) Int (ite (= x178 x523) x868 (x413 x178)))
(define-fun x835 ((x178 Int)) Int (ite (= x898 x178) x377 (x16 x178)))
(define-fun x8 ((x178 Int)) Int (ite (= x275 x178) x884 (x835 x178)))
(define-fun x356 ((x178 Int)) Int (ite (= x178 x280) 1 (x8 x178)))
(define-fun x488 ((x178 Int)) Int (ite (= x178 x280) 1 (x8 x178)))
(define-fun x29 ((x178 Int)) Int (ite (= x280 x178) 1 (x8 x178)))
(define-fun x846 ((x178 Int)) Int (ite x206 (ite x496 (x8 x178) (x356 x178)) (ite x687 (ite x244 (x8 x178) (x488 x178)) (ite x114 (x8 x178) (x29 x178)))))
(define-fun x514 ((x178 Int)) Int (ite (= x280 x178) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x616 x178)))
(define-fun x18 ((x178 Int)) Int (ite (= x178 x371) x868 (x514 x178)))
(define-fun x858 ((x178 Int)) Int (ite (= x903 x178) x231 (x18 x178)))
(define-fun x28 ((x178 Int)) Int (ite (= x178 x553) x460 (x858 x178)))
(define-fun x27 ((x178 Int)) Int (ite (= x178 x280) 1 (x28 x178)))
(define-fun x916 ((x178 Int)) Int (ite (= x280 x178) 1 (x28 x178)))
(define-fun x803 ((x178 Int)) Int (ite (= x280 x178) 1 (x28 x178)))
(define-fun x416 ((x178 Int)) Int (ite x110 (ite x115 (x28 x178) (x27 x178)) (ite x466 (ite x718 (x28 x178) (x916 x178)) (ite x571 (x28 x178) (x803 x178)))))
(define-fun x669 ((x178 Int)) Int (ite (= x178 0) x910 (x268 x178)))
(define-fun x783 ((x178 Int)) Int (ite (= x178 0) x660 (x268 x178)))
(define-fun x67 ((x178 Int)) Int (ite (= 0 x178) x182 (x268 x178)))
(define-fun x659 ((x178 x417)) Int (ite (= x731 x178) x603 (x127 x178)))
(define-fun x229 ((x178 x417)) Int (ite (= x277 x178) x670 (x887 x178)))
(define-fun x888 ((x178 Int)) Int (ite (= 0 x178) 1 (x807 x178)))
(define-fun x654 ((x178 x417)) Int (ite (= x178 x369) x214 (x636 x178)))
(define-fun x61 ((x178 Int)) Int (ite (= x178 0) 1 (x807 x178)))
(define-fun x905 ((x178 x417)) Int (ite (= x178 x673) x111 (x887 x178)))
(define-fun x439 ((x178 Int)) Int (ite (= 0 x178) 1 (x836 x178)))
(define-fun x168 ((x178 x417)) Int (ite (= x178 x333) x7 (x636 x178)))
(define-fun x546 ((x178 Int)) Int (ite (= 0 x178) 1 (x836 x178)))
(define-fun x176 ((x178 x417)) Int (ite (= x250 x178) x175 (x659 x178)))
(define-fun x569 ((x178 Int)) Int (ite (= x178 0) 1 (x807 x178)))
(define-fun x766 ((x178 x417)) Int (ite (= x178 x306) x56 (x659 x178)))
(define-fun x551 ((x178 Int)) Int (ite (= x178 0) 1 (x836 x178)))
(define-fun x906 ((x607 Int) (x230 Int) (x471 Int) (x909 Int)) Bool (=> (and (<= 0 x230) (>= x607 0) (>= x471 x607) (>= x909 x230)) (>= (x12 x471 x909) (x12 x607 x230))))
(define-fun x592 ((x607 Int) (x230 Int) (x471 Int) (x909 Int)) Bool (=> (= x471 x607) (= (x12 x607 (- x230 x909)) (- (x12 x607 x230) (x12 x471 x909)))))
(define-fun x820 ((x607 Int)) Bool (=> (and (not (= x607 3524403367)) (not (= 117300739 x607)) (not (= x607 2757214935)) (not (= x607 1989257563)) (not (= x607 826074471)) (not (= x607 599290589)) (not (= x607 1889567281)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x607)) (< 10000 x607) (not (= x607 1952775229)) (not (= 157198259 x607)) (not (= 404098525 x607)) (not (= 2430363622 x607)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x607)) (not (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x607)) (not (= x607 1461501637330902918203684832716283019655932542975)) (not (= x607 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (not (= x607 234755713)) (not (= 1461501637330902918203684832716283019655932542976 x607)) (not (= 2569101039 x607)) (not (= x607 2835717307))) (not ((_ is x401) (x882 x607)))))
(assert (x525 x700))
(assert (x525 x182))
(assert (x525 x88))
(assert (= x579 (or (and x324 x254) (and x362 (not x85)))))
(assert (= (and (not x847) x640) x247))
(assert (= x591 (and x123 x462)))
(assert (x525 x398))
(assert (= x682 (and x688 (not x299))))
(assert (x525 x776))
(assert (= (and x283 x794) x389))
(assert (x525 x831))
(assert (x525 x81))
(assert (= (x734 (x882 x581)) x581))
(assert (x525 x174))
(assert (x592 x918 x577 x494 x438))
(assert (x525 x403))
(assert (= (and x362 x85) x885))
(assert (x525 x841))
(assert (= x552 (and x472 (not x624))))
(assert (x525 x785))
(assert (x592 x642 x415 x438 x113))
(assert (x525 x370))
(assert (x487 x432 x255))
(assert (x525 x924))
(assert (x592 x438 x113 x642 x415))
(assert (= x705 (or x853 (and (not x252) x15))))
(assert (= (or (and x557 x269) (and x737 x185) x489 (and x671 (not x825)) (and x782 x467) x848 x389 (and x66 x301) (and (not x189) x566)) x718))
(assert (and (x661 x685 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x95 x685 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x444 x685 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x696 x685 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x685)) (x767 x685 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x75 (or (and x319 (not x261)) (and x707 x680))))
(assert (x774 x113 (- x438 x642)))
(assert (= x854 (=> (and (= 0 x479) (= x307 x870)) x138)))
(assert (x525 x626))
(assert (x774 x494 (- x438 x642)))
(assert (= (=> (and (= x170 x144) (= x320 x632)) x158) x237))
(assert (x906 x415 x642 x438 x494))
(assert (= (and x318 x753) x44))
(assert (x525 x603))
(assert (= (and x637 x684) x727))
(assert (x525 x593))
(assert (x525 x128))
(assert (x525 x647))
(assert (x525 x461))
(assert (= x314 (and x808 (not x13))))
(assert (= (and (not x282) x852) x22))
(assert (x525 x821))
(assert (x525 x184))
(assert (=> (<= x316 10000) (= (x882 x316) (x401 x316))))
(assert (x774 x577 (- x918 x494)))
(assert (= x304 (or x742 x845)))
(assert (x525 x286))
(assert (x525 x744))
(assert (x525 x221))
(assert (= x244 (or (and x805 x342) (and x668 x58) x151 (and x850 x922) (and (not x387) x44) x337 (and x753 (not x318)) x627 (and x833 x298))))
(assert (x525 x139))
(assert (x525 x572))
(assert (x773 x415))
(assert (x525 x921))
(assert (x525 x218))
(assert (x525 x367))
(assert (x525 x111))
(assert (= x315 (and x450 (not x427))))
(assert (= x614 (x734 (x882 x614))))
(assert (x525 x453))
(assert (x525 x443))
(assert (= (x401 157198259) (x882 157198259)))
(assert (x525 x745))
(assert (= (and (not x41) x534) x515))
(assert (= (and x635 x14) x116))
(assert (x525 x90))
(assert (x525 x844))
(assert (= x287 (=> (and (= x305 x313) (= x892 0)) x893)))
(assert (x251 x505))
(assert (x525 x170))
(assert (x774 x438 (- x113 x642)))
(assert (x525 x30))
(assert (x525 x80))
(assert (x525 x121))
(assert (x525 x328))
(assert (= x376 (and (not x274) x587)))
(assert (= (or (and x800 x258) (and (not x222) x584)) x92))
(assert (x525 x910))
(assert (= x764 (and x13 x808)))
(assert (x773 (- x438 x642)))
(assert (x525 x666))
(assert (x525 x648))
(assert (=> (>= 10000 x519) (= (x401 x519) (x882 x519))))
(assert (x773 (- x494 x918)))
(assert (x525 x521))
(assert (x525 x70))
(assert (= x426 (and (not x506) x502)))
(assert (= x3 (or (and x617 (not x279)) x64)))
(assert (= x571 (or (and (not x355) x315) x727 x246 x435 x486 x512 (and x450 x427) x764 (and (not x47) x746) x876 x104 x683)))
(assert (x525 x326))
(assert (= x110 (or x211 x115)))
(assert (x525 x191))
(assert (= (x882 826074471) (x401 826074471)))
(assert (= (and x637 (not x684)) x655))
(assert (x525 x860))
(assert (x525 x428))
(assert (x525 x704))
(assert (x773 (- x113 x577)))
(assert (x592 x577 x918 x494 x438))
(assert (x525 x479))
(assert (x525 x537))
(assert (x525 x23))
(assert (x525 x285))
(assert (= (and x491 x562) x486))
(assert (x525 x407))
(assert (= (and x6 (not x406)) x311))
(assert (x525 x2))
(assert (= (x401 404098525) (x882 404098525)))
(assert (x774 x642 (- x415 x438)))
(assert (x820 x363))
(assert (x525 x164))
(assert (x525 x378))
(assert (= x106 (=> (and (= x144 0) (= x305 x320)) x237)))
(assert (x525 x468))
(assert (x525 x670))
(assert (=> (<= x190 10000) (= (x401 x190) (x882 x190))))
(assert (= (and x82 x311) x104))
(assert (= x269 (and x566 x189)))
(assert (x525 x660))
(assert (= x52 (and (not x160) x65)))
(assert (x525 x360))
(assert (x773 (- x113 x642)))
(assert (x774 x577 (- x918 x113)))
(assert (x525 x7))
(assert (= (and x624 x472) x151))
(assert (= x450 (and x583 x236)))
(assert (x525 x408))
(assert (= (x734 (x401 1952775229)) 1952775229))
(assert (x773 x438))
(assert (= x213 (and x536 x913)))
(assert (x525 x73))
(assert (x773 (- x494 x415)))
(assert (x525 x136))
(assert (x525 x388))
(assert (x525 x523))
(assert (x774 x642 x415))
(assert (=> (<= x363 10000) (= (x401 x363) (x882 x363))))
(assert (= (x734 (x401 599290589)) 599290589))
(assert (x525 x631))
(assert (x525 x122))
(assert (= (and x635 (not x14)) x534))
(assert (= x489 (and x475 x94)))
(assert (= x547 (and (not x597) x109)))
(assert (x740 x458))
(assert (x525 x51))
(assert (= (=> (and (= (= x657 0) x279) (or (not x279) x279)) x582) x473))
(assert (x525 x379))
(assert (x525 x656))
(assert (x525 x620))
(assert (x820 x40))
(assert (= (and x747 x289) x708))
(assert (= (x882 50942633119752846454219349998365661925608737367104304655302372697894809501696) (x401 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x774 x918 (- x577 x113)))
(assert (= (and (not x707) x680) x319))
(assert (x525 x108))
(assert (= (or x114 x513) x768))
(assert (x525 x732))
(assert (= x198 (=> (and (= x419 x657) (= x602 x400)) x473)))
(assert (x525 x494))
(assert (x260 1461501637330902918203684832716283019655932542975))
(assert (x525 x633))
(assert (= x66 (and (not x475) x94)))
(assert (x525 x98))
(assert (x525 x481))
(assert (= (and (not x736) x497) x94))
(assert (= x368 (or x92 x165)))
(assert (= x650 (and (not x839) x86)))
(assert (x525 x155))
(assert (x251 x685))
(assert (x525 x195))
(assert (x525 x809))
(assert (x525 x87))
(assert (= x513 (and (not x289) x747)))
(assert (= x451 (and x38 (not x385))))
(assert (=> (>= 10000 x721) (= (x882 x721) (x401 x721))))
(assert (=> (<= x620 10000) (= (x401 x620) (x882 x620))))
(assert (= (and (not x562) x491) x441))
(assert (x592 x494 x438 x918 x577))
(assert (x906 x494 x438 x642 x415))
(assert (x525 x429))
(assert (x774 x918 x577))
(assert (x525 x454))
(assert (x525 x225))
(assert (x525 x175))
(assert (x525 x177))
(assert (= (and x91 x220) x714))
(assert (x525 x874))
(assert (= x236 (and x10 (not x544))))
(assert (= (x882 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x401 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (= x804 (=> (and (= x170 x281) (= x632 x405)) x158)))
(assert (= (=> (and (= x479 x352) (= x870 x595)) x508) x138))
(assert (= (=> (and (and (= x156 2569101039) (= x131 1989257563) (= (< 0 (x646 (x882 x620))) x902) (not (= x620 x787)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113) (= x570 (< 0 (x646 (x882 x787)))) (= false x539) (< 0 x744) (>= x716 0) (>= x40 0) (> x620 0) (= x726 (x409 (x882 x620))) (= x188 false) (= x381 x703) (= false x50) (<= 0 x434) (< 0 x787) (= x276 false) (= x578 (> (x646 (x882 x868)) 0)) (< 0 x868) (= x81 x113) (= (x646 (x882 x868)) x744) (= x347 3) x902 (>= 1461501637330902918203684832716283019655932542975 x620) (<= x787 1461501637330902918203684832716283019655932542975) (not (= x787 x868)) (<= 0 x726) (<= 0 x98) x578 (not (> 1889567281 x156)) (>= 1461501637330902918203684832716283019655932542975 x868) (>= x113 0) (not (> 2569101039 x156)) (= x716 (x409 (x882 x868))) (<= x434 1461501637330902918203684832716283019655932542975) (= x434 x831) (>= x581 0) x570 (>= 1461501637330902918203684832716283019655932542975 x581) (<= x381 1461501637330902918203684832716283019655932542975) (= (x409 (x882 x787)) x98) (>= x381 0) (not (= x620 x868)) (<= x40 1461501637330902918203684832716283019655932542975)) (and (and (not (= 826074471 x225)) (= x869 (x266 (x882 x868) (x401 1) 0)) (= x849 x490) (> x322 0) (= x81 x798) (= (x646 (x882 x620)) x322) (>= 1461501637330902918203684832716283019655932542975 x868) (<= x849 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x849) (= 1889567281 x225) (not (< x225 826074471)) (= (x636 x869) x849)) (and (and (and (and (= x879 x703) (< x180 1889567281) (< 0 x290) (= x378 x483) (not (= 234755713 x180)) (>= x428 0) (= x629 x524) (= x334 x174) (= x844 x474) (= (and x117 x384) x414) (= x831 x728) (= 404098525 x180) x414 (<= x428 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (>= x267 x877) x384) (> 826074471 x180) (= x290 (x646 (x882 x868))) (= x700 x428) (not (= 157198259 x180)) (= x702 x763) (= 0 x173) (= x834 x181) (= x267 x795) (= x689 1000) (= x594 x184)) (and (and (and (= x924 x402) (= (x127 x890) x924) (= x840 x520) (= x370 1000) x832 (= (= 1000 x840) x715) (= x516 1889567281) (= x550 (x646 (x882 x868))) (< x516 2569101039) (not (< x516 1889567281)) (< 0 x550) (= (x266 (x401 0) (x401 0) 0) x890) (<= 0 x924) (<= x924 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x300) (= (or x715 x232) x832)) (and (and (and (> x191 0) (not (= 157198259 x469)) (< x469 1889567281) (<= x428 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 234755713 x469)) (= x191 (x646 (x882 x868))) (> 826074471 x469) (<= 0 x428) (= x469 404098525) (= (+ x36 x421) x818) (= x428 x556) (= x383 x421)) (and (and (and (not (> 2569101039 x600)) (>= 1461501637330902918203684832716283019655932542975 x581) (= x139 x886) (not (= x600 2835717307)) (= x19 (x646 (x882 x868))) (not (= 2757214935 x600)) (>= x581 0) x904 (not (= x600 2569101039)) (= x615 x581) (> 1461501637330902918203684832716283019655932542976 x581) (= x904 (= x364 x886)) (< 0 x19) (not (> 1889567281 x600)) (= 3524403367 x600) (= x787 x786)) (and (and (and (not (< x128 2569101039)) (= 2569101039 x128) (= x113 x572) (= (= 0 x186) x335) (> x596 0) (= x596 (x646 (x882 x868))) (= x310 x186) (<= 0 x113) (= x790 0) (not (< x128 1889567281)) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (and (= 0 x73) (< x883 826074471) (= (= x610 0) x424) (not (= x883 157198259)) (> 1889567281 x883) (= x428 x157) (= (x646 (x882 x868)) x785) (< 0 x785) (= x883 404098525) (= (= x335 x424) x137) (<= 0 x428) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x428) (= x572 x610) (not (= x883 234755713))) (and (and (not (= 1889567281 x238)) (>= 1461501637330902918203684832716283019655932542975 x30) (<= x709 1461501637330902918203684832716283019655932542975) (>= x494 0) (<= 0 x30) (= x554 1) (= (x646 (x882 x868)) x69) (<= x554 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 1461501637330902918203684832716283019655932542976 x40) (= (x775 (- x90 4)) x360) (<= x494 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x334 x321) (not (= x297 0)) (= x507 x321) (not (< x90 4)) (not (= x238 1952775229)) (= x741 x120) (<= x741 1461501637330902918203684832716283019655932542975) (<= x40 1461501637330902918203684832716283019655932542975) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x474 x752) (<= 0 x748) (= x238 1989257563) (= x769 (= x40 x787)) (= x62 x741) (= x297 (x646 (x882 x40))) (= x709 x761) (not (< x238 1889567281)) (= x162 x152) (= x30 x831) (= x438 x162) (= (= x107 0) x332) (and (< 99 x90) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x90) true)) (>= x113 0) (= x79 0) (>= x554 0) x829 (= (and x465 x137) x829) (>= x40 0) (= x465 (= x404 x332)) (= x21 x107) (not (or (> x360 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x360 96) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x360) true)))) (<= x507 1461501637330902918203684832716283019655932542975) (< x238 2569101039) (>= x507 0) (<= x748 1461501637330902918203684832716283019655932542975) (= x709 x821) (< 0 x69) (= x112 128) (= x752 0)) (and (= x436 (x646 (x882 x868))) (= x157 x445) (> 2569101039 x864) (< 0 x436) (not (= 1952775229 x864)) (= 2430363622 x864) (not (> 1889567281 x864)) (>= x494 0) (<= x494 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 0 x923) (not (= 1889567281 x864)) (= x404 (= x445 0)) (not (= 1989257563 x864)) (= x494 x21))))) (and (= (x646 (x882 x868)) x145) (not (= x776 157198259)) (= x310 x428) (> 1889567281 x776) (<= 0 x428) (= x26 x615) (= (= x786 x26) x464) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x428) (> 826074471 x776) (not (= 234755713 x776)) (= x776 404098525) (> x145 0) x464))) (and (>= x40 0) (> 826074471 x309) (not (= 157198259 x309)) (= 234755713 x309) (< x309 1889567281) (< x40 1461501637330902918203684832716283019655932542976) (> x248 0) (= x248 (x646 (x882 x868))) (<= x40 1461501637330902918203684832716283019655932542975) (= x556 x228) x914 (= x914 (<= x818 x228)) (= x40 x139) (= x620 x364)))) (and (<= 0 x530) (= x681 1889567281) (< 0 x568) (= (x646 (x882 x868)) x568) (= x530 (x127 x575)) (= x402 x36) (= (x266 (x882 x816) (x401 0) 0) x575) (= x383 x530) (= x816 x728) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x530) (not (> 1889567281 x681)) (<= x816 1461501637330902918203684832716283019655932542975) (< x681 2569101039)))) (and (= 1889567281 x723) (> 2569101039 x723) (not (> 1889567281 x723)) (> x548 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x780) (= x232 (= x827 0)) (= x827 x700) (= x641 0) (= (x127 x96) x780) (>= x780 0) (= x520 x780) (= x548 (x646 (x882 x868))) (= (x266 (x401 0) (x401 0) 0) x96) (= x408 0)))) (and (= (x887 x459) x440) (= x757 1889567281) (not (= x757 826074471)) (< 0 x331) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x440) (<= x868 1461501637330902918203684832716283019655932542975) (= x877 x207) (= x440 x795) (= (x266 (x882 x868) (x401 1) 0) x459) (>= x440 0) (not (> 826074471 x757)) (= (x646 (x882 x787)) x331))) (and (= x207 x494) (not (= x449 1952775229)) (not (> 1889567281 x449)) (>= x494 0) (= (x646 (x882 x868)) x217) (> x217 0) (not (= x449 1889567281)) (not (= x449 1989257563)) (<= x494 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (>= x881 x798) x117) (= 2430363622 x449) (= x881 x490) (< x449 2569101039))))) (and (=> (and x769 (and (= (or (> x42 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x42 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42)))) x254) (= x759 (x646 (x882 x787))) (not (= 826074471 x510)) (= 1889567281 x510) (= 36 x648) (not (< x648 4)) (= x42 (x775 (- x648 4))) (= x648 36) (not (< x510 826074471)) (= x868 x857) (> x759 0) (= x233 50942633119752846454219349998365661925608737367104304655302372697894809501696))) (and (=> (and (and (= (= x857 x868) x85) (= x857 x830)) (not x254)) (and (=> (not x85) x287) (=> (and x85 (and (= 32 x313) (>= x461 0) (= (x266 (x882 x857) (x401 1) 0) x828) (= x892 1) (= (x887 x828) x461) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x461))) x893))) (=> x254 x287))) (=> (and (= x784 (= x40 x620)) (not x769)) (and (=> (and (and (= x160 (= x868 x40)) (and x160 (and (= x164 36) (< 0 x866) (not (> 1889567281 x498)) (= 1889567281 x498) (= 36 x164) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x735) (> 2569101039 x498) (= x866 (x646 (x882 x868))) (= x707 (or (> x878 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x878 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x878))))) (= x878 (x775 (- x164 4))) (not (< x164 4)) (= x395 x868)))) (not x784)) (and (=> (and (not x707) (and (= x395 x521) (= (= x395 x868) x261))) (and (=> (and x261 (and (= x430 (x127 x78)) (<= 0 x430) (= x78 (x266 (x882 x395) (x401 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x430) (= 32 x320) (= x144 1))) x237) (=> (not x261) x106))) (=> x707 x106))) (=> (and x784 (and (= x868 x658) (= x800 (or (> x147 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x147)) (< x147 32)))) (> x454 0) (= x20 1889567281) (not (< x540 4)) (not (< x20 826074471)) (not (= 826074471 x20)) (= x540 36) (= x147 (x775 (- x540 4))) (= x540 36) (= x454 (x646 (x882 x620))) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x286))) (and (=> (and (and (= x326 x658) (= x222 (= x658 x868))) (not x800)) (and (=> (not x222) x327) (=> (and x222 (and (= x405 32) (= x281 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x561) (<= 0 x561) (= (x636 x71) x561) (= (x266 (x882 x658) (x401 1) 0) x71))) x804))) (=> x800 x327))))))) x17))
(assert (x525 x255))
(assert (= (and x586 x418) x484))
(assert (x525 x308))
(assert (x525 x743))
(assert (x525 x334))
(assert (x525 x294))
(assert (x525 x585))
(assert (x525 x787))
(assert (x773 (- x438 x577)))
(assert (x525 x903))
(assert (x774 x438 (- x494 x642)))
(assert (=> (>= 10000 x816) (= (x401 x816) (x882 x816))))
(assert (x525 x758))
(assert (x820 x816))
(assert (x525 x826))
(assert (x773 (- x438 x918)))
(assert (x525 x483))
(assert (= x787 (x734 (x882 x787))))
(assert (x525 x152))
(assert (x525 x899))
(assert (= (x882 599290589) (x401 599290589)))
(assert (x525 x759))
(assert (= x472 (and x805 (not x342))))
(assert (= x749 (and x517 x634)))
(assert (= (and x794 (not x283)) x873))
(assert (= x324 (and x433 x769)))
(assert (x525 x834))
(assert (x525 x180))
(assert (= x627 (and x382 x215)))
(assert (=> (<= x868 10000) (= (x882 x868) (x401 x868))))
(assert (x774 x438 x113))
(assert (= (and x118 (not x564)) x125))
(assert (x525 x349))
(assert (x525 x830))
(assert (= x894 (and x515 x625)))
(assert (= (or x3 x705) x558))
(assert (x525 x728))
(assert (x525 x772))
(assert (x525 x862))
(assert (x525 x156))
(assert (= x386 (and x274 x587)))
(assert (x774 x415 (- x642 x113)))
(assert (=> (>= 10000 x395) (= (x401 x395) (x882 x395))))
(assert (=> (<= x658 10000) (= (x882 x658) (x401 x658))))
(assert (= x323 (or x541 x714)))
(assert (x525 x611))
(assert (x525 x762))
(assert (x820 x519))
(assert (x525 x757))
(assert (x525 x642))
(assert (x906 x438 x494 x918 x577))
(assert (x525 x674))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x734 (x401 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= x133 (=> (and (= x470 x921) (= x686 0)) x907)))
(assert (x525 x520))
(assert (= x395 (x734 (x882 x395))))
(assert (x906 x438 x494 x642 x415))
(assert (= 404098525 (x734 (x401 404098525))))
(assert (x525 x706))
(assert (x525 x681))
(assert (x525 x392))
(assert (x525 x610))
(assert (= x535 (and (not x799) x442)))
(assert (x820 x620))
(assert (= x241 (=> (and (= x826 x307) (= 0 x221)) x264)))
(assert (= x680 (and x65 x160)))
(assert (x525 x628))
(assert (x525 x460))
(assert (x525 x363))
(assert (x525 x449))
(assert (= (and (not x242) x35) x374))
(assert (x525 x653))
(assert (x525 x209))
(assert (= (x734 (x882 x285)) x285))
(assert (x525 x879))
(assert (x774 x494 (- x438 x577)))
(assert (x525 x412))
(assert (x525 x482))
(assert (= (and x433 (not x769)) x5))
(assert (x592 x113 x438 x918 x577))
(assert (= (and x533 x48) x842))
(assert (x592 x577 x918 x438 x113))
(assert (=> (>= 10000 x40) (= (x882 x40) (x401 x40))))
(assert (x525 x173))
(assert (x525 x21))
(assert (= x35 (and x245 x376)))
(assert (x592 x113 x438 x642 x415))
(assert (= x351 (or x802 x75)))
(assert (x525 x320))
(assert (x525 x761))
(assert (= (x734 (x401 2569101039)) 2569101039))
(assert (= (and (not x245) x376) x10))
(assert (x774 x494 (- x438 x415)))
(assert (x525 x892))
(assert (x525 x20))
(assert (x525 x857))
(assert (x773 (- x642 x113)))
(assert (x525 x524))
(assert (= x586 (and x778 x239)))
(assert (= (=> (and (= (ite x639 1 0) x815) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x400)) (> 32 x400)) (> x400 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 0 x657)) (= (x775 (- x743 x884)) x643) (> x167 0) (= x884 x809) (= (not x126) x639) (not (> x884 x743)) (= x643 x358) (= (x846 x280) x167) (= x167 x815) (= (= 0 x167) x126) (= x177 x645)) x101) x582))
(assert (and (x661 x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x95 x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x444 x505 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x696 x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x505)) (x767 x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x773 x113))
(assert (x773 (- x642 x494)))
(assert (x773 (- x113 x918)))
(assert (x525 x561))
(assert (x525 x120))
(assert (= (and x543 (not x574)) x491))
(assert (x740 x372))
(assert (= x503 (or x579 x885)))
(assert (x525 x307))
(assert (x525 x915))
(assert (x592 x113 x438 x577 x918))
(assert (=> (>= 10000 x482) (= (x882 x482) (x401 x482))))
(assert (x525 x725))
(assert (x525 x573))
(assert (x774 x438 (- x113 x577)))
(assert (x525 x438))
(assert (x820 x721))
(assert (x525 x692))
(assert (= x57 (=> (and (= x501 x602) (= x419 0)) x198)))
(assert (x525 x662))
(assert (= (x734 (x882 x593)) x593))
(assert (x525 x402))
(assert (x820 x316))
(assert (= (x734 (x401 1889567281)) 1889567281))
(assert (= x876 (and x441 x83)))
(assert (x740 x99))
(assert (x525 x216))
(assert (= (x734 (x882 x816)) x816))
(assert (x525 x42))
(assert (=> (<= x379 10000) (= (x401 x379) (x882 x379))))
(assert (x525 x364))
(assert (x525 x498))
(assert (x525 x405))
(assert (=> (>= 10000 x429) (= (x401 x429) (x882 x429))))
(assert (x592 x438 x494 x642 x415))
(assert (= (and x236 (not x583)) x317))
(assert (=> (>= 10000 x599) (= (x401 x599) (x882 x599))))
(assert (=> (<= x455 10000) (= (x401 x455) (x882 x455))))
(assert (x525 x321))
(assert (x525 x470))
(assert (= x782 (and x544 x10)))
(assert (= x433 true))
(assert (= (x882 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x401 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x260 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x48 (and (not x625) x515)))
(assert (x525 x811))
(assert (= x868 (x734 (x882 x868))))
(assert (= x845 (and x535 x224)))
(assert (= x532 (and (not x813) x547)))
(assert (x525 x233))
(assert (x820 x593))
(assert (x580 x709))
(assert (= (x401 2835717307) (x882 2835717307)))
(assert (x774 x642 (- x415 x494)))
(assert (= x901 (and x311 (not x82))))
(assert (= x756 (=> (and (= x400 x200) (= x663 x657)) x473)))
(assert (= (and (not x511) x22) x109))
(assert (= (and x125 x448) x11))
(assert (x525 x284))
(assert (x525 x723))
(assert (x525 x884))
(assert (x525 x469))
(assert (x525 x300))
(assert (= (x401 1461501637330902918203684832716283019655932542976) (x882 1461501637330902918203684832716283019655932542976)))
(assert (x525 x207))
(assert (x773 (- x577 x113)))
(assert (= 2835717307 (x734 (x401 2835717307))))
(assert (x525 x856))
(assert (= (and (not x448) x125) x502))
(assert (=> (<= x538 10000) (= (x882 x538) (x401 x538))))
(assert (= x172 (and x93 x143)))
(assert (x525 x763))
(assert (x525 x240))
(assert (x773 x494))
(assert (x774 x918 (- x577 x494)))
(assert (x820 x599))
(assert (x525 x886))
(assert (= (and x118 x564) x690))
(assert (=> (>= 10000 x787) (= (x882 x787) (x401 x787))))
(assert (x525 x790))
(assert (x525 x33))
(assert (x525 x771))
(assert (x525 x253))
(assert (= x264 (=> (and (= x352 x221) (= x826 x595)) x508)))
(assert (x525 x721))
(assert (x525 x383))
(assert (x592 x642 x415 x494 x438))
(assert (x773 x918))
(assert (x525 x652))
(assert (x260 x685))
(assert (x773 (- x438 x415)))
(assert (x288 x685))
(assert (= x620 (x734 (x882 x620))))
(assert (= x802 (and x319 x261)))
(assert (x487 x605 x428))
(assert (x525 x205))
(assert (= x115 (or (and x35 x242) (and x597 x109) x751 (and x374 (not x60)) x259 (and x813 x547) (and x651 x213) (and x913 (not x536)) x43)))
(assert (x525 x614))
(assert (x525 x74))
(assert (x525 x703))
(assert (x525 x615))
(assert (x773 (- x577 x438)))
(assert (x288 32))
(assert (x525 x545))
(assert (x525 x577))
(assert (x525 x750))
(assert (= x805 (and x298 (not x833))))
(assert (x525 x107))
(assert (= x362 (and (not x254) x324)))
(assert (x592 x415 x642 x438 x113))
(assert (= x496 (or x567 (and (not x338) x912) (and x426 x822) (and (not x560) x861) (and x336 x875) (and x502 x506) x690 x11 (and x738 x390))))
(assert (x288 x741))
(assert (=> (>= 10000 x581) (= (x882 x581) (x401 x581))))
(assert (x525 x395))
(assert (x592 x918 x577 x438 x494))
(assert (= (and x746 x47) x543))
(assert (x773 (- x918 x494)))
(assert (= (or x323 x304 x920) x587))
(assert (x525 x868))
(assert (= x508 (=> (and (= (= 0 x352) x252) (or x252 (not x252))) x132)))
(assert (x525 x477))
(assert (= x619 (=> (and (= x302 0) (= x501 x694)) x149)))
(assert (x525 x726))
(assert (x525 x676))
(assert (x906 x415 x642 x438 x113))
(assert (x774 x918 (- x577 x438)))
(assert (x525 x330))
(assert (= x316 (x734 (x882 x316))))
(assert (x525 x142))
(assert (= x65 (and x5 (not x784))))
(assert (x906 x642 x415 x438 x494))
(assert (x525 x815))
(assert (x773 (- x494 x577)))
(assert (= (x401 1952775229) (x882 1952775229)))
(assert (x525 x192))
(assert (x773 (- x113 x415)))
(assert (x525 x602))
(assert (x525 x309))
(assert (= (and x782 (not x467)) x671))
(assert (x525 x729))
(assert (and (x661 x685 32) (x95 x685 32) (=> (> 32 0) (= (+ (* (x444 x685 32) 32) (x696 x685 32)) x685)) (x767 x685 32)))
(assert (= x746 (and x355 x315)))
(assert (x525 x629))
(assert (x774 x642 (- x415 x113)))
(assert (= x920 (or x97 x172)))
(assert (x525 x612))
(assert (x525 x819))
(assert (= (x882 2430363622) (x401 2430363622)))
(assert (= (=> (and (= x811 (x613 (+ x452 128))) (= x328 (x613 (+ x811 4))) (= x253 (x613 (+ x328 32))) (= (x613 (+ x632 31)) x505) (= x645 (x380 128)) (= x102 (x775 (- x253 x811))) (= (x256 115792089237316195423570985008687907853269984665640564039457584007913129639904 x505) x452) (> 1461501637330902918203684832716283019655932542976 x581) (not (= x87 0)) (not (or (and (= true (<= x632 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x632)) (> x632 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= 0 x581) (<= x581 1461501637330902918203684832716283019655932542975) (= x87 (x646 (x882 x581))) (= x839 (= x787 x581)) (not (= x170 0))) (and (=> (and (= x542 (= x620 x581)) (not x839)) (and (=> (and (and (and (and (= (x646 (x882 x868)) x412) (not (< x169 4)) (= x135 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x398) true) (< x398 32)) (> x398 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x398 (x775 (- x169 4))) (< x725 2569101039) (= x102 x169) (= x80 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x725 1889567281) (< 0 x412) (= 36 x169) (= x868 x429) (not (> 1889567281 x725))) x517) (= (= x581 x868) x517)) (not x542)) (and (=> x135 x278) (=> (and (not x135) (and (= x598 x429) (= x220 (= x868 x429)))) (and (=> (not x220) x278) (=> (and (and (= x667 32) (<= x182 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x664) (= x182 (x127 x889)) (= x889 (x266 (x882 x429) (x401 0) 0)) (<= 0 x182)) x220) x340))))) (=> (and (and (= x868 x519) (not (= 826074471 x611)) (= x623 x102) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x195) (and (> 32 x195) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x195)))) x272) (not (< x623 4)) (< 0 x860) (= 1889567281 x611) (not (> 826074471 x611)) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x545) (= x860 (x646 (x882 x620))) (= x623 36) (= (x775 (- x623 4)) x195)) x542) (and (=> (and (and (= (= x519 x868) x143) (= x522 x519)) (not x272)) (and (=> (not x143) x133) (=> (and x143 (and (<= x660 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x686 1) (= (x266 (x882 x519) (x401 1) 0) x425) (<= 0 x660) (= 32 x921) (= (x636 x425) x660))) x907))) (=> x272 x133))))) (=> (and (and (= x593 x868) (not (= x134 826074471)) (= (x775 (- x367 4)) x443) (= x628 (x646 (x882 x787))) (= x573 50942633119752846454219349998365661925608737367104304655302372697894809501696) (not (< x134 826074471)) (= x367 x102) (= x134 1889567281) (not (< x367 4)) (> x628 0) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x443) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x443)) (> 32 x443))) x799) (= x367 36)) x839) (and (=> x799 x837) (=> (and (and (= x224 (= x593 x868)) (= x593 x760)) (not x799)) (and (=> (and x224 (and (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x910 0) (= 32 x410) (= x273 (x266 (x882 x593) (x401 1) 0)) (= 1 x209) (= x910 (x887 x273)))) x622) (=> (not x224) x837))))))) x158))
(assert (= (x401 1889567281) (x882 1889567281)))
(assert (x525 x797))
(assert (and (= 81 (x12 27 3)) (= (x12 9 9) 81) (= (x12 3 3) 9) (= (x12 9 3) 27)))
(assert (= (x734 (x401 2430363622)) 2430363622))
(assert (= (and x5 x784) x258))
(assert (= (and x917 x901) x246))
(assert (= x211 (and x532 (not x817))))
(assert (x525 x609))
(assert (x773 (- x577 x494)))
(assert (x525 x296))
(assert (x525 x748))
(assert (= 1461501637330902918203684832716283019655932542975 (x734 (x401 1461501637330902918203684832716283019655932542975))))
(assert (x525 x202))
(assert (x525 x531))
(assert (= x737 (and x66 (not x301))))
(assert (= x634 (and (not x542) x650)))
(assert (= x722 (and x812 x451)))
(assert (= x72 (and x375 x119)))
(assert (= (and x269 (not x557)) x497))
(assert (x525 x25))
(assert (= x375 (and x484 (not x150))))
(assert (= (or x446 x571) x678))
(assert (x525 x798))
(assert (x525 x522))
(assert (x774 x438 (- x113 x918)))
(assert (x525 x24))
(assert (= (x401 1461501637330902918203684832716283019655932542975) (x882 1461501637330902918203684832716283019655932542975)))
(assert (= x742 (or (and x799 x442) (and (not x224) x535))))
(assert (x774 x415 (- x642 x438)))
(assert (x525 x144))
(assert (= (=> (and (= 0 x663) (= x200 x501)) x756) x199))
(assert (x525 x695))
(assert (x525 x350))
(assert (x525 x788))
(assert (x773 (- x415 x494)))
(assert (x592 x918 x577 x113 x438))
(assert (x525 x550))
(assert (x525 x588))
(assert (= (x734 (x882 x429)) x429))
(assert (x592 x438 x113 x918 x577))
(assert (and (x661 x505 32) (x95 x505 32) (=> (> 32 0) (= (+ (* (x444 x505 32) 32) (x696 x505 32)) x505)) (x767 x505 32)))
(assert (= x794 (and (not x185) x737)))
(assert (= (x734 (x882 x599)) x599))
(assert (x525 x217))
(assert (x592 x494 x438 x415 x642))
(assert (= x337 (and x495 x219)))
(assert (x525 x509))
(assert (x525 x339))
(assert (x525 x554))
(assert (x525 x657))
(assert (x525 x204))
(assert (= x584 (and (not x800) x258)))
(assert (x525 x396))
(assert (x820 x857))
(assert (x774 x494 (- x438 x918)))
(assert (= x327 (=> (and (= x281 0) (= x305 x405)) x804)))
(assert (= x43 (and x532 x817)))
(assert (= (and x150 x484) x353))
(assert (x525 x793))
(assert (x525 x141))
(assert (= x753 (and (not x922) x850)))
(assert (= (and (not x917) x901) x637))
(assert (x525 x667))
(assert (x525 x786))
(assert (x525 x146))
(assert (x820 x379))
(assert (x525 x131))
(assert (x525 x529))
(assert (x525 x519))
(assert (x525 x171))
(assert (x525 x280))
(assert (x525 x801))
(assert (x525 x316))
(assert (x525 x689))
(assert (x525 x112))
(assert (= x437 (=> (= (= 0 x599) x14) (and (=> (and (not x14) (= (= 0 x538) x41)) (and (=> (and (and (= (x659 x203) x108) (<= x108 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x266 (x882 x599) (x401 0) 0) x203) (= (> x529 x108) x625) (>= x108 0)) (not x41)) (and (=> (and (not x625) (= x533 (< x108 x529))) (and (=> x533 x57) (=> (and (and (= (x659 x250) x509) (= (x266 (x882 x538) (x401 0) 0) x810) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x529)) x308) (= (x266 (x882 x599) (x401 0) 0) x250) (= (> x392 x308) x289) (<= x392 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x392 (x176 x810)) (>= x509 0) (<= x509 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x775 (- x108 x529)) x175) (>= x392 0)) (not x533)) (and (=> (and (not x289) (and (<= 0 x183) (= x419 1) (= x612 1) (= x602 32) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (= (x613 (+ x529 x392)) x841) (= (x176 x810) x183))) x198) (=> x289 x57))))) (=> x625 x57))) (=> x41 x57))) (=> x14 x57)))))
(assert (x525 x26))
(assert (x774 x438 (- x494 x577)))
(assert (x773 (- x415 x438)))
(assert (= x485 (and (not x665) x314)))
(assert (x525 x293))
(assert (x525 x789))
(assert (x525 x883))
(assert (x525 x658))
(assert (x525 x780))
(assert (= x791 (=> (and (= 0 x720) (= x307 x652)) x555)))
(assert (x773 (- x415 x113)))
(assert (= (or (and x135 x749) (and x91 (not x220))) x541))
(assert (x525 x877))
(assert (x525 x691))
(assert (= x382 (and (not x58) x668)))
(assert (x525 x492))
(assert (x525 x329))
(assert (= x343 (and (not x123) x462)))
(assert (= (or x718 x873) x466))
(assert (= x668 (and x44 x387)))
(assert (x525 x849))
(assert (x525 x331))
(assert (x820 x429))
(assert (= (and x41 x534) x843))
(assert (x525 x478))
(assert (= x913 (and x60 x374)))
(assert (x525 x923))
(assert (x773 (- x642 x438)))
(assert (x525 x348))
(assert (= (and (not x130) x386) x640))
(assert (x525 x157))
(assert (= x837 (=> (and (= x470 x410) (= 0 x209)) x622)))
(assert (= x259 (and x852 x282)))
(assert (x525 x898))
(assert (x525 x166))
(assert (= x278 (=> (and (= x664 0) (= x667 x470)) x340)))
(assert (= (=> (and (>= x428 0) (= (x256 1461501637330902918203684832716283019655932542975 x709) x691) (= x605 (x12 x438 x113)) (>= 1461501637330902918203684832716283019655932542975 x40) (= x124 (x266 (x882 x868) (x401 0) 0)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x12 x438 x494)) (not (> x438 x208)) (not (= 0 x868)) (= (x616 x811) x743) (<= 0 x428) (<= 0 x208) (= x372 (x12 x438 x494)) (= (x444 x605 x428) x642) (= (x127 x731) x745) (<= x208 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x274 (= x40 x691)) (= (x266 (x882 x868) (x401 0) 0) x731) (= (x613 (+ 31 x171)) x685) (= x208 (x127 x124)) (<= 0 x745) (not (> x438 x428)) (= (x775 (- x208 x162)) x603) (> x428 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x428) (<= x428 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x40) (not (= 0 x148)) (= (x775 (- x428 x162)) x706) (= (x775 (- x428 x162)) x74) (> 1461501637330902918203684832716283019655932542976 x40) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x12 x438 x113)) (= (x256 115792089237316195423570985008687907853269984665640564039457584007913129639904 x685) x711) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x171) (and (= (<= x171 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x171 32)))) (not (< x208 x438)) (= x918 (x444 x372 x428)) (<= x745 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x613 (+ x811 x711)) x280)) (and (=> (and (not x274) (and (= (+ x1 x675) x99) (= (x256 1461501637330902918203684832716283019655932542975 x709) x662) (= x330 (x613 (+ 96 x371))) (= x642 x549) (= (x613 (+ x903 32)) x553) (= (x646 (x882 x40)) x284) (not (> x642 x113)) (= (x775 (- x494 x918)) x63) (< 0 x99) (= x918 x1) (not (= 0 x284)) (= (x12 x918 x577) x458) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x12 x918 x577)) (< x40 1461501637330902918203684832716283019655932542976) (= (x775 (- x113 x642)) x577) (= x223 x704) (= (+ x223 x549) x460) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x704 x642)) (= (x775 (- x330 x280)) x166) (= x675 x63) (= (x613 (+ x280 4)) x371) (> 1461501637330902918203684832716283019655932542976 x581) (= x245 (= x787 x40)) (>= x40 0) (= (x613 (+ 32 x371)) x903) (= (x444 x458 x99) x704) (>= 1461501637330902918203684832716283019655932542975 x581) (<= 0 x581) (< (+ x918 x63) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x581 x662) (not (< x494 x918)) (<= x40 1461501637330902918203684832716283019655932542975) (= x231 (x256 1461501637330902918203684832716283019655932542975 x741)))) (and (=> (and (and (= x361 x166) (= x242 (or (> x456 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x456 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x456 96)))) (> x163 0) (= x77 x868) (not (= 157198259 x900)) (> 826074471 x900) (= 599290589 x900) (not (< x361 4)) (= x192 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= (x775 (- x361 4)) x456) (= (x646 (x882 x787)) x163) (= x231 x379) (= 100 x361) (not (= 117300739 x900)) (= x460 x121) (not (= 404098525 x900))) x245) (and (=> x242 x241) (=> (and (not x242) (and (= x296 x77) (= (= x868 x77) x60))) (and (=> (not x60) x241) (=> (and (and (= x54 x379) (= x536 (= x231 x379))) x60) (and (=> (not x536) x241) (=> (and x536 (and (= x695 x121) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x388) (<= 0 x388) (= x908 (x266 (x882 x77) (x401 1) 0)) (= x388 (x887 x908)) (= (< x388 x460) x651))) (and (=> x651 x241) (=> (and (not x651) (= x282 (< x388 x121))) (and (=> x282 x241) (=> (and (and (= (> x25 x51) x511) (<= x25 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x111 (x775 (- x388 x121))) (<= 0 x25) (= (x266 (x882 x379) (x401 1) 0) x271) (= (x905 x271) x25) (= x673 (x266 (x882 x77) (x401 1) 0)) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121)) x51)) (not x282)) (and (=> (and (and (= (< x204 x25) x597) (= x204 (x613 (+ x25 x121)))) (not x511)) (and (=> (and (not x597) (and (= x196 (x266 (x882 x868) x312 0)) (>= x294 0) (<= x294 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x121 x294) x813) (= x312 (x266 (x882 x77) (x401 2) 0)) (= x294 (x431 x196)))) (and (=> (and (= (< x294 x121) x817) (not x813)) (and (=> x817 x241) (=> (and (and (= 32 x826) (= (x775 (- x294 x121)) x136) (= 1 x221)) (not x817)) x264))) (=> x813 x241))) (=> x597 x241))) (=> x511 x241))))))))))))) (=> (and (not x245) (= x544 (= x40 x620))) (and (=> (and (and (and x583 (and (= 100 x210) (not (> 4 x210)) (= x202 (x646 (x882 x868))) (= x4 599290589) (= x210 x166) (> 1889567281 x4) (= x621 (x775 (- x210 4))) (= x427 (or (and (= (<= x621 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 96 x621)) (> x621 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x363 x868) (not (= 404098525 x4)) (= x231 x190) (> 826074471 x4) (not (= 157198259 x4)) (= x460 x2) (> x202 0) (= x729 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= x4 234755713)))) (= x583 (= x868 x40))) (not x544)) (and (=> x427 x854) (=> (and (not x427) (and (= x357 x363) (= x355 (= x868 x363)))) (and (=> (not x355) x854) (=> (and x355 (and (= x190 x899) (= (= x190 x231) x47))) (and (=> (and (and (= x733 (x266 (x882 x868) x701 0)) (= x2 x216) (= (= x348 115792089237316195423570985008687907853269984665640564039457584007913129639935) x574) (= x348 (x559 x733)) (= (x266 (x882 x363) (x401 1) 0) x701) (<= x348 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x348 0)) x47) (and (=> (and (= (> x2 x348) x562) (not x574)) (and (=> (and (= x83 (< x348 x2)) (not x562)) (and (=> (and (not x83) (and (= (x775 (- x348 x2)) x478) (= x13 (= 0 x363)))) (and (=> (and (not x13) (= x665 (= 0 x868))) (and (=> x665 x854) (=> (not x665) x719))) (=> x13 x854))) (=> x83 x854))) (=> x562 x854))) (=> x574 x719))) (=> (not x47) x854))))))) (=> (and (and (not (> 4 x526)) (< x788 826074471) (= x585 (x775 (- x526 4))) (= x771 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x874 x460) (= x231 x482) (not (= 117300739 x788)) (not (= 157198259 x788)) (> x713 0) (= 100 x526) (= x526 x166) (not (= x788 404098525)) (= x721 x868) (= x788 599290589) (= (or (and (> 96 x585) (= (<= x585 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x585)) x467) (= (x646 (x882 x620)) x713)) x544) (and (=> (and (not x467) (and (= (= x721 x868) x825) (= x721 x262))) (and (=> (not x825) x791) (=> (and (and (= x350 x482) (= x189 (= x231 x482))) x825) (and (=> (not x189) x791) (=> (and (and (= x141 x874) (<= x240 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x240 (x636 x393)) (= x557 (< x240 x460)) (= (x266 (x882 x721) (x401 1) 0) x393) (<= 0 x240)) x189) (and (=> (and (= (> x874 x240) x736) (not x557)) (and (=> (and (not x736) (and (= (x266 (x882 x482) (x401 1) 0) x863) (= x397 (x168 x863)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x397) (= (x266 (x882 x721) (x401 1) 0) x333) (= x856 (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x874))) (<= 0 x397) (= x7 (x775 (- x240 x874))) (= x475 (> x397 x856)))) (and (=> x475 x791) (=> (and (and (= (x613 (+ x874 x397)) x49) (= (< x49 x397) x301)) (not x475)) (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x420) (= (x53 x480) x420) (= (x266 (x882 x868) x249 0) x480) (<= 0 x420) (= (> x874 x420) x185) (= x249 (x266 (x882 x721) (x401 2) 0))) (not x301)) (and (=> x185 x791) (=> (and (= (< x420 x874) x283) (not x185)) (and (=> (and (not x283) (and (= x218 (x775 (- x420 x874))) (= x652 32) (= 1 x720))) x555) (=> x283 x791))))) (=> x301 x791))))) (=> x736 x791))) (=> x557 x791))))))) (=> x467 x791))))))) (=> (and (and (= x630 x528) (= (x646 (x882 x581)) x396) (= (+ x896 x243) x884) (= x871 x243) (>= 1461501637330902918203684832716283019655932542975 x581) (= (x775 (- x113 x642)) x630) (= x859 (x613 (+ 96 x523))) (> x255 0) (= x642 x201) (< (+ x871 x918) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x898 (x613 (+ x523 32))) (< (x12 x642 x415) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (= x396 0)) (not (> x642 x113)) (<= 0 x581) (= x609 (x775 (- x859 x280))) (= (x613 (+ x280 4)) x523) (= x918 x896) (= (= x787 x581) x130) (< x581 1461501637330902918203684832716283019655932542976) (= x275 (x613 (+ 32 x898))) (= (x12 x642 x415) x432) (= (+ x201 x528) x255) (= (x444 x432 x255) x871) (< (+ x642 x630) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x775 (- x494 x918)) x415) (= (x256 1461501637330902918203684832716283019655932542975 x741) x377) (not (> x918 x494))) x274) (and (=> (and (= (= x581 x620) x847) (not x130)) (and (=> (and x847 (and (not (> 4 x411)) (< 0 x197) (not (= x676 157198259)) (= x377 x455) (= 100 x411) (= x638 x884) (= x676 599290589) (not (= x676 117300739)) (= (x775 (- x411 4)) x588) (= (x646 (x882 x620)) x197) (> 826074471 x676) (= x411 x609) (= x391 16156842317565293874272834530371880720966471053262404558597773956279093428224) (not (= 404098525 x676)) (= x868 x316) (= (or (and (> 96 x588) (= (<= x588 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x588 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x922))) (and (=> (and (not x922) (and (= x316 x453) (= x318 (= x868 x316)))) (and (=> (not x318) x619) (=> (and (and (= (= x455 x377) x387) (= x455 x779)) x318) (and (=> (and x387 (and (= x838 (x266 (x882 x316) (x401 1) 0)) (<= x777 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x772 x638) (= x58 (< x777 x884)) (>= x777 0) (= x777 (x636 x838)))) (and (=> (and (not x58) (= x215 (> x638 x777))) (and (=> x215 x619) (=> (and (not x215) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x589) (= x589 (x654 x354)) (<= 0 x589) (= x369 (x266 (x882 x316) (x401 1) 0)) (= (< x122 x589) x219) (= (x266 (x882 x455) (x401 1) 0) x354) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x638)) x122) (= x214 (x775 (- x777 x638))))) (and (=> (and (not x219) (and (= x717 (x613 (+ x589 x638))) (= x833 (> x589 x717)))) (and (=> (and (and (= (< x891 x638) x342) (= (x53 x193) x891) (= (x266 (x882 x316) (x401 2) 0) x31) (= (x266 (x882 x868) x31 0) x193) (>= x891 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x891)) (not x833)) (and (=> x342 x619) (=> (and (= (> x638 x891) x624) (not x342)) (and (=> (and (and (= 1 x302) (= 32 x694) (= (x775 (- x891 x638)) x140)) (not x624)) x149) (=> x624 x619))))) (=> x833 x619))) (=> x219 x619))))) (=> x58 x619))) (=> (not x387) x619))))) (=> x922 x619))) (=> (and (and (and x373 (and (not (= x407 404098525)) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x339) (= x868 x599) (not (< x631 4)) (= x609 x631) (> x155 0) (< x407 1889567281) (= 599290589 x407) (not (= 234755713 x407)) (= x631 100) (= x710 (or (and (> 96 x793) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x793))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x793))) (> 826074471 x407) (= (x775 (- x631 4)) x793) (= x377 x538) (= x529 x884) (= x155 (x646 (x882 x868))) (not (= x407 157198259)))) (= (= x868 x581) x373)) (not x847)) (and (=> (and (not x710) (and (= x481 x599) (= x239 (= x599 x868)))) (and (=> (and (and (= x418 (= x538 x377)) (= x538 x750)) x239) (and (=> (not x418) x57) (=> (and (and (= x529 x205) (>= x674 0) (= x150 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x674)) (= (x559 x59) x674) (= (x266 (x882 x868) x265 0) x59) (<= x674 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x266 (x882 x599) (x401 1) 0) x265)) x418) (and (=> x150 x437) (=> (and (= x119 (< x674 x529)) (not x150)) (and (=> x119 x57) (=> (and (= (< x674 x529) x385) (not x119)) (and (=> (and (not x385) (and (= (= 0 x599) x812) (= x604 (x775 (- x674 x529))))) (and (=> (and (not x812) (= (= 0 x868) x123)) (and (=> x123 x57) (=> (not x123) x437))) (=> x812 x57))) (=> x385 x57))))))))) (=> (not x239) x57))) (=> x710 x57))))) (=> (and (and (= x666 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x377 x285) (> 826074471 x9) (not (= 157198259 x9)) (not (= 117300739 x9)) (= (x775 (- x492 4)) x88) (not (< x492 4)) (not (= x9 404098525)) (= x884 x303) (= x868 x614) (> x527 0) (= x492 100) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x88) (and (> 96 x88) (= true (<= x88 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) x336) (= 599290589 x9) (= x609 x492) (= (x646 (x882 x787)) x527)) x130) (and (=> (and (not x336) (and (= x338 (= x868 x614)) (= x349 x614))) (and (=> (and (and (= x146 x285) (= (= x377 x285) x560)) x338) (and (=> (and (and (= (x266 (x882 x614) (x401 1) 0) x359) (>= x24 0) (= x24 (x887 x359)) (= x738 (< x24 x884)) (<= x24 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x724 x303)) x560) (and (=> x738 x199) (=> (and (not x738) (= (< x24 x303) x564)) (and (=> (and (not x564) (and (= (x266 (x882 x285) (x401 1) 0) x346) (= x277 (x266 (x882 x614) (x401 1) 0)) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x303)) x656) (= x448 (< x656 x647)) (<= x647 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x670 (x775 (- x24 x303))) (>= x647 0) (= (x229 x346) x647))) (and (=> x448 x199) (=> (and (and (= (x613 (+ x303 x647)) x531) (= x506 (< x531 x647))) (not x448)) (and (=> (and (and (= (x431 x649) x423) (<= 0 x423) (= x649 (x266 (x882 x868) x55 0)) (= x822 (> x303 x423)) (= (x266 (x882 x614) (x401 2) 0) x55) (<= x423 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not x506)) (and (=> x822 x199) (=> (and (not x822) (= (> x303 x423) x299)) (and (=> (and (not x299) (and (= x200 32) (= 1 x663) (= (x775 (- x423 x303)) x915))) x756) (=> x299 x199))))) (=> x506 x199))))) (=> x564 x199))))) (=> (not x560) x199))) (=> (not x338) x199))) (=> x336 x199))))))) x270))
(assert (x525 x148))
(assert (x525 x415))
(assert (=> (>= 10000 x285) (= (x401 x285) (x882 x285))))
(assert (x820 x538))
(assert (x592 x415 x642 x494 x438))
(assert (= (x882 3524403367) (x401 3524403367)))
(assert (x740 x605))
(assert (x773 (- x918 x438)))
(assert (x525 x420))
(assert (x525 x632))
(assert (x525 x760))
(assert (x525 x540))
(assert (x525 x526))
(assert (= (and x655 (not x154)) x446))
(assert (x525 x208))
(assert (x906 x113 x438 x918 x577))
(assert (x525 x79))
(assert (= (or x496 x682) x206))
(assert (x525 x302))
(assert (x592 x642 x415 x113 x438))
(assert (= (x882 2569101039) (x401 2569101039)))
(assert (x525 x623))
(assert (= 234755713 (x734 (x401 234755713))))
(assert (x820 x455))
(assert (x525 x248))
(assert (x906 x494 x438 x918 x577))
(assert (= (x734 (x401 2757214935)) 2757214935))
(assert (x525 x400))
(assert (x525 x381))
(assert (x906 x113 x438 x642 x415))
(assert (= x852 (and x213 (not x651))))
(assert (= (and x86 x839) x442))
(assert (=> (<= x593 10000) (= (x401 x593) (x882 x593))))
(assert (x906 x577 x918 x438 x113))
(assert (x525 x505))
(assert (x525 x716))
(assert (x525 x62))
(assert (x773 (- x494 x642)))
(assert (x525 x430))
(assert (= (x734 (x882 x519)) x519))
(assert (x525 x581))
(assert (= (and x650 x542) x565))
(assert (x525 x46))
(assert (x820 x285))
(assert (x592 x438 x113 x415 x642))
(assert (x592 x577 x918 x438 x494))
(assert (= (and x584 x222) x165))
(assert (x580 x741))
(assert (x525 x530))
(assert (x525 x36))
(assert (= 157198259 (x734 (x401 157198259))))
(assert (= (x734 (x882 x190)) x190))
(assert (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x734 (x401 16156842317565293874272834530371880720966471053262404558597773956279093428224))))
(assert (x525 x891))
(assert (x525 x645))
(assert (= x118 (and x390 (not x738))))
(assert (= (and x338 x912) x861))
(assert (x525 x210))
(assert (x525 x490))
(assert (x820 x581))
(assert (x906 x438 x113 x642 x415))
(assert (x525 x186))
(assert (= x149 (=> (and (= x400 x694) (= x302 x657)) x473)))
(assert (x592 x113 x438 x415 x642))
(assert (x525 x231))
(assert (x740 x428))
(assert (x525 x664))
(assert (x525 x556))
(assert (x525 x717))
(assert (x592 x438 x494 x415 x642))
(assert (= 3524403367 (x734 (x401 3524403367))))
(assert (x774 x577 (- x918 x438)))
(assert (x525 x40))
(assert (x525 x303))
(assert (x525 x200))
(assert (x525 x419))
(assert (x525 x594))
(assert (= x751 (and x511 x22)))
(assert (= (and (not x219) x495) x298))
(assert (x525 x421))
(assert (x774 x438 (- x494 x415)))
(assert (x525 x455))
(assert (x592 x494 x438 x642 x415))
(assert (x525 x4))
(assert (x820 x190))
(assert (= x455 (x734 (x882 x455))))
(assert (x260 x709))
(assert (x525 x181))
(assert (= (x734 (x882 x721)) x721))
(assert (= (and x441 (not x83)) x808))
(assert (x592 x577 x918 x113 x438))
(assert (x525 x9))
(assert (x525 x77))
(assert (x774 x438 (- x113 x415)))
(assert (x525 x145))
(assert (= (x734 (x401 50942633119752846454219349998365661925608737367104304655302372697894809501696)) 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x525 x866))
(assert (= (and x640 x847) x850))
(assert (x525 x870))
(assert (= x688 (and (not x822) x426)))
(assert (x773 (- x918 x113)))
(assert (x525 x918))
(assert (= (or x768 x206 x687) x617))
(assert (x487 x458 x99))
(assert (= x422 (and x247 x373)))
(assert (x525 x527))
(assert (x525 x234))
(assert (x525 x724))
(assert (x525 x507))
(assert (x525 x358))
(assert (x525 x538))
(assert (x525 x457))
(assert (x525 x501))
(assert (= (or x244 x552) x687))
(assert (x525 x711))
(assert (x525 x553))
(assert (x820 x77))
(assert (= (=> (and (= x632 x313) (= x892 x170)) x158) x893))
(assert (x525 x183))
(assert (x525 x267))
(assert (x906 x918 x577 x438 x113))
(assert (x525 x641))
(assert (x525 x305))
(assert (x525 x589))
(assert (x592 x918 x577 x438 x113))
(assert (= x567 (and x299 x688)))
(assert (x525 x816))
(assert (x525 x238))
(assert (x525 x134))
(assert (= (and (not x215) x382) x495))
(assert (x525 x68))
(assert (x288 1461501637330902918203684832716283019655932542976))
(assert (= x132 (=> (and (< 0 x68) (= (ite x880 1 0) x344) (= (x416 x280) x68) (= (= x68 0) x851) (= (x775 (- x645 x460)) x46) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x595)) (> 32 x595)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x595))) (= x809 x460) (= x46 x177) (= x358 x743) (= (not x851) x880) (not (> x460 x645)) (not (= x352 0)) (= x68 x344)) x101)))
(assert (= (or x343 x353) x635))
(assert (x525 x510))
(assert (x525 x297))
(assert (x525 x795))
(assert (x525 x595))
(assert (= (and (not x119) x375) x38))
(assert (x288 x505))
(assert (x820 x787))
(assert (= (=> (and (= x686 x148) (= x921 x171)) x270) x907))
(assert (= (x882 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x401 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (or x708 (and x778 (not x239)) x116 x722 (and x422 x710) x591 (and (not x418) x586) x843 x842 x72 x212 x894) x114))
(assert (= (x401 234755713) (x882 234755713)))
(assert (x525 x702))
(assert (x288 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x740 x432))
(assert (x525 x638))
(assert (x525 x347))
(assert (= (or x679 x485) x6))
(assert (x906 x577 x918 x438 x494))
(assert (x525 x859))
(assert (= (and x279 x617) x64))
(assert (x525 x310))
(assert (x592 x438 x494 x918 x577))
(assert (and (x661 x709 1461501637330902918203684832716283019655932542976) (x95 x709 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* (x444 x709 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x696 x709 1461501637330902918203684832716283019655932542976)) x709)) (x767 x709 1461501637330902918203684832716283019655932542976)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x734 (x401 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x525 x169))
(assert (= x555 (=> (and (= x352 x720) (= x595 x652)) x508)))
(assert (x487 x372 x428))
(assert (= (=> (and (= x148 x664) (= x171 x667)) x270) x340))
(assert (x525 x19))
(assert (x525 x600))
(assert (x288 x709))
(assert (x525 x713))
(assert (x525 x445))
(assert (x525 x864))
(assert (x774 x113 (- x438 x918)))
(assert (x525 x685))
(assert (x525 x630))
(assert (x525 x56))
(assert (x525 x99))
(assert (= x747 (and (not x533) x48)))
(assert (= (x734 (x401 117300739)) 117300739))
(assert (x525 x292))
(assert (x525 x452))
(assert (= x91 (and x749 (not x135))))
(assert (x525 x604))
(assert (x525 x755))
(assert (x525 x900))
(assert (= x683 (and x655 x154)))
(assert (= (=> (= (= x363 0) x406) (and (=> x406 x854) (=> (and (= x82 (= x190 0)) (not x406)) (and (=> (and (and (= x292 (x659 x796)) (= (> x2 x292) x917) (= x796 (x266 (x882 x363) (x401 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292) (<= 0 x292)) (not x82)) (and (=> (and (= (> x2 x292) x684) (not x917)) (and (=> x684 x854) (=> (and (and (= (x266 (x882 x190) (x401 0) 0) x693) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x2)) x468) (= x518 (x766 x693)) (<= 0 x781) (= x154 (< x468 x518)) (= (x775 (- x292 x2)) x56) (= x306 (x266 (x882 x363) (x401 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x781) (= x781 (x659 x306)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x518) (>= x518 0)) (not x684)) (and (=> x154 x854) (=> (and (not x154) (and (<= x692 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x479 1) (= x692 (x766 x693)) (>= x692 0) (= x23 (x613 (+ x2 x518))) (= x762 1) (= x870 32))) x138))))) (=> x917 x854))) (=> x82 x854))))) x719))
(assert (= (x734 (x882 x77)) x77))
(assert (x774 x438 x494))
(assert (x525 x643))
(assert (x525 x663))
(assert (= x912 (and (not x336) x875)))
(assert (x525 x63))
(assert (x525 x102))
(assert (= (x401 2757214935) (x882 2757214935)))
(assert (= (and (not x272) x565) x93))
(assert (x525 x741))
(assert (x820 x395))
(assert (x525 x361))
(assert (x525 x434))
(assert (= (=> (and (and (and (>= x74 0) (= x732 404098525) (= (x646 (x882 x868)) x234) (<= x74 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 1889567281 x732) (< x732 826074471) (= x74 x862) (not (= x732 157198259)) (not (= 234755713 x732)) (> x234 0)) (and (and (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x358) (= (= x329 0) x823) (not (< x626 1889567281)) (<= 0 x358) (= x537 0) (not (= x626 1989257563)) (= x358 x653) (not (= 1889567281 x626)) (> x801 0) (> 2569101039 x626) (not (= 1952775229 x626)) (= (x646 (x882 x868)) x801) (= x329 x142) (= x626 2430363622)) (and (= x653 x819) (= x576 (= x823 x590)) (= x633 0) (= (= x819 0) x590) (= x792 (and x100 x576)))) (and (= x463 (= x755 0)) (= x70 (x646 (x882 x868))) (= x74 x142) (= x293 0) (> x70 0) (> 1889567281 x39) (= x39 404098525) (= x100 (= x32 x463)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x74) (not (= 157198259 x39)) (<= 0 x74) (= x755 x789) (< x39 826074471) (not (= 234755713 x39)))) (and (= x789 x177) (= x862 x457) (= x403 (x646 (x882 x868))) (not (> 2569101039 x477)) (not (> 1889567281 x477)) (= x477 2569101039) (= x797 0) (= x32 (= 0 x457)) (< 0 x403) (<= x177 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x177)))) (and (= x758 x809) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177) x129) (not x129))) x792) x101))
(assert (= (or x466 x678 x110) x15))
(assert (x525 x599))
(assert (x525 x39))
(assert (= (x734 (x882 x658)) x658))
(assert (x525 x140))
(assert (and (x661 x741 1461501637330902918203684832716283019655932542976) (x95 x741 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* (x444 x741 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x696 x741 1461501637330902918203684832716283019655932542976)) x741)) (x767 x741 1461501637330902918203684832716283019655932542976)))
(assert (x525 x694))
(assert (x592 x415 x642 x113 x438))
(assert (= x848 (and x497 x736)))
(assert (x592 x494 x438 x577 x918))
(assert (x525 x313))
(assert (x525 x49))
(assert (x592 x438 x494 x577 x918))
(assert (x525 x147))
(assert (x525 x167))
(assert (x525 x568))
(assert (x525 x436))
(assert (x525 x163))
(assert (x525 x423))
(assert (x525 x720))
(assert (x525 x871))
(assert (x774 x415 (- x642 x494)))
(assert (= (x734 (x401 826074471)) 826074471))
(assert (x525 x881))
(assert (x525 x777))
(assert (x525 x69))
(assert (x525 x548))
(assert (x525 x290))
(assert (x525 x474))
(assert (x525 x840))
(assert (= (x882 1989257563) (x401 1989257563)))
(assert (x525 x598))
(assert (x820 x482))
(assert (x525 x377))
(assert (=> (>= 10000 x614) (= (x401 x614) (x882 x614))))
(assert (x773 x642))
(assert (= x538 (x734 (x882 x538))))
(assert (= (and x386 x130) x875))
(assert (x592 x438 x113 x577 x918))
(assert (x525 x440))
(assert (x525 x281))
(assert (=> (<= x857 10000) (= (x882 x857) (x401 x857))))
(assert (x525 x197))
(assert (x525 x686))
(assert (x906 x438 x113 x918 x577))
(assert (= (and x825 x671) x566))
(assert (x592 x415 x642 x438 x494))
(assert (= 1461501637330902918203684832716283019655932542976 (x734 (x401 1461501637330902918203684832716283019655932542976))))
(assert (= (=> (and (= x209 x148) (= x171 x410)) x270) x622))
(assert (x525 x162))
(assert (x525 x391))
(assert (x525 x214))
(assert (not x17))
(assert (x525 x456))
(assert (= (x734 (x882 x363)) x363))
(assert (x525 x54))
(assert (x525 x410))
(assert (x820 x658))
(assert (x525 x516))
(assert (x525 x752))
(assert (x740 x255))
(assert (= (and x634 (not x517)) x194))
(assert (x525 x709))
(assert (x525 x352))
(assert (x820 x868))
(assert (x525 x411))
(assert (= x379 (x734 (x882 x379))))
(assert (= (x734 (x882 x857)) x857))
(assert (= (and x314 x665) x435))
(assert (x525 x878))
(assert (x525 x518))
(assert (x906 x918 x577 x438 x494))
(assert (x774 x113 (- x438 x415)))
(assert (x525 x827))
(assert (x525 x779))
(assert (x774 x113 (- x438 x577)))
(assert (= (and x422 (not x710)) x778))
(assert (= x679 (and x574 x543)))
(assert (x525 x596))
(assert (x525 x781))
(assert (x525 x322))
(assert (x773 x577))
(assert (x525 x397))
(assert (x525 x621))
(assert (= (and x38 x385) x212))
(assert (x525 x735))
(assert (x592 x642 x415 x438 x494))
(assert (x774 x438 (- x494 x918)))
(assert (x260 x505))
(assert (= x853 (and x252 x15)))
(assert (= x482 (x734 (x882 x482))))
(assert (= (or (and (not x143) x93) (and x565 x272)) x97))
(assert (x525 x357))
(assert (x525 x190))
(assert (x525 x371))
(assert (=> (>= 10000 x77) (= (x401 x77) (x882 x77))))
(assert (x906 x642 x415 x438 x113))
(assert (x525 x113))
(assert (x525 x344))
(assert (x820 x614))
(assert (x525 x262))
(assert (= (and x6 x406) x512))
(assert (= (and x560 x861) x390))
(assert (x525 x275))
(assert (= x86 (or x368 x503 x351)))
(assert (= (x401 117300739) (x882 117300739)))
(assert (= x462 (and x451 (not x812))))
(assert (= x40 (x734 (x882 x40))))
(assert (x260 x741))
(assert (= (and x247 (not x373)) x235))
(assert (= (x734 (x401 1989257563)) 1989257563))
(check-sat)
(exit)
