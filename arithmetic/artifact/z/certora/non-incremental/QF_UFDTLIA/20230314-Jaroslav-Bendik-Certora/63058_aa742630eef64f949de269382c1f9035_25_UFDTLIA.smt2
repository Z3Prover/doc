(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x150 0)) (((x73 (x134 Int)) (x197 (x78 x150) (x237 Int)) (x66 (x69 x150) (x6 x150) (x268 Int)))))
(declare-fun x108 () Int)
(declare-fun x181 () Int)
(declare-fun x54 () Bool)
(declare-fun x152 () Int)
(declare-fun x67 () Bool)
(declare-fun x110 () Int)
(declare-fun x180 () Int)
(declare-fun x36 () Int)
(declare-fun x18 () Bool)
(declare-fun x15 () Bool)
(declare-fun x321 () Int)
(declare-fun x255 () Int)
(declare-fun x127 () Bool)
(declare-fun x1 () Bool)
(declare-fun x87 (Int Int) Int)
(declare-fun x318 () Bool)
(declare-fun x298 () Bool)
(declare-fun x62 () Bool)
(declare-fun x107 () Int)
(declare-fun x232 () Int)
(declare-fun x196 () Int)
(declare-fun x8 () Bool)
(declare-fun x194 () Bool)
(declare-fun x106 () Int)
(declare-fun x105 () Int)
(declare-fun x131 () Int)
(declare-fun x11 () Bool)
(declare-fun x37 () Bool)
(declare-fun x135 () Bool)
(declare-fun x140 () Int)
(declare-fun x251 () Bool)
(declare-fun x55 () Int)
(declare-fun x317 () x150)
(declare-fun x68 () Bool)
(declare-fun x118 (Int) Int)
(declare-fun x33 () Int)
(declare-fun x182 () Int)
(declare-fun x43 () Int)
(declare-fun x269 () Int)
(declare-fun x279 () Int)
(declare-fun x304 () Int)
(declare-fun x299 () Int)
(declare-fun x267 (x150) Int)
(declare-fun x161 () Int)
(declare-fun x139 () Bool)
(declare-fun x221 () Int)
(declare-fun x81 () x150)
(declare-fun x114 () Int)
(declare-fun x102 () Int)
(declare-fun x275 () Bool)
(declare-fun x60 () Int)
(declare-fun x74 () Int)
(declare-fun x14 () Int)
(declare-fun x341 () Int)
(declare-fun x254 () Int)
(declare-fun x177 () Int)
(declare-fun x94 (Int) Int)
(declare-fun x156 () Bool)
(declare-fun x329 () Int)
(declare-fun x125 () Bool)
(declare-fun x202 () Int)
(declare-fun x327 () Bool)
(declare-fun x35 () Int)
(declare-fun x21 () Int)
(declare-fun x190 () Bool)
(declare-fun x184 () Int)
(declare-fun x288 () Bool)
(declare-fun x56 () Int)
(declare-fun x146 () Bool)
(declare-fun x223 () Int)
(declare-fun x336 () Int)
(declare-fun x206 () Int)
(declare-fun x244 () Int)
(declare-fun x160 () Int)
(declare-fun x259 () Int)
(declare-fun x227 () Int)
(declare-fun x80 () Bool)
(declare-fun x3 () Bool)
(declare-fun x287 () Int)
(declare-fun x23 () Int)
(declare-fun x24 () Int)
(declare-fun x165 () Int)
(declare-fun x286 () Int)
(declare-fun x46 () Bool)
(declare-fun x85 () Bool)
(declare-fun x195 () x150)
(declare-fun x332 () Int)
(declare-fun x4 () Int)
(declare-fun x302 () Bool)
(declare-fun x166 () Int)
(declare-fun x280 () Int)
(declare-fun x95 () Int)
(declare-fun x356 () Int)
(declare-fun x84 () Int)
(declare-fun x100 () Int)
(declare-fun x330 () Int)
(declare-fun x193 () Int)
(declare-fun x271 () Bool)
(declare-fun x173 () Bool)
(declare-fun x41 () Bool)
(declare-fun x205 () Int)
(declare-fun x75 () Int)
(declare-fun x153 () Bool)
(declare-fun x353 () Bool)
(declare-fun x189 () Int)
(declare-fun x129 () Int)
(declare-fun x167 () Int)
(declare-fun x228 () Int)
(declare-fun x363 () Int)
(declare-fun x101 () Bool)
(declare-fun x168 () Int)
(declare-fun x124 () Int)
(declare-fun x335 () Int)
(declare-fun x307 (x150) Int)
(declare-fun x44 () Bool)
(declare-fun x345 () x150)
(declare-fun x192 () Int)
(declare-fun x315 () Int)
(declare-fun x200 () Bool)
(declare-fun x10 () Int)
(declare-fun x145 () Bool)
(declare-fun x170 () Int)
(declare-fun x219 () Int)
(declare-fun x364 () Int)
(declare-fun x231 () Int)
(declare-fun x155 () Bool)
(declare-fun x71 () Int)
(declare-fun x242 () Int)
(declare-fun x226 (x150) Int)
(declare-fun x252 () Int)
(declare-fun x204 () Int)
(declare-fun x331 () Int)
(declare-fun x263 () Int)
(declare-fun x257 () Int)
(declare-fun x303 () Bool)
(declare-fun x144 () Int)
(declare-fun x334 () Int)
(declare-fun x277 () Int)
(declare-fun x185 () Int)
(declare-fun x117 () Bool)
(declare-fun x316 () Int)
(declare-fun x301 (x150) Int)
(declare-fun x22 () x150)
(declare-fun x51 () Int)
(declare-fun x128 () Int)
(declare-fun x157 () Bool)
(declare-fun x365 () Bool)
(declare-fun x308 () Int)
(declare-fun x320 () Bool)
(declare-fun x17 () Int)
(declare-fun x216 () Int)
(declare-fun x91 () Int)
(declare-fun x120 () Int)
(declare-fun x248 () Int)
(declare-fun x72 () Int)
(declare-fun x49 (x150) Int)
(declare-fun x238 () Int)
(declare-fun x20 () Int)
(declare-fun x119 () Int)
(declare-fun x281 (x150) Int)
(declare-fun x188 () Int)
(declare-fun x297 () Int)
(declare-fun x343 () Bool)
(declare-fun x162 () Bool)
(declare-fun x213 () Int)
(declare-fun x366 () Bool)
(declare-fun x305 () Int)
(declare-fun x361 () Int)
(declare-fun x163 () Int)
(declare-fun x324 () Bool)
(declare-fun x211 () Int)
(declare-fun x243 () Bool)
(declare-fun x346 () Bool)
(declare-fun x98 () Int)
(declare-fun x347 () Bool)
(declare-fun x311 () Int)
(declare-fun x325 () Int)
(declare-fun x19 () Int)
(declare-fun x247 () Int)
(declare-fun x198 () Int)
(declare-fun x203 (Int Int) Int)
(declare-fun x220 () Int)
(declare-fun x52 () Int)
(declare-fun x30 (Int Int) Int)
(declare-fun x201 (Int) Int)
(declare-fun x312 () Int)
(declare-fun x171 () Bool)
(declare-fun x367 () Int)
(declare-fun x351 () Int)
(declare-fun x348 () Int)
(declare-fun x179 () Int)
(declare-fun x32 (Int Int) Int)
(declare-fun x159 () Int)
(declare-fun x59 () Int)
(declare-fun x294 () Bool)
(declare-fun x169 () Bool)
(declare-fun x174 () Int)
(declare-fun x266 () Bool)
(declare-fun x40 () x150)
(declare-fun x323 () Bool)
(declare-fun x123 () Int)
(declare-fun x149 () Int)
(declare-fun x314 () Int)
(declare-fun x236 () Int)
(declare-fun x158 () Int)
(declare-fun x183 () Int)
(declare-fun x57 () Int)
(declare-fun x208 () Int)
(declare-fun x276 () Int)
(declare-fun x76 () Bool)
(declare-fun x358 () Int)
(declare-fun x282 (x150) Int)
(declare-fun x344 () Int)
(declare-fun x229 () Int)
(declare-fun x104 () Int)
(declare-fun x83 () Bool)
(declare-fun x31 () Bool)
(declare-fun x82 () Bool)
(declare-fun x34 () Int)
(declare-fun x142 () Int)
(declare-fun x218 () Int)
(declare-fun x92 () Int)
(declare-fun x322 () Int)
(declare-fun x295 () Int)
(declare-fun x58 () Int)
(declare-fun x93 () Int)
(declare-fun x290 () Int)
(declare-fun x64 () Int)
(declare-fun x352 () Int)
(declare-fun x63 () Int)
(declare-fun x256 () Int)
(declare-fun x274 () Bool)
(declare-fun x207 () Int)
(declare-fun x147 () Int)
(declare-fun x283 () Bool)
(declare-fun x246 () Int)
(declare-fun x333 () Int)
(declare-fun x338 () Bool)
(declare-fun x245 () Int)
(declare-fun x148 () Int)
(declare-fun x151 () Int)
(declare-fun x97 () Bool)
(declare-fun x310 () Int)
(declare-fun x241 () Int)
(declare-fun x154 () Int)
(declare-fun x212 () Int)
(declare-fun x284 () Int)
(declare-fun x65 () Int)
(declare-fun x214 () Int)
(declare-fun x141 () Int)
(declare-fun x9 () Bool)
(declare-fun x253 () x150)
(declare-fun x109 () Int)
(declare-fun x48 () Int)
(declare-fun x342 () Bool)
(declare-fun x209 () Int)
(declare-fun x239 () Int)
(declare-fun x5 () Int)
(declare-fun x113 (Int Int) Int)
(declare-fun x306 () Int)
(declare-fun x250 () Bool)
(declare-fun x240 () Int)
(declare-fun x319 () Bool)
(declare-fun x215 () Int)
(declare-fun x115 () Int)
(declare-fun x111 () Int)
(declare-fun x291 () Bool)
(declare-fun x27 () Int)
(declare-fun x258 () Bool)
(declare-fun x260 () Int)
(declare-fun x309 () Bool)
(declare-fun x126 () Int)
(declare-fun x273 () Int)
(declare-fun x29 () Int)
(declare-fun x270 (Int) x150)
(declare-fun x326 () Bool)
(define-fun x313 ((x150 x150) (x339 Int)) x150 (ite ((_ is x197) x150) (x197 (x78 x150) (+ (x237 x150) x339)) (ite ((_ is x66) x150) (x66 (x69 x150) (x6 x150) (+ (x268 x150) x339)) (x73 (+ (x134 x150) x339)))))
(define-fun x16 ((x89 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x89) (<= 0 x89)) x89 (- x89 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x278 ((x89 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x89) (> 0 x89)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x89) x89))
(define-fun x210 ((x89 Int)) Int (ite (and (< x89 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x89 0)) x89 (ite (and (< x89 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x89 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x89 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x89) (< x89 0)) (+ x89 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x89 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x61 ((x138 Int)) Bool (and (< x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x138)))
(define-fun x176 ((x138 Int)) Bool (and (= x138 (x87 x138 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x138 (x87 115792089237316195423570985008687907853269984665640564039457584007913129639935 x138))))
(define-fun x261 ((x138 Int)) Bool (and (= 0 (x87 x138 0)) (= (x87 0 x138) 0)))
(define-fun x136 ((x138 Int)) Bool (= x138 (x87 x138 x138)))
(define-fun x132 ((x138 Int)) Bool (and (x261 x138) (x176 x138) (x136 x138)))
(define-fun x130 ((x138 Int) (x292 Int)) Bool (= (x87 x138 x292) (x87 x292 x138)))
(define-fun x13 ((x138 Int) (x292 Int)) Bool (and (=> (<= 0 x292) (<= (x87 x138 x292) x292)) (>= (x87 x138 x292) 0) (=> (<= 0 x138) (>= x138 (x87 x138 x292)))))
(define-fun x53 ((x138 Int) (x292 Int)) Bool (and (x130 x138 x292) (x13 x138 x292)))
(define-fun x293 ((x138 Int)) Bool (= (x203 x138 1461501637330902918203684832716283019655932542976) (x87 x138 1461501637330902918203684832716283019655932542975)))
(define-fun x289 ((x138 Int)) Bool (and (x53 x138 1461501637330902918203684832716283019655932542975) (x293 x138)))
(define-fun x39 ((x138 Int) (x292 Int)) Bool (and (<= 0 (x203 x138 x292)) (< (x203 x138 x292) x292)))
(define-fun x296 ((x138 Int) (x292 Int)) Bool (=> (and (< 0 x292) (>= x138 0)) (= (= (x203 x138 x292) x138) (< x138 x292))))
(define-fun x25 ((x138 Int) (x292 Int)) Bool (=> (and (< 0 x292) (and (< x138 (+ x292 x292)) (<= x292 x138))) (= (x203 x138 x292) (- x138 x292))))
(define-fun x354 ((x138 Int)) Bool (= 0 (x203 0 x138)))
(define-fun x285 ((x138 Int)) Bool (= (x203 x138 1) 0))
(define-fun x186 ((x138 Int)) Bool (= 0 (x203 x138 x138)))
(define-fun x70 ((x138 Int)) Bool (and (x285 x138) (x354 x138) (x186 x138)))
(define-fun x340 ((x138 Int) (x292 Int)) Bool (=> (and (< 0 x292) (> x138 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x30 x138 x292)) (= x292 (x32 (x210 (x30 x138 x292)) x138)))))
(define-fun x112 ((x138 Int) (x292 Int)) Bool (=> (and (not (= 0 x292)) (not (= x138 0))) (and (= (x32 (x30 x138 x292) x292) x138) (= x292 (x32 (x30 x138 x292) x138)))))
(define-fun x235 ((x138 Int) (x292 Int)) Bool (=> (and (> x292 0) (> x138 0)) (= (> x292 (x32 115792089237316195423570985008687907853269984665640564039457584007913129639935 x138)) (> (x30 x138 x292) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x77 ((x138 Int) (x292 Int)) Bool (and (= (x210 (x30 x138 x292)) (x210 (x30 (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) x292))) (= (x210 (x30 x138 x292)) (x210 (x30 x138 (- x292 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x210 (x30 x138 x292)) (x210 (x30 (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x292 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x86 ((x138 Int) (x292 Int)) Bool (and (=> (and (and (<= x138 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x138 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x292 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x292 0))) (= (>= (x32 57896044618658097711785492504343953926634992332820282019728792003956564819968 x292) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x138)) (>= (x30 (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) x292) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x138) (> x138 0)) (and (> x292 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292))) (= (>= (x32 57896044618658097711785492504343953926634992332820282019728792003956564819968 x138) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x292)) (>= (x30 x138 (- x292 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (<= x138 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x138 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x292) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x138) (x32 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x292))) (<= (x30 (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x292 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 0 x292) (<= x292 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x138 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x138))) (= (>= (x32 57896044618658097711785492504343953926634992332820282019728792003956564819967 x292) x138) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x30 x138 x292))))))
(define-fun x90 ((x138 Int)) Bool (and (= 0 (x30 0 x138)) (= (x30 x138 0) 0)))
(define-fun x103 ((x138 Int)) Bool (and (= x138 (x30 x138 1)) (= (x30 1 x138) x138)))
(define-fun x337 ((x138 Int)) Bool (and (x90 x138) (x103 x138)))
(define-fun x116 ((x138 Int) (x292 Int)) Bool (=> (and (< 0 x138) (< 0 x292)) (and (<= 0 (x32 x138 x292)) (<= (x32 x138 x292) x138))))
(define-fun x357 ((x138 Int) (x292 Int)) Bool (=> (and (and (>= x292 1) (< x292 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (>= x138 0) (< x138 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (<= 0 (x32 x138 x292)) (< (x32 x138 x292) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x264 ((x138 Int) (x292 Int)) Bool (=> (and (> x292 1) (> x138 x292)) (< (x32 x138 x292) x138)))
(define-fun x234 ((x138 Int) (x292 Int)) Bool (=> (and (> x138 0) (< 0 x292)) (= (< x138 x292) (= (x32 x138 x292) 0))))
(define-fun x12 ((x138 Int) (x292 Int)) Bool (=> (and (> x138 0) (> x292 0)) (and (>= x138 (x30 (x32 x138 x292) x292)) (< (- x138 x292) (x30 (x32 x138 x292) x292)))))
(define-fun x28 ((x138 Int) (x292 Int)) Bool (and (x234 x138 x292) (x12 x138 x292) (x264 x138 x292) (x116 x138 x292) (x357 x138 x292)))
(define-fun x143 ((x138 Int)) Bool (= 0 (x32 0 x138)))
(define-fun x233 ((x138 Int)) Bool (= (x32 x138 1) x138))
(define-fun x249 ((x138 Int)) Bool (=> (not (= 0 x138)) (= (x32 x138 x138) 1)))
(define-fun x99 ((x138 Int)) Bool (and (x233 x138) (x249 x138) (x143 x138)))
(define-fun x328 ((x138 Int) (x292 Int)) Bool (= (x30 x138 x292) (x30 x292 x138)))
(define-fun x79 ((x138 Int) (x292 Int)) Bool (and (=> (and (> 0 x138) (< x292 0)) (> (x30 x138 x292) 0)) (=> (and (> x292 0) (< x138 0)) (< (x30 x138 x292) 0)) (=> (and (< x292 0) (> x138 0)) (> 0 (x30 x138 x292))) (=> (and (< 0 x292) (> x138 0)) (> (x30 x138 x292) 0))))
(define-fun x230 ((x138 Int) (x292 Int)) Bool (and (x235 x138 x292) (x340 x138 x292) (x112 x138 x292) (x77 x138 x292) (x328 x138 x292) (x86 x138 x292) (x79 x138 x292)))
(define-fun x96 ((x138 Int)) Bool (= (x203 x138 1099511627776) (x87 x138 1099511627775)))
(define-fun x38 ((x138 Int)) Bool (and (x96 x138) (x53 x138 1099511627775)))
(define-fun x7 ((x359 Int)) Int (ite (= x359 384) x147 (x201 x359)))
(define-fun x217 ((x359 Int)) Int (ite x309 (x201 x359) (x7 x359)))
(define-fun x265 ((x359 Int)) Int (ite (= 384 x359) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x217 x359)))
(define-fun x199 ((x359 Int)) Int (ite (= x359 388) x20 (x265 x359)))
(define-fun x122 ((x359 Int)) Int (ite (= x359 420) x273 (x199 x359)))
(define-fun x50 ((x359 Int)) Int (ite (= x359 452) x231 (x122 x359)))
(define-fun x225 ((x359 Int)) Int (ite (and (<= 384 x359) (< x359 (+ 0 384))) (x94 (+ 0 (- x359 384))) (x50 x359)))
(define-fun x362 ((x359 Int)) Int (ite x171 (x217 x359) (ite x155 (x225 x359) (x50 x359))))
(define-fun x222 ((x359 Int)) Int (ite (= 384 x359) x180 (x362 x359)))
(define-fun x133 ((x359 Int)) Int (ite (= 384 x359) x180 (x222 x359)))
(define-fun x42 ((x359 Int)) Int (ite (= x359 416) x329 (x133 x359)))
(define-fun x360 ((x359 Int)) Int (ite (= x359 448) x218 (x42 x359)))
(define-fun x187 ((x359 Int)) Int (ite (= 480 x359) x144 (x360 x359)))
(define-fun x175 ((x359 Int)) Int (ite (= 512 x359) x308 (x187 x359)))
(define-fun x26 ((x359 Int)) Int (ite (= x359 544) x367 (x175 x359)))
(define-fun x349 ((x359 Int)) Int (ite (= x359 384) (ite x15 1 0) (x26 x359)))
(define-fun x88 ((x359 Int)) Int (ite (= 416 x359) x367 (x349 x359)))
(define-fun x137 ((x359 Int)) Int (ite (= 448 x359) x308 (x88 x359)))
(define-fun x262 ((x138 Int) (x292 Int) (x47 Int) (x224 Int)) Bool (=> (and (<= x292 x224) (>= x138 0) (<= 0 x292) (<= x138 x47)) (>= (x30 x47 x224) (x30 x138 x292))))
(define-fun x355 ((x138 Int) (x292 Int) (x47 Int) (x224 Int)) Bool (=> (= x47 x138) (= (x30 x138 (- x292 x224)) (- (x30 x138 x292) (x30 x47 x224)))))
(define-fun x172 ((x138 Int)) Bool (=> (and (not (= 1865579259 x138)) (not (= x138 404098525)) (not (= x138 189977944)) (not (= 2976520670 x138)) (not (= 599290589 x138)) (not (= 3018967357 x138)) (not (= x138 340282366920938463463374607431768211456)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x138)) (not (= 2432105714 x138)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x138)) (not (= x138 1809280292)) (not (= x138 1461501637330902918203684832716283019655932542976)) (not (= 1976722451 x138)) (not (= 3226110480 x138)) (not (= x138 500000000000000000000000000)) (not (= x138 1000000000000000000000000000)) (not (= 1000000000 x138)) (< 10000 x138) (not (= x138 2646777772)) (not (= 1099511627775 x138)) (not (= 157198259 x138)) (not (= x138 340282366920938463463374607431768211455)) (not (= 1889567281 x138)) (not (= 1461501637330902918203684832716283019655932542975 x138)) (not (= 1966461510 x138)) (not (= 2835717307 x138)) (not (= x138 22402283082756182618670880521465619040657731284550890770856599233457073160192)) (not (= 117300739 x138)) (not (= 4294967296 x138))) (not ((_ is x73) (x270 x138)))))
(assert (=> (>= 10000 x198) (= (x270 x198) (x73 x198))))
(assert (x61 x286))
(assert (= (x226 (x73 1966461510)) 1966461510))
(assert (x61 x247))
(assert (x61 x140))
(assert (x337 x219))
(assert (x61 x188))
(assert (x61 x331))
(assert (x61 x216))
(assert (x132 x348))
(assert (x61 x36))
(assert (= (x270 404098525) (x73 404098525)))
(assert (x61 x280))
(assert (x132 x163))
(assert (x61 x356))
(assert (x337 x336))
(assert (x61 x142))
(assert (x61 x168))
(assert (x61 x335))
(assert (x61 x115))
(assert (x61 x198))
(assert (x70 x221))
(assert (x61 x223))
(assert (= x258 (or x80 (and (not x275) x303))))
(assert (x61 x315))
(assert (x172 x244))
(assert (= true x8))
(assert (x61 x241))
(assert (x61 x208))
(assert (x61 x24))
(assert (x289 x356))
(assert (x61 x151))
(assert (x61 x114))
(assert (x61 x71))
(assert (x61 x166))
(assert (x70 x92))
(assert (x99 x48))
(assert (x61 x131))
(assert (= (x270 3226110480) (x73 3226110480)))
(assert (x337 x115))
(assert (x172 x36))
(assert (x337 x367))
(assert (x61 x367))
(assert (= (x73 1000000000) (x270 1000000000)))
(assert (x61 x332))
(assert (= (x270 1099511627775) (x73 1099511627775)))
(assert (x61 x180))
(assert (x70 x348))
(assert (x61 x184))
(assert (=> (>= 10000 x27) (= (x270 x27) (x73 x27))))
(assert (x61 x108))
(assert (x61 x84))
(assert (x61 x209))
(assert (x61 x14))
(assert (x61 x109))
(assert (x38 x221))
(assert (x172 x332))
(assert (x61 x104))
(assert (x61 x93))
(assert (x61 x213))
(assert (x61 x310))
(assert (x61 x163))
(assert (= (x226 (x73 599290589)) 599290589))
(assert (= 1976722451 (x226 (x73 1976722451))))
(assert (= x302 (and x338 (not x101))))
(assert (x61 x4))
(assert (=> (>= 10000 x244) (= (x73 x244) (x270 x244))))
(assert (x61 x100))
(assert (x61 x167))
(assert (x61 x119))
(assert (x230 x219 x321))
(assert (= 500000000000000000000000000 (x226 (x73 500000000000000000000000000))))
(assert (x99 1000000000000000000000000000))
(assert (x99 x115))
(assert (x61 x95))
(assert (= (x226 (x73 3018967357)) 3018967357))
(assert (x61 x56))
(assert (and (x234 x74 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x74)) (and (< (- x74 1000000000000000000000000000) (* (x32 x74 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* 1000000000000000000000000000 (x32 x74 1000000000000000000000000000)) x74))) (x116 x74 1000000000000000000000000000) (x357 x74 1000000000000000000000000000) (x264 x74 1000000000000000000000000000)))
(assert (x337 x213))
(assert (x61 x185))
(assert (x61 x206))
(assert (x28 x48 x34))
(assert (= x338 (or x309 x76)))
(assert (= (x270 2976520670) (x73 2976520670)))
(assert (x132 1461501637330902918203684832716283019655932542975))
(assert (x61 x23))
(assert (= (=> (and (= (x16 (+ x184 x214)) x48) (= x188 (x16 (+ x364 500000000000000000000000000))) (= (= 0 x34) x347) (= (x32 115792089237316195423570985008687907853269984665640064039457584007913129639935 x152) x299) (= (ite x68 1 0) x241) (= (x49 x195) x290) (= x193 (x87 1461501637330902918203684832716283019655932542975 x92)) (= x306 (x16 (+ x248 500000000000000000000000000))) (= x170 x367) (>= 340282366920938463463374607431768211455 x330) (< (* x273 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x333 (x32 x123 1000000000000000000000000000)) (= x144 (x32 x48 x34)) (= 0 x245) (= x68 (or x135 x274)) (< (+ x128 x240) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x366 (not x342)) (= x59 (x32 x312 2)) (= x287 (x210 (x30 x321 x219))) (>= x290 0) (= x165 x180) (= x180 (+ x255 x351)) (not (> x308 340282366920938463463374607431768211455)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x259 x273)) (= (= x140 0) x156) (< x231 340282366920938463463374607431768211456) (= x308 (x32 x263 x312)) (>= x330 0) (= (x87 1099511627775 x221) x209) (= (= x115 0) x145) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x259 x329)) (= x363 (x87 1099511627775 x221)) (>= x330 0) (= (< x277 x336) x342) (= (+ x98 x165) x63) (= x238 (x87 1461501637330902918203684832716283019655932542975 x92)) (= x248 (x210 (x30 x219 x321))) (= (+ x256 x215) x64) (= (x210 (* 1000000000 x213)) x34) (>= 340282366920938463463374607431768211455 x290) (= x314 (+ x4 x21)) (= (= x219 0) x135) (= (not x117) x146) (= (= x27 0) x291) (= (x278 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x252)) x123) (= x115 (x210 (* 1000000000 x329))) (= x170 x160) (= x24 x290) (= (not x190) x323) (= x274 (not x283)) (= x364 (x210 (x30 x330 x152))) (= (x66 (x270 x198) (x73 56) 0) x253) (= (= x185 x159) x326) (= x316 (x32 x106 1000000000000000000000000000)) (<= 0 x231) (= (not x41) x1) (= (x32 x34 2) x214) (> 340282366920938463463374607431768211456 x330) (= x57 x4) (>= x27 0) (= (> x330 x299) x83) (= (ite x31 1 0) x245) (= x266 (< x316 x220)) (= x117 (< x333 x64)) (= x352 (x32 x34 2)) (= (ite x37 1 0) x206) (= x211 x240) (= x255 x259) (= x159 (- x314 x24)) (= (<= x231 x57) x44) (= (= 0 x312) x162) (= x280 x215) (= x218 x351) (= (x32 115792089237316195423570985008687907853269984665640064039457584007913129639935 x115) x277) (= x229 (x210 (* 1000000000000000000000000000 x64))) (= (x32 x263 x312) x242) (= (x66 (x270 x254) (x73 56) 0) x81) (= 0 x279) (= (> x219 x10) x190) (= x106 (x278 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352))) (<= x330 340282366920938463463374607431768211455) (= x168 (x87 1461501637330902918203684832716283019655932542975 x92)) (= x240 (x32 x74 1000000000000000000000000000)) (< x336 340282366920938463463374607431768211456) (>= 340282366920938463463374607431768211455 x63) (= x37 (or x156 x323)) x44 (= x231 x98) (= x335 (ite x251 1 0)) (>= 340282366920938463463374607431768211455 x336) (= x41 (not x266)) (= (x32 x306 1000000000000000000000000000) x128) (= x202 (ite x9 1 0)) (< (* x259 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 340282366920938463463374607431768211455 x231) (= (+ x110 x260) x213) (= (+ x211 x239) x220) (< x330 340282366920938463463374607431768211456) (= (x210 (x30 x336 x115)) x207) (= x312 (x210 (* x367 1000000000))) (= (x210 (* 1000000000000000000000000000 x220)) x184) (= x151 (x16 (+ x287 500000000000000000000000000))) (= x198 (x87 1461501637330902918203684832716283019655932542975 x92)) (> x202 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x280 x232)) (= x336 (x267 x81)) (= x239 x128) (< (+ x259 x218) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (< 340282366920938463463374607431768211455 x180)) (= x74 (x16 (+ x207 500000000000000000000000000))) (> x241 0) (>= x273 0) (>= x336 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x367 1000000000)) (= x329 x260) (<= x27 1461501637330902918203684832716283019655932542975) (= (x210 (* x129 1000000000)) x219) (= (x32 x312 2) x252) (> 1461501637330902918203684832716283019655932542976 x27) (= x3 (not x83)) (< (* x213 1000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (or x162 x318) x31) (= (or x3 x200) x251) (= x200 (= x152 0)) (= x259 x110) (= (x16 (+ x229 x59)) x263) (= (> x140 x341) x283) (= x231 (x49 x253)) (= x170 (+ x259 x273)) (= x279 (ite x319 1 0)) (< (+ x180 x231) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x232 (x32 x151 1000000000000000000000000000)) (= (or x145 x366) x9) (> x335 0) (= x280 (x32 x188 1000000000000000000000000000)) (= x318 (not x146)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000 x329)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x273) (not (< 340282366920938463463374607431768211455 x144)) (= x63 x21) (= x341 (x32 115792089237316195423570985008687907853269984665640064039457584007913129639935 x219)) (= x10 (x32 115792089237316195423570985008687907853269984665640064039457584007913129639935 x321)) (< 0 x206) (= x232 x256) (= x195 (x66 (x270 x238) (x73 56) 0)) (= x254 (x87 1461501637330902918203684832716283019655932542975 x92)) (= (x210 (* x273 1000000000)) x152) (= x319 (or x347 x1)) (= x257 x185) x326) (and (=> (and (not x291) (and (or (not x11) (and (and (> 4294967296 x174) (= x82 (= (x307 (x270 x27)) x361)) (= (>= (x307 (x270 x322)) x216) x67) (= x216 (x282 (x270 x322))) (= (x282 (x270 x27)) x361) x67 x82) x11)) (and (<= 0 x27) (= (x301 (x270 x27)) x311) (>= 1461501637330902918203684832716283019655932542975 x27) (= x20 (x87 1461501637330902918203684832716283019655932542975 x92)) (> 1461501637330902918203684832716283019655932542976 x27) (= (> x189 0) x11) (not (= x311 0))))) x157) (=> x291 x298))) x97))
(assert (= (x73 1461501637330902918203684832716283019655932542976) (x270 1461501637330902918203684832716283019655932542976)))
(assert (= x332 (x226 (x270 x332))))
(assert (=> (<= x332 10000) (= (x270 x332) (x73 x332))))
(assert (x61 x295))
(assert (x61 x52))
(assert (= (x226 (x270 x198)) x198))
(assert (and (x39 x356 1461501637330902918203684832716283019655932542976) (x296 x356 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x356 (+ (x203 x356 1461501637330902918203684832716283019655932542976) (* (x32 x356 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x25 x356 1461501637330902918203684832716283019655932542976)))
(assert (= x58 (x226 (x270 x58))))
(assert (= (x73 189977944) (x270 189977944)))
(assert (x61 x92))
(assert (x61 x148))
(assert (= (x226 (x73 2835717307)) 2835717307))
(assert (x61 x154))
(assert (x61 x120))
(assert (x61 x306))
(assert (= (x73 2432105714) (x270 2432105714)))
(assert (x61 x144))
(assert (= (x226 (x73 1099511627775)) 1099511627775))
(assert (x61 x149))
(assert (= (=> (and (and (and (= x72 x142) (= x365 (= x92 x348)) (<= x92 1461501637330902918203684832716283019655932542975) (> x286 0) (>= 1461501637330902918203684832716283019655932542975 x35) (= x321 x140) (= x297 x95) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269)) (> 128 x269)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269))) (= 3018967357 x29) (= x179 x131) (not (< x29 2835717307)) (= x166 x348) (>= 1461501637330902918203684832716283019655932542975 x177) (>= 1461501637330902918203684832716283019655932542975 x348) (= x124 x247) (= x95 x35) (= x129 x120) (= (x87 1461501637330902918203684832716283019655932542975 x356) x179) (>= 1461501637330902918203684832716283019655932542975 x14) (not (< x84 4)) (= x269 (x278 (- x84 4))) (= x348 x75) (= x129 x259) (= x33 x92) (= x72 0) (>= x35 0) (= x131 (x87 1461501637330902918203684832716283019655932542975 x163)) (and (= true (<= x84 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x84 131)) (not (= x29 2976520670)) (>= x177 0) (= (x301 (x270 x322)) x286) (= x14 x356) (= x321 x51) (not (= x29 2835717307)) (>= x14 0) (< x29 3226110480) (not (< x29 2432105714)) (= x92 x182)) (or x365 (and (and (= x317 (x66 (x270 x58) x22 0)) (= x102 (x87 1461501637330902918203684832716283019655932542975 x92)) (<= 0 x310) (= (x87 1461501637330902918203684832716283019655932542975 x348) x114) (>= 1461501637330902918203684832716283019655932542975 x310) (<= x141 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x147 (x278 (- x141 x129))) (not (> x259 x141)) (= x141 (x281 x317)) (= (x87 1461501637330902918203684832716283019655932542975 x92) x36) (= x58 (x87 1461501637330902918203684832716283019655932542975 x348)) (= (x66 (x270 x36) (x73 54) 0) x22) (>= x141 0) (< x310 1461501637330902918203684832716283019655932542976)) (not x365)))) (and (>= x161 0) (>= x167 0) (= (x301 (x270 x322)) x331) (>= 255 x161) (= x320 false) (not (= x60 117300739)) (>= 340282366920938463463374607431768211455 x330) (<= 0 x227) (= x276 4) (>= x5 0) (= 404098525 x60) (= (> (x301 (x270 x322)) 0) x288) (>= 340282366920938463463374607431768211455 x330) (= x119 x142) (>= 1461501637330902918203684832716283019655932542975 x167) (< x60 599290589) (= x247 x273) (<= x322 1461501637330902918203684832716283019655932542975) (>= x310 0) (<= 0 x55) (> x322 0) (= x294 false) (<= 0 x56) (>= x334 0) (<= x334 1461501637330902918203684832716283019655932542975) (<= x19 1099511627775) (>= 255 x192) (= x55 (x282 (x270 x322))) (>= x19 0) (>= 1461501637330902918203684832716283019655932542975 x227) (= 0 x119) (not (= 189977944 x60)) (= x167 x356) x288 (>= 1461501637330902918203684832716283019655932542975 x310) (<= x56 1461501637330902918203684832716283019655932542975) (= x228 3018967357) (>= x27 0) (= x358 x297) (= false x169) (>= x273 0) (not (= 157198259 x60)) (< x60 2432105714) (< x60 1809280292) (= x271 false) (>= x330 0) (> 340282366920938463463374607431768211456 x330) (= x109 x227) (= x356 x56) (= x5 x358) (<= 0 x192) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x273) (>= x330 0) (>= 1461501637330902918203684832716283019655932542975 x27) (<= x5 1461501637330902918203684832716283019655932542975) (> x331 0))) x324) x173))
(assert (x61 x277))
(assert (x61 x57))
(assert (x61 x51))
(assert (x61 x160))
(assert (x61 x299))
(assert (x132 1099511627775))
(assert (x61 x193))
(assert (x61 x305))
(assert (= (x270 3018967357) (x73 3018967357)))
(assert (and (and (= (* 1000000000000000000000000000 (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000000000000000000000 (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000) (* (- x220 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x220 1000000000000000000000000000) (* x220 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x220))) (x235 1000000000000000000000000000 x220) (= (* 1000000000000000000000000000 x220) (x30 1000000000000000000000000000 x220)) (x112 1000000000000000000000000000 x220) (x86 1000000000000000000000000000 x220) (x77 1000000000000000000000000000 x220) (x340 1000000000000000000000000000 x220)))
(assert (x61 x248))
(assert (x61 x312))
(assert (x61 x245))
(assert (x61 x242))
(assert (= x238 (x226 (x270 x238))))
(assert (x61 x10))
(assert (x99 x312))
(assert (x61 x220))
(assert (= (x226 (x270 x244)) x244))
(assert (x61 x311))
(assert (x61 x128))
(assert (x337 x321))
(assert (x70 1461501637330902918203684832716283019655932542976))
(assert (x99 x152))
(assert (and (x234 x306 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x306)) (and (< (- x306 1000000000000000000000000000) (* (x32 x306 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* 1000000000000000000000000000 (x32 x306 1000000000000000000000000000)) x306))) (x116 x306 1000000000000000000000000000) (x357 x306 1000000000000000000000000000) (x264 x306 1000000000000000000000000000)))
(assert (not x173))
(assert (x61 x106))
(assert (x99 x34))
(assert (= (x73 2646777772) (x270 2646777772)))
(assert (= (x226 (x73 2976520670)) 2976520670))
(assert (x61 x72))
(assert (x61 x252))
(assert (x61 x58))
(assert (x61 x91))
(assert (x61 x290))
(assert (= 189977944 (x226 (x73 189977944))))
(assert (x61 x336))
(assert (x61 x229))
(assert (x61 x238))
(assert (x61 x205))
(assert (x61 x244))
(assert (and (= (x30 3 3) 9) (= 81 (x30 9 9)) (= (x30 9 3) 27) (= 81 (x30 27 3))))
(assert (x61 x123))
(assert (= x343 (and x346 (not x291))))
(assert (x61 x65))
(assert (x61 x221))
(assert (= (x73 1976722451) (x270 1976722451)))
(assert (x61 x34))
(assert (x61 x64))
(assert (x230 x336 x115))
(assert (= (and x343 (not x11)) x125))
(assert (x61 x74))
(assert (x61 x124))
(assert (x61 x341))
(assert (x337 x220))
(assert (and (and (= (* 1000000000000000000000000000 (- x64 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000000000000000000000 (- x64 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x64 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x64 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000) (* (- x64 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x64 1000000000000000000000000000) (* x64 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x64))) (x235 1000000000000000000000000000 x64) (= (* 1000000000000000000000000000 x64) (x30 1000000000000000000000000000 x64)) (x112 1000000000000000000000000000 x64) (x86 1000000000000000000000000000 x64) (x77 1000000000000000000000000000 x64) (x340 1000000000000000000000000000 x64)))
(assert (x61 x129))
(assert (x61 x102))
(assert (x61 x75))
(assert (x172 x198))
(assert (x61 x212))
(assert (x61 x60))
(assert (x61 x361))
(assert (= 157198259 (x226 (x73 157198259))))
(assert (and (x234 x188 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x188)) (and (< (- x188 1000000000000000000000000000) (* (x32 x188 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* 1000000000000000000000000000 (x32 x188 1000000000000000000000000000)) x188))) (x116 x188 1000000000000000000000000000) (x357 x188 1000000000000000000000000000) (x264 x188 1000000000000000000000000000)))
(assert (x172 x27))
(assert (x172 x254))
(assert (x99 x151))
(assert (= 117300739 (x226 (x73 117300739))))
(assert (= (x73 1809280292) (x270 1809280292)))
(assert (x99 x106))
(assert (and (x234 x106 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x106)) (and (< (- x106 1000000000000000000000000000) (* (x32 x106 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* 1000000000000000000000000000 (x32 x106 1000000000000000000000000000)) x106))) (x116 x106 1000000000000000000000000000) (x357 x106 1000000000000000000000000000) (x264 x106 1000000000000000000000000000)))
(assert (x61 x202))
(assert (= x309 (and x365 x8)))
(assert (x61 x182))
(assert (= 340282366920938463463374607431768211455 (x226 (x73 340282366920938463463374607431768211455))))
(assert (= (and x343 x11) x155))
(assert (and (x39 x163 1461501637330902918203684832716283019655932542976) (x296 x163 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x163 (+ (x203 x163 1461501637330902918203684832716283019655932542976) (* (x32 x163 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x25 x163 1461501637330902918203684832716283019655932542976)))
(assert (x61 x19))
(assert (x99 x306))
(assert (x172 x322))
(assert (= (x73 1889567281) (x270 1889567281)))
(assert (x132 x92))
(assert (x61 x55))
(assert (= x324 (=> (and (and x62 (= x40 (x66 (x270 x244) (x73 56) 0)) (= x244 (x87 1461501637330902918203684832716283019655932542975 x92)) (>= x325 0) (= x325 (x49 x40)) (= x62 (>= x57 x325)) (> 340282366920938463463374607431768211456 x325) (= x101 (= 0 x325)) (<= x325 340282366920938463463374607431768211455)) (or (and (and (= x329 0) (= x65 0) (= 0 x218)) x101) (and (not x101) (and (= x332 (x87 1461501637330902918203684832716283019655932542975 x92)) (= (x278 (- x236 x325)) x108) x54 (>= x236 0) (not (> x325 x236)) (= (x49 x345) x236) (= x218 x108) (= x236 x329) (< x236 340282366920938463463374607431768211456) (= x54 (>= x57 x236)) (= x65 x325) (<= x236 340282366920938463463374607431768211455) (= x345 (x66 (x270 x332) (x73 56) 0)))))) x97)))
(assert (x99 x219))
(assert (=> (>= 10000 x58) (= (x73 x58) (x270 x58))))
(assert (x61 x263))
(assert (x99 2))
(assert (x61 x287))
(assert (x61 x334))
(assert (= (x226 (x73 1865579259)) 1865579259))
(assert (x28 115792089237316195423570985008687907853269984665640064039457584007913129639935 x219))
(assert (x61 x17))
(assert (x61 x5))
(assert (x337 x152))
(assert (x61 x352))
(assert (x61 x363))
(assert (=> (>= 10000 x238) (= (x73 x238) (x270 x238))))
(assert (x99 x123))
(assert (x289 x163))
(assert (and (x264 x34 2) (=> (and (< 0 2) (< 0 x34)) (and (< (- x34 2) (* (x32 x34 2) 2)) (<= (* 2 (x32 x34 2)) x34))) (= (* (x32 x34 2) 2) (- x34 (x87 1 x34))) (x357 x34 2) (x234 x34 2) (x116 x34 2)))
(assert (x28 115792089237316195423570985008687907853269984665640064039457584007913129639935 x321))
(assert (= 1461501637330902918203684832716283019655932542975 (x226 (x73 1461501637330902918203684832716283019655932542975))))
(assert (= (x73 4294967296) (x270 4294967296)))
(assert (x61 x204))
(assert (x61 x276))
(assert (x61 x20))
(assert (=> (>= 10000 x322) (= (x73 x322) (x270 x322))))
(assert (x230 x330 x152))
(assert (x61 x316))
(assert (x99 x263))
(assert (x61 x297))
(assert (= (x73 157198259) (x270 157198259)))
(assert (= (x270 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x73 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (and (x234 x151 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x151)) (and (< (- x151 1000000000000000000000000000) (* (x32 x151 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* 1000000000000000000000000000 (x32 x151 1000000000000000000000000000)) x151))) (x116 x151 1000000000000000000000000000) (x357 x151 1000000000000000000000000000) (x264 x151 1000000000000000000000000000)))
(assert (x61 x279))
(assert (x337 x273))
(assert (= 1809280292 (x226 (x73 1809280292))))
(assert (and (and (= (* 1000000000 (- x367 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000 (- x367 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x367 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x367 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000) (* (- x367 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x367 1000000000) (* x367 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x367))) (x235 1000000000 x367) (= (* 1000000000 x367) (x30 1000000000 x367)) (x112 1000000000 x367) (x86 1000000000 x367) (x77 1000000000 x367) (x340 1000000000 x367)))
(assert (=> (<= x254 10000) (= (x270 x254) (x73 x254))))
(assert (= (x270 117300739) (x73 117300739)))
(assert (= 1000000000000000000000000000 (x226 (x73 1000000000000000000000000000))))
(assert (x61 x179))
(assert (x289 x348))
(assert (x61 x158))
(assert (and (x39 x348 1461501637330902918203684832716283019655932542976) (x296 x348 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x348 (+ (x203 x348 1461501637330902918203684832716283019655932542976) (* (x32 x348 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x25 x348 1461501637330902918203684832716283019655932542976)))
(assert (x61 x259))
(assert (= (x73 340282366920938463463374607431768211455) (x270 340282366920938463463374607431768211455)))
(assert (x61 x344))
(assert (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x226 (x73 22402283082756182618670880521465619040657731284550890770856599233457073160192))))
(assert (x61 x126))
(assert (x61 x240))
(assert (= 1000000000 (x226 (x73 1000000000))))
(assert (and (and (= (* 1000000000 (- x213 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000 (- x213 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x213 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x213 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000) (* (- x213 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x213 1000000000) (* x213 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x213))) (x235 1000000000 x213) (= (* 1000000000 x213) (x30 1000000000 x213)) (x112 1000000000 x213) (x86 1000000000 x213) (x77 1000000000 x213) (x340 1000000000 x213)))
(assert (= 1889567281 (x226 (x73 1889567281))))
(assert (x61 x364))
(assert (x61 x183))
(assert (x61 x219))
(assert (x337 x129))
(assert (x61 x304))
(assert (= (=> (and (and (and (< x148 2432105714) (= x100 x356) (>= x308 0) (<= 0 x160) (not (= x148 157198259)) (>= x105 0) (= x183 x297) (not (= x148 189977944)) (not (= 117300739 x148)) (<= 0 x107) (= 404098525 x148) (>= x100 0) (> 599290589 x148) (= x204 (x301 (x270 x322))) (< 0 x204) (= 0 x111) (= x107 x183) (= x160 x344) (>= 1461501637330902918203684832716283019655932542975 x105) (>= 340282366920938463463374607431768211455 x308) (> 1809280292 x148) (= x111 x142) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x160) (>= 1461501637330902918203684832716283019655932542975 x107) (< x242 340282366920938463463374607431768211456) (<= x100 1461501637330902918203684832716283019655932542975)) (and (and (= 3018967357 x93) (= x194 true) (= 3018967357 x223) (= true x153) (= 3018967357 x17) (= (= x304 x43) x18) (= (or (not x127) x327) x139) (= x18 x327) (= 2646777772 x104) (= x43 x284) (= false x250)) (and (not (> 1809280292 x295)) (>= x205 0) (not (= x295 1889567281)) (= x246 x205) (= x284 x149) (< x295 1976722451) (= x127 (not (= x91 x52))) (> 2432105714 x295) (= x126 (x301 (x270 x322))) (>= 1461501637330902918203684832716283019655932542975 x154) (= x149 (x87 1461501637330902918203684832716283019655932542975 x163)) (<= 0 x154) (= x315 0) (= x305 x344) (= x356 x304) (not (= x295 1809280292)) (> x126 0) (not (= 1865579259 x295)) (= x356 x154) (= x91 x124) (>= 1461501637330902918203684832716283019655932542975 x205) (= x297 x246) (>= 1461501637330902918203684832716283019655932542975 x212) (<= 0 x212) (= x305 x52) (= x295 1966461510) (= x142 x315)))) (and (= (x137 416) x208) (= (x137 384) x196) (= x46 x15) (= (x137 448) x71) (= (= x329 0) x46))) x139) x298))
(assert (x70 1099511627776))
(assert (and (x264 x312 2) (=> (and (< 0 2) (< 0 x312)) (and (< (- x312 2) (* (x32 x312 2) 2)) (<= (* 2 (x32 x312 2)) x312))) (= (* (x32 x312 2) 2) (- x312 (x87 1 x312))) (x357 x312 2) (x234 x312 2) (x116 x312 2)))
(assert (x61 x322))
(assert (and (x39 x221 1099511627776) (x296 x221 1099511627776) (=> (> 1099511627776 0) (= x221 (+ (x203 x221 1099511627776) (* (x32 x221 1099511627776) 1099511627776)))) (x25 x221 1099511627776)))
(assert (= (and x346 x291) x171))
(assert (x61 x257))
(assert (= (x270 1000000000000000000000000000) (x73 1000000000000000000000000000)))
(assert (= (x226 (x73 4294967296)) 4294967296))
(assert (x61 x147))
(assert (and (and (= (* 1000000000 (- x273 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000 (- x273 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x273 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x273 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000) (* (- x273 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x273 1000000000) (* x273 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x273))) (x235 1000000000 x273) (= (* 1000000000 x273) (x30 1000000000 x273)) (x112 1000000000 x273) (x86 1000000000 x273) (x77 1000000000 x273) (x340 1000000000 x273)))
(assert (= 2432105714 (x226 (x73 2432105714))))
(assert (= (x226 (x270 x322)) x322))
(assert (= (x226 (x73 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x61 x177))
(assert (x61 x196))
(assert (=> (<= x36 10000) (= (x73 x36) (x270 x36))))
(assert (= (x270 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x73 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x61 x348))
(assert (x337 1000000000000000000000000000))
(assert (x28 x263 x312))
(assert (= x36 (x226 (x270 x36))))
(assert (x61 x189))
(assert (x61 x269))
(assert (x61 x161))
(assert (x61 x43))
(assert (= (x226 (x270 x27)) x27))
(assert (= (=> (not (= x189 0)) x298) x243))
(assert (x132 x221))
(assert (x337 1000000000))
(assert (= 340282366920938463463374607431768211456 (x226 (x73 340282366920938463463374607431768211456))))
(assert (x61 x181))
(assert (and (and (= (* 1000000000 (- x329 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000 (- x329 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x329 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x329 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000) (* (- x329 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x329 1000000000) (* x329 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x329))) (x235 1000000000 x329) (= (* 1000000000 x329) (x30 1000000000 x329)) (x112 1000000000 x329) (x86 1000000000 x329) (x77 1000000000 x329) (x340 1000000000 x329)))
(assert (= (x73 500000000000000000000000000) (x270 500000000000000000000000000)))
(assert (x61 x141))
(assert (x61 x48))
(assert (x61 x111))
(assert (x28 115792089237316195423570985008687907853269984665640064039457584007913129639935 x115))
(assert (x61 x284))
(assert (x61 x27))
(assert (x337 x329))
(assert (x61 x227))
(assert (x61 x254))
(assert (= (x73 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x270 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x73 599290589) (x270 599290589)))
(assert (x61 x358))
(assert (= (x270 1865579259) (x73 1865579259)))
(assert (x99 x74))
(assert (x172 x58))
(assert (x61 x321))
(assert (= (x73 340282366920938463463374607431768211456) (x270 340282366920938463463374607431768211456)))
(assert (x61 x218))
(assert (x99 x188))
(assert (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x226 (x73 115792089237316195423570985008687907853269984665640064039457584007913129639935))))
(assert (x61 x214))
(assert (x289 x92))
(assert (= (or x171 x258) x353))
(assert (x28 115792089237316195423570985008687907853269984665640064039457584007913129639935 x152))
(assert (x61 x105))
(assert (x61 x236))
(assert (x61 x325))
(assert (x132 x356))
(assert (x61 x35))
(assert (x61 x29))
(assert (= (x73 1461501637330902918203684832716283019655932542975) (x270 1461501637330902918203684832716283019655932542975)))
(assert (x61 x273))
(assert (x61 x59))
(assert (and (x39 x92 1461501637330902918203684832716283019655932542976) (x296 x92 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x92 (+ (x203 x92 1461501637330902918203684832716283019655932542976) (* (x32 x92 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x25 x92 1461501637330902918203684832716283019655932542976)))
(assert (x61 x63))
(assert (= (x73 1966461510) (x270 1966461510)))
(assert (= x80 (and x275 x303)))
(assert (x61 x330))
(assert (and (x234 x123 1000000000000000000000000000) (=> (and (< 0 1000000000000000000000000000) (< 0 x123)) (and (< (- x123 1000000000000000000000000000) (* (x32 x123 1000000000000000000000000000) 1000000000000000000000000000)) (<= (* 1000000000000000000000000000 (x32 x123 1000000000000000000000000000)) x123))) (x116 x123 1000000000000000000000000000) (x357 x123 1000000000000000000000000000) (x264 x123 1000000000000000000000000000)))
(assert (x61 x152))
(assert (and (and (= (* 1000000000 (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 1000000000 (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000) (* (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x129 1000000000) (* x129 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x30 (- 115792089237316195423570985008687907853269984665640564039457584007912129639936) x129))) (x235 1000000000 x129) (= (* 1000000000 x129) (x30 1000000000 x129)) (x112 1000000000 x129) (x86 1000000000 x129) (x77 1000000000 x129) (x340 1000000000 x129)))
(assert (x61 x107))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x226 (x73 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x61 x21))
(assert (x61 x333))
(assert (x99 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x61 x207))
(assert (= x85 (and x101 x338)))
(assert (= (or x125 x155) x303))
(assert (x337 x330))
(assert (x61 x232))
(assert (x61 x228))
(assert (x172 x238))
(assert (x61 x174))
(assert (x61 x231))
(assert (x61 x246))
(assert (x337 x64))
(assert (= (and (not x365) x8) x76))
(assert (x61 x308))
(assert (x61 x329))
(assert (= (x226 (x73 3226110480)) 3226110480))
(assert (x61 x33))
(assert (= (x270 2835717307) (x73 2835717307)))
(assert (= 2646777772 (x226 (x73 2646777772))))
(assert (= (x226 (x270 x254)) x254))
(assert (= (or x302 x85) x346))
(assert (x70 x356))
(assert (x99 x321))
(assert (x61 x192))
(assert (= 404098525 (x226 (x73 404098525))))
(assert (= x157 (=> (and (or x275 (not x275)) (= x275 (= 0 x189))) x243)))
(assert (x70 x163))
(check-sat)
(exit)