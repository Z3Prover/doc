(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x42 0)) (((x214 (x246 Int)) (x77 (x90 x42) (x342 Int)) (x29 (x177 x42) (x95 x42) (x165 Int)))))
(declare-fun x290 () Int)
(declare-fun x407 () Bool)
(declare-fun x350 () Bool)
(declare-fun x403 (x42) Int)
(declare-fun x330 () Int)
(declare-fun x326 () Bool)
(declare-fun x462 () x42)
(declare-fun x87 () Bool)
(declare-fun x256 () Int)
(declare-fun x27 () Int)
(declare-fun x349 () x42)
(declare-fun x516 () x42)
(declare-fun x37 () Int)
(declare-fun x187 () x42)
(declare-fun x86 () Int)
(declare-fun x291 () Bool)
(declare-fun x360 () Int)
(declare-fun x108 () Int)
(declare-fun x317 () Int)
(declare-fun x477 () Int)
(declare-fun x162 () x42)
(declare-fun x212 () Int)
(declare-fun x144 () Int)
(declare-fun x445 () Int)
(declare-fun x137 () Int)
(declare-fun x328 () Int)
(declare-fun x279 () Int)
(declare-fun x297 () x42)
(declare-fun x19 () x42)
(declare-fun x435 () Int)
(declare-fun x153 () Int)
(declare-fun x419 () Int)
(declare-fun x145 () Int)
(declare-fun x495 () Int)
(declare-fun x81 () Int)
(declare-fun x368 () Int)
(declare-fun x121 () x42)
(declare-fun x193 (Int) Int)
(declare-fun x476 () Int)
(declare-fun x451 () Int)
(declare-fun x146 () x42)
(declare-fun x508 (x42) Int)
(declare-fun x416 () Int)
(declare-fun x30 () Int)
(declare-fun x68 () Int)
(declare-fun x452 () x42)
(declare-fun x490 () Int)
(declare-fun x227 () Int)
(declare-fun x482 () Bool)
(declare-fun x301 () Int)
(declare-fun x431 () x42)
(declare-fun x443 () Bool)
(declare-fun x73 () x42)
(declare-fun x55 () x42)
(declare-fun x124 () x42)
(declare-fun x251 () Bool)
(declare-fun x371 () Int)
(declare-fun x18 () Bool)
(declare-fun x312 () Bool)
(declare-fun x190 () Bool)
(declare-fun x468 () Int)
(declare-fun x222 () Int)
(declare-fun x46 () x42)
(declare-fun x398 () Bool)
(declare-fun x178 () Bool)
(declare-fun x514 () Int)
(declare-fun x230 (x42) Int)
(declare-fun x123 () Bool)
(declare-fun x421 () x42)
(declare-fun x232 () Bool)
(declare-fun x362 () Int)
(declare-fun x20 () Bool)
(declare-fun x436 () Int)
(declare-fun x449 () x42)
(declare-fun x331 () Int)
(declare-fun x103 () Bool)
(declare-fun x65 () x42)
(declare-fun x473 () Int)
(declare-fun x464 () Bool)
(declare-fun x440 () Int)
(declare-fun x152 () Int)
(declare-fun x442 () Int)
(declare-fun x267 () Bool)
(declare-fun x428 () x42)
(declare-fun x465 () Int)
(declare-fun x171 () x42)
(declare-fun x119 () Int)
(declare-fun x218 () Int)
(declare-fun x102 () x42)
(declare-fun x188 () Int)
(declare-fun x205 () Bool)
(declare-fun x208 () Int)
(declare-fun x509 () Int)
(declare-fun x194 () Int)
(declare-fun x494 () Bool)
(declare-fun x175 () Bool)
(declare-fun x429 () Bool)
(declare-fun x387 () x42)
(declare-fun x498 () Bool)
(declare-fun x336 () Int)
(declare-fun x32 () Bool)
(declare-fun x393 () Int)
(declare-fun x423 () Bool)
(declare-fun x120 () x42)
(declare-fun x223 () Bool)
(declare-fun x105 (x42) Int)
(declare-fun x377 () Int)
(declare-fun x128 (x42) Int)
(declare-fun x250 () Int)
(declare-fun x474 () x42)
(declare-fun x355 () Int)
(declare-fun x405 () Int)
(declare-fun x17 () Int)
(declare-fun x22 () Int)
(declare-fun x400 () Int)
(declare-fun x14 () x42)
(declare-fun x13 () Int)
(declare-fun x31 (x42) Int)
(declare-fun x379 () Int)
(declare-fun x351 () x42)
(declare-fun x249 () x42)
(declare-fun x245 () x42)
(declare-fun x159 () Int)
(declare-fun x308 () Int)
(declare-fun x237 () x42)
(declare-fun x438 () x42)
(declare-fun x98 () Int)
(declare-fun x316 () Bool)
(declare-fun x85 () Int)
(declare-fun x58 () Int)
(declare-fun x413 () Bool)
(declare-fun x292 () Int)
(declare-fun x305 () Bool)
(declare-fun x309 () Int)
(declare-fun x441 () Int)
(declare-fun x381 () Int)
(declare-fun x266 () Bool)
(declare-fun x236 () Int)
(declare-fun x25 () Bool)
(declare-fun x425 (Int Int) Int)
(declare-fun x84 () Int)
(declare-fun x76 () Bool)
(declare-fun x40 () Int)
(declare-fun x369 () x42)
(declare-fun x302 (x42) Int)
(declare-fun x5 () Int)
(declare-fun x385 () Int)
(declare-fun x200 () x42)
(declare-fun x502 () x42)
(declare-fun x51 () Int)
(declare-fun x70 () Int)
(declare-fun x96 () x42)
(declare-fun x12 () Bool)
(declare-fun x422 () Int)
(declare-fun x182 () Int)
(declare-fun x444 () Bool)
(declare-fun x71 () Int)
(declare-fun x111 () x42)
(declare-fun x147 () Bool)
(declare-fun x82 () Int)
(declare-fun x447 () Int)
(declare-fun x511 () Bool)
(declare-fun x348 () Bool)
(declare-fun x35 () Int)
(declare-fun x23 () x42)
(declare-fun x155 () Bool)
(declare-fun x417 () Bool)
(declare-fun x384 () Int)
(declare-fun x172 () Int)
(declare-fun x353 () Bool)
(declare-fun x333 () Int)
(declare-fun x204 (Int) x42)
(declare-fun x207 () Int)
(declare-fun x118 () Int)
(declare-fun x356 () Bool)
(declare-fun x6 () Int)
(declare-fun x412 (Int Int) Int)
(declare-fun x248 () x42)
(declare-fun x365 () Int)
(declare-fun x57 () Int)
(declare-fun x16 () Bool)
(declare-fun x129 () Int)
(declare-fun x253 () Int)
(declare-fun x382 () x42)
(declare-fun x513 () Bool)
(declare-fun x453 () Bool)
(declare-fun x274 () Int)
(declare-fun x151 () x42)
(declare-fun x515 () Bool)
(declare-fun x233 () Int)
(declare-fun x69 () Bool)
(declare-fun x169 () Int)
(declare-fun x255 () Int)
(declare-fun x243 (x42) Int)
(declare-fun x21 () x42)
(declare-fun x288 () Int)
(declare-fun x311 () Int)
(declare-fun x380 () Bool)
(declare-fun x170 () Int)
(declare-fun x189 () Bool)
(declare-fun x143 () Bool)
(declare-fun x184 () x42)
(declare-fun x3 () Bool)
(declare-fun x264 () Int)
(declare-fun x130 () Int)
(declare-fun x344 () Bool)
(declare-fun x287 () Bool)
(declare-fun x24 () x42)
(declare-fun x93 () Bool)
(declare-fun x45 () Int)
(declare-fun x216 () Bool)
(declare-fun x286 () Bool)
(declare-fun x432 (x42) Int)
(declare-fun x332 () Int)
(declare-fun x126 () Int)
(declare-fun x276 () Int)
(declare-fun x499 () x42)
(declare-fun x83 (x42) Int)
(declare-fun x397 (Int) Int)
(declare-fun x374 () Int)
(declare-fun x100 () Int)
(declare-fun x132 () x42)
(declare-fun x1 () Int)
(declare-fun x392 () Bool)
(declare-fun x282 () Bool)
(declare-fun x173 () Int)
(declare-fun x122 () Int)
(declare-fun x59 (Int) Int)
(declare-fun x463 (x42) Int)
(declare-fun x329 () Int)
(declare-fun x180 (x42) Int)
(declare-fun x433 () Int)
(declare-fun x390 () Bool)
(declare-fun x191 () Int)
(declare-fun x270 () x42)
(declare-fun x480 () Bool)
(declare-fun x133 () Int)
(declare-fun x472 () Int)
(declare-fun x466 () Bool)
(declare-fun x97 () Int)
(declare-fun x496 () Int)
(declare-fun x289 () Int)
(declare-fun x11 () Int)
(declare-fun x338 () Int)
(declare-fun x461 () Int)
(declare-fun x327 () Int)
(declare-fun x219 () Int)
(declare-fun x209 () Int)
(declare-fun x181 () Int)
(declare-fun x346 () Int)
(declare-fun x315 () x42)
(declare-fun x410 () Bool)
(declare-fun x91 () Bool)
(declare-fun x257 () Int)
(declare-fun x261 () Int)
(declare-fun x367 () Int)
(declare-fun x148 () x42)
(declare-fun x310 () Int)
(declare-fun x454 () Int)
(declare-fun x491 () Bool)
(declare-fun x259 () Int)
(declare-fun x448 () Int)
(declare-fun x268 () Int)
(declare-fun x357 () Int)
(declare-fun x28 () Bool)
(declare-fun x469 () Bool)
(declare-fun x339 () x42)
(declare-fun x53 (Int Int) Int)
(declare-fun x166 () Bool)
(declare-fun x295 () Int)
(declare-fun x459 () Int)
(declare-fun x409 () Int)
(declare-fun x263 () Bool)
(declare-fun x74 () Int)
(declare-fun x33 () Int)
(declare-fun x167 () x42)
(declare-fun x298 (x42) Int)
(declare-fun x15 () Bool)
(declare-fun x340 () Int)
(declare-fun x283 () Int)
(declare-fun x75 () Int)
(declare-fun x354 () Int)
(declare-fun x110 () x42)
(declare-fun x231 () Bool)
(declare-fun x497 () x42)
(declare-fun x484 () Bool)
(declare-fun x455 () x42)
(declare-fun x504 () Bool)
(declare-fun x420 () x42)
(declare-fun x176 () x42)
(declare-fun x185 () Int)
(declare-fun x500 () Int)
(declare-fun x9 () Bool)
(declare-fun x48 () Int)
(declare-fun x373 () Int)
(declare-fun x79 () Int)
(declare-fun x323 () x42)
(declare-fun x127 () Int)
(declare-fun x217 () Int)
(declare-fun x254 () Int)
(declare-fun x220 () x42)
(declare-fun x391 () Int)
(declare-fun x408 () Int)
(declare-fun x404 () Int)
(declare-fun x493 (Int Int) Int)
(declare-fun x280 () Bool)
(declare-fun x456 () Int)
(declare-fun x88 (Int) Int)
(declare-fun x396 () Int)
(declare-fun x278 () Bool)
(declare-fun x324 () Int)
(declare-fun x383 (Int) Int)
(declare-fun x399 () Int)
(declare-fun x402 () Int)
(declare-fun x109 () Int)
(declare-fun x67 () x42)
(declare-fun x304 () x42)
(declare-fun x314 () Bool)
(declare-fun x505 () Int)
(declare-fun x319 () Int)
(declare-fun x203 () Int)
(declare-fun x337 () Int)
(declare-fun x192 () x42)
(declare-fun x460 () x42)
(declare-fun x99 () Int)
(declare-fun x80 () Int)
(declare-fun x34 () Bool)
(declare-fun x235 () Bool)
(declare-fun x196 () Int)
(declare-fun x450 () Int)
(declare-fun x325 () Bool)
(declare-fun x41 () Int)
(declare-fun x179 () Int)
(declare-fun x225 () x42)
(declare-fun x320 () x42)
(declare-fun x262 () Bool)
(declare-fun x503 () x42)
(declare-fun x487 (x42) Int)
(declare-fun x112 () x42)
(declare-fun x285 (x42) Int)
(declare-fun x66 () Bool)
(declare-fun x138 () Int)
(declare-fun x7 () Int)
(declare-fun x512 () Int)
(declare-fun x101 () Int)
(declare-fun x272 () Int)
(declare-fun x437 (x42) Int)
(declare-fun x63 (x42) Int)
(declare-fun x234 (x42) Int)
(declare-fun x2 () x42)
(declare-fun x478 () Bool)
(declare-fun x38 () x42)
(declare-fun x8 () Int)
(declare-fun x411 () Bool)
(declare-fun x277 () Bool)
(declare-fun x489 () x42)
(declare-fun x307 () Int)
(declare-fun x202 () Int)
(declare-fun x72 () Bool)
(declare-fun x141 () Int)
(declare-fun x414 () Int)
(declare-fun x401 () Int)
(declare-fun x470 () Bool)
(declare-fun x160 () Int)
(declare-fun x221 () Int)
(declare-fun x113 () Int)
(declare-fun x134 () Int)
(declare-fun x183 () Int)
(declare-fun x446 () x42)
(declare-fun x116 () Int)
(declare-fun x475 () x42)
(declare-fun x275 () Bool)
(declare-fun x296 () Bool)
(declare-fun x281 () Int)
(declare-fun x507 () Bool)
(declare-fun x471 () Int)
(declare-fun x238 () Int)
(declare-fun x157 () Int)
(declare-fun x239 () Bool)
(declare-fun x56 () Bool)
(declare-fun x376 () Int)
(declare-fun x156 () Bool)
(declare-fun x136 () Bool)
(declare-fun x158 () Int)
(declare-fun x334 () Int)
(declare-fun x486 () x42)
(declare-fun x457 () Bool)
(declare-fun x44 (x42) Int)
(declare-fun x293 () Int)
(declare-fun x114 () Bool)
(declare-fun x163 () x42)
(declare-fun x318 () Bool)
(declare-fun x406 () Int)
(declare-fun x228 () x42)
(declare-fun x240 () x42)
(declare-fun x199 () Int)
(declare-fun x168 () Bool)
(declare-fun x418 () Bool)
(declare-fun x271 () x42)
(declare-fun x78 () Int)
(declare-fun x430 () Int)
(declare-fun x241 () Int)
(declare-fun x49 () x42)
(declare-fun x395 () Int)
(declare-fun x372 () x42)
(declare-fun x211 () Int)
(declare-fun x149 () Bool)
(declare-fun x506 (Int Int) Int)
(declare-fun x427 () Int)
(declare-fun x226 () Int)
(declare-fun x174 () Int)
(declare-fun x492 () Int)
(declare-fun x265 () Bool)
(declare-fun x201 () Bool)
(declare-fun x306 () Bool)
(declare-fun x363 () Int)
(declare-fun x467 () Int)
(declare-fun x321 () x42)
(declare-fun x198 () x42)
(declare-fun x54 () Int)
(declare-fun x424 () Int)
(declare-fun x244 () Int)
(declare-fun x154 () Bool)
(declare-fun x347 () Int)
(declare-fun x341 () x42)
(declare-fun x394 () Int)
(declare-fun x434 () Int)
(declare-fun x375 (Int) Int)
(declare-fun x303 () Int)
(declare-fun x358 () Int)
(declare-fun x458 () Int)
(declare-fun x131 () Int)
(define-fun x300 ((x42 x42) (x483 Int)) x42 (ite ((_ is x77) x42) (x77 (x90 x42) (+ (x342 x42) x483)) (ite ((_ is x29) x42) (x29 (x177 x42) (x95 x42) (+ x483 (x165 x42))) (x214 (+ (x246 x42) x483)))))
(define-fun x389 ((x242 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242) (>= x242 0)) x242 (- x242 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x161 ((x242 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x242) (> 0 x242)) (+ x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) x242))
(define-fun x43 ((x242 Int)) Int (ite (and (>= x242 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242)) x242 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242) (< x242 231584178474632390847141970017375815706539969331281128078915168015826259279872)) (- x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x242) (> 0 x242)) (+ x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x412 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x52 ((x206 Int)) Bool (and (< x206 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x206)))
(define-fun x343 ((x206 Int)) Bool (and (= (x425 115792089237316195423570985008687907853269984665640564039457584007913129639935 x206) x206) (= x206 (x425 x206 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x107 ((x206 Int)) Bool (and (= 0 (x425 0 x206)) (= (x425 x206 0) 0)))
(define-fun x62 ((x206 Int)) Bool (= x206 (x425 x206 x206)))
(define-fun x252 ((x206 Int)) Bool (and (x62 x206) (x343 x206) (x107 x206)))
(define-fun x94 ((x206 Int) (x197 Int)) Bool (= (x425 x197 x206) (x425 x206 x197)))
(define-fun x39 ((x206 Int) (x197 Int)) Bool (and (=> (>= x197 0) (>= x197 (x425 x206 x197))) (=> (<= 0 x206) (<= (x425 x206 x197) x206)) (<= 0 (x425 x206 x197))))
(define-fun x258 ((x206 Int) (x197 Int)) Bool (and (x39 x206 x197) (x94 x206 x197)))
(define-fun x50 ((x206 Int)) Bool (= (x412 x206 1461501637330902918203684832716283019655932542976) (x425 x206 1461501637330902918203684832716283019655932542975)))
(define-fun x426 ((x206 Int)) Bool (and (x258 x206 1461501637330902918203684832716283019655932542975) (x50 x206)))
(define-fun x370 ((x206 Int) (x197 Int)) Bool (and (< (x412 x206 x197) x197) (<= 0 (x412 x206 x197))))
(define-fun x247 ((x206 Int) (x197 Int)) Bool (=> (and (< 0 x197) (>= x206 0)) (= (= x206 (x412 x206 x197)) (< x206 x197))))
(define-fun x510 ((x206 Int) (x197 Int)) Bool (=> (and (and (< x206 (+ x197 x197)) (<= x197 x206)) (> x197 0)) (= (- x206 x197) (x412 x206 x197))))
(define-fun x294 ((x206 Int)) Bool (= (x412 0 x206) 0))
(define-fun x415 ((x206 Int)) Bool (= (x412 x206 1) 0))
(define-fun x366 ((x206 Int)) Bool (= (x412 x206 x206) 0))
(define-fun x479 ((x206 Int)) Bool (and (x366 x206) (x294 x206) (x415 x206)))
(define-fun x142 ((x206 Int) (x197 Int)) Bool (= (x506 x197 x206) (x506 x206 x197)))
(define-fun x488 ((x206 Int) (x197 Int)) Bool (and (=> (and (< 0 x197) (< x206 0)) (< (x506 x206 x197) 0)) (=> (and (< x197 0) (> x206 0)) (> 0 (x506 x206 x197))) (=> (and (> 0 x197) (> 0 x206)) (< 0 (x506 x206 x197))) (=> (and (< 0 x197) (< 0 x206)) (> (x506 x206 x197) 0))))
(define-fun x313 ((x206 Int) (x197 Int)) Bool (=> (and (< 0 x206) (< 0 x197)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x506 x206 x197)) (= x197 (x53 (x43 (x506 x206 x197)) x206)))))
(define-fun x299 ((x206 Int) (x197 Int)) Bool (=> (and (not (= 0 x206)) (not (= x197 0))) (and (= x197 (x53 (x506 x206 x197) x206)) (= (x53 (x506 x206 x197) x197) x206))))
(define-fun x378 ((x206 Int) (x197 Int)) Bool (=> (and (> x197 0) (> x206 0)) (= (> (x506 x206 x197) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (x53 115792089237316195423570985008687907853269984665640564039457584007913129639935 x206) x197))))
(define-fun x501 ((x206 Int) (x197 Int)) Bool (and (= (x43 (x506 x206 x197)) (x43 (x506 x206 (- x197 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x43 (x506 (- x206 115792089237316195423570985008687907853269984665640564039457584007913129639936) x197)) (x43 (x506 x206 x197))) (= (x43 (x506 x206 x197)) (x43 (x506 (- x206 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x197 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x386 ((x206 Int) (x197 Int)) Bool (and (=> (and (and (<= x206 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x206 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 0 x197) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197))) (= (>= (x506 (- x206 115792089237316195423570985008687907853269984665640564039457584007913129639936) x197) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x206) (x53 57896044618658097711785492504343953926634992332820282019728792003956564819968 x197)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x197)) (and (<= x206 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x206 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x506 (- x206 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x197 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x206) (x53 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x197))))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197) (<= x197 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x206) (> x206 0))) (= (>= (x53 57896044618658097711785492504343953926634992332820282019728792003956564819968 x206) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x197)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x506 x206 (- x197 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (<= x206 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x206 0)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197) (> x197 0))) (= (<= x206 (x53 57896044618658097711785492504343953926634992332820282019728792003956564819967 x197)) (<= (x506 x206 x197) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))
(define-fun x106 ((x206 Int) (x197 Int)) Bool (and (x488 x206 x197) (x313 x206 x197) (x501 x206 x197) (x142 x206 x197) (x378 x206 x197) (x299 x206 x197) (x386 x206 x197)))
(define-fun x139 ((x206 Int)) Bool (and (= 0 (x506 x206 0)) (= (x506 0 x206) 0)))
(define-fun x104 ((x206 Int)) Bool (and (= x206 (x506 x206 1)) (= (x506 1 x206) x206)))
(define-fun x485 ((x206 Int)) Bool (and (x104 x206) (x139 x206)))
(define-fun x215 ((x206 Int) (x197 Int)) Bool (=> (and (> x206 0) (< 0 x197)) (and (>= x206 (x53 x206 x197)) (>= (x53 x206 x197) 0))))
(define-fun x89 ((x206 Int) (x197 Int)) Bool (=> (and (and (< x206 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x206 0)) (and (<= 1 x197) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x197))) (and (<= 0 (x53 x206 x197)) (< (x53 x206 x197) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x388 ((x206 Int) (x197 Int)) Bool (=> (and (< x197 x206) (< 1 x197)) (< (x53 x206 x197) x206)))
(define-fun x322 ((x206 Int) (x197 Int)) Bool (=> (and (> x206 0) (> x197 0)) (= (> x197 x206) (= 0 (x53 x206 x197)))))
(define-fun x92 ((x206 Int) (x197 Int)) Bool (=> (and (> x197 0) (< 0 x206)) (and (>= x206 (x506 (x53 x206 x197) x197)) (> (x506 (x53 x206 x197) x197) (- x206 x197)))))
(define-fun x125 ((x206 Int) (x197 Int)) Bool (and (x89 x206 x197) (x322 x206 x197) (x92 x206 x197) (x388 x206 x197) (x215 x206 x197)))
(define-fun x273 ((x206 Int)) Bool (= 0 (x53 0 x206)))
(define-fun x284 ((x206 Int)) Bool (= (x53 x206 1) x206))
(define-fun x345 ((x206 Int)) Bool (=> (not (= x206 0)) (= (x53 x206 x206) 1)))
(define-fun x213 ((x206 Int)) Bool (and (x284 x206) (x345 x206) (x273 x206)))
(define-fun x4 ((x206 Int)) Bool (= (x43 x206) (+ (x412 x206 32) (x425 x206 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x481 ((x206 Int)) Bool (and (x4 x206) (x258 x206 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x195 ((x10 Int)) Int (ite (= 128 x10) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x59 x10)))
(define-fun x439 ((x10 Int)) Int (ite (= 132 x10) x145 (x195 x10)))
(define-fun x335 ((x10 Int)) Int (ite (= x10 164) x279 (x439 x10)))
(define-fun x352 ((x10 Int)) Int (ite (= 196 x10) x430 (x335 x10)))
(define-fun x359 ((x10 x42)) Int (ite (= x503 x10) x283 (x180 x10)))
(define-fun x224 ((x10 Int)) Int (ite (= x10 0) 1 (x88 x10)))
(define-fun x47 ((x10 x42)) Int (ite (= x248 x10) x174 (x302 x10)))
(define-fun x260 ((x10 Int)) Int (ite (= 0 x10) 1 (x88 x10)))
(define-fun x64 ((x10 Int)) Int (ite (= x10 x384) 1 (x383 x10)))
(define-fun x229 ((x10 Int)) Int (ite (= x30 x10) 0 (x375 x10)))
(define-fun x269 ((x10 Int)) Int (ite (= x57 x10) x30 (x397 x10)))
(define-fun x364 ((x10 Int)) Int (ite (= x373 x10) 0 (x229 x10)))
(define-fun x36 ((x10 Int)) Int (ite (= x10 x183) x373 (x269 x10)))
(define-fun x115 ((x206 Int) (x197 Int) (x164 Int) (x135 Int)) Bool (=> (and (<= x197 x135) (>= x164 x206) (<= 0 x206) (<= 0 x197)) (>= (x506 x164 x135) (x506 x206 x197))))
(define-fun x117 ((x206 Int) (x197 Int) (x164 Int) (x135 Int)) Bool (=> (= x164 x206) (= (- (x506 x206 x197) (x506 x164 x135)) (x506 x206 (- x197 x135)))))
(define-fun x210 ((x206 Int)) Bool (=> (and (not (= x206 3569331386)) (< 10000 x206) (not (= x206 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x206 4133948374)) (not (= 3569979932 x206)) (not (= x206 3564505029)) (not (= 4099215060 x206)) (not (= 157198259 x206)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x206)) (not (= x206 1000000000000000000)) (not (= x206 3505202862)) (not (= 4152920812 x206)) (not (= 4294967296 x206)) (not (= 3265688288 x206)) (not (= x206 3384965404)) (not (= 2172364862 x206)) (not (= x206 3839634084)) (not (= x206 117300739)) (not (= x206 404098525)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x206)) (not (= x206 1461501637330902918203684832716283019655932542976)) (not (= 1086394137 x206)) (not (= x206 599290589)) (not (= x206 1461501637330902918203684832716283019655932542975))) (not ((_ is x214) (x204 x206)))))
(assert (x52 x169))
(assert (x426 x7))
(assert (x52 x340))
(assert (x210 x1))
(assert (x52 x74))
(assert (=> (>= 10000 x203) (= (x204 x203) (x214 x203))))
(assert (x117 x6 x250 x367 x181))
(assert (x210 x427))
(assert (= (and x20 (not x103)) x390))
(assert (x52 x456))
(assert (= x13 (x234 (x204 x13))))
(assert (= (or x190 x429) x318))
(assert (x52 x109))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x336 (+ (* 1461501637330902918203684832716283019655932542976 (x53 x336 1461501637330902918203684832716283019655932542976)) (x412 x336 1461501637330902918203684832716283019655932542976)))) (x247 x336 1461501637330902918203684832716283019655932542976) (x510 x336 1461501637330902918203684832716283019655932542976) (x370 x336 1461501637330902918203684832716283019655932542976)))
(assert (x52 x293))
(assert (x52 x153))
(assert (x52 x447))
(assert (x115 x367 x181 x6 x250))
(assert (= x356 (or x312 x265)))
(assert (x52 x129))
(assert (x210 x365))
(assert (= (x234 (x204 x471)) x471))
(assert (= 3384965404 (x234 (x214 3384965404))))
(assert (= 4133948374 (x234 (x214 4133948374))))
(assert (x52 x467))
(assert (x52 x131))
(assert (x210 x328))
(assert (x52 x338))
(assert (= (x234 (x204 x360)) x360))
(assert (= (and (not x267) x205) x280))
(assert (=> (<= x331 10000) (= (x214 x331) (x204 x331))))
(assert (= (+ (x234 x497) 4) (x234 (x300 x497 4))))
(assert (x213 x159))
(assert (x52 x179))
(assert (=> (>= 10000 x264) (= (x204 x264) (x214 x264))))
(assert (x52 x27))
(assert (= x235 (or x390 x34)))
(assert (x52 x221))
(assert (x210 x45))
(assert (= x329 (x234 (x204 x329))))
(assert (x252 x490))
(assert (x52 x268))
(assert (x106 x181 x367))
(assert (= x504 (and x15 (not x66))))
(assert (x479 1461501637330902918203684832716283019655932542976))
(assert (= (or x466 x278) x513))
(assert (= (x234 (x204 x145)) x145))
(assert (= (x234 (x300 x271 3)) (+ (x234 x271) 3)))
(assert (x52 x385))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x436 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x53 x436 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x412 x436 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x247 x436 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x510 x436 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x370 x436 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x204 157198259) (x214 157198259)))
(assert (x52 x100))
(assert (x52 x477))
(assert (= (x204 1461501637330902918203684832716283019655932542975) (x214 1461501637330902918203684832716283019655932542975)))
(assert (= x166 (and x348 x32)))
(assert (=> (<= x98 10000) (= (x214 x98) (x204 x98))))
(assert (x479 x109))
(assert (x52 x490))
(assert (=> (>= 10000 x279) (= (x204 x279) (x214 x279))))
(assert (x52 x222))
(assert (= x212 (x234 (x204 x212))))
(assert (x52 x138))
(assert (= (and x147 x232) x326))
(assert (= (x234 (x204 x1)) x1))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x307 (+ (* 1461501637330902918203684832716283019655932542976 (x53 x307 1461501637330902918203684832716283019655932542976)) (x412 x307 1461501637330902918203684832716283019655932542976)))) (x247 x307 1461501637330902918203684832716283019655932542976) (x510 x307 1461501637330902918203684832716283019655932542976) (x370 x307 1461501637330902918203684832716283019655932542976)))
(assert (= x453 (and x306 x314)))
(assert (=> (>= 10000 x328) (= (x204 x328) (x214 x328))))
(assert (x485 x250))
(assert (=> (>= 10000 x129) (= (x214 x129) (x204 x129))))
(assert (x52 x492))
(assert (and (= (x506 9 3) 27) (= 81 (x506 9 9)) (= 9 (x506 3 3)) (= 81 (x506 27 3))))
(assert (= (x234 (x204 x427)) x427))
(assert (=> (>= 10000 x33) (= (x214 x33) (x204 x33))))
(assert (x52 x98))
(assert (x213 x181))
(assert (x210 x58))
(assert (x210 x492))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x401 (+ (* 1461501637330902918203684832716283019655932542976 (x53 x401 1461501637330902918203684832716283019655932542976)) (x412 x401 1461501637330902918203684832716283019655932542976)))) (x247 x401 1461501637330902918203684832716283019655932542976) (x510 x401 1461501637330902918203684832716283019655932542976) (x370 x401 1461501637330902918203684832716283019655932542976)))
(assert (=> (<= x492 10000) (= (x214 x492) (x204 x492))))
(assert (= (x234 (x204 x450)) x450))
(assert (x52 x35))
(assert (=> (>= 10000 x360) (= (x204 x360) (x214 x360))))
(assert (= 404098525 (x234 (x214 404098525))))
(assert (x485 x459))
(assert (= (x234 (x214 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x214 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x204 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x52 x160))
(assert (x52 x13))
(assert (x210 x471))
(assert (x52 x279))
(assert (= (x234 (x300 x349 2)) (+ (x234 x349) 2)))
(assert (x426 x307))
(assert (x210 x207))
(assert (x52 x391))
(assert (= (x234 (x300 x341 1)) (+ 1 (x234 x341))))
(assert (= 2172364862 (x234 (x214 2172364862))))
(assert (x52 x1))
(assert (=> (<= x340 10000) (= (x214 x340) (x204 x340))))
(assert (= x292 (x234 (x204 x292))))
(assert (x106 x6 (- x250 x181)))
(assert (= x275 (=> (and (= x441 x451) (= x368 0)) x16)))
(assert (= (and x280 (not x72)) x265))
(assert (x117 x181 x367 x250 x6))
(assert (x52 x374))
(assert (= x484 (and x296 (not x136))))
(assert (x252 x436))
(assert (x52 x347))
(assert (x52 x133))
(assert (x52 x244))
(assert (= (x214 3569331386) (x204 3569331386)))
(assert (x115 x6 x250 x181 x367))
(assert (= (x234 (x204 x170)) x170))
(assert (= x12 (and x277 x18)))
(assert (x52 x208))
(assert (=> (<= x450 10000) (= (x214 x450) (x204 x450))))
(assert (= (x234 (x204 x58)) x58))
(assert (= (x234 (x204 x458)) x458))
(assert (x106 x181 (- x367 x250)))
(assert (x52 x399))
(assert (= (x234 (x214 599290589)) 599290589))
(assert (=> (>= 10000 x145) (= (x204 x145) (x214 x145))))
(assert (x52 x346))
(assert (x125 x459 x6))
(assert (x52 x395))
(assert (= x511 (and x418 x504)))
(assert (x52 x212))
(assert (x52 x264))
(assert (x52 x207))
(assert (= (and x411 x235) x223))
(assert (x52 x118))
(assert (= 0 (x375 x71)))
(assert (=> (>= 10000 x471) (= (x204 x471) (x214 x471))))
(assert (x52 x396))
(assert (x52 x30))
(assert (=> (<= x58 10000) (= (x204 x58) (x214 x58))))
(assert (= x28 (and (not x291) x266)))
(assert (= x492 (x234 (x204 x492))))
(assert (x52 x86))
(assert (not x407))
(assert (= (x234 (x204 x207)) x207))
(assert (= (and x189 (not x91)) x325))
(assert (x52 x283))
(assert (x52 x194))
(assert (x52 x310))
(assert (x52 x233))
(assert (x426 x490))
(assert (x52 x451))
(assert (x252 1461501637330902918203684832716283019655932542975))
(assert (x52 x430))
(assert (= (x234 (x204 x330)) x330))
(assert (= (=> (and (= x408 x327) (= x476 x153)) x282) x9))
(assert (x52 x311))
(assert (x210 x211))
(assert (x52 x448))
(assert (x52 x514))
(assert (=> (>= 10000 x329) (= (x214 x329) (x204 x329))))
(assert (x52 x377))
(assert (x52 x58))
(assert (= (and x12 (not x350)) x316))
(assert (x106 x367 (- x181 x6)))
(assert (x52 x495))
(assert (x52 x450))
(assert (x52 x402))
(assert (x52 x408))
(assert (= (and x423 (not x305)) x498))
(assert (= (x234 (x214 3564505029)) 3564505029))
(assert (= (x234 (x204 x354)) x354))
(assert (=> (<= x138 10000) (= (x204 x138) (x214 x138))))
(assert (= (x214 599290589) (x204 599290589)))
(assert (x52 x384))
(assert (x52 x134))
(assert (x210 x212))
(assert (= (and (not x380) x491) x296))
(assert (x125 x255 x217))
(assert (x52 x33))
(assert (=> (<= x170 10000) (= (x214 x170) (x204 x170))))
(assert (x213 x391))
(assert (x52 x303))
(assert (= (x234 (x214 1000000000000000000)) 1000000000000000000))
(assert (=> (>= 10000 x212) (= (x214 x212) (x204 x212))))
(assert (= (x204 4133948374) (x214 4133948374)))
(assert (x210 x98))
(assert (x52 x381))
(assert (x210 x289))
(assert (x52 x401))
(assert (x52 x75))
(assert (x52 x330))
(assert (x52 x241))
(assert (x52 x137))
(assert (= (x204 1086394137) (x214 1086394137)))
(assert (= 3505202862 (x234 (x214 3505202862))))
(assert (x485 (- x6 x367)))
(assert (x52 x71))
(assert (= x156 (or x498 x515)))
(assert (= 4099215060 (x234 (x214 4099215060))))
(assert (x106 x6 (- x250 x367)))
(assert (x479 x490))
(assert (x52 x5))
(assert (x106 x250 (- x6 x367)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x234 (x214 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (x52 x276))
(assert (x52 x113))
(assert (= x266 (and x316 (not x69))))
(assert (x125 x118 x391))
(assert (x210 x450))
(assert (x485 x367))
(assert (= x469 (=> (= x470 (not (< 1 x396))) (and x443 x470))))
(assert (x52 x202))
(assert (x52 x144))
(assert (x252 x401))
(assert (x52 x78))
(assert (x210 x182))
(assert (=> (>= 10000 x362) (= (x204 x362) (x214 x362))))
(assert (=> (<= x126 10000) (= (x214 x126) (x204 x126))))
(assert (x52 x400))
(assert (= (x234 (x204 x301)) x301))
(assert (= x189 (and x296 x136)))
(assert (x479 x307))
(assert (x210 x496))
(assert (x52 x422))
(assert (x210 x279))
(assert (x210 x13))
(assert (x52 x454))
(assert (x210 x79))
(assert (=> (<= x211 10000) (= (x214 x211) (x204 x211))))
(assert (= (x234 (x214 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x485 (- x367 x250)))
(assert (x52 x219))
(assert (= (x234 (x204 x454)) x454))
(assert (= x40 (x234 (x204 x40))))
(assert (x52 x337))
(assert (x125 x159 x181))
(assert (x52 x308))
(assert (x210 x138))
(assert (x52 x191))
(assert (= x282 (=> (and (= (= 0 x476) x314) (or x314 (not x314))) x457)))
(assert (= (and x305 x423) x515))
(assert (x52 x472))
(assert (x52 x261))
(assert (x52 x512))
(assert (= (x234 (x204 x264)) x264))
(assert (x52 x172))
(assert (x210 x131))
(assert (x52 x434))
(assert (x52 x122))
(assert (= x178 (and (not x418) x504)))
(assert (x52 x157))
(assert (= (x204 4294967296) (x214 4294967296)))
(assert (x52 x442))
(assert (x52 x218))
(assert (x106 x181 (- x367 x6)))
(assert (= (or (and (not x168) x231) x93) x491))
(assert (x52 x37))
(assert (= (and x20 x103) x34))
(assert (x426 x401))
(assert (x52 x509))
(assert (=> (<= x84 10000) (= (x204 x84) (x214 x84))))
(assert (x52 x41))
(assert (x52 x368))
(assert (= 3569331386 (x234 (x214 3569331386))))
(assert (x52 x471))
(assert (x52 x130))
(assert (x52 x404))
(assert (x52 x97))
(assert (x52 x363))
(assert (= (x204 3569979932) (x214 3569979932)))
(assert (x52 x292))
(assert (= (x234 (x300 x55 2)) (+ 2 (x234 x55))))
(assert (x426 x336))
(assert (= (x234 (x204 x211)) x211))
(assert (x485 (- x181 x6)))
(assert (and (x89 x159 1000000000000000000) (=> (and (> 1000000000000000000 0) (< 0 x159)) (and (<= (* (x53 x159 1000000000000000000) 1000000000000000000) x159) (< (- x159 1000000000000000000) (* (x53 x159 1000000000000000000) 1000000000000000000)))) (x388 x159 1000000000000000000) (x322 x159 1000000000000000000) (x215 x159 1000000000000000000)))
(assert (=> (<= x1 10000) (= (x214 x1) (x204 x1))))
(assert (x52 x505))
(assert (x210 x126))
(assert (= x190 (and x15 x66)))
(assert (= (=> (and (= x451 x327) (= x476 x368)) x282) x16))
(assert (x52 x51))
(assert (x52 x394))
(assert (x52 x7))
(assert (= (x234 (x204 x98)) x98))
(assert (x52 x119))
(assert (x125 x430 x461))
(assert (= (x234 (x300 x351 1)) (+ (x234 x351) 1)))
(assert (= x231 true))
(assert (x52 x82))
(assert (x52 x295))
(assert (x52 x331))
(assert (x117 x250 x6 x367 x181))
(assert (=> (<= x7 10000) (= (x204 x7) (x214 x7))))
(assert (= (x234 (x204 x496)) x496))
(assert (x52 x256))
(assert (= (x234 (x204 x7)) x7))
(assert (x52 x127))
(assert (and (x378 1000000000000000000 x459) (x313 1000000000000000000 x459) (x501 1000000000000000000 x459) (x386 1000000000000000000 x459) (= (x506 1000000000000000000 x459) (* 1000000000000000000 x459)) (x299 1000000000000000000 x459) (and (= (- (* (- x459 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x459 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x506 (- 115792089237316195423570985008687907853269984665640564039456584007913129639936) (- x459 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x506 (- 115792089237316195423570985008687907853269984665640564039456584007913129639936) x459) (- (* 1000000000000000000 x459) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x459))) (= (x506 1000000000000000000 (- x459 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000 (- x459 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (=> (<= x365 10000) (= (x214 x365) (x204 x365))))
(assert (x479 x7))
(assert (= x3 (=> (and (and (and (>= 1461501637330902918203684832716283019655932542975 x354) (= x2 (x29 (x204 x354) x96 0)) (< 0 x169) (not (= x268 4099215060)) (<= 0 x465) (<= x79 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x465) (not (< x268 4099215060)) (= x354 x468) (= x465 (x487 x2)) (= (x105 (x204 x279)) x169) (= x79 x310) (= x96 (x29 (x204 x79) (x214 9) 0)) (= 4152920812 x268) (not (> 3569331386 x268)) (= x173 x68) (not (< x268 2172364862)) (not (= x268 4133948374)) (= x465 x512)) (and (= x507 (<= x422 x173)) (= x422 x512))) (and (= (x425 1461501637330902918203684832716283019655932542975 x336) x170) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x152) (= x152 x68) (= x310 x45) (= (x298 x449) x226) (= x369 (x29 (x204 x45) (x214 8) 0)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x500) (not (>= (+ x226 x276) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x226 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x105 (x204 x279)) x448) (= (x437 x369) x152) (not (= x394 3569331386)) (< x394 4099215060) (= (x29 (x204 x170) x446 0) x449) (= (x389 (+ x226 x208)) x509) (= x446 (x29 (x204 x145) x67 0)) (= x495 (x425 1461501637330902918203684832716283019655932542975 x336)) (<= x45 1461501637330902918203684832716283019655932542975) (= (x425 1461501637330902918203684832716283019655932542975 x7) x157) (= x78 (x425 1461501637330902918203684832716283019655932542975 x336)) (= (x29 (x204 x212) (x214 2) 0) x67) (>= x226 0) (= (x425 1461501637330902918203684832716283019655932542975 x7) x212) (not (= 3569979932 x394)) (>= x152 0) (not (< x394 2172364862)) (> x448 0) (not (> 3569331386 x394)) (= 3839634084 x394))) x507)))
(assert (x52 x54))
(assert (x52 x419))
(assert (= x205 (and (not x114) x143)))
(assert (x52 x6))
(assert (x115 x250 x6 x181 x367))
(assert (x52 x379))
(assert (x52 x301))
(assert (= x466 (or (and (not x154) x325) (and x291 x266) (and x239 x28) (and x18 (not x277)) (and x350 x12) (and x189 x91) (and x69 x316))))
(assert (= x262 (and x168 x231)))
(assert (x52 x199))
(assert (= (=> (and (and (<= x468 1461501637330902918203684832716283019655932542975) (> 4099215060 x254) (<= 0 x185) (= x254 3839634084) (<= x259 1461501637330902918203684832716283019655932542975) (< 0 x279) (= x76 (> (x105 (x204 x355)) 0)) (<= x492 1461501637330902918203684832716283019655932542975) (<= x355 1461501637330902918203684832716283019655932542975) (<= 0 x144) (<= 0 x434) (<= x450 1461501637330902918203684832716283019655932542975) (not (< x254 3569331386)) (= false x56) (>= 1461501637330902918203684832716283019655932542975 x324) (<= 0 x70) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x116) (not (= x450 x355)) (<= x279 1461501637330902918203684832716283019655932542975) (= (< 0 (x105 (x204 x279))) x344) (>= x311 0) x76 (= x442 3564505029) (<= x185 255) (<= 0 x310) x149 (<= 0 x116) (= (x243 (x204 x279)) x144) (= x315 (x29 (x204 x492) (x214 8) 0)) (>= x259 0) (= false x201) (< 0 x355) (not (= 3569979932 x254)) (>= x468 0) (= x492 x310) (= x413 false) (= x145 x324) (= x400 x434) (= (x243 (x204 x450)) x311) (= x334 x116) (= x116 (x437 x315)) (>= 1461501637330902918203684832716283019655932542975 x434) (<= x310 1461501637330902918203684832716283019655932542975) (= false x482) (<= 0 x324) (not (= x355 x279)) x344 (not (> 2172364862 x254)) (= (x105 (x204 x279)) x113) (< 0 x450) (not (= x450 x279)) (< 0 x113) (= (x243 (x204 x355)) x70) (not (= 3569331386 x254)) (= x85 3) (= x149 (> (x105 (x204 x450)) 0))) (and (and (= (x29 (x204 x1) (x214 9) 0) x110) (= x468 x301) (= x406 x334) (<= x301 1461501637330902918203684832716283019655932542975) (> x130 0) (<= x202 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x75 x202) (not (= x37 4133948374)) (not (= 4099215060 x37)) (not (> 4099215060 x37)) (= x1 x310) (<= x1 1461501637330902918203684832716283019655932542975) (= x37 4152920812) (not (> 2172364862 x37)) (= x372 (x29 (x204 x301) x110 0)) (= (x105 (x204 x279)) x130) (<= 0 x202) (not (< x37 3569331386)) (= x202 (x487 x372))) (and (<= x317 1461501637330902918203684832716283019655932542975) (not (< x414 4)) (> x219 0) (= x191 x473) (<= x307 1461501637330902918203684832716283019655932542975) (= 0 x82) (<= x7 1461501637330902918203684832716283019655932542975) (= x336 x393) (= x241 x7) (>= x317 0) (= x430 x100) (= x396 (x83 x455)) (and (< 99 x414) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x414) true)) (= x276 x208) (= x219 (x105 (x204 x279))) x251 (> 3569331386 x405) (= x405 3564505029) (= x17 0) (= x194 x82) (= x75 x308) (= x430 x409) (= x307 x145) (= x251 (>= x406 x308)) (= (x29 (x204 x7) (x214 3) 0) x455) (= x295 (x161 (- x414 4))) (not (> 2172364862 x405)) (not (= x405 3265688288)) (>= x191 0) (>= 1461501637330902918203684832716283019655932542975 x336) (= x74 x473) (= x7 x196) (not (= 3384965404 x405)) (= x168 (> x396 0)) (>= x307 0) (not (< x405 3265688288)) (<= x191 1461501637330902918203684832716283019655932542975) (not (or (> x295 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 96 x295) (= (<= x295 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (not (= 3505202862 x405))))) (and (=> (not x168) x443) (=> (and x168 (and (= (x403 x151) x427) (= (x29 (x204 x427) x121 0) x475) (= (> x347 0) x263) (> 1461501637330902918203684832716283019655932542976 x427) (= x207 (x425 1461501637330902918203684832716283019655932542975 x7)) (= (x77 x167 0) x249) (= x472 0) (= x347 (x508 x475)) (= x121 (x29 (x204 x207) (x214 4) 0)) (<= x427 1461501637330902918203684832716283019655932542975) (= (x29 (x204 x371) (x214 3) 0) x167) (< 0 x376) (= x151 x249) (>= x427 0) (= (x425 1461501637330902918203684832716283019655932542975 x7) x371) (= (x83 x167) x376))) (and (=> (not x263) x469) (=> (and x263 (and (= x23 x339) (= (x437 x431) x272) (= (= x272 0) x66) (< x471 1461501637330902918203684832716283019655932542976) (= x385 (x508 x486)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x236) (= (x425 1461501637330902918203684832716283019655932542975 x7) x458) (> x385 0) (>= 1461501637330902918203684832716283019655932542975 x471) (= x471 (x463 x339)) (>= x272 0) (= x23 (x77 x486 0)) (= x431 (x29 (x204 x236) (x214 8) 0)) (<= x272 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x471 0) (= x486 (x29 (x204 x427) x502 0)) (= x502 (x29 (x204 x458) (x214 4) 0)))) (and (=> (and (and (or (and x418 (= x222 0)) (and (and (= x222 x172) (< (* x459 1000000000000000000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x53 x118 x391) x172) (= (x43 (* x459 1000000000000000000)) x118)) (not x418))) (and (= x391 (x437 x516)) (= x250 (x63 x200)) (<= 0 x244) (= (x300 x351 1) x489) (= x237 (x29 (x204 x160) (x214 2) 0)) (= (x29 (x204 x471) x102 0) x148) (= x418 (= x459 0)) (= (= x6 0) x392) (ite x392 x392 (= (x53 x459 x6) x250)) (= x162 (x29 (x204 x471) x163 0)) (= (x29 (x204 x471) x237 0) x124) (= x331 (x425 1461501637330902918203684832716283019655932542975 x7)) (= (x161 (- x41 x244)) x6) (not (= x391 0)) (= (x29 (x204 x331) (x214 2) 0) x102) (= (x425 1461501637330902918203684832716283019655932542975 x7) x48) (<= 0 x250) (>= x391 0) (= (x29 (x204 x427) x148 0) x351) (= (ite (< x276 x253) x208 x253) x41) (= x459 (x43 (x506 x6 x250))) (<= x253 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x29 (x204 x427) x162 0) x271) (= (x425 1461501637330902918203684832716283019655932542975 x7) x160) (= (x425 1461501637330902918203684832716283019655932542975 x7) x131) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x250) (<= x244 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x270 (x300 x271 3)) (not (< x41 x244)) (= (x29 (x204 x48) (x214 8) 0) x516) (<= 0 x253) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391) (= (x29 (x204 x131) (x214 2) 0) x163) (= (x29 (x204 x427) x124 0) x55) (= (x300 x55 2) x200) (= x253 (x285 x489)) (= x244 (x128 x270)))) (not x66)) x480) (=> (and (and (= x198 (x29 (x204 x427) x19 0)) (= x428 (x300 x198 4)) (= (x29 (x204 x471) x65 0) x19) (<= x445 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x29 (x204 x328) (x214 2) 0) x65) (= x328 (x425 1461501637330902918203684832716283019655932542975 x7)) (= x445 x399) (>= x445 0) (= (x432 x428) x445)) x66) x478))))))) x407))
(assert (x213 x118))
(assert (= x131 (x234 (x204 x131))))
(assert (= x216 (=> (and (= (= 0 x137) x411) (or (not x411) x411)) x444)))
(assert (x52 x203))
(assert (x210 x362))
(assert (= (x234 (x204 x79)) x79))
(assert (x479 x401))
(assert (= (or (and x348 (not x32)) x166) x20))
(assert (x52 x272))
(assert (x252 x307))
(assert (x52 x79))
(assert (= (x234 (x204 x362)) x362))
(assert (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x234 (x214 16156842317565293874272834530371880720966471053262404558597773956279093428224))))
(assert (x485 (- x181 x250)))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x7 (+ (* 1461501637330902918203684832716283019655932542976 (x53 x7 1461501637330902918203684832716283019655932542976)) (x412 x7 1461501637330902918203684832716283019655932542976)))) (x247 x7 1461501637330902918203684832716283019655932542976) (x510 x7 1461501637330902918203684832716283019655932542976) (x370 x7 1461501637330902918203684832716283019655932542976)))
(assert (x52 x227))
(assert (= (x214 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x204 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x234 (x204 x331)) x331))
(assert (x52 x433))
(assert (= x48 (x234 (x204 x48))))
(assert (=> (>= 10000 x458) (= (x214 x458) (x204 x458))))
(assert (= x457 (=> (and (= (< 0 x257) x32) (= x436 (x389 (+ 31 x327))) (= x257 (x64 x384)) (= (x425 115792089237316195423570985008687907853269984665640564039457584007913129639904 x436) x424) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x327) true) (< x327 32)) (> x327 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x389 (+ x384 32)) x183) (= (x389 (+ x424 128)) x384) (= (x389 (+ x384 32)) x57) (= (x425 1461501637330902918203684832716283019655932542975 x401) x289) (not (= 0 x476)) (= (x389 (+ x30 160)) x373) (= x30 (x389 (+ x384 64)))) (and (=> x32 x286) (=> (not x32) x410)))))
(assert (x52 x288))
(assert (= x348 (or (and x306 (not x314)) x453)))
(assert (= x417 (and x326 x123)))
(assert (x52 x358))
(assert (x52 x468))
(assert (x117 x250 x6 x181 x367))
(assert (x52 x236))
(assert (x213 x6))
(assert (x52 x159))
(assert (x52 x435))
(assert (= (x234 (x214 4294967296)) 4294967296))
(assert (x52 x290))
(assert (x117 x367 x181 x6 x250))
(assert (x52 x8))
(assert (x52 x414))
(assert (x117 x367 x181 x250 x6))
(assert (= 3569979932 (x234 (x214 3569979932))))
(assert (x210 x340))
(assert (= (x214 4099215060) (x204 4099215060)))
(assert (x52 x257))
(assert (= x279 (x234 (x204 x279))))
(assert (x117 x6 x250 x181 x367))
(assert (x52 x355))
(assert (x485 x6))
(assert (x210 x329))
(assert (x210 x145))
(assert (x52 x185))
(assert (= (x234 (x214 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (=> (<= x79 10000) (= (x204 x79) (x214 x79))))
(assert (x52 x70))
(assert (x52 x327))
(assert (=> (<= x119 10000) (= (x204 x119) (x214 x119))))
(assert (x52 x409))
(assert (=> (>= 10000 x301) (= (x214 x301) (x204 x301))))
(assert (x52 x441))
(assert (x210 x160))
(assert (x210 x40))
(assert (x117 x181 x367 x6 x250))
(assert (x52 x253))
(assert (x52 x108))
(assert (x52 x196))
(assert (=> (<= x160 10000) (= (x204 x160) (x214 x160))))
(assert (x213 1000000000000000000))
(assert (= (x204 3505202862) (x214 3505202862)))
(assert (= (x204 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x214 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x115 x181 x367 x6 x250))
(assert (= x84 (x234 (x204 x84))))
(assert (= (x204 3564505029) (x214 3564505029)))
(assert (= (x234 (x204 x209)) x209))
(assert (= (or x511 x178) x429))
(assert (= (x214 1000000000000000000) (x204 1000000000000000000)))
(assert (x479 x436))
(assert (x52 x17))
(assert (x210 x354))
(assert (x52 x324))
(assert (x52 x57))
(assert (= (=> (and (= x341 (x29 (x204 x427) x460 0)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x127) (= x192 (x29 (x204 x129) (x214 4) 0)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x340) (= x505 (x285 x421)) (= x256 (x508 x171)) (= x421 (x300 x341 1)) (>= x505 0) (= x25 (not (< 1 x256))) (= x111 (x29 (x204 x340) (x214 2) 0)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x374) (= (x29 (x204 x471) x111 0) x460) (= x129 (x425 1461501637330902918203684832716283019655932542975 x7)) (= (x29 (x204 x427) x192 0) x171) (= x290 (ite (> x505 x276) x208 x505)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505)) (and x469 x25)) x478))
(assert (x252 x7))
(assert (x52 x367))
(assert (x210 x454))
(assert (= (x234 (x204 x126)) x126))
(assert (x52 x45))
(assert (x210 x301))
(assert (x52 x183))
(assert (x52 x152))
(assert (x52 x319))
(assert (= (x214 404098525) (x204 404098525)))
(assert (x485 (- x367 x6)))
(assert (=> (<= x292 10000) (= (x204 x292) (x214 x292))))
(assert (x52 x182))
(assert (= (+ 1 (x234 x21)) (x234 (x300 x21 1))))
(assert (x52 x406))
(assert (=> (>= 10000 x45) (= (x214 x45) (x204 x45))))
(assert (x210 x236))
(assert (x210 x355))
(assert (=> (>= 10000 x182) (= (x204 x182) (x214 x182))))
(assert (=> (>= 10000 x236) (= (x204 x236) (x214 x236))))
(assert (x485 (- x250 x181)))
(assert (x52 x188))
(assert (=> (<= x496 10000) (= (x214 x496) (x204 x496))))
(assert (x52 x362))
(assert (= x278 (and x28 (not x239))))
(assert (x52 x226))
(assert (x485 x181))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x109 (+ (* 1461501637330902918203684832716283019655932542976 (x53 x109 1461501637330902918203684832716283019655932542976)) (x412 x109 1461501637330902918203684832716283019655932542976)))) (x247 x109 1461501637330902918203684832716283019655932542976) (x510 x109 1461501637330902918203684832716283019655932542976) (x370 x109 1461501637330902918203684832716283019655932542976)))
(assert (= (=> (and (= x474 (x300 x497 4)) (= x304 (x29 (x204 x471) x297 0)) (= x497 (x29 (x204 x427) x304 0)) (not (>= (+ x337 x222) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x337 (x432 x474)) (= x80 x399) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x337) (= (x425 1461501637330902918203684832716283019655932542975 x7) x211) (= x297 (x29 (x204 x211) (x214 2) 0)) (= (x389 (+ x222 x337)) x80) (>= x337 0)) x478) x480))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x490 (+ (* 1461501637330902918203684832716283019655932542976 (x53 x490 1461501637330902918203684832716283019655932542976)) (x412 x490 1461501637330902918203684832716283019655932542976)))) (x247 x490 1461501637330902918203684832716283019655932542976) (x510 x490 1461501637330902918203684832716283019655932542976) (x370 x490 1461501637330902918203684832716283019655932542976)))
(assert (x52 x317))
(assert (x52 x170))
(assert (x106 x6 x250))
(assert (x52 x333))
(assert (=> (<= x209 10000) (= (x204 x209) (x214 x209))))
(assert (x52 x371))
(assert (x213 x430))
(assert (= x138 (x234 (x204 x138))))
(assert (= (x234 (x204 x119)) x119))
(assert (x52 x11))
(assert (= x340 (x234 (x204 x340))))
(assert (= (x204 2172364862) (x214 2172364862)))
(assert (x52 x217))
(assert (x52 x465))
(assert (x210 x203))
(assert (= x410 (=> (and (or (and (and (= (x243 (x204 x279)) x303) x353 x398 (= (= x338 (x230 (x204 x289))) x353) (= (>= (x230 (x204 x279)) x303) x398) (= x338 (x243 (x204 x289))) (> 4294967296 x27)) x103) (not x103)) (and (= (x105 (x204 x289)) x419) (not (= 0 x419)) (= x103 (> x137 0)))) x216)))
(assert (x52 x354))
(assert (= (x204 4152920812) (x214 4152920812)))
(assert (x52 x496))
(assert (x210 x209))
(assert (x52 x174))
(assert (x252 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x52 x365))
(assert (x210 x7))
(assert (x210 x330))
(assert (x52 x116))
(assert (x252 x336))
(assert (x52 x459))
(assert (x52 x436))
(assert (x52 x250))
(assert (x52 x48))
(assert (= x287 (=> (and (= x153 0) (= x408 x441)) x9)))
(assert (=> (<= x354 10000) (= (x204 x354) (x214 x354))))
(assert (x52 x416))
(assert (= (x234 (x204 x129)) x129))
(assert (x479 x336))
(assert (x52 x373))
(assert (x485 (- x6 x181)))
(assert (x52 x328))
(assert (x52 x336))
(assert (x52 x393))
(assert (x210 x48))
(assert (x52 x274))
(assert (x52 x84))
(assert (= x443 (=> (and (= x182 (x425 1461501637330902918203684832716283019655932542975 x336)) (= (= x450 x182) x380) (= 128 x416) (= x293 (x105 (x204 x182))) (not (= 0 x293))) (and (=> (and (and (and x136 (and (not (> 4 x158)) (= x307 x109) (= x99 599290589) (= (x161 (- x158 4)) x51) (< x99 1086394137) (< 0 x179) (= x329 x279) (= x158 100) (= x91 (or (> x51 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x51 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x51 96)))) (not (= x99 117300739)) (not (= 404098525 x99)) (= x179 (x105 (x204 x355))) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x395) (= x158 100) (= x409 x101) (not (= 157198259 x99)))) (= x136 (= x182 x355))) (not x380)) (and (=> (and (not x91) (and (= (x425 1461501637330902918203684832716283019655932542975 x307) x447) (= (= x447 x307) x154))) (and (=> (and x154 (and (= x329 x381) (= (= x279 x329) x277))) (and (=> (not x277) x287) (=> (and (and (= x362 (x425 1461501637330902918203684832716283019655932542975 x109)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x404) (= x146 (x29 (x204 x362) (x214 1) 0)) (= (x302 x499) x81) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x333) (<= 0 x333) (= x402 x101) (>= x404 0) (= (x389 (+ x81 x333)) x379) (<= x81 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x302 x146) x333) (<= 0 x81) (= (< x404 x379) x350) (= (x29 (x204 x329) (x214 1) 0) x499)) x277) (and (=> x350 x287) (=> (and (not x350) (and (= x133 (x302 x245)) (<= 0 x133) (= (x29 (x204 x360) (x214 1) 0) x245) (= (< x133 x101) x69) (= x360 (x425 1461501637330902918203684832716283019655932542975 x109)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x133))) (and (=> (and (and (= (x161 (- x133 x101)) x174) (= (x29 (x204 x13) (x214 1) 0) x248) (>= x477 0) (= (x29 (x204 x329) (x214 1) 0) x184) (= x13 (x425 1461501637330902918203684832716283019655932542975 x109)) (= x477 (x47 x184)) (= (< x22 x477) x291) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x477) (= (x389 (+ x101 x477)) x22)) (not x69)) (and (=> x291 x287) (=> (and (and (= (x29 (x204 x279) x24 0) x176) (= (x29 (x204 x138) (x214 2) 0) x24) (= x138 (x425 1461501637330902918203684832716283019655932542975 x109)) (<= x309 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x44 x176) x309) (= x239 (< x309 x101)) (>= x309 0)) (not x291)) (and (=> (and (not x239) (and (= 1 x153) (= 32 x408) (= (x425 1461501637330902918203684832716283019655932542975 x109) x377) (= (x161 (- x309 x101)) x332))) x9) (=> x239 x287))))) (=> x69 x287))))))) (=> (not x154) x287))) (=> x91 x287))) (=> (and (and (= x97 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= (or (and (> 96 x86) (= true (<= x86 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x86)) x87) (= 599290589 x108) (= (x161 (- x467 4)) x86) (= x209 x279) (not (= 117300739 x108)) (> 1086394137 x108) (= x467 100) (= 100 x467) (not (< x467 4)) (not (= x108 157198259)) (< 0 x35) (not (= x108 404098525)) (= x35 (x105 (x204 x450))) (= x141 x409) (= x307 x490)) x380) (and (=> x87 x275) (=> (and (and (= (x425 1461501637330902918203684832716283019655932542975 x307) x218) (= x232 (= x218 x307))) (not x87)) (and (=> (not x232) x275) (=> (and (and (= x123 (= x209 x279)) (= x209 x274)) x232) (and (=> (not x123) x275) (=> (and x123 (and (= x261 x141) (= x496 (x425 1461501637330902918203684832716283019655932542975 x490)) (= x221 (x180 x452)) (<= x221 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x346) (<= 0 x221) (= x288 (x180 x220)) (<= x288 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x288 0) (= (> x433 x346) x155) (<= x346 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x433 (x389 (+ x221 x288))) (= (x29 (x204 x209) (x214 1) 0) x452) (= x220 (x29 (x204 x496) (x214 1) 0)))) (and (=> x155 x275) (=> (and (not x155) (and (= x126 (x425 1461501637330902918203684832716283019655932542975 x490)) (= x382 (x29 (x204 x126) (x214 1) 0)) (<= x319 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x319) (= (x180 x382) x319) (= x114 (< x319 x141)))) (and (=> x114 x275) (=> (and (not x114) (and (<= x233 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> x233 x440) x267) (= x225 (x29 (x204 x209) (x214 1) 0)) (= x503 (x29 (x204 x264) (x214 1) 0)) (= x440 (x389 (+ x141 x233))) (<= 0 x233) (= x264 (x425 1461501637330902918203684832716283019655932542975 x490)) (= x233 (x359 x225)) (= x283 (x161 (- x319 x141))))) (and (=> x267 x275) (=> (and (and (= x5 (x31 x46)) (<= 0 x5) (= (x425 1461501637330902918203684832716283019655932542975 x490) x40) (= (x29 (x204 x40) (x214 2) 0) x132) (= x72 (> x141 x5)) (<= x5 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x46 (x29 (x204 x279) x132 0))) (not x267)) (and (=> (and (not x72) (and (= x358 (x425 1461501637330902918203684832716283019655932542975 x490)) (= x188 (x161 (- x5 x141))) (= 32 x451) (= x368 1))) x16) (=> x72 x275)))))))))))))))))))
(assert (x52 x309))
(assert (= (x234 (x204 x289)) x289))
(assert (x52 x101))
(assert (= (x234 (x204 x203)) x203))
(assert (x52 x158))
(assert (x485 (- x250 x367)))
(assert (=> (>= 10000 x48) (= (x204 x48) (x214 x48))))
(assert (x210 x129))
(assert (= 1086394137 (x234 (x214 1086394137))))
(assert (x52 x254))
(assert (x52 x473))
(assert (x52 x307))
(assert (x52 x145))
(assert (= (x234 (x214 4152920812)) 4152920812))
(assert (= x365 (x234 (x204 x365))))
(assert (x485 1000000000000000000))
(assert (x52 x427))
(assert (= (x234 (x204 x328)) x328))
(assert (x210 x371))
(assert (x52 x440))
(assert (= (x234 (x204 x160)) x160))
(assert (x52 x332))
(assert (x481 x436))
(assert (x52 x357))
(assert (= x182 (x234 (x204 x182))))
(assert (x52 x281))
(assert (x52 x22))
(assert (=> (>= 10000 x13) (= (x214 x13) (x204 x13))))
(assert (x52 x289))
(assert (x52 x424))
(assert (x210 x292))
(assert (= x33 (x234 (x204 x33))))
(assert (= (or (and (not x263) x262) x318) x93))
(assert (x210 x170))
(assert (x210 x458))
(assert (x213 x461))
(assert (x52 x68))
(assert (= x143 (and x417 (not x155))))
(assert (x52 x211))
(assert (and (=> (> 32 0) (= x436 (+ (* 32 (x53 x436 32)) (x412 x436 32)))) (x247 x436 32) (x510 x436 32) (x370 x436 32)))
(assert (x52 x405))
(assert (= (x234 (x204 x45)) x45))
(assert (= (or x513 x356) x306))
(assert (x252 x109))
(assert (x479 32))
(assert (x52 x255))
(assert (x52 x181))
(assert (x52 x99))
(assert (x52 x458))
(assert (= (x214 3265688288) (x204 3265688288)))
(assert (= x423 (or (and x235 (not x411)) x223)))
(assert (= x18 (and x325 x154)))
(assert (x210 x331))
(assert (x106 x367 (- x181 x250)))
(assert (= (=> (and (and (= (x285 x112) x122) (= (x29 (x204 x203) x187 0) x21) (= x305 (< x208 x122)) (>= x122 0) (= (x300 x21 1) x112) (<= x122 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 0 x137)) (= x187 (x29 (x204 x145) x462 0)) (= (x425 1461501637330902918203684832716283019655932542975 x336) x203) (= (x425 1461501637330902918203684832716283019655932542975 x7) x292) (= x462 (x29 (x204 x292) (x214 2) 0))) (or (and x305 (and (= (x389 (+ x430 x363)) x255) (= (x425 1461501637330902918203684832716283019655932542975 x7) x98) (= x175 (= 0 x181)) (not (< x11 x276)) (<= 0 x367) (not (= 0 x217)) (ite x175 x175 (= (x53 x159 x181) x367)) (= x420 (x29 (x204 x365) (x214 2) 0)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x238) (= (x29 (x204 x33) (x214 2) 0) x321) (= x438 (x300 x349 2)) (= (x53 x255 x217) x514) (= (x63 x438) x367) (>= x217 0) (= x240 (x29 (x204 x84) x49 0)) (= x181 (x161 (- x11 x208))) (= (x425 1461501637330902918203684832716283019655932542975 x336) x58) (= (x43 (x506 x181 x367)) x159) (= (x29 (x204 x58) x320 0) x38) (= (x29 (x204 x98) (x214 2) 0) x14) (>= x11 0) (= x73 (x300 x240 1)) (= (x285 x73) x11) (= x49 (x29 (x204 x145) x321 0)) (= x84 (x425 1461501637330902918203684832716283019655932542975 x336)) (= (x29 (x204 x454) x228 0) x349) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x217) (= x365 (x425 1461501637330902918203684832716283019655932542975 x7)) (= x217 (x298 x38)) (= (x53 x159 1000000000000000000) x363) (= x320 (x29 (x204 x145) x420 0)) (= (x425 1461501637330902918203684832716283019655932542975 x336) x454) (= x456 (x425 1461501637330902918203684832716283019655932542975 x336)) (<= x11 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x363 x409))) (<= x367 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x228 (x29 (x204 x145) x14 0)) (= x33 (x425 1461501637330902918203684832716283019655932542975 x7)))) (and (not x305) (and (>= x461 0) (not (= 0 x461)) (= (x425 1461501637330902918203684832716283019655932542975 x7) x330) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x461) (= x120 (x29 (x204 x119) x387 0)) (= x281 (x425 1461501637330902918203684832716283019655932542975 x336)) (= x461 (x298 x120)) (= (x29 (x204 x145) x323 0) x387) (= (x29 (x204 x330) (x214 2) 0) x323) (= x435 (x425 1461501637330902918203684832716283019655932542975 x7)) (= x227 (x53 x430 x461)) (= x119 (x425 1461501637330902918203684832716283019655932542975 x336)))))) x3) x444))
(assert (=> (<= x427 10000) (= (x214 x427) (x204 x427))))
(assert (=> (>= 10000 x131) (= (x214 x131) (x204 x131))))
(assert (=> (<= x289 10000) (= (x214 x289) (x204 x289))))
(assert (x52 x461))
(assert (=> (>= 10000 x330) (= (x204 x330) (x214 x330))))
(assert (=> (>= 10000 x207) (= (x214 x207) (x204 x207))))
(assert (x52 x376))
(assert (x210 x264))
(assert (=> (<= x371 10000) (= (x214 x371) (x204 x371))))
(assert (x426 x109))
(assert (x52 x476))
(assert (x52 x209))
(assert (= (and x262 x263) x15))
(assert (x52 x85))
(assert (x213 x255))
(assert (=> (>= 10000 x454) (= (x214 x454) (x204 x454))))
(assert (x52 x334))
(assert (=> (>= 10000 x355) (= (x214 x355) (x204 x355))))
(assert (= (and x494 (not x87)) x147))
(assert (= (x234 (x204 x371)) x371))
(assert (= 3839634084 (x234 (x214 3839634084))))
(assert (= (and x491 x380) x494))
(assert (= (x214 3839634084) (x204 3839634084)))
(assert (= x312 (or (and (not x232) x147) (and x326 (not x123)) (and x494 x87) (and x155 x417) (and x280 x72) (and x114 x143) (and x267 x205))))
(assert (x52 x329))
(assert (x52 x80))
(assert (x210 x33))
(assert (= (x234 (x214 3265688288)) 3265688288))
(assert (= (x234 (x300 x198 4)) (+ (x234 x198) 4)))
(assert (x52 x500))
(assert (= x236 (x234 (x204 x236))))
(assert (x106 x250 (- x6 x181)))
(assert (x52 x81))
(assert (x52 x360))
(assert (= x286 (=> (and (= (x36 x183) x71) (= (not (< 1 x257)) x464) (= x134 (x364 x71)) (< x134 4)) (and x410 x464))))
(assert (= (+ (x234 x240) 1) (x234 (x300 x240 1))))
(assert (x52 x126))
(assert (= (x234 (x204 x355)) x355))
(assert (x52 x141))
(assert (= (x204 3384965404) (x214 3384965404)))
(assert (x52 x238))
(assert (= (x204 1461501637330902918203684832716283019655932542976) (x214 1461501637330902918203684832716283019655932542976)))
(assert (x52 x173))
(assert (x479 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x52 x259))
(assert (x210 x119))
(assert (x213 x459))
(assert (x213 x217))
(assert (x52 x445))
(assert (=> (<= x40 10000) (= (x214 x40) (x204 x40))))
(assert (x210 x360))
(assert (= (x204 117300739) (x214 117300739)))
(assert (= (x234 (x214 117300739)) 117300739))
(assert (= 157198259 (x234 (x214 157198259))))
(assert (x210 x84))
(assert (x52 x40))
(check-sat)
(exit)
