(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x330 0)) (((x767 (x1210 x330) (x297 x330) (x472 Int)) (x656 (x557 x330) (x384 Int)) (x400 (x1297 Int)))))
(declare-fun x439 () x330)
(declare-fun x616 () Bool)
(declare-fun x1237 () Bool)
(declare-fun x535 () Int)
(declare-fun x1227 () Int)
(declare-fun x887 () Bool)
(declare-fun x1278 () Bool)
(declare-fun x495 () Int)
(declare-fun x542 () Bool)
(declare-fun x1229 () x330)
(declare-fun x132 () Int)
(declare-fun x803 () Bool)
(declare-fun x897 () Bool)
(declare-fun x158 () Int)
(declare-fun x670 () Int)
(declare-fun x747 () Int)
(declare-fun x977 () Int)
(declare-fun x1223 () x330)
(declare-fun x1122 () x330)
(declare-fun x1300 () Bool)
(declare-fun x726 () Bool)
(declare-fun x1286 () Int)
(declare-fun x1159 () Bool)
(declare-fun x1181 () Int)
(declare-fun x1125 () x330)
(declare-fun x253 () Bool)
(declare-fun x1251 () x330)
(declare-fun x178 () Bool)
(declare-fun x731 () x330)
(declare-fun x1070 () Bool)
(declare-fun x1126 () Int)
(declare-fun x722 () Int)
(declare-fun x10 () Int)
(declare-fun x958 () Int)
(declare-fun x267 () x330)
(declare-fun x749 () Int)
(declare-fun x911 () Int)
(declare-fun x1082 () Bool)
(declare-fun x533 (Int Int) Int)
(declare-fun x1064 () x330)
(declare-fun x35 () Bool)
(declare-fun x1239 () x330)
(declare-fun x1054 () Int)
(declare-fun x860 () Bool)
(declare-fun x1187 () Int)
(declare-fun x240 () Int)
(declare-fun x211 () Bool)
(declare-fun x1265 (Int) Int)
(declare-fun x718 () Bool)
(declare-fun x736 () Bool)
(declare-fun x701 () Int)
(declare-fun x676 () Int)
(declare-fun x24 () Bool)
(declare-fun x1268 () Int)
(declare-fun x908 (Int Int) Int)
(declare-fun x548 () Bool)
(declare-fun x231 () Int)
(declare-fun x678 () Bool)
(declare-fun x478 () Bool)
(declare-fun x217 () Bool)
(declare-fun x354 () Bool)
(declare-fun x1128 () Bool)
(declare-fun x360 () Bool)
(declare-fun x853 () Bool)
(declare-fun x58 () Bool)
(declare-fun x65 () Int)
(declare-fun x1387 () Bool)
(declare-fun x826 () Bool)
(declare-fun x1006 () Bool)
(declare-fun x746 () Bool)
(declare-fun x212 () Int)
(declare-fun x946 () Bool)
(declare-fun x895 () Bool)
(declare-fun x296 () Bool)
(declare-fun x1156 () Bool)
(declare-fun x985 () Bool)
(declare-fun x1091 () Bool)
(declare-fun x1358 () Int)
(declare-fun x37 () Bool)
(declare-fun x4 () x330)
(declare-fun x427 () Bool)
(declare-fun x365 () Bool)
(declare-fun x276 () Bool)
(declare-fun x715 () Bool)
(declare-fun x445 () Int)
(declare-fun x657 () Int)
(declare-fun x335 () Int)
(declare-fun x1381 () Bool)
(declare-fun x1324 () x330)
(declare-fun x544 () Int)
(declare-fun x347 () x330)
(declare-fun x271 () Bool)
(declare-fun x952 () Int)
(declare-fun x461 () Bool)
(declare-fun x498 () Int)
(declare-fun x1220 () Int)
(declare-fun x725 () Bool)
(declare-fun x465 (Int Int) Int)
(declare-fun x1274 () Int)
(declare-fun x429 () Int)
(declare-fun x795 () Int)
(declare-fun x444 () x330)
(declare-fun x619 () Int)
(declare-fun x87 () Int)
(declare-fun x869 () Int)
(declare-fun x539 () Bool)
(declare-fun x350 () Bool)
(declare-fun x655 () Int)
(declare-fun x393 () Int)
(declare-fun x618 () Bool)
(declare-fun x17 () Bool)
(declare-fun x856 () Int)
(declare-fun x1077 () x330)
(declare-fun x1267 () Int)
(declare-fun x1158 () Bool)
(declare-fun x991 () Int)
(declare-fun x402 () x330)
(declare-fun x55 () Bool)
(declare-fun x601 () x330)
(declare-fun x528 () Int)
(declare-fun x1368 () Int)
(declare-fun x1318 () Int)
(declare-fun x901 () Int)
(declare-fun x784 () x330)
(declare-fun x192 () Int)
(declare-fun x367 () Int)
(declare-fun x606 () x330)
(declare-fun x626 () Int)
(declare-fun x624 () Int)
(declare-fun x1370 () Bool)
(declare-fun x460 () x330)
(declare-fun x282 () Int)
(declare-fun x1371 () Bool)
(declare-fun x1144 () x330)
(declare-fun x1213 () Int)
(declare-fun x739 () Bool)
(declare-fun x881 () x330)
(declare-fun x642 () Bool)
(declare-fun x595 () Int)
(declare-fun x652 () Int)
(declare-fun x837 () Int)
(declare-fun x176 () Int)
(declare-fun x298 () Bool)
(declare-fun x1042 () Bool)
(declare-fun x1208 () Int)
(declare-fun x433 () Bool)
(declare-fun x167 () x330)
(declare-fun x521 () Int)
(declare-fun x1338 () Bool)
(declare-fun x1276 () Int)
(declare-fun x19 () Int)
(declare-fun x953 () Int)
(declare-fun x290 () Bool)
(declare-fun x1048 () Int)
(declare-fun x1143 () x330)
(declare-fun x1264 () Int)
(declare-fun x1211 () x330)
(declare-fun x1320 () Bool)
(declare-fun x511 () Bool)
(declare-fun x441 () x330)
(declare-fun x581 () Int)
(declare-fun x363 () Int)
(declare-fun x1002 () Int)
(declare-fun x1294 () Int)
(declare-fun x1147 () Int)
(declare-fun x541 () Int)
(declare-fun x1099 () Int)
(declare-fun x1021 () Int)
(declare-fun x435 () Int)
(declare-fun x1323 () Int)
(declare-fun x582 () Bool)
(declare-fun x1359 () Bool)
(declare-fun x998 () Int)
(declare-fun x565 () Bool)
(declare-fun x108 () Bool)
(declare-fun x341 () Int)
(declare-fun x500 () Int)
(declare-fun x1258 () Int)
(declare-fun x328 () Bool)
(declare-fun x1178 () Bool)
(declare-fun x1384 () Int)
(declare-fun x735 () Int)
(declare-fun x41 () Bool)
(declare-fun x1112 () Int)
(declare-fun x1348 () Bool)
(declare-fun x419 () Int)
(declare-fun x237 () Int)
(declare-fun x436 () Bool)
(declare-fun x1068 () Bool)
(declare-fun x177 () Int)
(declare-fun x1216 () Bool)
(declare-fun x172 () Bool)
(declare-fun x1305 () Bool)
(declare-fun x1067 () Int)
(declare-fun x383 () Int)
(declare-fun x765 () Bool)
(declare-fun x1084 () Int)
(declare-fun x60 () Int)
(declare-fun x947 () Bool)
(declare-fun x844 () Int)
(declare-fun x250 () Bool)
(declare-fun x768 () Int)
(declare-fun x1015 () x330)
(declare-fun x910 () Int)
(declare-fun x425 () Bool)
(declare-fun x848 () Bool)
(declare-fun x355 () Bool)
(declare-fun x482 () Bool)
(declare-fun x635 () Int)
(declare-fun x805 () Bool)
(declare-fun x1075 () Int)
(declare-fun x543 () Bool)
(declare-fun x470 () Int)
(declare-fun x1041 () x330)
(declare-fun x551 () Bool)
(declare-fun x743 () Int)
(declare-fun x818 () Int)
(declare-fun x1282 () Int)
(declare-fun x961 () Int)
(declare-fun x1209 () Bool)
(declare-fun x673 (Int) Int)
(declare-fun x59 () Bool)
(declare-fun x1321 () Int)
(declare-fun x512 () Bool)
(declare-fun x1080 () Bool)
(declare-fun x1290 () Bool)
(declare-fun x937 () Bool)
(declare-fun x790 () Int)
(declare-fun x1034 () x330)
(declare-fun x896 () x330)
(declare-fun x981 () Int)
(declare-fun x1063 () x330)
(declare-fun x239 () Int)
(declare-fun x85 () Int)
(declare-fun x879 () Bool)
(declare-fun x218 () Int)
(declare-fun x617 () Int)
(declare-fun x504 () Int)
(declare-fun x829 () Int)
(declare-fun x628 () Int)
(declare-fun x815 () Bool)
(declare-fun x449 () Int)
(declare-fun x880 () Int)
(declare-fun x723 () Bool)
(declare-fun x973 () Int)
(declare-fun x25 () Int)
(declare-fun x972 () Int)
(declare-fun x409 () Bool)
(declare-fun x269 () Bool)
(declare-fun x235 () Int)
(declare-fun x75 () Bool)
(declare-fun x1078 () Int)
(declare-fun x1047 () Bool)
(declare-fun x941 () Bool)
(declare-fun x590 () Int)
(declare-fun x1306 () Int)
(declare-fun x481 () Int)
(declare-fun x346 () Int)
(declare-fun x130 () Bool)
(declare-fun x587 () x330)
(declare-fun x703 () Int)
(declare-fun x603 () Int)
(declare-fun x1005 () x330)
(declare-fun x830 () x330)
(declare-fun x531 () x330)
(declare-fun x161 () x330)
(declare-fun x308 () Bool)
(declare-fun x57 () Int)
(declare-fun x127 () Bool)
(declare-fun x709 () Int)
(declare-fun x114 () Bool)
(declare-fun x1342 () Bool)
(declare-fun x1109 () Bool)
(declare-fun x1247 () Bool)
(declare-fun x288 () Int)
(declare-fun x721 () Bool)
(declare-fun x534 () x330)
(declare-fun x199 () Int)
(declare-fun x36 () Int)
(declare-fun x1344 () Int)
(declare-fun x1094 () Int)
(declare-fun x26 () Bool)
(declare-fun x198 () Int)
(declare-fun x31 () Int)
(declare-fun x307 () Int)
(declare-fun x123 () Int)
(declare-fun x1027 () Bool)
(declare-fun x451 () Bool)
(declare-fun x202 () Int)
(declare-fun x597 () Int)
(declare-fun x861 () Bool)
(declare-fun x807 () Bool)
(declare-fun x27 () Bool)
(declare-fun x852 () Bool)
(declare-fun x338 () Bool)
(declare-fun x787 () Int)
(declare-fun x1185 () Int)
(declare-fun x275 () Int)
(declare-fun x1327 () Int)
(declare-fun x525 () Bool)
(declare-fun x101 () Int)
(declare-fun x817 () Bool)
(declare-fun x146 () Int)
(declare-fun x659 () Bool)
(declare-fun x976 () Int)
(declare-fun x799 () Bool)
(declare-fun x843 () Int)
(declare-fun x1303 () Int)
(declare-fun x672 () Int)
(declare-fun x943 () Bool)
(declare-fun x1146 () Int)
(declare-fun x394 () Int)
(declare-fun x72 () x330)
(declare-fun x858 () Int)
(declare-fun x1114 () Int)
(declare-fun x411 () Int)
(declare-fun x489 () x330)
(declare-fun x329 () Int)
(declare-fun x156 () Bool)
(declare-fun x181 () Bool)
(declare-fun x399 () Int)
(declare-fun x67 () Int)
(declare-fun x1151 () Bool)
(declare-fun x732 () Bool)
(declare-fun x1160 () Int)
(declare-fun x1218 () Int)
(declare-fun x644 () Bool)
(declare-fun x809 () x330)
(declare-fun x962 () Int)
(declare-fun x44 () Int)
(declare-fun x396 () Int)
(declare-fun x780 () Bool)
(declare-fun x251 () Bool)
(declare-fun x122 () x330)
(declare-fun x210 () Bool)
(declare-fun x1253 () Bool)
(declare-fun x1040 () Int)
(declare-fun x305 () Int)
(declare-fun x873 () Int)
(declare-fun x757 () Bool)
(declare-fun x604 () Int)
(declare-fun x802 () Bool)
(declare-fun x64 () Int)
(declare-fun x966 () Int)
(declare-fun x287 () Int)
(declare-fun x111 () Bool)
(declare-fun x149 () Int)
(declare-fun x752 () Int)
(declare-fun x716 () Int)
(declare-fun x301 (Int) Int)
(declare-fun x899 () Int)
(declare-fun x304 () Int)
(declare-fun x1287 () Bool)
(declare-fun x42 () Int)
(declare-fun x1219 () Bool)
(declare-fun x667 () Int)
(declare-fun x480 () Int)
(declare-fun x804 () Bool)
(declare-fun x349 () Int)
(declare-fun x474 () Bool)
(declare-fun x658 () x330)
(declare-fun x1093 () Int)
(declare-fun x1024 () Int)
(declare-fun x1111 () x330)
(declare-fun x822 () Int)
(declare-fun x220 () Int)
(declare-fun x638 () Int)
(declare-fun x366 () Int)
(declare-fun x1346 () Bool)
(declare-fun x741 () x330)
(declare-fun x1260 () Int)
(declare-fun x1045 () Int)
(declare-fun x479 () Int)
(declare-fun x33 () Int)
(declare-fun x1317 () Bool)
(declare-fun x748 () Int)
(declare-fun x1004 () Int)
(declare-fun x391 () Int)
(declare-fun x118 () Int)
(declare-fun x469 () Int)
(declare-fun x1337 (Int) Int)
(declare-fun x214 () Int)
(declare-fun x797 () Bool)
(declare-fun x706 () Int)
(declare-fun x700 () x330)
(declare-fun x187 () Int)
(declare-fun x647 () Bool)
(declare-fun x1361 () Int)
(declare-fun x686 () Bool)
(declare-fun x556 () Int)
(declare-fun x1225 () x330)
(declare-fun x1221 () Int)
(declare-fun x458 () Int)
(declare-fun x96 () Bool)
(declare-fun x1007 () Bool)
(declare-fun x81 () Bool)
(declare-fun x819 () Int)
(declare-fun x501 () Bool)
(declare-fun x734 () Bool)
(declare-fun x677 () x330)
(declare-fun x348 (Int) Int)
(declare-fun x372 () Int)
(declare-fun x882 () Int)
(declare-fun x410 () Int)
(declare-fun x160 () Int)
(declare-fun x1188 () Bool)
(declare-fun x124 () Int)
(declare-fun x1315 () x330)
(declare-fun x194 () Int)
(declare-fun x1129 () Bool)
(declare-fun x792 () Bool)
(declare-fun x524 () Bool)
(declare-fun x380 () Int)
(declare-fun x140 () Int)
(declare-fun x164 () x330)
(declare-fun x1014 () Bool)
(declare-fun x117 () Bool)
(declare-fun x21 () Int)
(declare-fun x1252 () Int)
(declare-fun x487 () Bool)
(declare-fun x302 () Bool)
(declare-fun x949 () Bool)
(declare-fun x540 (x330) Int)
(declare-fun x995 () Int)
(declare-fun x589 () Int)
(declare-fun x967 () x330)
(declare-fun x90 () Bool)
(declare-fun x1343 () Bool)
(declare-fun x318 () Int)
(declare-fun x107 () Int)
(declare-fun x808 () Int)
(declare-fun x555 () Int)
(declare-fun x621 (Int) Int)
(declare-fun x283 () Bool)
(declare-fun x508 () Bool)
(declare-fun x959 (Int) Int)
(declare-fun x1115 () Bool)
(declare-fun x683 () x330)
(declare-fun x900 () Int)
(declare-fun x462 () Int)
(declare-fun x180 () Bool)
(declare-fun x174 () Int)
(declare-fun x970 () Int)
(declare-fun x477 () Bool)
(declare-fun x969 () Bool)
(declare-fun x1383 () Int)
(declare-fun x116 () Int)
(declare-fun x692 () Int)
(declare-fun x1018 () x330)
(declare-fun x545 () Bool)
(declare-fun x864 () Int)
(declare-fun x1304 () Bool)
(declare-fun x775 () Int)
(declare-fun x464 () Bool)
(declare-fun x1307 () Int)
(declare-fun x424 () Int)
(declare-fun x321 () Int)
(declare-fun x527 () Int)
(declare-fun x968 () Bool)
(declare-fun x682 () Bool)
(declare-fun x245 () Int)
(declare-fun x654 () Int)
(declare-fun x139 () Int)
(declare-fun x165 () Bool)
(declare-fun x1105 () x330)
(declare-fun x142 () Int)
(declare-fun x854 () Int)
(declare-fun x244 () Int)
(declare-fun x948 () Bool)
(declare-fun x772 () Int)
(declare-fun x720 () Int)
(declare-fun x577 () Int)
(declare-fun x1280 () Int)
(declare-fun x1312 () x330)
(declare-fun x1180 () Int)
(declare-fun x375 () Bool)
(declare-fun x867 () Int)
(declare-fun x143 () Bool)
(declare-fun x466 () Bool)
(declare-fun x536 () Int)
(declare-fun x454 () Int)
(declare-fun x1328 () Int)
(declare-fun x327 () Int)
(declare-fun x1127 () Bool)
(declare-fun x145 () Int)
(declare-fun x546 () Int)
(declare-fun x1244 () Int)
(declare-fun x1123 () x330)
(declare-fun x343 () Int)
(declare-fun x1195 () Int)
(declare-fun x1164 () x330)
(declare-fun x80 () Bool)
(declare-fun x738 () Bool)
(declare-fun x971 () Int)
(declare-fun x888 () Int)
(declare-fun x1089 () Int)
(declare-fun x1016 () Int)
(declare-fun x519 () Int)
(declare-fun x1191 () x330)
(declare-fun x147 () Bool)
(declare-fun x875 () Bool)
(declare-fun x793 () Int)
(declare-fun x1299 () Bool)
(declare-fun x1132 () Int)
(declare-fun x685 () Int)
(declare-fun x273 () Bool)
(declare-fun x917 () Int)
(declare-fun x928 () Int)
(declare-fun x1254 () Int)
(declare-fun x992 () Int)
(declare-fun x397 () Bool)
(declare-fun x650 () Int)
(declare-fun x600 () Bool)
(declare-fun x509 () Int)
(declare-fun x381 () Bool)
(declare-fun x205 () Int)
(declare-fun x1380 () x330)
(declare-fun x588 () Int)
(declare-fun x919 () Int)
(declare-fun x476 () Bool)
(declare-fun x933 () Bool)
(declare-fun x711 () Int)
(declare-fun x281 () Int)
(declare-fun x342 () Int)
(declare-fun x574 () Int)
(declare-fun x925 () Bool)
(declare-fun x751 () Bool)
(declare-fun x50 () Bool)
(declare-fun x484 () Bool)
(declare-fun x98 () x330)
(declare-fun x585 () Int)
(declare-fun x32 () Int)
(declare-fun x753 () Int)
(declare-fun x215 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x1214 (Int) Int)
(declare-fun x131 () Int)
(declare-fun x1026 () Bool)
(declare-fun x43 () x330)
(declare-fun x1141 () Bool)
(declare-fun x502 () Int)
(declare-fun x760 () Int)
(declare-fun x1086 () x330)
(declare-fun x538 () Int)
(declare-fun x823 () Int)
(declare-fun x62 () Int)
(declare-fun x1228 () Bool)
(declare-fun x758 () Int)
(declare-fun x1030 () Int)
(declare-fun x154 () Int)
(declare-fun x593 () Bool)
(declare-fun x1166 () x330)
(declare-fun x694 () Bool)
(declare-fun x783 () Bool)
(declare-fun x195 () Int)
(declare-fun x66 () Int)
(declare-fun x572 () Int)
(declare-fun x274 () Bool)
(declare-fun x378 () Int)
(declare-fun x186 () Int)
(declare-fun x559 () Int)
(declare-fun x463 () Int)
(declare-fun x1356 () x330)
(declare-fun x931 () x330)
(declare-fun x29 () Int)
(declare-fun x554 () Int)
(declare-fun x374 () Int)
(declare-fun x932 () Int)
(declare-fun x443 () x330)
(declare-fun x1230 () Bool)
(declare-fun x1100 () x330)
(declare-fun x442 () x330)
(declare-fun x857 () Bool)
(declare-fun x938 () Bool)
(declare-fun x362 () Bool)
(declare-fun x431 () Int)
(declare-fun x996 () Bool)
(declare-fun x201 () Bool)
(declare-fun x835 () Bool)
(declare-fun x236 () Int)
(declare-fun x1172 () Int)
(declare-fun x863 () Bool)
(declare-fun x1161 () Bool)
(declare-fun x1196 (Int) Int)
(declare-fun x664 () Int)
(declare-fun x1275 () Int)
(declare-fun x1108 () Int)
(declare-fun x1354 () Bool)
(declare-fun x1313 () Int)
(declare-fun x1277 () Int)
(declare-fun x740 () Int)
(declare-fun x284 () Int)
(declare-fun x1263 () Int)
(declare-fun x46 () Int)
(declare-fun x1102 () Int)
(declare-fun x184 () Int)
(declare-fun x866 () Int)
(declare-fun x520 () Bool)
(declare-fun x51 () Int)
(declare-fun x1215 () Bool)
(declare-fun x299 () Int)
(declare-fun x1335 () Bool)
(declare-fun x717 () Bool)
(declare-fun x515 () Bool)
(declare-fun x1 () Int)
(declare-fun x1314 () Int)
(declare-fun x1071 () Int)
(declare-fun x1378 () Int)
(declare-fun x681 () Int)
(declare-fun x1339 () Int)
(declare-fun x877 () x330)
(declare-fun x1017 () x330)
(declare-fun x639 () Int)
(declare-fun x636 () Bool)
(declare-fun x1243 () Int)
(declare-fun x417 () Bool)
(declare-fun x252 () Int)
(declare-fun x945 () Bool)
(declare-fun x665 () Bool)
(declare-fun x1269 () Bool)
(declare-fun x1155 () Int)
(declare-fun x68 () Bool)
(declare-fun x779 () Bool)
(declare-fun x1385 () Int)
(declare-fun x40 () x330)
(declare-fun x696 () Bool)
(declare-fun x666 () Bool)
(declare-fun x345 () Bool)
(declare-fun x414 () Bool)
(declare-fun x1197 () Bool)
(declare-fun x615 () Bool)
(declare-fun x189 () Bool)
(declare-fun x984 () Int)
(declare-fun x1033 () Bool)
(declare-fun x1333 () Bool)
(declare-fun x1049 () Bool)
(declare-fun x688 () x330)
(declare-fun x351 () Bool)
(declare-fun x898 () x330)
(declare-fun x317 () Bool)
(declare-fun x255 () Bool)
(declare-fun x151 () Int)
(declare-fun x671 () Bool)
(declare-fun x121 () x330)
(declare-fun x1248 () Int)
(declare-fun x631 () Int)
(declare-fun x714 () Bool)
(declare-fun x872 () Int)
(declare-fun x268 () Bool)
(declare-fun x653 () Bool)
(declare-fun x159 () Bool)
(declare-fun x364 () Bool)
(declare-fun x426 () Bool)
(declare-fun x280 () Int)
(declare-fun x39 () Bool)
(declare-fun x69 () Int)
(declare-fun x1308 () Bool)
(declare-fun x668 () Int)
(declare-fun x377 () Bool)
(declare-fun x766 () Int)
(declare-fun x920 () Int)
(declare-fun x865 () Bool)
(declare-fun x86 () Bool)
(declare-fun x265 () Bool)
(declare-fun x532 () Int)
(declare-fun x115 () Int)
(declare-fun x547 () Int)
(declare-fun x1073 () Int)
(declare-fun x1074 () x330)
(declare-fun x333 () Bool)
(declare-fun x1136 () Bool)
(declare-fun x262 () Bool)
(declare-fun x5 (Int) Int)
(declare-fun x801 () Bool)
(declare-fun x1352 () x330)
(declare-fun x641 () Bool)
(declare-fun x851 () x330)
(declare-fun x979 () Int)
(declare-fun x1319 () x330)
(declare-fun x592 () Int)
(declare-fun x334 () Int)
(declare-fun x690 () Int)
(declare-fun x1081 () x330)
(declare-fun x369 () Bool)
(declare-fun x405 () Bool)
(declare-fun x356 () Bool)
(declare-fun x446 () Int)
(declare-fun x1039 () Int)
(declare-fun x695 () Int)
(declare-fun x558 () Int)
(declare-fun x1050 () x330)
(declare-fun x1028 () Int)
(declare-fun x1367 () Bool)
(declare-fun x352 () Int)
(declare-fun x88 () Bool)
(declare-fun x575 (Int) Int)
(declare-fun x337 () Int)
(declare-fun x862 (Int) Int)
(declare-fun x1036 () Int)
(declare-fun x1055 () x330)
(declare-fun x1259 () Int)
(declare-fun x756 () Bool)
(declare-fun x1284 () Int)
(declare-fun x183 () Bool)
(declare-fun x923 () Int)
(declare-fun x30 () Bool)
(declare-fun x1149 () Bool)
(declare-fun x924 () Int)
(declare-fun x679 () Int)
(declare-fun x259 () Int)
(declare-fun x368 () Int)
(declare-fun x812 () Bool)
(declare-fun x1373 () Bool)
(declare-fun x1169 () Int)
(declare-fun x468 () Int)
(declare-fun x155 () Int)
(declare-fun x45 () Int)
(declare-fun x1351 () Int)
(declare-fun x594 () Int)
(declare-fun x1053 () Bool)
(declare-fun x786 () Bool)
(declare-fun x447 () Bool)
(declare-fun x294 () Int)
(declare-fun x459 () Int)
(declare-fun x885 () Int)
(declare-fun x964 () Int)
(declare-fun x980 () Int)
(declare-fun x418 () Bool)
(declare-fun x310 () Bool)
(declare-fun x203 () Int)
(declare-fun x100 () Int)
(declare-fun x323 () Int)
(declare-fun x605 () Int)
(declare-fun x137 () Int)
(declare-fun x1249 () Int)
(declare-fun x225 () Int)
(declare-fun x71 () Bool)
(declare-fun x1329 () Bool)
(declare-fun x651 () Bool)
(declare-fun x729 () Int)
(declare-fun x92 () Int)
(declare-fun x416 () Int)
(declare-fun x1020 () Bool)
(declare-fun x750 () x330)
(declare-fun x960 () x330)
(declare-fun x1009 () Int)
(declare-fun x438 () Bool)
(declare-fun x708 () Bool)
(declare-fun x56 () Bool)
(declare-fun x1377 () Int)
(declare-fun x319 () Bool)
(declare-fun x105 () Bool)
(declare-fun x1010 () Bool)
(declare-fun x103 () Bool)
(declare-fun x1037 () Bool)
(declare-fun x485 () x330)
(declare-fun x702 () Int)
(declare-fun x1025 () Bool)
(declare-fun x1012 () Int)
(declare-fun x745 () x330)
(declare-fun x825 (Int) Int)
(declare-fun x1376 () Bool)
(declare-fun x289 () Bool)
(declare-fun x254 () Bool)
(declare-fun x781 () Bool)
(declare-fun x434 () Bool)
(declare-fun x553 () Int)
(declare-fun x430 () Bool)
(declare-fun x894 () Bool)
(declare-fun x193 () Bool)
(declare-fun x1302 () Int)
(declare-fun x200 () Bool)
(declare-fun x530 () Int)
(declare-fun x120 () Int)
(declare-fun x569 () Bool)
(declare-fun x761 () Bool)
(declare-fun x38 () x330)
(declare-fun x886 () Bool)
(declare-fun x1139 () Int)
(declare-fun x607 () Int)
(declare-fun x422 () Bool)
(declare-fun x507 () Int)
(declare-fun x113 () x330)
(declare-fun x733 () Bool)
(declare-fun x1173 () Int)
(declare-fun x3 () Int)
(declare-fun x598 () Bool)
(declare-fun x339 () Bool)
(declare-fun x776 () Int)
(declare-fun x1212 () Int)
(declare-fun x833 () Int)
(declare-fun x475 () Bool)
(declare-fun x1000 () Bool)
(declare-fun x93 () x330)
(declare-fun x234 () Bool)
(declare-fun x1261 () x330)
(declare-fun x610 (Int) Int)
(declare-fun x614 () Int)
(declare-fun x1235 () Bool)
(declare-fun x291 (Int) Int)
(declare-fun x207 () Bool)
(declare-fun x912 () Bool)
(declare-fun x1193 (x330) Int)
(declare-fun x1107 () Int)
(declare-fun x778 () Int)
(declare-fun x824 () Int)
(declare-fun x640 () Int)
(declare-fun x510 () Int)
(declare-fun x798 () Int)
(declare-fun x889 () Int)
(declare-fun x1179 () Int)
(declare-fun x1233 () x330)
(declare-fun x420 () Int)
(declare-fun x663 () Int)
(declare-fun x358 () Int)
(declare-fun x788 () Bool)
(declare-fun x1362 () x330)
(declare-fun x611 () Int)
(declare-fun x956 () x330)
(declare-fun x1279 () Bool)
(declare-fun x1322 () Int)
(declare-fun x173 () Int)
(declare-fun x421 () Int)
(declare-fun x1296 () Bool)
(declare-fun x279 () Int)
(declare-fun x126 () Int)
(declare-fun x1374 () Bool)
(declare-fun x987 () Bool)
(declare-fun x1110 () Int)
(declare-fun x1217 () Int)
(declare-fun x633 () Bool)
(declare-fun x285 () Bool)
(declare-fun x1366 () Bool)
(declare-fun x182 () Int)
(declare-fun x261 () Int)
(declare-fun x1177 () Int)
(declare-fun x893 () Int)
(declare-fun x552 () x330)
(declare-fun x586 () Int)
(declare-fun x1069 () Bool)
(declare-fun x168 () Bool)
(declare-fun x134 () Bool)
(declare-fun x1176 () x330)
(declare-fun x403 () Int)
(declare-fun x191 () Bool)
(declare-fun x564 () Bool)
(declare-fun x1118 () Int)
(declare-fun x975 () Bool)
(declare-fun x392 () Int)
(declare-fun x238 () x330)
(declare-fun x1121 () Int)
(declare-fun x398 () Int)
(declare-fun x687 () Int)
(declare-fun x623 () Int)
(declare-fun x1301 () Bool)
(declare-fun x691 () x330)
(declare-fun x1364 () Bool)
(declare-fun x1134 () x330)
(declare-fun x1226 () Int)
(declare-fun x230 () Bool)
(declare-fun x1043 () Int)
(declare-fun x846 () Bool)
(declare-fun x144 () Bool)
(declare-fun x1357 () Int)
(declare-fun x1113 () Int)
(declare-fun x1198 () x330)
(declare-fun x1148 () Int)
(declare-fun x1349 () Int)
(declare-fun x613 () Bool)
(declare-fun x286 () Bool)
(declare-fun x782 () Int)
(declare-fun x175 () Bool)
(declare-fun x1013 () Int)
(declare-fun x1182 () Int)
(declare-fun x566 () Bool)
(declare-fun x1065 () x330)
(declare-fun x99 () Bool)
(declare-fun x1098 () Int)
(declare-fun x312 () Int)
(declare-fun x188 () Bool)
(declare-fun x412 () Int)
(declare-fun x974 () Bool)
(declare-fun x637 () Bool)
(declare-fun x1207 (Int) Int)
(declare-fun x927 () Int)
(declare-fun x1205 () Int)
(declare-fun x95 () Int)
(declare-fun x1363 () Int)
(declare-fun x902 () Bool)
(declare-fun x222 () Int)
(declare-fun x344 () Bool)
(declare-fun x196 () x330)
(declare-fun x106 () x330)
(declare-fun x1242 () Bool)
(declare-fun x1293 () Int)
(declare-fun x336 () Int)
(declare-fun x1353 () Int)
(declare-fun x890 () Int)
(declare-fun x871 () Int)
(declare-fun x91 () Int)
(declare-fun x1059 () Int)
(declare-fun x506 () Bool)
(declare-fun x483 () Int)
(declare-fun x390 () x330)
(declare-fun x197 () Bool)
(declare-fun x11 () x330)
(declare-fun x300 () Int)
(declare-fun x272 (Int) Int)
(declare-fun x1145 () x330)
(declare-fun x916 () Int)
(declare-fun x97 () x330)
(declare-fun x249 () Int)
(declare-fun x827 () Bool)
(declare-fun x859 () Bool)
(declare-fun x150 () Int)
(declare-fun x373 () Int)
(declare-fun x129 () Bool)
(declare-fun x6 () x330)
(declare-fun x660 () Int)
(declare-fun x828 () Int)
(declare-fun x260 () Bool)
(declare-fun x1273 () Int)
(declare-fun x277 () Int)
(declare-fun x1271 () x330)
(declare-fun x939 () Int)
(declare-fun x1350 () Bool)
(declare-fun x163 () Bool)
(declare-fun x1062 () Bool)
(declare-fun x580 () Int)
(declare-fun x270 () Int)
(declare-fun x138 () Int)
(declare-fun x1140 () x330)
(declare-fun x1202 () Int)
(declare-fun x1142 () Int)
(declare-fun x537 () Bool)
(declare-fun x1023 () Int)
(declare-fun x573 () Int)
(declare-fun x849 () Int)
(declare-fun x847 () Int)
(declare-fun x379 () Int)
(declare-fun x8 () Int)
(declare-fun x110 () Int)
(declare-fun x432 () Int)
(declare-fun x936 () Int)
(declare-fun x965 () Int)
(declare-fun x1061 () Int)
(declare-fun x560 () Int)
(declare-fun x359 () Bool)
(declare-fun x1060 () Bool)
(declare-fun x1029 () Bool)
(declare-fun x915 () Int)
(declare-fun x675 () x330)
(declare-fun x993 () Int)
(declare-fun x1170 () Bool)
(declare-fun x404 () Int)
(declare-fun x963 () Bool)
(declare-fun x1165 () Bool)
(declare-fun x1330 () Bool)
(declare-fun x157 () Int)
(declare-fun x48 () Bool)
(declare-fun x1386 () Int)
(declare-fun x1157 () Bool)
(declare-fun x698 () Int)
(declare-fun x777 () x330)
(declare-fun x513 () Bool)
(declare-fun x940 () Bool)
(declare-fun x957 () Int)
(declare-fun x930 () Int)
(declare-fun x1272 () Bool)
(declare-fun x883 () Bool)
(declare-fun x1236 () Int)
(declare-fun x836 () x330)
(declare-fun x14 () Int)
(declare-fun x811 () x330)
(declare-fun x982 () Int)
(declare-fun x125 () x330)
(declare-fun x54 () Int)
(declare-fun x141 () Int)
(declare-fun x13 () x330)
(declare-fun x437 () Int)
(declare-fun x770 () Int)
(declare-fun x7 (Int) Int)
(declare-fun x608 () Bool)
(declare-fun x1090 () Int)
(declare-fun x1096 () Int)
(declare-fun x629 () Int)
(declare-fun x841 () Int)
(declare-fun x332 () Bool)
(declare-fun x1051 () Int)
(declare-fun x1106 () Bool)
(declare-fun x1001 () Int)
(declare-fun x1189 () Int)
(declare-fun x1379 (Int) Int)
(declare-fun x22 () Bool)
(declare-fun x630 () Bool)
(declare-fun x258 () Bool)
(declare-fun x387 () Int)
(declare-fun x208 (x330) Int)
(declare-fun x625 () Int)
(declare-fun x457 () Bool)
(declare-fun x1183 () Bool)
(declare-fun x796 () x330)
(declare-fun x84 () x330)
(declare-fun x1116 () Int)
(declare-fun x353 () Bool)
(declare-fun x570 (x330) Int)
(declare-fun x303 () Int)
(declare-fun x309 () Int)
(declare-fun x579 () Int)
(declare-fun x119 () Bool)
(declare-fun x496 () Bool)
(declare-fun x20 () Int)
(declare-fun x914 () Int)
(declare-fun x376 () Bool)
(declare-fun x1131 () Int)
(declare-fun x661 () Int)
(declare-fun x1204 () Int)
(declare-fun x1234 () x330)
(declare-fun x549 () Bool)
(declare-fun x724 () Int)
(declare-fun x762 () Int)
(declare-fun x448 () Int)
(declare-fun x526 () Bool)
(declare-fun x1104 () Bool)
(declare-fun x978 () Bool)
(declare-fun x9 () Int)
(declare-fun x1083 () Bool)
(declare-fun x1092 () Bool)
(declare-fun x794 () Int)
(declare-fun x493 () Bool)
(declare-fun x179 () Bool)
(declare-fun x456 () Int)
(declare-fun x1072 () Int)
(declare-fun x1316 () Bool)
(declare-fun x331 () Int)
(declare-fun x162 () Bool)
(declare-fun x693 () Int)
(declare-fun x278 () x330)
(declare-fun x34 () Int)
(declare-fun x602 () Int)
(declare-fun x1200 () Int)
(declare-fun x1310 () Int)
(declare-fun x813 () Int)
(declare-fun x1334 () Int)
(declare-fun x153 () Bool)
(declare-fun x516 () Int)
(declare-fun x609 () Int)
(declare-fun x233 () Int)
(declare-fun x499 () x330)
(declare-fun x1046 () Bool)
(declare-fun x994 (Int Int) Int)
(declare-fun x1288 () Int)
(declare-fun x942 () Int)
(declare-fun x568 () x330)
(declare-fun x63 () Bool)
(declare-fun x680 () x330)
(declare-fun x128 () x330)
(declare-fun x148 () Int)
(declare-fun x649 () Int)
(declare-fun x413 () Int)
(declare-fun x599 () Int)
(declare-fun x591 () Bool)
(declare-fun x18 () Int)
(declare-fun x382 () Int)
(declare-fun x1135 () x330)
(declare-fun x79 () Int)
(declare-fun x471 () Bool)
(declare-fun x699 () Bool)
(declare-fun x204 () Bool)
(declare-fun x774 () Bool)
(declare-fun x503 () Int)
(declare-fun x16 () Int)
(declare-fun x634 () Int)
(declare-fun x999 () Int)
(declare-fun x648 () Bool)
(declare-fun x209 () Bool)
(declare-fun x997 () Int)
(declare-fun x907 () Int)
(declare-fun x1250 () Bool)
(declare-fun x440 () Int)
(declare-fun x810 () x330)
(declare-fun x1120 () Bool)
(declare-fun x295 () Bool)
(declare-fun x646 () Int)
(declare-fun x1153 () Int)
(declare-fun x256 () Int)
(declare-fun x170 () Bool)
(declare-fun x216 () x330)
(declare-fun x842 () Int)
(declare-fun x855 () Int)
(declare-fun x1019 () Bool)
(declare-fun x247 () Int)
(declare-fun x596 () Bool)
(declare-fun x15 () Bool)
(declare-fun x166 () Int)
(declare-fun x241 () Bool)
(declare-fun x988 () Int)
(declare-fun x112 () Bool)
(declare-fun x1345 () Int)
(declare-fun x744 () x330)
(declare-fun x737 () Bool)
(declare-fun x109 () Bool)
(declare-fun x831 () Int)
(declare-fun x82 () Int)
(declare-fun x1066 () x330)
(declare-fun x324 (Int Int) Int)
(declare-fun x316 () Int)
(declare-fun x1138 () Bool)
(declare-fun x497 () Bool)
(declare-fun x1022 () Bool)
(declare-fun x1052 () Bool)
(declare-fun x921 () Int)
(declare-fun x1256 () Bool)
(declare-fun x1266 () Int)
(declare-fun x104 () Int)
(declare-fun x821 () Int)
(declare-fun x28 (Int) Int)
(declare-fun x315 () Int)
(declare-fun x840 () Int)
(declare-fun x2 () Bool)
(declare-fun x517 () Int)
(declare-fun x578 () Int)
(declare-fun x820 () Int)
(declare-fun x423 () Int)
(declare-fun x292 () Int)
(declare-fun x227 () Int)
(declare-fun x1295 () Int)
(declare-fun x1101 () Int)
(declare-fun x1281 () Bool)
(declare-fun x232 () x330)
(declare-fun x264 () Int)
(declare-fun x190 () Bool)
(declare-fun x169 () Int)
(declare-fun x878 () Int)
(declare-fun x1056 () Int)
(declare-fun x1117 () x330)
(declare-fun x450 () Int)
(declare-fun x1311 () Bool)
(declare-fun x1038 () Int)
(declare-fun x1238 () Bool)
(declare-fun x1184 () Bool)
(declare-fun x771 () Int)
(declare-fun x1326 () Bool)
(declare-fun x1331 () Int)
(declare-fun x1382 () Bool)
(declare-fun x620 () Int)
(declare-fun x486 () Int)
(declare-fun x789 () Int)
(declare-fun x562 () x330)
(declare-fun x226 () Int)
(declare-fun x133 () Int)
(declare-fun x490 () Int)
(declare-fun x662 () Bool)
(declare-fun x904 () Bool)
(declare-fun x314 () Bool)
(declare-fun x1150 () Int)
(declare-fun x1360 () Bool)
(declare-fun x806 () Int)
(declare-fun x710 () Int)
(declare-fun x1369 () x330)
(declare-fun x730 () Bool)
(declare-fun x951 () Int)
(declare-fun x1194 () Bool)
(declare-fun x70 () Int)
(declare-fun x1079 () x330)
(declare-fun x1095 () Int)
(declare-fun x769 () Int)
(declare-fun x1291 () Int)
(declare-fun x1130 () Int)
(declare-fun x455 () Bool)
(declare-fun x622 () Int)
(declare-fun x1222 () Int)
(declare-fun x219 () Int)
(declare-fun x221 () x330)
(declare-fun x1292 () Int)
(declare-fun x488 () x330)
(declare-fun x1289 () Bool)
(declare-fun x152 () Bool)
(declare-fun x1232 () Bool)
(declare-fun x102 () x330)
(declare-fun x1270 () x330)
(declare-fun x1203 () Int)
(declare-fun x23 () Int)
(declare-fun x491 () Int)
(declare-fun x1103 () Bool)
(declare-fun x764 () Int)
(declare-fun x473 (x330) Int)
(declare-fun x1119 () x330)
(declare-fun x326 () Bool)
(declare-fun x785 () Int)
(declare-fun x1332 () Bool)
(declare-fun x1190 () Int)
(declare-fun x357 () Int)
(declare-fun x870 () Bool)
(declare-fun x77 () Int)
(declare-fun x674 () Bool)
(declare-fun x53 () Bool)
(declare-fun x905 () Bool)
(declare-fun x990 () Int)
(declare-fun x884 () Int)
(declare-fun x935 () Int)
(declare-fun x868 () x330)
(declare-fun x494 () Int)
(declare-fun x584 () x330)
(declare-fun x1246 () Bool)
(declare-fun x632 () Bool)
(declare-fun x386 () x330)
(declare-fun x325 () Int)
(declare-fun x989 () Bool)
(declare-fun x571 () Int)
(declare-fun x1262 () Int)
(declare-fun x1283 () Bool)
(declare-fun x561 () Bool)
(declare-fun x529 () Bool)
(declare-fun x452 () Bool)
(declare-fun x74 () Int)
(declare-fun x1088 () Bool)
(declare-fun x407 () x330)
(declare-fun x1031 () x330)
(declare-fun x754 () Bool)
(declare-fun x266 () Int)
(declare-fun x1355 () Int)
(declare-fun x263 () Bool)
(declare-fun x550 () Bool)
(declare-fun x814 () Bool)
(declare-fun x1044 () Int)
(declare-fun x1171 () x330)
(declare-fun x1097 () Int)
(declare-fun x728 () x330)
(declare-fun x1186 () Int)
(declare-fun x89 () Bool)
(declare-fun x944 () Int)
(declare-fun x563 () Int)
(declare-fun x385 () Bool)
(declare-fun x705 () Bool)
(declare-fun x1076 () Bool)
(declare-fun x83 () Bool)
(declare-fun x76 () Int)
(declare-fun x1003 () Int)
(declare-fun x213 () Int)
(declare-fun x1175 () Bool)
(declare-fun x257 () Int)
(declare-fun x832 () Int)
(declare-fun x926 () Int)
(declare-fun x934 () Int)
(declare-fun x707 () Bool)
(declare-fun x395 () Bool)
(declare-fun x492 () Int)
(declare-fun x229 () Int)
(declare-fun x1192 () Int)
(declare-fun x1257 (Int) Int)
(declare-fun x838 () Bool)
(declare-fun x1152 () x330)
(declare-fun x223 () Int)
(declare-fun x1133 () Int)
(declare-fun x874 () Bool)
(declare-fun x684 (Int) Int)
(declare-fun x922 () Int)
(declare-fun x727 () Bool)
(declare-fun x1325 () x330)
(declare-fun x522 () Int)
(declare-fun x918 (Int) Int)
(declare-fun x135 () Int)
(declare-fun x136 () Bool)
(declare-fun x428 () x330)
(declare-fun x800 () Bool)
(declare-fun x1199 () Int)
(declare-fun x1163 () Int)
(declare-fun x1340 () Bool)
(declare-fun x834 () Bool)
(declare-fun x311 () Bool)
(declare-fun x1341 () Bool)
(declare-fun x514 () Bool)
(declare-fun x1174 () Int)
(declare-fun x669 () Int)
(declare-fun x697 () Bool)
(declare-fun x1168 () Int)
(declare-fun x1255 () Int)
(declare-fun x243 () x330)
(declare-fun x415 () Int)
(declare-fun x1241 () Int)
(declare-fun x401 () x330)
(declare-fun x816 () Int)
(declare-fun x576 () Int)
(declare-fun x1336 () Bool)
(declare-fun x929 () Int)
(declare-fun x171 () Int)
(declare-fun x1372 () Int)
(declare-fun x1240 () Int)
(declare-fun x903 () Int)
(declare-fun x523 () Int)
(declare-fun x340 () Bool)
(declare-fun x1231 () Int)
(declare-fun x763 () Bool)
(declare-fun x1057 () x330)
(declare-fun x467 () Int)
(declare-fun x983 () Bool)
(declare-fun x313 () Int)
(declare-fun x759 () Int)
(declare-fun x1058 () x330)
(declare-fun x1087 () Bool)
(declare-fun x891 (Int) x330)
(declare-fun x52 () Bool)
(declare-fun x1201 () Bool)
(declare-fun x719 () Int)
(define-fun x322 ((x330 x330) (x1137 Int)) x330 (ite ((_ is x656) x330) (x656 (x557 x330) (+ x1137 (x384 x330))) (ite ((_ is x767) x330) (x767 (x1210 x330) (x297 x330) (+ (x472 x330) x1137)) (x400 (+ (x1297 x330) x1137)))))
(define-fun x583 ((x712 Int)) Int (ite (and (< x712 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x712)) x712 (- x712 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x913 ((x712 Int)) Int (ite (and (< x712 0) (>= x712 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x712) x712))
(define-fun x955 ((x712 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x712) (<= 0 x712)) x712 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x712) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x712)) (- x712 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x712) (< x712 0)) (+ x712 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x533 x712 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x320 ((x242 Int)) Bool (and (< x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x242 0)))
(define-fun x361 ((x242 Int) (x505 Int)) Bool (=> (and (< 0 x242) (< 0 x505)) (= (= x505 (x994 (x955 (x324 x242 x505)) x242)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x324 x242 x505)))))
(define-fun x389 ((x242 Int) (x505 Int)) Bool (=> (and (not (= x505 0)) (not (= 0 x242))) (and (= x505 (x994 (x324 x242 x505) x242)) (= x242 (x994 (x324 x242 x505) x505)))))
(define-fun x845 ((x242 Int) (x505 Int)) Bool (=> (and (> x242 0) (> x505 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x324 x242 x505)) (> x505 (x994 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242)))))
(define-fun x1298 ((x242 Int) (x505 Int)) Bool (and (= (x955 (x324 x242 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x955 (x324 x242 x505))) (= (x955 (x324 (- x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) x505)) (x955 (x324 x242 x505))) (= (x955 (x324 (- x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x955 (x324 x242 x505)))))
(define-fun x1154 ((x242 Int) (x505 Int)) Bool (and (=> (and (and (> x242 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x505) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505))) (= (<= (x324 (- x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x994 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x505)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505) (> x505 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x242 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x242 0))) (= (>= (x324 x242 (- x505 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x505) (x994 57896044618658097711785492504343953926634992332820282019728792003956564819968 x242)))) (=> (and (and (< 0 x242) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x242)) (and (< 0 x505) (<= x505 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x324 x242 x505) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x242 (x994 57896044618658097711785492504343953926634992332820282019728792003956564819967 x505)))) (=> (and (and (<= x505 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x505)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x242) (<= x242 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x994 57896044618658097711785492504343953926634992332820282019728792003956564819968 x505) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x324 (- x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) x505))))))
(define-fun x371 ((x242 Int)) Bool (and (= 0 (x324 0 x242)) (= (x324 x242 0) 0)))
(define-fun x1011 ((x242 Int)) Bool (and (= (x324 x242 1) x242) (= (x324 1 x242) x242)))
(define-fun x1167 ((x242 Int)) Bool (and (x371 x242) (x1011 x242)))
(define-fun x94 ((x242 Int) (x505 Int)) Bool (=> (and (< 0 x505) (< 0 x242)) (and (>= (x994 x242 x505) 0) (>= x242 (x994 x242 x505)))))
(define-fun x224 ((x242 Int) (x505 Int)) Bool (=> (and (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242) (>= x242 0)) (and (>= x505 1) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x505))) (and (< (x994 x242 x505) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x994 x242 x505) 0))))
(define-fun x1375 ((x242 Int) (x505 Int)) Bool (=> (and (> x505 1) (> x242 x505)) (< (x994 x242 x505) x242)))
(define-fun x791 ((x242 Int) (x505 Int)) Bool (=> (and (< 0 x505) (> x242 0)) (= (> x505 x242) (= 0 (x994 x242 x505)))))
(define-fun x950 ((x242 Int)) Bool (= 0 (x994 0 x242)))
(define-fun x1162 ((x242 Int)) Bool (= x242 (x994 x242 1)))
(define-fun x713 ((x242 Int)) Bool (=> (not (= 0 x242)) (= 1 (x994 x242 x242))))
(define-fun x909 ((x242 Int)) Bool (and (x950 x242) (x1162 x242) (x713 x242)))
(define-fun x73 ((x242 Int) (x505 Int)) Bool (and (<= 0 (x533 x242 x505)) (> x505 (x533 x242 x505))))
(define-fun x986 ((x242 Int) (x505 Int)) Bool (=> (and (< 0 x505) (<= 0 x242)) (= (= x242 (x533 x242 x505)) (< x242 x505))))
(define-fun x645 ((x242 Int) (x505 Int)) Bool (=> (and (and (>= x242 x505) (< x242 (+ x505 x505))) (< 0 x505)) (= (x533 x242 x505) (- x242 x505))))
(define-fun x689 ((x242 Int)) Bool (= 0 (x533 0 x242)))
(define-fun x518 ((x242 Int)) Bool (= (x533 x242 1) 0))
(define-fun x206 ((x242 Int)) Bool (= 0 (x533 x242 x242)))
(define-fun x742 ((x242 Int)) Bool (and (x206 x242) (x689 x242) (x518 x242)))
(define-fun x839 ((x453 Int)) Int (ite (= x453 128) x547 (x862 x453)))
(define-fun x61 ((x453 Int)) Int (ite (= 128 x453) x547 (x1337 x453)))
(define-fun x1224 ((x453 Int)) Int (ite (= 128 x453) x547 (x1207 x453)))
(define-fun x248 ((x453 Int)) Int (ite (= 128 x453) x547 (x7 x453)))
(define-fun x406 ((x453 Int)) Int (ite (= x453 128) x547 (x28 x453)))
(define-fun x1365 ((x453 Int)) Int (ite (= x453 128) x547 (x621 x453)))
(define-fun x1008 ((x453 Int)) Int (ite (= x453 128) x547 (x684 x453)))
(define-fun x906 ((x453 Int)) Int (ite (= 128 x453) x16 (x610 x453)))
(define-fun x1085 ((x453 x330)) Int (ite (= x1143 x453) x431 (x473 x453)))
(define-fun x47 ((x453 x330)) Int (ite x1151 (x473 x453) (x1085 x453)))
(define-fun x954 ((x453 x330)) Int (ite (= x453 x407) 0 (x47 x453)))
(define-fun x1124 ((x453 x330)) Int (ite x1019 (x473 x453) (x954 x453)))
(define-fun x612 ((x453 Int)) Int (ite (= x453 128) x547 (x959 x453)))
(define-fun x1206 ((x453 Int)) Int (ite (= x453 128) x547 (x1257 x453)))
(define-fun x1309 ((x453 Int)) Int (ite (= x453 128) x547 (x1265 x453)))
(define-fun x306 ((x453 Int)) Int (ite (= 128 x453) x547 (x5 x453)))
(define-fun x49 ((x453 x330)) Int (ite (= x453 x72) x1208 (x208 x453)))
(define-fun x1245 ((x453 Int)) Int (ite (= x453 128) x547 (x291 x453)))
(define-fun x1032 ((x453 Int)) Int (ite (= 128 x453) x547 (x1379 x453)))
(define-fun x643 ((x453 Int)) Int (ite (= x453 128) x547 (x825 x453)))
(define-fun x388 ((x453 Int)) Int (ite (= 128 x453) x547 (x1214 x453)))
(define-fun x876 ((x453 Int)) Int (ite (= 128 x453) x547 (x673 x453)))
(define-fun x78 ((x453 Int)) Int (ite (= 128 x453) x547 (x301 x453)))
(define-fun x755 ((x453 Int)) Int (ite (= x453 128) x547 (x272 x453)))
(define-fun x627 ((x453 Int)) Int (ite (= 128 x453) x547 (x575 x453)))
(define-fun x370 ((x453 Int)) Int (ite (= x453 128) x547 (x918 x453)))
(define-fun x246 ((x453 Int)) Int (ite (= 128 x453) x547 (x1196 x453)))
(define-fun x704 ((x453 x330)) Int (ite x1151 (x208 x453) (x49 x453)))
(define-fun x773 ((x453 x330)) Int (ite (= x784 x453) 0 (x704 x453)))
(define-fun x1285 ((x453 x330)) Int (ite x1019 (x208 x453) (x773 x453)))
(define-fun x892 ((x242 Int)) Bool (=> (and (not (= 954915356 x242)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242)) (not (= x242 2485876314)) (not (= 701022898 x242)) (not (= x242 2429653569)) (< 10000 x242) (not (= x242 1572751336)) (not (= x242 3686129278)) (not (= x242 1461501637330902918203684832716283019655932542975)) (not (= x242 1729973928)) (not (= x242 1250999895))) (not ((_ is x400) (x891 x242)))))
(assert (x320 x1361))
(assert (x320 x1273))
(assert (let ((x242 (- (x540 x1119) (x540 x439)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x891 1250999895) (x400 1250999895)))
(assert (x320 x957))
(assert (x742 (- (x540 x390) (x540 x1319))))
(assert (=> (>= 10000 x239) (= (x400 x239) (x891 x239))))
(assert (x320 x920))
(assert (x320 x609))
(assert (let ((x242 (- (x540 x1066) (x540 x221)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1078))
(assert (x320 x1291))
(assert (x320 x516))
(assert (x320 x157))
(assert (x320 x1039))
(assert (x320 x116))
(assert (= x302 (or x108 (and x289 x1373))))
(assert (x320 x1331))
(assert (x320 x828))
(assert (x320 x65))
(assert (x320 x1221))
(assert (= (x891 (x540 x1198)) x1198))
(assert (x320 x685))
(assert (x742 (- (x540 x1081) (x540 x11))))
(assert (x320 x818))
(assert (x320 x1101))
(assert (= x1247 x989))
(assert (x909 (x955 (- (x540 x1233) (x540 x1312)))))
(assert (x320 x1310))
(assert (= x1304 (=> (and (and (and (>= 1461501637330902918203684832716283019655932542975 x462) (= x680 (x767 (x891 x462) (x400 1) 0)) (not (= x979 954915356)) (= x735 (x208 x680)) (= x311 (not x35)) (>= x735 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x735) (= x657 (x570 (x891 x971))) (= x3 0) (not (= 701022898 x979)) (= (not (= x735 0)) x1370) (= x259 0) (not (= x979 1250999895)) (= (not x1370) x35) (< 0 x657) (< x979 1729973928) (= 1572751336 x979) (= (ite x311 1 0) x1213)) (and (and (not (> 1729973928 x1131)) (= (not (= 0 x1213)) x718) (<= x528 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x722 1461501637330902918203684832716283019655932542975) (= x722 x957) (= x84 (x767 (x891 x722) (x400 1) 0)) (= (x208 x84) x528) (= x351 x718) (<= 0 x528) (= x1131 1729973928) (= (x570 (x891 x971)) x1202) (> x1202 0) (= 0 x672) (= (not (= 0 x528)) x736) (= 0 x1054) (= x501 (and x1129 x351))) (or (and (not x736) (= 0 x639)) (and (and (= 0 x1288) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x380) (= (x583 (+ x155 1)) x1264) (= (x208 x121) x380) (not (< x380 1)) (= (x913 (- x380 1)) x155) (= x121 (x767 (x891 x722) (x400 1) 0)) (>= x380 0) (= 0 x740) (= x639 x1264)) x736)))) (= x462 x785)) x694)))
(assert (x320 x335))
(assert (x320 x166))
(assert (= x1290 (or (and x647 (not x838)) x799)))
(assert (x320 x1089))
(assert (let ((x242 (- (x540 x1380) (x540 x428)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1355))
(assert (= x1336 (and x1272 (not x736))))
(assert (= (x400 2485876314) (x891 2485876314)))
(assert (= (or x1149 x1159) x1373))
(assert (x320 x604))
(assert (x320 x231))
(assert (x320 x120))
(assert (x742 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x320 x832))
(assert (x320 x917))
(assert (= x1369 (x891 (x540 x1369))))
(assert (x742 (- (x540 x232) (x540 x777))))
(assert (= x1312 (x891 (x540 x1312))))
(assert (= (and (not x1341) x565) x520))
(assert (x320 x1248))
(assert (= x783 (and x786 x1141)))
(assert (let ((x242 (- (x540 x1233) (x540 x1312)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (or x359 (and x328 x1230)) x974))
(assert (x320 x1327))
(assert (x1167 x16))
(assert (x320 x74))
(assert (= x1305 (and x1033 x350)))
(assert (= (and (not x596) x89) x285))
(assert (= (=> (and (and (= x358 x1318) (= 128 x840) (= (x306 128) x1318) (= x69 128)) (and (not (= x692 2429653569)) (not (= 1729973928 x692)) (= 0 x177) (= x692 3686129278) (< 0 x202) (not (< x692 1729973928)) (= x358 x374) (= x1263 0) (not (= x692 2485876314)) (= x1126 1) (= x586 (x913 (- x374 x1126))) (= x586 x214) (= (= 0 x547) x487) (= x202 (x570 (x891 x971))))) (and (=> x487 x860) (=> (and (and (= (< 192 x660) x1287) (= x1164 (x656 (x400 0) 0)) (= x1074 (x656 (x400 0) 0)) (= (x322 x1164 1) x810) x826 (= x660 (x583 (+ 160 x1186))) (= (x955 (* x547 32)) x1186) (= (x994 (x955 (- (x540 x1164) (x540 x1074))) 1) x187) (= (> 1461501637330902918203684832716283019655932542975 x237) x826) (= x237 (x473 x1164)) (>= x237 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x237)) (not x487)) (and (=> (not x1287) x863) (=> x1287 x1069))))) x497))
(assert (= x1159 (and x451 (not x375))))
(assert (x320 x507))
(assert (x320 x901))
(assert (x320 x363))
(assert (x320 x607))
(assert (x320 x572))
(assert (x320 x595))
(assert (x320 x782))
(assert (= (x891 (x540 x4)) x4))
(assert (= (=> (and (= x238 (x656 (x400 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x77) (= x409 (> 1461501637330902918203684832716283019655932542975 x77)) (<= 0 x77) (= x77 (x473 x1144)) x409 (= (not (> x916 224)) x1178) (= (x994 (x955 (- (x540 x1144) (x540 x238))) 1) x816)) (and x189 x1178)) x129))
(assert (= x1228 (and x276 x260)))
(assert (let ((x242 (x955 (- (x540 x677) (x540 x1057))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x530))
(assert (= x1000 (=> (and (and (= x923 128) (= (> x829 x67) x591) (= x829 (x1245 128)) (= x958 128)) (or (and (= 0 x1276) (not x591)) (and (and (>= x1002 0) x883 (= (x656 (x400 0) 0) x13) (= x213 0) (< x1383 x547) (= x1002 x1276) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1002) (= x1017 (x322 x13 x67)) (= (x473 x1017) x1002) (= 0 x1182) (= x883 (> 1461501637330902918203684832716283019655932542975 x1002))) x591))) x636)))
(assert (= (and x1035 x1381) x723))
(assert (let ((x242 (x955 (- (x540 x1152) (x540 x40))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (let ((x242 (- (x540 x1125) (x540 x836)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1226))
(assert (x909 (x955 (- (x540 x688) (x540 x128)))))
(assert (x320 x966))
(assert (= x170 (or x475 (and x153 x53))))
(assert (x320 x64))
(assert (x320 x100))
(assert (x320 x227))
(assert (x320 x1067))
(assert (x320 x498))
(assert (x320 x1349))
(assert (x909 (x955 (- (x540 x1064) (x540 x1270)))))
(assert (let ((x242 (- (x540 x43) (x540 x1031)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1255))
(assert (let ((x242 (- (x540 x810) (x540 x568)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x59 x180))
(assert (x320 x816))
(assert (let ((x242 (- (x540 x677) (x540 x1057)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x247))
(assert (x320 x602))
(assert (x320 x523))
(assert (= (or x727 x948) x1329))
(assert (= (or x853 x1052) x1272))
(assert (= (or x209 (and x1348 (not x296))) x274))
(assert (x320 x806))
(assert (x320 x578))
(assert (= (=> (and (and (= x719 x502) (= (x913 (- x719 x494)) x871) (< 0 x768) (= (x570 (x891 x971)) x768) (not (= 1729973928 x624)) (= x1277 0) (not (= x624 2429653569)) (= x397 (= x547 0)) (not (< x624 1729973928)) (= 1 x494) (not (= x624 2485876314)) (= x747 0) (= x624 3686129278) (= x516 x871)) (and (= x141 128) (= x300 x502) (= x300 (x1224 128)) (= x342 128))) (and (=> x397 x30) (=> (and (and (= x194 (x994 (x955 (- (x540 x488) (x540 x675))) 1)) (= (x473 x488) x1274) x788 (= (> 1461501637330902918203684832716283019655932542975 x1274) x788) (= (x656 (x400 0) 0) x675) (= (x322 x488 1) x960) (= x1056 (x583 (+ x1084 160))) (= (x656 (x400 0) 0) x488) (<= 0 x1274) (<= x1274 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 192 x1056) x251) (= (x955 (* 32 x547)) x1084)) (not x397)) (and (=> x251 x801) (=> (not x251) x800))))) x874))
(assert (=> (<= x1203 10000) (= (x400 x1203) (x891 x1203))))
(assert (= (x540 (x891 x431)) x431))
(assert (x320 x450))
(assert (x320 x926))
(assert (x320 x1254))
(assert (= (or (and x111 x1329) x274) x1382))
(assert (let ((x242 (x955 (- (x540 x488) (x540 x675))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x626))
(assert (x909 (x955 (- (x540 x1050) (x540 x38)))))
(assert (x320 x664))
(assert (x320 x858))
(assert (x320 x1218))
(assert (= (or x1228 x1387) x861))
(assert (x909 (x955 (- (x540 x881) (x540 x956)))))
(assert (x892 x530))
(assert (x320 x420))
(assert (x742 (- (x540 x881) (x540 x956))))
(assert (x320 x703))
(assert (x742 (- (x540 x1152) (x540 x40))))
(assert (x320 x625))
(assert (= (x540 (x400 2429653569)) 2429653569))
(assert (= x1058 (x891 (x540 x1058))))
(assert (= x189 x68))
(assert (= x1366 (or x317 (and x512 x945))))
(assert (x320 x1009))
(assert (= x705 (or x1359 x319)))
(assert (x320 x1266))
(assert (= (=> (and x905 (= x905 (< x554 1461501637330902918203684832716283019655932542975)) (= (not (< 224 x481)) x897) (= x554 (x473 x1211)) (<= x554 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x664 (x994 (x955 (- (x540 x1211) (x540 x1077))) 1)) (= (x656 (x400 0) 0) x1077) (<= 0 x554)) (and x1283 x897)) x1354))
(assert (= (x891 (x540 x485)) x485))
(assert (x320 x544))
(assert (x320 x676))
(assert (x320 x667))
(assert (x320 x821))
(assert (let ((x242 (x955 (- (x540 x93) (x540 x1229))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (and x215 x1138) x22))
(assert (= x144 (and (not x564) x861)))
(assert (= x1049 x1283))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x540 (x400 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x320 x33))
(assert (x320 x1378))
(assert (= (x540 (x400 3686129278)) 3686129278))
(assert (= (x540 (x400 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x320 x349))
(assert (x320 x198))
(assert (let ((x242 (x955 (- (x540 x700) (x540 x1123))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x519))
(assert (= x80 (=> (and (and (= x1061 128) (= (> x720 x973) x543) (= (x755 128) x720) (= 128 x1302)) (or (and (and (= x772 x866) (= x1111 (x656 (x400 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x772) (= x1114 0) (= (x473 x102) x772) (>= x772 0) (= (< x772 1461501637330902918203684832716283019655932542975) x1333) (= 0 x982) (= x102 (x322 x1111 x973)) x1333 (> x547 x1094)) x543) (and (not x543) (= 0 x866)))) x258)))
(assert (x320 x448))
(assert (x320 x321))
(assert (x742 (- (x540 x851) (x540 x216))))
(assert (= x1281 (and x1338 x452)))
(assert (x742 (- (x540 x1356) (x540 x1352))))
(assert (x320 x323))
(assert (= (=> (and (and (not (= x1133 701022898)) (= 0 x366) x511 (= 1250999895 x1133) (> x368 0) (= 0 x952) (= (>= x903 x769) x511) (not (= 954915356 x1133)) (> 1729973928 x1133) (= x1266 x903) (= x368 (x570 (x891 x971))) (= x153 (= x547 0))) (and (= (x1365 128) x1286) (= x115 128) (= x890 128) (= x1266 x1286))) (and (=> x153 x1194) (=> (and (not x153) (and (>= x225 0) (= x1346 (> 1461501637330902918203684832716283019655932542975 x225)) (= (< 192 x573) x1128) (= x1356 (x322 x93 1)) (<= x225 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1346 (= (x583 (+ 160 x535)) x573) (= x93 (x656 (x400 0) 0)) (= x535 (x955 (* 32 x547))) (= x420 (x994 (x955 (- (x540 x93) (x540 x1229))) 1)) (= (x473 x93) x225) (= (x656 (x400 0) 0) x1229))) (and (=> x1128 x618) (=> (not x1128) x283))))) x765))
(assert (let ((x242 (- (x540 x688) (x540 x128)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (let ((x242 (- (x540 x1135) (x540 x584)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (=> (and (and (= x1101 x523) (= 128 x33) (= 128 x64) (= (x612 128) x523)) (and (not (= x264 1729973928)) (< 0 x1116) (not (> 1729973928 x264)) (= 1 x446) (= x152 (= 0 x547)) (= x1023 x1294) (not (= x264 2485876314)) (not (= 2429653569 x264)) (= 3686129278 x264) (= 0 x1051) (= x1294 (x913 (- x1098 x446))) (= 0 x1130) (= x1098 x1101) (= (x570 (x891 x971)) x1116))) (and (=> (and (not x152) (and x286 (= x1211 (x322 x1058 1)) (= x852 (< 192 x481)) (= x481 (x583 (+ 160 x352))) (= x378 (x994 (x955 (- (x540 x1058) (x540 x1362))) 1)) (= x1362 (x656 (x400 0) 0)) (= (x656 (x400 0) 0) x1058) (= x352 (x955 (* 32 x547))) (= x828 (x473 x1058)) (= x286 (> 1461501637330902918203684832716283019655932542975 x828)) (<= 0 x828) (<= x828 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> (not x852) x1283) (=> x852 x1354))) (=> x152 x1049))) x314))
(assert (x320 x195))
(assert (x320 x1236))
(assert (x320 x87))
(assert (x320 x492))
(assert (x320 x921))
(assert (let ((x242 (- (x540 x444) (x540 x1041)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (and x1364 x251) x545))
(assert (x742 (- (x540 x402) (x540 x1065))))
(assert (= x1183 x52))
(assert (= (x891 2429653569) (x400 2429653569)))
(assert (x320 x589))
(assert (x320 x1363))
(assert (x320 x1267))
(assert (x320 x977))
(assert (x320 x331))
(assert (= (and x804 x537) x1109))
(assert (x320 x500))
(assert (let ((x242 (- (x540 x1198) (x540 x1122)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x540 (x400 1729973928)) 1729973928))
(assert (= x83 (or x797 (and x2 x630))))
(assert (= x727 (and x1029 (not x1301))))
(assert (x892 x51))
(assert (x320 x1384))
(assert (x320 x576))
(assert (x320 x1163))
(assert (x320 x1132))
(assert (let ((x242 (x955 (- (x540 x390) (x540 x1319))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x416))
(assert (x320 x327))
(assert (= (and x1374 x902) x1025))
(assert (x320 x927))
(assert (x320 x553))
(assert (x320 x1182))
(assert (= x792 (and x144 (not x250))))
(assert (x320 x650))
(assert (x320 x759))
(assert (x320 x393))
(assert (= (=> (and (= x866 x922) (and (and (>= x154 0) (< 0 x921) (= (ite x738 1 0) x282) (= 0 x1173) (< x847 1729973928) (not (= x847 954915356)) (= x921 (x570 (x891 x971))) (= x223 0) (not (= x847 1250999895)) (not (= x847 701022898)) (= x847 1572751336) (= (not x15) x738) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x154) (= x154 (x208 x167)) (<= x866 1461501637330902918203684832716283019655932542975) (= x365 (not (= x154 0))) (= (not x365) x15) (= x167 (x767 (x891 x866) (x400 1) 0))) (and (= x1377 (x570 (x891 x971))) (not (= x907 954915356)) (= x633 x696) (= x907 1250999895) (> 1729973928 x907) (not (= x907 701022898)) (= x275 0) (= x1184 (= x547 0)) (= x1153 0) (< 0 x1377) (= x633 (not (= x282 0)))))) (and (=> (and (and (= x338 (> x752 192)) (>= x833 0) (= x803 (< x833 1461501637330902918203684832716283019655932542975)) (= (x994 (x955 (- (x540 x489) (x540 x499))) 1) x229) (<= x833 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x833 (x473 x489)) (= (x656 (x400 0) 0) x489) (= x752 (x583 (+ 160 x1038))) (= (x322 x489 1) x232) (= (x656 (x400 0) 0) x499) (= x1038 (x955 (* x547 32))) x803) (not x1184)) (and (=> (not x338) x1037) (=> x338 x1279))) (=> x1184 x1120))) x258))
(assert (= (x891 (x540 x1352)) x1352))
(assert (= x317 (or (and x112 (not x524)) x147)))
(assert (= x1068 (and (not x1060) x395)))
(assert (x742 (- (x540 x488) (x540 x675))))
(assert (= (=> (and (or (and x385 (and (= (< x1180 1461501637330902918203684832716283019655932542975) x653) (= x1180 (x473 x161)) (= 0 x762) (= 0 x882) (= x462 x1180) (< x599 x547) x653 (= x161 (x322 x750 x1139)) (= (x656 (x400 0) 0) x750) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1180) (>= x1180 0))) (and (not x385) (= x462 0))) (and (= x976 128) (= (x876 128) x448) (= x385 (> x448 x1139)) (= x1386 128))) x1304) x805))
(assert (x320 x820))
(assert (x320 x57))
(assert (= (and (not x153) x53) x608))
(assert (x892 x1160))
(assert (x320 x638))
(assert (let ((x242 (- (x540 x898) (x540 x485)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1051))
(assert (let ((x242 (x955 (- (x540 x1198) (x540 x1122))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x540 (x322 x562 x871)) (+ x871 (x540 x562))))
(assert (= x877 (x891 (x540 x877))))
(assert (= x1005 (x891 (x540 x1005))))
(assert (= x549 (or x464 x949)))
(assert (= (+ x337 (x540 x1225)) (x540 (x322 x1225 x337))))
(assert (x320 x85))
(assert (= (x540 (x891 x1185)) x1185))
(assert (= (and x1156 x344) x963))
(assert (x320 x588))
(assert (= (and (not x289) x1373) x1104))
(assert (x320 x91))
(assert (x320 x749))
(assert (x909 (x955 (- (x540 x1105) (x540 x442)))))
(assert (x320 x214))
(assert (x320 x316))
(assert (x320 x634))
(assert (x320 x146))
(assert (x742 (- (x540 x1233) (x540 x1312))))
(assert (x320 x382))
(assert (x320 x687))
(assert (let ((x242 (- (x540 x1211) (x540 x1077)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1090))
(assert (=> (<= x367 10000) (= (x400 x367) (x891 x367))))
(assert (x320 x236))
(assert (x320 x785))
(assert (= x860 (=> (and (or (and (= x966 0) (not x260)) (and x260 (and (= x966 x813) (= x1342 (> 1461501637330902918203684832716283019655932542975 x813)) (= x818 0) (= 0 x993) (<= 0 x813) (= x813 (x473 x1055)) (= x868 (x656 (x400 0) 0)) (< x214 x547) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x813) (= (x322 x868 x586) x1055) x1342))) (and (= x138 (x370 128)) (= x186 128) (= 128 x1252) (= (> x138 x586) x260))) x188)))
(assert (= (and x1348 x296) x209))
(assert (= x1367 x874))
(assert (= (and x1366 (not x152)) x1088))
(assert (x320 x8))
(assert (= (and x1033 (not x350)) x1232))
(assert (x320 x890))
(assert (x742 (- (x540 x1119) (x540 x439))))
(assert (let ((x242 (x955 (- (x540 x1105) (x540 x442))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x952))
(assert (x320 x1054))
(assert (x320 x329))
(assert (= (x400 1729973928) (x891 1729973928)))
(assert (x320 x695))
(assert (x909 (x955 (- (x540 x93) (x540 x1229)))))
(assert (= (or x210 x175) x526))
(assert (= (or (and x1366 x152) x201) x1138))
(assert (x320 x1))
(assert (x320 x1275))
(assert (= (x540 (x322 x1066 1)) (+ (x540 x1066) 1)))
(assert (= (or x37 x1047) x1022))
(assert (= (or x364 (and (not x1311) x1158)) x797))
(assert (let ((x242 (- (x540 x402) (x540 x1065)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x158))
(assert (x320 x225))
(assert (x320 x244))
(assert (= x1135 (x891 (x540 x1135))))
(assert (x320 x1013))
(assert (= (or (and x344 (not x1156)) x963) x632))
(assert (= (=> (and (and (= (not x975) x582) (= x687 (ite x582 1 0)) (= (= 0 x315) x975)) (and (and (not (= 954915356 x151)) (= x676 x957) (= x987 (not x295)) (= x864 0) (= 0 x150) (= (ite x1092 1 0) x391) (>= x31 0) (= (x767 (x891 x676) (x400 1) 0) x1134) (> x1039 0) (= x1092 (not x987)) (= x31 (x1285 x1134)) (= x295 (not (= x31 0))) (= 1572751336 x151) (not (= 701022898 x151)) (>= 1461501637330902918203684832716283019655932542975 x676) (> 1729973928 x151) (<= x31 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1250999895 x151)) (= (x570 (x891 x971)) x1039)) (and (and (= x1235 x662) (= x27 (not (= 0 x423))) (= x244 x957) (= 1729973928 x793) (< 0 x279) (= x98 (x767 (x891 x244) (x400 1) 0)) (<= x244 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x423) (= x437 0) (= (not (= 0 x391)) x1235) (not (< x793 1729973928)) (= (x570 (x891 x971)) x279) (= x423 (x1285 x98)) (= x1321 0) (<= 0 x423)) (or (and (= x538 0) (not x27)) (and x27 (and (= x1267 0) (= x622 0) (= (x913 (- x919 1)) x20) (= x617 x538) (= x617 (x583 (+ x20 1))) (not (< x919 1)) (= (x1285 x830) x919) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x919) (= x830 (x767 (x891 x244) (x400 1) 0)) (<= 0 x919))))))) x1300) x127))
(assert (= x53 (or x632 (and x268 x781))))
(assert (= (x540 (x322 x1234 x1059)) (+ x1059 (x540 x1234))))
(assert (x320 x586))
(assert (= (=> (and (= x456 x247) (and (> x888 0) (= x1155 x456) (= 0 x470) (not (= 701022898 x195)) (= x42 0) x1083 (> 1729973928 x195) (= (not (= x1155 x808)) x477) (= x888 (x570 (x891 x971))) (= (= x547 0) x1010) (= (or (not x162) x477) x1083) (= 1250999895 x195) (= x1003 x655) (not (= x195 954915356)))) (and (=> x1010 x24) (=> (and (and (>= x160 0) (= x1141 (< 192 x999)) (= (x583 (+ 160 x1148)) x999) (= x898 (x656 (x400 0) 0)) (= (x955 (* 32 x547)) x1148) (= x1308 (> 1461501637330902918203684832716283019655932542975 x160)) (= x267 (x322 x898 1)) (= (x656 (x400 0) 0) x485) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x160) (= x160 (x473 x898)) (= x325 (x994 (x955 (- (x540 x898) (x540 x485))) 1)) x1308) (not x1010)) (and (=> x1141 x548) (=> (not x1141) x1237))))) x598))
(assert (x892 x971))
(assert (x320 x1061))
(assert (= x1343 (=> (and x774 (= (> 1461501637330902918203684832716283019655932542975 x490) x774) (= x1176 (x656 (x400 0) 0)) (<= 0 x490) (<= x490 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (not (> x703 224)) x433) (= (x994 (x955 (- (x540 x460) (x540 x1176))) 1) x1280) (= (x473 x460) x490)) (and x433 x925))))
(assert (x742 (- (x540 x1066) (x540 x221))))
(assert (x742 (- (x540 x700) (x540 x1123))))
(assert (= x1048 (x540 (x891 x1048))))
(assert (x320 x186))
(assert (let ((x242 (- (x540 x1058) (x540 x1362)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x1160 (x540 (x891 x1160))))
(assert (x320 x1328))
(assert (let ((x242 (x955 (- (x540 x877) (x540 x967))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (let ((x242 (x955 (- (x540 x1211) (x540 x1077))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x855))
(assert (x909 (x955 (- (x540 x232) (x540 x777)))))
(assert (x320 x467))
(assert (x320 x252))
(assert (x320 x522))
(assert (x320 x462))
(assert (x320 x577))
(assert (= (+ 1 (x540 x677)) (x540 (x322 x677 1))))
(assert (x320 x778))
(assert (x320 x935))
(assert (x320 x459))
(assert (x320 x535))
(assert (= x1201 (or x723 x1007)))
(assert (x320 x1093))
(assert (x320 x282))
(assert (= (x891 3686129278) (x400 3686129278)))
(assert (x320 x494))
(assert (x320 x309))
(assert (x320 x387))
(assert (x320 x1204))
(assert (= x1000 x96))
(assert (= (x891 (x540 x1122)) x1122))
(assert (= (=> (and (= x457 (< x650 1461501637330902918203684832716283019655932542975)) (= (x656 (x400 0) 0) x1352) (>= x650 0) (= (x473 x1356) x650) x457 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x650) (= (not (> x573 224)) x648) (= (x994 (x955 (- (x540 x1356) (x540 x1352))) 1) x120)) (and x648 x283)) x618))
(assert (= x827 (and x596 x89)))
(assert (= x1360 x314))
(assert (x320 x137))
(assert (x909 (x955 (- (x540 x683) (x540 x1117)))))
(assert (= x43 (x891 (x540 x43))))
(assert (x909 (x955 (- (x540 x1380) (x540 x428)))))
(assert (= (x891 (x540 x1233)) x1233))
(assert (not x725))
(assert (x320 x257))
(assert (= (x540 (x322 x444 1)) (+ (x540 x444) 1)))
(assert (= (+ (x540 x489) 1) (x540 (x322 x489 1))))
(assert (x320 x284))
(assert (x320 x403))
(assert (x320 x866))
(assert (x320 x1045))
(assert (x320 x1303))
(assert (x320 x222))
(assert (x320 x62))
(assert (x320 x620))
(assert (x320 x435))
(assert (and (x361 32 x547) (and (= (x324 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x324 32 (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x324 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x547) (- (* 32 x547) (* x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x1154 32 x547) (= (* 32 x547) (x324 32 x547)) (x1298 32 x547) (x845 32 x547) (x389 32 x547)))
(assert (x320 x281))
(assert (x320 x135))
(assert (let ((x242 (x955 (- (x540 x164) (x540 x278))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x540 (x322 x898 1)) (+ (x540 x898) 1)))
(assert (= x857 (=> (and (and (or (and x1301 (and (= x1303 (x913 (- x706 1))) (= x1273 (x583 (+ x1303 1))) (= (x208 x443) x706) (= x321 x1273) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x706) (<= 0 x706) (= x443 (x767 (x891 x1185) (x400 1) 0)) (= 0 x1009) (not (< x706 1)) (= x1195 0))) (and (not x1301) (= x321 0))) (and (= x556 1729973928) (<= 0 x1260) (= (x570 (x891 x971)) x292) (> x292 0) (= (not (= x1260 0)) x1301) (= x585 0) (not (> 1729973928 x556)) (= x811 (x767 (x891 x1185) (x400 1) 0)) (<= x1260 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x208 x811) x1260) (= x559 0) (<= x1185 1461501637330902918203684832716283019655932542975))) (= x522 x1185)) x436)))
(assert (= (x540 (x891 x367)) x367))
(assert (x742 (- (x540 x1064) (x540 x1270))))
(assert (= (x540 (x322 x441 1)) (+ 1 (x540 x441))))
(assert (= (x891 (x540 x499)) x499))
(assert (= x836 (x891 (x540 x836))))
(assert (x892 x1185))
(assert (= (=> (and (and (= x215 (< x1294 x553)) (= 128 x914) (= x334 128) (= (x1032 128) x553)) (or (and x215 (and (= x34 0) (<= 0 x416) x514 (= x416 (x473 x1086)) (= (x656 (x400 0) 0) x741) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x416) (= (> 1461501637330902918203684832716283019655932542975 x416) x514) (= x416 x1160) (= x1086 (x322 x741 x1294)) (< x1023 x547) (= 0 x281))) (and (= 0 x1160) (not x215)))) x1371) x1049))
(assert (= (=> (and (and (= (< x1059 x1030) x895) (= x1030 (x1008 128)) (= x288 128) (= x509 128)) (or (and x895 (and (= x601 (x322 x1234 x1059)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x327) (= (x656 (x400 0) 0) x1234) (= x241 (< x327 1461501637330902918203684832716283019655932542975)) (= x972 0) x241 (= 0 x716) (= x327 x1227) (> x547 x280) (= x327 (x473 x601)) (<= 0 x327))) (and (not x895) (= 0 x1227)))) x937) x180))
(assert (x320 x303))
(assert (= (x540 (x891 x693)) x693))
(assert (=> (>= 10000 x722) (= (x891 x722) (x400 x722))))
(assert (x320 x766))
(assert (= (or x1068 x1289) x417))
(assert (x320 x141))
(assert (= (x891 (x540 x243)) x243))
(assert (x320 x325))
(assert (x320 x1244))
(assert (x909 (x955 (- (x540 x1125) (x540 x836)))))
(assert (x320 x795))
(assert (let ((x242 (x955 (- (x540 x1081) (x540 x11))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x436 (=> (and (and (= 0 x901) (> x991 0) (= (x570 (x891 x971)) x991) (not (> 1729973928 x252)) (not (= x252 2485876314)) (= 1 x36) (= x1059 x280) (not (= 2429653569 x252)) (= x252 3686129278) (= x111 (= x547 0)) (= 0 x932) (= x1059 (x913 (- x1045 x36))) (= x831 x1045) (not (= 1729973928 x252))) (= x831 x321)) (and (=> (and (and (= x101 (x955 (* 32 x547))) (= (x583 (+ x101 160)) x157) (= x38 (x656 (x400 0) 0)) (= x296 (< 192 x157)) (= (x473 x1050) x449) (= (x656 (x400 0) 0) x1050) x105 (= (x994 (x955 (- (x540 x1050) (x540 x38))) 1) x429) (= x105 (< x449 1461501637330902918203684832716283019655932542975)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x449) (= (x322 x1050 1) x881) (<= 0 x449)) (not x111)) (and (=> (not x296) x59) (=> x296 x940))) (=> x111 x180)))))
(assert (x320 x958))
(assert (= (x891 (x540 x1324)) x1324))
(assert (let ((x242 (x955 (- (x540 x489) (x540 x499))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x1261 (x891 (x540 x1261))))
(assert (x320 x1385))
(assert (x320 x148))
(assert (x320 x307))
(assert (x909 (x955 (- (x540 x43) (x540 x1031)))))
(assert (= x210 (and x262 x254)))
(assert (= (x540 (x322 x750 x1139)) (+ x1139 (x540 x750))))
(assert (= x497 x969))
(assert (= (=> (and (= (x1124 x1198) x578) (= x1243 (x994 (x955 (- (x540 x1198) (x540 x1122))) 1)) (<= x578 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x978 (not (> x1012 224))) x339 (= (< x578 1461501637330902918203684832716283019655932542975) x339) (<= 0 x578) (= (x656 (x400 0) 0) x1122)) (and x52 x978)) x659))
(assert (x320 x775))
(assert (x909 (x955 (- (x540 x534) (x540 x744)))))
(assert (x320 x1280))
(assert (x320 x992))
(assert (=> (>= 10000 x693) (= (x400 x693) (x891 x693))))
(assert (= (or (and x520 (not x193)) x721) x48))
(assert (x742 (- (x540 x1198) (x540 x1122))))
(assert (x320 x944))
(assert (x320 x939))
(assert (= x471 x269))
(assert (= x442 (x891 (x540 x442))))
(assert (x742 (- (x540 x1058) (x540 x1362))))
(assert (x320 x42))
(assert (x320 x743))
(assert (= x1140 (x891 (x540 x1140))))
(assert (x320 x1099))
(assert (x320 x378))
(assert (let ((x242 (- (x540 x877) (x540 x967)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x174))
(assert (= (x891 (x540 x1152)) x1152))
(assert (x320 x660))
(assert (= x799 (and x838 x647)))
(assert (x320 x563))
(assert (x909 (x955 (- (x540 x1135) (x540 x584)))))
(assert (x909 (x955 (- (x540 x390) (x540 x1319)))))
(assert (=> (>= 10000 x743) (= (x891 x743) (x400 x743))))
(assert (x320 x970))
(assert (x909 (x955 (- (x540 x877) (x540 x967)))))
(assert (x320 x556))
(assert (=> (>= 10000 x759) (= (x891 x759) (x400 x759))))
(assert (= (and x496 (not x385)) x1052))
(assert (x320 x358))
(assert (= (x891 (x540 x1117)) x1117))
(assert (x320 x54))
(assert (let ((x242 (- (x540 x745) (x540 x1324)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1339))
(assert (= (or x783 (and (not x1141) x786)) x1070))
(assert (= x89 (or x418 x22)))
(assert (= (or x207 (and x302 x165)) x508))
(assert (x320 x150))
(assert (=> (>= 10000 x45) (= (x891 x45) (x400 x45))))
(assert (x320 x70))
(assert (= (x540 (x322 x386 x603)) (+ x603 (x540 x386))))
(assert (= x940 (=> (and (<= 0 x1200) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1200) (= (x994 (x955 (- (x540 x881) (x540 x956))) 1) x1192) x1340 (= x1219 (not (> x157 224))) (= (< x1200 1461501637330902918203684832716283019655932542975) x1340) (= (x656 (x400 0) 0) x956) (= (x473 x881) x1200)) (and x59 x1219))))
(assert (x320 x287))
(assert (x320 x829))
(assert (= (+ (x540 x1018) x951) (x540 (x322 x1018 x951))))
(assert (x320 x922))
(assert (x320 x313))
(assert (x320 x772))
(assert (=> (>= 10000 x323) (= (x891 x323) (x400 x323))))
(assert (x320 x1276))
(assert (x320 x622))
(assert (x320 x1292))
(assert (x320 x1108))
(assert (= x1350 (and x1287 x183)))
(assert (x320 x663))
(assert (= x956 (x891 (x540 x956))))
(assert (=> (<= x431 10000) (= (x891 x431) (x400 x431))))
(assert (x320 x824))
(assert (= (and x417 x426) x1014))
(assert (= (x540 (x322 x243 1)) (+ (x540 x243) 1)))
(assert (x320 x555))
(assert (x909 (x955 (- (x540 x745) (x540 x1324)))))
(assert (x320 x574))
(assert (x320 x538))
(assert (x320 x60))
(assert (= (or x593 x17) x310))
(assert (= (x891 1572751336) (x400 1572751336)))
(assert (x320 x1344))
(assert (let ((x242 (- (x540 x488) (x540 x675)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x540 (x322 x1239 x132)) (+ x132 (x540 x1239))))
(assert (x320 x449))
(assert (= x232 (x891 (x540 x232))))
(assert (x742 (- (x540 x1135) (x540 x584))))
(assert (x320 x599))
(assert (x320 x872))
(assert (= x168 (or x143 (and (not x938) x1278))))
(assert (x320 x899))
(assert (x320 x380))
(assert (= (x891 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x400 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (let ((x242 (- (x540 x1050) (x540 x38)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1306))
(assert (x742 (- (x540 x877) (x540 x967))))
(assert (= (=> (and (<= x66 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x656 (x400 0) 0) x568) (<= 0 x66) (= (< x66 1461501637330902918203684832716283019655932542975) x99) (= x66 (x473 x810)) (= (x994 (x955 (- (x540 x810) (x540 x568))) 1) x184) x99 (= (not (> x660 224)) x904)) (and x904 x863)) x1069))
(assert (x320 x44))
(assert (= x512 (or x333 x1299)))
(assert (x320 x1313))
(assert (x320 x521))
(assert (x320 x226))
(assert (= (or x159 (and x1088 (not x852))) x201))
(assert (= x733 (and x1256 x1106)))
(assert (x320 x923))
(assert (= (x540 (x400 2485876314)) 2485876314))
(assert (x320 x431))
(assert (x320 x1318))
(assert (x320 x953))
(assert (let ((x242 (x955 (- (x540 x810) (x540 x568))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x540 (x891 x244)) x244))
(assert (x320 x670))
(assert (x320 x1186))
(assert (let ((x242 (x955 (- (x540 x534) (x540 x744))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x724))
(assert (x320 x1212))
(assert (x320 x798))
(assert (x320 x528))
(assert (= x801 (=> (and x637 (= x1146 (x994 (x955 (- (x540 x960) (x540 x1140))) 1)) (= (x656 (x400 0) 0) x1140) (= x849 (x473 x960)) (<= x849 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> 1461501637330902918203684832716283019655932542975 x849) x637) (<= 0 x849) (= x1053 (not (< 224 x1056)))) (and x1053 x800))))
(assert (x320 x1302))
(assert (=> (<= x51 10000) (= (x891 x51) (x400 x51))))
(assert (x320 x486))
(assert (= x143 (and x938 x1278)))
(assert (x320 x203))
(assert (x320 x793))
(assert (= x476 (and (not x1184) x39)))
(assert (x320 x1185))
(assert (=> (>= 10000 x1048) (= (x891 x1048) (x400 x1048))))
(assert (x320 x367))
(assert (= (+ (x540 x1058) 1) (x540 (x322 x1058 1))))
(assert (x742 (- (x540 x960) (x540 x1140))))
(assert (x320 x10))
(assert (= x1348 (and x1329 (not x111))))
(assert (x320 x437))
(assert (x320 x847))
(assert (let ((x242 (- (x540 x243) (x540 x4)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x323 (x540 (x891 x323))))
(assert (x320 x45))
(assert (= 954915356 (x540 (x400 954915356))))
(assert (= x51 (x540 (x891 x51))))
(assert (=> (>= 10000 x530) (= (x891 x530) (x400 x530))))
(assert (x320 x631))
(assert (x320 x220))
(assert (let ((x242 (- (x540 x1171) (x540 x1261)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x742 (- (x540 x898) (x540 x485))))
(assert (= (=> (and (= x865 (< x753 1461501637330902918203684832716283019655932542975)) (= x1251 (x656 (x400 0) 0)) (= (x473 x267) x753) x865 (>= x753 0) (= (not (< 224 x999)) x298) (= (x994 (x955 (- (x540 x267) (x540 x1251))) 1) x611) (<= x753 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and x1237 x298)) x548))
(assert (x909 (x955 (- (x540 x267) (x540 x1251)))))
(assert (x892 x759))
(assert (x320 x394))
(assert (= x93 (x891 (x540 x93))))
(assert (x320 x1146))
(assert (x320 x1345))
(assert (x320 x160))
(assert (x320 x928))
(assert (= (and x422 x835) x707))
(assert (x320 x597))
(assert (= x239 (x540 (x891 x239))))
(assert (= (x891 (x540 x441)) x441))
(assert (let ((x242 (x955 (- (x540 x243) (x540 x4))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (or (and x1341 x565) x48) x1033))
(assert (= x779 (=> (and (= x1117 (x656 (x400 0) 0)) x1250 (<= 0 x1016) (= x1268 (x994 (x955 (- (x540 x683) (x540 x1117))) 1)) (= x525 (not (< 224 x649))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1016) (= x1250 (< x1016 1461501637330902918203684832716283019655932542975)) (= (x473 x683) x1016)) (and x525 x253))))
(assert (x320 x581))
(assert (= (=> (and (and (and (= x262 (not (= x984 0))) (= (x767 (x891 x239) (x400 1) 0) x1166) (= (x208 x1166) x984) (= 0 x869) (not (< x256 1729973928)) (= x1107 x808) (= x239 x957) (<= x984 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x239 1461501637330902918203684832716283019655932542975) (= 1729973928 x256) (<= 0 x984) (= x182 (x570 (x891 x971))) (= 0 x226) (< 0 x182)) (or (and (and (= (x767 (x891 x239) (x400 1) 0) x347) (<= 0 x219) (= x480 (x913 (- x219 1))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x219) (= x219 (x208 x347)) (= x247 x709) (= (x583 (+ 1 x480)) x709) (= x1259 0) (= 0 x87) (not (< x219 1))) x262) (and (= 0 x247) (not x262)))) (= x1107 x858)) x598) x63))
(assert (x320 x654))
(assert (x320 x611))
(assert (x320 x1259))
(assert (x320 x343))
(assert (x320 x413))
(assert (x320 x277))
(assert (x320 x412))
(assert (x742 (- (x540 x444) (x540 x1041))))
(assert (= (and x807 (not x340)) x539))
(assert (x320 x603))
(assert (x320 x840))
(assert (x320 x869))
(assert (= (=> (and (and (= 128 x70) (= (< x337 x118) x350) (= x118 (x627 128)) (= 128 x1322)) (or (and x350 (and (= x110 x1185) (= x1225 (x656 (x400 0) 0)) (= x130 (< x110 1461501637330902918203684832716283019655932542975)) (> x547 x1073) (= 0 x1028) (>= x110 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x110) (= x590 0) x130 (= x587 (x322 x1225 x337)) (= (x473 x587) x110))) (and (= 0 x1185) (not x350)))) x857) x68))
(assert (= x38 (x891 (x540 x38))))
(assert (x320 x77))
(assert (x320 x149))
(assert (x909 (x955 (- (x540 x243) (x540 x4)))))
(assert (x320 x768))
(assert (x892 x45))
(assert (= x1007 (and x1381 (not x1035))))
(assert (x909 (x955 (- (x540 x488) (x540 x675)))))
(assert (= (x540 (x322 x1125 1)) (+ (x540 x1125) 1)))
(assert (x320 x722))
(assert (x1167 x547))
(assert (= (and (not x1230) x328) x537))
(assert (x320 x1264))
(assert (= (x540 (x322 x93 1)) (+ (x540 x93) 1)))
(assert (x320 x1260))
(assert (x320 x1012))
(assert (= x197 (or x1006 (and (not x338) x476))))
(assert (= (and x1382 x895) x319))
(assert (x320 x1293))
(assert (x320 x245))
(assert (let ((x242 (x955 (- (x540 x851) (x540 x216))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x1102))
(assert (x320 x292))
(assert (x320 x23))
(assert (x320 x25))
(assert (= x278 (x891 (x540 x278))))
(assert (let ((x242 (x955 (- (x540 x745) (x540 x1324))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x540 (x322 x1152 1)) (+ (x540 x1152) 1)))
(assert (x320 x1252))
(assert (let ((x242 (x955 (- (x540 x1356) (x540 x1352))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x424))
(assert (x320 x398))
(assert (let ((x242 (- (x540 x1164) (x540 x1074)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x968 (and x561 x508)))
(assert (x320 x20))
(assert (= x1356 (x891 (x540 x1356))))
(assert (x320 x546))
(assert (x320 x990))
(assert (x320 x1072))
(assert (= x117 x80))
(assert (x320 x110))
(assert (x320 x1187))
(assert (= x128 (x891 (x540 x128))))
(assert (x320 x711))
(assert (x320 x916))
(assert (x320 x790))
(assert (= x1362 (x891 (x540 x1362))))
(assert (x320 x404))
(assert (x320 x559))
(assert (x320 x1073))
(assert (x320 x205))
(assert (= x462 (x540 (x891 x462))))
(assert (x320 x702))
(assert (= (and x539 x879) x356))
(assert (x320 x1181))
(assert (= true x529))
(assert (= x58 (and x493 (not x27))))
(assert (x909 (x955 (- (x540 x402) (x540 x1065)))))
(assert (=> (<= x1181 10000) (= (x400 x1181) (x891 x1181))))
(assert (= x1149 (and x451 x375)))
(assert (= x1209 (=> (and (= (x656 (x400 0) 0) x11) x308 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54) (= (> 1461501637330902918203684832716283019655932542975 x54) x308) (= x411 (x994 (x955 (- (x540 x1081) (x540 x11))) 1)) (>= x54 0) (= x54 (x473 x1081)) (= (not (< 224 x363)) x478)) (and x478 x1360))))
(assert (x320 x900))
(assert (x320 x469))
(assert (x320 x510))
(assert (x320 x787))
(assert (let ((x242 (x955 (- (x540 x267) (x540 x1251))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x259))
(assert (x320 x1048))
(assert (= x1319 (x891 (x540 x1319))))
(assert (x320 x936))
(assert (x320 x145))
(assert (= (x540 (x322 x741 x1294)) (+ x1294 (x540 x741))))
(assert (x320 x762))
(assert (x320 x962))
(assert (= (and x861 x564) x1019))
(assert (let ((x242 (x955 (- (x540 x1125) (x540 x836))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x742 (- (x540 x1105) (x540 x442))))
(assert (= (x891 (x540 x238)) x238))
(assert (= (x891 (x540 x11)) x11))
(assert (x320 x421))
(assert (x909 (x955 (- (x540 x677) (x540 x1057)))))
(assert (x320 x490))
(assert (= (x891 (x540 x488)) x488))
(assert (x909 (x955 (- (x540 x164) (x540 x278)))))
(assert (let ((x242 (- (x540 x267) (x540 x1251)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x909 1))
(assert (= x1171 (x891 (x540 x1171))))
(assert (= (x540 (x891 x743)) x743))
(assert (x742 (- (x540 x164) (x540 x278))))
(assert (x909 (x955 (- (x540 x1005) (x540 x1369)))))
(assert (x320 x270))
(assert (x320 x517))
(assert (= x1115 (or (and x466 x170) x506)))
(assert (x320 x131))
(assert (x320 x1314))
(assert (let ((x242 (- (x540 x960) (x540 x1140)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x742 (- (x540 x745) (x540 x1324))))
(assert (x320 x318))
(assert (x320 x701))
(assert (= x164 (x891 (x540 x164))))
(assert (and (= 81 (x324 27 3)) (= (x324 9 9) 81) (= (x324 3 3) 9) (= (x324 9 3) 27)))
(assert (x320 x374))
(assert (x892 x743))
(assert (x320 x446))
(assert (= x395 (or (and x834 x549) x1335)))
(assert (x320 x924))
(assert (x320 x1112))
(assert (x320 x1056))
(assert (= (and x1022 (not x114)) x946))
(assert (x320 x1096))
(assert (= (or x434 (and x886 x1170)) x947))
(assert (x320 x579))
(assert (x320 x988))
(assert (x320 x882))
(assert (let ((x242 (x955 (- (x540 x1164) (x540 x1074))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (=> (<= x1185 10000) (= (x400 x1185) (x891 x1185))))
(assert (x320 x527))
(assert (x320 x192))
(assert (x320 x1208))
(assert (=> (<= x312 10000) (= (x400 x312) (x891 x312))))
(assert (= (x891 (x540 x1176)) x1176))
(assert (= 1250999895 (x540 (x400 1250999895))))
(assert (x320 x976))
(assert (x320 x1139))
(assert (x909 (x955 (- (x540 x1356) (x540 x1352)))))
(assert (= (or (and (not x1246) x644) x88) x204))
(assert (x320 x194))
(assert (x320 x991))
(assert (x320 x808))
(assert (= x714 (=> (and (and (= (< x132 x1036) x1087) (= x335 128) (= x1036 (x78 128)) (= 128 x131)) (or (and (= x1203 0) (not x1087)) (and (and (= x728 (x322 x1239 x132)) (= x1239 (x656 (x400 0) 0)) (= 0 x667) (= (x473 x728) x394) x1165 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x394) (= x1203 x394) (= x399 0) (= x1165 (> 1461501637330902918203684832716283019655932542975 x394)) (>= x394 0) (> x547 x357)) x1087))) x756)))
(assert (= (and (not x262) x254) x175))
(assert (= (x540 (x322 x13 x67)) (+ (x540 x13) x67)))
(assert (x320 x1357))
(assert (x320 x619))
(assert (= x1105 (x891 (x540 x1105))))
(assert (x742 (- (x540 x677) (x540 x1057))))
(assert (let ((x242 (x955 (- (x540 x1005) (x540 x1369))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x742 (- (x540 x1125) (x540 x836))))
(assert (= x112 (and (not x945) x512)))
(assert (x320 x831))
(assert (x320 x679))
(assert (x742 (- (x540 x1380) (x540 x428))))
(assert (x892 x239))
(assert (x892 x312))
(assert (x320 x1213))
(assert (x320 x837))
(assert (x320 x873))
(assert (x320 x1028))
(assert (= x119 (=> (and (= x326 (not (> x504 224))) (= x760 (x994 (x955 (- (x540 x1135) (x540 x584))) 1)) x678 (<= x1291 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x1291 0) (= (< x1291 1461501637330902918203684832716283019655932542975) x678) (= (x473 x1135) x1291) (= x584 (x656 (x400 0) 0))) (and x326 x969))))
(assert (= (or x332 (and x397 x83)) x163))
(assert (x742 (- (x540 x93) (x540 x1229))))
(assert (= x948 (and x1301 x1029)))
(assert (= (x891 (x540 x967)) x967))
(assert (= (x891 (x540 x1125)) x1125))
(assert (= x786 (and (not x1010) x526)))
(assert (x320 x1160))
(assert (= x221 (x891 (x540 x221))))
(assert (x320 x391))
(assert (x320 x235))
(assert (x320 x1172))
(assert (= x475 (or x1332 (and (not x1128) x608))))
(assert (let ((x242 (x955 (- (x540 x232) (x540 x777))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x1026 (and x163 (not x870))))
(assert (= x1062 x754))
(assert (= (x891 (x540 x881)) x881))
(assert (x320 x240))
(assert (x320 x719))
(assert (= (=> (and (and (= 128 x435) (= 128 x1097) (= x635 (x839 128)) (= (> x635 x640) x1060)) (or (and (= 0 x1358) (not x1060)) (and x1060 (and (= x1090 0) (= x731 (x322 x531 x640)) (= (< x576 1461501637330902918203684832716283019655932542975) x71) x71 (>= x576 0) (= x620 0) (= x531 (x656 (x400 0) 0)) (> x547 x1199) (= x576 x1358) (= (x473 x731) x576) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x576))))) x985) x345))
(assert (x320 x366))
(assert (= x941 (=> (and (and (= x357 x132) (= x231 (x570 (x891 x971))) (= (= x547 0) x817) (not (= x823 2485876314)) (= x823 3686129278) (not (= 1729973928 x823)) (= x748 1) (not (> 1729973928 x823)) (= (x913 (- x928 x748)) x132) (= x467 0) (= x329 0) (not (= x823 2429653569)) (= x685 x928) (> x231 0)) (and (= x685 x1174) (= x1174 (x406 128)) (= 128 x218) (= x440 128))) (and (=> x817 x714) (=> (and (not x817) (and (= x1331 (x473 x441)) (= (x583 (+ 160 x929)) x649) (= x683 (x322 x441 1)) (= (x955 (* 32 x547)) x929) (= x441 (x656 (x400 0) 0)) x1136 (= (x656 (x400 0) 0) x6) (= (< x1331 1461501637330902918203684832716283019655932542975) x1136) (<= 0 x1331) (= (< 192 x649) x838) (<= x1331 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x994 (x955 (- (x540 x441) (x540 x6))) 1) x953))) (and (=> (not x838) x253) (=> x838 x779)))))))
(assert (= (or (and x526 x1010) x1070) x886))
(assert (x320 x1288))
(assert (x320 x973))
(assert (x320 x334))
(assert (= (and x1104 x815) x802))
(assert (x320 x1038))
(assert (x320 x1220))
(assert (x892 x1203))
(assert (x892 x462))
(assert (= (+ (x540 x1380) 1) (x540 (x322 x1380 1))))
(assert (= (=> (and (and (not (= x798 701022898)) (= (= x547 0) x340) (not (= x798 954915356)) (= x681 x287) (= x318 0) (< x798 1729973928) (= (x570 (x891 x971)) x261) (< 0 x261) (= x798 1250999895) (= 0 x245)) (= x287 x639)) (and (=> x340 x941) (=> (and (not x340) (and (= x460 (x322 x243 1)) (= x243 (x656 (x400 0) 0)) (<= 0 x702) (= x702 (x473 x243)) x739 (= x703 (x583 (+ x1205 160))) (= (x656 (x400 0) 0) x4) (<= x702 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x794 (x994 (x955 (- (x540 x243) (x540 x4))) 1)) (= x739 (> 1461501637330902918203684832716283019655932542975 x702)) (= x1205 (x955 (* x547 32))) (= x879 (< 192 x703)))) (and (=> x879 x1343) (=> (not x879) x925))))) x694))
(assert (x320 x305))
(assert (x320 x984))
(assert (= x734 (=> (and (>= x926 0) (<= x926 115792089237316195423570985008687907853269984665640564039457584007913129639935) x933 (= (not (> x981 224)) x1161) (= (x994 (x955 (- (x540 x390) (x540 x1319))) 1) x236) (= x926 (x473 x390)) (= x1319 (x656 (x400 0) 0)) (= (< x926 1461501637330902918203684832716283019655932542975) x933)) (and x550 x1161))))
(assert (x320 x893))
(assert (let ((x242 (- (x540 x441) (x540 x6)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x199))
(assert (x320 x9))
(assert (x320 x445))
(assert (x320 x907))
(assert (x320 x1168))
(assert (let ((x242 (x955 (- (x540 x1066) (x540 x221))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x1321))
(assert (= (x891 (x540 x1123)) x1123))
(assert (= (=> (and (= x249 (x473 x1171)) (= x1261 (x656 (x400 0) 0)) (= x405 (not (> x1001 224))) (= x513 (> 1461501637330902918203684832716283019655932542975 x249)) (= x1306 (x994 (x955 (- (x540 x1171) (x540 x1261))) 1)) (<= x249 115792089237316195423570985008687907853269984665640564039457584007913129639935) x513 (>= x249 0)) (and x471 x405)) x708))
(assert (x320 x218))
(assert (x320 x672))
(assert (= x534 (x891 (x540 x534))))
(assert (x320 x1023))
(assert (let ((x242 (x955 (- (x540 x43) (x540 x1031))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x444 (x891 (x540 x444))))
(assert (x320 x1004))
(assert (x320 x504))
(assert (x320 x21))
(assert (x320 x1286))
(assert (x320 x280))
(assert (x320 x668))
(assert (x320 x372))
(assert (x742 (- (x540 x1005) (x540 x1369))))
(assert (x320 x1241))
(assert (x320 x993))
(assert (x320 x942))
(assert (x320 x373))
(assert (= (x540 (x322 x531 x640)) (+ (x540 x531) x640)))
(assert (= (x540 (x400 701022898)) 701022898))
(assert (x320 x693))
(assert (x320 x652))
(assert (x320 x1059))
(assert (x320 x910))
(assert (= (and x1158 x1311) x364))
(assert (x909 (x955 (- (x540 x898) (x540 x485)))))
(assert (x892 x367))
(assert (= x721 (and x520 x193)))
(assert (let ((x242 (x955 (- (x540 x460) (x540 x1176))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x1001))
(assert (= (and x591 x947) x1299))
(assert (x320 x716))
(assert (= (=> (and (= x671 (< x1351 1461501637330902918203684832716283019655932542975)) (<= x1351 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x994 (x955 (- (x540 x232) (x540 x777))) 1) x822) (= x1351 (x473 x232)) x671 (= x726 (not (< 224 x752))) (<= 0 x1351) (= x777 (x656 (x400 0) 0))) (and x1037 x726)) x1279))
(assert (let ((x242 (x955 (- (x540 x898) (x540 x485))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x624))
(assert (x320 x789))
(assert (x320 x585))
(assert (= x207 (or (and (not x422) x835) x707)))
(assert (x320 x182))
(assert (x320 x32))
(assert (x320 x764))
(assert (= x863 x860))
(assert (let ((x242 (x955 (- (x540 x1064) (x540 x1270))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (+ 1 (x540 x488)) (x540 (x322 x488 1))))
(assert (x320 x29))
(assert (= (x540 (x891 x45)) x45))
(assert (let ((x242 (x955 (- (x540 x1135) (x540 x584))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x580))
(assert (x320 x639))
(assert (x320 x107))
(assert (x909 (x955 (- (x540 x1164) (x540 x1074)))))
(assert (= (x891 (x540 x1270)) x1270))
(assert (= (=> (and (= x148 x413) (and (and (= x75 (not x90)) (= (not x875) x90) (= (x570 (x891 x971)) x634) (= x614 0) (not (= x82 701022898)) (= x1147 x148) (<= x964 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x208 x658) x964) (> x634 0) (= 0 x419) (>= 1461501637330902918203684832716283019655932542975 x1048) (= x658 (x767 (x891 x1048) (x400 1) 0)) (> 1729973928 x82) (not (= 954915356 x82)) (= (not (= 0 x964)) x875) (= 1572751336 x82) (= x957 x1048) (not (= x82 1250999895)) (>= x964 0) (= x682 (not (= x1147 x911))) (= x604 (ite x75 1 0))) (and (= x821 1250999895) (> x284 0) (= (x570 (x891 x971)) x284) (not (= 701022898 x821)) (= x21 0) (= x369 x156) (= (and x369 x682) x1129) (= x1218 0) (= (not (= 0 x604)) x156) (< x821 1729973928) (= x1230 (= 0 x547)) (not (= x821 954915356))))) (and (=> x1230 x269) (=> (and (not x1230) (and (= (< 192 x1001) x804) (= (> 1461501637330902918203684832716283019655932542975 x935) x455) x455 (= x880 (x955 (* x547 32))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x935) (>= x935 0) (= x40 (x656 (x400 0) 0)) (= x1171 (x322 x1152 1)) (= x1001 (x583 (+ x880 160))) (= (x473 x1152) x935) (= x463 (x994 (x955 (- (x540 x1152) (x540 x40))) 1)) (= x1152 (x656 (x400 0) 0)))) (and (=> (not x804) x471) (=> x804 x708))))) x569))
(assert (x320 x1274))
(assert (x320 x1222))
(assert (x320 x758))
(assert (x320 x261))
(assert (x320 x1377))
(assert (x320 x919))
(assert (x320 x623))
(assert (= (x891 (x540 x1229)) x1229))
(assert (x742 (- (x540 x688) (x540 x128))))
(assert (= (x891 (x540 x1065)) x1065))
(assert (= x108 (or (and x1104 (not x815)) x802)))
(assert (x742 (- (x540 x1171) (x540 x1261))))
(assert (= x1042 (and (not x1330) x974)))
(assert (let ((x242 (x955 (- (x540 x1050) (x540 x38))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x229))
(assert (= x253 x714))
(assert (x320 x843))
(assert (x320 x423))
(assert (= (and (not x1157) x310) x1047))
(assert (= (and x543 x1115) x255))
(assert (x320 x649))
(assert (x320 x646))
(assert (let ((x242 (x955 (- (x540 x1171) (x540 x1261))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x590))
(assert (x320 x223))
(assert (x320 x1036))
(assert (= x30 (=> (and (or (and (and (>= x1384 0) (= 0 x1021) (= x1384 x323) (= (x322 x562 x871) x125) (< x516 x547) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1384) (= x1384 (x473 x125)) (= x1188 (> 1461501637330902918203684832716283019655932542975 x1384)) (= x629 0) (= x562 (x656 (x400 0) 0)) x1188) x870) (and (= x323 0) (not x870))) (and (= x1221 128) (= (x643 128) x878) (= x1132 128) (= (> x878 x871) x870))) x1020)))
(assert (= (or x55 (and x340 x807)) x686))
(assert (x320 x173))
(assert (x320 x720))
(assert (= (=> (and (and (not (= x1067 954915356)) (= 0 x992) (= x854 x769) (= x268 (= x547 0)) (= x1363 0) (> 1729973928 x1067) (not (= 701022898 x1067)) (= x124 (x570 (x891 x971))) (< 0 x124) (= x1067 1250999895)) (= x854 x1248)) (and (=> x268 x765) (=> (and (not x268) (and (= x1156 (> x981 192)) (= (x955 (* x547 32)) x62) (= x1031 (x656 (x400 0) 0)) (= x56 (< x962 1461501637330902918203684832716283019655932542975)) (<= 0 x962) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x962) (= (x322 x43 1) x390) (= (x656 (x400 0) 0) x43) x56 (= (x473 x43) x962) (= x981 (x583 (+ x62 160))) (= (x994 (x955 (- (x540 x43) (x540 x1031))) 1) x491))) (and (=> (not x1156) x550) (=> x1156 x734))))) x414))
(assert (= (+ 1 (x540 x1005)) (x540 (x322 x1005 1))))
(assert (= (and (not x165) x302) x835))
(assert (= (=> (and (= x60 x383) (and (and (= x95 (x208 x809)) (<= x693 1461501637330902918203684832716283019655932542975) (= (not (= x681 x856)) x983) (not (> 1729973928 x79)) x191 (= (x570 (x891 x971)) x980) (= x695 0) (= x957 x693) (= x191 (or (not x501) x983)) (= 0 x679) (= x383 x856) (= 1729973928 x79) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x95) (= x114 (not (= x95 0))) (>= x95 0) (< 0 x980) (= (x767 (x891 x693) (x400 1) 0) x809)) (or (and x114 (and (= x401 (x767 (x891 x693) (x400 1) 0)) (= (x913 (- x775 1)) x1254) (<= x775 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x583 (+ 1 x1254)) x392) (= x445 0) (not (> 1 x775)) (= x775 (x208 x401)) (<= 0 x775) (= x1310 0) (= x1248 x392))) (and (not x114) (= 0 x1248))))) x414) x355))
(assert (= (=> (and x1242 (= (not (> x169 224)) x1127) (<= 0 x140) (= x140 (x473 x688)) (= (x656 (x400 0) 0) x128) (= x1378 (x994 (x955 (- (x540 x688) (x540 x128))) 1)) (<= x140 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> 1461501637330902918203684832716283019655932542975 x140) x1242)) (and x1127 x754)) x848))
(assert (x320 x18))
(assert (x320 x1282))
(assert (x320 x1383))
(assert (= x756 (=> (and (= x1203 x1344) (and (and (<= x1203 1461501637330902918203684832716283019655932542975) (not (< x782 1729973928)) (= x977 0) (= x670 (x570 (x891 x971))) (= (x767 (x891 x1203) (x400 1) 0) x113) (> x670 0) (= x123 0) (<= 0 x1220) (= 1729973928 x782) (<= x1220 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1157 (not (= x1220 0))) (= (x208 x113) x1220)) (or (and (not x1157) (= 0 x60)) (and (and (= x19 0) (= 0 x459) (= (x583 (+ 1 x546)) x1244) (= (x767 (x891 x1203) (x400 1) 0) x1315) (= x546 (x913 (- x294 1))) (= x60 x1244) (= (x208 x1315) x294) (>= x294 0) (not (> 1 x294)) (<= x294 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x1157)))) x355)))
(assert (= x1119 (x891 (x540 x1119))))
(assert (x320 x748))
(assert (= x757 (=> (and (= (x913 (- x547 1)) x951) (= (x767 (x891 x51) (x400 1) 0) x784) (= x315 1) (= (x656 (x400 0) 0) x1018) (= x563 x16) (< 0 x547) (= x563 (x913 (- x547 1))) (= (x322 x1018 x951) x407)) x127)))
(assert (x320 x399))
(assert (= (+ (x540 x868) x586) (x540 (x322 x868 x586))))
(assert (= (and (not x487) x81) x183))
(assert (= (=> (and (= x609 x1276) (and (and (>= 1461501637330902918203684832716283019655932542975 x1181) (= x655 x1181) (= x353 (not (= x316 0))) (= x205 0) (= (not x353) x699) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x316) (not (= 954915356 x500)) (= (x767 (x891 x1181) (x400 1) 0) x896) (< x500 1729973928) (= x500 1572751336) (not (= 1250999895 x500)) (= (x570 (x891 x971)) x373) (not (= x500 701022898)) (= x1293 x1276) (<= 0 x316) (= x316 (x208 x896)) (= (not (= x1003 x1293)) x211) (= x764 (ite x1376 1 0)) (= x1093 0) (= x1376 (not x699)) (< 0 x373)) (and (= 0 x116) (= (and x1091 x211) x846) (= 1250999895 x74) (not (= x74 954915356)) (not (= x74 701022898)) (< 0 x776) (= x1253 (not (= x764 0))) (< x74 1729973928) (= (x570 (x891 x971)) x776) (= x1091 x1253) (= x945 (= 0 x547)) (= x638 0)))) (and (=> (and (not x945) (and (= x363 (x583 (+ x277 160))) (= x444 (x656 (x400 0) 0)) (>= x479 0) x1296 (= (< 192 x363) x524) (= (x656 (x400 0) 0) x1041) (= (x955 (* 32 x547)) x277) (= (x994 (x955 (- (x540 x444) (x540 x1041))) 1) x1314) (<= x479 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1081 (x322 x444 1)) (= (x473 x444) x479) (= x1296 (< x479 1461501637330902918203684832716283019655932542975)))) (and (=> (not x524) x1360) (=> x524 x1209))) (=> x945 x314))) x636))
(assert (x909 (x955 (- (x540 x489) (x540 x499)))))
(assert (= x328 (or x381 x968)))
(assert (= x418 (and x1138 (not x215))))
(assert (x320 x357))
(assert (x742 (- (x540 x489) (x540 x499))))
(assert (x320 x1110))
(assert (= (x891 (x540 x584)) x584))
(assert (x320 x411))
(assert (x320 x1150))
(assert (x320 x888))
(assert (=> (>= 10000 x866) (= (x400 x866) (x891 x866))))
(assert (let ((x242 (- (x540 x164) (x540 x278)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x891 (x540 x683)) x683))
(assert (x892 x1048))
(assert (x320 x479))
(assert (= x345 x1216))
(assert (= x39 (or x103 x255)))
(assert (x320 x300))
(assert (x320 x833))
(assert (x320 x911))
(assert (x320 x312))
(assert (= (x891 (x540 x1066)) x1066))
(assert (= (=> (and (and (= x1096 x577) (= x597 128) (= x1096 (x246 128)) (= 128 x589)) (and (not (> 1729973928 x998)) (= (x570 (x891 x971)) x9) (= 0 x91) (not (= x998 1729973928)) (< 0 x9) (= x100 1) (= x466 (= x547 0)) (= 0 x222) (not (= x998 2485876314)) (= x973 x1094) (= x527 x577) (= x973 (x913 (- x527 x100))) (not (= x998 2429653569)) (= 3686129278 x998))) (and (=> (and (and (= x867 (x994 (x955 (- (x540 x677) (x540 x1057))) 1)) (= x402 (x322 x677 1)) (= x1057 (x656 (x400 0) 0)) (= x1338 (< 192 x166)) x746 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x343) (= (x583 (+ x619 160)) x166) (= x343 (x473 x677)) (<= 0 x343) (= x619 (x955 (* 32 x547))) (= (> 1461501637330902918203684832716283019655932542975 x343) x746) (= (x656 (x400 0) 0) x677)) (not x466)) (and (=> (not x1338) x117) (=> x1338 x217))) (=> x466 x80))) x1194))
(assert (x742 (- (x540 x43) (x540 x1031))))
(assert (x320 x571))
(assert (= (x400 954915356) (x891 954915356)))
(assert (= (and x2 (not x630)) x1158))
(assert (x892 x431))
(assert (x742 (- (x540 x267) (x540 x1251))))
(assert (= (=> (and x263 (= x1334 (x994 (x955 (- (x540 x534) (x540 x744))) 1)) (= x1222 (x473 x534)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1222) (= x263 (< x1222 1461501637330902918203684832716283019655932542975)) (<= 0 x1222) (= (not (> x1102 224)) x737) (= x744 (x656 (x400 0) 0))) (and x737 x50)) x461))
(assert (= x81 (or (and x551 x705) x168)))
(assert (= (x891 (x540 x1050)) x1050))
(assert (x320 x1121))
(assert (= (or x1305 x1232) x1029))
(assert (x320 x706))
(assert (x320 x1386))
(assert (x320 x177))
(assert (x320 x541))
(assert (= (x891 (x540 x1074)) x1074))
(assert (= (x891 (x540 x1041)) x1041))
(assert (x909 (x955 (- (x540 x1058) (x540 x1362)))))
(assert (x320 x249))
(assert (= (and x163 x870) x354))
(assert (x320 x419))
(assert (= x1144 (x891 (x540 x1144))))
(assert (= x859 (and x1042 x894)))
(assert (x320 x239))
(assert (=> (>= 10000 x971) (= (x891 x971) (x400 x971))))
(assert (x320 x1030))
(assert (= x496 (or x1320 (and x1330 x974))))
(assert (x892 x1181))
(assert (x320 x1118))
(assert (x320 x1021))
(assert (x320 x965))
(assert (= x276 (or x751 (and x487 x81))))
(assert (x892 x323))
(assert (= (x891 (x540 x402)) x402))
(assert (x320 x560))
(assert (x909 (x955 (- (x540 x810) (x540 x568)))))
(assert (x320 x264))
(assert (x320 x491))
(assert (= (or x354 x1026) x451))
(assert (x320 x889))
(assert (x892 x244))
(assert (= x1031 (x891 (x540 x1031))))
(assert (= (x540 (x891 x530)) x530))
(assert (x320 x1358))
(assert (x320 x456))
(assert (= (and x886 (not x1170)) x902))
(assert (x320 x692))
(assert (= (or (and (not x879) x539) x356) x55))
(assert (x320 x1243))
(assert (x320 x69))
(assert (x320 x123))
(assert (= (x891 (x540 x40)) x40))
(assert (x320 x31))
(assert (x320 x769))
(assert (let ((x242 (- (x540 x390) (x540 x1319)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x155))
(assert (x320 x454))
(assert (= (x891 (x540 x489)) x489))
(assert (= (x540 (x891 x759)) x759))
(assert (= (or x1025 (and (not x1374) x902)) x434))
(assert (let ((x242 (x955 (- (x540 x683) (x540 x1117))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (or x1109 (and x537 (not x804))) x359))
(assert (x320 x212))
(assert (= x24 (=> (and (and (= x149 128) (= x842 x85) (= x842 (x61 128)) (= x458 128)) (and (not (= 1729973928 x29)) (not (< x29 1729973928)) (= (x570 (x891 x971)) x1168) (= x29 3686129278) (= x67 (x913 (- x893 x1169))) (not (= 2485876314 x29)) (= 1 x1169) (= x85 x893) (= 0 x1121) (= x711 0) (> x1168 0) (= (= 0 x547) x1170) (= x1383 x67) (not (= 2429653569 x29)))) (and (=> x1170 x1000) (=> (and (and (= (> 1461501637330902918203684832716283019655932542975 x1118) x1027) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1118) (= x1118 (x473 x1119)) (= x1236 (x994 (x955 (- (x540 x1119) (x540 x439))) 1)) (= (x583 (+ x623 160)) x133) (= (x656 (x400 0) 0) x439) (= (x656 (x400 0) 0) x1119) (<= 0 x1118) (= (x955 (* 32 x547)) x623) x1027 (= (> x133 192) x1374) (= (x322 x1119 1) x1064)) (not x1170)) (and (=> (not x1374) x96) (=> x1374 x616)))))))
(assert (x320 x138))
(assert (x320 x760))
(assert (x320 x997))
(assert (x909 (x955 (- (x540 x1066) (x540 x221)))))
(assert (= (x891 (x540 x744)) x744))
(assert (let ((x242 (x955 (- (x540 x1119) (x540 x439))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x891 (x540 x1211)) x1211))
(assert (x320 x118))
(assert (= x1194 x283))
(assert (x320 x16))
(assert (x320 x76))
(assert (= (x540 (x891 x866)) x866))
(assert (x320 x532))
(assert (x320 x383))
(assert (x320 x304))
(assert (= (=> (and (= x181 (> 1461501637330902918203684832716283019655932542975 x939)) (= x304 (x994 (x955 (- (x540 x700) (x540 x1123))) 1)) (= (x473 x700) x939) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x939) (<= 0 x939) x181 (= x1123 (x656 (x400 0) 0)) (= (not (> x23 224)) x86)) (and x1216 x86)) x438))
(assert (x320 x617))
(assert (x320 x1294))
(assert (x909 (x955 (- (x540 x1152) (x540 x40)))))
(assert (x320 x1195))
(assert (let ((x242 (x955 (- (x540 x1144) (x540 x238))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x1205))
(assert (= (+ 1 (x540 x1119)) (x540 (x322 x1119 1))))
(assert (= x493 (or x1019 x474)))
(assert (= x1269 (and x736 x1272)))
(assert (= (x891 (x540 x568)) x568))
(assert (= (x540 (x891 x312)) x312))
(assert (x320 x640))
(assert (x320 x709))
(assert (= x1326 (=> (and (<= 0 x199) (= x628 (x994 (x955 (- (x540 x877) (x540 x967))) 1)) (= (not (< 224 x1292)) x430) (= x199 (x473 x877)) (<= x199 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x199 1461501637330902918203684832716283019655932542975) x230) x230 (= (x656 (x400 0) 0) x967)) (and x1247 x430))))
(assert (= (and x170 (not x466)) x452))
(assert (x320 x92))
(assert (x320 x133))
(assert (x320 x841))
(assert (x320 x1133))
(assert (= x216 (x891 (x540 x216))))
(assert (= (x540 (x322 x43 1)) (+ 1 (x540 x43))))
(assert (x320 x1284))
(assert (= (and (not x561) x508) x381))
(assert (x320 x3))
(assert (= (=> (and (and (not (= 954915356 x766)) (= 0 x1258) (= x957 x759) (= (ite x1197 1 0) x212) (> x971 0) (= x303 (x208 x1145)) (<= x957 1461501637330902918203684832716283019655932542975) x542 (= 1572751336 x766) (>= x303 0) (> 1729973928 x766) (not (= 1250999895 x766)) (= (> (x570 (x891 x971)) 0) x542) (= x1076 (not (= 0 x303))) (> x1095 0) (<= 0 x957) (= x1197 (not x812)) (= (x767 (x891 x759) (x400 1) 0) x1145) (= 0 x778) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x303) (= x872 (x1193 (x891 x971))) (not (= x766 701022898)) (= (not x1076) x812) (<= x971 1461501637330902918203684832716283019655932542975) (>= x655 0) (>= x872 0) (>= 1461501637330902918203684832716283019655932542975 x655) (= x1095 (x570 (x891 x971))) (<= x759 1461501637330902918203684832716283019655932542975)) (and (and (= x957 x743) (= x393 0) (= x427 (not (= 0 x536))) (= x1040 1729973928) (= 0 x1345) (> x331 0) (= x331 (x570 (x891 x971))) (= x377 x26) (not (< x1040 1729973928)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x536) (= x536 (x208 x1034)) (>= 1461501637330902918203684832716283019655932542975 x743) (= x26 (not (= x212 0))) (<= 0 x536) (= x1034 (x767 (x891 x743) (x400 1) 0))) (or (and (and (>= x749 0) (= x1063 (x767 (x891 x743) (x400 1) 0)) (= 0 x661) (not (< x749 1)) (= x749 (x208 x1063)) (<= x749 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x305 0) (= x203 x1179) (= x558 (x913 (- x749 1))) (= x203 (x583 (+ 1 x558)))) x427) (and (= 0 x1179) (not x427))))) x362) x725))
(assert (= x898 (x891 (x540 x898))))
(assert (= x642 (=> (and (and (not (= x1349 701022898)) (< x1349 1729973928) (> x889 0) (= 1250999895 x1349) (= (x570 (x891 x971)) x889) (= x630 (= x547 0)) (= x1044 0) (= 0 x1072) (= x990 x1385) (not (= x1349 954915356))) (= x1385 x555)) (and (=> (and (and (= x341 (x994 (x955 (- (x540 x1066) (x540 x221))) 1)) (= x221 (x656 (x400 0) 0)) (= x900 (x955 (* x547 32))) (= x615 (< x1108 1461501637330902918203684832716283019655932542975)) (= (x322 x1066 1) x851) (= (> x581 192) x1311) (= x581 (x583 (+ x900 160))) x615 (>= x1108 0) (= x1066 (x656 (x400 0) 0)) (= x1108 (x473 x1066)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1108)) (not x630)) (and (=> x1311 x290) (=> (not x1311) x1367))) (=> x630 x874)))))
(assert (x909 (x955 (- (x540 x1198) (x540 x1122)))))
(assert (= (and x496 x385) x853))
(assert (= (=> (and (and (= x771 x787) (= x425 (or (not x662) x814)) (= x957 x602) (= x814 (= x787 x602))) (= x771 x107)) x425) x730))
(assert (x320 x1095))
(assert (x320 x657))
(assert (= (and x1246 x644) x88))
(assert (x320 x628))
(assert (let ((x242 (- (x540 x460) (x540 x1176)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x470))
(assert (= x1020 (=> (and (= x396 x323) (and (or (and (= 0 x574) (not x375)) (and (and (= x1079 (x767 (x891 x323) (x400 1) 0)) (= (x913 (- x580 1)) x1249) (not (< x580 1)) (<= 0 x580) (= (x583 (+ x1249 1)) x307) (= x580 (x208 x1079)) (= 0 x988) (= x574 x307) (= x758 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x580)) x375)) (and (<= 0 x145) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145) (>= 1461501637330902918203684832716283019655932542975 x323) (= 0 x843) (not (> 1729973928 x403)) (= 0 x483) (> x626 0) (= 1729973928 x403) (= (x767 (x891 x323) (x400 1) 0) x1223) (= x145 (x208 x1223)) (= (x570 (x891 x971)) x626) (= x375 (not (= 0 x145)))))) x1103)))
(assert (x320 x336))
(assert (= (x891 (x540 x1164)) x1164))
(assert (x320 x867))
(assert (= (x891 (x540 x428)) x428))
(assert (= (x540 (x891 x1181)) x1181))
(assert (= x1077 (x891 (x540 x1077))))
(assert (x320 x82))
(assert (x320 x176))
(assert (x320 x429))
(assert (let ((x242 (x955 (- (x540 x1233) (x540 x1312))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x37 (and x1157 x310)))
(assert (x320 x681))
(assert (= x925 x941))
(assert (x320 x46))
(assert (let ((x242 (x955 (- (x540 x444) (x540 x1041))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (let ((x242 (- (x540 x1081) (x540 x11)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x392))
(assert (= x644 (and (not x360) x482)))
(assert (x320 x635))
(assert (x320 x1003))
(assert (x320 x964))
(assert (x320 x139))
(assert (x320 x592))
(assert (x320 x1249))
(assert (x320 x154))
(assert (x320 x849))
(assert (= (x540 (x322 x1271 x605)) (+ (x540 x1271) x605)))
(assert (x320 x1094))
(assert (= (=> (and (and (= (x1309 128) x146) (= x1163 x146) (= 128 x885) (= x924 128)) (and (= (= 0 x547) x1341) (< 0 x227) (= (x913 (- x372 x192)) x337) (not (= 2485876314 x1004)) (not (< x1004 1729973928)) (= x1004 3686129278) (= x1073 x337) (not (= x1004 1729973928)) (not (= 2429653569 x1004)) (= 1 x192) (= 0 x1071) (= (x570 (x891 x971)) x227) (= 0 x571) (= x1163 x372))) (and (=> (and (and (= (x955 (* x547 32)) x832) (>= x198 0) (= x780 (> 1461501637330902918203684832716283019655932542975 x198)) (= (< 192 x916) x193) x780 (<= x198 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x656 (x400 0) 0) x1380) (= x916 (x583 (+ 160 x832))) (= x428 (x656 (x400 0) 0)) (= (x322 x1380 1) x1144) (= x139 (x994 (x955 (- (x540 x1380) (x540 x428))) 1)) (= x198 (x473 x1380))) (not x1341)) (and (=> (not x193) x189) (=> x193 x129))) (=> x1341 x68))) x1120))
(assert (= (or x197 (and x1184 x39)) x565))
(assert (x320 x1227))
(assert (x320 x1002))
(assert (= (=> (and (and (= x1113 x1189) (= 128 x450) (= 128 x135) (= (x248 128) x1189)) (and (= x1190 x603) (= (x570 (x891 x971)) x729) (= (= x547 0) x165) (not (= x1327 1729973928)) (= 3686129278 x1327) (< 0 x729) (not (< x1327 1729973928)) (= x1113 x1172) (= x698 0) (not (= x1327 2429653569)) (= 1 x588) (= x603 (x913 (- x1172 x588))) (= 0 x820) (not (= 2485876314 x1327)))) (and (=> x165 x1062) (=> (and (and (= x169 (x583 (+ 160 x663))) (= (x656 (x400 0) 0) x442) (<= 0 x382) (<= x382 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x322 x1105 1) x688) (= (x955 (* x547 32)) x663) (= x422 (> x169 192)) (= x382 (x473 x1105)) (= x257 (x994 (x955 (- (x540 x1105) (x540 x442))) 1)) (= (> 1461501637330902918203684832716283019655932542975 x382) x136) (= (x656 (x400 0) 0) x1105) x136) (not x165)) (and (=> x422 x848) (=> (not x422) x754))))) x989))
(assert (x320 x655))
(assert (x320 x1142))
(assert (=> (>= 10000 x1160) (= (x400 x1160) (x891 x1160))))
(assert (x320 x914))
(assert (= (x540 (x322 x1111 x973)) (+ (x540 x1111) x973)))
(assert (= x103 (and x1115 (not x543))))
(assert (let ((x242 (- (x540 x683) (x540 x1117)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1016))
(assert (= x1289 (and x1060 x395)))
(assert (x320 x823))
(assert (= x6 (x891 (x540 x6))))
(assert (x742 (- (x540 x810) (x540 x568))))
(assert (= x949 (and x427 x529)))
(assert (x320 x1180))
(assert (= x1332 (and x1128 x608)))
(assert (x320 x1155))
(assert (let ((x242 (- (x540 x881) (x540 x956)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x458))
(assert (let ((x242 (- (x540 x1144) (x540 x238)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x1359 (and (not x895) x1382)))
(assert (x320 x1217))
(assert (x320 x1071))
(assert (= (and x250 x144) x1151))
(assert (x320 x1190))
(assert (= (x891 (x540 x1251)) x1251))
(assert (x320 x1307))
(assert (x320 x495))
(assert (x742 (- (x540 x1050) (x540 x38))))
(assert (= x647 (and x686 (not x817))))
(assert (x320 x1262))
(assert (x320 x753))
(assert (x320 x573))
(assert (x320 x690))
(assert (x892 x676))
(assert (x320 x1351))
(assert (= x1203 (x540 (x891 x1203))))
(assert (= x390 (x891 (x540 x390))))
(assert (x320 x1116))
(assert (x909 (x955 (- (x540 x1081) (x540 x11)))))
(assert (x320 x368))
(assert (x320 x1114))
(assert (= x1380 (x891 (x540 x1380))))
(assert (x320 x36))
(assert (x320 x981))
(assert (x320 x880))
(assert (x320 x233))
(assert (x320 x1277))
(assert (x909 (x955 (- (x540 x851) (x540 x216)))))
(assert (x320 x1075))
(assert (x320 x844))
(assert (= (x540 (x322 x552 x701)) (+ (x540 x552) x701)))
(assert (x320 x202))
(assert (x909 (x955 (- (x540 x444) (x540 x1041)))))
(assert (x320 x1098))
(assert (let ((x242 (- (x540 x851) (x540 x216)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= 1572751336 (x540 (x400 1572751336))))
(assert (x320 x629))
(assert (x320 x509))
(assert (= (x891 (x540 x439)) x439))
(assert (x320 x614))
(assert (= x464 (and x529 (not x427))))
(assert (= x1106 (and (not x834) x549)))
(assert (x320 x502))
(assert (x320 x842))
(assert (x320 x1353))
(assert (let ((x242 (x955 (- (x540 x1058) (x540 x1362))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x891 (x540 x675)) x675))
(assert (x320 x998))
(assert (x320 x878))
(assert (let ((x242 (- (x540 x1356) (x540 x1352)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x742 (- (x540 x1164) (x540 x1074))))
(assert (= (+ (x540 x1100) x1282) (x540 (x322 x1100 x1282))))
(assert (x320 x480))
(assert (= x1037 x1120))
(assert (x320 x971))
(assert (= x971 (x540 (x891 x971))))
(assert (=> (<= x462 10000) (= (x891 x462) (x400 x462))))
(assert (x320 x132))
(assert (= (x540 (x322 x1050 1)) (+ (x540 x1050) 1)))
(assert (= (x891 (x540 x745)) x745))
(assert (= x30 x800))
(assert (x320 x594))
(assert (x320 x288))
(assert (x320 x856))
(assert (x320 x51))
(assert (x320 x19))
(assert (= x1300 (=> (and (and (= x1339 x592) (= x1282 x1284) (= (x913 (- x592 x669)) x1282) (= x669 1) (= x1361 (x570 (x891 x971))) (= (= x16 0) x360) (= 0 x910) (not (= x309 1729973928)) (not (> 1729973928 x309)) (= 0 x652) (not (= 2485876314 x309)) (not (= 2429653569 x309)) (= 3686129278 x309) (> x1361 0)) (= x538 x1339)) (and (=> x360 x1183) (=> (and (not x360) (and (= x1312 (x656 (x400 0) 0)) x717 (= x1012 (x583 (+ x1089 160))) (= (x994 (x955 (- (x540 x1233) (x540 x1312))) 1) x424) (= x1233 (x656 (x400 0) 0)) (= (x955 (* x16 32)) x1089) (= (x1124 x1233) x873) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x873) (= x717 (< x873 1461501637330902918203684832716283019655932542975)) (= x1246 (< 192 x1012)) (>= x873 0) (= (x322 x1233 1) x1198))) (and (=> x1246 x659) (=> (not x1246) x52)))))))
(assert (x320 x415))
(assert (x742 (- (x540 x243) (x540 x4))))
(assert (x320 x213))
(assert (= x1062 (=> (and (or (and (not x561) (= x148 0)) (and x561 (and (= x944 x148) (= x1325 (x322 x386 x603)) (<= 0 x944) (> x547 x1190) (= 0 x1212) x109 (= x109 (> 1461501637330902918203684832716283019655932542975 x944)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x944) (= (x473 x1325) x944) (= x379 0) (= (x656 (x400 0) 0) x386)))) (and (= (< x603 x789) x561) (= 128 x270) (= x789 (x388 128)) (= 128 x240))) x569)))
(assert (x320 x124))
(assert (x320 x884))
(assert (x320 x1203))
(assert (= (=> (and (and (not (= x46 1729973928)) (= x137 x410) (= x690 0) (not (= x46 2485876314)) (> x710 0) (= x834 (= x547 0)) (= x917 1) (= x46 3686129278) (not (< x46 1729973928)) (= (x570 (x891 x971)) x710) (= x544 0) (= x1199 x640) (not (= 2429653569 x46)) (= x640 (x913 (- x410 x917)))) (= x137 x1179)) (and (=> (and (not x834) (and (= (x322 x745 1) x700) (<= 0 x654) x234 (= x654 (x473 x745)) (<= x654 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x745 (x656 (x400 0) 0)) (= (x955 (* x547 32)) x32) (= (> x23 192) x1256) (= (x656 (x400 0) 0) x1324) (= x23 (x583 (+ 160 x32))) (= (< x654 1461501637330902918203684832716283019655932542975) x234) (= (x994 (x955 (- (x540 x745) (x540 x1324))) 1) x724))) (and (=> (not x1256) x1216) (=> x1256 x438))) (=> x834 x345))) x362))
(assert (x909 (x955 (- (x540 x1171) (x540 x1261)))))
(assert (x320 x1131))
(assert (x320 x279))
(assert (x320 x995))
(assert (x320 x934))
(assert (= x17 (and x1087 x887)))
(assert (= (=> (and (= x668 x1160) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x387) (not (= x44 1250999895)) (= x387 (x208 x1191)) (< x44 1729973928) (not (= x44 954915356)) (= x600 (not (= 0 x387))) (not (= x44 701022898)) (= x176 0) (= (x767 (x891 x1160) (x400 1) 0) x1191) (>= x387 0) (= (x570 (x891 x971)) x1307) (= (not x600) x1215) (= 0 x507) (< 0 x1307) (= (not x1215) x996) (= 1572751336 x44) (<= x1160 1461501637330902918203684832716283019655932542975) (= x503 (ite x996 1 0))) (and (or (and x596 (and (<= 0 x495) (not (> 1 x495)) (= x1078 (x913 (- x495 1))) (= (x208 x691) x495) (= 0 x594) (= (x767 (x891 x367) (x400 1) 0) x691) (= x884 0) (= x92 x555) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x495) (= x92 (x583 (+ 1 x1078))))) (and (= x555 0) (not x596))) (and (<= x631 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x570 (x891 x971)) x336) (= (not (= x631 0)) x596) (= x655 x367) (= x641 x666) (= 0 x14) (> x336 0) (not (> 1729973928 x646)) (= (x767 (x891 x367) (x400 1) 0) x122) (= (not (= x503 0)) x641) (>= 1461501637330902918203684832716283019655932542975 x367) (= x646 1729973928) (>= x631 0) (= x517 0) (= (and x846 x666) x1175) (= (x208 x122) x631))))) x642) x1371))
(assert (x320 x1295))
(assert (let ((x242 (- (x540 x1005) (x540 x1369)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x1268))
(assert (= (x540 (x322 x164 1)) (+ (x540 x164) 1)))
(assert (x742 (- (x540 x534) (x540 x744))))
(assert (x320 x341))
(assert (= x1103 (=> (and (= x899 x574) (and (not (= x498 701022898)) (= x289 (= x547 0)) x200 (= 0 x220) (< 0 x1323) (= (not (= x468 x990)) x613) (= x1150 0) (not (= x498 954915356)) (= (or (not x1175) x613) x200) (= x957 x911) (= x468 x899) (< x498 1729973928) (= 1250999895 x498) (= x1323 (x570 (x891 x971))))) (and (=> (and (and x1316 (= (x994 (x955 (- (x540 x1005) (x540 x1369))) 1) x936) (= (x656 (x400 0) 0) x1369) (= x1353 (x473 x1005)) (= (x322 x1005 1) x877) (= x1292 (x583 (+ 160 x171))) (= x1316 (> 1461501637330902918203684832716283019655932542975 x1353)) (= x171 (x955 (* x547 32))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1353) (= x815 (> x1292 192)) (= (x656 (x400 0) 0) x1005) (>= x1353 0)) (not x289)) (and (=> (not x815) x1247) (=> x815 x1326))) (=> x289 x989)))))
(assert (x320 x776))
(assert (= (or x827 x285) x2))
(assert (x320 x468))
(assert (x320 x115))
(assert (x742 (- (x540 x1144) (x540 x238))))
(assert (= (=> (and (= x1368 x1358) (and (and (= x454 x655) (= x1358 x486) (= x957 x299) (= (ite x1082 1 0) x930) (not (= x1357 1250999895)) (= (not x484) x1082) (= x934 (x208 x796)) (> x432 0) (= x651 (= x299 x486)) (= 0 x412) (< x1357 1729973928) (= (not (= x126 x454)) x515) (not (= x1357 954915356)) (= x796 (x767 (x891 x312) (x400 1) 0)) (= (not x190) x484) (= x190 (not (= x934 0))) (= (x570 (x891 x971)) x432) (<= x312 1461501637330902918203684832716283019655932542975) x271 (= 1572751336 x1357) (<= 0 x934) (= x126 x957) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x934) (= x655 x312) (not (= 701022898 x1357)) (= 0 x1142) (= x271 (or (not x377) x651))) (and (and (= (x767 (x891 x45) (x400 1) 0) x1015) (= (not x665) x732) (= x447 x1317) (= x519 1572751336) (= x761 (and x447 x515)) (< 0 x1204) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x837) (not (= x519 1250999895)) (<= 0 x837) (< x519 1729973928) (= (x570 (x891 x971)) x1204) (= x607 0) (<= x45 1461501637330902918203684832716283019655932542975) (= (not (= x930 0)) x1317) (not (= 701022898 x519)) (= x665 (not (= 0 x837))) (= x837 (x208 x1015)) (= x1226 (ite x1080 1 0)) (= x957 x45) (not (= 954915356 x519)) (= 0 x521) (= (not x732) x1080)) (and (and (= 1729973928 x346) (= (x208 x106) x25) (>= 1461501637330902918203684832716283019655932542975 x530) (= x134 x1238) (= x530 x655) (= (not (= x1226 0)) x134) (= (and x761 x1238) x162) (= x106 (x767 (x891 x530) (x400 1) 0)) (not (> 1729973928 x346)) (= x1241 (x570 (x891 x971))) (= x541 0) (= x349 0) (= (not (= x25 0)) x426) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x25) (< 0 x1241) (<= 0 x25)) (or (and (not x426) (= 0 x858)) (and x426 (and (= x858 x1275) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x855) (not (> 1 x855)) (= (x913 (- x855 1)) x1177) (= 0 x233) (>= x855 0) (= x770 0) (= (x767 (x891 x530) (x400 1) 0) x196) (= (x208 x196) x855) (= x1275 (x583 (+ 1 x1177)))))))))) x63) x985))
(assert (x892 x866))
(assert (x320 x752))
(assert (x320 x315))
(assert (x320 x547))
(assert (= (x891 (x540 x810)) x810))
(assert (x320 x503))
(assert (= (x540 (x322 x1233 1)) (+ (x540 x1233) 1)))
(assert (let ((x242 (- (x540 x1064) (x540 x1270)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x891 701022898) (x400 701022898)))
(assert (x320 x999))
(assert (let ((x242 (x955 (- (x540 x688) (x540 x128))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x342))
(assert (x320 x1240))
(assert (x320 x819))
(assert (x320 x1323))
(assert (x320 x1130))
(assert (x320 x481))
(assert (x320 x1192))
(assert (x320 x187))
(assert (= x474 (or x1151 x792)))
(assert (let ((x242 (- (x540 x489) (x540 x499)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x332 (or x545 (and (not x251) x1364))))
(assert (=> (>= 10000 x676) (= (x891 x676) (x400 x676))))
(assert (x320 x151))
(assert (let ((x242 (x955 (- (x540 x1380) (x540 x428))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x960 (x891 (x540 x960))))
(assert (x320 x294))
(assert (x320 x67))
(assert (x892 x722))
(assert (x320 x972))
(assert (x320 x14))
(assert (x320 x237))
(assert (x320 x1258))
(assert (x320 x1199))
(assert (x320 x66))
(assert (= x751 (or (and x183 (not x1287)) x1350)))
(assert (x320 x698))
(assert (= (x891 (x540 x460)) x460))
(assert (x320 x126))
(assert (= x1387 (and (not x260) x276)))
(assert (x742 (- (x540 x1211) (x540 x1077))))
(assert (x320 x432))
(assert (x320 x1153))
(assert (= x269 (=> (and (and (= x819 (x1206 128)) (= x10 128) (= x790 x819) (= 128 x1295)) (and (= (= 0 x547) x1330) (= x65 0) (not (= 2429653569 x1355)) (< 0 x313) (not (= 1729973928 x1355)) (= (x570 (x891 x971)) x313) (= x599 x1139) (= x492 x790) (= x421 0) (not (< x1355 1729973928)) (= 3686129278 x1355) (= 1 x266) (not (= 2485876314 x1355)) (= x1139 (x913 (- x492 x266))))) (and (=> x1330 x805) (=> (and (and (= x836 (x656 (x400 0) 0)) x172 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x995) (= x844 (x955 (* 32 x547))) (= x894 (< 192 x1102)) (<= 0 x995) (= x1102 (x583 (+ x844 160))) (= x1125 (x656 (x400 0) 0)) (= (x994 (x955 (- (x540 x1125) (x540 x836))) 1) x572) (= (x473 x1125) x995) (= (x322 x1125 1) x534) (= (< x995 1461501637330902918203684832716283019655932542975) x172)) (not x1330)) (and (=> (not x894) x50) (=> x894 x461)))))))
(assert (x320 x903))
(assert (x320 x104))
(assert (= x688 (x891 (x540 x688))))
(assert (x320 x1177))
(assert (= x344 (and (not x268) x781)))
(assert (let ((x242 (- (x540 x700) (x540 x1123)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x440))
(assert (x320 x961))
(assert (x320 x184))
(assert (= x715 (and (not x426) x417)))
(assert (x320 x669))
(assert (= (x891 (x540 x1057)) x1057))
(assert (x320 x813))
(assert (x742 (- (x540 x441) (x540 x6))))
(assert (= (and x887 (not x1087)) x593))
(assert (= (x540 (x891 x676)) x676))
(assert (x1167 32))
(assert (x320 x142))
(assert (x320 x410))
(assert (= (+ 1 (x540 x745)) (x540 (x322 x745 1))))
(assert (x320 x710))
(assert (= (or (and x1106 (not x1256)) x733) x1335))
(assert (x320 x1368))
(assert (x320 x1024))
(assert (= x267 (x891 (x540 x267))))
(assert (x320 x661))
(assert (= x1381 (or x204 (and x482 x360))))
(assert (x320 x735))
(assert (= (=> (and (= (x994 (x955 (- (x540 x1064) (x540 x1270))) 1) x1262) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x560) x273 (= x560 (x473 x1064)) (>= x560 0) (= (not (< 224 x133)) x265) (= (x656 (x400 0) 0) x1270) (= (> 1461501637330902918203684832716283019655932542975 x560) x273)) (and x265 x96)) x616))
(assert (x320 x979))
(assert (x320 x95))
(assert (= x217 (=> (and (= x566 (< x579 1461501637330902918203684832716283019655932542975)) (= (x656 (x400 0) 0) x1065) (>= x579 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x579) (= (x473 x402) x579) (= (x994 (x955 (- (x540 x402) (x540 x1065))) 1) x1240) x566 (= x179 (not (< 224 x166)))) (and x117 x179))))
(assert (x909 (x955 (- (x540 x700) (x540 x1123)))))
(assert (x909 (x955 (- (x540 x1211) (x540 x1077)))))
(assert (= (or x715 x1014) x254))
(assert (x320 x1263))
(assert (= x1064 (x891 (x540 x1064))))
(assert (x320 x1179))
(assert (= x677 (x891 (x540 x677))))
(assert (x320 x747))
(assert (x320 x980))
(assert (x320 x1040))
(assert (x320 x483))
(assert (x909 (x955 (- (x540 x1144) (x540 x238)))))
(assert (x320 x101))
(assert (let ((x242 (x955 (- (x540 x881) (x540 x956))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= (x891 (x540 x851)) x851))
(assert (let ((x242 (x955 (- (x540 x441) (x540 x6))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (= x50 x805))
(assert (x320 x854))
(assert (x320 x1231))
(assert (let ((x242 (- (x540 x93) (x540 x1229)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x256))
(assert (= x700 (x891 (x540 x700))))
(assert (let ((x242 (x955 (- (x540 x402) (x540 x1065))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x140))
(assert (x320 x34))
(assert (= x1081 (x891 (x540 x1081))))
(assert (let ((x242 (x955 (- (x540 x960) (x540 x1140))))) (and (x791 x242 1) (=> (and (> x242 0) (> 1 0)) (and (<= (* (x994 x242 1) 1) x242) (< (- x242 1) (* (x994 x242 1) 1)))) (= (* (x994 x242 1) 1) (- x242 (x465 0 x242))) (x224 x242 1) (x94 x242 1) (x1375 x242 1))))
(assert (x320 x794))
(assert (let ((x242 (- (x540 x232) (x540 x777)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x982))
(assert (x320 x1147))
(assert (= (+ (x540 x1164) 1) (x540 (x322 x1164 1))))
(assert (x320 x929))
(assert (let ((x242 (- (x540 x1105) (x540 x442)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x320 x871))
(assert (= x765 x550))
(assert (= x1237 x24))
(assert (x320 x219))
(assert (x909 (x955 (- (x540 x441) (x540 x6)))))
(assert (=> (<= x244 10000) (= (x400 x244) (x891 x244))))
(assert (x320 x463))
(assert (x320 x1189))
(assert (x320 x554))
(assert (= (and x947 (not x591)) x333))
(assert (= (x891 (x540 x777)) x777))
(assert (= x147 (and x112 x524)))
(assert (x320 x1169))
(assert (x320 x729))
(assert (x320 x771))
(assert (x742 (- (x540 x460) (x540 x1176))))
(assert (x909 (x955 (- (x540 x960) (x540 x1140)))))
(assert (= (=> (and (and (= (= 0 x547) x551) (= x415 (x570 (x891 x971))) (= x1255 0) (= 0 x1043) (= x1227 x625) (> x415 0) (not (= 701022898 x824)) (> 1729973928 x824) (= 1250999895 x824) (not (= x824 954915356))) (= x1227 x398)) (and (=> (and (and (= x915 (x955 (* 32 x547))) (= (x322 x164 1) x1135) (<= 0 x469) x1046 (= (< 192 x504) x938) (= x1046 (> 1461501637330902918203684832716283019655932542975 x469)) (= (x473 x164) x469) (= (x656 (x400 0) 0) x278) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x469) (= x76 (x994 (x955 (- (x540 x164) (x540 x278))) 1)) (= (x583 (+ 160 x915)) x504) (= x164 (x656 (x400 0) 0))) (not x551)) (and (=> (not x938) x969) (=> x938 x119))) (=> x551 x497))) x937))
(assert (x320 x1322))
(assert (x320 x915))
(assert (x320 x864))
(assert (x320 x558))
(assert (x320 x275))
(assert (= x506 (or (and (not x1338) x452) x1281)))
(assert (= x1183 (=> (and (or (and (and (= x1100 (x656 (x400 0) 0)) (= 0 x1013) (= x1110 (x1124 x97)) (<= x1110 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1110 x771) x178 (= (x322 x1100 x1282) x97) (= (< x1110 1461501637330902918203684832716283019655932542975) x178) (= x158 0) (< x1284 x16) (<= 0 x1110)) x1035) (and (= x771 0) (not x1035))) (and (= x1035 (> x961 x1282)) (= 128 x1328) (= x961 (x906 128)) (= 128 x841))) x730)))
(assert (= (and x83 (not x397)) x1364))
(assert (x909 (x955 (- (x540 x1119) (x540 x439)))))
(assert (x320 x1334))
(assert (x742 (- (x540 x683) (x540 x1117))))
(assert (x320 x79))
(assert (= x912 (and x493 x27)))
(assert (x320 x346))
(assert (x320 x171))
(assert (x320 x1043))
(assert (x320 x1044))
(assert (x320 x885))
(assert (let ((x242 (- (x540 x534) (x540 x744)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (or x946 x674) x781))
(assert (x320 x1084))
(assert (x320 x930))
(assert (x320 x951))
(assert (x320 x605))
(assert (= (or x1336 x1269) x807))
(assert (x320 x822))
(assert (let ((x242 (- (x540 x1152) (x540 x40)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x533 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x994 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x242)) (x986 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x645 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x73 x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x400 1461501637330902918203684832716283019655932542975) (x891 1461501637330902918203684832716283019655932542975)))
(assert (= (and x1088 x852) x159))
(assert (= x1006 (and x338 x476)))
(assert (= (x540 (x322 x1105 1)) (+ (x540 x1105) 1)))
(assert (x320 x352))
(assert (= (and x1022 x114) x674))
(assert (x320 x396))
(assert (x320 x1173))
(assert (x320 x770))
(assert (= x290 (=> (and (<= x997 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x41 (< x997 1461501637330902918203684832716283019655932542975)) (<= 0 x997) (= x1372 (x994 (x955 (- (x540 x851) (x540 x216))) 1)) x41 (= (not (< 224 x581)) x697) (= x997 (x473 x851)) (= x216 (x656 (x400 0) 0))) (and x1367 x697))))
(assert (x320 x740))
(assert (x892 x693))
(assert (x320 x1148))
(assert (x320 x1107))
(assert (= (or x859 (and x1042 (not x894))) x1320))
(assert (x320 x1200))
(assert (and (x361 32 x16) (and (= (x324 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x324 32 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x324 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x16) (- (* 32 x16) (* x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x1154 32 x16) (= (* 32 x16) (x324 32 x16)) (x1298 32 x16) (x845 32 x16) (x389 32 x16)))
(assert (x320 x1202))
(assert (x320 x299))
(assert (x320 x266))
(assert (= (and x705 (not x551)) x1278))
(assert (x320 x1372))
(assert (x320 x169))
(assert (x320 x1174))
(assert (x320 x379))
(assert (x909 (x955 (- (x540 x460) (x540 x1176)))))
(assert (x320 x1126))
(assert (= (or (and x817 x686) x1290) x887))
(assert (= x722 (x540 (x891 x722))))
(assert (x320 x1097))
(assert (= x188 (=> (and (and (= x376 (or (not x696) x763)) (= x795 (x570 (x891 x971))) (= (= x1208 0) x564) (= (x208 x931) x1208) (= 2429653569 x8) x376 (= x1231 0) (= x1112 x966) (= x655 x51) (= (x767 (x891 x51) (x400 1) 0) x931) (>= 1461501637330902918203684832716283019655932542975 x51) (not (= x8 1729973928)) (>= x1208 0) (<= x1208 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x595 0) (not (< x8 1729973928)) (> x795 0) (= x763 (= x625 x1112))) (= x806 x966)) (and (=> (and (not x564) (and (and (= x605 (x913 (- x1208 1))) (= (x913 (- x547 1)) x701) (not (> 1 x547)) (= (= x605 x701) x250)) (or (and (and (= x431 (x473 x606)) (< x605 x547) (= (x656 (x400 0) 0) x1271) (>= x431 0) (= (x767 (x891 x431) (x400 1) 0) x72) (= x606 (x322 x552 x701)) x943 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x431) (> x547 x701) (= (x656 (x400 0) 0) x552) (= (> 1461501637330902918203684832716283019655932542975 x431) x943) (= x1143 (x322 x1271 x605))) (not x250)) x250))) x757) (=> (and x564 (and (= x547 x16) (= 0 x315))) x127)))))
(assert (x320 x932))
(assert (= x482 (or x912 x58)))
(assert (x320 x536))
(assert (x320 x337))
(assert (x320 x1113))
(check-sat)
(exit)
