(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x439 0)) (((x356 (x902 x439) (x998 Int)) (x816 (x895 Int)) (x793 (x567 x439) (x62 x439) (x706 Int)))))
(declare-fun x491 () Int)
(declare-fun x910 () Int)
(declare-fun x409 () Int)
(declare-fun x694 () Int)
(declare-fun x952 () Int)
(declare-fun x535 () Int)
(declare-fun x517 () Int)
(declare-fun x14 () Bool)
(declare-fun x1024 () Bool)
(declare-fun x915 () Bool)
(declare-fun x927 () Int)
(declare-fun x598 () Int)
(declare-fun x775 () Bool)
(declare-fun x58 () Int)
(declare-fun x64 () Int)
(declare-fun x636 () Bool)
(declare-fun x361 () Int)
(declare-fun x1089 () Bool)
(declare-fun x91 () Int)
(declare-fun x783 () Int)
(declare-fun x868 () Bool)
(declare-fun x648 () Int)
(declare-fun x755 () Bool)
(declare-fun x1043 () Int)
(declare-fun x672 () Int)
(declare-fun x67 () Int)
(declare-fun x375 () Int)
(declare-fun x844 () Bool)
(declare-fun x1165 () Bool)
(declare-fun x510 () Int)
(declare-fun x976 () Bool)
(declare-fun x602 () Int)
(declare-fun x107 () Int)
(declare-fun x240 () Int)
(declare-fun x158 () Bool)
(declare-fun x431 () Int)
(declare-fun x934 () Int)
(declare-fun x993 () Bool)
(declare-fun x334 () Int)
(declare-fun x599 () Bool)
(declare-fun x501 () Int)
(declare-fun x189 () Bool)
(declare-fun x465 () Int)
(declare-fun x469 () Int)
(declare-fun x233 () Bool)
(declare-fun x3 () Bool)
(declare-fun x1120 () Int)
(declare-fun x479 () Bool)
(declare-fun x366 () Int)
(declare-fun x713 () Bool)
(declare-fun x592 () Bool)
(declare-fun x13 () Bool)
(declare-fun x169 () Int)
(declare-fun x917 (Int) Int)
(declare-fun x945 () Int)
(declare-fun x1069 () Int)
(declare-fun x237 () Bool)
(declare-fun x19 () Int)
(declare-fun x564 () Int)
(declare-fun x523 () Int)
(declare-fun x368 () Int)
(declare-fun x61 () Int)
(declare-fun x756 () Int)
(declare-fun x582 () Int)
(declare-fun x1086 () Int)
(declare-fun x967 () Int)
(declare-fun x968 () Int)
(declare-fun x407 () Bool)
(declare-fun x842 () Bool)
(declare-fun x404 () Bool)
(declare-fun x152 () Int)
(declare-fun x1054 () Int)
(declare-fun x168 () Int)
(declare-fun x809 () Bool)
(declare-fun x190 () Int)
(declare-fun x18 () Bool)
(declare-fun x175 () Bool)
(declare-fun x478 () Int)
(declare-fun x420 () Bool)
(declare-fun x1081 () Int)
(declare-fun x644 () Int)
(declare-fun x42 () Int)
(declare-fun x406 () Bool)
(declare-fun x326 () Bool)
(declare-fun x1045 () Bool)
(declare-fun x803 () Bool)
(declare-fun x879 () Bool)
(declare-fun x904 () Int)
(declare-fun x459 () Int)
(declare-fun x872 () Bool)
(declare-fun x578 () Bool)
(declare-fun x732 () Int)
(declare-fun x359 () Int)
(declare-fun x703 () Int)
(declare-fun x898 () Bool)
(declare-fun x283 () Bool)
(declare-fun x293 () Bool)
(declare-fun x278 () Bool)
(declare-fun x159 () Int)
(declare-fun x791 () Bool)
(declare-fun x939 () Int)
(declare-fun x456 () Int)
(declare-fun x377 () Int)
(declare-fun x1141 () Int)
(declare-fun x797 () Bool)
(declare-fun x1057 () Bool)
(declare-fun x400 () Bool)
(declare-fun x358 () Bool)
(declare-fun x273 () Int)
(declare-fun x120 () Int)
(declare-fun x1136 () Int)
(declare-fun x488 () Bool)
(declare-fun x529 () Bool)
(declare-fun x661 () Bool)
(declare-fun x435 () Bool)
(declare-fun x254 () Bool)
(declare-fun x668 () Int)
(declare-fun x943 () Bool)
(declare-fun x1109 () Int)
(declare-fun x97 () Int)
(declare-fun x1011 () Int)
(declare-fun x687 () Int)
(declare-fun x292 () Bool)
(declare-fun x148 () Int)
(declare-fun x319 () Int)
(declare-fun x691 () Int)
(declare-fun x765 () Bool)
(declare-fun x81 () Bool)
(declare-fun x215 () Bool)
(declare-fun x199 () Int)
(declare-fun x745 () Bool)
(declare-fun x86 () Int)
(declare-fun x102 () Int)
(declare-fun x738 () Bool)
(declare-fun x763 () Bool)
(declare-fun x1105 () Int)
(declare-fun x1146 () Bool)
(declare-fun x1048 () Bool)
(declare-fun x414 () Int)
(declare-fun x204 () Int)
(declare-fun x282 () Int)
(declare-fun x135 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x831 () Int)
(declare-fun x43 () Bool)
(declare-fun x965 () Int)
(declare-fun x515 () Bool)
(declare-fun x950 () Bool)
(declare-fun x1160 () Int)
(declare-fun x985 () Bool)
(declare-fun x807 () Int)
(declare-fun x678 () Int)
(declare-fun x890 () Int)
(declare-fun x619 () Bool)
(declare-fun x201 () Int)
(declare-fun x55 () Int)
(declare-fun x239 () Int)
(declare-fun x851 () Bool)
(declare-fun x813 () Int)
(declare-fun x1076 () Bool)
(declare-fun x223 () Int)
(declare-fun x946 () Bool)
(declare-fun x799 () Int)
(declare-fun x191 () Int)
(declare-fun x539 () Int)
(declare-fun x969 () Bool)
(declare-fun x1145 () Bool)
(declare-fun x397 () Int)
(declare-fun x759 () Bool)
(declare-fun x106 () Int)
(declare-fun x692 () Int)
(declare-fun x1000 () Int)
(declare-fun x546 () Bool)
(declare-fun x405 () Int)
(declare-fun x784 () Bool)
(declare-fun x1067 () Int)
(declare-fun x100 () Bool)
(declare-fun x660 () Int)
(declare-fun x693 () Bool)
(declare-fun x1161 () Int)
(declare-fun x1074 () Bool)
(declare-fun x15 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x1038 () Int)
(declare-fun x758 () Bool)
(declare-fun x1053 (x439) Int)
(declare-fun x108 () Bool)
(declare-fun x536 (Int) Int)
(declare-fun x527 (Int) Int)
(declare-fun x151 () Int)
(declare-fun x882 () Bool)
(declare-fun x412 () Int)
(declare-fun x810 () Bool)
(declare-fun x569 () Int)
(declare-fun x748 () Int)
(declare-fun x801 () Int)
(declare-fun x1106 () Bool)
(declare-fun x1084 () Int)
(declare-fun x433 () Int)
(declare-fun x666 (Int Int) Int)
(declare-fun x875 () Int)
(declare-fun x309 () Bool)
(declare-fun x337 () Int)
(declare-fun x986 () Int)
(declare-fun x611 () Int)
(declare-fun x731 () Bool)
(declare-fun x1059 (Int) Int)
(declare-fun x1029 () Int)
(declare-fun x7 () Bool)
(declare-fun x1052 () Int)
(declare-fun x468 () Int)
(declare-fun x467 () Bool)
(declare-fun x742 () Int)
(declare-fun x1143 () Bool)
(declare-fun x232 () Int)
(declare-fun x1083 () Bool)
(declare-fun x903 () Bool)
(declare-fun x165 () Int)
(declare-fun x854 () Bool)
(declare-fun x449 () Bool)
(declare-fun x284 () Bool)
(declare-fun x382 () Int)
(declare-fun x1046 () Bool)
(declare-fun x1073 () Int)
(declare-fun x25 () Int)
(declare-fun x497 () Int)
(declare-fun x975 () Bool)
(declare-fun x884 () Bool)
(declare-fun x688 () Int)
(declare-fun x172 () Bool)
(declare-fun x512 (Int Int) Int)
(declare-fun x612 () Int)
(declare-fun x651 () Bool)
(declare-fun x743 () Bool)
(declare-fun x464 () Int)
(declare-fun x1113 () Int)
(declare-fun x290 () Bool)
(declare-fun x828 () Int)
(declare-fun x1090 () Int)
(declare-fun x685 () Bool)
(declare-fun x798 () Bool)
(declare-fun x442 () Int)
(declare-fun x274 () Int)
(declare-fun x838 () Bool)
(declare-fun x1062 () Bool)
(declare-fun x353 () Bool)
(declare-fun x1095 () Int)
(declare-fun x862 () Int)
(declare-fun x733 () Int)
(declare-fun x1149 (Int Int) Int)
(declare-fun x422 () Int)
(declare-fun x1040 () Int)
(declare-fun x145 () Bool)
(declare-fun x142 () Int)
(declare-fun x1031 () Bool)
(declare-fun x714 () Int)
(declare-fun x466 () Int)
(declare-fun x210 () Int)
(declare-fun x808 () Bool)
(declare-fun x766 () Int)
(declare-fun x937 () Int)
(declare-fun x425 () Int)
(declare-fun x615 () Bool)
(declare-fun x577 () Int)
(declare-fun x56 () Bool)
(declare-fun x906 () Bool)
(declare-fun x901 () Int)
(declare-fun x561 () Int)
(declare-fun x247 () Int)
(declare-fun x725 () Bool)
(declare-fun x843 () Bool)
(declare-fun x609 () Int)
(declare-fun x507 () Int)
(declare-fun x321 () Int)
(declare-fun x825 () Int)
(declare-fun x988 () Int)
(declare-fun x445 () Int)
(declare-fun x853 () Int)
(declare-fun x328 () Int)
(declare-fun x162 () Bool)
(declare-fun x261 () Bool)
(declare-fun x1056 () Int)
(declare-fun x805 () Int)
(declare-fun x627 () Bool)
(declare-fun x75 () Bool)
(declare-fun x777 () Int)
(declare-fun x92 () Bool)
(declare-fun x638 () Bool)
(declare-fun x10 () Bool)
(declare-fun x800 () Int)
(declare-fun x653 () Int)
(declare-fun x271 () Bool)
(declare-fun x876 () Bool)
(declare-fun x1140 () Int)
(declare-fun x834 () Bool)
(declare-fun x132 () Bool)
(declare-fun x601 () Bool)
(declare-fun x894 () Bool)
(declare-fun x873 () Bool)
(declare-fun x447 () Bool)
(declare-fun x1125 () Int)
(declare-fun x847 () Int)
(declare-fun x559 () Bool)
(declare-fun x920 () Int)
(declare-fun x340 () Bool)
(declare-fun x594 () Bool)
(declare-fun x87 () Int)
(declare-fun x301 () Bool)
(declare-fun x1144 () Int)
(declare-fun x1021 () Int)
(declare-fun x53 () Int)
(declare-fun x299 () Bool)
(declare-fun x970 () Int)
(declare-fun x68 () Int)
(declare-fun x1034 () Int)
(declare-fun x219 () Int)
(declare-fun x230 () Int)
(declare-fun x855 () Bool)
(declare-fun x33 () Bool)
(declare-fun x888 () Int)
(declare-fun x1036 () Bool)
(declare-fun x604 () Bool)
(declare-fun x779 () Bool)
(declare-fun x1088 () Bool)
(declare-fun x728 () Int)
(declare-fun x413 () Bool)
(declare-fun x437 () Int)
(declare-fun x1118 () Int)
(declare-fun x26 () Bool)
(declare-fun x1135 () Bool)
(declare-fun x325 () Int)
(declare-fun x285 () Int)
(declare-fun x276 () Int)
(declare-fun x729 () Bool)
(declare-fun x574 () Bool)
(declare-fun x208 () Int)
(declare-fun x1058 () Bool)
(declare-fun x883 () Bool)
(declare-fun x833 () Int)
(declare-fun x322 () Bool)
(declare-fun x332 () Int)
(declare-fun x782 () Bool)
(declare-fun x372 () Bool)
(declare-fun x304 () Int)
(declare-fun x1099 () Bool)
(declare-fun x590 () Int)
(declare-fun x287 () Int)
(declare-fun x544 () Int)
(declare-fun x850 () Int)
(declare-fun x483 () Int)
(declare-fun x443 () Int)
(declare-fun x209 (Int) Int)
(declare-fun x454 () Bool)
(declare-fun x312 () Bool)
(declare-fun x1129 () Int)
(declare-fun x228 () Bool)
(declare-fun x1037 () Bool)
(declare-fun x396 () Bool)
(declare-fun x633 () Int)
(declare-fun x624 () Int)
(declare-fun x752 () Bool)
(declare-fun x730 () Int)
(declare-fun x686 () Bool)
(declare-fun x669 () Bool)
(declare-fun x933 () Bool)
(declare-fun x392 () Bool)
(declare-fun x161 () Bool)
(declare-fun x213 () Bool)
(declare-fun x749 () Int)
(declare-fun x71 () Bool)
(declare-fun x203 () Bool)
(declare-fun x530 () Bool)
(declare-fun x313 () Bool)
(declare-fun x1080 () Int)
(declare-fun x50 () Int)
(declare-fun x677 () Bool)
(declare-fun x870 () Int)
(declare-fun x849 () Bool)
(declare-fun x509 (Int Int) Int)
(declare-fun x314 () Bool)
(declare-fun x1156 () Int)
(declare-fun x914 () Bool)
(declare-fun x116 () Int)
(declare-fun x1019 () Bool)
(declare-fun x899 () Bool)
(declare-fun x51 () Int)
(declare-fun x434 () Bool)
(declare-fun x1116 () Bool)
(declare-fun x373 () Int)
(declare-fun x156 () Bool)
(declare-fun x811 () Bool)
(declare-fun x496 () Int)
(declare-fun x177 () Bool)
(declare-fun x717 () Int)
(declare-fun x1124 () Bool)
(declare-fun x294 () Int)
(declare-fun x912 () Bool)
(declare-fun x746 () Bool)
(declare-fun x59 () Int)
(declare-fun x118 () Bool)
(declare-fun x585 () Int)
(declare-fun x1122 () Bool)
(declare-fun x1139 () Bool)
(declare-fun x147 () Int)
(declare-fun x35 () Bool)
(declare-fun x258 () Int)
(declare-fun x575 () Int)
(declare-fun x1091 () Int)
(declare-fun x1010 () Int)
(declare-fun x122 () Bool)
(declare-fun x482 () Bool)
(declare-fun x93 () Int)
(declare-fun x286 () Int)
(declare-fun x542 () Int)
(declare-fun x1085 () Int)
(declare-fun x931 () Int)
(declare-fun x859 () Int)
(declare-fun x588 () Bool)
(declare-fun x874 () Int)
(declare-fun x493 () Bool)
(declare-fun x654 () Bool)
(declare-fun x114 () Int)
(declare-fun x9 () Int)
(declare-fun x37 () Int)
(declare-fun x80 (x439) Int)
(declare-fun x581 () Bool)
(declare-fun x263 () Bool)
(declare-fun x475 () Bool)
(declare-fun x565 () Bool)
(declare-fun x485 () Int)
(declare-fun x580 () Bool)
(declare-fun x840 () Int)
(declare-fun x457 () Bool)
(declare-fun x1138 () Int)
(declare-fun x673 () Bool)
(declare-fun x741 () Int)
(declare-fun x1050 () Int)
(declare-fun x1096 () Int)
(declare-fun x1110 () Int)
(declare-fun x198 () Int)
(declare-fun x709 () Bool)
(declare-fun x720 () Int)
(declare-fun x724 () Bool)
(declare-fun x269 () Int)
(declare-fun x134 () Int)
(declare-fun x951 () Int)
(declare-fun x1151 () Bool)
(declare-fun x185 () Bool)
(declare-fun x163 () Bool)
(declare-fun x655 () Int)
(declare-fun x472 () Int)
(declare-fun x792 () Bool)
(declare-fun x889 () Int)
(declare-fun x785 () Bool)
(declare-fun x112 () Bool)
(declare-fun x166 () Int)
(declare-fun x860 () Int)
(declare-fun x395 () Int)
(declare-fun x133 (x439) Int)
(declare-fun x780 () Bool)
(declare-fun x695 () Bool)
(declare-fun x22 () Bool)
(declare-fun x288 () Int)
(declare-fun x389 () Bool)
(declare-fun x617 () Int)
(declare-fun x347 () Int)
(declare-fun x1132 () Bool)
(declare-fun x12 () Int)
(declare-fun x302 () Int)
(declare-fun x770 (x439) Int)
(declare-fun x109 () Int)
(declare-fun x316 () Bool)
(declare-fun x365 () Int)
(declare-fun x960 () Bool)
(declare-fun x1119 () Int)
(declare-fun x315 () Int)
(declare-fun x924 () Int)
(declare-fun x476 () Bool)
(declare-fun x897 (Int) Int)
(declare-fun x72 () Int)
(declare-fun x712 () Int)
(declare-fun x680 () Bool)
(declare-fun x1063 (Int) Int)
(declare-fun x52 () Int)
(declare-fun x31 () Bool)
(declare-fun x957 () Bool)
(declare-fun x613 () Int)
(declare-fun x1097 (Int) Int)
(declare-fun x21 () Int)
(declare-fun x28 () Int)
(declare-fun x753 () Int)
(declare-fun x1025 () Int)
(declare-fun x5 () Bool)
(declare-fun x941 () Int)
(declare-fun x349 () Bool)
(declare-fun x308 () Bool)
(declare-fun x858 () Bool)
(declare-fun x54 () Int)
(declare-fun x452 () Int)
(declare-fun x117 () Int)
(declare-fun x83 () Int)
(declare-fun x384 () Bool)
(declare-fun x964 () Int)
(declare-fun x277 () Int)
(declare-fun x104 () Int)
(declare-fun x426 () Int)
(declare-fun x487 () Bool)
(declare-fun x40 () Bool)
(declare-fun x545 () Int)
(declare-fun x558 () Int)
(declare-fun x1163 () Bool)
(declare-fun x74 () Bool)
(declare-fun x966 () Bool)
(declare-fun x338 () Int)
(declare-fun x1137 () Bool)
(declare-fun x760 () Bool)
(declare-fun x977 () Bool)
(declare-fun x839 () Int)
(declare-fun x790 () Bool)
(declare-fun x500 () Bool)
(declare-fun x101 () Int)
(declare-fun x1041 () Int)
(declare-fun x164 () Int)
(declare-fun x173 () Int)
(declare-fun x180 () Bool)
(declare-fun x432 () Int)
(declare-fun x1117 () Int)
(declare-fun x477 () Bool)
(declare-fun x820 () Bool)
(declare-fun x453 () Int)
(declare-fun x257 () Int)
(declare-fun x2 () Int)
(declare-fun x179 () Bool)
(declare-fun x778 () Bool)
(declare-fun x245 () Int)
(declare-fun x378 () Int)
(declare-fun x521 () Int)
(declare-fun x408 () Bool)
(declare-fun x307 () Bool)
(declare-fun x390 () Int)
(declare-fun x771 () Bool)
(declare-fun x789 () Bool)
(declare-fun x821 () Bool)
(declare-fun x354 () Bool)
(declare-fun x635 () Bool)
(declare-fun x295 (x439) Int)
(declare-fun x586 () Bool)
(declare-fun x824 () Int)
(declare-fun x739 () Int)
(declare-fun x84 () Bool)
(declare-fun x1061 () Int)
(declare-fun x981 () Int)
(declare-fun x656 () Int)
(declare-fun x492 () Bool)
(declare-fun x27 () Int)
(declare-fun x320 () Bool)
(declare-fun x750 () Int)
(declare-fun x78 () Bool)
(declare-fun x32 () Int)
(declare-fun x498 () Bool)
(declare-fun x596 () Bool)
(declare-fun x235 () Int)
(declare-fun x549 () Bool)
(declare-fun x1027 () Int)
(declare-fun x1042 () Int)
(declare-fun x786 () Int)
(declare-fun x944 () Int)
(declare-fun x702 () Int)
(declare-fun x383 (Int Int) Int)
(declare-fun x556 () Int)
(declare-fun x537 () Bool)
(declare-fun x1003 () Bool)
(declare-fun x1004 () Bool)
(declare-fun x971 () Bool)
(declare-fun x621 () Bool)
(declare-fun x96 () Bool)
(declare-fun x149 () Bool)
(declare-fun x566 () Bool)
(declare-fun x462 () Bool)
(declare-fun x281 () Int)
(declare-fun x355 () Bool)
(declare-fun x424 () Int)
(declare-fun x1066 () Int)
(declare-fun x557 () Int)
(declare-fun x645 () Bool)
(declare-fun x138 () Int)
(declare-fun x1033 () Int)
(declare-fun x1051 () Bool)
(declare-fun x207 () Bool)
(declare-fun x973 () Bool)
(declare-fun x806 () Int)
(declare-fun x403 () Int)
(declare-fun x481 () Bool)
(declare-fun x1020 () Bool)
(declare-fun x388 () Int)
(declare-fun x379 () Int)
(declare-fun x402 () Bool)
(declare-fun x1007 () Bool)
(declare-fun x415 () Bool)
(declare-fun x246 () Int)
(declare-fun x550 () Bool)
(declare-fun x662 () Bool)
(declare-fun x129 () Int)
(declare-fun x259 () Bool)
(declare-fun x979 () Bool)
(declare-fun x871 () Int)
(declare-fun x30 () Int)
(declare-fun x76 () Bool)
(declare-fun x972 () Int)
(declare-fun x727 () Int)
(declare-fun x736 () Bool)
(declare-fun x880 () Int)
(declare-fun x878 () Bool)
(declare-fun x141 () Bool)
(declare-fun x863 () Bool)
(declare-fun x1014 () Int)
(declare-fun x1131 () Int)
(declare-fun x160 () Bool)
(declare-fun x696 () Bool)
(declare-fun x620 () Int)
(declare-fun x363 () Int)
(declare-fun x606 () Bool)
(declare-fun x484 () Int)
(declare-fun x1028 () Int)
(declare-fun x936 () Int)
(declare-fun x417 () Bool)
(declare-fun x926 () Int)
(declare-fun x480 () Int)
(declare-fun x330 () Int)
(declare-fun x344 () Bool)
(declare-fun x864 () Bool)
(declare-fun x999 (Int) Int)
(declare-fun x345 () Int)
(declare-fun x421 () Bool)
(declare-fun x24 (Int) Int)
(declare-fun x930 () Int)
(declare-fun x722 () Bool)
(declare-fun x227 () Int)
(declare-fun x754 () Int)
(declare-fun x323 () Int)
(declare-fun x335 () Bool)
(declare-fun x362 () Int)
(declare-fun x1121 () Int)
(declare-fun x264 () Int)
(declare-fun x1111 () Bool)
(declare-fun x423 () Int)
(declare-fun x266 () Bool)
(declare-fun x85 () Int)
(declare-fun x704 () Bool)
(declare-fun x267 () Bool)
(declare-fun x562 () Int)
(declare-fun x1142 () Bool)
(declare-fun x762 () Bool)
(declare-fun x46 () Bool)
(declare-fun x822 () Bool)
(declare-fun x1154 () Bool)
(declare-fun x430 () Bool)
(declare-fun x105 () Bool)
(declare-fun x995 () Bool)
(declare-fun x1102 () Bool)
(declare-fun x126 () Int)
(declare-fun x65 () Int)
(declare-fun x740 () Int)
(declare-fun x1112 () Bool)
(declare-fun x942 () Bool)
(declare-fun x1064 () Int)
(declare-fun x385 () Bool)
(declare-fun x705 () Int)
(declare-fun x1158 () Int)
(declare-fun x1150 () Int)
(declare-fun x845 () Int)
(declare-fun x333 () Int)
(declare-fun x1162 () Int)
(declare-fun x4 () Int)
(declare-fun x767 () Int)
(declare-fun x583 () Int)
(declare-fun x1134 () Bool)
(declare-fun x300 () Bool)
(declare-fun x1115 () Int)
(declare-fun x38 () Int)
(declare-fun x495 () Int)
(declare-fun x659 () Int)
(declare-fun x1127 () Int)
(declare-fun x1082 () Int)
(declare-fun x563 () Bool)
(declare-fun x303 () Int)
(declare-fun x212 () Bool)
(declare-fun x921 () Bool)
(declare-fun x371 () Int)
(declare-fun x1108 () Int)
(declare-fun x241 () Int)
(declare-fun x1060 () Int)
(declare-fun x1005 () Int)
(declare-fun x1152 () Int)
(declare-fun x554 () Bool)
(declare-fun x591 () Bool)
(declare-fun x461 () Int)
(declare-fun x568 () Bool)
(declare-fun x776 (x439) Int)
(declare-fun x541 () Int)
(declare-fun x17 () Int)
(declare-fun x887 () Bool)
(declare-fun x275 () Int)
(declare-fun x891 () Bool)
(declare-fun x238 () Int)
(declare-fun x896 () Int)
(declare-fun x796 () Int)
(declare-fun x99 () Int)
(declare-fun x174 (Int) Int)
(declare-fun x835 () Bool)
(declare-fun x605 () Bool)
(declare-fun x639 () Bool)
(declare-fun x593 () Int)
(declare-fun x310 () Int)
(declare-fun x647 () Bool)
(declare-fun x127 () Int)
(declare-fun x341 () Bool)
(declare-fun x625 () Bool)
(declare-fun x103 () Bool)
(declare-fun x386 () Bool)
(declare-fun x584 () Int)
(declare-fun x1130 () Int)
(declare-fun x665 () Bool)
(declare-fun x646 () Int)
(declare-fun x49 () Int)
(declare-fun x387 () Bool)
(declare-fun x922 () Int)
(declare-fun x289 () Int)
(declare-fun x1123 () Int)
(declare-fun x291 () Int)
(declare-fun x634 () Int)
(declare-fun x959 () Bool)
(declare-fun x751 () Bool)
(declare-fun x774 () Bool)
(declare-fun x595 () Bool)
(declare-fun x607 () Int)
(declare-fun x829 () Bool)
(declare-fun x1126 () Bool)
(declare-fun x181 () Bool)
(declare-fun x769 () Int)
(declare-fun x1098 () Int)
(declare-fun x715 () Int)
(declare-fun x1047 () Int)
(declare-fun x381 () Int)
(declare-fun x342 () Int)
(declare-fun x73 () Bool)
(declare-fun x996 () Bool)
(declare-fun x23 () Int)
(declare-fun x11 () Bool)
(declare-fun x225 () Bool)
(declare-fun x398 () Bool)
(declare-fun x877 () Int)
(declare-fun x20 () Int)
(declare-fun x296 () Bool)
(declare-fun x137 () Int)
(declare-fun x543 () Int)
(declare-fun x206 () Bool)
(declare-fun x460 () Int)
(declare-fun x399 () Int)
(declare-fun x1093 () Int)
(declare-fun x229 () Int)
(declare-fun x1023 () Bool)
(declare-fun x121 () Bool)
(declare-fun x444 (Int Int) Int)
(declare-fun x418 () Bool)
(declare-fun x631 () Bool)
(declare-fun x1018 () Bool)
(declare-fun x718 () Int)
(declare-fun x123 () Int)
(declare-fun x256 () Int)
(declare-fun x608 () Bool)
(declare-fun x343 () Int)
(declare-fun x143 () Bool)
(declare-fun x211 () Int)
(declare-fun x940 () Int)
(declare-fun x8 () Int)
(declare-fun x367 () Int)
(declare-fun x663 () Bool)
(declare-fun x44 () Bool)
(declare-fun x197 () Bool)
(declare-fun x925 () Bool)
(declare-fun x311 () Bool)
(declare-fun x144 () Int)
(declare-fun x837 () Int)
(declare-fun x552 () Int)
(declare-fun x815 () Bool)
(declare-fun x202 () Int)
(declare-fun x1030 () Int)
(declare-fun x262 () Int)
(declare-fun x260 () Bool)
(declare-fun x324 () Int)
(declare-fun x955 () Int)
(declare-fun x532 () Int)
(declare-fun x36 () Int)
(declare-fun x248 () Bool)
(declare-fun x994 () Int)
(declare-fun x992 () Bool)
(declare-fun x773 () Int)
(declare-fun x265 () Int)
(declare-fun x446 () Int)
(declare-fun x1157 () Int)
(declare-fun x697 () Int)
(declare-fun x60 () Bool)
(declare-fun x761 () Int)
(declare-fun x528 () Int)
(declare-fun x1147 () Int)
(declare-fun x508 () Int)
(declare-fun x1009 () Int)
(declare-fun x538 () Bool)
(declare-fun x45 () Bool)
(declare-fun x29 () Int)
(declare-fun x1100 () Bool)
(declare-fun x909 () Bool)
(declare-fun x463 () Int)
(declare-fun x70 () Bool)
(declare-fun x1164 () Bool)
(declare-fun x490 () Bool)
(declare-fun x503 () Int)
(declare-fun x857 () Bool)
(declare-fun x47 () Int)
(declare-fun x218 () Int)
(declare-fun x505 () Int)
(declare-fun x893 () Int)
(declare-fun x747 () Bool)
(declare-fun x956 () Bool)
(declare-fun x255 () Int)
(declare-fun x865 () Int)
(declare-fun x900 () Int)
(declare-fun x757 () Int)
(declare-fun x827 () Int)
(declare-fun x856 () Int)
(declare-fun x587 () Bool)
(declare-fun x176 () Int)
(declare-fun x205 () Bool)
(declare-fun x682 () Bool)
(declare-fun x1107 () Int)
(declare-fun x1012 () Bool)
(declare-fun x794 () Int)
(declare-fun x974 () Int)
(declare-fun x990 () Int)
(declare-fun x369 () Int)
(declare-fun x455 () Int)
(declare-fun x700 () Bool)
(declare-fun x589 () Int)
(declare-fun x1079 (Int) Int)
(declare-fun x866 () Bool)
(declare-fun x1015 () Bool)
(declare-fun x675 () Int)
(declare-fun x351 () Bool)
(declare-fun x88 () Int)
(declare-fun x804 () Int)
(declare-fun x516 () Int)
(declare-fun x597 () Int)
(declare-fun x623 () Int)
(declare-fun x486 () Int)
(declare-fun x963 () Bool)
(declare-fun x1078 () Bool)
(declare-fun x989 () Bool)
(declare-fun x357 () Int)
(declare-fun x768 () Bool)
(declare-fun x157 () Bool)
(declare-fun x66 () Int)
(declare-fun x69 () Int)
(declare-fun x280 () Int)
(declare-fun x962 () Bool)
(declare-fun x788 () Bool)
(declare-fun x146 () Bool)
(declare-fun x886 () Int)
(declare-fun x819 () Bool)
(declare-fun x136 () Int)
(declare-fun x983 () Int)
(declare-fun x150 (x439) Int)
(declare-fun x1153 (x439) Int)
(declare-fun x531 () Bool)
(declare-fun x214 () Int)
(declare-fun x719 () Int)
(declare-fun x681 () Bool)
(declare-fun x297 () Bool)
(declare-fun x1013 () Bool)
(declare-fun x947 () Int)
(declare-fun x506 () Int)
(declare-fun x272 () Bool)
(declare-fun x911 () Int)
(declare-fun x458 () Int)
(declare-fun x629 () Bool)
(declare-fun x1032 () Int)
(declare-fun x812 () Bool)
(declare-fun x279 () Bool)
(declare-fun x670 () Bool)
(declare-fun x1159 () Int)
(declare-fun x131 () Int)
(declare-fun x649 () Int)
(declare-fun x657 () Int)
(declare-fun x869 () Int)
(declare-fun x187 () Bool)
(declare-fun x193 () Bool)
(declare-fun x744 () Int)
(declare-fun x1022 () Bool)
(declare-fun x251 () Bool)
(declare-fun x95 () Bool)
(declare-fun x632 () Int)
(declare-fun x923 () Bool)
(declare-fun x787 () Int)
(declare-fun x802 () Bool)
(declare-fun x348 () Int)
(declare-fun x982 () Int)
(declare-fun x183 () Bool)
(declare-fun x560 () Int)
(declare-fun x1103 () Bool)
(declare-fun x318 () Bool)
(declare-fun x216 () Int)
(declare-fun x244 () Bool)
(declare-fun x6 () Int)
(declare-fun x184 () Int)
(declare-fun x231 () Int)
(declare-fun x689 () Int)
(declare-fun x186 () Int)
(declare-fun x16 () Bool)
(declare-fun x764 () Int)
(declare-fun x817 () Bool)
(declare-fun x932 () Bool)
(declare-fun x908 (Int) Int)
(declare-fun x1006 () Int)
(declare-fun x676 () Bool)
(declare-fun x707 () Bool)
(declare-fun x441 () Int)
(declare-fun x329 () Bool)
(declare-fun x533 () Bool)
(declare-fun x242 () Bool)
(declare-fun x115 () Int)
(declare-fun x919 (Int) x439)
(declare-fun x1077 () Bool)
(declare-fun x1072 () Int)
(declare-fun x195 () Bool)
(declare-fun x252 () Int)
(declare-fun x178 () Int)
(declare-fun x642 () Int)
(declare-fun x579 () Int)
(declare-fun x726 () Int)
(declare-fun x1075 () Int)
(declare-fun x234 () Int)
(declare-fun x690 () Int)
(declare-fun x518 () Bool)
(declare-fun x155 () Int)
(declare-fun x1044 () Bool)
(declare-fun x640 () Bool)
(declare-fun x440 () Int)
(declare-fun x818 () Bool)
(declare-fun x735 () Bool)
(declare-fun x436 () Bool)
(declare-fun x716 () Bool)
(declare-fun x614 () Int)
(declare-fun x823 () Int)
(declare-fun x298 () Bool)
(declare-fun x222 () Bool)
(declare-fun x471 () Bool)
(declare-fun x929 () Bool)
(declare-fun x630 () Bool)
(declare-fun x154 () Bool)
(declare-fun x658 () Bool)
(declare-fun x953 () Int)
(declare-fun x958 () Int)
(declare-fun x419 () Int)
(declare-fun x124 () Int)
(declare-fun x547 () Bool)
(declare-fun x63 () Bool)
(declare-fun x519 () Bool)
(declare-fun x708 () Bool)
(declare-fun x832 () Int)
(declare-fun x734 () Bool)
(declare-fun x79 () Bool)
(declare-fun x1 () Bool)
(declare-fun x427 () Bool)
(declare-fun x551 () Int)
(declare-fun x1001 () Bool)
(declare-fun x438 () Int)
(declare-fun x410 () Bool)
(declare-fun x667 () Int)
(declare-fun x1101 () Int)
(declare-fun x98 () Bool)
(declare-fun x772 () Bool)
(define-fun x1155 ((x439 x439) (x125 Int)) x439 (ite ((_ is x793) x439) (x793 (x567 x439) (x62 x439) (+ (x706 x439) x125)) (ite ((_ is x356) x439) (x356 (x902 x439) (+ x125 (x998 x439))) (x816 (+ x125 (x895 x439))))))
(define-fun x1002 ((x200 Int)) Int (ite (and (<= 0 x200) (< x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x200 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x448 ((x200 Int)) Int (ite (and (>= x200 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x200 0)) (+ x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) x200))
(define-fun x514 ((x200 Int)) Int (ite (and (>= x200 0) (< x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x200 (ite (and (>= x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x200)) (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x200) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x200)) (+ x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1149 x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x450 ((x504 Int)) Bool (and (>= x504 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x504)))
(define-fun x113 ((x504 Int)) Bool (and (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639935 x504) x504) (= x504 (x444 x504 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x905 ((x504 Int)) Bool (and (= 0 (x444 x504 0)) (= (x444 0 x504) 0)))
(define-fun x548 ((x504 Int)) Bool (= (x444 x504 x504) x504))
(define-fun x1026 ((x504 Int)) Bool (and (x113 x504) (x905 x504) (x548 x504)))
(define-fun x327 ((x504 Int) (x470 Int)) Bool (= (x444 x470 x504) (x444 x504 x470)))
(define-fun x1133 ((x504 Int) (x470 Int)) Bool (and (>= (x444 x504 x470) 0) (=> (>= x470 0) (<= (x444 x504 x470) x470)) (=> (>= x504 0) (<= (x444 x504 x470) x504))))
(define-fun x1114 ((x504 Int) (x470 Int)) Bool (and (x1133 x504 x470) (x327 x504 x470)))
(define-fun x253 ((x504 Int)) Bool (= (+ (x1149 x504 32) (x444 x504 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x514 x504)))
(define-fun x139 ((x504 Int)) Bool (and (x253 x504) (x1114 x504 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x270 ((x504 Int) (x470 Int)) Bool (and (>= (x1149 x504 x470) 0) (> x470 (x1149 x504 x470))))
(define-fun x954 ((x504 Int) (x470 Int)) Bool (=> (and (>= x504 0) (> x470 0)) (= (= (x1149 x504 x470) x504) (< x504 x470))))
(define-fun x928 ((x504 Int) (x470 Int)) Bool (=> (and (and (<= x470 x504) (< x504 (+ x470 x470))) (< 0 x470)) (= (x1149 x504 x470) (- x504 x470))))
(define-fun x128 ((x504 Int)) Bool (= 0 (x1149 0 x504)))
(define-fun x346 ((x504 Int)) Bool (= (x1149 x504 1) 0))
(define-fun x57 ((x504 Int)) Bool (= 0 (x1149 x504 x504)))
(define-fun x603 ((x504 Int)) Bool (and (x128 x504) (x57 x504) (x346 x504)))
(define-fun x374 ((x504 Int) (x470 Int)) Bool (=> (and (< 0 x470) (< 0 x504)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x383 x504 x470)) (= x470 (x666 (x514 (x383 x504 x470)) x504)))))
(define-fun x380 ((x504 Int) (x470 Int)) Bool (=> (and (not (= 0 x504)) (not (= 0 x470))) (and (= (x666 (x383 x504 x470) x504) x470) (= (x666 (x383 x504 x470) x470) x504))))
(define-fun x1039 ((x504 Int) (x470 Int)) Bool (=> (and (< 0 x470) (< 0 x504)) (= (< (x666 115792089237316195423570985008687907853269984665640564039457584007913129639935 x504) x470) (> (x383 x504 x470) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x41 ((x504 Int) (x470 Int)) Bool (and (= (x514 (x383 x504 (- x470 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x514 (x383 x504 x470))) (= (x514 (x383 x504 x470)) (x514 (x383 (- x504 115792089237316195423570985008687907853269984665640564039457584007913129639936) x470))) (= (x514 (x383 x504 x470)) (x514 (x383 (- x504 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x470 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x236 ((x504 Int) (x470 Int)) Bool (and (=> (and (and (< 0 x470) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x470)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x504) (< 0 x504))) (= (<= x504 (x666 57896044618658097711785492504343953926634992332820282019728792003956564819967 x470)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x383 x504 x470)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x470) (> x470 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x504 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x504))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x504) (x666 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x470))) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x383 (- x504 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x470 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (> x470 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x470 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x504) (< 0 x504))) (= (>= (x666 57896044618658097711785492504343953926634992332820282019728792003956564819968 x504) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x470)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x383 x504 (- x470 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x504) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x504)) (and (> x470 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x470))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x504) (x666 57896044618658097711785492504343953926634992332820282019728792003956564819968 x470)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x383 (- x504 115792089237316195423570985008687907853269984665640564039457584007913129639936) x470))))))
(define-fun x77 ((x504 Int)) Bool (and (= (x383 x504 0) 0) (= 0 (x383 0 x504))))
(define-fun x331 ((x504 Int)) Bool (and (= (x383 1 x504) x504) (= x504 (x383 x504 1))))
(define-fun x600 ((x504 Int)) Bool (and (x77 x504) (x331 x504)))
(define-fun x652 ((x504 Int)) Bool (= (x1149 x504 1461501637330902918203684832716283019655932542976) (x444 x504 1461501637330902918203684832716283019655932542975)))
(define-fun x352 ((x504 Int)) Bool (and (x1114 x504 1461501637330902918203684832716283019655932542975) (x652 x504)))
(define-fun x89 ((x907 Int)) Int (ite (< x907 x115) (x536 x907) 0))
(define-fun x836 ((x907 Int)) Int (x209 x907))
(define-fun x664 ((x907 x439)) Int (ite (= (x919 x129) x907) x801 (x150 x907)))
(define-fun x1128 ((x907 x439)) Int (ite (= x907 (x919 x9)) x900 (x664 x907)))
(define-fun x1017 ((x907 Int)) Int (ite (= 128 x907) x1032 (x1097 x907)))
(define-fun x511 ((x907 Int)) Int (ite (and (< x907 (+ 160 x1032)) (>= x907 160)) (x209 (+ (- x907 160) x741)) (x1017 x907)))
(define-fun x524 ((x907 Int)) Int (ite (= x668 x907) 0 (x511 x907)))
(define-fun x674 ((x907 Int)) Int (ite (= x425 x907) x405 (x524 x907)))
(define-fun x1104 ((x907 Int)) Int (ite (and (> (+ x405 x148) x907) (<= x148 x907)) (x209 (+ (- x907 x148) x1150)) (x674 x907)))
(define-fun x848 ((x907 Int)) Int (ite (= x38 x907) 0 (x1104 x907)))
(define-fun x610 ((x907 Int)) Int (ite (= x907 x321) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x848 x907)))
(define-fun x111 ((x907 Int)) Int (ite (= x907 x1090) 160 (x610 x907)))
(define-fun x1148 ((x907 Int)) Int (ite (= x373 x907) x25 (x111 x907)))
(define-fun x1016 ((x907 Int)) Int (ite (= x907 x210) x539 (x1148 x907)))
(define-fun x502 ((x907 Int)) Int (ite (= x191 x907) x319 (x1016 x907)))
(define-fun x171 ((x907 Int)) Int (ite (= x363 x907) x850 (x502 x907)))
(define-fun x526 ((x907 Int)) Int (ite (= x907 x936) x28 (x171 x907)))
(define-fun x984 ((x907 Int)) Int (ite x225 (x171 x907) (ite x864 (x502 x907) (ite x700 (x1016 x907) (ite x681 (x1148 x907) (x526 x907))))))
(define-fun x494 ((x907 Int)) Int (ite (= x907 x505) 0 (x984 x907)))
(define-fun x360 ((x907 Int)) Int (ite x1046 (x984 x907) (x494 x907)))
(define-fun x224 ((x907 Int)) Int (ite (= x907 x839) x347 (x360 x907)))
(define-fun x814 ((x907 Int)) Int (ite (= x756 x907) x532 (x224 x907)))
(define-fun x573 ((x907 Int)) Int (ite (= x907 x240) x375 (x814 x907)))
(define-fun x474 ((x907 Int)) Int (ite (= x907 x1105) x506 (x573 x907)))
(define-fun x350 ((x907 Int)) Int (ite (= x907 x204) x1127 (x474 x907)))
(define-fun x268 ((x907 Int)) Int (ite (= x907 x521) x1144 (x350 x907)))
(define-fun x570 ((x907 Int)) Int (ite x665 (x350 x907) (ite x326 (x474 x907) (ite x421 (x573 x907) (ite x267 (x814 x907) (x268 x907))))))
(define-fun x671 ((x907 Int)) Int (ite (= x1011 x907) 0 (x570 x907)))
(define-fun x961 ((x907 Int)) Int (ite x476 (x570 x907) (x671 x907)))
(define-fun x650 ((x907 Int)) Int (ite (= x472 x907) x469 (x961 x907)))
(define-fun x194 ((x907 Int)) Int (ite (= x907 x523) x1118 (x650 x907)))
(define-fun x110 ((x907 Int)) Int (ite (= x507 x907) x642 (x194 x907)))
(define-fun x1068 ((x907 Int)) Int (ite (= x907 x1121) x310 (x110 x907)))
(define-fun x841 ((x907 Int)) Int (ite (= x907 x649) x564 (x1068 x907)))
(define-fun x622 ((x907 Int)) Int (ite (= x273 x907) x381 (x841 x907)))
(define-fun x39 ((x907 Int)) Int (ite (= x907 x208) x49 (x622 x907)))
(define-fun x572 ((x907 Int)) Int (ite x695 (x622 x907) (ite x392 (x841 x907) (ite x808 (x1068 x907) (ite x309 (x110 x907) (x39 x907))))))
(define-fun x616 ((x907 Int)) Int (ite (= x953 x907) x688 (x572 x907)))
(define-fun x90 ((x907 Int)) Int (ite (= x907 x656) x1147 (x616 x907)))
(define-fun x867 ((x907 Int)) Int (ite (= x907 x828) x325 (x90 x907)))
(define-fun x938 ((x907 Int)) Int (ite (= x1117 x907) x1073 (x867 x907)))
(define-fun x153 ((x907 Int)) Int (ite (and (<= x252 x907) (< x907 (+ x1073 x252))) (x209 (+ (- x907 x252) x1056)) (x938 x907)))
(define-fun x949 ((x907 Int)) Int (ite (= x907 x620) 0 (x153 x907)))
(define-fun x978 ((x907 Int)) Int (ite x677 (x90 x907) (x949 x907)))
(define-fun x641 ((x907 Int)) Int (ite (= x907 x321) x109 (x978 x907)))
(define-fun x429 ((x907 Int)) Int (ite x71 (x978 x907) (ite x817 (x641 x907) (x978 x907))))
(define-fun x643 ((x907 Int)) Int (ite (= x907 x964) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x429 x907)))
(define-fun x1071 ((x907 Int)) Int (ite (and (<= x964 x907) (> (+ x964 32) x907)) (x1059 (+ (- x907 x964) 0)) (x643 x907)))
(define-fun x852 ((x907 Int)) Int (ite (and (< x907 (+ (x448 (- x951 196)) 196)) (<= 196 x907)) (x978 (+ (- x907 196) (x1002 (+ x321 196)))) (x89 x907)))
(define-fun x82 ((x907 Int)) Int (ite (= 128 x907) x1125 (x527 x907)))
(define-fun x723 ((x907 Int)) Int (ite (and (> (+ x1125 160) x907) (>= x907 160)) (x852 (+ 196 (- x907 160))) (x82 x907)))
(define-fun x192 ((x907 Int)) Int (ite (= x907 x496) 0 (x723 x907)))
(define-fun x306 ((x907 Int)) Int (ite (= x907 x274) x598 (x192 x907)))
(define-fun x249 ((x907 Int)) Int (ite (and (>= x907 x2) (< x907 (+ x2 x598))) (x852 (+ x495 (- x907 x2))) (x306 x907)))
(define-fun x416 ((x907 Int)) Int (ite (= x65 x907) 0 (x249 x907)))
(define-fun x489 ((x907 Int)) Int (ite (= x1041 x907) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x416 x907)))
(define-fun x540 ((x907 Int)) Int (ite (= x907 x1041) x155 (x489 x907)))
(define-fun x991 ((x907 x439)) Int (ite (= (x919 x9) x907) x275 (x1128 x907)))
(define-fun x721 ((x907 x439)) Int (ite (= (x919 x562) x907) x97 (x991 x907)))
(define-fun x217 ((x907 Int)) Int (ite (and (<= x694 x907) (< x907 (+ x694 0))) (x897 (+ (- x907 x694) 0)) (x540 x907)))
(define-fun x1065 ((x907 Int)) Int (ite x898 (x540 x907) (ite x605 (x217 x907) (x540 x907))))
(define-fun x188 ((x907 Int)) Int (ite x898 (x174 x907) (x897 x907)))
(define-fun x679 ((x907 Int)) Int (ite (= x907 x694) x230 (x1065 x907)))
(define-fun x428 ((x907 Int)) Int (ite (and (<= x419 x907) (> (+ x419 x230) x907)) (x188 (+ (- x907 x419) 0)) (x679 x907)))
(define-fun x699 ((x907 x439)) Int (ite x605 (x776 x907) (x721 x907)))
(define-fun x167 ((x907 x439)) Int (ite (= (x919 x562) x907) x491 (x699 x907)))
(define-fun x1070 ((x907 x439)) Int (ite (= x907 (x919 x9)) x1042 (x167 x907)))
(define-fun x1049 ((x907 x439)) Int (ite x882 (x1128 x907) (ite x898 (x1128 x907) (ite x420 (x699 x907) (x1070 x907)))))
(define-fun x618 ((x907 Int)) Int (ite x882 (x416 x907) (ite x76 (x1065 x907) (x428 x907))))
(define-fun x394 ((x907 x439)) Int (ite (= x907 (x919 x9)) x655 (x1049 x907)))
(define-fun x520 ((x907 x439)) Int (ite (= (x919 x315) x907) x239 (x394 x907)))
(define-fun x830 ((x907 x439)) Int (ite (= (x919 x315) x907) x302 (x520 x907)))
(define-fun x846 ((x907 x439)) Int (ite (= x907 (x919 x9)) x303 (x830 x907)))
(define-fun x226 ((x907 Int)) Int (ite (= x845 x907) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x618 x907)))
(define-fun x317 ((x907 Int)) Int (ite (= x138 x907) 192 (x226 x907)))
(define-fun x571 ((x907 Int)) Int (ite (= x728 x907) x847 (x317 x907)))
(define-fun x737 ((x907 Int)) Int (ite (= x907 x644) x614 (x571 x907)))
(define-fun x698 ((x907 Int)) Int (ite (= x907 x589) x176 (x737 x907)))
(define-fun x182 ((x907 Int)) Int (ite (= x431 x907) x1081 (x698 x907)))
(define-fun x250 ((x907 x439)) Int (ite x318 (x295 x907) (x846 x907)))
(define-fun x339 ((x907 x439)) Int (ite x1062 (x250 x907) (ite x866 (x80 x907) (x250 x907))))
(define-fun x513 ((x907 Int)) Int (ite (= x748 x907) x777 (x182 x907)))
(define-fun x370 ((x907 Int)) Int (ite x471 (x182 x907) (ite x300 (x698 x907) (ite x95 (x737 x907) (ite x774 (x571 x907) (x513 x907))))))
(define-fun x683 ((x907 Int)) Int (ite (= x907 x484) 0 (x370 x907)))
(define-fun x130 ((x907 Int)) Int (ite x316 (x370 x907) (x683 x907)))
(define-fun x221 ((x907 Int)) Int (ite (= x120 x907) x452 (x130 x907)))
(define-fun x997 ((x907 Int)) Int (ite (= x907 x590) x23 (x221 x907)))
(define-fun x522 ((x907 Int)) Int (ite (= x697 x907) x1010 (x997 x907)))
(define-fun x364 ((x907 Int)) Int (ite (= x459 x907) x422 (x522 x907)))
(define-fun x170 ((x907 Int)) Int (ite (= x907 x126) x740 (x364 x907)))
(define-fun x220 ((x907 Int)) Int (ite (= x151 x907) x247 (x170 x907)))
(define-fun x393 ((x907 Int)) Int (ite x822 (x170 x907) (ite x103 (x364 x907) (ite x1048 (x522 x907) (ite x1001 (x997 x907) (x220 x907))))))
(define-fun x555 ((x907 Int)) Int (ite (= x164 x907) 0 (x393 x907)))
(define-fun x795 ((x907 Int)) Int (ite x1132 (x393 x907) (x555 x907)))
(define-fun x94 ((x907 Int)) Int (ite (= x61 x907) x667 (x795 x907)))
(define-fun x1092 ((x907 Int)) Int (ite (= x907 x1014) x926 (x94 x907)))
(define-fun x913 ((x907 Int)) Int (ite (= x503 x907) x904 (x1092 x907)))
(define-fun x140 ((x907 Int)) Int (ite (= x1027 x907) x395 (x913 x907)))
(define-fun x1087 ((x907 Int)) Int (ite (and (>= x907 x845) (> (+ 0 x845) x907)) (x24 (+ (- x907 x845) 0)) (x140 x907)))
(define-fun x885 ((x907 Int)) Int (ite x318 (x1087 x907) (x140 x907)))
(define-fun x710 ((x907 Int)) Int (ite (= x907 x286) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x885 x907)))
(define-fun x711 ((x907 Int)) Int (ite (= x907 x332) x1064 (x710 x907)))
(define-fun x916 ((x907 Int)) Int (ite (= x907 x107) x717 (x711 x907)))
(define-fun x401 ((x907 Int)) Int (ite (= x939 x907) x124 (x916 x907)))
(define-fun x553 ((x907 Int)) Int (ite (= x52 x907) x702 (x401 x907)))
(define-fun x305 ((x907 Int)) Int (ite x923 (x401 x907) (ite x1007 (x916 x907) (ite x588 (x711 x907) (ite x427 (x710 x907) (x553 x907))))))
(define-fun x628 ((x907 Int)) Int (ite (= x907 x412) 0 (x305 x907)))
(define-fun x473 ((x907 Int)) Int (ite x746 (x305 x907) (x628 x907)))
(define-fun x391 ((x907 Int)) Int (ite (= x907 x845) x369 (x473 x907)))
(define-fun x881 ((x907 Int)) Int (ite (= x726 x907) x30 (x391 x907)))
(define-fun x1055 ((x907 Int)) Int (ite (= x907 x265) x896 (x881 x907)))
(define-fun x119 ((x907 Int)) Int (ite (= x907 x607) x114 (x1055 x907)))
(define-fun x534 ((x907 Int)) Int (ite (= x907 x334) x968 (x119 x907)))
(define-fun x48 ((x907 Int)) Int (ite (= x198 x907) x438 (x534 x907)))
(define-fun x243 ((x907 Int)) Int (ite (= x907 x144) x517 (x48 x907)))
(define-fun x637 ((x907 Int)) Int (ite x259 (x48 x907) (ite x686 (x534 x907) (ite x1122 (x119 x907) (ite x1024 (x1055 x907) (x243 x907))))))
(define-fun x861 ((x907 Int)) Int (ite (= x907 x184) 0 (x637 x907)))
(define-fun x196 ((x907 Int)) Int (ite x183 (x637 x907) (x861 x907)))
(define-fun x684 ((x907 Int)) Int (ite (= x907 x6) x19 (x196 x907)))
(define-fun x451 ((x907 Int)) Int (ite x404 (x1071 x907) (x643 x907)))
(define-fun x34 ((x907 Int)) Int (ite (= x907 x281) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x451 x907)))
(define-fun x626 ((x907 Int)) Int (ite (and (> (+ 32 x281) x907) (>= x907 x281)) (x1079 (+ (- x907 x281) 0)) (x34 x907)))
(define-fun x948 ((x907 Int)) Int (ite x46 (x626 x907) (x34 x907)))
(define-fun x987 ((x907 Int)) Int (ite (= x907 x871) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x948 x907)))
(define-fun x701 ((x907 Int)) Int (ite (and (<= x871 x907) (< x907 (+ 32 x871))) (x908 (+ 0 (- x907 x871))) (x987 x907)))
(define-fun x1094 ((x907 Int)) Int (ite x5 (x701 x907) (x987 x907)))
(define-fun x918 ((x907 Int)) Int (ite (= x516 x907) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x1094 x907)))
(define-fun x892 ((x907 Int)) Int (ite (and (> (+ x516 32) x907) (>= x907 x516)) (x1063 (+ 0 (- x907 x516))) (x918 x907)))
(define-fun x336 ((x907 Int)) Int (ite x925 (x892 x907) (x918 x907)))
(define-fun x525 ((x907 Int)) Int (ite (= x945 x907) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x336 x907)))
(define-fun x376 ((x907 Int)) Int (ite (and (< x907 (+ 32 x945)) (<= x945 x907)) (x917 (+ 0 (- x907 x945))) (x525 x907)))
(define-fun x781 ((x907 Int)) Int (ite x1058 (x376 x907) (x525 x907)))
(define-fun x980 ((x504 Int)) Bool (=> (and (not (= x504 54065695799311150304516525983669583430195215316752708547810291668471328538624)) (not (= 75068239 x504)) (not (= x504 1845979623)) (not (= 2329570063 x504)) (not (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 x504)) (not (= 1901074598 x504)) (not (= x504 102499615646744134772650717477688572466918151731817230690449879178893085114368)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x504)) (not (= x504 832554005)) (not (= x504 22445611572322667099362401052093617030957452505749565894135597532943828910080)) (not (= x504 818759841)) (not (= x504 113209349505197351213641468582317386984598294884268236158119619414039440916480)) (not (= 4076725131 x504)) (not (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 x504)) (not (= 4294967296 x504)) (not (= x504 1262878978)) (not (= x504 4739670319144124481003130557741556594755290868171975227769803894069435301888)) (not (= 4199168155 x504)) (not (= x504 64069044923792539370177021244577383457373632460708312080110356237917649633280)) (not (= x504 79228162514264337593543950335)) (not (= x504 1461501637330902918203684832716283019655932542975)) (not (= x504 1245659826)) (not (= 2220280665 x504)) (not (= 2005408114 x504)) (not (= 1461501637330902918203684832716283019655932542976 x504)) (not (= 3705713892 x504)) (not (= 2249206060 x504)) (not (= x504 1553423035)) (not (= 3084411429 x504)) (not (= 2376452955 x504)) (not (= x504 18446744073709551615)) (not (= 3572374928 x504)) (not (= x504 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (< 10000 x504)) (not ((_ is x816) (x919 x504)))))
(assert (= (or x533 x605) x1112))
(assert (= (x816 2329570063) (x919 2329570063)))
(assert (x450 x869))
(assert (= (x174 (- 256 x419)) 0))
(assert (x139 x37))
(assert (= (or x530 x1132) x7))
(assert (= x989 (=> (and (< x1159 256) (<= 0 x1159) (<= x1159 255) (= (= x1159 0) x293)) (and (=> (and x293 (and (= x483 (x444 1461501637330902918203684832716283019655932542975 x315)) (<= x178 1461501637330902918203684832716283019655932542975) (= (x394 (x919 x315)) x239) (= x238 (x770 (x919 x9))) (= x142 x68) (< x239 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x860 0) (= (x1049 (x919 x9)) x1115) (= (x512 x9 x238) x315) (>= x178 0) (= (= x68 x36) x1124) (= (x520 (x919 x315)) x173) (= x303 (x830 (x919 x9))) (< x178 1461501637330902918203684832716283019655932542976) (= x655 x1115) (= x315 x36) x1124 (= x173 x302) (< (+ x303 x860) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x587 (= x483 0)))) (and (=> (and (and (< x926 1461501637330902918203684832716283019655932542976) (>= x395 0) (<= x395 1461501637330902918203684832716283019655932542975) (= (x1002 (+ 4 x845)) x138) (>= 1461501637330902918203684832716283019655932542975 x926) (< x667 1461501637330902918203684832716283019655932542976) (= x81 (> x847 0)) (>= 1461501637330902918203684832716283019655932542975 x667) (<= 0 x904) (<= 0 x667) (= x728 (x1002 (+ 192 x138))) (= x847 (x317 128)) (= x4 (x1002 (+ x728 32))) (>= x926 0) (>= 1461501637330902918203684832716283019655932542975 x904) (= x460 (x444 1461501637330902918203684832716283019655932542975 x315)) (> 1461501637330902918203684832716283019655932542976 x904) (< x395 1461501637330902918203684832716283019655932542976)) (not x587)) (and (=> (and x81 (and (= x644 x4) (= x614 (x571 160)) (= x1146 (> x847 32)))) (and (=> (and (and (= x1142 (< 64 x847)) (= x176 (x737 192)) (= x589 (x1002 (+ 32 x4)))) x1146) (and (=> (and (and (= x785 (< 96 x847)) (= x431 (x1002 (+ 64 x4))) (= (x698 224) x1081)) x1142) (and (=> (and (= x941 96) (not x785)) x636) (=> x785 x745))) (=> (and (= 64 x941) (not x1142)) x636))) (=> (and (= 32 x941) (not x1146)) x636))) (=> (and (not x81) (= x941 0)) x636))) (=> (and x587 (and (= x395 x27) (= 0 x561) (= x201 x904) (= x667 x794) (= x926 x466))) x1102))) (=> (and (and (= x904 x201) (= x395 x27) (= x667 x794) (= x466 x926) (= 0 x561)) (not x293)) x1102)))))
(assert (x450 x425))
(assert (x450 x466))
(assert (= x651 (and x237 x385)))
(assert (= x568 (=> (and (and (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x264) (and (= (<= x264 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 32 x264)))) (= x262 x330) (>= 1461501637330902918203684832716283019655932542975 x833) (not (= 0 x1162)) (= (x781 x945) x833)) (and (= x768 false) (= x1021 x1043) (= x179 false) (= x1067 x1038) (= x981 x632) (= x705 x348))) x676)))
(assert (= (x919 2249206060) (x816 2249206060)))
(assert (= x279 (and x566 x81)))
(assert (x450 x28))
(assert (x450 x93))
(assert (= 2376452955 (x1153 (x816 2376452955))))
(assert (= (and (not x75) x1012) x695))
(assert (x450 x558))
(assert (= (and x563 x1135) x971))
(assert (= x212 (and (not x647) x979)))
(assert (and (=> (< 0 32) (= x783 (+ (* 32 (x666 x783 32)) (x1149 x783 32)))) (x954 x783 32) (x270 x783 32) (x928 x783 32)))
(assert (= x1051 (=> (and (or (and (and (< x264 4294967296) (= 1 x1162)) x296) (and (not x296) (= x446 x1162))) (and (= x296 (< 0 x446)) (= (x336 x516) x361) (= x378 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x584)) (not (or (> x219 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x219 32) (= (<= x219 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (<= x361 1461501637330902918203684832716283019655932542975) (not (= 0 x617)) (= x945 (x1002 (+ x378 x516))) (= (x1002 (+ 31 x219)) x584))) x568)))
(assert (= (x816 1461501637330902918203684832716283019655932542976) (x919 1461501637330902918203684832716283019655932542976)))
(assert (= (x1097 224) 0))
(assert (x450 x409))
(assert (x450 x178))
(assert (= x857 (=> (and (= x1117 (x1002 (+ x828 x901))) (= (x448 (- x656 x1090)) x688) (= x953 (x1002 (+ 32 x523))) (= x197 (< 0 x1147)) (= x901 (x514 (* 32 x1147))) (= (x1002 (+ 32 x656)) x828)) (and (=> (and (= x558 x1117) (not x197)) x547) (=> x197 x957)))))
(assert (x450 x265))
(assert (x450 x796))
(assert (= x335 (or x906 x677)))
(assert (x450 x874))
(assert (= (x919 4739670319144124481003130557741556594755290868171975227769803894069435301888) (x816 4739670319144124481003130557741556594755290868171975227769803894069435301888)))
(assert (x450 x657))
(assert (x1026 x258))
(assert (x450 x1034))
(assert (x450 x623))
(assert (= (and x680 (not x685)) x476))
(assert (= (x919 4076725131) (x816 4076725131)))
(assert (= x808 (and x876 (not x434))))
(assert (x450 x911))
(assert (= 4294967296 (x1153 (x816 4294967296))))
(assert (x450 x214))
(assert (= (x816 22445611572322667099362401052093617030957452505749565894135597532943828910080) (x919 22445611572322667099362401052093617030957452505749565894135597532943828910080)))
(assert (= (and x621 (not x630)) x864))
(assert (x450 x951))
(assert (x450 x1029))
(assert (x1026 x315))
(assert (x450 x719))
(assert (= (x816 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x919 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x919 1461501637330902918203684832716283019655932542975) (x816 1461501637330902918203684832716283019655932542975)))
(assert (= (x527 x464) 0))
(assert (x603 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and (not x132) x161) x1007))
(assert (= 0 (x1097 (x1002 (+ x321 196)))))
(assert (x450 x862))
(assert (x450 x528))
(assert (x450 x744))
(assert (= (and x976 x879) x515))
(assert (x1026 x799))
(assert (x450 x1061))
(assert (x450 x455))
(assert (x450 x337))
(assert (x450 x634))
(assert (= x531 (=> (and (= (not (> x25 128)) x1099) (= (x171 256) x28) (= x936 (x1002 (+ x982 96)))) (and (=> (= 128 x1075) x406) x1099))))
(assert (x450 x749))
(assert (x450 x901))
(assert (= (=> (= x790 (not (> x357 1))) (and x254 x790)) x271))
(assert (= (and x743 (not x1078)) x1001))
(assert (= (x1097 (+ (x1002 (+ x321 196)) (- (+ (- x366 160) 196) 196))) 0))
(assert (= (x999 (x512 x9 x238)) 0))
(assert (x450 x702))
(assert (x450 x740))
(assert (x450 x303))
(assert (= (and x851 x921) x213))
(assert (x450 x582))
(assert (x980 x388))
(assert (x139 x232))
(assert (= x408 (and x1151 x92)))
(assert (= x912 (or x842 x1062)))
(assert (x450 x859))
(assert (= x154 (and x435 x1003)))
(assert (x980 x315))
(assert (x603 x246))
(assert (= (or (and x261 (not x782)) x599) x851))
(assert (= (x1097 (+ (x1002 (+ x321 196)) (- (+ x495 (- 192 x2)) 196))) 0))
(assert (= (and (not x430) x819) x923))
(assert (x450 x831))
(assert (= (x1097 (+ 64 (x1002 (+ x321 196)))) 0))
(assert (x450 x1032))
(assert (x450 x202))
(assert (= x477 (and (not x145) x335)))
(assert (= (x174 (- 160 x419)) 0))
(assert (= x349 (and x878 x838)))
(assert (= (and x266 x482) x481))
(assert (= 0 (x527 x399)))
(assert (= (=> (and (= (x1002 (+ 31 x532)) x20) (= (x1002 (+ 32 x472)) x523) (= x472 (x1002 (+ 32 x839))) (= (x1002 (+ x1025 x8)) x507) (= x8 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x20)) (= (< 0 x642) x735) (= (x448 (- x507 x1090)) x1118) (= x1121 (x1002 (+ 32 x507)))) (and (=> (and (not x735) (= x1121 x656)) x857) (=> (and x735 (and (= x434 (> x642 1)) (= (x1002 (+ x560 32)) x64) (>= 1461501637330902918203684832716283019655932542975 x310) (= (x1002 (+ 32 x1121)) x649) (= (x209 x560) x310))) (and (=> (and (and (<= x564 1461501637330902918203684832716283019655932542975) (= x33 (< 2 x642)) (= (x1002 (+ 32 x649)) x273) (= x564 (x209 x64)) (= (x1002 (+ x64 32)) x1034)) x434) (and (=> (and x33 (and (<= x381 1461501637330902918203684832716283019655932542975) (= (x1002 (+ x1034 32)) x1066) (= (x209 x1034) x381) (= (x1002 (+ 32 x273)) x208) (= x75 (> x642 3)))) (and (=> x75 x594) (=> (and (= x208 x656) (not x75)) x857))) (=> (and (= x656 x273) (not x33)) x857))) (=> (and (not x434) (= x649 x656)) x857))))) x193))
(assert (x450 x1160))
(assert (= (x1153 (x919 x562)) x562))
(assert (= x398 (or x695 x658 x808 x392 x309)))
(assert (x450 x151))
(assert (= (=> (and (= (= 0 x199) x959) (= x388 (x444 1461501637330902918203684832716283019655932542975 x315)) (= x199 (x133 (x919 x388)))) (and (=> (and (not x959) (and (= x479 (< 0 x744)) (or (and (and x78 x1037 (= (x339 (x919 x388)) x29) (= (x339 (x919 x9)) x333) (< x994 4294967296) (= x78 (= x29 (x1053 (x919 x388)))) (= x1037 (>= (x1053 (x919 x9)) x333))) x479) (not x479)))) x662) (=> (and x959 (and (= x794 x667) (= x904 x201) (= 0 x561) (= x27 x395) (= x466 x926))) x1102))) x254))
(assert (x450 x877))
(assert (= x163 (and x979 x647)))
(assert (= (and x488 x581) x84))
(assert (x450 x37))
(assert (x450 x1156))
(assert (= (x1153 (x816 33582922474372145882413589741236248003507108108518759994751911431010219196416)) 33582922474372145882413589741236248003507108108518759994751911431010219196416))
(assert (x450 x1086))
(assert (x450 x345))
(assert (= (or (and (not x736) x829) x112) x92))
(assert (= (=> (and (and (and (= x47 x796) (> 1461501637330902918203684832716283019655932542976 x926) (< x409 2220280665) (= x324 x926) (= 1245659826 x409) (>= 1461501637330902918203684832716283019655932542975 x926) (not (> 1245659826 x409)) (= x1069 (x133 (x919 x9))) (= (= x796 0) x578) (< 0 x1069) (= 0 x875) (>= x926 0)) (and (and (and (and (and (and (not (= 4076725131 x556)) (> x211 0) (= 4199168155 x556) (not (= x556 3084411429)) (= (and x673 x449) x854) (not (< x556 2220280665)) (= x211 (x133 (x919 x9))) (not (> 3084411429 x556)) (not (= x556 3572374928)) (> 1461501637330902918203684832716283019655932542976 x904) (= x633 x190) (>= x904 0) (>= 1461501637330902918203684832716283019655932542975 x904) (= (not (= x190 0)) x449) (= 0 x893) (not (= x556 3705713892)) (= x904 x501)) (and (and (= (< 0 x129) x809) (or x15 x809) x187 (= x187 (or x387 x729)) (= x545 x687) (= (> x99 x338) x834) (= (and x696 x592) x729) (= x592 (not (= 0 x687))) (= x15 (= x129 0)) (> 1461501637330902918203684832716283019655932542976 x129) (= 0 x593) (= (x150 (x919 x129)) x338)) (and (= x395 x545) (not (= 2220280665 x911)) (not (< x911 2220280665)) (= x342 (x133 (x919 x9))) (= (and x43 x854) x696) (>= 1461501637330902918203684832716283019655932542975 x395) (> 1461501637330902918203684832716283019655932542976 x395) (<= 0 x395) (= (not (= 0 x730)) x43) (= 2329570063 x911) (= x634 0) (< 0 x342) (< x911 3084411429) (= x501 x730) (not (= 2249206060 x911))))) (and (= (x133 (x919 x9)) x877) (>= x926 0) (= x633 x926) (< x926 1461501637330902918203684832716283019655932542976) (= x287 0) (= x453 1245659826) (<= x926 1461501637330902918203684832716283019655932542975) (= x575 x824) (> 2220280665 x453) (not (> 1245659826 x453)) (< 0 x877) (= x673 (not (= 0 x824))))) (and (= x205 (= 0 x1029)) (not (= x910 818759841)) (= x575 x667) (> 2220280665 x910) (> 1245659826 x910) (= x123 x1029) (= 0 x1084) (= (and x63 x205) x387) (= x910 832554005) (> 1461501637330902918203684832716283019655932542976 x667) (> x86 0) (>= 1461501637330902918203684832716283019655932542975 x667) (= x86 (x133 (x919 x9))) (>= x667 0) (not (= x910 75068239)))) (and (< 0 x1101) (= x789 (= x569 0)) (= x123 x395) (= x569 x465) (= x1110 0) (>= x395 0) (= (and x789 x942) x63) (not (= 2220280665 x1152)) (= x1101 (x133 (x919 x9))) (not (= 2249206060 x1152)) (not (< x1152 2220280665)) (< x1152 3084411429) (<= x395 1461501637330902918203684832716283019655932542975) (< x395 1461501637330902918203684832716283019655932542976) (= 2329570063 x1152))) (and (= x904 x465) (<= 0 x904) (not (= 4076725131 x739)) (not (< x739 2220280665)) (not (= 3084411429 x739)) (= (x133 (x919 x9)) x940) (not (= x739 3572374928)) (not (> 3084411429 x739)) (< 0 x940) (= x1109 x324) (= 4199168155 x739) (< x904 1461501637330902918203684832716283019655932542976) (= (= x1109 0) x308) (= 0 x255) (not (= x739 3705713892)) (= x942 (and x578 x308)) (>= 1461501637330902918203684832716283019655932542975 x904)))) (and (= x158 false) (<= 0 x754) (<= x510 1461501637330902918203684832716283019655932542975) (>= 255 x168) (= true x45) (> x9 0) x995 (not (= x1085 75068239)) (>= x168 0) (<= 0 x1159) (<= x17 1461501637330902918203684832716283019655932542975) (= (< 0 (x133 (x919 x958))) x863) (<= x9 1461501637330902918203684832716283019655932542975) (not (= x9 x958)) (<= 0 x667) (<= 0 x1054) (>= 1461501637330902918203684832716283019655932542975 x458) (< 0 x455) (>= x613 0) (>= x17 0) (>= 1461501637330902918203684832716283019655932542975 x1160) (>= x1005 0) (<= x806 255) (<= x827 1461501637330902918203684832716283019655932542975) (<= 0 x749) (<= x1131 1461501637330902918203684832716283019655932542975) (<= 0 x1113) (>= 79228162514264337593543950335 x1054) (>= x486 0) (< x1085 1245659826) (<= x1113 255) (not (= 818759841 x1085)) (<= 0 x1160) (>= 1461501637330902918203684832716283019655932542975 x667) (<= x1159 255) (= (x150 (x919 x9)) x276) (>= 1461501637330902918203684832716283019655932542975 x178) (<= 0 x612) (<= 0 x1080) (= x612 (x150 (x919 x958))) (>= x1131 0) (< x667 1461501637330902918203684832716283019655932542976) (<= x468 1461501637330902918203684832716283019655932542975) (<= x904 1461501637330902918203684832716283019655932542975) (>= x395 0) (>= x806 0) (>= x231 0) (<= 0 x827) (<= x155 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1080) (>= x155 0) (>= 1461501637330902918203684832716283019655932542975 x613) (= 5 x1158) (>= 1461501637330902918203684832716283019655932542975 x486) (>= x926 0) (>= 255 x1005) x863 (= x627 false) (> x958 0) (>= 1461501637330902918203684832716283019655932542975 x395) (>= x667 0) (< x1085 2220280665) (>= x426 0) (>= x510 0) (<= 0 x904) (>= 1461501637330902918203684832716283019655932542975 x667) (<= x390 255) (= x129 x458) (>= 255 x551) (<= 0 x178) (>= x390 0) (>= 1461501637330902918203684832716283019655932542975 x749) (= x455 (x133 (x919 x9))) (<= x231 1461501637330902918203684832716283019655932542975) (<= x926 1461501637330902918203684832716283019655932542975) (>= x468 0) (<= 0 x276) (= 832554005 x1085) (= 1262878978 x443) (<= x958 1461501637330902918203684832716283019655932542975) (>= x660 0) (>= 255 x754) (= x47 x667) (>= 1461501637330902918203684832716283019655932542975 x426) (>= x458 0) (>= 1461501637330902918203684832716283019655932542975 x660) (= (< 0 (x133 (x919 x9))) x995) (= x468 x837) (= x708 false) (<= 0 x551))) (and (=> (and (and (= x904 x981) (= true x179) (= x1043 x395) (= x926 x348) (= x768 false) (= x1067 x667)) x834) x676) (=> (and (not x834) (and (= x91 x720) (= x229 (x1002 (+ 31 x1130))) (= x970 (x1002 (+ 32 x362))) (> x718 0) (= x469 x59) (<= x137 1461501637330902918203684832716283019655932542975) (= 1262878978 x840) (= x937 (x1002 (+ x54 x560))) (not (> 4 x115)) (= x952 (x1002 (+ x720 4))) (<= 0 x924) (or (and (< x229 x115) (= (<= x229 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115))) (and (<= x115 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x229 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= 1461501637330902918203684832716283019655932542975 x924) (= (x1002 (+ x1130 32)) x741) (= (x514 (* x642 32)) x54) (= (x1002 (+ 128 x859)) x425) (= x321 (x1002 (+ x552 x425))) (= x552 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x799)) (not (> x691 18446744073709551615)) (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x246) x859) (not (> x424 x115)) (not (> x91 18446744073709551615)) (not (> x1138 x115)) (= x579 (x1002 (+ 4 x88))) (= (x448 (- x115 4)) x1040) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115) (> x1156 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115) (<= x1156 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x115 x1156))) (<= 0 x890) (= (x664 (x919 x9)) x21) (>= x137 0) (= (x1002 (+ x767 32)) x1150) (= x373 (x1002 (+ x1090 160))) (= (x1002 (+ x767 31)) x1156) (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x37) x362) (= (x1002 (+ x1032 x741)) x1138) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1040) (and (< x1040 160) (= true (<= x1040 57896044618658097711785492504343953926634992332820282019728792003956564819967))))) (< (+ x21 x657) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (> x405 18446744073709551615)) (not (= x840 1245659826)) (= x99 x657) (= x767 (x1002 (+ x870 4))) (= x353 (> x321 18446744073709551615)) (= x691 x88) (not (< x115 x937)) (= 0 x442) (not (< 18446744073709551615 x642)) (>= 1461501637330902918203684832716283019655932542975 x890) (= x469 x927) (= x930 (x1002 (+ x1032 31))) (= (- x337 x99) x801) (= x405 (x209 x767)) (= x924 x646) (= (x1002 (+ x148 x405)) x38) (= (ite x298 1 0) x461) (not (< 18446744073709551615 x1147)) (= x337 (x150 (x919 x129))) (= x37 (x1002 (+ x405 31))) (= x1023 (< 0 x25)) (= (x1002 (+ 31 x952)) x856) (= (x1002 (+ 31 x970)) x799) (= x1030 (x1002 (+ x952 32))) (= x424 (x1002 (+ x1150 x405))) (= x719 x870) (= x442 (ite x812 1 0)) (= (x1002 (+ x99 x21)) x900) (= (x111 128) x25) (= (x1002 (+ 4 x321)) x1090) (= (x1002 (+ x1136 31)) x246) (= x642 (x209 x579)) (not (< 18446744073709551615 x719)) (> 2220280665 x840) (= x12 (x514 (* x1147 32))) (= x218 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x930)) (= (< 18446744073709551615 x425) x1089) (= x131 x646) (not (> x69 18446744073709551615)) (= x668 (x1002 (+ x1032 160))) (= (< x425 128) x1165) (= x104 (x1002 (+ 31 x579))) (= x812 (or x1089 x1165)) (= (x1002 (+ x1030 x12)) x764) (= x955 x129) (and (> x115 163) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115))) (= x1032 (x209 x1130)) (= (x1002 (+ x373 32)) x982) (= x1136 (x1002 (+ x218 32))) (= (x133 (x919 x9)) x718) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x104)) (> x115 x104)) (and (> x104 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115))) (= (< x321 x425) x462) (or (and (> x115 x856) (= (<= x115 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x856))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x856) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115))) (= x129 x890) (= 0 x461) (= (x1002 (+ x425 32)) x148) (not (< 18446744073709551615 x1032)) (= (x1002 (+ x579 32)) x560) (= x1147 (x209 x952)) (= x298 (or x462 x353)) (= x1009 x69) (= (x1002 (+ 4 x1009)) x1130) (not (> x764 x115)) (not (< x840 1245659826)))) (and (=> (and (not x1023) (= 0 x1075)) x406) (=> (and (and (= (x1148 160) x539) (= x210 x982) (= (< 32 x25) x344)) x1023) (and (=> (and (not x344) (= x1075 32)) x406) (=> (and x344 (and (= x191 (x1002 (+ x982 32))) (= (< 64 x25) x630) (= x319 (x1016 192)))) (and (=> (and (and (= (x502 224) x850) (= (x1002 (+ 64 x982)) x363) (= x1164 (> x25 96))) x630) (and (=> (and (not x1164) (= x1075 96)) x406) (=> x1164 x531))) (=> (and (not x630) (= x1075 64)) x406))))))))) x14))
(assert (= (and x263 x586) x858))
(assert (x450 x88))
(assert (x450 x1131))
(assert (x450 x1096))
(assert (= (and x56 x747) x5))
(assert (x450 x155))
(assert (= x621 (and x344 x242)))
(assert (x450 x510))
(assert (x450 x955))
(assert (x600 x642))
(assert (x450 x828))
(assert (x450 x291))
(assert (x139 x282))
(assert (x450 x730))
(assert (= x322 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x535) (= x516 (x1002 (+ x871 x965))) (= x1161 (x1002 (+ 31 x1052))) (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1161) x965) (not (or (and (> 32 x1052) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1052) true)) (> x1052 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x535 (x1094 x871)) (= x248 (< 0 x51)) (not (= 0 x440))) (or (and (and (> 4294967296 x219) (= x617 1)) x248) (and (= x617 x51) (not x248)))) x1051)))
(assert (= (x919 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x816 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x9 (x1153 (x919 x9))))
(assert (x450 x342))
(assert (x450 x198))
(assert (x450 x800))
(assert (x450 x131))
(assert (x450 x232))
(assert (= (and (not x844) x7) x933))
(assert (x450 x712))
(assert (and (>= 340282366920938463463374607431768211455 (x512 x9 x238)) (<= 10000 (x512 x9 x238))))
(assert (= x146 (and x912 (not x959))))
(assert (x450 x501))
(assert (and (=> (< 0 32) (= x20 (+ (* 32 (x666 x20 32)) (x1149 x20 32)))) (x954 x20 32) (x270 x20 32) (x928 x20 32)))
(assert (x603 x288))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x672 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x672 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x672 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x672 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x672 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x672 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= 1245659826 (x1153 (x816 1245659826))))
(assert (x450 x234))
(assert (x450 x245))
(assert (= (=> (and (= x591 (< x23 x1033)) (or (and x591 (= (x1002 (+ x23 x742)) x164)) (not x591))) x490) x1106))
(assert (= x957 (=> (and (not (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x371) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1056)) (and (= (<= x371 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1056 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x371 x1056)))) (= x325 x901) (= (x448 (- x379 31)) x58) (not (< 18446744073709551615 x1073)) (= (x1002 (+ x252 x1073)) x620) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x214) (<= x58 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x214 x58)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x58) (> x214 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x1002 (+ x66 32)) x1056) (= x66 (x1002 (+ x1030 x214))) (= x252 (x1002 (+ x1117 32))) (= x775 (not (> x1147 1))) (= (x209 x66) x1073) (= x379 (x448 (- x115 x1030))) (= x214 (x209 x1030)) (= (x1002 (+ x1073 31)) x169) (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x169) x83) (= x1061 (x1002 (+ x83 x252))) (= (x448 (- x115 x1073)) x371)) (and x775 (=> (= x1061 x558) x547)))))
(assert (x450 x97))
(assert (= x979 (and x475 x260)))
(assert (x450 x541))
(assert (and (=> (< 0 32) (= x269 (+ (* 32 (x666 x269 32)) (x1149 x269 32)))) (x954 x269 32) (x270 x269 32) (x928 x269 32)))
(assert (x450 x544))
(assert (x1026 x1120))
(assert (x450 x184))
(assert (= x388 (x1153 (x919 x388))))
(assert (= (or x420 x898 x884) x784))
(assert (x450 x460))
(assert (= x135 (and x1013 (not x759))))
(assert (x450 x239))
(assert (= 18446744073709551615 (x1153 (x816 18446744073709551615))))
(assert (= (x1153 (x816 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (or x326 x665 x267 x421 x244) x680))
(assert (x450 x276))
(assert (x450 x126))
(assert (= (and x266 (not x482)) x103))
(assert (= 0 (x1097 (+ (x1002 (+ 196 x321)) (- (+ x495 (- x257 x2)) 196)))))
(assert (= x1116 (=> (and (= x241 (x448 (- x726 x845))) (= x896 (x881 128)) (= x265 (x1002 (+ 96 x726))) (= (x1002 (+ x265 32)) x800) (= (< 0 x896) x586) (= (x448 (- x241 32)) x369) (= 96 x30) (= x726 (x1002 (+ x609 x463)))) (and (=> (and (= 0 x653) (not x586)) x314) (=> (and x586 (and (= (> x896 32) x792) (= (x1055 160) x114) (= x607 x800))) (and (=> (and (= 32 x653) (not x792)) x314) (=> (and x792 (and (= (x119 192) x968) (= x141 (> x896 64)) (= x334 (x1002 (+ x800 32))))) (and (=> (and (and (= x198 (x1002 (+ x800 64))) (= (< 96 x896) x640) (= (x534 224) x438)) x141) (and (=> (and (not x640) (= 96 x653)) x314) (=> x640 x1139))) (=> (and (not x141) (= 64 x653)) x314)))))))))
(assert (= x745 (=> (and (= x777 (x182 256)) (= x351 (not (> x847 128))) (= (x1002 (+ x4 96)) x748)) (and x351 (=> (= 128 x941) x636)))))
(assert (= 1262878978 (x1153 (x816 1262878978))))
(assert (x450 x847))
(assert (x450 x405))
(assert (= (and x996 (not x172)) x1048))
(assert (x1026 x269))
(assert (x450 x72))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x169 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x169 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x169 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x169 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x169 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x169 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x594 (=> (and (= (x209 x1066) x49) (= x733 (x1002 (+ x208 32))) (= x778 (not (> x642 4))) (>= 1461501637330902918203684832716283019655932542975 x49)) (and (=> (= x733 x656) x857) x778))))
(assert (= x530 (and x185 x591)))
(assert (= x601 (and x358 x407)))
(assert (= (and x311 x780) x161))
(assert (x450 x667))
(assert (= x760 (and x722 x663)))
(assert (x450 x823))
(assert (x603 x1120))
(assert (= 0 (x174 (- x399 x419))))
(assert (and (=> (< 0 32) (= x584 (+ (* 32 (x666 x584 32)) (x1149 x584 32)))) (x954 x584 32) (x270 x584 32) (x928 x584 32)))
(assert (x450 x357))
(assert (= x283 (and (not x293) x1008)))
(assert (x450 x258))
(assert (x450 x1138))
(assert (= x435 (and (not x791) x212)))
(assert (= (and x829 x736) x112))
(assert (= x26 (=> (= x1057 (> x543 0)) (and (=> (and (not x1057) (and (= x794 x667) (= x201 x904) (= x27 x395) (= 0 x561) (= x926 x466))) x1102) (=> (and x1057 (= x611 x845)) x989)))))
(assert (x450 x764))
(assert (= x563 (or x638 x1134 x1018 x487 x887)))
(assert (= x60 (and x340 x410)))
(assert (= (x919 62805084655870755976952745400290271510621614971557940054860603637793562820608) (x816 62805084655870755976952745400290271510621614971557940054860603637793562820608)))
(assert (x450 x953))
(assert (and (=> (< 0 32) (= x282 (+ (* 32 (x666 x282 32)) (x1149 x282 32)))) (x954 x282 32) (x270 x282 32) (x928 x282 32)))
(assert (x450 x304))
(assert (= (x816 1245659826) (x919 1245659826)))
(assert (x450 x330))
(assert (= x595 (and x629 (not x121))))
(assert (= (and x933 x1035) x318))
(assert (x450 x856))
(assert (and (=> (< 0 32) (= x288 (+ (* 32 (x666 x288 32)) (x1149 x288 32)))) (x954 x288 32) (x270 x288 32) (x928 x288 32)))
(assert (= (or x950 x233) x320))
(assert (= (and (not x724) x784) x413))
(assert (= x1076 (=> (and (= (not (< 128 x463)) x883) (= x702 (x401 x366)) (= (x1002 (+ x609 96)) x52) (= x366 (x1002 (+ 96 x2)))) (and x883 (=> (= x862 128) x180)))))
(assert (x450 x825))
(assert (= (and (not x260) x475) x779))
(assert (x450 x1101))
(assert (= 3705713892 (x1153 (x816 3705713892))))
(assert (x450 x926))
(assert (= (=> (and (= x756 (x1002 (+ x982 x1123))) (= x1025 (x1002 (+ 32 x756))) (= (< 0 x532) x554) (= x839 (x1002 (+ x1090 32))) (= (x448 (- x756 x1090)) x347) (= x689 (x1002 (+ x25 31))) (= x532 (x224 x425)) (= x1123 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x689))) (and (=> (and (not x554) (= x874 0)) x772) (=> (and (and (= x773 x148) (= x240 x1025) (= (< 32 x532) x751) (= (x814 x773) x375)) x554) (and (=> (and (and (= (x1002 (+ x1025 32)) x1105) (= x879 (> x532 64)) (= (x573 x804) x506) (= x804 (x1002 (+ 32 x148)))) x751) (and (=> (and (not x879) (= x874 64)) x772) (=> (and x879 (and (= x960 (> x532 96)) (= (x1002 (+ x148 64)) x541) (= x204 (x1002 (+ 64 x1025))) (= x1127 (x474 x541)))) (and (=> x960 x13) (=> (and (= x874 96) (not x960)) x772))))) (=> (and (not x751) (= 32 x874)) x772))))) x734))
(assert (x450 x274))
(assert (x603 x280))
(assert (x450 x503))
(assert (x450 x382))
(assert (= (x1153 (x816 4076725131)) 4076725131))
(assert (x450 x988))
(assert (x450 x211))
(assert (= x565 (=> (and (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x869) x934) (= x787 (x1002 (+ x934 x800))) (= x19 (x448 (- x787 x726))) (= (> x1082 0) x189) (= (x684 x845) x1082) (= x869 (x1002 (+ x896 31))) (= (x1002 (+ 32 x726)) x6)) (and (=> (and x189 (= (< 32 x1082) x803)) (and (=> (and (= 32 x223) (not x803)) x1145) (=> (and (= (< 64 x1082) x96) x803) (and (=> (and x96 (= (< 96 x1082) x105)) (and (=> (and (= 96 x223) (not x105)) x1145) (=> x105 x1045))) (=> (and (not x96) (= x223 64)) x1145))))) (=> (and (not x189) (= 0 x223)) x1145)))))
(assert (x450 x334))
(assert (x450 x543))
(assert (x450 x496))
(assert (= x315 (x1153 (x919 x315))))
(assert (= x1036 (and x709 x601)))
(assert (x450 x1091))
(assert (= (=> (and (or x782 (not x782)) (= (= x766 0) x782)) x122) x292))
(assert (x450 x116))
(assert (= x427 (and x1 (not x872))))
(assert (x450 x323))
(assert (x450 x602))
(assert (= 1461501637330902918203684832716283019655932542976 (x1153 (x816 1461501637330902918203684832716283019655932542976))))
(assert (= 0 (x174 (- x102 x419))))
(assert (x450 x4))
(assert (= 0 (x1097 160)))
(assert (x450 x871))
(assert (x450 x1136))
(assert (x139 x869))
(assert (x450 x1014))
(assert (= 0 (x527 256)))
(assert (x450 x783))
(assert (x450 x678))
(assert (x980 x258))
(assert (= 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x1153 (x816 22445611572322667099362401052093617030957452505749565894135597532943828910080))))
(assert (= (x919 818759841) (x816 818759841)))
(assert (x450 x186))
(assert (= x596 (and x175 x654)))
(assert (= (x1097 (+ 32 (x1002 (+ 196 x321)))) 0))
(assert (= (x816 54065695799311150304516525983669583430195215316752708547810291668471328538624) (x919 54065695799311150304516525983669583430195215316752708547810291668471328538624)))
(assert (x450 x9))
(assert (= x932 (and x615 x74)))
(assert (= (and x398 (not x197)) x677))
(assert (x450 x974))
(assert (x450 x102))
(assert (x139 x269))
(assert (= x1024 (and (not x586) x263)))
(assert (and (=> (< 0 32) (= x930 (+ (* 32 (x666 x930 32)) (x1149 x930 32)))) (x954 x930 32) (x270 x930 32) (x928 x930 32)))
(assert (x450 x516))
(assert (x1026 x930))
(assert (= (and x1004 x1074) x537))
(assert (x450 x1000))
(assert (= (x919 33582922474372145882413589741236248003507108108518759994751911431010219196416) (x816 33582922474372145882413589741236248003507108108518759994751911431010219196416)))
(assert (= (x1097 (+ (x1002 (+ 196 x321)) (- x367 196))) 0))
(assert (x450 x523))
(assert (x603 x20))
(assert (x450 x939))
(assert (x450 x53))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x584 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x584 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x584 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x584 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x584 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x584 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x137))
(assert (x450 x273))
(assert (x139 x1161))
(assert (x450 x368))
(assert (x450 x1080))
(assert (x450 x865))
(assert (x450 x964))
(assert (= (and x844 x7) x181))
(assert (= (x1097 (+ (x1002 (+ 196 x321)) (- (+ (- 128 x2) x495) 196))) 0))
(assert (x450 x958))
(assert (= (and (not x838) x878) x40))
(assert (= (x1097 (+ (x1002 (+ x321 196)) (- (+ (- 160 x2) x495) 196))) 0))
(assert (x450 x766))
(assert (x450 x486))
(assert (x450 x1147))
(assert (= (=> (and (= x72 x951) (= 2005408114 x93) (not (> 4 x72)) (= x927 x1140) (not (= x93 1553423035)) (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x1141) (= x688 x227) (not (= x93 1901074598)) (= x813 (x133 (x919 x9))) (not (= 1245659826 x93)) (< x93 2220280665) (not (< x93 1245659826)) (= (x448 (- x558 x321)) x951) (not (= 1262878978 x93)) (= x347 x974) (= (= (x89 164) x25) x35) (= x853 (x448 (- x72 4))) (= x1118 x343) (not (= 1845979623 x93)) x35 (< 0 x813) (<= 292 x72) (= (or (and (= (<= x853 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 160 x853)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x853)) x145)) (and (=> (and (not x145) (= x98 (and (< 195 x72) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x72))))) (and (=> (and (not x98) (and (= x904 x201) (= 0 x561) (= x395 x27) (= x926 x466) (= x794 x667))) x1102) (=> (and x98 (and (= x549 (< 18446744073709551615 x1125)) (= x1125 (x852 164)))) (and (=> (and (and (= (x1002 (+ 32 x786)) x437) (= x786 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1028)) (= (x1002 (+ 31 x1125)) x1028) (= x783 (x1002 (+ 31 x437))) (= x508 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x783)) (= (= 0 (ite x639 1 0)) x966) (= (< x274 128) x467) (= x625 (< 18446744073709551615 x274)) (= (or x467 x625) x639) (= x274 (x1002 (+ 128 x508)))) (not x549)) (and (=> (and x966 (and (= (> x136 x72) x1074) (= (x1002 (+ x1125 196)) x136))) (and (=> (and (and (= x654 (< 18446744073709551615 x347)) (= (x1002 (+ x1125 160)) x496)) (not x1074)) (and (=> (and (and (= x397 (x1002 (+ 31 x53))) (= (or (and (> x397 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x72)) (and (< x397 x72) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x397) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x72)))) x759) (= (x1002 (+ x974 4)) x53)) (not x654)) (and (=> (and (and (= x495 (x1002 (+ 32 x53))) (= (x852 x53) x598) (= (> x598 18446744073709551615) x738)) x759) (and (=> (and x738 (and (= x926 x466) (= x27 x395) (= 0 x561) (= x201 x904) (= x794 x667))) x1102) (=> (and (and (= (or x765 x1077) x402) (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x280) x1157) (= (x1002 (+ x116 32)) x345) (= x672 (x1002 (+ x598 31))) (= (= 0 (ite x402 1 0)) x237) (= (x1002 (+ 31 x345)) x280) (= (> x1041 18446744073709551615) x765) (= (> x274 x1041) x1077) (= x1041 (x1002 (+ x1157 x274))) (= x116 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x672))) (not x738)) (and (=> (and (and (= (x1002 (+ x598 x495)) x1119) (= x2 (x1002 (+ 32 x274))) (= x160 (< x72 x1119))) x237) (and (=> (and (and (= x868 (< 18446744073709551615 x1118)) (= x65 (x1002 (+ x598 x2)))) (not x160)) (and (=> (and (not x868) (and (= x117 (x1002 (+ x367 31))) (= (x1002 (+ 4 x343)) x367) (= x260 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x72) (<= x117 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x117 x72)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x72) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x117)))))) (and (=> (and x260 (and (= x647 (< 18446744073709551615 x357)) (= (x852 x367) x357))) (and (=> (and (and (= (x1002 (+ 32 x367)) x944) (= (< x72 x441) x791) (= (x1002 (+ x944 x761)) x441) (= (x514 (* 32 x357)) x761)) (not x647)) (and (=> (and (= x1003 (< 18446744073709551615 x688)) (not x791)) (and (=> (and (and (= x667 x794) (= x27 x395) (= x561 0) (= x926 x466) (= x904 x201)) x1003) x1102) (=> (and (and (= (x1002 (+ 31 x1098)) x597) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x597) (<= x72 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x597 x72)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x72) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x597))) x492) (= x1098 (x1002 (+ x227 4)))) (not x1003)) (and (=> (and x492 (and (= x423 (x852 x1098)) (= (> x423 18446744073709551615) x1103))) (and (=> (and (not x1103) (and (= x1093 (x514 (* x423 32))) (= x382 (x1002 (+ 32 x1098))) (= x277 (x1002 (+ x382 x1093))) (= x581 (< x72 x277)))) (and (=> (and (and (= x561 0) (= x27 x395) (= x926 x466) (= x201 x904) (= x667 x794)) x581) x1102) (=> (and (and (= (= 0 x1159) x74) (< x1159 256) (<= 0 x1159) (<= x1159 255)) (not x581)) (and (=> (and (not x74) (and (= x201 x904) (= x794 x667) (= x561 0) (= x395 x27) (= x926 x466))) x1102) (=> (and (and (= x22 (< 0 x582)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x582) (>= x582 0)) x74) (and (=> (and (not x22) (= x845 x1041)) x989) (=> (and (and (<= 0 x582) (<= x582 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x811 (= 0 x582))) x22) (and (=> (and (and (= x904 x201) (= x466 x926) (= x395 x27) (= x794 x667) (= 0 x561)) (not x811)) x1102) (=> (and x811 (and (> x291 0) (> 3084411429 x712) (< x155 1461501637330902918203684832716283019655932542976) (= 4 x403) (= 2376452955 x712) (not (< x712 2220280665)) (= x294 64069044923792539370177021244577383457373632460708312080110356237917649633280) (<= x155 1461501637330902918203684832716283019655932542975) (not (= x712 2220280665)) (= (x444 1461501637330902918203684832716283019655932542975 x623) x865) (= 4 x202) (not (= x712 2249206060)) (= x202 x403) (not (= x712 2329570063)) (>= x155 0) (not (< x202 4)) (= x407 (= x623 x865)) (= (x1002 (+ x1041 32)) x694) (= x623 (x540 x1041)) (= (x133 (x919 x9)) x291))) (and (=> (and (and (= x466 x926) (= x561 0) (= x395 x27) (= x667 x794) (= x201 x904)) (not x407)) x1102) (=> (and x407 (and (= x709 (and (< (+ x807 x624) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x289 0))) (= x624 0) (= x289 (x1128 (x919 x9))) (= x807 (x1128 (x919 x562))) (= (x444 1461501637330902918203684832716283019655932542975 x623) x562))) (and (=> (and x709 (and (and (= x365 x97) (= (< 0 x497) x619) (= x365 (x991 (x919 x562))) (= x275 x1072) (< (+ x365 x624) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1072 (x1128 (x919 x9)))) (or (not x619) (and x619 (and x977 (= x447 (= (x776 (x919 x562)) x32)) x447 (= (x721 (x919 x9)) x880) (= x977 (<= x880 (x776 (x919 x9)))) (= (x721 (x919 x562)) x32) (< x256 4294967296)))))) x550) (=> (and (not x709) (and (= 0 x543) (= 0 x230))) x436))))))))))))) (=> (and x1103 (and (= x201 x904) (= x395 x27) (= x561 0) (= x794 x667) (= x466 x926))) x1102))) (=> (and (not x492) (and (= x466 x926) (= x395 x27) (= x904 x201) (= 0 x561) (= x794 x667))) x1102))))) (=> (and x791 (and (= x466 x926) (= 0 x561) (= x667 x794) (= x201 x904) (= x395 x27))) x1102))) (=> (and (and (= x466 x926) (= x904 x201) (= 0 x561) (= x667 x794) (= x27 x395)) x647) x1102))) (=> (and (and (= x395 x27) (= x466 x926) (= x667 x794) (= 0 x561) (= x201 x904)) (not x260)) x1102))) (=> (and x868 (and (= x794 x667) (= x27 x395) (= 0 x561) (= x466 x926) (= x201 x904))) x1102))) (=> (and x160 (and (= x201 x904) (= 0 x561) (= x794 x667) (= x27 x395) (= x926 x466))) x1102))) (=> (and (and (= x667 x794) (= x904 x201) (= 0 x561) (= x926 x466) (= x27 x395)) (not x237)) x1102))))) (=> (and (not x759) (and (= x794 x667) (= x395 x27) (= x561 0) (= x926 x466) (= x201 x904))) x1102))) (=> (and (and (= x561 0) (= x904 x201) (= x395 x27) (= x466 x926) (= x794 x667)) x654) x1102))) (=> (and (and (= 0 x561) (= x466 x926) (= x201 x904) (= x395 x27) (= x794 x667)) x1074) x1102))) (=> (and (not x966) (and (= x667 x794) (= x395 x27) (= x201 x904) (= x926 x466) (= 0 x561))) x1102))) (=> (and (and (= x27 x395) (= x667 x794) (= x904 x201) (= 0 x561) (= x926 x466)) x549) x1102))))) (=> (and x145 (and (= x904 x632) (= 0 x823) (= x1021 x395) (= x705 x926) (= x414 x480) (= x667 x1038))) x797))) x547))
(assert (x450 x1040))
(assert (x450 x741))
(assert (x450 x229))
(assert (= (or x1031 x866) x829))
(assert (x450 x575))
(assert (= (=> (and (or (and (not x56) (= x440 x1000)) (and (and (< x1052 4294967296) (= x440 1)) x56)) (and (= (x1002 (+ x922 31)) x282) (not (= x1091 0)) (= x871 (x1002 (+ x281 x832))) (>= 1461501637330902918203684832716283019655932542975 x55) (= (< 0 x1000) x56) (= x55 (x948 x281)) (= x832 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x282)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x922) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x922) true) (> 32 x922)))))) x322) x713))
(assert (= (x1153 (x816 54065695799311150304516525983669583430195215316752708547810291668471328538624)) 54065695799311150304516525983669583430195215316752708547810291668471328538624))
(assert (= (or x669 x408) x329))
(assert (= x820 (or x418 x971)))
(assert (x450 x981))
(assert (x450 x620))
(assert (x450 x688))
(assert (= (x1153 (x816 2329570063)) 2329570063))
(assert (= (x1097 (+ (- x1098 196) (x1002 (+ x321 196)))) 0))
(assert (x450 x452))
(assert (= x976 (and x751 x608)))
(assert (= (and x206 x60) x752))
(assert (x450 x173))
(assert (x450 x934))
(assert (x450 x152))
(assert (x450 x422))
(assert (x450 x1073))
(assert (x450 x968))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x258 (+ (* 1461501637330902918203684832716283019655932542976 (x666 x258 1461501637330902918203684832716283019655932542976)) (x1149 x258 1461501637330902918203684832716283019655932542976)))) (x954 x258 1461501637330902918203684832716283019655932542976) (x270 x258 1461501637330902918203684832716283019655932542976) (x928 x258 1461501637330902918203684832716283019655932542976)))
(assert (= (and (not x619) x1036) x533))
(assert (x1026 x20))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x689 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x689 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x689 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x689 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x689 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x689 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x312 (and x651 x160)))
(assert (x352 x258))
(assert (x450 x613))
(assert (x450 x1033))
(assert (= (and (not x189) x704) x487))
(assert (= x157 (and x1126 x803)))
(assert (x603 x623))
(assert (x450 x365))
(assert (x450 x1021))
(assert (x450 x241))
(assert (= (and x1083 (not x1057)) x645))
(assert (x450 x1072))
(assert (x450 x1127))
(assert (x450 x414))
(assert (x450 x561))
(assert (x352 x315))
(assert (x139 x1028))
(assert (= x762 (=> (and (or (and (and (< x922 4294967296) (= x1091 1)) x493) (and (not x493) (= x577 x1091))) (and (= (> x577 0) x493) (= (x1002 (+ x127 31)) x232) (= x888 (x451 x964)) (<= x888 1461501637330902918203684832716283019655932542975) (= x445 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x232)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x127) (and (> 32 x127) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x127) true)))) (= (x1002 (+ x964 x445)) x281) (not (= x990 0)))) x713)))
(assert (x450 x17))
(assert (= (and x738 x693) x384))
(assert (x450 x697))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x269 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x269 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x269 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x269 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x269 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x269 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x231))
(assert (x450 x672))
(assert (x450 x51))
(assert (= (x1097 (+ (x1002 (+ x321 196)) (- (+ (- x399 160) 196) 196))) 0))
(assert (x139 x246))
(assert (x603 x282))
(assert (=> (>= 10000 x958) (= (x816 x958) (x919 x958))))
(assert (x450 x115))
(assert (= x70 (or x1046 x873)))
(assert (x450 x986))
(assert (x450 x419))
(assert (=> (>= 10000 x258) (= (x919 x258) (x816 x258))))
(assert (= x354 (and (not x340) x410)))
(assert (x450 x319))
(assert (x450 x944))
(assert (= x314 (=> (and (= x44 (> x653 x896)) (or (and x44 (= (x1002 (+ x896 x800)) x184)) (not x44))) x565)))
(assert (x450 x66))
(assert (x450 x218))
(assert (x450 x240))
(assert (= (and x849 x1103) x963))
(assert (= x1122 (and x858 (not x792))))
(assert (= x818 (and (not x56) x747)))
(assert (x450 x900))
(assert (x600 x1147))
(assert (= (and x820 (not x538)) x1062))
(assert (x450 x692))
(assert (= (x919 3572374928) (x816 3572374928)))
(assert (x450 x927))
(assert (x450 x585))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x37 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x37 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x37 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x37 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x37 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x37 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x587 x631) x215))
(assert (x450 x12))
(assert (x450 x832))
(assert (x450 x50))
(assert (and (x41 32 x357) (x1039 32 x357) (and (= (- (* (- x357 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x357 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x357 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x357) (- (* 32 x357) (* x357 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x357 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x383 32 (- x357 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 32 x357) (x383 32 x357)) (x374 32 x357) (x380 32 x357) (x236 32 x357)))
(assert (x603 32))
(assert (x450 x532))
(assert (= 0 (x527 x67)))
(assert (= (x816 3705713892) (x919 3705713892)))
(assert (x450 x853))
(assert (x450 x495))
(assert (= (and (not x493) x415) x559))
(assert (= (=> (and (= (not (< 128 x23)) x1015) (= (x170 x257) x247) (= x257 (x1002 (+ x2 96))) (= (x1002 (+ x742 96)) x151)) (and (=> (= x1033 128) x1106) x1015)) x1044))
(assert (x450 x920))
(assert (= x410 (and x760 x899)))
(assert (x450 x403))
(assert (= x1083 (or x76 x413)))
(assert (= 832554005 (x1153 (x816 832554005))))
(assert (and (=> (< 0 32) (= x246 (+ (* 32 (x666 x246 32)) (x1149 x246 32)))) (x954 x246 32) (x270 x246 32) (x928 x246 32)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x869 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x869 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x869 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x869 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x869 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x869 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x919 4199168155) (x816 4199168155)))
(assert (x450 x294))
(assert (= (or x404 x595) x415))
(assert (= (x816 75068239) (x919 75068239)))
(assert (x450 x262))
(assert (= (and (not x554) x70) x267))
(assert (x450 x432))
(assert (x450 x705))
(assert (x450 x773))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x783 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x783 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x783 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x783 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x783 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x783 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x92 (not x1151)) x669))
(assert (x450 x936))
(assert (x450 x967))
(assert (= (and x1022 (not x549)) x162))
(assert (x450 x1141))
(assert (x450 x562))
(assert (x450 x378))
(assert (= 0 (x527 x366)))
(assert (x450 x52))
(assert (x450 x521))
(assert (x450 x972))
(assert (x1026 x783))
(assert (x603 x269))
(assert (x450 x644))
(assert (x450 x1118))
(assert (= (and x329 (not x284)) x290))
(assert (x450 x1115))
(assert (x139 x930))
(assert (x450 x86))
(assert (= (x1097 (+ (x1002 (+ 196 x321)) (- (+ (- x399 x2) x495) 196))) 0))
(assert (= x604 (or x686 x259 x1122 x251 x1024)))
(assert (= x31 (and x96 x157)))
(assert (= (or x746 x195) x263))
(assert (and (=> (< 0 32) (= x689 (+ (* 32 (x666 x689 32)) (x1149 x689 32)))) (x954 x689 32) (x270 x689 32) (x928 x689 32)))
(assert (= x788 (and x725 x868)))
(assert (x450 x579))
(assert (x450 x1117))
(assert (= (or x923 x1007 x588 x427 x313) x731))
(assert (x450 x210))
(assert (=> (<= x388 10000) (= (x816 x388) (x919 x388))))
(assert (x603 1461501637330902918203684832716283019655932542976))
(assert (= (or x143 x817 x71) x355))
(assert (x450 x64))
(assert (x1026 x232))
(assert (x1026 1461501637330902918203684832716283019655932542975))
(assert (= (and (not x654) x175) x1013))
(assert (= x392 (and x108 (not x33))))
(assert (= (and x975 (not x891)) x755))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x282 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x282 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x282 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x124))
(assert (= x118 (or x476 x993)))
(assert (= x1102 (=> (and (= x414 x480) (= x1038 x794) (= x561 x823) (= x27 x1021) (= x705 x466) (= x201 x632)) x797)))
(assert (x450 x134))
(assert (x450 x359))
(assert (= (and x454 (not x1164)) x225))
(assert (= x1132 (and x185 (not x591))))
(assert (= x326 (and (not x879) x976)))
(assert (and (=> (< 0 32) (= x672 (+ (* 32 (x666 x672 32)) (x1149 x672 32)))) (x954 x672 32) (x270 x672 32) (x928 x672 32)))
(assert (= (x919 1553423035) (x816 1553423035)))
(assert (x450 x1107))
(assert (= x566 (and x631 (not x587))))
(assert (x450 x589))
(assert (= (and (not x237) x385) x821))
(assert (x450 x806))
(assert (= (and x248 x519) x925))
(assert (x450 x99))
(assert (x450 x896))
(assert (x450 x717))
(assert (x450 x833))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x623 (+ (* 1461501637330902918203684832716283019655932542976 (x666 x623 1461501637330902918203684832716283019655932542976)) (x1149 x623 1461501637330902918203684832716283019655932542976)))) (x954 x623 1461501637330902918203684832716283019655932542976) (x270 x623 1461501637330902918203684832716283019655932542976) (x928 x623 1461501637330902918203684832716283019655932542976)))
(assert (= (x174 (- x366 x419)) 0))
(assert (= x629 (or (and (not x177) x355) x396)))
(assert (x450 x468))
(assert (= x11 (and (not x248) x519)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x930 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x930 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x930 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x930 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x930 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x930 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x1120))
(assert (x450 x1069))
(assert (x1026 x282))
(assert (x450 x888))
(assert (x1026 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x450 x148))
(assert (x603 x258))
(assert (= (x1153 (x816 3084411429)) 3084411429))
(assert (= (x919 4294967296) (x816 4294967296)))
(assert (x450 x83))
(assert (= x1134 (and x105 x31)))
(assert (x450 x127))
(assert (x450 x941))
(assert (= (and x851 (not x921)) x1))
(assert (x450 x285))
(assert (= (x174 (- x464 x419)) 0))
(assert (x450 x8))
(assert (x450 x68))
(assert (= true x661))
(assert (x450 x472))
(assert (= 0 (x174 (- x85 x419))))
(assert (= x1058 (and x296 x956)))
(assert (x450 x397))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1120 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x1120 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x1120 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x1120 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x1120 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x1120 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x483))
(assert (x450 x1005))
(assert (x139 x783))
(assert (x139 x169))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1028 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x1028 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (and (=> (< 0 32) (= x1161 (+ (* 32 (x666 x1161 32)) (x1149 x1161 32)))) (x954 x1161 32) (x270 x1161 32) (x928 x1161 32)))
(assert (= (or x882 x855) x1008))
(assert (x450 x461))
(assert (x450 x659))
(assert (x450 x910))
(assert (x139 x672))
(assert (x450 x535))
(assert (x450 x373))
(assert (x139 x799))
(assert (= x746 (and (not x763) x731)))
(assert (x450 x505))
(assert (x450 x109))
(assert (x450 x433))
(assert (x450 x753))
(assert (= 0 (x1097 (+ 96 (x1002 (+ 196 x321))))))
(assert (x450 x931))
(assert (x450 x769))
(assert (x450 x246))
(assert (x450 x371))
(assert (= x606 (and (not x811) x1111)))
(assert (x450 x446))
(assert (= (and x975 x891) x722))
(assert (= (and x434 x876) x108))
(assert (x450 x1085))
(assert (= (x527 192) 0))
(assert (= x843 (=> (= (> x357 0) x538) (and (=> (and (= x891 (> x357 0)) x538) (and (=> (and x891 (and (= x663 (= x258 x186)) (= x753 x944) (= (x444 1461501637330902918203684832716283019655932542975 x258) x186) (= x258 (x852 x753)))) (and (=> (and (= (> x423 0) x899) x663) (and (=> (and (and (= x395 x27) (= 0 x561) (= x794 x667) (= x201 x904) (= x926 x466)) (not x899)) x1102) (=> (and (and (= x285 (x852 x769)) (= (x448 (- x72 x382)) x692) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x285) (<= x42 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x285 x42)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42) (> x285 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x340) (= (x448 (- x692 31)) x42) (= x769 x382)) x899) (and (=> (and (and (= (< 18446744073709551615 x805) x206) (= x805 (x852 x715)) (= (x1002 (+ x285 x382)) x715)) x340) (and (=> (and (and (= (or (and (< x87 x750) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x750) (<= x87 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x87 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x750))) x838) (= (x1002 (+ 32 x715)) x750) (= x87 (x448 (- x72 x805)))) (not x206)) (and (=> (and x838 (and (= x794 x667) (= x395 x27) (= 0 x561) (= x926 x466) (= x904 x201))) x1102) (=> (and (not x838) (and (or (and (and (= (= (x80 (x919 x258)) x648) x156) (= (x250 (x919 x9)) x889) (= (x250 (x919 x258)) x648) x156 x372 (= (<= x889 (x80 (x919 x9))) x372) (> 4294967296 x1095)) x682) (not x682)) (= x682 (> x831 0)))) x1143))) (=> (and x206 (and (= x904 x201) (= 0 x561) (= x926 x466) (= x794 x667) (= x27 x395))) x1102))) (=> (and (and (= x561 0) (= x201 x904) (= x926 x466) (= x395 x27) (= x667 x794)) (not x340)) x1102))))) (=> (and (not x663) (and (= x904 x201) (= x395 x27) (= x466 x926) (= x667 x794) (= x561 0))) x1102))) (=> (and (not x891) (and (= x466 x926) (= x27 x395) (= x561 0) (= x904 x201) (= x667 x794))) x1102))) (=> (not x538) x254)))))
(assert (x450 x1140))
(assert (x450 x994))
(assert (= x529 (=> (= (> x831 0) x284) (and (=> x284 x271) (=> (and (not x284) (and (= x395 x27) (= 0 x561) (= x794 x667) (= x201 x904) (= x926 x466))) x1102)))))
(assert (x450 x1041))
(assert (= (x527 224) 0))
(assert (x450 x611))
(assert (x450 x87))
(assert (x1026 x169))
(assert (x450 x264))
(assert (= (and x162 (not x966)) x992))
(assert (= x1031 (and (not x682) x40)))
(assert (x450 x208))
(assert (x450 x286))
(assert (x450 x597))
(assert (and (=> (< 0 32) (= x1028 (+ (* 32 (x666 x1028 32)) (x1149 x1028 32)))) (x954 x1028 32) (x270 x1028 32) (x928 x1028 32)))
(assert (x450 x1052))
(assert (x450 x940))
(assert (x450 x714))
(assert (= (x174 (- x257 x419)) 0))
(assert (= (and (not x344) x242) x700))
(assert (and (=> (< 0 32) (= x869 (+ (* 32 (x666 x869 32)) (x1149 x869 32)))) (x954 x869 32) (x270 x869 32) (x928 x869 32)))
(assert (= x631 (and x1008 x293)))
(assert (= x143 (and x145 x335)))
(assert (x450 x423))
(assert (x450 x668))
(assert (= x185 (or x822 x103 x1001 x903 x1048)))
(assert (= x396 (and x355 x177)))
(assert (= x261 (or x318 x417)))
(assert (x139 x20))
(assert (x450 x922))
(assert (= (x527 x102) 0))
(assert (x450 x247))
(assert (= (and (not x74) x615) x1137))
(assert (x450 x593))
(assert (x450 x442))
(assert (and (=> (< 0 32) (= x169 (+ (* 32 (x666 x169 32)) (x1149 x169 32)))) (x954 x169 32) (x270 x169 32) (x928 x169 32)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x246 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x280))
(assert (= (x919 1262878978) (x816 1262878978)))
(assert (x450 x431))
(assert (x450 x786))
(assert (= x1018 (and (not x96) x157)))
(assert (= (=> (and (= x763 (< x463 x862)) (or (and (= x412 (x1002 (+ x609 x463))) x763) (not x763))) x1116) x180))
(assert (x450 x465))
(assert (x450 x1050))
(assert (x450 x19))
(assert (x450 x754))
(assert (= (x174 (- x67 x419)) 0))
(assert (x450 x904))
(assert (and (x41 32 x1147) (x1039 32 x1147) (and (= (- (* (- x1147 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x1147 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x1147 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x1147) (- (* 32 x1147) (* x1147 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x1147 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x383 32 (- x1147 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 32 x1147) (x383 32 x1147)) (x374 32 x1147) (x380 32 x1147) (x236 32 x1147)))
(assert (=> (<= x315 10000) (= (x919 x315) (x816 x315))))
(assert (x450 x551))
(assert (x450 x1129))
(assert (= (x1153 (x816 64069044923792539370177021244577383457373632460708312080110356237917649633280)) 64069044923792539370177021244577383457373632460708312080110356237917649633280))
(assert (x450 x343))
(assert (x450 x1119))
(assert (= (x919 3084411429) (x816 3084411429)))
(assert (x450 x947))
(assert (x450 x569))
(assert (x450 x438))
(assert (x450 x49))
(assert (x450 x25))
(assert (x450 x42))
(assert (x450 x517))
(assert (x450 x1130))
(assert (x450 x1095))
(assert (x139 x1120))
(assert (x450 x375))
(assert (x1026 x1161))
(assert (x603 x799))
(assert (= x519 (or x818 x5)))
(assert (x450 x287))
(assert (= x228 (and x141 x518)))
(assert (x450 x880))
(assert (x450 x142))
(assert (x450 x560))
(assert (x450 x787))
(assert (x450 x965))
(assert (= (=> (and (= (< x847 x941) x10) (or (not x10) (and x10 (= (x1002 (+ x4 x847)) x484)))) x500) x636))
(assert (= (and x722 (not x663)) x802))
(assert (x450 x321))
(assert (= x1111 (and x22 x932)))
(assert (x450 x542))
(assert (x450 x485))
(assert (= (and x75 x1012) x658))
(assert (x450 x649))
(assert (x450 x607))
(assert (x450 x381))
(assert (x450 x144))
(assert (x139 x280))
(assert (x450 x204))
(assert (x450 x2))
(assert (x450 x379))
(assert (x450 x165))
(assert (x603 x672))
(assert (x450 x1009))
(assert (x1026 x246))
(assert (and (=> (< 0 32) (= x799 (+ (* 32 (x666 x799 32)) (x1149 x799 32)))) (x954 x799 32) (x270 x799 32) (x928 x799 32)))
(assert (x450 x366))
(assert (x450 x1105))
(assert (x450 x694))
(assert (= (and x704 x189) x1126))
(assert (= (x1153 (x816 102499615646744134772650717477688572466918151731817230690449879178893085114368)) 102499615646744134772650717477688572466918151731817230690449879178893085114368))
(assert (x450 x633))
(assert (= (x919 79228162514264337593543950335) (x816 79228162514264337593543950335)))
(assert (x450 x556))
(assert (x603 x169))
(assert (= (x816 1901074598) (x919 1901074598)))
(assert (x603 x232))
(assert (= x946 (and x791 x212)))
(assert (= x780 (and x1 x872)))
(assert (x450 x970))
(assert (x450 x288))
(assert (= (x919 2005408114) (x816 2005408114)))
(assert (x450 x564))
(assert (= (=> (and (= x144 (x1002 (+ 96 x800))) (= (x48 256) x517) (= (not (> x896 128)) x1154)) (and x1154 (=> (= 128 x653) x314))) x1139))
(assert (x450 x369))
(assert (= (x1097 (+ (- (+ (- x102 x2) x495) 196) (x1002 (+ x321 196)))) 0))
(assert (= (and x651 (not x160)) x725))
(assert (= (and x819 x430) x313))
(assert (= (x174 (- x274 x419)) 0))
(assert (and (= 9 (x383 3 3)) (= 81 (x383 9 9)) (= (x383 9 3) 27) (= (x383 27 3) 81)))
(assert (= x943 (and x3 x785)))
(assert (= (=> (and (or (not x736) x736) (= (= x831 0) x736)) x79) x1143))
(assert (x450 x201))
(assert (=> (>= 10000 x460) (= (x816 x460) (x919 x460))))
(assert (x450 x577))
(assert (and (=> (< 0 32) (= x232 (+ (* 32 (x666 x232 32)) (x1149 x232 32)))) (x954 x232 32) (x270 x232 32) (x928 x232 32)))
(assert (= (and x932 (not x22)) x882))
(assert (= (and x329 x284) x842))
(assert (x450 x767))
(assert (= (and x685 x680) x993))
(assert (= (=> (and (and (not (or (and (< x480 32) (= (<= x480 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x480 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 0 x823)) (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x288) x432) (= (x1002 (+ 31 x480)) x288) (= (x429 x321) x330) (= (x1002 (+ x321 x432)) x964) (= x121 (> x659 0)) (<= x330 1461501637330902918203684832716283019655932542975)) (or (and (= x659 x990) (not x121)) (and x121 (and (> 4294967296 x127) (= x990 1))))) x762) x400))
(assert (x450 x584))
(assert (= (or x278 x18) x299))
(assert (= x421 (and x608 (not x751))))
(assert (x450 x363))
(assert (x450 x757))
(assert (= (and (not x1135) x563) x418))
(assert (= (x816 18446744073709551615) (x919 18446744073709551615)))
(assert (x450 x484))
(assert (= (x174 (- 192 x419)) 0))
(assert (x450 x890))
(assert (= (and x197 x398) x906))
(assert (= x772 (=> (and (or (and (= x1011 (x1002 (+ x532 x1025))) x685) (not x685)) (= (< x532 x874) x685)) x193)))
(assert (= (x1153 (x816 1845979623)) 1845979623))
(assert (x450 x138))
(assert (x450 x656))
(assert (x450 x860))
(assert (= x608 (and x70 x554)))
(assert (= 2005408114 (x1153 (x816 2005408114))))
(assert (x450 x235))
(assert (x450 x982))
(assert (= 0 (x1097 (+ (- (+ (- x67 160) 196) 196) (x1002 (+ x321 196))))))
(assert (= (x919 102499615646744134772650717477688572466918151731817230690449879178893085114368) (x816 102499615646744134772650717477688572466918151731817230690449879178893085114368)))
(assert (= x550 (=> (and (= x914 (= 0 x497)) (or (and (not x914) (and (= x543 x497) (= x256 x230))) (and (and (= x1050 (x167 (x919 x9))) (= x230 x256) (= x323 0) (= x359 x491) (= x1042 x1050) (= x359 (x699 (x919 x562))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x323 x1050)) (= x497 x543)) x914))) x436)))
(assert (x1026 x869))
(assert (x603 x1161))
(assert (= 3572374928 (x1153 (x816 3572374928))))
(assert (x450 x117))
(assert (= x309 (and x118 (not x735))))
(assert (= x903 (and x909 x481)))
(assert (x450 x227))
(assert (x139 x584))
(assert (= x1019 (and (not x492) x580)))
(assert (= (x1097 (+ (x1002 (+ 196 x321)) (- x769 196))) 0))
(assert (= x129 (x1153 (x919 x129))))
(assert (x450 x361))
(assert (and (=> (< 0 32) (= x1120 (+ (* 32 (x666 x1120 32)) (x1149 x1120 32)))) (x954 x1120 32) (x270 x1120 32) (x928 x1120 32)))
(assert (x450 x1098))
(assert (x450 x687))
(assert (x450 x840))
(assert (= (x1153 (x816 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x1153 (x816 113209349505197351213641468582317386984598294884268236158119619414039440916480))))
(assert (x450 x824))
(assert (x450 x742))
(assert (x450 x216))
(assert (x450 x1042))
(assert (= (x527 160) 0))
(assert (x450 x552))
(assert (x450 x388))
(assert (and (=> (< 0 32) (= x37 (+ (* 32 (x666 x37 32)) (x1149 x37 32)))) (x954 x37 32) (x270 x37 32) (x928 x37 32)))
(assert (= (=> (and (or (and (and (= x611 x983) (= x528 (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1120)) (= x1120 (x1002 (+ x230 63))) (= (x1002 (+ x694 32)) x419) (= x983 (x1002 (+ x694 x528)))) (not x724)) (and (= x694 x611) x724)) (= x724 (= 0 x230))) x26) x436))
(assert (= 0 (x1097 (+ (- x53 196) (x1002 (+ x321 196))))))
(assert (x450 x169))
(assert (= (and x759 x1013) x693))
(assert (x450 x458))
(assert (= x681 (and x1020 (not x1023))))
(assert (x450 x310))
(assert (= (or x300 x95 x943 x774 x471) x771))
(assert (x450 x799))
(assert (= x251 (and x228 x640)))
(assert (x450 x54))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1161 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x1161 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x1161 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x1161 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x1161 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x1161 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x1153 (x816 2220280665)) 2220280665))
(assert (= x1022 (and x477 x98)))
(assert (x450 x614))
(assert (= 0 (x1097 x541)))
(assert (= x457 (and (not x407) x358)))
(assert (= x747 (or x46 x559)))
(assert (x603 x584))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x315 (+ (* 1461501637330902918203684832716283019655932542976 (x666 x315 1461501637330902918203684832716283019655932542976)) (x1149 x315 1461501637330902918203684832716283019655932542976)))) (x954 x315 1461501637330902918203684832716283019655932542976) (x270 x315 1461501637330902918203684832716283019655932542976) (x928 x315 1461501637330902918203684832716283019655932542976)))
(assert (x450 x325))
(assert (x450 x850))
(assert (x1026 x37))
(assert (= x855 (and x1057 x1083)))
(assert (= (x1153 (x816 4739670319144124481003130557741556594755290868171975227769803894069435301888)) 4739670319144124481003130557741556594755290868171975227769803894069435301888))
(assert (x450 x1082))
(assert (= (x174 (- x931 x419)) 0))
(assert (x450 x598))
(assert (= (x919 2220280665) (x816 2220280665)))
(assert (= x404 (and x121 x629)))
(assert (= x222 (and x454 x1164)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x288 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x288 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x288 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x288 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x288 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x288 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x590))
(assert (x450 x61))
(assert (x450 x889))
(assert (x450 x1157))
(assert (x450 x281))
(assert (x1026 x280))
(assert (x450 x338))
(assert (x450 x777))
(assert (x450 x733))
(assert (= (and x661 (not x834)) x1020))
(assert (x450 x65))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x20 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x20 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x20 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x289))
(assert (x450 x58))
(assert (x450 x399))
(assert (x450 x1054))
(assert (= (and x341 x915) x873))
(assert (= (x919 64069044923792539370177021244577383457373632460708312080110356237917649633280) (x816 64069044923792539370177021244577383457373632460708312080110356237917649633280)))
(assert (x450 x23))
(assert (x450 x720))
(assert (x450 x176))
(assert (= x599 (and x782 x261)))
(assert (x450 x1110))
(assert (x450 x930))
(assert (x450 x443))
(assert (= x638 (and (not x803) x1126)))
(assert (x450 x952))
(assert (= x471 (and (not x785) x3)))
(assert (= (and x760 (not x899)) x969))
(assert (= (x1097 (+ (x1002 (+ x321 196)) (- x753 196))) 0))
(assert (x450 x624))
(assert (x450 x166))
(assert (x1026 x584))
(assert (x450 x147))
(assert (x980 x562))
(assert (= x518 (and x858 x792)))
(assert (= (x1153 (x919 x958)) x958))
(assert (= 2249206060 (x1153 (x816 2249206060))))
(assert (x450 x937))
(assert (= 0 (x1097 (+ (x1002 (+ x321 196)) (- (+ (- x464 x2) x495) 196)))))
(assert (= 0 (x1097 x773)))
(assert (= x490 (=> (and (= (x1002 (+ x503 32)) x1027) (= x1014 (x1002 (+ x61 32))) (= x61 (x1002 (+ 32 x120))) (= x503 (x1002 (+ 32 x1014))) (= x166 (x133 (x919 x460))) (= x844 (= x166 0))) (and (=> (and (and (= (< 0 x766) x1035) (or (and x1035 (and (= (>= (x295 (x919 x9)) x50) x716) (> 4294967296 x972) (= (= x101 (x295 (x919 x460))) x835) x835 (= x101 (x846 (x919 x460))) x716 (= x50 (x846 (x919 x9))))) (not x1035))) (not x844)) x292) (=> (and x844 (and (= x904 x201) (= x794 x667) (= x27 x395) (= x561 0) (= x466 x926))) x1102)))))
(assert (= (x919 1845979623) (x816 1845979623)))
(assert (x450 x333))
(assert (x450 x750))
(assert (= (or x969 x213 x537 x815 x992 x821 x645 x1137 x215 x596 x135 x384 x1019 x802 x606 x290 x457 x985 x312 x779 x963 x349 x788 x354 x181 x752 x154 x574 x84 x946 x707 x163 x283 x755) x71))
(assert (= 0 (x527 x931)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x280 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x280 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x280 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x280 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x280 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x1097 192) 0))
(assert (= (x1097 x804) 0))
(assert (= (x1097 256) 0))
(assert (x450 x545))
(assert (x450 x32))
(assert (= x580 (and x435 (not x1003))))
(assert (x450 x837))
(assert (x450 x464))
(assert (x450 x827))
(assert (= 0 (x1097 (+ (- (+ x495 (- x67 x2)) 196) (x1002 (+ 196 x321))))))
(assert (x450 x38))
(assert (= x815 (and x1100 x389)))
(assert (= x774 (and x566 (not x81))))
(assert (x450 x120))
(assert (x1026 x623))
(assert (= x316 (and x771 (not x10))))
(assert (x450 x328))
(assert (= (and (not x960) x515) x665))
(assert (x450 x29))
(assert (= x79 (=> (and (or (not x1151) x1151) (= (= x1095 0) x1151)) x529)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x799 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x799 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x799 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x799 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x799 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x799 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x603 x783))
(assert (= 0 (x174 (- 224 x419))))
(assert (= 0 (x1097 (+ (x1002 (+ x321 196)) (- (+ 196 (- x931 160)) 196)))))
(assert (x139 x288))
(assert (= (x1097 (+ (- x715 196) (x1002 (+ 196 x321)))) 0))
(assert (= (and (not x141) x518) x686))
(assert (x980 x129))
(assert (= (or x810 x316) x743))
(assert (x450 x1090))
(assert (x450 x727))
(assert (x980 x460))
(assert (= (and x1112 x914) x884))
(assert (x450 x648))
(assert (x450 x1162))
(assert (x1026 x689))
(assert (= (and x60 (not x206)) x878))
(assert (= (or x973 (and x299 (not x386))) x389))
(assert (x450 x164))
(assert (x1026 x672))
(assert (= (and x493 x415) x46))
(assert (x450 x106))
(assert (x980 x9))
(assert (= (and (not x868) x725) x475))
(assert (x450 x114))
(assert (= x500 (=> (and (= (x444 115792089237316195423570985008687907853269984665640564039457584007913129639904 x269) x757) (= (x221 x274) x23) (= (x448 (- x590 x138)) x452) (= (x1002 (+ 32 x590)) x742) (= x269 (x1002 (+ x847 31))) (= x590 (x1002 (+ x757 x4))) (= x1078 (< 0 x23)) (= (x1002 (+ x138 32)) x120)) (and (=> (and (and (= x697 x742) (= x172 (> x23 32)) (= (x997 x67) x1010) (= x2 x67)) x1078) (and (=> (and (not x172) (= x1033 32)) x1106) (=> (and (and (= (x522 x85) x422) (= (< 64 x23) x482) (= x459 (x1002 (+ x742 32))) (= (x1002 (+ x2 32)) x85)) x172) (and (=> (and (and (= x909 (> x23 96)) (= x126 (x1002 (+ 64 x742))) (= x740 (x364 x464)) (= x464 (x1002 (+ x2 64)))) x482) (and (=> (and (not x909) (= x1033 96)) x1106) (=> x909 x1044))) (=> (and (= 64 x1033) (not x482)) x1106))))) (=> (and (= 0 x1033) (not x1078)) x1106)))))
(assert (x450 x1159))
(assert (= x420 (and x1112 (not x914))))
(assert (x450 x168))
(assert (x450 x104))
(assert (x450 x703))
(assert (x450 x1060))
(assert (x450 x609))
(assert (= x810 (and x10 x771)))
(assert (= 0 (x174 (- 128 x419))))
(assert (x450 x469))
(assert (x450 x756))
(assert (x450 x367))
(assert (= x259 (and (not x640) x228)))
(assert (= x385 (and x693 (not x738))))
(assert (= (and x966 x162) x1004))
(assert (x450 x390))
(assert (x450 x1152))
(assert (x450 x1067))
(assert (x450 x732))
(assert (= x950 (or x1058 x635)))
(assert (x450 x642))
(assert (= (x1153 (x816 62805084655870755976952745400290271510621614971557940054860603637793562820608)) 62805084655870755976952745400290271510621614971557940054860603637793562820608))
(assert (x450 x893))
(assert (x450 x1006))
(assert (x450 x794))
(assert (x450 x715))
(assert (= 0 (x527 x85)))
(assert (x450 x129))
(assert (x450 x690))
(assert (x450 x507))
(assert (= 0 (x1097 (+ (x1002 (+ x321 196)) (- (+ x495 (- 224 x2)) 196)))))
(assert (= (or x925 x11) x956))
(assert (= (=> (= x1100 (= 0 x744)) (and (=> (and (not x1100) (and (= x1038 x667) (= x1021 x395) (= x823 1) (= x480 32) (= x904 x632) (= (x444 1461501637330902918203684832716283019655932542975 x315) x109) (= x926 x705))) x797) (=> (and (and (= x395 x27) (= x904 x201) (= x466 x926) (= x794 x667) (= x561 0)) x1100) x1102))) x100))
(assert (x450 x805))
(assert (x450 x123))
(assert (x450 x1150))
(assert (x450 x689))
(assert (x450 x1025))
(assert (x450 x990))
(assert (x450 x632))
(assert (x450 x395))
(assert (= (and x1146 x279) x203))
(assert (= (x1097 (+ (- (+ x495 (- 256 x2)) 196) (x1002 (+ x321 196)))) 0))
(assert (= (and x146 x479) x18))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x232 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x666 x232 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1149 x232 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x954 x232 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x270 x232 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x928 x232 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x450 x377))
(assert (and (x41 32 x642) (x1039 32 x642) (and (= (- (* (- x642 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x642 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x642 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x642) (- (* 32 x642) (* x642 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x642 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x383 32 (- x642 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 32 x642) (x383 32 x642)) (x374 32 x642) (x380 32 x642) (x236 32 x642)))
(assert (x450 x1075))
(assert (= 0 (x1097 (+ (x1002 (+ 196 x321)) (- (+ 196 (- x85 160)) 196)))))
(assert (x450 x440))
(assert (= (x919 113209349505197351213641468582317386984598294884268236158119619414039440916480) (x816 113209349505197351213641468582317386984598294884268236158119619414039440916480)))
(assert (x1026 x288))
(assert (= x183 (and x604 (not x44))))
(assert (= (and x1078 x743) x996))
(assert (= (=> (and (= (not (< 128 x532)) x297) (= (x1002 (+ x1025 96)) x521) (= x690 (x1002 (+ 96 x148))) (= (x350 x690) x1144)) (and x297 (=> (= 128 x874) x772))) x13))
(assert (x450 x257))
(assert (= x358 (and x811 x1111)))
(assert (x450 x1144))
(assert (x450 x277))
(assert (= 0 (x1097 (+ (- (+ (- x931 x2) x495) 196) (x1002 (+ x321 196))))))
(assert (= x849 (and x492 x580)))
(assert (=> (>= 10000 x562) (= (x919 x562) (x816 x562))))
(assert (= (=> (and (= (= 0 x744) x386) (or (not x386) x386)) x100) x662))
(assert (x450 x463))
(assert (x450 x612))
(assert (= 0 (x1097 (+ (- (+ 196 (- x102 160)) 196) (x1002 (+ 196 x321))))))
(assert (x450 x983))
(assert (= x242 (and x1023 x1020)))
(assert (x450 x617))
(assert (= x704 (or x183 x272)))
(assert (= x417 (and x933 (not x1035))))
(assert (= (and x33 x108) x1012))
(assert (x450 x159))
(assert (= (=> (and (or (and (= (x1002 (+ x982 x25)) x505) x915) (not x915)) (= (> x1075 x25) x915)) x734) x406))
(assert (x603 x689))
(assert (x603 x930))
(assert (= x488 (and (not x1103) x849)))
(assert (x450 x557))
(assert (x450 x1066))
(assert (x450 x219))
(assert (x600 x423))
(assert (x450 x1125))
(assert (= x454 (and x630 x621)))
(assert (x450 x480))
(assert (= 75068239 (x1153 (x816 75068239))))
(assert (x450 x315))
(assert (= x819 (and x132 x161)))
(assert (x450 x445))
(assert (= x272 (and x604 x44)))
(assert (x450 x804))
(assert (x450 x1010))
(assert (x450 x55))
(assert (x450 x726))
(assert (x450 x424))
(assert (x450 x813))
(assert (x450 x27))
(assert (x450 x324))
(assert (x450 x1161))
(assert (x450 x30))
(assert (x450 x539))
(assert (x450 x660))
(assert (x600 32))
(assert (= x175 (and x1004 (not x1074))))
(assert (= (x1153 (x816 818759841)) 818759841))
(assert (x450 x1047))
(assert (= 1901074598 (x1153 (x816 1901074598))))
(assert (x450 x506))
(assert (= x3 (and x203 x1142)))
(assert (= (and x619 x1036) x605))
(assert (x450 x845))
(assert (= x574 (and x477 (not x98))))
(assert (x450 x190))
(assert (x450 x69))
(assert (= (=> (and (= x177 (= x823 0)) (or x177 (not x177))) x400) x797))
(assert (not x14))
(assert (x450 x256))
(assert (x450 x1081))
(assert (x450 x1084))
(assert (and (x41 32 x423) (x1039 32 x423) (and (= (- (* (- x423 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x423 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x423 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x383 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x423) (- (* 32 x423) (* x423 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x423 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (x383 32 (- x423 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 32 x423) (x383 32 x423)) (x374 32 x423) (x380 32 x423) (x236 32 x423)))
(assert (=> (<= x129 10000) (= (x919 x129) (x816 x129))))
(assert (x450 x1158))
(assert (= x1046 (and x341 (not x915))))
(assert (= x887 (and (not x105) x31)))
(assert (x450 x453))
(assert (x450 x875))
(assert (x450 x20))
(assert (x450 x728))
(assert (x450 x924))
(assert (x450 x59))
(assert (= 4199168155 (x1153 (x816 4199168155))))
(assert (= (=> (= (= x766 0) x921) (and (=> (and (not x921) (and (= (x710 x274) x463) (= x714 (x1002 (+ 32 x845))) (= (x1002 (+ x714 3)) x609) (= (x1002 (+ x845 32)) x286) (= (> x463 0) x872))) (and (=> (and (not x872) (= 0 x862)) x180) (=> (and x872 (and (= (< 32 x463) x311) (= x332 x609) (= x2 x102) (= (x710 x102) x1064))) (and (=> (and (and (= (x1002 (+ x2 32)) x931) (= (x711 x931) x717) (= (> x463 64) x132) (= x107 (x1002 (+ x609 32)))) x311) (and (=> (and (and (= x430 (< 96 x463)) (= (x1002 (+ x2 64)) x399) (= x939 (x1002 (+ x609 64))) (= x124 (x916 x399))) x132) (and (=> (and (not x430) (= x862 96)) x180) (=> x430 x1076))) (=> (and (= x862 64) (not x132)) x180))) (=> (and (= x862 32) (not x311)) x180))))) (=> (and x921 (and (= x27 x395) (= x561 0) (= x201 x904) (= x926 x466) (= x794 x667))) x1102))) x122))
(assert (x450 x1056))
(assert (= (=> (and (and (and (> 2220280665 x134) (<= 0 x348) (not (> 1245659826 x134)) (< x348 1461501637330902918203684832716283019655932542976) (>= 1461501637330902918203684832716283019655932542975 x348) (= x433 (x133 (x919 x9))) (= x245 x732) (= x235 x348) (= 1245659826 x134) (> x433 0) (= x585 0) (= x929 (= 0 x732))) (and (and (= x498 (= x967 0)) (= 4199168155 x1006) (<= x981 1461501637330902918203684832716283019655932542975) (= x967 x235) (= x675 0) (= x234 x981) (not (= 3705713892 x1006)) (not (> 2220280665 x1006)) (= x1088 (and x929 x498)) (not (= 3084411429 x1006)) (= x1107 (x133 (x919 x9))) (not (= x1006 3572374928)) (> 1461501637330902918203684832716283019655932542976 x981) (not (> 3084411429 x1006)) (< 0 x1107) (not (= 4076725131 x1006)) (<= 0 x981)) (and (and (< x485 3084411429) (= (x133 (x919 x9)) x583) (= x485 2329570063) (>= x1043 0) (not (= 2220280665 x485)) (= (and x73 x1088) x301) (> 1461501637330902918203684832716283019655932542976 x1043) (= x727 x1043) (>= 1461501637330902918203684832716283019655932542975 x1043) (not (= 2249206060 x485)) (= x234 x947) (= x73 (= x947 0)) (> x583 0) (= 0 x544) (not (< x485 2220280665))) (and (and (and (<= x348 1461501637330902918203684832716283019655932542975) (= x147 1245659826) (= 0 x368) (< x147 2220280665) (= x348 x886) (> x1108 0) (= (not (= 0 x165)) x894) (not (< x147 1245659826)) (= x165 x986) (= (x133 (x919 x9)) x1108) (>= x348 0) (< x348 1461501637330902918203684832716283019655932542976)) (and (and (= x981 x478) (< x981 1461501637330902918203684832716283019655932542976) (<= x981 1461501637330902918203684832716283019655932542975) (= x106 (x133 (x919 x9))) (not (= 3084411429 x542)) (<= 0 x981) (= x886 x152) (= (and x894 x1163) x149) (> x106 0) (not (< x542 2220280665)) (= x542 4199168155) (= x825 0) (not (< x542 3084411429)) (not (= 3572374928 x542)) (not (= 3705713892 x542)) (not (= x542 4076725131)) (= x1163 (not (= x152 0)))) (and (and (= x1043 x456) (>= 1461501637330902918203684832716283019655932542975 x1043) (>= x1043 0) (= x216 2329570063) (< x1043 1461501637330902918203684832716283019655932542976) (not (= 2249206060 x216)) (= x478 x1096) (< 0 x328) (= 0 x159) (= (x133 (x919 x9)) x328) (= x670 (not (= 0 x1096))) (= (and x149 x670) x758) (not (> 2220280665 x216)) (< x216 3084411429) (not (= 2220280665 x216))) (and (= x703 x456) (= x1060 0) (= x962 (or x16 x307)) (= x546 (not (= x703 0))) (= (and x546 x758) x16))))) (and (> x557 0) (not (= 75068239 x602)) (not (= 818759841 x602)) (= (and x798 x301) x307) (< x602 2220280665) (>= x1067 0) (= 832554005 x602) (>= 1461501637330902918203684832716283019655932542975 x1067) (= x1086 x727) (< x602 1245659826) (= x1067 x986) (< x1067 1461501637330902918203684832716283019655932542976) (= x678 0) (= x557 (x133 (x919 x9))) (= x798 (= 0 x1086))))))) (and (= x1129 832554005) (> 1245659826 x1129) (not (= 75068239 x1129)) (= x920 (x133 (x919 x9))) (< 0 x920) (= x1067 x245) (not (= 818759841 x1129)) (>= x1067 0) (> 1461501637330902918203684832716283019655932542976 x1067) (not x179) (>= 1461501637330902918203684832716283019655932542975 x1067) (> 2220280665 x1129) (not x768))) x962) x676))
(assert (= x266 (and x996 x172)))
(assert (x450 x199))
(assert (x450 x1121))
(assert (= (x1097 x690) 0))
(assert (x450 x839))
(assert (x450 x945))
(assert (x450 x1108))
(assert (x450 x691))
(assert (x603 x315))
(assert (x450 x21))
(assert (x450 x426))
(assert (x450 x1064))
(assert (x450 x646))
(assert (x450 x675))
(assert (= (x1097 (+ (x1002 (+ 196 x321)) (- (+ (- x366 x2) x495) 196))) 0))
(assert (x450 x748))
(assert (= x866 (and x40 x682)))
(assert (x450 x1109))
(assert (x450 x91))
(assert (x450 x136))
(assert (x450 x1043))
(assert (x450 x761))
(assert (= 79228162514264337593543950335 (x1153 (x816 79228162514264337593543950335))))
(assert (x450 x238))
(assert (= (and x661 x834) x233))
(assert (x450 x223))
(assert (= (or x681 x864 x225 x700 x222) x341))
(assert (x450 x47))
(assert (x450 x441))
(assert (x450 x1011))
(assert (= (and x731 x763) x195))
(assert (x450 x437))
(assert (x139 x689))
(assert (x600 x357))
(assert (x450 x252))
(assert (x450 x886))
(assert (x450 x282))
(assert (x450 x269))
(assert (= x635 (and x956 (not x296))))
(assert (x450 x1038))
(assert (x450 x1113))
(assert (=> (>= 10000 x9) (= (x816 x9) (x919 x9))))
(assert (x450 x508))
(assert (x450 x412))
(assert (= 0 (x527 x257)))
(assert (= (and x960 x515) x244))
(assert (= (and x549 x1022) x985))
(assert (x450 x332))
(assert (= (x1097 (+ (- (+ x495 (- x274 x2)) 196) (x1002 (+ 196 x321)))) 0))
(assert (x603 x869))
(assert (= x707 (and x959 x912)))
(assert (x450 x1123))
(assert (= x615 (and (not x581) x488)))
(assert (x603 x37))
(assert (x450 x497))
(assert (= x1145 (=> (and (or x1135 (not x1135)) (= (< x1082 x223) x1135)) x843)))
(assert (= 1553423035 (x1153 (x816 1553423035))))
(assert (x450 x1093))
(assert (= (and (not x909) x481) x822))
(assert (x450 x362))
(assert (= (and x299 x386) x973))
(assert (x450 x6))
(assert (= 0 (x1097 (+ (x1002 (+ x321 196)) (- (+ (- x464 160) 196) 196)))))
(assert (x450 x85))
(assert (x450 x459))
(assert (x450 x456))
(assert (= (x1153 (x919 x460)) x460))
(assert (x450 x807))
(assert (= (x919 2376452955) (x816 2376452955)))
(assert (x450 x101))
(assert (= (x1153 (x919 x258)) x258))
(assert (x450 x348))
(assert (= x76 (and x784 x724)))
(assert (= (and x118 x735) x876))
(assert (x450 x191))
(assert (x450 x870))
(assert (x450 x36))
(assert (x450 x230))
(assert (x450 x67))
(assert (x450 x739))
(assert (= (x919 832554005) (x816 832554005)))
(assert (= (x1097 (+ (- (+ (- x257 160) 196) 196) (x1002 (+ 196 x321)))) 0))
(assert (x450 x718))
(assert (x603 x1028))
(assert (x450 x255))
(assert (x450 x653))
(assert (x1026 x1028))
(assert (x450 x107))
(assert (x980 x958))
(assert (x450 x583))
(assert (x450 x1030))
(assert (= (and x203 (not x1142)) x300))
(assert (= (x1097 (+ (- (+ (- x85 x2) x495) 196) (x1002 (+ x321 196)))) 0))
(assert (x450 x478))
(assert (= (and (not x709) x601) x898))
(assert (= x817 (and (not x1100) x389)))
(assert (= (=> (= x207 (not (< 128 x1082))) (and (=> (= 128 x223) x1145) x207)) x1045))
(assert (x450 x1027))
(assert (= (and x820 x538) x975))
(assert (= (and x146 (not x479)) x278))
(assert (= (and (not x311) x780) x588))
(assert (x352 x623))
(assert (x450 x1028))
(assert (x450 x347))
(assert (and (=> (< 0 32) (= x280 (+ (* 32 (x666 x280 32)) (x1149 x280 32)))) (x954 x280 32) (x270 x280 32) (x928 x280 32)))
(assert (= (x1153 (x816 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (and x279 (not x1146)) x95))
(check-sat)
(exit)
