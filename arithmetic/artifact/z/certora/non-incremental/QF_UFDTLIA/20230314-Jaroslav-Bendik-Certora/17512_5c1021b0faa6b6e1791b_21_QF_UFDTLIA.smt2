(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x747 0)) (((x718 (x415 x747) (x715 x747) (x156 Int)) (x330 (x677 Int)) (x347 (x319 x747) (x127 Int)))))
(declare-fun x343 () x747)
(declare-fun x674 () Int)
(declare-fun x510 () Int)
(declare-fun x383 () Int)
(declare-fun x146 () Int)
(declare-fun x644 () Bool)
(declare-fun x586 () Bool)
(declare-fun x622 () Int)
(declare-fun x805 () Int)
(declare-fun x669 () Bool)
(declare-fun x723 () x747)
(declare-fun x645 () Int)
(declare-fun x581 () Int)
(declare-fun x131 () Int)
(declare-fun x696 () Int)
(declare-fun x435 () Bool)
(declare-fun x219 () Bool)
(declare-fun x624 () Int)
(declare-fun x6 () Int)
(declare-fun x288 (Int) Int)
(declare-fun x148 () Int)
(declare-fun x97 () Int)
(declare-fun x461 (Int) Int)
(declare-fun x313 () Bool)
(declare-fun x458 () Int)
(declare-fun x247 () Int)
(declare-fun x300 () Bool)
(declare-fun x362 () Int)
(declare-fun x199 () Int)
(declare-fun x250 () Int)
(declare-fun x563 () Int)
(declare-fun x217 () Int)
(declare-fun x572 () Bool)
(declare-fun x102 () Int)
(declare-fun x662 () Bool)
(declare-fun x320 () Int)
(declare-fun x543 () Int)
(declare-fun x321 () Int)
(declare-fun x214 () Int)
(declare-fun x555 () Int)
(declare-fun x118 () Bool)
(declare-fun x382 () Bool)
(declare-fun x540 () Int)
(declare-fun x264 () Int)
(declare-fun x504 () Int)
(declare-fun x735 () Int)
(declare-fun x406 () Int)
(declare-fun x164 () Int)
(declare-fun x98 () Int)
(declare-fun x542 () Int)
(declare-fun x302 () Int)
(declare-fun x315 () Bool)
(declare-fun x75 () Int)
(declare-fun x298 () Int)
(declare-fun x585 () Int)
(declare-fun x345 () x747)
(declare-fun x322 () Int)
(declare-fun x198 () Bool)
(declare-fun x369 () Bool)
(declare-fun x554 () Bool)
(declare-fun x47 () Bool)
(declare-fun x257 () Int)
(declare-fun x185 () Int)
(declare-fun x767 () Bool)
(declare-fun x17 () Int)
(declare-fun x498 () Int)
(declare-fun x534 () Bool)
(declare-fun x611 () Bool)
(declare-fun x79 () Int)
(declare-fun x721 () Bool)
(declare-fun x304 () Int)
(declare-fun x391 () x747)
(declare-fun x230 () Int)
(declare-fun x292 (Int) Int)
(declare-fun x724 () Int)
(declare-fun x598 () x747)
(declare-fun x121 () Int)
(declare-fun x452 () Bool)
(declare-fun x205 () Int)
(declare-fun x384 () Int)
(declare-fun x66 () Int)
(declare-fun x490 () Int)
(declare-fun x140 () Bool)
(declare-fun x525 () Int)
(declare-fun x512 () Int)
(declare-fun x269 () Int)
(declare-fun x303 () Int)
(declare-fun x801 () Bool)
(declare-fun x297 () Int)
(declare-fun x283 () Int)
(declare-fun x438 () Bool)
(declare-fun x307 () Int)
(declare-fun x242 () Bool)
(declare-fun x749 () Int)
(declare-fun x253 () Int)
(declare-fun x163 () Int)
(declare-fun x91 () Bool)
(declare-fun x101 () Int)
(declare-fun x769 () Int)
(declare-fun x694 () Bool)
(declare-fun x474 () Bool)
(declare-fun x252 () Bool)
(declare-fun x114 () Bool)
(declare-fun x668 () Bool)
(declare-fun x376 () Int)
(declare-fun x643 () Int)
(declare-fun x179 () Bool)
(declare-fun x123 () Int)
(declare-fun x808 () Int)
(declare-fun x532 () x747)
(declare-fun x78 () Int)
(declare-fun x807 () Int)
(declare-fun x271 () Bool)
(declare-fun x373 () Int)
(declare-fun x174 () Int)
(declare-fun x750 () Bool)
(declare-fun x85 () Int)
(declare-fun x468 () Int)
(declare-fun x457 () Int)
(declare-fun x697 () Int)
(declare-fun x231 () Int)
(declare-fun x675 () Int)
(declare-fun x637 () Int)
(declare-fun x109 () Bool)
(declare-fun x538 () Int)
(declare-fun x804 () Bool)
(declare-fun x684 () Int)
(declare-fun x493 () Int)
(declare-fun x466 () Int)
(declare-fun x695 () Bool)
(declare-fun x251 () Int)
(declare-fun x11 () Int)
(declare-fun x703 () Int)
(declare-fun x138 () x747)
(declare-fun x49 () Int)
(declare-fun x20 () Int)
(declare-fun x338 () Int)
(declare-fun x409 () Int)
(declare-fun x758 () Int)
(declare-fun x522 () Int)
(declare-fun x368 () Bool)
(declare-fun x587 () Int)
(declare-fun x325 () Int)
(declare-fun x650 () x747)
(declare-fun x221 () Bool)
(declare-fun x450 () Int)
(declare-fun x809 () Int)
(declare-fun x25 (Int) Int)
(declare-fun x260 () Int)
(declare-fun x783 () Int)
(declare-fun x88 () Int)
(declare-fun x34 () Bool)
(declare-fun x7 () Int)
(declare-fun x459 () Bool)
(declare-fun x683 () Int)
(declare-fun x653 () Bool)
(declare-fun x701 () Bool)
(declare-fun x328 () Int)
(declare-fun x714 () Int)
(declare-fun x482 () x747)
(declare-fun x124 () Int)
(declare-fun x570 () Int)
(declare-fun x352 () x747)
(declare-fun x789 () Int)
(declare-fun x535 () Int)
(declare-fun x15 () Int)
(declare-fun x92 () Bool)
(declare-fun x417 () x747)
(declare-fun x631 () Bool)
(declare-fun x70 () x747)
(declare-fun x564 () Bool)
(declare-fun x488 () Int)
(declare-fun x142 () Bool)
(declare-fun x685 () Int)
(declare-fun x355 () Int)
(declare-fun x730 () Int)
(declare-fun x759 () Int)
(declare-fun x401 () Bool)
(declare-fun x656 () Bool)
(declare-fun x324 () Int)
(declare-fun x431 () Bool)
(declare-fun x503 () Int)
(declare-fun x196 () Bool)
(declare-fun x520 () Int)
(declare-fun x524 () Bool)
(declare-fun x436 () Bool)
(declare-fun x427 () Int)
(declare-fun x61 () x747)
(declare-fun x614 () Int)
(declare-fun x519 () Bool)
(declare-fun x559 () Int)
(declare-fun x402 () Int)
(declare-fun x284 () Bool)
(declare-fun x244 () Int)
(declare-fun x228 () Int)
(declare-fun x446 () Int)
(declare-fun x448 () Int)
(declare-fun x388 () Bool)
(declare-fun x708 () x747)
(declare-fun x182 () Bool)
(declare-fun x239 () Int)
(declare-fun x617 () Bool)
(declare-fun x686 () Int)
(declare-fun x110 () Int)
(declare-fun x469 (x747) Int)
(declare-fun x676 () Bool)
(declare-fun x620 () Int)
(declare-fun x580 () Int)
(declare-fun x240 () Int)
(declare-fun x706 (Int) Int)
(declare-fun x621 () Int)
(declare-fun x277 () Int)
(declare-fun x130 () Bool)
(declare-fun x84 () Bool)
(declare-fun x375 () Int)
(declare-fun x546 (x747) Int)
(declare-fun x170 () Int)
(declare-fun x566 () Bool)
(declare-fun x495 () Int)
(declare-fun x312 () Int)
(declare-fun x89 () Int)
(declare-fun x610 () Bool)
(declare-fun x108 () Bool)
(declare-fun x120 () Bool)
(declare-fun x606 () Int)
(declare-fun x413 () Int)
(declare-fun x638 () Bool)
(declare-fun x339 () Bool)
(declare-fun x463 () Int)
(declare-fun x274 () Bool)
(declare-fun x223 () Int)
(declare-fun x604 () Int)
(declare-fun x210 () x747)
(declare-fun x501 () Int)
(declare-fun x162 () Bool)
(declare-fun x778 () Bool)
(declare-fun x93 () Int)
(declare-fun x591 () Int)
(declare-fun x590 () Bool)
(declare-fun x574 () Int)
(declare-fun x151 () Bool)
(declare-fun x168 () Bool)
(declare-fun x470 () Int)
(declare-fun x802 () Int)
(declare-fun x213 () Int)
(declare-fun x632 () Int)
(declare-fun x742 () Int)
(declare-fun x424 () Bool)
(declare-fun x187 () Int)
(declare-fun x1 () Int)
(declare-fun x389 () Bool)
(declare-fun x782 () Int)
(declare-fun x291 () Int)
(declare-fun x337 () Int)
(declare-fun x582 () Int)
(declare-fun x282 () Int)
(declare-fun x443 () Bool)
(declare-fun x690 () Int)
(declare-fun x757 () Bool)
(declare-fun x103 () Int)
(declare-fun x516 () Bool)
(declare-fun x31 () Int)
(declare-fun x134 () Bool)
(declare-fun x441 () Bool)
(declare-fun x523 () Bool)
(declare-fun x259 () Int)
(declare-fun x710 () Int)
(declare-fun x293 () Bool)
(declare-fun x133 () Bool)
(declare-fun x149 () Bool)
(declare-fun x237 () Int)
(declare-fun x425 () Int)
(declare-fun x526 () Int)
(declare-fun x775 () Int)
(declare-fun x28 () Bool)
(declare-fun x270 () Int)
(declare-fun x323 () Int)
(declare-fun x346 () Int)
(declare-fun x18 () Int)
(declare-fun x42 () Bool)
(declare-fun x74 () Bool)
(declare-fun x318 () Int)
(declare-fun x189 () Int)
(declare-fun x678 () Bool)
(declare-fun x394 () Int)
(declare-fun x9 () Int)
(declare-fun x569 () Int)
(declare-fun x560 () Int)
(declare-fun x705 () Int)
(declare-fun x309 (Int) x747)
(declare-fun x206 () Bool)
(declare-fun x386 () x747)
(declare-fun x8 () Bool)
(declare-fun x245 () Int)
(declare-fun x561 () x747)
(declare-fun x299 () Bool)
(declare-fun x770 (Int) Int)
(declare-fun x426 () Int)
(declare-fun x4 () Bool)
(declare-fun x207 () Bool)
(declare-fun x615 () Bool)
(declare-fun x636 () Bool)
(declare-fun x26 () Int)
(declare-fun x687 () Int)
(declare-fun x119 () Bool)
(declare-fun x628 () Bool)
(declare-fun x658 () Bool)
(declare-fun x593 () Int)
(declare-fun x793 (Int Int) Int)
(declare-fun x334 () Int)
(declare-fun x87 () Int)
(declare-fun x760 () Int)
(declare-fun x737 () Bool)
(declare-fun x238 () Int)
(declare-fun x152 () Int)
(declare-fun x241 () Bool)
(declare-fun x681 () Int)
(declare-fun x100 () Bool)
(declare-fun x635 () Int)
(declare-fun x333 () Int)
(declare-fun x128 () Bool)
(declare-fun x83 () Int)
(declare-fun x94 () Int)
(declare-fun x14 () Int)
(declare-fun x378 () Bool)
(declare-fun x311 () Bool)
(declare-fun x548 (x747) Int)
(declare-fun x95 () Bool)
(declare-fun x150 () Int)
(declare-fun x781 () Bool)
(declare-fun x381 () Int)
(declare-fun x484 () x747)
(declare-fun x335 () Bool)
(declare-fun x601 () Bool)
(declare-fun x616 () Bool)
(declare-fun x740 () Bool)
(declare-fun x679 () Int)
(declare-fun x456 () Bool)
(declare-fun x743 () Int)
(declare-fun x71 () x747)
(declare-fun x478 () Int)
(declare-fun x278 (Int) Int)
(declare-fun x68 () Int)
(declare-fun x305 () Int)
(declare-fun x589 () Int)
(declare-fun x3 () Bool)
(declare-fun x194 () Bool)
(declare-fun x745 () Int)
(declare-fun x186 () Int)
(declare-fun x792 () Bool)
(declare-fun x531 () Int)
(declare-fun x791 () Int)
(declare-fun x499 (Int Int) Int)
(declare-fun x654 () Bool)
(declare-fun x171 () Bool)
(declare-fun x363 () Bool)
(declare-fun x673 () Int)
(declare-fun x29 () Bool)
(declare-fun x289 () Int)
(declare-fun x421 () Int)
(declare-fun x332 () Int)
(declare-fun x629 () Int)
(declare-fun x27 () Int)
(declare-fun x364 () Int)
(declare-fun x32 () x747)
(declare-fun x477 () Int)
(declare-fun x36 () Int)
(declare-fun x483 () Int)
(declare-fun x48 () x747)
(declare-fun x699 () Int)
(declare-fun x416 () Int)
(declare-fun x736 () Int)
(declare-fun x275 () Int)
(declare-fun x777 () Int)
(declare-fun x129 () x747)
(declare-fun x754 () Int)
(declare-fun x180 () Int)
(declare-fun x310 () Bool)
(declare-fun x414 () Int)
(declare-fun x354 () Int)
(declare-fun x295 () Int)
(declare-fun x508 () Bool)
(declare-fun x357 () Bool)
(declare-fun x261 () Int)
(declare-fun x2 () Int)
(declare-fun x197 () Int)
(declare-fun x59 () Bool)
(declare-fun x579 () Bool)
(declare-fun x209 () Int)
(declare-fun x794 () Int)
(declare-fun x410 () Int)
(declare-fun x53 () Int)
(declare-fun x565 () Bool)
(declare-fun x429 () Int)
(declare-fun x55 () Int)
(declare-fun x43 () Bool)
(declare-fun x455 () x747)
(declare-fun x627 () Int)
(declare-fun x449 () Bool)
(declare-fun x56 () Int)
(declare-fun x65 () Int)
(declare-fun x481 () Int)
(declare-fun x82 () Int)
(declare-fun x447 () Int)
(declare-fun x400 () Int)
(declare-fun x201 () Int)
(declare-fun x234 (Int Int) Int)
(declare-fun x485 () Int)
(declare-fun x248 () Int)
(declare-fun x227 () x747)
(declare-fun x393 () Int)
(declare-fun x195 () Int)
(declare-fun x454 () x747)
(declare-fun x385 () Int)
(declare-fun x267 () Int)
(declare-fun x399 () Int)
(declare-fun x752 () Int)
(declare-fun x361 () Bool)
(declare-fun x202 () Bool)
(declare-fun x605 () Bool)
(declare-fun x290 () x747)
(declare-fun x688 () Int)
(declare-fun x722 () Int)
(declare-fun x500 () Bool)
(declare-fun x774 () Int)
(declare-fun x434 () Int)
(declare-fun x670 () Int)
(declare-fun x630 () Bool)
(declare-fun x460 () Int)
(declare-fun x235 () Bool)
(declare-fun x806 () Int)
(declare-fun x725 () Int)
(declare-fun x341 () Bool)
(declare-fun x667 () Int)
(declare-fun x266 () Int)
(declare-fun x249 () Bool)
(declare-fun x281 () Int)
(declare-fun x552 () Int)
(declare-fun x812 () Bool)
(declare-fun x358 () Bool)
(declare-fun x790 () Bool)
(declare-fun x327 () Bool)
(declare-fun x67 () Int)
(declare-fun x513 () Int)
(declare-fun x387 (x747) Int)
(declare-fun x709 () Int)
(declare-fun x765 () Bool)
(declare-fun x671 () Bool)
(declare-fun x254 () Bool)
(declare-fun x702 (x747) Int)
(declare-fun x411 () Bool)
(declare-fun x208 () Int)
(declare-fun x141 () Bool)
(declare-fun x403 () Int)
(declare-fun x588 () Int)
(declare-fun x176 () Int)
(declare-fun x331 () Int)
(declare-fun x144 () Int)
(declare-fun x428 () Int)
(declare-fun x761 () Bool)
(declare-fun x301 () Int)
(declare-fun x518 () Bool)
(declare-fun x408 () Bool)
(declare-fun x374 () Int)
(declare-fun x268 () Int)
(declare-fun x444 () Int)
(declare-fun x719 () Int)
(declare-fun x273 () Int)
(declare-fun x726 () Bool)
(declare-fun x583 () Int)
(declare-fun x392 () Bool)
(declare-fun x349 () Bool)
(declare-fun x172 () Int)
(declare-fun x731 () Int)
(declare-fun x405 () Int)
(declare-fun x317 (x747) Int)
(declare-fun x720 () Int)
(declare-fun x640 () Int)
(declare-fun x420 () Bool)
(declare-fun x35 () Int)
(declare-fun x193 () Int)
(declare-fun x12 () Bool)
(declare-fun x626 () Int)
(declare-fun x768 () Int)
(declare-fun x280 () Int)
(declare-fun x423 () Bool)
(declare-fun x33 () Int)
(declare-fun x69 (Int) Int)
(declare-fun x106 () Int)
(declare-fun x609 (Int) Int)
(declare-fun x732 () Int)
(declare-fun x154 () Bool)
(declare-fun x480 () Bool)
(declare-fun x517 () Bool)
(declare-fun x432 () Bool)
(declare-fun x22 () Int)
(declare-fun x351 () Int)
(declare-fun x753 () Int)
(declare-fun x64 () Int)
(declare-fun x60 () Int)
(declare-fun x492 () Int)
(declare-fun x73 () Bool)
(declare-fun x344 () Bool)
(declare-fun x766 () x747)
(declare-fun x308 () Int)
(declare-fun x367 () x747)
(declare-fun x211 () Int)
(declare-fun x359 () Int)
(declare-fun x272 () Int)
(declare-fun x379 () Bool)
(declare-fun x340 () Int)
(declare-fun x462 () Int)
(declare-fun x153 () Bool)
(declare-fun x811 () Bool)
(declare-fun x597 () Int)
(declare-fun x755 () Bool)
(declare-fun x521 () Int)
(declare-fun x265 () Bool)
(declare-fun x125 (Int Int) Int)
(declare-fun x395 () Bool)
(declare-fun x471 () Int)
(declare-fun x200 () Int)
(declare-fun x465 () x747)
(declare-fun x509 () Int)
(declare-fun x225 () Bool)
(declare-fun x365 () Int)
(declare-fun x603 () Int)
(declare-fun x72 () Int)
(declare-fun x177 () Bool)
(declare-fun x511 () Int)
(declare-fun x784 () Bool)
(declare-fun x712 (Int Int) Int)
(declare-fun x607 () Int)
(declare-fun x646 () Int)
(declare-fun x475 () Bool)
(declare-fun x711 () Int)
(declare-fun x183 () Int)
(declare-fun x398 () Int)
(declare-fun x442 () Int)
(declare-fun x169 () Bool)
(declare-fun x507 () Bool)
(declare-fun x13 () Int)
(declare-fun x178 () Int)
(declare-fun x50 () Int)
(declare-fun x625 () Int)
(declare-fun x584 () Bool)
(declare-fun x314 () Bool)
(declare-fun x445 () Int)
(declare-fun x263 () Bool)
(declare-fun x158 () Int)
(declare-fun x727 () Bool)
(declare-fun x486 () Int)
(declare-fun x530 () Int)
(declare-fun x117 () Int)
(declare-fun x558 () Bool)
(declare-fun x494 () Bool)
(declare-fun x99 () Int)
(declare-fun x655 () Int)
(declare-fun x390 () Int)
(declare-fun x86 () Bool)
(declare-fun x286 () Int)
(declare-fun x464 () Int)
(declare-fun x798 () Int)
(declare-fun x16 () Int)
(declare-fun x691 () Int)
(declare-fun x751 () Int)
(declare-fun x279 () Int)
(declare-fun x135 () Int)
(declare-fun x744 () Int)
(declare-fun x380 () Bool)
(declare-fun x326 () Bool)
(declare-fun x693 () Bool)
(declare-fun x556 () Int)
(declare-fun x652 () Bool)
(declare-fun x23 () Int)
(declare-fun x803 () Int)
(declare-fun x479 () Int)
(declare-fun x30 () Int)
(declare-fun x641 () Bool)
(declare-fun x40 () Int)
(declare-fun x366 () Int)
(declare-fun x440 () Int)
(declare-fun x762 () Int)
(declare-fun x663 () Int)
(declare-fun x371 () Int)
(declare-fun x491 () Int)
(declare-fun x748 () Bool)
(declare-fun x547 () Int)
(declare-fun x545 () Int)
(declare-fun x717 () Bool)
(declare-fun x451 () Int)
(declare-fun x147 () Int)
(declare-fun x5 () Int)
(declare-fun x192 () Int)
(declare-fun x159 () Bool)
(declare-fun x776 () Int)
(declare-fun x136 () Bool)
(declare-fun x541 () Int)
(declare-fun x795 () Bool)
(declare-fun x514 () Int)
(declare-fun x433 () Int)
(declare-fun x599 () Bool)
(declare-fun x785 () Int)
(declare-fun x661 () Int)
(declare-fun x62 () x747)
(declare-fun x184 () Int)
(declare-fun x285 () Int)
(declare-fun x350 () Int)
(declare-fun x377 () Int)
(declare-fun x651 () Bool)
(declare-fun x215 () Int)
(declare-fun x356 () Bool)
(declare-fun x536 () Int)
(declare-fun x348 () Int)
(declare-fun x404 () Bool)
(declare-fun x397 () Bool)
(declare-fun x155 () Bool)
(declare-fun x19 () Int)
(declare-fun x224 () Int)
(declare-fun x145 () Bool)
(declare-fun x505 () Int)
(declare-fun x528 () Int)
(declare-fun x568 () Int)
(declare-fun x370 () Bool)
(declare-fun x529 () Int)
(declare-fun x692 () Int)
(declare-fun x595 () x747)
(declare-fun x246 () Bool)
(declare-fun x161 () Bool)
(declare-fun x672 () Bool)
(declare-fun x360 () Int)
(declare-fun x63 () Bool)
(declare-fun x487 () Int)
(declare-fun x57 () Int)
(declare-fun x173 () Int)
(declare-fun x122 () Int)
(declare-fun x594 () Bool)
(declare-fun x497 () Int)
(declare-fun x729 () Bool)
(declare-fun x342 () Int)
(declare-fun x537 () Bool)
(declare-fun x218 () Int)
(declare-fun x10 () Int)
(declare-fun x571 () Int)
(declare-fun x439 () Int)
(declare-fun x422 () Bool)
(define-fun x39 ((x747 x747) (x412 Int)) x747 (ite ((_ is x347) x747) (x347 (x319 x747) (+ x412 (x127 x747))) (ite ((_ is x718) x747) (x718 (x415 x747) (x715 x747) (+ x412 (x156 x747))) (x330 (+ x412 (x677 x747))))))
(define-fun x810 ((x111 Int)) Int (ite (and (<= 0 x111) (< x111 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x111 (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x738 ((x111 Int)) Int (ite (and (>= x111 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x111 0)) (+ x111 115792089237316195423570985008687907853269984665640564039457584007913129639936) x111))
(define-fun x602 ((x111 Int)) Int (ite (and (>= x111 0) (< x111 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x111 (ite (and (>= x111 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x111)) (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x111) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x111)) (+ x111 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x712 x111 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x527 ((x229 Int)) Bool (and (>= x229 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x229)))
(define-fun x634 ((x229 Int) (x105 Int)) Bool (=> (and (> x105 0) (< 0 x229)) (and (>= (x499 x229 x105) 0) (>= x229 (x499 x229 x105)))))
(define-fun x46 ((x229 Int) (x105 Int)) Bool (=> (and (and (<= 1 x105) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105)) (and (<= 0 x229) (< x229 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x499 x229 x105) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x499 x229 x105)))))
(define-fun x476 ((x229 Int) (x105 Int)) Bool (=> (and (< 1 x105) (> x229 x105)) (< (x499 x229 x105) x229)))
(define-fun x700 ((x229 Int) (x105 Int)) Bool (=> (and (> x229 0) (> x105 0)) (= (= 0 (x499 x229 x105)) (> x105 x229))))
(define-fun x544 ((x229 Int)) Bool (= 0 (x499 0 x229)))
(define-fun x489 ((x229 Int)) Bool (= (x499 x229 1) x229))
(define-fun x222 ((x229 Int)) Bool (=> (not (= 0 x229)) (= (x499 x229 x229) 1)))
(define-fun x188 ((x229 Int)) Bool (and (x544 x229) (x222 x229) (x489 x229)))
(define-fun x797 ((x229 Int)) Bool (and (= x229 (x234 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229)) (= (x234 x229 115792089237316195423570985008687907853269984665640564039457584007913129639935) x229)))
(define-fun x746 ((x229 Int)) Bool (and (= 0 (x234 x229 0)) (= (x234 0 x229) 0)))
(define-fun x716 ((x229 Int)) Bool (= x229 (x234 x229 x229)))
(define-fun x90 ((x229 Int)) Bool (and (x716 x229) (x797 x229) (x746 x229)))
(define-fun x329 ((x229 Int) (x105 Int)) Bool (= (x234 x229 x105) (x234 x105 x229)))
(define-fun x600 ((x229 Int) (x105 Int)) Bool (and (<= 0 (x234 x229 x105)) (=> (>= x229 0) (<= (x234 x229 x105) x229)) (=> (>= x105 0) (<= (x234 x229 x105) x105))))
(define-fun x664 ((x229 Int) (x105 Int)) Bool (and (x600 x229 x105) (x329 x229 x105)))
(define-fun x21 ((x229 Int)) Bool (= (x712 x229 1461501637330902918203684832716283019655932542976) (x234 x229 1461501637330902918203684832716283019655932542975)))
(define-fun x37 ((x229 Int)) Bool (and (x21 x229) (x664 x229 1461501637330902918203684832716283019655932542975)))
(define-fun x771 ((x229 Int) (x105 Int)) Bool (and (>= (x712 x229 x105) 0) (< (x712 x229 x105) x105)))
(define-fun x139 ((x229 Int) (x105 Int)) Bool (=> (and (<= 0 x229) (> x105 0)) (= (< x229 x105) (= x229 (x712 x229 x105)))))
(define-fun x407 ((x229 Int) (x105 Int)) Bool (=> (and (> x105 0) (and (< x229 (+ x105 x105)) (<= x105 x229))) (= (x712 x229 x105) (- x229 x105))))
(define-fun x233 ((x229 Int)) Bool (= (x712 0 x229) 0))
(define-fun x113 ((x229 Int)) Bool (= 0 (x712 x229 1)))
(define-fun x175 ((x229 Int)) Bool (= (x712 x229 x229) 0))
(define-fun x467 ((x229 Int)) Bool (and (x175 x229) (x113 x229) (x233 x229)))
(define-fun x51 ((x229 Int) (x105 Int)) Bool (=> (and (< 0 x229) (> x105 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x125 x229 x105)) (= x105 (x499 (x602 (x125 x229 x105)) x229)))))
(define-fun x204 ((x229 Int) (x105 Int)) Bool (=> (and (not (= x229 0)) (not (= 0 x105))) (and (= (x499 (x125 x229 x105) x105) x229) (= x105 (x499 (x125 x229 x105) x229)))))
(define-fun x515 ((x229 Int) (x105 Int)) Bool (=> (and (< 0 x229) (< 0 x105)) (= (< (x499 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229) x105) (> (x125 x229 x105) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x707 ((x229 Int) (x105 Int)) Bool (and (= (x602 (x125 (- x229 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x602 (x125 x229 x105))) (= (x602 (x125 (- x229 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105)) (x602 (x125 x229 x105))) (= (x602 (x125 x229 x105)) (x602 (x125 x229 (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x577 ((x229 Int) (x105 Int)) Bool (and (=> (and (and (< 0 x105) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x229) (> x229 0))) (= (>= (x499 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105) x229) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x125 x229 x105)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x105)) (and (> x229 0) (<= x229 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x125 x229 (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105) (x499 57896044618658097711785492504343953926634992332820282019728792003956564819968 x229)))) (=> (and (and (<= x105 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x105 0)) (and (<= x229 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x229 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x125 (- x229 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x229) (x499 57896044618658097711785492504343953926634992332820282019728792003956564819968 x105)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x229)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x105) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x105))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x229) (x499 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x105))) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x125 (- x229 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x105 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(define-fun x96 ((x229 Int)) Bool (and (= 0 (x125 0 x229)) (= (x125 x229 0) 0)))
(define-fun x419 ((x229 Int)) Bool (and (= x229 (x125 1 x229)) (= (x125 x229 1) x229)))
(define-fun x232 ((x229 Int)) Bool (and (x419 x229) (x96 x229)))
(define-fun x220 ((x229 Int) (x105 Int)) Bool (=> (and (< 0 x229) (> x105 0)) (and (< (- x229 x105) (x125 (x499 x229 x105) x105)) (>= x229 (x125 (x499 x229 x105) x105)))))
(define-fun x306 ((x229 Int) (x105 Int)) Bool (and (x634 x229 x105) (x46 x229 x105) (x700 x229 x105) (x476 x229 x105) (x220 x229 x105)))
(define-fun x137 ((x229 Int) (x105 Int)) Bool (= (x125 x105 x229) (x125 x229 x105)))
(define-fun x539 ((x229 Int) (x105 Int)) Bool (and (=> (and (> x105 0) (< 0 x229)) (> (x125 x229 x105) 0)) (=> (and (< x229 0) (< x105 0)) (< 0 (x125 x229 x105))) (=> (and (< 0 x229) (< x105 0)) (> 0 (x125 x229 x105))) (=> (and (< x229 0) (< 0 x105)) (< (x125 x229 x105) 0))))
(define-fun x647 ((x229 Int) (x105 Int)) Bool (and (x539 x229 x105) (x204 x229 x105) (x51 x229 x105) (x707 x229 x105) (x137 x229 x105) (x577 x229 x105) (x515 x229 x105)))
(define-fun x533 ((x229 Int)) Bool (= (x234 x229 340282366920938463463374607431768211455) (x712 x229 340282366920938463463374607431768211456)))
(define-fun x160 ((x229 Int)) Bool (and (x533 x229) (x664 x229 340282366920938463463374607431768211455)))
(define-fun x796 ((x243 Int)) Int (ite (= x243 128) 2 (x288 x243)))
(define-fun x788 ((x243 Int)) Int (ite (= x243 160) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x796 x243)))
(define-fun x573 ((x243 Int)) Int (ite (= 192 x243) 2 (x788 x243)))
(define-fun x77 ((x243 Int)) Int (ite (= 224 x243) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x573 x243)))
(define-fun x396 ((x243 Int)) Int (ite (= x243 256) 2 (x77 x243)))
(define-fun x38 ((x243 Int)) Int (ite (= x243 288) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x396 x243)))
(define-fun x596 ((x243 x747)) Int (ite (= x243 x70) 1000000000000000000000000000 (x387 x243)))
(define-fun x779 ((x243 x747)) Int (ite (= x138 x243) x545 (x317 x243)))
(define-fun x44 ((x243 Int)) Int (ite (= 320 x243) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x38 x243)))
(define-fun x733 ((x243 Int)) Int (ite (= 324 x243) x413 (x44 x243)))
(define-fun x576 ((x243 Int)) Int (ite (= 356 x243) x646 (x733 x243)))
(define-fun x112 ((x243 Int)) Int (ite (= 388 x243) x571 (x576 x243)))
(define-fun x567 ((x243 Int)) Int (ite (= x243 128) 2 (x69 x243)))
(define-fun x553 ((x243 Int)) Int (ite (= 160 x243) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x567 x243)))
(define-fun x181 ((x243 Int)) Int (ite (= 192 x243) 2 (x553 x243)))
(define-fun x41 ((x243 Int)) Int (ite (= 224 x243) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x181 x243)))
(define-fun x665 ((x243 Int)) Int (ite (= x243 256) 2 (x41 x243)))
(define-fun x104 ((x243 Int)) Int (ite (= x243 288) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x665 x243)))
(define-fun x800 ((x243 x747)) Int (ite (= x243 x484) x541 (x317 x243)))
(define-fun x115 ((x243 Int)) Int (ite (= x243 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x104 x243)))
(define-fun x126 ((x243 Int)) Int (ite (= 324 x243) x483 (x115 x243)))
(define-fun x613 ((x243 Int)) Int (ite (= x243 356) x646 (x126 x243)))
(define-fun x353 ((x243 Int)) Int (ite (= 388 x243) x117 (x613 x243)))
(define-fun x316 ((x243 x747)) Int (x596 x243))
(define-fun x550 ((x243 x747)) Int (ite (= x129 x243) x279 (x546 x243)))
(define-fun x787 ((x243 x747)) Int (ite (= x243 x455) x597 (x550 x243)))
(define-fun x191 ((x243 x747)) Int (ite x369 (x546 x243) (ite x311 (x546 x243) (x787 x243))))
(define-fun x226 ((x243 x747)) Int (x779 x243))
(define-fun x258 ((x243 Int)) Int (ite (= x243 128) 2 (x292 x243)))
(define-fun x496 ((x243 Int)) Int (ite (= 160 x243) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x258 x243)))
(define-fun x619 ((x243 Int)) Int (ite (= 192 x243) 2 (x496 x243)))
(define-fun x255 ((x243 Int)) Int (ite (= 224 x243) 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x619 x243)))
(define-fun x157 ((x243 Int)) Int (ite (= x243 256) 2 (x255 x243)))
(define-fun x562 ((x243 Int)) Int (ite (= 288 x243) 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x157 x243)))
(define-fun x296 ((x243 x747)) Int (ite (= x243 x32) x560 (x226 x243)))
(define-fun x639 ((x243 Int)) Int (ite (= 320 x243) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x562 x243)))
(define-fun x773 ((x243 Int)) Int (ite (= 324 x243) x587 (x639 x243)))
(define-fun x372 ((x243 Int)) Int (ite (= 356 x243) x260 (x773 x243)))
(define-fun x557 ((x243 Int)) Int (ite (= x243 388) x318 (x372 x243)))
(define-fun x473 ((x243 x747)) Int (ite (= x243 x391) x681 (x191 x243)))
(define-fun x430 ((x243 x747)) Int (ite (= x243 x708) x377 (x473 x243)))
(define-fun x682 ((x243 x747)) Int (ite x601 (x191 x243) (ite x182 (x191 x243) (x430 x243))))
(define-fun x592 ((x243 x747)) Int (x296 x243))
(define-fun x167 ((x243 Int)) Int (ite (= 128 x243) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x278 x243)))
(define-fun x287 ((x243 Int)) Int (ite (= 132 x243) x798 (x167 x243)))
(define-fun x506 ((x243 Int)) Int (ite (= x243 128) x762 (x287 x243)))
(define-fun x190 ((x243 x747)) Int (ite (= x243 x561) x94 (x546 x243)))
(define-fun x756 ((x243 x747)) Int (ite (= x766 x243) x217 (x190 x243)))
(define-fun x54 ((x243 x747)) Int (ite x431 (x546 x243) (ite x781 (x546 x243) (ite x778 (x546 x243) (x756 x243)))))
(define-fun x786 ((x243 x747)) Int (x800 x243))
(define-fun x612 ((x243 Int)) Int (ite (= x243 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x706 x243)))
(define-fun x165 ((x243 Int)) Int (ite (= 132 x243) x383 (x612 x243)))
(define-fun x642 ((x243 Int)) Int (ite (= 128 x243) x753 (x165 x243)))
(define-fun x116 ((x243 Int)) Int (ite x299 (x38 x243) (x112 x243)))
(define-fun x659 ((x243 Int)) Int (ite (= 320 x243) x189 (x116 x243)))
(define-fun x623 ((x243 Int)) Int (ite (= x243 320) x189 (x659 x243)))
(define-fun x764 ((x243 Int)) Int (ite (= 352 x243) x719 (x623 x243)))
(define-fun x649 ((x243 Int)) Int (ite (= 384 x243) 1000000000000000000000000000 (x764 x243)))
(define-fun x143 ((x243 Int)) Int (ite (= x243 320) x569 (x116 x243)))
(define-fun x132 ((x243 Int)) Int (ite (= x243 320) x569 (x143 x243)))
(define-fun x76 ((x243 Int)) Int (ite (= 352 x243) x719 (x132 x243)))
(define-fun x107 ((x243 Int)) Int (ite (= 384 x243) 1000000000000000000000000000 (x76 x243)))
(define-fun x660 ((x243 Int)) Int (ite x432 (x649 x243) (x107 x243)))
(define-fun x689 ((x243 Int)) Int (ite (= x243 320) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x660 x243)))
(define-fun x680 ((x243 Int)) Int (ite (= x243 324) x521 (x689 x243)))
(define-fun x437 ((x243 Int)) Int (ite (= 356 x243) x690 (x680 x243)))
(define-fun x216 ((x243 Int)) Int (ite (= 0 x243) 1 (x609 x243)))
(define-fun x633 ((x243 Int)) Int (ite x84 (x562 x243) (x557 x243)))
(define-fun x45 ((x243 Int)) Int (ite (= 320 x243) x760 (x633 x243)))
(define-fun x502 ((x243 Int)) Int (ite (= 320 x243) x760 (x45 x243)))
(define-fun x551 ((x243 Int)) Int (ite (= x243 352) x655 (x502 x243)))
(define-fun x453 ((x243 Int)) Int (ite (= 384 x243) 1000000000000000000000000000 (x551 x243)))
(define-fun x549 ((x243 Int)) Int (ite (= x243 320) x466 (x633 x243)))
(define-fun x648 ((x243 Int)) Int (ite (= x243 320) x466 (x549 x243)))
(define-fun x336 ((x243 Int)) Int (ite (= x243 352) x655 (x648 x243)))
(define-fun x203 ((x243 Int)) Int (ite (= x243 384) 1000000000000000000000000000 (x336 x243)))
(define-fun x256 ((x243 Int)) Int (ite x474 (x453 x243) (x203 x243)))
(define-fun x276 ((x243 Int)) Int (ite (= 320 x243) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x256 x243)))
(define-fun x80 ((x243 Int)) Int (ite (= x243 324) x148 (x276 x243)))
(define-fun x578 ((x243 Int)) Int (ite (= 356 x243) x301 (x80 x243)))
(define-fun x575 ((x243 Int)) Int (ite (= 0 x243) 1 (x25 x243)))
(define-fun x666 ((x243 Int)) Int (ite x565 (x104 x243) (x353 x243)))
(define-fun x52 ((x243 Int)) Int (ite (= x243 320) x223 (x666 x243)))
(define-fun x212 ((x243 Int)) Int (ite (= 320 x243) x223 (x52 x243)))
(define-fun x608 ((x243 Int)) Int (ite (= 352 x243) x547 (x212 x243)))
(define-fun x262 ((x243 Int)) Int (ite (= x243 384) 1000000000000000000000000000 (x608 x243)))
(define-fun x166 ((x243 Int)) Int (ite (= 320 x243) x769 (x666 x243)))
(define-fun x618 ((x243 Int)) Int (ite (= x243 320) x769 (x166 x243)))
(define-fun x741 ((x243 Int)) Int (ite (= 352 x243) x547 (x618 x243)))
(define-fun x772 ((x243 Int)) Int (ite (= 384 x243) 1000000000000000000000000000 (x741 x243)))
(define-fun x657 ((x243 Int)) Int (ite x42 (x262 x243) (x772 x243)))
(define-fun x472 ((x243 Int)) Int (ite (= x243 320) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x657 x243)))
(define-fun x418 ((x243 Int)) Int (ite (= 324 x243) x146 (x472 x243)))
(define-fun x739 ((x243 Int)) Int (ite (= 356 x243) x13 (x418 x243)))
(define-fun x713 ((x243 Int)) Int (ite (= x243 0) 1 (x461 x243)))
(define-fun x734 ((x229 Int) (x105 Int) (x24 Int) (x81 Int)) Bool (=> (and (<= 0 x105) (>= x229 0) (<= x105 x81) (>= x24 x229)) (>= (x125 x24 x81) (x125 x229 x105))))
(define-fun x704 ((x229 Int) (x105 Int) (x24 Int) (x81 Int)) Bool (=> (= x229 x24) (= (- (x125 x229 x105) (x125 x24 x81)) (x125 x229 (- x105 x81)))))
(define-fun x698 ((x229 Int)) Bool (=> (and (not (= 404098525 x229)) (not (= x229 1461501637330902918203684832716283019655932542976)) (not (= x229 340282366920938463463374607431768211455)) (not (= x229 115792089237316195423570985008687907853269984665640)) (not (= x229 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 x229)) (not (= x229 2113256763)) (not (= x229 2835717307)) (not (= 1000000000000000000000000000 x229)) (not (= x229 1461501637330902918203684832716283019655932542975)) (> x229 10000) (not (= x229 1889567281)) (not (= x229 3018967357)) (not (= 22707518476531795403804539479547988765414823042645454849778882899012749361152 x229)) (not (= 500000000000000000000000000 x229)) (not (= x229 22711052170661352172463706074549474602446478010439206087695126111415334600704)) (not (= x229 157198259)) (not (= x229 340282366920938463463374607431768211456)) (not (= x229 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 x229)) (not (= 497176382 x229)) (not (= 826074471 x229)) (not (= x229 3607235850)) (not (= x229 94699471215667416670508682402181198833950827816622411988269365108481485438976)) (not (= x229 599290589))) (not ((_ is x330) (x309 x229)))))
(assert (x527 x103))
(assert (and (x204 3 x520) (x707 3 x520) (x515 3 x520) (= (* 3 x520) (x125 3 x520)) (x51 3 x520) (and (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x520) (- (* x520 3) (* x520 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 3 (- x520 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x520 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x520 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x520 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x520 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 3 x520)))
(assert (x232 (- x200 x635)))
(assert (= (x309 1461501637330902918203684832716283019655932542976) (x330 1461501637330902918203684832716283019655932542976)))
(assert (x698 x5))
(assert (x734 x501 x481 x200 x785))
(assert (x306 115792089237316195423570985008687907853269984665640064039457584007913129639935 x481))
(assert (x188 x775))
(assert (x698 x148))
(assert (x527 x362))
(assert (x647 x635 (- x230 x627)))
(assert (= (x309 1000000000000000000000000000) (x330 1000000000000000000000000000)))
(assert (x232 (- x230 x60)))
(assert (x647 x627 (- x19 x635)))
(assert (x527 x760))
(assert (x90 x806))
(assert (= (and (not x658) x196) x368))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x442 (+ (x712 x442 1461501637330902918203684832716283019655932542976) (* (x499 x442 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x139 x442 1461501637330902918203684832716283019655932542976) (x407 x442 1461501637330902918203684832716283019655932542976) (x771 x442 1461501637330902918203684832716283019655932542976)))
(assert (x527 x661))
(assert (x527 x360))
(assert (x527 x559))
(assert (x647 x230 (- x635 x785)))
(assert (x37 x705))
(assert (x527 x488))
(assert (= (=> (and (and (= (= 0 x20) x74) (< 0 x75)) (or (and (and (= x20 32) (= (= 0 x587) x357) (= (not x357) x274) (= (ite x274 1 0) x172)) (not x74)) (and x74 (and (= x371 (x469 (x309 x178))) (< 0 x371) (= x172 1))))) x572) x672))
(assert (x527 x277))
(assert (x647 x230 (- x635 x19)))
(assert (x527 x348))
(assert (x527 x304))
(assert (x306 115792089237316195423570985008687907853269984665640064039457584007913129639935 x60))
(assert (= x106 1000000000000000000000000000))
(assert (x698 x144))
(assert (= x86 (or x134 x781 x778)))
(assert (x734 x200 x785 x635 x230))
(assert (x527 x321))
(assert (= x662 (and x423 x8)))
(assert (x527 x286))
(assert (and (x204 1000000000000000000000000000 x690) (x707 1000000000000000000000000000 x690) (x515 1000000000000000000000000000 x690) (= (* 1000000000000000000000000000 x690) (x125 1000000000000000000000000000 x690)) (x51 1000000000000000000000000000 x690) (and (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x690) (- (* x690 1000000000000000000000000000) (* x690 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 1000000000000000000000000000 (- x690 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x690 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000)) (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x690 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x690 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x690 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 1000000000000000000000000000 x690)))
(assert (x704 x785 x200 x481 x501))
(assert (x232 (- x230 x200)))
(assert (x704 x19 x627 x635 x230))
(assert (x527 x522))
(assert (= (and x678 (not x133)) x151))
(assert (x527 x460))
(assert (x527 x477))
(assert (x188 x230))
(assert (x704 x635 x230 x200 x785))
(assert (x188 x281))
(assert (x527 x323))
(assert (= (and x656 (not x358)) x114))
(assert (and (=> (< 0 340282366920938463463374607431768211456) (= x806 (+ (x712 x806 340282366920938463463374607431768211456) (* (x499 x806 340282366920938463463374607431768211456) 340282366920938463463374607431768211456)))) (x139 x806 340282366920938463463374607431768211456) (x407 x806 340282366920938463463374607431768211456) (x771 x806 340282366920938463463374607431768211456)))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x410 0)) (and (< (- x410 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x410 1000000000000000000000000000))) (>= x410 (* 1000000000000000000000000000 (x499 x410 1000000000000000000000000000))))) (x46 x410 1000000000000000000000000000) (x700 x410 1000000000000000000000000000) (x634 x410 1000000000000000000000000000) (x476 x410 1000000000000000000000000000)))
(assert (x704 x231 x60 x481 x501))
(assert (= x748 (and (not x136) x171)))
(assert (x527 x49))
(assert (x698 x324))
(assert (x527 x543))
(assert (x527 x580))
(assert (x704 x501 x481 x785 x200))
(assert (x527 x535))
(assert (x527 x640))
(assert (x232 x785))
(assert (x527 x31))
(assert (x647 x785 (- x200 x231)))
(assert (x704 x230 x635 x785 x200))
(assert (= (and x652 x456) x651))
(assert (x467 1461501637330902918203684832716283019655932542976))
(assert (x232 (- x635 x200)))
(assert (x647 x785 (- x200 x627)))
(assert (= (x309 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x330 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x527 x736))
(assert (x647 x501 (- x481 x231)))
(assert (= (and x344 (not x119)) x241))
(assert (x527 x730))
(assert (x527 x325))
(assert (x232 (- x635 x481)))
(assert (x527 x745))
(assert (= x300 (=> (and (or (and (and (= x769 (x738 (- x547 x13))) (not (> x13 x547))) x168) (and (and (not (> x547 x13)) (= x223 (x738 (- x13 x547)))) (not x168))) (= (< x13 x547) x168)) x671)))
(assert (x527 x688))
(assert (x527 x667))
(assert (x527 x789))
(assert (x527 x528))
(assert (=> (>= 10000 x273) (= (x330 x273) (x309 x273))))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x670 (+ (x712 x670 1461501637330902918203684832716283019655932542976) (* (x499 x670 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x139 x670 1461501637330902918203684832716283019655932542976) (x407 x670 1461501637330902918203684832716283019655932542976) (x771 x670 1461501637330902918203684832716283019655932542976)))
(assert (x704 x501 x481 x231 x60))
(assert (x232 (- x635 x60)))
(assert (x527 x223))
(assert (and (x204 1000000000000000000000000000 x501) (x707 1000000000000000000000000000 x501) (x515 1000000000000000000000000000 x501) (= (* 1000000000000000000000000000 x501) (x125 1000000000000000000000000000 x501)) (x51 1000000000000000000000000000 x501) (and (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x501) (- (* x501 1000000000000000000000000000) (* x501 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 1000000000000000000000000000 (- x501 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x501 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000)) (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x501 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x501 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x501 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 1000000000000000000000000000 x501)))
(assert (x647 x501 (- x481 x200)))
(assert (x527 x637))
(assert (x527 x768))
(assert (x188 x410))
(assert (x527 x359))
(assert (x527 x571))
(assert (x232 (- x230 x785)))
(assert (x527 x135))
(assert (= (or (and x459 (not x128)) x249) x792))
(assert (x527 x503))
(assert (x704 x481 x501 x200 x785))
(assert (=> (>= 10000 x483) (= (x330 x483) (x309 x483))))
(assert (x527 x346))
(assert (x232 (- x501 x230)))
(assert (x704 x231 x60 x230 x635))
(assert (x232 (- x635 x19)))
(assert (= (x702 (x330 3018967357)) 3018967357))
(assert (x527 x94))
(assert (x527 x724))
(assert (= x194 (or x565 x313)))
(assert (x527 x462))
(assert (x527 x621))
(assert (=> (>= 10000 x146) (= (x309 x146) (x330 x146))))
(assert (x704 x230 x635 x627 x19))
(assert (x527 x87))
(assert (x527 x394))
(assert (x704 x200 x785 x231 x60))
(assert (x647 x635 (- x230 x481)))
(assert (= x678 (and (not x584) x198)))
(assert (x527 x614))
(assert (x527 x18))
(assert (x704 x60 x231 x481 x501))
(assert (= (=> (and (or (and (not x508) (and (= x342 (x469 (x309 x273))) (not (= x342 0)))) x508) (and (= x64 x285) (= x693 x363) (>= x19 0) (not (> x30 340282366920938463463374607431768211455)) (= x529 (+ x560 x213)) (<= 0 x285) (>= 1461501637330902918203684832716283019655932542975 x376) (= (x718 (x309 x587) (x330 52) 0) x32) (> 340282366920938463463374607431768211456 x19) (= (ite x638 1 0) x759) (= (= 0 x19) x516) (= x514 (x469 (x309 x49))) (= x124 x214) (>= x627 0) (= x56 x587) (< 0 x514) (= (ite x284 1 0) x451) (= 3607235850 x283) (<= 0 x376) (<= x148 1461501637330902918203684832716283019655932542975) (= x218 (x234 1461501637330902918203684832716283019655932542975 x64)) (<= x587 1461501637330902918203684832716283019655932542975) (= (x316 x48) x19) (= (= 0 x273) x508) (= x673 (x738 (- x260 x30))) (= (x718 (x309 x587) (x330 52) 0) x61) (= (not x558) x404) (= x263 (> x627 115792089237316195423570985008687907853269984665640)) (= (not x263) x389) (not (= 0 x30)) (= x110 x478) (> x759 0) (>= 1461501637330902918203684832716283019655932542975 x285) (<= 0 x318) (>= x273 0) (= x284 (or x315 x516)) (= x48 (x718 (x309 x587) (x330 52) 0)) (= x558 (< 115792089237316195423570985008687907853269984665640 x301)) (<= x318 340282366920938463463374607431768211455) (not (< x283 3607235850)) (= x214 0) (= (not x404) x693) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x260) (= x744 (x499 x752 1000000000000000000000000000)) (= x532 (x718 (x309 x587) (x330 52) 0)) (= (ite x363 1 0) x240) (= 0 x240) (not (> x744 x722)) (> 340282366920938463463374607431768211456 x318) (= x460 (x234 1461501637330902918203684832716283019655932542975 x705)) (> x451 0) (= x366 (x602 (* 1000000000000000000000000000 x627))) (= (x499 x410 1000000000000000000000000000) x722) (= x218 x135) (= (- x529 x350) x538) (>= 1461501637330902918203684832716283019655932542975 x637) (= (x226 x532) x318) (<= 0 x350) (= x606 x625) (= x683 1000000000000000000000000000) (>= x260 0) (= x18 (x738 (- x260 x30))) (= (x602 (x125 x627 x19)) x477) (not (< x283 2113256763)) (= (x738 (- x722 x744)) x655) (= x441 (> x627 x11)) (= x560 (x234 340282366920938463463374607431768211455 x679)) (= (x810 (+ 500000000000000000000000000 x477)) x752) (= x460 x275) (= x275 (x234 1461501637330902918203684832716283019655932542975 x64)) (< x273 1461501637330902918203684832716283019655932542976) (= (x499 115792089237316195423570985008687907853269984665640064039457584007913129639935 x19) x11) (= x410 (x810 (+ x366 500000000000000000000000000))) (> 340282366920938463463374607431768211456 x627) (<= 0 x637) (not (< x260 x30)) (= x448 x301) (>= 340282366920938463463374607431768211455 x19) (= (not x441) x315) (= x389 x638) (= x30 (x499 x228 1000000000000000000000000000)) (<= x273 1461501637330902918203684832716283019655932542975) (= x679 (x738 (- x318 x30))) (= x637 x110) (= x384 1000000000000000000000000000) x644 (= x228 (x810 (+ 500000000000000000000000000 x434))) (= (x226 x32) x350) (= x644 (= x359 x538)) (= x135 (x234 1461501637330902918203684832716283019655932542975 x705)) (<= x627 340282366920938463463374607431768211455) (not (< x283 3018967357)) (not (> x30 x318)) (>= 340282366920938463463374607431768211455 x350) (= x627 (x226 x61)) (= x82 x148) (= x434 (x602 (* 1000000000000000000000000000 x301))))) x494) x206))
(assert (x527 x470))
(assert (x232 (- x230 x481)))
(assert (x527 x421))
(assert (x527 x13))
(assert (x527 x67))
(assert (= (and x658 x196) x299))
(assert (x647 x627 x19))
(assert (x734 x627 x19 x200 x785))
(assert (= (x330 2835717307) (x309 2835717307)))
(assert (x527 x742))
(assert (x527 x504))
(assert (x647 x785 (- x200 x60)))
(assert (x647 x785 (- x200 x19)))
(assert (x704 x231 x60 x627 x19))
(assert (x527 x526))
(assert (x527 x164))
(assert (x527 x463))
(assert (x527 x405))
(assert (x527 x510))
(assert (x647 x19 (- x627 x230)))
(assert (x527 x582))
(assert (x527 x774))
(assert (x527 x99))
(assert (x527 x570))
(assert (x527 x192))
(assert (x232 (- x635 x627)))
(assert (x527 x40))
(assert (x467 x679))
(assert (x734 x231 x60 x501 x481))
(assert (x232 (- x481 x785)))
(assert (x527 x587))
(assert (x647 x627 (- x19 x230)))
(assert (x90 1461501637330902918203684832716283019655932542975))
(assert (x527 x324))
(assert (=> (>= 10000 x99) (= (x330 x99) (x309 x99))))
(assert (x527 x450))
(assert (x527 x560))
(assert (x647 x200 (- x785 x60)))
(assert (x527 x479))
(assert (x527 x261))
(assert (x232 (- x200 x19)))
(assert (= (x702 (x330 1889567281)) 1889567281))
(assert (x527 x752))
(assert (x527 x464))
(assert (x527 x563))
(assert (and (x204 1000000000000000000000000000 x13) (x707 1000000000000000000000000000 x13) (x515 1000000000000000000000000000 x13) (= (* 1000000000000000000000000000 x13) (x125 1000000000000000000000000000 x13)) (x51 1000000000000000000000000000 x13) (and (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x13) (- (* x13 1000000000000000000000000000) (* x13 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 1000000000000000000000000000 (- x13 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x13 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000)) (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x13 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x13 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x13 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 1000000000000000000000000000 x13)))
(assert (x527 x354))
(assert (= (=> (and (= x178 x528) (= x20 x9) (= x504 x629) (= (x738 (- x260 x30)) x629) (= x75 0) (= x425 x98)) x397) x242))
(assert (x232 (- x230 x19)))
(assert (x704 x635 x230 x501 x481))
(assert (x232 x481))
(assert (x527 x308))
(assert (x704 x481 x501 x60 x231))
(assert (x527 x239))
(assert (x527 x478))
(assert (= x587 (x702 (x309 x587))))
(assert (x527 x597))
(assert (= (x702 (x309 x178)) x178))
(assert (x734 x501 x481 x627 x19))
(assert (x232 (- x627 x231)))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x685 0)) (and (< (- x685 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x685 1000000000000000000000000000))) (>= x685 (* 1000000000000000000000000000 (x499 x685 1000000000000000000000000000))))) (x46 x685 1000000000000000000000000000) (x700 x685 1000000000000000000000000000) (x634 x685 1000000000000000000000000000) (x476 x685 1000000000000000000000000000)))
(assert (= (and (not x74) x792) x534))
(assert (x647 x231 (- x60 x200)))
(assert (= 22711052170661352172463706074549474602446478010439206087695126111415334600704 (x702 (x330 22711052170661352172463706074549474602446478010439206087695126111415334600704))))
(assert (x232 (- x60 x230)))
(assert (x527 x691))
(assert (x527 x703))
(assert (x527 x807))
(assert (x734 x481 x501 x627 x19))
(assert (= (and x119 x344) x784))
(assert (= (and x423 (not x8)) x293))
(assert (x734 x481 x501 x635 x230))
(assert (x37 x442))
(assert (x704 x19 x627 x501 x481))
(assert (x188 x481))
(assert (x698 x259))
(assert (x232 (- x231 x635)))
(assert (= x727 (=> (and (= x635 x429) (< 0 x209) (= x323 x383) (= x487 x753)) x757)))
(assert (x704 x60 x231 x635 x230))
(assert (x647 x231 (- x60 x230)))
(assert (x232 (- x501 x627)))
(assert (x527 x305))
(assert (x647 x60 (- x231 x19)))
(assert (x527 x88))
(assert (= 340282366920938463463374607431768211455 (x702 (x330 340282366920938463463374607431768211455))))
(assert (x232 x301))
(assert (x698 x178))
(assert (x647 x230 (- x635 x231)))
(assert (x647 x635 (- x230 x501)))
(assert (= (x702 (x309 x146)) x146))
(assert (x704 x19 x627 x230 x635))
(assert (x232 (- x481 x635)))
(assert (x527 x78))
(assert (x467 x333))
(assert (x527 x377))
(assert (x527 x371))
(assert (= x324 (x702 (x309 x324))))
(assert (x527 x501))
(assert (x647 x200 (- x785 x635)))
(assert (x232 x312))
(assert (= (and x169 (not x435)) x737))
(assert (x527 x541))
(assert (x527 x512))
(assert (x232 (- x501 x231)))
(assert (x647 x60 (- x231 x635)))
(assert (= (x702 (x330 500000000000000000000000000)) 500000000000000000000000000))
(assert (= (x330 1889567281) (x309 1889567281)))
(assert (x647 x785 (- x200 x501)))
(assert (x647 x19 (- x627 x200)))
(assert (x704 x200 x785 x635 x230))
(assert (x527 x22))
(assert (x527 x231))
(assert (= (x702 (x309 x277)) x277))
(assert (x527 x272))
(assert (x527 x731))
(assert (x232 x13))
(assert (x527 x201))
(assert (x647 x60 (- x231 x200)))
(assert (x704 x785 x200 x501 x481))
(assert (x527 x350))
(assert (x647 x785 (- x200 x481)))
(assert (x527 x722))
(assert (x527 x802))
(assert (x527 x184))
(assert (x527 x552))
(assert (x647 x200 (- x785 x501)))
(assert (x734 x627 x19 x231 x60))
(assert (= 1000000000000000000000000000 x98))
(assert (x704 x60 x231 x200 x785))
(assert (x704 x635 x230 x481 x501))
(assert (x527 x373))
(assert (= (and (not x524) x207) x422))
(assert (x527 x217))
(assert (x527 x383))
(assert (x232 (- x785 x481)))
(assert (x527 x805))
(assert (x527 x33))
(assert (= x141 (=> (and (and (= (x499 x291 1000000000000000000000000000) x183) (< x571 340282366920938463463374607431768211456) (<= x56 1461501637330902918203684832716283019655932542975) (= x571 (x317 x454)) (not (> x183 340282366920938463463374607431768211455)) (>= 1461501637330902918203684832716283019655932542975 x215) (= x563 (x738 (- x646 x183))) (= (x602 (* 1000000000000000000000000000 x501)) x66) x73 (= x478 x328) (= (- x280 x512) x585) (>= x215 0) (= x685 x625) (<= 0 x277) (>= x272 0) (not (> x183 x646)) (= x14 x667) (<= x583 1461501637330902918203684832716283019655932542975) (<= 0 x82) (>= 340282366920938463463374607431768211455 x481) (= x686 (x602 (x125 x501 x481))) (<= 0 x591) (<= x646 115792089237316195423570985008687907853269984665640564039457584007913129639935) x717 (= (x738 (- x571 x183)) x333) (= (< x50 x501) x740) (>= 1461501637330902918203684832716283019655932542975 x277) (= x187 1000000000000000000000000000) (= x138 (x718 (x309 x442) (x330 52) 0)) (>= x646 0) (<= 0 x331) (>= x170 0) (= (x317 x138) x512) (= 1000000000000000000000000000 x503) (= x56 x442) (= x70 (x718 (x309 x442) (x330 52) 0)) (<= 0 x215) (= (< 0 (x469 (x309 x49))) x382) (= x616 (not x523)) (= (ite x517 1 0) x15) (= x625 x433) (= x352 (x718 (x309 x442) (x330 52) 0)) (not (= x49 x624)) (>= x398 0) (>= 1461501637330902918203684832716283019655932542975 x82) (= x282 x690) (= (x718 (x309 x442) (x330 52) 0) x62) (= x235 (not x740)) (= (x499 x674 1000000000000000000000000000) x103) (= (= x754 x585) x120) x120 (= (ite x108 1 0) x354) (<= 0 x247) (= x691 (ite x43 1 0)) (= x545 (x234 340282366920938463463374607431768211455 x333)) (= x320 x699) (<= 0 x512) (> x624 0) (= (x548 (x309 x624)) x398) (= x523 (< 115792089237316195423570985008687907853269984665640 x501)) (= (x234 1461501637330902918203684832716283019655932542975 x705) x699) (not (= 0 x183)) (not (< x103 x237)) (= x307 (x499 x685 1000000000000000000000000000)) (= x238 3607235850) (= (x810 (+ x261 500000000000000000000000000)) x291) (= x717 (not (= x267 x542))) (= x674 (x810 (+ 500000000000000000000000000 x66))) (<= x331 255) (= x265 x43) (>= 1461501637330902918203684832716283019655932542975 x215) (= (x499 115792089237316195423570985008687907853269984665640064039457584007913129639935 x481) x50) (= x10 (x469 (x309 x49))) (= x670 x82) (not (< x238 3018967357)) (= x481 (x387 x352)) (<= x49 1461501637330902918203684832716283019655932542975) (= x328 x591) (> 340282366920938463463374607431768211456 x501) (<= 0 x501) (= (x718 (x309 x442) (x330 52) 0) x454) (not (< x238 3607235850)) (= x170 x64) (>= 255 x375) (> 340282366920938463463374607431768211456 x481) (= x501 (x317 x62)) (= x661 (x738 (- x646 x183))) (= (x499 x620 1000000000000000000000000000) x237) (= x320 (x234 1461501637330902918203684832716283019655932542975 x64)) (<= 0 x495) (= x616 x517) x382 (<= x512 340282366920938463463374607431768211455) (= x49 x542) (= x40 0) (not (< x571 x183)) (= x14 (x234 1461501637330902918203684832716283019655932542975 x64)) (= x349 (not x767)) (>= x751 0) (= x280 (+ x545 x593)) (= x658 (= x215 0)) (= x624 x277) (<= 0 x481) (<= x501 340282366920938463463374607431768211455) (= x124 x40) (= x64 x583) (= x247 (x548 (x309 x49))) (> x354 0) (>= x571 0) (<= x624 1461501637330902918203684832716283019655932542975) (not (< x238 2113256763)) (<= 0 x375) (= x56 x267) (>= x56 0) (= (x602 (* 1000000000000000000000000000 x690)) x261) (= (not x349) x265) (< 0 x15) (= x667 (x234 1461501637330902918203684832716283019655932542975 x705)) (= x145 (= x481 0)) (<= 0 x583) (= (or x145 x235) x108) (> 1461501637330902918203684832716283019655932542976 x215) (<= x442 1461501637330902918203684832716283019655932542975) (<= x170 1461501637330902918203684832716283019655932542975) (= (< 0 (x469 (x309 x624))) x73) (<= x272 1461501637330902918203684832716283019655932542975) (<= x670 1461501637330902918203684832716283019655932542975) (<= x495 1461501637330902918203684832716283019655932542975) (= (< 115792089237316195423570985008687907853269984665640 x690) x767) (= (x738 (- x103 x237)) x719) (< 0 x10) (<= x751 1461501637330902918203684832716283019655932542975) (>= 340282366920938463463374607431768211455 x571) (= x743 1000000000000000000000000000) (< 0 x49) (= x691 0) (>= 1461501637330902918203684832716283019655932542975 x591) (= x272 x498) (= x106 x625) (= x620 (x810 (+ 500000000000000000000000000 x686)))) (or (and (and (= x413 (x234 1461501637330902918203684832716283019655932542975 x442)) (not (= x23 0)) (= (x469 (x309 x215)) x23)) (not x658)) x658)) x109)))
(assert (x232 (- x200 x231)))
(assert (x527 x498))
(assert (= (=> (= (= x49 x148) x358) (and (=> (and x358 (and (= x231 x18) (= x762 x425) (= x178 x798))) x765) (=> (and (and (= 68 x101) (not (= 157198259 x305)) (not (> 4 x101)) (= x305 2835717307) (= x123 (x738 (- x101 4))) (= x641 (or (> x123 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (<= x123 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x123 64)))) (= x463 (x469 (x309 x624))) (= x148 x414) (not (= 1889567281 x305)) (= 320 x640) (not (= 599290589 x305)) (<= x178 1461501637330902918203684832716283019655932542975) (= x301 x777) (> 1461501637330902918203684832716283019655932542976 x178) (not (= 404098525 x305)) (> x463 0) (= x257 76450787359836037641860180984291677749980919077056822294353438043884394381312) (<= 0 x178)) (not x358)) (and (=> (and (not x641) (= x566 true)) (and (=> (not x566) x242) (=> (and (and (= x777 x253) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x208) (= (x718 (x309 x49) (x330 1) 0) x417) (= x208 (x191 x417)) (= x537 (> x301 x208)) (<= 0 x208)) x566) (and (=> x537 x242) (=> (and (not x537) (= x91 (< x208 x777))) (and (=> (and (and (<= x603 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x718 (x309 x148) (x330 1) 0) x367) (>= x603 0) (= (x738 (- x208 x777)) x681) (= x391 (x718 (x309 x49) (x330 1) 0)) (= x603 (x473 x367)) (= (x738 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x777)) x224) (= (< x224 x603) x804)) (not x91)) (and (=> (and (and (= (> x603 x377) x154) (= x377 (x810 (+ x777 x603)))) (not x804)) (and (=> x154 x242) (=> (and (not x154) (and (= x528 x178) (= (x718 (x309 x148) (x330 1) 0) x708) (= x98 x425) (= 1 x75) (= x18 x504) (= 32 x20))) x397))) (=> x804 x242))) (=> x91 x242))))))) (=> x641 x242))))) x388))
(assert (x704 x501 x481 x635 x230))
(assert (x232 (- x200 x627)))
(assert (x698 x483))
(assert (= x601 (and x358 x656)))
(assert (x647 x627 (- x19 x200)))
(assert (x704 x635 x230 x19 x627))
(assert (x527 x719))
(assert (= (x702 (x330 404098525)) 404098525))
(assert (= x215 (x702 (x309 x215))))
(assert (x527 x749))
(assert (= (and x594 x615) x628))
(assert (x647 x627 (- x19 x501)))
(assert (= 2113256763 (x702 (x330 2113256763))))
(assert (x527 x673))
(assert (x527 x466))
(assert (x527 x131))
(assert (x527 x318))
(assert (x527 x267))
(assert (x527 x230))
(assert (=> (>= 10000 x442) (= (x330 x442) (x309 x442))))
(assert (= (and x584 x198) x431))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x87 0)) (and (< (- x87 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x87 1000000000000000000000000000))) (>= x87 (* 1000000000000000000000000000 (x499 x87 1000000000000000000000000000))))) (x46 x87 1000000000000000000000000000) (x700 x87 1000000000000000000000000000) (x634 x87 1000000000000000000000000000) (x476 x87 1000000000000000000000000000)))
(assert (x704 x481 x501 x635 x230))
(assert (x527 x581))
(assert (x704 x60 x231 x785 x200))
(assert (x647 x19 (- x627 x501)))
(assert (x232 (- x231 x481)))
(assert (= x5 (x702 (x309 x5))))
(assert (= x379 (and x435 x169)))
(assert (x527 x627))
(assert (x527 x783))
(assert (= (and x161 x159) x518))
(assert (x704 x231 x60 x200 x785))
(assert (x527 x57))
(assert (x527 x540))
(assert (x232 (- x19 x481)))
(assert (x527 x398))
(assert (x232 (- x627 x501)))
(assert (= (x330 1461501637330902918203684832716283019655932542975) (x309 1461501637330902918203684832716283019655932542975)))
(assert (= (x330 340282366920938463463374607431768211455) (x309 340282366920938463463374607431768211455)))
(assert (x704 x200 x785 x481 x501))
(assert (x232 x635))
(assert (x734 x230 x635 x627 x19))
(assert (x232 (- x60 x501)))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x675 0)) (and (< (- x675 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x675 1000000000000000000000000000))) (>= x675 (* 1000000000000000000000000000 (x499 x675 1000000000000000000000000000))))) (x46 x675 1000000000000000000000000000) (x700 x675 1000000000000000000000000000) (x634 x675 1000000000000000000000000000) (x476 x675 1000000000000000000000000000)))
(assert (x704 x19 x627 x231 x60))
(assert (= x28 (=> (and (= x687 x429) (= x768 0) (= x487 x106) (= x277 x323) (= x266 x789) (= (x738 (- x646 x192)) x687)) x812)))
(assert (x527 x364))
(assert (x232 (- x19 x60)))
(assert (x527 x97))
(assert (x527 x709))
(assert (x527 x434))
(assert (x232 (- x627 x635)))
(assert (x734 x230 x635 x200 x785))
(assert (x527 x777))
(assert (x647 x200 (- x785 x230)))
(assert (= (=> (and (= x425 x731) (= x199 x178) (= x273 x725) (= x260 x405) (= x213 x724) (> x522 0)) x206) x34))
(assert (= x153 (and x91 x811)))
(assert (x704 x627 x19 x200 x785))
(assert (x527 x458))
(assert (x232 x19))
(assert (= (or x617 x701) x599))
(assert (and (x204 1000000000000000000000000000 x301) (x707 1000000000000000000000000000 x301) (x515 1000000000000000000000000000 x301) (= (* 1000000000000000000000000000 x301) (x125 1000000000000000000000000000 x301)) (x51 1000000000000000000000000000 x301) (and (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x301) (- (* x301 1000000000000000000000000000) (* x301 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 1000000000000000000000000000 (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000)) (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 1000000000000000000000000000 x301)))
(assert (x527 x331))
(assert (x232 (- x501 x60)))
(assert (x527 x606))
(assert (x704 x481 x501 x230 x635))
(assert (x467 x705))
(assert (= (=> (and (and (= (and x507 x694) x401) (= (>= x174 x530) x726) (= x507 (<= x31 x589)) (= x303 (* x355 3)) (= x155 (and x676 x636)) (= (* 3 x93) x416) (= 3 x321) (= x520 x307) (= x286 x158) (= (+ x802 x776) x589) (= x338 x332) (= x444 (+ x403 x381)) (= x791 x604) (= x304 x164) (= x446 3) (= x79 x158) (= (<= x440 x444) x179) (= x351 x340) (= 3 x805) (= x458 x803) (= (* x520 3) x68) (= x307 x102) (= x485 3) (= x636 (and x271 x401)) (= x791 x450) (= (<= x79 x493) x310) (= (* x632 3) x65) (= 3 x552) (= (* 3 x312) x403) (= x307 x632) (= (>= x121 x332) x694) (= (and x475 x310) x271) (= x322 (+ x303 x286)) (= x2 x530) (= (<= x450 x322) x475) (= (and x179 x726) x676) (= 3 x714) (= x312 x307) (= (+ x304 x68) x174) (= x93 x307) (= x355 x307) (= x776 (* 3 x102)) (= x121 (+ x340 x65)) (= x31 x351) (= (+ x416 x604) x493) (= x338 x802) (= x381 x2) (= x164 x440)) (= x458 x406)) x155) x424))
(assert (x232 (- x481 x627)))
(assert (x527 x645))
(assert (x527 x433))
(assert (= (x309 22711052170661352172463706074549474602446478010439206087695126111415334600704) (x330 22711052170661352172463706074549474602446478010439206087695126111415334600704)))
(assert (x527 x425))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x752 0)) (and (< (- x752 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x752 1000000000000000000000000000))) (>= x752 (* 1000000000000000000000000000 (x499 x752 1000000000000000000000000000))))) (x46 x752 1000000000000000000000000000) (x700 x752 1000000000000000000000000000) (x634 x752 1000000000000000000000000000) (x476 x752 1000000000000000000000000000)))
(assert (= (and x564 (not x452)) x432))
(assert (x527 x603))
(assert (x232 (- x19 x501)))
(assert (x527 x351))
(assert (x232 (- x785 x627)))
(assert (x527 x200))
(assert (x527 x588))
(assert (= x456 (or x431 x449)))
(assert (= (x309 94699471215667416670508682402181198833950827816622411988269365108481485438976) (x330 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (x527 x106))
(assert (x527 x390))
(assert (x527 x622))
(assert (x467 340282366920938463463374607431768211456))
(assert (x527 x333))
(assert (= x408 (or x84 x47)))
(assert (x647 x501 (- x481 x230)))
(assert (x527 x79))
(assert (x232 (- x785 x231)))
(assert (and (x204 3 x312) (x707 3 x312) (x515 3 x312) (= (* 3 x312) (x125 3 x312)) (x51 3 x312) (and (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x312) (- (* x312 3) (* x312 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 3 (- x312 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x312 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x312 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x312 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x312 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 3 x312)))
(assert (x647 x481 (- x501 x635)))
(assert (x527 x101))
(assert (x527 x250))
(assert (=> (<= x5 10000) (= (x309 x5) (x330 x5))))
(assert (x527 x604))
(assert (x647 x230 (- x635 x200)))
(assert (= (x702 (x330 3607235850)) 3607235850))
(assert (x188 x675))
(assert (and (x204 3 x355) (x707 3 x355) (x515 3 x355) (= (* 3 x355) (x125 3 x355)) (x51 3 x355) (and (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x355) (- (* x355 3) (* x355 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 3 (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 3 x355)))
(assert (= x436 (and x566 x630)))
(assert (x647 x231 (- x60 x635)))
(assert (x647 x501 (- x481 x60)))
(assert (x647 x19 (- x627 x60)))
(assert (and (x204 3 x102) (x707 3 x102) (x515 3 x102) (= (* 3 x102) (x125 3 x102)) (x51 3 x102) (and (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x102) (- (* x102 3) (* x102 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 3 (- x102 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x102 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x102 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x102 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x102 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 3 x102)))
(assert (x90 x333))
(assert (x232 (- x627 x60)))
(assert (x232 (- x60 x481)))
(assert (x527 x253))
(assert (x527 x785))
(assert (x188 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x527 x197))
(assert (x647 x481 (- x501 x231)))
(assert (x232 x632))
(assert (and (= (x125 27 3) 81) (= 81 (x125 9 9)) (= 27 (x125 9 3)) (= 9 (x125 3 3))))
(assert (x527 x209))
(assert (=> (>= 10000 x215) (= (x330 x215) (x309 x215))))
(assert (x188 x620))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x64 (+ (x712 x64 1461501637330902918203684832716283019655932542976) (* (x499 x64 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x139 x64 1461501637330902918203684832716283019655932542976) (x407 x64 1461501637330902918203684832716283019655932542976) (x771 x64 1461501637330902918203684832716283019655932542976)))
(assert (= (and (not x95) x408) x474))
(assert (= (x702 (x330 340282366920938463463374607431768211456)) 340282366920938463463374607431768211456))
(assert (x527 x381))
(assert (x647 x501 (- x481 x19)))
(assert (x527 x213))
(assert (x647 x635 (- x230 x200)))
(assert (x527 x275))
(assert (x527 x257))
(assert (x704 x501 x481 x627 x19))
(assert (x232 (- x627 x481)))
(assert (= x144 (x702 (x309 x144))))
(assert (x704 x635 x230 x785 x200))
(assert (= (and x678 x133) x778))
(assert (x527 x218))
(assert (x527 x340))
(assert (x527 x183))
(assert (x188 x87))
(assert (= (x309 2113256763) (x330 2113256763)))
(assert (x527 x385))
(assert (x232 (- x200 x60)))
(assert (not x141))
(assert (= (or (and x86 (not x761)) x729) x169))
(assert (x467 x806))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x702 (x330 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (x232 (- x231 x501)))
(assert (x527 x735))
(assert (x527 x798))
(assert (=> (>= 10000 x144) (= (x330 x144) (x309 x144))))
(assert (x467 x64))
(assert (x90 340282366920938463463374607431768211455))
(assert (= (and x168 x194) x339))
(assert (x527 x406))
(assert (x527 x260))
(assert (= (and x811 (not x91)) x246))
(assert (x527 x809))
(assert (=> (<= x178 10000) (= (x309 x178) (x330 x178))))
(assert (x527 x483))
(assert (x527 x124))
(assert (x527 x2))
(assert (x647 x231 x60))
(assert (x232 (- x501 x200)))
(assert (x232 (- x231 x230)))
(assert (= (and (not x508) x579) x47))
(assert (x704 x19 x627 x785 x200))
(assert (x37 x670))
(assert (x527 x375))
(assert (x527 x122))
(assert (x704 x501 x481 x200 x785))
(assert (= (x309 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x330 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (= x765 (=> (and (and (and (and (or (and (= x535 0) x631) (and (and (= (x506 128) x60) (< 0 x78) (> 1461501637330902918203684832716283019655932542976 x798) (= (x602 (x125 x231 x60)) x614) (= x177 (< x696 x231)) (>= x798 0) (= (ite x29 1 0) x78) (= x509 x535) (= x696 (x499 115792089237316195423570985008687907853269984665640064039457584007913129639935 x60)) (= (x499 x775 1000000000000000000000000000) x509) (= (= x60 0) x395) (= x29 (or x361 x395)) (>= 1461501637330902918203684832716283019655932542975 x798) (= (x810 (+ 500000000000000000000000000 x614)) x775) (= (not x177) x361)) (not x631))) (and (= (= 0 x231) x631) (= x364 404098525) (= x64 x568) (= x428 x164) (<= 0 x374) (> 2113256763 x364) (<= x374 1461501637330902918203684832716283019655932542975) (not (< x364 404098525)) (> x334 0) (= x374 x468) (>= x626 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (= x334 (x469 (x309 x49))) (= 0 x730) (<= x626 1461501637330902918203684832716283019655932542975) (< x364 826074471) (= x478 x468) (>= x568 0) (= x124 x730) (<= 0 x231) (>= 1461501637330902918203684832716283019655932542975 x568))) (and (= 0 x26) (not (= 157198259 x492)) (>= x622 0) (= x26 x124) (<= x622 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x49) (= x88 x351) (>= x536 0) (= x492 1889567281) (not (= x492 599290589)) (>= x297 0) (<= 0 x621) (not (= x492 404098525)) (= x622 x64) (= (x682 x595) x621) (>= 1461501637330902918203684832716283019655932542975 x536) (= x491 (x469 (x309 x624))) (<= x297 1461501637330902918203684832716283019655932542975) (< 0 x491) (= x595 (x718 (x309 x49) (x330 1) 0)) (= x703 x297) (= x703 x478) (= x428 x621) (<= x621 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (not (= x809 599290589)) (= x478 x35) (<= x308 1461501637330902918203684832716283019655932542975) (<= x808 1461501637330902918203684832716283019655932542975) (= x176 x791) (<= 0 x36) (not (= x809 157198259)) (= x82 x324) (>= x808 0) (>= 1461501637330902918203684832716283019655932542975 x324) (= x808 x64) (<= 0 x308) (= x36 (x682 x650)) (<= x36 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 404098525 x809)) (< 0 x152) (= x650 (x718 (x309 x324) (x330 1) 0)) (= x35 x308) (= x185 0) (= x124 x185) (>= x421 0) (= x36 x88) (<= x421 1461501637330902918203684832716283019655932542975) (= 1889567281 x809) (= x152 (x469 (x309 x624))))) (and (= x427 0) (= x56 x5) (>= x393 0) (= x774 x478) (= x774 x393) (>= x55 0) (= x124 x427) (= x176 x390) (> 340282366920938463463374607431768211456 x390) (not (< x245 404098525)) (> 2113256763 x245) (<= 0 x580) (>= 1461501637330902918203684832716283019655932542975 x580) (>= 1461501637330902918203684832716283019655932542975 x5) (= x526 (x469 (x309 x49))) (= x245 497176382) (<= x390 340282366920938463463374607431768211455) (<= x55 1461501637330902918203684832716283019655932542975) (> x526 0) (< x245 826074471) (>= x390 0) (not (= 404098525 x245)) (= x55 x64) (>= 1461501637330902918203684832716283019655932542975 x393) (= (x592 x343) x390) (= (x718 (x309 x5) (x330 52) 0) x343))) x130)))
(assert (x527 x429))
(assert (x704 x501 x481 x60 x231))
(assert (x527 x301))
(assert (x647 x627 (- x19 x231)))
(assert (= x564 (or x368 x299)))
(assert (x527 x428))
(assert (x704 x19 x627 x60 x231))
(assert (= x594 (or x311 x3)))
(assert (x647 x230 (- x635 x501)))
(assert (x527 x152))
(assert (x232 (- x231 x19)))
(assert (x527 x705))
(assert (x527 x646))
(assert (x704 x60 x231 x19 x627))
(assert (x647 x200 x785))
(assert (x647 x635 (- x230 x60)))
(assert (x527 x690))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x281 0)) (and (< (- x281 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x281 1000000000000000000000000000))) (>= x281 (* 1000000000000000000000000000 (x499 x281 1000000000000000000000000000))))) (x46 x281 1000000000000000000000000000) (x700 x281 1000000000000000000000000000) (x634 x281 1000000000000000000000000000) (x476 x281 1000000000000000000000000000)))
(assert (x527 x684))
(assert (x647 x481 (- x501 x785)))
(assert (x527 x486))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x705 (+ (x712 x705 1461501637330902918203684832716283019655932542976) (* (x499 x705 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x139 x705 1461501637330902918203684832716283019655932542976) (x407 x705 1461501637330902918203684832716283019655932542976) (x771 x705 1461501637330902918203684832716283019655932542976)))
(assert (x704 x627 x19 x635 x230))
(assert (x527 x670))
(assert (x527 x148))
(assert (= true x196))
(assert (x90 x670))
(assert (x734 x501 x481 x635 x230))
(assert (= 2835717307 (x702 (x330 2835717307))))
(assert (= (x309 340282366920938463463374607431768211456) (x330 340282366920938463463374607431768211456)))
(assert (x527 x158))
(assert (x527 x509))
(assert (x527 x150))
(assert (x704 x627 x19 x231 x60))
(assert (x647 x785 (- x200 x635)))
(assert (x527 x542))
(assert (x232 (- x785 x230)))
(assert (x734 x627 x19 x501 x481))
(assert (= (x309 404098525) (x330 404098525)))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x131 0)) (and (< (- x131 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x131 1000000000000000000000000000))) (>= x131 (* 1000000000000000000000000000 (x499 x131 1000000000000000000000000000))))) (x46 x131 1000000000000000000000000000) (x700 x131 1000000000000000000000000000) (x634 x131 1000000000000000000000000000) (x476 x131 1000000000000000000000000000)))
(assert (x527 x297))
(assert (x160 x806))
(assert (x527 x238))
(assert (x734 x200 x785 x627 x19))
(assert (x232 x690))
(assert (x527 x16))
(assert (x527 x123))
(assert (x527 x655))
(assert (= (or (and x293 x480) (and (not x63) x750) x662 x420 (and x140 x653) (and x669 x748)) x311))
(assert (= (=> (and (= x136 (= x711 x49)) (= x711 (x234 1461501637330902918203684832716283019655932542975 x670))) (and (=> (and (and (= x669 (or (and (= true (<= x505 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 64 x505)) (> x505 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (= 157198259 x184)) (= x736 76450787359836037641860180984291677749980919077056822294353438043884394381312) (>= x277 0) (= (x234 1461501637330902918203684832716283019655932542975 x670) x521) (= x184 2835717307) (= x445 320) (> x270 0) (= x505 (x738 (- x295 4))) (not (= 404098525 x184)) (not (= 1889567281 x184)) (= (x469 (x309 x624)) x270) (>= 1461501637330902918203684832716283019655932542975 x277) (> 1461501637330902918203684832716283019655932542976 x277) (= x295 68) (= x521 x259) (not (> 4 x295)) (= x690 x697) (not (= 599290589 x184))) (not x136)) (and (=> (and (and (= true x63) (= x259 x511)) (not x669)) (and (=> (not x63) x654) (=> (and (and (= x653 (< x540 x690)) (<= x540 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x718 (x309 x49) (x330 1) 0) x210) (= x251 x697) (>= x540 0) (= x540 (x546 x210))) x63) (and (=> x653 x654) (=> (and (not x653) (= (> x697 x540) x314)) (and (=> x314 x654) (=> (and (not x314) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x607) (= (x738 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x697)) x457) (<= 0 x607) (= (< x457 x607) x8) (= (x718 (x309 x259) (x330 1) 0) x227) (= (x550 x227) x607) (= x129 (x718 (x309 x49) (x330 1) 0)) (= x279 (x738 (- x540 x697))))) (and (=> (and (and (= x597 (x810 (+ x697 x607))) (= x480 (< x597 x607))) (not x8)) (and (=> (and (and (= 32 x684) (= x106 x731) (= (x718 (x309 x259) (x330 1) 0) x455) (= x405 x563) (= x724 x754) (= x277 x199) (= x215 x725) (= 1 x173)) (not x480)) x142) (=> x480 x654))) (=> x8 x654))))))))) (=> x669 x654))) (=> (and (and (= x273 x215) (= x260 x563) (= x754 x213) (= x425 x106) (= x178 x277)) x136) x206))) x790))
(assert (x232 (- x627 x200)))
(assert (= x624 (x702 (x309 x624))))
(assert (x527 x574))
(assert (x698 x587))
(assert (x704 x635 x230 x627 x19))
(assert (x232 (- x231 x627)))
(assert (= (=> (and (and (or x356 (and (and (not (= x758 0)) (= (x469 (x309 x215)) x758)) (not x356))) (and (= x4 (not x443)) (>= 1461501637330902918203684832716283019655932542975 x555) (= x749 x742) (= x89 x124) (= (x738 (- x646 x192)) x22) (<= x483 1461501637330902918203684832716283019655932542975) (= (x387 x465) x785) (not (< x117 x192)) (= (x718 (x309 x483) (x330 52) 0) x345) (>= x200 0) (>= 1461501637330902918203684832716283019655932542975 x85) (= x13 (x810 (+ x362 x289))) (= x346 (ite x801 1 0)) (= x337 x625) (<= x646 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x794 x735) (= x100 (not x411)) (> 340282366920938463463374607431768211456 x200) (> x122 0) (= (x810 (+ x83 500000000000000000000000000)) x87) (not (> 2113256763 x663)) (= x555 x470) (= x749 (x234 1461501637330902918203684832716283019655932542975 x705)) (not (< x663 3607235850)) (>= x646 0) (>= x555 0) (not (> x531 x409)) (= (x317 x290) x200) (= x83 (x602 (* x200 1000000000000000000000000000))) (= (x234 1461501637330902918203684832716283019655932542975 x64) x794) (>= x16 0) (<= 0 x117) (<= x785 340282366920938463463374607431768211455) (= x281 (x810 (+ 500000000000000000000000000 x193))) (= x470 x478) (= x72 (- x692 x16)) (not (< x663 3018967357)) (< 0 x346) (>= x215 0) (= (or x4 x438) x801) (> 1461501637330902918203684832716283019655932542976 x215) (= (x738 (- x646 x192)) x180) (= (x499 x281 1000000000000000000000000000) x192) (< x117 340282366920938463463374607431768211456) (< x785 340282366920938463463374607431768211456) (= (x499 115792089237316195423570985008687907853269984665640064039457584007913129639935 x785) x462) (= x16 (x317 x484)) (= x547 (x738 (- x409 x531))) (= x82 x146) (= x12 (not x100)) (= x12 x519) (not (< 340282366920938463463374607431768211455 x192)) (= x117 (x317 x345)) (= x483 x56) (= x282 x289) (< 0 x269) (= x531 (x499 x131 1000000000000000000000000000)) (= x443 (> x200 x462)) (<= 0 x574) (<= x200 340282366920938463463374607431768211455) (= x409 (x499 x87 1000000000000000000000000000)) (>= 1461501637330902918203684832716283019655932542975 x146) (= x89 0) (= (x718 (x309 x483) (x330 52) 0) x465) (>= 1461501637330902918203684832716283019655932542975 x215) (>= x85 0) (= x327 (> x200 115792089237316195423570985008687907853269984665640)) (= x500 x378) (= x692 (+ x593 x541)) (= x806 (x738 (- x117 x192))) (= x290 (x718 (x309 x483) (x330 52) 0)) (= (= x72 x97) x586) (= x541 (x234 340282366920938463463374607431768211455 x806)) (= x500 (not x327)) (<= x16 340282366920938463463374607431768211455) (= (> x13 115792089237316195423570985008687907853269984665640) x411) (= x645 (ite x519 1 0)) (<= 0 x785) (<= x117 340282366920938463463374607431768211455) (= (x602 (x125 x200 x785)) x807) (= x64 x85) (= x193 (x602 (* 1000000000000000000000000000 x13))) (<= x574 1461501637330902918203684832716283019655932542975) (= x742 (x234 1461501637330902918203684832716283019655932542975 x64)) (not (> x192 x646)) (= x17 1000000000000000000000000000) (= x356 (= 0 x215)) x586 (= 1000000000000000000000000000 x239) (= x269 (x469 (x309 x49))) (= (x234 1461501637330902918203684832716283019655932542975 x705) x735) (= x581 x400) (= x131 (x810 (+ x807 500000000000000000000000000))) (= x438 (= 0 x785)) (= x484 (x718 (x309 x483) (x330 52) 0)) (= (ite x378 1 0) x122) (= x663 3607235850) (not (= x192 0)) (= x645 0) (= x448 x362))) (= x400 x535)) x300) x130))
(assert (x527 x279))
(assert (x734 x230 x635 x501 x481))
(assert (x647 x501 (- x481 x785)))
(assert (x647 x481 (- x501 x627)))
(assert (x232 3))
(assert (x306 115792089237316195423570985008687907853269984665640064039457584007913129639935 x230))
(assert (x734 x635 x230 x501 x481))
(assert (x527 x7))
(assert (x306 115792089237316195423570985008687907853269984665640064039457584007913129639935 x19))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x702 (x330 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x527 x414))
(assert (x232 (- x60 x635)))
(assert (= (and x392 (not x631)) x701))
(assert (x527 x513))
(assert (= (and x750 x63) x140))
(assert (x527 x366))
(assert (x704 x501 x481 x19 x627))
(assert (x647 x481 (- x501 x230)))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x775 0)) (and (< (- x775 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x775 1000000000000000000000000000))) (>= x775 (* 1000000000000000000000000000 (x499 x775 1000000000000000000000000000))))) (x46 x775 1000000000000000000000000000) (x700 x775 1000000000000000000000000000) (x634 x775 1000000000000000000000000000) (x476 x775 1000000000000000000000000000)))
(assert (x527 x193))
(assert (= (or x369 x225) x579))
(assert (x734 x231 x60 x200 x785))
(assert (x698 x146))
(assert (x527 x163))
(assert (x527 x9))
(assert (x527 x624))
(assert (x527 x320))
(assert (x704 x200 x785 x230 x635))
(assert (= (x309 157198259) (x330 157198259)))
(assert (x232 (- x60 x19)))
(assert (x527 x10))
(assert (x90 x442))
(assert (x527 x85))
(assert (x527 x248))
(assert (x704 x200 x785 x60 x231))
(assert (x704 x627 x19 x501 x481))
(assert (x527 x259))
(assert (x647 x635 (- x230 x19)))
(assert (x306 115792089237316195423570985008687907853269984665640064039457584007913129639935 x785))
(assert (= (and (not x804) x246) x149))
(assert (x527 x696))
(assert (x647 x501 (- x481 x627)))
(assert (x527 x6))
(assert (x527 x447))
(assert (x704 x785 x200 x231 x60))
(assert (x647 x231 (- x60 x481)))
(assert (x527 x1))
(assert (x527 x511))
(assert (x704 x230 x635 x231 x60))
(assert (x90 x64))
(assert (x232 (- x635 x501)))
(assert (x647 x501 x481))
(assert (x232 (- x230 x627)))
(assert (= x611 (and (not x652) x456)))
(assert (x527 x714))
(assert (x527 x505))
(assert (= (and x128 x459) x249))
(assert (x527 x295))
(assert (x527 x409))
(assert (= (and (not x168) x194) x42))
(assert (x527 x173))
(assert (x527 x754))
(assert (= x494 (=> (and (or (and x95 (and (= x466 (x738 (- x655 x301))) (not (> x301 x655)))) (and (not x95) (and (not (< x301 x655)) (= (x738 (- x301 x655)) x760)))) (= (< x301 x655) x95)) x388)))
(assert (= (and x149 (not x154)) x335))
(assert (x232 (- x481 x231)))
(assert (x734 x785 x200 x231 x60))
(assert (x467 x670))
(assert (x232 (- x200 x230)))
(assert (x527 x172))
(assert (x527 x794))
(assert (and (=> (< 0 340282366920938463463374607431768211456) (= x333 (+ (x712 x333 340282366920938463463374607431768211456) (* (x499 x333 340282366920938463463374607431768211456) 340282366920938463463374607431768211456)))) (x139 x333 340282366920938463463374607431768211456) (x407 x333 340282366920938463463374607431768211456) (x771 x333 340282366920938463463374607431768211456)))
(assert (x527 x607))
(assert (x647 x231 (- x60 x19)))
(assert (x734 x635 x230 x200 x785))
(assert (x232 x520))
(assert (= (x702 (x309 x273)) x273))
(assert (x527 x180))
(assert (x704 x785 x200 x19 x627))
(assert (x527 x791))
(assert (x527 x635))
(assert (x232 x230))
(assert (x647 x230 (- x635 x60)))
(assert (= (or x182 x335) x459))
(assert (x527 x199))
(assert (x647 x627 (- x19 x60)))
(assert (x527 x285))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x291 0)) (and (< (- x291 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x291 1000000000000000000000000000))) (>= x291 (* 1000000000000000000000000000 (x499 x291 1000000000000000000000000000))))) (x46 x291 1000000000000000000000000000) (x700 x291 1000000000000000000000000000) (x634 x291 1000000000000000000000000000) (x476 x291 1000000000000000000000000000)))
(assert (= (or x628 (and (not x615) x594)) x207))
(assert (x704 x627 x19 x230 x635))
(assert (x527 x399))
(assert (x232 (- x785 x635)))
(assert (x527 x170))
(assert (x527 x569))
(assert (x734 x481 x501 x231 x60))
(assert (x527 x629))
(assert (x647 x481 (- x501 x19)))
(assert (= 826074471 (x702 (x330 826074471))))
(assert (= x186 1000000000000000000000000000))
(assert (x188 x674))
(assert (= x420 (and x370 x314)))
(assert (x734 x635 x230 x627 x19))
(assert (x527 x264))
(assert (x527 x332))
(assert (x527 x521))
(assert (x527 x270))
(assert (x232 (- x60 x785)))
(assert (x527 x536))
(assert (x704 x635 x230 x231 x60))
(assert (= x259 (x702 (x309 x259))))
(assert (x647 x60 (- x231 x481)))
(assert (x704 x230 x635 x19 x627))
(assert (x704 x627 x19 x60 x231))
(assert (x527 x211))
(assert (x704 x481 x501 x231 x60))
(assert (x527 x782))
(assert (x698 x624))
(assert (x232 (- x635 x785)))
(assert (x704 x785 x200 x230 x635))
(assert (x527 x60))
(assert (x527 x185))
(assert (x527 x497))
(assert (x527 x626))
(assert (x647 x60 (- x231 x230)))
(assert (x527 x273))
(assert (x527 x769))
(assert (x647 x60 (- x231 x785)))
(assert (= (and x95 x408) x252))
(assert (x527 x442))
(assert (x527 x481))
(assert (= (=> (and (= (< x690 x719) x452) (or (and (and (= (x738 (- x719 x690)) x569) (not (> x690 x719))) x452) (and (and (= (x738 (- x690 x719)) x189) (not (< x690 x719))) (not x452)))) x790) x109))
(assert (x527 x445))
(assert (x527 x56))
(assert (x527 x675))
(assert (= 115792089237316195423570985008687907853269984665640 (x702 (x330 115792089237316195423570985008687907853269984665640))))
(assert (= x425 1000000000000000000000000000))
(assert (x527 x75))
(assert (= x617 (and x392 x631)))
(assert (x647 x785 (- x200 x230)))
(assert (x232 (- x481 x60)))
(assert (x527 x64))
(assert (x704 x481 x501 x19 x627))
(assert (= x225 (or x422 x59)))
(assert (x647 x200 (- x785 x481)))
(assert (= x753 1000000000000000000000000000))
(assert (= x134 (and x241 (not x341))))
(assert (x527 x485))
(assert (= x59 (and x524 x207)))
(assert (x734 x200 x785 x501 x481))
(assert (= (x330 3018967357) (x309 3018967357)))
(assert (= (x330 500000000000000000000000000) (x309 500000000000000000000000000)))
(assert (x647 x230 (- x635 x481)))
(assert (x704 x785 x200 x635 x230))
(assert (x647 x19 (- x627 x785)))
(assert (x232 (- x60 x200)))
(assert (x232 (- x231 x785)))
(assert (= (x309 826074471) (x330 826074471)))
(assert (= x610 (or x534 x219)))
(assert (x527 x806))
(assert (x704 x200 x785 x627 x19))
(assert (x188 x685))
(assert (= 1000000000000000000000000000 x487))
(assert (x90 x679))
(assert (=> (>= 10000 x148) (= (x330 x148) (x309 x148))))
(assert (and (x204 1000000000000000000000000000 x200) (x707 1000000000000000000000000000 x200) (x515 1000000000000000000000000000 x200) (= (* 1000000000000000000000000000 x200) (x125 1000000000000000000000000000 x200)) (x51 1000000000000000000000000000 x200) (and (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x200) (- (* x200 1000000000000000000000000000) (* x200 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 1000000000000000000000000000 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000)) (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 1000000000000000000000000000 x200)))
(assert (x647 x19 (- x627 x231)))
(assert (x704 x481 x501 x627 x19))
(assert (= (and x171 x136) x369))
(assert (x647 x635 (- x230 x785)))
(assert (x527 x208))
(assert (x527 x808))
(assert (= (and (not x159) x161) x344))
(assert (x527 x83))
(assert (x188 1000000000000000000000000000))
(assert (= (x702 (x330 497176382)) 497176382))
(assert (x527 x413))
(assert (x527 x291))
(assert (x647 x60 (- x231 x627)))
(assert (x527 x50))
(assert (x527 x35))
(assert (x647 x627 (- x19 x481)))
(assert (x527 x11))
(assert (x704 x635 x230 x60 x231))
(assert (= x731 1000000000000000000000000000))
(assert (x647 x635 x230))
(assert (x527 x268))
(assert (= (or x651 x611) x221))
(assert (x734 x481 x501 x200 x785))
(assert (x527 x753))
(assert (x704 x230 x635 x60 x231))
(assert (= (or (and x151 (not x605)) x784 x518 (and x590 x326) (and x341 x241)) x781))
(assert (x527 x82))
(assert (= (and (not x669) x748) x750))
(assert (x232 x501))
(assert (x527 x15))
(assert (x734 x19 x627 x635 x230))
(assert (and (x204 1000000000000000000000000000 x627) (x707 1000000000000000000000000000 x627) (x515 1000000000000000000000000000 x627) (= (* 1000000000000000000000000000 x627) (x125 1000000000000000000000000000 x627)) (x51 1000000000000000000000000000 x627) (and (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x627) (- (* x627 1000000000000000000000000000) (* x627 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 1000000000000000000000000000 (- x627 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x627 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000000000000)) (= (x125 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x627 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1000000000000000000000000000 (- x627 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x627 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 1000000000000000000000000000 x627)))
(assert (x232 (- x19 x231)))
(assert (x232 x93))
(assert (x527 x531))
(assert (x527 x66))
(assert (x232 (- x627 x230)))
(assert (x527 x55))
(assert (= (or x737 x379) x449))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x620 0)) (and (< (- x620 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x620 1000000000000000000000000000))) (>= x620 (* 1000000000000000000000000000 (x499 x620 1000000000000000000000000000))))) (x46 x620 1000000000000000000000000000) (x700 x620 1000000000000000000000000000) (x634 x620 1000000000000000000000000000) (x476 x620 1000000000000000000000000000)))
(assert (x527 x289))
(assert (x188 x228))
(assert (x527 x545))
(assert (x698 x215))
(assert (= x397 (=> (and (or (not x128) x128) (= x128 (= x75 0))) x672)))
(assert (x734 x19 x627 x231 x60))
(assert (= 1461501637330902918203684832716283019655932542975 (x702 (x330 1461501637330902918203684832716283019655932542975))))
(assert (x734 x231 x60 x635 x230))
(assert (x527 x146))
(assert (= (=> (and (and (and (and (or (and (= 0 x406) x652) (and (not x652) (and (= (x642 128) x230) (= (ite x92 1 0) x248) (<= x383 1461501637330902918203684832716283019655932542975) (< 0 x248) (= x588 (x602 (x125 x635 x230))) (= (x499 x675 1000000000000000000000000000) x394) (= x162 (= x230 0)) (= (or x162 x721) x92) (<= 0 x383) (= x406 x394) (= (> x635 x302) x695) (= x302 (x499 115792089237316195423570985008687907853269984665640064039457584007913129639935 x230)) (> 1461501637330902918203684832716283019655932542976 x383) (= x675 (x810 (+ 500000000000000000000000000 x588))) (= x721 (not x695))))) (and (>= 1461501637330902918203684832716283019655932542975 x250) (= (= x635 0) x652) (= x365 x2) (= 0 x486) (<= 0 x33) (= x486 x124) (= x6 x478) (<= 0 x543) (< 0 x27) (<= x33 1461501637330902918203684832716283019655932542975) (<= 0 x250) (not (> 404098525 x488)) (= x6 x33) (<= x635 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 826074471 x488) (= x64 x543) (<= 0 x635) (> 2113256763 x488) (<= x543 1461501637330902918203684832716283019655932542975) (= x27 (x469 (x309 x49))) (= 404098525 x488))) (and (<= 0 x57) (not (= 599290589 x402)) (= x338 x195) (< 0 x479) (= x510 x124) (= x479 (x469 (x309 x624))) (= (x54 x598) x57) (>= 1461501637330902918203684832716283019655932542975 x439) (not (= x402 404098525)) (<= x57 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1889567281 x402) (<= x582 1461501637330902918203684832716283019655932542975) (not (= x402 157198259)) (= (x718 (x309 x49) (x330 1) 0) x598) (= x439 x64) (>= x709 0) (<= 0 x439) (<= x709 1461501637330902918203684832716283019655932542975) (= x510 0) (= x1 x478) (= x365 x57) (<= x49 1461501637330902918203684832716283019655932542975) (= x582 x1) (<= 0 x582))) (and (= x195 x150) (<= 0 x211) (not (= x264 404098525)) (>= x471 0) (= (x469 (x309 x624)) x745) (<= x99 1461501637330902918203684832716283019655932542975) (= x205 x201) (>= 1461501637330902918203684832716283019655932542975 x211) (= x205 x478) (<= x201 1461501637330902918203684832716283019655932542975) (= x399 x124) (= (x54 x723) x150) (= 0 x399) (not (= 599290589 x264)) (>= x150 0) (= x64 x471) (<= x471 1461501637330902918203684832716283019655932542975) (<= 0 x201) (<= x150 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x264 1889567281) (< 0 x745) (= x723 (x718 (x309 x99) (x330 1) 0)) (= x497 x158) (not (= x264 157198259)) (= x99 x82))) (and (= (x469 (x309 x49)) x710) (>= x732 0) (>= x783 0) (> x710 0) (< x720 340282366920938463463374607431768211456) (not (< x559 404098525)) (= (x786 x71) x720) (= x783 x64) (> 826074471 x559) (<= 0 x244) (>= 1461501637330902918203684832716283019655932542975 x783) (< x559 2113256763) (= x559 497176382) (>= 1461501637330902918203684832716283019655932542975 x732) (= x244 x268) (>= x720 0) (= x163 x124) (= x720 x497) (not (= 404098525 x559)) (= x144 x56) (>= 340282366920938463463374607431768211455 x720) (<= x244 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x144) (= x163 0) (= x268 x478) (= x71 (x718 (x309 x144) (x330 52) 0)))) x424) x757))
(assert (x467 x442))
(assert (x734 x200 x785 x231 x60))
(assert (x647 x230 (- x635 x627)))
(assert (x527 x328))
(assert (x527 x53))
(assert (x527 x27))
(assert (x527 x402))
(assert (x527 x17))
(assert (= 115792089237316195423570985008687907853269984665640064039457584007913129639935 (x702 (x330 115792089237316195423570985008687907853269984665640064039457584007913129639935))))
(assert (x232 (- x785 x501)))
(assert (x527 x30))
(assert (x527 x338))
(assert (x527 x593))
(assert (x527 x36))
(assert (= (or x601 x610) x392))
(assert (x527 x674))
(assert (x527 x195))
(assert (x647 x19 (- x627 x635)))
(assert (x527 x269))
(assert (x232 (- x19 x635)))
(assert (x527 x710))
(assert (x527 x556))
(assert (x188 x785))
(assert (=> (>= 10000 x624) (= (x330 x624) (x309 x624))))
(assert (x647 x635 (- x230 x231)))
(assert (x232 (- x501 x19)))
(assert (x527 x186))
(assert (x527 x803))
(assert (x527 x89))
(assert (x527 x117))
(assert (=> (>= 10000 x587) (= (x330 x587) (x309 x587))))
(assert (x527 x237))
(assert (x527 x471))
(assert (x527 x744))
(assert (x527 x468))
(assert (x704 x19 x627 x200 x785))
(assert (x527 x144))
(assert (x232 x200))
(assert (= (x702 (x309 x483)) x483))
(assert (x704 x200 x785 x501 x481))
(assert (x527 x393))
(assert (= x811 (and x436 (not x537))))
(assert (x527 x679))
(assert (x704 x200 x785 x19 x627))
(assert (x527 x687))
(assert (x527 x224))
(assert (x704 x60 x231 x501 x481))
(assert (x232 (- x230 x231)))
(assert (= (and x761 x86) x729))
(assert (x698 x99))
(assert (= (=> (and (and (= x435 (= 0 x789)) (< 0 x768)) (or (and (not x435) (and (= 32 x789) (= (not x202) x380) (= (ite x380 1 0) x209) (= x202 (= 0 x483)))) (and x435 (and (= x373 (x469 (x309 x277))) (= 1 x209) (> x373 0))))) x727) x795))
(assert (x232 (- x627 x785)))
(assert (x527 x487))
(assert (x647 x19 (- x627 x481)))
(assert (x527 x23))
(assert (x527 x302))
(assert (x232 (- x501 x785)))
(assert (x232 x231))
(assert (x37 x64))
(assert (x704 x60 x231 x230 x635))
(assert (x232 (- x785 x19)))
(assert (x232 (- x200 x501)))
(assert (x527 x440))
(assert (x232 (- x19 x200)))
(assert (= (=> (and (= x798 x528) (> x172 0) (= x231 x504) (= x98 x762)) x765) x572))
(assert (and (x204 3 x632) (x707 3 x632) (x515 3 x632) (= (* 3 x632) (x125 3 x632)) (x51 3 x632) (and (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x632) (- (* x632 3) (* x632 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 3 (- x632 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x632 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x632 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x632 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x632 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 3 x632)))
(assert (x647 x200 (- x785 x19)))
(assert (x527 x775))
(assert (x527 x5))
(assert (x232 1000000000000000000000000000))
(assert (= x442 (x702 (x309 x442))))
(assert (x527 x215))
(assert (x232 (- x785 x60)))
(assert (= (and x590 (not x326)) x161))
(assert (= x370 (and (not x653) x140)))
(assert (x734 x19 x627 x200 x785))
(assert (=> (>= 10000 x277) (= (x330 x277) (x309 x277))))
(assert (= (and x74 x792) x219))
(assert (x647 x501 (- x481 x635)))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x674 0)) (and (< (- x674 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x674 1000000000000000000000000000))) (>= x674 (* 1000000000000000000000000000 (x499 x674 1000000000000000000000000000))))) (x46 x674 1000000000000000000000000000) (x700 x674 1000000000000000000000000000) (x634 x674 1000000000000000000000000000) (x476 x674 1000000000000000000000000000)))
(assert (x734 x785 x200 x635 x230))
(assert (x527 x98))
(assert (x527 x451))
(assert (= (x702 (x330 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (x734 x60 x231 x501 x481))
(assert (x527 x625))
(assert (x734 x60 x231 x635 x230))
(assert (x527 x281))
(assert (x527 x439))
(assert (and (x204 3 x93) (x707 3 x93) (x515 3 x93) (= (* 3 x93) (x125 3 x93)) (x51 3 x93) (and (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x93) (- (* x93 3) (* x93 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x125 3 (- x93 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x93 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x125 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x93 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 3 (- x93 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x93 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x577 3 x93)))
(assert (x527 x530))
(assert (x232 x627))
(assert (x527 x492))
(assert (x698 x49))
(assert (x188 x752))
(assert (x527 x759))
(assert (= 157198259 (x702 (x330 157198259))))
(assert (x527 x283))
(assert (and (=> (< 0 340282366920938463463374607431768211456) (= x679 (+ (x712 x679 340282366920938463463374607431768211456) (* (x499 x679 340282366920938463463374607431768211456) 340282366920938463463374607431768211456)))) (x139 x679 340282366920938463463374607431768211456) (x407 x679 340282366920938463463374607431768211456) (x771 x679 340282366920938463463374607431768211456)))
(assert (x527 x762))
(assert (x232 x355))
(assert (x527 x681))
(assert (x647 x231 (- x60 x785)))
(assert (x647 x481 (- x501 x200)))
(assert (x527 x176))
(assert (= x171 (or x432 x755)))
(assert (x647 x200 (- x785 x231)))
(assert (= x198 (or x42 x339)))
(assert (x232 (- x19 x230)))
(assert (x704 x785 x200 x627 x19))
(assert (x527 x410))
(assert (x527 x720))
(assert (x647 x60 (- x231 x501)))
(assert (x90 x705))
(assert (x704 x230 x635 x200 x785))
(assert (x232 (- x231 x200)))
(assert (= (x330 22707518476531795403804539479547988765414823042645454849778882899012749361152) (x309 22707518476531795403804539479547988765414823042645454849778882899012749361152)))
(assert (x527 x525))
(assert (= (=> (and (= x215 x725) (= x106 x731) (= x426 (x738 (- x646 x183))) (= x199 x277) (= x754 x724) (= 0 x173) (= x147 x684) (= x426 x405)) x142) x654))
(assert (x704 x230 x635 x501 x481))
(assert (x704 x231 x60 x19 x627))
(assert (x734 x230 x635 x231 x60))
(assert (= x668 (and x804 x246)))
(assert (x527 x448))
(assert (x527 x147))
(assert (= x3 (and (not x480) x293)))
(assert (x527 x245))
(assert (= (x309 497176382) (x330 497176382)))
(assert (= 22707518476531795403804539479547988765414823042645454849778882899012749361152 (x702 (x330 22707518476531795403804539479547988765414823042645454849778882899012749361152))))
(assert (= x182 (or (and x114 x641) x153 (and x537 x436) x668 (and x154 x149) (and x630 (not x566)))))
(assert (= x590 (and x605 x151)))
(assert (x527 x643))
(assert (x698 x273))
(assert (x527 x568))
(assert (x527 x187))
(assert (x527 x110))
(assert (x704 x231 x60 x635 x230))
(assert (x527 x685))
(assert (=> (<= x49 10000) (= (x309 x49) (x330 x49))))
(assert (x698 x442))
(assert (x188 x19))
(assert (x527 x686))
(assert (x647 x627 (- x19 x785)))
(assert (x232 (- x481 x200)))
(assert (x527 x697))
(assert (x527 x374))
(assert (x188 x291))
(assert (x704 x230 x635 x481 x501))
(assert (x647 x231 (- x60 x627)))
(assert (x527 x282))
(assert (x704 x60 x231 x627 x19))
(assert (x704 x231 x60 x785 x200))
(assert (x232 (- x481 x230)))
(assert (x188 x60))
(assert (x527 x189))
(assert (x527 x490))
(assert (x527 x446))
(assert (x527 x495))
(assert (x527 x384))
(assert (x734 x785 x200 x501 x481))
(assert (x704 x627 x19 x481 x501))
(assert (= (=> (= (= x146 x49) x584) (and (=> (and x584 (and (= x635 x180) (= x106 x753) (= x277 x383))) x757) (=> (and (and (not (= 1889567281 x643)) (= x570 x146) (= 68 x464) (= x556 320) (>= 1461501637330902918203684832716283019655932542975 x277) (not (= x643 599290589)) (= (x469 (x309 x624)) x447) (= x525 x13) (not (= 404098525 x643)) (not (= 157198259 x643)) (<= 0 x277) (= x53 (x738 (- x464 4))) (= x643 2835717307) (> x447 0) (= (or (> x53 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x53)) (< x53 64))) x133) (< x277 1461501637330902918203684832716283019655932542976) (not (> 4 x464)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x782)) (not x584)) (and (=> (and x133 (and (= x789 x266) (= x323 x277) (= 0 x768) (= x487 x106) (= x67 x429) (= (x738 (- x646 x192)) x67))) x812) (=> (and (not x133) (= true x605)) (and (=> (not x605) x28) (=> (and (and (= x197 x525) (= x482 (x718 (x309 x49) (x330 1) 0)) (<= x360 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x360 0) (= x326 (< x360 x13)) (= x360 (x546 x482))) x605) (and (=> (and (not x326) (= x159 (< x360 x525))) (and (=> x159 x28) (=> (and (not x159) (and (<= x298 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x738 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x525)) x7) (<= 0 x298) (= x386 (x718 (x309 x146) (x330 1) 0)) (= x298 (x190 x386)) (= (> x298 x7) x119) (= (x718 (x309 x49) (x330 1) 0) x561) (= (x738 (- x360 x525)) x94))) (and (=> (and (not x119) (and (= (x810 (+ x525 x298)) x217) (= x341 (< x217 x298)))) (and (=> x341 x28) (=> (and (and (= x180 x429) (= x106 x487) (= x766 (x718 (x309 x146) (x330 1) 0)) (= x277 x323) (= x789 32) (= x768 1)) (not x341)) x812))) (=> x119 x28))))) (=> x326 x28))))))))) x671))
(assert (x232 (- x230 x501)))
(assert (x160 x333))
(assert (x232 x102))
(assert (= (and x508 x579) x84))
(assert (x527 x342))
(assert (x527 x251))
(assert (x647 x231 (- x60 x501)))
(assert (x734 x19 x627 x501 x481))
(assert (x527 x758))
(assert (x527 x247))
(assert (= x755 (and x452 x564)))
(assert (x734 x635 x230 x231 x60))
(assert (x527 x555))
(assert (x704 x19 x627 x481 x501))
(assert (= 1000000000000000000000000000 x762))
(assert (x527 x19))
(assert (x734 x627 x19 x635 x230))
(assert (x527 x337))
(assert (x232 (- x635 x231)))
(assert (x527 x683))
(assert (x232 x60))
(assert (x647 x200 (- x785 x627)))
(assert (x527 x214))
(assert (x698 x277))
(assert (= x630 (and x114 (not x641))))
(assert (=> (>= 10000 x259) (= (x309 x259) (x330 x259))))
(assert (= x812 (=> (and (= (= 0 x768) x761) (or (not x761) x761)) x795)))
(assert (= (x309 115792089237316195423570985008687907853269984665640) (x330 115792089237316195423570985008687907853269984665640)))
(assert (x527 x457))
(assert (x527 x298))
(assert (x527 x491))
(assert (x734 x785 x200 x627 x19))
(assert (x527 x663))
(assert (x527 x426))
(assert (x527 x427))
(assert (x527 x699))
(assert (x734 x60 x231 x200 x785))
(assert (= (x702 (x330 94699471215667416670508682402181198833950827816622411988269365108481485438976)) 94699471215667416670508682402181198833950827816622411988269365108481485438976))
(assert (x734 x231 x60 x627 x19))
(assert (x232 (- x200 x481)))
(assert (=> (>= 10000 x324) (= (x330 x324) (x309 x324))))
(assert (x232 (- x501 x635)))
(assert (= (x330 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x309 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (= x656 (or x252 x474)))
(assert (= x313 (and (not x356) x599)))
(assert (x527 x400))
(assert (x232 (- x19 x785)))
(assert (= (x702 (x309 x148)) x148))
(assert (x527 x376))
(assert (= x49 (x702 (x309 x49))))
(assert (x527 x711))
(assert (x527 x591))
(assert (= (and (not x314) x370) x423))
(assert (x527 x751))
(assert (x527 x547))
(assert (x527 x743))
(assert (x527 x583))
(assert (x527 x178))
(assert (x734 x60 x231 x627 x19))
(assert (x704 x231 x60 x501 x481))
(assert (= x565 (and x599 x356)))
(assert (x527 x244))
(assert (x704 x481 x501 x785 x200))
(assert (and (=> (and (> 1000000000000000000000000000 0) (> x228 0)) (and (< (- x228 1000000000000000000000000000) (* 1000000000000000000000000000 (x499 x228 1000000000000000000000000000))) (>= x228 (* 1000000000000000000000000000 (x499 x228 1000000000000000000000000000))))) (x46 x228 1000000000000000000000000000) (x700 x228 1000000000000000000000000000) (x634 x228 1000000000000000000000000000) (x476 x228 1000000000000000000000000000)))
(assert (x527 x26))
(assert (x527 x732))
(assert (= x554 (=> (and (and (< 0 x173) (= x524 (= 0 x684))) (or (and (and (= x118 (= 0 x442)) (= x254 (not x118)) (= (ite x254 1 0) x522) (= x684 32)) (not x524)) (and (and (= (x469 (x309 x277)) x325) (< 0 x325) (= x522 1)) x524))) x34)))
(assert (x527 x240))
(assert (x527 x205))
(assert (x527 x14))
(assert (x527 x228))
(assert (= x142 (=> (and (or (not x615) x615) (= x615 (= 0 x173))) x554)))
(assert (x232 (- x481 x19)))
(assert (x232 (- x60 x627)))
(assert (= (x309 599290589) (x330 599290589)))
(assert (x527 x514))
(assert (= (x309 3607235850) (x330 3607235850)))
(assert (x734 x501 x481 x231 x60))
(assert (x188 x131))
(assert (x527 x365))
(assert (x527 x20))
(assert (x647 x481 (- x501 x60)))
(assert (= (x330 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x309 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x527 x334))
(assert (x160 x679))
(assert (= 1461501637330902918203684832716283019655932542976 (x702 (x330 1461501637330902918203684832716283019655932542976))))
(assert (x704 x501 x481 x230 x635))
(assert (x527 x725))
(assert (x527 x266))
(assert (x704 x627 x19 x785 x200))
(assert (x704 x785 x200 x60 x231))
(assert (= 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x702 (x330 22402283082756182618670880521465619040657731284550890770856599233457073160192))))
(assert (= 599290589 (x702 (x330 599290589))))
(assert (= (x702 (x309 x99)) x99))
(assert (x527 x620))
(check-sat)
(exit)
