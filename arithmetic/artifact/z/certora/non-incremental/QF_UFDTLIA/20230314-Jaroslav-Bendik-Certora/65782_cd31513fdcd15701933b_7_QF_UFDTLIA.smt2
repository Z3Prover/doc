(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x19 0)) (((x203 (x98 x19) (x111 x19) (x106 Int)) (x12 (x67 Int)) (x291 (x116 x19) (x153 Int)))))
(declare-fun x20 () Bool)
(declare-fun x201 () Int)
(declare-fun x76 () Int)
(declare-fun x74 () Int)
(declare-fun x329 () Int)
(declare-fun x304 () Bool)
(declare-fun x59 () Int)
(declare-fun x224 () Int)
(declare-fun x81 () Bool)
(declare-fun x16 (Int Int) Int)
(declare-fun x184 () Int)
(declare-fun x238 () Int)
(declare-fun x107 () Bool)
(declare-fun x189 () Int)
(declare-fun x44 () Int)
(declare-fun x101 () Bool)
(declare-fun x274 () Bool)
(declare-fun x113 () Int)
(declare-fun x61 () Bool)
(declare-fun x246 () Int)
(declare-fun x117 (x19) Int)
(declare-fun x327 () Int)
(declare-fun x58 (x19) Int)
(declare-fun x272 () Int)
(declare-fun x288 () Int)
(declare-fun x121 () Int)
(declare-fun x140 () Int)
(declare-fun x269 () Bool)
(declare-fun x284 () Int)
(declare-fun x42 (x19) Int)
(declare-fun x258 () Int)
(declare-fun x268 () x19)
(declare-fun x80 () Bool)
(declare-fun x132 () Int)
(declare-fun x96 () Int)
(declare-fun x29 () Bool)
(declare-fun x72 () Bool)
(declare-fun x337 () Int)
(declare-fun x298 (Int Int) Int)
(declare-fun x305 () Int)
(declare-fun x182 () Int)
(declare-fun x168 () Bool)
(declare-fun x160 () Int)
(declare-fun x148 () Int)
(declare-fun x10 () Bool)
(declare-fun x185 () Int)
(declare-fun x197 () Bool)
(declare-fun x296 () Bool)
(declare-fun x250 () Int)
(declare-fun x108 () Int)
(declare-fun x339 () Int)
(declare-fun x17 () Int)
(declare-fun x239 () Bool)
(declare-fun x293 () Int)
(declare-fun x135 () Int)
(declare-fun x322 () x19)
(declare-fun x125 () Int)
(declare-fun x68 () x19)
(declare-fun x83 () Int)
(declare-fun x46 () Int)
(declare-fun x91 () Int)
(declare-fun x357 () Int)
(declare-fun x177 () Int)
(declare-fun x287 () Bool)
(declare-fun x245 () Bool)
(declare-fun x35 () Int)
(declare-fun x170 () Int)
(declare-fun x183 () Bool)
(declare-fun x275 () Bool)
(declare-fun x163 () Int)
(declare-fun x358 () Int)
(declare-fun x319 () Bool)
(declare-fun x323 (Int) Int)
(declare-fun x266 () Bool)
(declare-fun x130 () Bool)
(declare-fun x254 () Int)
(declare-fun x118 () Int)
(declare-fun x86 () Bool)
(declare-fun x33 () Int)
(declare-fun x93 () x19)
(declare-fun x209 () Int)
(declare-fun x249 () Bool)
(declare-fun x150 () Bool)
(declare-fun x73 () Bool)
(declare-fun x286 () Int)
(declare-fun x82 (Int) Int)
(declare-fun x321 () Int)
(declare-fun x316 () Bool)
(declare-fun x253 () Int)
(declare-fun x330 () Int)
(declare-fun x41 () Int)
(declare-fun x152 () Bool)
(declare-fun x199 (Int Int) Int)
(declare-fun x196 () Bool)
(declare-fun x310 () Bool)
(declare-fun x290 () Bool)
(declare-fun x345 () Int)
(declare-fun x32 () Int)
(declare-fun x119 () Int)
(declare-fun x278 () Int)
(declare-fun x103 () Int)
(declare-fun x124 () Int)
(declare-fun x206 (x19) Int)
(declare-fun x174 () Bool)
(declare-fun x23 () Int)
(declare-fun x285 (x19) Int)
(declare-fun x208 () x19)
(declare-fun x307 () Int)
(declare-fun x277 () Int)
(declare-fun x145 () Bool)
(declare-fun x210 () Int)
(declare-fun x187 (x19) Int)
(declare-fun x77 () Int)
(declare-fun x279 () Bool)
(declare-fun x192 () Int)
(declare-fun x3 () Int)
(declare-fun x235 () Bool)
(declare-fun x216 () Int)
(declare-fun x164 () Int)
(declare-fun x276 () Bool)
(declare-fun x230 () Int)
(declare-fun x158 () Int)
(declare-fun x331 () Bool)
(declare-fun x292 () Bool)
(declare-fun x13 () Int)
(declare-fun x222 () Int)
(declare-fun x171 () Int)
(declare-fun x205 () Int)
(declare-fun x138 () Int)
(declare-fun x146 () Int)
(declare-fun x241 () Int)
(declare-fun x127 () Bool)
(declare-fun x104 () Bool)
(declare-fun x360 () Int)
(declare-fun x54 () Int)
(declare-fun x320 () Int)
(declare-fun x30 () Int)
(declare-fun x335 () Int)
(declare-fun x133 (Int) x19)
(declare-fun x217 () Bool)
(declare-fun x219 () Bool)
(declare-fun x157 () Int)
(declare-fun x142 () Int)
(declare-fun x221 () Bool)
(declare-fun x180 () Bool)
(declare-fun x263 () Bool)
(declare-fun x147 () Bool)
(declare-fun x260 () Int)
(declare-fun x324 () Bool)
(declare-fun x50 () Bool)
(declare-fun x228 () Bool)
(declare-fun x315 () Int)
(declare-fun x314 () Int)
(declare-fun x56 () Int)
(declare-fun x173 () Bool)
(declare-fun x154 () Int)
(declare-fun x313 () Int)
(declare-fun x2 (Int Int) Int)
(declare-fun x31 () Bool)
(declare-fun x34 () Int)
(declare-fun x229 () Bool)
(declare-fun x11 () Int)
(declare-fun x75 () Int)
(declare-fun x24 () Int)
(declare-fun x251 () Bool)
(declare-fun x22 () Int)
(declare-fun x194 () Int)
(declare-fun x186 () Bool)
(declare-fun x39 () Bool)
(declare-fun x265 (Int Int) Int)
(declare-fun x341 () Bool)
(declare-fun x128 () Int)
(declare-fun x6 () Int)
(declare-fun x151 () Bool)
(declare-fun x112 () Int)
(declare-fun x211 () Int)
(declare-fun x181 () Int)
(declare-fun x318 () x19)
(declare-fun x70 () Int)
(declare-fun x333 () Bool)
(declare-fun x78 () Int)
(declare-fun x155 () Int)
(declare-fun x336 () Int)
(declare-fun x244 () Int)
(declare-fun x137 () Bool)
(declare-fun x100 () Int)
(declare-fun x348 (Int Int) Int)
(declare-fun x66 () Int)
(declare-fun x347 () Bool)
(declare-fun x175 () Int)
(declare-fun x223 () x19)
(declare-fun x289 () Int)
(declare-fun x165 () Int)
(declare-fun x256 () Int)
(declare-fun x195 () Bool)
(declare-fun x122 () x19)
(declare-fun x115 () Int)
(declare-fun x26 () Int)
(declare-fun x326 () Bool)
(declare-fun x123 () Int)
(declare-fun x204 () Int)
(declare-fun x352 () x19)
(declare-fun x190 () Int)
(declare-fun x7 () x19)
(declare-fun x267 () Int)
(declare-fun x143 () Int)
(declare-fun x344 () Bool)
(declare-fun x356 () x19)
(declare-fun x48 () Bool)
(declare-fun x271 () Bool)
(declare-fun x295 () Bool)
(declare-fun x166 () Int)
(declare-fun x281 () Bool)
(declare-fun x351 () Bool)
(declare-fun x261 () Int)
(declare-fun x227 () Int)
(declare-fun x302 () Int)
(declare-fun x213 () Int)
(declare-fun x300 () Bool)
(declare-fun x60 () Bool)
(declare-fun x105 () x19)
(declare-fun x283 () x19)
(declare-fun x325 () Int)
(declare-fun x64 () Bool)
(declare-fun x114 () Int)
(declare-fun x97 () Int)
(declare-fun x226 () Int)
(declare-fun x126 () Int)
(declare-fun x71 () Int)
(declare-fun x129 () Int)
(declare-fun x306 () x19)
(declare-fun x167 () Bool)
(declare-fun x139 () Int)
(declare-fun x120 () Int)
(declare-fun x65 () Int)
(declare-fun x346 () Bool)
(declare-fun x232 () Int)
(declare-fun x198 () Int)
(declare-fun x340 () Int)
(declare-fun x172 () Bool)
(declare-fun x220 () x19)
(declare-fun x5 () Bool)
(declare-fun x309 () Bool)
(declare-fun x110 () Int)
(declare-fun x243 () Int)
(declare-fun x28 () Int)
(declare-fun x161 () Int)
(declare-fun x40 () Int)
(declare-fun x343 () Bool)
(declare-fun x63 () Bool)
(declare-fun x215 () Int)
(declare-fun x79 () Int)
(declare-fun x102 () Bool)
(declare-fun x51 (x19) Int)
(declare-fun x264 (Int) Int)
(declare-fun x240 () Int)
(declare-fun x212 () Bool)
(declare-fun x207 () x19)
(declare-fun x87 () Int)
(declare-fun x99 () Int)
(declare-fun x233 () Int)
(declare-fun x162 () Bool)
(declare-fun x299 () Int)
(declare-fun x255 () Int)
(declare-fun x88 () Bool)
(declare-fun x257 () Bool)
(declare-fun x55 () Bool)
(declare-fun x95 () Int)
(declare-fun x47 () Int)
(declare-fun x90 () Bool)
(define-fun x188 ((x19 x19) (x89 Int)) x19 (ite ((_ is x291) x19) (x291 (x116 x19) (+ x89 (x153 x19))) (ite ((_ is x203) x19) (x203 (x98 x19) (x111 x19) (+ x89 (x106 x19))) (x12 (+ x89 (x67 x19))))))
(define-fun x45 ((x156 Int)) Int (ite (and (<= 0 x156) (< x156 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x156 (- x156 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x144 ((x156 Int)) Int (ite (and (>= x156 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x156 0)) (+ x156 115792089237316195423570985008687907853269984665640564039457584007913129639936) x156))
(define-fun x131 ((x156 Int)) Int (ite (and (>= x156 0) (< x156 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x156 (ite (and (>= x156 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x156)) (- x156 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x156) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x156)) (+ x156 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x2 x156 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x191 ((x53 Int)) Bool (and (>= x53 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x53)))
(define-fun x252 ((x53 Int) (x25 Int)) Bool (= (x298 x25 x53) (x298 x53 x25)))
(define-fun x247 ((x53 Int) (x25 Int)) Bool (and (=> (and (< x53 0) (< 0 x25)) (< (x298 x53 x25) 0)) (=> (and (< x53 0) (< x25 0)) (< 0 (x298 x53 x25))) (=> (and (< 0 x53) (< x25 0)) (> 0 (x298 x53 x25))) (=> (and (< 0 x53) (> x25 0)) (< 0 (x298 x53 x25)))))
(define-fun x273 ((x53 Int) (x25 Int)) Bool (=> (and (< 0 x53) (< 0 x25)) (= (= x25 (x348 (x131 (x298 x53 x25)) x53)) (< (x298 x53 x25) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x69 ((x53 Int) (x25 Int)) Bool (=> (and (not (= 0 x53)) (not (= x25 0))) (and (= x25 (x348 (x298 x53 x25) x53)) (= x53 (x348 (x298 x53 x25) x25)))))
(define-fun x308 ((x53 Int) (x25 Int)) Bool (=> (and (> x53 0) (< 0 x25)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x298 x53 x25)) (< (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x53) x25))))
(define-fun x94 ((x53 Int) (x25 Int)) Bool (and (= (x131 (x298 (- x53 115792089237316195423570985008687907853269984665640564039457584007913129639936) x25)) (x131 (x298 x53 x25))) (= (x131 (x298 x53 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x131 (x298 x53 x25))) (= (x131 (x298 (- x53 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x131 (x298 x53 x25)))))
(define-fun x9 ((x53 Int) (x25 Int)) Bool (and (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x25) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x25)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x53) (< 0 x53))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x25) (x348 57896044618658097711785492504343953926634992332820282019728792003956564819968 x53)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x298 x53 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x25) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x25)) (and (> x53 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x53 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x348 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x25)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x53)) (<= (x298 (- x53 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 0 x25) (<= x25 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x53) (<= x53 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x53) (x348 57896044618658097711785492504343953926634992332820282019728792003956564819968 x25)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x298 (- x53 115792089237316195423570985008687907853269984665640564039457584007913129639936) x25)))) (=> (and (and (> x53 0) (<= x53 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x25 0) (<= x25 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x348 57896044618658097711785492504343953926634992332820282019728792003956564819967 x25) x53) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x298 x53 x25))))))
(define-fun x332 ((x53 Int) (x25 Int)) Bool (and (x94 x53 x25) (x9 x53 x25) (x273 x53 x25) (x247 x53 x25) (x308 x53 x25) (x252 x53 x25) (x69 x53 x25)))
(define-fun x15 ((x53 Int)) Bool (and (= 0 (x298 0 x53)) (= (x298 x53 0) 0)))
(define-fun x14 ((x53 Int)) Bool (and (= (x298 x53 1) x53) (= (x298 1 x53) x53)))
(define-fun x334 ((x53 Int)) Bool (and (x15 x53) (x14 x53)))
(define-fun x270 ((x53 Int) (x25 Int)) Bool (=> (and (< 0 x53) (> x25 0)) (and (>= (x348 x53 x25) 0) (>= x53 (x348 x53 x25)))))
(define-fun x259 ((x53 Int) (x25 Int)) Bool (=> (and (and (< x25 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 1 x25)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x53) (<= 0 x53))) (and (< (x348 x53 x25) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x348 x53 x25) 0))))
(define-fun x338 ((x53 Int) (x25 Int)) Bool (=> (and (> x53 x25) (> x25 1)) (> x53 (x348 x53 x25))))
(define-fun x134 ((x53 Int) (x25 Int)) Bool (=> (and (> x53 0) (< 0 x25)) (= (> x25 x53) (= 0 (x348 x53 x25)))))
(define-fun x349 ((x53 Int) (x25 Int)) Bool (=> (and (< 0 x25) (< 0 x53)) (and (< (- x53 x25) (x298 (x348 x53 x25) x25)) (<= (x298 (x348 x53 x25) x25) x53))))
(define-fun x312 ((x53 Int) (x25 Int)) Bool (and (x338 x53 x25) (x259 x53 x25) (x270 x53 x25) (x349 x53 x25) (x134 x53 x25)))
(define-fun x49 ((x53 Int)) Bool (= 0 (x348 0 x53)))
(define-fun x193 ((x53 Int)) Bool (= x53 (x348 x53 1)))
(define-fun x84 ((x53 Int)) Bool (=> (not (= 0 x53)) (= 1 (x348 x53 x53))))
(define-fun x57 ((x53 Int)) Bool (and (x84 x53) (x49 x53) (x193 x53)))
(define-fun x21 ((x53 Int)) Bool (and (= (x265 115792089237316195423570985008687907853269984665640564039457584007913129639935 x53) x53) (= (x265 x53 115792089237316195423570985008687907853269984665640564039457584007913129639935) x53)))
(define-fun x136 ((x53 Int)) Bool (and (= (x265 x53 0) 0) (= 0 (x265 0 x53))))
(define-fun x355 ((x53 Int)) Bool (= x53 (x265 x53 x53)))
(define-fun x176 ((x53 Int)) Bool (and (x21 x53) (x355 x53) (x136 x53)))
(define-fun x317 ((x53 Int) (x25 Int)) Bool (= (x265 x25 x53) (x265 x53 x25)))
(define-fun x262 ((x53 Int) (x25 Int)) Bool (and (>= (x265 x53 x25) 0) (=> (>= x25 0) (<= (x265 x53 x25) x25)) (=> (>= x53 0) (>= x53 (x265 x53 x25)))))
(define-fun x248 ((x53 Int) (x25 Int)) Bool (and (x262 x53 x25) (x317 x53 x25)))
(define-fun x4 ((x53 Int)) Bool (= (x265 x53 1461501637330902918203684832716283019655932542975) (x2 x53 1461501637330902918203684832716283019655932542976)))
(define-fun x225 ((x53 Int)) Bool (and (x248 x53 1461501637330902918203684832716283019655932542975) (x4 x53)))
(define-fun x353 ((x53 Int) (x25 Int)) Bool (and (> x25 (x2 x53 x25)) (<= 0 (x2 x53 x25))))
(define-fun x202 ((x53 Int) (x25 Int)) Bool (=> (and (< 0 x25) (>= x53 0)) (= (= (x2 x53 x25) x53) (< x53 x25))))
(define-fun x237 ((x53 Int) (x25 Int)) Bool (=> (and (> x25 0) (and (<= x25 x53) (> (+ x25 x25) x53))) (= (x2 x53 x25) (- x53 x25))))
(define-fun x311 ((x53 Int)) Bool (= 0 (x2 0 x53)))
(define-fun x43 ((x53 Int)) Bool (= (x2 x53 1) 0))
(define-fun x179 ((x53 Int)) Bool (= 0 (x2 x53 x53)))
(define-fun x236 ((x53 Int)) Bool (and (x311 x53) (x179 x53) (x43 x53)))
(define-fun x52 ((x53 Int)) Bool (and (= (x199 x53 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x199 115792089237316195423570985008687907853269984665640564039457584007913129639935 x53) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x297 ((x53 Int)) Bool (and (= x53 (x199 x53 0)) (= x53 (x199 0 x53))))
(define-fun x214 ((x53 Int)) Bool (= x53 (x199 x53 x53)))
(define-fun x359 ((x53 Int)) Bool (and (x52 x53) (x214 x53) (x297 x53)))
(define-fun x159 ((x53 Int) (x25 Int)) Bool (= (x199 x53 x25) (x199 x25 x53)))
(define-fun x218 ((x53 Int) (x25 Int)) Bool (and (=> (>= x53 0) (<= x53 (x199 x53 x25))) (>= (+ x53 x25) (x199 x53 x25)) (=> (>= x25 0) (>= (x199 x53 x25) x25))))
(define-fun x27 ((x53 Int) (x25 Int)) Bool (and (x218 x53 x25) (x159 x53 x25)))
(define-fun x294 ((x231 x19)) Int (ite (= x231 x352) x254 (x58 x231)))
(define-fun x282 ((x231 x19)) Int (ite (= x231 x68) x135 (x294 x231)))
(define-fun x303 ((x231 x19)) Int (ite x80 (x58 x231) (x282 x231)))
(define-fun x62 ((x231 x19)) Int (ite (= x231 x306) x121 (x303 x231)))
(define-fun x37 ((x231 x19)) Int (ite (= x322 x231) x325 (x62 x231)))
(define-fun x169 ((x231 x19)) Int (ite x10 (x303 x231) (ite x102 (x303 x231) (x37 x231))))
(define-fun x8 ((x231 x19)) Int (x117 x231))
(define-fun x234 ((x231 x19)) Int (x187 x231))
(define-fun x109 ((x231 x19)) Int (ite (= x208 x231) x164 (x8 x231)))
(define-fun x200 ((x231 Int)) Int (ite (= x231 128) x56 (x323 x231)))
(define-fun x92 ((x231 Int)) Int (ite (= x231 128) x79 (x200 x231)))
(define-fun x301 ((x231 Int)) Int (ite (= 160 x231) x56 (x92 x231)))
(define-fun x342 ((x231 Int)) Int (ite (= x231 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x301 x231)))
(define-fun x350 ((x231 Int)) Int (ite (= 132 x231) x288 (x342 x231)))
(define-fun x1 ((x231 Int)) Int (ite (= x231 164) x79 (x350 x231)))
(define-fun x354 ((x231 Int)) Int (ite (= x231 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x264 x231)))
(define-fun x141 ((x231 Int)) Int (ite (= 132 x231) x216 (x354 x231)))
(define-fun x149 ((x231 Int)) Int (ite (= x231 164) x201 (x141 x231)))
(define-fun x242 ((x231 Int)) Int (ite (= x231 196) x267 (x149 x231)))
(define-fun x36 ((x53 Int) (x25 Int) (x328 Int) (x280 Int)) Bool (=> (and (<= x53 x328) (>= x280 x25) (<= 0 x25) (<= 0 x53)) (>= (x298 x328 x280) (x298 x53 x25))))
(define-fun x85 ((x53 Int) (x25 Int) (x328 Int) (x280 Int)) Bool (=> (= x328 x53) (= (- (x298 x53 x25) (x298 x328 x280)) (x298 x53 (- x25 x280)))))
(define-fun x18 ((x53 Int)) Bool (=> (and (not (= x53 1461501637330902918203684832716283019655932542975)) (not (= x53 404098525)) (not (= 157198259 x53)) (not (= 117300739 x53)) (not (= 826074471 x53)) (not (= x53 1851080549)) (not (= 2514000705 x53)) (not (= 1889567281 x53)) (not (= x53 1289409798)) (not (= x53 3017275065)) (not (= 3121116754 x53)) (not (= x53 2376452955)) (> x53 10000) (not (= 170435703 x53)) (not (= 599290589 x53)) (not (= x53 3337024914)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x53)) (not (= 2835717307 x53)) (not (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x53)) (not (= x53 330252341)) (not (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x53)) (not (= x53 3026235284))) (not ((_ is x12) (x133 x53)))))
(assert (x191 x77))
(assert (= x157 (x285 (x133 x157))))
(assert (x191 x28))
(assert (x334 x126))
(assert (x191 x240))
(assert (x248 x129 x336))
(assert (= x173 (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x224) (= 68 x78) (= x220 (x203 (x133 x157) (x12 3) 0)) (= x238 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= x59 (x144 (- x65 x79))) (>= x289 0) (= x189 (x144 (- x78 4))) (not (> 4 x78)) (< 0 x360) (= 2835717307 x314) (= 128 x261) (not (= 0 x79)) (<= x289 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 2514000705 x314)) (= x288 x227) (= x219 (or (and (= true (<= x189 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 64 x189)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x189))) (= x157 (x265 1461501637330902918203684832716283019655932542975 x17)) (= (x144 (- x289 x56)) x70) (not (> x79 x65)) (not (< x224 x56)) (not (> 826074471 x314)) (= (x42 (x133 x246)) x360) (<= 0 x65) (= x79 x99) (<= x65 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x109 x220) x224) (not (= 1889567281 x314)) (= (x144 (- x224 x56)) x327) (>= x224 0) (not (= x314 826074471))) (and (=> (and (and (= x44 x227) (= x5 (= x288 x227))) (not x219)) (and (=> (not x5) x50) (=> (and (and (= (< x299 x79) x137) (= x171 x99) (= x356 (x203 (x133 x201) (x12 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x299) (>= x299 0) (= x299 (x303 x356))) x5) (and (=> (and (= (< x299 x99) x152) (not x137)) (and (=> x152 x50) (=> (and (and (= (x144 (- x299 x99)) x121) (= (< x30 x110) x292) (= (x203 (x133 x227) (x12 1) 0) x283) (<= 0 x110) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x110) (= x30 (x144 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x99))) (= x110 (x62 x283)) (= (x203 (x133 x201) (x12 1) 0) x306)) (not x152)) (and (=> x292 x50) (=> (and (not x292) (and (= x130 (> x110 x325)) (= x325 (x45 (+ x110 x99))))) (and (=> (and (not x130) (and (= 1 x258) (= 32 x97) (= x322 (x203 (x133 x227) (x12 1) 0)))) x251) (=> x130 x50))))))) (=> x137 x50))))) (=> (and (and (= 0 x258) (= x97 x76)) x219) x251)))))
(assert (x191 x175))
(assert (x191 x226))
(assert (x36 x267 x126 x56 x65))
(assert (x191 x163))
(assert (x27 x210 x321))
(assert (x191 x194))
(assert (x191 x154))
(assert (x236 x17))
(assert (x191 x320))
(assert (x191 x26))
(assert (= (or x147 x183) x217))
(assert (x191 x255))
(assert (x191 x142))
(assert (x176 x244))
(assert (x18 x157))
(assert (x191 x115))
(assert (x191 x125))
(assert (= x196 (and (not x296) x29)))
(assert (= 599290589 (x285 (x12 599290589))))
(assert (= (x133 117300739) (x12 117300739)))
(assert (x191 x302))
(assert (= x266 (=> (and (and (not (> 3017275065 x46)) (not (= x46 3017275065)) (= x241 x56) (>= 1461501637330902918203684832716283019655932542975 x17) (= x232 x340) (> 3337024914 x46) (>= x22 0) (= x31 (= x216 x17)) (= x216 x22) (= x339 x17) (< 0 x170) (= x340 0) (= x13 x339) (= x132 x17) (not (= x46 3026235284)) (= x170 (x42 (x133 x201))) (<= 0 x83) (= x241 x181) (= x91 x54) (<= x139 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x22) (<= x288 1461501637330902918203684832716283019655932542975) (not (> 2376452955 x46)) (= x54 x83) (= x288 x118) (>= 1461501637330902918203684832716283019655932542975 x83) (= x46 3121116754) (>= x139 0)) (and (= x164 (x45 (+ x96 x161))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x307) (= x272 (x265 x190 x28)) (<= x115 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x307 x267)) (<= 0 x96) (< (+ x161 x115) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x255 x253) (= (ite (= x87 0) 1 0) x113) (= x253 (+ x161 x115)) (= x253 x289) (= x302 (x265 1461501637330902918203684832716283019655932542975 x26)) (= (ite (= x143 1) 1 0) x190) (= x244 (x199 x272 x113)) (= x161 x181) (= x3 x65) (= (x203 (x133 x302) (x12 3) 0) x208) (= x28 (ite (< 31 x87) 1 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x96) (>= x115 0) (= (+ x307 x267) x3) (= x96 (x8 x208)) (= x77 x3) (> x112 0) (>= x307 0) (= (x265 x244 x205) x112))) (and (=> x31 x212) (=> (and (not x31) (and (and (<= 0 x165) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x165) (= x211 (x265 1461501637330902918203684832716283019655932542975 x17)) (= (x203 (x133 x216) x318 0) x207) (= x318 (x203 (x133 x211) (x12 4) 0)) (= (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x165) x281) (= x165 (x234 x207))) (or (and (not x281) (and (not (< x165 x56)) (= (x144 (- x165 x56)) x166) (= (x265 1461501637330902918203684832716283019655932542975 x17) x128))) x281))) x274)))))
(assert (= (x133 3121116754) (x12 3121116754)))
(assert (x176 x336))
(assert (x191 x128))
(assert (x191 x278))
(assert (x332 x65 (- x56 x126)))
(assert (= (and x269 x331) x127))
(assert (x85 x126 x267 x65 x56))
(assert (x191 x118))
(assert (= 1851080549 (x285 (x12 1851080549))))
(assert (= (and x162 x287) x319))
(assert (= (x12 1889567281) (x133 1889567281)))
(assert (= (x12 2376452955) (x133 2376452955)))
(assert (x18 x227))
(assert (x18 x201))
(assert (x191 x11))
(assert (= (x285 (x12 2376452955)) 2376452955))
(assert (x334 (- x267 x56)))
(assert (= x263 (and x167 x281)))
(assert (not x107))
(assert (x334 x267))
(assert (x191 x112))
(assert (x334 (- x65 x126)))
(assert (= 170435703 (x285 (x12 170435703))))
(assert (= (x285 (x12 1289409798)) 1289409798))
(assert (x191 x357))
(assert (= (and x351 (not x39)) x346))
(assert (x191 x345))
(assert (x312 x6 x289))
(assert (x191 x205))
(assert (x176 x258))
(assert (x191 x209))
(assert (x191 x146))
(assert (x191 x336))
(assert (x176 x190))
(assert (x191 x335))
(assert (x225 x17))
(assert (x191 x13))
(assert (x191 x184))
(assert (x191 x307))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x285 (x12 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (and (not x235) x309) x90))
(assert (x191 x337))
(assert (= x10 (or x300 (and x295 x137) (and x130 x316) x180 (and x72 (not x5)))))
(assert (= (x133 3026235284) (x12 3026235284)))
(assert (x27 x272 x113))
(assert (= (and x343 x31) x147))
(assert (x312 x209 x267))
(assert (=> (>= 10000 x177) (= (x12 x177) (x133 x177))))
(assert (x191 x244))
(assert (= (x133 330252341) (x12 330252341)))
(assert (x176 x358))
(assert (= (x12 599290589) (x133 599290589)))
(assert (x36 x126 x267 x56 x65))
(assert (x191 x246))
(assert (x191 x201))
(assert (= (x133 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x12 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (x133 1461501637330902918203684832716283019655932542975) (x12 1461501637330902918203684832716283019655932542975)))
(assert (= 2835717307 (x285 (x12 2835717307))))
(assert (= (x12 170435703) (x133 170435703)))
(assert (x191 x267))
(assert (x191 x17))
(assert (x332 x126 (- x267 x56)))
(assert (x176 x66))
(assert (= (x133 2835717307) (x12 2835717307)))
(assert (= (x133 1289409798) (x12 1289409798)))
(assert (= x287 (and x127 (not x341))))
(assert (x191 x340))
(assert (x191 x155))
(assert (x191 x143))
(assert (= (x12 157198259) (x133 157198259)))
(assert (x191 x305))
(assert (= x212 (=> (and (and (<= 0 x289) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x289) (= (= x289 0) x245)) (or (and (not x245) (and (< 0 x124) (= x124 (x265 x213 x358)) (= x104 (= x56 0)) (= (x348 x6 x56) x163) (>= x65 0) (= (x348 x6 x289) x32) (= x63 (= 0 x289)) (= (x131 (x298 x56 x65)) x6) (= x347 (= x163 x65)) (<= x65 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite (or x347 x104) 1 0) x358) (= x213 (ite (not x63) 1 0)) (= x32 x79))) (and x245 (= x56 x79)))) x173)))
(assert (x18 x175))
(assert (= (x133 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x12 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x191 x108))
(assert (x334 (- x65 x267)))
(assert (=> (<= x246 10000) (= (x12 x246) (x133 x246))))
(assert (x191 x129))
(assert (x191 x66))
(assert (= 3337024914 (x285 (x12 3337024914))))
(assert (x191 x256))
(assert (x191 x100))
(assert (x18 x302))
(assert (= x274 x212))
(assert (x191 x30))
(assert (x332 x65 (- x56 x267)))
(assert (= (and x295 (not x137)) x64))
(assert (x191 x87))
(assert (x191 x224))
(assert (x191 x83))
(assert (x191 x177))
(assert (x191 x243))
(assert (x191 x119))
(assert (= x300 (and x64 x152)))
(assert (= (and (not x60) x346) x150))
(assert (= x20 (and (not x281) x167)))
(assert (= (and x290 (not x292)) x316))
(assert (x191 x59))
(assert (x236 1461501637330902918203684832716283019655932542976))
(assert (x359 x321))
(assert (x191 x360))
(assert (x191 x272))
(assert (x191 x325))
(assert (and (= (x298 3 3) 9) (= 27 (x298 9 3)) (= (x298 9 9) 81) (= 81 (x298 27 3))))
(assert (= (and x245 x217) x221))
(assert (x332 x56 x65))
(assert (x191 x74))
(assert (= (x285 (x12 157198259)) 157198259))
(assert (x191 x65))
(assert (x191 x299))
(assert (x191 x22))
(assert (x191 x181))
(assert (x191 x233))
(assert (x191 x47))
(assert (x18 x211))
(assert (= 1889567281 (x285 (x12 1889567281))))
(assert (x176 1461501637330902918203684832716283019655932542975))
(assert (x334 x65))
(assert (= x167 (and (not x31) x343)))
(assert (x176 x213))
(assert (x191 x132))
(assert (x85 x267 x126 x65 x56))
(assert (x191 x33))
(assert (x191 x166))
(assert (x191 x23))
(assert (x85 x56 x65 x267 x126))
(assert (x57 x56))
(assert (= (x285 (x133 x211)) x211))
(assert (x236 x26))
(assert (= x324 (=> (and (not (= 404098525 x140)) (not (= 157198259 x140)) (> 826074471 x140) (= 128 x148) (= x175 x201) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x11) true) (< x11 96)) (> x11 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x296) (> x278 0) (= x35 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= x267 x230) (not (< x119 4)) (= 100 x119) (= (x144 (- x119 4)) x11) (= x278 (x42 (x133 x246))) (not (= 117300739 x140)) (not (= x161 0)) (= 599290589 x140) (= x305 x177)) (and (=> x296 x172) (=> (and (and (= x74 x177) (= true x73)) (not x296)) (and (=> (and x73 (and (= x185 x175) (= true x331))) (and (=> (and x331 (and (>= x75 0) (= x341 (> x267 x75)) (<= x75 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x335 x230) (= x75 (x58 x7)) (= x7 (x203 (x133 x177) (x12 1) 0)))) (and (=> (and (not x341) (= (< x75 x230) x162)) (and (=> x162 x172) (=> (and (and (= x254 (x144 (- x75 x230))) (= (x144 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x230)) x100) (<= 0 x215) (= (x203 (x133 x177) (x12 1) 0) x352) (= (> x215 x100) x39) (<= x215 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x93 (x203 (x133 x175) (x12 1) 0)) (= x215 (x294 x93))) (not x162)) (and (=> x39 x172) (=> (and (and (= x135 (x45 (+ x230 x215))) (= (> x215 x135) x60)) (not x39)) (and (=> x60 x172) (=> (and (not x60) (and (= x33 (x206 x268)) (= (x203 (x133 x175) (x12 1) 0) x68) (= x268 (x203 (x133 x201) x122 0)) (= x168 (> x230 x33)) (<= x33 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x33) (= (x203 (x133 x177) (x12 2) 0) x122))) (and (=> (and (not x168) (= (> x230 x33) x249)) (and (=> (and (not x249) (and (= x115 x126) (= x87 32) (= (x144 (- x33 x230)) x142) (= x205 1) (= x307 x286))) x229) (=> x249 x172))) (=> x168 x172))))))))) (=> x341 x172))) (=> (not x331) x172))) (=> (not x73) x172)))))))
(assert (x191 x91))
(assert (x191 x124))
(assert (x191 x113))
(assert (x191 x99))
(assert (x332 x56 (- x65 x126)))
(assert (= (and x257 x219) x102))
(assert (x191 x170))
(assert (= x251 (=> (and (= (= 0 x258) x145) (or (not x145) x145)) x239)))
(assert (x334 x56))
(assert (= (x285 (x12 826074471)) 826074471))
(assert (x191 x110))
(assert (x191 x241))
(assert (x191 x161))
(assert (= x50 (=> (and (= x76 x97) (= x258 0)) x251)))
(assert (x248 x213 x358))
(assert (x191 x190))
(assert (x191 x277))
(assert (= (or x80 x197) x279))
(assert (x191 x126))
(assert (x85 x126 x267 x56 x65))
(assert (x18 x216))
(assert (= (x133 3017275065) (x12 3017275065)))
(assert (x191 x158))
(assert (x85 x267 x126 x56 x65))
(assert (x191 x314))
(assert (x36 x56 x65 x267 x126))
(assert (= x172 (=> (and (= x115 x126) (= x286 x307) (= x205 0) (= x329 x87)) x229)))
(assert (= true x309))
(assert (x191 x6))
(assert (= x304 (or x333 (and x186 (not x145)))))
(assert (x191 x250))
(assert (x191 x70))
(assert (x191 x313))
(assert (x191 x138))
(assert (= (and x39 x351) x276))
(assert (= x246 (x285 (x133 x246))))
(assert (= 1461501637330902918203684832716283019655932542975 (x285 (x12 1461501637330902918203684832716283019655932542975))))
(assert (= 3017275065 (x285 (x12 3017275065))))
(assert (=> (<= x216 10000) (= (x12 x216) (x133 x216))))
(assert (x191 x293))
(assert (x191 x34))
(assert (= (or (and (not x61) x279) x275) x343))
(assert (x191 x97))
(assert (x191 x35))
(assert (x191 x46))
(assert (x176 x204))
(assert (x191 x24))
(assert (x85 x65 x56 x267 x126))
(assert (= (x285 (x12 16156842317565293874272834530371880720966471053262404558597773956279093428224)) 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (x191 x330))
(assert (x176 x28))
(assert (= (x285 (x133 x177)) x177))
(assert (= (x12 3337024914) (x133 3337024914)))
(assert (= x72 (and (not x219) x257)))
(assert (= x271 (and (not x168) x150)))
(assert (=> (>= 10000 x201) (= (x133 x201) (x12 x201))))
(assert (x191 x192))
(assert (x332 x267 x126))
(assert (x191 x157))
(assert (x248 x204 x258))
(assert (x359 x210))
(assert (= (x12 1851080549) (x133 1851080549)))
(assert (x191 x79))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x2 x17 1461501637330902918203684832716283019655932542976) (* (x348 x17 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x17)) (x202 x17 1461501637330902918203684832716283019655932542976) (x353 x17 1461501637330902918203684832716283019655932542976) (x237 x17 1461501637330902918203684832716283019655932542976)))
(assert (x191 x284))
(assert (x191 x210))
(assert (x191 x215))
(assert (x191 x135))
(assert (x191 x139))
(assert (x191 x114))
(assert (x191 x41))
(assert (x191 x185))
(assert (x191 x75))
(assert (= (and x316 (not x130)) x88))
(assert (x191 x198))
(assert (x191 x222))
(assert (= x216 (x285 (x133 x216))))
(assert (x191 x216))
(assert (=> (>= 10000 x302) (= (x133 x302) (x12 x302))))
(assert (= 2514000705 (x285 (x12 2514000705))))
(assert (= x201 (x285 (x133 x201))))
(assert (x359 x272))
(assert (x191 x71))
(assert (x191 x289))
(assert (= (=> (and (and (and (= x243 x345) (= x277 x34) (= x34 x198) (= (<= x345 x277) x174)) (and (= (x169 x223) x315) (>= 1461501637330902918203684832716283019655932542975 x201) (>= x315 0) (= x222 1889567281) (= x223 (x203 (x133 x201) (x12 1) 0)) (= x155 x256) (= x198 x315) (< 0 x260) (not (= 826074471 x222)) (= x260 (x42 (x133 x246))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x315) (not (> 826074471 x222)))) (and (= x336 (ite (> x97 31) 1 0)) (> x47 0) (= x256 x79) (= x204 (x199 x210 x321)) (= x129 (ite (= 1 x157) 1 0)) (= (x265 x129 x336) x210) (= (x265 x204 x258) x47) (= (ite (= x97 0) 1 0) x321))) x174) x239))
(assert (x332 x56 (- x65 x267)))
(assert (= (and x309 x235) x86))
(assert (= 330252341 (x285 (x12 330252341))))
(assert (x191 x321))
(assert (= (and x61 x279) x275))
(assert (x18 x177))
(assert (= 404098525 (x285 (x12 404098525))))
(assert (x191 x254))
(assert (x191 x232))
(assert (x191 x95))
(assert (x57 x6))
(assert (x191 x54))
(assert (x332 x126 (- x267 x65)))
(assert (x57 x267))
(assert (x334 (- x126 x65)))
(assert (x176 x17))
(assert (x191 x121))
(assert (x332 x267 (- x126 x56)))
(assert (x191 x182))
(assert (x332 x267 (- x126 x65)))
(assert (x191 x261))
(assert (x334 (- x56 x126)))
(assert (= (and (not x245) x217) x344))
(assert (x191 x227))
(assert (x191 x288))
(assert (= x29 (or x90 x86)))
(assert (=> (>= 10000 x227) (= (x133 x227) (x12 x227))))
(assert (= (or (and (not x331) x269) x276 (and x127 x341) x326 (and x196 (not x73)) x319 (and x60 x346) (and x296 x29) (and x150 x168)) x80))
(assert (= (and x186 x145) x333))
(assert (x312 x6 x56))
(assert (x191 x258))
(assert (= x269 (and x73 x196)))
(assert (x191 x327))
(assert (x191 x286))
(assert (x191 x103))
(assert (= (x285 (x133 x175)) x175))
(assert (x191 x76))
(assert (= (=> (and (and (<= x201 1461501637330902918203684832716283019655932542975) (>= x240 0) (<= 0 x118) (<= x118 1461501637330902918203684832716283019655932542975) x310 (= x310 (< 0 (x42 (x133 x246)))) (>= x160 0) (<= x160 1461501637330902918203684832716283019655932542975) (not (= 170435703 x158)) (<= x357 1461501637330902918203684832716283019655932542975) (= x226 x201) (= x201 x313) (= (not (= x138 x313)) x228) x81 (= x126 x40) x55 (< x158 2376452955) (= x55 (> (x42 (x133 x201)) 0)) (>= 1461501637330902918203684832716283019655932542975 x182) (<= x246 1461501637330902918203684832716283019655932542975) (= x357 x216) (>= 1461501637330902918203684832716283019655932542975 x13) (= x118 x138) (> x201 0) (<= x126 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x330) (< 0 x246) (= (not (= x24 x226)) x81) (not (= x158 330252341)) (<= 0 x357) (<= 0 x103) (not (< x158 170435703)) (<= 0 x126) (= x240 (x51 (x133 x246))) (<= 0 x13) (= x182 x293) (= (x42 (x133 x201)) x330) (= x158 404098525) (>= x182 0) (= x216 x24) x228 (not (= x246 x201)) (= x103 (x51 (x133 x201))) (> 826074471 x158)) (and (and (= (x42 (x133 x246)) x125) (= x105 (x203 (x133 x201) (x12 1) 0)) (= x114 x337) (= (not (= x108 0)) x195) (= 0 x284) (<= x114 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1889567281 x146) (= x114 (x58 x105)) (<= x201 1461501637330902918203684832716283019655932542975) x195 (> x125 0) (<= 0 x114) (not (= 826074471 x146)) (= x108 x40) (not (< x146 826074471))) (and (and (= x267 x41) (>= 1461501637330902918203684832716283019655932542975 x305) (= x184 x194) (not (< x23 826074471)) (= x216 x305) (>= x154 0) (= x23 1851080549) (not (> 1289409798 x23)) (<= x184 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x26) (> x192 0) (= x243 x337) (< x23 2376452955) (= (x42 (x133 x201)) x192) (<= 0 x184) (= x250 0) (= x194 x91) (= x250 x232) (not (= 1289409798 x23)) (<= x154 1461501637330902918203684832716283019655932542975) (>= x126 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x126) (= x118 x26) (= x235 (= 0 x126)) (<= 0 x305)) (or (and (not x235) (and (= (x348 x209 x286) x95) (= (x131 (x298 x267 x126)) x209) (= (= 0 x286) x101) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x286) (= x66 (ite (not x101) 1 0)) (<= 0 x286) (= (x348 x209 x267) x233) (= x123 (x265 x66 x120)) (= x151 (= x267 0)) (> x123 0) (= x95 x161) (= x120 (ite (or x151 x48) 1 0)) (= x48 (= x126 x233)))) (and (= x161 x267) x235))))) x324) x107))
(assert (x57 x286))
(assert (x191 x123))
(assert (= (and x249 x271) x326))
(assert (= (=> (and (or x61 (not x61)) (= (= 0 x205) x61)) x266) x229))
(assert (x57 x289))
(assert (x191 x211))
(assert (x191 x358))
(assert (x248 x66 x120))
(assert (x191 x96))
(assert (x191 x165))
(assert (= x197 (and (not x249) x271)))
(assert (x191 x230))
(assert (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x285 (x12 76450787359836037641860180984291677749980919077056822294353438043884394381312))))
(assert (= (x133 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x12 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (= (or x20 x263) x183))
(assert (x191 x40))
(assert (x191 x44))
(assert (x191 x238))
(assert (x334 (- x267 x65)))
(assert (=> (<= x211 10000) (= (x133 x211) (x12 x211))))
(assert (= (x12 2514000705) (x133 2514000705)))
(assert (x191 x315))
(assert (= (or x88 x10 x102) x186))
(assert (= (x12 404098525) (x133 404098525)))
(assert (= x290 (and (not x152) x64)))
(assert (x176 x26))
(assert (x191 x164))
(assert (x248 x190 x28))
(assert (x191 x148))
(assert (= (x285 (x133 x302)) x302))
(assert (= (x285 (x12 3026235284)) 3026235284))
(assert (x334 (- x56 x267)))
(assert (= (and (not x162) x287) x351))
(assert (x191 x329))
(assert (x191 x56))
(assert (= 3121116754 (x285 (x12 3121116754))))
(assert (x191 x204))
(assert (= x295 (and x5 x72)))
(assert (x191 x171))
(assert (x191 x260))
(assert (x176 x205))
(assert (x36 x65 x56 x267 x126))
(assert (x191 x140))
(assert (x191 x189))
(assert (x57 x209))
(assert (= (x12 826074471) (x133 826074471)))
(assert (x85 x56 x65 x126 x267))
(assert (x248 x244 x205))
(assert (x312 x209 x286))
(assert (x191 x78))
(assert (=> (<= x175 10000) (= (x133 x175) (x12 x175))))
(assert (x191 x160))
(assert (x334 (- x126 x56)))
(assert (x191 x213))
(assert (x225 x26))
(assert (x85 x65 x56 x126 x267))
(assert (x176 x129))
(assert (x191 x120))
(assert (= (or x344 x221) x257))
(assert (= x180 (and x292 x290)))
(assert (x191 x32))
(assert (= (x285 (x12 117300739)) 117300739))
(assert (=> (<= x157 10000) (= (x12 x157) (x133 x157))))
(assert (x191 x339))
(assert (= (x285 (x133 x227)) x227))
(assert (x176 x120))
(assert (x359 x113))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x2 x26 1461501637330902918203684832716283019655932542976) (* (x348 x26 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x26)) (x202 x26 1461501637330902918203684832716283019655932542976) (x353 x26 1461501637330902918203684832716283019655932542976) (x237 x26 1461501637330902918203684832716283019655932542976)))
(assert (x18 x246))
(check-sat)
(exit)
