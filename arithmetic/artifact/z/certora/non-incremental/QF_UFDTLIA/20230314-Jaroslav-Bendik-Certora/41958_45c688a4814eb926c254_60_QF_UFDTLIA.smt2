(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x119 0)) (((x307 (x829 x119) (x6 x119) (x386 Int)) (x46 (x364 Int)) (x751 (x975 x119) (x440 Int)))))
(declare-fun x741 () Int)
(declare-fun x907 () Int)
(declare-fun x127 () Int)
(declare-fun x474 () x119)
(declare-fun x1005 () Int)
(declare-fun x509 () Int)
(declare-fun x145 () Int)
(declare-fun x824 () Bool)
(declare-fun x890 () Int)
(declare-fun x61 () Int)
(declare-fun x395 () Bool)
(declare-fun x804 () Int)
(declare-fun x327 () Bool)
(declare-fun x385 () Bool)
(declare-fun x171 () Int)
(declare-fun x731 () Int)
(declare-fun x574 (Int) Int)
(declare-fun x168 () Int)
(declare-fun x35 () Bool)
(declare-fun x626 () Int)
(declare-fun x835 () Bool)
(declare-fun x1032 () Int)
(declare-fun x921 (Int Int) Int)
(declare-fun x916 () Int)
(declare-fun x519 () Int)
(declare-fun x864 () Int)
(declare-fun x770 () Bool)
(declare-fun x926 () Int)
(declare-fun x749 () Int)
(declare-fun x693 () Int)
(declare-fun x793 () Int)
(declare-fun x223 () Bool)
(declare-fun x717 () x119)
(declare-fun x96 () Bool)
(declare-fun x234 () Int)
(declare-fun x231 () Int)
(declare-fun x659 () Bool)
(declare-fun x912 () Bool)
(declare-fun x167 () Int)
(declare-fun x1040 () Int)
(declare-fun x813 () Bool)
(declare-fun x991 () x119)
(declare-fun x994 (Int) x119)
(declare-fun x599 () Bool)
(declare-fun x267 () x119)
(declare-fun x9 () Int)
(declare-fun x44 () Int)
(declare-fun x296 () Int)
(declare-fun x951 () Bool)
(declare-fun x670 () Bool)
(declare-fun x896 () Bool)
(declare-fun x314 () x119)
(declare-fun x408 () Bool)
(declare-fun x629 () Int)
(declare-fun x778 () Int)
(declare-fun x732 () Int)
(declare-fun x903 () Int)
(declare-fun x936 () x119)
(declare-fun x94 () Bool)
(declare-fun x190 () Int)
(declare-fun x4 () Int)
(declare-fun x669 () Int)
(declare-fun x422 () x119)
(declare-fun x348 () Bool)
(declare-fun x1039 () Bool)
(declare-fun x874 () Int)
(declare-fun x960 () Int)
(declare-fun x898 () Int)
(declare-fun x745 () Int)
(declare-fun x375 () Bool)
(declare-fun x114 () Int)
(declare-fun x182 () Bool)
(declare-fun x935 () Bool)
(declare-fun x397 () Int)
(declare-fun x170 () Int)
(declare-fun x628 () Int)
(declare-fun x321 () Bool)
(declare-fun x404 () Int)
(declare-fun x538 () Bool)
(declare-fun x222 () Bool)
(declare-fun x523 () Bool)
(declare-fun x766 () x119)
(declare-fun x820 () Int)
(declare-fun x400 () Int)
(declare-fun x1059 () Bool)
(declare-fun x476 () Int)
(declare-fun x183 () Int)
(declare-fun x771 () x119)
(declare-fun x692 () Bool)
(declare-fun x109 () Int)
(declare-fun x87 () Bool)
(declare-fun x492 () Bool)
(declare-fun x351 () Int)
(declare-fun x954 () Bool)
(declare-fun x830 (Int Int) Int)
(declare-fun x1045 () Int)
(declare-fun x382 () Int)
(declare-fun x908 () Int)
(declare-fun x163 () Int)
(declare-fun x47 () Bool)
(declare-fun x349 () Int)
(declare-fun x636 (Int) Int)
(declare-fun x646 () Int)
(declare-fun x305 () Int)
(declare-fun x578 () Bool)
(declare-fun x1000 () Int)
(declare-fun x1077 () Bool)
(declare-fun x551 () Int)
(declare-fun x601 () Bool)
(declare-fun x217 () Int)
(declare-fun x711 () Int)
(declare-fun x421 () Bool)
(declare-fun x656 () Int)
(declare-fun x366 () Int)
(declare-fun x802 () Bool)
(declare-fun x581 () Int)
(declare-fun x1046 () Int)
(declare-fun x107 () Bool)
(declare-fun x746 () x119)
(declare-fun x281 () Int)
(declare-fun x336 () Bool)
(declare-fun x971 () Int)
(declare-fun x463 () Int)
(declare-fun x569 () Int)
(declare-fun x417 () Bool)
(declare-fun x853 () Bool)
(declare-fun x261 () Bool)
(declare-fun x148 () Int)
(declare-fun x138 () Int)
(declare-fun x101 () Bool)
(declare-fun x344 () Bool)
(declare-fun x878 () x119)
(declare-fun x311 () Bool)
(declare-fun x1072 () Int)
(declare-fun x524 () Int)
(declare-fun x451 () Bool)
(declare-fun x161 () Int)
(declare-fun x510 () Bool)
(declare-fun x67 () Int)
(declare-fun x627 () x119)
(declare-fun x227 () Int)
(declare-fun x553 () Int)
(declare-fun x147 () Int)
(declare-fun x280 () Bool)
(declare-fun x487 () Int)
(declare-fun x172 () Int)
(declare-fun x240 () Int)
(declare-fun x1080 () Bool)
(declare-fun x718 () Int)
(declare-fun x654 () x119)
(declare-fun x97 () Bool)
(declare-fun x484 () Int)
(declare-fun x77 () Bool)
(declare-fun x929 () Bool)
(declare-fun x493 () Int)
(declare-fun x10 () Bool)
(declare-fun x678 () x119)
(declare-fun x554 () Int)
(declare-fun x613 () Bool)
(declare-fun x63 () Int)
(declare-fun x221 () Bool)
(declare-fun x952 () Int)
(declare-fun x229 () Int)
(declare-fun x851 () x119)
(declare-fun x373 () Int)
(declare-fun x285 () Int)
(declare-fun x40 () Int)
(declare-fun x632 () Bool)
(declare-fun x74 () Int)
(declare-fun x1028 () Int)
(declare-fun x135 () Int)
(declare-fun x776 () Int)
(declare-fun x316 () Int)
(declare-fun x1082 () Int)
(declare-fun x939 () Bool)
(declare-fun x980 () Int)
(declare-fun x188 () Int)
(declare-fun x497 () Int)
(declare-fun x754 () Int)
(declare-fun x641 () Int)
(declare-fun x797 () Bool)
(declare-fun x490 () Int)
(declare-fun x431 () Int)
(declare-fun x747 () Int)
(declare-fun x737 () Int)
(declare-fun x917 () Int)
(declare-fun x264 () Bool)
(declare-fun x407 () Int)
(declare-fun x359 () Int)
(declare-fun x843 () Int)
(declare-fun x567 () x119)
(declare-fun x520 () Bool)
(declare-fun x779 () x119)
(declare-fun x855 () Int)
(declare-fun x42 () Bool)
(declare-fun x156 () Bool)
(declare-fun x605 () Int)
(declare-fun x806 () x119)
(declare-fun x43 () Int)
(declare-fun x822 () Bool)
(declare-fun x178 () Bool)
(declare-fun x568 () Bool)
(declare-fun x212 () Bool)
(declare-fun x880 () Int)
(declare-fun x1002 () Int)
(declare-fun x1049 (Int) Int)
(declare-fun x801 (x119) Int)
(declare-fun x71 () x119)
(declare-fun x55 () Bool)
(declare-fun x95 () Bool)
(declare-fun x649 () Int)
(declare-fun x1024 () Int)
(declare-fun x752 () Int)
(declare-fun x269 () Int)
(declare-fun x863 () Int)
(declare-fun x1066 () Bool)
(declare-fun x448 () Int)
(declare-fun x660 () Int)
(declare-fun x454 () Bool)
(declare-fun x367 () x119)
(declare-fun x1060 () Bool)
(declare-fun x506 () Int)
(declare-fun x833 () Bool)
(declare-fun x45 () Bool)
(declare-fun x481 () Int)
(declare-fun x852 () x119)
(declare-fun x657 () Int)
(declare-fun x642 () Int)
(declare-fun x734 () Int)
(declare-fun x673 () Int)
(declare-fun x560 () Int)
(declare-fun x590 () Int)
(declare-fun x202 () Int)
(declare-fun x282 () Bool)
(declare-fun x82 () Int)
(declare-fun x938 () Int)
(declare-fun x210 () Int)
(declare-fun x784 () Bool)
(declare-fun x842 () Bool)
(declare-fun x955 () Int)
(declare-fun x976 () x119)
(declare-fun x1021 () x119)
(declare-fun x886 () Int)
(declare-fun x91 () Int)
(declare-fun x984 () Bool)
(declare-fun x392 () Int)
(declare-fun x333 () Int)
(declare-fun x671 () Int)
(declare-fun x834 () Bool)
(declare-fun x675 () Bool)
(declare-fun x184 (x119) Int)
(declare-fun x522 () Int)
(declare-fun x1029 () Bool)
(declare-fun x566 () Bool)
(declare-fun x1044 (Int Int) Int)
(declare-fun x420 () Bool)
(declare-fun x683 () Bool)
(declare-fun x310 () Bool)
(declare-fun x79 () Int)
(declare-fun x658 () Int)
(declare-fun x614 () Int)
(declare-fun x193 () x119)
(declare-fun x447 (Int) Int)
(declare-fun x276 () Bool)
(declare-fun x209 () Bool)
(declare-fun x700 () Bool)
(declare-fun x818 () Int)
(declare-fun x704 () Int)
(declare-fun x850 () Bool)
(declare-fun x1053 () Int)
(declare-fun x132 (Int) Int)
(declare-fun x200 () Int)
(declare-fun x89 () Bool)
(declare-fun x604 () x119)
(declare-fun x765 () Int)
(declare-fun x134 () Int)
(declare-fun x412 () Bool)
(declare-fun x1054 () Bool)
(declare-fun x13 () x119)
(declare-fun x203 () Int)
(declare-fun x667 () x119)
(declare-fun x196 () x119)
(declare-fun x1063 () Bool)
(declare-fun x1026 () Int)
(declare-fun x988 () Int)
(declare-fun x973 () Bool)
(declare-fun x622 () Bool)
(declare-fun x1031 () Int)
(declare-fun x78 () Int)
(declare-fun x530 () Int)
(declare-fun x682 () Bool)
(declare-fun x1075 () Int)
(declare-fun x559 () Int)
(declare-fun x322 () Int)
(declare-fun x293 () Int)
(declare-fun x714 () Bool)
(declare-fun x957 () Bool)
(declare-fun x961 () Int)
(declare-fun x909 () Int)
(declare-fun x130 (Int) Int)
(declare-fun x706 () x119)
(declare-fun x685 () Int)
(declare-fun x73 () Int)
(declare-fun x730 () Int)
(declare-fun x550 () Int)
(declare-fun x713 () Int)
(declare-fun x435 () Int)
(declare-fun x434 () Int)
(declare-fun x289 () Int)
(declare-fun x309 () Int)
(declare-fun x513 () Int)
(declare-fun x571 () Int)
(declare-fun x722 () Bool)
(declare-fun x504 () Int)
(declare-fun x884 () Int)
(declare-fun x502 () Bool)
(declare-fun x881 () x119)
(declare-fun x86 () Bool)
(declare-fun x354 () Int)
(declare-fun x176 () Int)
(declare-fun x993 () Bool)
(declare-fun x403 () Int)
(declare-fun x940 (Int Int) Int)
(declare-fun x272 () Bool)
(declare-fun x143 () x119)
(declare-fun x815 () Int)
(declare-fun x405 () Bool)
(declare-fun x274 () Int)
(declare-fun x402 () x119)
(declare-fun x494 () Int)
(declare-fun x433 () Int)
(declare-fun x339 () Int)
(declare-fun x913 () Int)
(declare-fun x868 () Int)
(declare-fun x696 () x119)
(declare-fun x756 () Int)
(declare-fun x800 () Int)
(declare-fun x254 () Int)
(declare-fun x1037 (Int Int) Int)
(declare-fun x923 () Int)
(declare-fun x247 () Bool)
(declare-fun x902 () Bool)
(declare-fun x821 () Int)
(declare-fun x547 () Bool)
(declare-fun x235 () Bool)
(declare-fun x413 () Int)
(declare-fun x548 () Bool)
(declare-fun x51 () Int)
(declare-fun x499 () Bool)
(declare-fun x253 () Int)
(declare-fun x294 () Int)
(declare-fun x920 () Int)
(declare-fun x539 () Int)
(declare-fun x112 () Int)
(declare-fun x543 () Bool)
(declare-fun x248 () Bool)
(declare-fun x966 () Int)
(declare-fun x338 () Int)
(declare-fun x368 () Bool)
(declare-fun x32 () Int)
(declare-fun x113 () Int)
(declare-fun x329 () Int)
(declare-fun x777 () Bool)
(declare-fun x347 () Int)
(declare-fun x651 () Int)
(declare-fun x290 () Int)
(declare-fun x68 () Bool)
(declare-fun x609 () Bool)
(declare-fun x99 () Int)
(declare-fun x287 () Bool)
(declare-fun x624 () Int)
(declare-fun x956 () Bool)
(declare-fun x893 () Int)
(declare-fun x744 () Int)
(declare-fun x213 () x119)
(declare-fun x1065 () Int)
(declare-fun x106 () Int)
(declare-fun x748 () Int)
(declare-fun x576 () Bool)
(declare-fun x503 () x119)
(declare-fun x950 () x119)
(declare-fun x410 () x119)
(declare-fun x488 () Int)
(declare-fun x521 () Bool)
(declare-fun x360 () Int)
(declare-fun x674 () x119)
(declare-fun x1018 () Int)
(declare-fun x399 () Int)
(declare-fun x286 () Int)
(declare-fun x301 () Bool)
(declare-fun x905 () Int)
(declare-fun x552 () Int)
(declare-fun x812 () x119)
(declare-fun x370 () Bool)
(declare-fun x5 () Int)
(declare-fun x528 () Bool)
(declare-fun x483 () Int)
(declare-fun x1022 () Bool)
(declare-fun x789 () Int)
(declare-fun x429 () Bool)
(declare-fun x268 () Int)
(declare-fun x983 () Int)
(declare-fun x62 () Int)
(declare-fun x925 () Bool)
(declare-fun x516 () Int)
(declare-fun x894 () Int)
(declare-fun x827 () Bool)
(declare-fun x320 () Bool)
(declare-fun x869 () Int)
(declare-fun x39 () Bool)
(declare-fun x546 () Int)
(declare-fun x211 () Bool)
(declare-fun x1069 () Int)
(declare-fun x393 () Bool)
(declare-fun x252 () Bool)
(declare-fun x585 () Int)
(declare-fun x807 () Int)
(declare-fun x326 () Int)
(declare-fun x391 () Int)
(declare-fun x858 () x119)
(declare-fun x1047 () Int)
(declare-fun x390 () Int)
(declare-fun x371 () Bool)
(declare-fun x695 () Int)
(declare-fun x224 () Bool)
(declare-fun x16 () Bool)
(declare-fun x166 () Int)
(declare-fun x825 (Int) Int)
(declare-fun x88 () Int)
(declare-fun x313 () Int)
(declare-fun x733 () x119)
(declare-fun x652 () Int)
(declare-fun x17 () Int)
(declare-fun x972 () Bool)
(declare-fun x505 () Int)
(declare-fun x355 () Int)
(declare-fun x536 () x119)
(declare-fun x712 () Int)
(declare-fun x564 () Int)
(declare-fun x246 () Bool)
(declare-fun x736 () Bool)
(declare-fun x31 () x119)
(declare-fun x612 () Int)
(declare-fun x619 () Bool)
(declare-fun x862 () Bool)
(declare-fun x901 () Bool)
(declare-fun x927 () Bool)
(declare-fun x331 (x119) Int)
(declare-fun x698 () Int)
(declare-fun x598 () x119)
(declare-fun x875 () x119)
(declare-fun x140 () Int)
(declare-fun x579 () Int)
(declare-fun x707 () Bool)
(declare-fun x558 () Int)
(declare-fun x424 () Int)
(declare-fun x545 () Int)
(declare-fun x495 () Bool)
(declare-fun x681 () Bool)
(declare-fun x948 () x119)
(declare-fun x775 () Int)
(declare-fun x719 () Int)
(declare-fun x12 () x119)
(declare-fun x90 () Int)
(declare-fun x365 () Bool)
(declare-fun x54 () Int)
(declare-fun x396 () Int)
(declare-fun x764 () Int)
(declare-fun x458 () Bool)
(declare-fun x924 () Bool)
(declare-fun x181 () Bool)
(declare-fun x720 () Int)
(declare-fun x867 () Int)
(declare-fun x477 () Int)
(declare-fun x982 () Int)
(declare-fun x111 () Int)
(declare-fun x205 () Bool)
(declare-fun x742 () Int)
(declare-fun x607 () Int)
(declare-fun x439 () Int)
(declare-fun x787 () x119)
(declare-fun x179 () Int)
(declare-fun x450 () Bool)
(declare-fun x780 () Bool)
(declare-fun x489 () x119)
(declare-fun x124 () Int)
(declare-fun x831 () Int)
(declare-fun x197 () Bool)
(declare-fun x1057 () Int)
(declare-fun x340 () Bool)
(declare-fun x185 () Int)
(declare-fun x300 () Bool)
(declare-fun x292 () Bool)
(declare-fun x630 () Bool)
(declare-fun x1064 () Int)
(declare-fun x840 () Int)
(declare-fun x783 () x119)
(declare-fun x1030 () Bool)
(declare-fun x1025 () Int)
(declare-fun x263 () Int)
(declare-fun x1050 () Int)
(declare-fun x606 () Int)
(declare-fun x232 () Int)
(declare-fun x409 () Int)
(declare-fun x455 () Int)
(declare-fun x1056 () Int)
(declare-fun x662 () Bool)
(declare-fun x189 () x119)
(declare-fun x378 () Int)
(declare-fun x346 () x119)
(declare-fun x555 () Int)
(declare-fun x839 () Int)
(declare-fun x426 () Int)
(declare-fun x595 () Bool)
(declare-fun x931 () Int)
(declare-fun x987 () Int)
(declare-fun x379 () Bool)
(declare-fun x123 () Bool)
(declare-fun x75 () Int)
(declare-fun x432 () Bool)
(declare-fun x129 () Bool)
(declare-fun x933 (Int) Int)
(declare-fun x238 () Int)
(declare-fun x1003 () Bool)
(declare-fun x337 () Int)
(declare-fun x387 () Int)
(declare-fun x59 () Int)
(declare-fun x708 () Int)
(declare-fun x257 () Int)
(declare-fun x72 () Int)
(declare-fun x457 () Int)
(declare-fun x941 () Bool)
(declare-fun x537 () x119)
(declare-fun x531 () Int)
(declare-fun x144 () Bool)
(declare-fun x897 () Int)
(declare-fun x319 () Bool)
(declare-fun x634 () Int)
(declare-fun x573 () Bool)
(declare-fun x846 () Bool)
(declare-fun x739 () Int)
(declare-fun x1042 () Int)
(declare-fun x427 () Int)
(declare-fun x597 () Bool)
(declare-fun x117 () Int)
(declare-fun x353 () Bool)
(declare-fun x861 () Bool)
(declare-fun x108 (Int) Int)
(declare-fun x1074 () Int)
(declare-fun x962 () Bool)
(declare-fun x173 () Bool)
(declare-fun x152 () Bool)
(declare-fun x533 () Int)
(declare-fun x518 () Bool)
(declare-fun x637 () Bool)
(declare-fun x1027 () Bool)
(declare-fun x774 () Int)
(declare-fun x819 () Bool)
(declare-fun x721 () x119)
(declare-fun x459 () Int)
(declare-fun x799 () Int)
(declare-fun x66 () Int)
(declare-fun x24 () Int)
(declare-fun x496 () Int)
(declare-fun x53 () Int)
(declare-fun x164 () Bool)
(declare-fun x680 () Int)
(declare-fun x482 () Bool)
(declare-fun x1038 () Int)
(declare-fun x577 () Int)
(declare-fun x803 () x119)
(declare-fun x985 () Int)
(declare-fun x1083 () Bool)
(declare-fun x27 () Int)
(declare-fun x394 () Bool)
(declare-fun x149 () Int)
(declare-fun x291 () Bool)
(declare-fun x1073 () Int)
(declare-fun x949 () Int)
(declare-fun x534 () Int)
(declare-fun x974 () Int)
(declare-fun x782 () Bool)
(declare-fun x259 () Int)
(declare-fun x335 () Int)
(declare-fun x769 (Int) Int)
(declare-fun x103 () Bool)
(declare-fun x618 () Int)
(declare-fun x750 () Bool)
(declare-fun x485 () Int)
(declare-fun x699 () Bool)
(declare-fun x947 () Int)
(declare-fun x277 () Bool)
(declare-fun x29 () Int)
(declare-fun x249 () x119)
(declare-fun x753 () Int)
(declare-fun x1061 () Int)
(declare-fun x977 () x119)
(declare-fun x640 () Int)
(declare-fun x491 () Int)
(declare-fun x83 () Int)
(declare-fun x444 () Int)
(declare-fun x631 () Bool)
(declare-fun x18 () x119)
(declare-fun x384 () Int)
(declare-fun x672 () Bool)
(declare-fun x297 () Bool)
(declare-fun x466 () Bool)
(declare-fun x946 () Int)
(declare-fun x1067 () Int)
(declare-fun x715 () Bool)
(declare-fun x92 () Int)
(declare-fun x194 () Bool)
(declare-fun x295 () Bool)
(declare-fun x443 () Bool)
(declare-fun x1058 () Int)
(declare-fun x241 () Int)
(declare-fun x19 () Int)
(declare-fun x462 () Int)
(declare-fun x206 () Int)
(declare-fun x798 () Int)
(declare-fun x866 () Int)
(declare-fun x1087 () Int)
(declare-fun x52 () Int)
(declare-fun x155 () Bool)
(declare-fun x177 () x119)
(declare-fun x1008 () Bool)
(declare-fun x1079 () x119)
(declare-fun x727 () Int)
(declare-fun x464 () Int)
(declare-fun x57 () Int)
(declare-fun x116 () Int)
(declare-fun x362 () Int)
(declare-fun x436 () Int)
(declare-fun x915 () Int)
(declare-fun x406 () Bool)
(declare-fun x1070 () Bool)
(declare-fun x1034 () Int)
(declare-fun x36 () Int)
(declare-fun x805 () x119)
(declare-fun x877 () Int)
(declare-fun x762 () Bool)
(declare-fun x611 () Bool)
(declare-fun x288 () Int)
(declare-fun x1076 () x119)
(declare-fun x25 () Int)
(declare-fun x175 () Int)
(declare-fun x958 (x119) Int)
(declare-fun x557 () Int)
(declare-fun x703 () Bool)
(declare-fun x258 () Bool)
(declare-fun x795 () Bool)
(declare-fun x304 () x119)
(declare-fun x110 () Int)
(declare-fun x136 () Bool)
(declare-fun x790 (Int) Int)
(declare-fun x469 () Bool)
(declare-fun x151 () Bool)
(declare-fun x588 () Int)
(declare-fun x724 () Bool)
(declare-fun x1035 () x119)
(declare-fun x978 () x119)
(declare-fun x158 () Int)
(declare-fun x352 (Int) Int)
(declare-fun x841 () Int)
(declare-fun x758 () Int)
(declare-fun x81 () Int)
(declare-fun x162 () Int)
(declare-fun x832 () Int)
(declare-fun x328 () x119)
(declare-fun x817 () Int)
(declare-fun x473 () Int)
(declare-fun x343 () Bool)
(declare-fun x990 () x119)
(declare-fun x302 () x119)
(declare-fun x635 () Bool)
(declare-fun x580 () Bool)
(declare-fun x586 () Int)
(declare-fun x792 () Int)
(declare-fun x514 () Int)
(declare-fun x334 (Int) Int)
(declare-fun x995 () Int)
(declare-fun x58 () Bool)
(declare-fun x1013 () Int)
(declare-fun x56 () x119)
(declare-fun x602 () Int)
(declare-fun x600 () Bool)
(declare-fun x437 () Bool)
(declare-fun x245 () Int)
(declare-fun x610 () x119)
(declare-fun x856 () Bool)
(declare-fun x381 () x119)
(declare-fun x810 () Int)
(declare-fun x763 () Int)
(declare-fun x472 () Int)
(declare-fun x414 () Int)
(declare-fun x275 () Bool)
(declare-fun x1055 () Int)
(declare-fun x214 () Int)
(declare-fun x932 () Int)
(declare-fun x1041 () Bool)
(declare-fun x220 () x119)
(declare-fun x508 () Bool)
(declare-fun x33 () Bool)
(declare-fun x157 () Bool)
(declare-fun x645 () Bool)
(declare-fun x122 () Bool)
(declare-fun x303 () Int)
(declare-fun x725 () Bool)
(declare-fun x266 () Int)
(declare-fun x372 () Bool)
(declare-fun x871 () Bool)
(declare-fun x318 () Int)
(declare-fun x512 () Int)
(declare-fun x849 () Bool)
(declare-fun x942 () Int)
(declare-fun x242 () Bool)
(declare-fun x653 () Int)
(declare-fun x617 () Bool)
(declare-fun x323 () Int)
(declare-fun x679 () Int)
(declare-fun x694 () x119)
(declare-fun x904 () x119)
(declare-fun x146 () Int)
(declare-fun x889 () Bool)
(declare-fun x786 () Int)
(declare-fun x1071 () Bool)
(declare-fun x1052 () Int)
(declare-fun x1084 () Bool)
(declare-fun x639 () Int)
(declare-fun x312 () Int)
(declare-fun x308 () Int)
(declare-fun x270 () Int)
(declare-fun x1011 () Int)
(declare-fun x702 () Int)
(declare-fun x442 () Int)
(declare-fun x891 () Bool)
(declare-fun x885 () Int)
(declare-fun x1068 () Int)
(declare-fun x1014 () Int)
(declare-fun x65 () Bool)
(declare-fun x620 () Int)
(declare-fun x603 () Int)
(declare-fun x887 () Int)
(declare-fun x828 () Int)
(declare-fun x710 () Int)
(declare-fun x64 () Bool)
(declare-fun x1016 () x119)
(declare-fun x30 () Int)
(declare-fun x934 () Int)
(declare-fun x899 () Int)
(declare-fun x796 () Int)
(declare-fun x876 () Int)
(declare-fun x425 () Bool)
(declare-fun x582 () Bool)
(declare-fun x655 () Int)
(declare-fun x34 () Bool)
(declare-fun x593 () Bool)
(declare-fun x446 () Int)
(declare-fun x419 () Int)
(declare-fun x517 () x119)
(declare-fun x237 () Int)
(declare-fun x616 () Bool)
(declare-fun x1086 (Int) Int)
(declare-fun x142 () Bool)
(declare-fun x1001 () Int)
(declare-fun x48 () Bool)
(declare-fun x772 () x119)
(declare-fun x661 () x119)
(declare-fun x15 (Int) Int)
(declare-fun x201 () Bool)
(declare-fun x922 () x119)
(declare-fun x139 () Int)
(declare-fun x854 () Bool)
(declare-fun x141 () Bool)
(declare-fun x160 () Bool)
(declare-fun x845 () Int)
(declare-fun x153 () Int)
(declare-fun x174 () x119)
(declare-fun x836 () Bool)
(declare-fun x243 () Int)
(declare-fun x969 () x119)
(declare-fun x341 () Int)
(declare-fun x453 () Bool)
(declare-fun x126 () x119)
(declare-fun x345 () Int)
(declare-fun x541 () Int)
(declare-fun x999 () Int)
(declare-fun x3 () Int)
(declare-fun x621 () Bool)
(declare-fun x596 () Bool)
(declare-fun x740 () Bool)
(declare-fun x226 () Int)
(declare-fun x910 () Bool)
(declare-fun x28 () x119)
(declare-fun x299 () Int)
(declare-fun x37 () Int)
(declare-fun x478 () Bool)
(declare-fun x838 () Bool)
(declare-fun x430 () Bool)
(declare-fun x757 () Int)
(declare-fun x647 () Int)
(declare-fun x215 () Int)
(declare-fun x471 () Bool)
(declare-fun x823 () Int)
(declare-fun x1062 () Bool)
(declare-fun x689 () Int)
(declare-fun x981 () Bool)
(declare-fun x1019 () Int)
(declare-fun x895 () Bool)
(declare-fun x688 () x119)
(declare-fun x465 () x119)
(declare-fun x1 () Bool)
(declare-fun x814 () Bool)
(declare-fun x228 () Int)
(declare-fun x964 () Bool)
(declare-fun x21 () x119)
(declare-fun x837 () Bool)
(declare-fun x218 () Bool)
(declare-fun x265 () Int)
(declare-fun x131 () Bool)
(declare-fun x872 () Bool)
(declare-fun x677 () Bool)
(declare-fun x60 () Int)
(declare-fun x1015 () Bool)
(declare-fun x847 () Int)
(declare-fun x204 () Int)
(declare-fun x859 () Int)
(declare-fun x225 () Int)
(declare-fun x461 () Int)
(declare-fun x860 () Int)
(declare-fun x278 () Int)
(declare-fun x638 () Bool)
(declare-fun x1085 () Int)
(declare-fun x562 () Bool)
(declare-fun x26 () x119)
(declare-fun x358 () x119)
(declare-fun x50 () Bool)
(declare-fun x970 () Int)
(declare-fun x115 () Int)
(declare-fun x298 () Bool)
(declare-fun x919 () Bool)
(declare-fun x928 () Int)
(declare-fun x14 () Int)
(declare-fun x383 () Int)
(declare-fun x239 () Bool)
(declare-fun x198 () Int)
(declare-fun x1081 () Int)
(declare-fun x967 () Bool)
(declare-fun x468 () Bool)
(declare-fun x665 () Bool)
(declare-fun x100 () Int)
(declare-fun x1006 () Bool)
(declare-fun x709 () Bool)
(declare-fun x615 () x119)
(declare-fun x423 () Bool)
(declare-fun x207 () Int)
(declare-fun x572 () Int)
(declare-fun x342 () x119)
(declare-fun x415 () Int)
(declare-fun x2 () Int)
(declare-fun x663 () Int)
(declare-fun x1033 () Bool)
(declare-fun x723 (x119) Int)
(declare-fun x529 () Bool)
(declare-fun x479 () Bool)
(declare-fun x809 () Int)
(declare-fun x691 () Bool)
(declare-fun x540 () Int)
(declare-fun x575 () x119)
(declare-fun x811 () Bool)
(declare-fun x377 () Bool)
(declare-fun x556 () Int)
(declare-fun x625 () Int)
(declare-fun x684 () Bool)
(declare-fun x1004 () Int)
(declare-fun x233 () Bool)
(declare-fun x633 () Bool)
(declare-fun x452 () Int)
(declare-fun x591 () Int)
(declare-fun x98 () Int)
(declare-fun x165 () Int)
(declare-fun x284 () Bool)
(declare-fun x953 () Int)
(declare-fun x705 () Int)
(declare-fun x544 () Int)
(declare-fun x535 () Int)
(declare-fun x219 () Bool)
(declare-fun x882 () Int)
(declare-fun x93 () Bool)
(declare-fun x623 () Int)
(declare-fun x70 () Int)
(declare-fun x526 () Bool)
(declare-fun x501 () Int)
(declare-fun x1043 () Bool)
(declare-fun x686 () Bool)
(declare-fun x728 () Int)
(declare-fun x664 () Bool)
(declare-fun x180 () Int)
(declare-fun x105 () Bool)
(declare-fun x918 () x119)
(declare-fun x608 (Int) Int)
(declare-fun x121 () Bool)
(declare-fun x816 () Bool)
(declare-fun x759 () Int)
(declare-fun x118 () Bool)
(declare-fun x441 () Int)
(declare-fun x870 () Int)
(declare-fun x418 () x119)
(declare-fun x735 () Int)
(declare-fun x979 () Int)
(declare-fun x570 () Bool)
(declare-fun x1009 () x119)
(declare-fun x11 () Bool)
(declare-fun x1036 () Int)
(declare-fun x773 () Bool)
(declare-fun x76 () Bool)
(declare-fun x648 () Bool)
(declare-fun x199 () Int)
(declare-fun x532 () Int)
(declare-fun x989 () Bool)
(declare-fun x738 () Int)
(declare-fun x781 () Int)
(declare-fun x561 () Int)
(declare-fun x992 () Int)
(declare-fun x965 () Int)
(declare-fun x911 () Int)
(declare-fun x191 () Int)
(declare-fun x527 () Int)
(declare-fun x668 () Bool)
(declare-fun x456 () Int)
(declare-fun x944 () Bool)
(declare-fun x486 () Bool)
(declare-fun x306 () Bool)
(declare-fun x416 () x119)
(declare-fun x873 () Int)
(declare-fun x169 () Int)
(declare-fun x475 () Int)
(declare-fun x260 () Bool)
(declare-fun x41 () Int)
(declare-fun x498 () Int)
(declare-fun x1010 () Int)
(declare-fun x888 () Int)
(declare-fun x650 () Int)
(declare-fun x244 () Bool)
(declare-fun x187 () Bool)
(declare-fun x186 () Int)
(declare-fun x262 () Int)
(declare-fun x943 () Bool)
(declare-fun x460 () Int)
(declare-fun x154 () Int)
(declare-fun x363 () Bool)
(declare-fun x542 () Int)
(declare-fun x788 () Int)
(declare-fun x900 () Bool)
(declare-fun x125 () Int)
(declare-fun x449 () x119)
(declare-fun x256 () Int)
(declare-fun x883 () Int)
(declare-fun x38 () Bool)
(declare-fun x937 () Int)
(declare-fun x251 () Bool)
(declare-fun x350 () Int)
(declare-fun x120 () Bool)
(declare-fun x848 () x119)
(declare-fun x767 () Int)
(declare-fun x500 () Int)
(declare-fun x401 () Int)
(declare-fun x195 () Bool)
(declare-fun x470 () Bool)
(declare-fun x467 (Int) Int)
(declare-fun x892 () Bool)
(declare-fun x563 () Bool)
(declare-fun x283 () Int)
(declare-fun x389 () Int)
(declare-fun x945 () x119)
(declare-fun x643 () Int)
(declare-fun x1048 () Bool)
(declare-fun x761 () Bool)
(declare-fun x279 () Bool)
(declare-fun x583 () Bool)
(declare-fun x594 () Int)
(declare-fun x998 () Bool)
(declare-fun x325 () Bool)
(declare-fun x968 () Bool)
(declare-fun x128 () Int)
(declare-fun x760 () Bool)
(declare-fun x23 () x119)
(declare-fun x959 () x119)
(declare-fun x726 () Bool)
(declare-fun x104 () Int)
(declare-fun x1007 () Bool)
(declare-fun x137 () Int)
(declare-fun x356 () Int)
(declare-fun x565 () Int)
(declare-fun x515 () Int)
(declare-fun x388 () Int)
(declare-fun x1020 () Int)
(declare-fun x794 () Int)
(declare-fun x768 () Int)
(declare-fun x7 () Int)
(declare-fun x997 () Int)
(declare-fun x1023 () Int)
(declare-fun x743 () Bool)
(declare-fun x1078 () x119)
(declare-fun x250 () x119)
(declare-fun x914 () Int)
(declare-fun x791 () Int)
(declare-fun x208 () Int)
(define-fun x376 ((x119 x119) (x589 Int)) x119 (ite ((_ is x751) x119) (x751 (x975 x119) (+ x589 (x440 x119))) (ite ((_ is x307) x119) (x307 (x829 x119) (x6 x119) (+ x589 (x386 x119))) (x46 (+ (x364 x119) x589)))))
(define-fun x963 ((x150 Int)) Int (ite (and (>= x150 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x150)) x150 (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x584 ((x150 Int)) Int (ite (and (> 0 x150) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x150)) (+ x150 115792089237316195423570985008687907853269984665640564039457584007913129639936) x150))
(define-fun x438 ((x150 Int)) Int (ite (and (<= 0 x150) (< x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x150 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x150) (>= x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x150) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x150)) (+ x150 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x785 ((x374 Int)) Bool (and (<= 0 x374) (< x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x8 ((x374 Int)) Bool (and (= (x921 x374 115792089237316195423570985008687907853269984665640564039457584007913129639935) x374) (= x374 (x921 115792089237316195423570985008687907853269984665640564039457584007913129639935 x374))))
(define-fun x411 ((x374 Int)) Bool (and (= 0 (x921 x374 0)) (= (x921 0 x374) 0)))
(define-fun x20 ((x374 Int)) Bool (= (x921 x374 x374) x374))
(define-fun x507 ((x374 Int)) Bool (and (x8 x374) (x20 x374) (x411 x374)))
(define-fun x644 ((x374 Int) (x808 Int)) Bool (= (x921 x374 x808) (x921 x808 x374)))
(define-fun x1017 ((x374 Int) (x808 Int)) Bool (and (=> (>= x808 0) (<= (x921 x374 x808) x808)) (=> (<= 0 x374) (<= (x921 x374 x808) x374)) (>= (x921 x374 x808) 0)))
(define-fun x398 ((x374 Int) (x808 Int)) Bool (and (x1017 x374 x808) (x644 x374 x808)))
(define-fun x271 ((x374 Int)) Bool (= (x921 x374 1461501637330902918203684832716283019655932542975) (x830 x374 1461501637330902918203684832716283019655932542976)))
(define-fun x324 ((x374 Int)) Bool (and (x398 x374 1461501637330902918203684832716283019655932542975) (x271 x374)))
(define-fun x49 ((x374 Int) (x808 Int)) Bool (and (>= (x830 x374 x808) 0) (> x808 (x830 x374 x808))))
(define-fun x192 ((x374 Int) (x808 Int)) Bool (=> (and (< 0 x808) (>= x374 0)) (= (< x374 x808) (= x374 (x830 x374 x808)))))
(define-fun x879 ((x374 Int) (x808 Int)) Bool (=> (and (> x808 0) (and (>= x374 x808) (> (+ x808 x808) x374))) (= (x830 x374 x808) (- x374 x808))))
(define-fun x525 ((x374 Int)) Bool (= 0 (x830 0 x374)))
(define-fun x729 ((x374 Int)) Bool (= 0 (x830 x374 1)))
(define-fun x701 ((x374 Int)) Bool (= (x830 x374 x374) 0))
(define-fun x716 ((x374 Int)) Bool (and (x729 x374) (x701 x374) (x525 x374)))
(define-fun x80 ((x374 Int) (x808 Int)) Bool (=> (and (< 0 x374) (< 0 x808)) (= (< (x1044 x374 x808) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x940 (x438 (x1044 x374 x808)) x374) x808))))
(define-fun x697 ((x374 Int) (x808 Int)) Bool (=> (and (not (= 0 x808)) (not (= x374 0))) (and (= x808 (x940 (x1044 x374 x808) x374)) (= x374 (x940 (x1044 x374 x808) x808)))))
(define-fun x445 ((x374 Int) (x808 Int)) Bool (=> (and (< 0 x808) (< 0 x374)) (= (> x808 (x940 115792089237316195423570985008687907853269984665640564039457584007913129639935 x374)) (> (x1044 x374 x808) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x369 ((x374 Int) (x808 Int)) Bool (and (= (x438 (x1044 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x808 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x438 (x1044 x374 x808))) (= (x438 (x1044 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) x808)) (x438 (x1044 x374 x808))) (= (x438 (x1044 x374 (- x808 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x438 (x1044 x374 x808)))))
(define-fun x865 ((x374 Int) (x808 Int)) Bool (and (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x808) (> x808 0)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374) (< 0 x374))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x1044 x374 x808)) (<= x374 (x940 57896044618658097711785492504343953926634992332820282019728792003956564819967 x808)))) (=> (and (and (> x808 0) (<= x808 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x374 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x374 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x940 57896044618658097711785492504343953926634992332820282019728792003956564819968 x808) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x374)) (>= (x1044 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) x808) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x808) (> x808 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 0 x374) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374))) (= (>= (x940 57896044618658097711785492504343953926634992332820282019728792003956564819968 x374) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x808)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x1044 x374 (- x808 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x808) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x808)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x374) (> x374 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x1044 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x808 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x940 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x808)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x374))))))
(define-fun x755 ((x374 Int)) Bool (and (= 0 (x1044 x374 0)) (= (x1044 0 x374) 0)))
(define-fun x102 ((x374 Int)) Bool (and (= (x1044 x374 1) x374) (= (x1044 1 x374) x374)))
(define-fun x826 ((x374 Int)) Bool (and (x102 x374) (x755 x374)))
(define-fun x357 ((x374 Int) (x808 Int)) Bool (=> (and (> x808 0) (< 0 x374)) (and (<= (x940 x374 x808) x374) (<= 0 (x940 x374 x808)))))
(define-fun x361 ((x374 Int) (x808 Int)) Bool (=> (and (and (< x808 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x808 1)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x374) (>= x374 0))) (and (< (x940 x374 x808) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x940 x374 x808) 0))))
(define-fun x676 ((x374 Int) (x808 Int)) Bool (=> (and (< 1 x808) (< x808 x374)) (> x374 (x940 x374 x808))))
(define-fun x230 ((x374 Int) (x808 Int)) Bool (=> (and (< 0 x374) (> x808 0)) (= (> x808 x374) (= 0 (x940 x374 x808)))))
(define-fun x133 ((x374 Int)) Bool (= (x940 0 x374) 0))
(define-fun x273 ((x374 Int)) Bool (= x374 (x940 x374 1)))
(define-fun x906 ((x374 Int)) Bool (=> (not (= x374 0)) (= 1 (x940 x374 x374))))
(define-fun x844 ((x374 Int)) Bool (and (x906 x374) (x273 x374) (x133 x374)))
(define-fun x380 ((x666 Int)) Int (ite (= x666 128) x1025 (x933 x666)))
(define-fun x22 ((x666 Int)) Int (ite (= x666 128) x1025 (x636 x666)))
(define-fun x480 ((x666 Int)) Int (ite (= 128 x666) x1025 (x574 x666)))
(define-fun x549 ((x666 Int)) Int (ite (= 128 x666) x1025 (x1086 x666)))
(define-fun x332 ((x666 Int)) Int (ite (= 128 x666) x1025 (x334 x666)))
(define-fun x428 ((x666 Int)) Int (ite (= x666 128) x1025 (x790 x666)))
(define-fun x236 ((x666 Int)) Int (ite (= x666 128) x1025 (x1049 x666)))
(define-fun x592 ((x666 Int)) Int (ite (= x666 128) x1025 (x132 x666)))
(define-fun x216 ((x666 x119)) Int (ite (= x666 x328) x312 (x723 x666)))
(define-fun x1051 ((x666 x119)) Int (ite x637 (x723 x666) (x216 x666)))
(define-fun x330 ((x666 Int)) Int (ite (= 128 x666) x1025 (x130 x666)))
(define-fun x930 ((x666 Int)) Int (ite (= x666 128) x1025 (x15 x666)))
(define-fun x996 ((x666 Int)) Int (ite (= 128 x666) x1025 (x608 x666)))
(define-fun x857 ((x666 Int)) Int (ite (= x666 128) x1025 (x108 x666)))
(define-fun x84 ((x666 Int)) Int (ite (= 128 x666) x1025 (x352 x666)))
(define-fun x255 ((x666 Int)) Int (ite (= 128 x666) x1025 (x467 x666)))
(define-fun x986 ((x666 Int)) Int (ite (= 128 x666) x1025 (x825 x666)))
(define-fun x159 ((x666 Int)) Int (ite (= x666 128) x1025 (x769 x666)))
(define-fun x85 ((x374 Int)) Bool (=> (and (not (= x374 1250999895)) (not (= x374 1461501637330902918203684832716283019655932542975)) (not (= x374 2485876314)) (not (= x374 701022898)) (not (= x374 954915356)) (not (= x374 1729973928)) (not (= x374 1572751336)) (not (= 3686129278 x374)) (> x374 10000) (not (= x374 2429653569)) (not (= x374 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (not ((_ is x46) (x994 x374)))))
(assert (= (=> (and (>= x899 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x899) x538 (= x899 (x958 x878)) (= (x751 (x46 0) 0) x661) (= (not (< 224 x623)) x802) (= (x940 (x438 (- (x184 x878) (x184 x661))) 1) x448) (= (> 1461501637330902918203684832716283019655932542975 x899) x538)) (and x802 x136)) x613))
(assert (x785 x1040))
(assert (= x634 (x184 (x994 x634))))
(assert (= (=> (and (and (= 128 x626) (= (x592 128) x25) (= x476 128) (= x528 (< x815 x25))) (or (and x528 (and x797 (= x498 x350) (= x948 (x751 (x46 0) 0)) (< x815 x1025) (= (x958 x449) x350) (= (> 1461501637330902918203684832716283019655932542975 x350) x797) (= (x376 x948 x815) x449) (= x3 0) (<= 0 x350) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x350) (= 0 x908))) (and (not x528) (= 0 x498)))) x700) x849))
(assert (x785 x113))
(assert (let ((x374 (x438 (- (x184 x812) (x184 x787))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= (=> (and (and (and (= x662 (not (= 0 x655))) (= x550 x942) (< 0 x231) (not (> 1729973928 x607)) (= x169 x1000) (>= 1461501637330902918203684832716283019655932542975 x169) (= 0 x17) (= x607 1729973928) (>= x655 0) (= (x801 (x994 x1081)) x231) (= (x307 (x994 x169) (x46 1) 0) x733) (= x356 0) (= (x723 x733) x655) (<= x655 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (or (and (and (>= x1061 0) (= x506 x624) (= x730 0) (= x191 0) (= x897 (x584 (- x1061 1))) (<= x1061 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x307 (x994 x169) (x46 1) 0) x803) (= (x963 (+ 1 x897)) x624) (not (< x1061 1)) (= x1061 (x723 x803))) x662) (and (= 0 x506) (not x662)))) (= x942 x198)) x1008) x35))
(assert (let ((x374 (x438 (- (x184 x31) (x184 x654))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x823))
(assert (x785 x591))
(assert (= x1030 (=> (and (= x313 (x958 x250)) (= (not (< 224 x431)) x64) x935 (= (x751 (x46 0) 0) x936) (= x935 (< x313 1461501637330902918203684832716283019655932542975)) (<= 0 x313) (= (x940 (x438 (- (x184 x250) (x184 x936))) 1) x512) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x313)) (and x64 x421))))
(assert (x716 (- (x184 x721) (x184 x746))))
(assert (x844 (x438 (- (x184 x717) (x184 x772)))))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x9 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x9 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x9)) (x49 x9 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x9 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x9 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x844 (x438 (- (x184 x189) (x184 x193)))))
(assert (x785 x512))
(assert (x785 x51))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x389 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x389 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x389)) (x49 x389 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x389 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x389 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x785 x128))
(assert (x785 x705))
(assert (=> (>= 10000 x148) (= (x994 x148) (x46 x148))))
(assert (x785 x531))
(assert (= x725 (and (not x164) x47)))
(assert (let ((x374 (- (x184 x189) (x184 x193)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (let ((x374 (- (x184 x969) (x184 x126)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x424))
(assert (x785 x1032))
(assert (x785 x753))
(assert (x785 x214))
(assert (x85 x462))
(assert (= x835 (and x429 (not x363))))
(assert (= x631 (or x784 (and x425 x929))))
(assert (x785 x955))
(assert (x785 x737))
(assert (x85 x634))
(assert (= (and x528 x486) x375))
(assert (= (=> (and (= (x958 x674) x571) (= (not (< 224 x501)) x645) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x571) (= x160 (< x571 1461501637330902918203684832716283019655932542975)) (>= x571 0) x160 (= x322 (x940 (x438 (- (x184 x674) (x184 x1035))) 1)) (= x1035 (x751 (x46 0) 0))) (and x984 x645)) x181))
(assert (x785 x1004))
(assert (= x454 (=> (and (and (and (= 1729973928 x360) (not (> 1729973928 x360)) (= (x801 (x994 x1081)) x712) (= (- x516 1) x326) (= 0 x115) (= x516 x268) (= 1 x590) (<= 0 x680) (<= x971 1461501637330902918203684832716283019655932542975) (= x565 (x438 x326)) (= x94 (not (= 0 x680))) (= x971 x92) (= x680 (x723 x1016)) (<= x680 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1016 (x307 (x994 x971) (x46 1) 0)) (> x712 0) (= x256 0)) (or (and (= 0 x920) (not x94)) (and x94 (and (= x1082 0) (= (x307 (x994 x971) (x46 1) 0) x474) (not (> 1 x533)) (<= x533 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x723 x474) x533) (= 0 x384) (<= 0 x533) (= (x584 (- x533 1)) x903) (= x713 (x963 (+ 1 x903))) (= x920 x713))))) (and (= (x159 128) x557) (= x737 128) (= x983 128) (= x268 x557))) x889)))
(assert (x785 x415))
(assert (x785 x560))
(assert (x785 x821))
(assert (x785 x14))
(assert (= (or x954 x97) x429))
(assert (x85 x1081))
(assert (x785 x462))
(assert (= x1084 (and (not x622) x298)))
(assert (x785 x641))
(assert (= x377 x107))
(assert (x785 x204))
(assert (x785 x200))
(assert (= (and (not x824) x1060) x340))
(assert (= (=> (and (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505) (= 0 x775) (= x754 (ite x529 1 0)) x235 (= (not (= x179 x496)) x856) (= (not x209) x529) (= x505 (x723 x615)) (= x937 x1000) (= x153 (x801 (x994 x1081))) (= x874 0) (= x209 (not x58)) (not (= x960 1250999895)) (not (= x960 701022898)) (= x58 (not (= 0 x505))) (= x1000 x519) (= x179 x498) (<= 0 x505) (>= 1461501637330902918203684832716283019655932542975 x937) (< 0 x153) (> 1729973928 x960) (= x960 1572751336) (not (= 954915356 x960)) (= x615 (x307 (x994 x937) (x46 1) 0)) (= x235 (or (not x699) x856)) (= x92 x1001) (= (not (= x519 x1001)) x583)) (and (and (or (and (and (= x932 0) (= x572 (x584 (- x270 1))) (<= x270 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x885 x739) (= x270 (x723 x575)) (= 0 x1013) (not (> 1 x270)) (= (x307 (x994 x1040) (x46 1) 0) x575) (= (x963 (+ x572 1)) x739) (>= x270 0)) x872) (and (not x872) (= x885 0))) (and (= 0 x124) (not (< x1050 1729973928)) (= 1729973928 x1050) (= x567 (x307 (x994 x1040) (x46 1) 0)) (= x520 x152) (= 0 x37) (>= x639 0) (= (and x152 x927) x543) (>= 1461501637330902918203684832716283019655932542975 x1040) (= x872 (not (= 0 x639))) (> x257 0) (= (x801 (x994 x1081)) x257) (= (not (= x82 0)) x520) (<= x639 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x723 x567) x639) (= x1040 x1000))) (and (not (= x823 1250999895)) (= x92 x917) (= (x801 (x994 x1081)) x586) (= x1011 (x723 x976)) (> x586 0) (>= x1011 0) (>= 1461501637330902918203684832716283019655932542975 x917) (= 0 x186) (<= x1011 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x307 (x994 x917) (x46 1) 0) x976) (= x773 (not x582)) (= x780 (not (= 0 x1011))) (= x82 (ite x773 1 0)) (= x811 x221) (not (= 954915356 x823)) (= 0 x744) (= x221 (not (= 0 x754))) (= 1572751336 x823) (not (= 701022898 x823)) (= (not x780) x582) (= x927 (and x583 x811)) (< x823 1729973928)))) (= x1002 x498)) x1) x700))
(assert (x785 x263))
(assert (x785 x739))
(assert (x785 x748))
(assert (x785 x765))
(assert (= (or (and x822 x760) x941) x141))
(assert (x785 x401))
(assert (x785 x362))
(assert (= (=> (and (= (x958 x969) x200) (<= 0 x200) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x200) (= x306 (< x200 1461501637330902918203684832716283019655932542975)) (= (x751 (x46 0) 0) x126) x306 (= (not (< 224 x869)) x813) (= x349 (x940 (x438 (- (x184 x969) (x184 x126))) 1))) (and x813 x393)) x973))
(assert (x716 (- (x184 x806) (x184 x959))))
(assert (x785 x309))
(assert (x85 x641))
(assert (x785 x322))
(assert (x785 x166))
(assert (x785 x30))
(assert (x785 x1061))
(assert (x785 x269))
(assert (= x169 (x184 (x994 x169))))
(assert (x844 1))
(assert (x785 x396))
(assert (x785 x764))
(assert (x785 x767))
(assert (x785 x19))
(assert (= x678 (x994 (x184 x678))))
(assert (let ((x374 (x438 (- (x184 x189) (x184 x193))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x844 (x438 (- (x184 x18) (x184 x1079)))))
(assert (x785 x461))
(assert (x785 x752))
(assert (= x131 (or x280 (and (not x385) x340))))
(assert (x844 (x438 (- (x184 x346) (x184 x23)))))
(assert (= x495 (or (and (not x896) x1084) x523)))
(assert (x785 x1052))
(assert (x785 x355))
(assert (x785 x1002))
(assert (= (and x417 x707) x282))
(assert (= 2485876314 (x184 (x46 2485876314))))
(assert (=> (<= x642 10000) (= (x994 x642) (x46 x642))))
(assert (x85 x148))
(assert (x785 x457))
(assert (let ((x374 (- (x184 x346) (x184 x23)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (let ((x374 (- (x184 x878) (x184 x661)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x712))
(assert (let ((x374 (x438 (- (x184 x878) (x184 x661))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x1050))
(assert (x716 x148))
(assert (= x654 (x994 (x184 x654))))
(assert (= (or (and x989 x141) x964) x47))
(assert (x785 x658))
(assert (x844 (x438 (- (x184 x610) (x184 x950)))))
(assert (x785 x557))
(assert (= (and x842 x68) x637))
(assert (x785 x698))
(assert (x785 x147))
(assert (= (and (not x795) x665) x740))
(assert (=> (<= x226 10000) (= (x46 x226) (x994 x226))))
(assert (= (x184 (x994 x753)) x753))
(assert (x785 x229))
(assert (let ((x374 (- (x184 x783) (x184 x688)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x831))
(assert (x785 x555))
(assert (x785 x907))
(assert (x785 x916))
(assert (x785 x559))
(assert (x785 x768))
(assert (= (or x348 (and x648 x726)) x760))
(assert (x507 x731))
(assert (x785 x83))
(assert (x785 x426))
(assert (x785 x500))
(assert (let ((x374 (- (x184 x858) (x184 x13)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x1074))
(assert (x785 x268))
(assert (x785 x741))
(assert (let ((x374 (x438 (- (x184 x771) (x184 x990))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= x173 (and x1062 (not x1083))))
(assert (x785 x53))
(assert (= (=> (and (and (= x5 (x438 x139)) (not (< x441 1729973928)) (> x540 0) (= 1 x318) (= x1045 0) (= x240 x281) (not (= x441 1729973928)) (= x139 (- x240 1)) (= (= 0 x1025) x929) (not (= x441 2485876314)) (= 3686129278 x441) (= x540 (x801 (x994 x1081))) (not (= x441 2429653569)) (= 0 x764)) (and (= x564 x281) (= x564 (x549 128)) (= 128 x914) (= 128 x965))) (and (=> (and (and (= x783 (x751 (x46 0) 0)) (= x841 (x438 (* x1025 32))) (<= x847 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x489 (x376 x783 1)) (= x325 (> x138 192)) (= x847 (x958 x783)) (<= 0 x847) (= (x963 (+ x841 160)) x138) (= (< x847 1461501637330902918203684832716283019655932542975) x944) (= (x940 (x438 (- (x184 x783) (x184 x688))) 1) x308) x944 (= x688 (x751 (x46 0) 0))) (not x929)) (and (=> (not x325) x321) (=> x325 x910))) (=> x929 x526))) x55))
(assert (= (x994 2485876314) (x46 2485876314)))
(assert (let ((x374 (- (x184 x627) (x184 x667)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x431))
(assert (x785 x932))
(assert (x785 x519))
(assert (x785 x288))
(assert (x785 x747))
(assert (= (and (not x417) x707) x420))
(assert (x716 (- (x184 x771) (x184 x990))))
(assert (= (or x33 x372) x68))
(assert (x716 (- (x184 x381) (x184 x418))))
(assert (x785 x24))
(assert (x785 x1036))
(assert (x785 x530))
(assert (= (or (and x777 (not x619)) x1071) x834))
(assert (=> (>= 10000 x135) (= (x994 x135) (x46 x135))))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x36 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x36 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x36)) (x49 x36 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x36 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x36 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (=> (and (= (not (> x294 224)) x371) (= x418 (x751 (x46 0) 0)) x630 (= (> 1461501637330902918203684832716283019655932542975 x490) x630) (= x208 (x940 (x438 (- (x184 x381) (x184 x418))) 1)) (= (x958 x381) x490) (>= x490 0) (<= x490 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and x371 x518)) x724))
(assert (x785 x505))
(assert (x785 x577))
(assert (x785 x581))
(assert (x785 x464))
(assert (x785 x663))
(assert (x85 x1040))
(assert (=> (>= 10000 x462) (= (x994 x462) (x46 x462))))
(assert (= (and x981 x95) x478))
(assert (= (x184 (x376 x177 x78)) (+ x78 (x184 x177))))
(assert (x785 x553))
(assert (= (=> (and (= x409 x104) (and (or (and (not x1054) (= 0 x427)) (and (and (= (x584 (- x798 1)) x810) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x798) (= x553 0) (= x345 (x963 (+ x810 1))) (not (> 1 x798)) (= x798 (x1051 x766)) (= x766 (x307 (x994 x634) (x46 1) 0)) (<= 0 x798) (= x527 0) (= x427 x345)) x1054)) (and (= (x801 (x994 x1081)) x807) (= x104 x165) (= x1054 (not (= x475 0))) (= 1729973928 x579) (>= 1461501637330902918203684832716283019655932542975 x634) (< 0 x807) (= x117 0) (= x92 x634) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x475) (= x793 0) (<= 0 x475) (= (x307 (x994 x634) (x46 1) 0) x977) (not (> 1729973928 x579)) (= x475 (x1051 x977))))) x837) x632))
(assert (x785 x514))
(assert (x785 x444))
(assert (= (or x420 x282) x96))
(assert (x785 x409))
(assert (= x936 (x994 (x184 x936))))
(assert (= x13 (x994 (x184 x13))))
(assert (x785 x285))
(assert (x785 x487))
(assert (= (or x740 x1029) x1062))
(assert (let ((x374 (- (x184 x978) (x184 x213)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x114))
(assert (= (and x968 x343) x862))
(assert (x785 x32))
(assert (= (x184 (x994 x937)) x937))
(assert (x785 x757))
(assert (x785 x864))
(assert (x785 x606))
(assert (= (x184 (x46 2429653569)) 2429653569))
(assert (x785 x41))
(assert (x844 (x438 (- (x184 x878) (x184 x661)))))
(assert (x785 x286))
(assert (x785 x799))
(assert (x785 x207))
(assert (x785 x256))
(assert (x785 x383))
(assert (x785 x647))
(assert (= (x994 (x184 x969)) x969))
(assert (x785 x1073))
(assert (x785 x323))
(assert (=> (>= 10000 x1040) (= (x46 x1040) (x994 x1040))))
(assert (x785 x800))
(assert (x785 x515))
(assert (= (x184 (x994 x809)) x809))
(assert (x785 x961))
(assert (= (=> (and (and (= 1250999895 x228) (= x370 (and x850 x311)) (= x188 (x801 (x994 x1081))) (= x329 1) (not (= 701022898 x228)) (= (not (= x383 x199)) x311) (< 0 x188) (= x424 0) (= (- x214 1) x389) (= (= x1025 0) x1027) (not (= 954915356 x228)) (= x199 (x438 x389)) (> 1729973928 x228) (= 0 x916) (= x214 x98)) (= x763 x98)) (and (=> (and (not x1027) (and (= (x940 (x438 (- (x184 x706) (x184 x598))) 1) x515) (= x378 (x438 (* x1025 32))) (= (x376 x706 1) x250) (= x1080 (> 1461501637330902918203684832716283019655932542975 x647)) (= x431 (x963 (+ 160 x378))) (= (x751 (x46 0) 0) x598) (= (< 192 x431) x50) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x647) x1080 (= x647 (x958 x706)) (<= 0 x647) (= (x751 (x46 0) 0) x706))) (and (=> (not x50) x421) (=> x50 x1030))) (=> x1027 x55))) x264))
(assert (x785 x138))
(assert (= x55 x421))
(assert (= x343 (and x141 (not x989))))
(assert (= (=> (and (and (or (and (not x164) (= 0 x266)) (and x164 (and (>= x532 0) (= x74 x266) (= x452 (x584 (- x532 1))) (= x314 (x307 (x994 x791) (x46 1) 0)) (= 0 x534) (= x532 (x723 x314)) (not (> 1 x532)) (= (x963 (+ 1 x452)) x74) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x532) (= 0 x768)))) (and (= x852 (x307 (x994 x791) (x46 1) 0)) (= (> x333 x915) x714) (= x504 0) (<= x436 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x791) (= x234 1729973928) (= x1000 x791) (= x164 (not (= x436 0))) (<= 0 x436) (< 0 x99) (= (x723 x852) x436) (= x333 x128) (not (> 1729973928 x234)) (= x99 (x801 (x994 x1081))) (= x987 0))) (and (= x742 128) (= x128 x759) (= x1031 128) (= (x84 128) x759))) x157) x287))
(assert (x785 x434))
(assert (x785 x774))
(assert (x785 x185))
(assert (let ((x374 (x438 (- (x184 x367) (x184 x848))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= 701022898 (x184 (x46 701022898))))
(assert (= (and x155 (not x182)) x379))
(assert (= x279 x211))
(assert (let ((x374 (x438 (- (x184 x503) (x184 x28))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= (x46 954915356) (x994 954915356)))
(assert (x785 x915))
(assert (x785 x1031))
(assert (= x990 (x994 (x184 x990))))
(assert (let ((x374 (x438 (- (x184 x978) (x184 x213))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x624))
(assert (= x135 (x184 (x994 x135))))
(assert (x785 x116))
(assert (x785 x91))
(assert (x785 x586))
(assert (x785 x413))
(assert (x507 x148))
(assert (x785 x539))
(assert (= x878 (x994 (x184 x878))))
(assert (x785 x485))
(assert (let ((x374 (x438 (- (x184 x858) (x184 x13))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (=> (<= x791 10000) (= (x46 x791) (x994 x791))))
(assert (x785 x877))
(assert (x785 x749))
(assert (x785 x565))
(assert (= x595 (=> (and (= x985 x947) (and (= x1023 1) (not (= x396 954915356)) (= x1026 (x438 x554)) (= 0 x245) (< x396 1729973928) (< 0 x1014) (= x172 0) (= x1083 (= x1025 0)) (= x947 x41) (= x396 1250999895) (not (= x396 701022898)) (= x554 (- x41 1)) (= (x801 (x994 x1081)) x1014))) (and (=> x1083 x972) (=> (and (and (= x531 (x958 x978)) (= (x376 x978 1) x812) (<= 0 x531) (= x62 (x438 (* 32 x1025))) (<= x531 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x213 (x751 (x46 0) 0)) (= x470 (> x14 192)) x344 (= (x963 (+ 160 x62)) x14) (= x978 (x751 (x46 0) 0)) (= x344 (< x531 1461501637330902918203684832716283019655932542975)) (= (x940 (x438 (- (x184 x978) (x184 x213))) 1) x30)) (not x1083)) (and (=> (not x470) x87) (=> x470 x1006)))))))
(assert (let ((x374 (x438 (- (x184 x851) (x184 x249))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (let ((x374 (x438 (- (x184 x416) (x184 x991))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= (or x912 (and x469 x616)) x194))
(assert (= x219 (and x854 (not x662))))
(assert (x785 x318))
(assert (= x964 (or x862 (and x343 (not x968)))))
(assert (= (x184 (x994 x1081)) x1081))
(assert (let ((x374 (x438 (- (x184 x694) (x184 x174))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (let ((x374 (x438 (- (x184 x536) (x184 x410))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x545))
(assert (x785 x1046))
(assert (x785 x571))
(assert (= (=> (and (= x506 x868) (and (not (= x254 2485876314)) (< 0 x1047) (= x868 x488) (= 0 x60) (= x254 3686129278) (= (= 0 x1025) x469) (= (- x488 1) x620) (= x78 (x438 x620)) (not (= 1729973928 x254)) (not (< x254 1729973928)) (= x821 1) (= (x801 (x994 x1081)) x1047) (= x176 0) (not (= 2429653569 x254)))) (and (=> x469 x39) (=> (and (not x469) (and (= x858 (x751 (x46 0) 0)) (= x669 (x958 x858)) (= x508 (< 192 x7)) (= x180 (x438 (* x1025 32))) (= x596 (> 1461501637330902918203684832716283019655932542975 x669)) (<= 0 x669) (= (x751 (x46 0) 0) x13) (= x922 (x376 x858 1)) (= x938 (x940 (x438 (- (x184 x858) (x184 x13))) 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x669) (= (x963 (+ x180 160)) x7) x596)) (and (=> x508 x246) (=> (not x508) x770))))) x1008))
(assert (x785 x594))
(assert (x785 x404))
(assert (x785 x788))
(assert (x785 x5))
(assert (x324 x148))
(assert (=> (>= 10000 x435) (= (x46 x435) (x994 x435))))
(assert (x785 x727))
(assert (= x971 (x184 (x994 x971))))
(assert (x785 x237))
(assert (x85 x169))
(assert (x785 x859))
(assert (= x435 (x184 (x994 x435))))
(assert (x785 x535))
(assert (= (or x272 (and x1033 x1039)) x665))
(assert (x785 x54))
(assert (let ((x374 (x438 (- (x184 x422) (x184 x1021))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x558))
(assert (x785 x289))
(assert (x785 x949))
(assert (x716 (- (x184 x489) (x184 x12))))
(assert (= x681 (and (not x822) x760)))
(assert (= x956 x77))
(assert (x785 x657))
(assert (= x1063 (=> (and (= x953 (x958 x18)) (= (x940 (x438 (- (x184 x18) (x184 x1079))) 1) x685) (<= x953 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x751 (x46 0) 0) x1079) (= (< x953 1461501637330902918203684832716283019655932542975) x103) x103 (= x93 (not (< 224 x883))) (>= x953 0)) (and x93 x924))))
(assert (x785 x781))
(assert (= x213 (x994 (x184 x213))))
(assert (= x1006 (=> (and (= x827 (not (< 224 x14))) (<= 0 x877) (<= x877 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x877 1461501637330902918203684832716283019655932542975) x123) (= (x751 (x46 0) 0) x787) x123 (= x387 (x940 (x438 (- (x184 x812) (x184 x787))) 1)) (= (x958 x812) x877)) (and x827 x87))))
(assert (= x292 (and x508 x891)))
(assert (x785 x238))
(assert (x785 x602))
(assert (x785 x90))
(assert (x785 x167))
(assert (= x393 x42))
(assert (x785 x730))
(assert (x785 x1026))
(assert (x785 x928))
(assert (=> (<= x917 10000) (= (x46 x917) (x994 x917))))
(assert (= (and x385 x340) x280))
(assert (x785 x1053))
(assert (= (and x144 (not x872)) x310))
(assert (= x627 (x994 (x184 x627))))
(assert (x785 x441))
(assert (x785 x72))
(assert (x785 x999))
(assert (= x1033 (or (and x395 x1041) x834)))
(assert (x785 x210))
(assert (= (=> (and (and (= x149 x362) (= x283 128) (= x388 128) (= x149 (x330 128))) (and (= x789 0) (= 1250999895 x202) (= x863 x362) (= (= x1025 0) x1039) (= x970 (x801 (x994 x1081))) (= 0 x484) (= x147 (x438 x472)) (= x472 (- x863 1)) (not (= x202 701022898)) (< x202 1729973928) (not (= 954915356 x202)) (= x911 1) (< 0 x970))) (and (=> x1039 x998) (=> (and (not x1039) (and (= x600 (< 192 x473)) (= (x940 (x438 (- (x184 x627) (x184 x667))) 1) x444) (<= 0 x1024) x580 (= (x751 (x46 0) 0) x627) (= x1024 (x958 x627)) (= (x438 (* 32 x1025)) x828) (= x667 (x751 (x46 0) 0)) (= (x376 x627 1) x771) (= x580 (> 1461501637330902918203684832716283019655932542975 x1024)) (= (x963 (+ x828 160)) x473) (<= x1024 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x600 x892) (=> (not x600) x48))))) x211))
(assert (x844 (x438 (- (x184 x416) (x184 x991)))))
(assert (x785 x873))
(assert (x785 x532))
(assert (= (or (and x466 x260) x691) x1003))
(assert (let ((x374 (x438 (- (x184 x969) (x184 x126))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (let ((x374 (x438 (- (x184 x922) (x184 x71))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x572))
(assert (x785 x818))
(assert (x785 x463))
(assert (x785 x946))
(assert (x785 x100))
(assert (x785 x7))
(assert (x785 x179))
(assert (x785 x190))
(assert (x785 x1045))
(assert (= x604 (x994 (x184 x604))))
(assert (x785 x793))
(assert (x785 x52))
(assert (x785 x734))
(assert (x844 (x438 (- (x184 x969) (x184 x126)))))
(assert (let ((x374 (- (x184 x812) (x184 x787)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x643))
(assert (x716 (- (x184 x706) (x184 x598))))
(assert (x844 (x438 (- (x184 x706) (x184 x598)))))
(assert (x785 x550))
(assert (= (and x872 x144) x1007))
(assert (x785 x1087))
(assert (x716 (- (x184 x18) (x184 x1079))))
(assert (x785 x1065))
(assert (let ((x374 (- (x184 x851) (x184 x249)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x266))
(assert (x785 x971))
(assert (=> (>= 10000 x937) (= (x46 x937) (x994 x937))))
(assert (x85 x753))
(assert (x716 (- (x184 x674) (x184 x1035))))
(assert (x785 x388))
(assert (x716 (- (x184 x189) (x184 x193))))
(assert (x785 x832))
(assert (x785 x640))
(assert (x716 x389))
(assert (x716 x931))
(assert (x785 x1064))
(assert (x785 x886))
(assert (x785 x153))
(assert (= x482 (=> (and (and (or (and (not x842) (and (= x561 1) (= (x963 (+ x1025 1)) x312) (= (x307 (x994 x135) (x46 1) 0) x328))) (and (= x561 0) x842)) (and (= x401 x135) (= x175 x135) (= x560 x225) (= x546 x898) (= x618 x135) (= x839 954915356) (>= x800 0) (< x839 1729973928) x121 (>= x1053 0) (not (> 4 x419)) (= x882 0) (not (= x839 701022898)) (>= 1461501637330902918203684832716283019655932542975 x135) (= x606 0) (= x225 x800) (>= 1461501637330902918203684832716283019655932542975 x359) (= (x801 (x994 x1081)) x1056) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x100) (= (or x901 (not x543)) x121) (= (not (= 0 x100)) x842) (>= x359 0) (= x945 (x307 (x994 x135) (x46 1) 0)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x419) true) (> x419 35)) (>= 1461501637330902918203684832716283019655932542975 x1053) (> x1056 0) (= x522 x1053) (= x552 0) (= (not (= x546 x1036)) x901) (<= 0 x100) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x168) (and (= true (<= x168 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 32 x168)))) (<= x800 1461501637330902918203684832716283019655932542975) (= x882 x888) (= (x723 x945) x100) (= (x584 (- x419 4)) x168))) (= x898 x765)) x816)))
(assert (= (or x495 (and x622 x298)) x260))
(assert (x785 x552))
(assert (= (x994 (x184 x959)) x959))
(assert (x785 x387))
(assert (= (=> (and (and (or (and (= 0 x913) (not x573)) (and x573 (and (= (x723 x196) x657) (<= x657 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x584 (- x657 1)) x946) (>= x657 0) (= x455 x913) (not (> 1 x657)) (= x455 (x963 (+ x946 1))) (= x79 0) (= 0 x227) (= x196 (x307 (x994 x462) (x46 1) 0))))) (and (= 1729973928 x695) (<= x982 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x573 (not (= 0 x982))) (= x462 x92) (= 0 x988) (= x982 (x723 x21)) (not (< x695 1729973928)) (= x21 (x307 (x994 x462) (x46 1) 0)) (= x241 (x801 (x994 x1081))) (= 0 x1019) (<= 0 x982) (< 0 x241) (>= 1461501637330902918203684832716283019655932542975 x462) (= x90 x496))) (= x167 x90)) x479) x709))
(assert (= x674 (x994 (x184 x674))))
(assert (x785 x137))
(assert (x844 (x438 (- (x184 x721) (x184 x746)))))
(assert (= x118 (and x492 x1003)))
(assert (= (and x573 x201) x97))
(assert (x785 x804))
(assert (let ((x374 (x438 (- (x184 x783) (x184 x688))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x524))
(assert (= (and x795 x665) x1029))
(assert (x785 x378))
(assert (x785 x452))
(assert (= x408 (and x94 x432)))
(assert (x85 x971))
(assert (x785 x419))
(assert (= x924 x849))
(assert (let ((x374 (- (x184 x381) (x184 x418)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x841))
(assert (x785 x391))
(assert (x785 x44))
(assert (let ((x374 (- (x184 x717) (x184 x772)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x208))
(assert (x785 x345))
(assert (let ((x374 (- (x184 x489) (x184 x12)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x437 (=> (and (= x217 (x958 x422)) (= (x940 (x438 (- (x184 x422) (x184 x1021))) 1) x1058) (<= x217 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x217 0) (= (x751 (x46 0) 0) x1021) (= (not (> x106 224)) x178) x430 (= (> 1461501637330902918203684832716283019655932542975 x217) x430)) (and x178 x782))))
(assert (=> (>= 10000 x753) (= (x994 x753) (x46 x753))))
(assert (= x954 (and (not x573) x201)))
(assert (x844 (x438 (- (x184 x851) (x184 x249)))))
(assert (= x610 (x994 (x184 x610))))
(assert (x716 (- (x184 x610) (x184 x950))))
(assert (x785 x40))
(assert (x785 x1069))
(assert (x785 x540))
(assert (x785 x669))
(assert (x826 x1025))
(assert (x785 x953))
(assert (= x770 x39))
(assert (x716 x620))
(assert (= (=> (and (= x913 x1038) (and (not (= x845 1729973928)) (= x9 (- x1072 1)) (= x1038 x1072) (not (= x845 2429653569)) (> x541 0) (not (= 2485876314 x845)) (= (x438 x9) x815) (= x363 (= x1025 0)) (= 0 x355) (not (< x845 1729973928)) (= x414 1) (= x629 0) (= x845 3686129278) (= x541 (x801 (x994 x1081))))) (and (=> x363 x849) (=> (and (and (= (< 192 x883) x703) (= (x376 x503 1) x18) (= (x940 (x438 (- (x184 x503) (x184 x28))) 1) x979) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1046) (= (x963 (+ 160 x238)) x883) (= x1046 (x958 x503)) (= (x438 (* x1025 32)) x238) (= (x751 (x46 0) 0) x503) x300 (= x300 (> 1461501637330902918203684832716283019655932542975 x1046)) (>= x1046 0) (= x28 (x751 (x46 0) 0))) (not x363)) (and (=> (not x703) x924) (=> x703 x1063))))) x479))
(assert (x785 x869))
(assert (x785 x898))
(assert (x785 x354))
(assert (x785 x868))
(assert (x785 x27))
(assert (x785 x738))
(assert (x716 (- (x184 x969) (x184 x126))))
(assert (=> (>= 10000 x971) (= (x994 x971) (x46 x971))))
(assert (x785 x890))
(assert (= x743 (and x662 x854)))
(assert (x85 x917))
(assert (x785 x1024))
(assert (= (and x218 x194) x34))
(assert (= (x184 (x376 x678 1)) (+ 1 (x184 x678))))
(assert (x785 x843))
(assert (= x659 (and x925 (not x394))))
(assert (x785 x731))
(assert (= (x994 (x184 x250)) x250))
(assert (= (+ 1 (x184 x31)) (x184 (x376 x31 1))))
(assert (= x782 x233))
(assert (= x814 (and x173 x470)))
(assert (x85 x791))
(assert (x785 x995))
(assert (x785 x127))
(assert (x785 x629))
(assert (x785 x125))
(assert (x785 x564))
(assert (x785 x656))
(assert (x785 x4))
(assert (= x272 (or x258 (and x247 (not x600)))))
(assert (= x922 (x994 (x184 x922))))
(assert (x785 x1010))
(assert (x785 x695))
(assert (= (or x336 x353) x993))
(assert (x785 x112))
(assert (= (x994 (x184 x1021)) x1021))
(assert (x785 x702))
(assert (x785 x796))
(assert (= x291 true))
(assert (x785 x165))
(assert (x716 (- (x184 x250) (x184 x936))))
(assert (x785 x605))
(assert (= x783 (x994 (x184 x783))))
(assert (= x1041 (or x34 x101)))
(assert (x785 x228))
(assert (x785 x217))
(assert (x785 x809))
(assert (= (x994 (x184 x71)) x71))
(assert (x716 (- (x184 x503) (x184 x28))))
(assert (= x707 (or x621 x637)))
(assert (x844 (x438 (- (x184 x771) (x184 x990)))))
(assert (= x599 (and x96 (not x1054))))
(assert (x785 x966))
(assert (x785 x685))
(assert (x785 x847))
(assert (x785 x569))
(assert (let ((x374 (x438 (- (x184 x678) (x184 x220))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x134))
(assert (= (and x736 x681) x365))
(assert (let ((x374 (x438 (- (x184 x706) (x184 x598))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x356))
(assert (x785 x778))
(assert (x785 x3))
(assert (x785 x37))
(assert (= (and (not x195) x10) x846))
(assert (= x675 (=> (and (<= x614 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x778 (x940 (x438 (- (x184 x56) (x184 x304))) 1)) x156 (= (< x614 1461501637330902918203684832716283019655932542975) x156) (<= 0 x614) (= x614 (x958 x56)) (= (x751 (x46 0) 0) x304) (= x276 (not (< 224 x509)))) (and x276 x956))))
(assert (x785 x104))
(assert (x785 x997))
(assert (x785 x360))
(assert (x785 x262))
(assert (x785 x689))
(assert (let ((x374 (- (x184 x536) (x184 x410)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x844 (x438 (- (x184 x536) (x184 x410)))))
(assert (= (x994 (x184 x381)) x381))
(assert (= (x46 1729973928) (x994 1729973928)))
(assert (let ((x374 (- (x184 x56) (x184 x304)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (or (and x835 (not x703)) x89) x244))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x554 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x554 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x554)) (x49 x554 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x554 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x554 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x978 (x994 (x184 x978))))
(assert (x785 x203))
(assert (x785 x373))
(assert (x844 (x438 (- (x184 x503) (x184 x28)))))
(assert (x785 x17))
(assert (= x144 (or x458 x375)))
(assert (= x682 (and x902 x86)))
(assert (x785 x679))
(assert (x716 (- (x184 x858) (x184 x13))))
(assert (x785 x270))
(assert (x785 x542))
(assert (x785 x109))
(assert (x785 x333))
(assert (= x891 (and (not x469) x616)))
(assert (x785 x817))
(assert (x785 x713))
(assert (x785 x652))
(assert (x785 x744))
(assert (x785 x516))
(assert (= (x994 (x184 x23)) x23))
(assert (= (x994 (x184 x422)) x422))
(assert (x785 x807))
(assert (x785 x920))
(assert (= (x994 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x46 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (or x677 x599) x368))
(assert (x785 x60))
(assert (x785 x745))
(assert (x785 x88))
(assert (x785 x1057))
(assert (= x412 (and x50 x1066)))
(assert (= x38 (=> (and (and (= x663 (x857 128)) (= 128 x864) (= 128 x711) (= x663 x556)) (and (not (= 701022898 x263)) (not (= 954915356 x263)) (= 0 x602) (= x989 (= x1025 0)) (= 0 x949) (= 1250999895 x263) (= x556 x274) (= (x801 (x994 x1081)) x265) (> 1729973928 x263) (= 1 x303) (= (- x274 1) x909) (= x915 (x438 x909)) (> x265 0))) (and (=> (and (and (= (> x229 192) x968) (= x11 (< x207 1461501637330902918203684832716283019655932542975)) (= (x958 x536) x207) x11 (<= 0 x207) (= (x751 (x46 0) 0) x536) (= (x963 (+ x341 160)) x229) (= (x940 (x438 (- (x184 x536) (x184 x410))) 1) x1005) (= (x751 (x46 0) 0) x410) (<= x207 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x376 x536 1) x416) (= (x438 (* 32 x1025)) x341)) (not x989)) (and (=> x968 x301) (=> (not x968) x1059))) (=> x989 x287)))))
(assert (= (and (not x218) x194) x101))
(assert (= x223 (and x76 x510)))
(assert (= x570 (=> (and (or (and x664 (and (= x269 x605) (= x890 (x584 (- x434 1))) (= x649 0) (= (x307 (x994 x641) (x46 1) 0) x904) (= 0 x720) (>= x434 0) (not (> 1 x434)) (= (x921 1461501637330902918203684832716283019655932542975 x731) x641) (= x605 (x963 (+ 1 x890))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x434) (= (x723 x904) x434))) (and (= 0 x269) (not x664))) (and (= x1022 false) (>= 1461501637330902918203684832716283019655932542975 x799) (<= x731 1461501637330902918203684832716283019655932542975) (<= x702 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 0 x1081) (= x1000 x731) (= (not (= x702 0)) x664) (= x499 false) (= (x723 x881) x702) (= 1 x137) (= 1729973928 x110) (= x290 0) (= x59 (x331 (x994 x1081))) (>= 1461501637330902918203684832716283019655932542975 x1000) (>= x702 0) (not (> 1729973928 x110)) (>= 1461501637330902918203684832716283019655932542975 x347) (= x347 x522) (>= 1461501637330902918203684832716283019655932542975 x1081) (<= 0 x59) (<= 0 x1000) x563 (= (x801 (x994 x1081)) x500) (= 954915356 x591) (<= 0 x347) (= x881 (x307 (x994 x731) (x46 1) 0)) (= x887 0) (= false x611) (= x563 (> (x801 (x994 x1081)) 0)) (>= x799 0) (>= 1461501637330902918203684832716283019655932542975 x92) (= x799 x867) (< 0 x500) (<= 0 x92) (= x327 false))) x715)))
(assert (= (x184 (x46 1729973928)) 1729973928))
(assert (= x641 (x184 (x994 x641))))
(assert (= x984 x38))
(assert (x785 x403))
(assert (x785 x1011))
(assert (= (or x668 x118) x201))
(assert (x785 x947))
(assert (x785 x161))
(assert (= (x994 701022898) (x46 701022898)))
(assert (x785 x488))
(assert (x785 x460))
(assert (x785 x172))
(assert (x785 x880))
(assert (x785 x985))
(assert (= (x184 (x46 1250999895)) 1250999895))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x472 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x472 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x472)) (x49 x472 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x472 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x472 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x785 x839))
(assert (let ((x374 (- (x184 x416) (x184 x991)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x820))
(assert (x826 32))
(assert (x785 x623))
(assert (x785 x882))
(assert (x785 x650))
(assert (= (x994 (x184 x717)) x717))
(assert (x85 x435))
(assert (x785 x763))
(assert (= (x994 (x184 x787)) x787))
(assert (x785 x253))
(assert (x785 x176))
(assert (x785 x491))
(assert (x785 x603))
(assert (x85 x642))
(assert (x785 x232))
(assert (x785 x544))
(assert (x785 x556))
(assert (x785 x988))
(assert (= (=> (and (= x920 x373) (and (> x158 0) (= (- x497 1) x628) (= (and x197 x224) x699) (> 1729973928 x134) (= x673 1) (= 0 x840) (= x710 (x438 x628)) (not (= x134 954915356)) (= (not (= x565 x710)) x224) (= x497 x373) (= x183 0) (= x158 (x801 (x994 x1081))) (= (= 0 x1025) x622) (not (= x134 701022898)) (= 1250999895 x134))) (and (=> x622 x77) (=> (and (not x622) (and (= (< x588 1461501637330902918203684832716283019655932542975) x468) (= x588 (x958 x31)) (= x56 (x376 x31 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x588) (= (x940 (x438 (- (x184 x31) (x184 x654))) 1) x146) (= x653 (x438 (* 32 x1025))) (>= x588 0) (= x31 (x751 (x46 0) 0)) x468 (= (< 192 x509) x896) (= x654 (x751 (x46 0) 0)) (= (x963 (+ 160 x653)) x509))) (and (=> (not x896) x956) (=> x896 x675))))) x889))
(assert (x716 1461501637330902918203684832716283019655932542976))
(assert (x785 x259))
(assert (x716 x719))
(assert (x785 x1085))
(assert (= (and x129 x325) x684))
(assert (let ((x374 (- (x184 x706) (x184 x598)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x1000))
(assert (x785 x227))
(assert (x785 x1072))
(assert (= x247 (and x1033 (not x1039))))
(assert (x844 (x438 (- (x184 x858) (x184 x13)))))
(assert (= (=> (and (= (< x1087 1461501637330902918203684832716283019655932542975) x761) (<= x1087 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x1087 0) (= x991 (x751 (x46 0) 0)) (= (not (> x229 224)) x120) x761 (= x679 (x940 (x438 (- (x184 x416) (x184 x991))) 1)) (= (x958 x416) x1087)) (and x1059 x120)) x301))
(assert (=> (>= 10000 x809) (= (x994 x809) (x46 x809))))
(assert (x785 x917))
(assert (x785 x541))
(assert (x785 x349))
(assert (= (and x664 x291) x597))
(assert (x785 x1014))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x326 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x326 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x326)) (x49 x326 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x326 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x326 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x139 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x139)) (x49 x139 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x139 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x184 (x376 x717 1)) (+ 1 (x184 x717))))
(assert (x844 (x438 (- (x184 x422) (x184 x1021)))))
(assert (= (x994 (x184 x851)) x851))
(assert (= 954915356 (x184 (x46 954915356))))
(assert (x844 (x438 (- (x184 x381) (x184 x418)))))
(assert (x785 x496))
(assert (= x892 (=> (and (= x187 (not (> x473 224))) (= (x751 (x46 0) 0) x990) (= (< x513 1461501637330902918203684832716283019655932542975) x762) x762 (>= x513 0) (<= x513 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x940 (x438 (- (x184 x771) (x184 x990))) 1) x63) (= (x958 x771) x513)) (and x187 x48))))
(assert (= x816 (=> (and (and (and (> x19 0) (= x633 (not (= x660 0))) (= x92 x305) (= x966 0) (not (= 1250999895 x1069)) (= x805 (x307 (x994 x753) (x46 1) 0)) (>= x660 0) (= x1000 x728) (> 1729973928 x1069) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x660) (= x19 (x801 (x994 x1081))) (= (ite x502 1 0) x884) (not (= 954915356 x1069)) (= x660 (x1051 x805)) (= 0 x262) (= 1572751336 x1069) (= x239 (not (= x728 x305))) (not (= 701022898 x1069)) (= x502 (not x451)) (= x753 x1000) (= (not x633) x451) (<= x753 1461501637330902918203684832716283019655932542975)) (and (and (or (and (= x409 0) (not x417)) (and x417 (and (= x342 (x307 (x994 x366) (x46 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) (= x934 (x963 (+ x843 1))) (= 0 x1064) (= x934 x409) (>= x32 0) (= (x584 (- x32 1)) x843) (= x542 0) (= x32 (x1051 x342)) (not (< x32 1))))) (and (not (< x855 1729973928)) (> x166 0) (= x562 x951) (= x417 (not (= x832 0))) (>= 1461501637330902918203684832716283019655932542975 x366) (= x366 x1000) (= (x801 (x994 x1081)) x166) (<= 0 x832) (= (not (= x603 0)) x951) (<= x832 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x275 (and x1015 x562)) (= x788 0) (= x537 (x307 (x994 x366) (x46 1) 0)) (= x855 1729973928) (= (x1051 x537) x832) (= 0 x215))) (and (= (x801 (x994 x1081)) x794) (not (= 701022898 x820)) (= x206 0) (= (ite x142 1 0) x603) (= x696 (x307 (x994 x577) (x46 1) 0)) (= x577 x92) (= x1015 (and x239 x105)) (= 1572751336 x820) (< x820 1729973928) (= x205 x105) (= (not (= 0 x884)) x205) (= x142 (not x670)) (<= 0 x1042) (= x1042 (x1051 x696)) (>= 1461501637330902918203684832716283019655932542975 x577) (not (= x820 954915356)) (> x794 0) (= x670 (not x1070)) (not (= 1250999895 x820)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1042) (= x259 0) (= (not (= x1042 0)) x1070)))) (and (= x66 (ite x45 1 0)) (= x45 (not x548)) (= (= x561 0) x548))) x632)))
(assert (=> (<= x577 10000) (= (x46 x577) (x994 x577))))
(assert (x785 x148))
(assert (x785 x756))
(assert (x716 (- (x184 x694) (x184 x174))))
(assert (x785 x490))
(assert (= (x994 (x184 x746)) x746))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x909 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x909 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x909)) (x49 x909 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x909 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x909 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (let ((x374 (- (x184 x678) (x184 x220)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (and (not x528) x486) x458))
(assert (x716 (- (x184 x416) (x184 x991))))
(assert (= (or (and x76 (not x510)) x223) x691))
(assert (= x486 (or x244 (and x363 x429))))
(assert (= (x184 (x376 x346 1)) (+ (x184 x346) 1)))
(assert (x844 (x438 (- (x184 x783) (x184 x688)))))
(assert (let ((x374 (- (x184 x250) (x184 x936)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x184 (x376 x978 1)) (+ 1 (x184 x978))))
(assert (= (=> (and (and (= 3686129278 x786) (= 0 x1004) (= x817 1) (= x309 x400) (= x514 (x801 (x994 x1081))) (< 0 x514) (= (x438 x36) x650) (= (= x1025 0) x466) (= x952 0) (not (= 1729973928 x786)) (not (> 1729973928 x786)) (= (- x309 1) x36) (not (= x786 2485876314)) (not (= 2429653569 x786))) (and (= x73 x400) (= x203 128) (= 128 x243) (= (x236 128) x73))) (and (=> (and (not x466) (and (= (x438 (* 32 x1025)) x399) (= x248 (< x457 1461501637330902918203684832716283019655932542975)) (= (< 192 x294) x510) (= x928 (x940 (x438 (- (x184 x346) (x184 x23))) 1)) (= (x958 x346) x457) (= (x751 (x46 0) 0) x23) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x457) (= x381 (x376 x346 1)) (= (x963 (+ x399 160)) x294) (>= x457 0) (= (x751 (x46 0) 0) x346) x248)) (and (=> (not x510) x518) (=> x510 x724))) (=> x466 x692))) x77))
(assert (= x577 (x184 (x994 x577))))
(assert (= x56 (x994 (x184 x56))))
(assert (x785 x789))
(assert (= (x994 (x184 x410)) x410))
(assert (= x998 (=> (and (and (= (x986 128) x961) (= 128 x792) (= x880 128) (= x286 x961)) (and (or (and (= x985 0) (not x795)) (and x795 (and (= x433 (x723 x402)) (= x980 x985) (= (x584 (- x433 1)) x460) (= x402 (x307 (x994 x435) (x46 1) 0)) (>= x433 0) (= (x963 (+ 1 x460)) x980) (= 0 x735) (not (< x433 1)) (<= x433 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x111 0)))) (and (= x465 (x307 (x994 x435) (x46 1) 0)) (= 0 x747) (>= 1461501637330902918203684832716283019655932542975 x435) (>= x483 0) (< 0 x974) (= (< x147 x1073) x319) (= 0 x278) (not (< x337 1729973928)) (= (not (= 0 x483)) x795) (<= x483 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x723 x465) x483) (= x1073 x286) (= 1729973928 x337) (= x435 x92) (= x974 (x801 (x994 x1081)))))) x595)))
(assert (x785 x359))
(assert (= (x994 (x184 x721)) x721))
(assert (= (x994 (x184 x31)) x31))
(assert (x785 x312))
(assert (x785 x501))
(assert (= (x46 3686129278) (x994 3686129278)))
(assert (x785 x243))
(assert (x716 x554))
(assert (x324 x731))
(assert (x785 x874))
(assert (= (or x412 (and x1066 (not x50))) x750))
(assert (and (= (* 32 x1025) (x1044 32 x1025)) (x865 32 x1025) (x369 32 x1025) (x445 32 x1025) (and (= (x1044 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x1025 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x1025 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x1025 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x1044 32 (- x1025 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x1025 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (x1044 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x1025) (- (* 32 x1025) (* x1025 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x80 32 x1025) (x697 32 x1025)))
(assert (x785 x154))
(assert (x785 x1047))
(assert (= (+ (x184 x610) 1) (x184 (x376 x610 1))))
(assert (= x692 (=> (and (and (= 128 x91) (= 128 x818) (= x323 (x996 128)) (= x492 (< x650 x323))) (or (and (= x90 0) (not x492)) (and (and (= (< x88 1461501637330902918203684832716283019655932542975) x578) (= 0 x886) (<= x88 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x1025 x650) (= x90 x88) (= x517 (x751 (x46 0) 0)) x578 (= (x376 x517 x650) x918) (= x299 0) (<= 0 x88) (= x88 (x958 x918))) x492))) x709)))
(assert (x785 x313))
(assert (x785 x392))
(assert (= (x184 (x376 x517 x650)) (+ x650 (x184 x517))))
(assert (x785 x612))
(assert (x785 x436))
(assert (= x12 (x994 (x184 x12))))
(assert (= x348 (or (and x95 (not x981)) x478)))
(assert (x785 x979))
(assert (x85 x577))
(assert (x785 x183))
(assert (x785 x146))
(assert (= (=> (and (and (and (not (< x581 1729973928)) (= x190 0) (= 1729973928 x581) (= x861 (<= x493 x24)) (= 0 x293) (= (not (= x955 0)) x182) (= x955 (x723 x1076)) (< 0 x154) (= (x801 (x994 x1081)) x154) (<= x955 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x148) (= x1076 (x307 (x994 x148) (x46 1) 0)) (= x92 x148) (>= x955 0) (= x459 x24) x861) (or (and (not x182) (= 0 x893)) (and (and (= x54 (x584 (- x481 1))) (= x116 0) (= x83 (x963 (+ x54 1))) (<= 0 x481) (not (< x481 1)) (= 0 x70) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x481) (= (x307 (x994 x226) (x46 1) 0) x143) (= x481 (x723 x143)) (= x226 (x921 1461501637330902918203684832716283019655932542975 x148)) (= x893 x83)) x182))) (and (= x170 128) (= x459 x776) (= x776 (x380 128)) (= x926 128))) x1077) x42))
(assert (x844 (x438 (- (x184 x627) (x184 x667)))))
(assert (= (x994 (x184 x771)) x771))
(assert (= x731 (x184 (x994 x731))))
(assert (x785 x99))
(assert (= (=> (and (or (and (= 0 x942) (not x284)) (and (and (= x125 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x656) (= (x958 x779) x656) (>= x656 0) x957 (= x81 0) (= x779 (x376 x267 x5)) (= x957 (> 1461501637330902918203684832716283019655932542975 x656)) (= x656 x942) (< x5 x1025) (= (x751 (x46 0) 0) x267)) x284)) (and (= x646 128) (= (< x5 x545) x284) (= 128 x1020) (= (x930 128) x545))) x35) x526))
(assert (= x432 (or (and x394 x925) x222)))
(assert (x785 x708))
(assert (x785 x504))
(assert (x85 x226))
(assert (x785 x308))
(assert (x785 x493))
(assert (let ((x374 (- (x184 x367) (x184 x848)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (+ (x184 x858) 1) (x184 (x376 x858 1))))
(assert (let ((x374 (- (x184 x771) (x184 x990)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x242 (=> (and (= (x958 x694) x44) (= (not (< 224 x558)) x521) (= x749 (x940 (x438 (- (x184 x694) (x184 x174))) 1)) (>= x44 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x44) (= x547 (> 1461501637330902918203684832716283019655932542975 x44)) x547 (= (x751 (x46 0) 0) x174)) (and x521 x819))))
(assert (x785 x75))
(assert (x785 x456))
(assert (= (x184 (x376 x875 1)) (+ (x184 x875) 1)))
(assert (x785 x794))
(assert (x785 x887))
(assert (x785 x67))
(assert (let ((x374 (x438 (- (x184 x806) (x184 x959))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x433))
(assert (= x688 (x994 (x184 x688))))
(assert (x844 (x438 (- (x184 x367) (x184 x848)))))
(assert (x85 x809))
(assert (let ((x374 (- (x184 x31) (x184 x654)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x76 (and (not x466) x260)))
(assert (x785 x78))
(assert (x785 x776))
(assert (= x28 (x994 (x184 x28))))
(assert (x785 x867))
(assert (x785 x439))
(assert (x785 x728))
(assert (x785 x265))
(assert (x785 x883))
(assert (= x672 (and x155 x182)))
(assert (= x819 x297))
(assert (x785 x860))
(assert (= (or x743 x219) x616))
(assert (= (x184 (x376 x267 x5)) (+ x5 (x184 x267))))
(assert (x716 (- (x184 x717) (x184 x772))))
(assert (x785 x742))
(assert (= (x994 (x184 x661)) x661))
(assert (x785 x455))
(assert (x785 x1028))
(assert (x844 (x438 (- (x184 x875) (x184 x604)))))
(assert (=> (<= x169 10000) (= (x46 x169) (x994 x169))))
(assert (x785 x1020))
(assert (= (=> (and (= x756 (x958 x367)) x320 (= (> 1461501637330902918203684832716283019655932542975 x756) x320) (<= 0 x756) (<= x756 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x848 (x751 (x46 0) 0)) (= x51 (x940 (x438 (- (x184 x367) (x184 x848))) 1)) (= x277 (not (< 224 x992)))) (and x277 x279)) x423))
(assert (x785 x226))
(assert (x785 x759))
(assert (let ((x374 (x438 (- (x184 x717) (x184 x772))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= x925 (or x900 (and x1083 x1062))))
(assert (= x346 (x994 (x184 x346))))
(assert (x785 x732))
(assert (= (x184 (x994 x791)) x791))
(assert (x785 x934))
(assert (= (=> (and (= x427 x594) (and (= (not (= x165 x757)) x251) (= x594 x757) (= (or (not x275) x251) x453))) x453) x837))
(assert (= (=> (and (= x671 (x940 (x438 (- (x184 x922) (x184 x71))) 1)) (<= x439 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x958 x922) x439) x16 (<= 0 x439) (= x71 (x751 (x46 0) 0)) (= (< x439 1461501637330902918203684832716283019655932542975) x16) (= (not (> x7 224)) x261)) (and x770 x261)) x246))
(assert (= (or x450 (and x212 x617)) x155))
(assert (x716 x36))
(assert (= x998 x48))
(assert (= (and x703 x835) x89))
(assert (x785 x2))
(assert (x785 x913))
(assert (= x252 (and x164 x47)))
(assert (x785 x653))
(assert (= (and (not x395) x1041) x777))
(assert (x785 x798))
(assert (=> (>= 10000 x366) (= (x46 x366) (x994 x366))))
(assert (x785 x1025))
(assert (let ((x374 (- (x184 x806) (x184 x959)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x908))
(assert (x785 x168))
(assert (x785 x1068))
(assert (x785 x965))
(assert (x785 x484))
(assert (= (x994 (x184 x598)) x598))
(assert (x785 x937))
(assert (x785 x350))
(assert (x785 x926))
(assert (x785 x70))
(assert (x785 x191))
(assert (x785 x254))
(assert (x785 x305))
(assert (x844 (x438 (- (x184 x250) (x184 x936)))))
(assert (= (+ 1 (x184 x627)) (x184 (x376 x627 1))))
(assert (= x416 (x994 (x184 x416))))
(assert (x785 x1082))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x620 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x620 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x620)) (x49 x620 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x620 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x620 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x785 x588))
(assert (x785 x1067))
(assert (let ((x374 (x438 (- (x184 x346) (x184 x23))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x673))
(assert (= (x994 (x184 x126)) x126))
(assert (= x86 (and (not x212) x617)))
(assert (x785 x43))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x719 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x719 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x719)) (x49 x719 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x719 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x719 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x184 (x376 x536 1)) (+ 1 (x184 x536))))
(assert (let ((x374 (- (x184 x18) (x184 x1079)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x938))
(assert (= x941 (or (and x681 (not x736)) x365)))
(assert (x785 x115))
(assert (x785 x169))
(assert (x785 x651))
(assert (x785 x459))
(assert (= (or x292 (and (not x508) x891)) x912))
(assert (= (and x726 (not x648)) x95))
(assert (and (= (x1044 9 3) 27) (= 81 (x1044 9 9)) (= 81 (x1044 27 3)) (= (x1044 3 3) 9)))
(assert (x785 x840))
(assert (x785 x884))
(assert (x785 x845))
(assert (x785 x400))
(assert (x785 x199))
(assert (x785 x245))
(assert (x785 x607))
(assert (x785 x225))
(assert (x785 x414))
(assert (x785 x475))
(assert (= (x994 1250999895) (x46 1250999895)))
(assert (= (or x686 x597) x617))
(assert (x785 x427))
(assert (= x1040 (x184 (x994 x1040))))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* (x940 x731 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x830 x731 1461501637330902918203684832716283019655932542976)) x731)) (x49 x731 1461501637330902918203684832716283019655932542976) (x879 x731 1461501637330902918203684832716283019655932542976) (x192 x731 1461501637330902918203684832716283019655932542976)))
(assert (x85 x937))
(assert (x785 x170))
(assert (x716 x139))
(assert (=> (>= 10000 x641) (= (x994 x641) (x46 x641))))
(assert (x785 x561))
(assert (x785 x171))
(assert (= x425 (or (and x1027 x993) x750)))
(assert (= x321 x526))
(assert (= (or x379 x672) x726))
(assert (= x784 (or (and (not x325) x129) x684)))
(assert (not x570))
(assert (x785 x281))
(assert (x785 x339))
(assert (= x366 (x184 (x994 x366))))
(assert (x785 x1056))
(assert (x716 (- (x184 x875) (x184 x604))))
(assert (x716 (- (x184 x851) (x184 x249))))
(assert (let ((x374 (x438 (- (x184 x875) (x184 x604))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x716 (- (x184 x922) (x184 x71))))
(assert (x785 x66))
(assert (= (=> (and (= x893 x859) (and (not (= x289 701022898)) (> x831 0) (< x289 1729973928) (= x648 (= x1025 0)) (= x413 x859) (= x2 0) (not (= x289 954915356)) (= x237 0) (= 1250999895 x289) (= x831 (x801 (x994 x1081))))) (and (=> (and (not x648) (and (= (x438 (* 32 x1025)) x382) (>= x705 0) (= (x751 (x46 0) 0) x604) x601 (= (x940 (x438 (- (x184 x875) (x184 x604))) 1) x446) (= x601 (< x705 1461501637330902918203684832716283019655932542975)) (= x694 (x376 x875 1)) (= x981 (> x558 192)) (= x558 (x963 (+ 160 x382))) (= (x958 x875) x705) (= x875 (x751 (x46 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x705))) (and (=> x981 x242) (=> (not x981) x819))) (=> x648 x297))) x1077))
(assert (x785 x117))
(assert (= x33 (and x833 x443)))
(assert (let ((x374 (x438 (- (x184 x610) (x184 x950))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x844 (x438 (- (x184 x31) (x184 x654)))))
(assert (let ((x374 (- (x184 x875) (x184 x604)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x844 (x438 (- (x184 x678) (x184 x220)))))
(assert (let ((x374 (- (x184 x674) (x184 x1035)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x82))
(assert (x785 x876))
(assert (x785 x293))
(assert (x785 x296))
(assert (x785 x63))
(assert (x716 (- (x184 x627) (x184 x667))))
(assert (x716 x731))
(assert (= x919 (=> (and (= x57 x390) (and (not (= 954915356 x403)) (= (not (= x550 x1068)) x122) (= (= x1025 0) x395) (= x894 0) (not (= 701022898 x403)) (= x61 0) x295 (= x1068 x390) (> x456 0) (= x456 (x801 (x994 x1081))) (= 1250999895 x403) (< x403 1729973928) (= (or (not x370) x122) x295))) (and (=> x395 x211) (=> (and (not x395) (and (= x992 (x963 (+ 160 x339))) (= (x376 x851 1) x367) (= (x751 (x46 0) 0) x249) (= (x438 (* 32 x1025)) x339) (= (x958 x851) x860) (= (> 1461501637330902918203684832716283019655932542975 x860) x943) (= (< 192 x992) x619) (= (x940 (x438 (- (x184 x851) (x184 x249))) 1) x752) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x860) (= x851 (x751 (x46 0) 0)) (<= 0 x860) x943)) (and (=> x619 x423) (=> (not x619) x279)))))))
(assert (x716 x909))
(assert (x785 x294))
(assert (x785 x720))
(assert (x785 x435))
(assert (x785 x257))
(assert (= (or x405 x638) x854))
(assert (x785 x914))
(assert (x785 x634))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* (x940 x148 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x830 x148 1461501637330902918203684832716283019655932542976)) x148)) (x49 x148 1461501637330902918203684832716283019655932542976) (x879 x148 1461501637330902918203684832716283019655932542976) (x192 x148 1461501637330902918203684832716283019655932542976)))
(assert (= (x994 (x184 x220)) x220))
(assert (let ((x374 (x438 (- (x184 x56) (x184 x304))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x198))
(assert (= x107 (=> (and (and (= x195 (= x1025 0)) (not (= x285 954915356)) (= (> x463 x204) x871) (not (= x285 701022898)) (< x285 1729973928) (= 0 x67) (= x850 (and x714 x871)) (= x463 x1010) (= x285 1250999895) (< 0 x870) (= (x801 (x994 x1081)) x870) (= 0 x999)) (and (= x407 (x480 128)) (= 128 x288) (= x1010 x407) (= 128 x905))) (and (=> (and (and (= (x963 (+ x658 160)) x106) (<= x461 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x461 (x958 x189)) (= (x751 (x46 0) 0) x193) x722 (= (> x106 192) x609) (= x422 (x376 x189 1)) (= (x940 (x438 (- (x184 x189) (x184 x193))) 1) x464) (= x189 (x751 (x46 0) 0)) (>= x461 0) (= x722 (< x461 1461501637330902918203684832716283019655932542975)) (= (x438 (* 32 x1025)) x658)) (not x195)) (and (=> (not x609) x782) (=> x609 x437))) (=> x195 x233)))))
(assert (= (x994 (x184 x1079)) x1079))
(assert (x785 x1042))
(assert (x716 x472))
(assert (x785 x579))
(assert (= (x184 (x46 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x844 (x438 (- (x184 x489) (x184 x12)))))
(assert (x785 x1018))
(assert (x785 x446))
(assert (x716 (- (x184 x536) (x184 x410))))
(assert (x785 x894))
(assert (x785 x329))
(assert (x785 x1075))
(assert (x785 x390))
(assert (x785 x791))
(assert (= (x46 2429653569) (x994 2429653569)))
(assert (= (=> (and (and (< x296 1729973928) (= x1074 0) (< 0 x404) (= x404 (x801 (x994 x1081))) (not (= 954915356 x296)) (= x493 x127) (= 1250999895 x296) (not (= x296 701022898)) (= 0 x569) (= (= 0 x1025) x212)) (= x127 x269)) (and (=> (and (and (= x746 (x751 (x46 0) 0)) (>= x640 0) (= x745 (x940 (x438 (- (x184 x721) (x184 x746))) 1)) (= (x376 x721 1) x969) (= (x958 x721) x640) (= x1043 (> 1461501637330902918203684832716283019655932542975 x640)) (= (x963 (+ x704 160)) x869) (= (> x869 192) x902) (= x704 (x438 (* x1025 32))) (= x721 (x751 (x46 0) 0)) x1043 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x640)) (not x212)) (and (=> (not x902) x393) (=> x902 x973))) (=> x212 x42))) x715))
(assert (x85 x135))
(assert (x785 x513))
(assert (= (or x683 (and x10 x195)) x1048))
(assert (x785 x1013))
(assert (x785 x290))
(assert (= (+ 1 (x184 x706)) (x184 (x376 x706 1))))
(assert (let ((x374 (x438 (- (x184 x489) (x184 x12))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= x353 (and x939 x1048)))
(assert (x785 x888))
(assert (= (x994 (x184 x304)) x304))
(assert (x785 x316))
(assert (x785 x970))
(assert (= (+ (x184 x503) 1) (x184 (x376 x503 1))))
(assert (x785 x384))
(assert (= x686 (and x291 (not x664))))
(assert (= x222 (or (and (not x151) x659) x406)))
(assert (x785 x987))
(assert (= x157 (=> (and (= x266 x52) (and (= x52 x727) (= x491 (x801 (x994 x1081))) (= x335 0) (= 0 x651) (not (= 954915356 x161)) (= 1250999895 x161) (= (x438 x719) x204) (= (= 0 x1025) x824) (not (= x161 701022898)) (= x27 1) (< 0 x491) (= x719 (- x727 1)) (< x161 1729973928))) (and (=> (and (and (= (x963 (+ 160 x625)) x485) (= (x438 (* x1025 32)) x625) (= x530 (x940 (x438 (- (x184 x717) (x184 x772))) 1)) (= x772 (x751 (x46 0) 0)) (= x806 (x376 x717 1)) (= (x751 (x46 0) 0) x717) (= x741 (x958 x717)) (= x385 (< 192 x485)) (>= x741 0) (<= x741 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (> 1461501637330902918203684832716283019655932542975 x741) x967) x967) (not x824)) (and (=> (not x385) x377) (=> x385 x471))) (=> x824 x107)))))
(assert (= x642 (x184 (x994 x642))))
(assert (= (x994 (x184 x950)) x950))
(assert (x844 (x438 (- (x184 x978) (x184 x213)))))
(assert (= (and x619 x777) x1071))
(assert (x785 x476))
(assert (x785 x283))
(assert (x785 x905))
(assert (x844 (x438 (- (x184 x694) (x184 x174)))))
(assert (x716 x628))
(assert (=> (<= x731 10000) (= (x994 x731) (x46 x731))))
(assert (x785 x646))
(assert (x507 1461501637330902918203684832716283019655932542975))
(assert (let ((x374 (x438 (- (x184 x674) (x184 x1035))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x407))
(assert (x785 x162))
(assert (x785 x494))
(assert (= (x184 (x376 x851 1)) (+ (x184 x851) 1)))
(assert (x785 x338))
(assert (= (x994 (x184 x367)) x367))
(assert (x785 x448))
(assert (= (or (and (not x470) x173) x814) x900))
(assert (= (x994 (x184 x189)) x189))
(assert (x716 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x785 x718))
(assert (= (and (not x1027) x993) x1066))
(assert (x785 x335))
(assert (x785 x140))
(assert (= (and (not x284) x631) x405))
(assert (x785 x74))
(assert (x785 x81))
(assert (x85 x366))
(assert (let ((x374 (x438 (- (x184 x627) (x184 x667))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x711))
(assert (x785 x590))
(assert (x785 x992))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x184 (x46 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (+ (x184 x948) x815) (x184 (x376 x948 x815))))
(assert (= (or x725 x252) x1060))
(assert (= (x994 (x184 x193)) x193))
(assert (x716 (- (x184 x422) (x184 x1021))))
(assert (x785 x234))
(assert (x785 x509))
(assert (x785 x1081))
(assert (= 1572751336 (x184 (x46 1572751336))))
(assert (= x972 x87))
(assert (=> (<= x1081 10000) (= (x46 x1081) (x994 x1081))))
(assert (= x462 (x184 (x994 x462))))
(assert (= (and x631 x284) x638))
(assert (x785 x942))
(assert (x785 x899))
(assert (x785 x585))
(assert (x785 x952))
(assert (x785 x73))
(assert (x785 x758))
(assert (x785 x1005))
(assert (let ((x374 (x438 (- (x184 x250) (x184 x936))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x180))
(assert (= (x994 (x184 x991)) x991))
(assert (x785 x497))
(assert (x716 (- (x184 x678) (x184 x220))))
(assert (x785 x533))
(assert (x785 x351))
(assert (x785 x347))
(assert (x785 x982))
(assert (= (=> (and (and (or (and (and (= (x723 x26) x114) (= 0 x708) (not (< x114 1)) (= (x584 (- x114 1)) x232) (= x748 (x963 (+ 1 x232))) (<= 0 x114) (= x732 0) (= x765 x748) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x114) (= x26 (x307 (x994 x809) (x46 1) 0))) x833) (and (not x833) (= x765 0))) (and (= (x307 (x994 x809) (x46 1) 0) x1009) (= x1067 1729973928) (= x112 0) (= (not (= x140 0)) x833) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (<= 0 x140) (= x643 (x801 (x994 x1081))) (= x92 x809) (= x75 0) (= x1036 x415) (>= 1461501637330902918203684832716283019655932542975 x809) (= x140 (x723 x1009)) (not (> 1729973928 x1067)) (> x643 0))) (= x415 x885)) x482) x1))
(assert (x785 x483))
(assert (x785 x59))
(assert (= (x994 1461501637330902918203684832716283019655932542975) (x46 1461501637330902918203684832716283019655932542975)))
(assert (let ((x374 (- (x184 x422) (x184 x1021)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (=> (and (and (= x1052 (x22 128)) (= x494 x1052) (= 128 x53) (= x689 128)) (and (> x781 0) (not (= 701022898 x43)) (> 1729973928 x43) (not (= 954915356 x43)) (= x494 x72) (= (>= x72 x413) x566) (= 0 x1075) (= (x801 (x994 x1081)) x781) x566 (= x822 (= 0 x1025)) (= 0 x426) (= x43 1250999895))) (and (=> (and (not x822) (and x853 (= x736 (> x501 192)) (= (x751 (x46 0) 0) x950) (= x853 (< x876 1461501637330902918203684832716283019655932542975)) (= x338 (x940 (x438 (- (x184 x610) (x184 x950))) 1)) (= (x963 (+ 160 x738)) x501) (>= x876 0) (= x738 (x438 (* x1025 32))) (= (x751 (x46 0) 0) x610) (= (x958 x610) x876) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x876) (= (x376 x610 1) x674))) (and (=> (not x736) x984) (=> x736 x181))) (=> x822 x38))) x297))
(assert (x785 x903))
(assert (x785 x1038))
(assert (x785 x870))
(assert (x785 x885))
(assert (= x10 (or x131 (and x824 x1060))))
(assert (x785 x145))
(assert (= (and (not x492) x1003) x668))
(assert (= (and x425 (not x929)) x129))
(assert (= (=> (and (and (= x1032 128) (= 128 x1018) (= x391 (x428 128)) (= x1057 x391)) (and (= (and x895 x319) x197) (not (= 954915356 x539)) (> 1729973928 x539) (= (x801 (x994 x1081)) x1034) (= x767 x1057) (= x171 0) (= x907 0) (= x539 1250999895) (= x895 (< x1026 x767)) (> x1034 0) (= x394 (= x1025 0)) (not (= x539 701022898)))) (and (=> (and (and (= (< 192 x623) x151) (= (x751 (x46 0) 0) x220) (= x878 (x376 x678 1)) (= x836 (< x734 1461501637330902918203684832716283019655932542975)) (= (x438 (* 32 x1025)) x866) (= x678 (x751 (x46 0) 0)) (= (x958 x678) x734) (= x923 (x940 (x438 (- (x184 x678) (x184 x220))) 1)) (= x623 (x963 (+ x866 160))) (>= x734 0) x836 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x734)) (not x394)) (and (=> (not x151) x136) (=> x151 x613))) (=> x394 x454))) x972))
(assert (x785 x135))
(assert (x785 x660))
(assert (x785 x303))
(assert (x785 x382))
(assert (x716 (- (x184 x346) (x184 x23))))
(assert (x785 x442))
(assert (x785 x710))
(assert (x785 x815))
(assert (x785 x240))
(assert (x785 x693))
(assert (x785 x481))
(assert (x785 x863))
(assert (x785 x704))
(assert (= x136 x454))
(assert (= (and x896 x1084) x523))
(assert (= (=> (and (= x635 (< x477 1461501637330902918203684832716283019655932542975)) (= x12 (x751 (x46 0) 0)) (= x524 (x940 (x438 (- (x184 x489) (x184 x12))) 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x477) x635 (= (x958 x489) x477) (<= 0 x477) (= (not (< 224 x138)) x576)) (and x576 x321)) x910))
(assert (x785 x274))
(assert (x716 (- (x184 x56) (x184 x304))))
(assert (x785 x215))
(assert (x844 (x438 (- (x184 x922) (x184 x71)))))
(assert (= (x994 1572751336) (x46 1572751336)))
(assert (x785 x498))
(assert (= x443 (or x1007 x310)))
(assert (= x418 (x994 (x184 x418))))
(assert (x844 (x438 (- (x184 x812) (x184 x787)))))
(assert (= (x994 (x184 x174)) x174))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x628 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x628 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x628)) (x49 x628 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x628 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x628 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (let ((x374 (- (x184 x503) (x184 x28)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x188))
(assert (x785 x231))
(assert (x785 x399))
(assert (= x372 (and x443 (not x833))))
(assert (x785 x158))
(assert (x785 x639))
(assert (x716 (- (x184 x878) (x184 x661))))
(assert (x785 x655))
(assert (= (x994 (x184 x694)) x694))
(assert (= (or x408 x568) x298))
(assert (= x258 (and x600 x247)))
(assert (x785 x506))
(assert (x785 x62))
(assert (= x806 (x994 (x184 x806))))
(assert (x785 x186))
(assert (= (+ (x184 x721) 1) (x184 (x376 x721 1))))
(assert (x785 x57))
(assert (x785 x775))
(assert (x785 x79))
(assert (= x233 (=> (and (and (= (x255 128) x774) (= x442 128) (= x585 128) (= x210 x774)) (and (or (and x939 (and (= (x584 (- x185 1)) x253) (not (> 1 x185)) (= (x723 x358) x185) (= 0 x995) (>= x185 0) (= x487 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x185) (= x358 (x307 (x994 x642) (x46 1) 0)) (= x1085 x763) (= x1085 (x963 (+ 1 x253))))) (and (not x939) (= x763 0))) (and (= x796 1729973928) (= x931 (- x758 1)) (> x1055 0) (= (not (= 0 x4)) x939) (= x758 x210) (= x804 0) (= x559 1) (= x4 (x723 x302)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (not (> 1729973928 x796)) (= x642 x1000) (<= 0 x4) (= (x438 x931) x383) (<= x642 1461501637330902918203684832716283019655932542975) (= x555 0) (= x302 (x307 (x994 x642) (x46 1) 0)) (= (x801 (x994 x1081)) x1055)))) x264)))
(assert (x785 x649))
(assert (x785 x735))
(assert (x785 x397))
(assert (x844 (x438 (- (x184 x674) (x184 x1035)))))
(assert (x785 x299))
(assert (x785 x241))
(assert (x85 x731))
(assert (= x287 x1059))
(assert (x785 x923))
(assert (x716 (- (x184 x978) (x184 x213))))
(assert (x785 x855))
(assert (= x406 (and x659 x151)))
(assert (let ((x374 (- (x184 x922) (x184 x71)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x1001))
(assert (x785 x61))
(assert (= (x994 (x184 x812)) x812))
(assert (= (and x1048 (not x939)) x336))
(assert (= x503 (x994 (x184 x503))))
(assert (x785 x980))
(assert (x716 (- (x184 x31) (x184 x654))))
(assert (x785 x642))
(assert (= (x184 (x376 x189 1)) (+ (x184 x189) 1)))
(assert (= x772 (x994 (x184 x772))))
(assert (= (and x609 x846) x962))
(assert (x716 (- (x184 x367) (x184 x848))))
(assert (x785 x1019))
(assert (x785 x828))
(assert (x785 x680))
(assert (= x706 (x994 (x184 x706))))
(assert (x785 x278))
(assert (x785 x754))
(assert (x785 x124))
(assert (x785 x98))
(assert (= (and x432 (not x94)) x568))
(assert (x785 x625))
(assert (x785 x974))
(assert (= (x994 (x184 x848)) x848))
(assert (= x518 x692))
(assert (x785 x792))
(assert (x785 x866))
(assert (x785 x175))
(assert (= (x184 (x46 3686129278)) 3686129278))
(assert (x785 x337))
(assert (x785 x551))
(assert (= x621 (and (not x842) x68)))
(assert (x785 x111))
(assert (x785 x960))
(assert (x785 x29))
(assert (= (x184 (x376 x783 1)) (+ 1 (x184 x783))))
(assert (= x917 (x184 (x994 x917))))
(assert (x785 x110))
(assert (let ((x374 (x438 (- (x184 x18) (x184 x1079))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (= x249 (x994 (x184 x249))))
(assert (x785 x1023))
(assert (x716 (- (x184 x812) (x184 x787))))
(assert (x785 x202))
(assert (let ((x374 (- (x184 x721) (x184 x746)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x522))
(assert (x716 x326))
(assert (x785 x618))
(assert (= (and x96 x1054) x677))
(assert (x785 x810))
(assert (x785 x1055))
(assert (x785 x983))
(assert (let ((x374 (x438 (- (x184 x721) (x184 x746))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x716 x9))
(assert (x785 x614))
(assert (x785 x25))
(assert (= x683 (or (and (not x609) x846) x962)))
(assert (= x450 (or (and x86 (not x902)) x682)))
(assert (let ((x374 (- (x184 x610) (x184 x950)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x785 x1034))
(assert (=> (<= x634 10000) (= (x46 x634) (x994 x634))))
(assert (x716 (- (x184 x783) (x184 x688))))
(assert (= (x994 (x184 x858)) x858))
(assert (x785 x163))
(assert (x785 x366))
(assert (= x667 (x994 (x184 x667))))
(assert (x785 x671))
(assert (x785 x546))
(assert (x785 x911))
(assert (x785 x534))
(assert (x785 x149))
(assert (x785 x1058))
(assert (= x1035 (x994 (x184 x1035))))
(assert (x785 x106))
(assert (x785 x477))
(assert (x844 (x438 (- (x184 x56) (x184 x304)))))
(assert (x785 x206))
(assert (= x536 (x994 (x184 x536))))
(assert (x785 x893))
(assert (let ((x374 (x438 (- (x184 x381) (x184 x418))))) (and (=> (and (> x374 0) (> 1 0)) (and (>= x374 (* (x940 x374 1) 1)) (< (- x374 1) (* 1 (x940 x374 1))))) (x230 x374 1) (x676 x374 1) (x361 x374 1) (= (* (x940 x374 1) 1) (- x374 (x921 0 x374))) (x357 x374 1))))
(assert (x785 x527))
(assert (x785 x786))
(assert (x785 x897))
(assert (= x18 (x994 (x184 x18))))
(assert (x785 x473))
(assert (= (=> (and (<= 0 x397) (= x959 (x751 (x46 0) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x397) (= (x958 x806) x397) x65 (= (x940 (x438 (- (x184 x806) (x184 x959))) 1) x354) (= x65 (< x397 1461501637330902918203684832716283019655932542975)) (= (not (> x485 224)) x838)) (and x377 x838)) x471))
(assert (x785 x92))
(assert (x785 x626))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x931 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x931 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x931)) (x49 x931 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x931 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x931 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x184 (x994 x226)) x226))
(assert (x844 (x438 (- (x184 x806) (x184 x959)))))
(assert (let ((x374 (- (x184 x694) (x184 x174)))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* (x940 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x830 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x374)) (x49 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x879 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x192 x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x994 (x184 x875)) x875))
(assert (= x39 (=> (and (or (and (not x218) (= x390 0)) (and x218 (and (<= 0 x551) (= x612 0) (= (x376 x177 x78) x1078) (= x390 x551) (= (< x551 1461501637330902918203684832716283019655932542975) x593) x593 (< x78 x1025) (= (x958 x1078) x551) (= (x751 (x46 0) 0) x177) (= 0 x145) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x551)))) (and (= x218 (> x162 x78)) (= 128 x873) (= x40 128) (= x162 (x332 128)))) x919)))
(assert (x785 x341))
(assert (= x489 (x994 (x184 x489))))
(assert (= (x184 (x994 x148)) x148))
(check-sat)
(exit)
