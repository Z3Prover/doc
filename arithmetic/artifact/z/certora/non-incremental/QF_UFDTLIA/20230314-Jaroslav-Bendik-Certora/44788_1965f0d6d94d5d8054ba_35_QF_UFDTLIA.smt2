(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x81 0)) (((x316 (x571 x81) (x614 x81) (x257 Int)) (x558 (x556 Int)) (x111 (x83 x81) (x658 Int)))))
(declare-fun x23 () Int)
(declare-fun x203 () Int)
(declare-fun x568 () Bool)
(declare-fun x150 () Int)
(declare-fun x318 () Int)
(declare-fun x434 () x81)
(declare-fun x631 () Int)
(declare-fun x80 () Int)
(declare-fun x124 () Int)
(declare-fun x11 () Int)
(declare-fun x492 () x81)
(declare-fun x349 () Int)
(declare-fun x29 () Int)
(declare-fun x191 (x81) Int)
(declare-fun x526 () Int)
(declare-fun x508 () Int)
(declare-fun x100 () Int)
(declare-fun x204 () Int)
(declare-fun x42 () x81)
(declare-fun x637 () Bool)
(declare-fun x413 () Int)
(declare-fun x77 (Int) Int)
(declare-fun x450 () Int)
(declare-fun x770 () Int)
(declare-fun x459 () Int)
(declare-fun x306 () Int)
(declare-fun x379 () Int)
(declare-fun x84 () Int)
(declare-fun x626 () Int)
(declare-fun x638 () Int)
(declare-fun x347 () Int)
(declare-fun x6 () Int)
(declare-fun x727 () Int)
(declare-fun x187 () Int)
(declare-fun x376 () Int)
(declare-fun x93 () Int)
(declare-fun x297 () Int)
(declare-fun x151 () Bool)
(declare-fun x776 () Int)
(declare-fun x308 () Int)
(declare-fun x135 () Bool)
(declare-fun x777 () Int)
(declare-fun x557 () Int)
(declare-fun x402 () Bool)
(declare-fun x779 () Int)
(declare-fun x565 () Int)
(declare-fun x553 () Bool)
(declare-fun x277 () x81)
(declare-fun x677 () Int)
(declare-fun x656 () Int)
(declare-fun x729 () x81)
(declare-fun x242 () Int)
(declare-fun x343 () Int)
(declare-fun x660 () Int)
(declare-fun x513 () Int)
(declare-fun x164 () Int)
(declare-fun x352 () Int)
(declare-fun x387 () Int)
(declare-fun x615 () x81)
(declare-fun x410 () Int)
(declare-fun x586 () Int)
(declare-fun x103 () x81)
(declare-fun x259 () Int)
(declare-fun x743 () Int)
(declare-fun x230 () x81)
(declare-fun x228 () Int)
(declare-fun x712 () Bool)
(declare-fun x246 () Int)
(declare-fun x401 () x81)
(declare-fun x713 () Int)
(declare-fun x575 () Int)
(declare-fun x745 () Int)
(declare-fun x560 (x81) Int)
(declare-fun x219 () Bool)
(declare-fun x535 () Bool)
(declare-fun x138 () Int)
(declare-fun x445 () Int)
(declare-fun x529 () x81)
(declare-fun x590 () Int)
(declare-fun x441 () Int)
(declare-fun x339 () Int)
(declare-fun x559 () Int)
(declare-fun x580 () Bool)
(declare-fun x561 () Int)
(declare-fun x570 () Int)
(declare-fun x611 () Int)
(declare-fun x603 () Int)
(declare-fun x479 () Int)
(declare-fun x62 () Int)
(declare-fun x20 () Int)
(declare-fun x597 () x81)
(declare-fun x175 () Int)
(declare-fun x354 () x81)
(declare-fun x212 () Int)
(declare-fun x240 () Int)
(declare-fun x494 () Int)
(declare-fun x190 () x81)
(declare-fun x251 () x81)
(declare-fun x364 () Int)
(declare-fun x675 () Int)
(declare-fun x643 () Int)
(declare-fun x616 () Bool)
(declare-fun x143 () Int)
(declare-fun x266 () Int)
(declare-fun x773 () Int)
(declare-fun x539 () Bool)
(declare-fun x227 () Bool)
(declare-fun x68 () Int)
(declare-fun x622 () Int)
(declare-fun x9 () Int)
(declare-fun x368 () x81)
(declare-fun x385 () Int)
(declare-fun x40 () Int)
(declare-fun x457 () x81)
(declare-fun x167 () Int)
(declare-fun x360 () Int)
(declare-fun x461 () x81)
(declare-fun x359 () Int)
(declare-fun x642 () Int)
(declare-fun x516 () Int)
(declare-fun x154 () Int)
(declare-fun x498 () Int)
(declare-fun x377 () Int)
(declare-fun x36 () Bool)
(declare-fun x416 () Int)
(declare-fun x70 () Bool)
(declare-fun x342 () Bool)
(declare-fun x233 () Int)
(declare-fun x537 () Int)
(declare-fun x750 () Int)
(declare-fun x58 () Int)
(declare-fun x595 () Int)
(declare-fun x335 () Int)
(declare-fun x784 () Bool)
(declare-fun x684 () Bool)
(declare-fun x98 () Int)
(declare-fun x370 () Int)
(declare-fun x123 () Int)
(declare-fun x719 () Int)
(declare-fun x483 () Int)
(declare-fun x337 () Int)
(declare-fun x623 () Int)
(declare-fun x27 () Int)
(declare-fun x302 () Int)
(declare-fun x221 () x81)
(declare-fun x303 () Bool)
(declare-fun x99 () Int)
(declare-fun x612 () Int)
(declare-fun x775 () Int)
(declare-fun x129 () Int)
(declare-fun x400 () x81)
(declare-fun x767 () Bool)
(declare-fun x104 () Int)
(declare-fun x418 () Int)
(declare-fun x293 () x81)
(declare-fun x288 () Bool)
(declare-fun x367 () x81)
(declare-fun x448 () Int)
(declare-fun x577 () Int)
(declare-fun x262 () Int)
(declare-fun x21 () Int)
(declare-fun x789 () Int)
(declare-fun x579 () Int)
(declare-fun x137 () Int)
(declare-fun x232 () x81)
(declare-fun x627 () Int)
(declare-fun x239 () Int)
(declare-fun x205 () x81)
(declare-fun x403 () Int)
(declare-fun x530 () Int)
(declare-fun x122 () Int)
(declare-fun x107 () Int)
(declare-fun x720 () Int)
(declare-fun x635 () Int)
(declare-fun x392 () Int)
(declare-fun x458 () Int)
(declare-fun x214 () Int)
(declare-fun x67 () Bool)
(declare-fun x760 () Bool)
(declare-fun x610 () Int)
(declare-fun x426 () Bool)
(declare-fun x625 () Int)
(declare-fun x299 () Int)
(declare-fun x525 () Int)
(declare-fun x86 () Int)
(declare-fun x273 (Int) Int)
(declare-fun x463 () Int)
(declare-fun x271 () Int)
(declare-fun x391 () Bool)
(declare-fun x283 () x81)
(declare-fun x355 () Int)
(declare-fun x569 () Int)
(declare-fun x71 () Int)
(declare-fun x499 () Int)
(declare-fun x371 () Bool)
(declare-fun x503 () Int)
(declare-fun x336 () Int)
(declare-fun x692 () Bool)
(declare-fun x380 () x81)
(declare-fun x159 () Int)
(declare-fun x464 () Int)
(declare-fun x179 () Int)
(declare-fun x522 () Int)
(declare-fun x33 () x81)
(declare-fun x515 () x81)
(declare-fun x735 () Int)
(declare-fun x788 () Int)
(declare-fun x781 () Int)
(declare-fun x263 (x81) Int)
(declare-fun x394 () Int)
(declare-fun x237 () Int)
(declare-fun x655 () Int)
(declare-fun x207 () x81)
(declare-fun x181 () Int)
(declare-fun x16 () Int)
(declare-fun x695 () Int)
(declare-fun x95 () Int)
(declare-fun x528 () Int)
(declare-fun x649 () Int)
(declare-fun x48 () Int)
(declare-fun x94 (Int) Int)
(declare-fun x421 () Int)
(declare-fun x698 () Int)
(declare-fun x715 () Int)
(declare-fun x552 () Int)
(declare-fun x142 () Int)
(declare-fun x188 () Int)
(declare-fun x486 () Int)
(declare-fun x7 () Int)
(declare-fun x722 () Int)
(declare-fun x645 () Int)
(declare-fun x759 () Int)
(declare-fun x209 () Int)
(declare-fun x56 () Int)
(declare-fun x345 (Int Int) Int)
(declare-fun x424 () Int)
(declare-fun x241 () Int)
(declare-fun x594 () x81)
(declare-fun x85 () Int)
(declare-fun x469 () x81)
(declare-fun x440 () Int)
(declare-fun x243 () Int)
(declare-fun x344 () Int)
(declare-fun x333 () Int)
(declare-fun x163 () Int)
(declare-fun x582 () Bool)
(declare-fun x636 (Int Int) Int)
(declare-fun x587 () x81)
(declare-fun x489 () Int)
(declare-fun x437 () Int)
(declare-fun x673 () Int)
(declare-fun x564 () x81)
(declare-fun x200 (Int) Int)
(declare-fun x329 () Int)
(declare-fun x584 () Bool)
(declare-fun x15 () Bool)
(declare-fun x389 () Int)
(declare-fun x758 () Int)
(declare-fun x218 () Int)
(declare-fun x34 () Int)
(declare-fun x574 () Int)
(declare-fun x369 () Int)
(declare-fun x431 () Int)
(declare-fun x487 () Bool)
(declare-fun x554 () Int)
(declare-fun x274 () Bool)
(declare-fun x618 () Bool)
(declare-fun x702 () Bool)
(declare-fun x130 () Int)
(declare-fun x384 () Int)
(declare-fun x408 () Int)
(declare-fun x225 () Int)
(declare-fun x53 () Int)
(declare-fun x696 () Int)
(declare-fun x740 () x81)
(declare-fun x398 () x81)
(declare-fun x128 () x81)
(declare-fun x353 () Int)
(declare-fun x605 () Int)
(declare-fun x654 () x81)
(declare-fun x452 () Int)
(declare-fun x17 () Int)
(declare-fun x116 () Int)
(declare-fun x709 () Int)
(declare-fun x229 (Int) x81)
(declare-fun x49 () Int)
(declare-fun x689 () Int)
(declare-fun x37 () Int)
(declare-fun x454 () Int)
(declare-fun x287 (Int) Int)
(declare-fun x506 () Int)
(declare-fun x524 () Int)
(declare-fun x428 () Int)
(declare-fun x669 () Int)
(declare-fun x592 (Int) Int)
(declare-fun x89 () Int)
(declare-fun x361 () Bool)
(declare-fun x217 (Int) Int)
(declare-fun x126 () Int)
(declare-fun x82 () Int)
(declare-fun x646 () Int)
(declare-fun x633 () Int)
(declare-fun x265 () Bool)
(declare-fun x256 () Int)
(declare-fun x324 () Int)
(declare-fun x399 () x81)
(declare-fun x600 () Int)
(declare-fun x51 () Int)
(declare-fun x44 () Int)
(declare-fun x78 () Int)
(declare-fun x310 () Bool)
(declare-fun x28 () Int)
(declare-fun x64 () Int)
(declare-fun x264 () Int)
(declare-fun x682 () Int)
(declare-fun x650 () Bool)
(declare-fun x738 () Bool)
(declare-fun x453 () Int)
(declare-fun x697 (x81) Int)
(declare-fun x444 () Int)
(declare-fun x171 () Int)
(declare-fun x562 () x81)
(declare-fun x197 () Int)
(declare-fun x216 () Int)
(declare-fun x751 (x81) Int)
(declare-fun x746 () Int)
(declare-fun x52 () x81)
(declare-fun x314 () Int)
(declare-fun x699 () Int)
(declare-fun x678 () Int)
(declare-fun x723 () Int)
(declare-fun x177 () Int)
(declare-fun x747 () Int)
(declare-fun x358 () Int)
(declare-fun x787 () Bool)
(declare-fun x3 () Int)
(declare-fun x327 () Bool)
(declare-fun x755 () Int)
(declare-fun x757 () Bool)
(declare-fun x619 () Int)
(declare-fun x74 () Bool)
(declare-fun x269 () Int)
(declare-fun x305 () Int)
(declare-fun x125 () x81)
(declare-fun x679 () Int)
(declare-fun x196 () Int)
(declare-fun x617 () x81)
(declare-fun x455 () Bool)
(declare-fun x726 () Int)
(declare-fun x295 () Bool)
(declare-fun x417 () Int)
(declare-fun x436 () Bool)
(declare-fun x566 () x81)
(declare-fun x657 (x81) Int)
(declare-fun x148 () Int)
(declare-fun x462 () Int)
(declare-fun x258 () Int)
(declare-fun x194 () Int)
(declare-fun x87 () Bool)
(declare-fun x165 () Int)
(declare-fun x481 () Int)
(declare-fun x651 () Int)
(declare-fun x507 () Int)
(declare-fun x596 () Int)
(declare-fun x182 () Int)
(declare-fun x201 () Bool)
(declare-fun x598 () Int)
(declare-fun x707 () Int)
(declare-fun x663 () Int)
(declare-fun x411 () Int)
(declare-fun x768 () Int)
(declare-fun x644 () Int)
(declare-fun x170 () Int)
(declare-fun x315 () Bool)
(declare-fun x365 () Int)
(declare-fun x534 () Bool)
(declare-fun x356 () Bool)
(declare-fun x279 () Int)
(declare-fun x471 () Int)
(declare-fun x206 () Int)
(declare-fun x231 () Bool)
(declare-fun x523 () Bool)
(declare-fun x607 () Int)
(declare-fun x366 () Int)
(declare-fun x423 () Int)
(declare-fun x546 () Int)
(declare-fun x470 () x81)
(declare-fun x510 () Int)
(declare-fun x762 () Int)
(declare-fun x701 () Int)
(declare-fun x591 () Int)
(declare-fun x43 () Int)
(declare-fun x173 () Int)
(declare-fun x393 () Int)
(declare-fun x180 () Int)
(declare-fun x210 () Int)
(declare-fun x140 () Int)
(declare-fun x749 () Int)
(declare-fun x765 () Int)
(declare-fun x152 () x81)
(declare-fun x141 () Int)
(declare-fun x741 () Int)
(declare-fun x321 () Int)
(declare-fun x676 () Int)
(declare-fun x290 () Int)
(declare-fun x168 () Int)
(declare-fun x1 () Bool)
(declare-fun x323 () Int)
(declare-fun x731 () Int)
(declare-fun x136 () Int)
(declare-fun x621 () Bool)
(declare-fun x688 () Int)
(declare-fun x390 () Int)
(declare-fun x754 () Int)
(declare-fun x25 () Bool)
(declare-fun x8 () Bool)
(declare-fun x208 () Int)
(declare-fun x238 () Int)
(declare-fun x153 () Int)
(declare-fun x717 () x81)
(declare-fun x46 () Int)
(declare-fun x520 () Bool)
(declare-fun x480 () Int)
(declare-fun x687 () Int)
(declare-fun x134 () Int)
(declare-fun x309 () Int)
(declare-fun x291 () Int)
(declare-fun x121 () x81)
(declare-fun x19 () x81)
(declare-fun x261 () x81)
(declare-fun x325 () Int)
(declare-fun x774 () Int)
(declare-fun x278 () Int)
(declare-fun x75 () Bool)
(declare-fun x133 () Int)
(declare-fun x382 () Int)
(declare-fun x541 () Int)
(declare-fun x131 () Int)
(declare-fun x330 () Int)
(declare-fun x475 (Int Int) Int)
(declare-fun x144 () Int)
(declare-fun x641 () Bool)
(declare-fun x659 () Int)
(declare-fun x59 () Bool)
(declare-fun x661 (x81) Int)
(declare-fun x161 () Int)
(declare-fun x96 (x81) Int)
(declare-fun x54 () Int)
(declare-fun x383 () Int)
(declare-fun x57 () Int)
(declare-fun x235 () Int)
(declare-fun x599 (x81) Int)
(declare-fun x456 () Int)
(declare-fun x106 () Int)
(declare-fun x346 () x81)
(declare-fun x286 () x81)
(declare-fun x753 () Bool)
(declare-fun x97 () Bool)
(declare-fun x790 () Int)
(declare-fun x276 () x81)
(declare-fun x415 () Int)
(declare-fun x550 () Int)
(declare-fun x761 () Int)
(declare-fun x786 () Int)
(declare-fun x226 () Int)
(declare-fun x429 () Int)
(declare-fun x174 () Bool)
(declare-fun x92 () x81)
(declare-fun x667 () x81)
(declare-fun x583 () Int)
(declare-fun x76 () Int)
(declare-fun x90 () Int)
(declare-fun x703 () Int)
(declare-fun x634 () Int)
(declare-fun x363 () x81)
(declare-fun x282 () Int)
(declare-fun x467 () x81)
(declare-fun x476 () Int)
(declare-fun x581 () Int)
(declare-fun x497 () Bool)
(declare-fun x112 () Int)
(declare-fun x764 () x81)
(declare-fun x468 () Bool)
(declare-fun x298 () Bool)
(declare-fun x55 () Int)
(declare-fun x451 () Bool)
(declare-fun x285 () x81)
(declare-fun x517 () Int)
(declare-fun x691 () Int)
(declare-fun x120 () Int)
(declare-fun x31 () Bool)
(declare-fun x307 () Int)
(declare-fun x162 () Int)
(declare-fun x45 () Int)
(declare-fun x742 () Int)
(declare-fun x26 () x81)
(declare-fun x328 () Int)
(declare-fun x220 (x81) Int)
(declare-fun x438 () Int)
(declare-fun x782 () Int)
(declare-fun x576 () Bool)
(declare-fun x69 () Int)
(declare-fun x578 () Int)
(declare-fun x736 () Int)
(declare-fun x647 () Int)
(declare-fun x117 () Int)
(declare-fun x563 () Int)
(declare-fun x172 () Int)
(declare-fun x35 () Bool)
(declare-fun x694 () Int)
(declare-fun x275 () x81)
(declare-fun x185 () Int)
(declare-fun x710 () Bool)
(declare-fun x756 () Int)
(declare-fun x386 () x81)
(declare-fun x502 () Int)
(declare-fun x317 () Int)
(declare-fun x334 () Int)
(declare-fun x624 () Int)
(declare-fun x145 () Int)
(declare-fun x690 () Int)
(declare-fun x555 () Int)
(declare-fun x32 () Int)
(declare-fun x292 () Int)
(declare-fun x664 () Int)
(declare-fun x734 () x81)
(declare-fun x397 () x81)
(declare-fun x114 () Bool)
(declare-fun x341 () Int)
(declare-fun x748 () Int)
(declare-fun x601 () Int)
(declare-fun x156 () Int)
(declare-fun x683 (Int) Int)
(declare-fun x478 () Int)
(declare-fun x752 () Int)
(declare-fun x250 () Int)
(declare-fun x39 () Int)
(declare-fun x372 () Int)
(declare-fun x127 () Int)
(declare-fun x211 () Int)
(declare-fun x640 () Int)
(declare-fun x362 () Int)
(declare-fun x466 () Int)
(declare-fun x442 (x81) Int)
(declare-fun x460 () Int)
(declare-fun x375 () Int)
(declare-fun x446 () Bool)
(declare-fun x79 () Int)
(declare-fun x474 () Int)
(declare-fun x602 () Int)
(declare-fun x280 () Bool)
(declare-fun x427 () Bool)
(declare-fun x223 () Int)
(declare-fun x671 () Int)
(declare-fun x222 () Int)
(declare-fun x527 (Int) Int)
(declare-fun x551 () Int)
(declare-fun x158 () Int)
(declare-fun x4 () Int)
(declare-fun x488 () x81)
(declare-fun x422 () Bool)
(declare-fun x425 () Int)
(declare-fun x300 () x81)
(declare-fun x490 () x81)
(declare-fun x268 (x81) Int)
(declare-fun x772 (Int Int) Int)
(declare-fun x47 () Int)
(declare-fun x543 () Int)
(declare-fun x500 () Int)
(declare-fun x630 () Int)
(declare-fun x511 () Int)
(declare-fun x674 () Int)
(declare-fun x294 () Bool)
(declare-fun x693 () Int)
(declare-fun x248 () x81)
(declare-fun x505 () Int)
(declare-fun x88 () Int)
(declare-fun x465 () Int)
(declare-fun x407 () Int)
(declare-fun x155 () Int)
(declare-fun x705 () Int)
(declare-fun x666 () Int)
(declare-fun x652 () x81)
(declare-fun x420 () x81)
(declare-fun x662 () Int)
(declare-fun x493 () Int)
(declare-fun x267 () Int)
(declare-fun x708 () Int)
(declare-fun x547 () Int)
(declare-fun x606 () Int)
(declare-fun x338 () Int)
(declare-fun x567 () Bool)
(declare-fun x435 () Int)
(declare-fun x509 () Int)
(declare-fun x378 () Int)
(declare-fun x160 () Int)
(declare-fun x542 () Int)
(declare-fun x272 (Int) Int)
(declare-fun x169 () Int)
(declare-fun x270 (x81) Int)
(declare-fun x545 () Bool)
(declare-fun x236 () Bool)
(declare-fun x22 (Int Int) Int)
(declare-fun x477 () x81)
(declare-fun x373 () Int)
(declare-fun x351 () Int)
(declare-fun x13 () Int)
(declare-fun x685 () x81)
(declare-fun x332 () Int)
(declare-fun x41 (Int) Int)
(declare-fun x706 () Int)
(declare-fun x518 () Int)
(declare-fun x253 () Int)
(declare-fun x2 () Int)
(declare-fun x105 () Int)
(declare-fun x61 () Int)
(declare-fun x193 () Bool)
(declare-fun x247 () Int)
(declare-fun x157 () x81)
(declare-fun x296 () Bool)
(declare-fun x63 () Int)
(declare-fun x632 () Int)
(declare-fun x281 () Int)
(declare-fun x139 () Int)
(declare-fun x178 () Int)
(declare-fun x430 () Int)
(declare-fun x396 () Int)
(declare-fun x432 () Bool)
(declare-fun x714 () Int)
(declare-fun x766 () Int)
(declare-fun x119 (Int Int) Int)
(declare-fun x538 () x81)
(declare-fun x224 () Int)
(declare-fun x449 () Int)
(declare-fun x531 () Int)
(declare-fun x665 () Int)
(declare-fun x716 () Int)
(declare-fun x132 () Bool)
(declare-fun x244 () x81)
(declare-fun x721 () Int)
(declare-fun x319 () x81)
(declare-fun x215 () Int)
(declare-fun x254 () Int)
(declare-fun x739 () Int)
(declare-fun x213 () Int)
(declare-fun x501 (x81) Int)
(declare-fun x733 () x81)
(declare-fun x504 () Bool)
(declare-fun x725 () Int)
(declare-fun x5 () Int)
(declare-fun x14 () Bool)
(declare-fun x18 () Int)
(declare-fun x60 () Int)
(declare-fun x472 () Int)
(declare-fun x195 () x81)
(declare-fun x147 () Int)
(declare-fun x496 () Int)
(declare-fun x686 () Int)
(declare-fun x412 () Int)
(declare-fun x680 () Int)
(declare-fun x113 () x81)
(declare-fun x405 () Int)
(declare-fun x406 () Int)
(declare-fun x639 () x81)
(declare-fun x484 () Int)
(declare-fun x521 () Int)
(declare-fun x447 () Int)
(declare-fun x769 () Int)
(declare-fun x65 () Int)
(declare-fun x589 () Int)
(declare-fun x548 () Int)
(declare-fun x585 () Int)
(declare-fun x604 () Int)
(declare-fun x670 () x81)
(declare-fun x12 () Int)
(declare-fun x414 () Int)
(declare-fun x289 () Int)
(declare-fun x573 (x81) Int)
(declare-fun x395 () x81)
(declare-fun x419 () Int)
(declare-fun x668 () Int)
(declare-fun x495 () Int)
(declare-fun x443 () Int)
(declare-fun x572 () Int)
(declare-fun x778 () Bool)
(declare-fun x10 () Int)
(declare-fun x146 () Int)
(declare-fun x485 () Int)
(declare-fun x514 () Int)
(declare-fun x312 () Bool)
(declare-fun x91 () Int)
(declare-fun x532 () Int)
(declare-fun x763 () Int)
(declare-fun x549 () Int)
(declare-fun x326 () Int)
(declare-fun x620 () Int)
(define-fun x118 ((x81 x81) (x249 Int)) x81 (ite ((_ is x111) x81) (x111 (x83 x81) (+ x249 (x658 x81))) (ite ((_ is x316) x81) (x316 (x571 x81) (x614 x81) (+ x249 (x257 x81))) (x558 (+ x249 (x556 x81))))))
(define-fun x186 ((x301 Int)) Int (ite (and (<= 0 x301) (< x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x301 (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x166 ((x301 Int)) Int (ite (and (>= x301 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x301 0)) (+ x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301))
(define-fun x38 ((x301 Int)) Int (ite (and (>= x301 0) (< x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x301 (ite (and (>= x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x301)) (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x301) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301)) (+ x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x475 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x771 ((x183 Int)) Bool (and (>= x183 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183)))
(define-fun x313 ((x183 Int) (x519 Int)) Bool (=> (and (> x519 0) (< 0 x183)) (and (>= (x345 x183 x519) 0) (>= x183 (x345 x183 x519)))))
(define-fun x66 ((x183 Int) (x519 Int)) Bool (=> (and (and (<= 1 x519) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x519)) (and (<= 0 x183) (< x183 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x345 x183 x519) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x345 x183 x519)))))
(define-fun x785 ((x183 Int) (x519 Int)) Bool (=> (and (< 1 x519) (> x183 x519)) (< (x345 x183 x519) x183)))
(define-fun x744 ((x183 Int) (x519 Int)) Bool (=> (and (> x183 0) (> x519 0)) (= (= 0 (x345 x183 x519)) (> x519 x183))))
(define-fun x234 ((x183 Int) (x519 Int)) Bool (=> (and (> x519 0) (> x183 0)) (and (< (- x183 x519) (x636 (x345 x183 x519) x519)) (>= x183 (x636 (x345 x183 x519) x519)))))
(define-fun x593 ((x183 Int) (x519 Int)) Bool (and (x234 x183 x519) (x66 x183 x519) (x744 x183 x519) (x313 x183 x519) (x785 x183 x519)))
(define-fun x388 ((x183 Int)) Bool (= 0 (x345 0 x183)))
(define-fun x340 ((x183 Int)) Bool (= (x345 x183 1) x183))
(define-fun x404 ((x183 Int)) Bool (=> (not (= 0 x183)) (= (x345 x183 x183) 1)))
(define-fun x348 ((x183 Int)) Bool (and (x388 x183) (x404 x183) (x340 x183)))
(define-fun x24 ((x183 Int)) Bool (and (= x183 (x22 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183)) (= (x22 x183 115792089237316195423570985008687907853269984665640564039457584007913129639935) x183)))
(define-fun x184 ((x183 Int)) Bool (and (= 0 (x22 x183 0)) (= (x22 0 x183) 0)))
(define-fun x704 ((x183 Int)) Bool (= x183 (x22 x183 x183)))
(define-fun x357 ((x183 Int)) Bool (and (x704 x183) (x24 x183) (x184 x183)))
(define-fun x176 ((x183 Int) (x519 Int)) Bool (= (x22 x183 x519) (x22 x519 x183)))
(define-fun x629 ((x183 Int) (x519 Int)) Bool (and (<= 0 (x22 x183 x519)) (=> (>= x183 0) (<= (x22 x183 x519) x183)) (=> (>= x519 0) (<= (x22 x183 x519) x519))))
(define-fun x409 ((x183 Int) (x519 Int)) Bool (and (x629 x183 x519) (x176 x183 x519)))
(define-fun x73 ((x183 Int) (x519 Int)) Bool (= (x636 x519 x183) (x636 x183 x519)))
(define-fun x780 ((x183 Int) (x519 Int)) Bool (and (=> (and (> 0 x183) (> x519 0)) (< (x636 x183 x519) 0)) (=> (and (> x183 0) (> 0 x519)) (> 0 (x636 x183 x519))) (=> (and (> x183 0) (> x519 0)) (> (x636 x183 x519) 0)) (=> (and (< x519 0) (< x183 0)) (< 0 (x636 x183 x519)))))
(define-fun x260 ((x183 Int) (x519 Int)) Bool (=> (and (> x183 0) (< 0 x519)) (= (< (x636 x183 x519) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x519 (x345 (x38 (x636 x183 x519)) x183)))))
(define-fun x732 ((x183 Int) (x519 Int)) Bool (=> (and (not (= 0 x519)) (not (= x183 0))) (and (= x183 (x345 (x636 x183 x519) x519)) (= (x345 (x636 x183 x519) x183) x519))))
(define-fun x202 ((x183 Int) (x519 Int)) Bool (=> (and (< 0 x519) (> x183 0)) (= (< (x345 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) x519) (> (x636 x183 x519) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x102 ((x183 Int) (x519 Int)) Bool (and (= (x38 (x636 x183 (- x519 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x38 (x636 x183 x519))) (= (x38 (x636 x183 x519)) (x38 (x636 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x519 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x38 (x636 x183 x519)) (x38 (x636 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) x519)))))
(define-fun x311 ((x183 Int) (x519 Int)) Bool (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) (> x183 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x519) (> x519 0))) (= (>= (x636 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) x519) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183) (x345 57896044618658097711785492504343953926634992332820282019728792003956564819968 x519)))) (=> (and (and (<= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x183 0)) (and (<= x519 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x519))) (= (<= (x636 x183 x519) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x345 57896044618658097711785492504343953926634992332820282019728792003956564819967 x519) x183))) (=> (and (and (> x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183)) (and (<= x519 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x519))) (= (>= (x345 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x519)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183)) (<= (x636 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x519 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x183) (> x183 0)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x519) (> x519 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x345 57896044618658097711785492504343953926634992332820282019728792003956564819968 x183) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x519)) (>= (x636 x183 (- x519 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968))))))
(define-fun x653 ((x183 Int) (x519 Int)) Bool (and (x202 x183 x519) (x732 x183 x519) (x311 x183 x519) (x260 x183 x519) (x780 x183 x519) (x73 x183 x519) (x102 x183 x519)))
(define-fun x192 ((x183 Int)) Bool (and (= 0 (x636 0 x183)) (= 0 (x636 x183 0))))
(define-fun x381 ((x183 Int)) Bool (and (= x183 (x636 x183 1)) (= (x636 1 x183) x183)))
(define-fun x728 ((x183 Int)) Bool (and (x381 x183) (x192 x183)))
(define-fun x473 ((x183 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x772 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x772 x183 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x433 ((x183 Int)) Bool (and (= (x772 x183 0) x183) (= (x772 0 x183) x183)))
(define-fun x50 ((x183 Int)) Bool (= x183 (x772 x183 x183)))
(define-fun x331 ((x183 Int)) Bool (and (x473 x183) (x433 x183) (x50 x183)))
(define-fun x628 ((x183 Int) (x519 Int)) Bool (= (x772 x519 x183) (x772 x183 x519)))
(define-fun x536 ((x183 Int) (x519 Int)) Bool (and (<= (x772 x183 x519) (+ x519 x183)) (=> (<= 0 x183) (<= x183 (x772 x183 x519))) (=> (<= 0 x519) (>= (x772 x183 x519) x519))))
(define-fun x439 ((x183 Int) (x519 Int)) Bool (and (x628 x183 x519) (x536 x183 x519)))
(define-fun x672 ((x737 Int)) Int (ite (= 128 x737) x281 (x94 x737)))
(define-fun x730 ((x737 Int)) Int (ite (= 160 x737) x4 (x672 x737)))
(define-fun x491 ((x737 Int)) Int (ite (= x737 192) x412 (x730 x737)))
(define-fun x108 ((x737 Int)) Int (ite (= 224 x737) x695 (x491 x737)))
(define-fun x199 ((x737 Int)) Int (ite (= 256 x737) x136 (x108 x737)))
(define-fun x101 ((x737 Int)) Int (ite (= x737 128) x27 (x683 x737)))
(define-fun x540 ((x737 Int)) Int (ite (= 160 x737) x496 (x101 x737)))
(define-fun x533 ((x737 Int)) Int (ite (= x737 192) x71 (x540 x737)))
(define-fun x724 ((x737 Int)) Int (ite (= 224 x737) x518 (x533 x737)))
(define-fun x115 ((x737 Int)) Int (ite (= x737 256) x671 (x724 x737)))
(define-fun x711 ((x737 Int)) Int (ite (= 128 x737) x522 (x527 x737)))
(define-fun x648 ((x737 Int)) Int (ite (= x737 160) x233 (x711 x737)))
(define-fun x322 ((x737 Int)) Int (ite (= 128 x737) x513 (x273 x737)))
(define-fun x110 ((x737 Int)) Int (ite (= 160 x737) x390 (x322 x737)))
(define-fun x284 ((x737 x81)) Int (ite (= x615 x737) x210 (x697 x737)))
(define-fun x350 ((x737 x81)) Int (ite (= x737 x652) x548 (x268 x737)))
(define-fun x544 ((x737 x81)) Int (ite (= x737 x420) x417 (x751 x737)))
(define-fun x30 ((x737 x81)) Int (ite (= x737 x244) x595 (x573 x737)))
(define-fun x304 ((x737 x81)) Int (ite (= x737 x733) x246 (x191 x737)))
(define-fun x718 ((x737 Int)) Int (ite (= x737 x489) x745 (x217 x737)))
(define-fun x783 ((x737 Int)) Int (ite (= x737 128) x408 (x200 x737)))
(define-fun x189 ((x737 Int)) Int (ite (= x737 160) x369 (x783 x737)))
(define-fun x588 ((x737 Int)) Int (ite (= 192 x737) x334 (x189 x737)))
(define-fun x72 ((x737 Int)) Int (ite (= 224 x737) x472 (x588 x737)))
(define-fun x374 ((x737 Int)) Int (ite (= 256 x737) x68 (x72 x737)))
(define-fun x608 ((x737 Int)) Int (ite (= x737 128) x449 (x272 x737)))
(define-fun x512 ((x737 Int)) Int (ite (= x737 160) x282 (x608 x737)))
(define-fun x482 ((x737 Int)) Int (ite (= 192 x737) x630 (x512 x737)))
(define-fun x109 ((x737 Int)) Int (ite (= x737 224) x665 (x482 x737)))
(define-fun x681 ((x737 Int)) Int (ite (= x737 256) x82 (x109 x737)))
(define-fun x320 ((x737 Int)) Int (ite (= x737 128) x605 (x592 x737)))
(define-fun x609 ((x737 Int)) Int (ite (= 160 x737) x687 (x320 x737)))
(define-fun x252 ((x737 Int)) Int (ite (= 128 x737) x180 (x287 x737)))
(define-fun x149 ((x737 Int)) Int (ite (= x737 160) x635 (x252 x737)))
(define-fun x255 ((x183 Int) (x519 Int) (x245 Int) (x198 Int)) Bool (=> (and (<= x183 x245) (<= x519 x198) (>= x183 0) (>= x519 0)) (<= (x636 x183 x519) (x636 x245 x198))))
(define-fun x613 ((x183 Int) (x519 Int) (x245 Int) (x198 Int)) Bool (=> (= x245 x183) (= (- (x636 x183 x519) (x636 x245 x198)) (x636 x183 (- x519 x198)))))
(define-fun x700 ((x183 Int)) Bool (=> (and (not (= x183 2094874590)) (not (= x183 558109909)) (not (= 436938878 x183)) (not (= 2265735533 x183)) (not (= 1814410054 x183)) (not (= x183 1763987465)) (not (= x183 2507842956)) (not (= x183 699302164)) (not (= 1461501637330902918203684832716283019655932542975 x183)) (not (= 3995103268 x183)) (not (= x183 1710941022)) (not (= x183 231365057)) (not (= x183 2746363844)) (< 10000 x183) (not (= x183 2991206654)) (not (= x183 3133049407)) (not (= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (not (= x183 606387804)) (not (= 3647180086 x183)) (not (= 3058907103 x183)) (not (= x183 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (not (= x183 4032373034)) (not (= 761373525 x183)) (not (= x183 3207937467)) (not (= 1980270339 x183)) (not (= x183 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x183 1161348331))) (not ((_ is x558) (x229 x183)))))
(assert (x771 x278))
(assert (= (+ (x96 x125) 1) (x96 (x118 x125 1))))
(assert (x771 x703))
(assert (x700 x459))
(assert (x771 x782))
(assert (= (+ 4 (x96 x434)) (x96 (x118 x434 4))))
(assert (x771 x620))
(assert (x771 x551))
(assert (= (x96 (x229 x714)) x714))
(assert (x771 x705))
(assert (x771 x383))
(assert (x771 x250))
(assert (x771 x95))
(assert (not x67))
(assert (x771 x673))
(assert (= (x96 (x558 3647180086)) 3647180086))
(assert (=> (<= x156 10000) (= (x229 x156) (x558 x156))))
(assert (x771 x565))
(assert (x771 x137))
(assert (x771 x425))
(assert (x700 x156))
(assert (x771 x254))
(assert (x728 x163))
(assert (= x5 (x96 (x229 x5))))
(assert (= (x558 3995103268) (x229 3995103268)))
(assert (x771 x366))
(assert (=> (>= 10000 x335) (= (x229 x335) (x558 x335))))
(assert (= 606387804 (x96 (x558 606387804))))
(assert (x771 x528))
(assert (x771 x664))
(assert (x348 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x771 x122))
(assert (= (x96 (x229 x775)) x775))
(assert (x771 x495))
(assert (x771 x326))
(assert (= (x96 (x229 x510)) x510))
(assert (x700 x243))
(assert (=> (>= 10000 x107) (= (x229 x107) (x558 x107))))
(assert (=> (<= x17 10000) (= (x558 x17) (x229 x17))))
(assert (= x63 (x96 (x229 x63))))
(assert (x771 x671))
(assert (= (+ (x96 x368) 1) (x96 (x118 x368 1))))
(assert (= (+ 1 (x96 x285)) (x96 (x118 x285 1))))
(assert (x771 x129))
(assert (x771 x607))
(assert (x771 x541))
(assert (x771 x508))
(assert (= (+ 1 (x96 x467)) (x96 (x118 x467 1))))
(assert (x771 x790))
(assert (=> (>= 10000 x428) (= (x229 x428) (x558 x428))))
(assert (x771 x53))
(assert (=> (<= x736 10000) (= (x558 x736) (x229 x736))))
(assert (x771 x781))
(assert (x771 x680))
(assert (x771 x385))
(assert (x771 x372))
(assert (x771 x384))
(assert (= (x96 (x558 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x771 x167))
(assert (x771 x788))
(assert (x771 x649))
(assert (x409 x117 x150))
(assert (x771 x410))
(assert (x771 x546))
(assert (x331 x226))
(assert (x771 x105))
(assert (x357 x197))
(assert (= x225 (x96 (x229 x225))))
(assert (x771 x138))
(assert (x771 x521))
(assert (= (x558 1814410054) (x229 1814410054)))
(assert (x771 x4))
(assert (= (x229 4032373034) (x558 4032373034)))
(assert (=> (<= x459 10000) (= (x229 x459) (x558 x459))))
(assert (x771 x140))
(assert (x771 x606))
(assert (x348 (ite (< x450 57896044618658097711785492504343953926634992332820282019728792003956564819968) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))))
(assert (x771 x688))
(assert (x728 x689))
(assert (x771 x292))
(assert (x771 x643))
(assert (x771 x595))
(assert (x771 x142))
(assert (x728 x292))
(assert (x771 x460))
(assert (x771 x786))
(assert (x771 x424))
(assert (x771 x382))
(assert (x771 x779))
(assert (x771 x100))
(assert (x771 x479))
(assert (x653 x752 x689))
(assert (= (x558 1161348331) (x229 1161348331)))
(assert (x357 x9))
(assert (x771 x506))
(assert (= (+ (x96 x401) 1) (x96 (x118 x401 1))))
(assert (= (x96 (x118 x488 3)) (+ (x96 x488) 3)))
(assert (and (= (x636 3 3) 9) (= 27 (x636 9 3)) (= 81 (x636 9 9)) (= 81 (x636 27 3))))
(assert (x771 x676))
(assert (x771 x578))
(assert (x728 x246))
(assert (x593 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x450 57896044618658097711785492504343953926634992332820282019728792003956564819968) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))))
(assert (x771 x635))
(assert (x771 x196))
(assert (= x129 (x96 (x229 x129))))
(assert (= x377 (x96 (x229 x377))))
(assert (x771 x43))
(assert (x771 x572))
(assert (= true x201))
(assert (x771 x561))
(assert (= (x96 (x229 x748)) x748))
(assert (=> (>= 10000 x754) (= (x558 x754) (x229 x754))))
(assert (x700 x411))
(assert (x771 x518))
(assert (x771 x82))
(assert (x771 x640))
(assert (=> (>= 10000 x411) (= (x229 x411) (x558 x411))))
(assert (x771 x237))
(assert (x771 x408))
(assert (x357 x216))
(assert (x771 x308))
(assert (x771 x574))
(assert (=> (<= x323 10000) (= (x558 x323) (x229 x323))))
(assert (x771 x448))
(assert (x771 x187))
(assert (x771 x630))
(assert (=> (<= x158 10000) (= (x229 x158) (x558 x158))))
(assert (=> (<= x44 10000) (= (x558 x44) (x229 x44))))
(assert (= (x96 (x558 1710941022)) 1710941022))
(assert (x771 x211))
(assert (x771 x360))
(assert (x771 x537))
(assert (= (x96 (x118 x363 1)) (+ 1 (x96 x363))))
(assert (x771 x299))
(assert (x771 x154))
(assert (x771 x655))
(assert (= (x96 (x229 x736)) x736))
(assert (x771 x317))
(assert (x771 x169))
(assert (x771 x93))
(assert (x409 x91 x478))
(assert (x771 x188))
(assert (x771 x762))
(assert (x700 x208))
(assert (x771 x180))
(assert (x439 x479 x660))
(assert (x771 x5))
(assert (x700 x5))
(assert (x728 x693))
(assert (x771 x341))
(assert (x771 x660))
(assert (x771 x481))
(assert (x357 x160))
(assert (x700 x129))
(assert (x771 x214))
(assert (x771 x86))
(assert (x771 x32))
(assert (x771 x333))
(assert (x771 x449))
(assert (= (x96 (x558 2991206654)) 2991206654))
(assert (x700 x212))
(assert (x771 x171))
(assert (x771 x262))
(assert (x771 x513))
(assert (x771 x377))
(assert (x771 x596))
(assert (x771 x474))
(assert (= (+ (x96 x103) 1) (x96 (x118 x103 1))))
(assert (x771 x65))
(assert (x771 x591))
(assert (x771 x44))
(assert (x771 x736))
(assert (x771 x330))
(assert (= (x96 (x558 57896044618658097711785492504343953926634992332820282019728792003956564819968)) 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x439 x414 x159))
(assert (x728 x703))
(assert (x348 x430))
(assert (= x208 (x96 (x229 x208))))
(assert (x771 x429))
(assert (x771 x130))
(assert (x771 x146))
(assert (x700 x736))
(assert (= (x96 (x118 x400 1)) (+ (x96 x400) 1)))
(assert (= (x96 (x229 x17)) x17))
(assert (x771 x459))
(assert (x771 x603))
(assert (x771 x644))
(assert (x771 x586))
(assert (x771 x659))
(assert (x771 x117))
(assert (=> (<= x212 10000) (= (x558 x212) (x229 x212))))
(assert (x771 x505))
(assert (= (x558 3207937467) (x229 3207937467)))
(assert (x771 x215))
(assert (x771 x445))
(assert (x771 x600))
(assert (x771 x223))
(assert (x771 x79))
(assert (x771 x222))
(assert (x771 x589))
(assert (x771 x759))
(assert (x771 x458))
(assert (x771 x28))
(assert (x728 x752))
(assert (x409 x9 x632))
(assert (x728 x595))
(assert (x771 x526))
(assert (= (x96 (x118 x286 1)) (+ (x96 x286) 1)))
(assert (x653 x693 x703))
(assert (= 2094874590 (x96 (x558 2094874590))))
(assert (x771 x178))
(assert (x771 x500))
(assert (= (x96 (x118 x654 1)) (+ (x96 x654) 1)))
(assert (x771 x242))
(assert (x439 x336 x226))
(assert (= (x558 606387804) (x229 606387804)))
(assert (x771 x428))
(assert (x771 x774))
(assert (x771 x419))
(assert (x771 x522))
(assert (=> (>= 10000 x393) (= (x229 x393) (x558 x393))))
(assert (x771 x233))
(assert (x771 x7))
(assert (= x474 (x96 (x229 x474))))
(assert (x771 x306))
(assert (=> (<= x761 10000) (= (x229 x761) (x558 x761))))
(assert (x771 x563))
(assert (x700 x55))
(assert (x771 x415))
(assert (x771 x612))
(assert (x771 x440))
(assert (x771 x601))
(assert (= (x229 2991206654) (x558 2991206654)))
(assert (= (x96 (x229 x158)) x158))
(assert (x771 x332))
(assert (x331 x476))
(assert (x771 x745))
(assert (x771 x763))
(assert (x771 x645))
(assert (x771 x104))
(assert (=> (<= x138 10000) (= (x558 x138) (x229 x138))))
(assert (= (x96 (x229 x742)) x742))
(assert (x771 x605))
(assert (x771 x136))
(assert (=> (<= x786 10000) (= (x229 x786) (x558 x786))))
(assert (x653 x163 x430))
(assert (x771 x160))
(assert (x771 x336))
(assert (x700 x705))
(assert (x771 x328))
(assert (x771 x21))
(assert (= (x96 (x118 x420 1)) (+ (x96 x420) 1)))
(assert (x357 x188))
(assert (x771 x69))
(assert (x771 x585))
(assert (x771 x444))
(assert (x771 x279))
(assert (x653 x246 x163))
(assert (x728 x509))
(assert (x771 x674))
(assert (= (x96 (x558 699302164)) 699302164))
(assert (x771 x775))
(assert (= (x96 (x229 x782)) x782))
(assert (x771 x669))
(assert (x771 x29))
(assert (x700 x299))
(assert (= x411 (x96 (x229 x411))))
(assert (= x591 (x96 (x229 x591))))
(assert (x331 x660))
(assert (x771 x63))
(assert (x771 x447))
(assert (x771 x17))
(assert (x728 x530))
(assert (x771 x228))
(assert (x771 x218))
(assert (x700 x107))
(assert (x771 x634))
(assert (x771 x531))
(assert (x771 x124))
(assert (x700 x63))
(assert (x771 x91))
(assert (x771 x337))
(assert (= (x558 2094874590) (x229 2094874590)))
(assert (x728 x430))
(assert (= (x96 (x118 x128 1)) (+ (x96 x128) 1)))
(assert (x771 x12))
(assert (x771 x405))
(assert (= (x96 (x118 x667 1)) (+ (x96 x667) 1)))
(assert (= (x96 (x118 x670 1)) (+ (x96 x670) 1)))
(assert (= (x229 2507842956) (x558 2507842956)))
(assert (x409 x713 x516))
(assert (x771 x170))
(assert (= x138 (x96 (x229 x138))))
(assert (x771 x756))
(assert (=> (<= x243 10000) (= (x558 x243) (x229 x243))))
(assert (x771 x271))
(assert (x771 x417))
(assert (x771 x625))
(assert (x771 x76))
(assert (x700 x17))
(assert (x771 x369))
(assert (= (x558 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x229 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x357 x453))
(assert (x771 x547))
(assert (x771 x656))
(assert (x771 x789))
(assert (x771 x175))
(assert (x357 x117))
(assert (=> (<= x705 10000) (= (x229 x705) (x558 x705))))
(assert (x357 x169))
(assert (x771 x731))
(assert (x771 x62))
(assert (x771 x290))
(assert (x771 x210))
(assert (x771 x719))
(assert (x771 x145))
(assert (x700 x782))
(assert (=> (>= 10000 x782) (= (x229 x782) (x558 x782))))
(assert (x409 x690 x453))
(assert (x771 x329))
(assert (x771 x679))
(assert (x357 x478))
(assert (x409 x463 x188))
(assert (x771 x2))
(assert (x771 x456))
(assert (x771 x39))
(assert (x700 x742))
(assert (= 2265735533 (x96 (x558 2265735533))))
(assert (x771 x755))
(assert (x771 x84))
(assert (= (x96 (x118 x33 2)) (+ (x96 x33) 2)))
(assert (x771 x13))
(assert (x771 x334))
(assert (= (x229 3058907103) (x558 3058907103)))
(assert (x771 x378))
(assert (x771 x20))
(assert (x728 x417))
(assert (= x393 (x96 (x229 x393))))
(assert (x771 x64))
(assert (x771 x552))
(assert (x771 x390))
(assert (x771 x525))
(assert (x771 x159))
(assert (=> (>= 10000 x225) (= (x558 x225) (x229 x225))))
(assert (x771 x716))
(assert (x771 x590))
(assert (x771 x289))
(assert (= 3133049407 (x96 (x558 3133049407))))
(assert (x771 x352))
(assert (= (+ (x96 x685) 1) (x96 (x118 x685 1))))
(assert (= (x229 57896044618658097711785492504343953926634992332820282019728792003956564819967) (x558 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (=> (>= 10000 x591) (= (x229 x591) (x558 x591))))
(assert (x593 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x450) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))))
(assert (x771 x423))
(assert (=> (<= x208 10000) (= (x558 x208) (x229 x208))))
(assert (x771 x450))
(assert (x653 x530 x509))
(assert (x771 x472))
(assert (=> (<= x377 10000) (= (x558 x377) (x229 x377))))
(assert (= (x229 3647180086) (x558 3647180086)))
(assert (x771 x441))
(assert (= (x96 (x118 x52 1)) (+ 1 (x96 x52))))
(assert (x771 x777))
(assert (x409 x743 x216))
(assert (x700 x158))
(assert (x771 x443))
(assert (x771 x107))
(assert (x771 x48))
(assert (x771 x532))
(assert (x771 x47))
(assert (x700 x428))
(assert (x771 x264))
(assert (x771 x720))
(assert (x771 x23))
(assert (= (x229 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x558 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (=> (>= 10000 x510) (= (x229 x510) (x558 x510))))
(assert (x771 x633))
(assert (x771 x253))
(assert (x771 x698))
(assert (x771 x203))
(assert (x771 x162))
(assert (x771 x89))
(assert (x771 x765))
(assert (x409 x169 x160))
(assert (= x55 (x96 (x229 x55))))
(assert (x771 x133))
(assert (= (x96 (x229 x754)) x754))
(assert (= (x229 699302164) (x558 699302164)))
(assert (x771 x131))
(assert (x771 x610))
(assert (= (+ 1 (x96 x319)) (x96 (x118 x319 1))))
(assert (x771 x542))
(assert (x771 x696))
(assert (x700 x510))
(assert (= (x96 (x558 2507842956)) 2507842956))
(assert (x771 x297))
(assert (= (x96 (x558 4032373034)) 4032373034))
(assert (= (x96 (x558 1161348331)) 1161348331))
(assert (x771 x695))
(assert (x771 x663))
(assert (x771 x99))
(assert (x771 x463))
(assert (x700 x776))
(assert (= 231365057 (x96 (x558 231365057))))
(assert (x771 x454))
(assert (x771 x483))
(assert (x771 x71))
(assert (x331 x506))
(assert (x771 x741))
(assert (= (x96 (x558 436938878)) 436938878))
(assert (x357 x150))
(assert (x771 x235))
(assert (x771 x746))
(assert (= 1763987465 (x96 (x558 1763987465))))
(assert (x700 x754))
(assert (x771 x687))
(assert (x771 x466))
(assert (x771 x37))
(assert (x357 x463))
(assert (x771 x431))
(assert (x771 x494))
(assert (x771 x347))
(assert (x771 x247))
(assert (x771 x713))
(assert (x771 x691))
(assert (x771 x435))
(assert (x771 x3))
(assert (x771 x554))
(assert (x771 x370))
(assert (x348 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (+ (x96 x300) 1) (x96 (x118 x300 1))))
(assert (x771 x686))
(assert (x771 x776))
(assert (x771 x6))
(assert (x771 x721))
(assert (x771 x412))
(assert (x771 x16))
(assert (x771 x675))
(assert (x771 x418))
(assert (x771 x421))
(assert (= (x96 (x558 558109909)) 558109909))
(assert (x771 x476))
(assert (x771 x701))
(assert (x771 x394))
(assert (x771 x665))
(assert (= x494 (x96 (x229 x494))))
(assert (x771 x173))
(assert (x700 x786))
(assert (x771 x624))
(assert (x771 x267))
(assert (= (x96 (x118 x113 1)) (+ (x96 x113) 1)))
(assert (x593 57896044618658097711785492504343953926634992332820282019728792003956564819967 x430))
(assert (x771 x638))
(assert (x700 x393))
(assert (x771 x677))
(assert (x771 x344))
(assert (x771 x225))
(assert (x771 x45))
(assert (=> (<= x129 10000) (= (x558 x129) (x229 x129))))
(assert (x771 x246))
(assert (x357 x690))
(assert (x771 x68))
(assert (x771 x46))
(assert (x728 x416))
(assert (x771 x172))
(assert (x771 x90))
(assert (x771 x668))
(assert (x771 x627))
(assert (x771 x51))
(assert (x439 x506 x476))
(assert (x771 x743))
(assert (x771 x112))
(assert (x700 x44))
(assert (= (x96 (x558 1980270339)) 1980270339))
(assert (x771 x143))
(assert (x331 x336))
(assert (x771 x61))
(assert (x771 x259))
(assert (x771 x239))
(assert (x771 x682))
(assert (= (x96 (x229 x459)) x459))
(assert (x771 x742))
(assert (x771 x516))
(assert (x771 x577))
(assert (x771 x302))
(assert (x771 x694))
(assert (= (x229 3133049407) (x558 3133049407)))
(assert (x771 x158))
(assert (x771 x489))
(assert (x700 x748))
(assert (x331 x479))
(assert (= (x96 (x229 x323)) x323))
(assert (x771 x493))
(assert (x357 x516))
(assert (= 3207937467 (x96 (x558 3207937467))))
(assert (x771 x163))
(assert (x771 x339))
(assert (x771 x168))
(assert (x771 x631))
(assert (x771 x761))
(assert (x771 x314))
(assert (=> (>= 10000 x63) (= (x558 x63) (x229 x63))))
(assert (x771 x351))
(assert (x771 x49))
(assert (x771 x197))
(assert (x771 x406))
(assert (x771 x579))
(assert (x771 x213))
(assert (x771 x726))
(assert (x771 x40))
(assert (x771 x462))
(assert (x771 x194))
(assert (x771 x392))
(assert (x357 x375))
(assert (x771 x437))
(assert (x771 x662))
(assert (x771 x58))
(assert (x771 x758))
(assert (x771 x355))
(assert (x771 x486))
(assert (x771 x503))
(assert (x771 x507))
(assert (x771 x358))
(assert (x771 x98))
(assert (x771 x123))
(assert (x771 x510))
(assert (x771 x281))
(assert (x771 x18))
(assert (x771 x464))
(assert (x771 x376))
(assert (= (+ (x96 x26) 1) (x96 (x118 x26 1))))
(assert (= (x558 1763987465) (x229 1763987465)))
(assert (x771 x9))
(assert (x771 x548))
(assert (x771 x766))
(assert (= x156 (x96 (x229 x156))))
(assert (x700 x377))
(assert (x771 x715))
(assert (= (x229 558109909) (x558 558109909)))
(assert (x771 x478))
(assert (=> (>= 10000 x756) (= (x229 x756) (x558 x756))))
(assert (x357 x632))
(assert (x771 x387))
(assert (x771 x678))
(assert (x771 x393))
(assert (x771 x735))
(assert (x771 x318))
(assert (x771 x216))
(assert (x700 x335))
(assert (x700 x756))
(assert (x771 x575))
(assert (=> (>= 10000 x748) (= (x558 x748) (x229 x748))))
(assert (x771 x581))
(assert (x771 x120))
(assert (x771 x282))
(assert (x357 x373))
(assert (x771 x156))
(assert (x700 x138))
(assert (x771 x709))
(assert (x771 x324))
(assert (=> (<= x775 10000) (= (x558 x775) (x229 x775))))
(assert (x771 x309))
(assert (x771 x185))
(assert (= (x229 2265735533) (x558 2265735533)))
(assert (x771 x224))
(assert (= (x229 436938878) (x558 436938878)))
(assert (x771 x212))
(assert (x771 x56))
(assert (x771 x153))
(assert (x771 x484))
(assert (x771 x651))
(assert (= x786 (x96 (x229 x786))))
(assert (x771 x305))
(assert (x771 x714))
(assert (x771 x557))
(assert (x728 x370))
(assert (= (x229 761373525) (x558 761373525)))
(assert (= (x558 231365057) (x229 231365057)))
(assert (x357 x743))
(assert (x771 x480))
(assert (x771 x55))
(assert (= (x96 (x229 x44)) x44))
(assert (x409 x341 x481))
(assert (x771 x430))
(assert (x700 x225))
(assert (x771 x182))
(assert (x771 x411))
(assert (x771 x256))
(assert (x357 x481))
(assert (= (x96 (x558 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x771 x471))
(assert (x700 x591))
(assert (x771 x499))
(assert (x771 x343))
(assert (=> (<= x742 10000) (= (x558 x742) (x229 x742))))
(assert (= (x96 (x558 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x771 x642))
(assert (x771 x321))
(assert (x331 x414))
(assert (x771 x739))
(assert (x771 x226))
(assert (x357 x713))
(assert (x771 x699))
(assert (= (x96 (x558 1814410054)) 1814410054))
(assert (x771 x570))
(assert (=> (>= 10000 x776) (= (x229 x776) (x558 x776))))
(assert (x331 x86))
(assert (= x299 (x96 (x229 x299))))
(assert (= (x96 (x558 2746363844)) 2746363844))
(assert (x771 x559))
(assert (x771 x208))
(assert (x771 x141))
(assert (x771 x727))
(assert (x771 x485))
(assert (x771 x416))
(assert (x771 x389))
(assert (x409 x373 x146))
(assert (= (x558 1461501637330902918203684832716283019655932542975) (x229 1461501637330902918203684832716283019655932542975)))
(assert (x771 x693))
(assert (x771 x144))
(assert (x700 x775))
(assert (x771 x291))
(assert (= (x229 1980270339) (x558 1980270339)))
(assert (x771 x150))
(assert (= 3058907103 (x96 (x558 3058907103))))
(assert (x771 x373))
(assert (x771 x353))
(assert (= (x558 1710941022) (x229 1710941022)))
(assert (x700 x494))
(assert (x771 x34))
(assert (x771 x403))
(assert (x771 x583))
(assert (=> (<= x494 10000) (= (x558 x494) (x229 x494))))
(assert (x357 x91))
(assert (= (x96 (x229 x107)) x107))
(assert (x771 x365))
(assert (x771 x179))
(assert (x771 x258))
(assert (x771 x748))
(assert (x771 x769))
(assert (=> (<= x714 10000) (= (x558 x714) (x229 x714))))
(assert (x771 x690))
(assert (= x428 (x96 (x229 x428))))
(assert (= (+ (x96 x386) 1) (x96 (x118 x386 1))))
(assert (x700 x474))
(assert (x771 x88))
(assert (x771 x602))
(assert (x771 x325))
(assert (= (x96 (x118 x232 1)) (+ (x96 x232) 1)))
(assert (x653 x370 x416))
(assert (x771 x611))
(assert (=> (>= 10000 x474) (= (x558 x474) (x229 x474))))
(assert (x771 x749))
(assert (x771 x349))
(assert (x331 x159))
(assert (= (x96 (x558 3995103268)) 3995103268))
(assert (x771 x78))
(assert (x771 x413))
(assert (x771 x204))
(assert (x700 x714))
(assert (x771 x465))
(assert (x771 x623))
(assert (x771 x646))
(assert (x771 x524))
(assert (= (x96 (x229 x761)) x761))
(assert (x331 x123))
(assert (x409 x375 x197))
(assert (x771 x338))
(assert (x771 x362))
(assert (x771 x453))
(assert (= (x558 2746363844) (x229 2746363844)))
(assert (x771 x598))
(assert (x771 x555))
(assert (x771 x148))
(assert (= (+ (x96 x42) 1) (x96 (x118 x42 1))))
(assert (x357 x341))
(assert (x771 x549))
(assert (x771 x27))
(assert (x771 x85))
(assert (x771 x323))
(assert (x771 x498))
(assert (x700 x323))
(assert (x771 x147))
(assert (x771 x511))
(assert (x771 x335))
(assert (x771 x754))
(assert (= x756 (x96 (x229 x756))))
(assert (x771 x127))
(assert (x771 x155))
(assert (x771 x604))
(assert (x771 x164))
(assert (x771 x54))
(assert (x771 x517))
(assert (= x212 (x96 (x229 x212))))
(assert (=> (<= x55 10000) (= (x229 x55) (x558 x55))))
(assert (x771 x632))
(assert (x771 x452))
(assert (x700 x761))
(assert (x653 x163 x595))
(assert (= x705 (x96 (x229 x705))))
(assert (x653 x417 x292))
(assert (x771 x414))
(assert (x771 x569))
(assert (x771 x379))
(assert (x439 x86 x123))
(assert (= (=> (and (and (not (> 3207937467 x133)) (>= 1461501637330902918203684832716283019655932542975 x168) (<= x394 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (not (= x720 x679)) x684) (= x385 (x270 (x229 x474))) (<= 0 x547) (= (x263 (x229 x474)) x167) x455 (= x435 x596) x637 (= x755 x299) (<= 0 x385) (= x485 x688) (>= 1461501637330902918203684832716283019655932542975 x517) (>= 1461501637330902918203684832716283019655932542975 x485) (= x487 (not (= x326 x262))) (>= x168 0) (<= x546 1461501637330902918203684832716283019655932542975) (= (x560 x121) x394) (<= 0 x394) (= x168 x720) (<= x531 1461501637330902918203684832716283019655932542975) (= x677 x326) (<= x299 1461501637330902918203684832716283019655932542975) (= (not (= x722 x495)) x25) (>= 1461501637330902918203684832716283019655932542975 x474) (not (< x133 2094874590)) (>= 1461501637330902918203684832716283019655932542975 x435) (= x517 x679) (= x677 x722) (= x505 x495) (= x637 (or x487 x684)) x25 (= x262 x179) (= x531 x459) (= (not (= x164 x259)) x327) (<= x789 1461501637330902918203684832716283019655932542975) (= x547 x214) (= x394 x278) (>= x435 0) x371 (= (or x327 x36) x371) (<= 0 x237) (< 0 x167) (= x546 x307) (<= x547 1461501637330902918203684832716283019655932542975) (<= 0 x517) (<= 0 x531) (<= 0 x789) (>= x546 0) (= x259 x677) (>= x485 0) (= (not (= x307 x663)) x36) x535 (> 3995103268 x133) (= x382 x164) (<= 0 x755) (= x237 x663) (< 0 x474) (= (x316 (x229 x299) (x558 0) 0) x121) (= (< 0 (x263 (x229 x474))) x455) (= x535 (not (= x214 x596))) (<= x755 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x237) (= 3207937467 x133)) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x774) (< x148 1710941022) (= x774 x460) (> 2094874590 x148) (= x148 1161348331) (>= x774 0) (= x17 x755) (not (< x148 1161348331)) (= (x316 (x229 x17) (x558 1) 0) x92) (= (x316 (x229 x782) x92 0) x477) (= x774 (x661 x477)) (< 0 x644) (>= 1461501637330902918203684832716283019655932542975 x782) (= x644 (x263 (x229 x474))) (>= 1461501637330902918203684832716283019655932542975 x17) (= x76 x278) (= x782 x789)) (and (and (and (and (= x406 x424) (= x740 (x118 x113 1)) (= (x316 (x229 x428) (x558 3) 0) x195) (= x258 x267) (= x113 (x316 (x229 x591) x195 0)) (< x633 699302164) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x522) (= x403 x577) (>= x522 0) (= x633 606387804) (>= x233 0) (= (x573 x740) x233) (= x569 x61) (= x768 x279) (not (= 436938878 x633)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x233) (= x428 x677) (= x591 x517) (= x524 (x648 160)) (> x466 0) (< x633 2094874590) (= (x751 x113) x522) (not (= x633 231365057)) (= (x263 (x229 x474)) x466) (<= x591 1461501637330902918203684832716283019655932542975) (not (= 558109909 x633)) (< x633 1161348331) (= (x648 128) x570)) (and (and (= x769 (x263 (x229 x474))) (<= x156 1461501637330902918203684832716283019655932542975) (not (= 558109909 x579)) (not (= x579 436938878)) (>= x513 0) (>= x390 0) (= x338 x570) (= x179 x335) (= 606387804 x579) (= (x316 (x229 x335) (x558 3) 0) x275) (< x579 699302164) (= (x110 160) x549) (= (x316 (x229 x156) x275 0) x26) (= x513 (x751 x26)) (not (= 231365057 x579)) (= (x118 x26 1) x398) (= x589 (x110 128)) (< x579 2094874590) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x513) (= (x573 x398) x390) (> x769 0) (= x156 x168) (< x579 1161348331) (<= x390 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x524 x543)) (and (and (= x610 x549) (= (x316 (x229 x736) x529 0) x380) (not (= x93 436938878)) (= x529 (x316 (x229 x212) (x558 4) 0)) (= x736 x546) (>= 1461501637330902918203684832716283019655932542975 x736) (> 2094874590 x93) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) (= 558109909 x93) (>= x352 0) (= (x263 (x229 x474)) x643) (< x93 1161348331) (= x677 x212) (> x643 0) (= x589 x465) (not (= 231365057 x93)) (< x93 699302164) (= x352 x508) (= (x697 x380) x352)) (and (and (and (= x448 x196) (= x603 (x263 (x229 x474))) (= x547 x44) (>= x646 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x646) (< x378 2094874590) (not (= 1710941022 x378)) (<= x44 1461501637330902918203684832716283019655932542975) (not (= 1763987465 x378)) (> x603 0) (= (x268 x734) x646) (not (> 1710941022 x378)) (= x378 1814410054) (= (x316 (x229 x44) (x558 5) 0) x734) (= x347 x646) (not (> 1161348331 x378))) (and (and (and (= (x263 (x229 x474)) x425) (> 1161348331 x131) (<= 0 x788) (> 2094874590 x131) (= x642 x254) (< 0 x425) (<= x788 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 231365057 x131) (= x441 x788) (< x131 699302164)) (and (and (and (< 0 x392) (< x332 1161348331) (>= x16 0) (= x392 (x263 (x229 x474))) (= x332 761373525) (= x647 x16) (not (< x332 699302164)) (not (= x332 699302164)) (= x106 x694) (< x332 2094874590) (<= x16 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (and (= x647 x185) (not (= 3058907103 x337)) (not (= 2991206654 x337)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x396) (> 3207937467 x337) (not (< x337 2746363844)) (= x421 x396) (= 3133049407 x337) (not (= 2746363844 x337)) (>= x396 0) (> x682 0) (= (x263 (x229 x474)) x682) (not (> 2094874590 x337))) (and (and (and (ite x539 x539 (not (> x483 x595))) (= x777 (x191 x733)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (= (= x208 x459) x288) (= x677 x107) (<= 0 x140) (= x146 (ite (or (and (< x450 x600) (= (<= x600 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x600))) 1 0)) (= (ite (not x616) 1 0) x169) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3)) (< x3 0))) x59) (= x193 (= x89 x619)) (<= x418 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x77 x107) x526) (= (= x5 x459) x135) (> 3995103268 x440) (= x432 (= x104 1)) (= x231 (= x459 x754)) (= x781 (ite x274 1 0)) (= x120 x773) (= x777 x370) (= x216 (ite (or (and (= (<= x163 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x500 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x163 x500)) (and (> x163 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x500 57896044618658097711785492504343953926634992332820282019728792003956564819967))) 1 0)) (not (> 2094874590 x440)) (= (and (> x3 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3))) x468) (<= x163 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x5 x240) (= x640 x11) (= (= x358 x228) x580) (= (x772 x479 x660) x351) (= (x316 (x229 x55) (x558 0) 0) x566) (= x618 (not x59)) (= x88 x541) (= x117 (ite (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163)) (< x163 0)) (> x163 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 1 0)) (= (and (> x264 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x264) true)) x584) (= x436 (not x753)) (= x668 0) (> x625 0) (>= x203 0) (= x624 (x772 x414 x159)) (= x492 (x118 x33 2)) (< 0 x664) (= (not x219) x280) (< (x636 x246 x163) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x107 x489) (= (x22 x169 x160) x506) (= (x22 x91 x478) x660) (= (x316 (x229 x459) x283 0) x205) (= (x22 x463 x188) x130) x193 (= (and (= (<= x264 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x264 0)) x582) (= x595 (x186 (+ x430 x483))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x88) (= (and (< 0 x3) (= (<= x3 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) x1) x580 (= x716 (ite (or x274 x236) 1 0)) (= (x657 x717) x163) (= (x316 (x229 x754) x457 0) x368) (= 3207937467 x440) (= x414 (ite (not x712) 1 0)) (= x244 (x118 x420 1)) (= (not x568) x504) (= (ite (and (< 0 x450) (= true (<= x450 57896044618658097711785492504343953926634992332820282019728792003956564819967))) 1 0) x150) (not (< x440 3207937467)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x636 x417 x292)) (= (ite (or x231 x422) 1 0) x226) (> x716 0) (= x438 (x636 x693 x703)) (= x386 (x316 (x229 x107) (x558 2) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x228) (= x247 (ite x75 1 0)) (= x693 x246) (= (x263 (x229 x474)) x625) (= x559 0) (= x690 (ite (and (> x163 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163))) 1 0)) (>= x104 0) (= x479 (ite (not x534) 1 0)) (< 0 x85) (= x242 (x220 x587)) (<= x55 1461501637330902918203684832716283019655932542975) (= (ite (not x468) 1 0) x86) (ite x710 x710 (not (< x698 x788))) (= (x316 (x229 x107) (x558 4) 0) x248) (= (and (> x450 0) (= (<= x450 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) x534) (= x430 x696) (= x62 1) (= x315 (or (and (> 0 x3) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3))) (> x3 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x174 (or (and (< x450 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450))) (> x450 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x107 x223) (= x107 x182) (= x500 (ite (= 0 x450) 0 (ite (= (< x450 57896044618658097711785492504343953926634992332820282019728792003956564819968) false) (x345 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x450) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))) (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x38 (- (x345 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x450 57896044618658097711785492504343953926634992332820282019728792003956564819968) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))) 1))))))) (= x710 (not x584)) (= x346 (x316 (x229 x107) (x558 3) 0)) (= (not x1) x692) (= (not x8) x539) (= (not (< x120 x242)) x274) (>= 1461501637330902918203684832716283019655932542975 x754) (= x431 (x22 x743 x216)) (= (x316 (x229 x754) x346 0) x420) (= (not x545) x227) (<= 0 x452) (= x422 (= x634 1)) (>= x88 0) (= (x22 x341 x481) x668) (= (x22 x373 x146) x559) (= x173 (x268 x251)) (= x703 (x77 x223)) (ite x15 x15 (not (< x548 x173))) (= (or (and (< x264 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x264))) (> x264 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x545) (= x336 (x22 x375 x197)) (= (x316 (x229 x208) (x558 1) 0) x283) (= x397 (x118 x488 3)) (= x98 x65) (= (x560 x566) x88) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x173) (<= 0 x537) (= (x661 x205) x104) (= (x573 x399) x483) (= 0 x130) (= (x186 (+ x452 x640)) x417) (= x729 (x316 (x229 x754) (x558 1) 0)) (= (x316 (x229 x107) (x558 2) 0) x33) (= (x316 (x229 x208) (x558 5) 0) x652) (>= x788 0) (= (x316 (x229 x107) (x558 2) 0) x733) (= (x316 (x229 x459) x729 0) x19) (= x686 (ite x231 1 0)) (= (ite (= x163 0) 0 (ite (= (< x163 57896044618658097711785492504343953926634992332820282019728792003956564819968) false) (x345 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x163 57896044618658097711785492504343953926634992332820282019728792003956564819968) x163 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x163 1)))))) (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x38 (- (x345 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x163 57896044618658097711785492504343953926634992332820282019728792003956564819968) x163 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x163 1)))))) 1)))))) x600) (= x717 (x118 x386 1)) (= 1980270339 x581) (= x208 x444) (= x91 (ite (not x426) 1 0)) (= x427 (> x120 x676)) (= (x661 x354) x140) (< x581 2094874590) (= (x316 (x229 x5) x261 0) x615) (= x261 (x316 (x229 x107) (x558 4) 0)) (<= x452 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x242 0) (= x99 x696) (not (< x581 1710941022)) (>= x649 0) (= (not x174) x361) (= x463 (x22 x713 x516)) (= (x316 (x229 x459) x395 0) x354) (= x197 (ite (not x315) 1 0)) (<= 0 x228) (>= x292 0) (<= x649 1461501637330902918203684832716283019655932542975) (= (and (> x450 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450) true)) x74) (= x209 (x636 x370 x416)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x634) (<= x104 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x650 (or (and (= true (<= x264 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x264)) (> x264 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x755 x55) (= x204 (ite (= x450 0) 0 (ite (= true (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x450)) (x345 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x450) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))) (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x38 (- (x345 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x450) x450 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x450 1)))))) 1))))))) (= x9 (ite (or (> x163 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 0 x163) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163) true))) 1 0)) (= (x118 x368 1) x399) (= (x186 (+ x264 x788)) x314) (= (x316 (x229 x107) (x558 2) 0) x221) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x788) (= (x118 x434 4) x587) (<= x5 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292) (>= x173 0) (= x451 (not x650)) (= x481 (ite (or (and (< x163 x204) (= (<= x204 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x163 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x204) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163))) 1 0)) (= (ite (or (and (< x450 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450) true)) (> x450 57896044618658097711785492504343953926634992332820282019728792003956564819967)) 1 0) x453) (= x727 x725) (= (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450)) (< 0 x450)) x219) (<= x537 1461501637330902918203684832716283019655932542975) (= x203 (x599 x397)) (= x90 x547) (= x450 x430) (= x410 x266) (= x606 (ite x432 1 0)) (= x488 (x316 (x229 x107) (x558 2) 0)) (<= 0 x634) (= (+ x105 x438) x10) (= x90 x208) (= x289 x89) (= x459 x537) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x396) (not (= x163 0)) (= (ite (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450) true) (> 0 x450))) 1 0) x632) (= x228 (x191 x221)) (= x341 (x22 x9 x632)) (= x443 (x772 x506 x476)) (= (ite x422 1 0) x484) (= x548 (x186 (+ x264 x173))) (= x15 (not x582)) (>= x163 0) (= (x316 (x229 x208) (x558 5) 0) x251) (= x379 x105) (>= x483 0) (= (x697 x190) x418) (= (ite (not x427) 1 0) x476) (not (= 1814410054 x581)) (= (x442 x492) x292) (= x725 (x636 x246 x163)) (= (x186 (+ x264 x788)) x698) (>= x396 0) (ite x227 x227 (not (> x698 x788))) (= (ite (and (> x450 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450) true)) 1 0) x516) (< (x636 x163 x595) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x11 x3) (= (ite (or x135 x75) 1 0) x123) (= (< x396 x698) x87) (ite x310 x310 (not (> x452 x417))) (= x517 x754) (= x478 (ite (not x87) 1 0)) (<= 0 x266) x621 (<= x777 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x446 (or (and (> 0 x3) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3))) (> x3 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (= 0 x595) x236) (= x621 (= x163 x526)) (not (> 1161348331 x581)) (= x410 x574) (ite x618 x618 (not (> x418 x210))) (= x456 (x772 x86 x123)) (ite x504 x504 (not (< x452 x417))) (= x416 (x77 x182)) (>= 1461501637330902918203684832716283019655932542975 x266) (= x426 (> x727 x203)) (= x85 (x263 (x229 x474))) (= x373 (x22 x690 x453)) (>= x777 0) (<= x203 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163)) (< x163 0)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (= (and (= (<= x3 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x3 0)) x356) (= (x38 (x636 x163 x430)) x264) (ite x451 x451 (not (< x173 x548))) (= x5 x620) (< 0 x351) (= x712 (or (and (> 0 x450) (= (<= x450 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x450))) (= (x186 (+ x430 x228)) x246) (= (not x356) x310) (= x745 x246) (not (= x581 1710941022)) (= x773 (x636 x163 x595)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x11) (and (= true (<= x11 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x11))) x568) (= x69 x376) (= x40 (ite x236 1 0)) (= (x316 (x229 x107) (x558 2) 0) x434) (= (ite (not x74) 1 0) x375) (= x65 0) (= (and (= (<= x450 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x450 0)) x8) (= (x166 (- x418 x11)) x210) (= (ite x135 1 0) x415) (= x551 x640) (= (or (> x450 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x450 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x450))) x753) (ite x692 x692 (not (< x418 x210))) (<= 0 x418) (>= 1461501637330902918203684832716283019655932542975 x208) (= (x217 x107) x358) (<= x483 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (ite (not x446) 1 0) x160) (= (x316 (x229 x5) x248 0) x190) (= x431 0) (= (x772 x336 x226) x664) (= x188 (ite (> x163 x691) 1 0)) (= (ite (and (> x163 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x163) true)) 1 0) x713) (= x691 (x345 57896044618658097711785492504343953926634992332820282019728792003956564819967 x430)) (ite x361 x361 (not (< x228 x246))) (= x452 (x751 x368)) (< 0 x456) (= x75 (= x140 1)) (= (and (> x450 0) (= (<= x450 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) x616) (ite x280 x280 (not (< x246 x228))) (= x620 x546) (not (= 1763987465 x581)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242) (> x624 0) (= x619 (- x10 x209)) (= x349 (ite x288 1 0)) (> x443 0) (<= 0 x62) (ite x436 x436 (not (> x595 x483))) (= x743 (x22 x117 x150)) (= x723 (x636 x417 x292)) (= x634 (x661 x19)) (= x676 x723) (= x159 (ite (or x288 x432) 1 0)) (= x395 (x316 (x229 x5) (x558 1) 0)) (= (x316 (x229 x107) (x558 3) 0) x457)) (and (and (and (and (= x528 (x681 224)) (= x297 (x263 (x229 x474))) (= x749 x317) (= x362 x719) (<= 0 x630) (= (x718 x494) x187) (= (x118 x319 1) x128) (not (< x305 2094874590)) (= x265 (= x282 x79)) (= x470 (x118 x42 1)) (= x18 x239) (< 0 x297) (= (x681 256) x145) x391 (= x355 x419) (= x282 (x657 x128)) (<= x665 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x665 (x599 x42)) (= (x442 x363) x630) (= x494 x505) (= (x77 x494) x79) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x82) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x449) (= (x118 x363 1) x42) (>= x665 0) (not (> 3207937467 x305)) (= x391 (= x449 x187)) (< x305 3995103268) (= (x681 192) x759) (= x511 x405) (= x305 3647180086) x265 (>= x82 0) (= (x316 (x229 x494) (x558 2) 0) x319) (<= 0 x282) (not (= x305 3207937467)) (<= x630 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x681 160) x554) (= x363 (x118 x128 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x282) (= (x681 128) x222) (= (x304 x319) x449) (= (x220 x470) x82) (>= x449 0)) (and (and (not (= x721 558109909)) (< x721 1161348331) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x687) (< 0 x790) (<= x605 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 2094874590 x721) (= x339 (x609 128)) (= x145 x34) (= x285 (x316 (x229 x756) x515 0)) (= (x544 x285) x605) (= x222 x678) (= x515 (x316 (x229 x393) (x558 3) 0)) (<= 0 x687) (> 699302164 x721) (= x759 x64) (not (= x721 231365057)) (>= x605 0) (= x687 (x30 x597)) (= x597 (x118 x285 1)) (= x554 x49) (= 606387804 x721) (not (= x721 436938878)) (= x124 x528) (= x756 x517) (= (x263 (x229 x474)) x790) (= x393 x677) (<= x756 1461501637330902918203684832716283019655932542975) (= x95 (x609 160))) (and (and (and (and (and (= x445 x563) (= (x316 (x229 x714) (x558 5) 0) x469) (= x498 x122) (not (< x45 1710941022)) (> 2094874590 x45) (< 0 x521) (= (x350 x469) x122) (not (= 1763987465 x45)) (not (> 1161348331 x45)) (<= 0 x122) (<= x122 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x547 x714) (= x521 (x263 (x229 x474))) (<= x714 1461501637330902918203684832716283019655932542975) (= 1814410054 x45) (not (= x45 1710941022))) (and (and (and (and (and (= x585 x29) (< x330 2094874590) (> 1161348331 x330) (not (< x330 699302164)) (> x659 0) (= x16 x329) (not (= 699302164 x330)) (= 761373525 x330) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x16) (= (x263 (x229 x474)) x659) (<= 0 x16)) (and (and (and (= (= x502 x256) x760) (= x383 x627) (= x76 x256) (= x13 x502)) (and (not (= x709 2265735533)) (= x413 x454) (= x154 (x263 (x229 x474))) (not (> 2094874590 x709)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (< x709 3207937467) (> x154 0) (<= 0 x62) (= x62 x627) (= 2507842956 x709) (not (= 2094874590 x709)) (> 2746363844 x709))) (and (= x387 (x263 (x229 x474))) (= x396 x454) (<= 0 x396) (not (= 2746363844 x389)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x396) (= 3133049407 x389) (not (= 2991206654 x389)) (= x147 x329) (< x389 3207937467) (> x387 0) (not (> 2746363844 x389)) (not (< x389 2094874590)) (not (= x389 3058907103))))) (and (= x377 x755) (not (< x656 3995103268)) (= x60 x585) (= 4032373034 x656) (> x56 0) (<= 0 x60) (= x112 x384) (= x60 (x501 x230)) (not (> 3207937467 x656)) (= (x316 (x229 x377) (x558 6) 0) x230) (not (< x656 2094874590)) (<= x377 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x60) (= (x263 (x229 x474)) x56) (not (= x656 3995103268)))) (and (<= x314 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x43 1161348331) (>= x314 0) (> x447 0) (= x462 x54) (= 231365057 x43) (> 2094874590 x43) (= x314 x384) (= (x263 (x229 x474)) x447) (< x43 699302164))) (and (>= 1461501637330902918203684832716283019655932542975 x138) (= x423 (x263 (x229 x474))) (not (= 1710941022 x153)) (= x153 1814410054) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x12) (= x498 x532) (< x153 2094874590) (= x138 x435) (>= x12 0) (not (= 1763987465 x153)) (not (< x153 1161348331)) (= x12 (x350 x764)) (= x54 x12) (= x764 (x316 (x229 x138) (x558 5) 0)) (> x423 0) (not (< x153 1710941022))))) (and (= x225 x382) (= x746 (x263 (x229 x474))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x127) (< x766 2094874590) (not (= 436938878 x766)) (= x562 (x316 (x229 x243) x152 0)) (= x493 x58) (<= x243 1461501637330902918203684832716283019655932542975) (> 1161348331 x766) (= (x316 (x229 x225) (x558 4) 0) x152) (not (= x766 231365057)) (> x746 0) (< x766 699302164) (= x237 x243) (= x766 558109909) (<= 0 x127) (= x445 x127) (= (x284 x562) x127))) (and (> x84 0) (>= x137 0) (<= x137 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x572 2094874590) (= x137 (x284 x207)) (= x731 x364) (= x137 x493) (< x572 1161348331) (not (= 231365057 x572)) (not (= x572 436938878)) (= x572 558109909) (= (x263 (x229 x474)) x84) (< x572 699302164) (= x742 x546) (= (x316 (x229 x775) (x558 4) 0) x277) (= x747 x602) (= (x316 (x229 x742) x277 0) x207) (>= 1461501637330902918203684832716283019655932542975 x742) (= x775 x677))) (and (= x461 (x118 x103 1)) (<= x180 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x507 699302164) (= (x30 x461) x635) (= x726 x339) (< x507 2094874590) (= x602 (x149 160)) (not (= x507 231365057)) (= (x544 x103) x180) (not (= x507 558109909)) (= (x149 128) x364) (< x507 1161348331) (= x776 x168) (= (x263 (x229 x474)) x309) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x635) (= x293 (x316 (x229 x761) (x558 3) 0)) (= 606387804 x507) (<= 0 x635) (not (= x507 436938878)) (= x761 x179) (= x95 x211) (< 0 x309) (<= 0 x180) (= (x316 (x229 x776) x293 0) x103) (<= x776 1461501637330902918203684832716283019655932542975))))) (and (not (< x215 2094874590)) (= x677 x158) (not (= x215 3207937467)) (= (x316 (x229 x158) (x558 2) 0) x401) (< x215 3995103268) (= (x77 x158) x162) (> x155 0) (= x702 (= x408 x590)) (= (x599 x467) x472) (= x334 (x442 x654)) (<= x369 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x68 (x220 x617)) (<= x334 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (< x215 3207937467)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x408) (= (x657 x232) x369) (>= x68 0) x702 (= x360 x141) (= (x118 x654 1) x467) (= x215 3647180086) x523 (<= x472 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x317 (x374 192)) (<= 0 x334) (= (x304 x401) x408) (= x232 (x118 x401 1)) (= x523 (= x162 x369)) (= x155 (x263 (x229 x474))) (<= 0 x408) (<= 0 x369) (>= x472 0) (= x654 (x118 x232 1)) (= (x374 256) x719) (= x617 (x118 x467 1)) (= (x374 160) x419) (= x18 (x374 224)) (= x511 (x374 128)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x68) (= (x718 x158) x590))) (and (= x564 (x316 (x229 x411) (x558 1) 0)) (< x178 1710941022) (<= 0 x39) (= 1161348331 x178) (= (x316 (x229 x510) x564 0) x639) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x39) (= x141 x39) (<= x510 1461501637330902918203684832716283019655932542975) (> 2094874590 x178) (not (< x178 1161348331)) (= x411 x755) (= x13 x541) (<= x411 1461501637330902918203684832716283019655932542975) (> x464 0) (= x789 x510) (= (x263 (x229 x474)) x464) (= (x661 x639) x39)))) (and (= 2507842956 x565) (>= x62 0) (= x715 (x263 (x229 x474))) (> x715 0) (= x421 x525) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (> 2746363844 x565) (not (= 2094874590 x565)) (not (= 2265735533 x565)) (not (> 2094874590 x565)) (= x69 x62) (> 3207937467 x565))))) (and (<= x786 1461501637330902918203684832716283019655932542975) (not (< x171 2094874590)) (= (x263 (x229 x474)) x51) (not (= x171 3995103268)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x271) (not (> 3995103268 x171)) (= x441 x741) (not (> 3207937467 x171)) (= (x316 (x229 x786) (x558 6) 0) x594) (= x694 x271) (= x171 4032373034) (= (x501 x594) x271) (= x786 x755) (> x51 0) (<= 0 x271)))) (and (= (x268 x367) x758) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x758) (not (= 1710941022 x37)) (= x748 x435) (not (< x37 1161348331)) (not (= x37 1763987465)) (<= x748 1461501637330902918203684832716283019655932542975) (= (x263 (x229 x474)) x542) (>= x758 0) (< x37 2094874590) (= x372 x347) (not (< x37 1710941022)) (= (x316 (x229 x748) (x558 5) 0) x367) (= x758 x254) (< 0 x542) (= x37 1814410054)))) (and (= (x697 x538) x32) (< x213 1161348331) (not (= 436938878 x213)) (>= x32 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) (= 558109909 x213) (= x735 (x263 (x229 x474))) (< x213 2094874590) (= x448 x32) (= x382 x129) (= x276 (x316 (x229 x129) (x558 4) 0)) (not (= 231365057 x213)) (= (x316 (x229 x323) x276 0) x538) (>= 1461501637330902918203684832716283019655932542975 x323) (> 699302164 x213) (= x323 x237) (< 0 x735) (= x508 x20)))))) (and (>= x27 0) (= x300 (x118 x125 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x496) (= (x316 (x229 x705) (x558 2) 0) x52) x70 (= x218 (x77 x705)) (= x705 x505) (= x258 (x115 224)) (= (x191 x52) x27) (not (> 3207937467 x575)) (= x604 x333) (< 0 x142) (= x569 (x115 128)) (<= 0 x71) (= (x442 x125) x71) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x27) (<= x671 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x217 x705) x499) (= x302 x325) (= x328 x144) (= x125 (x118 x685 1)) (= (x115 256) x424) (not (= x575 3207937467)) (= x671 (x220 x490)) (>= x496 0) (= x575 3647180086) (< x575 3995103268) (= (x115 192) x403) (= (x115 160) x279) (= (x118 x52 1) x685) (>= x518 0) (= x675 x739) (= (= x218 x496) x70) (= x142 (x263 (x229 x474))) (>= x671 0) (= x490 (x118 x300 1)) x778 (not (> 2094874590 x575)) (<= x71 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x518 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x27 x499) x778) (= x496 (x657 x685)) (= x53 x701) (= x518 (x599 x300)))) (and (<= 0 x4) (>= x136 0) (= (x599 x667) x695) (= x412 (x442 x670)) x294 (= (= x281 x765) x294) (= (x118 x667 1) x157) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (not (< x708 3207937467)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x695) (= x136 (x220 x157)) (<= x412 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x118 x670 1) x667) (= x4 (x657 x400)) (= x333 (x199 256)) (= (x199 128) x302) (= x342 (= x583 x4)) (< x708 3995103268) (<= x136 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x191 x286) x281) (= x460 x28) (= (x263 (x229 x474)) x365) (not (< x708 2094874590)) (<= 0 x412) (> x365 0) (= x677 x63) (>= x695 0) (<= 0 x281) (= x144 (x199 160)) (<= x281 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x583 (x77 x63)) (= x400 (x118 x286 1)) (= x670 (x118 x400 1)) (= (x199 192) x701) (= x286 (x316 (x229 x63) (x558 2) 0)) (= (x199 224) x675) x342 (= (x217 x63) x765) (= x708 3647180086) (not (= 3207937467 x708)))))) (and x760 (=> (and (= x553 (= x7 x655)) (= x28 x7) (= x655 x360)) (and x553 (=> (and (= x99 x480) (= (+ x126 x622) x407) (= x48 x126) (= (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x480) x480 (- x480 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x622) (= x623 x770) (= x623 x405) (= x132 (= x770 x407)) (= x325 x48)) (and x132 (=> (and (= x779 x355) (= x611 x328) (= x576 (= x611 x779))) (and x576 (=> (and (= x53 x437) (= x787 (= x344 x437)) (= x344 x749)) (and x787 (=> (and (= x739 x321) (= x239 x429) (= x641 (= x429 x321))) (and (=> (and (= x362 x324) (= x604 x308) (= x114 (= x324 x308))) (and x114 (=> (and (= x678 x353) (= x61 x586) (= x296 (= x586 x353))) (and x296 (=> (and (= x303 (= x224 x306)) (= x768 x306) (= x49 x224)) (and (=> (and (= x298 (= x762 x175)) (= x577 x762) (= x64 x175)) (and (=> (and (= x645 x267) (= (= x645 x23) x312) (= x23 x124)) (and (=> (and (= (= x607 x100) x151) (= x607 x406) (= x100 x34)) (and (=> (and (= x359 x458) (= x338 x46) (= (= x165 x359) x757) (= x551 x669) (= (+ x177 x181) x165) (= x726 x458) (= x181 x46) (= (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x669) x669 (- x669 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x177)) (and x757 (=> (and (= x206 x170) (= x402 (= x206 x707)) (= x211 x170) (= x550 (ite (<= x673 57896044618658097711785492504343953926634992332820282019728792003956564819967) x673 (- x673 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= x673 x99) (= x707 (+ x269 x550)) (= x543 x343) (= x343 x269)) (and (=> (and (= (= x503 x578) x31) (= x731 x503) (= x578 x465)) (and x31 (=> (and (= (= x2 x680) x14) (= x2 x610) (= x747 x680)) (and x14 (=> (and (= x750 x6) (= x161 x143) (= x551 x699) (= x143 x58) (= x767 (= x134 x161)) (= x20 x6) (= x134 (- x750 x666)) (= (ite (<= x699 57896044618658097711785492504343953926634992332820282019728792003956564819967) x699 (- x699 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x666)) (and (=> (and (= x638 x563) (= x196 x662) (= (= x638 x662) x497)) (and (=> (and (= x35 (= x238 x116)) (= x238 x290) (= x250 x752) (= x253 x372) (= x328 x250) (= (ite (<= x172 57896044618658097711785492504343953926634992332820282019728792003956564819967) x172 (- x172 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x689) (= x172 x99) (= x532 x290) (= x253 x241) (= (x636 x752 x689) x80) (= x116 (+ x80 x241))) (and (=> (and (= x462 x601) (= x642 x561) (= (= x561 x601) x738)) (and (=> (and (= x598 x29) (= x106 x612) (= (= x612 x598) x295)) (and x295 (=> (and (= x366 x328) (= (ite (<= x471 57896044618658097711785492504343953926634992332820282019728792003956564819967) x471 (- x471 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x509) (= x763 x112) (= (= x514 x57) x567) (= (x636 x530 x509) x139) (= (+ x139 x706) x514) (= x706 x78) (= x741 x78) (= x530 x366) (= x471 x99) (= x763 x57)) (and (=> (and (= x147 x674) (= (= x674 x631) x520) (= x185 x631)) (and x520 (=> (and (= (= x555 x21) x784) (= x413 x555) (= x525 x21)) (and (=> (and (= x47 x383) (= x376 x194) (= (= x47 x194) x97)) x97) x784)))) x567)))) x738)) x35)) x497)) x767)))))) x402)))) x151)) x312)) x298)) x303)))))) x641)))))))))))) x67))
(assert (x771 x240))
(assert (x771 x502))
(assert (=> (>= 10000 x5) (= (x558 x5) (x229 x5))))
(assert (x771 x626))
(assert (x771 x396))
(assert (x771 x243))
(assert (x771 x364))
(assert (x771 x11))
(assert (= (x96 (x229 x335)) x335))
(assert (x771 x747))
(assert (x771 x496))
(assert (x357 x146))
(assert (= (x96 (x558 761373525)) 761373525))
(assert (x771 x307))
(assert (= (x96 (x229 x243)) x243))
(assert (x771 x722))
(assert (x771 x375))
(assert (x771 x106))
(assert (x771 x543))
(assert (x593 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x163) x163 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x163 1)))))))
(assert (x348 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x163) x163 (x38 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x166 (- x163 1)))))))
(assert (= (x96 (x229 x776)) x776))
(assert (x771 x266))
(assert (x771 x768))
(assert (x771 x647))
(assert (x771 x60))
(assert (=> (<= x299 10000) (= (x558 x299) (x229 x299))))
(assert (x771 x708))
(check-sat)
(exit)
