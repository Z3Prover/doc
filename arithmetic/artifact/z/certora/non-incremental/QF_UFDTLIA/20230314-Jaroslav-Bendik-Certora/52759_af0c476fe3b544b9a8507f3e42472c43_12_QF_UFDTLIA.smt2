(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x6 0)) (((x443 (x53 x6) (x54 x6) (x362 Int)) (x131 (x382 Int)) (x444 (x366 x6) (x446 Int)))))
(declare-fun x133 () Int)
(declare-fun x64 () x6)
(declare-fun x271 () Int)
(declare-fun x294 () Bool)
(declare-fun x372 () Int)
(declare-fun x134 () Int)
(declare-fun x384 () Bool)
(declare-fun x245 () Bool)
(declare-fun x40 () Int)
(declare-fun x119 () Int)
(declare-fun x83 () x6)
(declare-fun x280 () Int)
(declare-fun x442 () Int)
(declare-fun x425 () x6)
(declare-fun x103 (x6) Int)
(declare-fun x62 () Int)
(declare-fun x308 () Int)
(declare-fun x459 () x6)
(declare-fun x246 () x6)
(declare-fun x452 () Int)
(declare-fun x211 () Int)
(declare-fun x231 () Int)
(declare-fun x255 () Int)
(declare-fun x138 () Int)
(declare-fun x367 () x6)
(declare-fun x287 () Int)
(declare-fun x31 () Int)
(declare-fun x113 () Bool)
(declare-fun x114 () Bool)
(declare-fun x229 () Int)
(declare-fun x43 () Int)
(declare-fun x184 () Bool)
(declare-fun x468 () x6)
(declare-fun x354 () Bool)
(declare-fun x463 () Bool)
(declare-fun x305 (Int Int) Int)
(declare-fun x164 () Int)
(declare-fun x189 () Int)
(declare-fun x370 () x6)
(declare-fun x115 () x6)
(declare-fun x92 () Int)
(declare-fun x291 () Bool)
(declare-fun x285 () Int)
(declare-fun x282 () Bool)
(declare-fun x299 () x6)
(declare-fun x157 () x6)
(declare-fun x326 () x6)
(declare-fun x236 () Int)
(declare-fun x65 () Int)
(declare-fun x26 () x6)
(declare-fun x161 () Bool)
(declare-fun x408 () Int)
(declare-fun x52 () Bool)
(declare-fun x304 () x6)
(declare-fun x312 () Int)
(declare-fun x175 () Bool)
(declare-fun x419 () Bool)
(declare-fun x32 () Int)
(declare-fun x404 () x6)
(declare-fun x307 () x6)
(declare-fun x262 () Bool)
(declare-fun x359 (x6) Int)
(declare-fun x409 () Int)
(declare-fun x328 (x6) Int)
(declare-fun x106 () Int)
(declare-fun x188 (x6) Int)
(declare-fun x461 () Int)
(declare-fun x60 () x6)
(declare-fun x233 () Bool)
(declare-fun x391 () x6)
(declare-fun x273 () Int)
(declare-fun x3 () x6)
(declare-fun x243 () x6)
(declare-fun x376 () x6)
(declare-fun x448 (Int) Int)
(declare-fun x365 () Int)
(declare-fun x150 () Bool)
(declare-fun x251 () x6)
(declare-fun x288 () x6)
(declare-fun x186 () x6)
(declare-fun x123 () Int)
(declare-fun x395 () Int)
(declare-fun x411 () x6)
(declare-fun x454 () Bool)
(declare-fun x455 (Int) x6)
(declare-fun x93 () Int)
(declare-fun x324 () Int)
(declare-fun x90 () Bool)
(declare-fun x68 () Int)
(declare-fun x112 () Int)
(declare-fun x169 () x6)
(declare-fun x220 () Int)
(declare-fun x361 () Int)
(declare-fun x369 () Int)
(declare-fun x332 () Bool)
(declare-fun x292 () Bool)
(declare-fun x353 () Int)
(declare-fun x424 () Bool)
(declare-fun x232 () Bool)
(declare-fun x126 () Int)
(declare-fun x10 () x6)
(declare-fun x224 () x6)
(declare-fun x401 (x6) Int)
(declare-fun x178 (x6) Int)
(declare-fun x247 () x6)
(declare-fun x383 () Bool)
(declare-fun x121 () Int)
(declare-fun x66 () Int)
(declare-fun x214 () Int)
(declare-fun x201 () Bool)
(declare-fun x57 () x6)
(declare-fun x58 () Int)
(declare-fun x88 () Bool)
(declare-fun x333 () x6)
(declare-fun x120 (Int) Int)
(declare-fun x368 () x6)
(declare-fun x168 () x6)
(declare-fun x257 () Int)
(declare-fun x81 () x6)
(declare-fun x20 () x6)
(declare-fun x389 () Int)
(declare-fun x18 () Int)
(declare-fun x86 () Int)
(declare-fun x104 () x6)
(declare-fun x51 () Bool)
(declare-fun x84 () Bool)
(declare-fun x159 () Bool)
(declare-fun x5 () Int)
(declare-fun x172 () Int)
(declare-fun x87 () x6)
(declare-fun x206 () Bool)
(declare-fun x141 () Int)
(declare-fun x240 () Bool)
(declare-fun x310 () Bool)
(declare-fun x171 () Int)
(declare-fun x250 () x6)
(declare-fun x230 () x6)
(declare-fun x248 () Int)
(declare-fun x29 () Int)
(declare-fun x264 () Int)
(declare-fun x340 () Int)
(declare-fun x193 (Int Int) Int)
(declare-fun x387 () x6)
(declare-fun x139 () Int)
(declare-fun x46 () Int)
(declare-fun x450 () Bool)
(declare-fun x466 () Int)
(declare-fun x242 () Bool)
(declare-fun x61 () Bool)
(declare-fun x125 () Int)
(declare-fun x215 () Int)
(declare-fun x97 () Int)
(declare-fun x173 () Bool)
(declare-fun x182 () Bool)
(declare-fun x205 () Int)
(declare-fun x375 () x6)
(declare-fun x346 () Int)
(declare-fun x216 () Bool)
(declare-fun x217 () Int)
(declare-fun x330 () Int)
(declare-fun x102 () Bool)
(declare-fun x244 () Int)
(declare-fun x315 () Int)
(declare-fun x407 () x6)
(declare-fun x429 () Int)
(declare-fun x45 () x6)
(declare-fun x428 () Int)
(declare-fun x413 () x6)
(declare-fun x311 () Bool)
(declare-fun x360 () Bool)
(declare-fun x95 () Int)
(declare-fun x300 () Int)
(declare-fun x318 () Bool)
(declare-fun x364 () Bool)
(declare-fun x235 () Int)
(declare-fun x397 () Int)
(declare-fun x399 () x6)
(declare-fun x14 () Int)
(declare-fun x417 () Int)
(declare-fun x415 () x6)
(declare-fun x179 () x6)
(declare-fun x91 () x6)
(declare-fun x451 () x6)
(declare-fun x447 () x6)
(declare-fun x108 () Bool)
(declare-fun x334 () Int)
(declare-fun x266 () x6)
(declare-fun x427 () Int)
(declare-fun x194 () Int)
(declare-fun x392 () Int)
(declare-fun x180 () Int)
(declare-fun x309 (x6) Int)
(declare-fun x445 () Int)
(declare-fun x303 () Int)
(declare-fun x48 () Bool)
(declare-fun x208 () x6)
(declare-fun x111 () x6)
(declare-fun x128 () Bool)
(declare-fun x199 () Bool)
(declare-fun x465 () Bool)
(declare-fun x394 () Int)
(declare-fun x260 (x6) Int)
(declare-fun x35 () x6)
(declare-fun x252 () Int)
(declare-fun x160 () Int)
(declare-fun x234 () Int)
(declare-fun x259 (x6) Int)
(declare-fun x316 () Int)
(declare-fun x143 (Int) Int)
(declare-fun x151 () Int)
(declare-fun x153 () Int)
(declare-fun x281 () Int)
(declare-fun x80 () Int)
(declare-fun x226 () x6)
(declare-fun x254 (x6) Int)
(declare-fun x276 () Int)
(declare-fun x293 () x6)
(declare-fun x331 () Int)
(declare-fun x162 () Bool)
(declare-fun x398 () Int)
(declare-fun x38 () Bool)
(declare-fun x212 () Int)
(declare-fun x267 () x6)
(declare-fun x56 () Int)
(declare-fun x9 () Int)
(declare-fun x181 () Int)
(declare-fun x117 () Int)
(declare-fun x145 (x6) Int)
(declare-fun x82 () Int)
(declare-fun x342 () x6)
(declare-fun x269 () Int)
(declare-fun x89 () Bool)
(declare-fun x105 (Int Int) Int)
(declare-fun x129 () Int)
(declare-fun x319 () x6)
(declare-fun x416 () Int)
(declare-fun x433 () Int)
(declare-fun x210 () Int)
(declare-fun x436 () Int)
(declare-fun x363 () Int)
(declare-fun x122 () Int)
(declare-fun x124 () Int)
(declare-fun x278 () x6)
(declare-fun x44 () Int)
(declare-fun x320 () Int)
(declare-fun x228 () Int)
(declare-fun x100 () Int)
(declare-fun x185 () x6)
(declare-fun x406 () Int)
(declare-fun x200 () Bool)
(declare-fun x423 () Int)
(declare-fun x453 () Int)
(declare-fun x306 (x6) Int)
(declare-fun x457 () Bool)
(declare-fun x78 () x6)
(declare-fun x25 () Int)
(declare-fun x195 () Int)
(declare-fun x456 () Int)
(declare-fun x15 () Bool)
(declare-fun x284 () Int)
(declare-fun x13 () Int)
(declare-fun x55 () Int)
(declare-fun x265 () Bool)
(declare-fun x289 () x6)
(declare-fun x118 () Int)
(declare-fun x256 () Bool)
(declare-fun x329 () x6)
(declare-fun x37 () Int)
(declare-fun x426 () Bool)
(declare-fun x286 () Bool)
(declare-fun x177 () Int)
(declare-fun x439 () Bool)
(declare-fun x190 () Int)
(declare-fun x351 () Int)
(declare-fun x350 () Bool)
(declare-fun x386 () Bool)
(declare-fun x50 (x6) Int)
(declare-fun x441 () x6)
(declare-fun x221 () Bool)
(declare-fun x314 () Int)
(declare-fun x295 () x6)
(declare-fun x410 () Bool)
(declare-fun x261 () Bool)
(declare-fun x174 () Bool)
(declare-fun x430 () Int)
(declare-fun x432 () x6)
(declare-fun x469 () x6)
(declare-fun x336 () x6)
(declare-fun x402 () Int)
(declare-fun x388 () x6)
(declare-fun x412 () x6)
(declare-fun x356 () Int)
(declare-fun x374 () Int)
(declare-fun x127 () Int)
(declare-fun x464 (x6) Int)
(declare-fun x49 () x6)
(declare-fun x283 () Int)
(declare-fun x268 () x6)
(declare-fun x338 () x6)
(declare-fun x152 () Int)
(declare-fun x449 () Bool)
(declare-fun x396 () Int)
(declare-fun x325 () Bool)
(declare-fun x39 () Bool)
(declare-fun x460 () Int)
(declare-fun x400 () x6)
(declare-fun x36 () Int)
(declare-fun x99 () Int)
(declare-fun x67 () Int)
(declare-fun x163 () Bool)
(declare-fun x2 () Int)
(declare-fun x72 () Bool)
(declare-fun x28 () Int)
(declare-fun x197 () x6)
(declare-fun x352 () x6)
(declare-fun x198 () Int)
(declare-fun x110 () Bool)
(declare-fun x202 () Int)
(declare-fun x191 () Int)
(declare-fun x96 () Int)
(declare-fun x85 () Int)
(declare-fun x213 () x6)
(declare-fun x71 () Int)
(declare-fun x301 () x6)
(declare-fun x322 () Int)
(declare-fun x462 () Int)
(declare-fun x405 () x6)
(declare-fun x275 () x6)
(declare-fun x192 () x6)
(declare-fun x371 () x6)
(declare-fun x137 () x6)
(declare-fun x59 () Bool)
(declare-fun x379 () Int)
(declare-fun x344 (Int Int) Int)
(declare-fun x135 () x6)
(declare-fun x467 () Bool)
(declare-fun x94 () Int)
(declare-fun x313 () x6)
(declare-fun x70 (x6) Int)
(declare-fun x390 () Bool)
(declare-fun x227 () Bool)
(declare-fun x8 () Int)
(declare-fun x7 () Bool)
(declare-fun x1 () Int)
(declare-fun x343 () Int)
(declare-fun x130 () Int)
(declare-fun x323 () Bool)
(declare-fun x41 () Int)
(declare-fun x258 () Bool)
(declare-fun x270 () Int)
(declare-fun x290 () Bool)
(declare-fun x27 () x6)
(declare-fun x274 () Bool)
(declare-fun x358 () Int)
(declare-fun x378 () x6)
(declare-fun x223 () x6)
(declare-fun x142 () Bool)
(declare-fun x422 () Int)
(declare-fun x196 (x6) Int)
(declare-fun x263 () Bool)
(declare-fun x12 () Bool)
(declare-fun x176 () Int)
(declare-fun x76 () Int)
(declare-fun x77 () Bool)
(declare-fun x146 () x6)
(declare-fun x144 () Bool)
(declare-fun x140 () Bool)
(declare-fun x458 () Int)
(declare-fun x321 () Int)
(declare-fun x403 (x6) Int)
(declare-fun x219 () x6)
(declare-fun x418 (Int Int) Int)
(declare-fun x381 () x6)
(declare-fun x253 () x6)
(declare-fun x239 () x6)
(declare-fun x132 () x6)
(declare-fun x158 () Int)
(declare-fun x349 () Int)
(declare-fun x440 () x6)
(declare-fun x24 () x6)
(declare-fun x170 () Int)
(declare-fun x101 () Bool)
(declare-fun x74 () x6)
(declare-fun x434 () x6)
(declare-fun x317 () Int)
(declare-fun x107 () Int)
(declare-fun x373 () Bool)
(declare-fun x16 () Bool)
(declare-fun x241 (x6) Int)
(declare-fun x203 () Int)
(declare-fun x155 () Bool)
(declare-fun x148 () Int)
(define-fun x149 ((x6 x6) (x98 Int)) x6 (ite ((_ is x444) x6) (x444 (x366 x6) (+ x98 (x446 x6))) (ite ((_ is x443) x6) (x443 (x53 x6) (x54 x6) (+ x98 (x362 x6))) (x131 (+ x98 (x382 x6))))))
(define-fun x156 ((x222 Int)) Int (ite (and (<= 0 x222) (< x222 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x222 (- x222 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x166 ((x222 Int)) Int (ite (and (>= x222 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x222 0)) (+ x222 115792089237316195423570985008687907853269984665640564039457584007913129639936) x222))
(define-fun x47 ((x222 Int)) Int (ite (and (>= x222 0) (< x222 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x222 (ite (and (>= x222 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x222)) (- x222 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x222) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x222)) (+ x222 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x105 x222 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x218 ((x438 Int)) Bool (and (>= x438 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x438)))
(define-fun x298 ((x438 Int)) Bool (and (= (x418 115792089237316195423570985008687907853269984665640564039457584007913129639935 x438) x438) (= x438 (x418 x438 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x154 ((x438 Int)) Bool (and (= 0 (x418 x438 0)) (= (x418 0 x438) 0)))
(define-fun x435 ((x438 Int)) Bool (= (x418 x438 x438) x438))
(define-fun x357 ((x438 Int)) Bool (and (x298 x438) (x154 x438) (x435 x438)))
(define-fun x183 ((x438 Int) (x165 Int)) Bool (= (x418 x165 x438) (x418 x438 x165)))
(define-fun x21 ((x438 Int) (x165 Int)) Bool (and (>= (x418 x438 x165) 0) (=> (>= x165 0) (<= (x418 x438 x165) x165)) (=> (>= x438 0) (<= (x418 x438 x165) x438))))
(define-fun x296 ((x438 Int) (x165 Int)) Bool (and (x21 x438 x165) (x183 x438 x165)))
(define-fun x348 ((x438 Int)) Bool (= (x105 x438 1461501637330902918203684832716283019655932542976) (x418 x438 1461501637330902918203684832716283019655932542975)))
(define-fun x249 ((x438 Int)) Bool (and (x296 x438 1461501637330902918203684832716283019655932542975) (x348 x438)))
(define-fun x136 ((x438 Int) (x165 Int)) Bool (and (<= 0 (x105 x438 x165)) (< (x105 x438 x165) x165)))
(define-fun x225 ((x438 Int) (x165 Int)) Bool (=> (and (< 0 x165) (<= 0 x438)) (= (< x438 x165) (= x438 (x105 x438 x165)))))
(define-fun x327 ((x438 Int) (x165 Int)) Bool (=> (and (and (> (+ x165 x165) x438) (<= x165 x438)) (> x165 0)) (= (- x438 x165) (x105 x438 x165))))
(define-fun x73 ((x438 Int)) Bool (= (x105 0 x438) 0))
(define-fun x272 ((x438 Int)) Bool (= 0 (x105 x438 1)))
(define-fun x437 ((x438 Int)) Bool (= (x105 x438 x438) 0))
(define-fun x302 ((x438 Int)) Bool (and (x272 x438) (x73 x438) (x437 x438)))
(define-fun x75 ((x438 Int) (x165 Int)) Bool (= (x193 x165 x438) (x193 x438 x165)))
(define-fun x297 ((x438 Int) (x165 Int)) Bool (and (=> (and (> x438 0) (> 0 x165)) (< (x193 x438 x165) 0)) (=> (and (< 0 x438) (> x165 0)) (< 0 (x193 x438 x165))) (=> (and (< x438 0) (> x165 0)) (< (x193 x438 x165) 0)) (=> (and (> 0 x165) (< x438 0)) (< 0 (x193 x438 x165)))))
(define-fun x19 ((x438 Int) (x165 Int)) Bool (=> (and (< 0 x438) (> x165 0)) (= (< (x193 x438 x165) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x165 (x344 (x47 (x193 x438 x165)) x438)))))
(define-fun x414 ((x438 Int) (x165 Int)) Bool (=> (and (not (= x438 0)) (not (= 0 x165))) (and (= (x344 (x193 x438 x165) x438) x165) (= (x344 (x193 x438 x165) x165) x438))))
(define-fun x33 ((x438 Int) (x165 Int)) Bool (=> (and (> x165 0) (> x438 0)) (= (> x165 (x344 115792089237316195423570985008687907853269984665640564039457584007913129639935 x438)) (> (x193 x438 x165) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x167 ((x438 Int) (x165 Int)) Bool (and (= (x47 (x193 x438 x165)) (x47 (x193 (- x438 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x47 (x193 (- x438 115792089237316195423570985008687907853269984665640564039457584007913129639936) x165)) (x47 (x193 x438 x165))) (= (x47 (x193 x438 x165)) (x47 (x193 x438 (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x116 ((x438 Int) (x165 Int)) Bool (and (=> (and (and (> x165 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x165 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (> x438 0) (<= x438 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x165) (x344 57896044618658097711785492504343953926634992332820282019728792003956564819968 x438)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x193 x438 (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (<= x165 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x165 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x438) (> x438 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x193 (- x438 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x165 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x344 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x165)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x438)))) (=> (and (and (> x165 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x165)) (and (< 0 x438) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x438))) (= (<= (x193 x438 x165) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x438 (x344 57896044618658097711785492504343953926634992332820282019728792003956564819967 x165)))) (=> (and (and (> x438 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x438)) (and (<= x165 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x165))) (= (>= (x193 (- x438 115792089237316195423570985008687907853269984665640564039457584007913129639936) x165) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x344 57896044618658097711785492504343953926634992332820282019728792003956564819968 x165) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x438))))))
(define-fun x237 ((x438 Int) (x165 Int)) Bool (and (x297 x438 x165) (x116 x438 x165) (x167 x438 x165) (x19 x438 x165) (x414 x438 x165) (x33 x438 x165) (x75 x438 x165)))
(define-fun x42 ((x438 Int)) Bool (and (= (x193 x438 0) 0) (= 0 (x193 0 x438))))
(define-fun x393 ((x438 Int)) Bool (and (= x438 (x193 x438 1)) (= (x193 1 x438) x438)))
(define-fun x63 ((x438 Int)) Bool (and (x393 x438) (x42 x438)))
(define-fun x355 ((x438 Int) (x165 Int)) Bool (=> (and (> x165 0) (< 0 x438)) (and (>= x438 (x344 x438 x165)) (<= 0 (x344 x438 x165)))))
(define-fun x277 ((x438 Int) (x165 Int)) Bool (=> (and (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x165) (<= 1 x165)) (and (< x438 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x438 0))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x344 x438 x165)) (>= (x344 x438 x165) 0))))
(define-fun x4 ((x438 Int) (x165 Int)) Bool (=> (and (> x438 x165) (< 1 x165)) (> x438 (x344 x438 x165))))
(define-fun x109 ((x438 Int) (x165 Int)) Bool (=> (and (< 0 x165) (> x438 0)) (= (= (x344 x438 x165) 0) (< x438 x165))))
(define-fun x11 ((x438 Int) (x165 Int)) Bool (=> (and (> x438 0) (< 0 x165)) (and (>= x438 (x193 (x344 x438 x165) x165)) (> (x193 (x344 x438 x165) x165) (- x438 x165)))))
(define-fun x79 ((x438 Int) (x165 Int)) Bool (and (x11 x438 x165) (x4 x438 x165) (x355 x438 x165) (x109 x438 x165) (x277 x438 x165)))
(define-fun x34 ((x438 Int)) Bool (= (x344 0 x438) 0))
(define-fun x207 ((x438 Int)) Bool (= x438 (x344 x438 1)))
(define-fun x204 ((x438 Int)) Bool (=> (not (= 0 x438)) (= 1 (x344 x438 x438))))
(define-fun x23 ((x438 Int)) Bool (and (x34 x438) (x204 x438) (x207 x438)))
(define-fun x335 ((x238 x6)) Int (ite (= x238 x253) x107 (x145 x238)))
(define-fun x345 ((x238 x6)) Int (ite (= x307 x238) x28 (x259 x238)))
(define-fun x69 ((x238 Int)) Int (ite (= x238 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x448 x238)))
(define-fun x377 ((x238 Int)) Int (ite (= x238 132) x117 (x69 x238)))
(define-fun x385 ((x238 Int)) Int (ite (= 164 x238) x171 (x377 x238)))
(define-fun x341 ((x238 x6)) Int (ite (= x267 x238) x461 (x306 x238)))
(define-fun x187 ((x238 Int)) Int (ite (= x238 0) 1 (x120 x238)))
(define-fun x470 ((x238 x6)) Int (ite (= x238 x399) x314 (x103 x238)))
(define-fun x209 ((x238 Int)) Int (ite (= x238 0) 1 (x120 x238)))
(define-fun x339 ((x438 Int) (x165 Int) (x420 Int) (x22 Int)) Bool (=> (and (<= 0 x165) (>= x420 x438) (<= 0 x438) (<= x165 x22)) (<= (x193 x438 x165) (x193 x420 x22))))
(define-fun x347 ((x438 Int) (x165 Int) (x420 Int) (x22 Int)) Bool (=> (= x420 x438) (= (- (x193 x438 x165) (x193 x420 x22)) (x193 x438 (- x165 x22)))))
(define-fun x421 ((x438 Int)) Bool (=> (and (not (= x438 3265688288)) (not (= x438 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= x438 2835717307)) (not (= x438 2514000705)) (not (= x438 1461501637330902918203684832716283019655932542975)) (not (= x438 3569331386)) (not (= x438 544138160)) (not (= 1889567281 x438)) (not (= 2646777772 x438)) (not (= 2172364862 x438)) (< 10000 x438) (not (= x438 1013646637)) (not (= 1461501637330902918203684832716283019655932542976 x438)) (not (= 616825448 x438)) (not (= x438 1000000000000000000)) (not (= x438 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x438 529866654)) (not (= x438 1086394137))) (not ((_ is x131) (x455 x438)))))
(assert (=> (>= 10000 x92) (= (x455 x92) (x131 x92))))
(assert (x218 x55))
(assert (= x417 (x188 (x455 x417))))
(assert (= (x188 (x149 x91 3)) (+ (x188 x91) 3)))
(assert (x218 x314))
(assert (= x117 (x188 (x455 x117))))
(assert (= (x131 1461501637330902918203684832716283019655932542975) (x455 1461501637330902918203684832716283019655932542975)))
(assert (x218 x363))
(assert (x218 x28))
(assert (x63 (- x80 x281)))
(assert (x218 x330))
(assert (x237 x43 (- x281 x80)))
(assert (x218 x194))
(assert (x218 x122))
(assert (x218 x112))
(assert (= (x188 (x455 x92)) x92))
(assert (x63 (- x112 x229)))
(assert (x218 x211))
(assert (x218 x76))
(assert (= (x188 (x455 x372)) x372))
(assert (x237 x281 (- x43 x229)))
(assert (= x89 (and (not x90) x61)))
(assert (x218 x106))
(assert (x421 x453))
(assert (= 2172364862 (x188 (x131 2172364862))))
(assert (=> (<= x190 10000) (= (x455 x190) (x131 x190))))
(assert (= (x188 (x131 544138160)) 544138160))
(assert (x63 (- x43 x80)))
(assert (x218 x18))
(assert (x218 x67))
(assert (x218 x43))
(assert (x218 x124))
(assert (= x308 (x188 (x455 x308))))
(assert (=> (<= x127 10000) (= (x131 x127) (x455 x127))))
(assert (x218 x65))
(assert (x218 x41))
(assert (x218 x436))
(assert (= (and x88 x51) x265))
(assert (x218 x461))
(assert (= (x131 616825448) (x455 616825448)))
(assert (x63 x273))
(assert (x421 x252))
(assert (=> (>= 10000 x445) (= (x455 x445) (x131 x445))))
(assert (x63 (- x273 x43)))
(assert (= x467 (and x200 x161)))
(assert (= x7 (and (not x110) x89)))
(assert (x218 x269))
(assert (=> (>= 10000 x276) (= (x131 x276) (x455 x276))))
(assert (x218 x389))
(assert (= x317 (x188 (x455 x317))))
(assert (x339 x80 x112 x229 x273))
(assert (x347 x80 x112 x43 x281))
(assert (x421 x92))
(assert (=> (<= x374 10000) (= (x131 x374) (x455 x374))))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x105 x270 1461501637330902918203684832716283019655932542976) (* (x344 x270 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x270)) (x136 x270 1461501637330902918203684832716283019655932542976) (x225 x270 1461501637330902918203684832716283019655932542976) (x327 x270 1461501637330902918203684832716283019655932542976)))
(assert (x218 x356))
(assert (x237 x112 (- x80 x229)))
(assert (= (=> (and (or x206 (not x206)) (= (= x215 0) x206)) x101) x155))
(assert (x218 x312))
(assert (= (and x373 x325) x263))
(assert (x218 x453))
(assert (= x286 (or x72 (and (not x282) x263))))
(assert (x421 x133))
(assert (x357 1461501637330902918203684832716283019655932542975))
(assert (x421 x324))
(assert (x218 x398))
(assert (= x364 (and x290 x77)))
(assert (x347 x273 x229 x281 x43))
(assert (x218 x276))
(assert (=> (<= x417 10000) (= (x131 x417) (x455 x417))))
(assert (x347 x273 x229 x112 x80))
(assert (x218 x228))
(assert (= (and (not x199) x163) x232))
(assert (and (= 81 (x193 9 9)) (= 9 (x193 3 3)) (= 81 (x193 27 3)) (= (x193 9 3) 27)))
(assert (= (=> (and (= (x156 (+ x406 x129)) x430) (= x301 (x149 x146 4)) (= (x443 (x455 x316) x87 0) x146) (= (x443 (x455 x417) x370 0) x87) (= x370 (x443 (x455 x257) (x131 2) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x129) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x129 x406))) (>= x129 0) (= x257 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x107 x430) (= x129 (x145 x301))) x465) x84))
(assert (x63 (- x80 x43)))
(assert (=> (<= x312 10000) (= (x455 x312) (x131 x312))))
(assert (x249 x124))
(assert (x421 x389))
(assert (x237 x281 x43))
(assert (x421 x317))
(assert (=> (<= x117 10000) (= (x131 x117) (x455 x117))))
(assert (x63 (- x281 x229)))
(assert (x218 x365))
(assert (x23 x62))
(assert (= x465 (=> (and (= x391 (x443 (x455 x316) x20 0)) (= (ite (< x106 x176) x394 x176) x28) (= (x418 1461501637330902918203684832716283019655932542975 x67) x235) (= x157 (x443 (x455 x417) x219 0)) (= x317 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x451 (x443 (x455 x316) x247 0)) (= (x149 x451 1) x239) (= (x418 1461501637330902918203684832716283019655932542975 x67) x445) (= (x443 (x455 x316) x157 0) x35) (= x176 (x254 x239)) (= x289 (x443 (x455 x235) (x131 2) 0)) (= (x149 x391 4) x253) (= (x443 (x455 x417) x132 0) x247) (<= x176 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x176 0) (= x307 (x149 x35 3)) (= (x443 (x455 x417) x289 0) x20) (= x132 (x443 (x455 x445) (x131 2) 0)) (= (x443 (x455 x317) (x131 2) 0) x219) (= x256 (= x117 0))) (and (=> x256 x48) (=> (and (and (= (x178 x468) x180) (= x468 (x443 (x455 x316) x376 0)) (= x81 (x443 (x455 x389) (x131 6) 0)) (<= x94 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x376 (x443 (x455 x117) x375 0)) (= x375 (x443 (x455 x417) x413 0)) (= (x418 1461501637330902918203684832716283019655932542975 x67) x372) (= x304 (x443 (x455 x316) x266 0)) (>= x220 0) (= x413 (x443 (x455 x372) (x131 7) 0)) (= x318 (= x220 0)) (= x268 (x443 (x455 x217) (x131 8) 0)) (= (x443 (x455 x417) x81 0) x45) (= (x260 x304) x94) (= x220 (x403 x268)) (= x217 (x418 1461501637330902918203684832716283019655932542975 x67)) (>= x180 0) (= x266 (x443 (x455 x117) x45 0)) (= x389 (x418 1461501637330902918203684832716283019655932542975 x67)) (<= 0 x94) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x180) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x220)) (not x256)) (and (=> (and (and (= x456 x248) (<= x456 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x388 (x149 x293 4)) (= (x443 (x455 x316) x49 0) x293) (= (x418 1461501637330902918203684832716283019655932542975 x67) x346) (<= 0 x456) (= (x335 x388) x456) (= x400 (x443 (x455 x346) (x131 2) 0)) (= (x443 (x455 x417) x400 0) x49)) x318) x144) (=> (and (not x318) (and (and (= (x47 (x193 x229 x273)) x148) (= (x464 x137) x273) (= x398 (ite (< x106 x134) x394 x134)) (= x333 (x443 (x455 x316) x459 0)) (= (x443 (x455 x312) (x131 2) 0) x342) (= x229 (x166 (- x398 x211))) (= x78 (x149 x295 3)) (= x310 (= x229 0)) (= (x418 1461501637330902918203684832716283019655932542975 x67) x194) (<= x62 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x336 (x443 (x455 x417) x115 0)) (= (x149 x333 2) x137) (= (x418 1461501637330902918203684832716283019655932542975 x67) x365) (= x186 (x443 (x455 x194) (x131 2) 0)) (= x115 (x443 (x455 x365) (x131 2) 0)) (= x295 (x443 (x455 x316) x336 0)) (= x312 (x418 1461501637330902918203684832716283019655932542975 x67)) (<= 0 x211) (= x211 (x345 x78)) (= (x149 x371 1) x441) (not (= x62 0)) (= x64 (x443 (x455 x190) (x131 8) 0)) (>= x62 0) (= (x254 x441) x134) (= (x443 (x455 x417) x186 0) x459) (= (x443 (x455 x417) x342 0) x469) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x211) (not (> x211 x398)) (= x371 (x443 (x455 x316) x469 0)) (<= 0 x134) (= x190 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x62 (x403 x64)) (= (= 0 x148) x383) (<= 0 x273) (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) (ite x310 x310 (= (x344 x148 x229) x273)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x273)) (or (and (not x383) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* 1000000000000000000 x148)) (= (x344 x202 x62) x395) (= x395 x379) (= x202 (x47 (* 1000000000000000000 x148))))) (and (= 0 x379) x383)))) x128)))))))
(assert (x63 (- x281 x112)))
(assert (= x126 (x188 (x455 x126))))
(assert (=> (>= 10000 x308) (= (x131 x308) (x455 x308))))
(assert (x218 x82))
(assert (= x52 (and (not x88) x51)))
(assert (= (x188 (x455 x153)) x153))
(assert (x218 x374))
(assert (x237 x43 (- x281 x229)))
(assert (x421 x316))
(assert (x339 x281 x43 x229 x273))
(assert (= (x131 1889567281) (x455 1889567281)))
(assert (x218 x202))
(assert (x23 x422))
(assert (=> (>= 10000 x58) (= (x131 x58) (x455 x58))))
(assert (= x39 (=> (= x174 (not (< 1 x189))) (and x294 x174))))
(assert (x249 x67))
(assert (x421 x340))
(assert (= x194 (x188 (x455 x194))))
(assert (= x373 true))
(assert (x218 x66))
(assert (x79 x36 x112))
(assert (= x140 (or x439 x216)))
(assert (x218 x5))
(assert (x218 x379))
(assert (x218 x236))
(assert (=> (>= 10000 x372) (= (x131 x372) (x455 x372))))
(assert (x237 x229 (- x273 x281)))
(assert (= x410 (and x59 x383)))
(assert (= x72 (or (and x354 x256) x449)))
(assert (x218 x203))
(assert (= x252 (x188 (x455 x252))))
(assert (x347 x281 x43 x229 x273))
(assert (x218 x315))
(assert (x357 x124))
(assert (x218 x215))
(assert (=> (>= 10000 x153) (= (x455 x153) (x131 x153))))
(assert (and (x277 x36 1000000000000000000) (x109 x36 1000000000000000000) (x4 x36 1000000000000000000) (=> (and (< 0 1000000000000000000) (> x36 0)) (and (<= (* (x344 x36 1000000000000000000) 1000000000000000000) x36) (> (* (x344 x36 1000000000000000000) 1000000000000000000) (- x36 1000000000000000000)))) (x355 x36 1000000000000000000)))
(assert (= x316 (x188 (x455 x316))))
(assert (x218 x452))
(assert (= x182 (or x265 x52)))
(assert (x218 x71))
(assert (= (x188 (x455 x44)) x44))
(assert (x218 x353))
(assert (x421 x190))
(assert (x218 x36))
(assert (x63 (- x229 x80)))
(assert (x218 x264))
(assert (x218 x13))
(assert (=> (<= x235 10000) (= (x455 x235) (x131 x235))))
(assert (x218 x428))
(assert (x218 x92))
(assert (=> (<= x428 10000) (= (x131 x428) (x455 x428))))
(assert (= (and (not x318) x113) x59))
(assert (x218 x217))
(assert (= (x188 (x149 x371 1)) (+ 1 (x188 x371))))
(assert (x218 x283))
(assert (x421 x276))
(assert (= x200 (and x282 x263)))
(assert (= x340 (x188 (x455 x340))))
(assert (= (and (not x161) x200) x51))
(assert (x218 x94))
(assert (= (x455 3265688288) (x131 3265688288)))
(assert (x63 (- x281 x80)))
(assert (x218 x164))
(assert (x218 x317))
(assert (x218 x430))
(assert (= (x131 2514000705) (x455 2514000705)))
(assert (x421 x67))
(assert (x218 x248))
(assert (x302 x164))
(assert (x218 x9))
(assert (= x127 (x188 (x455 x127))))
(assert (= (and (not x16) x450) x242))
(assert (x421 x331))
(assert (= (x188 (x131 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x302 x270))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x105 x67 1461501637330902918203684832716283019655932542976) (* (x344 x67 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x67)) (x136 x67 1461501637330902918203684832716283019655932542976) (x225 x67 1461501637330902918203684832716283019655932542976) (x327 x67 1461501637330902918203684832716283019655932542976)))
(assert (= (=> (and (= 0 x460) (= x93 x322)) x184) x454))
(assert (x218 x369))
(assert (x218 x40))
(assert (x23 x229))
(assert (= (x188 (x455 x234)) x234))
(assert (= x332 (and x59 (not x383))))
(assert (x218 x80))
(assert (x218 x427))
(assert (x302 x124))
(assert (= (+ 3 (x188 x295)) (x188 (x149 x295 3))))
(assert (x63 (- x229 x281)))
(assert (= 1461501637330902918203684832716283019655932542975 (x188 (x131 1461501637330902918203684832716283019655932542975))))
(assert (=> (>= 10000 x234) (= (x455 x234) (x131 x234))))
(assert (x218 x458))
(assert (x218 x462))
(assert (x339 x112 x80 x281 x43))
(assert (x237 x112 (- x80 x273)))
(assert (x347 x229 x273 x43 x281))
(assert (x218 x417))
(assert (x218 x127))
(assert (x218 x29))
(assert (= x312 (x188 (x455 x312))))
(assert (= (x188 (x131 529866654)) 529866654))
(assert (= x128 (=> (and (= x152 (x335 x208)) (= (x156 (+ x379 x152)) x283) (= x283 x248) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x379 x152))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x152) (= x168 (x443 (x455 x308) (x131 2) 0)) (= (x149 x10 4) x208) (= x10 (x443 (x455 x316) x197 0)) (= x197 (x443 (x455 x417) x168 0)) (= x308 (x418 1461501637330902918203684832716283019655932542975 x67)) (<= 0 x152)) x144)))
(assert (= (+ 1 (x188 x451)) (x188 (x149 x451 1))))
(assert (x218 x273))
(assert (x218 x271))
(assert (x218 x189))
(assert (x218 x191))
(assert (x421 x417))
(assert (= (+ (x188 x338) 2) (x188 (x149 x338 2))))
(assert (x218 x123))
(assert (x347 x43 x281 x80 x112))
(assert (= (x188 (x455 x374)) x374))
(assert (x421 x58))
(assert (x63 (- x80 x229)))
(assert (x421 x346))
(assert (x218 x402))
(assert (x63 (- x43 x229)))
(assert (x218 x460))
(assert (x421 x235))
(assert (=> (<= x133 10000) (= (x455 x133) (x131 x133))))
(assert (x421 x452))
(assert (= (or x323 x150) x449))
(assert (x218 x148))
(assert (x237 x80 (- x112 x229)))
(assert (= x77 (and x173 (not x175))))
(assert (x218 x303))
(assert (x79 x41 x281))
(assert (= (x131 1461501637330902918203684832716283019655932542976) (x455 1461501637330902918203684832716283019655932542976)))
(assert (= (=> (and (and (= x424 (not x262)) (not (= x215 0)) (>= 1461501637330902918203684832716283019655932542975 x68) (<= 0 x343) (= x416 x68) (= x326 (x443 (x455 x68) (x131 4) 0)) (= x387 (x443 (x455 x126) x326 0)) (not (> 529866654 x212)) (= (not (= x343 0)) x262) (= (x149 x387 1) x368) (= x96 (ite x390 1 0)) (= x212 616825448) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x402)) (< x402 32)) (> x402 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< x212 1013646637) (= x153 x236) (= (not x424) x390) (= x1 x126) (= (x443 (x455 x153) x368 0) x24) (>= 1461501637330902918203684832716283019655932542975 x153) (<= x343 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x212 2172364862) (not (= x212 529866654)) (not (= 544138160 x212)) (= x343 (x50 x24)) (= x85 (x309 (x455 x453))) (< 0 x85) (<= x126 1461501637330902918203684832716283019655932542975)) (= (not (= x96 0)) x258)) x258) x101))
(assert (x347 x112 x80 x281 x43))
(assert (= (x188 (x455 x365)) x365))
(assert (x218 x205))
(assert (x218 x235))
(assert (= x68 (x188 (x455 x68))))
(assert (x218 x125))
(assert (x421 x194))
(assert (x218 x180))
(assert (x218 x117))
(assert (x218 x281))
(assert (= 3265688288 (x188 (x131 3265688288))))
(assert (= (x188 (x149 x35 3)) (+ 3 (x188 x35))))
(assert (x347 x43 x281 x229 x273))
(assert (x237 x229 (- x273 x43)))
(assert (x218 x58))
(assert (x218 x322))
(assert (x347 x80 x112 x229 x273))
(assert (x218 x195))
(assert (x347 x112 x80 x43 x281))
(assert (x421 x374))
(assert (= x389 (x188 (x455 x389))))
(assert (x218 x212))
(assert (= 3569331386 (x188 (x131 3569331386))))
(assert (x218 x8))
(assert (x23 x148))
(assert (x63 (- x273 x112)))
(assert (= (and x232 (not x108)) x350))
(assert (x218 x141))
(assert (= x203 (x188 (x455 x203))))
(assert (x218 x44))
(assert (x218 x285))
(assert (x218 x129))
(assert (=> (<= x126 10000) (= (x131 x126) (x455 x126))))
(assert (x237 x80 (- x112 x281)))
(assert (x218 x334))
(assert (= (x188 (x455 x361)) x361))
(assert (x218 x396))
(assert (= (x131 544138160) (x455 544138160)))
(assert (x63 (- x229 x43)))
(assert (= (x188 (x149 x378 4)) (+ (x188 x378) 4)))
(assert (=> (>= 10000 x346) (= (x455 x346) (x131 x346))))
(assert (x79 x202 x62))
(assert (x218 x95))
(assert (= (+ 4 (x188 x367)) (x188 (x149 x367 4))))
(assert (x339 x80 x112 x281 x43))
(assert (x63 x281))
(assert (x347 x273 x229 x80 x112))
(assert (x218 x2))
(assert (x63 (- x112 x273)))
(assert (x218 x287))
(assert (x339 x43 x281 x229 x273))
(assert (x237 x112 (- x80 x43)))
(assert (= (x188 (x131 2835717307)) 2835717307))
(assert (= (+ (x188 x387) 1) (x188 (x149 x387 1))))
(assert (x218 x220))
(assert (x218 x99))
(assert (x218 x152))
(assert (= (x131 2646777772) (x455 2646777772)))
(assert (x421 x445))
(assert (x63 (- x281 x273)))
(assert (x421 x126))
(assert (= (x188 (x455 x452)) x452))
(assert (x63 (- x43 x112)))
(assert (x23 x210))
(assert (x218 x395))
(assert (x63 x112))
(assert (x347 x281 x43 x273 x229))
(assert (x237 x229 x273))
(assert (= x48 (=> (and (= x37 (x241 x83)) (= (x443 (x455 x316) x275 0) x83) (= (x418 1461501637330902918203684832716283019655932542975 x67) x133) (= (x443 (x455 x133) (x131 4) 0) x275) (= x386 (not (< 1 x37)))) (and x386 x39))))
(assert (x218 x190))
(assert (x63 (- x80 x273)))
(assert (x421 x203))
(assert (= (and (not x245) x364) x102))
(assert (= (and (not x256) x354) x113))
(assert (= (=> (and (= x93 x66) (= x462 0)) x274) x463))
(assert (x218 x429))
(assert (= (x188 (x455 x217)) x217))
(assert (x218 x31))
(assert (=> (<= x361 10000) (= (x131 x361) (x455 x361))))
(assert (x63 1000000000000000000))
(assert (x63 (- x112 x43)))
(assert (x218 x107))
(assert (x237 x273 (- x229 x80)))
(assert (= (and x206 x140) x114))
(assert (= (x188 (x131 1889567281)) 1889567281))
(assert (x302 x67))
(assert (= x235 (x188 (x455 x235))))
(assert (x218 x445))
(assert (x218 x343))
(assert (= x227 (and x102 (not x426))))
(assert (x421 x372))
(assert (= x32 (x188 (x455 x32))))
(assert (= x323 (or x410 x332)))
(assert (x339 x273 x229 x112 x80))
(assert (= (x188 (x149 x146 4)) (+ 4 (x188 x146))))
(assert (= x458 (x188 (x455 x458))))
(assert (= (=> (and (= x215 x462) (= x66 x402)) x155) x274))
(assert (=> (<= x257 10000) (= (x455 x257) (x131 x257))))
(assert (x347 x43 x281 x273 x229))
(assert (x347 x273 x229 x43 x281))
(assert (= 2514000705 (x188 (x131 2514000705))))
(assert (x421 x153))
(assert (x218 x158))
(assert (x218 x257))
(assert (x237 x229 (- x273 x112)))
(assert (x347 x80 x112 x281 x43))
(assert (x218 x85))
(assert (x218 x172))
(assert (= x346 (x188 (x455 x346))))
(assert (x421 x217))
(assert (= x144 (=> (and (= x367 (x443 (x455 x316) x169 0)) (= x151 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (x149 x367 4) x27) (<= 0 x112) (= x363 (x344 x36 1000000000000000000)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x112) (= (x443 (x455 x417) x246 0) x169) (not (< x248 x94)) (= x246 (x443 (x455 x374) (x131 2) 0)) (= (x335 x27) x429) (= x112 (x328 x404)) (>= x429 0) (= (x418 1461501637330902918203684832716283019655932542975 x67) x353) (= x311 (= x112 0)) (= (x166 (- x248 x94)) x80) (= x36 (x47 (x193 x112 x80))) (ite x311 x311 (= x80 (x344 x36 x112))) (not (>= (+ x363 x180) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x404 (x443 (x455 x117) x412 0)) (= x300 (x418 1461501637330902918203684832716283019655932542975 x67)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x429) (= x374 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x13 (x156 (+ x363 x180))) (= (x443 (x455 x353) (x131 9) 0) x412)) x48)))
(assert (x218 x210))
(assert (= (x188 (x149 x230 1)) (+ (x188 x230) 1)))
(assert (x421 x308))
(assert (= (+ (x188 x333) 2) (x188 (x149 x333 2))))
(assert (x218 x32))
(assert (x218 x25))
(assert (x218 x37))
(assert (= x216 (or x227 x240)))
(assert (x218 x231))
(assert (x218 x423))
(assert (= (x188 (x149 x226 1)) (+ 1 (x188 x226))))
(assert (x218 x96))
(assert (x218 x62))
(assert (x421 x257))
(assert (x218 x372))
(assert (= x330 (x188 (x455 x330))))
(assert (= x360 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x158) (= x67 x442) (= x99 (x309 (x455 x453))) (= x408 x171) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x71) (<= x122 1461501637330902918203684832716283019655932542975) x159 (= x325 (< 0 x189)) (> 3569331386 x119) (= x117 x122) (not (> 2172364862 x119)) (not (> 4 x392)) (< 0 x99) (= 0 x97) (= 0 x14) (= x171 x160) (= x228 x269) (= x159 (not (= 0 x82))) (>= 1461501637330902918203684832716283019655932542975 x228) (= x14 x141) (= x67 x170) (<= 0 x124) (= (x196 x411) x189) (<= 0 x71) (not (= 2 x71)) (>= 1461501637330902918203684832716283019655932542975 x67) (not (> 3265688288 x119)) (= x117 x124) (= x119 3265688288) (<= 0 x122) (>= x228 0) (>= x280 0) (= x287 (x166 (- x392 4))) (and (< 67 x392) (= true (<= x392 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= x280 1461501637330902918203684832716283019655932542975) (= x106 x394) (= x118 x321) (<= 0 x158) (= x280 x118) (not (or (and (< x287 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x287))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x287))) (<= x124 1461501637330902918203684832716283019655932542975) (= (x443 (x455 x67) (x131 3) 0) x411)) (and (not (= x203 x453)) (= x457 (< 0 (x309 (x455 x453)))) (<= 0 x1) (>= x416 0) (= false x292) x15 (= (x70 (x455 x44)) x55) (= (not (= 0 x181)) x162) x38 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x181) (<= x203 1461501637330902918203684832716283019655932542975) (= (x50 x432) x181) (>= 1461501637330902918203684832716283019655932542975 x44) (= x452 x236) (> 2172364862 x76) (= x32 x1) (= x331 x416) (= x384 false) (= x436 3265688288) x457 (not (= x76 529866654)) (>= 1461501637330902918203684832716283019655932542975 x453) (= (x309 (x455 x453)) x358) (<= x1 1461501637330902918203684832716283019655932542975) (<= x236 1461501637330902918203684832716283019655932542975) (= (not x162) x419) (>= 1461501637330902918203684832716283019655932542975 x32) (> x203 0) (= 616825448 x76) (= (x443 (x455 x32) x104 0) x226) (< 0 x358) (>= x55 0) (= false x142) (<= x416 1461501637330902918203684832716283019655932542975) (not (< x76 529866654)) (<= x284 1461501637330902918203684832716283019655932542975) (not (= x44 x203)) (= x82 (ite x221 1 0)) (= (x149 x226 1) x425) (<= 0 x2) (>= x236 0) (not (= 544138160 x76)) (< 0 x453) (<= 0 x46) (= (x70 (x455 x203)) x2) (= false x12) (<= 0 x181) (= (> (x309 (x455 x44)) 0) x15) (>= 1461501637330902918203684832716283019655932542975 x452) (= x221 (not x419)) (not (= x453 x44)) (<= x331 1461501637330902918203684832716283019655932542975) (= x46 (x70 (x455 x453))) (< 0 x44) (<= x25 255) (<= 0 x284) (>= x25 0) (= (x443 (x455 x452) x425 0) x432) (> 1013646637 x76) (= x139 2) (= x38 (< 0 (x309 (x455 x203)))) (= (x443 (x455 x331) (x131 4) 0) x104))) (and (=> (not x325) x294) (=> (and (and (= (x444 x278 0) x250) (= x278 (x443 (x455 x234) (x131 3) 0)) (= x415 x250) (< x316 1461501637330902918203684832716283019655932542976) (= (x418 1461501637330902918203684832716283019655932542975 x67) x276) (= (x443 (x455 x276) (x131 4) 0) x74) (<= x316 1461501637330902918203684832716283019655932542975) (= (x359 x415) x316) (= (x443 (x455 x316) x74 0) x60) (>= x316 0) (= (x196 x278) x123) (= x234 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (< 0 x130) x282) (= x195 0) (> x123 0) (= x130 (x241 x60))) x325) (and (=> (not x282) x39) (=> (and x282 (and (<= 0 x417) (> x18 0) (= (x241 x192) x18) (> 1461501637330902918203684832716283019655932542976 x417) (>= 1461501637330902918203684832716283019655932542975 x417) (= (= 0 x29) x161) (= (x403 x3) x29) (= x127 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (x443 (x455 x58) (x131 8) 0) x3) (= (x401 x135) x417) (= (x443 (x455 x127) (x131 4) 0) x381) (<= x29 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x58 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (x443 (x455 x316) x381 0) x192) (= (x444 x192 0) x313) (= x135 x313) (>= x29 0))) (and (=> (and x161 (and (= x434 (x149 x378 4)) (= (x443 (x455 x458) (x131 2) 0) x319) (= x378 (x443 (x455 x316) x223 0)) (>= x255 0) (= x458 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x223 (x443 (x455 x417) x319 0)) (= x255 (x145 x434)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x255) (= x255 x107))) x465) (=> (and (and (and (>= x334 0) (= (x149 x338 2) x224) (= x31 (x254 x352)) (= x405 (x443 (x455 x428) (x131 2) 0)) (= x41 (x47 (x193 x281 x43))) (= x230 (x443 (x455 x316) x111 0)) (= x352 (x149 x230 1)) (= (x149 x91 3) x213) (= (x403 x179) x422) (= x428 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (x443 (x455 x417) x405 0) x111) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x422) (= x334 (x259 x213)) (= x324 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x91 (x443 (x455 x316) x243 0)) (= x243 (x443 (x455 x417) x447 0)) (= x288 (x443 (x455 x324) (x131 2) 0)) (>= x43 0) (= (x464 x224) x43) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x43) (= (x418 1461501637330902918203684832716283019655932542975 x67) x340) (not (< x466 x334)) (= x92 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (x443 (x455 x417) x288 0) x26) (= x233 (= 0 x281)) (= x338 (x443 (x455 x316) x26 0)) (<= 0 x31) (= x179 (x443 (x455 x340) (x131 8) 0)) (<= 0 x422) (<= x334 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x443 (x455 x92) (x131 2) 0) x447) (not (= x422 0)) (= x281 (x166 (- x466 x334))) (= x466 (ite (< x106 x31) x394 x31)) (<= x31 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x88 (= 0 x41)) (ite x233 x233 (= x43 (x344 x41 x281)))) (or (and (and (= (x47 (* 1000000000000000000 x41)) x210) (= x356 (x344 x210 x422)) (= x356 x406) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x41 1000000000000000000))) (not x88)) (and x88 (= x406 0)))) (not x161)) x84)))))))))
(assert (x237 x229 (- x273 x80)))
(assert (=> (<= x369 10000) (= (x131 x369) (x455 x369))))
(assert (x339 x112 x80 x229 x273))
(assert (x347 x229 x273 x112 x80))
(assert (= x439 (or x291 x7)))
(assert (x218 x406))
(assert (= x150 (and x318 x113)))
(assert (x218 x229))
(assert (x249 x270))
(assert (=> (<= x452 10000) (= (x131 x452) (x455 x452))))
(assert (= (x188 (x131 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (= x369 (x188 (x455 x369))))
(assert (x218 x320))
(assert (x237 x112 (- x80 x281)))
(assert (x218 x316))
(assert (x421 x330))
(assert (=> (>= 10000 x231) (= (x131 x231) (x455 x231))))
(assert (=> (>= 10000 x389) (= (x131 x389) (x455 x389))))
(assert (=> (<= x340 10000) (= (x455 x340) (x131 x340))))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x105 x164 1461501637330902918203684832716283019655932542976) (* (x344 x164 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x164)) (x136 x164 1461501637330902918203684832716283019655932542976) (x225 x164 1461501637330902918203684832716283019655932542976) (x327 x164 1461501637330902918203684832716283019655932542976)))
(assert (= (x188 (x455 x324)) x324))
(assert (x63 x41))
(assert (x63 (- x273 x281)))
(assert (x218 x160))
(assert (= x133 (x188 (x455 x133))))
(assert (= (x455 1000000000000000000) (x131 1000000000000000000)))
(assert (x218 x97))
(assert (x218 x14))
(assert (x237 x80 (- x112 x43)))
(assert (= 2646777772 (x188 (x131 2646777772))))
(assert (x218 x1))
(assert (x347 x112 x80 x229 x273))
(assert (x357 x164))
(assert (x237 x281 (- x43 x112)))
(assert (=> (>= 10000 x203) (= (x455 x203) (x131 x203))))
(assert (x218 x133))
(assert (x347 x112 x80 x273 x229))
(assert (x218 x176))
(assert (x218 x321))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x105 x124 1461501637330902918203684832716283019655932542976) (* (x344 x124 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x124)) (x136 x124 1461501637330902918203684832716283019655932542976) (x225 x124 1461501637330902918203684832716283019655932542976) (x327 x124 1461501637330902918203684832716283019655932542976)))
(assert (= 1086394137 (x188 (x131 1086394137))))
(assert (x218 x270))
(assert (x218 x234))
(assert (x218 x284))
(assert (x79 x148 x229))
(assert (x218 x68))
(assert (x218 x416))
(assert (x237 x281 (- x43 x80)))
(assert (x218 x255))
(assert (x218 x134))
(assert (= (and x199 x163) x450))
(assert (= x294 (=> (and (= x231 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (x443 (x455 x231) (x131 8) 0) x407) (= (x443 (x455 x330) (x131 9) 0) x299) (= x86 (x166 (- x433 x171))) (= x369 (x418 1461501637330902918203684832716283019655932542975 x67)) (= (= x369 x203) x199) (not (< x198 x160)) (= (x418 1461501637330902918203684832716283019655932542975 x67) x397) (<= x198 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x433) (= x330 (x418 1461501637330902918203684832716283019655932542975 x67)) (= x125 (x309 (x455 x369))) (= x198 (x328 x329)) (>= x198 0) (= (x443 (x455 x117) x299 0) x329) (not (= x125 0)) (= x433 (x403 x407)) (<= x433 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x166 (- x198 x171)) x177) (= (x418 1461501637330902918203684832716283019655932542975 x67) x191) (= 128 x271) (< 0 x160) (not (< x433 x160))) (and (=> (and (and (= x423 68) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x138) (= x16 (or (and (= (<= x40 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> 64 x40)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x40))) (not (= 1086394137 x65)) (not (= 2514000705 x65)) (not (= x65 2646777772)) (not (> 1086394137 x65)) (> x396 0) (= (x166 (- x423 4)) x40) (= x423 68) (not (> 4 x423)) (= (x309 (x455 x203)) x396) (= x164 x124) (not (= x65 1889567281)) (= x65 2835717307) (= x160 x56)) x199) (and (=> x16 x454) (=> (and (and (= (= x124 x214) x261) (= (x418 1461501637330902918203684832716283019655932542975 x124) x214)) (not x16)) (and (=> (not x261) x454) (=> (and (and (= (x443 (x455 x453) (x131 1) 0) x57) (= (x306 x57) x285) (= (< x285 x160) x90) (= x320 x56) (<= x285 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x285 0)) x261) (and (=> (and (and (= x409 (x341 x440)) (= x267 (x443 (x455 x453) (x131 1) 0)) (= (x443 (x455 x252) (x131 1) 0) x440) (= x100 (x156 (+ x56 x409))) (<= 0 x409) (= x252 (x418 1461501637330902918203684832716283019655932542975 x164)) (= (< x100 x409) x110) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x409) (= (x166 (- x285 x56)) x461)) (not x90)) (and (=> x110 x454) (=> (and (not x110) (and (= x322 32) (= x460 1) (= (x418 1461501637330902918203684832716283019655932542975 x164) x121))) x184))) (=> x90 x454))))))) (=> (and (not x199) (and (= (= x44 x369) x108) (and x108 (and (= (x166 (- x349 4)) x95) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x427) (not (> 4 x349)) (not (= x172 2646777772)) (not (= 1086394137 x172)) (not (> 1086394137 x172)) (= x270 x124) (not (= x172 2514000705)) (= (x309 (x455 x44)) x351) (= x349 68) (= 2835717307 x172) (= (or (and (> 64 x95) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x95))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x95)) x175) (< 0 x351) (= 68 x349) (= x160 x315) (not (= 1889567281 x172)))))) (and (=> (and (and (= (x418 1461501637330902918203684832716283019655932542975 x124) x205) (= (= x124 x205) x290)) (not x175)) (and (=> (and (and (<= 0 x8) (= x315 x244) (= x8 (x103 x185)) (= x245 (< x8 x160)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x8) (= x185 (x443 (x455 x453) (x131 1) 0))) x290) (and (=> (and (not x245) (and (= x9 (x470 x251)) (<= x9 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x443 (x455 x361) (x131 1) 0) x251) (= x303 (x156 (+ x315 x9))) (= x361 (x418 1461501637330902918203684832716283019655932542975 x270)) (= x426 (< x303 x9)) (= x399 (x443 (x455 x453) (x131 1) 0)) (= (x166 (- x8 x315)) x314) (>= x9 0))) (and (=> (and (and (= 1 x462) (= x264 (x418 1461501637330902918203684832716283019655932542975 x270)) (= 32 x66)) (not x426)) x274) (=> x426 x463))) (=> x245 x463))) (=> (not x290) x463))) (=> x175 x463)))))))
(assert (= x184 (=> (and (= x402 x322) (= x215 x460)) x155)))
(assert (x23 x202))
(assert (x421 x353))
(assert (x218 x361))
(assert (x218 x349))
(assert (x421 x32))
(assert (x237 x273 (- x229 x281)))
(assert (=> (<= x317 10000) (= (x131 x317) (x455 x317))))
(assert (= (x455 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x131 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (= (x188 (x131 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (=> (<= x353 10000) (= (x455 x353) (x131 x353))))
(assert (x218 x244))
(assert (x339 x229 x273 x281 x43))
(assert (= (or x286 (and (not x325) x373)) x163))
(assert (x218 x358))
(assert (= x58 (x188 (x455 x58))))
(assert (x347 x229 x273 x281 x43))
(assert (= (x131 3569331386) (x455 3569331386)))
(assert (x421 x44))
(assert (=> (<= x458 10000) (= (x455 x458) (x131 x458))))
(assert (= (or (and x110 x89) (and x90 x61) (and x450 x16) (and (not x261) x242)) x291))
(assert (and (x116 1000000000000000000 x41) (x33 1000000000000000000 x41) (x19 1000000000000000000 x41) (= (* 1000000000000000000 x41) (x193 1000000000000000000 x41)) (x414 1000000000000000000 x41) (and (= (* (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000) (x193 1000000000000000000 (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x193 (- 115792089237316195423570985008687907853269984665640564039456584007913129639936) (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000) (* (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 1000000000000000000 x41) (* x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x193 (- 115792089237316195423570985008687907853269984665640564039456584007913129639936) x41))) (x167 1000000000000000000 x41)))
(assert (x218 x442))
(assert (x339 x229 x273 x112 x80))
(assert (x302 1461501637330902918203684832716283019655932542976))
(assert (x79 x210 x422))
(assert (x218 x126))
(assert (x218 x93))
(assert (=> (>= 10000 x330) (= (x131 x330) (x455 x330))))
(assert (x218 x392))
(assert (x218 x331))
(assert (= x453 (x188 (x455 x453))))
(assert (x218 x177))
(assert (x218 x324))
(assert (= (+ 4 (x188 x10)) (x188 (x149 x10 4))))
(assert (x218 x397))
(assert (= (x188 (x455 x67)) x67))
(assert (x218 x340))
(assert (x218 x181))
(assert (=> (>= 10000 x453) (= (x131 x453) (x455 x453))))
(assert (= 616825448 (x188 (x131 616825448))))
(assert (x218 x346))
(assert (= x190 (x188 (x455 x190))))
(assert (x23 x281))
(assert (x218 x351))
(assert (=> (<= x316 10000) (= (x131 x316) (x455 x316))))
(assert (x218 x408))
(assert (=> (<= x252 10000) (= (x131 x252) (x455 x252))))
(assert (= x445 (x188 (x455 x445))))
(assert (x218 x56))
(assert (x237 x273 (- x229 x43)))
(assert (x218 x153))
(assert (x218 x422))
(assert (x347 x281 x43 x112 x80))
(assert (x63 (- x273 x80)))
(assert (= (x188 (x455 x331)) x331))
(assert (x218 x252))
(assert (x237 x273 (- x229 x112)))
(assert (x218 x119))
(assert (= (x188 (x455 x276)) x276))
(assert (x218 x280))
(assert (= (x131 1086394137) (x455 1086394137)))
(assert (x23 1000000000000000000))
(assert (x237 x281 (- x43 x273)))
(assert (x218 x308))
(assert (x218 x151))
(assert (= (or x467 x182) x354))
(assert (x421 x231))
(assert (=> (>= 10000 x365) (= (x131 x365) (x455 x365))))
(assert (= (x188 (x149 x293 4)) (+ 4 (x188 x293))))
(assert (x421 x127))
(assert (x63 (- x112 x281)))
(assert (x63 (- x229 x112)))
(assert (x421 x361))
(assert (x347 x281 x43 x80 x112))
(assert (x421 x365))
(assert (x23 x41))
(assert (x23 x36))
(assert (= (x455 2172364862) (x131 2172364862)))
(assert (x237 x43 (- x281 x273)))
(assert (x237 x80 (- x112 x273)))
(assert (x218 x394))
(assert (x421 x369))
(assert (x218 x300))
(assert (x421 x458))
(assert (x218 x433))
(assert (x218 x409))
(assert (=> (<= x32 10000) (= (x131 x32) (x455 x32))))
(assert (= 1000000000000000000 (x188 (x131 1000000000000000000))))
(assert (= (x188 (x131 1013646637)) 1013646637))
(assert (= x231 (x188 (x455 x231))))
(assert (= (+ 4 (x188 x391)) (x188 (x149 x391 4))))
(assert (x339 x281 x43 x112 x80))
(assert (x421 x234))
(assert (=> (>= 10000 x217) (= (x455 x217) (x131 x217))))
(assert (x218 x130))
(assert (x237 x43 (- x281 x112)))
(assert (= x428 (x188 (x455 x428))))
(assert (=> (>= 10000 x67) (= (x131 x67) (x455 x67))))
(assert (= (x455 2835717307) (x131 2835717307)))
(assert (= (x455 529866654) (x131 529866654)))
(assert (= (or x114 (and x140 (not x206))) x201))
(assert (x218 x198))
(assert (= (x455 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x131 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x218 x86))
(assert (x218 x121))
(assert (x23 x112))
(assert (=> (>= 10000 x331) (= (x455 x331) (x131 x331))))
(assert (x339 x43 x281 x112 x80))
(assert (x249 x164))
(assert (x421 x68))
(assert (x218 x139))
(assert (x421 x312))
(assert (=> (<= x194 10000) (= (x131 x194) (x455 x194))))
(assert (and (x116 1000000000000000000 x148) (x33 1000000000000000000 x148) (x19 1000000000000000000 x148) (= (* 1000000000000000000 x148) (x193 1000000000000000000 x148)) (x414 1000000000000000000 x148) (and (= (* (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000) (x193 1000000000000000000 (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x193 (- 115792089237316195423570985008687907853269984665640564039456584007913129639936) (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1000000000000000000) (* (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* 1000000000000000000 x148) (* x148 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x193 (- 115792089237316195423570985008687907853269984665640564039456584007913129639936) x148))) (x167 1000000000000000000 x148)))
(assert (=> (>= 10000 x44) (= (x455 x44) (x131 x44))))
(assert (x421 x428))
(assert (x218 x118))
(assert (= (x188 (x455 x257)) x257))
(assert (=> (>= 10000 x68) (= (x131 x68) (x455 x68))))
(assert (= (x455 1013646637) (x131 1013646637)))
(assert (x347 x229 x273 x80 x112))
(assert (x63 (- x43 x273)))
(assert (x218 x456))
(assert (x347 x80 x112 x273 x229))
(assert (x63 x148))
(assert (x339 x273 x229 x281 x43))
(assert (x218 x214))
(assert (not x360))
(assert (x63 x229))
(assert (x218 x138))
(assert (x357 x270))
(assert (x218 x170))
(assert (x218 x466))
(assert (x63 x43))
(assert (= (x188 (x455 x353)) x353))
(assert (x237 x112 x80))
(assert (x218 x171))
(assert (= (or (and x173 x175) (and x364 x245) (and x77 (not x290)) (and x102 x426)) x240))
(assert (= (and x242 x261) x61))
(assert (x357 x67))
(assert (= (and x108 x232) x173))
(assert (=> (<= x324 10000) (= (x131 x324) (x455 x324))))
(assert (x421 x117))
(assert (x218 x100))
(assert (x218 x46))
(assert (x347 x43 x281 x112 x80))
(assert (x63 x80))
(check-sat)
(exit)
