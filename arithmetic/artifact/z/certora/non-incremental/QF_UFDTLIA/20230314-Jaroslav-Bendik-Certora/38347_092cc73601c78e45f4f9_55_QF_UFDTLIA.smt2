(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x36 0)) (((x278 (x164 x36) (x210 x36) (x194 Int)) (x2 (x248 Int)) (x122 (x130 x36) (x228 Int)))))
(declare-fun x81 () Int)
(declare-fun x71 () Bool)
(declare-fun x263 () Bool)
(declare-fun x69 () Int)
(declare-fun x196 () Int)
(declare-fun x109 () Int)
(declare-fun x151 () Int)
(declare-fun x64 () x36)
(declare-fun x21 () Int)
(declare-fun x124 () Int)
(declare-fun x283 () Int)
(declare-fun x288 () Bool)
(declare-fun x39 () Int)
(declare-fun x255 () Int)
(declare-fun x271 () Int)
(declare-fun x272 () x36)
(declare-fun x191 () Int)
(declare-fun x185 () Int)
(declare-fun x108 () Int)
(declare-fun x51 () Int)
(declare-fun x8 () Int)
(declare-fun x45 () Int)
(declare-fun x55 (Int) Int)
(declare-fun x240 () Int)
(declare-fun x277 () Bool)
(declare-fun x149 (x36) Int)
(declare-fun x92 (x36) Int)
(declare-fun x254 () Int)
(declare-fun x30 () Int)
(declare-fun x265 () Int)
(declare-fun x27 () Int)
(declare-fun x162 () Int)
(declare-fun x138 () Int)
(declare-fun x37 () Int)
(declare-fun x1 () Int)
(declare-fun x166 () Int)
(declare-fun x225 () Int)
(declare-fun x119 () Int)
(declare-fun x207 () Int)
(declare-fun x159 () Int)
(declare-fun x86 () Int)
(declare-fun x275 () Int)
(declare-fun x114 () Int)
(declare-fun x41 (x36) Int)
(declare-fun x127 (Int Int) Int)
(declare-fun x140 () Int)
(declare-fun x280 () Bool)
(declare-fun x142 () Int)
(declare-fun x123 () Int)
(declare-fun x11 () Int)
(declare-fun x186 () Int)
(declare-fun x87 () Int)
(declare-fun x174 () Int)
(declare-fun x20 () Int)
(declare-fun x52 () Int)
(declare-fun x267 () Bool)
(declare-fun x179 () Int)
(declare-fun x188 () Int)
(declare-fun x197 () Bool)
(declare-fun x40 () Int)
(declare-fun x98 () Int)
(declare-fun x252 () Int)
(declare-fun x112 () Int)
(declare-fun x25 () Int)
(declare-fun x199 () Int)
(declare-fun x136 () Int)
(declare-fun x10 () Bool)
(declare-fun x219 () Bool)
(declare-fun x94 () Int)
(declare-fun x202 () Int)
(declare-fun x85 () x36)
(declare-fun x182 () Int)
(declare-fun x158 () Int)
(declare-fun x279 () Int)
(declare-fun x193 () Int)
(declare-fun x80 () Int)
(declare-fun x29 () Int)
(declare-fun x60 () Int)
(declare-fun x93 () Int)
(declare-fun x84 () Int)
(declare-fun x7 () Int)
(declare-fun x249 () Int)
(declare-fun x129 () Int)
(declare-fun x67 (Int) Int)
(declare-fun x258 (Int) Int)
(declare-fun x17 () Int)
(declare-fun x16 (Int Int) Int)
(declare-fun x28 () Int)
(declare-fun x253 () Int)
(declare-fun x204 (x36) Int)
(declare-fun x18 () Int)
(declare-fun x176 () Int)
(declare-fun x200 () Int)
(declare-fun x224 (Int) Int)
(declare-fun x180 () Int)
(declare-fun x243 () Bool)
(declare-fun x144 () Int)
(declare-fun x218 () Int)
(declare-fun x217 () Int)
(declare-fun x192 () Int)
(declare-fun x104 () Int)
(declare-fun x99 () Int)
(declare-fun x111 () Int)
(declare-fun x78 () Int)
(declare-fun x216 () Int)
(declare-fun x262 () Int)
(declare-fun x266 () Bool)
(declare-fun x245 () Int)
(declare-fun x237 () Int)
(declare-fun x32 () x36)
(declare-fun x213 () Int)
(declare-fun x137 () Int)
(declare-fun x173 () Int)
(declare-fun x63 () Int)
(declare-fun x22 (Int) Int)
(declare-fun x168 () Int)
(declare-fun x133 () Int)
(declare-fun x270 () Int)
(declare-fun x170 () Int)
(declare-fun x246 () x36)
(declare-fun x177 () Bool)
(declare-fun x128 () Int)
(declare-fun x9 () Bool)
(declare-fun x284 () Int)
(declare-fun x236 (Int) Int)
(declare-fun x125 () Int)
(declare-fun x5 () Int)
(declare-fun x4 () Int)
(declare-fun x139 () Int)
(declare-fun x250 () Bool)
(declare-fun x286 () Int)
(declare-fun x235 () Int)
(declare-fun x79 () Int)
(declare-fun x201 () Int)
(declare-fun x157 () Int)
(declare-fun x198 () Int)
(declare-fun x15 () Int)
(declare-fun x95 () Int)
(declare-fun x6 () Int)
(declare-fun x178 () Int)
(declare-fun x269 () Int)
(declare-fun x48 () Int)
(declare-fun x241 () Int)
(declare-fun x82 () Int)
(declare-fun x214 () Int)
(declare-fun x242 () Int)
(declare-fun x59 () Int)
(declare-fun x268 () Int)
(declare-fun x83 () Int)
(declare-fun x175 () Int)
(declare-fun x171 () Int)
(declare-fun x259 () Int)
(declare-fun x220 () Int)
(declare-fun x208 () Int)
(declare-fun x141 (Int) Int)
(declare-fun x274 () Int)
(declare-fun x33 () Bool)
(declare-fun x121 () Int)
(declare-fun x105 () Int)
(declare-fun x110 () Int)
(declare-fun x160 () Int)
(declare-fun x120 () Bool)
(declare-fun x187 () Int)
(declare-fun x247 () Int)
(declare-fun x131 () Int)
(declare-fun x239 () Int)
(declare-fun x19 () Bool)
(declare-fun x148 () Int)
(declare-fun x77 () Int)
(declare-fun x132 () Int)
(declare-fun x229 () Int)
(declare-fun x281 () Int)
(declare-fun x238 () Int)
(declare-fun x154 () Int)
(declare-fun x126 () Int)
(declare-fun x44 () Int)
(declare-fun x285 () Int)
(declare-fun x227 () Int)
(declare-fun x14 (Int) Int)
(declare-fun x35 () Int)
(declare-fun x54 () Int)
(declare-fun x106 () Int)
(declare-fun x150 (Int) x36)
(declare-fun x103 (Int) Int)
(declare-fun x12 (Int Int) Int)
(declare-fun x163 () Int)
(declare-fun x47 () Int)
(declare-fun x264 () Bool)
(declare-fun x226 () Int)
(declare-fun x97 (Int Int) Int)
(declare-fun x50 () Int)
(declare-fun x89 () Int)
(declare-fun x223 () Int)
(declare-fun x62 () Int)
(declare-fun x61 (Int Int) Int)
(declare-fun x221 () Bool)
(declare-fun x49 () Int)
(declare-fun x257 () Int)
(declare-fun x42 () Int)
(declare-fun x13 (Int) Int)
(declare-fun x222 () x36)
(declare-fun x152 () Int)
(declare-fun x211 () Int)
(declare-fun x72 () Int)
(declare-fun x3 () Int)
(declare-fun x156 () x36)
(declare-fun x230 () x36)
(declare-fun x172 () Int)
(declare-fun x75 () Int)
(define-fun x256 ((x36 x36) (x195 Int)) x36 (ite ((_ is x122) x36) (x122 (x130 x36) (+ x195 (x228 x36))) (ite ((_ is x278) x36) (x278 (x164 x36) (x210 x36) (+ x195 (x194 x36))) (x2 (+ x195 (x248 x36))))))
(define-fun x100 ((x88 Int)) Int (ite (and (<= 0 x88) (< x88 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x88 (- x88 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x153 ((x88 Int)) Int (ite (and (>= x88 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x88 0)) (+ x88 115792089237316195423570985008687907853269984665640564039457584007913129639936) x88))
(define-fun x43 ((x88 Int)) Int (ite (and (>= x88 0) (< x88 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x88 (ite (and (>= x88 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x88)) (- x88 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x88) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x88)) (+ x88 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x61 x88 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x113 ((x65 Int)) Bool (and (>= x65 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x65)))
(define-fun x91 ((x65 Int) (x276 Int)) Bool (=> (and (> x276 0) (< 0 x65)) (and (>= (x97 x65 x276) 0) (>= x65 (x97 x65 x276)))))
(define-fun x70 ((x65 Int) (x276 Int)) Bool (=> (and (and (<= 1 x276) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x276)) (and (<= 0 x65) (< x65 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x97 x65 x276) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x97 x65 x276)))))
(define-fun x206 ((x65 Int) (x276 Int)) Bool (=> (and (< 1 x276) (> x65 x276)) (< (x97 x65 x276) x65)))
(define-fun x161 ((x65 Int) (x276 Int)) Bool (=> (and (> x65 0) (> x276 0)) (= (= 0 (x97 x65 x276)) (> x276 x65))))
(define-fun x53 ((x65 Int)) Bool (= (x97 0 x65) 0))
(define-fun x233 ((x65 Int)) Bool (= x65 (x97 x65 1)))
(define-fun x169 ((x65 Int)) Bool (=> (not (= 0 x65)) (= (x97 x65 x65) 1)))
(define-fun x116 ((x65 Int)) Bool (and (x169 x65) (x233 x65) (x53 x65)))
(define-fun x205 ((x65 Int)) Bool (and (= (x16 x65 115792089237316195423570985008687907853269984665640564039457584007913129639935) x65) (= x65 (x16 115792089237316195423570985008687907853269984665640564039457584007913129639935 x65))))
(define-fun x58 ((x65 Int)) Bool (and (= 0 (x16 0 x65)) (= 0 (x16 x65 0))))
(define-fun x76 ((x65 Int)) Bool (= (x16 x65 x65) x65))
(define-fun x24 ((x65 Int)) Bool (and (x58 x65) (x76 x65) (x205 x65)))
(define-fun x38 ((x65 Int) (x276 Int)) Bool (= (x16 x276 x65) (x16 x65 x276)))
(define-fun x66 ((x65 Int) (x276 Int)) Bool (and (=> (>= x276 0) (<= (x16 x65 x276) x276)) (=> (<= 0 x65) (>= x65 (x16 x65 x276))) (>= (x16 x65 x276) 0)))
(define-fun x23 ((x65 Int) (x276 Int)) Bool (and (x66 x65 x276) (x38 x65 x276)))
(define-fun x68 ((x65 Int)) Bool (= (x16 x65 4294967295) (x61 x65 4294967296)))
(define-fun x273 ((x65 Int)) Bool (and (x68 x65) (x23 x65 4294967295)))
(define-fun x115 ((x65 Int) (x276 Int)) Bool (and (<= 0 (x61 x65 x276)) (> x276 (x61 x65 x276))))
(define-fun x203 ((x65 Int) (x276 Int)) Bool (=> (and (< 0 x276) (>= x65 0)) (= (< x65 x276) (= (x61 x65 x276) x65))))
(define-fun x74 ((x65 Int) (x276 Int)) Bool (=> (and (< 0 x276) (and (<= x276 x65) (< x65 (+ x276 x276)))) (= (x61 x65 x276) (- x65 x276))))
(define-fun x26 ((x65 Int)) Bool (= 0 (x61 0 x65)))
(define-fun x56 ((x65 Int)) Bool (= 0 (x61 x65 1)))
(define-fun x244 ((x65 Int)) Bool (= 0 (x61 x65 x65)))
(define-fun x232 ((x65 Int)) Bool (and (x26 x65) (x56 x65) (x244 x65)))
(define-fun x34 ((x65 Int)) Bool (= (x16 x65 340282366920938463463374607431768211455) (x61 x65 340282366920938463463374607431768211456)))
(define-fun x183 ((x65 Int)) Bool (and (x34 x65) (x23 x65 340282366920938463463374607431768211455)))
(define-fun x282 ((x65 Int)) Bool (= (x61 x65 1461501637330902918203684832716283019655932542976) (x16 x65 1461501637330902918203684832716283019655932542975)))
(define-fun x117 ((x65 Int)) Bool (and (x23 x65 1461501637330902918203684832716283019655932542975) (x282 x65)))
(define-fun x212 ((x65 Int)) Bool (= (x16 x65 255) (x61 x65 256)))
(define-fun x118 ((x65 Int)) Bool (and (x212 x65) (x23 x65 255)))
(define-fun x143 ((x65 Int)) Bool (= (x43 x65) (+ (x61 x65 256) (x16 x65 115792089237316195423570985008687907853269984665640564039457584007913129639680))))
(define-fun x190 ((x65 Int)) Bool (and (x143 x65) (x23 x65 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(define-fun x145 ((x209 Int)) Int (ite (= 128 x209) x27 (x13 x209)))
(define-fun x107 ((x209 Int)) Int (ite (= 160 x209) x25 (x145 x209)))
(define-fun x215 ((x209 Int)) Int (ite (= x209 192) x217 (x107 x209)))
(define-fun x46 ((x209 Int)) Int (ite (= 224 x209) x82 (x215 x209)))
(define-fun x73 ((x209 Int)) Int (ite (= x209 256) x241 (x46 x209)))
(define-fun x155 ((x209 Int)) Int (ite (= x209 128) x171 (x22 x209)))
(define-fun x146 ((x209 Int)) Int (ite (= x209 160) x89 (x67 x209)))
(define-fun x234 ((x209 Int)) Int (ite (= 192 x209) x40 (x55 x209)))
(define-fun x90 ((x209 Int)) Int (ite (= 224 x209) x253 (x14 x209)))
(define-fun x167 ((x209 Int)) Int (ite (= x209 256) x218 (x103 x209)))
(define-fun x96 ((x209 Int)) Int (ite (= x209 288) x223 (x236 x209)))
(define-fun x189 ((x209 Int)) Int (ite (= x209 512) x79 (x141 x209)))
(define-fun x102 ((x209 Int)) Int (ite (= 544 x209) x78 (x189 x209)))
(define-fun x147 ((x209 Int)) Int (ite (= 576 x209) x211 (x102 x209)))
(define-fun x260 ((x209 Int)) Int (ite (= 608 x209) x157 (x147 x209)))
(define-fun x135 ((x209 Int)) Int (ite (= 640 x209) x207 (x260 x209)))
(define-fun x261 ((x209 Int)) Int (ite (= x209 672) x202 (x135 x209)))
(define-fun x31 ((x209 x36)) Int (ite (= (x150 x284) x209) x254 (x92 x209)))
(define-fun x101 ((x209 Int)) Int (ite (= x209 128) x105 (x258 x209)))
(define-fun x134 ((x209 Int)) Int (ite (= x209 160) x119 (x101 x209)))
(define-fun x290 ((x209 Int)) Int (ite (= x209 192) x240 (x134 x209)))
(define-fun x251 ((x209 Int)) Int (ite (= x209 224) x199 (x290 x209)))
(define-fun x165 ((x209 Int)) Int (ite (= 256 x209) x158 (x251 x209)))
(define-fun x57 ((x65 Int)) Bool (=> (and (not (= 3250587425 x65)) (not (= 4294967295 x65)) (not (= 340282366920938463463374607431768211455 x65)) (not (= x65 81955473079516046949633743016697847541294818689821282749996681496272635257091)) (not (= x65 662108492)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639680 x65)) (not (= x65 941780010)) (not (= 1461501637330902918203684832716283019655932542975 x65)) (not (= 1084754510 x65)) (not (= x65 4294967296)) (not (= x65 947726895)) (not (= 3110348530 x65)) (not (= 1061922874 x65)) (not (= x65 911855590)) (not (= 2652930389 x65)) (not (= 1749768213 x65)) (not (= x65 3547226261)) (not (= x65 18446744073709551616)) (not (= x65 1960939212)) (not (= 79228162514264337593543950336 x65)) (not (= x65 1960641893)) (not (= 2220280665 x65)) (< 10000 x65)) (not ((_ is x2) (x150 x65)))))
(assert (x113 x242))
(assert (x183 x268))
(assert (x118 x174))
(assert (x113 x7))
(assert (x24 340282366920938463463374607431768211455))
(assert (x113 x180))
(assert (x113 x173))
(assert (x113 x49))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x24 x11))
(assert (x113 x185))
(assert (x113 x160))
(assert (= (x204 (x2 1960939212)) 1960939212))
(assert (x24 x174))
(assert (and (x91 x80 18446744073709551616) (= (* 18446744073709551616 (x97 x80 18446744073709551616)) (- x80 (x16 18446744073709551615 x80))) (=> (and (> 18446744073709551616 0) (> x80 0)) (and (< (- x80 18446744073709551616) (* 18446744073709551616 (x97 x80 18446744073709551616))) (>= x80 (* 18446744073709551616 (x97 x80 18446744073709551616))))) (x206 x80 18446744073709551616) (x70 x80 18446744073709551616) (x161 x80 18446744073709551616)))
(assert (=> (<= x185 10000) (= (x2 x185) (x150 x185))))
(assert (x113 x111))
(assert (x113 x179))
(assert (x117 x275))
(assert (and (x115 x11 256) (=> (> 256 0) (= x11 (+ (* 256 (x97 x11 256)) (x61 x11 256)))) (x74 x11 256) (x203 x11 256)))
(assert (x116 x225))
(assert (x232 x268))
(assert (x273 x148))
(assert (x113 x199))
(assert (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x204 (x2 81955473079516046949633743016697847541294818689821282749996681496272635257091))))
(assert (= 81955473079516046949633743016697847541294818689821282749996681496272635257091 (x204 (x150 81955473079516046949633743016697847541294818689821282749996681496272635257091))))
(assert (= (x2 79228162514264337593543950336) (x150 79228162514264337593543950336)))
(assert (x113 x202))
(assert (and (x115 x271 4294967296) (=> (> 4294967296 0) (= x271 (+ (* 4294967296 (x97 x271 4294967296)) (x61 x271 4294967296)))) (x74 x271 4294967296) (x203 x271 4294967296)))
(assert (x113 x84))
(assert (x113 x249))
(assert (x113 x220))
(assert (x113 x151))
(assert (= (x150 1061922874) (x2 1061922874)))
(assert (and (x115 x174 256) (=> (> 256 0) (= x174 (+ (* 256 (x97 x174 256)) (x61 x174 256)))) (x74 x174 256) (x203 x174 256)))
(assert (= (+ (x204 x222) 1) (x204 (x256 x222 1))))
(assert (x113 x265))
(assert (= (x2 911855590) (x150 911855590)))
(assert (=> (<= x54 10000) (= (x150 x54) (x2 x54))))
(assert (x113 x126))
(assert (x113 x158))
(assert (x57 x188))
(assert (x113 x211))
(assert (and (x115 x151 4294967296) (=> (> 4294967296 0) (= x151 (+ (* 4294967296 (x97 x151 4294967296)) (x61 x151 4294967296)))) (x74 x151 4294967296) (x203 x151 4294967296)))
(assert (and (x115 x148 4294967296) (=> (> 4294967296 0) (= x148 (+ (* 4294967296 (x97 x148 4294967296)) (x61 x148 4294967296)))) (x74 x148 4294967296) (x203 x148 4294967296)))
(assert (x113 x106))
(assert (x113 x245))
(assert (x113 x15))
(assert (x113 x5))
(assert (x113 x178))
(assert (x113 x52))
(assert (= (x204 (x2 1084754510)) 1084754510))
(assert (= 941780010 (x204 (x2 941780010))))
(assert (x57 x185))
(assert (x24 x208))
(assert (x57 x54))
(assert (x113 x172))
(assert (= 662108492 (x204 (x2 662108492))))
(assert (x113 x54))
(assert (and (x91 x193 4294967296) (= (* 4294967296 (x97 x193 4294967296)) (- x193 (x16 4294967295 x193))) (=> (and (> 4294967296 0) (> x193 0)) (and (< (- x193 4294967296) (* 4294967296 (x97 x193 4294967296))) (>= x193 (* 4294967296 (x97 x193 4294967296))))) (x206 x193 4294967296) (x70 x193 4294967296) (x161 x193 4294967296)))
(assert (= (x204 (x2 1749768213)) 1749768213))
(assert (= (x150 115792089237316195423570985008687907853269984665640564039457584007913129639680) (x2 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert true)
(assert (x116 x86))
(assert (x113 x69))
(assert (x113 x98))
(assert (x113 x50))
(assert (x113 x176))
(assert (= x288 true))
(assert (= (x2 3110348530) (x150 3110348530)))
(assert (and (x115 x268 340282366920938463463374607431768211456) (=> (> 340282366920938463463374607431768211456 0) (= x268 (+ (* 340282366920938463463374607431768211456 (x97 x268 340282366920938463463374607431768211456)) (x61 x268 340282366920938463463374607431768211456)))) (x74 x268 340282366920938463463374607431768211456) (x203 x268 340282366920938463463374607431768211456)))
(assert (= 3547226261 (x204 (x2 3547226261))))
(assert (x113 x108))
(assert (x232 x200))
(assert (x113 x137))
(assert (x113 x80))
(assert (x113 x154))
(assert (x113 x253))
(assert (= (x150 340282366920938463463374607431768211455) (x2 340282366920938463463374607431768211455)))
(assert (x113 x286))
(assert (x113 x51))
(assert (= (x204 (x2 1061922874)) 1061922874))
(assert (x113 x114))
(assert (x113 x40))
(assert (x24 x271))
(assert (x113 x42))
(assert (and (= (x127 27 3) 81) (= 27 (x127 9 3)) (= 9 (x127 3 3)) (= 81 (x127 9 9))))
(assert (x113 x271))
(assert (= x284 (x204 (x150 x284))))
(assert (x113 x112))
(assert (not x277))
(assert (x113 x270))
(assert (= x162 (x204 (x150 x162))))
(assert (= x185 (x204 (x150 x185))))
(assert (=> (<= x50 10000) (= (x150 x50) (x2 x50))))
(assert (x113 x162))
(assert (x24 1461501637330902918203684832716283019655932542975))
(assert (= 911855590 (x204 (x2 911855590))))
(assert (x57 x162))
(assert (x113 x95))
(assert (x113 x83))
(assert (x113 x20))
(assert (x113 x148))
(assert (x113 x123))
(assert (x113 x18))
(assert (x24 x268))
(assert (x113 x110))
(assert (x113 x4))
(assert (= 1960641893 (x204 (x2 1960641893))))
(assert (x113 x216))
(assert (x113 x94))
(assert (x113 x45))
(assert (=> (<= x104 10000) (= (x2 x104) (x150 x104))))
(assert (x113 x254))
(assert (x113 x214))
(assert (and (x115 x275 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x275 (+ (* 1461501637330902918203684832716283019655932542976 (x97 x275 1461501637330902918203684832716283019655932542976)) (x61 x275 1461501637330902918203684832716283019655932542976)))) (x74 x275 1461501637330902918203684832716283019655932542976) (x203 x275 1461501637330902918203684832716283019655932542976)))
(assert (= 3250587425 (x204 (x2 3250587425))))
(assert (x113 x104))
(assert (x113 x225))
(assert (x113 x81))
(assert (= 2220280665 (x204 (x2 2220280665))))
(assert (=> (>= 10000 x284) (= (x2 x284) (x150 x284))))
(assert (x113 x75))
(assert (x113 x275))
(assert (and (x91 x286 4294967296) (= (* 4294967296 (x97 x286 4294967296)) (- x286 (x16 4294967295 x286))) (=> (and (> 4294967296 0) (> x286 0)) (and (< (- x286 4294967296) (* 4294967296 (x97 x286 4294967296))) (>= x286 (* 4294967296 (x97 x286 4294967296))))) (x206 x286 4294967296) (x70 x286 4294967296) (x161 x286 4294967296)))
(assert (x57 x104))
(assert (x113 x285))
(assert (x113 x255))
(assert (x113 x227))
(assert (x113 x257))
(assert (x113 x27))
(assert (x113 x281))
(assert (x113 x208))
(assert (x113 x268))
(assert (= (x204 (x2 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (and (x115 x11 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x11 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x97 x11 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x61 x11 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x74 x11 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x11 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x113 x144))
(assert (x113 x44))
(assert (x113 x274))
(assert (x232 x271))
(assert (and (x91 x93 79228162514264337593543950336) (= (* 79228162514264337593543950336 (x97 x93 79228162514264337593543950336)) (- x93 (x16 79228162514264337593543950335 x93))) (=> (and (> 79228162514264337593543950336 0) (> x93 0)) (and (< (- x93 79228162514264337593543950336) (* 79228162514264337593543950336 (x97 x93 79228162514264337593543950336))) (>= x93 (* 79228162514264337593543950336 (x97 x93 79228162514264337593543950336))))) (x206 x93 79228162514264337593543950336) (x70 x93 79228162514264337593543950336) (x161 x93 79228162514264337593543950336)))
(assert (x113 x196))
(assert (x57 x50))
(assert (= 1461501637330902918203684832716283019655932542975 (x204 (x2 1461501637330902918203684832716283019655932542975))))
(assert (x113 x152))
(assert (x113 x62))
(assert (= x188 (x204 (x150 x188))))
(assert (= 947726895 (x204 (x2 947726895))))
(assert (= (x150 81955473079516046949633743016697847541294818689821282749996681496272635257091) (x2 81955473079516046949633743016697847541294818689821282749996681496272635257091)))
(assert (=> (>= 10000 x259) (= (x150 x259) (x2 x259))))
(assert (x113 x157))
(assert (x113 x174))
(assert (x113 x186))
(assert (x113 x99))
(assert (x273 x200))
(assert (x113 x82))
(assert (x116 x93))
(assert (x57 81955473079516046949633743016697847541294818689821282749996681496272635257091))
(assert (= 4294967295 (x204 (x2 4294967295))))
(assert (= (x150 941780010) (x2 941780010)))
(assert (x183 x208))
(assert (x113 x241))
(assert (x113 x129))
(assert (= (x204 (x150 x259)) x259))
(assert (x116 18446744073709551616))
(assert (x113 x121))
(assert (x232 x151))
(assert (x113 x198))
(assert (= (x2 4294967295) (x150 4294967295)))
(assert (x113 x17))
(assert (x24 x200))
(assert (x232 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (and (x91 x225 79228162514264337593543950336) (= (* 79228162514264337593543950336 (x97 x225 79228162514264337593543950336)) (- x225 (x16 79228162514264337593543950335 x225))) (=> (and (> 79228162514264337593543950336 0) (> x225 0)) (and (< (- x225 79228162514264337593543950336) (* 79228162514264337593543950336 (x97 x225 79228162514264337593543950336))) (>= x225 (* 79228162514264337593543950336 (x97 x225 79228162514264337593543950336))))) (x206 x225 79228162514264337593543950336) (x70 x225 79228162514264337593543950336) (x161 x225 79228162514264337593543950336)))
(assert (x113 x59))
(assert (= 3110348530 (x204 (x2 3110348530))))
(assert (x232 x208))
(assert (= (x150 3547226261) (x2 3547226261)))
(assert (x113 x166))
(assert (x113 x77))
(assert (= (x150 947726895) (x2 947726895)))
(assert (=> (<= x17 10000) (= (x150 x17) (x2 x17))))
(assert (x232 x148))
(assert (x113 x133))
(assert (x113 x193))
(assert (x113 x21))
(assert (= 4294967296 (x204 (x2 4294967296))))
(assert (x116 x193))
(assert (= (x150 1960939212) (x2 1960939212)))
(assert (x24 255))
(assert (x24 x148))
(assert (x113 x235))
(assert (x113 x1))
(assert (= (x2 3250587425) (x150 3250587425)))
(assert (x113 x237))
(assert (x113 x25))
(assert (= 79228162514264337593543950336 (x204 (x2 79228162514264337593543950336))))
(assert (x113 x175))
(assert (= (x150 1461501637330902918203684832716283019655932542975) (x2 1461501637330902918203684832716283019655932542975)))
(assert (x113 x8))
(assert (x113 x279))
(assert (x232 x275))
(assert (x113 x240))
(assert (x113 x182))
(assert (= (=> (and (and (and (<= 0 x175) (= x211 (x234 192)) (= x226 1960939212) (>= 1461501637330902918203684832716283019655932542975 x175) (= x207 (x167 256)) (= x109 128) (= x78 (x146 160)) (= (x261 544) x242) (> 2220280665 x226) (>= x84 0) (not (or (and (< x281 192) (= (<= x281 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x281 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x261 512) x154) (= x59 (x153 (- x8 132))) (= x110 (x41 (x150 x54))) (= x125 x72) (not (> 1960641893 x226)) (<= x84 1461501637330902918203684832716283019655932542975) (= 192 x114) (not (or (and (< x94 64) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x94))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x94))) (>= 1461501637330902918203684832716283019655932542975 x238) (= x245 256) (not (= x226 1960641893)) (= x79 (x155 128)) (= x37 (x261 608)) (= (x153 (- x8 68)) x94) (= x249 (x261 640)) (= (x96 288) x202) (and (< 195 x8) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x8) true)) (= (x90 224) x157) (= 128 x239) (= x49 x170) (>= x238 0) (= 256 x3) (not (or (and (< x59 64) (= true (<= x59 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x59 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x261 576) x108) (not (> 1749768213 x226)) (= x52 x238) (= x7 0) (= (x153 (- x8 4)) x281) (> 2652930389 x226) (> x110 0) (= x137 (x261 672)) (= 192 x21) (not (> 4 x8))) (and (and (= x37 x182) (= x270 x84) (= (x97 x225 79228162514264337593543950336) x208) (= x225 (x31 x156)) x280 (= x136 x30) (= x136 x220) (not (= x63 911855590)) (>= 4294967295 x106) (= 3250587425 x45) (= (= x176 x279) x33) (= 0 x7) x33 (= (x278 (x150 x17) x32 0) x272) (= x20 x213) (= (x165 128) x51) (= x39 x75) (= (x31 x272) x119) (= x200 (x97 x193 4294967296)) (>= 1461501637330902918203684832716283019655932542975 x84) (= x142 x35) (>= 1461501637330902918203684832716283019655932542975 x83) (>= x18 0) (<= 0 x106) (>= x201 0) x9 (= x129 x242) (= 0 x252) (<= 0 x83) (< x63 1084754510) (<= x237 1461501637330902918203684832716283019655932542975) (= (= x44 x274) x280) (= (x41 (x150 x54)) x4) x266 (> x191 0) x221 (> 1749768213 x63) (= x247 x154) (= x266 (= x262 x173)) (= x9 (= x166 x160)) (>= 4294967295 x87) (not (< x63 911855590)) (= x216 (x165 256)) (> 3547226261 x45) (= x63 1061922874) (> x4 0) (= (x92 (x150 x284)) x174) (= x173 x213) (>= x87 0) x250 (<= x201 1461501637330902918203684832716283019655932542975) (not (= x45 3110348530)) (= x105 (x31 x64)) (= (x41 (x150 x54)) x180) (= x131 x108) (= x191 (x16 255 x174)) x197 x10 (not (< x45 3110348530)) (= x197 (not (= x20 x269))) (<= 0 x5) (= (x165 192) x255) (= x201 x52) (= x123 x152) (= x10 (= x75 x152)) (= x269 x144) (= x144 x17) (= (x256 x272 2) x64) (<= x35 1461501637330902918203684832716283019655932542975) (<= x18 1461501637330902918203684832716283019655932542975) (= x1 x160) (<= 0 x237) (= (x16 4294967295 x200) x240) (= (x256 x64 1) x156) (= (x16 340282366920938463463374607431768211455 x208) x199) (= (= x112 x30) x221) (<= x5 340282366920938463463374607431768211455) (>= x84 0) (not (< x8 4)) (= x275 (x92 (x150 81955473079516046949633743016697847541294818689821282749996681496272635257091))) (= (x165 224) x285) (= x77 x227) (= x179 x249) (= (x165 160) x257) (= (not (= x227 x186)) x120) (= x98 x279) (not (> 662108492 x63)) (>= x35 0) x120 (= x128 x144) (= x270 (x16 1461501637330902918203684832716283019655932542975 x275)) (= (x92 (x150 x284)) x11) (= x182 x166) (= x193 (x31 x156)) (= x144 x186) (= x112 x247) (> x180 0) (= (not (= x128 x220)) x250) (= x44 x77) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x8) true) (< 3 x8)) (= x39 x137) (= x129 x176) (= x274 x131) (not (< x45 1749768213)) (= x179 x262) (= x80 (x31 x156)) (= (x278 (x150 x259) (x150 x188) 0) x32) (= (x16 115792089237316195423570985008687907853269984665640564039457584007913129639680 x11) x254) (= x158 (x16 4294967295 x148)) (= x148 (x97 x80 18446744073709551616)) (not (= 947726895 x63)) (not (< x45 2652930389)) (not (= x63 941780010)) (= x259 x198)) (and (= x132 x257) (= x172 x51) (= x6 x196) (= x163 x285) (= (= x196 x163) x243)))) (and (>= x124 0) (> x162 0) (= x82 (x16 340282366920938463463374607431768211455 x268)) (= x168 x111) (= (x16 4294967295 x151) x241) (= (x92 x85) x286) x264 x263 (<= 0 x235) (>= 340282366920938463463374607431768211455 x69) (<= x185 1461501637330902918203684832716283019655932542975) (<= 0 x84) (< x133 3547226261) (<= x162 1461501637330902918203684832716283019655932542975) (= x178 (x73 256)) (= (x278 (x150 x50) (x150 x188) 0) x246) (>= 4294967295 x47) (= x219 false) (>= 1461501637330902918203684832716283019655932542975 x18) (= x62 0) (not (= x185 x162)) (= x170 (x73 128)) (>= x47 0) (= x93 (x92 x85)) (<= x214 1461501637330902918203684832716283019655932542975) (= x151 (x97 x86 18446744073709551616)) (>= x214 0) (<= 0 x168) (= x72 (x73 160)) (not (= x133 3110348530)) (= (< 0 (x41 (x150 x162))) x263) (not (> 1749768213 x133)) (<= 0 x28) (= x144 x104) x19 (>= x121 0) (<= 0 x138) (= x222 (x256 x230 2)) (>= 1461501637330902918203684832716283019655932542975 x28) (= x121 (x149 (x150 x54))) (= (x278 (x150 x104) x246 0) x230) (not (< x133 3110348530)) (not (= x185 x54)) (= (x149 (x150 x162)) x48) (>= x18 0) (= x19 (< 0 (x41 (x150 x185)))) (>= 1461501637330902918203684832716283019655932542975 x84) (= x139 1061922874) (= x198 x50) (<= 0 x48) (>= 1461501637330902918203684832716283019655932542975 x81) (= x85 (x256 x222 1)) (>= 4294967295 x99) (= 3250587425 x133) (= (x73 192) x95) (= false x177) (< 0 x185) (= x264 (> (x41 (x150 x54)) 0)) (= (x97 x93 79228162514264337593543950336) x268) (not (< x133 2652930389)) (<= x124 1461501637330902918203684832716283019655932542975) (= x217 (x16 4294967295 x271)) (<= x28 1461501637330902918203684832716283019655932542975) (= x192 0) (= x71 false) (= x6 (x73 224)) (>= 1461501637330902918203684832716283019655932542975 x168) (= (x41 (x150 x54)) x159) (>= x28 0) (>= 1461501637330902918203684832716283019655932542975 x140) (>= x81 0) (= x86 (x92 x85)) (> x159 0) (<= 0 x99) (<= 0 x69) (= (x92 x230) x25) (= (x97 x286 4294967296) x271) (>= 1461501637330902918203684832716283019655932542975 x235) (= (x92 x222) x27) (not (= x54 x162)) (= x138 (x149 (x150 x185))) (<= 0 x140) (= false x267) (>= 1461501637330902918203684832716283019655932542975 x54) (> x54 0))) x243) x277))
(assert (x113 x217))
(assert (x113 x283))
(assert (x113 x191))
(assert (x113 x78))
(assert (= (x2 1960641893) (x150 1960641893)))
(assert (x113 x252))
(assert (= x54 (x204 (x150 x54))))
(assert (= 2652930389 (x204 (x2 2652930389))))
(assert (x113 x132))
(assert (x113 x284))
(assert (x273 x271))
(assert (x113 x124))
(assert (x57 x17))
(assert (x113 x142))
(assert (x113 x170))
(assert (x113 x223))
(assert (= (x204 (x256 x230 2)) (+ (x204 x230) 2)))
(assert (x113 x239))
(assert (x24 x275))
(assert (= (x2 2220280665) (x150 2220280665)))
(assert (x57 x284))
(assert (x113 x93))
(assert (x232 x11))
(assert (x57 x259))
(assert (= x104 (x204 (x150 x104))))
(assert (x113 x168))
(assert (x116 79228162514264337593543950336))
(assert (=> (>= 10000 x188) (= (x2 x188) (x150 x188))))
(assert (and (x91 x86 18446744073709551616) (= (* 18446744073709551616 (x97 x86 18446744073709551616)) (- x86 (x16 18446744073709551615 x86))) (=> (and (> 18446744073709551616 0) (> x86 0)) (and (< (- x86 18446744073709551616) (* 18446744073709551616 (x97 x86 18446744073709551616))) (>= x86 (* 18446744073709551616 (x97 x86 18446744073709551616))))) (x206 x86 18446744073709551616) (x70 x86 18446744073709551616) (x161 x86 18446744073709551616)))
(assert (x232 340282366920938463463374607431768211456))
(assert (x113 x48))
(assert (x113 x109))
(assert (x113 x171))
(assert (x113 x72))
(assert (x113 x35))
(assert (x113 x247))
(assert (x24 4294967295))
(assert (x113 x200))
(assert (=> (>= 10000 x162) (= (x150 x162) (x2 x162))))
(assert (x113 x87))
(assert (= (+ 2 (x204 x272)) (x204 (x256 x272 2))))
(assert (x113 x192))
(assert (x113 x60))
(assert (x116 x80))
(assert (= (x204 (x2 18446744073709551616)) 18446744073709551616))
(assert (x113 x187))
(assert (x116 x286))
(assert (x113 x89))
(assert (x113 x29))
(assert (x232 256))
(assert (= x17 (x204 (x150 x17))))
(assert (x113 x79))
(assert (x113 x218))
(assert (x113 x39))
(assert (x190 x11))
(assert (x113 x119))
(assert (x113 x63))
(assert (x113 x30))
(assert (x113 x11))
(assert (x113 x136))
(assert (x113 x6))
(assert (x113 x226))
(assert (x113 x105))
(assert (x113 x207))
(assert (x232 x174))
(assert (= (x2 1749768213) (x150 1749768213)))
(assert (x113 x269))
(assert (x116 4294967296))
(assert (x113 x140))
(assert (x113 x86))
(assert (= (x204 (x150 x50)) x50))
(assert (= (x150 2652930389) (x2 2652930389)))
(assert (x113 x3))
(assert (x113 x188))
(assert (x113 x201))
(assert (x24 x151))
(assert (= (x2 4294967296) (x150 4294967296)))
(assert (x113 x128))
(assert (= (x150 662108492) (x2 662108492)))
(assert (x232 4294967296))
(assert (x113 x229))
(assert (= (x204 (x2 115792089237316195423570985008687907853269984665640564039457584007913129639680)) 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x113 x28))
(assert (x113 x163))
(assert (x113 x159))
(assert (x273 x151))
(assert (x113 x238))
(assert (x113 x131))
(assert (= (+ 1 (x204 x64)) (x204 (x256 x64 1))))
(assert (x232 1461501637330902918203684832716283019655932542976))
(assert (= (x2 18446744073709551616) (x150 18446744073709551616)))
(assert (x113 x47))
(assert (x113 x138))
(assert (x113 x213))
(assert (= (x2 1084754510) (x150 1084754510)))
(assert (and (x115 x200 4294967296) (=> (> 4294967296 0) (= x200 (+ (* 4294967296 (x97 x200 4294967296)) (x61 x200 4294967296)))) (x74 x200 4294967296) (x203 x200 4294967296)))
(assert (x113 x139))
(assert (x113 x37))
(assert (x113 x125))
(assert (and (x115 x208 340282366920938463463374607431768211456) (=> (> 340282366920938463463374607431768211456 0) (= x208 (+ (* 340282366920938463463374607431768211456 (x97 x208 340282366920938463463374607431768211456)) (x61 x208 340282366920938463463374607431768211456)))) (x74 x208 340282366920938463463374607431768211456) (x203 x208 340282366920938463463374607431768211456)))
(assert (x113 x262))
(assert (x113 x259))
(check-sat)
(exit)
