(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x420 0)) (((x198 (x264 x420) (x95 x420) (x159 x420) (x74 x420) (x67 Int)) (x479 (x10 x420) (x247 x420) (x225 x420) (x31 x420) (x130 x420) (x63 x420) (x199 Int)) (x72 (x212 Int)) (x98 (x384 x420) (x406 Int)) (x179 (x29 x420) (x2 x420) (x109 x420) (x381 Int)) (x292 (x133 x420) (x302 x420) (x81 Int)) (x331 (x196 x420) (x106 x420) (x438 x420) (x442 x420) (x258 x420) (x274 x420) (x317 x420) (x38 Int)) (x200 (x328 x420) (x294 x420) (x139 x420) (x241 x420) (x281 x420) (x163 Int)))))
(declare-fun x408 () Bool)
(declare-fun x15 () Int)
(declare-fun x478 () Int)
(declare-fun x208 () Int)
(declare-fun x293 (Int) Int)
(declare-fun x458 () Int)
(declare-fun x180 (Int) Int)
(declare-fun x217 () Bool)
(declare-fun x149 () Int)
(declare-fun x168 () Bool)
(declare-fun x370 () Int)
(declare-fun x156 () Int)
(declare-fun x238 () Int)
(declare-fun x300 () Bool)
(declare-fun x276 () Int)
(declare-fun x446 () Int)
(declare-fun x224 () Int)
(declare-fun x460 () Int)
(declare-fun x28 () Int)
(declare-fun x425 () Int)
(declare-fun x271 () Bool)
(declare-fun x26 (Int) Int)
(declare-fun x14 () Int)
(declare-fun x59 () Int)
(declare-fun x1 () Int)
(declare-fun x397 () Int)
(declare-fun x62 () Int)
(declare-fun x363 () Bool)
(declare-fun x457 () Int)
(declare-fun x354 () Int)
(declare-fun x290 () Int)
(declare-fun x79 () Int)
(declare-fun x218 () Int)
(declare-fun x387 () Int)
(declare-fun x32 () Int)
(declare-fun x22 () Int)
(declare-fun x142 () Int)
(declare-fun x134 () Int)
(declare-fun x7 () Int)
(declare-fun x403 () Int)
(declare-fun x184 (Int Int) Int)
(declare-fun x204 (Int) Int)
(declare-fun x54 () Bool)
(declare-fun x503 () Bool)
(declare-fun x484 () Int)
(declare-fun x35 () Int)
(declare-fun x434 () Int)
(declare-fun x296 () Bool)
(declare-fun x138 (Int Int) Int)
(declare-fun x291 () Int)
(declare-fun x335 () Int)
(declare-fun x366 () x420)
(declare-fun x58 () Int)
(declare-fun x230 () Int)
(declare-fun x336 () x420)
(declare-fun x494 () Int)
(declare-fun x157 () Int)
(declare-fun x20 () Int)
(declare-fun x423 () Int)
(declare-fun x289 () Int)
(declare-fun x65 () Bool)
(declare-fun x375 () Int)
(declare-fun x337 () Int)
(declare-fun x374 () Int)
(declare-fun x129 () Int)
(declare-fun x488 () Bool)
(declare-fun x288 (Int) Int)
(declare-fun x399 () Int)
(declare-fun x158 () Int)
(declare-fun x48 () Int)
(declare-fun x76 () Int)
(declare-fun x299 () Int)
(declare-fun x305 () Bool)
(declare-fun x447 () x420)
(declare-fun x137 () Int)
(declare-fun x116 () Int)
(declare-fun x234 () Bool)
(declare-fun x459 () Int)
(declare-fun x284 () Bool)
(declare-fun x124 () Bool)
(declare-fun x395 () Bool)
(declare-fun x246 () Int)
(declare-fun x287 () Int)
(declare-fun x393 () Int)
(declare-fun x325 () Int)
(declare-fun x57 () Int)
(declare-fun x443 (x420) Int)
(declare-fun x229 () Int)
(declare-fun x33 () Int)
(declare-fun x78 () Int)
(declare-fun x405 () Int)
(declare-fun x358 () Int)
(declare-fun x102 () Int)
(declare-fun x249 (Int) Int)
(declare-fun x13 () Int)
(declare-fun x60 (Int) Int)
(declare-fun x161 () Int)
(declare-fun x303 () Bool)
(declare-fun x240 () Int)
(declare-fun x145 () Int)
(declare-fun x283 () Int)
(declare-fun x203 () Int)
(declare-fun x243 () Int)
(declare-fun x388 () Int)
(declare-fun x16 (Int Int) Int)
(declare-fun x351 () x420)
(declare-fun x85 () Int)
(declare-fun x396 () Bool)
(declare-fun x379 () Int)
(declare-fun x424 () Bool)
(declare-fun x315 () Bool)
(declare-fun x171 () Bool)
(declare-fun x154 () Int)
(declare-fun x147 () Int)
(declare-fun x450 () Int)
(declare-fun x341 () Int)
(declare-fun x8 () Int)
(declare-fun x333 () Int)
(declare-fun x407 () Int)
(declare-fun x47 () Int)
(declare-fun x266 () Int)
(declare-fun x189 () x420)
(declare-fun x107 () Int)
(declare-fun x169 () Int)
(declare-fun x201 () Int)
(declare-fun x280 () Int)
(declare-fun x209 () Int)
(declare-fun x461 () Int)
(declare-fun x306 () Int)
(declare-fun x4 () x420)
(declare-fun x310 () Int)
(declare-fun x11 () Int)
(declare-fun x474 () Int)
(declare-fun x143 () Int)
(declare-fun x69 () Int)
(declare-fun x347 () Int)
(declare-fun x277 () Int)
(declare-fun x213 () Int)
(declare-fun x481 () Int)
(declare-fun x456 () Int)
(declare-fun x61 () Int)
(declare-fun x211 () Int)
(declare-fun x313 () Int)
(declare-fun x44 () Bool)
(declare-fun x432 (Int) Int)
(declare-fun x322 () Bool)
(declare-fun x9 () Int)
(declare-fun x89 () Int)
(declare-fun x485 () Int)
(declare-fun x316 () Int)
(declare-fun x21 () Int)
(declare-fun x23 () Int)
(declare-fun x253 () Int)
(declare-fun x499 () Int)
(declare-fun x323 () Int)
(declare-fun x84 () Int)
(declare-fun x25 () Int)
(declare-fun x482 () Int)
(declare-fun x232 () Int)
(declare-fun x269 () Int)
(declare-fun x436 () Int)
(declare-fun x193 () Int)
(declare-fun x314 () Bool)
(declare-fun x272 () Int)
(declare-fun x190 () Int)
(declare-fun x24 () Int)
(declare-fun x185 () Int)
(declare-fun x235 () Int)
(declare-fun x357 () Int)
(declare-fun x496 () Int)
(declare-fun x390 () Int)
(declare-fun x125 (Int) Int)
(declare-fun x111 () Int)
(declare-fun x330 (Int) Int)
(declare-fun x373 () Int)
(declare-fun x409 () Bool)
(declare-fun x376 () Int)
(declare-fun x385 () Int)
(declare-fun x359 () Int)
(declare-fun x362 () Int)
(declare-fun x455 () Int)
(declare-fun x165 (Int) Int)
(declare-fun x181 () Int)
(declare-fun x170 () Int)
(declare-fun x275 () Int)
(declare-fun x223 () Bool)
(declare-fun x164 () Int)
(declare-fun x319 () Int)
(declare-fun x435 () Int)
(declare-fun x426 () Int)
(declare-fun x321 () Int)
(declare-fun x372 () Int)
(declare-fun x188 () Int)
(declare-fun x483 () Int)
(declare-fun x242 () Int)
(declare-fun x41 () Int)
(declare-fun x92 () Bool)
(declare-fun x45 () Int)
(declare-fun x497 (Int) Int)
(declare-fun x326 () Int)
(declare-fun x428 () Int)
(declare-fun x355 () Int)
(declare-fun x378 () Int)
(declare-fun x410 () Bool)
(declare-fun x467 () Int)
(declare-fun x162 () Bool)
(declare-fun x192 () Int)
(declare-fun x90 () Int)
(declare-fun x368 () Int)
(declare-fun x80 () Int)
(declare-fun x5 () Bool)
(declare-fun x43 () Int)
(declare-fun x105 () Bool)
(declare-fun x93 () x420)
(declare-fun x404 () Int)
(declare-fun x255 () Int)
(declare-fun x342 () Int)
(declare-fun x71 () Int)
(declare-fun x19 () Bool)
(declare-fun x369 (Int Int) Int)
(declare-fun x27 () Int)
(declare-fun x470 () Bool)
(declare-fun x18 () Int)
(declare-fun x173 () Int)
(declare-fun x187 () Int)
(declare-fun x469 () Int)
(declare-fun x219 (Int) Int)
(declare-fun x343 () Int)
(declare-fun x152 () Int)
(declare-fun x82 () Int)
(declare-fun x495 () Int)
(declare-fun x39 () Int)
(declare-fun x86 () Bool)
(declare-fun x415 () Int)
(declare-fun x174 () Int)
(declare-fun x448 () Int)
(declare-fun x148 () Int)
(declare-fun x197 () Int)
(declare-fun x182 () Bool)
(declare-fun x431 () Int)
(declare-fun x500 () Int)
(declare-fun x202 (Int Int) Int)
(declare-fun x46 () Int)
(declare-fun x104 () Int)
(declare-fun x55 () Bool)
(declare-fun x155 () Int)
(declare-fun x309 () Int)
(declare-fun x279 () Int)
(declare-fun x233 (Int) Int)
(declare-fun x127 () Int)
(declare-fun x332 () Int)
(declare-fun x441 () x420)
(declare-fun x49 () Int)
(declare-fun x464 () Int)
(declare-fun x114 () Int)
(declare-fun x418 () Bool)
(declare-fun x498 () Int)
(declare-fun x445 (Int Int) Int)
(declare-fun x339 () Int)
(declare-fun x285 () Int)
(declare-fun x221 () Int)
(declare-fun x267 () Bool)
(declare-fun x468 () Int)
(declare-fun x398 () Int)
(declare-fun x226 () Int)
(declare-fun x324 () Bool)
(declare-fun x265 () Bool)
(declare-fun x367 () Int)
(declare-fun x77 () Bool)
(declare-fun x153 () Int)
(declare-fun x146 () Int)
(declare-fun x175 () Int)
(declare-fun x42 () Int)
(declare-fun x451 () Bool)
(declare-fun x178 () Int)
(declare-fun x56 (Int) Int)
(declare-fun x34 () Int)
(declare-fun x3 () Int)
(declare-fun x96 () Int)
(declare-fun x471 () Int)
(declare-fun x295 () Int)
(declare-fun x392 () Int)
(declare-fun x101 () Int)
(declare-fun x121 () Int)
(declare-fun x100 () Int)
(declare-fun x352 () Int)
(declare-fun x261 () x420)
(declare-fun x126 () Int)
(declare-fun x12 () x420)
(declare-fun x87 () Bool)
(declare-fun x140 () x420)
(declare-fun x245 () Int)
(declare-fun x214 () Int)
(declare-fun x412 () Int)
(declare-fun x400 () Int)
(declare-fun x151 () Bool)
(declare-fun x346 (Int) Int)
(declare-fun x68 () Int)
(declare-fun x298 () Int)
(declare-fun x135 () x420)
(declare-fun x361 () Int)
(declare-fun x256 () Int)
(declare-fun x112 () Int)
(declare-fun x433 () Int)
(declare-fun x205 () Bool)
(declare-fun x389 () Int)
(declare-fun x30 () Int)
(declare-fun x237 () Int)
(declare-fun x487 () Int)
(declare-fun x36 () Int)
(declare-fun x191 () Int)
(declare-fun x250 () Int)
(declare-fun x132 () Int)
(declare-fun x206 () Int)
(declare-fun x97 (x420) Int)
(declare-fun x177 () Int)
(declare-fun x118 () x420)
(declare-fun x231 () x420)
(declare-fun x141 () Int)
(declare-fun x195 () Int)
(declare-fun x349 (x420) Int)
(declare-fun x486 () Int)
(declare-fun x419 () Int)
(declare-fun x17 (Int) x420)
(declare-fun x150 () Int)
(declare-fun x91 () Int)
(declare-fun x480 () Bool)
(declare-fun x430 () Bool)
(declare-fun x131 () Int)
(declare-fun x371 () Int)
(declare-fun x501 () Bool)
(declare-fun x502 () Int)
(declare-fun x216 (x420) Int)
(declare-fun x262 () Int)
(declare-fun x251 () Int)
(declare-fun x473 () Int)
(declare-fun x144 () Bool)
(declare-fun x411 () Int)
(declare-fun x444 () Bool)
(declare-fun x475 () Bool)
(declare-fun x490 () Int)
(declare-fun x312 () Bool)
(declare-fun x462 () Bool)
(declare-fun x167 () Bool)
(declare-fun x320 () Int)
(declare-fun x301 () Int)
(declare-fun x365 () Bool)
(declare-fun x477 () Bool)
(declare-fun x40 (Int) Int)
(declare-fun x273 () Int)
(declare-fun x115 () Int)
(declare-fun x472 () Int)
(declare-fun x6 () Int)
(declare-fun x422 () Int)
(declare-fun x99 () Int)
(declare-fun x260 () Int)
(declare-fun x236 () Int)
(declare-fun x120 () Int)
(declare-fun x380 () Bool)
(declare-fun x73 () Int)
(declare-fun x402 () Int)
(define-fun x327 ((x420 x420) (x391 Int)) x420 (ite ((_ is x331) x420) (x331 (x196 x420) (x106 x420) (x438 x420) (x442 x420) (x258 x420) (x274 x420) (x317 x420) (+ (x38 x420) x391)) (ite ((_ is x479) x420) (x479 (x10 x420) (x247 x420) (x225 x420) (x31 x420) (x130 x420) (x63 x420) (+ x391 (x199 x420))) (ite ((_ is x200) x420) (x200 (x328 x420) (x294 x420) (x139 x420) (x241 x420) (x281 x420) (+ x391 (x163 x420))) (ite ((_ is x198) x420) (x198 (x264 x420) (x95 x420) (x159 x420) (x74 x420) (+ (x67 x420) x391)) (ite ((_ is x179) x420) (x179 (x29 x420) (x2 x420) (x109 x420) (+ (x381 x420) x391)) (ite ((_ is x98) x420) (x98 (x384 x420) (+ x391 (x406 x420))) (ite ((_ is x292) x420) (x292 (x133 x420) (x302 x420) (+ x391 (x81 x420))) (x72 (+ (x212 x420) x391))))))))))
(define-fun x37 ((x263 Int)) Int (ite (and (>= x263 0) (< x263 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x263 (- x263 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x66 ((x263 Int)) Int (ite (and (< x263 0) (>= x263 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x263) x263))
(define-fun x297 ((x263 Int)) Int (ite (and (>= x263 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x263)) x263 (ite (and (< x263 231584178474632390847141970017375815706539969331281128078915168015826259279872) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x263)) (- x263 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x263) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x263)) (+ x263 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x16 x263 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x364 ((x356 Int)) Bool (and (< x356 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x356)))
(define-fun x53 ((x356 Int) (x117 Int)) Bool (=> (and (> x356 0) (< 0 x117)) (and (<= 0 (x202 x356 x117)) (<= (x202 x356 x117) x356))))
(define-fun x465 ((x356 Int) (x117 Int)) Bool (=> (and (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x117) (<= 1 x117)) (and (>= x356 0) (< x356 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (<= 0 (x202 x356 x117)) (< (x202 x356 x117) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x259 ((x356 Int) (x117 Int)) Bool (=> (and (> x117 1) (> x356 x117)) (< (x202 x356 x117) x356)))
(define-fun x136 ((x356 Int) (x117 Int)) Bool (=> (and (< 0 x356) (> x117 0)) (= (= 0 (x202 x356 x117)) (< x356 x117))))
(define-fun x220 ((x356 Int)) Bool (= 0 (x202 0 x356)))
(define-fun x278 ((x356 Int)) Bool (= x356 (x202 x356 1)))
(define-fun x304 ((x356 Int)) Bool (=> (not (= x356 0)) (= 1 (x202 x356 x356))))
(define-fun x113 ((x356 Int)) Bool (and (x220 x356) (x278 x356) (x304 x356)))
(define-fun x270 ((x356 Int)) Bool (and (= x356 (x138 x356 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x138 115792089237316195423570985008687907853269984665640564039457584007913129639935 x356) x356)))
(define-fun x257 ((x356 Int)) Bool (and (= 0 (x138 x356 0)) (= (x138 0 x356) 0)))
(define-fun x239 ((x356 Int)) Bool (= (x138 x356 x356) x356))
(define-fun x489 ((x356 Int)) Bool (and (x239 x356) (x257 x356) (x270 x356)))
(define-fun x429 ((x356 Int) (x117 Int)) Bool (= (x138 x356 x117) (x138 x117 x356)))
(define-fun x222 ((x356 Int) (x117 Int)) Bool (and (=> (>= x117 0) (>= x117 (x138 x356 x117))) (=> (<= 0 x356) (>= x356 (x138 x356 x117))) (<= 0 (x138 x356 x117))))
(define-fun x493 ((x356 Int) (x117 Int)) Bool (and (x429 x356 x117) (x222 x356 x117)))
(define-fun x307 ((x356 Int)) Bool (= (x16 x356 4294967296) (x138 x356 4294967295)))
(define-fun x417 ((x356 Int)) Bool (and (x493 x356 4294967295) (x307 x356)))
(define-fun x110 ((x356 Int) (x117 Int)) Bool (and (<= 0 (x16 x356 x117)) (< (x16 x356 x117) x117)))
(define-fun x311 ((x356 Int) (x117 Int)) Bool (=> (and (>= x356 0) (> x117 0)) (= (= (x16 x356 x117) x356) (< x356 x117))))
(define-fun x344 ((x356 Int) (x117 Int)) Bool (=> (and (and (<= x117 x356) (< x356 (+ x117 x117))) (> x117 0)) (= (x16 x356 x117) (- x356 x117))))
(define-fun x348 ((x356 Int)) Bool (= 0 (x16 0 x356)))
(define-fun x52 ((x356 Int)) Bool (= (x16 x356 1) 0))
(define-fun x75 ((x356 Int)) Bool (= 0 (x16 x356 x356)))
(define-fun x427 ((x356 Int)) Bool (and (x348 x356) (x52 x356) (x75 x356)))
(define-fun x244 ((x356 Int)) Bool (= (x16 x356 340282366920938463463374607431768211456) (x138 x356 340282366920938463463374607431768211455)))
(define-fun x64 ((x356 Int)) Bool (and (x493 x356 340282366920938463463374607431768211455) (x244 x356)))
(define-fun x318 ((x356 Int) (x117 Int)) Bool (=> (and (< 0 x356) (< 0 x117)) (= (= x117 (x202 (x297 (x369 x356 x117)) x356)) (< (x369 x356 x117) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x453 ((x356 Int) (x117 Int)) Bool (=> (and (not (= x356 0)) (not (= x117 0))) (and (= (x202 (x369 x356 x117) x117) x356) (= x117 (x202 (x369 x356 x117) x356)))))
(define-fun x183 ((x356 Int) (x117 Int)) Bool (=> (and (> x356 0) (> x117 0)) (= (> x117 (x202 115792089237316195423570985008687907853269984665640564039457584007913129639935 x356)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x369 x356 x117)))))
(define-fun x414 ((x356 Int) (x117 Int)) Bool (and (= (x297 (x369 (- x356 115792089237316195423570985008687907853269984665640564039457584007913129639936) x117)) (x297 (x369 x356 x117))) (= (x297 (x369 (- x356 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x117 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (x369 x356 x117))) (= (x297 (x369 x356 (- x117 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (x369 x356 x117)))))
(define-fun x440 ((x356 Int) (x117 Int)) Bool (and (=> (and (and (> x117 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x117)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x356) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x356))) (= (>= (x202 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x117)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x356)) (<= (x369 (- x356 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x117 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x356 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x356)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x117) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x117))) (= (>= (x202 57896044618658097711785492504343953926634992332820282019728792003956564819968 x356) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x117)) (>= (x369 x356 (- x117 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x117) (< 0 x117)) (and (< 0 x356) (<= x356 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x202 57896044618658097711785492504343953926634992332820282019728792003956564819967 x117) x356) (<= (x369 x356 x117) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 0 x117) (<= x117 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x356) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x356))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x356) (x202 57896044618658097711785492504343953926634992332820282019728792003956564819968 x117)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x369 (- x356 115792089237316195423570985008687907853269984665640564039457584007913129639936) x117))))))
(define-fun x350 ((x356 Int)) Bool (and (= (x369 x356 0) 0) (= (x369 0 x356) 0)))
(define-fun x108 ((x356 Int)) Bool (and (= x356 (x369 x356 1)) (= (x369 1 x356) x356)))
(define-fun x491 ((x356 Int)) Bool (and (x108 x356) (x350 x356)))
(define-fun x248 ((x356 Int)) Bool (= (+ (x138 x356 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x16 x356 32)) (x297 x356)))
(define-fun x377 ((x356 Int)) Bool (and (x248 x356) (x493 x356 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x437 ((x356 Int)) Bool (= (x16 x356 256) (x138 x356 255)))
(define-fun x103 ((x356 Int)) Bool (and (x493 x356 255) (x437 x356)))
(define-fun x282 ((x356 Int)) Bool (= (x138 x356 1461501637330902918203684832716283019655932542975) (x16 x356 1461501637330902918203684832716283019655932542976)))
(define-fun x50 ((x356 Int)) Bool (and (x282 x356) (x493 x356 1461501637330902918203684832716283019655932542975)))
(define-fun x452 ((x492 Int)) Int (ite (= x492 128) x400 (x330 x492)))
(define-fun x70 ((x492 Int)) Int (ite (= 160 x492) x114 (x452 x492)))
(define-fun x122 ((x492 Int)) Int (ite (= x492 192) x147 (x70 x492)))
(define-fun x476 ((x492 Int)) Int (ite (= x492 224) x61 (x122 x492)))
(define-fun x227 ((x492 Int)) Int (ite (= 256 x492) x213 (x476 x492)))
(define-fun x401 ((x492 Int)) Int (ite (= x492 128) x287 (x40 x492)))
(define-fun x394 ((x492 Int)) Int (ite (= x492 160) x469 (x249 x492)))
(define-fun x308 ((x492 Int)) Int (ite (= x492 192) x99 (x26 x492)))
(define-fun x353 ((x492 Int)) Int (ite (= 224 x492) x316 (x288 x492)))
(define-fun x166 ((x492 Int)) Int (ite (= x492 256) x238 (x432 x492)))
(define-fun x439 ((x492 Int)) Int (ite (= x492 288) x367 (x56 x492)))
(define-fun x176 ((x492 Int)) Int (ite (= x492 512) x385 (x204 x492)))
(define-fun x454 ((x492 Int)) Int (ite (= 544 x492) x73 (x176 x492)))
(define-fun x413 ((x492 Int)) Int (ite (= 576 x492) x359 (x454 x492)))
(define-fun x360 ((x492 Int)) Int (ite (= 608 x492) x250 (x413 x492)))
(define-fun x186 ((x492 Int)) Int (ite (= 640 x492) x78 (x360 x492)))
(define-fun x383 ((x492 Int)) Int (ite (= x492 672) x467 (x186 x492)))
(define-fun x338 ((x492 Int)) Int (x125 x492))
(define-fun x340 ((x492 Int)) Int (ite (= 128 x492) x298 (x180 x492)))
(define-fun x268 ((x492 x420)) Int (ite (= x447 x492) (x349 x4) (x443 x492)))
(define-fun x207 ((x492 x420)) Int (ite x171 (x443 x492) (x268 x492)))
(define-fun x345 ((x492 Int)) Int (ite (= 128 x492) x435 (x219 x492)))
(define-fun x329 ((x492 Int)) Int (ite (= x492 160) x137 (x345 x492)))
(define-fun x386 ((x492 Int)) Int (ite (= x492 192) x48 (x329 x492)))
(define-fun x466 ((x492 Int)) Int (ite (= x492 224) x90 (x386 x492)))
(define-fun x334 ((x492 Int)) Int (ite (= 256 x492) x392 (x466 x492)))
(define-fun x128 ((x492 Int)) Int (ite (= x492 160) x173 (x293 x492)))
(define-fun x119 ((x492 Int)) Int (ite x315 (x293 x492) (x128 x492)))
(define-fun x252 ((x492 Int)) Int (ite (= x492 x431) x203 (x165 x492)))
(define-fun x421 ((x492 Int)) Int (ite x315 (x165 x492) (x252 x492)))
(define-fun x416 ((x492 Int)) Int (ite (= x495 x492) 32 (x60 x492)))
(define-fun x382 ((x492 Int)) Int (ite (= x434 x492) x15 (x416 x492)))
(define-fun x194 ((x492 Int)) Int (ite (= x492 x502) x20 (x382 x492)))
(define-fun x286 ((x492 Int)) Int (ite (= x115 x492) x358 (x233 x492)))
(define-fun x83 ((x492 Int)) Int (ite x315 (x233 x492) (x286 x492)))
(define-fun x228 ((x492 Int)) Int (ite (= x492 x218) x41 (x194 x492)))
(define-fun x449 ((x492 Int)) Int (ite x475 (x382 x492) (x228 x492)))
(define-fun x123 ((x492 Int)) Int (ite (= x492 x398) x46 (x497 x492)))
(define-fun x463 ((x356 Int)) Bool (=> (and (not (= 18446744073709551615 x356)) (not (= x356 79228162514264337593543950336)) (not (= x356 662108492)) (not (= 4294967296 x356)) (not (= 396482575 x356)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x356)) (not (= x356 2220280665)) (not (= x356 1461501637330902918203684832716283019655932542975)) (not (= x356 4294967295)) (not (= 340282366920938463463374607431768211455 x356)) (not (= 47171411 x356)) (not (= 1084754510 x356)) (not (= 2652930389 x356)) (not (= 3547226261 x356)) (not (= x356 3110348530)) (not (= 1749768213 x356)) (not (= x356 3250587425)) (not (= x356 1960641893)) (not (= 4534642 x356)) (not (= 18446744073709551616 x356)) (> x356 10000) (not (= 1960939212 x356)) (not (= 1000000 x356))) (not ((_ is x72) (x17 x356)))))
(assert (x364 x7))
(assert (x491 64))
(assert (x364 x250))
(assert (x364 x197))
(assert (= (x349 (x72 662108492)) 662108492))
(assert (= x470 (or x424 x475)))
(assert (x463 (x449 (x37 (+ x402 160)))))
(assert (x364 x352))
(assert (= (x60 (x37 (+ 160 x402))) 0))
(assert (x364 x85))
(assert (x364 x461))
(assert (x364 x24))
(assert (x364 x339))
(assert (= 0 (x60 (x37 (+ x402 192)))))
(assert (=> (<= x96 10000) (= (x72 x96) (x17 x96))))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x245 (+ (x16 x245 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x202 x245 1461501637330902918203684832716283019655932542976))))) (x311 x245 1461501637330902918203684832716283019655932542976) (x110 x245 1461501637330902918203684832716283019655932542976) (x344 x245 1461501637330902918203684832716283019655932542976)))
(assert (= (x349 (x72 340282366920938463463374607431768211455)) 340282366920938463463374607431768211455))
(assert (x364 x158))
(assert (x364 x237))
(assert (x364 x185))
(assert (= (x17 396482575) (x72 396482575)))
(assert (= (x17 1960641893) (x72 1960641893)))
(assert (x427 x450))
(assert (x364 x100))
(assert (x364 x485))
(assert (x364 x481))
(assert (x364 x388))
(assert (x364 x482))
(assert (x364 x101))
(assert (x364 x415))
(assert (x103 x313))
(assert (x427 x158))
(assert (x364 x242))
(assert (x463 (x449 (x37 (+ 96 x402)))))
(assert (x427 x357))
(assert (x364 x402))
(assert (= (x72 2652930389) (x17 2652930389)))
(assert (x463 (x449 (x37 (+ 128 x402)))))
(assert (= (x349 (x72 79228162514264337593543950336)) 79228162514264337593543950336))
(assert (= (=> (and (= x192 (x138 4294967295 x357)) (= (x340 128) x226) (= x279 (x37 (+ 32 x242))) (= (x119 160) x242) (not (< x378 0)) (= x253 (x138 4294967295 x357)) (> x45 0) (= x161 x192) (= (x340 128) x45) (= (not (> x226 1)) x151) (= (x83 x279) x357) (= (x66 (- 18446744073709551615 x192)) x378) (not (= 0 x253))) (and (=> (= x111 x161) x380) x151)) x54))
(assert (x364 x1))
(assert (x364 x370))
(assert (x364 x283))
(assert (= x28 (x349 (x17 x28))))
(assert (x50 x245))
(assert (and (= (* 4294967296 (x202 x24 4294967296)) (- x24 (x138 4294967295 x24))) (x53 x24 4294967296) (x259 x24 4294967296) (x136 x24 4294967296) (=> (and (> 4294967296 0) (> x24 0)) (and (<= (* (x202 x24 4294967296) 4294967296) x24) (< (- x24 4294967296) (* 4294967296 (x202 x24 4294967296))))) (x465 x24 4294967296)))
(assert (x364 x399))
(assert (x463 x3))
(assert (x463 x237))
(assert (x463 x419))
(assert (= (=> (and (= (x421 x426) x20) (= (x138 4294967295 x185) x41) (= (x37 (+ x399 32)) x218) (= x32 (x119 160)) (= x502 x399) (= (not (> x15 1)) x477) (= x426 x32) (= x185 (x83 x332)) (= (x37 (+ 32 x32)) x332) (= (x37 (+ 32 x218)) x388)) (and x477 (=> (and (= x460 x388) (= 192 x379) (= 1 x459)) x144))) x312))
(assert (x364 x289))
(assert (x364 x457))
(assert (= (x349 (x17 x30)) x30))
(assert (x364 x313))
(assert (x364 x28))
(assert (x364 x422))
(assert (=> (<= (x449 (x37 (+ 160 x402))) 10000) (= (x17 (x449 (x37 (+ x402 160)))) (x72 (x449 (x37 (+ x402 160)))))))
(assert (x364 x243))
(assert (x364 x68))
(assert (x364 x494))
(assert (= (x349 (x17 x27)) x27))
(assert (x364 x266))
(assert (x364 x309))
(assert (x364 x361))
(assert (x364 x393))
(assert (x364 x149))
(assert (=> (>= 10000 x468) (= (x72 x468) (x17 x468))))
(assert (x364 x290))
(assert (x364 x467))
(assert (= (x349 (x72 2220280665)) 2220280665))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x80 (+ (x16 x80 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x202 x80 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x311 x80 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x110 x80 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x344 x80 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (=> (<= x148 10000) (= (x72 x148) (x17 x148))))
(assert (x364 x155))
(assert (x364 x232))
(assert (= (x60 (x37 (+ 32 x402))) 0))
(assert (x364 x34))
(assert (= (x349 (x17 (x449 (x37 (+ x402 192))))) (x449 (x37 (+ x402 192)))))
(assert (x364 x460))
(assert (= (x349 (x72 1749768213)) 1749768213))
(assert (x364 x91))
(assert (=> (>= 10000 x419) (= (x17 x419) (x72 x419))))
(assert (x417 x185))
(assert (x417 x295))
(assert (x364 x459))
(assert (and (=> (> 340282366920938463463374607431768211456 0) (= x164 (+ (x16 x164 340282366920938463463374607431768211456) (* 340282366920938463463374607431768211456 (x202 x164 340282366920938463463374607431768211456))))) (x311 x164 340282366920938463463374607431768211456) (x110 x164 340282366920938463463374607431768211456) (x344 x164 340282366920938463463374607431768211456)))
(assert (and (x440 64 x15) (and (= (- (* x15 64) (* x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639872) x15)) (= (x369 64 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 64)) (= (- (* (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 64) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639872) (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x369 64 x15) (* 64 x15)) (x318 64 x15) (x453 64 x15) (x414 64 x15) (x183 64 x15)))
(assert (x364 x483))
(assert (x463 x28))
(assert (x364 x111))
(assert (x364 x178))
(assert (= (x449 (x37 (+ x402 128))) (x349 (x17 (x449 (x37 (+ x402 128)))))))
(assert (= (x17 1749768213) (x72 1749768213)))
(assert (= 1960939212 (x349 (x72 1960939212))))
(assert (and (=> (> 4294967296 0) (= x450 (+ (x16 x450 4294967296) (* 4294967296 (x202 x450 4294967296))))) (x311 x450 4294967296) (x110 x450 4294967296) (x344 x450 4294967296)))
(assert (x364 x57))
(assert (x113 x33))
(assert (= x480 (and x87 x410)))
(assert (x364 x403))
(assert (x364 x154))
(assert (x364 x378))
(assert (=> (<= (x449 (x37 (+ 192 x402))) 10000) (= (x17 (x449 (x37 (+ 192 x402)))) (x72 (x449 (x37 (+ x402 192)))))))
(assert (= x4 (x17 (x349 x4))))
(assert (= 3110348530 (x349 (x72 3110348530))))
(assert (x364 x472))
(assert (x463 x27))
(assert (x113 x191))
(assert (= 0 (x233 x332)))
(assert (= x315 (and x234 (not x363))))
(assert (x364 x49))
(assert (x364 x374))
(assert (x364 x129))
(assert (x364 x30))
(assert (x364 x203))
(assert (x364 x15))
(assert (x364 x224))
(assert (x364 x134))
(assert (x364 x260))
(assert (and (x440 32 x15) (and (= (- (* x15 32) (* x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x15)) (= (x369 32 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (- (* (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x369 32 x15) (* 32 x15)) (x318 32 x15) (x453 32 x15) (x414 32 x15) (x183 32 x15)))
(assert (x364 x280))
(assert (x364 x428))
(assert (x364 x214))
(assert (x364 x218))
(assert (x364 x398))
(assert (x463 x30))
(assert (x364 x367))
(assert (= x55 (and (not x86) x5)))
(assert (x364 x226))
(assert (= (x349 (x17 x148)) x148))
(assert (x364 x496))
(assert (x377 x80))
(assert (x364 x156))
(assert (x364 x157))
(assert (x364 x464))
(assert (x489 x295))
(assert (x489 x313))
(assert (x364 x407))
(assert (= (x445 x260 224) (x202 x260 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x427 x177))
(assert (x113 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= (=> (and (= x89 (x66 (- x460 x398))) (= x178 0) (= x459 x15) (= x178 (x16 x177 32)) (= x457 (x37 (+ x134 160))) (= x107 (x297 (* 64 x15))) (= x379 x457) (= x134 (x297 (* x15 32))) (= (x37 (+ 32 x398)) x402) (= x290 (x123 x398)) (= x460 x499) (= x162 (>= 224 x290)) (= x499 (x37 (+ x107 x399))) (= x177 (x123 x398)) (= (x66 (- x89 32)) x46)) (and (=> (= (ite (>= 32 x290) (x98 (x17 (x449 x402)) 0) (ite (>= 64 x290) (x292 (x17 (x449 x402)) (x17 (x449 (x37 (+ x402 32)))) 0) (ite (<= x290 96) (x179 (x17 (x449 x402)) (x17 (x449 (x37 (+ 32 x402)))) (x17 (x449 (x37 (+ x402 64)))) 0) (ite (<= x290 128) (x198 (x17 (x449 x402)) (x17 (x449 (x37 (+ 32 x402)))) (x17 (x449 (x37 (+ 64 x402)))) (x17 (x449 (x37 (+ 96 x402)))) 0) (ite (<= x290 160) (x200 (x17 (x449 x402)) (x17 (x449 (x37 (+ x402 32)))) (x17 (x449 (x37 (+ x402 64)))) (x17 (x449 (x37 (+ x402 96)))) (x17 (x449 (x37 (+ 128 x402)))) 0) (ite (<= x290 192) (x479 (x17 (x449 x402)) (x17 (x449 (x37 (+ 32 x402)))) (x17 (x449 (x37 (+ x402 64)))) (x17 (x449 (x37 (+ x402 96)))) (x17 (x449 (x37 (+ x402 128)))) (x17 (x449 (x37 (+ x402 160)))) 0) (ite (>= 224 x290) (x331 (x17 (x449 x402)) (x17 (x449 (x37 (+ x402 32)))) (x17 (x449 (x37 (+ 64 x402)))) (x17 (x449 (x37 (+ 96 x402)))) (x17 (x449 (x37 (+ 128 x402)))) (x17 (x449 (x37 (+ x402 160)))) (x17 (x449 (x37 (+ x402 192)))) 0) (x17 x96)))))))) x4) x267) x162)) x144))
(assert (x364 x177))
(assert (x364 x79))
(assert (= (x449 (x37 (+ 160 x402))) (x349 (x17 (x449 (x37 (+ 160 x402)))))))
(assert (= (x349 (x72 1084754510)) 1084754510))
(assert (x364 x332))
(assert (x364 x240))
(assert (= x419 (x349 (x17 x419))))
(assert (x364 x14))
(assert (x463 x96))
(assert (x364 x498))
(assert (= (x17 1960939212) (x72 1960939212)))
(assert (x364 x471))
(assert (x113 79228162514264337593543950336))
(assert (x364 x71))
(assert (= (x349 (x72 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= (x349 (x17 x3)) x3))
(assert (= x79 (x349 (x17 x79))))
(assert (= (x17 1084754510) (x72 1084754510)))
(assert (x364 x426))
(assert (x364 x434))
(assert (x364 x42))
(assert (x489 340282366920938463463374607431768211455))
(assert (x364 x456))
(assert (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x417 x150))
(assert (x364 x474))
(assert (x364 x397))
(assert (x364 x25))
(assert (x364 x187))
(assert (= (x349 (x72 18446744073709551616)) 18446744073709551616))
(assert (x417 x357))
(assert (x364 x450))
(assert (x463 x155))
(assert (x463 x79))
(assert (x364 x333))
(assert (x364 x423))
(assert (= (x349 (x72 1000000)) 1000000))
(assert (= 0 (x233 x279)))
(assert (x364 x102))
(assert (=> (>= 10000 x260) (= (x17 x260) (x72 x260))))
(assert (x364 x276))
(assert (x364 x357))
(assert (x364 x137))
(assert (= (x17 4294967295) (x72 4294967295)))
(assert (and (= (* 79228162514264337593543950336 (x202 x285 79228162514264337593543950336)) (- x285 (x138 79228162514264337593543950335 x285))) (x53 x285 79228162514264337593543950336) (x259 x285 79228162514264337593543950336) (x136 x285 79228162514264337593543950336) (=> (and (> 79228162514264337593543950336 0) (> x285 0)) (and (<= (* (x202 x285 79228162514264337593543950336) 79228162514264337593543950336) x285) (< (- x285 79228162514264337593543950336) (* 79228162514264337593543950336 (x202 x285 79228162514264337593543950336))))) (x465 x285 79228162514264337593543950336)))
(assert (x364 x500))
(assert (x364 x295))
(assert (= 0 (x165 x426)))
(assert (x489 x150))
(assert (x364 x206))
(assert (x364 x80))
(assert (x364 x255))
(assert (x427 x164))
(assert (x364 x36))
(assert (= (x349 (x327 x231 2)) (+ (x349 x231) 2)))
(assert (= x409 (or x430 x480)))
(assert (x364 x256))
(assert (=> (>= 10000 x30) (= (x17 x30) (x72 x30))))
(assert (and (= (x369 9 9) 81) (= (x369 3 3) 9) (= (x369 27 3) 81) (= (x369 9 3) 27)))
(assert (x489 x164))
(assert (x364 x490))
(assert (x113 18446744073709551616))
(assert (x364 x468))
(assert (x364 x341))
(assert (x463 x468))
(assert (x364 x436))
(assert (and (=> (> 32 0) (= x80 (+ (x16 x80 32) (* 32 (x202 x80 32))))) (x311 x80 32) (x110 x80 32) (x344 x80 32)))
(assert (= x155 (x349 (x17 x155))))
(assert (x364 x287))
(assert (= (x72 18446744073709551615) (x17 18446744073709551615)))
(assert (x364 x273))
(assert (x364 x238))
(assert (x364 x69))
(assert (=> (<= x155 10000) (= (x72 x155) (x17 x155))))
(assert (x364 x73))
(assert (x364 x473))
(assert (= (x349 (x72 3547226261)) 3547226261))
(assert (= 4534642 (x349 (x72 4534642))))
(assert (x364 x298))
(assert (= (x349 (x327 x189 1)) (+ (x349 x189) 1)))
(assert (x364 x131))
(assert (= (x449 (x37 (+ 64 x402))) (x349 (x17 (x449 (x37 (+ x402 64)))))))
(assert (x364 x275))
(assert (= 18446744073709551615 (x349 (x72 18446744073709551615))))
(assert (x364 x20))
(assert (x364 x190))
(assert (x364 x153))
(assert (x364 x188))
(assert (=> (>= 10000 (x449 (x37 (+ 64 x402)))) (= (x72 (x449 (x37 (+ 64 x402)))) (x17 (x449 (x37 (+ 64 x402)))))))
(assert (x364 x46))
(assert (x364 x458))
(assert (x364 x3))
(assert (x489 x158))
(assert (x364 x335))
(assert (and (=> (> 4294967296 0) (= x295 (+ (x16 x295 4294967296) (* 4294967296 (x202 x295 4294967296))))) (x311 x295 4294967296) (x110 x295 4294967296) (x344 x295 4294967296)))
(assert (x364 x173))
(assert (x427 x150))
(assert (= 0 (x60 (x37 (+ 96 x402)))))
(assert (x364 x121))
(assert (x364 x41))
(assert (x64 x164))
(assert (x489 1461501637330902918203684832716283019655932542975))
(assert (x427 x39))
(assert (= (or x305 x470) x167))
(assert (x427 x313))
(assert (= (x72 3250587425) (x17 3250587425)))
(assert (and (x440 32 x298) (and (= (- (* x298 32) (* x298 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x298)) (= (x369 32 (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (- (* (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x369 32 x298) (* 32 x298)) (x318 32 x298) (x453 32 x298) (x414 32 x298) (x183 32 x298)))
(assert (= (and (not x410) x87) x430))
(assert (x364 x96))
(assert (= x424 (and x124 x55)))
(assert (x364 x27))
(assert (x364 x321))
(assert (x364 x337))
(assert (x364 x486))
(assert (= (x349 (x72 47171411)) 47171411))
(assert (=> (>= 10000 x27) (= (x72 x27) (x17 x27))))
(assert (x113 x24))
(assert (= (x349 (x72 4294967296)) 4294967296))
(assert (x364 x487))
(assert (and (= (* 79228162514264337593543950336 (x202 x174 79228162514264337593543950336)) (- x174 (x138 79228162514264337593543950335 x174))) (x53 x174 79228162514264337593543950336) (x259 x174 79228162514264337593543950336) (x136 x174 79228162514264337593543950336) (=> (and (> 79228162514264337593543950336 0) (> x174 0)) (and (<= (* (x202 x174 79228162514264337593543950336) 79228162514264337593543950336) x174) (< (- x174 79228162514264337593543950336) (* 79228162514264337593543950336 (x202 x174 79228162514264337593543950336))))) (x465 x174 79228162514264337593543950336)))
(assert (x489 x185))
(assert (x463 x236))
(assert (x463 (x449 (x37 (+ 192 x402)))))
(assert (= (x72 1000000) (x17 1000000)))
(assert (= x468 (x349 (x17 x468))))
(assert (x364 x145))
(assert (x463 x148))
(assert (=> (<= (x449 x402) 10000) (= (x17 (x449 x402)) (x72 (x449 x402)))))
(assert (x417 x158))
(assert (=> (>= 10000 (x449 (x37 (+ x402 128)))) (= (x72 (x449 (x37 (+ x402 128)))) (x17 (x449 (x37 (+ x402 128)))))))
(assert (x364 x390))
(assert (and (= (* 4294967296 (x202 x33 4294967296)) (- x33 (x138 4294967295 x33))) (x53 x33 4294967296) (x259 x33 4294967296) (x136 x33 4294967296) (=> (and (> 4294967296 0) (> x33 0)) (and (<= (* (x202 x33 4294967296) 4294967296) x33) (< (- x33 4294967296) (* 4294967296 (x202 x33 4294967296))))) (x465 x33 4294967296)))
(assert (x364 x411))
(assert (x364 x142))
(assert (x364 x58))
(assert (= x77 (and x363 x234)))
(assert (x427 x80))
(assert (x364 x9))
(assert (x364 x253))
(assert (and (=> (> 340282366920938463463374607431768211456 0) (= x39 (+ (x16 x39 340282366920938463463374607431768211456) (* 340282366920938463463374607431768211456 (x202 x39 340282366920938463463374607431768211456))))) (x311 x39 340282366920938463463374607431768211456) (x110 x39 340282366920938463463374607431768211456) (x344 x39 340282366920938463463374607431768211456)))
(assert (and (= (* 18446744073709551616 (x202 x100 18446744073709551616)) (- x100 (x138 18446744073709551615 x100))) (x53 x100 18446744073709551616) (x259 x100 18446744073709551616) (x136 x100 18446744073709551616) (=> (and (> 18446744073709551616 0) (> x100 0)) (and (<= (* (x202 x100 18446744073709551616) 18446744073709551616) x100) (< (- x100 18446744073709551616) (* 18446744073709551616 (x202 x100 18446744073709551616))))) (x465 x100 18446744073709551616)))
(assert (x364 x114))
(assert (= 2652930389 (x349 (x72 2652930389))))
(assert (x463 (x449 (x37 (+ 64 x402)))))
(assert (= (x349 (x17 x236)) x236))
(assert (x364 x371))
(assert (=> (<= x237 10000) (= (x17 x237) (x72 x237))))
(assert (x364 x502))
(assert (=> (<= x28 10000) (= (x72 x28) (x17 x28))))
(assert (x364 x326))
(assert (x364 x404))
(assert (and (=> (> 4294967296 0) (= x185 (+ (x16 x185 4294967296) (* 4294967296 (x202 x185 4294967296))))) (x311 x185 4294967296) (x110 x185 4294967296) (x344 x185 4294967296)))
(assert (x364 x82))
(assert (x364 x23))
(assert (x364 x150))
(assert (x364 x47))
(assert (x364 x316))
(assert (x364 x310))
(assert (x364 x104))
(assert (x364 x435))
(assert (= 0 (x293 160)))
(assert (= (x349 (x17 x143)) x143))
(assert (x364 x43))
(assert (x427 x295))
(assert (x364 x372))
(assert (x364 x195))
(assert (= (x17 18446744073709551616) (x72 18446744073709551616)))
(assert (x364 x132))
(assert (x489 255))
(assert (and (x440 64 x298) (and (= (- (* x298 64) (* x298 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639872) x298)) (= (x369 64 (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936) 64)) (= (- (* (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936) 64) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x369 (- 115792089237316195423570985008687907853269984665640564039457584007913129639872) (- x298 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x369 64 x298) (* 64 x298)) (x318 64 x298) (x453 64 x298) (x414 64 x298) (x183 64 x298)))
(assert (x64 x39))
(assert (x364 x495))
(assert (= x168 (=> (and (and (and (= 128 x262) (<= 0 x35) (= (x66 (- x301 68)) x473) (= (x383 512) x149) (= x208 128) (= x359 (x308 192)) (< x333 2652930389) (>= x490 0) (= 192 x224) (= x145 (x383 640)) (= x47 x170) (>= 1461501637330902918203684832716283019655932542975 x35) (not (> 1749768213 x333)) (>= x141 0) (>= 1461501637330902918203684832716283019655932542975 x141) (= (x166 256) x78) (= x73 (x394 160)) (not (< x301 4)) (= x411 x291) (= x458 256) (< 0 x195) (and (< 195 x301) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x301))) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x473) true) (< x473 64)) (> x473 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x411 0) (= 1960939212 x333) (not (> 1960641893 x333)) (= (x66 (- x301 132)) x58) (not (or (and (= true (<= x121 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x121 192)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x121))) (not (or (and (< x58 64) (= true (<= x58 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x58))) (= x49 (x383 544)) (= x232 (x383 672)) (> 2220280665 x333) (= x57 x373) (= (x66 (- x301 4)) x121) (= x467 (x439 288)) (= x209 (x383 608)) (not (= 1960641893 x333)) (= x211 x490) (= 192 x157) (= (x353 224) x250) (<= x490 1461501637330902918203684832716283019655932542975) (= x211 x243) (= x283 (x383 576)) (= x195 (x216 (x17 x148))) (= x256 x141) (= x385 (x401 128)) (= x230 256)) (and x296 (not (< 18446744073709551615 x13)) (= (= x154 x325) x92) (= x101 x319) (= x272 x310) (= x474 (x37 (+ x68 31))) (= (= x201 x169) x488) (= x129 x260) x462 (= x296 (not (= x448 x376))) (= x501 (< 18446744073709551615 x173)) (= x363 (< x389 x23)) (= x8 x1) (= x71 128) (= x486 x272) (= x471 x448) (= x209 x415) (= x368 x69) (= (= x1 x34) x396) (= x408 (> 128 x173)) (= x80 (x37 (+ 31 x494))) (> 1749768213 x266) x488 (= x494 (x37 (+ 32 x323))) (= x291 x187) (= x325 x422) (not (= 4534642 x266)) (<= x412 1461501637330902918203684832716283019655932542975) (>= x370 0) x418 (= x112 0) (= (not (= x229 x310)) x462) (= x376 x272) (= x389 (x37 (+ x68 32))) (= (x66 (- x301 4)) x374) (<= 0 x412) (= x397 x256) x396 (= (x216 (x17 x148)) x299) (< x266 662108492) (and (< 67 x301) (= true (<= x301 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x149 x319) (= x271 (= x120 x116)) (= x169 x309) (= x187 0) (= x500 x487) (= (x37 (+ x13 4)) x68) (= x6 x232) (>= 1461501637330902918203684832716283019655932542975 x397) (= x173 (x37 (+ x214 128))) (= (ite x451 1 0) x112) (= x243 x11) (< 0 x299) (= x370 x11) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374)) (< x374 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374))) x303 (= x49 x7) (>= 1461501637330902918203684832716283019655932542975 x370) (not (> x298 18446744073709551615)) (= x323 (x297 (* x298 32))) (= x471 x116) (= x154 x7) (= x393 x260) (not (> 4 x301)) x182 (= (x297 (* 64 x298)) x82) (= (= x368 x487) x303) x271 (= x451 (or x501 x408)) (< x266 1084754510) (= x201 x6) (not (< x301 x23)) (= x341 x347) (= x298 (x125 x68)) (= x145 x276) (= x415 x34) (= (= x341 x101) x182) (= x362 x347) (or (and (> x301 x474) (= (<= x474 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x301 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x301) (> x474 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x418 (not (= x362 x486))) (= x229 x500) (= x23 (x37 (+ x82 x389))) (= 47171411 x266) (> 396482575 x266) (= x69 x283) (= x214 (x138 115792089237316195423570985008687907853269984665640564039457584007913129639904 x80)) x92 (= x120 x276) (<= 0 x397))) (and (>= x326 0) x205 (= x387 x483) (= x100 (x443 x140)) (= x400 (x443 x366)) (= x461 x21) (= x140 (x327 x366 1)) (= x335 x326) (= (x227 224) x76) (<= 0 x425) (= 3250587425 x246) (= x150 (x202 x33 4294967296)) (>= 1461501637330902918203684832716283019655932542975 x326) (= x213 (x138 4294967295 x450)) (= 47171411 x36) (>= 1461501637330902918203684832716283019655932542975 x148) (= (x138 4294967295 x150) x147) (<= x468 1461501637330902918203684832716283019655932542975) (<= x403 1461501637330902918203684832716283019655932542975) (= (x227 256) x472) (<= 0 x352) (= x464 x419) (<= 0 x320) (= (x443 x261) x114) (= x261 x441) (not (= x468 x206)) (= x132 x352) (not (= x148 x468)) (= x300 false) (>= x403 0) (not (= x206 x148)) (= x265 (> (x216 (x17 x148)) 0)) (<= 0 x387) (>= 1461501637330902918203684832716283019655932542975 x355) (= x272 x28) (<= x91 340282366920938463463374607431768211455) (not (< x246 3110348530)) (<= 0 x361) (= false x105) (<= 0 x375) (= (x327 x441 2) x366) (<= x21 1461501637330902918203684832716283019655932542975) (= x320 (x97 (x17 x206))) (= x355 x256) (= x450 (x202 x100 18446744073709551616)) (= x441 (x292 (x17 x28) x12 0)) (<= x375 4294967295) (>= 1461501637330902918203684832716283019655932542975 x240) (>= 1461501637330902918203684832716283019655932542975 x275) (>= 1461501637330902918203684832716283019655932542975 x352) (>= 1461501637330902918203684832716283019655932542975 x193) (= x9 x343) (= false x324) (= (x227 128) x47) (= x9 x156) (= x12 (x292 (x17 x419) (x17 x3) 0)) (= x255 x277) (>= 4294967295 x361) (< 0 x148) (= x425 (x97 (x17 x148))) (>= x343 0) (= 0 x255) (< 0 x206) (>= x355 0) (= x33 (x443 x140)) (= x164 (x202 x174 79228162514264337593543950336)) (> x468 0) (>= x193 0) (= (x97 (x17 x468)) x289) (not (> 2652930389 x246)) x365 (<= x206 1461501637330902918203684832716283019655932542975) (= (x227 192) x428) (not (= 3110348530 x246)) (= 2 x484) (<= 0 x91) (< x246 3547226261) (= (x443 x140) x174) (= (x138 340282366920938463463374607431768211455 x164) x61) (> x321 0) (<= 0 x240) (>= 1461501637330902918203684832716283019655932542975 x387) (>= x21 0) (= (x227 160) x57) (= x321 (x216 (x17 x148))) (= x481 x403) (not (> 1749768213 x246)) (= x193 x132) (= x205 (> (x216 (x17 x206)) 0)) (<= 0 x275) (>= 1461501637330902918203684832716283019655932542975 x343) (= x314 false) x265 (>= x289 0) (= x126 x3) (= (> (x216 (x17 x468)) 0) x365))) (and (=> (and (not x363) (= x398 x173)) x44) (=> x363 x395)))))
(assert (= (x72 3547226261) (x17 3547226261)))
(assert (x364 x146))
(assert (x364 x387))
(assert (= (x349 (x72 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x364 x469))
(assert (x364 x285))
(assert (x364 x161))
(assert (=> (>= 10000 x143) (= (x17 x143) (x72 x143))))
(assert (x417 x450))
(assert (and (= (* 18446744073709551616 (x202 x191 18446744073709551616)) (- x191 (x138 18446744073709551615 x191))) (x53 x191 18446744073709551616) (x259 x191 18446744073709551616) (x136 x191 18446744073709551616) (=> (and (> 18446744073709551616 0) (> x191 0)) (and (<= (* (x202 x191 18446744073709551616) 18446744073709551616) x191) (< (- x191 18446744073709551616) (* 18446744073709551616 (x202 x191 18446744073709551616))))) (x465 x191 18446744073709551616)))
(assert (x364 x306))
(assert (=> (<= x3 10000) (= (x17 x3) (x72 x3))))
(assert (x364 x11))
(assert (x364 x484))
(assert (x427 1461501637330902918203684832716283019655932542976))
(assert (= x87 (and (not x322) x167)))
(assert (x364 x368))
(assert (= x65 (or x171 x409)))
(assert (x427 4294967296))
(assert (x364 x174))
(assert (x364 x319))
(assert (x364 x107))
(assert (x364 x269))
(assert (x364 x359))
(assert (= (x349 (x72 4294967295)) 4294967295))
(assert (= (x17 2220280665) (x72 2220280665)))
(assert (x489 x80))
(assert (x364 x358))
(assert (x113 4294967296))
(assert (x364 x78))
(assert (x364 x147))
(assert (x364 x39))
(assert (x364 x262))
(assert (x489 x450))
(assert (= x171 (and x167 x322)))
(assert (x364 x272))
(assert (x463 x143))
(assert (x364 x236))
(assert (x364 x221))
(assert (x364 x320))
(assert (= (or x315 x77) x5))
(assert (x113 x260))
(assert (x364 x18))
(assert (x364 x400))
(assert (= (x72 340282366920938463463374607431768211455) (x17 340282366920938463463374607431768211455)))
(assert (x113 x174))
(assert (x364 x170))
(assert (= (x17 4294967296) (x72 4294967296)))
(assert (= (x60 (x37 (+ x402 128))) 0))
(assert (x463 x423))
(assert (x364 x375))
(assert (= (x17 1461501637330902918203684832716283019655932542975) (x72 1461501637330902918203684832716283019655932542975)))
(assert (=> (>= 10000 x206) (= (x72 x206) (x17 x206))))
(assert (x463 x260))
(assert (x364 x385))
(assert (= x234 true))
(assert (x364 x59))
(assert (x364 x99))
(assert (x364 x126))
(assert (x364 x405))
(assert (x489 x357))
(assert (x491 32))
(assert (x364 x246))
(assert (x364 x193))
(assert (x364 x35))
(assert (= (and (not x124) x55) x475))
(assert (=> (>= 10000 (x449 (x37 (+ x402 96)))) (= (x72 (x449 (x37 (+ x402 96)))) (x17 (x449 (x37 (+ 96 x402)))))))
(assert (and (=> (> 4294967296 0) (= x150 (+ (x16 x150 4294967296) (* 4294967296 (x202 x150 4294967296))))) (x311 x150 4294967296) (x110 x150 4294967296) (x344 x150 4294967296)))
(assert (x364 x425))
(assert (= (x72 662108492) (x17 662108492)))
(assert (= (=> (and (= x221 0) (= (x443 (x17 x143)) x313) (= x236 x25) (= (x138 1461501637330902918203684832716283019655932542975 x245) x354) (= (x138 255 x313) x221) (= x30 (x37 (+ 1 x190))) (= x351 (x292 (x17 x260) (x17 x236) 0)) (= x143 x235) (= x245 (x443 x118)) (= x372 (x340 128)) (= x86 (= x372 0)) (= x118 (x292 (x17 x237) (x17 x30) 0)) (= x354 x397) (= x237 (x445 x260 224))) (and (=> (and (not x86) (and (= x495 (x37 (+ 32 x398))) (= x399 (x37 (+ 32 x434))) (= x124 (> x15 0)) (= x434 (x37 (+ 64 x398))) (= (x340 128) x15))) (and (=> x124 x312) (=> (and (and (= 0 x459) (= x460 x399) (= 160 x379)) (not x124)) x144))) (=> (and x86 (= x4 (x72 0))) x267))) x44))
(assert (x364 x279))
(assert (= (x72 3110348530) (x17 3110348530)))
(assert (x489 4294967295))
(assert (= (x17 79228162514264337593543950336) (x72 79228162514264337593543950336)))
(assert (x364 x235))
(assert (x364 x448))
(assert (x364 x201))
(assert (x364 x455))
(assert (x364 x116))
(assert (= (x349 (x17 x423)) x423))
(assert (x491 x298))
(assert (x364 x152))
(assert (x364 x112))
(assert (x364 x120))
(assert (x364 x412))
(assert (= (x17 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x72 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x364 x347))
(assert (x364 x291))
(assert (= (x72 4534642) (x17 4534642)))
(assert (= (x449 (x37 (+ 96 x402))) (x349 (x17 (x449 (x37 (+ x402 96)))))))
(assert (= x237 (x349 (x17 x237))))
(assert (x364 x373))
(assert (x364 x325))
(assert (=> (<= x79 10000) (= (x72 x79) (x17 x79))))
(assert (x364 x251))
(assert (x364 x499))
(assert (x364 x446))
(assert (= (=> (not (< 1000000 x111)) x503) x380))
(assert (= 0 (x60 x402)))
(assert (x427 340282366920938463463374607431768211456))
(assert (and (= (* 26959946667150639794667015087019630673637144422540572481103610249216 (x202 x260 26959946667150639794667015087019630673637144422540572481103610249216)) (- x260 (x138 26959946667150639794667015087019630673637144422540572481103610249215 x260))) (x53 x260 26959946667150639794667015087019630673637144422540572481103610249216) (x259 x260 26959946667150639794667015087019630673637144422540572481103610249216) (x136 x260 26959946667150639794667015087019630673637144422540572481103610249216) (=> (and (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (> x260 0)) (and (<= (* (x202 x260 26959946667150639794667015087019630673637144422540572481103610249216) 26959946667150639794667015087019630673637144422540572481103610249216) x260) (< (- x260 26959946667150639794667015087019630673637144422540572481103610249216) (* 26959946667150639794667015087019630673637144422540572481103610249216 (x202 x260 26959946667150639794667015087019630673637144422540572481103610249216))))) (x465 x260 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (and (=> (> 4294967296 0) (= x357 (+ (x16 x357 4294967296) (* 4294967296 (x202 x357 4294967296))))) (x311 x357 4294967296) (x110 x357 4294967296) (x344 x357 4294967296)))
(assert (= x260 (x349 (x17 x260))))
(assert (x364 x181))
(assert (x364 x376))
(assert (= (x349 (x72 396482575)) 396482575))
(assert (x489 x245))
(assert (x364 x299))
(assert (= (x17 47171411) (x72 47171411)))
(assert (x364 x431))
(assert (x427 x185))
(assert (= x267 (=> (and (= x322 (= x4 (x17 x423))) (= x423 (x443 x447)) (= x447 x351)) (and (=> x322 x503) (=> (and (and (= x306 (x340 128)) (= x197 (x340 128)) (= (< 0 x197) x410) (not (< 200 x306))) (not x322)) (and (=> (and (= x111 0) (not x410)) x380) (=> x410 x54)))))))
(assert (x364 x191))
(assert (x364 x32))
(assert (x364 x209))
(assert (x364 x343))
(assert (x364 x211))
(assert (x364 x141))
(assert (x364 x90))
(assert (x364 x127))
(assert (x364 x84))
(assert (x364 x355))
(assert (x364 x62))
(assert (x489 x39))
(assert (x364 x208))
(assert (= x305 (and x86 x5)))
(assert (x364 x323))
(assert (=> (<= (x449 (x37 (+ x402 32))) 10000) (= (x17 (x449 (x37 (+ x402 32)))) (x72 (x449 (x37 (+ 32 x402)))))))
(assert (x113 x100))
(assert (x463 (x449 (x37 (+ x402 32)))))
(assert (x364 x213))
(assert (= (x349 (x17 (x449 (x37 (+ x402 32))))) (x449 (x37 (+ x402 32)))))
(assert (x364 x342))
(assert (= (=> (and (and (= x137 (x207 x336)) (= x191 (x207 x135)) (= 3250587425 x153) (<= 0 x269) (= 0 x85) (= x127 x407) (>= 340282366920938463463374607431768211455 x175) (= (x138 4294967295 x295) x392) (= (x334 128) x498) (<= 0 x251) (= x481 x485) (= x79 x126) (= (x202 x191 18446744073709551616) x295) (>= x485 0) (= (x334 160) x188) (<= x478 4294967295) (<= x127 1461501637330902918203684832716283019655932542975) (= x407 x482) (>= x127 0) (= x90 (x138 340282366920938463463374607431768211455 x39)) (= x464 x155) (= x62 (x334 256)) (not (< x153 2652930389)) (= (x292 (x17 x155) (x17 x79) 0) x93) (= (x202 x285 79228162514264337593543950336) x39) (= x336 x231) (= x285 (x207 x135)) (= (x334 192) x446) (= x189 (x327 x231 2)) (>= 1461501637330902918203684832716283019655932542975 x269) (= x27 x272) (= x152 x85) (not (< x153 1749768213)) (= x24 (x207 x135)) (= x48 (x138 4294967295 x158)) (= x405 (x216 (x17 x148))) (= (x327 x189 1) x135) (= x496 (x334 224)) (= (x202 x24 4294967296) x158) (>= 1461501637330902918203684832716283019655932542975 x485) (>= 4294967295 x251) (< x153 3547226261) (not (= 3110348530 x153)) (= (x292 (x17 x27) x93 0) x231) (<= 0 x175) (< 0 x405) (not (< x153 3110348530)) (<= 0 x478) (= x435 (x207 x189))) (and (= x217 (= x273 x371)) (= x371 x496) (= x84 x188) (= x273 x76) (= x22 x498))) x217) x503))
(assert (x364 x164))
(assert (not x168))
(assert (x364 x48))
(assert (x364 x245))
(assert (and (=> (> 256 0) (= x313 (+ (x16 x313 256) (* 256 (x202 x313 256))))) (x311 x313 256) (x110 x313 256) (x344 x313 256)))
(assert (= (x349 (x72 3250587425)) 3250587425))
(assert (x427 x245))
(assert (x364 x301))
(assert (x364 x45))
(assert (x364 x389))
(assert (x113 x285))
(assert (x364 x362))
(assert (x364 x379))
(assert (x364 x354))
(assert (x364 x6))
(assert (x364 x22))
(assert (x427 32))
(assert (x364 x21))
(assert (x364 x419))
(assert (x364 x76))
(assert (x364 x61))
(assert (x364 x433))
(assert (x364 x192))
(assert (=> (>= 10000 x236) (= (x17 x236) (x72 x236))))
(assert (x364 x143))
(assert (and (=> (> 32 0) (= x177 (+ (x16 x177 32) (* 32 (x202 x177 32))))) (x311 x177 32) (x110 x177 32) (x344 x177 32)))
(assert (x463 (x449 x402)))
(assert (x364 x8))
(assert (x364 x229))
(assert (x364 x230))
(assert (x364 x392))
(assert (x463 x206))
(assert (x364 x115))
(assert (x427 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x364 x89))
(assert (= (+ (x349 x366) 1) (x349 (x327 x366 1))))
(assert (x364 x175))
(assert (= (x349 (x17 (x449 x402))) (x449 x402)))
(assert (x364 x169))
(assert (x364 x478))
(assert (= (x349 (x17 x96)) x96))
(assert (and (=> (> 4294967296 0) (= x158 (+ (x16 x158 4294967296) (* 4294967296 (x202 x158 4294967296))))) (x311 x158 4294967296) (x110 x158 4294967296) (x344 x158 4294967296)))
(assert (x364 x277))
(assert (x364 x148))
(assert (= (x349 (x327 x441 2)) (+ 2 (x349 x441))))
(assert (x364 x13))
(assert (= (x60 (x37 (+ x402 64))) 0))
(assert (x491 x15))
(assert (=> (<= x423 10000) (= (x72 x423) (x17 x423))))
(assert (x427 256))
(assert (= (x349 (x17 x206)) x206))
(assert (= (=> (and (= (x125 x433) x203) (= (< x342 x173) x223) (= (< 18446744073709551615 x342) x444) (= (x125 x436) x358) (= x104 0) (= (x37 (+ 32 x173)) x115) (= x280 (x37 (+ 32 x436))) (= x19 (or x223 x444)) (= (x37 (+ 32 x389)) x436) (= x433 x389) (= (not (> x23 x280)) x284) (>= 4294967295 x358) (= x431 x173) (not (or (and (> 64 x339) (= (<= x339 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x339))) (= (ite x19 1 0) x104) (= (x66 (- x301 x389)) x339) (= x342 (x37 (+ 64 x173)))) (and x284 (=> (= x342 x398) x44))) x395))
(assert (= 1960641893 (x349 (x72 1960641893))))
(assert (x364 x33))
(check-sat)
(exit)
