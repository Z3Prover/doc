(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x208 0)) (((x113 (x285 x208) (x228 Int)) (x350 (x70 x208) (x353 x208) (x377 Int)) (x74 (x26 Int)) (x165 (x383 x208) (x20 x208) (x173 x208) (x152 x208) (x30 Int)))))
(declare-fun x131 () Int)
(declare-fun x196 () Bool)
(declare-fun x130 () Int)
(declare-fun x79 () Int)
(declare-fun x127 () Int)
(declare-fun x193 () Bool)
(declare-fun x176 () Bool)
(declare-fun x237 () Int)
(declare-fun x133 () Int)
(declare-fun x363 () Int)
(declare-fun x229 () Bool)
(declare-fun x18 () Bool)
(declare-fun x329 () Bool)
(declare-fun x162 (Int Int) Int)
(declare-fun x354 () Int)
(declare-fun x280 () Int)
(declare-fun x258 () Int)
(declare-fun x161 () Int)
(declare-fun x28 () Int)
(declare-fun x44 () Int)
(declare-fun x387 () Int)
(declare-fun x13 () Int)
(declare-fun x204 () Int)
(declare-fun x323 () x208)
(declare-fun x166 () x208)
(declare-fun x181 () Int)
(declare-fun x126 () Int)
(declare-fun x53 () Bool)
(declare-fun x132 () Bool)
(declare-fun x206 () Int)
(declare-fun x144 () Bool)
(declare-fun x16 () Int)
(declare-fun x136 () Int)
(declare-fun x392 () x208)
(declare-fun x294 () Int)
(declare-fun x182 () Int)
(declare-fun x186 () x208)
(declare-fun x261 () Int)
(declare-fun x63 (x208) Int)
(declare-fun x125 () Bool)
(declare-fun x332 () Int)
(declare-fun x60 () Int)
(declare-fun x104 () Bool)
(declare-fun x168 () Bool)
(declare-fun x77 (Int Int) Int)
(declare-fun x318 () Int)
(declare-fun x128 () Bool)
(declare-fun x219 () Int)
(declare-fun x214 () Int)
(declare-fun x65 () x208)
(declare-fun x93 () Int)
(declare-fun x266 () Int)
(declare-fun x155 () Bool)
(declare-fun x137 () Int)
(declare-fun x202 () Int)
(declare-fun x83 () Bool)
(declare-fun x4 () Int)
(declare-fun x240 () Bool)
(declare-fun x91 () x208)
(declare-fun x385 () x208)
(declare-fun x179 () Int)
(declare-fun x40 () Int)
(declare-fun x273 () Int)
(declare-fun x303 () Int)
(declare-fun x322 () Int)
(declare-fun x66 () x208)
(declare-fun x292 () Int)
(declare-fun x300 () Int)
(declare-fun x250 () Int)
(declare-fun x101 () Int)
(declare-fun x1 () Int)
(declare-fun x148 () Int)
(declare-fun x345 () Bool)
(declare-fun x248 () x208)
(declare-fun x316 () x208)
(declare-fun x99 (Int Int) Int)
(declare-fun x49 () Int)
(declare-fun x5 () Int)
(declare-fun x337 (Int) Int)
(declare-fun x357 () Int)
(declare-fun x220 () Int)
(declare-fun x309 () x208)
(declare-fun x234 () Int)
(declare-fun x269 () x208)
(declare-fun x326 () Int)
(declare-fun x375 () Int)
(declare-fun x175 (Int Int) Int)
(declare-fun x296 () Int)
(declare-fun x203 () Int)
(declare-fun x283 () Int)
(declare-fun x55 () Int)
(declare-fun x351 () Bool)
(declare-fun x349 () x208)
(declare-fun x364 () Int)
(declare-fun x242 () Int)
(declare-fun x150 () Int)
(declare-fun x98 () Int)
(declare-fun x174 (Int) x208)
(declare-fun x327 () Int)
(declare-fun x291 () Bool)
(declare-fun x226 () Int)
(declare-fun x52 () Int)
(declare-fun x299 () Int)
(declare-fun x24 () Int)
(declare-fun x192 () Int)
(declare-fun x96 () Bool)
(declare-fun x306 () Int)
(declare-fun x352 () Int)
(declare-fun x305 () Int)
(declare-fun x110 () Int)
(declare-fun x233 () Bool)
(declare-fun x257 () Int)
(declare-fun x331 () Bool)
(declare-fun x210 () x208)
(declare-fun x27 () x208)
(declare-fun x209 () Bool)
(declare-fun x139 () Int)
(declare-fun x41 () Int)
(declare-fun x194 () Int)
(declare-fun x142 () x208)
(declare-fun x12 () Bool)
(declare-fun x200 () Int)
(declare-fun x36 () Int)
(declare-fun x359 (x208) Int)
(declare-fun x72 () Int)
(declare-fun x117 () Int)
(declare-fun x267 () x208)
(declare-fun x111 () Int)
(declare-fun x25 () Int)
(declare-fun x348 () Bool)
(declare-fun x262 () Int)
(declare-fun x295 () Bool)
(declare-fun x335 () Int)
(declare-fun x355 () Bool)
(declare-fun x245 () x208)
(declare-fun x340 () Int)
(declare-fun x284 () Int)
(declare-fun x14 () Int)
(declare-fun x298 () Bool)
(declare-fun x382 () Bool)
(declare-fun x129 (Int Int) Int)
(declare-fun x282 () Int)
(declare-fun x251 () Int)
(declare-fun x123 () Int)
(declare-fun x369 () Int)
(declare-fun x31 () Bool)
(declare-fun x367 () Int)
(declare-fun x19 () Int)
(declare-fun x330 () Bool)
(declare-fun x157 (x208) Int)
(declare-fun x324 () x208)
(declare-fun x50 () x208)
(declare-fun x121 (Int Int) Int)
(declare-fun x268 (x208) Int)
(declare-fun x317 () Bool)
(declare-fun x378 () Int)
(declare-fun x278 () Bool)
(declare-fun x171 (x208) Int)
(declare-fun x62 () Int)
(declare-fun x339 () Int)
(declare-fun x160 () Int)
(declare-fun x276 () Int)
(declare-fun x297 () Bool)
(declare-fun x314 () Int)
(declare-fun x393 () Bool)
(declare-fun x185 () Int)
(declare-fun x95 () Int)
(declare-fun x102 () Int)
(declare-fun x239 () x208)
(declare-fun x11 () Bool)
(declare-fun x259 () Int)
(declare-fun x347 () Bool)
(declare-fun x78 () x208)
(declare-fun x344 () Int)
(declare-fun x198 () Int)
(declare-fun x290 () Int)
(declare-fun x92 () Bool)
(declare-fun x29 () Int)
(declare-fun x368 () Bool)
(declare-fun x252 () x208)
(declare-fun x85 () Int)
(declare-fun x188 () Int)
(declare-fun x211 () Int)
(declare-fun x43 () Int)
(declare-fun x10 () Int)
(declare-fun x58 () Int)
(declare-fun x231 (Int) Bool)
(declare-fun x51 () Int)
(declare-fun x207 () Bool)
(declare-fun x213 () Int)
(declare-fun x236 () Int)
(declare-fun x97 () x208)
(declare-fun x301 () Bool)
(declare-fun x224 () Int)
(declare-fun x116 () Int)
(declare-fun x313 () Bool)
(declare-fun x153 () Int)
(declare-fun x310 (Int) Int)
(declare-fun x69 () Bool)
(declare-fun x7 () x208)
(declare-fun x46 () Int)
(declare-fun x151 () Int)
(declare-fun x75 () Int)
(declare-fun x217 () Int)
(declare-fun x141 () x208)
(declare-fun x230 () Int)
(declare-fun x90 () Bool)
(declare-fun x311 () Int)
(declare-fun x169 () x208)
(declare-fun x145 () Int)
(declare-fun x362 () Bool)
(declare-fun x56 () x208)
(declare-fun x212 () Int)
(declare-fun x54 () Int)
(declare-fun x199 () Int)
(declare-fun x114 (Int Int) Int)
(declare-fun x23 () Int)
(declare-fun x48 () Int)
(declare-fun x215 (Int Int) Int)
(declare-fun x356 () Int)
(declare-fun x15 () x208)
(declare-fun x163 () x208)
(declare-fun x195 () Int)
(declare-fun x22 () Int)
(declare-fun x255 () Int)
(declare-fun x184 (x208) Int)
(declare-fun x307 () Int)
(declare-fun x279 () Int)
(declare-fun x149 () Int)
(declare-fun x216 () Int)
(declare-fun x256 () Int)
(declare-fun x103 () Int)
(declare-fun x243 () Int)
(declare-fun x105 () Bool)
(declare-fun x201 () Int)
(declare-fun x87 () Int)
(declare-fun x366 (x208) Int)
(declare-fun x134 () Int)
(declare-fun x68 () x208)
(declare-fun x288 () Bool)
(declare-fun x178 () x208)
(declare-fun x35 () x208)
(declare-fun x370 () Int)
(declare-fun x108 () Bool)
(declare-fun x180 () Bool)
(declare-fun x158 () Int)
(declare-fun x304 (Int) Int)
(declare-fun x325 () Int)
(declare-fun x389 () Int)
(declare-fun x21 () Int)
(declare-fun x312 () Int)
(declare-fun x156 (x208) Int)
(declare-fun x88 () Int)
(declare-fun x122 () Int)
(declare-fun x154 () Bool)
(declare-fun x6 () Int)
(declare-fun x341 () Int)
(declare-fun x342 (Int Int) Int)
(declare-fun x33 () Int)
(declare-fun x308 () Int)
(declare-fun x146 () Int)
(declare-fun x164 () Int)
(declare-fun x143 () Bool)
(declare-fun x265 () Int)
(declare-fun x328 () Int)
(declare-fun x17 () Int)
(declare-fun x275 () Int)
(declare-fun x241 () Int)
(declare-fun x289 () x208)
(declare-fun x386 () Int)
(declare-fun x42 () Bool)
(declare-fun x47 () Int)
(declare-fun x34 () x208)
(declare-fun x57 () Bool)
(declare-fun x89 () Int)
(declare-fun x302 () Int)
(declare-fun x94 () Int)
(declare-fun x384 () Bool)
(declare-fun x346 () Int)
(declare-fun x361 () Bool)
(declare-fun x32 () Int)
(declare-fun x281 () Int)
(declare-fun x270 () Int)
(declare-fun x376 () Bool)
(declare-fun x360 () Int)
(declare-fun x390 () Int)
(declare-fun x177 () x208)
(declare-fun x380 () x208)
(declare-fun x227 () Int)
(declare-fun x235 () x208)
(declare-fun x112 () Int)
(declare-fun x189 () x208)
(declare-fun x205 () Int)
(declare-fun x293 () Int)
(declare-fun x38 () Bool)
(declare-fun x274 () x208)
(declare-fun x187 () x208)
(define-fun x315 ((x208 x208) (x221 Int)) x208 (ite ((_ is x113) x208) (x113 (x285 x208) (+ x221 (x228 x208))) (ite ((_ is x165) x208) (x165 (x383 x208) (x20 x208) (x173 x208) (x152 x208) (+ (x30 x208) x221)) (ite ((_ is x350) x208) (x350 (x70 x208) (x353 x208) (+ x221 (x377 x208))) (x74 (+ (x26 x208) x221))))))
(define-fun x232 ((x379 Int)) Int (ite (and (< x379 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x379)) x379 (- x379 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x238 ((x379 Int)) Int (ite (and (>= x379 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x379)) (+ x379 115792089237316195423570985008687907853269984665640564039457584007913129639936) x379))
(define-fun x119 ((x379 Int)) Int (ite (and (<= 0 x379) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x379)) x379 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x379) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x379)) (- x379 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (< x379 0) (>= x379 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x379) (x99 x379 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x371 ((x81 Int)) Bool (and (<= 0 x81) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x81)))
(define-fun x140 ((x81 Int) (x107 Int)) Bool (=> (and (> x107 0) (< 0 x81)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x175 x81 x107)) (= (x129 (x119 (x175 x81 x107)) x81) x107))))
(define-fun x381 ((x81 Int) (x107 Int)) Bool (=> (and (not (= 0 x81)) (not (= 0 x107))) (and (= x81 (x129 (x175 x81 x107) x107)) (= x107 (x129 (x175 x81 x107) x81)))))
(define-fun x225 ((x81 Int) (x107 Int)) Bool (=> (and (< 0 x81) (< 0 x107)) (= (> x107 (x129 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x175 x81 x107)))))
(define-fun x253 ((x81 Int) (x107 Int)) Bool (and (= (x119 (x175 x81 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x119 (x175 x81 x107))) (= (x119 (x175 x81 x107)) (x119 (x175 (- x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) x107))) (= (x119 (x175 (- x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x119 (x175 x81 x107)))))
(define-fun x333 ((x81 Int) (x107 Int)) Bool (and (=> (and (and (<= x107 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x107 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x81 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x81))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x107) (x129 57896044618658097711785492504343953926634992332820282019728792003956564819968 x81)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x175 x81 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x107) (< 0 x107)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x81) (< 0 x81))) (= (<= x81 (x129 57896044618658097711785492504343953926634992332820282019728792003956564819967 x107)) (<= (x175 x81 x107) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x81 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x81 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (<= x107 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x107))) (= (>= (x175 (- x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) x107) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x81) (x129 57896044618658097711785492504343953926634992332820282019728792003956564819968 x107)))) (=> (and (and (> x81 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81)) (and (<= x107 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x107))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x81) (x129 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x107))) (<= (x175 (- x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))
(define-fun x246 ((x81 Int)) Bool (and (= (x175 x81 0) 0) (= 0 (x175 0 x81))))
(define-fun x247 ((x81 Int)) Bool (and (= (x175 x81 1) x81) (= x81 (x175 1 x81))))
(define-fun x39 ((x81 Int)) Bool (and (x247 x81) (x246 x81)))
(define-fun x67 ((x81 Int)) Bool (and (= x81 (x121 x81 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x81 (x121 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81))))
(define-fun x115 ((x81 Int)) Bool (and (= 0 (x121 0 x81)) (= (x121 x81 0) 0)))
(define-fun x336 ((x81 Int)) Bool (= x81 (x121 x81 x81)))
(define-fun x388 ((x81 Int)) Bool (and (x336 x81) (x67 x81) (x115 x81)))
(define-fun x277 ((x81 Int) (x107 Int)) Bool (= (x121 x107 x81) (x121 x81 x107)))
(define-fun x64 ((x81 Int) (x107 Int)) Bool (and (>= (x121 x81 x107) 0) (=> (<= 0 x107) (>= x107 (x121 x81 x107))) (=> (>= x81 0) (<= (x121 x81 x107) x81))))
(define-fun x365 ((x81 Int) (x107 Int)) Bool (and (x64 x81 x107) (x277 x81 x107)))
(define-fun x334 ((x81 Int)) Bool (= (x99 x81 26959946667150639794667015087019630673637144422540572481103610249216) (x121 x81 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x135 ((x81 Int)) Bool (and (x334 x81) (x365 x81 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x271 ((x81 Int) (x107 Int)) Bool (and (>= (x99 x81 x107) 0) (< (x99 x81 x107) x107)))
(define-fun x272 ((x81 Int) (x107 Int)) Bool (=> (and (< 0 x107) (>= x81 0)) (= (= (x99 x81 x107) x81) (> x107 x81))))
(define-fun x374 ((x81 Int) (x107 Int)) Bool (=> (and (< 0 x107) (and (> (+ x107 x107) x81) (<= x107 x81))) (= (- x81 x107) (x99 x81 x107))))
(define-fun x197 ((x81 Int)) Bool (= (x99 0 x81) 0))
(define-fun x37 ((x81 Int)) Bool (= (x99 x81 1) 0))
(define-fun x80 ((x81 Int)) Bool (= (x99 x81 x81) 0))
(define-fun x106 ((x81 Int)) Bool (and (x37 x81) (x80 x81) (x197 x81)))
(define-fun x260 ((x81 Int)) Bool (= (x99 x81 1461501637330902918203684832716283019655932542976) (x121 x81 1461501637330902918203684832716283019655932542975)))
(define-fun x159 ((x81 Int)) Bool (and (x365 x81 1461501637330902918203684832716283019655932542975) (x260 x81)))
(define-fun x264 ((x81 Int) (x107 Int)) Bool (=> (and (< 0 x107) (< 0 x81)) (and (>= x81 (x129 x81 x107)) (<= 0 (x129 x81 x107)))))
(define-fun x109 ((x81 Int) (x107 Int)) Bool (=> (and (and (>= x107 1) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x107)) (and (<= 0 x81) (< x81 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x129 x81 x107) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x129 x81 x107)))))
(define-fun x249 ((x81 Int) (x107 Int)) Bool (=> (and (< x107 x81) (> x107 1)) (> x81 (x129 x81 x107))))
(define-fun x391 ((x81 Int) (x107 Int)) Bool (=> (and (< 0 x107) (< 0 x81)) (= (= 0 (x129 x81 x107)) (< x81 x107))))
(define-fun x263 ((x81 Int)) Bool (= 0 (x129 0 x81)))
(define-fun x45 ((x81 Int)) Bool (= (x129 x81 1) x81))
(define-fun x9 ((x81 Int)) Bool (=> (not (= 0 x81)) (= 1 (x129 x81 x81))))
(define-fun x319 ((x81 Int)) Bool (and (x263 x81) (x9 x81) (x45 x81)))
(define-fun x320 ((x81 Int)) Bool (= (x99 x81 256) (x121 x81 255)))
(define-fun x338 ((x81 Int)) Bool (and (x320 x81) (x365 x81 255)))
(define-fun x244 ((x81 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x342 x81 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x342 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x373 ((x81 Int)) Bool (and (= (x342 x81 0) x81) (= (x342 0 x81) x81)))
(define-fun x118 ((x81 Int)) Bool (= (x342 x81 x81) x81))
(define-fun x86 ((x81 Int)) Bool (and (x118 x81) (x244 x81) (x373 x81)))
(define-fun x76 ((x81 Int) (x107 Int)) Bool (= (x342 x81 x107) (x342 x107 x81)))
(define-fun x120 ((x81 Int) (x107 Int)) Bool (and (=> (>= x81 0) (>= (x342 x81 x107) x81)) (=> (>= x107 0) (>= (x342 x81 x107) x107)) (<= (x342 x81 x107) (+ x107 x81))))
(define-fun x73 ((x81 Int) (x107 Int)) Bool (and (x76 x81 x107) (x120 x81 x107)))
(define-fun x358 ((x321 Int)) Int (x310 x321))
(define-fun x172 ((x321 Int)) Int (ite (= 164 x321) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x304 x321)))
(define-fun x343 ((x321 Int)) Int (ite (= 128 x321) 36 (x172 x321)))
(define-fun x223 ((x321 Int)) Int (ite (= 160 x321) x262 (x343 x321)))
(define-fun x84 ((x321 Int)) Int (ite (= 232 x321) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x223 x321)))
(define-fun x183 ((x321 Int)) Int (ite (= 196 x321) 36 (x84 x321)))
(define-fun x286 ((x321 Int)) Int (ite (= x321 228) x181 (x183 x321)))
(define-fun x59 ((x321 Int)) Int (ite x345 (x223 x321) (x286 x321)))
(define-fun x287 ((x321 Int)) Int (ite (= x130 x321) 0 (x59 x321)))
(define-fun x190 ((x321 Int)) Int (ite (= x321 x375) x103 (x287 x321)))
(define-fun x218 ((x321 Int)) Int (ite (= x145 x321) x1 (x190 x321)))
(define-fun x8 ((x321 Int)) Int (ite x331 (x304 x321) (ite x329 (x59 x321) (x218 x321))))
(define-fun x222 ((x321 Int)) Int (ite (= x321 x211) x133 (x8 x321)))
(define-fun x61 ((x321 Int)) Int (ite (= x321 x307) x308 (x222 x321)))
(define-fun x167 ((x321 Int)) Int (ite (= x321 x284) x217 (x61 x321)))
(define-fun x138 ((x321 Int)) Int (ite (= x321 x241) x58 (x167 x321)))
(define-fun x2 ((x321 Int)) Int (ite (and (> (+ x283 x332) x321) (<= x332 x321)) (x310 (+ x188 (- x321 x332))) (x138 x321)))
(define-fun x170 ((x321 Int)) Int (ite (= x321 x339) 0 (x2 x321)))
(define-fun x372 ((x81 Int)) Bool (=> (and (not (= x81 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (< 10000 x81) (not (= 464684736 x81)) (not (= 2510660263 x81)) (not (= x81 752823349)) (not (= 18446744073709551615 x81)) (not (= x81 2544733239)) (not (= x81 1461501637330902918203684832716283019655932542975)) (not (= x81 388749022)) (not (= 292666793 x81)) (not (= 904250603428552709895185118199468575982109441609966099573332780532423983104 x81)) (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 x81)) (not (= 1315048582 x81)) (not (= 2630751253 x81)) (not (= 26959946667150639794667015087019630673637144422540572481103610249215 x81))) (not ((_ is x74) (x174 x81)))))
(assert (x371 x217))
(assert (x371 x22))
(assert (x135 x303))
(assert (x371 x52))
(assert (= true x42))
(assert (x372 x236))
(assert (x39 79228162514264337593543950336))
(assert (x371 x354))
(assert (and (x374 x148 26959946667150639794667015087019630673637144422540572481103610249216) (=> (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (= (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x129 x148 26959946667150639794667015087019630673637144422540572481103610249216)) (x99 x148 26959946667150639794667015087019630673637144422540572481103610249216)) x148)) (x271 x148 26959946667150639794667015087019630673637144422540572481103610249216) (x272 x148 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x319 256))
(assert (=> (<= x36 10000) (= (x174 x36) (x74 x36))))
(assert (x371 x227))
(assert (= (+ (x184 x385) 2) (x184 (x315 x385 2))))
(assert (x371 x137))
(assert (x371 x293))
(assert (x371 x136))
(assert (x106 x148))
(assert (x371 x275))
(assert (= (x184 (x174 x251)) x251))
(assert (x159 x5))
(assert (x388 1461501637330902918203684832716283019655932542975))
(assert (= (x74 752823349) (x174 752823349)))
(assert (=> (<= x23 10000) (= (x174 x23) (x74 x23))))
(assert (and (x140 32 x58) (= (x175 32 x58) (* x58 32)) (x381 32 x58) (and (= (x175 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x58 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x58 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x58 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 32 (- x58 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x175 32 (- x58 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x58 32) (* x58 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x175 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x58))) (x225 32 x58) (x253 32 x58) (x333 32 x58)))
(assert (= (x184 (x74 115792089210356248756420345214020892766250353992003419616917011526809519390720)) 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x371 x257))
(assert (x371 x356))
(assert (x371 x195))
(assert (x371 x290))
(assert (x371 x294))
(assert (x371 x1))
(assert (=> (>= 10000 x356) (= (x74 x356) (x174 x356))))
(assert (x371 x236))
(assert (=> (<= x137 10000) (= (x74 x137) (x174 x137))))
(assert (x371 x88))
(assert (x371 x234))
(assert (= (x74 18446744073709551615) (x174 18446744073709551615)))
(assert (= (x184 (x174 x363)) x363))
(assert (x371 x322))
(assert (= (x184 (x174 x23)) x23))
(assert (x371 x204))
(assert (= 2510660263 (x184 (x74 2510660263))))
(assert (= (x119 (* 79228162514264337593543950336 x10)) (x77 x10 96)))
(assert (x371 x389))
(assert (x371 x103))
(assert (x371 x158))
(assert (x371 x146))
(assert (= 0 (x304 x145)))
(assert (= (x304 228) 0))
(assert (=> (>= 10000 x276) (= (x74 x276) (x174 x276))))
(assert (x371 x5))
(assert (x372 x110))
(assert (x372 x164))
(assert (= (x184 (x174 x139)) x139))
(assert (= x331 (and x42 x382)))
(assert (x39 (x114 2 x89)))
(assert (=> (>= 10000 x19) (= (x74 x19) (x174 x19))))
(assert (= (x174 26959946667150639794667015087019630673637144422540572481103610249215) (x74 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (= (+ (x184 x27) 2) (x184 (x315 x27 2))))
(assert (x371 x48))
(assert (x371 x328))
(assert (x371 x192))
(assert (= (x184 (x174 x356)) x356))
(assert (= (x184 (x315 x189 1)) (+ (x184 x189) 1)))
(assert (x371 x369))
(assert (x371 x46))
(assert (x371 x145))
(assert (= x305 (x184 (x174 x305))))
(assert (x371 x265))
(assert (x371 x43))
(assert (= (and (not x382) x42) x132))
(assert (x106 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x371 x375))
(assert (x372 x364))
(assert (x371 x55))
(assert (= (x119 (ite (> 256 x200) (x114 2 x200) 0)) (x77 1 x200)))
(assert (x371 x280))
(assert (x371 x185))
(assert (x371 x340))
(assert (x39 32))
(assert (x372 x224))
(assert (= x57 (or x229 x12)))
(assert (= (+ (x184 x324) 3) (x184 (x315 x324 3))))
(assert (x371 x339))
(assert (= (x184 (x74 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x371 x179))
(assert (=> (<= x95 10000) (= (x74 x95) (x174 x95))))
(assert (x371 x101))
(assert (x319 x133))
(assert (x371 x283))
(assert (x372 x322))
(assert (and (x374 x303 26959946667150639794667015087019630673637144422540572481103610249216) (=> (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (= (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x129 x303 26959946667150639794667015087019630673637144422540572481103610249216)) (x99 x303 26959946667150639794667015087019630673637144422540572481103610249216)) x303)) (x271 x303 26959946667150639794667015087019630673637144422540572481103610249216) (x272 x303 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x371 x188))
(assert (= x155 (or x345 x240)))
(assert (x371 x194))
(assert (= x133 (x184 (x174 x133))))
(assert (x388 x148))
(assert (=> (<= x363 10000) (= (x74 x363) (x174 x363))))
(assert (x371 x325))
(assert (= (x174 904250603428552709895185118199468575982109441609966099573332780532423983104) (x74 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x371 x378))
(assert (x371 x160))
(assert (= (x184 (x174 x19)) x19))
(assert (= x125 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x216) (= (< 0 (x366 (x174 x23))) x313) (>= x237 0) (< 0 x346) (= false x351) (>= x216 0) (< x326 2630751253) (>= 1461501637330902918203684832716283019655932542975 x367) x69 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x294) (= x161 (x268 (x174 x23))) (< 0 x204) (= x146 4) (<= x237 1461501637330902918203684832716283019655932542975) (>= x367 0) (= x186 (x350 (x174 x364) x289 0)) (<= 0 x72) (not (= x326 2510660263)) (>= 1461501637330902918203684832716283019655932542975 x72) (not (= x363 x23)) (= x289 (x350 (x174 x36) (x74 1) 0)) (<= x23 1461501637330902918203684832716283019655932542975) (= x209 false) (= 2544733239 x326) (not (= x363 x346)) (= x295 (> (x366 (x174 x363)) 0)) (= (< 0 (x366 (x174 x346))) x69) (= (x268 (x174 x363)) x40) (= x294 (x359 x91)) (= x261 (x268 (x174 x346))) (= x294 x41) (= x204 (x366 (x174 x23))) (<= x36 1461501637330902918203684832716283019655932542975) (<= x363 1461501637330902918203684832716283019655932542975) (<= 0 x161) (= x72 x10) (< 0 x23) (<= 0 x40) (= false x278) (>= x294 0) (= 388749022 x24) (= x36 x367) x313 (not (= x346 x23)) (not (> 2510660263 x326)) (= x364 x360) (= x91 (x315 x186 1)) (>= x261 0) (= x62 x216) x295 (<= x346 1461501637330902918203684832716283019655932542975) (< 0 x363) (= x11 false)) (and (and (not (= 464684736 x48)) (= 1315048582 x48) (not (= 388749022 x48)) (<= 0 x158) (>= 1461501637330902918203684832716283019655932542975 x95) (= x65 (x350 (x174 x95) (x74 1) 0)) (= (x171 x267) x158) (= x267 (x315 x385 2)) (not (= 292666793 x48)) (<= x158 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x158 x270) (= x360 x19) (< x48 2510660263) (= x41 x312) (= x385 (x350 (x174 x19) x65 0)) (not (= 752823349 x48)) (> x179 0) (= x179 (x366 (x174 x23))) (= x367 x95)) (and (and (= (x156 x187) x4) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (> x55 0) (= (x350 (x174 x110) (x74 1) 0) x163) (< x293 2630751253) (not (> 2510660263 x293)) (= x187 (x350 (x174 x203) x163 0)) (= x360 x203) (= x270 x47) (= (> x47 x312) x376) (= x367 x110) (>= x4 0) (= 2510660263 x293) (= x387 x4) (= (x366 (x174 x23)) x55) (<= x110 1461501637330902918203684832716283019655932542975)) (and (and (= x239 (x350 (x174 x236) x68 0)) (<= 0 x93) (= x127 0) (= x15 (x315 x239 1)) (not (= 2510660263 x344)) (= (x359 x15) x93) (= x367 x356) (= x195 x93) (not (< x344 2510660263)) (= x92 (= 0 x227)) (< 0 x25) (= x360 x236) (< x344 2630751253) (<= x356 1461501637330902918203684832716283019655932542975) (= x25 (x366 (x174 x23))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x93) (= x68 (x350 (x174 x356) (x74 1) 0)) (= x344 2544733239) (= x227 x387)) (and (and (not (or (and (> 128 x112) (= (<= x112 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x112))) (= x10 x22) (= (x310 x282) x58) (= x134 x311) (= x131 x98) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x33) (= x182 0) (= x279 x220) (= (x232 (+ x188 x199)) x49) (not (< 18446744073709551615 x14)) (= (and x291 x298) x330) (= (x119 (* x58 32)) x199) (>= 255 x16) (not (< 18446744073709551615 x58)) (>= x16 0) (= (= x134 0) x291) (not (= x33 2)) (and (= (<= x357 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x357 131)) (= x390 x46) (> x370 0) (not (< x357 4)) (= x14 x281) (= (< 0 x16) x382) (<= 0 x22) (= (or x376 x330) x361) (= x16 (x157 x35)) (= x188 (x232 (+ x282 32))) x361 (= x266 x131) (= x35 (x350 (x174 x5) (x74 4) 0)) (<= 0 x266) (not (> x49 x357)) (not (= x79 292666793)) (<= x266 1461501637330902918203684832716283019655932542975) (= x282 (x232 (+ x281 4))) (>= x33 0) (= x213 x133) (= x112 (x238 (- x357 4))) (= x290 x6) (< x16 256) (= x160 x5) (>= x250 0) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x357) (<= x60 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x357 x60)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x357) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x60))) (= x257 x5) (<= x22 1461501637330902918203684832716283019655932542975) (<= x250 1461501637330902918203684832716283019655932542975) (= (x232 (+ x282 31)) x60) (= x370 (x366 (x174 x23))) (> 2510660263 x79) (= x46 x219) (<= x5 1461501637330902918203684832716283019655932542975) (= 388749022 x79) (= x279 0)) (and (= x274 (x350 (x174 x251) (x74 1) 0)) (= x195 x234) (= (and x108 x92) x298) (= x108 (= x234 0)) (< 0 x302) (not (= 388749022 x44)) (<= x243 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x44 464684736)) (= (x171 x380) x243) (not (= 292666793 x44)) (= (x350 (x174 x123) x274 0) x323) (> 2510660263 x44) (= x243 x311) (<= 0 x243) (= x380 (x315 x323 2)) (= x360 x123) (= x251 x367) (= 1315048582 x44) (not (= x44 752823349)) (= (x366 (x174 x23)) x302) (<= x251 1461501637330902918203684832716283019655932542975) (= 0 x51))))))) (and (=> (and (not x382) (and (and (= x104 (x231 904250603428552709895185118199468575982109441609966099573332780532423983104)) (= x206 (x121 26959946667150639794667015087019630673637144422540572481103610249215 x148)) (= x148 (x343 160)) (= x262 (x232 (+ x206 904250603428552709895185118199468575982109441609966099573332780532423983104))) (= (ite (> (ite x104 1 0) 0) 1 0) x306) (= x31 (= x306 0))) (or (and (not x31) (and (= x214 (x121 26959946667150639794667015087019630673637144422540572481103610249215 x32)) (= x32 (x183 228)) (= (= 0 x212) x348) (= (ite x355 1 0) x13) (= x375 264) (= (ite x347 x21 (ite (< 0 x13) 1 0)) x212) (= (ite x348 1 0) x54) (= 1 x21) (= x347 false) (= (x232 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x214)) x181) (= x355 (x231 115792089210356248756420345214020892766250353992003419616917011526809519390720)))) (and x31 (and (= x375 196) (= x306 x54)))))) x143) (=> (and x382 (= 128 x284)) x154)))))
(assert (x372 x276))
(assert (= x38 (and x105 x18)))
(assert (x371 x357))
(assert (= (x184 (x74 904250603428552709895185118199468575982109441609966099573332780532423983104)) 904250603428552709895185118199468575982109441609966099573332780532423983104))
(assert (x135 x148))
(assert (= (x184 (x74 2544733239)) 2544733239))
(assert (x371 x139))
(assert (= x87 (x184 (x174 x87))))
(assert (x371 x51))
(assert (x371 x242))
(assert (= x168 (and (not x362) x155)))
(assert (x371 x85))
(assert (not x125))
(assert (x371 x201))
(assert (x371 x255))
(assert (x372 x139))
(assert (x371 x312))
(assert (x371 x199))
(assert (x388 x32))
(assert (x371 x200))
(assert (x371 x281))
(assert (x371 x276))
(assert (=> (>= 10000 x5) (= (x174 x5) (x74 x5))))
(assert (= (x184 (x174 x328)) x328))
(assert (x371 x181))
(assert (x371 x335))
(assert (x371 x270))
(assert (let ((x81 (ite (< x200 256) (x114 2 x200) 0))) (and (x374 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x99 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x81)) (x271 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x272 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x371 x110))
(assert (= (x184 (x315 x142 1)) (+ 1 (x184 x142))))
(assert (x371 x211))
(assert (x372 x23))
(assert (x371 x102))
(assert (=> (<= (x215 x308 96) 10000) (= (x74 (x215 x308 96)) (x174 (x215 x308 96)))))
(assert (= x317 (=> (and (= x242 (x170 x241)) (= (not (> x242 1)) x207)) (and (=> (= x56 x169) x297) x207))))
(assert (= (x74 1461501637330902918203684832716283019655932542975) (x174 1461501637330902918203684832716283019655932542975)))
(assert (x372 x305))
(assert (x371 x370))
(assert (x106 x32))
(assert (= (x184 (x174 x276)) x276))
(assert (= (x184 (x174 (x215 x308 96))) (x215 x308 96)))
(assert (and (x374 x133 256) (=> (> 256 0) (= (+ (* 256 (x129 x133 256)) (x99 x133 256)) x133)) (x271 x133 256) (x272 x133 256)))
(assert (x371 x266))
(assert (= (x74 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x174 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x372 x369))
(assert (x371 x33))
(assert (x106 1461501637330902918203684832716283019655932542976))
(assert (= (x129 x133 256) (x215 x133 8)))
(assert (=> (<= x46 10000) (= (x174 x46) (x74 x46))))
(assert (x371 x327))
(assert (= (x74 2510660263) (x174 2510660263)))
(assert (let ((x81 (* 79228162514264337593543950336 x10))) (and (x374 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x99 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x81)) (x271 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x272 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (and x132 (not x31)) x240))
(assert (x371 x29))
(assert (= (x184 (x174 x340)) x340))
(assert (= x322 (x184 (x174 x322))))
(assert (x371 x262))
(assert (= (x184 (x174 x201)) x201))
(assert (x371 x352))
(assert (and (x374 x32 26959946667150639794667015087019630673637144422540572481103610249216) (=> (> 26959946667150639794667015087019630673637144422540572481103610249216 0) (= (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x129 x32 26959946667150639794667015087019630673637144422540572481103610249216)) (x99 x32 26959946667150639794667015087019630673637144422540572481103610249216)) x32)) (x271 x32 26959946667150639794667015087019630673637144422540572481103610249216) (x272 x32 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (= (x174 1315048582) (x74 1315048582)))
(assert (x371 x58))
(assert (x106 x133))
(assert (= (+ 1 (x184 x210)) (x184 (x315 x210 1))))
(assert (let ((x107 (x114 2 x89))) (and (x140 1 x107) (= (x175 1 x107) (* x107 1)) (x381 1 x107) (and (= (x175 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 1 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x175 1 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x107 1) (* x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x175 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x107))) (x225 1 x107) (x253 1 x107) (x333 1 x107))))
(assert (=> (>= 10000 x280) (= (x174 x280) (x74 x280))))
(assert (x371 x303))
(assert (= x229 (and x144 (not x301))))
(assert (x371 x89))
(assert (x106 (* x10 79228162514264337593543950336)))
(assert (x388 x198))
(assert (x319 x308))
(assert (=> (>= 10000 x340) (= (x74 x340) (x174 x340))))
(assert (x371 x259))
(assert (x371 x292))
(assert (x371 x341))
(assert (x371 x87))
(assert (x371 x344))
(assert (x371 x123))
(assert (x371 x300))
(assert (= 1315048582 (x184 (x74 1315048582))))
(assert (x371 x19))
(assert (x388 x133))
(assert (x371 x95))
(assert (x371 x131))
(assert (and (x140 x10 79228162514264337593543950336) (= (x175 x10 79228162514264337593543950336) (* 79228162514264337593543950336 x10)) (x381 x10 79228162514264337593543950336) (and (= (x175 (- x10 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (- (* (- 115792089237316195423570985008687907853269984665561335876943319670319585689600) x10) (- 13407807929942597099574024998205846127479365820583219383259601157675320746492338629038688038210230303195081502828938359349399943579666495733993146259865600))) (= (* x10 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (x175 x10 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600))) (= (- (* 79228162514264337593543950336 x10) 9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496) (x175 (- x10 115792089237316195423570985008687907853269984665640564039457584007913129639936) 79228162514264337593543950336))) (x225 x10 79228162514264337593543950336) (x253 x10 79228162514264337593543950336) (x333 x10 79228162514264337593543950336)))
(assert (= (x74 464684736) (x174 464684736)))
(assert (x371 x32))
(assert (= (x184 (x174 x280)) x280))
(assert (= (x129 x308 79228162514264337593543950336) (x215 x308 96)))
(assert (= (x184 (x315 x186 1)) (+ (x184 x186) 1)))
(assert (and (= 324518553658426726783156020576256 (x114 2 108)) (= (x114 2 23) 8388608) (= (x114 2 187) 196159429230833773869868419475239575503198607639501078528) (= 10384593717069655257060992658440192 (x114 2 113)) (= 411376139330301510538742295639337626245683966408394965837152256 (x114 2 208)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x114 2 244)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x114 2 242)) (= 8796093022208 (x114 2 43)) (= 81129638414606681695789005144064 (x114 2 106)) (= 44601490397061246283071436545296723011960832 (x114 2 145)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x114 2 236)) (= (x114 2 99) 633825300114114700748351602688) (= 766247770432944429179173513575154591809369561091801088 (x114 2 179)) (= 365375409332725729550921208179070754913983135744 (x114 2 158)) (= 348449143727040986586495598010130648530944 (x114 2 138)) (= 12855504354071922204335696738729300820177623950262342682411008 (x114 2 203)) (= (x114 2 88) 309485009821345068724781056) (= 1125899906842624 (x114 2 50)) (= (x114 2 97) 158456325028528675187087900672) (= 52656145834278593348959013841835216159447547700274555627155488768 (x114 2 215)) (= 1099511627776 (x114 2 40)) (= 1393796574908163946345982392040522594123776 (x114 2 140)) (= (x114 2 21) 2097152) (= (x114 2 54) 18014398509481984) (= (x114 2 39) 549755813888) (= (x114 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 5708990770823839524233143877797980545530986496 (x114 2 152)) (= (x114 2 117) 166153499473114484112975882535043072) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x114 2 230)) (= 178405961588244985132285746181186892047843328 (x114 2 147)) (= (x114 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 4294967296 (x114 2 32)) (= 11150372599265311570767859136324180752990208 (x114 2 143)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x114 2 239)) (= (x114 2 94) 19807040628566084398385987584) (= (x114 2 38) 274877906944) (= (x114 2 124) 21267647932558653966460912964485513216) (= 32 (x114 2 5)) (= (x114 2 110) 1298074214633706907132624082305024) (= 1361129467683753853853498429727072845824 (x114 2 130)) (= (x114 2 67) 147573952589676412928) (= (x114 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x114 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x114 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 49039857307708443467467104868809893875799651909875269632 (x114 2 185)) (= (x114 2 166) 93536104789177786765035829293842113257979682750464) (= 3291009114642412084309938365114701009965471731267159726697218048 (x114 2 211)) (= (x114 2 189) 784637716923335095479473677900958302012794430558004314112) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x114 2 237)) (= 19342813113834066795298816 (x114 2 84)) (= 5192296858534827628530496329220096 (x114 2 112)) (= (x114 2 129) 680564733841876926926749214863536422912) (= 256 (x114 2 8)) (= 21778071482940061661655974875633165533184 (x114 2 134)) (= 649037107316853453566312041152512 (x114 2 109)) (= (x114 2 48) 281474976710656) (= (x114 2 87) 154742504910672534362390528) (= 4398046511104 (x114 2 42)) (= (x114 2 83) 9671406556917033397649408) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x114 2 227)) (= (x114 2 121) 2658455991569831745807614120560689152) (= 730750818665451459101842416358141509827966271488 (x114 2 159)) (= (x114 2 31) 2147483648) (= 401734511064747568885490523085290650630550748445698208825344 (x114 2 198)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x114 2 216)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x114 2 245)) (= (x114 2 17) 131072) (= 18446744073709551616 (x114 2 64)) (= (x114 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x114 2 168) 374144419156711147060143317175368453031918731001856) (= (x114 2 96) 79228162514264337593543950336) (= (x114 2 86) 77371252455336267181195264) (= (x114 2 175) 47890485652059026823698344598447161988085597568237568) (= 12259964326927110866866776217202473468949912977468817408 (x114 2 183)) (= (x114 2 169) 748288838313422294120286634350736906063837462003712) (= 2048 (x114 2 11)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x114 2 213)) (= (x114 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x114 2 79) 604462909807314587353088) (= (x114 2 114) 20769187434139310514121985316880384) (= (x114 2 65) 36893488147419103232) (= (x114 2 60) 1152921504606846976) (= 40564819207303340847894502572032 (x114 2 105)) (= 4503599627370496 (x114 2 52)) (= (x114 2 2) 4) (= 102844034832575377634685573909834406561420991602098741459288064 (x114 2 206)) (= (x114 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 128 (x114 2 7)) (= (x114 2 69) 590295810358705651712) (= 3213876088517980551083924184682325205044405987565585670602752 (x114 2 201)) (= (x114 2 101) 2535301200456458802993406410752) (= 5986310706507378352962293074805895248510699696029696 (x114 2 172)) (= 151115727451828646838272 (x114 2 77)) (= (x114 2 182) 6129982163463555433433388108601236734474956488734408704) (= 11692013098647223345629478661730264157247460343808 (x114 2 163)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x114 2 233)) (= (x114 2 61) 2305843009213693952) (= 4951760157141521099596496896 (x114 2 92)) (= 10633823966279326983230456482242756608 (x114 2 123)) (= 5575186299632655785383929568162090376495104 (x114 2 142)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x114 2 241)) (= (x114 2 24) 16777216) (= 170141183460469231731687303715884105728 (x114 2 127)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x114 2 246)) (= 5444517870735015415413993718908291383296 (x114 2 132)) (= (x114 2 131) 2722258935367507707706996859454145691648) (= (x114 2 28) 268435456) (= (x114 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x114 2 151) 2854495385411919762116571938898990272765493248) (= (x114 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 2475880078570760549798248448 (x114 2 91)) (= (x114 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x114 2 167) 187072209578355573530071658587684226515959365500928) (= (x114 2 126) 85070591730234615865843651857942052864) (= 3064991081731777716716694054300618367237478244367204352 (x114 2 181)) (= (x114 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x114 2 171) 2993155353253689176481146537402947624255349848014848) (= (x114 2 71) 2361183241434822606848) (= (x114 2 78) 302231454903657293676544) (= (x114 2 59) 576460752303423488) (= (x114 2 174) 23945242826029513411849172299223580994042798784118784) (= 10889035741470030830827987437816582766592 (x114 2 133)) (= (x114 2 156) 91343852333181432387730302044767688728495783936) (= 4722366482869645213696 (x114 2 72)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x114 2 251)) (= (x114 2 162) 5846006549323611672814739330865132078623730171904) (= 4096 (x114 2 12)) (= (x114 2 73) 9444732965739290427392) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x114 2 249)) (= 24519928653854221733733552434404946937899825954937634816 (x114 2 184)) (= (x114 2 41) 2199023255552) (= (x114 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 22835963083295358096932575511191922182123945984 (x114 2 154)) (= (x114 2 29) 536870912) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x114 2 221)) (= 1606938044258990275541962092341162602522202993782792835301376 (x114 2 200)) (= 11417981541647679048466287755595961091061972992 (x114 2 153)) (= (x114 2 10) 1024) (= 20282409603651670423947251286016 (x114 2 104)) (= (x114 2 120) 1329227995784915872903807060280344576) (= (x114 2 4) 16) (= 356811923176489970264571492362373784095686656 (x114 2 148)) (= (x114 2 102) 5070602400912917605986812821504) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x114 2 225)) (= 332306998946228968225951765070086144 (x114 2 118)) (= (x114 2 35) 34359738368) (= (x114 2 188) 392318858461667547739736838950479151006397215279002157056) (= 2787593149816327892691964784081045188247552 (x114 2 141)) (= (x114 2 33) 8589934592) (= (x114 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 2596148429267413814265248164610048 (x114 2 111)) (= (x114 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x114 2 68) 295147905179352825856) (= (x114 2 160) 1461501637330902918203684832716283019655932542976) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x114 2 220)) (= (x114 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x114 2 80) 1208925819614629174706176) (= (x114 2 115) 41538374868278621028243970633760768) (= (x114 2 128) 340282366920938463463374607431768211456) (= (x114 2 46) 70368744177664) (= (x114 2 149) 713623846352979940529142984724747568191373312) (= 6582018229284824168619876730229402019930943462534319453394436096 (x114 2 212)) (= 23384026197294446691258957323460528314494920687616 (x114 2 164)) (= (x114 2 6) 64) (= (x114 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x114 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 38685626227668133590597632 (x114 2 85)) (= 18889465931478580854784 (x114 2 74)) (= (x114 2 170) 1496577676626844588240573268701473812127674924007424) (= 43556142965880123323311949751266331066368 (x114 2 135)) (= (x114 2 93) 9903520314283042199192993792) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x114 2 231)) (= 65536 (x114 2 16)) (= 144115188075855872 (x114 2 57)) (= (x114 2 82) 4835703278458516698824704) (= (x114 2 19) 524288) (= (x114 2 125) 42535295865117307932921825928971026432) (= (x114 2 90) 1237940039285380274899124224) (= 39614081257132168796771975168 (x114 2 95)) (= (x114 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 4611686018427387904 (x114 2 62)) (= 162259276829213363391578010288128 (x114 2 107)) (= 1427247692705959881058285969449495136382746624 (x114 2 150)) (= 1569275433846670190958947355801916604025588861116008628224 (x114 2 190)) (= (x114 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 36028797018963968 (x114 2 55)) (= 46768052394588893382517914646921056628989841375232 (x114 2 165)) (= (x114 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x114 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 75557863725914323419136 (x114 2 76)) (= 618970019642690137449562112 (x114 2 89)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x114 2 217)) (= 67108864 (x114 2 26)) (= (x114 2 137) 174224571863520493293247799005065324265472) (= (x114 2 116) 83076749736557242056487941267521536) (= 1267650600228229401496703205376 (x114 2 100)) (= 562949953421312 (x114 2 49)) (= (x114 2 34) 17179869184) (= (x114 2 30) 1073741824) (= 134217728 (x114 2 27)) (= (x114 2 18) 262144) (= 10141204801825835211973625643008 (x114 2 103)) (= (x114 2 63) 9223372036854775808) (= (x114 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 32768 (x114 2 15)) (= 87112285931760246646623899502532662132736 (x114 2 136)) (= 1048576 (x114 2 20)) (= 288230376151711744 (x114 2 58)) (= 9007199254740992 (x114 2 53)) (= (x114 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x114 2 14) 16384) (= (x114 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 17592186044416 (x114 2 44)) (= (x114 2 161) 2923003274661805836407369665432566039311865085952) (= (x114 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x114 2 3) 8) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x114 2 255)) (= 6427752177035961102167848369364650410088811975131171341205504 (x114 2 202)) (= 72057594037927936 (x114 2 56)) (= (x114 2 66) 73786976294838206464) (= 100433627766186892221372630771322662657637687111424552206336 (x114 2 196)) (= (x114 2 98) 316912650057057350374175801344) (= (x114 2 155) 45671926166590716193865151022383844364247891968) (= (x114 2 146) 89202980794122492566142873090593446023921664) (= (x114 2 157) 182687704666362864775460604089535377456991567872) (= (x114 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x114 2 47) 140737488355328) (= 2 (x114 2 1)) (= (x114 2 178) 383123885216472214589586756787577295904684780545900544) (= 68719476736 (x114 2 36)) (= (x114 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 137438953472 (x114 2 37)) (= (x114 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 4194304 (x114 2 22)) (= 1180591620717411303424 (x114 2 70)) (= (x114 2 13) 8192) (= (x114 2 45) 35184372088832) (= (x114 2 25) 33554432) (= 696898287454081973172991196020261297061888 (x114 2 139)) (= 95780971304118053647396689196894323976171195136475136 (x114 2 176)) (= 512 (x114 2 9)) (= (x114 2 0) 1) (= 5316911983139663491615228241121378304 (x114 2 122)) (= 2417851639229258349412352 (x114 2 81)) (= 37778931862957161709568 (x114 2 75)) (= (x114 2 144) 22300745198530623141535718272648361505980416) (= (x114 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x114 2 186) 98079714615416886934934209737619787751599303819750539264) (= 25108406941546723055343157692830665664409421777856138051584 (x114 2 194)) (= (x114 2 51) 2251799813685248) (= (x114 2 119) 664613997892457936451903530140172288) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x114 2 240)) (= (x114 2 173) 11972621413014756705924586149611790497021399392059392) (= (x114 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x114 2 177) 191561942608236107294793378393788647952342390272950272) (= 6277101735386680763835789423207666416102355444464034512896 (x114 2 192))))
(assert (x371 x4))
(assert (x371 x282))
(assert (= x346 (x184 (x174 x346))))
(assert (x371 x72))
(assert (x371 x318))
(assert (x371 x305))
(assert (x371 x25))
(assert (x371 x36))
(assert (= (+ (x184 x323) 2) (x184 (x315 x323 2))))
(assert (= 1461501637330902918203684832716283019655932542975 (x184 (x74 1461501637330902918203684832716283019655932542975))))
(assert (x371 x311))
(assert (=> (<= x314 10000) (= (x74 x314) (x174 x314))))
(assert (x371 x307))
(assert (x371 x148))
(assert (and (x109 x308 79228162514264337593543950336) (x391 x308 79228162514264337593543950336) (=> (and (< 0 79228162514264337593543950336) (> x308 0)) (and (> (* (x129 x308 79228162514264337593543950336) 79228162514264337593543950336) (- x308 79228162514264337593543950336)) (<= (* (x129 x308 79228162514264337593543950336) 79228162514264337593543950336) x308))) (= (* (x129 x308 79228162514264337593543950336) 79228162514264337593543950336) (- x308 (x121 79228162514264337593543950335 x308))) (x264 x308 79228162514264337593543950336) (x249 x308 79228162514264337593543950336)))
(assert (x371 x364))
(assert (x371 x241))
(assert (x371 x75))
(assert (= (x184 (x315 x245 2)) (+ (x184 x245) 2)))
(assert (= (x74 388749022) (x174 388749022)))
(assert (x338 x133))
(assert (=> (<= x139 10000) (= (x174 x139) (x74 x139))))
(assert (x371 x117))
(assert (x388 255))
(assert (x371 x205))
(assert (x371 x49))
(assert (x371 x214))
(assert (=> (<= x305 10000) (= (x74 x305) (x174 x305))))
(assert (= x18 (and x301 x144)))
(assert (x371 x149))
(assert (x371 x273))
(assert (x372 x314))
(assert (x371 x40))
(assert (=> (>= 10000 x164) (= (x174 x164) (x74 x164))))
(assert (x39 (x114 2 x200)))
(assert (=> (<= x111 10000) (= (x174 x111) (x74 x111))))
(assert (= (or x168 x329) x288))
(assert (x371 x237))
(assert (= (x184 (x74 2630751253)) 2630751253))
(assert (x371 x93))
(assert (x371 x28))
(assert (x388 x303))
(assert (=> (<= x110 10000) (= (x174 x110) (x74 x110))))
(assert (x371 x220))
(assert (= (x184 (x74 18446744073709551615)) 18446744073709551615))
(assert (= (or x38 x393) x12))
(assert (x106 256))
(assert (= (x174 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x74 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x364 (x184 (x174 x364))))
(assert (x371 x127))
(assert (= (x119 (ite (< x89 256) (x114 2 x89) 0)) (x77 1 x89)))
(assert (x371 x182))
(assert (x371 x94))
(assert (=> (>= 10000 x133) (= (x174 x133) (x74 x133))))
(assert (x371 x60))
(assert (x371 x79))
(assert (x371 x21))
(assert (= 464684736 (x184 (x74 464684736))))
(assert (x371 x203))
(assert (= (x74 2544733239) (x174 2544733239)))
(assert (= x36 (x184 (x174 x36))))
(assert (= x154 (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x386) (= (x232 (+ 32 x284)) x211) (> x386 0) (= x217 (x238 (- x389 32))) (= (> x354 0) x301) (= x324 (x350 (x174 x46) x141 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x194) (= (< x290 x194) x233) (= x328 (x215 x133 8)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x224) (= (x170 x241) x354) (= x308 (x77 x10 96)) (= x283 (x119 (* 32 x58))) (= x305 (x121 1461501637330902918203684832716283019655932542975 x5)) (= x392 (x315 x324 3)) (= x386 (x156 x324)) (= (x232 (+ x211 32)) x307) (= (x77 1 x200) x198) (= (x165 (x74 52) (x74 32) (x174 x133) (x174 (x215 x308 96)) 0) x177) (= x94 (x171 x235)) (= x224 (x156 x324)) (= (x350 (x174 x305) (x74 1) 0) x141) x384 (= (x63 x316) x85) (= x384 (= 0 x88)) (= (x232 (+ x307 20)) x241) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x85) (= x210 (x315 x324 1)) (= x389 (x238 (- x241 x284))) (<= x94 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x235 (x315 x210 1)) (<= 0 x194) (>= x94 0) (= x332 (x232 (+ x241 32))) (>= x386 0) (= x200 (x121 255 x133)) (not (< x94 x290)) (not x233) (= (x350 (x174 x328) x392 0) x316) (<= 0 x85) (<= 0 x224) (= (x359 x210) x194) (= (x232 (+ x332 x283)) x339) (= (x121 x85 x198) x88)) (and (=> (and (= x56 x177) (not x301)) x297) (=> (and (and (and (= (x170 x102) x111) (< 0 x265) (= x102 (x232 (+ 32 x241))) (= x105 (< (x184 x177) x111)) (= x265 (x170 x241))) (or (and (and (= x169 x178) (= x178 (x350 (x174 x111) x177 0))) (not x105)) (and (and (= x7 (x350 x177 (x174 x111) 0)) (= x169 x7)) x105))) x301) x317)))))
(assert (x371 x126))
(assert (= x329 (and x362 x155)))
(assert (= x393 (and x18 (not x105))))
(assert (x371 x256))
(assert (x371 x161))
(assert (x106 x303))
(assert (x371 x224))
(assert (x371 x243))
(assert (x371 x284))
(assert (x372 x87))
(assert (x106 x5))
(assert (x372 (x215 x308 96)))
(assert (x371 x314))
(assert (=> (<= x224 10000) (= (x174 x224) (x74 x224))))
(assert (x86 x29))
(assert (x371 x346))
(assert (x371 x130))
(assert (x371 x299))
(assert (x371 x133))
(assert (= x111 (x184 (x174 x111))))
(assert (x371 x16))
(assert (= 292666793 (x184 (x74 292666793))))
(assert (= (or x288 x331) x144))
(assert (= (x184 (x174 x110)) x110))
(assert (= (x184 (x74 26959946667150639794667015087019630673637144422540572481103610249215)) 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x371 x306))
(assert (x106 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x372 x203))
(assert (x371 x44))
(assert (x106 (ite (< x200 256) (x114 2 x200) 0)))
(assert (= (x184 (x174 x369)) x369))
(assert (x372 x111))
(assert (x371 x363))
(assert (x319 79228162514264337593543950336))
(assert (= (x184 (x174 x5)) x5))
(assert (x371 x251))
(assert (x372 x346))
(assert (x372 x95))
(assert (x371 x258))
(assert (x371 x202))
(assert (x371 x230))
(assert (= (x174 (x184 x177)) x177))
(assert (= (x74 2630751253) (x174 2630751253)))
(assert (=> (<= x87 10000) (= (x174 x87) (x74 x87))))
(assert (x371 x98))
(assert (x372 x137))
(assert (x371 x116))
(assert (x372 x5))
(assert (x365 x85 x198))
(assert (= x203 (x184 (x174 x203))))
(assert (x39 x10))
(assert (x372 x36))
(assert (x371 x302))
(assert (x371 x111))
(assert (x371 x150))
(assert (x388 x85))
(assert (x371 x6))
(assert (= 388749022 (x184 (x74 388749022))))
(assert (x372 x328))
(assert (= x224 (x184 (x174 x224))))
(assert (= x164 (x184 (x174 x164))))
(assert (x371 x332))
(assert (= x95 (x184 (x174 x95))))
(assert (x372 x133))
(assert (x372 x123))
(assert (x371 x14))
(assert (= x123 (x184 (x174 x123))))
(assert (x371 x153))
(assert (x372 x46))
(assert (x388 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (and (x374 x5 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x129 x5 1461501637330902918203684832716283019655932542976)) (x99 x5 1461501637330902918203684832716283019655932542976)) x5)) (x271 x5 1461501637330902918203684832716283019655932542976) (x272 x5 1461501637330902918203684832716283019655932542976)))
(assert (and (= 81 (x175 27 3)) (= (x175 3 3) 9) (= (x175 9 9) 81) (= (x175 9 3) 27)))
(assert (=> (<= x203 10000) (= (x74 x203) (x174 x203))))
(assert (x371 x308))
(assert (x371 x326))
(assert (x372 x363))
(assert (x371 x41))
(assert (x371 x216))
(assert (x39 1))
(assert (= 0 (x304 x102)))
(assert (x371 x367))
(assert (x371 x296))
(assert (x371 x112))
(assert (x371 x206))
(assert (=> (<= x123 10000) (= (x74 x123) (x174 x123))))
(assert (x371 x360))
(assert (and (x109 x133 256) (x391 x133 256) (=> (and (< 0 256) (> x133 0)) (and (> (* (x129 x133 256) 256) (- x133 256)) (<= (* (x129 x133 256) 256) x133))) (= (* (x129 x133 256) 256) (- x133 (x121 255 x133))) (x264 x133 256) (x249 x133 256)))
(assert (=> (>= 10000 x364) (= (x174 x364) (x74 x364))))
(assert (x372 x19))
(assert (x371 x390))
(assert (= x345 (and x132 x31)))
(assert (= (x184 (x315 x239 1)) (+ (x184 x239) 1)))
(assert (= (x74 292666793) (x174 292666793)))
(assert (let ((x107 (x114 2 x200))) (and (x140 1 x107) (= (x175 1 x107) (* x107 1)) (x381 1 x107) (and (= (x175 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* 1 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x175 1 (- x107 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x107 1) (* x107 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x175 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x107))) (x225 1 x107) (x253 1 x107) (x333 1 x107))))
(assert (x371 x226))
(assert (x372 x201))
(assert (= (x184 (x174 x314)) x314))
(assert (x371 x54))
(assert (x135 x32))
(assert (x371 x387))
(assert (x371 x250))
(assert (x371 x386))
(assert (x372 x280))
(assert (= x143 (=> (and (= (= 0 x54) x362) (or (and (and (= x136 x75) (= (x232 (+ x52 904250603428552709895185118199468575982109441609966099573332780532423983104)) x1) (= (x232 (+ x375 32)) x145) (= x130 (x232 (+ 36 x375))) (= x150 (ite x193 1 0)) (= (x238 (- x341 32)) x103) (= (x190 x145) x303) (= x52 (x121 26959946667150639794667015087019630673637144422540572481103610249215 x303)) (= (x232 (+ x130 32)) x75) (= (ite x368 x327 (ite (> x150 0) 1 0)) x151) (= false x368) (= 1 x327) (= (x238 (- x75 x375)) x341) (= (x231 0) x193)) (not x362)) (and x362 (and (= x375 x136) (= x54 x151))))) x196)))
(assert (=> (<= x251 10000) (= (x174 x251) (x74 x251))))
(assert (x371 x17))
(assert (=> (<= x322 10000) (= (x74 x322) (x174 x322))))
(assert (x371 x134))
(assert (x371 x279))
(assert (x39 x58))
(assert (x371 x10))
(assert (x371 x212))
(assert (x388 x5))
(assert (x372 x251))
(assert (x371 x47))
(assert (=> (<= x236 10000) (= (x174 x236) (x74 x236))))
(assert (x371 x164))
(assert (x371 x24))
(assert (x371 x219))
(assert (= (x184 (x174 x137)) x137))
(assert (= x46 (x184 (x174 x46))))
(assert (x371 x13))
(assert (=> (>= 10000 x201) (= (x174 x201) (x74 x201))))
(assert (x371 x23))
(assert (x371 x261))
(assert (=> (>= 10000 x328) (= (x74 x328) (x174 x328))))
(assert (x371 x198))
(assert (= 0 (x304 160)))
(assert (= (=> (and (> x151 0) (= x136 x284)) x154) x196))
(assert (let ((x81 (ite (< x89 256) (x114 2 x89) 0))) (and (x374 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x129 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x99 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x81)) (x271 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x272 x81 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (=> (<= x346 10000) (= (x174 x346) (x74 x346))))
(assert (x106 (ite (> 256 x89) (x114 2 x89) 0)))
(assert (x371 x62))
(assert (= 752823349 (x184 (x74 752823349))))
(assert (=> (<= x369 10000) (= (x174 x369) (x74 x369))))
(assert (= x236 (x184 (x174 x236))))
(assert (= x297 (=> (and (and (= (x121 255 x133) x89) (<= x273 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x205 0) (<= 0 x29) (not (= 2510660263 x202)) (<= x340 1461501637330902918203684832716283019655932542975) (= x50 (x350 (x174 x322) x392 0)) (= (x63 x50) x29) (= (x359 x248) x273) (>= x273 0) (= (x350 (x174 x340) (x74 1) 0) x66) (not (< x202 2510660263)) (= x360 x87) (= x340 x367) (<= x29 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x153 x273) (= (x342 x29 x116) x378) (< x202 2630751253) (= x322 (x215 x133 8)) (= 2544733239 x202) (= (x366 (x174 x23)) x205) (= x142 (x350 (x174 x87) x66 0)) (= x248 (x315 x142 1)) (= x56 (x174 x224)) (= x116 (x77 1 x89))) (and (and (= (x366 (x174 x23)) x226) (= (x350 (x174 x369) x349 0) x245) (= (x171 x34) x122) (not (= 752823349 x28)) (> 2510660263 x28) (not (= x28 464684736)) (= x360 x369) (= x185 x153) (= 1315048582 x28) (not (= x28 292666793)) (= x122 x275) (= x349 (x350 (x174 x139) (x74 1) 0)) (not (= 388749022 x28)) (= x34 (x315 x245 2)) (< 0 x226) (>= x122 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x122) (<= x139 1461501637330902918203684832716283019655932542975) (= x139 x367)) (and (and (= x149 2510660263) (>= x256 0) (= x164 x360) (= (> x335 x185) x180) (= x276 x367) (= x258 (x366 (x174 x23))) (not (> 2510660263 x149)) (<= x276 1461501637330902918203684832716283019655932542975) (= x252 (x350 (x174 x164) x97 0)) (> 2630751253 x149) (> x258 0) (= x335 x275) (= x97 (x350 (x174 x276) (x74 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x256) (= x300 x256) (= (x156 x252) x256)) (and (and (= x201 x360) (= (= 0 x292) x96) (= x43 (x359 x309)) (> 2630751253 x325) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x43) (= x314 x367) (<= x314 1461501637330902918203684832716283019655932542975) (= x309 (x315 x189 1)) (= x325 2544733239) (= x300 x292) (not (= 2510660263 x325)) (= x299 x43) (= (x350 (x174 x201) x166 0) x189) (< 0 x318) (= (x350 (x174 x314) (x74 1) 0) x166) (= (x366 (x174 x23)) x318) (= 0 x230) (<= 0 x43) (not (< x325 2510660263))) (and (and (= 0 x117) (= x53 (= x255 0)) (= x255 x296) (= (or x180 x176) x83) (= (and x128 x53) x176)) (and (= x78 (x315 x27 2)) (not (= 464684736 x352)) (> x17 0) (= x280 x367) (= 1315048582 x352) (= (x350 (x174 x280) (x74 1) 0) x269) (not (= 388749022 x352)) (= x296 x101) (= (and x90 x96) x128) (not (= 292666793 x352)) (= x259 0) (>= x101 0) (= x27 (x350 (x174 x137) x269 0)) (= x101 (x171 x78)) (= x360 x137) (= x90 (= x192 0)) (<= x101 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x352 2510660263) (= x299 x192) (>= 1461501637330902918203684832716283019655932542975 x280) (not (= 752823349 x352)) (= x17 (x366 (x174 x23))))))))) x83)))
(assert (x371 x151))
(assert (= (x184 (x315 x324 1)) (+ (x184 x324) 1)))
(assert (x86 x116))
(assert (x371 x213))
(assert (x372 x356))
(assert (x73 x29 x116))
(assert (x372 x340))
(assert (x371 x122))
(check-sat)
(exit)
