(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x241 0)) (((x1018 (x923 Int)) (x493 (x267 x241) (x731 x241) (x346 Int)) (x795 (x846 x241) (x542 Int)))))
(declare-fun x911 () Bool)
(declare-fun x583 () Bool)
(declare-fun x423 () Bool)
(declare-fun x508 () Bool)
(declare-fun x527 () Bool)
(declare-fun x140 () Int)
(declare-fun x344 () Int)
(declare-fun x151 () Int)
(declare-fun x565 () Bool)
(declare-fun x474 () Int)
(declare-fun x1004 () Bool)
(declare-fun x814 () Int)
(declare-fun x282 () Int)
(declare-fun x921 () Int)
(declare-fun x1005 (Int) Int)
(declare-fun x405 () Bool)
(declare-fun x335 () Int)
(declare-fun x940 () Int)
(declare-fun x469 () Bool)
(declare-fun x914 () Bool)
(declare-fun x424 () Int)
(declare-fun x447 () Int)
(declare-fun x451 () Bool)
(declare-fun x634 () Int)
(declare-fun x13 () Bool)
(declare-fun x169 () Int)
(declare-fun x440 () Int)
(declare-fun x14 () Int)
(declare-fun x973 () Int)
(declare-fun x888 () Bool)
(declare-fun x487 () Int)
(declare-fun x16 () Int)
(declare-fun x739 () Int)
(declare-fun x90 () Int)
(declare-fun x740 () Int)
(declare-fun x838 () Int)
(declare-fun x842 () Int)
(declare-fun x586 () Bool)
(declare-fun x84 () Int)
(declare-fun x432 () Bool)
(declare-fun x562 () Int)
(declare-fun x230 () Int)
(declare-fun x1041 () Int)
(declare-fun x85 () Bool)
(declare-fun x899 () Bool)
(declare-fun x574 () Int)
(declare-fun x646 () Int)
(declare-fun x302 () Bool)
(declare-fun x557 () Bool)
(declare-fun x102 () Int)
(declare-fun x819 () Int)
(declare-fun x889 () Int)
(declare-fun x623 () Bool)
(declare-fun x890 () Int)
(declare-fun x261 () Bool)
(declare-fun x88 () Int)
(declare-fun x458 () Int)
(declare-fun x830 () Bool)
(declare-fun x298 () Int)
(declare-fun x361 () Bool)
(declare-fun x614 () Int)
(declare-fun x662 () Bool)
(declare-fun x578 () Int)
(declare-fun x268 () Bool)
(declare-fun x935 () Bool)
(declare-fun x280 () Int)
(declare-fun x851 () Bool)
(declare-fun x334 () Int)
(declare-fun x777 (Int) Int)
(declare-fun x81 () Int)
(declare-fun x854 () Bool)
(declare-fun x182 () Int)
(declare-fun x916 () Int)
(declare-fun x308 () Bool)
(declare-fun x364 () Bool)
(declare-fun x843 () Int)
(declare-fun x934 () Bool)
(declare-fun x710 () Int)
(declare-fun x101 () Int)
(declare-fun x435 () Int)
(declare-fun x1052 () Int)
(declare-fun x363 () Int)
(declare-fun x863 () Int)
(declare-fun x27 () Bool)
(declare-fun x840 () Int)
(declare-fun x58 () Int)
(declare-fun x736 () Int)
(declare-fun x1044 () Bool)
(declare-fun x195 () Int)
(declare-fun x109 () Bool)
(declare-fun x817 () Int)
(declare-fun x552 () Int)
(declare-fun x355 () Bool)
(declare-fun x1024 () Int)
(declare-fun x868 () Bool)
(declare-fun x492 () Int)
(declare-fun x471 () Int)
(declare-fun x497 () Bool)
(declare-fun x835 () Int)
(declare-fun x78 () Int)
(declare-fun x640 () Bool)
(declare-fun x489 () Bool)
(declare-fun x336 () Bool)
(declare-fun x149 () Bool)
(declare-fun x315 () Int)
(declare-fun x211 () Bool)
(declare-fun x131 () Int)
(declare-fun x563 () Int)
(declare-fun x80 () Bool)
(declare-fun x575 () Bool)
(declare-fun x980 () Int)
(declare-fun x417 () Bool)
(declare-fun x727 () Int)
(declare-fun x459 () Bool)
(declare-fun x589 () Int)
(declare-fun x858 () Int)
(declare-fun x520 () Int)
(declare-fun x377 () Int)
(declare-fun x912 () Int)
(declare-fun x47 () Int)
(declare-fun x62 () Bool)
(declare-fun x671 () Int)
(declare-fun x595 () Int)
(declare-fun x788 () Bool)
(declare-fun x340 () Bool)
(declare-fun x449 () Int)
(declare-fun x1025 () Bool)
(declare-fun x643 () Bool)
(declare-fun x43 () Bool)
(declare-fun x730 () Int)
(declare-fun x712 () Bool)
(declare-fun x143 () Int)
(declare-fun x44 () Int)
(declare-fun x613 () Bool)
(declare-fun x89 () Int)
(declare-fun x19 () Bool)
(declare-fun x866 () Int)
(declare-fun x1056 () Int)
(declare-fun x624 () Int)
(declare-fun x1049 () Int)
(declare-fun x25 (Int) Int)
(declare-fun x689 () Int)
(declare-fun x300 () Int)
(declare-fun x530 () Int)
(declare-fun x224 () Bool)
(declare-fun x392 () Bool)
(declare-fun x276 () Int)
(declare-fun x1050 () Bool)
(declare-fun x924 () Bool)
(declare-fun x594 () Bool)
(declare-fun x915 () Bool)
(declare-fun x112 () Bool)
(declare-fun x61 () Int)
(declare-fun x771 () Int)
(declare-fun x219 () Int)
(declare-fun x657 () Bool)
(declare-fun x488 () Bool)
(declare-fun x757 () Bool)
(declare-fun x434 () Int)
(declare-fun x65 () Bool)
(declare-fun x849 () Bool)
(declare-fun x903 () Bool)
(declare-fun x433 () Int)
(declare-fun x314 () Bool)
(declare-fun x750 () Int)
(declare-fun x808 () Int)
(declare-fun x969 () Int)
(declare-fun x700 () Int)
(declare-fun x427 () Bool)
(declare-fun x641 () Int)
(declare-fun x925 () Int)
(declare-fun x307 () Int)
(declare-fun x362 () Bool)
(declare-fun x457 () Int)
(declare-fun x816 () Int)
(declare-fun x96 () Bool)
(declare-fun x707 () Bool)
(declare-fun x809 () Bool)
(declare-fun x658 () Bool)
(declare-fun x556 () Int)
(declare-fun x881 () Int)
(declare-fun x571 () Int)
(declare-fun x933 () Int)
(declare-fun x251 () Int)
(declare-fun x848 () Int)
(declare-fun x522 () Int)
(declare-fun x709 () Int)
(declare-fun x997 () Bool)
(declare-fun x484 () Bool)
(declare-fun x1016 () Bool)
(declare-fun x132 () Bool)
(declare-fun x331 () Int)
(declare-fun x218 () Int)
(declare-fun x36 () Bool)
(declare-fun x669 () Bool)
(declare-fun x279 () Int)
(declare-fun x150 () Bool)
(declare-fun x450 () Int)
(declare-fun x550 () Int)
(declare-fun x327 () Bool)
(declare-fun x581 () Int)
(declare-fun x166 () Int)
(declare-fun x633 () Int)
(declare-fun x123 () Bool)
(declare-fun x411 () Int)
(declare-fun x968 () Int)
(declare-fun x148 () Bool)
(declare-fun x274 () Bool)
(declare-fun x864 () Bool)
(declare-fun x1000 () Bool)
(declare-fun x615 (Int Int) Int)
(declare-fun x1036 () Bool)
(declare-fun x342 () Int)
(declare-fun x737 () Bool)
(declare-fun x328 () Bool)
(declare-fun x365 () Bool)
(declare-fun x378 () Bool)
(declare-fun x608 () Int)
(declare-fun x683 () Int)
(declare-fun x983 () Int)
(declare-fun x262 () Int)
(declare-fun x853 () Int)
(declare-fun x142 () Bool)
(declare-fun x247 () Bool)
(declare-fun x644 () Int)
(declare-fun x726 () Bool)
(declare-fun x553 () Bool)
(declare-fun x1027 () Int)
(declare-fun x904 () Int)
(declare-fun x516 () Bool)
(declare-fun x907 () Int)
(declare-fun x349 () Int)
(declare-fun x971 () Int)
(declare-fun x825 () Bool)
(declare-fun x760 () Bool)
(declare-fun x483 () Int)
(declare-fun x200 () Bool)
(declare-fun x237 () Bool)
(declare-fun x948 () Int)
(declare-fun x444 () Bool)
(declare-fun x679 () Bool)
(declare-fun x988 () Int)
(declare-fun x785 () Bool)
(declare-fun x165 () Int)
(declare-fun x986 () Bool)
(declare-fun x369 () Bool)
(declare-fun x675 () Bool)
(declare-fun x1012 () Int)
(declare-fun x399 () Int)
(declare-fun x393 () Bool)
(declare-fun x585 () Bool)
(declare-fun x815 () Bool)
(declare-fun x99 () Int)
(declare-fun x35 () Bool)
(declare-fun x691 () Bool)
(declare-fun x716 () Int)
(declare-fun x49 () Int)
(declare-fun x781 () Bool)
(declare-fun x1051 () Int)
(declare-fun x1010 () Int)
(declare-fun x124 () Int)
(declare-fun x172 () Int)
(declare-fun x992 () Bool)
(declare-fun x939 () Bool)
(declare-fun x260 () Bool)
(declare-fun x987 () Bool)
(declare-fun x153 () Bool)
(declare-fun x686 () Bool)
(declare-fun x655 () Bool)
(declare-fun x523 () Bool)
(declare-fun x249 () Int)
(declare-fun x3 () Int)
(declare-fun x593 () Int)
(declare-fun x246 () Bool)
(declare-fun x477 () Bool)
(declare-fun x941 () Int)
(declare-fun x605 () Int)
(declare-fun x180 () Int)
(declare-fun x751 () Int)
(declare-fun x773 () Bool)
(declare-fun x673 () Bool)
(declare-fun x55 () Bool)
(declare-fun x464 (Int) Int)
(declare-fun x694 () Bool)
(declare-fun x322 () Int)
(declare-fun x789 () Bool)
(declare-fun x303 () Int)
(declare-fun x214 () Bool)
(declare-fun x119 (x241) Int)
(declare-fun x945 () Bool)
(declare-fun x269 () Int)
(declare-fun x1028 () Bool)
(declare-fun x621 () Int)
(declare-fun x235 () Bool)
(declare-fun x223 (Int) x241)
(declare-fun x351 () Bool)
(declare-fun x265 () Bool)
(declare-fun x645 () Int)
(declare-fun x294 () Bool)
(declare-fun x371 () Int)
(declare-fun x984 () Bool)
(declare-fun x9 () Int)
(declare-fun x618 () Bool)
(declare-fun x439 () Bool)
(declare-fun x147 () Bool)
(declare-fun x524 () Int)
(declare-fun x326 () Bool)
(declare-fun x397 () Bool)
(declare-fun x685 () Int)
(declare-fun x359 () Bool)
(declare-fun x769 () Bool)
(declare-fun x590 () Int)
(declare-fun x754 () Bool)
(declare-fun x715 () Bool)
(declare-fun x540 () Bool)
(declare-fun x661 () Int)
(declare-fun x59 () Int)
(declare-fun x358 () Int)
(declare-fun x603 () Bool)
(declare-fun x766 () Bool)
(declare-fun x706 () Bool)
(declare-fun x232 () Bool)
(declare-fun x1006 () Bool)
(declare-fun x26 (Int Int) Int)
(declare-fun x107 () Int)
(declare-fun x285 () Bool)
(declare-fun x4 () Bool)
(declare-fun x57 () Bool)
(declare-fun x421 () Bool)
(declare-fun x659 () Bool)
(declare-fun x763 () Bool)
(declare-fun x171 () Int)
(declare-fun x293 () Bool)
(declare-fun x537 () Bool)
(declare-fun x431 () Int)
(declare-fun x653 () Int)
(declare-fun x837 () Bool)
(declare-fun x42 () Bool)
(declare-fun x472 () Bool)
(declare-fun x810 () Bool)
(declare-fun x275 () Bool)
(declare-fun x905 () Int)
(declare-fun x174 () Bool)
(declare-fun x345 () Bool)
(declare-fun x582 () Int)
(declare-fun x306 () Int)
(declare-fun x681 () Int)
(declare-fun x70 () Int)
(declare-fun x1054 () Int)
(declare-fun x514 () Bool)
(declare-fun x29 () Int)
(declare-fun x677 () Bool)
(declare-fun x443 () Bool)
(declare-fun x486 () Bool)
(declare-fun x240 () Int)
(declare-fun x850 () Bool)
(declare-fun x296 () Int)
(declare-fun x831 () Bool)
(declare-fun x442 () Int)
(declare-fun x607 () Bool)
(declare-fun x820 () Bool)
(declare-fun x567 () Bool)
(declare-fun x12 () Int)
(declare-fun x437 () Int)
(declare-fun x982 () Int)
(declare-fun x533 () Int)
(declare-fun x880 () Int)
(declare-fun x688 () Int)
(declare-fun x64 () Int)
(declare-fun x21 () Int)
(declare-fun x599 () Bool)
(declare-fun x333 () Bool)
(declare-fun x1034 () Bool)
(declare-fun x256 () Bool)
(declare-fun x950 () Int)
(declare-fun x663 () Int)
(declare-fun x604 () Int)
(declare-fun x725 () Int)
(declare-fun x69 () Bool)
(declare-fun x31 () Bool)
(declare-fun x191 () Int)
(declare-fun x498 (x241) Int)
(declare-fun x999 () Bool)
(declare-fun x532 () Bool)
(declare-fun x1037 () Bool)
(declare-fun x372 () Bool)
(declare-fun x376 () Int)
(declare-fun x588 () Int)
(declare-fun x631 () Int)
(declare-fun x787 () Bool)
(declare-fun x937 () Int)
(declare-fun x587 () Int)
(declare-fun x54 () Bool)
(declare-fun x117 () Bool)
(declare-fun x63 () Int)
(declare-fun x692 () Bool)
(declare-fun x873 () Bool)
(declare-fun x208 () Bool)
(declare-fun x519 () Bool)
(declare-fun x133 () Bool)
(declare-fun x821 () Bool)
(declare-fun x414 () Bool)
(declare-fun x156 () Bool)
(declare-fun x897 () Int)
(declare-fun x207 () Int)
(declare-fun x801 () Int)
(declare-fun x596 () Bool)
(declare-fun x517 () Int)
(declare-fun x56 () Int)
(declare-fun x977 () Int)
(declare-fun x236 () Int)
(declare-fun x460 () Bool)
(declare-fun x531 () Int)
(declare-fun x966 () Int)
(declare-fun x329 () Int)
(declare-fun x502 () Bool)
(declare-fun x1038 () Int)
(declare-fun x957 () Bool)
(declare-fun x136 () Int)
(declare-fun x1015 () Bool)
(declare-fun x744 () Int)
(declare-fun x964 () Bool)
(declare-fun x979 (x241) Int)
(declare-fun x990 () Int)
(declare-fun x217 () Bool)
(declare-fun x753 () Bool)
(declare-fun x779 () Int)
(declare-fun x922 (Int) Int)
(declare-fun x32 () Int)
(declare-fun x952 () Int)
(declare-fun x861 () Bool)
(declare-fun x41 () Int)
(declare-fun x747 () Bool)
(declare-fun x197 () Int)
(declare-fun x189 () Bool)
(declare-fun x481 () Bool)
(declare-fun x722 () Int)
(declare-fun x1003 () Int)
(declare-fun x288 () Bool)
(declare-fun x154 () Int)
(declare-fun x452 () Bool)
(declare-fun x642 () Int)
(declare-fun x338 () Int)
(declare-fun x930 () Int)
(declare-fun x375 () Int)
(declare-fun x698 () Bool)
(declare-fun x768 () Bool)
(declare-fun x920 () Int)
(declare-fun x213 () Int)
(declare-fun x332 () Int)
(declare-fun x367 () Bool)
(declare-fun x943 () Int)
(declare-fun x580 () Int)
(declare-fun x173 () Int)
(declare-fun x103 () Bool)
(declare-fun x473 () Int)
(declare-fun x672 () Int)
(declare-fun x416 () Int)
(declare-fun x894 () Bool)
(declare-fun x665 () Bool)
(declare-fun x572 () Bool)
(declare-fun x2 () Bool)
(declare-fun x366 () Bool)
(declare-fun x499 () Bool)
(declare-fun x901 () Int)
(declare-fun x1011 () Bool)
(declare-fun x1020 () Bool)
(declare-fun x40 (Int) Int)
(declare-fun x728 () Int)
(declare-fun x248 () Int)
(declare-fun x226 () Bool)
(declare-fun x551 () Int)
(declare-fun x898 () Bool)
(declare-fun x609 () Int)
(declare-fun x536 () Int)
(declare-fun x339 () Bool)
(declare-fun x1029 () Bool)
(declare-fun x97 () Bool)
(declare-fun x45 () Int)
(declare-fun x651 () Bool)
(declare-fun x1030 () Int)
(declare-fun x833 () Int)
(declare-fun x701 () Bool)
(declare-fun x684 () Bool)
(declare-fun x465 () Bool)
(declare-fun x875 () Int)
(declare-fun x510 () Bool)
(declare-fun x295 () Bool)
(declare-fun x141 () Bool)
(declare-fun x638 () Int)
(declare-fun x408 () Bool)
(declare-fun x896 () Bool)
(declare-fun x936 () Int)
(declare-fun x413 () Int)
(declare-fun x323 () Int)
(declare-fun x396 () Bool)
(declare-fun x1032 () Bool)
(declare-fun x190 () Bool)
(declare-fun x800 () Bool)
(declare-fun x909 () Int)
(declare-fun x629 () Int)
(declare-fun x828 () Int)
(declare-fun x167 () Bool)
(declare-fun x541 () Int)
(declare-fun x52 () Int)
(declare-fun x932 () Bool)
(declare-fun x485 () Bool)
(declare-fun x1 () Int)
(declare-fun x159 () Int)
(declare-fun x549 () Bool)
(declare-fun x91 () Bool)
(declare-fun x206 () Bool)
(declare-fun x1031 () Bool)
(declare-fun x1009 () Bool)
(declare-fun x720 () Bool)
(declare-fun x286 (Int) Int)
(declare-fun x400 () Int)
(declare-fun x263 () Int)
(declare-fun x1014 () Int)
(declare-fun x568 () Bool)
(declare-fun x965 () Bool)
(declare-fun x357 () Int)
(declare-fun x564 () Bool)
(declare-fun x135 () Bool)
(declare-fun x152 () Bool)
(declare-fun x666 () Bool)
(declare-fun x558 () Int)
(declare-fun x184 () Int)
(declare-fun x761 () Int)
(declare-fun x297 () Bool)
(declare-fun x956 () Int)
(declare-fun x496 () Int)
(declare-fun x844 () Bool)
(declare-fun x225 () Int)
(declare-fun x713 () Int)
(declare-fun x291 () Bool)
(declare-fun x703 () Int)
(declare-fun x865 () Bool)
(declare-fun x270 () Bool)
(declare-fun x48 () Int)
(declare-fun x823 () Bool)
(declare-fun x1046 () Bool)
(declare-fun x175 () Int)
(declare-fun x60 () Int)
(declare-fun x259 () Bool)
(declare-fun x428 () Bool)
(declare-fun x822 () Bool)
(declare-fun x784 () Bool)
(declare-fun x239 () Bool)
(declare-fun x422 () Int)
(declare-fun x917 () Int)
(declare-fun x343 () Int)
(declare-fun x24 () Int)
(declare-fun x926 () Int)
(declare-fun x955 () Bool)
(declare-fun x664 () Bool)
(declare-fun x146 () Bool)
(declare-fun x37 () Int)
(declare-fun x576 () Bool)
(declare-fun x774 () Int)
(declare-fun x299 () Bool)
(declare-fun x403 () Bool)
(declare-fun x82 () Int)
(declare-fun x794 () Bool)
(declare-fun x906 () Int)
(declare-fun x981 () Int)
(declare-fun x636 () Bool)
(declare-fun x368 () Int)
(declare-fun x534 () Bool)
(declare-fun x518 () Bool)
(declare-fun x929 () Int)
(declare-fun x824 () Int)
(declare-fun x867 () Int)
(declare-fun x11 () Bool)
(declare-fun x597 () Int)
(declare-fun x93 () Int)
(declare-fun x826 () Bool)
(declare-fun x476 () Int)
(declare-fun x158 () Bool)
(declare-fun x953 () Int)
(declare-fun x702 () Bool)
(declare-fun x529 () Bool)
(declare-fun x991 () Bool)
(declare-fun x33 () Int)
(declare-fun x1017 () Int)
(declare-fun x544 () Bool)
(declare-fun x98 () Bool)
(declare-fun x108 () Bool)
(declare-fun x203 () Int)
(declare-fun x254 () Int)
(declare-fun x134 () Bool)
(declare-fun x278 () Bool)
(declare-fun x1043 () Bool)
(declare-fun x695 () Int)
(declare-fun x455 () Bool)
(declare-fun x6 () Bool)
(declare-fun x205 () Bool)
(declare-fun x862 () Bool)
(declare-fun x470 () Int)
(declare-fun x181 () Int)
(declare-fun x441 () Int)
(declare-fun x83 () Bool)
(declare-fun x212 () Int)
(declare-fun x317 () Int)
(declare-fun x718 (Int) Int)
(declare-fun x401 () Bool)
(declare-fun x161 () Int)
(declare-fun x120 () Int)
(declare-fun x670 () Int)
(declare-fun x127 () Int)
(declare-fun x38 () Int)
(declare-fun x1048 () Bool)
(declare-fun x341 () Bool)
(declare-fun x111 () Bool)
(declare-fun x316 () Bool)
(declare-fun x538 () Bool)
(declare-fun x745 () Bool)
(declare-fun x885 () Bool)
(declare-fun x310 () Bool)
(declare-fun x797 () Bool)
(declare-fun x426 () Int)
(declare-fun x255 () Bool)
(declare-fun x507 () Bool)
(declare-fun x179 () Bool)
(declare-fun x76 () Bool)
(declare-fun x192 () Int)
(declare-fun x606 () Int)
(declare-fun x490 () Int)
(declare-fun x626 () Int)
(declare-fun x559 () Bool)
(declare-fun x682 () Int)
(declare-fun x312 () Bool)
(declare-fun x748 () Int)
(declare-fun x446 () Bool)
(declare-fun x23 () Int)
(declare-fun x743 () Int)
(declare-fun x1039 (Int) Int)
(declare-fun x765 () Bool)
(declare-fun x931 () Bool)
(declare-fun x852 () Int)
(declare-fun x796 () Bool)
(declare-fun x680 () Bool)
(declare-fun x970 () Bool)
(declare-fun x735 () Bool)
(declare-fun x859 () Bool)
(declare-fun x321 () Int)
(declare-fun x775 () Bool)
(declare-fun x807 () Int)
(declare-fun x635 () Bool)
(declare-fun x515 () Bool)
(declare-fun x526 () Bool)
(declare-fun x95 () Int)
(declare-fun x176 () Int)
(declare-fun x221 () Bool)
(declare-fun x319 () Bool)
(declare-fun x758 () Int)
(declare-fun x967 () Int)
(declare-fun x960 () Bool)
(declare-fun x478 (Int) Int)
(declare-fun x647 () Bool)
(declare-fun x756 () Int)
(declare-fun x187 (x241) Int)
(declare-fun x463 () Int)
(declare-fun x879 () Bool)
(declare-fun x17 () Int)
(declare-fun x271 () Int)
(declare-fun x51 () Bool)
(declare-fun x412 (Int) Int)
(declare-fun x749 () Bool)
(declare-fun x693 () Int)
(declare-fun x887 () Bool)
(declare-fun x253 () Int)
(declare-fun x805 () Int)
(declare-fun x231 () Bool)
(declare-fun x350 () Bool)
(declare-fun x68 () Int)
(declare-fun x324 () Bool)
(declare-fun x129 () Bool)
(declare-fun x116 () Bool)
(declare-fun x974 () Int)
(declare-fun x406 () Int)
(declare-fun x244 () Int)
(declare-fun x554 () Bool)
(declare-fun x479 () Bool)
(declare-fun x504 (x241) Int)
(declare-fun x162 () Bool)
(declare-fun x741 () Bool)
(declare-fun x871 () Int)
(declare-fun x410 () Int)
(declare-fun x989 () Int)
(declare-fun x238 () Bool)
(declare-fun x792 () Int)
(declare-fun x548 () Int)
(declare-fun x976 () Bool)
(declare-fun x1008 () Int)
(declare-fun x145 () Int)
(declare-fun x628 () Bool)
(declare-fun x876 () Bool)
(declare-fun x185 () Int)
(declare-fun x958 () Bool)
(declare-fun x114 () Int)
(declare-fun x283 () Bool)
(declare-fun x28 () Int)
(declare-fun x509 () Int)
(declare-fun x804 (Int Int) Int)
(declare-fun x494 () Int)
(declare-fun x202 () Int)
(declare-fun x71 () Bool)
(declare-fun x772 () Bool)
(declare-fun x257 () Int)
(declare-fun x436 () Bool)
(declare-fun x729 () Int)
(declare-fun x10 (Int) Int)
(declare-fun x168 () Int)
(declare-fun x186 () Bool)
(declare-fun x918 (x241) Int)
(declare-fun x639 () Int)
(declare-fun x978 () Int)
(declare-fun x1001 () Int)
(declare-fun x92 () Int)
(declare-fun x7 () Int)
(declare-fun x791 () Bool)
(declare-fun x506 () Bool)
(declare-fun x839 () Int)
(declare-fun x94 () Int)
(declare-fun x356 () Bool)
(declare-fun x139 () Bool)
(declare-fun x637 () Int)
(declare-fun x566 () Bool)
(declare-fun x627 () Bool)
(declare-fun x467 () Int)
(declare-fun x732 () Bool)
(declare-fun x994 () Int)
(declare-fun x1040 () Int)
(declare-fun x264 () Int)
(declare-fun x690 () Int)
(declare-fun x113 () Int)
(declare-fun x910 () Int)
(declare-fun x949 () Bool)
(declare-fun x782 () Bool)
(declare-fun x210 () Int)
(declare-fun x927 () Bool)
(declare-fun x512 () Int)
(declare-fun x201 () Int)
(declare-fun x598 () Int)
(declare-fun x856 () Int)
(declare-fun x325 () Int)
(declare-fun x985 () Int)
(declare-fun x466 () Bool)
(declare-fun x330 () Int)
(declare-fun x883 () Int)
(declare-fun x320 () Bool)
(declare-fun x962 () Bool)
(declare-fun x289 () Bool)
(declare-fun x543 () Int)
(declare-fun x591 () Bool)
(declare-fun x616 () Int)
(declare-fun x602 () Int)
(declare-fun x216 () Bool)
(declare-fun x74 () Int)
(declare-fun x790 () Int)
(declare-fun x430 () Bool)
(declare-fun x752 () Bool)
(declare-fun x545 () Int)
(declare-fun x389 () Int)
(declare-fun x947 () Bool)
(declare-fun x144 () Int)
(declare-fun x764 () Int)
(declare-fun x126 () Int)
(declare-fun x908 () Int)
(declare-fun x409 () Int)
(declare-fun x379 () Int)
(declare-fun x445 () Int)
(declare-fun x353 () Int)
(declare-fun x832 () Bool)
(declare-fun x812 () Int)
(declare-fun x475 () Bool)
(declare-fun x79 () Bool)
(declare-fun x72 () Int)
(declare-fun x996 () Int)
(declare-fun x806 () Bool)
(declare-fun x66 () Bool)
(declare-fun x215 (x241) Int)
(declare-fun x708 () Int)
(declare-fun x193 () Bool)
(declare-fun x311 () Int)
(declare-fun x874 () Int)
(declare-fun x155 () Int)
(declare-fun x619 () Int)
(declare-fun x1035 () Bool)
(declare-fun x67 () Int)
(declare-fun x209 () Int)
(declare-fun x503 () Bool)
(declare-fun x337 () Bool)
(declare-fun x453 () Int)
(declare-fun x942 (Int Int) Int)
(declare-fun x938 () Int)
(declare-fun x511 () Bool)
(declare-fun x196 () Int)
(declare-fun x277 (Int Int) Int)
(declare-fun x601 () Bool)
(declare-fun x650 () Bool)
(declare-fun x281 () Bool)
(declare-fun x164 () Int)
(declare-fun x8 () Int)
(declare-fun x600 () Int)
(declare-fun x77 () Int)
(declare-fun x617 () Int)
(declare-fun x418 () Bool)
(declare-fun x170 () Int)
(declare-fun x304 () Int)
(declare-fun x734 () Int)
(declare-fun x902 () Int)
(declare-fun x625 () Int)
(declare-fun x243 () Int)
(declare-fun x1007 () Bool)
(declare-fun x799 () Bool)
(declare-fun x385 () Int)
(declare-fun x125 () Bool)
(declare-fun x121 () Int)
(declare-fun x913 () Bool)
(declare-fun x420 () Int)
(declare-fun x347 () Bool)
(declare-fun x86 () Bool)
(declare-fun x813 () Int)
(declare-fun x798 () Int)
(declare-fun x287 () Bool)
(declare-fun x15 () Bool)
(declare-fun x860 () Int)
(declare-fun x305 () Bool)
(declare-fun x273 () Int)
(declare-fun x803 () Int)
(declare-fun x104 () Bool)
(declare-fun x87 () Int)
(declare-fun x755 () Bool)
(declare-fun x570 () Int)
(declare-fun x34 () Int)
(declare-fun x388 () Bool)
(declare-fun x250 () Bool)
(declare-fun x1042 () Bool)
(declare-fun x521 () Bool)
(declare-fun x360 () Bool)
(declare-fun x130 () Int)
(declare-fun x407 () Int)
(declare-fun x415 () Int)
(declare-fun x438 () Int)
(declare-fun x429 () Bool)
(declare-fun x847 () Bool)
(declare-fun x1019 () Bool)
(declare-fun x995 () Int)
(declare-fun x461 () Bool)
(declare-fun x884 () Bool)
(declare-fun x928 () Int)
(declare-fun x1047 () Bool)
(declare-fun x762 () Int)
(declare-fun x738 () Int)
(declare-fun x1053 () Bool)
(declare-fun x767 (Int Int) Int)
(declare-fun x160 () Int)
(declare-fun x118 () Int)
(declare-fun x783 () Bool)
(declare-fun x100 () Int)
(declare-fun x687 () Int)
(declare-fun x660 () Int)
(declare-fun x272 () Bool)
(declare-fun x668 () Bool)
(declare-fun x22 () Int)
(declare-fun x115 () Bool)
(declare-fun x654 (Int) Int)
(declare-fun x869 (x241) Int)
(declare-fun x611 () Int)
(declare-fun x811 () Int)
(define-fun x746 ((x241 x241) (x528 Int)) x241 (ite ((_ is x493) x241) (x493 (x267 x241) (x731 x241) (+ (x346 x241) x528)) (ite ((_ is x795) x241) (x795 (x846 x241) (+ x528 (x542 x241))) (x1018 (+ (x923 x241) x528)))))
(define-fun x780 ((x398 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x398) (>= x398 0)) x398 (- x398 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x318 ((x398 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x398) (> 0 x398)) (+ x398 115792089237316195423570985008687907853269984665640564039457584007913129639936) x398))
(define-fun x177 ((x398 Int)) Int (ite (and (>= x398 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x398)) x398 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x398) (< x398 231584178474632390847141970017375815706539969331281128078915168015826259279872)) (- x398 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x398) (> 0 x398)) (+ x398 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x277 x398 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x387 ((x500 Int)) Bool (and (< x500 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x500)))
(define-fun x1026 ((x500 Int)) Bool (and (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639935 x500) x500) (= x500 (x615 x500 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x228 ((x500 Int)) Bool (and (= 0 (x615 0 x500)) (= (x615 x500 0) 0)))
(define-fun x882 ((x500 Int)) Bool (= x500 (x615 x500 x500)))
(define-fun x855 ((x500 Int)) Bool (and (x882 x500) (x1026 x500) (x228 x500)))
(define-fun x697 ((x500 Int) (x1013 Int)) Bool (= (x615 x1013 x500) (x615 x500 x1013)))
(define-fun x546 ((x500 Int) (x1013 Int)) Bool (and (=> (>= x1013 0) (>= x1013 (x615 x500 x1013))) (=> (<= 0 x500) (<= (x615 x500 x1013) x500)) (<= 0 (x615 x500 x1013))))
(define-fun x448 ((x500 Int) (x1013 Int)) Bool (and (x546 x500 x1013) (x697 x500 x1013)))
(define-fun x222 ((x500 Int)) Bool (= (x177 x500) (+ (x277 x500 32) (x615 x500 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x157 ((x500 Int)) Bool (and (x222 x500) (x448 x500 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x993 ((x500 Int) (x1013 Int)) Bool (and (>= (x277 x500 x1013) 0) (< (x277 x500 x1013) x1013)))
(define-fun x454 ((x500 Int) (x1013 Int)) Bool (=> (and (>= x500 0) (> x1013 0)) (= (= x500 (x277 x500 x1013)) (< x500 x1013))))
(define-fun x220 ((x500 Int) (x1013 Int)) Bool (=> (and (and (< x500 (+ x1013 x1013)) (>= x500 x1013)) (< 0 x1013)) (= (- x500 x1013) (x277 x500 x1013))))
(define-fun x1023 ((x500 Int)) Bool (= (x277 0 x500) 0))
(define-fun x390 ((x500 Int)) Bool (= (x277 x500 1) 0))
(define-fun x919 ((x500 Int)) Bool (= 0 (x277 x500 x500)))
(define-fun x891 ((x500 Int)) Bool (and (x390 x500) (x919 x500) (x1023 x500)))
(define-fun x560 ((x500 Int) (x1013 Int)) Bool (=> (and (> x500 0) (< 0 x1013)) (= (< (x26 x500 x1013) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1013 (x767 (x177 (x26 x500 x1013)) x500)))))
(define-fun x802 ((x500 Int) (x1013 Int)) Bool (=> (and (not (= x500 0)) (not (= x1013 0))) (and (= (x767 (x26 x500 x1013) x500) x1013) (= x500 (x767 (x26 x500 x1013) x1013)))))
(define-fun x1033 ((x500 Int) (x1013 Int)) Bool (=> (and (< 0 x500) (< 0 x1013)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 x500 x1013)) (< (x767 115792089237316195423570985008687907853269984665640564039457584007913129639935 x500) x1013))))
(define-fun x198 ((x500 Int) (x1013 Int)) Bool (and (= (x177 (x26 x500 x1013)) (x177 (x26 (- x500 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x1013 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x177 (x26 x500 (- x1013 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x177 (x26 x500 x1013))) (= (x177 (x26 (- x500 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1013)) (x177 (x26 x500 x1013)))))
(define-fun x547 ((x500 Int) (x1013 Int)) Bool (and (=> (and (and (> x500 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x500)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1013) (> x1013 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x767 57896044618658097711785492504343953926634992332820282019728792003956564819968 x500) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1013)) (>= (x26 x500 (- x1013 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x500) (> x500 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x1013 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x1013 0))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x26 (- x500 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1013)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x500) (x767 57896044618658097711785492504343953926634992332820282019728792003956564819968 x1013)))) (=> (and (and (<= x1013 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x1013 0)) (and (<= x500 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x500))) (= (<= x500 (x767 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1013)) (<= (x26 x500 x1013) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (<= x500 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x500 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x1013 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x1013 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x767 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1013)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x500)) (<= (x26 (- x500 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x1013 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))
(define-fun x73 ((x500 Int)) Bool (and (= 0 (x26 0 x500)) (= (x26 x500 0) 0)))
(define-fun x301 ((x500 Int)) Bool (and (= x500 (x26 1 x500)) (= (x26 x500 1) x500)))
(define-fun x778 ((x500 Int)) Bool (and (x73 x500) (x301 x500)))
(define-fun x284 ((x500 Int)) Bool (= (x277 x500 1461501637330902918203684832716283019655932542976) (x615 x500 1461501637330902918203684832716283019655932542975)))
(define-fun x178 ((x500 Int)) Bool (and (x284 x500) (x448 x500 1461501637330902918203684832716283019655932542975)))
(define-fun x569 ((x845 Int)) Int (ite (< x845 x1030) (x1005 x845) 0))
(define-fun x786 ((x845 Int)) Int (x25 x845))
(define-fun x386 ((x845 x241)) Int (ite (= x845 (x223 x407)) x693 (x504 x845)))
(define-fun x292 ((x845 x241)) Int (ite (= x845 (x223 x276)) x582 (x386 x845)))
(define-fun x373 ((x845 Int)) Int (ite (= x845 128) x191 (x412 x845)))
(define-fun x266 ((x845 Int)) Int (ite (and (>= x845 160) (> (+ x191 160) x845)) (x25 (+ (- x845 160) x533)) (x373 x845)))
(define-fun x183 ((x845 Int)) Int (ite (= x845 x236) 0 (x266 x845)))
(define-fun x163 ((x845 Int)) Int (ite (= x845 x209) x166 (x183 x845)))
(define-fun x630 ((x845 Int)) Int (ite (and (>= x845 x938) (> (+ x938 x166) x845)) (x25 (+ x410 (- x845 x938))) (x163 x845)))
(define-fun x39 ((x845 Int)) Int (ite (= x273 x845) 0 (x630 x845)))
(define-fun x419 ((x845 Int)) Int (ite (= x845 x95) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x39 x845)))
(define-fun x425 ((x845 Int)) Int (ite (= x845 x182) 160 (x419 x845)))
(define-fun x495 ((x845 Int)) Int (ite (= x845 x210) x263 (x425 x845)))
(define-fun x370 ((x845 Int)) Int (ite (= x433 x845) x593 (x495 x845)))
(define-fun x505 ((x845 Int)) Int (ite (= x722 x845) x251 (x370 x845)))
(define-fun x513 ((x845 Int)) Int (ite (= x845 x413) x571 (x505 x845)))
(define-fun x961 ((x845 Int)) Int (ite (= x470 x845) x49 (x513 x845)))
(define-fun x610 ((x845 Int)) Int (ite x784 (x513 x845) (ite x320 (x505 x845) (ite x339 (x370 x845) (ite x810 (x495 x845) (x961 x845))))))
(define-fun x234 ((x845 Int)) Int (ite (= x590 x845) 0 (x610 x845)))
(define-fun x354 ((x845 Int)) Int (ite x768 (x610 x845) (x234 x845)))
(define-fun x456 ((x845 Int)) Int (ite (= x845 x121) x744 (x354 x845)))
(define-fun x998 ((x845 Int)) Int (ite (= x845 x716) x883 (x456 x845)))
(define-fun x525 ((x845 Int)) Int (ite (= x845 x683) x952 (x998 x845)))
(define-fun x313 ((x845 Int)) Int (ite (= x880 x845) x843 (x525 x845)))
(define-fun x128 ((x845 Int)) Int (ite (= x619 x845) x307 (x313 x845)))
(define-fun x886 ((x845 Int)) Int (ite (= x845 x552) x611 (x128 x845)))
(define-fun x742 ((x845 Int)) Int (ite x647 (x128 x845) (ite x732 (x313 x845) (ite x372 (x525 x845) (ite x668 (x998 x845) (x886 x845))))))
(define-fun x829 ((x845 Int)) Int (ite (= x845 x856) 0 (x742 x845)))
(define-fun x391 ((x845 Int)) Int (ite x4 (x742 x845) (x829 x845)))
(define-fun x309 ((x845 Int)) Int (ite (= x325 x845) x953 (x391 x845)))
(define-fun x383 ((x845 Int)) Int (ite (= x845 x904) x99 (x309 x845)))
(define-fun x676 ((x845 Int)) Int (ite (= x845 x661) x343 (x383 x845)))
(define-fun x711 ((x845 Int)) Int (ite (= x845 x389) x45 (x676 x845)))
(define-fun x954 ((x845 Int)) Int (ite (= x331 x845) x1014 (x711 x845)))
(define-fun x382 ((x845 Int)) Int (ite (= x219 x845) x811 (x954 x845)))
(define-fun x959 ((x845 Int)) Int (ite (= x845 x522) x729 (x382 x845)))
(define-fun x137 ((x845 Int)) Int (ite x208 (x382 x845) (ite x726 (x954 x845) (ite x146 (x711 x845) (ite x754 (x676 x845) (x959 x845))))))
(define-fun x704 ((x845 Int)) Int (ite (= x845 x604) x353 (x137 x845)))
(define-fun x656 ((x845 Int)) Int (ite (= x169 x845) x195 (x704 x845)))
(define-fun x199 ((x845 Int)) Int (ite (= x545 x845) x814 (x656 x845)))
(define-fun x352 ((x845 Int)) Int (ite (= x845 x253) x943 (x199 x845)))
(define-fun x20 ((x845 Int)) Int (ite (and (< x845 (+ x925 x943)) (>= x845 x925)) (x25 (+ x151 (- x845 x925))) (x352 x845)))
(define-fun x573 ((x845 Int)) Int (ite (= x681 x845) 0 (x20 x845)))
(define-fun x893 ((x845 Int)) Int (ite x915 (x656 x845) (x573 x845)))
(define-fun x53 ((x845 Int)) Int (ite (= x95 x845) x14 (x893 x845)))
(define-fun x667 ((x845 Int)) Int (ite x932 (x893 x845) (ite x27 (x53 x845) (x893 x845))))
(define-fun x696 ((x845 Int)) Int (ite (= x845 x450) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x667 x845)))
(define-fun x233 ((x845 Int)) Int (ite (and (> (+ 32 x450) x845) (<= x450 x845)) (x286 (+ 0 (- x845 x450))) (x696 x845)))
(define-fun x46 ((x845 Int)) Int (ite (and (<= 196 x845) (> (+ 196 (x318 (- x930 196))) x845)) (x893 (+ (x780 (+ 196 x95)) (- x845 196))) (x569 x845)))
(define-fun x721 ((x845 Int)) Int (ite (= 128 x845) x653 (x10 x845)))
(define-fun x895 ((x845 Int)) Int (ite (and (>= x845 160) (> (+ x653 160) x845)) (x46 (+ 196 (- x845 160))) (x721 x845)))
(define-fun x482 ((x845 Int)) Int (ite (= x845 x155) 0 (x895 x845)))
(define-fun x872 ((x845 Int)) Int (ite (= x845 x858) x426 (x482 x845)))
(define-fun x501 ((x845 Int)) Int (ite (and (<= x981 x845) (< x845 (+ x981 x426))) (x46 (+ x1049 (- x845 x981))) (x872 x845)))
(define-fun x75 ((x845 Int)) Int (ite (= x845 x916) 0 (x501 x845)))
(define-fun x227 ((x845 Int)) Int (ite (= x82 x845) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x75 x845)))
(define-fun x539 ((x845 Int)) Int (ite (= x845 x82) x1008 (x227 x845)))
(define-fun x793 ((x845 x241)) Int (ite (= (x223 x276) x845) x445 (x292 x845)))
(define-fun x878 ((x845 x241)) Int (ite (= x845 (x223 x438)) x600 (x793 x845)))
(define-fun x1002 ((x845 Int)) Int (ite (and (>= x845 x816) (> (+ 0 x816) x845)) (x464 (+ (- x845 x816) 0)) (x539 x845)))
(define-fun x491 ((x845 Int)) Int (ite x502 (x539 x845) (ite x139 (x1002 x845) (x539 x845))))
(define-fun x110 ((x845 Int)) Int (ite x502 (x718 x845) (x464 x845)))
(define-fun x612 ((x845 Int)) Int (ite (= x816 x845) x835 (x491 x845)))
(define-fun x381 ((x845 Int)) Int (ite (and (< x845 (+ x974 x835)) (<= x974 x845)) (x110 (+ 0 (- x845 x974))) (x612 x845)))
(define-fun x841 ((x845 x241)) Int (ite x139 (x869 x845) (x878 x845)))
(define-fun x724 ((x845 x241)) Int (ite (= (x223 x438) x845) x790 (x841 x845)))
(define-fun x395 ((x845 x241)) Int (ite (= x845 (x223 x276)) x48 (x724 x845)))
(define-fun x138 ((x845 x241)) Int (ite x401 (x292 x845) (ite x502 (x292 x845) (ite x149 (x841 x845) (x395 x845)))))
(define-fun x242 ((x845 Int)) Int (ite x401 (x75 x845) (ite x643 (x491 x845) (x381 x845))))
(define-fun x394 ((x845 x241)) Int (ite (= (x223 x276) x845) x434 (x138 x845)))
(define-fun x717 ((x845 x241)) Int (ite (= (x223 x160) x845) x424 (x394 x845)))
(define-fun x770 ((x845 x241)) Int (ite (= (x223 x160) x845) x621 (x717 x845)))
(define-fun x827 ((x845 x241)) Int (ite (= x845 (x223 x276)) x771 (x770 x845)))
(define-fun x204 ((x845 Int)) Int (ite (= x185 x845) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x242 x845)))
(define-fun x30 ((x845 Int)) Int (ite (= x845 x17) 192 (x204 x845)))
(define-fun x188 ((x845 Int)) Int (ite (= x845 x646) x492 (x30 x845)))
(define-fun x892 ((x845 Int)) Int (ite (= x833 x845) x871 (x188 x845)))
(define-fun x579 ((x845 Int)) Int (ite (= x845 x344) x994 (x892 x845)))
(define-fun x462 ((x845 Int)) Int (ite (= x334 x845) x980 (x579 x845)))
(define-fun x258 ((x845 x241)) Int (ite x289 (x119 x845) (x827 x845)))
(define-fun x577 ((x845 x241)) Int (ite x735 (x258 x845) (ite x295 (x918 x845) (x258 x845))))
(define-fun x870 ((x845 Int)) Int (ite (= x422 x845) x941 (x462 x845)))
(define-fun x946 ((x845 Int)) Int (ite x1048 (x462 x845) (ite x955 (x579 x845) (ite x636 (x892 x845) (ite x911 (x188 x845) (x870 x845))))))
(define-fun x674 ((x845 Int)) Int (ite (= x118 x845) 0 (x946 x845)))
(define-fun x900 ((x845 Int)) Int (ite x766 (x946 x845) (x674 x845)))
(define-fun x836 ((x845 Int)) Int (ite (= x431 x845) x937 (x900 x845)))
(define-fun x759 ((x845 Int)) Int (ite (= x845 x171) x7 (x836 x845)))
(define-fun x348 ((x845 Int)) Int (ite (= x995 x845) x874 (x759 x845)))
(define-fun x194 ((x845 Int)) Int (ite (= x845 x764) x64 (x348 x845)))
(define-fun x106 ((x845 Int)) Int (ite (= x262 x845) x761 (x194 x845)))
(define-fun x1045 ((x845 Int)) Int (ite (= x338 x845) x966 (x106 x845)))
(define-fun x699 ((x845 Int)) Int (ite x167 (x106 x845) (ite x423 (x194 x845) (ite x964 (x348 x845) (ite x272 (x759 x845) (x1045 x845))))))
(define-fun x944 ((x845 Int)) Int (ite (= x202 x845) 0 (x699 x845)))
(define-fun x975 ((x845 Int)) Int (ite x865 (x699 x845) (x944 x845)))
(define-fun x5 ((x845 Int)) Int (ite (= x845 x113) x458 (x975 x845)))
(define-fun x380 ((x845 Int)) Int (ite (= x845 x912) x159 (x5 x845)))
(define-fun x649 ((x845 Int)) Int (ite (= x845 x968) x28 (x380 x845)))
(define-fun x1055 ((x845 Int)) Int (ite (= x845 x93) x165 (x649 x845)))
(define-fun x632 ((x845 Int)) Int (ite (and (> (+ x185 0) x845) (>= x845 x185)) (x922 (+ (- x845 x185) 0)) (x1055 x845)))
(define-fun x972 ((x845 Int)) Int (ite x289 (x632 x845) (x1055 x845)))
(define-fun x622 ((x845 Int)) Int (ite (= x672 x845) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x972 x845)))
(define-fun x584 ((x845 Int)) Int (ite (= x1017 x845) x335 (x622 x845)))
(define-fun x252 ((x845 Int)) Int (ite (= x1001 x845) x1027 (x584 x845)))
(define-fun x723 ((x845 Int)) Int (ite (= x845 x1) x730 (x252 x845)))
(define-fun x963 ((x845 Int)) Int (ite (= x983 x845) x541 (x723 x845)))
(define-fun x18 ((x845 Int)) Int (ite x888 (x723 x845) (ite x987 (x252 x845) (ite x745 (x584 x845) (ite x403 (x622 x845) (x963 x845))))))
(define-fun x535 ((x845 Int)) Int (ite (= x845 x358) 0 (x18 x845)))
(define-fun x50 ((x845 Int)) Int (ite x1042 (x18 x845) (x535 x845)))
(define-fun x1022 ((x845 Int)) Int (ite (= x845 x185) x875 (x50 x845)))
(define-fun x404 ((x845 Int)) Int (ite (= x845 x23) x605 (x1022 x845)))
(define-fun x105 ((x845 Int)) Int (ite (= x845 x385) x950 (x404 x845)))
(define-fun x1021 ((x845 Int)) Int (ite (= x323 x845) x61 (x105 x845)))
(define-fun x776 ((x845 Int)) Int (ite (= x845 x738) x616 (x1021 x845)))
(define-fun x719 ((x845 Int)) Int (ite (= x845 x703) x213 (x776 x845)))
(define-fun x648 ((x845 Int)) Int (ite (= x905 x845) x629 (x719 x845)))
(define-fun x733 ((x845 Int)) Int (ite x324 (x719 x845) (ite x190 (x776 x845) (ite x510 (x1021 x845) (ite x931 (x105 x845) (x648 x845))))))
(define-fun x374 ((x845 Int)) Int (ite (= x845 x399) 0 (x733 x845)))
(define-fun x245 ((x845 Int)) Int (ite x789 (x733 x845) (x374 x845)))
(define-fun x857 ((x845 Int)) Int (ite (= x44 x845) x311 (x245 x845)))
(define-fun x480 ((x845 Int)) Int (ite x934 (x233 x845) (x696 x845)))
(define-fun x877 ((x845 Int)) Int (ite (= x614 x845) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x480 x845)))
(define-fun x951 ((x845 Int)) Int (ite (and (< x845 (+ x614 32)) (<= x614 x845)) (x777 (+ (- x845 x614) 0)) (x877 x845)))
(define-fun x620 ((x845 Int)) Int (ite x752 (x951 x845) (x877 x845)))
(define-fun x652 ((x845 Int)) Int (ite (= x845 x798) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x620 x845)))
(define-fun x384 ((x845 Int)) Int (ite (and (> (+ 32 x798) x845) (<= x798 x845)) (x1039 (+ 0 (- x845 x798))) (x652 x845)))
(define-fun x818 ((x845 Int)) Int (ite x66 (x384 x845) (x652 x845)))
(define-fun x402 ((x845 Int)) Int (ite (= x845 x978) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x818 x845)))
(define-fun x229 ((x845 Int)) Int (ite (and (> (+ x978 32) x845) (>= x845 x978)) (x40 (+ (- x845 x978) 0)) (x402 x845)))
(define-fun x561 ((x845 Int)) Int (ite x859 (x229 x845) (x402 x845)))
(define-fun x122 ((x845 Int)) Int (ite (= x845 x143) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x561 x845)))
(define-fun x555 ((x845 Int)) Int (ite (and (>= x845 x143) (< x845 (+ 32 x143))) (x478 (+ 0 (- x845 x143))) (x122 x845)))
(define-fun x468 ((x845 Int)) Int (ite x362 (x555 x845) (x122 x845)))
(define-fun x705 ((x500 Int)) Bool (=> (and (not (= 1262878978 x500)) (not (= x500 2376452955)) (not (= 1461501637330902918203684832716283019655932542975 x500)) (not (= 2005408114 x500)) (not (= x500 79228162514264337593543950335)) (not (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 x500)) (not (= x500 3084411429)) (not (= 2249206060 x500)) (not (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x500)) (not (= 1245659826 x500)) (not (= x500 1553423035)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x500)) (not (= 3705713892 x500)) (not (= 102499615646744134772650717477688572466918151731817230690449879178893085114368 x500)) (not (= x500 113209349505197351213641468582317386984598294884268236158119619414039440916480)) (not (= x500 4294967296)) (not (= 3572374928 x500)) (not (= x500 18446744073709551615)) (not (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 x500)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x500)) (not (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 x500)) (not (= 2220280665 x500)) (not (= x500 2329570063)) (not (= 1461501637330902918203684832716283019655932542976 x500)) (not (= 1901074598 x500)) (not (= x500 64069044923792539370177021244577383457373632460708312080110356237917649633280)) (< 10000 x500) (not (= x500 22445611572322667099362401052093617030957452505749565894135597532943828910080)) (not (= x500 1845979623))) (not ((_ is x1018) (x223 x500)))))
(assert (x157 x695))
(assert (x387 x166))
(assert (x387 x271))
(assert (and (x993 x890 32) (x454 x890 32) (x220 x890 32) (=> (> 32 0) (= (+ (x277 x890 32) (* (x767 x890 32) 32)) x890))))
(assert (= (=> (and (and (= x72 (x468 x143)) (not (= x94 0)) (not (or (and (< x908 32) (= true (<= x908 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x908))) (= x852 x52) (<= x72 1461501637330902918203684832716283019655932542975)) (and (= x164 x136) (= false x283) (= false x673))) x939) x675))
(assert (and (x993 x609 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x609 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x609 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x609 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x609 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x609))))
(assert (= (and x677 (not x285)) x692))
(assert (x387 x533))
(assert (x387 x332))
(assert (x387 x729))
(assert (= 0 (x718 (- x598 x974))))
(assert (= (=> (and (or (and (and (= x531 (x780 (+ 63 x835))) (= x690 (x780 (+ x816 x725))) (= x974 (x780 (+ x816 32))) (= x597 x690) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x531) x725)) (not x360)) (and (= x597 x816) x360)) (= (= x835 0) x360)) x568) x527))
(assert (x387 x683))
(assert (x387 x909))
(assert (= 3084411429 (x979 (x1018 3084411429))))
(assert (x387 x880))
(assert (x387 x629))
(assert (x387 x353))
(assert (x387 x276))
(assert (= (and x965 (not x291)) x472))
(assert (x387 x41))
(assert (x387 x433))
(assert (x387 x703))
(assert (= (and x35 x698) x532))
(assert (= x327 (and x1032 (not x31))))
(assert (and (x993 x203 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x203 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x203 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x203 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x203 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x203))))
(assert (x387 x950))
(assert (x387 x774))
(assert (x157 x197))
(assert (x387 x249))
(assert (= x645 (x979 (x223 x645))))
(assert (x387 x304))
(assert (x387 x520))
(assert (x387 x155))
(assert (= (and x477 x538) x66))
(assert (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x979 (x1018 4739670319144124481003130557741556594755290868171975227769803894069435301888))))
(assert (x387 x858))
(assert (= (and x575 (not x627)) x737))
(assert (= x623 (=> (= (< 0 x756) x103) (and (=> (not x103) x924) (=> (and x103 (= (< 0 x756) x698)) (and (=> (and (and (= x244 x1012) (= x602 0)) (not x698)) x773) (=> (and (and (= (x46 x556) x63) (= (= x63 x889) x98) (= (x615 1461501637330902918203684832716283019655932542975 x63) x889) (= x689 x556)) x698) (and (=> (and (= (> x375 0) x288) x98) (and (=> (and x288 (and (= x713 (x318 (- x321 31))) (= x38 x563) (= x626 (x46 x38)) (= (x318 (- x474 x563)) x321) (= x109 (or (and (= (<= x713 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x626 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x626 x713)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x713) (> x626 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))) (and (=> (and x109 (and (= (> x279 18446744073709551615) x627) (= (x46 x642) x279) (= x642 (x780 (+ x626 x563))))) (and (=> (and x627 (and (= x602 0) (= x1012 x244))) x773) (=> (and (and (= (x780 (+ 32 x642)) x173) (= x476 (x318 (- x474 x279))) (= (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x173) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x476)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x476) (<= x173 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x173 x476))) x508)) (not x627)) (and (=> (and (not x508) (and (= x316 (> x449 0)) (or (and x316 (and (= (x258 (x223 x63)) x512) (= (>= (x918 (x223 x276)) x87) x809) x809 (= (= (x918 (x223 x63)) x512) x147) (= (x258 (x223 x276)) x87) (> 4294967296 x839) x147)) (not x316)))) x148) (=> (and x508 (and (= x602 0) (= x1012 x244))) x773))))) (=> (and (and (= 0 x602) (= x244 x1012)) (not x109)) x773))) (=> (and (not x288) (and (= x1012 x244) (= x602 0))) x773))) (=> (and (and (= 0 x602) (= x244 x1012)) (not x98)) x773)))))))))
(assert (= (or (and (not x765) x293) x1020) x1006))
(assert (= x79 (and x873 x460)))
(assert (not x825))
(assert (x387 x1030))
(assert (= (x1018 4739670319144124481003130557741556594755290868171975227769803894069435301888) (x223 4739670319144124481003130557741556594755290868171975227769803894069435301888)))
(assert (x387 x424))
(assert (x387 x184))
(assert (= x232 (or x466 x129)))
(assert (= (and x945 (not x299)) x931))
(assert (x855 x56))
(assert (x387 x600))
(assert (= (x979 (x1018 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x190 (and (not x658) x586)))
(assert (x387 x331))
(assert (= x987 (and x79 (not x760))))
(assert (= (and (not x133) x150) x69))
(assert (= x911 (and (not x757) x540)))
(assert (x387 x974))
(assert (x387 x257))
(assert (x387 x343))
(assert (x387 x63))
(assert (= x250 (and x83 x960)))
(assert (= (and x405 (not x417)) x65))
(assert (= (and x150 x133) x1007))
(assert (= x13 (and x787 x628)))
(assert (and (x993 x863 1461501637330902918203684832716283019655932542976) (x454 x863 1461501637330902918203684832716283019655932542976) (x220 x863 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x277 x863 1461501637330902918203684832716283019655932542976) (* (x767 x863 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x863))))
(assert (= (and x618 (not x613)) x71))
(assert (x387 x798))
(assert (x387 x644))
(assert (= (x412 (+ (- (+ 196 (- x1056 160)) 196) (x780 (+ x95 196)))) 0))
(assert (x387 x688))
(assert (= x439 (=> (and (or (not x123) x123) (= x123 (= x839 0))) x224)))
(assert (= (and (not x549) x515) x305))
(assert (x387 x219))
(assert (x387 x748))
(assert (= (x412 (+ (x780 (+ x95 196)) (- (+ (- x860 x981) x1049) 196))) 0))
(assert (x387 x77))
(assert (x387 x761))
(assert (= 2005408114 (x979 (x1018 2005408114))))
(assert (x387 x400))
(assert (x387 x67))
(assert (x387 x143))
(assert (x387 x28))
(assert (x778 x195))
(assert (x387 x449))
(assert (= (=> (and (or (and (= x581 x342) (not x429)) (and x429 (and (> 4294967296 x59) (= x342 1)))) (and (not (or (and (= (<= x660 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x660 32)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x660))) (= (x780 (+ 31 x660)) x3) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x3) x34) (<= x420 1461501637330902918203684832716283019655932542975) (= (> x581 0) x429) (= (x480 x450) x420) (= (x780 (+ x450 x34)) x614) (not (= x442 0)))) x949) x507))
(assert (x387 x437))
(assert (x157 x751))
(assert (= (or x735 x112) x523))
(assert (= 2249206060 (x979 (x1018 2249206060))))
(assert (= (or x668 x372 x206 x647 x732) x484))
(assert (x387 x642))
(assert (x387 x812))
(assert (x387 x185))
(assert (x855 x180))
(assert (=> (>= 10000 x645) (= (x1018 x645) (x223 x645))))
(assert (= x518 (and x278 (not x903))))
(assert (x891 x595))
(assert (x387 x88))
(assert (= (x979 (x1018 33582922474372145882413589741236248003507108108518759994751911431010219196416)) 33582922474372145882413589741236248003507108108518759994751911431010219196416))
(assert (x387 x311))
(assert (x387 x994))
(assert (x855 x863))
(assert (= x367 (and x132 x862)))
(assert (x387 x210))
(assert (= (x10 x1051) 0))
(assert (x387 x58))
(assert (x387 x463))
(assert (x387 x490))
(assert (x891 x838))
(assert (x157 x437))
(assert (x387 x695))
(assert (x387 x808))
(assert (= (and (not x1037) x141) x636))
(assert (x387 x971))
(assert (x387 x548))
(assert (= (and x158 x783) x362))
(assert (= x789 (and (not x960) x83)))
(assert (x387 x743))
(assert (x387 x524))
(assert (= (or x1048 x955 x636 x911 x847) x876))
(assert (= x741 (and x945 x299)))
(assert (x387 x543))
(assert (= x397 (or (and x596 (not x345)) x443)))
(assert (= (x412 (+ (x780 (+ x95 196)) (- (+ (- x860 160) 196) 196))) 0))
(assert (x387 x171))
(assert (x387 x415))
(assert (x387 x322))
(assert (x387 x856))
(assert (= (or x887 x752) x538))
(assert (x855 x641))
(assert (x387 x90))
(assert (x387 x713))
(assert (x387 x811))
(assert (x387 x254))
(assert (= x830 (and x864 (not x360))))
(assert (x387 x52))
(assert (x387 x307))
(assert (x891 x180))
(assert (and (x993 x819 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x819 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x819 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x819 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x819 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x819))))
(assert (x387 x580))
(assert (x387 x160))
(assert (= 0 (x412 224)))
(assert (x387 x805))
(assert (x387 x517))
(assert (x387 x906))
(assert (= (and (not x255) x414) x1053))
(assert (= 0 (x718 (- x1056 x974))))
(assert (x387 x170))
(assert (x387 x956))
(assert (and (x993 x207 32) (x454 x207 32) (x220 x207 32) (=> (> 32 0) (= (+ (x277 x207 32) (* (x767 x207 32) 32)) x207))))
(assert (and (x993 x736 32) (x454 x736 32) (x220 x736 32) (=> (> 32 0) (= (+ (x277 x736 32) (* (x767 x736 32) 32)) x736))))
(assert (= x499 true))
(assert (= (and (not x158) x783) x337))
(assert (x891 x940))
(assert (x855 x948))
(assert (= x36 (=> (and (= (x318 (- x716 x182)) x744) (= (x780 (+ x182 32)) x121) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x838) x88) (= (x780 (+ 31 x263)) x838) (= (x456 x209) x883) (= (x780 (+ 32 x716)) x977) (= (> x883 0) x261) (= x716 (x780 (+ x315 x88)))) (and (=> (and (and (= x952 (x998 x996)) (= x938 x996) (= (< 32 x883) x640) (= x683 x977)) x261) (and (=> (and x640 (and (= x843 (x525 x608)) (= x608 (x780 (+ x938 32))) (= x880 (x780 (+ 32 x977))) (= (> x883 64) x997))) (and (=> (and (not x997) (= x580 64)) x559) (=> (and x997 (and (= x307 (x313 x685)) (= x685 (x780 (+ 64 x938))) (= x486 (< 96 x883)) (= (x780 (+ 64 x977)) x619))) (and (=> (and (= 96 x580) (not x486)) x559) (=> x486 x815))))) (=> (and (not x640) (= x580 32)) x559))) (=> (and (= 0 x580) (not x261)) x559)))))
(assert (= 0 (x412 (+ (- x750 196) (x780 (+ x95 196))))))
(assert (= x783 (or x268 x859)))
(assert (x387 x144))
(assert (x387 x671))
(assert (= (x979 (x223 x407)) x407))
(assert (= (=> (= x785 (not (> x249 128))) (and (=> (= x700 128) x238) x785)) x1035))
(assert (and (x993 x437 32) (x454 x437 32) (x220 x437 32) (=> (> 32 0) (= (+ (x277 x437 32) (* (x767 x437 32) 32)) x437))))
(assert (x387 x375))
(assert (= x443 (and x345 x596)))
(assert (and (x560 32 x756) (x547 32 x756) (= (x26 32 x756) (* 32 x756)) (x198 32 x756) (x1033 32 x756) (x802 32 x756) (and (= (* 32 (- x756 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 32 (- x756 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x756 32) (* x756 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x756)) (= (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x756 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x756 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x756 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (= (or x1042 x782) x945))
(assert (= (and x76 (not x986)) x628))
(assert (= (x979 (x1018 3705713892)) 3705713892))
(assert (= (x412 (+ (- (+ (- x858 x981) x1049) 196) (x780 (+ x95 196)))) 0))
(assert (x891 x863))
(assert (x387 x248))
(assert (= (or x392 x308) x405))
(assert (and (x560 32 x375) (x547 32 x375) (= (x26 32 x375) (* 32 x375)) (x198 32 x375) (x1033 32 x375) (x802 32 x375) (and (= (* 32 (- x375 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 32 (- x375 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x375 32) (* x375 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x375)) (= (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x375 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x375 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x375 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x387 x441))
(assert (and (x993 x595 32) (x454 x595 32) (x220 x595 32) (=> (> 32 0) (= (+ (x277 x595 32) (* (x767 x595 32) 32)) x595))))
(assert (= x312 (and (not x288) x142)))
(assert (x855 x531))
(assert (x387 x243))
(assert (= (and x256 x896) x837))
(assert (x705 x543))
(assert (x387 x762))
(assert (x387 x981))
(assert (= x274 (and x564 (not x585))))
(assert (x891 x207))
(assert (x891 x641))
(assert (=> (>= 10000 x63) (= (x223 x63) (x1018 x63))))
(assert (x157 x838))
(assert (x387 x131))
(assert (x387 x376))
(assert (= 0 (x718 (- 160 x974))))
(assert (x387 x807))
(assert (= 0 (x718 (- x441 x974))))
(assert (= x664 (and x851 x297)))
(assert (x387 x72))
(assert (= (and (not x791) x216) x57))
(assert (x387 x78))
(assert (= 1845979623 (x979 (x1018 1845979623))))
(assert (= x479 (and x737 x508)))
(assert (= (and (not x486) x336) x647))
(assert (= (and x310 (not x640)) x372))
(assert (= (and x123 x397) x392))
(assert (and (x993 x940 32) (x454 x940 32) (x220 x940 32) (=> (> 32 0) (= (+ (x277 x940 32) (* (x767 x940 32) 32)) x940))))
(assert (= x831 (=> (= (not (< 1 x756)) x117) (and x924 x117))))
(assert (= (and x226 (not x769)) x799))
(assert (= (and x361 x692) x868))
(assert (x855 x695))
(assert (= (x412 (+ (- x60 196) (x780 (+ x95 196)))) 0))
(assert (x387 x431))
(assert (x387 x910))
(assert (x387 x1))
(assert (x387 x471))
(assert (= (and x662 x484) x849))
(assert (x387 x218))
(assert (x387 x670))
(assert (x387 x269))
(assert (= (x223 2220280665) (x1018 2220280665)))
(assert (x387 x587))
(assert (x387 x604))
(assert (x387 x1017))
(assert (x387 x814))
(assert (= 0 (x412 (+ (x780 (+ x95 196)) (- x824 196)))))
(assert (x387 x251))
(assert (= (=> (and (= x244 x164) (= x530 x602) (= x84 x907)) x314) x773))
(assert (x387 x952))
(assert (x705 x438))
(assert (x387 x1008))
(assert (x387 x608))
(assert (x778 x375))
(assert (x157 x203))
(assert (x387 x1038))
(assert (x855 x609))
(assert (and (x993 x207 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x207 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x207 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x207 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x207 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x207))))
(assert (= (x412 x710) 0))
(assert (x178 x160))
(assert (x387 x605))
(assert (= x772 (=> (and (= x904 (x780 (+ x325 32))) (= x661 (x780 (+ x977 x376))) (= (< 0 x343) x913) (= x819 (x780 (+ x883 31))) (= x99 (x318 (- x661 x182))) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x819) x376) (= x325 (x780 (+ x121 32))) (= x389 (x780 (+ 32 x661)))) (and (=> (and (not x913) (= x389 x169)) x211) (=> (and x913 (and (<= x45 1461501637330902918203684832716283019655932542975) (= (x780 (+ x928 32)) x709) (= (x25 x928) x45) (= (x780 (+ 32 x389)) x331) (= x607 (< 1 x343)))) (and (=> (and (= x169 x331) (not x607)) x211) (=> (and (and (= x219 (x780 (+ x331 32))) (= x1047 (> x343 2)) (<= x1014 1461501637330902918203684832716283019655932542975) (= (x780 (+ 32 x709)) x901) (= x1014 (x25 x709))) x607) (and (=> (and (= x219 x169) (not x1047)) x211) (=> (and (and (= x29 (x780 (+ 32 x901))) (= x522 (x780 (+ 32 x219))) (= (< 3 x343) x1016) (= x811 (x25 x901)) (<= x811 1461501637330902918203684832716283019655932542975)) x1047) (and (=> (and (= x169 x522) (not x1016)) x211) (=> x1016 x958)))))))))))
(assert (x387 x118))
(assert (x387 x682))
(assert (x387 x905))
(assert (= 0 (x718 (- x1051 x974))))
(assert (= (or x884 x27 x932) x293))
(assert (x387 x541))
(assert (x387 x84))
(assert (x855 x437))
(assert (= x666 (and x237 x42)))
(assert (x387 x32))
(assert (= (and x333 x1016) x702))
(assert (= x206 (and x486 x336)))
(assert (x387 x363))
(assert (x387 x389))
(assert (x157 x890))
(assert (x387 x948))
(assert (x387 x833))
(assert (= x167 (and (not x1011) x134)))
(assert (x387 x16))
(assert (= (or x992 x1036 x479 x868 x655 x312 x837 x200 x518 x707 x274 x799 x13 x529 x328 x86 x365 x205 x80 x521 x854 x472 x684 x1034 x984 x19 x1031 x347 x71 x962 x694 x1019 x651 x65) x932))
(assert (x387 x843))
(assert (x387 x690))
(assert (= (x1018 3572374928) (x223 3572374928)))
(assert (= x246 (and x125 x686)))
(assert (x387 x33))
(assert (= (x10 192) 0))
(assert (= x529 (and x666 x534)))
(assert (= x543 (x979 (x223 x543))))
(assert (x387 x509))
(assert (x387 x17))
(assert (x387 x512))
(assert (and (x560 32 x195) (x547 32 x195) (= (x26 32 x195) (* 32 x195)) (x198 32 x195) (x1033 32 x195) (x802 32 x195) (and (= (* 32 (- x195 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 32 (- x195 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x195 32) (* x195 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x195)) (= (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x195 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x195 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x195 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (= (=> (and (or (not x549) x549) (= x549 (> x700 x249))) x623) x238))
(assert (x387 x967))
(assert (x387 x685))
(assert (x387 x330))
(assert (and (x993 x595 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x595 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x595 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x595 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x595 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x595))))
(assert (= (x979 (x1018 113209349505197351213641468582317386984598294884268236158119619414039440916480)) 113209349505197351213641468582317386984598294884268236158119619414039440916480))
(assert (= (x1018 2329570063) (x223 2329570063)))
(assert (x387 x556))
(assert (x387 x937))
(assert (x387 x973))
(assert (x387 x838))
(assert (x387 x848))
(assert (x387 x764))
(assert (= (and x765 x293) x1020))
(assert (= (and x935 x356) x565))
(assert (= (x979 (x1018 62805084655870755976952745400290271510621614971557940054860603637793562820608)) 62805084655870755976952745400290271510621614971557940054860603637793562820608))
(assert (= (x412 (+ (- (+ x1049 (- 160 x981)) 196) (x780 (+ 196 x95)))) 0))
(assert (x387 x450))
(assert (= (and (not x1047) x567) x726))
(assert (= (and x554 x351) x519))
(assert (x387 x875))
(assert (= (or x664 x768) x108))
(assert (x387 x530))
(assert (x387 x114))
(assert (x387 x124))
(assert (x387 x672))
(assert (x387 x9))
(assert (x891 x197))
(assert (x387 x161))
(assert (= x142 (and x98 x532)))
(assert (= x707 (and (not x152) x583)))
(assert (x387 x100))
(assert (= x825 (=> (and (and (<= x631 255) (>= 1461501637330902918203684832716283019655932542975 x32) (<= 0 x161) (<= 0 x817) (= x973 x1012) (= true x11) (= x471 x254) (<= x165 1461501637330902918203684832716283019655932542975) (>= x254 0) (= (x498 (x223 x276)) x306) (>= x1012 0) (not (> 2220280665 x867)) (>= x638 0) (<= x101 79228162514264337593543950335) (= x218 (x504 (x223 x276))) (<= 0 x633) (>= 1461501637330902918203684832716283019655932542975 x633) (<= 0 x218) (>= x165 0) (>= x28 0) (<= x100 255) (= (x504 (x223 x416)) x562) (not (= 3572374928 x867)) (<= x638 255) (<= 0 x78) (>= 1461501637330902918203684832716283019655932542975 x458) (= (< 0 (x498 (x223 x276))) x418) x957 (> x276 0) (<= x243 1461501637330902918203684832716283019655932542975) (not (= x867 3084411429)) (<= x926 1461501637330902918203684832716283019655932542975) (>= x357 0) (= x936 1262878978) (<= 0 x801) (>= 1461501637330902918203684832716283019655932542975 x411) (<= 0 x926) (<= 0 x411) (= 3705713892 x867) (= x407 x817) (<= x740 255) (<= 0 x956) (>= x644 0) (>= 1461501637330902918203684832716283019655932542975 x47) (<= 0 x562) (>= 1461501637330902918203684832716283019655932542975 x159) (>= x909 0) (<= x1012 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x131 0) (= false x340) (>= 1461501637330902918203684832716283019655932542975 x161) (<= x78 1461501637330902918203684832716283019655932542975) (>= 255 x956) (>= 1461501637330902918203684832716283019655932542975 x1008) (>= x458 0) (= (< 0 (x498 (x223 x416))) x957) (<= 0 x120) (= x174 false) (<= 0 x631) (>= 1461501637330902918203684832716283019655932542975 x801) (>= x145 0) (< 0 x306) (<= 0 x159) (<= x131 1461501637330902918203684832716283019655932542975) (> x416 0) (<= x644 255) (>= 1461501637330902918203684832716283019655932542975 x588) (>= 1461501637330902918203684832716283019655932542975 x28) (>= 255 x357) (not (= x276 x416)) (not (< x867 3084411429)) (= false x503) (<= x817 1461501637330902918203684832716283019655932542975) (>= x100 0) (<= x909 1461501637330902918203684832716283019655932542975) (<= 0 x740) (<= 0 x1008) (<= x254 1461501637330902918203684832716283019655932542975) (>= x32 0) (>= x47 0) (<= x276 1461501637330902918203684832716283019655932542975) (>= 255 x120) x418 (<= 0 x243) (<= x145 1461501637330902918203684832716283019655932542975) (<= 0 x101) (>= x588 0) (= 5 x176) (>= 1461501637330902918203684832716283019655932542975 x416)) (and (> 1461501637330902918203684832716283019655932542976 x407) (= x225 (x504 (x223 x407))) (= x393 (= 0 x407)) (= x659 (> x407 0)) (= x885 (> x74 x225)) (or x393 x659) (= x624 x973))) (and (=> (and x885 (and (= x1012 x136) (= x283 false) (= x673 true))) x939) (=> (and (not x885) (and (= x410 (x780 (+ 32 x349))) (= x67 x727) (not (> 4 x1030)) (not (< 18446744073709551615 x329)) (not (> x447 18446744073709551615)) (not (> x906 x1030)) (= x239 (> x209 x95)) (= (x780 (+ 32 x209)) x938) (= x609 (x780 (+ x166 31))) (>= x881 0) (= (x318 (- x1030 4)) x743) (not (> x21 18446744073709551615)) (= (x780 (+ x282 x928)) x906) (>= x774 0) (= x407 x774) (= (x780 (+ x400 4)) x271) (not (< x1030 x902)) (<= x774 1461501637330902918203684832716283019655932542975) (= x695 (x780 (+ x688 31))) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x203) x124) (not (> x67 18446744073709551615)) (= x582 (x780 (+ x74 x828))) (= 0 x762) (not (> x195 18446744073709551615)) (= x377 (x504 (x223 x407))) (= x191 (x25 x168)) (= x554 (< 0 x263)) (= x693 (- x377 x74)) (= x41 (x177 (* x195 32))) (= x203 (x780 (+ x191 31))) (= x897 (x780 (+ x349 31))) (= x670 (x780 (+ x533 x191))) (= x236 (x780 (+ x191 160))) (= (x25 x574) x343) (= x682 x407) (not (or (and (> 160 x743) (= true (<= x743 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x743 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x985 x813) (= x427 (< 18446744073709551615 x209)) (< (+ x734 x828) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x780 (+ x938 x166)) x273) (= x970 (or x826 x239)) (= (x498 (x223 x276)) x971) (= (x386 (x223 x276)) x828) (= x315 (x780 (+ x210 32))) (<= 0 x9) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x609) x808) (= (x780 (+ 32 x271)) x606) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x695) x330) (or (and (> x1030 x269) (= (<= x269 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1030 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1030) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x269))) (= x463 x953) (> x971 0) (< x989 2220280665) (= x989 1262878978) (or (and (<= x1030 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x897)) (and (> x1030 x897) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x897) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1030)))) (= x447 x400) (= (> x95 18446744073709551615) x826) (not (< x1030 x280)) (not (> x343 18446744073709551615)) (<= x881 1461501637330902918203684832716283019655932542975) (= x144 x953) (= x166 (x25 x349)) (= (or x427 x844) x461) (= (x780 (+ x184 4)) x574) (= (x780 (+ x606 x41)) x902) (= x844 (> 128 x209)) (= x263 (x425 128)) (= x182 (x780 (+ 4 x95))) (= x248 (x780 (+ x271 31))) (= (x780 (+ x124 32)) x688) (= (x780 (+ 32 x168)) x533) (not (> x191 18446744073709551615)) (= (x780 (+ x410 x166)) x280) (= x9 x985) (= x625 (x780 (+ x808 32))) (<= x9 1461501637330902918203684832716283019655932542975) (= x184 x329) (not (< x1030 x670)) (and (= (<= x1030 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (> x1030 163)) (= x168 (x780 (+ 4 x727))) (= (x780 (+ 4 x1052)) x349) (= x928 (x780 (+ 32 x574))) (= x95 (x780 (+ x617 x209))) (= x209 (x780 (+ x330 128))) (= x848 (x780 (+ 31 x574))) (= x195 (x25 x271)) (not (= 1245659826 x989)) (= x1003 (ite x970 1 0)) (= (x177 (* x343 32)) x282) (= x21 x1052) (= x269 (x780 (+ 31 x168))) (= x1003 0) (not (< x989 1245659826)) (or (and (> x1030 x248) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x248) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1030))) (and (<= x1030 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x248 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1030) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x848)) (> x1030 x848)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1030) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x848))) (= (x780 (+ 160 x182)) x210) (= (ite x461 1 0) x762) (not (> x166 18446744073709551615)) (= (x780 (+ x625 31)) x207) (= x734 x74) (= x617 (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x207)))) (and (=> (and (= 0 x663) (not x554)) x408) (=> (and (and (= x350 (> x263 32)) (= x315 x433) (= (x495 160) x593)) x554) (and (=> (and (not x350) (= 32 x663)) x408) (=> (and (and (= (x780 (+ x315 32)) x722) (= x251 (x370 192)) (= (< 64 x263) x62)) x350) (and (=> (and (not x62) (= x663 64)) x408) (=> (and (and (= x571 (x505 224)) (= (< 96 x263) x947) (= (x780 (+ 64 x315)) x413)) x62) (and (=> (and (= 96 x663) (not x947)) x408) (=> x947 x999)))))))))))))
(assert (x387 x582))
(assert (x387 x871))
(assert (= (and (not x686) x125) x888))
(assert (x387 x126))
(assert (x387 x817))
(assert (= x684 (and x31 x1032)))
(assert (= (and x142 x288) x601))
(assert (= (and x797 x327) x832))
(assert (x387 x940))
(assert (x387 x734))
(assert (x387 x494))
(assert (x891 x890))
(assert (x387 x728))
(assert (x387 x476))
(assert (= (and x186 x665) x847))
(assert (x387 x317))
(assert (= x651 (and x327 (not x797))))
(assert (x387 x82))
(assert (x387 x169))
(assert (=> (<= x416 10000) (= (x223 x416) (x1018 x416))))
(assert (= x416 (x979 (x223 x416))))
(assert (x387 x1052))
(assert (x387 x385))
(assert (x387 x23))
(assert (= x859 (and x430 x747)))
(assert (x387 x653))
(assert (= x864 (or x1043 x502 x149)))
(assert (= (x979 (x1018 79228162514264337593543950335)) 79228162514264337593543950335))
(assert (= (and x851 (not x297)) x768))
(assert (x157 x531))
(assert (= (x412 256) 0))
(assert (= (and x741 x775) x586))
(assert (x387 x213))
(assert (x387 x866))
(assert (= (x10 x520) 0))
(assert (x855 x3))
(assert (x387 x624))
(assert (x387 x736))
(assert (x387 x722))
(assert (= x732 (and x287 (not x997))))
(assert (x387 x435))
(assert (x387 x902))
(assert (= x1031 (and x255 x414)))
(assert (= (x979 (x1018 54065695799311150304516525983669583430195215316752708547810291668471328538624)) 54065695799311150304516525983669583430195215316752708547810291668471328538624))
(assert (= (x412 (+ (x780 (+ 196 x95)) (- (+ x1049 (- x520 x981)) 196))) 0))
(assert (= 0 (x718 (- x192 x974))))
(assert (x387 x938))
(assert (x891 32))
(assert (= x314 (=> (and (or (not x765) x765) (= x765 (= x530 0))) x465)))
(assert (= x694 (and x914 x800)))
(assert (= x211 (=> (and (= x604 (x780 (+ x904 32))) (= x415 (x177 (* 32 x195))) (= (x780 (+ x169 32)) x545) (= (< 0 x195) x85) (= x353 (x318 (- x169 x182))) (= (x780 (+ x415 x545)) x253)) (and (=> (and (= x253 x1038) (not x85)) x594) (=> x85 x265)))))
(assert (x387 x89))
(assert (= x268 (and x747 (not x430))))
(assert (= x992 (and (not x698) x35)))
(assert (x387 x59))
(assert (x387 x941))
(assert (x387 x626))
(assert (x387 x904))
(assert (x387 x792))
(assert (= 0 (x412 (+ (x780 (+ x95 196)) (- (+ x1049 (- x1056 x981)) 196)))))
(assert (x387 x164))
(assert (= (x223 1245659826) (x1018 1245659826)))
(assert (x387 x874))
(assert (= (x223 33582922474372145882413589741236248003507108108518759994751911431010219196416) (x1018 33582922474372145882413589741236248003507108108518759994751911431010219196416)))
(assert (x387 x730))
(assert (x387 x921))
(assert (x387 x334))
(assert (= x511 (=> (= (= x969 0) x914) (and (=> (and (and (= x1012 x244) (= 0 x602)) x914) x773) (=> (and (and (= (x780 (+ x154 3)) x792) (= (x780 (+ x185 32)) x672) (= x378 (> x92 0)) (= (x622 x858) x92) (= (x780 (+ x185 32)) x154)) (not x914)) (and (=> (and (not x378) (= x371 0)) x217) (=> (and x378 (and (= x264 x981) (= x335 (x622 x264)) (= x792 x1017) (= x873 (< 32 x92)))) (and (=> (and x873 (and (= x760 (> x92 64)) (= x1001 (x780 (+ 32 x792))) (= x520 (x780 (+ 32 x981))) (= x1027 (x584 x520)))) (and (=> (and x760 (and (= x730 (x252 x1051)) (= (x780 (+ x981 64)) x1051) (= (x780 (+ 64 x792)) x1) (= (< 96 x92) x686))) (and (=> x686 x302) (=> (and (= x371 96) (not x686)) x217))) (=> (and (not x760) (= x371 64)) x217))) (=> (and (not x873) (= x371 32)) x217)))))))))
(assert (x157 x56))
(assert (= x141 (and x757 x540)))
(assert (= x54 (and x876 x489)))
(assert (= x146 (and (not x607) x459)))
(assert (= (and x132 (not x862)) x964))
(assert (= x341 (and (not x446) x523)))
(assert (= x408 (=> (and (or (and (= (x780 (+ x315 x263)) x590) x297) (not x297)) (= (< x263 x663) x297)) x36)))
(assert (x891 x695))
(assert (x387 x1040))
(assert (= x665 (and x319 x91)))
(assert (and (x993 x63 1461501637330902918203684832716283019655932542976) (x454 x63 1461501637330902918203684832716283019655932542976) (x220 x63 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x277 x63 1461501637330902918203684832716283019655932542976) (* (x767 x63 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x63))))
(assert (x387 x597))
(assert (= x655 (and x516 x894)))
(assert (= (and x485 x43) x669))
(assert (x387 x916))
(assert (and (x993 x736 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x736 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x736 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x736 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x736 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x736))))
(assert (= (and x291 x965) x115))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x979 (x1018 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x387 x411))
(assert (x387 x300))
(assert (x387 x828))
(assert (= 0 (x718 (- x860 x974))))
(assert (x387 x38))
(assert (x387 x660))
(assert (= x224 (=> (= (> x449 0) x417) (and (=> (and (not x417) (and (= 0 x602) (= x244 x1012))) x773) (=> x417 x831)))))
(assert (x387 x197))
(assert (= (x10 x1056) 0))
(assert (= 0 (x412 192)))
(assert (x387 x996))
(assert (= (and x991 (not x947)) x784))
(assert (= (x223 3705713892) (x1018 3705713892)))
(assert (x387 x413))
(assert (= (or x643 x830) x618))
(assert (= x27 (and x516 (not x894))))
(assert (= x575 (and x601 x109)))
(assert (= (and x316 x1029) x295))
(assert (x387 x681))
(assert (= (x223 18446744073709551615) (x1018 18446744073709551615)))
(assert (x387 x3))
(assert (= (x412 (+ (x780 (+ 196 x95)) (- (+ (- x264 x981) x1049) 196))) 0))
(assert (x387 x159))
(assert (x387 x779))
(assert (= (x412 (+ (x780 (+ 196 x95)) (- (+ 196 (- x1051 160)) 196))) 0))
(assert (x387 x321))
(assert (= (x1018 3084411429) (x223 3084411429)))
(assert (x387 x154))
(assert (x387 x442))
(assert (= x324 (and x214 (not x1000))))
(assert (= (or x565 (and x935 (not x356))) x516))
(assert (= 0 (x718 (- x520 x974))))
(assert (x387 x230))
(assert (= (=> (and (= (= x127 0) x356) (or (not x356) x356)) x720) x388))
(assert (and (x993 x437 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x437 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x437 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x437 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x437 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x437))))
(assert (and (x993 x160 1461501637330902918203684832716283019655932542976) (x454 x160 1461501637330902918203684832716283019655932542976) (x220 x160 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x277 x160 1461501637330902918203684832716283019655932542976) (* (x767 x160 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x160))))
(assert (= x96 (and x350 x519)))
(assert (= x1036 (and x231 x104)))
(assert (x387 x661))
(assert (x387 x121))
(assert (x387 x602))
(assert (x387 x813))
(assert (x387 x835))
(assert (= (=> (and (= x543 (x615 1461501637330902918203684832716283019655932542975 x160)) (= x446 (= x524 0)) (= x524 (x498 (x223 x543)))) (and (=> (and x446 (and (= x244 x1012) (= 0 x602))) x773) (=> (and (and (or (and x781 (and x823 (= x1025 (= x22 (x187 (x223 x543)))) x1025 (= x823 (>= (x187 (x223 x276)) x435)) (= (x577 (x223 x276)) x435) (< x1024 4294967296) (= x22 (x577 (x223 x543))))) (not x781)) (= (< 0 x127) x781)) (not x446)) x388))) x924))
(assert (x387 x631))
(assert (x157 x819))
(assert (x387 x758))
(assert (= (and (not x109) x601) x521))
(assert (= (and x351 (not x554)) x810))
(assert (x705 x63))
(assert (= (x1018 79228162514264337593543950335) (x223 79228162514264337593543950335)))
(assert (x387 x8))
(assert (x387 x368))
(assert (x855 x595))
(assert (x387 x94))
(assert (x387 x64))
(assert (= (x979 (x1018 2329570063)) 2329570063))
(assert (x387 x614))
(assert (= (and x51 x669) x216))
(assert (= x160 (x979 (x223 x160))))
(assert (= x1042 (and x679 (not x1050))))
(assert (x387 x225))
(assert (x891 x437))
(assert (x387 x458))
(assert (= (x979 (x223 x276)) x276))
(assert (x778 32))
(assert (x778 x343))
(assert (x157 x3))
(assert (= x465 (=> (and (and (not (= x530 0)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x907) (and (> 32 x907) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x907) true)))) (= (x667 x95) x52) (= (x780 (+ x907 31)) x56) (>= 1461501637330902918203684832716283019655932542975 x52) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x56) x77) (= x749 (< 0 x1040)) (= (x780 (+ x95 x77)) x450)) (or (and (and (< x660 4294967296) (= 1 x442)) x749) (and (= x442 x1040) (not x749)))) x507)))
(assert (x387 x578))
(assert (x387 x881))
(assert (= 0 (x412 (+ (x780 (+ 196 x95)) 96))))
(assert (and (x993 x180 32) (x454 x180 32) (x220 x180 32) (=> (> 32 0) (= (+ (x277 x180 32) (* (x767 x180 32) 32)) x180))))
(assert (x387 x738))
(assert (x387 x410))
(assert (x778 x756))
(assert (x387 x21))
(assert (x387 x81))
(assert (x387 x273))
(assert (= x259 (and x481 (not x55))))
(assert (= x221 (=> (and (= x1046 (= 0 x969)) (or x1046 (not x1046))) x511)))
(assert (= 0 (x412 x685)))
(assert (= (and x677 x285) x1019))
(assert (x891 x948))
(assert (x387 x801))
(assert (x387 x438))
(assert (= (=> (and (= (x780 (+ x792 96)) x983) (= x451 (not (< 128 x92))) (= (x780 (+ x981 96)) x441) (= x541 (x723 x441))) (and (=> (= x371 128) x217) x451)) x302))
(assert (= x706 (and x585 x564)))
(assert (x891 x819))
(assert (x387 x840))
(assert (= (x979 (x223 x63)) x63))
(assert (x891 x736))
(assert (= (x223 1461501637330902918203684832716283019655932542975) (x1018 1461501637330902918203684832716283019655932542975)))
(assert (= x86 (and (not x485) x43)))
(assert (x387 x453))
(assert (x387 x60))
(assert (= 0 (x412 (+ (x780 (+ 196 x95)) (- (+ x1049 (- 192 x981)) 196)))))
(assert (x705 x645))
(assert (= (and x1006 (not x749)) x369))
(assert (= (and x91 (not x319)) x955))
(assert (= (and x760 x79) x125))
(assert (= x2 (=> (and (= x299 (> x950 0)) (= x605 96) (= x385 (x780 (+ 96 x23))) (= x70 (x318 (- x23 x185))) (= (x404 128) x950) (= (x780 (+ x792 x92)) x23) (= (x318 (- x70 32)) x875) (= x840 (x780 (+ 32 x385)))) (and (=> (and x299 (and (= (x105 160) x61) (= x840 x323) (= (< 32 x950) x775))) (and (=> (and (not x775) (= x988 32)) x444) (=> (and (and (= (> x950 64) x658) (= (x780 (+ x840 32)) x738) (= x616 (x1021 192))) x775) (and (=> (and x658 (and (= x703 (x780 (+ 64 x840))) (= (x776 224) x213) (= (> x950 96) x1000))) (and (=> (and (not x1000) (= 96 x988)) x444) (=> x1000 x162))) (=> (and (= x988 64) (not x658)) x444))))) (=> (and (not x299) (= x988 0)) x444)))))
(assert (x387 x598))
(assert (= x643 (and x360 x864)))
(assert (x387 x344))
(assert (x387 x824))
(assert (= (and x691 (not x429)) x887))
(assert (= (or x97 x190 x510 x931 x324) x83))
(assert (= x510 (and x741 (not x775))))
(assert (= x497 (and x6 x753)))
(assert (x387 x595))
(assert (x387 x852))
(assert (= (or x789 x250) x469))
(assert (x387 x570))
(assert (x387 x558))
(assert (= (x1018 102499615646744134772650717477688572466918151731817230690449879178893085114368) (x223 102499615646744134772650717477688572466918151731817230690449879178893085114368)))
(assert (= (=> (and (= (> x406 x7) x6) (or (and (= x202 (x780 (+ x7 x551))) x6) (not x6))) x899) x355))
(assert (=> (>= 10000 x276) (= (x1018 x276) (x223 x276))))
(assert (x387 x590))
(assert (x387 x816))
(assert (= (=> (and (= (x780 (+ 31 x943)) x948) (= x303 (x318 (- x1030 x606))) (= (x780 (+ x606 x842)) x181) (= (x780 (+ x170 x925)) x114) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x948) x170) (= (x318 (- x303 31)) x558) (= x842 (x25 x606)) (or (and (> x842 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x558 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x558) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x842)) (< x842 x558))) (= (x780 (+ x943 x925)) x681) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x230) (<= x151 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x151 x230)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x230) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x151)))) (not (< 18446744073709551615 x943)) (= (not (> x195 1)) x537) (= x814 x415) (= x151 (x780 (+ x181 32))) (= x925 (x780 (+ x253 32))) (= (x318 (- x1030 x943)) x230) (= x943 (x25 x181))) (and x537 (=> (= x114 x1038) x594))) x265))
(assert (= (=> (and (= (x780 (+ x171 32)) x551) (= (x836 x858) x7) (= x457 (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x890)) (= x755 (> x7 0)) (= x431 (x780 (+ x17 32))) (= x937 (x318 (- x171 x17))) (= x890 (x780 (+ 31 x492))) (= (x780 (+ x805 x457)) x171)) (and (=> (and (= 0 x406) (not x755)) x355) (=> (and x755 (and (= x862 (> x7 32)) (= x860 x981) (= x874 (x759 x860)) (= x551 x995))) (and (=> (and (not x862) (= x406 32)) x355) (=> (and (and (= x764 (x780 (+ x551 32))) (= x598 (x780 (+ 32 x981))) (= (x348 x598) x64) (= x1044 (> x7 64))) x862) (and (=> (and x1044 (and (= x1011 (< 96 x7)) (= x1056 (x780 (+ 64 x981))) (= (x194 x1056) x761) (= (x780 (+ x551 64)) x262))) (and (=> (and (= x406 96) (not x1011)) x355) (=> x1011 x247))) (=> (and (not x1044) (= 64 x406)) x355))))))) x421))
(assert (x387 x298))
(assert (x387 x195))
(assert (x891 x609))
(assert (= (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x933) (= x933 (x818 x798)) (= (x780 (+ x317 31)) x751) (= x102 (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x751)) (not (= 0 x487)) (= x978 (x780 (+ x798 x102))) (= x430 (< 0 x548)) (not (or (and (> 32 x317) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x317) true)) (> x317 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (or (and x430 (and (= 1 x257) (> 4294967296 x332))) (and (= x548 x257) (not x430)))) x189) x599))
(assert (= x97 (and x1000 x214)))
(assert (x387 x1024))
(assert (= (x979 (x1018 1553423035)) 1553423035))
(assert (x387 x244))
(assert (= (x10 x598) 0))
(assert (x705 x276))
(assert (= (x223 1845979623) (x1018 1845979623)))
(assert (x387 x689))
(assert (= x735 (and (not x103) x506)))
(assert (and (x993 x948 32) (x454 x948 32) (x220 x948 32) (=> (> 32 0) (= (+ (x277 x948 32) (* (x767 x948 32) 32)) x948))))
(assert (x387 x24))
(assert (= x515 (or x796 x259 x69 x514 x475)))
(assert (= x763 (or x766 x54)))
(assert (and (x560 32 x343) (x547 32 x343) (= (x26 32 x343) (* 32 x343)) (x198 32 x343) (x1033 32 x343) (x802 32 x343) (and (= (* 32 (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 32 (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x343 32) (* x343 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x343)) (= (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x387 x14))
(assert (=> (<= x160 10000) (= (x223 x160) (x1018 x160))))
(assert (x387 x470))
(assert (x387 x552))
(assert (= (x223 2376452955) (x1018 2376452955)))
(assert (= 3572374928 (x979 (x1018 3572374928))))
(assert (= x129 (or x362 x337)))
(assert (= x1032 (and x488 x432)))
(assert (x387 x101))
(assert (x387 x897))
(assert (= (and (not x873) x460) x745))
(assert (x855 x207))
(assert (= x935 (or x822 x544)))
(assert (x387 x358))
(assert (= x179 (=> (and (= (= x33 0) x806) (or (and (not x806) (and (= x779 x33) (= x536 x835))) (and x806 (and (= x835 x536) (= x48 x58) (= 0 x578) (= x790 x126) (= (x841 (x223 x438)) x126) (< (+ x578 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x33 x779) (= (x724 (x223 x276)) x58))))) x527)))
(assert (x387 x377))
(assert (= x800 (or (and (not x1046) x794) x1028)))
(assert (= 0 (x718 (- 224 x974))))
(assert (= (and x226 x769) x104))
(assert (x387 x47))
(assert (x387 x901))
(assert (x387 x399))
(assert (x387 x983))
(assert (= (x223 22445611572322667099362401052093617030957452505749565894135597532943828910080) (x1018 22445611572322667099362401052093617030957452505749565894135597532943828910080)))
(assert (x855 x160))
(assert (and (x993 x203 32) (x454 x203 32) (x220 x203 32) (=> (> 32 0) (= (+ (x277 x203 32) (* (x767 x203 32) 32)) x203))))
(assert (= (and x1009 (not x806)) x149))
(assert (= (and x832 x153) x205))
(assert (= (x979 (x1018 1262878978)) 1262878978))
(assert (and (x993 x56 32) (x454 x56 32) (x220 x56 32) (=> (> 32 0) (= (+ (x277 x56 32) (* (x767 x56 32) 32)) x56))))
(assert (x387 x1051))
(assert (= (and x913 x576) x459))
(assert (= (and x523 x446) x200))
(assert (x387 x87))
(assert (= x287 (and x640 x310)))
(assert (x855 x838))
(assert (x855 x940))
(assert (= x132 (and x763 x755)))
(assert (= x308 (and x397 (not x123))))
(assert (x387 x306))
(assert (x387 x589))
(assert (x387 x192))
(assert (= x927 (=> (and (= x249 (x857 x185)) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x197) x589) (= x197 (x780 (+ x950 31))) (= x15 (> x249 0)) (= (x780 (+ x23 32)) x44) (= (x318 (- x12 x23)) x311) (= x12 (x780 (+ x840 x589)))) (and (=> (and x15 (= x133 (< 32 x249))) (and (=> (and x133 (= (< 64 x249) x701)) (and (=> (and (= x700 64) (not x701)) x238) (=> (and (= (< 96 x249) x55) x701) (and (=> (and (not x55) (= 96 x700)) x238) (=> x55 x1035))))) (=> (and (= x700 32) (not x133)) x238))) (=> (and (= 0 x700) (not x15)) x238)))))
(assert (x387 x908))
(assert (=> (>= 10000 x543) (= (x1018 x543) (x223 x543))))
(assert (x387 x1049))
(assert (x387 x883))
(assert (= x347 (and x193 (not x1004))))
(assert (x387 x982))
(assert (= (and x538 (not x477)) x680))
(assert (= 0 (x412 (+ (- x556 196) (x780 (+ x95 196))))))
(assert (x387 x140))
(assert (x387 x990))
(assert (= x488 (and x898 (not x275))))
(assert (x387 x625))
(assert (x387 x209))
(assert (and (x993 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x56))))
(assert (= (and x76 x986) x365))
(assert (x387 x977))
(assert (x387 x980))
(assert (x387 x663))
(assert (x387 x637))
(assert (x855 x63))
(assert (x387 x447))
(assert (= 0 (x412 (+ 64 (x780 (+ x95 196))))))
(assert (x387 x107))
(assert (x387 x182))
(assert (= (x654 (x804 x276 x570)) 0))
(assert (= (and x903 x278) x256))
(assert (= (and x669 (not x51)) x502))
(assert (x387 x483))
(assert (= (x718 (- 192 x974)) 0))
(assert (= x452 (and x800 (not x914))))
(assert (x387 x45))
(assert (= 0 (x412 (+ (x780 (+ 196 x95)) 32))))
(assert (x387 x48))
(assert (x387 x907))
(assert (= x226 (and x628 (not x787))))
(assert (= (=> (and (= (= 0 x100) x42) (> 256 x100) (>= 255 x100) (<= 0 x100)) (and (=> (and (and (= 0 x602) (= x1012 x244)) (not x42)) x773) (=> (and (and (= x424 (x394 (x223 x160))) (= x821 (= x639 x812)) (= x175 (x717 (x223 x160))) (> 1461501637330902918203684832716283019655932542976 x926) (= x300 x639) (= (x615 1461501637330902918203684832716283019655932542975 x160) x24) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x424) (= x570 (x215 (x223 x276))) (<= 0 x926) (= x812 x160) (= (= x24 0) x534) (= (x138 (x223 x276)) x298) (= x298 x434) (= x160 (x804 x276 x570)) (= (x770 (x223 x276)) x771) (< (+ x440 x771) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x821 (= x175 x621) (= 0 x440) (<= x926 1461501637330902918203684832716283019655932542975)) x42) (and (=> (and (and (< x458 1461501637330902918203684832716283019655932542976) (< x159 1461501637330902918203684832716283019655932542976) (>= x28 0) (= x646 (x780 (+ 192 x17))) (<= 0 x458) (= (x30 128) x492) (>= 1461501637330902918203684832716283019655932542975 x159) (= x805 (x780 (+ 32 x646))) (= x17 (x780 (+ x185 4))) (>= 1461501637330902918203684832716283019655932542975 x165) (<= x28 1461501637330902918203684832716283019655932542975) (> 1461501637330902918203684832716283019655932542976 x28) (= x645 (x615 1461501637330902918203684832716283019655932542975 x160)) (> 1461501637330902918203684832716283019655932542976 x165) (>= x159 0) (<= 0 x165) (= (< 0 x492) x757) (>= 1461501637330902918203684832716283019655932542975 x458)) (not x534)) (and (=> (and (and (= x1037 (< 32 x492)) (= x833 x805) (= x871 (x188 160))) x757) (and (=> (and (= x90 32) (not x1037)) x359) (=> (and x1037 (and (= x344 (x780 (+ x805 32))) (= (x892 192) x994) (= (> x492 64) x319))) (and (=> (and x319 (and (= x186 (> x492 96)) (= x334 (x780 (+ x805 64))) (= x980 (x579 224)))) (and (=> x186 x326) (=> (and (not x186) (= 96 x90)) x359))) (=> (and (= x90 64) (not x319)) x359))))) (=> (and (not x757) (= 0 x90)) x359))) (=> (and (and (= x244 x1012) (= 0 x602)) x534) x773))))) x850))
(assert (and (x993 x948 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x948 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x948 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x948 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x948 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x948))))
(assert (and (x993 x890 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x890 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x890 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x890 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x890 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x890))))
(assert (= (x1018 54065695799311150304516525983669583430195215316752708547810291668471328538624) (x223 54065695799311150304516525983669583430195215316752708547810291668471328538624)))
(assert (x387 x926))
(assert (x387 x617))
(assert (= (and x62 x96) x991))
(assert (x387 x633))
(assert (= 0 (x412 x996)))
(assert (= (and x1044 x367) x134))
(assert (x387 x574))
(assert (x178 x63))
(assert (x387 x551))
(assert (= (or x111 x401) x237))
(assert (x387 x917))
(assert (= (and x519 (not x350)) x339))
(assert (and (x993 x695 32) (x454 x695 32) (x220 x695 32) (=> (> 32 0) (= (+ (x277 x695 32) (* (x767 x695 32) 32)) x695))))
(assert (x387 x953))
(assert (x387 x1001))
(assert (= (and (not x62) x96) x320))
(assert (= x336 (and x287 x997)))
(assert (= 0 (x412 x608)))
(assert (= (x412 (x780 (+ 196 x95))) 0))
(assert (= (and x806 x1009) x1043))
(assert (= x747 (or x66 x680)))
(assert (= (x1018 2005408114) (x223 2005408114)))
(assert (and (x993 x838 32) (x454 x838 32) (x220 x838 32) (=> (> 32 0) (= (+ (x277 x838 32) (* (x767 x838 32) 32)) x838))))
(assert (x387 x203))
(assert (= (and x141 x1037) x91))
(assert (= (x718 (- x264 x974)) 0))
(assert (x387 x744))
(assert (x387 x1014))
(assert (x855 1461501637330902918203684832716283019655932542975))
(assert (x387 x550))
(assert (x387 x933))
(assert (= 4294967296 (x979 (x1018 4294967296))))
(assert (= (and x763 (not x755)) x272))
(assert (x387 x710))
(assert (x387 x74))
(assert (= (x10 x192) 0))
(assert (= x150 (and x469 x15)))
(assert (= (x1018 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x223 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x387 x863))
(assert (x387 x545))
(assert (= (x223 113209349505197351213641468582317386984598294884268236158119619414039440916480) (x1018 113209349505197351213641468582317386984598294884268236158119619414039440916480)))
(assert (x387 x912))
(assert (= (and (not x85) x156) x915))
(assert (x387 x968))
(assert (= x949 (=> (and (or (and (and (= x487 1) (> 4294967296 x317)) x477) (and (= x487 x37) (not x477))) (and (>= 1461501637330902918203684832716283019655932542975 x496) (= (> x37 0) x477) (= (x780 (+ x614 x728)) x798) (= x641 (x780 (+ 31 x59))) (not (or (and (> 32 x59) (= (<= x59 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x59))) (not (= x342 0)) (= x496 (x620 x614)) (= x728 (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x641)))) x599)))
(assert (= 0 (x412 (+ (- (+ (- x441 160) 196) 196) (x780 (+ x95 196))))))
(assert (x387 x379))
(assert (= (and x115 (not x820)) x76))
(assert (x387 x240))
(assert (x387 x563))
(assert (x387 x349))
(assert (= x1009 (or x57 x139)))
(assert (= (and x1046 x794) x1028))
(assert (= (and (not x6) x753) x865))
(assert (x387 x191))
(assert (x387 x920))
(assert (and (x993 x695 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x695 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x695 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x695 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x695 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x695))))
(assert (= (x412 (+ (- (+ 196 (- x598 160)) 196) (x780 (+ x95 196)))) 0))
(assert (= x193 (and (not x896) x256)))
(assert (x387 x180))
(assert (= x217 (=> (and (or (and (= x358 (x780 (+ x792 x92))) x1050) (not x1050)) (= (< x92 x371) x1050)) x2)))
(assert (x387 x416))
(assert (= x1034 (and x366 x566)))
(assert (= 0 (x10 x860)))
(assert (= x884 (and x898 x275)))
(assert (= x247 (=> (and (= x192 (x780 (+ 96 x981))) (= x966 (x106 x192)) (= x338 (x780 (+ x551 96))) (= x235 (not (< 128 x7)))) (and (=> (= x406 128) x355) x235))))
(assert (and (x993 x751 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x751 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x751 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x751 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x751 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x751))))
(assert (x387 x756))
(assert (= x898 (or x428 x915)))
(assert (x387 x739))
(assert (x387 x700))
(assert (= (=> (and (= x629 (x719 256)) (= x905 (x780 (+ 96 x840))) (= (not (< 128 x950)) x879)) (and (=> (= 128 x988) x444) x879)) x162))
(assert (x387 x440))
(assert (= x80 (and x532 (not x98))))
(assert (= (x979 (x1018 2220280665)) 2220280665))
(assert (= x668 (and (not x261) x108)))
(assert (x387 x562))
(assert (x891 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x387 x581))
(assert (x387 x151))
(assert (= x328 (and x575 x627)))
(assert (= (and x1053 (not x396)) x650))
(assert (x387 x181))
(assert (= (x718 (- 128 x974)) 0))
(assert (= 1461501637330902918203684832716283019655932542976 (x979 (x1018 1461501637330902918203684832716283019655932542976))))
(assert (x387 x1056))
(assert (= x214 (and x586 x658)))
(assert (and (x993 x641 32) (x454 x641 32) (x220 x641 32) (=> (> 32 0) (= (+ (x277 x641 32) (* (x767 x641 32) 32)) x641))))
(assert (= x466 (and x499 x885)))
(assert (= x815 (=> (and (= x710 (x780 (+ x938 96))) (= (x780 (+ 96 x977)) x552) (= (x128 x710) x611) (= x712 (not (< 128 x883)))) (and x712 (=> (= 128 x580) x559)))))
(assert (x387 x34))
(assert (x157 x207))
(assert (x387 x867))
(assert (x891 x56))
(assert (x387 x860))
(assert (= x359 (=> (and (or (not x489) (and x489 (= (x780 (+ x492 x805)) x118))) (= x489 (> x90 x492))) x421)))
(assert (= (x10 224) 0))
(assert (x387 x172))
(assert (and (x993 x940 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x940 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x940 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x940 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x940 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x940))))
(assert (= (x412 (+ (x780 (+ x95 196)) (- (+ 196 (- x192 160)) 196))) 0))
(assert (= (and (not x361) x692) x965))
(assert (x387 x212))
(assert (x387 x136))
(assert (x387 x616))
(assert (x387 x496))
(assert (= (x223 1262878978) (x1018 1262878978)))
(assert (x387 x70))
(assert (= (and x1007 x701) x481))
(assert (x387 x708))
(assert (x387 x930))
(assert (x387 x709))
(assert (x387 x279))
(assert (x387 x638))
(assert (x387 x646))
(assert (x387 x978))
(assert (= (x979 (x1018 64069044923792539370177021244577383457373632460708312080110356237917649633280)) 64069044923792539370177021244577383457373632460708312080110356237917649633280))
(assert (x387 x727))
(assert (= x564 (and (not x976) x861)))
(assert (x387 x467))
(assert (= (=> (and (= x275 (or (and (< x807 160) (= (<= x807 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x807))) (not (< x196 1245659826)) (= 2005408114 x196) (= x296 54065695799311150304516525983669583430195215316752708547810291668471328538624) (= x930 x474) (= x744 x494) (= x550 (x498 (x223 x276))) (not (= 1553423035 x196)) (> x550 0) (= x930 (x318 (- x1038 x95))) (not (= 1901074598 x196)) (not (> 4 x474)) (< x196 2220280665) (not (= x196 1245659826)) (= x89 x99) (not (= 1845979623 x196)) (= x929 x353) (<= 292 x474) (= (= (x569 164) x263) x281) (= x483 x463) (= (x318 (- x474 4)) x807) x281 (not (= x196 1262878978))) (and (=> (and x275 (and (= x1012 x164) (= x530 0) (= x907 x84))) x314) (=> (and (= (and (= true (<= x474 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x474 195)) x432) (not x275)) (and (=> (and (not x432) (and (= x244 x1012) (= 0 x602))) x773) (=> (and x432 (and (= (x46 164) x653) (= (< 18446744073709551615 x653) x31))) (and (=> (and x31 (and (= x1012 x244) (= 0 x602))) x773) (=> (and (and (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x736) x517) (= x858 (x780 (+ 128 x517))) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x940) x1010) (= x553 (> 128 x858)) (= (or x1015 x553) x260) (= x797 (= (ite x260 1 0) 0)) (= x736 (x780 (+ x363 31))) (= (> x858 18446744073709551615) x1015) (= x363 (x780 (+ x1010 32))) (= (x780 (+ x653 31)) x940)) (not x31)) (and (=> (and x797 (and (= x153 (> x587 x474)) (= (x780 (+ 196 x653)) x587))) (and (=> (and (and (= (x780 (+ 160 x653)) x155) (= x566 (< 18446744073709551615 x744))) (not x153)) (and (=> (and (and (= x244 x1012) (= x602 0)) x566) x773) (=> (and (not x566) (and (= (x780 (+ x494 4)) x824) (= x708 (x780 (+ 31 x824))) (= (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x708) (<= x474 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x474 x708) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x474) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x708)))) x903))) (and (=> (and (and (= x896 (> x426 18446744073709551615)) (= (x46 x824) x426) (= x1049 (x780 (+ x824 32)))) x903) (and (=> (and (not x896) (and (= x16 (x780 (+ 32 x8))) (= x140 (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x595)) (= (or x657 x364) x635) (= x8 (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x437)) (= x1004 (= (ite x635 1 0) 0)) (= x657 (> x858 x82)) (= x82 (x780 (+ x858 x140))) (= (x780 (+ 31 x16)) x595) (= x364 (> x82 18446744073709551615)) (= x437 (x780 (+ 31 x426))))) (and (=> (and (and (= x602 0) (= x1012 x244)) (not x1004)) x773) (=> (and x1004 (and (= (x780 (+ x426 x1049)) x379) (= x981 (x780 (+ 32 x858))) (= (< x474 x379) x285))) (and (=> (and x285 (and (= 0 x602) (= x1012 x244))) x773) (=> (and (and (= (x780 (+ x426 x981)) x916) (= (> x99 18446744073709551615) x361)) (not x285)) (and (=> (and x361 (and (= x602 0) (= x1012 x244))) x773) (=> (and (and (= x291 (or (and (<= x474 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x368 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x368 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x474 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x368 x474)))) (= (x780 (+ x89 4)) x60) (= x368 (x780 (+ x60 31)))) (not x361)) (and (=> (and (and (= x244 x1012) (= x602 0)) (not x291)) x773) (=> (and (and (= (< 18446744073709551615 x756) x820) (= x756 (x46 x60))) x291) (and (=> (and (and (= (x780 (+ x803 x689)) x687) (= (x177 (* x756 32)) x803) (= (x780 (+ 32 x60)) x689) (= (< x474 x687) x986)) (not x820)) (and (=> (and (not x986) (= x787 (< 18446744073709551615 x353))) (and (=> (and (and (= x750 (x780 (+ x929 4))) (= (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x474)) (and (< x967 x474) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x474)))) x769) (= (x780 (+ x750 31)) x967)) (not x787)) (and (=> (and (and (= x231 (< 18446744073709551615 x375)) (= (x46 x750) x375)) x769) (and (=> (and (and (= (x177 (* 32 x375)) x172) (= (< x474 x917) x976) (= x563 (x780 (+ x750 32))) (= (x780 (+ x172 x563)) x917)) (not x231)) (and (=> (and (and (= x244 x1012) (= 0 x602)) x976) x773) (=> (and (and (>= x100 0) (>= 255 x100) (> 256 x100) (= (= x100 0) x585)) (not x976)) (and (=> (and (not x585) (and (= x1012 x244) (= 0 x602))) x773) (=> (and x585 (and (= (< 0 x1012) x116) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1012) (<= 0 x1012))) (and (=> (and (not x116) (= x185 x82)) x850) (=> (and x116 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1012) (= (= 0 x1012) x152) (>= x1012 0))) (and (=> (and x152 (and (not (> 2220280665 x107)) (= (x498 (x223 x276)) x473) (= x816 (x780 (+ x82 32))) (= x485 (= x863 x748)) (not (= x107 2249206060)) (= 2376452955 x107) (<= x1008 1461501637330902918203684832716283019655932542975) (< x1008 1461501637330902918203684832716283019655932542976) (= x866 64069044923792539370177021244577383457373632460708312080110356237917649633280) (= 4 x671) (= x453 4) (= (x539 x82) x863) (not (= 2220280665 x107)) (not (= 2329570063 x107)) (= x748 (x615 1461501637330902918203684832716283019655932542975 x863)) (not (< x671 4)) (<= 0 x1008) (= x453 x671) (< x107 3084411429) (< 0 x473))) (and (=> (and x485 (and (= (x292 (x223 x438)) x739) (= x438 (x615 1461501637330902918203684832716283019655932542975 x863)) (= x130 (x292 (x223 x276))) (= (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x739 x212)) (>= x130 0)) x51) (= x212 0))) (and (=> (and x51 (and (or (and x791 (and x591 x135 (> 4294967296 x536) (= (>= (x869 (x223 x276)) x634) x591) (= x135 (= x1054 (x869 (x223 x438)))) (= x634 (x878 (x223 x276))) (= (x878 (x223 x438)) x1054))) (not x791)) (and (= (< 0 x33) x791) (= x921 (x793 (x223 x438))) (= x921 x600) (< (+ x212 x921) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x445 x201) (= (x292 (x223 x276)) x201)))) x179) (=> (and (and (= 0 x779) (= x835 0)) (not x51)) x527))) (=> (and (not x485) (and (= x244 x1012) (= x602 0))) x773))) (=> (and (and (= x1012 x244) (= 0 x602)) (not x152)) x773))))))))) (=> (and x231 (and (= 0 x602) (= x244 x1012))) x773))) (=> (and (not x769) (and (= x1012 x244) (= x602 0))) x773))) (=> (and x787 (and (= x244 x1012) (= 0 x602))) x773))) (=> (and (and (= x244 x1012) (= 0 x602)) x986) x773))) (=> (and (and (= x244 x1012) (= x602 0)) x820) x773))))))))))) (=> (and x896 (and (= 0 x602) (= x244 x1012))) x773))) (=> (and (not x903) (and (= x244 x1012) (= x602 0))) x773))))) (=> (and (and (= x602 0) (= x1012 x244)) x153) x773))) (=> (and (not x797) (and (= x602 0) (= x1012 x244))) x773))))))))) x594))
(assert (x387 x49))
(assert (= (=> (and (= x968 (x780 (+ x912 32))) (= x990 (x498 (x223 x645))) (= x93 (x780 (+ 32 x968))) (= x113 (x780 (+ 32 x431))) (= x912 (x780 (+ 32 x113))) (= x255 (= 0 x990))) (and (=> (and (not x255) (and (or (and (and x270 (= (<= x240 (x119 (x223 x276))) x557) (= x270 (= x982 (x119 (x223 x645)))) (< x853 4294967296) (= (x827 (x223 x276)) x240) x557 (= (x827 (x223 x645)) x982)) x396) (not x396)) (= x396 (> x969 0)))) x221) (=> (and x255 (and (= 0 x602) (= x244 x1012))) x773))) x899))
(assert (= x962 (and x861 x976)))
(assert (= (=> (and (and (not x283) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x136) (= x910 3705713892) (= (x498 (x223 x276)) x304) (< 0 x304) (not (> 2220280665 x910)) (>= x136 0) (not (> 3084411429 x910)) (not (= 3572374928 x910)) (= x467 x136) (not (= 3084411429 x910)) (not x673)) (and (= x467 x409) (= (= x409 x758) x526) (= x758 x624))) x526) x939))
(assert (x387 x29))
(assert (x387 x819))
(assert (and (x993 x819 32) (x454 x819 32) (x220 x819 32) (=> (> 32 0) (= (+ (x277 x819 32) (* (x767 x819 32) 32)) x819))))
(assert (x387 x168))
(assert (= x351 (and x499 (not x885))))
(assert (= (and x549 x515) x715))
(assert (=> (>= 10000 x438) (= (x223 x438) (x1018 x438))))
(assert (x387 x263))
(assert (= 1901074598 (x979 (x1018 1901074598))))
(assert (= (and x55 x481) x796))
(assert (= (and x1011 x134) x455))
(assert (= 0 (x412 (+ (- (+ 196 (- x520 160)) 196) (x780 (+ x95 196))))))
(assert (x387 x420))
(assert (x387 x37))
(assert (= x189 (=> (and (and (not (or (and (< x332 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x332))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x332))) (= (x780 (+ x920 x978)) x143) (= x509 (x561 x978)) (= x180 (x780 (+ x332 31))) (<= x509 1461501637330902918203684832716283019655932542975) (= (x615 115792089237316195423570985008687907853269984665640564039457584007913129639904 x180) x920) (= (< 0 x1041) x158) (not (= x257 0))) (or (and (= x1041 x94) (not x158)) (and (and (= 1 x94) (> 4294967296 x908)) x158))) x675)))
(assert (and (x993 x609 32) (x454 x609 32) (x220 x609 32) (=> (> 32 0) (= (+ (x277 x609 32) (* (x767 x609 32) 32)) x609))))
(assert (x855 x751))
(assert (x387 x853))
(assert (= x766 (and (not x489) x876)))
(assert (= (or x208 x702 x726 x754 x146) x156))
(assert (and (x993 x751 32) (x454 x751 32) (x220 x751 32) (=> (> 32 0) (= (+ (x277 x751 32) (* (x767 x751 32) 32)) x751))))
(assert (x705 x407))
(assert (= (x1018 1901074598) (x223 1901074598)))
(assert (= (x223 1461501637330902918203684832716283019655932542976) (x1018 1461501637330902918203684832716283019655932542976)))
(assert (x387 x588))
(assert (x387 x7))
(assert (x387 x95))
(assert (= (and x366 (not x566)) x278))
(assert (and (x993 x197 32) (x454 x197 32) (x220 x197 32) (=> (> 32 0) (= (+ (x277 x197 32) (* (x767 x197 32) 32)) x197))))
(assert (x387 x716))
(assert (x855 x203))
(assert (x157 x609))
(assert (= (and x781 x341) x822))
(assert (and (x993 x531 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x531 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x531 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x531 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x531 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x531))))
(assert (x387 x127))
(assert (= (x412 (+ (- (+ (- x264 160) 196) 196) (x780 (+ 196 x95)))) 0))
(assert (x157 x948))
(assert (= x794 (or x650 x289)))
(assert (= (and x1004 x193) x677))
(assert (x387 x492))
(assert (x387 x1054))
(assert (= (x1018 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x223 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x139 (and x791 x216)))
(assert (x387 x196))
(assert (= (or x339 x320 x572 x784 x810) x851))
(assert (x855 x890))
(assert (x157 x940))
(assert (= 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x979 (x1018 102499615646744134772650717477688572466918151731817230690449879178893085114368))))
(assert (= (=> (and (or (not x662) (and (= x856 (x780 (+ x977 x883))) x662)) (= (< x883 x580) x662)) x772) x559))
(assert (= x326 (=> (and (= x422 (x780 (+ x805 96))) (= x941 (x462 256)) (= (not (> x492 128)) x603)) (and x603 (=> (= 128 x90) x359)))))
(assert (x157 x736))
(assert (x387 x92))
(assert (= (and (not x42) x237) x19))
(assert (x387 x262))
(assert (= 1245659826 (x979 (x1018 1245659826))))
(assert (x387 x969))
(assert (= (and (not x316) x1029) x788))
(assert (x387 x473))
(assert (=> (>= 10000 x407) (= (x223 x407) (x1018 x407))))
(assert (= x572 (and x947 x991)))
(assert (x387 x173))
(assert (x157 x595))
(assert (x891 x3))
(assert (and (= 81 (x26 9 9)) (= (x26 3 3) 9) (= 81 (x26 27 3)) (= (x26 9 3) 27)))
(assert (x891 x63))
(assert (= (x412 (+ (- (+ (- x598 x981) x1049) 196) (x780 (+ 196 x95)))) 0))
(assert (x387 x842))
(assert (= (or x934 x369) x691))
(assert (= (x412 (+ (- (+ x1049 (- 256 x981)) 196) (x780 (+ 196 x95)))) 0))
(assert (= (and (not x1016) x333) x208))
(assert (x387 x44))
(assert (x387 x130))
(assert (x387 x457))
(assert (x387 x145))
(assert (= (and x429 x691) x752))
(assert (x387 x315))
(assert (x387 x1010))
(assert (and (x993 x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x180 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x180))))
(assert (x387 x280))
(assert (x178 x863))
(assert (x387 x687))
(assert (and (<= (x804 x276 x570) 340282366920938463463374607431768211455) (<= 10000 (x804 x276 x570))))
(assert (x387 x325))
(assert (x705 x416))
(assert (= 0 (x412 (+ (- x642 196) (x780 (+ 196 x95))))))
(assert (x387 x639))
(assert (= x111 (and x613 x618)))
(assert (x855 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x567 (and x459 x607)))
(assert (x387 x803))
(assert (= (=> (and (= (x513 256) x49) (= (x780 (+ x315 96)) x470) (= (not (< 128 x263)) x294)) (and x294 (=> (= x663 128) x408))) x999))
(assert (= x544 (and (not x781) x341)))
(assert (= (x10 x441) 0))
(assert (= 0 (x10 160)))
(assert (x387 x165))
(assert (= 2376452955 (x979 (x1018 2376452955))))
(assert (x387 x593))
(assert (x387 x928))
(assert (= (x412 (+ (- (+ (- x441 x981) x1049) 196) (x780 (+ 196 x95)))) 0))
(assert (= x782 (and x679 x1050)))
(assert (x891 1461501637330902918203684832716283019655932542976))
(assert (= (and x1007 (not x701)) x514))
(assert (x387 x303))
(assert (= (x1018 4294967296) (x223 4294967296)))
(assert (x387 x606))
(assert (x387 x725))
(assert (= (=> (= x613 (> x779 0)) (and (=> (and (and (= 0 x602) (= x1012 x244)) (not x613)) x773) (=> (and x613 (= x185 x597)) x850))) x568))
(assert (x387 x253))
(assert (x387 x371))
(assert (x387 x282))
(assert (x387 x12))
(assert (x387 x609))
(assert (x387 x68))
(assert (x387 x407))
(assert (x387 x102))
(assert (x387 x740))
(assert (= (and x576 (not x913)) x754))
(assert (= x720 (=> (= (= x127 0) x894) (and (=> (and (and (= x1012 x164) (= (x615 1461501637330902918203684832716283019655932542975 x160) x14) (= 32 x907) (= x530 1)) (not x894)) x314) (=> (and x894 (and (= x602 0) (= x244 x1012))) x773)))))
(assert (= 0 (x412 160)))
(assert (x387 x943))
(assert (and (x993 x838 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x838 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x838 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x838 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x838 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x838))))
(assert (= (or x497 x865) x414))
(assert (x387 x619))
(assert (x387 x634))
(assert (x387 x202))
(assert (x387 x422))
(assert (= (x412 (+ (x780 (+ 196 x95)) (- (+ (- 224 x981) x1049) 196))) 0))
(assert (x855 x819))
(assert (= (and (not x116) x706) x401))
(assert (x387 x1003))
(assert (= x861 (and (not x231) x104)))
(assert (= (x10 x264) 0))
(assert (= x934 (and x1006 x749)))
(assert (x387 x120))
(assert (x387 x93))
(assert (= (and (not x153) x832) x366))
(assert (= 0 (x412 (+ (x780 (+ x95 196)) (- x38 196)))))
(assert (x891 x531))
(assert (x387 x531))
(assert (x891 x203))
(assert (= (and x452 (not x378)) x403))
(assert (= (or x305 x715) x506))
(assert (= (and x1047 x567) x333))
(assert (x387 x571))
(assert (x387 x175))
(assert (x387 x750))
(assert (x387 x925))
(assert (x387 x264))
(assert (and (x993 x197 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x197 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x197 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x197 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x197 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x197))))
(assert (x387 x751))
(assert (= (and x1053 x396) x289))
(assert (x387 x936))
(assert (= x423 (and x367 (not x1044))))
(assert (= (and x116 x706) x583))
(assert (= (x1018 1553423035) (x223 1553423035)))
(assert (x855 x736))
(assert (= x460 (and x378 x452)))
(assert (x387 x487))
(assert (x891 x160))
(assert (and (x993 x531 32) (x454 x531 32) (x220 x531 32) (=> (> 32 0) (= (+ (x277 x531 32) (* (x767 x531 32) 32)) x531))))
(assert (x387 x338))
(assert (x387 x406))
(assert (x387 x357))
(assert (x387 x1041))
(assert (x855 x197))
(assert (x387 x61))
(assert (x387 x1027))
(assert (= (x412 (+ (x780 (+ x95 196)) (- (+ x1049 (- x1051 x981)) 196))) 0))
(assert (x387 x611))
(assert (= (x1018 62805084655870755976952745400290271510621614971557940054860603637793562820608) (x223 62805084655870755976952745400290271510621614971557940054860603637793562820608)))
(assert (x387 x839))
(assert (x387 x890))
(assert (x891 x751))
(assert (= (and x108 x261) x310))
(assert (x387 x474))
(assert (= (and x152 x583) x43))
(assert (= (and x488 (not x432)) x854))
(assert (= (=> (and (= (< x950 x988) x960) (or (not x960) (and (= (x780 (+ x840 x950)) x399) x960))) x927) x444))
(assert (= 0 (x412 (+ (x780 (+ 196 x95)) (- (+ (- 128 x981) x1049) 196)))))
(assert (x387 x889))
(assert (x387 x645))
(assert (= (and (not x534) x666) x540))
(assert (x387 x323))
(assert (x705 x160))
(assert (and (x993 x641 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x641 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x641 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x641 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x641 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x641))))
(assert (= x438 (x979 (x223 x438))))
(assert (x387 x426))
(assert (= 0 (x718 (- 256 x974))))
(assert (x387 x536))
(assert (= (and x156 x85) x428))
(assert (= 18446744073709551615 (x979 (x1018 18446744073709551615))))
(assert (x387 x56))
(assert (x387 x342))
(assert (= x148 (=> (and (or (not x345) x345) (= (= 0 x449) x345)) x439)))
(assert (= x596 (or x295 x788)))
(assert (x387 x995))
(assert (= (and x665 (not x186)) x1048))
(assert (= (or x246 x745 x987 x403 x888) x679))
(assert (x387 x929))
(assert (= 0 (x10 256)))
(assert (x157 x641))
(assert (x387 x207))
(assert (x387 x641))
(assert (= (x979 (x1018 22445611572322667099362401052093617030957452505749565894135597532943828910080)) 22445611572322667099362401052093617030957452505749565894135597532943828910080))
(assert (x387 x236))
(assert (x387 x113))
(assert (x387 x988))
(assert (x387 x989))
(assert (x387 x966))
(assert (x157 x180))
(assert (x387 x22))
(assert (= 0 (x718 (- x858 x974))))
(assert (= x475 (and (not x15) x469)))
(assert (x387 x296))
(assert (= 1461501637330902918203684832716283019655932542975 (x979 (x1018 1461501637330902918203684832716283019655932542975))))
(assert (= 0 (x412 (+ (- (+ x1049 (- x192 x981)) 196) (x780 (+ 196 x95))))))
(assert (x387 x329))
(assert (= (and (not x662) x484) x4))
(assert (x387 x176))
(assert (= (or x4 x849) x576))
(assert (x387 x1012))
(assert (= x35 (and x103 x506)))
(assert (= (and x417 x405) x112))
(assert (= (x223 2249206060) (x1018 2249206060)))
(assert (x387 x409))
(assert (= (x1018 64069044923792539370177021244577383457373632460708312080110356237917649633280) (x223 64069044923792539370177021244577383457373632460708312080110356237917649633280)))
(assert (= x984 (and x115 x820)))
(assert (x387 x201))
(assert (and (x993 x3 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x454 x3 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x220 x3 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x277 x3 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x767 x3 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x3))))
(assert (= (=> (and (= x729 (x25 x29)) (>= 1461501637330902918203684832716283019655932542975 x729) (= x490 (x780 (+ x522 32))) (= x436 (not (> x343 4)))) (and x436 (=> (= x169 x490) x211))) x958))
(assert (x387 x985))
(assert (x387 x335))
(assert (x387 x99))
(assert (= x1029 (and x737 (not x508))))
(assert (x387 x771))
(assert (x387 x522))
(assert (and (x993 x3 32) (x454 x3 32) (x220 x3 32) (=> (> 32 0) (= (+ (x277 x3 32) (* (x767 x3 32) 32)) x3))))
(assert (= x753 (or x455 x272 x423 x964 x167)))
(check-sat)
(exit)
