(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x135 0)) (((x34 (x269 x135) (x103 x135) (x217 Int)) (x310 (x119 x135) (x258 Int)) (x121 (x36 Int)))))
(declare-fun x18 () Int)
(declare-fun x300 () Int)
(declare-fun x186 () Int)
(declare-fun x109 () Int)
(declare-fun x65 () Int)
(declare-fun x187 () Int)
(declare-fun x153 () Int)
(declare-fun x7 () x135)
(declare-fun x326 () Int)
(declare-fun x165 () Bool)
(declare-fun x295 () Bool)
(declare-fun x144 () Int)
(declare-fun x161 () Int)
(declare-fun x265 () Int)
(declare-fun x20 (x135) Int)
(declare-fun x236 () Int)
(declare-fun x52 () Int)
(declare-fun x158 () Int)
(declare-fun x277 () Int)
(declare-fun x8 () Int)
(declare-fun x166 () Int)
(declare-fun x55 () Int)
(declare-fun x49 () Int)
(declare-fun x169 () Bool)
(declare-fun x107 () Int)
(declare-fun x10 () Int)
(declare-fun x163 () Int)
(declare-fun x9 () Int)
(declare-fun x199 () Int)
(declare-fun x322 () Int)
(declare-fun x287 () Int)
(declare-fun x92 () Bool)
(declare-fun x147 () Int)
(declare-fun x297 (x135) Int)
(declare-fun x289 () Int)
(declare-fun x40 (x135) Int)
(declare-fun x331 () Int)
(declare-fun x54 () Int)
(declare-fun x42 () Int)
(declare-fun x213 () Int)
(declare-fun x209 () Int)
(declare-fun x27 () Int)
(declare-fun x191 () Int)
(declare-fun x57 () Int)
(declare-fun x37 (x135) Int)
(declare-fun x66 () Int)
(declare-fun x257 () Bool)
(declare-fun x59 () Int)
(declare-fun x17 () x135)
(declare-fun x111 () Bool)
(declare-fun x185 () Int)
(declare-fun x69 () Int)
(declare-fun x227 () Bool)
(declare-fun x93 () Int)
(declare-fun x200 () Int)
(declare-fun x164 () Bool)
(declare-fun x145 () x135)
(declare-fun x303 () Int)
(declare-fun x245 () Int)
(declare-fun x304 (x135) Int)
(declare-fun x171 () x135)
(declare-fun x98 () Int)
(declare-fun x58 () Bool)
(declare-fun x283 () Bool)
(declare-fun x233 () Int)
(declare-fun x193 () Bool)
(declare-fun x133 () Int)
(declare-fun x271 () Bool)
(declare-fun x83 () Int)
(declare-fun x51 () Int)
(declare-fun x325 () Bool)
(declare-fun x222 () Int)
(declare-fun x44 () Bool)
(declare-fun x4 () Int)
(declare-fun x328 () Int)
(declare-fun x68 () Bool)
(declare-fun x113 () Bool)
(declare-fun x173 () Int)
(declare-fun x321 () Int)
(declare-fun x159 () Int)
(declare-fun x132 () Bool)
(declare-fun x281 () Int)
(declare-fun x41 () Bool)
(declare-fun x218 () Int)
(declare-fun x178 () Int)
(declare-fun x104 () x135)
(declare-fun x102 () Bool)
(declare-fun x338 () Bool)
(declare-fun x188 (Int Int) Int)
(declare-fun x150 () Int)
(declare-fun x229 () Int)
(declare-fun x33 () Bool)
(declare-fun x105 () Int)
(declare-fun x284 () Int)
(declare-fun x337 () Int)
(declare-fun x95 () Int)
(declare-fun x112 () Int)
(declare-fun x306 () Int)
(declare-fun x336 () Bool)
(declare-fun x138 () Bool)
(declare-fun x115 () Int)
(declare-fun x47 () Int)
(declare-fun x101 (x135) Int)
(declare-fun x239 () Int)
(declare-fun x288 () Bool)
(declare-fun x22 () Int)
(declare-fun x72 () Bool)
(declare-fun x43 () Int)
(declare-fun x243 () Int)
(declare-fun x237 () x135)
(declare-fun x301 (Int Int) Int)
(declare-fun x334 () Int)
(declare-fun x79 () Int)
(declare-fun x282 () Int)
(declare-fun x53 () Bool)
(declare-fun x234 () Int)
(declare-fun x296 () Int)
(declare-fun x134 () x135)
(declare-fun x97 () Int)
(declare-fun x85 () Bool)
(declare-fun x335 () Int)
(declare-fun x249 () Bool)
(declare-fun x255 () Int)
(declare-fun x316 (x135) Int)
(declare-fun x146 () Int)
(declare-fun x64 () Bool)
(declare-fun x50 () Int)
(declare-fun x312 () Int)
(declare-fun x160 () Int)
(declare-fun x238 () Int)
(declare-fun x81 () Int)
(declare-fun x276 (Int Int) Int)
(declare-fun x99 () Int)
(declare-fun x137 () Int)
(declare-fun x272 () Int)
(declare-fun x1 () Int)
(declare-fun x172 () Bool)
(declare-fun x29 () Int)
(declare-fun x250 () x135)
(declare-fun x198 () Bool)
(declare-fun x329 () Int)
(declare-fun x223 () Int)
(declare-fun x181 () Int)
(declare-fun x2 () Int)
(declare-fun x39 () Bool)
(declare-fun x340 () Int)
(declare-fun x291 () Int)
(declare-fun x124 () Int)
(declare-fun x128 () Bool)
(declare-fun x206 () Int)
(declare-fun x154 (x135) Int)
(declare-fun x35 () Bool)
(declare-fun x259 () Int)
(declare-fun x38 () x135)
(declare-fun x299 () Int)
(declare-fun x309 () Int)
(declare-fun x118 () Int)
(declare-fun x156 () Int)
(declare-fun x342 () Int)
(declare-fun x219 () Int)
(declare-fun x226 () Int)
(declare-fun x14 () Int)
(declare-fun x15 (Int) Int)
(declare-fun x260 () Int)
(declare-fun x307 () Int)
(declare-fun x46 () Int)
(declare-fun x78 () Int)
(declare-fun x262 () Int)
(declare-fun x141 () Int)
(declare-fun x230 () Int)
(declare-fun x241 (x135) Int)
(declare-fun x261 (Int Int) Int)
(declare-fun x220 () Int)
(declare-fun x176 () Int)
(declare-fun x298 (x135) Int)
(declare-fun x91 () Bool)
(declare-fun x96 () Int)
(declare-fun x125 () Int)
(declare-fun x201 () Int)
(declare-fun x341 () Bool)
(declare-fun x155 () Int)
(declare-fun x6 () x135)
(declare-fun x247 () Int)
(declare-fun x45 () Bool)
(declare-fun x16 () Bool)
(declare-fun x117 () Int)
(declare-fun x333 () Int)
(declare-fun x224 () Int)
(declare-fun x123 () Int)
(declare-fun x74 () Int)
(declare-fun x275 () Int)
(declare-fun x315 () x135)
(declare-fun x131 () x135)
(declare-fun x285 () Bool)
(declare-fun x152 () Int)
(declare-fun x344 () Bool)
(declare-fun x94 () x135)
(declare-fun x11 (x135) Int)
(declare-fun x203 () Int)
(declare-fun x211 () Bool)
(declare-fun x108 () x135)
(declare-fun x264 () Int)
(declare-fun x67 () Int)
(declare-fun x120 () Int)
(declare-fun x149 () Int)
(declare-fun x167 () Bool)
(declare-fun x253 () Int)
(declare-fun x110 () Int)
(declare-fun x30 () x135)
(declare-fun x292 () Int)
(declare-fun x240 () Bool)
(declare-fun x313 () x135)
(declare-fun x228 () x135)
(declare-fun x332 () Bool)
(declare-fun x63 () Bool)
(declare-fun x189 () Int)
(declare-fun x268 () Int)
(declare-fun x278 (x135) Int)
(declare-fun x192 () Int)
(declare-fun x126 () Int)
(declare-fun x56 () Int)
(declare-fun x221 () Int)
(declare-fun x13 () Int)
(declare-fun x148 () Int)
(declare-fun x100 () Int)
(declare-fun x204 () Int)
(declare-fun x32 (Int Int) Int)
(declare-fun x302 () Int)
(declare-fun x270 (Int) x135)
(declare-fun x311 () Int)
(declare-fun x280 () Int)
(declare-fun x3 () Bool)
(declare-fun x21 () x135)
(declare-fun x180 () Int)
(declare-fun x197 () Int)
(declare-fun x232 () Bool)
(declare-fun x12 () Int)
(declare-fun x157 () Int)
(declare-fun x24 () Int)
(declare-fun x294 () Int)
(declare-fun x308 () Bool)
(declare-fun x323 () Int)
(declare-fun x244 () x135)
(declare-fun x343 () Int)
(declare-fun x320 () Int)
(declare-fun x87 () Bool)
(declare-fun x205 () Int)
(declare-fun x273 () Int)
(declare-fun x202 () Bool)
(declare-fun x179 () Bool)
(declare-fun x175 () Int)
(declare-fun x339 () Int)
(declare-fun x75 () Int)
(declare-fun x90 () Int)
(declare-fun x28 () Int)
(declare-fun x210 () Int)
(declare-fun x279 () Int)
(declare-fun x256 (Int) Int)
(declare-fun x136 () Int)
(declare-fun x88 () x135)
(declare-fun x80 () Bool)
(declare-fun x86 () Bool)
(declare-fun x76 () Int)
(declare-fun x196 () Int)
(declare-fun x48 () Int)
(declare-fun x242 (Int Int) Int)
(declare-fun x116 () Int)
(declare-fun x252 () Int)
(declare-fun x290 (x135) Int)
(declare-fun x215 (Int) Int)
(declare-fun x127 () Int)
(declare-fun x177 () x135)
(declare-fun x248 () Bool)
(declare-fun x142 () Int)
(declare-fun x143 () x135)
(define-fun x70 ((x135 x135) (x263 Int)) x135 (ite ((_ is x310) x135) (x310 (x119 x135) (+ x263 (x258 x135))) (ite ((_ is x34) x135) (x34 (x269 x135) (x103 x135) (+ (x217 x135) x263)) (x121 (+ (x36 x135) x263)))))
(define-fun x60 ((x246 Int)) Int (ite (and (< x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x246)) x246 (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x314 ((x246 Int)) Int (ite (and (< x246 0) (>= x246 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x246) x246))
(define-fun x26 ((x246 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x246) (<= 0 x246)) x246 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x246) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x246)) (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x246) (< x246 0)) (+ x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x188 x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x216 ((x254 Int)) Bool (and (< x254 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x254 0)))
(define-fun x174 ((x254 Int) (x73 Int)) Bool (=> (and (< 0 x73) (< 0 x254)) (and (>= x254 (x276 x254 x73)) (>= (x276 x254 x73) 0))))
(define-fun x61 ((x254 Int) (x73 Int)) Bool (=> (and (and (<= 1 x73) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x73)) (and (>= x254 0) (< x254 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x276 x254 x73) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x276 x254 x73) 0))))
(define-fun x319 ((x254 Int) (x73 Int)) Bool (=> (and (< x73 x254) (> x73 1)) (> x254 (x276 x254 x73))))
(define-fun x114 ((x254 Int) (x73 Int)) Bool (=> (and (< 0 x73) (> x254 0)) (= (< x254 x73) (= (x276 x254 x73) 0))))
(define-fun x162 ((x254 Int) (x73 Int)) Bool (=> (and (> x254 0) (< 0 x73)) (and (>= x254 (x242 (x276 x254 x73) x73)) (> (x242 (x276 x254 x73) x73) (- x254 x73)))))
(define-fun x168 ((x254 Int) (x73 Int)) Bool (and (x114 x254 x73) (x174 x254 x73) (x162 x254 x73) (x61 x254 x73) (x319 x254 x73)))
(define-fun x23 ((x254 Int)) Bool (= (x276 0 x254) 0))
(define-fun x84 ((x254 Int)) Bool (= x254 (x276 x254 1)))
(define-fun x345 ((x254 Int)) Bool (=> (not (= 0 x254)) (= (x276 x254 x254) 1)))
(define-fun x19 ((x254 Int)) Bool (and (x84 x254) (x345 x254) (x23 x254)))
(define-fun x82 ((x254 Int)) Bool (and (= (x261 x254 115792089237316195423570985008687907853269984665640564039457584007913129639935) x254) (= (x261 115792089237316195423570985008687907853269984665640564039457584007913129639935 x254) x254)))
(define-fun x106 ((x254 Int)) Bool (and (= (x261 x254 0) 0) (= (x261 0 x254) 0)))
(define-fun x286 ((x254 Int)) Bool (= (x261 x254 x254) x254))
(define-fun x207 ((x254 Int)) Bool (and (x106 x254) (x286 x254) (x82 x254)))
(define-fun x317 ((x254 Int) (x73 Int)) Bool (= (x261 x254 x73) (x261 x73 x254)))
(define-fun x190 ((x254 Int) (x73 Int)) Bool (and (=> (<= 0 x73) (>= x73 (x261 x254 x73))) (=> (>= x254 0) (>= x254 (x261 x254 x73))) (>= (x261 x254 x73) 0)))
(define-fun x62 ((x254 Int) (x73 Int)) Bool (and (x317 x254 x73) (x190 x254 x73)))
(define-fun x212 ((x254 Int) (x73 Int)) Bool (= (x242 x73 x254) (x242 x254 x73)))
(define-fun x151 ((x254 Int) (x73 Int)) Bool (and (=> (and (< x254 0) (< x73 0)) (> (x242 x254 x73) 0)) (=> (and (< 0 x73) (< x254 0)) (< (x242 x254 x73) 0)) (=> (and (< 0 x254) (> x73 0)) (> (x242 x254 x73) 0)) (=> (and (> x254 0) (> 0 x73)) (> 0 (x242 x254 x73)))))
(define-fun x170 ((x254 Int) (x73 Int)) Bool (=> (and (< 0 x73) (> x254 0)) (= (< (x242 x254 x73) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x276 (x26 (x242 x254 x73)) x254) x73))))
(define-fun x235 ((x254 Int) (x73 Int)) Bool (=> (and (not (= 0 x254)) (not (= 0 x73))) (and (= x73 (x276 (x242 x254 x73) x254)) (= (x276 (x242 x254 x73) x73) x254))))
(define-fun x305 ((x254 Int) (x73 Int)) Bool (=> (and (> x254 0) (> x73 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x242 x254 x73)) (> x73 (x276 115792089237316195423570985008687907853269984665640564039457584007913129639935 x254)))))
(define-fun x71 ((x254 Int) (x73 Int)) Bool (and (= (x26 (x242 (- x254 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x73 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x26 (x242 x254 x73))) (= (x26 (x242 (- x254 115792089237316195423570985008687907853269984665640564039457584007913129639936) x73)) (x26 (x242 x254 x73))) (= (x26 (x242 x254 x73)) (x26 (x242 x254 (- x73 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x25 ((x254 Int) (x73 Int)) Bool (and (=> (and (and (< 0 x73) (<= x73 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x254) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x254))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x254) (x276 57896044618658097711785492504343953926634992332820282019728792003956564819968 x73)) (>= (x242 (- x254 115792089237316195423570985008687907853269984665640564039457584007913129639936) x73) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (> x73 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x73)) (and (<= x254 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x254 0))) (= (>= (x242 x254 (- x73 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x73) (x276 57896044618658097711785492504343953926634992332820282019728792003956564819968 x254)))) (=> (and (and (<= x73 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x73 0)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x254) (> x254 0))) (= (<= (x242 x254 x73) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x254 (x276 57896044618658097711785492504343953926634992332820282019728792003956564819967 x73)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x254) (> x254 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x73 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x73 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (x242 (- x254 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x73 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x276 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x73)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x254))))))
(define-fun x77 ((x254 Int) (x73 Int)) Bool (and (x25 x254 x73) (x235 x254 x73) (x305 x254 x73) (x212 x254 x73) (x151 x254 x73) (x170 x254 x73) (x71 x254 x73)))
(define-fun x327 ((x254 Int)) Bool (and (= 0 (x242 0 x254)) (= 0 (x242 x254 0))))
(define-fun x225 ((x254 Int)) Bool (and (= x254 (x242 1 x254)) (= x254 (x242 x254 1))))
(define-fun x129 ((x254 Int)) Bool (and (x225 x254) (x327 x254)))
(define-fun x274 ((x254 Int)) Bool (and (= (x301 x254 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x301 115792089237316195423570985008687907853269984665640564039457584007913129639935 x254))))
(define-fun x130 ((x254 Int)) Bool (and (= (x301 0 x254) x254) (= x254 (x301 x254 0))))
(define-fun x267 ((x254 Int)) Bool (= x254 (x301 x254 x254)))
(define-fun x293 ((x254 Int)) Bool (and (x267 x254) (x130 x254) (x274 x254)))
(define-fun x182 ((x254 Int) (x73 Int)) Bool (= (x301 x73 x254) (x301 x254 x73)))
(define-fun x330 ((x254 Int) (x73 Int)) Bool (and (=> (<= 0 x73) (>= (x301 x254 x73) x73)) (<= (x301 x254 x73) (+ x254 x73)) (=> (<= 0 x254) (>= (x301 x254 x73) x254))))
(define-fun x251 ((x254 Int) (x73 Int)) Bool (and (x182 x254 x73) (x330 x254 x73)))
(define-fun x195 ((x254 Int)) Bool (= (x188 x254 1461501637330902918203684832716283019655932542976) (x261 x254 1461501637330902918203684832716283019655932542975)))
(define-fun x184 ((x254 Int)) Bool (and (x195 x254) (x62 x254 1461501637330902918203684832716283019655932542975)))
(define-fun x5 ((x254 Int) (x73 Int)) Bool (and (>= (x188 x254 x73) 0) (< (x188 x254 x73) x73)))
(define-fun x324 ((x254 Int) (x73 Int)) Bool (=> (and (< 0 x73) (<= 0 x254)) (= (< x254 x73) (= (x188 x254 x73) x254))))
(define-fun x208 ((x254 Int) (x73 Int)) Bool (=> (and (< 0 x73) (and (> (+ x73 x73) x254) (>= x254 x73))) (= (- x254 x73) (x188 x254 x73))))
(define-fun x122 ((x254 Int)) Bool (= 0 (x188 0 x254)))
(define-fun x140 ((x254 Int)) Bool (= 0 (x188 x254 1)))
(define-fun x318 ((x254 Int)) Bool (= 0 (x188 x254 x254)))
(define-fun x89 ((x254 Int)) Bool (and (x140 x254) (x318 x254) (x122 x254)))
(define-fun x266 ((x254 Int) (x73 Int) (x214 Int) (x231 Int)) Bool (=> (and (>= x214 x254) (>= x231 x73) (>= x73 0) (>= x254 0)) (>= (x242 x214 x231) (x242 x254 x73))))
(define-fun x139 ((x254 Int) (x73 Int) (x214 Int) (x231 Int)) Bool (=> (= x214 x254) (= (- (x242 x254 x73) (x242 x214 x231)) (x242 x254 (- x73 x231)))))
(define-fun x31 ((x254 Int)) Bool (=> (and (not (= 1763987465 x254)) (not (= x254 761373525)) (not (= x254 1814410054)) (not (= 2094874590 x254)) (not (= x254 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (not (= x254 1710941022)) (not (= x254 231365057)) (< 10000 x254) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x254)) (not (= 1980270339 x254)) (not (= x254 1161348331)) (not (= x254 699302164)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x254)) (not (= x254 1461501637330902918203684832716283019655932542975))) (not ((_ is x121) (x270 x254)))))
(assert (x216 x125))
(assert (= (x11 (x70 x7 2)) (+ 2 (x11 x7))))
(assert (x216 x27))
(assert (x216 x126))
(assert (x31 x294))
(assert (x207 x112))
(assert (x293 x204))
(assert (x216 x155))
(assert (=> (>= 10000 x280) (= (x270 x280) (x121 x280))))
(assert (x216 x81))
(assert (= (x121 2094874590) (x270 2094874590)))
(assert (x216 x323))
(assert (x216 x149))
(assert (x129 x302))
(assert (x207 x137))
(assert (x216 x56))
(assert (x168 57896044618658097711785492504343953926634992332820282019728792003956564819967 x117))
(assert (x216 x117))
(assert (x216 x219))
(assert (x216 x105))
(assert (x216 x83))
(assert (x184 x2))
(assert (x207 x309))
(assert (x77 x192 x259))
(assert (x216 x137))
(assert (x129 x117))
(assert (x207 x2))
(assert (x207 x233))
(assert (x62 x268 x4))
(assert (x216 x2))
(assert (= (x11 (x270 x234)) x234))
(assert (x62 x342 x55))
(assert (x216 x296))
(assert (= (x121 231365057) (x270 231365057)))
(assert (x216 x22))
(assert (x216 x260))
(assert (x216 x158))
(assert (x216 x69))
(assert (=> (<= x96 10000) (= (x121 x96) (x270 x96))))
(assert (x216 x52))
(assert (x216 x187))
(assert (x216 x96))
(assert (x293 x337))
(assert (= (x270 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x121 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x207 x59))
(assert (x62 x144 x299))
(assert (x216 x57))
(assert (x216 x29))
(assert (= (x11 (x70 x145 4)) (+ 4 (x11 x145))))
(assert (x168 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x272 57896044618658097711785492504343953926634992332820282019728792003956564819968) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))))
(assert (= (x270 1710941022) (x121 1710941022)))
(assert (x216 x8))
(assert (x207 x218))
(assert (= 2094874590 (x11 (x121 2094874590))))
(assert (x216 x200))
(assert (x89 x81))
(assert (x216 x97))
(assert (x216 x75))
(assert (x129 x148))
(assert (x216 x322))
(assert (x207 x144))
(assert (x216 x312))
(assert (x207 x54))
(assert (x216 x161))
(assert (x216 x272))
(assert (x168 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x149) x149 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x149 1)))))))
(assert (x216 x59))
(assert (x216 x4))
(assert (= (x11 (x121 761373525)) 761373525))
(assert (x216 x284))
(assert (x184 x81))
(assert (x293 x67))
(assert (= (x11 (x121 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x216 x54))
(assert (x129 x118))
(assert (x207 x4))
(assert (x216 x337))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (* (x276 x2 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x188 x2 1461501637330902918203684832716283019655932542976)) x2)) (x324 x2 1461501637330902918203684832716283019655932542976) (x208 x2 1461501637330902918203684832716283019655932542976) (x5 x2 1461501637330902918203684832716283019655932542976)))
(assert (x31 x156))
(assert (x207 x342))
(assert (x168 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x272) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))))
(assert (x251 x204 x247))
(assert (x216 x166))
(assert (x216 x331))
(assert (x216 x328))
(assert (x216 x259))
(assert (x216 x189))
(assert (x62 x233 x264))
(assert (x216 x334))
(assert (x216 x220))
(assert (x77 x306 x149))
(assert (x216 x265))
(assert (x31 x157))
(assert (=> (<= x234 10000) (= (x121 x234) (x270 x234))))
(assert (= (x11 (x270 x96)) x96))
(assert (x216 x157))
(assert (x293 x191))
(assert (x216 x201))
(assert (x216 x196))
(assert (x216 x66))
(assert (x216 x147))
(assert (x216 x252))
(assert (x216 x24))
(assert (x216 x100))
(assert (x62 x282 x333))
(assert (x207 x18))
(assert (= 1461501637330902918203684832716283019655932542975 (x11 (x121 1461501637330902918203684832716283019655932542975))))
(assert (x216 x192))
(assert (x216 x127))
(assert (x207 x238))
(assert (x216 x47))
(assert (x207 x76))
(assert (x62 x245 x136))
(assert (x216 x14))
(assert (x216 x185))
(assert (x216 x302))
(assert (x216 x118))
(assert (x77 x29 x148))
(assert (x216 x120))
(assert (x216 x116))
(assert (x207 x282))
(assert (x19 (ite (< x149 57896044618658097711785492504343953926634992332820282019728792003956564819968) x149 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x149 1)))))))
(assert (x216 x49))
(assert (x216 x294))
(assert (x31 x280))
(assert (x216 x112))
(assert (x216 x42))
(assert (x216 x78))
(assert (x216 x159))
(assert (=> (>= 10000 x157) (= (x121 x157) (x270 x157))))
(assert (x216 x309))
(assert (x207 x46))
(assert (x216 x311))
(assert (x216 x50))
(assert (x216 x150))
(assert (x216 x18))
(assert (x216 x156))
(assert (= (+ (x11 x17) 1) (x11 (x70 x17 1))))
(assert (x216 x275))
(assert (= (x121 1763987465) (x270 1763987465)))
(assert (= (x11 (x270 x343)) x343))
(assert (x216 x230))
(assert (x216 x238))
(assert (x216 x321))
(assert (x216 x205))
(assert (x251 x191 x181))
(assert (x207 1461501637330902918203684832716283019655932542975))
(assert (= (x121 57896044618658097711785492504343953926634992332820282019728792003956564819967) (x270 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= 699302164 (x11 (x121 699302164))))
(assert (x216 x95))
(assert (x216 x299))
(assert (x216 x79))
(assert (x216 x234))
(assert (x216 x303))
(assert (x216 x292))
(assert (x207 x268))
(assert (= (x11 (x121 1161348331)) 1161348331))
(assert (x216 x191))
(assert (x207 x81))
(assert (x207 x55))
(assert (x216 x335))
(assert (x216 x74))
(assert (x77 x149 x117))
(assert (x129 x149))
(assert (x216 x133))
(assert (x216 x239))
(assert (x216 x329))
(assert (x216 x109))
(assert (x216 x223))
(assert (x19 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (= x157 (x11 (x270 x157))))
(assert (x216 x65))
(assert (= (x270 1461501637330902918203684832716283019655932542975) (x121 1461501637330902918203684832716283019655932542975)))
(assert (x293 x124))
(assert (x216 x1))
(assert (x216 x144))
(assert (x31 x343))
(assert (x216 x300))
(assert (x216 x273))
(assert (x216 x268))
(assert (x89 1461501637330902918203684832716283019655932542976))
(assert (x216 x209))
(assert (x293 x185))
(assert (= (x270 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x121 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (= (x270 1980270339) (x121 1980270339)))
(assert (x216 x55))
(assert (= x42 (x11 (x270 x42))))
(assert (x216 x13))
(assert (x216 x28))
(assert (= x16 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x97) (>= x97 0) (= x42 x279) (= false x249) x58 (= x83 1980270339) (< x150 1161348331) (> 2094874590 x150) (= 6 x78) (= x308 false) (<= x279 1461501637330902918203684832716283019655932542975) (< x150 699302164) (= x150 231365057) (= x57 (x290 (x270 x96))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x116) (> x96 0) (>= x105 0) (= x68 false) (= (< 0 (x290 (x270 x96))) x58) (<= 0 x279) (<= 0 x116) (<= x96 1461501637330902918203684832716283019655932542975) (= (x37 (x270 x96)) x105) (= x219 x116) (= x226 x97) (= false x271) (< 0 x57)) (and (and (not (< x133 699302164)) (< 0 x197) (= 761373525 x133) (= x197 (x290 (x270 x96))) (> 2094874590 x133) (not (= 699302164 x133)) (<= 0 x160) (= x243 x160) (= x340 x219) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x160) (< x133 1161348331)) (and (and (and (> 1161348331 x69) (= x52 (x290 (x270 x96))) (not (< x69 699302164)) (= x326 x166) (>= x160 0) (not (= x69 699302164)) (= x160 x175) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x160) (> x52 0) (> 2094874590 x69) (= x69 761373525)) (and (= x142 x175) (= x127 x22) (= x165 (= x99 x326)) (= (+ x127 x142) x99))) (and (<= x220 1461501637330902918203684832716283019655932542975) (not (< x155 1161348331)) (= (and (> x311 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x311))) x87) (= x228 (x34 (x270 x42) x21 0)) (= x284 (x261 1461501637330902918203684832716283019655932542975 x81)) (= x93 x187) (= x146 (x242 x29 x148)) (= x124 (x261 x144 x299)) (= (x70 x7 2) x30) (= x125 x312) (>= x275 0) (= x166 x152) (= (x241 x30) x259) (not (= 1814410054 x155)) (= (= x100 1) x248) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x152) (= (x261 x233 x264) x282) (= (x290 (x270 x96)) x107) (= x144 (ite (not x128) 1 0)) (= (and (= true (<= x272 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 0 x272)) x172) (<= x74 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x34 (x270 x280) (x121 3) 0) x38) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x10) (= x280 x300) (= x48 (x242 x306 x149)) (= (x215 x13) x118) (= x102 (not x172)) (= (ite (or x35 x248) 1 0) x339) (= x243 x98) (<= 0 x149) (<= 0 x75) (= (x34 (x270 x280) (x121 2) 0) x6) (ite x338 x338 (not (> x275 x265))) (= x289 (x261 1461501637330902918203684832716283019655932542975 x238)) (= x223 x93) (= x178 x280) (= (ite (or (and (> x149 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x141)) (and (< x149 x141) (= (<= x141 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149)))) 1 0) x76) (= x280 x9) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x75) (= x141 (ite (= 0 x272) 0 (ite (= (< x272 57896044618658097711785492504343953926634992332820282019728792003956564819968) true) (x276 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x272) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 (- (x276 57896044618658097711785492504343953926634992332820282019728792003956564819967 (ite (< x272 57896044618658097711785492504343953926634992332820282019728792003956564819968) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))) 1))))))) (= x46 (x261 x18 x309)) (= (ite (or x283 x295) 1 0) x273) (= x48 x260) (= (ite (or (and (= (<= x65 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149)) (> x65 x149)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x65))) 1 0) x54) (<= 0 x252) (= 231365057 x147) (= (ite (= 0 x272) 0 (ite (= false (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x272)) (x276 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x272) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 (- (x276 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x272) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))) 1)))))) x65) (= x322 (x215 x47)) (< x147 699302164) x164 (= x66 0) (= (x34 (x270 x280) (x121 2) 0) x7) (= x120 x280) (= (ite (not x198) 1 0) x4) (= (not x45) x3) (= x88 (x34 (x270 x157) x143 0)) (= (x34 (x270 x234) (x121 5) 0) x313) x179 (= x220 x42) (= (ite (< x186 x149) 1 0) x137) (= x145 (x34 (x270 x280) (x121 2) 0)) (= x148 (x215 x178)) (= (ite (not x336) 1 0) x185) (= x281 x199) (= x117 x272) (= x309 (ite (or (> x272 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272)) (< x272 0))) 1 0)) (= (x242 x302 x118) x320) (= x159 (x261 x218 x137)) (= (x261 x43 x54) x8) (= (x242 x192 x259) x281) (= (ite (and (= true (<= x272 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< 0 x272)) 1 0) x55) (= (+ x146 x203) x115) (<= x238 1461501637330902918203684832716283019655932542975) (= (= x90 x224) x92) (<= 0 x116) (= (x261 x245 x136) x67) (= (x301 x204 x247) x12) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x49) (= (or (> x125 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x125 0) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125) true))) x138) (= x18 (ite (or (> x149 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149)) (< x149 0))) 1 0)) (= (ite (not x227) 1 0) x191) (ite x344 x344 (not (< x335 x79))) (= x75 x302) (= x158 (x304 x228)) (= (x314 (- x209 4)) x296) (<= x252 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x230 x222) x179) (< 0 x12) (= x196 (ite x39 1 0)) (= (x40 x17) x252) (ite x64 x64 (not (> x265 x275))) (= (and (= true (<= x272 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x272 0)) x53) (= (x261 1461501637330902918203684832716283019655932542975 x2) x234) (not (= 1763987465 x155)) (< (x242 x192 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x223 0) (>= x1 0) (>= x205 0) (= (x70 x315 1) x244) (= x153 x2) (not (= x155 1710941022)) (> 1161348331 x147) (= x189 x238) (= (= x340 x210) x211) (= x100 (x304 x171)) (= x283 (= 0 x239)) (= (x261 1461501637330902918203684832716283019655932542975 x81) x156) (= x325 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125) (and (< x125 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125))))) (ite x91 x91 (not (< x192 x252))) (= x45 (and (> x311 0) (= true (<= x311 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x237 (x34 (x270 x294) (x121 1) 0)) (= (x60 (+ x1 x117)) x239) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x205) (= (ite x111 1 0) x262) (= x28 (x301 x67 x185)) (> x255 0) (<= 0 x100) (= (x301 x191 x181) x307) (= x24 (x261 1461501637330902918203684832716283019655932542975 x81)) (= (= x328 1) x63) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x100) (= (not (> x277 x109)) x295) (= (x20 x6) x205) (= x291 (ite (not x132) 1 0)) (= x294 (x261 1461501637330902918203684832716283019655932542975 x238)) (= (not x41) x33) (= x90 (- x115 x320)) (= (x261 1461501637330902918203684832716283019655932542975 x2) x343) (>= x277 0) (= (x298 x244) x149) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x209) true) (< 195 x209)) (= x192 (x60 (+ x51 x252))) (ite x80 x80 (not (< x306 x205))) (>= x10 0) (= 1 x74) (ite x33 x33 (not (> x239 x1))) (= x264 (ite (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272)) (< x272 0))) 1 0)) (= x203 x329) (= x229 (x242 x149 x239)) (= (not x87) x344) (= x221 x292) (<= 0 x49) (= x163 (x60 (+ x311 x116))) (= x255 (x301 x291 x337)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x328) (= x229 x109) (>= x220 0) (= (= 1 x158) x39) (= x334 (x261 1461501637330902918203684832716283019655932542975 x2)) (= (x70 x145 4) x104) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x79) (= (and (< 0 x272) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272) true)) x86) (not (= 0 x149)) (= (x261 x46 x76) x66) (= x41 (or (> x272 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x272 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x272)))) (= (or (and (= true (<= x311 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 0 x311)) (> x311 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x113) (= x171 (x34 (x270 x42) x237 0)) (>= x259 0) (= x323 (ite (= x149 0) 0 (ite (= false (< x149 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (x276 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (> 57896044618658097711785492504343953926634992332820282019728792003956564819968 x149) x149 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x149 1)))))) (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x26 (- (x276 57896044618658097711785492504343953926634992332820282019728792003956564819968 (ite (< x149 57896044618658097711785492504343953926634992332820282019728792003956564819968) x149 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x149 1)))))) 1))))))) (= x257 (< x49 x260)) (= (= x289 x42) x35) (= x206 x306) (= x233 (ite (and (< 0 x149) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149))) 1 0)) (<= 0 x158) (= x210 (+ x173 x98)) (= x247 (x261 x268 x4)) (>= 1461501637330902918203684832716283019655932542975 x2) (= (and (> x125 0) (= (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) x85) (> x273 0) (= x80 (not x332)) (= x181 (ite (or x341 x63) 1 0)) (<= x158 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x341 (= x42 x334)) (= x201 x47) (= x111 (= x42 x284)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x242 x149 x239)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x259) (= x205 x230) (= (x304 x250) x328) (<= x116 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x101 x313) x79) (= x265 (x314 (- x275 x312))) (= x126 (x301 x124 x339)) (< 0 x126) (= x250 (x34 (x270 x42) x177 0)) (= (ite (not x325) 1 0) x136) (= (not x85) x91) (= (< x199 x109) x336) (= (or (> x272 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 0 x272) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272) true))) x285) (= x238 x236) (= (x276 57896044618658097711785492504343953926634992332820282019728792003956564819967 x117) x186) (= x8 0) (= (and (= (<= x272 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 0 x272)) x332) (ite x102 x102 (not (> x1 x239))) (= (and (> x125 0) (= true (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x169) (ite x202 x202 (not (> x335 x79))) (< 0 x307) (= (not x113) x202) (= x157 (x261 1461501637330902918203684832716283019655932542975 x81)) (= x132 (and (< 0 x125) (= (<= x125 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) (= (ite x295 1 0) x331) (= x95 (ite x283 1 0)) (<= 0 x74) (= x311 (x26 (x242 x149 x117))) (ite x193 x193 (not (< x205 x306))) (= x201 x280) (< x155 2094874590) (= x306 x29) (= (x60 (+ x116 x311)) x152) (ite x72 x72 (not (< x116 x163))) (<= x81 1461501637330902918203684832716283019655932542975) (not (> 4 x209)) (= x51 x312) (= (x261 1461501637330902918203684832716283019655932542975 x238) x303) (= 1980270339 x155) (= (ite x341 1 0) x110) (= (> x163 x10) x198) (= x299 (ite (not x167) 1 0)) (ite x44 x44 (not (< x252 x192))) (= x161 x81) (not (or (> x149 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149) true) (> 0 x149)))) (= x268 (ite (not x257) 1 0)) (= x204 (ite (not x53) 1 0)) (not (< x155 1710941022)) (= x240 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x311) (and (> 0 x311) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x311))))) (= (x70 x17 1) x131) (= x75 (x20 x108)) (= x43 (x261 x342 x55)) (ite x3 x3 (not (> x116 x163))) (= (or (and (> 0 x312) (= (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x312)) x288) (= (not x288) x44) (> 2094874590 x147) (<= x275 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x338 (not x138)) (= x177 (x34 (x270 x343) (x121 1) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x149) (< 0 x28) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x277) (= x81 x287) (= x64 (not x169)) (>= x176 0) (= (x70 x94 3) x134) x92 (not (or (> x296 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x296 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 192 x296)))) (= (x290 (x270 x96)) x14) (= x306 (x60 (+ x117 x205))) (= (ite (and (> x272 0) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272))) 1 0) x59) (= (ite x248 1 0) x123) (= x143 (x34 (x270 x280) (x121 4) 0)) (<= 0 x152) (= x315 (x34 (x270 x280) (x121 2) 0)) (= (x261 x112 x59) x218) (= 0 x292) (<= x223 1461501637330902918203684832716283019655932542975) (= x245 (ite (not x86) 1 0)) (<= 0 x328) (= x49 (x278 x134)) (= x280 x13) (= x27 0) (= x222 (x15 x300)) (= x193 (not x285)) (= x21 (x34 (x270 x156) (x121 1) 0)) (= (x316 x104) x277) (= x275 (x297 x88)) (= x1 (x154 x131)) (= x200 x149) (= (ite (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149) true) (< 0 x149)) 1 0) x112) (= x213 x2) (= x56 x238) (= x50 (ite x63 1 0)) (<= x176 1461501637330902918203684832716283019655932542975) (= (ite x35 1 0) x253) (= x321 x117) (= (and (< 0 x272) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272))) x128) (<= 0 x79) (= x173 x329) (= 0 x159) (= x180 (x261 1461501637330902918203684832716283019655932542975 x2)) (< (x242 x306 x149) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x94 (x34 (x270 x280) (x121 2) 0)) (= x335 (x60 (+ x79 x311))) (= x167 (or (> x125 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x125) true) (< x125 0)))) (> x107 0) x211 (= x333 (ite (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x323) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272)) (> x323 x272)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272) (<= x323 57896044618658097711785492504343953926634992332820282019728792003956564819967))) 1 0)) (= (x261 x282 x333) x27) (< 0 x14) (= x224 x22) (= (x34 (x270 x238) x38 0) x17) (= (x34 (x270 x280) (x121 2) 0) x108) (= x227 (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272) true) (< x272 0)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x272))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1) (= x337 (ite (or x39 x111) 1 0)) (= (= x322 x200) x164) (= (ite (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149)) (> 0 x149))) 1 0) x342) (= x72 (not x240)))))) x165)))
(assert (= 1814410054 (x11 (x121 1814410054))))
(assert (x216 x67))
(assert (x251 x67 x185))
(assert (x207 x136))
(assert (x216 x43))
(assert (=> (>= 10000 x238) (= (x270 x238) (x121 x238))))
(assert (x216 x264))
(assert (x216 x93))
(assert (x216 x306))
(assert (= (x121 1161348331) (x270 1161348331)))
(assert (x216 x9))
(assert (= (x11 (x121 231365057)) 231365057))
(assert (x19 x117))
(assert (x216 x255))
(assert (= (x11 (x121 1980270339)) 1980270339))
(assert (x129 x259))
(assert (x216 x141))
(assert (= (x11 (x270 x238)) x238))
(assert (x216 x233))
(assert (x129 x306))
(assert (x19 (ite (< x272 57896044618658097711785492504343953926634992332820282019728792003956564819968) x272 (x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x314 (- x272 1)))))))
(assert (x216 x253))
(assert (x207 x333))
(assert (x77 x302 x118))
(assert (x216 x186))
(assert (x207 x299))
(assert (x251 x124 x339))
(assert (x216 x180))
(assert (x216 x343))
(assert (x31 x234))
(assert (x216 x153))
(assert (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x11 (x121 57896044618658097711785492504343953926634992332820282019728792003956564819967))))
(assert (and (= (x242 27 3) 81) (= (x242 9 9) 81) (= 9 (x242 3 3)) (= 27 (x242 9 3))))
(assert (x216 x307))
(assert (x216 x206))
(assert (x77 x149 x239))
(assert (x207 x245))
(assert (x216 x279))
(assert (x216 x107))
(assert (x216 x10))
(assert (x216 x178))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (* (x276 x238 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x188 x238 1461501637330902918203684832716283019655932542976)) x238)) (x324 x238 1461501637330902918203684832716283019655932542976) (x208 x238 1461501637330902918203684832716283019655932542976) (x5 x238 1461501637330902918203684832716283019655932542976)))
(assert (x31 x42))
(assert (x216 x203))
(assert (x216 x280))
(assert (= (x11 (x121 1710941022)) 1710941022))
(assert (=> (>= 10000 x343) (= (x121 x343) (x270 x343))))
(assert (x129 x192))
(assert (x89 x2))
(assert (x216 x152))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (* (x276 x81 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) (x188 x81 1461501637330902918203684832716283019655932542976)) x81)) (x324 x81 1461501637330902918203684832716283019655932542976) (x208 x81 1461501637330902918203684832716283019655932542976) (x5 x81 1461501637330902918203684832716283019655932542976)))
(assert (x184 x238))
(assert (x293 x291))
(assert (x216 x175))
(assert (x62 x18 x309))
(assert (x216 x236))
(assert (x216 x213))
(assert (=> (<= x156 10000) (= (x270 x156) (x121 x156))))
(assert (x216 x123))
(assert (x129 x239))
(assert (x216 x333))
(assert (x216 x243))
(assert (x216 x289))
(assert (x89 x238))
(assert (= (+ (x11 x94) 3) (x11 (x70 x94 3))))
(assert (x293 x181))
(assert (x216 x339))
(assert (x216 x204))
(assert (= (x121 1814410054) (x270 1814410054)))
(assert (x216 x173))
(assert (x216 x136))
(assert (x129 x29))
(assert (x216 x160))
(assert (= (x11 (x121 57896044618658097711785492504343953926634992332820282019728792003956564819968)) 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (= (x270 761373525) (x121 761373525)))
(assert (x216 x176))
(assert (= (x270 699302164) (x121 699302164)))
(assert (x293 x247))
(assert (x216 x226))
(assert (x216 x197))
(assert (x216 x342))
(assert (x19 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x251 x291 x337))
(assert (x293 x339))
(assert (x216 x277))
(assert (x216 x142))
(assert (= true x232))
(assert (x207 x264))
(assert (= (x11 (x70 x315 1)) (+ (x11 x315) 1)))
(assert (x62 x218 x137))
(assert (x216 x199))
(assert (x216 x110))
(assert (x216 x98))
(assert (x216 x218))
(assert (x216 x51))
(assert (x216 x148))
(assert (x207 x43))
(assert (x31 x238))
(assert (x216 x221))
(assert (=> (>= 10000 x294) (= (x121 x294) (x270 x294))))
(assert (x216 x247))
(assert (= (x11 (x270 x294)) x294))
(assert (x62 x112 x59))
(assert (=> (<= x42 10000) (= (x270 x42) (x121 x42))))
(assert (x216 x181))
(assert (x216 x46))
(assert (x216 x222))
(assert (x216 x163))
(assert (x31 x96))
(assert (x216 x12))
(assert (x216 x262))
(assert (x216 x124))
(assert (x62 x43 x54))
(assert (x62 x46 x76))
(assert (= (x11 (x270 x280)) x280))
(assert (x216 x287))
(assert (x216 x224))
(assert (x216 x76))
(assert (x216 x282))
(assert (= (x11 (x121 1763987465)) 1763987465))
(assert (x216 x291))
(assert (not x16))
(assert (= (x11 (x270 x156)) x156))
(assert (x216 x245))
(check-sat)
(exit)
