(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x71 0)) (((x257 (x240 Int)) (x193 (x31 x71) (x74 x71) (x381 Int)) (x103 (x50 x71) (x332 Int)))))
(declare-fun x149 () Int)
(declare-fun x185 () Bool)
(declare-fun x234 () Bool)
(declare-fun x354 () Bool)
(declare-fun x340 () Bool)
(declare-fun x86 () Bool)
(declare-fun x301 () Int)
(declare-fun x70 () Int)
(declare-fun x274 () Bool)
(declare-fun x217 () Bool)
(declare-fun x374 () Int)
(declare-fun x98 () Int)
(declare-fun x430 () Int)
(declare-fun x405 () Int)
(declare-fun x341 () Bool)
(declare-fun x10 () Int)
(declare-fun x215 () Bool)
(declare-fun x170 () Bool)
(declare-fun x297 (Int Int) Int)
(declare-fun x408 () Bool)
(declare-fun x320 () Int)
(declare-fun x227 () Bool)
(declare-fun x321 () Int)
(declare-fun x171 () Int)
(declare-fun x260 () Int)
(declare-fun x65 () Bool)
(declare-fun x420 () Int)
(declare-fun x85 () Int)
(declare-fun x277 () Int)
(declare-fun x303 () Bool)
(declare-fun x66 () Int)
(declare-fun x95 (Int Int) Int)
(declare-fun x393 () Bool)
(declare-fun x229 () Bool)
(declare-fun x351 () Bool)
(declare-fun x167 () Int)
(declare-fun x80 () Bool)
(declare-fun x261 () Int)
(declare-fun x311 () Int)
(declare-fun x399 () Bool)
(declare-fun x130 () Bool)
(declare-fun x89 () Bool)
(declare-fun x207 () Int)
(declare-fun x271 () Int)
(declare-fun x155 () Int)
(declare-fun x317 (Int) x71)
(declare-fun x197 () Bool)
(declare-fun x121 () Bool)
(declare-fun x27 (Int) Int)
(declare-fun x189 () Int)
(declare-fun x132 () Int)
(declare-fun x114 () Int)
(declare-fun x116 () Int)
(declare-fun x12 (Int Int) Int)
(declare-fun x118 () Int)
(declare-fun x23 () Int)
(declare-fun x94 () Int)
(declare-fun x357 () Bool)
(declare-fun x120 () Bool)
(declare-fun x409 () Bool)
(declare-fun x158 () Int)
(declare-fun x72 () Bool)
(declare-fun x394 () Int)
(declare-fun x253 () Int)
(declare-fun x259 (x71) Int)
(declare-fun x362 () Bool)
(declare-fun x145 () Int)
(declare-fun x401 () Int)
(declare-fun x28 () Int)
(declare-fun x231 () Bool)
(declare-fun x423 (x71) Int)
(declare-fun x280 () Bool)
(declare-fun x47 () Int)
(declare-fun x396 () Int)
(declare-fun x178 () Int)
(declare-fun x106 (x71) Int)
(declare-fun x84 () Bool)
(declare-fun x372 () Bool)
(declare-fun x205 () Int)
(declare-fun x343 () Int)
(declare-fun x263 () Int)
(declare-fun x322 () Bool)
(declare-fun x137 () Int)
(declare-fun x410 () Bool)
(declare-fun x291 () Int)
(declare-fun x298 () Int)
(declare-fun x3 () Int)
(declare-fun x338 () Int)
(declare-fun x56 () Bool)
(declare-fun x305 () Bool)
(declare-fun x306 () Int)
(declare-fun x67 () Int)
(declare-fun x326 () Int)
(declare-fun x241 () Bool)
(declare-fun x76 () Int)
(declare-fun x262 () Bool)
(declare-fun x203 () Int)
(declare-fun x192 () Int)
(declare-fun x223 () Int)
(declare-fun x414 () Int)
(declare-fun x151 () Bool)
(declare-fun x102 () Int)
(declare-fun x179 () Int)
(declare-fun x190 () Bool)
(declare-fun x29 () Int)
(declare-fun x129 () Bool)
(declare-fun x39 () Bool)
(declare-fun x281 () Bool)
(declare-fun x87 () Bool)
(declare-fun x191 () Bool)
(declare-fun x209 () Int)
(declare-fun x216 () Int)
(declare-fun x242 () Bool)
(declare-fun x416 () Int)
(declare-fun x388 () Int)
(declare-fun x133 (Int Int) Int)
(declare-fun x413 () Int)
(declare-fun x88 () Bool)
(declare-fun x397 () Bool)
(declare-fun x219 () Int)
(declare-fun x353 () Bool)
(declare-fun x272 () Int)
(declare-fun x252 () Int)
(declare-fun x412 () Bool)
(declare-fun x140 () Int)
(declare-fun x292 () Bool)
(declare-fun x51 () Int)
(declare-fun x246 () Bool)
(declare-fun x328 () Int)
(declare-fun x83 () Bool)
(declare-fun x296 () Int)
(declare-fun x196 () Bool)
(declare-fun x176 () Bool)
(declare-fun x411 () Int)
(declare-fun x13 () Bool)
(declare-fun x142 () Bool)
(declare-fun x395 () Int)
(declare-fun x417 () Int)
(declare-fun x45 () Int)
(declare-fun x46 () Int)
(declare-fun x75 () Int)
(declare-fun x352 () Int)
(declare-fun x314 () Bool)
(declare-fun x225 () Int)
(declare-fun x218 () Bool)
(declare-fun x355 () Int)
(declare-fun x360 () Int)
(declare-fun x119 () Bool)
(declare-fun x175 () Bool)
(declare-fun x108 () Bool)
(declare-fun x77 () Int)
(declare-fun x138 () Int)
(declare-fun x237 () Bool)
(declare-fun x60 () Bool)
(declare-fun x371 () Int)
(declare-fun x212 () Int)
(declare-fun x325 () Int)
(declare-fun x199 () Int)
(declare-fun x404 () Bool)
(declare-fun x236 () Bool)
(declare-fun x387 () Bool)
(declare-fun x206 () Int)
(declare-fun x327 () Int)
(declare-fun x208 () Int)
(declare-fun x250 () Int)
(declare-fun x105 () Int)
(declare-fun x284 () Bool)
(declare-fun x232 () Bool)
(declare-fun x268 () Bool)
(declare-fun x421 () Int)
(declare-fun x37 () Int)
(declare-fun x380 () Bool)
(declare-fun x168 () Bool)
(declare-fun x348 () Int)
(declare-fun x318 () Int)
(declare-fun x264 () Bool)
(declare-fun x8 () Bool)
(declare-fun x386 () Bool)
(declare-fun x267 () Bool)
(declare-fun x407 () Bool)
(declare-fun x177 () Int)
(declare-fun x293 () Bool)
(declare-fun x194 () Bool)
(declare-fun x42 () Bool)
(declare-fun x44 () Int)
(declare-fun x366 () Bool)
(declare-fun x313 () Int)
(declare-fun x390 () Bool)
(declare-fun x233 () Int)
(declare-fun x331 () Bool)
(declare-fun x345 () Int)
(declare-fun x110 () Bool)
(declare-fun x402 () Int)
(declare-fun x100 () Bool)
(declare-fun x244 () Int)
(declare-fun x115 () Int)
(declare-fun x200 () Int)
(declare-fun x383 () Bool)
(declare-fun x375 () Int)
(declare-fun x309 () Bool)
(declare-fun x123 () Int)
(declare-fun x310 () Bool)
(declare-fun x17 () Int)
(declare-fun x319 () Bool)
(declare-fun x141 () Bool)
(declare-fun x139 () Bool)
(declare-fun x195 () Bool)
(declare-fun x33 () Bool)
(declare-fun x224 () Int)
(declare-fun x363 () Bool)
(declare-fun x349 () Bool)
(declare-fun x136 () Bool)
(declare-fun x43 () Int)
(declare-fun x245 () Bool)
(declare-fun x384 () Bool)
(declare-fun x54 () Bool)
(declare-fun x350 () Bool)
(declare-fun x152 () Int)
(declare-fun x282 () Int)
(declare-fun x131 () Int)
(declare-fun x92 () Bool)
(declare-fun x40 () Int)
(declare-fun x204 () Bool)
(declare-fun x427 () Bool)
(declare-fun x78 () Int)
(declare-fun x249 () Bool)
(declare-fun x365 () Int)
(declare-fun x276 () Int)
(declare-fun x213 () Bool)
(declare-fun x370 () Bool)
(declare-fun x93 () Bool)
(declare-fun x235 () Int)
(declare-fun x198 () Int)
(declare-fun x166 () Int)
(declare-fun x26 () Bool)
(declare-fun x5 () Bool)
(declare-fun x146 () Int)
(declare-fun x356 () Int)
(declare-fun x41 () Int)
(declare-fun x265 () Int)
(declare-fun x286 () Int)
(declare-fun x4 () Int)
(declare-fun x221 () Int)
(declare-fun x172 () Bool)
(declare-fun x273 () Int)
(declare-fun x34 () Int)
(declare-fun x312 () Bool)
(declare-fun x248 () Bool)
(declare-fun x125 () Bool)
(declare-fun x279 () Bool)
(declare-fun x6 () Int)
(declare-fun x368 () Bool)
(declare-fun x53 () Int)
(declare-fun x300 () Int)
(declare-fun x156 () Bool)
(declare-fun x255 () Bool)
(declare-fun x382 () Int)
(declare-fun x230 () Int)
(declare-fun x337 () Bool)
(declare-fun x275 () Int)
(declare-fun x376 () Bool)
(declare-fun x228 () Int)
(declare-fun x111 () Int)
(declare-fun x330 () Int)
(declare-fun x299 () Int)
(declare-fun x49 () Int)
(declare-fun x15 () Int)
(declare-fun x162 () Int)
(declare-fun x210 () Bool)
(declare-fun x391 () Bool)
(declare-fun x134 () Bool)
(declare-fun x344 () Int)
(declare-fun x16 () Bool)
(declare-fun x398 () Bool)
(declare-fun x289 () Bool)
(declare-fun x346 () Bool)
(declare-fun x359 () Int)
(declare-fun x378 () Bool)
(declare-fun x379 () Int)
(declare-fun x173 () Int)
(declare-fun x377 () Bool)
(declare-fun x101 () Int)
(declare-fun x415 () Int)
(declare-fun x278 () Bool)
(declare-fun x79 () Int)
(declare-fun x369 () Bool)
(declare-fun x147 () Bool)
(declare-fun x58 () Bool)
(declare-fun x288 () Bool)
(declare-fun x150 () Bool)
(declare-fun x266 () Int)
(declare-fun x336 () Bool)
(declare-fun x165 () Bool)
(declare-fun x329 () Bool)
(declare-fun x347 () Bool)
(declare-fun x373 () Bool)
(declare-fun x429 () Bool)
(declare-fun x184 () Bool)
(declare-fun x38 () Int)
(declare-fun x109 () Int)
(declare-fun x90 () Int)
(declare-fun x48 () Bool)
(declare-fun x188 () Int)
(declare-fun x82 () Int)
(declare-fun x385 () Int)
(declare-fun x334 () Bool)
(declare-fun x324 () Int)
(declare-fun x361 () Bool)
(declare-fun x148 () Bool)
(declare-fun x104 () Int)
(declare-fun x161 () Bool)
(declare-fun x59 () Int)
(declare-fun x183 () Bool)
(declare-fun x69 () Bool)
(declare-fun x358 () Bool)
(declare-fun x202 () Bool)
(declare-fun x81 () Bool)
(declare-fun x35 () Bool)
(declare-fun x247 () Bool)
(declare-fun x1 () Int)
(declare-fun x419 () Int)
(declare-fun x424 () Bool)
(declare-fun x238 () Bool)
(declare-fun x160 () Int)
(declare-fun x7 () Int)
(declare-fun x122 () Int)
(declare-fun x339 () Bool)
(declare-fun x342 () Int)
(declare-fun x68 () Int)
(declare-fun x290 () Int)
(declare-fun x153 () Bool)
(declare-fun x126 () Bool)
(declare-fun x64 () Int)
(declare-fun x135 () Bool)
(declare-fun x25 () Int)
(declare-fun x157 () Int)
(declare-fun x143 () Bool)
(declare-fun x107 () Int)
(declare-fun x201 () Int)
(declare-fun x63 () Int)
(declare-fun x389 () Int)
(declare-fun x294 (Int Int) Int)
(declare-fun x62 () Bool)
(declare-fun x333 () Bool)
(declare-fun x128 () Bool)
(declare-fun x425 () Int)
(declare-fun x422 () Int)
(declare-fun x113 () Int)
(declare-fun x287 () Int)
(declare-fun x18 () Bool)
(declare-fun x182 () Int)
(declare-fun x154 () Int)
(declare-fun x97 () Int)
(declare-fun x316 () Int)
(declare-fun x214 () Int)
(declare-fun x256 () Int)
(declare-fun x117 () Bool)
(declare-fun x406 () Int)
(declare-fun x403 () Bool)
(declare-fun x163 () Int)
(declare-fun x392 () Bool)
(declare-fun x99 () Bool)
(declare-fun x124 () Int)
(declare-fun x14 () Int)
(declare-fun x302 () Int)
(declare-fun x73 () Bool)
(declare-fun x112 () Bool)
(declare-fun x22 () Bool)
(declare-fun x96 () Int)
(declare-fun x254 () Int)
(declare-fun x20 () Bool)
(declare-fun x2 () Int)
(declare-fun x52 () Int)
(declare-fun x36 () Int)
(declare-fun x144 () Bool)
(declare-fun x9 () Int)
(declare-fun x426 () Bool)
(declare-fun x323 () Bool)
(define-fun x307 ((x71 x71) (x181 Int)) x71 (ite ((_ is x193) x71) (x193 (x31 x71) (x74 x71) (+ (x381 x71) x181)) (ite ((_ is x103) x71) (x103 (x50 x71) (+ x181 (x332 x71))) (x257 (+ (x240 x71) x181)))))
(define-fun x239 ((x187 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x187) (>= x187 0)) x187 (- x187 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x270 ((x187 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x187) (> 0 x187)) (+ x187 115792089237316195423570985008687907853269984665640564039457584007913129639936) x187))
(define-fun x400 ((x187 Int)) Int (ite (and (>= x187 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x187)) x187 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x187) (< x187 231584178474632390847141970017375815706539969331281128078915168015826259279872)) (- x187 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x187) (> 0 x187)) (+ x187 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x12 x187 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x364 ((x226 Int)) Bool (and (< x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x226)))
(define-fun x258 ((x226 Int) (x127 Int)) Bool (= (x297 x226 x127) (x297 x127 x226)))
(define-fun x211 ((x226 Int) (x127 Int)) Bool (and (=> (and (> x127 0) (< 0 x226)) (< 0 (x297 x226 x127))) (=> (and (< x127 0) (< x226 0)) (< 0 (x297 x226 x127))) (=> (and (> 0 x127) (> x226 0)) (> 0 (x297 x226 x127))) (=> (and (> 0 x226) (> x127 0)) (< (x297 x226 x127) 0))))
(define-fun x304 ((x226 Int) (x127 Int)) Bool (=> (and (> x127 0) (> x226 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x297 x226 x127)) (= (x294 (x400 (x297 x226 x127)) x226) x127))))
(define-fun x11 ((x226 Int) (x127 Int)) Bool (=> (and (not (= 0 x127)) (not (= 0 x226))) (and (= x226 (x294 (x297 x226 x127) x127)) (= x127 (x294 (x297 x226 x127) x226)))))
(define-fun x418 ((x226 Int) (x127 Int)) Bool (=> (and (> x226 0) (< 0 x127)) (= (> (x297 x226 x127) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (x294 115792089237316195423570985008687907853269984665640564039457584007913129639935 x226) x127))))
(define-fun x164 ((x226 Int) (x127 Int)) Bool (and (= (x400 (x297 x226 x127)) (x400 (x297 (- x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) x127))) (= (x400 (x297 x226 x127)) (x400 (x297 (- x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x127 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x400 (x297 x226 (- x127 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x400 (x297 x226 x127)))))
(define-fun x367 ((x226 Int) (x127 Int)) Bool (and (=> (and (and (< 0 x127) (<= x127 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x226 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x226))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x297 x226 x127)) (<= x226 (x294 57896044618658097711785492504343953926634992332820282019728792003956564819967 x127)))) (=> (and (and (<= x226 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x226 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x127 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x127 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x294 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x127)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x226)) (<= (x297 (- x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x127 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (<= x226 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x226)) (and (< 0 x127) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x127))) (= (>= (x294 57896044618658097711785492504343953926634992332820282019728792003956564819968 x127) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x226)) (>= (x297 (- x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) x127) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (> x226 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x226)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x127) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x127))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x127) (x294 57896044618658097711785492504343953926634992332820282019728792003956564819968 x226)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x297 x226 (- x127 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(define-fun x169 ((x226 Int) (x127 Int)) Bool (and (x418 x226 x127) (x164 x226 x127) (x211 x226 x127) (x367 x226 x127) (x304 x226 x127) (x258 x226 x127) (x11 x226 x127)))
(define-fun x222 ((x226 Int)) Bool (and (= 0 (x297 0 x226)) (= (x297 x226 0) 0)))
(define-fun x30 ((x226 Int)) Bool (and (= (x297 1 x226) x226) (= (x297 x226 1) x226)))
(define-fun x295 ((x226 Int)) Bool (and (x30 x226) (x222 x226)))
(define-fun x335 ((x226 Int) (x127 Int)) Bool (=> (and (> x226 0) (> x127 0)) (and (>= x226 (x294 x226 x127)) (<= 0 (x294 x226 x127)))))
(define-fun x243 ((x226 Int) (x127 Int)) Bool (=> (and (and (< x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x226 0)) (and (>= x127 1) (< x127 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (>= (x294 x226 x127) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x294 x226 x127)))))
(define-fun x61 ((x226 Int) (x127 Int)) Bool (=> (and (< x127 x226) (> x127 1)) (> x226 (x294 x226 x127))))
(define-fun x285 ((x226 Int) (x127 Int)) Bool (=> (and (> x127 0) (> x226 0)) (= (> x127 x226) (= (x294 x226 x127) 0))))
(define-fun x283 ((x226 Int) (x127 Int)) Bool (=> (and (< 0 x127) (> x226 0)) (and (>= x226 (x297 (x294 x226 x127) x127)) (< (- x226 x127) (x297 (x294 x226 x127) x127)))))
(define-fun x308 ((x226 Int) (x127 Int)) Bool (and (x335 x226 x127) (x61 x226 x127) (x283 x226 x127) (x243 x226 x127) (x285 x226 x127)))
(define-fun x220 ((x226 Int)) Bool (= 0 (x294 0 x226)))
(define-fun x251 ((x226 Int)) Bool (= x226 (x294 x226 1)))
(define-fun x91 ((x226 Int)) Bool (=> (not (= x226 0)) (= (x294 x226 x226) 1)))
(define-fun x57 ((x226 Int)) Bool (and (x220 x226) (x251 x226) (x91 x226)))
(define-fun x269 ((x226 Int) (x127 Int) (x159 Int) (x21 Int)) Bool (=> (and (>= x159 x226) (>= x127 0) (<= 0 x226) (>= x21 x127)) (>= (x297 x159 x21) (x297 x226 x127))))
(define-fun x32 ((x226 Int) (x127 Int) (x159 Int) (x21 Int)) Bool (=> (= x159 x226) (= (x297 x226 (- x127 x21)) (- (x297 x226 x127) (x297 x159 x21)))))
(define-fun x55 ((x226 Int)) Bool (=> (and (not (= 1461501637330902918203684832716283019655932542975 x226)) (not (= 1245370514 x226)) (not (= x226 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 149895259 x226)) (not (= x226 2685885107)) (< 10000 x226)) (not ((_ is x257) (x317 x226)))))
(assert (= x410 (=> (and (and (= x286 x177) (= x183 x69) (= x177 (x294 x203 400))) (and x231 (= x42 false) (= x231 x136) (= x421 400) (= x379 x203))) x56)))
(assert (x364 x221))
(assert (and (x418 500 x395) (= (* 500 x395) (x297 500 x395)) (x304 500 x395) (x367 500 x395) (x11 500 x395) (and (= (x297 500 (- x395 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x395 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x395) (- (* x395 500) (* x395 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x395 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x395 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x395 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 500 x395)))
(assert (x364 x6))
(assert (and (x243 x216 3) (x61 x216 3) (x335 x216 3) (x285 x216 3) (=> (and (< 0 x216) (< 0 3)) (and (> (* (x294 x216 3) 3) (- x216 3)) (<= (* 3 (x294 x216 3)) x216)))))
(assert (x364 x45))
(assert (x364 x132))
(assert (and (x418 400 x28) (= (* 400 x28) (x297 400 x28)) (x304 400 x28) (x367 400 x28) (x11 400 x28) (and (= (x297 400 (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x28) (- (* x28 400) (* x28 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 400 x28)))
(assert (and (x418 2 x316) (= (* 2 x316) (x297 2 x316)) (x304 2 x316) (x367 2 x316) (x11 2 x316) (and (= (x297 2 (- x316 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x316 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x316) (- (* x316 2) (* x316 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x316 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x316 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x316 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 2 x316)))
(assert (x364 x178))
(assert (= x309 (and x89 (not x427))))
(assert (x295 x111))
(assert (and (x418 3 x228) (= (* 3 x228) (x297 3 x228)) (x304 3 x228) (x367 3 x228) (x11 3 x228) (and (= (x297 3 (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x228) (- (* x228 3) (* x228 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x228 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 3 x228)))
(assert (= x143 (and x242 x218)))
(assert (x364 x301))
(assert (x364 x244))
(assert (= x20 (and x354 x262)))
(assert (x364 x415))
(assert (x295 x355))
(assert (= (=> (and (= x232 (or x398 x81)) (= (x294 x214 x360) x326) (= x162 x132) (= x7 x118) (= x415 x201) (= x219 x301) (<= 0 x64) (= x129 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x137)) (= x109 x389) (= x342 0) (= x58 x120) (= x416 x379) (= (x297 x118 x162) x137) (= (= x422 0) x398) (= (= x17 0) x81) (= (> (x106 (x317 x4)) 0) x184) x184 (= x43 x124) (< 0 x4) (= x64 (x259 (x317 x4))) (= 0 x101) (= x260 x1) (not (= 149895259 x256)) (= x132 x290) (= x379 x422) (= x109 x416) (= x402 x77) (= (and x322 x58) x69) (= x301 x416) (= x131 0) (= x420 x360) (= x46 x225) (= x158 400) (= x201 x43) (= x43 x420) (> x320 0) (= (x297 x219 x46) x214) (= x129 x322) (= x17 x290) (= x361 (= x326 x260)) (not (= 1245370514 x256)) (= (x106 (x317 x4)) x320) (= x221 x124) (= x225 x77) (= x379 x7) (= (not (= 0 x221)) x120) (= x402 x167) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x273) (>= 1461501637330902918203684832716283019655932542975 x4) (= x343 x1) (= x77 x290) (= 2685885107 x256)) (and (=> (and (and (= x183 x69) x245 (= x245 x232) (= 0 x271) (= x286 x271)) x232) x56) (=> (and (not x232) (and (= x112 (not x331)) (= x124 x90) (= x290 x411) x112 (= x331 x232) (= x427 (= x411 x90)))) (and (=> (and x427 (and (= x427 x197) (= x69 x183) (= x286 x298) (= x298 x379) x197)) x56) (=> (and (and (= x124 x302) (= x391 x427) x204 (= x189 x379) (= x238 (= x189 x302)) (= (not x391) x204)) (not x427)) (and (=> (and (not x238) (and (= x66 (* x316 2)) (= x299 2) (= x124 x316) (= x190 x238) (= (= x66 x321) x262) (= x290 x321) x292 (= (not x190) x292))) (and (=> (and (and x370 (= x286 x171) (= x145 x379) (= x69 x183) (= (x400 (* x145 2)) x171) (= x262 x370) (= x359 2)) x262) x56) (=> (and (not x262) (and (= (not x22) x196) (= x22 x262) (= x124 x374) (= 2 x208) (= x379 x277) (= x362 (= x277 x123)) x196 (= (* 2 x374) x123))) (and (=> (and x362 (and (= x183 x69) (= x362 x92) (= x105 x286) (= 2 x344) (= x96 x290) (= x105 (x400 (* x96 2))) x92)) x56) (=> (and (not x362) (and (= x142 (not x255)) (= 2 x205) x142 (= x97 x124) (= (* 2 x401) x325) (= x290 x401) (= x362 x255) (= (= x97 x325) x314))) (and (=> x314 x248) (=> (and (not x314) (and (= (= x324 x149) x218) (= (not x100) x303) (= x379 x209) (= x324 (* x209 2)) (= x124 x149) x303 (= 2 x206) (= x314 x100))) (and (=> x218 x215) (=> (and (and (= x261 x124) (= x151 x218) x312 (= (not x151) x312) (= x290 x63) (= x114 (* x261 3)) (= x383 (= x63 x114)) (= x155 3)) (not x218)) (and (=> (and (and (= x379 x163) (= (x400 (* 3 x163)) x166) (= x99 x383) (= x10 3) (= x166 x286) (= x69 x183) x99) x383) x56) (=> (and (and x88 (= (* x52 3) x173) (= (not x54) x88) (= x160 x379) (= x289 (= x160 x173)) (= x383 x54) (= x52 x124) (= x382 3)) (not x383)) (and (=> (and (and (= x110 x289) (= (* x78 3) x40) (= x352 3) (= x87 (= x40 x188)) (= x78 x290) x368 (= x368 (not x110)) (= x124 x188)) (not x289)) (and (=> x87 x117) (=> (and (and (= (not x33) x229) (= x278 (= x291 x192)) x229 (= 3 x70) (= x291 x124) (= x379 x430) (= (* x430 3) x192) (= x87 x33)) (not x87)) (and (=> x278 x165) (=> (and (not x278) (and (= (not x134) x241) (= x250 x290) (= x319 (= x182 x250)) x241 (= x276 10) (= x134 x278) (= x124 x348) (= (* 10 x348) x182))) (and (=> (and x319 (and (= x113 (x400 (* 10 x41))) (= x337 x319) (= x113 x286) x337 (= x183 x69) (= x6 10) (= x41 x379))) x56) (=> (and (and (= 10 x200) (= x369 (not x217)) (= x405 x379) (= (= x252 x405) x403) x369 (= x319 x217) (= x252 (* x111 10)) (= x124 x111)) (not x319)) (and (=> (and (and (= x290 x282) (= x403 x246) (= x237 (not x246)) (= x26 (= x82 x328)) x237 (= (* 10 x282) x82) (= x328 x124) (= x104 10)) (not x403)) (and (=> x26 x366) (=> (and (not x26) (and (= x124 x425) (= (= x425 x37) x267) x305 (= x37 (* x138 10)) (= 10 x330) (= x138 x379) (= (not x72) x305) (= x72 x26))) (and (=> (and (and (= x376 (= x76 x146)) (= (* 500 x394) x146) (= x351 (not x358)) (= x76 x290) (= x124 x394) x351 (= 500 x152) (= x267 x358)) (not x267)) (and (=> (and x376 (and x397 (= x286 x14) (= x79 x379) (= x376 x397) (= 500 x253) (= x14 (x400 (* x79 500))) (= x69 x183))) x56) (=> (and (and (= (* 500 x395) x306) (= x150 (not x390)) x150 (= x379 x140) (= x390 x376) (= 500 x265) (= x395 x124) (= x121 (= x140 x306))) (not x376)) (and (=> (and (and (= x286 x75) (= x115 500) x310 (= x183 x69) (= x290 x15) (= x75 (x400 (* 500 x15))) (= x310 x121)) x121) x56) (=> (and (and (= (= x414 x396) x60) x373 (= (not x329) x373) (= x396 (* x338 500)) (= x329 x121) (= x290 x338) (= x414 x124) (= x365 500)) (not x121)) (and (=> x60 x380) (=> (and (and (= 500 x198) (= x379 x51) x387 (= x387 (not x18)) (= x124 x287) (= x388 (* x51 500)) (= (= x287 x388) x349) (= x18 x60)) (not x60)) (and (=> (and (not x349) (and (= (not x48) x334) (= x124 x68) (= x48 x349) (= (* 400 x68) x47) (= x274 (= x263 x47)) x334 (= x290 x263) (= 400 x3))) (and (=> (and (and (= x28 x379) (= x69 x183) x128 (= x345 x286) (= x375 400) (= x128 x274) (= x345 (x400 (* 400 x28)))) x274) x56) (=> (and (not x274) (and x288 (= x124 x9) (= x274 x93) (= x313 (* 400 x9)) (= 400 x102) (= (not x93) x288) (= (= x313 x157) x119) (= x157 x379))) (and (=> (and (not x119) (and x73 (= (not x293) x73) (= x371 x124) (= 400 x44) (= x293 x119) (= x136 (= x371 x356)) (= (* 400 x355) x356) (= x355 x290))) (and (=> (and (not x136) (and (= x379 x230) (= x136 x353) (= (not x353) x399) (= x318 x124) (= 400 x122) (= (* x230 400) x223) x399 (= (= x318 x223) x156))) (and (=> (and (not x156) (and (= false x39) (= x286 x29) (= x39 x183) (= x156 x279) (= x29 0) x194 (= x194 (not x279)))) x56) (=> x156 x202))) (=> x136 x410))) (=> (and x119 (and (= x286 x36) (= x69 x183) x336 (= (x400 (* 400 x25)) x36) (= x336 x119) (= x290 x25) (= x224 400))) x56))))) (=> x349 x236))))))))) (=> x267 x210))))) (=> (and (and (= x183 x69) (= x5 x403) (= x286 x327) (= 10 x406) (= x290 x296) (= (x400 (* 10 x296)) x327) x5) x403) x56))))))))) (=> (and (and (= x69 x183) (= x86 x289) x86 (= x286 x272) (= x300 3) (= x228 x290) (= (x400 (* x228 3)) x272)) x289) x56))))))))))))) (=> (and x238 (and (= x69 x183) (= x67 x290) x281 (= x286 x67) (= x238 x281))) x56))))))) x135))
(assert (x55 x4))
(assert (x57 2))
(assert (and (x418 400 x25) (= (* 400 x25) (x297 400 x25)) (x304 400 x25) (x367 400 x25) (x11 400 x25) (and (= (x297 400 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x25) (- (* x25 400) (* x25 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x25 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 400 x25)))
(assert (= (x423 (x257 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x364 x382))
(assert (x364 x29))
(assert (= (and (not x238) x309) x354))
(assert (x364 x421))
(assert (x364 x374))
(assert (x364 x78))
(assert (x364 x59))
(assert (and (x418 400 x68) (= (* 400 x68) (x297 400 x68)) (x304 400 x68) (x367 400 x68) (x11 400 x68) (and (= (x297 400 (- x68 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x68 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x68) (- (* x68 400) (* x68 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x68 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x68 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x68 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 400 x68)))
(assert (x364 x41))
(assert (x364 x36))
(assert (= (x423 (x257 149895259)) 149895259))
(assert (and (x418 2 x209) (= (* 2 x209) (x297 2 x209)) (x304 2 x209) (x367 2 x209) (x11 2 x209) (and (= (x297 2 (- x209 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x209 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x209) (- (* x209 2) (* x209 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x209 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x209 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x209 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 2 x209)))
(assert (x364 x271))
(assert (x295 x68))
(assert (x364 x1))
(assert (= x227 (and (not x121) x341)))
(assert (x364 x166))
(assert (x364 x265))
(assert (= (and (not x60) x227) x126))
(assert (and (x418 10 x348) (= (* 10 x348) (x297 10 x348)) (x304 10 x348) (x367 10 x348) (x11 10 x348) (and (= (x297 10 (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x348) (- (* x348 10) (* x348 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x348 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 10 x348)))
(assert (x295 x41))
(assert (x364 x96))
(assert (x364 x344))
(assert (and (x418 10 x296) (= (* 10 x296) (x297 10 x296)) (x304 10 x296) (x367 10 x296) (x11 10 x296) (and (= (x297 10 (- x296 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x296 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x296) (- (* x296 10) (* x296 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x296 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x296 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x296 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 10 x296)))
(assert (x364 x276))
(assert (= (and x83 x314) x172))
(assert (x364 x266))
(assert (x295 x261))
(assert (x364 x158))
(assert (x364 x417))
(assert (= x333 (and x141 x362)))
(assert (x364 x395))
(assert (x295 x394))
(assert (= x141 (and x354 (not x262))))
(assert (x364 x254))
(assert (x295 x118))
(assert (x364 x342))
(assert (x364 x113))
(assert (= (=> (and (and (= false x13) (= x379 x116) (= x45 2) x377 (= x314 x377)) (and (= (x294 x116 2) x419) (= x286 x419) (= x183 x69))) x56) x248))
(assert (x57 x360))
(assert (and (x418 2 x96) (= (* 2 x96) (x297 2 x96)) (x304 2 x96) (x367 2 x96) (x11 2 x96) (and (= (x297 2 (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x96) (- (* x96 2) (* x96 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x96 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 2 x96)))
(assert (x364 x422))
(assert (x295 x138))
(assert (x364 x216))
(assert (x364 x225))
(assert (x364 x203))
(assert (x364 x198))
(assert (x57 400))
(assert (x364 x44))
(assert (x364 x109))
(assert (and (x418 500 x79) (= (* 500 x79) (x297 500 x79)) (x304 500 x79) (x367 500 x79) (x11 500 x79) (and (= (x297 500 (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x79) (- (* x79 500) (* x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 500 x79)))
(assert (x364 x152))
(assert (x364 x416))
(assert (x364 x208))
(assert (x364 x67))
(assert (x295 10))
(assert (x295 x163))
(assert (= x249 (and x148 (not x136))))
(assert (= x62 (and x319 x144)))
(assert (x364 x411))
(assert (x364 x343))
(assert (= x148 (and (not x119) x8)))
(assert (= (and x60 x227) x191))
(assert (x57 3))
(assert (x295 x282))
(assert (x364 x371))
(assert (x295 400))
(assert (and (x335 x85 2) (=> (and (< 0 x85) (< 0 2)) (and (> (* (x294 x85 2) 2) (- x85 2)) (<= (* 2 (x294 x85 2)) x85))) (= (- x85 (x133 1 x85)) (* 2 (x294 x85 2))) (x61 x85 2) (x243 x85 2) (x285 x85 2)))
(assert (x295 x25))
(assert (= x264 (and x339 x274)))
(assert (x364 x402))
(assert (x169 x219 x46))
(assert (x364 x406))
(assert (x364 x79))
(assert (x295 x401))
(assert (x295 x296))
(assert (x364 x85))
(assert (x364 x149))
(assert (x364 x316))
(assert (= (and (not x319) x144) x424))
(assert (and (x418 3 x261) (= (* 3 x261) (x297 3 x261)) (x304 3 x261) (x367 3 x261) (x11 3 x261) (and (= (x297 3 (- x261 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x261 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x261) (- (* x261 3) (* x261 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x261 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x261 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x261 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 3 x261)))
(assert (= (and (not x274) x339) x8))
(assert (x364 x302))
(assert (= (and x393 (not x383)) x125))
(assert (= (and (not x26) x407) x161))
(assert (and (x418 10 x282) (= (* 10 x282) (x297 10 x282)) (x304 10 x282) (x367 10 x282) (x11 10 x282) (and (= (x297 10 (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x282) (- (* x282 10) (* x282 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x282 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 10 x282)))
(assert (= x195 (and x153 (not x87))))
(assert (x364 x338))
(assert (x295 x228))
(assert (x295 x15))
(assert (x364 x154))
(assert (= (and x126 (not x349)) x339))
(assert (x295 x209))
(assert (x364 x328))
(assert (x364 x28))
(assert (x364 x273))
(assert (x364 x51))
(assert (x57 x244))
(assert (x364 x298))
(assert (x295 x51))
(assert (x295 x28))
(assert (x295 x145))
(assert (= (x257 149895259) (x317 149895259)))
(assert (and (x418 500 x15) (= (* 500 x15) (x297 500 x15)) (x304 500 x15) (x367 500 x15) (x11 500 x15) (and (= (x297 500 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x15) (- (* x15 500) (* x15 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x15 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 500 x15)))
(assert (= (=> (and (and (= x98 x286) (= x98 x413) (= x98 x207) x183) (and (= (= x361 x170) x323) (= x233 x207) (= x170 (= x343 x233)))) x323) x56))
(assert (x364 x420))
(assert (= x117 (=> (and (and (= x379 x417) (= x235 3) (= false x429) (= x87 x139) x139) (and (= (x294 x417 3) x212) (= x183 x69) (= x286 x212))) x56)))
(assert (x364 x75))
(assert (x364 x155))
(assert (x364 x76))
(assert (x295 x9))
(assert (x295 3))
(assert (x364 x140))
(assert (= (x423 (x257 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x364 x14))
(assert (and (x243 x203 400) (x61 x203 400) (x335 x203 400) (x285 x203 400) (=> (and (< 0 x203) (< 0 400)) (and (> (* (x294 x203 400) 400) (- x203 400)) (<= (* 400 (x294 x203 400)) x203)))))
(assert (x364 x188))
(assert (= (and x403 x424) x185))
(assert (x364 x162))
(assert (x364 x7))
(assert (x295 2))
(assert (= x372 (and x341 x121)))
(assert (= (and x289 x125) x176))
(assert (and (x418 3 x78) (= (* 3 x78) (x297 3 x78)) (x304 3 x78) (x367 3 x78) (x11 3 x78) (and (= (x297 3 (- x78 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x78 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x78) (- (* x78 3) (* x78 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x78 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x78 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x78 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 3 x78)))
(assert (x364 x199))
(assert (x364 x359))
(assert (x364 x394))
(assert (x169 x118 x162))
(assert (x57 x116))
(assert (x295 x374))
(assert (= x89 (and (not x232) x108)))
(assert (x364 x105))
(assert (x364 x321))
(assert (and (x243 x417 3) (x61 x417 3) (x335 x417 3) (x285 x417 3) (=> (and (< 0 x417) (< 0 3)) (and (> (* (x294 x417 3) 3) (- x417 3)) (<= (* 3 (x294 x417 3)) x417)))))
(assert (= x378 (and x195 x278)))
(assert (x295 x96))
(assert (and (x418 400 x355) (= (* 400 x355) (x297 400 x355)) (x304 400 x355) (x367 400 x355) (x11 400 x355) (and (= (x297 400 (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x355) (- (* x355 400) (* x355 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x355 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 400 x355)))
(assert (x295 x430))
(assert (x57 x214))
(assert (x364 x250))
(assert (x364 x401))
(assert (x295 x79))
(assert (x364 x107))
(assert (x364 x160))
(assert (= x130 (and x232 x108)))
(assert (x364 x10))
(assert (x364 x179))
(assert (x364 x235))
(assert (x364 x233))
(assert (x295 x395))
(assert (x364 x290))
(assert (x364 x25))
(assert (= (and (not x267) x161) x363))
(assert (= (x257 1245370514) (x317 1245370514)))
(assert (= x35 (and x249 x156)))
(assert (x364 x419))
(assert (x364 x425))
(assert (x295 x348))
(assert (x364 x124))
(assert (and (x418 3 x430) (= (* 3 x430) (x297 3 x430)) (x304 3 x430) (x367 3 x430) (x11 3 x430) (and (= (x297 3 (- x430 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x430 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x430) (- (* x430 3) (* x430 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x430 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x430 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x430 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 3 x430)))
(assert (x364 x327))
(assert (= x236 (=> (and (and (= false x409) (= x290 x38) (= x408 x349) (= x49 500) x408) (and (= (x294 x38 500) x53) (= x286 x53) (= x69 x183))) x56)))
(assert (and (x418 10 x138) (= (* 10 x138) (x297 10 x138)) (x304 10 x138) (x367 10 x138) (x11 10 x138) (and (= (x297 10 (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x138) (- (* x138 10) (* x138 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x138 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 10 x138)))
(assert (= x213 (and (not x156) x249)))
(assert (and (x418 2 x145) (= (* 2 x145) (x297 2 x145)) (x304 2 x145) (x367 2 x145) (x11 2 x145) (and (= (x297 2 (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x145) (- (* x145 2) (* x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 2 x145)))
(assert (x364 x311))
(assert (x364 x138))
(assert (= x386 (and x26 x407)))
(assert (x295 x338))
(assert (x295 x219))
(assert (and (x418 400 x9) (= (* 400 x9) (x297 400 x9)) (x304 400 x9) (x367 400 x9) (x11 400 x9) (and (= (x297 400 (- x9 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x9 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x9) (- (* x9 400) (* x9 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x9 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x9 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x9 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 400 x9)))
(assert (x57 x216))
(assert (x364 x98))
(assert (x364 x352))
(assert (and (x243 x94 500) (x61 x94 500) (x335 x94 500) (x285 x94 500) (=> (and (< 0 x94) (< 0 500)) (and (> (* (x294 x94 500) 500) (- x94 500)) (<= (* 500 (x294 x94 500)) x94)))))
(assert (x364 x375))
(assert (= (=> (and (and (= false x426) (= 3 x23) x247 (= x216 x290) (= x278 x247)) (and (= x183 x69) (= (x294 x216 3) x107) (= x107 x286))) x56) x165))
(assert (= (x257 2685885107) (x317 2685885107)))
(assert (x364 x261))
(assert (x364 x102))
(assert (= x65 (or x172 x130 x35 x372 x347 x392 x191 x62 x213 x20 x185 x143 x176 x80 x386 x264 x333 x346 x234 x16 x378 x280 x350 x384)))
(assert (x364 x230))
(assert (= (x257 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x317 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x364 x68))
(assert (x364 x122))
(assert (= (and x238 x309) x346))
(assert (x364 x330))
(assert (x295 x52))
(assert (and (x418 3 x163) (= (* 3 x163) (x297 3 x163)) (x304 3 x163) (x367 3 x163) (x11 3 x163) (and (= (x297 3 (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x163) (- (* x163 3) (* x163 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x163 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 3 x163)))
(assert (x364 x389))
(assert (x364 x206))
(assert (and (x243 x199 10) (x61 x199 10) (x335 x199 10) (x285 x199 10) (=> (and (< 0 x199) (< 0 10)) (and (> (* (x294 x199 10) 10) (- x199 10)) (<= (* 10 (x294 x199 10)) x199)))))
(assert (x364 x205))
(assert (and (= 81 (x297 9 9)) (= 9 (x297 3 3)) (= (x297 27 3) 81) (= 27 (x297 9 3))))
(assert (x364 x201))
(assert (x364 x318))
(assert (x364 x200))
(assert (x57 x85))
(assert (x364 x3))
(assert (= x4 (x423 (x317 x4))))
(assert (x364 x38))
(assert (and (x335 x116 2) (=> (and (< 0 x116) (< 0 2)) (and (> (* (x294 x116 2) 2) (- x116 2)) (<= (* 2 (x294 x116 2)) x116))) (= (- x116 (x133 1 x116)) (* 2 (x294 x116 2))) (x61 x116 2) (x243 x116 2) (x285 x116 2)))
(assert (x364 x70))
(assert (= x16 (and x161 x267)))
(assert (x57 x38))
(assert (x364 x256))
(assert (= x280 (and x349 x126)))
(assert (x364 x348))
(assert (= x347 (and x383 x393)))
(assert (x364 x299))
(assert (and (x418 10 x41) (= (* 10 x41) (x297 10 x41)) (x304 10 x41) (x367 10 x41) (x11 10 x41) (and (= (x297 10 (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x41) (- (* x41 10) (* x41 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x41 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 10 x41)))
(assert (x364 x167))
(assert (x295 x162))
(assert (x364 x118))
(assert (x364 x414))
(assert (= x350 (and x89 x427)))
(assert (x364 x111))
(assert (= (and x242 (not x218)) x393))
(assert (x295 x230))
(assert (= (x423 (x257 2685885107)) 2685885107))
(assert (x364 x296))
(assert (x364 x15))
(assert (x57 500))
(assert (x364 x430))
(assert (x364 x101))
(assert (= x392 (and x363 x376)))
(assert (x308 x214 x360))
(assert (x364 x163))
(assert (x364 x260))
(assert (= x380 (=> (and (and (= x183 x69) (= x275 (x294 x94 500)) (= x286 x275)) (and (= x94 x379) x412 (= x412 x60) (= false x168) (= x178 500))) x56)))
(assert (x364 x224))
(assert (x364 x212))
(assert (= (and x363 (not x376)) x341))
(assert (x364 x43))
(assert (x364 x360))
(assert (= x242 (and x83 (not x314))))
(assert (= (and x87 x153) x80))
(assert (x364 x287))
(assert (x364 x385))
(assert (= (x257 1461501637330902918203684832716283019655932542975) (x317 1461501637330902918203684832716283019655932542975)))
(assert (x57 x417))
(assert (= (=> (and (and (= x34 x286) (= x69 x183) (= x34 (x294 x85 2))) (and (= x179 2) (= x290 x85) (= x84 false) (= x218 x340) x340)) x56) x215))
(assert (x364 x253))
(assert (x364 x286))
(assert (x364 x275))
(assert (x364 x272))
(assert (and (x243 x38 500) (x61 x38 500) (x335 x38 500) (x285 x38 500) (=> (and (< 0 x38) (< 0 500)) (and (> (* (x294 x38 500) 500) (- x38 500)) (<= (* 500 (x294 x38 500)) x38)))))
(assert (x364 x277))
(assert (= (and (not x362) x141) x83))
(assert (= 1245370514 (x423 (x257 1245370514))))
(assert (=> (<= x4 10000) (= (x257 x4) (x317 x4))))
(assert (x364 x263))
(assert (x364 x53))
(assert (x364 x115))
(assert (x364 x300))
(assert (x295 x316))
(assert (x364 x157))
(assert (x364 x405))
(assert (x364 x34))
(assert (= (and (not x403) x424) x407))
(assert (x364 x413))
(assert (x364 x23))
(assert (= (and x148 x136) x384))
(assert (x364 x355))
(assert (x364 x90))
(assert (x364 x116))
(assert (and (x418 500 x394) (= (* 500 x394) (x297 500 x394)) (x304 500 x394) (x367 500 x394) (x11 500 x394) (and (= (x297 500 (- x394 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x394 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x394) (- (* x394 500) (* x394 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x394 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x394 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x394 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 500 x394)))
(assert (and (x243 x244 400) (x61 x244 400) (x335 x244 400) (x285 x244 400) (=> (and (< 0 x244) (< 0 400)) (and (> (* (x294 x244 400) 400) (- x244 400)) (<= (* 400 (x294 x244 400)) x244)))))
(assert (and (x418 400 x230) (= (* 400 x230) (x297 400 x230)) (x304 400 x230) (x367 400 x230) (x11 400 x230) (and (= (x297 400 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) x230) (- (* x230 400) (* x230 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936) 400) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639536) (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 400 x230)))
(assert (= x366 (=> (and (and (= x26 x147) x147 (= x266 10) (= x379 x199) (= x268 false)) (and (= x154 (x294 x199 10)) (= x154 x286) (= x183 x69))) x56)))
(assert (x364 x177))
(assert (x364 x77))
(assert (x364 x97))
(assert (x364 x64))
(assert (x364 x4))
(assert (and (x418 10 x111) (= (* 10 x111) (x297 10 x111)) (x304 10 x111) (x367 10 x111) (x11 10 x111) (and (= (x297 10 (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) x111) (- (* x111 10) (* x111 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936) 10) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639926) (- x111 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 10 x111)))
(assert (x364 x209))
(assert (x295 500))
(assert (x364 x49))
(assert (and (x418 2 x374) (= (* 2 x374) (x297 2 x374)) (x304 2 x374) (x367 2 x374) (x11 2 x374) (and (= (x297 2 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x374) (- (* x374 2) (* x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 2 x374)))
(assert (x364 x63))
(assert (x57 x203))
(assert (not x135))
(assert (x57 x199))
(assert (x364 x46))
(assert (and (x418 500 x51) (= (* 500 x51) (x297 500 x51)) (x304 500 x51) (x367 500 x51) (x11 500 x51) (and (= (x297 500 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x51) (- (* x51 500) (* x51 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 500 x51)))
(assert (x364 x345))
(assert (x364 x282))
(assert (x57 x2))
(assert (= x210 (=> (and (and (= 10 x59) (= x267 x357) (= false x175) (= x2 x290) x357) (and (= x311 (x294 x2 10)) (= x311 x286) (= x183 x69))) x56)))
(assert (= true x108))
(assert (x364 x9))
(assert (x364 x189))
(assert (x364 x94))
(assert (x364 x131))
(assert (x57 x94))
(assert (= (and (not x289) x125) x153))
(assert (x364 x145))
(assert (and (x418 2 x401) (= (* 2 x401) (x297 2 x401)) (x304 2 x401) (x367 2 x401) (x11 2 x401) (and (= (x297 2 (- x401 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x401 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x401) (- (* x401 2) (* x401 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x401 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x401 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x401 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 2 x401)))
(assert (x364 x219))
(assert (x57 10))
(assert (x364 x379))
(assert (x295 x46))
(assert (x364 x228))
(assert (x295 x78))
(assert (x364 x171))
(assert (x364 x2))
(assert (x364 x207))
(assert (= (and x195 (not x278)) x144))
(assert (and (x243 x2 10) (x61 x2 10) (x335 x2 10) (x285 x2 10) (=> (and (< 0 x2) (< 0 10)) (and (> (* (x294 x2 10) 10) (- x2 10)) (<= (* 10 (x294 x2 10)) x2)))))
(assert (= x202 (=> (and (and x404 (= x156 x404) (= x254 400) (= false x284) (= x290 x244)) (and (= x286 x385) (= (x294 x244 400) x385) (= x69 x183))) x56)))
(assert (x364 x291))
(assert (= x234 (and x8 x119)))
(assert (and (x418 3 x52) (= (* 3 x52) (x297 3 x52)) (x304 3 x52) (x367 3 x52) (x11 3 x52) (and (= (x297 3 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x52) (- (* x52 3) (* x52 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936) 3) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x52 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 3 x52)))
(assert (x364 x104))
(assert (x364 x365))
(assert (and (x418 500 x338) (= (* 500 x338) (x297 500 x338)) (x304 500 x338) (x367 500 x338) (x11 500 x338) (and (= (x297 500 (- x338 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x338 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500)) (= (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) x338) (- (* x338 500) (* x338 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x338 115792089237316195423570985008687907853269984665640564039457584007913129639936) 500) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x338 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639436) (- x338 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x164 500 x338)))
(assert (x364 x52))
(assert (x364 x17))
(assert (x364 x320))
(check-sat)
(exit)
