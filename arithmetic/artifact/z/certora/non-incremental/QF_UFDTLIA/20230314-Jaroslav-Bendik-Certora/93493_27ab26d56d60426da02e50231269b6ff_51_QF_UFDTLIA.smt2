(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x855 0)) (((x103 (x736 x855) (x652 x855) (x400 x855) (x692 x855) (x531 x855) (x554 x855) (x101 Int)) (x372 (x248 x855) (x486 x855) (x555 x855) (x472 x855) (x572 x855) (x169 x855) (x752 x855) (x204 Int)) (x794 (x778 x855) (x716 Int)) (x654 (x54 x855) (x431 x855) (x188 x855) (x599 x855) (x438 Int)) (x815 (x734 Int)) (x456 (x102 x855) (x345 x855) (x511 x855) (x461 x855) (x853 x855) (x75 Int)) (x549 (x58 x855) (x321 x855) (x830 x855) (x380 Int)) (x46 (x665 x855) (x474 x855) (x195 Int)))))
(declare-fun x530 () Int)
(declare-fun x789 () Int)
(declare-fun x290 () Bool)
(declare-fun x721 () Bool)
(declare-fun x845 () Bool)
(declare-fun x183 () Bool)
(declare-fun x211 () Bool)
(declare-fun x265 () Bool)
(declare-fun x68 () Bool)
(declare-fun x831 () Bool)
(declare-fun x620 () Bool)
(declare-fun x48 () Int)
(declare-fun x597 () Int)
(declare-fun x660 () Int)
(declare-fun x197 () Bool)
(declare-fun x777 () Int)
(declare-fun x139 () Bool)
(declare-fun x203 () Bool)
(declare-fun x805 () Bool)
(declare-fun x516 () Int)
(declare-fun x466 () Int)
(declare-fun x577 () Bool)
(declare-fun x724 () Bool)
(declare-fun x429 () Int)
(declare-fun x556 () Bool)
(declare-fun x274 () Int)
(declare-fun x799 () Int)
(declare-fun x561 () Int)
(declare-fun x426 () Int)
(declare-fun x768 () Bool)
(declare-fun x767 () Bool)
(declare-fun x608 (Int) Int)
(declare-fun x144 () Bool)
(declare-fun x861 (Int Int) Int)
(declare-fun x548 () Bool)
(declare-fun x559 () Int)
(declare-fun x588 () Int)
(declare-fun x823 () Bool)
(declare-fun x228 () Int)
(declare-fun x750 () Int)
(declare-fun x409 () Bool)
(declare-fun x785 () Int)
(declare-fun x354 () Bool)
(declare-fun x638 () Bool)
(declare-fun x553 () Bool)
(declare-fun x331 () Int)
(declare-fun x657 () Int)
(declare-fun x782 () Bool)
(declare-fun x419 () Bool)
(declare-fun x74 () Bool)
(declare-fun x344 (Int) Int)
(declare-fun x854 () Int)
(declare-fun x818 () Bool)
(declare-fun x150 (Int Int) Int)
(declare-fun x694 () Int)
(declare-fun x269 () Int)
(declare-fun x848 () Int)
(declare-fun x202 () Int)
(declare-fun x199 () Bool)
(declare-fun x297 () Bool)
(declare-fun x499 () Bool)
(declare-fun x873 () Int)
(declare-fun x44 () Bool)
(declare-fun x544 () Bool)
(declare-fun x806 () Bool)
(declare-fun x357 () Bool)
(declare-fun x751 () Int)
(declare-fun x7 () Int)
(declare-fun x166 () Int)
(declare-fun x570 () Bool)
(declare-fun x50 () Int)
(declare-fun x755 () Int)
(declare-fun x280 () Bool)
(declare-fun x680 () Int)
(declare-fun x711 () Int)
(declare-fun x358 () Int)
(declare-fun x509 () Bool)
(declare-fun x110 () Int)
(declare-fun x303 () Int)
(declare-fun x52 () Int)
(declare-fun x522 () Bool)
(declare-fun x283 () Int)
(declare-fun x140 () Bool)
(declare-fun x88 () Int)
(declare-fun x634 () Int)
(declare-fun x95 () Bool)
(declare-fun x529 () Int)
(declare-fun x333 () Int)
(declare-fun x87 () Bool)
(declare-fun x219 () Bool)
(declare-fun x526 () Int)
(declare-fun x296 () x855)
(declare-fun x447 () Bool)
(declare-fun x117 () Bool)
(declare-fun x196 () Int)
(declare-fun x510 () Bool)
(declare-fun x45 (x855) Int)
(declare-fun x847 () Int)
(declare-fun x411 () Bool)
(declare-fun x319 () Int)
(declare-fun x745 () Int)
(declare-fun x268 () Int)
(declare-fun x866 (Int Int) Int)
(declare-fun x668 () Bool)
(declare-fun x107 () Bool)
(declare-fun x726 () Int)
(declare-fun x739 () Int)
(declare-fun x552 () Int)
(declare-fun x695 () Int)
(declare-fun x495 () Bool)
(declare-fun x253 () Int)
(declare-fun x884 (Int) Int)
(declare-fun x399 () Int)
(declare-fun x133 () Bool)
(declare-fun x90 () Bool)
(declare-fun x271 () Int)
(declare-fun x299 () Int)
(declare-fun x277 () Int)
(declare-fun x519 () Int)
(declare-fun x595 () Int)
(declare-fun x209 () Int)
(declare-fun x260 () Int)
(declare-fun x666 (Int) Int)
(declare-fun x832 () Int)
(declare-fun x624 () Int)
(declare-fun x664 () Int)
(declare-fun x616 () Int)
(declare-fun x672 () Int)
(declare-fun x77 () Bool)
(declare-fun x477 () Bool)
(declare-fun x655 () Int)
(declare-fun x392 () Int)
(declare-fun x626 () Int)
(declare-fun x10 () Int)
(declare-fun x301 () Int)
(declare-fun x154 () Bool)
(declare-fun x267 () Bool)
(declare-fun x359 () Int)
(declare-fun x300 () Int)
(declare-fun x629 () Int)
(declare-fun x820 () Bool)
(declare-fun x635 () Bool)
(declare-fun x804 () Int)
(declare-fun x177 () Bool)
(declare-fun x591 () Bool)
(declare-fun x121 () Int)
(declare-fun x239 (Int) Int)
(declare-fun x55 () Int)
(declare-fun x56 () Bool)
(declare-fun x127 () Bool)
(declare-fun x821 () Bool)
(declare-fun x613 () Int)
(declare-fun x490 () Bool)
(declare-fun x781 () Bool)
(declare-fun x749 () Bool)
(declare-fun x67 () Int)
(declare-fun x653 () Int)
(declare-fun x452 () Int)
(declare-fun x685 () Int)
(declare-fun x307 () Int)
(declare-fun x539 () Bool)
(declare-fun x338 () Int)
(declare-fun x450 () Int)
(declare-fun x741 () Bool)
(declare-fun x155 () Bool)
(declare-fun x776 () Int)
(declare-fun x547 () Int)
(declare-fun x585 () Int)
(declare-fun x368 () Int)
(declare-fun x488 () Int)
(declare-fun x857 () Int)
(declare-fun x483 () Int)
(declare-fun x366 () Bool)
(declare-fun x100 () Int)
(declare-fun x153 () Int)
(declare-fun x536 () Bool)
(declare-fun x343 () Bool)
(declare-fun x73 () Int)
(declare-fun x181 () Bool)
(declare-fun x856 () Int)
(declare-fun x468 () Bool)
(declare-fun x498 () Int)
(declare-fun x455 () Int)
(declare-fun x276 () Bool)
(declare-fun x645 () Int)
(declare-fun x217 () Int)
(declare-fun x82 () Int)
(declare-fun x667 () Int)
(declare-fun x578 () Int)
(declare-fun x700 () Int)
(declare-fun x302 () Int)
(declare-fun x42 () Int)
(declare-fun x387 () Bool)
(declare-fun x436 () Int)
(declare-fun x125 () Bool)
(declare-fun x816 () Bool)
(declare-fun x375 () Int)
(declare-fun x604 () Int)
(declare-fun x230 () Bool)
(declare-fun x160 () Int)
(declare-fun x350 () Int)
(declare-fun x809 () Bool)
(declare-fun x363 () Bool)
(declare-fun x836 () Int)
(declare-fun x659 () Int)
(declare-fun x356 () Int)
(declare-fun x229 () Int)
(declare-fun x763 () Int)
(declare-fun x825 () Int)
(declare-fun x246 () Bool)
(declare-fun x538 () Int)
(declare-fun x738 () Bool)
(declare-fun x619 () Bool)
(declare-fun x263 () Int)
(declare-fun x398 () Int)
(declare-fun x128 () Int)
(declare-fun x742 () Bool)
(declare-fun x401 () Bool)
(declare-fun x147 () Int)
(declare-fun x223 () Bool)
(declare-fun x737 () Int)
(declare-fun x257 () Bool)
(declare-fun x862 () Bool)
(declare-fun x878 () Int)
(declare-fun x684 () Bool)
(declare-fun x221 () Int)
(declare-fun x370 () Bool)
(declare-fun x146 () Int)
(declare-fun x582 (Int Int) Int)
(declare-fun x723 () Bool)
(declare-fun x47 () Bool)
(declare-fun x11 () Int)
(declare-fun x123 () Int)
(declare-fun x557 () Bool)
(declare-fun x306 () Bool)
(declare-fun x129 () Int)
(declare-fun x71 () Int)
(declare-fun x233 () Int)
(declare-fun x520 () Bool)
(declare-fun x542 () Bool)
(declare-fun x37 () Int)
(declare-fun x841 () Bool)
(declare-fun x773 () Bool)
(declare-fun x817 () Int)
(declare-fun x541 () Int)
(declare-fun x115 () Int)
(declare-fun x308 () Bool)
(declare-fun x316 () Bool)
(declare-fun x382 () Int)
(declare-fun x740 () Int)
(declare-fun x312 () Int)
(declare-fun x527 () Int)
(declare-fun x200 () Int)
(declare-fun x512 () Int)
(declare-fun x65 () Int)
(declare-fun x546 () Int)
(declare-fun x294 () Int)
(declare-fun x278 () x855)
(declare-fun x335 () Bool)
(declare-fun x586 () Int)
(declare-fun x471 () Int)
(declare-fun x697 () Int)
(declare-fun x492 () Bool)
(declare-fun x43 () Int)
(declare-fun x226 () Int)
(declare-fun x244 () Bool)
(declare-fun x272 () Bool)
(declare-fun x747 () Int)
(declare-fun x647 () Bool)
(declare-fun x173 () Int)
(declare-fun x404 () Int)
(declare-fun x266 () Bool)
(declare-fun x305 () Bool)
(declare-fun x637 () Bool)
(declare-fun x1 () Int)
(declare-fun x563 () Int)
(declare-fun x594 () Bool)
(declare-fun x728 () Bool)
(declare-fun x247 () Int)
(declare-fun x57 () Int)
(declare-fun x27 () Int)
(declare-fun x761 () Bool)
(declare-fun x30 () Int)
(declare-fun x783 () Bool)
(declare-fun x798 () Int)
(declare-fun x427 () Int)
(declare-fun x332 () Int)
(declare-fun x76 () Int)
(declare-fun x683 () Int)
(declare-fun x255 () Bool)
(declare-fun x407 () Int)
(declare-fun x134 () Bool)
(declare-fun x596 () Int)
(declare-fun x346 () Int)
(declare-fun x21 () Int)
(declare-fun x593 () Bool)
(declare-fun x864 () Bool)
(declare-fun x442 () Bool)
(declare-fun x484 () Int)
(declare-fun x792 () Bool)
(declare-fun x336 () Bool)
(declare-fun x469 () Int)
(declare-fun x615 () Int)
(declare-fun x622 () Int)
(declare-fun x579 () Bool)
(declare-fun x16 () Bool)
(declare-fun x351 () Int)
(declare-fun x35 () Int)
(declare-fun x465 () x855)
(declare-fun x681 () Int)
(declare-fun x515 () Int)
(declare-fun x573 () Bool)
(declare-fun x14 () Int)
(declare-fun x9 () Int)
(declare-fun x569 () Int)
(declare-fun x311 () Bool)
(declare-fun x165 () Int)
(declare-fun x251 () Int)
(declare-fun x675 () Int)
(declare-fun x482 () Int)
(declare-fun x62 () Int)
(declare-fun x859 () Int)
(declare-fun x812 () Bool)
(declare-fun x479 () Bool)
(declare-fun x116 () Bool)
(declare-fun x514 () Bool)
(declare-fun x97 () Bool)
(declare-fun x124 () Bool)
(declare-fun x722 () Int)
(declare-fun x883 () Int)
(declare-fun x576 () Bool)
(declare-fun x517 () Int)
(declare-fun x562 () Int)
(declare-fun x837 () Bool)
(declare-fun x769 () Int)
(declare-fun x309 () Bool)
(declare-fun x72 () Bool)
(declare-fun x5 () Int)
(declare-fun x222 () Int)
(declare-fun x201 () Bool)
(declare-fun x852 () Int)
(declare-fun x732 () Bool)
(declare-fun x437 () Bool)
(declare-fun x753 () Bool)
(declare-fun x287 () Bool)
(declare-fun x480 () Bool)
(declare-fun x136 () Int)
(declare-fun x171 () Int)
(declare-fun x388 () Bool)
(declare-fun x325 () Int)
(declare-fun x145 () Int)
(declare-fun x568 () Int)
(declare-fun x746 () Bool)
(declare-fun x643 () Int)
(declare-fun x707 () Bool)
(declare-fun x99 () Int)
(declare-fun x602 () Bool)
(declare-fun x505 () Int)
(declare-fun x164 () Bool)
(declare-fun x405 () Int)
(declare-fun x779 () Int)
(declare-fun x348 () Int)
(declare-fun x560 () Bool)
(declare-fun x29 () Int)
(declare-fun x291 () Int)
(declare-fun x31 () Bool)
(declare-fun x39 () Int)
(declare-fun x611 () Int)
(declare-fun x208 () Bool)
(declare-fun x353 () Int)
(declare-fun x630 () Int)
(declare-fun x439 () Int)
(declare-fun x184 () Bool)
(declare-fun x389 () Bool)
(declare-fun x758 () Int)
(declare-fun x252 () Int)
(declare-fun x393 () x855)
(declare-fun x231 () Int)
(declare-fun x418 () Bool)
(declare-fun x880 () Bool)
(declare-fun x376 () Int)
(declare-fun x64 () Int)
(declare-fun x179 () Int)
(declare-fun x787 () Int)
(declare-fun x175 () Bool)
(declare-fun x424 () Int)
(declare-fun x882 () Int)
(declare-fun x149 () Int)
(declare-fun x185 () Int)
(declare-fun x651 () Bool)
(declare-fun x860 () Bool)
(declare-fun x876 () Bool)
(declare-fun x249 () Int)
(declare-fun x250 () Bool)
(declare-fun x198 () Bool)
(declare-fun x397 () Bool)
(declare-fun x3 () Bool)
(declare-fun x298 () Int)
(declare-fun x281 () Bool)
(declare-fun x352 () Int)
(declare-fun x234 () Int)
(declare-fun x705 (Int) x855)
(declare-fun x13 () Bool)
(declare-fun x186 () Bool)
(declare-fun x232 () Int)
(declare-fun x587 () Int)
(declare-fun x192 () Int)
(declare-fun x289 () Bool)
(declare-fun x795 () Bool)
(declare-fun x114 (Int Int) Int)
(declare-fun x632 () Int)
(declare-fun x206 () Bool)
(declare-fun x497 () Bool)
(declare-fun x687 () Int)
(declare-fun x764 () Bool)
(declare-fun x838 () Bool)
(declare-fun x583 () Int)
(declare-fun x340 () Int)
(declare-fun x218 () Bool)
(declare-fun x487 () Int)
(declare-fun x699 () Int)
(declare-fun x415 () Bool)
(declare-fun x322 () Bool)
(declare-fun x682 () Bool)
(declare-fun x704 () Int)
(declare-fun x390 () Int)
(declare-fun x191 () Bool)
(declare-fun x361 () Int)
(declare-fun x464 () Int)
(declare-fun x839 () Int)
(declare-fun x473 () Bool)
(declare-fun x869 () Bool)
(declare-fun x731 () Bool)
(declare-fun x535 () Int)
(declare-fun x205 () Int)
(declare-fun x774 () Int)
(declare-fun x256 () Int)
(declare-fun x842 () Bool)
(declare-fun x788 () Int)
(declare-fun x225 () Int)
(declare-fun x36 () Int)
(declare-fun x701 (Int) Int)
(declare-fun x379 () Int)
(declare-fun x334 () Bool)
(declare-fun x507 () Int)
(declare-fun x503 () Bool)
(declare-fun x858 () Int)
(declare-fun x313 () Bool)
(declare-fun x485 () Int)
(declare-fun x157 () Int)
(declare-fun x69 () Int)
(declare-fun x775 (Int Int) Int)
(declare-fun x80 () Bool)
(declare-fun x241 () Int)
(declare-fun x329 () Bool)
(declare-fun x94 () Int)
(declare-fun x96 () Int)
(declare-fun x320 () Int)
(declare-fun x430 () Int)
(declare-fun x416 () Int)
(declare-fun x610 () Int)
(declare-fun x686 () Int)
(declare-fun x93 () Bool)
(declare-fun x17 () Bool)
(declare-fun x754 () Int)
(declare-fun x627 () Int)
(declare-fun x656 () Bool)
(declare-fun x649 () Int)
(declare-fun x478 () Int)
(declare-fun x625 () Bool)
(declare-fun x237 () Bool)
(declare-fun x330 () Bool)
(declare-fun x18 (Int) Int)
(declare-fun x693 () Bool)
(declare-fun x49 () Bool)
(declare-fun x41 () Bool)
(declare-fun x833 () Int)
(declare-fun x729 () Int)
(declare-fun x715 () Bool)
(declare-fun x119 () Int)
(declare-fun x162 () Bool)
(declare-fun x104 () Bool)
(declare-fun x207 () Bool)
(declare-fun x765 () Int)
(declare-fun x513 () Int)
(declare-fun x713 () Int)
(declare-fun x182 () Bool)
(declare-fun x691 () x855)
(declare-fun x874 () Int)
(declare-fun x314 () Bool)
(declare-fun x402 (Int) Int)
(declare-fun x677 () Int)
(declare-fun x323 () Bool)
(declare-fun x872 () Int)
(declare-fun x176 () Bool)
(declare-fun x735 () Bool)
(declare-fun x533 () Int)
(declare-fun x384 () Int)
(declare-fun x532 () Bool)
(declare-fun x403 () Int)
(declare-fun x802 () Bool)
(declare-fun x819 () Bool)
(declare-fun x467 () Int)
(declare-fun x766 () Int)
(declare-fun x725 () Int)
(declare-fun x633 () Int)
(declare-fun x143 () Int)
(declare-fun x79 () Bool)
(declare-fun x803 () Bool)
(declare-fun x565 () Int)
(declare-fun x235 () Bool)
(declare-fun x70 () Int)
(declare-fun x849 () Bool)
(declare-fun x122 () Bool)
(declare-fun x213 () Int)
(declare-fun x108 () Bool)
(declare-fun x835 () Int)
(declare-fun x279 () Bool)
(declare-fun x443 () Bool)
(declare-fun x564 () Int)
(declare-fun x706 () Int)
(declare-fun x592 () Bool)
(declare-fun x83 () Int)
(declare-fun x420 () Int)
(declare-fun x797 () x855)
(declare-fun x614 () Int)
(declare-fun x158 () Int)
(declare-fun x690 () Bool)
(declare-fun x236 () Bool)
(declare-fun x453 () Bool)
(declare-fun x537 () Bool)
(declare-fun x254 () Int)
(declare-fun x220 () Int)
(declare-fun x428 () Bool)
(declare-fun x362 () Int)
(declare-fun x631 () Bool)
(declare-fun x850 () Int)
(declare-fun x800 () Bool)
(declare-fun x784 () Int)
(declare-fun x703 () Int)
(declare-fun x545 () Int)
(declare-fun x822 (x855) Int)
(declare-fun x142 () Bool)
(declare-fun x159 () Bool)
(declare-fun x867 (x855) Int)
(declare-fun x574 () Bool)
(declare-fun x285 () Int)
(declare-fun x598 () Bool)
(declare-fun x275 () Bool)
(declare-fun x642 () Int)
(declare-fun x328 () Bool)
(declare-fun x712 () Int)
(declare-fun x2 (Int Int) Int)
(declare-fun x879 () Int)
(declare-fun x807 () Bool)
(declare-fun x264 () Int)
(declare-fun x540 () Int)
(declare-fun x584 () Bool)
(declare-fun x628 () Bool)
(declare-fun x111 () Int)
(declare-fun x51 () Bool)
(declare-fun x20 () Bool)
(declare-fun x63 () Bool)
(declare-fun x92 () Bool)
(declare-fun x501 () Int)
(declare-fun x318 () Int)
(declare-fun x112 () Bool)
(declare-fun x369 () Bool)
(declare-fun x174 () Bool)
(declare-fun x575 () Bool)
(declare-fun x130 () Int)
(declare-fun x315 () Bool)
(declare-fun x875 () Bool)
(declare-fun x523 () Bool)
(declare-fun x106 () Int)
(declare-fun x828 () Bool)
(declare-fun x748 () Int)
(declare-fun x870 () Bool)
(declare-fun x212 () Bool)
(declare-fun x292 () Int)
(declare-fun x410 () Bool)
(declare-fun x730 () Int)
(declare-fun x341 () Bool)
(declare-fun x4 () Int)
(declare-fun x508 () Bool)
(declare-fun x131 () Bool)
(declare-fun x337 () Int)
(declare-fun x216 () Bool)
(declare-fun x190 () Int)
(declare-fun x98 () Int)
(declare-fun x590 () Int)
(declare-fun x733 () Int)
(declare-fun x673 () Int)
(declare-fun x772 () Bool)
(declare-fun x506 () Bool)
(declare-fun x238 () Int)
(declare-fun x15 () Int)
(declare-fun x167 () Int)
(declare-fun x863 () Bool)
(declare-fun x38 () Int)
(declare-fun x135 (Int) Int)
(declare-fun x78 () Int)
(declare-fun x518 () Int)
(declare-fun x349 () Int)
(declare-fun x567 () Bool)
(declare-fun x885 () Int)
(declare-fun x113 () Int)
(declare-fun x757 () Int)
(declare-fun x606 () Int)
(declare-fun x385 () Bool)
(declare-fun x813 () Bool)
(declare-fun x172 () Bool)
(declare-fun x282 () Bool)
(declare-fun x612 () Int)
(declare-fun x445 () Int)
(declare-fun x86 () Int)
(declare-fun x22 () Int)
(declare-fun x581 () Int)
(declare-fun x840 () Int)
(declare-fun x126 () Bool)
(declare-fun x489 () Bool)
(declare-fun x137 () Int)
(declare-fun x413 () Int)
(declare-fun x168 () Int)
(declare-fun x550 () Int)
(declare-fun x360 () Int)
(declare-fun x28 () Bool)
(declare-fun x462 () Bool)
(declare-fun x771 () Int)
(declare-fun x293 () Bool)
(declare-fun x355 (x855) Int)
(declare-fun x422 () Bool)
(declare-fun x261 () Int)
(declare-fun x603 () Bool)
(declare-fun x662 () Int)
(declare-fun x770 () Int)
(declare-fun x132 () Int)
(declare-fun x327 () Bool)
(declare-fun x421 () Bool)
(declare-fun x463 () Int)
(declare-fun x671 () Int)
(declare-fun x714 () Bool)
(declare-fun x317 () Int)
(declare-fun x440 () Int)
(declare-fun x451 () Int)
(declare-fun x151 () Bool)
(declare-fun x689 () Int)
(declare-fun x617 () Int)
(declare-fun x796 () Bool)
(declare-fun x118 () Bool)
(declare-fun x227 () Bool)
(declare-fun x432 () Bool)
(declare-fun x470 () Bool)
(declare-fun x8 () Int)
(declare-fun x425 () Int)
(declare-fun x391 () Int)
(declare-fun x286 () Bool)
(declare-fun x84 () Int)
(declare-fun x448 () Int)
(declare-fun x66 () Int)
(declare-fun x365 () Int)
(declare-fun x156 () Int)
(declare-fun x676 () Int)
(declare-fun x258 () Int)
(define-fun x661 ((x855 x855) (x607 Int)) x855 (ite ((_ is x372) x855) (x372 (x248 x855) (x486 x855) (x555 x855) (x472 x855) (x572 x855) (x169 x855) (x752 x855) (+ x607 (x204 x855))) (ite ((_ is x103) x855) (x103 (x736 x855) (x652 x855) (x400 x855) (x692 x855) (x531 x855) (x554 x855) (+ (x101 x855) x607)) (ite ((_ is x456) x855) (x456 (x102 x855) (x345 x855) (x511 x855) (x461 x855) (x853 x855) (+ (x75 x855) x607)) (ite ((_ is x654) x855) (x654 (x54 x855) (x431 x855) (x188 x855) (x599 x855) (+ (x438 x855) x607)) (ite ((_ is x549) x855) (x549 (x58 x855) (x321 x855) (x830 x855) (+ x607 (x380 x855))) (ite ((_ is x46) x855) (x46 (x665 x855) (x474 x855) (+ (x195 x855) x607)) (ite ((_ is x794) x855) (x794 (x778 x855) (+ x607 (x716 x855))) (x815 (+ x607 (x734 x855)))))))))))
(define-fun x826 ((x688 Int)) Int (ite (and (< x688 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x688 0)) x688 (- x688 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x580 ((x688 Int)) Int (ite (and (>= x688 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x688)) (+ x688 115792089237316195423570985008687907853269984665640564039457584007913129639936) x688))
(define-fun x210 ((x688 Int)) Int (ite (and (>= x688 0) (< x688 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x688 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x688) (< x688 231584178474632390847141970017375815706539969331281128078915168015826259279872)) (- x688 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x688) (>= x688 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x688 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x582 x688 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x194 ((x91 Int)) Bool (and (>= x91 0) (< x91 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x170 ((x91 Int)) Bool (and (= x91 (x861 x91 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x91 (x861 115792089237316195423570985008687907853269984665640564039457584007913129639935 x91))))
(define-fun x459 ((x91 Int)) Bool (and (= (x861 0 x91) 0) (= (x861 x91 0) 0)))
(define-fun x53 ((x91 Int)) Bool (= (x861 x91 x91) x91))
(define-fun x60 ((x91 Int)) Bool (and (x459 x91) (x170 x91) (x53 x91)))
(define-fun x528 ((x91 Int) (x605 Int)) Bool (= (x861 x91 x605) (x861 x605 x91)))
(define-fun x877 ((x91 Int) (x605 Int)) Bool (and (=> (>= x605 0) (>= x605 (x861 x91 x605))) (<= 0 (x861 x91 x605)) (=> (>= x91 0) (>= x91 (x861 x91 x605)))))
(define-fun x152 ((x91 Int) (x605 Int)) Bool (and (x528 x91 x605) (x877 x91 x605)))
(define-fun x551 ((x91 Int)) Bool (= (x861 x91 1461501637330902918203684832716283019655932542975) (x582 x91 1461501637330902918203684832716283019655932542976)))
(define-fun x669 ((x91 Int)) Bool (and (x152 x91 1461501637330902918203684832716283019655932542975) (x551 x91)))
(define-fun x304 ((x91 Int) (x605 Int)) Bool (and (< (x582 x91 x605) x605) (>= (x582 x91 x605) 0)))
(define-fun x476 ((x91 Int) (x605 Int)) Bool (=> (and (<= 0 x91) (> x605 0)) (= (= x91 (x582 x91 x605)) (> x605 x91))))
(define-fun x414 ((x91 Int) (x605 Int)) Bool (=> (and (and (< x91 (+ x605 x605)) (>= x91 x605)) (> x605 0)) (= (- x91 x605) (x582 x91 x605))))
(define-fun x481 ((x91 Int)) Bool (= 0 (x582 0 x91)))
(define-fun x846 ((x91 Int)) Bool (= 0 (x582 x91 1)))
(define-fun x81 ((x91 Int)) Bool (= 0 (x582 x91 x91)))
(define-fun x824 ((x91 Int)) Bool (and (x81 x91) (x481 x91) (x846 x91)))
(define-fun x827 ((x91 Int)) Bool (= (x582 x91 256) (x861 x91 255)))
(define-fun x650 ((x91 Int)) Bool (and (x152 x91 255) (x827 x91)))
(define-fun x417 ((x91 Int)) Bool (= (x861 x91 4294967295) (x582 x91 4294967296)))
(define-fun x762 ((x91 Int)) Bool (and (x417 x91) (x152 x91 4294967295)))
(define-fun x674 ((x91 Int)) Bool (= (x861 x91 79228162514264337593543950335) (x582 x91 79228162514264337593543950336)))
(define-fun x243 ((x91 Int)) Bool (and (x674 x91) (x152 x91 79228162514264337593543950335)))
(define-fun x525 ((x91 Int) (x605 Int)) Bool (=> (and (< 0 x91) (< 0 x605)) (and (<= (x866 x91 x605) x91) (>= (x866 x91 x605) 0))))
(define-fun x524 ((x91 Int) (x605 Int)) Bool (=> (and (and (>= x605 1) (< x605 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (<= 0 x91) (< x91 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x866 x91 x605) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x866 x91 x605) 0))))
(define-fun x367 ((x91 Int) (x605 Int)) Bool (=> (and (< x605 x91) (< 1 x605)) (< (x866 x91 x605) x91)))
(define-fun x609 ((x91 Int) (x605 Int)) Bool (=> (and (> x91 0) (> x605 0)) (= (= 0 (x866 x91 x605)) (< x91 x605))))
(define-fun x26 ((x91 Int)) Bool (= 0 (x866 0 x91)))
(define-fun x40 ((x91 Int)) Bool (= x91 (x866 x91 1)))
(define-fun x648 ((x91 Int)) Bool (=> (not (= x91 0)) (= (x866 x91 x91) 1)))
(define-fun x708 ((x91 Int)) Bool (and (x648 x91) (x40 x91) (x26 x91)))
(define-fun x394 ((x91 Int) (x605 Int)) Bool (=> (and (< 0 x605) (< 0 x91)) (= (= x605 (x866 (x210 (x775 x91 x605)) x91)) (< (x775 x91 x605) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x851 ((x91 Int) (x605 Int)) Bool (=> (and (not (= x605 0)) (not (= 0 x91))) (and (= (x866 (x775 x91 x605) x91) x605) (= x91 (x866 (x775 x91 x605) x605)))))
(define-fun x644 ((x91 Int) (x605 Int)) Bool (=> (and (> x91 0) (> x605 0)) (= (< (x866 115792089237316195423570985008687907853269984665640564039457584007913129639935 x91) x605) (> (x775 x91 x605) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x434 ((x91 Int) (x605 Int)) Bool (and (= (x210 (x775 x91 x605)) (x210 (x775 (- x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) x605))) (= (x210 (x775 x91 (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x210 (x775 x91 x605))) (= (x210 (x775 (- x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x210 (x775 x91 x605)))))
(define-fun x270 ((x91 Int) (x605 Int)) Bool (and (=> (and (and (<= x605 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x605 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x91) (> x91 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x91) (x866 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x605))) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x775 (- x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x605) (< 0 x605)) (and (> x91 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x91))) (= (>= (x866 57896044618658097711785492504343953926634992332820282019728792003956564819967 x605) x91) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x775 x91 x605)))) (=> (and (and (< 0 x91) (<= x91 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x605) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x605))) (= (>= (x866 57896044618658097711785492504343953926634992332820282019728792003956564819968 x91) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x605)) (>= (x775 x91 (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (<= x605 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x605)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x91) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x91))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x775 (- x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) x605)) (>= (x866 57896044618658097711785492504343953926634992332820282019728792003956564819968 x605) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x91))))))
(define-fun x566 ((x91 Int)) Bool (and (= (x775 x91 0) 0) (= (x775 0 x91) 0)))
(define-fun x760 ((x91 Int)) Bool (and (= x91 (x775 x91 1)) (= x91 (x775 1 x91))))
(define-fun x868 ((x91 Int)) Bool (and (x566 x91) (x760 x91)))
(define-fun x502 ((x91 Int)) Bool (= (x210 x91) (+ (x582 x91 32) (x861 x91 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x245 ((x91 Int)) Bool (and (x152 x91 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x502 x91)))
(define-fun x719 ((x91 Int)) Bool (= (x861 x91 281474976710655) (x582 x91 281474976710656)))
(define-fun x32 ((x91 Int)) Bool (and (x152 x91 281474976710655) (x719 x91)))
(define-fun x759 ((x91 Int) (x605 Int)) Bool (=> (and (> x91 0) (< 0 x605)) (and (> (x775 (x866 x91 x605) x605) (- x91 x605)) (<= (x775 (x866 x91 x605) x605) x91))))
(define-fun x373 ((x91 Int) (x605 Int)) Bool (and (x609 x91 x605) (x367 x91 x605) (x759 x91 x605) (x524 x91 x605) (x525 x91 x605)))
(define-fun x339 ((x91 Int) (x605 Int)) Bool (= (x775 x91 x605) (x775 x605 x91)))
(define-fun x433 ((x91 Int) (x605 Int)) Bool (and (=> (and (< 0 x605) (< x91 0)) (> 0 (x775 x91 x605))) (=> (and (> x91 0) (> x605 0)) (< 0 (x775 x91 x605))) (=> (and (> 0 x605) (> 0 x91)) (> (x775 x91 x605) 0)) (=> (and (< 0 x91) (> 0 x605)) (> 0 (x775 x91 x605)))))
(define-fun x493 ((x91 Int) (x605 Int)) Bool (and (x644 x91 x605) (x434 x91 x605) (x433 x91 x605) (x270 x91 x605) (x851 x91 x605) (x339 x91 x605) (x394 x91 x605)))
(define-fun x843 ((x180 Int)) Int (x884 x180))
(define-fun x324 ((x180 Int)) Int (ite (and (< x180 (+ x10 x27)) (<= x27 x180)) (x884 (+ x254 (- x180 x27))) (x402 x180)))
(define-fun x120 ((x180 Int)) Int (ite (= x180 x833) 0 (x324 x180)))
(define-fun x500 ((x180 Int)) Int (ite (= x27 x180) 0 (x120 x180)))
(define-fun x710 ((x180 Int)) Int (ite (= x874 x180) 0 (x500 x180)))
(define-fun x381 ((x180 Int)) Int (ite (= x27 x180) x225 (x710 x180)))
(define-fun x521 ((x180 Int)) Int (ite (= x180 x874) x483 (x381 x180)))
(define-fun x621 ((x180 Int)) Int (ite (= x233 x180) 84260195902586255382601658512858328503538471556003836500752771342367880904704 (x521 x180)))
(define-fun x374 ((x180 Int)) Int (ite (= x38 x180) x43 (x621 x180)))
(define-fun x423 ((x180 Int)) Int (ite (= x180 x478) x147 (x374 x180)))
(define-fun x491 ((x180 Int)) Int (ite (= x180 x413) x533 (x423 x180)))
(define-fun x623 ((x180 Int)) Int (ite (= x113 x180) x228 (x491 x180)))
(define-fun x743 ((x180 Int)) Int (ite (= x180 x55) x771 (x623 x180)))
(define-fun x589 ((x180 Int)) Int (ite (= x180 x73) x1 (x743 x180)))
(define-fun x273 ((x180 Int)) Int (ite (= x180 x145) x238 (x589 x180)))
(define-fun x6 ((x180 Int)) Int (ite (= x180 x222) x850 (x273 x180)))
(define-fun x435 ((x180 Int)) Int (ite (= x180 x660) x712 (x6 x180)))
(define-fun x395 ((x180 Int)) Int (ite (= x632 x180) x484 (x435 x180)))
(define-fun x475 ((x180 Int)) Int (ite (= x180 x416) x407 (x395 x180)))
(define-fun x24 ((x180 Int)) Int (ite (and (>= x180 x233) (< x180 (+ x233 32))) (x666 (+ (- x180 x233) 0)) (x475 x180)))
(define-fun x408 ((x180 Int)) Int (ite x139 (x24 x180) (x475 x180)))
(define-fun x698 ((x180 Int)) Int (ite (= x180 x307) x657 (x408 x180)))
(define-fun x460 ((x180 Int)) Int (ite (and (< x180 (+ x361 x298)) (>= x180 x361)) (x884 (+ (- x180 x361) x119)) (x698 x180)))
(define-fun x347 ((x180 Int)) Int (ite (= x180 x711) 0 (x460 x180)))
(define-fun x386 ((x180 Int)) Int (ite (= x885 x180) x529 (x347 x180)))
(define-fun x646 ((x180 Int)) Int (ite (= x180 x662) x111 (x386 x180)))
(define-fun x670 ((x180 Int)) Int (ite (= x253 x180) x839 (x646 x180)))
(define-fun x19 ((x180 Int)) Int (ite (= x180 x825) x697 (x670 x180)))
(define-fun x639 ((x180 Int)) Int (ite (= x455 x180) x505 (x19 x180)))
(define-fun x834 ((x180 Int)) Int (ite x174 (x19 x180) (ite x297 (x670 x180) (ite x728 (x646 x180) (ite x107 (x386 x180) (x639 x180))))))
(define-fun x790 ((x180 Int)) Int (ite (= x180 x540) x157 (x834 x180)))
(define-fun x178 ((x180 Int)) Int (ite (= x180 x160) x226 (x790 x180)))
(define-fun x780 ((x180 Int)) Int (ite (= x390 x180) x883 (x178 x180)))
(define-fun x141 ((x180 Int)) Int (ite (= x740 x180) 19211759364411014404085342898986916011845161991165440702586961613165858652160 (x780 x180)))
(define-fun x811 ((x180 Int)) Int (ite (= x180 x832) 32 (x141 x180)))
(define-fun x193 ((x180 Int)) Int (ite (= x4 x180) x10 (x811 x180)))
(define-fun x189 ((x180 Int)) Int (ite (and (>= x180 x173) (> (+ x10 x173) x180)) (x884 (+ (- x180 x173) x254)) (x193 x180)))
(define-fun x262 ((x180 Int)) Int (ite (= x180 x680) 0 (x189 x180)))
(define-fun x786 ((x180 Int)) Int (ite (and (< x180 (+ 160 x740)) (>= x180 x740)) (x344 (+ 0 (- x180 x740))) (x262 x180)))
(define-fun x441 ((x180 Int)) Int (ite x341 (x786 x180) (x262 x180)))
(define-fun x34 ((x180 Int)) Int (ite (= x180 x368) x617 (x441 x180)))
(define-fun x458 ((x180 Int)) Int (ite (= x180 x626) x232 (x34 x180)))
(define-fun x406 ((x180 Int)) Int (ite (= x180 x292) x368 (x458 x180)))
(define-fun x720 ((x180 Int)) Int (ite (= x180 x217) x358 (x406 x180)))
(define-fun x105 ((x180 Int)) Int (ite (= x180 x758) x789 (x720 x180)))
(define-fun x881 ((x180 Int)) Int (ite (= x180 x699) x100 (x105 x180)))
(define-fun x449 ((x180 Int)) Int (ite (= x180 x804) 6449634268930127669875982587348191347588899670384742761526659814853911248896 (x881 x180)))
(define-fun x696 ((x180 Int)) Int (ite (= x585 x180) x686 (x449 x180)))
(define-fun x326 ((x180 Int)) Int (ite (and (<= x804 x180) (> (+ x804 32) x180)) (x18 (+ 0 (- x180 x804))) (x696 x180)))
(define-fun x215 ((x180 Int)) Int (ite x731 (x326 x180) (x696 x180)))
(define-fun x829 ((x180 Int)) Int (ite (= x180 x770) x426 (x215 x180)))
(define-fun x85 ((x180 Int)) Int (ite (= x561 x180) x798 (x829 x180)))
(define-fun x214 ((x180 Int)) Int (ite (= x180 x50) x847 (x85 x180)))
(define-fun x543 ((x180 Int)) Int (ite (= x376 x180) x751 (x214 x180)))
(define-fun x12 ((x180 Int)) Int (ite (= x675 x180) x565 (x543 x180)))
(define-fun x446 ((x180 Int)) Int (ite (= x317 x180) x200 (x12 x180)))
(define-fun x801 ((x180 Int)) Int (ite (= x430 x180) (x355 x797) (x446 x180)))
(define-fun x534 ((x180 Int)) Int (ite (= x667 x180) x76 (x801 x180)))
(define-fun x109 ((x180 Int)) Int (ite (= x180 x659) (x355 x797) (x12 x180)))
(define-fun x148 ((x180 Int)) Int (ite (= x180 x676) x200 (x109 x180)))
(define-fun x454 ((x180 Int)) Int (ite (= x180 x667) x348 (x148 x180)))
(define-fun x342 ((x180 Int)) Int (ite x31 (x534 x180) (x454 x180)))
(define-fun x383 ((x180 Int)) Int (ite x514 (x12 x180) (x342 x180)))
(define-fun x618 ((x180 Int)) Int (ite (= x180 x84) 11559732032986387107991004021392285783925812861821192530917403151452391805634 (x383 x180)))
(define-fun x396 ((x180 Int)) Int (ite (= x180 x541) 10857046999023057135944570762232829481370756359578518086990519993285655852781 (x618 x180)))
(define-fun x377 ((x180 Int)) Int (ite (= x180 x420) x84 (x396 x180)))
(define-fun x727 ((x180 Int)) Int (ite (= x42 x180) 17805874995975841540914202342111839520379459829704422454583296818431106115052 (x377 x180)))
(define-fun x310 ((x180 Int)) Int (ite (= x799 x180) 13392588948715843804641432497768002650278120570034223513918757245338268106653 (x727 x180)))
(define-fun x496 ((x180 Int)) Int (ite (= x180 x213) x42 (x310 x180)))
(define-fun x844 ((x180 Int)) Int (ite (= x180 x360) x252 (x496 x180)))
(define-fun x814 ((x180 Int)) Int (ite (= x787 x180) x27 (x844 x180)))
(define-fun x364 ((x180 Int)) Int (ite (= x180 x404) 128 (x814 x180)))
(define-fun x865 ((x180 Int)) Int (ite (= x180 x596) x420 (x364 x180)))
(define-fun x702 ((x180 Int)) Int (ite (and (< x180 (+ x450 384)) (<= x450 x180)) (x884 (+ (- x180 x450) x312)) (x865 x180)))
(define-fun x717 ((x180 Int)) Int (ite (= x22 x180) x629 (x702 x180)))
(define-fun x756 ((x180 Int)) Int (ite (= x180 x196) x763 (x717 x180)))
(define-fun x284 ((x180 Int)) Int (ite (= x633 x180) x590 (x756 x180)))
(define-fun x59 ((x180 Int)) Int (ite (= x655 x180) x616 (x284 x180)))
(define-fun x793 ((x180 Int)) Int (ite (= x180 x277) x683 (x59 x180)))
(define-fun x138 ((x180 Int)) Int (ite (= x588 x180) x563 (x793 x180)))
(define-fun x288 ((x180 Int)) Int (ite (= x180 x733) x515 (x138 x180)))
(define-fun x636 ((x180 Int)) Int (ite (= x180 x440) x840 (x288 x180)))
(define-fun x709 ((x180 Int)) Int (ite (= x180 x757) x362 (x636 x180)))
(define-fun x295 ((x180 Int)) Int (ite (= x706 x180) x283 (x709 x180)))
(define-fun x23 ((x180 Int)) Int (ite (= x180 x7) x302 (x295 x180)))
(define-fun x25 ((x180 Int)) Int (ite (= x14 x180) x545 (x23 x180)))
(define-fun x571 ((x180 Int)) Int (ite (and (> (+ 32 x564) x180) (<= x564 x180)) (x884 (+ (- x180 x564) x312)) (x25 x180)))
(define-fun x504 ((x180 Int)) Int (ite (and (< x180 (+ x564 32)) (<= x564 x180)) (x135 (+ 0 (- x180 x564))) (x571 x180)))
(define-fun x259 ((x180 Int)) Int (ite (= 192 x180) x115 (x701 x180)))
(define-fun x444 ((x180 Int)) Int (ite (= 256 x180) x130 (x608 x180)))
(define-fun x663 ((x180 Int)) Int (ite x819 (x504 x180) (x571 x180)))
(define-fun x187 ((x180 Int)) Int (ite (= x586 x180) x65 (x663 x180)))
(define-fun x744 ((x180 Int)) Int (ite (= x180 x356) x611 (x187 x180)))
(define-fun x378 ((x180 Int)) Int (ite (= x653 x180) x229 (x744 x180)))
(define-fun x810 ((x180 Int)) Int (ite (= x606 x180) x399 (x378 x180)))
(define-fun x871 ((x180 Int)) Int (ite (= x180 x424) x583 (x810 x180)))
(define-fun x33 ((x180 Int)) Int (ite (= x86 x180) x530 (x871 x180)))
(define-fun x371 ((x180 Int)) Int (ite (= x67 x180) x319 (x33 x180)))
(define-fun x558 ((x180 Int)) Int (ite (= x180 x269) x209 (x371 x180)))
(define-fun x89 ((x180 Int)) Int (ite (= x180 x96) x391 (x558 x180)))
(define-fun x641 ((x180 Int)) Int (ite (= x98 x180) x29 (x89 x180)))
(define-fun x791 ((x180 Int)) Int (ite (= x180 x750) x673 (x641 x180)))
(define-fun x240 ((x180 Int)) Int (ite (= x517 x180) x471 (x791 x180)))
(define-fun x601 ((x180 Int)) Int (ite (= x180 x604) x614 (x240 x180)))
(define-fun x163 ((x180 Int)) Int (ite (= x180 x52) 1 (x601 x180)))
(define-fun x640 ((x180 x855)) Int (ite (= x296 x180) x301 (x867 x180)))
(define-fun x679 ((x91 Int) (x605 Int) (x161 Int) (x808 Int)) Bool (=> (and (>= x161 x91) (<= 0 x605) (<= 0 x91) (<= x605 x808)) (>= (x775 x161 x808) (x775 x91 x605))))
(define-fun x61 ((x91 Int) (x605 Int) (x161 Int) (x808 Int)) Bool (=> (= x161 x91) (= (x775 x91 (- x605 x808)) (- (x775 x91 x605) (x775 x161 x808)))))
(define-fun x678 ((x91 Int)) Bool (=> (and (not (= x91 79228162514264337593543950335)) (< 10000 x91) (not (= 1461501637330902918203684832716283019655932542975 x91)) (not (= 11559732032986387107991004021392285783925812861821192530917403151452391805634 x91)) (not (= 500000 x91)) (not (= x91 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 6449634268930127669875982587348191347588899670384742761526659814853911248896 x91)) (not (= 18446744073709551615 x91)) (not (= x91 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 1461501637330902918203684832716283019655932542976 x91)) (not (= 15734828340100255228388097270354557497891140761267446712098462632690385532271 x91)) (not (= x91 281474976710655)) (not (= 403919343 x91)) (not (= x91 84260195902586255382601658512858328503538471556003836500752771342367880904704)) (not (= x91 13392588948715843804641432497768002650278120570034223513918757245338268106653)) (not (= x91 10857046999023057135944570762232829481370756359578518086990519993285655852781)) (not (= 4294967295 x91)) (not (= x91 4294967296)) (not (= x91 17805874995975841540914202342111839520379459829704422454583296818431106115052)) (not (= 268435456 x91)) (not (= x91 2262799685)) (not (= 19211759364411014404085342898986916011845161991165440702586961613165858652160 x91))) (not ((_ is x815) (x705 x91)))))
(assert (x194 x307))
(assert (x194 x546))
(assert (= x235 (and x628 x490)))
(assert (x824 x399))
(assert (= (and x863 x327) x490))
(assert (= 18446744073709551615 (x355 (x815 18446744073709551615))))
(assert (=> (<= (x12 (x826 (+ x745 160))) 10000) (= (x815 (x12 (x826 (+ 160 x745)))) (x705 (x12 (x826 (+ x745 160)))))))
(assert (= (x240 (x826 (+ x128 96))) (x355 (x705 (x240 (x826 (+ x128 96)))))))
(assert (x194 x121))
(assert (= 84260195902586255382601658512858328503538471556003836500752771342367880904704 (x355 (x815 84260195902586255382601658512858328503538471556003836500752771342367880904704))))
(assert (x194 x73))
(assert (= (=> (and (= x505 (x19 x234)) (= (x826 (+ x234 32)) x501) (= (not (< 4 x258)) x172) (= (x826 (+ x455 32)) x725)) (and (=> (and (= x501 x261) (= x726 4) (= x725 x540)) x647) x172)) x625))
(assert (= (and x272 x567) x336))
(assert (x194 x629))
(assert (x194 x686))
(assert (x194 x672))
(assert (x194 x440))
(assert (= (x355 (x705 (x780 (x826 (+ x168 160))))) (x780 (x826 (+ x168 160)))))
(assert (x678 (x534 (x826 (+ x769 96)))))
(assert (x194 x847))
(assert (= (and x462 x223) x539))
(assert (x194 x84))
(assert (x824 2))
(assert (= x715 (=> (or (not x230) x230) x510)))
(assert (x194 x192))
(assert (= (x355 (x705 (x534 (x826 (+ x769 96))))) (x534 (x826 (+ 96 x769)))))
(assert (and (=> (> 256 0) (= (+ (x582 x391 256) (* (x866 x391 256) 256)) x391)) (x414 x391 256) (x304 x391 256) (x476 x391 256)))
(assert (= x828 (and x44 x74)))
(assert (= 268435456 (x355 (x815 268435456))))
(assert (= x768 (and x330 x207)))
(assert (x194 x277))
(assert (= x838 (and x250 x183)))
(assert (x194 x758))
(assert (x194 x258))
(assert (x194 x9))
(assert (= (and x401 x308) x682))
(assert (= x387 (and (not x800) x79)))
(assert (= (and x330 (not x207)) x816))
(assert (=> (<= x64 10000) (= (x705 x64) (x815 x64))))
(assert (x194 x581))
(assert (x678 x467))
(assert (x824 x352))
(assert (= (and (not x117) x768) x656))
(assert (x194 x145))
(assert (x194 x213))
(assert (x194 x69))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x582 x5 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x866 x5 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x5)) (x414 x5 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x304 x5 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x476 x5 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x194 x66))
(assert (x194 x352))
(assert (x824 79228162514264337593543950336))
(assert (x194 x507))
(assert (= x201 (and x212 x216)))
(assert (= (and (not x308) x401) x306))
(assert (x824 x241))
(assert (x762 x771))
(assert (x824 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x479 false))
(assert (x194 x755))
(assert (= x638 (and x281 x289)))
(assert (x194 x484))
(assert (= x369 (and x806 (not x265))))
(assert (x762 x516))
(assert (x194 x424))
(assert (x194 x173))
(assert (x194 x346))
(assert (= (and x255 (not x807)) x315))
(assert (x194 x671))
(assert (= x31 (and (not x311) x236)))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x673 4294967296) (* (x866 x673 4294967296) 4294967296)) x673)) (x414 x673 4294967296) (x304 x673 4294967296) (x476 x673 4294967296)))
(assert (x194 x361))
(assert (x194 x190))
(assert (=> (<= (x534 (x826 (+ x769 128))) 10000) (= (x705 (x534 (x826 (+ 128 x769)))) (x815 (x534 (x826 (+ x769 128)))))))
(assert (x194 x35))
(assert (x678 (x780 (x826 (+ x168 192)))))
(assert (=> (>= 10000 (x12 (x826 (+ x745 64)))) (= (x705 (x12 (x826 (+ x745 64)))) (x815 (x12 (x826 (+ 64 x745)))))))
(assert (x194 x4))
(assert (x194 x703))
(assert (x194 x488))
(assert (x60 x1))
(assert (x194 x785))
(assert (= (and x411 x556) x492))
(assert (x194 x733))
(assert (x373 115792089237316195423570985008687907853269984665640564039457584007913129639935 x512))
(assert (= (x815 4294967296) (x705 4294967296)))
(assert (x60 x673))
(assert (x678 (x240 (x826 (+ x128 96)))))
(assert (x824 4294967296))
(assert (= (x454 (x826 (+ 128 x518))) (x355 (x705 (x454 (x826 (+ x518 128)))))))
(assert (x194 x318))
(assert (= (and (not x63) x41) x127))
(assert (x194 x832))
(assert (x194 x202))
(assert (= x116 (and (not x764) x112)))
(assert (= (x355 (x705 (x534 (x826 (+ x769 64))))) (x534 (x826 (+ x769 64)))))
(assert (x868 x241))
(assert (x194 x825))
(assert (= x343 (and (not x537) x388)))
(assert (x194 x771))
(assert (and (=> (> 79228162514264337593543950336 0) (= (+ (x582 x712 79228162514264337593543950336) (* (x866 x712 79228162514264337593543950336) 79228162514264337593543950336)) x712)) (x414 x712 79228162514264337593543950336) (x304 x712 79228162514264337593543950336) (x476 x712 79228162514264337593543950336)))
(assert (x194 x231))
(assert (=> (>= 10000 (x780 (x826 (+ x168 32)))) (= (x705 (x780 (x826 (+ x168 32)))) (x815 (x780 (x826 (+ 32 x168)))))))
(assert (x194 x559))
(assert (x650 x391))
(assert (x194 x384))
(assert (= (and x201 x849) x773))
(assert (= x823 (and x838 x506)))
(assert (x194 x606))
(assert (x678 (x240 (x826 (+ 64 x128)))))
(assert (x194 x413))
(assert (x194 x110))
(assert (=> (>= 10000 x527) (= (x705 x527) (x815 x527))))
(assert (x194 x804))
(assert (=> (>= 10000 (x780 (x826 (+ x168 192)))) (= (x705 (x780 (x826 (+ 192 x168)))) (x815 (x780 (x826 (+ 192 x168)))))))
(assert (x194 x856))
(assert (= (x815 500000) (x705 500000)))
(assert (= x542 (and (not x124) x749)))
(assert (x669 x300))
(assert (x762 x673))
(assert (x194 x439))
(assert (x194 x331))
(assert (x194 x874))
(assert (x194 x839))
(assert (x194 x617))
(assert (x194 x583))
(assert (= x591 (and x553 x175)))
(assert (and (x644 32 x657) (= (x775 32 x657) (* x657 32)) (x270 32 x657) (x851 32 x657) (x434 32 x657) (x394 32 x657) (and (= (- (* x657 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x657)) (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x657)) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x657 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x657 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x657 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x775 32 (- x657 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x657 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)))))
(assert (x678 (x120 x27)))
(assert (= (x355 (x705 (x454 (x826 (+ x518 96))))) (x454 (x826 (+ 96 x518)))))
(assert (= x803 (and x631 x738)))
(assert (x194 x779))
(assert (= (x534 (x826 (+ x769 160))) (x355 (x705 (x534 (x826 (+ x769 160)))))))
(assert (x678 x527))
(assert (= x250 (and x503 x13)))
(assert (x678 x221))
(assert (= (x120 (x826 (+ x27 160))) (x355 (x705 (x120 (x826 (+ 160 x27)))))))
(assert (x194 x616))
(assert (=> (<= x664 10000) (= (x705 x664) (x815 x664))))
(assert (x194 x626))
(assert (x708 x507))
(assert (x194 x264))
(assert (= (x780 (x826 (+ 32 x168))) (x355 (x705 (x780 (x826 (+ 32 x168)))))))
(assert (x194 x725))
(assert (x243 x712))
(assert (x194 x763))
(assert (= (and x544 x767) x576))
(assert (x194 x320))
(assert (x678 15734828340100255228388097270354557497891140761267446712098462632690385532271))
(assert (= 4294967295 (x355 (x815 4294967295))))
(assert (x824 32))
(assert (x493 x512 x848))
(assert (= (or x31 x16) x276))
(assert (and (x524 x379 32) (= (* (x866 x379 32) 32) (- x379 (x861 31 x379))) (x609 x379 32) (x367 x379 32) (=> (and (> 32 0) (> x379 0)) (and (<= (* (x866 x379 32) 32) x379) (< (- x379 32) (* 32 (x866 x379 32))))) (x525 x379 32)))
(assert (x678 (x12 (x826 (+ x745 128)))))
(assert (=> (>= 10000 (x240 (x826 (+ x128 160)))) (= (x815 (x240 (x826 (+ 160 x128)))) (x705 (x240 (x826 (+ x128 160)))))))
(assert (x194 x143))
(assert (x194 x788))
(assert (x194 x233))
(assert (x194 x568))
(assert (= x677 (x355 (x705 x677))))
(assert (x60 x229))
(assert (x194 x285))
(assert (= (x705 (x355 x797)) x797))
(assert (= false x584))
(assert (= (or x341 x656) x598))
(assert (x194 x179))
(assert (x194 x518))
(assert (x678 (x454 x518)))
(assert (x60 281474976710655))
(assert (x194 x540))
(assert (x194 x274))
(assert (= (and x126 (not x870)) x842))
(assert (x678 (x240 (x826 (+ x128 192)))))
(assert (x194 x513))
(assert (= (x355 (x705 x488)) x488))
(assert (x194 x405))
(assert (x678 (x780 (x826 (+ 160 x168)))))
(assert (x194 x770))
(assert (= (and x690 x227) x282))
(assert (= (and (not x536) x802) x329))
(assert (= (x12 (x826 (+ 96 x745))) (x355 (x705 (x12 (x826 (+ 96 x745)))))))
(assert (= x340 (x355 (x705 x340))))
(assert (x194 x677))
(assert (x194 x64))
(assert (x824 x789))
(assert (= (x210 (* 26959946667150639794667015087019630673637144422540572481103610249216 x241)) (x2 x241 224)))
(assert (= (and x176 (not x389)) x410))
(assert (x194 x98))
(assert (x194 x196))
(assert (= x20 (and x419 x309)))
(assert (= (x355 (x705 (x12 (x826 (+ 32 x745))))) (x12 (x826 (+ x745 32)))))
(assert (= x182 (and x537 x388)))
(assert (x194 x399))
(assert (= (x815 18446744073709551615) (x705 18446744073709551615)))
(assert (x60 x484))
(assert (x60 x300))
(assert true)
(assert (= (x355 (x815 11559732032986387107991004021392285783925812861821192530917403151452391805634)) 11559732032986387107991004021392285783925812861821192530917403151452391805634))
(assert (x194 x209))
(assert (x194 x751))
(assert (and (=> (> 32 0) (= (+ (x582 x291 32) (* (x866 x291 32) 32)) x291)) (x414 x291 32) (x304 x291 32) (x476 x291 32)))
(assert (=> (<= (x534 (x826 (+ x769 32))) 10000) (= (x705 (x534 (x826 (+ 32 x769)))) (x815 (x534 (x826 (+ 32 x769)))))))
(assert (= x49 (=> (= true x230) x715)))
(assert (=> (>= 10000 (x120 (x826 (+ x27 192)))) (= (x815 (x120 (x826 (+ x27 192)))) (x705 (x120 (x826 (+ x27 192)))))))
(assert (= (and x818 (not x499)) x175))
(assert (x194 x22))
(assert (x678 (x780 (x826 (+ 32 x168)))))
(assert (x194 x350))
(assert (x194 x750))
(assert (= x749 (and (not x495) x237)))
(assert (=> (>= 10000 (x240 (x826 (+ x128 64)))) (= (x815 (x240 (x826 (+ 64 x128)))) (x705 (x240 (x826 (+ 64 x128)))))))
(assert (x194 x375))
(assert (x194 x217))
(assert (x194 x784))
(assert (x678 (x780 (x826 (+ 64 x168)))))
(assert (= (x705 2262799685) (x815 2262799685)))
(assert (and (x524 x507 32) (= (* (x866 x507 32) 32) (- x507 (x861 31 x507))) (x609 x507 32) (x367 x507 32) (=> (and (> 32 0) (> x507 0)) (and (<= (* (x866 x507 32) 32) x507) (< (- x507 32) (* 32 (x866 x507 32))))) (x525 x507 32)))
(assert (x669 x484))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x1 4294967296) (* (x866 x1 4294967296) 4294967296)) x1)) (x414 x1 4294967296) (x304 x1 4294967296) (x476 x1 4294967296)))
(assert (x60 x100))
(assert (x194 x220))
(assert (x60 79228162514264337593543950335))
(assert (= x869 (and x837 x598)))
(assert (x678 (x454 (x826 (+ 192 x518)))))
(assert (x194 x498))
(assert (x194 x379))
(assert (= (and x162 x77) x577))
(assert (x60 x789))
(assert (x824 (ite (< x562 256) (x114 2 x562) 0)))
(assert (x194 x852))
(assert (x194 x249))
(assert (= (and (not x603) x203) x107))
(assert (= (and x499 x818) x219))
(assert (x194 x166))
(assert (= x468 (=> (= (= x465 (x705 15734828340100255228388097270354557497891140761267446712098462632690385532271)) x536) (and (=> x536 x316) (=> (not x536) x49)))))
(assert (= x191 (and x570 x282)))
(assert (x194 x226))
(assert (x194 x76))
(assert (x194 x171))
(assert (x708 32))
(assert (x194 x529))
(assert (x194 x848))
(assert (x194 x562))
(assert (x678 (x780 x168)))
(assert (x194 x225))
(assert (and (=> (> 2 0) (= (+ (x582 x352 2) (* (x866 x352 2) 2)) x352)) (x414 x352 2) (x304 x352 2) (x476 x352 2)))
(assert (x194 x7))
(assert (x824 281474976710656))
(assert (and (= (x114 2 150) 1427247692705959881058285969449495136382746624) (= (x114 2 114) 20769187434139310514121985316880384) (= (x114 2 85) 38685626227668133590597632) (= 46768052394588893382517914646921056628989841375232 (x114 2 165)) (= 324518553658426726783156020576256 (x114 2 108)) (= (x114 2 71) 2361183241434822606848) (= 32 (x114 2 5)) (= (x114 2 11) 2048) (= 196159429230833773869868419475239575503198607639501078528 (x114 2 187)) (= (x114 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x114 2 157) 182687704666362864775460604089535377456991567872) (= (x114 2 37) 137438953472) (= (x114 2 122) 5316911983139663491615228241121378304) (= (x114 2 36) 68719476736) (= 2535301200456458802993406410752 (x114 2 101)) (= (x114 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x114 2 147) 178405961588244985132285746181186892047843328) (= 4294967296 (x114 2 32)) (= (x114 2 173) 11972621413014756705924586149611790497021399392059392) (= (x114 2 22) 4194304) (= 34359738368 (x114 2 35)) (= (x114 2 158) 365375409332725729550921208179070754913983135744) (= 85070591730234615865843651857942052864 (x114 2 126)) (= (x114 2 14) 16384) (= 10141204801825835211973625643008 (x114 2 103)) (= (x114 2 20) 1048576) (= (x114 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x114 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x114 2 159) 730750818665451459101842416358141509827966271488) (= (x114 2 61) 2305843009213693952) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x114 2 226)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x114 2 211)) (= 102844034832575377634685573909834406561420991602098741459288064 (x114 2 206)) (= (x114 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x114 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 4722366482869645213696 (x114 2 72)) (= (x114 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 18446744073709551616 (x114 2 64)) (= 70368744177664 (x114 2 46)) (= (x114 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x114 2 138) 348449143727040986586495598010130648530944) (= 356811923176489970264571492362373784095686656 (x114 2 148)) (= (x114 2 144) 22300745198530623141535718272648361505980416) (= 25108406941546723055343157692830665664409421777856138051584 (x114 2 194)) (= (x114 2 160) 1461501637330902918203684832716283019655932542976) (= 1 (x114 2 0)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x114 2 231)) (= 6129982163463555433433388108601236734474956488734408704 (x114 2 182)) (= (x114 2 185) 49039857307708443467467104868809893875799651909875269632) (= 5708990770823839524233143877797980545530986496 (x114 2 152)) (= (x114 2 69) 590295810358705651712) (= (x114 2 154) 22835963083295358096932575511191922182123945984) (= 45671926166590716193865151022383844364247891968 (x114 2 155)) (= (x114 2 140) 1393796574908163946345982392040522594123776) (= 98079714615416886934934209737619787751599303819750539264 (x114 2 186)) (= 2417851639229258349412352 (x114 2 81)) (= (x114 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 12554203470773361527671578846415332832204710888928069025792 (x114 2 193)) (= 187072209578355573530071658587684226515959365500928 (x114 2 167)) (= (x114 2 42) 4398046511104) (= 8388608 (x114 2 23)) (= 89202980794122492566142873090593446023921664 (x114 2 146)) (= (x114 2 164) 23384026197294446691258957323460528314494920687616) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x114 2 243)) (= 1298074214633706907132624082305024 (x114 2 110)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x114 2 250)) (= (x114 2 175) 47890485652059026823698344598447161988085597568237568) (= (x114 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= 1099511627776 (x114 2 40)) (= 401734511064747568885490523085290650630550748445698208825344 (x114 2 198)) (= (x114 2 163) 11692013098647223345629478661730264157247460343808) (= 536870912 (x114 2 29)) (= 512 (x114 2 9)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x114 2 210)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x114 2 213)) (= 9444732965739290427392 (x114 2 73)) (= (x114 2 125) 42535295865117307932921825928971026432) (= (x114 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 9903520314283042199192993792 (x114 2 93)) (= (x114 2 78) 302231454903657293676544) (= 411376139330301510538742295639337626245683966408394965837152256 (x114 2 208)) (= 1267650600228229401496703205376 (x114 2 100)) (= 2251799813685248 (x114 2 51)) (= (x114 2 54) 18014398509481984) (= (x114 2 172) 5986310706507378352962293074805895248510699696029696) (= (x114 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x114 2 251)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x114 2 221)) (= 16 (x114 2 4)) (= (x114 2 33) 8589934592) (= 4835703278458516698824704 (x114 2 82)) (= (x114 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x114 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x114 2 53) 9007199254740992) (= (x114 2 15) 32768) (= (x114 2 19) 524288) (= (x114 2 34) 17179869184) (= 21267647932558653966460912964485513216 (x114 2 124)) (= (x114 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x114 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 374144419156711147060143317175368453031918731001856 (x114 2 168)) (= 91343852333181432387730302044767688728495783936 (x114 2 156)) (= (x114 2 134) 21778071482940061661655974875633165533184) (= 37778931862957161709568 (x114 2 75)) (= (x114 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x114 2 137) 174224571863520493293247799005065324265472) (= 83076749736557242056487941267521536 (x114 2 116)) (= 5192296858534827628530496329220096 (x114 2 112)) (= 205688069665150755269371147819668813122841983204197482918576128 (x114 2 207)) (= (x114 2 132) 5444517870735015415413993718908291383296) (= (x114 2 121) 2658455991569831745807614120560689152) (= (x114 2 92) 4951760157141521099596496896) (= (x114 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x114 2 153) 11417981541647679048466287755595961091061972992) (= (x114 2 44) 17592186044416) (= (x114 2 86) 77371252455336267181195264) (= 6582018229284824168619876730229402019930943462534319453394436096 (x114 2 212)) (= 12259964326927110866866776217202473468949912977468817408 (x114 2 183)) (= 162259276829213363391578010288128 (x114 2 107)) (= 166153499473114484112975882535043072 (x114 2 117)) (= (x114 2 141) 2787593149816327892691964784081045188247552) (= (x114 2 24) 16777216) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x114 2 242)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x114 2 219)) (= (x114 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x114 2 123) 10633823966279326983230456482242756608) (= 748288838313422294120286634350736906063837462003712 (x114 2 169)) (= (x114 2 28) 268435456) (= (x114 2 18) 262144) (= 2722258935367507707706996859454145691648 (x114 2 131)) (= (x114 2 118) 332306998946228968225951765070086144) (= (x114 2 38) 274877906944) (= 3064991081731777716716694054300618367237478244367204352 (x114 2 181)) (= 8 (x114 2 3)) (= 95780971304118053647396689196894323976171195136475136 (x114 2 176)) (= 2199023255552 (x114 2 41)) (= 151115727451828646838272 (x114 2 77)) (= (x114 2 47) 140737488355328) (= 256 (x114 2 8)) (= (x114 2 135) 43556142965880123323311949751266331066368) (= 316912650057057350374175801344 (x114 2 98)) (= (x114 2 95) 39614081257132168796771975168) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x114 2 227)) (= 93536104789177786765035829293842113257979682750464 (x114 2 166)) (= 44601490397061246283071436545296723011960832 (x114 2 145)) (= 4096 (x114 2 12)) (= 19807040628566084398385987584 (x114 2 94)) (= (x114 2 171) 2993155353253689176481146537402947624255349848014848) (= (x114 2 80) 1208925819614629174706176) (= 131072 (x114 2 17)) (= (x114 2 56) 72057594037927936) (= 281474976710656 (x114 2 48)) (= (x114 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x114 2 25) 33554432) (= (x114 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x114 2 66) 73786976294838206464) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x114 2 240)) (= (x114 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x114 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 65536 (x114 2 16)) (= (x114 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 9223372036854775808 (x114 2 63)) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x114 2 238)) (= 23945242826029513411849172299223580994042798784118784 (x114 2 174)) (= 4 (x114 2 2)) (= (x114 2 130) 1361129467683753853853498429727072845824) (= 1532495540865888858358347027150309183618739122183602176 (x114 2 180)) (= (x114 2 184) 24519928653854221733733552434404946937899825954937634816) (= 4503599627370496 (x114 2 52)) (= 11150372599265311570767859136324180752990208 (x114 2 143)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x114 2 247)) (= (x114 2 99) 633825300114114700748351602688) (= (x114 2 10) 1024) (= (x114 2 102) 5070602400912917605986812821504) (= (x114 2 49) 562949953421312) (= (x114 2 58) 288230376151711744) (= 576460752303423488 (x114 2 59)) (= 128 (x114 2 7)) (= 51422017416287688817342786954917203280710495801049370729644032 (x114 2 205)) (= 392318858461667547739736838950479151006397215279002157056 (x114 2 188)) (= 36028797018963968 (x114 2 55)) (= (x114 2 21) 2097152) (= (x114 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 87112285931760246646623899502532662132736 (x114 2 136)) (= (x114 2 31) 2147483648) (= (x114 2 162) 5846006549323611672814739330865132078623730171904) (= (x114 2 83) 9671406556917033397649408) (= (x114 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= 383123885216472214589586756787577295904684780545900544 (x114 2 178)) (= (x114 2 50) 1125899906842624) (= 2 (x114 2 1)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x114 2 244)) (= 75557863725914323419136 (x114 2 76)) (= (x114 2 67) 147573952589676412928) (= 2854495385411919762116571938898990272765493248 (x114 2 151)) (= (x114 2 113) 10384593717069655257060992658440192) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x114 2 255)) (= (x114 2 119) 664613997892457936451903530140172288) (= (x114 2 104) 20282409603651670423947251286016) (= 12855504354071922204335696738729300820177623950262342682411008 (x114 2 203)) (= (x114 2 97) 158456325028528675187087900672) (= 649037107316853453566312041152512 (x114 2 109)) (= (x114 2 89) 618970019642690137449562112) (= 64 (x114 2 6)) (= (x114 2 84) 19342813113834066795298816) (= (x114 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x114 2 106) 81129638414606681695789005144064) (= 67108864 (x114 2 26)) (= (x114 2 74) 18889465931478580854784) (= 10889035741470030830827987437816582766592 (x114 2 133)) (= (x114 2 105) 40564819207303340847894502572032) (= (x114 2 30) 1073741824) (= (x114 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x114 2 96) 79228162514264337593543950336) (= (x114 2 70) 1180591620717411303424) (= 1152921504606846976 (x114 2 60)) (= 144115188075855872 (x114 2 57)) (= 784637716923335095479473677900958302012794430558004314112 (x114 2 189)) (= 309485009821345068724781056 (x114 2 88)) (= (x114 2 79) 604462909807314587353088) (= (x114 2 142) 5575186299632655785383929568162090376495104) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x114 2 220)) (= (x114 2 139) 696898287454081973172991196020261297061888) (= (x114 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 8796093022208 (x114 2 43)) (= 4611686018427387904 (x114 2 62)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x114 2 236)) (= (x114 2 91) 2475880078570760549798248448) (= (x114 2 127) 170141183460469231731687303715884105728) (= (x114 2 179) 766247770432944429179173513575154591809369561091801088) (= 35184372088832 (x114 2 45)) (= (x114 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x114 2 170) 1496577676626844588240573268701473812127674924007424) (= 803469022129495137770981046170581301261101496891396417650688 (x114 2 199)) (= (x114 2 115) 41538374868278621028243970633760768) (= (x114 2 149) 713623846352979940529142984724747568191373312) (= (x114 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x114 2 111) 2596148429267413814265248164610048) (= (x114 2 161) 2923003274661805836407369665432566039311865085952) (= (x114 2 65) 36893488147419103232) (= (x114 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x114 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x114 2 177) 191561942608236107294793378393788647952342390272950272) (= 134217728 (x114 2 27)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x114 2 214)) (= (x114 2 129) 680564733841876926926749214863536422912) (= 549755813888 (x114 2 39)) (= 295147905179352825856 (x114 2 68)) (= (x114 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x114 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 340282366920938463463374607431768211456 (x114 2 128)) (= (x114 2 120) 1329227995784915872903807060280344576) (= (x114 2 87) 154742504910672534362390528) (= 8192 (x114 2 13)) (= 6427752177035961102167848369364650410088811975131171341205504 (x114 2 202)) (= (x114 2 90) 1237940039285380274899124224)))
(assert (x678 x365))
(assert (= (x454 x518) (x355 (x705 (x454 x518)))))
(assert (x678 x677))
(assert (x194 x664))
(assert (= (and x230 x523) x314))
(assert (= (x705 84260195902586255382601658512858328503538471556003836500752771342367880904704) (x815 84260195902586255382601658512858328503538471556003836500752771342367880904704)))
(assert (= x87 (and (not x845) x387)))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x582 x484 1461501637330902918203684832716283019655932542976) (* (x866 x484 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x484)) (x414 x484 1461501637330902918203684832716283019655932542976) (x304 x484 1461501637330902918203684832716283019655932542976) (x476 x484 1461501637330902918203684832716283019655932542976)))
(assert (x824 x673))
(assert (x762 x229))
(assert (= (x705 1461501637330902918203684832716283019655932542976) (x815 1461501637330902918203684832716283019655932542976)))
(assert (=> (>= 10000 x677) (= (x705 x677) (x815 x677))))
(assert (x194 x86))
(assert (= (x355 (x705 x66)) x66))
(assert (x824 x300))
(assert (= (x355 (x705 (x240 x128))) (x240 x128)))
(assert (x824 x1))
(assert (x194 x82))
(assert (= (and x311 x236) x16))
(assert (= (x780 (x826 (+ 192 x168))) (x355 (x705 (x780 (x826 (+ x168 192)))))))
(assert (x194 x403))
(assert (x762 x533))
(assert (and (= 27 (x775 9 3)) (= (x775 27 3) 81) (= (x775 9 9) 81) (= 9 (x775 3 3))))
(assert (= x79 (and x591 (not x637))))
(assert (= (x815 1461501637330902918203684832716283019655932542975) (x705 1461501637330902918203684832716283019655932542975)))
(assert (x678 x64))
(assert (x762 x100))
(assert (x60 x43))
(assert (= (and x802 x536) x199))
(assert (x245 x5))
(assert (x194 x545))
(assert (x194 x776))
(assert (=> (>= 10000 (x454 (x826 (+ 96 x518)))) (= (x815 (x454 (x826 (+ x518 96)))) (x705 (x454 (x826 (+ 96 x518)))))))
(assert (=> (<= (x534 (x826 (+ x769 160))) 10000) (= (x705 (x534 (x826 (+ 160 x769)))) (x815 (x534 (x826 (+ x769 160)))))))
(assert (x194 x222))
(assert (= x279 (=> (and (= (= 0 x671) x723) (= (not (= x171 0)) x813) (= (x663 x564) x171) (= x671 (ite (= 0 x852) x852 (ite x813 1 0)))) (and (=> (and (and (= true x92) (= (x826 (+ 384 x517)) x604) (= (x884 196) x65)) x723) (and (=> (and (and (= (x826 (+ x517 32)) x586) (= (x861 4294967295 x611) x634) (= x611 (x884 228)) (= x293 (= x634 x611))) x92) (and (=> (and x293 (and (= (x884 260) x229) (= x356 (x826 (+ 32 x586))) (= (= x546 x229) x489) (= (x861 4294967295 x229) x546))) (and (=> (and (and (= x487 (x861 4294967295 x399)) (= x653 (x826 (+ 32 x356))) (= (x884 292) x399) (= x227 (= x487 x399))) x489) (and (=> (and (and (= x82 (x861 4294967295 x583)) (= (x884 324) x583) (= (= x82 x583) x570) (= x606 (x826 (+ 32 x653)))) x227) (and (=> (and (and (= (x826 (+ x606 32)) x424) (= x530 (x884 356)) (= x560 (= x69 x530)) (= (x861 79228162514264337593543950335 x530) x69)) x570) (and (=> (not x560) x49) (=> (and (and (= x319 (x884 388)) (= (x861 1461501637330902918203684832716283019655932542975 x319) x779) (= (= x319 x779) x619) (= x86 (x826 (+ x424 32)))) x560) (and (=> (and x619 (and (= x209 (x884 420)) (= (x826 (+ 32 x86)) x67) (= x544 true))) (and (=> (and x544 (and (= (x826 (+ 32 x67)) x269) (= x391 (x884 452)) (= x132 (x861 255 x391)) (= (= x132 x391) x557))) (and (=> (and x557 (and (= x96 (x826 (+ x269 32))) (= x29 (x884 484)) (= true x746))) (and (=> (and x746 (and (= (x884 516) x673) (= (x826 (+ x96 32)) x98) (= x581 (x861 4294967295 x673)) (= x289 (= x581 x673)))) (and (=> (not x289) x49) (=> x289 x322))) (=> (not x746) x49))) (=> (not x557) x49))) (=> (not x544) x49))) (=> (not x619) x49))))) (=> (not x570) x49))) (=> (not x227) x49))) (=> (not x489) x49))) (=> (not x293) x49))) (=> (not x92) x49))) (=> (not x723) x49)))))
(assert (x194 x99))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x399 4294967296) (* (x866 x399 4294967296) 4294967296)) x399)) (x414 x399 4294967296) (x304 x399 4294967296) (x476 x399 4294967296)))
(assert (x194 x27))
(assert (= x453 (and x41 x63)))
(assert (x762 x399))
(assert (x678 (x240 (x826 (+ 160 x128)))))
(assert (x762 x238))
(assert (= (and x805 (not x592)) x255))
(assert (= (and x104 (not x95)) x497))
(assert (x194 x774))
(assert (x194 x48))
(assert (x194 x205))
(assert (= x134 (and x723 x684)))
(assert (x194 x630))
(assert (x194 x263))
(assert (x194 x50))
(assert (= x442 (and x772 (not x741))))
(assert (x60 x611))
(assert (= (x355 (x705 (x240 (x826 (+ x128 192))))) (x240 (x826 (+ 192 x128)))))
(assert (= (and (not x573) x87) x772))
(assert (x194 x569))
(assert (x60 x5))
(assert (x194 x55))
(assert (x194 x595))
(assert (x194 x585))
(assert (= (and x280 x235) x90))
(assert (x194 x136))
(assert (x194 x317))
(assert (x824 x319))
(assert (x194 x613))
(assert (x194 x455))
(assert (x194 x261))
(assert (= x593 (and x842 (not x707))))
(assert (x194 x704))
(assert (= x664 (x355 (x705 x664))))
(assert (x194 x448))
(assert (x194 x368))
(assert (x194 x683))
(assert (x194 x149))
(assert (x194 x391))
(assert (x194 x111))
(assert (x194 x687))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x100 4294967296) (* (x866 x100 4294967296) 4294967296)) x100)) (x414 x100 4294967296) (x304 x100 4294967296) (x476 x100 4294967296)))
(assert (= (x780 (x826 (+ x168 96))) (x355 (x705 (x780 (x826 (+ 96 x168)))))))
(assert (x194 x158))
(assert (x762 x611))
(assert (x194 x471))
(assert (x194 x565))
(assert (= (x355 (x705 x129)) x129))
(assert (x194 x325))
(assert (= x176 (and x354 (not x133))))
(assert (=> (>= 10000 (x12 (x826 (+ x745 32)))) (= (x815 (x12 (x826 (+ x745 32)))) (x705 (x12 (x826 (+ 32 x745)))))))
(assert (= (and x208 x72) x731))
(assert (x824 x5))
(assert (= x41 (and x803 (not x783))))
(assert (x194 x515))
(assert (= x74 (or x731 x693)))
(assert (= (x240 (x826 (+ x128 160))) (x355 (x705 (x240 (x826 (+ x128 160)))))))
(assert (= (x355 (x705 (x12 (x826 (+ 160 x745))))) (x12 (x826 (+ x745 160)))))
(assert (= (x454 (x826 (+ 32 x518))) (x355 (x705 (x454 (x826 (+ x518 32)))))))
(assert (x194 x885))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x582 x71 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x866 x71 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x71)) (x414 x71 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x304 x71 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x476 x71 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x194 x467))
(assert (x32 x9))
(assert (x868 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (=> (>= 10000 (x12 (x826 (+ 96 x745)))) (= (x815 (x12 (x826 (+ 96 x745)))) (x705 (x12 (x826 (+ 96 x745)))))))
(assert (= (=> (= x223 (< x352 x165)) (and (=> (and x223 (and (= (> 32 x836) x477) (= x836 (x12 320)))) (and (=> (and (and (= x200 (x12 352)) (= x311 (= 0 (x582 x352 2)))) (not x477)) (and (=> x311 x635) (=> (not x311) x335))) (=> (and x477 (and (= x420 x667) (= x465 x797))) x468))) (=> (not x223) x49))) x862))
(assert (x194 x676))
(assert (x194 x757))
(assert (x194 x146))
(assert (x194 x798))
(assert (= (x240 (x826 (+ 128 x128))) (x355 (x705 (x240 (x826 (+ x128 128)))))))
(assert (=> (>= 10000 (x780 (x826 (+ x168 96)))) (= (x705 (x780 (x826 (+ x168 96)))) (x815 (x780 (x826 (+ 96 x168)))))))
(assert (x678 (x120 (x826 (+ 192 x27)))))
(assert (= (x815 11559732032986387107991004021392285783925812861821192530917403151452391805634) (x705 11559732032986387107991004021392285783925812861821192530917403151452391805634)))
(assert (x194 x71))
(assert (and (x644 x241 26959946667150639794667015087019630673637144422540572481103610249216) (= (x775 x241 26959946667150639794667015087019630673637144422540572481103610249216) (* 26959946667150639794667015087019630673637144422540572481103610249216 x241)) (x270 x241 26959946667150639794667015087019630673637144422540572481103610249216) (x851 x241 26959946667150639794667015087019630673637144422540572481103610249216) (x434 x241 26959946667150639794667015087019630673637144422540572481103610249216) (x394 x241 26959946667150639794667015087019630673637144422540572481103610249216) (and (= (- (* 26959946667150639794667015087019630673637144422540572481103610249216 x241) 3121748550315992231381597229793166305748598142664971150859156959625371738819765620120306103063491971159826931121406622895447975679288285306290176) (x775 (- x241 115792089237316195423570985008687907853269984665640564039457584007913129639936) 26959946667150639794667015087019630673637144422540572481103610249216)) (= (x775 (- x241 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (- (* x241 (- 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (- 13407807926820848549258032766824248897686199514843795235058590292862607070448175237982108678046597324626539887026659119732347259916498594267145363699793920))) (= (x775 x241 (- 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (* (- 115792089210356248756420345214020892766250353992003419616917011526809519390720) x241)))))
(assert (x194 x501))
(assert (x194 x416))
(assert (x194 x21))
(assert (x194 x57))
(assert (x194 x252))
(assert (x762 x583))
(assert (= x782 (and x603 x203)))
(assert (= (and (not x223) x462) x602))
(assert (= x93 (and x509 (not x164))))
(assert (= (x355 (x705 15734828340100255228388097270354557497891140761267446712098462632690385532271)) 15734828340100255228388097270354557497891140761267446712098462632690385532271))
(assert (x194 x128))
(assert (x194 x541))
(assert (and (=> (> 281474976710656 0) (= (+ (x582 x9 281474976710656) (* (x866 x9 281474976710656) 281474976710656)) x9)) (x414 x9 281474976710656) (x304 x9 281474976710656) (x476 x9 281474976710656)))
(assert (x194 x160))
(assert (= (or (and x800 x79) (and x13 (not x503)) x816 (and x532 x732) (and (not x506) x838) (and (not x489) x323) x828 (and x162 (not x77)) x286 (and x336 (not x267)) (and (not x579) x246) (and x133 x354) x668 (and x191 (not x560)) (and x490 (not x628)) (and x108 x577) (and x211 (not x293)) (and (not x280) x235) x520 (and x216 (not x212)) x869 (and x80 (not x619)) (and x315 (not x820)) (and x126 x870) (and x863 (not x327)) x290 (and (not x849) x201) (and x369 (not x397)) x593 (and x250 (not x183)) (and x257 x184) (and x182 (not x753)) (and x806 x265) (and x453 (not x122)) (and (not x51) x244) (and (not x92) x134) (and x389 x176) x218 x329 x206 (and x783 x803) (and x164 x509) (and x387 x845) (and (not x289) x281) (and x87 x573) (and x823 (not x522)) (and (not x227) x690) (and x631 (not x738)) (and x255 x807) (and x151 (not x880)) (and x576 (not x557)) (and (not x266) x90) x447 x219 x20 x442 (and (not x746) x155) (and (not x385) x781) (and x237 x495) x343 (and x480 x415) x116 x127 (and x418 x410) x542 (and (not x508) x831) (and x809 x366) (and x591 x637) x602 x177 (and x93 x198) (and x282 (not x570)) (and (not x17) x773) (and x767 (not x544)) (and x47 (not x142)) x328) x3))
(assert (=> (<= (x120 x27) 10000) (= (x815 (x120 x27)) (x705 (x120 x27)))))
(assert (= (and x732 (not x532)) x47))
(assert (x194 x348))
(assert (= (x355 (x815 79228162514264337593543950335)) 79228162514264337593543950335))
(assert (= x28 (and x56 (not x620))))
(assert (x194 x43))
(assert (= x354 (and x142 x47)))
(assert (= (and x539 (not x477)) x236))
(assert (=> (>= 10000 (x120 (x826 (+ x27 96)))) (= (x815 (x120 (x826 (+ x27 96)))) (x705 (x120 (x826 (+ 96 x27)))))))
(assert (x194 x115))
(assert (= (and x773 x17) x151))
(assert (x194 x478))
(assert (= (=> (and (= (x826 (+ 32 x517)) x128) (= x8 384) (= x750 (x826 (+ 32 x98))) (= (x580 (- x8 32)) x471) (= x285 (x240 x517)) (= x812 (>= 224 x285))) (and x812 (=> (and (>= x595 0) (= (> x350 1) x574) (> 1461501637330902918203684832716283019655932542976 x595) (= (x163 x604) x300) (= x278 (ite (<= x285 32) (x794 (x705 (x240 x128)) 0) (ite (<= x285 64) (x46 (x705 (x240 x128)) (x705 (x240 (x826 (+ x128 32)))) 0) (ite (<= x285 96) (x549 (x705 (x240 x128)) (x705 (x240 (x826 (+ 32 x128)))) (x705 (x240 (x826 (+ x128 64)))) 0) (ite (>= 128 x285) (x654 (x705 (x240 x128)) (x705 (x240 (x826 (+ 32 x128)))) (x705 (x240 (x826 (+ x128 64)))) (x705 (x240 (x826 (+ x128 96)))) 0) (ite (>= 160 x285) (x456 (x705 (x240 x128)) (x705 (x240 (x826 (+ 32 x128)))) (x705 (x240 (x826 (+ x128 64)))) (x705 (x240 (x826 (+ 96 x128)))) (x705 (x240 (x826 (+ x128 128)))) 0) (ite (<= x285 192) (x103 (x705 (x240 x128)) (x705 (x240 (x826 (+ 32 x128)))) (x705 (x240 (x826 (+ x128 64)))) (x705 (x240 (x826 (+ 96 x128)))) (x705 (x240 (x826 (+ x128 128)))) (x705 (x240 (x826 (+ 160 x128)))) 0) (ite (<= x285 224) (x372 (x705 (x240 x128)) (x705 (x240 (x826 (+ x128 32)))) (x705 (x240 (x826 (+ 64 x128)))) (x705 (x240 (x826 (+ x128 96)))) (x705 (x240 (x826 (+ 128 x128)))) (x705 (x240 (x826 (+ x128 160)))) (x705 (x240 (x826 (+ x128 192)))) 0) (x705 x66))))))))) (<= x595 1461501637330902918203684832716283019655932542975) (= x52 (x826 (+ x604 32))) (= x296 (x46 x278 (x815 1) 0)) (= x595 (x640 x296)) (= x350 (x163 x52)) (= (x861 1461501637330902918203684832716283019655932542975 x300) x301)) (and (=> x574 x49) (=> (and (= x230 false) (not x574)) x715))))) x322))
(assert (x194 x882))
(assert (x60 x850))
(assert (= x520 (and x95 x104)))
(assert (x194 x505))
(assert (x194 x29))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x611 4294967296) (* (x866 x611 4294967296) 4294967296)) x611)) (x414 x611 4294967296) (x304 x611 4294967296) (x476 x611 4294967296)))
(assert (= x819 (and x796 x199)))
(assert (= (x355 (x705 (x454 (x826 (+ 64 x518))))) (x454 (x826 (+ 64 x518)))))
(assert (x824 x9))
(assert (=> (<= (x240 (x826 (+ x128 32))) 10000) (= (x705 (x240 (x826 (+ 32 x128)))) (x815 (x240 (x826 (+ 32 x128)))))))
(assert (x194 x657))
(assert (=> (<= (x120 (x826 (+ 64 x27))) 10000) (= (x705 (x120 (x826 (+ x27 64)))) (x815 (x120 (x826 (+ x27 64)))))))
(assert (x194 x130))
(assert (= (=> (and (= x443 (not x724)) (= x230 x724)) x443) x510))
(assert (x194 x699))
(assert (x194 x632))
(assert (= (=> (and (= x872 x261) (= x740 (x826 (+ x160 32))) (= (x780 x390) x320) (= x422 (<= x320 224)) (= x747 (x210 (* x258 32))) (= x392 (x580 (- x740 x390))) (= x540 x649) (= x726 x258) (= (x826 (+ 32 x390)) x168) (= x649 (x826 (+ x747 x662))) (= (x826 (+ x615 x361)) x872) (= (x826 (+ 32 x540)) x160) (= x615 (x210 (* 32 x258))) (= (x580 (- x392 32)) x883)) (and x422 (=> (and (= x393 (ite (>= 32 x320) (x794 (x705 (x780 x168)) 0) (ite (<= x320 64) (x46 (x705 (x780 x168)) (x705 (x780 (x826 (+ x168 32)))) 0) (ite (<= x320 96) (x549 (x705 (x780 x168)) (x705 (x780 (x826 (+ 32 x168)))) (x705 (x780 (x826 (+ x168 64)))) 0) (ite (<= x320 128) (x654 (x705 (x780 x168)) (x705 (x780 (x826 (+ 32 x168)))) (x705 (x780 (x826 (+ x168 64)))) (x705 (x780 (x826 (+ 96 x168)))) 0) (ite (>= 160 x320) (x456 (x705 (x780 x168)) (x705 (x780 (x826 (+ 32 x168)))) (x705 (x780 (x826 (+ x168 64)))) (x705 (x780 (x826 (+ 96 x168)))) (x705 (x780 (x826 (+ 128 x168)))) 0) (ite (>= 192 x320) (x103 (x705 (x780 x168)) (x705 (x780 (x826 (+ x168 32)))) (x705 (x780 (x826 (+ x168 64)))) (x705 (x780 (x826 (+ 96 x168)))) (x705 (x780 (x826 (+ x168 128)))) (x705 (x780 (x826 (+ 160 x168)))) 0) (ite (<= x320 224) (x372 (x705 (x780 x168)) (x705 (x780 (x826 (+ x168 32)))) (x705 (x780 (x826 (+ x168 64)))) (x705 (x780 (x826 (+ x168 96)))) (x705 (x780 (x826 (+ 128 x168)))) (x705 (x780 (x826 (+ x168 160)))) (x705 (x780 (x826 (+ 192 x168)))) 0) (x705 x677))))))))) (= (= (x705 x527) x393) x876) (= (x884 420) x527)) (and (=> (and x876 (and (= (x866 x507 32) x166) (= (x780 320) x507) (= (= x166 28) x207))) (and (=> (not x207) x49) (=> (and (and (or (and (and (= x612 1) (> 4294967296 x83)) x117) (and (= x873 x612) (not x117))) (and (= x4 (x826 (+ x832 32))) (= x832 (x826 (+ 4 x740))) (= (x826 (+ x4 32)) x173) (= x680 (x826 (+ x10 x173))) (= x117 (> x873 0)))) x207) x860))) (=> (not x876) x49))))) x647))
(assert (= (and x191 x560) x80))
(assert (= (x355 (x815 10857046999023057135944570762232829481370756359578518086990519993285655852781)) 10857046999023057135944570762232829481370756359578518086990519993285655852781))
(assert (x194 x349))
(assert (x868 x258))
(assert (x678 (x534 (x826 (+ 32 x769)))))
(assert (=> (>= 10000 (x780 (x826 (+ 160 x168)))) (= (x705 (x780 (x826 (+ x168 160)))) (x815 (x780 (x826 (+ 160 x168)))))))
(assert (x194 x5))
(assert (= (and x244 x51) x112))
(assert (x152 x785 x30))
(assert (x194 x550))
(assert (= x64 (x355 (x705 x64))))
(assert (and (=> (> 32 0) (= (+ (x582 x817 32) (* (x866 x817 32) 32)) x817)) (x414 x817 32) (x304 x817 32) (x476 x817 32)))
(assert (= (x815 281474976710655) (x705 281474976710655)))
(assert (x194 x398))
(assert (x194 x740))
(assert (x824 x43))
(assert (x824 x611))
(assert (x194 x94))
(assert (x194 x200))
(assert (x194 x425))
(assert (x194 x787))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x771 4294967296) (* (x866 x771 4294967296) 4294967296)) x771)) (x414 x771 4294967296) (x304 x771 4294967296) (x476 x771 4294967296)))
(assert (x194 x615))
(assert (= (=> (and (and (and (= (x826 (+ 32 x564)) x517) (= (< 0 x587) x796)) (or (and (= x587 x852) (not x796)) (and (and (> 4294967296 x331) (= 1 x852)) x796))) (and (= (x138 x146) x784) (= x519 (x59 x439)) (= x629 (x702 x578)) (= x375 (x59 x788)) (= x799 (x826 (+ x42 32))) (= x450 (x826 (+ x404 64))) (= (x826 (+ 32 x7)) x14) (= (x826 (+ 384 x450)) x564) (= x283 (x709 x425)) (= (x23 x110) x384) (= x596 (x826 (+ x404 32))) (= x856 (x709 x346)) (= (x23 x190) x545) (= x11 (x23 x346)) (= x404 (x826 (+ x360 64))) (= (x826 (+ 32 x84)) x541) (= x106 (x284 x788)) (= x485 (x826 (+ x765 32))) (= x213 (x826 (+ x420 32))) (= (x59 x519) x683) (= x633 (x826 (+ 32 x196))) (= (x295 x346) x858) (= x550 x360) (= x346 (x826 (+ x404 32))) (= (x756 x271) x766) (= x835 (x717 x550)) (= x398 (x288 x146)) (= (x709 x856) x597) (= (x793 x788) x436) (= (x496 x292) x252) (= (x826 (+ x360 32)) x787) (= x588 (x826 (+ x277 32))) (= x452 (x826 (+ 32 x858))) (= (x826 (+ 32 x398)) x610) (= (x288 x610) x840) (= x110 (x826 (+ x11 32))) (= (x826 (+ x42 64)) x360) (= (x702 x550) x578) (= x405 (x826 (+ 32 x143))) (= 500000 x498) (= (x636 x185) x362) (= (x826 (+ 32 x22)) x196) (= x748 (x826 (+ 32 x436))) (= x349 (x636 x346)) (= (x826 (+ x450 192)) x733) (= (x756 x788) x271) (= (x717 x704) x763) (= x7 (x826 (+ x706 32))) (= x765 (x284 x106)) (= (x826 (+ 32 x835)) x704) (= x185 (x636 x349)) (= (x826 (+ 32 x384)) x190) (= x425 (x826 (+ x597 32))) (= (x826 (+ x733 32)) x440) (= (x826 (+ x375 32)) x439) (= (x826 (+ 32 x633)) x655) (= x143 (x793 x748)) (= (x826 (+ 32 x440)) x757) (= (x826 (+ 64 x84)) x42) (= x302 (x295 x627)) (= (x826 (+ 32 x655)) x277) (= x515 (x138 x784)) (= (x756 x766) x590) (= x563 (x793 x405)) (= x616 (x284 x485)) (= (x295 x452) x627) (= x146 (x826 (+ x360 32))) (= x706 (x826 (+ x757 32))) (= x788 x404) (= x22 x450) (= x84 (x826 (+ 64 x420))))) x279) x316))
(assert (x194 x614))
(assert (x824 x358))
(assert (=> (<= (x12 (x826 (+ 192 x745))) 10000) (= (x705 (x12 (x826 (+ x745 192)))) (x815 (x12 (x826 (+ 192 x745)))))))
(assert (x194 x429))
(assert (let ((x91 (* x241 26959946667150639794667015087019630673637144422540572481103610249216))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x582 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x866 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x91)) (x414 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x304 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x476 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x194 x483))
(assert (x194 x596))
(assert (x194 x129))
(assert (x669 x319))
(assert (x194 x859))
(assert (x194 x873))
(assert (x245 x291))
(assert (x60 x771))
(assert (=> (>= 10000 (x120 (x826 (+ x27 128)))) (= (x705 (x120 (x826 (+ 128 x27)))) (x815 (x120 (x826 (+ 128 x27)))))))
(assert (x194 x221))
(assert (x60 x391))
(assert (x678 (x12 (x826 (+ x745 160)))))
(assert (x194 x156))
(assert (x60 x530))
(assert (= x162 true))
(assert (x824 x850))
(assert (x194 x390))
(assert (x678 (x12 (x826 (+ 64 x745)))))
(assert (= x328 (and x175 (not x553))))
(assert (= (=> (and (= x548 (< x469 64)) (= (x342 320) x469)) (and x548 (=> (and (= x729 x420) (= x465 x691)) x468))) x721))
(assert (let ((x605 (x114 2 x562))) (and (x644 1 x605) (= (x775 1 x605) (* x605 1)) (x270 1 x605) (x851 1 x605) (x434 1 x605) (x394 1 x605) (and (= (- (* x605 1) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x605)) (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x605)) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x775 1 (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x605 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))))))
(assert (= 281474976710655 (x355 (x815 281474976710655))))
(assert (=> (>= 10000 (x780 (x826 (+ x168 64)))) (= (x815 (x780 (x826 (+ x168 64)))) (x705 (x780 (x826 (+ 64 x168)))))))
(assert (= (x705 13392588948715843804641432497768002650278120570034223513918757245338268106653) (x815 13392588948715843804641432497768002650278120570034223513918757245338268106653)))
(assert (x194 x789))
(assert (x824 x71))
(assert (=> (>= 10000 (x240 x128)) (= (x705 (x240 x128)) (x815 (x240 x128)))))
(assert (=> (<= (x534 (x826 (+ 64 x769))) 10000) (= (x705 (x534 (x826 (+ 64 x769)))) (x815 (x534 (x826 (+ x769 64)))))))
(assert (x194 x726))
(assert (x678 x66))
(assert (x194 x301))
(assert (= (x355 (x815 19211759364411014404085342898986916011845161991165440702586961613165858652160)) 19211759364411014404085342898986916011845161991165440702586961613165858652160))
(assert (x194 x713))
(assert (x194 x485))
(assert (x194 x700))
(assert (= (x534 (x826 (+ 128 x769))) (x355 (x705 (x534 (x826 (+ x769 128)))))))
(assert (x194 x106))
(assert (= (x355 (x705 (x534 (x826 (+ x769 32))))) (x534 (x826 (+ 32 x769)))))
(assert (let ((x91 (ite (> 256 x562) (x114 2 x562) 0))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x582 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x866 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x91)) (x414 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x304 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x476 x91 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (=> (<= (x12 (x826 (+ 128 x745))) 10000) (= (x815 (x12 (x826 (+ x745 128)))) (x705 (x12 (x826 (+ x745 128)))))))
(assert (x194 x238))
(assert (x194 x8))
(assert (= x237 (and x122 x453)))
(assert (x194 x78))
(assert (=> (<= (x454 (x826 (+ x518 128))) 10000) (= (x815 (x454 (x826 (+ 128 x518)))) (x705 (x454 (x826 (+ x518 128)))))))
(assert (and (=> (> 281474976710656 0) (= (+ (x582 x358 281474976710656) (* (x866 x358 281474976710656) 281474976710656)) x358)) (x414 x358 281474976710656) (x304 x358 281474976710656) (x476 x358 281474976710656)))
(assert (x194 x407))
(assert (x678 (x120 (x826 (+ 64 x27)))))
(assert (x194 x624))
(assert (x708 x512))
(assert (= (and x781 x385) x509))
(assert (x678 (x534 (x826 (+ x769 192)))))
(assert (x60 x583))
(assert (x194 x872))
(assert (= (x2 1 x562) (x210 (ite (> 256 x562) (x114 2 x562) 0))))
(assert (=> (<= (x454 (x826 (+ x518 160))) 10000) (= (x705 (x454 (x826 (+ x518 160)))) (x815 (x454 (x826 (+ 160 x518)))))))
(assert (x60 255))
(assert (= x290 (and (not x723) x684)))
(assert (= x635 (=> (and (= (x580 (- x538 32)) x348) (= x382 (x454 x667)) (= (x826 (+ 32 x676)) x70) (= x659 (x826 (+ x667 32))) (= x676 (x826 (+ 32 x659))) (= x144 (<= x382 224)) (= x538 (x580 (- x70 x667))) (= x518 (x826 (+ 32 x667)))) (and x144 (=> (and (= (ite (<= x382 32) (x794 (x705 (x454 x518)) 0) (ite (>= 64 x382) (x46 (x705 (x454 x518)) (x705 (x454 (x826 (+ x518 32)))) 0) (ite (<= x382 96) (x549 (x705 (x454 x518)) (x705 (x454 (x826 (+ x518 32)))) (x705 (x454 (x826 (+ 64 x518)))) 0) (ite (<= x382 128) (x654 (x705 (x454 x518)) (x705 (x454 (x826 (+ x518 32)))) (x705 (x454 (x826 (+ x518 64)))) (x705 (x454 (x826 (+ 96 x518)))) 0) (ite (>= 160 x382) (x456 (x705 (x454 x518)) (x705 (x454 (x826 (+ x518 32)))) (x705 (x454 (x826 (+ x518 64)))) (x705 (x454 (x826 (+ x518 96)))) (x705 (x454 (x826 (+ 128 x518)))) 0) (ite (>= 192 x382) (x103 (x705 (x454 x518)) (x705 (x454 (x826 (+ x518 32)))) (x705 (x454 (x826 (+ x518 64)))) (x705 (x454 (x826 (+ 96 x518)))) (x705 (x454 (x826 (+ x518 128)))) (x705 (x454 (x826 (+ 160 x518)))) 0) (ite (>= 224 x382) (x372 (x705 (x454 x518)) (x705 (x454 (x826 (+ x518 32)))) (x705 (x454 (x826 (+ 64 x518)))) (x705 (x454 (x826 (+ 96 x518)))) (x705 (x454 (x826 (+ 128 x518)))) (x705 (x454 (x826 (+ 160 x518)))) (x705 (x454 (x826 (+ 192 x518)))) 0) (x705 x664)))))))) x691) (= x70 x729)) x721)))))
(assert (x194 x303))
(assert (x194 x147))
(assert (and (=> (> 32 0) (= (+ (x582 x71 32) (* (x866 x71 32) 32)) x71)) (x414 x71 32) (x304 x71 32) (x476 x71 32)))
(assert (x194 x649))
(assert (x194 x634))
(assert (x194 x675))
(assert (and (=> (> 79228162514264337593543950336 0) (= (+ (x582 x530 79228162514264337593543950336) (* (x866 x530 79228162514264337593543950336) 79228162514264337593543950336)) x530)) (x414 x530 79228162514264337593543950336) (x304 x530 79228162514264337593543950336) (x476 x530 79228162514264337593543950336)))
(assert (x194 x123))
(assert (= (x355 (x705 (x240 (x826 (+ x128 64))))) (x240 (x826 (+ x128 64)))))
(assert (x194 x11))
(assert (=> (>= 10000 (x534 (x826 (+ x769 96)))) (= (x815 (x534 (x826 (+ 96 x769)))) (x705 (x534 (x826 (+ 96 x769)))))))
(assert (x194 x552))
(assert (= x523 (or x3 x370)))
(assert (= x341 (and x768 x117)))
(assert (= (and x125 x782) x556))
(assert (and (=> (> 256 0) (= (+ (x582 x43 256) (* (x866 x43 256) 256)) x43)) (x414 x43 256) (x304 x43 256) (x476 x43 256)))
(assert (=> (>= 10000 (x780 x168)) (= (x815 (x780 x168)) (x705 (x780 x168)))))
(assert (x194 x351))
(assert (x60 x712))
(assert (= (x454 (x826 (+ 160 x518))) (x355 (x705 (x454 (x826 (+ 160 x518)))))))
(assert (= (=> (and (= (x826 (+ 32 x667)) x317) (= (x826 (+ x317 32)) x430) (= x149 (x534 x667)) (= (x826 (+ x667 32)) x769) (= x325 (x580 (- x559 x667))) (= (x826 (+ 32 x430)) x559) (= (>= 224 x149) x140) (= (x580 (- x325 32)) x76)) (and (=> (and (= x691 (ite (<= x149 32) (x794 (x705 (x534 x769)) 0) (ite (<= x149 64) (x46 (x705 (x534 x769)) (x705 (x534 (x826 (+ 32 x769)))) 0) (ite (<= x149 96) (x549 (x705 (x534 x769)) (x705 (x534 (x826 (+ x769 32)))) (x705 (x534 (x826 (+ x769 64)))) 0) (ite (>= 128 x149) (x654 (x705 (x534 x769)) (x705 (x534 (x826 (+ 32 x769)))) (x705 (x534 (x826 (+ x769 64)))) (x705 (x534 (x826 (+ 96 x769)))) 0) (ite (<= x149 160) (x456 (x705 (x534 x769)) (x705 (x534 (x826 (+ x769 32)))) (x705 (x534 (x826 (+ 64 x769)))) (x705 (x534 (x826 (+ 96 x769)))) (x705 (x534 (x826 (+ x769 128)))) 0) (ite (>= 192 x149) (x103 (x705 (x534 x769)) (x705 (x534 (x826 (+ x769 32)))) (x705 (x534 (x826 (+ x769 64)))) (x705 (x534 (x826 (+ 96 x769)))) (x705 (x534 (x826 (+ x769 128)))) (x705 (x534 (x826 (+ 160 x769)))) 0) (ite (>= 224 x149) (x372 (x705 (x534 x769)) (x705 (x534 (x826 (+ 32 x769)))) (x705 (x534 (x826 (+ x769 64)))) (x705 (x534 (x826 (+ x769 96)))) (x705 (x534 (x826 (+ 128 x769)))) (x705 (x534 (x826 (+ x769 160)))) (x705 (x534 (x826 (+ 192 x769)))) 0) (x705 x365))))))))) (= x559 x729)) x721) x140)) x335))
(assert (= (and x397 x369) x818))
(assert (= (x355 (x705 (x780 x168))) (x780 x168)))
(assert (x194 x712))
(assert (x194 x436))
(assert (x194 x482))
(assert (x194 x597))
(assert (x194 x232))
(assert (x194 x729))
(assert (x868 32))
(assert (x194 x561))
(assert (x194 x817))
(assert (x194 x271))
(assert (x194 x660))
(assert (= (and x557 x576) x155))
(assert (x194 x137))
(assert (= (and x556 (not x411)) x297))
(assert (= (and x598 (not x837)) x809))
(assert (x194 x878))
(assert (= (x120 (x826 (+ x27 64))) (x355 (x705 (x120 (x826 (+ 64 x27)))))))
(assert (x60 x399))
(assert (x678 (x120 (x826 (+ x27 96)))))
(assert (x650 x43))
(assert (x194 x642))
(assert (x194 x673))
(assert (= (x355 (x705 x527)) x527))
(assert (x194 x100))
(assert (x194 x450))
(assert (x194 x247))
(assert (= (x355 (x705 x365)) x365))
(assert (= (x355 (x705 (x534 (x826 (+ 192 x769))))) (x534 (x826 (+ 192 x769)))))
(assert (=> (<= (x240 (x826 (+ x128 192))) 10000) (= (x815 (x240 (x826 (+ 192 x128)))) (x705 (x240 (x826 (+ 192 x128)))))))
(assert (x678 (x240 x128)))
(assert (= x467 (x355 (x705 x467))))
(assert (x194 x254))
(assert (= x864 (and (not x309) x419)))
(assert (x194 x633))
(assert (= (x120 (x826 (+ 192 x27))) (x355 (x705 (x120 (x826 (+ x27 192)))))))
(assert (=> (>= 10000 (x454 (x826 (+ 64 x518)))) (= (x705 (x454 (x826 (+ x518 64)))) (x815 (x454 (x826 (+ x518 64)))))))
(assert (x194 x376))
(assert (= (x705 15734828340100255228388097270354557497891140761267446712098462632690385532271) (x815 15734828340100255228388097270354557497891140761267446712098462632690385532271)))
(assert (= (x240 (x826 (+ 32 x128))) (x355 (x705 (x240 (x826 (+ x128 32)))))))
(assert (= (and x293 x211) x323))
(assert (x194 x694))
(assert (x194 x452))
(assert (x194 x466))
(assert (= (=> (= (= x612 0) x837) (and (=> x837 x49) (=> (and (not x837) (and (= x292 (x826 (+ x740 x645))) (= (or (and (> 160 x83) (= (<= x83 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x83 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x366) (= (x861 115792089237316195423570985008687907853269984665640564039457584007913129639904 x291) x645) (= (x826 (+ x83 31)) x291))) (and (=> (and (not x366) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x83) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x83)) (< x83 160))) x870)) (and (=> x870 x49) (=> (and (and (= (< 18446744073709551615 x368) x735) (= x714 (> x292 x368)) (= x197 (or x735 x714)) (= x707 (= 0 (ite x197 1 0))) (= (x826 (+ x292 128)) x368)) (not x870)) (and (=> (not x707) x49) (=> (and x707 (= (or (and (= true (<= x83 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x83 64)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x83)) x257)) (and (=> x257 x49) (=> (and (not x257) (and (= (> x368 x804) x575) (= (or x575 x186) x313) (= x537 (= (ite x313 1 0) 0)) (= x186 (> x804 18446744073709551615)) (= x804 (x826 (+ x368 64))))) (and (=> (not x537) x49) (=> (and x537 (and (= true x753) (= x617 (x441 x740)))) (and (=> (not x753) x49) (=> (and x753 (and (= true x503) (= x687 (x826 (+ x740 32))) (= (x34 x687) x232))) (and (=> (not x503) x49) (=> (and x503 (and (= (x406 x689) x358) (= (x826 (+ 32 x687)) x689) (= (= x358 x264) x183) (= x626 (x826 (+ x368 32))) (= (x861 281474976710655 x358) x264))) (and (=> (and x183 (and (= (x826 (+ x689 32)) x263) (= x789 (x720 x263)) (= x506 (= x99 x789)) (= (x826 (+ x292 32)) x217) (= (x861 4294967295 x789) x99))) (and (=> (and (and (= x758 (x826 (+ x217 32))) (= x522 (= x100 x722)) (= x722 (x861 4294967295 x100)) (= (x105 x256) x100) (= x256 (x826 (+ x263 32)))) x506) (and (=> (not x522) x49) (=> (and x522 (and (and (= x686 (x861 4294967295 x516)) (= (x826 (+ 32 x758)) x699) (= x585 (x826 (+ x804 4))) (= x516 (x881 x758)) (= (< 0 x739) x72)) (or (and (not x72) (= x403 x739)) (and (and (< x466 4294967296) (= 1 x403)) x72)))) x432))) (=> (not x506) x49))) (=> (not x183) x49))))))))))))))) (=> x366 x49))))) x860))
(assert (x194 x1))
(assert (= x211 (and x134 x92)))
(assert (x824 256))
(assert (x194 x337))
(assert (x194 x850))
(assert (x194 x685))
(assert (x60 x785))
(assert (x194 x14))
(assert (x194 x451))
(assert (x194 x533))
(assert (x194 x294))
(assert (x194 x88))
(assert (= x401 (and x795 x864)))
(assert (x194 x681))
(assert (x194 x332))
(assert (x60 x9))
(assert (= 500000 (x355 (x815 500000))))
(assert (x60 4294967295))
(assert (= x281 (and x746 x155)))
(assert (x243 x530))
(assert (x194 x319))
(assert (x762 x1))
(assert (x678 (x534 (x826 (+ x769 64)))))
(assert (x824 x291))
(assert (x194 x464))
(assert (x194 x610))
(assert (= 403919343 (x355 (x815 403919343))))
(assert (x194 x487))
(assert (x762 x789))
(assert (= x13 (and x182 x753)))
(assert (x60 x358))
(assert (x194 x445))
(assert (x194 x333))
(assert (x194 x302))
(assert (x194 x588))
(assert (=> (<= (x240 (x826 (+ x128 128))) 10000) (= (x815 (x240 (x826 (+ x128 128)))) (x705 (x240 (x826 (+ x128 128)))))))
(assert (x194 x645))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x582 x300 1461501637330902918203684832716283019655932542976) (* (x866 x300 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x300)) (x414 x300 1461501637330902918203684832716283019655932542976) (x304 x300 1461501637330902918203684832716283019655932542976) (x476 x300 1461501637330902918203684832716283019655932542976)))
(assert (x678 (x454 (x826 (+ 64 x518)))))
(assert (= (and x823 x522) x208))
(assert (x194 x836))
(assert (x194 x358))
(assert (x194 x15))
(assert (x245 x71))
(assert (x194 x365))
(assert (= (x355 (x815 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= (x120 x27) (x355 (x705 (x120 x27)))))
(assert (= x174 (and x492 (not x470))))
(assert (x194 x622))
(assert (=> (<= (x454 x518) 10000) (= (x815 (x454 x518)) (x705 (x454 x518)))))
(assert (x194 x754))
(assert (x60 x291))
(assert (x194 x256))
(assert (x194 x527))
(assert (x678 (x120 (x826 (+ x27 128)))))
(assert (x194 x653))
(assert (= (x355 (x815 6449634268930127669875982587348191347588899670384742761526659814853911248896)) 6449634268930127669875982587348191347588899670384742761526659814853911248896))
(assert (x678 x340))
(assert (x678 x488))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x583 4294967296) (* (x866 x583 4294967296) 4294967296)) x583)) (x414 x583 4294967296) (x304 x583 4294967296) (x476 x583 4294967296)))
(assert (= (x705 403919343) (x815 403919343)))
(assert (x824 x391))
(assert (x194 x299))
(assert (x678 (x454 (x826 (+ x518 160)))))
(assert (x194 x96))
(assert (x194 x835))
(assert (= x767 (and x619 x80)))
(assert (=> (>= 10000 x129) (= (x815 x129) (x705 x129))))
(assert (= (and x336 x267) x781))
(assert (x194 x253))
(assert (x678 (x534 x769)))
(assert (x194 x298))
(assert (x60 x241))
(assert (x194 x427))
(assert (= x159 (and x523 (not x230))))
(assert (x60 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x194 x662))
(assert (=> (<= (x534 x769) 10000) (= (x705 (x534 x769)) (x815 (x534 x769)))))
(assert (x194 x659))
(assert (= (x815 268435456) (x705 268435456)))
(assert (= (x705 10857046999023057135944570762232829481370756359578518086990519993285655852781) (x815 10857046999023057135944570762232829481370756359578518086990519993285655852781)))
(assert (=> (>= 10000 (x120 (x826 (+ x27 160)))) (= (x815 (x120 (x826 (+ 160 x27)))) (x705 (x120 (x826 (+ 160 x27)))))))
(assert (x194 x167))
(assert (x194 x229))
(assert (x824 x712))
(assert (x194 x67))
(assert (= (and x749 x124) x806))
(assert (x194 x165))
(assert (x824 (* x241 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (= x139 (and x620 x56)))
(assert (x762 x241))
(assert (x678 (x240 (x826 (+ x128 128)))))
(assert (x60 x533))
(assert (x194 x260))
(assert (= (x355 (x705 (x454 (x826 (+ 192 x518))))) (x454 (x826 (+ 192 x518)))))
(assert (x678 (x534 (x826 (+ 160 x769)))))
(assert (x194 x680))
(assert (= (x355 (x705 (x780 (x826 (+ 64 x168))))) (x780 (x826 (+ 64 x168)))))
(assert (x194 x157))
(assert (x678 (x12 (x826 (+ 96 x745)))))
(assert (= (and x831 x508) x216))
(assert (x194 x722))
(assert (x60 x319))
(assert (= (and (not x796) x199) x363))
(assert (x194 x739))
(assert (= (x815 19211759364411014404085342898986916011845161991165440702586961613165858652160) (x705 19211759364411014404085342898986916011845161991165440702586961613165858652160)))
(assert (x194 x251))
(assert (x824 x530))
(assert (= (and x74 (not x44)) x415))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x229 4294967296) (* (x866 x229 4294967296) 4294967296)) x229)) (x414 x229 4294967296) (x304 x229 4294967296) (x476 x229 4294967296)))
(assert (x194 x30))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x238 4294967296) (* (x866 x238 4294967296) 4294967296)) x238)) (x414 x238 4294967296) (x304 x238 4294967296) (x476 x238 4294967296)))
(assert (= (=> (= (= 0 x403) x44) (and (=> x44 x49) (=> (and (and (= (x826 (+ x804 x158)) x675) (= x5 (x826 (+ x466 31))) (= x158 (x861 115792089237316195423570985008687907853269984665640564039457584007913129639904 x5)) (= x480 (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x466)) (< x466 32)) (> x466 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (not x44)) (and (=> x480 x49) (=> (and (not x480) (and (= true x51) (= (x215 x804) x848))) (and (=> (and x51 (and (= (ite (> x848 x318) 1 0) x30) (= (x866 115792089237316195423570985008687907853269984665640564039457584007913129639935 x512) x318) (= (x861 281474976710655 x9) x512) (= (x861 x785 x30) x251) (= x9 (x215 x217)) (= x785 (ite (not x287) 1 0)) (= x764 (= 0 x251)) (= (= 0 x512) x287))) (and (=> (and (and (= x309 (< 268435456 x700)) (= (x210 (x775 x512 x848)) x700)) x764) (and (=> x309 x49) (=> (not x309) x594))) (=> (not x764) x49))) (=> (not x51) x49))))))) x432))
(assert (= x732 (and (not x108) x577)))
(assert (= (and x876 x357) x330))
(assert (= (x534 x769) (x355 (x705 (x534 x769)))))
(assert (x194 x765))
(assert (= (x12 (x826 (+ 128 x745))) (x355 (x705 (x12 (x826 (+ x745 128)))))))
(assert (x824 x100))
(assert (x194 x769))
(assert (x678 x129))
(assert (= x419 (and x764 x112)))
(assert (= (x355 (x815 13392588948715843804641432497768002650278120570034223513918757245338268106653)) 13392588948715843804641432497768002650278120570034223513918757245338268106653))
(assert (=> (>= 10000 (x120 (x826 (+ 32 x27)))) (= (x815 (x120 (x826 (+ x27 32)))) (x705 (x120 (x826 (+ x27 32)))))))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x789 4294967296) (* (x866 x789 4294967296) 4294967296)) x789)) (x414 x789 4294967296) (x304 x789 4294967296) (x476 x789 4294967296)))
(assert (x824 x771))
(assert (x194 x516))
(assert (= (x12 (x826 (+ 192 x745))) (x355 (x705 (x12 (x826 (+ 192 x745)))))))
(assert (x194 x291))
(assert (x194 x840))
(assert (x194 x292))
(assert (= (x705 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x815 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x194 x538))
(assert (x678 x664))
(assert (= x246 (and x741 x772)))
(assert (x194 x38))
(assert (=> (<= (x780 (x826 (+ x168 128))) 10000) (= (x815 (x780 (x826 (+ 128 x168)))) (x705 (x780 (x826 (+ x168 128)))))))
(assert (x824 1461501637330902918203684832716283019655932542976))
(assert (x194 x799))
(assert (x194 x65))
(assert (x194 x119))
(assert (x194 x241))
(assert (= (=> (and (= x275 false) (<= 0 x630) (= (x45 (x705 x340)) x774) (>= 1461501637330902918203684832716283019655932542975 x340) (>= x353 0) (= false x821) (> x774 0) (= (< 0 (x45 (x705 x340))) x875) (<= 0 x249) (>= x859 0) (< 0 x221) (> x340 0) x305 (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x312)) (< 579 x312)) (>= x137 0) (= x630 (x822 (x705 x340))) x334 (= x77 (= 0 x776)) (= 403919343 x192) (= 0 x568) (<= x221 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x353) (> x64 0) (= false x473) (= x777 x614) (= x614 x249) (= x137 (x822 (x705 x221))) (>= 1461501637330902918203684832716283019655932542975 x755) (= (> (x45 (x705 x221)) 0) x792) (<= 0 x613) x875 (>= x755 0) (<= x37 255) (= x305 (= 0 x136)) (<= x859 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x777) (not (= x340 x221)) (= 5 x179) (<= 0 x777) (= x136 x776) (= x569 x513) (>= 1461501637330902918203684832716283019655932542975 x64) (>= 255 x613) (= x359 x353) (= x409 false) (<= 0 x37) (= x672 (x822 (x705 x64))) (>= x672 0) x792 (not (= x64 x221)) (= x569 x755) (not (= x340 x64)) (= x334 (< 0 (x45 (x705 x64)))) (<= x249 1461501637330902918203684832716283019655932542975)) (and (=> (not x77) x49) (=> (and (and (= x643 403919343) (= x62 (x580 (- x312 4))) (not (< x312 4)) (< x643 2262799685) (= x108 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x62) (and (< x62 576) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x62) true))))) x77) (and (=> (and (and (= x532 (< 18446744073709551615 x547)) (= x547 (x884 4))) (not x108)) (and (=> x532 x49) (=> (and (and (= (x826 (+ x451 31)) x167) (= x142 (or (and (> x312 x167) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x167) (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x167) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x312)))) (= x451 (x826 (+ x547 4)))) (not x532)) (and (=> (not x142) x49) (=> (and x142 (and (= x133 (< 18446744073709551615 x10)) (= (x884 x451) x10))) (and (=> x133 x49) (=> (and (and (= x254 (x826 (+ x451 32))) (= (x826 (+ x10 x254)) x299) (= x389 (> x299 x312))) (not x133)) (and (=> x389 x49) (=> (and (and (= x730 (x580 (- x312 36))) (= x418 (or (and (< x730 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x730))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x730)))) (not x389)) (and (=> (and (not x418) (and (= x738 (and (= (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< 67 x312))) (= 128 x703))) (and (=> (not x738) x49) (=> (and x738 (= x783 (> 100 x312))) (and (=> x783 x49) (=> (and (not x783) (and (= (x884 36) x115) (= true x63))) (and (=> x63 x479) (=> (not x63) x49))))))) (=> x418 x49))))))))))) (=> x108 x49))))) x651))
(assert (x194 x777))
(assert (x824 x583))
(assert (x194 x300))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x582 x319 1461501637330902918203684832716283019655932542976) (* (x866 x319 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x319)) (x414 x319 1461501637330902918203684832716283019655932542976) (x304 x319 1461501637330902918203684832716283019655932542976) (x476 x319 1461501637330902918203684832716283019655932542976)))
(assert (x708 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (and x805 x592) x206))
(assert (x868 x848))
(assert (=> (>= 10000 x365) (= (x815 x365) (x705 x365))))
(assert (= (or x139 x28) x805))
(assert (= (x815 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x705 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x684 (or x363 x819)))
(assert (x678 (x780 (x826 (+ 128 x168)))))
(assert (x824 x229))
(assert (= (and x864 (not x795)) x218))
(assert (x60 x30))
(assert (x194 x586))
(assert (= (x705 6449634268930127669875982587348191347588899670384742761526659814853911248896) (x815 6449634268930127669875982587348191347588899670384742761526659814853911248896)))
(assert (x194 x695))
(assert (= 1461501637330902918203684832716283019655932542976 (x355 (x815 1461501637330902918203684832716283019655932542976))))
(assert (x194 x39))
(assert (x194 x268))
(assert (x194 x340))
(assert (x194 x359))
(assert (x194 x10))
(assert (= (x355 (x815 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x194 x655))
(assert (= x244 (and x415 (not x480))))
(assert (= (and (not x841) x682) x104))
(assert (x194 x748))
(assert (x194 x689))
(assert (x868 (x114 2 x562)))
(assert (x194 x611))
(assert (x678 (x454 (x826 (+ 128 x518)))))
(assert (x194 x627))
(assert (= (or x306 x497) x462))
(assert (x678 (x454 (x826 (+ x518 32)))))
(assert (x194 x234))
(assert (x194 x697))
(assert (x60 1461501637330902918203684832716283019655932542975))
(assert (= (and x574 x638) x447))
(assert (x194 x578))
(assert (x194 x404))
(assert (=> (>= 10000 x221) (= (x815 x221) (x705 x221))))
(assert (= (and (not x125) x782) x728))
(assert (x194 x382))
(assert (x194 x132))
(assert (x194 x833))
(assert (x762 x850))
(assert (x194 x312))
(assert (x194 x737))
(assert (x194 x70))
(assert (= x357 (or x174 x107 x421 x728 x297)))
(assert (x678 (x12 (x826 (+ x745 32)))))
(assert (x824 x533))
(assert (= (x120 (x826 (+ 128 x27))) (x355 (x705 (x120 (x826 (+ x27 128)))))))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x516 4294967296) (* (x866 x516 4294967296) 4294967296)) x516)) (x414 x516 4294967296) (x304 x516 4294967296) (x476 x516 4294967296)))
(assert (x194 x62))
(assert (x194 x858))
(assert (=> (<= x467 10000) (= (x705 x467) (x815 x467))))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x355 (x815 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (= (x355 (x705 (x120 (x826 (+ 32 x27))))) (x120 (x826 (+ x27 32)))))
(assert (=> (<= x66 10000) (= (x815 x66) (x705 x66))))
(assert (= (x355 (x705 x221)) x221))
(assert (x868 x512))
(assert (x194 x519))
(assert (= (x355 (x705 (x120 (x826 (+ 96 x27))))) (x120 (x826 (+ 96 x27)))))
(assert (x824 x484))
(assert (x194 x153))
(assert (x194 x356))
(assert (x60 x71))
(assert (= x370 (and x638 (not x574))))
(assert (x194 x563))
(assert (x194 x587))
(assert (x708 x379))
(assert (x194 x879))
(assert (= (x815 4294967295) (x705 4294967295)))
(assert (x60 x238))
(assert (x194 x338))
(assert (x194 x469))
(assert (x194 x113))
(assert (x194 x667))
(assert (= (and x151 x880) x863))
(assert (= x742 (=> (and (= x833 (x826 (+ x27 x10))) (= (<= x333 224) x428) (= x10 x333)) (and x428 (=> (and (= (= (x705 x467) (ite (>= 32 x333) (x794 (x705 (x120 x27)) 0) (ite (<= x333 64) (x46 (x705 (x120 x27)) (x705 (x120 (x826 (+ x27 32)))) 0) (ite (>= 96 x333) (x549 (x705 (x120 x27)) (x705 (x120 (x826 (+ 32 x27)))) (x705 (x120 (x826 (+ x27 64)))) 0) (ite (>= 128 x333) (x654 (x705 (x120 x27)) (x705 (x120 (x826 (+ 32 x27)))) (x705 (x120 (x826 (+ x27 64)))) (x705 (x120 (x826 (+ x27 96)))) 0) (ite (<= x333 160) (x456 (x705 (x120 x27)) (x705 (x120 (x826 (+ 32 x27)))) (x705 (x120 (x826 (+ x27 64)))) (x705 (x120 (x826 (+ 96 x27)))) (x705 (x120 (x826 (+ x27 128)))) 0) (ite (>= 192 x333) (x103 (x705 (x120 x27)) (x705 (x120 (x826 (+ 32 x27)))) (x705 (x120 (x826 (+ x27 64)))) (x705 (x120 (x826 (+ x27 96)))) (x705 (x120 (x826 (+ x27 128)))) (x705 (x120 (x826 (+ x27 160)))) 0) (ite (>= 224 x333) (x372 (x705 (x120 x27)) (x705 (x120 (x826 (+ 32 x27)))) (x705 (x120 (x826 (+ 64 x27)))) (x705 (x120 (x826 (+ x27 96)))) (x705 (x120 (x826 (+ 128 x27)))) (x705 (x120 (x826 (+ 160 x27)))) (x705 (x120 (x826 (+ 192 x27)))) 0) (x705 x129))))))))) x741) (= (x884 196) x467)) (and (=> (not x741) x49) (=> (and x741 (and (= (x861 255 x43) x695) (= (x884 452) x43) (= x579 (= x695 x43)) (= x483 (x884 x78)) (= (x826 (+ 64 x27)) x233) (= x123 (x826 (+ 116 x254))) (= (x826 (+ x27 32)) x874) (= x78 (x826 (+ 32 x123))) (= (x884 x123) x225))) (and (=> (not x579) x49) (=> (and x579 (and (= (x884 484) x147) (= x508 (= x303 x533)) (= (x884 516) x533) (= x303 (x861 4294967295 x533)))) (and (=> (not x508) x49) (=> (and (and (= (x826 (+ 4 x233)) x38) (= x413 (x826 (+ x478 32))) (= x478 (x826 (+ 32 x38))) (= true x212) (= (x884 196) x228)) x508) (and (=> (not x212) x49) (=> (and x212 (and (= (x884 228) x771) (= x113 (x826 (+ x413 32))) (= (x861 4294967295 x771) x220) (= (= x771 x220) x849))) (and (=> (not x849) x49) (=> (and x849 (and (= x1 (x884 260)) (= (x861 4294967295 x1) x427) (= (x826 (+ 32 x113)) x55) (= x17 (= x427 x1)))) (and (=> (not x17) x49) (=> (and x17 (and (= (x884 292) x238) (= x73 (x826 (+ x55 32))) (= (x861 4294967295 x238) x878) (= (= x878 x238) x880))) (and (=> (and (and (= x327 (= x850 x268)) (= (x884 324) x850) (= x145 (x826 (+ x73 32))) (= x268 (x861 4294967295 x850))) x880) (and (=> (and (and (= (= x463 x712) x628) (= x712 (x884 356)) (= x463 (x861 79228162514264337593543950335 x712)) (= x222 (x826 (+ 32 x145)))) x327) (and (=> (and (and (= (x861 1461501637330902918203684832716283019655932542975 x484) x445) (= (x884 388) x484) (= x280 (= x445 x484)) (= x660 (x826 (+ 32 x222)))) x628) (and (=> (not x280) x49) (=> (and x280 (and (= x632 (x826 (+ 32 x660))) (= x266 true) (= (x884 420) x407))) (and (=> (and (and (or (and x620 (and (< x35 4294967296) (= x153 1))) (and (= x429 x153) (not x620))) (and (= (x826 (+ x632 32)) x416) (= (> x429 0) x620))) x266) x154) (=> (not x266) x49))))) (=> (not x628) x49))) (=> (not x327) x49))) (=> (not x880) x49)))))))))))))))))))
(assert (x194 x517))
(assert (= (x355 (x705 (x12 (x826 (+ 64 x745))))) (x12 (x826 (+ 64 x745)))))
(assert (x194 x36))
(assert (=> (>= 10000 x340) (= (x705 x340) (x815 x340))))
(assert (= (x815 17805874995975841540914202342111839520379459829704422454583296818431106115052) (x705 17805874995975841540914202342111839520379459829704422454583296818431106115052)))
(assert (=> (<= (x454 (x826 (+ 192 x518))) 10000) (= (x815 (x454 (x826 (+ x518 192)))) (x705 (x454 (x826 (+ 192 x518)))))))
(assert (x868 1))
(assert (x194 x228))
(assert (x194 x547))
(assert (x194 x604))
(assert (x194 x711))
(assert (= x68 (or x314 x159)))
(assert (= x690 (and x323 x489)))
(assert (x678 (x120 (x826 (+ x27 160)))))
(assert (= (and x809 (not x366)) x126))
(assert (x194 x883))
(assert (x194 x535))
(assert (x194 x612))
(assert (=> (<= x488 10000) (= (x815 x488) (x705 x488))))
(assert (x194 x83))
(assert (x194 x526))
(assert (x194 x747))
(assert (x678 (x12 x745)))
(assert (x678 (x120 (x826 (+ 32 x27)))))
(assert (= (and (not x418) x410) x631))
(assert (x194 x362))
(assert (= (and x90 x266) x56))
(assert (= x594 (=> (and (and (and (= (>= 224 x337) x181) (= (x580 (- x667 x675)) x737) (= (x580 (- x737 32)) x565) (= (x826 (+ 64 x50)) x667) (= x745 (x826 (+ x675 32))) (= x337 (x12 x675))) (and (= (x826 (+ x332 32)) x205) (= x376 (x826 (+ x50 32))) (= x847 (x85 x332)) (= (x826 (+ 64 x770)) x50) (= (x214 x205) x751))) (and (= x426 (x215 x39)) (= x770 (x826 (+ 32 x675))) (= (x580 (- 268435456 x700)) x352) (= x713 (x826 (+ x39 32))) (= x332 (x215 160)) (= (x826 (+ x770 32)) x561) (= x798 (x829 x713)) (= x39 (x215 128)))) (and (=> (and (= 15734828340100255228388097270354557497891140761267446712098462632690385532271 x48) (= x817 (x12 320)) (= x797 (ite (>= 32 x337) (x794 (x705 (x12 x745)) 0) (ite (>= 64 x337) (x46 (x705 (x12 x745)) (x705 (x12 (x826 (+ 32 x745)))) 0) (ite (>= 96 x337) (x549 (x705 (x12 x745)) (x705 (x12 (x826 (+ x745 32)))) (x705 (x12 (x826 (+ 64 x745)))) 0) (ite (>= 128 x337) (x654 (x705 (x12 x745)) (x705 (x12 (x826 (+ 32 x745)))) (x705 (x12 (x826 (+ x745 64)))) (x705 (x12 (x826 (+ x745 96)))) 0) (ite (>= 160 x337) (x456 (x705 (x12 x745)) (x705 (x12 (x826 (+ 32 x745)))) (x705 (x12 (x826 (+ x745 64)))) (x705 (x12 (x826 (+ 96 x745)))) (x705 (x12 (x826 (+ x745 128)))) 0) (ite (<= x337 192) (x103 (x705 (x12 x745)) (x705 (x12 (x826 (+ 32 x745)))) (x705 (x12 (x826 (+ 64 x745)))) (x705 (x12 (x826 (+ 96 x745)))) (x705 (x12 (x826 (+ x745 128)))) (x705 (x12 (x826 (+ x745 160)))) 0) (ite (>= 224 x337) (x372 (x705 (x12 x745)) (x705 (x12 (x826 (+ x745 32)))) (x705 (x12 (x826 (+ x745 64)))) (x705 (x12 (x826 (+ 96 x745)))) (x705 (x12 (x826 (+ x745 128)))) (x705 (x12 (x826 (+ x745 160)))) (x705 (x12 (x826 (+ x745 192)))) 0) (x705 x488))))))))) (= (= 0 (x582 x817 32)) x795)) (and (=> (not x795) x49) (=> (and x795 (and (= x379 (x12 320)) (= (> x562 0) x308) (= (x866 x379 32) x562))) (and (=> (and (= x165 1) (not x308)) x862) (=> (and x308 (= x841 (< 255 x562))) (and (=> x841 x49) (=> (and (and (= (x2 1 x562) x15) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 x15) x95)) (not x841)) (and (=> (and (= x15 x165) (not x95)) x862) (=> x95 x49))))))))) x181))))
(assert (x678 (x12 (x826 (+ 192 x745)))))
(assert (= x802 (or x514 x276)))
(assert (x678 (x454 (x826 (+ x518 96)))))
(assert (=> (>= 10000 (x534 (x826 (+ 192 x769)))) (= (x815 (x534 (x826 (+ 192 x769)))) (x705 (x534 (x826 (+ x769 192)))))))
(assert (= x514 (and x539 x477)))
(assert (x194 x42))
(assert (x32 x358))
(assert (x194 x420))
(assert (x194 x430))
(assert (= x831 (and x579 x246)))
(assert (=> (<= (x12 x745) 10000) (= (x705 (x12 x745)) (x815 (x12 x745)))))
(assert (x194 x392))
(assert (= (x355 (x705 (x780 (x826 (+ 128 x168))))) (x780 (x826 (+ x168 128)))))
(assert (x194 x463))
(assert (x868 x657))
(assert (x194 x854))
(assert (= x203 (and x93 (not x198))))
(assert (x194 x857))
(assert (= 15734828340100255228388097270354557497891140761267446712098462632690385532271 (x355 (x815 15734828340100255228388097270354557497891140761267446712098462632690385532271))))
(assert (x194 x530))
(assert (x194 x730))
(assert (x194 x745))
(assert (x194 x643))
(assert (= (=> (= x592 (= x153 0)) (and (=> x592 x49) (=> (and (and (= (x826 (+ x35 31)) x71) (= (x861 115792089237316195423570985008687907853269984665640564039457584007913129639904 x71) x681) (= (or (> x35 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x35 32))) x807) (= (x826 (+ x233 x681)) x307)) (not x592)) (and (=> (and (and (= (not x97) x437) (= x820 (= x854 (ite x437 1 0))) (= x854 (x408 x233)) (= x97 (= 0 x854))) (not x807)) (and (=> (not x820) x49) (=> (and x820 (= (< 0 x854) x272)) (and (=> (not x272) x49) (=> (and (and (= x338 (x861 4294967295 x241)) (= x267 (= x241 x338)) (= (x884 260) x241)) x272) (and (=> (and (and (= x385 (or (and (= (<= x57 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x624 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x57 x624)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x624) (<= x57 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x57 (x580 (- x694 31))) (= x624 (x884 x21))) x267) (and (=> (and (and (= (x884 x526) x657) (= (< 18446744073709551615 x657) x164) (= x526 (x826 (+ x624 x21)))) x385) (and (=> x164 x49) (=> (and (and (= (or (and (<= x119 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x274 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x274) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119)) (> x119 x274))) x198) (= x119 (x826 (+ 32 x526))) (= (x210 (* x657 32)) x260) (= (x580 (- x312 x260)) x274)) (not x164)) (and (=> (and (and (= (x2 x241 224) x529) (= (< 0 x258) x603) (= x711 (x826 (+ x298 x361))) (= (x210 (* 32 x657)) x156) (= (x386 x307) x258) (= (x210 (* x657 32)) x298) (= (x826 (+ 32 x156)) x685) (= x390 (x826 (+ x685 x307))) (= x294 (x826 (+ x21 32))) (= x662 (x826 (+ x885 4))) (= (x884 x294) x157) (= x226 (x884 x247)) (= x361 (x826 (+ x307 32))) (= (x826 (+ x390 32)) x885) (= (x826 (+ x294 32)) x247)) (not x198)) (and (=> (and (and (= x726 0) (= x662 x540) (= x261 x361)) (not x603)) x647) (=> (and x603 (and (= x642 (x826 (+ 32 x361))) (= (> x258 1) x125) (= x111 (x386 x361)) (= (x826 (+ 32 x662)) x253))) (and (=> (and (not x125) (and (= 1 x726) (= x540 x253) (= x261 x642))) x647) (=> (and x125 (and (= (x826 (+ 32 x253)) x825) (= (x646 x642) x839) (= x411 (> x258 2)) (= (x826 (+ x642 32)) x552))) (and (=> (and x411 (and (= x697 (x670 x552)) (= (x826 (+ x552 32)) x234) (= (x826 (+ 32 x825)) x455) (= x470 (> x258 3)))) (and (=> x470 x625) (=> (and (and (= x540 x455) (= x234 x261) (= 3 x726)) (not x470)) x647))) (=> (and (not x411) (and (= x825 x540) (= 2 x726) (= x261 x552))) x647))))))) (=> x198 x49))))) (=> (not x385) x49))) (=> (not x267) x49))))))) (=> x807 x49))))) x154))
(assert (x194 x564))
(assert (not x651))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x241 4294967296) (* (x866 x241 4294967296) 4294967296)) x241)) (x414 x241 4294967296) (x304 x241 4294967296) (x476 x241 4294967296)))
(assert (= (x815 79228162514264337593543950335) (x705 79228162514264337593543950335)))
(assert (x194 x360))
(assert (and (x644 32 x258) (= (x775 32 x258) (* x258 32)) (x270 32 x258) (x851 32 x258) (x434 32 x258) (x394 32 x258) (and (= (- (* x258 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x258)) (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x258)) (= (x775 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x258 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x258 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x258 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x775 32 (- x258 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x258 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)))))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x850 4294967296) (* (x866 x850 4294967296) 4294967296)) x850)) (x414 x850 4294967296) (x304 x850 4294967296) (x476 x850 4294967296)))
(assert (=> (<= (x454 (x826 (+ x518 32))) 10000) (= (x815 (x454 (x826 (+ x518 32)))) (x705 (x454 (x826 (+ x518 32)))))))
(assert (=> (>= 10000 (x240 (x826 (+ 96 x128)))) (= (x815 (x240 (x826 (+ 96 x128)))) (x705 (x240 (x826 (+ x128 96)))))))
(assert (x194 x512))
(assert (and (=> (> 4294967296 0) (= (+ (x582 x533 4294967296) (* (x866 x533 4294967296) 4294967296)) x533)) (x414 x533 4294967296) (x304 x533 4294967296) (x476 x533 4294967296)))
(assert (x194 x52))
(assert (= x693 (and x208 (not x72))))
(assert (x824 x238))
(assert (x678 (x780 (x826 (+ 96 x168)))))
(assert (= x184 (and x842 x707)))
(assert (x194 x185))
(assert (= (x355 (x815 4294967296)) 4294967296))
(assert (= x388 (and x184 (not x257))))
(assert (= 17805874995975841540914202342111839520379459829704422454583296818431106115052 (x355 (x815 17805874995975841540914202342111839520379459829704422454583296818431106115052))))
(assert (x194 x426))
(assert (x60 x516))
(assert (= x286 (and x682 x841)))
(assert (x194 x590))
(assert (and (=> (> 32 0) (= (+ (x582 x5 32) (* (x866 x5 32) 32)) x5)) (x414 x5 32) (x304 x5 32) (x476 x5 32)))
(assert (= x567 (and x315 x820)))
(assert (= 2262799685 (x355 (x815 2262799685))))
(assert (x824 x516))
(assert (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= (+ (x582 x291 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x866 x291 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x291)) (x414 x291 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x304 x291 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x476 x291 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x678 (x534 (x826 (+ x769 128)))))
(assert (= (x355 (x705 (x12 x745))) (x12 x745)))
(assert (x194 x37))
(assert (x194 x269))
(assert (x194 x283))
(assert (x194 x766))
(assert (= (and x567 (not x272)) x668))
(assert (x194 x706))
(assert (x824 x817))
(assert (x194 x353))
(assert (x678 (x240 (x826 (+ x128 32)))))
(assert (x194 x168))
(assert (= x421 (and x492 x470)))
(assert (= x177 (and x357 (not x876))))
(check-sat)
(exit)
