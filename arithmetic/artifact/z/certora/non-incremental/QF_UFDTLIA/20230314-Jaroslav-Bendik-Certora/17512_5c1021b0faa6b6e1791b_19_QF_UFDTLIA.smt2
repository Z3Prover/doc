(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x213 0)) (((x282 (x146 Int)) (x378 (x271 x213) (x73 Int)) (x409 (x297 x213) (x14 x213) (x133 Int)))))
(declare-fun x232 () Int)
(declare-fun x28 () Bool)
(declare-fun x255 () Int)
(declare-fun x52 () Int)
(declare-fun x325 () Int)
(declare-fun x241 () Int)
(declare-fun x215 (x213) Int)
(declare-fun x305 () x213)
(declare-fun x240 () Int)
(declare-fun x284 () Int)
(declare-fun x342 () Bool)
(declare-fun x174 () Int)
(declare-fun x256 () Bool)
(declare-fun x180 () Int)
(declare-fun x302 () Int)
(declare-fun x167 () Int)
(declare-fun x321 (Int Int) Int)
(declare-fun x373 () Int)
(declare-fun x149 () Bool)
(declare-fun x238 () Int)
(declare-fun x9 () Bool)
(declare-fun x27 () Bool)
(declare-fun x116 () Int)
(declare-fun x386 () Int)
(declare-fun x31 () x213)
(declare-fun x212 () Int)
(declare-fun x260 () Bool)
(declare-fun x204 () Bool)
(declare-fun x233 () Int)
(declare-fun x214 () Int)
(declare-fun x46 () Int)
(declare-fun x157 () Bool)
(declare-fun x158 () Int)
(declare-fun x419 () Int)
(declare-fun x105 () Bool)
(declare-fun x314 () Int)
(declare-fun x108 () Int)
(declare-fun x440 (Int) Int)
(declare-fun x286 () Int)
(declare-fun x203 () Int)
(declare-fun x312 () Bool)
(declare-fun x190 () Bool)
(declare-fun x1 (Int) Int)
(declare-fun x420 () Int)
(declare-fun x25 () Bool)
(declare-fun x410 () Bool)
(declare-fun x230 () Bool)
(declare-fun x113 () Int)
(declare-fun x459 () Int)
(declare-fun x329 () Int)
(declare-fun x239 () Int)
(declare-fun x107 () Int)
(declare-fun x475 () Int)
(declare-fun x332 () Int)
(declare-fun x141 () Bool)
(declare-fun x221 () Int)
(declare-fun x91 () Int)
(declare-fun x62 () Int)
(declare-fun x22 () Int)
(declare-fun x224 () Int)
(declare-fun x357 () Int)
(declare-fun x359 () Int)
(declare-fun x345 () Bool)
(declare-fun x63 (Int) Int)
(declare-fun x36 (Int) Int)
(declare-fun x267 () Int)
(declare-fun x350 () Int)
(declare-fun x394 () Int)
(declare-fun x117 () Int)
(declare-fun x310 () Bool)
(declare-fun x307 () Int)
(declare-fun x482 () Int)
(declare-fun x33 () Bool)
(declare-fun x443 () Int)
(declare-fun x136 () Bool)
(declare-fun x244 () Int)
(declare-fun x408 () Int)
(declare-fun x401 () Int)
(declare-fun x211 () Bool)
(declare-fun x94 () Int)
(declare-fun x296 () Bool)
(declare-fun x385 () Int)
(declare-fun x335 () Int)
(declare-fun x100 () Int)
(declare-fun x118 () Int)
(declare-fun x186 () Bool)
(declare-fun x434 () Int)
(declare-fun x431 () Int)
(declare-fun x323 () Bool)
(declare-fun x293 () Int)
(declare-fun x356 (Int Int) Int)
(declare-fun x425 () Int)
(declare-fun x6 () Int)
(declare-fun x355 (x213) Int)
(declare-fun x216 () Int)
(declare-fun x388 () Int)
(declare-fun x58 () Int)
(declare-fun x35 () Int)
(declare-fun x254 () Bool)
(declare-fun x143 (Int) x213)
(declare-fun x452 () Bool)
(declare-fun x13 () Bool)
(declare-fun x283 () Int)
(declare-fun x438 () Int)
(declare-fun x79 () Int)
(declare-fun x304 () Int)
(declare-fun x53 () Bool)
(declare-fun x295 () Int)
(declare-fun x468 () Int)
(declare-fun x142 () Int)
(declare-fun x123 () Bool)
(declare-fun x109 () x213)
(declare-fun x389 () Int)
(declare-fun x32 () Int)
(declare-fun x399 () Int)
(declare-fun x279 () Bool)
(declare-fun x392 () Bool)
(declare-fun x135 () Int)
(declare-fun x278 () Int)
(declare-fun x338 () x213)
(declare-fun x182 () Int)
(declare-fun x354 () Bool)
(declare-fun x210 () Int)
(declare-fun x23 () Int)
(declare-fun x50 () Int)
(declare-fun x115 () Int)
(declare-fun x59 () Int)
(declare-fun x441 () x213)
(declare-fun x15 () Int)
(declare-fun x292 () Int)
(declare-fun x472 () Int)
(declare-fun x430 () Int)
(declare-fun x352 () Int)
(declare-fun x81 () Int)
(declare-fun x188 () Int)
(declare-fun x144 () Bool)
(declare-fun x236 () Int)
(declare-fun x436 () Int)
(declare-fun x412 () Bool)
(declare-fun x474 () Int)
(declare-fun x209 () x213)
(declare-fun x39 () Int)
(declare-fun x173 () Int)
(declare-fun x402 () Int)
(declare-fun x469 () Bool)
(declare-fun x266 () x213)
(declare-fun x265 () Int)
(declare-fun x197 () Bool)
(declare-fun x380 () Int)
(declare-fun x96 () Bool)
(declare-fun x400 () Int)
(declare-fun x318 () Int)
(declare-fun x340 () Int)
(declare-fun x187 () Int)
(declare-fun x375 () Bool)
(declare-fun x226 () Int)
(declare-fun x12 () Int)
(declare-fun x145 () Int)
(declare-fun x151 () Int)
(declare-fun x479 () Int)
(declare-fun x471 () Bool)
(declare-fun x169 () Int)
(declare-fun x154 () Bool)
(declare-fun x456 () Int)
(declare-fun x43 () Int)
(declare-fun x423 () Int)
(declare-fun x217 () Int)
(declare-fun x88 (x213) Int)
(declare-fun x134 () Int)
(declare-fun x106 () Int)
(declare-fun x262 () Int)
(declare-fun x163 () Int)
(declare-fun x442 () Int)
(declare-fun x103 () Int)
(declare-fun x242 () Int)
(declare-fun x433 () Int)
(declare-fun x237 () Int)
(declare-fun x89 () Int)
(declare-fun x377 () Int)
(declare-fun x223 () Int)
(declare-fun x391 () Int)
(declare-fun x202 () Int)
(declare-fun x68 () Bool)
(declare-fun x269 (Int) Int)
(declare-fun x445 () Int)
(declare-fun x319 () Int)
(declare-fun x333 () Int)
(declare-fun x60 () Int)
(declare-fun x234 () Bool)
(declare-fun x379 () Bool)
(declare-fun x192 () x213)
(declare-fun x82 () Bool)
(declare-fun x57 () Bool)
(declare-fun x326 () Bool)
(declare-fun x222 () Int)
(declare-fun x381 () x213)
(declare-fun x358 () Int)
(declare-fun x320 () Int)
(declare-fun x147 () Int)
(declare-fun x253 () Int)
(declare-fun x455 () Int)
(declare-fun x200 () Int)
(declare-fun x29 () Int)
(declare-fun x263 () Int)
(declare-fun x299 () Int)
(declare-fun x277 () Int)
(declare-fun x439 () Int)
(declare-fun x37 () Int)
(declare-fun x178 () Int)
(declare-fun x428 () Int)
(declare-fun x418 () Bool)
(declare-fun x111 () x213)
(declare-fun x120 () Int)
(declare-fun x121 () Int)
(declare-fun x444 () Bool)
(declare-fun x303 () Int)
(declare-fun x316 () Int)
(declare-fun x153 () Int)
(declare-fun x417 () Int)
(declare-fun x189 () x213)
(declare-fun x362 (Int) Int)
(declare-fun x77 () Int)
(declare-fun x125 () Bool)
(declare-fun x70 () Int)
(declare-fun x99 (Int) Int)
(declare-fun x264 () Int)
(declare-fun x390 () Int)
(declare-fun x172 () Int)
(declare-fun x344 () Int)
(declare-fun x407 () x213)
(declare-fun x138 () Bool)
(declare-fun x54 () Int)
(declare-fun x481 (x213) Int)
(declare-fun x384 () Int)
(declare-fun x72 () Int)
(declare-fun x41 () Bool)
(declare-fun x405 () Int)
(declare-fun x148 () Int)
(declare-fun x341 () Bool)
(declare-fun x5 () x213)
(declare-fun x372 () Int)
(declare-fun x368 () x213)
(declare-fun x324 () Int)
(declare-fun x129 () Int)
(declare-fun x374 () Bool)
(declare-fun x421 () Bool)
(declare-fun x480 () Bool)
(declare-fun x164 () Int)
(declare-fun x86 () Int)
(declare-fun x4 () Int)
(declare-fun x247 () Int)
(declare-fun x124 () Bool)
(declare-fun x353 () Int)
(declare-fun x300 (Int Int) Int)
(declare-fun x453 () Int)
(declare-fun x228 () Int)
(declare-fun x195 () Int)
(declare-fun x360 () Int)
(declare-fun x298 () Int)
(declare-fun x272 () Int)
(declare-fun x470 () x213)
(declare-fun x397 () Int)
(declare-fun x313 () Bool)
(declare-fun x367 () Bool)
(declare-fun x317 () Int)
(declare-fun x84 () Bool)
(declare-fun x460 () Int)
(declare-fun x16 () Bool)
(declare-fun x131 () Int)
(declare-fun x201 () Bool)
(declare-fun x331 () Int)
(declare-fun x185 (Int) Int)
(declare-fun x170 () Int)
(declare-fun x383 () Bool)
(declare-fun x337 () Int)
(declare-fun x93 () Int)
(declare-fun x74 () Int)
(declare-fun x122 () Int)
(declare-fun x289 () Int)
(declare-fun x285 () Int)
(declare-fun x171 () Int)
(declare-fun x446 () Int)
(declare-fun x259 () x213)
(declare-fun x205 () Int)
(declare-fun x155 () Int)
(declare-fun x97 () Int)
(declare-fun x219 () Int)
(declare-fun x45 () Int)
(declare-fun x429 () Int)
(declare-fun x411 () Int)
(declare-fun x175 () Bool)
(declare-fun x30 () Int)
(declare-fun x346 () Int)
(declare-fun x165 () Int)
(declare-fun x21 () Bool)
(declare-fun x127 () Int)
(declare-fun x199 () Int)
(declare-fun x336 () Int)
(declare-fun x343 () Int)
(declare-fun x478 () Int)
(declare-fun x424 () Int)
(declare-fun x196 () Int)
(declare-fun x38 () x213)
(declare-fun x287 () Bool)
(declare-fun x415 () Int)
(declare-fun x26 () Bool)
(declare-fun x309 () Int)
(declare-fun x112 () Int)
(declare-fun x76 () Int)
(declare-fun x83 () Int)
(declare-fun x398 () Int)
(declare-fun x220 () Bool)
(declare-fun x64 () Int)
(declare-fun x11 () Int)
(declare-fun x275 () Int)
(declare-fun x261 () Int)
(declare-fun x61 () Int)
(declare-fun x71 () Bool)
(declare-fun x280 () Bool)
(declare-fun x361 () Bool)
(declare-fun x229 () Int)
(declare-fun x366 () Int)
(declare-fun x365 () Int)
(declare-fun x48 () Int)
(declare-fun x294 () Int)
(declare-fun x376 () Int)
(declare-fun x276 () Int)
(declare-fun x473 () Int)
(declare-fun x128 () Int)
(declare-fun x274 () Int)
(declare-fun x75 () Bool)
(declare-fun x246 () Bool)
(declare-fun x290 () Int)
(declare-fun x416 () Int)
(declare-fun x90 () Int)
(declare-fun x447 () Int)
(declare-fun x466 () Int)
(declare-fun x463 () Bool)
(declare-fun x231 () Bool)
(declare-fun x334 () Int)
(declare-fun x248 () Int)
(declare-fun x87 () Int)
(declare-fun x235 () Int)
(declare-fun x102 () Bool)
(declare-fun x78 () Int)
(declare-fun x152 () Bool)
(declare-fun x330 () x213)
(declare-fun x393 () Int)
(declare-fun x311 () Bool)
(declare-fun x137 () Int)
(declare-fun x80 () Bool)
(declare-fun x162 (x213) Int)
(declare-fun x198 () Int)
(declare-fun x98 (Int Int) Int)
(declare-fun x249 () Int)
(declare-fun x351 () Int)
(declare-fun x140 () Int)
(declare-fun x207 () Bool)
(declare-fun x273 (Int Int) Int)
(declare-fun x227 () Int)
(declare-fun x168 () Bool)
(declare-fun x191 () Bool)
(declare-fun x179 () Bool)
(declare-fun x449 () Bool)
(declare-fun x208 () Int)
(declare-fun x322 () Int)
(define-fun x396 ((x213 x213) (x225 Int)) x213 (ite ((_ is x378) x213) (x378 (x271 x213) (+ (x73 x213) x225)) (ite ((_ is x409) x213) (x409 (x297 x213) (x14 x213) (+ (x133 x213) x225)) (x282 (+ (x146 x213) x225)))))
(define-fun x387 ((x7 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x7) (<= 0 x7)) x7 (- x7 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x406 ((x7 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x7) (> 0 x7)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x7) x7))
(define-fun x183 ((x7 Int)) Int (ite (and (< x7 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x7 0)) x7 (ite (and (< x7 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x7 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x7 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x7) (< x7 0)) (+ x7 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x321 x7 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x306 ((x119 Int)) Bool (and (< x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x119)))
(define-fun x55 ((x119 Int) (x139 Int)) Bool (=> (and (> x139 0) (> x119 0)) (and (<= 0 (x98 x119 x139)) (>= x119 (x98 x119 x139)))))
(define-fun x47 ((x119 Int) (x139 Int)) Bool (=> (and (and (<= 1 x139) (< x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (< x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x119))) (and (<= 0 (x98 x119 x139)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x98 x119 x139)))))
(define-fun x457 ((x119 Int) (x139 Int)) Bool (=> (and (< x139 x119) (> x139 1)) (< (x98 x119 x139) x119)))
(define-fun x193 ((x119 Int) (x139 Int)) Bool (=> (and (> x119 0) (> x139 0)) (= (< x119 x139) (= (x98 x119 x139) 0))))
(define-fun x461 ((x119 Int)) Bool (= 0 (x98 0 x119)))
(define-fun x176 ((x119 Int)) Bool (= (x98 x119 1) x119))
(define-fun x132 ((x119 Int)) Bool (=> (not (= x119 0)) (= 1 (x98 x119 x119))))
(define-fun x422 ((x119 Int)) Bool (and (x176 x119) (x132 x119) (x461 x119)))
(define-fun x454 ((x119 Int) (x139 Int)) Bool (=> (and (> x119 0) (< 0 x139)) (and (< (- x119 x139) (x300 (x98 x119 x139) x139)) (<= (x300 (x98 x119 x139) x139) x119))))
(define-fun x404 ((x119 Int) (x139 Int)) Bool (and (x457 x119 x139) (x55 x119 x139) (x454 x119 x139) (x47 x119 x139) (x193 x119 x139)))
(define-fun x252 ((x119 Int) (x139 Int)) Bool (= (x300 x139 x119) (x300 x119 x139)))
(define-fun x243 ((x119 Int) (x139 Int)) Bool (and (=> (and (> x139 0) (> x119 0)) (> (x300 x119 x139) 0)) (=> (and (< x119 0) (< x139 0)) (> (x300 x119 x139) 0)) (=> (and (< 0 x119) (< x139 0)) (> 0 (x300 x119 x139))) (=> (and (< 0 x139) (< x119 0)) (> 0 (x300 x119 x139)))))
(define-fun x159 ((x119 Int) (x139 Int)) Bool (=> (and (> x139 0) (< 0 x119)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x300 x119 x139)) (= (x98 (x183 (x300 x119 x139)) x119) x139))))
(define-fun x2 ((x119 Int) (x139 Int)) Bool (=> (and (not (= x139 0)) (not (= x119 0))) (and (= x119 (x98 (x300 x119 x139) x139)) (= x139 (x98 (x300 x119 x139) x119)))))
(define-fun x8 ((x119 Int) (x139 Int)) Bool (=> (and (> x139 0) (> x119 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x300 x119 x139)) (> x139 (x98 115792089237316195423570985008687907853269984665640564039457584007913129639935 x119)))))
(define-fun x281 ((x119 Int) (x139 Int)) Bool (and (= (x183 (x300 x119 (- x139 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x183 (x300 x119 x139))) (= (x183 (x300 x119 x139)) (x183 (x300 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x183 (x300 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) x139)) (x183 (x300 x119 x139)))))
(define-fun x288 ((x119 Int) (x139 Int)) Bool (and (=> (and (and (> x139 0) (<= x139 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x119 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119))) (= (>= (x300 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) x139) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x98 57896044618658097711785492504343953926634992332820282019728792003956564819968 x139) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x119)))) (=> (and (and (<= x139 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x139)) (and (<= x119 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x119 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x300 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x119) (x98 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x139))))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x139) (<= x139 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x119) (> x119 0))) (= (>= (x300 x119 (- x139 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= (x98 57896044618658097711785492504343953926634992332820282019728792003956564819968 x119) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x139)))) (=> (and (and (<= x139 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x139 0)) (and (< 0 x119) (<= x119 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x300 x119 x139)) (>= (x98 57896044618658097711785492504343953926634992332820282019728792003956564819967 x139) x119)))))
(define-fun x166 ((x119 Int) (x139 Int)) Bool (and (x243 x119 x139) (x252 x119 x139) (x2 x119 x139) (x8 x119 x139) (x288 x119 x139) (x159 x119 x139) (x281 x119 x139)))
(define-fun x161 ((x119 Int)) Bool (and (= (x300 x119 0) 0) (= (x300 0 x119) 0)))
(define-fun x101 ((x119 Int)) Bool (and (= (x300 x119 1) x119) (= x119 (x300 1 x119))))
(define-fun x49 ((x119 Int)) Bool (and (x161 x119) (x101 x119)))
(define-fun x42 ((x119 Int)) Bool (and (= (x356 115792089237316195423570985008687907853269984665640564039457584007913129639935 x119) x119) (= x119 (x356 x119 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x126 ((x119 Int)) Bool (and (= (x356 x119 0) 0) (= (x356 0 x119) 0)))
(define-fun x435 ((x119 Int)) Bool (= x119 (x356 x119 x119)))
(define-fun x19 ((x119 Int)) Bool (and (x126 x119) (x42 x119) (x435 x119)))
(define-fun x437 ((x119 Int) (x139 Int)) Bool (= (x356 x119 x139) (x356 x139 x119)))
(define-fun x458 ((x119 Int) (x139 Int)) Bool (and (>= (x356 x119 x139) 0) (=> (>= x119 0) (>= x119 (x356 x119 x139))) (=> (>= x139 0) (>= x139 (x356 x119 x139)))))
(define-fun x56 ((x119 Int) (x139 Int)) Bool (and (x437 x119 x139) (x458 x119 x139)))
(define-fun x160 ((x119 Int)) Bool (= (x356 x119 1461501637330902918203684832716283019655932542975) (x321 x119 1461501637330902918203684832716283019655932542976)))
(define-fun x301 ((x119 Int)) Bool (and (x56 x119 1461501637330902918203684832716283019655932542975) (x160 x119)))
(define-fun x184 ((x119 Int) (x139 Int)) Bool (and (>= (x321 x119 x139) 0) (< (x321 x119 x139) x139)))
(define-fun x51 ((x119 Int) (x139 Int)) Bool (=> (and (>= x119 0) (< 0 x139)) (= (< x119 x139) (= x119 (x321 x119 x139)))))
(define-fun x18 ((x119 Int) (x139 Int)) Bool (=> (and (and (> (+ x139 x139) x119) (<= x139 x119)) (< 0 x139)) (= (- x119 x139) (x321 x119 x139))))
(define-fun x467 ((x119 Int)) Bool (= 0 (x321 0 x119)))
(define-fun x450 ((x119 Int)) Bool (= 0 (x321 x119 1)))
(define-fun x477 ((x119 Int)) Bool (= (x321 x119 x119) 0))
(define-fun x24 ((x119 Int)) Bool (and (x450 x119) (x477 x119) (x467 x119)))
(define-fun x414 ((x451 Int)) Int (ite (= x451 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x269 x451)))
(define-fun x206 ((x451 Int)) Int (ite (= 132 x451) x94 (x414 x451)))
(define-fun x104 ((x451 Int)) Int (ite (= 128 x451) x93 (x206 x451)))
(define-fun x432 ((x451 Int)) Int (ite (= 128 x451) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x185 x451)))
(define-fun x245 ((x451 Int)) Int (ite (= 132 x451) x94 (x432 x451)))
(define-fun x17 ((x451 Int)) Int (ite (= 128 x451) x93 (x245 x451)))
(define-fun x403 ((x451 x213)) Int (ite (= x451 x5) 1000000000000000000000000000 (x88 x451)))
(define-fun x257 ((x451 x213)) Int (ite (= x381 x451) x35 (x215 x451)))
(define-fun x382 ((x451 Int)) Int (ite (= 320 x451) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x362 x451)))
(define-fun x3 ((x451 Int)) Int (ite (= x451 324) x360 (x382 x451)))
(define-fun x177 ((x451 Int)) Int (ite (= 356 x451) x284 (x3 x451)))
(define-fun x370 ((x451 Int)) Int (ite (= x451 388) x89 (x177 x451)))
(define-fun x308 ((x451 Int)) Int (ite x186 (x362 x451) (x370 x451)))
(define-fun x85 ((x451 Int)) Int (ite (= x451 320) x459 (x308 x451)))
(define-fun x448 ((x451 Int)) Int (ite (= 320 x451) x459 (x85 x451)))
(define-fun x465 ((x451 Int)) Int (ite (= 352 x451) x358 (x448 x451)))
(define-fun x464 ((x451 Int)) Int (ite (= x451 384) 1000000000000000000000000000 (x465 x451)))
(define-fun x194 ((x451 Int)) Int (ite (= 320 x451) (ite x412 1 0) (x464 x451)))
(define-fun x10 ((x451 x213)) Int (ite (= x209 x451) 1000000000000000000000000000 (x403 x451)))
(define-fun x363 ((x451 x213)) Int (ite (= x368 x451) x226 (x257 x451)))
(define-fun x218 ((x451 Int)) Int (ite (= x451 320) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x99 x451)))
(define-fun x371 ((x451 Int)) Int (ite (= x451 324) x385 (x218 x451)))
(define-fun x328 ((x451 Int)) Int (ite (= 356 x451) x428 (x371 x451)))
(define-fun x427 ((x451 Int)) Int (ite (= 388 x451) x153 (x328 x451)))
(define-fun x40 ((x451 Int)) Int (ite x480 (x99 x451) (x427 x451)))
(define-fun x92 ((x451 Int)) Int (ite (= x451 320) x46 (x40 x451)))
(define-fun x20 ((x451 Int)) Int (ite (= x451 320) x46 (x92 x451)))
(define-fun x251 ((x451 Int)) Int (ite (= 352 x451) x340 (x20 x451)))
(define-fun x476 ((x451 Int)) Int (ite (= 384 x451) 1000000000000000000000000000 (x251 x451)))
(define-fun x315 ((x451 Int)) Int (ite (= 320 x451) (ite x296 1 0) (x476 x451)))
(define-fun x270 ((x451 Int)) Int (ite (= 128 x451) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x1 x451)))
(define-fun x69 ((x451 Int)) Int (ite (= x451 132) x94 (x270 x451)))
(define-fun x369 ((x451 Int)) Int (ite (= 128 x451) x93 (x69 x451)))
(define-fun x181 ((x451 x213)) Int (ite (= x330 x451) x151 (x363 x451)))
(define-fun x291 ((x451 Int)) Int (ite (= 320 x451) 22402283082756182618670880521465619040657731284550890770856599233457073160192 (x63 x451)))
(define-fun x413 ((x451 Int)) Int (ite (= x451 324) x224 (x291 x451)))
(define-fun x339 ((x451 Int)) Int (ite (= x451 356) x293 (x413 x451)))
(define-fun x347 ((x451 Int)) Int (ite (= x451 388) x79 (x339 x451)))
(define-fun x395 ((x451 Int)) Int (ite x361 (x63 x451) (x347 x451)))
(define-fun x44 ((x451 Int)) Int (ite (= x451 320) x122 (x395 x451)))
(define-fun x110 ((x451 Int)) Int (ite (= 320 x451) x122 (x44 x451)))
(define-fun x364 ((x451 Int)) Int (ite (= 352 x451) x128 (x110 x451)))
(define-fun x66 ((x451 Int)) Int (ite (= x451 384) 1000000000000000000000000000 (x364 x451)))
(define-fun x114 ((x451 Int)) Int (ite (= x451 320) (ite x27 1 0) (x66 x451)))
(define-fun x258 ((x451 Int)) Int (ite (= x451 128) 94699471215667416670508682402181198833950827816622411988269365108481485438976 (x440 x451)))
(define-fun x150 ((x451 Int)) Int (ite (= x451 132) x94 (x258 x451)))
(define-fun x348 ((x451 Int)) Int (ite (= x451 128) x93 (x150 x451)))
(define-fun x268 ((x119 Int) (x139 Int) (x462 Int) (x426 Int)) Bool (=> (and (>= x139 0) (>= x462 x119) (>= x119 0) (>= x426 x139)) (>= (x300 x462 x426) (x300 x119 x139))))
(define-fun x67 ((x119 Int) (x139 Int) (x462 Int) (x426 Int)) Bool (=> (= x119 x462) (= (- (x300 x119 x139) (x300 x462 x426)) (x300 x119 (- x139 x426)))))
(define-fun x65 ((x119 Int)) Bool (=> (and (not (= x119 115792089237316195423570985008687907853269984665640064039457584007913129639935)) (not (= x119 3607235850)) (not (= 826074471 x119)) (not (= 1889567281 x119)) (not (= x119 1000000000000000000000000000)) (not (= x119 2113256763)) (not (= x119 340282366920938463463374607431768211456)) (not (= x119 22402283082756182618670880521465619040657731284550890770856599233457073160192)) (not (= x119 340282366920938463463374607431768211455)) (not (= x119 115792089237316195423570985008687907853269984665640)) (not (= x119 1461501637330902918203684832716283019655932542975)) (not (= x119 1865579259)) (not (= x119 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x119 94699471215667416670508682402181198833950827816622411988269365108481485438976)) (not (= x119 500000000000000000000000000)) (not (= x119 1461501637330902918203684832716283019655932542976)) (> x119 10000) (not (= 3018967357 x119))) (not ((_ is x282) (x143 x119)))))
(assert (x306 x242))
(assert (x49 (- x309 x155)))
(assert (x67 x248 x61 x242 x366))
(assert (x306 x353))
(assert (= (x282 1461501637330902918203684832716283019655932542975) (x143 1461501637330902918203684832716283019655932542975)))
(assert (x306 x293))
(assert (x306 x86))
(assert (x268 x275 x87 x140 x155))
(assert (x306 x319))
(assert (= 3607235850 (x355 (x282 3607235850))))
(assert (x268 x309 x276 x61 x248))
(assert (x49 (- x424 x248)))
(assert (x67 x248 x61 x322 x115))
(assert (x67 x276 x309 x366 x242))
(assert (x166 x61 (- x248 x87)))
(assert (x166 x242 (- x366 x424)))
(assert (x67 x275 x87 x242 x366))
(assert (x67 x424 x64 x276 x309))
(assert (x306 x276))
(assert (x268 x322 x115 x140 x155))
(assert (x166 x366 (- x242 x61)))
(assert (x67 x309 x276 x366 x242))
(assert (x49 (- x366 x424)))
(assert (x49 (- x424 x309)))
(assert (= (x282 1461501637330902918203684832716283019655932542976) (x143 1461501637330902918203684832716283019655932542976)))
(assert (x166 x366 (- x242 x64)))
(assert (x306 x187))
(assert (x306 x93))
(assert (x67 x424 x64 x275 x87))
(assert (x268 x309 x276 x366 x242))
(assert (x268 x64 x424 x140 x155))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x155))
(assert (x306 x97))
(assert (= (and x57 (not x16)) x138))
(assert (x67 x140 x155 x275 x87))
(assert (x268 x140 x155 x275 x87))
(assert (x306 x32))
(assert (x49 (- x275 x366)))
(assert (x306 x264))
(assert (x67 x248 x61 x424 x64))
(assert (x166 x424 (- x64 x140)))
(assert (x166 x276 (- x309 x140)))
(assert (x306 x115))
(assert (x24 x23))
(assert (x268 x155 x140 x275 x87))
(assert (x67 x309 x276 x64 x424))
(assert (x268 x61 x248 x322 x115))
(assert (x49 (- x366 x64)))
(assert (x268 x140 x155 x64 x424))
(assert (x422 x276))
(assert (x268 x87 x275 x61 x248))
(assert (x67 x140 x155 x366 x242))
(assert (x166 x322 (- x115 x248)))
(assert (x306 x430))
(assert (x49 x140))
(assert (x49 (- x140 x322)))
(assert (= (x355 (x143 x385)) x385))
(assert (x166 x64 (- x424 x140)))
(assert (x306 x91))
(assert (x268 x140 x155 x366 x242))
(assert (x166 x64 (- x424 x248)))
(assert (x306 x223))
(assert (x65 x385))
(assert (x306 x460))
(assert (x49 (- x276 x366)))
(assert (x19 x353))
(assert (x306 x358))
(assert (x49 (- x366 x248)))
(assert (x49 (- x64 x155)))
(assert (x306 x180))
(assert (x268 x424 x64 x61 x248))
(assert (x67 x61 x248 x424 x64))
(assert (x306 x237))
(assert (x306 x87))
(assert (x166 x64 (- x424 x115)))
(assert (x306 x236))
(assert (x422 x278))
(assert (x306 x64))
(assert (x268 x61 x248 x64 x424))
(assert (x67 x87 x275 x366 x242))
(assert (x49 (- x64 x242)))
(assert (x49 (- x424 x115)))
(assert (x166 x140 x155))
(assert (x67 x242 x366 x322 x115))
(assert (x306 x108))
(assert (x67 x366 x242 x155 x140))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x424))
(assert (x306 x158))
(assert (x166 x275 (- x87 x140)))
(assert (x49 (- x140 x276)))
(assert (= (x143 1000000000000000000000000000) (x282 1000000000000000000000000000)))
(assert (x422 x180))
(assert (x49 (- x366 x140)))
(assert (x268 x115 x322 x140 x155))
(assert (x166 x276 (- x309 x61)))
(assert (x306 x167))
(assert (x166 x424 (- x64 x155)))
(assert (x166 x424 (- x64 x366)))
(assert (x166 x64 (- x424 x366)))
(assert (x49 x155))
(assert (x306 x346))
(assert (x166 x248 (- x61 x322)))
(assert (x67 x140 x155 x276 x309))
(assert (x306 x117))
(assert (x306 x253))
(assert (x49 (- x115 x424)))
(assert (x166 x115 (- x322 x61)))
(assert (x166 x140 (- x155 x309)))
(assert (x306 x100))
(assert (= (=> (and (and (and (and (>= 340282366920938463463374607431768211455 x151) (> 340282366920938463463374607431768211456 x248) (= (not x105) x21) (>= x373 0) (= (x98 x91 1000000000000000000000000000) x76) (= x375 (= x248 0)) (= (+ x151 x344) x196) (= (x387 (+ x331 500000000000000000000000000)) x240) (>= x293 0) (>= 1461501637330902918203684832716283019655932542975 x224) (= x91 (x387 (+ 500000000000000000000000000 x446))) (= x136 x310) (= x310 (not x21)) (< (+ x79 x29) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x86 1461501637330902918203684832716283019655932542975) (< (+ x293 x29) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x135 x453) (> x346 0) (= (not x383) x256) (> x112 0) (not (= 0 x29)) (not (> x11 x76)) (= (x183 (x300 x61 x248)) x331) (= x383 (> x61 x438)) (= 3018967357 x212) (= (x409 (x143 x224) (x282 52) 0) x330) (= x128 (x406 (- x76 x11))) (= x151 (+ x6 x262)) (> 3607235850 x212) (= (< 115792089237316195423570985008687907853269984665640 x203) x105) (<= x445 340282366920938463463374607431768211455) (= (x183 (* x61 1000000000000000000000000000)) x446) (= x174 0) (= x32 0) (= (x409 (x143 x224) (x282 52) 0) x266) (<= x235 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x54) (= x54 x23) (= (x356 1461501637330902918203684832716283019655932542975 x353) x108) (< 0 x472) (= x79 x6) (= x373 x453) (= x112 (x162 (x143 x324))) (= x48 1000000000000000000000000000) (= x438 (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x248)) (>= x248 0) (= x61 (x363 x111)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x293) (= (x387 (+ x393 x447)) x203) (> 340282366920938463463374607431768211456 x79) (not (< x212 3018967357)) (= x29 x262) (>= 1461501637330902918203684832716283019655932542975 x219) (= x25 (not x13)) (>= 340282366920938463463374607431768211455 x248) (= (< 115792089237316195423570985008687907853269984665640 x61) x13) (= x123 (= x317 x263)) (>= x61 0) (= (x356 1461501637330902918203684832716283019655932542975 x353) x482) (>= x86 0) (= x472 (ite x191 1 0)) (= x341 x25) (= (+ x81 x90) x478) x123 (= x317 (- x196 x445)) (<= x373 1461501637330902918203684832716283019655932542975) (= x81 x293) (<= x79 340282366920938463463374607431768211455) (= (x387 (+ x147 500000000000000000000000000)) x278) (= x108 x316) (> 340282366920938463463374607431768211456 x61) (= x11 (x98 x240 1000000000000000000000000000)) (= x346 (ite x341 1 0)) (= x289 x388) (= x29 (x98 x278 1000000000000000000000000000)) (= x219 x329) (= x147 (x183 (* 1000000000000000000000000000 x203))) (= (x363 x266) x79) (= x447 x113) (<= 0 x79) (<= 0 x445) (= (or x256 x375) x191) (= (x356 1461501637330902918203684832716283019655932542975 x23) x316) (= x277 x224) (= x248 (x10 x192)) (= x221 x393) (= (= x235 0) x33) (= x244 (x356 1461501637330902918203684832716283019655932542975 x23)) (>= 340282366920938463463374607431768211455 x61) (> 1461501637330902918203684832716283019655932542976 x235) (= x192 (x409 (x143 x224) (x282 52) 0)) (not (> x29 340282366920938463463374607431768211455)) (= x482 x244) (<= 0 x54) (= x359 x32) (= x202 1000000000000000000000000000) (= (x409 (x143 x224) (x282 52) 0) x111) (= x174 (ite x136 1 0)) (= x29 x90) (<= 0 x235) (= (x363 x330) x445) (= x253 x199) (not (< x212 2113256763))) (or x33 (and (not x33) (and (= x333 (x162 (x143 x235))) (not (= x333 0)))))) (and (<= 0 x140) (= x376 (x98 x216 1000000000000000000000000000)) (>= 340282366920938463463374607431768211455 x140) (= (x369 128) x155) (not (> 826074471 x377)) (= x436 x468) (= (x387 (+ x357 500000000000000000000000000)) x216) (= x367 (not x231)) (= (x183 (x300 x140 x155)) x357) (= (x162 (x143 x324)) x167) (= x289 x376) (= (< x120 x140) x231) (not (< x377 1865579259)) (< 0 x167) (= x377 1889567281) (< x140 340282366920938463463374607431768211456) (> x372 0) (not (= x377 1865579259)) (<= x436 1461501637330902918203684832716283019655932542975) (<= x94 1461501637330902918203684832716283019655932542975) (= (ite x260 1 0) x372) (> 1461501637330902918203684832716283019655932542976 x94) (= x140 (x363 x407)) (= x312 (= x155 0)) (= x120 (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x155)) (>= x94 0) (= (or x312 x367) x260) (> 2113256763 x377) (= x407 (x409 (x143 x436) (x282 52) 0)))) (and (= x452 (= 0 x366)) (= x340 x434) (= x222 (x315 320)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x304 x340)) (= x296 x452) (= x39 x304) (= (+ x39 x434) x46))) x152) x463))
(assert (x67 x64 x424 x366 x242))
(assert (x49 x322))
(assert (x65 x299))
(assert (x166 x87 (- x275 x242)))
(assert (x67 x276 x309 x140 x155))
(assert (x166 x140 (- x155 x366)))
(assert (x306 x285))
(assert (x306 x107))
(assert (x166 x276 (- x309 x155)))
(assert (x166 x248 (- x61 x242)))
(assert (x422 x87))
(assert (x306 x472))
(assert (= (=> (and (and (and (and (= (+ x320 x284) x78) (= x474 x332) (= x230 x246) (= x381 (x409 (x143 x360) (x282 52) 0)) (> x43 0) (= x411 (x356 1461501637330902918203684832716283019655932542975 x23)) (>= x284 0) (= 1000000000000000000000000000 x15) (<= 0 x332) (> 340282366920938463463374607431768211456 x276) (= x272 (x387 (+ x292 500000000000000000000000000))) (= (= 0 x235) x16) (= x253 x210) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x89 x320)) (>= x274 0) (<= 0 x276) (= (x215 x381) x466) (>= 340282366920938463463374607431768211455 x35) (= (x409 (x143 x360) (x282 52) 0) x5) (= x280 (> x129 115792089237316195423570985008687907853269984665640)) (< x235 1461501637330902918203684832716283019655932542976) (= x267 (+ x173 x35)) (= x135 x474) (= x103 x23) (= (not (= x236 x416)) x41) (= (x356 1461501637330902918203684832716283019655932542975 x23) x430) (>= 1461501637330902918203684832716283019655932542975 x360) (not (> 3018967357 x198)) (= x129 x221) (= (x162 (x143 x324)) x43) (= x109 (x409 (x143 x360) (x282 52) 0)) (= (x387 (+ x386 500000000000000000000000000)) x172) (= (not x125) x421) (= 1000000000000000000000000000 x233) (= 0 x62) (= x359 x62) (= x239 0) (= x89 x247) (> x117 0) (<= x274 1461501637330902918203684832716283019655932542975) (< x89 340282366920938463463374607431768211456) (= x198 3018967357) (<= 0 x466) (= x433 (- x267 x466)) x469 (= (= x433 x439) x211) (<= x103 1461501637330902918203684832716283019655932542975) (not (> x188 x145)) (>= 1461501637330902918203684832716283019655932542975 x332) (= (x409 (x143 x360) (x282 52) 0) x31) x211 (<= 0 x235) (= (not x280) x207) (>= 1461501637330902918203684832716283019655932542975 x165) (= (ite x342 1 0) x117) (<= x466 340282366920938463463374607431768211455) (= x236 x277) (<= 0 x309) (not (< x198 2113256763)) (= x360 x468) (>= x103 0) (= (= 0 x276) x168) (= x89 (x215 x31)) (= x417 x261) (= (ite x230 1 0) x239) (= x286 x411) (= x142 x430) (= x286 (x356 1461501637330902918203684832716283019655932542975 x353)) (= x125 (< 115792089237316195423570985008687907853269984665640 x309)) (< x198 3607235850) (>= x89 0) (= (and x234 x41) x469) (<= x309 340282366920938463463374607431768211455) (= (+ x247 x475) x35) (not (< 340282366920938463463374607431768211455 x320)) (= x165 x329) (not (= 0 x320)) (= x475 x320) (= x246 (not x207)) (< 0 x429) (>= 340282366920938463463374607431768211455 x89) (= x358 (x406 (- x145 x188))) (= (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x276) x318) (= (x409 (x143 x360) (x282 52) 0) x441) (= x342 (or x168 x374)) (= x418 (> x309 x318)) (= (x183 (x300 x309 x276)) x386) (= (x183 (* 1000000000000000000000000000 x129)) x442) (= x292 (x183 (* x309 1000000000000000000000000000))) (= x96 x421) (< x309 340282366920938463463374607431768211456) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x284) (= x78 x428) (= (x98 x172 1000000000000000000000000000) x188) (= x234 (= x417 x106)) (= (not x418) x374) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x320 x284)) (= x309 (x215 x441)) (= x429 (ite x96 1 0)) (= x145 (x98 x272 1000000000000000000000000000)) (= x468 x416) (= x455 (x387 (+ 500000000000000000000000000 x442))) (>= 340282366920938463463374607431768211455 x276) (>= 1461501637330902918203684832716283019655932542975 x235) (= x320 (x98 x455 1000000000000000000000000000)) (= (x88 x109) x276) (= x78 x397) (= x142 (x356 1461501637330902918203684832716283019655932542975 x353))) (or x16 (and (not x16) (and (not (= x182 0)) (= x182 (x162 (x143 x235))))))) (and (>= 1461501637330902918203684832716283019655932542975 x94) (= x214 x277) (< x456 2113256763) (= x380 (x183 (x300 x322 x115))) (= x71 (= 0 x115)) (= x137 (x98 x180 1000000000000000000000000000)) (not (= x456 1865579259)) (<= 0 x94) (= x228 x106) (< x322 340282366920938463463374607431768211456) (= x338 (x409 (x143 x214) (x282 52) 0)) (<= x322 340282366920938463463374607431768211455) (= x115 (x17 128)) (= x290 (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x115)) (< x94 1461501637330902918203684832716283019655932542976) (= (ite x287 1 0) x205) (>= 1461501637330902918203684832716283019655932542975 x214) (> x205 0) (<= 0 x322) (= x473 (x162 (x143 x324))) (> x473 0) (= (< x290 x322) x254) (= 1889567281 x456) (= x137 x261) (= (x387 (+ 500000000000000000000000000 x380)) x180) (not (< x456 1865579259)) (= (x215 x338) x322) (= x323 (not x254)) (not (< x456 826074471)) (= (or x71 x323) x287))) (and (= x241 (ite x471 1 0)) (< 0 x30) (= (x98 x83 1000000000000000000000000000) x423) (<= 0 x329) (>= x468 0) (= x253 x93) (>= 1461501637330902918203684832716283019655932542975 x94) (>= 1461501637330902918203684832716283019655932542975 x235) (<= 0 x295) (not (= x408 1865579259)) x354 (= (> (x162 (x143 x30)) 0) x26) (= x227 1000000000000000000000000000) (<= 0 x94) (= x70 (x481 (x143 x324))) (> 340282366920938463463374607431768211456 x275) (= (x183 (x300 x275 x87)) x249) (>= 1461501637330902918203684832716283019655932542975 x314) (>= x277 0) (= (= 0 x87) x68) (= x307 (x481 (x143 x30))) x26 (not (< x408 826074471)) (= x228 x50) (> 1461501637330902918203684832716283019655932542976 x94) (<= x295 255) (>= x22 0) (> x241 0) (>= 1461501637330902918203684832716283019655932542975 x116) (< 0 x324) (= x415 (x162 (x143 x324))) (<= x94 1461501637330902918203684832716283019655932542975) (= x343 x23) (<= 0 x116) (>= 1461501637330902918203684832716283019655932542975 x350) (>= x343 0) (= (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x87) x12) (= (or x68 x53) x471) (<= x324 1461501637330902918203684832716283019655932542975) (= x116 x400) (>= x94 0) (<= x343 1461501637330902918203684832716283019655932542975) (= (x215 x305) x275) (>= 1461501637330902918203684832716283019655932542975 x30) (= x118 (x387 (+ 500000000000000000000000000 x249))) (= x53 (not x197)) (= x94 x30) (not (> 1865579259 x408)) (= x50 (x98 x118 1000000000000000000000000000)) (>= x350 0) (= x305 (x409 (x143 x314) (x282 52) 0)) (= (> x275 x12) x197) (>= 340282366920938463463374607431768211455 x275) (<= x329 1461501637330902918203684832716283019655932542975) (= x83 x253) (<= 0 x275) (>= x235 0) (= 1889567281 x408) (< 0 x415) (= (> (x162 (x143 x324)) 0) x354) (>= 1461501637330902918203684832716283019655932542975 x468) (<= 0 x70) (< x408 2113256763) (<= x277 1461501637330902918203684832716283019655932542975) (not (= x30 x324)) (>= 255 x22) (= (x104 128) x87) (<= 0 x307) (= x468 x314))) x392) x410))
(assert (x306 x340))
(assert (= x30 (x355 (x143 x30))))
(assert (x306 x303))
(assert (x306 x359))
(assert (x49 (- x248 x424)))
(assert (x49 (- x248 x87)))
(assert (x306 x174))
(assert (x67 x366 x242 x248 x61))
(assert (x67 x424 x64 x248 x61))
(assert (x166 x322 x115))
(assert (x49 x129))
(assert (x422 x172))
(assert (x49 (- x61 x322)))
(assert (x49 (- x140 x275)))
(assert (x49 (- x275 x61)))
(assert (x49 (- x155 x115)))
(assert (x306 x334))
(assert (= 826074471 (x355 (x282 826074471))))
(assert (and (x2 1000000000000000000000000000 x304) (x281 1000000000000000000000000000 x304) (= (* x304 1000000000000000000000000000) (x300 1000000000000000000000000000 x304)) (and (= (- (* 1000000000000000000000000000 (- x304 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x304 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x304 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x304) (- (* x304 1000000000000000000000000000) (* x304 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 1000000000000000000000000000 (- x304 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x304 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 1000000000000000000000000000 x304) (x288 1000000000000000000000000000 x304) (x8 1000000000000000000000000000 x304)))
(assert (x268 x64 x424 x322 x115))
(assert (x166 x275 x87))
(assert (= (x355 (x282 1000000000000000000000000000)) 1000000000000000000000000000))
(assert (x306 x272))
(assert (x306 x188))
(assert (x306 x320))
(assert (x306 x394))
(assert (x49 (- x155 x309)))
(assert (=> (>= 10000 x385) (= (x282 x385) (x143 x385))))
(assert (x306 x224))
(assert (x49 (- x309 x366)))
(assert (x49 (- x309 x64)))
(assert (and (x51 x23 1461501637330902918203684832716283019655932542976) (x18 x23 1461501637330902918203684832716283019655932542976) (x184 x23 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x321 x23 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x98 x23 1461501637330902918203684832716283019655932542976))) x23))))
(assert (x306 x214))
(assert (x268 x366 x242 x140 x155))
(assert (x49 (- x309 x424)))
(assert (x306 x263))
(assert (x306 x248))
(assert (x67 x276 x309 x248 x61))
(assert (x268 x366 x242 x322 x115))
(assert (x306 x337))
(assert (x166 x87 (- x275 x424)))
(assert (x306 x122))
(assert (x49 (- x155 x275)))
(assert (x306 x350))
(assert (x422 x264))
(assert (x306 x468))
(assert (x422 x118))
(assert (x166 x87 (- x275 x140)))
(assert (x67 x366 x242 x140 x155))
(assert (x49 (- x87 x64)))
(assert (x67 x115 x322 x140 x155))
(assert (and (x193 x405 1000000000000000000000000000) (x457 x405 1000000000000000000000000000) (x55 x405 1000000000000000000000000000) (=> (and (> x405 0) (> 1000000000000000000000000000 0)) (and (>= x405 (* 1000000000000000000000000000 (x98 x405 1000000000000000000000000000))) (< (- x405 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x405 1000000000000000000000000000))))) (x47 x405 1000000000000000000000000000)))
(assert (x67 x322 x115 x248 x61))
(assert (x49 (- x322 x155)))
(assert (x306 x140))
(assert (x306 x429))
(assert (x306 x372))
(assert (x67 x309 x276 x248 x61))
(assert (x268 x61 x248 x275 x87))
(assert (x67 x366 x242 x275 x87))
(assert (= (x282 3018967357) (x143 3018967357)))
(assert (x49 (- x366 x276)))
(assert (= true x57))
(assert (x49 (- x140 x242)))
(assert (x166 x155 (- x140 x87)))
(assert (x166 x322 (- x115 x424)))
(assert (= (x355 (x143 x214)) x214))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x248))
(assert (x49 (- x140 x87)))
(assert (x166 x61 (- x248 x275)))
(assert (= (x282 826074471) (x143 826074471)))
(assert (x67 x275 x87 x366 x242))
(assert (x166 x115 (- x322 x366)))
(assert (x166 x61 (- x248 x424)))
(assert (x49 (- x155 x424)))
(assert (x306 x380))
(assert (x49 (- x366 x87)))
(assert (x166 x276 (- x309 x424)))
(assert (x306 x4))
(assert (x306 x302))
(assert (x67 x248 x61 x275 x87))
(assert (= (and x220 (not x33)) x149))
(assert (x268 x242 x366 x140 x155))
(assert (=> (<= x324 10000) (= (x143 x324) (x282 x324))))
(assert (x268 x276 x309 x140 x155))
(assert (x166 x424 (- x64 x275)))
(assert (= (x355 (x143 x436)) x436))
(assert (x306 x239))
(assert (x306 x322))
(assert (x67 x242 x366 x87 x275))
(assert (x306 x222))
(assert (x49 (- x61 x424)))
(assert (x65 x360))
(assert (x306 x172))
(assert (x166 x275 (- x87 x64)))
(assert (x306 x357))
(assert (x166 x366 (- x242 x155)))
(assert (x306 x431))
(assert (x67 x155 x140 x64 x424))
(assert (x49 (- x275 x242)))
(assert (x67 x115 x322 x242 x366))
(assert (x49 (- x309 x140)))
(assert (x67 x61 x248 x115 x322))
(assert (x301 x23))
(assert (x67 x248 x61 x276 x309))
(assert (x268 x64 x424 x275 x87))
(assert (x166 x61 (- x248 x115)))
(assert (x306 x286))
(assert (= 3018967357 (x355 (x282 3018967357))))
(assert (x306 x163))
(assert (x166 x275 (- x87 x61)))
(assert (x49 (- x242 x276)))
(assert (x306 x45))
(assert (x306 x360))
(assert (and (x2 1000000000000000000000000000 x309) (x281 1000000000000000000000000000 x309) (= (* x309 1000000000000000000000000000) (x300 1000000000000000000000000000 x309)) (and (= (- (* 1000000000000000000000000000 (- x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x309 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x309 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x309) (- (* x309 1000000000000000000000000000) (* x309 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 1000000000000000000000000000 (- x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x309 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 1000000000000000000000000000 x309) (x288 1000000000000000000000000000 x309) (x8 1000000000000000000000000000 x309)))
(assert (x67 x309 x276 x155 x140))
(assert (x67 x424 x64 x87 x275))
(assert (x166 x87 (- x275 x155)))
(assert (x306 x408))
(assert (x65 x30))
(assert (x49 (- x242 x61)))
(assert (= (x143 1865579259) (x282 1865579259)))
(assert (x49 (- x424 x61)))
(assert (x422 x155))
(assert (x67 x242 x366 x61 x248))
(assert (= (x282 115792089237316195423570985008687907853269984665640) (x143 115792089237316195423570985008687907853269984665640)))
(assert (x67 x309 x276 x242 x366))
(assert (x49 x61))
(assert (x65 x235))
(assert (x306 x274))
(assert (x49 (- x140 x309)))
(assert (x306 x318))
(assert (x422 x232))
(assert (x49 x203))
(assert (x166 x248 (- x61 x366)))
(assert (x268 x64 x424 x61 x248))
(assert (x49 (- x275 x424)))
(assert (x306 x70))
(assert (x306 x277))
(assert (x67 x242 x366 x155 x140))
(assert (x306 x290))
(assert (x306 x151))
(assert (x49 x424))
(assert (x166 x309 (- x276 x64)))
(assert (x67 x87 x275 x424 x64))
(assert (x49 3))
(assert (x166 x322 (- x115 x140)))
(assert (x306 x411))
(assert (x166 x276 (- x309 x64)))
(assert (x268 x242 x366 x309 x276))
(assert (and (= 81 (x300 27 3)) (= (x300 9 3) 27) (= 81 (x300 9 9)) (= (x300 3 3) 9)))
(assert (x166 x115 (- x322 x155)))
(assert (x166 x242 (- x366 x64)))
(assert (x306 x397))
(assert (x49 (- x275 x64)))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x276))
(assert (x49 (- x242 x155)))
(assert (x67 x424 x64 x242 x366))
(assert (x166 x64 (- x424 x242)))
(assert (x49 (- x242 x322)))
(assert (x67 x322 x115 x140 x155))
(assert (= (x282 115792089237316195423570985008687907853269984665640064039457584007913129639935) (x143 115792089237316195423570985008687907853269984665640064039457584007913129639935)))
(assert (x67 x61 x248 x87 x275))
(assert (x67 x248 x61 x366 x242))
(assert (x268 x242 x366 x64 x424))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x115))
(assert (x306 x229))
(assert (x49 (- x424 x155)))
(assert (x306 x94))
(assert (x268 x322 x115 x366 x242))
(assert (= x204 (or x186 x138)))
(assert (x166 x322 (- x115 x155)))
(assert (x67 x242 x366 x309 x276))
(assert (x268 x366 x242 x64 x424))
(assert (x306 x325))
(assert (x306 x275))
(assert (x67 x276 x309 x242 x366))
(assert (x166 x140 (- x155 x115)))
(assert (x306 x83))
(assert (x67 x366 x242 x87 x275))
(assert (x268 x276 x309 x61 x248))
(assert (x67 x140 x155 x115 x322))
(assert (x306 x455))
(assert (x67 x87 x275 x140 x155))
(assert (x422 x272))
(assert (x67 x424 x64 x155 x140))
(assert (x268 x155 x140 x322 x115))
(assert (x49 (- x87 x366)))
(assert (x67 x64 x424 x140 x155))
(assert (x268 x366 x242 x309 x276))
(assert (x306 x415))
(assert (x306 x238))
(assert (x166 x424 (- x64 x87)))
(assert (x268 x248 x61 x64 x424))
(assert (x65 x224))
(assert (x166 x242 (- x366 x276)))
(assert (x166 x366 (- x242 x248)))
(assert (x306 x131))
(assert (x49 (- x155 x366)))
(assert (x67 x242 x366 x424 x64))
(assert (= (x143 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x282 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x355 (x282 340282366920938463463374607431768211456)) 340282366920938463463374607431768211456))
(assert (x306 x446))
(assert (x306 x23))
(assert (x306 x331))
(assert (x49 (- x61 x276)))
(assert (x49 (- x64 x87)))
(assert (x306 x442))
(assert (x306 x316))
(assert (= x235 (x355 (x143 x235))))
(assert (x306 x405))
(assert (x306 x118))
(assert (x49 (- x115 x140)))
(assert (x306 x129))
(assert (x422 x424))
(assert (x67 x322 x115 x155 x140))
(assert (x306 x59))
(assert (x268 x140 x155 x309 x276))
(assert (x49 x309))
(assert (x67 x276 x309 x155 x140))
(assert (x49 (- x276 x61)))
(assert (x49 (- x140 x64)))
(assert (x306 x199))
(assert (x166 x366 (- x242 x87)))
(assert (x306 x169))
(assert (x306 x205))
(assert (x49 (- x155 x322)))
(assert (x49 (- x242 x309)))
(assert (x67 x61 x248 x64 x424))
(assert (= (=> (and (and (and (= (not x9) x379) (>= 1461501637330902918203684832716283019655932542975 x208) (= (not x311) x326) (<= x366 340282366920938463463374607431768211455) (= (ite x444 1 0) x399) (= (x387 (+ x200 500000000000000000000000000)) x232) (= (x403 x470) x242) (= (x356 1461501637330902918203684832716283019655932542975 x353) x164) (= x217 (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x242)) (<= x148 340282366920938463463374607431768211455) (= (or x279 x345) x157) (= x97 x23) (<= 0 x428) (> x399 0) (= (= x242 0) x345) (= x72 (x162 (x143 x324))) (= x223 x187) (= x187 (x356 1461501637330902918203684832716283019655932542975 x353)) (= x431 0) (= (- x389 x148) x77) (< x237 3607235850) (<= 0 x235) (>= x97 0) (>= 1461501637330902918203684832716283019655932542975 x45) (> 340282366920938463463374607431768211456 x153) (>= x208 0) (= x390 1000000000000000000000000000) (= x449 (< x217 x366)) (>= x148 0) (<= x235 1461501637330902918203684832716283019655932542975) (= (x356 1461501637330902918203684832716283019655932542975 x23) x223) (= x283 (x98 x405 1000000000000000000000000000)) (not (= 0 x283)) (= x294 x164) (= x113 x304) (= (< 115792089237316195423570985008687907853269984665640 x304) x82) (= x326 x102) (= x389 (+ x226 x439)) (<= x337 1461501637330902918203684832716283019655932542975) (= (x257 x368) x148) (not (> x460 x302)) (= (x409 (x143 x385) (x282 52) 0) x209) (= x153 x402) (<= x226 340282366920938463463374607431768211455) (= (x98 x264 1000000000000000000000000000) x302) (= (+ x402 x255) x226) (< (+ x283 x428) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> x72 0) (= x135 x121) (>= x153 0) (= x253 x229) (= (x183 (* 1000000000000000000000000000 x304)) x394) (not (> x283 340282366920938463463374607431768211455)) (= 0 x163) (= x379 x444) (= x265 x325) (not (< x237 3018967357)) (= x4 (x183 (* 1000000000000000000000000000 x366))) (<= x385 1461501637330902918203684832716283019655932542975) (= (not x449) x279) (= (x409 (x143 x385) (x282 52) 0) x38) (<= 0 x242) (= (not x82) x311) (< 0 x127) (= 1000000000000000000000000000 x479) (= x329 x337) (= x9 (> x366 115792089237316195423570985008687907853269984665640)) x313 (= x264 (x387 (+ x4 500000000000000000000000000))) (= x385 x468) (<= 0 x366) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x153 x283)) (<= x97 1461501637330902918203684832716283019655932542975) (= x208 x121) (< x366 340282366920938463463374607431768211456) (= x340 (x406 (- x302 x460))) (= x405 (x387 (+ 500000000000000000000000000 x394))) (= x265 x293) (= x237 3018967357) (= x200 (x183 (x300 x366 x242))) (= x189 (x409 (x143 x385) (x282 52) 0)) (= (x98 x232 1000000000000000000000000000) x460) (= x127 (ite x157 1 0)) (not (< x237 2113256763)) (= x283 x255) (= x265 (+ x428 x283)) (<= 0 x45) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x428) (= x294 (x356 1461501637330902918203684832716283019655932542975 x23)) (= x163 (ite x102 1 0)) (= x153 (x257 x189)) (> 1461501637330902918203684832716283019655932542976 x235) (> 340282366920938463463374607431768211456 x242) (<= x153 340282366920938463463374607431768211455) (= x359 x431) (= (= x77 x344) x313) (= (x409 (x143 x385) (x282 52) 0) x470) (= (x409 (x143 x385) (x282 52) 0) x368) (= (= 0 x235) x201) (= x366 (x257 x38)) (<= x242 340282366920938463463374607431768211455)) (or (and (not x201) (and (= (x162 (x143 x235)) x352) (not (= x352 0)))) x201)) (and (= x358 x74) (= (= 0 x309) x28) (= x171 (x194 320)) (= (+ x336 x74) x459) (= x129 x336) (= x28 x412) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x129 x358)))) x463) x392))
(assert (x67 x115 x322 x155 x140))
(assert (= 340282366920938463463374607431768211455 (x355 (x282 340282366920938463463374607431768211455))))
(assert (x49 (- x155 x87)))
(assert (x268 x276 x309 x366 x242))
(assert (x268 x248 x61 x322 x115))
(assert (x67 x115 x322 x248 x61))
(assert (x306 x217))
(assert (x49 (- x115 x61)))
(assert (x268 x115 x322 x366 x242))
(assert (= (x143 500000000000000000000000000) (x282 500000000000000000000000000)))
(assert (x166 x309 (- x276 x242)))
(assert (x67 x64 x424 x87 x275))
(assert (x67 x242 x366 x115 x322))
(assert (x306 x241))
(assert (x166 x61 (- x248 x276)))
(assert (x166 x424 (- x64 x322)))
(assert (x306 x436))
(assert (x67 x64 x424 x242 x366))
(assert (x166 x309 (- x276 x366)))
(assert (x49 (- x276 x155)))
(assert (= (x355 (x143 x324)) x324))
(assert (x67 x276 x309 x424 x64))
(assert (x268 x275 x87 x61 x248))
(assert (x268 x155 x140 x366 x242))
(assert (x67 x424 x64 x309 x276))
(assert (x166 x276 (- x309 x366)))
(assert (x166 x64 (- x424 x275)))
(assert (x166 x366 (- x242 x140)))
(assert (x306 x72))
(assert (= (x355 (x282 115792089237316195423570985008687907853269984665640064039457584007913129639935)) 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (x166 x61 (- x248 x366)))
(assert (x49 (- x64 x276)))
(assert (x49 (- x115 x248)))
(assert (x49 x275))
(assert (x67 x64 x424 x275 x87))
(assert (x306 x365))
(assert (= (x355 (x282 22402283082756182618670880521465619040657731284550890770856599233457073160192)) 22402283082756182618670880521465619040657731284550890770856599233457073160192))
(assert (x306 x30))
(assert (= (x282 2113256763) (x143 2113256763)))
(assert (x268 x366 x242 x61 x248))
(assert (x306 x165))
(assert (x19 x23))
(assert (x67 x366 x242 x115 x322))
(assert (x306 x200))
(assert (x49 (- x155 x64)))
(assert (x166 x155 (- x140 x424)))
(assert (x166 x140 (- x155 x242)))
(assert (and (x51 x353 1461501637330902918203684832716283019655932542976) (x18 x353 1461501637330902918203684832716283019655932542976) (x184 x353 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (x321 x353 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x98 x353 1461501637330902918203684832716283019655932542976))) x353))))
(assert (x166 x64 (- x424 x61)))
(assert (x166 x155 (- x140 x115)))
(assert (x306 x343))
(assert (x422 x91))
(assert (x166 x140 (- x155 x276)))
(assert (= (or x361 x149) x144))
(assert (x166 x275 (- x87 x242)))
(assert (x306 x127))
(assert (x166 x115 (- x322 x64)))
(assert (x49 (- x115 x155)))
(assert (x67 x322 x115 x61 x248))
(assert (x49 (- x424 x242)))
(assert (x268 x424 x64 x140 x155))
(assert (x306 x428))
(assert (x67 x275 x87 x64 x424))
(assert (= 500000000000000000000000000 (x355 (x282 500000000000000000000000000))))
(assert (x65 x436))
(assert (x306 x145))
(assert (x67 x309 x276 x61 x248))
(assert (and (x2 1000000000000000000000000000 x366) (x281 1000000000000000000000000000 x366) (= (* x366 1000000000000000000000000000) (x300 1000000000000000000000000000 x366)) (and (= (- (* 1000000000000000000000000000 (- x366 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x366 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x366 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x366) (- (* x366 1000000000000000000000000000) (* x366 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 1000000000000000000000000000 (- x366 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x366 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 1000000000000000000000000000 x366) (x288 1000000000000000000000000000 x366) (x8 1000000000000000000000000000 x366)))
(assert (x67 x275 x87 x61 x248))
(assert (x166 x309 (- x276 x248)))
(assert (= x220 (or x179 x480)))
(assert (=> (<= x235 10000) (= (x282 x235) (x143 x235))))
(assert (x306 x416))
(assert (x49 (- x309 x242)))
(assert (x166 x115 (- x322 x140)))
(assert (x268 x424 x64 x366 x242))
(assert (x49 (- x322 x140)))
(assert (x49 (- x242 x115)))
(assert (x166 x366 (- x242 x275)))
(assert (x306 x112))
(assert (x49 (- x424 x87)))
(assert (x166 x87 (- x275 x366)))
(assert (x49 (- x87 x61)))
(assert (= (x282 1889567281) (x143 1889567281)))
(assert (x49 (- x64 x322)))
(assert (and (x2 1000000000000000000000000000 x203) (x281 1000000000000000000000000000 x203) (= (* x203 1000000000000000000000000000) (x300 1000000000000000000000000000 x203)) (and (= (- (* 1000000000000000000000000000 (- x203 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x203 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x203 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x203) (- (* x203 1000000000000000000000000000) (* x203 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 1000000000000000000000000000 (- x203 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x203 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 1000000000000000000000000000 x203) (x288 1000000000000000000000000000 x203) (x8 1000000000000000000000000000 x203)))
(assert (x67 x64 x424 x248 x61))
(assert (x166 x424 (- x64 x61)))
(assert (x67 x155 x140 x322 x115))
(assert (x268 x87 x275 x366 x242))
(assert (x166 x242 (- x366 x322)))
(assert (x166 x155 (- x140 x309)))
(assert (x306 x304))
(assert (x306 x61))
(assert (x67 x64 x424 x276 x309))
(assert (x67 x322 x115 x366 x242))
(assert (x306 x447))
(assert (x166 x366 (- x242 x424)))
(assert (x65 x314))
(assert (x49 (- x64 x366)))
(assert (x166 x87 (- x275 x64)))
(assert (and (x2 1000000000000000000000000000 x129) (x281 1000000000000000000000000000 x129) (= (* x129 1000000000000000000000000000) (x300 1000000000000000000000000000 x129)) (and (= (- (* 1000000000000000000000000000 (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x129) (- (* x129 1000000000000000000000000000) (* x129 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 1000000000000000000000000000 (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x129 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 1000000000000000000000000000 x129) (x288 1000000000000000000000000000 x129) (x8 1000000000000000000000000000 x129)))
(assert (and (x193 x240 1000000000000000000000000000) (x457 x240 1000000000000000000000000000) (x55 x240 1000000000000000000000000000) (=> (and (> x240 0) (> 1000000000000000000000000000 0)) (and (>= x240 (* 1000000000000000000000000000 (x98 x240 1000000000000000000000000000))) (< (- x240 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x240 1000000000000000000000000000))))) (x47 x240 1000000000000000000000000000)))
(assert (= (x143 3607235850) (x282 3607235850)))
(assert (x306 x35))
(assert (= (and x33 x220) x361))
(assert (x422 x405))
(assert (x67 x366 x242 x64 x424))
(assert (x24 1461501637330902918203684832716283019655932542976))
(assert (x67 x366 x242 x276 x309))
(assert (x67 x276 x309 x64 x424))
(assert (x166 x366 (- x242 x276)))
(assert (x67 x140 x155 x309 x276))
(assert (x65 x214))
(assert (x306 x332))
(assert (x67 x61 x248 x366 x242))
(assert (x67 x242 x366 x140 x155))
(assert (x166 x242 (- x366 x115)))
(assert (x67 x64 x424 x115 x322))
(assert (x306 x137))
(assert (x67 x64 x424 x309 x276))
(assert (x49 (- x140 x424)))
(assert (x166 x61 x248))
(assert (x166 x248 (- x61 x64)))
(assert (= (x143 22402283082756182618670880521465619040657731284550890770856599233457073160192) (x282 22402283082756182618670880521465619040657731284550890770856599233457073160192)))
(assert (x67 x424 x64 x140 x155))
(assert (x166 x64 (- x424 x309)))
(assert (x166 x424 (- x64 x242)))
(assert (x67 x87 x275 x155 x140))
(assert (x166 x242 (- x366 x275)))
(assert (x49 (- x61 x366)))
(assert (x67 x242 x366 x64 x424))
(assert (x49 1000000000000000000000000000))
(assert (= x314 (x355 (x143 x314))))
(assert (x49 (- x115 x242)))
(assert (x166 x248 (- x61 x87)))
(assert (x268 x248 x61 x275 x87))
(assert (x67 x64 x424 x155 x140))
(assert (x306 x182))
(assert (x49 (- x248 x275)))
(assert (x306 x89))
(assert (x49 (- x64 x275)))
(assert (x49 (- x276 x140)))
(assert (x306 x120))
(assert (x166 x87 (- x275 x248)))
(assert (x166 x322 (- x115 x64)))
(assert (x268 x248 x61 x366 x242))
(assert (x166 x242 (- x366 x87)))
(assert (x67 x61 x248 x322 x115))
(assert (x166 x275 (- x87 x248)))
(assert (x306 x198))
(assert (x49 (- x366 x115)))
(assert (x67 x140 x155 x322 x115))
(assert (and (x193 x83 1000000000000000000000000000) (x457 x83 1000000000000000000000000000) (x55 x83 1000000000000000000000000000) (=> (and (> x83 0) (> 1000000000000000000000000000 0)) (and (>= x83 (* 1000000000000000000000000000 (x98 x83 1000000000000000000000000000))) (< (- x83 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x83 1000000000000000000000000000))))) (x47 x83 1000000000000000000000000000)))
(assert (x306 x12))
(assert (x268 x140 x155 x322 x115))
(assert (x166 x242 (- x366 x309)))
(assert (= (x355 (x282 1865579259)) 1865579259))
(assert (x166 x61 (- x248 x64)))
(assert (and (x193 x118 1000000000000000000000000000) (x457 x118 1000000000000000000000000000) (x55 x118 1000000000000000000000000000) (=> (and (> x118 0) (> 1000000000000000000000000000 0)) (and (>= x118 (* 1000000000000000000000000000 (x98 x118 1000000000000000000000000000))) (< (- x118 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x118 1000000000000000000000000000))))) (x47 x118 1000000000000000000000000000)))
(assert (and (x193 x455 1000000000000000000000000000) (x457 x455 1000000000000000000000000000) (x55 x455 1000000000000000000000000000) (=> (and (> x455 0) (> 1000000000000000000000000000 0)) (and (>= x455 (* 1000000000000000000000000000 (x98 x455 1000000000000000000000000000))) (< (- x455 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x455 1000000000000000000000000000))))) (x47 x455 1000000000000000000000000000)))
(assert (x268 x322 x115 x64 x424))
(assert (x306 x155))
(assert (x268 x424 x64 x275 x87))
(assert (x422 x242))
(assert (x306 x289))
(assert (x306 x249))
(assert (x67 x275 x87 x140 x155))
(assert (x67 x366 x242 x424 x64))
(assert (x306 x48))
(assert (x166 x322 (- x115 x366)))
(assert (x67 x61 x248 x276 x309))
(assert (x67 x115 x322 x424 x64))
(assert (= x179 (and x204 (not x201))))
(assert (x268 x61 x248 x309 x276))
(assert (x49 x87))
(assert (x306 x235))
(assert (= x93 1000000000000000000000000000))
(assert (x306 x373))
(assert (= 2113256763 (x355 (x282 2113256763))))
(assert (x49 (- x424 x276)))
(assert (x268 x424 x64 x322 x115))
(assert (x166 x64 (- x424 x155)))
(assert (x49 (- x309 x61)))
(assert (x166 x276 (- x309 x248)))
(assert (=> (>= 10000 x214) (= (x282 x214) (x143 x214))))
(assert (x67 x61 x248 x309 x276))
(assert (x306 x453))
(assert (and (x193 x180 1000000000000000000000000000) (x457 x180 1000000000000000000000000000) (x55 x180 1000000000000000000000000000) (=> (and (> x180 0) (> 1000000000000000000000000000 0)) (and (>= x180 (* 1000000000000000000000000000 (x98 x180 1000000000000000000000000000))) (< (- x180 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x180 1000000000000000000000000000))))) (x47 x180 1000000000000000000000000000)))
(assert (x166 x248 (- x61 x424)))
(assert (=> (<= x299 10000) (= (x143 x299) (x282 x299))))
(assert (x166 x275 (- x87 x155)))
(assert (x67 x242 x366 x248 x61))
(assert (x268 x61 x248 x366 x242))
(assert (x166 x155 (- x140 x276)))
(assert (x49 x304))
(assert (x166 x61 (- x248 x322)))
(assert (x67 x242 x366 x275 x87))
(assert (x422 x240))
(assert (x306 x233))
(assert (x306 x456))
(assert (x268 x155 x140 x309 x276))
(assert (x49 (- x322 x64)))
(assert (x49 (- x155 x276)))
(assert (x306 x466))
(assert (= (x355 (x282 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x306 x283))
(assert (x306 x79))
(assert (x49 (- x309 x248)))
(assert (x306 x178))
(assert (x67 x87 x275 x61 x248))
(assert (x306 x329))
(assert (x166 x248 (- x61 x275)))
(assert (x67 x87 x275 x64 x424))
(assert (and (x193 x264 1000000000000000000000000000) (x457 x264 1000000000000000000000000000) (x55 x264 1000000000000000000000000000) (=> (and (> x264 0) (> 1000000000000000000000000000 0)) (and (>= x264 (* 1000000000000000000000000000 (x98 x264 1000000000000000000000000000))) (< (- x264 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x264 1000000000000000000000000000))))) (x47 x264 1000000000000000000000000000)))
(assert (x306 x400))
(assert (x49 (- x366 x61)))
(assert (x166 x242 (- x366 x155)))
(assert (x422 115792089237316195423570985008687907853269984665640064039457584007913129639935))
(assert (and (x193 x365 1000000000000000000000000000) (x457 x365 1000000000000000000000000000) (x55 x365 1000000000000000000000000000) (=> (and (> x365 0) (> 1000000000000000000000000000 0)) (and (>= x365 (* 1000000000000000000000000000 (x98 x365 1000000000000000000000000000))) (< (- x365 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x365 1000000000000000000000000000))))) (x47 x365 1000000000000000000000000000)))
(assert (x67 x155 x140 x275 x87))
(assert (x166 x424 (- x64 x115)))
(assert (x67 x248 x61 x115 x322))
(assert (x49 x419))
(assert (x306 x208))
(assert (x306 x219))
(assert (not x410))
(assert (x67 x309 x276 x424 x64))
(assert (x49 x276))
(assert (x166 x155 (- x140 x64)))
(assert (x268 x322 x115 x61 x248))
(assert (x49 (- x248 x276)))
(assert (x306 x344))
(assert (x67 x64 x424 x61 x248))
(assert (x67 x366 x242 x309 x276))
(assert (x67 x140 x155 x87 x275))
(assert (x166 x276 (- x309 x242)))
(assert (x67 x140 x155 x64 x424))
(assert (x166 x424 (- x64 x276)))
(assert (x67 x322 x115 x64 x424))
(assert (x306 x366))
(assert (= x480 (and x204 x201)))
(assert (x306 x113))
(assert (= x299 (x355 (x143 x299))))
(assert (x65 x324))
(assert (x268 x309 x276 x140 x155))
(assert (and (x193 x91 1000000000000000000000000000) (x457 x91 1000000000000000000000000000) (x55 x91 1000000000000000000000000000) (=> (and (> x91 0) (> 1000000000000000000000000000 0)) (and (>= x91 (* 1000000000000000000000000000 (x98 x91 1000000000000000000000000000))) (< (- x91 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x91 1000000000000000000000000000))))) (x47 x91 1000000000000000000000000000)))
(assert (x67 x87 x275 x248 x61))
(assert (x306 x244))
(assert (x166 x242 (- x366 x140)))
(assert (x268 x309 x276 x64 x424))
(assert (and (x193 x172 1000000000000000000000000000) (x457 x172 1000000000000000000000000000) (x55 x172 1000000000000000000000000000) (=> (and (> x172 0) (> 1000000000000000000000000000 0)) (and (>= x172 (* 1000000000000000000000000000 (x98 x172 1000000000000000000000000000))) (< (- x172 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x172 1000000000000000000000000000))))) (x47 x172 1000000000000000000000000000)))
(assert (x166 x424 (- x64 x309)))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x87))
(assert (= (x355 (x282 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x268 x242 x366 x61 x248))
(assert (x49 (- x64 x61)))
(assert (x422 x83))
(assert (x49 (- x87 x248)))
(assert (x306 x216))
(assert (x49 (- x61 x309)))
(assert (and (x2 1000000000000000000000000000 x61) (x281 1000000000000000000000000000 x61) (= (* x61 1000000000000000000000000000) (x300 1000000000000000000000000000 x61)) (and (= (- (* 1000000000000000000000000000 (- x61 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x61 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) (- x61 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665639564039457584007913129639936) x61) (- (* x61 1000000000000000000000000000) (* x61 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 1000000000000000000000000000 (- x61 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1000000000000000000000000000 (- x61 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 1000000000000000000000000000 x61) (x288 1000000000000000000000000000 x61) (x8 1000000000000000000000000000 x61)))
(assert (x49 (- x61 x64)))
(assert (x67 x275 x87 x155 x140))
(assert (x166 x366 (- x242 x115)))
(assert (x49 (- x248 x309)))
(assert (x306 x148))
(assert (x166 x309 (- x276 x61)))
(assert (x49 x115))
(assert (and (x193 x272 1000000000000000000000000000) (x457 x272 1000000000000000000000000000) (x55 x272 1000000000000000000000000000) (=> (and (> x272 0) (> 1000000000000000000000000000 0)) (and (>= x272 (* 1000000000000000000000000000 (x98 x272 1000000000000000000000000000))) (< (- x272 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x272 1000000000000000000000000000))))) (x47 x272 1000000000000000000000000000)))
(assert (x306 x46))
(assert (x268 x155 x140 x64 x424))
(assert (x166 x64 x424))
(assert (x49 (- x322 x242)))
(assert (x49 (- x276 x64)))
(assert (x67 x322 x115 x242 x366))
(assert (x306 x60))
(assert (x166 x366 x242))
(assert (x49 (- x61 x87)))
(assert (x67 x155 x140 x366 x242))
(assert (x166 x140 (- x155 x87)))
(assert (= (x355 (x282 94699471215667416670508682402181198833950827816622411988269365108481485438976)) 94699471215667416670508682402181198833950827816622411988269365108481485438976))
(assert (x306 x284))
(assert (x166 x366 (- x242 x322)))
(assert (x268 x276 x309 x64 x424))
(assert (x67 x309 x276 x140 x155))
(assert (x67 x64 x424 x322 x115))
(assert (x166 x61 (- x248 x242)))
(assert (x306 x479))
(assert (x306 x309))
(assert (x166 x140 (- x155 x424)))
(assert (x166 x424 (- x64 x248)))
(assert (x166 x322 (- x115 x242)))
(assert (=> (<= x224 10000) (= (x143 x224) (x282 x224))))
(assert (x268 x87 x275 x140 x155))
(assert (x49 (- x248 x242)))
(assert (x306 x459))
(assert (x67 x248 x61 x64 x424))
(assert (x422 x216))
(assert (x49 (- x115 x366)))
(assert (x166 x248 (- x61 x115)))
(assert (x49 (- x248 x64)))
(assert (x49 (- x322 x61)))
(assert (x306 x352))
(assert (x306 x128))
(assert (x306 x398))
(assert (and (x2 3 x419) (x281 3 x419) (= (* x419 3) (x300 3 x419)) (and (= (- (* 3 (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x419) (- (* x419 3) (* x419 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 3 (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x419 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 3 x419) (x288 3 x419) (x8 3 x419)))
(assert (x166 x275 (- x87 x424)))
(assert (x306 x52))
(assert (x67 x424 x64 x61 x248))
(assert (x306 x11))
(assert (x306 x390))
(assert (x306 x294))
(assert (x166 x309 (- x276 x424)))
(assert (x49 x64))
(assert (x49 (- x87 x140)))
(assert (x306 x116))
(assert (x422 x115))
(assert (and (x193 x216 1000000000000000000000000000) (x457 x216 1000000000000000000000000000) (x55 x216 1000000000000000000000000000) (=> (and (> x216 0) (> 1000000000000000000000000000 0)) (and (>= x216 (* 1000000000000000000000000000 (x98 x216 1000000000000000000000000000))) (< (- x216 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x216 1000000000000000000000000000))))) (x47 x216 1000000000000000000000000000)))
(assert (x67 x366 x242 x322 x115))
(assert (x166 x242 (- x366 x61)))
(assert (x166 x275 (- x87 x366)))
(assert (x49 (- x155 x242)))
(assert (x49 (- x248 x322)))
(assert (x49 (- x275 x140)))
(assert (x67 x248 x61 x309 x276))
(assert (x268 x424 x64 x309 x276))
(assert (x301 x353))
(assert (x67 x275 x87 x424 x64))
(assert (x49 (- x276 x248)))
(assert (x422 1000000000000000000000000000))
(assert (x268 x242 x366 x275 x87))
(assert (x166 x115 (- x322 x248)))
(assert (and (x193 x232 1000000000000000000000000000) (x457 x232 1000000000000000000000000000) (x55 x232 1000000000000000000000000000) (=> (and (> x232 0) (> 1000000000000000000000000000 0)) (and (>= x232 (* 1000000000000000000000000000 (x98 x232 1000000000000000000000000000))) (< (- x232 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x232 1000000000000000000000000000))))) (x47 x232 1000000000000000000000000000)))
(assert (x306 x226))
(assert (x166 x309 (- x276 x140)))
(assert (x49 (- x242 x248)))
(assert (x268 x275 x87 x64 x424))
(assert (x166 x322 (- x115 x61)))
(assert (x306 x134))
(assert (= (x143 340282366920938463463374607431768211455) (x282 340282366920938463463374607431768211455)))
(assert (x166 x115 (- x322 x242)))
(assert (x306 x203))
(assert (x49 (- x275 x248)))
(assert (x306 x278))
(assert (x49 (- x140 x366)))
(assert (x49 (- x140 x115)))
(assert (x306 x417))
(assert (x404 115792089237316195423570985008687907853269984665640064039457584007913129639935 x242))
(assert (x306 x121))
(assert (= x360 (x355 (x143 x360))))
(assert (x306 x388))
(assert (x49 x248))
(assert (x166 x155 (- x140 x322)))
(assert (x49 x335))
(assert (x49 (- x64 x309)))
(assert (x49 (- x424 x140)))
(assert (x306 x376))
(assert (x422 x455))
(assert (x67 x155 x140 x242 x366))
(assert (x268 x115 x322 x64 x424))
(assert (x306 x54))
(assert (x166 x248 (- x61 x276)))
(assert (x49 (- x322 x366)))
(assert (x67 x322 x115 x424 x64))
(assert (x306 x482))
(assert (x306 x106))
(assert (x49 (- x366 x155)))
(assert (x306 x425))
(assert (x166 x366 (- x242 x309)))
(assert (x166 x309 x276))
(assert (x49 (- x64 x115)))
(assert (and (x2 3 x335) (x281 3 x335) (= (* x335 3) (x300 3 x335)) (and (= (- (* 3 (- x335 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x335 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x300 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) (- x335 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 (- 115792089237316195423570985008687907853269984665640564039457584007913129639933) x335) (- (* x335 3) (* x335 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x300 3 (- x335 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 3 (- x335 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x159 3 x335) (x288 3 x335) (x8 3 x335)))
(assert (x306 x202))
(assert (x268 x64 x424 x309 x276))
(assert (x306 x232))
(assert (x49 (- x424 x275)))
(assert (x306 x391))
(assert (x306 x103))
(assert (x166 x64 (- x424 x322)))
(assert (x67 x140 x155 x242 x366))
(assert (=> (<= x314 10000) (= (x282 x314) (x143 x314))))
(assert (x306 x171))
(assert (x306 x478))
(assert (x49 (- x366 x309)))
(assert (x67 x115 x322 x64 x424))
(assert (x306 x29))
(assert (x67 x155 x140 x115 x322))
(assert (x268 x87 x275 x64 x424))
(assert (x67 x424 x64 x322 x115))
(assert (x306 x324))
(assert (x306 x62))
(assert (x49 (- x366 x275)))
(assert (x49 (- x424 x366)))
(assert (x166 x61 (- x248 x309)))
(assert (x49 (- x322 x248)))
(assert (x19 1461501637330902918203684832716283019655932542975))
(assert (x166 x155 (- x140 x275)))
(assert (x268 x242 x366 x322 x115))
(assert (x67 x87 x275 x242 x366))
(assert (x67 x424 x64 x115 x322))
(assert (x49 (- x248 x366)))
(assert (x306 x212))
(assert (x166 x64 (- x424 x87)))
(assert (x166 x140 (- x155 x275)))
(assert (x67 x155 x140 x87 x275))
(assert (x306 x22))
(assert (x67 x366 x242 x61 x248))
(assert (x306 x210))
(assert (x306 x170))
(assert (= (x355 (x143 x224)) x224))
(assert (x306 x299))
(assert (x49 (- x61 x115)))
(assert (x306 x438))
(assert (x49 (- x276 x424)))
(assert (x49 (- x242 x64)))
(assert (x306 x15))
(assert (x422 x365))
(assert (x49 (- x87 x155)))
(assert (x49 (- x64 x140)))
(assert (x422 x248))
(assert (= (x355 (x282 1889567281)) 1889567281))
(assert (x268 x366 x242 x275 x87))
(assert (x49 (- x248 x115)))
(assert (x306 x424))
(assert (x49 (- x322 x424)))
(assert (x166 x155 (- x140 x242)))
(assert (x49 (- x87 x242)))
(assert (x306 x385))
(assert (= (x143 340282366920938463463374607431768211456) (x282 340282366920938463463374607431768211456)))
(assert (x306 x445))
(assert (x67 x115 x322 x61 x248))
(assert (x67 x155 x140 x424 x64))
(assert (x67 x115 x322 x366 x242))
(assert (x306 x58))
(assert (x49 (- x64 x248)))
(assert (x67 x275 x87 x248 x61))
(assert (x49 (- x242 x275)))
(assert (= (x282 94699471215667416670508682402181198833950827816622411988269365108481485438976) (x143 94699471215667416670508682402181198833950827816622411988269365108481485438976)))
(assert (x306 x173))
(assert (x306 x164))
(assert (x49 (- x61 x275)))
(assert (x306 x147))
(assert (x306 x384))
(assert (x67 x248 x61 x87 x275))
(assert (x49 (- x275 x155)))
(assert (=> (>= 10000 x360) (= (x143 x360) (x282 x360))))
(assert (x268 x115 x322 x61 x248))
(assert (x49 x366))
(assert (x49 (- x242 x140)))
(assert (x306 x76))
(assert (x306 x439))
(assert (x306 x386))
(assert (x49 (- x87 x424)))
(assert (x306 x307))
(assert (x306 x292))
(assert (=> (>= 10000 x30) (= (x143 x30) (x282 x30))))
(assert (x306 x314))
(assert (x306 x295))
(assert (x306 x227))
(assert (x67 x242 x366 x276 x309))
(assert (x166 x248 (- x61 x309)))
(assert (x166 x155 (- x140 x366)))
(assert (= (x355 (x282 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x306 x399))
(assert (x49 (- x61 x242)))
(assert (x306 x50))
(assert (=> (<= x436 10000) (= (x143 x436) (x282 x436))))
(assert (x306 x142))
(assert (x306 x377))
(assert (x268 x64 x424 x366 x242))
(assert (x306 x261))
(assert (x306 x393))
(assert (x306 x228))
(assert (x67 x140 x155 x424 x64))
(assert (x306 x135))
(assert (x49 x242))
(assert (x49 (- x242 x87)))
(assert (x166 x64 (- x424 x276)))
(assert (x268 x248 x61 x309 x276))
(assert (x67 x424 x64 x366 x242))
(assert (x306 x153))
(assert (x67 x61 x248 x242 x366))
(assert (= 115792089237316195423570985008687907853269984665640 (x355 (x282 115792089237316195423570985008687907853269984665640))))
(assert (x166 x140 (- x155 x322)))
(assert (x306 x221))
(assert (x306 x474))
(assert (x306 x43))
(assert (and (x193 x278 1000000000000000000000000000) (x457 x278 1000000000000000000000000000) (x55 x278 1000000000000000000000000000) (=> (and (> x278 0) (> 1000000000000000000000000000 0)) (and (>= x278 (* 1000000000000000000000000000 (x98 x278 1000000000000000000000000000))) (< (- x278 1000000000000000000000000000) (* 1000000000000000000000000000 (x98 x278 1000000000000000000000000000))))) (x47 x278 1000000000000000000000000000)))
(assert (x49 (- x366 x322)))
(assert (x67 x61 x248 x275 x87))
(assert (x166 x140 (- x155 x64)))
(assert (x49 (- x276 x242)))
(assert (x166 x115 (- x322 x424)))
(assert (x306 x473))
(assert (x67 x276 x309 x61 x248))
(assert (x49 (- x424 x322)))
(assert (x166 x87 (- x275 x61)))
(assert (= x152 (=> (and (and (= (= 0 x61) x190) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x128 x203)) (= x128 x401) (= x443 x203) (= (+ x401 x443) x122) (= x107 (x114 320)) (= x190 x27)) (and (and (= x158 x60) (= (x183 (x300 x64 x424)) x58) (= (x387 (+ 500000000000000000000000000 x58)) x365) (< 0 x169) (= x285 (ite x154 1 0)) (<= x64 340282366920938463463374607431768211455) (= x169 (x162 (x143 x324))) (= 1889567281 x391) (= x64 (x181 x259)) (> x285 0) (= (x98 115792089237316195423570985008687907853269984665640064039457584007913129639935 x424) x319) (= (= 0 x424) x84) (> 340282366920938463463374607431768211456 x64) (<= x299 1461501637330902918203684832716283019655932542975) (= (or x84 x80) x154) (= x80 (not x75)) (not (< x391 1865579259)) (= x259 (x409 (x143 x299) (x282 52) 0)) (= x299 x277) (<= x94 1461501637330902918203684832716283019655932542975) (= (x98 x365 1000000000000000000000000000) x158) (= x424 (x348 128)) (> 1461501637330902918203684832716283019655932542976 x94) (= (< x319 x64) x75) (not (= 1865579259 x391)) (>= x64 0) (> 2113256763 x391) (not (< x391 826074471)) (<= 0 x94)) (and (= (+ x334 x195) x420) (= x134 x131) (= x423 x419) (= x175 (>= x351 x59)) (= (+ x37 x303) x351) (= (>= x420 x134) x124) (= 3 x298) (= x60 x131) (= x141 (and x175 x124)) (= (* x335 3) x37) (= x335 x423) (= x59 x388) (= x195 (* 3 x419)) (= x131 x303) (= x52 3) (= x388 x334)))) x141)))
(assert (x306 x333))
(assert (x166 x309 (- x276 x155)))
(assert (x49 (- x115 x64)))
(assert (x67 x155 x140 x276 x309))
(assert (x24 x353))
(assert (x67 x155 x140 x309 x276))
(assert (x306 x240))
(assert (= (and x57 x16) x186))
(assert (x49 (- x242 x424)))
(assert (x306 x298))
(assert (x166 x242 (- x366 x248)))
(assert (x268 x275 x87 x366 x242))
(check-sat)
(exit)
