(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x791 0)) (((x763 (x364 Int)) (x173 (x6 x791) (x867 x791) (x733 Int)) (x208 (x859 x791) (x200 Int)))))
(declare-fun x72 () Int)
(declare-fun x309 () Int)
(declare-fun x467 () Int)
(declare-fun x557 () Bool)
(declare-fun x571 () Bool)
(declare-fun x32 () Bool)
(declare-fun x892 () Bool)
(declare-fun x453 () Bool)
(declare-fun x855 () Bool)
(declare-fun x973 () Bool)
(declare-fun x158 () Int)
(declare-fun x799 () Int)
(declare-fun x766 () Bool)
(declare-fun x793 () Int)
(declare-fun x39 (Int Int) Int)
(declare-fun x83 () Bool)
(declare-fun x243 () Int)
(declare-fun x513 () Int)
(declare-fun x1027 () Bool)
(declare-fun x555 () Int)
(declare-fun x803 () Int)
(declare-fun x93 () Int)
(declare-fun x1002 () Bool)
(declare-fun x852 () Int)
(declare-fun x1030 () Bool)
(declare-fun x350 () Bool)
(declare-fun x189 () Int)
(declare-fun x123 (x791) Int)
(declare-fun x1086 () Bool)
(declare-fun x62 (Int) Int)
(declare-fun x700 () Bool)
(declare-fun x726 () Int)
(declare-fun x734 (x791) Int)
(declare-fun x258 () Bool)
(declare-fun x662 () Int)
(declare-fun x878 () Bool)
(declare-fun x777 () Bool)
(declare-fun x1073 () Bool)
(declare-fun x78 () Int)
(declare-fun x1079 () Bool)
(declare-fun x328 (Int Int) Int)
(declare-fun x150 () Int)
(declare-fun x740 () Int)
(declare-fun x971 () Bool)
(declare-fun x444 () Bool)
(declare-fun x185 () Int)
(declare-fun x510 () Bool)
(declare-fun x31 () Bool)
(declare-fun x408 () Bool)
(declare-fun x478 () Bool)
(declare-fun x807 () Int)
(declare-fun x465 () Int)
(declare-fun x134 () Bool)
(declare-fun x923 () Bool)
(declare-fun x381 () Int)
(declare-fun x422 () Bool)
(declare-fun x573 () Bool)
(declare-fun x401 () Int)
(declare-fun x624 () Int)
(declare-fun x551 () Bool)
(declare-fun x986 () Bool)
(declare-fun x81 () Int)
(declare-fun x559 () Bool)
(declare-fun x1085 () Bool)
(declare-fun x63 () Int)
(declare-fun x669 () Int)
(declare-fun x677 () Int)
(declare-fun x899 () Bool)
(declare-fun x235 (x791) Int)
(declare-fun x860 () Int)
(declare-fun x263 () Bool)
(declare-fun x574 () Int)
(declare-fun x893 () Int)
(declare-fun x757 () Int)
(declare-fun x454 () Int)
(declare-fun x889 () Bool)
(declare-fun x423 () Bool)
(declare-fun x54 () Int)
(declare-fun x920 () Int)
(declare-fun x314 () Int)
(declare-fun x934 () Bool)
(declare-fun x567 () Int)
(declare-fun x384 () Bool)
(declare-fun x1017 () Bool)
(declare-fun x942 () Int)
(declare-fun x517 () Bool)
(declare-fun x486 () Bool)
(declare-fun x326 () Bool)
(declare-fun x313 () Bool)
(declare-fun x667 () Bool)
(declare-fun x632 () Int)
(declare-fun x245 () Int)
(declare-fun x982 () Int)
(declare-fun x922 () Int)
(declare-fun x51 () Int)
(declare-fun x673 () Bool)
(declare-fun x28 () Int)
(declare-fun x17 () Int)
(declare-fun x292 () Int)
(declare-fun x833 () Int)
(declare-fun x254 () Int)
(declare-fun x287 () Bool)
(declare-fun x755 () Bool)
(declare-fun x691 () Int)
(declare-fun x660 () Bool)
(declare-fun x603 () Int)
(declare-fun x240 () Int)
(declare-fun x868 () Bool)
(declare-fun x90 () Int)
(declare-fun x252 () Int)
(declare-fun x589 () Int)
(declare-fun x224 () Int)
(declare-fun x448 () Bool)
(declare-fun x388 () Bool)
(declare-fun x954 () Int)
(declare-fun x223 () Bool)
(declare-fun x579 () Int)
(declare-fun x519 () Bool)
(declare-fun x427 () Int)
(declare-fun x641 () Bool)
(declare-fun x810 () Bool)
(declare-fun x708 () Bool)
(declare-fun x584 () Bool)
(declare-fun x166 () Int)
(declare-fun x696 () Bool)
(declare-fun x203 () Bool)
(declare-fun x46 () Int)
(declare-fun x782 () Int)
(declare-fun x678 () Int)
(declare-fun x964 () Bool)
(declare-fun x198 () Bool)
(declare-fun x380 () Bool)
(declare-fun x545 () Int)
(declare-fun x215 () Bool)
(declare-fun x847 () Int)
(declare-fun x120 () Bool)
(declare-fun x693 () Int)
(declare-fun x247 () Bool)
(declare-fun x1043 (Int) x791)
(declare-fun x957 () Int)
(declare-fun x597 () Int)
(declare-fun x883 () Bool)
(declare-fun x865 () Bool)
(declare-fun x441 () Bool)
(declare-fun x496 () Int)
(declare-fun x135 () Int)
(declare-fun x619 () Int)
(declare-fun x139 () Bool)
(declare-fun x340 (Int) Int)
(declare-fun x581 () Int)
(declare-fun x620 () Bool)
(declare-fun x583 (x791) Int)
(declare-fun x980 () Int)
(declare-fun x53 () Int)
(declare-fun x452 () Int)
(declare-fun x594 () Int)
(declare-fun x768 () Bool)
(declare-fun x113 () Bool)
(declare-fun x644 () Bool)
(declare-fun x76 () Int)
(declare-fun x27 () Bool)
(declare-fun x1062 () Int)
(declare-fun x758 () Bool)
(declare-fun x73 () Int)
(declare-fun x692 () Int)
(declare-fun x1061 (Int) Int)
(declare-fun x1092 () Bool)
(declare-fun x391 () Bool)
(declare-fun x144 (Int) Int)
(declare-fun x969 () Int)
(declare-fun x8 () Int)
(declare-fun x936 () Bool)
(declare-fun x1034 (Int) Int)
(declare-fun x246 () Bool)
(declare-fun x352 () Int)
(declare-fun x690 () Bool)
(declare-fun x521 () Bool)
(declare-fun x989 () Int)
(declare-fun x332 () Int)
(declare-fun x369 () Int)
(declare-fun x1056 () Bool)
(declare-fun x534 () Int)
(declare-fun x498 () Int)
(declare-fun x888 () Bool)
(declare-fun x716 () Int)
(declare-fun x159 () Bool)
(declare-fun x24 () Bool)
(declare-fun x841 () Bool)
(declare-fun x608 () Bool)
(declare-fun x306 () Bool)
(declare-fun x282 () Int)
(declare-fun x1025 () Int)
(declare-fun x161 () Bool)
(declare-fun x20 () Bool)
(declare-fun x361 () Int)
(declare-fun x152 () Int)
(declare-fun x822 () Int)
(declare-fun x219 () Int)
(declare-fun x701 () Int)
(declare-fun x311 () Int)
(declare-fun x1012 () Int)
(declare-fun x497 (Int) Int)
(declare-fun x743 () Int)
(declare-fun x26 () Bool)
(declare-fun x938 () Bool)
(declare-fun x676 () Int)
(declare-fun x330 () Int)
(declare-fun x904 () Int)
(declare-fun x167 () Bool)
(declare-fun x357 () Bool)
(declare-fun x939 () Int)
(declare-fun x918 () Int)
(declare-fun x114 () Bool)
(declare-fun x140 () Int)
(declare-fun x302 () Int)
(declare-fun x406 () Int)
(declare-fun x535 () Bool)
(declare-fun x970 () Int)
(declare-fun x460 () Int)
(declare-fun x853 () Bool)
(declare-fun x428 () Bool)
(declare-fun x154 () Int)
(declare-fun x130 () Int)
(declare-fun x429 () Bool)
(declare-fun x661 () Int)
(declare-fun x109 (Int) Int)
(declare-fun x481 () Int)
(declare-fun x866 () Bool)
(declare-fun x1041 () Bool)
(declare-fun x317 () Bool)
(declare-fun x805 () Bool)
(declare-fun x985 () Bool)
(declare-fun x560 () Bool)
(declare-fun x181 () Int)
(declare-fun x286 () Int)
(declare-fun x1089 () Int)
(declare-fun x469 () Int)
(declare-fun x125 () Bool)
(declare-fun x270 () Int)
(declare-fun x1088 () Int)
(declare-fun x95 () Bool)
(declare-fun x373 () Int)
(declare-fun x206 () Bool)
(declare-fun x290 () Bool)
(declare-fun x89 () Bool)
(declare-fun x244 () Int)
(declare-fun x99 () Int)
(declare-fun x882 () Bool)
(declare-fun x829 () Bool)
(declare-fun x945 () Bool)
(declare-fun x529 () Int)
(declare-fun x992 () Bool)
(declare-fun x728 () Bool)
(declare-fun x981 () Int)
(declare-fun x377 () Bool)
(declare-fun x837 () Int)
(declare-fun x504 () Bool)
(declare-fun x1048 () Bool)
(declare-fun x35 (Int Int) Int)
(declare-fun x70 () Bool)
(declare-fun x266 () Int)
(declare-fun x339 () Int)
(declare-fun x703 () Int)
(declare-fun x5 () Int)
(declare-fun x838 () Bool)
(declare-fun x165 () Bool)
(declare-fun x459 () Int)
(declare-fun x637 () Bool)
(declare-fun x779 () Int)
(declare-fun x1082 () Int)
(declare-fun x600 () Bool)
(declare-fun x961 () Bool)
(declare-fun x565 () Bool)
(declare-fun x449 () Bool)
(declare-fun x420 () Bool)
(declare-fun x984 () Int)
(declare-fun x1058 () Bool)
(declare-fun x289 () Int)
(declare-fun x596 () Int)
(declare-fun x96 () Int)
(declare-fun x475 () Bool)
(declare-fun x929 () Int)
(declare-fun x613 () Int)
(declare-fun x227 () Int)
(declare-fun x1065 () Int)
(declare-fun x990 () Int)
(declare-fun x933 () Int)
(declare-fun x360 () Int)
(declare-fun x436 () Int)
(declare-fun x101 () Int)
(declare-fun x630 () Int)
(declare-fun x857 () Int)
(declare-fun x932 () Int)
(declare-fun x672 () Int)
(declare-fun x512 () Bool)
(declare-fun x570 () Bool)
(declare-fun x346 () Int)
(declare-fun x196 () Int)
(declare-fun x446 () Int)
(declare-fun x281 () Int)
(declare-fun x217 () Bool)
(declare-fun x674 () Int)
(declare-fun x1081 () Bool)
(declare-fun x839 () Bool)
(declare-fun x724 () Int)
(declare-fun x968 () Int)
(declare-fun x488 () Int)
(declare-fun x407 () Int)
(declare-fun x301 () Int)
(declare-fun x119 () Int)
(declare-fun x725 () Int)
(declare-fun x58 () Int)
(declare-fun x978 () Int)
(declare-fun x675 () Bool)
(declare-fun x40 () Bool)
(declare-fun x151 () Int)
(declare-fun x175 () Bool)
(declare-fun x268 () Int)
(declare-fun x468 () Bool)
(declare-fun x463 () Bool)
(declare-fun x295 () Int)
(declare-fun x213 () Int)
(declare-fun x1026 () Int)
(declare-fun x147 () Bool)
(declare-fun x679 () Int)
(declare-fun x365 () Int)
(declare-fun x997 () Int)
(declare-fun x315 () Int)
(declare-fun x11 () Int)
(declare-fun x917 () Int)
(declare-fun x337 () Int)
(declare-fun x633 () Int)
(declare-fun x405 () Int)
(declare-fun x800 () Int)
(declare-fun x1020 () Bool)
(declare-fun x13 () Int)
(declare-fun x850 () Int)
(declare-fun x602 () Int)
(declare-fun x999 () Int)
(declare-fun x864 () Int)
(declare-fun x431 () Int)
(declare-fun x811 () Bool)
(declare-fun x783 () Int)
(declare-fun x544 () Int)
(declare-fun x709 () Bool)
(declare-fun x160 () Bool)
(declare-fun x946 () Bool)
(declare-fun x1042 () Int)
(declare-fun x1035 () Int)
(declare-fun x335 () Int)
(declare-fun x1069 () Int)
(declare-fun x591 () Int)
(declare-fun x366 () Int)
(declare-fun x241 () Int)
(declare-fun x995 () Bool)
(declare-fun x590 () Bool)
(declare-fun x472 () Bool)
(declare-fun x97 () Bool)
(declare-fun x832 () Int)
(declare-fun x586 () Int)
(declare-fun x162 () Int)
(declare-fun x687 () Bool)
(declare-fun x260 () Int)
(declare-fun x848 () Int)
(declare-fun x122 () Int)
(declare-fun x230 () Int)
(declare-fun x974 () Int)
(declare-fun x149 () Bool)
(declare-fun x128 () Bool)
(declare-fun x291 () Bool)
(declare-fun x683 () Int)
(declare-fun x303 () Int)
(declare-fun x194 () Bool)
(declare-fun x319 () Int)
(declare-fun x756 () Int)
(declare-fun x15 () Bool)
(declare-fun x1066 () Int)
(declare-fun x649 () Bool)
(declare-fun x193 () Int)
(declare-fun x248 () Bool)
(declare-fun x778 () Int)
(declare-fun x104 () Bool)
(declare-fun x894 () Int)
(declare-fun x490 () Bool)
(declare-fun x808 () Bool)
(declare-fun x796 () Int)
(declare-fun x963 () Int)
(declare-fun x187 () Int)
(declare-fun x1091 () Int)
(declare-fun x891 () Bool)
(declare-fun x484 () Int)
(declare-fun x170 () Int)
(declare-fun x843 () Bool)
(declare-fun x738 () Int)
(declare-fun x1090 () Int)
(declare-fun x979 () Bool)
(declare-fun x505 () Bool)
(declare-fun x576 () Int)
(declare-fun x64 () Int)
(declare-fun x414 () Int)
(declare-fun x578 () Int)
(declare-fun x903 () Int)
(declare-fun x762 () Int)
(declare-fun x451 () Bool)
(declare-fun x304 () Bool)
(declare-fun x485 () Int)
(declare-fun x34 () Bool)
(declare-fun x238 () Int)
(declare-fun x264 () Bool)
(declare-fun x792 () Bool)
(declare-fun x821 () Int)
(declare-fun x784 () Bool)
(declare-fun x802 () Int)
(declare-fun x622 () Bool)
(declare-fun x835 () Int)
(declare-fun x816 () Int)
(declare-fun x588 () Bool)
(declare-fun x42 () Bool)
(declare-fun x214 () Bool)
(declare-fun x22 () Bool)
(declare-fun x271 () Bool)
(declare-fun x277 () Int)
(declare-fun x501 () Int)
(declare-fun x912 () Int)
(declare-fun x925 () Int)
(declare-fun x392 () Bool)
(declare-fun x879 () Bool)
(declare-fun x817 () Bool)
(declare-fun x4 () Int)
(declare-fun x201 () Bool)
(declare-fun x1007 () Int)
(declare-fun x764 () Int)
(declare-fun x713 () Bool)
(declare-fun x648 () Bool)
(declare-fun x558 () Int)
(declare-fun x110 () Bool)
(declare-fun x645 () Int)
(declare-fun x383 () Bool)
(declare-fun x1001 () Bool)
(declare-fun x250 () Bool)
(declare-fun x568 () Int)
(declare-fun x379 () Bool)
(declare-fun x184 () Bool)
(declare-fun x121 () Bool)
(declare-fun x1023 () Int)
(declare-fun x417 () Bool)
(declare-fun x397 () Int)
(declare-fun x18 () Bool)
(declare-fun x686 () Bool)
(declare-fun x731 () Bool)
(declare-fun x911 () Bool)
(declare-fun x895 () Int)
(declare-fun x746 () Bool)
(declare-fun x424 () Int)
(declare-fun x318 () Int)
(declare-fun x1077 () Int)
(declare-fun x395 () Int)
(declare-fun x941 () Bool)
(declare-fun x1072 () Int)
(declare-fun x480 () Bool)
(declare-fun x524 () Int)
(declare-fun x616 () Int)
(declare-fun x1040 () Bool)
(declare-fun x610 () Bool)
(declare-fun x569 (x791) Int)
(declare-fun x386 () Bool)
(declare-fun x378 (Int) Int)
(declare-fun x371 () Int)
(declare-fun x300 () Bool)
(declare-fun x532 () Int)
(declare-fun x399 () Int)
(declare-fun x856 () Int)
(declare-fun x527 () Bool)
(declare-fun x275 () Int)
(declare-fun x1009 () Bool)
(declare-fun x188 () Int)
(declare-fun x862 () Bool)
(declare-fun x752 () Bool)
(declare-fun x886 () Int)
(declare-fun x625 () Bool)
(declare-fun x702 () Int)
(declare-fun x435 () Int)
(declare-fun x169 () Bool)
(declare-fun x205 (x791) Int)
(declare-fun x770 () Bool)
(declare-fun x112 () Int)
(declare-fun x996 () Bool)
(declare-fun x775 () Bool)
(declare-fun x474 (Int Int) Int)
(declare-fun x1055 () Int)
(declare-fun x727 () Bool)
(declare-fun x438 () Bool)
(declare-fun x790 () Bool)
(declare-fun x761 () Bool)
(declare-fun x470 () Int)
(declare-fun x338 () Bool)
(declare-fun x719 () Int)
(declare-fun x479 () Int)
(declare-fun x813 () Bool)
(declare-fun x827 () Int)
(declare-fun x36 () Int)
(declare-fun x74 () Bool)
(declare-fun x1006 () Bool)
(declare-fun x1032 () Int)
(declare-fun x1010 () Int)
(declare-fun x966 () Int)
(declare-fun x876 () Bool)
(declare-fun x552 () Int)
(declare-fun x1051 () Bool)
(declare-fun x299 () Int)
(declare-fun x718 () Bool)
(declare-fun x1071 () Bool)
(declare-fun x750 () Int)
(declare-fun x828 () Bool)
(declare-fun x362 () Int)
(declare-fun x538 () Int)
(declare-fun x722 () Bool)
(declare-fun x1045 () Bool)
(declare-fun x991 () Bool)
(declare-fun x1094 () Int)
(declare-fun x1016 () Int)
(declare-fun x19 () Bool)
(declare-fun x82 () Int)
(declare-fun x582 () Bool)
(declare-fun x953 () Int)
(declare-fun x60 (Int) Int)
(declare-fun x711 () Bool)
(declare-fun x61 () Int)
(declare-fun x940 () Int)
(declare-fun x132 () Bool)
(declare-fun x809 () Int)
(declare-fun x207 () Int)
(declare-fun x804 () Bool)
(declare-fun x85 () Bool)
(declare-fun x155 () Bool)
(declare-fun x952 () Int)
(declare-fun x274 () Int)
(declare-fun x455 () Int)
(declare-fun x665 () Int)
(declare-fun x729 () Bool)
(declare-fun x344 () Int)
(declare-fun x179 () Bool)
(declare-fun x642 (x791) Int)
(declare-fun x50 () Int)
(declare-fun x1044 () Bool)
(declare-fun x67 () Int)
(declare-fun x212 () Int)
(declare-fun x927 () Bool)
(declare-fun x523 () Int)
(declare-fun x462 () Bool)
(declare-fun x323 () Int)
(declare-fun x735 () Bool)
(declare-fun x52 () Int)
(declare-fun x525 () Bool)
(declare-fun x639 () Bool)
(declare-fun x108 () Int)
(declare-fun x382 () Int)
(declare-fun x601 () Bool)
(declare-fun x75 () Bool)
(declare-fun x192 () Bool)
(declare-fun x137 () Int)
(declare-fun x781 () Int)
(declare-fun x325 () Int)
(declare-fun x80 () Bool)
(declare-fun x308 () Bool)
(declare-fun x721 () Int)
(declare-fun x483 () Bool)
(declare-fun x509 () Bool)
(declare-fun x127 () Int)
(declare-fun x1038 () Int)
(declare-fun x1052 () Int)
(declare-fun x965 () Int)
(declare-fun x138 () Int)
(declare-fun x771 () Int)
(declare-fun x199 () Int)
(declare-fun x554 () Bool)
(declare-fun x626 () Int)
(declare-fun x157 () Int)
(declare-fun x767 () Int)
(declare-fun x577 () Bool)
(declare-fun x1047 () Bool)
(declare-fun x398 () Bool)
(declare-fun x780 () Bool)
(declare-fun x640 () Bool)
(declare-fun x296 () Bool)
(declare-fun x653 () Bool)
(declare-fun x944 () Bool)
(declare-fun x769 () Int)
(declare-fun x531 () Bool)
(declare-fun x607 () Bool)
(declare-fun x368 () Bool)
(declare-fun x530 () Bool)
(declare-fun x880 () Int)
(declare-fun x375 () Bool)
(declare-fun x14 () Bool)
(declare-fun x627 () Int)
(declare-fun x272 () Int)
(declare-fun x293 () Int)
(declare-fun x237 () Int)
(declare-fun x745 () Int)
(declare-fun x670 () Bool)
(declare-fun x950 () Int)
(declare-fun x242 () Int)
(declare-fun x487 () Bool)
(declare-fun x1014 () Bool)
(declare-fun x710 () Bool)
(declare-fun x12 () Int)
(declare-fun x124 () Int)
(declare-fun x285 () Bool)
(declare-fun x919 () Bool)
(declare-fun x748 () Bool)
(declare-fun x580 () Bool)
(declare-fun x256 () Bool)
(declare-fun x10 () Int)
(declare-fun x774 () Bool)
(declare-fun x749 () Int)
(declare-fun x884 () Int)
(declare-fun x611 () Int)
(declare-fun x930 () Bool)
(declare-fun x798 () Int)
(declare-fun x618 () Int)
(declare-fun x515 () Bool)
(declare-fun x419 () Bool)
(declare-fun x654 () Bool)
(declare-fun x785 () Int)
(declare-fun x998 () Bool)
(declare-fun x1004 () Int)
(declare-fun x259 () Bool)
(declare-fun x57 () Bool)
(declare-fun x916 () Int)
(declare-fun x959 () Bool)
(declare-fun x363 () Int)
(declare-fun x650 () Int)
(declare-fun x947 () Bool)
(declare-fun x495 () Int)
(declare-fun x171 () Int)
(declare-fun x202 () Int)
(declare-fun x307 () Bool)
(declare-fun x520 () Int)
(declare-fun x870 () Int)
(declare-fun x914 () Int)
(declare-fun x195 () Bool)
(declare-fun x86 () Bool)
(declare-fun x628 () Int)
(declare-fun x931 () Bool)
(declare-fun x404 () Bool)
(declare-fun x389 () Bool)
(declare-fun x65 () Int)
(declare-fun x394 () Int)
(declare-fun x298 () Int)
(declare-fun x685 () Bool)
(declare-fun x439 () Int)
(declare-fun x473 () Int)
(declare-fun x59 () Int)
(declare-fun x376 () Int)
(declare-fun x1008 () Int)
(declare-fun x905 () Int)
(declare-fun x94 () Int)
(declare-fun x91 () Bool)
(declare-fun x354 () Int)
(declare-fun x218 () Bool)
(declare-fun x877 () Bool)
(declare-fun x823 () Bool)
(declare-fun x234 () Int)
(declare-fun x541 () Int)
(declare-fun x492 () Bool)
(declare-fun x842 () Bool)
(declare-fun x797 () Int)
(declare-fun x824 () Bool)
(declare-fun x461 () Int)
(declare-fun x312 () Bool)
(declare-fun x1087 () Bool)
(declare-fun x1076 () Bool)
(declare-fun x915 () Int)
(declare-fun x664 () Int)
(declare-fun x1 () Int)
(declare-fun x849 () Int)
(declare-fun x614 () Int)
(declare-fun x105 () Bool)
(declare-fun x29 (Int) Int)
(declare-fun x33 () Int)
(declare-fun x563 () Bool)
(declare-fun x699 () Int)
(declare-fun x341 () Bool)
(declare-fun x38 () Bool)
(declare-fun x592 () Int)
(declare-fun x324 () Bool)
(declare-fun x958 () Int)
(declare-fun x432 () Int)
(declare-fun x812 () Int)
(declare-fun x156 () Bool)
(declare-fun x316 () Bool)
(declare-fun x1049 () Int)
(declare-fun x561 () Bool)
(declare-fun x288 () Bool)
(declare-fun x48 () Int)
(declare-fun x575 () Int)
(declare-fun x220 () Int)
(declare-fun x680 () Int)
(declare-fun x66 () Bool)
(declare-fun x232 () Int)
(declare-fun x21 () Int)
(declare-fun x593 () Bool)
(declare-fun x416 () Int)
(declare-fun x956 () Bool)
(declare-fun x825 () Bool)
(declare-fun x437 () Int)
(declare-fun x972 () Bool)
(declare-fun x695 () Int)
(declare-fun x564 () Int)
(declare-fun x634 () Bool)
(declare-fun x987 () Int)
(declare-fun x2 () Bool)
(declare-fun x225 () Int)
(declare-fun x458 () Int)
(declare-fun x598 () Int)
(declare-fun x908 () Bool)
(declare-fun x706 () Int)
(declare-fun x871 () Bool)
(declare-fun x400 () Bool)
(declare-fun x257 () Int)
(declare-fun x336 () Bool)
(declare-fun x546 () Int)
(declare-fun x836 () Int)
(declare-fun x211 () Int)
(declare-fun x846 () Bool)
(declare-fun x493 () Bool)
(declare-fun x269 () Bool)
(declare-fun x730 () Bool)
(declare-fun x789 () Bool)
(declare-fun x426 () Int)
(declare-fun x1054 () Int)
(declare-fun x935 () Int)
(declare-fun x651 () Int)
(declare-fun x418 () Int)
(declare-fun x652 () Bool)
(declare-fun x1021 () Int)
(declare-fun x646 () Int)
(declare-fun x393 () Bool)
(declare-fun x3 () Bool)
(declare-fun x153 () Bool)
(declare-fun x7 () Bool)
(declare-fun x255 () Int)
(declare-fun x983 () Bool)
(declare-fun x126 () Int)
(declare-fun x1000 () Bool)
(declare-fun x926 () Bool)
(declare-fun x507 () Int)
(declare-fun x550 () Int)
(declare-fun x348 () Int)
(declare-fun x636 () Bool)
(declare-fun x1063 () Bool)
(declare-fun x819 (Int) Int)
(declare-fun x826 () Int)
(declare-fun x410 () Bool)
(declare-fun x547 () Int)
(declare-fun x907 () Bool)
(declare-fun x117 () Int)
(declare-fun x698 () Bool)
(declare-fun x951 () Bool)
(declare-fun x321 () Int)
(declare-fun x415 () Bool)
(declare-fun x631 () Bool)
(declare-fun x1059 () Int)
(declare-fun x806 () Bool)
(declare-fun x411 () Int)
(declare-fun x609 () Bool)
(declare-fun x412 () Int)
(declare-fun x1093 () Int)
(declare-fun x466 () Int)
(declare-fun x347 () Int)
(declare-fun x514 () Int)
(declare-fun x599 () Bool)
(declare-fun x606 () Int)
(declare-fun x87 () Bool)
(declare-fun x890 () Int)
(declare-fun x655 () Int)
(declare-fun x897 () Int)
(declare-fun x172 () Bool)
(declare-fun x815 () Bool)
(declare-fun x41 () Bool)
(declare-fun x84 () Int)
(declare-fun x216 () Int)
(declare-fun x537 () Bool)
(declare-fun x741 (Int) Int)
(declare-fun x739 () Int)
(declare-fun x1060 () Int)
(declare-fun x55 (Int Int) Int)
(declare-fun x909 () Bool)
(declare-fun x754 () Bool)
(declare-fun x556 () Bool)
(declare-fun x102 () Bool)
(declare-fun x228 () Bool)
(declare-fun x732 () Int)
(declare-fun x251 () Bool)
(declare-fun x261 () Bool)
(declare-fun x659 () Int)
(declare-fun x707 () Int)
(declare-fun x765 () Int)
(declare-fun x851 () Bool)
(declare-fun x518 (x791) Int)
(declare-fun x977 () Bool)
(declare-fun x689 () Int)
(declare-fun x409 () Int)
(declare-fun x840 () Bool)
(declare-fun x111 () Bool)
(declare-fun x30 () Bool)
(declare-fun x717 () Int)
(declare-fun x658 () Bool)
(declare-fun x370 () Int)
(declare-fun x694 () Int)
(declare-fun x1033 () Int)
(declare-fun x280 () Bool)
(declare-fun x440 () Int)
(declare-fun x874 () Int)
(declare-fun x387 () Int)
(declare-fun x425 () Bool)
(declare-fun x47 () Bool)
(declare-fun x118 () Bool)
(declare-fun x267 () Int)
(declare-fun x500 () Bool)
(declare-fun x489 (Int Int) Int)
(declare-fun x367 () Int)
(declare-fun x814 () Int)
(declare-fun x1067 () Int)
(declare-fun x528 () Int)
(declare-fun x900 () Bool)
(declare-fun x830 () Bool)
(declare-fun x747 () Bool)
(declare-fun x343 () Bool)
(declare-fun x273 () Bool)
(declare-fun x1057 () Int)
(declare-fun x197 () Int)
(declare-fun x896 () Bool)
(declare-fun x1050 () Bool)
(declare-fun x107 () Int)
(declare-fun x508 () Bool)
(declare-fun x516 () Bool)
(declare-fun x615 () Int)
(declare-fun x359 () Bool)
(declare-fun x226 () Int)
(declare-fun x434 () Int)
(declare-fun x549 () Int)
(declare-fun x759 () Int)
(declare-fun x183 () Bool)
(declare-fun x450 () Bool)
(declare-fun x45 () Int)
(declare-fun x209 () Int)
(declare-fun x831 () Bool)
(declare-fun x572 () Int)
(declare-fun x668 () Bool)
(declare-fun x714 () Bool)
(declare-fun x684 () Bool)
(declare-fun x276 () Int)
(declare-fun x753 () Bool)
(declare-fun x617 () Bool)
(declare-fun x553 () Int)
(declare-fun x511 () Int)
(declare-fun x1097 () Bool)
(declare-fun x742 () Bool)
(declare-fun x1011 () Int)
(declare-fun x795 () Bool)
(declare-fun x587 () Bool)
(declare-fun x993 () Bool)
(declare-fun x887 () Int)
(declare-fun x374 () Bool)
(declare-fun x23 () Int)
(declare-fun x236 () Bool)
(declare-fun x885 () Int)
(declare-fun x666 () Bool)
(declare-fun x869 () Int)
(declare-fun x471 () Int)
(declare-fun x543 () Bool)
(declare-fun x433 () Int)
(declare-fun x186 () Int)
(declare-fun x906 () Bool)
(declare-fun x723 () Int)
(declare-fun x163 () Bool)
(declare-fun x221 () Bool)
(declare-fun x320 () Bool)
(declare-fun x1039 (Int) Int)
(declare-fun x1064 () Bool)
(declare-fun x960 () Bool)
(declare-fun x349 () Bool)
(declare-fun x233 () Int)
(declare-fun x284 () Int)
(declare-fun x115 () Int)
(declare-fun x861 () Bool)
(declare-fun x477 () Int)
(declare-fun x621 () Int)
(declare-fun x71 () Bool)
(declare-fun x100 () Bool)
(declare-fun x928 () Bool)
(declare-fun x881 () Int)
(declare-fun x548 () Bool)
(declare-fun x356 () Bool)
(declare-fun x442 () Int)
(declare-fun x116 () Int)
(declare-fun x948 () Bool)
(declare-fun x297 () Int)
(declare-fun x566 () Bool)
(declare-fun x43 () Int)
(declare-fun x385 () Int)
(declare-fun x647 () Int)
(declare-fun x168 () Bool)
(declare-fun x253 () Bool)
(declare-fun x204 () Int)
(declare-fun x372 () Int)
(declare-fun x491 () Int)
(declare-fun x92 () Int)
(declare-fun x294 () Int)
(declare-fun x476 () Bool)
(declare-fun x643 () Bool)
(define-fun x430 ((x791 x791) (x402 Int)) x791 (ite ((_ is x173) x791) (x173 (x6 x791) (x867 x791) (+ x402 (x733 x791))) (ite ((_ is x208) x791) (x208 (x859 x791) (+ (x200 x791) x402)) (x763 (+ (x364 x791) x402)))))
(define-fun x329 ((x16 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x16) (<= 0 x16)) x16 (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x351 ((x16 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x16) (> 0 x16)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x16) x16))
(define-fun x967 ((x16 Int)) Int (ite (and (< x16 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x16 0)) x16 (ite (and (< x16 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x16 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x16) (< x16 0)) (+ x16 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x328 x16 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x88 ((x772 Int)) Bool (and (< x772 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x772)))
(define-fun x681 ((x772 Int)) Bool (and (= x772 (x489 x772 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x772 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639935 x772))))
(define-fun x229 ((x772 Int)) Bool (and (= 0 (x489 x772 0)) (= (x489 0 x772) 0)))
(define-fun x145 ((x772 Int)) Bool (= x772 (x489 x772 x772)))
(define-fun x845 ((x772 Int)) Bool (and (x229 x772) (x681 x772) (x145 x772)))
(define-fun x103 ((x772 Int) (x403 Int)) Bool (= (x489 x772 x403) (x489 x403 x772)))
(define-fun x396 ((x772 Int) (x403 Int)) Bool (and (=> (<= 0 x403) (<= (x489 x772 x403) x403)) (>= (x489 x772 x403) 0) (=> (<= 0 x772) (>= x772 (x489 x772 x403)))))
(define-fun x44 ((x772 Int) (x403 Int)) Bool (and (x103 x772 x403) (x396 x772 x403)))
(define-fun x131 ((x772 Int)) Bool (= (+ (x328 x772 32) (x489 x772 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x967 x772)))
(define-fun x943 ((x772 Int)) Bool (and (x131 x772) (x44 x772 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x1070 ((x772 Int) (x403 Int)) Bool (and (>= (x328 x772 x403) 0) (< (x328 x772 x403) x403)))
(define-fun x635 ((x772 Int) (x403 Int)) Bool (=> (and (>= x772 0) (> x403 0)) (= (> x403 x772) (= x772 (x328 x772 x403)))))
(define-fun x542 ((x772 Int) (x403 Int)) Bool (=> (and (> x403 0) (and (>= x772 x403) (> (+ x403 x403) x772))) (= (- x772 x403) (x328 x772 x403))))
(define-fun x457 ((x772 Int)) Bool (= (x328 0 x772) 0))
(define-fun x873 ((x772 Int)) Bool (= 0 (x328 x772 1)))
(define-fun x562 ((x772 Int)) Bool (= 0 (x328 x772 x772)))
(define-fun x176 ((x772 Int)) Bool (and (x457 x772) (x873 x772) (x562 x772)))
(define-fun x345 ((x772 Int) (x403 Int)) Bool (=> (and (> x772 0) (> x403 0)) (= (= (x39 (x967 (x55 x772 x403)) x772) x403) (< (x55 x772 x403) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x265 ((x772 Int) (x403 Int)) Bool (=> (and (not (= 0 x403)) (not (= 0 x772))) (and (= x772 (x39 (x55 x772 x403) x403)) (= x403 (x39 (x55 x772 x403) x772)))))
(define-fun x1080 ((x772 Int) (x403 Int)) Bool (=> (and (> x772 0) (> x403 0)) (= (> (x55 x772 x403) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (x39 115792089237316195423570985008687907853269984665640564039457584007913129639935 x772) x403))))
(define-fun x1046 ((x772 Int) (x403 Int)) Bool (and (= (x967 (x55 x772 (- x403 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x967 (x55 x772 x403))) (= (x967 (x55 x772 x403)) (x967 (x55 (- x772 115792089237316195423570985008687907853269984665640564039457584007913129639936) x403))) (= (x967 (x55 x772 x403)) (x967 (x55 (- x772 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x403 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x141 ((x772 Int) (x403 Int)) Bool (and (=> (and (and (<= x772 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x772 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x403) (> x403 0))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x772) (x39 57896044618658097711785492504343953926634992332820282019728792003956564819968 x403)) (>= (x55 (- x772 115792089237316195423570985008687907853269984665640564039457584007913129639936) x403) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x403) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x403)) (and (> x772 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x772))) (= (>= (x39 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x403)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x772)) (<= (x55 (- x772 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x403 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x403) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x403)) (and (> x772 0) (<= x772 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x39 57896044618658097711785492504343953926634992332820282019728792003956564819968 x772) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x403)) (>= (x55 x772 (- x403 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x772) (> x772 0)) (and (<= x403 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x403))) (= (<= x772 (x39 57896044618658097711785492504343953926634992332820282019728792003956564819967 x403)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x55 x772 x403))))))
(define-fun x629 ((x772 Int)) Bool (and (= 0 (x55 0 x772)) (= 0 (x55 x772 0))))
(define-fun x464 ((x772 Int)) Bool (and (= (x55 x772 1) x772) (= (x55 1 x772) x772)))
(define-fun x413 ((x772 Int)) Bool (and (x629 x772) (x464 x772)))
(define-fun x663 ((x772 Int)) Bool (= (x489 x772 1461501637330902918203684832716283019655932542975) (x328 x772 1461501637330902918203684832716283019655932542976)))
(define-fun x283 ((x772 Int)) Bool (and (x663 x772) (x44 x772 1461501637330902918203684832716283019655932542975)))
(define-fun x445 ((x1053 Int)) Int (ite (> x1093 x1053) (x60 x1053) 0))
(define-fun x623 ((x1053 Int)) Int (x819 x1053))
(define-fun x305 ((x1053 x791)) Int (ite (= (x1043 x202) x1053) x1012 (x123 x1053)))
(define-fun x1013 ((x1053 x791)) Int (ite (= x1053 (x1043 x567)) x523 (x305 x1053)))
(define-fun x180 ((x1053 Int)) Int (ite (= x1053 128) x427 (x29 x1053)))
(define-fun x79 ((x1053 Int)) Int (ite (and (> (+ x427 160) x1053) (>= x1053 160)) (x819 (+ x405 (- x1053 160))) (x180 x1053)))
(define-fun x875 ((x1053 Int)) Int (ite (= x233 x1053) 0 (x79 x1053)))
(define-fun x962 ((x1053 Int)) Int (ite (= x1055 x1053) x130 (x875 x1053)))
(define-fun x863 ((x1053 Int)) Int (ite (and (> (+ x130 x672) x1053) (<= x672 x1053)) (x819 (+ x432 (- x1053 x672))) (x962 x1053)))
(define-fun x955 ((x1053 Int)) Int (ite (= x135 x1053) 0 (x863 x1053)))
(define-fun x988 ((x1053 Int)) Int (ite (= x614 x1053) 54065695799311150304516525983669583430195215316752708547810291668471328538624 (x955 x1053)))
(define-fun x913 ((x1053 Int)) Int (ite (= x1053 x677) 160 (x988 x1053)))
(define-fun x443 ((x1053 Int)) Int (ite (= x1053 x904) x547 (x913 x1053)))
(define-fun x279 ((x1053 Int)) Int (ite (= x662 x1053) x21 (x443 x1053)))
(define-fun x1018 ((x1053 Int)) Int (ite (= x1053 x1032) x158 (x279 x1053)))
(define-fun x182 ((x1053 Int)) Int (ite (= x1053 x255) x376 (x1018 x1053)))
(define-fun x164 ((x1053 Int)) Int (ite (= x1053 x230) x835 (x182 x1053)))
(define-fun x447 ((x1053 Int)) Int (ite x3 (x182 x1053) (ite x167 (x1018 x1053) (ite x1014 (x279 x1053) (ite x805 (x443 x1053) (x164 x1053))))))
(define-fun x143 ((x1053 Int)) Int (ite (= x424 x1053) 0 (x447 x1053)))
(define-fun x1084 ((x1053 Int)) Int (ite x839 (x447 x1053) (x143 x1053)))
(define-fun x858 ((x1053 Int)) Int (ite (= x347 x1053) x890 (x1084 x1053)))
(define-fun x68 ((x1053 Int)) Int (ite (= x717 x1053) x749 (x858 x1053)))
(define-fun x1075 ((x1053 Int)) Int (ite (= x1053 x798) x458 (x68 x1053)))
(define-fun x177 ((x1053 Int)) Int (ite (= x984 x1053) x594 (x1075 x1053)))
(define-fun x9 ((x1053 Int)) Int (ite (= x241 x1053) x185 (x177 x1053)))
(define-fun x503 ((x1053 Int)) Int (ite (= x1053 x501) x740 (x9 x1053)))
(define-fun x1074 ((x1053 Int)) Int (ite x1071 (x9 x1053) (ite x285 (x177 x1053) (ite x201 (x1075 x1053) (ite x625 (x68 x1053) (x503 x1053))))))
(define-fun x656 ((x1053 Int)) Int (ite (= x1053 x477) 0 (x1074 x1053)))
(define-fun x736 ((x1053 Int)) Int (ite x492 (x1074 x1053) (x656 x1053)))
(define-fun x190 ((x1053 Int)) Int (ite (= x826 x1053) x553 (x736 x1053)))
(define-fun x56 ((x1053 Int)) Int (ite (= x189 x1053) x916 (x190 x1053)))
(define-fun x921 ((x1053 Int)) Int (ite (= x207 x1053) x511 (x56 x1053)))
(define-fun x249 ((x1053 Int)) Int (ite (= x719 x1053) x771 (x921 x1053)))
(define-fun x902 ((x1053 Int)) Int (ite (= x836 x1053) x488 (x249 x1053)))
(define-fun x715 ((x1053 Int)) Int (ite (= x4 x1053) x864 (x902 x1053)))
(define-fun x1068 ((x1053 Int)) Int (ite (= x319 x1053) x597 (x715 x1053)))
(define-fun x1028 ((x1053 Int)) Int (ite x525 (x715 x1053) (ite x1058 (x902 x1053) (ite x468 (x249 x1053) (ite x287 (x921 x1053) (x1068 x1053))))))
(define-fun x331 ((x1053 Int)) Int (ite (= x1053 x94) x311 (x1028 x1053)))
(define-fun x231 ((x1053 Int)) Int (ite (= x1053 x578) x240 (x331 x1053)))
(define-fun x355 ((x1053 Int)) Int (ite (= x1053 x65) x454 (x231 x1053)))
(define-fun x801 ((x1053 Int)) Int (ite (= x1053 x212) x346 (x355 x1053)))
(define-fun x106 ((x1053 Int)) Int (ite (and (< x1053 (+ x211 x346)) (>= x1053 x211)) (x819 (+ x302 (- x1053 x211))) (x801 x1053)))
(define-fun x539 ((x1053 Int)) Int (ite (= x1053 x78) 0 (x106 x1053)))
(define-fun x605 ((x1053 Int)) Int (ite x930 (x231 x1053) (x539 x1053)))
(define-fun x994 ((x1053 Int)) Int (ite (= x1053 x614) x1094 (x605 x1053)))
(define-fun x322 ((x1053 Int)) Int (ite x934 (x605 x1053) (x994 x1053)))
(define-fun x278 ((x1053 Int)) Int (ite (= x1053 x520) 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x322 x1053)))
(define-fun x1022 ((x1053 Int)) Int (ite (and (> (+ 32 x520) x1053) (<= x520 x1053)) (x109 (+ 0 (- x1053 x520))) (x278 x1053)))
(define-fun x129 ((x1053 Int)) Int (ite (and (<= 196 x1053) (> (+ 196 (x351 (- x303 196))) x1053)) (x605 (+ (- x1053 196) (x329 (+ x614 196)))) (x445 x1053)))
(define-fun x937 ((x1053 Int)) Int (ite (= x1053 128) x847 (x1034 x1053)))
(define-fun x506 ((x1053 Int)) Int (ite (and (< x1053 (+ 160 x847)) (>= x1053 160)) (x129 (+ 196 (- x1053 160))) (x937 x1053)))
(define-fun x342 ((x1053 Int)) Int (ite (= x232 x1053) 0 (x506 x1053)))
(define-fun x744 ((x1053 Int)) Int (ite (= x339 x1053) x362 (x342 x1053)))
(define-fun x1096 ((x1053 Int)) Int (ite (and (>= x1053 x814) (< x1053 (+ x362 x814))) (x129 (+ (- x1053 x814) x51)) (x744 x1053)))
(define-fun x1083 ((x1053 Int)) Int (ite (= x370 x1053) 0 (x1096 x1053)))
(define-fun x174 ((x1053 Int)) Int (ite (= x1053 x655) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x1083 x1053)))
(define-fun x657 ((x1053 Int)) Int (ite (= x1053 x655) x213 (x174 x1053)))
(define-fun x604 ((x1053 x791)) Int (ite (= x1053 (x1043 x567)) x416 (x1013 x1053)))
(define-fun x482 ((x1053 x791)) Int (ite (= x1053 (x1043 x187)) x293 (x604 x1053)))
(define-fun x898 ((x1053 Int)) Int (ite (and (<= x496 x1053) (< x1053 (+ x496 0))) (x62 (+ (- x1053 x496) 0)) (x657 x1053)))
(define-fun x975 ((x1053 Int)) Int (ite x928 (x657 x1053) (ite x100 (x898 x1053) (x657 x1053))))
(define-fun x533 ((x1053 Int)) Int (ite x928 (x340 x1053) (x62 x1053)))
(define-fun x1036 ((x1053 Int)) Int (ite (= x1053 x496) x452 (x975 x1053)))
(define-fun x638 ((x1053 Int)) Int (ite (and (>= x1053 x216) (> (+ x452 x216) x1053)) (x533 (+ (- x1053 x216) 0)) (x1036 x1053)))
(define-fun x720 ((x1053 x791)) Int (ite x100 (x734 x1053) (x482 x1053)))
(define-fun x502 ((x1053 x791)) Int (ite (= (x1043 x187) x1053) x915 (x720 x1053)))
(define-fun x612 ((x1053 x791)) Int (ite (= x1053 (x1043 x567)) x122 (x502 x1053)))
(define-fun x901 ((x1053 x791)) Int (ite x620 (x1013 x1053) (ite x928 (x1013 x1053) (ite x1056 (x720 x1053) (x612 x1053)))))
(define-fun x1095 ((x1053 Int)) Int (ite x620 (x1083 x1053) (ite x359 (x975 x1053) (x638 x1053))))
(define-fun x872 ((x1053 x791)) Int (ite (= x1053 (x1043 x567)) x1062 (x901 x1053)))
(define-fun x787 ((x1053 x791)) Int (ite (= (x1043 x680) x1053) x381 (x872 x1053)))
(define-fun x786 ((x1053 x791)) Int (ite (= x1053 (x1043 x680)) x802 (x787 x1053)))
(define-fun x854 ((x1053 x791)) Int (ite (= x1053 (x1043 x567)) x459 (x786 x1053)))
(define-fun x536 ((x1053 Int)) Int (ite (= x1053 x13) 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x1095 x1053)))
(define-fun x69 ((x1053 Int)) Int (ite (= x591 x1053) 192 (x536 x1053)))
(define-fun x239 ((x1053 Int)) Int (ite (= x1053 x545) x782 (x69 x1053)))
(define-fun x262 ((x1053 Int)) Int (ite (= x1053 x495) x220 (x239 x1053)))
(define-fun x818 ((x1053 Int)) Int (ite (= x1053 x767) x694 (x262 x1053)))
(define-fun x178 ((x1053 Int)) Int (ite (= x1053 x471) x659 (x818 x1053)))
(define-fun x712 ((x1053 x791)) Int (ite x784 (x583 x1053) (x854 x1053)))
(define-fun x98 ((x1053 x791)) Int (ite x480 (x712 x1053) (ite x1092 (x205 x1053) (x712 x1053))))
(define-fun x910 ((x1053 Int)) Int (ite (= x1053 x17) x598 (x178 x1053)))
(define-fun x924 ((x1053 Int)) Int (ite x979 (x178 x1053) (ite x472 (x818 x1053) (ite x746 (x262 x1053) (ite x147 (x239 x1053) (x910 x1053))))))
(define-fun x949 ((x1053 Int)) Int (ite (= x1054 x1053) 0 (x924 x1053)))
(define-fun x333 ((x1053 Int)) Int (ite x868 (x924 x1053) (x949 x1053)))
(define-fun x133 ((x1053 Int)) Int (ite (= x1053 x922) x382 (x333 x1053)))
(define-fun x776 ((x1053 Int)) Int (ite (= x1053 x126) x473 (x133 x1053)))
(define-fun x77 ((x1053 Int)) Int (ite (= x1053 x969) x426 (x776 x1053)))
(define-fun x421 ((x1053 Int)) Int (ite (= x724 x1053) x171 (x77 x1053)))
(define-fun x773 ((x1053 Int)) Int (ite (= x5 x1053) x72 (x421 x1053)))
(define-fun x334 ((x1053 Int)) Int (ite (= x1053 x437) x50 (x773 x1053)))
(define-fun x37 ((x1053 Int)) Int (ite x945 (x773 x1053) (ite x600 (x421 x1053) (ite x30 (x77 x1053) (ite x341 (x776 x1053) (x334 x1053))))))
(define-fun x682 ((x1053 Int)) Int (ite (= x1053 x630) 0 (x37 x1053)))
(define-fun x1003 ((x1053 Int)) Int (ite x487 (x37 x1053) (x682 x1053)))
(define-fun x310 ((x1053 Int)) Int (ite (= x1053 x651) x881 (x1003 x1053)))
(define-fun x697 ((x1053 Int)) Int (ite (= x1053 x394) x170 (x310 x1053)))
(define-fun x222 ((x1053 Int)) Int (ite (= x1053 x467) x260 (x697 x1053)))
(define-fun x148 ((x1053 Int)) Int (ite (= x199 x1053) x297 (x222 x1053)))
(define-fun x499 ((x1053 Int)) Int (ite (and (<= x13 x1053) (> (+ x13 0) x1053)) (x144 (+ 0 (- x1053 x13))) (x148 x1053)))
(define-fun x494 ((x1053 Int)) Int (ite x784 (x499 x1053) (x148 x1053)))
(define-fun x1029 ((x1053 Int)) Int (ite (= x1053 x439) 102499615646744134772650717477688572466918151731817230690449879178893085114368 (x494 x1053)))
(define-fun x704 ((x1053 Int)) Int (ite (= x323 x1053) x1067 (x1029 x1053)))
(define-fun x456 ((x1053 Int)) Int (ite (= x1053 x1016) x905 (x704 x1053)))
(define-fun x844 ((x1053 Int)) Int (ite (= x298 x1053) x188 (x456 x1053)))
(define-fun x1015 ((x1053 Int)) Int (ite (= x796 x1053) x626 (x844 x1053)))
(define-fun x390 ((x1053 Int)) Int (ite x666 (x844 x1053) (ite x926 (x456 x1053) (ite x386 (x704 x1053) (ite x714 (x1029 x1053) (x1015 x1053))))))
(define-fun x191 ((x1053 Int)) Int (ite (= x186 x1053) 0 (x390 x1053)))
(define-fun x540 ((x1053 Int)) Int (ite x843 (x390 x1053) (x191 x1053)))
(define-fun x25 ((x1053 Int)) Int (ite (= x1053 x13) x555 (x540 x1053)))
(define-fun x1024 ((x1053 Int)) Int (ite (= x1053 x647) x484 (x25 x1053)))
(define-fun x688 ((x1053 Int)) Int (ite (= x1053 x1021) x1091 (x1024 x1053)))
(define-fun x526 ((x1053 Int)) Int (ite (= x1053 x886) x140 (x688 x1053)))
(define-fun x737 ((x1053 Int)) Int (ite (= x53 x1053) x372 (x526 x1053)))
(define-fun x1078 ((x1053 Int)) Int (ite (= x1053 x361) x481 (x737 x1053)))
(define-fun x820 ((x1053 Int)) Int (ite (= x266 x1053) x1033 (x1078 x1053)))
(define-fun x585 ((x1053 Int)) Int (ite x215 (x1078 x1053) (ite x649 (x737 x1053) (ite x296 (x526 x1053) (ite x316 (x688 x1053) (x820 x1053))))))
(define-fun x146 ((x1053 Int)) Int (ite (= x925 x1053) 0 (x585 x1053)))
(define-fun x671 ((x1053 Int)) Int (ite x504 (x585 x1053) (x146 x1053)))
(define-fun x49 ((x1053 Int)) Int (ite (= x1053 x732) x354 (x671 x1053)))
(define-fun x358 ((x1053 Int)) Int (ite x804 (x1022 x1053) (x278 x1053)))
(define-fun x760 ((x1053 Int)) Int (ite (= x1053 x43) 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x358 x1053)))
(define-fun x788 ((x1053 Int)) Int (ite (and (> (+ x43 32) x1053) (<= x43 x1053)) (x741 (+ 0 (- x1053 x43))) (x760 x1053)))
(define-fun x1031 ((x1053 Int)) Int (ite x637 (x788 x1053) (x760 x1053)))
(define-fun x353 ((x1053 Int)) Int (ite (= x1053 x895) 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x1031 x1053)))
(define-fun x595 ((x1053 Int)) Int (ite (and (> (+ x895 32) x1053) (<= x895 x1053)) (x378 (+ 0 (- x1053 x895))) (x353 x1053)))
(define-fun x751 ((x1053 Int)) Int (ite x1001 (x595 x1053) (x353 x1053)))
(define-fun x1005 ((x1053 Int)) Int (ite (= x989 x1053) 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x751 x1053)))
(define-fun x522 ((x1053 Int)) Int (ite (and (>= x1053 x989) (< x1053 (+ x989 32))) (x1039 (+ (- x1053 x989) 0)) (x1005 x1053)))
(define-fun x834 ((x1053 Int)) Int (ite x993 (x522 x1053) (x1005 x1053)))
(define-fun x794 ((x1053 Int)) Int (ite (= x849 x1053) 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x834 x1053)))
(define-fun x210 ((x1053 Int)) Int (ite (and (<= x849 x1053) (> (+ x849 32) x1053)) (x1061 (+ (- x1053 x849) 0)) (x794 x1053)))
(define-fun x327 ((x1053 Int)) Int (ite x753 (x210 x1053) (x794 x1053)))
(define-fun x976 ((x772 Int)) Bool (=> (and (not (= 79228162514264337593543950335 x772)) (not (= x772 1262878978)) (not (= x772 75068239)) (not (= x772 3572374928)) (not (= x772 2249206060)) (not (= 2376452955 x772)) (not (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 x772)) (not (= x772 1845979623)) (not (= x772 2005408114)) (not (= 2329570063 x772)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x772)) (not (= x772 832554005)) (not (= x772 1461501637330902918203684832716283019655932542975)) (not (= x772 1901074598)) (< 10000 x772) (not (= x772 62805084655870755976952745400290271510621614971557940054860603637793562820608)) (not (= x772 4294967296)) (not (= x772 818759841)) (not (= 4199168155 x772)) (not (= 102499615646744134772650717477688572466918151731817230690449879178893085114368 x772)) (not (= x772 2220280665)) (not (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 x772)) (not (= x772 1461501637330902918203684832716283019655932542976)) (not (= 1553423035 x772)) (not (= x772 33582922474372145882413589741236248003507108108518759994751911431010219196416)) (not (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x772)) (not (= 113209349505197351213641468582317386984598294884268236158119619414039440916480 x772)) (not (= 4076725131 x772)) (not (= x772 18446744073709551615)) (not (= 3084411429 x772)) (not (= 1245659826 x772)) (not (= x772 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 3705713892 x772)) (not (= 22445611572322667099362401052093617030957452505749565894135597532943828910080 x772))) (not ((_ is x763) (x1043 x772)))))
(assert (= x408 (and (not x428) x1087)))
(assert (x283 x81))
(assert (x88 x665))
(assert (= (or x804 x111) x865))
(assert (x976 x332))
(assert (= (and x380 x343) x956))
(assert (x88 x558))
(assert (x88 x394))
(assert (= (and x636 x57) x120))
(assert (x88 x541))
(assert (x88 x323))
(assert (= (x29 (+ (x329 (+ x614 196)) (- (+ 196 (- x933 160)) 196))) 0))
(assert (x88 x465))
(assert (= (x1034 x151) 0))
(assert (and (x542 x885 32) (x1070 x885 32) (=> (< 0 32) (= (+ (x328 x885 32) (* 32 (x39 x885 32))) x885)) (x635 x885 32)))
(assert (x88 x990))
(assert (x88 x676))
(assert (= (and x684 x883) x911))
(assert (x88 x431))
(assert (= (and x27 (not x711)) x959))
(assert (= (or x961 x753) x389))
(assert (x88 x467))
(assert (x88 x427))
(assert (x88 x43))
(assert (= x95 (=> (and (= x166 (x329 (+ x769 x803))) (= x991 (> x602 0)) (= x978 (x329 (+ 31 x1091))) (= (x329 (+ x647 32)) x732) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x978) x803) (= x354 (x351 (- x166 x647))) (= (x49 x13) x602)) (and (=> (and (not x991) (= x96 0)) x206) (=> (and (= (> x602 32) x357) x991) (and (=> (and x357 (= x742 (< 64 x602))) (and (=> (and x742 (= (< 96 x602) x698)) (and (=> (and (not x698) (= x96 96)) x206) (=> x698 x718))) (=> (and (= 64 x96) (not x742)) x206))) (=> (and (not x357) (= 32 x96)) x206)))))))
(assert (x88 x157))
(assert (= (and x18 (not x668)) x625))
(assert (= (and x512 x1073) x944))
(assert (x943 x978))
(assert (= (x1043 22445611572322667099362401052093617030957452505749565894135597532943828910080) (x763 22445611572322667099362401052093617030957452505749565894135597532943828910080)))
(assert (= x1044 (and x22 x203)))
(assert (= x264 (=> (and (or (and (not x377) (and (= (x329 (+ x496 x1026)) x157) (= (x329 (+ x452 63)) x524) (= x1066 x157) (= x216 (x329 (+ x496 32))) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x524) x1026))) (and x377 (= x1066 x496))) (= (= x452 0) x377)) x156)))
(assert (= 0 (x29 (+ (x329 (+ x614 196)) (- x1088 196)))))
(assert (and (x141 32 x240) (x1046 32 x240) (and (= (- (* x240 32) (* x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x240)) (= (x55 32 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x240 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x345 32 x240) (x1080 32 x240) (x265 32 x240) (= (x55 32 x240) (* 32 x240))))
(assert (= (and x599 (not x223)) x1071))
(assert (x88 x1066))
(assert (x88 x213))
(assert (x88 x922))
(assert (= (x29 (+ (x329 (+ 196 x614)) (- (+ x51 (- x363 x814)) 196))) 0))
(assert (x88 x767))
(assert (x88 x371))
(assert (= (and (not x113) x91) x690))
(assert (= x287 (and (not x992) x161)))
(assert (x88 x835))
(assert (x88 x268))
(assert (= 0 (x29 (+ (- x309 196) (x329 (+ x614 196))))))
(assert (= (x1043 3705713892) (x763 3705713892)))
(assert (x88 x989))
(assert (x845 x330))
(assert (x88 x207))
(assert (x88 x581))
(assert (= x673 (or x422 x654)))
(assert (x88 x984))
(assert (x88 x555))
(assert (= (x518 (x1043 x529)) x529))
(assert (x88 x816))
(assert (= x584 (and x829 (not x377))))
(assert (= (x518 (x763 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x415 (or (and (not x380) x343) x956)))
(assert (x845 x401))
(assert (x413 x275))
(assert (= (and x476 x384) x172))
(assert (x88 x1069))
(assert (x88 x212))
(assert (x88 x347))
(assert (x88 x412))
(assert (= x790 (or x862 x868)))
(assert (x88 x171))
(assert (= (x340 (- x414 x216)) 0))
(assert (= (or x928 x1056 x356) x829))
(assert (x88 x301))
(assert (=> (>= 10000 x187) (= (x763 x187) (x1043 x187))))
(assert (x88 x245))
(assert (x176 x524))
(assert (= x806 (or x584 x359)))
(assert (x88 x185))
(assert (= x509 (and x891 (not x306))))
(assert (= x599 (and x392 x419)))
(assert (= (x518 (x763 818759841)) 818759841))
(assert (= (x1043 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x763 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (x340 (- x363 x216)) 0))
(assert (x88 x912))
(assert (= x998 (=> (= x639 (= 0 x277)) (and (=> x639 x840) (=> (and (not x639) (and (= x260 x897) (= (x489 1461501637330902918203684832716283019655932542975 x680) x1094) (= x297 x827) (= x881 x918) (= x108 x679) (= 32 x1025) (= x1008 x170) (= 1 x48))) x423)))))
(assert (= x995 (and x866 x590)))
(assert (x88 x440))
(assert (x88 x545))
(assert (and (x141 32 x275) (x1046 32 x275) (and (= (- (* x275 32) (* x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x275)) (= (x55 32 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x275 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x345 32 x275) (x1080 32 x275) (x265 32 x275) (= (x55 32 x275) (* 32 x275))))
(assert (x88 x1025))
(assert (x88 x880))
(assert (x88 x756))
(assert (x88 x664))
(assert (x88 x602))
(assert (x88 x409))
(assert (and (x542 x115 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x115 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x115 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x115 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x115)) (x635 x115 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x610 (not x40)) x868))
(assert (x88 x376))
(assert (x88 x48))
(assert (= x653 (and (not x559) x908)))
(assert (= (=> (and (or (not x40) (and (= x1054 (x329 (+ x782 x479))) x40)) (= (> x544 x782) x40)) x708) x425))
(assert (= (x29 (+ (- x952 196) (x329 (+ 196 x614)))) 0))
(assert (x88 x544))
(assert (x88 x717))
(assert (x88 x764))
(assert (= x201 (and (not x941) x163)))
(assert (and (x542 x360 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x360 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x360 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x360 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x360)) (x635 x360 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x1008))
(assert (x88 x298))
(assert (= 0 (x29 x318)))
(assert (x845 x412))
(assert (x88 x78))
(assert (= (x518 (x1043 x332)) x332))
(assert (x88 x397))
(assert (= (and (not x846) x368) x104))
(assert (= (=> (and (= x551 (< x473 x603)) (or (and x551 (= (x329 (+ x348 x473)) x630)) (not x551))) x631) x374))
(assert (= x155 (and x947 x792)))
(assert (x88 x707))
(assert (= x1006 (and x891 x306)))
(assert (x845 x367))
(assert (x88 x1052))
(assert (= x429 (and (not x1030) x660)))
(assert (x88 x614))
(assert (x88 x689))
(assert (x88 x782))
(assert (= (x763 113209349505197351213641468582317386984598294884268236158119619414039440916480) (x1043 113209349505197351213641468582317386984598294884268236158119619414039440916480)))
(assert (= 0 (x340 (- x933 x216))))
(assert (x88 x405))
(assert (x88 x618))
(assert (x88 x847))
(assert (x845 x1035))
(assert (x88 x645))
(assert (x88 x669))
(assert (x943 x1035))
(assert (x88 x881))
(assert (x88 x197))
(assert (= x87 (and (not x698) x948)))
(assert (x88 x905))
(assert (= (and (not x670) x521) x1045))
(assert (x88 x344))
(assert (= (x1034 x552) 0))
(assert (= (or x3 x167 x1014 x761 x805) x1073))
(assert (= 0 (x497 (x474 x567 x61))))
(assert (x88 x266))
(assert (x88 x150))
(assert (= 3572374928 (x518 (x763 3572374928))))
(assert (x88 x603))
(assert (x88 x4))
(assert (= 0 (x29 (+ (- (+ (- x151 x814) x51) 196) (x329 (+ x614 196))))))
(assert (x88 x366))
(assert (= x755 (and (not x535) x493)))
(assert (x88 x276))
(assert (= (and (not x996) x810) x480))
(assert (= x620 (and (not x85) x83)))
(assert (= x945 (and (not x871) x38)))
(assert (x88 x501))
(assert (x88 x552))
(assert (x88 x807))
(assert (and (= 9 (x55 3 3)) (= (x55 9 3) 27) (= 81 (x55 27 3)) (= (x55 9 9) 81)))
(assert (x88 x916))
(assert (= 1461501637330902918203684832716283019655932542976 (x518 (x763 1461501637330902918203684832716283019655932542976))))
(assert (x88 x385))
(assert (= x195 (and x415 (not x931))))
(assert (= x530 (and x556 (not x357))))
(assert (= (x518 (x763 1262878978)) 1262878978))
(assert (= x118 (=> (and (not (> x346 18446744073709551615)) (= x325 (x819 x974)) (= (not (> x240 1)) x644) (= x78 (x329 (+ x211 x346))) (= x433 (x329 (+ 31 x346))) (= (x329 (+ 32 x124)) x302) (or (and (= (<= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x90)) (> x90 x325)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325) (<= x90 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x351 (- x1093 x974)) x574) (not (or (and (< x254 x302) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x302) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x254))) (and (<= x302 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x254)))) (= x211 (x329 (+ x212 32))) (= x254 (x351 (- x1093 x346))) (= (x819 x124) x346) (= x90 (x351 (- x574 31))) (= x124 (x329 (+ x325 x974))) (= x33 (x329 (+ x211 x549))) (= x434 x454) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x433) x549)) (and (=> (= x1059 x33) x851) x644))))
(assert (x88 x311))
(assert (x88 x814))
(assert (x88 x122))
(assert (= (x29 (+ (x329 (+ x614 196)) (- (+ x51 (- 256 x814)) 196))) 0))
(assert (x88 x46))
(assert (x88 x534))
(assert (= x7 (=> (and (= x94 (x329 (+ 32 x189))) (= x311 (x351 (- x578 x677))) (= x65 (x329 (+ x578 32))) (= x212 (x329 (+ x65 x434))) (= (< 0 x240) x909) (= x434 (x967 (* 32 x240)))) (and (=> (and (= x212 x1059) (not x909)) x851) (=> x909 x118)))))
(assert (= (x763 832554005) (x1043 832554005)))
(assert (= x218 (or x110 x530 x87 x97 x149)))
(assert (= x444 (=> (and (= x380 (= 0 x870)) (or (not x380) x380)) x896)))
(assert (= x30 (and (not x2) x938)))
(assert (x88 x59))
(assert (x88 x481))
(assert (x88 x1065))
(assert (and (x542 x442 32) (x1070 x442 32) (=> (< 0 32) (= (+ (x328 x442 32) (* 32 (x39 x442 32))) x442)) (x635 x442 32)))
(assert (x88 x81))
(assert (= (and x775 x89) x14))
(assert (= (or x316 x649 x296 x215 x307) x338))
(assert (x88 x135))
(assert (= x423 (=> (and (= (= x48 0) x203) (or x203 (not x203))) x828)))
(assert (x88 x92))
(assert (= x784 (and x521 x670)))
(assert (x845 x885))
(assert (= (and x417 (not x383)) x561))
(assert (x176 x837))
(assert (x88 x28))
(assert (x88 x884))
(assert (x88 x550))
(assert (= (and x770 x551) x1079))
(assert (= x882 (and x320 x752)))
(assert (x88 x672))
(assert (= (and x132 (not x971)) x746))
(assert (= 1845979623 (x518 (x763 1845979623))))
(assert (= (and (not x317) x429) x714))
(assert (= (and x758 (not x909)) x930))
(assert (= x251 (and x587 x577)))
(assert (x88 x783))
(assert (x88 x507))
(assert (= x825 (or x195 x42)))
(assert (x845 x332))
(assert (=> (>= 10000 x680) (= (x1043 x680) (x763 x680))))
(assert (= x27 (and x14 (not x483))))
(assert (= (x1034 x414) 0))
(assert (x88 x315))
(assert (x88 x1010))
(assert (x88 x546))
(assert (x943 x58))
(assert (= x1087 (and x80 x768)))
(assert (x88 x939))
(assert (and (x542 x330 32) (x1070 x330 32) (=> (< 0 32) (= (+ (x328 x330 32) (* 32 (x39 x330 32))) x330)) (x635 x330 32)))
(assert (= (or x487 x1079) x168))
(assert (= (and x866 (not x590)) x919))
(assert (x88 x325))
(assert (x88 x282))
(assert (x88 x716))
(assert (= 4076725131 (x518 (x763 4076725131))))
(assert (x976 x59))
(assert (x88 x832))
(assert (x176 x76))
(assert (x88 x289))
(assert (x413 x240))
(assert (= (and (not x640) x588) x977))
(assert (and (x542 x978 32) (x1070 x978 32) (=> (< 0 32) (= (+ (x328 x978 32) (* 32 (x39 x978 32))) x978)) (x635 x978 32)))
(assert (= 4739670319144124481003130557741556594755290868171975227769803894069435301888 (x518 (x763 4739670319144124481003130557741556594755290868171975227769803894069435301888))))
(assert (x88 x940))
(assert (x88 x318))
(assert (x976 x680))
(assert (= (x763 2376452955) (x1043 2376452955)))
(assert (x943 x335))
(assert (x88 x454))
(assert (and (x542 x367 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x367 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x367 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x367 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x367)) (x635 x367 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x1082))
(assert (x88 x5))
(assert (x88 x108))
(assert (x88 x202))
(assert (= (and x810 x996) x417))
(assert (x88 x407))
(assert (= x831 (and x690 x560)))
(assert (x845 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x943 x76))
(assert (= 0 (x29 (+ (x329 (+ x614 196)) 64))))
(assert (x88 x61))
(assert (x88 x613))
(assert (= x972 (=> (and (and (= x918 x193) (= x393 false) (= x897 x225) (= x1052 x1008) (= x953 x827) (= x789 false) (= x874 x679)) (and (= x234 (x327 x849)) (= x395 x1065) (not (= x150 0)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x628) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x628) true) (< x628 32)))) (>= 1461501637330902918203684832716283019655932542975 x234))) x175)))
(assert (x88 x532))
(assert (x88 x96))
(assert (x88 x193))
(assert (= (and x730 x218) x685))
(assert (x88 x929))
(assert (= (x763 4076725131) (x1043 4076725131)))
(assert (= (=> (and (= (x329 (+ x207 32)) x719) (= (x329 (+ 32 x347)) x826) (= x992 (> x511 0)) (= x207 (x329 (+ x833 x674))) (= (x329 (+ 32 x826)) x189) (= (x329 (+ 31 x749)) x367) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x367) x674) (= x916 (x351 (- x207 x677)))) (and (=> (and (= x719 x578) (not x992)) x7) (=> (and (and (= x490 (> x511 1)) (= x836 (x329 (+ 32 x719))) (= (x329 (+ x466 32)) x800) (= x771 (x819 x466)) (<= x771 1461501637330902918203684832716283019655932542975)) x992) (and (=> (and x490 (and (= x4 (x329 (+ 32 x836))) (>= 1461501637330902918203684832716283019655932542975 x488) (= x792 (> x511 2)) (= (x329 (+ 32 x800)) x469) (= (x819 x800) x488))) (and (=> (and (= x578 x4) (not x792)) x7) (=> (and x792 (and (= (< 3 x511) x15) (= (x329 (+ 32 x4)) x319) (= (x819 x469) x864) (<= x864 1461501637330902918203684832716283019655932542975) (= x695 (x329 (+ x469 32))))) (and (=> x15 x1000) (=> (and (= x578 x319) (not x15)) x7))))) (=> (and (= x836 x578) (not x490)) x7))))) x258))
(assert (x88 x360))
(assert (x88 x1032))
(assert (= true x448))
(assert (= x111 (and x658 (not x830))))
(assert (x845 x81))
(assert (and (x542 x524 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x524 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x524 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x524 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x524)) (x635 x524 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (=> (and (< x689 256) (<= 0 x689) (= (= 0 x689) x519) (<= x689 255)) (and (=> (not x519) x840) (=> (and (and x246 (> 1461501637330902918203684832716283019655932542976 x108) (= x61 (x569 (x1043 x567))) (= x802 x116) (= (= x703 x127) x246) (= (= 0 x759) x169) (= x703 x1023) (<= 0 x108) (= x116 (x787 (x1043 x680))) (= x459 (x786 (x1043 x567))) (= x1062 x550) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x381) (= (x872 (x1043 x680)) x381) (= x759 (x489 1461501637330902918203684832716283019655932542975 x680)) (= (x901 (x1043 x567)) x550) (= x127 x680) (= x107 0) (< (+ x107 x459) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x680 (x474 x567 x61)) (<= x108 1461501637330902918203684832716283019655932542975)) x519) (and (=> x169 x840) (=> (and (and (<= 0 x170) (< x297 1461501637330902918203684832716283019655932542976) (<= 0 x260) (= x545 (x329 (+ x591 192))) (>= x297 0) (= (> x782 0) x774) (= x782 (x69 128)) (= (x489 1461501637330902918203684832716283019655932542975 x680) x669) (<= 0 x881) (<= x170 1461501637330902918203684832716283019655932542975) (<= x260 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x881) (= (x329 (+ 4 x13)) x591) (<= x297 1461501637330902918203684832716283019655932542975) (< x170 1461501637330902918203684832716283019655932542976) (= (x329 (+ x545 32)) x479) (> 1461501637330902918203684832716283019655932542976 x881) (< x260 1461501637330902918203684832716283019655932542976)) (not x169)) (and (=> (and x774 (and (= x479 x495) (= x971 (> x782 32)) (= (x239 160) x220))) (and (=> (and x971 (and (= x694 (x262 192)) (= x767 (x329 (+ x479 32))) (= (< 64 x782) x288))) (and (=> (and x288 (and (= x471 (x329 (+ x479 64))) (= x320 (> x782 96)) (= (x818 224) x659))) (and (=> (and (= x544 96) (not x320)) x425) (=> x320 x441))) (=> (and (= x544 64) (not x288)) x425))) (=> (and (not x971) (= 32 x544)) x425))) (=> (and (not x774) (= 0 x544)) x425))))))) x608))
(assert (= (x518 (x763 102499615646744134772650717477688572466918151731817230690449879178893085114368)) 102499615646744134772650717477688572466918151731817230690449879178893085114368))
(assert (x88 x267))
(assert (x88 x567))
(assert (= (x518 (x763 3705713892)) 3705713892))
(assert (x88 x82))
(assert (x88 x1011))
(assert (= (x763 2220280665) (x1043 2220280665)))
(assert (= x110 (and x948 x698)))
(assert (x88 x575))
(assert (x88 x436))
(assert (x88 x12))
(assert (x88 x627))
(assert (= (and x1017 (not x609)) x167))
(assert (x88 x72))
(assert (= (and x877 x32) x83))
(assert (x88 x887))
(assert (= (and (not x288) x888) x472))
(assert (= (and x336 (not x565)) x600))
(assert (= (x763 1553423035) (x1043 1553423035)))
(assert (x88 x424))
(assert (x88 x740))
(assert (x943 x885))
(assert (and (x542 x81 1461501637330902918203684832716283019655932542976) (x1070 x81 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x328 x81 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x39 x81 1461501637330902918203684832716283019655932542976))) x81)) (x635 x81 1461501637330902918203684832716283019655932542976)))
(assert (x88 x611))
(assert (x88 x856))
(assert (x88 x974))
(assert (= (and x1073 (not x512)) x839))
(assert (and (x542 x360 32) (x1070 x360 32) (=> (< 0 32) (= (+ (x328 x360 32) (* 32 (x39 x360 32))) x360)) (x635 x360 32)))
(assert (= x649 (and (not x476) x384)))
(assert (= (and x338 x580) x500))
(assert (= 22445611572322667099362401052093617030957452505749565894135597532943828910080 (x518 (x763 22445611572322667099362401052093617030957452505749565894135597532943828910080))))
(assert (x88 x252))
(assert (x88 x679))
(assert (x88 x432))
(assert (x88 x299))
(assert (x88 x362))
(assert (x845 x978))
(assert (x88 x1094))
(assert (= 0 (x29 (+ (- (+ x51 (- x12 x814)) 196) (x329 (+ 196 x614))))))
(assert (= x727 (and x831 x889)))
(assert (and (x542 x1035 32) (x1070 x1035 32) (=> (< 0 32) (= (+ (x328 x1035 32) (* 32 (x39 x1035 32))) x1035)) (x635 x1035 32)))
(assert (x88 x785))
(assert (x88 x255))
(assert (x88 x302))
(assert (x176 x412))
(assert (x88 x11))
(assert (= (x763 4199168155) (x1043 4199168155)))
(assert (x88 x485))
(assert (= (and x808 (not x438)) x961))
(assert (x88 x793))
(assert (= 0 (x340 (- 224 x216))))
(assert (= 0 (x340 (- x151 x216))))
(assert (x88 x757))
(assert (x88 x800))
(assert (= x828 (=> (and (and (= (x322 x614) x1065) (= (x329 (+ x1025 31)) x412) (= (x329 (+ x581 x614)) x520) (= x581 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x412)) (not (or (and (> 32 x1025) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1025) true)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1025))) (= (< 0 x245) x830) (not (= x48 0)) (>= 1461501637330902918203684832716283019655932542975 x1065)) (or (and (not x830) (= x245 x903)) (and x830 (and (= x903 1) (< x431 4294967296))))) x582)))
(assert (x943 x665))
(assert (x176 x367))
(assert (= (x340 (- 160 x216)) 0))
(assert (= (x518 (x763 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x256 (=> (and (= x529 (x489 1461501637330902918203684832716283019655932542975 x680)) (= (x642 (x1043 x529)) x344) (= x636 (= x344 0))) (and (=> x636 x840) (=> (and (not x636) (and (= x236 (> x277 0)) (or (and x236 (and (= (= x848 (x235 (x1043 x529))) x160) x527 x160 (= (x98 (x1043 x529)) x848) (> 4294967296 x981) (= (>= (x235 (x1043 x567)) x538) x527) (= x538 (x98 (x1043 x567))))) (not x236)))) x250)))))
(assert (x88 x73))
(assert (and (x542 x857 32) (x1070 x857 32) (=> (< 0 32) (= (+ (x328 x857 32) (* 32 (x39 x857 32))) x857)) (x635 x857 32)))
(assert (x88 x703))
(assert (= 0 (x29 (+ (- x224 196) (x329 (+ x614 196))))))
(assert (x88 x920))
(assert (= (x340 (- x954 x216)) 0))
(assert (x88 x621))
(assert (x88 x662))
(assert (x88 x152))
(assert (x88 x619))
(assert (x88 x935))
(assert (= 0 (x29 x84)))
(assert (= 0 (x340 (- 256 x216))))
(assert (x943 x360))
(assert (=> (>= 10000 x529) (= (x1043 x529) (x763 x529))))
(assert (= x194 (=> (and (or (and (and (= x150 1) (> 4294967296 x628)) x438) (and (not x438) (= x150 x997))) (and (not (= 0 x282)) (= x849 (x329 (+ x289 x989))) (= x289 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x401)) (= x606 (x834 x989)) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x880) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x880) true) (< x880 32)))) (= x438 (< 0 x997)) (= x401 (x329 (+ x880 31))) (>= 1461501637330902918203684832716283019655932542975 x606))) x972)))
(assert (x88 x260))
(assert (= 0 (x340 (- x257 x216))))
(assert (x88 x699))
(assert (x845 x524))
(assert (x88 x779))
(assert (= (or x882 x979 x472 x746 x147) x610))
(assert (x88 x633))
(assert (x88 x224))
(assert (x88 x1093))
(assert (= (x1034 x933) 0))
(assert (= 113209349505197351213641468582317386984598294884268236158119619414039440916480 (x518 (x763 113209349505197351213641468582317386984598294884268236158119619414039440916480))))
(assert (and (x542 x335 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x335 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x335 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x335 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x335)) (x635 x335 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and x172 (not x1086)) x215))
(assert (x88 x999))
(assert (= (and (not x823) x168) x521))
(assert (= x343 (or x1092 x104)))
(assert (= x938 (and x379 x790)))
(assert (x88 x750))
(assert (and (x542 x524 32) (x1070 x524 32) (=> (< 0 32) (= (+ (x328 x524 32) (* 32 (x39 x524 32))) x524)) (x635 x524 32)))
(assert (x88 x93))
(assert (and (x542 x837 32) (x1070 x837 32) (=> (< 0 32) (= (+ (x328 x837 32) (* 32 (x39 x837 32))) x837)) (x635 x837 32)))
(assert (x88 x33))
(assert (x88 x461))
(assert (= (or x1045 x784) x729))
(assert (= 0 (x340 (- x339 x216))))
(assert (x88 x547))
(assert (x88 x158))
(assert (x88 x837))
(assert (= 33582922474372145882413589741236248003507108108518759994751911431010219196416 (x518 (x763 33582922474372145882413589741236248003507108108518759994751911431010219196416))))
(assert (x88 x199))
(assert (= (and x754 x1006) x866))
(assert (and (x542 x837 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x837 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x837 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x837 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x837)) (x635 x837 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and (not x730) x218) x878))
(assert (x88 x216))
(assert (x88 x411))
(assert (x88 x314))
(assert (and (x542 x857 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x857 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x857 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x857 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x857)) (x635 x857 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x904))
(assert (= (x518 (x1043 x187)) x187))
(assert (= (x1034 192) 0))
(assert (x88 x254))
(assert (=> (>= 10000 x332) (= (x1043 x332) (x763 x332))))
(assert (x176 x81))
(assert (x976 x202))
(assert (x845 x665))
(assert (= x1002 (and x317 x429)))
(assert (x413 32))
(assert (= (x29 (+ (- x292 196) (x329 (+ 196 x614)))) 0))
(assert (= x31 (and x909 x758)))
(assert (x88 x84))
(assert (= (or x500 x504) x667))
(assert (x88 x187))
(assert (= (or x1044 (and x22 (not x203))) x658))
(assert (= x386 (and (not x34) x1002)))
(assert (= x404 (=> (and (or (and (= x186 (x329 (+ x294 x365))) x838) (not x838)) (= x838 (> x267 x294))) x964)))
(assert (= (=> (= (< 0 x870) x159) (and (=> x159 x228) (=> (not x159) x840))) x573))
(assert (x88 x361))
(assert (x88 x45))
(assert (x88 x890))
(assert (= 0 (x29 (+ (- x932 196) (x329 (+ 196 x614))))))
(assert (x88 x330))
(assert (x88 x23))
(assert (x88 x363))
(assert (= (x1034 160) 0))
(assert (= (=> (and (= (x329 (+ 96 x564)) x230) (= x861 (not (> x547 128))) (= x835 (x182 256))) (and x861 (=> (= x650 128) x548))) x134))
(assert (x88 x738))
(assert (= 18446744073709551615 (x518 (x763 18446744073709551615))))
(assert (x88 x1090))
(assert (x88 x219))
(assert (x88 x765))
(assert (= x777 (=> (and (= x728 (not (> x294 128))) (= x626 (x844 x363)) (= (x329 (+ 96 x365)) x796) (= (x329 (+ 96 x814)) x363)) (and x728 (=> (= 128 x267) x404)))))
(assert (x176 x857))
(assert (x176 x978))
(assert (= (x763 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x1043 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x88 x651))
(assert (and (x542 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x301)) (x635 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= 0 (x1034 256)))
(assert (= (x29 (+ (x329 (+ 196 x614)) (- (+ (- x954 x814) x51) 196))) 0))
(assert (x88 x632))
(assert (x88 x529))
(assert (x176 x301))
(assert (= x879 (and x159 x825)))
(assert (x88 x227))
(assert (= (x1043 1262878978) (x763 1262878978)))
(assert (x88 x119))
(assert (x88 x749))
(assert (= (and x428 x1087) x350))
(assert (x943 x330))
(assert (x88 x799))
(assert (= x637 (and x865 x183)))
(assert (x176 x442))
(assert (= x731 (and x806 x709)))
(assert (x176 x885))
(assert (= (x29 (+ (- (+ x51 (- 128 x814)) 196) (x329 (+ x614 196)))) 0))
(assert (x88 x303))
(assert (= (x518 (x763 1901074598)) 1901074598))
(assert (= (x763 64069044923792539370177021244577383457373632460708312080110356237917649633280) (x1043 64069044923792539370177021244577383457373632460708312080110356237917649633280)))
(assert (= (x29 (+ (x329 (+ x614 196)) (- (+ 196 (- x363 160)) 196))) 0))
(assert (x88 x238))
(assert (x88 x857))
(assert (= x948 (and x742 x508)))
(assert (x88 x692))
(assert (x845 x301))
(assert (x176 x58))
(assert (= x250 (=> (and (= x622 (= 0 x277)) (or (not x622) x622)) x998)))
(assert (x88 x616))
(assert (= x1097 (and x27 x711)))
(assert (= x964 (=> (and (= x1090 (x351 (- x647 x13))) (= (x351 (- x1090 32)) x555) (= x1021 (x329 (+ x647 96))) (= x951 (> x1091 0)) (= x769 (x329 (+ 32 x1021))) (= x484 96) (= x1091 (x1024 128)) (= (x329 (+ x365 x294)) x647)) (and (=> (and (= x1060 0) (not x951)) x217) (=> (and x951 (and (= x769 x886) (= (< 32 x1091) x102) (= x140 (x688 160)))) (and (=> (and x102 (and (= x53 (x329 (+ x769 32))) (= (x526 192) x372) (= (< 64 x1091) x476))) (and (=> (and (not x476) (= x1060 64)) x217) (=> (and x476 (and (= (x329 (+ 64 x769)) x361) (= x1086 (> x1091 96)) (= x481 (x737 224)))) (and (=> (and (not x1086) (= 96 x1060)) x217) (=> x1086 x75))))) (=> (and (not x102) (= x1060 32)) x217)))))))
(assert (= (and x1081 x634) x675))
(assert (= (and x658 x830) x804))
(assert (x176 x332))
(assert (= (and (not x985) x388) x946))
(assert (x88 x721))
(assert (x88 x352))
(assert (= (x763 18446744073709551615) (x1043 18446744073709551615)))
(assert (x88 x932))
(assert (= x753 (and x438 x808)))
(assert (x88 x354))
(assert (= 0 (x29 (x329 (+ 196 x614)))))
(assert (x88 x372))
(assert (x88 x242))
(assert (= (and (not x453) x1097) x577))
(assert (x88 x1088))
(assert (= x648 (and x1097 x453)))
(assert (x88 x272))
(assert (x976 x567))
(assert (x88 x13))
(assert (= 0 (x1034 x363)))
(assert (x88 x435))
(assert (x88 x903))
(assert (= (x340 (- x552 x216)) 0))
(assert (and (x542 x335 32) (x1070 x335 32) (=> (< 0 32) (= (+ (x328 x335 32) (* 32 (x39 x335 32))) x335)) (x635 x335 32)))
(assert (x88 x36))
(assert (= x22 (or x934 x20)))
(assert (x88 x953))
(assert (x283 x680))
(assert (x88 x513))
(assert (x88 x695))
(assert (x413 x511))
(assert (= (x518 (x763 832554005)) 832554005))
(assert (x88 x401))
(assert (x88 x151))
(assert (x88 x997))
(assert (x88 x162))
(assert (= 0 (x29 (+ (- (+ (- 224 x814) x51) 196) (x329 (+ 196 x614))))))
(assert (= x641 (=> (and (= x749 (x858 x1055)) (= x668 (> x749 0)) (= (x351 (- x717 x677)) x890) (= x347 (x329 (+ 32 x677))) (= x11 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x335)) (= x717 (x329 (+ x11 x564))) (= (x329 (+ x547 31)) x335) (= (x329 (+ x717 32)) x833)) (and (=> (and (and (= (< 32 x749) x941) (= x798 x833) (= x318 x672) (= (x68 x318) x458)) x668) (and (=> (and x941 (and (= x917 (x329 (+ x672 32))) (= (< 64 x749) x392) (= (x329 (+ x833 32)) x984) (= x594 (x1075 x917)))) (and (=> (and (and (= x185 (x177 x491)) (= x241 (x329 (+ x833 64))) (= (< 96 x749) x223) (= (x329 (+ x672 64)) x491)) x392) (and (=> (and (= x762 96) (not x223)) x1048) (=> x223 x269))) (=> (and (= x762 64) (not x392)) x1048))) (=> (and (= 32 x762) (not x941)) x1048))) (=> (and (not x668) (= 0 x762)) x1048)))))
(assert (x88 x796))
(assert (x88 x137))
(assert (= (and x288 x888) x752))
(assert (= x817 (or (and x673 (not x622)) x400)))
(assert (x88 x232))
(assert (x88 x1042))
(assert (and (x542 x665 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x665 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x665 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x665 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x665)) (x635 x665 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x107))
(assert (x88 x852))
(assert (= (x29 192) 0))
(assert (= x815 (and x290 x563)))
(assert (= (and x806 (not x709)) x313))
(assert (x88 x244))
(assert (x88 x433))
(assert (= x248 (and x908 x559)))
(assert (x88 x64))
(assert (= x855 (and x223 x599)))
(assert (= (or x31 x930) x684))
(assert (x88 x706))
(assert (= x66 (and x161 x992)))
(assert (x88 x725))
(assert (= (=> (and (= x856 x699) (= (x351 (- x1059 x614)) x303) (< 0 x982) (= (x642 (x1043 x567)) x982) (= (x351 (- x67 4)) x138) (<= 292 x67) (= x52 x890) x554 (not (> 4 x67)) (= x67 x303) (= 54065695799311150304516525983669583430195215316752708547810291668471328538624 x1042) (not (= x616 1845979623)) (not (< x616 1245659826)) (not (= x616 1262878978)) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x138) true) (> 160 x138)) (> x138 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x883) (not (= x616 1245659826)) (= x966 x916) (not (= 1901074598 x616)) (not (= x616 1553423035)) (= 2005408114 x616) (= x411 x311) (= x554 (= (x445 164) x547)) (< x616 2220280665)) (and (=> (and (not x883) (= x89 (and (= true (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x67 195)))) (and (=> (and x89 (and (= (x129 164) x847) (= x483 (< 18446744073709551615 x847)))) (and (=> x483 x840) (=> (and (and (= (x329 (+ 31 x847)) x330) (= x247 (or x261 x516)) (= (> x339 18446744073709551615) x516) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x330) x371) (= x711 (= (ite x247 1 0) 0)) (= (< x339 128) x261) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x665) x385) (= (x329 (+ 128 x385)) x339) (= (x329 (+ x371 32)) x894) (= (x329 (+ x894 31)) x665)) (not x483)) (and (=> (not x711) x840) (=> (and x711 (and (= (> x99 x67) x453) (= (x329 (+ 196 x847)) x99))) (and (=> x453 x840) (=> (and (not x453) (and (= x232 (x329 (+ 160 x847))) (= x587 (> x890 18446744073709551615)))) (and (=> x587 x840) (=> (and (and (= x513 (x329 (+ x932 31))) (= x932 (x329 (+ x52 4))) (= x1064 (or (and (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x513 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x513 x67) (= (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x513 57896044618658097711785492504343953926634992332820282019728792003956564819967)))))) (not x587)) (and (=> (not x1064) x840) (=> (and x1064 (and (= x113 (> x362 18446744073709551615)) (= (x329 (+ x932 32)) x51) (= (x129 x932) x362))) (and (=> (and (not x113) (and (= x607 (< 18446744073709551615 x655)) (= x779 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1035)) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x442) x568) (= (x329 (+ x339 x568)) x655) (= (x329 (+ 31 x362)) x1035) (= (x329 (+ 31 x281)) x442) (= (> x339 x655) x1063) (= x560 (= (ite x26 1 0) 0)) (= x26 (or x607 x1063)) (= x281 (x329 (+ x779 32))))) (and (=> (not x560) x840) (=> (and x560 (and (= (x329 (+ x339 32)) x814) (= x112 (x329 (+ x51 x362))) (= (< x67 x112) x889))) (and (=> x889 x840) (=> (and (and (= (< 18446744073709551615 x916) x515) (= x370 (x329 (+ x814 x362)))) (not x889)) (and (=> (and (and (= (or (and (= (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x579 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x67 x579)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x579) (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x768) (= (x329 (+ x309 31)) x579) (= x309 (x329 (+ 4 x966)))) (not x515)) (and (=> (and x768 (and (= (x129 x309) x275) (= (< 18446744073709551615 x275) x428))) (and (=> x428 x840) (=> (and (and (= (x329 (+ x268 x693)) x958) (= (x329 (+ 32 x309)) x268) (= (x967 (* 32 x275)) x693) (= (> x958 x67) x936)) (not x428)) (and (=> (and (not x936) (= x795 (> x311 18446744073709551615))) (and (=> x795 x840) (=> (and (not x795) (and (= (x329 (+ x411 4)) x1088) (= (x329 (+ x1088 31)) x352) (= (or (and (= (<= x352 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x352 x67)) (and (<= x67 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x352 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x535))) (and (=> (and x535 (and (= (x129 x1088) x119) (= (< 18446744073709551615 x119) x410))) (and (=> (and (not x410) (and (= (x329 (+ x1088 32)) x1) (= (x329 (+ x1 x409)) x627) (= x409 (x967 (* x119 32))) (= (> x627 x67) x1081))) (and (=> (and (not x1081) (and (< x689 256) (<= x689 255) (<= 0 x689) (= (= x689 0) x877))) (and (=> (not x877) x840) (=> (and x877 (and (= (< 0 x397) x85) (<= x397 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x397))) (and (=> (and (not x85) (= x13 x655)) x608) (=> (and (and (= (= x397 0) x985) (<= 0 x397) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x397)) x85) (and (=> (and (and (= (x489 1461501637330902918203684832716283019655932542975 x81) x227) (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 x460) (<= x213 1461501637330902918203684832716283019655932542975) (= (x329 (+ x655 32)) x496) (= 4 x440) (= (x657 x655) x81) (not (= x613 2220280665)) (< 0 x764) (<= 0 x213) (not (> 2220280665 x613)) (not (= 2249206060 x613)) (= x646 x440) (= x646 4) (< x613 3084411429) (= 2376452955 x613) (not (= 2329570063 x613)) (> 1461501637330902918203684832716283019655932542976 x213) (= x764 (x642 (x1043 x567))) (not (< x440 4)) (= (= x81 x227) x559)) x985) (and (=> (not x559) x840) (=> (and x559 (and (= (x1013 (x1043 x567)) x137) (= x187 (x489 1461501637330902918203684832716283019655932542975 x81)) (= (x1013 (x1043 x187)) x822) (= x74 (and (>= x137 0) (< (+ x822 x725) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= 0 x725))) (and (=> (and (and (and (= x293 x721) (= (x604 (x1043 x187)) x721) (= x543 (> x664 0)) (= (x1013 (x1043 x567)) x968) (= x416 x968) (< (+ x725 x721) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (or (and x543 (and (= x369 (x482 (x1043 x567))) (< x337 4294967296) (= (<= x369 (x734 (x1043 x567))) x923) x923 (= (x482 (x1043 x187)) x576) (= (= x576 (x734 (x1043 x187))) x271) x271)) (not x543))) x74) x478) (=> (and (not x74) (and (= x950 0) (= x452 0))) x264))))) (=> (not x985) x840))))))) (=> x1081 x840))) (=> x410 x840))) (=> (not x535) x840))))) (=> x936 x840))))) (=> (not x768) x840))) (=> x515 x840))))))) (=> x113 x840))))))))))))) (=> (not x89) x840))) (=> x883 x840))) x851))
(assert (= (x518 (x763 3084411429)) 3084411429))
(assert (x88 x101))
(assert (x88 x528))
(assert (= x1009 (and x263 x995)))
(assert (x88 x1072))
(assert (= (and x735 (not x102)) x296))
(assert (= x324 (=> (= x1030 (= 0 x929)) (and (=> x1030 x840) (=> (and (not x1030) (and (= (x1029 x339) x294) (= x365 (x329 (+ x869 3))) (= x439 (x329 (+ x13 32))) (= x869 (x329 (+ 32 x13))) (= x317 (< 0 x294)))) (and (=> (and (and (= x34 (> x294 32)) (= x323 x365) (= x1067 (x1029 x257)) (= x814 x257)) x317) (and (=> (and (and (= (x329 (+ 32 x814)) x954) (= x905 (x704 x954)) (= (x329 (+ x365 32)) x1016) (= x537 (< 64 x294))) x34) (and (=> (and (and (= x298 (x329 (+ 64 x365))) (= x214 (< 96 x294)) (= (x329 (+ x814 64)) x151) (= (x456 x151) x188)) x537) (and (=> (and (not x214) (= x267 96)) x404) (=> x214 x777))) (=> (and (= x267 64) (not x537)) x404))) (=> (and (not x34) (= 32 x267)) x404))) (=> (and (= x267 0) (not x317)) x404)))))))
(assert (x88 x628))
(assert (= x280 (and x865 (not x183))))
(assert (x88 x827))
(assert (= (or x685 x878) x810))
(assert (= (x763 102499615646744134772650717477688572466918151731817230690449879178893085114368) (x1043 102499615646744134772650717477688572466918151731817230690449879178893085114368)))
(assert (x88 x284))
(assert (x88 x471))
(assert (= (=> (= (not (> x275 1)) x1041) (and x1041 x256)) x228))
(assert (= x19 (and x505 x1050)))
(assert (x88 x51))
(assert (= (x518 (x763 2220280665)) 2220280665))
(assert (and (x542 x412 32) (x1070 x412 32) (=> (< 0 32) (= (+ (x328 x412 32) (* 32 (x39 x412 32))) x412)) (x635 x412 32)))
(assert (= 0 (x29 (+ (- (+ 196 (- x954 160)) 196) (x329 (+ 196 x614))))))
(assert (x88 x1054))
(assert (= (x340 (- 192 x216)) 0))
(assert (= x770 (or x341 x30 x165 x600 x945)))
(assert (= (and (not x639) x817) x20))
(assert (= 0 (x29 224)))
(assert (= x165 (and x38 x871)))
(assert (and (x542 x885 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x885 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x885 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x885 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x885)) (x635 x885 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x196))
(assert (x88 x680))
(assert (x88 x346))
(assert (= (and x565 x336) x38))
(assert (= (and x609 x1017) x927))
(assert (= x259 (=> (and (or x71 (not x71)) (= x71 (= 0 x929))) x324)))
(assert (= x654 (and x398 (not x236))))
(assert (x88 x1077))
(assert (= x420 (or x153 x389)))
(assert (= 0 (x340 (- 128 x216))))
(assert (= x631 (=> (and (= x651 (x329 (+ x922 32))) (= (x329 (+ x467 32)) x199) (= x394 (x329 (+ 32 x651))) (= (x329 (+ 32 x394)) x467) (= (x642 (x1043 x669)) x1069) (= (= x1069 0) x823)) (and (=> x823 x840) (=> (and (not x823) (and (or (and (and (= (= x366 (x583 (x1043 x669))) x304) x570 (= x314 (x854 (x1043 x567))) (> 4294967296 x785) (= (x854 (x1043 x669)) x366) x304 (= x570 (<= x314 (x583 (x1043 x567))))) x670) (not x670)) (= (> x929 0) x670))) x259)))))
(assert (x88 x674))
(assert (x88 x319))
(assert (= (and x517 x900) x356))
(assert (= (and x408 x936) x114))
(assert (x88 x592))
(assert (= x153 (and x448 x198)))
(assert (= x42 (and x415 x931)))
(assert (x88 x606))
(assert (x88 x850))
(assert (x88 x849))
(assert (x88 x8))
(assert (= (and x588 x640) x993))
(assert (= x341 (and x790 (not x379))))
(assert (= (x1043 62805084655870755976952745400290271510621614971557940054860603637793562820608) (x763 62805084655870755976952745400290271510621614971557940054860603637793562820608)))
(assert (x88 x691))
(assert (= x505 (or x855 x1071 x201 x625 x285)))
(assert (= 0 (x1034 x12)))
(assert (= x843 (and (not x838) x907)))
(assert (= (and (not x580) x338) x504))
(assert (and (x542 x58 32) (x1070 x58 32) (=> (< 0 32) (= (+ (x328 x58 32) (* 32 (x39 x58 32))) x58)) (x635 x58 32)))
(assert (x88 x124))
(assert (x943 x524))
(assert (= x687 (and (not x973) x510)))
(assert (x88 x869))
(assert (x88 x189))
(assert (x88 x297))
(assert (= 2249206060 (x518 (x763 2249206060))))
(assert (x976 x529))
(assert (x88 x933))
(assert (and (x542 x301 32) (x1070 x301 32) (=> (< 0 32) (= (+ (x328 x301 32) (* 32 (x39 x301 32))) x301)) (x635 x301 32)))
(assert (x88 x965))
(assert (= x900 (or x100 x273)))
(assert (=> (>= 10000 x59) (= (x763 x59) (x1043 x59))))
(assert (= (and x155 x15) x811))
(assert (x88 x759))
(assert (x88 x822))
(assert (x88 x332))
(assert (= (and (not x410) x722) x634))
(assert (x88 x894))
(assert (x88 x798))
(assert (x176 x330))
(assert (x88 x321))
(assert (= (x763 1901074598) (x1043 1901074598)))
(assert (= x1017 (and x652 x899)))
(assert (x88 x895))
(assert (x88 x1067))
(assert (= (=> (and (and (and (= x498 x874) (> 2220280665 x963) (= x197 x321) (= x963 75068239) (>= x874 0) (> x726 0) (<= x874 1461501637330902918203684832716283019655932542975) (= (x642 (x1043 x567)) x726) (> 1245659826 x963) (< x874 1461501637330902918203684832716283019655932542976)) (and (= x406 x498) (= (= x406 x197) x824))) (and (not x789) (< 0 x209) (> 1245659826 x93) (< x93 2220280665) (<= 0 x108) (< x108 1461501637330902918203684832716283019655932542976) (= 75068239 x93) (= x321 x108) (= x209 (x642 (x1043 x567))) (not x393) (>= 1461501637330902918203684832716283019655932542975 x108))) (and (=> (and (and (and (= x286 x738) (= x121 (= x912 x286))) (and (< x809 1245659826) (> x575 0) (= x575 (x642 (x1043 x567))) (= x534 x912) (< x193 1461501637330902918203684832716283019655932542976) (not (= 75068239 x809)) (= x738 x193) (= 832554005 x809) (> 2220280665 x809) (>= 1461501637330902918203684832716283019655932542975 x193) (not (= 818759841 x809)) (<= 0 x193))) (and (not (= 818759841 x592)) (not (= 75068239 x592)) (>= 1461501637330902918203684832716283019655932542975 x881) (= x534 x881) (> 1461501637330902918203684832716283019655932542976 x881) (> 1245659826 x592) (< x592 2220280665) (<= 0 x881) (> x295 0) (= (x642 (x1043 x567)) x295) (= x592 832554005))) (and (=> (and (and (= x860 (x642 (x1043 x567))) (< x170 1461501637330902918203684832716283019655932542976) (< x152 2220280665) (<= 0 x170) (= x170 x436) (>= 1461501637330902918203684832716283019655932542975 x170) (= 1245659826 x152) (< 0 x860) (not (< x152 1245659826))) (and (and (> 1461501637330902918203684832716283019655932542976 x1052) (>= 1461501637330902918203684832716283019655932542975 x1052) (= x470 x1052) (<= 0 x1052) (> x455 0) (not (< x893 1245659826)) (= x893 1245659826) (= x645 x436) (> 2220280665 x893) (= (x642 (x1043 x567)) x455)) (and (= (= x645 x778) x766) (= x470 x778)))) (and x766 (=> (and (and (<= 0 x260) (> 1461501637330902918203684832716283019655932542976 x260) (= x1007 4199168155) (= (x642 (x1043 x567)) x596) (not (= x1007 3705713892)) (= x252 x260) (not (= x1007 3084411429)) (not (= x1007 3572374928)) (not (> 3084411429 x1007)) (not (= x1007 4076725131)) (< 0 x596) (not (< x1007 2220280665)) (<= x260 1461501637330902918203684832716283019655932542975)) (and (and (= x10 x461) (= x179 (= x10 x750))) (and (not (= 3705713892 x315)) (not (= x315 3084411429)) (not (= x315 4076725131)) (= x315 4199168155) (not (< x315 3084411429)) (= (x642 (x1043 x567)) x54) (< 0 x54) (not (< x315 2220280665)) (= x225 x461) (>= 1461501637330902918203684832716283019655932542975 x225) (>= x225 0) (not (= 3572374928 x315)) (= x252 x750) (> 1461501637330902918203684832716283019655932542976 x225)))) (and x179 (=> (and (and (and (= x920 x387) (= x184 (= x920 x821))) (and (not (= x661 2249206060)) (= 2329570063 x661) (not (= 2220280665 x661)) (= x532 x821) (not (> 2220280665 x661)) (> 3084411429 x661) (<= 0 x953) (> x812 0) (= x812 (x642 (x1043 x567))) (>= 1461501637330902918203684832716283019655932542975 x953) (> 1461501637330902918203684832716283019655932542976 x953) (= x387 x953))) (and (= x532 x297) (not (= x676 2249206060)) (= (x642 (x1043 x567)) x465) (> 1461501637330902918203684832716283019655932542976 x297) (<= x297 1461501637330902918203684832716283019655932542975) (> x465 0) (= x676 2329570063) (not (> 2220280665 x676)) (not (= 2220280665 x676)) (>= x297 0) (< x676 3084411429))) x184))))) x121)) x824)) x175))
(assert (= x947 (and x66 x490)))
(assert (x88 x369))
(assert (x88 x683))
(assert (x88 x597))
(assert (x88 x897))
(assert (x88 x821))
(assert (x88 x743))
(assert (not x892))
(assert (= x567 (x518 (x1043 x567))))
(assert (x88 x870))
(assert (= 4294967296 (x518 (x763 4294967296))))
(assert (x88 x524))
(assert (= x285 (and (not x392) x419)))
(assert (= x419 (and x163 x941)))
(assert (x88 x1059))
(assert (= (and (not x263) x995) x290))
(assert (= x375 (=> (= x996 (< 0 x275)) (and (=> (and (= (< 0 x275) x383) x996) (and (=> (and (and (= x101 (x489 1461501637330902918203684832716283019655932542975 x332)) (= x268 x224) (= (x129 x224) x332) (= x306 (= x101 x332))) x383) (and (=> (not x306) x840) (=> (and (= x754 (< 0 x119)) x306) (and (=> (not x754) x840) (=> (and (and (= (x129 x292) x957) (= x238 (x351 (- x914 31))) (= x914 (x351 (- x67 x1))) (= (or (and (> x957 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x238 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x238 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x957 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x957 x238))) x590) (= x1 x292)) x754) (and (=> (not x590) x840) (=> (and (and (= x82 (x129 x952)) (= (x329 (+ x957 x1)) x952) (= (< 18446744073709551615 x82) x263)) x590) (and (=> (and (and (= x939 (x351 (- x67 x82))) (= (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x939) (<= x446 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x939) (<= x446 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x446 x939))) x563) (= x446 (x329 (+ x952 32)))) (not x263)) (and (=> x563 x840) (=> (and (not x563) (and (= (< 0 x870) x846) (or (not x846) (and x846 (and (= (x712 (x1043 x567)) x707) (= (<= x707 (x205 (x1043 x567))) x853) (= x181 (x712 (x1043 x332))) x853 (> 4294967296 x942) x24 (= x24 (= (x205 (x1043 x332)) x181))))))) x444))) (=> x263 x840))))))))) (=> (not x383) x840))) (=> (not x996) x256)))))
(assert (= (x763 33582922474372145882413589741236248003507108108518759994751911431010219196416) (x1043 33582922474372145882413589741236248003507108108518759994751911431010219196416)))
(assert (x88 x348))
(assert (x845 x442))
(assert (x88 x886))
(assert (x845 x115))
(assert (x88 x564))
(assert (x943 x401))
(assert (= (and x1030 x660) x617))
(assert (and (x542 x1035 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x1035 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x1035 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x1035 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1035)) (x635 x1035 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x518 (x1043 x669)) x669))
(assert (= 2005408114 (x518 (x763 2005408114))))
(assert (= x928 (and x248 (not x74))))
(assert (x88 x1060))
(assert (x88 x511))
(assert (= x1058 (and (not x792) x947)))
(assert (and (x542 x76 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x76 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x76 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x76 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x76)) (x635 x76 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x452))
(assert (x88 x769))
(assert (x88 x188))
(assert (x88 x275))
(assert (x88 x1057))
(assert (x88 x553))
(assert (and (x542 x401 32) (x1070 x401 32) (=> (< 0 32) (= (+ (x328 x401 32) (* 32 (x39 x401 32))) x401)) (x635 x401 32)))
(assert (= x960 (=> (and (or (and (not x640) (= x282 x204)) (and (and (> 4294967296 x880) (= 1 x282)) x640)) (and (= x541 (x751 x895)) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x360) x507) (= x989 (x329 (+ x895 x507))) (not (= x407 0)) (= (> x204 0) x640) (not (or (and (> 32 x270) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x270) true)) (> x270 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= 1461501637330902918203684832716283019655932542975 x541) (= x360 (x329 (+ x270 31))))) x194)))
(assert (= x139 (and (not x754) x1006)))
(assert (x88 x76))
(assert (x88 x538))
(assert (= (or x977 x993) x808))
(assert (= x1000 (=> (and (= x597 (x819 x695)) (= x451 (not (> x511 4))) (<= x597 1461501637330902918203684832716283019655932542975) (= x1004 (x329 (+ 32 x319)))) (and (=> (= x578 x1004) x7) x451))))
(assert (x88 x950))
(assert (x88 x469))
(assert (x845 x837))
(assert (= (and x752 (not x320)) x979))
(assert (=> (<= x567 10000) (= (x763 x567) (x1043 x567))))
(assert (x943 x301))
(assert (= (and (not x986) x927) x3))
(assert (= (=> (and (= x297 x827) (= x170 x1008) (= x48 0) (= x965 x1025) (= x881 x918) (= x260 x897) (= x108 x679)) x423) x840))
(assert (x88 x1038))
(assert (x88 x957))
(assert (x88 x826))
(assert (= x876 (and (not x889) x831)))
(assert (x88 x885))
(assert (= (x29 (+ (x329 (+ 196 x614)) (- (+ 196 (- x12 160)) 196))) 0))
(assert (x943 x433))
(assert (x88 x226))
(assert (x88 x514))
(assert (x88 x647))
(assert (x176 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x88 x292))
(assert (x88 x460))
(assert (=> (>= 10000 x202) (= (x1043 x202) (x763 x202))))
(assert (= x805 (and x1076 (not x312))))
(assert (= (and x841 (not x774)) x147))
(assert (x976 x187))
(assert (x88 x860))
(assert (= (and x639 x817) x486))
(assert (= (or x19 x492) x161))
(assert (and (x542 x665 32) (x1070 x665 32) (=> (< 0 32) (= (+ (x328 x665 32) (* 32 (x39 x665 32))) x665)) (x635 x665 32)))
(assert (= (x1043 1245659826) (x763 1245659826)))
(assert (= 0 (x29 256)))
(assert (x88 x586))
(assert (x283 x332))
(assert (x88 x295))
(assert (= (and x312 x1076) x899))
(assert (x88 x659))
(assert (x845 x680))
(assert (x88 x337))
(assert (x88 x739))
(assert (= 0 (x29 (+ (x329 (+ x614 196)) (- (+ (- x151 160) 196) 196)))))
(assert (= x100 (and x105 x543)))
(assert (= x156 (=> (= x709 (> x950 0)) (and (=> (not x709) x840) (=> (and x709 (= x1066 x13)) x608)))))
(assert (x943 x857))
(assert (x88 x812))
(assert (= x75 (=> (and (= (x329 (+ x769 96)) x266) (= x710 (not (< 128 x1091))) (= x1033 (x1078 256))) (and x710 (=> (= x1060 128) x217)))))
(assert (x88 x277))
(assert (x88 x233))
(assert (x88 x1055))
(assert (= (and x493 x535) x722))
(assert (x176 x433))
(assert (= x1027 (and (not x560) x690)))
(assert (= x888 (and x971 x132)))
(assert (x88 x54))
(assert (x88 x90))
(assert (= x582 (=> (and (or (and (= x884 x28) (not x183)) (and (and (> 4294967296 x940) (= 1 x28)) x183)) (and (= (x358 x520) x935) (= x92 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x115)) (= (x329 (+ x520 x92)) x43) (<= x935 1461501637330902918203684832716283019655932542975) (not (= 0 x903)) (not (or (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x431)) (> 32 x431)) (> x431 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (> x884 0) x183) (= (x329 (+ 31 x431)) x115))) x748)))
(assert (x88 x893))
(assert (x88 x373))
(assert (= (x518 (x1043 x202)) x202))
(assert (= x307 (and x1086 x172)))
(assert (= (and x577 (not x587)) x1020))
(assert (x88 x426))
(assert (= (and (not x742) x508) x149))
(assert (x88 x459))
(assert (x88 x1023))
(assert (x845 x433))
(assert (= (x763 2329570063) (x1043 2329570063)))
(assert (= x18 (or x839 x944)))
(assert (= (and x1064 x1020) x91))
(assert (= x97 (and (not x991) x667)))
(assert (x88 x166))
(assert (= 0 (x29 (+ (- (+ 196 (- x552 160)) 196) (x329 (+ 196 x614))))))
(assert (= (x763 75068239) (x1043 75068239)))
(assert (x88 x243))
(assert (x943 x367))
(assert (x88 x112))
(assert (= 0 (x29 (+ (- (+ x51 (- x339 x814)) 196) (x329 (+ x614 196))))))
(assert (= 0 (x29 (+ (x329 (+ 196 x614)) (- (+ x51 (- x933 x814)) 196)))))
(assert (= (and x668 x18) x163))
(assert (x88 x484))
(assert (x88 x848))
(assert (x88 x702))
(assert (and (x542 x680 1461501637330902918203684832716283019655932542976) (x1070 x680 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x328 x680 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x39 x680 1461501637330902918203684832716283019655932542976))) x680)) (x635 x680 1461501637330902918203684832716283019655932542976)))
(assert (= x696 (and x907 x838)))
(assert (= (=> (and (= x473 (x133 x339)) (= (x329 (+ 31 x782)) x58) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x58) x850) (= (x329 (+ x850 x479)) x126) (= x382 (x351 (- x126 x591))) (= (x329 (+ 32 x591)) x922) (= x379 (< 0 x473)) (= x348 (x329 (+ 32 x126)))) (and (=> (and x379 (and (= x814 x414) (= x348 x969) (= x426 (x776 x414)) (= (< 32 x473) x2))) (and (=> (and x2 (and (= (x77 x12) x171) (= (x329 (+ x814 32)) x12) (= (< 64 x473) x565) (= (x329 (+ x348 32)) x724))) (and (=> (and (= 64 x603) (not x565)) x374) (=> (and x565 (and (= (x329 (+ x348 64)) x5) (= x871 (> x473 96)) (= (x421 x552) x72) (= x552 (x329 (+ 64 x814))))) (and (=> x871 x686) (=> (and (= x603 96) (not x871)) x374))))) (=> (and (not x2) (= 32 x603)) x374))) (=> (and (= x603 0) (not x379)) x374))) x708))
(assert (x88 x365))
(assert (= x660 (or x713 (and x729 (not x71)))))
(assert (x88 x473))
(assert (= 0 (x29 (+ (x329 (+ 196 x614)) (- (+ (- x257 x814) x51) 196)))))
(assert (x88 x477))
(assert (= (and x986 x927) x761))
(assert (x88 x138))
(assert (x88 x466))
(assert (x88 x241))
(assert (= x841 (and (not x169) x308)))
(assert (x88 x496))
(assert (= x32 (and (not x1081) x634)))
(assert (x88 x116))
(assert (x88 x568))
(assert (x88 x230))
(assert (x88 x130))
(assert (x88 x1049))
(assert (= x468 (and x66 (not x490))))
(assert (x845 x335))
(assert (x88 x591))
(assert (= (=> (and (= x512 (> x650 x547)) (or (and (= (x329 (+ x547 x564)) x424) x512) (not x512))) x641) x548))
(assert (x88 x572))
(assert (x88 x154))
(assert (= x125 (and x825 (not x159))))
(assert (x943 x442))
(assert (x88 x479))
(assert (= (and x408 (not x936)) x593))
(assert (x88 x406))
(assert (= (x1043 54065695799311150304516525983669583430195215316752708547810291668471328538624) (x763 54065695799311150304516525983669583430195215316752708547810291668471328538624)))
(assert (and (x542 x367 32) (x1070 x367 32) (=> (< 0 32) (= (+ (x328 x367 32) (* 32 (x39 x367 32))) x367)) (x635 x367 32)))
(assert (= (and x398 x236) x422))
(assert (x88 x732))
(assert (= (=> (and (and (= (x329 (+ x691 x43)) x895) (not (= 0 x28)) (= x973 (> x745 0)) (= x837 (x329 (+ 31 x940))) (not (or (> x940 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x940) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x940) true)))) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x837) x691) (>= 1461501637330902918203684832716283019655932542975 x46) (= (x1031 x43) x46)) (or (and (and (< x270 4294967296) (= 1 x407)) x973) (and (= x745 x407) (not x973)))) x960) x748))
(assert (x88 x294))
(assert (x88 x1091))
(assert (= x588 (or x1001 x687)))
(assert (x88 x370))
(assert (= 0 (x29 (+ (- (+ (- 192 x814) x51) 196) (x329 (+ x614 196))))))
(assert (x976 x669))
(assert (= x713 (and x729 x71)))
(assert (x943 x412))
(assert (= (and x102 x735) x384))
(assert (= x862 (and x610 x40)))
(assert (x176 x335))
(assert (= x747 (and x463 (not x519))))
(assert (x88 x942))
(assert (= (x1043 4739670319144124481003130557741556594755290868171975227769803894069435301888) (x763 4739670319144124481003130557741556594755290868171975227769803894069435301888)))
(assert (and (x542 x76 32) (x1070 x76 32) (=> (< 0 32) (= (+ (x328 x76 32) (* 32 (x39 x76 32))) x76)) (x635 x76 32)))
(assert (= (and (not x636) x57) x398))
(assert (x88 x615))
(assert (x88 x1004))
(assert (= x132 (and x841 x774)))
(assert (x88 x914))
(assert (x176 32))
(assert (= x206 (=> (and (or (not x730) x730) (= (> x96 x602) x730)) x375)))
(assert (= (and x80 (not x768)) x253))
(assert (= x475 (and x515 x876)))
(assert (= x1048 (=> (and (= (> x762 x749) x1050) (or (not x1050) (and x1050 (= (x329 (+ x749 x833)) x477)))) x258)))
(assert (x88 x470))
(assert (x88 x987))
(assert (x88 x99))
(assert (= (or x620 x731) x463))
(assert (= x492 (and x505 (not x1050))))
(assert (= (and x823 x168) x906))
(assert (x88 x225))
(assert (x88 x17))
(assert (= (x518 (x763 2329570063)) 2329570063))
(assert (= 2376452955 (x518 (x763 2376452955))))
(assert (= (x1043 3572374928) (x763 3572374928)))
(assert (= x643 (and x1002 x34)))
(assert (x88 x836))
(assert (x88 x58))
(assert (= x666 (and (not x214) x601)))
(assert (= 0 (x29 (+ (- (+ 196 (- x257 160)) 196) (x329 (+ x614 196))))))
(assert (= x510 (or x280 x637)))
(assert (= x400 (and x622 x673)))
(assert (x88 x968))
(assert (= (=> (and (<= 0 x213) (= x198 (< x757 x797)) (= x128 true) (>= 1461501637330902918203684832716283019655932542975 x59) (<= x793 1461501637330902918203684832716283019655932542975) (<= 0 x528) (= x757 (x123 (x1043 x202))) (< x202 1461501637330902918203684832716283019655932542976) (<= 0 x816) (>= 1461501637330902918203684832716283019655932542975 x1038) (= (= x202 0) x842) (<= 0 x297) (<= 0 x558) (<= x528 1461501637330902918203684832716283019655932542975) (<= 0 x1038) (= (x123 (x1043 x567)) x706) (>= x108 0) (>= x272 0) (= x291 false) (>= 255 x619) (<= 0 x832) (<= 0 x970) (<= 0 x1057) (>= x706 0) (>= 255 x970) (>= x683 0) (<= 0 x807) (>= 255 x237) (>= 79228162514264337593543950335 x987) (<= 0 x170) (>= 1461501637330902918203684832716283019655932542975 x242) (>= 1461501637330902918203684832716283019655932542975 x213) (<= 0 x701) (>= 1461501637330902918203684832716283019655932542975 x1057) (<= 0 x242) (>= x1077 0) (>= 1461501637330902918203684832716283019655932542975 x260) (>= 1461501637330902918203684832716283019655932542975 x832) (<= x816 255) x349 (<= 0 x260) (< 0 x59) (<= 0 x435) (= x63 x435) (>= x881 0) (= x47 (< 0 x202)) (< 0 x567) (>= 1461501637330902918203684832716283019655932542975 x881) (not (= x59 x567)) (>= x619 0) (<= 0 x226) (>= x237 0) (<= 0 x546) (<= 0 x793) (or x842 x47) (>= 1461501637330902918203684832716283019655932542975 x170) (<= x558 255) (<= x243 255) x557 (>= 1461501637330902918203684832716283019655932542975 x567) (>= 1461501637330902918203684832716283019655932542975 x807) (>= x987 0) (>= 255 x689) (<= x683 1461501637330902918203684832716283019655932542975) (= x557 (< 0 (x642 (x1043 x567)))) (<= 0 x980) (<= 0 x615) (>= 1461501637330902918203684832716283019655932542975 x108) (= x1047 false) (= 1262878978 x716) (>= 1461501637330902918203684832716283019655932542975 x615) (<= x435 1461501637330902918203684832716283019655932542975) (= (x123 (x1043 x59)) x226) (>= x689 0) (<= x546 1461501637330902918203684832716283019655932542975) (<= x297 1461501637330902918203684832716283019655932542975) (<= x1077 1461501637330902918203684832716283019655932542975) (= x615 x202) (= x783 5) (>= 1461501637330902918203684832716283019655932542975 x980) (= false x780) (<= x701 255) (<= x272 1461501637330902918203684832716283019655932542975) (>= x243 0) (= (< 0 (x642 (x1043 x59))) x349)) (and (=> (and (and (= x789 false) (= x108 x874) (= x193 x881) (= x1052 x170) (= true x393) (= x260 x225) (= x953 x297)) x198) x175) (=> (and (and (not (> x219 x1093)) (< 0 x154) (= (x819 x589) x130) (= x885 (x329 (+ 31 x427))) (= x856 x553) (not (> x990 x1093)) (= x45 x632) (not (> x743 x1093)) (= (x329 (+ x432 x130)) x219) (= x618 (x329 (+ x887 4))) (= (x329 (+ x405 x427)) x743) (= (x967 (* x240 32)) x1049) (<= 0 x723) (= x611 (x967 (* 32 x511))) (or (and (< x999 x1093) (= (<= x999 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1093))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1093) (> x999 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (> x1082 18446744073709551615)) (= (x329 (+ x618 32)) x466) (= (x329 (+ x756 31)) x76) (= x418 x553) (= (x329 (+ x797 x572)) x523) (= x485 x202) (= x756 (x329 (+ 32 x586))) (= 0 x692) (<= 0 x514) (<= x723 1461501637330902918203684832716283019655932542975) (= x781 1262878978) (= 0 x624) (not (< 18446744073709551615 x130)) (< x781 2220280665) (= x276 (x329 (+ x244 4))) (= (x123 (x1043 x202)) x162) (= (or x391 x700) x1051) (= x990 (x329 (+ x466 x611))) (= x154 (x642 (x1043 x567))) (not (< 18446744073709551615 x765)) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x301) x399) (= x1055 (x329 (+ x299 128))) (= x765 x887) (= (x305 (x1043 x567)) x572) (= x117 x244) (= (x913 128) x547) (= x739 x1082) (= (x819 x618) x511) (not (> x240 18446744073709551615)) (<= x485 1461501637330902918203684832716283019655932542975) (= x702 x202) (not (or (and (< x73 160) (= (<= x73 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x73 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (< x781 1245659826)) (= x1072 (x329 (+ x276 31))) (not (= x781 1245659826)) (= x405 (x329 (+ 32 x799))) (= (ite x86 1 0) x692) (or (and (> x1093 x284) (= (<= x284 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1093 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x284 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1093 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x819 x276) x240) (= x614 (x329 (+ x399 x1055))) (= x857 (x329 (+ x130 31))) (= (> x547 0) x312) (not (> x196 x1093)) (or (and (> x274 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1093 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x274 x1093) (= (<= x1093 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x274)))) (= (- x162 x797) x1012) (= (ite x1051 1 0) x624) (= x678 x8) (= (> 128 x1055) x221) (= x45 x514) (or (and (<= x1093 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1072)) (and (< x1072 x1093) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1072) (<= x1093 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (< 18446744073709551615 x1055) x813) (not (< 18446744073709551615 x511)) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x76) x299) (< (+ x572 x64) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x329 (+ 160 x677)) x904) (= x974 (x329 (+ x276 32))) (= x427 (x819 x799)) (not (< 18446744073709551615 x117)) (= x677 (x329 (+ 4 x614))) (= (x329 (+ x589 31)) x284) (= x274 (x329 (+ 31 x618))) (= (< 18446744073709551615 x614) x391) (= x86 (or x221 x813)) (= x64 x797) (not (< 18446744073709551615 x427)) (not (< 18446744073709551615 x8)) (= (x329 (+ 32 x1055)) x672) (<= 0 x485) (not (> 4 x1093)) (= (x329 (+ x678 4)) x799) (= x700 (> x1055 x614)) (= x999 (x329 (+ 31 x799))) (= (x329 (+ x589 32)) x432) (= x73 (x351 (- x1093 4))) (<= x514 1461501637330902918203684832716283019655932542975) (= x233 (x329 (+ 160 x427))) (= x589 (x329 (+ 4 x739))) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1093)) (< 163 x1093)) (= (x329 (+ x672 x130)) x135) (= (x329 (+ x904 32)) x564) (= (x329 (+ x1089 31)) x301) (= x852 (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x857)) (= x196 (x329 (+ x1049 x974))) (= x1089 (x329 (+ 32 x852))) (= (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904 x885) x586)) (not x198)) (and (=> (and (not x312) (= 0 x650)) x548) (=> (and x312 (and (= x652 (< 32 x547)) (= x662 x564) (= x21 (x443 160)))) (and (=> (and (and (= (x329 (+ x564 32)) x1032) (= (< 64 x547) x609) (= x158 (x279 192))) x652) (and (=> (and x609 (and (= x255 (x329 (+ 64 x564))) (= x376 (x1018 224)) (= (< 96 x547) x986))) (and (=> x986 x134) (=> (and (not x986) (= x650 96)) x548))) (=> (and (not x609) (= 64 x650)) x548))) (=> (and (= 32 x650) (not x652)) x548))))))) x892))
(assert (x88 x1007))
(assert (x88 x954))
(assert (x88 x53))
(assert (x88 x387))
(assert (x88 x980))
(assert (x88 x274))
(assert (x88 x1035))
(assert (x88 x257))
(assert (x88 x270))
(assert (= (x29 (+ (- (+ (- x552 x814) x51) 196) (x329 (+ 196 x614)))) 0))
(assert (= (x1043 818759841) (x763 818759841)))
(assert (x176 x1035))
(assert (x176 x115))
(assert (= x308 (and x463 x519)))
(assert (x88 x335))
(assert (x88 x978))
(assert (= x493 (and (not x795) x593)))
(assert (x88 x523))
(assert (x88 x719))
(assert (= (x29 (+ 32 (x329 (+ x614 196)))) 0))
(assert (x88 x655))
(assert (x88 x1033))
(assert (x88 x65))
(assert (and (x542 x412 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x412 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x412 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x412 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x412)) (x635 x412 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x281))
(assert (x88 x574))
(assert (x845 x857))
(assert (x88 x21))
(assert (and (x141 32 x511) (x1046 32 x511) (and (= (- (* x511 32) (* x511 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x511)) (= (x55 32 (- x511 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x511 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x511 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x511 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x511 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x345 32 x511) (x1080 32 x511) (x265 32 x511) (= (x55 32 x511) (* 32 x511))))
(assert (x88 x982))
(assert (x88 x309))
(assert (= x450 (or x696 x843)))
(assert (= (=> (and (= (x329 (+ x833 96)) x501) (= x84 (x329 (+ 96 x672))) (= (x9 x84) x740) (= x462 (not (< 128 x749)))) (and x462 (=> (= x762 128) x1048))) x269))
(assert (= 1553423035 (x518 (x763 1553423035))))
(assert (= x907 (or x192 x386 x666 x714 x926)))
(assert (x88 x63))
(assert (= (and x417 x383) x891))
(assert (x88 x598))
(assert (x88 x1089))
(assert (x88 x170))
(assert (= (and x846 x368) x1092))
(assert (= (=> (and (= (= 0 x664) x517) (or (and x517 (and (= x23 (x502 (x1043 x567))) (= x337 x452) (= x915 x1011) (= 0 x36) (= (x720 (x1043 x187)) x1011) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x23 x36)) (= x950 x664) (= x122 x23))) (and (not x517) (and (= x950 x664) (= x337 x452))))) x264) x478))
(assert (= (x518 (x763 1245659826)) 1245659826))
(assert (x88 x589))
(assert (= x388 (and x85 x83)))
(assert (= 0 (x340 (- x12 x216))))
(assert (= 0 (x29 (+ (x329 (+ 196 x614)) (- (+ x51 (- 160 x814)) 196)))))
(assert (and (x542 x433 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x433 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x433 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x433 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x433)) (x635 x433 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x579))
(assert (= 0 (x1034 x954)))
(assert (= 64069044923792539370177021244577383457373632460708312080110356237917649633280 (x518 (x763 64069044923792539370177021244577383457373632460708312080110356237917649633280))))
(assert (x943 x115))
(assert (x845 x360))
(assert (x88 x918))
(assert (= (x518 (x763 4199168155)) 4199168155))
(assert (x88 x677))
(assert (= (x1043 2005408114) (x763 2005408114)))
(assert (x88 x488))
(assert (x88 x745))
(assert (= x508 (and x357 x556)))
(assert (x88 x115))
(assert (x88 x395))
(assert (and (x542 x115 32) (x1070 x115 32) (=> (< 0 32) (= (+ (x328 x115 32) (* 32 (x39 x115 32))) x115)) (x635 x115 32)))
(assert (x88 x650))
(assert (= (and (not x198) x448) x1076))
(assert (x88 x186))
(assert (x88 x724))
(assert (x88 x439))
(assert (x88 x10))
(assert (x413 x119))
(assert (x88 x771))
(assert (= x758 (or x811 x525 x287 x1058 x468)))
(assert (x88 x293))
(assert (x88 x220))
(assert (x88 x458))
(assert (x88 x455))
(assert (x88 x969))
(assert (= (x763 1845979623) (x1043 1845979623)))
(assert (x88 x1))
(assert (x176 x665))
(assert (x88 x646))
(assert (x88 x694))
(assert (= x359 (and x377 x829)))
(assert (x88 x498))
(assert (= (x763 79228162514264337593543950335) (x1043 79228162514264337593543950335)))
(assert (= (and (not x883) x684) x775))
(assert (= (x1034 x257) 0))
(assert (= (and x2 x938) x336))
(assert (x88 x864))
(assert (= (and x601 x214) x192))
(assert (and (x542 x332 1461501637330902918203684832716283019655932542976) (x1070 x332 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x328 x332 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x39 x332 1461501637330902918203684832716283019655932542976))) x332)) (x635 x332 1461501637330902918203684832716283019655932542976)))
(assert (x88 x94))
(assert (x176 x401))
(assert (x88 x958))
(assert (= (and x248 x74) x105))
(assert (= x1001 (and x973 x510)))
(assert (= (and (not x15) x155) x525))
(assert (x88 x67))
(assert (x88 x446))
(assert (x88 x382))
(assert (x88 x1021))
(assert (= 0 (x1034 224)))
(assert (x88 x693))
(assert (x88 x781))
(assert (x88 x1026))
(assert (= 0 (x29 (+ (x329 (+ 196 x614)) (- (+ x51 (- x414 x814)) 196)))))
(assert (= (and x32 (not x877)) x41))
(assert (= (and x722 x410) x300))
(assert (x88 x925))
(assert (x88 x520))
(assert (= x566 (and x169 x308)))
(assert (and (x542 x433 32) (x1070 x433 32) (=> (< 0 32) (= (+ (x328 x433 32) (* 32 (x39 x433 32))) x433)) (x635 x433 32)))
(assert (x88 x576))
(assert (= (and (not x652) x899) x1014))
(assert (= (and x450 x951) x735))
(assert (x88 x367))
(assert (= (x29 (+ 96 (x329 (+ 196 x614)))) 0))
(assert (x88 x833))
(assert (x88 x678))
(assert (= (and x876 (not x515)) x80))
(assert (x88 x626))
(assert (x88 x237))
(assert (x88 x117))
(assert (x88 x181))
(assert (x88 x52))
(assert (= x1056 (and x900 (not x517))))
(assert (x88 x50))
(assert (= (x518 (x763 54065695799311150304516525983669583430195215316752708547810291668471328538624)) 54065695799311150304516525983669583430195215316752708547810291668471328538624))
(assert (= x896 (=> (and (or x931 (not x931)) (= (= 0 x942) x931)) x573)))
(assert (x88 x126))
(assert (x176 x360))
(assert (x88 x442))
(assert (x88 x140))
(assert (x88 x952))
(assert (= (and x483 x14) x983))
(assert (x88 x624))
(assert (x88 x414))
(assert (x88 x339))
(assert (and (x141 32 x119) (x1046 32 x119) (and (= (- (* x119 32) (* x119 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x119)) (= (x55 32 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x119 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x345 32 x119) (x1080 32 x119) (x265 32 x119) (= (x55 32 x119) (* 32 x119))))
(assert (x88 x204))
(assert (= x908 (and x388 x985)))
(assert (= (and x593 x795) x531))
(assert (= (and x667 x991) x556))
(assert (x88 x491))
(assert (x88 x381))
(assert (x88 x701))
(assert (= (=> (and (= x437 (x329 (+ 96 x348))) (= (x329 (+ x814 96)) x933) (= x50 (x773 x933)) (= (not (> x473 128)) x1040)) (and x1040 (=> (= x603 128) x374))) x686))
(assert (x88 x578))
(assert (x943 x837))
(assert (= (and x643 x537) x601))
(assert (x88 x963))
(assert (x88 x723))
(assert (x88 x211))
(assert (= (x1043 3084411429) (x763 3084411429)))
(assert (x88 x970))
(assert (x88 x437))
(assert (and (x542 x58 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x58 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x58 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x58 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x58)) (x635 x58 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x981))
(assert (= (and x775 (not x89)) x326))
(assert (= (or x879 x480) x57))
(assert (x88 x809))
(assert (= (=> (= (not (< 128 x602)) x571) (and x571 (=> (= 128 x96) x206))) x718))
(assert (x88 x594))
(assert (= (x763 4294967296) (x1043 4294967296)))
(assert (x88 x240))
(assert (x88 x434))
(assert (x88 x399))
(assert (x88 x209))
(assert (= (and (not x537) x643) x926))
(assert (= (x518 (x763 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (and (x542 x442 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x442 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x442 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x442 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x442)) (x635 x442 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (and (not x951) x450) x316))
(assert (x88 x726))
(assert (= 62805084655870755976952745400290271510621614971557940054860603637793562820608 (x518 (x763 62805084655870755976952745400290271510621614971557940054860603637793562820608))))
(assert (= x934 (or x983 x1085 x911 x946 x959 x675 x300 x41 x253 x919 x70 x114 x486 x906 x1009 x326 x120 x727 x815 x653 x1027 x566 x139 x648 x531 x747 x125 x251 x475 x755 x617 x509 x313 x350 x561)))
(assert (= (and (not x563) x290) x368))
(assert (= 79228162514264337593543950335 (x518 (x763 79228162514264337593543950335))))
(assert (x88 x495))
(assert (and (x542 x978 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x978 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x978 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x978 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x978)) (x635 x978 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x88 x1016))
(assert (= x59 (x518 (x1043 x59))))
(assert (= (x29 (+ (- (+ (- x414 160) 196) 196) (x329 (+ 196 x614)))) 0))
(assert (= (=> (and (= (x329 (+ 96 x479)) x17) (= x449 (not (> x782 128))) (= x598 (x178 256))) (and (=> (= x544 128) x425) x449)) x441))
(assert (= (and x1020 (not x1064)) x1085))
(assert (x88 x778))
(assert (= (x1043 1461501637330902918203684832716283019655932542976) (x763 1461501637330902918203684832716283019655932542976)))
(assert (x88 x549))
(assert (x88 x966))
(assert (x88 x762))
(assert (= (x1043 2249206060) (x763 2249206060)))
(assert (x88 x797))
(assert (x88 x127))
(assert (= x273 (and (not x543) x105)))
(assert (=> (>= 10000 x669) (= (x1043 x669) (x763 x669))))
(assert (x176 1461501637330902918203684832716283019655932542976))
(assert (x845 1461501637330902918203684832716283019655932542975))
(assert (x88 x596))
(assert (= (and (not x551) x770) x487))
(assert (and (>= 340282366920938463463374607431768211455 (x474 x567 x61)) (>= (x474 x567 x61) 10000)))
(assert (x88 x630))
(assert (= (x763 1461501637330902918203684832716283019655932542975) (x1043 1461501637330902918203684832716283019655932542975)))
(assert (= 0 (x29 x917)))
(assert (x845 x58))
(assert (= 75068239 (x518 (x763 75068239))))
(assert (x88 x874))
(assert (x88 x803))
(assert (x88 x418))
(assert (= (x29 160) 0))
(assert (x88 x661))
(assert (x176 x680))
(assert (= 0 (x29 x491)))
(assert (x88 x917))
(assert (= (x518 (x1043 x680)) x680))
(assert (x88 x234))
(assert (x88 x286))
(assert (x845 x76))
(assert (= x70 (and x113 x91)))
(assert (and (x542 x401 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x401 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x401 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x401 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x401)) (x635 x401 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x217 (=> (and (= (< x1091 x1060) x580) (or (and (= x925 (x329 (+ x769 x1091))) x580) (not x580))) x95)))
(assert (and (x542 x330 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1070 x330 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x328 x330 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x39 x330 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x330)) (x635 x330 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(check-sat)
(exit)
