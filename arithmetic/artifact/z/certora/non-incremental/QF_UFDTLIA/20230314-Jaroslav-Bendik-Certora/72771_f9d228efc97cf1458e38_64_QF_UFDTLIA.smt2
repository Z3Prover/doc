(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x29 0)) (((x331 (x315 x29) (x114 Int)) (x426 (x103 x29) (x132 x29) (x224 x29) (x409 x29) (x317 x29) (x271 Int)) (x81 (x60 x29) (x234 x29) (x173 Int)) (x204 (x200 Int)))))
(declare-fun x228 () Int)
(declare-fun x179 () Int)
(declare-fun x172 () Bool)
(declare-fun x84 () Bool)
(declare-fun x122 () Int)
(declare-fun x245 () Int)
(declare-fun x201 () Int)
(declare-fun x230 () Int)
(declare-fun x212 (Int) Int)
(declare-fun x105 () Int)
(declare-fun x278 () Int)
(declare-fun x68 () x29)
(declare-fun x63 () x29)
(declare-fun x62 (x29) Int)
(declare-fun x329 () Int)
(declare-fun x418 () Int)
(declare-fun x83 () Int)
(declare-fun x402 () Int)
(declare-fun x392 () Bool)
(declare-fun x129 (Int Int) Int)
(declare-fun x14 () x29)
(declare-fun x229 () Int)
(declare-fun x238 () Int)
(declare-fun x328 () x29)
(declare-fun x334 () Int)
(declare-fun x178 () Bool)
(declare-fun x318 () Bool)
(declare-fun x351 (x29) Int)
(declare-fun x404 () Bool)
(declare-fun x363 () Int)
(declare-fun x88 () x29)
(declare-fun x206 () Int)
(declare-fun x220 () Int)
(declare-fun x90 () Bool)
(declare-fun x25 () Bool)
(declare-fun x332 () Bool)
(declare-fun x256 () Int)
(declare-fun x352 () Int)
(declare-fun x263 (Int Int) Int)
(declare-fun x323 () Int)
(declare-fun x20 () Bool)
(declare-fun x294 () Int)
(declare-fun x10 (Int Int) Int)
(declare-fun x202 () Bool)
(declare-fun x381 () x29)
(declare-fun x146 () x29)
(declare-fun x239 () x29)
(declare-fun x341 () Int)
(declare-fun x101 () Bool)
(declare-fun x359 () Int)
(declare-fun x177 () Int)
(declare-fun x196 () Int)
(declare-fun x130 () Int)
(declare-fun x3 () Bool)
(declare-fun x214 () Int)
(declare-fun x246 () Int)
(declare-fun x321 (x29) Int)
(declare-fun x194 () Int)
(declare-fun x1 () Int)
(declare-fun x410 () Bool)
(declare-fun x268 () Int)
(declare-fun x424 () Bool)
(declare-fun x311 () Bool)
(declare-fun x270 () Int)
(declare-fun x61 () Int)
(declare-fun x13 () Bool)
(declare-fun x40 () Int)
(declare-fun x187 () Int)
(declare-fun x162 () Int)
(declare-fun x137 () Int)
(declare-fun x195 () Bool)
(declare-fun x100 () Int)
(declare-fun x387 () Int)
(declare-fun x247 () Int)
(declare-fun x148 () Int)
(declare-fun x408 () Int)
(declare-fun x420 () Bool)
(declare-fun x384 (x29) Int)
(declare-fun x339 () Int)
(declare-fun x225 () x29)
(declare-fun x2 () x29)
(declare-fun x272 () Int)
(declare-fun x290 () Int)
(declare-fun x358 () Int)
(declare-fun x376 () Int)
(declare-fun x76 () Bool)
(declare-fun x69 () Bool)
(declare-fun x345 () Int)
(declare-fun x109 (Int Int) Int)
(declare-fun x350 () Int)
(declare-fun x116 () Int)
(declare-fun x23 () Bool)
(declare-fun x337 () Bool)
(declare-fun x36 (Int) x29)
(declare-fun x309 () Bool)
(declare-fun x405 () Int)
(declare-fun x370 (Int) Int)
(declare-fun x386 (Int) Int)
(declare-fun x252 () Int)
(declare-fun x108 () Int)
(declare-fun x400 () Int)
(declare-fun x385 () Bool)
(declare-fun x237 () Int)
(declare-fun x207 () Int)
(declare-fun x7 () Bool)
(declare-fun x209 () Int)
(declare-fun x119 () Bool)
(declare-fun x320 () Int)
(declare-fun x340 () Bool)
(declare-fun x380 () Int)
(declare-fun x361 () Int)
(declare-fun x244 () Int)
(declare-fun x150 () Int)
(declare-fun x9 () Bool)
(declare-fun x41 () Int)
(declare-fun x417 () Int)
(declare-fun x74 () Bool)
(declare-fun x56 () Int)
(declare-fun x281 () Int)
(declare-fun x49 () Int)
(declare-fun x55 () Bool)
(declare-fun x276 () x29)
(declare-fun x241 () Int)
(declare-fun x145 () Int)
(declare-fun x26 () Int)
(declare-fun x64 () Int)
(declare-fun x371 () Int)
(declare-fun x299 () Bool)
(declare-fun x79 () Int)
(declare-fun x115 () Int)
(declare-fun x336 () Int)
(declare-fun x406 () Bool)
(declare-fun x379 () x29)
(declare-fun x141 () Bool)
(declare-fun x110 () Int)
(declare-fun x383 () Int)
(declare-fun x45 () Int)
(declare-fun x211 () Bool)
(declare-fun x98 () x29)
(declare-fun x99 () Int)
(declare-fun x396 () Bool)
(declare-fun x21 () Int)
(declare-fun x5 () Bool)
(declare-fun x159 () Bool)
(declare-fun x58 () Int)
(declare-fun x158 () Int)
(declare-fun x199 () Int)
(declare-fun x72 () Bool)
(declare-fun x102 () Int)
(declare-fun x185 () Int)
(declare-fun x155 () Int)
(declare-fun x135 () Int)
(declare-fun x152 () Bool)
(declare-fun x403 () Bool)
(declare-fun x59 () Bool)
(declare-fun x293 () Int)
(declare-fun x94 () Bool)
(declare-fun x138 () Int)
(declare-fun x304 () x29)
(declare-fun x288 () Int)
(declare-fun x382 () Int)
(declare-fun x217 (Int Int) Int)
(declare-fun x82 () Int)
(declare-fun x414 (x29) Int)
(declare-fun x249 () Int)
(declare-fun x250 () Int)
(declare-fun x283 () Bool)
(declare-fun x91 () Int)
(declare-fun x203 () Bool)
(declare-fun x312 (x29) Int)
(declare-fun x8 () Int)
(declare-fun x349 () x29)
(declare-fun x164 () Bool)
(declare-fun x104 () Bool)
(declare-fun x18 () Int)
(declare-fun x347 () Int)
(declare-fun x222 () Int)
(declare-fun x106 () Bool)
(declare-fun x171 () Bool)
(declare-fun x251 () Int)
(declare-fun x421 () Int)
(declare-fun x310 () Int)
(declare-fun x335 () Int)
(declare-fun x373 () Int)
(declare-fun x30 () Int)
(declare-fun x44 () x29)
(declare-fun x147 () Bool)
(declare-fun x391 (Int Int) Int)
(declare-fun x416 () Int)
(declare-fun x118 () Int)
(declare-fun x15 () Bool)
(declare-fun x353 () Int)
(declare-fun x117 () Bool)
(declare-fun x77 () Int)
(declare-fun x243 () Bool)
(declare-fun x401 () x29)
(declare-fun x154 () Int)
(declare-fun x134 () Bool)
(declare-fun x255 () Int)
(declare-fun x248 () x29)
(declare-fun x32 () Int)
(declare-fun x192 () Bool)
(declare-fun x174 () Int)
(declare-fun x67 () Int)
(declare-fun x47 () Int)
(declare-fun x167 () Bool)
(declare-fun x65 () Int)
(declare-fun x175 () Int)
(declare-fun x266 () Int)
(declare-fun x70 () Bool)
(declare-fun x210 () Bool)
(declare-fun x71 () x29)
(declare-fun x282 () Int)
(declare-fun x96 (Int Int) Int)
(declare-fun x368 () Int)
(declare-fun x231 () x29)
(declare-fun x120 () x29)
(declare-fun x37 () x29)
(declare-fun x38 () Int)
(declare-fun x57 () Bool)
(declare-fun x46 () x29)
(declare-fun x348 () Int)
(declare-fun x157 () Int)
(declare-fun x53 () Int)
(declare-fun x216 () Int)
(declare-fun x369 () Int)
(declare-fun x183 () Int)
(declare-fun x136 () Bool)
(declare-fun x153 () Bool)
(declare-fun x87 () Bool)
(declare-fun x50 () Int)
(declare-fun x107 () Int)
(declare-fun x265 () Int)
(declare-fun x261 () Int)
(declare-fun x284 () Int)
(declare-fun x218 () Int)
(declare-fun x264 () Int)
(declare-fun x366 () Bool)
(declare-fun x131 () Int)
(declare-fun x188 (Int Int) Int)
(declare-fun x364 (x29) Int)
(declare-fun x399 () Int)
(declare-fun x85 () x29)
(declare-fun x374 () Int)
(declare-fun x316 () Int)
(declare-fun x419 () Int)
(declare-fun x324 () Int)
(declare-fun x208 () Int)
(declare-fun x289 () Int)
(declare-fun x377 () Int)
(declare-fun x182 () x29)
(declare-fun x51 () Int)
(declare-fun x80 () Bool)
(declare-fun x285 () Int)
(declare-fun x181 () Bool)
(declare-fun x221 () Int)
(declare-fun x126 () Int)
(declare-fun x393 () Int)
(declare-fun x394 () Int)
(declare-fun x275 () x29)
(declare-fun x219 () Int)
(declare-fun x367 () Bool)
(declare-fun x411 () Bool)
(declare-fun x11 () x29)
(declare-fun x163 () Int)
(declare-fun x133 () Bool)
(declare-fun x277 () Int)
(declare-fun x54 () Int)
(declare-fun x279 () Int)
(declare-fun x389 () Int)
(declare-fun x313 () x29)
(declare-fun x180 () Int)
(declare-fun x322 () Int)
(declare-fun x398 () Int)
(declare-fun x301 () x29)
(declare-fun x395 () Int)
(declare-fun x296 () Int)
(declare-fun x253 () x29)
(declare-fun x16 () x29)
(declare-fun x127 (x29) Int)
(declare-fun x223 () Int)
(declare-fun x33 () Bool)
(declare-fun x111 () Bool)
(declare-fun x168 () Int)
(declare-fun x128 () x29)
(declare-fun x423 () Bool)
(declare-fun x295 () Int)
(declare-fun x305 () Int)
(declare-fun x286 () x29)
(declare-fun x360 () Int)
(declare-fun x205 () Int)
(declare-fun x302 () Int)
(declare-fun x378 () x29)
(declare-fun x280 () x29)
(declare-fun x31 () Int)
(declare-fun x425 (Int Int) Int)
(declare-fun x269 () Int)
(declare-fun x325 () Int)
(declare-fun x123 () Int)
(declare-fun x113 () Bool)
(declare-fun x66 () x29)
(declare-fun x292 () Int)
(declare-fun x390 () x29)
(declare-fun x327 () Int)
(declare-fun x242 () x29)
(declare-fun x6 () Int)
(declare-fun x191 () Int)
(declare-fun x198 () Int)
(declare-fun x326 () Int)
(declare-fun x259 () x29)
(declare-fun x274 () Int)
(declare-fun x125 () Bool)
(declare-fun x95 () x29)
(declare-fun x215 () Int)
(declare-fun x233 () Int)
(declare-fun x303 () Int)
(declare-fun x165 () Int)
(declare-fun x35 () Bool)
(declare-fun x338 () Int)
(declare-fun x193 () Int)
(declare-fun x342 () Int)
(declare-fun x258 () Bool)
(declare-fun x169 () Bool)
(declare-fun x357 () x29)
(declare-fun x213 () Bool)
(declare-fun x93 () Int)
(declare-fun x121 () Bool)
(declare-fun x412 () Int)
(declare-fun x143 () Int)
(declare-fun x254 () Int)
(declare-fun x227 () Bool)
(declare-fun x78 () Int)
(declare-fun x422 () x29)
(declare-fun x306 () Int)
(declare-fun x124 () Int)
(declare-fun x112 () Int)
(declare-fun x52 () Int)
(define-fun x19 ((x29 x29) (x235 Int)) x29 (ite ((_ is x331) x29) (x331 (x315 x29) (+ (x114 x29) x235)) (ite ((_ is x426) x29) (x426 (x103 x29) (x132 x29) (x224 x29) (x409 x29) (x317 x29) (+ x235 (x271 x29))) (ite ((_ is x81) x29) (x81 (x60 x29) (x234 x29) (+ (x173 x29) x235)) (x204 (+ x235 (x200 x29)))))))
(define-fun x140 ((x39 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x39) (<= 0 x39)) x39 (- x39 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x197 ((x39 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x39) (< x39 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x39) x39))
(define-fun x43 ((x39 Int)) Int (ite (and (< x39 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x39)) x39 (ite (and (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x39) (>= x39 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x39 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x39) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x39)) (+ x39 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x425 x39 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x333 ((x413 Int)) Bool (and (< x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x413)))
(define-fun x22 ((x413 Int) (x236 Int)) Bool (=> (and (> x413 0) (< 0 x236)) (= (= x236 (x109 (x43 (x217 x413 x236)) x413)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x217 x413 x236)))))
(define-fun x28 ((x413 Int) (x236 Int)) Bool (=> (and (not (= x413 0)) (not (= 0 x236))) (and (= (x109 (x217 x413 x236) x413) x236) (= (x109 (x217 x413 x236) x236) x413))))
(define-fun x388 ((x413 Int) (x236 Int)) Bool (=> (and (> x236 0) (> x413 0)) (= (> x236 (x109 115792089237316195423570985008687907853269984665640564039457584007913129639935 x413)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x217 x413 x236)))))
(define-fun x287 ((x413 Int) (x236 Int)) Bool (and (= (x43 (x217 x413 x236)) (x43 (x217 x413 (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x43 (x217 x413 x236)) (x43 (x217 (- x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) x236))) (= (x43 (x217 (- x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x43 (x217 x413 x236)))))
(define-fun x4 ((x413 Int) (x236 Int)) Bool (and (=> (and (and (> x413 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x413 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x236) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236))) (= (<= (x217 (- x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x109 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x236)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x413)))) (=> (and (and (<= x413 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x413)) (and (< 0 x236) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x217 x413 x236)) (<= x413 (x109 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x413) (> x413 0)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x236) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x236) (x109 57896044618658097711785492504343953926634992332820282019728792003956564819968 x413)) (>= (x217 x413 (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x236) (> x236 0)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x413) (<= x413 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x109 57896044618658097711785492504343953926634992332820282019728792003956564819968 x236) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x413)) (>= (x217 (- x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) x236) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968))))))
(define-fun x240 ((x413 Int)) Bool (and (= (x217 0 x413) 0) (= (x217 x413 0) 0)))
(define-fun x160 ((x413 Int)) Bool (and (= x413 (x217 x413 1)) (= x413 (x217 1 x413))))
(define-fun x161 ((x413 Int)) Bool (and (x240 x413) (x160 x413)))
(define-fun x397 ((x413 Int) (x236 Int)) Bool (=> (and (> x413 0) (> x236 0)) (and (<= 0 (x109 x413 x236)) (>= x413 (x109 x413 x236)))))
(define-fun x267 ((x413 Int) (x236 Int)) Bool (=> (and (and (< x236 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x236 1)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x413) (>= x413 0))) (and (>= (x109 x413 x236) 0) (< (x109 x413 x236) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x300 ((x413 Int) (x236 Int)) Bool (=> (and (< 1 x236) (> x413 x236)) (< (x109 x413 x236) x413)))
(define-fun x262 ((x413 Int) (x236 Int)) Bool (=> (and (< 0 x236) (< 0 x413)) (= (= (x109 x413 x236) 0) (> x236 x413))))
(define-fun x407 ((x413 Int)) Bool (= 0 (x109 0 x413)))
(define-fun x190 ((x413 Int)) Bool (= x413 (x109 x413 1)))
(define-fun x232 ((x413 Int)) Bool (=> (not (= x413 0)) (= (x109 x413 x413) 1)))
(define-fun x176 ((x413 Int)) Bool (and (x232 x413) (x407 x413) (x190 x413)))
(define-fun x297 ((x413 Int)) Bool (and (= (x263 x413 115792089237316195423570985008687907853269984665640564039457584007913129639935) x413) (= x413 (x263 115792089237316195423570985008687907853269984665640564039457584007913129639935 x413))))
(define-fun x24 ((x413 Int)) Bool (and (= 0 (x263 0 x413)) (= (x263 x413 0) 0)))
(define-fun x308 ((x413 Int)) Bool (= x413 (x263 x413 x413)))
(define-fun x89 ((x413 Int)) Bool (and (x308 x413) (x297 x413) (x24 x413)))
(define-fun x170 ((x413 Int) (x236 Int)) Bool (= (x263 x413 x236) (x263 x236 x413)))
(define-fun x365 ((x413 Int) (x236 Int)) Bool (and (=> (>= x236 0) (>= x236 (x263 x413 x236))) (<= 0 (x263 x413 x236)) (=> (>= x413 0) (>= x413 (x263 x413 x236)))))
(define-fun x75 ((x413 Int) (x236 Int)) Bool (and (x365 x413 x236) (x170 x413 x236)))
(define-fun x314 ((x413 Int)) Bool (= (x263 x413 255) (x425 x413 256)))
(define-fun x86 ((x413 Int)) Bool (and (x75 x413 255) (x314 x413)))
(define-fun x139 ((x413 Int) (x236 Int)) Bool (and (<= 0 (x425 x413 x236)) (< (x425 x413 x236) x236)))
(define-fun x355 ((x413 Int) (x236 Int)) Bool (=> (and (> x236 0) (>= x413 0)) (= (> x236 x413) (= x413 (x425 x413 x236)))))
(define-fun x97 ((x413 Int) (x236 Int)) Bool (=> (and (and (> (+ x236 x236) x413) (<= x236 x413)) (> x236 0)) (= (x425 x413 x236) (- x413 x236))))
(define-fun x92 ((x413 Int)) Bool (= (x425 0 x413) 0))
(define-fun x362 ((x413 Int)) Bool (= (x425 x413 1) 0))
(define-fun x189 ((x413 Int)) Bool (= 0 (x425 x413 x413)))
(define-fun x307 ((x413 Int)) Bool (and (x92 x413) (x189 x413) (x362 x413)))
(define-fun x142 ((x413 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x391 115792089237316195423570985008687907853269984665640564039457584007913129639935 x413)) (= (x391 x413 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x343 ((x413 Int)) Bool (and (= x413 (x391 0 x413)) (= x413 (x391 x413 0))))
(define-fun x12 ((x413 Int)) Bool (= x413 (x391 x413 x413)))
(define-fun x354 ((x413 Int)) Bool (and (x343 x413) (x142 x413) (x12 x413)))
(define-fun x186 ((x413 Int) (x236 Int)) Bool (= (x391 x413 x236) (x391 x236 x413)))
(define-fun x273 ((x413 Int) (x236 Int)) Bool (and (=> (<= 0 x236) (>= (x391 x413 x236) x236)) (=> (>= x413 0) (<= x413 (x391 x413 x236))) (<= (x391 x413 x236) (+ x413 x236))))
(define-fun x17 ((x413 Int) (x236 Int)) Bool (and (x273 x413 x236) (x186 x413 x236)))
(define-fun x260 ((x413 Int)) Bool (= (x263 x413 1461501637330902918203684832716283019655932542975) (x425 x413 1461501637330902918203684832716283019655932542976)))
(define-fun x375 ((x413 Int)) Bool (and (x260 x413) (x75 x413 1461501637330902918203684832716283019655932542975)))
(define-fun x330 ((x346 Int)) Int (x386 x346))
(define-fun x415 ((x346 Int)) Int (ite (= 160 x346) x107 (x212 x346)))
(define-fun x344 ((x346 Int)) Int (ite (= 192 x346) x154 (x415 x346)))
(define-fun x27 ((x346 Int)) Int (ite (= x346 212) x278 (x344 x346)))
(define-fun x156 ((x346 Int)) Int (ite (= x346 128) 84 (x27 x346)))
(define-fun x144 ((x346 Int)) Int (ite (= x346 244) x246 (x156 x346)))
(define-fun x226 ((x346 Int)) Int (ite (and (< x346 (+ x327 276)) (<= 276 x346)) (x386 (+ (- x346 276) x290)) (x144 x346)))
(define-fun x184 ((x346 Int)) Int (ite (= x346 x40) 0 (x226 x346)))
(define-fun x149 ((x346 Int)) Int (ite (= x346 x183) 31029940780905195875731109435447583271917780249877154904291146747782681853952 (x184 x346)))
(define-fun x166 ((x346 Int)) Int (ite (= x296 x346) x249 (x149 x346)))
(define-fun x48 ((x346 Int)) Int (ite (= x346 x251) x418 (x166 x346)))
(define-fun x73 ((x346 x29)) Int (ite (= x328 x346) x416 (x127 x346)))
(define-fun x356 ((x413 Int)) Bool (=> (and (not (= 1245659826 x413)) (> x413 10000) (not (= 2494227977 x413)) (not (= x413 1451294997)) (not (= 1150964472 x413)) (not (= x413 752823349)) (not (= 2544733239 x413)) (not (= 832554005 x413)) (not (= 2510660263 x413)) (not (= 941162192 x413)) (not (= x413 475336206)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x413)) (not (= 18446744073709551615 x413)) (not (= x413 464684736)) (not (= 31029940780905195875731109435447583271917780249877154904291146747782681853952 x413)) (not (= 1315048582 x413)) (not (= x413 910484757)) (not (= x413 961581905)) (not (= x413 292666793)) (not (= x413 115792089237316195423570985008687907853269984665640564039457584007913129639934)) (not (= x413 1461501637330902918203684832716283019655932542975))) (not ((_ is x204) (x36 x413)))))
(assert (x333 x292))
(assert (x333 x399))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x105 (+ (* 1461501637330902918203684832716283019655932542976 (x109 x105 1461501637330902918203684832716283019655932542976)) (x425 x105 1461501637330902918203684832716283019655932542976)))) (x97 x105 1461501637330902918203684832716283019655932542976) (x139 x105 1461501637330902918203684832716283019655932542976) (x355 x105 1461501637330902918203684832716283019655932542976)))
(assert (=> (<= x6 10000) (= (x204 x6) (x36 x6))))
(assert (x356 x316))
(assert (= (x414 (x36 x418)) x418))
(assert (= (x414 (x36 x295)) x295))
(assert (x333 x250))
(assert (x333 x30))
(assert (=> (>= 10000 x118) (= (x36 x118) (x204 x118))))
(assert (x333 x306))
(assert (x333 x284))
(assert (x356 (x10 x154 96)))
(assert (= (x414 (x19 x231 3)) (+ 3 (x414 x231))))
(assert (= x318 (or x211 x119 (and (not x7) x404) x203 x69 x392 x192 (and x283 x406))))
(assert (=> (<= x174 10000) (= (x36 x174) (x204 x174))))
(assert (= (and (not x420) x164) x111))
(assert (x333 x412))
(assert (= (x10 x154 96) (x414 (x36 (x10 x154 96)))))
(assert (=> (>= 10000 x250) (= (x204 x250) (x36 x250))))
(assert (x333 x198))
(assert (x333 x21))
(assert (x333 x326))
(assert (x75 x347 x124))
(assert (= x245 (x414 (x36 x245))))
(assert (x333 x180))
(assert (= x380 (x414 (x36 x380))))
(assert (= x270 (x414 (x36 x270))))
(assert (x333 x266))
(assert (= (x36 910484757) (x204 910484757)))
(assert (x333 x322))
(assert (x333 x93))
(assert (x333 x353))
(assert (x333 x118))
(assert (not x55))
(assert (= x15 (and x136 (not x5))))
(assert (= (x414 (x36 x268)) x268))
(assert (= x45 (x414 (x36 x45))))
(assert (=> (>= 10000 x419) (= (x36 x419) (x204 x419))))
(assert (= (x204 18446744073709551615) (x36 18446744073709551615)))
(assert (x333 x264))
(assert (x333 x393))
(assert (x356 x382))
(assert (= (x204 1150964472) (x36 1150964472)))
(assert (x307 x270))
(assert (x161 (x129 2 x38)))
(assert (x333 x368))
(assert (= x172 (and x7 x404)))
(assert (x333 x193))
(assert (x333 x131))
(assert (x333 x339))
(assert (= x133 (and x167 x258)))
(assert (= (x36 (x414 x242)) x242))
(assert (= 292666793 (x414 (x204 292666793))))
(assert (x161 x249))
(assert (x333 x325))
(assert (x333 x360))
(assert (x333 x285))
(assert (= (x414 (x19 x381 1)) (+ (x414 x381) 1)))
(assert (x161 32))
(assert (x333 x398))
(assert (x307 (ite (> 256 x38) (x129 2 x38) 0)))
(assert (=> (>= 10000 x342) (= (x36 x342) (x204 x342))))
(assert (x333 x249))
(assert (=> (>= 10000 x383) (= (x36 x383) (x204 x383))))
(assert (x333 x1))
(assert (x356 x143))
(assert (x356 x383))
(assert (x333 x377))
(assert (x333 x177))
(assert (= x130 (x414 (x36 x130))))
(assert (x333 x233))
(assert (x333 x126))
(assert (= x341 (x414 (x36 x341))))
(assert (x333 x237))
(assert (=> (>= 10000 x382) (= (x36 x382) (x204 x382))))
(assert (=> (>= 10000 x8) (= (x204 x8) (x36 x8))))
(assert (x356 x155))
(assert (x333 x361))
(assert (x333 x294))
(assert (x307 256))
(assert (x333 x348))
(assert (= (x414 (x19 x44 1)) (+ 1 (x414 x44))))
(assert (= (x204 2494227977) (x36 2494227977)))
(assert (= (and x299 x133) x159))
(assert (= (+ 2 (x414 x37)) (x414 (x19 x37 2))))
(assert (= x147 (or x111 x366)))
(assert (x333 x78))
(assert (x356 x64))
(assert (x333 x207))
(assert (x333 x416))
(assert (= x352 (x414 (x36 x352))))
(assert (x333 x83))
(assert (=> (<= x220 10000) (= (x204 x220) (x36 x220))))
(assert (= (+ (x414 x422) 2) (x414 (x19 x422 2))))
(assert (=> (>= 10000 (x10 x154 96)) (= (x36 (x10 x154 96)) (x204 (x10 x154 96)))))
(assert (x333 x194))
(assert (x333 x124))
(assert (x333 x208))
(assert (x356 x419))
(assert (= x72 (=> (and (and (and (= (x364 x239) x108) (not (= x281 292666793)) (= x259 (x81 (x36 x45) (x204 1) 0)) (= x108 x157) (not (= x281 464684736)) (= x281 1315048582) (<= x45 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x108) (= x279 (x351 (x36 x250))) (= x274 x148) (= (x19 x422 2) x239) (> x279 0) (= x45 x67) (< x281 2494227977) (= x422 (x81 (x36 x8) x259 0)) (= x8 x237) (not (= x281 752823349)) (>= x108 0)) (and (and (and (= x342 x67) (= (x81 (x36 x64) x276 0) x44) (= x357 (x19 x44 1)) (= x369 x185) (= (= x350 0) x35) (= x277 0) (= x237 x64) (= (x351 (x36 x250)) x30) (> x30 0) (= x276 (x81 (x36 x342) (x204 1) 0)) (= x350 x408) (not (= 2510660263 x218)) (= x218 2544733239) (not (< x218 2494227977)) (= (x62 x357) x185) (>= 1461501637330902918203684832716283019655932542975 x342) (<= x185 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 2494227977 x218)) (<= 0 x185)) (and (and (= x169 (and x332 x243)) (= (or x396 x169) x3) (= 0 x61) (= x254 x1) (= (= x1 0) x332)) (and (= x101 (= x393 0)) (not (= 292666793 x269)) (= (x351 (x36 x250)) x175) (<= x130 1461501637330902918203684832716283019655932542975) (= x98 (x19 x66 2)) (< x269 2494227977) (= x369 x393) (= x243 (and x101 x35)) (not (= x269 752823349)) (<= x421 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x421 0) (= x130 x67) (= x237 x341) (= (x81 (x36 x341) x182 0) x66) (= 0 x191) (< 0 x175) (= x421 (x364 x98)) (= x421 x254) (= 1315048582 x269) (not (= 464684736 x269)) (= x182 (x81 (x36 x130) (x204 1) 0))))) (and (= 2510660263 x78) (not (< x78 2494227977)) (= x396 (> x252 x274)) (<= x56 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x157 x252) (= x145 (x351 (x36 x250))) (= x237 x123) (>= x56 0) (= x352 x67) (= x56 (x312 x280)) (= x16 (x81 (x36 x352) (x204 1) 0)) (<= x352 1461501637330902918203684832716283019655932542975) (= x56 x408) (> x145 0) (= (x81 (x36 x123) x16 0) x280) (not (= 2494227977 x78))))) (and (= x49 2544733239) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x400) (not (= 2494227977 x49)) (= (x81 (x36 x115) (x204 1) 0) x128) (= x400 (x62 x301)) (not (= 2510660263 x49)) (= x67 x115) (= (x351 (x36 x250)) x373) (<= 0 x400) (= x301 (x19 x71 1)) (not (> 2494227977 x49)) (not (= x284 0)) (= x71 (x81 (x36 x220) x128 0)) (<= x115 1461501637330902918203684832716283019655932542975) (= x148 x400) (> x373 0) (= x220 x237))) x3)))
(assert (= x155 (x414 (x36 x155))))
(assert (= (and (not x178) x25) x125))
(assert (x89 x347))
(assert (= x115 (x414 (x36 x115))))
(assert (and (=> (> 256 0) (= x107 (+ (* 256 (x109 x107 256)) (x425 x107 256)))) (x97 x107 256) (x139 x107 256) (x355 x107 256)))
(assert (x333 x64))
(assert (x333 x359))
(assert (x333 x278))
(assert (x161 79228162514264337593543950336))
(assert (= (x414 (x204 475336206)) 475336206))
(assert (x307 1461501637330902918203684832716283019655932542976))
(assert (= (x109 x154 79228162514264337593543950336) (x10 x154 96)))
(assert (= (x96 1 x38) (x43 (ite (> 256 x38) (x129 2 x38) 0))))
(assert (x333 x376))
(assert (= x8 (x414 (x36 x8))))
(assert (x356 x377))
(assert (x356 x179))
(assert (x89 x105))
(assert (x333 x272))
(assert (x333 x281))
(assert (=> (>= 10000 x412) (= (x204 x412) (x36 x412))))
(assert (= (x96 x249 96) (x43 (* 79228162514264337593543950336 x249))))
(assert (= (x414 (x36 x143)) x143))
(assert (x333 x417))
(assert (= x361 (x414 (x36 x361))))
(assert (x333 x345))
(assert (x356 x6))
(assert (x333 x380))
(assert (x356 x324))
(assert (=> (<= x295 10000) (= (x204 x295) (x36 x295))))
(assert (= x136 (or x125 x147)))
(assert (let ((x236 (x129 2 x38))) (and (x4 1 x236) (= (x217 1 x236) (* 1 x236)) (x388 1 x236) (x287 1 x236) (x28 1 x236) (and (= (x217 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x217 1 (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (- (* 1 x236) (* x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x217 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x236))) (x22 1 x236))))
(assert (x333 x293))
(assert (x333 x400))
(assert (x333 x112))
(assert (x356 x250))
(assert (= (x204 115792089237316195423570985008687907853269984665640564039457584007913129639934) (x36 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (=> (<= x143 10000) (= (x36 x143) (x204 x143))))
(assert (=> (>= 10000 x418) (= (x36 x418) (x204 x418))))
(assert (x307 (* x249 79228162514264337593543950336)))
(assert (x333 x363))
(assert (= (x414 (x204 941162192)) 941162192))
(assert (x333 x99))
(assert (=> (>= 10000 x45) (= (x36 x45) (x204 x45))))
(assert (= (x414 (x19 x66 2)) (+ (x414 x66) 2)))
(assert (= 0 (x212 276)))
(assert (= (and (not x311) x172) x153))
(assert (= (x204 1245659826) (x36 1245659826)))
(assert (x333 x289))
(assert (and (=> (> 256 0) (= x199 (+ (* 256 (x109 x199 256)) (x425 x199 256)))) (x97 x199 256) (x139 x199 256) (x355 x199 256)))
(assert (= x152 (=> (and (= (not (< 1 x359)) x87) (= x359 (x184 244))) (and x87 (=> (= x286 x349) x106)))))
(assert (x333 x405))
(assert (x333 x157))
(assert (=> (<= x115 10000) (= (x204 x115) (x36 x115))))
(assert (x333 x395))
(assert (x333 x162))
(assert (x333 x408))
(assert (x333 x254))
(assert (x333 x221))
(assert (x89 x199))
(assert (= x342 (x414 (x36 x342))))
(assert (x333 x371))
(assert (x333 x67))
(assert (= (x36 961581905) (x204 961581905)))
(assert (x333 x183))
(assert (= (x414 (x204 752823349)) 752823349))
(assert (=> (<= x230 10000) (= (x36 x230) (x204 x230))))
(assert (= (x36 1315048582) (x204 1315048582)))
(assert (x375 x105))
(assert (= x406 (and x5 x136)))
(assert (x333 x77))
(assert (x333 x79))
(assert (x333 x310))
(assert (x333 x199))
(assert (= (x36 1461501637330902918203684832716283019655932542975) (x204 1461501637330902918203684832716283019655932542975)))
(assert (= (and x410 x153) x203))
(assert (x333 x220))
(assert (x89 x270))
(assert (=> (>= 10000 x341) (= (x36 x341) (x204 x341))))
(assert (x89 x282))
(assert (= (x414 (x204 1150964472)) 1150964472))
(assert (x333 x148))
(assert (x333 x296))
(assert (x356 x352))
(assert (x333 x122))
(assert (=> (<= x256 10000) (= (x36 x256) (x204 x256))))
(assert (= (x414 (x204 832554005)) 832554005))
(assert (= x366 (and x420 x164)))
(assert (x333 x168))
(assert (x333 x223))
(assert (x356 x123))
(assert (x375 x282))
(assert (= 18446744073709551615 (x414 (x204 18446744073709551615))))
(assert (x333 x191))
(assert (x333 x123))
(assert (x333 x336))
(assert (let ((x236 (x129 2 x329))) (and (x4 1 x236) (= (x217 1 x236) (* 1 x236)) (x388 1 x236) (x287 1 x236) (x28 1 x236) (and (= (x217 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x217 1 (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x236 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (- (* 1 x236) (* x236 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x217 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x236))) (x22 1 x236))))
(assert (= (x414 (x204 2544733239)) 2544733239))
(assert (x89 x124))
(assert (= (x204 752823349) (x36 752823349)))
(assert (x333 x303))
(assert (= (x36 2544733239) (x204 2544733239)))
(assert (x17 x18 x417))
(assert (= (x109 x199 256) (x10 x199 8)))
(assert (x333 x61))
(assert (x356 x418))
(assert (x333 x45))
(assert (x333 x105))
(assert (x333 x209))
(assert (=> (<= x316 10000) (= (x36 x316) (x204 x316))))
(assert (= (=> (= x284 0) x385) x340))
(assert (= (x414 (x36 x220)) x220))
(assert (= (and (not x258) x167) x211))
(assert (=> (<= x64 10000) (= (x36 x64) (x204 x64))))
(assert (= x309 (and (=> (and (and (<= x162 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x162 0) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639934 x162) x70)) x20) (and (=> (and (not x70) (= (x140 (+ x162 1)) x26)) x424) (=> x70 x340))) (=> (not x20) x424))))
(assert (x356 x342))
(assert (x333 x110))
(assert (let ((x413 (* 79228162514264337593543950336 x249))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x413 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x109 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x425 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x97 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x139 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x355 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (and x23 x195) x411))
(assert (= x230 (x414 (x36 x230))))
(assert (x356 x268))
(assert (x333 x245))
(assert (x356 x8))
(assert (x333 x53))
(assert (= (+ (x414 x231) 1) (x414 (x19 x231 1))))
(assert (= (x204 941162192) (x36 941162192)))
(assert (x333 x102))
(assert (x333 x270))
(assert (= x6 (x414 (x36 x6))))
(assert (x333 x352))
(assert (x333 x215))
(assert (x333 x320))
(assert (x333 x347))
(assert (x307 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x333 x323))
(assert (x333 x40))
(assert (= (x204 464684736) (x36 464684736)))
(assert (= x174 (x414 (x36 x174))))
(assert (=> (>= 10000 x155) (= (x204 x155) (x36 x155))))
(assert (x333 x49))
(assert (x333 x58))
(assert (x356 x220))
(assert (= x167 (and x153 (not x410))))
(assert (x333 x373))
(assert (x333 x402))
(assert (x89 x107))
(assert (x333 x342))
(assert (x333 x108))
(assert (x333 x247))
(assert (x333 x269))
(assert (x375 x270))
(assert (x333 x389))
(assert (= (and x25 x178) x164))
(assert (x333 x241))
(assert (x333 x382))
(assert (x307 x282))
(assert (x333 x196))
(assert (and (x4 32 x246) (= (x217 32 x246) (* 32 x246)) (x388 32 x246) (x287 32 x246) (x28 32 x246) (and (= (x217 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x217 32 (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x246 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (- (* 32 x246) (* x246 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x217 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x246))) (x22 32 x246)))
(assert (x333 x334))
(assert (= (x414 (x36 x199)) x199))
(assert (x333 x329))
(assert (x333 x137))
(assert (x333 x246))
(assert (= x117 (or x411 (and x23 (not x195)))))
(assert (x333 x261))
(assert (x333 x91))
(assert (= (x204 31029940780905195875731109435447583271917780249877154904291146747782681853952) (x36 31029940780905195875731109435447583271917780249877154904291146747782681853952)))
(assert (x333 x255))
(assert (x356 x295))
(assert (x333 x185))
(assert (x333 x138))
(assert (let ((x413 (ite (> 256 x38) (x129 2 x38) 0))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x413 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x109 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x425 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x97 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x139 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x355 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x414 (x36 x64)) x64))
(assert (= (=> (and (and (= (x10 x199 8) x155) (= (x140 (+ x296 64)) x82) (= x5 (= x256 x382)) (= (x263 1461501637330902918203684832716283019655932542975 x270) x256) (= (x36 x268) x286) (= x38 (x263 255 x199)) (= (x391 x18 x417) x387) (= (x96 1 x38) x417) (= x248 (x81 (x36 x155) x378 0)) (not (= 0 x99)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x18) (= (x197 (- x82 x183)) x334) (= (x351 (x36 x256)) x99) (<= 0 x18) (= (x321 x248) x18) (= (x140 (+ x183 4)) x296) (= x251 (x140 (+ x296 32)))) (and (and (< x65 1245659826) (not (= 910484757 x65)) (not (= 832554005 x65)) (not (= x65 961581905)) (not (= 941162192 x65)) (= x187 (x351 (x36 x382))) (= (x197 (- x193 4)) x374) (not (> 475336206 x65)) (not (> 832554005 x65)) (< 0 x187) (= x193 68) (= x193 x334) (= x282 x105) (not (> 4 x193)) (= 31029940780905195875731109435447583271917780249877154904291146747782681853952 x50) (= x58 x323) (= (or (and (= (<= x374 57896044618658097711785492504343953926634992332820282019728792003956564819967) true) (< x374 64)) (> x374 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x283) (= 1150964472 x65)) x5)) (and (=> (and (and (= (x263 1461501637330902918203684832716283019655932542975 x105) x389) (= x198 x282) (= x7 (= x105 x389))) (not x283)) (and (=> (and x7 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x209) (= x345 x58) (<= 0 x209) (= (= 2 x209) x311))) (and (=> (and (and (= x51 (x263 1461501637330902918203684832716283019655932542975 x282)) (= (= 0 x51) x410)) (not x311)) (and (=> x410 x340) (=> (and (not x410) (and (= 0 x306) (= (< 0 x58) x258))) (and (=> (not x258) x340) (=> (and x258 (= x299 (< 0 x326))) (and (=> (and (and (= x102 (x197 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58))) (>= x194 0) (<= x194 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< x102 x194) x134)) x299) (and (=> (and (and (or (and x74 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x358) (<= 0 x358) (= x324 (x263 1461501637330902918203684832716283019655932542975 x282)) (= x14 (x81 (x36 x324) (x204 155) 0)) (= (= x358 x345) x20) (= x358 (x73 x14)))) (and (= x20 x74) (not x74))) (and (= x79 0) (= x165 (x140 (+ x194 x58))) (= x416 (x140 (+ x54 x58))) (= (not (= x150 0)) x74) (>= x54 0) (<= x54 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x361 (x263 1461501637330902918203684832716283019655932542975 x282)) (= (x81 (x36 x361) (x204 155) 0) x328) (= (x263 1461501637330902918203684832716283019655932542975 x282) x150) (= (x127 x328) x54))) (not x134)) x309) (=> x134 x340))) (=> (not x299) x340))))))) (=> x311 x340))) (=> (not x7) x340))) (=> x283 x340))) x106))
(assert (x356 x245))
(assert (x333 x335))
(assert (and (x262 x199 256) (x300 x199 256) (=> (and (< 0 x199) (< 0 256)) (and (<= (* (x109 x199 256) 256) x199) (< (- x199 256) (* (x109 x199 256) 256)))) (x267 x199 256) (x397 x199 256) (= (- x199 (x263 255 x199)) (* 256 (x109 x199 256)))))
(assert (=> (<= x268 10000) (= (x36 x268) (x204 x268))))
(assert (x333 x230))
(assert (and (x4 x249 79228162514264337593543950336) (= (x217 x249 79228162514264337593543950336) (* x249 79228162514264337593543950336)) (x388 x249 79228162514264337593543950336) (x287 x249 79228162514264337593543950336) (x28 x249 79228162514264337593543950336) (and (= (x217 (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (- (* x249 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (- 13407807929942597099574024998205846127479365820583219383259601157675320746492338629038688038210230303195081502828938359349399943579666495733993146259865600))) (= (x217 x249 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (* (- 115792089237316195423570985008687907853269984665561335876943319670319585689600) x249)) (= (- (* x249 79228162514264337593543950336) 9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496) (x217 (- x249 115792089237316195423570985008687907853269984665640564039457584007913129639936) 79228162514264337593543950336))) (x22 x249 79228162514264337593543950336)))
(assert (x333 x82))
(assert (x356 x199))
(assert (x333 x163))
(assert (x333 x350))
(assert (x333 x155))
(assert (x333 x145))
(assert (=> (>= 10000 x199) (= (x204 x199) (x36 x199))))
(assert (= x419 (x414 (x36 x419))))
(assert (x333 x187))
(assert (x333 x316))
(assert (= (x36 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x204 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x356 x256))
(assert (= x119 (and x311 x172)))
(assert (x333 x419))
(assert (= (x204 1451294997) (x36 1451294997)))
(assert (x333 x107))
(assert (x356 x130))
(assert (= (+ 1 (x414 x120)) (x414 (x19 x120 1))))
(assert (x333 x201))
(assert (x333 x268))
(assert (= (x414 (x204 31029940780905195875731109435447583271917780249877154904291146747782681853952)) 31029940780905195875731109435447583271917780249877154904291146747782681853952))
(assert (x333 x252))
(assert (x333 x31))
(assert (x333 x154))
(assert (=> (<= x130 10000) (= (x36 x130) (x204 x130))))
(assert (= x171 (or x141 (and (not x20) x84))))
(assert (x333 x387))
(assert (= x118 (x414 (x36 x118))))
(assert (let ((x413 (ite (< x329 256) (x129 2 x329) 0))) (and (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x413 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x109 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x425 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x97 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x139 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x355 x413 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x250 (x414 (x36 x250))))
(assert (= x403 (and x74 x76)))
(assert (x333 x229))
(assert (= (x36 475336206) (x204 475336206)))
(assert (x356 x52))
(assert (x333 x174))
(assert (= (x414 (x19 x275 2)) (+ 2 (x414 x275))))
(assert (= (x36 292666793) (x204 292666793)))
(assert (x333 x394))
(assert (x333 x130))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639934 (x414 (x204 115792089237316195423570985008687907853269984665640564039457584007913129639934))))
(assert (x356 x115))
(assert (x333 x179))
(assert (x333 x8))
(assert (= x25 true))
(assert (= x385 (=> (and (or (not x195) x195) (= x195 (= 0 x284))) x72)))
(assert (x333 x158))
(assert (x333 x338))
(assert (x356 x174))
(assert (x356 x118))
(assert (x86 x199))
(assert (= 1245659826 (x414 (x204 1245659826))))
(assert (x333 x288))
(assert (= x55 (=> (and (and (and (and (= x85 (x81 (x36 x419) (x204 1) 0)) (= x419 x67) (= x265 x336) (<= 0 x336) (not (> 2494227977 x32)) (> x376 0) (<= x419 1461501637330902918203684832716283019655932542975) (= x59 (> x255 x325)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x336) (= x336 (x312 x253)) (not (= 2494227977 x32)) (= x237 x174) (= 2510660263 x32) (= x253 (x81 (x36 x174) x85 0)) (= x255 x168) (= x376 (x351 (x36 x250)))) (and (and (not (= 2510660263 x335)) (= x53 0) (= x93 (x351 (x36 x250))) (= x11 (x81 (x36 x143) (x204 1) 0)) (= x265 x241) (<= x222 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x19 x120 1) x46) (= x143 x67) (= x237 x52) (= (x81 (x36 x52) x11 0) x120) (= (= 0 x241) x121) (not (= 2494227977 x335)) (= (x62 x46) x222) (= x131 x222) (< 0 x93) (= 2544733239 x335) (>= x222 0) (not (< x335 2494227977)) (>= 1461501637330902918203684832716283019655932542975 x143)) (and (and (= x201 0) (= x88 (x81 (x36 x179) (x204 1) 0)) (= x94 (= x215 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x348) (> x47 0) (= (and x121 x94) x213) (> 2494227977 x292) (= x292 1315048582) (= x412 x237) (= x179 x67) (>= 1461501637330902918203684832716283019655932542975 x179) (= (x19 x275 2) x304) (= x272 x348) (= x275 (x81 (x36 x412) x88 0)) (= x47 (x351 (x36 x250))) (= x131 x215) (= x348 (x364 x304)) (not (= x292 292666793)) (not (= x292 464684736)) (not (= 752823349 x292)) (>= x348 0)) (and (not (= x238 752823349)) (= x180 (x140 (+ 31 x371))) (= x294 (x351 (x36 x250))) x423 (= (x96 1 x329) x124) x227 (= x154 (x96 x249 96)) (not (> x246 18446744073709551615)) (not (> 4 x138)) (not x202) (= 1451294997 x238) (= x295 x394) (= x227 (or x59 x90)) (= 0 x293) (= x303 x289) (= x338 x177) (= x105 x249) (> x363 0) (= x80 (= 0 x264)) (and (< 163 x138) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x138))) (= x423 (= 0 x405)) (not (or (> x247 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x247) true) (> 160 x247)))) (= x363 (x312 x231)) (> 2494227977 x238) (<= x347 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x219 (x43 (* x246 32))) (= x68 (x19 x313 1)) (<= x100 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x290 (x140 (+ x371 32))) (<= 0 x347) (<= 0 x100) (= (x140 (+ x327 276)) x40) (not (> x31 x221)) (= x268 (x312 x231)) (= (x19 x231 1) x313) (>= 1461501637330902918203684832716283019655932542975 x310) (not (= 2 x100)) (= x323 x418) (not (= 292666793 x238)) (>= x310 0) (= x338 x322) (= x264 x272) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x363) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x180) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x138)) (and (< x180 x138) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x180) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x138)))) (= x347 (x321 x401)) (= (x43 (* x246 32)) x135) (= x183 (x140 (+ 244 x233))) (= (x19 x231 3) x378) (<= x268 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x81 (x36 x377) x378 0) x401) (= x399 x207) (= x231 (x81 (x36 x295) x95 0)) (= x158 x270) (<= x177 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x221) (<= 0 x268) (<= 0 x105) (= (x81 (x36 x270) (x204 1) 0) x95) (= (x140 (+ 32 x135)) x233) (= x214 (x62 x313)) (>= x221 0) (>= x177 0) (= (and x213 x80) x90) (= (x263 255 x107) x329) (< 0 x294) (= (x386 x371) x246) (= (x140 (+ x303 4)) x371) (not (= x238 1315048582)) (= x402 x31) (= (x197 (- x138 4)) x247) (= x327 (x43 (* 32 x246))) (= x295 x205) (= x242 (x426 (x204 84) (x204 8244) (x36 x199) (x36 (x10 x154 96)) (x36 x418) 0)) (= x288 (x184 244)) (= x199 x107) (>= 1461501637330902918203684832716283019655932542975 x105) (= (x364 x68) x221) (= (> x214 x31) x202) (= (x10 x199 8) x377) (not (> x398 x138)) (= (> x288 0) x178) (<= 0 x363) (= (x263 x347 x124) x405) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x214) (= 0 x399) (= x278 x418) (not (= x238 464684736)) (not (> x289 18446744073709551615)) (>= x214 0) (<= x270 1461501637330902918203684832716283019655932542975) (= x270 x266) (= x398 (x140 (+ x219 x290))))))) (and (= x168 x302) (>= x302 0) (>= 1461501637330902918203684832716283019655932542975 x383) (not (= x116 464684736)) (= x245 x237) (= (x351 (x36 x250)) x21) (= (x81 (x36 x383) (x204 1) 0) x379) (> 2494227977 x116) (= (x19 x37 2) x2) (= x302 (x364 x2)) (= 1315048582 x116) (not (= x116 752823349)) (not (= 292666793 x116)) (= x67 x383) (<= x302 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x325 x368) (< 0 x21) (= x37 (x81 (x36 x245) x379 0)))) (and (<= 0 x196) (>= 1461501637330902918203684832716283019655932542975 x67) x210 (<= x83 1461501637330902918203684832716283019655932542975) (<= 0 x229) (<= 0 x163) (< 0 x250) (<= 0 x261) (<= x339 255) (= x228 5) (> x316 0) (= x137 (x384 (x36 x316))) (<= x216 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x261) (not (= x6 x316)) (> x6 0) (<= 0 x83) (<= 0 x41) (= (x19 x381 1) x390) (>= 1461501637330902918203684832716283019655932542975 x382) (<= x112 1461501637330902918203684832716283019655932542975) (not (= 2510660263 x77)) (= x113 false) (= (< 0 (x351 (x36 x250))) x57) (= (< 0 (x351 (x36 x382))) x210) (<= 0 x353) (<= 0 x122) (= (x62 x390) x244) (>= x320 0) (= x181 false) (= (x384 (x36 x250)) x320) x337 (= x77 2544733239) (>= 255 x353) (not (= x316 x250)) (<= x122 1461501637330902918203684832716283019655932542975) (<= x208 1461501637330902918203684832716283019655932542975) (<= x380 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x250) (= x163 (x384 (x36 x6))) (not (= x382 x316)) (= x122 x249) (>= x395 0) (>= x137 0) (< 0 x382) (>= 255 x196) (= x380 x67) (>= x112 0) (= x206 x41) (= x244 x368) (>= 1461501637330902918203684832716283019655932542975 x41) (<= x244 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x146 (x81 (x36 x380) (x204 1) 0)) (<= x6 1461501637330902918203684832716283019655932542975) (not (> 2494227977 x77)) (= x33 false) (= false x9) (= (x81 (x36 x230) x146 0) x381) (= x13 (< 0 (x351 (x36 x6)))) (>= x285 0) (not (= x6 x250)) (>= x216 0) (>= 255 x110) (not (= x6 x382)) (>= 1461501637330902918203684832716283019655932542975 x395) (not (= x382 x250)) (>= x339 0) (>= x208 0) (>= x67 0) (= x337 (< 0 (x351 (x36 x316)))) (= x237 x230) (>= 1461501637330902918203684832716283019655932542975 x316) x57 x13 (= x285 (x384 (x36 x382))) (>= 255 x223) (>= 255 x229) (= 1451294997 x305) (<= 0 x244) (> x126 0) (not (= 2494227977 x77)) (<= 0 x110) (= (x351 (x36 x250)) x126) (<= 0 x223))) (and (=> (and (= x242 x286) (not x178)) x106) (=> (and (and (or (and x420 (and (= (x81 x242 (x36 x118) 0) x63) (= x349 x63))) (and (not x420) (and (= x349 x225) (= (x81 (x36 x118) x242 0) x225)))) (and (= (x184 276) x118) (= (x184 244) x360) (> x360 0) (= (> x118 (x414 x242)) x420))) x178) x152)))))
(assert (=> (>= 10000 x179) (= (x36 x179) (x204 x179))))
(assert (x333 x41))
(assert (= (and x70 x367) x192))
(assert (x333 x279))
(assert (= 2510660263 (x414 (x204 2510660263))))
(assert (= (x414 (x36 x123)) x123))
(assert (= (x414 (x204 1315048582)) 1315048582))
(assert (= (and x367 (not x70)) x141))
(assert (x333 x228))
(assert (=> (<= x123 10000) (= (x36 x123) (x204 x123))))
(assert (x333 x32))
(assert (x176 x154))
(assert (x333 x135))
(assert (=> (>= 10000 x245) (= (x204 x245) (x36 x245))))
(assert (x161 x246))
(assert (=> (>= 10000 x380) (= (x204 x380) (x36 x380))))
(assert (x333 x238))
(assert (x307 x199))
(assert (x333 x47))
(assert (x333 x277))
(assert (= (x414 (x36 x52)) x52))
(assert (x333 x51))
(assert (= (x36 2510660263) (x204 2510660263)))
(assert (x333 x358))
(assert (x333 x175))
(assert (= (and (not x299) x133) x69))
(assert (= (x414 (x36 x316)) x316))
(assert (x333 x265))
(assert (= x104 (and (not x74) x76)))
(assert (x356 x45))
(assert (x89 1461501637330902918203684832716283019655932542975))
(assert (x333 x274))
(assert (x333 x65))
(assert (= x382 (x414 (x36 x382))))
(assert (=> (<= x352 10000) (= (x204 x352) (x36 x352))))
(assert (x333 x251))
(assert (x333 x38))
(assert (and (= (x217 9 3) 27) (= 81 (x217 27 3)) (= 81 (x217 9 9)) (= 9 (x217 3 3))))
(assert (x161 (x129 2 x329)))
(assert (= (and (not x134) x159) x76))
(assert (x333 x56))
(assert (x307 x105))
(assert (= x412 (x414 (x36 x412))))
(assert (x333 x216))
(assert (=> (<= x324 10000) (= (x36 x324) (x204 x324))))
(assert (x356 x270))
(assert (x333 x218))
(assert (x333 x165))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x270 (+ (* 1461501637330902918203684832716283019655932542976 (x109 x270 1461501637330902918203684832716283019655932542976)) (x425 x270 1461501637330902918203684832716283019655932542976)))) (x97 x270 1461501637330902918203684832716283019655932542976) (x139 x270 1461501637330902918203684832716283019655932542976) (x355 x270 1461501637330902918203684832716283019655932542976)))
(assert (= x23 (or x318 x171)))
(assert (x333 x116))
(assert (=> (<= x270 10000) (= (x204 x270) (x36 x270))))
(assert (x333 x256))
(assert (= (x414 (x36 x179)) x179))
(assert (x176 x199))
(assert (= (x414 (x204 1451294997)) 1451294997))
(assert (=> (<= x377 10000) (= (x204 x377) (x36 x377))))
(assert (x333 x341))
(assert (= 961581905 (x414 (x204 961581905))))
(assert (x356 x341))
(assert (x333 x18))
(assert (x333 x421))
(assert (x333 x383))
(assert (x333 x115))
(assert (x356 x361))
(assert (= (x414 (x204 464684736)) 464684736))
(assert (x89 255))
(assert (x333 x302))
(assert (x333 x324))
(assert (x333 x52))
(assert (= x367 (and x84 x20)))
(assert (= x404 (and x406 (not x283))))
(assert (=> (>= 10000 x361) (= (x36 x361) (x204 x361))))
(assert (x333 x100))
(assert (x86 x107))
(assert (x333 x374))
(assert (x356 x380))
(assert (x333 x205))
(assert (= (and x159 x134) x392))
(assert (= (x414 (x36 x383)) x383))
(assert (x307 (ite (< x329 256) (x129 2 x329) 0)))
(assert (x333 x369))
(assert (x356 x412))
(assert (= (x414 (x204 2494227977)) 2494227977))
(assert (= x256 (x414 (x36 x256))))
(assert (= (x96 1 x329) (x43 (ite (< x329 256) (x129 2 x329) 0))))
(assert (= (x414 (x19 x71 1)) (+ 1 (x414 x71))))
(assert (x354 x417))
(assert (= (+ 1 (x414 x313)) (x414 (x19 x313 1))))
(assert (x333 x206))
(assert (x333 x219))
(assert (x333 x290))
(assert (x161 1))
(assert (and (= (x129 2 155) 45671926166590716193865151022383844364247891968) (= (x129 2 51) 2251799813685248) (= (x129 2 131) 2722258935367507707706996859454145691648) (= (x129 2 99) 633825300114114700748351602688) (= 2048 (x129 2 11)) (= (x129 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 12554203470773361527671578846415332832204710888928069025792 (x129 2 193)) (= 2993155353253689176481146537402947624255349848014848 (x129 2 171)) (= 822752278660603021077484591278675252491367932816789931674304512 (x129 2 209)) (= (x129 2 89) 618970019642690137449562112) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x129 2 232)) (= 1 (x129 2 0)) (= 2923003274661805836407369665432566039311865085952 (x129 2 161)) (= (x129 2 135) 43556142965880123323311949751266331066368) (= 210624583337114373395836055367340864637790190801098222508621955072 (x129 2 217)) (= (x129 2 19) 524288) (= (x129 2 109) 649037107316853453566312041152512) (= 1496577676626844588240573268701473812127674924007424 (x129 2 170)) (= (x129 2 34) 17179869184) (= (x129 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 2 (x129 2 1)) (= (x129 2 56) 72057594037927936) (= (x129 2 33) 8589934592) (= (x129 2 68) 295147905179352825856) (= 803469022129495137770981046170581301261101496891396417650688 (x129 2 199)) (= (x129 2 17) 131072) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x129 2 252)) (= (x129 2 8) 256) (= 696898287454081973172991196020261297061888 (x129 2 139)) (= (x129 2 134) 21778071482940061661655974875633165533184) (= 5070602400912917605986812821504 (x129 2 102)) (= 147573952589676412928 (x129 2 67)) (= (x129 2 73) 9444732965739290427392) (= 356811923176489970264571492362373784095686656 (x129 2 148)) (= (x129 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 576460752303423488 (x129 2 59)) (= (x129 2 31) 2147483648) (= (x129 2 88) 309485009821345068724781056) (= 1329227995784915872903807060280344576 (x129 2 120)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x129 2 243)) (= 18889465931478580854784 (x129 2 74)) (= 365375409332725729550921208179070754913983135744 (x129 2 158)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x129 2 251)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x129 2 228)) (= 2475880078570760549798248448 (x129 2 91)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x129 2 210)) (= 8 (x129 2 3)) (= 1125899906842624 (x129 2 50)) (= (x129 2 156) 91343852333181432387730302044767688728495783936) (= (x129 2 104) 20282409603651670423947251286016) (= (x129 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 5986310706507378352962293074805895248510699696029696 (x129 2 172)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x129 2 248)) (= 4611686018427387904 (x129 2 62)) (= 11150372599265311570767859136324180752990208 (x129 2 143)) (= 34359738368 (x129 2 35)) (= (x129 2 119) 664613997892457936451903530140172288) (= 33554432 (x129 2 25)) (= 2658455991569831745807614120560689152 (x129 2 121)) (= 8192 (x129 2 13)) (= (x129 2 18) 262144) (= 32 (x129 2 5)) (= (x129 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 98079714615416886934934209737619787751599303819750539264 (x129 2 186)) (= 11417981541647679048466287755595961091061972992 (x129 2 153)) (= 50216813883093446110686315385661331328818843555712276103168 (x129 2 195)) (= 512 (x129 2 9)) (= 166153499473114484112975882535043072 (x129 2 117)) (= (x129 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 383123885216472214589586756787577295904684780545900544 (x129 2 178)) (= (x129 2 12) 4096) (= (x129 2 41) 2199023255552) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x129 2 235)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x129 2 234)) (= 47890485652059026823698344598447161988085597568237568 (x129 2 175)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x129 2 225)) (= (x129 2 123) 10633823966279326983230456482242756608) (= (x129 2 93) 9903520314283042199192993792) (= (x129 2 94) 19807040628566084398385987584) (= 1532495540865888858358347027150309183618739122183602176 (x129 2 180)) (= (x129 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x129 2 145) 44601490397061246283071436545296723011960832) (= (x129 2 177) 191561942608236107294793378393788647952342390272950272) (= (x129 2 70) 1180591620717411303424) (= (x129 2 150) 1427247692705959881058285969449495136382746624) (= (x129 2 78) 302231454903657293676544) (= (x129 2 108) 324518553658426726783156020576256) (= (x129 2 113) 10384593717069655257060992658440192) (= 170141183460469231731687303715884105728 (x129 2 127)) (= (x129 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x129 2 16) 65536) (= 1152921504606846976 (x129 2 60)) (= 25108406941546723055343157692830665664409421777856138051584 (x129 2 194)) (= 9007199254740992 (x129 2 53)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x129 2 231)) (= 10889035741470030830827987437816582766592 (x129 2 133)) (= (x129 2 84) 19342813113834066795298816) (= (x129 2 157) 182687704666362864775460604089535377456991567872) (= (x129 2 111) 2596148429267413814265248164610048) (= (x129 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 40564819207303340847894502572032 (x129 2 105)) (= (x129 2 103) 10141204801825835211973625643008) (= 392318858461667547739736838950479151006397215279002157056 (x129 2 188)) (= (x129 2 6) 64) (= (x129 2 21) 2097152) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x129 2 247)) (= (x129 2 7) 128) (= 154742504910672534362390528 (x129 2 87)) (= (x129 2 154) 22835963083295358096932575511191922182123945984) (= (x129 2 132) 5444517870735015415413993718908291383296) (= (x129 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x129 2 137) 174224571863520493293247799005065324265472) (= (x129 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 89202980794122492566142873090593446023921664 (x129 2 146)) (= (x129 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 26328072917139296674479506920917608079723773850137277813577744384 (x129 2 214)) (= 1237940039285380274899124224 (x129 2 90)) (= 68719476736 (x129 2 36)) (= (x129 2 49) 562949953421312) (= 151115727451828646838272 (x129 2 77)) (= (x129 2 141) 2787593149816327892691964784081045188247552) (= (x129 2 165) 46768052394588893382517914646921056628989841375232) (= (x129 2 112) 5192296858534827628530496329220096) (= (x129 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 200867255532373784442745261542645325315275374222849104412672 (x129 2 197)) (= 2417851639229258349412352 (x129 2 81)) (= 37778931862957161709568 (x129 2 75)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x129 2 227)) (= 11692013098647223345629478661730264157247460343808 (x129 2 163)) (= (x129 2 85) 38685626227668133590597632) (= (x129 2 92) 4951760157141521099596496896) (= (x129 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x129 2 44) 17592186044416) (= (x129 2 58) 288230376151711744) (= (x129 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x129 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 18014398509481984 (x129 2 54)) (= (x129 2 37) 137438953472) (= 5316911983139663491615228241121378304 (x129 2 122)) (= (x129 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 1048576 (x129 2 20)) (= (x129 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 604462909807314587353088 (x129 2 79)) (= 1569275433846670190958947355801916604025588861116008628224 (x129 2 190)) (= (x129 2 95) 39614081257132168796771975168) (= 274877906944 (x129 2 38)) (= (x129 2 176) 95780971304118053647396689196894323976171195136475136) (= 49039857307708443467467104868809893875799651909875269632 (x129 2 185)) (= (x129 2 106) 81129638414606681695789005144064) (= (x129 2 2) 4) (= 79228162514264337593543950336 (x129 2 96)) (= 3213876088517980551083924184682325205044405987565585670602752 (x129 2 201)) (= 36893488147419103232 (x129 2 65)) (= (x129 2 152) 5708990770823839524233143877797980545530986496) (= 4398046511104 (x129 2 42)) (= 332306998946228968225951765070086144 (x129 2 118)) (= (x129 2 55) 36028797018963968) (= 784637716923335095479473677900958302012794430558004314112 (x129 2 189)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x129 2 241)) (= (x129 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 6427752177035961102167848369364650410088811975131171341205504 (x129 2 202)) (= (x129 2 52) 4503599627370496) (= (x129 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 16777216 (x129 2 24)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x129 2 219)) (= 4294967296 (x129 2 32)) (= 730750818665451459101842416358141509827966271488 (x129 2 159)) (= (x129 2 162) 5846006549323611672814739330865132078623730171904) (= (x129 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x129 2 22) 4194304) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x129 2 229)) (= 1461501637330902918203684832716283019655932542976 (x129 2 160)) (= (x129 2 144) 22300745198530623141535718272648361505980416) (= 16384 (x129 2 14)) (= (x129 2 63) 9223372036854775808) (= 2305843009213693952 (x129 2 61)) (= (x129 2 182) 6129982163463555433433388108601236734474956488734408704) (= 140737488355328 (x129 2 47)) (= (x129 2 98) 316912650057057350374175801344) (= (x129 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 536870912 (x129 2 29)) (= 23384026197294446691258957323460528314494920687616 (x129 2 164)) (= 348449143727040986586495598010130648530944 (x129 2 138)) (= (x129 2 187) 196159429230833773869868419475239575503198607639501078528) (= 83076749736557242056487941267521536 (x129 2 116)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x129 2 226)) (= (x129 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 421249166674228746791672110734681729275580381602196445017243910144 (x129 2 218)) (= (x129 2 169) 748288838313422294120286634350736906063837462003712) (= (x129 2 57) 144115188075855872) (= 268435456 (x129 2 28)) (= (x129 2 26) 67108864) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x129 2 240)) (= 18446744073709551616 (x129 2 64)) (= 5575186299632655785383929568162090376495104 (x129 2 142)) (= 35184372088832 (x129 2 45)) (= 1298074214633706907132624082305024 (x129 2 110)) (= (x129 2 86) 77371252455336267181195264) (= 9671406556917033397649408 (x129 2 83)) (= 187072209578355573530071658587684226515959365500928 (x129 2 167)) (= (x129 2 80) 1208925819614629174706176) (= (x129 2 27) 134217728) (= (x129 2 66) 73786976294838206464) (= 16 (x129 2 4)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x129 2 253)) (= 340282366920938463463374607431768211456 (x129 2 128)) (= (x129 2 97) 158456325028528675187087900672) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x129 2 222)) (= (x129 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x129 2 101) 2535301200456458802993406410752) (= (x129 2 130) 1361129467683753853853498429727072845824) (= (x129 2 114) 20769187434139310514121985316880384) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x129 2 224)) (= (x129 2 136) 87112285931760246646623899502532662132736) (= (x129 2 48) 281474976710656) (= (x129 2 76) 75557863725914323419136) (= 4722366482869645213696 (x129 2 72)) (= 713623846352979940529142984724747568191373312 (x129 2 149)) (= 680564733841876926926749214863536422912 (x129 2 129)) (= (x129 2 126) 85070591730234615865843651857942052864) (= (x129 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 21267647932558653966460912964485513216 (x129 2 124)) (= 23945242826029513411849172299223580994042798784118784 (x129 2 174)) (= (x129 2 40) 1099511627776) (= (x129 2 82) 4835703278458516698824704) (= (x129 2 179) 766247770432944429179173513575154591809369561091801088) (= 42535295865117307932921825928971026432 (x129 2 125)) (= 2854495385411919762116571938898990272765493248 (x129 2 151)) (= 374144419156711147060143317175368453031918731001856 (x129 2 168)) (= (x129 2 43) 8796093022208) (= 25711008708143844408671393477458601640355247900524685364822016 (x129 2 204)) (= 2361183241434822606848 (x129 2 71)) (= 590295810358705651712 (x129 2 69)) (= (x129 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x129 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 105312291668557186697918027683670432318895095400549111254310977536 (x129 2 216)) (= 3138550867693340381917894711603833208051177722232017256448 (x129 2 191)) (= (x129 2 183) 12259964326927110866866776217202473468949912977468817408) (= (x129 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 8388608 (x129 2 23)) (= 1393796574908163946345982392040522594123776 (x129 2 140)) (= 1606938044258990275541962092341162602522202993782792835301376 (x129 2 200)) (= 11972621413014756705924586149611790497021399392059392 (x129 2 173)) (= 93536104789177786765035829293842113257979682750464 (x129 2 166)) (= (x129 2 39) 549755813888) (= 178405961588244985132285746181186892047843328 (x129 2 147)) (= (x129 2 46) 70368744177664) (= (x129 2 15) 32768) (= (x129 2 30) 1073741824) (= 41538374868278621028243970633760768 (x129 2 115)) (= (x129 2 107) 162259276829213363391578010288128) (= (x129 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x129 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x129 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 1267650600228229401496703205376 (x129 2 100)) (= 1024 (x129 2 10))))
(assert (x333 x244))
(assert (= x377 (x414 (x36 x377))))
(assert (= x84 (or x104 x403)))
(assert (and (x262 x154 79228162514264337593543950336) (x300 x154 79228162514264337593543950336) (=> (and (< 0 x154) (< 0 79228162514264337593543950336)) (and (<= (* (x109 x154 79228162514264337593543950336) 79228162514264337593543950336) x154) (< (- x154 79228162514264337593543950336) (* (x109 x154 79228162514264337593543950336) 79228162514264337593543950336)))) (x267 x154 79228162514264337593543950336) (x397 x154 79228162514264337593543950336) (= (- x154 (x263 79228162514264337593543950335 x154)) (* 79228162514264337593543950336 (x109 x154 79228162514264337593543950336)))))
(assert (x333 x214))
(assert (= (x414 (x204 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (=> (>= 10000 x52) (= (x204 x52) (x36 x52))))
(assert (= (x414 (x36 x324)) x324))
(assert (x333 x26))
(assert (x333 x418))
(assert (x354 x18))
(assert (x333 x295))
(assert (and (=> (> 1461501637330902918203684832716283019655932542976 0) (= x282 (+ (* 1461501637330902918203684832716283019655932542976 (x109 x282 1461501637330902918203684832716283019655932542976)) (x425 x282 1461501637330902918203684832716283019655932542976)))) (x97 x282 1461501637330902918203684832716283019655932542976) (x139 x282 1461501637330902918203684832716283019655932542976) (x355 x282 1461501637330902918203684832716283019655932542976)))
(assert (x333 x54))
(assert (= (x414 (x204 910484757)) 910484757))
(assert (= (=> (= x284 1) x385) x424))
(assert (x333 x143))
(assert (x333 x150))
(assert (x333 x282))
(assert (x333 x50))
(assert (x333 x222))
(assert (= (x414 (x204 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (x356 x230))
(assert (= (x36 832554005) (x204 832554005)))
(assert (x333 x6))
(assert (x333 x305))
(assert (x307 x107))
(assert (x176 256))
(assert (x176 79228162514264337593543950336))
(assert (x333 x327))
(check-sat)
(exit)
