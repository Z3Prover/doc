(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x19 0)) (((x434 (x325 x19) (x365 x19) (x771 x19) (x231 x19) (x111 x19) (x149 x19) (x652 x19) (x155 Int)) (x219 (x537 x19) (x214 Int)) (x852 (x543 x19) (x459 x19) (x250 x19) (x639 x19) (x810 x19) (x493 Int)) (x438 (x343 x19) (x462 x19) (x319 x19) (x604 x19) (x618 Int)) (x812 (x488 Int)) (x361 (x598 x19) (x312 x19) (x731 Int)) (x825 (x489 x19) (x476 x19) (x481 x19) (x757 x19) (x443 x19) (x379 x19) (x275 Int)) (x682 (x642 x19) (x373 x19) (x8 x19) (x580 Int)))))
(declare-fun x186 () Bool)
(declare-fun x20 () Bool)
(declare-fun x268 () Bool)
(declare-fun x389 () Bool)
(declare-fun x749 () Bool)
(declare-fun x721 () Bool)
(declare-fun x496 () Bool)
(declare-fun x536 () Bool)
(declare-fun x328 () Bool)
(declare-fun x339 () Bool)
(declare-fun x698 () Bool)
(declare-fun x610 () Bool)
(declare-fun x675 () Int)
(declare-fun x590 () Int)
(declare-fun x779 () Bool)
(declare-fun x568 () Bool)
(declare-fun x405 () Bool)
(declare-fun x25 () Int)
(declare-fun x233 () Bool)
(declare-fun x91 () Bool)
(declare-fun x65 () Bool)
(declare-fun x718 () Bool)
(declare-fun x102 () Bool)
(declare-fun x170 () Int)
(declare-fun x816 () Bool)
(declare-fun x140 () Bool)
(declare-fun x679 () Bool)
(declare-fun x239 () Int)
(declare-fun x529 () Bool)
(declare-fun x345 () Bool)
(declare-fun x755 () Int)
(declare-fun x419 () Bool)
(declare-fun x341 () Bool)
(declare-fun x858 () x19)
(declare-fun x487 () Bool)
(declare-fun x456 () Bool)
(declare-fun x173 () Int)
(declare-fun x206 () Bool)
(declare-fun x743 () Int)
(declare-fun x708 () Int)
(declare-fun x396 () Bool)
(declare-fun x82 () Int)
(declare-fun x249 () Bool)
(declare-fun x42 () Bool)
(declare-fun x226 () Bool)
(declare-fun x165 () Bool)
(declare-fun x801 () Bool)
(declare-fun x398 () Int)
(declare-fun x739 () Int)
(declare-fun x357 () Bool)
(declare-fun x823 () Int)
(declare-fun x237 () Int)
(declare-fun x363 () Int)
(declare-fun x525 () Int)
(declare-fun x96 () Bool)
(declare-fun x756 () Bool)
(declare-fun x699 () Bool)
(declare-fun x24 () Int)
(declare-fun x782 () Bool)
(declare-fun x555 () Int)
(declare-fun x223 () Int)
(declare-fun x469 () Int)
(declare-fun x281 () Bool)
(declare-fun x717 () Bool)
(declare-fun x62 () Bool)
(declare-fun x648 () Int)
(declare-fun x254 () Int)
(declare-fun x44 () Int)
(declare-fun x152 () Int)
(declare-fun x445 (Int Int) Int)
(declare-fun x655 () Int)
(declare-fun x584 () Bool)
(declare-fun x813 () Bool)
(declare-fun x207 () Bool)
(declare-fun x342 () Int)
(declare-fun x548 () Int)
(declare-fun x371 () x19)
(declare-fun x815 () Bool)
(declare-fun x224 (Int Int) Int)
(declare-fun x423 () Bool)
(declare-fun x290 () Bool)
(declare-fun x27 () Int)
(declare-fun x845 () Int)
(declare-fun x660 () Int)
(declare-fun x724 () Int)
(declare-fun x317 () Bool)
(declare-fun x416 () Bool)
(declare-fun x2 () Int)
(declare-fun x421 () Int)
(declare-fun x360 () Bool)
(declare-fun x575 () Bool)
(declare-fun x516 () Int)
(declare-fun x417 () Bool)
(declare-fun x154 () Bool)
(declare-fun x583 () Bool)
(declare-fun x566 () Int)
(declare-fun x727 () Bool)
(declare-fun x574 () Bool)
(declare-fun x150 () Int)
(declare-fun x809 () Bool)
(declare-fun x553 () Bool)
(declare-fun x838 () Bool)
(declare-fun x466 () Bool)
(declare-fun x787 () Int)
(declare-fun x301 () x19)
(declare-fun x640 () Int)
(declare-fun x356 () Int)
(declare-fun x298 () Bool)
(declare-fun x410 () x19)
(declare-fun x523 () Int)
(declare-fun x764 () Bool)
(declare-fun x229 () Int)
(declare-fun x854 () Bool)
(declare-fun x605 () Int)
(declare-fun x578 () Int)
(declare-fun x637 () Int)
(declare-fun x320 () x19)
(declare-fun x653 () Bool)
(declare-fun x579 () Int)
(declare-fun x88 (Int Int) Int)
(declare-fun x688 () Int)
(declare-fun x798 () Int)
(declare-fun x693 () Bool)
(declare-fun x761 () Bool)
(declare-fun x738 () Int)
(declare-fun x403 () Bool)
(declare-fun x352 () Bool)
(declare-fun x315 () Int)
(declare-fun x486 () Bool)
(declare-fun x662 () Int)
(declare-fun x115 () Bool)
(declare-fun x172 () Bool)
(declare-fun x70 () Bool)
(declare-fun x712 () Int)
(declare-fun x608 () Int)
(declare-fun x221 () Bool)
(declare-fun x781 (Int) Int)
(declare-fun x288 () Bool)
(declare-fun x378 () Bool)
(declare-fun x625 () Int)
(declare-fun x305 () Bool)
(declare-fun x235 () Int)
(declare-fun x581 () Bool)
(declare-fun x746 () Bool)
(declare-fun x190 () Bool)
(declare-fun x751 () Bool)
(declare-fun x57 () Bool)
(declare-fun x257 () Int)
(declare-fun x552 () Int)
(declare-fun x530 () Bool)
(declare-fun x217 () Int)
(declare-fun x790 () Bool)
(declare-fun x109 () Bool)
(declare-fun x744 () Int)
(declare-fun x17 () Int)
(declare-fun x597 () Bool)
(declare-fun x437 () Bool)
(declare-fun x644 () Int)
(declare-fun x215 () Bool)
(declare-fun x840 () Bool)
(declare-fun x573 () Int)
(declare-fun x347 () Int)
(declare-fun x687 () Int)
(declare-fun x678 () Int)
(declare-fun x194 () Int)
(declare-fun x692 () Int)
(declare-fun x759 () Int)
(declare-fun x336 () Bool)
(declare-fun x532 () Bool)
(declare-fun x258 () Bool)
(declare-fun x762 () Bool)
(declare-fun x482 () Bool)
(declare-fun x314 () Int)
(declare-fun x123 () Int)
(declare-fun x658 () Bool)
(declare-fun x420 () Int)
(declare-fun x104 () Int)
(declare-fun x844 () Int)
(declare-fun x372 () Bool)
(declare-fun x534 () Int)
(declare-fun x706 () Int)
(declare-fun x514 () Bool)
(declare-fun x175 () Bool)
(declare-fun x784 () Bool)
(declare-fun x429 () Bool)
(declare-fun x303 () Bool)
(declare-fun x205 () Int)
(declare-fun x307 () Bool)
(declare-fun x498 () Int)
(declare-fun x517 () Int)
(declare-fun x327 () Int)
(declare-fun x703 () Int)
(declare-fun x515 () Bool)
(declare-fun x422 () Bool)
(declare-fun x860 () Bool)
(declare-fun x520 () Int)
(declare-fun x455 () Int)
(declare-fun x547 () Int)
(declare-fun x659 () Bool)
(declare-fun x118 () Int)
(declare-fun x531 () Bool)
(declare-fun x814 () Int)
(declare-fun x393 () Bool)
(declare-fun x256 () Bool)
(declare-fun x646 () Int)
(declare-fun x582 () Bool)
(declare-fun x425 () Int)
(declare-fun x204 () Bool)
(declare-fun x556 () Int)
(declare-fun x238 () Bool)
(declare-fun x146 () Bool)
(declare-fun x29 () Bool)
(declare-fun x822 () Bool)
(declare-fun x236 () Int)
(declare-fun x127 () Bool)
(declare-fun x818 () Bool)
(declare-fun x397 () Bool)
(declare-fun x227 () Bool)
(declare-fun x377 () Int)
(declare-fun x179 () Bool)
(declare-fun x85 () Int)
(declare-fun x291 () Bool)
(declare-fun x385 (Int) Int)
(declare-fun x128 () Int)
(declare-fun x52 (Int) Int)
(declare-fun x99 () Int)
(declare-fun x861 () Bool)
(declare-fun x592 () Int)
(declare-fun x763 () x19)
(declare-fun x752 () Bool)
(declare-fun x519 () Bool)
(declare-fun x452 () x19)
(declare-fun x549 () Int)
(declare-fun x130 () Int)
(declare-fun x794 () Bool)
(declare-fun x306 () Int)
(declare-fun x309 () Bool)
(declare-fun x674 () Bool)
(declare-fun x86 () Int)
(declare-fun x803 () Int)
(declare-fun x13 () Bool)
(declare-fun x43 () Int)
(declare-fun x730 () Bool)
(declare-fun x232 () Int)
(declare-fun x151 () Int)
(declare-fun x564 () Int)
(declare-fun x252 () Int)
(declare-fun x742 (x19) Int)
(declare-fun x262 () Bool)
(declare-fun x141 () Int)
(declare-fun x316 () Bool)
(declare-fun x833 () Int)
(declare-fun x615 () Int)
(declare-fun x663 () Bool)
(declare-fun x824 () x19)
(declare-fun x671 () Int)
(declare-fun x620 () Bool)
(declare-fun x202 () Bool)
(declare-fun x184 () Int)
(declare-fun x137 () Int)
(declare-fun x690 () Bool)
(declare-fun x54 () Bool)
(declare-fun x737 () Int)
(declare-fun x406 () Bool)
(declare-fun x656 () Int)
(declare-fun x14 () Bool)
(declare-fun x636 () Bool)
(declare-fun x600 () Bool)
(declare-fun x245 () Int)
(declare-fun x399 () Bool)
(declare-fun x647 () Int)
(declare-fun x613 () Int)
(declare-fun x69 () Bool)
(declare-fun x619 () Int)
(declare-fun x58 () Int)
(declare-fun x210 () Bool)
(declare-fun x474 () Int)
(declare-fun x264 () Bool)
(declare-fun x193 () Int)
(declare-fun x850 () Int)
(declare-fun x676 () Bool)
(declare-fun x435 () Bool)
(declare-fun x230 () Bool)
(declare-fun x112 () Int)
(declare-fun x471 () Int)
(declare-fun x209 () Bool)
(declare-fun x773 () Bool)
(declare-fun x386 () Int)
(declare-fun x74 () Bool)
(declare-fun x401 () Bool)
(declare-fun x182 (x19) Int)
(declare-fun x199 () Int)
(declare-fun x222 () x19)
(declare-fun x544 () Bool)
(declare-fun x424 () Int)
(declare-fun x296 () Int)
(declare-fun x376 () Int)
(declare-fun x622 () Int)
(declare-fun x504 () Int)
(declare-fun x472 (Int) x19)
(declare-fun x73 () Bool)
(declare-fun x594 () Bool)
(declare-fun x785 (x19) Int)
(declare-fun x272 () Bool)
(declare-fun x634 () Int)
(declare-fun x278 () Bool)
(declare-fun x218 () x19)
(declare-fun x561 () Bool)
(declare-fun x735 () Int)
(declare-fun x494 () Bool)
(declare-fun x439 () x19)
(declare-fun x247 () Int)
(declare-fun x804 (Int) Int)
(declare-fun x832 () Bool)
(declare-fun x631 () Bool)
(declare-fun x273 () Bool)
(declare-fun x148 () Bool)
(declare-fun x715 () Bool)
(declare-fun x740 () Int)
(declare-fun x817 () x19)
(declare-fun x28 () Bool)
(declare-fun x686 () Int)
(declare-fun x797 () Int)
(declare-fun x195 () Bool)
(declare-fun x176 () Bool)
(declare-fun x745 () Bool)
(declare-fun x432 () Bool)
(declare-fun x145 () Int)
(declare-fun x444 () Int)
(declare-fun x32 () x19)
(declare-fun x241 (x19) Int)
(declare-fun x387 () Bool)
(declare-fun x38 () Bool)
(declare-fun x5 () Bool)
(declare-fun x188 () Int)
(declare-fun x513 () Bool)
(declare-fun x196 () Int)
(declare-fun x126 () Int)
(declare-fun x654 () Bool)
(declare-fun x411 () Bool)
(declare-fun x528 () Bool)
(declare-fun x277 (Int) Int)
(declare-fun x414 () Int)
(declare-fun x490 () Bool)
(declare-fun x158 () Int)
(declare-fun x197 () Bool)
(declare-fun x77 () Bool)
(declare-fun x261 () Bool)
(declare-fun x716 () Int)
(declare-fun x558 () Bool)
(declare-fun x570 () Bool)
(declare-fun x395 (Int) Int)
(declare-fun x374 () Int)
(declare-fun x628 () Bool)
(declare-fun x117 () Int)
(declare-fun x855 () Int)
(declare-fun x468 () Int)
(declare-fun x120 () Int)
(declare-fun x18 () Bool)
(declare-fun x480 () Bool)
(declare-fun x521 () Int)
(declare-fun x114 () Int)
(declare-fun x630 () Int)
(declare-fun x89 () Int)
(declare-fun x177 () Bool)
(declare-fun x185 () Bool)
(declare-fun x329 () Bool)
(declare-fun x501 () Int)
(declare-fun x299 () Int)
(declare-fun x685 () Bool)
(declare-fun x51 () Int)
(declare-fun x545 () Int)
(declare-fun x725 () Bool)
(declare-fun x736 () Int)
(declare-fun x300 () Bool)
(declare-fun x820 () Bool)
(declare-fun x121 () Int)
(declare-fun x780 () Int)
(declare-fun x302 () Int)
(declare-fun x332 () Int)
(declare-fun x497 () Bool)
(declare-fun x21 () Bool)
(declare-fun x609 () Bool)
(declare-fun x267 () Bool)
(declare-fun x754 (x19) Int)
(declare-fun x39 () Bool)
(declare-fun x163 () Int)
(declare-fun x829 () Bool)
(declare-fun x691 () Int)
(declare-fun x105 () Int)
(declare-fun x792 () x19)
(declare-fun x133 () Int)
(declare-fun x696 () Bool)
(declare-fun x46 () Bool)
(declare-fun x269 () Bool)
(declare-fun x50 () Bool)
(declare-fun x187 () Int)
(declare-fun x732 () Int)
(declare-fun x60 () Bool)
(declare-fun x447 () Int)
(declare-fun x767 () Bool)
(declare-fun x726 () Bool)
(declare-fun x310 () Bool)
(declare-fun x122 () Int)
(declare-fun x234 () Int)
(declare-fun x729 () Int)
(declare-fun x160 () Bool)
(declare-fun x324 () Bool)
(declare-fun x318 () Bool)
(declare-fun x285 () Bool)
(declare-fun x670 (Int Int) Int)
(declare-fun x713 () Bool)
(declare-fun x4 () Bool)
(declare-fun x35 () Int)
(declare-fun x571 () Int)
(declare-fun x585 () Bool)
(declare-fun x626 () Int)
(declare-fun x31 () Bool)
(declare-fun x192 (Int Int) Int)
(declare-fun x228 () Bool)
(declare-fun x765 () Bool)
(declare-fun x540 () Int)
(declare-fun x641 () Bool)
(declare-fun x843 () Bool)
(declare-fun x174 () Bool)
(declare-fun x216 () Bool)
(declare-fun x808 () Bool)
(declare-fun x161 () Bool)
(declare-fun x212 () Bool)
(declare-fun x777 () Bool)
(declare-fun x689 () Bool)
(declare-fun x551 () Int)
(declare-fun x572 (Int) Int)
(declare-fun x67 () Int)
(declare-fun x113 () Bool)
(declare-fun x355 () Int)
(declare-fun x11 () Bool)
(declare-fun x601 () Int)
(declare-fun x64 () Bool)
(declare-fun x282 () Bool)
(declare-fun x426 () Int)
(declare-fun x71 () Int)
(declare-fun x431 () Bool)
(declare-fun x616 () Bool)
(declare-fun x260 () Bool)
(declare-fun x9 () Bool)
(declare-fun x162 () Bool)
(declare-fun x381 () Int)
(declare-fun x673 () Bool)
(declare-fun x124 () Bool)
(declare-fun x774 () Bool)
(declare-fun x667 () Int)
(declare-fun x33 () Bool)
(declare-fun x467 () Int)
(declare-fun x463 () Int)
(declare-fun x6 () Int)
(declare-fun x284 () Bool)
(declare-fun x340 () Bool)
(declare-fun x710 () Int)
(declare-fun x508 () Bool)
(declare-fun x770 () Bool)
(declare-fun x589 () Bool)
(declare-fun x563 () Bool)
(declare-fun x110 () Bool)
(declare-fun x720 () Bool)
(declare-fun x56 () Int)
(declare-fun x271 () Bool)
(declare-fun x270 () Bool)
(declare-fun x835 () Int)
(declare-fun x645 () Int)
(declare-fun x821 () Int)
(declare-fun x34 () Bool)
(declare-fun x45 () Bool)
(declare-fun x479 () Bool)
(declare-fun x465 () Int)
(declare-fun x475 () Int)
(declare-fun x26 () Bool)
(declare-fun x40 () Int)
(declare-fun x292 () Int)
(declare-fun x826 () Int)
(declare-fun x351 () Bool)
(declare-fun x134 () Bool)
(declare-fun x304 () Int)
(declare-fun x704 () Bool)
(declare-fun x562 () Int)
(declare-fun x569 () Bool)
(declare-fun x265 () Bool)
(declare-fun x338 (x19) Int)
(declare-fun x632 () Int)
(declare-fun x624 () Bool)
(declare-fun x430 () Bool)
(declare-fun x346 () Int)
(declare-fun x707 () Int)
(declare-fun x702 () Int)
(declare-fun x539 () Bool)
(declare-fun x554 () Bool)
(declare-fun x612 () Bool)
(declare-fun x295 (Int) Int)
(declare-fun x313 () Int)
(declare-fun x132 () Bool)
(declare-fun x668 () Int)
(declare-fun x802 () Int)
(declare-fun x683 () Int)
(declare-fun x380 () Int)
(declare-fun x413 () Int)
(declare-fun x263 () Int)
(declare-fun x138 () Int)
(declare-fun x441 () Bool)
(declare-fun x491 () Int)
(declare-fun x100 () Int)
(declare-fun x49 () Int)
(declare-fun x607 () Bool)
(declare-fun x606 () Bool)
(declare-fun x159 () Int)
(declare-fun x681 () Int)
(declare-fun x408 () Bool)
(declare-fun x203 () x19)
(declare-fun x366 () Int)
(declare-fun x722 () Int)
(declare-fun x297 () Int)
(declare-fun x274 () Bool)
(declare-fun x446 () Int)
(declare-fun x588 () Bool)
(declare-fun x415 () Int)
(declare-fun x220 () Bool)
(declare-fun x672 () Bool)
(declare-fun x169 () Bool)
(declare-fun x799 () Int)
(declare-fun x518 () Bool)
(declare-fun x793 () Bool)
(declare-fun x603 () Int)
(declare-fun x428 () Int)
(declare-fun x842 () Int)
(declare-fun x509 () Bool)
(declare-fun x283 () Bool)
(declare-fun x90 () Int)
(declare-fun x107 () Bool)
(declare-fun x23 () Bool)
(declare-fun x587 () Bool)
(declare-fun x279 () Int)
(declare-fun x599 () Int)
(declare-fun x201 () Int)
(declare-fun x402 () Bool)
(declare-fun x136 () Int)
(declare-fun x440 (Int Int) Int)
(declare-fun x125 () Bool)
(declare-fun x287 () Int)
(declare-fun x370 () Bool)
(declare-fun x157 () Bool)
(declare-fun x382 () Bool)
(declare-fun x635 () Int)
(declare-fun x59 () Int)
(declare-fun x48 () Int)
(declare-fun x75 () Bool)
(declare-fun x22 () Bool)
(declare-fun x251 () Int)
(declare-fun x633 () Int)
(declare-fun x81 () Bool)
(declare-fun x147 () Bool)
(declare-fun x651 () Int)
(declare-fun x87 () Bool)
(declare-fun x734 () Bool)
(declare-fun x359 () Bool)
(declare-fun x492 () Int)
(declare-fun x350 () Int)
(declare-fun x506 () Bool)
(declare-fun x61 () Bool)
(declare-fun x213 () Bool)
(declare-fun x510 () Bool)
(declare-fun x286 () Bool)
(declare-fun x129 (x19) Int)
(declare-fun x95 () Int)
(declare-fun x93 () Int)
(declare-fun x400 () Bool)
(declare-fun x191 () Bool)
(declare-fun x253 () Bool)
(declare-fun x533 () Bool)
(declare-fun x119 () Bool)
(declare-fun x391 () Int)
(declare-fun x593 () Int)
(declare-fun x719 () Bool)
(declare-fun x139 () Bool)
(declare-fun x522 () Bool)
(declare-fun x700 () Int)
(declare-fun x390 () Bool)
(declare-fun x841 () Int)
(declare-fun x388 () Bool)
(declare-fun x711 () Int)
(declare-fun x791 (Int Int) Int)
(declare-fun x649 () Bool)
(declare-fun x511 () Bool)
(declare-fun x153 () Int)
(declare-fun x576 () Bool)
(declare-fun x728 () Int)
(declare-fun x92 () Bool)
(declare-fun x37 () Int)
(declare-fun x483 () Bool)
(declare-fun x849 () Bool)
(declare-fun x697 () Bool)
(declare-fun x811 () Bool)
(declare-fun x367 () Bool)
(declare-fun x524 () Int)
(declare-fun x12 () Bool)
(declare-fun x473 () Bool)
(declare-fun x427 () Int)
(declare-fun x470 () Bool)
(declare-fun x836 () Bool)
(declare-fun x477 () Bool)
(declare-fun x503 () Bool)
(declare-fun x53 () Int)
(declare-fun x364 () Bool)
(declare-fun x293 () Bool)
(declare-fun x565 () Int)
(declare-fun x535 () Int)
(declare-fun x353 () Bool)
(declare-fun x55 () Int)
(declare-fun x10 () Int)
(declare-fun x321 () Int)
(declare-fun x775 () Bool)
(declare-fun x665 () Int)
(declare-fun x255 () Bool)
(declare-fun x541 () Int)
(declare-fun x499 () Int)
(declare-fun x409 () Int)
(declare-fun x323 () Int)
(declare-fun x116 () Bool)
(declare-fun x596 () Bool)
(declare-fun x830 () Bool)
(declare-fun x68 () Bool)
(declare-fun x407 () Bool)
(declare-fun x166 () Int)
(declare-fun x789 () Bool)
(declare-fun x41 () Bool)
(declare-fun x766 () Int)
(declare-fun x36 () x19)
(declare-fun x778 () Int)
(declare-fun x714 () Int)
(declare-fun x412 () Int)
(declare-fun x577 () Bool)
(declare-fun x76 () Int)
(declare-fun x614 () Int)
(declare-fun x567 (x19) Int)
(declare-fun x83 () Bool)
(declare-fun x542 () Int)
(declare-fun x7 () Bool)
(declare-fun x484 () Bool)
(declare-fun x617 () Int)
(declare-fun x240 () Bool)
(declare-fun x834 (x19) Int)
(declare-fun x621 () Int)
(declare-fun x311 () Bool)
(declare-fun x453 () Bool)
(declare-fun x418 () Int)
(declare-fun x464 () Bool)
(declare-fun x108 () Bool)
(declare-fun x375 () Bool)
(declare-fun x78 () Bool)
(declare-fun x839 () Int)
(declare-fun x559 () Bool)
(declare-fun x358 () Bool)
(declare-fun x769 () Int)
(declare-fun x591 () Int)
(declare-fun x326 () Int)
(declare-fun x461 () Int)
(declare-fun x276 (Int) Int)
(declare-fun x243 () Bool)
(declare-fun x189 () Bool)
(declare-fun x856 () Int)
(declare-fun x485 () Int)
(declare-fun x211 () Int)
(declare-fun x242 () Bool)
(declare-fun x156 () Int)
(declare-fun x384 () Bool)
(declare-fun x819 () Bool)
(declare-fun x837 () Bool)
(declare-fun x859 () Int)
(declare-fun x776 () Bool)
(declare-fun x80 () Bool)
(declare-fun x807 () Int)
(declare-fun x294 () Int)
(declare-fun x460 () Bool)
(declare-fun x733 () Bool)
(declare-fun x680 () Int)
(define-fun x629 ((x19 x19) (x392 Int)) x19 (ite ((_ is x434) x19) (x434 (x325 x19) (x365 x19) (x771 x19) (x231 x19) (x111 x19) (x149 x19) (x652 x19) (+ (x155 x19) x392)) (ite ((_ is x825) x19) (x825 (x489 x19) (x476 x19) (x481 x19) (x757 x19) (x443 x19) (x379 x19) (+ (x275 x19) x392)) (ite ((_ is x852) x19) (x852 (x543 x19) (x459 x19) (x250 x19) (x639 x19) (x810 x19) (+ (x493 x19) x392)) (ite ((_ is x438) x19) (x438 (x343 x19) (x462 x19) (x319 x19) (x604 x19) (+ x392 (x618 x19))) (ite ((_ is x682) x19) (x682 (x642 x19) (x373 x19) (x8 x19) (+ (x580 x19) x392)) (ite ((_ is x219) x19) (x219 (x537 x19) (+ (x214 x19) x392)) (ite ((_ is x361) x19) (x361 (x598 x19) (x312 x19) (+ (x731 x19) x392)) (x812 (+ x392 (x488 x19)))))))))))
(define-fun x280 ((x47 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x47) (<= 0 x47)) x47 (- x47 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x800 ((x47 Int)) Int (ite (and (< x47 0) (>= x47 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x47) x47))
(define-fun x560 ((x47 Int)) Int (ite (and (<= 0 x47) (< x47 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x47 (ite (and (< x47 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x47 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x47 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (< x47 0) (>= x47 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x47 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x88 x47 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x101 ((x79 Int)) Bool (and (< x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x79 0)))
(define-fun x546 ((x79 Int)) Bool (and (= x79 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639935 x79)) (= (x445 x79 115792089237316195423570985008687907853269984665640564039457584007913129639935) x79)))
(define-fun x772 ((x79 Int)) Bool (and (= 0 (x445 0 x79)) (= 0 (x445 x79 0))))
(define-fun x344 ((x79 Int)) Bool (= x79 (x445 x79 x79)))
(define-fun x753 ((x79 Int)) Bool (and (x344 x79) (x546 x79) (x772 x79)))
(define-fun x805 ((x79 Int) (x846 Int)) Bool (= (x445 x846 x79) (x445 x79 x846)))
(define-fun x848 ((x79 Int) (x846 Int)) Bool (and (<= 0 (x445 x79 x846)) (=> (>= x79 0) (>= x79 (x445 x79 x846))) (=> (<= 0 x846) (>= x846 (x445 x79 x846)))))
(define-fun x666 ((x79 Int) (x846 Int)) Bool (and (x805 x79 x846) (x848 x79 x846)))
(define-fun x168 ((x79 Int)) Bool (= (x445 x79 1461501637330902918203684832716283019655932542975) (x88 x79 1461501637330902918203684832716283019655932542976)))
(define-fun x657 ((x79 Int)) Bool (and (x168 x79) (x666 x79 1461501637330902918203684832716283019655932542975)))
(define-fun x135 ((x79 Int) (x846 Int)) Bool (and (< (x88 x79 x846) x846) (>= (x88 x79 x846) 0)))
(define-fun x66 ((x79 Int) (x846 Int)) Bool (=> (and (>= x79 0) (< 0 x846)) (= (= x79 (x88 x79 x846)) (< x79 x846))))
(define-fun x526 ((x79 Int) (x846 Int)) Bool (=> (and (> x846 0) (and (<= x846 x79) (< x79 (+ x846 x846)))) (= (x88 x79 x846) (- x79 x846))))
(define-fun x3 ((x79 Int)) Bool (= (x88 0 x79) 0))
(define-fun x337 ((x79 Int)) Bool (= (x88 x79 1) 0))
(define-fun x677 ((x79 Int)) Bool (= (x88 x79 x79) 0))
(define-fun x760 ((x79 Int)) Bool (and (x677 x79) (x3 x79) (x337 x79)))
(define-fun x142 ((x79 Int)) Bool (= (+ (x445 x79 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x88 x79 32)) (x560 x79)))
(define-fun x507 ((x79 Int)) Bool (and (x142 x79) (x666 x79 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x178 ((x79 Int)) Bool (= (+ (x88 x79 65536) (x445 x79 65536)) (x88 x79 131072)))
(define-fun x538 ((x79 Int)) Bool (and (x178 x79) (x666 x79 65536)))
(define-fun x709 ((x79 Int)) Bool (= (+ (x88 x79 131072) (x445 x79 131072)) (x88 x79 262144)))
(define-fun x857 ((x79 Int)) Bool (and (x709 x79) (x666 x79 131072)))
(define-fun x758 ((x79 Int) (x846 Int)) Bool (=> (and (< 0 x79) (< 0 x846)) (and (>= x79 (x192 x79 x846)) (>= (x192 x79 x846) 0))))
(define-fun x330 ((x79 Int) (x846 Int)) Bool (=> (and (and (< x846 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x846 1)) (and (<= 0 x79) (< x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x192 x79 x846) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x192 x79 x846) 0))))
(define-fun x16 ((x79 Int) (x846 Int)) Bool (=> (and (< 1 x846) (< x846 x79)) (> x79 (x192 x79 x846))))
(define-fun x164 ((x79 Int) (x846 Int)) Bool (=> (and (< 0 x846) (> x79 0)) (= (= (x192 x79 x846) 0) (> x846 x79))))
(define-fun x557 ((x79 Int)) Bool (= 0 (x192 0 x79)))
(define-fun x806 ((x79 Int)) Bool (= (x192 x79 1) x79))
(define-fun x449 ((x79 Int)) Bool (=> (not (= x79 0)) (= 1 (x192 x79 x79))))
(define-fun x853 ((x79 Int)) Bool (and (x449 x79) (x806 x79) (x557 x79)))
(define-fun x84 ((x79 Int)) Bool (= (x445 x79 1) (x88 x79 2)))
(define-fun x705 ((x79 Int)) Bool (and (x666 x79 1) (x84 x79)))
(define-fun x244 ((x79 Int)) Bool (= (x445 x79 127) (x88 x79 128)))
(define-fun x684 ((x79 Int)) Bool (and (x666 x79 127) (x244 x79)))
(define-fun x611 ((x79 Int) (x846 Int)) Bool (=> (and (< 0 x79) (< 0 x846)) (= (< (x224 x79 x846) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x846 (x192 (x560 (x224 x79 x846)) x79)))))
(define-fun x144 ((x79 Int) (x846 Int)) Bool (=> (and (not (= x79 0)) (not (= 0 x846))) (and (= x79 (x192 (x224 x79 x846) x846)) (= x846 (x192 (x224 x79 x846) x79)))))
(define-fun x723 ((x79 Int) (x846 Int)) Bool (=> (and (< 0 x846) (< 0 x79)) (= (> x846 (x192 115792089237316195423570985008687907853269984665640564039457584007913129639935 x79)) (> (x224 x79 x846) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x208 ((x79 Int) (x846 Int)) Bool (and (= (x560 (x224 (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) x846)) (x560 (x224 x79 x846))) (= (x560 (x224 x79 x846)) (x560 (x224 (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x846 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x560 (x224 x79 x846)) (x560 (x224 x79 (- x846 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x15 ((x79 Int) (x846 Int)) Bool (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x846) (> x846 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x79 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x79))) (= (<= (x224 (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x846 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x192 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x846)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x79)))) (=> (and (and (< 0 x846) (<= x846 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x79 0) (<= x79 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x224 x79 x846) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x192 57896044618658097711785492504343953926634992332820282019728792003956564819967 x846) x79))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x846) (<= x846 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (< 0 x79) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x79))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x846) (x192 57896044618658097711785492504343953926634992332820282019728792003956564819968 x79)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x224 x79 (- x846 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (< 0 x846) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x846)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x79) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x79))) (= (>= (x192 57896044618658097711785492504343953926634992332820282019728792003956564819968 x846) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x79)) (>= (x224 (- x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) x846) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968))))))
(define-fun x404 ((x79 Int)) Bool (and (= 0 (x224 0 x79)) (= (x224 x79 0) 0)))
(define-fun x747 ((x79 Int)) Bool (and (= (x224 1 x79) x79) (= x79 (x224 x79 1))))
(define-fun x768 ((x79 Int)) Bool (and (x404 x79) (x747 x79)))
(define-fun x436 ((x79 Int)) Bool (= (+ (x445 x79 4) (x88 x79 4)) (x88 x79 8)))
(define-fun x131 ((x79 Int)) Bool (and (x666 x79 4) (x436 x79)))
(define-fun x143 ((x79 Int)) Bool (= (x560 x79) (+ (x88 x79 26959946667150639794667015087019630673637144422540572481103610249216) (x445 x79 115792089210356248756420345214020892766250353992003419616917011526809519390720))))
(define-fun x669 ((x79 Int)) Bool (and (x666 x79 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x143 x79)))
(define-fun x695 ((x79 Int)) Bool (= (x88 x79 18446744073709551616) (x445 x79 18446744073709551615)))
(define-fun x664 ((x79 Int)) Bool (and (x695 x79) (x666 x79 18446744073709551615)))
(define-fun x623 ((x79 Int)) Bool (= (x88 x79 4294967296) (x445 x79 4294967295)))
(define-fun x502 ((x79 Int)) Bool (and (x623 x79) (x666 x79 4294967295)))
(define-fun x451 ((x1 Int)) Int (x52 x1))
(define-fun x433 ((x1 Int)) Int (ite (= x1 128) x251 (x276 x1)))
(define-fun x94 ((x1 Int)) Int (ite (and (> (+ x251 160) x1) (<= 160 x1)) (x52 (+ x835 (- x1 160))) (x433 x1)))
(define-fun x334 ((x1 Int)) Int (ite (= x1 x564) 0 (x94 x1)))
(define-fun x796 ((x1 Int)) Int (x385 x1))
(define-fun x851 ((x1 Int)) Int (ite (= x1 128) x123 (x804 x1)))
(define-fun x500 ((x1 Int)) Int (ite (and (<= 160 x1) (< x1 (+ x123 160))) (x385 (+ (- x1 160) x420)) (x851 x1)))
(define-fun x457 ((x1 Int)) Int (ite (= x1 x347) 0 (x500 x1)))
(define-fun x322 ((x1 Int)) Int (ite (= x1 x668) x356 (x334 x1)))
(define-fun x246 ((x1 Int)) Int (ite (= x1 x279) x136 (x322 x1)))
(define-fun x586 ((x1 Int)) Int (ite (= x1 x787) x158 (x246 x1)))
(define-fun x349 ((x1 Int)) Int (ite (= x279 x1) x141 (x322 x1)))
(define-fun x495 ((x1 Int)) Int (ite x674 (x322 x1) (ite x528 (ite x689 (x246 x1) (x586 x1)) (x349 x1))))
(define-fun x638 ((x1 Int)) Int (ite x45 (x495 x1) (x334 x1)))
(define-fun x225 ((x1 Int)) Int (ite (= x381 x1) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x638 x1)))
(define-fun x454 ((x1 Int)) Int (ite (= x1 x153) (x182 x763) (x225 x1)))
(define-fun x167 ((x1 Int)) Int (ite (and (<= x381 x1) (< x1 (+ 32 x381))) (x277 (+ (- x1 x381) 0)) (x454 x1)))
(define-fun x171 ((x1 Int)) Int (ite x41 (x167 x1) (x454 x1)))
(define-fun x750 ((x1 Int)) Int (ite x269 (x171 x1) (x638 x1)))
(define-fun x368 ((x1 Int)) Int (ite (= x1 x648) x474 (x750 x1)))
(define-fun x795 ((x1 Int)) Int (ite (= x1 x579) x82 (x368 x1)))
(define-fun x394 ((x1 Int)) Int (ite (= x1 x648) 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x795 x1)))
(define-fun x72 ((x1 Int)) Int (ite (= x1 x237) x499 (x394 x1)))
(define-fun x748 ((x1 Int)) Int (ite (= x692 x1) x630 (x72 x1)))
(define-fun x331 ((x1 Int)) Int (ite (= x491 x1) x474 (x748 x1)))
(define-fun x333 ((x1 Int)) Int (ite (= x859 x1) x82 (x331 x1)))
(define-fun x259 ((x1 Int)) Int (ite (= x1 x475) 160 (x333 x1)))
(define-fun x348 ((x1 Int)) Int (ite (= x1 x223) x523 (x259 x1)))
(define-fun x478 ((x1 Int)) Int (ite (= x196 x1) x592 (x348 x1)))
(define-fun x383 ((x1 Int)) Int (ite (= x163 x1) x85 (x478 x1)))
(define-fun x354 ((x1 Int)) Int (ite (= x1 x297) x722 (x383 x1)))
(define-fun x180 ((x1 Int)) Int (ite (= x342 x1) x55 (x354 x1)))
(define-fun x788 ((x1 Int)) Int (ite x816 (x354 x1) (ite x765 (x383 x1) (ite x179 (x478 x1) (ite x685 (x348 x1) (x180 x1))))))
(define-fun x450 ((x1 Int)) Int (ite (= x234 x1) 0 (x788 x1)))
(define-fun x741 ((x1 Int)) Int (ite (and (> (+ x648 32) x1) (>= x1 x648)) (x395 (+ 0 (- x1 x648))) (x450 x1)))
(define-fun x308 ((x1 Int)) Int (ite x486 (x741 x1) (x450 x1)))
(define-fun x248 ((x1 Int)) Int (ite (= x651 x1) x461 (x457 x1)))
(define-fun x106 ((x1 Int)) Int (ite (= x159 x1) x520 (x248 x1)))
(define-fun x650 ((x1 Int)) Int (ite (= x1 x128) x535 (x106 x1)))
(define-fun x783 ((x1 Int)) Int (ite (= x159 x1) x590 (x248 x1)))
(define-fun x827 ((x1 Int)) Int (ite x752 (x248 x1) (ite x719 (ite x396 (x106 x1) (x650 x1)) (x783 x1))))
(define-fun x458 ((x1 Int)) Int (ite x808 (x827 x1) (x457 x1)))
(define-fun x694 ((x1 Int)) Int (ite (= x633 x1) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x458 x1)))
(define-fun x550 ((x1 Int)) Int (ite (= x732 x1) (x182 x301) (x694 x1)))
(define-fun x181 ((x1 Int)) Int (ite (and (> (+ 32 x633) x1) (<= x633 x1)) (x572 (+ 0 (- x1 x633))) (x550 x1)))
(define-fun x183 ((x1 Int)) Int (ite x390 (x181 x1) (x550 x1)))
(define-fun x701 ((x1 Int)) Int (ite x588 (x183 x1) (x458 x1)))
(define-fun x289 ((x1 Int)) Int (ite (= x1 x304) x471 (x701 x1)))
(define-fun x448 ((x1 Int)) Int (ite (= x856 x1) x48 (x289 x1)))
(define-fun x362 ((x1 Int)) Int (ite (= x304 x1) 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x448 x1)))
(define-fun x266 ((x1 Int)) Int (ite (= x1 x287) x377 (x362 x1)))
(define-fun x527 ((x1 Int)) Int (ite (= x1 x744) x739 (x266 x1)))
(define-fun x63 ((x1 Int)) Int (ite (= x463 x1) x471 (x527 x1)))
(define-fun x98 ((x1 Int)) Int (ite (= x614 x1) x48 (x63 x1)))
(define-fun x505 ((x1 Int)) Int (ite (= x1 x799) 160 (x98 x1)))
(define-fun x786 ((x1 Int)) Int (ite (= x565 x1) x166 (x505 x1)))
(define-fun x103 ((x1 Int)) Int (ite (= x1 x137) x156 (x786 x1)))
(define-fun x442 ((x1 Int)) Int (ite (= x1 x656) x117 (x103 x1)))
(define-fun x198 ((x1 Int)) Int (ite (= x1 x591) x412 (x442 x1)))
(define-fun x661 ((x1 Int)) Int (ite (= x807 x1) x578 (x198 x1)))
(define-fun x831 ((x1 Int)) Int (ite x437 (x198 x1) (ite x609 (x442 x1) (ite x658 (x103 x1) (ite x119 (x786 x1) (x661 x1))))))
(define-fun x595 ((x1 Int)) Int (ite (= x769 x1) 0 (x831 x1)))
(define-fun x847 ((x1 Int)) Int (ite (and (< x1 (+ x304 32)) (<= x304 x1)) (x781 (+ (- x1 x304) 0)) (x595 x1)))
(define-fun x512 ((x1 Int)) Int (ite x243 (x847 x1) (x595 x1)))
(define-fun x643 ((x79 Int)) Bool (=> (and (not (= 97199519776808029778168953285215024309695167179541945341261303444449322336256 x79)) (not (= x79 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (not (= 3917867461 x79)) (not (= 18446744073709551615 x79)) (not (= 7776000 x79)) (not (= x79 109562948294120585953088955926913691080166221410047079322077399086870164406272)) (not (= 4064428842 x79)) (not (= x79 4294967295)) (not (= x79 3983562061)) (not (= 4001282680 x79)) (> x79 10000) (not (= x79 1461501637330902918203684832716283019655932542975)) (not (= x79 65536)) (not (= 3477112867 x79)) (not (= 4294967296 x79)) (not (= x79 131072)) (not (= x79 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x79 3951748400)) (not (= 1666326814 x79)) (not (= x79 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (not ((_ is x812) (x472 x79)))))
(assert (= x685 (and x305 (not x160))))
(assert (x101 x120))
(assert (x101 x170))
(assert (x101 x619))
(assert (and (x135 x323 18446744073709551616) (x66 x323 18446744073709551616) (=> (< 0 18446744073709551616) (= (+ (x88 x323 18446744073709551616) (* (x192 x323 18446744073709551616) 18446744073709551616)) x323)) (x526 x323 18446744073709551616)))
(assert (= (and x108 x837) x544))
(assert (x101 x114))
(assert (x101 x145))
(assert (x101 x622))
(assert (= (x560 (* x617 1461501637330902918203684832716283019655932542976)) (x440 x617 160)))
(assert (= x281 (or x81 (and x597 x774))))
(assert (= (x670 x374 160) (x192 x374 1461501637330902918203684832716283019655932542976)))
(assert (x101 x299))
(assert (= (or (and x762 x78) (and x249 x397)) x204))
(assert (= (or x162 x179 x816 x765 x685) x210))
(assert (x760 4))
(assert (= 0 (x804 224)))
(assert (= x80 (or (and (not x233) x242) x775 (and x96 (not x267)))))
(assert (and (= (- x778 (x445 452312848583266388373324160190187140051835877600158453279131187530910662655 x778)) (* (x192 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)) (x330 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) (x164 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) (x758 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) (x16 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) (=> (and (> x778 0) (> 452312848583266388373324160190187140051835877600158453279131187530910662656 0)) (and (< (- x778 452312848583266388373324160190187140051835877600158453279131187530910662656) (* (x192 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)) (<= (* (x192 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656) x778)))))
(assert (and (and (= (x224 256 (- x728 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x728 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256)) (= (- (* x728 256) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x728)) (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x728)) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x728 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 256 (- x728 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x728 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x208 256 x728) (x144 256 x728) (x611 256 x728) (= (* 256 x728) (x224 256 x728)) (x723 256 x728) (x15 256 x728)))
(assert (and (x135 x716 1461501637330902918203684832716283019655932542976) (x66 x716 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x716 1461501637330902918203684832716283019655932542976) (* (x192 x716 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x716)) (x526 x716 1461501637330902918203684832716283019655932542976)))
(assert (and (x135 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x56)) (x526 x56 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x101 x121))
(assert (x643 x471))
(assert (=> (<= x700 10000) (= (x812 x700) (x472 x700))))
(assert (= x596 (and x531 (not x370))))
(assert (x101 x668))
(assert (= x169 (or x588 x693)))
(assert (and (= 9 (x224 3 3)) (= (x224 9 9) 81) (= (x224 27 3) 81) (= 27 (x224 9 3))))
(assert (x101 x671))
(assert (= x186 (=> (and (= (x280 (+ 1 x645)) x44) (= x364 (< x44 x645))) (and (=> x364 x318) (=> (and (and (= x633 x608) (= x410 x301)) (not x364)) x172)))))
(assert (x760 x323))
(assert (= x624 (and x260 x61)))
(assert (= (and x22 x480) x367))
(assert (= (=> (and (= x671 (x280 (+ 1 x159))) (= (<= x645 224) x57)) (and (=> (= (ite (<= x645 32) (x219 (x472 (x827 x671)) 0) (ite (>= 64 x645) (x361 (x472 (x827 x671)) (x472 (x827 (x280 (+ 32 x671)))) 0) (ite (<= x645 96) (x682 (x472 (x827 x671)) (x472 (x827 (x280 (+ x671 32)))) (x472 (x827 (x280 (+ x671 64)))) 0) (ite (>= 128 x645) (x438 (x472 (x827 x671)) (x472 (x827 (x280 (+ 32 x671)))) (x472 (x827 (x280 (+ 64 x671)))) (x472 (x827 (x280 (+ 96 x671)))) 0) (ite (<= x645 160) (x852 (x472 (x827 x671)) (x472 (x827 (x280 (+ x671 32)))) (x472 (x827 (x280 (+ 64 x671)))) (x472 (x827 (x280 (+ 96 x671)))) (x472 (x827 (x280 (+ 128 x671)))) 0) (ite (<= x645 192) (x825 (x472 (x827 x671)) (x472 (x827 (x280 (+ x671 32)))) (x472 (x827 (x280 (+ x671 64)))) (x472 (x827 (x280 (+ x671 96)))) (x472 (x827 (x280 (+ 128 x671)))) (x472 (x827 (x280 (+ 160 x671)))) 0) (ite (>= 224 x645) (x434 (x472 (x827 x671)) (x472 (x827 (x280 (+ 32 x671)))) (x472 (x827 (x280 (+ 64 x671)))) (x472 (x827 (x280 (+ 96 x671)))) (x472 (x827 (x280 (+ 128 x671)))) (x472 (x827 (x280 (+ 160 x671)))) (x472 (x827 (x280 (+ 192 x671)))) 0) (x472 x700)))))))) x410) x186) x57)) x393))
(assert (= x179 (and (not x265) x612)))
(assert (x101 x716))
(assert (= x69 (=> (= (= x58 0) x406) (and (=> x406 x784) (=> (and (not x406) (= (or (and (> 32 x424) (= true (<= x424 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x424 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x64)) (and (=> (and (and (= (x308 x648) x56) (= (= x56 x43) x793) (= x43 (x445 115792089210356248756420345214020892766250353992003419616917011526809519390720 x56))) (not x64)) (and (=> (not x793) x784) (=> (and (and (= x161 (= 109562948294120585953088955926913691080166221410047079322077399086870164406272 x314)) (= x314 (x445 115792089210356248756420345214020892766250353992003419616917011526809519390720 x56))) x793) (and (=> (not x161) x784) (=> x161 x574))))) (=> x64 x784)))))))
(assert (x760 262144))
(assert (= (x472 18446744073709551615) (x812 18446744073709551615)))
(assert (= (and x405 x364) x659))
(assert (=> (>= 10000 (x495 (x280 (+ x184 96)))) (= (x812 (x495 (x280 (+ x184 96)))) (x472 (x495 (x280 (+ x184 96)))))))
(assert (= (and (not x7) x91) x119))
(assert (= x258 (=> (= (= x376 0) x341) (and (=> x341 x784) (=> (and (not x341) (and (= (or (and (< x252 32) (= (<= x252 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x252 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x789) (= x706 (x280 (+ x381 x729))) (= x468 (x280 (+ x252 31))) (= x729 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x468)))) (and (=> (and (and (= x601 (x445 18446744073709551615 x323)) (= x122 (x280 (+ x601 7776000))) (= (x171 x381) x323) (= x477 (> x122 18446744073709551615))) (not x789)) (and (=> (and (not x477) (and (= x648 x706) (= x321 x122))) x190) (=> x477 x784))) (=> x789 x784)))))))
(assert (x101 x626))
(assert (= (and x773 x746) x466))
(assert (x101 x141))
(assert (x101 x236))
(assert (x657 x735))
(assert (x507 x170))
(assert (= (and x274 (not x20)) x255))
(assert (x643 (x827 (x280 (+ x671 32)))))
(assert (x101 x562))
(assert (= x269 (and (not x477) x165)))
(assert (= (and x339 x286) x641))
(assert (x101 x839))
(assert (=> (<= (x827 (x280 (+ 96 x671))) 10000) (= (x472 (x827 (x280 (+ x671 96)))) (x812 (x827 (x280 (+ x671 96)))))))
(assert (x101 x409))
(assert (= (x182 (x472 (x495 (x280 (+ x184 64))))) (x495 (x280 (+ 64 x184)))))
(assert (x507 x667))
(assert (= (=> (and (= x427 x499) (> x380 0) (= (= x542 x332) x74) (< 0 x205) (<= x814 1461501637330902918203684832716283019655932542975) (>= x145 0) (>= x814 0) (= x355 x499) (= x782 (> (x567 (x472 x571)) 0)) (<= x205 1461501637330902918203684832716283019655932542975) (<= x145 1461501637330902918203684832716283019655932542975) (= x506 false) (and (< 163 x845) (= (<= x845 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (<= x691 1461501637330902918203684832716283019655932542975) (< 0 x571) (<= x571 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x702) (= (< 0 (x567 (x472 x380))) x140) (>= x702 0) (<= x566 1461501637330902918203684832716283019655932542975) (>= x573 0) (<= 0 x133) (= (= x736 0) x261) x576 (= x105 (x785 (x472 x571))) (= x426 x710) (= 5 x40) (= x759 x82) (<= 0 x105) (= x542 x499) (= x426 x386) (>= x355 0) (= 4064428842 x51) (<= x427 1461501637330902918203684832716283019655932542975) (not (= x380 x205)) x74 x140 (= x735 x173) (>= x710 0) (= x145 x708) (= x332 x573) (= x838 false) (>= 1461501637330902918203684832716283019655932542975 x710) (not (= x380 x571)) (= x686 (x785 (x472 x205))) (<= 0 x686) x782 (= x615 x415) (< 0 x802) (= (x785 (x472 x380)) x133) (= x576 (< 0 (x567 (x472 x205)))) (<= 0 x427) (<= x355 1461501637330902918203684832716283019655932542975) (= x854 false) (= x802 (x567 (x472 x571))) (<= x573 1461501637330902918203684832716283019655932542975) (not (= x571 x205)) (= false x401) (<= 0 x691) (>= 1461501637330902918203684832716283019655932542975 x380) (= x474 x605) (>= x566 0) (= x716 x634)) (and (=> (not x261) x784) (=> (and x261 (and (not (< x622 3917867461)) (= (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x593) true) (< x593 160)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x593)) x370) (= x622 4064428842) (not (< x622 1666326814)) (not (= 4001282680 x622)) (not (< x622 3477112867)) (not (< x845 4)) (not (= 3983562061 x622)) (= x593 (x800 (- x845 4))) (not (= x622 3917867461)) (not (= 3951748400 x622)))) (and (=> (and (and (= x660 (x445 1461501637330902918203684832716283019655932542975 x716)) (= (= x660 x716) x220)) (not x370)) (and (=> (and x220 (and (= (= x346 x735) x584) (= x346 (x445 1461501637330902918203684832716283019655932542975 x735)))) (and (=> (and (and (= (< 18446744073709551615 x615) x577) (= x474 x37)) x584) (and (=> (and (not x577) (and (= (or (and (> x845 x327) (= (<= x327 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x845 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x845) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x327))) x600) (= (x280 (+ x415 4)) x637) (= (x280 (+ 31 x637)) x327))) (and (=> (not x600) x784) (=> (and (and (= (> x251 18446744073709551615) x360) (= x835 (x280 (+ 32 x637))) (= x251 (x52 x637))) x600) (and (=> x360 x784) (=> (and (not x360) (and (= (= (ite x268 1 0) 0) x176) (= x232 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x667)) (= (x280 (+ x540 31)) x667) (= x663 (> x668 18446744073709551615)) (= x116 (< x668 128)) (= x540 (x280 (+ x263 32))) (= (or x116 x663) x268) (= x263 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x118)) (= (x280 (+ x232 128)) x668) (= x118 (x280 (+ 31 x251))))) (and (=> (not x176) x784) (=> (and (and (= x724 (x280 (+ x251 x835))) (= (> x724 x845) x423)) x176) (and (=> (and (and (= x738 (x445 1461501637330902918203684832716283019655932542975 x173)) (= (= 0 x738) x272) (= (x280 (+ x251 160)) x564)) (not x423)) (and (=> (and (and (= (x445 1461501637330902918203684832716283019655932542975 x634) x138) (= (= x138 x499) x22)) (not x272)) (and (=> x22 x256) (=> (and (and (< x292 256) (= (x338 x32) x292) (<= x292 255) (= x714 (x445 1461501637330902918203684832716283019655932542975 x634)) (= x32 (x361 (x472 x499) x452 0)) (= (< 0 x292) x767) (= x452 (x361 (x472 x714) (x812 2) 0)) (<= 0 x292)) (not x22)) (and (=> (not x767) x784) (=> x767 x256))))) (=> x272 x784))) (=> x423 x784))))))))) (=> x577 x784))) (=> (not x584) x784))) (=> (not x220) x784))) (=> x370 x784))))) x770))
(assert (x101 x415))
(assert (= (and x417 x272) x777))
(assert (= (and (not x536) x21) x558))
(assert (= x45 (and x23 (not x209))))
(assert (= x784 (=> (= x843 true) x107)))
(assert (x768 32))
(assert (= x756 (and x514 (not x230))))
(assert (= x21 (and x204 x411)))
(assert (= x690 (and x283 x298)))
(assert (= (x804 160) 0))
(assert (x101 x780))
(assert (x101 x217))
(assert (= (and x713 x631) x809))
(assert (= (x472 4294967295) (x812 4294967295)))
(assert (= (and x360 x483) x419))
(assert (= x148 (or x243 x387)))
(assert (x101 x823))
(assert (x101 x137))
(assert (= (x804 (x280 (+ 64 x671))) 0))
(assert (and (x135 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x469)) (x526 x469 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x101 x743))
(assert (x853 x306))
(assert (= x262 (and x227 x861)))
(assert (and (x135 x667 32) (x66 x667 32) (=> (< 0 32) (= (+ (x88 x667 32) (* (x192 x667 32) 32)) x667)) (x526 x667 32)))
(assert (= x134 (and x291 x699)))
(assert (= x247 (x182 (x472 x247))))
(assert (= (and x341 x519) x820))
(assert (x101 x803))
(assert (x101 x687))
(assert (= 0 (x804 (x280 (+ x671 192)))))
(assert (x507 x635))
(assert (x101 x374))
(assert (= (x276 160) 0))
(assert (x101 x542))
(assert (x101 x634))
(assert (x507 x469))
(assert (= (and (not x22) x480) x620))
(assert (x101 x37))
(assert (x760 x302))
(assert (= (and x811 x636) x813))
(assert (x101 x136))
(assert (= x23 (or x87 x563)))
(assert (= x298 (and x265 x612)))
(assert (= x658 (and (not x271) x815)))
(assert (x853 32))
(assert (= 0 (x276 (x280 (+ 96 x184)))))
(assert (x101 x418))
(assert (= x609 (and x191 (not x730))))
(assert (= (x812 65536) (x472 65536)))
(assert (= 4294967296 (x182 (x812 4294967296))))
(assert (= x508 (=> (and (= x535 (x742 x817)) (= x551 (x280 (+ x128 32))) (= x727 (not (> x625 x551)))) (and x721 x727))))
(assert (x753 x173))
(assert (= (x804 x159) 0))
(assert (= (x812 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x472 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (= x38 (and x672 (not x270))))
(assert (x101 x463))
(assert (=> (<= x471 10000) (= (x812 x471) (x472 x471))))
(assert (x101 x593))
(assert (x760 x56))
(assert (x643 x205))
(assert (x101 x710))
(assert (x101 x799))
(assert (x753 x104))
(assert (x760 x716))
(assert (x101 x844))
(assert (x101 x412))
(assert (x101 x633))
(assert (= x460 (and x115 (not x589))))
(assert (=> (>= 10000 (x495 (x280 (+ x184 160)))) (= (x472 (x495 (x280 (+ 160 x184)))) (x812 (x495 (x280 (+ 160 x184)))))))
(assert (let ((x79 (* x151 1461501637330902918203684832716283019655932542976))) (and (x135 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x79)) (x526 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (or x38 x384) x228))
(assert (=> (<= x25 10000) (= (x812 x25) (x472 x25))))
(assert (x101 x380))
(assert (x101 x739))
(assert (x643 (x495 (x280 (+ x184 64)))))
(assert (x101 x211))
(assert (x101 x707))
(assert (x657 x634))
(assert (= (x827 (x280 (+ 192 x671))) (x182 (x472 (x827 (x280 (+ x671 192)))))))
(assert (x101 x128))
(assert (x101 x724))
(assert (x753 x469))
(assert (x101 x501))
(assert (x101 x573))
(assert (x101 x428))
(assert (x101 x188))
(assert (x753 x100))
(assert (x101 x571))
(assert (x101 x44))
(assert (x101 x126))
(assert (= x571 (x182 (x472 x571))))
(assert (= (x182 (x812 109562948294120585953088955926913691080166221410047079322077399086870164406272)) 109562948294120585953088955926913691080166221410047079322077399086870164406272))
(assert (x101 x579))
(assert (x101 x313))
(assert (x101 x645))
(assert (= x499 (x182 (x472 x499))))
(assert (= (=> (and (= (< 0 x199) x20) (= (x495 x668) x199)) (and (=> (not x20) x784) (=> (and x20 (and (= (x670 x842 248) x821) (= (x495 x279) x842) (= x456 (> x821 0)))) (and (=> (and (and (= (x495 x668) x17) (= x545 (x280 (+ x821 1))) (= (> x545 x17) x422)) x456) (and (=> (not x422) x146) (=> x422 x784))) (=> (and (= x218 (x812 0)) (not x456)) x832))))) x473))
(assert (= (or x367 (and x767 x620)) x286))
(assert (and (x135 x468 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x468 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x468 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x468 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x468)) (x526 x468 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x101 x732))
(assert (x760 18446744073709551616))
(assert (x101 x2))
(assert (=> (<= x780 10000) (= (x812 x780) (x472 x780))))
(assert (= x309 (and (not x453) x513)))
(assert (x101 x787))
(assert (x101 x461))
(assert (and (and (= (x224 x6 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (* (- 115792089237316195417293883273301227089434195242432897623355228563449095127040) x6)) (= (- (* 6277101735386680763835789423207666416102355444464034512896 x6) 726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656) (x224 (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936) 6277101735386680763835789423207666416102355444464034512896)) (= (x224 (- x6 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (- (* x6 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (- 13407807929942597098847186273910239236930042012704388843369920083034445969792056777621235010053505504363840807472722485292991361205680392012899047377469440)))) (x208 x6 6277101735386680763835789423207666416102355444464034512896) (x144 x6 6277101735386680763835789423207666416102355444464034512896) (x611 x6 6277101735386680763835789423207666416102355444464034512896) (= (* x6 6277101735386680763835789423207666416102355444464034512896) (x224 x6 6277101735386680763835789423207666416102355444464034512896)) (x723 x6 6277101735386680763835789423207666416102355444464034512896) (x15 x6 6277101735386680763835789423207666416102355444464034512896)))
(assert (= (and x397 (not x249)) x54))
(assert (x101 x706))
(assert (=> (<= x499 10000) (= (x472 x499) (x812 x499))))
(assert (x101 x859))
(assert (x101 x427))
(assert (= (x495 (x280 (+ x184 32))) (x182 (x472 (x495 (x280 (+ 32 x184)))))))
(assert (x101 x85))
(assert (and (= (- x306 (x445 1461501637330902918203684832716283019655932542975 x306)) (* (x192 x306 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) (x330 x306 1461501637330902918203684832716283019655932542976) (x164 x306 1461501637330902918203684832716283019655932542976) (x758 x306 1461501637330902918203684832716283019655932542976) (x16 x306 1461501637330902918203684832716283019655932542976) (=> (and (> x306 0) (> 1461501637330902918203684832716283019655932542976 0)) (and (< (- x306 1461501637330902918203684832716283019655932542976) (* (x192 x306 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) (<= (* (x192 x306 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) x306)))))
(assert (= (x182 (x472 x714)) x714))
(assert (x853 256))
(assert (x101 x845))
(assert (x101 x744))
(assert (= (or x352 x808) x378))
(assert (and (and (= (x224 256 (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256)) (= (- (* x150 256) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x150)) (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x150)) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 256 (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x150 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x208 256 x150) (x144 256 x150) (x611 256 x150) (= (* 256 x150) (x224 256 x150)) (x723 256 x150) (x15 256 x150)))
(assert (x101 x552))
(assert (x101 x346))
(assert (x101 x578))
(assert (x760 x635))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 (x182 (x812 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(assert (= (=> (and (= (< 0 x680) x679) (= x680 (x827 x651))) (and (=> (not x679) x318) (=> (and x679 (and (= (< 0 x645) x589) (= x778 (x827 x159)) (= x645 (x670 x778 248)))) (and (=> (and x589 (and (= x688 (x827 x651)) (= x568 (> x152 x688)) (= x152 (x280 (+ 1 x645))))) (and (=> x568 x318) (=> (not x568) x393))) (=> (and (not x589) (= (x812 0) x410)) x186))))) x240))
(assert (and (x135 x95 131072) (x66 x95 131072) (=> (< 0 131072) (= (+ (x88 x95 131072) (* (x192 x95 131072) 131072)) x95)) (x526 x95 131072)))
(assert (= (x812 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x472 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (and (= (- x374 (x445 6277101735386680763835789423207666416102355444464034512895 x374)) (* (x192 x374 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)) (x330 x374 6277101735386680763835789423207666416102355444464034512896) (x164 x374 6277101735386680763835789423207666416102355444464034512896) (x758 x374 6277101735386680763835789423207666416102355444464034512896) (x16 x374 6277101735386680763835789423207666416102355444464034512896) (=> (and (> x374 0) (> 6277101735386680763835789423207666416102355444464034512896 0)) (and (< (- x374 6277101735386680763835789423207666416102355444464034512896) (* (x192 x374 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)) (<= (* (x192 x374 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896) x374)))))
(assert (x101 x201))
(assert (x101 x547))
(assert (= x397 (and x822 x830)))
(assert (x760 (* 1461501637330902918203684832716283019655932542976 x151)))
(assert (= (or (and x300 x789) (and x370 x531) x820 (and x204 (not x411)) (and x64 x62) (and x577 x293) (and x509 x406) x177 x13 (and x46 x423) x496 x794 (and (not x220) x596) (and x819 (not x261)) x511 x110 x809 x54 x558 (and (not x584) x238) (and x422 x132) (and x50 (not x793)) x494 x255 (and x12 (not x600)) x419 x777) x207))
(assert (=> (>= 10000 x714) (= (x472 x714) (x812 x714))))
(assert (x101 x681))
(assert (x753 x735))
(assert (x643 x247))
(assert (x101 x287))
(assert (x760 x254))
(assert (and (= (- x126 (x445 31 x126)) (* (x192 x126 32) 32)) (x330 x126 32) (x164 x126 32) (x758 x126 32) (x16 x126 32) (=> (and (> x126 0) (> 32 0)) (and (< (- x126 32) (* (x192 x126 32) 32)) (<= (* (x192 x126 32) 32) x126)))))
(assert (x101 x660))
(assert (= (or x119 x609 x487 x437 x658) x9))
(assert (x507 x118))
(assert (= (x276 (x280 (+ x184 32))) 0))
(assert (x101 x377))
(assert (= x407 (and x582 x351)))
(assert (x101 x444))
(assert (x101 x386))
(assert (x768 256))
(assert (= (or x756 x41) x519))
(assert (x753 4))
(assert (x101 x520))
(assert (x101 x414))
(assert (= x189 (=> (= x291 false) x429)))
(assert (= x384 (and (not x324) x273)))
(assert (x101 x855))
(assert (x753 x323))
(assert (and (x135 x735 1461501637330902918203684832716283019655932542976) (x66 x735 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x735 1461501637330902918203684832716283019655932542976) (* (x192 x735 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x735)) (x526 x735 1461501637330902918203684832716283019655932542976)))
(assert (x101 x632))
(assert (= (and x46 (not x423)) x417))
(assert (and (x135 x635 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x635 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x635 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x635 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x635)) (x526 x635 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (and (x135 x104 65536) (x66 x104 65536) (=> (< 0 65536) (= (+ (x88 x104 65536) (* (x192 x104 65536) 65536)) x104)) (x526 x104 65536)))
(assert (= (and x345 (not x843)) x676))
(assert (x101 x327))
(assert (x101 x517))
(assert (x101 x196))
(assert (= 0 (x276 x184)))
(assert (x101 x27))
(assert (x101 x644))
(assert (= x60 (=> (and (= x447 (x445 131072 x797)) (= (= x447 131072) x270)) (and (=> (and x270 (and (= x850 (x800 (- x6 7776000))) (= (< 18446744073709551615 x850) x324))) (and (=> (and (= x391 x850) (not x324)) x585) (=> x324 x318))) (=> (and (not x270) (= x6 x391)) x585)))))
(assert (x853 x126))
(assert (x101 x545))
(assert (x101 x591))
(assert (= (x192 x778 452312848583266388373324160190187140051835877600158453279131187530910662656) (x670 x778 248)))
(assert (x101 x662))
(assert (and (= (- x842 (x445 452312848583266388373324160190187140051835877600158453279131187530910662655 x842)) (* (x192 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)) (x330 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) (x164 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) (x758 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) (x16 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) (=> (and (> x842 0) (> 452312848583266388373324160190187140051835877600158453279131187530910662656 0)) (and (< (- x842 452312848583266388373324160190187140051835877600158453279131187530910662656) (* (x192 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)) (<= (* (x192 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656) x842)))))
(assert (x101 x239))
(assert (x101 x841))
(assert (x857 x797))
(assert (x753 x326))
(assert (and (x135 x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x118 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x118)) (x526 x118 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x278 (=> (and (= (= 131072 x27) x206) (= (x445 131072 x95) x27)) (and (=> (and x206 (and (= x413 (x800 (- x321 7776000))) (= x631 (> x413 18446744073709551615)))) (and (=> (and (not x631) (= x681 x413)) x554) (=> x631 x784))) (=> (and (= x321 x681) (not x206)) x554)))))
(assert (= (x182 (x472 (x495 (x280 (+ 160 x184))))) (x495 (x280 (+ 160 x184)))))
(assert (=> (>= 10000 x121) (= (x812 x121) (x472 x121))))
(assert (and (x135 x170 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x170 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x170 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x170 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x170)) (x526 x170 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x496 (and (not x176) x430)))
(assert (= x510 (=> (= x260 (= 0 x239)) (and (=> x260 x318) (=> (and (not x260) (and (= (x280 (+ x626 x633)) x53) (= x635 (x280 (+ x712 31))) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x712) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x712)) (> 32 x712))) x628) (= x626 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x635)))) (and (=> (and (not x628) (and (= x59 (x280 (+ x217 7776000))) (= x229 (x183 x633)) (= x217 (x445 18446744073709551615 x229)) (= (> x59 18446744073709551615) x717))) (and (=> (and (not x717) (and (= x59 x6) (= x53 x304))) x328) (=> x717 x318))) (=> x628 x318)))))))
(assert (= x529 (and x718 x262)))
(assert (= 131072 (x182 (x812 131072))))
(assert (= (x812 109562948294120585953088955926913691080166221410047079322077399086870164406272) (x472 109562948294120585953088955926913691080166221410047079322077399086870164406272)))
(assert (x101 x86))
(assert (= (x182 (x812 1666326814)) 1666326814))
(assert (= 0 (x804 (x280 (+ 160 x671)))))
(assert (= (x182 (x472 x121)) x121))
(assert (x101 x708))
(assert (= (or x752 x719 x127) x317))
(assert (= (and (not x364) x405) x808))
(assert (x101 x524))
(assert (x760 x556))
(assert (= x818 (and x649 (not x185))))
(assert (= (x670 x374 192) (x192 x374 6277101735386680763835789423207666416102355444464034512896)))
(assert (x101 x100))
(assert (x643 x714))
(assert (x101 x599))
(assert (and (x135 x95 8) (x66 x95 8) (=> (< 0 8) (= (+ (x88 x95 8) (* (x192 x95 8) 8)) x95)) (x526 x95 8)))
(assert (and (x135 x95 4294967296) (x66 x95 4294967296) (=> (< 0 4294967296) (= (+ (x88 x95 4294967296) (* (x192 x95 4294967296) 4294967296)) x95)) (x526 x95 4294967296)))
(assert (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x182 (x812 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(assert (x101 x712))
(assert (x753 x302))
(assert (= 0 (x804 256)))
(assert (= (and (not x161) x357) x13))
(assert (= (=> (and (= x209 (> x821 x683)) (= x683 (x280 (+ 1 x821)))) (and (=> (and (and (= x381 x366) (= x763 x218)) (not x209)) x75) (=> x209 x784))) x832))
(assert (= x672 (or x484 x829)))
(assert (x101 x485))
(assert (x101 x184))
(assert (= x713 (and x206 x553)))
(assert (= (and (not x779) x316) x437))
(assert (= (and x679 x317) x115))
(assert (x101 x826))
(assert (=> (<= (x495 (x280 (+ 192 x184))) 10000) (= (x472 (x495 (x280 (+ 192 x184)))) (x812 (x495 (x280 (+ 192 x184)))))))
(assert (= (and x819 x261) x531))
(assert (x760 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 (x827 (x280 (+ 128 x671)))) (= (x812 (x827 (x280 (+ 128 x671)))) (x472 (x827 (x280 (+ x671 128)))))))
(assert (x101 x398))
(assert (= (x472 4064428842) (x812 4064428842)))
(assert (and (x135 x468 32) (x66 x468 32) (=> (< 0 32) (= (+ (x88 x468 32) (* (x192 x468 32) 32)) x468)) (x526 x468 32)))
(assert (=> (<= x571 10000) (= (x812 x571) (x472 x571))))
(assert (= x509 (or x813 (and x636 (not x811)))))
(assert (= x822 (or x310 x311)))
(assert (= (and x9 (not x653)) x387))
(assert (x657 x254))
(assert (x101 x835))
(assert (= (x827 (x280 (+ 32 x671))) (x182 (x472 (x827 (x280 (+ 32 x671)))))))
(assert (x101 x729))
(assert (x657 x302))
(assert (x664 x229))
(assert (and (x135 x100 128) (x66 x100 128) (=> (< 0 128) (= (+ (x88 x100 128) (* (x192 x100 128) 128)) x100)) (x526 x100 128)))
(assert (= (x182 (x812 65536)) 65536))
(assert (x101 x229))
(assert (= (or x676 x594) x26))
(assert (x101 x736))
(assert (and (x135 x667 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x667 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x667 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x667 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x667)) (x526 x667 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x697 (and x20 x274)))
(assert (= (and x672 x270) x273))
(assert (=> (>= 10000 x245) (= (x472 x245) (x812 x245))))
(assert (= x815 (and x91 x7)))
(assert (= (and x23 x209) x511))
(assert (x657 x173))
(assert (x101 x332))
(assert (x101 x680))
(assert (x101 x292))
(assert (x101 x683))
(assert (x101 x93))
(assert (= (x182 (x812 115792089210356248756420345214020892766250353992003419616917011526809519390720)) 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x657 x716))
(assert (x101 x469))
(assert (x101 x814))
(assert (= (x472 4001282680) (x812 4001282680)))
(assert (= x486 (and x725 x210)))
(assert (= x431 (=> (and (or (and (and (= x154 (= (x834 (x472 x780)) x555)) (= x490 (>= (x834 (x472 x571)) x549)) (= x549 (x785 (x472 x571))) x154 x490 (> 4294967296 x424) (= (x785 (x472 x780)) x555)) x725) (not x725)) (and (= x234 (x280 (+ x90 x523))) (= x725 (> x58 0)))) x849)))
(assert (x705 x326))
(assert (= (and x271 x815) x191))
(assert (x101 x302))
(assert (x753 x421))
(assert (= x430 (and x483 (not x360))))
(assert (x760 x95))
(assert (x101 x850))
(assert (x664 x323))
(assert (=> (<= (x495 (x280 (+ x184 64))) 10000) (= (x472 (x495 (x280 (+ 64 x184)))) (x812 (x495 (x280 (+ x184 64)))))))
(assert (x853 x326))
(assert (=> (<= (x827 (x280 (+ 64 x671))) 10000) (= (x812 (x827 (x280 (+ x671 64)))) (x472 (x827 (x280 (+ 64 x671)))))))
(assert (= (and x822 (not x830)) x762))
(assert (x753 x634))
(assert (x643 x245))
(assert (= (=> (and (= x104 (x670 x306 160)) (<= 0 x306) (<= x306 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x113 (= 131072 x428)) (= x428 (x445 131072 x104)) (= x306 (x754 x320)) (= x320 (x361 (x472 x471) (x812 1) 0))) (and (=> (and (and (= (ite (> x465 0) x100 (x445 127 x100)) x461) (= (> 32 x461) x761) (= x326 (x129 x36)) (= (x361 (x472 x471) (x812 5) 0) x36) (= x559 (> x678 0)) (= (x192 x326 2) x100) (= x678 (x560 (- x465 (ite x761 1 0)))) (= x465 (x445 1 x326))) x113) (and (=> (and x559 (and (= (x280 (+ 31 x461)) x126) (= x382 (= x461 0)) (= (x280 (+ x651 32)) x159) (= (x192 x126 32) x547) (= (x280 (+ x525 32)) x485) (= (x280 (+ x485 x651)) x608) (= (x560 (* 32 x547)) x525))) (and (=> (and (not x382) (= (> x461 31) x11)) (and (=> (and (and (= x590 (x560 (* 256 x150))) (= (x129 x36) x99) (= x150 (x192 x99 256))) (not x11)) x240) (=> (and x11 (and (= x216 (< x128 x625)) (= (x742 x858) x520) (= x858 (x219 x36 0)) (= (x280 (+ 32 x159)) x128) (= x817 (x629 x858 1)) (= (x280 (+ x461 x159)) x625))) (and (=> x216 x508) (=> (not x216) x721))))) (=> x382 x240))) (=> (not x559) x318))) (=> (and (not x113) (and (= x633 x651) (= x301 (x812 0)))) x172))) x33))
(assert (x101 x112))
(assert (x101 x565))
(assert (and (= (- x326 (x445 1 x326)) (* (x192 x326 2) 2)) (x330 x326 2) (x164 x326 2) (x758 x326 2) (x16 x326 2) (=> (and (> x326 0) (> 2 0)) (and (< (- x326 2) (* (x192 x326 2) 2)) (<= (* (x192 x326 2) 2) x326)))))
(assert (and (x135 x95 65536) (x66 x95 65536) (=> (< 0 65536) (= (+ (x88 x95 65536) (* (x192 x95 65536) 65536)) x95)) (x526 x95 65536)))
(assert (x101 x738))
(assert (x101 x740))
(assert (x643 x377))
(assert (= (x276 (x280 (+ 128 x184))) 0))
(assert (= x162 (and x581 x690)))
(assert (x101 x425))
(assert (= (x472 4294967296) (x812 4294967296)))
(assert (x760 (* 6277101735386680763835789423207666416102355444464034512896 x321)))
(assert (= (=> (and (= x92 (not (> x201 x418))) (= x158 (x742 x824)) (= x418 (x280 (+ 32 x787)))) (and x202 x92)) x28))
(assert (x101 x40))
(assert (= x733 (and x616 (not x628))))
(assert (x101 x675))
(assert (= (and x340 (not x568)) x801))
(assert (x101 x797))
(assert (x101 x294))
(assert (x101 x193))
(assert (= (x192 x842 452312848583266388373324160190187140051835877600158453279131187530910662656) (x670 x842 248)))
(assert (= (x560 (* 6277101735386680763835789423207666416102355444464034512896 x321)) (x440 x321 192)))
(assert (x760 x93))
(assert (= (and x690 (not x581)) x816))
(assert (= (and x432 (not x482)) x329))
(assert (x101 x564))
(assert (x101 x498))
(assert (x101 x55))
(assert (= (and x620 (not x767)) x794))
(assert (= x719 (or x503 x396)))
(assert (x101 x467))
(assert (= (and x553 (not x206)) x310))
(assert (x643 (x827 (x280 (+ 192 x671)))))
(assert (x753 x95))
(assert (= (=> (and (= x83 (not x570)) (= x860 x175) (= x291 x221) (= x570 (and x606 x860)) (= x610 x606) (= (not x221) x175)) x83) x157))
(assert (x101 x648))
(assert (x753 18446744073709551615))
(assert (= (and x61 (not x260)) x616))
(assert (x131 x95))
(assert (x101 x89))
(assert (x538 x797))
(assert (x101 x297))
(assert (= (and x281 x113) x515))
(assert (x101 x117))
(assert (= (and (not x559) x515) x226))
(assert (= x503 (and x408 x216)))
(assert (and (x135 x421 128) (x66 x421 128) (=> (< 0 128) (= (+ (x88 x421 128) (* (x192 x421 128) 128)) x421)) (x526 x421 128)))
(assert (x101 x766))
(assert (= (or x213 x390) x61))
(assert (and (x135 x797 262144) (x66 x797 262144) (=> (< 0 262144) (= (+ (x88 x797 262144) (* (x192 x797 262144) 262144)) x797)) (x526 x797 262144)))
(assert (= (x440 x6 192) (x560 (* x6 6277101735386680763835789423207666416102355444464034512896))))
(assert (= x245 (x182 (x472 x245))))
(assert (x101 x621))
(assert (= x487 (and x316 x779)))
(assert (and (and (= (x224 x321 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (* (- 115792089237316195417293883273301227089434195242432897623355228563449095127040) x321)) (= (- (* 6277101735386680763835789423207666416102355444464034512896 x321) 726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656) (x224 (- x321 115792089237316195423570985008687907853269984665640564039457584007913129639936) 6277101735386680763835789423207666416102355444464034512896)) (= (x224 (- x321 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (- (* x321 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (- 13407807929942597098847186273910239236930042012704388843369920083034445969792056777621235010053505504363840807472722485292991361205680392012899047377469440)))) (x208 x321 6277101735386680763835789423207666416102355444464034512896) (x144 x321 6277101735386680763835789423207666416102355444464034512896) (x611 x321 6277101735386680763835789423207666416102355444464034512896) (= (* x321 6277101735386680763835789423207666416102355444464034512896) (x224 x321 6277101735386680763835789423207666416102355444464034512896)) (x723 x321 6277101735386680763835789423207666416102355444464034512896) (x15 x321 6277101735386680763835789423207666416102355444464034512896)))
(assert (x643 x541))
(assert (= (x276 192) 0))
(assert (= (x670 x306 192) (x192 x306 6277101735386680763835789423207666416102355444464034512896)))
(assert (= (+ (x182 x792) 1) (x182 (x629 x792 1))))
(assert (= (and x730 x191) x316))
(assert (= x300 (and (not x341) x519)))
(assert (=> (<= (x495 (x280 (+ x184 128))) 10000) (= (x812 (x495 (x280 (+ x184 128)))) (x472 (x495 (x280 (+ 128 x184)))))))
(assert (= (x276 256) 0))
(assert (x101 x376))
(assert (x101 x304))
(assert (= (x182 (x812 7776000)) 7776000))
(assert (x101 x17))
(assert (=> (>= 10000 x247) (= (x812 x247) (x472 x247))))
(assert (= x497 (and x148 x470)))
(assert (=> (<= (x827 (x280 (+ x671 32))) 10000) (= (x812 (x827 (x280 (+ 32 x671)))) (x472 (x827 (x280 (+ x671 32)))))))
(assert (= (x182 (x472 (x495 x184))) (x495 x184)))
(assert (x101 x49))
(assert (= (or x522 x486) x636))
(assert (x768 x617))
(assert (x101 x555))
(assert (x101 x35))
(assert (= (x472 1461501637330902918203684832716283019655932542975) (x812 1461501637330902918203684832716283019655932542975)))
(assert (= x522 (and (not x725) x210)))
(assert (x101 x279))
(assert (x101 x703))
(assert (x101 x614))
(assert (and (x135 x635 32) (x66 x635 32) (=> (< 0 32) (= (+ (x88 x635 32) (* (x192 x635 32) 32)) x635)) (x526 x635 32)))
(assert (x101 x166))
(assert (x760 x797))
(assert (x643 (x495 (x280 (+ 160 x184)))))
(assert (= (x495 (x280 (+ x184 128))) (x182 (x472 (x495 (x280 (+ x184 128)))))))
(assert (x101 x702))
(assert (x853 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (= (and (not x31) x284) x513))
(assert (x101 x257))
(assert (x760 1461501637330902918203684832716283019655932542976))
(assert (x101 x363))
(assert (and (x135 x56 26959946667150639794667015087019630673637144422540572481103610249216) (x66 x56 26959946667150639794667015087019630673637144422540572481103610249216) (=> (< 0 26959946667150639794667015087019630673637144422540572481103610249216) (= (+ (x88 x56 26959946667150639794667015087019630673637144422540572481103610249216) (* (x192 x56 26959946667150639794667015087019630673637144422540572481103610249216) 26959946667150639794667015087019630673637144422540572481103610249216)) x56)) (x526 x56 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x753 131072))
(assert (= (and x584 x238) x293))
(assert (x101 x759))
(assert (x101 x474))
(assert (x760 131072))
(assert (x853 1461501637330902918203684832716283019655932542976))
(assert (x101 x105))
(assert (= 0 (x804 (x280 (+ 128 x671)))))
(assert (x101 x523))
(assert (= (and (not x108) x837) x18))
(assert (= x318 (=> (= x291 true) x429)))
(assert (x101 x722))
(assert (x101 x802))
(assert (and (x135 x93 262144) (x66 x93 262144) (=> (< 0 262144) (= (+ (x88 x93 262144) (* (x192 x93 262144) 262144)) x93)) (x526 x93 262144)))
(assert (= true x819))
(assert (x101 x67))
(assert (x753 x603))
(assert (let ((x79 (* 6277101735386680763835789423207666416102355444464034512896 x321))) (and (x135 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x79)) (x526 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x760 x173))
(assert (x101 x342))
(assert (and (x135 x469 32) (x66 x469 32) (=> (< 0 32) (= (+ (x88 x469 32) (* (x192 x469 32) 32)) x469)) (x526 x469 32)))
(assert (= (and x26 x389) x749))
(assert (x101 x6))
(assert (= x553 (or x102 x4)))
(assert (x101 x424))
(assert (x101 x499))
(assert (x643 (x495 (x280 (+ x184 128)))))
(assert (x101 x95))
(assert (= x775 (and x357 x161)))
(assert (x753 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x101 x156))
(assert (x101 x56))
(assert (x101 x769))
(assert (x101 x447))
(assert (x760 x524))
(assert (= x829 (and x673 x169)))
(assert (x101 x615))
(assert (x101 x321))
(assert (= (x182 (x472 x380)) x380))
(assert (x101 x471))
(assert (x101 x391))
(assert (x760 x634))
(assert (= x402 (=> (and (= (= x504 0) x470) (or x470 (not x470))) x282)))
(assert (= (=> (= (= x504 0) x185) (and (=> x185 x318) (=> (and (not x185) (= x264 (or (and (< x662 32) (= true (<= x662 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (> x662 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (and (=> (and (not x264) (and (= (= x24 x257) x399) (= x24 (x445 115792089210356248756420345214020892766250353992003419616917011526809519390720 x257)) (= (x512 x304) x257))) (and (=> (and (and (= x108 (= x10 109562948294120585953088955926913691080166221410047079322077399086870164406272)) (= (x445 115792089210356248756420345214020892766250353992003419616917011526809519390720 x257) x10)) x399) (and (=> (not x108) x318) (=> x108 x189))) (=> (not x399) x318))) (=> x264 x318))))) x282))
(assert (= x400 (and x285 x336)))
(assert (x101 x778))
(assert (= x432 (and x77 x228)))
(assert (and (and (= (x224 x617 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (* (- 115792089237316195423570985007226406215939081747436879206741300988257197096960) x617)) (= (- (* 1461501637330902918203684832716283019655932542976 x617) 169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536) (x224 (- x617 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1461501637330902918203684832716283019655932542976)) (= (x224 (- x617 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (- (* x617 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (- 13407807929942597099574024998036615799469062179260703058867172057525692431234690984665004206576655545133536153655237612981186769890963219668027669280194560)))) (x208 x617 1461501637330902918203684832716283019655932542976) (x144 x617 1461501637330902918203684832716283019655932542976) (x611 x617 1461501637330902918203684832716283019655932542976) (= (* x617 1461501637330902918203684832716283019655932542976) (x224 x617 1461501637330902918203684832716283019655932542976)) (x723 x617 1461501637330902918203684832716283019655932542976) (x15 x617 1461501637330902918203684832716283019655932542976)))
(assert (x101 x254))
(assert (and (x135 x257 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x257 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x257 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x257 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x257)) (x526 x257 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (and (x135 x104 131072) (x66 x104 131072) (=> (< 0 131072) (= (+ (x88 x104 131072) (* (x192 x104 131072) 131072)) x104)) (x526 x104 131072)))
(assert (x101 x421))
(assert (x643 (x827 (x280 (+ x671 96)))))
(assert (x101 x350))
(assert (and (x135 x797 131072) (x66 x797 131072) (=> (< 0 131072) (= (+ (x88 x797 131072) (* (x192 x797 131072) 131072)) x797)) (x526 x797 131072)))
(assert (= (=> (or (not x843) x843) x464) x107))
(assert (= x693 (and x5 x378)))
(assert (x101 x656))
(assert (= (and (not x285) x336) x539))
(assert (and (x135 x104 262144) (x66 x104 262144) (=> (< 0 262144) (= (+ (x88 x104 262144) (* (x192 x104 262144) 262144)) x104)) (x526 x104 262144)))
(assert (x643 (x495 (x280 (+ 96 x184)))))
(assert (= (or x544 (and x704 (not x197)) (and (not x583) x529)) x34))
(assert (x101 x245))
(assert (and (x135 x797 4294967296) (x66 x797 4294967296) (=> (< 0 4294967296) (= (+ (x88 x797 4294967296) (* (x192 x797 4294967296) 4294967296)) x797)) (x526 x797 4294967296)))
(assert (x669 x56))
(assert (=> (<= (x495 x184) 10000) (= (x472 (x495 x184)) (x812 (x495 x184)))))
(assert (x760 x469))
(assert (= (or x460 x801) x405))
(assert (= x715 (or x139 x45)))
(assert (x101 x315))
(assert (x705 x556))
(assert (and (x135 x229 18446744073709551616) (x66 x229 18446744073709551616) (=> (< 0 18446744073709551616) (= (+ (x88 x229 18446744073709551616) (* (x192 x229 18446744073709551616) 18446744073709551616)) x229)) (x526 x229 18446744073709551616)))
(assert (x643 x700))
(assert (x101 x737))
(assert (x753 x93))
(assert (x753 x118))
(assert (x853 x498))
(assert (= (x812 131072) (x472 131072)))
(assert (x101 x446))
(assert (= (x182 (x472 (x827 x671))) (x827 x671)))
(assert (x101 x159))
(assert (x760 128))
(assert (= (or x561 x134) x68))
(assert (x101 x232))
(assert (x753 127))
(assert (= (and x441 x11) x408))
(assert (x101 x150))
(assert (and (and (= (x224 x151 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (* (- 115792089237316195423570985007226406215939081747436879206741300988257197096960) x151)) (= (- (* 1461501637330902918203684832716283019655932542976 x151) 169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536) (x224 (- x151 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1461501637330902918203684832716283019655932542976)) (= (x224 (- x151 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (- (* x151 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (- 13407807929942597099574024998036615799469062179260703058867172057525692431234690984665004206576655545133536153655237612981186769890963219668027669280194560)))) (x208 x151 1461501637330902918203684832716283019655932542976) (x144 x151 1461501637330902918203684832716283019655932542976) (x611 x151 1461501637330902918203684832716283019655932542976) (= (* x151 1461501637330902918203684832716283019655932542976) (x224 x151 1461501637330902918203684832716283019655932542976)) (x723 x151 1461501637330902918203684832716283019655932542976) (x15 x151 1461501637330902918203684832716283019655932542976)))
(assert (x643 (x827 (x280 (+ 128 x671)))))
(assert (x101 x130))
(assert (= x174 (=> (= (= x82 1) x411) (and (=> (not x411) x784) (=> (and x411 (and (= (x445 1461501637330902918203684832716283019655932542975 x634) x839) (= (= x743 x839) x536) (= (x445 1461501637330902918203684832716283019655932542975 x302) x743))) (and (=> (not x536) x784) (=> (and x536 (and (= (x445 1461501637330902918203684832716283019655932542975 x302) x425) (= (x800 (- x425 x67)) x644) (= (< 0 x644) x233) (= x67 (x445 1461501637330902918203684832716283019655932542975 x173)))) (and (=> (and x233 (and (= x130 (x280 (+ x112 (x560 (x440 x321 192))))) (= x579 (x280 (+ x648 32))) (= (x567 (x472 x245)) x687) (= (< 0 x687) x267) (= (x445 4294967295 x95) x151) (= x112 (x280 (+ (x560 (x440 x151 160)) x552))) (= (x445 1461501637330902918203684832716283019655932542975 x173) x552) (= x245 (x445 1461501637330902918203684832716283019655932542975 x173)))) (and (=> (and x267 (and (= (x280 (+ x648 4)) x237) (= x692 (x280 (+ 32 x237))) (= x630 (x445 1461501637330902918203684832716283019655932542975 x634)) (= (x280 (+ x237 160)) x223) (= (x280 (+ 32 x859)) x475) (= (x445 1461501637330902918203684832716283019655932542975 x173) x780) (= (x280 (+ 32 x491)) x859) (= (x280 (+ 32 x692)) x491) (= (x280 (+ x223 32)) x90) (= (x259 128) x523) (= (< 0 x523) x160))) (and (=> (and x160 (and (= (x348 160) x592) (= x265 (< 32 x523)) (= x196 x90))) (and (=> (and (and (= (x478 192) x85) (= x163 (x280 (+ 32 x90))) (= x283 (> x523 64))) x265) (and (=> (and x283 (and (= (x280 (+ x90 64)) x297) (= (< 96 x523) x581) (= (x383 224) x722))) (and (=> (not x581) x431) (=> x581 x42))) (=> (not x283) x431))) (=> (not x265) x431))) (=> (not x160) x431))) (=> (not x267) x574))) (=> (not x233) x574)))))))))
(assert (= x585 (=> (= (< x391 x517) x77) (and (=> (and (not x77) (and (= (x445 4 x797) x766) (= x764 (= 0 x766)))) (and (=> x764 x726) (=> (not x764) x318))) (=> (and (and (= (= 0 x823) x482) (= x823 (x445 65536 x797))) x77) (and (=> x482 x726) (=> (not x482) x318)))))))
(assert (= x146 (=> (and (= (<= x821 224) x840) (= (x280 (+ x279 1)) x184)) (and (=> (= (ite (<= x821 32) (x219 (x472 (x495 x184)) 0) (ite (>= 64 x821) (x361 (x472 (x495 x184)) (x472 (x495 (x280 (+ x184 32)))) 0) (ite (>= 96 x821) (x682 (x472 (x495 x184)) (x472 (x495 (x280 (+ 32 x184)))) (x472 (x495 (x280 (+ 64 x184)))) 0) (ite (<= x821 128) (x438 (x472 (x495 x184)) (x472 (x495 (x280 (+ x184 32)))) (x472 (x495 (x280 (+ 64 x184)))) (x472 (x495 (x280 (+ x184 96)))) 0) (ite (<= x821 160) (x852 (x472 (x495 x184)) (x472 (x495 (x280 (+ 32 x184)))) (x472 (x495 (x280 (+ x184 64)))) (x472 (x495 (x280 (+ x184 96)))) (x472 (x495 (x280 (+ x184 128)))) 0) (ite (>= 192 x821) (x825 (x472 (x495 x184)) (x472 (x495 (x280 (+ 32 x184)))) (x472 (x495 (x280 (+ 64 x184)))) (x472 (x495 (x280 (+ x184 96)))) (x472 (x495 (x280 (+ 128 x184)))) (x472 (x495 (x280 (+ x184 160)))) 0) (ite (<= x821 224) (x434 (x472 (x495 x184)) (x472 (x495 (x280 (+ x184 32)))) (x472 (x495 (x280 (+ x184 64)))) (x472 (x495 (x280 (+ 96 x184)))) (x472 (x495 (x280 (+ 128 x184)))) (x472 (x495 (x280 (+ x184 160)))) (x472 (x495 (x280 (+ 192 x184)))) 0) (x472 x25)))))))) x218) x832) x840))))
(assert (= (x472 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x812 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x101 x426))
(assert (= (and x790 x307) x81))
(assert (x502 x95))
(assert (x101 x323))
(assert (x101 x807))
(assert (x101 x735))
(assert (x101 x235))
(assert (= (=> (and (= (= 0 x58) x811) (or (not x811) x811)) x69) x849))
(assert (= x674 (and x284 x31)))
(assert (= x480 (and x417 (not x272))))
(assert (and (x135 x326 2) (x66 x326 2) (=> (< 0 2) (= (+ (x88 x326 2) (* (x192 x326 2) 2)) x326)) (x526 x326 2)))
(assert (= x720 (and x125 x407)))
(assert (= x202 x473))
(assert (= (x812 97199519776808029778168953285215024309695167179541945341261303444449322336256) (x472 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (x101 x640))
(assert (=> (>= 10000 x205) (= (x812 x205) (x472 x205))))
(assert (x101 x549))
(assert (x760 (* 6277101735386680763835789423207666416102355444464034512896 x6)))
(assert (x760 x118))
(assert (= (and (not x790) x307) x597))
(assert (x101 x24))
(assert (= 0 (x804 192)))
(assert (x101 x667))
(assert (= x554 (=> (= (> x89 x681) x830) (and (=> (and (and (= (= 0 x194) x78) (= (x445 4 x95) x194)) (not x830)) (and (=> (not x78) x784) (=> x78 x174))) (=> (and x830 (and (= x249 (= 0 x833)) (= x833 (x445 65536 x95)))) (and (=> x249 x174) (=> (not x249) x784)))))))
(assert (and (x135 x797 65536) (x66 x797 65536) (=> (< 0 65536) (= (+ (x88 x797 65536) (* (x192 x797 65536) 65536)) x797)) (x526 x797 65536)))
(assert (= 1461501637330902918203684832716283019655932542975 (x182 (x812 1461501637330902918203684832716283019655932542975))))
(assert (= x518 (and x453 x513)))
(assert (x101 x711))
(assert (x101 x413))
(assert (x643 (x827 x671)))
(assert (=> (<= (x827 (x280 (+ x671 192))) 10000) (= (x472 (x827 (x280 (+ x671 192)))) (x812 (x827 (x280 (+ 192 x671)))))))
(assert (= (x440 x151 160) (x560 (* 1461501637330902918203684832716283019655932542976 x151))))
(assert (and (x135 x296 1461501637330902918203684832716283019655932542976) (x66 x296 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x296 1461501637330902918203684832716283019655932542976) (* (x192 x296 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x296)) (x526 x296 1461501637330902918203684832716283019655932542976)))
(assert (x101 x263))
(assert (= 4064428842 (x182 (x812 4064428842))))
(assert (x101 x99))
(assert (and (x135 x95 262144) (x66 x95 262144) (=> (< 0 262144) (= (+ (x88 x95 262144) (* (x192 x95 262144) 262144)) x95)) (x526 x95 262144)))
(assert (x101 x541))
(assert (= 4294967295 (x182 (x812 4294967295))))
(assert (= (x276 (x280 (+ x184 64))) 0))
(assert (= x375 (and x518 x353)))
(assert (= x561 (and x699 (not x291))))
(assert (and (x135 x173 1461501637330902918203684832716283019655932542976) (x66 x173 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x173 1461501637330902918203684832716283019655932542976) (* (x192 x173 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x173)) (x526 x173 1461501637330902918203684832716283019655932542976)))
(assert (x768 x151))
(assert (= x357 (and x50 x793)))
(assert (x669 x257))
(assert (= (x812 3951748400) (x472 3951748400)))
(assert (= x305 (and x96 x267)))
(assert (x760 8))
(assert (= (and x514 x230) x41))
(assert (x753 1461501637330902918203684832716283019655932542975))
(assert (x101 x59))
(assert (= x698 (and x530 (not x764))))
(assert (= (x804 x671) 0))
(assert (= x132 (and x456 x697)))
(assert (x101 x71))
(assert (= (x182 (x472 (x827 (x280 (+ x671 96))))) (x827 (x280 (+ 96 x671)))))
(assert (= (x812 3917867461) (x472 3917867461)))
(assert (x657 x524))
(assert (= 0 (x276 (x280 (+ 160 x184)))))
(assert (x753 x635))
(assert (and (x135 x797 4) (x66 x797 4) (=> (< 0 4) (= (+ (x88 x797 4) (* (x192 x797 4) 4)) x797)) (x526 x797 4)))
(assert (x753 4294967295))
(assert (and (x135 x93 65536) (x66 x93 65536) (=> (< 0 65536) (= (+ (x88 x93 65536) (* (x192 x93 65536) 65536)) x93)) (x526 x93 65536)))
(assert (x101 x613))
(assert (=> (<= (x827 x671) 10000) (= (x472 (x827 x671)) (x812 (x827 x671)))))
(assert (x101 x601))
(assert (=> (<= x541 10000) (= (x472 x541) (x812 x541))))
(assert (x768 x547))
(assert (= (and (not x264) x818) x303))
(assert (x101 x48))
(assert (= x177 (and x641 (not x195))))
(assert (= (and x115 x589) x340))
(assert (= x837 (and x399 x303)))
(assert (x101 x728))
(assert (x760 x603))
(assert (x507 x468))
(assert (= x91 (and x197 x704)))
(assert (x101 x625))
(assert (=> (>= 10000 x474) (= (x472 x474) (x812 x474))))
(assert (x753 65536))
(assert (= (x472 (x182 x763)) x763))
(assert (x101 x118))
(assert (x101 x187))
(assert (x101 x153))
(assert (x753 x556))
(assert (x753 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x101 x603))
(assert (x101 x152))
(assert (x768 1461501637330902918203684832716283019655932542976))
(assert (x502 x797))
(assert (and (x135 x170 32) (x66 x170 32) (=> (< 0 32) (= (+ (x88 x170 32) (* (x192 x170 32) 32)) x170)) (x526 x170 32)))
(assert (= (and (not x358) x466) x351))
(assert (= (x804 (x280 (+ x671 96))) 0))
(assert (x101 x630))
(assert (x760 x326))
(assert (= (and x717 x733) x65))
(assert (= (x182 (x472 x700)) x700))
(assert (x101 x355))
(assert (= x311 (and (not x631) x713)))
(assert (= (x276 x279) 0))
(assert (and (= (- x556 (x445 1 x556)) (* (x192 x556 2) 2)) (x330 x556 2) (x164 x556 2) (x758 x556 2) (x16 x556 2) (=> (and (> x556 0) (> 2 0)) (and (< (- x556 2) (* (x192 x556 2) 2)) (<= (* (x192 x556 2) 2) x556)))))
(assert (x857 x93))
(assert (= x780 (x182 (x472 x780))))
(assert (= (x827 (x280 (+ 64 x671))) (x182 (x472 (x827 (x280 (+ x671 64)))))))
(assert (= (x182 (x812 97199519776808029778168953285215024309695167179541945341261303444449322336256)) 97199519776808029778168953285215024309695167179541945341261303444449322336256))
(assert (= x301 (x472 (x182 x301))))
(assert (= x359 (and x273 x324)))
(assert (x853 6277101735386680763835789423207666416102355444464034512896))
(assert (= x42 (=> (and (= (not (< 128 x523)) x215) (= (x354 256) x55) (= x342 (x280 (+ 96 x90)))) (and x431 x215))))
(assert (and (x135 x302 1461501637330902918203684832716283019655932542976) (x66 x302 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x302 1461501637330902918203684832716283019655932542976) (* (x192 x302 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x302)) (x526 x302 1461501637330902918203684832716283019655932542976)))
(assert (x760 2))
(assert (= (x182 (x472 (x495 (x280 (+ x184 192))))) (x495 (x280 (+ x184 192)))))
(assert (x853 x374))
(assert (= 4001282680 (x182 (x812 4001282680))))
(assert (x101 x635))
(assert (x101 x151))
(assert (x760 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= x377 (x182 (x472 x377))))
(assert (x768 x6))
(assert (= (x472 7776000) (x812 7776000)))
(assert (and (= (- x374 (x445 1461501637330902918203684832716283019655932542975 x374)) (* (x192 x374 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) (x330 x374 1461501637330902918203684832716283019655932542976) (x164 x374 1461501637330902918203684832716283019655932542976) (x758 x374 1461501637330902918203684832716283019655932542976) (x16 x374 1461501637330902918203684832716283019655932542976) (=> (and (> x374 0) (> 1461501637330902918203684832716283019655932542976 0)) (and (< (- x374 1461501637330902918203684832716283019655932542976) (* (x192 x374 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) (<= (* (x192 x374 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976) x374)))))
(assert (= x594 (and x345 x843)))
(assert (= 0 (x804 (x280 (+ x671 32)))))
(assert (and (x135 x118 32) (x66 x118 32) (=> (< 0 32) (= (+ (x88 x118 32) (* (x192 x118 32) 32)) x118)) (x526 x118 32)))
(assert (= (+ 1 (x182 x858)) (x182 (x629 x858 1))))
(assert (let ((x79 (* x6 6277101735386680763835789423207666416102355444464034512896))) (and (x135 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x79)) (x526 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x760 x421))
(assert (x643 (x495 (x280 (+ 32 x184)))))
(assert (x760 4294967296))
(assert (x101 x468))
(assert (= x227 (or (and x482 x432) (and x530 x764))))
(assert (= (=> (or x291 (not x291)) x157) x429))
(assert (x101 x356))
(assert (= (x276 224) 0))
(assert (x643 x571))
(assert (= x75 (=> (= (= x763 (x812 0)) x212) (and (=> (and (and (= x648 x381) (= (x670 x374 192) x321)) x212) x190) (=> (and (not x212) (and (or (and (= x798 x376) (not x230)) (and x230 (and (> 4294967296 x252) (= x376 1)))) (and (= x153 (x280 (+ 4 x381))) (= (> x798 0) x230)))) x258)))))
(assert (x131 x797))
(assert (and (x135 x797 8) (x66 x797 8) (=> (< 0 8) (= (+ (x88 x797 8) (* (x192 x797 8) 8)) x797)) (x526 x797 8)))
(assert (and (= (- x498 (x445 31 x498)) (* (x192 x498 32) 32)) (x330 x498 32) (x164 x498 32) (x758 x498 32) (x16 x498 32) (=> (and (> x498 0) (> 32 0)) (and (< (- x498 32) (* (x192 x498 32) 32)) (<= (* (x192 x498 32) 32) x498)))))
(assert (x101 x123))
(assert (x538 x95))
(assert (and (x135 x603 1461501637330902918203684832716283019655932542976) (x66 x603 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x603 1461501637330902918203684832716283019655932542976) (* (x192 x603 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x603)) (x526 x603 1461501637330902918203684832716283019655932542976)))
(assert (x101 x90))
(assert (= (x182 (x812 3983562061)) 3983562061))
(assert (= x70 (and x378 (not x5))))
(assert (= x242 (and x536 x21)))
(assert (= (x182 (x472 (x495 (x280 (+ x184 96))))) (x495 (x280 (+ x184 96)))))
(assert (x101 x691))
(assert (x753 x170))
(assert (x101 x381))
(assert (x101 x714))
(assert (x101 x51))
(assert (x101 x700))
(assert (x760 x667))
(assert (x101 x326))
(assert (= (x182 (x812 18446744073709551615)) 18446744073709551615))
(assert (x101 x525))
(assert (x657 x603))
(assert (x760 x104))
(assert (not x770))
(assert (x101 x492))
(assert (x538 x93))
(assert (= (and x70 (not x776)) x213))
(assert (= (x182 (x812 3951748400)) 3951748400))
(assert (= (and x734 x253) x607))
(assert (= x205 (x182 (x472 x205))))
(assert (and (and (= (x224 32 (- x455 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x455 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (- (* x455 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x455)) (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x455)) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x455 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x455 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x455 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x208 32 x455) (x144 32 x455) (x611 32 x455) (= (* 32 x455) (x224 32 x455)) (x723 32 x455) (x15 32 x455)))
(assert (= x307 (and x734 (not x253))))
(assert (x753 x524))
(assert (x101 x25))
(assert (x768 6277101735386680763835789423207666416102355444464034512896))
(assert (x643 x121))
(assert (=> (>= 10000 (x827 (x280 (+ 160 x671)))) (= (x472 (x827 (x280 (+ x671 160)))) (x812 (x827 (x280 (+ 160 x671)))))))
(assert (= x574 (=> (= x843 false) x107)))
(assert (x760 x170))
(assert (let ((x79 (* x617 1461501637330902918203684832716283019655932542976))) (and (x135 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x66 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ (x88 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* (x192 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x79)) (x526 x79 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x760 x735))
(assert (x101 x617))
(assert (= x87 (and (not x456) x697)))
(assert (x768 x728))
(assert (x753 x797))
(assert (and (= (- x235 (x445 255 x235)) (* (x192 x235 256) 256)) (x330 x235 256) (x164 x235 256) (x758 x235 256) (x16 x235 256) (=> (and (> x235 0) (> 256 0)) (and (< (- x235 256) (* (x192 x235 256) 256)) (<= (* (x192 x235 256) 256) x235)))))
(assert (and (x135 x95 4) (x66 x95 4) (=> (< 0 4) (= (+ (x88 x95 4) (* (x192 x95 4) 4)) x95)) (x526 x95 4)))
(assert (= (and (not x575) x73) x4))
(assert (x657 x296))
(assert (x101 x551))
(assert (x768 x321))
(assert (x101 x53))
(assert (x101 x504))
(assert (x753 x468))
(assert (x101 x465))
(assert (= x147 (and x262 (not x718))))
(assert (= 3477112867 (x182 (x812 3477112867))))
(assert (= (x182 (x472 (x827 (x280 (+ 128 x671))))) (x827 (x280 (+ x671 128)))))
(assert (and (= (- x306 (x445 6277101735386680763835789423207666416102355444464034512895 x306)) (* (x192 x306 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)) (x330 x306 6277101735386680763835789423207666416102355444464034512896) (x164 x306 6277101735386680763835789423207666416102355444464034512896) (x758 x306 6277101735386680763835789423207666416102355444464034512896) (x16 x306 6277101735386680763835789423207666416102355444464034512896) (=> (and (> x306 0) (> 6277101735386680763835789423207666416102355444464034512896 0)) (and (< (- x306 6277101735386680763835789423207666416102355444464034512896) (* (x192 x306 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)) (<= (* (x192 x306 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896) x306)))))
(assert (and (x135 x93 131072) (x66 x93 131072) (=> (< 0 131072) (= (+ (x88 x93 131072) (* (x192 x93 131072) 131072)) x93)) (x526 x93 131072)))
(assert (= (and x124 x382) x752))
(assert (= x50 (and x62 (not x64))))
(assert (x753 x236))
(assert (x760 x229))
(assert (x753 x257))
(assert (and (x135 x257 26959946667150639794667015087019630673637144422540572481103610249216) (x66 x257 26959946667150639794667015087019630673637144422540572481103610249216) (=> (< 0 26959946667150639794667015087019630673637144422540572481103610249216) (= (+ (x88 x257 26959946667150639794667015087019630673637144422540572481103610249216) (* (x192 x257 26959946667150639794667015087019630673637144422540572481103610249216) 26959946667150639794667015087019630673637144422540572481103610249216)) x257)) (x526 x257 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x760 (* 1461501637330902918203684832716283019655932542976 x617)))
(assert (= (=> (= x5 (= x301 (x812 0))) (and (=> (and (not x5) (and (and (= x732 (x280 (+ x633 4))) (= (> x562 0) x776)) (or (and (not x776) (= x562 x239)) (and (and (= 1 x239) (> 4294967296 x712)) x776)))) x510) (=> (and (and (= x633 x304) (= (x670 x306 192) x6)) x5) x328))) x172))
(assert (x753 1))
(assert (x101 x122))
(assert (= x416 (or (and (not x582) x351) (and (not x389) x26) x698 x624 x329 x65 x359 x539 x226 (and x773 (not x746)) x751 (and x532 x400) (and x340 x568) (and (not x399) x303) x607 x147 x18 x659 (and x749 x14) (and x185 x649) (and x836 (not x39)) (and x628 x616) x290 (and (not x861) x227) (and x264 x818) (and x358 x466) x720)))
(assert (and (x135 x524 1461501637330902918203684832716283019655932542976) (x66 x524 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x524 1461501637330902918203684832716283019655932542976) (* (x192 x524 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x524)) (x526 x524 1461501637330902918203684832716283019655932542976)))
(assert (x101 x516))
(assert (= (and x165 x477) x494))
(assert (and (= (- x99 (x445 255 x99)) (* (x192 x99 256) 256)) (x330 x99 256) (x164 x99 256) (x758 x99 256) (x16 x99 256) (=> (and (> x99 0) (> 256 0)) (and (< (- x99 256) (* (x192 x99 256) 256)) (<= (* (x192 x99 256) 256) x99)))))
(assert (x760 x257))
(assert (x101 x566))
(assert (x857 x104))
(assert (= x471 (x182 (x472 x471))))
(assert (x643 x380))
(assert (= (and x286 (not x339)) x139))
(assert (= x73 (or x269 x403)))
(assert (x101 x58))
(assert (x101 x223))
(assert (= (and (not x216) x408) x396))
(assert (= (and x559 x515) x124))
(assert (x768 x150))
(assert (= x12 (and (not x577) x293)))
(assert (x101 x665))
(assert (x101 x475))
(assert (= (and x317 (not x679)) x290))
(assert (= (and x509 (not x406)) x62))
(assert (x101 x548))
(assert (= x612 (and x160 x305)))
(assert (x101 x76))
(assert (x753 x667))
(assert (x853 x556))
(assert (= x345 (or x80 x207)))
(assert (= x102 (and x73 x575)))
(assert (and (x135 x634 1461501637330902918203684832716283019655932542976) (x66 x634 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x634 1461501637330902918203684832716283019655932542976) (* (x192 x634 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x634)) (x526 x634 1461501637330902918203684832716283019655932542976)))
(assert (x101 x686))
(assert (x753 x296))
(assert (=> (>= 10000 x380) (= (x812 x380) (x472 x380))))
(assert (x101 x104))
(assert (= (x182 (x472 (x827 (x280 (+ 160 x671))))) (x827 (x280 (+ x671 160)))))
(assert (= (and x836 x39) x773))
(assert (x760 32))
(assert (= (x812 3477112867) (x472 3477112867)))
(assert (x101 x82))
(assert (x101 x521))
(assert (x684 x421))
(assert (x101 x856))
(assert (x538 x104))
(assert (= (and x597 (not x774)) x751))
(assert (x760 65536))
(assert (x101 x688))
(assert (= x836 (and x749 (not x14))))
(assert (x101 x205))
(assert (= (and x195 x641) x284))
(assert (x643 x474))
(assert (x101 x296))
(assert (x643 x499))
(assert (and (and (= (x224 32 (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (- (* x547 32) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x547)) (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x547)) (= (x224 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x547 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x208 32 x547) (x144 32 x547) (x611 32 x547) (= (* 32 x547) (x224 32 x547)) (x723 32 x547) (x15 32 x547)))
(assert (= (=> (and (or (and x673 (and (= (x445 65536 x104) x755) (= x479 (= x755 65536)) (= 0 x797) (= (ite x479 0 x306) x603))) (and (not x673) (and (= x797 x104) (= x306 x603)))) (= (> x517 x6) x673)) x60) x328))
(assert (x101 x534))
(assert (x101 x199))
(assert (= 0 (x276 (x280 (+ 192 x184)))))
(assert (= x336 (and (not x125) x407)))
(assert (x101 x833))
(assert (x760 x296))
(assert (x101 x637))
(assert (x101 x655))
(assert (x101 x798))
(assert (= x243 (and x653 x9)))
(assert (x101 x133))
(assert (x101 x455))
(assert (= (=> (and (= x315 x573) x388 (= x377 x826) (= x665 x599) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x516) true) (< 163 x516)) (<= x501 1461501637330902918203684832716283019655932542975) (<= x313 1461501637330902918203684832716283019655932542975) (<= 0 x193) (= (= x855 0) x389) (= x646 x655) (= x377 x703) (>= x703 0) (>= x646 0) (= x313 x377) (<= x646 1461501637330902918203684832716283019655932542975) (<= 0 x501) (<= x703 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x193) (>= x313 0) (= x610 (not x533)) (= x388 (not (= x315 x826))) (= x471 x492) (= x398 (x567 (x472 x571))) (= x843 x533) (< 0 x398) (= x236 x524) (= x114 x48) (= x2 x49) (= x296 x254) (= x501 x49)) (and (=> (not x389) x318) (=> (and (and (= x14 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x675) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x675) true) (> 160 x675)))) (not (= x76 4001282680)) (= 4064428842 x76) (not (= 3917867461 x76)) (not (< x76 1666326814)) (not (> 3477112867 x76)) (not (= x76 3951748400)) (not (> 4 x516)) (= (x800 (- x516 4)) x675) (not (> 3917867461 x76)) (not (= 3983562061 x76))) x389) (and (=> x14 x318) (=> (and (and (= (= x524 x841) x39) (= x841 (x445 1461501637330902918203684832716283019655932542975 x524))) (not x14)) (and (=> (not x39) x318) (=> (and x39 (and (= x299 (x445 1461501637330902918203684832716283019655932542975 x254)) (= (= x299 x254) x746))) (and (=> (and (and (= x363 x471) (= (< 18446744073709551615 x599) x358)) x746) (and (=> x358 x318) (=> (and (not x358) (and (= x582 (or (and (= (<= x737 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x516 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x737 x516)) (and (<= x516 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x737)))) (= (x280 (+ 31 x187)) x737) (= (x280 (+ x665 4)) x187))) (and (=> (and x582 (and (= x125 (< 18446744073709551615 x123)) (= (x280 (+ 32 x187)) x420) (= x123 (x385 x187)))) (and (=> x125 x318) (=> (and (and (= x651 (x280 (+ 128 x548))) (= x469 (x280 (+ x211 31))) (= x587 (or x109 x569)) (= x534 (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x170)) (= x109 (< x651 128)) (= (x445 115792089237316195423570985008687907853269984665640564039457584007913129639904 x469) x548) (= (x280 (+ x123 31)) x170) (= x569 (< 18446744073709551615 x651)) (= x211 (x280 (+ 32 x534))) (= x285 (= 0 (ite x587 1 0)))) (not x125)) (and (=> (and x285 (and (= (< x516 x35) x532) (= x35 (x280 (+ x420 x123))))) (and (=> x532 x318) (=> (and (not x532) (and (= (x445 1461501637330902918203684832716283019655932542975 x296) x640) (= (x280 (+ x123 160)) x347) (= (= x640 0) x253))) (and (=> (and (and (= (x445 1461501637330902918203684832716283019655932542975 x236) x414) (= x790 (= x377 x414))) (not x253)) (and (=> (and (not x790) (and (= (x445 1461501637330902918203684832716283019655932542975 x236) x121) (<= 0 x711) (= (< 0 x711) x774) (= x711 (x338 x203)) (= (x361 (x472 x121) (x812 2) 0) x222) (> 256 x711) (= x203 (x361 (x472 x377) x222 0)) (>= 255 x711))) (and (=> x774 x33) (=> (not x774) x318))) (=> x790 x33))) (=> x253 x318))))) (=> (not x285) x318))))) (=> (not x582) x318))))) (=> (not x746) x318))))))))) x464))
(assert (x101 x678))
(assert (x101 x590))
(assert (x753 x56))
(assert (= x704 (and x529 x583)))
(assert (x853 x778))
(assert (= (x192 x306 1461501637330902918203684832716283019655932542976) (x670 x306 160)))
(assert (= (=> (= (= x48 1) x861) (and (=> (and x861 (and (= (x445 1461501637330902918203684832716283019655932542975 x603) x120) (= (x445 1461501637330902918203684832716283019655932542975 x236) x621) (= x718 (= x120 x621)))) (and (=> (and x718 (and (= x294 (x800 (- x632 x86))) (= (x445 1461501637330902918203684832716283019655932542975 x603) x632) (= (x445 1461501637330902918203684832716283019655932542975 x296) x86) (= (< 0 x294) x583))) (and (=> (and (and (= x541 (x445 1461501637330902918203684832716283019655932542975 x296)) (= (x280 (+ (x560 (x440 x617 160)) x619)) x446) (= (x280 (+ x446 (x560 (x440 x6 192)))) x613) (= x617 (x445 4294967295 x797)) (= x856 (x280 (+ x304 32))) (= (x445 1461501637330902918203684832716283019655932542975 x296) x619) (= x197 (> x707 0)) (= x707 (x567 (x472 x541)))) x583) (and (=> (not x197) x189) (=> (and x197 (and (= x247 (x445 1461501637330902918203684832716283019655932542975 x296)) (= x744 (x280 (+ x287 32))) (= x565 (x280 (+ 160 x287))) (= (x280 (+ 32 x614)) x799) (= x463 (x280 (+ 32 x744))) (= (x280 (+ x463 32)) x614) (= x521 (x280 (+ x565 32))) (= x287 (x280 (+ 4 x304))) (= x7 (> x166 0)) (= (x445 1461501637330902918203684832716283019655932542975 x236) x739) (= x166 (x505 128)))) (and (=> (not x7) x745) (=> (and (and (= x521 x137) (= (x786 160) x156) (= x271 (> x166 32))) x7) (and (=> (not x271) x745) (=> (and x271 (and (= x730 (> x166 64)) (= (x280 (+ 32 x521)) x656) (= x117 (x103 192)))) (and (=> (and (and (= x779 (< 96 x166)) (= (x442 224) x412) (= (x280 (+ x521 64)) x591)) x730) (and (=> x779 x288) (=> (not x779) x745))) (=> (not x730) x745))))))))) (=> (not x583) x189))) (=> (not x718) x318))) (=> (not x861) x318))) x726))
(assert (x101 x237))
(assert (= x46 (and x430 x176)))
(assert (x101 x366))
(assert (x101 x252))
(assert (= (or x34 x416) x699))
(assert (x853 2))
(assert (= (and x400 (not x532)) x734))
(assert (x101 x420))
(assert (x853 x235))
(assert (x101 x194))
(assert (x101 x491))
(assert (= x514 (and (not x212) x715)))
(assert (x101 x842))
(assert (x101 x158))
(assert (x643 x25))
(assert (= x483 (and x12 x600)))
(assert (x101 x755))
(assert (= (x812 3983562061) (x472 3983562061)))
(assert (=> (<= (x495 (x280 (+ x184 32))) 10000) (= (x812 (x495 (x280 (+ 32 x184)))) (x472 (x495 (x280 (+ x184 32)))))))
(assert (= (and (not x113) x281) x352))
(assert (= (and x300 (not x789)) x165))
(assert (= x721 x240))
(assert (= (=> (and (= (x445 131072 x93) x444) (<= x374 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x754 x439) x374) (<= 0 x374) (= x339 (= x444 131072)) (= (x361 (x472 x474) (x812 1) 0) x439) (= (x670 x374 160) x93)) (and (=> (and x339 (and (= (> x467 0) x195) (= x740 (x445 1 x556)) (= (< x356 32) x372) (= (ite (< 0 x740) x421 (x445 127 x421)) x356) (= x556 (x129 x371)) (= x421 (x192 x556 2)) (= (x361 (x472 x474) (x812 5) 0) x371) (= x467 (x560 (- x740 (ite x372 1 0)))))) (and (=> (and (and (= x279 (x280 (+ 32 x668))) (= (x560 (* x455 32)) x188) (= x455 (x192 x498 32)) (= (= 0 x356) x31) (= (x280 (+ 31 x356)) x498) (= (x280 (+ x409 x668)) x366) (= (x280 (+ x188 32)) x409)) x195) (and (=> (and (not x31) (= x453 (< 31 x356))) (and (=> (and x453 (and (= x201 (x280 (+ x279 x356))) (= x792 (x219 x371 0)) (= (x280 (+ 32 x279)) x787) (= (x629 x792 1) x824) (= (> x201 x787) x353) (= x136 (x742 x792)))) (and (=> (not x353) x202) (=> x353 x28))) (=> (and (and (= x235 (x129 x371)) (= x728 (x192 x235 256)) (= x141 (x560 (* x728 256)))) (not x453)) x473))) (=> x31 x473))) (=> (not x195) x784))) (=> (and (and (= x668 x381) (= (x812 0) x763)) (not x339)) x75))) x256))
(assert (x657 x236))
(assert (=> (>= 10000 x377) (= (x472 x377) (x812 x377))))
(assert (x101 x647))
(assert (= x441 (and x124 (not x382))))
(assert (= x25 (x182 (x472 x25))))
(assert (= x745 (=> (and (and (= x769 (x280 (+ x166 x521))) (= x653 (< 0 x504))) (or (not x653) (and x653 (and x654 (> 4294967296 x662) (= x696 (= (x241 (x472 x247)) x803)) (= x654 (<= x71 (x241 (x472 x571)))) (= x71 (x785 (x472 x571))) (= x803 (x785 (x472 x247))) x696)))) x402)))
(assert (x101 x347))
(assert (x101 x592))
(assert (x643 x780))
(assert (x101 x556))
(assert (x643 (x827 (x280 (+ 160 x671)))))
(assert (x853 x842))
(assert (x101 x138))
(assert (x853 x99))
(assert (x101 x163))
(assert (= (x182 (x812 3917867461)) 3917867461))
(assert (x101 x10))
(assert (x101 x251))
(assert (x101 x692))
(assert (= (=> (and (or (and x575 (and (= 0 x95) (= x302 (ite x29 0 x374)) (= (= 65536 x350) x29) (= (x445 65536 x93) x350))) (and (not x575) (and (= x302 x374) (= x93 x95)))) (= (< x321 x89) x575)) x278) x190))
(assert (x101 x821))
(assert (= (or x497 (and x148 (not x470))) x649))
(assert (x101 x306))
(assert (= (and (not x353) x518) x689))
(assert (= x403 (and x715 x212)))
(assert (x101 x173))
(assert (x760 x100))
(assert (= (x812 1666326814) (x472 1666326814)))
(assert (x643 (x495 x184)))
(assert (= (and x596 x220) x238))
(assert (x101 x605))
(assert (x760 x236))
(assert (x101 x314))
(assert (x101 x535))
(assert (x101 x608))
(assert (= x474 (x182 (x472 x474))))
(assert (x101 x247))
(assert (= (x182 (x472 x541)) x541))
(assert (and (x135 x236 1461501637330902918203684832716283019655932542976) (x66 x236 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x236 1461501637330902918203684832716283019655932542976) (* (x192 x236 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x236)) (x526 x236 1461501637330902918203684832716283019655932542976)))
(assert (and (x135 x254 1461501637330902918203684832716283019655932542976) (x66 x254 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= (+ (x88 x254 1461501637330902918203684832716283019655932542976) (* (x192 x254 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)) x254)) (x526 x254 1461501637330902918203684832716283019655932542976)))
(assert (x684 x100))
(assert (= x588 (and (not x717) x733)))
(assert (= x288 (=> (and (= x807 (x280 (+ x521 96))) (= x435 (not (< 128 x166))) (= x578 (x198 256))) (and x745 x435))))
(assert (x753 x229))
(assert (= (and (not x283) x298) x765))
(assert (x768 x455))
(assert (= (and (not x673) x169) x484))
(assert (x753 x716))
(assert (= x528 (or x689 x375)))
(assert (= x530 (and x228 (not x77))))
(assert (x643 (x827 (x280 (+ 64 x671)))))
(assert (x101 x646))
(assert (= (and x776 x70) x390))
(assert (and (x135 x556 2) (x66 x556 2) (=> (< 0 2) (= (+ (x88 x556 2) (* (x192 x556 2) 2)) x556)) (x526 x556 2)))
(assert (x857 x95))
(assert (x101 x651))
(assert (x101 x234))
(assert (= (and x242 x233) x96))
(assert (x101 x540))
(assert (x753 x254))
(assert (= (and x441 (not x11)) x127))
(assert (x643 (x495 (x280 (+ x184 192)))))
(assert (= x563 (and (not x422) x132)))
(assert (= (and (not x78) x762) x110))
(assert (x101 x43))
(assert (x760 x468))
(assert (= x274 (or x674 x528 x309)))
(check-sat)
(exit)
