(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x188 0)) (((x148 (x106 x188) (x87 x188) (x32 Int)) (x276 (x184 Int)) (x89 (x120 x188) (x292 Int)) (x159 (x277 x188) (x227 x188) (x289 x188) (x24 x188) (x259 Int)))))
(declare-fun x314 () Bool)
(declare-fun x257 () Bool)
(declare-fun x78 () Int)
(declare-fun x92 (Int) Bool)
(declare-fun x79 () Int)
(declare-fun x287 () Bool)
(declare-fun x111 () x188)
(declare-fun x30 () Bool)
(declare-fun x248 () x188)
(declare-fun x52 () Bool)
(declare-fun x139 () Bool)
(declare-fun x144 (Int) Int)
(declare-fun x196 (Int Int) Int)
(declare-fun x204 () Int)
(declare-fun x299 () Int)
(declare-fun x234 () Int)
(declare-fun x170 () Int)
(declare-fun x209 () Int)
(declare-fun x40 () Bool)
(declare-fun x36 () Int)
(declare-fun x41 () Int)
(declare-fun x65 () Int)
(declare-fun x116 (Int Int) Int)
(declare-fun x130 () Bool)
(declare-fun x286 () Int)
(declare-fun x104 () Int)
(declare-fun x240 () Int)
(declare-fun x291 () Bool)
(declare-fun x280 () Int)
(declare-fun x206 () Int)
(declare-fun x222 () Int)
(declare-fun x131 () Int)
(declare-fun x31 () Int)
(declare-fun x93 (x188) Int)
(declare-fun x265 () Int)
(declare-fun x154 () Bool)
(declare-fun x42 () Int)
(declare-fun x316 () Int)
(declare-fun x263 () Int)
(declare-fun x306 () Bool)
(declare-fun x268 () Int)
(declare-fun x117 () Int)
(declare-fun x48 () Int)
(declare-fun x1 () Int)
(declare-fun x38 () x188)
(declare-fun x121 () Int)
(declare-fun x195 () Int)
(declare-fun x39 () x188)
(declare-fun x77 () Bool)
(declare-fun x102 (Int Int) Int)
(declare-fun x302 () Int)
(declare-fun x238 () Int)
(declare-fun x228 (x188) Int)
(declare-fun x294 () Int)
(declare-fun x162 () Int)
(declare-fun x151 () Bool)
(declare-fun x62 () Bool)
(declare-fun x110 () Bool)
(declare-fun x233 () Int)
(declare-fun x85 () Int)
(declare-fun x258 () Bool)
(declare-fun x112 () x188)
(declare-fun x317 () Int)
(declare-fun x224 () Int)
(declare-fun x140 () Int)
(declare-fun x212 () x188)
(declare-fun x262 () Int)
(declare-fun x216 () Int)
(declare-fun x264 () x188)
(declare-fun x29 () Bool)
(declare-fun x147 () Int)
(declare-fun x284 (Int) Int)
(declare-fun x94 (Int Int) Int)
(declare-fun x177 () Int)
(declare-fun x133 () Bool)
(declare-fun x103 () Int)
(declare-fun x290 () Int)
(declare-fun x91 () Bool)
(declare-fun x16 () Bool)
(declare-fun x237 () Bool)
(declare-fun x161 () Bool)
(declare-fun x226 () Int)
(declare-fun x58 () Int)
(declare-fun x125 () Bool)
(declare-fun x45 () Bool)
(declare-fun x108 () Bool)
(declare-fun x14 () Int)
(declare-fun x46 (Int) x188)
(declare-fun x37 () x188)
(declare-fun x274 () Bool)
(declare-fun x229 () x188)
(declare-fun x185 () x188)
(declare-fun x197 () Bool)
(declare-fun x255 () Int)
(declare-fun x213 () Int)
(declare-fun x293 () x188)
(declare-fun x13 () Bool)
(declare-fun x7 () Int)
(declare-fun x200 () Int)
(declare-fun x203 () Int)
(declare-fun x18 () Int)
(declare-fun x99 () Int)
(declare-fun x53 () Int)
(declare-fun x97 () Int)
(declare-fun x123 () Int)
(declare-fun x218 () Bool)
(declare-fun x281 () Int)
(declare-fun x124 () Int)
(declare-fun x160 () Bool)
(declare-fun x20 () Int)
(declare-fun x236 () x188)
(declare-fun x49 () Bool)
(declare-fun x127 () Int)
(declare-fun x308 () x188)
(declare-fun x272 () Bool)
(declare-fun x189 () Bool)
(declare-fun x95 () Int)
(declare-fun x279 () Int)
(declare-fun x101 () Bool)
(declare-fun x223 () Int)
(declare-fun x73 () Bool)
(declare-fun x303 () Int)
(declare-fun x254 () Int)
(declare-fun x8 () Int)
(declare-fun x153 () x188)
(declare-fun x166 () Bool)
(declare-fun x235 () Int)
(declare-fun x6 (x188) Int)
(declare-fun x174 () Int)
(declare-fun x191 () Int)
(declare-fun x300 (Int Int) Int)
(declare-fun x305 () Int)
(declare-fun x178 () Int)
(declare-fun x225 () Bool)
(declare-fun x217 (x188) Int)
(declare-fun x175 () Bool)
(declare-fun x27 () Bool)
(declare-fun x114 () Int)
(declare-fun x295 () x188)
(declare-fun x246 () Bool)
(declare-fun x245 () Int)
(declare-fun x158 (x188) Int)
(declare-fun x47 () Bool)
(declare-fun x9 () Int)
(declare-fun x86 () Int)
(declare-fun x275 () Bool)
(declare-fun x252 () Int)
(declare-fun x298 () Bool)
(declare-fun x4 (Int Int) Int)
(declare-fun x50 (Int) Int)
(declare-fun x43 () Int)
(declare-fun x205 () Int)
(declare-fun x64 () Bool)
(declare-fun x141 () Int)
(declare-fun x309 () Int)
(declare-fun x119 () Int)
(declare-fun x152 () x188)
(declare-fun x34 (x188) Int)
(declare-fun x81 () Bool)
(declare-fun x22 () Int)
(declare-fun x215 () Int)
(declare-fun x17 () Int)
(declare-fun x2 (Int Int) Int)
(declare-fun x320 () Int)
(declare-fun x172 () Int)
(declare-fun x10 () Int)
(declare-fun x146 () Int)
(declare-fun x164 () Bool)
(declare-fun x122 () Int)
(declare-fun x88 () Bool)
(declare-fun x118 () x188)
(declare-fun x57 () Int)
(declare-fun x319 () Int)
(declare-fun x244 () Int)
(declare-fun x33 () Int)
(declare-fun x210 () Int)
(declare-fun x75 () Int)
(declare-fun x310 () Int)
(declare-fun x192 () Int)
(declare-fun x59 () x188)
(declare-fun x107 () Int)
(declare-fun x182 () Int)
(declare-fun x132 () Int)
(declare-fun x138 () Int)
(declare-fun x231 () Bool)
(declare-fun x142 () Int)
(declare-fun x83 () Int)
(declare-fun x54 () Int)
(declare-fun x96 () Bool)
(declare-fun x273 () Bool)
(declare-fun x126 (Int Int) Int)
(declare-fun x181 () Int)
(declare-fun x220 () Bool)
(declare-fun x269 (x188) Int)
(declare-fun x239 (Int Int) Int)
(declare-fun x179 () Int)
(declare-fun x202 () Bool)
(declare-fun x186 () Bool)
(declare-fun x25 () Int)
(declare-fun x11 () Int)
(declare-fun x137 () x188)
(declare-fun x321 () Int)
(declare-fun x241 () Bool)
(declare-fun x12 () x188)
(declare-fun x283 () Int)
(declare-fun x278 () Bool)
(declare-fun x251 () Int)
(declare-fun x266 () x188)
(declare-fun x60 () Int)
(declare-fun x113 () Int)
(declare-fun x169 (x188) Int)
(declare-fun x143 () Int)
(declare-fun x267 () Int)
(declare-fun x129 () Int)
(declare-fun x288 () Bool)
(declare-fun x260 () Int)
(declare-fun x5 () Int)
(declare-fun x230 () Int)
(declare-fun x232 () Int)
(declare-fun x313 () Bool)
(declare-fun x301 () Int)
(declare-fun x71 () Int)
(declare-fun x221 () Int)
(declare-fun x74 () Int)
(define-fun x261 ((x188 x188) (x296 Int)) x188 (ite ((_ is x89) x188) (x89 (x120 x188) (+ (x292 x188) x296)) (ite ((_ is x159) x188) (x159 (x277 x188) (x227 x188) (x289 x188) (x24 x188) (+ x296 (x259 x188))) (ite ((_ is x148) x188) (x148 (x106 x188) (x87 x188) (+ x296 (x32 x188))) (x276 (+ (x184 x188) x296))))))
(define-fun x76 ((x28 Int)) Int (ite (and (>= x28 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x28)) x28 (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x128 ((x28 Int)) Int (ite (and (>= x28 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x28)) (+ x28 115792089237316195423570985008687907853269984665640564039457584007913129639936) x28))
(define-fun x155 ((x28 Int)) Int (ite (and (>= x28 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x28)) x28 (ite (and (< x28 231584178474632390847141970017375815706539969331281128078915168015826259279872) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x28)) (- x28 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x28) (< x28 0)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x28) (x116 x28 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x115 ((x311 Int)) Bool (and (< x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x311 0)))
(define-fun x135 ((x311 Int) (x51 Int)) Bool (=> (and (> x51 0) (< 0 x311)) (and (>= x311 (x196 x311 x51)) (>= (x196 x311 x51) 0))))
(define-fun x168 ((x311 Int) (x51 Int)) Bool (=> (and (and (<= 0 x311) (< x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (< x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 1 x51))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x196 x311 x51)) (<= 0 (x196 x311 x51)))))
(define-fun x70 ((x311 Int) (x51 Int)) Bool (=> (and (< x51 x311) (< 1 x51)) (> x311 (x196 x311 x51))))
(define-fun x190 ((x311 Int) (x51 Int)) Bool (=> (and (> x51 0) (> x311 0)) (= (< x311 x51) (= 0 (x196 x311 x51)))))
(define-fun x271 ((x311 Int)) Bool (= 0 (x196 0 x311)))
(define-fun x67 ((x311 Int)) Bool (= x311 (x196 x311 1)))
(define-fun x183 ((x311 Int)) Bool (=> (not (= 0 x311)) (= (x196 x311 x311) 1)))
(define-fun x134 ((x311 Int)) Bool (and (x183 x311) (x271 x311) (x67 x311)))
(define-fun x56 ((x311 Int)) Bool (and (= x311 (x300 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311)) (= x311 (x300 x311 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x249 ((x311 Int)) Bool (and (= (x300 0 x311) 0) (= (x300 x311 0) 0)))
(define-fun x297 ((x311 Int)) Bool (= x311 (x300 x311 x311)))
(define-fun x214 ((x311 Int)) Bool (and (x297 x311) (x249 x311) (x56 x311)))
(define-fun x163 ((x311 Int) (x51 Int)) Bool (= (x300 x311 x51) (x300 x51 x311)))
(define-fun x201 ((x311 Int) (x51 Int)) Bool (and (=> (>= x51 0) (>= x51 (x300 x311 x51))) (>= (x300 x311 x51) 0) (=> (<= 0 x311) (>= x311 (x300 x311 x51)))))
(define-fun x318 ((x311 Int) (x51 Int)) Bool (and (x201 x311 x51) (x163 x311 x51)))
(define-fun x199 ((x311 Int)) Bool (= (x300 x311 255) (x116 x311 256)))
(define-fun x44 ((x311 Int)) Bool (and (x318 x311 255) (x199 x311)))
(define-fun x250 ((x311 Int) (x51 Int)) Bool (and (> x51 (x116 x311 x51)) (<= 0 (x116 x311 x51))))
(define-fun x198 ((x311 Int) (x51 Int)) Bool (=> (and (<= 0 x311) (< 0 x51)) (= (= (x116 x311 x51) x311) (> x51 x311))))
(define-fun x26 ((x311 Int) (x51 Int)) Bool (=> (and (and (>= x311 x51) (> (+ x51 x51) x311)) (> x51 0)) (= (x116 x311 x51) (- x311 x51))))
(define-fun x256 ((x311 Int)) Bool (= (x116 0 x311) 0))
(define-fun x63 ((x311 Int)) Bool (= 0 (x116 x311 1)))
(define-fun x171 ((x311 Int)) Bool (= 0 (x116 x311 x311)))
(define-fun x247 ((x311 Int)) Bool (and (x63 x311) (x256 x311) (x171 x311)))
(define-fun x100 ((x311 Int) (x51 Int)) Bool (=> (and (< 0 x51) (> x311 0)) (= (< (x239 x311 x51) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x51 (x196 (x155 (x239 x311 x51)) x311)))))
(define-fun x105 ((x311 Int) (x51 Int)) Bool (=> (and (not (= 0 x311)) (not (= 0 x51))) (and (= x311 (x196 (x239 x311 x51) x51)) (= x51 (x196 (x239 x311 x51) x311)))))
(define-fun x208 ((x311 Int) (x51 Int)) Bool (=> (and (< 0 x51) (> x311 0)) (= (< (x196 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) x51) (> (x239 x311 x51) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x150 ((x311 Int) (x51 Int)) Bool (and (= (x155 (x239 x311 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x155 (x239 x311 x51))) (= (x155 (x239 (- x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x155 (x239 x311 x51))) (= (x155 (x239 (- x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) x51)) (x155 (x239 x311 x51)))))
(define-fun x90 ((x311 Int) (x51 Int)) Bool (and (=> (and (and (<= x311 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x311 0)) (and (> x51 0) (<= x51 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x196 57896044618658097711785492504343953926634992332820282019728792003956564819967 x51) x311) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x239 x311 x51)))) (=> (and (and (> x51 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x51 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (<= x311 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x311 0))) (= (>= (x239 x311 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51) (x196 57896044618658097711785492504343953926634992332820282019728792003956564819968 x311)))) (=> (and (and (<= x51 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x51 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x311) (<= x311 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x196 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x51)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x311)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x239 (- x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (< 0 x51) (<= x51 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x311) (<= x311 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x311) (x196 57896044618658097711785492504343953926634992332820282019728792003956564819968 x51)) (>= (x239 (- x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) x51) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968))))))
(define-fun x211 ((x311 Int)) Bool (and (= (x239 x311 0) 0) (= (x239 0 x311) 0)))
(define-fun x19 ((x311 Int)) Bool (and (= x311 (x239 x311 1)) (= (x239 1 x311) x311)))
(define-fun x61 ((x311 Int)) Bool (and (x211 x311) (x19 x311)))
(define-fun x315 ((x311 Int)) Bool (= (x300 x311 26959946667150639794667015087019630673637144422540572481103610249215) (x116 x311 26959946667150639794667015087019630673637144422540572481103610249216)))
(define-fun x55 ((x311 Int)) Bool (and (x315 x311) (x318 x311 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x193 ((x311 Int)) Bool (= (x300 x311 1461501637330902918203684832716283019655932542975) (x116 x311 1461501637330902918203684832716283019655932542976)))
(define-fun x82 ((x311 Int)) Bool (and (x318 x311 1461501637330902918203684832716283019655932542975) (x193 x311)))
(define-fun x156 ((x311 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x102 x311 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x102 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x66 ((x311 Int)) Bool (and (= (x102 0 x311) x311) (= (x102 x311 0) x311)))
(define-fun x157 ((x311 Int)) Bool (= (x102 x311 x311) x311))
(define-fun x68 ((x311 Int)) Bool (and (x66 x311) (x157 x311) (x156 x311)))
(define-fun x285 ((x311 Int) (x51 Int)) Bool (= (x102 x311 x51) (x102 x51 x311)))
(define-fun x207 ((x311 Int) (x51 Int)) Bool (and (=> (<= 0 x51) (>= (x102 x311 x51) x51)) (=> (>= x311 0) (>= (x102 x311 x51) x311)) (<= (x102 x311 x51) (+ x51 x311))))
(define-fun x187 ((x311 Int) (x51 Int)) Bool (and (x207 x311 x51) (x285 x311 x51)))
(define-fun x165 ((x149 Int)) Int (x284 x149))
(define-fun x304 ((x149 Int)) Int (ite (= x149 164) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x50 x149)))
(define-fun x173 ((x149 Int)) Int (ite (= x149 128) 36 (x304 x149)))
(define-fun x35 ((x149 Int)) Int (ite (= x149 160) x60 (x173 x149)))
(define-fun x312 ((x149 Int)) Int (ite (= 232 x149) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x35 x149)))
(define-fun x242 ((x149 Int)) Int (ite (= 196 x149) 36 (x312 x149)))
(define-fun x23 ((x149 Int)) Int (ite (= x149 228) x215 (x242 x149)))
(define-fun x15 ((x149 Int)) Int (ite x110 (x35 x149) (x23 x149)))
(define-fun x270 ((x149 Int)) Int (ite (= x149 x138) 0 (x15 x149)))
(define-fun x136 ((x149 Int)) Int (ite (= x149 x182) x309 (x270 x149)))
(define-fun x109 ((x149 Int)) Int (ite (= x149 x319) x121 (x136 x149)))
(define-fun x176 ((x149 Int)) Int (ite x288 (x50 x149) (ite x151 (x15 x149) (x109 x149))))
(define-fun x84 ((x149 Int)) Int (ite (= x149 x305) x18 (x176 x149)))
(define-fun x180 ((x149 Int)) Int (ite (= x149 x303) x222 (x84 x149)))
(define-fun x282 ((x149 Int)) Int (ite (= x209 x149) x281 (x180 x149)))
(define-fun x72 ((x149 Int)) Int (ite (= x149 x41) x97 (x282 x149)))
(define-fun x243 ((x149 Int)) Int (ite (and (> (+ x321 x252) x149) (<= x252 x149)) (x284 (+ (- x149 x252) x251)) (x72 x149)))
(define-fun x98 ((x149 Int)) Int (ite (= x124 x149) 0 (x243 x149)))
(define-fun x219 ((x149 x188)) Int (ite (= x266 x149) x206 (x269 x149)))
(define-fun x80 ((x311 Int)) Bool (=> (and (not (= x311 904250603428552709895185118199468575982109441609966099573332780532423983104)) (not (= 464684736 x311)) (not (= x311 18446744073709551615)) (not (= x311 388749022)) (not (= x311 2510660263)) (not (= 26959946667150639794667015087019630673637144422540572481103610249215 x311)) (not (= 292666793 x311)) (not (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 x311)) (not (= 1461501637330902918203684832716283019655932542975 x311)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311)) (> x311 10000)) (not ((_ is x276) (x46 x311)))))
(assert (x115 x206))
(assert (x115 x310))
(assert (x61 79228162514264337593543950336))
(assert (= x96 (=> (and (< 0 x48) (= x20 x209)) x64)))
(assert (and (x250 x22 26959946667150639794667015087019630673637144422540572481103610249216) (=> (< 0 26959946667150639794667015087019630673637144422540572481103610249216) (= x22 (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x196 x22 26959946667150639794667015087019630673637144422540572481103610249216)) (x116 x22 26959946667150639794667015087019630673637144422540572481103610249216)))) (x26 x22 26959946667150639794667015087019630673637144422540572481103610249216) (x198 x22 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x115 x103))
(assert (x115 x290))
(assert (and (x150 32 x97) (and (= (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x97 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 32 (- x97 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x97 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x239 32 (- x97 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x97 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32)) (= (- (* 32 x97) (* x97 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x97))) (x208 32 x97) (x100 32 x97) (= (x239 32 x97) (* x97 32)) (x90 32 x97) (x105 32 x97)))
(assert (x134 256))
(assert (= (x50 228) 0))
(assert (x247 x230))
(assert (x115 x226))
(assert (x80 x85))
(assert (and (x250 x245 26959946667150639794667015087019630673637144422540572481103610249216) (=> (< 0 26959946667150639794667015087019630673637144422540572481103610249216) (= x245 (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x196 x245 26959946667150639794667015087019630673637144422540572481103610249216)) (x116 x245 26959946667150639794667015087019630673637144422540572481103610249216)))) (x26 x245 26959946667150639794667015087019630673637144422540572481103610249216) (x198 x245 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x318 x8 x234))
(assert (let ((x51 (x126 2 x36))) (and (x150 1 x51) (and (= (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x239 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (- (* 1 x51) (* x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x51))) (x208 1 x51) (x100 1 x51) (= (x239 1 x51) (* x51 1)) (x90 1 x51) (x105 1 x51))))
(assert (x134 x54))
(assert (x115 x7))
(assert (x115 x316))
(assert (= x203 (x217 (x46 x203))))
(assert (x44 x54))
(assert (x80 x122))
(assert (= (x217 (x46 x302)) x302))
(assert (x61 x65))
(assert (= x313 (or x101 x110)))
(assert (= (x276 18446744073709551615) (x46 18446744073709551615)))
(assert (let ((x311 (ite (> 256 x79) (x126 2 x79) 0))) (and (x250 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x311 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x196 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x116 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x26 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x198 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x196 x18 256) (x94 x18 8)))
(assert (x115 x17))
(assert (x115 x71))
(assert (= (x217 (x46 x174)) x174))
(assert (x115 x200))
(assert (x115 x245))
(assert (x214 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (=> (>= 10000 x262) (= (x46 x262) (x276 x262))))
(assert (x80 x230))
(assert (=> (<= x58 10000) (= (x46 x58) (x276 x58))))
(assert (x115 x309))
(assert (x115 x299))
(assert (x214 x127))
(assert (let ((x311 (ite (< x213 256) (x126 2 x213) 0))) (and (x250 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x311 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x196 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x116 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x26 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x198 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (=> (<= x320 10000) (= (x276 x320) (x46 x320))))
(assert (x115 x174))
(assert (x55 x22))
(assert (x115 x48))
(assert (= x291 true))
(assert (x115 x129))
(assert (x214 x280))
(assert (let ((x51 (x126 2 x200))) (and (x150 1 x51) (and (= (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x239 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (- (* 1 x51) (* x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x51))) (x208 1 x51) (x100 1 x51) (= (x239 1 x51) (* x51 1)) (x90 1 x51) (x105 1 x51))))
(assert (= x58 (x217 (x46 x58))))
(assert (x115 x294))
(assert (x115 x140))
(assert (x115 x213))
(assert (=> (>= 10000 x302) (= (x46 x302) (x276 x302))))
(assert (x247 x54))
(assert (x115 x267))
(assert (x115 x141))
(assert (x115 x203))
(assert (= (and x314 x273) x298))
(assert (= (x50 160) 0))
(assert (x115 x131))
(assert (= (x50 x319) 0))
(assert (= (x4 1 x36) (x155 (ite (> 256 x36) (x126 2 x36) 0))))
(assert (x115 x172))
(assert (=> (<= x122 10000) (= (x46 x122) (x276 x122))))
(assert (x61 (x126 2 x36)))
(assert (=> (<= x179 10000) (= (x276 x179) (x46 x179))))
(assert (= (and x275 x313) x151))
(assert (x115 x320))
(assert (x115 x95))
(assert (x115 x54))
(assert (x115 x85))
(assert (x247 (ite (> 256 x200) (x126 2 x200) 0)))
(assert (x61 1))
(assert (x80 x203))
(assert (= x91 (and x27 (not x133))))
(assert (x115 x286))
(assert (and (x168 x54 256) (=> (and (< 0 x54) (< 0 256)) (and (< (- x54 256) (* 256 (x196 x54 256))) (>= x54 (* 256 (x196 x54 256))))) (x70 x54 256) (x135 x54 256) (x190 x54 256) (= (* (x196 x54 256) 256) (- x54 (x300 255 x54)))))
(assert (x115 x142))
(assert (x80 x86))
(assert (x115 x221))
(assert (x115 x255))
(assert (= x9 (x217 (x46 x9))))
(assert (x134 x18))
(assert (x80 (x94 x222 96)))
(assert (x318 x265 x107))
(assert (x115 x170))
(assert (x115 x107))
(assert (= (x46 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x276 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x217 (x46 x18)) x18))
(assert (x115 x11))
(assert (x214 1461501637330902918203684832716283019655932542975))
(assert (x115 x205))
(assert (= (and (not x49) x291) x45))
(assert (= (x217 (x46 x85)) x85))
(assert (x115 x254))
(assert (x115 x210))
(assert (x115 x119))
(assert (x214 x8))
(assert (x247 x127))
(assert (= 0 (x50 x205)))
(assert (x214 x18))
(assert (= (x217 (x46 x191)) x191))
(assert (= (x46 26959946667150639794667015087019630673637144422540572481103610249215) (x276 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x115 x75))
(assert (and (x250 x43 26959946667150639794667015087019630673637144422540572481103610249216) (=> (< 0 26959946667150639794667015087019630673637144422540572481103610249216) (= x43 (+ (* 26959946667150639794667015087019630673637144422540572481103610249216 (x196 x43 26959946667150639794667015087019630673637144422540572481103610249216)) (x116 x43 26959946667150639794667015087019630673637144422540572481103610249216)))) (x26 x43 26959946667150639794667015087019630673637144422540572481103610249216) (x198 x43 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x115 x146))
(assert (x115 x260))
(assert (x115 x9))
(assert (x68 x7))
(assert (= (x217 (x261 x38 3)) (+ (x217 x38) 3)))
(assert (and (x250 x54 256) (=> (< 0 256) (= x54 (+ (* 256 (x196 x54 256)) (x116 x54 256)))) (x26 x54 256) (x198 x54 256)))
(assert (x55 x43))
(assert (x247 x18))
(assert (x115 x14))
(assert (=> (>= 10000 x172) (= (x46 x172) (x276 x172))))
(assert (x134 x222))
(assert (= (x217 (x276 464684736)) 464684736))
(assert (= x288 (and x291 x49)))
(assert (= (x46 292666793) (x276 292666793)))
(assert (= 388749022 (x217 (x276 388749022))))
(assert (= (x217 (x276 904250603428552709895185118199468575982109441609966099573332780532423983104)) 904250603428552709895185118199468575982109441609966099573332780532423983104))
(assert (x115 x283))
(assert (x214 x268))
(assert (x247 1461501637330902918203684832716283019655932542976))
(assert (= (x217 (x46 x262)) x262))
(assert (= (x217 (x46 x86)) x86))
(assert (=> (<= x210 10000) (= (x46 x210) (x276 x210))))
(assert (x115 x216))
(assert (x115 x79))
(assert (x115 x33))
(assert (x80 x58))
(assert (x80 x172))
(assert (x115 x60))
(assert (not x257))
(assert (x247 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x115 x192))
(assert (x115 x223))
(assert (x115 x65))
(assert (x134 79228162514264337593543950336))
(assert (x214 x107))
(assert (= (=> (and (= (not (< 1 x31)) x161) (= (x98 x41) x31)) (and x161 (=> (= x236 x111) x164))) x73))
(assert (x115 x53))
(assert (x214 x54))
(assert (= x320 (x217 (x46 x320))))
(assert (x214 x230))
(assert (=> (<= x191 10000) (= (x276 x191) (x46 x191))))
(assert (= (x155 (ite (< x79 256) (x126 2 x79) 0)) (x4 1 x79)))
(assert (= (x217 (x46 x172)) x172))
(assert (x115 x204))
(assert (x318 x280 x268))
(assert (x44 x18))
(assert (x80 x9))
(assert (x115 x303))
(assert (x115 x122))
(assert (=> (>= 10000 x203) (= (x46 x203) (x276 x203))))
(assert (x115 x305))
(assert (x214 x234))
(assert (= (+ (x217 x229) 3) (x217 (x261 x229 3))))
(assert (x115 x117))
(assert (= (x217 (x261 x12 1)) (+ (x217 x12) 1)))
(assert (x115 x317))
(assert (x80 x191))
(assert (x115 x230))
(assert (=> (>= 10000 x85) (= (x46 x85) (x276 x85))))
(assert (= x122 (x217 (x46 x122))))
(assert (= (x217 (x276 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x115 x251))
(assert (x115 x132))
(assert (x115 x279))
(assert (x115 x319))
(assert (=> (>= 10000 x18) (= (x46 x18) (x276 x18))))
(assert (x115 x280))
(assert (=> (<= x174 10000) (= (x276 x174) (x46 x174))))
(assert (x115 x234))
(assert (= x175 (=> (and (= x275 (= x142 0)) (or (and x275 (and (= x48 x142) (= x20 x182))) (and (not x275) (and (= x83 (x76 (+ x138 32))) (= x48 (ite x154 x286 (ite (> x238 0) 1 0))) (= (x128 (- x83 x182)) x33) (= x309 (x128 (- x33 32))) (= x286 1) (= x138 (x76 (+ x182 36))) (= x287 (x92 0)) (= false x154) (= (x76 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x53)) x121) (= (x300 26959946667150639794667015087019630673637144422540572481103610249215 x22) x53) (= x22 (x136 x319)) (= (ite x287 1 0) x238) (= x83 x20) (= (x76 (+ 32 x182)) x319))))) x96)))
(assert (= (x46 (x217 x185)) x185))
(assert (x115 x18))
(assert (x115 x78))
(assert (x115 x1))
(assert (let ((x311 (* 79228162514264337593543950336 x65))) (and (x250 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x311 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x196 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x116 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x26 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x198 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x115 x262))
(assert (x115 x57))
(assert (x115 x20))
(assert (x115 x321))
(assert (= x225 (and x314 (not x273))))
(assert (= x202 (or x91 x241)))
(assert (= x179 (x217 (x46 x179))))
(assert (= x314 (and x133 x27)))
(assert (x247 (ite (> 256 x36) (x126 2 x36) 0)))
(assert (x115 x209))
(assert (x115 x25))
(assert (x115 x215))
(assert (x44 x127))
(assert (=> (>= 10000 (x94 x222 96)) (= (x276 (x94 x222 96)) (x46 (x94 x222 96)))))
(assert (x214 x245))
(assert (x115 x127))
(assert (x115 x195))
(assert (x115 x31))
(assert (= (x94 x54 8) (x196 x54 256)))
(assert (= (x94 x127 8) (x196 x127 256)))
(assert (x61 (x126 2 x200)))
(assert (= (and x45 x218) x110))
(assert (= (+ (x217 x229) 1) (x217 (x261 x229 1))))
(assert (and (x150 x65 79228162514264337593543950336) (and (= (x239 (- x65 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (- (* x65 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (- 13407807929942597099574024998205846127479365820583219383259601157675320746492338629038688038210230303195081502828938359349399943579666495733993146259865600))) (= (x239 x65 (- 115792089237316195423570985008687907853269984665561335876943319670319585689600)) (* (- 115792089237316195423570985008687907853269984665561335876943319670319585689600) x65)) (= (- (* x65 79228162514264337593543950336) 9173994463960286046443283581208347763186259956673124494950355357547691504353939232280074212440502746218496) (x239 (- x65 115792089237316195423570985008687907853269984665640564039457584007913129639936) 79228162514264337593543950336))) (x208 x65 79228162514264337593543950336) (x100 x65 79228162514264337593543950336) (= (x239 x65 79228162514264337593543950336) (* 79228162514264337593543950336 x65)) (x90 x65 79228162514264337593543950336) (x105 x65 79228162514264337593543950336)))
(assert (= x164 (=> (and (and (= (not (= x78 0)) x197) (= x40 x197) (= (or x40 (not x52)) x13)) (and (= (x300 255 x54) x200) (= x52 x274) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x8) (= x206 (x102 x7 x14)) (= x306 (= x123 0)) (= x234 (x4 1 x200)) (= x123 (x300 x8 x234)) (= x191 x143) (= x266 (x148 (x46 x210) x152 0)) (= x111 (x46 x58)) (= x78 (ite x220 1 0)) (>= x7 0) (= 464684736 x117) (not (= x117 292666793)) (= x139 (not x306)) (not (= x117 388749022)) (= x210 (x94 x18 8)) (= (not x272) x220) (= x8 (x219 x39)) (> 2510660263 x117) (= (x94 x54 8) x262) (= (x148 (x46 x191) x264 0) x308) (= x14 (x4 1 x36)) (= x122 x232) (= (x300 255 x18) x36) (= (x261 x308 3) x212) (= (x269 x266) x7) (= (x148 (x46 x262) x212 0) x39) (= (x148 (x46 x122) (x276 1) 0) x264) (<= x122 1461501637330902918203684832716283019655932542975) (>= x8 0) (> x233 0) (= x17 x54) (= (x93 (x46 x141)) x233) (<= x7 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (not x139) x272))) x13)))
(assert (x115 x124))
(assert (x134 x127))
(assert (x80 x141))
(assert (x115 x302))
(assert (x61 (x126 2 x79)))
(assert (let ((x51 (x126 2 x213))) (and (x150 1 x51) (and (= (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x239 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (- (* 1 x51) (* x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x51))) (x208 1 x51) (x100 1 x51) (= (x239 1 x51) (* x51 1)) (x90 1 x51) (x105 1 x51))))
(assert (x80 x262))
(assert (let ((x51 (x126 2 x79))) (and (x150 1 x51) (and (= (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x239 1 (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x51 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) (= (- (* 1 x51) (* x51 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x239 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x51))) (x208 1 x51) (x100 1 x51) (= (x239 1 x51) (* x51 1)) (x90 1 x51) (x105 1 x51))))
(assert (= (x217 (x46 x230)) x230))
(assert (= x101 (and x45 (not x218))))
(assert (x247 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x115 x233))
(assert (= (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x1) (not (> x316 18446744073709551615)) (= x299 x177) (= (x148 (x46 x230) (x276 4) 0) x118) (= x263 x320) (not (= x95 292666793)) (= (x158 x118) x131) (<= x267 1461501637330902918203684832716283019655932542975) (= x231 (not (= x74 0))) (= x230 x235) (= x95 388749022) (= x231 x274) (>= 1461501637330902918203684832716283019655932542975 x10) (not (< 18446744073709551615 x97)) (>= x140 0) (<= x230 1461501637330902918203684832716283019655932542975) (= x114 0) (= x294 x114) (and (< 131 x317) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x317))) (= x18 x75) (not (> 4 x317)) (= x71 x10) (= x223 (x128 (- x317 4))) (= x230 x129) (not (> x57 x317)) (= x57 (x76 (+ x251 x132))) (< 0 x226) (< x95 2510660263) (= (x93 (x46 x141)) x226) (= (x155 (* x97 32)) x132) (= x254 x320) (= (x76 (+ x178 31)) x290) (>= x1 0) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x317) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x290)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x317) (<= x290 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x317 x290))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (not (= 2 x140)) (= x178 (x76 (+ x240 4))) (<= x131 255) (= x316 x240) (= x97 (x284 x178)) (= x192 x71) (<= 0 x131) (= x65 x1) (<= 0 x10) (< x131 256) (>= x267 0) (not (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x223) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x223)) (> 128 x223)))) (= (x76 (+ 32 x178)) x251) (= x49 (< 0 x131))) (and (<= 0 x99) (= x108 (< 0 (x93 (x46 x141)))) (= (x4 1 x213) x107) (>= x25 0) (= false x30) (<= x232 1461501637330902918203684832716283019655932542975) (<= x9 1461501637330902918203684832716283019655932542975) (= (> (x93 (x46 x302)) 0) x166) (= x232 x9) (= x203 (x94 x127 8)) (= x65 x283) (= x295 (x261 x38 3)) (= (= 0 x204) x81) (>= 1461501637330902918203684832716283019655932542975 x283) (= x127 x17) (= x204 (x300 x265 x107)) (>= x232 0) (> x172 0) (= (x6 (x46 x141)) x113) (<= 0 x221) x29 (<= 0 x113) (= false x237) (<= 0 x265) (< 0 x141) (= x248 (x148 (x46 x203) x295 0)) (> 2510660263 x310) (= x16 (not x77)) (<= x5 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x172) (= x224 388749022) (= x174 x143) (= 4 x181) (not (= x310 388749022)) (= x29 (> (x93 (x46 x172)) 0)) (= x130 false) (= x265 (x269 x248)) (not (= x141 x172)) (= x216 x5) (= x88 false) (= (not x16) x258) (>= 1461501637330902918203684832716283019655932542975 x141) (> x302 0) (= (x300 255 x127) x213) (not (= 292666793 x310)) (<= x99 1461501637330902918203684832716283019655932542975) (= x293 (x148 (x46 x9) (x276 1) 0)) (= (x93 (x46 x141)) x146) (not (= x302 x141)) (= (not x81) x77) (not (= x172 x302)) (>= x5 0) (= 464684736 x310) (>= x283 0) (<= x265 115792089237316195423570985008687907853269984665640564039457584007913129639935) x108 (= x221 (x6 (x46 x302))) (= (x6 (x46 x172)) x25) (> x146 0) (>= 1461501637330902918203684832716283019655932542975 x302) x166 (= x74 (ite x258 1 0)) (= (x148 (x46 x174) x293 0) x38))) (and (=> (and (not x49) (and (and (= (ite (> (ite x160 1 0) 0) 1 0) x104) (= x301 (x300 26959946667150639794667015087019630673637144422540572481103610249215 x43)) (= (x76 (+ x301 904250603428552709895185118199468575982109441609966099573332780532423983104)) x60) (= x43 (x173 160)) (= (x92 904250603428552709895185118199468575982109441609966099573332780532423983104) x160) (= (= x104 0) x218)) (or (and x218 (and (= x182 196) (= x104 x142))) (and (not x218) (and (= x162 1) (= (x76 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x119)) x215) (= x62 (= x260 0)) (= x255 (ite x186 1 0)) (= (x300 26959946667150639794667015087019630673637144422540572481103610249215 x245) x119) (= x260 (ite x189 x162 (ite (> x255 0) 1 0))) (= (x92 115792089210356248756420345214020892766250353992003419616917011526809519390720) x186) (= x245 (x242 228)) (= 264 x182) (= (ite x62 1 0) x142) (= false x189)))))) x175) (=> (and (= 128 x209) x49) x64))) x257))
(assert (= (x217 (x46 x210)) x210))
(assert (= (x276 388749022) (x46 388749022)))
(assert (and (x168 x127 256) (=> (and (< 0 x127) (< 0 256)) (and (< (- x127 256) (* 256 (x196 x127 256))) (>= x127 (* 256 (x196 x127 256))))) (x70 x127 256) (x135 x127 256) (x190 x127 256) (= (* (x196 x127 256) 256) (- x127 (x300 255 x127)))))
(assert (x115 x179))
(assert (x115 x42))
(assert (x115 x41))
(assert (and (= (x126 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x126 2 73) 9444732965739290427392) (= 137438953472 (x126 2 37)) (= 36028797018963968 (x126 2 55)) (= 2417851639229258349412352 (x126 2 81)) (= (x126 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x126 2 22) 4194304) (= 4722366482869645213696 (x126 2 72)) (= (x126 2 94) 19807040628566084398385987584) (= (x126 2 109) 649037107316853453566312041152512) (= 22300745198530623141535718272648361505980416 (x126 2 144)) (= 12554203470773361527671578846415332832204710888928069025792 (x126 2 193)) (= (x126 2 28) 268435456) (= 23945242826029513411849172299223580994042798784118784 (x126 2 174)) (= (x126 2 41) 2199023255552) (= 42535295865117307932921825928971026432 (x126 2 125)) (= 411376139330301510538742295639337626245683966408394965837152256 (x126 2 208)) (= 1024 (x126 2 10)) (= (x126 2 158) 365375409332725729550921208179070754913983135744) (= (x126 2 143) 11150372599265311570767859136324180752990208) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x126 2 242)) (= (x126 2 136) 87112285931760246646623899502532662132736) (= 1298074214633706907132624082305024 (x126 2 110)) (= 4503599627370496 (x126 2 52)) (= (x126 2 64) 18446744073709551616) (= (x126 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x126 2 239)) (= (x126 2 159) 730750818665451459101842416358141509827966271488) (= 340282366920938463463374607431768211456 (x126 2 128)) (= (x126 2 135) 43556142965880123323311949751266331066368) (= (x126 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x126 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 44601490397061246283071436545296723011960832 (x126 2 145)) (= (x126 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x126 2 40) 1099511627776) (= (x126 2 95) 39614081257132168796771975168) (= (x126 2 56) 72057594037927936) (= 1208925819614629174706176 (x126 2 80)) (= 16384 (x126 2 14)) (= (x126 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x126 2 97) 158456325028528675187087900672) (= (x126 2 173) 11972621413014756705924586149611790497021399392059392) (= (x126 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x126 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 4951760157141521099596496896 (x126 2 92)) (= 618970019642690137449562112 (x126 2 89)) (= (x126 2 186) 98079714615416886934934209737619787751599303819750539264) (= 1461501637330902918203684832716283019655932542976 (x126 2 160)) (= 191561942608236107294793378393788647952342390272950272 (x126 2 177)) (= 68719476736 (x126 2 36)) (= 324518553658426726783156020576256 (x126 2 108)) (= (x126 2 87) 154742504910672534362390528) (= 524288 (x126 2 19)) (= 8796093022208 (x126 2 43)) (= (x126 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 2923003274661805836407369665432566039311865085952 (x126 2 161)) (= (x126 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x126 2 255)) (= (x126 2 151) 2854495385411919762116571938898990272765493248) (= 1329227995784915872903807060280344576 (x126 2 120)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x126 2 221)) (= (x126 2 155) 45671926166590716193865151022383844364247891968) (= 85070591730234615865843651857942052864 (x126 2 126)) (= (x126 2 107) 162259276829213363391578010288128) (= (x126 2 98) 316912650057057350374175801344) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x126 2 236)) (= (x126 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x126 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 26328072917139296674479506920917608079723773850137277813577744384 (x126 2 214)) (= (x126 2 35) 34359738368) (= 2361183241434822606848 (x126 2 71)) (= (x126 2 16) 65536) (= 6427752177035961102167848369364650410088811975131171341205504 (x126 2 202)) (= (x126 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x126 2 167) 187072209578355573530071658587684226515959365500928) (= 766247770432944429179173513575154591809369561091801088 (x126 2 179)) (= 83076749736557242056487941267521536 (x126 2 116)) (= (x126 2 156) 91343852333181432387730302044767688728495783936) (= 696898287454081973172991196020261297061888 (x126 2 139)) (= 309485009821345068724781056 (x126 2 88)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x126 2 228)) (= 5316911983139663491615228241121378304 (x126 2 122)) (= 166153499473114484112975882535043072 (x126 2 117)) (= (x126 2 65) 36893488147419103232) (= 37778931862957161709568 (x126 2 75)) (= 77371252455336267181195264 (x126 2 86)) (= (x126 2 154) 22835963083295358096932575511191922182123945984) (= (x126 2 104) 20282409603651670423947251286016) (= 256 (x126 2 8)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x126 2 244)) (= (x126 2 91) 2475880078570760549798248448) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x126 2 240)) (= (x126 2 15) 32768) (= (x126 2 30) 1073741824) (= (x126 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x126 2 17) 131072) (= (x126 2 93) 9903520314283042199192993792) (= (x126 2 119) 664613997892457936451903530140172288) (= (x126 2 51) 2251799813685248) (= (x126 2 85) 38685626227668133590597632) (= 2097152 (x126 2 21)) (= 32 (x126 2 5)) (= (x126 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 5986310706507378352962293074805895248510699696029696 (x126 2 172)) (= 262144 (x126 2 18)) (= (x126 2 142) 5575186299632655785383929568162090376495104) (= 536870912 (x126 2 29)) (= 2596148429267413814265248164610048 (x126 2 111)) (= 2787593149816327892691964784081045188247552 (x126 2 141)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x126 2 233)) (= 11692013098647223345629478661730264157247460343808 (x126 2 163)) (= (x126 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 52656145834278593348959013841835216159447547700274555627155488768 (x126 2 215)) (= 182687704666362864775460604089535377456991567872 (x126 2 157)) (= (x126 2 20) 1048576) (= (x126 2 63) 9223372036854775808) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x126 2 229)) (= (x126 2 100) 1267650600228229401496703205376) (= (x126 2 26) 67108864) (= 19342813113834066795298816 (x126 2 84)) (= (x126 2 129) 680564733841876926926749214863536422912) (= (x126 2 162) 5846006549323611672814739330865132078623730171904) (= (x126 2 127) 170141183460469231731687303715884105728) (= (x126 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 13164036458569648337239753460458804039861886925068638906788872192 (x126 2 213)) (= (x126 2 7) 128) (= 23384026197294446691258957323460528314494920687616 (x126 2 164)) (= (x126 2 50) 1125899906842624) (= 21778071482940061661655974875633165533184 (x126 2 134)) (= (x126 2 150) 1427247692705959881058285969449495136382746624) (= (x126 2 66) 73786976294838206464) (= (x126 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x126 2 226)) (= (x126 2 67) 147573952589676412928) (= 8388608 (x126 2 23)) (= (x126 2 131) 2722258935367507707706996859454145691648) (= (x126 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x126 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x126 2 133) 10889035741470030830827987437816582766592) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x126 2 238)) (= 200867255532373784442745261542645325315275374222849104412672 (x126 2 197)) (= (x126 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x126 2 169) 748288838313422294120286634350736906063837462003712) (= 1496577676626844588240573268701473812127674924007424 (x126 2 170)) (= 590295810358705651712 (x126 2 69)) (= 4398046511104 (x126 2 42)) (= (x126 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 102844034832575377634685573909834406561420991602098741459288064 (x126 2 206)) (= 35184372088832 (x126 2 45)) (= (x126 2 76) 75557863725914323419136) (= 2305843009213693952 (x126 2 61)) (= 2658455991569831745807614120560689152 (x126 2 121)) (= 144115188075855872 (x126 2 57)) (= 46768052394588893382517914646921056628989841375232 (x126 2 165)) (= (x126 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x126 2 137) 174224571863520493293247799005065324265472) (= (x126 2 0) 1) (= 356811923176489970264571492362373784095686656 (x126 2 148)) (= (x126 2 78) 302231454903657293676544) (= (x126 2 4) 16) (= 5192296858534827628530496329220096 (x126 2 112)) (= 1532495540865888858358347027150309183618739122183602176 (x126 2 180)) (= (x126 2 60) 1152921504606846976) (= (x126 2 54) 18014398509481984) (= 274877906944 (x126 2 38)) (= 374144419156711147060143317175368453031918731001856 (x126 2 168)) (= (x126 2 1) 2) (= (x126 2 101) 2535301200456458802993406410752) (= 95780971304118053647396689196894323976171195136475136 (x126 2 176)) (= 70368744177664 (x126 2 46)) (= 348449143727040986586495598010130648530944 (x126 2 138)) (= 5070602400912917605986812821504 (x126 2 102)) (= (x126 2 70) 1180591620717411303424) (= 3291009114642412084309938365114701009965471731267159726697218048 (x126 2 211)) (= (x126 2 33) 8589934592) (= (x126 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 1606938044258990275541962092341162602522202993782792835301376 (x126 2 200)) (= 5708990770823839524233143877797980545530986496 (x126 2 152)) (= 4835703278458516698824704 (x126 2 82)) (= (x126 2 77) 151115727451828646838272) (= 33554432 (x126 2 25)) (= 20769187434139310514121985316880384 (x126 2 114)) (= (x126 2 9) 512) (= 604462909807314587353088 (x126 2 79)) (= 3064991081731777716716694054300618367237478244367204352 (x126 2 181)) (= 47890485652059026823698344598447161988085597568237568 (x126 2 175)) (= 21267647932558653966460912964485513216 (x126 2 124)) (= 562949953421312 (x126 2 49)) (= 9671406556917033397649408 (x126 2 83)) (= (x126 2 11) 2048) (= 10141204801825835211973625643008 (x126 2 103)) (= (x126 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 6129982163463555433433388108601236734474956488734408704 (x126 2 182)) (= 3138550867693340381917894711603833208051177722232017256448 (x126 2 191)) (= (x126 2 27) 134217728) (= (x126 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 12259964326927110866866776217202473468949912977468817408 (x126 2 183)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x126 2 224)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x126 2 225)) (= (x126 2 166) 93536104789177786765035829293842113257979682750464) (= (x126 2 146) 89202980794122492566142873090593446023921664) (= (x126 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x126 2 243)) (= 5444517870735015415413993718908291383296 (x126 2 132)) (= (x126 2 62) 4611686018427387904) (= (x126 2 113) 10384593717069655257060992658440192) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x126 2 245)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x126 2 251)) (= (x126 2 68) 295147905179352825856) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x126 2 254)) (= 178405961588244985132285746181186892047843328 (x126 2 147)) (= (x126 2 140) 1393796574908163946345982392040522594123776) (= 64 (x126 2 6)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x126 2 232)) (= (x126 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 281474976710656 (x126 2 48)) (= 1361129467683753853853498429727072845824 (x126 2 130)) (= 17592186044416 (x126 2 44)) (= 81129638414606681695789005144064 (x126 2 106)) (= 332306998946228968225951765070086144 (x126 2 118)) (= (x126 2 185) 49039857307708443467467104868809893875799651909875269632) (= 79228162514264337593543950336 (x126 2 96)) (= (x126 2 178) 383123885216472214589586756787577295904684780545900544) (= (x126 2 24) 16777216) (= (x126 2 149) 713623846352979940529142984724747568191373312) (= (x126 2 59) 576460752303423488) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x126 2 248)) (= 2993155353253689176481146537402947624255349848014848 (x126 2 171)) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x126 2 220)) (= (x126 2 115) 41538374868278621028243970633760768) (= 6277101735386680763835789423207666416102355444464034512896 (x126 2 192)) (= (x126 2 13) 8192) (= (x126 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x126 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 4 (x126 2 2)) (= 17179869184 (x126 2 34)) (= 288230376151711744 (x126 2 58)) (= 11417981541647679048466287755595961091061972992 (x126 2 153)) (= (x126 2 90) 1237940039285380274899124224) (= (x126 2 123) 10633823966279326983230456482242756608) (= 4294967296 (x126 2 32)) (= (x126 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x126 2 31) 2147483648) (= (x126 2 47) 140737488355328) (= 633825300114114700748351602688 (x126 2 99)) (= (x126 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 9007199254740992 (x126 2 53)) (= (x126 2 3) 8) (= (x126 2 105) 40564819207303340847894502572032) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x126 2 237)) (= (x126 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 4096 (x126 2 12)) (= 549755813888 (x126 2 39)) (= 392318858461667547739736838950479151006397215279002157056 (x126 2 188)) (= (x126 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 18889465931478580854784 (x126 2 74))))
(assert (x214 x22))
(assert (let ((x311 (ite (> 256 x200) (x126 2 x200) 0))) (and (x250 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x311 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x196 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x116 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x26 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x198 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (and (x250 x230 1461501637330902918203684832716283019655932542976) (=> (< 0 1461501637330902918203684832716283019655932542976) (= x230 (+ (* 1461501637330902918203684832716283019655932542976 (x196 x230 1461501637330902918203684832716283019655932542976)) (x116 x230 1461501637330902918203684832716283019655932542976)))) (x26 x230 1461501637330902918203684832716283019655932542976) (x198 x230 1461501637330902918203684832716283019655932542976)))
(assert (x115 x86))
(assert (= (x276 464684736) (x46 464684736)))
(assert (and (x168 x222 79228162514264337593543950336) (=> (and (< 0 x222) (< 0 79228162514264337593543950336)) (and (< (- x222 79228162514264337593543950336) (* 79228162514264337593543950336 (x196 x222 79228162514264337593543950336))) (>= x222 (* 79228162514264337593543950336 (x196 x222 79228162514264337593543950336))))) (x70 x222 79228162514264337593543950336) (x135 x222 79228162514264337593543950336) (x190 x222 79228162514264337593543950336) (= (* (x196 x222 79228162514264337593543950336) 79228162514264337593543950336) (- x222 (x300 79228162514264337593543950335 x222)))))
(assert (x115 x113))
(assert (x115 x301))
(assert (x115 x123))
(assert (x115 x177))
(assert (= (x155 (ite (> 256 x200) (x126 2 x200) 0)) (x4 1 x200)))
(assert (x115 x121))
(assert (x247 (ite (> 256 x79) (x126 2 x79) 0)))
(assert (x68 x14))
(assert (= (+ 3 (x217 x308)) (x217 (x261 x308 3))))
(assert (x61 x97))
(assert (x115 x281))
(assert (x115 x74))
(assert (x247 (ite (< x213 256) (x126 2 x213) 0)))
(assert (x115 x58))
(assert (= (or x47 x288) x27))
(assert (x115 x178))
(assert (x115 x181))
(assert (x115 x114))
(assert (=> (>= 10000 x230) (= (x276 x230) (x46 x230))))
(assert (= (x217 (x46 x141)) x141))
(assert (= (x217 (x276 2510660263)) 2510660263))
(assert (x115 x238))
(assert (x80 x320))
(assert (x115 x235))
(assert (x115 x224))
(assert (x115 x104))
(assert (x214 x265))
(assert (=> (<= x9 10000) (= (x276 x9) (x46 x9))))
(assert (x115 x138))
(assert (x55 x245))
(assert (=> (>= 10000 x86) (= (x46 x86) (x276 x86))))
(assert (and (= 81 (x239 9 9)) (= 27 (x239 9 3)) (= 9 (x239 3 3)) (= (x239 27 3) 81)))
(assert (x115 x36))
(assert (x115 x10))
(assert (x214 x43))
(assert (x115 x5))
(assert (x115 x147))
(assert (x115 x143))
(assert (x115 x99))
(assert (x115 x263))
(assert (= (x276 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x46 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x80 x174))
(assert (x61 (x126 2 x213)))
(assert (x115 x244))
(assert (x247 256))
(assert (x115 x268))
(assert (x115 x97))
(assert (= x47 (or x151 x246)))
(assert (x115 x43))
(assert (= (x276 904250603428552709895185118199468575982109441609966099573332780532423983104) (x46 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (= (x217 (x276 292666793)) 292666793))
(assert (and (x168 x18 256) (=> (and (< 0 x18) (< 0 256)) (and (< (- x18 256) (* 256 (x196 x18 256))) (>= x18 (* 256 (x196 x18 256))))) (x70 x18 256) (x135 x18 256) (x190 x18 256) (= (* (x196 x18 256) 256) (- x18 (x300 255 x18)))))
(assert (= 26959946667150639794667015087019630673637144422540572481103610249215 (x217 (x276 26959946667150639794667015087019630673637144422540572481103610249215))))
(assert (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x217 (x276 115792089210356248756420345214020892766250353992003419616917011526809519390720))))
(assert (x115 x191))
(assert (x115 x252))
(assert (= (x155 (* x65 79228162514264337593543950336)) (x4 x65 96)))
(assert (=> (<= x141 10000) (= (x46 x141) (x276 x141))))
(assert (x80 x18))
(assert (let ((x311 (ite (< x36 256) (x126 2 x36) 0))) (and (x250 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x311 (+ (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x196 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x116 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x26 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x198 x311 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x115 x22))
(assert (x115 x182))
(assert (x115 x222))
(assert (= x64 (=> (and x125 (<= x42 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x85 (x94 x18 8)) (<= x280 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x195 (x169 x12)) (<= 0 x280) (= x124 (x76 (+ x252 x321))) (= (x128 (- x41 x209)) x103) (= x11 (x98 x41)) (= (< 0 x11) x133) (<= x195 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x58) (= x278 (< x299 x195)) (= (x159 (x276 52) (x276 32) (x46 x18) (x46 (x94 x222 96)) 0) x185) (= x42 (x228 x229)) (= x58 (x228 x229)) (= (x76 (+ x305 32)) x303) (= x305 (x76 (+ x209 32))) (= (x300 x280 x268) x170) (>= x42 0) (= (x128 (- x103 32)) x281) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58) (= (x148 (x46 x179) (x276 1) 0) x37) (= x125 (= 0 x170)) (= x268 (x4 1 x79)) (<= x279 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x195) (= x222 (x4 x65 96)) (= x321 (x155 (* x97 32))) (not x278) (= x12 (x261 x229 1)) (= x179 (x300 1461501637330902918203684832716283019655932542975 x230)) (= (x34 x59) x279) (= x229 (x148 (x46 x320) x37 0)) (= x152 (x261 x229 3)) (= (x300 255 x18) x79) (<= 0 x279) (< 0 x42) (= x59 (x261 x12 1)) (= x41 (x76 (+ x303 20))) (not (< x279 x299)) (= x137 (x148 (x46 x85) x152 0)) (= x252 (x76 (+ x41 32))) (= (x269 x137) x280)) (and (=> (and (not x133) (= x111 x185)) x164) (=> (and x133 (and (or (and x273 (and (= x112 x236) (= x112 (x148 x185 (x46 x86) 0)))) (and (and (= x153 (x148 (x46 x86) x185 0)) (= x236 x153)) (not x273))) (and (= x86 (x98 x205)) (= (> x86 (x217 x185)) x273) (> x244 0) (= x244 (x98 x41)) (= (x76 (+ x41 32)) x205)))) x73)))))
(assert (x247 x22))
(assert (and (x250 x127 256) (=> (< 0 256) (= x127 (+ (* 256 (x196 x127 256)) (x116 x127 256)))) (x26 x127 256) (x198 x127 256)))
(assert (x115 x83))
(assert (x115 x232))
(assert (x187 x7 x14))
(assert (= 1461501637330902918203684832716283019655932542975 (x217 (x276 1461501637330902918203684832716283019655932542975))))
(assert (x80 x210))
(assert (x247 (* 79228162514264337593543950336 x65)))
(assert (x115 x265))
(assert (x82 x230))
(assert (= (x4 1 x213) (x155 (ite (> 256 x213) (x126 2 x213) 0))))
(assert (x115 x162))
(assert (and (x250 x18 256) (=> (< 0 256) (= x18 (+ (* 256 (x196 x18 256)) (x116 x18 256)))) (x26 x18 256) (x198 x18 256)))
(assert (= 18446744073709551615 (x217 (x276 18446744073709551615))))
(assert (x214 255))
(assert (= (x94 x222 96) (x217 (x46 (x94 x222 96)))))
(assert (= x246 (and (not x275) x313)))
(assert (x61 32))
(assert (= (x46 2510660263) (x276 2510660263)))
(assert (x247 x245))
(assert (= (x196 x222 79228162514264337593543950336) (x94 x222 96)))
(assert (x115 x240))
(assert (x80 x302))
(assert (= x241 (or x225 x298)))
(assert (= (x276 1461501637330902918203684832716283019655932542975) (x46 1461501637330902918203684832716283019655932542975)))
(assert (x80 x179))
(assert (x247 x43))
(assert (x115 x8))
(check-sat)
(exit)
