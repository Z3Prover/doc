(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x269 0)) (((x300 (x550 Int)) (x348 (x339 x269) (x584 Int)) (x543 (x576 x269) (x301 x269) (x349 Int)))))
(declare-fun x662 () Int)
(declare-fun x240 () Bool)
(declare-fun x360 () Bool)
(declare-fun x228 () Int)
(declare-fun x107 () Int)
(declare-fun x133 () Bool)
(declare-fun x116 () Int)
(declare-fun x71 () Int)
(declare-fun x91 () Int)
(declare-fun x399 () Int)
(declare-fun x226 () Int)
(declare-fun x375 () Bool)
(declare-fun x150 () Int)
(declare-fun x476 () Int)
(declare-fun x670 () Bool)
(declare-fun x538 () Int)
(declare-fun x347 () Bool)
(declare-fun x110 () x269)
(declare-fun x10 () Int)
(declare-fun x612 () x269)
(declare-fun x139 () x269)
(declare-fun x626 () Int)
(declare-fun x592 () Bool)
(declare-fun x678 () Bool)
(declare-fun x570 () Int)
(declare-fun x151 () Int)
(declare-fun x209 () Bool)
(declare-fun x351 () Int)
(declare-fun x251 () x269)
(declare-fun x561 () Bool)
(declare-fun x510 () Int)
(declare-fun x533 () Bool)
(declare-fun x668 (Int) Int)
(declare-fun x732 () Bool)
(declare-fun x343 () x269)
(declare-fun x81 () Bool)
(declare-fun x585 () Bool)
(declare-fun x52 () Int)
(declare-fun x703 () Int)
(declare-fun x234 () Int)
(declare-fun x141 () Bool)
(declare-fun x128 () Bool)
(declare-fun x2 () Int)
(declare-fun x755 () Int)
(declare-fun x463 () Int)
(declare-fun x558 () Int)
(declare-fun x241 () Int)
(declare-fun x16 () Bool)
(declare-fun x544 () Int)
(declare-fun x48 () Int)
(declare-fun x745 () Int)
(declare-fun x180 () x269)
(declare-fun x330 () Int)
(declare-fun x19 () Int)
(declare-fun x33 () Int)
(declare-fun x619 () Int)
(declare-fun x701 () Int)
(declare-fun x405 () Int)
(declare-fun x772 () Int)
(declare-fun x79 () Int)
(declare-fun x101 () Int)
(declare-fun x655 () Int)
(declare-fun x751 () Int)
(declare-fun x113 () Int)
(declare-fun x469 () Bool)
(declare-fun x317 () Int)
(declare-fun x312 () Int)
(declare-fun x322 () Bool)
(declare-fun x457 () x269)
(declare-fun x179 () Bool)
(declare-fun x265 () Bool)
(declare-fun x397 () Bool)
(declare-fun x414 () Int)
(declare-fun x386 () Bool)
(declare-fun x659 () Int)
(declare-fun x310 () Int)
(declare-fun x38 () Bool)
(declare-fun x389 () Int)
(declare-fun x130 () Int)
(declare-fun x50 () Int)
(declare-fun x34 () Int)
(declare-fun x546 () Int)
(declare-fun x199 () Int)
(declare-fun x9 () Bool)
(declare-fun x73 () Bool)
(declare-fun x250 (x269) Int)
(declare-fun x551 () x269)
(declare-fun x159 () Bool)
(declare-fun x112 () Int)
(declare-fun x444 () Int)
(declare-fun x623 () Int)
(declare-fun x220 () Bool)
(declare-fun x761 () Int)
(declare-fun x679 () Int)
(declare-fun x335 () Int)
(declare-fun x431 () Bool)
(declare-fun x46 () Int)
(declare-fun x440 () Int)
(declare-fun x484 () Int)
(declare-fun x167 () Bool)
(declare-fun x754 () Int)
(declare-fun x437 () Int)
(declare-fun x89 () Bool)
(declare-fun x737 () Int)
(declare-fun x186 () Int)
(declare-fun x559 () Int)
(declare-fun x494 () Bool)
(declare-fun x454 () Bool)
(declare-fun x221 () Int)
(declare-fun x53 () x269)
(declare-fun x120 () Bool)
(declare-fun x288 () Int)
(declare-fun x393 () Int)
(declare-fun x74 () Bool)
(declare-fun x567 () Bool)
(declare-fun x145 () Int)
(declare-fun x338 () Bool)
(declare-fun x121 () Bool)
(declare-fun x715 () Int)
(declare-fun x68 () Int)
(declare-fun x499 () x269)
(declare-fun x736 () Int)
(declare-fun x447 (Int) x269)
(declare-fun x666 () Bool)
(declare-fun x596 () Int)
(declare-fun x146 () Int)
(declare-fun x401 () Bool)
(declare-fun x396 () Int)
(declare-fun x741 () Bool)
(declare-fun x749 () Bool)
(declare-fun x41 () Int)
(declare-fun x739 () Int)
(declare-fun x1 () Bool)
(declare-fun x177 () Int)
(declare-fun x589 () Int)
(declare-fun x62 () Bool)
(declare-fun x368 () Int)
(declare-fun x621 () Bool)
(declare-fun x548 () Int)
(declare-fun x771 () x269)
(declare-fun x693 () Int)
(declare-fun x687 () Bool)
(declare-fun x268 () Bool)
(declare-fun x677 () Int)
(declare-fun x750 () Int)
(declare-fun x70 () Int)
(declare-fun x259 () Int)
(declare-fun x724 () Bool)
(declare-fun x384 () Int)
(declare-fun x365 () Int)
(declare-fun x602 () Int)
(declare-fun x225 () Bool)
(declare-fun x222 () Int)
(declare-fun x163 () Bool)
(declare-fun x176 () x269)
(declare-fun x642 () Int)
(declare-fun x680 () Bool)
(declare-fun x526 () Int)
(declare-fun x162 () Int)
(declare-fun x459 () Int)
(declare-fun x98 () Int)
(declare-fun x135 () Bool)
(declare-fun x192 () Int)
(declare-fun x274 () Int)
(declare-fun x245 () Int)
(declare-fun x61 () Int)
(declare-fun x688 () Int)
(declare-fun x272 () Int)
(declare-fun x636 () Bool)
(declare-fun x371 () Int)
(declare-fun x769 () Int)
(declare-fun x54 (x269) Int)
(declare-fun x223 () Int)
(declare-fun x262 () Int)
(declare-fun x284 () Int)
(declare-fun x577 () Int)
(declare-fun x704 () Int)
(declare-fun x436 () Int)
(declare-fun x282 () Bool)
(declare-fun x432 () Int)
(declare-fun x174 () Int)
(declare-fun x126 () Int)
(declare-fun x28 () Int)
(declare-fun x152 () Bool)
(declare-fun x291 () Int)
(declare-fun x611 () Int)
(declare-fun x643 () Int)
(declare-fun x660 () Int)
(declare-fun x702 () Int)
(declare-fun x65 () Bool)
(declare-fun x102 () Int)
(declare-fun x472 () Int)
(declare-fun x325 () Bool)
(declare-fun x664 () Int)
(declare-fun x413 () Int)
(declare-fun x746 () Int)
(declare-fun x118 () Int)
(declare-fun x156 () Bool)
(declare-fun x676 () Bool)
(declare-fun x158 () Int)
(declare-fun x14 (Int Int) Int)
(declare-fun x294 () Int)
(declare-fun x560 (Int Int) Int)
(declare-fun x328 () Bool)
(declare-fun x166 () Bool)
(declare-fun x690 () Int)
(declare-fun x60 () Int)
(declare-fun x341 () Bool)
(declare-fun x289 () Bool)
(declare-fun x502 () Int)
(declare-fun x11 () Bool)
(declare-fun x672 () Int)
(declare-fun x562 () Bool)
(declare-fun x645 () Int)
(declare-fun x449 (Int) Int)
(declare-fun x129 () Int)
(declare-fun x247 () Int)
(declare-fun x214 () Int)
(declare-fun x181 () Int)
(declare-fun x29 () Int)
(declare-fun x556 () x269)
(declare-fun x298 () Bool)
(declare-fun x426 () Int)
(declare-fun x287 () Bool)
(declare-fun x545 () Bool)
(declare-fun x646 () Int)
(declare-fun x219 () Bool)
(declare-fun x296 () Bool)
(declare-fun x768 () Int)
(declare-fun x651 () Int)
(declare-fun x381 () Bool)
(declare-fun x547 () Bool)
(declare-fun x473 () Int)
(declare-fun x27 () Bool)
(declare-fun x370 () Int)
(declare-fun x352 () Bool)
(declare-fun x607 () Bool)
(declare-fun x420 () Bool)
(declare-fun x40 () Int)
(declare-fun x266 () Bool)
(declare-fun x25 () Bool)
(declare-fun x723 () Bool)
(declare-fun x185 () Int)
(declare-fun x501 () Int)
(declare-fun x13 () Int)
(declare-fun x255 () Int)
(declare-fun x283 () Int)
(declare-fun x92 () Bool)
(declare-fun x603 () Int)
(declare-fun x336 () Int)
(declare-fun x344 () Int)
(declare-fun x575 () Int)
(declare-fun x605 () Bool)
(declare-fun x297 () Bool)
(declare-fun x395 () Int)
(declare-fun x172 () Int)
(declare-fun x625 () Int)
(declare-fun x224 () Int)
(declare-fun x350 () Bool)
(declare-fun x624 () Bool)
(declare-fun x524 () Bool)
(declare-fun x345 () x269)
(declare-fun x461 () Int)
(declare-fun x523 () Int)
(declare-fun x748 () Int)
(declare-fun x238 () Int)
(declare-fun x571 () Bool)
(declare-fun x316 () Int)
(declare-fun x557 () Int)
(declare-fun x58 () Bool)
(declare-fun x506 () Bool)
(declare-fun x248 () Int)
(declare-fun x498 () Int)
(declare-fun x591 () Int)
(declare-fun x154 () Bool)
(declare-fun x144 () Bool)
(declare-fun x633 () Int)
(declare-fun x353 () Int)
(declare-fun x342 () Bool)
(declare-fun x599 () Int)
(declare-fun x686 () Int)
(declare-fun x464 () Int)
(declare-fun x500 () Bool)
(declare-fun x654 () Int)
(declare-fun x55 () Bool)
(declare-fun x474 (x269) Int)
(declare-fun x639 () Int)
(declare-fun x470 () Bool)
(declare-fun x640 () Bool)
(declare-fun x320 () Int)
(declare-fun x718 () x269)
(declare-fun x173 () Bool)
(declare-fun x279 () x269)
(declare-fun x540 () Int)
(declare-fun x727 () Bool)
(declare-fun x31 () Bool)
(declare-fun x674 () Int)
(declare-fun x189 () Int)
(declare-fun x42 () Int)
(declare-fun x760 () Int)
(declare-fun x227 () Int)
(declare-fun x308 (x269) Int)
(declare-fun x125 () Int)
(declare-fun x136 () Int)
(declare-fun x387 () Int)
(declare-fun x20 () Int)
(declare-fun x617 () Int)
(declare-fun x653 () Int)
(declare-fun x361 () Int)
(declare-fun x198 () Int)
(declare-fun x356 () Bool)
(declare-fun x178 () Int)
(declare-fun x270 () Int)
(declare-fun x512 () Int)
(declare-fun x261 () Int)
(declare-fun x104 () Int)
(declare-fun x418 () Int)
(declare-fun x5 () Bool)
(declare-fun x439 () Bool)
(declare-fun x600 () Bool)
(declare-fun x711 () Int)
(declare-fun x757 () Int)
(declare-fun x683 () Int)
(declare-fun x606 () Int)
(declare-fun x115 () Bool)
(declare-fun x171 () Bool)
(declare-fun x416 () Int)
(declare-fun x483 () Int)
(declare-fun x160 () Int)
(declare-fun x631 () Bool)
(declare-fun x649 () Int)
(declare-fun x391 () Int)
(declare-fun x252 () Bool)
(declare-fun x324 () Bool)
(declare-fun x64 () Bool)
(declare-fun x369 () Int)
(declare-fun x47 () Int)
(declare-fun x187 () Int)
(declare-fun x555 () Bool)
(declare-fun x419 () Int)
(declare-fun x23 () Bool)
(declare-fun x346 () Int)
(declare-fun x373 () Int)
(declare-fun x6 () Int)
(declare-fun x304 () Int)
(declare-fun x613 () Bool)
(declare-fun x82 (Int Int) Int)
(declare-fun x340 () Bool)
(declare-fun x752 () Bool)
(declare-fun x719 () x269)
(declare-fun x681 () Int)
(declare-fun x458 () x269)
(declare-fun x380 () Int)
(declare-fun x714 () Bool)
(declare-fun x313 () Bool)
(declare-fun x434 () Int)
(declare-fun x598 () x269)
(declare-fun x236 () Int)
(declare-fun x685 () Bool)
(declare-fun x49 () Int)
(declare-fun x323 () Int)
(declare-fun x658 () Int)
(declare-fun x539 () Bool)
(declare-fun x583 () Int)
(declare-fun x87 () Int)
(declare-fun x765 () Int)
(declare-fun x376 () Int)
(declare-fun x218 () Bool)
(declare-fun x697 () Int)
(declare-fun x581 () x269)
(declare-fun x200 () Bool)
(declare-fun x35 () Int)
(declare-fun x507 (x269) Int)
(declare-fun x505 () Int)
(declare-fun x263 () Int)
(declare-fun x446 () x269)
(declare-fun x443 () Int)
(declare-fun x277 () Bool)
(declare-fun x22 () x269)
(declare-fun x379 () Int)
(declare-fun x207 () Int)
(declare-fun x520 () Int)
(declare-fun x36 () Bool)
(declare-fun x691 () Int)
(declare-fun x616 () Int)
(declare-fun x276 () Bool)
(declare-fun x758 () Int)
(declare-fun x103 () Bool)
(declare-fun x377 () Bool)
(declare-fun x273 () Bool)
(declare-fun x78 (Int) Int)
(declare-fun x462 () x269)
(declare-fun x684 () Bool)
(declare-fun x647 () x269)
(declare-fun x572 () Int)
(declare-fun x493 () Int)
(declare-fun x372 () Int)
(declare-fun x497 () Bool)
(declare-fun x734 () Int)
(declare-fun x114 () Bool)
(declare-fun x292 () x269)
(declare-fun x258 () Int)
(declare-fun x733 () Int)
(declare-fun x63 () Int)
(declare-fun x408 () Int)
(declare-fun x491 () Int)
(declare-fun x278 () Int)
(declare-fun x525 () Bool)
(declare-fun x390 () Int)
(declare-fun x451 () Int)
(declare-fun x735 () Bool)
(declare-fun x243 () Bool)
(declare-fun x367 () Int)
(declare-fun x406 () Int)
(declare-fun x696 () Int)
(declare-fun x358 () Bool)
(declare-fun x392 () Bool)
(declare-fun x628 () x269)
(declare-fun x496 () Int)
(declare-fun x212 () Int)
(declare-fun x716 () Int)
(declare-fun x66 () Int)
(declare-fun x319 () Int)
(declare-fun x629 () Int)
(declare-fun x618 () Bool)
(declare-fun x216 () Bool)
(declare-fun x468 () Bool)
(declare-fun x137 () Int)
(declare-fun x366 () Int)
(declare-fun x30 () Int)
(declare-fun x318 () Bool)
(declare-fun x728 () Int)
(declare-fun x183 () Int)
(declare-fun x725 () Bool)
(declare-fun x675 () Int)
(declare-fun x332 () Int)
(declare-fun x608 () Int)
(declare-fun x534 () Int)
(declare-fun x456 () Bool)
(declare-fun x59 () Int)
(declare-fun x175 () Int)
(declare-fun x111 () Int)
(declare-fun x237 () Int)
(declare-fun x143 () Int)
(declare-fun x256 () Int)
(declare-fun x286 () Int)
(declare-fun x699 () Int)
(declare-fun x306 () Int)
(declare-fun x698 () Int)
(declare-fun x217 () Bool)
(declare-fun x453 () Int)
(declare-fun x72 () Int)
(declare-fun x579 () Int)
(declare-fun x588 () Int)
(declare-fun x667 () Bool)
(declare-fun x762 () Int)
(declare-fun x260 () Int)
(declare-fun x122 () Bool)
(declare-fun x363 () Int)
(declare-fun x86 () Bool)
(declare-fun x517 () Bool)
(declare-fun x641 () Bool)
(declare-fun x215 () Bool)
(declare-fun x652 () Bool)
(declare-fun x509 () Int)
(declare-fun x486 () Int)
(declare-fun x404 () Bool)
(declare-fun x530 () Bool)
(declare-fun x230 () Bool)
(declare-fun x76 () Bool)
(declare-fun x295 () Bool)
(declare-fun x364 () Int)
(declare-fun x123 () Bool)
(declare-fun x106 () Int)
(declare-fun x201 () Int)
(declare-fun x650 (Int Int) Int)
(declare-fun x422 () Bool)
(declare-fun x610 () Bool)
(declare-fun x516 () Bool)
(declare-fun x428 () Bool)
(declare-fun x587 () Bool)
(declare-fun x552 () Int)
(declare-fun x311 (Int) Int)
(declare-fun x382 () Int)
(declare-fun x756 () Bool)
(declare-fun x425 () Int)
(declare-fun x495 () Int)
(declare-fun x485 () Int)
(declare-fun x17 () Bool)
(declare-fun x740 () Int)
(declare-fun x532 () Int)
(declare-fun x726 () Bool)
(declare-fun x695 () Int)
(declare-fun x194 () x269)
(declare-fun x717 () Int)
(declare-fun x26 () x269)
(declare-fun x450 () Int)
(declare-fun x329 () x269)
(declare-fun x309 () Int)
(declare-fun x299 () Bool)
(declare-fun x232 () Int)
(declare-fun x430 () Bool)
(declare-fun x411 () Int)
(declare-fun x529 () Int)
(declare-fun x94 () Int)
(declare-fun x205 () Int)
(declare-fun x155 () Bool)
(declare-fun x45 () Int)
(declare-fun x712 () Int)
(declare-fun x535 () Bool)
(declare-fun x448 () Int)
(declare-fun x96 () Int)
(declare-fun x601 () Bool)
(declare-fun x410 (x269) Int)
(declare-fun x421 () Int)
(declare-fun x475 () Int)
(declare-fun x770 () Bool)
(declare-fun x246 () Int)
(declare-fun x627 () Int)
(declare-fun x117 () Bool)
(declare-fun x85 () Bool)
(declare-fun x57 () x269)
(declare-fun x18 () Bool)
(declare-fun x424 () Int)
(declare-fun x479 () Int)
(declare-fun x492 () Bool)
(declare-fun x630 () Bool)
(declare-fun x165 () Int)
(declare-fun x75 () Int)
(declare-fun x398 () Int)
(declare-fun x153 () Bool)
(declare-fun x580 () x269)
(declare-fun x706 () Bool)
(declare-fun x541 () Bool)
(declare-fun x69 () Bool)
(declare-fun x147 () Bool)
(declare-fun x671 () Bool)
(declare-fun x553 () Int)
(declare-fun x95 () Bool)
(declare-fun x730 () Bool)
(declare-fun x239 () Int)
(declare-fun x518 (Int) Int)
(declare-fun x134 () Int)
(declare-fun x15 () Bool)
(declare-fun x482 () Int)
(declare-fun x267 () Bool)
(declare-fun x477 () Int)
(declare-fun x632 () x269)
(declare-fun x452 () Int)
(declare-fun x637 () Int)
(declare-fun x466 () Int)
(declare-fun x705 () Int)
(declare-fun x400 () Int)
(declare-fun x37 () Bool)
(declare-fun x429 () Int)
(declare-fun x615 () x269)
(declare-fun x88 () Int)
(declare-fun x4 () Int)
(declare-fun x427 () Bool)
(declare-fun x302 () Int)
(declare-fun x657 (Int Int) Int)
(declare-fun x359 () Int)
(declare-fun x337 () Int)
(declare-fun x127 () x269)
(declare-fun x44 () Int)
(declare-fun x467 () Bool)
(declare-fun x321 () Bool)
(declare-fun x131 () Bool)
(declare-fun x720 () Bool)
(declare-fun x590 () Int)
(declare-fun x334 (x269) Int)
(declare-fun x191 () Bool)
(declare-fun x722 () Int)
(declare-fun x511 (Int Int) Int)
(declare-fun x264 () Int)
(declare-fun x374 () Int)
(declare-fun x403 () Bool)
(declare-fun x635 () Int)
(declare-fun x766 () Bool)
(declare-fun x490 () Int)
(declare-fun x394 () Bool)
(declare-fun x528 () Bool)
(declare-fun x689 () Int)
(declare-fun x489 () Bool)
(declare-fun x563 () Int)
(declare-fun x108 () Int)
(declare-fun x354 () Int)
(declare-fun x290 () Int)
(declare-fun x412 () x269)
(declare-fun x8 () Int)
(declare-fun x480 () Int)
(declare-fun x97 () Bool)
(declare-fun x515 () x269)
(declare-fun x743 () Bool)
(declare-fun x665 () Bool)
(declare-fun x99 () Int)
(declare-fun x433 () Bool)
(declare-fun x638 () Int)
(declare-fun x445 () Bool)
(declare-fun x759 () Int)
(declare-fun x203 () Bool)
(declare-fun x407 () Int)
(declare-fun x742 () Bool)
(declare-fun x385 () Int)
(declare-fun x254 () Int)
(declare-fun x331 () x269)
(declare-fun x315 () Bool)
(declare-fun x644 () Bool)
(declare-fun x326 () Int)
(declare-fun x503 () Int)
(declare-fun x281 () Int)
(declare-fun x383 () Int)
(declare-fun x193 () Bool)
(declare-fun x713 () Int)
(declare-fun x362 () Bool)
(declare-fun x442 () Int)
(declare-fun x731 () Bool)
(declare-fun x744 () Bool)
(declare-fun x522 () Int)
(declare-fun x124 () Int)
(declare-fun x140 () Int)
(declare-fun x32 () x269)
(declare-fun x764 () Int)
(declare-fun x564 () Int)
(declare-fun x721 () Int)
(declare-fun x519 (Int) Int)
(declare-fun x574 () Int)
(declare-fun x83 () Bool)
(declare-fun x582 () Bool)
(declare-fun x231 () Bool)
(declare-fun x521 () Bool)
(declare-fun x357 () Int)
(declare-fun x90 () Bool)
(declare-fun x196 () Int)
(declare-fun x710 () Int)
(declare-fun x307 () Int)
(declare-fun x285 () x269)
(declare-fun x190 () Int)
(declare-fun x622 () Bool)
(declare-fun x455 () Bool)
(declare-fun x488 () Int)
(declare-fun x554 () Int)
(declare-fun x700 () Int)
(declare-fun x56 () Bool)
(declare-fun x565 () Int)
(define-fun x210 ((x269 x269) (x682 Int)) x269 (ite ((_ is x348) x269) (x348 (x339 x269) (+ (x584 x269) x682)) (ite ((_ is x543) x269) (x543 (x576 x269) (x301 x269) (+ (x349 x269) x682)) (x300 (+ (x550 x269) x682)))))
(define-fun x669 ((x161 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x161) (<= 0 x161)) x161 (- x161 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x293 ((x161 Int)) Int (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x161) (> 0 x161)) (+ 115792089237316195423570985008687907853269984665640564039457584007913129639936 x161) x161))
(define-fun x435 ((x161 Int)) Int (ite (and (< x161 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x161 0)) x161 (ite (and (< x161 231584178474632390847141970017375815706539969331281128078915168015826259279872) (>= x161 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- x161 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x161) (< x161 0)) (+ x161 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x82 x161 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x487 ((x157 Int)) Bool (and (< x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x157)))
(define-fun x3 ((x157 Int) (x257 Int)) Bool (=> (and (> x257 0) (> x157 0)) (and (<= 0 (x14 x157 x257)) (>= x157 (x14 x157 x257)))))
(define-fun x138 ((x157 Int) (x257 Int)) Bool (=> (and (and (<= 1 x257) (< x257 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (< x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x157))) (and (<= 0 (x14 x157 x257)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x14 x157 x257)))))
(define-fun x149 ((x157 Int) (x257 Int)) Bool (=> (and (< x257 x157) (> x257 1)) (< (x14 x157 x257) x157)))
(define-fun x441 ((x157 Int) (x257 Int)) Bool (=> (and (> x157 0) (> x257 0)) (= (< x157 x257) (= (x14 x157 x257) 0))))
(define-fun x417 ((x157 Int)) Bool (= (x14 0 x157) 0))
(define-fun x692 ((x157 Int)) Bool (= x157 (x14 x157 1)))
(define-fun x197 ((x157 Int)) Bool (=> (not (= x157 0)) (= (x14 x157 x157) 1)))
(define-fun x478 ((x157 Int)) Bool (and (x197 x157) (x692 x157) (x417 x157)))
(define-fun x249 ((x157 Int)) Bool (and (= (x650 115792089237316195423570985008687907853269984665640564039457584007913129639935 x157) x157) (= x157 (x650 x157 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x504 ((x157 Int)) Bool (and (= (x650 0 x157) 0) (= 0 (x650 x157 0))))
(define-fun x314 ((x157 Int)) Bool (= (x650 x157 x157) x157))
(define-fun x465 ((x157 Int)) Bool (and (x504 x157) (x249 x157) (x314 x157)))
(define-fun x634 ((x157 Int) (x257 Int)) Bool (= (x650 x157 x257) (x650 x257 x157)))
(define-fun x388 ((x157 Int) (x257 Int)) Bool (and (<= 0 (x650 x157 x257)) (=> (>= x157 0) (>= x157 (x650 x157 x257))) (=> (<= 0 x257) (>= x257 (x650 x157 x257)))))
(define-fun x7 ((x157 Int) (x257 Int)) Bool (and (x388 x157 x257) (x634 x157 x257)))
(define-fun x333 ((x157 Int) (x257 Int)) Bool (=> (and (< 0 x257) (> x157 0)) (and (<= (x560 (x14 x157 x257) x257) x157) (> (x560 (x14 x157 x257) x257) (- x157 x257)))))
(define-fun x229 ((x157 Int) (x257 Int)) Bool (and (x441 x157 x257) (x3 x157 x257) (x138 x157 x257) (x149 x157 x257) (x333 x157 x257)))
(define-fun x460 ((x157 Int) (x257 Int)) Bool (= (x560 x257 x157) (x560 x157 x257)))
(define-fun x67 ((x157 Int) (x257 Int)) Bool (and (=> (and (> x257 0) (> x157 0)) (< 0 (x560 x157 x257))) (=> (and (< x157 0) (< x257 0)) (> (x560 x157 x257) 0)) (=> (and (> 0 x157) (< 0 x257)) (> 0 (x560 x157 x257))) (=> (and (> 0 x257) (> x157 0)) (< (x560 x157 x257) 0))))
(define-fun x597 ((x157 Int) (x257 Int)) Bool (=> (and (< 0 x157) (> x257 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x560 x157 x257)) (= (x14 (x435 (x560 x157 x257)) x157) x257))))
(define-fun x531 ((x157 Int) (x257 Int)) Bool (=> (and (not (= x257 0)) (not (= x157 0))) (and (= x257 (x14 (x560 x157 x257) x157)) (= (x14 (x560 x157 x257) x257) x157))))
(define-fun x93 ((x157 Int) (x257 Int)) Bool (=> (and (> x257 0) (> x157 0)) (= (> (x560 x157 x257) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (x14 115792089237316195423570985008687907853269984665640564039457584007913129639935 x157) x257))))
(define-fun x747 ((x157 Int) (x257 Int)) Bool (and (= (x435 (x560 (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) x257)) (x435 (x560 x157 x257))) (= (x435 (x560 (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x257 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x435 (x560 x157 x257))) (= (x435 (x560 x157 (- x257 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x435 (x560 x157 x257)))))
(define-fun x235 ((x157 Int) (x257 Int)) Bool (and (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x257) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x257)) (and (> x157 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x157 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (x560 (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x257 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x157) (x14 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x257))))) (=> (and (and (> x257 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x257 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (< 0 x157) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x157))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x560 x157 (- x257 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x257) (x14 57896044618658097711785492504343953926634992332820282019728792003956564819968 x157)))) (=> (and (and (<= x157 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x157 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x257 0) (<= x257 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x560 (- x157 115792089237316195423570985008687907853269984665640564039457584007913129639936) x257)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x157) (x14 57896044618658097711785492504343953926634992332820282019728792003956564819968 x257)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x157) (< 0 x157)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x257) (> x257 0))) (= (>= (x14 57896044618658097711785492504343953926634992332820282019728792003956564819967 x257) x157) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x560 x157 x257))))))
(define-fun x537 ((x157 Int) (x257 Int)) Bool (and (x93 x157 x257) (x235 x157 x257) (x747 x157 x257) (x460 x157 x257) (x597 x157 x257) (x67 x157 x257) (x531 x157 x257)))
(define-fun x244 ((x157 Int)) Bool (and (= 0 (x560 x157 0)) (= 0 (x560 0 x157))))
(define-fun x253 ((x157 Int)) Bool (and (= x157 (x560 1 x157)) (= (x560 x157 1) x157)))
(define-fun x594 ((x157 Int)) Bool (and (x253 x157) (x244 x157)))
(define-fun x409 ((x157 Int)) Bool (= (x650 x157 1461501637330902918203684832716283019655932542975) (x82 x157 1461501637330902918203684832716283019655932542976)))
(define-fun x402 ((x157 Int)) Bool (and (x409 x157) (x7 x157 1461501637330902918203684832716283019655932542975)))
(define-fun x202 ((x157 Int) (x257 Int)) Bool (and (> x257 (x82 x157 x257)) (>= (x82 x157 x257) 0)))
(define-fun x707 ((x157 Int) (x257 Int)) Bool (=> (and (<= 0 x157) (< 0 x257)) (= (> x257 x157) (= x157 (x82 x157 x257)))))
(define-fun x39 ((x157 Int) (x257 Int)) Bool (=> (and (> x257 0) (and (> (+ x257 x257) x157) (<= x257 x157))) (= (- x157 x257) (x82 x157 x257))))
(define-fun x378 ((x157 Int)) Bool (= 0 (x82 0 x157)))
(define-fun x233 ((x157 Int)) Bool (= 0 (x82 x157 1)))
(define-fun x527 ((x157 Int)) Bool (= 0 (x82 x157 x157)))
(define-fun x661 ((x157 Int)) Bool (and (x378 x157) (x233 x157) (x527 x157)))
(define-fun x514 ((x157 Int)) Bool (and (= (x657 115792089237316195423570985008687907853269984665640564039457584007913129639935 x157) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x657 x157 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x211 ((x157 Int)) Bool (and (= (x657 x157 0) x157) (= (x657 0 x157) x157)))
(define-fun x109 ((x157 Int)) Bool (= x157 (x657 x157 x157)))
(define-fun x609 ((x157 Int)) Bool (and (x211 x157) (x109 x157) (x514 x157)))
(define-fun x100 ((x157 Int) (x257 Int)) Bool (= (x657 x157 x257) (x657 x257 x157)))
(define-fun x24 ((x157 Int) (x257 Int)) Bool (and (>= (+ x257 x157) (x657 x157 x257)) (=> (>= x157 0) (>= (x657 x157 x257) x157)) (=> (<= 0 x257) (>= (x657 x157 x257) x257))))
(define-fun x566 ((x157 Int) (x257 Int)) Bool (and (x24 x157 x257) (x100 x157 x257)))
(define-fun x213 ((x12 x269)) Int (x334 x12))
(define-fun x164 ((x12 x269)) Int (ite (= x458 x12) x413 (x213 x12)))
(define-fun x170 ((x12 x269)) Int (ite x401 (x334 x12) (x164 x12)))
(define-fun x738 ((x12 x269)) Int (x170 x12))
(define-fun x169 ((x12 x269)) Int (ite (= x12 x176) x472 (x54 x12)))
(define-fun x586 ((x12 x269)) Int (ite x401 (x54 x12) (ite x684 (x54 x12) (x169 x12))))
(define-fun x305 ((x12 x269)) Int (ite (= x12 x53) x396 (x507 x12)))
(define-fun x673 ((x12 x269)) Int (ite (= x12 x556) x207 (x305 x12)))
(define-fun x438 ((x12 x269)) Int (ite x401 (x507 x12) (ite x684 (x507 x12) (x673 x12))))
(define-fun x43 ((x12 x269)) Int (x250 x12))
(define-fun x709 ((x12 x269)) Int (ite (= x12 x26) x762 (x438 x12)))
(define-fun x648 ((x12 x269)) Int (ite (= x139 x12) x475 (x709 x12)))
(define-fun x536 ((x12 x269)) Int (ite x468 (x438 x12) (ite x455 (x438 x12) (x648 x12))))
(define-fun x513 ((x12 x269)) Int (ite (= x194 x12) x192 (x738 x12)))
(define-fun x51 ((x12 x269)) Int (ite x468 (x170 x12) (x513 x12)))
(define-fun x593 ((x12 x269)) Int (x43 x12))
(define-fun x84 ((x12 x269)) Int (ite (= x343 x12) x477 (x536 x12)))
(define-fun x208 ((x12 x269)) Int (ite (= x12 x127) x294 (x84 x12)))
(define-fun x595 ((x12 x269)) Int (ite x156 (x536 x12) (ite x115 (x536 x12) (x208 x12))))
(define-fun x578 ((x12 x269)) Int (ite (= x345 x12) x603 (x593 x12)))
(define-fun x275 ((x12 x269)) Int (ite x103 (x578 x12) (x593 x12)))
(define-fun x542 ((x12 x269)) Int (ite x433 (x593 x12) (x275 x12)))
(define-fun x656 ((x12 x269)) Int (ite x156 (x593 x12) (x542 x12)))
(define-fun x184 ((x12 x269)) Int (ite (= x12 x581) x228 (x51 x12)))
(define-fun x21 ((x12 x269)) Int (ite x156 (x51 x12) (x184 x12)))
(define-fun x423 ((x12 x269)) Int (ite (= x12 x612) x42 (x595 x12)))
(define-fun x620 ((x12 x269)) Int (ite (= x446 x12) x35 (x423 x12)))
(define-fun x604 ((x12 x269)) Int (ite x492 (x595 x12) (ite x530 (x595 x12) (ite x121 (x595 x12) (x620 x12)))))
(define-fun x569 ((x12 x269)) Int (ite (= x279 x12) x46 (x21 x12)))
(define-fun x77 ((x12 x269)) Int (ite x492 (x21 x12) (x569 x12)))
(define-fun x708 ((x12 Int)) Int (ite (= x12 128) x572 (x668 x12)))
(define-fun x568 ((x12 Int)) Int (ite (= x12 128) x629 (x708 x12)))
(define-fun x415 ((x12 Int)) Int (ite (= x12 160) x572 (x568 x12)))
(define-fun x763 ((x12 Int)) Int (ite (= x12 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x415 x12)))
(define-fun x767 ((x12 Int)) Int (ite (= 132 x12) x757 (x763 x12)))
(define-fun x773 ((x12 Int)) Int (ite (= x12 164) x629 (x767 x12)))
(define-fun x614 ((x12 Int)) Int (x311 x12))
(define-fun x168 ((x12 Int)) Int (ite (= x12 128) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x449 x12)))
(define-fun x105 ((x12 Int)) Int (ite (= x12 132) x758 (x168 x12)))
(define-fun x753 ((x12 Int)) Int (ite (= 164 x12) x639 (x105 x12)))
(define-fun x142 ((x12 Int)) Int (ite (= x12 196) x366 (x753 x12)))
(define-fun x355 ((x12 Int)) Int (ite (= x12 128) x574 (x519 x12)))
(define-fun x694 ((x12 Int)) Int (ite (= x12 128) x432 (x355 x12)))
(define-fun x188 ((x12 Int)) Int (ite (= x12 160) x574 (x694 x12)))
(define-fun x508 ((x12 Int)) Int (ite (= x12 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x188 x12)))
(define-fun x271 ((x12 Int)) Int (ite (= x12 132) x177 (x508 x12)))
(define-fun x206 ((x12 Int)) Int (ite (= x12 164) x432 (x271 x12)))
(define-fun x182 ((x12 Int)) Int (ite (= 128 x12) 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x518 x12)))
(define-fun x132 ((x12 Int)) Int (ite (= x12 132) x758 (x182 x12)))
(define-fun x471 ((x12 Int)) Int (ite (= x12 164) x639 (x132 x12)))
(define-fun x280 ((x12 Int)) Int (ite (= x12 196) x399 (x471 x12)))
(define-fun x195 ((x157 Int) (x257 Int) (x549 Int) (x729 Int)) Bool (=> (and (>= x157 0) (>= x257 0) (>= x549 x157) (<= x257 x729)) (>= (x560 x549 x729) (x560 x157 x257))))
(define-fun x242 ((x157 Int) (x257 Int) (x549 Int) (x729 Int)) Bool (=> (= x157 x549) (= (x560 x157 (- x257 x729)) (- (x560 x157 x257) (x560 x549 x729)))))
(define-fun x80 ((x157 Int)) Bool (=> (and (not (= x157 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (not (= 1889567281 x157)) (not (= x157 3017275065)) (not (= 31576340 x157)) (not (= x157 3121116754)) (not (= x157 76450787359836037641860180984291677749980919077056822294353438043884394381312)) (not (= x157 170435703)) (not (= x157 599290589)) (not (= x157 117300739)) (not (= 1289409798 x157)) (not (= x157 3026235284)) (not (= x157 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= 2376452955 x157)) (not (= x157 2495578189)) (not (= x157 3337024914)) (not (= x157 128110906)) (not (= x157 2514000705)) (> x157 10000) (not (= x157 2835717307)) (not (= x157 4294967295)) (not (= x157 157198259)) (not (= x157 404098525)) (not (= x157 330252341)) (not (= 826074471 x157)) (not (= 1851080549 x157)) (not (= x157 1461501637330902918203684832716283019655932542975))) (not ((_ is x300) (x447 x157)))))
(assert (x594 (- x572 x47)))
(assert (x487 x199))
(assert (x487 x502))
(assert (x195 x383 x432 x646 x47))
(assert (x487 x383))
(assert (x487 x70))
(assert (x242 x373 x399 x383 x432))
(assert (= x217 (and x678 x166)))
(assert (x242 x572 x559 x373 x399))
(assert (x487 x512))
(assert (x594 (- x47 x399)))
(assert (x465 x129))
(assert (x487 x238))
(assert (= x571 (and (not x500) x428)))
(assert (x80 x214))
(assert (x402 x645))
(assert (x594 (- x373 x47)))
(assert (x242 x572 x559 x317 x745))
(assert (x487 x13))
(assert (x465 x178))
(assert (= x340 (or x516 x587)))
(assert (x487 x44))
(assert (x594 (- x764 x572)))
(assert (x242 x432 x383 x317 x745))
(assert (x242 x572 x559 x47 x646))
(assert (x478 x254))
(assert (x537 x559 (- x572 x47)))
(assert (x478 x432))
(assert (= (and x220 x685) x81))
(assert (= (=> (and (and (= x626 x221) (= x47 x60)) (and (= x28 x629) (> x705 0) (= x602 (x657 x485 x382)) (= x485 (x650 x129 x185)) (= (ite (= x353 1) 1 0) x129) (= x382 (ite (= 0 x126) 1 0)) (= (x650 x602 x380) x705) (= (ite (< 31 x126) 1 0) x185))) x640) x97))
(assert (x594 (- x745 x432)))
(assert (x487 x705))
(assert (= (x447 2835717307) (x300 2835717307)))
(assert (x594 (- x383 x399)))
(assert (x80 x672))
(assert (x487 x637))
(assert (x537 x432 (- x383 x745)))
(assert (=> (>= 10000 x700) (= (x447 x700) (x300 x700))))
(assert (x594 (- x47 x432)))
(assert (= (and x318 (not x630)) x268))
(assert (= x420 (and (not x5) x397)))
(assert (= x726 (or x706 x115)))
(assert (x195 x317 x745 x572 x559))
(assert (x242 x646 x47 x745 x317))
(assert (= x318 (and x152 x200)))
(assert (= (x300 157198259) (x447 157198259)))
(assert (x537 x399 (- x373 x317)))
(assert (x594 (- x764 x745)))
(assert (x242 x317 x745 x623 x764))
(assert (x487 x91))
(assert (= (x300 31576340) (x447 31576340)))
(assert (x487 x259))
(assert (x487 x190))
(assert (x594 (- x399 x47)))
(assert (= (x308 (x447 x40)) x40))
(assert (x487 x261))
(assert (x537 x646 (- x47 x745)))
(assert (x195 x764 x623 x572 x559))
(assert (x487 x369))
(assert (x487 x655))
(assert (and (x707 x645 1461501637330902918203684832716283019655932542976) (x202 x645 1461501637330902918203684832716283019655932542976) (x39 x645 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x14 x645 1461501637330902918203684832716283019655932542976)) (x82 x645 1461501637330902918203684832716283019655932542976)) x645))))
(assert (x487 x186))
(assert (x609 x701))
(assert (x242 x623 x764 x572 x559))
(assert (x537 x745 (- x317 x572)))
(assert (= (and x467 x18) x144))
(assert (= x153 (or x375 x492)))
(assert (= (x308 (x300 170435703)) 170435703))
(assert (x487 x75))
(assert (= (=> (and (= x570 x246) (= (= x570 3026235284) x377) (= 3026235284 x337)) (and (=> (and x377 (and (and (<= 0 x196) (= x483 0) x133 (= x283 x464) (= x377 x133) (= (x410 (x447 x639)) x112) (<= x383 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x112 0) (<= x196 1461501637330902918203684832716283019655932542975) (<= 0 x464) (not (> 3017275065 x444)) (= x283 x690) (not (< x444 2376452955)) (>= x476 0) (> 3337024914 x444) (<= x616 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x177) (= x432 x175) (= x196 x758) (= x307 x483) (>= 1461501637330902918203684832716283019655932542975 x464) (not (= x444 3017275065)) (>= x383 0) (= x181 x177) (= x678 (= 0 x383)) (>= 1461501637330902918203684832716283019655932542975 x476) (= 3026235284 x444)) (or (and x678 (= x574 x432)) (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x335) (= (x435 (x560 x432 x383)) x689) (= (= x335 0) x62) (> x29 0) (= (ite (or x667 x497) 1 0) x178) (= x143 (x293 (- x689 1))) (= x502 (ite (not x328) x480 0)) (= x497 (= x432 0)) (= x151 (x14 x689 x432)) (= x199 (ite (not x62) 1 0)) (= (x650 x199 x178) x29) (= x574 x502) (<= 0 x335) (= x480 (x669 (+ x736 1))) (= x667 (= x151 x383)) (= (= x689 0) x328) (= x736 (x14 x143 x335))) (not x678))))) x31) (=> (and (and (= x735 (not x154)) x735 (= x559 x335) (= x113 x383) (= x154 x377)) (not x377)) x547))) x315))
(assert (x609 x485))
(assert (= (=> (and (and (= (+ x372 x459) x715) (= x715 x319) (= (x650 x407 x558) x544) (< (+ x459 x372) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x543 (x447 x61) (x300 3) 0) x458) (= (x213 x458) x145) (= x443 (x657 x544 x523)) (= x523 (ite (= x108 0) 1 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145) (<= 0 x754) (>= x372 0) (= x501 x2) (< 0 x52) (= (x669 (+ x145 x459)) x413) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x372) (= (+ x754 x399) x2) (= x407 (ite (= x654 1) 1 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x754) (>= x145 0) (= x479 x459) (< (+ x399 x754) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (ite (< 31 x108) 1 0) x558) (= x52 (x650 x443 x522))) (and (= x2 x745) (= x461 x715))) x618) x92))
(assert (x487 x145))
(assert (=> (<= x509 10000) (= (x447 x509) (x300 x509))))
(assert (x195 x623 x764 x572 x559))
(assert (=> (<= x712 10000) (= (x447 x712) (x300 x712))))
(assert (x594 (- x572 x432)))
(assert (x487 x717))
(assert (= (x447 2376452955) (x300 2376452955)))
(assert (=> (>= 10000 x214) (= (x447 x214) (x300 x214))))
(assert (x195 x373 x399 x572 x559))
(assert (x7 x129 x185))
(assert (= x103 (and x74 (not x322))))
(assert (x242 x745 x317 x764 x623))
(assert (= (and x17 (not x613)) x624))
(assert (x594 (- x399 x383)))
(assert (= x510 (x308 (x447 x510))))
(assert (x487 x696))
(assert (= 1289409798 (x308 (x300 1289409798))))
(assert (= x248 (x308 (x447 x248))))
(assert (x594 (- x383 x47)))
(assert (x487 x380))
(assert (= (and x273 x266) x724))
(assert (x242 x399 x373 x383 x432))
(assert (x594 (- x745 x572)))
(assert (x487 x479))
(assert (x594 (- x47 x745)))
(assert (x594 (- x559 x47)))
(assert (x487 x538))
(assert (x594 (- x646 x399)))
(assert (x537 x745 (- x317 x47)))
(assert (x487 x659))
(assert (= x309 (x308 (x447 x309))))
(assert (x594 (- x764 x646)))
(assert (x80 x509))
(assert (x487 x236))
(assert (x594 (- x745 x399)))
(assert (x478 x373))
(assert (= 1851080549 (x308 (x300 1851080549))))
(assert (x487 x337))
(assert (= x755 (x308 (x447 x755))))
(assert (x242 x559 x572 x47 x646))
(assert (x80 x40))
(assert (x594 (- x745 x373)))
(assert (x487 x68))
(assert (x487 x382))
(assert (x195 x47 x646 x572 x559))
(assert (x242 x383 x432 x559 x572))
(assert (x487 x353))
(assert (x478 x675))
(assert (x487 x703))
(assert (= (and x147 x742) x73))
(assert (x594 (- x383 x559)))
(assert (x537 x399 (- x373 x745)))
(assert (x594 (- x432 x399)))
(assert (x487 x475))
(assert (x487 x686))
(assert (= (or x156 x592) x533))
(assert (x487 x366))
(assert (x537 x399 (- x373 x559)))
(assert (x7 x199 x178))
(assert (x80 x505))
(assert (x537 x373 (- x399 x572)))
(assert (= x563 (x308 (x447 x563))))
(assert (x195 x47 x646 x432 x383))
(assert (x487 x658))
(assert (x487 x575))
(assert (x594 (- x646 x373)))
(assert (x487 x150))
(assert (x487 x151))
(assert (= x147 (and x404 x752)))
(assert (= (and x613 x17) x38))
(assert (x242 x432 x383 x764 x623))
(assert (x487 x660))
(assert (x465 x368))
(assert (x465 x443))
(assert (x487 x490))
(assert (x242 x47 x646 x317 x745))
(assert (x487 x552))
(assert (x594 (- x317 x559)))
(assert (x537 x572 (- x559 x745)))
(assert (x242 x399 x373 x623 x764))
(assert (x537 x432 (- x383 x559)))
(assert (x487 x263))
(assert (= (x308 (x300 157198259)) 157198259))
(assert (x594 (- x623 x646)))
(assert (x487 x722))
(assert (x487 x452))
(assert (x478 x317))
(assert (x487 x483))
(assert (x487 x654))
(assert (x195 x399 x373 x646 x47))
(assert (= (or (and x541 x641) (and x601 (not x725)) x81 (and x209 x282) x744) x530))
(assert (x487 x701))
(assert (x594 (- x572 x623)))
(assert (x229 x66 x373))
(assert (x537 x383 (- x432 x623)))
(assert (x487 x60))
(assert (x594 (- x572 x399)))
(assert (x537 x623 (- x764 x646)))
(assert (x594 x572))
(assert (x487 x754))
(assert (=> (>= 10000 x248) (= (x300 x248) (x447 x248))))
(assert (= (x447 170435703) (x300 170435703)))
(assert (x242 x432 x383 x559 x572))
(assert (= (and (not x585) x386) x652))
(assert (= x456 (or (and x644 (not x506)) x295)))
(assert (x487 x616))
(assert (x487 x33))
(assert (x594 (- x572 x745)))
(assert (= x732 x173))
(assert (x487 x602))
(assert (x594 (- x383 x572)))
(assert (x242 x373 x399 x432 x383))
(assert (x537 x47 (- x646 x623)))
(assert (and (x707 x616 1461501637330902918203684832716283019655932542976) (x202 x616 1461501637330902918203684832716283019655932542976) (x39 x616 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= (+ (* 1461501637330902918203684832716283019655932542976 (x14 x616 1461501637330902918203684832716283019655932542976)) (x82 x616 1461501637330902918203684832716283019655932542976)) x616))))
(assert (x487 x72))
(assert (= (x308 (x300 330252341)) 330252341))
(assert (x537 x745 (- x317 x399)))
(assert (= (x300 117300739) (x447 117300739)))
(assert (x487 x419))
(assert (x537 x399 (- x373 x646)))
(assert (= (=> (and (or (not x506) x506) (= x506 (= x437 0))) x394) x179))
(assert (= (and x322 x74) x749))
(assert (x487 x20))
(assert (= x545 (and x86 x528)))
(assert (x487 x619))
(assert (x594 (- x646 x317)))
(assert (x7 x368 x107))
(assert (x487 x226))
(assert (x487 x384))
(assert (x487 x629))
(assert (x487 x540))
(assert (x487 x702))
(assert (x465 x710))
(assert (x487 x310))
(assert (x487 x248))
(assert (= (x300 1889567281) (x447 1889567281)))
(assert (x487 x134))
(assert (= (=> (and (> 826074471 x393) (= 599290589 x393) (not (< x232 4)) (> x611 0) (= x639 x256) (= x111 x366) (not (= x393 157198259)) (= (or (and (= true (<= x99 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> 96 x99)) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x99)) x243) (= (x410 (x447 x505)) x611) (= x136 x214) (not (= x393 404098525)) (= 100 x232) (not (= 117300739 x393)) (= (x293 (- x232 4)) x99) (= 128 x579) (= x130 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (and (=> x243 x23) (=> (and (and (= x752 true) (= x59 x214)) (not x243)) (and (=> (and (and (= x146 x256) (= x742 true)) x752) (and (=> (and (and (= (< x529 x366) x338) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x529) (>= x529 0) (= x642 x111) (= x529 (x438 x628)) (= (x543 (x447 x214) (x300 1) 0) x628)) x742) (and (=> x338 x23) (=> (and (= x610 (> x111 x529)) (not x338)) (and (=> (and (not x610) (and (= x198 (x293 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x111))) (= (x543 (x447 x214) (x300 1) 0) x26) (= x762 (x293 (- x529 x111))) (= (x709 x771) x552) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x552) (= (> x552 x198) x613) (>= x552 0) (= (x543 (x447 x256) (x300 1) 0) x771))) (and (=> x613 x23) (=> (and (not x613) (and (= x475 (x669 (+ x552 x111))) (= (> x552 x475) x289))) (and (=> (and (not x289) (and (= x139 (x543 (x447 x256) (x300 1) 0)) (= (< x227 x111) x16) (>= x227 0) (= (x543 (x447 x214) (x300 2) 0) x632) (= x227 (x586 x647)) (= x647 (x543 (x447 x639) x632 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x227))) (and (=> (and (= x18 (< x227 x111)) (not x16)) (and (=> x18 x23) (=> (and (not x18) (and (= x635 (x293 (- x227 x111))) (= 32 x223) (= 1 x437) (= x461 x19) (= x745 x748))) x179))) (=> x16 x23))) (=> x289 x23))))) (=> x610 x23))))) (=> (not x742) x23))) (=> (not x752) x23))))) x562))
(assert (x594 (- x646 x623)))
(assert (x229 x693 x221))
(assert (x487 x484))
(assert (= x166 (and x377 x631)))
(assert (x487 x306))
(assert (x661 x616))
(assert (x242 x399 x373 x572 x559))
(assert (x487 x772))
(assert (= (=> (and (and (= 1889567281 x651) (= x557 x429) (<= x429 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x510 x384) (not (= 826074471 x651)) (not (< x651 826074471)) (= (x543 (x447 x510) (x300 1) 0) x22) (>= x429 0) (= x429 (x604 x22)) (= x760 (x410 (x447 x505))) (> x760 0) (>= 1461501637330902918203684832716283019655932542975 x510)) (and (and (or (and (= x646 x116) x36) (and (and (= (= x47 x495) x114) (= x277 (= 0 x330)) (> x72 0) (= (x435 (x560 x646 x47)) x693) (= x405 (ite (not x743) 1 0)) (= (x14 x693 x221) x336) (= (x650 x405 x306) x72) (= x116 x336) (<= 0 x47) (= (ite (or x114 x277) 1 0) x306) (<= x47 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x14 x693 x646) x495) (= x743 (= 0 x221))) (not x36))) (and (> 826074471 x302) (= (= 0 x221) x36) (= x134 (x410 (x447 x639))) (<= x221 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x302 2376452955) (< x302 170435703) (<= 0 x221) (< 0 x134) (= x646 x330) (= 128110906 x302) (not (= x302 117300739)) (not (= x302 31576340)))) (and (< x390 2376452955) (= (x543 (x447 x369) (x300 3) 0) x718) (<= x369 1461501637330902918203684832716283019655932542975) (= x557 x553) (>= x87 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x87) (not (= x390 1851080549)) (= x646 x87) (> x237 0) (= x237 (x410 (x447 x639))) (= 1889567281 x390) (= (x77 x718) x87) (not (> 826074471 x390)) (= x384 x369) (not (= 1289409798 x390)) (not (< x390 1289409798))))) x525) x640))
(assert (x487 x577))
(assert (x487 x406))
(assert (x478 x221))
(assert (x487 x304))
(assert (= x156 (and (not x377) x631)))
(assert (x537 x745 (- x317 x646)))
(assert (x487 x175))
(assert (=> (>= 10000 x239) (= (x447 x239) (x300 x239))))
(assert (= (x308 (x300 599290589)) 599290589))
(assert (x487 x108))
(assert (x537 x559 (- x572 x317)))
(assert (x195 x559 x572 x432 x383))
(assert (x242 x317 x745 x432 x383))
(assert (x594 (- x399 x432)))
(assert (x566 x716 x4))
(assert (= x525 (=> (and (= x520 x116) (and (= x367 x270) (= x546 (+ x344 x553)) (= (* x596 2) x617) (= x360 (>= x140 x270)) (= x520 x344) (= x596 x316) (= x41 x546) (= (+ x41 x617) x140) (= 2 x281))) x360)))
(assert (x487 x651))
(assert (x487 x623))
(assert (x487 x740))
(assert (x242 x373 x399 x764 x623))
(assert (x487 x87))
(assert (= (x447 2514000705) (x300 2514000705)))
(assert (= x64 (and x621 x11)))
(assert (= x644 (or x455 x665)))
(assert (x487 x755))
(assert (x465 x558))
(assert (x242 x646 x47 x317 x745))
(assert (x80 x248))
(assert (x594 (- x399 x317)))
(assert (x487 x653))
(assert (x487 x245))
(assert (x487 x414))
(assert (x487 x769))
(assert (x195 x47 x646 x623 x764))
(assert (x195 x745 x317 x572 x559))
(assert (x537 x317 x745))
(assert (x242 x47 x646 x432 x383))
(assert (x537 x399 (- x373 x572)))
(assert (x487 x116))
(assert (x594 (- x47 x317)))
(assert (x537 x559 (- x572 x764)))
(assert (= (and x89 x358) x744))
(assert (x487 x63))
(assert (= (and x36 x153) x516))
(assert (x80 x563))
(assert (x487 x407))
(assert (x487 x768))
(assert (x487 x599))
(assert (x487 x563))
(assert (x487 x557))
(assert (= x386 true))
(assert (x487 x559))
(assert (x242 x623 x764 x317 x745))
(assert (x594 (- x623 x399)))
(assert (x487 x503))
(assert (x537 x764 (- x623 x432)))
(assert (x537 x383 (- x432 x399)))
(assert (x487 x391))
(assert (x487 x320))
(assert (x537 x317 (- x745 x383)))
(assert (x537 x559 (- x572 x383)))
(assert (x487 x510))
(assert (x242 x432 x383 x47 x646))
(assert (x80 x758))
(assert (x537 x383 (- x432 x764)))
(assert (x487 x396))
(assert (x242 x317 x745 x764 x623))
(assert (x7 x405 x306))
(assert (x195 x373 x399 x432 x383))
(assert (= x69 (or x401 x714)))
(assert (x537 x764 (- x623 x399)))
(assert (x242 x646 x47 x572 x559))
(assert (x402 x616))
(assert (x487 x583))
(assert (x487 x596))
(assert (x487 x761))
(assert (x242 x764 x623 x432 x383))
(assert (x537 x745 (- x317 x432)))
(assert (= x684 (or (and x427 x267) (and (not x120) x494) x727 (and x299 x350) x297 (and x231 x535) x341 (and x605 (not x128)) (and x95 x622))))
(assert (x661 1461501637330902918203684832716283019655932542976))
(assert (x594 (- x559 x646)))
(assert (x487 x48))
(assert (x242 x317 x745 x383 x432))
(assert (= (x308 (x447 x672)) x672))
(assert (x537 x373 (- x399 x47)))
(assert (x537 x373 (- x399 x559)))
(assert (x487 x336))
(assert (x242 x432 x383 x399 x373))
(assert (=> (>= 10000 x639) (= (x447 x639) (x300 x639))))
(assert (x594 (- x432 x559)))
(assert (x487 x129))
(assert (x242 x47 x646 x572 x559))
(assert (x594 (- x317 x623)))
(assert (x465 x185))
(assert (x487 x214))
(assert (x487 x40))
(assert (x609 x382))
(assert (= (and x298 x676) x121))
(assert (= (=> (and (and (= x335 x101) (= x713 x383)) (and (>= x748 0) (= x4 (ite (= 0 x223) 1 0)) (>= x19 0) (= x711 (x650 x710 x437)) (= x264 x713) (= (ite (= 1 x540) 1 0) x263) (<= 0 x466) (= x710 (x657 x716 x4)) (= x6 x101) (< 0 x711) (= (x543 (x447 x700) (x300 3) 0) x194) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x748) (= (x738 x194) x466) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x19 x317)) (= x716 (x650 x263 x751)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x466) (= x751 (ite (< 31 x223) 1 0)) (= x713 (+ x317 x19)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x366 x748)) (= (x669 (+ x466 x317)) x192) (= (+ x366 x748) x101) (<= x19 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x366 x637))) x315) x394))
(assert (x242 x373 x399 x623 x764))
(assert (= (x300 128110906) (x447 128110906)))
(assert (x80 x639))
(assert (x487 x224))
(assert (x594 (- x47 x559)))
(assert (x487 x480))
(assert (x594 x623))
(assert (= (and x431 x445) x171))
(assert (x537 x399 (- x373 x383)))
(assert (= x622 (and x535 (not x231))))
(assert (x594 x399))
(assert (x465 x380))
(assert (x487 x98))
(assert (x487 x52))
(assert (x487 x697))
(assert (x487 x172))
(assert (x487 x520))
(assert (x487 x485))
(assert (x487 x162))
(assert (= (=> (and (and (< 0 x505) (not (= x174 330252341)) (= x683 x373) (= x76 (not (= x255 x463))) (>= x20 0) (not (= 170435703 x174)) (<= x373 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x246 x440) (>= 1461501637330902918203684832716283019655932542975 x590) (= (< 0 (x410 (x447 x505))) x731) (<= 0 x589) (<= 0 x440) x347 (= x125 x655) (= x384 x463) (<= x505 1461501637330902918203684832716283019655932542975) (<= x440 4294967295) x489 (= x489 (and x76 x687)) (<= x20 1461501637330902918203684832716283019655932542975) (= x286 (x474 (x447 x505))) x731 (< 0 x639) (not (= x505 x639)) (<= 0 x286) (>= x655 0) (not (< x174 170435703)) (>= x384 0) (= x687 (not (= x418 x627))) (< 0 x183) (<= 0 x373) (= x627 x639) (= x575 x418) (>= x590 0) (< x174 826074471) (= x347 (> (x410 (x447 x639)) 0)) (= (x410 (x447 x639)) x183) (= x255 x639) (< x174 2376452955) (>= 1461501637330902918203684832716283019655932542975 x384) (>= 1461501637330902918203684832716283019655932542975 x655) (>= 1461501637330902918203684832716283019655932542975 x639) (= x20 x575) (= x589 (x474 (x447 x639))) (= 404098525 x174)) (and (and (not (= 1289409798 x493)) (= x57 (x543 (x447 x672) (x300 3) 0)) (<= x137 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x703 x683) (= x137 (x334 x57)) (= 1889567281 x493) x163 (>= x137 0) (<= x672 1461501637330902918203684832716283019655932542975) (not (< x493 1289409798)) (not (> 826074471 x493)) (> x63 0) (= (not (= x703 0)) x163) (> 2376452955 x493) (= x137 x260) (not (= x493 1851080549)) (= x672 x384) (= (x410 (x447 x639)) x63) (= x172 0)) (and (and (and (= (x543 (x447 x509) (x300 1) 0) x462) (= x384 x509) x191 (= x688 x363) (<= 0 x363) (= x346 1889567281) (<= x509 1461501637330902918203684832716283019655932542975) (= x363 (x507 x462)) (not (< x346 826074471)) (= x379 x486) (= (>= x379 x554) x191) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x363) (= (x410 (x447 x505)) x364) (not (= 826074471 x346)) (< 0 x364)) (and (and (>= 1461501637330902918203684832716283019655932542975 x577) (= x490 (x334 x515)) (= x688 x10) (< x162 2376452955) (> x272 0) (= x162 1889567281) (not (= 1851080549 x162)) (= x490 x426) (<= x490 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x490) (= x577 x384) (= x272 (x410 (x447 x639))) (not (= 1289409798 x162)) (= (x543 (x447 x577) (x300 3) 0) x515) (not (> 1289409798 x162)) (not (< x162 826074471))) (and (and (= x769 (x410 (x447 x639))) (<= 0 x373) (= x426 x664) (= x320 128110906) (> 170435703 x320) (> 2376452955 x320) (not (= 31576340 x320)) (> 826074471 x320) (> x769 0) (not (= x320 117300739)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x373) (= x79 1) (= (= x373 0) x585)) (or (and (not x585) (and (= x606 (ite (not x454) 1 0)) (= x362 (= x359 x254)) (= x454 (= 0 x373)) (= (x14 x66 1) x359) (<= x254 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x106 0) (= x66 x254) (= x226 (ite x362 1 0)) (>= x254 0) (= (x650 x606 x226) x106) (= x633 (x14 x66 x373)) (= x717 x633))) (and x585 (= x717 1)))))) (and (not (> 170435703 x473)) (not (= 330252341 x473)) (<= x373 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< x473 2376452955) (= x554 x260) (>= x373 0) (not (= 170435703 x473)) (< x473 826074471) (= (x410 (x447 x639)) x436) (< 0 x436) (= x486 x373) (= 404098525 x473))))) x85) x218))
(assert (= (x308 (x447 x353)) x353))
(assert (x80 x389))
(assert (x537 x572 (- x559 x383)))
(assert (= 117300739 (x308 (x300 117300739))))
(assert (x487 x764))
(assert (x487 x434))
(assert (x242 x317 x745 x572 x559))
(assert (x487 x627))
(assert (x487 x762))
(assert (x594 (- x373 x572)))
(assert (x487 x679))
(assert (x487 x416))
(assert (x487 x212))
(assert (x242 x623 x764 x399 x373))
(assert (= (or x342 x652) x200))
(assert (= (x447 16156842317565293874272834530371880720966471053262404558597773956279093428224) (x300 16156842317565293874272834530371880720966471053262404558597773956279093428224)))
(assert (x537 x572 (- x559 x646)))
(assert (x594 (- x559 x745)))
(assert (x242 x623 x764 x646 x47))
(assert (x594 (- x559 x317)))
(assert (x242 x317 x745 x373 x399))
(assert (x242 x373 x399 x47 x646))
(assert (=> (>= 10000 x672) (= (x447 x672) (x300 x672))))
(assert (x537 x373 (- x399 x623)))
(assert (x594 x596))
(assert (= (and x25 (not x141)) x159))
(assert (x195 x764 x623 x399 x373))
(assert (= x356 (and (not x431) x445)))
(assert (x537 x764 (- x623 x559)))
(assert (x537 x623 (- x764 x399)))
(assert (x487 x491))
(assert (= (=> (and (= (= x448 x758) x539) (= x448 (x650 1461501637330902918203684832716283019655932542975 x616))) (and (=> x539 x58) (=> (and (and (and (= x653 (x593 x551)) (= x322 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x653)) (= (x543 (x447 x309) (x300 4) 0) x180) (>= x653 0) (<= x653 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x650 1461501637330902918203684832716283019655932542975 x616) x309) (= x551 (x543 (x447 x758) x180 0))) (or x322 (and (and (= x190 (x650 1461501637330902918203684832716283019655932542975 x616)) (= (x293 (- x653 x574)) x603) (not (< x653 x574)) (= (x543 (x447 x758) x292 0) x345) (= (x543 (x447 x190) (x300 4) 0) x292)) (not x322)))) (not x539)) x600))) x31))
(assert (x594 (- x373 x317)))
(assert (x594 (- x646 x432)))
(assert (x242 x47 x646 x383 x432))
(assert (= (or x276 x545) x730))
(assert (x487 x681))
(assert (x242 x745 x317 x373 x399))
(assert (x487 x608))
(assert (x242 x764 x623 x399 x373))
(assert (x242 x559 x572 x383 x432))
(assert (= (or (and x289 x624) x38 (and x730 x243) (and (not x752) x404) (and x147 (not x742)) x144 x470 (and x73 x338) (and x16 x167)) x455))
(assert (x487 x228))
(assert (x487 x357))
(assert (= (x308 (x447 x389)) x389))
(assert (x242 x399 x373 x559 x572))
(assert (x80 x61))
(assert (x465 x645))
(assert (x465 x201))
(assert (x487 x137))
(assert (x487 x424))
(assert (x537 x399 (- x373 x764)))
(assert (x242 x383 x432 x623 x764))
(assert (x242 x432 x383 x646 x47))
(assert (= (and x428 x500) x27))
(assert (x242 x47 x646 x373 x399))
(assert (x487 x365))
(assert (x594 (- x745 x47)))
(assert (x537 x623 (- x764 x373)))
(assert (x487 x196))
(assert (x487 x88))
(assert (x487 x364))
(assert (= x23 (=> (and (= x332 x223) (= x748 x745) (= x461 x19) (= 0 x437)) x179)))
(assert (x609 x544))
(assert (x487 x639))
(assert (x537 x373 (- x399 x745)))
(assert (x487 x437))
(assert (x487 x408))
(assert (x594 (- x764 x432)))
(assert (x195 x47 x646 x317 x745))
(assert (x594 (- x646 x383)))
(assert (x487 x30))
(assert (x195 x764 x623 x317 x745))
(assert (= (x308 (x447 x758)) x758))
(assert (=> (<= x370 10000) (= (x447 x370) (x300 x370))))
(assert (x478 x512))
(assert (x487 x645))
(assert (x487 x66))
(assert (x195 x559 x572 x623 x764))
(assert (x242 x383 x432 x373 x399))
(assert (x537 x432 (- x383 x317)))
(assert (x594 (- x432 x373)))
(assert (x487 x463))
(assert (x487 x351))
(assert (x537 x383 (- x432 x317)))
(assert (x195 x317 x745 x646 x47))
(assert (x537 x432 (- x383 x623)))
(assert (x487 x359))
(assert (x537 x373 (- x399 x432)))
(assert (= (x308 (x447 x369)) x369))
(assert (x487 x466))
(assert (x487 x662))
(assert (x537 x47 (- x646 x572)))
(assert (x487 x332))
(assert (x195 x399 x373 x432 x383))
(assert (x537 x559 (- x572 x399)))
(assert (= x727 (and x117 x352)))
(assert (x229 x675 x399))
(assert (=> (>= 10000 x755) (= (x447 x755) (x300 x755))))
(assert (x242 x745 x317 x623 x764))
(assert (x242 x373 x399 x646 x47))
(assert (= x203 (or x217 x766)))
(assert (=> (>= 10000 x353) (= (x300 x353) (x447 x353))))
(assert (x487 x695))
(assert (x487 x42))
(assert (x487 x523))
(assert (x537 x47 (- x646 x383)))
(assert (x487 x104))
(assert (x487 x432))
(assert (x487 x290))
(assert (x537 x559 (- x572 x745)))
(assert (x594 (- x745 x623)))
(assert (x242 x764 x623 x745 x317))
(assert (x242 x47 x646 x559 x572))
(assert (= (and (not x18) x467) x665))
(assert (= x58 x600))
(assert (x537 x623 (- x764 x745)))
(assert (x487 x385))
(assert (x465 1461501637330902918203684832716283019655932542975))
(assert (x487 x316))
(assert (x487 x181))
(assert (x537 x764 (- x623 x47)))
(assert (x487 x426))
(assert (x195 x432 x383 x399 x373))
(assert (x242 x317 x745 x646 x47))
(assert (x487 x256))
(assert (x242 x399 x373 x432 x383))
(assert (= (x300 2495578189) (x447 2495578189)))
(assert (x487 x373))
(assert (x487 x143))
(assert (x195 x373 x399 x317 x745))
(assert (x487 x237))
(assert (= (=> (and (not (= 404098525 x453)) (= x262 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= 128 x658) (< 0 x761) (= x453 599290589) (not (= x453 117300739)) (= x639 x712) (= x761 (x410 (x447 x505))) (= x608 x399) (not (= 0 x459)) (> 826074471 x453) (= x739 x248) (= x241 (x293 (- x288 4))) (= x288 100) (not (< x288 4)) (not (= x453 157198259)) (= x427 (or (and (< x241 96) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x241))) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x241)))) (and (=> x427 x155) (=> (and (and (= x248 x768) (= x120 true)) (not x427)) (and (=> (and (and (= x128 true) (= x712 x165)) x120) (and (=> (and (and (= (x507 x331) x245) (= x704 x608) (<= x245 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x543 (x447 x248) (x300 1) 0) x331) (<= 0 x245) (= x299 (> x399 x245))) x128) (and (=> (and (= x5 (> x608 x245)) (not x299)) (and (=> (and (and (= x636 (> x104 x765)) (= (x543 (x447 x248) (x300 1) 0) x53) (<= x104 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x104 (x305 x499)) (= (x543 (x447 x712) (x300 1) 0) x499) (= x396 (x293 (- x245 x608))) (>= x104 0) (= (x293 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x608)) x765)) (not x5)) (and (=> x636 x155) (=> (and (not x636) (and (= (> x104 x207) x231) (= (x669 (+ x608 x104)) x207))) (and (=> (and (and (= x391 (x54 x285)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391) (>= x391 0) (= x285 (x543 (x447 x639) x32 0)) (= x32 (x543 (x447 x248) (x300 2) 0)) (= x95 (> x608 x391)) (= (x543 (x447 x712) (x300 1) 0) x556)) (not x231)) (and (=> x95 x155) (=> (and (not x95) (= x117 (> x608 x391))) (and (=> x117 x155) (=> (and (not x117) (and (= 32 x108) (= (x293 (- x391 x608)) x472) (= (x543 (x447 x248) (x300 2) 0) x251) (= (x543 (x447 x639) x251 0) x176) (= x754 x254) (= x372 x373) (= 1 x522))) x680))))) (=> x231 x155))))) (=> x5 x155))) (=> x299 x155))) (=> (not x128) x155))) (=> (not x120) x155))))) x225))
(assert (x195 x745 x317 x432 x383))
(assert (x195 x432 x383 x623 x764))
(assert (x487 x572))
(assert (= (and (not x641) x541) x358))
(assert (= 2514000705 (x308 (x300 2514000705))))
(assert (x537 x317 (- x745 x559)))
(assert (x242 x383 x432 x572 x559))
(assert (x242 x559 x572 x646 x47))
(assert (x242 x383 x432 x764 x623))
(assert (= (x300 3017275065) (x447 3017275065)))
(assert (x594 x317))
(assert (= x555 (and (not x313) x321)))
(assert (x537 x383 (- x432 x745)))
(assert (x594 (- x317 x764)))
(assert (x242 x47 x646 x764 x623))
(assert (x80 x190))
(assert (x487 x698))
(assert (x594 (- x559 x383)))
(assert (x242 x623 x764 x373 x399))
(assert (x594 (- x646 x572)))
(assert (x594 x47))
(assert (x487 x737))
(assert (x487 x496))
(assert (x487 x683))
(assert (= (x447 330252341) (x300 330252341)))
(assert (x537 x383 (- x432 x572)))
(assert (x594 (- x646 x559)))
(assert (x537 x373 (- x399 x317)))
(assert (x487 x291))
(assert (x537 x623 x764))
(assert (x487 x534))
(assert (x594 (- x383 x745)))
(assert (= (x300 404098525) (x447 404098525)))
(assert (x487 x664))
(assert (x594 (- x373 x383)))
(assert (= (x308 (x447 x239)) x239))
(assert (x487 x246))
(assert (x537 x572 (- x559 x47)))
(assert (= x65 (and x726 x741)))
(assert (x487 x704))
(assert (x487 x346))
(assert (x242 x745 x317 x383 x432))
(assert (x487 x387))
(assert (x487 x102))
(assert (x594 (- x623 x745)))
(assert (x487 x255))
(assert (x487 x319))
(assert (x487 x317))
(assert (= (=> (and (or (not x741) x741) (= x741 (= 0 x532))) x723) x15))
(assert (x195 x572 x559 x646 x47))
(assert (x487 x309))
(assert (x487 x758))
(assert (x594 (- x745 x559)))
(assert (x242 x432 x383 x623 x764))
(assert (x242 x646 x47 x432 x383))
(assert (= 1461501637330902918203684832716283019655932542975 (x308 (x300 1461501637330902918203684832716283019655932542975))))
(assert (x594 x559))
(assert (x594 (- x559 x764)))
(assert (= 2835717307 (x308 (x300 2835717307))))
(assert (x487 x746))
(assert (x195 x572 x559 x317 x745))
(assert (x487 x99))
(assert (x242 x572 x559 x764 x623))
(assert (x537 x317 (- x745 x373)))
(assert (=> (>= 10000 x40) (= (x300 x40) (x447 x40))))
(assert (= (and (not x427) x267) x494))
(assert (x465 x263))
(assert (x537 x646 (- x47 x317)))
(assert (x242 x745 x317 x47 x646))
(assert (x242 x47 x646 x745 x317))
(assert (x242 x432 x383 x745 x317))
(assert (=> (<= x256 10000) (= (x300 x256) (x447 x256))))
(assert (x594 (- x432 x623)))
(assert (x478 x113))
(assert (x242 x745 x317 x572 x559))
(assert (x609 x523))
(assert (x242 x646 x47 x383 x432))
(assert (=> (>= 10000 x758) (= (x300 x758) (x447 x758))))
(assert (x537 x47 (- x646 x764)))
(assert (x242 x646 x47 x559 x572))
(assert (x242 x383 x432 x745 x317))
(assert (x487 x254))
(assert (x537 x432 (- x383 x373)))
(assert (x487 x258))
(assert (= x770 (and (not x209) x282)))
(assert (x487 x486))
(assert (x242 x764 x623 x572 x559))
(assert (x487 x509))
(assert (x195 x399 x373 x623 x764))
(assert (x566 x485 x382))
(assert (x242 x399 x373 x317 x745))
(assert (x537 x432 x383))
(assert (x487 x371))
(assert (x594 (- x623 x373)))
(assert (x487 x765))
(assert (x487 x625))
(assert (x487 x264))
(assert (x594 (- x432 x646)))
(assert (x537 x47 (- x646 x559)))
(assert (x487 x461))
(assert (= (x308 (x300 31576340)) 31576340))
(assert (= x723 (=> (and (and (= (ite (> x538 31) 1 0) x107) (= x70 (x650 x548 x532)) (> x70 0) (= (x657 x261 x701) x548) (= x701 (ite (= x538 0) 1 0)) (= x368 (ite (= x370 1) 1 0)) (= x261 (x650 x368 x107)) (= x574 x406)) (and (= x442 x113) (= x559 x425))) x547)))
(assert (x487 x395))
(assert (x594 (- x745 x764)))
(assert (= x492 (and x533 (not x670))))
(assert (x195 x623 x764 x399 x373))
(assert (x487 x8))
(assert (= (x447 3337024914) (x300 3337024914)))
(assert (x594 (- x432 x572)))
(assert (x7 x583 x236))
(assert (x487 x548))
(assert (x195 x373 x399 x623 x764))
(assert (x487 x558))
(assert (x537 x47 (- x646 x432)))
(assert (= (x300 1851080549) (x447 1851080549)))
(assert (x594 (- x764 x317)))
(assert (x487 x19))
(assert (x487 x413))
(assert (= (and (not x89) x358) x685))
(assert (x594 (- x317 x383)))
(assert (x487 x672))
(assert (x537 x432 (- x383 x764)))
(assert (x242 x373 x399 x317 x745))
(assert (=> (<= x369 10000) (= (x300 x369) (x447 x369))))
(assert (x537 x47 (- x646 x745)))
(assert (x242 x572 x559 x432 x383))
(assert (x195 x646 x47 x317 x745))
(assert (x594 (- x432 x47)))
(assert (x195 x559 x572 x646 x47))
(assert (= (x308 (x447 x214)) x214))
(assert (x242 x559 x572 x317 x745))
(assert (= (and (not x243) x730) x404))
(assert (x594 x764))
(assert (x487 x690))
(assert (= (or (and x726 (not x741)) x65) x592))
(assert (= (and x636 x420) x297))
(assert (x487 x376))
(assert (= (=> (and (or x135 (not x135)) (= (= x522 0) x135)) x92) x680))
(assert (= (x308 (x447 x505)) x505))
(assert (x195 x623 x764 x646 x47))
(assert (x242 x572 x559 x646 x47))
(assert (x478 x34))
(assert (x487 x283))
(assert (x537 x373 (- x399 x764)))
(assert (= (=> (and (= x273 (= 0 x380)) (or x273 (not x273))) x97) x392))
(assert (x487 x693))
(assert (= (=> (and (= x247 x108) (= x522 0) (= x254 x754) (= x372 x373)) x680) x155))
(assert (x594 2))
(assert (x487 x411))
(assert (x229 x675 x254))
(assert (x487 x498))
(assert (x487 x689))
(assert (x537 x646 (- x47 x764)))
(assert (x487 x638))
(assert (x487 x185))
(assert (x487 x399))
(assert (= (x308 (x447 x577)) x577))
(assert (x242 x383 x432 x317 x745))
(assert (x487 x522))
(assert (x7 x263 x751))
(assert (x594 (- x47 x383)))
(assert (x594 (- x572 x646)))
(assert (x487 x160))
(assert (x478 x646))
(assert (x80 x256))
(assert (= (and x605 x128) x350))
(assert (x465 x306))
(assert (x487 x476))
(assert (x7 x710 x437))
(assert (x487 x677))
(assert (x537 x317 (- x745 x572)))
(assert (x195 x383 x432 x399 x373))
(assert (= x321 (and x219 (not x561))))
(assert (x487 x274))
(assert (x537 x623 (- x764 x47)))
(assert (x242 x623 x764 x559 x572))
(assert (= x230 (and x517 x159)))
(assert (= x401 (and x200 (not x152))))
(assert (x537 x432 (- x383 x399)))
(assert (= x712 (x308 (x447 x712))))
(assert (x478 x335))
(assert (x229 x512 x317))
(assert (x487 x444))
(assert (x537 x559 (- x572 x623)))
(assert (x242 x383 x432 x47 x646))
(assert (x487 x294))
(assert (x594 (- x646 x745)))
(assert (= x639 (x308 (x447 x639))))
(assert (x487 x124))
(assert (x487 x405))
(assert (= (x300 76450787359836037641860180984291677749980919077056822294353438043884394381312) (x447 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x537 x383 (- x432 x47)))
(assert (x487 x323))
(assert (x487 x326))
(assert (x537 x572 x559))
(assert (x487 x46))
(assert (x594 (- x623 x432)))
(assert (x487 x174))
(assert (x487 x646))
(assert (x537 x399 (- x373 x432)))
(assert (x487 x448))
(assert (x537 x572 (- x559 x399)))
(assert (x487 x10))
(assert (x7 x606 x226))
(assert (x487 x425))
(assert (x537 x764 (- x623 x646)))
(assert (= (and x725 x601) x541))
(assert (x487 x312))
(assert (x487 x205))
(assert (not x218))
(assert (= (x300 1289409798) (x447 1289409798)))
(assert (x487 x198))
(assert (x242 x745 x317 x399 x373))
(assert (x537 x399 (- x373 x47)))
(assert (x487 x728))
(assert (=> (<= x61 10000) (= (x447 x61) (x300 x61))))
(assert (x242 x373 x399 x745 x317))
(assert (x537 x764 (- x623 x572)))
(assert (x487 x633))
(assert (x537 x623 (- x764 x559)))
(assert (=> (>= 10000 x563) (= (x300 x563) (x447 x563))))
(assert (x537 x383 (- x432 x559)))
(assert (x195 x399 x373 x317 x745))
(assert (= (or x530 x770 x121) x266))
(assert (x537 x764 (- x623 x745)))
(assert (x537 x646 x47))
(assert (x594 (- x399 x764)))
(assert (x242 x764 x623 x383 x432))
(assert (x487 x247))
(assert (= x428 (or x193 x756)))
(assert (= (x308 (x300 4294967295)) 4294967295))
(assert (x537 x432 (- x383 x572)))
(assert (x594 x745))
(assert (x537 x646 (- x47 x559)))
(assert (x195 x317 x745 x432 x383))
(assert (x487 x390))
(assert (x537 x745 (- x317 x623)))
(assert (= x375 (or (and (not x273) x266) x724)))
(assert (= x74 (and x203 (not x539))))
(assert (x594 (- x559 x373)))
(assert (x80 x510))
(assert (x487 x118))
(assert (= (=> (and (= x326 x432) (not (= x75 826074471)) (<= x383 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x293 (- x335 x432)) x102) (= x96 (x293 (- x335 x432))) (= x503 (x293 (- x599 4))) (<= 0 x383) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x357) (= (x543 (x447 x370) (x300 3) 0) x581) (not (= 1889567281 x75)) (= x599 68) (not (= 2514000705 x75)) (= (x650 1461501637330902918203684832716283019655932542975 x616) x370) (not (< x588 x574)) (= (x293 (- x383 x574)) x385) (= (x51 x581) x588) (= x389 x177) (not (> 826074471 x75)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x335) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x588) (= 2835717307 x75) (= x323 128) (= (x293 (- x588 x574)) x228) (not (> x432 x335)) (= (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x503) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x503) true) (< x503 64))) x141) (< 0 x686) (= x205 (x293 (- x383 x574))) (>= x335 0) (not (< x599 4)) (= (x410 (x447 x505)) x686) (<= 0 x588)) (and (=> x141 x1) (=> (and (and (= x389 x698) (= x517 (= x389 x177))) (not x141)) (and (=> (not x517) x1) (=> (and x517 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x734) (= x734 (x536 x580)) (= x326 x450) (<= 0 x734) (= x580 (x543 (x447 x639) (x300 1) 0)) (= x252 (> x432 x734)))) (and (=> (and (not x252) (= x621 (> x326 x734))) (and (=> x621 x1) (=> (and (and (= x598 (x543 (x447 x389) (x300 1) 0)) (= (> x414 x419) x431) (= x414 (x84 x598)) (= x343 (x543 (x447 x639) (x300 1) 0)) (= (x293 (- x734 x326)) x477) (>= x414 0) (<= x414 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x419 (x293 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x326)))) (not x621)) (and (=> (and (not x431) (and (= (x669 (+ x414 x326)) x294) (= (< x294 x414) x55))) (and (=> x55 x1) (=> (and (not x55) (and (= x385 x442) (= x532 1) (= 32 x538) (= x425 x102) (= (x543 (x447 x389) (x300 1) 0) x127))) x15))) (=> x431 x1))))) (=> x252 x1))))))) x58))
(assert (x537 x559 (- x572 x646)))
(assert (x478 x693))
(assert (= x470 (and x610 x325)))
(assert (x242 x745 x317 x559 x572))
(assert (x487 x745))
(assert (x487 x477))
(assert (= (x447 826074471) (x300 826074471)))
(assert (x229 x143 x335))
(assert (= 3017275065 (x308 (x300 3017275065))))
(assert (= (and x539 x203) x433))
(assert (x465 x583))
(assert (x195 x317 x745 x399 x373))
(assert (= x403 (and x352 (not x117))))
(assert (x594 (- x399 x745)))
(assert (x195 x745 x317 x399 x373))
(assert (x487 x107))
(assert (x487 x700))
(assert (= x282 (and x685 (not x220))))
(assert (x478 1))
(assert (x487 x177))
(assert (x594 (- x317 x646)))
(assert (x487 x451))
(assert (x195 x623 x764 x317 x745))
(assert (x487 x574))
(assert (x609 x261))
(assert (= (or x456 x468) x631))
(assert (= (and (not x86) x528) x276))
(assert (= 826074471 (x308 (x300 826074471))))
(assert (= x219 (and x533 x670)))
(assert (x487 x262))
(assert (= 3121116754 (x308 (x300 3121116754))))
(assert (x594 (- x373 x623)))
(assert (= x352 (and (not x95) x622)))
(assert (x487 x158))
(assert (x487 x472))
(assert (=> (>= 10000 x577) (= (x300 x577) (x447 x577))))
(assert (x487 x234))
(assert (x594 (- x317 x47)))
(assert (= x766 (and x166 (not x678))))
(assert (= (and x585 x386) x342))
(assert (= (x300 599290589) (x447 599290589)))
(assert (x594 (- x559 x623)))
(assert (x487 x464))
(assert (x487 x126))
(assert (x478 x674))
(assert (x487 x564))
(assert (x487 x335))
(assert (x487 x284))
(assert (x242 x47 x646 x623 x764))
(assert (x609 x716))
(assert (x487 x94))
(assert (= x397 (and x350 (not x299))))
(assert (= x17 (and (not x610) x325)))
(assert (x487 x71))
(assert (x487 x96))
(assert (=> (>= 10000 x505) (= (x300 x505) (x447 x505))))
(assert (x465 x199))
(assert (x242 x646 x47 x764 x623))
(assert (x594 (- x47 x623)))
(assert (x594 (- x764 x47)))
(assert (x594 (- x572 x373)))
(assert (= (x308 (x300 76450787359836037641860180984291677749980919077056822294353438043884394381312)) 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x242 x399 x373 x47 x646))
(assert (x242 x559 x572 x399 x373))
(assert (x487 x579))
(assert (and (x149 x66 1) (=> (and (> x66 0) (> 1 0)) (and (>= x66 (* 1 (x14 x66 1))) (< (- x66 1) (* 1 (x14 x66 1))))) (x441 x66 1) (x138 x66 1) (x3 x66 1) (= (- x66 (x650 0 x66)) (* 1 (x14 x66 1)))))
(assert (=> (<= x510 10000) (= (x300 x510) (x447 x510))))
(assert (x242 x572 x559 x399 x373))
(assert (x487 x450))
(assert (x609 x4))
(assert (= x37 (and x313 x321)))
(assert (x487 x436))
(assert (x487 x440))
(assert (x537 x572 (- x559 x317)))
(assert (x487 x207))
(assert (x7 x548 x532))
(assert (x465 x405))
(assert (x487 x330))
(assert (x242 x572 x559 x623 x764))
(assert (x487 x187))
(assert (x487 x34))
(assert (x487 x50))
(assert (x487 x736))
(assert (= (x447 4294967295) (x300 4294967295)))
(assert (x229 x34 x461))
(assert (x487 x35))
(assert (x594 (- x764 x399)))
(assert (x465 x602))
(assert (x487 x588))
(assert (x487 x505))
(assert (x594 x646))
(assert (x195 x432 x383 x317 x745))
(assert (x594 (- x317 x432)))
(assert (x537 x745 (- x317 x559)))
(assert (x537 x47 (- x646 x399)))
(assert (x242 x572 x559 x383 x432))
(assert (x487 x130))
(assert (= (=> (and (not (= x702 826074471)) (= x46 (x293 (- x291 x572))) (not (< x291 x572)) (= (x293 (- x113 x572)) x94) (= x452 (x293 (- x559 x629))) (>= x113 0) (= (x293 (- x625 4)) x98) (= x697 (x293 (- x113 x572))) (not (< x559 x629)) (= x33 128) (= x757 x755) (>= x291 0) (= (x650 1461501637330902918203684832716283019655932542975 x645) x353) (= x279 (x543 (x447 x353) (x300 3) 0)) (not (= x629 0)) (= (x410 (x447 x505)) x662) (>= x559 0) (= x482 x629) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x291) (= x625 68) (> x662 0) (= (x293 (- x559 x629)) x733) (= x298 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x98) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x98)) (< x98 64)))) (<= x559 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= 1889567281 x702)) (= x702 2835717307) (= x259 76450787359836037641860180984291677749980919077056822294353438043884394381312) (not (> 4 x625)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113) (not (= 2514000705 x702)) (= x291 (x21 x279)) (not (> 826074471 x702))) (and (=> (and (and (= (= x757 x755) x725) (= x755 x189)) (not x298)) (and (=> (and x725 (and (<= 0 x638) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x638) (= (> x629 x638) x641) (= (x595 x329) x638) (= x482 x150) (= (x543 (x447 x639) (x300 1) 0) x329))) (and (=> x641 x381) (=> (and (not x641) (= (< x638 x482) x89)) (and (=> x89 x381) (=> (and (not x89) (and (= (x543 (x447 x639) (x300 1) 0) x612) (= x42 (x293 (- x638 x482))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x278) (= (x293 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x482)) x534) (= (> x278 x534) x220) (= x278 (x423 x457)) (<= 0 x278) (= (x543 (x447 x755) (x300 1) 0) x457))) (and (=> x220 x381) (=> (and (not x220) (and (= (< x35 x278) x209) (= x35 (x669 (+ x482 x278))))) (and (=> x209 x381) (=> (and (and (= x446 (x543 (x447 x755) (x300 1) 0)) (= 32 x126) (= x697 x626) (= x733 x60) (= x380 1)) (not x209)) x392))))))))) (=> (not x725) x381))) (=> (and (and (= x380 0) (= x126 x496) (= (x293 (- x559 x629)) x224) (= x697 x626) (= x224 x60)) x298) x392))) x122))
(assert (x229 x689 x432))
(assert (x242 x559 x572 x764 x623))
(assert (x487 x591))
(assert (x487 x757))
(assert (x80 x309))
(assert (x487 x222))
(assert (x195 x572 x559 x623 x764))
(assert (x242 x373 x399 x572 x559))
(assert (x594 (- x399 x572)))
(assert (x195 x432 x383 x572 x559))
(assert (x242 x432 x383 x572 x559))
(assert (x465 x407))
(assert (x487 x760))
(assert (x487 x4))
(assert (x537 x745 (- x317 x764)))
(assert (x594 (- x745 x383)))
(assert (x537 x317 (- x745 x764)))
(assert (x487 x635))
(assert (x487 x716))
(assert (x594 (- x399 x646)))
(assert (x487 x241))
(assert (x594 (- x399 x623)))
(assert (x594 (- x623 x559)))
(assert (= x267 (or x469 x268)))
(assert (x7 x679 x201))
(assert (x7 x312 x398))
(assert (x195 x646 x47 x623 x764))
(assert (x487 x189))
(assert (x465 x107))
(assert (x487 x398))
(assert (x80 x700))
(assert (= 404098525 (x308 (x300 404098525))))
(assert (x487 x221))
(assert (x242 x623 x764 x432 x383))
(assert (x594 (- x317 x399)))
(assert (x537 x572 (- x559 x432)))
(assert (x537 x373 (- x399 x646)))
(assert (x195 x623 x764 x432 x383))
(assert (x242 x559 x572 x745 x317))
(assert (x487 x759))
(assert (x242 x373 x399 x559 x572))
(assert (x487 x691))
(assert (x487 x748))
(assert (x594 (- x623 x317)))
(assert (x487 x361))
(assert (x594 (- x432 x317)))
(assert (x566 x261 x701))
(assert (= x509 (x308 (x447 x509))))
(assert (x594 (- x572 x317)))
(assert (= x1 (=> (and (= x538 x158) (= x532 0) (= x385 x442) (= x222 (x293 (- x335 x432))) (= x222 x425)) x15)))
(assert (x537 x317 (- x745 x646)))
(assert (= (x300 1461501637330902918203684832716283019655932542975) (x447 1461501637330902918203684832716283019655932542975)))
(assert (= (x300 3026235284) (x447 3026235284)))
(assert (x487 x112))
(assert (x594 (- x764 x383)))
(assert (x487 x529))
(assert (x537 x317 (- x745 x47)))
(assert (x594 (- x373 x764)))
(assert (= (or x403 x684) x524))
(assert (x487 x178))
(assert (= x85 (=> (and (and (and (not (> 826074471 x498)) (< 0 x728) (>= x118 0) (= x88 0) (= x316 x68) (= (x543 (x447 x40) (x300 1) 0) x110) x123 (= x118 x750) (= x498 1889567281) (>= 1461501637330902918203684832716283019655932542975 x40) (= x728 (x410 (x447 x505))) (= x316 x234) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x118) (not (= x498 826074471)) (= x40 x384) (= x118 (x507 x110)) (= (not (= x68 0)) x123)) (and (and (< x695 2376452955) (<= 0 x365) (not (= 1289409798 x695)) (= x750 x45) (<= x365 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x659 0) (<= x239 1461501637330902918203684832716283019655932542975) (= x124 x365) (= (x543 (x447 x239) (x300 3) 0) x719) (= x659 (x410 (x447 x639))) (= x239 x384) (not (= 1851080549 x695)) (not (> 826074471 x695)) (= 1889567281 x695) (not (< x695 1289409798)) (= (x334 x719) x365)) (and (= x152 (= 1851080549 x48)) (= x354 x376) (= x384 x181) (= x395 x488) (= x434 x690) (= x484 x307) (= x125 x212) (= x124 x623) (= (x560 x623 x764) x421) (= x575 x758) (= x677 x374) (= x764 x316) (= (+ x45 x421) x367) (= x246 x48) (= x721 x565) (= x664 x591) (= x408 x740) (= x175 x10) (= 1851080549 x643)))) (= x717 x234)) (and (=> (and (not x152) (and (= x745 x254) (= x56 x152) x324 (= x461 x373) (= (not x56) x324))) x618) (=> (and x152 (and (or (and (and (= (ite (not x216) 1 0) x583) (= (x14 x675 x254) x50) (< 0 x387) (= x186 (x14 x675 x399)) (<= x254 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= x373 x186) x521) (= (ite (or x521 x720) 1 0) x236) (= x387 (x650 x583 x236)) (>= x254 0) (= x216 (= 0 x254)) (= x720 (= x399 0)) (= (x435 (x560 x399 x373)) x675) (= x50 x459)) (not x630)) (and x630 (= x399 x459))) (and (<= x373 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x175 x399) (= x371 x307) x9 (= x630 (= x373 0)) (= x181 x61) (>= 1461501637330902918203684832716283019655932542975 x49) (not (< x411 826074471)) (= x371 0) (= 1851080549 x411) (<= 0 x49) (not (= x411 1289409798)) (= x758 x739) (= (x410 (x447 x639)) x737) (not (< x411 1289409798)) (> x737 0) (<= x61 1461501637330902918203684832716283019655932542975) (= x160 x746) (< x411 2376452955) (= x160 x690) (= x152 x9) (<= x739 1461501637330902918203684832716283019655932542975) (<= 0 x746) (<= x746 1461501637330902918203684832716283019655932542975) (>= x739 0) (>= x373 0)))) x225)))))
(assert (x537 x559 (- x572 x373)))
(assert (= x706 (and x356 (not x55))))
(assert (= x601 (and (not x298) x676)))
(assert (x537 x745 (- x317 x373)))
(assert (= (x300 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x447 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x11 (and (not x252) x230)))
(assert (x594 (- x432 x764)))
(assert (x229 x674 x113))
(assert (x195 x745 x317 x623 x764))
(assert (= (=> (and (= x126 x496) (= x699 x60) (= x697 x626) (= (x293 (- x559 x629)) x699) (= x380 0)) x392) x381))
(assert (x487 x493))
(assert (= (=> (and (= x8 x246) (= 3121116754 x290) (= (= x8 3121116754) x670)) (and (=> (and x670 (and (>= 1461501637330902918203684832716283019655932542975 x44) (> x696 0) (>= 1461501637330902918203684832716283019655932542975 x757) (= x561 (= x758 x645)) (= x758 x772) (= x238 3121116754) (not (< x238 3017275065)) (>= 1461501637330902918203684832716283019655932542975 x416) (<= x645 1461501637330902918203684832716283019655932542975) (= x564 0) (= x296 x670) (= x690 x691) (not (< x238 2376452955)) (> 3337024914 x238) (= x564 x307) (<= 0 x772) (= x696 (x410 (x447 x639))) (not (= x238 3026235284)) (<= 0 x44) (>= x416 0) (= x691 x44) (= x181 x757) (= x591 x572) x296 (<= x772 1461501637330902918203684832716283019655932542975) (not (= x238 3017275065)))) (and (=> x561 x173) (=> (and (and (and (= (x656 x615) x361) (= x563 (x650 1461501637330902918203684832716283019655932542975 x645)) (= (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x361) x313) (<= 0 x361) (<= x361 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x412 (x543 (x447 x563) (x300 4) 0)) (= (x543 (x447 x758) x412 0) x615)) (or (and (not x313) (and (not (> x572 x361)) (= (x650 1461501637330902918203684832716283019655932542975 x645) x619) (= x13 (x293 (- x361 x572))))) x313)) (not x561)) x732))) (=> (and (and (= x221 x113) (= x47 x559) (= (not x567) x582) x582 (= x670 x567)) (not x670)) x640))) x547))
(assert (x537 x623 (- x764 x317)))
(assert (x242 x572 x559 x745 x317))
(assert (x487 x442))
(assert (= (and x5 x397) x341))
(assert (x594 (- x572 x764)))
(assert (x594 (- x47 x764)))
(assert (x195 x646 x47 x399 x373))
(assert (= x25 (or x433 x287)))
(assert (x242 x764 x623 x47 x646))
(assert (x195 x399 x373 x572 x559))
(assert (x487 x113))
(assert (x537 x317 (- x745 x623)))
(assert (x566 x544 x523))
(assert (x80 x239))
(assert (x195 x559 x572 x399 x373))
(assert (x487 x495))
(assert (= (or x749 x103) x287))
(assert (x242 x317 x745 x559 x572))
(assert (x594 (- x745 x646)))
(assert (x487 x354))
(assert (x195 x432 x383 x646 x47))
(assert (x487 x473))
(assert (x537 x623 (- x764 x432)))
(assert (= x618 (=> (and (= 2495578189 x660) (= (= x30 2495578189) x265) (= x30 x246)) (and (=> (and x265 (and (or (and x86 (= x317 x366)) (and (and (= x679 (ite (not x131) 1 0)) (= (x293 (- x512 1)) x34) (< 0 x451) (= x439 (= x512 0)) (= x351 (ite (not x439) x91 0)) (= x512 (x435 (x560 x317 x745))) (= x366 x351) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x745) (>= x745 0) (= x201 (ite (or x215 x666) 1 0)) (= (= x461 0) x131) (= x451 (x650 x679 x201)) (= (x669 (+ x681 1)) x91) (= (= x304 x745) x215) (= (= 0 x317) x666) (= x681 (x14 x34 x461)) (= (x14 x512 x317) x304)) (not x86))) (and (<= 0 x759) (= x86 (= x461 0)) (= x258 x690) (> 3017275065 x722) (= x491 (x410 (x447 x639))) (= x591 x317) (>= 1461501637330902918203684832716283019655932542975 x759) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x461) (= x258 x759) (> 3337024914 x722) (= x400 0) (= x700 x181) (> x491 0) (<= 0 x71) (>= 1461501637330902918203684832716283019655932542975 x136) (not (> 2376452955 x722)) (>= 1461501637330902918203684832716283019655932542975 x71) (not (= x722 2376452955)) (= x265 x240) x240 (= x722 2495578189) (= x400 x307) (= x136 x758) (<= x700 1461501637330902918203684832716283019655932542975) (<= 0 x461) (<= 0 x136)))) x562) (=> (and (not x265) (and (= (not x430) x607) (= x461 x383) (= x335 x745) (= x265 x430) x607)) x315)))))
(assert (x487 x393))
(assert (x465 x312))
(assert (= (x308 (x300 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= 2376452955 (x308 (x300 2376452955))))
(assert (x242 x559 x572 x432 x383))
(assert (x242 x623 x764 x47 x646))
(assert (= (and (not x289) x624) x167))
(assert (x242 x646 x47 x623 x764))
(assert (= (and x167 (not x16)) x467))
(assert (x487 x626))
(assert (x487 x146))
(assert (= x325 (and x73 (not x338))))
(assert (x487 x111))
(assert (x487 x429))
(assert (x487 x688))
(assert (x195 x373 x399 x646 x47))
(assert (x537 x764 (- x623 x317)))
(assert (x537 x47 (- x646 x317)))
(assert (x465 x437))
(assert (x487 x192))
(assert (x487 x482))
(assert (x661 x645))
(assert (x537 x383 (- x432 x373)))
(assert (x242 x623 x764 x745 x317))
(assert (x465 x616))
(assert (x537 x764 (- x623 x373)))
(assert (x229 x674 x572))
(assert (x7 x407 x558))
(assert (= (x308 (x447 x190)) x190))
(assert (x537 x432 (- x383 x47)))
(assert (= x587 (and x153 (not x36))))
(assert (x487 x61))
(assert (x465 x522))
(assert (x229 x693 x646))
(assert (x537 x764 (- x623 x383)))
(assert (x594 x383))
(assert (= (or x555 x37) x193))
(assert (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 (x308 (x300 16156842317565293874272834530371880720966471053262404558597773956279093428224))))
(assert (x465 x398))
(assert (=> (>= 10000 x190) (= (x447 x190) (x300 x190))))
(assert (x242 x559 x572 x373 x399))
(assert (x487 x278))
(assert (x487 x526))
(assert (x465 x226))
(assert (x465 x679))
(assert (x487 x643))
(assert (x594 (- x572 x383)))
(assert (and (= (x560 3 3) 9) (= (x560 27 3) 81) (= 81 (x560 9 9)) (= (x560 9 3) 27)))
(assert (x242 x317 x745 x399 x373))
(assert (x465 x751))
(assert (x594 (- x623 x572)))
(assert (x487 x286))
(assert (= (or (and (not x135) x524) x422) x714))
(assert (x537 x47 (- x646 x373)))
(assert (x594 (- x373 x745)))
(assert (x80 x370))
(assert (x7 x602 x380))
(assert (x80 x755))
(assert (x80 x369))
(assert (x594 (- x383 x764)))
(assert (x487 x611))
(assert (x487 x344))
(assert (x478 x143))
(assert (x487 x389))
(assert (x242 x745 x317 x646 x47))
(assert (x195 x646 x47 x572 x559))
(assert (x487 x368))
(assert (x487 x733))
(assert (x537 x623 (- x764 x572)))
(assert (= (x308 (x300 128110906)) 128110906))
(assert (= x370 (x308 (x447 x370))))
(assert (x487 x721))
(assert (x478 x461))
(assert (x242 x764 x623 x373 x399))
(assert (x594 (- x373 x559)))
(assert (x487 x307))
(assert (x487 x272))
(assert (x487 x544))
(assert (x195 x572 x559 x399 x373))
(assert (x242 x646 x47 x373 x399))
(assert (x242 x764 x623 x559 x572))
(assert (x537 x383 (- x432 x646)))
(assert (x537 x745 (- x317 x383)))
(assert (x594 (- x383 x373)))
(assert (x594 (- x373 x646)))
(assert (= (x447 3121116754) (x300 3121116754)))
(assert (x487 x590))
(assert (= x115 (or (and x252 x230) x64 (and x25 x141) (and x356 x55) x171 (and x159 (not x517)))))
(assert (x487 x603))
(assert (x487 x281))
(assert (x195 x47 x646 x399 x373))
(assert (x594 (- x399 x559)))
(assert (x537 x559 (- x572 x432)))
(assert (x594 (- x47 x572)))
(assert (x242 x399 x373 x745 x317))
(assert (x487 x488))
(assert (x594 (- x383 x646)))
(assert (x242 x764 x623 x646 x47))
(assert (= 2495578189 (x308 (x300 2495578189))))
(assert (x594 (- x47 x373)))
(assert (x195 x559 x572 x317 x745))
(assert (x487 x79))
(assert (x594 (- x623 x47)))
(assert (x537 x317 (- x745 x432)))
(assert (x487 x372))
(assert (x594 (- x764 x373)))
(assert (x487 x699))
(assert (x487 x453))
(assert (= (x308 (x447 x61)) x61))
(assert (x594 (- x383 x317)))
(assert (x537 x646 (- x47 x383)))
(assert (x487 x443))
(assert (x487 x418))
(assert (= (x308 (x300 1889567281)) 1889567281))
(assert (x594 (- x383 x623)))
(assert (= (and x219 x561) x756))
(assert (x537 x399 (- x373 x623)))
(assert (x487 x750))
(assert (x487 x165))
(assert (x487 x232))
(assert (= x256 (x308 (x447 x256))))
(assert (x487 x302))
(assert (x242 x317 x745 x47 x646))
(assert (x487 x739))
(assert (x487 x554))
(assert (x594 (- x559 x399)))
(assert (= (and x524 x135) x422))
(assert (x242 x432 x383 x373 x399))
(assert (x242 x559 x572 x623 x764))
(assert (x487 x227))
(assert (x487 x106))
(assert (x537 x572 (- x559 x764)))
(assert (x594 (- x623 x383)))
(assert (x487 x532))
(assert (x478 x689))
(assert (x465 x548))
(assert (x80 x577))
(assert (x487 x606))
(assert (x242 x383 x432 x646 x47))
(assert (x537 x399 x373))
(assert (= x535 (and x420 (not x636))))
(assert (x487 x751))
(assert (x487 x734))
(assert (x487 x565))
(assert (x80 x712))
(assert (x487 x239))
(assert (x242 x745 x317 x432 x383))
(assert (x594 x373))
(assert (x242 x47 x646 x399 x373))
(assert (x537 x317 (- x745 x399)))
(assert (x487 x553))
(assert (= (and x630 x318) x469))
(assert (x195 x572 x559 x432 x383))
(assert (x537 x646 (- x47 x572)))
(assert (x487 x589))
(assert (x537 x572 (- x559 x623)))
(assert (x594 (- x646 x764)))
(assert (x537 x623 (- x764 x383)))
(assert (x487 x711))
(assert (x487 x400))
(assert (x487 x674))
(assert (x242 x764 x623 x317 x745))
(assert (x487 x260))
(assert (x487 x47))
(assert (= x700 (x308 (x447 x700))))
(assert (x465 x532))
(assert (x594 (- x373 x432)))
(assert (x594 (- x317 x572)))
(assert (x195 x383 x432 x623 x764))
(assert (x465 x236))
(assert (x487 x642))
(assert (= x605 (and x120 x494)))
(assert (x465 x606))
(assert (x487 x675))
(assert (x537 x646 (- x47 x623)))
(assert (x242 x399 x373 x646 x47))
(assert (x487 x201))
(assert (x487 x183))
(assert (x487 x363))
(assert (x537 x646 (- x47 x373)))
(assert (x478 x572))
(assert (x195 x764 x623 x646 x47))
(assert (= (or x571 x27) x676))
(assert (x487 x710))
(assert (= 3337024914 (x308 (x300 3337024914))))
(assert (x478 x66))
(assert (x195 x764 x623 x432 x383))
(assert (x487 x570))
(assert (x487 x501))
(assert (x242 x623 x764 x383 x432))
(assert (x195 x745 x317 x646 x47))
(assert (x487 x370))
(assert (x242 x383 x432 x399 x373))
(assert (x195 x383 x432 x572 x559))
(assert (= (and x69 x265) x528))
(assert (x537 x646 (- x47 x432)))
(assert (x195 x317 x745 x623 x764))
(assert (x487 x29))
(assert (x537 x432 (- x383 x646)))
(assert (=> (>= 10000 x389) (= (x300 x389) (x447 x389))))
(assert (x487 x6))
(assert (x537 x572 (- x559 x373)))
(assert (x594 x432))
(assert (x195 x646 x47 x432 x383))
(assert (x7 x443 x522))
(assert (x594 (- x432 x745)))
(assert (x487 x136))
(assert (= x445 (and (not x621) x11)))
(assert (x195 x383 x432 x317 x745))
(assert (x487 x459))
(assert (x537 x373 (- x399 x383)))
(assert (x80 x353))
(assert (x594 (- x764 x559)))
(assert (x487 x223))
(assert (x487 x288))
(assert (= (x308 (x300 3026235284)) 3026235284))
(assert (x594 (- x559 x432)))
(assert (x487 x649))
(assert (x478 x399))
(assert (x594 (- x317 x373)))
(assert (=> (<= x309 10000) (= (x300 x309) (x447 x309))))
(assert (x487 x59))
(assert (x242 x399 x373 x764 x623))
(assert (x487 x49))
(assert (x487 x125))
(assert (= x295 (and x506 x644)))
(assert (x487 x374))
(assert (and (= (x560 2 x596) (* 2 x596)) (x93 2 x596) (and (= (x560 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x596) (- (* 2 x596) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x596))) (= (- (* (- x596 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x596 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x560 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x596 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x560 2 (- x596 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x596 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2))) (x531 2 x596) (x747 2 x596) (x597 2 x596) (x235 2 x596)))
(assert (x537 x646 (- x47 x399)))
(assert (x242 x646 x47 x399 x373))
(assert (x487 x28))
(assert (= x173 (=> (and (or (and (and (= (x650 x312 x398) x424) (= x274 x629) (= (x14 x674 x572) x649) (<= x559 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x312 (ite (not x671) 1 0)) (= x83 (= 0 x572)) (= (x435 (x560 x572 x559)) x674) (= (ite (or x83 x90) 1 0) x398) (> x424 0) (= (= x649 x559) x90) (<= 0 x559) (= (x14 x674 x113) x274) (= x671 (= 0 x113))) (not x500)) (and (= x572 x629) x500)) (and (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (= 0 x113) x500) (>= x113 0))) x122)))
(assert (x487 x712))
(assert (= x468 (and x69 (not x265))))
(assert (x487 x379))
(check-sat)
(exit)
