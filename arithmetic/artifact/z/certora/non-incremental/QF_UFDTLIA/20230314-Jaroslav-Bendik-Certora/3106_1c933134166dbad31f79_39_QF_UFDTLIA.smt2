(set-info :smt-lib-version 2.6)
(set-logic QF_UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x824 0)) (((x579 (x480 x824) (x678 x824) (x611 x824) (x282 Int)) (x1045 (x119 x824) (x86 Int)) (x25 (x265 x824) (x556 x824) (x771 x824) (x927 x824) (x879 Int)) (x953 (x342 x824) (x499 x824) (x290 Int)) (x196 (x99 x824) (x690 x824) (x111 x824) (x339 x824) (x235 x824) (x550 Int)) (x974 (x788 x824) (x18 x824) (x1064 x824) (x684 x824) (x747 x824) (x38 x824) (x29 x824) (x296 Int)) (x305 (x46 x824) (x378 x824) (x629 x824) (x182 x824) (x368 x824) (x1028 x824) (x100 Int)) (x17 (x658 Int)))))
(declare-fun x476 () Bool)
(declare-fun x387 (Int Int) Int)
(declare-fun x502 () Bool)
(declare-fun x239 () Bool)
(declare-fun x1 () Bool)
(declare-fun x322 () x824)
(declare-fun x478 () Bool)
(declare-fun x170 () Int)
(declare-fun x311 () Bool)
(declare-fun x101 () Bool)
(declare-fun x452 (Int Int) Int)
(declare-fun x341 () Int)
(declare-fun x581 () Int)
(declare-fun x344 () Int)
(declare-fun x271 () Int)
(declare-fun x541 () x824)
(declare-fun x155 () Int)
(declare-fun x679 () Int)
(declare-fun x353 () Int)
(declare-fun x384 () Bool)
(declare-fun x445 () Int)
(declare-fun x962 () Int)
(declare-fun x721 () Bool)
(declare-fun x947 () Int)
(declare-fun x731 () Int)
(declare-fun x848 () Bool)
(declare-fun x266 () Int)
(declare-fun x735 () Int)
(declare-fun x616 () Bool)
(declare-fun x569 () Int)
(declare-fun x601 () Int)
(declare-fun x794 () Bool)
(declare-fun x381 () Bool)
(declare-fun x876 () Bool)
(declare-fun x675 () Bool)
(declare-fun x188 () Int)
(declare-fun x26 (Int Int) Int)
(declare-fun x633 () Int)
(declare-fun x256 () Int)
(declare-fun x820 () x824)
(declare-fun x944 () Int)
(declare-fun x8 () Int)
(declare-fun x469 () Bool)
(declare-fun x181 () x824)
(declare-fun x7 () Int)
(declare-fun x172 () Bool)
(declare-fun x19 () Int)
(declare-fun x388 () Bool)
(declare-fun x805 () Bool)
(declare-fun x715 () Bool)
(declare-fun x946 () Bool)
(declare-fun x888 (Int) Int)
(declare-fun x496 () Int)
(declare-fun x318 () Int)
(declare-fun x178 () Bool)
(declare-fun x683 () Int)
(declare-fun x1015 () Bool)
(declare-fun x200 () Int)
(declare-fun x567 () Bool)
(declare-fun x682 (Int) Int)
(declare-fun x1001 () Bool)
(declare-fun x503 () Int)
(declare-fun x156 () Bool)
(declare-fun x150 () Bool)
(declare-fun x971 () Bool)
(declare-fun x82 () Bool)
(declare-fun x361 () Bool)
(declare-fun x198 () Int)
(declare-fun x1054 (x824) Int)
(declare-fun x841 () Int)
(declare-fun x59 () Int)
(declare-fun x674 () Bool)
(declare-fun x12 () Bool)
(declare-fun x935 () Int)
(declare-fun x772 () Bool)
(declare-fun x355 () Bool)
(declare-fun x546 () Int)
(declare-fun x832 () Int)
(declare-fun x713 () Int)
(declare-fun x982 () Int)
(declare-fun x545 () Int)
(declare-fun x191 () Bool)
(declare-fun x508 () Bool)
(declare-fun x495 () Bool)
(declare-fun x694 () Int)
(declare-fun x1037 () Int)
(declare-fun x710 () Bool)
(declare-fun x796 () Bool)
(declare-fun x834 () Int)
(declare-fun x607 () Bool)
(declare-fun x262 () x824)
(declare-fun x804 () Bool)
(declare-fun x333 () Bool)
(declare-fun x806 () Bool)
(declare-fun x408 () Bool)
(declare-fun x681 () Bool)
(declare-fun x403 () x824)
(declare-fun x1009 () Int)
(declare-fun x932 () Bool)
(declare-fun x56 () x824)
(declare-fun x933 () Bool)
(declare-fun x516 () Bool)
(declare-fun x429 () Bool)
(declare-fun x558 () Bool)
(declare-fun x590 () Bool)
(declare-fun x925 () Bool)
(declare-fun x913 () Bool)
(declare-fun x626 () Int)
(declare-fun x302 () Bool)
(declare-fun x939 () Bool)
(declare-fun x386 () Bool)
(declare-fun x818 () Bool)
(declare-fun x861 () Int)
(declare-fun x399 () Int)
(declare-fun x126 () Int)
(declare-fun x535 () Int)
(declare-fun x764 () Int)
(declare-fun x666 () Bool)
(declare-fun x383 () Bool)
(declare-fun x2 () Bool)
(declare-fun x1016 () Bool)
(declare-fun x253 () Bool)
(declare-fun x404 () Int)
(declare-fun x385 () Int)
(declare-fun x736 () Bool)
(declare-fun x105 () Bool)
(declare-fun x391 () Bool)
(declare-fun x194 () Int)
(declare-fun x755 () Int)
(declare-fun x468 () Int)
(declare-fun x574 () Bool)
(declare-fun x708 () Bool)
(declare-fun x969 (Int Int) Int)
(declare-fun x510 () Int)
(declare-fun x500 () Bool)
(declare-fun x278 () Int)
(declare-fun x746 () Int)
(declare-fun x828 () Int)
(declare-fun x849 () Bool)
(declare-fun x756 () Int)
(declare-fun x622 () Bool)
(declare-fun x93 () Bool)
(declare-fun x980 () Int)
(declare-fun x730 () Int)
(declare-fun x376 () Bool)
(declare-fun x808 () Int)
(declare-fun x958 () Bool)
(declare-fun x319 () Int)
(declare-fun x451 (x824) Int)
(declare-fun x744 () Bool)
(declare-fun x780 () Bool)
(declare-fun x528 () Int)
(declare-fun x945 () Int)
(declare-fun x120 () Int)
(declare-fun x830 () Bool)
(declare-fun x647 () Bool)
(declare-fun x761 () Int)
(declare-fun x323 () Bool)
(declare-fun x183 () Int)
(declare-fun x697 () Bool)
(declare-fun x901 () Bool)
(declare-fun x185 () Bool)
(declare-fun x513 () Int)
(declare-fun x65 () Bool)
(declare-fun x885 () Bool)
(declare-fun x425 () Int)
(declare-fun x431 () Bool)
(declare-fun x115 () Bool)
(declare-fun x748 () Int)
(declare-fun x784 () Bool)
(declare-fun x584 () Bool)
(declare-fun x862 () Bool)
(declare-fun x230 () Bool)
(declare-fun x897 () Int)
(declare-fun x345 () Int)
(declare-fun x426 () Int)
(declare-fun x1043 () Int)
(declare-fun x778 () Bool)
(declare-fun x580 () Int)
(declare-fun x397 () Bool)
(declare-fun x437 () Bool)
(declare-fun x436 () Int)
(declare-fun x742 () Int)
(declare-fun x655 () Bool)
(declare-fun x728 () Bool)
(declare-fun x593 () Int)
(declare-fun x1067 (x824) Int)
(declare-fun x208 () Bool)
(declare-fun x1051 () Bool)
(declare-fun x922 () Int)
(declare-fun x504 () Int)
(declare-fun x741 () Bool)
(declare-fun x668 () Bool)
(declare-fun x847 () Bool)
(declare-fun x315 () x824)
(declare-fun x439 () Int)
(declare-fun x1004 () Int)
(declare-fun x609 () Bool)
(declare-fun x823 () Int)
(declare-fun x838 () Int)
(declare-fun x102 () Int)
(declare-fun x380 () Int)
(declare-fun x630 () Int)
(declare-fun x955 () Bool)
(declare-fun x92 () Bool)
(declare-fun x453 () Bool)
(declare-fun x1042 () x824)
(declare-fun x173 () Bool)
(declare-fun x676 () Int)
(declare-fun x273 () Int)
(declare-fun x612 () Bool)
(declare-fun x5 () Bool)
(declare-fun x128 () Bool)
(declare-fun x1022 () Bool)
(declare-fun x158 () Bool)
(declare-fun x430 () Int)
(declare-fun x276 () Int)
(declare-fun x124 () Bool)
(declare-fun x180 () Bool)
(declare-fun x928 () Bool)
(declare-fun x960 () Bool)
(declare-fun x358 () Int)
(declare-fun x594 () Bool)
(declare-fun x118 () Int)
(declare-fun x60 (Int Int) Int)
(declare-fun x390 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x206 () Bool)
(declare-fun x686 () Int)
(declare-fun x543 () Int)
(declare-fun x348 () Int)
(declare-fun x52 () Int)
(declare-fun x649 () Int)
(declare-fun x193 () Int)
(declare-fun x396 () Int)
(declare-fun x743 () x824)
(declare-fun x575 () Int)
(declare-fun x367 () Int)
(declare-fun x294 () Bool)
(declare-fun x127 () Bool)
(declare-fun x440 () Bool)
(declare-fun x783 () Bool)
(declare-fun x872 () Bool)
(declare-fun x335 () Bool)
(declare-fun x63 () Int)
(declare-fun x227 () Bool)
(declare-fun x949 () Bool)
(declare-fun x72 () Bool)
(declare-fun x754 () Bool)
(declare-fun x238 () Int)
(declare-fun x1060 () Int)
(declare-fun x250 () Int)
(declare-fun x226 () Bool)
(declare-fun x57 () Bool)
(declare-fun x549 () Bool)
(declare-fun x926 () Int)
(declare-fun x141 () Int)
(declare-fun x297 () Int)
(declare-fun x790 () Bool)
(declare-fun x553 () Int)
(declare-fun x724 () Int)
(declare-fun x252 () Bool)
(declare-fun x140 () Int)
(declare-fun x621 () Int)
(declare-fun x392 () Int)
(declare-fun x979 () Int)
(declare-fun x711 () Int)
(declare-fun x527 () Bool)
(declare-fun x829 (Int) Int)
(declare-fun x571 () Int)
(declare-fun x992 () Int)
(declare-fun x441 () Int)
(declare-fun x419 () Int)
(declare-fun x205 () Bool)
(declare-fun x836 () Bool)
(declare-fun x285 () Bool)
(declare-fun x36 () Int)
(declare-fun x97 () Int)
(declare-fun x952 () Bool)
(declare-fun x951 () Int)
(declare-fun x596 () Int)
(declare-fun x948 () Bool)
(declare-fun x280 () Bool)
(declare-fun x931 () Bool)
(declare-fun x229 (Int Int) Int)
(declare-fun x617 () Int)
(declare-fun x490 () Bool)
(declare-fun x81 () Bool)
(declare-fun x21 () Int)
(declare-fun x298 () Bool)
(declare-fun x865 () Bool)
(declare-fun x631 () Bool)
(declare-fun x554 () Bool)
(declare-fun x1012 () Int)
(declare-fun x972 () x824)
(declare-fun x352 () Int)
(declare-fun x1007 () Int)
(declare-fun x458 () Int)
(declare-fun x821 () Int)
(declare-fun x737 () Bool)
(declare-fun x892 () Int)
(declare-fun x258 () Int)
(declare-fun x891 () Bool)
(declare-fun x242 () Int)
(declare-fun x536 () Int)
(declare-fun x22 () Bool)
(declare-fun x652 () Bool)
(declare-fun x207 () Bool)
(declare-fun x76 () Bool)
(declare-fun x1032 () Int)
(declare-fun x895 () Int)
(declare-fun x474 () Int)
(declare-fun x332 () Int)
(declare-fun x214 () Int)
(declare-fun x481 () Int)
(declare-fun x1002 () Int)
(declare-fun x566 () Int)
(declare-fun x73 () Bool)
(declare-fun x919 () Bool)
(declare-fun x174 () Int)
(declare-fun x699 () Bool)
(declare-fun x518 () Bool)
(declare-fun x28 () Bool)
(declare-fun x475 (Int Int) Int)
(declare-fun x461 () x824)
(declare-fun x43 () Bool)
(declare-fun x407 () Bool)
(declare-fun x840 () Bool)
(declare-fun x936 () Bool)
(declare-fun x491 () x824)
(declare-fun x883 () Bool)
(declare-fun x255 () Int)
(declare-fun x565 () Bool)
(declare-fun x269 () Bool)
(declare-fun x822 () Bool)
(declare-fun x637 () Int)
(declare-fun x245 () Bool)
(declare-fun x284 () Int)
(declare-fun x146 () Bool)
(declare-fun x943 () Int)
(declare-fun x312 () Bool)
(declare-fun x635 () Bool)
(declare-fun x75 () Bool)
(declare-fun x134 () Bool)
(declare-fun x1027 () Int)
(declare-fun x74 () Int)
(declare-fun x434 () Bool)
(declare-fun x11 () Bool)
(declare-fun x325 () Bool)
(declare-fun x143 () Int)
(declare-fun x911 () Int)
(declare-fun x993 () x824)
(declare-fun x798 () Bool)
(declare-fun x531 () Int)
(declare-fun x421 () Int)
(declare-fun x614 () Bool)
(declare-fun x446 () Int)
(declare-fun x106 () Bool)
(declare-fun x329 () Bool)
(declare-fun x154 () Int)
(declare-fun x517 () Bool)
(declare-fun x853 () Int)
(declare-fun x471 () Bool)
(declare-fun x505 () Int)
(declare-fun x67 () Int)
(declare-fun x603 () Int)
(declare-fun x473 () Bool)
(declare-fun x819 () Bool)
(declare-fun x940 () Int)
(declare-fun x981 () Int)
(declare-fun x416 () Bool)
(declare-fun x163 () Bool)
(declare-fun x357 () Bool)
(declare-fun x625 () Bool)
(declare-fun x233 () Bool)
(declare-fun x51 () Int)
(declare-fun x422 () Bool)
(declare-fun x532 (Int) x824)
(declare-fun x600 () Bool)
(declare-fun x833 () Bool)
(declare-fun x792 () Int)
(declare-fun x634 () Bool)
(declare-fun x869 () Int)
(declare-fun x773 () Bool)
(declare-fun x873 () Bool)
(declare-fun x288 () Int)
(declare-fun x320 () Bool)
(declare-fun x279 () Int)
(declare-fun x718 () Int)
(declare-fun x34 () Bool)
(declare-fun x802 () Bool)
(declare-fun x349 () Bool)
(declare-fun x257 () Int)
(declare-fun x707 () Int)
(declare-fun x591 () Bool)
(declare-fun x1069 () Bool)
(declare-fun x432 () Bool)
(declare-fun x69 () Bool)
(declare-fun x815 () Int)
(declare-fun x811 () Bool)
(declare-fun x570 () Bool)
(declare-fun x199 () Bool)
(declare-fun x338 (x824) Int)
(declare-fun x767 () Int)
(declare-fun x350 () Bool)
(declare-fun x750 () Bool)
(declare-fun x415 () Bool)
(declare-fun x402 (x824) Int)
(declare-fun x228 () Int)
(declare-fun x1038 () Bool)
(declare-fun x856 () Int)
(declare-fun x87 () Bool)
(declare-fun x58 () Bool)
(declare-fun x142 () Int)
(declare-fun x467 () Bool)
(declare-fun x688 () Int)
(declare-fun x669 () Int)
(declare-fun x964 () Int)
(declare-fun x937 () Bool)
(declare-fun x966 () Bool)
(declare-fun x619 () Bool)
(declare-fun x745 () Bool)
(declare-fun x889 () Int)
(declare-fun x169 () Bool)
(declare-fun x799 () Int)
(declare-fun x351 () Bool)
(declare-fun x369 () Bool)
(declare-fun x149 () x824)
(declare-fun x967 () Int)
(declare-fun x915 () Bool)
(declare-fun x557 () Int)
(declare-fun x909 () Bool)
(declare-fun x462 () Bool)
(declare-fun x1014 () Int)
(declare-fun x816 () Bool)
(declare-fun x598 () Bool)
(declare-fun x587 () Bool)
(declare-fun x904 () Int)
(declare-fun x470 () Bool)
(declare-fun x1057 () Int)
(declare-fun x530 () Int)
(declare-fun x304 () x824)
(declare-fun x1017 () Int)
(declare-fun x413 () Int)
(declare-fun x814 () Bool)
(declare-fun x448 () Int)
(declare-fun x287 () Bool)
(declare-fun x232 () Int)
(declare-fun x1040 () Bool)
(declare-fun x537 () Bool)
(declare-fun x328 () Bool)
(declare-fun x213 () Bool)
(declare-fun x125 () Bool)
(declare-fun x529 () x824)
(declare-fun x973 () Bool)
(declare-fun x443 () Int)
(declare-fun x251 () Bool)
(declare-fun x179 () Bool)
(declare-fun x753 () x824)
(declare-fun x295 () Int)
(declare-fun x645 () Bool)
(declare-fun x301 () Bool)
(declare-fun x547 () Int)
(declare-fun x916 () Int)
(declare-fun x132 () Int)
(declare-fun x62 () Int)
(declare-fun x47 () Bool)
(declare-fun x706 () Bool)
(declare-fun x1029 (Int Int) Int)
(declare-fun x854 () Bool)
(declare-fun x758 () x824)
(declare-fun x79 () Int)
(declare-fun x896 () Int)
(declare-fun x340 () Bool)
(declare-fun x1059 () Int)
(declare-fun x1055 () Bool)
(declare-fun x246 () Int)
(declare-fun x373 () Int)
(declare-fun x317 (x824) Int)
(declare-fun x638 () Bool)
(declare-fun x417 () x824)
(declare-fun x130 () Bool)
(declare-fun x851 () Int)
(declare-fun x552 () Bool)
(declare-fun x642 () Int)
(declare-fun x914 () Int)
(declare-fun x613 () Bool)
(declare-fun x860 (x824) Int)
(declare-fun x640 () Bool)
(declare-fun x33 () Bool)
(declare-fun x595 () Bool)
(declare-fun x800 () x824)
(declare-fun x670 () Int)
(declare-fun x268 () Int)
(declare-fun x950 () Int)
(declare-fun x54 () Bool)
(declare-fun x427 () Int)
(declare-fun x654 () Bool)
(declare-fun x677 () Bool)
(declare-fun x289 () Bool)
(declare-fun x210 (x824) Int)
(declare-fun x918 () Bool)
(declare-fun x691 () Int)
(declare-fun x864 () Bool)
(declare-fun x986 () Int)
(declare-fun x486 () Bool)
(declare-fun x6 () Int)
(declare-fun x484 () Bool)
(declare-fun x243 () Int)
(declare-fun x135 () Int)
(declare-fun x961 () Int)
(declare-fun x215 () Int)
(declare-fun x763 () Bool)
(declare-fun x85 () Bool)
(declare-fun x906 () Bool)
(declare-fun x1049 () Bool)
(declare-fun x175 () Int)
(declare-fun x346 () Bool)
(declare-fun x659 () Int)
(declare-fun x274 (x824) Int)
(declare-fun x894 () Int)
(declare-fun x1003 () Bool)
(declare-fun x733 () Bool)
(declare-fun x586 () Int)
(declare-fun x978 () Int)
(declare-fun x687 () Int)
(declare-fun x1068 () Int)
(declare-fun x893 () Bool)
(declare-fun x168 () Int)
(declare-fun x777 () Bool)
(declare-fun x627 () Bool)
(declare-fun x977 () Bool)
(declare-fun x975 () Bool)
(declare-fun x472 () Bool)
(declare-fun x98 () Bool)
(declare-fun x994 () Bool)
(declare-fun x826 () Bool)
(declare-fun x656 () Int)
(declare-fun x165 () Int)
(declare-fun x769 () Int)
(declare-fun x411 () Bool)
(declare-fun x572 () Int)
(declare-fun x324 () Bool)
(declare-fun x664 () Bool)
(declare-fun x842 () Int)
(declare-fun x712 () Int)
(declare-fun x576 () Bool)
(declare-fun x787 () Bool)
(declare-fun x827 () Bool)
(declare-fun x195 () Int)
(declare-fun x331 () Bool)
(declare-fun x898 () Bool)
(declare-fun x177 () Bool)
(declare-fun x362 () Bool)
(declare-fun x300 () Bool)
(declare-fun x244 () Int)
(declare-fun x700 () Bool)
(declare-fun x870 () Bool)
(declare-fun x844 () Bool)
(declare-fun x212 () Bool)
(declare-fun x890 () Bool)
(declare-fun x1018 () Int)
(declare-fun x447 () Int)
(declare-fun x650 () Bool)
(declare-fun x405 () Bool)
(declare-fun x487 () Int)
(declare-fun x837 () Int)
(declare-fun x114 () Bool)
(declare-fun x886 () Bool)
(declare-fun x938 () Bool)
(declare-fun x604 () Bool)
(declare-fun x15 () x824)
(declare-fun x878 () Bool)
(declare-fun x359 () Bool)
(declare-fun x260 () Int)
(declare-fun x41 () Int)
(declare-fun x751 () Bool)
(declare-fun x965 () Int)
(declare-fun x316 () Int)
(declare-fun x663 () Bool)
(declare-fun x39 () Int)
(declare-fun x1025 () Int)
(declare-fun x900 () Bool)
(declare-fun x375 (Int) Int)
(declare-fun x110 () Bool)
(declare-fun x123 () Bool)
(declare-fun x729 () Bool)
(declare-fun x738 () Bool)
(declare-fun x382 () Bool)
(declare-fun x299 () Bool)
(declare-fun x44 () Int)
(declare-fun x418 () Bool)
(declare-fun x639 () Bool)
(declare-fun x929 () Bool)
(declare-fun x775 () Int)
(declare-fun x934 () Bool)
(declare-fun x555 () Bool)
(declare-fun x237 () Bool)
(declare-fun x343 () Int)
(declare-fun x988 (Int) Int)
(declare-fun x166 () Int)
(declare-fun x264 () Int)
(declare-fun x482 () Bool)
(declare-fun x218 () Bool)
(declare-fun x360 () Bool)
(declare-fun x757 () Int)
(declare-fun x248 () Int)
(declare-fun x908 () Int)
(declare-fun x424 () x824)
(declare-fun x394 () Bool)
(declare-fun x734 () Bool)
(declare-fun x725 () Int)
(declare-fun x522 () Int)
(declare-fun x363 () Bool)
(declare-fun x863 () Int)
(declare-fun x660 () Int)
(declare-fun x615 () Bool)
(declare-fun x665 () Bool)
(declare-fun x68 () Int)
(declare-fun x628 () Int)
(declare-fun x795 () Int)
(declare-fun x201 () Bool)
(declare-fun x709 (Int) Int)
(declare-fun x1039 () Bool)
(declare-fun x999 () Bool)
(declare-fun x825 (Int) Int)
(declare-fun x930 () Int)
(declare-fun x689 () Bool)
(declare-fun x526 () Int)
(declare-fun x113 () Bool)
(declare-fun x1056 () Int)
(declare-fun x561 () x824)
(declare-fun x50 () Int)
(declare-fun x393 () Int)
(declare-fun x589 () Int)
(declare-fun x749 () Int)
(declare-fun x920 () Bool)
(declare-fun x148 () Bool)
(declare-fun x921 () Int)
(declare-fun x525 () Int)
(declare-fun x954 () Bool)
(declare-fun x35 () Int)
(declare-fun x400 () Int)
(declare-fun x53 () Int)
(declare-fun x726 () Bool)
(declare-fun x942 () Int)
(declare-fun x646 () Int)
(declare-fun x845 () Bool)
(declare-fun x223 () Int)
(declare-fun x337 () Int)
(declare-fun x716 () Bool)
(declare-fun x313 () Bool)
(declare-fun x559 () Bool)
(declare-fun x466 () Bool)
(declare-fun x455 () Bool)
(declare-fun x493 () Int)
(declare-fun x147 () Bool)
(declare-fun x488 () Bool)
(declare-fun x138 () Bool)
(declare-fun x602 (Int) Int)
(declare-fun x533 () Int)
(declare-fun x812 () Bool)
(declare-fun x1021 () Int)
(declare-fun x727 () Bool)
(declare-fun x701 () Int)
(declare-fun x968 () Bool)
(declare-fun x791 () x824)
(declare-fun x80 () Bool)
(declare-fun x498 () Bool)
(declare-fun x389 () Bool)
(declare-fun x623 () Int)
(declare-fun x9 () Bool)
(declare-fun x803 () Bool)
(declare-fun x412 () Int)
(declare-fun x45 () Bool)
(declare-fun x366 () Bool)
(declare-fun x292 () Bool)
(declare-fun x722 () Int)
(declare-fun x636 () Bool)
(declare-fun x662 () Int)
(declare-fun x695 () Bool)
(declare-fun x449 () Int)
(declare-fun x222 () Bool)
(declare-fun x1033 () Bool)
(declare-fun x219 () Bool)
(declare-fun x899 () Bool)
(declare-fun x121 () Int)
(declare-fun x379 () Bool)
(declare-fun x184 () Bool)
(declare-fun x588 () Bool)
(declare-fun x548 () Bool)
(declare-fun x464 () Bool)
(declare-fun x423 () Bool)
(declare-fun x857 () Bool)
(declare-fun x703 () Bool)
(declare-fun x249 () Bool)
(declare-fun x1030 () Int)
(declare-fun x858 () Int)
(declare-fun x263 () Bool)
(declare-fun x40 () Int)
(declare-fun x514 () Int)
(declare-fun x450 () Bool)
(declare-fun x224 () Bool)
(declare-fun x717 () Bool)
(declare-fun x240 () x824)
(declare-fun x1019 () Bool)
(declare-fun x1046 () Bool)
(declare-fun x884 () x824)
(declare-fun x1000 () Int)
(declare-fun x153 () Int)
(declare-fun x330 () Bool)
(declare-fun x797 () Int)
(declare-fun x1036 (Int) Int)
(declare-fun x551 () Bool)
(declare-fun x667 () Bool)
(declare-fun x653 () Bool)
(declare-fun x136 () Int)
(declare-fun x568 () Int)
(declare-fun x477 () Int)
(declare-fun x77 () Bool)
(declare-fun x129 () Bool)
(declare-fun x562 () Int)
(declare-fun x585 () Int)
(declare-fun x1034 () x824)
(declare-fun x563 () Int)
(declare-fun x281 () Bool)
(declare-fun x479 () Int)
(declare-fun x759 () Bool)
(declare-fun x438 () Bool)
(declare-fun x765 () Bool)
(declare-fun x776 () Bool)
(declare-fun x651 () Bool)
(declare-fun x144 () Int)
(declare-fun x96 () Bool)
(declare-fun x680 () Bool)
(declare-fun x306 () Int)
(declare-fun x3 () Int)
(declare-fun x406 () Bool)
(declare-fun x1063 () Bool)
(declare-fun x94 () Int)
(declare-fun x1006 () Bool)
(declare-fun x176 () Int)
(declare-fun x91 () Bool)
(declare-fun x523 () Int)
(declare-fun x605 () Int)
(declare-fun x494 () Int)
(declare-fun x70 () Bool)
(declare-fun x457 () Bool)
(declare-fun x159 () Int)
(declare-fun x618 () Bool)
(declare-fun x846 () Bool)
(declare-fun x103 () Int)
(declare-fun x131 () Bool)
(declare-fun x1047 () Int)
(declare-fun x632 () Int)
(declare-fun x985 () Bool)
(declare-fun x435 () Int)
(declare-fun x117 () Int)
(declare-fun x766 () Int)
(declare-fun x608 () Bool)
(declare-fun x89 () Int)
(declare-fun x356 () Bool)
(declare-fun x112 () Int)
(declare-fun x371 () Int)
(declare-fun x137 () Bool)
(declare-fun x762 () Bool)
(declare-fun x770 () x824)
(declare-fun x515 () Int)
(declare-fun x1061 () Bool)
(declare-fun x732 () Bool)
(declare-fun x145 () Int)
(declare-fun x693 (Int Int) Int)
(declare-fun x217 () Bool)
(declare-fun x277 () Bool)
(declare-fun x538 () Int)
(declare-fun x236 () Bool)
(declare-fun x395 (Int) Int)
(declare-fun x71 () Bool)
(declare-fun x887 () Bool)
(declare-fun x398 () Int)
(declare-fun x534 () Bool)
(declare-fun x139 () x824)
(declare-fun x414 () Int)
(declare-fun x970 () Int)
(declare-fun x444 () Bool)
(declare-fun x941 () Bool)
(declare-fun x293 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x374 () Bool)
(declare-fun x779 () Int)
(declare-fun x991 () Bool)
(declare-fun x107 () Bool)
(declare-fun x698 () Int)
(declare-fun x599 () Int)
(declare-fun x221 () Int)
(declare-fun x16 () Int)
(declare-fun x984 () Bool)
(declare-fun x321 () Bool)
(declare-fun x1031 () Bool)
(declare-fun x509 () Bool)
(declare-fun x582 () Bool)
(declare-fun x903 () Int)
(declare-fun x714 () Bool)
(declare-fun x917 () Int)
(declare-fun x957 () Bool)
(declare-fun x739 () Int)
(declare-fun x521 () Int)
(declare-fun x661 () Bool)
(declare-fun x483 () Bool)
(declare-fun x20 () Int)
(declare-fun x109 () Bool)
(declare-fun x66 () Bool)
(declare-fun x760 () Bool)
(declare-fun x813 () Bool)
(declare-fun x620 () Int)
(declare-fun x807 () Bool)
(declare-fun x855 () Bool)
(declare-fun x997 () Int)
(declare-fun x241 () Int)
(declare-fun x267 () Int)
(declare-fun x336 () Int)
(declare-fun x334 () Bool)
(declare-fun x501 () Bool)
(declare-fun x998 () Int)
(declare-fun x852 () Int)
(declare-fun x314 () Int)
(declare-fun x220 () Int)
(declare-fun x309 () Int)
(declare-fun x512 () Int)
(declare-fun x704 () Int)
(declare-fun x882 () Int)
(declare-fun x489 () Int)
(declare-fun x83 () Bool)
(declare-fun x32 () Int)
(declare-fun x1020 () Bool)
(declare-fun x84 () Int)
(declare-fun x835 () Int)
(declare-fun x539 () Bool)
(declare-fun x261 () Bool)
(declare-fun x789 () Int)
(declare-fun x524 () Bool)
(declare-fun x433 () Bool)
(declare-fun x597 () Bool)
(define-fun x171 ((x824 x824) (x644 Int)) x824 (ite ((_ is x974) x824) (x974 (x788 x824) (x18 x824) (x1064 x824) (x684 x824) (x747 x824) (x38 x824) (x29 x824) (+ x644 (x296 x824))) (ite ((_ is x305) x824) (x305 (x46 x824) (x378 x824) (x629 x824) (x182 x824) (x368 x824) (x1028 x824) (+ x644 (x100 x824))) (ite ((_ is x196) x824) (x196 (x99 x824) (x690 x824) (x111 x824) (x339 x824) (x235 x824) (+ (x550 x824) x644)) (ite ((_ is x25) x824) (x25 (x265 x824) (x556 x824) (x771 x824) (x927 x824) (+ x644 (x879 x824))) (ite ((_ is x579) x824) (x579 (x480 x824) (x678 x824) (x611 x824) (+ x644 (x282 x824))) (ite ((_ is x1045) x824) (x1045 (x119 x824) (+ x644 (x86 x824))) (ite ((_ is x953) x824) (x953 (x342 x824) (x499 x824) (+ (x290 x824) x644)) (x17 (+ (x658 x824) x644))))))))))
(define-fun x167 ((x347 Int)) Int (ite (and (<= 0 x347) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x347)) x347 (- x347 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x959 ((x347 Int)) Int (ite (and (>= x347 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (> 0 x347)) (+ x347 115792089237316195423570985008687907853269984665640564039457584007913129639936) x347))
(define-fun x511 ((x347 Int)) Int (ite (and (>= x347 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x347)) x347 (ite (and (>= x347 115792089237316195423570985008687907853269984665640564039457584007913129639936) (< x347 231584178474632390847141970017375815706539969331281128078915168015826259279872)) (- x347 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x347) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x347)) (+ x347 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x26 x347 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x1053 ((x259 Int)) Bool (and (<= 0 x259) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x259)))
(define-fun x809 ((x259 Int)) Bool (and (= (x452 115792089237316195423570985008687907853269984665640564039457584007913129639935 x259) x259) (= x259 (x452 x259 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x492 ((x259 Int)) Bool (and (= 0 (x452 x259 0)) (= 0 (x452 0 x259))))
(define-fun x774 ((x259 Int)) Bool (= (x452 x259 x259) x259))
(define-fun x843 ((x259 Int)) Bool (and (x774 x259) (x809 x259) (x492 x259)))
(define-fun x519 ((x259 Int) (x42 Int)) Bool (= (x452 x259 x42) (x452 x42 x259)))
(define-fun x202 ((x259 Int) (x42 Int)) Bool (and (=> (<= 0 x42) (>= x42 (x452 x259 x42))) (=> (<= 0 x259) (>= x259 (x452 x259 x42))) (<= 0 (x452 x259 x42))))
(define-fun x364 ((x259 Int) (x42 Int)) Bool (and (x202 x259 x42) (x519 x259 x42)))
(define-fun x283 ((x259 Int)) Bool (= (x26 x259 1461501637330902918203684832716283019655932542976) (x452 x259 1461501637330902918203684832716283019655932542975)))
(define-fun x10 ((x259 Int)) Bool (and (x283 x259) (x364 x259 1461501637330902918203684832716283019655932542975)))
(define-fun x203 ((x259 Int) (x42 Int)) Bool (and (> x42 (x26 x259 x42)) (<= 0 (x26 x259 x42))))
(define-fun x720 ((x259 Int) (x42 Int)) Bool (=> (and (> x42 0) (<= 0 x259)) (= (< x259 x42) (= (x26 x259 x42) x259))))
(define-fun x592 ((x259 Int) (x42 Int)) Bool (=> (and (and (> (+ x42 x42) x259) (>= x259 x42)) (< 0 x42)) (= (x26 x259 x42) (- x259 x42))))
(define-fun x793 ((x259 Int)) Bool (= 0 (x26 0 x259)))
(define-fun x673 ((x259 Int)) Bool (= 0 (x26 x259 1)))
(define-fun x902 ((x259 Int)) Bool (= 0 (x26 x259 x259)))
(define-fun x190 ((x259 Int)) Bool (and (x673 x259) (x902 x259) (x793 x259)))
(define-fun x1065 ((x259 Int)) Bool (= (+ (x26 x259 32) (x452 x259 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x511 x259)))
(define-fun x719 ((x259 Int)) Bool (and (x1065 x259) (x364 x259 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x428 ((x259 Int)) Bool (= (x26 x259 65536) (x452 x259 65535)))
(define-fun x307 ((x259 Int)) Bool (and (x428 x259) (x364 x259 65535)))
(define-fun x192 ((x259 Int)) Bool (= (+ (x26 x259 65536) (x452 x259 65536)) (x26 x259 131072)))
(define-fun x485 ((x259 Int)) Bool (and (x192 x259) (x364 x259 65536)))
(define-fun x1070 ((x259 Int)) Bool (= (+ (x452 x259 4294901760) (x26 x259 65536)) (x26 x259 4294967296)))
(define-fun x1044 ((x259 Int)) Bool (and (x364 x259 4294901760) (x1070 x259)))
(define-fun x1041 ((x259 Int)) Bool (and (= (x229 115792089237316195423570985008687907853269984665640564039457584007913129639935 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x229 x259 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x648 ((x259 Int)) Bool (and (= (x229 x259 0) x259) (= x259 (x229 0 x259))))
(define-fun x544 ((x259 Int)) Bool (= (x229 x259 x259) x259))
(define-fun x48 ((x259 Int)) Bool (and (x648 x259) (x1041 x259) (x544 x259)))
(define-fun x225 ((x259 Int) (x42 Int)) Bool (= (x229 x42 x259) (x229 x259 x42)))
(define-fun x831 ((x259 Int) (x42 Int)) Bool (and (=> (>= x42 0) (>= (x229 x259 x42) x42)) (=> (>= x259 0) (>= (x229 x259 x42) x259)) (>= (+ x42 x259) (x229 x259 x42))))
(define-fun x90 ((x259 Int) (x42 Int)) Bool (and (x225 x259 x42) (x831 x259 x42)))
(define-fun x1011 ((x259 Int) (x42 Int)) Bool (=> (and (> x42 0) (< 0 x259)) (= (= (x387 (x511 (x693 x259 x42)) x259) x42) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x693 x259 x42)))))
(define-fun x152 ((x259 Int) (x42 Int)) Bool (=> (and (not (= 0 x259)) (not (= x42 0))) (and (= x259 (x387 (x693 x259 x42) x42)) (= (x387 (x693 x259 x42) x259) x42))))
(define-fun x164 ((x259 Int) (x42 Int)) Bool (=> (and (> x259 0) (> x42 0)) (= (< (x387 115792089237316195423570985008687907853269984665640564039457584007913129639935 x259) x42) (> (x693 x259 x42) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x752 ((x259 Int) (x42 Int)) Bool (and (= (x511 (x693 x259 x42)) (x511 (x693 (- x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x42 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x511 (x693 x259 x42)) (x511 (x693 (- x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) x42))) (= (x511 (x693 x259 x42)) (x511 (x693 x259 (- x42 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x578 ((x259 Int) (x42 Int)) Bool (and (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x259) (< 0 x259)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x42) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x693 x259 (- x42 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x387 57896044618658097711785492504343953926634992332820282019728792003956564819968 x259) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x42)))) (=> (and (and (<= x259 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x259)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42) (> x42 0))) (= (<= x259 (x387 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x693 x259 x42)))) (=> (and (and (<= x42 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42)) (and (<= x259 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x259))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x693 (- x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x42 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x387 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x42)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x259)))) (=> (and (and (<= x259 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x259 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x42) (< 0 x42))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x693 (- x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) x42)) (>= (x387 57896044618658097711785492504343953926634992332820282019728792003956564819968 x42) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x259))))))
(define-fun x963 ((x259 Int)) Bool (and (= (x693 x259 0) 0) (= 0 (x693 0 x259))))
(define-fun x705 ((x259 Int)) Bool (and (= x259 (x693 1 x259)) (= (x693 x259 1) x259)))
(define-fun x685 ((x259 Int)) Bool (and (x705 x259) (x963 x259)))
(define-fun x817 ((x259 Int) (x42 Int)) Bool (=> (and (> x42 0) (< 0 x259)) (and (>= (x387 x259 x42) 0) (<= (x387 x259 x42) x259))))
(define-fun x231 ((x259 Int) (x42 Int)) Bool (=> (and (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x42) (>= x42 1)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x259) (<= 0 x259))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x259 x42)) (<= 0 (x387 x259 x42)))))
(define-fun x910 ((x259 Int) (x42 Int)) Bool (=> (and (< x42 x259) (> x42 1)) (> x259 (x387 x259 x42))))
(define-fun x197 ((x259 Int) (x42 Int)) Bool (=> (and (> x42 0) (> x259 0)) (= (> x42 x259) (= 0 (x387 x259 x42)))))
(define-fun x1013 ((x259 Int)) Bool (= (x387 0 x259) 0))
(define-fun x641 ((x259 Int)) Bool (= (x387 x259 1) x259))
(define-fun x78 ((x259 Int)) Bool (=> (not (= 0 x259)) (= 1 (x387 x259 x259))))
(define-fun x13 ((x259 Int)) Bool (and (x1013 x259) (x641 x259) (x78 x259)))
(define-fun x520 ((x259 Int)) Bool (= (x26 x259 262144) (+ (x452 x259 131072) (x26 x259 131072))))
(define-fun x540 ((x259 Int)) Bool (and (x520 x259) (x364 x259 131072)))
(define-fun x956 ((x259 Int)) Bool (= (x26 x259 2) (x452 x259 1)))
(define-fun x564 ((x259 Int)) Bool (and (x956 x259) (x364 x259 1)))
(define-fun x270 ((x259 Int)) Bool (= (x452 x259 127) (x26 x259 128)))
(define-fun x786 ((x259 Int)) Bool (and (x364 x259 127) (x270 x259)))
(define-fun x372 ((x259 Int)) Bool (= (x26 x259 4294967296) (x452 x259 4294967295)))
(define-fun x14 ((x259 Int)) Bool (and (x372 x259) (x364 x259 4294967295)))
(define-fun x723 ((x259 Int)) Bool (= (x452 x259 255) (x26 x259 256)))
(define-fun x1052 ((x259 Int)) Bool (and (x723 x259) (x364 x259 255)))
(define-fun x810 ((x259 Int)) Bool (= (+ (x452 x259 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x26 x259 26959946667150639794667015087019630673637144422540572481103610249216)) (x511 x259)))
(define-fun x409 ((x259 Int)) Bool (and (x364 x259 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x810 x259)))
(define-fun x923 ((x259 Int) (x42 Int)) Bool (=> (and (< 0 x42) (< 0 x259)) (and (> (x693 (x387 x259 x42) x42) (- x259 x42)) (<= (x693 (x387 x259 x42) x42) x259))))
(define-fun x410 ((x259 Int) (x42 Int)) Bool (and (x817 x259 x42) (x231 x259 x42) (x910 x259 x42) (x197 x259 x42) (x923 x259 x42)))
(define-fun x1058 ((x259 Int)) Bool (= (x452 x259 31) (x26 x259 32)))
(define-fun x61 ((x259 Int)) Bool (and (x1058 x259) (x364 x259 31)))
(define-fun x881 ((x259 Int)) Bool (= (x26 x259 18446744073709551616) (x452 x259 18446744073709551615)))
(define-fun x247 ((x259 Int)) Bool (and (x364 x259 18446744073709551615) (x881 x259)))
(define-fun x189 ((x259 Int)) Bool (=> (and (>= x259 0) (> 2 x259)) (= x259 (x452 65537 x259))))
(define-fun x459 ((x259 Int)) Bool (and (x189 x259) (x364 x259 65537)))
(define-fun x560 ((x23 Int)) Int (x825 x23))
(define-fun x365 ((x23 Int)) Int (ite (= x23 128) x945 (x375 x23)))
(define-fun x912 ((x23 Int)) Int (ite (and (< x23 (+ x945 160)) (<= 160 x23)) (x825 (+ (- x23 160) x637)) (x365 x23)))
(define-fun x905 ((x23 Int)) Int (ite (= x23 x40) 0 (x912 x23)))
(define-fun x209 ((x23 Int)) Int (ite (= x23 x220) 18511804847318769127852513085034306573455405177986258919159753969546364452864 (x905 x23)))
(define-fun x442 ((x23 Int)) Int (ite (= x23 x679) x601 (x209 x23)))
(define-fun x702 ((x23 Int)) Int (ite (= x707 x23) x967 (x442 x23)))
(define-fun x187 ((x23 Int)) Int (ite (and (>= x23 x220) (< x23 (+ 0 x220))) (x709 (+ (- x23 x220) 0)) (x702 x23)))
(define-fun x88 ((x23 Int)) Int (ite x252 (x187 x23) (x702 x23)))
(define-fun x303 ((x23 Int)) Int (ite (= x23 x547) 66853817334611902194238164484889819180315942402426128563245745834960013477038 (x88 x23)))
(define-fun x874 ((x23 Int)) Int (ite (= x79 x23) (x451 x972) (x303 x23)))
(define-fun x460 ((x23 Int)) Int (ite (= x23 x220) x916 (x874 x23)))
(define-fun x465 ((x23 Int)) Int (ite (= x23 x670) 5 (x460 x23)))
(define-fun x354 ((x23 Int)) Int (ite (= x194 x23) 1536193505703097071473766605195189375248157893288704583667612676508713222144 (x465 x23)))
(define-fun x275 ((x23 Int)) Int (ite (= x23 x439) x521 (x354 x23)))
(define-fun x785 ((x23 Int)) Int (ite (= x23 x268) x155 (x275 x23)))
(define-fun x456 ((x23 Int)) Int (ite (= x23 x68) x3 (x785 x23)))
(define-fun x671 ((x23 Int)) Int (ite (= x23 x32) x295 (x456 x23)))
(define-fun x420 ((x23 Int)) Int (ite (= x221 x23) x992 (x671 x23)))
(define-fun x95 ((x23 Int)) Int (ite x201 (x671 x23) (ite x500 (x456 x23) (ite x706 (x785 x23) (ite x625 (x275 x23) (x420 x23))))))
(define-fun x327 ((x23 Int)) Int (ite (= x23 x419) 0 (x95 x23)))
(define-fun x696 ((x23 Int)) Int (ite (= x23 x487) x633 (x327 x23)))
(define-fun x880 ((x23 Int)) Int (ite (= x23 x621) x580 (x696 x23)))
(define-fun x507 ((x23 Int)) Int (ite (= x23 x852) x834 (x880 x23)))
(define-fun x877 ((x23 Int)) Int (ite (= x412 x23) x965 (x507 x23)))
(define-fun x286 ((x23 Int)) Int (ite x360 (x507 x23) (ite x977 (x880 x23) (ite x876 (x696 x23) (ite x966 (x327 x23) (x877 x23))))))
(define-fun x204 ((x23 Int)) Int (ite (= x535 x23) 0 (x286 x23)))
(define-fun x1024 ((x23 Int)) Int (ite (= x513 x23) x605 (x204 x23)))
(define-fun x1010 ((x23 Int)) Int (ite (= x535 x23) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x1024 x23)))
(define-fun x1062 ((x23 Int)) Int (ite (= x566 x23) (x451 x972) (x1010 x23)))
(define-fun x868 ((x23 Int)) Int (ite (and (< x23 (+ x535 32)) (<= x535 x23)) (x988 (+ (- x23 x535) 0)) (x1062 x23)))
(define-fun x104 ((x23 Int)) Int (ite x777 (x868 x23) (x1062 x23)))
(define-fun x573 ((x23 Int)) Int (ite (= x23 x143) x656 (x104 x23)))
(define-fun x859 ((x23 Int)) Int (ite (= x23 x318) x51 (x573 x23)))
(define-fun x308 ((x23 Int)) Int (ite (= x543 x23) x1018 (x859 x23)))
(define-fun x401 ((x23 Int)) Int (ite (= x318 x23) x815 (x573 x23)))
(define-fun x1050 ((x23 Int)) Int (ite x598 (x573 x23) (ite x862 (ite x790 (x859 x23) (x308 x23)) (x401 x23))))
(define-fun x801 ((x23 Int)) Int (ite x1051 (x104 x23) (x1050 x23)))
(define-fun x272 ((x23 Int)) Int (ite (= x23 x63) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x801 x23)))
(define-fun x692 ((x23 Int)) Int (ite (= x662 x23) (x451 x139) (x272 x23)))
(define-fun x162 ((x23 Int)) Int (ite (and (<= x63 x23) (< x23 (+ x63 32))) (x395 (+ 0 (- x23 x63))) (x692 x23)))
(define-fun x506 ((x23 Int)) Int (ite x285 (x162 x23) (x692 x23)))
(define-fun x987 ((x23 Int)) Int (ite x1019 (x506 x23) (x801 x23)))
(define-fun x996 ((x23 Int)) Int (ite (= x23 x769) x531 (x987 x23)))
(define-fun x983 ((x23 Int)) Int (ite (= x23 x398) x1004 (x996 x23)))
(define-fun x37 ((x23 Int)) Int (ite (= x23 x118) x961 (x983 x23)))
(define-fun x55 ((x23 Int)) Int (ite (= x398 x23) x445 (x996 x23)))
(define-fun x657 ((x23 Int)) Int (ite x483 (x996 x23) (ite x680 (ite x127 (x983 x23) (x37 x23)) (x55 x23))))
(define-fun x781 ((x23 Int)) Int (ite x741 (x987 x23) (x657 x23)))
(define-fun x310 ((x23 Int)) Int (ite (= x183 x23) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x781 x23)))
(define-fun x291 ((x23 Int)) Int (ite (= x23 x1043) (x451 x820) (x310 x23)))
(define-fun x108 ((x23 Int)) Int (ite (and (> (+ x183 32) x23) (>= x23 x183)) (x888 (+ (- x23 x183) 0)) (x291 x23)))
(define-fun x782 ((x23 Int)) Int (ite x391 (x108 x23) (x291 x23)))
(define-fun x1066 ((x23 Int)) Int (ite x918 (x782 x23) (x781 x23)))
(define-fun x326 ((x23 Int)) Int (ite (= x23 x273) (x451 x884) (x1066 x23)))
(define-fun x27 ((x23 Int)) Int (ite (= x23 x246) 1 (x326 x23)))
(define-fun x31 ((x23 Int)) Int (ite (= x23 x273) 0 (x27 x23)))
(define-fun x995 ((x23 Int)) Int (ite x169 (x987 x23) (x31 x23)))
(define-fun x976 ((x23 Int)) Int (ite (= x358 x23) x599 (x995 x23)))
(define-fun x583 ((x23 Int)) Int (ite (= x789 x23) x132 (x976 x23)))
(define-fun x157 ((x23 Int)) Int (ite (= x23 x314) x255 (x583 x23)))
(define-fun x377 ((x23 Int)) Int (ite (= x789 x23) x536 (x976 x23)))
(define-fun x254 ((x23 Int)) Int (ite x699 (x976 x23) (ite x929 (ite x150 (x583 x23) (x157 x23)) (x377 x23))))
(define-fun x211 ((x23 Int)) Int (ite x1015 (x995 x23) (x254 x23)))
(define-fun x160 ((x23 Int)) Int (ite (= x23 x1027) 97199519776808029778168953285215024309695167179541945341261303444449322336256 (x211 x23)))
(define-fun x49 ((x23 Int)) Int (ite (= x922 x23) (x451 x753) (x160 x23)))
(define-fun x1023 ((x23 Int)) Int (ite (and (<= x1027 x23) (> (+ x1027 32) x23)) (x682 (+ (- x23 x1027) 0)) (x49 x23)))
(define-fun x989 ((x23 Int)) Int (ite x423 (x1023 x23) (x49 x23)))
(define-fun x672 ((x23 Int)) Int (ite x574 (x989 x23) (x211 x23)))
(define-fun x867 ((x23 Int)) Int (ite (= x964 x23) (x451 x884) (x672 x23)))
(define-fun x30 ((x23 Int)) Int (ite (= x856 x23) 1 (x867 x23)))
(define-fun x497 ((x23 Int)) Int (ite (= x23 x557) 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x30 x23)))
(define-fun x24 ((x23 Int)) Int (ite (= x585 x23) x514 (x497 x23)))
(define-fun x768 ((x23 Int)) Int (ite (= x271 x23) 0 (x24 x23)))
(define-fun x186 ((x23 Int)) Int (ite (= x724 x23) (x451 x884) (x768 x23)))
(define-fun x606 ((x23 Int)) Int (ite (= x223 x23) 1 (x186 x23)))
(define-fun x740 ((x23 Int)) Int (ite (= x23 x1032) 160 (x606 x23)))
(define-fun x454 ((x23 Int)) Int (ite (= x23 x904) 0 (x740 x23)))
(define-fun x577 ((x23 Int)) Int (ite (= x35 x23) 0 (x454 x23)))
(define-fun x370 ((x23 Int)) Int (ite (and (> (+ 32 x557) x23) (>= x23 x557)) (x1036 (+ 0 (- x23 x557))) (x577 x23)))
(define-fun x161 ((x23 x824)) Int (ite x252 (x1067 x23) (x860 x23)))
(define-fun x871 ((x23 x824)) Int (ite (= x23 x491) x522 (x274 x23)))
(define-fun x839 ((x23 x824)) Int (ite (= x23 x491) x103 (x274 x23)))
(define-fun x234 ((x23 x824)) Int (ite x43 (x871 x23) (x839 x23)))
(define-fun x122 ((x23 x824)) Int (ite (= x417 x23) 0 (x402 x23)))
(define-fun x610 ((x23 x824)) Int (ite x891 (x402 x23) (ite x726 (x402 x23) (x122 x23))))
(define-fun x133 ((x23 x824)) Int (ite (= x23 x262) x39 (x610 x23)))
(define-fun x1048 ((x23 x824)) Int (ite x383 (x610 x23) (x133 x23)))
(define-fun x1005 ((x23 x824)) Int (ite (= x23 x770) x248 (x1048 x23)))
(define-fun x990 ((x23 x824)) Int (ite x43 (ite x653 (x1048 x23) (x1005 x23)) (x610 x23)))
(define-fun x542 ((x23 x824)) Int (ite (= x23 x758) x458 (x317 x23)))
(define-fun x151 ((x23 x824)) Int (ite x169 (x317 x23) (x542 x23)))
(define-fun x907 ((x23 Int)) Int (ite x123 (x370 x23) (x577 x23)))
(define-fun x1026 ((x23 x824)) Int (ite x289 (x161 x23) (ite x123 (x338 x23) (x161 x23))))
(define-fun x643 ((x23 Int)) Int (ite x289 (x30 x23) (x907 x23)))
(define-fun x875 ((x23 Int)) Int (ite (= x23 x779) x400 (x643 x23)))
(define-fun x4 ((x259 Int)) Bool (=> (and (not (= x259 131072)) (not (= x259 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (not (= 4294967296 x259)) (not (= x259 549686827)) (not (= x259 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x259 65535)) (not (= x259 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 4294901760 x259)) (not (= 7776000 x259)) (not (= 18446744073709551615 x259)) (not (= x259 18511804847318769127852513085034306573455405177986258919159753969546364452864)) (not (= x259 346787896)) (not (= x259 97199519776808029778168953285215024309695167179541945341261303444449322336256)) (not (= x259 66853817334611902194238164484889819180315942402426128563245745834960013477038)) (not (= x259 1461501637330902918203684832716283019655932542975)) (not (= x259 1666326814)) (not (= 9518847204935358166548570266051330015907116135037852959641967396525866745856 x259)) (not (= x259 109562948294120585953088955926913691080166221410047079322077399086870164406272)) (not (= 4294967295 x259)) (not (= 6277101735386680763835789423207666416102355444464034512895 x259)) (> x259 10000) (not (= x259 65537)) (not (= x259 1536193505703097071473766605195189375248157893288704583667612676508713222144)) (not (= x259 353073666)) (not (= x259 65536))) (not ((_ is x17) (x532 x259)))))
(assert (x1053 x545))
(assert (x4 (x905 352)))
(assert (x719 x970))
(assert (x1053 x563))
(assert (= (and x434 x826) x470))
(assert (x1053 x223))
(assert (= x43 (or x653 x798)))
(assert (= (and x689 x765) x72))
(assert (= x855 (and (not x732) x75)))
(assert (and (=> (< 0 2) (= x89 (+ (x26 x89 2) (* 2 (x387 x89 2))))) (x720 x89 2) (x203 x89 2) (x592 x89 2)))
(assert (= x955 (=> (= x138 (not (< 128 x1000))) (and x138 x346))))
(assert (= (and (not x376) x357) x298))
(assert (= (and x552 (not x957)) x109))
(assert (= (or x846 x873) x973))
(assert (x719 x903))
(assert (= (=> (and (= (x167 (+ 1 x789)) x170) (= (<= x646 224) x237)) (and x237 (=> (= (ite (>= 32 x646) (x1045 (x532 (x254 x170)) 0) (ite (>= 64 x646) (x953 (x532 (x254 x170)) (x532 (x254 (x167 (+ x170 32)))) 0) (ite (>= 96 x646) (x579 (x532 (x254 x170)) (x532 (x254 (x167 (+ x170 32)))) (x532 (x254 (x167 (+ x170 64)))) 0) (ite (>= 128 x646) (x25 (x532 (x254 x170)) (x532 (x254 (x167 (+ 32 x170)))) (x532 (x254 (x167 (+ 64 x170)))) (x532 (x254 (x167 (+ x170 96)))) 0) (ite (<= x646 160) (x196 (x532 (x254 x170)) (x532 (x254 (x167 (+ x170 32)))) (x532 (x254 (x167 (+ 64 x170)))) (x532 (x254 (x167 (+ 96 x170)))) (x532 (x254 (x167 (+ x170 128)))) 0) (ite (<= x646 192) (x305 (x532 (x254 x170)) (x532 (x254 (x167 (+ 32 x170)))) (x532 (x254 (x167 (+ x170 64)))) (x532 (x254 (x167 (+ 96 x170)))) (x532 (x254 (x167 (+ x170 128)))) (x532 (x254 (x167 (+ 160 x170)))) 0) (ite (>= 224 x646) (x974 (x532 (x254 x170)) (x532 (x254 (x167 (+ x170 32)))) (x532 (x254 (x167 (+ x170 64)))) (x532 (x254 (x167 (+ x170 96)))) (x532 (x254 (x167 (+ x170 128)))) (x532 (x254 (x167 (+ x170 160)))) (x532 (x254 (x167 (+ 192 x170)))) 0) (x532 x260)))))))) x529) x147))) x932))
(assert (= (x88 288) (x451 (x532 (x88 288)))))
(assert (x1053 x16))
(assert (x4 (x657 (x167 (+ 32 x981)))))
(assert (= (+ 1 (x451 x15)) (x451 (x171 x15 1))))
(assert (=> (<= (x1050 x691) 10000) (= (x17 (x1050 x691)) (x532 (x1050 x691)))))
(assert (x13 x145))
(assert (x1053 x41))
(assert (x1053 x869))
(assert (= (x475 x505 248) (x387 x505 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (= (x905 352) (x451 (x532 (x905 352)))))
(assert (= x110 (and (not x952) x587)))
(assert (x1053 x1012))
(assert (= (and x335 x559) x213))
(assert (= (x254 (x167 (+ 192 x170))) (x451 (x532 (x254 (x167 (+ x170 192)))))))
(assert (x1053 x970))
(assert (x190 x930))
(assert (= (and x665 x508) x816))
(assert (= (and x780 x954) x466))
(assert (and (x578 x413 6277101735386680763835789423207666416102355444464034512896) (and (= (x693 x413 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (* x413 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040))) (= (x693 (- x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) 6277101735386680763835789423207666416102355444464034512896) (- (* 6277101735386680763835789423207666416102355444464034512896 x413) 726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656)) (= (x693 (- x413 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (- (* (- 115792089237316195417293883273301227089434195242432897623355228563449095127040) x413) (- 13407807929942597098847186273910239236930042012704388843369920083034445969792056777621235010053505504363840807472722485292991361205680392012899047377469440)))) (= (x693 x413 6277101735386680763835789423207666416102355444464034512896) (* 6277101735386680763835789423207666416102355444464034512896 x413)) (x164 x413 6277101735386680763835789423207666416102355444464034512896) (x752 x413 6277101735386680763835789423207666416102355444464034512896) (x1011 x413 6277101735386680763835789423207666416102355444464034512896) (x152 x413 6277101735386680763835789423207666416102355444464034512896)))
(assert (= x654 (=> (and (= x246 (x167 (+ x273 32))) (= x358 x273) (= (x953 x884 (x17 1) 0) x758) (= x468 (x452 4294967295 x135)) (= (x511 (+ (x60 x468 160) (x60 x413 192))) x458)) x432)))
(assert (x843 18446744073709551615))
(assert (x1053 x53))
(assert (x1053 x341))
(assert (x13 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x1053 x853))
(assert (x1053 x140))
(assert (=> (<= x1025 10000) (= (x532 x1025) (x17 x1025))))
(assert (x1053 x1056))
(assert (x1053 x633))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x903 (+ (x26 x903 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x903 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x903 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x903 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x903 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x1053 x112))
(assert (x1053 x458))
(assert (x1053 x503))
(assert (and (x197 x649 6277101735386680763835789423207666416102355444464034512896) (=> (and (< 0 x649) (> 6277101735386680763835789423207666416102355444464034512896 0)) (and (> (* 6277101735386680763835789423207666416102355444464034512896 (x387 x649 6277101735386680763835789423207666416102355444464034512896)) (- x649 6277101735386680763835789423207666416102355444464034512896)) (>= x649 (* (x387 x649 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)))) (x910 x649 6277101735386680763835789423207666416102355444464034512896) (= (- x649 (x452 6277101735386680763835789423207666416102355444464034512895 x649)) (* 6277101735386680763835789423207666416102355444464034512896 (x387 x649 6277101735386680763835789423207666416102355444464034512896))) (x231 x649 6277101735386680763835789423207666416102355444464034512896) (x817 x649 6277101735386680763835789423207666416102355444464034512896)))
(assert (= (=> (and (= x400 128) (= (x875 x513) x1000) (= (< 0 x1000) x34)) (and (=> (not x34) x346) (=> (and (= x517 (> x1000 32)) x34) (and (=> (and (= (< 64 x1000) x805) x517) (and (=> (not x805) x346) (=> (and x805 (= x457 (> x1000 96))) (and (=> x457 x955) (=> (not x457) x346))))) (=> (not x517) x346))))) x939))
(assert (x190 18446744073709551616))
(assert (x1053 x1057))
(assert (x1053 x683))
(assert (= x233 (=> (= x622 (= 0 x121)) (and (=> x622 x137) (=> (and (not x622) (and (= (x167 (+ x414 31)) x526) (= x1021 (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x526)) (= x757 (x167 (+ x1021 x63))) (= x429 (or (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x414) (and (= true (<= x414 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x414 32)))))) (and (=> x429 x137) (=> (and (and (= x476 (< 18446744073709551615 x853)) (= (x506 x63) x7) (= (x167 (+ x193 7776000)) x853) (= (x452 18446744073709551615 x7) x193)) (not x429)) (and (=> x476 x137) (=> (and (not x476) (and (= x769 x757) (= x853 x863))) x325)))))))))
(assert (= (and x591 x1033) x340))
(assert (x843 x20))
(assert (= x219 (=> (= x114 (= x944 0)) (and (=> x114 x137) (=> (and (and (= x117 (x167 (+ x59 31))) (= (x167 (+ x535 x1030)) x143) (= x382 (or (> x59 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x59) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x59) true)))) (= (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x117) x1030)) (not x114)) (and (=> (and (and (= x642 (x104 x535)) (= (> x1002 18446744073709551615) x666) (= (x167 (+ 7776000 x446)) x1002) (= x446 (x452 18446744073709551615 x642))) (not x382)) (and (=> x666 x137) (=> (and (and (= (x452 65535 x533) x659) (= (= 0 x659) x390) (= (x167 (+ 131072 x44)) x533) (= x253 (ite (not x390) (not (= (x452 65537 x533) 65537)) (not x390))) (= x44 (x167 (+ 65536 x792)))) (not x666)) (and (=> x253 x137) (=> (and (and (>= x112 0) (<= x112 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1059 (x452 131072 x396)) (= (x317 x424) x112) (= x396 (x475 x112 160)) (= x125 (= x1059 131072)) (= (x953 x884 (x17 1) 0) x424)) (not x253)) (and (=> (and x125 (and (= x379 (< x656 32)) (= x1042 (x953 x884 (x17 5) 0)) (= (x452 1 x52) x917) (= (x387 x52 2) x823) (= x52 (x234 x1042)) (= (ite (< 0 x917) x823 (x452 127 x823)) x656) (= (x511 (- x917 (ite x379 1 0))) x16) (= x716 (< 0 x16)))) (and (=> (and x716 (and (= (x167 (+ x143 32)) x318) (= (x167 (+ 32 x528)) x238) (= (x167 (+ x238 x143)) x1014) (= x359 (= 0 x656)) (= x572 (x387 x145 32)) (= x528 (x511 (* x572 32))) (= x145 (x167 (+ x656 31))))) (and (=> (and (not x359) (= (< 31 x656) x527)) (and (=> (and (not x527) (and (= (x387 x435 256) x343) (= (x234 x1042) x435) (= (x511 (* 256 x343)) x815))) x619) (=> (and (and (= x180 (> x316 x543)) (= x51 (x990 x561)) (= (x167 (+ 32 x318)) x543) (= x316 (x167 (+ x318 x656))) (= x561 (x1045 x1042 0)) (= (x171 x561 1) x791)) x527) (and (=> (not x180) x537) (=> x180 x608))))) (=> x359 x619))) (=> (not x716) x137))) (=> (and (and (= x139 (x17 0)) (= x143 x63)) (not x125)) x389))))))) (=> x382 x137)))))))
(assert (= (and x655 (not x77)) x500))
(assert (and (=> (< 0 128) (= x882 (+ (x26 x882 128) (* 128 (x387 x882 128))))) (x720 x882 128) (x203 x882 128) (x592 x882 128)))
(assert (x1053 x504))
(assert (x1053 x487))
(assert (= x352 (x451 (x532 x352))))
(assert (= (=> (and (= x491 (x953 x884 (x17 5) 0)) (= x688 (x274 x491)) (= x697 (< x276 32)) (= x739 (x1024 x513)) (= x799 (x511 (- x687 (ite x697 1 0)))) (= x276 (ite (> x687 0) x889 (x452 127 x889))) (= (x452 1 x688) x687) (= x605 (x959 (- x154 32))) (= (x167 (+ x1037 x419)) x535) (= x154 (x959 (- x535 x513))) (= x434 (> x799 0)) (= x889 (x387 x688 2))) (and (=> (and x434 (= (< 31 x276) x663)) (and (=> (and x663 (and (= x743 (x1045 x491 0)) (= (x387 x914 32) x504) (= (x171 x743 x474) x993) (= x975 (< (x451 x417) (x451 x541))) (= x417 (ite (< x739 32) x743 x993)) (= (x167 (+ 31 x739)) x241) (= (x171 x743 x504) x541) (= x474 (x387 x241 32)) (= (x167 (+ 31 x276)) x914))) (and (=> (not x975) x796) (=> x975 x129))) (=> (not x663) x668))) (=> (not x434) x137))) x281))
(assert (x1053 x632))
(assert (= x734 (and (not x433) x958)))
(assert (x190 x117))
(assert (x190 x756))
(assert (= 4294967296 (x451 (x17 4294967296))))
(assert (x1053 x242))
(assert (x1053 x766))
(assert (x1044 x897))
(assert (x485 x930))
(assert (=> (>= 10000 x496) (= (x17 x496) (x532 x496))))
(assert (= (and (not x703) x816) x604))
(assert (=> (<= (x905 160) 10000) (= (x532 (x905 160)) (x17 (x905 160)))))
(assert (x685 x50))
(assert (x1053 x447))
(assert (x190 x792))
(assert (=> (>= 10000 (x905 224)) (= (x17 (x905 224)) (x532 (x905 224)))))
(assert (x4 (x1050 (x167 (+ x691 96)))))
(assert (= (and x467 (not x224)) x613))
(assert (x1053 x154))
(assert (= (x451 (x532 (x254 x170))) (x254 x170)))
(assert (= (x375 (x167 (+ x170 32))) 0))
(assert (x1053 x266))
(assert (and (=> (< 0 65536) (= x396 (+ (x26 x396 65536) (* 65536 (x387 x396 65536))))) (x720 x396 65536) (x203 x396 65536) (x592 x396 65536)))
(assert (= (x532 7776000) (x17 7776000)))
(assert (x4 (x905 224)))
(assert (x1053 x659))
(assert (x1053 x589))
(assert (= (x375 x74) 0))
(assert (x10 x140))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x19 (+ (x26 x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x19 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x19 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (and (=> (< 0 18446744073709551616) (= x642 (+ (x26 x642 18446744073709551616) (* 18446744073709551616 (x387 x642 18446744073709551616))))) (x720 x642 18446744073709551616) (x203 x642 18446744073709551616) (x592 x642 18446744073709551616)))
(assert (= (x451 (x532 (x905 192))) (x905 192)))
(assert (= (=> (and (= x818 (= x842 0)) (= (ite (< x1002 x243) x243 x1002) x50) (= x842 (x452 1461501637330902918203684832716283019655932542975 x894)) (= (ite x239 x533 (ite (<= x533 65535) (x167 (+ x425 x533)) (x229 x533 x425))) x373) (= (> x188 x243) x239) (= x425 (x452 4294901760 x897))) (and (=> (and (= (= 0 x921) x376) x818) (and (=> (and (not x376) (and (= x482 (> x21 0)) (= (x959 (- x921 x967)) x21))) (and (=> (and (and (= (x167 (+ x748 x935)) x6) (= (x60 x50 192) x748) (= (x167 (+ x964 32)) x856) (= x174 (x229 x935 x748)) (= x947 (ite (<= x935 6277101735386680763835789423207666416102355444464034512895) x6 (ite x870 x489 x174))) (= (x167 (+ x935 x748)) x489) (= (x167 (+ (x511 (x60 x373 160)) x921)) x935) (= (< 0 x951) x582) (= x870 (>= 6277101735386680763835789423207666416102355444464034512895 x935)) (= (x167 (+ x964 32)) x557) (= x951 (x1054 (x532 x921)))) x482) (and (=> (and (and (or (not x263) (and (and x999 (= (= x704 (x338 (x532 x921))) x999) (= x704 (x161 (x532 x921))) (= x178 (>= (x338 (x532 x967)) x669)) (= (x161 (x532 x967)) x669) (> 4294967296 x523) x178) x263)) (and (= x263 (> x795 0)) (= x1032 (x167 (+ 32 x223))) (= (x167 (+ x904 32)) x35) (= (x167 (+ 160 x585)) x904) (= x724 (x167 (+ x271 32))) (= x585 (x167 (+ 4 x557))) (= x271 (x167 (+ x585 32))) (= (x167 (+ 32 x724)) x223))) x582) x941) (=> (and (= x779 x557) (not x582)) x939))) (=> (not x482) x137))) (=> x376 x137))) (=> (not x818) x137))) x124))
(assert (x843 131072))
(assert (=> (>= 10000 (x254 (x167 (+ x170 160)))) (= (x17 (x254 (x167 (+ 160 x170)))) (x532 (x254 (x167 (+ x170 160)))))))
(assert (x1053 x660))
(assert (x719 x632))
(assert (x719 x117))
(assert (x1053 x792))
(assert (x4 (x88 288)))
(assert (x190 (* x468 1461501637330902918203684832716283019655932542976)))
(assert (x1053 x725))
(assert (= (x254 (x167 (+ 160 x170))) (x451 (x532 (x254 (x167 (+ x170 160)))))))
(assert (x843 x894))
(assert (x1053 x916))
(assert (x1053 x851))
(assert (x1053 x59))
(assert (= (x532 65535) (x17 65535)))
(assert (and (x578 2 x739) (and (= (x693 2 (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x739) (- (* x739 2) (* x739 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 2 x739) (* x739 2)) (x164 2 x739) (x752 2 x739) (x1011 2 x739) (x152 2 x739)))
(assert (x843 x617))
(assert (x4 x601))
(assert (x564 x688))
(assert (= x570 (and (not x1016) x363)))
(assert (= x360 (and x765 (not x689))))
(assert (x564 x89))
(assert (x1053 x596))
(assert (= x639 (and x933 x721)))
(assert (x1053 x352))
(assert (x4 (x905 288)))
(assert (x1053 x79))
(assert (x1053 x730))
(assert (x1053 x435))
(assert (= (x451 (x17 4294901760)) 4294901760))
(assert (= (+ (x451 x743) x474) (x451 (x171 x743 x474))))
(assert (x1053 x761))
(assert (not x650))
(assert (x1053 x3))
(assert (x190 x761))
(assert (x1053 x930))
(assert (x1053 x892))
(assert (=> (>= 10000 x260) (= (x17 x260) (x532 x260))))
(assert (x1053 x20))
(assert (= (x451 (x171 x561 1)) (+ 1 (x451 x561))))
(assert (x190 x52))
(assert (= (x475 115792089237316195423570985008687907853269984665640564039457584007913129639935 x722) (ite (> 256 x722) (x387 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x969 2 x722)) 0)))
(assert (x1053 x707))
(assert (x1053 x935))
(assert (= (x17 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x532 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (= 0 (x375 x691)))
(assert (x190 x823))
(assert (= 346787896 (x451 (x17 346787896))))
(assert (= x933 (and x350 x783)))
(assert (x1053 x815))
(assert (= x5 (and (not x554) x416)))
(assert (x1053 x436))
(assert (x1053 x593))
(assert (x1053 x828))
(assert (x1053 x630))
(assert (= (or x574 x618) x92))
(assert (x48 x935))
(assert (= x113 (=> (= x58 (= x795 0)) (and (=> x58 x137) (=> (and (and (= x168 (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x970)) (= x970 (x167 (+ 31 x523))) (= x630 (x167 (+ x168 x557))) (= x645 (or (and (< x523 32) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x523))) (> x523 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (not x58)) (and (=> (and (not x645) (and (= (x907 x557) x503) (= x510 (x452 115792089210356248756420345214020892766250353992003419616917011526809519390720 x503)) (= x217 (= x510 x503)))) (and (=> (not x217) x137) (=> (and (and (= (= x660 109562948294120585953088955926913691080166221410047079322077399086870164406272) x813) (= x660 (x452 115792089210356248756420345214020892766250353992003419616917011526809519390720 x503))) x217) (and (=> (and (= x779 x630) x813) x939) (=> (not x813) x137))))) (=> x645 x137)))))))
(assert (= (=> (and (= (not (< x141 x316)) x374) (= x141 (x167 (+ 32 x543))) (= (x990 x791) x1018)) (and x374 x537)) x608))
(assert (x843 127))
(assert (= (and x558 (not x438)) x311))
(assert (= (or x899 x777) x584))
(assert (= (x60 x603 248) (x511 (* x603 452312848583266388373324160190187140051835877600158453279131187530910662656))))
(assert (= (or x822 x285) x710))
(assert (x1053 x32))
(assert (x1053 x117))
(assert (x4 x943))
(assert (= (and x751 x457) x664))
(assert (x10 x718))
(assert (= x289 (and (not x582) x218)))
(assert (= x357 (and x973 x818)))
(assert (and (x197 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656) (=> (and (< 0 x1056) (> 452312848583266388373324160190187140051835877600158453279131187530910662656 0)) (and (> (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x387 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656)) (- x1056 452312848583266388373324160190187140051835877600158453279131187530910662656)) (>= x1056 (* (x387 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)))) (x910 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (- x1056 (x452 452312848583266388373324160190187140051835877600158453279131187530910662655 x1056)) (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x387 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656))) (x231 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656) (x817 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (= (and x476 x478) x806))
(assert (x843 x89))
(assert (and (= (x693 9 3) 27) (= (x693 27 3) 81) (= 9 (x693 3 3)) (= 81 (x693 9 9))))
(assert (and (x197 x52 2) (=> (and (< 0 x52) (> 2 0)) (and (> (* 2 (x387 x52 2)) (- x52 2)) (>= x52 (* (x387 x52 2) 2)))) (x910 x52 2) (= (- x52 (x452 1 x52)) (* 2 (x387 x52 2))) (x231 x52 2) (x817 x52 2)))
(assert (x190 x89))
(assert (= 0 (x375 (x167 (+ x981 128)))))
(assert (= (=> (= x81 (= x753 (x17 0))) (and (=> (and (not x81) (and (and (= (< 0 x525) x333) (= (x167 (+ x1027 4)) x922)) (or (and x333 (and (< x399 4294967296) (= 1 x563))) (and (not x333) (= x563 x525))))) x847) (=> (and (and (= x964 x1027) (= (x475 x797 192) x243)) x81) x163))) x864))
(assert (x1053 x393))
(assert (x4 (x905 160)))
(assert (= 0 (x375 (x167 (+ 32 x691)))))
(assert (x1053 x316))
(assert (x685 x343))
(assert (= x208 (or x1015 x913)))
(assert (= 109562948294120585953088955926913691080166221410047079322077399086870164406272 (x451 (x17 109562948294120585953088955926913691080166221410047079322077399086870164406272))))
(assert (and (= 4096 (x969 2 12)) (= 5192296858534827628530496329220096 (x969 2 112)) (= (x969 2 52) 4503599627370496) (= (x969 2 173) 11972621413014756705924586149611790497021399392059392) (= (x969 2 17) 131072) (= 43556142965880123323311949751266331066368 (x969 2 135)) (= 39614081257132168796771975168 (x969 2 95)) (= (x969 2 22) 4194304) (= 46768052394588893382517914646921056628989841375232 (x969 2 165)) (= (x969 2 0) 1) (= 1427247692705959881058285969449495136382746624 (x969 2 150)) (= (x969 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 20282409603651670423947251286016 (x969 2 104)) (= (x969 2 159) 730750818665451459101842416358141509827966271488) (= (x969 2 175) 47890485652059026823698344598447161988085597568237568) (= (x969 2 97) 158456325028528675187087900672) (= (x969 2 66) 73786976294838206464) (= 295147905179352825856 (x969 2 68)) (= 4722366482869645213696 (x969 2 72)) (= 8796093022208 (x969 2 43)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x969 2 218)) (= (x969 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x969 2 161) 2923003274661805836407369665432566039311865085952) (= 191561942608236107294793378393788647952342390272950272 (x969 2 177)) (= (x969 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 316912650057057350374175801344 (x969 2 98)) (= (x969 2 28) 268435456) (= 4835703278458516698824704 (x969 2 82)) (= (x969 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x969 2 134) 21778071482940061661655974875633165533184) (= 696898287454081973172991196020261297061888 (x969 2 139)) (= 85070591730234615865843651857942052864 (x969 2 126)) (= (x969 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x969 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x969 2 114) 20769187434139310514121985316880384) (= 1208925819614629174706176 (x969 2 80)) (= (x969 2 48) 281474976710656) (= (x969 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 1125899906842624 (x969 2 50)) (= 12259964326927110866866776217202473468949912977468817408 (x969 2 183)) (= (x969 2 144) 22300745198530623141535718272648361505980416) (= 2048 (x969 2 11)) (= (x969 2 63) 9223372036854775808) (= 10889035741470030830827987437816582766592 (x969 2 133)) (= (x969 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 302231454903657293676544 (x969 2 78)) (= 803469022129495137770981046170581301261101496891396417650688 (x969 2 199)) (= (x969 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x969 2 46) 70368744177664) (= 8192 (x969 2 13)) (= 11150372599265311570767859136324180752990208 (x969 2 143)) (= (x969 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x969 2 54) 18014398509481984) (= 2787593149816327892691964784081045188247552 (x969 2 141)) (= (x969 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 25711008708143844408671393477458601640355247900524685364822016 (x969 2 204)) (= (x969 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 24519928653854221733733552434404946937899825954937634816 (x969 2 184)) (= (x969 2 117) 166153499473114484112975882535043072) (= (x969 2 18) 262144) (= 309485009821345068724781056 (x969 2 88)) (= (x969 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= (x969 2 47) 140737488355328) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x969 2 229)) (= (x969 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x969 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x969 2 10) 1024) (= (x969 2 140) 1393796574908163946345982392040522594123776) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x969 2 252)) (= (x969 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x969 2 84) 19342813113834066795298816) (= 1298074214633706907132624082305024 (x969 2 110)) (= (x969 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 766247770432944429179173513575154591809369561091801088 (x969 2 179)) (= 401734511064747568885490523085290650630550748445698208825344 (x969 2 198)) (= 12855504354071922204335696738729300820177623950262342682411008 (x969 2 203)) (= (x969 2 60) 1152921504606846976) (= 128 (x969 2 7)) (= (x969 2 58) 288230376151711744) (= (x969 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x969 2 255)) (= 2417851639229258349412352 (x969 2 81)) (= 649037107316853453566312041152512 (x969 2 109)) (= (x969 2 123) 10633823966279326983230456482242756608) (= 348449143727040986586495598010130648530944 (x969 2 138)) (= (x969 2 178) 383123885216472214589586756787577295904684780545900544) (= (x969 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x969 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x969 2 31) 2147483648) (= (x969 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x969 2 92) 4951760157141521099596496896) (= (x969 2 172) 5986310706507378352962293074805895248510699696029696) (= 1606938044258990275541962092341162602522202993782792835301376 (x969 2 200)) (= (x969 2 168) 374144419156711147060143317175368453031918731001856) (= (x969 2 30) 1073741824) (= 11417981541647679048466287755595961091061972992 (x969 2 153)) (= (x969 2 132) 5444517870735015415413993718908291383296) (= (x969 2 73) 9444732965739290427392) (= (x969 2 100) 1267650600228229401496703205376) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x969 2 249)) (= (x969 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 2305843009213693952 (x969 2 61)) (= (x969 2 29) 536870912) (= (x969 2 124) 21267647932558653966460912964485513216) (= (x969 2 1) 2) (= 174224571863520493293247799005065324265472 (x969 2 137)) (= (x969 2 156) 91343852333181432387730302044767688728495783936) (= (x969 2 24) 16777216) (= 68719476736 (x969 2 36)) (= (x969 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 4398046511104 (x969 2 42)) (= (x969 2 87) 154742504910672534362390528) (= (x969 2 142) 5575186299632655785383929568162090376495104) (= 411376139330301510538742295639337626245683966408394965837152256 (x969 2 208)) (= 36028797018963968 (x969 2 55)) (= 1237940039285380274899124224 (x969 2 90)) (= 2199023255552 (x969 2 41)) (= 4 (x969 2 2)) (= (x969 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 784637716923335095479473677900958302012794430558004314112 (x969 2 189)) (= (x969 2 53) 9007199254740992) (= 95780971304118053647396689196894323976171195136475136 (x969 2 176)) (= (x969 2 167) 187072209578355573530071658587684226515959365500928) (= 40564819207303340847894502572032 (x969 2 105)) (= 137438953472 (x969 2 37)) (= 365375409332725729550921208179070754913983135744 (x969 2 158)) (= (x969 2 91) 2475880078570760549798248448) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x969 2 248)) (= (x969 2 151) 2854495385411919762116571938898990272765493248) (= 12554203470773361527671578846415332832204710888928069025792 (x969 2 193)) (= (x969 2 14) 16384) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x969 2 244)) (= (x969 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x969 2 56) 72057594037927936) (= (x969 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x969 2 59) 576460752303423488) (= (x969 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x969 2 20) 1048576) (= (x969 2 76) 75557863725914323419136) (= (x969 2 5) 32) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x969 2 238)) (= (x969 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x969 2 243)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x969 2 230)) (= 274877906944 (x969 2 38)) (= (x969 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x969 2 39) 549755813888) (= (x969 2 25) 33554432) (= 2251799813685248 (x969 2 51)) (= (x969 2 40) 1099511627776) (= (x969 2 74) 18889465931478580854784) (= (x969 2 119) 664613997892457936451903530140172288) (= 35184372088832 (x969 2 45)) (= (x969 2 69) 590295810358705651712) (= 4611686018427387904 (x969 2 62)) (= 42535295865117307932921825928971026432 (x969 2 125)) (= 256 (x969 2 8)) (= (x969 2 111) 2596148429267413814265248164610048) (= (x969 2 118) 332306998946228968225951765070086144) (= 64 (x969 2 6)) (= (x969 2 85) 38685626227668133590597632) (= 618970019642690137449562112 (x969 2 89)) (= (x969 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x969 2 113) 10384593717069655257060992658440192) (= (x969 2 186) 98079714615416886934934209737619787751599303819750539264) (= 2993155353253689176481146537402947624255349848014848 (x969 2 171)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x969 2 213)) (= (x969 2 93) 9903520314283042199192993792) (= 2361183241434822606848 (x969 2 71)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x969 2 251)) (= (x969 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 1329227995784915872903807060280344576 (x969 2 120)) (= (x969 2 147) 178405961588244985132285746181186892047843328) (= (x969 2 15) 32768) (= 562949953421312 (x969 2 49)) (= (x969 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x969 2 236)) (= (x969 2 102) 5070602400912917605986812821504) (= 6277101735386680763835789423207666416102355444464034512896 (x969 2 192)) (= (x969 2 116) 83076749736557242056487941267521536) (= 324518553658426726783156020576256 (x969 2 108)) (= 45671926166590716193865151022383844364247891968 (x969 2 155)) (= 162259276829213363391578010288128 (x969 2 107)) (= (x969 2 19) 524288) (= 1645504557321206042154969182557350504982735865633579863348609024 (x969 2 210)) (= 1496577676626844588240573268701473812127674924007424 (x969 2 170)) (= 18446744073709551616 (x969 2 64)) (= (x969 2 35) 34359738368) (= 356811923176489970264571492362373784095686656 (x969 2 148)) (= (x969 2 106) 81129638414606681695789005144064) (= 77371252455336267181195264 (x969 2 86)) (= 147573952589676412928 (x969 2 67)) (= (x969 2 33) 8589934592) (= 604462909807314587353088 (x969 2 79)) (= 6427752177035961102167848369364650410088811975131171341205504 (x969 2 202)) (= (x969 2 121) 2658455991569831745807614120560689152) (= 2097152 (x969 2 21)) (= 50216813883093446110686315385661331328818843555712276103168 (x969 2 195)) (= 52656145834278593348959013841835216159447547700274555627155488768 (x969 2 215)) (= (x969 2 122) 5316911983139663491615228241121378304) (= 2722258935367507707706996859454145691648 (x969 2 131)) (= 22835963083295358096932575511191922182123945984 (x969 2 154)) (= (x969 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 10141204801825835211973625643008 (x969 2 103)) (= 170141183460469231731687303715884105728 (x969 2 127)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x969 2 224)) (= (x969 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x969 2 65) 36893488147419103232) (= 17179869184 (x969 2 34)) (= 65536 (x969 2 16)) (= (x969 2 57) 144115188075855872) (= (x969 2 23) 8388608) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x969 2 227)) (= 41538374868278621028243970633760768 (x969 2 115)) (= (x969 2 162) 5846006549323611672814739330865132078623730171904) (= 1461501637330902918203684832716283019655932542976 (x969 2 160)) (= (x969 2 77) 151115727451828646838272) (= 93536104789177786765035829293842113257979682750464 (x969 2 166)) (= (x969 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 8 (x969 2 3)) (= 6129982163463555433433388108601236734474956488734408704 (x969 2 182)) (= (x969 2 101) 2535301200456458802993406410752) (= (x969 2 136) 87112285931760246646623899502532662132736) (= (x969 2 94) 19807040628566084398385987584) (= 9671406556917033397649408 (x969 2 83)) (= 1361129467683753853853498429727072845824 (x969 2 130)) (= (x969 2 4) 16) (= 1180591620717411303424 (x969 2 70)) (= 134217728 (x969 2 27)) (= (x969 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= 512 (x969 2 9)) (= 633825300114114700748351602688 (x969 2 99)) (= 44601490397061246283071436545296723011960832 (x969 2 145)) (= (x969 2 163) 11692013098647223345629478661730264157247460343808) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x969 2 241)) (= 196159429230833773869868419475239575503198607639501078528 (x969 2 187)) (= (x969 2 157) 182687704666362864775460604089535377456991567872) (= (x969 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x969 2 169) 748288838313422294120286634350736906063837462003712) (= 105312291668557186697918027683670432318895095400549111254310977536 (x969 2 216)) (= 4294967296 (x969 2 32)) (= 1532495540865888858358347027150309183618739122183602176 (x969 2 180)) (= 37778931862957161709568 (x969 2 75)) (= (x969 2 164) 23384026197294446691258957323460528314494920687616) (= 5708990770823839524233143877797980545530986496 (x969 2 152)) (= (x969 2 149) 713623846352979940529142984724747568191373312) (= (x969 2 26) 67108864) (= (x969 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 680564733841876926926749214863536422912 (x969 2 129)) (= (x969 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x969 2 221)) (= 89202980794122492566142873090593446023921664 (x969 2 146)) (= 79228162514264337593543950336 (x969 2 96)) (= 340282366920938463463374607431768211456 (x969 2 128)) (= (x969 2 44) 17592186044416) (= 23945242826029513411849172299223580994042798784118784 (x969 2 174))))
(assert (let ((x259 (* 6277101735386680763835789423207666416102355444464034512896 x413))) (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x259 (+ (x26 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= x83 (and x760 x517)))
(assert (x1053 x344))
(assert (=> (>= 10000 (x657 (x167 (+ 32 x981)))) (= (x17 (x657 (x167 (+ 32 x981)))) (x532 (x657 (x167 (+ x981 32)))))))
(assert (= x1055 (or x700 x1049)))
(assert (= (and x357 x376) x384))
(assert (= (or (and x429 x321) (and x816 x703) x946 x667 (and x576 x249) (and x933 (not x721)) x418 x206 (and x386 x440) (and x714 x736) x925 x806 x12 x534 (and (not x794) x609) (and x294 x28) x45 x635 x804 (and x681 x47) x179 (and x900 x960) (and x222 x450) x415 x490 x328 (and x382 x849) (and x80 (not x217)) x612 (and x58 x1022) x551 (and x1069 (not x502)) x331 (and x645 x890) x313 (and x177 x172) (and (not x901) x366) x548 x607 x87 x570 (and x467 x224) x802 x158 (and x277 x759) (and x411 x469) x886 (and x728 (not x444)) x638 x212 (and (not x783) x350) (and x893 x484) (and x438 x558) x1040 (and x844 x937) x384 (and (not x811) x1001) (and (not x887) x9)) x1049))
(assert (x4 (x657 (x167 (+ x981 96)))))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x526 (+ (x26 x526 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x526 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x526 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x526 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x526 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x803 (=> (and (= x981 (x167 (+ x398 1))) (= x407 (<= x319 224))) (and x407 (=> (= x181 (ite (<= x319 32) (x1045 (x532 (x657 x981)) 0) (ite (<= x319 64) (x953 (x532 (x657 x981)) (x532 (x657 (x167 (+ 32 x981)))) 0) (ite (>= 96 x319) (x579 (x532 (x657 x981)) (x532 (x657 (x167 (+ x981 32)))) (x532 (x657 (x167 (+ 64 x981)))) 0) (ite (<= x319 128) (x25 (x532 (x657 x981)) (x532 (x657 (x167 (+ 32 x981)))) (x532 (x657 (x167 (+ 64 x981)))) (x532 (x657 (x167 (+ 96 x981)))) 0) (ite (<= x319 160) (x196 (x532 (x657 x981)) (x532 (x657 (x167 (+ x981 32)))) (x532 (x657 (x167 (+ x981 64)))) (x532 (x657 (x167 (+ 96 x981)))) (x532 (x657 (x167 (+ x981 128)))) 0) (ite (>= 192 x319) (x305 (x532 (x657 x981)) (x532 (x657 (x167 (+ 32 x981)))) (x532 (x657 (x167 (+ 64 x981)))) (x532 (x657 (x167 (+ 96 x981)))) (x532 (x657 (x167 (+ 128 x981)))) (x532 (x657 (x167 (+ x981 160)))) 0) (ite (<= x319 224) (x974 (x532 (x657 x981)) (x532 (x657 (x167 (+ x981 32)))) (x532 (x657 (x167 (+ 64 x981)))) (x532 (x657 (x167 (+ 96 x981)))) (x532 (x657 (x167 (+ x981 128)))) (x532 (x657 (x167 (+ 160 x981)))) (x532 (x657 (x167 (+ x981 192)))) 0) (x532 x1025))))))))) x85)))))
(assert (x1053 x143))
(assert (and (=> (< 0 131072) (= x930 (+ (x26 x930 131072) (* 131072 (x387 x930 131072))))) (x720 x930 131072) (x203 x930 131072) (x592 x930 131072)))
(assert (= (x17 65537) (x532 65537)))
(assert (x190 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x843 x479))
(assert (x685 x623))
(assert (= x146 (and x849 (not x382))))
(assert (= true x728))
(assert (x10 x894))
(assert (x1053 x992))
(assert (= (x451 (x532 x260)) x260))
(assert (= (x375 (x167 (+ 128 x691))) 0))
(assert (= 0 (x375 (x167 (+ 128 x170)))))
(assert (x1053 x195))
(assert (and (x578 x603 452312848583266388373324160190187140051835877600158453279131187530910662656) (and (= (x693 x603 (- 115339776388732929035197660848497720713218148788040405586178452820382218977280)) (* x603 (- 115339776388732929035197660848497720713218148788040405586178452820382218977280))) (= (x693 (- x603 115792089237316195423570985008687907853269984665640564039457584007913129639936) 452312848583266388373324160190187140051835877600158453279131187530910662656) (- (* 452312848583266388373324160190187140051835877600158453279131187530910662656 x603) 52374249726338269920211035149241586435466272736689036631732661889538140742474792878132321477214466514414186946040961136147476104734166288853256441430016)) (= (x693 (- x603 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115339776388732929035197660848497720713218148788040405586178452820382218977280)) (- (* (- 115339776388732929035197660848497720713218148788040405586178452820382218977280) x603) (- 13355433680216258829653813963056604541043899547855704341091828781832225889331072183923741976689688961175617671240445089717606406707212403657580392564654080)))) (= (x693 x603 452312848583266388373324160190187140051835877600158453279131187530910662656) (* 452312848583266388373324160190187140051835877600158453279131187530910662656 x603)) (x164 x603 452312848583266388373324160190187140051835877600158453279131187530910662656) (x752 x603 452312848583266388373324160190187140051835877600158453279131187530910662656) (x1011 x603 452312848583266388373324160190187140051835877600158453279131187530910662656) (x152 x603 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x1053 x198))
(assert (= (=> (and (= (x171 x417 1) x315) (= x66 (not (< (x451 x315) (x451 x541))))) (and x66 x796)) x129))
(assert (= (and x614 x91) x386))
(assert (x1053 x943))
(assert (= x1063 (or x324 x43)))
(assert (= (and x663 x470) x984))
(assert (x1053 x243))
(assert (=> (<= (x657 (x167 (+ 128 x981))) 10000) (= (x532 (x657 (x167 (+ x981 128)))) (x17 (x657 (x167 (+ x981 128)))))))
(assert (= x245 (and (not x333) x854)))
(assert (= (or x555 x518) x762))
(assert (x13 x112))
(assert (= x150 (and (not x462) x488)))
(assert (= x346 (=> (= (= 0 x140) x627) (and (=> x627 x472) (=> (and (and (= x224 (= x978 0)) (= (x452 1461501637330902918203684832716283019655932542975 x698) x144) (= (x1054 (x532 x144)) x978)) (not x627)) (and (=> (and (not x224) (and (or (not x677) (and (and (= x159 (x1026 (x532 x967))) (= x615 (<= x159 (x210 (x532 x967)))) (= (= x404 (x210 (x532 x144))) x199) x199 (> 4294967296 x694) (= (x1026 (x532 x144)) x404) x615) x677)) (= x677 (< 0 x962)))) x840) (=> x224 x137)))))))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x632 (+ (x26 x632 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x632 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x632 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x632 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x632 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x483 (and x567 x466)))
(assert (= (x375 (x167 (+ x170 160))) 0))
(assert (= (x532 18446744073709551615) (x17 18446744073709551615)))
(assert (x1053 x232))
(assert (x1053 x1047))
(assert (x247 x756))
(assert (x1053 x617))
(assert (x1053 x986))
(assert (x13 x52))
(assert (x13 x165))
(assert (=> (<= (x905 320) 10000) (= (x17 (x905 320)) (x532 (x905 320)))))
(assert (let ((x259 (* 1461501637330902918203684832716283019655932542976 x468))) (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x259 (+ (x26 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x1053 x1059))
(assert (x1053 x166))
(assert (= x674 (=> (and (= x1047 (x452 1461501637330902918203684832716283019655932542975 x84)) (= (= 0 x1047) x71)) (and (=> (and (= x358 x769) x71) x432) (=> (and (and (= (x452 131072 x617) x371) (>= x649 0) (= x322 (x953 x884 (x17 1) 0)) (= x617 (x475 x649 160)) (= x727 (= x371 131072)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x649) (= x649 (x317 x322))) (not x71)) (and (=> (and (and (= (x387 x89 2) x676) (= (> 32 x531) x949) (= x309 (x511 (- x821 (ite x949 1 0)))) (= (< 0 x309) x954) (= x89 (x234 x1034)) (= x531 (ite (> x821 0) x676 (x452 127 x676))) (= x1034 (x953 x884 (x17 5) 0)) (= (x452 1 x89) x821)) x727) (and (=> (and (and (= x279 (x167 (+ x126 32))) (= (= x531 0) x567) (= (x167 (+ x531 31)) x711) (= x398 (x167 (+ 32 x769))) (= (x511 (* 32 x94)) x126) (= (x167 (+ x769 x279)) x266) (= x94 (x387 x711 32))) x954) (and (=> x567 x369) (=> (and (not x567) (= (> x531 31) x1033)) (and (=> (and (and (= x546 (x387 x165 256)) (= x445 (x511 (* x546 256))) (= (x234 x1034) x165)) (not x1033)) x369) (=> (and (and (= (< x118 x250) x191) (= (x167 (+ x531 x398)) x250) (= x15 (x1045 x1034 0)) (= (x990 x15) x1004) (= (x171 x15 1) x800) (= (x167 (+ 32 x398)) x118)) x1033) (and (=> x191 x381) (=> (not x191) x437))))))) (=> (not x954) x137))) (=> (and (and (= x769 x183) (= x820 (x17 0))) (not x727)) x173)))))))
(assert (x1053 x248))
(assert (x190 256))
(assert (=> (<= x278 10000) (= (x532 x278) (x17 x278))))
(assert (= (x451 (x171 x262 1)) (+ (x451 x262) 1)))
(assert (= (and x732 x75) x252))
(assert (x190 x8))
(assert (x1053 x945))
(assert (=> (>= 10000 x921) (= (x532 x921) (x17 x921))))
(assert (x1053 x908))
(assert (= (+ (x451 x403) 1) (x451 (x171 x403 1))))
(assert (x4 (x254 (x167 (+ x170 128)))))
(assert (and (x197 x112 6277101735386680763835789423207666416102355444464034512896) (=> (and (< 0 x112) (> 6277101735386680763835789423207666416102355444464034512896 0)) (and (> (* 6277101735386680763835789423207666416102355444464034512896 (x387 x112 6277101735386680763835789423207666416102355444464034512896)) (- x112 6277101735386680763835789423207666416102355444464034512896)) (>= x112 (* (x387 x112 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)))) (x910 x112 6277101735386680763835789423207666416102355444464034512896) (= (- x112 (x452 6277101735386680763835789423207666416102355444464034512895 x112)) (* 6277101735386680763835789423207666416102355444464034512896 (x387 x112 6277101735386680763835789423207666416102355444464034512896))) (x231 x112 6277101735386680763835789423207666416102355444464034512896) (x817 x112 6277101735386680763835789423207666416102355444464034512896)))
(assert (=> (>= 10000 (x1050 (x167 (+ 192 x691)))) (= (x17 (x1050 (x167 (+ x691 192)))) (x532 (x1050 (x167 (+ 192 x691)))))))
(assert (x1053 x581))
(assert (= (=> (and (> x943 0) (< 0 x764) (= x73 false) (>= x41 0) (not (= x764 x967)) (<= x998 1461501637330902918203684832716283019655932542975) (not (= x764 x943)) (> x967 0) (= x514 x979) (= x601 x749) (>= x297 0) (<= x53 1461501637330902918203684832716283019655932542975) (= x778 false) (= x448 (x860 (x532 x764))) x349 (not (= x943 x967)) (= (< 0 (x1054 (x532 x943))) x349) (= x775 x911) (= 353073666 x258) (<= x764 1461501637330902918203684832716283019655932542975) (<= x943 1461501637330902918203684832716283019655932542975) (>= x998 0) (<= 0 x448) (>= x1068 0) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x494)) (< 131 x494)) (>= x512 0) (= x865 false) (= (x860 (x532 x967)) x41) (= x53 x228) (>= 1461501637330902918203684832716283019655932542975 x967) (= x735 x896) (<= 0 x306) x640 (= (= x443 0) x444) (>= x979 0) (< 0 x980) (= x188 x731) (= x426 x718) (<= x858 1461501637330902918203684832716283019655932542975) (= x306 x896) (= (x1054 (x532 x967)) x980) (= x36 x626) (>= 1461501637330902918203684832716283019655932542975 x1068) (= 4 x808) (>= 1461501637330902918203684832716283019655932542975 x979) (= x297 (x860 (x532 x943))) (= false x205) (<= 0 x257) (>= 1461501637330902918203684832716283019655932542975 x257) x968 (= x514 x1068) (>= 1461501637330902918203684832716283019655932542975 x306) (>= x858 0) (<= 0 x53) (= (> (x1054 (x532 x764)) 0) x968) (>= 1461501637330902918203684832716283019655932542975 x512) (= x640 (< 0 (x1054 (x532 x967))))) (and (=> (and (and (not (> 4 x494)) (< x436 549686827) (not (= x436 346787896)) (= 353073666 x436) (< x436 1666326814) (not (> 346787896 x436)) (= x294 (or (> x683 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x683 128) (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x683))))) (= (x959 (- x494 4)) x683)) x444) (and (=> x294 x137) (=> (and (not x294) (and (= x811 (= x718 x267)) (= (x452 1461501637330902918203684832716283019655932542975 x718) x267))) (and (=> (not x811) x137) (=> (and x811 (and (= (= x120 x911) x901) (= (x452 1461501637330902918203684832716283019655932542975 x911) x120))) (and (=> (not x901) x137) (=> (and (= x249 (< 18446744073709551615 x626)) x901) (and (=> x249 x137) (=> (and (and (= x198 (x167 (+ x545 31))) (= x794 (or (and (> x198 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x494)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x494) (<= x198 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x198 x494)))) (= x545 (x167 (+ x36 4)))) (not x249)) (and (=> (and (and (= x569 (x825 x545)) (= x714 (> x569 18446744073709551615))) x794) (and (=> (and (and (= (< x494 x861) x484) (= x861 (x167 (+ x569 x385))) (= (x167 (+ 32 x545)) x385)) (not x714)) (and (=> (and (not x484) (and (= (x452 1461501637330902918203684832716283019655932542975 x447) x288) (= x334 (= x514 x288)))) (and (=> (not x334) x137) (=> (and (= (or (> x569 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (< x569 128) (= (<= x569 57896044618658097711785492504343953926634992332820282019728792003956564819967) true))) x469) x334) (and (=> (and (and (= (x825 x835) x908) (= x222 (< 18446744073709551615 x908)) (= (x167 (+ x545 32)) x835)) (not x469)) (and (=> x222 x137) (=> (and (not x222) (and (= (or (and (= (<= x712 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x861 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x861 x712)) (and (<= x861 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x712 57896044618658097711785492504343953926634992332820282019728792003956564819967))) x502) (= (x167 (+ 31 x215)) x712) (= x215 (x167 (+ x835 x908))))) (and (=> (not x502) x137) (=> (and x502 (and (= x554 (< 18446744073709551615 x945)) (= x637 (x167 (+ 32 x215))) (= x945 (x825 x215)))) (and (=> (and (and (= (x167 (+ 128 x837)) x220) (= (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x19) x837) (= x746 (x167 (+ 32 x562))) (= x19 (x167 (+ x746 31))) (= (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x903) x562) (= (< x220 128) x919) (= (x167 (+ 31 x945)) x903) (= x857 (= 0 (ite x928 1 0))) (= x928 (or x919 x1031)) (= x1031 (> x220 18446744073709551615))) (not x554)) (and (=> (and (and (= x47 (> x336 x861)) (= (x167 (+ x637 x945)) x336)) x857) (and (=> (and (and (= x136 (x167 (+ x835 32))) (= (x825 x136) x921) (= x596 (x452 1461501637330902918203684832716283019655932542975 x921)) (= (x167 (+ 160 x945)) x40) (= x887 (= x596 x921))) (not x47)) (and (=> (and x887 (and (= (= x792 x332) x783) (= x701 (x167 (+ 32 x136))) (= (x452 65535 x792) x332) (= x792 (x825 x701)))) (and (=> (and (and (= x721 (= x1057 x140)) (= x140 (x825 x940)) (= x1057 (x452 1461501637330902918203684832716283019655932542975 x140)) (= x940 (x167 (+ x701 32)))) x783) (and (=> (not x721) x137) (=> x721 x600))) (=> (not x783) x137))) (=> (not x887) x137))) (=> x47 x137))) (=> (not x857) x137))) (=> x554 x137))))))) (=> x469 x137))))) (=> x484 x137))) (=> x714 x137))) (=> (not x794) x137))))))))))) (=> (not x444) x137))) x650))
(assert (= x765 (and x156 x1039)))
(assert (= (and x431 x11) x516))
(assert (=> (<= (x88 192) 10000) (= (x17 (x88 192)) (x532 (x88 192)))))
(assert (= (x17 1461501637330902918203684832716283019655932542975) (x532 1461501637330902918203684832716283019655932542975)))
(assert (x1053 x914))
(assert (let ((x259 (* x373 1461501637330902918203684832716283019655932542976))) (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x259 (+ (x26 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x1053 x676))
(assert (x1053 x256))
(assert (x1053 x84))
(assert (x1053 x926))
(assert (x1053 x426))
(assert (= (x451 (x17 18511804847318769127852513085034306573455405177986258919159753969546364452864)) 18511804847318769127852513085034306573455405177986258919159753969546364452864))
(assert (= (x375 x170) 0))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x766 (+ (x26 x766 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x766 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x766 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x766 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x766 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x381 (=> (and (= x251 (not (< x256 x250))) (= (x167 (+ x118 32)) x256) (= (x990 x800) x961)) (and x251 x437))))
(assert (= x212 (and x587 x952)))
(assert (x48 x533))
(assert (= 66853817334611902194238164484889819180315942402426128563245745834960013477038 (x451 (x532 66853817334611902194238164484889819180315942402426128563245745834960013477038))))
(assert (x1053 x258))
(assert (x843 x718))
(assert (= 0 (x375 (x167 (+ 96 x691)))))
(assert (and (=> (< 0 32) (= x903 (+ (x26 x903 32) (* 32 (x387 x903 32))))) (x720 x903 32) (x203 x903 32) (x592 x903 32)))
(assert (= (x475 x797 160) (x387 x797 1461501637330902918203684832716283019655932542976)))
(assert (= (=> (and (= (= (ite x33 1 0) 1) x115) (= (> x739 31) x33)) (and (=> (and (and (= (x167 (+ x102 x97)) x589) (= x102 (x452 x479 x20)) (= (x511 (* 8 x739)) x538) (= x593 (x167 (+ 32 x513))) (= x479 (x1024 x593)) (= x97 (x511 (* x739 2))) (= x421 (x167 (+ x102 x97))) (= (x229 x102 x97) x950) (= x103 (ite (<= x102 1) x589 (ite x776 x421 x950))) (= (<= x102 1) x776) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x475 115792089237316195423570985008687907853269984665640564039457584007913129639935 x538)) x20)) (not x115)) x647) (=> (and (and (= x708 (> x337 0)) (= (x1045 x491 0) x262) (= (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x739) x337)) x115) (and (=> (and (and (= x770 x262) (= x176 32)) (not x708)) x107) (=> x708 x717))))) x668))
(assert (x1053 x979))
(assert (and (x197 x553 452312848583266388373324160190187140051835877600158453279131187530910662656) (=> (and (< 0 x553) (> 452312848583266388373324160190187140051835877600158453279131187530910662656 0)) (and (> (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x387 x553 452312848583266388373324160190187140051835877600158453279131187530910662656)) (- x553 452312848583266388373324160190187140051835877600158453279131187530910662656)) (>= x553 (* (x387 x553 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)))) (x910 x553 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (- x553 (x452 452312848583266388373324160190187140051835877600158453279131187530910662655 x553)) (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x387 x553 452312848583266388373324160190187140051835877600158453279131187530910662656))) (x231 x553 452312848583266388373324160190187140051835877600158453279131187530910662656) (x817 x553 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x1053 x1032))
(assert (x1053 x852))
(assert (x4 (x88 352)))
(assert (= (=> (and (or (not x1008) (and x1008 (and (= (x452 x530 x851) x248) (= (x167 (+ x176 x513)) x755) (= x851 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x475 115792089237316195423570985008687907853269984665640564039457584007913129639935 x722))) (= x530 (x1024 x755)) (= (x511 (* x623 8)) x722) (= (x452 31 x739) x623)))) (= (< x337 x739) x1008)) x807) x107))
(assert (and (=> (< 0 32) (= x739 (+ (x26 x739 32) (* 32 (x387 x739 32))))) (x720 x739 32) (x203 x739 32) (x592 x739 32)))
(assert (and (x197 x620 256) (=> (and (< 0 x620) (> 256 0)) (and (> (* 256 (x387 x620 256)) (- x620 256)) (>= x620 (* (x387 x620 256) 256)))) (x910 x620 256) (= (- x620 (x452 255 x620)) (* 256 (x387 x620 256))) (x231 x620 256) (x817 x620 256)))
(assert (= x619 (=> (and (= x175 (x1050 x143)) (= x898 (< 0 x175))) (and (=> (not x898) x137) (=> (and (and (= x67 (x475 x553 248)) (= x553 (x1050 x318)) (= x508 (< 0 x67))) x898) (and (=> (and x508 (and (= x703 (> x284 x481)) (= (x1050 x143) x481) (= x284 (x167 (+ x67 1))))) (and (=> (not x703) x280) (=> x703 x137))) (=> (and (= x304 (x17 0)) (not x508)) x96)))))))
(assert (x719 x766))
(assert (x13 x649))
(assert (= (=> (and (= (= x795 0) x827) (or (not x827) x827)) x113) x941))
(assert (x1053 x6))
(assert (= (and x213 (not x131)) x876))
(assert (x843 255))
(assert (x843 4294901760))
(assert (x843 x756))
(assert (x564 x52))
(assert (x1053 x656))
(assert (= (x451 (x17 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x763 (and x675 (not x527))))
(assert (x1053 x284))
(assert (= (and (not x517) x760) x301))
(assert (= (and x406 x71) x169))
(assert (= x635 (and x651 x539)))
(assert (x4 (x1050 x691)))
(assert (= x559 (or x706 x500 x625 x201 x408)))
(assert (x61 x739))
(assert (= (and (not x277) x759) x388))
(assert (x190 x882))
(assert (= (and x665 (not x508)) x227))
(assert (and (x197 x571 32) (=> (and (< 0 x571) (> 32 0)) (and (> (* 32 (x387 x571 32)) (- x571 32)) (>= x571 (* (x387 x571 32) 32)))) (x910 x571 32) (= (- x571 (x452 31 x571)) (* 32 (x387 x571 32))) (x231 x571 32) (x817 x571 32)))
(assert (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x451 (x17 115792089210356248756420345214020892766250353992003419616917011526809519390720))))
(assert (= (and (not x975) x984) x726))
(assert (x4 x921))
(assert (x190 x911))
(assert (= (=> (= x715 (= 0 x986)) (and (=> (and (not x715) (and (= (x167 (+ x686 31)) x632) (= x438 (or (> x686 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (> 32 x686) (= (<= x686 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)))) (= (x167 (+ x183 x1017)) x1012) (= x1017 (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x632)))) (and (=> x438 x137) (=> (and (and (= x57 (> x997 18446744073709551615)) (= (x167 (+ 7776000 x367)) x997) (= x756 (x782 x183)) (= x367 (x452 18446744073709551615 x756))) (not x438)) (and (=> (and (not x57) (and (= x997 x413) (= x1012 x273))) x948) (=> x57 x137))))) (=> x715 x137))) x524))
(assert (= (and (not x457) x751) x292))
(assert (x1053 x757))
(assert (x843 x911))
(assert (= x363 (and x773 x464)))
(assert (x90 x102 x97))
(assert (x843 x153))
(assert (= x760 (and x34 x226)))
(assert (x4 x764))
(assert (x1053 x336))
(assert (x1053 x221))
(assert (= (x375 (x167 (+ x981 32))) 0))
(assert (x1053 x724))
(assert (x1053 x557))
(assert (= x750 (=> (and (= x62 (x167 (+ x314 32))) (= (not (> x264 x62)) x293) (= (x990 x149) x255)) (and x106 x293))))
(assert (and (x578 256 x343) (and (= (x693 256 (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 256 (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x343) (- (* x343 256) (* x343 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (- x343 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 256 x343) (* x343 256)) (x164 256 x343) (x752 256 x343) (x1011 256 x343) (x152 256 x343)))
(assert (x843 x903))
(assert (= (x451 (x17 1536193505703097071473766605195189375248157893288704583667612676508713222144)) 1536193505703097071473766605195189375248157893288704583667612676508713222144))
(assert (x4 x144))
(assert (x1053 x183))
(assert (x685 x413))
(assert (= (and x213 x131) x1039))
(assert (x10 x911))
(assert (x4 (x254 x170)))
(assert (= x509 (and x125 x1046)))
(assert (x48 x748))
(assert (= (and x975 x984) x594))
(assert (x1053 x838))
(assert (x1053 x1068))
(assert (= x366 (and x1001 x811)))
(assert (x90 x935 x748))
(assert (x1053 x1027))
(assert (x13 6277101735386680763835789423207666416102355444464034512896))
(assert (= (=> (= x539 (= 0 x962)) (and (=> x539 x137) (=> (not x539) x472))) x134))
(assert (= (or (and (not x909) x565) x938) x587))
(assert (= (x532 4294901760) (x17 4294901760)))
(assert (x843 x135))
(assert (and (x578 x373 1461501637330902918203684832716283019655932542976) (and (= (x693 x373 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (* x373 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960))) (= (x693 (- x373 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1461501637330902918203684832716283019655932542976) (- (* 1461501637330902918203684832716283019655932542976 x373) 169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536)) (= (x693 (- x373 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (- (* (- 115792089237316195423570985007226406215939081747436879206741300988257197096960) x373) (- 13407807929942597099574024998036615799469062179260703058867172057525692431234690984665004206576655545133536153655237612981186769890963219668027669280194560)))) (= (x693 x373 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 x373)) (x164 x373 1461501637330902918203684832716283019655932542976) (x752 x373 1461501637330902918203684832716283019655932542976) (x1011 x373 1461501637330902918203684832716283019655932542976) (x152 x373 1461501637330902918203684832716283019655932542976)))
(assert (= (x387 x649 6277101735386680763835789423207666416102355444464034512896) (x475 x649 192)))
(assert (x4 (x905 320)))
(assert (= x473 (and x893 (not x484))))
(assert (x190 4294967296))
(assert (= x1022 (or (and (not x827) x329) x355)))
(assert (= 0 (x375 (x167 (+ x170 192)))))
(assert (x4 x496))
(assert (x1053 x712))
(assert (x1053 x228))
(assert (= (and (not x716) x509) x45))
(assert (x190 x396))
(assert (= x1046 (and x22 (not x253))))
(assert (= x790 (and x636 (not x180))))
(assert (=> (>= 10000 (x905 256)) (= (x17 (x905 256)) (x532 (x905 256)))))
(assert (= x1015 (and (not x464) x773)))
(assert (= x822 (and x471 (not x397))))
(assert (x13 (x969 2 x538)))
(assert (x843 x889))
(assert (x1053 x903))
(assert (and (x578 x468 1461501637330902918203684832716283019655932542976) (and (= (x693 x468 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (* x468 (- 115792089237316195423570985007226406215939081747436879206741300988257197096960))) (= (x693 (- x468 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1461501637330902918203684832716283019655932542976) (- (* 1461501637330902918203684832716283019655932542976 x468) 169230328010303641331690318856389386196071598838855992136870091590247882556495704531248437872567112920983350278405979725889536)) (= (x693 (- x468 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195423570985007226406215939081747436879206741300988257197096960)) (- (* (- 115792089237316195423570985007226406215939081747436879206741300988257197096960) x468) (- 13407807929942597099574024998036615799469062179260703058867172057525692431234690984665004206576655545133536153655237612981186769890963219668027669280194560)))) (= (x693 x468 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 x468)) (x164 x468 1461501637330902918203684832716283019655932542976) (x752 x468 1461501637330902918203684832716283019655932542976) (x1011 x468 1461501637330902918203684832716283019655932542976) (x152 x468 1461501637330902918203684832716283019655932542976)))
(assert (x190 x894))
(assert (= (and (not x954) x780) x946))
(assert (= (and x81 x208) x618))
(assert (x1053 x895))
(assert (= (or x391 x734) x661))
(assert (= x76 (or x862 x598 x763)))
(assert (= x893 (and (not x714) x736)))
(assert (= x744 (and x509 x716)))
(assert (x843 x530))
(assert (= (=> (and (= (x167 (+ x493 x926)) x419) (= (> x1037 0) x335) (= x1037 (x327 x670))) (and (=> (and (and (= x194 x730) (= x419 x487) (= (x327 x730) x633) (= x131 (> x1037 32))) x335) (and (=> (and (and (= (< 64 x1037) x156) (= x580 (x696 x725)) (= (x167 (+ x419 32)) x621) (= (x167 (+ x194 32)) x725)) x131) (and (=> (not x156) x281) (=> (and (and (= x142 (x167 (+ x194 64))) (= x852 (x167 (+ 64 x419))) (= x834 (x880 x142)) (= (< 96 x1037) x689)) x156) (and (=> x689 x455) (=> (not x689) x281))))) (=> (not x131) x281))) (=> (not x335) x281))) x405))
(assert (= x226 (or x289 x754)))
(assert (= (x17 131072) (x532 131072)))
(assert (= (=> (and (= x351 (> x319 x430)) (= x430 (x167 (+ x319 1)))) (and (=> (and (not x351) (and (= x266 x183) (= x181 x820))) x173) (=> x351 x137))) x85))
(assert (x843 65537))
(assert (x1053 x711))
(assert (x410 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x969 2 x722)))
(assert (x1053 x547))
(assert (= (or x604 x227) x552))
(assert (x10 x698))
(assert (= (x375 (x167 (+ x691 192))) 0))
(assert (x1053 x250))
(assert (= (=> (and (= (x167 (+ 1 x646)) x477) (= x184 (> x646 x477))) (and (=> x184 x137) (=> (and (and (= x380 x1027) (= x753 x529)) (not x184)) x864))) x147))
(assert (x4 (x657 (x167 (+ x981 128)))))
(assert (= 0 (x375 x730)))
(assert (x843 x19))
(assert (= x854 (and x208 (not x81))))
(assert (x1053 x746))
(assert (x1053 x799))
(assert (= x450 (and (not x469) x411)))
(assert (and (=> (< 0 32) (= x766 (+ (x26 x766 32) (* 32 (x387 x766 32))))) (x720 x766 32) (x203 x766 32) (x592 x766 32)))
(assert (= (x451 (x532 x764)) x764))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x739 (+ (x26 x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x739 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x739 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x84 (+ (x26 x84 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x84 1461501637330902918203684832716283019655932542976))))) (x720 x84 1461501637330902918203684832716283019655932542976) (x203 x84 1461501637330902918203684832716283019655932542976) (x592 x84 1461501637330902918203684832716283019655932542976)))
(assert (x1053 x52))
(assert (x1053 x295))
(assert (x843 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (= (x475 115792089237316195423570985008687907853269984665640564039457584007913129639935 x538) (ite (> 256 x538) (x387 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x969 2 x538)) 0)))
(assert (= (x375 224) 0))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x503 (+ (x26 x503 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x503 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x503 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x503 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x503 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x13 x711))
(assert (= (x532 (x451 x541)) x541))
(assert (= (=> (= x98 true) x93) x137))
(assert (x1053 x279))
(assert (x1053 x412))
(assert (= x675 (and x744 (not x359))))
(assert (and (x578 32 x94) (and (= (x693 32 (- x94 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x94 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x94) (- (* x94 32) (* x94 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x94 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x94 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x94 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 32 x94) (* x94 32)) (x164 32 x94) (x752 32 x94) (x1011 32 x94) (x152 32 x94)))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x970 (+ (x26 x970 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x970 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x970 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x970 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x970 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x1053 x951))
(assert (= x638 (and x872 x54)))
(assert (= (and (not x335) x559) x966))
(assert (x13 2))
(assert (x190 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= (or x301 x664 x597 x292 x302) x971))
(assert (= (and x675 x527) x636))
(assert (x485 x396))
(assert (x10 x447))
(assert (x4 (x657 (x167 (+ 64 x981)))))
(assert (x1053 x522))
(assert (x1053 x297))
(assert (x1053 x135))
(assert (x786 x676))
(assert (x48 x102))
(assert (x1053 x749))
(assert (x1053 x175))
(assert (x1053 x882))
(assert (x843 x970))
(assert (x190 1461501637330902918203684832716283019655932542976))
(assert (= (and (not x429) x321) x478))
(assert (= (and x340 (not x191)) x127))
(assert (= (x451 (x17 66853817334611902194238164484889819180315942402426128563245745834960013477038)) 66853817334611902194238164484889819180315942402426128563245745834960013477038))
(assert (= (and x478 (not x476)) x1019))
(assert (x1053 x842))
(assert (and (=> (< 0 2) (= x688 (+ (x26 x688 2) (* 2 (x387 x688 2))))) (x720 x688 2) (x203 x688 2) (x592 x688 2)))
(assert (= (and x737 x1008) x798))
(assert (x1053 x797))
(assert (x4 (x88 192)))
(assert (x1053 x1002))
(assert (x190 x897))
(assert (x1053 x174))
(assert (= (x451 (x171 x417 1)) (+ (x451 x417) 1)))
(assert (x1053 x637))
(assert (x1053 x688))
(assert (x13 x553))
(assert (= (x475 x797 192) (x387 x797 6277101735386680763835789423207666416102355444464034512896)))
(assert (and (=> (< 0 18446744073709551616) (= x756 (+ (x26 x756 18446744073709551616) (* 18446744073709551616 (x387 x756 18446744073709551616))))) (x720 x756 18446744073709551616) (x203 x756 18446744073709551616) (x592 x756 18446744073709551616)))
(assert (x190 x688))
(assert (x1053 x841))
(assert (= (x451 (x17 97199519776808029778168953285215024309695167179541945341261303444449322336256)) 97199519776808029778168953285215024309695167179541945341261303444449322336256))
(assert (= x498 (and x172 (not x177))))
(assert (x1053 x1037))
(assert (and (=> (< 0 65536) (= x897 (+ (x26 x897 65536) (* 65536 (x387 x897 65536))))) (x720 x897 65536) (x203 x897 65536) (x592 x897 65536)))
(assert (= x75 (and (not x844) x937)))
(assert (= (and x444 x728) x28))
(assert (x1053 x523))
(assert (x843 x930))
(assert (= (x451 (x17 6277101735386680763835789423207666416102355444464034512895)) 6277101735386680763835789423207666416102355444464034512895))
(assert (=> (>= 10000 x601) (= (x532 x601) (x17 x601))))
(assert (x247 x7))
(assert (x1053 x446))
(assert (x1053 x863))
(assert (x1053 x917))
(assert (= (and (not x677) x613) x105))
(assert (x4 x1025))
(assert (x1053 x603))
(assert (= x612 (and x501 x185)))
(assert (x1053 x1060))
(assert (x1053 x538))
(assert (x1053 x997))
(assert (= (and x473 x334) x411))
(assert (x1053 x168))
(assert (x1053 x686))
(assert (x1053 x521))
(assert (= (x254 (x167 (+ 96 x170))) (x451 (x532 (x254 (x167 (+ x170 96)))))))
(assert (x843 x739))
(assert (= (x375 (x167 (+ x170 96))) 0))
(assert (= x9 (and (not x47) x681)))
(assert (x1053 x698))
(assert (= (and x366 x901) x576))
(assert (x190 x766))
(assert (=> (<= x967 10000) (= (x17 x967) (x532 x967))))
(assert (x4 x278))
(assert (x1053 x19))
(assert (= x849 (and x584 (not x114))))
(assert (= (x451 (x17 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x451 (x532 (x1050 (x167 (+ 128 x691))))) (x1050 (x167 (+ 128 x691)))))
(assert (x1053 x246))
(assert (x1053 x978))
(assert (x1053 x572))
(assert (x1053 x832))
(assert (x1053 x413))
(assert (x1053 x533))
(assert (= x287 (and x218 x582)))
(assert (x1053 x260))
(assert (x1053 x309))
(assert (= (x532 (x451 x753)) x753))
(assert (= (x475 x1056 248) (x387 x1056 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x1053 x662))
(assert (= (x375 (x167 (+ x981 96))) 0))
(assert (x1053 x580))
(assert (x685 x546))
(assert (= (x511 (* 6277101735386680763835789423207666416102355444464034512896 x413)) (x60 x413 192)))
(assert (=> (<= (x254 (x167 (+ x170 192))) 10000) (= (x532 (x254 (x167 (+ x170 192)))) (x17 (x254 (x167 (+ x170 192)))))))
(assert (x1053 x145))
(assert (= (x375 x828) 0))
(assert (x1053 x63))
(assert (x1053 x494))
(assert (x190 x135))
(assert (= (and x936 x1006) x312))
(assert (x1053 x512))
(assert (x1053 x911))
(assert (= (and (not x745) x101) x201))
(assert (= (x375 288) 0))
(assert (x90 x533 x425))
(assert (and (x578 32 x344) (and (= (x693 32 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x344) (- (* x344 32) (* x344 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 32 x344) (* x344 32)) (x164 32 x344) (x752 32 x344) (x1011 32 x344) (x152 32 x344)))
(assert (x190 (* 6277101735386680763835789423207666416102355444464034512896 x50)))
(assert (x307 x533))
(assert (x13 (x969 2 x722)))
(assert (= (x657 (x167 (+ x981 64))) (x451 (x532 (x657 (x167 (+ 64 x981)))))))
(assert (= x846 (and x92 (not x812))))
(assert (x1053 x385))
(assert (and (x197 x112 1461501637330902918203684832716283019655932542976) (=> (and (< 0 x112) (> 1461501637330902918203684832716283019655932542976 0)) (and (> (* 1461501637330902918203684832716283019655932542976 (x387 x112 1461501637330902918203684832716283019655932542976)) (- x112 1461501637330902918203684832716283019655932542976)) (>= x112 (* (x387 x112 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x910 x112 1461501637330902918203684832716283019655932542976) (= (- x112 (x452 1461501637330902918203684832716283019655932542975 x112)) (* 1461501637330902918203684832716283019655932542976 (x387 x112 1461501637330902918203684832716283019655932542976))) (x231 x112 1461501637330902918203684832716283019655932542976) (x817 x112 1461501637330902918203684832716283019655932542976)))
(assert (x247 x153))
(assert (= (x375 (x167 (+ 64 x170))) 0))
(assert (=> (>= 10000 (x254 (x167 (+ 32 x170)))) (= (x17 (x254 (x167 (+ 32 x170)))) (x532 (x254 (x167 (+ x170 32)))))))
(assert (= (and (not x813) x1038) x667))
(assert (x1053 x701))
(assert (x1053 x896))
(assert (= x991 (and x906 x130)))
(assert (x685 8))
(assert (x1053 x649))
(assert (= (and (not x595) x549) x706))
(assert (x1053 x144))
(assert (x190 x7))
(assert (x843 x396))
(assert (x48 x97))
(assert (x843 x761))
(assert (x1053 x120))
(assert (x1053 x980))
(assert (x1053 x345))
(assert (x843 x84))
(assert (=> (<= (x1050 (x167 (+ x691 32))) 10000) (= (x532 (x1050 (x167 (+ 32 x691)))) (x17 (x1050 (x167 (+ x691 32)))))))
(assert (= x207 (or x819 x680 x483)))
(assert (= x324 (and (not x115) x878)))
(assert (= 353073666 (x451 (x17 353073666))))
(assert (x843 x52))
(assert (= (or x934 x169) x773))
(assert (= x598 (and x744 x359)))
(assert (x1053 x961))
(assert (x1053 x513))
(assert (x1053 x103))
(assert (= (and x406 (not x71)) x323))
(assert (= (x375 160) 0))
(assert (= (x17 66853817334611902194238164484889819180315942402426128563245745834960013477038) (x532 66853817334611902194238164484889819180315942402426128563245745834960013477038)))
(assert (= x925 (and (not x857) x5)))
(assert (= (x1050 (x167 (+ 96 x691))) (x451 (x532 (x1050 (x167 (+ 96 x691)))))))
(assert (x13 x688))
(assert (x13 x620))
(assert (and (x578 32 x572) (and (= (x693 32 (- x572 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x572 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x572) (- (* x572 32) (* x572 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x572 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x572 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x572 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 32 x572) (* x572 32)) (x164 32 x572) (x752 32 x572) (x1011 32 x572) (x152 32 x572)))
(assert (x1053 x1043))
(assert (= (and (not x830) x394) x471))
(assert (x1053 x1009))
(assert (= (and x453 x69) x772))
(assert (x719 x19))
(assert (x685 2))
(assert (x1053 x947))
(assert (and (x197 x505 452312848583266388373324160190187140051835877600158453279131187530910662656) (=> (and (< 0 x505) (> 452312848583266388373324160190187140051835877600158453279131187530910662656 0)) (and (> (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x387 x505 452312848583266388373324160190187140051835877600158453279131187530910662656)) (- x505 452312848583266388373324160190187140051835877600158453279131187530910662656)) (>= x505 (* (x387 x505 452312848583266388373324160190187140051835877600158453279131187530910662656) 452312848583266388373324160190187140051835877600158453279131187530910662656)))) (x910 x505 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (- x505 (x452 452312848583266388373324160190187140051835877600158453279131187530910662655 x505)) (* 452312848583266388373324160190187140051835877600158453279131187530910662656 (x387 x505 452312848583266388373324160190187140051835877600158453279131187530910662656))) (x231 x505 452312848583266388373324160190187140051835877600158453279131187530910662656) (x817 x505 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (= x302 (and (not x805) x83)))
(assert (=> (>= 10000 (x254 (x167 (+ x170 128)))) (= (x532 (x254 (x167 (+ 128 x170)))) (x17 (x254 (x167 (+ 128 x170)))))))
(assert (= (x1050 (x167 (+ x691 64))) (x451 (x532 (x1050 (x167 (+ 64 x691)))))))
(assert (= (and x311 x57) x551))
(assert (= (x451 (x532 (x88 320))) (x88 320)))
(assert (x1053 x735))
(assert (= (x532 18511804847318769127852513085034306573455405177986258919159753969546364452864) (x17 18511804847318769127852513085034306573455405177986258919159753969546364452864)))
(assert (x1053 x278))
(assert (x13 x241))
(assert (x1053 x779))
(assert (and (x578 8 x739) (and (= (x693 8 (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x739) (- (* x739 8) (* x739 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x739 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 8 x739) (* x739 8)) (x164 8 x739) (x752 8 x739) (x1011 8 x739) (x152 8 x739)))
(assert (= (or x148 (and x627 x971)) x700))
(assert (=> (>= 10000 x214) (= (x17 x214) (x532 x214))))
(assert (x10 x921))
(assert (x13 32))
(assert (and (x578 256 x546) (and (= (x693 256 (- x546 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 256 (- x546 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x546) (- (* x546 256) (* x546 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x546 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x546 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (- x546 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 256 x546) (* x546 256)) (x164 256 x546) (x752 256 x546) (x1011 256 x546) (x152 256 x546)))
(assert (x1053 x314))
(assert (x843 x632))
(assert (x685 x603))
(assert (and (=> (< 0 128) (= x823 (+ (x26 x823 128) (* 128 (x387 x823 128))))) (x720 x823 128) (x203 x823 128) (x592 x823 128)))
(assert (x843 4294967295))
(assert (x1053 x481))
(assert (=> (<= (x88 352) 10000) (= (x17 (x88 352)) (x532 (x88 352)))))
(assert (x1053 x39))
(assert (x307 x792))
(assert (x1053 x621))
(assert (x1053 x713))
(assert (x1053 x74))
(assert (and (x197 x761 2) (=> (and (< 0 x761) (> 2 0)) (and (> (* 2 (x387 x761 2)) (- x761 2)) (>= x761 (* (x387 x761 2) 2)))) (x910 x761 2) (= (- x761 (x452 1 x761)) (* 2 (x387 x761 2))) (x231 x761 2) (x817 x761 2)))
(assert (x190 x642))
(assert (= (and (not x130) x906) x958))
(assert (x1053 x769))
(assert (x1053 x669))
(assert (=> (<= (x88 224) 10000) (= (x532 (x88 224)) (x17 (x88 224)))))
(assert (= x625 (and x498 (not x885))))
(assert (x1053 x543))
(assert (and (x197 x797 6277101735386680763835789423207666416102355444464034512896) (=> (and (< 0 x797) (> 6277101735386680763835789423207666416102355444464034512896 0)) (and (> (* 6277101735386680763835789423207666416102355444464034512896 (x387 x797 6277101735386680763835789423207666416102355444464034512896)) (- x797 6277101735386680763835789423207666416102355444464034512896)) (>= x797 (* (x387 x797 6277101735386680763835789423207666416102355444464034512896) 6277101735386680763835789423207666416102355444464034512896)))) (x910 x797 6277101735386680763835789423207666416102355444464034512896) (= (- x797 (x452 6277101735386680763835789423207666416102355444464034512895 x797)) (* 6277101735386680763835789423207666416102355444464034512896 (x387 x797 6277101735386680763835789423207666416102355444464034512896))) (x231 x797 6277101735386680763835789423207666416102355444464034512896) (x817 x797 6277101735386680763835789423207666416102355444464034512896)))
(assert (= (x657 (x167 (+ x981 32))) (x451 (x532 (x657 (x167 (+ x981 32)))))))
(assert (= (x1050 (x167 (+ x691 192))) (x451 (x532 (x1050 (x167 (+ x691 192)))))))
(assert (and (=> (< 0 2) (= x52 (+ (x26 x52 2) (* 2 (x387 x52 2))))) (x720 x52 2) (x203 x52 2) (x592 x52 2)))
(assert (= (and x498 x885) x549))
(assert (x1053 x505))
(assert (= (and x813 x1038) x754))
(assert (x843 31))
(assert (x190 x676))
(assert (x1053 x193))
(assert (= (and x973 (not x818)) x87))
(assert (x1053 x94))
(assert (= (x451 (x17 65536)) 65536))
(assert (= (and x362 x269) x488))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x698 (+ (x26 x698 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x698 1461501637330902918203684832716283019655932542976))))) (x720 x698 1461501637330902918203684832716283019655932542976) (x203 x698 1461501637330902918203684832716283019655932542976) (x592 x698 1461501637330902918203684832716283019655932542976)))
(assert (x190 65536))
(assert (x1053 x141))
(assert (x190 x533))
(assert (= (x475 x112 192) (x387 x112 6277101735386680763835789423207666416102355444464034512896)))
(assert (x1053 x220))
(assert (x1053 x569))
(assert (x1053 x155))
(assert (= x807 (=> (and (= x441 (x511 (* 2 x739))) (= (x167 (+ x441 1)) x522)) x647)))
(assert (x13 1461501637330902918203684832716283019655932542976))
(assert (x1053 x165))
(assert (and (x197 x649 1461501637330902918203684832716283019655932542976) (=> (and (< 0 x649) (> 1461501637330902918203684832716283019655932542976 0)) (and (> (* 1461501637330902918203684832716283019655932542976 (x387 x649 1461501637330902918203684832716283019655932542976)) (- x649 1461501637330902918203684832716283019655932542976)) (>= x649 (* (x387 x649 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x910 x649 1461501637330902918203684832716283019655932542976) (= (- x649 (x452 1461501637330902918203684832716283019655932542975 x649)) (* 1461501637330902918203684832716283019655932542976 (x387 x649 1461501637330902918203684832716283019655932542976))) (x231 x649 1461501637330902918203684832716283019655932542976) (x817 x649 1461501637330902918203684832716283019655932542976)))
(assert (= (x905 256) (x451 (x532 (x905 256)))))
(assert (x4 (x88 160)))
(assert (= (and x1069 x502) x416))
(assert (x1053 x571))
(assert (x190 x698))
(assert (= (x451 (x532 (x88 256))) (x88 256)))
(assert (x4 x260))
(assert (x1053 x704))
(assert (= x80 (and (not x645) x890)))
(assert (= x647 (=> (and (and (= (x167 (+ 4 x535)) x566) (= x787 (< 0 x232))) (or (and (= x232 x944) (not x787)) (and (and (= x944 1) (< x59 4294967296)) x787))) x219)))
(assert (x685 x739))
(assert (= (and x878 x115) x70))
(assert (x13 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x1053 x414))
(assert (= (x451 (x532 x967)) x967))
(assert (x1053 x718))
(assert (x1053 x8))
(assert (x1053 x889))
(assert (x1053 x448))
(assert (x190 x140))
(assert (x1053 x965))
(assert (and (=> (< 0 131072) (= x396 (+ (x26 x396 131072) (* 131072 (x387 x396 131072))))) (x720 x396 131072) (x203 x396 131072) (x592 x396 131072)))
(assert (= (x375 320) 0))
(assert (=> (>= 10000 (x905 352)) (= (x17 (x905 352)) (x532 (x905 352)))))
(assert (and (=> (< 0 2) (= x761 (+ (x26 x761 2) (* 2 (x387 x761 2))))) (x720 x761 2) (x203 x761 2) (x592 x761 2)))
(assert (= (x532 9518847204935358166548570266051330015907116135037852959641967396525866745856) (x17 9518847204935358166548570266051330015907116135037852959641967396525866745856)))
(assert (x1053 x982))
(assert (= (x657 (x167 (+ 96 x981))) (x451 (x532 (x657 (x167 (+ x981 96)))))))
(assert (x1053 x142))
(assert (= x804 (and x473 (not x334))))
(assert (= (x451 (x532 x1025)) x1025))
(assert (= 1461501637330902918203684832716283019655932542975 (x451 (x17 1461501637330902918203684832716283019655932542975))))
(assert (= x144 (x451 (x532 x144))))
(assert (x13 x571))
(assert (= x948 (=> (and (= (> x731 x413) x1006) (or (and (not x1006) (= x135 x617)) (and (= x135 0) x1006))) x654)))
(assert (x1053 x36))
(assert (x1053 x400))
(assert (x4 x352))
(assert (= (and x287 (not x263)) x634))
(assert (x1053 x585))
(assert (x190 x447))
(assert (x843 1461501637330902918203684832716283019655932542975))
(assert (= (x387 x553 452312848583266388373324160190187140051835877600158453279131187530910662656) (x475 x553 248)))
(assert (= (x88 160) (x451 (x532 (x88 160)))))
(assert (x843 1))
(assert true)
(assert (and (x197 x435 256) (=> (and (< 0 x435) (> 256 0)) (and (> (* 256 (x387 x435 256)) (- x435 256)) (>= x435 (* (x387 x435 256) 256)))) (x910 x435 256) (= (- x435 (x452 255 x435)) (* 256 (x387 x435 256))) (x231 x435 256) (x817 x435 256)))
(assert (= (=> (and (= (x475 x797 160) x930) (= (x151 x56) x797) (<= x797 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x452 131072 x930) x713) (= x56 (x953 x884 (x17 1) 0)) (= (= x713 131072) x464) (<= 0 x797)) (and (=> (and (and (= (> 32 x599) x729) (= (x234 x240) x761) (= x841 (x452 1 x761)) (= x1016 (< 0 x242)) (= (ite (> x841 0) x882 (x452 127 x882)) x599) (= (x953 x884 (x17 5) 0) x240) (= (x387 x761 2) x882) (= x242 (x511 (- x841 (ite x729 1 0))))) x464) (and (=> (and x1016 (and (= x767 (x167 (+ x628 32))) (= x344 (x387 x571 32)) (= x356 (= 0 x599)) (= x789 (x167 (+ 32 x358))) (= x628 (x511 (* x344 32))) (= x571 (x167 (+ x599 31))) (= (x167 (+ x358 x767)) x380))) (and (=> (and (not x356) (= x269 (< 31 x599))) (and (=> (and x269 (and (= x314 (x167 (+ 32 x789))) (= x132 (x990 x403)) (= x149 (x171 x403 1)) (= (< x314 x264) x462) (= (x167 (+ x789 x599)) x264) (= (x1045 x240 0) x403))) (and (=> x462 x750) (=> (not x462) x106))) (=> (and (and (= (x234 x240) x620) (= x345 (x387 x620 256)) (= (x511 (* 256 x345)) x536)) (not x269)) x2))) (=> x356 x2))) (=> (not x1016) x137))) (=> (and (not x464) (and (= x358 x1027) (= x753 (x17 0)))) x864))) x432))
(assert (= 18446744073709551615 (x451 (x17 18446744073709551615))))
(assert (= (and x394 x830) x1003))
(assert (x843 x8))
(assert (x1053 x808))
(assert (= x1040 (and (not x482) x298)))
(assert (= (and x715 x661) x418))
(assert (x1053 x118))
(assert (x1053 x687))
(assert (= x937 (and x299 x639)))
(assert (= (x375 (x167 (+ 160 x981))) 0))
(assert (= 0 (x375 (x167 (+ x981 192)))))
(assert (x1053 x97))
(assert (= (x532 353073666) (x17 353073666)))
(assert (x1053 x1004))
(assert (= 9518847204935358166548570266051330015907116135037852959641967396525866745856 (x451 (x17 9518847204935358166548570266051330015907116135037852959641967396525866745856))))
(assert (x1053 x170))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x447 (+ (x26 x447 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x447 1461501637330902918203684832716283019655932542976))))) (x720 x447 1461501637330902918203684832716283019655932542976) (x203 x447 1461501637330902918203684832716283019655932542976) (x592 x447 1461501637330902918203684832716283019655932542976)))
(assert (x1053 x353))
(assert (= x123 (and x263 x287)))
(assert (x1053 x795))
(assert (x14 x135))
(assert (and (=> (< 0 32) (= x526 (+ (x26 x526 32) (* 32 (x387 x526 32))))) (x720 x526 32) (x203 x526 32) (x592 x526 32)))
(assert (= (x657 x981) (x451 (x532 (x657 x981)))))
(assert (x190 x19))
(assert (x190 x903))
(assert (= 0 (x375 (x167 (+ 64 x981)))))
(assert (and (=> (< 0 262144) (= x617 (+ (x26 x617 262144) (* 262144 (x387 x617 262144))))) (x720 x617 262144) (x203 x617 262144) (x592 x617 262144)))
(assert (and (x197 x711 32) (=> (and (< 0 x711) (> 32 0)) (and (> (* 32 (x387 x711 32)) (- x711 32)) (>= x711 (* (x387 x711 32) 32)))) (x910 x711 32) (= (- x711 (x452 31 x711)) (* 32 (x387 x711 32))) (x231 x711 32) (x817 x711 32)))
(assert (= (and (not x54) x872) x574))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x921 (+ (x26 x921 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x921 1461501637330902918203684832716283019655932542976))))) (x720 x921 1461501637330902918203684832716283019655932542976) (x203 x921 1461501637330902918203684832716283019655932542976) (x592 x921 1461501637330902918203684832716283019655932542976)))
(assert (x843 65535))
(assert (= (and x363 x1016) x848))
(assert (x1053 x967))
(assert (= (x375 352) 0))
(assert (= x886 (and (not x434) x826)))
(assert (x1053 x477))
(assert (= (x511 (* x50 6277101735386680763835789423207666416102355444464034512896)) (x60 x50 192)))
(assert (= x383 (and x70 (not x708))))
(assert (x1053 x35))
(assert (= (and x1055 x98) x518))
(assert (= (=> (and (= x691 (x167 (+ 1 x318))) (= (<= x67 224) x616)) (and (=> (= x304 (ite (>= 32 x67) (x1045 (x532 (x1050 x691)) 0) (ite (<= x67 64) (x953 (x532 (x1050 x691)) (x532 (x1050 (x167 (+ 32 x691)))) 0) (ite (>= 96 x67) (x579 (x532 (x1050 x691)) (x532 (x1050 (x167 (+ 32 x691)))) (x532 (x1050 (x167 (+ x691 64)))) 0) (ite (>= 128 x67) (x25 (x532 (x1050 x691)) (x532 (x1050 (x167 (+ 32 x691)))) (x532 (x1050 (x167 (+ x691 64)))) (x532 (x1050 (x167 (+ 96 x691)))) 0) (ite (>= 160 x67) (x196 (x532 (x1050 x691)) (x532 (x1050 (x167 (+ x691 32)))) (x532 (x1050 (x167 (+ 64 x691)))) (x532 (x1050 (x167 (+ 96 x691)))) (x532 (x1050 (x167 (+ 128 x691)))) 0) (ite (<= x67 192) (x305 (x532 (x1050 x691)) (x532 (x1050 (x167 (+ 32 x691)))) (x532 (x1050 (x167 (+ 64 x691)))) (x532 (x1050 (x167 (+ x691 96)))) (x532 (x1050 (x167 (+ x691 128)))) (x532 (x1050 (x167 (+ x691 160)))) 0) (ite (<= x67 224) (x974 (x532 (x1050 x691)) (x532 (x1050 (x167 (+ x691 32)))) (x532 (x1050 (x167 (+ 64 x691)))) (x532 (x1050 (x167 (+ x691 96)))) (x532 (x1050 (x167 (+ 128 x691)))) (x532 (x1050 (x167 (+ 160 x691)))) (x532 (x1050 (x167 (+ 192 x691)))) 0) (x532 x352))))))))) x96) x616)) x280))
(assert (x1053 x626))
(assert (x1053 x568))
(assert (= x899 (and (not x787) x1063)))
(assert (= x591 (and x466 (not x567))))
(assert (x1053 x748))
(assert (x4 (x1050 (x167 (+ 160 x691)))))
(assert (=> (>= 10000 (x254 (x167 (+ x170 96)))) (= (x17 (x254 (x167 (+ x170 96)))) (x532 (x254 (x167 (+ 96 x170)))))))
(assert (= x780 (and x323 x727)))
(assert (x190 (* 6277101735386680763835789423207666416102355444464034512896 x413)))
(assert (= x369 (=> (and (= x1061 (< 0 x244)) (= (x657 x769) x244)) (and (=> (and (and (= x319 (x475 x505 248)) (= (x657 x398) x505) (= (> x319 0) x784)) x1061) (and (=> (and (not x784) (= x181 (x17 0))) x85) (=> (and (and (= x568 (x657 x769)) (= (< x568 x1060) x277) (= x1060 (x167 (+ x319 1)))) x784) (and (=> x277 x137) (=> (not x277) x803))))) (=> (not x1061) x137)))))
(assert (= x329 (or x123 x634)))
(assert (x1053 x642))
(assert (and (=> (< 0 262144) (= x396 (+ (x26 x396 262144) (* 262144 (x387 x396 262144))))) (x720 x396 262144) (x203 x396 262144) (x592 x396 262144)))
(assert (x1053 x528))
(assert (= (and (not x98) x1055) x555))
(assert (= (x905 224) (x451 (x532 (x905 224)))))
(assert (x1053 x940))
(assert (and (=> (< 0 256) (= x8 (+ (x26 x8 256) (* 256 (x387 x8 256))))) (x720 x8 256) (x203 x8 256) (x592 x8 256)))
(assert (x719 x739))
(assert (x4 (x1050 (x167 (+ x691 192)))))
(assert (x1053 x441))
(assert (= (x532 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x17 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x1053 x691))
(assert (x1053 x268))
(assert (= 0 (x375 256)))
(assert (x1053 x546))
(assert (x1053 x834))
(assert (x1053 x176))
(assert (x843 x882))
(assert (x1053 x981))
(assert (x1053 x764))
(assert (= x467 (and (not x627) x971)))
(assert (= (x375 (x167 (+ x691 64))) 0))
(assert (x190 x739))
(assert (x190 x617))
(assert (x1053 x856))
(assert (x843 x117))
(assert (x13 x797))
(assert (x1053 x536))
(assert (= 0 (x375 x981)))
(assert (= x655 (and x549 x595)))
(assert (=> (>= 10000 x144) (= (x17 x144) (x532 x144))))
(assert (= 0 (x375 x318)))
(assert (=> (<= (x1050 (x167 (+ x691 96))) 10000) (= (x532 (x1050 (x167 (+ 96 x691)))) (x17 (x1050 (x167 (+ 96 x691)))))))
(assert (=> (<= (x88 160) 10000) (= (x532 (x88 160)) (x17 (x88 160)))))
(assert (= (x375 x755) 0))
(assert (= x408 (and x745 x101)))
(assert (and (=> (< 0 128) (= x676 (+ (x26 x676 128) (* 128 (x387 x676 128))))) (x720 x676 128) (x203 x676 128) (x592 x676 128)))
(assert (=> (<= (x905 288) 10000) (= (x532 (x905 288)) (x17 (x905 288)))))
(assert (= (or x236 x790) x862))
(assert (= x751 (and x83 x805)))
(assert (x843 x7))
(assert (x1053 x944))
(assert (x190 x921))
(assert (and (x578 8 x623) (and (= (x693 8 (- x623 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x623 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x623) (- (* x623 8) (* x623 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x623 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x623 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x623 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 8 x623) (* x623 8)) (x164 8 x623) (x752 8 x623) (x1011 8 x623) (x152 8 x623)))
(assert (x13 x435))
(assert (= (and x576 (not x249)) x609))
(assert (x1053 x257))
(assert (= x455 (=> (and (= (x167 (+ x419 96)) x412) (= (x507 x74) x965) (= (x167 (+ 96 x194)) x74) (= (not (> x1037 128)) x588)) (and x281 x588))))
(assert (= (and (not x299) x639) x328))
(assert (and (=> (< 0 131072) (= x617 (+ (x26 x617 131072) (* 131072 (x387 x617 131072))))) (x720 x617 131072) (x203 x617 131072) (x592 x617 131072)))
(assert (x1053 x214))
(assert (x1053 x371))
(assert (and (=> (< 0 65536) (= x792 (+ (x26 x792 65536) (* 65536 (x387 x792 65536))))) (x720 x792 65536) (x203 x792 65536) (x592 x792 65536)))
(assert (x540 x930))
(assert (x1053 x200))
(assert (= (x475 x112 160) (x387 x112 1461501637330902918203684832716283019655932542976)))
(assert (= (x532 1536193505703097071473766605195189375248157893288704583667612676508713222144) (x17 1536193505703097071473766605195189375248157893288704583667612676508713222144)))
(assert (and (x578 x50 6277101735386680763835789423207666416102355444464034512896) (and (= (x693 x50 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (* x50 (- 115792089237316195417293883273301227089434195242432897623355228563449095127040))) (= (x693 (- x50 115792089237316195423570985008687907853269984665640564039457584007913129639936) 6277101735386680763835789423207666416102355444464034512896) (- (* 6277101735386680763835789423207666416102355444464034512896 x50) 726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656)) (= (x693 (- x50 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- 115792089237316195417293883273301227089434195242432897623355228563449095127040)) (- (* (- 115792089237316195417293883273301227089434195242432897623355228563449095127040) x50) (- 13407807929942597098847186273910239236930042012704388843369920083034445969792056777621235010053505504363840807472722485292991361205680392012899047377469440)))) (= (x693 x50 6277101735386680763835789423207666416102355444464034512896) (* 6277101735386680763835789423207666416102355444464034512896 x50)) (x164 x50 6277101735386680763835789423207666416102355444464034512896) (x752 x50 6277101735386680763835789423207666416102355444464034512896) (x1011 x50 6277101735386680763835789423207666416102355444464034512896) (x152 x50 6277101735386680763835789423207666416102355444464034512896)))
(assert (x1053 x894))
(assert (x1053 x306))
(assert (x843 x698))
(assert (= 549686827 (x451 (x17 549686827))))
(assert (x190 x503))
(assert (x1053 x496))
(assert (= (x451 (x532 x496)) x496))
(assert (x1053 x215))
(assert (x4 (x905 192)))
(assert (= x847 (=> (= (= x563 0) x185) (and (=> x185 x137) (=> (and (and (= x766 (x167 (+ 31 x399))) (= (x452 115792089237316195423570985008687907853269984665640564039457584007913129639904 x766) x838) (= (or (and (> 32 x399) (= (<= x399 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (> x399 57896044618658097711785492504343953926634992332820282019728792003956564819967)) x900) (= (x167 (+ x838 x1027)) x942)) (not x185)) (and (=> x900 x137) (=> (and (and (= x153 (x989 x1027)) (= (x167 (+ x1009 7776000)) x195) (= (> x195 18446744073709551615) x54) (= (x452 18446744073709551615 x153) x1009)) (not x900)) (and (=> (and (not x54) (and (= x195 x243) (= x942 x964))) x163) (=> x54 x137)))))))))
(assert (and (=> (< 0 32) (= x632 (+ (x26 x632 32) (* 32 (x387 x632 32))))) (x720 x632 32) (x203 x632 32) (x592 x632 32)))
(assert (= (and x298 x482) x218))
(assert (= x994 (=> (= x952 (= 0 x515)) (and (=> x952 x137) (=> (not x952) x733)))))
(assert (x1053 x102))
(assert (= x960 (and x501 (not x185))))
(assert (x10 x84))
(assert (x364 x530 x851))
(assert (= (=> (= (= x820 (x17 0)) x130) (and (=> (and (and (and (= x1043 (x167 (+ x183 4))) (= (< 0 x742) x433)) (or (and (and (< x686 4294967296) (= x986 1)) x433) (and (not x433) (= x742 x986)))) (not x130)) x524) (=> (and (and (= x273 x183) (= x413 (x475 x649 192))) x130) x948))) x173))
(assert (= (and x636 x180) x236))
(assert (x190 262144))
(assert (x685 6277101735386680763835789423207666416102355444464034512896))
(assert (x1053 x348))
(assert (x1053 x396))
(assert (= (and (not x351) x486) x1))
(assert (x1053 x493))
(assert (x4 (x254 (x167 (+ 192 x170)))))
(assert (x1053 x562))
(assert (= (and x565 x909) x938))
(assert (x4 (x657 x981)))
(assert (= x139 (x532 (x451 x139))))
(assert (= (x451 (x532 (x657 (x167 (+ 128 x981))))) (x657 (x167 (+ 128 x981)))))
(assert (x1053 x68))
(assert (= (and x92 x812) x873))
(assert (= (and x848 x356) x699))
(assert (x1053 x767))
(assert (= (and (not x440) x386) x836))
(assert (= x230 (and (not x1006) x936)))
(assert (= (and x957 x552) x490))
(assert (x247 x642))
(assert (= (x17 109562948294120585953088955926913691080166221410047079322077399086870164406272) (x532 109562948294120585953088955926913691080166221410047079322077399086870164406272)))
(assert (= x391 (and x958 x433)))
(assert (= x558 (and (not x715) x661)))
(assert (x1053 x1000))
(assert (= (=> (and (= x348 (x254 x358)) (= x300 (> x348 0))) (and (=> (not x300) x137) (=> (and (and (= (x254 x789) x1056) (= x646 (x475 x1056 248)) (= x91 (> x646 0))) x300) (and (=> (and (and (= x575 (x167 (+ 1 x646))) (= (< x586 x575) x440) (= (x254 x358) x586)) x91) (and (=> (not x440) x932) (=> x440 x137))) (=> (and (= (x17 0) x529) (not x91)) x147))))) x2))
(assert (x190 x889))
(assert (x4 (x1050 (x167 (+ x691 128)))))
(assert (and (=> (< 0 4294967296) (= x897 (+ (x26 x897 4294967296) (* 4294967296 (x387 x897 4294967296))))) (x720 x897 4294967296) (x203 x897 4294967296) (x592 x897 4294967296)))
(assert (= x163 (=> (and (or (and (and (= x897 0) (= x832 (x452 65536 x930)) (= (ite x1035 0 x797) x894) (= (= x832 65536) x1035)) x812) (and (and (= x894 x797) (= x897 x930)) (not x812))) (= (< x243 x731) x812)) x124)))
(assert (=> (<= x352 10000) (= (x532 x352) (x17 x352))))
(assert (= (=> (and (= (> x67 x200) x957) (= (x167 (+ 1 x67)) x200)) (and (=> x957 x137) (=> (and (and (= x63 x1014) (= x139 x304)) (not x957)) x389))) x96))
(assert (= (and x486 x351) x313))
(assert (x685 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x685 x468))
(assert (x13 x505))
(assert (x4 66853817334611902194238164484889819180315942402426128563245745834960013477038))
(assert (x843 x140))
(assert (= x872 (and x960 (not x900))))
(assert (x1053 x153))
(assert (x364 x479 x20))
(assert (= x802 (and x584 x114)))
(assert (x540 x396))
(assert (x190 x970))
(assert (= (x905 320) (x451 (x532 (x905 320)))))
(assert (x1053 x605))
(assert (= x128 (and x69 (not x453))))
(assert (x1053 x526))
(assert (x540 x617))
(assert (x4 (x254 (x167 (+ 160 x170)))))
(assert (x1053 x742))
(assert (x1053 x479))
(assert (x1053 x515))
(assert (= (x451 (x17 4294967295)) 4294967295))
(assert (x1053 x530))
(assert (x4 (x905 256)))
(assert (x4 (x1050 (x167 (+ x691 32)))))
(assert (x1053 x998))
(assert (x190 (* x373 1461501637330902918203684832716283019655932542976)))
(assert (= x915 (or x929 x422 x699)))
(assert (x685 x344))
(assert (x48 x425))
(assert (=> (<= (x88 256) 10000) (= (x17 (x88 256)) (x532 (x88 256)))))
(assert (= x717 (=> (and (= x828 (x167 (+ x513 32))) (= (x1024 x828) x39) (= (x171 x262 1) x461) (= (not (< 32 x337)) x920)) (and x920 (=> (and (= x461 x770) (= 64 x176)) x107)))))
(assert (x1053 x358))
(assert (x1053 x318))
(assert (= (=> (and (= (not (> x926 128)) x833) (= (x671 256) x992) (= x221 (x167 (+ x493 96)))) (and x405 x833)) x495))
(assert (= (and x217 x80) x1038))
(assert (= (x532 1666326814) (x17 1666326814)))
(assert (= x361 (or x330 x836)))
(assert (x1053 x1025))
(assert (x1053 x264))
(assert (= (and x708 x70) x845))
(assert (and (=> (< 0 65536) (= x930 (+ (x26 x930 65536) (* 65536 (x387 x930 65536))))) (x720 x930 65536) (x203 x930 65536) (x592 x930 65536)))
(assert (x1053 x427))
(assert (=> (<= (x657 (x167 (+ x981 96))) 10000) (= (x532 (x657 (x167 (+ x981 96)))) (x17 (x657 (x167 (+ 96 x981)))))))
(assert (x1053 x132))
(assert (x190 x718))
(assert (= (and x329 x827) x355))
(assert (x1053 x50))
(assert (x1053 x1017))
(assert (x459 x533))
(assert (= x665 (and x898 x76)))
(assert (x4 (x88 256)))
(assert (= x600 (=> (and (= x814 (>= 224 x581)) (= (x905 128) x581)) (and (=> (= x299 (= (ite (<= x581 32) (x1045 (x532 (x905 160)) 0) (ite (<= x581 64) (x953 (x532 (x905 160)) (x532 (x905 192)) 0) (ite (>= 96 x581) (x579 (x532 (x905 160)) (x532 (x905 192)) (x532 (x905 224)) 0) (ite (<= x581 128) (x25 (x532 (x905 160)) (x532 (x905 192)) (x532 (x905 224)) (x532 (x905 256)) 0) (ite (<= x581 160) (x196 (x532 (x905 160)) (x532 (x905 192)) (x532 (x905 224)) (x532 (x905 256)) (x532 (x905 288)) 0) (ite (>= 192 x581) (x305 (x532 (x905 160)) (x532 (x905 192)) (x532 (x905 224)) (x532 (x905 256)) (x532 (x905 288)) (x532 (x905 320)) 0) (ite (<= x581 224) (x974 (x532 (x905 160)) (x532 (x905 192)) (x532 (x905 224)) (x532 (x905 256)) (x532 (x905 288)) (x532 (x905 320)) (x532 (x905 352)) 0) (x532 x496)))))))) (x532 x601))) (and (=> (not x299) x137) (=> (and x299 (and (= (x1054 (x532 x214)) x353) (= x679 (x167 (+ 4 x220))) (= x844 (= x353 0)) (= (x452 1461501637330902918203684832716283019655932542975 x447) x214) (= (x167 (+ x679 32)) x707))) (and (=> (and (not x844) (and (= (> x515 0) x732) (or (and x732 (and x590 x1020 (= x1020 (<= x895 (x1067 (x532 x967)))) (= (x860 (x532 x214)) x869) (> 4294967296 x1007) (= x895 (x860 (x532 x967))) (= x590 (= (x1067 (x532 x214)) x869)))) (not x732)))) x883) (=> x844 x137))))) x814))))
(assert (x843 x792))
(assert (let ((x259 (* 452312848583266388373324160190187140051835877600158453279131187530910662656 x603))) (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x259 (+ (x26 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x1053 x775))
(assert (x409 x503))
(assert (= 0 (x375 x725)))
(assert (x843 65536))
(assert (= x278 (x451 (x532 x278))))
(assert (x1053 x468))
(assert (= (x17 65536) (x532 65536)))
(assert (= (and x666 x146) x331))
(assert (= x422 (and x362 (not x269))))
(assert (= x534 (and x184 x361)))
(assert (x843 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (x17 549686827) (x532 549686827)))
(assert (= x977 (and x1039 (not x156))))
(assert (x4 (x254 (x167 (+ 32 x170)))))
(assert (and (=> (< 0 4294967296) (= x135 (+ (x26 x135 4294967296) (* 4294967296 (x387 x135 4294967296))))) (x720 x135 4294967296) (x203 x135 4294967296) (x592 x135 4294967296)))
(assert (x1053 x62))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x894 (+ (x26 x894 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x894 1461501637330902918203684832716283019655932542976))))) (x720 x894 1461501637330902918203684832716283019655932542976) (x203 x894 1461501637330902918203684832716283019655932542976) (x592 x894 1461501637330902918203684832716283019655932542976)))
(assert (= x738 (and (not x784) x695)))
(assert (=> (>= 10000 (x1050 (x167 (+ 128 x691)))) (= (x17 (x1050 (x167 (+ x691 128)))) (x532 (x1050 (x167 (+ x691 128)))))))
(assert (= (and (not x1008) x737) x653))
(assert (x1053 x44))
(assert (x1053 x942))
(assert (= x65 (or x726 x594)))
(assert (x1053 x837))
(assert (x4 (x657 (x167 (+ x981 192)))))
(assert (= x1001 (and x28 (not x294))))
(assert (= (x657 (x167 (+ 192 x981))) (x451 (x532 (x657 (x167 (+ x981 192)))))))
(assert (x843 x688))
(assert (= (x451 (x532 (x905 160))) (x905 160)))
(assert (=> (<= (x657 (x167 (+ 64 x981))) 10000) (= (x17 (x657 (x167 (+ x981 64)))) (x532 (x657 (x167 (+ 64 x981)))))))
(assert (x1053 x67))
(assert (x1053 x398))
(assert (= (x451 (x532 (x254 (x167 (+ x170 128))))) (x254 (x167 (+ 128 x170)))))
(assert (x1053 x525))
(assert (x1053 x679))
(assert (x1053 x188))
(assert (x843 x526))
(assert (x843 x447))
(assert (x1053 x380))
(assert (x1053 x159))
(assert (x786 x882))
(assert (x1052 x8))
(assert (= (and (not x1061) x207) x12))
(assert (x190 131072))
(assert (x1053 x271))
(assert (= 0 (x375 x789)))
(assert (= (x532 4294967296) (x17 4294967296)))
(assert (x1053 x623))
(assert (x1053 x1018))
(assert (and (x578 256 x345) (and (= (x693 256 (- x345 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 256 (- x345 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x345) (- (* x345 256) (* x345 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x693 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x345 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* (- x345 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (- x345 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x693 256 x345) (* x345 256)) (x164 256 x345) (x752 256 x345) (x1011 256 x345) (x152 256 x345)))
(assert (x1053 x136))
(assert (= 1666326814 (x451 (x17 1666326814))))
(assert (x1053 x51))
(assert (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x117 (+ (x26 x117 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x117 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x117 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x117 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x117 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= x565 (or x252 x855)))
(assert (= x883 (=> (and (or (not x909) x909) (= x909 (= 0 x515))) x994)))
(assert (x1053 x404))
(assert (x1053 x267))
(assert (= (x451 (x17 65537)) 65537))
(assert (= (x451 (x171 x743 x504)) (+ x504 (x451 x743))))
(assert (x719 x526))
(assert (= (x387 x649 1461501637330902918203684832716283019655932542976) (x475 x649 160)))
(assert (= x680 (or x127 x261)))
(assert (= (x375 192) 0))
(assert (= x362 (and (not x356) x848)))
(assert (= x614 (and x915 x300)))
(assert (= (and x854 x333) x423))
(assert (x786 x823))
(assert (x786 x889))
(assert (= 131072 (x451 (x17 131072))))
(assert (= 0 (x375 (x167 (+ 160 x691)))))
(assert (= (x532 (x451 x315)) x315))
(assert (x1053 x276))
(assert (= x819 (and x591 (not x1033))))
(assert (x4 x214))
(assert (x1053 x343))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x140 (+ (x26 x140 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x140 1461501637330902918203684832716283019655932542976))))) (x720 x140 1461501637330902918203684832716283019655932542976) (x203 x140 1461501637330902918203684832716283019655932542976) (x592 x140 1461501637330902918203684832716283019655932542976)))
(assert (x4 (x88 224)))
(assert (x1053 x531))
(assert (x13 x914))
(assert (x1053 x962))
(assert (x4 (x88 320)))
(assert (x1053 x756))
(assert (= x350 (and x9 x887)))
(assert (x1053 x566))
(assert (x13 x761))
(assert (x843 x642))
(assert (= (x511 (* x373 1461501637330902918203684832716283019655932542976)) (x60 x373 160)))
(assert (= (x17 97199519776808029778168953285215024309695167179541945341261303444449322336256) (x532 97199519776808029778168953285215024309695167179541945341261303444449322336256)))
(assert (= (x17 4294967295) (x532 4294967295)))
(assert (x1053 x535))
(assert (= x741 (and x323 (not x727))))
(assert (x1053 x510))
(assert (x1053 x694))
(assert (x685 x373))
(assert (= x890 (and x1022 (not x58))))
(assert (x190 32))
(assert (= (=> (and (= x453 (< x863 x731)) (or (and x453 (and (= (ite x631 0 x112) x84) (= (= 65536 x427) x631) (= (x452 65536 x396) x427))) (and (= x112 x84) (not x453)))) x674) x325))
(assert (x1053 x194))
(assert (= x11 (or x931 x105)))
(assert (and (=> (< 0 262144) (= x930 (+ (x26 x930 262144) (* 262144 (x387 x930 262144))))) (x720 x930 262144) (x203 x930 262144) (x592 x930 262144)))
(assert (= (x451 (x17 65535)) 65535))
(assert (= (or x150 x320) x929))
(assert (= (and x1063 x787) x777))
(assert (x1053 x439))
(assert (x1053 x419))
(assert (x1053 x449))
(assert (x1053 x244))
(assert (x1053 x121))
(assert (= (=> (and (= x82 (<= x892 224)) (= x892 (x88 128))) (and x82 (=> (and (= x985 (< x393 1)) (= (x959 (- x670 x220)) x341) (= (ite (>= 32 x892) (x1045 (x532 (x88 160)) 0) (ite (<= x892 64) (x953 (x532 (x88 160)) (x532 (x88 192)) 0) (ite (>= 96 x892) (x579 (x532 (x88 160)) (x532 (x88 192)) (x532 (x88 224)) 0) (ite (<= x892 128) (x25 (x532 (x88 160)) (x532 (x88 192)) (x532 (x88 224)) (x532 (x88 256)) 0) (ite (>= 160 x892) (x196 (x532 (x88 160)) (x532 (x88 192)) (x532 (x88 224)) (x532 (x88 256)) (x532 (x88 288)) 0) (ite (>= 192 x892) (x305 (x532 (x88 160)) (x532 (x88 192)) (x532 (x88 224)) (x532 (x88 256)) (x532 (x88 288)) (x532 (x88 320)) 0) (ite (<= x892 224) (x974 (x532 (x88 160)) (x532 (x88 192)) (x532 (x88 224)) (x532 (x88 256)) (x532 (x88 288)) (x532 (x88 320)) (x532 (x88 352)) 0) (x532 x278)))))))) x972) (= x916 (x959 (- x341 32))) (= x513 (x167 (+ x670 64))) (= x393 (x354 128)) (= x194 (x167 (+ x670 32))) (= (x167 (+ x547 32)) x79) (= (x167 (+ x220 32)) x547) (= (x167 (+ 32 x79)) x670) (= (x953 (x532 66853817334611902194238164484889819180315942402426128563245745834960013477038) x972 0) x884)) (and (=> (and (and (= x177 (< 255 x392)) (= (x354 128) x392)) (not x985)) (and (=> x177 x137) (=> (and (and (= x439 (x167 (+ 32 x513))) (= x521 (x60 x603 248)) (= x885 (< 0 x926)) (= x8 (x354 128)) (= (x167 (+ x439 1)) x493) (= x603 (x452 255 x8)) (= x926 (x275 128))) (not x177)) (and (=> (not x885) x405) (=> (and (and (= x155 (x275 160)) (= x268 x493) (= x595 (< 32 x926))) x885) (and (=> (and (and (= x68 (x167 (+ x493 32))) (= (< 64 x926) x77) (= (x785 192) x3)) x595) (and (=> (not x77) x405) (=> (and x77 (and (= (x167 (+ 64 x493)) x32) (= x295 (x456 224)) (= x745 (< 96 x926)))) (and (=> (not x745) x405) (=> x745 x495))))) (=> (not x595) x405))))))) (=> x985 x137))))) x733))
(assert (=> (>= 10000 (x254 x170)) (= (x17 (x254 x170)) (x532 (x254 x170)))))
(assert (x1053 x823))
(assert (and (=> (< 0 32) (= x117 (+ (x26 x117 32) (* 32 (x387 x117 32))))) (x720 x117 32) (x203 x117 32) (x592 x117 32)))
(assert (= x22 (and x146 (not x666))))
(assert (x1053 x646))
(assert (= (x375 x142) 0))
(assert (x190 x526))
(assert (=> (<= (x1050 (x167 (+ 160 x691))) 10000) (= (x532 (x1050 (x167 (+ x691 160)))) (x17 (x1050 (x167 (+ 160 x691)))))))
(assert (x843 x851))
(assert (= (=> (or (not x98) x98) x652) x93))
(assert (= (and x416 x554) x158))
(assert (x13 x1056))
(assert (x1053 x670))
(assert (= x261 (and x340 x191)))
(assert (x843 x766))
(assert (and (x197 x145 32) (=> (and (< 0 x145) (> 32 0)) (and (> (* 32 (x387 x145 32)) (- x145 32)) (>= x145 (* (x387 x145 32) 32)))) (x910 x145 32) (= (- x145 (x452 31 x145)) (* 32 (x387 x145 32))) (x231 x145 32) (x817 x145 32)))
(assert (= x695 (and x207 x1061)))
(assert (= (x88 192) (x451 (x532 (x88 192)))))
(assert (and (x197 x797 1461501637330902918203684832716283019655932542976) (=> (and (< 0 x797) (> 1461501637330902918203684832716283019655932542976 0)) (and (> (* 1461501637330902918203684832716283019655932542976 (x387 x797 1461501637330902918203684832716283019655932542976)) (- x797 1461501637330902918203684832716283019655932542976)) (>= x797 (* (x387 x797 1461501637330902918203684832716283019655932542976) 1461501637330902918203684832716283019655932542976)))) (x910 x797 1461501637330902918203684832716283019655932542976) (= (- x797 (x452 1461501637330902918203684832716283019655932542975 x797)) (* 1461501637330902918203684832716283019655932542976 (x387 x797 1461501637330902918203684832716283019655932542976))) (x231 x797 1461501637330902918203684832716283019655932542976) (x817 x797 1461501637330902918203684832716283019655932542976)))
(assert (x1053 x858))
(assert (x564 x761))
(assert (x1053 x7))
(assert (= x1051 (and (not x125) x1046)))
(assert (= (x375 x593) 0))
(assert (x190 x84))
(assert (x1053 x421))
(assert (x1053 x1007))
(assert (x843 x921))
(assert (= (and x77 x655) x101))
(assert (= (x1050 (x167 (+ 160 x691))) (x451 (x532 (x1050 (x167 (+ 160 x691)))))))
(assert (= (x451 (x532 (x88 352))) (x88 352)))
(assert (= (and x613 x677) x931))
(assert (=> (<= (x88 288) 10000) (= (x17 (x88 288)) (x532 (x88 288)))))
(assert (= x172 (and x110 (not x985))))
(assert (= (and x5 x857) x681))
(assert (= (x532 (x451 x972)) x972))
(assert (= (and x784 x695) x759))
(assert (= (or x845 x383) x737))
(assert (= x652 x98))
(assert (= x736 (and x609 x794)))
(assert (=> (>= 10000 (x1050 (x167 (+ 64 x691)))) (= (x532 (x1050 (x167 (+ 64 x691)))) (x17 (x1050 (x167 (+ x691 64)))))))
(assert (x1053 x789))
(assert (=> (>= 10000 (x905 192)) (= (x17 (x905 192)) (x532 (x905 192)))))
(assert (= (x375 x398) 0))
(assert (= x913 (and x361 (not x184))))
(assert (= (x1050 (x167 (+ 32 x691))) (x451 (x532 (x1050 (x167 (+ 32 x691)))))))
(assert (x1053 x489))
(assert (and (=> (< 0 32) (= x19 (+ (x26 x19 32) (* 32 (x387 x19 32))))) (x720 x19 32) (x203 x19 32) (x592 x19 32)))
(assert (x410 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x969 2 x538)))
(assert (=> (<= (x254 (x167 (+ 64 x170))) 10000) (= (x532 (x254 (x167 (+ 64 x170)))) (x17 (x254 (x167 (+ 64 x170)))))))
(assert (x1053 x897))
(assert (and (x197 x165 256) (=> (and (< 0 x165) (> 256 0)) (and (> (* 256 (x387 x165 256)) (- x165 256)) (>= x165 (* (x387 x165 256) 256)))) (x910 x165 256) (= (- x165 (x452 255 x165)) (* 256 (x387 x165 256))) (x231 x165 256) (x817 x165 256)))
(assert (x1053 x445))
(assert (x4 (x254 (x167 (+ x170 96)))))
(assert (= 7776000 (x451 (x17 7776000))))
(assert (x685 x94))
(assert (= (or x388 x738) x486))
(assert (x1053 x1014))
(assert (x1053 x1030))
(assert (= x369 x437))
(assert (= x840 (=> (and (= x431 (= 0 x962)) (or (not x431) x431)) x134)))
(assert (x1053 x474))
(assert (x1053 x425))
(assert (x1053 x722))
(assert (= x69 (or x1019 x1003)))
(assert (= x320 (and x488 x462)))
(assert (= (x532 (x451 x417)) x417))
(assert (= (or x772 x128) x406))
(assert (= (x17 346787896) (x532 346787896)))
(assert (x1053 x586))
(assert (x1053 x319))
(assert (x1053 x601))
(assert (x190 x632))
(assert (=> (<= (x88 320) 10000) (= (x17 (x88 320)) (x532 (x88 320)))))
(assert (= x820 (x532 (x451 x820))))
(assert (and (x197 x914 32) (=> (and (< 0 x914) (> 32 0)) (and (> (* 32 (x387 x914 32)) (- x914 32)) (>= x914 (* (x387 x914 32) 32)))) (x910 x914 32) (= (- x914 (x452 31 x914)) (* 32 (x387 x914 32))) (x231 x914 32) (x817 x914 32)))
(assert (x1053 x332))
(assert (= x668 x796))
(assert (= x607 (and x985 x110)))
(assert (x1053 x337))
(assert (x1053 x1021))
(assert (= (x532 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x17 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x1053 x620))
(assert (x13 x89))
(assert (= (x451 (x532 (x254 (x167 (+ x170 32))))) (x254 (x167 (+ 32 x170)))))
(assert (x4 (x657 (x167 (+ x981 160)))))
(assert (= x601 (x451 (x532 x601))))
(assert (x685 1461501637330902918203684832716283019655932542976))
(assert (=> (<= (x657 (x167 (+ 192 x981))) 10000) (= (x532 (x657 (x167 (+ x981 192)))) (x17 (x657 (x167 (+ 192 x981)))))))
(assert (= x934 (or x312 x230)))
(assert (x843 x897))
(assert (x1053 x922))
(assert (x1053 x443))
(assert (x190 (* 452312848583266388373324160190187140051835877600158453279131187530910662656 x603)))
(assert (= (or x65 x891) x878))
(assert (x1053 x21))
(assert (x1053 x40))
(assert (x1053 x904))
(assert (and (=> (< 0 32) (= x970 (+ (x26 x970 32) (* 32 (x387 x970 32))))) (x720 x970 32) (x203 x970 32) (x592 x970 32)))
(assert (= (x451 (x532 (x88 224))) (x88 224)))
(assert (= (x60 x468 160) (x511 (* x468 1461501637330902918203684832716283019655932542976))))
(assert (= (and x651 (not x539)) x148))
(assert (= (x905 288) (x451 (x532 (x905 288)))))
(assert (= x206 (and x915 (not x300))))
(assert (x1053 x950))
(assert (and (=> (< 0 26959946667150639794667015087019630673637144422540572481103610249216) (= x503 (+ (x26 x503 26959946667150639794667015087019630673637144422540572481103610249216) (* 26959946667150639794667015087019630673637144422540572481103610249216 (x387 x503 26959946667150639794667015087019630673637144422540572481103610249216))))) (x720 x503 26959946667150639794667015087019630673637144422540572481103610249216) (x203 x503 26959946667150639794667015087019630673637144422540572481103610249216) (x592 x503 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x190 128))
(assert (x1053 x599))
(assert (x685 256))
(assert (x4 (x1050 (x167 (+ 64 x691)))))
(assert (x1053 x628))
(assert (= (and x22 x253) x415))
(assert (x1053 x861))
(assert (x1053 x553))
(assert (x685 x572))
(assert (x843 x503))
(assert (x1053 x430))
(assert (x1053 x367))
(assert (and (x197 x241 32) (=> (and (< 0 x241) (> 32 0)) (and (> (* 32 (x387 x241 32)) (- x241 32)) (>= x241 (* (x387 x241 32) 32)))) (x910 x241 32) (= (- x241 (x452 31 x241)) (* 32 (x387 x241 32))) (x231 x241 32) (x817 x241 32)))
(assert (= (or x991 x918) x936))
(assert (=> (<= (x657 (x167 (+ x981 160))) 10000) (= (x532 (x657 (x167 (+ x981 160)))) (x17 (x657 (x167 (+ x981 160)))))))
(assert (= (x1050 x691) (x451 (x532 (x1050 x691)))))
(assert (=> (<= x943 10000) (= (x17 x943) (x532 x943))))
(assert (= (and x471 x397) x285))
(assert (= (x532 (x451 x884)) x884))
(assert (x1053 x575))
(assert (= x918 (and (not x57) x311)))
(assert (and (x197 x688 2) (=> (and (< 0 x688) (> 2 0)) (and (> (* 2 (x387 x688 2)) (- x688 2)) (>= x688 (* (x387 x688 2) 2)))) (x910 x688 2) (= (- x688 (x452 1 x688)) (* 2 (x387 x688 2))) (x231 x688 2) (x817 x688 2)))
(assert (= (and (not x622) x710) x321))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x911 (+ (x26 x911 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x911 1461501637330902918203684832716283019655932542976))))) (x720 x911 1461501637330902918203684832716283019655932542976) (x203 x911 1461501637330902918203684832716283019655932542976) (x592 x911 1461501637330902918203684832716283019655932542976)))
(assert (and (=> (< 0 65536) (= x533 (+ (x26 x533 65536) (* 65536 (x387 x533 65536))))) (x720 x533 65536) (x203 x533 65536) (x592 x533 65536)))
(assert (x1053 x392))
(assert (x1053 x273))
(assert (x1053 x921))
(assert (= x906 (or x1 x741)))
(assert (and (=> (< 0 18446744073709551616) (= x7 (+ (x26 x7 18446744073709551616) (* 18446744073709551616 (x387 x7 18446744073709551616))))) (x720 x7 18446744073709551616) (x203 x7 18446744073709551616) (x592 x7 18446744073709551616)))
(assert (= x537 x619))
(assert (= (=> (= (= (x17 0) x139) x830) (and (=> (and (not x830) (and (and (= x662 (x167 (+ 4 x63))) (= (> x982 0) x397)) (or (and (= x121 x982) (not x397)) (and x397 (and (> 4294967296 x414) (= x121 1)))))) x233) (=> (and (and (= x63 x769) (= x863 (x475 x112 192))) x830) x325))) x389))
(assert (and (=> (< 0 18446744073709551616) (= x153 (+ (x26 x153 18446744073709551616) (* 18446744073709551616 (x387 x153 18446744073709551616))))) (x720 x153 18446744073709551616) (x203 x153 18446744073709551616) (x592 x153 18446744073709551616)))
(assert (x843 x533))
(assert (= x1069 (and x450 (not x222))))
(assert (= x943 (x451 (x532 x943))))
(assert (x1053 x373))
(assert (= (x451 (x532 (x254 (x167 (+ 64 x170))))) (x254 (x167 (+ x170 64)))))
(assert (x1053 x255))
(assert (x1053 x241))
(assert (= x214 (x451 (x532 x214))))
(assert (x1053 x514))
(assert (x1053 x238))
(assert (x1053 x126))
(assert (= x597 (and (not x34) x226)))
(assert (x1053 x739))
(assert (=> (<= x764 10000) (= (x17 x764) (x532 x764))))
(assert (x685 32))
(assert (x13 256))
(assert (= x891 (and (not x663) x470)))
(assert (let ((x259 (* x50 6277101735386680763835789423207666416102355444464034512896))) (and (=> (< 0 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x259 (+ (x26 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x387 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x720 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x203 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x592 x259 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (and (=> (< 0 128) (= x889 (+ (x26 x889 128) (* 128 (x387 x889 128))))) (x720 x889 128) (x203 x889 128) (x592 x889 128)))
(assert (=> (>= 10000 (x657 x981)) (= (x532 (x657 x981)) (x17 (x657 x981)))))
(assert (= x651 (or x516 (and (not x431) x11))))
(assert (= (or x245 x423) x501))
(assert (x4 (x254 (x167 (+ x170 64)))))
(assert (x1053 x821))
(assert (x190 2))
(assert (x1053 x288))
(assert (and (x197 x89 2) (=> (and (< 0 x89) (> 2 0)) (and (> (* 2 (x387 x89 2)) (- x89 2)) (>= x89 (* (x387 x89 2) 2)))) (x910 x89 2) (= (- x89 (x452 1 x89)) (* 2 (x387 x89 2))) (x231 x89 2) (x817 x89 2)))
(assert (x843 x823))
(assert (= (or x109 x1051) x394))
(assert (x1053 x89))
(assert (= (and (not x91) x614) x330))
(assert (x190 x153))
(assert (x1053 x399))
(assert (x1053 x835))
(assert (x685 x345))
(assert (= x2 x106))
(assert (x1053 x755))
(assert (= (and (not x898) x76) x179))
(assert (x843 x676))
(assert (= x826 (or x72 x977 x360 x966 x876)))
(assert (x1053 x731))
(assert (= (x17 6277101735386680763835789423207666416102355444464034512895) (x532 6277101735386680763835789423207666416102355444464034512895)))
(assert (x4 x967))
(assert (= (and x710 x622) x548))
(assert (= x921 (x451 (x532 x921))))
(assert (and (=> (< 0 1461501637330902918203684832716283019655932542976) (= x718 (+ (x26 x718 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x387 x718 1461501637330902918203684832716283019655932542976))))) (x720 x718 1461501637330902918203684832716283019655932542976) (x203 x718 1461501637330902918203684832716283019655932542976) (x592 x718 1461501637330902918203684832716283019655932542976)))
(assert (= (x451 (x532 (x657 (x167 (+ 160 x981))))) (x657 (x167 (+ x981 160)))))
(assert (= x472 (=> (and (= 9518847204935358166548570266051330015907116135037852959641967396525866745856 x449) (= false x98)) x93)))
(assert (x1053 x964))
(check-sat)
(exit)
