(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Jaroslav Bendik
Generated on: 2023-03-14
Generator: Certora Prover
Application: Formal verification of Ethereum Smart Contracts
Target solver: z3, cvc4, cvc5
Publications: https://docs.certora.com/en/latest/docs/whitepaper/index.html
This benchmarkset was produced by the Certora Prover, i.e. a tool for
formal verification of Ethereum Smart Contracts.  The benchmarks encode
verification conditions for real Smart Contracts (programs) written by
Certora customers.

The Certora Prover uses various strategies and SMT encodings of the
underlying verification problem. In most cases, we use either LIA,
NIA or BV encodings, where:

1. LIA is typically an overapproximation of the underlying verification
   problem.
2. NIA is typically a precise encoding.
3. BV is required when the input contains non-trivial bitwise operations
   that we do not model precisely with NIA (i.e., in these cases, NIA
   is an overapproximation).

Note that our specification language allows unbounded integers
(i.e. mathints); this the reason why we need NIA and LIA instead of
using just BV.

We also use various encodings of "underlying hashing functions"; the
two main encodings we use rely on i) UF and ii) on UFDT. Therefore,
given a single input (a smart contract and a specification), we typically
produce 6 different encodings: QF_UFNIA, QF_UFLIA, QF_UFBV, QF_UFDTNIA,
QF_UFDTLIA, and QF_UFDTBV. The 462 benchmarks in this benchmark set
originate from 77 unique smart contracts and specifications (77*6 =
462) and can be mapped based on the common name-prefix of the files. For
instances:

./QF_UFBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFBV.smt2
./QF_UFDTLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTLIA.smt2
./QF_UFLIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFLIA.smt2
./QF_UFDTBV/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTBV.smt2
./QF_UFDTNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFDTNIA.smt2
./QF_UFNIA/20230314-Jaroslav-Bendik-Certora/940_590f27b1c3c800d3243e_33_QF_UFNIA.smt2
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-datatypes ((x478 0)) (((x234 (x590 x478) (x571 x478) (x361 Int)) (x766 (x388 Int)) (x341 (x187 x478) (x332 Int)))))
(declare-fun x225 () Bool)
(declare-fun x314 (Int) Int)
(declare-fun x264 () Int)
(declare-fun x291 () Int)
(declare-fun x749 () Int)
(declare-fun x694 () Int)
(declare-fun x345 () Int)
(declare-fun x214 () Int)
(declare-fun x482 () Bool)
(declare-fun x462 () Int)
(declare-fun x500 () Int)
(declare-fun x352 () Bool)
(declare-fun x593 () Int)
(declare-fun x611 () Int)
(declare-fun x400 () Int)
(declare-fun x106 () Int)
(declare-fun x536 () Bool)
(declare-fun x7 () Int)
(declare-fun x780 () Bool)
(declare-fun x127 () x478)
(declare-fun x704 () Int)
(declare-fun x283 () Int)
(declare-fun x44 () Bool)
(declare-fun x439 () Int)
(declare-fun x362 () Bool)
(declare-fun x612 () Bool)
(declare-fun x389 () Bool)
(declare-fun x379 () Bool)
(declare-fun x4 () Bool)
(declare-fun x205 () Int)
(declare-fun x599 () Bool)
(declare-fun x697 () Int)
(declare-fun x77 (x478) Int)
(declare-fun x365 () x478)
(declare-fun x360 () Int)
(declare-fun x754 () Bool)
(declare-fun x191 () Bool)
(declare-fun x273 (x478) Int)
(declare-fun x131 () Int)
(declare-fun x288 () Int)
(declare-fun x732 () Bool)
(declare-fun x773 () Int)
(declare-fun x30 () Int)
(declare-fun x104 () Int)
(declare-fun x208 (Int) Int)
(declare-fun x785 () Bool)
(declare-fun x585 () Int)
(declare-fun x274 () Bool)
(declare-fun x115 () Int)
(declare-fun x372 () Bool)
(declare-fun x71 () Int)
(declare-fun x449 () Bool)
(declare-fun x677 () Int)
(declare-fun x307 () Bool)
(declare-fun x317 () Int)
(declare-fun x343 () Bool)
(declare-fun x662 () Int)
(declare-fun x100 () x478)
(declare-fun x792 () Int)
(declare-fun x399 () Int)
(declare-fun x293 () Int)
(declare-fun x144 () Int)
(declare-fun x60 () Int)
(declare-fun x125 () Int)
(declare-fun x527 () Int)
(declare-fun x97 () Bool)
(declare-fun x276 () Int)
(declare-fun x510 () Int)
(declare-fun x755 () Int)
(declare-fun x83 () Int)
(declare-fun x423 () Int)
(declare-fun x427 () Int)
(declare-fun x681 () Int)
(declare-fun x206 () Bool)
(declare-fun x606 () Int)
(declare-fun x592 () Bool)
(declare-fun x396 () Bool)
(declare-fun x356 () Bool)
(declare-fun x327 () Int)
(declare-fun x18 () Int)
(declare-fun x49 () Bool)
(declare-fun x311 () Bool)
(declare-fun x109 () Bool)
(declare-fun x679 () Bool)
(declare-fun x506 (Int Int) Int)
(declare-fun x261 () Bool)
(declare-fun x580 () Bool)
(declare-fun x651 () Int)
(declare-fun x210 () Bool)
(declare-fun x55 () Int)
(declare-fun x591 () Int)
(declare-fun x95 (Int) Int)
(declare-fun x668 () Bool)
(declare-fun x416 () Int)
(declare-fun x498 () Int)
(declare-fun x118 () Int)
(declare-fun x213 (Int) Int)
(declare-fun x748 () Bool)
(declare-fun x547 () Bool)
(declare-fun x768 () Int)
(declare-fun x395 (Int) Int)
(declare-fun x391 () x478)
(declare-fun x35 () Int)
(declare-fun x716 () Bool)
(declare-fun x717 () Int)
(declare-fun x227 () Int)
(declare-fun x421 (x478) Int)
(declare-fun x568 () Bool)
(declare-fun x194 () Int)
(declare-fun x624 () Bool)
(declare-fun x689 () Bool)
(declare-fun x619 () Int)
(declare-fun x511 () Int)
(declare-fun x57 () x478)
(declare-fun x331 () Int)
(declare-fun x116 () Int)
(declare-fun x190 () Bool)
(declare-fun x673 () Int)
(declare-fun x357 () Bool)
(declare-fun x387 () Bool)
(declare-fun x86 () Int)
(declare-fun x380 () Int)
(declare-fun x497 () Int)
(declare-fun x686 () Bool)
(declare-fun x385 () Bool)
(declare-fun x218 (x478) Int)
(declare-fun x787 () Bool)
(declare-fun x120 () Bool)
(declare-fun x731 () Int)
(declare-fun x556 () Int)
(declare-fun x479 () Int)
(declare-fun x143 () Bool)
(declare-fun x582 () Int)
(declare-fun x415 () Int)
(declare-fun x575 () Bool)
(declare-fun x371 () x478)
(declare-fun x464 () Bool)
(declare-fun x724 () Bool)
(declare-fun x790 () Int)
(declare-fun x51 () Int)
(declare-fun x517 () Int)
(declare-fun x562 () Bool)
(declare-fun x605 () Bool)
(declare-fun x539 () Int)
(declare-fun x136 () Bool)
(declare-fun x262 () Int)
(declare-fun x149 () Int)
(declare-fun x197 () Int)
(declare-fun x455 () Int)
(declare-fun x664 () Int)
(declare-fun x746 () Int)
(declare-fun x629 () Int)
(declare-fun x492 () Int)
(declare-fun x614 () Int)
(declare-fun x296 (x478) Int)
(declare-fun x491 () Bool)
(declare-fun x383 () Int)
(declare-fun x608 () Int)
(declare-fun x122 (x478) Int)
(declare-fun x236 () Bool)
(declare-fun x165 () Bool)
(declare-fun x472 () Bool)
(declare-fun x756 () Int)
(declare-fun x458 () Int)
(declare-fun x569 () Int)
(declare-fun x425 () Int)
(declare-fun x451 () Int)
(declare-fun x486 (Int) Int)
(declare-fun x12 () Int)
(declare-fun x595 () Int)
(declare-fun x28 () Bool)
(declare-fun x765 () Bool)
(declare-fun x17 () Int)
(declare-fun x11 () Bool)
(declare-fun x275 () Bool)
(declare-fun x791 () Int)
(declare-fun x78 () x478)
(declare-fun x452 () Int)
(declare-fun x268 () Int)
(declare-fun x312 () Int)
(declare-fun x230 () Int)
(declare-fun x27 () Bool)
(declare-fun x625 () Bool)
(declare-fun x445 () Int)
(declare-fun x124 (Int) Int)
(declare-fun x180 () Bool)
(declare-fun x702 () Int)
(declare-fun x601 () Int)
(declare-fun x271 () Bool)
(declare-fun x130 () Int)
(declare-fun x52 (Int Int) Int)
(declare-fun x381 () Int)
(declare-fun x255 () Int)
(declare-fun x516 () Int)
(declare-fun x772 () Int)
(declare-fun x403 () Int)
(declare-fun x6 () Bool)
(declare-fun x448 () Int)
(declare-fun x545 () Int)
(declare-fun x410 () x478)
(declare-fun x24 () Bool)
(declare-fun x579 () x478)
(declare-fun x342 () Int)
(declare-fun x192 () Bool)
(declare-fun x287 () Int)
(declare-fun x313 () Int)
(declare-fun x250 () Int)
(declare-fun x302 () Bool)
(declare-fun x368 () Bool)
(declare-fun x25 () Int)
(declare-fun x148 () Int)
(declare-fun x626 () Int)
(declare-fun x759 () Int)
(declare-fun x99 () Int)
(declare-fun x54 () Int)
(declare-fun x90 () Int)
(declare-fun x457 () Bool)
(declare-fun x88 () Int)
(declare-fun x140 () x478)
(declare-fun x215 () Int)
(declare-fun x5 () Int)
(declare-fun x166 () Int)
(declare-fun x659 () Int)
(declare-fun x153 () Int)
(declare-fun x369 () Bool)
(declare-fun x778 () Int)
(declare-fun x552 () Int)
(declare-fun x750 () Int)
(declare-fun x475 () Int)
(declare-fun x513 () Int)
(declare-fun x690 () Int)
(declare-fun x46 () Bool)
(declare-fun x515 () Bool)
(declare-fun x363 () Int)
(declare-fun x563 () Int)
(declare-fun x295 () Bool)
(declare-fun x267 () Int)
(declare-fun x712 () Int)
(declare-fun x265 () Int)
(declare-fun x292 () Bool)
(declare-fun x146 () Int)
(declare-fun x258 () Bool)
(declare-fun x616 () Bool)
(declare-fun x285 () Int)
(declare-fun x113 () Int)
(declare-fun x607 () Int)
(declare-fun x436 () Int)
(declare-fun x150 () Int)
(declare-fun x493 () Int)
(declare-fun x726 () Int)
(declare-fun x630 () Bool)
(declare-fun x92 () Int)
(declare-fun x330 () Bool)
(declare-fun x103 () Bool)
(declare-fun x319 () Bool)
(declare-fun x727 () x478)
(declare-fun x286 () Int)
(declare-fun x597 () Int)
(declare-fun x269 () Int)
(declare-fun x701 () Int)
(declare-fun x382 () Int)
(declare-fun x358 () Int)
(declare-fun x377 () Bool)
(declare-fun x764 () Int)
(declare-fun x278 () Int)
(declare-fun x557 () x478)
(declare-fun x47 () Int)
(declare-fun x615 () Bool)
(declare-fun x610 () Int)
(declare-fun x621 () Bool)
(declare-fun x548 () Int)
(declare-fun x499 () Bool)
(declare-fun x711 () Int)
(declare-fun x316 () Int)
(declare-fun x61 () Int)
(declare-fun x256 () Int)
(declare-fun x338 () Bool)
(declare-fun x774 () Int)
(declare-fun x560 () Bool)
(declare-fun x706 (Int) Int)
(declare-fun x48 () Int)
(declare-fun x553 () Int)
(declare-fun x468 () Bool)
(declare-fun x141 () Int)
(declare-fun x232 () Bool)
(declare-fun x168 () Int)
(declare-fun x696 () Int)
(declare-fun x200 () Int)
(declare-fun x670 () Int)
(declare-fun x502 () Int)
(declare-fun x658 () Int)
(declare-fun x162 () Int)
(declare-fun x290 () Int)
(declare-fun x758 () Bool)
(declare-fun x434 () Int)
(declare-fun x525 () Int)
(declare-fun x350 () Int)
(declare-fun x544 () Int)
(declare-fun x594 () Int)
(declare-fun x430 () Bool)
(declare-fun x435 () x478)
(declare-fun x315 () Int)
(declare-fun x159 () Int)
(declare-fun x405 () Bool)
(declare-fun x408 () Bool)
(declare-fun x107 () Int)
(declare-fun x404 () Bool)
(declare-fun x789 () Bool)
(declare-fun x692 () Int)
(declare-fun x583 () Int)
(declare-fun x87 () Int)
(declare-fun x224 () Bool)
(declare-fun x211 () Int)
(declare-fun x241 () Bool)
(declare-fun x53 () Int)
(declare-fun x469 () x478)
(declare-fun x101 () Int)
(declare-fun x390 () Int)
(declare-fun x199 () Int)
(declare-fun x349 () Bool)
(declare-fun x245 () Bool)
(declare-fun x604 () Int)
(declare-fun x714 () Int)
(declare-fun x220 () Int)
(declare-fun x695 () Bool)
(declare-fun x137 () Int)
(declare-fun x481 () Int)
(declare-fun x441 () x478)
(declare-fun x551 () Bool)
(declare-fun x412 (Int) Int)
(declare-fun x198 () Int)
(declare-fun x392 () Bool)
(declare-fun x710 (Int Int) Int)
(declare-fun x546 () Bool)
(declare-fun x135 () Int)
(declare-fun x617 () Int)
(declare-fun x424 () Int)
(declare-fun x237 () Int)
(declare-fun x376 () Int)
(declare-fun x680 () Bool)
(declare-fun x578 () Bool)
(declare-fun x277 () Int)
(declare-fun x432 () Int)
(declare-fun x38 () Bool)
(declare-fun x524 () Int)
(declare-fun x526 () Int)
(declare-fun x418 () Int)
(declare-fun x465 () Int)
(declare-fun x195 () Bool)
(declare-fun x157 () Int)
(declare-fun x37 () Bool)
(declare-fun x528 () Int)
(declare-fun x519 () x478)
(declare-fun x745 () Int)
(declare-fun x247 () Int)
(declare-fun x728 () Int)
(declare-fun x484 () Bool)
(declare-fun x244 () Int)
(declare-fun x9 () Bool)
(declare-fun x306 () Bool)
(declare-fun x419 () Int)
(declare-fun x72 () Int)
(declare-fun x174 () Int)
(declare-fun x123 () Int)
(declare-fun x674 () Bool)
(declare-fun x158 () Int)
(declare-fun x433 () Int)
(declare-fun x705 () Int)
(declare-fun x2 () Int)
(declare-fun x202 () Bool)
(declare-fun x776 () Int)
(declare-fun x589 () Bool)
(declare-fun x634 () Bool)
(declare-fun x733 () Int)
(declare-fun x39 () Bool)
(declare-fun x310 () Int)
(declare-fun x721 () Int)
(declare-fun x29 () Int)
(declare-fun x8 () x478)
(declare-fun x488 () Bool)
(declare-fun x58 () Int)
(declare-fun x279 () Int)
(declare-fun x620 () Int)
(declare-fun x282 () Int)
(declare-fun x354 () Int)
(declare-fun x204 () Int)
(declare-fun x226 () Bool)
(declare-fun x574 () Bool)
(declare-fun x309 () Int)
(declare-fun x518 () Bool)
(declare-fun x535 () Int)
(declare-fun x473 () Int)
(declare-fun x736 () Int)
(declare-fun x442 () Int)
(declare-fun x182 () Bool)
(declare-fun x742 () Int)
(declare-fun x413 (Int) Int)
(declare-fun x74 () Bool)
(declare-fun x401 () Int)
(declare-fun x96 () Int)
(declare-fun x628 () Int)
(declare-fun x326 () Int)
(declare-fun x438 () Bool)
(declare-fun x691 () Bool)
(declare-fun x720 () Bool)
(declare-fun x753 () Bool)
(declare-fun x243 () Int)
(declare-fun x555 () Bool)
(declare-fun x729 () Int)
(declare-fun x461 () Bool)
(declare-fun x414 () Bool)
(declare-fun x783 () Int)
(declare-fun x94 () Int)
(declare-fun x252 () Bool)
(declare-fun x685 () Bool)
(declare-fun x397 () Bool)
(declare-fun x529 () Int)
(declare-fun x781 () Int)
(declare-fun x744 () Int)
(declare-fun x739 () x478)
(declare-fun x68 () Int)
(declare-fun x203 () Int)
(declare-fun x698 () Int)
(declare-fun x323 () Bool)
(declare-fun x1 (Int Int) Int)
(declare-fun x613 () Int)
(declare-fun x63 () Bool)
(declare-fun x246 () Bool)
(declare-fun x770 () Int)
(declare-fun x84 () Int)
(declare-fun x235 () Int)
(declare-fun x431 () Bool)
(declare-fun x240 () Bool)
(declare-fun x684 () Int)
(declare-fun x23 () Int)
(declare-fun x19 () Int)
(declare-fun x760 () Int)
(declare-fun x179 () Int)
(declare-fun x643 () Bool)
(declare-fun x683 () Int)
(declare-fun x675 () Bool)
(declare-fun x649 (x478) Int)
(declare-fun x687 (Int Int) Int)
(declare-fun x508 () Int)
(declare-fun x740 () Int)
(declare-fun x335 () Int)
(declare-fun x550 () Int)
(declare-fun x378 () Int)
(declare-fun x325 () Int)
(declare-fun x600 (Int) Int)
(declare-fun x111 () Bool)
(declare-fun x460 () Int)
(declare-fun x688 () x478)
(declare-fun x175 () Int)
(declare-fun x429 () Int)
(declare-fun x476 () Int)
(declare-fun x784 (Int) Int)
(declare-fun x467 () Int)
(declare-fun x786 () Bool)
(declare-fun x336 () Bool)
(declare-fun x169 () Int)
(declare-fun x209 () Int)
(declare-fun x193 () Int)
(declare-fun x521 () Int)
(declare-fun x763 () Int)
(declare-fun x297 () Int)
(declare-fun x667 () Bool)
(declare-fun x266 () Int)
(declare-fun x751 () Int)
(declare-fun x108 () Int)
(declare-fun x3 () Int)
(declare-fun x775 () Bool)
(declare-fun x496 () Int)
(declare-fun x366 () Bool)
(declare-fun x713 () Int)
(declare-fun x561 () Bool)
(declare-fun x623 () Int)
(declare-fun x126 () x478)
(declare-fun x112 () Bool)
(declare-fun x440 () x478)
(declare-fun x587 () Int)
(declare-fun x682 () Int)
(declare-fun x359 () Bool)
(declare-fun x761 () Int)
(declare-fun x669 () Int)
(declare-fun x641 () Int)
(declare-fun x715 () Int)
(declare-fun x151 () Int)
(declare-fun x618 () Int)
(declare-fun x163 () Int)
(declare-fun x466 () Int)
(declare-fun x661 (x478) Int)
(declare-fun x767 () Int)
(declare-fun x181 () Int)
(declare-fun x734 () Int)
(declare-fun x693 () Bool)
(declare-fun x223 () Int)
(declare-fun x73 () Bool)
(declare-fun x353 () Int)
(declare-fun x531 () Bool)
(declare-fun x537 (Int) Int)
(declare-fun x212 () Int)
(declare-fun x654 () Bool)
(declare-fun x437 () Int)
(declare-fun x588 () Int)
(declare-fun x161 () Int)
(declare-fun x254 () Int)
(declare-fun x45 () Bool)
(declare-fun x21 () Bool)
(declare-fun x374 (x478) Int)
(declare-fun x443 () Bool)
(declare-fun x80 () Int)
(declare-fun x650 () Int)
(declare-fun x320 () Int)
(declare-fun x512 () Int)
(declare-fun x346 () Int)
(declare-fun x564 () Bool)
(declare-fun x459 () Int)
(declare-fun x339 () Int)
(declare-fun x64 () Int)
(declare-fun x660 () Bool)
(declare-fun x22 () Int)
(declare-fun x446 () Int)
(declare-fun x559 () Bool)
(declare-fun x520 () Int)
(declare-fun x188 () Bool)
(declare-fun x50 () Int)
(declare-fun x260 () Bool)
(declare-fun x554 () Bool)
(declare-fun x709 () Int)
(declare-fun x470 () Int)
(declare-fun x782 () Int)
(declare-fun x581 () Int)
(declare-fun x474 () Bool)
(declare-fun x373 () Int)
(declare-fun x300 () Bool)
(declare-fun x337 () Int)
(declare-fun x304 () Int)
(declare-fun x631 (Int) x478)
(declare-fun x102 () Bool)
(declare-fun x648 () Bool)
(declare-fun x522 () x478)
(declare-fun x89 () Bool)
(declare-fun x185 (x478) Int)
(declare-fun x644 () Int)
(declare-fun x56 () Int)
(declare-fun x422 () x478)
(declare-fun x216 () Int)
(declare-fun x134 () Int)
(declare-fun x155 () Int)
(declare-fun x444 () Int)
(declare-fun x239 () Bool)
(declare-fun x171 () Int)
(declare-fun x13 () Bool)
(declare-fun x747 () Int)
(declare-fun x417 () Int)
(declare-fun x622 () Int)
(declare-fun x456 () Bool)
(declare-fun x572 () Int)
(declare-fun x538 () Bool)
(declare-fun x463 () Bool)
(declare-fun x20 () Int)
(declare-fun x26 () Int)
(declare-fun x633 () Bool)
(declare-fun x298 () Int)
(declare-fun x566 () Bool)
(declare-fun x196 () Int)
(declare-fun x703 () Bool)
(declare-fun x642 () Int)
(declare-fun x177 () Bool)
(declare-fun x289 (Int Int) Int)
(declare-fun x523 () Int)
(declare-fun x632 () Int)
(declare-fun x303 () Int)
(declare-fun x251 () Int)
(declare-fun x541 () Int)
(declare-fun x152 () Int)
(declare-fun x119 (x478) Int)
(declare-fun x217 () Int)
(declare-fun x402 () Int)
(declare-fun x170 () Int)
(declare-fun x121 () Int)
(declare-fun x81 () Int)
(declare-fun x567 () Int)
(declare-fun x386 () Int)
(declare-fun x305 () Int)
(declare-fun x270 () Int)
(declare-fun x672 () Bool)
(declare-fun x653 () Int)
(declare-fun x129 () Bool)
(declare-fun x411 () Bool)
(declare-fun x16 () Int)
(declare-fun x294 () Int)
(declare-fun x248 () Int)
(declare-fun x333 () Int)
(declare-fun x638 () Int)
(declare-fun x110 () Bool)
(declare-fun x471 (Int Int) Int)
(declare-fun x32 () Int)
(declare-fun x699 () Int)
(declare-fun x596 () Int)
(declare-fun x454 () Bool)
(declare-fun x344 (Int Int) Int)
(declare-fun x678 () Bool)
(declare-fun x178 () Int)
(declare-fun x489 () Int)
(declare-fun x138 () Bool)
(declare-fun x609 () x478)
(declare-fun x453 () Bool)
(declare-fun x640 () Bool)
(declare-fun x36 () Int)
(declare-fun x238 () Int)
(declare-fun x577 () Int)
(declare-fun x532 () Int)
(declare-fun x777 () Int)
(declare-fun x186 () Int)
(declare-fun x75 () x478)
(declare-fun x272 () Int)
(declare-fun x257 () Int)
(declare-fun x370 () Int)
(declare-fun x663 () Bool)
(declare-fun x645 () Int)
(declare-fun x635 () Int)
(declare-fun x769 () Bool)
(declare-fun x565 () Bool)
(declare-fun x487 () Bool)
(declare-fun x249 () Int)
(declare-fun x586 () Bool)
(declare-fun x507 () x478)
(declare-fun x328 () Bool)
(declare-fun x428 () Int)
(declare-fun x477 () Bool)
(declare-fun x33 () Int)
(declare-fun x676 () Bool)
(declare-fun x117 () Bool)
(declare-fun x183 () Bool)
(declare-fun x347 () Bool)
(declare-fun x351 () Int)
(declare-fun x15 () x478)
(declare-fun x671 () Bool)
(declare-fun x700 () Int)
(declare-fun x576 () Bool)
(declare-fun x14 () Int)
(declare-fun x79 () Bool)
(declare-fun x59 () Int)
(declare-fun x173 () Int)
(declare-fun x228 () Bool)
(declare-fun x164 () Bool)
(declare-fun x505 () x478)
(declare-fun x281 () Bool)
(declare-fun x757 () Int)
(declare-fun x719 () Int)
(define-fun x549 ((x478 x478) (x318 Int)) x478 (ite ((_ is x341) x478) (x341 (x187 x478) (+ x318 (x332 x478))) (ite ((_ is x234) x478) (x234 (x590 x478) (x571 x478) (+ x318 (x361 x478))) (x766 (+ x318 (x388 x478))))))
(define-fun x221 ((x420 Int)) Int (ite (and (<= 0 x420) (< x420 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x420 (- x420 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x480 ((x420 Int)) Int (ite (and (>= x420 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x420 0)) (+ x420 115792089237316195423570985008687907853269984665640564039457584007913129639936) x420))
(define-fun x384 ((x420 Int)) Int (ite (and (>= x420 0) (< x420 115792089237316195423570985008687907853269984665640564039457584007913129639936)) x420 (ite (and (>= x420 115792089237316195423570985008687907853269984665640564039457584007913129639936) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x420)) (- x420 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (> 0 x420) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936) x420)) (+ x420 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x344 x420 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x176 ((x145 Int)) Bool (and (>= x145 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x145)))
(define-fun x598 ((x145 Int) (x707 Int)) Bool (=> (and (> x707 0) (< 0 x145)) (= (< (x289 x145 x707) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x52 (x384 (x289 x145 x707)) x145) x707))))
(define-fun x665 ((x145 Int) (x707 Int)) Bool (=> (and (not (= 0 x707)) (not (= 0 x145))) (and (= (x52 (x289 x145 x707) x145) x707) (= (x52 (x289 x145 x707) x707) x145))))
(define-fun x542 ((x145 Int) (x707 Int)) Bool (=> (and (< 0 x707) (> x145 0)) (= (> x707 (x52 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x289 x145 x707)))))
(define-fun x229 ((x145 Int) (x707 Int)) Bool (and (= (x384 (x289 x145 x707)) (x384 (x289 (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x384 (x289 x145 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x384 (x289 x145 x707))) (= (x384 (x289 (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) x707)) (x384 (x289 x145 x707)))))
(define-fun x301 ((x145 Int) (x707 Int)) Bool (and (=> (and (and (> x707 0) (<= x707 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x145 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x145 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x289 (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) x707)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x145) (x52 57896044618658097711785492504343953926634992332820282019728792003956564819968 x707)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x707) (> x707 0)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x145) (< 0 x145))) (= (<= (x289 x145 x707) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x52 57896044618658097711785492504343953926634992332820282019728792003956564819967 x707) x145))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x707) (> x707 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x145) (<= x145 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x52 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x707)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x145)) (<= (x289 (- x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x145) (> x145 0)) (and (> x707 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x707 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= (x52 57896044618658097711785492504343953926634992332820282019728792003956564819968 x145) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x707)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x289 x145 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(define-fun x105 ((x145 Int)) Bool (and (= 0 (x289 x145 0)) (= 0 (x289 0 x145))))
(define-fun x367 ((x145 Int)) Bool (and (= x145 (x289 1 x145)) (= (x289 x145 1) x145)))
(define-fun x656 ((x145 Int)) Bool (and (x367 x145) (x105 x145)))
(define-fun x447 ((x145 Int) (x707 Int)) Bool (=> (and (< 0 x707) (< 0 x145)) (and (<= 0 (x52 x145 x707)) (>= x145 (x52 x145 x707)))))
(define-fun x540 ((x145 Int) (x707 Int)) Bool (=> (and (and (< x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x145 0)) (and (<= 1 x707) (< x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (< (x52 x145 x707) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x52 x145 x707)))))
(define-fun x348 ((x145 Int) (x707 Int)) Bool (=> (and (< 1 x707) (> x145 x707)) (> x145 (x52 x145 x707))))
(define-fun x501 ((x145 Int) (x707 Int)) Bool (=> (and (> x145 0) (< 0 x707)) (= (> x707 x145) (= 0 (x52 x145 x707)))))
(define-fun x67 ((x145 Int)) Bool (= 0 (x52 0 x145)))
(define-fun x503 ((x145 Int)) Bool (= x145 (x52 x145 1)))
(define-fun x156 ((x145 Int)) Bool (=> (not (= 0 x145)) (= (x52 x145 x145) 1)))
(define-fun x738 ((x145 Int)) Bool (and (x503 x145) (x67 x145) (x156 x145)))
(define-fun x627 ((x145 Int)) Bool (and (= x145 (x710 x145 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x710 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145) x145)))
(define-fun x543 ((x145 Int)) Bool (and (= (x710 x145 0) 0) (= 0 (x710 0 x145))))
(define-fun x718 ((x145 Int)) Bool (= (x710 x145 x145) x145))
(define-fun x657 ((x145 Int)) Bool (and (x543 x145) (x627 x145) (x718 x145)))
(define-fun x762 ((x145 Int) (x707 Int)) Bool (= (x710 x145 x707) (x710 x707 x145)))
(define-fun x584 ((x145 Int) (x707 Int)) Bool (and (=> (>= x707 0) (<= (x710 x145 x707) x707)) (=> (>= x145 0) (<= (x710 x145 x707) x145)) (>= (x710 x145 x707) 0)))
(define-fun x42 ((x145 Int) (x707 Int)) Bool (and (x762 x145 x707) (x584 x145 x707)))
(define-fun x322 ((x145 Int)) Bool (= (x344 x145 1461501637330902918203684832716283019655932542976) (x710 x145 1461501637330902918203684832716283019655932542975)))
(define-fun x450 ((x145 Int)) Bool (and (x322 x145) (x42 x145 1461501637330902918203684832716283019655932542975)))
(define-fun x207 ((x145 Int) (x707 Int)) Bool (and (> x707 (x344 x145 x707)) (>= (x344 x145 x707) 0)))
(define-fun x514 ((x145 Int) (x707 Int)) Bool (=> (and (>= x145 0) (< 0 x707)) (= (< x145 x707) (= x145 (x344 x145 x707)))))
(define-fun x485 ((x145 Int) (x707 Int)) Bool (=> (and (< 0 x707) (and (< x145 (+ x707 x707)) (<= x707 x145))) (= (- x145 x707) (x344 x145 x707))))
(define-fun x233 ((x145 Int)) Bool (= 0 (x344 0 x145)))
(define-fun x490 ((x145 Int)) Bool (= (x344 x145 1) 0))
(define-fun x329 ((x145 Int)) Bool (= (x344 x145 x145) 0))
(define-fun x242 ((x145 Int)) Bool (and (x490 x145) (x233 x145) (x329 x145)))
(define-fun x69 ((x145 Int)) Bool (= (x710 x145 1) (x344 x145 2)))
(define-fun x259 ((x145 Int)) Bool (and (x42 x145 1) (x69 x145)))
(define-fun x394 ((x145 Int)) Bool (= (x344 x145 32) (x710 x145 31)))
(define-fun x231 ((x145 Int)) Bool (and (x394 x145) (x42 x145 31)))
(define-fun x375 ((x145 Int)) Bool (and (= (x687 x145 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x687 115792089237316195423570985008687907853269984665640564039457584007913129639935 x145))))
(define-fun x602 ((x145 Int)) Bool (and (= x145 (x687 0 x145)) (= x145 (x687 x145 0))))
(define-fun x570 ((x145 Int)) Bool (= x145 (x687 x145 x145)))
(define-fun x494 ((x145 Int)) Bool (and (x602 x145) (x375 x145) (x570 x145)))
(define-fun x666 ((x145 Int) (x707 Int)) Bool (= (x687 x145 x707) (x687 x707 x145)))
(define-fun x128 ((x145 Int) (x707 Int)) Bool (and (=> (<= 0 x707) (<= x707 (x687 x145 x707))) (=> (>= x145 0) (>= (x687 x145 x707) x145)) (>= (+ x707 x145) (x687 x145 x707))))
(define-fun x355 ((x145 Int) (x707 Int)) Bool (and (x666 x145 x707) (x128 x145 x707)))
(define-fun x788 ((x145 Int)) Bool (= (+ (x344 x145 32) (x710 x145 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (x384 x145)))
(define-fun x708 ((x145 Int)) Bool (and (x42 x145 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x788 x145)))
(define-fun x280 ((x145 Int) (x707 Int)) Bool (= (x289 x145 x707) (x289 x707 x145)))
(define-fun x725 ((x145 Int) (x707 Int)) Bool (and (=> (and (> 0 x145) (< 0 x707)) (< (x289 x145 x707) 0)) (=> (and (> 0 x707) (< x145 0)) (> (x289 x145 x707) 0)) (=> (and (< 0 x145) (< x707 0)) (> 0 (x289 x145 x707))) (=> (and (< 0 x707) (> x145 0)) (> (x289 x145 x707) 0))))
(define-fun x722 ((x145 Int) (x707 Int)) Bool (and (x542 x145 x707) (x301 x145 x707) (x665 x145 x707) (x725 x145 x707) (x598 x145 x707) (x229 x145 x707) (x280 x145 x707)))
(define-fun x41 ((x145 Int)) Bool (= (x710 x145 255) (x344 x145 256)))
(define-fun x167 ((x145 Int)) Bool (and (x41 x145) (x42 x145 255)))
(define-fun x114 ((x62 Int)) Int (x95 x62))
(define-fun x91 ((x62 Int)) Int (ite (= 128 x62) x193 (x600 x62)))
(define-fun x132 ((x62 Int)) Int (ite (= x62 160) x791 (x124 x62)))
(define-fun x133 ((x62 Int)) Int (ite (= 160 x62) x632 (x124 x62)))
(define-fun x139 ((x62 Int)) Int (ite (= x62 192) x178 (x132 x62)))
(define-fun x409 ((x62 Int)) Int (ite x397 (x124 x62) (ite x576 (ite x625 (x132 x62) (x139 x62)) (x133 x62))))
(define-fun x530 ((x62 Int)) Int (ite (= x768 x62) x80 (x409 x62)))
(define-fun x299 ((x62 Int)) Int (ite (= x62 x444) x466 (x530 x62)))
(define-fun x219 ((x62 Int)) Int (ite (= x264 x62) x705 (x299 x62)))
(define-fun x321 ((x62 Int)) Int (ite (= x254 x62) x541 (x219 x62)))
(define-fun x222 ((x62 Int)) Int (ite x612 (x219 x62) (ite x561 (x299 x62) (ite x352 (x530 x62) (ite x307 (x409 x62) (x321 x62))))))
(define-fun x655 ((x62 Int)) Int (ite (= x291 x62) x742 (x222 x62)))
(define-fun x504 ((x62 Int)) Int (ite (= x383 x62) x613 (x655 x62)))
(define-fun x426 ((x62 Int)) Int (ite (= x62 x701) x200 (x504 x62)))
(define-fun x741 ((x62 Int)) Int (ite (= x62 x35) x269 (x426 x62)))
(define-fun x534 ((x62 Int)) Int (ite (= x3 x62) x751 (x741 x62)))
(define-fun x43 ((x62 Int)) Int (ite x789 (x741 x62) (ite x438 (x426 x62) (ite x616 (x504 x62) (ite x13 (x655 x62) (x534 x62))))))
(define-fun x398 ((x62 Int)) Int (ite (= x62 x677) x774 (x43 x62)))
(define-fun x154 ((x62 Int)) Int (ite (= x135 x62) x572 (x409 x62)))
(define-fun x201 ((x62 Int)) Int (ite (= x62 x339) x155 (x154 x62)))
(define-fun x637 ((x62 Int)) Int (ite (= x623 x62) x171 (x201 x62)))
(define-fun x70 ((x62 Int)) Int (ite (= x62 x286) x255 (x637 x62)))
(define-fun x147 ((x62 Int)) Int (ite x679 (x637 x62) (ite x206 (x201 x62) (ite x574 (x154 x62) (ite x274 (x409 x62) (x70 x62))))))
(define-fun x142 ((x62 Int)) Int (ite (= x62 x17) x516 (x147 x62)))
(define-fun x284 ((x62 Int)) Int (ite (= x350 x62) x244 (x142 x62)))
(define-fun x82 ((x62 Int)) Int (ite (= x293 x62) x51 (x284 x62)))
(define-fun x723 ((x62 Int)) Int (ite (= x62 x662) x608 (x82 x62)))
(define-fun x65 ((x62 Int)) Int (ite (= x333 x62) x702 (x723 x62)))
(define-fun x743 ((x62 Int)) Int (ite x720 (x723 x62) (ite x621 (x82 x62) (ite x323 (x284 x62) (ite x202 (x142 x62) (x65 x62))))))
(define-fun x364 ((x62 Int)) Int (ite (= x62 x287) x262 (x743 x62)))
(define-fun x184 ((x62 Int)) Int (ite x11 (x398 x62) (ite x63 (x364 x62) (x409 x62))))
(define-fun x34 ((x62 Int)) Int (ite (= x161 x62) x376 (x208 x62)))
(define-fun x263 ((x62 Int)) Int (ite (= x62 x776) x756 (x34 x62)))
(define-fun x31 ((x62 Int)) Int (ite (= x320 x62) x658 (x263 x62)))
(define-fun x495 ((x62 Int)) Int (ite (= x62 x416) x552 (x31 x62)))
(define-fun x253 ((x62 Int)) Int (ite (= x153 x62) x157 (x495 x62)))
(define-fun x558 ((x62 Int)) Int (ite (= x62 x778) x713 (x253 x62)))
(define-fun x40 ((x62 Int)) Int (ite x330 (x253 x62) (x558 x62)))
(define-fun x76 ((x62 Int)) Int (ite (= x617 x62) x386 (x40 x62)))
(define-fun x308 ((x62 Int)) Int (ite (= x62 x265) x315 (x784 x62)))
(define-fun x533 ((x62 Int)) Int (ite (= x428 x62) x683 (x308 x62)))
(define-fun x85 ((x62 Int)) Int (ite (= x265 x62) x81 (x784 x62)))
(define-fun x509 ((x62 Int)) Int (ite x385 (x784 x62) (ite x487 (ite x765 (x308 x62) (x533 x62)) (x85 x62))))
(define-fun x771 ((x62 Int)) Int (ite (= x337 x62) x106 (x395 x62)))
(define-fun x652 ((x62 Int)) Int (ite (= x62 x425) 1 (x412 x62)))
(define-fun x483 ((x62 Int)) Int (ite (= x62 x197) 21711016731996786641919559689128982722488122124807605757398297001483711807488 (x413 x62)))
(define-fun x730 ((x62 Int)) Int (ite (= x62 x268) x174 (x91 x62)))
(define-fun x334 ((x62 Int)) Int (ite (= x62 x425) x325 (x91 x62)))
(define-fun x66 ((x62 Int)) Int (ite x11 (x730 x62) (ite x63 (x334 x62) (x91 x62))))
(define-fun x172 ((x62 Int)) Int (ite (= x425 x62) x194 (x412 x62)))
(define-fun x603 ((x62 Int)) Int (ite x38 (x172 x62) (x652 x62)))
(define-fun x639 ((x62 Int)) Int (ite (and (< x62 (+ x194 x681)) (>= x62 x681)) (x95 (+ (- x62 x681) x353)) (x413 x62)))
(define-fun x340 ((x62 Int)) Int (ite x463 (x413 x62) (x639 x62)))
(define-fun x393 ((x62 Int)) Int (ite (= x62 (x384 (- x749 (x344 x749 32)))) (x687 (x710 (x340 (x384 (- x749 (x344 x749 32)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x471 255 (x384 (* 8 (x384 (- 31 (x344 x749 32)))))))) (x471 (x710 x749 255) (x384 (* 8 (x384 (- 31 (x344 x749 32))))))) (x340 x62)))
(define-fun x10 ((x62 Int)) Int (ite x38 (ite x477 (x340 x62) (x393 x62)) (x483 x62)))
(define-fun x324 ((x62 Int)) Int (ite x538 (x40 x62) (x76 x62)))
(define-fun x646 ((x145 Int) (x707 Int) (x636 Int) (x647 Int)) Bool (=> (and (<= 0 x707) (>= x145 0) (<= x707 x647) (>= x636 x145)) (>= (x289 x636 x647) (x289 x145 x707))))
(define-fun x573 ((x145 Int) (x707 Int) (x636 Int) (x647 Int)) Bool (=> (= x145 x636) (= (- (x289 x145 x707) (x289 x636 x647)) (x289 x145 (- x707 x647)))))
(define-fun x93 ((x145 Int)) Bool (=> (and (not (= 1117154408 x145)) (not (= 1525444543 x145)) (not (= 18446744073709551615 x145)) (not (= x145 599290589)) (not (= 1461501637330902918203684832716283019655932542976 x145)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x145)) (not (= 1461501637330902918203684832716283019655932542975 x145)) (not (= x145 2376452955)) (not (= x145 21711016731996786641919559689128982722488122124807605757398297001483711807488)) (not (= 2514000705 x145)) (not (= x145 2720838757)) (not (= x145 1332530407)) (not (= x145 1666326814)) (not (= x145 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (> x145 10000) (not (= x145 2962947777)) (not (= x145 1812160747)) (not (= x145 3096268766))) (not ((_ is x766) (x631 x145)))))
(assert (x176 x611))
(assert (= 0 (x784 x230)))
(assert (x176 x51))
(assert (= x408 (=> (and (= (x52 x556 10) x312) (= (= x312 0) x668)) (and x668 (=> (= 1 x194) x515)))))
(assert (x176 x134))
(assert (x176 x88))
(assert (x176 x163))
(assert (x738 x346))
(assert (x176 x696))
(assert (and (x229 8 x158) (x542 8 x158) (x598 8 x158) (x301 8 x158) (x665 8 x158) (= (* x158 8) (x289 8 x158)) (and (= (x289 8 (- x158 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x158 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x158 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x158 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x158 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x158) (- (* 8 x158) (* x158 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x512))
(assert (= 2514000705 (x185 (x766 2514000705))))
(assert (x738 x83))
(assert (x657 x585))
(assert (= 1666326814 (x185 (x766 1666326814))))
(assert (x176 x595))
(assert (= x274 (and x295 x414)))
(assert (x657 x439))
(assert (x176 x690))
(assert (x176 x756))
(assert (= (x185 (x766 1461501637330902918203684832716283019655932542975)) 1461501637330902918203684832716283019655932542975))
(assert (= x536 (and (not x648) x190)))
(assert (x656 x582))
(assert (x176 x719))
(assert (x176 x594))
(assert (x176 x613))
(assert (x176 x619))
(assert (x93 x363))
(assert (= 0 (x208 x327)))
(assert (x176 x399))
(assert (x738 x582))
(assert (x176 x59))
(assert (= 0 (x124 x291)))
(assert (x656 x92))
(assert (= (x124 x220) 0))
(assert (= (x471 1 (* x92 8)) (x384 (ite (> 256 (* 8 x92)) (x1 2 (* 8 x92)) 0))))
(assert (x231 x381))
(assert (x176 x94))
(assert (x176 x337))
(assert (= 0 (x208 x614)))
(assert (x176 x508))
(assert (x176 x346))
(assert (x176 x777))
(assert (and (x229 32 x673) (x542 32 x673) (x598 32 x673) (x301 32 x673) (x665 32 x673) (= (* x673 32) (x289 32 x673)) (and (= (x289 32 (- x673 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x673 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x673 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x673 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x673 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x673) (- (* 32 x673) (* x673 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x657 31))
(assert (= (and x769 x225) x352))
(assert (x657 1))
(assert (x450 x29))
(assert (= x138 (=> (and (= x186 (x771 x337)) (= x768 (x221 (+ x268 32))) (= x110 (< x186 32)) (= (x221 (+ 32 x337)) x212)) (and (=> (and (and (= x626 x186) (= x291 x768) (= x211 x212)) x110) x654) (=> (and (and (= (x221 (+ 32 x212)) x288) (= (x221 (+ x768 32)) x444) (= x225 (> 32 x434)) (= x434 (x480 (- x186 32))) (= x80 (x509 x212))) (not x110)) (and (=> (and (and (= x474 (< x583 32)) (= (x221 (+ x288 32)) x36) (= (x509 x288) x466) (= x264 (x221 (+ x444 32))) (= x583 (x480 (- x434 32)))) (not x225)) (and (=> (and x474 (and (= x36 x211) (= x626 x583) (= x264 x291))) x654) (=> (and (and (= x58 (x480 (- x583 32))) (= x254 (x221 (+ x264 32))) (= x705 (x509 x36)) (= (> 32 x58) x689) (= x230 (x221 (+ x36 32)))) (not x474)) (and (=> (and x689 (and (= x626 x58) (= x230 x211) (= x291 x254))) x654) (=> (not x689) x491))))) (=> (and x225 (and (= x626 x434) (= x211 x288) (= x291 x444))) x654)))))))
(assert (x176 x692))
(assert (x176 x608))
(assert (x176 x702))
(assert (x176 x266))
(assert (x176 x99))
(assert (= (and (not x565) x716) x625))
(assert (x176 x699))
(assert (= (or x561 x449 x612 x352 x307) x599))
(assert (x176 x53))
(assert (x176 x220))
(assert (x656 x577))
(assert (x176 x373))
(assert (x656 x116))
(assert (x657 x733))
(assert (x176 x782))
(assert (x176 x230))
(assert (x176 x750))
(assert (x176 x427))
(assert (= (x766 21711016731996786641919559689128982722488122124807605757398297001483711807488) (x631 21711016731996786641919559689128982722488122124807605757398297001483711807488)))
(assert (x176 x268))
(assert (= (x766 1525444543) (x631 1525444543)))
(assert (x176 x607))
(assert (x176 x510))
(assert (x738 2))
(assert (x176 x439))
(assert (x176 x118))
(assert (x242 x761))
(assert (x242 x335))
(assert (x176 x610))
(assert (and (= (- x582 (x710 1 x582)) (* 2 (x52 x582 2))) (x540 x582 2) (x501 x582 2) (x348 x582 2) (=> (and (> 2 0) (< 0 x582)) (and (< (- x582 2) (* (x52 x582 2) 2)) (<= (* 2 (x52 x582 2)) x582))) (x447 x582 2)))
(assert (x656 (x1 2 (* x529 8))))
(assert (x176 x243))
(assert (x656 x86))
(assert (x176 x23))
(assert (x176 x614))
(assert (x176 x104))
(assert (x657 x601))
(assert (= x477 (and x368 x120)))
(assert (= x488 (and x560 (not x300))))
(assert (x176 x255))
(assert (x176 x80))
(assert (x176 x593))
(assert (x176 x764))
(assert (x176 x20))
(assert (x494 x48))
(assert (= (and x633 x405) x397))
(assert (x176 x25))
(assert (x242 (ite (< (* 8 x92) 256) (x1 2 (* x92 8)) 0)))
(assert (x176 x545))
(assert (x242 (ite (> 256 (* 8 x577)) (x1 2 (* 8 x577)) 0)))
(assert (= (+ (x185 x519) 1) (x185 (x549 x519 1))))
(assert (x176 x445))
(assert (x259 x335))
(assert (x176 x715))
(assert (= x578 (=> (and (= (x771 x337) x107) (= (= 0 x107) x671)) (and (=> (and (and (= x164 (> x532 0)) (= (x91 128) x532)) (not x671)) (and (=> (and (not x164) (= x109 (= 0 x556))) (and (=> (and (and (= x283 x268) (= (x221 (+ x425 32)) x197) (= x425 x88) (= (x221 (+ 64 x425)) x283)) x109) x138) (=> (and (= x165 (= x556 0)) (not x109)) (and (=> (not x165) x408) (=> (and (= x194 0) x165) x515))))) (=> (and (and (= (x771 x337) x19) (= x135 (x221 (+ x425 32))) (= x414 (< x19 32)) (= (x221 (+ x337 32)) x607)) x164) (and (=> (and x414 (and (= x250 x607) (= x17 x135) (= x19 x148))) x97) (=> (and (and (= x628 (x480 (- x19 32))) (= (x509 x607) x572) (= (x221 (+ 32 x135)) x339) (= x246 (< x628 32)) (= x419 (x221 (+ 32 x607)))) (not x414)) (and (=> (and (not x246) (and (= x623 (x221 (+ 32 x339))) (= (x509 x419) x155) (= x53 (x221 (+ 32 x419))) (= x180 (< x96 32)) (= x96 (x480 (- x628 32))))) (and (=> (and (not x180) (and (= x171 (x509 x53)) (= (x221 (+ x53 32)) x7) (= x787 (< x462 32)) (= (x221 (+ 32 x623)) x286) (= (x480 (- x96 32)) x462))) (and (=> (and x787 (and (= x17 x286) (= x462 x148) (= x250 x7))) x97) (=> (not x787) x468))) (=> (and (and (= x17 x623) (= x148 x96) (= x250 x53)) x180) x97))) (=> (and x246 (and (= x419 x250) (= x628 x148) (= x17 x339))) x97))))))) (=> (and x671 (and (= x161 x425) (= x442 128))) x102)))))
(assert (x176 x223))
(assert (=> (>= 10000 x475) (= (x631 x475) (x766 x475))))
(assert (x176 x651))
(assert (and (x229 256 x458) (x542 256 x458) (x598 256 x458) (x301 256 x458) (x665 256 x458) (= (* x458 256) (x289 256 x458)) (and (= (x289 256 (- x458 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 256 (- x458 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x458 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (- x458 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x458 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x458) (- (* 256 x458) (* x458 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x432))
(assert (x738 x772))
(assert (let ((x145 (ite (< (* 8 x529) 256) (x1 2 (* 8 x529)) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x176 x22))
(assert (x176 x36))
(assert (x494 x25))
(assert (x242 x151))
(assert (= (=> (and (= x161 x223) (= (x221 (+ x20 x350)) x223) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x424) x755) (= (x384 (- (x471 1 (* 8 x529)) 1)) x424) (= x433 (x743 x790)) (= x325 (x480 (- x729 32))) (= (x743 x287) x235) (= x262 (x687 x445 x48)) (= x729 (x480 (- x223 x425))) (= (x480 (- 32 x272)) x529) (= x442 x425) (= (x710 x235 x424) x48) (= x445 (x710 x433 x755))) x102) x785))
(assert (x657 x682))
(assert (= (=> (and (and (= (= 0 x198) x754) (= (x221 (+ x381 x401)) x473) (= (x710 31 x381) x198)) (or (and (not x754) (and (= x585 (x40 x617)) (= (x710 x682 x585) x386) (= x60 (x384 (- (x471 1 (* x577 8)) 1))) (= x682 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x60)) (= x577 (x480 (- 32 x198))) (= x617 (x480 (- x473 x198))))) x754)) x275) x79))
(assert (= (=> (and (= x459 (x221 (+ 32 x3))) (= (x480 (- x33 32)) x437) (= (> 32 x437) x674) (= x523 (x221 (+ x500 32))) (= x751 (x10 x500))) (and x674 (=> (and (= x550 x437) (= x459 x677) (= x523 x220)) x695))) x454))
(assert (= (and x306 (not x667)) x693))
(assert (x176 x383))
(assert (x176 x272))
(assert (x176 x72))
(assert (x176 x353))
(assert (and (x514 x335 2) (x207 x335 2) (=> (> 2 0) (= x335 (+ (x344 x335 2) (* 2 (x52 x335 2))))) (x485 x335 2)))
(assert (x656 x673))
(assert (x176 x251))
(assert (x176 x623))
(assert (x176 x92))
(assert (x176 x381))
(assert (and (x514 x381 32) (x207 x381 32) (=> (> 32 0) (= x381 (+ (x344 x381 32) (* 32 (x52 x381 32))))) (x485 x381 32)))
(assert (= x554 (or x488 x487 x385)))
(assert (x657 x152))
(assert (= (=> (and (and (= (or (not x457) x252) x112) (= 1 x638) (< 0 x740) (= 1666326814 x669) (= x641 x390) (= x144 x432) (= (< 0 (x119 (x631 x363))) x74) (= x345 x205) (= x111 (= 0 x170)) (= (or (not x224) x379) x691) (not (< x669 599290589)) (= x59 2) (>= x56 0) (= (>= x593 x731) x566) (= x568 (= x94 x513)) (= x46 (not (= 0 x277))) (= x227 x692) (>= x513 0) (<= 0 x521) (not (= x669 1525444543)) (= (x549 x469 x415) x100) (= 2 x163) x431 (not (= 1117154408 x669)) (= x431 (or x411 (not x675))) (= (x314 x539) x670) (= false x336) (= (or (not x624) x566) x260) (>= 1461501637330902918203684832716283019655932542975 x363) (= x470 0) (= (x234 (x631 x475) (x766 3) 0) x57) (= x205 x134) (= x224 (not (= x196 0))) (not (= 1332530407 x669)) (= x690 (x706 x489)) (= (or x9 (not x111)) x551) (= 0 x150) (> x363 0) (= x564 (= x345 x690)) (= x144 x475) (= (= x745 x179) x252) (= (x314 x214) x267) (= 1 x717) x195 (= x593 x227) (= x634 (not (= x390 0))) (= (>= x496 x267) x411) (= x130 0) (= x205 x309) (= x555 (not (= 0 x290))) (= (= 0 x84) x239) (= x380 x205) (= x404 false) (= (or x28 (not x239)) x758) (= x525 x205) (= x423 (x480 (- x670 x604))) (= x277 x205) (= x522 (x549 x100 1)) (= (x314 x659) x719) (< x669 1812160747) (= x45 (< 0 x460)) x555 x691 (= 0 x492) (= (x314 x309) x460) (= x489 (x480 (- x719 x717))) (= x228 (not (= 0 x304))) (= x641 x303) (= x513 (x374 x57)) (= (not (= 0 x303)) x461) (= x205 x304) x347 (= x356 (forall ((x618 Int)) (=> (and (<= x618 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x618 0)) (forall ((x342 Int)) (=> (and (>= x342 0) (<= x342 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (or (= x342 x618) (not (and (and (and (>= x618 0) (> x227 x618)) (= (x706 x618) x641)) (and (and (>= x342 0) (> x227 x342)) (= (x706 x342) x641)))))))))) (= x685 (= x692 x249)) (= (or x302 (not x46)) x347) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x513) (= x151 (x421 x522)) (= x624 (not (= 0 x525))) (= x195 (or (not x461) x377)) (= 0 x792) (= (x314 x380) x731) (= x123 0) (= x270 x205) (>= 1461501637330902918203684832716283019655932542975 x87) (= x732 (or x564 (not x45))) (= (x314 x113) x767) (= (not (= x2 x432)) x143) x143 x74 (= x227 x496) (= x521 (x218 (x631 x363))) (= x678 false) (= 128 x664) (= x604 1) (= (x341 (x766 2) 0) x469) x228 (= x302 (forall ((x285 Int)) (=> (and (>= x285 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x285)) (forall ((x711 Int)) (=> (and (<= 0 x711) (<= x711 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (or (not (and (and (and (>= x285 0) (< x285 x227)) (= (x706 x285) x205)) (and (= x205 (x706 x711)) (and (> x227 x711) (>= x711 0))))) (= x711 x285))))))) (= x196 x205) (= x366 true) (= x64 0) (= x9 (forall ((x596 Int)) (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x596) (>= x596 0)) (not (and (= x641 (x706 x596)) (and (< x596 x227) (<= 0 x596))))))) (= x591 2) (= x377 (and x551 x112)) (= (x119 (x631 x363)) x740) (= 0 x326) x260 (not (> 1117154408 x669)) (= x467 0) (= x84 (x314 x270)) (= (x314 x168) x170) (= 0 x642) (not (= 0 x513)) (= x659 x205) (= x28 (forall ((x247 Int)) (=> (and (<= 0 x247) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x247)) (not (and (= (x706 x247) x205) (and (<= 0 x247) (> x227 x247))))))) x568 (< x582 x249) x685 (= x539 x641) (= x179 (x706 x423)) (= x94 (x314 x475)) (<= x56 1461501637330902918203684832716283019655932542975) (= x168 x641) (<= 0 x87) (= 0 x479) (= x113 x641) (>= x715 0) x786 (= x134 x2) (= x641 x214) (= x415 (x384 (* 2 x582))) (<= x715 1461501637330902918203684832716283019655932542975) (= x22 x641) (= x745 x641) (= x559 false) (= (and x758 x732) x379) (= (x480 (- x513 1)) x582) (= x144 x641) (= x104 0) (= (or x356 (not x634)) x786) (= (> x767 0) x457) (= x709 2962947777) (= x675 (not (= 0 x22))) (= x641 x290)) (and (and (= (= x151 x216) x387) (= x146 x497) (= x497 (x710 1461501637330902918203684832716283019655932542975 x151)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x151) x387 (= x216 (x486 x653)) (>= x151 0) (= x653 (x52 x582 2))) (and (and (and (= x141 (x710 1461501637330902918203684832716283019655932542975 x644)) (= x328 (= x644 x118)) (= x118 (x486 x316)) (<= 0 x644) x328 (= x316 (x52 x83 2)) (= x141 x115) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x644)) (and (= x251 x556) (= x502 (x221 (+ x193 31))) (= x14 x581) x319 (not (> 32 x72)) (= x14 0) (= x556 x699) (= x427 (x314 x32)) (= x193 (x52 x772 2)) (= x181 2962947777) (= x335 (x273 x126)) (= 2 x694) (<= 0 x310) (<= x310 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x736) (= x418 (x314 x746)) (= x310 x697) (= x562 (not (= 0 x68))) x562 (= (x221 (+ 32 x545)) x298) (= x297 x16) (= (x234 (x631 x556) (x766 8) 0) x126) (= (x374 x441) x68) (>= x294 0) (not (> 2376452955 x181)) (not (< x181 1812160747)) (= x736 x237) (= x633 (= x193 0)) (= x371 (x234 (x631 x556) (x766 15) 0)) (>= x68 0) (= x72 (x480 (- x353 4))) (not (< x353 4)) (= x629 (x710 1 x335)) (<= x294 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x181 2376452955)) (not (= x181 2514000705)) (= x251 x746) (and (> x353 35) (= (<= x353 57896044618658097711785492504343953926634992332820282019728792003956564819967) true)) (>= 1461501637330902918203684832716283019655932542975 x297) (>= 1461501637330902918203684832716283019655932542975 x760) (= x365 (x234 (x631 x556) (x766 3) 0)) (= (x384 (- (ite x281 256 0) 1)) x452) x499 (> x99 0) x39 (= (x234 (x631 x556) (x766 3) 0) x441) (= (x374 x365) x294) (= x281 (= x629 0)) (not (= x181 2720838757)) (= x331 2) (= x16 x734) (< x181 3096268766) (>= x736 0) (= x319 (not (= 0 x294))) (= (x384 (* x673 32)) x545) (<= x68 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x673 (x52 x502 32)) (<= 0 x448) (= x313 x556) (= (= x294 x418) x499) (<= x448 1461501637330902918203684832716283019655932542975) (= x99 (x119 (x631 x363))) (= x47 2) (= x115 x402) (= x251 x32) (= x448 x237) (= 2 x5) (= (= x68 x427) x39) (= x279 x556) (>= x760 0) (>= x297 0) (= (x221 (+ 128 x298)) x337) (= x772 (x710 x452 x335)))) (and (= x548 1666326814) x362 (= x721 x134) (= x121 (x314 x721)) (= x146 x18) (= x61 (x374 x505)) (= x227 x317) (> x619 0) (= x125 128) (not (= x548 1332530407)) (= x83 (x480 (- x61 1))) (= (x384 (* x83 2)) x465) (not (= x548 1525444543)) (< x548 1812160747) (not (< x548 1117154408)) (not (= 1117154408 x548)) x663 (= (x421 x422) x644) (= (= x61 x121) x663) (= x422 (x549 x579 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x61) (= (= x317 x249) x362) (not (< x548 599290589)) (= (x549 x440 x465) x579) (= (x341 (x766 2) 0) x440) (> x249 x83) (= x481 2) (>= x61 0) (= false x580) (= x505 (x234 (x631 x721) (x766 3) 0)) (= 2 x498) (not (= 0 x61)) (= (x119 (x631 x363)) x619) (= x266 2))))) (and (=> (and (not x633) (= x136 (> x193 31))) (and (=> (and (not x136) (and (= x609 (x631 x556)) (= x712 (x273 x126)) (= (x384 (* x116 256)) x632) (= (x52 x712 256) x116))) x464) (=> (and (and (= (x661 x410) x791) (= (x341 x126 0) x410) (= x71 (x221 (+ x193 160))) (= x565 (> x71 192)) (= (x549 x410 1) x435)) x136) (and (=> (not x565) x372) (=> x565 x686))))) (=> (and x633 (= (x631 x556) x609)) x464))) x369))
(assert (= x97 (=> (and (= x724 (> 32 x20)) (= (x710 x595 x610) x553) (= x645 (x710 x773 x152)) (= (x147 x17) x595) (= (x687 x645 x553) x516) (= (x147 x250) x773) (= x350 (x221 (+ x135 x19))) (= (x384 (- (x471 1 (* 8 x86)) 1)) x610) (= x20 (x91 128)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x610) x152) (= x86 (x480 (- 32 x148)))) (and (=> (and (not x724) (and (= x750 (x480 (- x20 32))) (= x648 (> 32 x750)) (= x293 (x221 (+ x350 32))) (= (x142 160) x244))) (and (=> (and x648 (and (= x287 x293) (= 192 x790) (= x272 x750))) x785) (=> (and (and (= (x284 192) x51) (= (> 32 x620) x245) (= (x480 (- x750 32)) x620) (= (x221 (+ 32 x293)) x662)) (not x648)) (and (=> (and (and (= x287 x662) (= x790 224) (= x620 x272)) x245) x785) (=> (and (not x245) (and (= (x221 (+ 32 x662)) x333) (= (x82 224) x608) (= (< x763 32) x182) (= x763 (x480 (- x620 32))))) (and (=> (not x182) x392) (=> (and (and (= x272 x763) (= x287 x333) (= x790 256)) x182) x785))))))) (=> (and (and (= x790 160) (= x350 x287) (= x272 x20)) x724) x785)))))
(assert (x176 x71))
(assert (= (x784 x53) 0))
(assert (= (x413 x23) 0))
(assert (= (x766 2720838757) (x631 2720838757)))
(assert (and (x229 2 x399) (x542 2 x399) (x598 2 x399) (x301 2 x399) (x665 2 x399) (= (* x399 2) (x289 2 x399)) (and (= (x289 2 (- x399 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x399 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x399 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x399 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x399 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x399) (- (* 2 x399) (* x399 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (= (+ (x185 x391) 1) (x185 (x549 x391 1))))
(assert (let ((x145 (ite (> 256 (x384 (* (x384 (- 31 (x344 x749 32))) 8))) (* 255 (x1 2 (x384 (* (x384 (- 31 (x344 x749 32))) 8)))) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x176 x669))
(assert (= 0 (x124 192)))
(assert (x738 x502))
(assert (= x720 (and x182 x188)))
(assert (x176 x278))
(assert (= (and (not x633) x405) x775))
(assert (x176 x527))
(assert (= (x124 224) 0))
(assert (x176 x524))
(assert (x42 x535 x601))
(assert (x242 x29))
(assert (and (= (- x508 (x710 1 x508)) (* 2 (x52 x508 2))) (x540 x508 2) (x501 x508 2) (x348 x508 2) (=> (and (> 2 0) (< 0 x508)) (and (< (- x508 2) (* (x52 x508 2) 2)) (<= (* 2 (x52 x508 2)) x508))) (x447 x508 2)))
(assert (x176 x326))
(assert (x656 (x1 2 (* x92 8))))
(assert (x176 x434))
(assert (x176 x335))
(assert (x176 x617))
(assert (x176 x64))
(assert (= x38 (or x477 x73)))
(assert (= 1525444543 (x185 (x766 1525444543))))
(assert (x176 x125))
(assert (x657 x770))
(assert (x656 x700))
(assert (x176 x378))
(assert (x657 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x468 (=> (and (= x255 (x509 x7)) (= x650 (x480 (- x462 32))) (= (x221 (+ 32 x286)) x209) (= x676 (< x650 32)) (= x101 (x221 (+ x7 32)))) (and (=> (and (= x101 x250) (= x148 x650) (= x17 x209)) x97) x676))))
(assert (= x323 (and x190 x648)))
(assert (= (x412 x88) 0))
(assert (x176 x175))
(assert (= x475 (x185 (x631 x475))))
(assert (= (x185 (x766 2376452955)) 2376452955))
(assert (x656 256))
(assert (x42 x433 x755))
(assert (x242 2))
(assert (x656 x399))
(assert (x176 x744))
(assert (= (=> (and (or x27 (and (not x27) (= x681 (x221 (+ 32 x425))))) (and (= x782 (x221 (+ x425 x527))) (= (x221 (+ x305 32)) x527) (= (x710 115792089237316195423570985008687907853269984665640564039457584007913129639904 x761) x305) (= x761 (x221 (+ x194 31))) (not (< 18446744073709551615 x194)) (= x27 (= 0 x194)))) x6) x515))
(assert (x176 x327))
(assert (and (x514 x761 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x761 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x761 (+ (x344 x761 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x761 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x761 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x176 x386))
(assert (x176 x466))
(assert (x176 x339))
(assert (= (=> (= x609 x126) x464) x372))
(assert (x176 x747))
(assert (x176 x86))
(assert (= (and x754 x210) x538))
(assert (= x721 (x185 (x631 x721))))
(assert (= x575 (=> (= x557 (x766 9)) x578)))
(assert (= x546 (and x191 (not x109))))
(assert (x176 x759))
(assert (x176 x729))
(assert (x738 256))
(assert (x176 x520))
(assert (= (x185 (x766 2962947777)) 2962947777))
(assert (x176 x523))
(assert (x657 x773))
(assert (x176 x107))
(assert (x450 x151))
(assert (x657 x452))
(assert (= x780 (=> (and (= x683 (x122 x15)) (= x569 (x221 (+ x428 32))) (= x24 (not (< x569 x354)))) (and x24 x575))))
(assert (= (x766 2376452955) (x631 2376452955)))
(assert (x176 x650))
(assert (= x63 (or x323 x720 x453 x621 x202)))
(assert (= (x124 x287) 0))
(assert (x93 x526))
(assert (x176 x479))
(assert (x738 x399))
(assert (x738 x508))
(assert (and (x514 x439 1461501637330902918203684832716283019655932542976) (x207 x439 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x439 (+ (x344 x439 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x52 x439 1461501637330902918203684832716283019655932542976))))) (x485 x439 1461501637330902918203684832716283019655932542976)))
(assert (= (x185 (x549 x440 x465)) (+ (x185 x440) x465)))
(assert (x176 x56))
(assert (x176 x26))
(assert (= x129 (and x546 (not x165))))
(assert (x176 x577))
(assert (= (and (not x180) x518) x753))
(assert (x176 x316))
(assert (x656 (x1 2 (x384 (* 8 (x384 (- 31 (x344 x749 32))))))))
(assert (x176 x18))
(assert (and (x229 8 x577) (x542 8 x577) (x598 8 x577) (x301 8 x577) (x665 8 x577) (= (* x577 8) (x289 8 x577)) (and (= (x289 8 (- x577 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x577 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x577 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x577 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x577 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x577) (- (* 8 x577) (* x577 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x237))
(assert (x176 x548))
(assert (x657 x424))
(assert (x176 x277))
(assert (x176 x403))
(assert (x176 x790))
(assert (x176 x48))
(assert (=> (>= 10000 x721) (= (x766 x721) (x631 x721))))
(assert (x176 x745))
(assert (x657 x755))
(assert (x176 x516))
(assert (x176 x539))
(assert (let ((x707 (x384 (- 31 (x344 x749 32))))) (and (x229 8 x707) (x542 8 x707) (x598 8 x707) (x301 8 x707) (x665 8 x707) (= (* x707 8) (x289 8 x707)) (and (= (x289 8 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x707) (- (* 8 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x176 x644))
(assert (x176 x783))
(assert (x176 x749))
(assert (x176 x604))
(assert (x176 x588))
(assert (x176 x293))
(assert (x176 x442))
(assert (= x789 (and x258 x693)))
(assert (= (x784 x607) 0))
(assert (= (x766 1461501637330902918203684832716283019655932542975) (x631 1461501637330902918203684832716283019655932542975)))
(assert (x176 x601))
(assert (let ((x707 (x1 2 (* 8 x577)))) (and (x229 1 x707) (x542 1 x707) (x598 1 x707) (x301 1 x707) (x665 1 x707) (= (* x707 1) (x289 1 x707)) (and (= (x289 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x707) (- (* 1 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x176 x460))
(assert (= (x185 (x549 x579 1)) (+ 1 (x185 x579))))
(assert (= (and x605 x27) x463))
(assert (x176 x276))
(assert (= x73 (and (not x120) x368)))
(assert (x176 x146))
(assert (x176 x113))
(assert (let ((x145 (ite (> 256 (x384 (* (x384 (- 31 (x344 x749 32))) 8))) (x289 (x710 255 x749) (x1 2 (x384 (* (x384 (- 31 (x344 x749 32))) 8)))) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x176 x768))
(assert (x176 x50))
(assert (x176 x317))
(assert (x176 x150))
(assert (x176 x473))
(assert (x176 x629))
(assert (= (x766 3096268766) (x631 3096268766)))
(assert (x176 x767))
(assert (let ((x707 (x1 2 (* 8 x529)))) (and (x229 1 x707) (x542 1 x707) (x598 1 x707) (x301 1 x707) (x665 1 x707) (= (* x707 1) (x289 1 x707)) (and (= (x289 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x707) (- (* 1 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x176 x770))
(assert (x657 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x471 255 (x384 (* 8 (x384 (- 31 (x344 x749 32)))))))))
(assert (x176 x424))
(assert (x93 x556))
(assert (x176 x419))
(assert (and (x229 2 x700) (x542 2 x700) (x598 2 x700) (x301 2 x700) (x665 2 x700) (= (* x700 2) (x289 2 x700)) (and (= (x289 2 (- x700 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x700 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x700 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x700 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x700 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x700) (- (* 2 x700) (* x700 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (and (x514 x749 256) (x207 x749 256) (=> (> 256 0) (= x749 (+ (x344 x749 256) (* 256 (x52 x749 256))))) (x485 x749 256)))
(assert (= (x185 (x766 2720838757)) 2720838757))
(assert (x176 x597))
(assert (x176 x517))
(assert (x176 x736))
(assert (x42 x682 x585))
(assert (x738 x556))
(assert (= x188 (and (not x245) x536)))
(assert (x176 x638))
(assert (= (x766 1332530407) (x631 1332530407)))
(assert (x708 x761))
(assert (x450 x644))
(assert (x176 x552))
(assert (x176 x203))
(assert (x176 x162))
(assert (= (x766 2962947777) (x631 2962947777)))
(assert (x656 (x1 2 (* 8 x158))))
(assert (x176 x772))
(assert (= 0 (x124 x250)))
(assert (= 0 (x124 x790)))
(assert (x176 x204))
(assert (x176 x96))
(assert (= x576 (or x359 x625)))
(assert (= (x413 (x384 (- x749 (x344 x749 32)))) 0))
(assert (= (and x443 (not x110)) x769))
(assert (x176 x400))
(assert (x176 x84))
(assert (x656 x529))
(assert (x176 x476))
(assert (= (and x300 x560) x49))
(assert (and (= (- x772 (x710 1 x772)) (* 2 (x52 x772 2))) (x540 x772 2) (x501 x772 2) (x348 x772 2) (=> (and (> 2 0) (< 0 x772)) (and (< (- x772 2) (* (x52 x772 2) 2)) (<= (* 2 (x52 x772 2)) x772))) (x447 x772 2)))
(assert (= (x471 1 (* 8 x577)) (x384 (ite (< (* x577 8) 256) (x1 2 (* 8 x577)) 0))))
(assert (x176 x581))
(assert (x176 x529))
(assert (= x765 (and x49 (not x396))))
(assert (let ((x145 (ite (< (* x158 8) 256) (x1 2 (* 8 x158)) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x657 x381))
(assert (x176 x248))
(assert (and (x229 2 x83) (x542 2 x83) (x598 2 x83) (x301 2 x83) (x665 2 x83) (= (* x83 2) (x289 2 x83)) (and (= (x289 2 (- x83 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x83 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x83 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x83 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x83 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x83) (- (* 2 x83) (* x83 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x738 x700))
(assert (x176 x585))
(assert (x176 x709))
(assert (x93 x378))
(assert (x242 (ite (< (* 8 x158) 256) (x1 2 (* x158 8)) 0)))
(assert (x657 255))
(assert (x176 x360))
(assert (x176 x152))
(assert (x176 x2))
(assert (and (= 32 (x1 2 5)) (= 162259276829213363391578010288128 (x1 2 107)) (= 309485009821345068724781056 (x1 2 88)) (= 4835703278458516698824704 (x1 2 82)) (= 68719476736 (x1 2 36)) (= (x1 2 3) 8) (= 25108406941546723055343157692830665664409421777856138051584 (x1 2 194)) (= 4 (x1 2 2)) (= (x1 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 144115188075855872 (x1 2 57)) (= (x1 2 89) 618970019642690137449562112) (= (x1 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x1 2 17) 131072) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x1 2 238)) (= 34359738368 (x1 2 35)) (= (x1 2 1) 2) (= 2787593149816327892691964784081045188247552 (x1 2 141)) (= 191561942608236107294793378393788647952342390272950272 (x1 2 177)) (= 2147483648 (x1 2 31)) (= (x1 2 139) 696898287454081973172991196020261297061888) (= 5444517870735015415413993718908291383296 (x1 2 132)) (= (x1 2 105) 40564819207303340847894502572032) (= (x1 2 10) 1024) (= 1645504557321206042154969182557350504982735865633579863348609024 (x1 2 210)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x1 2 216)) (= 549755813888 (x1 2 39)) (= (x1 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 170141183460469231731687303715884105728 (x1 2 127)) (= (x1 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x1 2 50) 1125899906842624) (= 128 (x1 2 7)) (= 576460752303423488 (x1 2 59)) (= (x1 2 137) 174224571863520493293247799005065324265472) (= 12259964326927110866866776217202473468949912977468817408 (x1 2 183)) (= (x1 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 137438953472 (x1 2 37)) (= 2658455991569831745807614120560689152 (x1 2 121)) (= 19807040628566084398385987584 (x1 2 94)) (= 680564733841876926926749214863536422912 (x1 2 129)) (= 49039857307708443467467104868809893875799651909875269632 (x1 2 185)) (= (x1 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x1 2 163) 11692013098647223345629478661730264157247460343808) (= (x1 2 148) 356811923176489970264571492362373784095686656) (= 604462909807314587353088 (x1 2 79)) (= (x1 2 0) 1) (= 4722366482869645213696 (x1 2 72)) (= (x1 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x1 2 249)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x1 2 223)) (= (x1 2 135) 43556142965880123323311949751266331066368) (= (x1 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x1 2 60) 1152921504606846976) (= 1208925819614629174706176 (x1 2 80)) (= (x1 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x1 2 110) 1298074214633706907132624082305024) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x1 2 236)) (= 21778071482940061661655974875633165533184 (x1 2 134)) (= (x1 2 29) 536870912) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x1 2 250)) (= 9671406556917033397649408 (x1 2 83)) (= 8192 (x1 2 13)) (= 81129638414606681695789005144064 (x1 2 106)) (= 766247770432944429179173513575154591809369561091801088 (x1 2 179)) (= (x1 2 103) 10141204801825835211973625643008) (= 151115727451828646838272 (x1 2 77)) (= (x1 2 87) 154742504910672534362390528) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x1 2 226)) (= (x1 2 162) 5846006549323611672814739330865132078623730171904) (= 51422017416287688817342786954917203280710495801049370729644032 (x1 2 205)) (= 2305843009213693952 (x1 2 61)) (= 295147905179352825856 (x1 2 68)) (= 6277101735386680763835789423207666416102355444464034512896 (x1 2 192)) (= 262144 (x1 2 18)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x1 2 241)) (= (x1 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 302231454903657293676544 (x1 2 78)) (= 83076749736557242056487941267521536 (x1 2 116)) (= 2199023255552 (x1 2 41)) (= (x1 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x1 2 112) 5192296858534827628530496329220096) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x1 2 234)) (= (x1 2 144) 22300745198530623141535718272648361505980416) (= 89202980794122492566142873090593446023921664 (x1 2 146)) (= 2251799813685248 (x1 2 51)) (= 37778931862957161709568 (x1 2 75)) (= (x1 2 69) 590295810358705651712) (= 713623846352979940529142984724747568191373312 (x1 2 149)) (= (x1 2 65) 36893488147419103232) (= 2596148429267413814265248164610048 (x1 2 111)) (= (x1 2 54) 18014398509481984) (= 2361183241434822606848 (x1 2 71)) (= (x1 2 63) 9223372036854775808) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x1 2 244)) (= (x1 2 62) 4611686018427387904) (= (x1 2 27) 134217728) (= (x1 2 56) 72057594037927936) (= (x1 2 108) 324518553658426726783156020576256) (= (x1 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x1 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 2475880078570760549798248448 (x1 2 91)) (= 38685626227668133590597632 (x1 2 85)) (= 98079714615416886934934209737619787751599303819750539264 (x1 2 186)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x1 2 211)) (= (x1 2 175) 47890485652059026823698344598447161988085597568237568) (= 5316911983139663491615228241121378304 (x1 2 122)) (= (x1 2 43) 8796093022208) (= (x1 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x1 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x1 2 182) 6129982163463555433433388108601236734474956488734408704) (= 17179869184 (x1 2 34)) (= 348449143727040986586495598010130648530944 (x1 2 138)) (= (x1 2 45) 35184372088832) (= 401734511064747568885490523085290650630550748445698208825344 (x1 2 198)) (= (x1 2 28) 268435456) (= 5070602400912917605986812821504 (x1 2 102)) (= (x1 2 159) 730750818665451459101842416358141509827966271488) (= 8388608 (x1 2 23)) (= 9007199254740992 (x1 2 53)) (= 748288838313422294120286634350736906063837462003712 (x1 2 169)) (= (x1 2 156) 91343852333181432387730302044767688728495783936) (= 8589934592 (x1 2 33)) (= 2923003274661805836407369665432566039311865085952 (x1 2 161)) (= (x1 2 143) 11150372599265311570767859136324180752990208) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x1 2 232)) (= 140737488355328 (x1 2 47)) (= 65536 (x1 2 16)) (= 5986310706507378352962293074805895248510699696029696 (x1 2 172)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x1 2 230)) (= (x1 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 1237940039285380274899124224 (x1 2 90)) (= 178405961588244985132285746181186892047843328 (x1 2 147)) (= 24519928653854221733733552434404946937899825954937634816 (x1 2 184)) (= (x1 2 58) 288230376151711744) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x1 2 255)) (= 1427247692705959881058285969449495136382746624 (x1 2 150)) (= 18446744073709551616 (x1 2 64)) (= 5575186299632655785383929568162090376495104 (x1 2 142)) (= (x1 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x1 2 240)) (= (x1 2 153) 11417981541647679048466287755595961091061972992) (= (x1 2 145) 44601490397061246283071436545296723011960832) (= 41538374868278621028243970633760768 (x1 2 115)) (= 784637716923335095479473677900958302012794430558004314112 (x1 2 189)) (= (x1 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 147573952589676412928 (x1 2 67)) (= 21267647932558653966460912964485513216 (x1 2 124)) (= 562949953421312 (x1 2 49)) (= (x1 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x1 2 81) 2417851639229258349412352) (= 87112285931760246646623899502532662132736 (x1 2 136)) (= 77371252455336267181195264 (x1 2 86)) (= 3213876088517980551083924184682325205044405987565585670602752 (x1 2 201)) (= 46768052394588893382517914646921056628989841375232 (x1 2 165)) (= (x1 2 152) 5708990770823839524233143877797980545530986496) (= (x1 2 166) 93536104789177786765035829293842113257979682750464) (= (x1 2 44) 17592186044416) (= (x1 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x1 2 239)) (= 365375409332725729550921208179070754913983135744 (x1 2 158)) (= 64 (x1 2 6)) (= (x1 2 99) 633825300114114700748351602688) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x1 2 252)) (= (x1 2 100) 1267650600228229401496703205376) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x1 2 253)) (= 95780971304118053647396689196894323976171195136475136 (x1 2 176)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x1 2 219)) (= (x1 2 155) 45671926166590716193865151022383844364247891968) (= 210624583337114373395836055367340864637790190801098222508621955072 (x1 2 217)) (= 664613997892457936451903530140172288 (x1 2 119)) (= (x1 2 113) 10384593717069655257060992658440192) (= (x1 2 174) 23945242826029513411849172299223580994042798784118784) (= 2097152 (x1 2 21)) (= 524288 (x1 2 19)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x1 2 222)) (= 1496577676626844588240573268701473812127674924007424 (x1 2 170)) (= 9444732965739290427392 (x1 2 73)) (= (x1 2 22) 4194304) (= 79228162514264337593543950336 (x1 2 96)) (= 3064991081731777716716694054300618367237478244367204352 (x1 2 181)) (= (x1 2 173) 11972621413014756705924586149611790497021399392059392) (= (x1 2 4) 16) (= 2048 (x1 2 11)) (= (x1 2 140) 1393796574908163946345982392040522594123776) (= 1099511627776 (x1 2 40)) (= 1048576 (x1 2 20)) (= 274877906944 (x1 2 38)) (= 18889465931478580854784 (x1 2 74)) (= 9903520314283042199192993792 (x1 2 93)) (= 200867255532373784442745261542645325315275374222849104412672 (x1 2 197)) (= (x1 2 154) 22835963083295358096932575511191922182123945984) (= (x1 2 171) 2993155353253689176481146537402947624255349848014848) (= 1073741824 (x1 2 30)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x1 2 235)) (= (x1 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 33554432 (x1 2 25)) (= (x1 2 52) 4503599627370496) (= 512 (x1 2 9)) (= 1532495540865888858358347027150309183618739122183602176 (x1 2 180)) (= (x1 2 104) 20282409603651670423947251286016) (= (x1 2 26) 67108864) (= 13164036458569648337239753460458804039861886925068638906788872192 (x1 2 213)) (= (x1 2 46) 70368744177664) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x1 2 220)) (= (x1 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 10633823966279326983230456482242756608 (x1 2 123)) (= (x1 2 12) 4096) (= 1361129467683753853853498429727072845824 (x1 2 130)) (= (x1 2 178) 383123885216472214589586756787577295904684780545900544) (= (x1 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x1 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x1 2 247)) (= (x1 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x1 2 128) 340282366920938463463374607431768211456) (= (x1 2 114) 20769187434139310514121985316880384) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x1 2 243)) (= (x1 2 188) 392318858461667547739736838950479151006397215279002157056) (= 649037107316853453566312041152512 (x1 2 109)) (= (x1 2 126) 85070591730234615865843651857942052864) (= (x1 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x1 2 237)) (= (x1 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x1 2 98) 316912650057057350374175801344) (= (x1 2 15) 32768) (= (x1 2 118) 332306998946228968225951765070086144) (= 16384 (x1 2 14)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x1 2 233)) (= (x1 2 131) 2722258935367507707706996859454145691648) (= 19342813113834066795298816 (x1 2 84)) (= (x1 2 101) 2535301200456458802993406410752) (= (x1 2 133) 10889035741470030830827987437816582766592) (= 374144419156711147060143317175368453031918731001856 (x1 2 168)) (= (x1 2 157) 182687704666362864775460604089535377456991567872) (= 158456325028528675187087900672 (x1 2 97)) (= 166153499473114484112975882535043072 (x1 2 117)) (= 42535295865117307932921825928971026432 (x1 2 125)) (= (x1 2 48) 281474976710656) (= (x1 2 151) 2854495385411919762116571938898990272765493248) (= (x1 2 76) 75557863725914323419136) (= (x1 2 32) 4294967296) (= 187072209578355573530071658587684226515959365500928 (x1 2 167)) (= (x1 2 92) 4951760157141521099596496896) (= (x1 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 4398046511104 (x1 2 42)) (= 102844034832575377634685573909834406561420991602098741459288064 (x1 2 206)) (= 36028797018963968 (x1 2 55)) (= (x1 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 1461501637330902918203684832716283019655932542976 (x1 2 160)) (= 23384026197294446691258957323460528314494920687616 (x1 2 164)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x1 2 251)) (= (x1 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x1 2 95) 39614081257132168796771975168) (= 1329227995784915872903807060280344576 (x1 2 120)) (= (x1 2 8) 256) (= (x1 2 24) 16777216) (= 73786976294838206464 (x1 2 66)) (= (x1 2 70) 1180591620717411303424)))
(assert (x176 x16))
(assert (x657 x610))
(assert (x176 x642))
(assert (x176 x569))
(assert (x176 x137))
(assert (let ((x145 (ite (< (* 8 x577) 256) (x1 2 (* 8 x577)) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x176 x244))
(assert (x176 x3))
(assert (x176 x198))
(assert (x176 x61))
(assert (x242 x439))
(assert (x176 x87))
(assert (= x616 (and x343 x357)))
(assert (= x6 (=> (and (= x120 (= x556 0)) (= (x480 (- x194 1)) x282)) (and (=> (not x120) x472) (=> x120 x660)))))
(assert (x176 x5))
(assert (x176 x159))
(assert (= x574 (and x246 x547)))
(assert (x176 x659))
(assert (x176 x14))
(assert (= 0 (x784 x419)))
(assert (x242 x381))
(assert (x42 x595 x610))
(assert (x176 x193))
(assert (x176 x704))
(assert (x176 x309))
(assert (= (x208 x429) 0))
(assert (x176 x174))
(assert (x176 x270))
(assert (x176 x550))
(assert (= (=> (and (= (> 32 x451) x117) (= (x221 (+ 32 x254)) x511) (= (x221 (+ 32 x230)) x783) (= x541 (x509 x230)) (= (x480 (- x58 32)) x451)) (and x117 (=> (and (= x783 x211) (= x451 x626) (= x291 x511)) x654))) x491))
(assert (x176 x425))
(assert (= (x766 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x631 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x657 x433))
(assert (x494 x358))
(assert (x176 x151))
(assert (= x453 (and x188 (not x182))))
(assert (x176 x740))
(assert (x176 x90))
(assert (x176 x304))
(assert (= (x185 (x766 3096268766)) 3096268766))
(assert (x656 2))
(assert (= x359 (and x716 x565)))
(assert (and (x229 256 x116) (x542 256 x116) (x598 256 x116) (x301 256 x116) (x665 256 x116) (= (* x116 256) (x289 256 x116)) (and (= (x289 256 (- x116 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 256 (- x116 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x116 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (- x116 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) (- x116 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639680) x116) (- (* 256 x116) (* x116 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (and (x514 x644 1461501637330902918203684832716283019655932542976) (x207 x644 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x644 (+ (x344 x644 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x52 x644 1461501637330902918203684832716283019655932542976))))) (x485 x644 1461501637330902918203684832716283019655932542976)))
(assert (and (x229 2 x582) (x542 2 x582) (x598 2 x582) (x301 2 x582) (x665 2 x582) (= (* x582 2) (x289 2 x582)) (and (= (x289 2 (- x582 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 2 (- x582 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x582 115792089237316195423570985008687907853269984665640564039457584007913129639936) 2) (* (- x582 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) (- x582 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639934) x582) (- (* 2 x582) (* x582 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x494 x764))
(assert (= x261 (or x643 x397 x576)))
(assert (= x392 (=> (and (= x703 (< x704 32)) (= (x221 (+ x333 32)) x257) (= (x723 256) x702) (= (x480 (- x763 32)) x704)) (and (=> (and (= 288 x790) (= x704 x272) (= x257 x287)) x785) x703))))
(assert (x176 x511))
(assert (= (x124 256) 0))
(assert (x494 x445))
(assert (= (x384 (ite (< (x384 (* 8 (x384 (- 31 (x344 x749 32))))) 256) (x289 (x710 255 x749) (x1 2 (x384 (* 8 (x384 (- 31 (x344 x749 32))))))) 0)) (x471 (x710 255 x749) (x384 (* (x384 (- 31 (x344 x749 32))) 8)))))
(assert (= x482 (and (not x474) x177)))
(assert (x355 x645 x553))
(assert (x176 x333))
(assert (x176 x196))
(assert (let ((x707 (x1 2 (* 8 x158)))) (and (x229 1 x707) (x542 1 x707) (x598 1 x707) (x301 1 x707) (x665 1 x707) (= (* x707 1) (x289 1 x707)) (and (= (x289 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x707) (- (* 1 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x176 x587))
(assert (x176 x470))
(assert (x176 x83))
(assert (x176 x437))
(assert (x176 x701))
(assert (x176 x267))
(assert (x176 x186))
(assert (x42 x235 x424))
(assert (x176 x618))
(assert (x176 x247))
(assert (= (and x295 (not x414)) x547))
(assert (x657 x595))
(assert (x176 x493))
(assert (x176 x32))
(assert (= (x185 (x549 x469 x415)) (+ x415 (x185 x469))))
(assert (= (or x349 x765) x487))
(assert (x494 (x471 (x710 255 x749) (x384 (* 8 (x384 (- 31 (x344 x749 32))))))))
(assert (x42 x162 x54))
(assert (x176 x620))
(assert (= x389 (or x37 x11 x63)))
(assert (x176 x444))
(assert (= x615 (and (not x671) x554)))
(assert (x176 x572))
(assert (= (x784 x36) 0))
(assert (x176 x553))
(assert (x176 x169))
(assert (= (x185 (x631 x526)) x526))
(assert (not x369))
(assert (= (+ x169 (x185 x127)) (x185 (x549 x127 x169))))
(assert (x176 x135))
(assert (x494 x645))
(assert (x176 x418))
(assert (x656 1))
(assert (x242 (ite (< (* 8 x86) 256) (x1 2 (* 8 x86)) 0)))
(assert (= (x766 115792089237316195423570985008687907853269984665640564039457584007913129639935) (x631 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= (x185 (x766 1812160747)) 1812160747))
(assert (= x177 (and (not x225) x769)))
(assert (x657 x203))
(assert (let ((x707 (x1 2 (* 8 x86)))) (and (x229 1 x707) (x542 1 x707) (x598 1 x707) (x301 1 x707) (x665 1 x707) (= (* x707 1) (x289 1 x707)) (and (= (x289 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x707) (- (* 1 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (and (x229 8 x529) (x542 8 x529) (x598 8 x529) (x301 8 x529) (x665 8 x529) (= (* x529 8) (x289 8 x529)) (and (= (x289 8 (- x529 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x529 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x529 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x529 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x529 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x529) (- (* 8 x529) (* x529 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x757))
(assert (x176 x166))
(assert (x176 x286))
(assert (x176 x513))
(assert (x176 x282))
(assert (x176 x792))
(assert (= (x185 (x549 x140 1)) (+ (x185 x140) 1)))
(assert (x176 x257))
(assert (= (x631 18446744073709551615) (x766 18446744073709551615)))
(assert (= (x766 1666326814) (x631 1666326814)))
(assert (= (and x547 (not x246)) x518))
(assert (x176 x331))
(assert (x176 x582))
(assert (x176 x115))
(assert (= x449 (and x482 (not x689))))
(assert (= (and x724 x672) x202))
(assert (= (and (not x724) x672) x190))
(assert (x176 x742))
(assert (x176 x249))
(assert (and (= 81 (x289 9 9)) (= 27 (x289 9 3)) (= 9 (x289 3 3)) (= (x289 27 3) 81)))
(assert (=> (<= x378 10000) (= (x631 x378) (x766 x378))))
(assert (x656 (x1 2 (* 8 x577))))
(assert (and (=> (and (> 10 0) (< 0 x556)) (and (< (- x556 10) (* (x52 x556 10) 10)) (<= (* 10 (x52 x556 10)) x556))) (x348 x556 10) (x501 x556 10) (x540 x556 10) (x447 x556 10)))
(assert (x176 x390))
(assert (x242 x644))
(assert (x176 x283))
(assert (x176 x217))
(assert (x176 x7))
(assert (x176 x462))
(assert (x176 x168))
(assert (= x206 (and x180 x518)))
(assert (x176 x345))
(assert (x176 x351))
(assert (= (and x164 x615) x295))
(assert (x657 (x340 (x384 (- x749 (x344 x749 32))))))
(assert (x176 x433))
(assert (= (x124 x17) 0))
(assert (x176 x209))
(assert (x176 x131))
(assert (x657 x54))
(assert (x450 x439))
(assert (= (or x330 x226) x210))
(assert (= x643 (and (not x136) x775)))
(assert (x176 x144))
(assert (x176 x755))
(assert (x176 x645))
(assert (= (and (not x258) x693) x241))
(assert (x176 x215))
(assert (x176 x402))
(assert (x176 x312))
(assert (x176 x108))
(assert (= 0 (x124 160)))
(assert (= (and x357 (not x343)) x306))
(assert (x242 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x176 x721))
(assert (x176 x212))
(assert (x176 x214))
(assert (and (= (- x83 (x710 1 x83)) (* 2 (x52 x83 2))) (x540 x83 2) (x501 x83 2) (x348 x83 2) (=> (and (> 2 0) (< 0 x83)) (and (< (- x83 2) (* (x52 x83 2) 2)) (<= (* 2 (x52 x83 2)) x83))) (x447 x83 2)))
(assert (x176 x635))
(assert (and (x229 8 x92) (x542 8 x92) (x598 8 x92) (x301 8 x92) (x665 8 x92) (= (* x92 8) (x289 8 x92)) (and (= (x289 8 (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x92 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x92) (- (* 8 x92) (* x92 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x325))
(assert (x176 x448))
(assert (x176 x58))
(assert (x656 x517))
(assert (= (x413 x777) 0))
(assert (= (x185 (x766 115792089237316195423570985008687907853269984665640564039457584007913129639904)) 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= 0 (x784 x212)))
(assert (x176 x698))
(assert (= (x185 (x631 x556)) x556))
(assert (x176 x81))
(assert (x176 x670))
(assert (x656 8))
(assert (x176 x181))
(assert (x176 x496))
(assert (and (x514 x203 2) (x207 x203 2) (=> (> 2 0) (= x203 (+ (x344 x203 2) (* 2 (x52 x203 2))))) (x485 x203 2)))
(assert (x176 x763))
(assert (x176 x265))
(assert (x176 x428))
(assert (x42 x173 x733))
(assert (and (x229 32 x517) (x542 32 x517) (x598 32 x517) (x301 32 x517) (x665 32 x517) (= (* x517 32) (x289 32 x517)) (and (= (x289 32 (- x517 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 32 (- x517 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x517 115792089237316195423570985008687907853269984665640564039457584007913129639936) 32) (* (- x517 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) (- x517 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639904) x517) (- (* 32 x517) (* x517 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x157))
(assert (= x405 true))
(assert (= (x471 1 (* x86 8)) (x384 (ite (< (* 8 x86) 256) (x1 2 (* x86 8)) 0))))
(assert (x176 x250))
(assert (and (= (- x399 (x710 1 x399)) (* 2 (x52 x399 2))) (x540 x399 2) (x501 x399 2) (x348 x399 2) (=> (and (> 2 0) (< 0 x399)) (and (< (- x399 2) (* (x52 x399 2) 2)) (<= (* 2 (x52 x399 2)) x399))) (x447 x399 2)))
(assert (x176 x148))
(assert (x176 x376))
(assert (x176 x583))
(assert (x176 x711))
(assert (= (or x538 x680) x589))
(assert (x176 x297))
(assert (x176 x12))
(assert (= 0 (x208 x455)))
(assert (=> (<= x526 10000) (= (x631 x526) (x766 x526))))
(assert (x259 x203))
(assert (x176 x303))
(assert (= (and x177 x474) x561))
(assert (= x338 (and x605 (not x27))))
(assert (= x11 (or x13 x616 x789 x241 x438)))
(assert (= (x185 (x766 115792089237316195423570985008687907853269984665640564039457584007913129639935)) 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x657 x173))
(assert (= (=> (and (= (not (< 32 x381)) x4) (= x401 x778) (= x759 x90) (= x713 (x184 x759))) (and x79 x4)) x531))
(assert (= 0 (x600 x442)))
(assert (x176 x596))
(assert (x176 x417))
(assert (x176 x269))
(assert (and (x514 x761 32) (x207 x761 32) (=> (> 32 0) (= x761 (+ (x344 x761 32) (* 32 (x52 x761 32))))) (x485 x761 32)))
(assert (x42 x773 x152))
(assert (= x679 (and x787 x753)))
(assert (x176 x658))
(assert (x355 x764 x25))
(assert (= (or x21 x129) x605))
(assert (x242 x749))
(assert (x176 x279))
(assert (x176 x382))
(assert (x176 x401))
(assert (= (=> (and (>= x376 0) (= x552 (x480 (- x153 x161))) (= x756 (x296 x739)) (<= x658 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x221 (+ x320 32)) x416) (= x157 (x66 x442)) (= (x221 (+ 32 x153)) x401) (<= x756 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x549 x739 1) x727) (= (x221 (+ 32 x161)) x776) (>= x658 0) (<= x376 1461501637330902918203684832716283019655932542975) (= (x77 x727) x658) (= x739 (x549 x371 1)) (> 1461501637330902918203684832716283019655932542976 x376) (= (x221 (+ 32 x416)) x153) (= x232 (> x381 0)) (= x376 (x649 x371)) (= x320 (x221 (+ x776 32))) (= (x221 (+ 32 x442)) x90) (= x381 (x66 x442)) (>= x756 0)) (and (=> x232 x531) (=> (not x232) x79))) x102))
(assert (let ((x707 (x1 2 (x384 (* (x384 (- 31 (x344 x749 32))) 8))))) (and (x229 255 x707) (x542 255 x707) (x598 255 x707) (x301 255 x707) (x665 255 x707) (= (* x707 255) (x289 255 x707)) (and (= (x289 255 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 255 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 255) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639681) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639681) x707) (- (* 255 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x176 x254))
(assert (= x307 (and x443 x110)))
(assert (x176 x459))
(assert (x176 x264))
(assert (let ((x707 (x1 2 (* x92 8)))) (and (x229 1 x707) (x542 1 x707) (x598 1 x707) (x301 1 x707) (x665 1 x707) (= (* x707 1) (x289 1 x707)) (and (= (x289 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 1 (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1) (* (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- x707 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935) x707) (- (* 1 x707) (* x707 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(assert (x242 256))
(assert (x657 x606))
(assert (x176 x287))
(assert (= (and x554 x671) x37))
(assert (= x612 (and x689 x482)))
(assert (x176 x101))
(assert (= 0 (x124 x677)))
(assert (x176 x415))
(assert (x176 x54))
(assert (x176 x544))
(assert (and (= (- x700 (x710 1 x700)) (* 2 (x52 x700 2))) (x540 x700 2) (x501 x700 2) (x348 x700 2) (=> (and (> 2 0) (< 0 x700)) (and (< (- x700 2) (* (x52 x700 2) 2)) (<= (* 2 (x52 x700 2)) x700))) (x447 x700 2)))
(assert (x176 x171))
(assert (= x363 (x185 (x631 x363))))
(assert (x176 x227))
(assert (x656 (x1 2 (* x86 8))))
(assert (= (+ 1 (x185 x410)) (x185 (x549 x410 1))))
(assert (x93 x475))
(assert (= 599290589 (x185 (x766 599290589))))
(assert (x494 x553))
(assert (x176 x170))
(assert (x176 x502))
(assert (x176 x179))
(assert (x176 x563))
(assert (and (= (- x502 (x710 31 x502)) (* 32 (x52 x502 32))) (x540 x502 32) (x501 x502 32) (x348 x502 32) (=> (and (> 32 0) (< 0 x502)) (and (< (- x502 32) (* (x52 x502 32) 32)) (<= (* 32 (x52 x502 32)) x502))) (x447 x502 32)))
(assert (x176 x155))
(assert (= x191 (and (not x164) x615)))
(assert (x176 x423))
(assert (= (x766 1117154408) (x631 1117154408)))
(assert (x176 x713))
(assert (= (x471 255 (x384 (* 8 (x384 (- 31 (x344 x749 32)))))) (x384 (ite (> 256 (x384 (* 8 (x384 (- 31 (x344 x749 32)))))) (* (x1 2 (x384 (* 8 (x384 (- 31 (x344 x749 32)))))) 255) 0))))
(assert (x176 x363))
(assert (= x472 (=> (and (= (x221 (+ x425 x256)) x749) (= (x221 (+ 32 x282)) x256) (< x282 x493) (= (x172 x425) x493) (= x44 (= 0 x204)) (= (x52 x556 10) x204)) (and x44 x660))))
(assert (x176 x684))
(assert (x176 x106))
(assert (x176 x541))
(assert (x176 x158))
(assert (x176 x632))
(assert (x176 x298))
(assert (x722 (x710 255 x749) (x1 2 (x384 (* (x384 (- 31 (x344 x749 32))) 8)))))
(assert (= x443 (or x103 x38)))
(assert (x355 x728 x358))
(assert (x657 x535))
(assert (x242 (ite (> 256 (* 8 x529)) (x1 2 (* x529 8)) 0)))
(assert (x355 (x710 (x340 (x384 (- x749 (x344 x749 32)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x471 255 (x384 (* (x384 (- 31 (x344 x749 32))) 8))))) (x471 (x710 255 x749) (x384 (* (x384 (- 31 (x344 x749 32))) 8)))))
(assert (x176 x683))
(assert (x176 x773))
(assert (x738 x712))
(assert (x176 x760))
(assert (x176 x451))
(assert (= (x784 x7) 0))
(assert (x656 (x710 255 x749)))
(assert (x176 x717))
(assert (= (x384 (ite (< (* 8 x529) 256) (x1 2 (* x529 8)) 0)) (x471 1 (* 8 x529))))
(assert (x176 x350))
(assert (= 1332530407 (x185 (x766 1332530407))))
(assert (x176 x700))
(assert (x176 x535))
(assert (x657 x749))
(assert (= x672 (or x206 x630 x679 x274 x574)))
(assert (= x368 (or x338 x463)))
(assert (x176 x567))
(assert (x494 x728))
(assert (x176 x489))
(assert (and (= (- x203 (x710 255 x203)) (* 256 (x52 x203 256))) (x540 x203 256) (x501 x203 256) (x348 x203 256) (=> (and (> 256 0) (< 0 x203)) (and (< (- x203 256) (* (x52 x203 256) 256)) (<= (* 256 (x52 x203 256)) x203))) (x447 x203 256)))
(assert (and (= (- x346 (x710 31 x346)) (* 32 (x52 x346 32))) (x540 x346 32) (x501 x346 32) (x348 x346 32) (=> (and (> 32 0) (< 0 x346)) (and (< (- x346 32) (* (x52 x346 32) 32)) (<= (* 32 (x52 x346 32)) x346))) (x447 x346 32)))
(assert (x176 x429))
(assert (x176 x526))
(assert (x42 x770 x696))
(assert (x176 x734))
(assert (x176 x606))
(assert (x657 x29))
(assert (x176 x677))
(assert (x176 x653))
(assert (x176 x714))
(assert (x176 x47))
(assert (= (+ 1 (x185 x371)) (x185 (x549 x371 1))))
(assert (x656 x458))
(assert (x176 x556))
(assert (x176 x774))
(assert (x242 x203))
(assert (x176 x500))
(assert (x176 x315))
(assert (and (x229 8 x86) (x542 8 x86) (x598 8 x86) (x301 8 x86) (x665 8 x86) (= (* x86 8) (x289 8 x86)) (and (= (x289 8 (- x86 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 8 (- x86 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x86 115792089237316195423570985008687907853269984665640564039457584007913129639936) 8) (* (- x86 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) (- x86 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x289 (- 115792089237316195423570985008687907853269984665640564039457584007913129639928) x86) (- (* 8 x86) (* x86 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x176 x761))
(assert (x176 x358))
(assert (x176 x262))
(assert (x176 x746))
(assert (x176 x380))
(assert (x176 x528))
(assert (x657 x151))
(assert (x657 x696))
(assert (x176 x694))
(assert (x42 x452 x335))
(assert (x176 x475))
(assert (x176 x17))
(assert (x42 (x340 (x384 (- x749 (x344 x749 32)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x471 255 (x384 (* (x384 (- 31 (x344 x749 32))) 8))))))
(assert (x176 x622))
(assert (x176 x497))
(assert (let ((x145 (ite (> 256 (* 8 x92)) (x1 2 (* x92 8)) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x176 x194))
(assert (x176 x141))
(assert (= (and x536 x245) x621))
(assert (= (x185 (x766 21711016731996786641919559689128982722488122124807605757398297001483711807488)) 21711016731996786641919559689128982722488122124807605757398297001483711807488))
(assert (x176 x681))
(assert (x176 x68))
(assert (x242 32))
(assert (x93 x721))
(assert (x176 x481))
(assert (= (x185 (x549 x75 x781)) (+ x781 (x185 x75))))
(assert (x242 (ite (< (x384 (* 8 (x384 (- 31 (x344 x749 32))))) 256) (x289 (x710 255 x749) (x1 2 (x384 (* (x384 (- 31 (x344 x749 32))) 8)))) 0)))
(assert (x176 x778))
(assert (x176 x149))
(assert (= (x413 x500) 0))
(assert (x176 x532))
(assert (= (x631 (x185 x557)) x557))
(assert (x176 x123))
(assert (= (+ 1 (x185 x739)) (x185 (x549 x739 1))))
(assert (= 18446744073709551615 (x185 (x766 18446744073709551615))))
(assert (x167 x749))
(assert (= (and (not x236) x261) x560))
(assert (x176 x60))
(assert (= x226 (and x232 x389)))
(assert (x176 x291))
(assert (x176 x199))
(assert (= (and x165 x546) x21))
(assert (x176 x781))
(assert (= (=> (and (= x764 (x710 x770 x696)) (= (< x512 32) x430) (= (x480 (- 32 x626)) x158) (= x742 (x687 x764 x25)) (= x383 (x221 (+ x186 x768))) (= x696 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54)) (= (x603 x88) x512) (= x770 (x222 x211)) (= x446 (x221 (+ 32 x88))) (= x54 (x384 (- (x471 1 (* x158 8)) 1))) (= x25 (x710 x162 x54)) (= (x222 x291) x162)) (and (=> (and (and (= (x10 x446) x613) (= (x221 (+ x383 32)) x701) (= (x221 (+ 32 x446)) x777) (= x217 (x480 (- x512 32))) (= (< x217 32) x343)) (not x430)) (and (=> (and (and (= (x480 (- x217 32)) x524) (= x35 (x221 (+ 32 x701))) (= (x221 (+ x777 32)) x23) (= (x10 x777) x200) (= x667 (< x524 32))) (not x343)) (and (=> (and (and (= x550 x524) (= x220 x23) (= x35 x677)) x667) x695) (=> (and (not x667) (and (= (< x33 32) x258) (= (x221 (+ x23 32)) x500) (= x269 (x10 x23)) (= (x221 (+ x35 32)) x3) (= (x480 (- x524 32)) x33))) (and (=> (and x258 (and (= x220 x500) (= x550 x33) (= x3 x677))) x695) (=> (not x258) x454))))) (=> (and x343 (and (= x550 x217) (= x777 x220) (= x677 x701))) x695))) (=> (and x430 (and (= x446 x220) (= x383 x677) (= x550 x512))) x695))) x654))
(assert (and (= (- x712 (x710 255 x712)) (* 256 (x52 x712 256))) (x540 x712 256) (x501 x712 256) (x348 x712 256) (=> (and (> 256 0) (< 0 x712)) (and (< (- x712 256) (* (x52 x712 256) 256)) (<= (* 256 (x52 x712 256)) x712))) (x447 x712 256)))
(assert (x656 255))
(assert (x738 32))
(assert (x42 x606 x203))
(assert (x176 x29))
(assert (x176 x628))
(assert (x176 x731))
(assert (x176 x446))
(assert (x657 x761))
(assert (x176 x235))
(assert (x176 x776))
(assert (x656 x83))
(assert (x176 x313))
(assert (and (x514 x151 1461501637330902918203684832716283019655932542976) (x207 x151 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x151 (+ (x344 x151 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x52 x151 1461501637330902918203684832716283019655932542976))))) (x485 x151 1461501637330902918203684832716283019655932542976)))
(assert (x656 32))
(assert (x176 x492))
(assert (x176 x178))
(assert (x494 (x710 (x340 (x384 (- x749 (x344 x749 32)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x471 255 (x384 (* (x384 (- 31 (x344 x749 32))) 8)))))))
(assert (= (and x210 (not x754)) x680))
(assert (x176 x791))
(assert (x176 x728))
(assert (= (and (not x430) x599) x357))
(assert (= 0 (x208 x617)))
(assert (x738 10))
(assert (x355 x445 x48))
(assert (= (x631 2514000705) (x766 2514000705)))
(assert (x176 x320))
(assert (= (x185 (x631 x378)) x378))
(assert (= x464 (=> (and (= (= 0 x106) x236) (= x106 (x52 x508 2)) (= x606 (x384 (- (ite x183 256 0) 1))) (= x159 (x710 1 x203)) (= (x221 (+ x106 31)) x346) (= (x221 (+ x337 x351)) x425) (= x265 (x221 (+ x337 32))) (= (x221 (+ 32 x108)) x351) (= x517 (x52 x346 32)) (= (x384 (* 32 x517)) x108) (= x508 (x710 x606 x203)) (= x183 (= 0 x159))) (and (=> (and (= x609 x557) x236) x578) (=> (and (= x300 (< 31 x106)) (not x236)) (and (=> (and (and (= (x341 (x766 9) 0) x519) (= x15 (x549 x519 1)) (= x396 (> x354 x428)) (= x315 (x122 x519)) (= x354 (x221 (+ x265 x106))) (= (x221 (+ x265 32)) x428)) x300) (and (=> (not x396) x575) (=> x396 x780))) (=> (and (not x300) (and (= (x52 x203 256) x458) (= x81 (x384 (* x458 256))) (= x557 x609))) x578)))))))
(assert (x176 x521))
(assert (x176 x197))
(assert (x176 x130))
(assert (x176 x238))
(assert (x176 x288))
(assert (= (x384 (ite (< (* 8 x158) 256) (x1 2 (* x158 8)) 0)) (x471 1 (* 8 x158))))
(assert (=> (>= 10000 x556) (= (x631 x556) (x766 x556))))
(assert (= x695 (=> (and (= x92 (x480 (- 32 x550))) (= (x687 x728 x358) x774) (= (x710 x535 x601) x358) (= x268 x442) (= (x480 (- x382 x268)) x417) (= x733 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x601)) (= x161 x382) (= (x43 x677) x535) (= (x384 (- (x471 1 (* x92 8)) 1)) x601) (= x382 (x221 (+ x512 x383))) (= (x710 x173 x733) x728) (= (x480 (- x417 32)) x174) (= x173 (x43 x220))) x102)))
(assert (= (x766 599290589) (x631 599290589)))
(assert (x176 x290))
(assert (x176 x465))
(assert (x657 x235))
(assert (= (x413 x446) 0))
(assert (= (and x775 x136) x716))
(assert (x176 x416))
(assert (= (x185 (x549 x100 1)) (+ (x185 x100) 1)))
(assert (x176 x35))
(assert (x176 x641))
(assert (x176 x682))
(assert (= (=> (and (and (not (< x373 599290589)) (= x227 x594) (= (ite (= x327 0) (x185 x557) (ite (= x327 32) 8 (ite (= 64 x327) x161 (x324 x327)))) x55) (= x292 false) (= x700 (x480 (- x436 1))) (not (= x373 1332530407)) x89 (= (x374 x8) x436) (= x29 (x421 x507)) (= x400 (ite (= x614 0) (x185 x557) (ite (= 32 x614) 8 (ite (= 64 x614) x161 (x324 x614))))) (= 1666326814 x373) (< x700 x249) (not (= x373 1525444543)) (= x614 (x221 (+ 32 x161))) (not (= 1117154408 x373)) (= x149 (ite (= 0 x455) (x185 x557) (ite (= 32 x455) 8 (ite (= 64 x455) x161 (x324 x455))))) (= (x234 (x631 x378) (x766 3) 0) x8) (= x89 (= x249 x594)) (= (x549 x140 1) x507) x586 (= (x341 (x766 2) 0) x127) (= x757 2) (< 0 x698) (> 1812160747 x373) (not (> 1117154408 x373)) (= 128 x26) (= (x314 x378) x360) (= x714 (ite (= x429 0) (x185 x557) (ite (= 32 x429) 8 (ite (= x429 64) x161 (x324 x429))))) (<= x436 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x144 x378) (= x455 (x221 (+ 64 x161))) (= (= x436 x360) x586) (= x698 (x119 (x631 x363))) (= x161 x327) (= 2 x12) (= (x384 (* x700 2)) x169) (= x635 2) (= (x221 (+ x161 96)) x429) (not (= x436 0)) (= x140 (x549 x127 x169)) (<= 0 x436)) (and (and (and (not (> 1117154408 x248)) (= x528 2) (= 2 x651) (= x688 (x549 x391 1)) (= x781 (x384 (* x399 2))) (> x249 x399) (not (= x248 1117154408)) (not (= x248 1332530407)) (= x134 x526) (= x744 x243) (= (x549 x75 x781) x391) (= (x234 (x631 x526) (x766 3) 0) x78) (< 0 x137) (= (x341 (x766 2) 0) x75) (= (x119 (x631 x363)) x137) (not (< x248 599290589)) x271 x311 (= (x314 x526) x370) (= (x480 (- x199 1)) x399) (= (= x50 x249) x311) (= x439 (x421 x688)) (< x248 1812160747) (not (= x199 0)) (= 1666326814 x248) (= false x484) (= x227 x50) (= x30 128) (= x271 (= x370 x199)) (= 2 x510) (not (= x248 1525444543)) (= (x374 x78) x199) (<= 0 x199) (<= x199 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (and (<= 0 x439) (= (= x278 x439) x240) (= x747 x276) x240 (= x544 (x52 x399 2)) (= x747 (x710 1461501637330902918203684832716283019655932542975 x439)) (= (x486 x544) x278) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x439)) (and (= x588 x238) (= x18 x166) (= (= x611 x238) x592) (= x640 (or x592 (not x748))) (= (not (= x166 x684)) x748) (= x276 x588) (= x684 x744) (= x402 x611)))) (and (>= x29 0) (= x597 (x52 x700 2)) (= (x486 x597) x175) (= x726 (x710 1461501637330902918203684832716283019655932542975 x29)) (= x726 x243) x192 (= (= x175 x29) x192) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x29)))) x640) x275))
(assert (= x13 (and x599 x430)))
(assert (x176 x673))
(assert (x176 x305))
(assert (x176 x216))
(assert (= x349 (and x396 x49)))
(assert (= (x185 (x766 1461501637330902918203684832716283019655932542976)) 1461501637330902918203684832716283019655932542976))
(assert (x176 x285))
(assert (x242 1461501637330902918203684832716283019655932542976))
(assert (x176 x121))
(assert (x656 x158))
(assert (x176 x33))
(assert (= x630 (and x753 (not x787))))
(assert (x176 x525))
(assert (x176 x30))
(assert (=> (<= x363 10000) (= (x631 x363) (x766 x363))))
(assert (x176 x712))
(assert (= (and x236 x261) x385))
(assert (x176 x354))
(assert (= (and x109 x191) x103))
(assert (x176 x342))
(assert (x176 x294))
(assert (x176 x256))
(assert (x657 x335))
(assert (= (=> (and (= x782 x268) (= x88 x425)) x138) x660))
(assert (= (x766 1461501637330902918203684832716283019655932542976) (x631 1461501637330902918203684832716283019655932542976)))
(assert (x176 x211))
(assert (x176 x370))
(assert (x176 x498))
(assert (x176 x705))
(assert (x176 x733))
(assert (x176 x436))
(assert (and (x514 x749 32) (x207 x749 32) (=> (> 32 0) (= x749 (+ (x344 x749 32) (* 32 (x52 x749 32))))) (x485 x749 32)))
(assert (x657 x644))
(assert (= (x766 1812160747) (x631 1812160747)))
(assert (x176 x726))
(assert (x657 1461501637330902918203684832716283019655932542975))
(assert (and (x514 x29 1461501637330902918203684832716283019655932542976) (x207 x29 1461501637330902918203684832716283019655932542976) (=> (> 1461501637330902918203684832716283019655932542976 0) (= x29 (+ (x344 x29 1461501637330902918203684832716283019655932542976) (* 1461501637330902918203684832716283019655932542976 (x52 x29 1461501637330902918203684832716283019655932542976))))) (x485 x29 1461501637330902918203684832716283019655932542976)))
(assert (x176 x662))
(assert (= 0 (x124 x211)))
(assert (x657 x162))
(assert (= x438 (and x306 x667)))
(assert (x176 x467))
(assert (x176 x173))
(assert (x176 x591))
(assert (= 1117154408 (x185 (x766 1117154408))))
(assert (x176 x161))
(assert (= x686 (=> (and (= x178 (x661 x435)) (= (not (< 224 x71)) x456)) (and x456 x372))))
(assert (= x330 (and (not x232) x389)))
(assert (x242 (ite (> 256 (x384 (* (x384 (- 31 (x344 x749 32))) 8))) (* (x1 2 (x384 (* 8 (x384 (- 31 (x344 x749 32)))))) 255) 0)))
(assert (x176 x626))
(assert (x176 x664))
(assert (x656 (x384 (- 31 (x344 x749 32)))))
(assert (x176 x153))
(assert (x176 x205))
(assert (x176 x200))
(assert (= 0 (x124 x759)))
(assert (x176 x452))
(assert (x176 x116))
(assert (let ((x145 (ite (> 256 (* 8 x86)) (x1 2 (* 8 x86)) 0))) (and (x514 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x207 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (=> (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 0) (= x145 (+ (x344 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x52 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (x485 x145 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x784 x288) 0))
(assert (x176 x697))
(assert (x176 x751))
(assert (x176 x55))
(assert (x176 x455))
(assert (x176 x19))
(assert (x176 x310))
(assert (x176 x458))
(assert (x738 x203))
(check-sat)
(exit)
