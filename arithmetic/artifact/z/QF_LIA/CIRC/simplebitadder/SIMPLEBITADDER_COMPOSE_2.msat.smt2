(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Mathsat benchmarks available from http://mathsat.itc.it

This benchmark was automatically translated into SMT-LIB format from
CVC format using CVC Lite
|)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun A_LSBRCK_0_RSBRCK_ () Bool)
(declare-fun a_LSBRCK_0_RSBRCK_ () Int)
(declare-fun A_LSBRCK_1_RSBRCK_ () Bool)
(declare-fun a_LSBRCK_1_RSBRCK_ () Int)
(declare-fun a () Int)
(declare-fun B_LSBRCK_0_RSBRCK_ () Bool)
(declare-fun b_LSBRCK_0_RSBRCK_ () Int)
(declare-fun B_LSBRCK_1_RSBRCK_ () Bool)
(declare-fun b_LSBRCK_1_RSBRCK_ () Int)
(declare-fun b () Int)
(declare-fun BITADDER_LSBRCK_0_RSBRCK__C1 () Bool)
(declare-fun BITADDER_LSBRCK_0_RSBRCK__C2 () Bool)
(declare-fun BITADDER_LSBRCK_0_RSBRCK__S1 () Bool)
(declare-fun BITADDER_LSBRCK_1_RSBRCK__C1 () Bool)
(declare-fun BITADDER_LSBRCK_1_RSBRCK__C2 () Bool)
(declare-fun BITADDER_LSBRCK_1_RSBRCK__S1 () Bool)
(declare-fun BITADDER_COUT_LSBRCK_0_RSBRCK_ () Bool)
(declare-fun C_LSBRCK_0_RSBRCK_ () Bool)
(declare-fun c_LSBRCK_0_RSBRCK_ () Int)
(declare-fun C_LSBRCK_1_RSBRCK_ () Bool)
(declare-fun c_LSBRCK_1_RSBRCK_ () Int)
(declare-fun CIN () Bool)
(declare-fun cin () Int)
(declare-fun c () Int)
(declare-fun COUT1 () Bool)
(declare-fun cout1 () Int)
(declare-fun COUT () Bool)
(declare-fun d () Int)
(assert (let ((?v_1 (not A_LSBRCK_0_RSBRCK_)) (?v_9 (not A_LSBRCK_1_RSBRCK_)) (?v_2 (not B_LSBRCK_0_RSBRCK_)) (?v_10 (not B_LSBRCK_1_RSBRCK_)) (?v_4 (not C_LSBRCK_0_RSBRCK_)) (?v_12 (not C_LSBRCK_1_RSBRCK_)) (?v_0 (not BITADDER_LSBRCK_0_RSBRCK__S1)) (?v_3 (not BITADDER_LSBRCK_0_RSBRCK__C1)) (?v_5 (not CIN)) (?v_6 (not BITADDER_LSBRCK_0_RSBRCK__C2)) (?v_7 (not BITADDER_COUT_LSBRCK_0_RSBRCK_)) (?v_8 (not BITADDER_LSBRCK_1_RSBRCK__S1)) (?v_11 (not BITADDER_LSBRCK_1_RSBRCK__C1)) (?v_13 (not BITADDER_LSBRCK_1_RSBRCK__C2)) (?v_14 (not COUT)) (?v_16 (not COUT1)) (?v_15 (>= (+ (+ a b) cin) 4)) (?v_17 (- (- (- d a) b) cin))) (let ((?v_19 (= ?v_17 0)) (?v_18 (= ?v_17 (- 4)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (>= a 0) (<= a 3)) (= (- (- a a_LSBRCK_0_RSBRCK_) (* 2 a_LSBRCK_1_RSBRCK_)) 0)) (>= a_LSBRCK_0_RSBRCK_ 0)) (<= a_LSBRCK_0_RSBRCK_ 1)) (or ?v_1 (= a_LSBRCK_0_RSBRCK_ 1))) (or A_LSBRCK_0_RSBRCK_ (= a_LSBRCK_0_RSBRCK_ 0))) (>= a_LSBRCK_1_RSBRCK_ 0)) (<= a_LSBRCK_1_RSBRCK_ 1)) (or ?v_9 (= a_LSBRCK_1_RSBRCK_ 1))) (or A_LSBRCK_1_RSBRCK_ (= a_LSBRCK_1_RSBRCK_ 0))) (>= b 0)) (<= b 3)) (= (- (- b b_LSBRCK_0_RSBRCK_) (* 2 b_LSBRCK_1_RSBRCK_)) 0)) (>= b_LSBRCK_0_RSBRCK_ 0)) (<= b_LSBRCK_0_RSBRCK_ 1)) (or ?v_2 (= b_LSBRCK_0_RSBRCK_ 1))) (or B_LSBRCK_0_RSBRCK_ (= b_LSBRCK_0_RSBRCK_ 0))) (>= b_LSBRCK_1_RSBRCK_ 0)) (<= b_LSBRCK_1_RSBRCK_ 1)) (or ?v_10 (= b_LSBRCK_1_RSBRCK_ 1))) (or B_LSBRCK_1_RSBRCK_ (= b_LSBRCK_1_RSBRCK_ 0))) (>= c 0)) (<= c 3)) (= (- (- c c_LSBRCK_0_RSBRCK_) (* 2 c_LSBRCK_1_RSBRCK_)) 0)) (>= c_LSBRCK_0_RSBRCK_ 0)) (<= c_LSBRCK_0_RSBRCK_ 1)) (or ?v_4 (= c_LSBRCK_0_RSBRCK_ 1))) (or C_LSBRCK_0_RSBRCK_ (= c_LSBRCK_0_RSBRCK_ 0))) (>= c_LSBRCK_1_RSBRCK_ 0)) (<= c_LSBRCK_1_RSBRCK_ 1)) (or ?v_12 (= c_LSBRCK_1_RSBRCK_ 1))) (or C_LSBRCK_1_RSBRCK_ (= c_LSBRCK_1_RSBRCK_ 0))) (or (or ?v_0 A_LSBRCK_0_RSBRCK_) B_LSBRCK_0_RSBRCK_)) (or (or ?v_0 ?v_1) ?v_2)) (or (or BITADDER_LSBRCK_0_RSBRCK__S1 ?v_1) B_LSBRCK_0_RSBRCK_)) (or (or BITADDER_LSBRCK_0_RSBRCK__S1 A_LSBRCK_0_RSBRCK_) ?v_2)) (or (or BITADDER_LSBRCK_0_RSBRCK__C1 ?v_1) ?v_2)) (or ?v_3 A_LSBRCK_0_RSBRCK_)) (or ?v_3 B_LSBRCK_0_RSBRCK_)) (or (or ?v_4 BITADDER_LSBRCK_0_RSBRCK__S1) CIN)) (or (or ?v_4 ?v_0) ?v_5)) (or (or C_LSBRCK_0_RSBRCK_ ?v_0) CIN)) (or (or C_LSBRCK_0_RSBRCK_ BITADDER_LSBRCK_0_RSBRCK__S1) ?v_5)) (or (or BITADDER_LSBRCK_0_RSBRCK__C2 ?v_0) ?v_5)) (or ?v_6 BITADDER_LSBRCK_0_RSBRCK__S1)) (or ?v_6 CIN)) (or (or ?v_7 BITADDER_LSBRCK_0_RSBRCK__C2) BITADDER_LSBRCK_0_RSBRCK__C1)) (or (or ?v_7 ?v_6) ?v_3)) (or (or BITADDER_COUT_LSBRCK_0_RSBRCK_ ?v_6) BITADDER_LSBRCK_0_RSBRCK__C1)) (or (or BITADDER_COUT_LSBRCK_0_RSBRCK_ BITADDER_LSBRCK_0_RSBRCK__C2) ?v_3)) (or (or ?v_8 A_LSBRCK_1_RSBRCK_) B_LSBRCK_1_RSBRCK_)) (or (or ?v_8 ?v_9) ?v_10)) (or (or BITADDER_LSBRCK_1_RSBRCK__S1 ?v_9) B_LSBRCK_1_RSBRCK_)) (or (or BITADDER_LSBRCK_1_RSBRCK__S1 A_LSBRCK_1_RSBRCK_) ?v_10)) (or (or BITADDER_LSBRCK_1_RSBRCK__C1 ?v_9) ?v_10)) (or ?v_11 A_LSBRCK_1_RSBRCK_)) (or ?v_11 B_LSBRCK_1_RSBRCK_)) (or (or ?v_12 BITADDER_LSBRCK_1_RSBRCK__S1) BITADDER_COUT_LSBRCK_0_RSBRCK_)) (or (or ?v_12 ?v_8) ?v_7)) (or (or C_LSBRCK_1_RSBRCK_ ?v_8) BITADDER_COUT_LSBRCK_0_RSBRCK_)) (or (or C_LSBRCK_1_RSBRCK_ BITADDER_LSBRCK_1_RSBRCK__S1) ?v_7)) (or (or BITADDER_LSBRCK_1_RSBRCK__C2 ?v_8) ?v_7)) (or ?v_13 BITADDER_LSBRCK_1_RSBRCK__S1)) (or ?v_13 BITADDER_COUT_LSBRCK_0_RSBRCK_)) (or (or ?v_14 BITADDER_LSBRCK_1_RSBRCK__C2) BITADDER_LSBRCK_1_RSBRCK__C1)) (or (or ?v_14 ?v_13) ?v_11)) (or (or COUT ?v_13) BITADDER_LSBRCK_1_RSBRCK__C1)) (or (or COUT BITADDER_LSBRCK_1_RSBRCK__C2) ?v_11)) (>= d 0)) (<= d 3)) (>= cin 0)) (<= cin 1)) (>= cout1 0)) (<= cout1 1)) (or ?v_5 (= cin 1))) (or CIN (= cin 0))) (or ?v_16 ?v_15)) (or COUT1 (not ?v_15))) (or ?v_16 ?v_18)) (or COUT1 ?v_19)) (or (not ?v_18) (not ?v_19))) ?v_5) (not (= d c))))))
(check-sat)
(exit)
