(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (<= (+ (* 27 x8_plus) (* (- 27) x8_minus) (* 45 x7_plus) (* (- 45) x7_minus) (* (- 10) x6_plus) (* 10 x6_minus) (* 22 x5_plus) (* (- 22) x5_minus) (* (- 42) x4_plus) (* 42 x4_minus) (* 20 x3_plus) (* (- 20) x3_minus) (* (- 22) x1_plus) (* 22 x1_minus) (* 46 x0_plus) (* (- 46) x0_minus) ) 10 ) )
(assert (<= (+ (* 10 x9_plus) (* (- 10) x9_minus) (* 46 x7_plus) (* (- 46) x7_minus) (* (- 52) x6_plus) (* 52 x6_minus) (* (- 13) x5_plus) (* 13 x5_minus) (* (- 11) x3_plus) (* 11 x3_minus) (* 23 x2_plus) (* (- 23) x2_minus) (* (- 29) x1_plus) (* 29 x1_minus) (* 2 x0_plus) (* (- 2) x0_minus) ) (- 14) ) )
(assert (<= (+ (* 29 x9_plus) (* (- 29) x9_minus) (* 19 x7_plus) (* (- 19) x7_minus) (* (- 41) x6_plus) (* 41 x6_minus) (* 32 x5_plus) (* (- 32) x5_minus) (* (- 39) x4_plus) (* 39 x4_minus) (* 21 x3_plus) (* (- 21) x3_minus) (* (- 32) x2_plus) (* 32 x2_minus) (* 58 x1_plus) (* (- 58) x1_minus) ) 28 ) )
(assert (<= (+ (* 38 x9_plus) (* (- 38) x9_minus) (* 15 x8_plus) (* (- 15) x8_minus) (* 22 x7_plus) (* (- 22) x7_minus) (* 24 x4_plus) (* (- 24) x4_minus) (* (- 23) x3_plus) (* 23 x3_minus) (* (- 48) x2_plus) (* 48 x2_minus) (* 34 x0_plus) (* (- 34) x0_minus) ) 46 ) )
(assert (<= (+ (* 20 x7_plus) (* (- 20) x7_minus) (* (- 9) x6_plus) (* 9 x6_minus) (* 8 x5_plus) (* (- 8) x5_minus) (* 2 x4_plus) (* (- 2) x4_minus) (* 42 x2_plus) (* (- 42) x2_minus) (* (- 8) x1_plus) (* 8 x1_minus) (* (- 11) x0_plus) (* 11 x0_minus) ) 12 ) )
(assert (<= (+ (* 20 x9_plus) (* (- 20) x9_minus) (* (- 2) x8_plus) (* 2 x8_minus) (* 46 x5_plus) (* (- 46) x5_minus) (* (- 44) x4_plus) (* 44 x4_minus) (* 13 x2_plus) (* (- 13) x2_minus) (* 3 x1_plus) (* (- 3) x1_minus) (* (- 13) x0_plus) (* 13 x0_minus) ) 28 ) )
(assert (<= (+ x9_plus (* (- 1) x9_minus) (* 17 x8_plus) (* (- 17) x8_minus) (* 36 x7_plus) (* (- 36) x7_minus) (* (- 68) x5_plus) (* 68 x5_minus) (* 9 x4_plus) (* (- 9) x4_minus) (* 38 x2_plus) (* (- 38) x2_minus) (* (- 26) x0_plus) (* 26 x0_minus) ) (- 42) ) )
(assert (<= (+ (* 87 x9_plus) (* (- 87) x9_minus) (* (- 31) x8_plus) (* 31 x8_minus) (* (- 8) x7_plus) (* 8 x7_minus) (* 38 x5_plus) (* (- 38) x5_minus) (* (- 39) x4_plus) (* 39 x4_minus) (* (- 72) x3_plus) (* 72 x3_minus) ) (- 30) ) )
(assert (<= (+ (* 28 x9_plus) (* (- 28) x9_minus) (* 36 x8_plus) (* (- 36) x8_minus) (* (- 41) x7_plus) (* 41 x7_minus) (* 49 x6_plus) (* (- 49) x6_minus) (* (- 21) x3_plus) (* 21 x3_minus) (* 107 x2_plus) (* (- 107) x2_minus) ) (- 1) ) )
(assert (<= (+ (* 37 x9_plus) (* (- 37) x9_minus) (* (- 10) x8_plus) (* 10 x8_minus) (* 18 x5_plus) (* (- 18) x5_minus) (* (- 39) x4_plus) (* 39 x4_minus) (* 57 x3_plus) (* (- 57) x3_minus) (* 53 x2_plus) (* (- 53) x2_minus) ) 11 ) )
(assert (<= (+ (* 30 x8_plus) (* (- 30) x8_minus) (* (- 33) x7_plus) (* 33 x7_minus) (* 56 x2_plus) (* (- 56) x2_minus) (* 14 x1_plus) (* (- 14) x1_minus) (* (- 11) x0_plus) (* 11 x0_minus) ) (- 30) ) )
(assert (>= (+ (* 4 x7_plus) (* (- 4) x7_minus) (* (- 41) x6_plus) (* 41 x6_minus) (* (- 47) x5_plus) (* 47 x5_minus) (* (- 24) x4_plus) (* 24 x4_minus) (* (- 35) x3_plus) (* 35 x3_minus) (* (- 16) x2_plus) (* 16 x2_minus) (* (- 24) x1_plus) (* 24 x1_minus) (* (- 2) x0_plus) (* 2 x0_minus) ) (- 40) ) )
(assert (>= (+ (* 46 x9_plus) (* (- 46) x9_minus) (* 37 x8_plus) (* (- 37) x8_minus) (* (- 41) x6_plus) (* 41 x6_minus) (* (- 26) x4_plus) (* 26 x4_minus) (* 34 x3_plus) (* (- 34) x3_minus) (* (- 47) x1_plus) (* 47 x1_minus) (* (- 47) x0_plus) (* 47 x0_minus) ) (- 1) ) )
(assert (>= (+ (* 24 x9_plus) (* (- 24) x9_minus) (* 5 x8_plus) (* (- 5) x8_minus) (* (- 44) x7_plus) (* 44 x7_minus) (* 19 x4_plus) (* (- 19) x4_minus) (* 22 x2_plus) (* (- 22) x2_minus) (* (- 8) x1_plus) (* 8 x1_minus) (* 29 x0_plus) (* (- 29) x0_minus) ) 44 ) )
(assert (>= (+ x9_plus (* (- 1) x9_minus) (* (- 17) x8_plus) (* 17 x8_minus) (* 41 x7_plus) (* (- 41) x7_minus) (* (- 21) x5_plus) (* 21 x5_minus) (* 16 x4_plus) (* (- 16) x4_minus) (* (- 31) x1_plus) (* 31 x1_minus) (* 29 x0_plus) (* (- 29) x0_minus) ) (- 25) ) )
(assert (>= (+ (* 36 x9_plus) (* (- 36) x9_minus) (* (- 11) x8_plus) (* 11 x8_minus) (* (- 9) x5_plus) (* 9 x5_minus) (* (- 22) x4_plus) (* 22 x4_minus) (* (- 2) x3_plus) (* 2 x3_minus) (* (- 52) x2_plus) (* 52 x2_minus) (* 14 x1_plus) (* (- 14) x1_minus) ) 4 ) )
(assert (>= (+ (* 93 x9_plus) (* (- 93) x9_minus) (* 30 x7_plus) (* (- 30) x7_minus) (* (- 43) x6_plus) (* 43 x6_minus) (* (- 51) x4_plus) (* 51 x4_minus) (* (- 17) x3_plus) (* 17 x3_minus) (* 38 x1_plus) (* (- 38) x1_minus) ) (- 13) ) )
(assert (>= (+ (* 10 x7_plus) (* (- 10) x7_minus) (* 26 x6_plus) (* (- 26) x6_minus) (* (- 10) x5_plus) (* 10 x5_minus) (* (- 46) x4_plus) (* 46 x4_minus) (* 8 x3_plus) (* (- 8) x3_minus) (* (- 41) x2_plus) (* 41 x2_minus) ) (- 43) ) )
(assert (>= (+ (* 20 x8_plus) (* (- 20) x8_minus) (* (- 9) x7_plus) (* 9 x7_minus) (* (- 17) x6_plus) (* 17 x6_minus) (* 53 x5_plus) (* (- 53) x5_minus) (* 42 x4_plus) (* (- 42) x4_minus) (* 19 x3_plus) (* (- 19) x3_minus) ) (- 38) ) )
(assert (>= (+ (* 97 x6_plus) (* (- 97) x6_minus) (* 42 x5_plus) (* (- 42) x5_minus) (* (- 3) x4_plus) (* 3 x4_minus) (* (- 24) x1_plus) (* 24 x1_minus) (* (- 47) x0_plus) (* 47 x0_minus) ) (- 27) ) )
(check-sat)
(exit)
