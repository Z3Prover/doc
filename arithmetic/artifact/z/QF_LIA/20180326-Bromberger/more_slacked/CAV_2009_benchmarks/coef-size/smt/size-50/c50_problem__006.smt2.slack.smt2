(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (<= (+ (* 55 x8_plus) (* (- 55) x8_minus) (* 5 x7_plus) (* (- 5) x7_minus) (* 29 x6_plus) (* (- 29) x6_minus) (* 30 x5_plus) (* (- 30) x5_minus) (* 14 x4_plus) (* (- 14) x4_minus) (* 38 x3_plus) (* (- 38) x3_minus) (* 15 x2_plus) (* (- 15) x2_minus) (* 9 x0_plus) (* (- 9) x0_minus) ) (- 29) ) )
(assert (<= (+ (* 27 x9_plus) (* (- 27) x9_minus) (* (- 7) x8_plus) (* 7 x8_minus) (* 21 x7_plus) (* (- 21) x7_minus) (* (- 6) x6_plus) (* 6 x6_minus) (* (- 3) x5_plus) (* 3 x5_minus) (* (- 23) x4_plus) (* 23 x4_minus) (* 24 x2_plus) (* (- 24) x2_minus) (* 17 x1_plus) (* (- 17) x1_minus) ) (- 48) ) )
(assert (<= (+ (* 34 x9_plus) (* (- 34) x9_minus) (* (- 12) x8_plus) (* 12 x8_minus) (* (- 16) x7_plus) (* 16 x7_minus) (* 28 x6_plus) (* (- 28) x6_minus) (* (- 38) x4_plus) (* 38 x4_minus) (* (- 27) x3_plus) (* 27 x3_minus) (* 5 x2_plus) (* (- 5) x2_minus) (* (- 5) x1_plus) (* 5 x1_minus) ) (- 20) ) )
(assert (<= (+ (* 27 x9_plus) (* (- 27) x9_minus) (* (- 33) x8_plus) (* 33 x8_minus) (* (- 17) x6_plus) (* 17 x6_minus) (* (- 17) x4_plus) (* 17 x4_minus) (* (- 5) x3_plus) (* 5 x3_minus) (* (- 18) x1_plus) (* 18 x1_minus) (* (- 12) x0_plus) (* 12 x0_minus) ) (- 17) ) )
(assert (<= (+ (* 11 x9_plus) (* (- 11) x9_minus) (* 72 x8_plus) (* (- 72) x8_minus) (* (- 19) x5_plus) (* 19 x5_minus) (* (- 29) x4_plus) (* 29 x4_minus) (* 28 x3_plus) (* (- 28) x3_minus) (* 8 x1_plus) (* (- 8) x1_minus) (* 6 x0_plus) (* (- 6) x0_minus) ) 48 ) )
(assert (<= (+ (* 21 x9_plus) (* (- 21) x9_minus) (* (- 31) x8_plus) (* 31 x8_minus) (* 3 x7_plus) (* (- 3) x7_minus) (* 45 x6_plus) (* (- 45) x6_minus) (* 21 x5_plus) (* (- 21) x5_minus) (* 13 x3_plus) (* (- 13) x3_minus) (* 13 x2_plus) (* (- 13) x2_minus) ) 3 ) )
(assert (<= (+ (* 34 x7_plus) (* (- 34) x7_minus) (* (- 18) x5_plus) (* 18 x5_minus) (* 51 x4_plus) (* (- 51) x4_minus) (* (- 36) x3_plus) (* 36 x3_minus) (* (- 75) x2_plus) (* 75 x2_minus) (* (- 14) x1_plus) (* 14 x1_minus) (* (- 2) x0_plus) (* 2 x0_minus) ) 0 ) )
(assert (<= (+ (* 15 x7_plus) (* (- 15) x7_minus) (* (- 23) x6_plus) (* 23 x6_minus) (* 23 x5_plus) (* (- 23) x5_minus) (* (- 20) x4_plus) (* 20 x4_minus) (* (- 11) x3_plus) (* 11 x3_minus) (* 26 x2_plus) (* (- 26) x2_minus) ) (- 20) ) )
(assert (<= (+ (* 10 x9_plus) (* (- 10) x9_minus) (* (- 8) x6_plus) (* 8 x6_minus) (* (- 35) x3_plus) (* 35 x3_minus) (* 43 x1_plus) (* (- 43) x1_minus) (* 53 x0_plus) (* (- 53) x0_minus) ) 32 ) )
(assert (<= (+ (* 4 x9_plus) (* (- 4) x9_minus) (* 3 x8_plus) (* (- 3) x8_minus) (* 56 x4_plus) (* (- 56) x4_minus) (* 52 x1_plus) (* (- 52) x1_minus) (* 43 x0_plus) (* (- 43) x0_minus) ) 14 ) )
(assert (<= (+ (* 39 x7_plus) (* (- 39) x7_minus) (* (- 11) x6_plus) (* 11 x6_minus) (* (- 12) x4_plus) (* 12 x4_minus) (* (- 10) x2_plus) (* 10 x2_minus) (* (- 41) x0_plus) (* 41 x0_minus) ) (- 42) ) )
(assert (>= (+ (* 36 x9_plus) (* (- 36) x9_minus) (* 49 x8_plus) (* (- 49) x8_minus) (* (- 45) x7_plus) (* 45 x7_minus) (* (- 39) x6_plus) (* 39 x6_minus) (* (- 15) x4_plus) (* 15 x4_minus) (* (- 16) x3_plus) (* 16 x3_minus) (* (- 4) x2_plus) (* 4 x2_minus) (* (- 9) x1_plus) (* 9 x1_minus) (* 21 x0_plus) (* (- 21) x0_minus) ) (- 34) ) )
(assert (>= (+ (* 22 x9_plus) (* (- 22) x9_minus) (* 2 x8_plus) (* (- 2) x8_minus) x7_plus (* (- 1) x7_minus) (* 9 x6_plus) (* (- 9) x6_minus) (* 16 x5_plus) (* (- 16) x5_minus) (* 11 x3_plus) (* (- 11) x3_minus) (* 21 x1_plus) (* (- 21) x1_minus) (* 24 x0_plus) (* (- 24) x0_minus) ) (- 2) ) )
(assert (>= (+ (* 6 x9_plus) (* (- 6) x9_minus) (* (- 44) x8_plus) (* 44 x8_minus) (* (- 42) x6_plus) (* 42 x6_minus) (* 10 x5_plus) (* (- 10) x5_minus) (* 11 x4_plus) (* (- 11) x4_minus) (* (- 11) x2_plus) (* 11 x2_minus) (* 24 x1_plus) (* (- 24) x1_minus) ) 23 ) )
(assert (>= (+ (* 28 x9_plus) (* (- 28) x9_minus) (* 12 x8_plus) (* (- 12) x8_minus) (* (- 28) x7_plus) (* 28 x7_minus) (* (- 44) x6_plus) (* 44 x6_minus) (* (- 7) x4_plus) (* 7 x4_minus) (* 35 x3_plus) (* (- 35) x3_minus) (* (- 16) x2_plus) (* 16 x2_minus) ) (- 41) ) )
(assert (>= (+ (* 12 x9_plus) (* (- 12) x9_minus) (* 3 x8_plus) (* (- 3) x8_minus) (* 40 x7_plus) (* (- 40) x7_minus) (* (- 35) x6_plus) (* 35 x6_minus) (* (- 7) x5_plus) (* 7 x5_minus) (* (- 16) x4_plus) (* 16 x4_minus) (* (- 24) x2_plus) (* 24 x2_minus) ) 20 ) )
(assert (>= (+ (* 38 x9_plus) (* (- 38) x9_minus) (* 8 x7_plus) (* (- 8) x7_minus) (* (- 31) x4_plus) (* 31 x4_minus) (* 28 x3_plus) (* (- 28) x3_minus) (* (- 11) x1_plus) (* 11 x1_minus) (* 31 x0_plus) (* (- 31) x0_minus) ) 33 ) )
(assert (>= (+ (* 12 x7_plus) (* (- 12) x7_minus) (* (- 8) x6_plus) (* 8 x6_minus) (* (- 28) x4_plus) (* 28 x4_minus) (* (- 54) x3_plus) (* 54 x3_minus) (* (- 42) x2_plus) (* 42 x2_minus) (* 3 x1_plus) (* (- 3) x1_minus) ) 32 ) )
(assert (>= (+ (* 11 x9_plus) (* (- 11) x9_minus) (* (- 12) x8_plus) (* 12 x8_minus) (* 3 x7_plus) (* (- 3) x7_minus) (* 64 x4_plus) (* (- 64) x4_minus) (* 9 x3_plus) (* (- 9) x3_minus) (* (- 38) x1_plus) (* 38 x1_minus) ) 38 ) )
(assert (>= (+ (* 79 x8_plus) (* (- 79) x8_minus) (* (- 35) x5_plus) (* 35 x5_minus) (* (- 15) x4_plus) (* 15 x4_minus) (* (- 9) x3_plus) (* 9 x3_minus) (* 34 x1_plus) (* (- 34) x1_minus) (* (- 55) x0_plus) (* 55 x0_minus) ) 35 ) )
(check-sat)
(exit)
