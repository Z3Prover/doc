(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= (- x0_plus x0_minus) (- 1) ) )
(assert (<= (+ (* 4 x4_plus) (* (- 4) x4_minus) (* 5 x2_plus) (* (- 5) x2_minus) (* 3 x1_plus) (* (- 3) x1_minus) (* (- 3) x0_plus) (* 3 x0_minus) ) 2 ) )
(assert (<= (+ x4_plus (* (- 1) x4_minus) (* 3 x3_plus) (* (- 3) x3_minus) (* (- 3) x2_plus) (* 3 x2_minus) x0_plus (* (- 1) x0_minus) ) (- 1) ) )
(assert (<= (+ x4_plus (* (- 1) x4_minus) (* (- 4) x2_plus) (* 4 x2_minus) (* (- 2) x0_plus) (* 2 x0_minus) ) (- 2) ) )
(assert (>= (+ (* 3 x2_plus) (* (- 3) x2_minus) (* (- 2) x0_plus) (* 2 x0_minus) ) 2 ) )
(check-sat)
(exit)
