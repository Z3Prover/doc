(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (<= (+ (* 27 x8_plus) (* (- 27) x8_minus) (* 27 x7_plus) (* (- 27) x7_minus) (* 21 x6_plus) (* (- 21) x6_minus) (* (- 28) x5_plus) (* 28 x5_minus) (* 31 x4_plus) (* (- 31) x4_minus) (* 7 x3_plus) (* (- 7) x3_minus) (* (- 46) x2_plus) (* 46 x2_minus) (* (- 15) x0_plus) (* 15 x0_minus) ) (- 22) ) )
(assert (<= (+ (* 20 x9_plus) (* (- 20) x9_minus) (* 19 x8_plus) (* (- 19) x8_minus) (* 11 x4_plus) (* (- 11) x4_minus) (* 30 x3_plus) (* (- 30) x3_minus) (* (- 35) x2_plus) (* 35 x2_minus) (* (- 20) x1_plus) (* 20 x1_minus) (* 49 x0_plus) (* (- 49) x0_minus) ) 23 ) )
(assert (<= (+ (* 13 x9_plus) (* (- 13) x9_minus) (* 11 x7_plus) (* (- 11) x7_minus) (* (- 6) x6_plus) (* 6 x6_minus) (* (- 45) x3_plus) (* 45 x3_minus) (* 33 x2_plus) (* (- 33) x2_minus) (* (- 34) x1_plus) (* 34 x1_minus) (* (- 19) x0_plus) (* 19 x0_minus) ) 21 ) )
(assert (<= (+ (* 4 x9_plus) (* (- 4) x9_minus) (* (- 38) x8_plus) (* 38 x8_minus) (* 17 x7_plus) (* (- 17) x7_minus) (* 26 x5_plus) (* (- 26) x5_minus) (* 13 x4_plus) (* (- 13) x4_minus) (* 5 x2_plus) (* (- 5) x2_minus) (* 6 x0_plus) (* (- 6) x0_minus) ) 4 ) )
(assert (<= (+ (* 35 x9_plus) (* (- 35) x9_minus) (* 32 x8_plus) (* (- 32) x8_minus) (* 17 x6_plus) (* (- 17) x6_minus) (* (- 13) x5_plus) (* 13 x5_minus) (* (- 13) x3_plus) (* 13 x3_minus) (* 35 x2_plus) (* (- 35) x2_minus) (* 2 x0_plus) (* (- 2) x0_minus) ) (- 25) ) )
(assert (<= (+ (* 5 x9_plus) (* (- 5) x9_minus) (* 21 x7_plus) (* (- 21) x7_minus) (* 24 x6_plus) (* (- 24) x6_minus) (* 37 x4_plus) (* (- 37) x4_minus) (* 47 x2_plus) (* (- 47) x2_minus) (* (- 17) x1_plus) (* 17 x1_minus) (* 13 x0_plus) (* (- 13) x0_minus) ) 17 ) )
(assert (<= (+ (* 5 x9_plus) (* (- 5) x9_minus) (* (- 12) x8_plus) (* 12 x8_minus) (* (- 25) x7_plus) (* 25 x7_minus) (* 83 x6_plus) (* (- 83) x6_minus) (* 29 x5_plus) (* (- 29) x5_minus) (* 12 x1_plus) (* (- 12) x1_minus) (* 21 x0_plus) (* (- 21) x0_minus) ) (- 28) ) )
(assert (<= (+ (* 26 x9_plus) (* (- 26) x9_minus) (* 36 x8_plus) (* (- 36) x8_minus) (* 34 x7_plus) (* (- 34) x7_minus) (* (- 9) x5_plus) (* 9 x5_minus) (* 2 x3_plus) (* (- 2) x3_minus) (* 17 x1_plus) (* (- 17) x1_minus) ) (- 5) ) )
(assert (<= (+ (* 52 x9_plus) (* (- 52) x9_minus) (* (- 32) x8_plus) (* 32 x8_minus) (* 50 x7_plus) (* (- 50) x7_minus) (* (- 31) x3_plus) (* 31 x3_minus) (* (- 34) x2_plus) (* 34 x2_minus) (* 45 x0_plus) (* (- 45) x0_minus) ) 39 ) )
(assert (>= (+ (* 3 x9_plus) (* (- 3) x9_minus) (* 26 x8_plus) (* (- 26) x8_minus) x6_plus (* (- 1) x6_minus) (* (- 30) x5_plus) (* 30 x5_minus) (* (- 20) x3_plus) (* 20 x3_minus) (* 59 x2_plus) (* (- 59) x2_minus) (* (- 2) x1_plus) (* 2 x1_minus) (* (- 14) x0_plus) (* 14 x0_minus) ) (- 24) ) )
(assert (>= (+ (* 35 x8_plus) (* (- 35) x8_minus) (* (- 15) x7_plus) (* 15 x7_minus) (* 3 x6_plus) (* (- 3) x6_minus) (* (- 5) x4_plus) (* 5 x4_minus) (* 16 x2_plus) (* (- 16) x2_minus) x1_plus (* (- 1) x1_minus) (* 26 x0_plus) (* (- 26) x0_minus) ) 4 ) )
(assert (>= (+ (* 30 x9_plus) (* (- 30) x9_minus) (* (- 33) x7_plus) (* 33 x7_minus) (* 32 x5_plus) (* (- 32) x5_minus) (* 72 x4_plus) (* (- 72) x4_minus) (* (- 31) x3_plus) (* 31 x3_minus) (* 12 x2_plus) (* (- 12) x2_minus) (* 45 x0_plus) (* (- 45) x0_minus) ) (- 34) ) )
(assert (>= (+ (* 31 x9_plus) (* (- 31) x9_minus) (* (- 4) x7_plus) (* 4 x7_minus) (* (- 32) x5_plus) (* 32 x5_minus) (* (- 27) x4_plus) (* 27 x4_minus) (* (- 35) x2_plus) (* 35 x2_minus) (* (- 31) x1_plus) (* 31 x1_minus) (* (- 7) x0_plus) (* 7 x0_minus) ) (- 20) ) )
(assert (>= (+ (* 13 x9_plus) (* (- 13) x9_minus) (* (- 1) x6_plus) x6_minus (* (- 19) x5_plus) (* 19 x5_minus) (* (- 25) x4_plus) (* 25 x4_minus) (* 23 x3_plus) (* (- 23) x3_minus) (* (- 21) x2_plus) (* 21 x2_minus) (* 27 x0_plus) (* (- 27) x0_minus) ) (- 18) ) )
(assert (>= (+ (* 56 x9_plus) (* (- 56) x9_minus) (* 5 x8_plus) (* (- 5) x8_minus) (* (- 47) x6_plus) (* 47 x6_minus) (* (- 26) x5_plus) (* 26 x5_minus) (* (- 4) x4_plus) (* 4 x4_minus) (* (- 18) x3_plus) (* 18 x3_minus) (* (- 27) x0_plus) (* 27 x0_minus) ) (- 20) ) )
(assert (>= (+ (* 38 x8_plus) (* (- 38) x8_minus) (* (- 30) x7_plus) (* 30 x7_minus) (* (- 2) x4_plus) (* 2 x4_minus) (* (- 39) x3_plus) (* 39 x3_minus) (* 35 x2_plus) (* (- 35) x2_minus) (* (- 26) x1_plus) (* 26 x1_minus) (* 3 x0_plus) (* (- 3) x0_minus) ) (- 34) ) )
(assert (>= (+ (* 29 x7_plus) (* (- 29) x7_minus) (* 30 x6_plus) (* (- 30) x6_minus) (* (- 3) x5_plus) (* 3 x5_minus) (* 22 x4_plus) (* (- 22) x4_minus) (* (- 22) x3_plus) (* 22 x3_minus) (* (- 58) x0_plus) (* 58 x0_minus) ) 6 ) )
(assert (>= (+ (* 33 x9_plus) (* (- 33) x9_minus) (* (- 37) x8_plus) (* 37 x8_minus) (* (- 16) x6_plus) (* 16 x6_minus) (* 17 x4_plus) (* (- 17) x4_minus) (* 29 x1_plus) (* (- 29) x1_minus) (* (- 54) x0_plus) (* 54 x0_minus) ) 27 ) )
(assert (>= (+ (* 3 x9_plus) (* (- 3) x9_minus) (* (- 59) x7_plus) (* 59 x7_minus) (* (- 7) x6_plus) (* 7 x6_minus) (* (- 33) x5_plus) (* 33 x5_minus) (* 48 x1_plus) (* (- 48) x1_minus) ) 37 ) )
(assert (>= (+ (* 23 x9_plus) (* (- 23) x9_minus) (* (- 77) x7_plus) (* 77 x7_minus) (* 16 x5_plus) (* (- 16) x5_minus) (* (- 37) x1_plus) (* 37 x1_minus) (* 26 x0_plus) (* (- 26) x0_minus) ) (- 37) ) )
(check-sat)
(exit)
