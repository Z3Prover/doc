(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (<= (+ (* 2 x9_plus) (* (- 2) x9_minus) (* (- 22) x8_plus) (* 22 x8_minus) (* (- 1) x6_plus) x6_minus (* (- 17) x5_plus) (* 17 x5_minus) (* 18 x4_plus) (* (- 18) x4_minus) (* (- 23) x3_plus) (* 23 x3_minus) (* 20 x1_plus) (* (- 20) x1_minus) (* 31 x0_plus) (* (- 31) x0_minus) ) 16 ) )
(assert (<= (+ (* 23 x8_plus) (* (- 23) x8_minus) (* 4 x7_plus) (* (- 4) x7_minus) (* 45 x6_plus) (* (- 45) x6_minus) x5_plus (* (- 1) x5_minus) (* (- 38) x3_plus) (* 38 x3_minus) (* 26 x2_plus) (* (- 26) x2_minus) (* (- 1) x0_plus) x0_minus ) 22 ) )
(assert (<= (+ (* 16 x9_plus) (* (- 16) x9_minus) (* 6 x6_plus) (* (- 6) x6_minus) (* 26 x5_plus) (* (- 26) x5_minus) (* 7 x4_plus) (* (- 7) x4_minus) (* (- 24) x3_plus) (* 24 x3_minus) (* 39 x2_plus) (* (- 39) x2_minus) (* (- 2) x0_plus) (* 2 x0_minus) ) 17 ) )
(assert (<= (+ (* 27 x9_plus) (* (- 27) x9_minus) (* (- 24) x8_plus) (* 24 x8_minus) (* 20 x5_plus) (* (- 20) x5_minus) (* 34 x3_plus) (* (- 34) x3_minus) (* (- 26) x2_plus) (* 26 x2_minus) x1_plus (* (- 1) x1_minus) (* (- 5) x0_plus) (* 5 x0_minus) ) 17 ) )
(assert (<= (+ (* 5 x9_plus) (* (- 5) x9_minus) (* (- 15) x7_plus) (* 15 x7_minus) (* (- 2) x6_plus) (* 2 x6_minus) (* (- 25) x5_plus) (* 25 x5_minus) (* 15 x3_plus) (* (- 15) x3_minus) (* (- 22) x1_plus) (* 22 x1_minus) (* 12 x0_plus) (* (- 12) x0_minus) ) 16 ) )
(assert (<= (+ (* 23 x9_plus) (* (- 23) x9_minus) (* 16 x8_plus) (* (- 16) x8_minus) (* 4 x6_plus) (* (- 4) x6_minus) (* 22 x5_plus) (* (- 22) x5_minus) (* (- 23) x4_plus) (* 23 x4_minus) (* 32 x1_plus) (* (- 32) x1_minus) ) 7 ) )
(assert (<= (+ (* 9 x9_plus) (* (- 9) x9_minus) (* 41 x6_plus) (* (- 41) x6_minus) (* (- 7) x4_plus) (* 7 x4_minus) (* 7 x2_plus) (* (- 7) x2_minus) (* (- 9) x0_plus) (* 9 x0_minus) ) 26 ) )
(assert (<= (+ (* 4 x9_plus) (* (- 4) x9_minus) (* (- 7) x8_plus) (* 7 x8_minus) (* (- 18) x2_plus) (* 18 x2_minus) (* 21 x1_plus) (* (- 21) x1_minus) (* 8 x0_plus) (* (- 8) x0_minus) ) 10 ) )
(assert (>= (+ (* 27 x9_plus) (* (- 27) x9_minus) (* 27 x8_plus) (* (- 27) x8_minus) (* (- 1) x7_plus) x7_minus (* 10 x6_plus) (* (- 10) x6_minus) (* 17 x4_plus) (* (- 17) x4_minus) (* 2 x2_plus) (* (- 2) x2_minus) (* 27 x1_plus) (* (- 27) x1_minus) (* (- 17) x0_plus) (* 17 x0_minus) ) (- 6) ) )
(assert (>= (+ (* 27 x9_plus) (* (- 27) x9_minus) (* (- 10) x8_plus) (* 10 x8_minus) (* (- 16) x6_plus) (* 16 x6_minus) (* (- 20) x5_plus) (* 20 x5_minus) (* 6 x4_plus) (* (- 6) x4_minus) (* (- 3) x3_plus) (* 3 x3_minus) (* 3 x2_plus) (* (- 3) x2_minus) (* 16 x0_plus) (* (- 16) x0_minus) ) (- 11) ) )
(assert (>= (+ (* 13 x9_plus) (* (- 13) x9_minus) (* (- 30) x8_plus) (* 30 x8_minus) (* 15 x7_plus) (* (- 15) x7_minus) (* 17 x3_plus) (* (- 17) x3_minus) (* 10 x1_plus) (* (- 10) x1_minus) (* 25 x0_plus) (* (- 25) x0_minus) ) (- 4) ) )
(assert (>= (+ (* 38 x8_plus) (* (- 38) x8_minus) (* 37 x5_plus) (* (- 37) x5_minus) (* (- 14) x4_plus) (* 14 x4_minus) (* 19 x2_plus) (* (- 19) x2_minus) (* 9 x1_plus) (* (- 9) x1_minus) (* (- 24) x0_plus) (* 24 x0_minus) ) 15 ) )
(assert (>= (+ (* 29 x8_plus) (* (- 29) x8_minus) (* 24 x6_plus) (* (- 24) x6_minus) (* (- 39) x5_plus) (* 39 x5_minus) (* (- 20) x4_plus) (* 20 x4_minus) (* (- 3) x3_plus) (* 3 x3_minus) (* (- 27) x0_plus) (* 27 x0_minus) ) (- 3) ) )
(assert (>= (+ (* 6 x9_plus) (* (- 6) x9_minus) (* (- 30) x6_plus) (* 30 x6_minus) (* (- 6) x3_plus) (* 6 x3_minus) (* 11 x2_plus) (* (- 11) x2_minus) (* 20 x1_plus) (* (- 20) x1_minus) (* 7 x0_plus) (* (- 7) x0_minus) ) (- 27) ) )
(assert (>= (+ (* 20 x9_plus) (* (- 20) x9_minus) (* (- 15) x6_plus) (* 15 x6_minus) (* (- 21) x5_plus) (* 21 x5_minus) (* (- 29) x4_plus) (* 29 x4_minus) (* (- 21) x3_plus) (* 21 x3_minus) (* 12 x1_plus) (* (- 12) x1_minus) ) 6 ) )
(assert (>= (+ (* 27 x8_plus) (* (- 27) x8_minus) (* (- 29) x6_plus) (* 29 x6_minus) (* 23 x5_plus) (* (- 23) x5_minus) (* 18 x3_plus) (* (- 18) x3_minus) (* 4 x2_plus) (* (- 4) x2_minus) (* (- 40) x0_plus) (* 40 x0_minus) ) 18 ) )
(assert (>= (+ (* 74 x6_plus) (* (- 74) x6_minus) (* 27 x4_plus) (* (- 27) x4_minus) (* (- 33) x3_plus) (* 33 x3_minus) (* (- 35) x2_plus) (* 35 x2_minus) (* (- 26) x1_plus) (* 26 x1_minus) ) 22 ) )
(assert (>= (+ (* 3 x9_plus) (* (- 3) x9_minus) (* 13 x6_plus) (* (- 13) x6_minus) (* (- 7) x5_plus) (* 7 x5_minus) (* (- 5) x4_plus) (* 5 x4_minus) (* 38 x0_plus) (* (- 38) x0_minus) ) (- 12) ) )
(assert (>= (+ (* 36 x9_plus) (* (- 36) x9_minus) (* 6 x5_plus) (* (- 6) x5_minus) (* 23 x2_plus) (* (- 23) x2_minus) (* (- 61) x1_plus) (* 61 x1_minus) ) 0 ) )
(assert (>= (+ (* 20 x5_plus) (* (- 20) x5_minus) (* 46 x3_plus) (* (- 46) x3_minus) (* (- 35) x2_plus) (* 35 x2_minus) (* 2 x0_plus) (* (- 2) x0_minus) ) 11 ) )
(check-sat)
(exit)
