(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (<= (+ (* 39 x9_plus) (* (- 39) x9_minus) (* 50 x7_plus) (* (- 50) x7_minus) (* 13 x6_plus) (* (- 13) x6_minus) (* (- 57) x5_plus) (* 57 x5_minus) (* (- 13) x4_plus) (* 13 x4_minus) (* 58 x3_plus) (* (- 58) x3_minus) (* 35 x1_plus) (* (- 35) x1_minus) (* 43 x0_plus) (* (- 43) x0_minus) ) (- 47) ) )
(assert (<= (+ (* 13 x9_plus) (* (- 13) x9_minus) (* 28 x8_plus) (* (- 28) x8_minus) (* (- 28) x5_plus) (* 28 x5_minus) (* 44 x4_plus) (* (- 44) x4_minus) (* (- 3) x3_plus) (* 3 x3_minus) (* 34 x2_plus) (* (- 34) x2_minus) (* (- 49) x1_plus) (* 49 x1_minus) (* (- 55) x0_plus) (* 55 x0_minus) ) 27 ) )
(assert (<= (+ (* 73 x7_plus) (* (- 73) x7_minus) (* 33 x6_plus) (* (- 33) x6_minus) (* (- 48) x5_plus) (* 48 x5_minus) (* 37 x4_plus) (* (- 37) x4_minus) (* 53 x3_plus) (* (- 53) x3_minus) (* 22 x2_plus) (* (- 22) x2_minus) (* 3 x1_plus) (* (- 3) x1_minus) (* 13 x0_plus) (* (- 13) x0_minus) ) 45 ) )
(assert (<= (+ (* 14 x9_plus) (* (- 14) x9_minus) (* (- 46) x7_plus) (* 46 x7_minus) (* 26 x6_plus) (* (- 26) x6_minus) (* (- 32) x5_plus) (* 32 x5_minus) (* 10 x4_plus) (* (- 10) x4_minus) (* (- 45) x3_plus) (* 45 x3_minus) (* (- 19) x1_plus) (* 19 x1_minus) (* 22 x0_plus) (* (- 22) x0_minus) ) (- 50) ) )
(assert (<= (+ (* 46 x9_plus) (* (- 46) x9_minus) (* 52 x8_plus) (* (- 52) x8_minus) (* (- 26) x6_plus) (* 26 x6_minus) (* (- 73) x5_plus) (* 73 x5_minus) (* (- 39) x4_plus) (* 39 x4_minus) (* 55 x2_plus) (* (- 55) x2_minus) (* (- 55) x0_plus) (* 55 x0_minus) ) (- 9) ) )
(assert (<= (+ (* 29 x9_plus) (* (- 29) x9_minus) (* 89 x7_plus) (* (- 89) x7_minus) (* (- 6) x6_plus) (* 6 x6_minus) (* 58 x5_plus) (* (- 58) x5_minus) (* 37 x4_plus) (* (- 37) x4_minus) (* 53 x3_plus) (* (- 53) x3_minus) (* (- 25) x2_plus) (* 25 x2_minus) ) 6 ) )
(assert (<= (+ (* 7 x8_plus) (* (- 7) x8_minus) (* 8 x7_plus) (* (- 8) x7_minus) (* 51 x6_plus) (* (- 51) x6_minus) (* (- 42) x4_plus) (* 42 x4_minus) (* (- 36) x3_plus) (* 36 x3_minus) (* 49 x2_plus) (* (- 49) x2_minus) (* 21 x1_plus) (* (- 21) x1_minus) ) 17 ) )
(assert (<= (+ (* 38 x9_plus) (* (- 38) x9_minus) (* (- 31) x7_plus) (* 31 x7_minus) (* (- 49) x6_plus) (* 49 x6_minus) (* 12 x5_plus) (* (- 12) x5_minus) (* (- 36) x4_plus) (* 36 x4_minus) (* 54 x3_plus) (* (- 54) x3_minus) ) (- 53) ) )
(assert (<= (+ (* 55 x9_plus) (* (- 55) x9_minus) (* (- 81) x8_plus) (* 81 x8_minus) (* (- 18) x7_plus) (* 18 x7_minus) (* 12 x6_plus) (* (- 12) x6_minus) (* (- 48) x5_plus) (* 48 x5_minus) (* 52 x2_plus) (* (- 52) x2_minus) ) (- 15) ) )
(assert (<= (+ (* 41 x9_plus) (* (- 41) x9_minus) (* (- 20) x5_plus) (* 20 x5_minus) (* (- 16) x4_plus) (* 16 x4_minus) (* 34 x3_plus) (* (- 34) x3_minus) (* (- 43) x2_plus) (* 43 x2_minus) (* (- 54) x0_plus) (* 54 x0_minus) ) 44 ) )
(assert (<= (+ (* 29 x9_plus) (* (- 29) x9_minus) (* 48 x8_plus) (* (- 48) x8_minus) (* 7 x7_plus) (* (- 7) x7_minus) (* 18 x6_plus) (* (- 18) x6_minus) (* 40 x5_plus) (* (- 40) x5_minus) (* (- 8) x3_plus) (* 8 x3_minus) ) 38 ) )
(assert (<= (+ (* 23 x8_plus) (* (- 23) x8_minus) (* 58 x7_plus) (* (- 58) x7_minus) (* 61 x5_plus) (* (- 61) x5_minus) (* (- 28) x1_plus) (* 28 x1_minus) (* 91 x0_plus) (* (- 91) x0_minus) ) 12 ) )
(assert (>= (+ (* 22 x9_plus) (* (- 22) x9_minus) (* 3 x8_plus) (* (- 3) x8_minus) (* (- 20) x7_plus) (* 20 x7_minus) (* (- 36) x6_plus) (* 36 x6_minus) (* (- 45) x5_plus) (* 45 x5_minus) (* (- 17) x4_plus) (* 17 x4_minus) (* (- 17) x3_plus) (* 17 x3_minus) (* (- 39) x2_plus) (* 39 x2_minus) ) (- 5) ) )
(assert (>= (+ (* 20 x9_plus) (* (- 20) x9_minus) (* (- 26) x8_plus) (* 26 x8_minus) (* 27 x7_plus) (* (- 27) x7_minus) (* 16 x6_plus) (* (- 16) x6_minus) (* (- 36) x5_plus) (* 36 x5_minus) (* 10 x4_plus) (* (- 10) x4_minus) (* (- 32) x3_plus) (* 32 x3_minus) (* (- 49) x1_plus) (* 49 x1_minus) ) 0 ) )
(assert (>= (+ (* 12 x7_plus) (* (- 12) x7_minus) (* 14 x6_plus) (* (- 14) x6_minus) (* (- 31) x5_plus) (* 31 x5_minus) (* (- 119) x4_plus) (* 119 x4_minus) (* (- 60) x3_plus) (* 60 x3_minus) (* 59 x2_plus) (* (- 59) x2_minus) (* 59 x1_plus) (* (- 59) x1_minus) ) (- 51) ) )
(assert (>= (+ (* 29 x7_plus) (* (- 29) x7_minus) (* (- 4) x6_plus) (* 4 x6_minus) (* (- 138) x5_plus) (* 138 x5_minus) (* (- 15) x3_plus) (* 15 x3_minus) (* (- 106) x2_plus) (* 106 x2_minus) (* (- 32) x1_plus) (* 32 x1_minus) (* (- 8) x0_plus) (* 8 x0_minus) ) 40 ) )
(assert (>= (+ (* 59 x9_plus) (* (- 59) x9_minus) (* (- 13) x8_plus) (* 13 x8_minus) (* 36 x7_plus) (* (- 36) x7_minus) (* 3 x6_plus) (* (- 3) x6_minus) (* 31 x4_plus) (* (- 31) x4_minus) (* (- 44) x3_plus) (* 44 x3_minus) ) (- 35) ) )
(assert (>= (+ (* 25 x8_plus) (* (- 25) x8_minus) (* 68 x5_plus) (* (- 68) x5_minus) (* 17 x4_plus) (* (- 17) x4_minus) (* 107 x3_plus) (* (- 107) x3_minus) (* (- 48) x2_plus) (* 48 x2_minus) (* (- 55) x0_plus) (* 55 x0_minus) ) 3 ) )
(assert (>= (+ (* 31 x9_plus) (* (- 31) x9_minus) (* 14 x7_plus) (* (- 14) x7_minus) (* (- 37) x5_plus) (* 37 x5_minus) (* 35 x2_plus) (* (- 35) x2_minus) (* (- 21) x1_plus) (* 21 x1_minus) (* 29 x0_plus) (* (- 29) x0_minus) ) (- 56) ) )
(assert (>= (+ (* 28 x9_plus) (* (- 28) x9_minus) (* (- 52) x4_plus) (* 52 x4_minus) (* (- 9) x0_plus) (* 9 x0_minus) ) 52 ) )
(check-sat)
(exit)
