(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (<= (+ (* 42 x8_plus) (* (- 42) x8_minus) (* 44 x7_plus) (* (- 44) x7_minus) (* 65 x6_plus) (* (- 65) x6_minus) (* (- 13) x5_plus) (* 13 x5_minus) (* (- 13) x4_plus) (* 13 x4_minus) (* (- 33) x2_plus) (* 33 x2_minus) (* (- 24) x0_plus) (* 24 x0_minus) ) (- 23) ) )
(assert (<= (+ (* 38 x9_plus) (* (- 38) x9_minus) (* 50 x6_plus) (* (- 50) x6_minus) (* (- 30) x4_plus) (* 30 x4_minus) (* 36 x3_plus) (* (- 36) x3_minus) (* 13 x1_plus) (* (- 13) x1_minus) (* (- 23) x0_plus) (* 23 x0_minus) ) (- 7) ) )
(assert (<= (+ (* 41 x7_plus) (* (- 41) x7_minus) (* 42 x6_plus) (* (- 42) x6_minus) (* 45 x3_plus) (* (- 45) x3_minus) (* 29 x2_plus) (* (- 29) x2_minus) (* 43 x1_plus) (* (- 43) x1_minus) (* (- 41) x0_plus) (* 41 x0_minus) ) (- 43) ) )
(assert (<= (+ (* 106 x7_plus) (* (- 106) x7_minus) (* 43 x6_plus) (* (- 43) x6_minus) (* 18 x4_plus) (* (- 18) x4_minus) (* 13 x3_plus) (* (- 13) x3_minus) (* 3 x2_plus) (* (- 3) x2_minus) (* (- 7) x1_plus) (* 7 x1_minus) ) (- 36) ) )
(assert (<= (+ (* 6 x9_plus) (* (- 6) x9_minus) (* 55 x7_plus) (* (- 55) x7_minus) (* 13 x6_plus) (* (- 13) x6_minus) (* 6 x4_plus) (* (- 6) x4_minus) (* 43 x2_plus) (* (- 43) x2_minus) (* (- 46) x1_plus) (* 46 x1_minus) ) 6 ) )
(assert (<= (+ (* 30 x9_plus) (* (- 30) x9_minus) (* 6 x8_plus) (* (- 6) x8_minus) (* (- 49) x7_plus) (* 49 x7_minus) (* (- 13) x6_plus) (* 13 x6_minus) (* 2 x4_plus) (* (- 2) x4_minus) (* (- 47) x2_plus) (* 47 x2_minus) ) 21 ) )
(assert (>= (+ (* 48 x8_plus) (* (- 48) x8_minus) (* 45 x7_plus) (* (- 45) x7_minus) (* 34 x6_plus) (* (- 34) x6_minus) (* (- 43) x4_plus) (* 43 x4_minus) (* (- 9) x3_plus) (* 9 x3_minus) (* (- 7) x2_plus) (* 7 x2_minus) (* (- 12) x1_plus) (* 12 x1_minus) (* 39 x0_plus) (* (- 39) x0_minus) ) 39 ) )
(assert (>= (+ (* 30 x9_plus) (* (- 30) x9_minus) (* 43 x8_plus) (* (- 43) x8_minus) (* 46 x7_plus) (* (- 46) x7_minus) (* (- 25) x6_plus) (* 25 x6_minus) (* (- 32) x3_plus) (* 32 x3_minus) (* (- 13) x1_plus) (* 13 x1_minus) (* (- 29) x0_plus) (* 29 x0_minus) ) 44 ) )
(assert (>= (+ (* 28 x9_plus) (* (- 28) x9_minus) (* (- 35) x8_plus) (* 35 x8_minus) (* 2 x5_plus) (* (- 2) x5_minus) (* 41 x4_plus) (* (- 41) x4_minus) (* (- 16) x3_plus) (* 16 x3_minus) (* 30 x2_plus) (* (- 30) x2_minus) (* (- 43) x0_plus) (* 43 x0_minus) ) 25 ) )
(assert (>= (+ (* 41 x9_plus) (* (- 41) x9_minus) (* (- 12) x8_plus) (* 12 x8_minus) (* 62 x7_plus) (* (- 62) x7_minus) (* 18 x6_plus) (* (- 18) x6_minus) (* (- 30) x4_plus) (* 30 x4_minus) (* 11 x3_plus) (* (- 11) x3_minus) (* (- 9) x0_plus) (* 9 x0_minus) ) 46 ) )
(assert (>= (+ (* 49 x9_plus) (* (- 49) x9_minus) (* 2 x8_plus) (* (- 2) x8_minus) (* (- 62) x7_plus) (* 62 x7_minus) (* (- 46) x6_plus) (* 46 x6_minus) (* (- 24) x3_plus) (* 24 x3_minus) (* (- 1) x2_plus) x2_minus ) (- 38) ) )
(assert (>= (+ (* 22 x9_plus) (* (- 22) x9_minus) (* 25 x7_plus) (* (- 25) x7_minus) (* (- 4) x6_plus) (* 4 x6_minus) (* 17 x2_plus) (* (- 17) x2_minus) (* (- 12) x1_plus) (* 12 x1_minus) (* 29 x0_plus) (* (- 29) x0_minus) ) (- 32) ) )
(assert (>= (+ (* 28 x7_plus) (* (- 28) x7_minus) (* (- 2) x6_plus) (* 2 x6_minus) (* 62 x4_plus) (* (- 62) x4_minus) (* (- 26) x3_plus) (* 26 x3_minus) (* (- 16) x2_plus) (* 16 x2_minus) (* 59 x1_plus) (* (- 59) x1_minus) ) (- 43) ) )
(assert (>= (+ (* 24 x9_plus) (* (- 24) x9_minus) (* 42 x5_plus) (* (- 42) x5_minus) (* (- 66) x3_plus) (* 66 x3_minus) (* (- 3) x2_plus) (* 3 x2_minus) (* 38 x1_plus) (* (- 38) x1_minus) (* (- 5) x0_plus) (* 5 x0_minus) ) (- 8) ) )
(assert (>= (+ (* 42 x9_plus) (* (- 42) x9_minus) (* 45 x8_plus) (* (- 45) x8_minus) (* (- 63) x6_plus) (* 63 x6_minus) (* 46 x5_plus) (* (- 46) x5_minus) (* (- 13) x2_plus) (* 13 x2_minus) (* 8 x0_plus) (* (- 8) x0_minus) ) (- 18) ) )
(assert (>= (+ (* 22 x9_plus) (* (- 22) x9_minus) (* (- 17) x8_plus) (* 17 x8_minus) (* (- 45) x7_plus) (* 45 x7_minus) (* (- 21) x6_plus) (* 21 x6_minus) (* (- 6) x5_plus) (* 6 x5_minus) (* (- 30) x1_plus) (* 30 x1_minus) ) (- 12) ) )
(assert (>= (+ (* 25 x8_plus) (* (- 25) x8_minus) (* 38 x7_plus) (* (- 38) x7_minus) (* 8 x5_plus) (* (- 8) x5_minus) (* 49 x2_plus) (* (- 49) x2_minus) (* (- 15) x1_plus) (* 15 x1_minus) (* (- 54) x0_plus) (* 54 x0_minus) ) (- 15) ) )
(assert (>= (+ (* 43 x9_plus) (* (- 43) x9_minus) (* 5 x8_plus) (* (- 5) x8_minus) (* 2 x6_plus) (* (- 2) x6_minus) (* (- 10) x4_plus) (* 10 x4_minus) (* 38 x1_plus) (* (- 38) x1_minus) (* (- 58) x0_plus) (* 58 x0_minus) ) 10 ) )
(assert (>= (+ (* 10 x9_plus) (* (- 10) x9_minus) (* (- 6) x5_plus) (* 6 x5_minus) (* (- 36) x4_plus) (* 36 x4_minus) (* (- 25) x2_plus) (* 25 x2_minus) (* (- 7) x1_plus) (* 7 x1_minus) (* 51 x0_plus) (* (- 51) x0_minus) ) 49 ) )
(assert (>= (+ (* 22 x9_plus) (* (- 22) x9_minus) (* (- 64) x8_plus) (* 64 x8_minus) (* 35 x7_plus) (* (- 35) x7_minus) (* (- 22) x5_plus) (* 22 x5_minus) (* 16 x3_plus) (* (- 16) x3_minus) ) (- 2) ) )
(check-sat)
(exit)
