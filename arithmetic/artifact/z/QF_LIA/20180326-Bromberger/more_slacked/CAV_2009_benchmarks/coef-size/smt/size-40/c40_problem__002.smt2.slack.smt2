(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (<= (+ (* 10 x9_plus) (* (- 10) x9_minus) (* (- 1) x8_plus) x8_minus (* (- 10) x7_plus) (* 10 x7_minus) x6_plus (* (- 1) x6_minus) (* (- 29) x5_plus) (* 29 x5_minus) (* (- 49) x2_plus) (* 49 x2_minus) (* (- 31) x1_plus) (* 31 x1_minus) (* 21 x0_plus) (* (- 21) x0_minus) ) (- 17) ) )
(assert (<= (+ (* 11 x7_plus) (* (- 11) x7_minus) (* 36 x6_plus) (* (- 36) x6_minus) (* 34 x5_plus) (* (- 34) x5_minus) (* 37 x4_plus) (* (- 37) x4_minus) (* 29 x3_plus) (* (- 29) x3_minus) (* 32 x2_plus) (* (- 32) x2_minus) (* 36 x1_plus) (* (- 36) x1_minus) (* (- 1) x0_plus) x0_minus ) (- 35) ) )
(assert (<= (+ (* 21 x8_plus) (* (- 21) x8_minus) (* (- 3) x7_plus) (* 3 x7_minus) (* (- 23) x6_plus) (* 23 x6_minus) (* (- 25) x5_plus) (* 25 x5_minus) (* 10 x2_plus) (* (- 10) x2_minus) (* 35 x1_plus) (* (- 35) x1_minus) (* 38 x0_plus) (* (- 38) x0_minus) ) 15 ) )
(assert (<= (+ (* 26 x9_plus) (* (- 26) x9_minus) (* (- 58) x8_plus) (* 58 x8_minus) (* 13 x7_plus) (* (- 13) x7_minus) x6_plus (* (- 1) x6_minus) (* 2 x5_plus) (* (- 2) x5_minus) (* (- 15) x4_plus) (* 15 x4_minus) (* 11 x1_plus) (* (- 11) x1_minus) ) (- 32) ) )
(assert (<= (+ (* 27 x9_plus) (* (- 27) x9_minus) (* (- 1) x8_plus) x8_minus (* 7 x7_plus) (* (- 7) x7_minus) (* 13 x6_plus) (* (- 13) x6_minus) (* (- 15) x3_plus) (* 15 x3_minus) (* (- 20) x2_plus) (* 20 x2_minus) (* 60 x1_plus) (* (- 60) x1_minus) ) (- 25) ) )
(assert (<= (+ (* 10 x8_plus) (* (- 10) x8_minus) (* 33 x7_plus) (* (- 33) x7_minus) (* 5 x6_plus) (* (- 5) x6_minus) (* 2 x5_plus) (* (- 2) x5_minus) (* 7 x4_plus) (* (- 7) x4_minus) (* (- 2) x2_plus) (* 2 x2_minus) (* (- 33) x0_plus) (* 33 x0_minus) ) (- 17) ) )
(assert (<= (+ (* 15 x8_plus) (* (- 15) x8_minus) (* 24 x7_plus) (* (- 24) x7_minus) (* 5 x6_plus) (* (- 5) x6_minus) (* (- 50) x5_plus) (* 50 x5_minus) (* 61 x4_plus) (* (- 61) x4_minus) (* 8 x3_plus) (* (- 8) x3_minus) (* 3 x1_plus) (* (- 3) x1_minus) ) (- 15) ) )
(assert (<= (+ (* 14 x9_plus) (* (- 14) x9_minus) (* 34 x8_plus) (* (- 34) x8_minus) (* (- 3) x6_plus) (* 3 x6_minus) (* (- 18) x5_plus) (* 18 x5_minus) (* (- 37) x4_plus) (* 37 x4_minus) (* 23 x1_plus) (* (- 23) x1_minus) (* 20 x0_plus) (* (- 20) x0_minus) ) 15 ) )
(assert (<= (+ (* 10 x9_plus) (* (- 10) x9_minus) (* 17 x8_plus) (* (- 17) x8_minus) (* 55 x6_plus) (* (- 55) x6_minus) (* 7 x4_plus) (* (- 7) x4_minus) (* 24 x3_plus) (* (- 24) x3_minus) (* (- 22) x0_plus) (* 22 x0_minus) ) 12 ) )
(assert (<= (+ (* 17 x8_plus) (* (- 17) x8_minus) (* 40 x7_plus) (* (- 40) x7_minus) (* 71 x6_plus) (* (- 71) x6_minus) (* (- 29) x4_plus) (* 29 x4_minus) (* (- 29) x3_plus) (* 29 x3_minus) (* 26 x1_plus) (* (- 26) x1_minus) ) (- 24) ) )
(assert (<= (+ x8_plus (* (- 1) x8_minus) (* (- 7) x7_plus) (* 7 x7_minus) (* (- 27) x4_plus) (* 27 x4_minus) (* 18 x2_plus) (* (- 18) x2_minus) (* 4 x0_plus) (* (- 4) x0_minus) ) (- 16) ) )
(assert (<= (+ (* 39 x8_plus) (* (- 39) x8_minus) (* (- 16) x5_plus) (* 16 x5_minus) (* 117 x3_plus) (* (- 117) x3_minus) (* (- 10) x2_plus) (* 10 x2_minus) (* 20 x0_plus) (* (- 20) x0_minus) ) 11 ) )
(assert (<= (+ (* 29 x9_plus) (* (- 29) x9_minus) (* (- 23) x7_plus) (* 23 x7_minus) (* 10 x6_plus) (* (- 10) x6_minus) (* (- 35) x3_plus) (* 35 x3_minus) (* 69 x0_plus) (* (- 69) x0_minus) ) 35 ) )
(assert (>= (+ (* 23 x9_plus) (* (- 23) x9_minus) (* (- 36) x8_plus) (* 36 x8_minus) (* (- 1) x7_plus) x7_minus (* 16 x5_plus) (* (- 16) x5_minus) (* 8 x4_plus) (* (- 8) x4_minus) (* 33 x2_plus) (* (- 33) x2_minus) (* (- 38) x0_plus) (* 38 x0_minus) ) 6 ) )
(assert (>= (+ (* 3 x9_plus) (* (- 3) x9_minus) (* 4 x7_plus) (* (- 4) x7_minus) (* 20 x6_plus) (* (- 20) x6_minus) (* (- 7) x5_plus) (* 7 x5_minus) (* (- 31) x4_plus) (* 31 x4_minus) (* (- 37) x3_plus) (* 37 x3_minus) (* 5 x2_plus) (* (- 5) x2_minus) ) 18 ) )
(assert (>= (+ (* 66 x9_plus) (* (- 66) x9_minus) (* (- 4) x7_plus) (* 4 x7_minus) (* (- 14) x6_plus) (* 14 x6_minus) (* (- 33) x5_plus) (* 33 x5_minus) (* (- 25) x2_plus) (* 25 x2_minus) (* 34 x1_plus) (* (- 34) x1_minus) (* (- 19) x0_plus) (* 19 x0_minus) ) 2 ) )
(assert (>= (+ (* 9 x9_plus) (* (- 9) x9_minus) (* 31 x6_plus) (* (- 31) x6_minus) (* (- 1) x4_plus) x4_minus (* (- 27) x3_plus) (* 27 x3_minus) (* (- 35) x2_plus) (* 35 x2_minus) (* (- 6) x1_plus) (* 6 x1_minus) ) (- 9) ) )
(assert (>= (+ (* 7 x9_plus) (* (- 7) x9_minus) (* 19 x8_plus) (* (- 19) x8_minus) (* (- 11) x7_plus) (* 11 x7_minus) (* 24 x5_plus) (* (- 24) x5_minus) (* 21 x3_plus) (* (- 21) x3_minus) (* (- 2) x2_plus) (* 2 x2_minus) ) 10 ) )
(assert (>= (+ (* 27 x6_plus) (* (- 27) x6_minus) (* (- 56) x4_plus) (* 56 x4_minus) (* 19 x3_plus) (* (- 19) x3_minus) (* 20 x1_plus) (* (- 20) x1_minus) (* 42 x0_plus) (* (- 42) x0_minus) ) (- 20) ) )
(assert (>= (+ (* 3 x6_plus) (* (- 3) x6_minus) (* (- 29) x5_plus) (* 29 x5_minus) (* 7 x4_plus) (* (- 7) x4_minus) (* (- 7) x2_plus) (* 7 x2_minus) (* 11 x1_plus) (* (- 11) x1_minus) ) 24 ) )
(check-sat)
(exit)
