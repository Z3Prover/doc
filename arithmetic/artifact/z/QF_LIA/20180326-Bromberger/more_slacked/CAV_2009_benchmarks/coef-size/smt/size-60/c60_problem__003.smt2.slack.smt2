(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (<= (+ (* 53 x9_plus) (* (- 53) x9_minus) (* (- 24) x8_plus) (* 24 x8_minus) (* (- 47) x7_plus) (* 47 x7_minus) (* 11 x6_plus) (* (- 11) x6_minus) (* 21 x4_plus) (* (- 21) x4_minus) (* 27 x3_plus) (* (- 27) x3_minus) (* 24 x2_plus) (* (- 24) x2_minus) (* (- 17) x1_plus) (* 17 x1_minus) (* 27 x0_plus) (* (- 27) x0_minus) ) (- 15) ) )
(assert (<= (+ (* 11 x9_plus) (* (- 11) x9_minus) (* 48 x8_plus) (* (- 48) x8_minus) (* (- 8) x6_plus) (* 8 x6_minus) (* 6 x5_plus) (* (- 6) x5_minus) (* 77 x4_plus) (* (- 77) x4_minus) (* (- 14) x3_plus) (* 14 x3_minus) (* (- 5) x2_plus) (* 5 x2_minus) (* (- 49) x0_plus) (* 49 x0_minus) ) 59 ) )
(assert (<= (+ (* 64 x9_plus) (* (- 64) x9_minus) (* (- 40) x8_plus) (* 40 x8_minus) (* (- 84) x6_plus) (* 84 x6_minus) (* 57 x4_plus) (* (- 57) x4_minus) (* (- 30) x3_plus) (* 30 x3_minus) (* 23 x2_plus) (* (- 23) x2_minus) (* 28 x0_plus) (* (- 28) x0_minus) ) (- 13) ) )
(assert (<= (+ (* 75 x7_plus) (* (- 75) x7_minus) (* (- 42) x6_plus) (* 42 x6_minus) (* (- 23) x4_plus) (* 23 x4_minus) (* 5 x3_plus) (* (- 5) x3_minus) (* 36 x2_plus) (* (- 36) x2_minus) (* (- 10) x1_plus) (* 10 x1_minus) (* (- 21) x0_plus) (* 21 x0_minus) ) (- 44) ) )
(assert (<= (+ (* 43 x9_plus) (* (- 43) x9_minus) (* 19 x8_plus) (* (- 19) x8_minus) (* (- 6) x6_plus) (* 6 x6_minus) (* (- 37) x5_plus) (* 37 x5_minus) (* (- 72) x4_plus) (* 72 x4_minus) (* 8 x3_plus) (* (- 8) x3_minus) (* 25 x2_plus) (* (- 25) x2_minus) ) (- 28) ) )
(assert (<= (+ (* 8 x9_plus) (* (- 8) x9_minus) (* 16 x7_plus) (* (- 16) x7_minus) (* 55 x6_plus) (* (- 55) x6_minus) (* (- 25) x5_plus) (* 25 x5_minus) (* (- 13) x4_plus) (* 13 x4_minus) (* 31 x2_plus) (* (- 31) x2_minus) (* (- 25) x0_plus) (* 25 x0_minus) ) (- 30) ) )
(assert (<= (+ (* 10 x9_plus) (* (- 10) x9_minus) (* (- 26) x8_plus) (* 26 x8_minus) (* 12 x7_plus) (* (- 12) x7_minus) (* 48 x3_plus) (* (- 48) x3_minus) (* 45 x2_plus) (* (- 45) x2_minus) (* 21 x1_plus) (* (- 21) x1_minus) ) 29 ) )
(assert (<= (+ (* 6 x8_plus) (* (- 6) x8_minus) (* (- 39) x5_plus) (* 39 x5_minus) (* (- 49) x4_plus) (* 49 x4_minus) (* (- 10) x3_plus) (* 10 x3_minus) (* 44 x2_plus) (* (- 44) x2_minus) (* 52 x0_plus) (* (- 52) x0_minus) ) 27 ) )
(assert (<= (+ (* 30 x9_plus) (* (- 30) x9_minus) (* (- 21) x6_plus) (* 21 x6_minus) (* 25 x5_plus) (* (- 25) x5_minus) (* 27 x2_plus) (* (- 27) x2_minus) (* 48 x1_plus) (* (- 48) x1_minus) (* 4 x0_plus) (* (- 4) x0_minus) ) (- 5) ) )
(assert (<= (+ (* 40 x9_plus) (* (- 40) x9_minus) (* (- 51) x7_plus) (* 51 x7_minus) (* (- 34) x6_plus) (* 34 x6_minus) (* 44 x4_plus) (* (- 44) x4_minus) (* 56 x2_plus) (* (- 56) x2_minus) (* (- 67) x1_plus) (* 67 x1_minus) ) (- 24) ) )
(assert (<= (+ (* 37 x9_plus) (* (- 37) x9_minus) (* (- 17) x8_plus) (* 17 x8_minus) (* (- 54) x4_plus) (* 54 x4_minus) (* 18 x1_plus) (* (- 18) x1_minus) (* (- 43) x0_plus) (* 43 x0_minus) ) (- 33) ) )
(assert (>= (+ (* 11 x9_plus) (* (- 11) x9_minus) (* (- 57) x8_plus) (* 57 x8_minus) (* (- 16) x7_plus) (* 16 x7_minus) (* 29 x6_plus) (* (- 29) x6_minus) (* (- 17) x4_plus) (* 17 x4_minus) (* (- 20) x3_plus) (* 20 x3_minus) (* 47 x2_plus) (* (- 47) x2_minus) (* 42 x0_plus) (* (- 42) x0_minus) ) 43 ) )
(assert (>= (+ (* 39 x8_plus) (* (- 39) x8_minus) (* 44 x7_plus) (* (- 44) x7_minus) (* (- 27) x6_plus) (* 27 x6_minus) (* (- 38) x4_plus) (* 38 x4_minus) (* 47 x3_plus) (* (- 47) x3_minus) (* 30 x2_plus) (* (- 30) x2_minus) (* (- 45) x1_plus) (* 45 x1_minus) ) 11 ) )
(assert (>= (+ (* 12 x9_plus) (* (- 12) x9_minus) (* (- 47) x6_plus) (* 47 x6_minus) (* (- 31) x5_plus) (* 31 x5_minus) (* (- 55) x4_plus) (* 55 x4_minus) (* (- 8) x3_plus) (* 8 x3_minus) (* (- 10) x2_plus) (* 10 x2_minus) (* (- 32) x0_plus) (* 32 x0_minus) ) (- 35) ) )
(assert (>= (+ (* 53 x7_plus) (* (- 53) x7_minus) (* 13 x6_plus) (* (- 13) x6_minus) (* (- 32) x4_plus) (* 32 x4_minus) (* (- 42) x3_plus) (* 42 x3_minus) (* 27 x2_plus) (* (- 27) x2_minus) (* (- 59) x1_plus) (* 59 x1_minus) ) 23 ) )
(assert (>= (+ (* 3 x9_plus) (* (- 3) x9_minus) (* (- 85) x6_plus) (* 85 x6_minus) (* (- 4) x5_plus) (* 4 x5_minus) (* (- 37) x3_plus) (* 37 x3_minus) (* (- 51) x2_plus) (* 51 x2_minus) (* (- 16) x1_plus) (* 16 x1_minus) ) 30 ) )
(assert (>= (+ (* 21 x8_plus) (* (- 21) x8_minus) (* 6 x4_plus) (* (- 6) x4_minus) (* (- 42) x3_plus) (* 42 x3_minus) (* (- 22) x2_plus) (* 22 x2_minus) (* (- 42) x1_plus) (* 42 x1_minus) (* 31 x0_plus) (* (- 31) x0_minus) ) (- 15) ) )
(assert (>= (+ (* 30 x9_plus) (* (- 30) x9_minus) (* (- 11) x8_plus) (* 11 x8_minus) (* (- 34) x6_plus) (* 34 x6_minus) (* (- 9) x4_plus) (* 9 x4_minus) (* (- 32) x2_plus) (* 32 x2_minus) (* 58 x1_plus) (* (- 58) x1_minus) ) (- 38) ) )
(assert (>= (+ (* 16 x8_plus) (* (- 16) x8_minus) (* 49 x4_plus) (* (- 49) x4_minus) (* 61 x3_plus) (* (- 61) x3_minus) (* (- 55) x2_plus) (* 55 x2_minus) (* 37 x1_plus) (* (- 37) x1_minus) (* 28 x0_plus) (* (- 28) x0_minus) ) 58 ) )
(assert (>= (+ (* 35 x8_plus) (* (- 35) x8_minus) (* (- 51) x7_plus) (* 51 x7_minus) (* (- 13) x5_plus) (* 13 x5_minus) (* (- 26) x1_plus) (* 26 x1_minus) (* 19 x0_plus) (* (- 19) x0_minus) ) (- 4) ) )
(check-sat)
(exit)
