(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (<= (+ (* 36 x7_plus) (* (- 36) x7_minus) (* (- 41) x6_plus) (* 41 x6_minus) (* (- 56) x5_plus) (* 56 x5_minus) (* (- 17) x4_plus) (* 17 x4_minus) (* 82 x3_plus) (* (- 82) x3_minus) (* 66 x2_plus) (* (- 66) x2_minus) (* 123 x1_plus) (* (- 123) x1_minus) (* 77 x0_plus) (* (- 77) x0_minus) ) (- 35) ) )
(assert (<= (+ (* 56 x8_plus) (* (- 56) x8_minus) (* (- 33) x7_plus) (* 33 x7_minus) (* (- 61) x6_plus) (* 61 x6_minus) (* 49 x3_plus) (* (- 49) x3_minus) (* (- 1) x2_plus) x2_minus (* 130 x1_plus) (* (- 130) x1_minus) (* 30 x0_plus) (* (- 30) x0_minus) ) 4 ) )
(assert (<= (+ (* 49 x9_plus) (* (- 49) x9_minus) (* 44 x8_plus) (* (- 44) x8_minus) (* (- 33) x6_plus) (* 33 x6_minus) (* (- 39) x5_plus) (* 39 x5_minus) (* (- 67) x4_plus) (* 67 x4_minus) (* 63 x2_plus) (* (- 63) x2_minus) (* (- 48) x1_plus) (* 48 x1_minus) ) 21 ) )
(assert (<= (+ (* 76 x9_plus) (* (- 76) x9_minus) (* 63 x8_plus) (* (- 63) x8_minus) (* 9 x7_plus) (* (- 9) x7_minus) (* (- 32) x4_plus) (* 32 x4_minus) (* (- 40) x3_plus) (* 40 x3_minus) (* (- 66) x2_plus) (* 66 x2_minus) (* (- 25) x0_plus) (* 25 x0_minus) ) (- 77) ) )
(assert (<= (+ (* 73 x9_plus) (* (- 73) x9_minus) (* 52 x8_plus) (* (- 52) x8_minus) (* (- 52) x7_plus) (* 52 x7_minus) (* (- 27) x6_plus) (* 27 x6_minus) (* 73 x5_plus) (* (- 73) x5_minus) (* (- 22) x4_plus) (* 22 x4_minus) (* 54 x0_plus) (* (- 54) x0_minus) ) 25 ) )
(assert (<= (+ (* 56 x8_plus) (* (- 56) x8_minus) (* (- 13) x7_plus) (* 13 x7_minus) (* (- 70) x6_plus) (* 70 x6_minus) (* 3 x5_plus) (* (- 3) x5_minus) (* (- 23) x4_plus) (* 23 x4_minus) (* 76 x2_plus) (* (- 76) x2_minus) (* (- 96) x1_plus) (* 96 x1_minus) ) (- 38) ) )
(assert (<= (+ (* 41 x8_plus) (* (- 41) x8_minus) (* 45 x7_plus) (* (- 45) x7_minus) (* (- 85) x6_plus) (* 85 x6_minus) (* 55 x5_plus) (* (- 55) x5_minus) (* 75 x3_plus) (* (- 75) x3_minus) ) 42 ) )
(assert (<= (+ (* 56 x9_plus) (* (- 56) x9_minus) (* (- 26) x8_plus) (* 26 x8_minus) (* 95 x6_plus) (* (- 95) x6_minus) (* 11 x3_plus) (* (- 11) x3_minus) (* (- 77) x1_plus) (* 77 x1_minus) ) 69 ) )
(assert (>= (+ (* 44 x9_plus) (* (- 44) x9_minus) (* (- 135) x8_plus) (* 135 x8_minus) (* 32 x6_plus) (* (- 32) x6_minus) (* 33 x5_plus) (* (- 33) x5_minus) (* (- 62) x4_plus) (* 62 x4_minus) (* (- 58) x3_plus) (* 58 x3_minus) (* (- 7) x2_plus) (* 7 x2_minus) (* (- 73) x0_plus) (* 73 x0_minus) ) (- 67) ) )
(assert (>= (+ (* 34 x9_plus) (* (- 34) x9_minus) (* (- 72) x7_plus) (* 72 x7_minus) (* 76 x6_plus) (* (- 76) x6_minus) (* 61 x5_plus) (* (- 61) x5_minus) (* 27 x4_plus) (* (- 27) x4_minus) (* (- 111) x1_plus) (* 111 x1_minus) (* 10 x0_plus) (* (- 10) x0_minus) ) 55 ) )
(assert (>= (+ (* 54 x9_plus) (* (- 54) x9_minus) (* (- 6) x7_plus) (* 6 x7_minus) (* 87 x6_plus) (* (- 87) x6_minus) (* 11 x4_plus) (* (- 11) x4_minus) (* 17 x2_plus) (* (- 17) x2_minus) (* (- 58) x1_plus) (* 58 x1_minus) (* (- 29) x0_plus) (* 29 x0_minus) ) (- 5) ) )
(assert (>= (+ (* 56 x8_plus) (* (- 56) x8_minus) (* (- 54) x7_plus) (* 54 x7_minus) (* (- 15) x5_plus) (* 15 x5_minus) (* (- 69) x4_plus) (* 69 x4_minus) (* (- 78) x2_plus) (* 78 x2_minus) (* (- 62) x1_plus) (* 62 x1_minus) (* 57 x0_plus) (* (- 57) x0_minus) ) 74 ) )
(assert (>= (+ (* 74 x9_plus) (* (- 74) x9_minus) (* (- 8) x7_plus) (* 8 x7_minus) (* (- 143) x4_plus) (* 143 x4_minus) (* (- 74) x3_plus) (* 74 x3_minus) (* (- 27) x2_plus) (* 27 x2_minus) (* 65 x1_plus) (* (- 65) x1_minus) (* 2 x0_plus) (* (- 2) x0_minus) ) (- 11) ) )
(assert (>= (+ (* 51 x9_plus) (* (- 51) x9_minus) (* (- 38) x8_plus) (* 38 x8_minus) (* (- 29) x7_plus) (* 29 x7_minus) (* 72 x6_plus) (* (- 72) x6_minus) (* 18 x5_plus) (* (- 18) x5_minus) (* (- 47) x4_plus) (* 47 x4_minus) (* (- 55) x3_plus) (* 55 x3_minus) ) (- 43) ) )
(assert (>= (+ (* 54 x9_plus) (* (- 54) x9_minus) (* 24 x8_plus) (* (- 24) x8_minus) (* 29 x5_plus) (* (- 29) x5_minus) (* (- 59) x4_plus) (* 59 x4_minus) (* (- 54) x3_plus) (* 54 x3_minus) (* 18 x0_plus) (* (- 18) x0_minus) ) 58 ) )
(assert (>= (+ (* 68 x9_plus) (* (- 68) x9_minus) (* 66 x8_plus) (* (- 66) x8_minus) (* (- 134) x7_plus) (* 134 x7_minus) (* 51 x6_plus) (* (- 51) x6_minus) (* 43 x5_plus) (* (- 43) x5_minus) x1_plus (* (- 1) x1_minus) ) (- 36) ) )
(assert (>= (+ (* 36 x9_plus) (* (- 36) x9_minus) (* (- 30) x7_plus) (* 30 x7_minus) (* (- 40) x6_plus) (* 40 x6_minus) (* (- 51) x4_plus) (* 51 x4_minus) (* 20 x3_plus) (* (- 20) x3_minus) (* 64 x1_plus) (* (- 64) x1_minus) ) (- 75) ) )
(assert (>= (+ (* 8 x9_plus) (* (- 8) x9_minus) (* 42 x8_plus) (* (- 42) x8_minus) (* (- 47) x7_plus) (* 47 x7_minus) (* (- 26) x4_plus) (* 26 x4_minus) (* (- 13) x3_plus) (* 13 x3_minus) (* (- 75) x0_plus) (* 75 x0_minus) ) 51 ) )
(assert (>= (+ (* 81 x9_plus) (* (- 81) x9_minus) (* (- 30) x8_plus) (* 30 x8_minus) (* (- 48) x6_plus) (* 48 x6_minus) (* (- 68) x3_plus) (* 68 x3_minus) (* (- 198) x2_plus) (* 198 x2_minus) ) 65 ) )
(assert (>= (+ (* 31 x9_plus) (* (- 31) x9_minus) (* (- 35) x7_plus) (* 35 x7_minus) (* (- 43) x1_plus) (* 43 x1_minus) (* (- 115) x0_plus) (* 115 x0_minus) ) 26 ) )
(check-sat)
(exit)
