(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Generated by: Martin Bromberger
Generated on: 2018-01-06
Application: This is a problem with unbounded directions and, therefore, a good test for the termination/completeness of branch-and-bound solvers.
Publications: M. Bromberger. A Reduction from Unbounded Linear Mixed Arithmetic Problems into Bounded Problems. (Work in progress.)

The benchmarks in this class are based on the problems from SMT-LIB/QF_LIA/CAV_2009 and SMT-LIB/QF_LIA/cut_lemmas.
I just replaced all variables x with x_+ - x_-, where x_+ and x_- are two new variables such that x_+, x_- >= 0.
This transformation is equisatisfiable.
The new variables and an unsatisfiable status guarantee that there are bounded and unbounded directions.
Target solver: CVC4 Mathsat SPASS-IQ YICES Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "crafted")
(set-info :status sat)
(declare-fun x9_plus () Int)
(declare-fun x9_minus () Int)
(declare-fun x8_plus () Int)
(declare-fun x8_minus () Int)
(declare-fun x7_plus () Int)
(declare-fun x7_minus () Int)
(declare-fun x6_plus () Int)
(declare-fun x6_minus () Int)
(declare-fun x5_plus () Int)
(declare-fun x5_minus () Int)
(declare-fun x4_plus () Int)
(declare-fun x4_minus () Int)
(declare-fun x2_plus () Int)
(declare-fun x2_minus () Int)
(declare-fun x1_plus () Int)
(declare-fun x1_minus () Int)
(declare-fun x3_plus () Int)
(declare-fun x3_minus () Int)
(declare-fun x0_plus () Int)
(declare-fun x0_minus () Int)
(assert (>= x9_plus 0))
(assert (>= x9_minus 0))
(assert (>= x8_plus 0))
(assert (>= x8_minus 0))
(assert (>= x7_plus 0))
(assert (>= x7_minus 0))
(assert (>= x6_plus 0))
(assert (>= x6_minus 0))
(assert (>= x5_plus 0))
(assert (>= x5_minus 0))
(assert (>= x4_plus 0))
(assert (>= x4_minus 0))
(assert (>= x2_plus 0))
(assert (>= x2_minus 0))
(assert (>= x1_plus 0))
(assert (>= x1_minus 0))
(assert (>= x3_plus 0))
(assert (>= x3_minus 0))
(assert (>= x0_plus 0))
(assert (>= x0_minus 0))
(assert (<= (+ (* 64 x9_plus) (* (- 64) x9_minus) (* 43 x8_plus) (* (- 43) x8_minus) (* 42 x7_plus) (* (- 42) x7_minus) (* (- 4) x6_plus) (* 4 x6_minus) (* 49 x5_plus) (* (- 49) x5_minus) (* (- 28) x4_plus) (* 28 x4_minus) (* 38 x2_plus) (* (- 38) x2_minus) (* 59 x1_plus) (* (- 59) x1_minus) ) 40 ) )
(assert (<= (+ (* 69 x9_plus) (* (- 69) x9_minus) (* 21 x8_plus) (* (- 21) x8_minus) (* (- 2) x7_plus) (* 2 x7_minus) (* 31 x6_plus) (* (- 31) x6_minus) (* 20 x5_plus) (* (- 20) x5_minus) (* (- 41) x3_plus) (* 41 x3_minus) (* (- 11) x0_plus) (* 11 x0_minus) ) 55 ) )
(assert (<= (+ (* 50 x9_plus) (* (- 50) x9_minus) (* (- 71) x6_plus) (* 71 x6_minus) (* 114 x5_plus) (* (- 114) x5_minus) (* 25 x4_plus) (* (- 25) x4_minus) (* (- 36) x3_plus) (* 36 x3_minus) (* (- 39) x2_plus) (* 39 x2_minus) (* (- 3) x0_plus) (* 3 x0_minus) ) 49 ) )
(assert (<= (+ (* 33 x8_plus) (* (- 33) x8_minus) (* 57 x7_plus) (* (- 57) x7_minus) (* 44 x6_plus) (* (- 44) x6_minus) (* 64 x5_plus) (* (- 64) x5_minus) (* 44 x4_plus) (* (- 44) x4_minus) (* 52 x3_plus) (* (- 52) x3_minus) (* (- 18) x1_plus) (* 18 x1_minus) ) 27 ) )
(assert (<= (+ (* 45 x9_plus) (* (- 45) x9_minus) (* (- 31) x8_plus) (* 31 x8_minus) (* (- 32) x7_plus) (* 32 x7_minus) (* (- 17) x6_plus) (* 17 x6_minus) x4_plus (* (- 1) x4_minus) (* (- 18) x3_plus) (* 18 x3_minus) (* (- 112) x2_plus) (* 112 x2_minus) ) (- 25) ) )
(assert (<= (+ (* 94 x8_plus) (* (- 94) x8_minus) (* (- 9) x7_plus) (* 9 x7_minus) (* (- 57) x6_plus) (* 57 x6_minus) (* (- 26) x5_plus) (* 26 x5_minus) (* 30 x3_plus) (* (- 30) x3_minus) (* 60 x2_plus) (* (- 60) x2_minus) ) (- 16) ) )
(assert (<= (+ (* 16 x8_plus) (* (- 16) x8_minus) (* (- 74) x7_plus) (* 74 x7_minus) (* (- 11) x6_plus) (* 11 x6_minus) (* 50 x4_plus) (* (- 50) x4_minus) (* (- 50) x3_plus) (* 50 x3_minus) (* (- 109) x0_plus) (* 109 x0_minus) ) (- 5) ) )
(assert (<= (+ (* 108 x9_plus) (* (- 108) x9_minus) (* 54 x7_plus) (* (- 54) x7_minus) (* 16 x5_plus) (* (- 16) x5_minus) (* (- 4) x3_plus) (* 4 x3_minus) (* 123 x2_plus) (* (- 123) x2_minus) ) 41 ) )
(assert (<= (+ (* 43 x8_plus) (* (- 43) x8_minus) (* (- 17) x6_plus) (* 17 x6_minus) (* 23 x5_plus) (* (- 23) x5_minus) (* 5 x2_plus) (* (- 5) x2_minus) (* (- 32) x0_plus) (* 32 x0_minus) ) 16 ) )
(assert (<= (+ (* 62 x9_plus) (* (- 62) x9_minus) (* 40 x6_plus) (* (- 40) x6_minus) (* (- 1) x5_plus) x5_minus (* (- 136) x2_plus) (* 136 x2_minus) (* (- 6) x1_plus) (* 6 x1_minus) ) 12 ) )
(assert (<= (+ (* 41 x9_plus) (* (- 41) x9_minus) (* (- 16) x8_plus) (* 16 x8_minus) (* (- 8) x6_plus) (* 8 x6_minus) (* 30 x3_plus) (* (- 30) x3_minus) (* (- 45) x2_plus) (* 45 x2_minus) ) 49 ) )
(assert (<= (+ (* 8 x9_plus) (* (- 8) x9_minus) (* 65 x8_plus) (* (- 65) x8_minus) (* 106 x5_plus) (* (- 106) x5_minus) (* 98 x4_plus) (* (- 98) x4_minus) ) 39 ) )
(assert (>= (+ (* 17 x8_plus) (* (- 17) x8_minus) (* (- 46) x7_plus) (* 46 x7_minus) (* (- 61) x6_plus) (* 61 x6_minus) (* 65 x5_plus) (* (- 65) x5_minus) (* 13 x4_plus) (* (- 13) x4_minus) (* (- 43) x3_plus) (* 43 x3_minus) (* 5 x1_plus) (* (- 5) x1_minus) (* 42 x0_plus) (* (- 42) x0_minus) ) (- 28) ) )
(assert (>= (+ (* 48 x9_plus) (* (- 48) x9_minus) (* (- 58) x8_plus) (* 58 x8_minus) (* (- 28) x7_plus) (* 28 x7_minus) (* (- 39) x5_plus) (* 39 x5_minus) (* (- 110) x4_plus) (* 110 x4_minus) (* 4 x3_plus) (* (- 4) x3_minus) (* 36 x2_plus) (* (- 36) x2_minus) ) 49 ) )
(assert (>= (+ (* 20 x9_plus) (* (- 20) x9_minus) (* (- 35) x8_plus) (* 35 x8_minus) (* (- 60) x7_plus) (* 60 x7_minus) (* 7 x5_plus) (* (- 7) x5_minus) (* 14 x4_plus) (* (- 14) x4_minus) (* 10 x3_plus) (* (- 10) x3_minus) (* 82 x0_plus) (* (- 82) x0_minus) ) 66 ) )
(assert (>= (+ (* 51 x7_plus) (* (- 51) x7_minus) (* (- 30) x6_plus) (* 30 x6_minus) (* 99 x5_plus) (* (- 99) x5_minus) (* (- 56) x4_plus) (* 56 x4_minus) (* 60 x3_plus) (* (- 60) x3_minus) (* 49 x2_plus) (* (- 49) x2_minus) (* 48 x1_plus) (* (- 48) x1_minus) ) 63 ) )
(assert (>= (+ (* 51 x9_plus) (* (- 51) x9_minus) (* 13 x8_plus) (* (- 13) x8_minus) (* 10 x7_plus) (* (- 10) x7_minus) (* 55 x4_plus) (* (- 55) x4_minus) (* (- 54) x3_plus) (* 54 x3_minus) (* (- 26) x0_plus) (* 26 x0_minus) ) 15 ) )
(assert (>= (+ (* 13 x8_plus) (* (- 13) x8_minus) (* (- 113) x7_plus) (* 113 x7_minus) (* (- 61) x5_plus) (* 61 x5_minus) (* 54 x4_plus) (* (- 54) x4_minus) (* (- 41) x3_plus) (* 41 x3_minus) (* 26 x0_plus) (* (- 26) x0_minus) ) (- 41) ) )
(assert (>= (+ (* 82 x8_plus) (* (- 82) x8_minus) (* (- 31) x7_plus) (* 31 x7_minus) (* (- 50) x6_plus) (* 50 x6_minus) (* (- 8) x3_plus) (* 8 x3_minus) (* 14 x1_plus) (* (- 14) x1_minus) (* (- 52) x0_plus) (* 52 x0_minus) ) (- 56) ) )
(assert (>= (+ (* 5 x6_plus) (* (- 5) x6_minus) (* (- 16) x5_plus) (* 16 x5_minus) (* 50 x4_plus) (* (- 50) x4_minus) (* 176 x1_plus) (* (- 176) x1_minus) (* (- 31) x0_plus) (* 31 x0_minus) ) (- 64) ) )
(check-sat)
(exit)
