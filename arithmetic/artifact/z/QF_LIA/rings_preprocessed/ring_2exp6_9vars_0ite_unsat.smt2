(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
Alberto Griggio

|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun v5 () Int)
(declare-fun v6 () Int)
(declare-fun v7 () Int)
(declare-fun v8 () Int)
(declare-fun s_0 () Int)
(declare-fun o_0 () Int)
(declare-fun s_1 () Int)
(declare-fun s_2 () Int)
(declare-fun o_1 () Int)
(declare-fun s_3 () Int)
(declare-fun s_4 () Int)
(declare-fun o_2 () Int)
(declare-fun s_5 () Int)
(declare-fun s_6 () Int)
(declare-fun o_3 () Int)
(declare-fun s_7 () Int)
(declare-fun o_4 () Int)
(declare-fun o_5 () Int)
(declare-fun o_6 () Int)
(declare-fun o_7 () Int)
(declare-fun s_8 () Int)
(declare-fun o_8 () Int)
(declare-fun s_9 () Int)
(declare-fun o_9 () Int)
(declare-fun s_10 () Int)
(declare-fun o_10 () Int)
(declare-fun s_11 () Int)
(declare-fun o_11 () Int)
(declare-fun s_12 () Int)
(declare-fun o_12 () Int)
(declare-fun s_13 () Int)
(declare-fun o_13 () Int)
(declare-fun s_14 () Int)
(declare-fun o_14 () Int)
(declare-fun s_15 () Int)
(declare-fun o_15 () Int)
(assert (let ((?v_77 (- o_3)) (?v_76 (- s_5)) (?v_15 (- s_6)) (?v_75 (- s_7)) (?v_19 (* v1 2)) (?v_72 (* v2 4)) (?v_71 (* v3 8)) (?v_70 (* v4 16)) (?v_69 (* v5 32)) (?v_68 (* v6 64)) (?v_67 (* v7 128)) (?v_29 (* v8 256)) (?v_24 (* v3 2)) (?v_60 (* v4 4)) (?v_59 (* v5 8)) (?v_52 (* v5 2)) (?v_14 (* v7 2)) (?v_45 (* v8 4))) (let ((?v_34 (+ (+ ?v_67 ?v_29) ?v_68)) (?v_18 (+ ?v_45 ?v_75)) (?v_17 (+ (+ (+ ?v_14 v6) ?v_15) ?v_76))) (let ((?v_16 (+ ?v_17 ?v_77)) (?v_13 (+ ?v_14 ?v_15)) (?v_0 (+ (* s_0 (- 32)) v1)) (?v_20 (* s_0 (- 64)))) (let ((?v_2 (+ (+ ?v_19 v0) ?v_20)) (?v_21 (* o_0 (- 64)))) (let ((?v_1 (+ ?v_2 ?v_21)) (?v_5 (* s_1 (- 16)))) (let ((?v_3 (+ ?v_5 v2)) (?v_4 (+ (* s_2 (- 8)) v3)) (?v_25 (* s_2 (- 16)))) (let ((?v_7 (+ (+ (+ ?v_24 v2) ?v_25) ?v_5)) (?v_26 (* o_1 (- 16)))) (let ((?v_6 (+ ?v_7 ?v_26)) (?v_10 (* s_3 (- 4)))) (let ((?v_8 (+ ?v_10 v4)) (?v_9 (+ (* s_4 (- 2)) v5)) (?v_12 (+ (+ (+ ?v_52 v4) (* s_4 (- 4))) ?v_10))) (let ((?v_11 (+ (* o_2 (- 4)) ?v_12)) (?v_30 (* s_7 (- 64)))) (let ((?v_23 (+ (+ (+ (+ (+ ?v_19 ?v_29) v0) ?v_30) ?v_20) ?v_21)) (?v_31 (* o_4 (- 64)))) (let ((?v_22 (+ ?v_23 ?v_31)) (?v_28 (+ (+ (+ (+ (+ (+ (+ (+ (+ ?v_60 ?v_59) ?v_24) v2) (* s_4 (- 16))) (* s_3 (- 16))) (* o_2 (- 16))) ?v_25) ?v_5) ?v_26))) (let ((?v_27 (+ (* o_5 (- 16)) ?v_28)) (?v_35 (* s_6 (- 64))) (?v_36 (* s_5 (- 64))) (?v_37 (* o_3 (- 64)))) (let ((?v_33 (+ (+ (+ (+ (+ (+ (+ (+ (+ ?v_34 ?v_19) v0) ?v_30) ?v_20) ?v_21) ?v_31) ?v_35) ?v_36) ?v_37)) (?v_38 (* o_6 (- 64)))) (let ((?v_32 (+ ?v_33 ?v_38)) (?v_40 (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ ?v_34 ?v_69) ?v_70) ?v_71) ?v_72) ?v_19) v0) ?v_30) ?v_20) ?v_21) ?v_31) ?v_35) ?v_36) ?v_37) ?v_38) (* s_4 (- 64))) (* s_3 (- 64))) (* o_2 (- 64))) (* s_2 (- 64))) (* s_1 (- 64))) (* o_1 (- 64))) (* o_5 (- 64))))) (let ((?v_39 (+ (* o_7 (- 64)) ?v_40)) (?v_41 (+ (* s_8 (- 32)) v8)) (?v_43 (+ (+ (* s_8 (- 64)) (* v8 2)) v7))) (let ((?v_42 (+ ?v_43 (* o_8 (- 64))))) (let ((?v_44 (+ (* s_9 (- 32)) ?v_42)) (?v_47 (+ (+ (+ (+ (+ (* s_8 (- 128)) ?v_45) ?v_14) (* o_8 (- 128))) (* s_9 (- 64))) v6))) (let ((?v_46 (+ ?v_47 (* o_9 (- 64))))) (let ((?v_48 (+ (* s_10 (- 32)) ?v_46)) (?v_50 (+ (+ (+ (+ (+ (+ (+ (+ (* s_8 (- 256)) (* v8 8)) (* v7 4)) (* o_8 (- 256))) (* s_9 (- 128))) (* v6 2)) (* o_9 (- 128))) (* s_10 (- 64))) v5))) (let ((?v_49 (+ ?v_50 (* o_10 (- 64))))) (let ((?v_51 (+ (* s_11 (- 32)) ?v_49)) (?v_54 (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (* s_8 (- 512)) (* v8 16)) (* v7 8)) (* o_8 (- 512))) (* s_9 (- 256))) (* v6 4)) (* o_9 (- 256))) (* s_10 (- 128))) ?v_52) (* o_10 (- 128))) (* s_11 (- 64))) v4))) (let ((?v_53 (+ ?v_54 (* o_11 (- 64))))) (let ((?v_55 (+ (* s_12 (- 32)) ?v_53)) (?v_57 (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (* s_8 (- 1024)) (* v8 32)) (* v7 16)) (* o_8 (- 1024))) (* s_9 (- 512))) (* v6 8)) (* o_9 (- 512))) (* s_10 (- 256))) (* v5 4)) (* o_10 (- 256))) (* s_11 (- 128))) (* v4 2)) (* o_11 (- 128))) (* s_12 (- 64))) v3))) (let ((?v_56 (+ ?v_57 (* o_12 (- 64))))) (let ((?v_58 (+ (* s_13 (- 32)) ?v_56)) (?v_62 (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (* s_8 (- 2048)) (* v8 64)) (* v7 32)) (* o_8 (- 2048))) (* s_9 (- 1024))) (* v6 16)) (* o_9 (- 1024))) (* s_10 (- 512))) ?v_59) (* o_10 (- 512))) (* s_11 (- 256))) ?v_60) (* o_11 (- 256))) (* s_12 (- 128))) ?v_24) (* o_12 (- 128))) (* s_13 (- 64))) v2))) (let ((?v_61 (+ ?v_62 (* o_13 (- 64))))) (let ((?v_63 (+ (* s_14 (- 32)) ?v_61)) (?v_65 (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (* s_8 (- 4096)) (* v8 128)) (* v7 64)) (* o_8 (- 4096))) (* s_9 (- 2048))) (* v6 32)) (* o_9 (- 2048))) (* s_10 (- 1024))) (* v5 16)) (* o_10 (- 1024))) (* s_11 (- 512))) (* v4 8)) (* o_11 (- 512))) (* s_12 (- 256))) (* v3 4)) (* o_12 (- 256))) (* s_13 (- 128))) (* v2 2)) (* o_13 (- 128))) (* s_14 (- 64))) v1))) (let ((?v_64 (+ ?v_65 (* o_14 (- 64))))) (let ((?v_66 (+ (* s_15 (- 32)) ?v_64)) (?v_74 (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (* s_8 (- 8192)) ?v_29) ?v_67) (* o_8 (- 8192))) (* s_9 (- 4096))) ?v_68) (* o_9 (- 4096))) (* s_10 (- 2048))) ?v_69) (* o_10 (- 2048))) (* s_11 (- 1024))) ?v_70) (* o_11 (- 1024))) (* s_12 (- 512))) ?v_71) (* o_12 (- 512))) (* s_13 (- 256))) ?v_72) (* o_13 (- 256))) (* s_14 (- 128))) ?v_19) (* o_14 (- 128))) (* s_15 (- 64))) v0))) (let ((?v_73 (+ (* o_15 (- 64)) ?v_74))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (<= 0 v0) (not (<= 64 v0))) (and (<= 0 v1) (not (<= 64 v1)))) (and (<= 0 v2) (not (<= 64 v2)))) (and (<= 0 v3) (not (<= 64 v3)))) (and (<= 0 v4) (not (<= 64 v4)))) (and (<= 0 v5) (not (<= 64 v5)))) (and (<= 0 v6) (not (<= 64 v6)))) (and (<= 0 v7) (not (<= 64 v7)))) (and (<= 0 v8) (not (<= 64 v8)))) (and (not (<= 2 s_0)) (<= 0 s_0))) (and (<= 0 ?v_0) (not (<= 32 ?v_0)))) (= (<= 1 s_0) (not (<= v1 32)))) (and (<= 0 o_0) (<= o_0 1))) (and (<= 0 ?v_1) (not (<= 64 ?v_1)))) (= (not (<= ?v_2 64)) (= o_0 1))) (and (not (<= 4 s_1)) (<= 0 s_1))) (and (<= 0 ?v_3) (not (<= 16 ?v_3)))) (= (<= 1 s_1) (not (<= v2 16)))) (and (not (<= 8 s_2)) (<= 0 s_2))) (and (<= 0 ?v_4) (not (<= 8 ?v_4)))) (= (<= 1 s_2) (not (<= v3 8)))) (and (<= 0 o_1) (<= o_1 1))) (and (<= 0 ?v_6) (not (<= 16 ?v_6)))) (= (not (<= ?v_7 16)) (= o_1 1))) (and (not (<= 16 s_3)) (<= 0 s_3))) (and (<= 0 ?v_8) (not (<= 4 ?v_8)))) (= (<= 1 s_3) (not (<= v4 4)))) (and (not (<= 32 s_4)) (<= 0 s_4))) (and (<= 0 ?v_9) (not (<= 2 ?v_9)))) (= (<= 1 s_4) (not (<= v5 2)))) (and (<= 0 o_2) (<= o_2 1))) (and (<= 0 ?v_11) (not (<= 4 ?v_11)))) (= (not (<= ?v_12 4)) (= o_2 1))) (and (not (<= 64 s_5)) (<= 0 s_5))) (and (<= s_5 v6) (not (<= 1 (- v6 s_5))))) (= (<= 1 s_5) (not (<= v6 1)))) (and (not (<= 128 s_6)) (<= 0 s_6))) (and (<= 0 ?v_13) (not (<= 1 ?v_13)))) (= (<= 1 s_6) (not (<= v7 0)))) (and (<= 0 o_3) (<= o_3 1))) (and (<= 0 ?v_16) (not (<= 1 ?v_16)))) (= (not (<= ?v_17 1)) (= o_3 1))) (and (not (<= 256 s_7)) (<= 0 s_7))) (and (<= 0 ?v_18) (not (<= 1 ?v_18)))) (= (<= 1 s_7) (not (<= v8 0)))) (and (<= 0 o_4) (<= o_4 1))) (and (<= 0 ?v_22) (not (<= 64 ?v_22)))) (= (not (<= ?v_23 64)) (= o_4 1))) (and (<= 0 o_5) (<= o_5 1))) (and (<= 0 ?v_27) (not (<= 16 ?v_27)))) (= (not (<= ?v_28 16)) (= o_5 1))) (and (<= 0 o_6) (<= o_6 1))) (and (<= 0 ?v_32) (not (<= 64 ?v_32)))) (= (not (<= ?v_33 64)) (= o_6 1))) (and (<= 0 o_7) (<= o_7 1))) (and (<= 0 ?v_39) (not (<= 64 ?v_39)))) (= (not (<= ?v_40 64)) (= o_7 1))) (and (not (<= 2 s_8)) (<= 0 s_8))) (and (<= 0 ?v_41) (not (<= 32 ?v_41)))) (= (<= 1 s_8) (not (<= v8 32)))) (and (<= 0 o_8) (<= o_8 1))) (and (<= 0 ?v_42) (not (<= 64 ?v_42)))) (= (not (<= ?v_43 64)) (= o_8 1))) (and (not (<= 2 s_9)) (<= 0 s_9))) (and (<= 0 ?v_44) (not (<= 32 ?v_44)))) (= (<= 1 s_9) (not (<= ?v_42 32)))) (and (<= 0 o_9) (<= o_9 1))) (and (<= 0 ?v_46) (not (<= 64 ?v_46)))) (= (not (<= ?v_47 64)) (= o_9 1))) (and (not (<= 2 s_10)) (<= 0 s_10))) (and (<= 0 ?v_48) (not (<= 32 ?v_48)))) (= (<= 1 s_10) (not (<= ?v_46 32)))) (and (<= 0 o_10) (<= o_10 1))) (and (<= 0 ?v_49) (not (<= 64 ?v_49)))) (= (not (<= ?v_50 64)) (= o_10 1))) (and (not (<= 2 s_11)) (<= 0 s_11))) (and (<= 0 ?v_51) (not (<= 32 ?v_51)))) (= (<= 1 s_11) (not (<= ?v_49 32)))) (and (<= 0 o_11) (<= o_11 1))) (and (<= 0 ?v_53) (not (<= 64 ?v_53)))) (= (not (<= ?v_54 64)) (= o_11 1))) (and (not (<= 2 s_12)) (<= 0 s_12))) (and (<= 0 ?v_55) (not (<= 32 ?v_55)))) (= (<= 1 s_12) (not (<= ?v_53 32)))) (and (<= 0 o_12) (<= o_12 1))) (and (<= 0 ?v_56) (not (<= 64 ?v_56)))) (= (not (<= ?v_57 64)) (= o_12 1))) (and (not (<= 2 s_13)) (<= 0 s_13))) (and (<= 0 ?v_58) (not (<= 32 ?v_58)))) (= (<= 1 s_13) (not (<= ?v_56 32)))) (and (<= 0 o_13) (<= o_13 1))) (and (<= 0 ?v_61) (not (<= 64 ?v_61)))) (= (not (<= ?v_62 64)) (= o_13 1))) (and (not (<= 2 s_14)) (<= 0 s_14))) (and (<= 0 ?v_63) (not (<= 32 ?v_63)))) (= (<= 1 s_14) (not (<= ?v_61 32)))) (and (<= 0 o_14) (<= o_14 1))) (and (<= 0 ?v_64) (not (<= 64 ?v_64)))) (= (not (<= ?v_65 64)) (= o_14 1))) (and (not (<= 2 s_15)) (<= 0 s_15))) (and (<= 0 ?v_66) (not (<= 32 ?v_66)))) (= (<= 1 s_15) (not (<= ?v_64 32)))) (and (<= 0 o_15) (<= o_15 1))) (and (<= 0 ?v_73) (not (<= 64 ?v_73)))) (= (not (<= ?v_74 64)) (= o_15 1))) (not (= (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (* o_8 128) (* s_8 128)) (* s_9 64)) (* o_9 64)) (* s_10 32)) (* o_10 32)) (* s_11 16)) (* o_11 16)) (* s_12 8)) (* o_12 8)) (* s_13 4)) (* o_13 4)) (* s_14 2)) (* o_14 2)) s_15) o_15) ?v_75) (- s_0)) (- o_0)) (- o_4)) ?v_15) ?v_76) ?v_77) (- o_6)) (- s_4)) (- s_3)) (- o_2)) (- s_2)) (- s_1)) (- o_1)) (- o_5)) (- o_7)) 0)))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
