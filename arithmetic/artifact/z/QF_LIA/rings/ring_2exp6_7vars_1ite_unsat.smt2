(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
show equivalence of the following terms:
((64 * v6 + (1 * v0 + 2 * v1)) + ((4 * v2 + 8 * v3) + (16 * v4 + 32 * v5)))

v0 + 2 * (v1 + 2 * (v2 + 2 * (v3 + 2 * (v4 + 2 * (v5 + 2 * (v6))))))

in arithmetic modulo 2exp6
STATUS: unsat

generated by: Alberto Griggio <alberto.griggio@disi.unitn.it>
|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun v5 () Int)
(declare-fun v6 () Int)
(declare-fun s_0 () Int)
(declare-fun o_0 () Int)
(declare-fun s_1 () Int)
(declare-fun s_2 () Int)
(declare-fun o_1 () Int)
(declare-fun s_3 () Int)
(declare-fun s_4 () Int)
(declare-fun o_2 () Int)
(declare-fun s_5 () Int)
(declare-fun o_3 () Int)
(declare-fun o_4 () Int)
(declare-fun o_5 () Int)
(declare-fun o_6 () Int)
(declare-fun s_7 () Int)
(declare-fun o_7 () Int)
(declare-fun s_8 () Int)
(declare-fun o_8 () Int)
(declare-fun s_9 () Int)
(declare-fun o_9 () Int)
(declare-fun s_10 () Int)
(declare-fun o_10 () Int)
(declare-fun s_11 () Int)
(declare-fun o_11 () Int)
(assert (let ((?v_0 (* v6 2))) (let ((?v_6 (< ?v_0 64)) (?v_7 (< ?v_0 128))) (let ((?v_28 (+ (ite ?v_6 ?v_0 (ite ?v_7 (- ?v_0 64) (- ?v_0 128))) v5))) (let ((?v_29 (- ?v_28 (* o_6 64))) (?v_40 (* v5 32))) (let ((?v_41 (- ?v_40 (* s_4 64))) (?v_42 (* v4 16))) (let ((?v_43 (- ?v_42 (* s_3 64)))) (let ((?v_38 (+ ?v_41 ?v_43))) (let ((?v_39 (- ?v_38 (* o_2 64))) (?v_46 (* v3 8))) (let ((?v_47 (- ?v_46 (* s_2 64))) (?v_48 (* v2 4))) (let ((?v_49 (- ?v_48 (* s_1 64)))) (let ((?v_44 (+ ?v_47 ?v_49))) (let ((?v_45 (- ?v_44 (* o_1 64)))) (let ((?v_32 (+ ?v_39 ?v_45))) (let ((?v_33 (- ?v_32 (* o_4 64))) (?v_36 (* v6 64))) (let ((?v_37 (- ?v_36 (* s_5 64))) (?v_52 (* v1 2))) (let ((?v_53 (- ?v_52 (* s_0 64)))) (let ((?v_50 (+ ?v_53 v0))) (let ((?v_51 (- ?v_50 (* o_0 64)))) (let ((?v_34 (+ ?v_37 ?v_51))) (let ((?v_35 (- ?v_34 (* o_3 64)))) (let ((?v_30 (+ ?v_33 ?v_35))) (let ((?v_31 (- ?v_30 (* o_5 64))) (?v_23 (* 4 v6))) (let ((?v_26 (- (+ (ite ?v_6 ?v_23 (ite ?v_7 (- ?v_23 128) (- ?v_23 256))) (* 2 v5)) (* 128 o_6)))) (let ((?v_27 (- ?v_26 (* s_7 64)))) (let ((?v_24 (+ ?v_27 v4))) (let ((?v_25 (- ?v_24 (* o_7 64))) (?v_18 (* 8 v6))) (let ((?v_21 (- (+ (- (- (+ (ite ?v_6 ?v_18 (ite ?v_7 (- ?v_18 256) (- ?v_18 512))) (* 4 v5)) (* 256 o_6)) (* 128 s_7)) (* 2 v4)) (* 128 o_7)))) (let ((?v_22 (- ?v_21 (* s_8 64)))) (let ((?v_19 (+ ?v_22 v3))) (let ((?v_20 (- ?v_19 (* o_8 64))) (?v_13 (* 16 v6))) (let ((?v_16 (- (+ (- (- (+ (- (- (+ (ite ?v_6 ?v_13 (ite ?v_7 (- ?v_13 512) (- ?v_13 1024))) (* 8 v5)) (* 512 o_6)) (* 256 s_7)) (* 4 v4)) (* 256 o_7)) (* 128 s_8)) (* 2 v3)) (* 128 o_8)))) (let ((?v_17 (- ?v_16 (* s_9 64)))) (let ((?v_14 (+ ?v_17 v2))) (let ((?v_15 (- ?v_14 (* o_9 64))) (?v_8 (* 32 v6))) (let ((?v_11 (- (+ (- (- (+ (- (- (+ (- (- (+ (ite ?v_6 ?v_8 (ite ?v_7 (- ?v_8 1024) (- ?v_8 2048))) (* 16 v5)) (* 1024 o_6)) (* 512 s_7)) (* 8 v4)) (* 512 o_7)) (* 256 s_8)) (* 4 v3)) (* 256 o_8)) (* 128 s_9)) (* 2 v2)) (* 128 o_9)))) (let ((?v_12 (- ?v_11 (* s_10 64)))) (let ((?v_9 (+ ?v_12 v1))) (let ((?v_10 (- ?v_9 (* o_10 64))) (?v_1 (* 64 v6))) (let ((?v_4 (- (+ (- (- (+ (- (- (+ (- (- (+ (- (- (+ (ite ?v_6 ?v_1 (ite ?v_7 (- ?v_1 2048) (- ?v_1 4096))) (* 32 v5)) (* 2048 o_6)) (* 1024 s_7)) (* 16 v4)) (* 1024 o_7)) (* 512 s_8)) (* 8 v3)) (* 512 o_8)) (* 256 s_9)) (* 4 v2)) (* 256 o_9)) (* 128 s_10)) (* 2 v1)) (* 128 o_10)))) (let ((?v_5 (- ?v_4 (* s_11 64)))) (let ((?v_2 (+ ?v_5 v0))) (let ((?v_3 (- ?v_2 (* o_11 64)))) (and (not (= ?v_3 ?v_31)) (and (= (> ?v_2 64) (= o_11 1)) (and (and (< ?v_3 64) (<= 0 ?v_3)) (and (and (<= o_11 1) (<= 0 o_11)) (and (= (> ?v_4 64) (>= s_11 1)) (and (and (< ?v_5 64) (<= 0 ?v_5)) (and (and (< s_11 2) (<= 0 s_11)) (and (= (> ?v_9 64) (= o_10 1)) (and (and (< ?v_10 64) (<= 0 ?v_10)) (and (and (<= o_10 1) (<= 0 o_10)) (and (= (> ?v_11 64) (>= s_10 1)) (and (and (< ?v_12 64) (<= 0 ?v_12)) (and (and (< s_10 2) (<= 0 s_10)) (and (= (> ?v_14 64) (= o_9 1)) (and (and (< ?v_15 64) (<= 0 ?v_15)) (and (and (<= o_9 1) (<= 0 o_9)) (and (= (> ?v_16 64) (>= s_9 1)) (and (and (< ?v_17 64) (<= 0 ?v_17)) (and (and (< s_9 2) (<= 0 s_9)) (and (= (> ?v_19 64) (= o_8 1)) (and (and (< ?v_20 64) (<= 0 ?v_20)) (and (and (<= o_8 1) (<= 0 o_8)) (and (= (> ?v_21 64) (>= s_8 1)) (and (and (< ?v_22 64) (<= 0 ?v_22)) (and (and (< s_8 2) (<= 0 s_8)) (and (= (> ?v_24 64) (= o_7 1)) (and (and (< ?v_25 64) (<= 0 ?v_25)) (and (and (<= o_7 1) (<= 0 o_7)) (and (= (> ?v_26 64) (>= s_7 1)) (and (and (< ?v_27 64) (<= 0 ?v_27)) (and (and (< s_7 2) (<= 0 s_7)) (and (= (> ?v_28 64) (= o_6 1)) (and (and (< ?v_29 64) (<= 0 ?v_29)) (and (and (<= o_6 1) (<= 0 o_6)) (and (= (> ?v_30 64) (= o_5 1)) (and (and (< ?v_31 64) (<= 0 ?v_31)) (and (and (<= o_5 1) (<= 0 o_5)) (and (= (> ?v_32 64) (= o_4 1)) (and (and (< ?v_33 64) (<= 0 ?v_33)) (and (and (<= o_4 1) (<= 0 o_4)) (and (= (> ?v_34 64) (= o_3 1)) (and (and (< ?v_35 64) (<= 0 ?v_35)) (and (and (<= o_3 1) (<= 0 o_3)) (and (= (> ?v_36 64) (>= s_5 1)) (and (and (< ?v_37 64) (<= 0 ?v_37)) (and (and (< s_5 64) (<= 0 s_5)) (and (= (> ?v_38 64) (= o_2 1)) (and (and (< ?v_39 64) (<= 0 ?v_39)) (and (and (<= o_2 1) (<= 0 o_2)) (and (= (> ?v_40 64) (>= s_4 1)) (and (and (< ?v_41 64) (<= 0 ?v_41)) (and (and (< s_4 32) (<= 0 s_4)) (and (= (> ?v_42 64) (>= s_3 1)) (and (and (< ?v_43 64) (<= 0 ?v_43)) (and (and (< s_3 16) (<= 0 s_3)) (and (= (> ?v_44 64) (= o_1 1)) (and (and (< ?v_45 64) (<= 0 ?v_45)) (and (and (<= o_1 1) (<= 0 o_1)) (and (= (> ?v_46 64) (>= s_2 1)) (and (and (< ?v_47 64) (<= 0 ?v_47)) (and (and (< s_2 8) (<= 0 s_2)) (and (= (> ?v_48 64) (>= s_1 1)) (and (and (< ?v_49 64) (<= 0 ?v_49)) (and (and (< s_1 4) (<= 0 s_1)) (and (= (> ?v_50 64) (= o_0 1)) (and (and (< ?v_51 64) (<= 0 ?v_51)) (and (and (<= o_0 1) (<= 0 o_0)) (and (= (> ?v_52 64) (>= s_0 1)) (and (and (< ?v_53 64) (<= 0 ?v_53)) (and (and (< s_0 2) (<= 0 s_0)) (and (and (< v6 64) (>= v6 0)) (and (and (< v5 64) (>= v5 0)) (and (and (< v4 64) (>= v4 0)) (and (and (< v3 64) (>= v3 0)) (and (and (< v2 64) (>= v2 0)) (and (and (< v1 64) (>= v1 0)) (and (< v0 64) (>= v0 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
