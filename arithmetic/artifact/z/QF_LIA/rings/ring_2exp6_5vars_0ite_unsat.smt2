(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
show equivalence of the following terms:
((4 * v2 + 8 * v3) + (16 * v4 + (1 * v0 + 2 * v1)))

v0 + 2 * (v1 + 2 * (v2 + 2 * (v3 + 2 * (v4))))

in arithmetic modulo 2exp6
STATUS: unsat

generated by: Alberto Griggio <alberto.griggio@disi.unitn.it>
|)
(set-info :category "crafted")
(set-info :status unsat)
(declare-fun v0 () Int)
(declare-fun v1 () Int)
(declare-fun v2 () Int)
(declare-fun v3 () Int)
(declare-fun v4 () Int)
(declare-fun s_0 () Int)
(declare-fun o_0 () Int)
(declare-fun s_1 () Int)
(declare-fun s_2 () Int)
(declare-fun o_1 () Int)
(declare-fun s_3 () Int)
(declare-fun o_2 () Int)
(declare-fun o_3 () Int)
(declare-fun s_4 () Int)
(declare-fun o_4 () Int)
(declare-fun s_5 () Int)
(declare-fun o_5 () Int)
(declare-fun s_6 () Int)
(declare-fun o_6 () Int)
(declare-fun s_7 () Int)
(declare-fun o_7 () Int)
(assert (let ((?v_14 (* v4 2))) (let ((?v_15 (- ?v_14 (* s_4 64)))) (let ((?v_12 (+ ?v_15 v3))) (let ((?v_13 (- ?v_12 (* o_4 64))) (?v_20 (* v4 16))) (let ((?v_21 (- ?v_20 (* s_3 64))) (?v_30 (* v1 2))) (let ((?v_31 (- ?v_30 (* s_0 64)))) (let ((?v_28 (+ ?v_31 v0))) (let ((?v_29 (- ?v_28 (* o_0 64)))) (let ((?v_18 (+ ?v_21 ?v_29))) (let ((?v_19 (- ?v_18 (* o_2 64))) (?v_24 (* v3 8))) (let ((?v_25 (- ?v_24 (* s_2 64))) (?v_26 (* v2 4))) (let ((?v_27 (- ?v_26 (* s_1 64)))) (let ((?v_22 (+ ?v_25 ?v_27))) (let ((?v_23 (- ?v_22 (* o_1 64)))) (let ((?v_16 (+ ?v_19 ?v_23))) (let ((?v_17 (- ?v_16 (* o_3 64))) (?v_10 (- (+ (- (* 4 v4) (* 128 s_4)) (* 2 v3)) (* 128 o_4)))) (let ((?v_11 (- ?v_10 (* s_5 64)))) (let ((?v_8 (+ ?v_11 v2))) (let ((?v_9 (- ?v_8 (* o_5 64))) (?v_6 (- (+ (- (- (+ (- (* 8 v4) (* 256 s_4)) (* 4 v3)) (* 256 o_4)) (* 128 s_5)) (* 2 v2)) (* 128 o_5)))) (let ((?v_7 (- ?v_6 (* s_6 64)))) (let ((?v_4 (+ ?v_7 v1))) (let ((?v_5 (- ?v_4 (* o_6 64))) (?v_2 (- (+ (- (- (+ (- (- (+ (- (* 16 v4) (* 512 s_4)) (* 8 v3)) (* 512 o_4)) (* 256 s_5)) (* 4 v2)) (* 256 o_5)) (* 128 s_6)) (* 2 v1)) (* 128 o_6)))) (let ((?v_3 (- ?v_2 (* s_7 64)))) (let ((?v_0 (+ ?v_3 v0))) (let ((?v_1 (- ?v_0 (* o_7 64)))) (and (not (= ?v_1 ?v_17)) (and (= (> ?v_0 64) (= o_7 1)) (and (and (< ?v_1 64) (<= 0 ?v_1)) (and (and (<= o_7 1) (<= 0 o_7)) (and (= (> ?v_2 64) (>= s_7 1)) (and (and (< ?v_3 64) (<= 0 ?v_3)) (and (and (< s_7 2) (<= 0 s_7)) (and (= (> ?v_4 64) (= o_6 1)) (and (and (< ?v_5 64) (<= 0 ?v_5)) (and (and (<= o_6 1) (<= 0 o_6)) (and (= (> ?v_6 64) (>= s_6 1)) (and (and (< ?v_7 64) (<= 0 ?v_7)) (and (and (< s_6 2) (<= 0 s_6)) (and (= (> ?v_8 64) (= o_5 1)) (and (and (< ?v_9 64) (<= 0 ?v_9)) (and (and (<= o_5 1) (<= 0 o_5)) (and (= (> ?v_10 64) (>= s_5 1)) (and (and (< ?v_11 64) (<= 0 ?v_11)) (and (and (< s_5 2) (<= 0 s_5)) (and (= (> ?v_12 64) (= o_4 1)) (and (and (< ?v_13 64) (<= 0 ?v_13)) (and (and (<= o_4 1) (<= 0 o_4)) (and (= (> ?v_14 64) (>= s_4 1)) (and (and (< ?v_15 64) (<= 0 ?v_15)) (and (and (< s_4 2) (<= 0 s_4)) (and (= (> ?v_16 64) (= o_3 1)) (and (and (< ?v_17 64) (<= 0 ?v_17)) (and (and (<= o_3 1) (<= 0 o_3)) (and (= (> ?v_18 64) (= o_2 1)) (and (and (< ?v_19 64) (<= 0 ?v_19)) (and (and (<= o_2 1) (<= 0 o_2)) (and (= (> ?v_20 64) (>= s_3 1)) (and (and (< ?v_21 64) (<= 0 ?v_21)) (and (and (< s_3 16) (<= 0 s_3)) (and (= (> ?v_22 64) (= o_1 1)) (and (and (< ?v_23 64) (<= 0 ?v_23)) (and (and (<= o_1 1) (<= 0 o_1)) (and (= (> ?v_24 64) (>= s_2 1)) (and (and (< ?v_25 64) (<= 0 ?v_25)) (and (and (< s_2 8) (<= 0 s_2)) (and (= (> ?v_26 64) (>= s_1 1)) (and (and (< ?v_27 64) (<= 0 ?v_27)) (and (and (< s_1 4) (<= 0 s_1)) (and (= (> ?v_28 64) (= o_0 1)) (and (and (< ?v_29 64) (<= 0 ?v_29)) (and (and (<= o_0 1) (<= 0 o_0)) (and (= (> ?v_30 64) (>= s_0 1)) (and (and (< ?v_31 64) (<= 0 ?v_31)) (and (and (< s_0 2) (<= 0 s_0)) (and (and (< v4 64) (>= v4 0)) (and (and (< v3 64) (>= v3 0)) (and (and (< v2 64) (>= v2 0)) (and (and (< v1 64) (>= v1 0)) (and (< v0 64) (>= v0 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
