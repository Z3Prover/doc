(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(declare-fun P_32 () Int)
(declare-fun P_33 () Int)
(assert (<= 0 P_2))
(assert (<= P_2 15))
(assert (<= 0 P_3))
(assert (<= P_3 15))
(assert (<= 0 P_4))
(assert (<= P_4 15))
(assert (<= 0 P_5))
(assert (<= P_5 15))
(assert (<= 0 P_6))
(assert (<= P_6 15))
(assert (<= 0 P_7))
(assert (<= P_7 15))
(assert (<= 0 P_8))
(assert (<= P_8 15))
(assert (<= 0 P_9))
(assert (<= P_9 15))
(assert (<= 0 P_10))
(assert (<= P_10 15))
(assert (<= 0 P_11))
(assert (<= P_11 15))
(assert (<= 0 P_12))
(assert (<= P_12 15))
(assert (<= 0 P_13))
(assert (<= P_13 15))
(assert (<= 0 P_14))
(assert (<= P_14 15))
(assert (<= 0 P_15))
(assert (<= P_15 15))
(assert (<= 0 P_16))
(assert (<= P_16 15))
(assert (<= 0 P_17))
(assert (<= P_17 15))
(assert (<= 0 P_18))
(assert (<= P_18 15))
(assert (<= 0 P_19))
(assert (<= P_19 15))
(assert (<= 0 P_20))
(assert (<= P_20 15))
(assert (<= 0 P_21))
(assert (<= P_21 15))
(assert (<= 0 P_22))
(assert (<= P_22 15))
(assert (<= 0 P_23))
(assert (<= P_23 15))
(assert (<= 0 P_24))
(assert (<= P_24 15))
(assert (<= 0 P_25))
(assert (<= P_25 15))
(assert (<= 0 P_26))
(assert (<= P_26 15))
(assert (<= 0 P_27))
(assert (<= P_27 15))
(assert (<= 0 P_28))
(assert (<= P_28 15))
(assert (<= 0 P_29))
(assert (<= P_29 15))
(assert (<= 0 P_30))
(assert (<= P_30 15))
(assert (<= 0 P_31))
(assert (<= P_31 15))
(assert (<= 0 P_32))
(assert (<= P_32 15))
(assert (<= 0 P_33))
(assert (<= P_33 15))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (+ P_20 P_21)) (?v_1 (+ P_18 P_19)) (?v_2 (+ P_22 P_23)) (?v_3 (+ P_24 P_25)) (?v_4 (+ P_26 P_27)) (?v_5 (+ P_28 P_29)) (?v_6 (+ P_30 P_31)) (?v_7 (+ P_32 P_33)) (?v_8 (+ P_4 P_5)) (?v_9 (+ P_2 P_3)) (?v_10 (+ P_6 P_7)) (?v_11 (+ P_8 P_9)) (?v_12 (+ P_10 P_11)) (?v_13 (+ P_12 P_13)) (?v_14 (+ P_14 P_15)) (?v_15 (+ P_16 P_17))) (= (+ (* 18446744073709551616 dz) rz) (- (ite (not (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (> P_18 3) (or (< P_19 4) (> P_19 7))) (or (< P_20 8) (> P_20 11))) (< P_21 12)) (or (< ?v_0 22) (> ?v_0 24))) (or (< ?v_1 6) (> ?v_1 8))) (or (< ?v_2 6) (> ?v_2 8))) (or (< ?v_3 22) (> ?v_3 24))) (< P_25 12)) (or (< P_24 8) (> P_24 11))) (or (< P_23 4) (> P_23 7))) (> P_22 3)) (or (< ?v_4 6) (> ?v_4 8))) (or (< ?v_5 22) (> ?v_5 24))) (< P_29 12)) (or (< P_28 8) (> P_28 11))) (or (< P_27 4) (> P_27 7))) (> P_26 3)) (or (< ?v_6 6) (> ?v_6 8))) (or (< ?v_7 22) (> ?v_7 24))) (< P_33 12)) (or (< P_32 8) (> P_32 11))) (or (< P_31 4) (> P_31 7))) (> P_30 3))) (+ (* P_18 1152921504606846976) (+ (* P_19 72057594037927936) (+ (* P_20 4503599627370496) (+ (* P_21 281474976710656) (+ (* P_22 17592186044416) (+ (* P_23 1099511627776) (+ (* P_24 68719476736) (+ (* P_25 4294967296) (+ (* P_30 268435456) (+ (* P_31 16777216) (+ (* P_32 1048576) (+ (* P_33 65536) (+ (* P_26 4096) (+ (* P_27 256) (+ (* P_28 16) P_29))))))))))))))) 1557424810555741597) (ite (not (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (> P_2 3) (or (< P_3 4) (> P_3 7))) (or (< P_4 8) (> P_4 11))) (< P_5 12)) (or (< ?v_8 22) (> ?v_8 24))) (or (< ?v_9 6) (> ?v_9 8))) (or (< ?v_10 6) (> ?v_10 8))) (or (< ?v_11 22) (> ?v_11 24))) (< P_9 12)) (or (< P_8 8) (> P_8 11))) (or (< P_7 4) (> P_7 7))) (> P_6 3)) (or (< ?v_12 6) (> ?v_12 8))) (or (< ?v_13 22) (> ?v_13 24))) (< P_13 12)) (or (< P_12 8) (> P_12 11))) (or (< P_11 4) (> P_11 7))) (> P_10 3)) (or (< ?v_14 6) (> ?v_14 8))) (or (< ?v_15 22) (> ?v_15 24))) (< P_17 12)) (or (< P_16 8) (> P_16 11))) (or (< P_15 4) (> P_15 7))) (> P_14 3))) (+ (* P_2 1152921504606846976) (+ (* P_3 72057594037927936) (+ (* P_4 4503599627370496) (+ (* P_5 281474976710656) (+ (* P_6 17592186044416) (+ (* P_7 1099511627776) (+ (* P_8 68719476736) (+ (* P_9 4294967296) (+ (* P_14 268435456) (+ (* P_15 16777216) (+ (* P_16 1048576) (+ (* P_17 65536) (+ (* P_10 4096) (+ (* P_11 256) (+ (* P_12 16) P_13))))))))))))))) 1557424810555741597)))))
(assert (> rz 0))
(assert (< rz 18446744073709551616))
(check-sat)
(exit)
