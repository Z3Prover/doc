(set-info :smt-lib-version 2.6)
(set-logic QF_LIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Bool)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Bool)
(declare-fun P_9 () Bool)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Bool)
(declare-fun P_13 () Bool)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Bool)
(declare-fun P_18 () Bool)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Bool)
(declare-fun P_22 () Bool)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(assert (<= 0 P_6))
(assert (<= P_6 524287))
(assert (<= 0 P_7))
(assert (<= P_7 3))
(assert (<= 0 P_10))
(assert (<= P_10 524287))
(assert (<= 0 P_11))
(assert (<= P_11 3))
(assert (<= 0 P_14))
(assert (<= P_14 524287))
(assert (<= 0 P_15))
(assert (<= P_15 3))
(assert (<= 0 P_16))
(assert (<= P_16 8388607))
(assert (<= 0 P_19))
(assert (<= P_19 524287))
(assert (<= 0 P_20))
(assert (<= P_20 3))
(assert (<= 0 P_23))
(assert (<= P_23 524287))
(assert (<= 0 P_24))
(assert (<= P_24 3))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_13 (+ (ite P_4 4194304 0) (+ (ite P_5 2097152 0) (+ (* P_6 4) P_7)))) (?v_12 (not (and P_2 P_3))) (?v_6 (not (and (and (< (ite (< P_7 2) P_7 (- P_7 4)) 0) (or (< (ite (< P_11 2) P_11 (- P_11 4)) 0) (< (ite (< P_15 2) P_15 (- P_15 4)) 0))) (or (< (ite (< P_20 2) P_20 (- P_20 4)) 0) (< (ite (< P_24 2) P_24 (- P_24 4)) 0))))) (?v_7 (+ (ite P_5 4194304 0) (+ (* 8 P_6) (* 2 P_7)))) (?v_8 (+ (ite P_9 4194304 0) (+ (* 8 P_10) (* 2 P_11)))) (?v_9 (+ (ite P_13 4194304 0) (+ (* 8 P_14) (* 2 P_15)))) (?v_10 (+ (ite P_18 4194304 0) (+ (* 8 P_19) (* 2 P_20)))) (?v_11 (+ (ite P_22 4194304 0) (+ (* 8 P_23) (* 2 P_24)))) (?v_1 (+ (* 16 P_6) (* 4 P_7))) (?v_2 (+ (* 16 P_10) (* 4 P_11))) (?v_3 (+ (* 16 P_14) (* 4 P_15))) (?v_4 (+ (* 16 P_19) (* 4 P_20))) (?v_5 (+ (* 16 P_23) (* 4 P_24))) (?v_0 (+ (ite P_4 33554432 0) (+ (ite P_5 16777216 0) (+ (* 32 P_6) (* 8 P_7)))))) (let ((?v_15 (ite ?v_6 (- (- (- (- (+ (ite P_4 8388608 0) ?v_7) (+ (ite P_8 8388608 0) ?v_8)) ?v_9) ?v_10) ?v_11) (+ (+ (+ (+ ?v_7 ?v_8) ?v_9) ?v_10) ?v_11))) (?v_14 (+ (ite P_4 37748736 0) (+ (ite P_5 18874368 0) (+ (* 36 P_6) (* 9 P_7)))))) (= (+ (* 8388608 dz) rz) (- (+ (+ (- (ite ?v_12 (- (+ (- ?v_0 (+ (ite P_8 33554432 0) (+ (ite P_9 16777216 0) (+ (* 32 P_10) (* 8 P_11))))) (+ (ite P_12 33554432 0) (+ (ite P_13 16777216 0) (+ (* 32 P_14) (* 8 P_15))))) (* 8 P_16)) (- (+ (+ ?v_0 (+ (ite P_8 100663296 0) (+ (ite P_9 50331648 0) (+ (* 96 P_10) (* 24 P_11))))) (+ (ite P_17 33554432 0) (+ (ite P_18 16777216 0) (+ (* 32 P_19) (* 8 P_20))))) (+ (ite P_21 33554432 0) (+ (ite P_22 16777216 0) (+ (* 32 P_23) (* 8 P_24)))))) (ite ?v_6 (- (- (- (- ?v_1 ?v_2) ?v_3) ?v_4) ?v_5) (+ (+ (+ (+ ?v_1 ?v_2) ?v_3) ?v_4) ?v_5))) ?v_15) (ite ?v_12 (- (+ (- ?v_13 (+ (ite P_8 4194304 0) (+ (ite P_9 2097152 0) (+ (* P_10 4) P_11)))) (+ (ite P_12 4194304 0) (+ (ite P_13 2097152 0) (+ (* P_14 4) P_15)))) P_16) (- (+ (+ ?v_13 (+ (ite P_8 12582912 0) (+ (ite P_9 6291456 0) (+ (* 12 P_10) (* 3 P_11))))) (+ (ite P_17 4194304 0) (+ (ite P_18 2097152 0) (+ (* P_19 4) P_20)))) (+ (ite P_21 4194304 0) (+ (ite P_22 2097152 0) (+ (* P_23 4) P_24)))))) (- (ite ?v_12 (- (+ (- ?v_14 (+ (ite P_8 37748736 0) (+ (ite P_9 18874368 0) (+ (* 36 P_10) (* 9 P_11))))) (+ (ite P_12 37748736 0) (+ (ite P_13 18874368 0) (+ (* 36 P_14) (* 9 P_15))))) (* 9 P_16)) (- (+ (+ ?v_14 (+ (ite P_8 113246208 0) (+ (ite P_9 56623104 0) (+ (* 108 P_10) (* 27 P_11))))) (+ (ite P_17 37748736 0) (+ (ite P_18 18874368 0) (+ (* 36 P_19) (* 9 P_20))))) (+ (ite P_21 37748736 0) (+ (ite P_22 18874368 0) (+ (* 36 P_23) (* 9 P_24)))))) ?v_15))))))
(assert (> rz 0))
(assert (< rz 8388608))
(check-sat)
(exit)
