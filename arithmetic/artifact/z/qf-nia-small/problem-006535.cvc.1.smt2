(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_19 () Int)
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_7))
(assert (<= P_7 255))
(assert (<= 0 P_8))
(assert (<= P_8 255))
(assert (<= 0 P_9))
(assert (<= P_9 255))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 255))
(assert (<= 0 P_14))
(assert (<= P_14 255))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (ite (not P_2) (ite (not P_3) 2 1) 0)) (?v_3 (* P_4 P_5))) (let ((?v_2 (- ?v_3 P_6)) (?v_6 (= ?v_1 2)) (?v_4 (= ?v_1 1)) (?v_0 (= ?v_1 0)) (?v_5 (- P_10 P_11))) (let ((?v_7 (+ (ite ?v_0 ?v_2 (ite ?v_4 ?v_2 (ite ?v_6 (- (* P_7 P_8) ?v_3) P_9))) (ite ?v_0 ?v_5 (ite ?v_4 ?v_5 (ite ?v_6 P_6 P_12))))) (?v_8 (+ (* (- P_11 P_4) P_10) P_5))) (let ((?v_9 (* (ite ?v_0 ?v_7 (ite ?v_4 ?v_7 (ite ?v_6 (ite ?v_0 P_13 (ite ?v_4 P_13 (ite ?v_6 P_13 P_14))) P_15))) (+ (ite ?v_0 ?v_8 (ite ?v_4 ?v_8 (ite ?v_6 ?v_8 P_16))) P_8)))) (= (+ (* 256 dz) rz) (- (ite ?v_0 ?v_9 (ite ?v_4 ?v_9 (ite ?v_6 ?v_9 P_19))) ?v_9)))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
