(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Int)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(assert (<= (* 128 (- 1)) P_2))
(assert (<= P_2 127))
(assert (<= (* 128 (- 1)) P_3))
(assert (<= P_3 127))
(assert (<= (* 128 (- 1)) P_4))
(assert (<= P_4 127))
(assert (<= (* 128 (- 1)) P_5))
(assert (<= P_5 127))
(assert (<= (* 128 (- 1)) P_6))
(assert (<= P_6 127))
(assert (<= (* 128 (- 1)) P_7))
(assert (<= P_7 127))
(assert (<= (* 128 (- 1)) P_8))
(assert (<= P_8 127))
(assert (<= (* 128 (- 1)) P_9))
(assert (<= P_9 127))
(assert (<= (* 128 (- 1)) P_10))
(assert (<= P_10 127))
(assert (<= (* 128 (- 1)) P_11))
(assert (<= P_11 127))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (+ (+ (+ (+ (* P_2 P_3) (* P_4 P_5)) (* P_6 P_7)) (* P_8 P_9)) (* P_10 P_11)))) (let ((?v_1 (+ (ite (< ?v_0 0) 549755813888 0) (ite (>= ?v_0 0) ?v_0 (+ ?v_0 549755813888))))) (= (+ (* 2199023255552 dz) rz) (- (ite (< ?v_1 549755813888) ?v_1 (- ?v_1 1099511627776)) ?v_0)))))
(assert (> rz 0))
(assert (< rz 2199023255552))
(check-sat)
(exit)
