(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Int)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Int)
(declare-fun P_5 () Int)
(declare-fun P_6 () Int)
(declare-fun P_7 () Int)
(declare-fun P_8 () Int)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Int)
(declare-fun P_15 () Int)
(declare-fun P_16 () Int)
(declare-fun P_17 () Int)
(declare-fun P_18 () Int)
(declare-fun P_19 () Int)
(declare-fun P_20 () Int)
(declare-fun P_21 () Int)
(declare-fun P_22 () Int)
(declare-fun P_23 () Int)
(declare-fun P_24 () Int)
(declare-fun P_25 () Int)
(declare-fun P_26 () Int)
(declare-fun P_27 () Int)
(declare-fun P_28 () Int)
(declare-fun P_29 () Int)
(declare-fun P_31 () Int)
(declare-fun P_32 () Int)
(assert (<= 0 P_2))
(assert (<= P_2 3))
(assert (<= 0 P_4))
(assert (<= P_4 255))
(assert (<= 0 P_5))
(assert (<= P_5 255))
(assert (<= 0 P_6))
(assert (<= P_6 255))
(assert (<= 0 P_7))
(assert (<= P_7 255))
(assert (<= 0 P_8))
(assert (<= P_8 255))
(assert (<= 0 P_9))
(assert (<= P_9 3))
(assert (<= 0 P_10))
(assert (<= P_10 255))
(assert (<= 0 P_11))
(assert (<= P_11 255))
(assert (<= 0 P_12))
(assert (<= P_12 255))
(assert (<= 0 P_13))
(assert (<= P_13 255))
(assert (<= 0 P_14))
(assert (<= P_14 3))
(assert (<= 0 P_15))
(assert (<= P_15 255))
(assert (<= 0 P_16))
(assert (<= P_16 255))
(assert (<= 0 P_17))
(assert (<= P_17 255))
(assert (<= 0 P_18))
(assert (<= P_18 255))
(assert (<= 0 P_19))
(assert (<= P_19 255))
(assert (<= 0 P_20))
(assert (<= P_20 3))
(assert (<= 0 P_21))
(assert (<= P_21 255))
(assert (<= 0 P_22))
(assert (<= P_22 255))
(assert (<= 0 P_23))
(assert (<= P_23 255))
(assert (<= 0 P_24))
(assert (<= P_24 255))
(assert (<= 0 P_25))
(assert (<= P_25 255))
(assert (<= 0 P_26))
(assert (<= P_26 255))
(assert (<= 0 P_27))
(assert (<= P_27 255))
(assert (<= 0 P_28))
(assert (<= P_28 255))
(assert (<= 0 P_29))
(assert (<= P_29 255))
(assert (<= 0 P_31))
(assert (<= P_31 3))
(assert (<= 0 P_32))
(assert (<= P_32 255))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_1 (not P_3))) (let ((?v_2 (* (ite ?v_1 (- P_4 P_5) P_6) (ite ?v_1 P_7 P_8))) (?v_3 (* P_6 P_8)) (?v_9 (= P_9 2)) (?v_8 (= P_9 1)) (?v_7 (= P_9 0))) (let ((?v_11 (ite ?v_7 ?v_3 (ite ?v_8 ?v_3 (ite ?v_9 ?v_3 P_10)))) (?v_6 (= P_2 2)) (?v_4 (= P_2 1)) (?v_0 (= P_2 0)) (?v_5 (ite ?v_1 P_11 P_12)) (?v_12 (ite ?v_7 P_12 (ite ?v_8 P_12 (ite ?v_9 P_12 P_13))))) (let ((?v_10 (+ (ite ?v_0 ?v_2 (ite ?v_4 ?v_2 (ite ?v_6 ?v_2 ?v_11))) (ite ?v_0 ?v_5 (ite ?v_4 ?v_5 (ite ?v_6 ?v_5 ?v_12))))) (?v_13 (+ ?v_11 ?v_12)) (?v_14 (+ P_10 P_13)) (?v_20 (= P_14 2)) (?v_19 (= P_14 1)) (?v_18 (= P_14 0))) (let ((?v_25 (ite ?v_18 ?v_14 (ite ?v_19 ?v_14 (ite ?v_20 ?v_14 P_15))))) (let ((?v_22 (ite ?v_7 ?v_13 (ite ?v_8 ?v_13 (ite ?v_9 ?v_13 ?v_25)))) (?v_15 (ite ?v_1 P_16 P_17)) (?v_17 (ite ?v_7 P_17 (ite ?v_8 P_17 (ite ?v_9 P_17 P_18))))) (let ((?v_16 (ite ?v_0 ?v_15 (ite ?v_4 ?v_15 (ite ?v_6 ?v_15 ?v_17)))) (?v_26 (ite ?v_18 P_18 (ite ?v_19 P_18 (ite ?v_20 P_18 P_19))))) (let ((?v_23 (ite ?v_7 ?v_17 (ite ?v_8 ?v_17 (ite ?v_9 ?v_17 ?v_26))))) (let ((?v_21 (+ (ite ?v_0 ?v_10 (ite ?v_4 ?v_10 (ite ?v_6 ?v_10 ?v_22))) (ite ?v_0 ?v_16 (ite ?v_4 ?v_16 (ite ?v_6 ?v_16 ?v_23))))) (?v_24 (+ ?v_22 ?v_23)) (?v_27 (+ ?v_25 ?v_26)) (?v_28 (+ P_15 P_19)) (?v_42 (= P_20 2)) (?v_41 (= P_20 1)) (?v_40 (= P_20 0))) (let ((?v_50 (ite ?v_40 ?v_28 (ite ?v_41 ?v_28 (ite ?v_42 ?v_28 P_21))))) (let ((?v_47 (ite ?v_18 ?v_27 (ite ?v_19 ?v_27 (ite ?v_20 ?v_27 ?v_50))))) (let ((?v_44 (ite ?v_7 ?v_24 (ite ?v_8 ?v_24 (ite ?v_9 ?v_24 ?v_47)))) (?v_29 (ite ?v_1 (* P_7 P_16) P_22)) (?v_33 (ite ?v_7 P_22 (ite ?v_8 P_22 (ite ?v_9 P_22 P_23)))) (?v_30 (- (ite ?v_1 (+ P_24 P_5) P_25) (ite ?v_1 P_11 P_26))) (?v_31 (- P_25 P_26))) (let ((?v_34 (ite ?v_7 ?v_31 (ite ?v_8 ?v_31 (ite ?v_9 ?v_31 P_27))))) (let ((?v_32 (- (ite ?v_0 ?v_29 (ite ?v_4 ?v_29 (ite ?v_6 ?v_29 ?v_33))) (ite ?v_0 ?v_30 (ite ?v_4 ?v_30 (ite ?v_6 ?v_30 ?v_34))))) (?v_35 (- ?v_33 ?v_34)) (?v_36 (- P_23 P_27))) (let ((?v_39 (ite ?v_18 ?v_36 (ite ?v_19 ?v_36 (ite ?v_20 ?v_36 P_28))))) (let ((?v_38 (ite ?v_7 ?v_35 (ite ?v_8 ?v_35 (ite ?v_9 ?v_35 ?v_39))))) (let ((?v_37 (ite ?v_0 ?v_32 (ite ?v_4 ?v_32 (ite ?v_6 ?v_32 ?v_38)))) (?v_51 (ite ?v_40 P_28 (ite ?v_41 P_28 (ite ?v_42 P_28 P_29))))) (let ((?v_48 (ite ?v_18 ?v_39 (ite ?v_19 ?v_39 (ite ?v_20 ?v_39 ?v_51))))) (let ((?v_45 (ite ?v_7 ?v_38 (ite ?v_8 ?v_38 (ite ?v_9 ?v_38 ?v_48))))) (let ((?v_43 (* (ite ?v_0 ?v_21 (ite ?v_4 ?v_21 (ite ?v_6 ?v_21 ?v_44))) (ite ?v_0 ?v_37 (ite ?v_4 ?v_37 (ite ?v_6 ?v_37 ?v_45))))) (?v_46 (* ?v_44 ?v_45)) (?v_49 (* ?v_47 ?v_48)) (?v_52 (* ?v_50 ?v_51)) (?v_53 (* P_21 P_29))) (= (+ (* 256 dz) rz) (- (ite ?v_0 ?v_43 (ite ?v_4 ?v_43 (ite ?v_6 ?v_43 (ite ?v_7 ?v_46 (ite ?v_8 ?v_46 (ite ?v_9 ?v_46 (ite ?v_18 ?v_49 (ite ?v_19 ?v_49 (ite ?v_20 ?v_49 (ite ?v_40 ?v_52 (ite ?v_41 ?v_52 (ite ?v_42 ?v_52 (ite (= P_31 0) ?v_53 (ite (= P_31 1) ?v_53 (ite (= P_31 2) ?v_53 P_32))))))))))))))) ?v_43)))))))))))))))))))))))
(assert (> rz 0))
(assert (< rz 256))
(check-sat)
(exit)
