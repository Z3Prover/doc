(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun global_invc96_2 () Int)
(declare-fun global_invc96_1 () Int)
(declare-fun global_invc96_0 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n5 () Int)
(declare-fun lam0n6 () Int)
(declare-fun global_invc96_3 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun lam0n4 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n6 () Int)
(declare-fun lam1n7 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n5 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam1n3 () Int)
(declare-fun term_invc96_2 () Int)
(declare-fun term_invc96_1 () Int)
(declare-fun term_invc96_0 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n5 () Int)
(declare-fun lam2n6 () Int)
(declare-fun term_invc96_3 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun non_inc50 () Bool)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n5 () Int)
(declare-fun lam3n6 () Int)
(declare-fun lam3n8 () Int)
(declare-fun lam3n7 () Int)
(declare-fun lam3n2 () Int)
(declare-fun rfc0 () Int)
(declare-fun lam3n3 () Int)
(declare-fun rfc1 () Int)
(declare-fun lam3n4 () Int)
(declare-fun rfc2 () Int)
(declare-fun disabled50 () Bool)
(declare-fun bounded50 () Bool)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n5 () Int)
(declare-fun lam4n6 () Int)
(declare-fun lam4n7 () Int)
(declare-fun rfc3 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam4n4 () Int)
(declare-fun dec50 () Bool)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n5 () Int)
(declare-fun lam5n6 () Int)
(declare-fun lam5n7 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam5n4 () Int)
(declare-fun bnd_and_dec50 () Bool)
(declare-fun GLOBAL_NT_96 () Bool)
(declare-fun global_V0_96 () Int)
(declare-fun global_V1_96 () Int)
(declare-fun global_V2_96 () Int)
(declare-fun TERM_NT_96 () Bool)
(declare-fun term_V0_96 () Int)
(declare-fun term_V1_96 () Int)
(declare-fun term_V2_96 () Int)
(declare-fun ALL_NON_INC_0 () Bool)
(declare-fun DIS_OR_ALL_NON_INC_0 () Bool)
(declare-fun SOME_BND_AND_DEC_0 () Bool)
(declare-fun V1_NIV () Int)
(declare-fun V0_NIV () Int)
(declare-fun V2_NIV () Int)
(declare-fun V4_NIV () Int)
(declare-fun V3_NIV () Int)
(declare-fun V5_NIV () Int)
(assert ( and ( >= global_invc96_2 ( - 1 ) ) ( <= global_invc96_2 1 ) ( >= global_invc96_1 ( - 1 ) ) ( <= global_invc96_1 1 ) ( >= global_invc96_0 ( - 1 ) ) ( <= global_invc96_0 1 ) ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n5 0 ) ( <= 0 lam0n6 ) ( < lam0n6 1 ) ( and ( = ( + ( * ( - 1 ) lam0n0 ) ( * lam0n1 ( - 2 ) ) ( * lam0n5 global_invc96_3 ) ) ( + global_invc96_3 ( * ( - 1 ) lam0n6 ) ) ) ( = ( + ( * lam0n2 1 ) ( * lam0n5 global_invc96_0 ) ) 0 ) ( = ( + ( * lam0n1 1 ) ( * lam0n2 1 ) ( * lam0n3 1 ) ( * lam0n5 global_invc96_1 ) ) 0 ) ( = ( + ( * lam0n3 1 ) ( * lam0n4 1 ) ( * lam0n5 global_invc96_2 ) ) 0 ) ( = ( * lam0n2 ( - 1 ) ) global_invc96_0 ) ( = ( * lam0n3 ( - 1 ) ) global_invc96_1 ) ( = ( * lam0n4 ( - 1 ) ) global_invc96_2 ) ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n6 0 ) ( <= 0 lam1n7 ) ( < lam1n7 1 ) ( and ( = ( + ( * ( - 1 ) lam1n0 ) ( * lam1n1 5 ) ( * lam1n6 ( - 5 ) ) ) ( + global_invc96_3 ( * ( - 1 ) lam1n7 ) ) ) ( = ( * lam1n2 1 ) 0 ) ( = ( + ( * lam1n1 ( - 1 ) ) ( * lam1n6 1 ) ) 0 ) ( = ( * lam1n5 ( - 1 ) ) 0 ) ( = ( + ( * lam1n4 1 ) ( * lam1n5 1 ) ) 0 ) ( = ( * lam1n2 ( - 1 ) ) global_invc96_0 ) ( = ( * lam1n3 ( - 1 ) ) global_invc96_1 ) ( = ( * lam1n4 ( - 1 ) ) global_invc96_2 ) ) ) ( >= term_invc96_2 ( - 1 ) ) ( <= term_invc96_2 1 ) ( >= term_invc96_1 ( - 1 ) ) ( <= term_invc96_1 1 ) ( >= term_invc96_0 ( - 1 ) ) ( <= term_invc96_0 1 ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n5 0 ) ( <= 0 lam2n6 ) ( < lam2n6 1 ) ( and ( = ( + ( * ( - 1 ) lam2n0 ) ( * lam2n1 ( - 2 ) ) ( * lam2n5 global_invc96_3 ) ) ( + term_invc96_3 ( * ( - 1 ) lam2n6 ) ) ) ( = ( + ( * lam2n2 1 ) ( * lam2n5 global_invc96_0 ) ) 0 ) ( = ( + ( * lam2n1 1 ) ( * lam2n2 1 ) ( * lam2n3 1 ) ( * lam2n5 global_invc96_1 ) ) 0 ) ( = ( + ( * lam2n3 1 ) ( * lam2n4 1 ) ( * lam2n5 global_invc96_2 ) ) 0 ) ( = ( * lam2n2 ( - 1 ) ) term_invc96_0 ) ( = ( * lam2n3 ( - 1 ) ) term_invc96_1 ) ( = ( * lam2n4 ( - 1 ) ) term_invc96_2 ) ) ) ( = non_inc50 ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n5 0 ) ( >= lam3n6 0 ) ( <= 0 lam3n8 ) ( < lam3n8 1 ) ( <= lam3n7 1 ) ( >= lam3n7 0 ) ( and ( > ( + ( * ( - 1 ) lam3n0 ) ( * lam3n1 ( - 2 ) ) ( * lam3n5 global_invc96_3 ) ( * lam3n6 term_invc96_3 ) ( * lam3n7 ( + 1 ( * ( - 1 ) lam3n8 ) ) ) ) 0 ) ( = ( + ( * lam3n2 1 ) ( * lam3n5 global_invc96_0 ) ( * lam3n6 term_invc96_0 ) ( * lam3n7 rfc0 ) ) 0 ) ( = ( + ( * lam3n1 1 ) ( * lam3n2 1 ) ( * lam3n3 1 ) ( * lam3n5 global_invc96_1 ) ( * lam3n6 term_invc96_1 ) ( * lam3n7 rfc1 ) ) 0 ) ( = ( + ( * lam3n3 1 ) ( * lam3n4 1 ) ( * lam3n5 global_invc96_2 ) ( * lam3n6 term_invc96_2 ) ( * lam3n7 rfc2 ) ) 0 ) ( = ( + ( * lam3n2 ( - 1 ) ) ( * lam3n7 ( * ( - 1 ) rfc0 ) ) ) 0 ) ( = ( + ( * lam3n3 ( - 1 ) ) ( * lam3n7 ( * ( - 1 ) rfc1 ) ) ) 0 ) ( = ( + ( * lam3n4 ( - 1 ) ) ( * lam3n7 ( * ( - 1 ) rfc2 ) ) ) 0 ) ) ) ) ( = disabled50 ( and ( = lam3n7 0 ) non_inc50 ) ) ( = bounded50 ( and ( >= lam4n0 0 ) ( >= lam4n1 0 ) ( >= lam4n5 0 ) ( >= lam4n6 0 ) ( <= 0 lam4n7 ) ( < lam4n7 1 ) ( and ( = ( + ( * ( - 1 ) lam4n0 ) ( * lam4n1 ( - 2 ) ) ( * lam4n5 global_invc96_3 ) ( * lam4n6 term_invc96_3 ) ) ( + ( * ( - 1 ) rfc3 ) ( * ( - 1 ) lam4n7 ) ) ) ( = ( + ( * lam4n2 1 ) ( * lam4n5 global_invc96_0 ) ( * lam4n6 term_invc96_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( + ( * lam4n1 1 ) ( * lam4n2 1 ) ( * lam4n3 1 ) ( * lam4n5 global_invc96_1 ) ( * lam4n6 term_invc96_1 ) ) ( * ( - 1 ) rfc1 ) ) ( = ( + ( * lam4n3 1 ) ( * lam4n4 1 ) ( * lam4n5 global_invc96_2 ) ( * lam4n6 term_invc96_2 ) ) ( * ( - 1 ) rfc2 ) ) ( = ( * lam4n2 ( - 1 ) ) 0 ) ( = ( * lam4n3 ( - 1 ) ) 0 ) ( = ( * lam4n4 ( - 1 ) ) 0 ) ) ) ) ( = dec50 ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( >= lam5n5 0 ) ( >= lam5n6 0 ) ( <= 0 lam5n7 ) ( < lam5n7 1 ) ( and ( = ( + ( * ( - 1 ) lam5n0 ) ( * lam5n1 ( - 2 ) ) ( * lam5n5 global_invc96_3 ) ( * lam5n6 term_invc96_3 ) ) ( + 1 ( * ( - 1 ) lam5n7 ) ) ) ( = ( + ( * lam5n2 1 ) ( * lam5n5 global_invc96_0 ) ( * lam5n6 term_invc96_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( + ( * lam5n1 1 ) ( * lam5n2 1 ) ( * lam5n3 1 ) ( * lam5n5 global_invc96_1 ) ( * lam5n6 term_invc96_1 ) ) ( * ( - 1 ) rfc1 ) ) ( = ( + ( * lam5n3 1 ) ( * lam5n4 1 ) ( * lam5n5 global_invc96_2 ) ( * lam5n6 term_invc96_2 ) ) ( * ( - 1 ) rfc2 ) ) ( = ( * lam5n2 ( - 1 ) ) rfc0 ) ( = ( * lam5n3 ( - 1 ) ) rfc1 ) ( = ( * lam5n4 ( - 1 ) ) rfc2 ) ) ) ) ( = bnd_and_dec50 ( and bounded50 dec50 ) ) ( = GLOBAL_NT_96 ( or ( not ( = global_invc96_2 0 ) ) ( not ( = global_invc96_1 0 ) ) ( not ( = global_invc96_0 0 ) ) ) ) ( or ( not ( <= ( + global_invc96_3 ( * global_invc96_0 global_V0_96 ) ( * global_invc96_1 global_V1_96 ) ( * global_invc96_2 global_V2_96 ) ) 0 ) ) ( and ( = global_invc96_2 0 ) ( = global_invc96_1 0 ) ( = global_invc96_0 0 ) ) ) ( = TERM_NT_96 ( or ( not ( = term_invc96_2 0 ) ) ( not ( = term_invc96_1 0 ) ) ( not ( = term_invc96_0 0 ) ) ) ) ( or ( not ( <= ( + term_invc96_3 ( * term_invc96_0 term_V0_96 ) ( * term_invc96_1 term_V1_96 ) ( * term_invc96_2 term_V2_96 ) ) 0 ) ) ( and ( = term_invc96_2 0 ) ( = term_invc96_1 0 ) ( = term_invc96_0 0 ) ) ) ( = ALL_NON_INC_0 non_inc50 ) ( = DIS_OR_ALL_NON_INC_0 ( or disabled50 ALL_NON_INC_0 ) ) ( = SOME_BND_AND_DEC_0 bnd_and_dec50 ) ( or ( not ALL_NON_INC_0 ) ( and ( or ( not ( = rfc1 0 ) ) ( not ( = rfc0 0 ) ) ) ( >= rfc3 0 ) ( or SOME_BND_AND_DEC_0 ( <= ( + ( * rfc1 V1_NIV ) ( * rfc0 V0_NIV ) ( * rfc2 V2_NIV ) 1 ) ( + ( * rfc1 V4_NIV ) ( * rfc0 V3_NIV ) ( * rfc2 V5_NIV ) ) ) ) ) ) ( or GLOBAL_NT_96 TERM_NT_96 ALL_NON_INC_0 ) ))
(check-sat)
(exit)
