(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-fun Nl2arg11 () Int)
(declare-fun Nl2arg21 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun Nl2CT1 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n0 () Int)
(declare-fun arg1 () Int)
(declare-fun arg2 () Int)
(declare-fun FV_arg1_2 () Int)
(declare-fun FV_arg2_2 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun FV_arg1_3 () Int)
(declare-fun FV_arg2_3 () Int)
(assert ( and ( <= ( - 1 ) Nl2arg11 ) ( <= Nl2arg11 1 ) ( <= ( - 1 ) Nl2arg21 ) ( <= Nl2arg21 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( > ( + ( * 1 lam0n0 ) ( * ( - 51 ) lam0n1 ) ( * Nl2CT1 lam0n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2arg11 lam0n2 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n0 ) ( * 1 lam0n1 ) ( * Nl2arg21 lam0n2 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( > ( + ( * 1 lam1n0 ) ( * ( - 51 ) lam1n1 ) ( * Nl2CT1 lam1n2 ) ( - 1 ( + ( + Nl2CT1 ( * Nl2arg11 ( - 1 ) ) ) ( * Nl2arg21 1 ) ) ) ) 0 ) ( = ( + ( * 1 lam1n0 ) ( * Nl2arg11 lam1n2 ) ( - ( + 0 ( * Nl2arg11 1 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n0 ) ( * 1 lam1n1 ) ( * Nl2arg21 lam1n2 ) ( - ( + 0 ( * Nl2arg21 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( > ( + ( * 52 lam2n0 ) ( * 1 lam2n1 ) ( * Nl2CT1 lam2n2 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam2n1 ) ( * Nl2arg11 lam2n2 ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n0 ) ( * ( - 1 ) lam2n1 ) ( * Nl2arg21 lam2n2 ) ) 0 ) ) ( and ( >= lam3n0 0 ) ( >= lam3n1 0 ) ( >= lam3n2 0 ) ( > ( + ( * 52 lam3n0 ) ( * 1 lam3n1 ) ( * Nl2CT1 lam3n2 ) ( - 1 ( + ( + Nl2CT1 ( * Nl2arg11 1 ) ) ( * Nl2arg21 ( - 1 ) ) ) ) ) 0 ) ( = ( + ( * 1 lam3n1 ) ( * Nl2arg11 lam3n2 ) ( - ( + 0 ( * Nl2arg11 1 ) ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam3n0 ) ( * ( - 1 ) lam3n1 ) ( * Nl2arg21 lam3n2 ) ( - ( + 0 ( * Nl2arg21 1 ) ) ) ) 0 ) ) ))
(assert ( <= ( + Nl2CT1 ( * Nl2arg11 FV_arg1_2 ) ( * Nl2arg21 FV_arg2_2 ) ) 0 ))
(assert ( and ( >= lam5n0 0 ) ( >= lam5n1 0 ) ( > ( + ( * Nl2CT1 lam5n1 ) ( - 1 ) ) 0 ) ( = ( + ( * ( - 1 ) lam5n0 ) ( * Nl2arg11 lam5n1 ) ) 0 ) ( = ( + ( * 1 lam5n0 ) ( * Nl2arg21 lam5n1 ) ) 0 ) ))
(assert ( and ( <= ( + Nl2CT1 ( * Nl2arg11 FV_arg1_3 ) ( * Nl2arg21 FV_arg2_3 ) ) 0 ) ( or ( and ( <= ( + 1 FV_arg1_3 ( * ( - 1 ) FV_arg2_3 ) ) 0 ) ( <= ( + ( - 51 ) FV_arg2_3 ) 0 ) ) ( and ( <= ( + 52 ( * ( - 1 ) FV_arg2_3 ) ) 0 ) ( <= ( + 1 FV_arg1_3 ( * ( - 1 ) FV_arg2_3 ) ) 0 ) ) ) ))
(check-sat)
(exit)
