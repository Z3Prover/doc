(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun Nl2ap_max_requests_per_child^01 () Int)
(declare-fun Nl2die_now^01 () Int)
(declare-fun Nl2i^01 () Int)
(declare-fun Nl2ap_max_requests_per_child^02 () Int)
(declare-fun Nl2die_now^02 () Int)
(declare-fun Nl2i^02 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n1 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n3 () Int)
(declare-fun Nl2CT1 () Int)
(declare-fun Nl2CT2 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n1 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam2n0 () Int)
(declare-fun lam2n1 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam3n0 () Int)
(declare-fun lam3n1 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam3n16 () Int)
(declare-fun lam3n4 () Int)
(declare-fun lam3n5 () Int)
(declare-fun lam3n6 () Int)
(declare-fun lam3n7 () Int)
(declare-fun lam3n8 () Int)
(declare-fun lam3n9 () Int)
(declare-fun lam3n10 () Int)
(declare-fun lam3n11 () Int)
(declare-fun lam3n12 () Int)
(declare-fun lam3n13 () Int)
(declare-fun lam3n14 () Int)
(declare-fun lam3n15 () Int)
(declare-fun lam4n0 () Int)
(declare-fun lam4n1 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam4n16 () Int)
(declare-fun lam4n4 () Int)
(declare-fun lam4n5 () Int)
(declare-fun lam4n6 () Int)
(declare-fun lam4n7 () Int)
(declare-fun lam4n8 () Int)
(declare-fun lam4n9 () Int)
(declare-fun lam4n10 () Int)
(declare-fun lam4n11 () Int)
(declare-fun lam4n12 () Int)
(declare-fun lam4n13 () Int)
(declare-fun lam4n14 () Int)
(declare-fun lam4n15 () Int)
(declare-fun lam5n0 () Int)
(declare-fun lam5n1 () Int)
(declare-fun lam5n2 () Int)
(declare-fun lam5n3 () Int)
(declare-fun lam5n4 () Int)
(declare-fun lam5n5 () Int)
(declare-fun lam5n6 () Int)
(declare-fun lam5n7 () Int)
(declare-fun lam5n8 () Int)
(declare-fun lam5n9 () Int)
(declare-fun lam5n10 () Int)
(declare-fun lam5n11 () Int)
(declare-fun lam5n12 () Int)
(declare-fun lam5n13 () Int)
(declare-fun lam5n14 () Int)
(declare-fun lam5n15 () Int)
(declare-fun lam5n16 () Int)
(declare-fun lam6n0 () Int)
(declare-fun lam6n1 () Int)
(declare-fun lam6n2 () Int)
(declare-fun lam6n3 () Int)
(declare-fun lam6n4 () Int)
(declare-fun lam6n5 () Int)
(declare-fun lam6n6 () Int)
(declare-fun lam6n7 () Int)
(declare-fun lam6n8 () Int)
(declare-fun lam6n9 () Int)
(declare-fun lam6n10 () Int)
(declare-fun lam6n11 () Int)
(declare-fun lam6n12 () Int)
(declare-fun lam6n13 () Int)
(declare-fun lam6n14 () Int)
(declare-fun lam6n15 () Int)
(declare-fun lam6n16 () Int)
(declare-fun lam7n0 () Int)
(declare-fun lam7n1 () Int)
(declare-fun lam7n2 () Int)
(declare-fun lam7n3 () Int)
(declare-fun lam7n4 () Int)
(declare-fun lam7n5 () Int)
(declare-fun lam7n6 () Int)
(declare-fun lam7n7 () Int)
(declare-fun lam7n8 () Int)
(declare-fun lam7n9 () Int)
(declare-fun lam7n10 () Int)
(declare-fun lam7n11 () Int)
(declare-fun lam7n12 () Int)
(declare-fun lam7n13 () Int)
(declare-fun lam7n14 () Int)
(declare-fun lam7n15 () Int)
(declare-fun lam7n16 () Int)
(declare-fun lam8n0 () Int)
(declare-fun lam8n1 () Int)
(declare-fun lam8n2 () Int)
(declare-fun lam8n3 () Int)
(declare-fun lam8n4 () Int)
(declare-fun lam8n5 () Int)
(declare-fun lam8n6 () Int)
(declare-fun lam8n7 () Int)
(declare-fun lam8n8 () Int)
(declare-fun lam8n9 () Int)
(declare-fun lam8n10 () Int)
(declare-fun lam8n11 () Int)
(declare-fun lam8n12 () Int)
(declare-fun lam8n13 () Int)
(declare-fun lam8n14 () Int)
(declare-fun lam8n15 () Int)
(declare-fun lam8n16 () Int)
(declare-fun ap_max_requests_per_child^0 () Int)
(declare-fun die_now^0 () Int)
(declare-fun undef54 () Int)
(declare-fun undef6618 () Int)
(declare-fun undef6631 () Int)
(declare-fun ap_listeners^0 () Int)
(declare-fun i^0 () Int)
(declare-fun last_poll_idx^0 () Int)
(declare-fun lr^0 () Int)
(declare-fun my_child_num^0 () Int)
(declare-fun num_listensocks^0 () Int)
(declare-fun requests_this_child^0 () Int)
(declare-fun status^0 () Int)
(declare-fun undef6676 () Int)
(declare-fun undef394 () Int)
(declare-fun undef6687 () Int)
(declare-fun undef6677 () Int)
(declare-fun undef6685 () Int)
(declare-fun lam9n0 () Int)
(declare-fun lam9n1 () Int)
(declare-fun lam9n2 () Int)
(declare-fun lam10n0 () Int)
(declare-fun lam10n1 () Int)
(declare-fun lam10n2 () Int)
(assert ( and ( <= ( - 1 ) Nl2ap_max_requests_per_child^01 ) ( <= Nl2ap_max_requests_per_child^01 1 ) ( <= ( - 1 ) Nl2die_now^01 ) ( <= Nl2die_now^01 1 ) ( <= ( - 1 ) Nl2i^01 ) ( <= Nl2i^01 1 ) ( <= ( - 1 ) Nl2ap_max_requests_per_child^02 ) ( <= Nl2ap_max_requests_per_child^02 1 ) ( <= ( - 1 ) Nl2die_now^02 ) ( <= Nl2die_now^02 1 ) ( <= ( - 1 ) Nl2i^02 ) ( <= Nl2i^02 1 ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n1 ) ( * Nl2CT1 lam0n2 ) ( * Nl2CT2 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2ap_max_requests_per_child^01 lam0n2 ) ( * Nl2ap_max_requests_per_child^02 lam0n3 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2die_now^01 lam0n2 ) ( * Nl2die_now^02 lam0n3 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * Nl2i^01 lam0n2 ) ( * Nl2i^02 lam0n3 ) ) 0 ) ) ( and ( >= lam1n0 0 ) ( >= lam1n1 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( > ( + ( * 1 lam1n1 ) ( * Nl2CT1 lam1n2 ) ( * Nl2CT2 lam1n3 ) ( - 1 ( + Nl2CT1 ( * Nl2i^01 ( - 1 ) ) ) ) ) 0 ) ( = ( + ( * 1 lam1n0 ) ( * Nl2ap_max_requests_per_child^01 lam1n2 ) ( * Nl2ap_max_requests_per_child^02 lam1n3 ) ( - ( + 0 Nl2ap_max_requests_per_child^01 ) ) ) 0 ) ( = ( + ( * 1 lam1n0 ) ( * Nl2die_now^01 lam1n2 ) ( * Nl2die_now^02 lam1n3 ) ( - ( + 0 Nl2die_now^01 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam1n1 ) ( * Nl2i^01 lam1n2 ) ( * Nl2i^02 lam1n3 ) ( - ( + 0 ( * Nl2i^01 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n1 ) ( * Nl2CT1 lam0n2 ) ( * Nl2CT2 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2ap_max_requests_per_child^01 lam0n2 ) ( * Nl2ap_max_requests_per_child^02 lam0n3 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2die_now^01 lam0n2 ) ( * Nl2die_now^02 lam0n3 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * Nl2i^01 lam0n2 ) ( * Nl2i^02 lam0n3 ) ) 0 ) ) ( and ( >= lam2n0 0 ) ( >= lam2n1 0 ) ( >= lam2n2 0 ) ( >= lam2n3 0 ) ( > ( + ( * 1 lam2n1 ) ( * Nl2CT1 lam2n2 ) ( * Nl2CT2 lam2n3 ) ( - 1 ( + Nl2CT2 ( * Nl2i^02 ( - 1 ) ) ) ) ) 0 ) ( = ( + ( * 1 lam2n0 ) ( * Nl2ap_max_requests_per_child^01 lam2n2 ) ( * Nl2ap_max_requests_per_child^02 lam2n3 ) ( - ( + 0 Nl2ap_max_requests_per_child^02 ) ) ) 0 ) ( = ( + ( * 1 lam2n0 ) ( * Nl2die_now^01 lam2n2 ) ( * Nl2die_now^02 lam2n3 ) ( - ( + 0 Nl2die_now^02 ) ) ) 0 ) ( = ( + ( * ( - 1 ) lam2n1 ) ( * Nl2i^01 lam2n2 ) ( * Nl2i^02 lam2n3 ) ( - ( + 0 ( * Nl2i^02 1 ) ) ) ) 0 ) ) ))
(assert ( or ( and ( not ( <= ( + 1 ( * ( - 1 ) ap_max_requests_per_child^0 ) ( * ( - 1 ) die_now^0 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) undef54 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6618 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + ap_listeners^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = die_now^0 0 ) ( = ( + i^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = last_poll_idx^0 0 ) ( = ( + lr^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = ( + my_child_num^0 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + num_listensocks^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = requests_this_child^0 0 ) ( = ( + status^0 ( * ( - 1 ) undef6676 ) ) 0 ) ( = undef394 0 ) ( = ( + undef6676 ( * ( - 1 ) undef6687 ) ) 0 ) ( = ( + undef6677 ( * ( - 1 ) undef6685 ) ) 0 ) ( = ( + ( - 7 ) undef6676 ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2ap_max_requests_per_child^01 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^01 ) die_now^0 ) ( * ( + 0 Nl2i^01 ) i^0 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2ap_max_requests_per_child^02 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^02 ) die_now^0 ) ( * ( + 0 Nl2i^02 ) i^0 ) ) 0 ) ) ( and ( not ( <= ( + 1 ( * ( - 1 ) ap_max_requests_per_child^0 ) ( * ( - 1 ) die_now^0 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) undef54 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6618 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6631 ) ) 0 ) ( <= ( + 8 ( * ( - 1 ) undef6676 ) ) 0 ) ( = ( + ap_listeners^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = die_now^0 0 ) ( = ( + i^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = last_poll_idx^0 0 ) ( = ( + lr^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = ( + my_child_num^0 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + num_listensocks^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = requests_this_child^0 0 ) ( = ( + status^0 ( * ( - 1 ) undef6676 ) ) 0 ) ( = undef394 0 ) ( = ( + undef6676 ( * ( - 1 ) undef6687 ) ) 0 ) ( = ( + undef6677 ( * ( - 1 ) undef6685 ) ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2ap_max_requests_per_child^01 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^01 ) die_now^0 ) ( * ( + 0 Nl2i^01 ) i^0 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2ap_max_requests_per_child^02 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^02 ) die_now^0 ) ( * ( + 0 Nl2i^02 ) i^0 ) ) 0 ) ) ( and ( not ( <= ( + 1 ( * ( - 1 ) ap_max_requests_per_child^0 ) ( * ( - 1 ) die_now^0 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) undef54 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6618 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6631 ) ) 0 ) ( <= ( + ( - 6 ) undef6676 ) 0 ) ( = ( + ap_listeners^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = die_now^0 0 ) ( = ( + i^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = last_poll_idx^0 0 ) ( = ( + lr^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = ( + my_child_num^0 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + num_listensocks^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = requests_this_child^0 0 ) ( = ( + status^0 ( * ( - 1 ) undef6676 ) ) 0 ) ( = undef394 0 ) ( = ( + undef6676 ( * ( - 1 ) undef6687 ) ) 0 ) ( = ( + undef6677 ( * ( - 1 ) undef6685 ) ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2ap_max_requests_per_child^01 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^01 ) die_now^0 ) ( * ( + 0 Nl2i^01 ) i^0 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2ap_max_requests_per_child^02 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^02 ) die_now^0 ) ( * ( + 0 Nl2i^02 ) i^0 ) ) 0 ) ) ))
(assert ( or ( or ( and ( >= lam9n0 0 ) ( >= lam9n1 0 ) ( >= lam9n2 0 ) ( > ( + ( * Nl2CT1 lam9n1 ) ( * Nl2CT2 lam9n2 ) ( - 1 ) ) 0 ) ( = ( + ( * Nl2ap_max_requests_per_child^01 lam9n1 ) ( * Nl2ap_max_requests_per_child^02 lam9n2 ) ) 0 ) ( = ( + ( * Nl2die_now^01 lam9n1 ) ( * Nl2die_now^02 lam9n2 ) ) 0 ) ( = ( + ( * 1 lam9n0 ) ( * Nl2i^01 lam9n1 ) ( * Nl2i^02 lam9n2 ) ) 0 ) ) ( and ( >= lam10n0 0 ) ( >= lam10n1 0 ) ( >= lam10n2 0 ) ( > ( + ( * Nl2CT1 lam10n1 ) ( * Nl2CT2 lam10n2 ) ) 0 ) ( = ( + ( * Nl2ap_max_requests_per_child^01 lam10n1 ) ( * Nl2ap_max_requests_per_child^02 lam10n2 ) 1 ) 0 ) ( = ( + ( * Nl2die_now^01 lam10n1 ) ( * Nl2die_now^02 lam10n2 ) 1 ) 0 ) ( = ( + ( * 1 lam10n0 ) ( * Nl2i^01 lam10n1 ) ( * Nl2i^02 lam10n2 ) ) 0 ) ) ) ( and ( or ( and ( not ( <= ( + 1 ( * ( - 1 ) ap_max_requests_per_child^0 ) ( * ( - 1 ) die_now^0 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) undef54 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6618 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + ap_listeners^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = die_now^0 0 ) ( = ( + i^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = last_poll_idx^0 0 ) ( = ( + lr^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = ( + my_child_num^0 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + num_listensocks^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = requests_this_child^0 0 ) ( = ( + status^0 ( * ( - 1 ) undef6676 ) ) 0 ) ( = undef394 0 ) ( = ( + undef6676 ( * ( - 1 ) undef6687 ) ) 0 ) ( = ( + undef6677 ( * ( - 1 ) undef6685 ) ) 0 ) ( = ( + ( - 7 ) undef6676 ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2ap_max_requests_per_child^01 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^01 ) die_now^0 ) ( * ( + 0 Nl2i^01 ) i^0 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2ap_max_requests_per_child^02 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^02 ) die_now^0 ) ( * ( + 0 Nl2i^02 ) i^0 ) ) 0 ) ) ( and ( not ( <= ( + 1 ( * ( - 1 ) ap_max_requests_per_child^0 ) ( * ( - 1 ) die_now^0 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) undef54 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6618 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6631 ) ) 0 ) ( <= ( + 8 ( * ( - 1 ) undef6676 ) ) 0 ) ( = ( + ap_listeners^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = die_now^0 0 ) ( = ( + i^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = last_poll_idx^0 0 ) ( = ( + lr^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = ( + my_child_num^0 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + num_listensocks^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = requests_this_child^0 0 ) ( = ( + status^0 ( * ( - 1 ) undef6676 ) ) 0 ) ( = undef394 0 ) ( = ( + undef6676 ( * ( - 1 ) undef6687 ) ) 0 ) ( = ( + undef6677 ( * ( - 1 ) undef6685 ) ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2ap_max_requests_per_child^01 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^01 ) die_now^0 ) ( * ( + 0 Nl2i^01 ) i^0 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2ap_max_requests_per_child^02 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^02 ) die_now^0 ) ( * ( + 0 Nl2i^02 ) i^0 ) ) 0 ) ) ( and ( not ( <= ( + 1 ( * ( - 1 ) ap_max_requests_per_child^0 ) ( * ( - 1 ) die_now^0 ) ) 0 ) ) ( <= ( + 1 ( * ( - 1 ) undef54 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6618 ) ) 0 ) ( <= ( + 1 ( * ( - 1 ) undef6631 ) ) 0 ) ( <= ( + ( - 6 ) undef6676 ) 0 ) ( = ( + ap_listeners^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = die_now^0 0 ) ( = ( + i^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = last_poll_idx^0 0 ) ( = ( + lr^0 ( * ( - 1 ) undef6618 ) ) 0 ) ( = ( + my_child_num^0 ( * ( - 1 ) undef6631 ) ) 0 ) ( = ( + num_listensocks^0 ( * ( - 1 ) undef54 ) ) 0 ) ( = requests_this_child^0 0 ) ( = ( + status^0 ( * ( - 1 ) undef6676 ) ) 0 ) ( = undef394 0 ) ( = ( + undef6676 ( * ( - 1 ) undef6687 ) ) 0 ) ( = ( + undef6677 ( * ( - 1 ) undef6685 ) ) 0 ) ( <= ( + Nl2CT1 ( * ( + 0 Nl2ap_max_requests_per_child^01 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^01 ) die_now^0 ) ( * ( + 0 Nl2i^01 ) i^0 ) ) 0 ) ( <= ( + Nl2CT2 ( * ( + 0 Nl2ap_max_requests_per_child^02 ) ap_max_requests_per_child^0 ) ( * ( + 0 Nl2die_now^02 ) die_now^0 ) ( * ( + 0 Nl2i^02 ) i^0 ) ) 0 ) ) ) ( and ( >= lam0n0 0 ) ( >= lam0n1 0 ) ( >= lam0n2 0 ) ( >= lam0n3 0 ) ( > ( + ( * 1 lam0n1 ) ( * Nl2CT1 lam0n2 ) ( * Nl2CT2 lam0n3 ) ( - 1 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2ap_max_requests_per_child^01 lam0n2 ) ( * Nl2ap_max_requests_per_child^02 lam0n3 ) ) 0 ) ( = ( + ( * 1 lam0n0 ) ( * Nl2die_now^01 lam0n2 ) ( * Nl2die_now^02 lam0n3 ) ) 0 ) ( = ( + ( * ( - 1 ) lam0n1 ) ( * Nl2i^01 lam0n2 ) ( * Nl2i^02 lam0n3 ) ) 0 ) ) ) ))
(check-sat)
(exit)
