(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
     Constraint systems stating that a matrix interpretation is
     compatible with a rewriting system (weakly compatible with
     all rules, strictly compatible with at least one).

     Contributed by Johannes Waldmann at HTKW Leipzig.
   |)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun n0 () Int)
(assert (>= n0 0))
(declare-fun n1 () Int)
(assert (>= n1 0))
(declare-fun n2 () Int)
(assert (>= n2 0))
(declare-fun n3 () Int)
(assert (>= n3 0))
(declare-fun n4 () Int)
(assert (>= n4 0))
(declare-fun n5 () Int)
(assert (>= n5 0))
(declare-fun n6 () Int)
(assert (>= n6 0))
(declare-fun n7 () Int)
(assert (>= n7 0))
(declare-fun n8 () Int)
(assert (= n8 (* n7 n4)))
(declare-fun n9 () Int)
(assert (= n9 (+ n6 n8)))
(declare-fun n10 () Int)
(assert (= n10 (* n7 n5)))
(declare-fun n11 () Int)
(assert (= n11 (* n7 n6)))
(declare-fun n12 () Int)
(assert (= n12 (+ n6 n11)))
(declare-fun n13 () Int)
(assert (= n13 (* n7 n7)))
(declare-fun n14 () Int)
(assert (= n14 (* n7 n9)))
(declare-fun n15 () Int)
(assert (= n15 (+ n6 n14)))
(declare-fun n16 () Int)
(assert (= n16 (* n7 n10)))
(declare-fun n17 () Int)
(assert (= n17 (* n3 n12)))
(declare-fun n18 () Int)
(assert (= n18 (+ n2 n17)))
(declare-fun n19 () Int)
(assert (= n19 (* n3 n13)))
(declare-fun n20 () Int)
(assert (= n20 (* n1 n9)))
(declare-fun n21 () Int)
(assert (= n21 (+ n0 n20)))
(declare-fun n22 () Int)
(assert (= n22 (* n1 n10)))
(declare-fun n23 () Int)
(assert (= n23 (* n1 n15)))
(declare-fun n24 () Int)
(assert (= n24 (+ n0 n23)))
(declare-fun n25 () Int)
(assert (= n25 (* n1 n16)))
(assert (>= n21 n24))
(assert (>= n22 n25))
(declare-fun n26 () Int)
(assert (= n26 (* n3 n6)))
(declare-fun n27 () Int)
(assert (= n27 (+ n2 n26)))
(declare-fun n28 () Int)
(assert (= n28 (* n3 n7)))
(assert (>= n18 n27))
(assert (>= n19 n28))
(assert (>= n18 n2))
(assert (>= n19 n3))
(declare-fun n29 () Int)
(assert (= n29 (* n5 n9)))
(declare-fun n30 () Int)
(assert (= n30 (+ n4 n29)))
(declare-fun n31 () Int)
(assert (= n31 (* n5 n10)))
(declare-fun n32 () Int)
(assert (= n32 (* n5 n15)))
(declare-fun n33 () Int)
(assert (= n33 (+ n4 n32)))
(declare-fun n34 () Int)
(assert (= n34 (* n5 n16)))
(assert (>= n30 n33))
(assert (>= n31 n34))
(declare-fun n35 () Int)
(assert (= n35 (* n13 n6)))
(declare-fun n36 () Int)
(assert (= n36 (+ n12 n35)))
(declare-fun n37 () Int)
(assert (= n37 (* n13 n7)))
(assert (>= n36 n12))
(assert (>= n37 n13))
(assert (or (> n21 n24) (> n18 n27) (> n18 n2)))
(check-sat)
(exit)
