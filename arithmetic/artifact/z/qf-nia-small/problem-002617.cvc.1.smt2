(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Bool)
(declare-fun P_6 () Int)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Bool)
(declare-fun P_9 () Int)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_13 () Int)
(declare-fun P_14 () Bool)
(declare-fun P_15 () Bool)
(declare-fun P_16 () Bool)
(declare-fun P_17 () Bool)
(declare-fun P_18 () Bool)
(declare-fun P_19 () Bool)
(declare-fun P_20 () Bool)
(declare-fun P_21 () Bool)
(declare-fun P_22 () Bool)
(declare-fun P_23 () Bool)
(declare-fun P_24 () Bool)
(declare-fun P_25 () Bool)
(declare-fun P_26 () Bool)
(declare-fun P_27 () Bool)
(declare-fun P_28 () Bool)
(declare-fun P_29 () Bool)
(declare-fun P_30 () Int)
(declare-fun P_31 () Int)
(assert (<= 0 P_6))
(assert (<= P_6 3))
(assert (<= 0 P_9))
(assert (<= P_9 7))
(assert (<= 0 P_10))
(assert (<= P_10 511))
(assert (<= 0 P_11))
(assert (<= P_11 511))
(assert (<= 0 P_12))
(assert (<= P_12 1023))
(assert (<= 0 P_13))
(assert (<= P_13 3))
(assert (<= 0 P_30))
(assert (<= P_30 127))
(assert (<= 0 P_31))
(assert (<= P_31 127))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (not P_5))) (let ((?v_5 (not (or (or (or P_2 P_3) (not P_4)) (not (ite ?v_0 (ite (= P_6 0) false (ite (= P_6 1) P_7 (ite (= P_6 2) P_8 false))) false))))) (?v_1 (ite (= P_9 0) 1 (ite (= P_9 1) 2 (ite (ite (= P_9 2) false (ite (= P_9 3) false (ite (= P_9 4) false (ite (= P_9 5) false (ite (= P_9 6) false false))))) 1 0))))) (let ((?v_3 (not (< (ite (< ?v_1 2) ?v_1 (- ?v_1 4)) 0)))) (let ((?v_2 (ite ?v_3 P_10 P_11))) (let ((?v_6 (ite (< ?v_2 256) ?v_2 (- ?v_2 512))) (?v_7 (* P_13 256))) (let ((?v_4 (ite ?v_3 P_12 (+ ?v_7 P_31))) (?v_8 (ite ?v_3 P_12 (+ ?v_7 (ite (not (not (and (not P_14) (and (not P_15) (and (not P_16) (and (not P_17) (and (not P_18) (and (not P_19) (and (not P_20) (and (not P_21) (and (not P_22) (and (not P_23) (and (not P_24) (and (not P_25) (and (not P_26) (and (not P_27) (and (not P_28) (not P_29)))))))))))))))))) P_30 P_31))))) (= (+ (* 524288 dz) rz) (- (ite (not ?v_5) 0 (ite ?v_0 (* ?v_6 (ite (< ?v_4 512) ?v_4 (- ?v_4 1024))) 0)) (ite ?v_5 (* ?v_6 (ite (< ?v_8 512) ?v_8 (- ?v_8 1024))) 0))))))))))
(assert (> rz 0))
(assert (< rz 524288))
(check-sat)
(exit)
