(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
     Constraint systems stating that a matrix interpretation is
     compatible with a rewriting system (weakly compatible with
     all rules, strictly compatible with at least one).

     Contributed by Johannes Waldmann at HTKW Leipzig.
   |)
(set-info :category "crafted")
(set-info :status sat)
(declare-fun n0 () Int)
(assert (>= n0 0))
(declare-fun n1 () Int)
(assert (>= n1 0))
(declare-fun n2 () Int)
(assert (>= n2 0))
(declare-fun n3 () Int)
(assert (>= n3 0))
(declare-fun n4 () Int)
(assert (>= n4 0))
(declare-fun n5 () Int)
(assert (>= n5 0))
(declare-fun n6 () Int)
(assert (>= n6 0))
(declare-fun n7 () Int)
(assert (>= n7 0))
(declare-fun n8 () Int)
(assert (>= n8 0))
(declare-fun n9 () Int)
(assert (>= n9 0))
(declare-fun n10 () Int)
(assert (>= n10 0))
(declare-fun n11 () Int)
(assert (>= n11 0))
(declare-fun n12 () Int)
(assert (>= n12 0))
(declare-fun n13 () Int)
(assert (>= n13 0))
(declare-fun n14 () Int)
(assert (>= n14 0))
(declare-fun n15 () Int)
(assert (>= n15 0))
(declare-fun n16 () Int)
(assert (>= n16 0))
(declare-fun n17 () Int)
(assert (>= n17 0))
(declare-fun n18 () Int)
(assert (>= n18 0))
(declare-fun n19 () Int)
(assert (>= n19 0))
(declare-fun n20 () Int)
(assert (>= n20 0))
(declare-fun n21 () Int)
(assert (>= n21 0))
(declare-fun n22 () Int)
(assert (>= n22 0))
(declare-fun n23 () Int)
(assert (>= n23 0))
(declare-fun n24 () Int)
(assert (= n24 (* n13 n12)))
(declare-fun n25 () Int)
(assert (= n25 (+ n12 n24)))
(declare-fun n26 () Int)
(assert (= n26 (* n13 n13)))
(declare-fun n27 () Int)
(assert (= n27 (* n13 n20)))
(declare-fun n28 () Int)
(assert (= n28 (+ n12 n27)))
(declare-fun n29 () Int)
(assert (= n29 (* n13 n21)))
(declare-fun n30 () Int)
(assert (= n30 (* n26 n12)))
(declare-fun n31 () Int)
(assert (= n31 (+ n25 n30)))
(declare-fun n32 () Int)
(assert (= n32 (* n26 n13)))
(declare-fun n33 () Int)
(assert (= n33 (* n9 n28)))
(declare-fun n34 () Int)
(assert (= n34 (+ n8 n33)))
(declare-fun n35 () Int)
(assert (= n35 (* n9 n29)))
(declare-fun n36 () Int)
(assert (= n36 (* n11 n16)))
(declare-fun n37 () Int)
(assert (= n37 (+ n10 n36)))
(declare-fun n38 () Int)
(assert (= n38 (* n11 n17)))
(declare-fun n39 () Int)
(assert (= n39 (* n11 n20)))
(declare-fun n40 () Int)
(assert (= n40 (+ n10 n39)))
(declare-fun n41 () Int)
(assert (= n41 (* n11 n21)))
(declare-fun n42 () Int)
(assert (= n42 (* n21 n12)))
(declare-fun n43 () Int)
(assert (= n43 (+ n20 n42)))
(declare-fun n44 () Int)
(assert (= n44 (* n21 n13)))
(declare-fun n45 () Int)
(assert (= n45 (* n3 n12)))
(declare-fun n46 () Int)
(assert (= n46 (+ n2 n45)))
(declare-fun n47 () Int)
(assert (= n47 (* n3 n13)))
(assert (>= n46 n2))
(assert (>= n47 n3))
(declare-fun n48 () Int)
(assert (= n48 (* n7 n12)))
(declare-fun n49 () Int)
(assert (= n49 (+ n6 n48)))
(declare-fun n50 () Int)
(assert (= n50 (* n7 n13)))
(assert (>= n49 n6))
(assert (>= n50 n7))
(declare-fun n51 () Int)
(assert (= n51 (* n9 n12)))
(declare-fun n52 () Int)
(assert (= n52 (+ n8 n51)))
(declare-fun n53 () Int)
(assert (= n53 (* n9 n13)))
(assert (>= n34 n52))
(assert (>= n35 n53))
(assert (>= n34 n8))
(assert (>= n35 n9))
(declare-fun n54 () Int)
(assert (= n54 (* n3 n14)))
(declare-fun n55 () Int)
(assert (= n55 (+ n2 n54)))
(declare-fun n56 () Int)
(assert (= n56 (* n3 n15)))
(assert (>= n55 n10))
(assert (>= n56 n11))
(declare-fun n57 () Int)
(assert (= n57 (* n7 n14)))
(declare-fun n58 () Int)
(assert (= n58 (+ n6 n57)))
(declare-fun n59 () Int)
(assert (= n59 (* n7 n15)))
(assert (>= n58 n10))
(assert (>= n59 n11))
(declare-fun n60 () Int)
(assert (= n60 (* n11 n22)))
(declare-fun n61 () Int)
(assert (= n61 (+ n10 n60)))
(declare-fun n62 () Int)
(assert (= n62 (* n11 n23)))
(assert (>= n37 n61))
(assert (>= n38 n62))
(assert (>= n37 n6))
(assert (>= n38 n7))
(declare-fun n63 () Int)
(assert (= n63 (* n11 n18)))
(declare-fun n64 () Int)
(assert (= n64 (+ n10 n63)))
(declare-fun n65 () Int)
(assert (= n65 (* n11 n19)))
(assert (>= n40 n64))
(assert (>= n41 n65))
(assert (>= n40 n2))
(assert (>= n41 n3))
(declare-fun n66 () Int)
(assert (= n66 (* n19 n12)))
(declare-fun n67 () Int)
(assert (= n67 (+ n18 n66)))
(declare-fun n68 () Int)
(assert (= n68 (* n19 n13)))
(declare-fun n69 () Int)
(assert (= n69 (* n32 n18)))
(declare-fun n70 () Int)
(assert (= n70 (+ n31 n69)))
(declare-fun n71 () Int)
(assert (= n71 (* n32 n19)))
(assert (>= n67 n70))
(assert (>= n68 n71))
(declare-fun n72 () Int)
(assert (= n72 (* n23 n12)))
(declare-fun n73 () Int)
(assert (= n73 (+ n22 n72)))
(declare-fun n74 () Int)
(assert (= n74 (* n23 n13)))
(declare-fun n75 () Int)
(assert (= n75 (* n32 n22)))
(declare-fun n76 () Int)
(assert (= n76 (+ n31 n75)))
(declare-fun n77 () Int)
(assert (= n77 (* n32 n23)))
(assert (>= n73 n76))
(assert (>= n74 n77))
(declare-fun n78 () Int)
(assert (= n78 (* n13 n16)))
(declare-fun n79 () Int)
(assert (= n79 (+ n12 n78)))
(declare-fun n80 () Int)
(assert (= n80 (* n13 n17)))
(declare-fun n81 () Int)
(assert (= n81 (* n17 n31)))
(declare-fun n82 () Int)
(assert (= n82 (+ n16 n81)))
(declare-fun n83 () Int)
(assert (= n83 (* n17 n32)))
(assert (>= n79 n82))
(assert (>= n80 n83))
(declare-fun n84 () Int)
(assert (= n84 (* n26 n20)))
(declare-fun n85 () Int)
(assert (= n85 (+ n25 n84)))
(declare-fun n86 () Int)
(assert (= n86 (* n26 n21)))
(declare-fun n87 () Int)
(assert (= n87 (* n21 n25)))
(declare-fun n88 () Int)
(assert (= n88 (+ n20 n87)))
(declare-fun n89 () Int)
(assert (= n89 (* n21 n26)))
(assert (>= n85 n88))
(assert (>= n86 n89))
(declare-fun n90 () Int)
(assert (= n90 (* n19 n14)))
(declare-fun n91 () Int)
(assert (= n91 (+ n18 n90)))
(declare-fun n92 () Int)
(assert (= n92 (* n19 n15)))
(declare-fun n93 () Int)
(assert (= n93 (* n17 n14)))
(declare-fun n94 () Int)
(assert (= n94 (+ n16 n93)))
(declare-fun n95 () Int)
(assert (= n95 (* n17 n15)))
(assert (>= n91 n94))
(assert (>= n92 n95))
(declare-fun n96 () Int)
(assert (= n96 (* n23 n14)))
(declare-fun n97 () Int)
(assert (= n97 (+ n22 n96)))
(declare-fun n98 () Int)
(assert (= n98 (* n23 n15)))
(declare-fun n99 () Int)
(assert (= n99 (* n44 n14)))
(declare-fun n100 () Int)
(assert (= n100 (+ n43 n99)))
(declare-fun n101 () Int)
(assert (= n101 (* n44 n15)))
(assert (>= n97 n100))
(assert (>= n98 n101))
(declare-fun n102 () Int)
(assert (= n102 (* n15 n16)))
(declare-fun n103 () Int)
(assert (= n103 (+ n14 n102)))
(declare-fun n104 () Int)
(assert (= n104 (* n15 n17)))
(declare-fun n105 () Int)
(assert (= n105 (* n15 n22)))
(declare-fun n106 () Int)
(assert (= n106 (+ n14 n105)))
(declare-fun n107 () Int)
(assert (= n107 (* n15 n23)))
(assert (>= n103 n106))
(assert (>= n104 n107))
(declare-fun n108 () Int)
(assert (= n108 (* n15 n20)))
(declare-fun n109 () Int)
(assert (= n109 (+ n14 n108)))
(declare-fun n110 () Int)
(assert (= n110 (* n15 n21)))
(declare-fun n111 () Int)
(assert (= n111 (* n15 n18)))
(declare-fun n112 () Int)
(assert (= n112 (+ n14 n111)))
(declare-fun n113 () Int)
(assert (= n113 (* n15 n19)))
(assert (>= n109 n112))
(assert (>= n110 n113))
(assert true)
(assert (>= n26 1))
(assert (or (> n46 n2) (> n49 n6) (> n34 n52) (> n34 n8) (> n55 n10) (> n58 n10) (> n37 n61) (> n37 n6) (> n40 n64) (> n40 n2)))
(check-sat)
(exit)
