(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
    Sequential equivalence checking.
    Calypto Design Systems, Inc. <www.calypto.com>
  |)
(set-info :category "industrial")
(set-info :status sat)
(declare-fun P_2 () Bool)
(declare-fun P_3 () Bool)
(declare-fun P_4 () Bool)
(declare-fun P_5 () Bool)
(declare-fun P_6 () Int)
(declare-fun P_7 () Bool)
(declare-fun P_8 () Bool)
(declare-fun P_9 () Bool)
(declare-fun P_10 () Int)
(declare-fun P_11 () Int)
(declare-fun P_12 () Int)
(declare-fun P_14 () Int)
(assert (<= 0 P_6))
(assert (<= P_6 3))
(assert (<= (* 256 (- 1)) P_10))
(assert (<= P_10 255))
(assert (<= (* 256 (- 1)) P_11))
(assert (<= P_11 255))
(assert (<= (* 512 (- 1)) P_12))
(assert (<= P_12 511))
(assert (<= (* 512 (- 1)) P_14))
(assert (<= P_14 511))
(declare-fun dz () Int)
(declare-fun rz () Int)
(assert (let ((?v_0 (not P_5))) (let ((?v_1 (not (or (or (or P_2 P_3) (not P_4)) (not (ite ?v_0 (ite (= P_6 0) false (ite (= P_6 1) P_7 (ite (= P_6 2) P_8 false))) false))))) (?v_2 (ite (not P_9) P_10 P_11))) (= (+ (* 524288 dz) rz) (- (ite (not ?v_1) 0 (ite ?v_0 (* ?v_2 P_14) 0)) (ite ?v_1 (* ?v_2 P_12) 0))))))
(assert (> rz 0))
(assert (< rz 524288))
(check-sat)
(exit)
