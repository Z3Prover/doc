# Solver Engines

Z3 contains a collection of core engines for solving formulas.
The engine used by default is based on the CDCL(T) architecture, but other engines
are available and invoked for special classes of formulas where they are more suitable.

## CDCL(T) - SAT in the light of Theory Solvers

We here describe the solvers marked as SAT and SMT in Figure [#fig-system].

When SAT solving, as implemented using conflict driven clause learning, CDCL, is combined with theory solving
it augments propositional satisfiability with theory reasoning. The CDCL solver maintains a set of 
formulas $F$ and a partial assignment to literals in $F$ that we refer to as $M$.  
The solver starts in a state $\langle M, F\rangle$, where $M$ is initially empty. 
It then attempts to complete $M$ to a full model of $F$ to show that $F$ is satisfiable
and at the same time adds consequences
to $F$ to establish that $F$ is unsatisfiable. The transition between the search for a satisfying
solution and a consequence is handled by a _conflict resolution_ phase. 
The state during conflict resolution is a triple $\langle M; F; C\rangle$, 
where, besides the partial model $M$ and formula $F$, there is also a conflict clause $C$
false under $M$.
The auxiliary function _Theory_ is used to advance decisions, propagations and identify conflicts.
If _Theory_ determines that $S$ is conflicting with respect to the literals in $M$ it produces a conflict clause $C$, that
contains a subset of conflicting literals from $M$. It can also produce a trail assignment $A$, which is either a propagation
or decision and finally, if it determines that $S$ is satisfiable under trail $M$ it produces $SAT$.

From the point of view of the CDCL(T) solver
theory reasoning is a module that can take a state during search and produce verdicts on how search should progress.
We use the following verdicts of a theory invocation $\Theory(M;F)$:

* $SAT$. The theory solver may determine that the assignment $M$ extends to a model of $F$.
* Conflict $C$. The theory solver may determine that a subset $M$ is inconsistent relative to $F$. 
  In the propositional case an inconsistent clause $C$ is a member of $F$, such that each literal in $C$ is false in $M$.
  With theory reasoning, $C$ does not need to correspond to a clause in $F$, but be assignments in $M$ that are inconsistent modulo theories.
* A propagation $\Propagation{\ell}{C}$. The theory solver propagates a literal $\ell$.
* A decision $\Decision{\ell}$. 

Thus, the verdict determes whether the partial model extends to a model of the theories, 
can identify a subset of $M$ as an unsatisfiable core, 
propagate the truth assignment of a literal $\ell$, or create a new case split $\Decision{\ell}$ for a
literal $\ell$ that has not already been assigned in $M$.
We write $SAT = \Theory(M,F)$ when the verdict is that $M$ extends to a valid theory model of $F$, 
we write $C = \Theory(M,F)$ when $C$ is a conflict clause, based on negated literals from $M$ and 
$A = \Theory(M,F)$, when the verdict $A$ is either a propagation or decision.


~ MathPre

\mbox{Sat} & \langle M; {F} \rangle                      & \Rightarrow & SAT                                                    & SAT = \Theory(M, F)

\mbox{Conflict} & \langle M; F \rangle                        & \Rightarrow & \langle M; F; C \rangle                                & C = \Theory(M, F) 

\mbox{Augment} & \langle M; {F} \rangle                      & \Rightarrow & \langle M, A; F \rangle                                 & A = \Theory(M, F) 

\mbox{Unsat} & \langle M; \emptyset, {F} \rangle           & \Rightarrow & UNSAT 

\mbox{Resume} & \langle M, \Decision{\overline{\ell}}; {F}; C \rangle & \Rightarrow & \langle M, \Propagation{\ell}{C}; {F} \rangle         & \ell \in {C}

\mbox{Resolve} & \langle M, \Propagation{\ell}{C'}; F; {C}\rangle     & \Rightarrow & \langle M; F; (C \setminus \{\overline{\ell}\}) \cup (C'\setminus\{{\ell}\}) \rangle & \overline{\ell} \in {C}

\mbox{Backtrack} & \langle M, A; F; C \rangle               & \Rightarrow & \langle M; F; {C} \rangle                              & otherwise

~

~Example
Consider the formula $(x > 0 \vee y > 0) \wedge x + y < 0$.
The initial state of search is 
~~Math
\langle \epsilon; (x > 0 \vee y > 0)\wedge x + y < 0\rangle
~~
based on the empty partial assignment $\epsilon$ and the original formula.
A possible next state is to propagate on the unit literal $x + y < 0$, producing
~~Math
\langle \Propagation{x + y < 0}{x + y < 0}; (x > 0 \vee y > 0) \wedge x + y < 0\rangle
~~
This step may be followed by a case split setting $x > 0$.
~~Math
\langle \Propagation{x + y < 0}{x + y < 0},\Decision{\neg(x > 0)}; (x > 0 \vee y > 0) \wedge x + y < 0\rangle
~~
which triggers a propagation
~~Math
\langle \Propagation{x + y < 0}{x + y < 0},\Decision{\neg(x > 0)},\Propagation{y > 0}{x > 0 \vee y > 0}; (x > 0 \vee y > 0) \wedge x + y < 0\rangle
~~
The resulting state is satisfiable in the theory of arithmetic. 
On the other hand, if we had made the case split on $x > 0$ instead of $\neg(x > 0)$, 
and then guess the assignment $y > 0$, 
we would have encountered a conflicting state with conflict clause 
$\neg (x > 0) \vee \neg (y > 0)$[^unitremove]:
~~Math
\langle \Propagation{x + y < 0}{x + y < 0},\Decision{x > 0},\Decision{y > 0};\
 (x > 0 \vee y > 0) \wedge x + y < 0; \ \neg (x > 0) \vee \neg (y > 0)\rangle
~~
The last decision is then reverted to produce the satisfiable state
~~Math
\langle \Propagation{x + y < 0}{x + y < 0},\Decision{x > 0},\Propagation{\neg(y > 0)}{\neg (x > 0) \vee \neg (y > 0)};\
 (x > 0 \vee y > 0) \wedge x + y < 0\rangle
~~
A third scenario uses theory propagation. In this scenario, the decision $x > 0$ is made, but
instead of making a decision $y > 0$, the theory solver for arithmetic is given a chance to find
opportunities for propagation. It deduces that $x + y < 0, x > 0$ implies $\neg(y > 0)$,
and therefore establishes the theory propagation
~~Math
\langle \Propagation{x + y < 0}{x + y < 0},\Decision{x > 0},\Propagation{\neg(y > 0)}{\neg(y > 0) \vee \neg (x > 0)};\
 (x > 0 \vee y > 0) \wedge x + y < 0\rangle
~~
We are again eliding the unit literal $x + y < 0$ from the explanation for $\neg(y > 0)$.
~
[^unitremove]: To keep the formula short we have applied a shortcut and removed the literal $\neg(x + y < 0)$ from the conflict clause.
In practice, solvers automatically remove unit literals that are false from conflict clauses. 

### Other Inference Rules

In the initial overview of the CDCL(T) loop we left out other inference rules that are integral to efficient search.

* Learn: Conflict clauses are added to the set of formulas $F$. Conflict clauses are marked as redundant.

* Restart: A suffix of the current partial model $M$ is abandoned.

* In-processes: clauses are inferred or marked redundant based on global inferences. 

* Garbage Collection: Redundant clauses are removed from $F$. 

### Invariants

To be well-behaved we expect _Theory_ to produce propagations on literals that don't already appear in $M$, and crucially
enforce the main invariants:

* The conflict clause $C$ is false in $M$ and a consequence of $F$. Thus, 
  for state $\langle M; F, C \rangle$ we have $F \models_T \bigvee_{\ell \in C} \neg \ell$, as well as $\overline{C} \in M$.
* A propagated literal is justified by the current partial model $M$. Thus, 
  for state $\langle M \Propagation{\ell}{C}, F \rangle$ we have $F \models_T C$, $\ell \in C$, 
  and for each $\ell' \in C \setminus \{ \ell \}: \overline{\ell}' \in M$.

That is, each conflict clause is a consequence of $F$ and each propagation is also a consequence of $F$, and the premises of a propagation is justified by $T$.

~ Framed
TODO: "peel the onion" further in the user-propagator section based on VMCAI material? In other words, expose more information about internal control.
~

## NLSAT (MC-SAT)

Z3 contains a dedicated engine for non-linear arithmetic over polynomials (Tarski's fragment [@Tarski]) [@JovanovicM12].
The theory is decidable using cylindric algebraic decomposition (CAD) [@Collins74]. The NLSAT engine implements the decision
procedure for polynomial arithmetic. It uses a _model constructing satisfiabiltiy engine_ (MC-SAT) to guide uses of CAD to
a focused set of conflict clauses. Thus, the CAD algorithm is used on fragments of the entire formula for determining
satisfiability as opposed to globally on an entire formula.

~ Framed
Say something about the various data-structures used by NLSAT?
~

The NLSAT engine is available as a one-shot engine for non-linear arithmetic formulas. It is also integrated with decision procedures
in the CDCL(T) engine as an _end-game_ solver. 


## SPACER

Formulas that range over _Constrained Horn Clauses_ (CHC) are solved using a dedicated engine, SPACER.
A Constrained Horn Clause is a formula of the form

~ MathPre
   & \forall \vec{x} \ . \ \varphi \land P(t) \land Q(s) \implies R(u)    
or & \forall \vec{x} \ . \ \varphi \land P(t) \land Q(s) \implies \false
~ 

where $\varphi$ is a formula that is interpreted over a combination of theories, $P, Q, R$ are uninterpreted predicates, 
and $t, s, u$ are terms over the bound variables $\vec{x}$ and the theories from $\varphi$. 
The SPACER searches for a model for $P, Q, R$ such that all clauses are true
under the model. 



## QSAT

The QSAT algorithm determines satisfiability of quantified formulas using theories that allow quantifier projection.
There are two instances of QSAT, one for combinations of linear arithmetic, algebraic datat-types, bit-vectors and arrays,
the other is for non-linear polynomial arithmetic formulas over reals.
The algorithm can be viewed as playing a _game_ of satisfying a quantifier-free body of a formula with quantifier prefix.
An _existential_ player attemps to satisfy the body by finding instances to the existential quantifiers,
the _universal_ player attempts to satisfy the negation of the body by finding instances to the universal quantifiers.
The game is played by processing the quantifiers outside-in.
If a player get stuck, it is either because the formula is satisifable, unsatisfiable, or a solution to an outer quantifier
was a losing move. It uses unsatisfiable cores and _quantifier projection_ to create a quantifier free formula that blocks
the previous outer move.

We provide an outline of QSAT using an example.

~ Begin Example

Assume we have the formula


~~ MathPre
F & = & z \geq 0 \land ((x \geq 0 \land y \geq 0) \lor y + z \leq 1) 
G & = & \exists x \forall y \exists z \ . \ F
~~

Then $F_1 = F, F_2 = \neg F, F_3 = F, F_4 = \neg F$.

The existential player works on odd levels, and the universal player at even levels.
Subformulas are assigned two kinds of levels, $\level_\forall$, which is the
highest index of a universally quantified variable, while $\level_\exists$
is the highest index of an existentially quantified variable.

A player at level $j-1$ can use a _strategy_ to force an opponent $j$ to satisfy sub-formulas it has control over.
The strategy formula is conjoined to $F_j$ when player $j$ attempts to find a solution to variables that are
quantified at its level.

When a player is unable to make a move, the formula $F_j \land \strategy$ is unsatisfiable, it computes an unsatisfiable core
based on the strategy and projects variables at level $j$ based on the solution that player $j-1$ used to satisfy $\neg F_j$.

* First we determine if $F_1$ is satisfiable, it is with model $M = [x \mapsto 0, z \mapsto 3, y \mapsto -2]$.
The atomic formulas $x \geq 0$ and $z \geq 0$ and $y + z \leq 1$ are true. 

* $\strategy(M, 2) = z \geq 0 \land x \geq 0$, because $\level_\forall(z \geq 0) = \level_\forall(x \geq 0) = 0$, but
$\level_\forall(y \geq 0) = \level_\forall(y + z \leq 1) = 2$.
Since there are no universal quantifiers in the formula $z \geq 0$, 
we have $\level_\forall(z \geq 0) = 0$.

* $F_2 \land x \geq 0 \land z \geq 0$ is satisfiable with model $M = [x \mapsto 0, z \mapsto 3, y \mapsto -1]$.

* $\strategy(M, 3) = z \geq 0 \land x \geq 0 \land \neg (y \geq 0)$ because $\level_\exists(y + z \leq 1) = 3$ 
and $\level_\exists(y \geq 0) = 0$. 

* $F_3 \land z \geq 0 \land x \geq 0 \land \neg (y \geq 0)$ is satisfiable with model $M = [x \mapsto 0, z \mapsto 0, y \mapsto -1]$.

* $F_4 \land z \geq 0 \land x \geq 0 \land \neg (y \geq 0) \land y + z \leq 1$ is unsatisfiable, in particular, 
$
	\neg F \implies \neg (z \geq 0 \land y + z \leq 1).
$
So we set $I := \neg (z \geq 0 \land y + z \leq 1)$ and compute $J := \Mbp(M, z, z \geq 0 \land y + z \leq 1) = y \leq 1$.
So $F_2 \leftarrow F_2 \land \neg (y \leq 1)$ and search back-jumps to level 2. 

* $F_2$ is satisfiable with model $M = [x \mapsto -1, y \mapsto 2, z \mapsto -3]$.

* $F_3 \land \neg (x \geq 0) \land \neg (y \leq 1)$ is unsatisfiable with core $\neg (x \geq 0)$, and we back-jump to $j = 1$.

* $F_1$ is satisfiable with $M = [x \mapsto 0, z \mapsto 3, y \mapsto 2]$.

* $F_2 \land z \geq 0 \land z \geq 0$ is unsatisfiable, hence $F$ is true.

~ End Example