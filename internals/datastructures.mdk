# Data-structure and algorithm internals

This section pops the abstraction level and examines the main data-structures, organization, 
algorithms and heuristics that are central to implementation of Z3. We examine the data-structures
used for terms and formulas and then describe the setting for how theory solvers interact 
with the main CDCL(T) engine. 

## Terms and Formulas

Z3 treats terms and formulas as a single entity, expressions. Expressions of Boolean type can be used as formulas, 
but they can also be nested within non-Boolean terms, as arguments to functions. Expressions are _hash-consed_, meaning
they are unique up to term structure. It uses a hash-table when constructing a fresh term, such that if the same function
is applied to the same arguments as a previously constructed term, 
the result of creating the term is the same pointer as old term.

Variables that are to be bound by quantifiers are indexed using de-Brujin conventions, 
such that the index used for the inner-most quantified variable is 0, and incremented outwards.
For example $\exists x \forall y, z, p(x, y, z)$ uses de-Bruijn indices 0 for $z$ and 1 for $y$, and 2 for $x$.
To spare users an error-prone process of keeping track of indices, 
the external API offers a facility to create a quantified expression using a set of constant expressions instead of
variables. 

<!---
* term structure
  * free/bound variable de-Bruijn index
  * function and arguments
  * quantifier
* hash-cons
* Lambdas as arrays
--->

## Representing assertions

From input and during pre-processing assertions are represented in a structure of the form

~ MathPre
 \langle & \varphi & : & \mathit{Bool}       & \mbox{the current formula}
         & \pi     & : & \mathit{Proof}      & \mbox{a justification for the formula}
         & \delta  & : & \mathit{Dependency} & \mbox{A dependency structure for the formula}
 \rangle
~

For a standard input assertion $\varphi$ the structure is 
initialized as $\langle \varphi, \mathtt{asserted}(\varphi), null \rangle$.
The proof of $\varphi$ is that it was asserted. There are no dependencies for $\varphi$.

Input assertions can also be _tracked_ for unsatisfiable cores.
The SMTLIB2 contains syntax for adding _named_ formulas. The formulas are tracked by their names
and the solver can produce unsatisfiable cores over the tracking names. 
Internally, the names are treated as (fresh) Boolean literals. Thus, formulas can also be
tracked by arbitrary formulas. The programmatic API contains a function `Z3_solver_assert_and_track`
(and variants surfaced in various programming languages) that allows asserting a formula modulo
a tracking assumption. When adding tracked formulas using tracking assumption $p$, the
structure is initialzed as $\langle \varphi, \mathtt{asserted}(\varphi), p \rangle$.

Tactics ([#sec-tactics]) perform updates on the triple representation by applying inferences.
Properly producing proof objects for tactics and tracking dependencies is supported in a 
best-effort manner: several tactics are disabled when the user requires proof objects or 
tracking dependencies. Dependencies can be viewed as light-weight proof objects.
The mechanism for tracking dependencies is based on tracking a cone of influence, by taking unions,
of formulas used to derive a new consequence. 

## Compiling terms and formulas into clauses and E-nodes

While the input to Z3 is a set of formulas, the core solver works with clauses and E-nodes.
The _internalization_ process converts formulas into the internal data-structures bottom-up.
Every sub-term that corresponds to a Boolean connective is compiled, thanks to the Tseitin transformation,
into a fresh literal with associated set of clauses that define the literal.
The terms from Boolean connectives may be assigned E-nodes, but the nodes do not
participate in congruence rules, nor are, by default, allowed to be merged with the constants $\true$ or $\false$:
The CDCL(T) engine already enforces congruence rules and consistency with assignments to $\true/\false$.
The default is overridden if a term occurs as an argument to a non-Boolean connective. For eample
in the term $f(a \land b)$, the node $n_{a \land b}$ merges with $\true/\false$ when the truth value
to the literal $\ell_{a \land b}$ is propagated. In this way, congruence closure can ensure consistency with
respect to occurrences of $f$.

Compilation of terms into E-nodes uses a top-down traversal of terms. The top-down traversal is replicated in each theory solver
where the compilation of terms depends on the solver. The arithmetic solver, for instance, compiles the term $x + y + x$ into a
node $n$ and adds the basic row $n = 2x + y$. Top-down compilation does not play well with small static stack sizes allocated by
$\text{C}\texttt{++}$ runtimes. The new core in Z3 therefore introduces a visitor pattern to allow top-down processing without using recursion stacks.

E-nodes are compiled dynamically during search. When a quantifier is instantiated or a solver introduces a new lemma that uses new terms, the
E-nodes corresponding to new terms are introduced at a search level that may later be popped. Learned clauses may refer to these new terms
in a scope where they are no longer internalized into E-nodes. The core solver therefore interacts with the scope mechanism of the CDCL solver
to _replay_ literals that are defined in deeper scopes. 


## Interaction with the CDCL(T) core

In Z3, the solver for the theory of equality acts as a gate-keeper between the SAT solver and solvers for other theories.
As Section [#sec-cdcl-t] outlines, the SAT solver maintains a set of ground clauses $F$ and performs case splits and 
propagations and in this process consults the theory solver $\Theory(M;F)$ for the next propagation, case split or
whether $M$ is a theory consistent model of $F$.

There is a good reason why the theory of equality is central: this theory is shared among all other theories.
Disjoint theory solvers establish satisfiability by reconciling equalities among shared sub-terms.

Every E-node has an attached set of theory solvers. A theory solver for a theory $T$ gets attached to a node $n$ when

* $n.f$, the function symbol of $n$, is from the signature of $T$.
* $n.P$, a parent of $n$, belongs to $T$.
* The sort of $n$ is handled by $T$.

Then, when a Boolean node $n$ is assigned to $\true$ or $\false$ by the CDCL solver, the truth assignment to $n$
is broadcast to all solvers attached to $n$. 
Similarly, when two nodes $n, n'$ are merged, and the theory $T$ is attached to a sibling of $n$ and a sibling of $n'$, 
then the equality $n \simeq n'$ is broadcast to $T$.

In some cases the core also broadcasts disequalities between E-nodes. 
Solvers cannot rely on complete propagation of disequalities, it is generally 
too costly to enumerate all pairwise disequalities.
Propagation of disequalities is triggered by when the CDCL(T) core asserts a
disequality $n \not\simeq n'$, or when a theory solver propagates a disequality.

The set of terms tracked by a given theory is always a subset of all terms used in a formula.
Particularly, if a formula encodes bit-vector properties, there are thousands of terms used for encoding
Boolean formulas. Those terms are irrelevant to the theories. Each theory therefore maintains a dense
encoding of the terms it tracks by maintaining an array of E-nodes associated with the theory.
The index into this array is the identifier of the theory variable. This identifier is stored in the E-node
data-structure so that when the core broadcasts an equality about $n \simeq n'$ it accesses the theory variables $v_n$
and $v_{n'}$ that are indices to the array and broadcast $v_{n} \simeq v_{n'}$. The original nodes $n, n'$ are accessed
from the theory solver's array, together with other attributes of $n, n'$ that are specific to the theory solver.
For example, the array solver maintained several attributes, such as the select terms where an array node occurs.


## Model-based theory combination { #sec-mbtc }

The main theories, arrays, arithmetic, algebraic data-types, uninterpreted functions are signature disjoint.
A central ingredient in combining theory solvers into a complete solver is to reconcile equalities between
shared sub-terms. Z3 uses a method called _model-based theory combination_ to broadcast equalities on demand.


~ Begin Example
Consider the following formula that combines arithmetic for integers $x$, $y$ and the uninterpreted function $f$.

~~ Math
  x = f(y-1), f(x) \neq f(y), 0 \leq x \leq 1, 0 \leq y \leq 1
~~

The purified version of the formula takes the form, where we introduce a proxy variable $z$ for the term
$y-1$:

~~ Math
  {\color{blue}{x = f(z), f(x) \neq f(y)}}, {\color{red}{0 \leq x \leq 1, 0 \leq y \leq 1, z = y - 1}}
~~
~ End Example

Purification is a formal tool to help us reason about theory combinations. In practice, no new variables
are introduced. The proxy variable $z$ is just a shorthand for the term $y - 1$.

Returning to our example, the theory solver for $f$ and the solver for arithmetic only need to reconcile
equalities between shared sub-terms $x, y, z$ in order to establish satisfiability of the overall formula.
The theory of equality that handles $f$ is agnostic to the specific values of $x, y, z$ but needs to know
which values are equal and disequal.

~ Begin Example
Suppose we have a model over arithmetic that sets $x = y = 1, z = 0$ and a model for $f$ that
sets $x = \star_1, y = \star_2, z = \star_1$,
$f(x) = \mathit{if}\ x = \star_1\ \mathit{then}\ \star_1\ \mathit{else}\ \star_2$.
The two models cannot be reconciled as the equality $x \simeq y$ from the arithmetical model contradicts the
partition imposed by the EUF model.

~ End Example


The way Z3 reconciles the equalities is by inspecting the E-graph on final checks.
If a theory solver induces an equality between two nodes $n, n'$,
but $n \not\sim n'$ (the nodes are not in the same equivalence class), then
the theory solver creates a fresh atom $n \simeq n'$ and sets the _phase_ of the atom to $\true$.
The atom is introduced to the CDCL(T) solver that performs a case split on it.
The _phase_ of a literal is a flag that instructs the solver to choose the case split.
It first case splits on $n \simeq n'$ and only backtracking and propagation may force the case $n \not\simeq n'$.

~ Begin Example
The arithmetic solver creates the literal $x \simeq y$ and the CDCL(T) core assumes this equality.
Since $x,y$ are shared, the equality is known to both theories. The equality contradicts the EUF
theory, and it infers $x \not\simeq y$. The arithmetic solver is able to produce a new model, however,
where $x = 0, y = 1, z = 0$. It creates the equality atom $x \simeq z$, which does not contradict the
EUF model.
~ End Example


Note that equalities for finite domain theories, such as bit-vectors, are determined by
complete propositional assignments in final states that is visible to all theories because
all terms are assigned values from the finite domain.


## Relevancy filtering

The E-matching and MBQI methods for instantiating quantifiers, and the methods for solving the array theory,
rely on essentially checking a constraints that a satisfying model must meet. The number of quantifier
instantiations and axiom instantiations grows with the number of constraints and they are often more harmful,
as they increase the search space, than of use.
Z3 uses _relevancy filtering_ to filter the Boolean assignments that are made visible to the theory solvers.
It is inspired by search in semantic Tableau, where establishing satisfiability of a disjunction is
split into separate branches that process the disjuncts in isolation. 

In Z3 relevancy filtering is set up during clausification. The result of clausifying a Boolean formula
is a set of _root_ clauses and a set of _definition_ clauses.
The goal is to establish a labeling of literals as _relevant_ such that

- the set of relevant literals satisfies _roots_

- there is a set of blocked literals that can be used to satisfy the clauses in _defintions_
independent of their real assignment.


The idea is that the _definition_ clauses are obtained from Tseitin transformation so they can be
grouped by the blocked literal that was used to introduce them.
For example, when clausifying $a \land b$ we have the clauses

~ MathPre
  \neg \boxed{(a \land b)} \lor a
  \neg \boxed{(a \land b)} \lor b
  \neg a \lor \neg b \lor \boxed{(a \land b)}
~

then the literal for $a \land b$ is blocked.
And recursively for clauses introduced for $a, b$ if they use a Boolean connectives
at top level.


Relevancy filtering applies a set of state transitions to update whether literals
and terms are relvant and should be exposed to the theory solvers. The transitions for setting a literal $\ell$ and node $n$ to relevant are:

* A literal $\ell$ is assigned and $\ell$ appears positively in a _root_ clause $C$ and no other literal in $C$ are relevant. 
* $\ell$ is inferred as a unit clause
* The equality $n \simeq n'$ is assigned and $n'$ is relevant.


Roots and definitions are updated as well:

* When $\ell$ is assigned relevant, then all _definitions_ where $\ell$ occurs negatively are added to _roots_.

* When a clause is added to _roots_ then:
  * If it already contains a positive relevant literal it is skipped.
  * If there is a positive literal (but no other positive relevant literals), the positive literal is set relevant.

* When a clause is added to _definitions_ and it contains a negative relevant literal, the clause is added instead to _roots_.

* When $n$ is set relevant, arguments that don't represent Boolean connectives are set relevant. If-then-else terms
are treated as Boolean connectives because they are compiled into clauses where the clausal relevancy propagation takes effect.



## The power of propagation

Efficient theory propagation can have a profound effect on overall efficiency of solving.
Congruence closure is therefore tightly integrated with Boolean propagation: when equality reasoning can infer that an equality
atom $n \simeq n'$ is true or false, it is useful to propagate this fact eagerly. Congruence closure in Z3 therefore has special
handling of equality literals. An equality $n \simeq n'$ is both a term with the binary function $\simeq$ and an atom.
Other atoms are also tracked. For example if $p(t)$ is a unary predicate then the E-node data-structure also tracks the Boolean variable
that is associated with $p(t)$. When $t$ is equated to $t'$ and $p(t')$ is assigned to true or false, then congruence closure propagates
the assignment on to $p(t)$. The propagation is justified by the premises for the equality $t \simeq t'$.
Any overhead of propagating within the E-graph is outweighed by the benefits it brings to pruning the search space.

## Dynamic Ackermann reduction

Basic implementations of CDCL(T) as presented in Section [#sec-cdcl-t] realize a proof system that has the power of regular resolution 
for propositional logic. The proof system is relatively weak even for EUF when search is limited over the space of initial set of literals
from a formula.

~ Begin Example

The following clauses are unsatisfiable over the theory of equalities, but the shortest resolution proof that only uses the atomic formulas from the input is in the order of $2^{100}$ clauses. The resolution proof involves clauses with all combinations of $b_i$ and $c_i$ for $i$ ranging from 0 to 99.
~~ Math
   a_0 \not\simeq a_{100} \land \displaystyle \bigwedge_{0 \leq i < 100}  
	(a_i \simeq b_i \lor a_i \simeq c_i) \land 
	(a_i \simeq b_i \implies b_i \simeq a_{i+1}) \land 
	(a_i \simeq c_i \implies c_i \simeq a_{i+1})
~~
The proofs are linear if we admit clauses using fresh literals of the form

~~ MathPre
    (a_i \simeq b_i \land b_i \simeq a_{i+1} \implies a_i \simeq a_{i + 1})
    (a_i \simeq c_i \land c_i \simeq a_{i+1} \implies a_i \simeq a_{i + 1})
~~
~ End Example 

Z3 dynamically introduces such auxiliary clauses based on transitivity of equality and congruence rules of the form

~ Math
   t_1 \simeq s_1, \ldots, t_k \simeq s_k \implies f(t_1, \ldots, t_k) \simeq f(s_1, \ldots, s_k)
~

The axioms are introduced for uninterpreted functions and related axioms are introduced for bit-vectors

~ Math
  \bigwedge_{i} (\mathit{bit2bool}_i(bv) \Leftrightarrow \mathit{bit2bool}_i(bv')) \implies bv \simeq bv'
~

where $(\mathit{bit2bool}_i(bv) \Leftrightarrow \mathit{bit2bool}_i(bv'))$ are compiled into new propositional literals
for each bit position $i$ of bit-vectors $bv, bv'$.

Dynamic Ackerman axioms can also, in theory, have the same effect for other theories, such as arithmetic.

~ Begin Example
The following arithmetic formula has no short vanilla CDCL(T) proof, but has a short proof if adding axioms for transitivity of inequality.

~~ Math
   a_0 > a_{100} \land \displaystyle \bigwedge_{0 \leq i < 100}  
	(a_i \leq b_i \lor a_i \leq c_i) \land 
	(a_i \leq b_i \implies b_i \leq a_{i+1}) \land 
	(a_i \leq c_i \implies c_i \leq a_{i+1})
~~
~ End Example

In Z3, the EUF and bit-vector theories track the number of times transitivity of equality and congruences are applied in conflicts.
It introduces the Ackermann axioms based on thresholds. A user can control the thresholds.
An important question for applications is _when is dynamic Ackermann reduction useful?_ 
The cost-benefit of introducing new literals into the search space has to be weighed. 
Importaly, for applications where the main expectation is that formulas are satisfiable, dynamic Ackermann reduction can be detrimental.
Users can disable dynamic Ackermann reduction to gain significant performance improvement.

## Iterative deepening for finite models

You can declare and reason about recursive functions with Z3. The SMTLIB2 standard introduces recursive function definitions
and you can add recursive function declarations over the programmatic APIs.

In the following, we define two recursive functions `length` (the length of a list) and `nat-list` (a predicate whether a list 
of integers contains only non-negative integers).

~ Begin Example

```smt
(define-fun-rec length ((ls (List Int))) Int
   (ite ((_ is nil) ls) 0 (+ 1 (length (tail ls)))))

(define-fun-rec nat-list ((ls (List Int))) Bool 
   (ite ((_ is nil) ls)
       true
       (and (>= (head ls) 0) (nat-list (tail ls)))))

(declare-const list1 (List Int))
(declare-const list2 (List Int))
(assert (> (length list1) (length list2)))
(assert (not (nat-list list2)))
(assert (nat-list list1))
```

~ End Example

To check satisfiability of a set of ground assertions of these functions, Z3 unfolds the definitions incrementally.
It uses iterative deepening to control the unfolding depth. Internally, it uses _assumption literals_ that are 
introduced by the theory solver for recursive functions to control the unfolding depth.[^simon]

[^simon]: Thanks to Simon Cuares for initiating the implementation for recursive functions.

The main CDCL(T) solver is now wrapped in an outer loop where assumption literals are supplied by theory solvers, 
and unsatisfiable cores that contain these assumption literals are presented to the theory solvers that can then
extend their depth bounds. There is an advantage to maintaining finer-grained depth bounds, that is, separate 
assumption literals for each recursive function and each recursive branch within a function [@PassmoreCIABKKM20].

The theory of sequences also uses iterative deepening to control the search for finite length sequences.
The sequence (string) theory also uses a `contains` predicate that captures when a sequence is a subsequence of another.
Positive occurrences of `contains` can be reduced to solving string equalities, but negative occurrences of `contains` 
are more tricky. They are treated as recursive functions over sequences. Their unfolding is controlled by size bounds
of the arguments to `contains`.

## Incrementality

* External and internal scopes
* Undo-trail
* equi-satisfiability

