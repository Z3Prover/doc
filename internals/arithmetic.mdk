## Arithmetic 

There are several alternate engines for arithmetical constraints in Z3. 
Some of the engines are engineered for fragments of arithmetic, such
as difference arithmetic, where all inequalities are of the form $x - y \leq k$, 
for $k$ a constant, and unit-two-variable-per-inequality (UTVPI), where
all inequalities are of the form $\pm x \pm y \leq k$. A new main solver
for general arithmetic formulas has emerged recently, with the longer term
objective of entirely replacing Z3's legacy arithmetic solver. We will here
describe internals of the newer solver in more detail.

In overview, the arithmetic solver uses a waterfall model for solving arithmetic constraints.

* First it establishes feasibility with respect to linear inequalities. Variables are solved over the rationals.
* Second, it establishes feasibility with respect to mixed integer linear constraints. Integer variables are solved if they are assigned integer values.
* Finally, it establishes feasibility with respect to non-linear polynomial constraints.


~ Figure { #fig-arithmetic; caption: "An overview of Arithmetical Decision Procedures in Z3"}
![Arithmetic]
~

[Arithmetic]: images/Arithmetic.[pdf,jpg] "Arithmetic" { width:35em }




### Rational linear arithmetic

The solver for rational linear inequalities uses a dual simplex solver as explained in [@DutertreM06].
It maintains a global set of equalities of the form $A\vec{x} = 0$, and
each variable $x_j$ is assigned lower and upper bounds during search.
The solver then checks for feasibility of the resulting system
$A\vec{x} = 0, lo_j \leq x_j \leq hi_j, \forall j$ for dynamically
changing bounds $lo_j, hi_j$.
The bounds are _justified_ by assignments in $M$. 

~ Begin Example

For the following formula

```python
  x, y = Reals('x y')
  solve([x >= 0, Or(x + y <= 2, x + 2*y >= 6), 
                 Or(x + y >= 2, x + 2*y > 4)])
```

Z3 introduces auxiliary variables $s_1, s_2$ and represents the formula as

~ MathPre
  s_1 \equiv x + y, s_2 \equiv x + 2y,
  x \geq 0, (s_1 \leq 2 \vee s_2 \geq 6), (s_1 \geq 2 \vee s_2 > 4)
~ 

Only bounds (e.g., $s_1 \leq 2$) are asserted during search.

The first two equalities form the tableau. Thus, the definitions
${s_1} \equiv x + y, {s_2} \equiv x + 2y$
produce the equalities

~ Math 
{s_1} = x + y, \ {s_2} = x + 2y
~

They are equivalent to the normal form:

~ Math
{s_1} - x - y = 0, \   
{s_2} - x - 2y = 0
~  

where ${s_1, s_2}$ are basic (dependent) and $x, y$ are non-basic.
In dual Simplex tableaux, values of a non-basic variable
$x_j$ can be chosen between $lo_j$ and $hi_j$.
The value of a basic variable is a function of non-basic variable values.
It is the unique value that satisfies the unique row where the 
basic variable occurs. Pivoting swaps basic and non-basic variables 
and is used to get values of basic variables within bounds.
For example, assume we start with a set of initial values
$x = y = s_1 = s_2 = 0$
and bounds $x \geq 0, s_1 \leq 2, s_1 \geq 2$. 
Then $s_1$ has to be 2 and it is made non-basic. 
Instead $y$ becomes basic:

~ Math
{y} + x - s_1 = 0, \ {s_2} + x - 2s_1 = 0
~

The new tableau updates the assignment of variables to
$x = 0, s_1 = 2, s_2 = 4, y = 2$. The resulting assignment
is a model for the original formula.

~ End Example

#### Finding equal variables - cheaply


~ Begin Example

From equalities $x + 1 = y, y - 1 = z$ infer that $x = z$. Based on the tableau form, the solver is presented with the original equality atoms via slack variables
  ~~ MathPre
    s_1 = x + u - y, s_2 = y - u - z, 1 \leq u \leq 1
  ~~
The tableau can be solved by setting $x = 0, y = 0, z = 0, s_1 = 1, s_2 = -1, u = 1$.
The slack variables are bounded when the equalities are asserted
  ~~ MathPre
    s_1 = x + u - y, s_2 = y - u - z, 1 \leq u \leq 1, 0 \leq s_1 \leq 0, 0 \leq s_2 \leq 0
  ~~
The original solution is no longer valid, the values for $s_1, s_2$ are out of bounds.
Pivoting re-establishes feasibility using a different solution, for example
  ~~ Math
    x = z - u - s_1, y = z - u - s_2, 1 \leq u \leq 1, 0 \leq s_1 \leq 0, 0 \leq s_2 \leq 0
  ~~
with assignment $z = 0, x = y = -1$. The variables $y, y$ have the same value,
but must they be equal under all assignments? We an establish this directly by subtracting the
right hand sides $z - u - s_1$ and $z - u - s_2$ from another and by factoring in the constant bounds obtain
the result 0. But subtraction is generally expensive if there are many bounded constants in the rows.
The arithmetical operations are not required to infer that $x = y$. Z3 uses two facts to infer the equality

* The variables $x, y$ have the same value in the current assignment.
* They are connected through a set of _binary_ rows. That is rows, that have two unfixed variables with coefficients 1 and -1, other variables in the rows are fixed.

Variables that satisfy these two criteria must be equal.
~ End Example



### Integer linear arithmetic

The mixed integer linear solver comprises of several layers. 

#### GCD consistency
Each row is first normalized by multiplying it with the the least common multiple of the denominators of each coefficient.
For each row it assembles a value from the fixed variables. 
A variable $x_j$ is fixed if the current values $lo_j$, $hi_j$ are equal. 
Then it checks that the gcd of the coefficients to variables divide the fixed value. If they don't the row has no integer solution.

~ Begin Example
  Assume we are given a row $5/6x + 3/6y + z + 5/6u = 0$, where $x, y$ are fixed at $2 \leq x \leq 2$, $-1 \leq u \leq -1$, and $z$ is the base variable.
  Then it follows that $5 + 3(y + 2z) = 0$. The term $y + 2z$ does not have any solutions over the integers because $5/3$ is not an integer. The
  greatest common divisor of coefficients to the non-fixed variables does not divide the constant offset from the fixed variables.
~ End Example



#### Patching
Following [@MouraB08], the integer solver moves non-basic variables away from their bounds in order to ensure that
basic, integer, variables are assigned integer values. The process examines each non-basic variable and checks every row where it occurs
to estimate a safe zone where its value can be changed without breaking any bounds. If the safe zone is sufficiently large to patch
a basic integer variable it performs an update. This heuristic is highly incomplete, but is able to locally patch several variables
without resorting to more expensive analyses.

~ Framed
Add example
~

#### Cubes
An important factor in solving more satisfiable integer arithmetic instances is
a method by Bromberger and Weidenbach [@BrombergerW16;@BrombergerW17].
It allows to detect feasible inequalities over integer variables 
by solving a stronger linear system.
In addition, we observed that the default strengthening proposed by Bromberger and Weidenbach
can often be avoided: integer solutions can be guaranteed from weaker systems.

We will here recall the main method and our twist.
In the following we let $A, A'$ range over integer matrices 
and $a$, $b$, $c$ over integer vectors. The 1-norm $\onenorm{A}$ of a matrix
is a column vector, such that each entry $i$ is the sum of the absolute
values of the elements in the corresponding row $A_i$. We write
$\onenorm{A_i}$ to directly access the 1-norm of a row.

A (unit) _cube_ is a polyhedron that is a Cartesian 
product of intervals of length one for each variable.
Since each variable therefore contains an integer point, the interior of the polyhedron
contains an integer point. The condition for a convex polyhedron to contain a cube can be
recast as follows:


~Example
Suppose we have $3x + y \leq 9 \wedge - 3y \leq -2$ and wish to find an integer solution. 
By solving $3x + y \leq 9 - \frac{1}{2}(3 + 1) = 7, -3y \leq -2 - \frac{1}{2}3 = -3.5$ we find
a model where $y = \frac{7}{6}, x = 0$. After rounding $y$ to $1$ and maintaining $x$ at $0$ we obtain an
integer solution to the original inequalities.
~

Our twist on Bromberger and Weidenbach's method is to avoid strengthening on selected inequalities.
First we note that _difference_ inequalities of the form $x - y \leq k$, where $x, y$ are integer variables
and $k$ is an integer offset need not be strengthened. For octagon constraints $\pm x \pm y \leq k$
there is a boundary condition: they need only require strengthening if $x, y$ are assigned at mid-points
between integral solutions. For example, if $V(x) = \frac{1}{2}$ and $V(y) = \frac{3}{2}$, for $x + y \leq 2$.
Our approach is described in detail in [@Vampire17Theorem].


#### Branching
Similar to traditional MIP branch-and-bound methods, 
the solver creates somewhat eagerly case splits on bounds 
of integer variables if the dual simplex solver fails to assign them integer values.

~ Framed
Add example
~


#### Gomory and Hermite cuts
The arithmetic solver produces Gomory cuts from rows where the basic variables are non-integers after
the non-basic variables have been pushed to the bounds. It also incorporates algorithms from [@DilligDA09;@ChristH15]
to generate cuts after the linear systems have been transformed
into Hermite matrices.


~ Framed
Add example
~

~ Framed
Configuring branch vs. cut frequency
~


### Non-linear arithmetic

Similar to solving for integer feasibility, the arithmetic solver
solves constraints over polynomials using a waterfall model for non-linear
constraints.
At the basis it maintains for every monomial 
term $x \cdot x \cdot y$ an equation
$m = x \cdot x \cdot y$, where $m$ is a variable
that represents the monomial $x \cdot x \cdot y $.
The module for non-linear arithmetic then attempts to 
establish a valuation $V$ where $V(m) = V(x) \cdot V(x) \cdot V(y)$, 
or derive a consequence that no such valuation exists.
The stages in the waterfall model are summarized as follows:

~ Framed
Add example
~


#### Bounds propagation on monomials
A relatively inexpensive step is to propagate and check bounds based on 
on non-linear constraints. For example, for $y \geq 3$, then $m = x\cdot x\cdot y \geq 3$,
if furthermore $x \leq -2$, we have the strengthened bound $m \geq 12$.
Bounds propagation can also flow from bounds on $m$ to bounds on the 
variables that make up the monomial, such that when $m \geq 8, 1 \leq y \leq 2, x \leq 0$, 
then we learn the stronger bound $x \leq -2$ on $x$.

#### Bounds propagation with Horner expansions
If $x \geq 2, y \geq -1, z \geq 2$, then $y + z \geq 1$ 
and therefore $x\cdot (y + z) \geq 2$, but we would not be
able to deduce this fact if combining bounds individually for $x\cdot y$ 
and $x \cdot z$ because no bounds can be inferred for $x \cdot y$ in isolation.
The solver therefore attempts different re-distribution of multiplication
in an effort to find stronger bounds.

#### Gr&ouml;bner reduction


We use an adaptation of ZDD (Zero suppressed decision diagrams [@Minato93;@NishinoYMN16]) to represent polynomials.
The representation has the advantage that polynomials are stored in a shared data-structure and operations
over polynomials are memoized. A polynomial over the real is represented as an acyclic graph where 
nodes are labeled by variables and edges are labeled by coefficients. For example, the polynomial $5x^2y + xy + y + x + 1$
is represented by the acyclic graph shown below.

~ Snippet

\usetikzlibrary{shapes,arrows}
\usetikzlibrary{positioning}

\tikzstyle{block} = [rectangle, draw, text centered, rounded corners, minimum height=2em]
\tikzstyle{line} = [draw, -latex']

\begin{tikzpicture}[node distance = 3em, scale = 0.2]
  \node [circle, draw] (xroot) {$x$};
  \node [circle, below of = xroot, left of= xroot, draw] (xnext) {$x$};
  \node [circle, below of = xnext, left of= xnext, draw] (y1) {$y$};
  \node [circle, below of = xnext, right of= xnext, draw] (y2) {$y$};
  \node [circle, below of = y1, left of = y1] (t1) {$5$};
  \node [circle, below of = y1, right of = y1] (t2) {$0$};
  \node [circle, right of = t2] (t3) {$1$};
  \node [circle, below of = y2, right of = y2] (t4) {$1$};
  \path [line] (xroot.west) -- (xnext.north);
  \path [line] (xroot.east) -- (y2.north);
  \path [line] (xnext.west) -- (y1.north);
  \path [line] (xnext.east) -- (y2.north);
  \path [line] (y1.west) -- (t1.north);
  \path [line] (y1.east) -- (t2.north);
  \path [line] (y2.west) -- (t3.north);
  \path [line] (y2.east) -- (t4.north);

\end{tikzpicture}
~

The root node labeled by $x$ represents the polynomial $x\cdot l + r$, 
where $l$ is the polynomial of the left sub-graph and $r$ the polynomial
of the right sub-graph. The left sub-graph is allowed to be labeled again by $x$, 
but the right sub-graph may only have nodes labeled by variables that are smaller
in a fixed ordering. The fixed ordering used in this example sets $x$ above $y$.
Then the polynomial for the right sub-graph is $y + 1$, and the polynomial with the
left sub-graph is $5xy + (y + 1)$.

The Gr&ouml;bner module performs a set of partial completion steps, preferring
to eliminate variables that can be isolated, and expanding a bounded number of super-position
steps.

~ Framed
Go over simplifications that can be derived from GB module
~

#### Incremental linearization
Following [@CimattiGIRS18] we incrementally linearize monomial constraints. 
For example, we include lemmas of the form $x = 0 \rightarrow m = 0$
and $x = 1 \rightarrow m = y$, for $m = x^2y$. 

#### NLSat
As an end-game attempt, the solver attempts to solver the non-linear constraints using a complete solver
for Tarski's fragment supported by the NLSat solver [@JovanovicM12].


### Quantified Satisfaction

#### Model-Based Quantifier Elimination

~ Framed
Define MBP for arithmetic
~

#### NLSat


### Data-structures

* Infinite precision integers and rationals

* LRU decomposition and floating point solver discontinued based on skew of SMTLIB benchmarks

* Dual simplex over a sparse tableau representation

* Dynamic axioms by front-end
  * bounds propagation
  * reduction of div/mod (and rem)